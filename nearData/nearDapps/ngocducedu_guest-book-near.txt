*GitHub Repository "ngocducedu/guest-book-near"*

'''--- .gitpod.yml ---
tasks:
  - init: yarn
    command: yarn dev
ports:
  - port: 1234
    onOpen: open-browser

'''
'''--- README.md ---
guest-book-nearspring3
==================

This [React] app was initialized with [create-near-app]

Quick Start
===========

To run this project locally:

1. Prerequisites: Make sure you've installed [Node.js] ≥ 12
2. Install dependencies: `yarn install`
3. Run the local development server: `yarn dev` (see `package.json` for a
   full list of `scripts` you can run with `yarn`)

Now you'll have a local development environment backed by the NEAR TestNet!

Go ahead and play with the app and the code. As you make code changes, the app will automatically reload.

Exploring The Code
==================

1. The "backend" code lives in the `/contract` folder. See the README there for
   more info.
2. The frontend code lives in the `/src` folder. `/src/index.html` is a great
   place to start exploring. Note that it loads in `/src/index.js`, where you
   can learn how the frontend connects to the NEAR blockchain.
3. Tests: there are different kinds of tests for the frontend and the smart
   contract. See `contract/README` for info about how it's tested. The frontend
   code gets tested with [jest]. You can run both of these at once with `yarn
   run test`.

Deploy
======

Every smart contract in NEAR has its [own associated account][NEAR accounts]. When you run `yarn dev`, your smart contract gets deployed to the live NEAR TestNet with a throwaway account. When you're ready to make it permanent, here's how.

Step 0: Install near-cli (optional)
-------------------------------------

[near-cli] is a command line interface (CLI) for interacting with the NEAR blockchain. It was installed to the local `node_modules` folder when you ran `yarn install`, but for best ergonomics you may want to install it globally:

    yarn install --global near-cli

Or, if you'd rather use the locally-installed version, you can prefix all `near` commands with `npx`

Ensure that it's installed with `near --version` (or `npx near --version`)

Step 1: Create an account for the contract
------------------------------------------

Each account on NEAR can have at most one contract deployed to it. If you've already created an account such as `your-name.testnet`, you can deploy your contract to `guest-book-nearspring3.your-name.testnet`. Assuming you've already created an account on [NEAR Wallet], here's how to create `guest-book-nearspring3.your-name.testnet`:

1. Authorize NEAR CLI, following the commands it gives you:

      near login

2. Create a subaccount (replace `YOUR-NAME` below with your actual account name):

      near create-account guest-book-nearspring3.YOUR-NAME.testnet --masterAccount YOUR-NAME.testnet

Step 2: set contract name in code
---------------------------------

Modify the line in `src/config.js` that sets the account name of the contract. Set it to the account id you used above.

    const CONTRACT_NAME = process.env.CONTRACT_NAME || 'guest-book-nearspring3.YOUR-NAME.testnet'

Step 3: deploy!
---------------

One command:

    yarn deploy

As you can see in `package.json`, this does two things:

1. builds & deploys smart contract to NEAR TestNet
2. builds & deploys frontend code to GitHub using [gh-pages]. This will only work if the project already has a repository set up on GitHub. Feel free to modify the `deploy` script in `package.json` to deploy elsewhere.

Troubleshooting
===============

On Windows, if you're seeing an error containing `EPERM` it may be related to spaces in your path. Please see [this issue](https://github.com/zkat/npx/issues/209) for more details.

  [React]: https://reactjs.org/
  [create-near-app]: https://github.com/near/create-near-app
  [Node.js]: https://nodejs.org/en/download/package-manager/
  [jest]: https://jestjs.io/
  [NEAR accounts]: https://docs.near.org/docs/concepts/account
  [NEAR Wallet]: https://wallet.testnet.near.org/
  [near-cli]: https://github.com/near/near-cli
  [gh-pages]: https://github.com/tschaub/gh-pages

'''
'''--- babel.config.js ---
module.exports = {
  presets: ['@babel/preset-env', '@babel/preset-react'],
}

'''
'''--- contract/Cargo.toml ---
[package]
name = "greeter"
version = "0.1.0"
authors = ["Near Inc <hello@near.org>"]
edition = "2018"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
near-sdk = "3.1.0"

[profile.release]
codegen-units = 1
# Tell `rustc` to optimize for small code size.
opt-level = "z"
lto = true
debug = false
panic = "abort"
# Opt into extra safety checks on arithmetic operations https://stackoverflow.com/a/64136471/249801
overflow-checks = true

[workspace]
members = []

'''
'''--- contract/README.md ---
guest-book-nearspring3 Smart Contract
==================

A [smart contract] written in [Rust] for an app initialized with [create-near-app]

Quick Start
===========

Before you compile this code, you will need to install Rust with [correct target]

Exploring The Code
==================

1. The main smart contract code lives in `src/lib.rs`. You can compile it with
   the `./compile` script.
2. Tests: You can run smart contract tests with the `./test` script. This runs
   standard Rust tests using [cargo] with a `--nocapture` flag so that you
   can see any debug info you print to the console.

  [smart contract]: https://docs.near.org/docs/develop/contracts/overview
  [Rust]: https://www.rust-lang.org/
  [create-near-app]: https://github.com/near/create-near-app
  [correct target]: https://github.com/near/near-sdk-rs#pre-requisites
  [cargo]: https://doc.rust-lang.org/book/ch01-03-hello-cargo.html

'''
'''--- contract/build.sh ---
#!/bin/bash
set -e

RUSTFLAGS='-C link-arg=-s' cargo build --target wasm32-unknown-unknown --release
mkdir -p ./out
cp target/wasm32-unknown-unknown/release/*.wasm ./out/guestbook-contract.wasm
'''
'''--- contract/compile.js ---
// This file does two things:
//
// 1. Compile the Rust contract using cargo (see buildCmd below). This will
//    create a wasm file in the 'build' folder.
// 2. Create a symbolic link (symlink) to the generated wasm file in the root
//    project's `out` folder, for easy use with near-cli.
//
// First, import some helper libraries. `shelljs` is included in the
// devDependencies of the root project, which is why it's available here. It
// makes it easy to use *NIX-style scripting (which works on Linux distros,
// macOS, and Unix systems) on Windows as well.
const sh = require('shelljs')

// Figure out which directory the user called this script from, which we'll use
// later to set up the symlink.
const calledFromDir = sh.pwd().toString()

// For the duration of this script, we want to operate from within the
// Rust project's folder. Let's change into that directory.
sh.cd(__dirname)

// You can call this script with `node compile.js` or `node compile.js
// --debug`. Let's set a variable to track whether `--debug` was used.
const debug = process.argv.pop() === '--debug'

// You can call this script with `node compile.js` or `node compile.js --debug`.
// Let's set a variable to track whether `--debug` was used.
// Note: see other flags in ./cargo/config. Unfortunately, you cannot set the
// `--target option` in Cargo.toml.
const buildCmd = debug
  ? 'cargo build --target wasm32-unknown-unknown'
  : 'cargo build --target wasm32-unknown-unknown --release'

// Execute the build command, storing exit code for later use
const { code } = sh.exec(buildCmd)

// Assuming this is compiled from the root project directory, link the compiled
// contract to the `out` folder –
// When running commands like `near deploy`, near-cli looks for a contract at
// <CURRENT_DIRECTORY>/out/main.wasm
if (code === 0 && calledFromDir !== __dirname) {
  const linkDir = `${calledFromDir}/out`
  const link = `${calledFromDir}/out/main.wasm`
  const packageName = require('fs').readFileSync(`${__dirname}/Cargo.toml`).toString().match(/name = "([^"]+)"/)[1]
  const outFile = `./target/wasm32-unknown-unknown/${debug ? 'debug' : 'release'}/${packageName}.wasm`
  sh.mkdir('-p', linkDir)
  sh.rm('-f', link)
  //fixes #831: copy-update instead of linking .- sometimes sh.ln does not work on Windows
  sh.cp('-u',outFile,link)
}

// exit script with the same code as the build command
process.exit(code)

'''
'''--- contract/src/lib.rs ---
/*
 * This is an example of a Rust smart contract with two simple, symmetric functions:
 *
 * 1. set_greeting: accepts a greeting, such as "howdy", and records it for the user (account_id)
 *    who sent the request
 * 2. get_greeting: accepts an account_id and returns the greeting saved for it, defaulting to
 *    "Hello"
 *
 * Learn more about writing NEAR smart contracts with Rust:
 * https://github.com/near/near-sdk-rs
 *
 */

// To conserve gas, efficient serialization is achieved through Borsh (http://borsh.io/)
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::{env, near_bindgen, AccountId, Timestamp, Balance, setup_alloc};
use near_sdk::collections::UnorderedMap;
use near_sdk::serde::{Serialize, Deserialize};

setup_alloc!();

// Structs in Rust are similar to other languages, and may include impl keyword as shown below
// Note: the names of the structs are not important when calling the smart contract, but the function names are
#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct HelloNear {
    records: UnorderedMap<AccountId, Messenger>,
    total_mess: u64
}

impl Default for HelloNear {
  fn default() -> Self {
    Self {
      records: UnorderedMap::new(b"a".to_vec()),
      total_mess: 0
    }
  }
}

#[derive(BorshDeserialize, BorshSerialize, Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct Messenger {
    pub owner_id: AccountId,
    pub mess: String,
    pub donate: Balance,
    pub time: Timestamp
}

#[near_bindgen]
impl HelloNear {
    
    // get lists messenger and donate
    pub fn get_leaderboard_donate(& self) -> Vec<Messenger> {
        let n =  self.records.len() as u64;

        self.records.iter()
        .skip(0)
        .take(n as usize)
        .map(|id| { let (i,mess) = id;  return self.records.get(&i).unwrap() })
        .collect()
    }

    #[payable]
    pub fn add_mess_and_donate(&mut self, message: String) {
        let account_id = env::predecessor_account_id();
        
        let exist_account = &self.records.get(&account_id);

        assert!(message.len() > 0, "MESS CANT EMPTY");
        self.total_mess+= 1;

        let mess_donate = if let Some(exist_account) = exist_account {
            Messenger {
                owner_id: account_id.clone(),
                mess: message,
                donate: exist_account.donate + env::attached_deposit(),
                time: env::block_timestamp(),
            }
        } else {
            Messenger {
                owner_id: account_id.clone(),
                mess: message,
                donate: env::attached_deposit(),
                time: env::block_timestamp(),
            }
        };

        self.records.insert(&account_id, &mess_donate);
    }

    
}

/*
 * The rest of this file holds the inline tests for the code above
 * Learn more about Rust tests: https://doc.rust-lang.org/book/ch11-01-writing-tests.html
 *
 * To run from contract directory:
 * cargo test -- --nocapture
 *
 * From project root, to run in combination with frontend tests:
 * yarn test
 *
 */
#[cfg(test)]
mod tests {
    use super::*;
    use near_sdk::MockedBlockchain;
    use near_sdk::{testing_env, VMContext};

    // mock the context for testing, notice "signer_account_id" that was accessed above from env::
    fn get_context(input: Vec<u8>, is_view: bool) -> VMContext {
        VMContext {
            current_account_id: "alice_near".to_string(),
            signer_account_id: "bob_near".to_string(),
            signer_account_pk: vec![0, 1, 2],
            predecessor_account_id: "carol_near".to_string(),
            input,
            block_index: 0,
            block_timestamp: 0,
            account_balance: 0,
            account_locked_balance: 0,
            storage_usage: 0,
            attached_deposit: 0,
            prepaid_gas: 10u64.pow(18),
            random_seed: vec![0, 1, 2],
            is_view,
            output_data_receivers: vec![],
            epoch_height: 19,
        }
    }

    
}
'''
'''--- package.json ---
{
  "name": "guest-book-nearspring3",
  "version": "0.1.0",
  "license": "UNLICENSED",
  "scripts": {
    "build": "npm run build:web",
    "build:contract": "node contract/compile.js",
    "build:contract:debug": "node contract/compile.js --debug",
    "build:web": "parcel build src/index.html --public-url ./",
    "dev:deploy:contract": "near dev-deploy",
    "deploy:contract": "near deploy",
    "deploy:pages": "gh-pages -d dist/",
    "deploy": "npm run build && npm run deploy:contract && npm run deploy:pages",
    "prestart": "npm run build:contract:debug && npm run dev:deploy:contract",
    "start": "echo The app is starting! It will automatically open in your browser when ready && env-cmd -f ./neardev/dev-account.env parcel src/index.html --open",
    "dev": "nodemon --watch contract/src -e rs --exec \"npm run start\"",
    "test": "npm run build:contract:debug && cd contract && cargo test -- --nocapture && cd .. && jest test --runInBand"
  },
  "devDependencies": {
    "@babel/core": "~7.14.0",
    "@babel/preset-env": "~7.14.0",
    "@babel/preset-react": "~7.13.13",
    "babel-jest": "~26.6.2",
    "env-cmd": "~10.1.0",
    "gh-pages": "~3.1.0",
    "jest": "~26.6.2",
    "jest-environment-node": "~26.6.2",
    "near-cli": "~2.1.1",
    "nodemon": "~2.0.3",
    "parcel-bundler": "~1.12.4",
    "react-test-renderer": "~17.0.1",
    "shelljs": "~0.8.4"
  },
  "dependencies": {
    "@near-wallet-selector/core": "^3.0.2",
    "@near-wallet-selector/near-wallet": "^3.0.2",
    "@near-wallet-selector/sender": "^3.0.2",
    "near-api-js": "~0.44.2",
    "react": "~17.0.1",
    "react-dom": "~17.0.1",
    "regenerator-runtime": "~0.13.5"
  },
  "resolutions": {
    "@babel/preset-env": "7.13.8"
  },
  "jest": {
    "moduleNameMapper": {
      "\\.(jpg|ico|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$": "<rootDir>/src/__mocks__/fileMock.js",
      "\\.(css|less)$": "<rootDir>/src/__mocks__/fileMock.js"
    },
    "setupFiles": [
      "<rootDir>/src/jest.init.js"
    ],
    "testEnvironment": "near-cli/test_environment",
    "testPathIgnorePatterns": [
      "<rootDir>/contract/",
      "<rootDir>/node_modules/"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

'''
'''--- src/App.js ---
import 'regenerator-runtime/runtime'
import React, {useEffect, useState, useCallback} from 'react'
import { selector } from './utils'
import { utils, transactions } from "near-api-js";
import { AccountView, CodeResult } from "near-api-js/lib/providers/provider";
import './global.css'
import { providers } from 'near-api-js';

import getConfig from './config'
const { networkId } = getConfig(process.env.NODE_ENV || 'development')

export default function App() {
 const selector = window.selector;
 
  // use React Hooks to store greeting in component state
  const [messages, setMessages] = useState([]);
  const [greeting, set_greeting] = React.useState()
  const [donate, setDonate] = React.useState(0);
  const [leaderboard, setLeaderboar] = React.useState([]);
  const [reload, setReload] = useState(false);

  // when the user has not yet interacted with the form, disable the button
  const [buttonDisabled, setButtonDisabled] = React.useState(true)

  // after submitting the form, we want to show Notification
  const [showNotification, setShowNotification] = React.useState(false)
  
  if (!window.accountId) {
    selector.getAccounts().then((value) => {
      window.accountId = value[0].accountId;
      setAccountId(null);
      setReload(!reload)
    });
    }
    
  const logout = () => {
    
    selector.signOut().then((value)=>{
      window.location.reload();
    }).catch((err) => {
      console.log("Failed to sign out.");
      alert('Failed to sign out.');
    });
    //window.walletConnection.signOut()
    // reload page
    //window.location.replace(window.location.origin + window.location.pathname)
  }
  
  const login = () => {
    selector.show()
    setReload(!reload)
  }

  // The useEffect hook can be used to fire side-effects during render
  // Learn more: https://reactjs.org/docs/hooks-intro.html

  const getMessages = useCallback(() => {
    const provider = new providers.JsonRpcProvider({
      url: selector.network.nodeUrl,
    });

    return provider
      .query({
        request_type: "call_function",
        account_id: selector.getContractId(),
        method_name: "get_leaderboard_donate",
        args_base64: "",
        finality: "optimistic",
      })
      .then((res) => JSON.parse(Buffer.from(res.result).toString()));
  }, [selector]);

  useEffect(() => {
    // TODO: don't just fetch once; subscribe!
    getMessages().then(obj => {
      let sorted = obj.sort(function (a, b) {
        return  b.donate - a.donate ;
      });
      setLeaderboar(sorted)
    });

    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  // useEffect(
  //   () => {
  //     // in this case, we only care to query the contract when signed in
  //     if (window.walletConnection.isSignedIn()) {

  //       // window.contract is set by initContract in index.js
  //       window.contract.get_leaderboard_donate({ account_id: window.accountId })
  //         .then(obj => {
  //           let sorted = obj.sort(function (a, b) {
  //             return  b.donate - a.donate ;
  //           });
  //           setLeaderboar(sorted)
  //         })
  //     }
  //   },

    // The second argument to useEffect tells React when to re-run the effect
    // Use an empty array to specify "only run on first render"
    // This works because signing into NEAR Wallet reloads the page
  //   []
  // )

  useEffect(
    () => {
      let sorted = leaderboard.sort(function (a, b) {
        return  parseInt(b.donate) - parseInt(a.donate) ;
      });
      setLeaderboar(sorted)

    },
    [leaderboard]
  )

  
  // if not signed in, return early with sign-in prompt

  return (
    <div>
      {!window.selector.isSignedIn() ? (
        <main>
          <h1>NEAR Guest Book</h1>
          <p class="mt-4 mb-8 mx-auto text-center text-indigo-600"><strong>Go ahead and sign in to try Guest Book!</strong> </p>

          <p style={{ textAlign: 'center', marginTop: '2.5em' }}>
            <button onClick={login}>Log in</button>
          </p>
        </main>
      ) : (
        // use React Fragment, <>, to avoid wrapping elements in unnecessary divs
        <>
        <button className="link " style={{ float: 'right', border: '1px solid rgb(21 56 84)' }} onClick={logout}>
          Sign out
        </button>
        <main>
            {console.log("mess",messages)}
          <h1>
            <label
              htmlFor="greeting"
              style={{
                color: 'var(--secondary)',
                borderBottom: '1px solid var(--secondary)',
                fontSize: '5px'
              }}
            >
              
            </label>
            {' '/* React trims whitespace around tags; insert literal space character when needed */}
            Sign the guest book {window.accountId != null ? window.accountId.slice(0,20) : ''}!
          </h1>
          <form onSubmit={async event => {
            event.preventDefault()

            // get elements from the form using their id attribute
            const { fieldset, greeting } = event.target.elements

            // hold onto new user-entered value from React's SynthenticEvent for use after `await` call
            const newGreeting = greeting.value

            // disable the form while the value gets updated on-chain
            fieldset.disabled = true

            // try {
            //   // make an update call to the smart contract
            //   await window.contract.add_mess_and_donate({
            //     // pass the value that the user entered in the greeting field
            //     message: newGreeting
            //   },
            //   300000000000000,
            //   utils.format.parseNearAmount(donate.toString())
            //   )
              
            // } catch (e) {
            //   alert(
            //     'Something went wrong! ' +
            //     'Maybe you need to sign out and back in? ' +
            //     'Check your browser console for more info.'
            //   )
            //   throw e
            // } finally {
            //   // re-enable the form, whether the call succeeded or failed
            //   fieldset.disabled = false
            // }

            selector
              .signAndSendTransaction({
                signerId: window.accountId,
                actions: [
                  {
                    type: "FunctionCall",
                    params: {
                      methodName: "add_mess_and_donate",
                      args: { message: newGreeting },
                      gas: 300000000000000,
                      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                      deposit: utils.format.parseNearAmount(donate.toString()),
                    },
                  },
                ],
              })
              // .catch((err) => {
              //   alert("Failed to add message");
              //   console.log("Failed to add message");

              //   throw err;
              // })
              .then(() => {
                return getMessages().then(obj => {
                  let sorted = obj.sort(function (a, b) {
                    return  b.donate - a.donate ;
                  });
                  setLeaderboar(sorted)
                })
                  .catch((err) => {
                    console.log("Failed to refresh messages");
                    throw err;
                  });
              })
              .catch((err) => {
                console.error(err);

                fieldset.disabled = false;
              });

            // update local `greeting` variable to match persisted value
            set_greeting(newGreeting)

            // show Notification
            setShowNotification(true)

            // remove Notification again after css animation completes
            // this allows it to be shown again next time the form is submitted
            setTimeout(() => {
              setShowNotification(false)
            }, 11000)
          }}>
            {leaderboard.filter(obj => obj.owner_id == window.accountId)[0] && <p class="mt-4 mb-8 mx-auto text-center text-indigo-600"><strong>Hello, “How are you today?” <br/> <br/>You know, "donations more , get the higher the ratings"</strong> </p>}
            <fieldset id="fieldset">
              <label
                htmlFor="greeting"
                style={{
                  display: 'block',
                  color: 'var(--gray)',
                  marginBottom: '0.5em'
                }}
              >
                Enter your message:
              </label>
              <div style={{ display: 'flex' }} class="highlight">
                <label htmlFor="message">Message:</label>
                <input
                  autoComplete="off"
                  defaultValue={greeting}
                  id="greeting"
                  onChange={e => setButtonDisabled(e.target.value === greeting)}
                  style={{ flex: 1 }}
                />
              </div>
              <div>
                <label for="donation">Donation (optional):</label>
                <input
                  placeholder={"0.0"}
                  min="0"
                  step="0.01"
                  type={"number"} 
                  autoComplete="off"
                  id="donation"
                  onChange={e => setDonate(e.target.value)}
                  style={{ flex: 1 }}
                />
                <span title="NEAR Tokens">Ⓝ</span>
                <div style={{display:'flex', alignItems: 'center' }}>
                  <img src="https://www.clipartmax.com/png/full/187-1872187_graphic-of-hand-putting-money-in-a-donation-box-donate-icon-red.png" class="img-donate"/>
                  <p >Cumulative when donating multiple times:</p>
                </div>  
                
              </div>
              
              <button
                  disabled={buttonDisabled}
                  style={{ borderRadius: '5px 5px 5px 0' }}
                >
                  Sign
              </button>
            </fieldset>
            
          </form>
          <h2>
            Top Rank Donation with Message
          </h2>
          <ol>
            {console.log(messages)}
            {leaderboard.map((obj,index) => (
              
              <li key={index} class={index<3 ? "is-premium" : "no-premium"}>
                
                <div>
                  <span> 
                    <strong>{obj.owner_id != null ? obj.owner_id.slice(0,20) : ''}</strong>
                    {index<3 ? <img src="https://e7.pngegg.com/pngimages/486/307/png-clipart-rank-medal-medal-hd-pn-chart-ribbon-medal.png" class="img-premium"/> : <p></p>}
                  </span>
                  <span class="time-right">{new Date(obj.time/1000000).toLocaleString()}</span>
                </div>
                <div>
                  Message: {obj.mess}
                </div>
                <div>
                  Total Donation: {Number((obj.donate/(10**24)).toFixed(2)) } Ⓝ
                </div>
              </li>
            ))}
          </ol>
          <hr />
          
        </main>
        {showNotification && <Notification />}
      </>
      )}
    </div>
  )

  

}

// this component gets rendered by App after the form is submitted
function Notification() {
  const urlPrefix = `https://explorer.${networkId}.near.org/accounts`
  return (
    <aside>
      <a target="_blank" rel="noreferrer" href={`${urlPrefix}/${window.accountId}`}>
        {window.accountId}
      </a>
      {' '/* React trims whitespace around tags; insert literal space character when needed */}
      called method: 'set_greeting' in contract:
      {' '}
      <a target="_blank" rel="noreferrer" href={`${urlPrefix}/${window.contract.contractId}`}>
        {window.contract.contractId}
      </a>
      <footer>
        <div>✔ Succeeded</div>
        <div>Just now</div>
      </footer>
    </aside>
  )
}

'''
'''--- src/__mocks__/fileMock.js ---
// NOTE: This is used to mock resource imports in JSX for tests
module.exports = '' 

'''
'''--- src/assets/logo-black.svg ---
<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#24272a"/><stop offset=".42" stop-color="#24272a" stop-opacity="0"/><stop offset=".59" stop-color="#24272a" stop-opacity="0"/><stop offset=".81" stop-color="#24272a"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#24272a"/></svg>
'''
'''--- src/assets/logo-white.svg ---
<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#fff"/><stop offset=".42" stop-color="#fff" stop-opacity="0"/><stop offset=".59" stop-color="#fff" stop-opacity="0"/><stop offset=".81" stop-color="#fff"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#fff"/></svg>
'''
'''--- src/config.js ---
const CONTRACT_NAME = process.env.CONTRACT_NAME ||'guest-book-nearspring3'

function getConfig(env) {
  switch (env) {

  case 'production':
  case 'testnet':
  return {
    networkId: 'testnet',
    nodeUrl: 'https://rpc.testnet.near.org',
    contractName: CONTRACT_NAME,
    walletUrl: 'https://wallet.testnet.near.org',
    helperUrl: 'https://helper.testnet.near.org',
    explorerUrl: 'https://explorer.testnet.near.org',
  }
  case 'mainnet':
    return {
      networkId: 'mainnet',
      nodeUrl: 'https://rpc.mainnet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.near.org',
      helperUrl: 'https://helper.mainnet.near.org',
      explorerUrl: 'https://explorer.mainnet.near.org',
    }
  case 'development':
  
  case 'betanet':
    return {
      networkId: 'betanet',
      nodeUrl: 'https://rpc.betanet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.betanet.near.org',
      helperUrl: 'https://helper.betanet.near.org',
      explorerUrl: 'https://explorer.betanet.near.org',
    }
  case 'local':
    return {
      networkId: 'local',
      nodeUrl: 'http://localhost:3030',
      keyPath: `${process.env.HOME}/.near/validator_key.json`,
      walletUrl: 'http://localhost:4000/wallet',
      contractName: CONTRACT_NAME,
    }
  case 'test':
  case 'ci':
    return {
      networkId: 'shared-test',
      nodeUrl: 'https://rpc.ci-testnet.near.org',
      contractName: CONTRACT_NAME,
      masterAccount: 'test.near',
    }
  case 'ci-betanet':
    return {
      networkId: 'shared-test-staging',
      nodeUrl: 'https://rpc.ci-betanet.near.org',
      contractName: CONTRACT_NAME,
      masterAccount: 'test.near',
    }
  default:
    throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`)
  }
}

module.exports = getConfig

'''
'''--- src/global.css ---
* {
  box-sizing: border-box;
}

html {
  --bg: #efefef;
  --fg: #1e1e1e;
  --gray: #555;
  --light-gray: #ccc;
  --shadow: #e6e6e6;
  --success: rgb(90, 206, 132);
  --primary: #3499eb;
  --secondary: #0072CE;

  background-color: var(--bg);
  color: var(--fg);
  font-family: -apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica,Arial,sans-serif;
  font-size: calc(0.9em + 0.5vw);
  line-height: 1.3;
}

body {
  margin: 0;
  padding: 1em;
}

main {
  margin: 0 auto;
  max-width: 25em;
}

h1 {
  background-image: url(assets/love-mess.png);
  background-position: center 1em;
  background-repeat: no-repeat;
  background-size: auto 1.5em;
  margin-top: 0;
  padding: 3.5em 0 0.5em;
  text-align: center;
}

a,
.link {
  color: var(--primary);
  text-decoration: none;
}
a:hover,
a:focus,
.link:hover,
.link:focus {
  text-decoration: underline;
}
a:active,
.link:active {
  color: var(--secondary);
}

button, input {
  font: inherit;
  outline: none;
}

button {
  position: relative;
    transition: top 50ms;
  background-color: var(--secondary);
  border-radius: 5px;
  border: none;
  color: #efefef;
  cursor: pointer;
  padding: 0.3em 0.75em;
  transition: transform 30ms;
}
button:hover, button:focus {
  box-shadow: 0 0 10em rgba(255, 255, 255, 0.2) inset;
}
button:active {
  box-shadow: 0 0 10em rgba(0, 0, 0, 0.1) inset;
}
button.link {
  background: none;
  border: none;
  box-shadow: none;
  display: inline;
}
[disabled] button, button[disabled] {
  box-shadow: none;
  
  color: gray;
  cursor: not-allowed;
  transform: none;
}
[disabled] button {
  text-indent: -900em;
  width: 2em;
  position: relative;
}
[disabled] button:after {
  content: " ";
  display: block;
  width: 0.8em;
  height: 0.8em;
  border-radius: 50%;
  border: 2px solid #fff;
  border-color: var(--fg) transparent var(--fg) transparent;
  animation: loader 1.2s linear infinite;
  position: absolute;
  top: 0.45em;
  right: 0.5em;
}
@keyframes loader {
  0% { transform: rotate(0deg) }
  100% { transform: rotate(360deg) }
}

fieldset {
  border: none;
  padding: 2em 0;
}

input {
  background-color: var(--shadow);
  border: none;
  border-radius: 5px 0 0 5px;
  caret-color: var(--primary);
  color: inherit;
  padding: 0.25em 1em;
}
input::selection {
  background-color: var(--secondary);
  color: #efefef;
}
input:focus {
  box-shadow: 0 0 10em rgba(0, 0, 0, 0.02) inset;
}

input[type=number] {
  text-align: center;
  border-bottom: 0.1em solid var(--primary);
  margin: 0 1em;
  width: 4em;
  padding-left: 0.5em;
}

button, input {
  background: transparent;
  color: inherit;
  cursor: pointer;
  font: inherit;
  outline: none;
}
input {
  border: none;
  flex: 1;
}
input[type="number" i] {
  padding: 1px 2px;
}

.highlight, button {
  border-radius: 5px;
  border-color: var(--primary);
  border: 0.1em solid var(--primary);
  padding: 0.5em 1em;
}
code {
  color: var(--gray);
}

li {
  padding-bottom: 1em;
}

aside {
  animation: notify ease-in-out 10s;
  background-color: var(--shadow);
  border-radius: 5px;
  bottom: 0;
  font-size: 0.8em;
  margin: 1em;
  padding: 1em;
  position: fixed;
  transform: translateY(10em);
  right: 0;
}
aside footer {
  display: flex;
  font-size: 0.9em;
  justify-content: space-between;
  margin-top: 0.5em;
}
aside footer *:first-child {
  color: var(--success);
}
aside footer *:last-child {
  color: var(--gray);
}

button:hover {
  top: -1px;
  border-color: var(--secondary);
}
.highlight:focus, .highlight:focus-within, .highlight:hover, button:focus, button:focus-within, button:hover {
  border-color: var(--secondary);
}

.is-premium, .no-premium {
  padding: 0.35em;
  margin-left: -0.5em;
  border: 1px solid #ccc;
  color: #000;
}

.is-premium {
  background-color: #f0f9b8;
}

.no-premium {
  background-color: #f5f5f5;
}
.img-no-premium, .img-premium {
  width: 20px;
  margin-left: 5px;
}
.time-right {
  float: right;
  font-size: smaller;
}

.img-donate {
  width: 40px;
  height: 40px;
}

.text-indigo-600 {
  --tw-text-opacity: 1;
  color: rgb(79 70 229/var(--tw-text-opacity));
  text-align: center;
}

@keyframes notify {
  0% { transform: translateY(10em) }
  5% { transform: translateY(0) }
  95% { transform: translateY(0) }
  100% { transform: translateY(10em) }
}

@media (prefers-color-scheme: dark) {
  html {
    --bg: #1e1e1e;
    --fg: #efefef;
    --gray: #aaa;
    --shadow: #2a2a2a;
    --light-gray: #444;
  }
  h1 {
    background-image: url(assets/logo-white.svg);
  }
  input:focus {
    box-shadow: 0 0 10em rgba(255, 255, 255, 0.02) inset;
  }
}

'''
'''--- src/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="./assets/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="apple-touch-icon" href="./assets/favicon.ico" />
    <title>Welcome to NEAR with React</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
    <script src="./index.js"></script>
  </body>
</html>

'''
'''--- src/index.js ---
import React from 'react'
import ReactDOM from 'react-dom'
import App from './App'
import { initContract } from './utils'

window.nearInitPromise = initContract()
  .then(() => {
    ReactDOM.render(
      <App />,
      document.querySelector('#root')
    )
  })
  .catch(console.error)

'''
'''--- src/jest.init.js ---
import 'regenerator-runtime/runtime'

'''
'''--- src/main.test.js ---
beforeAll(async function () {
  // NOTE: nearlib and nearConfig are made available by near-cli/test_environment
  const near = await nearlib.connect(nearConfig)
  window.accountId = nearConfig.contractName
  window.contract = await near.loadContract(nearConfig.contractName, {
    viewMethods: ['get_greeting'],
    changeMethods: [],
    sender: window.accountId
  })

  window.walletConnection = {
    requestSignIn() {
    },
    signOut() {
    },
    isSignedIn() {
      return true
    },
    getAccountId() {
      return window.accountId
    }
  }
})

test('get_greeting', async () => {
  const message = await window.contract.get_greeting({ account_id: window.accountId })
  expect(message).toEqual('Hello')
})

'''
'''--- src/utils.js ---
import { connect, Contract, keyStores, WalletConnection } from 'near-api-js'
import getConfig from './config'
import * as nearAPI from 'near-api-js';
import NearWalletSelector from "@near-wallet-selector/core";
import { setupNearWallet } from "@near-wallet-selector/near-wallet";
import { setupSender } from "@near-wallet-selector/sender";
import nearWalletIconUrl from "@near-wallet-selector/near-wallet/assets/near-wallet-icon.png";
import senderIconUrl from "@near-wallet-selector/sender/assets/sender-icon.png";

const CONTRACT_NAME = 'guestbook.louiskate.testnet';
const nearConfig = getConfig(process.env.NEAR_ENV || 'testnet', CONTRACT_NAME);
// Initialize contract & set global variables
export async function initContract() {
  // Initialize connection to the NEAR testnet
  const near = await connect(Object.assign({ deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() } }, nearConfig))

  // Initializing Wallet based Account. It can work with NEAR testnet wallet that
  // is hosted at https://wallet.testnet.near.org
  window.walletConnection = new WalletConnection(near)

  // Getting the Account ID. If still unauthorized, it's just empty string
  //window.accountId = window.walletConnection.getAccountId()

  // Initializing our contract APIs by contract name and configuration
  window.contract = await new Contract(window.walletConnection.account(), nearConfig.contractName, {
    // View methods are read only. They don't modify the state, but usually return some value.
    viewMethods: ['get_leaderboard_donate'],
    // Change methods can modify the state. But you don't receive the returned value when called.
    changeMethods: ['add_mess_and_donate'],
  })

  const selector = await NearWalletSelector.init({
    network: "testnet",
    contractId: CONTRACT_NAME,
    wallets: [
      setupNearWallet({iconUrl: nearWalletIconUrl}),
      setupSender({iconUrl: senderIconUrl}),
  
    ],
  });

  window.selector = selector;

}

'''
'''--- src/wallet/login/index.html ---
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/css/bootstrap.min.css" integrity="sha384-GJzZqFGwb1QTTN6wy59ffF1BuGJpLSa9DkKMp0DgiMDm4iYMj70gZWKYbI706tWS" crossorigin="anonymous">
</head>
<body style="background: #fff; margin-top: 3em">
  <div>For local account login, Please run the following command in NEAR CLI, then enter account id here.
  </div>
  <div>
      <code id="shell-command"></code>
  </div>
  <input type="text" id="accountId" name="accountId" placeholder="Account id"></input>
  <button type="button" onClick="done()">done</button>
  <script>
    const currentUrl = new URL(window.location.href);
    const message = `NODE_ENV=local near create_account {newAccountId} --masterAccount {masterAccountId} --publicKey ${currentUrl.searchParams.get('public_key')} --initialAmount 10000000000000000000`;
    document.getElementById('shell-command').innerText = message;

    function done() {
      const successUrl = new URL(currentUrl.searchParams.get('success_url'));
      successUrl.searchParams.set('account_id', document.getElementById('accountId').value);
      successUrl.searchParams.set('public_key', currentUrl.searchParams.get('public_key'));
      window.location.assign(successUrl.toString());
    }
  </script>
</body>
</html>
'''