*GitHub Repository "jorgeavaldez/champagne"*

'''--- README.md ---
# champagne

## Quick Start
To run this project locally:

**Prerequisites**: Make sure you've installed docker

```bash
# install deps
yarn

# Deploy smart contracts
yarn build:contract && yarn dev:deploy:contract

# Start in docker
docker-compose up
```

Now you'll have a local development environment backed by the NEAR TestNet!

Go ahead and play with the app and the code. As you make code changes, the app will automatically reload.

## Exploring The Code
- Contracts live in contracts.near-linkdrop, a submodule pointing to [this repo](https://github.com/jorgeavaldez/contracts.near-linkdrop)
- `pages` contains a list of Next.js pages and api routes
- `src` contains components and helper modules for talking to the blockchain and social networks

## Deploy
Every smart contract in NEAR has its [own associated account][NEAR accounts]. When you run `yarn dev`, your smart contract gets deployed to the live NEAR TestNet with a throwaway account. When you're ready to make it permanent, here's how.

### Step 0: Install near-cli (optional)

[near-cli] is a command line interface (CLI) for interacting with the NEAR blockchain. It was installed to the local `node_modules` folder when you ran `yarn install`, but for best ergonomics you may want to install it globally:

    yarn install --global near-cli

Or, if you'd rather use the locally-installed version, you can prefix all `near` commands with `npx`

Ensure that it's installed with `near --version` (or `npx near --version`)

### Step 1: Create an account for the contract

Each account on NEAR can have at most one contract deployed to it. If you've already created an account such as `your-name.testnet`, you can deploy your contract to `champagne.your-name.testnet`. Assuming you've already created an account on [NEAR Wallet], here's how to create `champagne.your-name.testnet`:

1. Authorize NEAR CLI, following the commands it gives you:

      near login

2. Create a subaccount (replace `YOUR-NAME` below with your actual account name):

      near create-account champagne.YOUR-NAME.testnet --masterAccount YOUR-NAME.testnet

Step 2: set contract name in code
---------------------------------

Modify the line in `src/config.js` that sets the account name of the contract. Set it to the account id you used above.

    const CONTRACT_NAME = process.env.CONTRACT_NAME || 'champagne.YOUR-NAME.testnet'

Step 3: deploy!
---------------

One command:

    yarn deploy

As you can see in `package.json`, this does two things:

1. builds & deploys smart contract to NEAR TestNet
2. builds & deploys frontend code to GitHub using [gh-pages]. This will only work if the project already has a repository set up on GitHub. Feel free to modify the `deploy` script in `package.json` to deploy elsewhere.

Troubleshooting
===============

On Windows, if you're seeing an error containing `EPERM` it may be related to spaces in your path. Please see [this issue](https://github.com/zkat/npx/issues/209) for more details.

  [React]: https://reactjs.org/
  [create-near-app]: https://github.com/near/create-near-app
  [Node.js]: https://nodejs.org/en/download/package-manager/
  [jest]: https://jestjs.io/
  [NEAR accounts]: https://docs.near.org/docs/concepts/account
  [NEAR Wallet]: https://wallet.testnet.near.org/
  [near-cli]: https://github.com/near/near-cli
  [gh-pages]: https://github.com/tschaub/gh-pages

---

This [React] app was initialized with [create-near-app]
'''
'''--- babel.config.js ---
module.exports = {

    presets: [
        "@babel/preset-typescript",
        '@babel/preset-react', // necessary for all .jsx files
        [
            "next/babel",
            {
              "preset-env": {
                "modules": "commonjs"
              }
            }
        ]
    ],
  
    // fullcalendar attempts to import its own CSS files, but next.js does not allow this.
    // throw away these statements before they arrive at next.js,
    // but you'll need to import them manually in pages/_app.jsx.
    // will also work for any other 3rd-party packages that attempt to do this.
    overrides: [{
      include: [
        './node_modules'
      ],
      plugins: [
        ['babel-plugin-transform-require-ignore', {
          extensions: ['.css']
        }]
      ]
    }]
  
  }  
'''
'''--- compile.js ---
// This file does two things:
//
// 1. Compile the Rust contract using cargo in docker (see buildCmd below). This will
//    create a wasm file in the 'target' folder.
// 2. Create a symbolic link (symlink) to the generated wasm file in the root
//    project's `out` folder, for easy use with near-cli.
//
const sh = require("shelljs");

// Figure out which directory the user called this script from, which we'll use
// later to set up the symlink.
const calledFromDir = sh.pwd().toString();

const debug = process.argv.pop() === "--debug";

const buildCmd = debug
  ? "docker-compose run --rm contracts bash -c \"env 'RUSTFLAGS=-C link-arg=-s' cargo build --target wasm32-unknown-unknown\""
  : "docker-compose run --rm contracts bash -c \"env 'RUSTFLAGS=-C link-arg=-s' cargo build --target wasm32-unknown-unknown --release\"";

const { code } = sh.exec(buildCmd);

sh.cd("./contracts.near-linkdrop");

// Assuming this is compiled from the root project directory, link the compiled
// contract to the `out` folder â€“
// When running commands like `near deploy`, near-cli looks for a contract at
// <CURRENT_DIRECTORY>/out/main.wasm
if (code === 0 && calledFromDir === __dirname) {
  const linkDir = `${calledFromDir}/out`;
  const link = `${calledFromDir}/out/main.wasm`;

  const packageName = require("fs")
    .readFileSync(`./Cargo.toml`)
    .toString()
    .match(/name = "([^"]+)"/)[1].split('-')[0];

  const outFile = `./target/wasm32-unknown-unknown/${
    debug ? "debug" : "release"
  }/${packageName}.wasm`;

  sh.mkdir("-p", linkDir);
  sh.rm("-f", link);

  //fixes #831: copy-update instead of linking .- sometimes sh.ln does not work on Windows
  sh.cp("-u", outFile, link);
}

// exit script with the same code as the build command
process.exit(code);

'''
'''--- docker-compose.yml ---
version: '3.7'
services:
  contracts:
    command: ./build.sh
    build:
      context: ./contracts.near-linkdrop
      dockerfile: Dockerfile
    volumes:
      - ./contracts.near-linkdrop:/app

  web:
    build:
      context: ./
      dockerfile: Dockerfile
    command: yarn next dev
    ports:
      - 3000:3000
    volumes:
      - ./:/app
    depends_on:
      - postgres
    env_file:
      - ./.env

  postgres:
    image: postgres:13
    restart: always
    ports:
      - 5432:5432
    env_file:
      - ./.env
    volumes:
      - postgres:/var/lib/postgresql/data

volumes:
  postgres:
    name: db

'''
'''--- next-env.d.ts ---
/// <reference types="next" />
/// <reference types="next/types/global" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/basic-features/typescript for more information.

'''
'''--- next.config.js ---
const withTM = require('next-transpile-modules')([
  '@fullcalendar/common',
  '@fullcalendar/react',
  '@fullcalendar/interaction',
  '@fullcalendar/timegrid',
  '@fullcalendar/daygrid',
  '@fullcalendar/bootstrap',
])

module.exports = withTM({
  basePath: '',
  trailingSlash: true,
})
'''
'''--- package.json ---
{
  "name": "champagne",
  "version": "0.1.0",
  "license": "UNLICENSED",
  "scripts": {
    "build": "yarn build:contract && yarn build:web",
    "build:contract": "node compile.js",
    "build:contract:debug": "node compile.js --debug",
    "build:web": "next build",
    "dev:deploy:contract": "near dev-deploy",
    "deploy:contract": "near deploy",
    "deploy:pages": "gh-pages -d dist/",
    "deploy": "yarn build && yarn deploy:contract && yarn deploy:pages",
    "prestart": "yarn build:contract:debug && yarn dev:deploy:contract",
    "start": "echo The app is starting! It will automatically open in your browser when ready && env-cmd -f ./neardev/dev-account.env next dev",
    "dev": "nodemon --watch contract/src -e rs --exec \"yarn start\"",
    "test": "yarn build:contract:debug && cd contract && cargo test -- --nocapture && cd .. && jest test --runInBand"
  },
  "devDependencies": {
    "@babel/core": "~7.14.0",
    "@babel/preset-env": "~7.14.0",
    "@babel/preset-react": "~7.13.13",
    "@babel/preset-typescript": "^7.15.0",
    "@types/jest": "^27.0.1",
    "@types/node": "^16.7.6",
    "@types/react": "^17.0.19",
    "babel-jest": "~26.6.2",
    "env-cmd": "~10.1.0",
    "gh-pages": "~3.1.0",
    "jest": "~26.6.2",
    "jest-environment-node": "~26.6.2",
    "near-cli": "~1.6.0",
    "nodemon": "~2.0.3",
    "parcel-bundler": "~1.12.4",
    "prisma": "^2.30.3",
    "prisma-dbml-generator": "^0.7.0",
    "react-test-renderer": "~17.0.1",
    "shelljs": "~0.8.4",
    "typescript": "^4.4.2"
  },
  "dependencies": {
    "@3id/connect": "^0.2.0",
    "@ceramicnetwork/3id-did-resolver": "^1.4.0",
    "@ceramicnetwork/blockchain-utils-linking": "^1.1.2",
    "@ceramicnetwork/http-client": "^1.2.0",
    "@ceramicstudio/idx": "^0.12.1",
    "@fortawesome/fontawesome-free": "^5.15.4",
    "@fortawesome/fontawesome-svg-core": "^1.2.36",
    "@fortawesome/free-regular-svg-icons": "^5.15.4",
    "@fortawesome/free-solid-svg-icons": "^5.15.4",
    "@fortawesome/react-fontawesome": "^0.1.15",
    "@fullcalendar/bootstrap": "^5.9.0",
    "@fullcalendar/core": "^5.9.0",
    "@fullcalendar/daygrid": "^5.9.0",
    "@fullcalendar/interaction": "^5.9.0",
    "@fullcalendar/react": "^5.9.0",
    "@fullcalendar/timegrid": "^5.9.0",
    "@hapi/iron": "^6.0.0",
    "@prisma/client": "^2.30.3",
    "babel-plugin-transform-require-ignore": "^0.1.1",
    "bip39-light": "^1.0.7",
    "bn.js": "^5.2.0",
    "bootstrap": "^5.1.1",
    "bs58": "^4.0.1",
    "cookie": "^0.4.1",
    "dids": "^2.4.0",
    "ed25519-hd-key": "^1.2.0",
    "framer-motion": "^4.1.17",
    "key-did-resolver": "^1.4.0",
    "morgan": "^1.10.0",
    "near-api-js": "~0.41.0",
    "near-seed-phrase": "^0.2.0",
    "next": "^11.1.0",
    "next-auth": "^3.29.0",
    "next-connect": "^0.10.2",
    "next-transpile-modules": "^8.0.0",
    "passport": "^0.4.1",
    "passport-local": "^1.0.0",
    "passport-local-near": "^1.0.1",
    "passport-twitter": "^1.0.4",
    "react": "~17.0.1",
    "react-bootstrap": "^2.0.0-beta.6",
    "react-dom": "~17.0.1",
    "react-hook-form": "^7.15.0",
    "react-responsive": "^9.0.0-beta.4",
    "regenerator-runtime": "~0.13.5",
    "swr": "^1.0.1",
    "tweetnacl": "^1.0.3",
    "uint8arrays": "^3.0.0"
  },
  "resolutions": {
    "@babel/preset-env": "7.13.8"
  },
  "jest": {
    "moduleNameMapper": {
      "\\.(jpg|ico|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$": "<rootDir>/src/__mocks__/fileMock.js",
      "\\.(css|less)$": "<rootDir>/src/__mocks__/fileMock.js"
    },
    "setupFiles": [
      "<rootDir>/src/jest.init.js"
    ],
    "testEnvironment": "near-cli/test_environment",
    "testPathIgnorePatterns": [
      "<rootDir>/contract/",
      "<rootDir>/node_modules/"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

'''
'''--- pages/api/auth/twitter/callback.ts ---
import nextConnect from "next-connect";
import auth from "src/backend/middleware";
import type { NextApiRequest, NextApiResponse } from "next";
import passport from "src/backend/passport";

const handler = nextConnect();

handler.use(auth).get(passport.authorize("twitter"));

export default handler;

'''
'''--- pages/api/auth/twitter/index.ts ---
import nextConnect from "next-connect";
import auth from "src/backend/middleware";
import type { NextApiRequest, NextApiResponse } from "next";
import passport from "src/backend/passport";

const handler = nextConnect();

handler
  .use(auth)
  .get(passport.authorize("twitter", { failureRedirect: "/wallet/login" }))

export default handler;

'''
'''--- pages/api/auth/wallet/index.ts ---
import nextConnect from "next-connect";
import auth from "src/backend/middleware";
import type { NextApiRequest, NextApiResponse } from "next";
import passport from "src/backend/passport";

const handler = nextConnect({
  onError: (err, req: NextApiRequest, res: NextApiResponse, next) => {
    console.error(err.stack);
    res.status(500).end("Something broke!");
  },
});

handler
  .use(auth)
  .post(
    passport.authenticate("local"),
    (req: NextApiRequest, res: NextApiResponse) => {
      res.json({ wallet: req.user });
    }
  )
  .get(
    (req: NextApiRequest, res: NextApiResponse) => {
      if (!req.user) {
        res.status(401).end();
      }

      else {
        res.json({ wallet: req.user });
      }
    }
  );

export default handler;

'''
'''--- pages/api/auth/wallet/logout.ts ---
import nextConnect from "next-connect";
import auth from "src/backend/middleware";
import type { NextApiRequest, NextApiResponse } from "next";
import passport from "src/backend/passport";

const handler = nextConnect();

handler
  .use(auth)
  .get(
    (req: NextApiRequest, res: NextApiResponse) => {
      req.logout();
      res.status(204).end();
    }
  );

export default handler;

'''
'''--- pages/api/linkdrop/index.ts ---
import nextConnect from "next-connect";

import getConfig from "src/near/config";
import auth from "src/backend/middleware";
import { getLinkdropUserAccountId } from "src/near/helpers";
import prisma from "src/backend/prisma";
import type { NextApiRequest, NextApiResponse } from "next";

const handler = nextConnect({
  onError: (err, req: NextApiRequest, res: NextApiResponse, next) => {
    console.error(err.stack);
    res.status(500).end("Something broke!");
  },
});

handler
  .use(auth)
  .post(
    // create db version of linkdrop account
    // for both create and restore
    // assumes user created the linkdrop account
    async (req: NextApiRequest, res: NextApiResponse) => {
      const { publicKey } = req.body;

      const linkdropUserAccountId = getLinkdropUserAccountId(
        req.user.accountId
      );

      const linkdropAccount = await prisma.linkdropAccount.upsert({
        create: {
          publicKey,
          accountId: linkdropUserAccountId,
          walletAccountId: req.user.accountId,
        },
        update: {
          publicKey,
          accountId: linkdropUserAccountId,
        },
        where: {
          accountId: linkdropUserAccountId,
        }
      });

      return res.status(201).json({
        linkdropAccount,
      })
    }
  )
  .get(
    // check if near and db have linkdrop account
    // 204 == db does not have, but near does, restore
    // 200 == a ok
    async (req: NextApiRequest, res: NextApiResponse) => {
      if (!req.user) {
        return res.status(401).end();
      }

      // near has account, check if we do
      const { linkdropAccount } = await prisma.walletAccount.findUnique({
        where: {
          accountId: req.user.accountId,
        },
        select: {
          linkdropAccount: true,
        },
      });

      if (!linkdropAccount) {
        return res.status(204).end();
      }

      console.log(linkdropAccount);
      return res.status(200).json({ accountId: linkdropAccount.accountId });
    }
  );

export default handler;

'''
'''--- prisma/migrations/20210917024350_init_keys_and_accounts/migration.sql ---
-- CreateTable
CREATE TABLE "SocialAccount" (
    "id" TEXT NOT NULL,
    "providerType" TEXT NOT NULL,
    "providerId" TEXT NOT NULL,
    "providerAccountId" TEXT NOT NULL,
    "refreshToken" TEXT,
    "accessToken" TEXT,
    "accessTokenExpires" TIMESTAMP(3),
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,
    "walletAccountId" TEXT NOT NULL,

    PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "Campaign" (
    "accountId" TEXT NOT NULL,
    "type" TEXT NOT NULL,
    "linkdropAccountId" TEXT NOT NULL,

    PRIMARY KEY ("accountId")
);

-- CreateTable
CREATE TABLE "LinkdropAccount" (
    "publicKey" TEXT NOT NULL,
    "accountId" TEXT NOT NULL,
    "walletAccountId" TEXT NOT NULL,

    PRIMARY KEY ("accountId")
);

-- CreateTable
CREATE TABLE "WalletAccount" (
    "publicKey" TEXT NOT NULL,
    "accountId" TEXT NOT NULL,

    PRIMARY KEY ("accountId")
);

-- CreateIndex
CREATE UNIQUE INDEX "SocialAccount.providerId_providerAccountId_unique" ON "SocialAccount"("providerId", "providerAccountId");

-- CreateIndex
CREATE UNIQUE INDEX "LinkdropAccount.publicKey_unique" ON "LinkdropAccount"("publicKey");

-- CreateIndex
CREATE UNIQUE INDEX "LinkdropAccount_walletAccountId_unique" ON "LinkdropAccount"("walletAccountId");

-- CreateIndex
CREATE UNIQUE INDEX "WalletAccount.publicKey_unique" ON "WalletAccount"("publicKey");

-- AddForeignKey
ALTER TABLE "SocialAccount" ADD FOREIGN KEY ("walletAccountId") REFERENCES "WalletAccount"("accountId") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "Campaign" ADD FOREIGN KEY ("linkdropAccountId") REFERENCES "LinkdropAccount"("accountId") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "LinkdropAccount" ADD FOREIGN KEY ("walletAccountId") REFERENCES "WalletAccount"("accountId") ON DELETE CASCADE ON UPDATE CASCADE;

'''
'''--- prisma/migrations/20210919003251_social_account_manual_tokens/migration.sql ---
/*
  Warnings:

  - A unique constraint covering the columns `[providerId,providerType,walletAccountId]` on the table `SocialAccount` will be added. If there are existing duplicate values, this will fail.

*/
-- DropIndex
DROP INDEX "SocialAccount.providerId_providerAccountId_unique";

-- AlterTable
ALTER TABLE "SocialAccount" ADD COLUMN     "oauthToken" TEXT,
ADD COLUMN     "oauthTokenSecret" TEXT;

-- CreateIndex
CREATE UNIQUE INDEX "SocialAccount.providerId_providerType_walletAccountId_unique" ON "SocialAccount"("providerId", "providerType", "walletAccountId");

'''
'''--- prisma/migrations/migration_lock.toml ---
# Please do not edit this file manually
# It should be added in your version-control system (i.e. Git)
provider = "postgresql"
'''
'''--- src/__mocks__/fileMock.js ---
// NOTE: This is used to mock resource imports in JSX for tests
module.exports = '' 

'''
'''--- src/backend/hooks.ts ---
import { useEffect, useState } from "react";
import { useRouter } from "next/router";
import useSWR, { useSWRConfig } from "swr";
import { useNear } from "src/near/hooks";

export const WALLET_ACCOUNT_ENDPOINT = "/api/auth/wallet/";
export const fetcher = (url) => fetch(url).then((r) => r.json());

export function useLogin() {
  const router = useRouter();
  const { mutate } = useSWRConfig();
  const { account } = useWalletAccount();
  const { login, signedIn, near, wallet, accountId, networkId } = useNear();
  const [loginAttempts, setLoginAttempts] = useState(0);

  useEffect(() => {
    const { query } = router;
    const shouldAttemptLogin =
      query["account_id"] &&
      query["public_key"] &&
      signedIn &&
      loginAttempts < 1;

    console.log(
      query["account_id"],
      query["public_key"],
      signedIn,
      loginAttempts
    );

    async function doTheThing() {
      if (shouldAttemptLogin) {
        const signedMessage = await near.connection.signer.signMessage(
          wallet.getAccountId(),
          accountId,
          networkId
        );

        mutate(WALLET_ACCOUNT_ENDPOINT, { ...account, accountId }, false);

        fetch(WALLET_ACCOUNT_ENDPOINT, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            accountId,
            signedMessage: JSON.stringify( signedMessage ),
          }),
        })
          .then((res) => res.json())
          .then((res) => {
            setLoginAttempts(loginAttempts + 1);
            mutate(WALLET_ACCOUNT_ENDPOINT);
            router.push("/wallet/linkdrop");
          })
          .catch((err) => {
            setLoginAttempts(loginAttempts + 1);
          });
      }
    }

    doTheThing();
  }, [router, signedIn, mutate, account, accountId, networkId, loginAttempts]);

  return { login, account };
}

export function useLogout() {
  const { mutate } = useSWRConfig();
  const { account } = useWalletAccount();
  const { logout, signedIn } = useNear();

  useEffect(() => {
    const shouldLogOut = !signedIn && account && account.accountId;

    console.log(signedIn, account);
    if (shouldLogOut) {
      mutate(WALLET_ACCOUNT_ENDPOINT, {}, false);

      fetch(`${WALLET_ACCOUNT_ENDPOINT}/logout`).then(() => {
        mutate(WALLET_ACCOUNT_ENDPOINT);
      });
    }
  }, [signedIn, mutate, account]);

  return logout;
}

export function useWalletAccount() {
  const { data, mutate } = useSWR(WALLET_ACCOUNT_ENDPOINT, fetcher, {
    shouldRetryOnError: false,
  });

  const loading = !data;
  const account = data?.wallet;

  return { account, mutate, loading };
}

'''
'''--- src/backend/keyGenerator.ts ---
import { mnemonicToSeed } from "bip39-light";
import bs58 from "bs58";
import { derivePath } from "ed25519-hd-key";
import nacl from "tweetnacl";

const getPath = (campaignId, keyId) => `m/${campaignId}'/${keyId}'`;

export default function createKeyGenerator(seedPhrase) {
  const seed = mnemonicToSeed(seedPhrase);
  return (campaignId, keyId) => {
    const { key } = derivePath(
      getPath(campaignId, keyId),
      seed.toString("hex")
    );
    const keyPair = nacl.sign.keyPair.fromSeed(key);

    return {
      pk: bs58.encode(Buffer.from(keyPair.publicKey)),
      sk: bs58.encode(Buffer.from(keyPair.secretKey)),
    };
  };
}
'''
'''--- src/backend/middleware.ts ---
import nextConnect from "next-connect";
import { NextApiRequest, NextApiResponse } from "next";
import morgan from 'morgan';
import session from "./session";
import passport from "./passport";
import { WalletAccount } from ".prisma/client";

declare module "next" {
  interface NextApiRequest {
    body: any;
    session: any;
    user: WalletAccount;
    logout: Function;
  }
}

const auth =  nextConnect<NextApiRequest, NextApiResponse>()
  .use(morgan('dev'))
  .use(
    session({
      name: "sess",
      // TODO: add token secret
      secret: process.env.TOKEN_SECRET,
      cookie: {
        maxAge: 60 * 60 * 8, // 8 hours,
        httpOnly: true,
        secure: process.env.NODE_ENV === "production",
        path: "/",
        sameSite: "lax",
      },
    })
  )
  .use(passport.initialize())
  .use(passport.session());

export default auth;

'''
'''--- src/backend/passport/index.ts ---
import passport from "passport";
import walletStrategy from "./wallet";
import twitterStrategy from "./twitter";

walletStrategy(passport);
twitterStrategy(passport);

export default passport;

'''
'''--- src/backend/passport/twitter.ts ---
import { Strategy as TwitterStrategy } from "passport-twitter";

import prisma from "src/backend/prisma";
import { SocialAccount, WalletAccount } from ".prisma/client";
import { profile } from "console";

const upsertSocialAccount = async (
  wallet: WalletAccount,
  token: string,
  tokenSecret: string,
  profile
): Promise<SocialAccount | null> =>
  prisma.socialAccount.upsert({
    create: {
      providerType: profile.provider,
      providerId: profile.id,
      providerAccountId: profile.displayName,
      oauthToken: token,
      oauthTokenSecret: tokenSecret,
      walletAccountId: wallet.accountId,
    },
    update: {
      providerAccountId: profile.displayName,
      oauthToken: token,
      oauthTokenSecret: tokenSecret,
    },
    where: {
      providerId_providerType_walletAccountId: { 
        providerType: profile.provider,
        providerId: profile.id,
        walletAccountId: wallet.accountId, 
      },
    }
  });

export default function twitterAuthorizationStrategy(passport) {
  passport.use(
    new TwitterStrategy(
      {
        consumerKey: process.env.TWITTER_CONSUMER_KEY,
        consumerSecret: process.env.TWITTER_CONSUMER_SECRET,
        callbackUrl: `${process.env.AUTH_URL}/auth/twitter/callback`,
        passReqToCallback: true,
      },
      async function (req, token, tokenSecret, profile, done) {
        if (!req.user) {
          return done(null, false, { error: "User is not logged in" });
        }

        const wallet: WalletAccount = req.user;
        const socialAccount = await upsertSocialAccount(
          wallet,
          token,
          tokenSecret,
          profile
        );

        if (!socialAccount) {
          return done(null, false, { error: "Could not update or create social account" });
        }

        return done(null, socialAccount);
      }
    )
  );
}

'''
'''--- src/backend/passport/wallet.ts ---
import LocalStrategy from "passport-local";
import passportLocalNear from "passport-local-near";
import { baseEncode } from "near-api-js/node_modules/borsh";

import prisma from "src/backend/prisma";
import { WalletAccount } from ".prisma/client";

// local passport near doesn't handle user persistence so i'm hijacking it with
// the request to do it myself based on the callbacks
export const authenticateWalletAccount = async (
  req,
  accountId,
  signedMessage,
  actualDone
) => {

  if (req.user) {
    // TODO: determine what this even does since i assume we're fine and
    // shouldn't be updating the signed messages again anyways
    return actualDone(null, req.user);
  }

  let data = JSON.parse(signedMessage);

  const publicKey = `ed25519:${baseEncode(Uint8Array.from(Object.values(data.publicKey.data)))}`;

  const wrappedDone = async (err, accountId: string | false) => {
    if (!err && accountId !== false) {
      // Create walletAccount
      try {
        let wallet = await prisma.walletAccount.findUnique({
          where: {
            accountId,
          },
        });

        if (!wallet) {
          wallet = await prisma.walletAccount.create({
            data: {
              accountId,
              publicKey,
            },
          });
        }

        return actualDone(null, wallet);
      } catch (e) {
        // We shouldn't get here typically
        return actualDone(e, false);
      }
    } else {
      console.log("what", err);
      return actualDone(err, false);
    }
  };

  return passportLocalNear.authenticate(accountId, signedMessage, wrappedDone);
};

export default function walletStrategy(passport) {
  passport.serializeUser(function (wallet: WalletAccount, done) {
    done(null, wallet.accountId);
  });

  passport.deserializeUser(async function (accountId: string, done) {
    try {
      const wallet = await prisma.walletAccount.findUnique({
        where: { accountId },
      });

      // TODO: log could not find wallet, right now it'll just return null

      return done(null, wallet);
    } catch (e) {
      return done(e, false, { err: e.toString() });
    }
  });

  passportLocalNear.set_network("testnet");

  passport.use(
    new LocalStrategy(
      {
        usernameField: "accountId",
        passwordField: "signedMessage",
        passReqToCallback: true,
      },
      authenticateWalletAccount
    )
  );
}
'''
'''--- src/backend/prisma.ts ---
import { PrismaClient } from "@prisma/client";

let prisma: PrismaClient;

if (typeof window === 'undefined') {
  if (process.env.NODE_ENV === "production") {
    prisma = new PrismaClient();
  } else {
    if (!global.prisma) {
      global.prisma = new PrismaClient();
    }

    prisma = global.prisma;
  }
}

export default prisma;
'''
'''--- src/backend/session.ts ---
import Iron from "@hapi/iron";
import { parse, serialize } from "cookie";

export async function createLoginSession(session, secret) {
  const createdAt = Date.now();
  const obj = { ...session, createdAt };
  const token = await Iron.seal(obj, secret, Iron.defaults);

  return token;
}

export async function getLoginSession(token, secret) {
  const session = await Iron.unseal(token, secret, Iron.defaults);
  const expiresAt = session.createdAt + session.maxAge * 1000;

  // Validate the expiration date of the session
  if (session.maxAge && Date.now() > expiresAt) {
    throw new Error("Session expired");
  }

  return session;
}

function parseCookies(req) {
  // For API Routes we don't need to parse the cookies.
  if (req.cookies) return req.cookies;

  // For pages we do need to parse the cookies.
  const cookie = req.headers?.cookie;
  return parse(cookie || "");
}

export default function session({ name, secret, cookie: cookieOpts }) {
  return async (req, res, next) => {
    const cookies = parseCookies(req);
    const token = cookies[name];
    let unsealed = {};

    if (token) {
      try {
        // the cookie needs to be unsealed using the password `secret`
        unsealed = await getLoginSession(token, secret);
      } catch (e) {
        // The cookie is invalid
        // TODO: log an error
      }
    }

    req.session = unsealed;

    // We are proxying res.end to commit the session cookie
    const oldEnd = res.end;
    res.end = async function resEndProxy(...args) {
      if (res.finished || res.writableEnded || res.headersSent) return;
      if (cookieOpts.maxAge) {
        req.session.maxAge = cookieOpts.maxAge;
      }

      const token = await createLoginSession(req.session, secret);

      res.setHeader("Set-Cookie", serialize(name, token, cookieOpts));
      oldEnd.apply(this, args);
    };

    next();
  };
}

'''
'''--- src/ceramic/index.ts ---
import { DID } from "dids";
import * as uint8arrays from 'uint8arrays';
import { KeyPair, Near } from "near-api-js";
import { IDX } from "@ceramicstudio/idx";
import { NearAuthProvider } from "@ceramicnetwork/blockchain-utils-linking";
import { ThreeIdConnect } from "@3id/connect";
import CeramicClient from "@ceramicnetwork/http-client";
import KeyDidResolver from "key-did-resolver";
import ThreeIdResolver from "@ceramicnetwork/3id-did-resolver";

import getConfig from "../near/config";

const { ceramicUrl, networkId } = getConfig(
  process.env.NODE_ENV || "development"
);

const ceramic = new CeramicClient("https://ceramic-clay.3boxlabs.com");

const resolver = {
  ...KeyDidResolver.getResolver(),
  ...ThreeIdResolver.getResolver(ceramic),
};

const did = new DID({ resolver });
ceramic.setDID(did);

const idxAliases = {};

const idx = new IDX({
  ceramic,
  // aliases,
});

export class NearSigner {
  provider = null;
  // Pass in the keypair class
  // REF: https://near.github.io/near-api-js/classes/_utils_key_pair_.keypair.html
  constructor(nearKeyPair) {
    this.provider = nearKeyPair;
  }

  // return: Promise<{ signature: String, account: String }>
  async sign(message) {
    const { signature, publicKey } = await this.provider.sign(
      uint8arrays.fromString(message)
    );
    return {
      signature: uint8arrays.toString(signature, 'base64pad'),
      account: uint8arrays.toString(publicKey.data, 'base64pad'),
    };
  }
}

export async function authenticate(nearKeyInstance: KeyPair, accountId) {
  const nearProvider = new NearSigner(nearKeyInstance);

  console.log(accountId);
  try {
    const threeIdConnect = new ThreeIdConnect();
    const authProvider = new NearAuthProvider(nearProvider, accountId, "testnet");
    await threeIdConnect.setAuthProvider(authProvider)
    await threeIdConnect.connect(authProvider);
    const provider = await threeIdConnect.getDidProvider();
    await ceramic.did.setProvider(provider);
    await ceramic.did.authenticate();
  } catch (e) {
    console.log(e);
  }

    console.log( ceramic.did.authenticated );
}

'''
'''--- src/components/AdminHeader/AdminHeader.module.css ---
.logo{
    font-family: Hanson;
    font-style: normal;
    font-weight: bold;
    margin: 8px 0px 8px 0px;
}
'''
'''--- src/components/AdminLayout/AdminLayout.module.css ---

'''
'''--- src/components/AdminPageContainer/AdminPageContainer.module.css ---
.box{
    background-color: #000000;
    padding: 8px;
    width: 100%;
    /* width:110%;
    top:-5%;
    left:-5%;
    transform:rotate(2deg);
    position: relative; */
}

.title{
    color: #6100FF;
    font-family: Hanson;
    font-style: normal;
    font-weight: bold;
    margin: 8px 0px 8px 0px;
}

.body{
    padding: 0px 16px 16px 16px;
    margin-bottom: 32px;
    background-color: #FFFFFF;
    width: 100%;
    display: flex;
    flex-direction: column;
    justify-content: center;
}

@media only screen and (max-width: 600px) {
    .body {
        width: unset;
        margin: 0px 0px 32px 0px !important;
        padding: 16px 0px 32px 0px !important;
    }

    .box{
        width: unset;
    }

    .container{
        width: unset;
        margin: 0 !important;
        padding: 0 !important;
        overflow-x: hidden;
    }
    .title{
        text-align: center;
    }
  }
'''
'''--- src/components/AdminPageSectionContainer/AdminPageSectionContainer.module.css ---
.box{
    padding: 16px 16px 8px 0px;
}

.title{
    color: #000000;
    font-family: Hanson;
    font-style: normal;
    font-weight: bold;
    margin: 8px 0px 8px 0px;
}

.body{
    padding: 32px;
    min-height: 10vh;
    background-color: #000000;
}

@media only screen and (max-width: 600px) {
    .body{
        padding: 8px;
    }
      .title{
        text-align: center;
    }
  }
'''
'''--- src/components/Calendar/Calendar.module.css ---

'''
'''--- src/components/CampaignCard/CampaignCard.module.css ---
.link{
    color: #6100FF; 
    width: min-content;
    padding: 0px;
    padding-top: 8px;
    padding-left: 16px;
    font-family: Nexa Light;
    font-style: normal;
    font-weight: light;
}

.link:hover, .link:active{
    color: #210055; 
}

.title{
    padding: 0;
    margin: 8px 0px 8px 0px;
    font-family: Nexa Bold;
    font-style: normal;
    font-weight: bold;
}

.subtitle{
    padding: 0;
    margin:0;
    font-family: Nexa Light;
    font-style: normal;
    font-weight: light;
}

.date{
    padding: 0;
    margin:0;
    font-family: Nexa Bold;
    font-style: normal;
    font-weight: bold;
}

.card{
    margin: 8px;
    min-width: 18rem;
    width: 30%; 
    flex: 1 0 30%; 
    background-color: #E5E5E5;
    flex-grow: unset;
}

'''
'''--- src/components/CampaignDetails/CampaignDetails.module.css ---
.body{
    margin: 32px 0px 32px 0px;
    padding: 32px;
    min-height: 10vh;
    background-image: linear-gradient(to bottom right, #FBED96, #ABECD6);
}

.detail{
    color: #000000;
    text-align: center;
    font-family: Nexa Light;
    font-style: normal;
    font-weight: light;
}

.icon{
    width: auto !important;
    height: 40px !important;
    margin-bottom: 8px;
    color: #6100FF;
}

.navButton{
    margin-right: 8px;
    margin-left: 8px;
}

.title{
    font-family: Nexa Bold;
    font-style: normal;
    font-weight: bold;
}

@media only screen and (max-width: 600px) {
    .body{
        margin: 0;
        padding: 8px 0px 8px 0px;
        display: flex;
        justify-content: center;
    }
  }
'''
'''--- src/components/ComputerAdminLayout/ComputerAdminLayout.module.css ---
#sidebar-container{
    min-height: 100vh !important;
    width: 100vw;
    margin-left: -1rem;
    -webkit-transition: margin .25s ease-out;
    -moz-transition: margin .25s ease-out;
    -o-transition: margin .25s ease-out;
    transition: margin .25s ease-out;
}

#page-container {
    min-width: 0;
    width: 100%;
}
'''
'''--- src/components/EditCampaignModal/EditCampaignModal.module.css ---
.form{
    font-family: Nexa Light;
    font-style: normal;
    font-weight: light;
}

.modalTitle{
    font-family: Nexa Bold;
    font-style: normal;
    font-weight: bold;
}

.modalBody{
    padding-top: 8px !important;
}

.label{
    font-family: Nexa Bold;
    font-style: normal;
    font-weight: bold;
    margin-top: 8px;
}
'''
'''--- src/components/FeatureCards/FeatureCards.module.css ---
.icon {
    font-size: 48px;
    color: #6100FF;
    margin: 8px 0px;
}

.title {
    padding: 16px 0px 8px 0px;
    margin: 0;
    font-family: Nexa Bold;
    font-style: normal;
    font-weight: bold;
    color: black;
    text-align: center;
}

.subtitle {
    padding: 0;
    margin: 0;
    font-family: Nexa Light;
    font-style: normal;
    font-weight: light;
    color: black;
    padding: 8px 16px 8px 16px;
}

.card {
    margin: 8px;
    min-width: 18rem;
    width: 30%;
    flex: 1 0 30%;
    background-color: white;
    flex-grow: unset;
    text-align: center;
    border-color: white;
}

.titleRow {
    margin: 16px 0px 16px 0px;
    padding: 0;
}

.cardContainer {
    display: flex;
    flex: wrap;
    justify-content: space-between;
}

@media only screen and (max-width: 600px) {
    .cardContainer {
        justify-content: center;
    }
}
'''
'''--- src/components/Footer/Footer.module.css ---
.container {
  position: absolute;
  display: flex;
  justify-content: center;
  min-height: 32px;
  bottom: 0;
  left: 0;
  width: 100%;
}

.container * {
  padding: 1em 2em;
}
'''
'''--- src/components/Home/Home.module.css ---
.mainContainer {
    z-index: 20;
    margin-top: 200px;
    padding: 0;
}

.home {
    height: 50vh;
}

.textContainer {
    font-family: "Space Grotesk";
    font-style: normal;
    font-weight: bold;
}

.icon {
    font-size: 48px;
    line-height: 55px;
    color: #6100FF;
}

.iconRow {
    display: grid;
    grid-template-columns: repeat(2, min-content);
    grid-auto-rows: minmax(72px, max-content);
    align-items: center;
}

.followButton {
    font-family: "Space Grotesk";
    font-style: normal;
    font-weight: bold;
    font-size: 32px;
    padding: 0px 40px 0px 40px;
    border-radius: 32px;
}

.purpleContainer {
    background-color: #6100FF;
    margin: 0;
    padding: 32px;
}

@media only screen and (max-width: 600px) {
    .mainContainer {
        margin-top: 100px;
    }
}
'''
'''--- src/components/HomeFooter/HomeFooter.module.css ---
.logo {
    font-family: Hanson;
    font-style: normal;
    font-weight: bold;
    margin: 8px 0px 8px 0px;
}

.footerLink {
    font-family: Space Grotesk;
    font-style: normal;
    font-weight: bold;
    color: white;
}

.footer {
    background-color: #6100FF !important;
    z-index: 20;
}

@media only screen and (max-width: 600px) {
    .footerLink {
        font-size: 16px;
        text-align: center;
    }
}
'''
'''--- src/components/HomeHeader/HomeHeader.module.css ---
.logo {
    font-family: Hanson;
    font-style: normal;
    font-weight: bold;
    margin: 8px 0px 8px 0px;
    font-size: 40px;
}

.navLink {
    font-family: Space Grotesk;
    font-style: normal;
    font-weight: bold;
    color: white;
}

.nav {
    z-index: 20;
}

@media only screen and (max-width: 600px) {
    .logo {
        font-size: 24px;
    }
    .navLink {
        text-align: center;
    }
}
'''
'''--- src/components/HomeLayout/HomeLayout.module.css ---
.background {
    /* Vector */
    position: absolute;
    width: 1173px;
    height: 1017px;
    left: 592px;
    top: 170px;
    background: linear-gradient(90deg, #FBED96 0%, #ABECD6 100%);
    filter: blur(100px);
}

.headerBackground {
    /* Vector */
    position: absolute;
    width: 707px;
    height: 830px;
    left: -81px;
    top: -391px;
    background: linear-gradient(90deg, #FBED96 0%, #ABECD6 100%);
    filter: blur(100px);
}

.footerBackground {
    /* Vector */
    position: absolute;
    width: 848px;
    height: 654px;
    left: -131px;
    top: 1900px;
    background: linear-gradient(90deg, #FBED96 0%, #ABECD6 100%);
    filter: blur(100px);
}

.layout {
    overflow: hidden;
    padding: 0;
    background-color: #EFFFFA;
}
'''
'''--- src/components/HomeSection/HomeSection.module.css ---
.sectionContainer {
    background-color: black;
    font-family: Nexa Bold;
    font-style: normal;
    font-weight: bold;
    color: white;
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: flex-start;
    padding: 32px;
    width: 70%;
}

.rightSectionContainer {
    border-radius: 20px 0px 0px 20px;
}

.rightContainer {
    width: 100vw;
    display: flex;
    align-items: center;
    justify-content: flex-end;
    margin: 40px 0px 40px 0px;
}

.leftContainer {
    width: 100vw;
    display: flex;
    align-items: center;
    justify-content: flex-start;
    margin: 40px 0px 40px 0px;
}

.leftSectionContainer {
    border-radius: 0px 20px 20px 0px;
}

.title {
    text-align: center;
}

.purpleContainer {
    background-color: #6100FF;
    width: max-content;
}

@media only screen and (max-width: 600px) {
    .sectionContainer {
        width: 100%;
    }
    .sectionContainer>* {
        margin: 8px 0px;
    }
}
'''
'''--- src/components/Layout/Layout.module.css ---
.background{
    background-color: #EFFFFA;
    min-height: 100vh;
}
'''
'''--- src/components/Login/Login.module.css ---

'''
'''--- src/components/LoginLayout/LoginLayout.module.css ---
.headerBackground {
    /* Vector */
    position: absolute;
    width: 707px;
    height: 830px;
    left: -81px;
    top: -391px;
    background: linear-gradient(90deg, #FBED96 0%, #ABECD6 100%);
    filter: blur(100px);
}

.layout {
    overflow: hidden;
    padding: 0;
    background-color: #EFFFFA;
}
'''
'''--- src/components/LoginSections/LoginSections.module.css ---
    .loginContainer {
        z-index: 20;
    }
    
    .topRow {
        display: flex;
        align-items: center;
        min-width: 30%;
    }
    
    .step {
        color: #000000;
        font-family: Hanson;
        font-style: normal;
        font-weight: bold;
        margin: 8px 0px 8px 0px;
    }
    
    .body {
        font-family: Space Grotesk;
        font-style: normal;
        font-weight: bold;
    }
    
    .rowContainer {
        display: grid;
        grid-gap: 16px;
        grid-auto-rows: 1fr;
        align-items: center;
        padding: 0px 32px;
    }
    
    .body>.h3 {
        text-align: center;
    }
    
    .link {
        color: #6100FF;
        width: min-content;
    }
    
    .link:hover,
    .link:active {
        color: #210055;
    }
    
    .icon {
        font-size: 48px;
        color: #6100FF;
    }
    
    .celebrateRow {
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
    }
    
    .stepContainer {
        min-height: 40vh;
        margin: 32px;
    }
'''
'''--- src/components/MobileAdminLayout/MobileAdminLayout.module.css ---

'''
'''--- src/components/MobileNav/MobileNav.module.css ---
.light{
    font-family: Nexa Light;
    font-style: normal;
    font-weight: light;
}

.bold{
    font-family: Nexa Bold;
    font-style: normal;
    font-weight: bold;
}
'''
'''--- src/components/Navbar/Navbar.module.css ---
.container {
  border-bottom: 1px solid black;
}

.buttons {
  display: flex;
}

.buttons * {
  margin: 1em 2em;
}

.logout {
  position: absolute;
  right: 0;
}
'''
'''--- src/components/PlatformCards/PlatformCards.module.css ---
.icon {
    font-size: 48px;
    color: white;
}

.title {
    padding: 16px 0px 8px 0px;
    margin: 0;
    font-family: Nexa Bold;
    font-style: normal;
    font-weight: bold;
    color: white;
    text-align: center;
}

.subtitle {
    padding: 0;
    margin: 0;
    font-family: Nexa Light;
    font-style: normal;
    font-weight: light;
    color: white;
    padding: 8px 16px 8px 16px;
}

.card {
    margin: 8px;
    min-width: 18rem;
    width: 30%;
    flex: 1 0 30%;
    background-color: #6100FF;
    flex-grow: unset;
    border-radius: 20px 0px;
}

.titleRow {
    margin: 16px 0px 16px 0px;
    padding: 0;
}

.cardContainer {
    display: flex;
    flex: wrap;
    justify-content: space-between;
}

@media only screen and (max-width: 600px) {
    .cardContainer {
        justify-content: center;
    }
}
'''
'''--- src/components/PostCard/PostCard.module.css ---
.link{
    color: #6100FF; 
    width: min-content;
    padding: 0px;
    padding-top: 8px;
    padding-left: 16px;
    font-family: Nexa Light;
    font-style: normal;
    font-weight: light;
}

.link:hover, .link:active{
    color: #210055; 
}

.title{
    padding: 0;
    margin: 8px 0px 8px 0px;
    font-family: Nexa Bold;
    font-style: normal;
    font-weight: bold;
}

.subtitle{
    padding: 0;
    margin:0;
    font-family: Nexa Light;
    font-style: normal;
    font-weight: light;
}

.date{
    padding: 0;
    margin:0;
    font-family: Nexa Bold;
    font-style: normal;
    font-weight: bold;
}

.card{
    margin: 8px;
    min-width: 18rem;
    width: 30%; 
    flex: 1 0 30%; 
    background-color: #E5E5E5;
    flex-grow: unset;
}

'''
'''--- src/components/RewardCards/RewardCards.module.css ---
.icon {
    font-size: 48px;
    color: white;
}

.title {
    padding: 16px 0px 8px 0px;
    margin: 0;
    font-family: Nexa Bold;
    font-style: normal;
    font-weight: bold;
    color: white;
    text-align: center;
}

.subtitle {
    padding: 0;
    margin: 0;
    font-family: Nexa Light;
    font-style: normal;
    font-weight: light;
    color: white;
    padding: 16px;
    text-align: center;
}

.card {
    margin: 8px;
    padding: 0;
    min-width: 18rem;
    width: 30%;
    flex: 1 0 30%;
    flex-grow: unset;
}

.cardBody {
    display: flex;
    flex-flow: column nowrap;
    justify-content: space-around;
}

.white {
    background-color: white;
    border-color: black;
}

.purple {
    background-color: #6100FF;
    border-color: #6100FF;
}

.cardTitle {
    background-color: black;
    padding: 8px;
    text-align: center;
    color: white;
    font-family: Nexa Bold;
    font-style: normal;
    font-weight: bold;
    width: 100%;
    padding: 16px 0px 8px 0px;
}

.titleRow {
    margin: 16px 0px 16px 0px;
    padding: 0;
}

.cardContainer {
    display: flex;
    flex: wrap;
    justify-content: space-between;
}

.detailRow {
    display: flex;
    flex-direction: row;
    font-family: Nexa Light;
    font-style: normal;
    font-weight: light;
}

.detailCol {
    min-height: 40px;
}

.bold {
    font-family: Nexa Bold;
    font-style: normal;
    font-weight: bold;
    padding-top: 2px;
    text-align: center;
}

@media only screen and (max-width: 600px) {
    .cardContainer {
        justify-content: center;
    }
}
'''
'''--- src/components/SchedulePostModal/SchedulePostModal.module.css ---
.form{
    font-family: Nexa Light;
    font-style: normal;
    font-weight: light;
}

.modalTitle{
    font-family: Nexa Bold;
    font-style: normal;
    font-weight: bold;
}

.modalBody{
    padding-top: 8px !important;
}

.label{
    font-family: Nexa Bold;
    font-style: normal;
    font-weight: bold;
    margin-top: 8px;
}

'''
'''--- src/components/SideNav/SideNav.module.css ---
.sidebar {
    position: fixed;
    top: 0;
    bottom: 0;
    left: 0;
    min-height: 100vh !important;
    z-index: 100;
    box-shadow: inset -1px 0 0 rgba(0, 0, 0, .1);
    max-width: 237px;
}

.icon{
    margin-right: 8px;
}

.light{
    font-family: Nexa Light;
    font-style: normal;
    font-weight: light;
}

.bold{
    font-family: Nexa Bold;
    font-style: normal;
    font-weight: bold;
}
'''
'''--- src/components/StatsContainer/StatsContainer.module.css ---
.label{
    color:#6100FF;
    font-weight: bold;
    font-family: Nexa Bold;
    font-style: normal;
    font-weight: bold;
}

.data{
    color: white;
    font-family: Nexa Light;
    font-style: normal;
    font-weight: light;
}

.flexContainer{
    display: grid;
    grid-template-columns: repeat(2, minmax(50%, auto));
    grid-auto-rows: minmax(50px, max-content);
    align-items: center;
}

@media only screen and (max-width: 600px) {
    .flexContainer{
        grid-template-columns: none;
    }
  }
'''
'''--- src/components/Tables/Tables.module.css ---
.table{
    font-family: Nexa Light;
    font-style: normal;
    font-weight: light;
    margin-top: 16px;
}
'''
'''--- src/jest.init.js ---
import 'regenerator-runtime/runtime'

'''
'''--- src/main.test.js ---
beforeAll(async function () {
  // NOTE: nearlib and nearConfig are made available by near-cli/test_environment
  const near = await nearlib.connect(nearConfig)
  window.accountId = nearConfig.contractName
  window.contract = await near.loadContract(nearConfig.contractName, {
    viewMethods: ['get_greeting'],
    changeMethods: [],
    sender: window.accountId
  })

  window.walletConnection = {
    requestSignIn() {
    },
    signOut() {
    },
    isSignedIn() {
      return true
    },
    getAccountId() {
      return window.accountId
    }
  }
})

test('get_greeting', async () => {
  const message = await window.contract.get_greeting({ account_id: window.accountId })
  expect(message).toEqual('Hello')
})

'''
'''--- src/near/config.ts ---
const CONTRACT_NAME =
  process.env.CONTRACT_NAME ||
  process.env.NEXT_PUBLIC_CONTRACT_NAME ||
  "champagne";

export default function getConfig(env) {
  switch (env) {
    case "production":
    case "mainnet":
      return {
        networkId: "mainnet",
        nodeUrl: "https://rpc.mainnet.near.org",
        ceramicUrl: null,
        contractName: CONTRACT_NAME,
        walletUrl: "https://wallet.near.org",
        helperUrl: "https://helper.mainnet.near.org",
        explorerUrl: "https://explorer.mainnet.near.org",
      };
    case "development":
    case "testnet":
      return {
        networkId: "testnet",
        nodeUrl: "https://rpc.testnet.near.org",
        ceramicUrl: 'http://localhost:7007',
        contractName: CONTRACT_NAME,
        // contractName: 'champagne.delvaze.testnet',
        walletUrl: "https://wallet.testnet.near.org",
        helperUrl: "https://helper.testnet.near.org",
        explorerUrl: "https://explorer.testnet.near.org",
      };
    case "betanet":
      return {
        networkId: "betanet",
        nodeUrl: "https://rpc.betanet.near.org",
        ceramicUrl: null,
        contractName: CONTRACT_NAME,
        walletUrl: "https://wallet.betanet.near.org",
        helperUrl: "https://helper.betanet.near.org",
        explorerUrl: "https://explorer.betanet.near.org",
      };
    case "local":
      return {
        networkId: "local",
        nodeUrl: "http://localhost:3030",
        ceramicUrl: 'http://localhost:7007',
        keyPath: `${process.env.HOME}/.near/validator_key.json`,
        walletUrl: "http://localhost:4000/wallet",
        contractName: CONTRACT_NAME,
      };
    case "test":
    case "ci":
      return {
        networkId: "shared-test",
        nodeUrl: "https://rpc.ci-testnet.near.org",
        ceramicUrl: null,
        contractName: CONTRACT_NAME,
        masterAccount: "test.near",
      };
    case "ci-betanet":
      return {
        networkId: "shared-test-staging",
        nodeUrl: "https://rpc.ci-betanet.near.org",
        ceramicUrl: null,
        contractName: CONTRACT_NAME,
        masterAccount: "test.near",
      };
    default:
      throw Error(
        `Unconfigured environment '${env}'. Can be configured in src/config.js.`
      );
  }
}

'''
'''--- src/near/helpers.ts ---
import getConfig from "./config";
/*
  eclipseeer2.testnet -> eclipseeer2
  abc.eclipseeer2.near -> abc-eclipseeer2
  testnet.alice.example.eclipseeer2.testnet -> testnet-alice-example-eclipseeer2
  long-account-id -> long-account-id
 */
export const getAccountName = (account) => {
  const arr = account.split('.');
  const last = arr[arr.length - 1];

  if (last === 'testnet' || last === 'near') {
    arr.pop();
  }
  return arr.join('-');
}

export const getLinkdropUserAccountId = (accountId) =>
  `${getAccountName(accountId)}.${getConfig(process.env.NODE_ENV).contractName}`;;

export const isAccountExist = async (near, accountId) => {
  try {
    await near.connection.provider.query({
      request_type: 'view_account',
      finality: 'final',
      account_id: accountId,
    });
    return true;
  } catch (e) {
    return false;
  }
};

export const determineLinkdropAccountStatus = async (near, accountId) => {
  const linkdropUserAccountId = getLinkdropUserAccountId(accountId);
  const isLinkdropUser = await isAccountExist(near, linkdropUserAccountId);

  return isLinkdropUser;
};
'''
'''--- src/near/hooks.ts ---
import { useContext } from "react";

import { NearContext } from "./provider";
import { LinkdropUserContext } from "./user_provider";

export function useNear() {
  return useContext(NearContext);
}

export function useLinkdropUser() {
  return useContext(LinkdropUserContext);
}

'''
'''--- src/near/index.ts ---
import { connect, Contract, keyStores, WalletConnection } from "near-api-js";
import { getLinkdropUserAccountId } from "./helpers";

import getConfig from "./config";

declare module "near-api-js" {
 class Contract {
   create_user_account(...options: any[]): Promise<undefined>;
   create_near_campaign(...options: any[]): Promise<undefined>;
 }
}

// const nearConfig = getConfig(process.env.NODE_ENV || "development");
const nearConfig = getConfig("development");

export async function initUserContract(walletAccountId) {
  const linkdropAccountId = getLinkdropUserAccountId(walletAccountId);
  const { near, wallet, keyStore } = await initNearShit();

  const contract = new Contract(
    wallet.account(),
    linkdropAccountId,
    {
      changeMethods: ["create_near_campaign"],
      viewMethods: [],
    }
  );

  return {
    near,
    wallet,
    linkdropAccountId,
    contract,
    keyStore,
  };
}

export async function initLinkdropContract() {
  const { near, wallet } = await initNearShit();

  const accountId = wallet.getAccountId();

  const contract = new Contract(
    wallet.account(),
    nearConfig.contractName,
    {
      changeMethods: ["create_user_account"],
      viewMethods: [],
    }
  );

  console.log('near', nearConfig.contractName);
  return {
    near,
    wallet,
    accountId,
    contract,
  };
}

export async function initNearShit() {
  const keyStore = new keyStores.BrowserLocalStorageKeyStore();
  const near = await connect({
    ...nearConfig,
    deps: {
      keyStore,
    },
  });

  const wallet = new WalletConnection(near, "champagne");

  return {
    near,
    wallet,
    keyStore,
  };
}
'''
'''--- src/wallet/login/index.html ---
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/css/bootstrap.min.css" integrity="sha384-GJzZqFGwb1QTTN6wy59ffF1BuGJpLSa9DkKMp0DgiMDm4iYMj70gZWKYbI706tWS" crossorigin="anonymous">
</head>
<body style="background: #fff; margin-top: 3em">
  <div>For local account login, Please run the following command in NEAR CLI, then enter account id here.
  </div>
  <div>
      <code id="shell-command"></code>
  </div>
  <input type="text" id="accountId" name="accountId" placeholder="Account id"></input>
  <button type="button" onClick="done()">done</button>
  <script>
    const currentUrl = new URL(window.location.href);
    const message = `NODE_ENV=local near create_account {newAccountId} --masterAccount {masterAccountId} --publicKey ${currentUrl.searchParams.get('public_key')} --initialAmount 10000000000000000000`;
    document.getElementById('shell-command').innerText = message;

    function done() {
      const successUrl = new URL(currentUrl.searchParams.get('success_url'));
      successUrl.searchParams.set('account_id', document.getElementById('accountId').value);
      successUrl.searchParams.set('public_key', currentUrl.searchParams.get('public_key'));
      window.location.assign(successUrl.toString());
    }
  </script>
</body>
</html>
'''
'''--- styles/global.css ---
@font-face {
    font-family: "Hanson";
    src: url("/fonts/Hanson/Hanson-Bold.ttf");
    font-style: normal;
    font-weight: 700;
    font-display: swap;
  }
  @font-face {
    font-family: "Nexa Bold";
    src: url("/fonts/Nexa/Nexa-Bold.otf");
    font-style: normal;
    font-weight: 700;
    font-display: swap;
  }

  @font-face {
    font-family: "Nexa Light";
    src: url("/fonts/Nexa/Nexa-Light.otf");
    font-style: normal;
    font-weight: 400;
    font-display: swap;
  }

  @font-face {
    font-family: "Space Grotesk";
    src: url("/fonts/SpaceGrotesk/SpaceGrotesk-Bold.ttf");
    font-style: normal;
    font-weight: 700;
    font-display: swap;
  }

  @font-face {
    font-family: "Space Grotesk";
    src: url("/fonts/SpaceGrotesk/SpaceGrotesk-Light.ttf");
    font-style: normal;
    font-weight: 400;
    font-display: swap;
  }

.btn-primary{
    background-color: #6100FF !important;
    border-color: #6100FF !important;
    border-radius: 10;
    font-family: Nexa Bold;
    font-style: normal;
    font-weight: bold;
}

.btn-primary:hover{
    background-color: #340286;
    border-color: #340286;
}

.btn-primary.active{
    background-color: #340286 !important;
    border-color: #340286 !important;
}

/* CSS for Calendar */

.fc{
    color:white;
    font-family: Nexa Light;
    font-style: normal;
    font-weight: light;
}

.weeklyCalendar>* .fc-daygrid-day-frame{
    justify-content: center;
    align-items: center;
    display: flex;
}

.fc-event-past{
    background-color: #222222;
    padding: 8px;
}

.fc-event-time, .fc-event-title {
    padding: 0 4px;
}

.fc-event-title {
    white-space: pre-line;
}

.fc-day-today{
    background-color: #fff4f400 !important;
}

.fc-event-today{
    background-color: #222222;
    padding: 8px;
}

.fc-col-header-cell.fc-day-today{
    border-radius: 10px;
    background-color: #6100FF !important;
    color: white;
}

.fc .fc-col-header-cell-cushion {
    display: inline-block;
    padding: 2px 4px;
}

.fc-daygrid-body{
    padding-top: 8px;
}

@media only screen and (max-width: 600px) {
    .fc-toolbar-chunk{
        justify-content: flex-end;
        align-items: flex-end;
        display: flex;
    }
    .fc{
        font-size: small;
    }
}
'''
'''--- styles/pages/admin.module.css ---
.cardContainer{
    display: flex;
    flex: wrap; 
}

.noData{
    color: white;
    text-align: center;
}

.noDataBlack{
    color: black;
    text-align: center;
}

.title{
    color: #000000;
    font-family: Hanson;
    font-style: normal;
    font-weight: bold;
    margin: 8px 0px 8px 0px;
}
'''
'''--- styles/pages/campaign.module.css ---
.label{
    margin-top: 8px;
    font-family: Nexa Bold;
    font-style: normal;
    font-weight: bold;
}

.formRow{
    min-width: 50%;
    max-width: 100%;
}

.form{
    font-family: Nexa Light;
    font-style: normal;
    font-weight: light;
}
'''
'''--- styles/pages/home.module.css ---
.homeContainer {
    min-height: 100%;
    overflow: hidden;
}

.homeContainer>* {
    z-index: 20;
}

.overflow {
    overflow: hidden;
    position: relative;
}
'''
'''--- styles/pages/index.module.css ---

'''
'''--- tsconfig.json ---
{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": false,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "baseUrl": "."
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx"],
  "exclude": ["node_modules"]
}

'''