*GitHub Repository "nicolasgarcia214/near-bootcamp-blockchain-academy"*

'''--- README.md ---
# Near bootcamp - Blockchain Academy Mexico (First Edition)

This repository includes a basic counter with a project structure for AssemblyScript contracts targeting the NEAR platform.

The example here is very basic.  It's a simple contract demonstrating the following concepts:
- a single contract
- the difference between `view` vs. `change` methods
- basic contract storage

## Usage

### Getting started

1. clone this repo to a local folder
2. run `yarn`
3. run `yarn asb` for compiling
3. run `yarn asp` for testing 

'''
'''--- as-pect.config.js ---
module.exports = require("near-sdk-as/imports");

'''
'''--- asconfig.json ---
{
  "extends": "near-sdk-as/asconfig.json"
}

'''
'''--- assembly/__tests__/as-pect.d.ts ---
/// <reference types="@as-pect/assembly/types/as-pect" />

'''
'''--- assembly/__tests__/counter.spec.ts ---
import {
  getCounter,
  resetCounter,
  decrementCounter,
  incrementCounter,
} from "..";

import { storage } from "near-sdk-as";

describe("The Counter Smart Contract implementation", () => {
  it("Should increase the counter", () => {
    incrementCounter(1);
    expect(getCounter()).toBe(1, "Tiene que ser Uno");
  });

  it("Should get the counter value", () => {
    expect(storage.getPrimitive<i32>("counter", 0)).toBe(getCounter());
  });

  it("Should decrease the counter", () => {
    incrementCounter(1);
    decrementCounter(1);
    expect(getCounter()).toBe(0, "Tiene que ser cero");
  });

  it("Should reset the counter", () => {
    incrementCounter(1);
    resetCounter();
    expect(getCounter()).toBe(0, "Tiene que ser cero");
  });

  it("should increment two times and decrement back to zero", () => {
    incrementCounter(3);
    expect(getCounter()).toBe(3, "It should be equal to 3");
    incrementCounter(4);
    expect(getCounter()).toBe(7, "It should be equal to 7");
    decrementCounter(7);
    expect(getCounter()).toBe(0, "It should be equal to 0");
  });
});

'''
'''--- assembly/as_types.d.ts ---
/// <reference types="near-sdk-as/assembly/as_types" />

'''
'''--- assembly/index.ts ---
import { storage, logging } from "near-sdk-as";

export function incrementCounter(value: i32): void {
  const newCounter = storage.getPrimitive<i32>("counter", 0) + value;
  storage.set<i32>("counter", newCounter);
  logging.log("Counter is now: " + newCounter.toString());
}

export function decrementCounter(value: i32): void {
  const newCounter = storage.getPrimitive<i32>("counter", 0) - value;
  storage.set<i32>("counter", newCounter);
  logging.log("Counter is now: " + newCounter.toString());
}

export function getCounter(): i32 {
  return storage.getPrimitive<i32>("counter", 0);
}

export function resetCounter(): void {
  storage.set<i32>("counter", 0);
  logging.log("Counter is reset!");
}

'''
'''--- assembly/tsconfig.json ---
{
  "extends": "assemblyscript/std/assembly.json"
}

'''
'''--- package.json ---
{
  "name": "nearbootcamp",
  "version": "1.0.0",
  "description": "Writting our first Smart Contract on Near Protocol",
  "main": "index.js",
  "scripts": {
    "test": "asp"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "devDependencies": {
    "near-sdk-as": "^3.2.3"
  }
}

'''