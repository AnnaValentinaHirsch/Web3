*GitHub Repository "NEARFoundation/ui.smart-whitelist"*

'''--- README.md ---
# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in your browser.

The page will reload when you make changes.\
You may also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can't go back!**

If you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.

You don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `npm run build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)

'''
'''--- package.json ---
{
  "name": "ui.smart-whitelist",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@emotion/react": "^11.7.1",
    "@emotion/styled": "^11.6.0",
    "@hookform/error-message": "^2.0.0",
    "@hookform/resolvers": "^2.8.8",
    "@mui/icons-material": "^5.4.2",
    "@mui/lab": "^5.0.0-alpha.70",
    "@mui/material": "^5.4.2",
    "@mui/styles": "^5.4.2",
    "@testing-library/jest-dom": "^5.16.2",
    "@testing-library/react": "^12.1.2",
    "@testing-library/user-event": "^13.5.0",
    "buffer": "^6.0.3",
    "easy-peasy": "^5.0.4",
    "history": "^5.2.0",
    "ky": "^0.28.7",
    "moment": "^2.29.1",
    "near-api-js": "^0.44.2",
    "onfido-sdk-ui": "^6.17.0",
    "query-string": "^7.1.1",
    "react": "^17.0.2",
    "react-dom": "^17.0.2",
    "react-hook-form": "^7.27.0",
    "react-router": "^6.2.1",
    "react-router-dom": "^6.2.1",
    "react-scripts": "5.0.0",
    "react-spinners-kit": "^1.9.1",
    "web-vitals": "^2.1.4",
    "yup": "^0.32.11"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "eslint": "^8.9.0",
    "eslint-config-prettier": "^8.3.0",
    "eslint-plugin-prettier": "^4.0.0",
    "eslint-plugin-react": "^7.28.0",
    "eslint-plugin-react-hooks": "^4.3.0",
    "near-seed-phrase": "^0.2.0",
    "prettier": "2.5.1"
  }
}

'''
'''--- public/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>NEAR KYC</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

'''
'''--- public/manifest.json ---
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

'''
'''--- public/robots.txt ---
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

'''
'''--- src/config/api.js ---
import ky from 'ky';
import { getKeyPair } from '../store/main/helpers/getKeyPair';
import { getSignature } from '../store/main/helpers/getSignature';
import { useStoreState } from 'easy-peasy';

const BACKEND = process.env.REACT_APP_BACKEND;
const TIME_OUT = process.env.REACT_APP_REQUEST_TIMEOUT || 10000;

const url = {
  registerSession: `${BACKEND}/register-session`,
  registerApplicant: `${BACKEND}/register-applicant`,
  generateSDKToken: `${BACKEND}/generate-sdk-token`,
  createCheck: `${BACKEND}/create-check`,
  loadCountries: `${BACKEND}/supported-applicant-countries`,
};

const headers = {
  'content-type': 'application/json',
};

const UseSignature = async (state) => {
  const session_token = state.main.session.session_token;
  const keyPair = await getKeyPair(state);
  const signature = await getSignature(keyPair, session_token);
  return signature;
};

const registerSession = (account_id, signature) => {
  return ky
    .post(url.registerSession, {
      headers,
      json: { account_id, signature },
      timeout: parseInt(TIME_OUT),
    })
    .json();
};

const registerApplicant = ({ data, account_id, signature }) => {
  const { first_name, last_name, dob, email, address } = data;
  return ky
    .post(url.registerApplicant, {
      json: { first_name, last_name, dob, email, account_id, address, signature },
      timeout: parseInt(TIME_OUT),
    })
    .json();
};

const generateSDKToken = async (state, account_id) => {
  const signature = await UseSignature(state);
  return ky
    .post(url.generateSDKToken, {
      json: { account_id, signature },
      timeout: parseInt(TIME_OUT),
    })
    .json();
};

const getCountries = async () => {
  return ky.get(url.loadCountries).json();
};

const createCheck = async (account_id, signature) => {
  return ky
    .post(url.createCheck, {
      json: { account_id, signature },
      timeout: parseInt(TIME_OUT),
    })
    .json();
};

export const api = {
  registerSession: registerSession,
  registerApplicant: registerApplicant,
  generateSDKToken: generateSDKToken,
  createCheck: createCheck,
  getCountries: getCountries,
};

'''
'''--- src/config/nearConfig.js ---
const testnet = {
  networkId: 'testnet',
  nodeUrl: 'https://rpc.testnet.near.org',
  walletUrl: 'https://wallet.testnet.near.org',
  helperUrl: 'https://helper.testnet.near.org',
  explorerUrl: 'https://explorer.testnet.near.org',
  contractName: process.env.REACT_APP_CONTRACT_NAME,
  isTestnet: true,
};

const mainnet = {
  networkId: 'mainnet',
  nodeUrl: 'https://rpc.mainnet.near.org',
  walletUrl: 'https://wallet.near.org',
  helperUrl: 'https://helper.mainnet.near.org',
  explorerUrl: 'https://explorer.near.org',
  contractName: process.env.REACT_APP_CONTRACT_NAME,
  isTestnet: false,
};

const configs = {
  testnet,
  mainnet,
};

const getNearConfig = (network) => {
  const config = configs[network];
  return {
    ...config,
  };
};

export const nearConfig = getNearConfig(process.env.REACT_APP_NETWORK);

'''
'''--- src/config/redirectPages.js ---
export const redirectPages = {
  verifyAccount: 'verify-account',
};

'''
'''--- src/config/routes.js ---
import qs from 'query-string';

export const routes = {
  home: '/',
  verifyAccount: '/verify-account',
  createProposal: '/create-proposal',
  redirectFromWallet: '/redirect-from-wallet',
};

export const getRoute = {
  callbackUrl: (params) => `${window.location.origin}/redirect-from-wallet?${qs.stringify(params)}`,
};

'''
'''--- src/index.css ---
* {
  padding: 0;
  margin: 0;
}

body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  width: 100%;
  max-width: 100%;
  height: 100vh;
}

#root {
  display: grid;
  grid-template-rows: fit-content(100%);
  height: 100%;
}
'''
'''--- src/logo.svg ---
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>
'''
'''--- src/pages/CreateProposal/CreateProposal.styles.js ---
import makeStyles from '@mui/styles/makeStyles';

const styles = (theme) => ({
  container: {
    width: '100%',
    height: '100%',
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center',
    justifyContent: 'space-between',
  },
  wrapper: {
    marginTop: theme.spacing(4),
    marginBottom: theme.spacing(4),
    display: 'flex',
    width: '100%',
    maxWidth: 560,
    backgroundColor: '#fff',
  },
  form: {
    display: 'flex',
    flexDirection: 'column',
    width: '100%',
    paddingLeft: 40,
    paddingRight: 40,
  },
  formHeader: {
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'flex-start',
    gap: theme.spacing(2),
    marginTop: theme.spacing(3),
    marginBottom: theme.spacing(3),
  },
  formTitle: {
    fontSize: '20px !important',
    fontWeight: '700 !important',
  },
  formDescription: {
    textAlign: 'left',
    fontSize: '16px !important',
  },
  inputGroup: {
    marginBottom: '24px !important',
    textAlign: 'left',
    '& .MuiDivider-root::before': {
      width: '0 !important',
    },
  },
  formGroup: {
    flexDirection: 'row !important',
  },
  formFooter: {
    width: '100%',
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#fff',
    paddingTop: theme.spacing(2),
    paddingBottom: theme.spacing(2),
  },
  button: {
    borderRadius: '12px !important',
    paddingRight: '49px !important',
    paddingLeft: '49px !important',
  },
});

export const useStyles = makeStyles(styles, { name: 'CreateProposal' });

'''
'''--- src/pages/WelcomePage/WelcomePage.styles.js ---
import makeStyles from '@mui/styles/makeStyles';
import { Box } from '@mui/material';
import React from 'react';

const styles = (theme) => ({
  container: {
    display: 'grid',
    alignItems: 'center',
    gridTemplateColumns: '1fr minmax(386px, 1fr)',
    flex: 'auto',
    maxWidth: 1144,
    margin: '0 auto',
    [theme.breakpoints.down('sm')]: {
      display: 'flex',
      flexDirection: 'column-reverse',
    },
  },
  content: {},
  textBlock: {
    display: 'flex',
    flexDirection: 'column',
    gap: theme.spacing(3),
    [theme.breakpoints.down('sm')]: {
      alignItems: 'center',
    },
  },
  title: {
    marginLeft: theme.spacing(2),
    marginRight: theme.spacing(2),
  },
  description: {
    marginLeft: theme.spacing(2),
    marginRight: theme.spacing(2),
  },
  imageBox: {},
});

export const useStyles = makeStyles(styles, { name: 'WelcomePage' });

'''
'''--- src/reportWebVitals.js ---
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

'''
'''--- src/setupTests.js ---
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

'''
'''--- src/store/actions/index.js ---
import { resetState } from './resetState';

export const actions = {
  resetState,
};

'''
'''--- src/store/actions/resetState.js ---
import { action } from 'easy-peasy';
import { persistInitState as main } from '../main/initState';

export const resetState = action((state) => {
  state.main = main;
});

'''
'''--- src/store/index.js ---
import { createStore } from 'easy-peasy';
import { actions } from './actions';
import { main } from './main';

export const store = createStore(
  {
    ...actions,
    main,
  },
  {
    name: 'SmartWhitelist',
  },
);

'''
'''--- src/store/main/actions/clearTemporaryData.js ---
import { action } from 'easy-peasy';

export const clearTemporaryData = action((state) => {
  state.temporary = {};
});

'''
'''--- src/store/main/actions/disableLoading.js ---
import { action } from 'easy-peasy';

export const disableLoading = action((state) => {
  state.isLoading = false;
});

'''
'''--- src/store/main/actions/enableLoading.js ---
import { action } from 'easy-peasy';

export const enableLoading = action((state) => {
  state.isLoading = true;
});

'''
'''--- src/store/main/actions/index.js ---
import { setNearApi } from './setNearApi';
import { enableLoading } from './enableLoading';
import { disableLoading } from './disableLoading';
import { setError } from './setError';
import { resetError } from './resetError';
import { setTemporaryData } from './setTemporaryData';
import { clearTemporaryData } from './clearTemporaryData';
import { setSession } from './setSession';
import { setSdkToken } from './setSdkToken';

export const actions = {
  setNearApi,
  enableLoading,
  disableLoading,
  setTemporaryData,
  clearTemporaryData,
  setError,
  resetError,
  setSession,
  setSdkToken,
};

'''
'''--- src/store/main/actions/resetError.js ---
import { action } from 'easy-peasy';

export const resetError = action((state) => {
  state.error.isError = false;
  state.error.description = '';
});

'''
'''--- src/store/main/actions/setError.js ---
import { action } from 'easy-peasy';

export const setError = action((state, payload) => {
  state.error.isError = true;
  state.error.description = payload.description;
});

'''
'''--- src/store/main/actions/setNearApi.js ---
import { action } from 'easy-peasy';

export const setNearApi = action((state, payload) => {
  const { near, keyStore, wallet } = payload;
  state.entities.near = near;
  state.entities.keyStore = keyStore;
  state.entities.wallet = wallet;
});

'''
'''--- src/store/main/actions/setSdkToken.js ---
import { action } from 'easy-peasy';

export const setSdkToken = action((state, payload) => {
  console.log('payload', payload);
  state.onfido = payload;
});

'''
'''--- src/store/main/actions/setSession.js ---
import { action } from 'easy-peasy';

export const setSession = action((state, payload) => {
  state.session = Object.assign({}, state.session, payload);
});

'''
'''--- src/store/main/actions/setTemporaryData.js ---
import { action } from 'easy-peasy';

export const setTemporaryData = action((state, payload) => {
  state.temporary = payload;
});

'''
'''--- src/store/main/helpers/getContracts.js ---
import { Contract } from 'near-api-js';

export const getUserContract = (wallet, contractId) =>
  new Contract(wallet.account(), contractId, {
    viewMethods: ['get_applicant_pk', 'is_whitelisted'],
    changeMethods: ['register_applicant', 'remove_applicant'],
    signer: wallet.account(),
  });

'''
'''--- src/store/main/helpers/getKeyPair.js ---
import { nearConfig } from '../../../config/nearConfig';

const { networkId } = nearConfig;
export const getKeyPair = async (state) => {
  const wallet = state.main.entities.wallet;
  const accountId = wallet.getAccountId();
  const keyStore = wallet._keyStore;

  return keyStore.getKey(networkId, accountId);
};

'''
'''--- src/store/main/helpers/getNearApi.js ---
import { connect, keyStores, WalletConnection } from 'near-api-js';
import { nearConfig } from '../../../config/nearConfig';

const { networkId, nodeUrl, walletUrl } = nearConfig;

export const getNearApi = async () => {
  const keyStore = new keyStores.BrowserLocalStorageKeyStore();

  const near = await connect({
    networkId,
    nodeUrl,
    walletUrl,
    keyStore,
  });

  const wallet = new WalletConnection(near, 'app');

  return {
    near,
    wallet,
    keyStore,
  };
};

'''
'''--- src/store/main/helpers/getSession.js ---
import { api } from '../../../config/api';

const onSuccess = async (actions, response) => {
  const setSession = actions.main.setSession;
  setSession({ ...response, isRejected: false });
};

const onError = ({ actions }) => {
  actions.main.setSession({
    session_token: null,
    status: null,
  });
  actions.main.setError({
    isError: true,
    description: 'Session is not registered',
  });
};

export const getSession = async (actions, signature, account_id) => {
  try {
    const response = await api.registerSession(account_id, signature);
    if (response) await onSuccess(actions, response);
  } catch (e) {
    onError({ actions });
  }
};

'''
'''--- src/store/main/helpers/getSessionStatus.js ---
import { routes } from '../../../config/routes';

const { createApplicant, generateSDKToken, verifyAccount } = routes;

export const getSessionStatus = {
  new: createApplicant,
  registered: generateSDKToken,
  registered_token: generateSDKToken,
  verification_in_progress: null,
  applicant_was_rejected: null,
  account_is_whitelisted: null,
};

'''
'''--- src/store/main/helpers/getSessionToken.js ---
export const getSessionToken = (state) => {
  return state.session.session_token;
};

'''
'''--- src/store/main/helpers/getSignature.js ---
import bs58 from 'bs58';
import { Buffer } from 'buffer';
function toED25519(key) {
  return `${bs58.encode(Buffer.from(key))}`;
}

export const getSignature = async (keyPair, token) => {
  global.Buffer = Buffer;
  const msg = Buffer.from(token);
  const { signature } = keyPair.sign(msg);
  return toED25519(signature);
};

'''
'''--- src/store/main/helpers/isRedirectFromWallet.js ---
import qs from 'query-string';
import { matchPath } from 'react-router';
import { routes } from '../../../config/routes';

export const isRedirectFromWallet = (state, history) => {
  const { redirectAction } = qs.parse(history.location.search);

  const match = matchPath(
    {
      path: routes.redirectFromWallet,
      exact: true,
    },
    history.location.pathname,
  );

  return (
    typeof redirectAction === 'string' &&
    match &&
    state.main.temporary.redirectAction === redirectAction
  );
};

'''
'''--- src/store/main/index.js ---
import { persist } from 'easy-peasy';
import { persistInitState } from './initState';
import { actions } from './actions';
import { thunks } from './thunks';

export const main = persist(
  {
    ...persistInitState,
    ...actions,
    ...thunks,
  },
  {
    storage: 'localStorage',
    allow: ['session', 'onfido', 'temporary'],
  },
);

'''
'''--- src/store/main/initState.js ---
import { persist } from 'easy-peasy';
import { redirectPages } from '../../config/redirectPages';

const initState = {
  isLoading: false,
  error: {
    isError: false,
    description: '',
  },
  entities: {
    near: null,
    keyStore: null,
    wallet: null,
  },
  session: {
    session_token: null,
    status: null,
    isRejected: false,
  },
  onfido: {
    sdk_token: null,
  },
  temporary: {},
  navigation: { page: redirectPages.connectWallet },
};

export const persistInitState = persist(initState, {
  storage: 'localStorage',
});

'''
'''--- src/store/main/thunks/index.js ---
import { onInitApp } from './onInitApp';
import { onConnectWallet } from './onConnectWallet';
import { onDisconnect } from './onDisconnect';
import { onCreateApplicant } from './onCreateApplicant';
import { onRegisterSession } from './onRegisterSession';
import { onRegisterContract } from './onRegisterContract';
import { onGenerateSDKToken } from './onGenerateSDKToken';
import { onCreateCheck } from './onCreateCheck';

export const thunks = {
  onInitApp,
  onConnectWallet,
  onRegisterContract,
  onRegisterSession,
  onCreateApplicant,
  onGenerateSDKToken,
  onCreateCheck,
  onDisconnect,
};

'''
'''--- src/store/main/thunks/onConnectWallet.js ---
import { thunk } from 'easy-peasy';
import { getRoute } from '../../../config/routes';
import { redirectPages } from '../../../config/redirectPages';
import { nearConfig } from '../../../config/nearConfig';
import { Buffer } from 'buffer';

const { contractName } = nearConfig;

export const onConnectWallet = thunk(async (actions, _, helpers) => {
  global.Buffer = Buffer;
  const store = helpers.getStoreState();
  const wallet = store.main.entities.wallet;
  const redirectAction = redirectPages.verifyAccount;

  actions.setTemporaryData({ redirectAction });

  wallet.requestSignIn({
    contractId: contractName,
    successUrl: getRoute.callbackUrl({ redirectAction }),
    failureUrl: getRoute.callbackUrl({ redirectAction, errorCode: 'userReject' }),
  });
});

'''
'''--- src/store/main/thunks/onCreateApplicant.js ---
import { thunk } from 'easy-peasy';
import { getSignature } from '../helpers/getSignature';
import { getKeyPair } from '../helpers/getKeyPair';
import { Buffer } from 'buffer';
import { api } from '../../../config/api';

export const onCreateApplicant = thunk(async (_, payload, { getStoreState, getStoreActions }) => {
  global.Buffer = Buffer;
  const { data } = payload;
  const state = getStoreState();
  const actions = getStoreActions();
  const { setError, setSession, onRegisterSession } = actions.main;
  try {
    const wallet = state.main.entities.wallet;
    const account_id = wallet.getAccountId();
    const sessionToken = state.main.session.session_token;
    const keyPair = await getKeyPair(state);
    const signature = await getSignature(keyPair, sessionToken);
    await api.registerApplicant({ data, account_id, signature });
    await onRegisterSession();
  } catch (e) {
    setError({
      isError: true,
      description: 'Please try again latter.',
    });
    setSession({
      session_token: null,
      status: null,
    });
  }
});

'''
'''--- src/store/main/thunks/onCreateCheck.js ---
import { thunk } from 'easy-peasy';
import { getKeyPair } from '../helpers/getKeyPair';
import { getSignature } from '../helpers/getSignature';
import { api } from '../../../config/api';

export const onCreateCheck = thunk(async (_, payload, { getStoreState, getStoreActions }) => {
  const state = getStoreState();
  const actions = getStoreActions();
  const { setError, onRegisterSession } = actions.main;
  try {
    const wallet = state.main.entities.wallet;
    const account_id = wallet.getAccountId();
    const sessionToken = state.main.session.session_token;
    const keyPair = await getKeyPair(state);
    const signature = await getSignature(keyPair, sessionToken);
    await api.createCheck(account_id, signature);
    await onRegisterSession();
    document.location.reload();
  } catch (e) {
    setError({
      isError: true,
      description: 'Check error...',
    });
  }
});

'''
'''--- src/store/main/thunks/onDisconnect.js ---
import { thunk } from 'easy-peasy';
import { routes } from '../../../config/routes';
import { getNearApi } from '../helpers/getNearApi';

export const onDisconnect = thunk(async (_, history, { getStoreActions }) => {
  const actions = getStoreActions();
  const { enableLoading, disableLoading } = actions.main;
  try {
    enableLoading();
    const resetState = actions.resetState;
    const setNearApi = actions.main.setNearApi;
    localStorage.clear();
    resetState();
    history.replace(routes.home);
    setNearApi(await getNearApi());
  } catch (e) {
    console.log(`Error: ${e}`);
  } finally {
    disableLoading();
    document.location.reload();
  }
});

'''
'''--- src/store/main/thunks/onGenerateSDKToken.js ---
import { thunk } from 'easy-peasy';
import { Buffer } from 'buffer';
import { api } from '../../../config/api';

export const onGenerateSDKToken = thunk(async (_, payload, { getStoreState, getStoreActions }) => {
  global.Buffer = Buffer;
  const state = getStoreState();
  const actions = getStoreActions();
  const { enableLoading, disableLoading, setSdkToken, setSession, onRegisterSession } =
    actions.main;
  try {
    enableLoading();
    const wallet = state.main.entities.wallet;
    const account_id = wallet.getAccountId();
    const sdk = await api.generateSDKToken(state, account_id);
    setSdkToken(sdk);
    await onRegisterSession();
  } catch (e) {
    setSession({
      session_token: null,
      status: null,
      isRejected: false,
    });
  } finally {
    disableLoading();
  }
});

'''
'''--- src/store/main/thunks/onInitApp.js ---
import { thunk } from 'easy-peasy';
import { getNearApi } from '../helpers/getNearApi';
import { isRedirectFromWallet } from '../helpers/isRedirectFromWallet';
import { onRedirectFromWallet } from './onRedirectFromWallet';
import { onLoadPage } from './onLoadPage';
import { Buffer } from 'buffer';

export const onInitApp = thunk(async (actions, payload, helpers) => {
  global.Buffer = Buffer;
  const { history, setInit } = payload;
  const { setNearApi, setError } = actions;
  try {
    setNearApi(await getNearApi());

    const state = helpers.getStoreState();

    if (isRedirectFromWallet(state, history)) {
      await onRedirectFromWallet(actions, history);
    } else {
      await onLoadPage(state, history);
    }

    setInit(true);
  } catch (e) {
    setError({
      isError: true,
      description: 'Application is not loaded. Please try again letter.',
    });
  }
});

'''
'''--- src/store/main/thunks/onLoadPage.js ---
import { matchPath } from 'react-router';
import { routes } from '../../../config/routes';

const { home, verifyAccount, createProposal } = routes;

const rootHandler = ({ replace, state }) => {
  console.log('rootHandler');
  const { wallet } = state.main.entities;
  if (!wallet.isSignedIn()) return replace(home);
  return replace(verifyAccount);
};

const verifyAccountHandler = ({ replace, state }) => {
  console.log('verifyAccountHandler');
  const { wallet } = state.main.entities;
  if (!wallet.isSignedIn()) return replace(home);
  return replace(verifyAccount);
};

const createProposalHandler = ({ replace, state }) => {
  console.log('createProposalHandler');
  const { wallet } = state.main.entities;
  const isWhiteListed = state.main.session.status === 'account_is_whitelisted';
  if (!wallet.isSignedIn()) return replace(home);
  if (!isWhiteListed) return replace(home);
  return replace(createProposal);
};

const handlers = {
  [home]: rootHandler,
  [verifyAccount]: verifyAccountHandler,
  [createProposal]: createProposalHandler,
};

export const onLoadPage = async (state, history) => {
  const mp = Object.keys(routes).find((route) =>
    matchPath({ path: routes[route], exact: true }, history.location.pathname),
  );

  if (mp) await handlers[routes[mp]]({ replace: history.replace, state });
};

'''
'''--- src/store/main/thunks/onRedirectFromWallet.js ---
import qs from 'query-string';
import { redirectPages } from '../../../config/redirectPages';
import { routes } from '../../../config/routes';

const onError = (actions, history) => {
  actions.setError({
    isError: true,
    description: 'You have not connected your wallet!',
  });
  history.replace(routes.home);
};

export const onRedirectFromWallet = async (actions, history) => {
  try {
    const query = qs.parse(history.location.search);
    const { redirectAction, errorCode } = query;
    if (errorCode) onError(actions, history);
    if (redirectAction === redirectPages.verifyAccount) {
      history.replace(routes.verifyAccount);
    }
  } catch (e) {
    console.log(`Error: ${e}`);
    onError(actions, history);
  } finally {
    document.location.reload();
  }
};

'''
'''--- src/store/main/thunks/onRegisterContract.js ---
import { thunk } from 'easy-peasy';
import { getUserContract } from '../helpers/getContracts';
import { Buffer } from 'buffer';
import { nearConfig } from '../../../config/nearConfig';
import { getKeyPair } from '../helpers/getKeyPair';

const { contractName } = nearConfig;

export const onRegisterContract = thunk(async (_, history, { getStoreState, getStoreActions }) => {
  const actions = getStoreActions();
  const { enableLoading, disableLoading, setError } = actions.main;
  try {
    global.Buffer = Buffer;
    const state = getStoreState();
    const wallet = state.main.entities.wallet;
    const accountId = wallet?.getAccountId();
    if (accountId) {
      const keyPair = await getKeyPair(state);
      const public_key = keyPair.getPublicKey().toString();
      const contract = getUserContract(wallet, contractName);
      const applicantPk = await contract.get_applicant_pk({
        applicant_account_id: accountId,
      });
      const isWhitelisted = await contract.is_whitelisted({ account_id: accountId });

      if (isWhitelisted) return;

      const isMatch = public_key === applicantPk;
      enableLoading();
      if (!applicantPk) {
        await contract.register_applicant();
      } else {
        if (!isMatch) {
          await contract.remove_applicant();
          await contract.register_applicant();
        }
      }
    }
  } catch (e) {
    setError({
      isError: true,
      description: 'Applicant was not registered',
    });
  } finally {
    disableLoading();
  }
});

'''
'''--- src/store/main/thunks/onRegisterSession.js ---
import { thunk } from 'easy-peasy';
import { getSession } from '../helpers/getSession';
import { getKeyPair } from '../helpers/getKeyPair';
import { getSignature } from '../helpers/getSignature';
import moment from 'moment';

export const onRegisterSession = thunk(async (_, payload, { getStoreState, getStoreActions }) => {
  const state = getStoreState();
  const actions = getStoreActions();
  const { enableLoading, disableLoading } = actions.main;
  try {
    const wallet = state.main.entities.wallet;
    const account_id = wallet?.getAccountId();
    if (account_id) {
      enableLoading();
      const keyPair = await getKeyPair(state);
      const signature = await getSignature(
        keyPair,
        `${account_id}-${moment().format('YYYY-MM-DD')}`,
      );
      await getSession(actions, signature, account_id);
    }
  } catch (e) {
    console.log(`Error: ${e}`);
  } finally {
    disableLoading();
  }
});

'''
'''--- src/ui/App.test.js ---
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

'''
'''--- src/ui/components/Header/UserMenu/UserMenu.styles.js ---
import makeStyles from '@mui/styles/makeStyles';
import { alpha } from '@mui/material/styles';

const styles = (theme) => ({
  account: {
    fontWeight: '700 !important',
    textAlign: 'left',
  },
  button: {
    fontSize: '10px !important',
    borderRadius: '16px !important',
    maxWidth: 196,
  },
  textWrapper: {
    whiteSpace: 'nowrap',
    overflow: 'hidden',
  },
  menu: {
    '& .MuiPaper-root': {
      borderRadius: 6,
      marginTop: theme.spacing(1),
      minWidth: 280,
      color: theme.palette.mode === 'light' ? 'rgb(55, 65, 81)' : theme.palette.grey[300],
      boxShadow:
        'rgb(255, 255, 255) 0px 0px 0px 0px, rgba(0, 0, 0, 0.05) 0px 0px 0px 1px, rgba(0, 0, 0, 0.1) 0px 10px 15px -3px, rgba(0, 0, 0, 0.05) 0px 4px 6px -2px',
      '& .MuiMenu-list': {
        padding: '4px 0',
      },
      '& .MuiMenuItem-root': {
        '& .MuiSvgIcon-root': {
          fontSize: 18,
          color: theme.palette.text.secondary,
          marginRight: theme.spacing(1.5),
        },
        '&:active': {
          backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),
        },
      },
    },
  },
});

export const useStyles = makeStyles(styles, { name: 'UserMenu' });

'''
'''--- src/ui/components/KYCSteps/CheckVerification/CheckVerification.styles.js ---
import makeStyles from '@mui/styles/makeStyles';

const styles = (theme) => ({
  root: {
    width: '100%',
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center',
    justifyContent: 'space-between',
    height: '100%',
  },
  container: {
    maxWidth: '100%',
    width: 560,
    maxHeight: 208,
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    paddingTop: 40,
    paddingBottom: 40,
    marginTop: 64,
    marginBottom: 64,
    background: '#fff',
    marginLeft: 16,
    marginRight: 16,
  },
  form: {
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center',
  },
  img: {
    width: 72,
    height: 72,
  },
  formHeader: {
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center',
    gap: 16,
    marginTop: 24,
    marginBottom: 24,
  },
  formTitle: {
    fontSize: '20px !important',
    fontWeight: '700 !important',
  },
  formDescription: {
    color: '#555',
    textAlign: 'left',
    fontSize: '16px !important',
  },
  formFooter: {
    width: '100%',
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
    paddingBottom: 16,
    paddingTop: 16,
    backgroundColor: '#fff',
  },
  button: {
    paddingRight: '49px !important',
    paddingLeft: '49px !important',
    borderRadius: 12,
  },
});

export const useStyles = makeStyles(styles, { name: 'CheckVerification' });

'''
'''--- src/ui/components/KYCSteps/CreateApplicant/CreateApplicant.styles.js ---
import makeStyles from '@mui/styles/makeStyles';

const styles = (theme) => ({
  container: {
    height: '100%',
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center',
    justifyContent: 'center',
    marginTop: 32,
    marginBottom: 32,
  },
  wrapper: {
    display: 'flex',
    paddingLeft: 40,
    paddingRight: 40,
    backgroundColor: '#fff',
  },
  form: {
    maxWidth: 480,
    display: 'flex',
    flexDirection: 'column',
  },
  formHeader: {
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'flex-start',
    gap: theme.spacing(2),
    marginTop: theme.spacing(3),
    marginBottom: theme.spacing(3),
  },
  formTitle: {
    fontSize: '20px !important',
    fontWeight: [700],
  },
  inputGroup: {
    marginBottom: '24px !important',
    textAlign: 'left',
    '& .MuiDivider-root::before': {
      width: '0 !important',
    },
  },
  select: {
    '& .MuiFilledInput-root': {
      borderRadius: 4,
    },
  },
  formFooter: {
    display: 'flex',
    width: '100%',
    justifyContent: 'center',
    alignItems: 'center',
    paddingTop: 16,
    paddingBottom: 16,
    backgroundColor: '#fff',
  },
  button: {
    paddingRight: '49px !important',
    paddingLeft: '49px !important',
    borderRadius: 12,
  },
});

export const useStyles = makeStyles(styles, { name: 'CreateApplicant' });

'''
'''--- src/ui/components/general/Error/Error.styles.js ---
import makeStyles from '@mui/styles/makeStyles';

const styles = (theme) => ({
  modal: {
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
  },
  container: {
    width: 360,
    display: 'flex',
    flexDirection: 'column',
    outline: 'none',
    borderRadius: 8,
    padding: theme.spacing(2),
  },
  header: {
    color: 'rgba(0, 0, 0, 0.87)',
    fontWeight: 900,
  },
  footer: {
    display: 'flex',
    justifyContent: 'flex-end',
    alignItems: 'center',
  },
});

export const useStyles = makeStyles(styles, { name: 'Error' });

'''
'''--- src/ui/components/general/Input/Input.styles.js ---
import { makeStyles } from '@mui/styles';

const styles = (theme) => ({
  input: {
    '& .MuiFilledInput-root': {
      borderRadius: 12,
      borderBottom: 0,
      '& input': {
        paddingTop: theme.spacing(2),
        paddingRight: theme.spacing(4),
        paddingBottom: theme.spacing(2),
        paddingLeft: theme.spacing(2),
      },
    },
  },
});

export const useStyles = makeStyles(styles, { name: 'Input' });

'''