*GitHub Repository "near/indexers-docs"*

'''--- .github/ISSUE_TEMPLATE/BOUNTY.yml ---
name: "Simple Bounty"
description: "Use this template to create a HEROES Simple Bounty via Github bot"
title: "Bounty: "
labels: ["bounty"]
assignees: heroes-bot-test
body:
  - type: markdown
    attributes:
      value: |
        Hi! Let's set up your bounty! Please don't change the template - @heroes-bot-test won't be able to help you.

  - type: dropdown
    id: type
    attributes:
      label: What talent are you looking for?
      options:
        - Marketing
        - Development
        - Design
        - Other
        - Content
        - Research
        - Audit

  - type: textarea
    id: description
    attributes:
      label: What you need to be done?

  - type: dropdown
    id: tags
    attributes:
      label: Tags
      description: Add tags that match the topic of the work
      multiple: true
      options:
        - API
        - Blockchain
        - Community
        - CSS
        - DAO
        - dApp
        - DeFi
        - Design
        - Documentation
        - HTML
        - Javascript
        - NFT
        - React
        - Rust
        - Smart contract
        - Typescript
        - UI/UX
        - web3
        - Translation
        - Illustration
        - Branding
        - Copywriting
        - Blogging
        - Editing
        - Video Creation
        - Social Media
        - Graphic Design
        - Transcription
        - Product Design
        - Artificial Intelligence
        - Quality Assurance
        - Risk Assessment
        - Security Audit
        - Bug Bounty
        - Code Review
        - Blockchain Security
        - Smart Contract Testing
        - Penetration Testing
        - Vulnerability Assessment
        - BOS
        - News
        - Hackathon
        - NEARCON2023
        - NEARWEEK

  - type: input
    id: deadline
    attributes:
      label: Deadline
      description: "Set a deadline for your bounty. Please enter the date in format: DD.MM.YYYY"
      placeholder: "19.05.2027"

  - type: dropdown
    id: currencyType
    attributes:
      label: Currency
      description: What is the currency you want to pay?
      options:
        - USDC.e
        - USDT.e
        - DAI
        - wNEAR
        - USDt
        - XP
        - marmaj
        - NEKO
        - JUMP
        - USDC
        - NEARVIDIA
      default: 0
    validations:
      required: true

  - type: input
    id: currencyAmount
    attributes:
      label: Amount
      description: How much it will be cost?

  - type: markdown
    attributes:
      value: "## Advanced settings"

  - type: checkboxes
    id: kyc
    attributes:
      label: KYC
      description: "Use HEROES' KYC Verification, only applicants who passed HEROES' KYC can apply and work on this bounty!"
      options:
        - label: Use KYC Verification

  - type: markdown
    attributes:
      value: |
        ### This cannot be changed once the bounty is live!

'''
'''--- .github/workflows/build.yml ---
name: CI
on: [push]
jobs:
  build-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '16'
      - name: Build Docusaurus docs
        run: |
          npm install
          npm run build
        env:
          CROWDIN_PERSONAL_TOKEN: ${{ secrets.CROWDIN_PERSONAL_TOKEN }}

'''
'''--- .github/workflows/spellcheck.yml ---
name: spellchecker

on:
  pull_request:
    branches:
      - main

jobs:
  misspell:
    name: runner / misspell
    runs-on: ubuntu-latest
    steps:
      - name: Check out code.
        uses: actions/checkout@v1
      - name: misspell
        id: check_for_typos
        uses: reviewdog/action-misspell@v1
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          path: "./"
          locale: "US"

'''
'''--- README.md ---
# Website

This website is built using [Docusaurus 2](https://docusaurus.io/), a modern static website generator.

### Installation

```
$ yarn
```

### Local Development

```
$ yarn start
```

This command starts a local development server and opens up a browser window. Most changes are reflected live without having to restart the server.

### Build

```
$ yarn build
```

This command generates static content into the `build` directory and can be served using any static contents hosting service.

### Deployment

Using SSH:

```
$ USE_SSH=true yarn deploy
```

Not using SSH:

```
$ GIT_USER=<Your GitHub username> yarn deploy
```

If you are using GitHub pages for hosting, this command is a convenient way to build the website and push to the `gh-pages` branch.

'''
'''--- babel.config.js ---
module.exports = {
  presets: [require.resolve('@docusaurus/core/lib/babel/preset')],
};

'''
'''--- blog/2022-02-04-updates.md ---
---
slug: 2022-02-04-updates
title: Feb 4, 2022 Updates
authors: [khorolets, telezhnaya, frol]
tags: [updates]
---

Indexer Team is focused on NEAR Indexer microframework and Indexer for Explorer

Updates:

* Improved Indexer DB configuration: all the queries should run faster (@telezhnaya)
* Added the info about all contract deployments into Analytics DB https://github.com/near/near-analytics/pull/42 (@telezhnaya)
* Added support of FT events in Indexer https://github.com/near/near-indexer-for-explorer/pull/224 (@telezhnaya)
* Added some indexes into Indexer DB. Be careful, applying migration could take some time https://github.com/near/near-indexer-for-explorer/pull/243 (@telezhnaya)
* Introduced `ReceiptsCache` for Indexer for Explorer to avoid unnecessary SELECT queries to Indexer DB https://github.com/near/near-indexer-for-explorer/pull/234 and https://github.com/near/near-indexer-for-explorer/pull/244 (@khorolets)
* Prepared a release of Indexer for Explorer compatible with 1.24.0 nearcore (@khorolets)
* Made first steps in the complete remake of Indexer for Explorer - NEAR Lake https://github.com/near/near-lake (@khorolets)

'''
'''--- blog/2022-02-18-updates.md ---
---
slug: 2022-02-18-updates
title: Mar 18, 2022 updates
authors: [khorolets, telezhnaya, frol]
tags: [updates]
---

👋 How's it going, everyone? Seems like we are renaming to Data Team 🤷, so Data Team is here with fresh weekly updates. All the week we were working on [NEAR Lake](https://github.com/near/near-lake-indexer) pushing it to [MVP release](https://github.com/near/near-lake/milestone/2) as hard as we could.

Since the previous week:

<!-- truncate -->

* We have finished the revision of the `StreamerMessage` structure and decided to leave it as-is for now. In the future, we plan to adjust the way the underlying structures are serialized to JSON, but this is going to be in the future.
* NEAR Lake has been deployed to both testnet and mainnet networks in order to index the data from the genesis. (@khorolets)
  Unfortunately, or maybe, fortunately, yesterday we've noticed that the [order of the data we get from S3 is somehow broken](https://github.com/near/near-lake/issues/23). It happens because the object keys on S3 are strings and we forgot about the way numbers represented in strings are being sorted 🤦. But [the fix](https://github.com/near/near-lake/pull/24) is on the way and we will restart the indexing process one more time. (@khorolets)
* Meanwhile, NEAR Lake has been empowered with the CI 💪. However, some differences between the environment we build the release in and the servers we run it on causes problems. You can follow the progress by subscribing to [this issue](https://github.com/near/near-lake/issues/21). We'll figure it out. (@khorolets)
* NEAR Lake Framework [has been refactored](https://github.com/near/near-lake-framework/pull/6). We are trying different API approaches but looks like we are done here. (@khorolets)
* Check out the new [fancy README for NEAR Lake Framework](https://github.com/near/near-lake-framework/blob/main/README.md) we wrote this week. (@khorolets)

That's all for this week, folks! Thanks for being with us all this week. Please, have a great and peaceful weekend! Looking forward to see you all next week! Let's keep rocking! 🤘

'''
'''--- blog/2022-03-25-updates.md ---
---
slug: 2022-03-25-updates
title: Mar 25, 2022 Updates
authors: [khorolets, telezhnaya, frol]
tags: [updates]
---

👋 Hello everyone! It's been a while since the last update. Things went bananas in the world. Data Platform Team is currently safe and continues working. We're pushing the MVP release of NEAR Lake project and working on the refactoring of NEAR Indexer for Explorer. We're changing the data storage for Indexer for Explorer from PostgreSQL to SingleStore, it should improve the stability of the data flow and it should end up improving the stability of NEAR Explorer. At least in terms of data availability and decreasing the possible interruptions.

Since the previous update:

<!-- truncate -->

* We continue backfilling the data for NEAR Lake to AWS S3. You can see the updates in [this issue](https://github.com/near/near-lake/issues/8). For the record, we fill in some historical data for mainnet and testnet. All the fresh data is already available. (@khorolets)
* Small yet important improvement on the [near-lake-framework](https://github.com/near/near-lake-framework/pull/11) has been delivered. This will ensure the user gets consistent data without any gaps. (@khorolets)
* Also, today we have added some useful debug logging to NEAR Lake Framework (@khorolets)
* We have done some cost estimation to find out how much money a user will need to run a single instance of an indexer on top of NEAR Lake Framework. The numbers are quite exciting. Approximately $18.15 per month. See [the README section and explanation](https://github.com/near/near-lake-framework#cost-estimates) by yourself. @(khorolets)
* Ah, and we have launched a small project [`near-lake-pulse`](https://github.com/khorolets/near-lake-pulse) just to check if we have all the data stored on S3 consistently. The project is providing an endpoint with metrics for Prometheus. The source code might be used for inspiration (@khorolets)
* We are moving forward to the public announcement of NEAR Lake, probably next week. We're going to invite early adopters. Stay tuned!
* We have added a new table at [near-analytics](https://github.com/near/near-analytics/commit/9e2e6f774a42909d23c4cfda805f88cd84333304), it gives the understanding of average gas burnt between transactions (@telezhnaya)
* Meanwhile we are writing/rewriting NEAR Indexer for Explorer to NEAR Lake and SingleStore as a storage [here](https://github.com/telezhnaya/near-lake-flows-into-sql-base) (@telezhnaya)

It's been a tough month for everyone. Anyway, we are back online and keep rocking 🤘. Stay tuned! See you around!

'''
'''--- blog/2022-04-01-updates.md ---
---
slug: 2022-04-01-updates
title: Apr 1, 2022 Updates
authors: [khorolets, telezhnaya, frol]
tags: [updates]
---

👋👋 Hello-hello everybody! The Data Platform Team is here with the updates. It's been a wild week with big news, you know.

:::tip Announcement

We've managed to release an MVP of [NEAR Lake Framework](https://github.com/near/near-lake-framework) 🎉!

Read the announcement on the [NEAR Gov forum](https://gov.near.org/t/announcement-near-lake-framework-brand-new-word-in-indexer-building-approach/17668)

:::

We invite early adopters to use the brand-new way of building indexers. If you run an indexer already, please consider migrating to NEAR Lake Framework. This will drastically decrease your spending on infrastructure and eventually will minimize the time you need to maintain your indexers.

So, since the previous week:

<!-- truncate -->

* 🎉 We have publicly [announced the release of NEAR Lake Framework on the NEAR Gov forum](https://gov.near.org/t/announcement-near-lake-framework-brand-new-word-in-indexer-building-approach/17668) (@khorolets)
* 😱 In addition to the announcement we've published a video tutorial on [how to use NEAR Lake Framework on YouTube](https://www.youtube.com/watch?v=GsF7I93K-EQ). Please watch it, like it, and subscribe to the channel, you know what to do (@khorolets)
* Worth mentioning, the [source code for the tutorial](https://github.com/near-examples/near-lake-accounts-watcher) is available on GitHub (@khorolets)
* Just for the sake, we have rolled the [0.1.0 release of NEAR Lake indexer](https://github.com/near/near-lake/releases/tag/0.1.0). It's the one the Data Platform Team is running to provide data on AWS S3 for everyone (@khorolets)
* 🥰 By the way we thank @gueux for the contribution to NEAR Lake projects that allow developers to use S3 compatible services (e.g. for local development). Great job!
* We're finishing up the backfilling of the data for NEAR Lake to AWS S3. It's almost done for both testnet and mainnet. I want to remind you that all the up-to-date data is being stored and is already ready to be used. I guess a few more days left to finish the process. (@khorolets)
* 😇 We keep working on rewriting Indexer for Explorer on top of NEAR Lake Framework, switching it to use SingleStore instead of PostgreSQL. To give you some details we're planning the changes to the database structure and choosing the most appropriate libraries. We are going to start giving more details when there be any interesting ones. (@telezhnaya)
* And don't anyone for now, but we're working on NEAR Lake Framework JS, but shhh 🤫 (@khorolets)

I think the week was great and full of successful results 😅. We are looking forward to hearing from you what do you think about NEAR Lake Framework. Please, share your usage stories, we'd like to promote your indexers built on top of NEAR Lake Framework, it can inspire other projects. Your success stories may lead to even more great projects in our ecosystem.

That's all for this week. Stay tuned! Looking forward to seeing you next week.
And don't forget to keep rocking 🤘!

'''
'''--- blog/2022-04-08-updates.md ---
---
slug: 2022-04-08-updates
title: Apr 8, 2022 Updates
authors: [khorolets, telezhnaya, frol]
tags: [updates]
---

👋 Greetings! Data Platform Team is here with the updates. Don't have much to say, especially in comparison with the previous exciting week 😅. We are mostly focused on rewriting the Indexer for Explorer. Meanwhile, we are working on the creation of a whole new space with indexer docs, we want to create a knowledge base to share with everyone to help understand what indexer is, how to create one, and find out whether you need it in the first place.

Some details:

<!-- truncate -->

* Continue working on [the new version of Indexer](https://github.com/telezhnaya/near-lake-flows-into-sql-base). While we are still in the process of choosing the libraries, stress testing is started. Btw, if you want to change the naming, it's the right time to participate in the discussion [here](https://github.com/telezhnaya/near-lake-flows-into-sql-base/issues/6) (@telezhnaya)
* Working on setting up the indexer docs home (@khorolets)
* We've written a big article explaining the entire concept of indexers, described indexer projects we are running (@khorolets)
* Almost finished with a new video explaining how the Data flows in NEAR Blockchain (@khorolets)

We're planning to release **Indexer Docs next week**, so stay tuned it should be useful and fun.

Anyway, the week was pretty productive. Although, we believe next week will be even more exciting. Stay with us, keep on rolling 🤘. See you all next week!

'''
'''--- blog/2022-04-15-updates.md ---
---
slug: 2022-04-15-updates
title: Apr 15, 2022 Updates
authors: [khorolets, telezhnaya, frol]
tags: [updates]
---

👋 Wow, that was a very quick week. Hello everyone! Data Platform Team is here for the weekly updates. Unfortunately didn't succeed in publishing the Indexer Docs this week, because we're dealing with dedicated domain stuff. I really hope we'll do it next week.

Our team has created a draft OKRs for the 2022 Q2 and soon enough it will be finalized, so we've defined our focus for the next quarter 🎉

Our main focus remains the same:

<!-- truncate -->

- @telezhnaya keeps working on the new alternative version of Indexer for Explorer with a working name [NEAR Lake Flow into SQL Base](https://github.com/telezhnaya/near-lake-flows-into-sql-base)
- @khorolets and @frol are currently working on publishing the Indexer Docs. Meanwhile, the semi-ready docs are [published with a personal GitHub account](https://khorolets.github.io/near-lake-dock/docs/intro), but it's going to be moved from there very soon
- Also, we're filling Indexer Docs with actually docs and articles (@khorolets)
- For those who wonder, NEAR Lake Framework JavaScript is in development (@khorolets)

:::note Some tech details if you're curious

We're using TypeScript and now we need to provide a `StreamerMessage` type with annotations, it is huge and we want to do everything properly, so the developers wouldn't struggle using those. Thanks to everybody who waits patiently, we're working on it

:::

Though not everything we wanted has been achieved this week, we keep working, we keep planning, we keep rocking 🤘 That's all for now. Don't forget to have a rest. And have a great weekend! See you all next week!

'''
'''--- blog/2022-04-22-updates.md ---
---
slug: 2022-04-22-updates
title: Apr 22, 2022 Updates
authors: [khorolets, telezhnaya, frol]
tags: [updates]
---

👋 Greetings from the Data Platform team! We're here to share our updates for the week. While this week was as quick as the previous one for us, we've managed to bring you some news.

🎉 Please welcome to the new place where indexers-related docs live https://near-indexers.io/

This week we were focusing on:

<!-- truncate -->

* @telezhnaya is working on [NEAR Lake Flow into SQL Base](https://github.com/telezhnaya/near-lake-flows-into-sql-base). This week she's managed to fill up the SingleStore database with historical data. Now she is focused on query performance. Still not ready to share the results with the world. Stay tuned!
* As mentioned above we've published the [indexers docs](https://near-indexers.io/). A lot of work still needs to be done regarding the writing and filling up the docs. Though we've posted some useful articles:
  * [How data flows in NEAR Blockchain](https://near-indexers.io/docs/data-flow-and-structures/flow/near-data-flow) the article describes how data is flowing in NEAR Protocol. Also, this material is [empowered with a video](https://youtu.be/VSBJ-A69Km4) (@khorolets)
  * A separate article [Token Transfer flow](https://near-indexers.io/docs/data-flow-and-structures/flow/token-transfer-flow) with a more detailed explanation (@khorolets)
  * An article [Migrating to NEAR Lake Framework](https://github.com/near/indexers-docs/pull/2) is ready and a PR is created (@khorolets)
* Meanwhile, `nearcore` version `1.26.0-rc.1` was released on Wednesday and landed on `testnet`. So, please if you're running an indexer (on top of [NEAR Indexer Framework](https://near-indexers.io/docs/projects/near-indexer-framework)) don't forget to update to avoid your indexer from stuck on protocol upgrade. Traditional ["Get ready..." post](https://github.com/near/nearcore/discussions/6656) is a nice starting point
* Meanwhile we're preparing to publish *NEAR Indexer Framework JS* source code on GitHub, maybe next week (@khorolets)
* [NEAR Lake Framework](https://github.com/near/near-lake-framework) Rust is being prepared for publishing on crates.io (@khorolets)

I guess it's pretty much everything for this week from Data Platform.

By the way, there is a **Data Platform Community Meeting** that is going to happen **next week**, so watch for the updates. Thank you for your attention. See you next week 🤘!

'''
'''--- blog/authors.yml ---
khorolets:
  name: Bohdan Khorolets
  title: Indexer Wizard
  url: https://github.com/khorolets
  image_url: https://github.com/khorolets.png

telezhnaya:
  name: Olga Telezhnaya
  title: Data Wizard
  url: https://github.com/telezhnaya
  image_url: https://github.com/telezhnaya.png

frol:
  name: Vlad Frolov
  title: Data Platform Guru
  url: https://github.com/frol
  image_url: https://github.com/frol.png

tiffany:
  name: Yijia Tiffany Gao
  title: Majestic Product Manager
  url: https://github.com/TiffanyGYJ
  image_url: https://github.com/TiffanyGYJ.png

'''
'''--- docs/data-flow-and-structures/_category_.json ---
{
  "label": "Data Flow & Structures",
  "position": 3
}

'''
'''--- docs/data-flow-and-structures/flow/_category_.json ---
{
  "label": "Data Flow",
  "position": 1
}

'''
'''--- docs/data-flow-and-structures/structures/_category_.json ---
{
  "label": "Structures",
  "position": 2
}

'''
'''--- docs/intro.md ---
---
sidebar_position: 1
---

# Indexers Doc

Welcome to the Indexers Doc. Here you will find everything you need to know in order to familiarize yourself with the concept of indexers and even build your own one.

:::info Disclaimer

The explanation on this page assumes you have a certain level of understanding of the blockchain technology.

:::

## What is indexer?

### Blockchains and their nature

Blockchain data is optimized for serialized **writes**, one block at a time, as the chain is being created. Querying the blockchain for data about a specific block or account is fairly straightforward or a "narrow" query. However, querying data across many blocks can be cumbersome because we have to aggregate results from multiple single-block queries. Therefore, we can consider these *"wide" queries*.

Given the fact that a blockchain itself is a distributed database, and a smart contract (decentralized application, dApp) is an application that runs on a virtual machine inside a blockchain, we need to understand that smart contracts should *not* be considered as a "backend". While some applications might consist only of smart contracts, building a dApp with only smart contracts, in most cases, is not possible.

Smart contracts are limited in terms of interactions. By "interactions" we mean things that are very common in the real world, like user notifications, integration with third-party applications, etc.

However, the nature of a blockchain is that it *must* be deterministic. A critical feature of a blockchain is that it knows the state at a given time, and for blockchains that time unit is a block. Think of them as being snapshots. A blockchain does snapshots of its state on every block. We as users can call smart contracts for a specific block, and the blockchain provides guarantees that execution will always produce the same result for the same block any time we call it.

The deterministic nature of a blockchain closes it from external (off-chain) variables. It is totally impossible to perform a call to an API from within a smart contract. A blockchain and a smart contract are closed off from the external (off-chain) world.

![Blockchain closed from outer world](/docs/intro/blockchain.png)

Blockchains are great at providing a way to apply the requested changes to the state in a decentralized manner. However, in order to observe the changes, you need to actively pull the information from the network.

Instead of abstract explanations let's look at an example.

:::note Example dApp

Say, we have a smart contract that sells e-books. Once a user buys a book we want to send them a copy via email.

:::

The dApp has a helper deployed somewhere off-chain, and this helper has code that can send an email with a copy of an e-book. But how would we trigger the helper?

### Getting the data from a blockchain to the external world

NEAR blockchain implements a [JSON-RPC endpoint](https://docs.near.org/api/rpc/introduction) for everyone to interact with the blockchain. Through the JSON-RPC API users can call smart contracts triggering them to be executed with given parameters. Also, users can view the data from the blockchain.

So, continuing with our example we can make our helper pull a [Block](https://docs.near.org/api/rpc/block-chunk#block) every second, then pull all the [Chunks](https://docs.near.org/api/rpc/block-chunk#chunk) and analyze the Transactions included in the Block to check if there is a transaction to our smart contract with "buy an e-book" function call. If we observe such a Transaction, we need to ensure it is successful, so we don't send the e-book to a user whose "buy e-book" Transaction failed.

After the process is complete we can trigger the helper's code to send the user an email with the e-book they bought.

This approach is so-called *pull model* of getting the data. There is nothing wrong with this approach, but sometimes you might find it is not the most comfortable or reliable approach.

Also, not all the data is available through the JSON-RPC. *Local Receipts* for example are not available through the JSON-RPC, because they are not stored in NEAR node's internal database.

### Indexer

A blockchain indexer is an implementation of the *push model* of getting the data. Instead of actively pulling the data from the source, your helper waits for the data to be sent to it. The data is complete and so the helper can start analyzing it immediately; ideally the data is complete enough to avoid additional pulls to get more details.

Getting back to our example, the helper becomes **an indexer** that receives every *Block*, along with **Chunks**, **Transactions** with its statuses, etc. In the same way the helper analyzes the data and triggers the code to send the user an email with the e-book they bought.

![Indexer is streaming the data from the blockchain](/docs/intro/indexer.png)

:::info An indexer concept

An indexer listens to the *stream of data as it's being written on chain* and can then be immediately filtered and processed to detect interesting events or patterns.

:::

## Indexers and "wide" queries

The term *"wide" queries* was mentioned in the beginning of this document. Here's a recap:

:::note "Wide" queries definition

To query data across many blocks requires the aggregation of results from multiple single-block queries. We can consider these aggregates as coming from *"wide" queries*.

:::

Because indexers listen to the *stream of data* from the blockchain and the data can be immediately filtered and processed according to defined requirements, they can be used to simplify the "wide" queries execution. For example, a stream of data can be written to a permanent database for later data analysis using a convenient query language like SQL. That is what [Indexer for Explorer](https://docs.near.org/tools/indexer-for-explorer) is doing.

Another example that highlights the need for a "wide query" is when you use a seed phrase to recover one or more accounts. Since a seed phrase essentially represents a signing key pair, the recovery is for all accounts that share the associated public key. Therefore, when a seed phrase is used to recover an account via [NEAR Wallet](https://wallet.near.org), the query requires that all accounts with a matching public key are found and recovered. [NEAR Indexer for Explorer](https://docs.near.org/tools/indexer-for-explorer) is storing this data in a permanent database and this allows [NEAR Wallet](https://wallet.near.org) to perform such "wide queries". This is impossible to achieve using JSON-RPC only.

## Summary

We hope this article gives you an understanding of the Indexer concept. Also, we hope now you can easily decide whether you need an indexer for your application.

## What's next?

We encourage you to learn more about the [indexer project](./projects/overview.md). Please, proceed to [Tutorials](/tutorials/intro) section to learn how to build an indexer on practice.

'''
'''--- docs/projects/_category_.json ---
{
  "label": "Projects",
  "position": 2
}

'''
'''--- docs/projects/overview.md ---
---
sidebar_position: 1
sidebar_label: Overview
---

# Projects overview

Here's a quick overview of Indexer projects::

- [NEAR Indexer for Explorer](https://docs.near.org/tools/indexer-for-explorer): an indexer built on top of the indexer microframework. It watches and stores all events/data from the blockchain to a **PostgreSQL database**.
- [NEAR Lake Framework](https://docs.near.org/concepts/advanced/near-lake-framework): a companion library to NEAR Lake. It allows you to build your own indexer that watches a stream of blocks **from a NEAR Lake data source** and allows you to **create your own logic to process that data**. Keep in mind this is **probably the one you want to use for future projects**, instead of the Indexer Framework. Read [why](https://docs.near.org/concepts/advanced/near-indexer-framework#why-is-it-better-than-near-indexer-framework).
- [NEAR Indexer Framework](https://docs.near.org/concepts/advanced/near-indexer-framework): a micro-framework providing you with a "live" stream of blocks. Useful to handle on-chain real-time "events".
- [NEAR Lake Indexer](https://docs.near.org/concepts/advanced/near-lake-framework): an indexer built on top of the indexer microframework. It watches the blockchain and stores all events/data from the blockchain as **JSON files on AWS S3 or S3 compatible storage**.

'''
'''--- docusaurus.config.js ---
// @ts-check
// Note: type annotations allow type checking and IDEs autocompletion

const lightCodeTheme = require('prism-react-renderer/themes/github');
const darkCodeTheme = require('prism-react-renderer/themes/dracula');
const hightlightWords = require('./src/remark/rehype-highlight-word');

/** @type {import('@docusaurus/types').Config} */
const config = {
  title: 'Pagoda Indexer Docs',
  tagline: 'A warm place for indexer builders',
  url: 'https://near-indexers.io',
  baseUrl: '/',
  onBrokenLinks: 'throw',
  onBrokenMarkdownLinks: 'warn',
  favicon: 'img/favicon.png',
  organizationName: 'near', // Usually your GitHub org/user name.
  projectName: 'indexers-docs', // Usually your repo name.
  trailingSlash: false,
  scripts: [
    "/js/mixpanel.js",
  ],

  presets: [
    [
      'classic',
      /** @type {import('@docusaurus/preset-classic').Options} */
      ({
        docs: {
          sidebarPath: require.resolve('./sidebars.js'),
          // Please change this to your repo.
          editUrl: 'https://github.com/near/indexers-docs/tree/main/',
          remarkPlugins: [hightlightWords],
        },
        blog: {
          showReadingTime: true,
          // Please change this to your repo.
          editUrl:
            'https://github.com/near/indexers-docs/tree/main/',
        },
        theme: {
          customCss: [
            require.resolve('./src/css/custom.css'),
            require.resolve('./src/css/monokai-sublime.css'),
          ],
        },
      }),
    ],
  ],

  plugins: [
    [
      'content-docs',
      {
        id: 'tutorials',
        path: 'tutorials',
        routeBasePath: 'tutorials',
        sidebarPath: require.resolve('./sidebars.js'),
      },
    ],
  ],

  themes: [
    [
      require.resolve("@easyops-cn/docusaurus-search-local"),
      {
        hashed: true,
        indexPages: true,
        docsRouteBasePath: ['/'],
        docsDir: ["docs", "tutorials"],
      },
    ],
  ],

  themeConfig:
    /** @type {import('@docusaurus/preset-classic').ThemeConfig} */
    ({
      navbar: {
        title: 'Docs',
        logo: {
          alt: 'Pagoda Indexer Docs',
          src: 'img/logo.svg',
          srcDark: 'img/logo_dark.svg',
        },
        items: [
          {
            type: 'doc',
            docId: 'intro',
            position: 'left',
            label: 'Docs',
          },
          {
            to: '/tutorials/intro',
            position: 'left',
            label: 'Tutorials',
            activeBaseRegex: `/tutorials/`,
          },
          {to: '/blog', label: 'Blog', position: 'left'},
          {
            href: 'https://github.com/near/indexers-docs/',
            label: 'GitHub',
            position: 'right',
          },
        ],
      },
      footer: {
        style: 'dark',
        links: [
          {
            title: 'Docs',
            items: [
              {
                label: 'Docs',
                to: '/docs/intro',
              },
              {
                label: 'Tutorials',
                to: '/tutorials/intro',
              },
            ],
          },
          {
            title: 'Community',
            items: [
              {
                label: 'Stack Overflow',
                href: 'https://stackoverflow.com/questions/tagged/nearprotocol',
              },
            ],
          },
          {
            title: 'More',
            items: [
              {
                label: 'Blog',
                to: '/blog',
              },
              {
                label: 'GitHub',
                href: 'https://github.com/near/indexers-docs',
              },
            ],
          },
        ],
        copyright: `Copyright © ${new Date().getFullYear()} Pagoda, Inc. Built with Docusaurus.<br /> <a href="https://www.flaticon.com/free-stickers/summer" title="summer stickers">Summer stickers created by Stickers - Flaticon</a>`,
      },
      prism: {
        theme: darkCodeTheme,
        darkTheme: darkCodeTheme,
        additionalLanguages: ['rust'],
      },
      announcementBar: {
        id: 'lake_framework_announcement',
        content:
          'We have released <a target="_blank" rel="noopener noreferrer" href="https://gov.near.org/t/announcement-near-lake-framework-brand-new-word-in-indexer-building-approach/17668">NEAR Lake Framework</a> - a brand new word in indexer building approach</a>',
        backgroundColor: '#fafbfc',
        textColor: '#091E42',
        isCloseable: false,
      },
    }),
};

module.exports = config;

'''
'''--- package.json ---
{
  "name": "near-lake-dock",
  "version": "0.0.0",
  "private": true,
  "scripts": {
    "docusaurus": "docusaurus",
    "start": "docusaurus start",
    "build": "docusaurus build",
    "swizzle": "docusaurus swizzle",
    "deploy": "docusaurus deploy",
    "clear": "docusaurus clear",
    "serve": "docusaurus serve",
    "write-translations": "docusaurus write-translations",
    "write-heading-ids": "docusaurus write-heading-ids"
  },
  "dependencies": {
    "@docusaurus/core": "2.0.0-beta.18",
    "@docusaurus/preset-classic": "2.0.0-beta.18",
    "@easyops-cn/docusaurus-search-local": "^0.23.2",
    "@mdx-js/react": "^1.6.22",
    "clsx": "^1.1.1",
    "hast-util-to-string": "^2.0.0",
    "highlight.js": "^11.5.1",
    "prism-react-renderer": "^1.3.1",
    "react": "^17.0.2",
    "react-dom": "^17.0.2"
  },
  "browserslist": {
    "production": [
      ">0.5%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

'''
'''--- sidebars.js ---
/**
 * Creating a sidebar enables you to:
 - create an ordered group of docs
 - render a sidebar for each doc of that group
 - provide next/previous navigation

 The sidebars can be generated from the filesystem, or explicitly defined here.

 Create as many sidebars as you want.
 */

// @ts-check

/** @type {import('@docusaurus/plugin-content-docs').SidebarsConfig} */
const sidebars = {
  // By default, Docusaurus generates a sidebar from the docs folder structure
  tutorialSidebar: [{type: 'autogenerated', dirName: '.'}],

  // But you can create a sidebar manually
  /*
  tutorialSidebar: [
    {
      type: 'category',
      label: 'Tutorial',
      items: ['hello'],
    },
  ],
   */
};

module.exports = sidebars;

'''
'''--- src/components/HomepageFeatures/index.js ---
import React from 'react';
import clsx from 'clsx';
import Link from '@docusaurus/Link';
import styles from './styles.module.css';

import LakeImg from '@site/static/img/lake.png';
import FlowImg from '@site/static/img/flow.png';
import TutorialsImg from '@site/static/img/tutorials.png';

const FeatureList = [
  {
    title: 'NEAR Lake Framework',
    img: LakeImg,
    description: (
      <>
        We have created the most lightweight and cost efficient library to build your own indexer.
        Find out more about <Link to="https://docs.near.org/concepts/advanced/near-lake-framework">NEAR Lake Framework</Link>
      </>
    ),
  },
  {
    title: 'Learn NEAR Protocol Data Flow',
    img: FlowImg,
    description: (
      <>
        A lot of things happen in NEAR Protocol under the hood. In order to build your indexer you need to
        understand how data flows and what rules it follows. Start from <Link to="https://docs.near.org/concepts/data-flow/near-data-flow">NEAR Data Flow</Link> article
      </>
    ),
  },
  {
    title: 'Tutorials',
    img: TutorialsImg,
    description: (
      <>
        We believe in the power of examples and tutorials. That's why we are constantly working on creating new tutorials about indexers. Check out the <Link to="https://docs.near.org/tutorials/indexer/near-lake-state-changes-indexer">Getting started with NEAR Lake Framework tutorial</Link>
      </>
    ),
  },
];

function Feature({img, title, description}) {
  return (
    <div className={clsx('col col--4')}>
      <div className="text--center">
        <img src={img}  style={{ maxWidth: '40%' }}/>
      </div>
      <div className="text--center padding-horiz--md">
        <h3>{title}</h3>
        <p>{description}</p>
      </div>
    </div>
  );
}

export default function HomepageFeatures() {
  return (
    <section className={styles.features}>
      <div className="container">
        <div className="row">
          {FeatureList.map((props, idx) => (
            <Feature key={idx} {...props} />
          ))}
        </div>
      </div>
    </section>
  );
}

'''
'''--- src/components/HomepageFeatures/styles.module.css ---
.features {
  display: flex;
  align-items: center;
  padding: 2rem 0;
  width: 100%;
}

.featureSvg {
  height: 200px;
  width: 200px;
}

'''
'''--- src/components/ProgrammingLanguage/index.js ---
import React from 'react';
import clsx from 'clsx';
import styles from './styles.module.css';

import RustLang from '@site/static/img/rust.png';
import JSLang from '@site/static/img/js.png';
import PyLang from '@site/static/img/python.png';

const LANG_MAP = {
  'rust-lang': 'Rust',
  'rust': 'Rust',
  'javascript': 'JavaScript',
  'js': 'JavaScript',
  'ts': 'JavaScript',
  'typescript': 'JavaScript',
  'python': 'Python',
}

function LangImg({ lang }) {
  switch (lang) {
    case "rust-lang":
    case "rust":
      return <img src={RustLang} />
    case "javascript":
    case "js":
      return <img src={JSLang} />
    case "python":
      return <img src={PyLang} />
    default:
      return <></>
  }
}

export default function ProgrammingLanguage({ lang, small }) {
  return (
    <div className={small ? styles.containerSmall : styles.container}>
      <div className={small ? styles.logoSmall : styles.logo}>
        <LangImg lang={lang} />
      </div>
      {small ?
        <div className={styles.disclaimer}>
          {LANG_MAP[lang]}
        </div>
        :
        <div className={styles.disclaimer}>
          The article is written for {LANG_MAP[lang]} programming language. Concepts, advices, and examples might differ from other programming languages
        </div>
      }
    </div>
  )
}

'''
'''--- src/components/ProgrammingLanguage/styles.module.css ---
.container {
  display: flex;
  width: 100%;
  align-items: center;
  justify-content: flex-start;
  padding: 6px 12px;
  background-color:  #f5f5f5;
  border-radius: 6px;
  margin: 12px 0;
  border-left: 5px solid #c9c9c9;
}

.containerSmall {
  display: inline-flex;
  max-width: 130px;
  align-items: center;
  justify-content: flex-start;
  padding: 3px 6px;
  background-color:  #f5f5f5;
  border-radius: 6px;
  margin: 0;
  border-left: 5px solid #c9c9c9;
  vertical-align: middle;
}

.logo {
  flex: 1 1 0;
  min-width: 50px;
  display: flex;
  align-items: center;
}

.logoSmall {
  flex: 1 1 0;
  max-width: 30%;
  height: 20px;
  display: flex;
  align-items: center;
}

.disclaimer {
  font-size:  90%;
  line-height: 1;
  padding: 0 12px;
}

'''
'''--- src/css/custom.css ---
/**
 * Any CSS included here will be global. The classic template
 * bundles Infima by default. Infima is a CSS framework designed to
 * work well for content-centric websites.
 */

/* You can override the default Infima variables here. */
:root {
  --ifm-color-primary: #2e8555;
  --ifm-color-primary-dark: #29784c;
  --ifm-color-primary-darker: #277148;
  --ifm-color-primary-darkest: #205d3b;
  --ifm-color-primary-light: #33925d;
  --ifm-color-primary-lighter: #359962;
  --ifm-color-primary-lightest: #3cad6e;
  --ifm-code-font-size: 95%;
}

/* For readability concerns, you should choose a lighter palette in dark mode. */
[data-theme='dark'] {
  --ifm-color-primary: #25c2a0;
  --ifm-color-primary-dark: #21af90;
  --ifm-color-primary-darker: #1fa588;
  --ifm-color-primary-darkest: #1a8870;
  --ifm-color-primary-light: #29d5b0;
  --ifm-color-primary-lighter: #32d8b4;
  --ifm-color-primary-lightest: #4fddbf;
}

.docusaurus-highlight-code-line {
  background-color: rgba(0, 0, 0, 0.1);
  display: block;
  margin: 0 calc(-1 * var(--ifm-pre-padding));
  padding: 0 var(--ifm-pre-padding);
}

[data-theme='dark'] .docusaurus-highlight-code-line {
  background-color: rgba(0, 0, 0, 0.3);
}

.indexer-hightlight {
  background-color: rgb(46, 133, 85);
  padding: 2px 6px;
  color: rgb(255, 255, 255);
  text-decoration: underline;
}

.indexer-hightlight:hover {
  text-decoration: none;
  color:  rgb(0, 0, 0);
  background-color: rgb(255, 255, 255);
}

[data-theme='dark'] .indexer-hightlight {
  background-color: rgb(37, 194, 160);
  color: rgb(255, 255, 255);
}

'''
'''--- src/css/monokai-sublime.css ---
/*

Monokai Sublime style. Derived from Monokai by noformnocontent http://nn.mit-license.org/

*/

.hljs {
  background: #23241f;
  color: #f8f8f2;
}

.hljs-tag,
.hljs-subst {
  color: #f8f8f2;
}

.hljs-strong,
.hljs-emphasis {
  color: #a8a8a2;
}

.hljs-bullet,
.hljs-quote,
.hljs-number,
.hljs-regexp,
.hljs-literal,
.hljs-link {
  color: #ae81ff;
}

.hljs-code,
.hljs-title,
.hljs-section,
.hljs-selector-class {
  color: #a6e22e;
}

.hljs-strong {
  font-weight: bold;
}

.hljs-emphasis {
  font-style: italic;
}

.hljs-keyword,
.hljs-selector-tag,
.hljs-name,
.hljs-attr {
  color: #f92672;
}

.hljs-symbol,
.hljs-attribute {
  color: #66d9ef;
}

.hljs-params,
.hljs-title.class_,
.hljs-class .hljs-title {
  color: #f8f8f2;
}

.hljs-string,
.hljs-type,
.hljs-built_in,
.hljs-selector-id,
.hljs-selector-attr,
.hljs-selector-pseudo,
.hljs-addition,
.hljs-variable,
.hljs-template-variable {
  color: #e6db74;
}

.hljs-comment,
.hljs-deletion,
.hljs-meta {
  color: #75715e;
}

'''
'''--- src/pages/index.js ---
import React from 'react';
import clsx from 'clsx';
import Layout from '@theme/Layout';
import Link from '@docusaurus/Link';
import useDocusaurusContext from '@docusaurus/useDocusaurusContext';
import styles from './index.module.css';
import HomepageFeatures from '@site/src/components/HomepageFeatures';

function HomepageHeader() {
  const {siteConfig} = useDocusaurusContext();
  return (
    <header className={clsx('hero hero--primary', styles.heroBanner)}>
      <div className="container">
        <h1 className="hero__title">Indexer Docs</h1>
        <p className="hero__subtitle">Indexer is a set of tooling that helps developers to monitor the data flowing in the blockchain network</p>
        <div className={styles.buttons}>
          <Link
            className="button button--secondary button--lg"
            to="/docs/intro">
            Read about Indexer Concept - 5min ⏱️
          </Link>
        </div>
      </div>
    </header>
  );
}

export default function Home() {
  const {siteConfig} = useDocusaurusContext();
  return (
    <Layout
      title={`Hello from ${siteConfig.title}`}
      description="Description will go into a meta tag in <head />">
      <HomepageHeader />
      <main>
        <HomepageFeatures />
      </main>
    </Layout>
  );
}

'''
'''--- src/pages/index.module.css ---
/**
 * CSS files with the .module.css suffix will be treated as CSS modules
 * and scoped locally.
 */

.heroBanner {
  padding: 4rem 0;
  text-align: center;
  position: relative;
  overflow: hidden;
}

@media screen and (max-width: 996px) {
  .heroBanner {
    padding: 2rem;
  }
}

.buttons {
  display: flex;
  align-items: center;
  justify-content: center;
}

'''
'''--- src/pages/markdown-page.md ---
---
title: Markdown page example
---

# Markdown page example

You don't need React to write simple standalone pages.

'''
'''--- src/remark/rehype-highlight-word.js ---
/*
Custom plugin to empower code blocks with the feature of links.

Usage:

``` links=1
___Link text__https://near.org/___
```

The URL part might be:
- absolute (https://near.org)
- relative (/docs/overview)
- anchor link (#section)
*/
const visit = require('unist-util-visit');
const hljs = require('highlight.js');

const CALLOUT = /___(.*?)__(.*?)___/g;

function plugin(options) {
  const transformer = async (ast) => {
    let codeBlockImported = false;
    visit(ast, ['code', 'import'], (node) => {
      if (node.type === 'code') {
        let result = '';
        if (node.lang) {
          result = hljs.highlight(node.value, { language: node.lang }).value;
        } else {
          result = hljs.highlightAuto(node.value).value;
        }
        if (node.meta && node.meta.includes('links')) {
          result = result.replaceAll(CALLOUT, (_, text, href) => `<a href="${href}" class="indexer-hightlight">${text}</a>`);
        }
        result = result.replaceAll('\n', '<br/>');
        result = result.replaceAll('{', '&#123;');
        result = result.replaceAll('}', '&#125;');

        node.type = "jsx";
        node.value = `<CodeBlock className="language-${node.lang}">${result}</CodeBlock>`;
      } else if (node.type === 'import') {
        if (node.value.includes('@theme/CodeBlock')) {
          codeBlockImported = true;
        }
      }
    })
    if (!codeBlockImported) {
      ast.children.unshift({
        type: 'import',
        value: "import CodeBlock from '@theme/CodeBlock';",
      });
    }
  };
  return transformer;
};

module.exports = plugin;

'''
'''--- static/img/logo.svg ---
<svg width="1449" height="258" viewBox="0 0 1449 258" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M0 97L46 52L90 97C83 102.333 66 117.5 46 117.5C27.3882 117.5 7.66667 104.667 0 97Z" fill="#262626"/>
<path d="M70 165.5L116 210.5L160 165.5C153 160.167 136 145 116 145C97.3882 145 77.6667 157.833 70 165.5Z" fill="#262626"/>
<path d="M115.5 52L160.5 98L115.5 142C110.167 135 95 118 95 98C95 79.3882 107.833 59.6667 115.5 52Z" fill="#262626"/>
<path d="M45 120L2.01072e-06 166L45 210C50.3333 203 65.5 186 65.5 166C65.5 147.388 52.6667 127.667 45 120Z" fill="#262626"/>
<path d="M204.6 192V62.4H255.81C259.23 62.4 262.41 62.64 265.35 63.12C272.19 64.2 278.01 66.6 282.81 70.32C287.61 73.98 291.24 78.66 293.7 84.36C296.16 90 297.39 96.3 297.39 103.26C297.39 110.22 296.16 116.55 293.7 122.25C291.24 127.89 287.58 132.57 282.72 136.29C277.92 139.95 272.13 142.32 265.35 143.4C262.41 143.88 259.23 144.12 255.81 144.12H220.62V192H204.6ZM255.27 128.91C258.33 128.91 261.03 128.64 263.37 128.1C269.19 126.78 273.57 123.78 276.51 119.1C279.51 114.42 281.01 109.14 281.01 103.26C281.01 97.38 279.51 92.1 276.51 87.42C273.57 82.74 269.19 79.74 263.37 78.42C261.03 77.88 258.33 77.61 255.27 77.61H220.62V128.91H255.27ZM377.527 111.09C378.787 113.85 379.627 116.91 380.047 120.27C380.467 123.57 380.677 127.44 380.677 131.88V192H366.457V176.88C358.717 188.76 346.717 194.7 330.457 194.7C323.437 194.7 317.437 193.41 312.457 190.83C307.477 188.19 303.727 184.68 301.207 180.3C298.687 175.92 297.427 171.06 297.427 165.72C297.427 151.38 305.377 141.87 321.277 137.19C325.957 135.93 331.327 134.82 337.387 133.86C343.447 132.9 350.707 131.85 359.167 130.71L364.927 129.9C364.687 122.04 362.707 116.28 358.987 112.62C355.267 108.9 349.267 107.04 340.987 107.04C334.867 107.04 329.617 108.45 325.237 111.27C320.917 114.03 317.917 118.29 316.237 124.05L301.027 119.46C303.367 110.76 307.927 104.04 314.707 99.3C321.547 94.5 330.367 92.1 341.167 92.1C350.107 92.1 357.697 93.72 363.937 96.96C370.237 100.14 374.767 104.85 377.527 111.09ZM332.887 181.29C338.467 181.29 343.387 180.3 347.647 178.32C351.907 176.28 355.357 173.58 357.997 170.22C360.637 166.8 362.347 163.02 363.127 158.88C363.727 156.84 364.117 154.56 364.297 152.04C364.537 149.52 364.687 146.7 364.747 143.58L360.337 144.12C351.877 145.26 345.367 146.19 340.807 146.91C336.307 147.63 332.197 148.53 328.477 149.61C323.857 151.05 320.167 153.03 317.407 155.55C314.707 158.07 313.357 161.43 313.357 165.63C313.357 168.45 314.047 171.06 315.427 173.46C316.807 175.8 318.967 177.69 321.907 179.13C324.847 180.57 328.507 181.29 332.887 181.29ZM463.657 94.8H477.877V192.63C477.877 198.45 477.487 203.43 476.707 207.57C474.847 217.71 470.287 225.3 463.027 230.34C455.767 235.38 446.227 237.9 434.407 237.9C426.427 237.9 418.987 236.07 412.087 232.41C405.247 228.81 399.877 223.53 395.977 216.57L410.647 208.83C412.927 213.39 416.197 216.78 420.457 219C424.777 221.28 429.457 222.42 434.497 222.42C452.857 222.42 461.947 212.43 461.767 192.45V183.09C458.227 186.81 454.057 189.69 449.257 191.73C444.457 193.71 439.117 194.7 433.237 194.7C424.357 194.7 416.617 192.48 410.017 188.04C403.477 183.54 398.437 177.42 394.897 169.68C391.417 161.88 389.677 153.09 389.677 143.31C389.677 133.59 391.417 124.86 394.897 117.12C398.437 109.32 403.477 103.2 410.017 98.76C416.617 94.32 424.327 92.1 433.147 92.1C439.627 92.1 445.417 93.27 450.517 95.61C455.617 97.95 459.997 101.31 463.657 105.69V94.8ZM435.217 180.03C444.637 180.03 451.717 176.7 456.457 170.04C461.257 163.38 463.657 154.47 463.657 143.31C463.657 132.15 461.287 123.27 456.547 116.67C451.807 110.07 444.847 106.77 435.667 106.77C429.307 106.77 423.937 108.36 419.557 111.54C415.237 114.72 411.997 119.07 409.837 124.59C407.737 130.05 406.687 136.29 406.687 143.31C406.687 150.39 407.737 156.69 409.837 162.21C411.997 167.73 415.207 172.08 419.467 175.26C423.787 178.44 429.037 180.03 435.217 180.03ZM535.406 194.7C525.866 194.7 517.556 192.54 510.476 188.22C503.456 183.84 498.056 177.78 494.276 170.04C490.496 162.24 488.606 153.33 488.606 143.31C488.606 133.23 490.526 124.32 494.366 116.58C498.206 108.84 503.666 102.84 510.746 98.58C517.826 94.26 526.046 92.1 535.406 92.1C544.946 92.1 553.256 94.26 560.336 98.58C567.416 102.9 572.846 108.93 576.626 116.67C580.406 124.41 582.296 133.29 582.296 143.31C582.296 153.45 580.376 162.42 576.536 170.22C572.756 177.96 567.326 183.99 560.246 188.31C553.166 192.57 544.886 194.7 535.406 194.7ZM535.406 179.49C545.186 179.49 552.596 176.25 557.636 169.77C562.736 163.23 565.286 154.41 565.286 143.31C565.286 132.09 562.736 123.3 557.636 116.94C552.536 110.52 545.126 107.31 535.406 107.31C525.566 107.31 518.126 110.55 513.086 117.03C508.106 123.51 505.616 132.27 505.616 143.31C505.616 154.53 508.166 163.38 513.266 169.86C518.426 176.28 525.806 179.49 535.406 179.49ZM659.892 62.4H676.002V192H661.692V181.02C658.032 185.4 653.652 188.79 648.552 191.19C643.452 193.53 637.692 194.7 631.272 194.7C622.392 194.7 614.652 192.48 608.052 188.04C601.512 183.54 596.472 177.42 592.932 169.68C589.452 161.88 587.712 153.09 587.712 143.31C587.712 133.59 589.452 124.86 592.932 117.12C596.472 109.32 601.512 103.2 608.052 98.76C614.652 94.32 622.362 92.1 631.182 92.1C637.122 92.1 642.492 93.09 647.292 95.07C652.152 97.05 656.352 99.9 659.892 103.62V62.4ZM633.252 180.03C642.672 180.03 649.752 176.7 654.492 170.04C659.292 163.38 661.692 154.47 661.692 143.31C661.692 132.15 659.322 123.27 654.582 116.67C649.842 110.07 642.882 106.77 633.702 106.77C627.342 106.77 621.972 108.36 617.592 111.54C613.272 114.72 610.032 119.07 607.872 124.59C605.772 130.05 604.722 136.29 604.722 143.31C604.722 150.39 605.772 156.69 607.872 162.21C610.032 167.73 613.242 172.08 617.502 175.26C621.822 178.44 627.072 180.03 633.252 180.03ZM766.917 111.09C768.177 113.85 769.017 116.91 769.437 120.27C769.857 123.57 770.067 127.44 770.067 131.88V192H755.847V176.88C748.107 188.76 736.107 194.7 719.847 194.7C712.827 194.7 706.827 193.41 701.847 190.83C696.867 188.19 693.117 184.68 690.597 180.3C688.077 175.92 686.817 171.06 686.817 165.72C686.817 151.38 694.767 141.87 710.667 137.19C715.347 135.93 720.717 134.82 726.777 133.86C732.837 132.9 740.097 131.85 748.557 130.71L754.317 129.9C754.077 122.04 752.097 116.28 748.377 112.62C744.657 108.9 738.657 107.04 730.377 107.04C724.257 107.04 719.007 108.45 714.627 111.27C710.307 114.03 707.307 118.29 705.627 124.05L690.417 119.46C692.757 110.76 697.317 104.04 704.097 99.3C710.937 94.5 719.757 92.1 730.557 92.1C739.497 92.1 747.087 93.72 753.327 96.96C759.627 100.14 764.157 104.85 766.917 111.09ZM722.277 181.29C727.857 181.29 732.777 180.3 737.037 178.32C741.297 176.28 744.747 173.58 747.387 170.22C750.027 166.8 751.737 163.02 752.517 158.88C753.117 156.84 753.507 154.56 753.687 152.04C753.927 149.52 754.077 146.7 754.137 143.58L749.727 144.12C741.267 145.26 734.757 146.19 730.197 146.91C725.697 147.63 721.587 148.53 717.867 149.61C713.247 151.05 709.557 153.03 706.797 155.55C704.097 158.07 702.747 161.43 702.747 165.63C702.747 168.45 703.437 171.06 704.817 173.46C706.197 175.8 708.357 177.69 711.297 179.13C714.237 180.57 717.897 181.29 722.277 181.29Z" fill="#262626"/>
<path d="M847.88 192H823.4V62.4H847.88V192ZM918.962 91.92C930.362 91.92 938.852 94.83 944.432 100.65C950.072 106.47 953.552 112.62 954.872 119.1C956.252 125.58 956.942 131.7 956.942 137.46V192H932.102V146.1C932.102 141.18 931.742 136.56 931.022 132.24C930.302 127.92 928.382 123.96 925.262 120.36C922.202 116.76 917.522 114.96 911.222 114.96C905.582 114.96 900.722 116.91 896.642 120.81C892.562 124.65 890.522 131.94 890.522 142.68V192H865.682V94.8H887.462V104.79C891.122 100.71 895.592 97.56 900.872 95.34C906.152 93.06 912.182 91.92 918.962 91.92ZM1032.18 62.4H1056.84V192H1035.24V186.42C1027.98 191.94 1019.22 194.7 1008.96 194.7C1000.2 194.7 992.398 192.48 985.558 188.04C978.778 183.54 973.498 177.39 969.718 169.59C965.998 161.79 964.138 153.06 964.138 143.4C964.138 133.56 966.028 124.74 969.808 116.94C973.648 109.14 979.048 103.05 986.008 98.67C993.028 94.29 1001.1 92.1 1010.22 92.1C1018.56 92.1 1025.88 94.08 1032.18 98.04V62.4ZM1012.92 172.92C1027.8 172.92 1035.24 163.08 1035.24 143.4C1035.24 134.16 1033.5 126.93 1030.02 121.71C1026.6 116.49 1021.2 113.88 1013.82 113.88C1008.54 113.88 1004.13 115.2 1000.59 117.84C997.048 120.42 994.408 123.93 992.668 128.37C990.928 132.81 990.058 137.82 990.058 143.4C990.058 152.1 991.978 159.21 995.818 164.73C999.658 170.19 1005.36 172.92 1012.92 172.92ZM1094.01 150.24C1094.91 157.2 1097.28 162.54 1101.12 166.26C1105.02 169.98 1110.24 171.84 1116.78 171.84C1121.52 171.84 1125.6 170.79 1129.02 168.69C1132.5 166.59 1135.14 163.56 1136.94 159.6L1161.42 166.62C1159.02 172.44 1155.63 177.48 1151.25 181.74C1146.87 185.94 1141.83 189.15 1136.13 191.37C1130.43 193.59 1124.46 194.7 1118.22 194.7C1108.38 194.7 1099.62 192.57 1091.94 188.31C1084.32 184.05 1078.35 178.11 1074.03 170.49C1069.77 162.87 1067.64 154.26 1067.64 144.66C1067.64 134.22 1069.71 125.04 1073.85 117.12C1078.05 109.14 1083.87 102.99 1091.31 98.67C1098.75 94.29 1107.24 92.1 1116.78 92.1C1126.14 92.1 1134.27 94.17 1141.17 98.31C1148.07 102.45 1153.35 108.33 1157.01 115.95C1160.73 123.57 1162.59 132.51 1162.59 142.77C1162.59 144.39 1162.47 146.88 1162.23 150.24H1094.01ZM1117.86 113.34C1104.96 113.34 1097.22 119.58 1094.64 132.06H1137.48C1136.64 125.52 1134.63 120.78 1131.45 117.84C1128.33 114.84 1123.8 113.34 1117.86 113.34ZM1188.03 192H1159.23L1193.97 142.86L1159.95 94.8H1188.75L1208.19 123.6L1227.27 94.8H1256.07L1222.05 142.86L1256.97 192H1228.17L1208.19 162.12L1188.03 192ZM1279.91 150.24C1280.81 157.2 1283.18 162.54 1287.02 166.26C1290.92 169.98 1296.14 171.84 1302.68 171.84C1307.42 171.84 1311.5 170.79 1314.92 168.69C1318.4 166.59 1321.04 163.56 1322.84 159.6L1347.32 166.62C1344.92 172.44 1341.53 177.48 1337.15 181.74C1332.77 185.94 1327.73 189.15 1322.03 191.37C1316.33 193.59 1310.36 194.7 1304.12 194.7C1294.28 194.7 1285.52 192.57 1277.84 188.31C1270.22 184.05 1264.25 178.11 1259.93 170.49C1255.67 162.87 1253.54 154.26 1253.54 144.66C1253.54 134.22 1255.61 125.04 1259.75 117.12C1263.95 109.14 1269.77 102.99 1277.21 98.67C1284.65 94.29 1293.14 92.1 1302.68 92.1C1312.04 92.1 1320.17 94.17 1327.07 98.31C1333.97 102.45 1339.25 108.33 1342.91 115.95C1346.63 123.57 1348.49 132.51 1348.49 142.77C1348.49 144.39 1348.37 146.88 1348.13 150.24H1279.91ZM1303.76 113.34C1290.86 113.34 1283.12 119.58 1280.54 132.06H1323.38C1322.54 125.52 1320.53 120.78 1317.35 117.84C1314.23 114.84 1309.7 113.34 1303.76 113.34ZM1391.5 99.48C1396.96 96.12 1403.44 94.44 1410.94 94.44C1412.98 94.44 1414.84 94.56 1416.52 94.8V117.66C1414.66 117.06 1412.35 116.76 1409.59 116.76C1405.03 116.76 1400.98 117.6 1397.44 119.28C1393.12 121.26 1389.82 124.2 1387.54 128.1C1385.26 132 1384.12 136.74 1384.12 142.32V192H1359.46V94.8H1381.06V110.46C1383.76 105.6 1387.24 101.94 1391.5 99.48Z" fill="#262626"/>
</svg>

'''
'''--- static/img/logo_dark.svg ---
<svg width="1449" height="258" viewBox="0 0 1449 258" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M0 97L46 52L90 97C83 102.333 66 117.5 46 117.5C27.3882 117.5 7.66667 104.667 0 97Z" fill="white"/>
<path d="M70 165.5L116 210.5L160 165.5C153 160.167 136 145 116 145C97.3882 145 77.6667 157.833 70 165.5Z" fill="white"/>
<path d="M115.5 52L160.5 98L115.5 142C110.167 135 95 118 95 98C95 79.3882 107.833 59.6667 115.5 52Z" fill="white"/>
<path d="M45 120L2.01072e-06 166L45 210C50.3333 203 65.5 186 65.5 166C65.5 147.388 52.6667 127.667 45 120Z" fill="white"/>
<path d="M204.6 192V62.4H255.81C259.23 62.4 262.41 62.64 265.35 63.12C272.19 64.2 278.01 66.6 282.81 70.32C287.61 73.98 291.24 78.66 293.7 84.36C296.16 90 297.39 96.3 297.39 103.26C297.39 110.22 296.16 116.55 293.7 122.25C291.24 127.89 287.58 132.57 282.72 136.29C277.92 139.95 272.13 142.32 265.35 143.4C262.41 143.88 259.23 144.12 255.81 144.12H220.62V192H204.6ZM255.27 128.91C258.33 128.91 261.03 128.64 263.37 128.1C269.19 126.78 273.57 123.78 276.51 119.1C279.51 114.42 281.01 109.14 281.01 103.26C281.01 97.38 279.51 92.1 276.51 87.42C273.57 82.74 269.19 79.74 263.37 78.42C261.03 77.88 258.33 77.61 255.27 77.61H220.62V128.91H255.27ZM377.527 111.09C378.787 113.85 379.627 116.91 380.047 120.27C380.467 123.57 380.677 127.44 380.677 131.88V192H366.457V176.88C358.717 188.76 346.717 194.7 330.457 194.7C323.437 194.7 317.437 193.41 312.457 190.83C307.477 188.19 303.727 184.68 301.207 180.3C298.687 175.92 297.427 171.06 297.427 165.72C297.427 151.38 305.377 141.87 321.277 137.19C325.957 135.93 331.327 134.82 337.387 133.86C343.447 132.9 350.707 131.85 359.167 130.71L364.927 129.9C364.687 122.04 362.707 116.28 358.987 112.62C355.267 108.9 349.267 107.04 340.987 107.04C334.867 107.04 329.617 108.45 325.237 111.27C320.917 114.03 317.917 118.29 316.237 124.05L301.027 119.46C303.367 110.76 307.927 104.04 314.707 99.3C321.547 94.5 330.367 92.1 341.167 92.1C350.107 92.1 357.697 93.72 363.937 96.96C370.237 100.14 374.767 104.85 377.527 111.09ZM332.887 181.29C338.467 181.29 343.387 180.3 347.647 178.32C351.907 176.28 355.357 173.58 357.997 170.22C360.637 166.8 362.347 163.02 363.127 158.88C363.727 156.84 364.117 154.56 364.297 152.04C364.537 149.52 364.687 146.7 364.747 143.58L360.337 144.12C351.877 145.26 345.367 146.19 340.807 146.91C336.307 147.63 332.197 148.53 328.477 149.61C323.857 151.05 320.167 153.03 317.407 155.55C314.707 158.07 313.357 161.43 313.357 165.63C313.357 168.45 314.047 171.06 315.427 173.46C316.807 175.8 318.967 177.69 321.907 179.13C324.847 180.57 328.507 181.29 332.887 181.29ZM463.657 94.8H477.877V192.63C477.877 198.45 477.487 203.43 476.707 207.57C474.847 217.71 470.287 225.3 463.027 230.34C455.767 235.38 446.227 237.9 434.407 237.9C426.427 237.9 418.987 236.07 412.087 232.41C405.247 228.81 399.877 223.53 395.977 216.57L410.647 208.83C412.927 213.39 416.197 216.78 420.457 219C424.777 221.28 429.457 222.42 434.497 222.42C452.857 222.42 461.947 212.43 461.767 192.45V183.09C458.227 186.81 454.057 189.69 449.257 191.73C444.457 193.71 439.117 194.7 433.237 194.7C424.357 194.7 416.617 192.48 410.017 188.04C403.477 183.54 398.437 177.42 394.897 169.68C391.417 161.88 389.677 153.09 389.677 143.31C389.677 133.59 391.417 124.86 394.897 117.12C398.437 109.32 403.477 103.2 410.017 98.76C416.617 94.32 424.327 92.1 433.147 92.1C439.627 92.1 445.417 93.27 450.517 95.61C455.617 97.95 459.997 101.31 463.657 105.69V94.8ZM435.217 180.03C444.637 180.03 451.717 176.7 456.457 170.04C461.257 163.38 463.657 154.47 463.657 143.31C463.657 132.15 461.287 123.27 456.547 116.67C451.807 110.07 444.847 106.77 435.667 106.77C429.307 106.77 423.937 108.36 419.557 111.54C415.237 114.72 411.997 119.07 409.837 124.59C407.737 130.05 406.687 136.29 406.687 143.31C406.687 150.39 407.737 156.69 409.837 162.21C411.997 167.73 415.207 172.08 419.467 175.26C423.787 178.44 429.037 180.03 435.217 180.03ZM535.406 194.7C525.866 194.7 517.556 192.54 510.476 188.22C503.456 183.84 498.056 177.78 494.276 170.04C490.496 162.24 488.606 153.33 488.606 143.31C488.606 133.23 490.526 124.32 494.366 116.58C498.206 108.84 503.666 102.84 510.746 98.58C517.826 94.26 526.046 92.1 535.406 92.1C544.946 92.1 553.256 94.26 560.336 98.58C567.416 102.9 572.846 108.93 576.626 116.67C580.406 124.41 582.296 133.29 582.296 143.31C582.296 153.45 580.376 162.42 576.536 170.22C572.756 177.96 567.326 183.99 560.246 188.31C553.166 192.57 544.886 194.7 535.406 194.7ZM535.406 179.49C545.186 179.49 552.596 176.25 557.636 169.77C562.736 163.23 565.286 154.41 565.286 143.31C565.286 132.09 562.736 123.3 557.636 116.94C552.536 110.52 545.126 107.31 535.406 107.31C525.566 107.31 518.126 110.55 513.086 117.03C508.106 123.51 505.616 132.27 505.616 143.31C505.616 154.53 508.166 163.38 513.266 169.86C518.426 176.28 525.806 179.49 535.406 179.49ZM659.892 62.4H676.002V192H661.692V181.02C658.032 185.4 653.652 188.79 648.552 191.19C643.452 193.53 637.692 194.7 631.272 194.7C622.392 194.7 614.652 192.48 608.052 188.04C601.512 183.54 596.472 177.42 592.932 169.68C589.452 161.88 587.712 153.09 587.712 143.31C587.712 133.59 589.452 124.86 592.932 117.12C596.472 109.32 601.512 103.2 608.052 98.76C614.652 94.32 622.362 92.1 631.182 92.1C637.122 92.1 642.492 93.09 647.292 95.07C652.152 97.05 656.352 99.9 659.892 103.62V62.4ZM633.252 180.03C642.672 180.03 649.752 176.7 654.492 170.04C659.292 163.38 661.692 154.47 661.692 143.31C661.692 132.15 659.322 123.27 654.582 116.67C649.842 110.07 642.882 106.77 633.702 106.77C627.342 106.77 621.972 108.36 617.592 111.54C613.272 114.72 610.032 119.07 607.872 124.59C605.772 130.05 604.722 136.29 604.722 143.31C604.722 150.39 605.772 156.69 607.872 162.21C610.032 167.73 613.242 172.08 617.502 175.26C621.822 178.44 627.072 180.03 633.252 180.03ZM766.917 111.09C768.177 113.85 769.017 116.91 769.437 120.27C769.857 123.57 770.067 127.44 770.067 131.88V192H755.847V176.88C748.107 188.76 736.107 194.7 719.847 194.7C712.827 194.7 706.827 193.41 701.847 190.83C696.867 188.19 693.117 184.68 690.597 180.3C688.077 175.92 686.817 171.06 686.817 165.72C686.817 151.38 694.767 141.87 710.667 137.19C715.347 135.93 720.717 134.82 726.777 133.86C732.837 132.9 740.097 131.85 748.557 130.71L754.317 129.9C754.077 122.04 752.097 116.28 748.377 112.62C744.657 108.9 738.657 107.04 730.377 107.04C724.257 107.04 719.007 108.45 714.627 111.27C710.307 114.03 707.307 118.29 705.627 124.05L690.417 119.46C692.757 110.76 697.317 104.04 704.097 99.3C710.937 94.5 719.757 92.1 730.557 92.1C739.497 92.1 747.087 93.72 753.327 96.96C759.627 100.14 764.157 104.85 766.917 111.09ZM722.277 181.29C727.857 181.29 732.777 180.3 737.037 178.32C741.297 176.28 744.747 173.58 747.387 170.22C750.027 166.8 751.737 163.02 752.517 158.88C753.117 156.84 753.507 154.56 753.687 152.04C753.927 149.52 754.077 146.7 754.137 143.58L749.727 144.12C741.267 145.26 734.757 146.19 730.197 146.91C725.697 147.63 721.587 148.53 717.867 149.61C713.247 151.05 709.557 153.03 706.797 155.55C704.097 158.07 702.747 161.43 702.747 165.63C702.747 168.45 703.437 171.06 704.817 173.46C706.197 175.8 708.357 177.69 711.297 179.13C714.237 180.57 717.897 181.29 722.277 181.29Z" fill="white"/>
<path d="M847.88 192H823.4V62.4H847.88V192ZM918.962 91.92C930.362 91.92 938.852 94.83 944.432 100.65C950.072 106.47 953.552 112.62 954.872 119.1C956.252 125.58 956.942 131.7 956.942 137.46V192H932.102V146.1C932.102 141.18 931.742 136.56 931.022 132.24C930.302 127.92 928.382 123.96 925.262 120.36C922.202 116.76 917.522 114.96 911.222 114.96C905.582 114.96 900.722 116.91 896.642 120.81C892.562 124.65 890.522 131.94 890.522 142.68V192H865.682V94.8H887.462V104.79C891.122 100.71 895.592 97.56 900.872 95.34C906.152 93.06 912.182 91.92 918.962 91.92ZM1032.18 62.4H1056.84V192H1035.24V186.42C1027.98 191.94 1019.22 194.7 1008.96 194.7C1000.2 194.7 992.398 192.48 985.558 188.04C978.778 183.54 973.498 177.39 969.718 169.59C965.998 161.79 964.138 153.06 964.138 143.4C964.138 133.56 966.028 124.74 969.808 116.94C973.648 109.14 979.048 103.05 986.008 98.67C993.028 94.29 1001.1 92.1 1010.22 92.1C1018.56 92.1 1025.88 94.08 1032.18 98.04V62.4ZM1012.92 172.92C1027.8 172.92 1035.24 163.08 1035.24 143.4C1035.24 134.16 1033.5 126.93 1030.02 121.71C1026.6 116.49 1021.2 113.88 1013.82 113.88C1008.54 113.88 1004.13 115.2 1000.59 117.84C997.048 120.42 994.408 123.93 992.668 128.37C990.928 132.81 990.058 137.82 990.058 143.4C990.058 152.1 991.978 159.21 995.818 164.73C999.658 170.19 1005.36 172.92 1012.92 172.92ZM1094.01 150.24C1094.91 157.2 1097.28 162.54 1101.12 166.26C1105.02 169.98 1110.24 171.84 1116.78 171.84C1121.52 171.84 1125.6 170.79 1129.02 168.69C1132.5 166.59 1135.14 163.56 1136.94 159.6L1161.42 166.62C1159.02 172.44 1155.63 177.48 1151.25 181.74C1146.87 185.94 1141.83 189.15 1136.13 191.37C1130.43 193.59 1124.46 194.7 1118.22 194.7C1108.38 194.7 1099.62 192.57 1091.94 188.31C1084.32 184.05 1078.35 178.11 1074.03 170.49C1069.77 162.87 1067.64 154.26 1067.64 144.66C1067.64 134.22 1069.71 125.04 1073.85 117.12C1078.05 109.14 1083.87 102.99 1091.31 98.67C1098.75 94.29 1107.24 92.1 1116.78 92.1C1126.14 92.1 1134.27 94.17 1141.17 98.31C1148.07 102.45 1153.35 108.33 1157.01 115.95C1160.73 123.57 1162.59 132.51 1162.59 142.77C1162.59 144.39 1162.47 146.88 1162.23 150.24H1094.01ZM1117.86 113.34C1104.96 113.34 1097.22 119.58 1094.64 132.06H1137.48C1136.64 125.52 1134.63 120.78 1131.45 117.84C1128.33 114.84 1123.8 113.34 1117.86 113.34ZM1188.03 192H1159.23L1193.97 142.86L1159.95 94.8H1188.75L1208.19 123.6L1227.27 94.8H1256.07L1222.05 142.86L1256.97 192H1228.17L1208.19 162.12L1188.03 192ZM1279.91 150.24C1280.81 157.2 1283.18 162.54 1287.02 166.26C1290.92 169.98 1296.14 171.84 1302.68 171.84C1307.42 171.84 1311.5 170.79 1314.92 168.69C1318.4 166.59 1321.04 163.56 1322.84 159.6L1347.32 166.62C1344.92 172.44 1341.53 177.48 1337.15 181.74C1332.77 185.94 1327.73 189.15 1322.03 191.37C1316.33 193.59 1310.36 194.7 1304.12 194.7C1294.28 194.7 1285.52 192.57 1277.84 188.31C1270.22 184.05 1264.25 178.11 1259.93 170.49C1255.67 162.87 1253.54 154.26 1253.54 144.66C1253.54 134.22 1255.61 125.04 1259.75 117.12C1263.95 109.14 1269.77 102.99 1277.21 98.67C1284.65 94.29 1293.14 92.1 1302.68 92.1C1312.04 92.1 1320.17 94.17 1327.07 98.31C1333.97 102.45 1339.25 108.33 1342.91 115.95C1346.63 123.57 1348.49 132.51 1348.49 142.77C1348.49 144.39 1348.37 146.88 1348.13 150.24H1279.91ZM1303.76 113.34C1290.86 113.34 1283.12 119.58 1280.54 132.06H1323.38C1322.54 125.52 1320.53 120.78 1317.35 117.84C1314.23 114.84 1309.7 113.34 1303.76 113.34ZM1391.5 99.48C1396.96 96.12 1403.44 94.44 1410.94 94.44C1412.98 94.44 1414.84 94.56 1416.52 94.8V117.66C1414.66 117.06 1412.35 116.76 1409.59 116.76C1405.03 116.76 1400.98 117.6 1397.44 119.28C1393.12 121.26 1389.82 124.2 1387.54 128.1C1385.26 132 1384.12 136.74 1384.12 142.32V192H1359.46V94.8H1381.06V110.46C1383.76 105.6 1387.24 101.94 1391.5 99.48Z" fill="white"/>
</svg>

'''
'''--- static/index.html ---
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="UTF-8" />
    <meta
      http-equiv="refresh"
      content="0; url=https://docs.near.org/"
    />
    <script type="text/javascript">
      window.location.href = 'https://docs.near.org/concepts/advanced/indexers';
    </script>
    <title>NEAR</title>
  </head>
  <body>
    If you are not redirected automatically, follow this
    <a href="https://docs.near.org/">link</a>.
  </body>
</html>

'''
'''--- static/js/mixpanel.js ---
// mixpanel Tracking code for near-indexers.io
  (function(c,a){if(!a.__SV){var b=window;try{var d,m,j,k=b.location,f=k.hash;d=function(a,b){return(m=a.match(RegExp(b+"=([^&]*)")))?m[1]:null};f&&d(f,"state")&&(j=JSON.parse(decodeURIComponent(d(f,"state"))),"mpeditor"===j.action&&(b.sessionStorage.setItem("_mpcehash",f),history.replaceState(j.desiredHash||"",c.title,k.pathname+k.search)))}catch(n){}var l,h;window.mixpanel=a;a._i=[];a.init=function(b,d,g){function c(b,i){var a=i.split(".");2==a.length&&(b=b[a[0]],i=a[1]);b[i]=function(){b.push([i].concat(Array.prototype.slice.call(arguments,
    0)))}}var e=a;"undefined"!==typeof g?e=a[g]=[]:g="mixpanel";e.people=e.people||[];e.toString=function(b){var a="mixpanel";"mixpanel"!==g&&(a+="."+g);b||(a+=" (stub)");return a};e.people.toString=function(){return e.toString(1)+".people (stub)"};l="get_distinct_id disable time_event track track_pageview track_links track_forms track_with_groups add_group set_group remove_group register register_once alias unregister identify name_tag set_config reset opt_in_tracking opt_out_tracking has_opted_in_tracking has_opted_out_tracking clear_opt_in_out_tracking start_batch_senders people.set people.set_once people.unset people.increment people.append people.union people.track_charge people.clear_charges people.delete_user people.remove".split(" ");
    for(h=0;h<l.length;h++)c(e,l[h]);var f="set set_once union unset remove delete".split(" ");e.get_group=function(){function a(c){b[c]=function(){call2_args=arguments;call2=[c].concat(Array.prototype.slice.call(call2_args,0));e.push([d,call2])}}for(var b={},d=["get_group"].concat(Array.prototype.slice.call(arguments,0)),c=0;c<f.length;c++)a(f[c]);return b};a._i.push([b,d,g])};a.__SV=1.2;b=c.createElement("script");b.type="text/javascript";b.async=!0;b.src="undefined"!==typeof MIXPANEL_CUSTOM_LIB_URL?
    MIXPANEL_CUSTOM_LIB_URL:"file:"===c.location.protocol&&"//cdn.mxpnl.com/libs/mixpanel-2-latest.min.js".match(/^\/\//)?"https://cdn.mxpnl.com/libs/mixpanel-2-latest.min.js":"//cdn.mxpnl.com/libs/mixpanel-2-latest.min.js";d=c.getElementsByTagName("script")[0];d.parentNode.insertBefore(b,d)}})(document,window.mixpanel||[]);

    mixpanel.init("df164f13212cbb0dfdae991da60e87f2", {batch_requests: true})
    // super event property
    mixpanel.register({'timestamp': new Date().toString(), '$referrer': document.referrer});

window.addEventListener("load", function(){

  //user profile setting
  let id = mixpanel.get_distinct_id();
  mixpanel.identify(id);
  mixpanel.people.set_once({'first_touch_source': document.referrer, 'date_of_first_touch': new Date().toString()});

  // track and get duration for all pages
  mixpanel.track('View Page Indexer Docs', {'page': window.location.pathname});
  mixpanel.time_event('View Page Indexer Docs');

  // track links
  mixpanel.track_links("a", "Link Click Indexer Docs", {'page': window.location.pathname});

  // track copied code
  const copyCode = () => {
    mixpanel.track("Copied code Indexer Docs", {'page': window.location.pathname})
    mixpanel.people.increment("copy_code")
  }

  let copyButtons = document.querySelectorAll("button")
  for(let i=0;i<copyButtons.length;i++){
    copyButtons[i].onclick = copyCode;
  }

  // TODO turn it off after search is added
  // search box
  // let input = document.querySelector('button.DocSearch');
  // let time = 0
  // input.addEventListener('input', function (event) {
  //   clearTimeout(time);
  //    time = setTimeout(function() {
  //      trackSearch(event)
  //   }, 1000);
  // });
  // function trackSearch(event){
  //   let value = event.target.value;
  //   if(value !== ""){
  //     mixpanel.people.increment('search')
  //     mixpanel.track("Search the docs", {'content': value})
  //   }
  // }

  // UTM
  function getQueryParam(url, param) {
    // Expects a raw URL
    param = param.replace(/[[]/, "\[").replace(/[]]/, "\]");
    let regexS = "[\?&]" + param + "=([^&#]*)"
    let regex = new RegExp( regexS )
    let results = regex.exec(url)
    if (results === null || (results && typeof(results[1]) !== 'string' && results[1].length)) {
      return '';
    }
    return decodeURIComponent(results[1]).replace(/\W/gi, ' ');
  }

  function campaignParams() {
    var campaign_keywords = 'utm_source utm_medium utm_campaign utm_content utm_term'.split(' ')
        , kw = ''
        , params = {}
        , first_params = {};
    var index;
    for (index = 0; index < campaign_keywords.length; ++index) {
      kw = getQueryParam(document.URL, campaign_keywords[index]);
      if (kw.length) {
        params[campaign_keywords[index] + ' [last touch]'] = kw;
      }
    }
    for (index = 0; index < campaign_keywords.length; ++index) {
      kw = getQueryParam(document.URL, campaign_keywords[index]);
      if (kw.length) {
        first_params[campaign_keywords[index] + ' [first touch]'] = kw;
      }
    }
    mixpanel.people.set(params);
    mixpanel.people.set_once(first_params);
    mixpanel.register(params);
  }

  campaignParams()
});

'''