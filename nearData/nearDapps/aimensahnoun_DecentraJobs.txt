*GitHub Repository "aimensahnoun/DecentraJobs"*

'''--- as-pect.config.js ---
module.exports = require("near-sdk-as/imports");
module.exports.include.push("**/*.unit.spec.ts");

'''
'''--- near/near-setup.js ---
import {
  keyStores,
  Near,
  WalletConnection,
  utils as nearUtils,
} from "near-api-js";

export const CONTRACT_ID = "dev-1646242432100-40760073665297";

export const initNear = () => {
  //Testnet config
  const near = new Near({
    networkId: "testnet",
      keyStore: new keyStores.BrowserLocalStorageKeyStore(),
      nodeUrl: "https://rpc.testnet.near.org",
    walletUrl: "https://wallet.testnet.near.org",
  });

  //Wallet init
  wallet = new WalletConnection(near, "Near Dapp");
};

//Loaded after the being server to the client
//Due to keystore needing access to the window object
export let wallet = null;
export let contract = null;
export const utils = nearUtils;

//Methods

export const signIn = () => {
  wallet.requestSignIn(CONTRACT_ID);
};

export const signOut = () => {
  wallet.signOut();
};

//Function for view methods
export const viewFunction = async (functionName, args = {}) => {
  const result = await wallet
    .account()
    .viewFunction(CONTRACT_ID, functionName, args);

  return result;
};

//Function for call method
export const callFunction = async (functionName, args = {}, deposit = "0") => {
  const result = await wallet.account().functionCall({
    contractId: CONTRACT_ID,
    methodName: functionName,
    args: args,
    attachedDeposit: utils.format.parseNearAmount(deposit),
  });
  return result;
}
'''
'''--- next.config.js ---
const withTM = require("next-transpile-modules")(["gsap"]);

module.exports = withTM({
  reactStrictMode: true,
});

'''
'''--- postcss.config.js ---
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

'''
'''--- src/components/activeProjectsContent/activeProjectsContent.js ---
//React import
import { useState, useEffect } from "react";

//Near import
import { viewFunction } from "../../../near/near-setup";

//Icons import
import { AiOutlineSearch } from "react-icons/ai";
import { IoMdAdd } from "react-icons/io";

//Component import
import ProjectComponent from "../projectComponent/projectComponent";
import CreateProjectModal from "../createProjectModal/createProjectModal";

//Recoil import
import { useRecoilState } from "recoil";
import {projectsList , updateData ,userProfile} from "../../recoil/state"

const ActiveProjectContent = () => {
  //Recoil
  const [_user, setUserProfile] = useRecoilState(userProfile);
  const [projects, setProjects] = useRecoilState(projectsList);
  
  //UseState
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [search, setSearch] = useState("");
  const [filteredProjects, setFilteredProjects] = useState(projects);

  useEffect(() => {
    viewFunction("getAllProject")
      .then((res) => {
        setProjects(res);
        setFilteredProjects(res);
      })
      .catch((err) => {
        console.log(err);
      });
  }, []);

  useEffect(() => {
    if (search === "") return setFilteredProjects(projects);
    if (projects) {
      setFilteredProjects(
        projects.filter((project) => {
          return (
            project.title.toLowerCase().includes(search.toLowerCase()) ||
            project.description.toLowerCase().includes(search.toLowerCase()) ||
            project.tags
              ?.map((tag) => tag.toLowerCase())
              .includes(search.toLowerCase()) ||
            project.ownerId.toLowerCase().includes(search.toLowerCase())
          );
        })
      );
    }
  }, [search , projects]);

  return (
    <div className="xl:w-[calc(100%-15rem)] 2xl:w-[calc(100%-20rem)] h-full py-[4rem] px-[2rem] overflow-y-scroll">
      {/* Header */}
      <div className="flex items-center justify-between mb-[2rem]">
        <div className="flex gap-x-16 items-center">
          <span className="text-[1.5rem] text-decentra-green">
            Active Projects
          </span>
          <div className="w-[25rem] h-[3rem] rounded-lg shadow-decentra p-2 flex items-center">
            <AiOutlineSearch className="text-[1.5rem] text-decentra-green mr-2" />
            <input
              className="outline-none w-full"
              onFocus={() => {
                viewFunction("getAllProject")
                  .then((res) => {
                    setProjects(res);
                    setFilteredProjects(res);
                    updateData(setProjects, setUserProfile);
                  })
                  .catch((err) => {
                    console.log(err);
                  });
              }}
              onChange={(e) => setSearch(e.target.value)}
              placeholder="Tap to search for project"
            />
          </div>
        </div>

        <div
          className="h-[3rem] w-fit p-2 rounded-lg text-black flex gap-x-2 bg-decentra-green items-center cursor-pointer select-none"
          onClick={() => {
            setIsModalOpen(true);
          }}
        >
          <IoMdAdd className="text-[1.5rem]" />
          <span>Create Project</span>
        </div>
      </div>

      {/* Content */}
      <div className="flex flex-col gap-y-4">
        {projects !== null && projects.length > 0 ? (
          filteredProjects?.map((project) => {
            return (
              <ProjectComponent key={project.projectId} project={project} />
            );
          })
        ) : (
          <div className="w-full h-[calc(100vh-20rem)] items-center justify-center flex flex-col">
            <img
              src="/assets/images/noProject.svg"
              alt="noProject"
              className="w-[25rem] h-[25rem]"
            />
            <span>There are no active projects.</span>
          </div>
        )}
      </div>

      <CreateProjectModal
        isModalOpen={isModalOpen}
        setIsModalOpen={setIsModalOpen}
      />
    </div>
  );
};

export default ActiveProjectContent;

'''
'''--- src/components/applicationForm/applicationForm.js ---
//React import
import { useState, useRef } from "react";

//Icons import
import { HiDocumentText } from "react-icons/hi";
import { AiOutlineDelete } from "react-icons/ai";
import { toast } from "react-toastify";

//Form input
import { useForm } from "react-hook-form";

//Utils import
import { uploadFile } from "../../utils/file-upload";

//Near import
import { callFunction } from "../../../near/near-setup";

//Recoil import
import { useRecoilState } from "recoil";
import {projectsList,updateData,userProfile} from "../../recoil/state"

const ApplicationForm = ({ setIsApplying, projectId }) => {

  //Recoil
  const [_user, setUserProfile] = useRecoilState(userProfile);
  const [projects, setProjects] = useRecoilState(projectsList);

  //UseStates
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [brief, setBrief] = useState(null);
  const [isDraggedEnter, setIsDraggedEnter] = useState(false);

  //Form hook
  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm();
  const onSubmit = async (data) => {
    if (isSubmitting) return;
    setIsSubmitting(true);

    const { title, description } = data;

    const url = brief ? await uploadFile(brief, "pdf") : "null";

    callFunction("createProposal", {
      projectId: projectId,
      proposalTitle: title,
      proposalDescription: description,
      proposalBrief: url,
    })
      .then((data) => {
        updateData(setProjects, setUserProfile);
        toast.success("Proposal Created Successfully", {
          position: "top-right",
          autoClose: 5000,
          hideProgressBar: false,
          closeOnClick: true,
          pauseOnHover: true,
          draggable: true,
          progress: undefined,
        });
        setIsSubmitting(false);
      })
      .catch((err) => {
        setIsSubmitting(false);
        toast.error(err.kind.ExecutionError.split(",")[0], {
          position: "top-right",
          autoClose: 5000,
          hideProgressBar: false,
          closeOnClick: true,
          pauseOnHover: true,
          draggable: true,
          progress: undefined,
        });
      });
  };

  //Refs
  const briefRef = useRef(null);

  const onDragEnter = (e) => {
    e.preventDefault();
    setIsDraggedEnter(true);
  };
  const onDragOver = (e) => {
    e.preventDefault();
  };
  const onDrop = (e) => {
    e.preventDefault();
    setBrief(e.dataTransfer.files[0]);
  };
  const onDragLeave = (e) => {
    e.preventDefault();
    setIsDraggedEnter(false);
  };

  return (
    <form
      className="flex flex-col gap-y-4 h-full"
      onSubmit={handleSubmit(onSubmit)}
    >
      <input
        id="brief"
        type="file"
        ref={briefRef}
        className="hidden"
        accept="application/pdf"
        onChange={(e) => {
          setBrief(e.target.files[0]);
        }}
      />
      <div className="flex gap-x-6">
        {/* Title */}
        <div className="flex flex-col">
          <span>Proposal Title : </span>
          <input
            {...register("title", { required: true })}
            className="w-[41.5rem] h-[3rem] outline-none bg-decentra-lightblue rounded-lg p-2"
            placeholder="Best Freelancer!"
          />
          {errors.title && (
            <span className="text-red-600">This field is required</span>
          )}
        </div>
      </div>
      {/* Description */}
      <div className="flex flex-col">
        <span>Proposal Description: </span>
        <textarea
          {...register("description", { required: true })}
          placeholder="Write down your proposal"
          className="outline-none w-[41.5rem] h-[12rem] p-2 bg-[#E2EDEE] rounded-lg border-[2px] border-transparent focus:border-[#297979] resize-none"
        />
        {errors.description && (
          <span className="text-red-600">This field is required</span>
        )}
      </div>

      {/* Project Brief */}
      <div>
        <span>Proposal Brief:</span>
        {!brief ? (
          <div
            onDragEnter={onDragEnter}
            onDragLeave={onDragLeave}
            onDrop={onDrop}
            onDragOver={onDragOver}
            className={`flex flex-col w-[41.5rem] h-[7rem] bg-decentra-lightblue border-[1px] border-decentra-green rounded-lg items-center justify-center cursor-pointer ${
              isDraggedEnter ? "border-solid" : "border-dashed"
            } `}
            onClick={() => briefRef.current.click()}
          >
            <span>Drag & Drop</span>
            <span>Or</span>
            <span>Click here</span>
          </div>
        ) : (
          <div className="flex items-center mt-4 gap-x-2">
            <HiDocumentText className="text-[1.5rem] text-decentra-green" />
            <span>{brief.name}</span>
            <AiOutlineDelete
              className="text-[1.5rem] cursor-pointer ml-auto"
              onClick={() => {
                setIsDraggedEnter(false);
                setBrief(null);
              }}
            />
          </div>
        )}
      </div>

      <div className="flex gap-x-2 justify-center items-center">
        {/* Cancel */}
        <button
          onClick={() => {
            if (isSubmitting) return;
            setIsApplying(false);
          }}
          className={`h-[2.5rem] w-fit p-2 rounded-lg self-center mt-auto cursor-pointer transition-all duration-300 bg-red-600 text-white `}
          value={isSubmitting ? "Loading..." : "Submit"}
        >
          Cancel
        </button>
        {/* Submit */}
        <input
          type="submit"
          className={`h-[2.5rem] w-fit p-2 rounded-lg self-center mt-auto cursor-pointer transition-all duration-300 ${
            isSubmitting
              ? "bg-decentra-gray cursor-not-allowed"
              : "bg-decentra-turquoise"
          }`}
          value={isSubmitting ? "Loading..." : "Submit"}
        />
      </div>
    </form>
  );
};

export default ApplicationForm;

'''
'''--- src/components/clinetListContent/clientListContent.js ---
//React import
import { useState, useEffect } from "react";

//Near import
import { viewFunction, wallet } from "../../../near/near-setup";

//Icons import
import { AiOutlineSearch } from "react-icons/ai";
import { IoMdAdd } from "react-icons/io";

//Component import
import ProjectComponent from "../projectComponent/projectComponent";
import CreateProjectModal from "../createProjectModal/createProjectModal";

//Recoil import
import { useRecoilState } from "recoil";
import { userProfile, projectsList, updateData } from "../../recoil/state";

const ClientListContent = () => {
  //Recoil state
  const [user, setUser] = useRecoilState(userProfile);
  const [projects, setProjects] = useRecoilState(projectsList);

  //Use State
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [search, setSearch] = useState("");
  const [filteredProjects, setFilteredProjects] = useState(projects);

  //Funciont to get user data as well as applied projects
  const fetchNeededData = () => {
    viewFunction("getProfile", { accountId: wallet.getAccountId() })
      .then((result) => {
        setUser(result);
      })
      .catch((e) => console.log(e))
      .then(() => {
        viewFunction("getAllProject")
          .then((res) => {
            setProjects(res);
            const myProjects = projects.filter((project) =>
              user.appliedProjects.includes(project.projectId)
            );

            setFilteredProjects(myProjects);
          })
          .catch((err) => {
            console.log(err);
          });
      });
  };

  useEffect(() => {
    fetchNeededData();
  }, []);

  useEffect(() => {
    if (search === "")
      return setFilteredProjects(
        projects.filter((project) =>
          user.appliedProjects.includes(project.projectId)
        )
      );
    if (projects) {
      setFilteredProjects(
        projects.filter((project) => {
          return (
            user.appliedProjects.includes(project.projectId) &&
            (project.title.toLowerCase().includes(search.toLowerCase()) ||
              project.description
                .toLowerCase()
                .includes(search.toLowerCase()) ||
              project.tags
                ?.map((tag) => tag.toLowerCase())
                .includes(search.toLowerCase()) ||
              project.ownerId.toLowerCase().includes(search.toLowerCase()))
          );
        })
      );
    }
  }, [search, projects]);

  return (
    <div className="xl:w-[calc(100%-15rem)] 2xl:w-[calc(100%-20rem)] h-full py-[4rem] px-[2rem] overflow-y-scroll">
      {/* Header */}
      <div className="flex items-center justify-between mb-[2rem]">
        <div className="flex gap-x-16 items-center">
          <span className="text-[1.5rem] text-decentra-green">My Clients</span>
          <div className="w-[25rem] h-[3rem] rounded-lg shadow-decentra p-2 flex items-center">
            <AiOutlineSearch className="text-[1.5rem] text-decentra-green mr-2" />
            <input
              className="outline-none w-full"
              onFocus={() => {
                fetchNeededData();
              }}
              onChange={(e) => setSearch(e.target.value)}
              placeholder="Tap to search for project"
            />
          </div>
        </div>

        <div
          className="h-[3rem] w-fit p-2 rounded-lg text-black flex gap-x-2 bg-decentra-green items-center cursor-pointer select-none"
          onClick={() => {
            setIsModalOpen(true);
          }}
        >
          <IoMdAdd className="text-[1.5rem]" />
          <span>Create Project</span>
        </div>
      </div>

      {/* Content */}
      <div className="flex flex-col gap-y-4">
        {projects !== null && projects.length > 0 ? (
          filteredProjects?.map((project) => {
            return (
              <ProjectComponent key={project.projectId} project={project} />
            );
          })
        ) : (
          <div className="w-full h-[calc(100vh-20rem)] items-center justify-center flex flex-col">
            <img
              src="/assets/images/noProject.svg"
              alt="noProject"
              className="w-[25rem] h-[25rem]"
            />
            <span>You have not applied to any project.</span>
          </div>
        )}
      </div>

      <CreateProjectModal
        isModalOpen={isModalOpen}
        setIsModalOpen={setIsModalOpen}
      />
    </div>
  );
};

export default ClientListContent;

'''
'''--- src/components/createPortfolioProjectModal/createPortfolioProjectModal.js ---
//NextJS import
import Image from "next/image";

//React import
import { useLayoutEffect, useState, useRef, useEffect } from "react";

//Near import
import { wallet, callFunction } from "../../../near/near-setup.js";

//Form input
import { useForm } from "react-hook-form";

//Component import
import Modal from "../modal/modal";

//Assets import
import Near from "../../../public/assets/images/near.svg";

//Icons import
import { HiDocumentText } from "react-icons/hi";
import { AiOutlineDelete } from "react-icons/ai";

//utils import
import { uploadFile } from "../../utils/file-upload";

//Toastify import
import { toast } from "react-toastify";

//Recoil import
import { useRecoilState } from "recoil";
import { projectsList, updateData, userProfile } from "../../recoil/state";

const CreatePortfolioProjectModal = ({ isModalOpen, setIsModalOpen }) => {
  //Recoil
  const [_user, setUserProfile] = useRecoilState(userProfile);
  const [_projects, setProjects] = useRecoilState(projectsList);

  //UseStates
  const [maxDate, setMaxDate] = useState(new Date());
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [brief, setBrief] = useState(null);
  const [isDraggedEnter, setIsDraggedEnter] = useState(false);
  const [tagsArray, setTagsArray] = useState([]);

  //Form hook
  const {
    register,
    handleSubmit,
    watch,
    formState: { errors },
  } = useForm();
  const onSubmit = async (data) => {
    if (isSubmitting) return;
    setIsSubmitting(true);

    const { title, createdOn, projectUrl, description } = data;

    const url = brief ? await uploadFile(brief, "image") : "null";

    callFunction(
      "addPortfolioProject",
      {
        title,
        description,
        createdOn,
        imgUrl: url,
        tags: tagsArray,
        projectUrl
      },
    )
      .then((data) => {
        updateData(setProjects, setUserProfile);
        toast.success("Project Created Successfully", {
          position: "top-right",
          autoClose: 5000,
          hideProgressBar: false,
          closeOnClick: true,
          pauseOnHover: true,
          draggable: true,
          progress: undefined,
        });
        setIsSubmitting(false);
      })
      .catch((err) => {
        setIsSubmitting(false);
        toast.error("Something went wrong!", {
          position: "top-right",
          autoClose: 5000,
          hideProgressBar: false,
          closeOnClick: true,
          pauseOnHover: true,
          draggable: true,
          progress: undefined,
        });
      });
  };

  const tags = watch("tags");

  //Refs
  const briefRef = useRef(null);

  //Project brief section methods
  const onDragEnter = (e) => {
    e.preventDefault();
    setIsDraggedEnter(true);
  };
  const onDragOver = (e) => {
    e.preventDefault();
  };
  const onDrop = (e) => {
    e.preventDefault();
    setBrief(e.dataTransfer.files[0]);
  };
  const onDragLeave = (e) => {
    e.preventDefault();
    setIsDraggedEnter(false);
  };

  //Setting max project creation date to today
  useLayoutEffect(() => {
    var today = new Date();
    var dd = today.getDate();
    var mm = today.getMonth() + 1; //January is 0 so need to add 1 to make it 1!
    var yyyy = today.getFullYear();
    if (dd < 10) {
      dd = "0" + dd;
    }
    if (mm < 10) {
      mm = "0" + mm;
    }

    let date = yyyy + "-" + mm + "-" + dd;
    setMaxDate(date);
  }, []);

  useEffect(() => {
    if (!tags) return;
    const tempTags = tags
      .split(",")
      .filter((tag) => tag.length > 0 && tag !== "");
    setTagsArray(tempTags);
  }, [tags]);

  return (
    <Modal
      isOpen={isModalOpen}
      setIsOpen={setIsModalOpen}
      title="Create Portfolio Project"
    >
      <input
        id="brief"
        type="file"
        ref={briefRef}
        className="hidden"
        accept="image/*"
        onChange={(e) => {
          setBrief(e.target.files[0]);
        }}
      />
      <form
        className="flex flex-col gap-y-4 h-full"
        onSubmit={handleSubmit(onSubmit)}
      >
        <div className="flex gap-x-6">
          {/* Title */}
          <div className="flex flex-col">
            <span>Project Title : </span>
            <input
              {...register("title", { required: true })}
              className="w-[20rem] h-[3rem] outline-none bg-decentra-lightblue rounded-lg p-2"
              placeholder="Important Project"
            />
            {errors.title && (
              <span className="text-red-600">This field is required</span>
            )}
          </div>

          {/* Dates  */}
          <div className="flex flex-col">
            <span>Project Creation Date : </span>
            <input
              {...register("createdOn", { required: true })}
              type="date"
              max={maxDate}
              className="w-[20rem] h-[3rem] bg-decentra-lightblue rounded-lg p-2"
            />
            {errors.deadline && (
              <span className="text-red-600">This field is required</span>
            )}
          </div>
        </div>
        {/* Description */}
        <div className="flex flex-col">
          <span>Project Description: </span>
          <textarea
            {...register("description", { required: true })}
            placeholder="Tell us about the project"
            className="outline-none w-[41.5rem] h-[7rem] p-2 bg-[#E2EDEE] rounded-lg border-[2px] border-transparent focus:border-[#297979] resize-none"
          />
          {errors.description && (
            <span className="text-red-600">This field is required</span>
          )}
        </div>

        {/* Tags */}
        <div className="flex flex-col">
          <span>Tags : </span>
          <span className="text-gray-400 text-[.8rem]">
            Seperate tags by a comma (,)
          </span>
          <input
            {...register("tags", { required: true })}
            className="w-[41.5rem] h-[3rem] outline-none bg-decentra-lightblue rounded-lg p-2"
            placeholder="Tags"
          />
          {errors.tags && (
            <span className="text-red-600">This field is required</span>
          )}
        </div>

        {/* Project Link */}
        <div className="flex flex-col">
          <span>Project Link : </span>
          <input
            type="url"
            {...register("projectUrl", { required: true, type: "url" })}
            className="w-[41.5rem] h-[3rem] outline-none bg-decentra-lightblue rounded-lg p-2"
            placeholder="www.myproject.com"
          />
          {errors.tags && (
            <span className="text-red-600">This field is required</span>
          )}
        </div>

        {/* Project Brief */}
        <div>
          <span>Project Image:</span>
          {!brief ? (
            <div
              onDragEnter={onDragEnter}
              onDragLeave={onDragLeave}
              onDrop={onDrop}
              onDragOver={onDragOver}
              className={`flex flex-col w-[41.5rem] h-[7rem] bg-decentra-lightblue border-[1px] border-decentra-green rounded-lg items-center justify-center cursor-pointer ${
                isDraggedEnter ? "border-solid" : "border-dashed"
              } `}
              onClick={() => briefRef.current.click()}
            >
              <span>Drag & Drop</span>
              <span>Or</span>
              <span>Click here</span>
            </div>
          ) : (
            <div className="flex items-center mt-4 gap-x-2">
              <HiDocumentText className="text-[1.5rem] text-decentra-green" />
              <span>{brief.name}</span>
              <AiOutlineDelete
                className="text-[1.5rem] cursor-pointer ml-auto"
                onClick={() => {
                  setIsDraggedEnter(false);
                  setBrief(null);
                }}
              />
            </div>
          )}
        </div>

        {/* Submit */}
        <input
          type="submit"
          className={`h-[2.5rem] w-fit p-2 rounded-lg self-center mt-auto cursor-pointer transition-all duration-300 ${
            isSubmitting
              ? "bg-decentra-gray cursor-not-allowed"
              : "bg-decentra-turquoise"
          }`}
          value={isSubmitting ? "Loading..." : "Submit"}
        />
      </form>
    </Modal>
  );
};

export default CreatePortfolioProjectModal;

'''
'''--- src/components/createProjectModal/createProjectModal.js ---
//NextJS import
import Image from "next/image";

//React import
import { useLayoutEffect, useState, useRef, useEffect } from "react";

//Near import
import { wallet, callFunction } from "../../../near/near-setup.js";

//Form input
import { useForm } from "react-hook-form";

//Component import
import Modal from "../modal/modal";

//Assets import
import Near from "../../../public/assets/images/near.svg";

//Icons import
import { HiDocumentText } from "react-icons/hi";
import { AiOutlineDelete } from "react-icons/ai";

//utils import
import { uploadFile } from "../../utils/file-upload";

//Toastify import
import { toast } from "react-toastify";

//Recoil import
import { useRecoilState } from "recoil";
import { projectsList, updateData, userProfile } from "../../recoil/state";

const CreateProjectModal = ({ isModalOpen, setIsModalOpen }) => {
  //Recoil
  const [_user, setUserProfile] = useRecoilState(userProfile);
  const [_projects, setProjects] = useRecoilState(projectsList);

  //UseStates
  const [minDate, setMinDate] = useState(new Date());
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [brief, setBrief] = useState(null);
  const [isDraggedEnter, setIsDraggedEnter] = useState(false);
  const [tagsArray, setTagsArray] = useState([]);
  const [priceInDollars, setPriceInDollars] = useState("");

  //Form hook
  const {
    register,
    handleSubmit,
    watch,
    formState: { errors },
  } = useForm();
  const onSubmit = async (data) => {
    if (isSubmitting) return;
    setIsSubmitting(true);

    const { title, deadline, cost, description } = data;

    const url = brief ? await uploadFile(brief, "pdf") : "null";

    callFunction(
      "createProject",
      {
        title,
        description,
        deadline,
        ownerId: wallet.getAccountId(),
        projectBrief: url,
        timestamp: new Date().getTime().toString(),
        tags: tagsArray,
      },
      cost
    )
      .then((data) => {
        updateData(setProjects, setUserProfile);
        toast.success("Project Created Successfully", {
          position: "top-right",
          autoClose: 5000,
          hideProgressBar: false,
          closeOnClick: true,
          pauseOnHover: true,
          draggable: true,
          progress: undefined,
        });
        setIsSubmitting(false);
      })
      .catch((err) => {
        setIsSubmitting(false);
        toast.error("Something went wrong!", {
          position: "top-right",
          autoClose: 5000,
          hideProgressBar: false,
          closeOnClick: true,
          pauseOnHover: true,
          draggable: true,
          progress: undefined,
        });
      });
  };

  const tags = watch("tags");

  const cost = watch("cost");

  //Refs
  const briefRef = useRef(null);

  const onDragEnter = (e) => {
    e.preventDefault();
    setIsDraggedEnter(true);
  };
  const onDragOver = (e) => {
    e.preventDefault();
  };
  const onDrop = (e) => {
    e.preventDefault();
    setBrief(e.dataTransfer.files[0]);
  };
  const onDragLeave = (e) => {
    e.preventDefault();
    setIsDraggedEnter(false);
  };

  //Setting min deadline date to be the next day
  useLayoutEffect(() => {
    var today = new Date();
    var dd = today.getDate() + 1;
    var mm = today.getMonth() + 1; //January is 0 so need to add 1 to make it 1!
    var yyyy = today.getFullYear();
    if (dd < 10) {
      dd = "0" + dd;
    }
    if (mm < 10) {
      mm = "0" + mm;
    }

    let tomorrow = yyyy + "-" + mm + "-" + dd;
    setMinDate(tomorrow);
  }, []);

  useEffect(() => {
    if (!tags) return;
    const tempTags = tags
      .split(",")
      .filter((tag) => tag.length > 0 && tag !== "");
    setTagsArray(tempTags);
  }, [tags]);

  useEffect(() => {
    (async () => {
      if (cost === "") return setPriceInDollars("");
      const apiData = await fetch(
        "https://api.coingecko.com/api/v3/coins/near"
      );
      const nearData = await apiData.json();

      setPriceInDollars(
        (nearData?.market_data?.current_price?.usd * cost).toFixed(2)
      );
    })();
  }, [cost]);

  //Project brief section methods

  return (
    <Modal
      isOpen={isModalOpen}
      setIsOpen={setIsModalOpen}
      title="Create Project"
    >
      <input
        id="brief"
        type="file"
        ref={briefRef}
        className="hidden"
        accept="application/pdf"
        onChange={(e) => {
          setBrief(e.target.files[0]);
        }}
      />
      <form
        className="flex flex-col gap-y-4 h-full"
        onSubmit={handleSubmit(onSubmit)}
      >
        <div className="flex gap-x-6">
          {/* Title */}
          <div className="flex flex-col">
            <span>Project Title : </span>
            <input
              {...register("title", { required: true })}
              className="w-[20rem] h-[3rem] outline-none bg-decentra-lightblue rounded-lg p-2"
              placeholder="Important Project"
            />
            {errors.title && (
              <span className="text-red-600">This field is required</span>
            )}
          </div>

          {/* Dates  */}
          <div className="flex flex-col">
            <span>Project Deadline : </span>
            <input
              {...register("deadline", { required: true })}
              type="date"
              min={minDate}
              className="w-[20rem] h-[3rem] bg-decentra-lightblue rounded-lg p-2"
            />
            {errors.deadline && (
              <span className="text-red-600">This field is required</span>
            )}
          </div>
        </div>
        {/* Description */}
        <div className="flex flex-col">
          <span>Project Description: </span>
          <textarea
            {...register("description", { required: true })}
            placeholder="Tell us about the project"
            className="outline-none w-[41.5rem] h-[7rem] p-2 bg-[#E2EDEE] rounded-lg border-[2px] border-transparent focus:border-[#297979] resize-none"
          />
          {errors.description && (
            <span className="text-red-600">This field is required</span>
          )}
        </div>

        {/* Tags */}
        <div className="flex flex-col">
          <span>Tags : </span>
          <span className="text-gray-400 text-[.8rem]">
            Seperate tags by a comma (,)
          </span>
          <input
            {...register("tags", { required: true })}
            className="w-[41.5rem] h-[3rem] outline-none bg-decentra-lightblue rounded-lg p-2"
            placeholder="Tags"
          />
          {errors.tags && (
            <span className="text-red-600">This field is required</span>
          )}
        </div>

        {/* Project Cost */}
        <div className="flex flex-col">
          <span>Project Cost : </span>
          <div className="flex w-[41.5rem] h-[3rem] outline-none bg-decentra-lightblue rounded-lg items-center">
            <input
              className="bg-transparent w-[95%] outline-none p-2"
              step="0.1"
              type="number"
              placeholder="5 Near"
              {...register("cost", {
                required: { value: true, message: "This field is required" },
                min: { value: 0.1, message: "Minimum value is 0.1 Near" },
              })}
            />
            <Image src={Near} alt="Near logo" width={20} height={20} />
          </div>
          {errors.cost && (
            <span className="text-red-600">{errors.cost.message}</span>
          )}
          {priceInDollars !== "" && (
            <span className="text-gray-400 text-[.8rem]">{`${priceInDollars} USD`}</span>
          )}
        </div>

        {/* Project Brief */}
        <div>
          <span>Project Brief:</span>
          {!brief ? (
            <div
              onDragEnter={onDragEnter}
              onDragLeave={onDragLeave}
              onDrop={onDrop}
              onDragOver={onDragOver}
              className={`flex flex-col w-[41.5rem] h-[7rem] bg-decentra-lightblue border-[1px] border-decentra-green rounded-lg items-center justify-center cursor-pointer ${
                isDraggedEnter ? "border-solid" : "border-dashed"
              } `}
              onClick={() => briefRef.current.click()}
            >
              <span>Drag & Drop</span>
              <span>Or</span>
              <span>Click here</span>
            </div>
          ) : (
            <div className="flex items-center mt-4 gap-x-2">
              <HiDocumentText className="text-[1.5rem] text-decentra-green" />
              <span>{brief.name}</span>
              <AiOutlineDelete
                className="text-[1.5rem] cursor-pointer ml-auto"
                onClick={() => {
                  setIsDraggedEnter(false);
                  setBrief(null);
                }}
              />
            </div>
          )}
        </div>

        {/* Submit */}
        <input
          type="submit"
          className={`h-[2.5rem] w-fit p-2 rounded-lg self-center mt-auto cursor-pointer transition-all duration-300 ${
            isSubmitting
              ? "bg-decentra-gray cursor-not-allowed"
              : "bg-decentra-turquoise"
          }`}
          value={isSubmitting ? "Loading..." : "Submit"}
        />
      </form>
    </Modal>
  );
};

export default CreateProjectModal;

'''
'''--- src/components/loadingSpinner/loadingSpinner.js ---
//Spinner import
import ClipLoader from "react-spinners/ClipLoader";

const LoadingSpinner = () => {
  return (
    <div className="w-screen h-screen flex justify-center items-center">
      <ClipLoader color={"#399E5A"} loading={true} size={50} />
    </div>
  );
};

export default LoadingSpinner;

'''
'''--- src/components/modal/modal.js ---
//FramerMotion import
import { motion, AnimatePresence } from "framer-motion";

//Icon import
import { MdClose } from "react-icons/md/";

const Modal = ({ isOpen, setIsOpen, title, children }) => {
  //Backdrop animation
  const backdropVariants = {
    hidden: { opacity: 0 },
    enter: { opacity: 1 },
  };

  //Modal animation
  const modalVariants = {
    hidden: { opacity: 0, y: "-50px" },
    enter: { opacity: 1, y: "0", transition: { delay: 0.3 } },
  };

  return (
    <AnimatePresence>
      {isOpen ? (
        <motion.div
          variants={backdropVariants}
          initial="hidden"
          animate="enter"
          exit="hidden"
          className="w-screen h-screen bg-black bg-opacity-30 absolute inset-0 z-10 flex justify-center items-center"
        >
          <motion.div
            variants={modalVariants}
            initial="hidden"
            animate="enter"
            exit="hidden"
            className="w-fit h-[70%] rounded-xl bg-white p-6 overflow-auto cursor-default"
            onClick={(e) => e.stopPropagation()}
          >
            {/* Header */}
            <div className="flex items-center justify-between mb-[1rem]">
              <span className="text-[1.5rem] text-decentra-green">{title}</span>
              <div
                className=" w-[2rem] h-[2rem] rounded-full flex justify-center items-center cursor-pointer"
                onClick={() => setIsOpen(false)}
              >
                <MdClose className="text-black text-[1.5rem]" />
              </div>
            </div>

            {/* Content */}
            <div className="max-h-fit flex flex-col text-black">
              {children}
            </div>
          </motion.div>
        </motion.div>
      ) : null}
    </AnimatePresence>
  );
};

export default Modal;

'''
'''--- src/components/myProjectsContent/myProjectsContent.js ---
/* eslint-disable @next/next/no-img-element */
//React import
import { useState, useEffect } from "react";

//Near import
import { viewFunction, wallet } from "../../../near/near-setup";

//Icons import
import { AiOutlineSearch } from "react-icons/ai";
import { IoMdAdd } from "react-icons/io";

//Component import
import ProjectComponent from "../projectComponent/projectComponent";
import CreateProjectModal from "../createProjectModal/createProjectModal";

//Recoil import
import { useRecoilState } from "recoil";
import { projectsList, updateData, userProfile } from "../../recoil/state";

const MyProjectsContent = () => {
  //Recoil state
  const [projects, setProjects] = useRecoilState(projectsList);
  const [_user, setUser] = useRecoilState(userProfile);

  //Use State
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [search, setSearch] = useState("");
  const [filteredProjects, setFilteredProjects] = useState(projects);

  useEffect(() => {
    viewFunction("getAllProject")
      .then((res) => {
        updateData(setProjects, setUser);

        const myProjects = projects.filter(
          (project) => project.ownerId == wallet.getAccountId()
        );
        setFilteredProjects(myProjects);
      })
      .catch((err) => {
        console.log(err);
      });
  }, []);

  useEffect(() => {
    if (search === "")
      return setFilteredProjects(
        projects.filter((project) => project.ownerId == wallet.getAccountId())
      );
    if (projects) {
      setFilteredProjects(
        projects.filter((project) => {
          return (
            project.ownerId == wallet.getAccountId() &&
            (project.title.toLowerCase().includes(search.toLowerCase()) ||
              project.description
                .toLowerCase()
                .includes(search.toLowerCase()) ||
              project.tags
                ?.map((tag) => tag.toLowerCase())
                .includes(search.toLowerCase()) ||
              (project.ownerId.toLowerCase().includes(search.toLowerCase()) &&
                project.ownerId == wallet.getAccountId()))
          );
        })
      );
    }
  }, [search, projects]);

  

  return (
    <div className="xl:w-[calc(100%-15rem)] 2xl:w-[calc(100%-20rem)] h-full py-[4rem] px-[2rem] overflow-y-scroll">
      {/* Header */}
      <div className="flex items-center justify-between mb-[2rem]">
        <div className="flex gap-x-16 items-center">
          <span className="text-[1.5rem] text-decentra-green">My Projects</span>
          <div className="w-[25rem] h-[3rem] rounded-lg shadow-decentra p-2 flex items-center">
            <AiOutlineSearch className="text-[1.5rem] text-decentra-green mr-2" />
            <input
              className="outline-none w-full"
              onFocus={() => {
                viewFunction("getAllProject")
                  .then((res) => {
                    updateData(setProjects, setUser);
                    const myProjects = projects.filter(
                      (project) => project.ownerId == wallet.getAccountId()
                    );

                    setFilteredProjects(myProjects);
                  })
                  .catch((err) => {
                    console.log(err);
                  });
              }}
              onChange={(e) => setSearch(e.target.value)}
              placeholder="Tap to search for project"
            />
          </div>
        </div>

        <div
          className="h-[3rem] w-fit p-2 rounded-lg text-black flex gap-x-2 bg-decentra-green items-center cursor-pointer select-none"
          onClick={() => {
            setIsModalOpen(true);
          }}
        >
          <IoMdAdd className="text-[1.5rem]" />
          <span>Create Project</span>
        </div>
      </div>

      {/* Content */}
      <div className="flex flex-col gap-y-4">
        {projects !== null && projects.length > 0 ? (
          filteredProjects?.map((project) => {
            return (
              <ProjectComponent key={project.projectId} project={project} />
            );
          })
        ) : (
          <div className="w-full h-[calc(100vh-20rem)] items-center justify-center flex flex-col">
            <img
              src="/assets/images/noProject.svg"
              alt="noProject"
              className="w-[25rem] h-[25rem]"
            />
            <span>You do not have any projects</span>
          </div>
        )}
      </div>

      <CreateProjectModal
        isModalOpen={isModalOpen}
        setIsModalOpen={setIsModalOpen}
      />
    </div>
  );
};

export default MyProjectsContent;

'''
'''--- src/components/navItem/navItem.js ---
const NavItem = ({Icon , isActive , onClick , title}) => {
  return (
    <div
      className={`flex space justify-between xl:2-[90%] 2xl:w-[65%] h-[2.5rem]  items-center px-3 rounded-lg cursor-pointer transition-all duration-300 select-none ${
        isActive  ? "bg-[#E2EDEE]" : "opacity-50 hover:opacity-100"
      }`}
      onClick={onClick}
    >
      <div className="flex gap-x-4">
        <Icon className="text-[#297979] text-[1.5rem]" />
        <span
          className={`${
            isActive  ? "text-[#297979]" : "text-[#555B5E]"
          }`}
        >
          {title}
        </span>
      </div>
      <div></div>
    </div>
  );
};

export default NavItem;
'''
'''--- src/components/profilePage/profilePage.js ---
/* eslint-disable react/no-unescaped-entities */
//React import
import { useState } from "react";

//Component import
import DecentraImage from "../decentraImage/decentraImage";
import CreatePortfolioProjectModal from "../createPortfolioProjectModal/createPortfolioProjectModal";

//Near import
import { wallet } from "../../../near/near-setup";

//Recoil import
import { useRecoilValue } from "recoil";
import { userProfile } from "../../recoil/state";

//Icons import
import { AiOutlineLink } from "react-icons/ai";

//Utils import
import { parseDate } from "../../utils/parse-date";

const ProfilePage = () => {
  //Recoil state
  const user = useRecoilValue(userProfile);

  //Use State
  const [isModalOpen, setIsModalOpen] = useState(false);

  return (
    <div className="w-[calc(100%-20rem)] h-full py-[4rem] px-[2rem] overflow-y-scroll">
      <div className=" flex items-center justify-between mb-[2rem]">
        <div className="flex gap-x-4 items-center">
          <div className="w-[5rem] h-[5rem] bg-gray-100 rounded-full relative">
            <DecentraImage
              src={user.avatarUrl}
              layout="fill"
              className="rounded-full object-cover "
            />
          </div>
          <div className="flex flex-col">
            <span className="text-decentra-green font-medium text-[1.5rem]">
              {user.fullName}
            </span>
            <span className="text-[1.2rem]">{wallet.getAccountId()}</span>
          </div>
        </div>

        {/* <div className="w-fit h-[2rem] rounded-lg bg-decentra-green flex items-center justify-center p-4 cursor-pointer">
          <span className="text-[1.5rem]">Hire</span>
        </div> */}
      </div>

      <div className="flex flex-col gap-y-2">
        <span className="font-medium text-[1.2rem]">Description</span>
        <span>{user.bio}</span>
      </div>

      <hr className="my-6 border-decentra-lightblue border-[1px]" />

      <div className="flex flex-col gap-y-2">
        <div className="flex w-full items-center justify-between">
          <span className="font-medium text-[1.2rem]">Portfolio</span>
          <button
            className="h-[3rem] w-fit p-2 bg-decentra-lightblue rounded-lg"
            onClick={() => setIsModalOpen(true)}
          >
            Add A Project
          </button>
        </div>
        <span className="self-center font-medium">
          {user.portfolioProjects.length === 0 ? (
            "No protfolio Projects Added"
          ) : (
            <div className="grid gap-4 w-full h-fit grid-cols-8">
              {user.portfolioProjects.map((project, index) => {
                return (
                  <div
                    key={index}
                    className="w-[20rem] h-[30rem] rounded-lg shadow-decentra"
                  >
                    <img
                      className="rounded-tl-lg rounded-tr-lg h-[80%] w-full object-cover"
                      alt="project image"
                      src={project.imgUrl}
                    />
                    <div className="flex items-center justify-between p-4">
                      <div className="flex flex-col gap-y-4">
                        <span>{project.title}</span>
                        <span>{parseDate(project.creationDate)}</span>
                      </div>

                      <div className="w-[2rem] h-[2rem] border-[1px] rounded-full flex justify-center items-center cursor-pointer" onClick={() => window.open(project.projectUrl, "_blank")}>
                        <AiOutlineLink />
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>
          )}
        </span>
      </div>

      <hr className="my-6 border-decentra-lightblue border-[1px]" />
      <div className="flex flex-col gap-y-2">
        <span className="font-medium text-[1.2rem]">Skills</span>
        <div className="flex gap-2 flex-wrap">
          {user.skills.map((skill) => {
            return (
              <div
                key={skill}
                className="w-fit h-[2rem] rounded-lg bg-decentra-lightblue p-2 flex justify-between items-center"
              >
                <span>{skill}</span>
              </div>
            );
          })}
        </div>
      </div>

      <CreatePortfolioProjectModal
        isModalOpen={isModalOpen}
        setIsModalOpen={setIsModalOpen}
      />
    </div>
  );
};

export default ProfilePage;

'''
'''--- src/components/projectComponent/projectComponent.js ---
//React import
import { useLayoutEffect, useState } from "react";

//Component import
import ProjectDetails from "../projectDetails/projectDetails";

//Icon import
import { HiDocumentText } from "react-icons/hi";

//Utils import
import {parseDate} from "../../utils/parse-date"

const ProjectComponent = ({categories, project }) => {
  //UseStates
  const [createdDate, setDate] = useState(null);
  const [deadline, setDeadline] = useState(null);
  const [isModalOpen, setModalOpen] = useState(null);

  useLayoutEffect(() => {
   
    setDate(parseDate(project.createdOn));

    setDeadline(parseDate(project.deadline));
  }, []);

  return (
    <div
      className="w-full min-h-[6rem] shadow-decentra rounded-lg p-4 flex flex-col justify-between cursor-pointer"
      onClick={() => setModalOpen(true)}
    >
      {/* Titles */}
      <div className="w-full flex items-center">
        <span className="w-[20%]">Project Name</span>
        <span className="xl:w-[13%] 2xl:w-[20%]">Date Created</span>
        <span className="xl:w-[13%] 2xl:w-[20%]">Deadline</span>
        <span className="xl:w-[14%] 2xl:w-[10%]">Project Brief</span>
        <span className="xl:w-[40%] 2xl:w-[30%]">Category</span>
      </div>
      {/* Data */}
      <div className="w-full flex items-center">
        <span className="w-[20%] text-decentra-green font-medium text-ellipsis overflow-hidden whitespace-nowrap">
          {project.title}
        </span>
        <span className="xl:w-[13%] 2xl:w-[20%] text-decentra-green font-medium">
          {createdDate}
        </span>
        <span className="xl:w-[13%] 2xl:w-[20%] text-decentra-green font-medium">
          {deadline}
        </span>

        <div className="xl:w-[14%] 2xl:w-[10%] text-decentra-green font-medium flex items-center gap-x-2 cursor-pointer">
          {project.projectBrief != "null" ? (
            <div
              className="flex"
              onClick={(e) => {
                e.stopPropagation();
                window.open(project.projectBrief, "_blank");
              }}
            >
              <HiDocumentText className="text-[1.5rem]" />
              <span>Download</span>
            </div>
          ) : (
            <span className="cursor-not-allowed">No Brief</span>
          )}
        </div>

        <div className="xl:w-[40%] 2xl:w-[30%] flex items-center gap-x-2 font-medium overflow-hidden">
          {project.tags?.map((category) => {
            return (
              <div
                key={category}
                className={`w-[fit] h-[2rem] flex justify-center items-center rounded-xl p-2 bg-[#EFF5F5] `}
              >
                <span>{category}</span>
              </div>
            );
          })}
        </div>
      </div>

      <ProjectDetails
        isModalOpen={isModalOpen}
        setIsModalOpen={setModalOpen}
        project={project}
      />
    </div>
  );
};

export default ProjectComponent;

'''
'''--- src/components/projectDetails/projectDetails.js ---
//NextJS import
import Image from "next/image";

//Components import
import Modal from "../modal/modal";

//Near import
import { wallet, utils, callFunction } from "../../../near/near-setup";

//React import
import { useEffect, useState, useRef } from "react";

//Assets import
import Near from "../../../public/assets/images/near.svg";

//Icon import
import { HiDocumentText } from "react-icons/hi";
import { AiOutlineDelete } from "react-icons/ai";

//Utils import
import { parseDate } from "../../utils/parse-date";
import { toast } from "react-toastify";
import { uploadFile } from "../../utils/file-upload";
import ApplicationForm from "../applicationForm/applicationForm";

//Recoil import
import { useRecoilState } from "recoil";
import { userProfile, projectsList, updateData } from "../../recoil/state";

const ProjectDetails = ({ isModalOpen, setIsModalOpen, project }) => {
  //Recoil
  const [user, setUser] = useRecoilState(userProfile);
  const [_projects, setProjects] = useRecoilState(projectsList);

  //UseStates
  const [nearPrice, setNearPrice] = useState(null);
  const [isApplying, setIsApplying] = useState(false);
  const [work, setWork] = useState(null);
  const [isDraggedEnter, setIsDraggedEnter] = useState(false);

  const workRef = useRef(null);

  const onDragEnter = (e) => {
    e.preventDefault();
    setIsDraggedEnter(true);
  };
  const onDragOver = (e) => {
    e.preventDefault();
  };
  const onDrop = (e) => {
    e.preventDefault();
    setBrief(e.dataTransfer.files[0]);
  };
  const onDragLeave = (e) => {
    e.preventDefault();
    setIsDraggedEnter(false);
  };

  //UseEffects
  useEffect(() => {
    (async () => {
      const apiData = await fetch(
        "https://api.coingecko.com/api/v3/coins/near"
      );
      const nearData = await apiData.json();

      setNearPrice(nearData?.market_data?.current_price?.usd);
    })();
  }, [isModalOpen]);

  useEffect(() => {
    if (!isModalOpen) setIsApplying(false);
  }, [isModalOpen]);

  useEffect(() => {
    if (project.workResult == "") return;
    setWork(project.workResult);
  }, [project]);

  return (
    <Modal
      isOpen={isModalOpen}
      setIsOpen={setIsModalOpen}
      title={project?.title}
    >
      {!isApplying ? (
        <>
          <input
            id="brief"
            type="file"
            ref={workRef}
            className="hidden"
            accept="application/pdf, .zip"
            onChange={(e) => {
              setWork(e.target.files[0]);
            }}
          />
          <span className="mb-[1rem] -mt-[1rem] font-medium">
            {project?.ownerId}
          </span>
          <div className="w-[40vw] cursor-default flex flex-col gap-y-2">
            <div className="flex w-full items-center justify-between mb-[1rem]">
              <div className="flex w-[50%] gap-x-4 gap-y-2 flex-wrap">
                {project.tags.map((tag, index) => {
                  return (
                    <div
                      key={tag}
                      className={`w-[fit] h-[2rem] flex justify-center items-center rounded-xl p-2 bg-[#EFF5F5] `}
                    >
                      <span>{tag}</span>
                    </div>
                  );
                })}
              </div>
              <div className="flex gap-x-2">
                {/* Actions section , edit , delete and apply */}
                {!user.appliedProjects.includes(project.projectId) &&
                project.status === "OPEN" ? (
                  <div
                    className={`w-fit h-[2rem] p-2 rounded-lg flex items-center justify-center cursor-pointer ${
                      project.ownerId !== wallet.getAccountId()
                        ? "bg-decentra-green"
                        : "bg-decentra-lightblue"
                    }  `}
                    onClick={() => {
                      if (project.ownerId !== wallet.getAccountId()) {
                        setIsApplying(true);
                      }
                    }}
                  >
                    <span>
                      {project.ownerId === wallet.getAccountId()
                        ? "Edit"
                        : "Apply"}
                    </span>
                  </div>
                ) : (
                  project.status === "CLOSED" && (
                    <span className="text-decentra-green font-medium">
                      COMPLETED
                    </span>
                  )
                )}
                {/* Allowing owner to delete project only if no one got accepted for the job */}
                {project.ownerId === wallet.getAccountId() &&
                  project.status === "OPEN" && (
                    <div
                      onClick={() => {
                        callFunction("deleteProject", {
                          projectId: project.projectId,
                        })
                          .then(() => {
                            setIsModalOpen(false);

                            updateData(setProjects, setUser);
                            toast.success("Project Deleted Successfully", {
                              position: "top-right",
                              autoClose: 5000,
                              hideProgressBar: false,
                              closeOnClick: true,
                              pauseOnHover: true,
                              draggable: true,
                              progress: undefined,
                            });
                          })
                          .catch(() => {
                            toast.error("Something went wrong!", {
                              position: "top-right",
                              autoClose: 5000,
                              hideProgressBar: false,
                              closeOnClick: true,
                              pauseOnHover: true,
                              draggable: true,
                              progress: undefined,
                            });
                          });
                      }}
                      className={`w-fit h-[2rem] p-2 rounded-lg flex items-center justify-center cursor-pointer bg-red-600 text-white`}
                    >
                      <span>Delete</span>
                    </div>
                  )}
              </div>
            </div>

            <div className="flex gap-x-[4rem] mb-4">
              <div className="flex flex-col">
                <span className="font-medium">Project Payment:</span>
                <div className="flex gap-x-1 items-center">
                  <span>{utils.format.formatNearAmount(project?.cost)}</span>
                  <Image src={Near} alt="Near Logo" width={15} height={15} />

                  <span className="ml-2">
                    $
                    {(
                      utils.format.formatNearAmount(project?.cost) *
                      parseFloat(nearPrice)
                    ).toFixed(2)}
                  </span>
                </div>
              </div>

              <div className="flex flex-col">
                <span className="font-medium">Project Deadline:</span>
                <div className="flex gap-x-1 items-center">
                  <span>{parseDate(project?.deadline)}</span>
                </div>
              </div>
            </div>

            <span className="font-medium">Project Description:</span>
            <span className="block">{project?.description}</span>

            {project?.projectBrief !== "null" ? (
              <>
                <span className="font-medium">Project Brief:</span>
                <div
                  className="flex items-center gap-x-2 text-decentra-green cursor-pointer w-fit"
                  onClick={() => window.open(project.projectBrief, "_blank")}
                >
                  <HiDocumentText className="text-[1.5rem]" />
                  <span>Download</span>
                </div>
              </>
            ) : null}

            {/* Shwoing the porject owner the proposals list */}
            {project.ownerId === wallet.getAccountId() && (
              <>
                <hr className="my-4 border-decentra-lightblue border-[1px]" />
                <span className="font-medium">Proposals:</span>
                <div className="flex flex-col gap-y-2">
                  {/* Showing all proposals */}
                  {project?.status === "OPEN"
                    ? project?.proposals.map((proposal, index) => {
                        return (
                          <div
                            key={index}
                            className="transition-all duration-300"
                            onClick={(e) => {
                              e.currentTarget.children[1].classList.toggle(
                                "hidden"
                              );
                            }}
                          >
                            <div className="flex justify-between items-center cursor-pointer ">
                              <div className="flex flex-col">
                                <span className="font-medium">
                                  {proposal.proposalTitle}
                                </span>
                                <span>{proposal.freelancerId}</span>
                              </div>
                              <div className="flex gap-x-2 items-center">
                                <button
                                  className="h-[2rem] w-fit p-2 rounded-lg bg-red-600 flex justify-center items-center text-white"
                                  onClick={(e) => {
                                    e.stopPropagation();
                                    callFunction("changeProposalStatus", {
                                      projectId: project.projectId,
                                      proposalId: proposal.proposalId,
                                      status: "REJECTED",
                                    })
                                      .then(() => {
                                        updateData(setProjects, setUser);
                                        toast.success(
                                          "Proposal rejected Successfully",
                                          {
                                            position: "top-right",
                                            autoClose: 5000,
                                            hideProgressBar: false,
                                            closeOnClick: true,
                                            pauseOnHover: true,
                                            draggable: true,
                                            progress: undefined,
                                          }
                                        );
                                      })
                                      .catch(() => {
                                        toast.error("Something went wrong!", {
                                          position: "top-right",
                                          autoClose: 5000,
                                          hideProgressBar: false,
                                          closeOnClick: true,
                                          pauseOnHover: true,
                                          draggable: true,
                                          progress: undefined,
                                        });
                                      });
                                  }}
                                >
                                  Reject
                                </button>
                                <button
                                  className="h-[2rem] w-fit p-2 rounded-lg bg-decentra-green flex justify-center items-center "
                                  onClick={(e) => {
                                    e.stopPropagation();
                                    callFunction("changeProposalStatus", {
                                      projectId: project.projectId,
                                      proposalId: proposal.proposalId,
                                      status: "ACCEPTED",
                                    })
                                      .then(() => {
                                        updateData(setProjects, setUser);
                                        toast.success(
                                          "Proposal accepted Successfully",
                                          {
                                            position: "top-right",
                                            autoClose: 5000,
                                            hideProgressBar: false,
                                            closeOnClick: true,
                                            pauseOnHover: true,
                                            draggable: true,
                                            progress: undefined,
                                          }
                                        );
                                      })
                                      .catch(() => {
                                        toast.error("Something went wrong!", {
                                          position: "top-right",
                                          autoClose: 5000,
                                          hideProgressBar: false,
                                          closeOnClick: true,
                                          pauseOnHover: true,
                                          draggable: true,
                                          progress: undefined,
                                        });
                                      });
                                  }}
                                >
                                  Accept
                                </button>
                              </div>
                            </div>
                            <div className="border-t-[1px] py-2 hidden">
                              <span>{proposal.proposalDescritpion}</span>
                              {proposal.proposalBrief !== "null" && (
                                <div
                                  className="flex items-center gap-x-2 text-decentra-green cursor-pointer w-fit"
                                  onClick={() =>
                                    window.open(
                                      proposal.proposalBrief,
                                      "_blank"
                                    )
                                  }
                                >
                                  <HiDocumentText className="text-[1.5rem]" />
                                  <span>Download proposal</span>
                                </div>
                              )}
                            </div>
                          </div>
                        );
                      })
                    : // Showing only the accepted proposal
                      project?.proposals
                        .filter(
                          (proposal) => proposal.proposalStatus === "ACCEPTED"
                        )
                        .map((proposal, index) => {
                          return (
                            <div
                              key={index}
                              className="transition-all duration-300"
                              onClick={(e) => {
                                e.currentTarget.children[1].classList.toggle(
                                  "hidden"
                                );
                              }}
                            >
                              <div className="flex justify-between items-center cursor-pointer ">
                                <div className="flex flex-col">
                                  <span className="font-medium">
                                    {proposal.proposalTitle}
                                  </span>
                                  <span>{proposal.freelancerId}</span>
                                </div>
                                <div className="flex gap-x-2 items-center">
                                  <span className="text-decentra-green font-medium">
                                    ACCEPTED
                                  </span>
                                </div>
                              </div>
                              <div className="border-t-[1px] py-2 hidden">
                                <span>{proposal.proposalDescritpion}</span>
                                {proposal.proposalBrief !== "null" && (
                                  <div
                                    className="flex items-center gap-x-2 text-decentra-green cursor-pointer w-fit"
                                    onClick={() =>
                                      window.open(
                                        proposal.proposalBrief,
                                        "_blank"
                                      )
                                    }
                                  >
                                    <HiDocumentText className="text-[1.5rem]" />
                                    <span>Download proposal</span>
                                  </div>
                                )}
                              </div>
                              {project.workResult !== "" && (
                                <div className="flex flex-col mt-2 gap-y-2 w-full">
                                  <span className="font-medium">Work:</span>
                                  <div
                                    className="flex items-center gap-x-2 text-decentra-green cursor-pointer w-fit"
                                    onClick={() =>
                                      window.open(project.workResult, "_blank")
                                    }
                                  >
                                    <HiDocumentText className="text-[1.5rem]" />
                                    <span>Download Work</span>
                                  </div>
                                  {project.status === "COMPLETED" && (
                                    <button
                                      className="self-center rounded-lg bg-decentra-green p-2 flex items-center justify-center"
                                      onClick={async (e) => {
                                        e.stopPropagation();
                                        callFunction("completeProject", {
                                          projectId: project.projectId,
                                        })
                                          .then(() => {
                                            updateData(setProjects, setUser);
                                            toast.success(
                                              "Project closed Successfully",
                                              {
                                                position: "top-right",
                                                autoClose: 5000,
                                                hideProgressBar: false,
                                                closeOnClick: true,
                                                pauseOnHover: true,
                                                draggable: true,
                                                progress: undefined,
                                              }
                                            );
                                          })
                                          .catch(() => {
                                            toast.error(
                                              "Something went wrong!",
                                              {
                                                position: "top-right",
                                                autoClose: 5000,
                                                hideProgressBar: false,
                                                closeOnClick: true,
                                                pauseOnHover: true,
                                                draggable: true,
                                                progress: undefined,
                                              }
                                            );
                                          });
                                      }}
                                    >
                                      Payout Project
                                    </button>
                                  )}
                                </div>
                              )}
                            </div>
                          );
                        })}
                </div>
              </>
            )}

            {/* Showing the freelancer his porposal */}
            {project.proposals.length > 0 &&
              project.proposals
                .filter(
                  (proposal) => proposal.freelancerId === wallet.getAccountId()
                )
                .map((p, index) => {
                  return (
                    <>
                      <hr className="my-4 border-decentra-lightblue border-[1px]" />
                      <span className="font-medium">My Proposal:</span>
                      <div className="flex flex-col gap-y-2">
                        <div
                          key={index}
                          className="transition-all duration-300"
                          onClick={(e) => {
                            e.currentTarget.children[1].classList.toggle(
                              "hidden"
                            );
                          }}
                        >
                          <div className="flex justify-between items-center cursor-pointer ">
                            <div className="flex flex-col">
                              <span className="font-medium">
                                {p.proposalTitle}
                              </span>
                              <span>{p.freelancerId}</span>
                            </div>
                            <div className="flex gap-x-2 items-center">
                              <span
                                className={`${
                                  p.proposalStatus === "REJECTED"
                                    ? "text-red-600"
                                    : p.proposalStatus === "ACCEPTED"
                                    ? "text-decentra-green"
                                    : "text-yellow-500"
                                }`}
                              >
                                {p.proposalStatus}
                              </span>
                            </div>
                          </div>
                          <div className="border-t-[1px] py-2 hidden">
                            <span>{p.proposalDescritpion}</span>
                            {p.proposalBrief !== "null" && (
                              <div
                                className="flex items-center gap-x-2 text-decentra-green cursor-pointer w-fit"
                                onClick={() =>
                                  window.open(p.proposalBrief, "_blank")
                                }
                              >
                                <HiDocumentText className="text-[1.5rem]" />
                                <span>Download proposal</span>
                              </div>
                            )}
                          </div>
                        </div>
                        {/* Allowing freelancer to upload work*/}
                        {p.proposalStatus === "ACCEPTED" && (
                          <div className="">
                            <span className="font-medium">
                              {work?.name && "Submit"} Work:
                            </span>
                            {!work ? (
                              <div
                                onDragEnter={onDragEnter}
                                onDragLeave={onDragLeave}
                                onDrop={onDrop}
                                onDragOver={onDragOver}
                                className={`flex flex-col w-full h-[10rem] bg-decentra-lightblue border-[1px] border-decentra-green rounded-lg items-center justify-center cursor-pointer ${
                                  isDraggedEnter
                                    ? "border-solid"
                                    : "border-dashed"
                                } `}
                                onClick={() => workRef.current.click()}
                              >
                                <span>Drag & Drop</span>
                                <span>Or</span>
                                <span>Click here</span>
                              </div>
                            ) : (
                              <div className="w-full flex  flex-col gap-y-2">
                                <div
                                  className="flex items-center mt-4 gap-x-2 cursor-pointer"
                                  onClick={() =>
                                    window.open(project.workResult, "_blank")
                                  }
                                >
                                  <HiDocumentText className="text-[1.5rem] text-decentra-green" />
                                  <span>
                                    {work && typeof work == "object"
                                      ? work?.name
                                      : "Download work"}
                                  </span>
                                  {work && typeof work == "object" && (
                                    <AiOutlineDelete
                                      className="text-[1.5rem] cursor-pointer ml-auto"
                                      onClick={(e) => {
                                        e.stopPropagation();
                                        setIsDraggedEnter(false);
                                        setWork(null);
                                      }}
                                    />
                                  )}
                                </div>
                                {work && typeof work == "object" && (
                                  <button
                                    className="self-center rounded-lg bg-decentra-green p-2 flex items-center justify-center"
                                    onClick={async () => {
                                      if (!work) {
                                        toast.error("Please upload your work", {
                                          position: "top-right",
                                          autoClose: 5000,
                                          hideProgressBar: false,
                                          closeOnClick: true,
                                          pauseOnHover: true,
                                          draggable: true,
                                          progress: undefined,
                                        });
                                        return;
                                      }

                                      const workUrl = await uploadFile(
                                        work,
                                        "file"
                                      );

                                      callFunction("submitWork", {
                                        projectId: project.projectId,
                                        workUrl: workUrl,
                                      })
                                        .then(() => {
                                          setIsModalOpen(false);
                                          updateData(setProjects, setUser);
                                          toast.success(
                                            "Work submitted Successfully",
                                            {
                                              position: "top-right",
                                              autoClose: 5000,
                                              hideProgressBar: false,
                                              closeOnClick: true,
                                              pauseOnHover: true,
                                              draggable: true,
                                              progress: undefined,
                                            }
                                          );
                                        })
                                        .catch(() => {
                                          toast.error("Something went wrong!", {
                                            position: "top-right",
                                            autoClose: 5000,
                                            hideProgressBar: false,
                                            closeOnClick: true,
                                            pauseOnHover: true,
                                            draggable: true,
                                            progress: undefined,
                                          });
                                        });
                                    }}
                                  >
                                    Submit Work
                                  </button>
                                )}
                              </div>
                            )}
                          </div>
                        )}
                      </div>
                    </>
                  );
                })}
          </div>{" "}
        </>
      ) : (
        <ApplicationForm
          setIsApplying={setIsApplying}
          projectId={project.projectId}
        />
      )}
    </Modal>
  );
};

export default ProjectDetails;

'''
'''--- src/pages/_app.js ---
import "../styles/globals.css";

//React imports
import { useEffect, useState } from "react";

//Component import
import LoadingSpinner from "../components/loadingSpinner/loadingSpinner";

//Near imports
import { initNear } from "../../near/near-setup";

//Recoil import
import { RecoilRoot } from "recoil";

//Toastify css import
import "react-toastify/dist/ReactToastify.css";

//Toastify import
import { ToastContainer } from "react-toastify";
function MyApp({ Component, pageProps }) {
  const [isLoading, setIsLoading] = useState(true);

  //Initialize Near when the app starts
  useEffect(() => {
    initNear();
    setIsLoading(false)
  }, []);

  return isLoading ? (
    <LoadingSpinner />
  ) : (
    <RecoilRoot>
      <Component {...pageProps} />
      <ToastContainer />
    </RecoilRoot>
  );
}

export default MyApp;

'''
'''--- src/pages/_document.js ---
/* eslint-disable react/no-unknown-property */
import Document, { Html, Head, Main, NextScript } from "next/document";

class MyDocument extends Document {
  render() {
    return (
      <Html>
        <Head>
          <link rel="preconnect" href="https://fonts.googleapis.com" />
          <link rel="preconnect" href="https://fonts.gstatic.com" crossOrigin="" />
          <link
            href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&display=swap"
            rel="stylesheet"
          />
        </Head>
        <body>
          <Main />
          <NextScript />
        </body>
      </Html>
    );
  }
}

export default MyDocument;

'''
'''--- src/pages/api/hello.js ---
// Next.js API route support: https://nextjs.org/docs/api-routes/introduction

export default function handler(req, res) {
  res.status(200).json({ name: 'John Doe' })
}

'''
'''--- src/pages/api/imageproxy.js ---
export default async function handler(req, res) {
  const url = decodeURIComponent(req.query.url);
  const result = await fetch(url);
  const body = await result.body;
  body.pipe(res);
}

'''
'''--- src/pages/dashboard.js ---
//Next import
import Head from "next/head";
import { useRouter } from "next/router";

//React import
import { useState, useEffect } from "react";

//Components import
import DecentraImage from "../components/decentraImage/decentraImage";
import NavItem from "../components/navItem/navItem";
import LoadingSpinner from "../components/loadingSpinner/loadingSpinner";
import ActiveProjectContent from "../components/activeProjectsContent/activeProjectsContent";

//Near import
import { viewFunction, wallet, signOut } from "../../near/near-setup";

//Icons import
import { CgBriefcase } from "react-icons/cg";
import { FiUsers } from "react-icons/fi";
import { BiLogOut, BiChalkboard } from "react-icons/bi";
import { BsChatFill } from "react-icons/bs";

//Recoil import
import { useRecoilState } from "recoil";
import { userProfile } from "../recoil/state";
import ProfilePage from "../components/profilePage/profilePage";
import MyProjectsContent from "../components/myProjectsContent/myProjectsContent";
import ClientListContent from "../components/clinetListContent/clientListContent";

const Dashboard = () => {
  const [currentTab, setCurrentTab] = useState(0);
  const [isLoading, setIsLoading] = useState(true);

  const [user, setUser] = useRecoilState(userProfile);

  const router = useRouter();

  useEffect(() => {
    if (user) {
      return setIsLoading(false);
    }

    const nearId = wallet.getAccountId();

    if (!nearId) return router.replace("/");

    viewFunction("getProfile", { accountId: nearId }).then((result) => {
      if (!result) return router.replace("/onboarding");

      setUser(result);
      setIsLoading(false);
    });
  }, []);

  const renderContent = () => {
    switch (currentTab) {
      case -1:
        return <ProfilePage />;
      case 0:
        return <ActiveProjectContent />;
      case 1:
        return <MyProjectsContent />;
      case 2:
        return <ClientListContent />;
      default:
        return <ActiveProjectContent />;
    }
  };

  return isLoading ? (
    <LoadingSpinner />
  ) : (
    <div className="w-screen h-screen flex">
      <Head>
        <title>DecentraJobs | Dashboard</title>
      </Head>

      {/* Sidebar */}
      <nav className="xl:w-[15rem]  2xl:w-[20rem] h-full bg-[#EFF5F5] flex flex-col items-center py-[4rem] gap-y-8">
        <span className="font-medium text-decentra-green text-[1.5rem]">
          DecentraJobs
        </span>

        {/* Profile tab section */}
        <div
          className="xl:w-[90%]  2xl:w-[65%] bg-white rounded-lg h-[4rem] shadow-md flex gap-x-2 items-center justify-center cursor-pointer"
          onClick={() => setCurrentTab(-1)}
        >
          <div className="w-[2.5rem] h-[2.5rem] rounded-full bg-decentra-gray">
            <DecentraImage
              alt="Profile Image"
              width="100%"
              height="100%"
              className="object-cover rounded-full"
              src={user.avatarUrl}
            />
          </div>
          <div className="flex flex-col">
            <span className="text-decentra-green font-medium ">
              {user.fullName}
            </span>
            <span className="text-[.8rem]">{wallet.getAccountId()}</span>
          </div>
        </div>

        {/* Navigation tabs sections */}

        <div className="w-full px-4 2xl:items-center flex flex-col gap-y-2">
          <NavItem
            Icon={CgBriefcase}
            isActive={currentTab === 0}
            onClick={() => setCurrentTab(0)}
            title="Active Projects"
          />

          <NavItem
            Icon={BiChalkboard}
            isActive={currentTab === 1}
            onClick={() => setCurrentTab(1)}
            title="My Projects"
          />
          <NavItem
            Icon={FiUsers}
            isActive={currentTab === 2}
            onClick={() => setCurrentTab(2)}
            title="Client List"
          />

          {/* <NavItem
            Icon={BsChatFill}
            isActive={currentTab === 3}
            onClick={() => setCurrentTab(3)}
            title="Chat"
          /> */}
        </div>

        {/* Logout section */}
        <div
          className="xl:w-[90%] 2xl:w-[60%] h-[4rem] mt-auto gap-x-6 bg-white rounded-lg shadow-md flex items-center justify-center cursor-pointer"
          onClick={() => {
            signOut();
            router.replace("/");
          }}
        >
          <BiLogOut className="text-[1.5rem] text-decentra-green" />
          <span className="text-decentra-green font-medium">Logout</span>
        </div>
      </nav>

      {/* Content */}
      {renderContent()}
    </div>
  );
};

export default Dashboard;

'''
'''--- src/pages/index.js ---
//Next JS imports
import Head from "next/head";
import Image from "next/image";
import { useRouter } from "next/router";

//React import
import { useEffect } from "react";

//Near imports
import { signIn, wallet, viewFunction, signOut } from "../../near/near-setup";

//Assets import
import Hero from "../../public/assets/images/hero.svg";

//Gsap import
import gsap from "gsap";

//Recoil import
import { useRecoilState } from "recoil";
import { userProfile } from "../recoil/state";

export default function Home() {
  //Next JS router
  const router = useRouter();

  //User profile state
  const [userProfileState, setUserProfileState] = useRecoilState(userProfile);

  useEffect(() => {
    const user = wallet.getAccountId();
    const authenticating = localStorage.getItem("authenticating");

    try {
      //Checking if user logged in before refresh
      if (user != "" && authenticating) {
        viewFunction("getProfile", { accountId: user }).then((result) => {

          setUserProfileState(result);
          localStorage.removeItem("authenticating");
          //If user has profile redirect to dashboard page
          if (result) {
            router.push("/dashboard");
          }else{
          //Else redirect to onboarding page
          router.push("/onboarding");
          }
        });

      }
    } catch (e) {
      console.log(e);
    }
  }, []);

  //Logo and hero section animation
  useEffect(() => {
    gsap.fromTo(
      "#hero_section",
      { x: -100, opacity: 0 },
      { duration: 1, x: 0, opacity: 1 }
    );
    gsap.fromTo(
      ".letter",
      { y: "100%" },
      { y: 0, duration: 0.2, delay: 1, stagger: 0.1 }
    );
  }, []);

  return (
    <div className="w-screen h-screen bg-white">
      <Head>
        <title>DecentraJobs</title>
        <meta name="description" content="Decentralized freelance platform" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <nav className="w-screen h-[5rem] py-4 xl:px-[5rem] 2xl:px-[30rem] flex items-center justify-between">
        <h2 className="font-medium text-decentra-green text-[1.5rem] overflow-hidden">
          <span className="letter inline-block">D</span>
          <span className="letter inline-block">e</span>
          <span className="letter inline-block">c</span>
          <span className="letter inline-block">e</span>
          <span className="letter inline-block">n</span>
          <span className="letter inline-block">t</span>
          <span className="letter inline-block">r</span>
          <span className="letter inline-block">a</span>
          <span className="letter inline-block">J</span>
          <span className="letter inline-block">o</span>
          <span className="letter inline-block">b</span>
          <span className="letter inline-block">s</span>
        </h2>

        <div
          className="p-2 bg-decentra-green text-white rounded-lg cursor-pointer z-10"
          onClick={() => {
            const user = wallet.getAccountId();
            
            if (user == "") {
              //Saving authentication state to localStorage
              localStorage.setItem("authenticating", true);
              return signIn();
            } else {
              viewFunction("getProfile", { accountId: user }).then((result) => {
                
                if(result){
                  setUserProfileState(result);
                  router.push("/dashboard");
                }else{
                  router.push("/onboarding");
                }
                
              });
            }
          }}
        >
          <span>Get Started</span>
        </div>
      </nav>

      <main
        className="w-screen xl:px-[5rem] 2xl:px-[30rem] h-[91%] bg-[#F6F6F6] py-5 flex justify-between items-center"
        id="hero_section"
      >
        <section>
          <span className="text-[3rem] font-bold text-decentra-green">
            Hire top talents,
            <br />
            Get hired. Work freely
          </span>
          <span className="block text-[1.5rem] mb-[2rem]">
            DecentraJobs offers a decentralized freelance experience
          </span>

          <div className="flex items-center gap-x-4">
            <button className="w-[6rem] h-[3rem] bg-decentra-green text-white rounded-lg outline-none">
              Start Hiring
            </button>
            <button className="w-[6rem] h-[3rem]  border-[2px] border-black text-decentra-black rounded-lg outline-none">
              Find Work
            </button>
          </div>
        </section>

        <Image
          src={Hero}
          alt="hero"
          className="w-[30%] xl:h-[5rem] 2xl:h-[10rem]"
          width="500"
        />
      </main>
    </div>
  );
}

'''
'''--- src/pages/onboarding.js ---
//Next import
import Image from "next/image";
import Head from "next/head";
import { useRouter } from "next/router";

//React import
import { useEffect, useState, useRef } from "react";

//Component import
import LoadingSpinner from "../components/loadingSpinner/loadingSpinner";

//Near import
import {
  callFunction,
  wallet,
  signOut,
  viewFunction,
} from "../../near/near-setup";

//Toastify import
import { toast, ToastContainer } from "react-toastify";

//Icons import
import { HiUpload } from "react-icons/hi";
import { AiFillDelete } from "react-icons/ai";

//Default config import
import { avatarImage } from "../utils/default-config";

//Form input
import { useForm } from "react-hook-form";

//GSAP import
import gsap from "gsap";

//utils import
import { uploadFile } from "../utils/file-upload";

const OnBoarding = () => {
  const [isLoading, setIsLoading] = useState(true);
  const [profileImage, setProfileImage] = useState(null);
  const [bioLength, setBioLength] = useState(0);
  const [skills, setSkills] = useState([]);
  const [isSubmitting, setIsSubmitting] = useState(false);

  const imageRef = useRef(null);

  const router = useRouter();

  //Form state
  const {
    register,
    handleSubmit,
    watch,
    formState: { errors },
  } = useForm();
  const onSubmit = async (data) => {
    if (isLoading) return;

    setIsSubmitting(true);

    const { fullName, bio } = data;

    const avatarUrl = profileImage
      ? await uploadFile(profileImage, "image")
      : avatarImage;

    callFunction("createProfile", {
      fullName,
      bio,
      skills,
      avatarUrl: avatarUrl,
      accountId: wallet.getAccountId(),
    })
      .then((_result) => {
        setIsSubmitting(false);
        toast.success("Profile created successfully", {
          position: "top-right",
          autoClose: 5000,
          hideProgressBar: false,
          closeOnClick: true,
          pauseOnHover: true,
          draggable: true,
          progress: undefined,
        });

        router.replace("/dashboard");
      })
      .catch((err) => {
        console.log(err);
        setIsSubmitting(false);
        toast.error("Something went wrong!", {
          position: "top-right",
          autoClose: 5000,
          hideProgressBar: false,
          closeOnClick: true,
          pauseOnHover: true,
          draggable: true,
          progress: undefined,
        });
      });
  };

  watch((value) => setBioLength(value.bio.length));

  const skillsInput = watch("skills");

  useEffect(() => {
    const nearId = wallet.getAccountId();
    //Checking if user is logged in
    if (!nearId) return router.replace("/");
               
    viewFunction("getProfile", { accountId: nearId })
      .then((result) => {
        if (result) return router.replace("/dashboard");
        else setIsLoading(false)
      })
      .catch((e) => {
        console.log(e);
      });
  }, []);

  useEffect(() => {
    if (!skillsInput) return;
    const skilllAray = skillsInput
      .split(",")
      .filter((skill) => skill.length > 0 && skill !== "");
    setSkills(skilllAray);
  }, [skillsInput]);

  useEffect(() => {
    gsap.fromTo(
      "#hero_section",
      { y: 100, opacity: 0 },
      { duration: 1.2, y: 0, opacity: 1 }
    );
  }, []);

  return isLoading ? (
    <LoadingSpinner />
  ) : (
    <div className="w-screen h-screen flex justify-center items-center bg-[#EFF5F5] select-none">
      <ToastContainer />
      <Head>
        <title>DecentraJobs | OnBoarding</title>
      </Head>

      <div
        className="w-[60rem] h-[40rem] bg-white rounded-lg shadow-lg p-4 flex flex-col"
        id="hero_section"
      >
        <span className="text-black font-semibold mb-[2rem]">DecentraJobs</span>

        {/*Avatar Image component  */}
        <div className="w-[5rem] h-[5rem] bg-bt-dark-gray rounded-lg self-center relative select-none shadow-lg">
          <Image
            src={
              profileImage
                ? URL.createObjectURL(profileImage)
                : `/api/imageproxy?url=https://bafybeihj2j6solt4kbl6doc7w2vw7e5eqgc66fsuzpattjnn4mjhxici7y.ipfs.dweb.link/avatar.png`
            }
            className="rounded-lg object-cover "
            unoptimized
            width="100%"
            height="100%"
            alt="avatar"
          />
          <div className="absolute -bottom-0 left-1/2 -translate-x-1/2 translate-y-1/2 flex gap-x-1.5 justify-center items-center">
            <div
              onClick={() => {
                
                if (imageRef.current === null) return;
                imageRef.current.click();
              }}
              className=" bg-[#E2EDEE] h-[2rem] w-[2rem]  rounded-full flex justify-center items-center z-10"
            >
              <HiUpload className="text-[#297979] text-[1.3rem] cursor-pointer " />
            </div>
            <div
              onClick={() => {
                setProfileImage(null);
              }}
              className={`bg-[#E2EDEE] h-[2rem] w-[2rem]  rounded-full justify-center items-center z-10 ${
                profileImage ? "flex" : "hidden"
              }`}
            >
              <AiFillDelete className="text-[#297979] text-[1.3rem] cursor-pointer" />
            </div>
          </div>
          <input
            type="file"
            accept="image/png, image/jpeg"
            ref={imageRef}
            className="invisible"
            onChange={(e) => {
              if (e.target.files === null) return;
              setProfileImage(e.target.files[0]);
            }}
          />
        </div>

        <form
          className="flex flex-col gap-y-4"
          onSubmit={handleSubmit(onSubmit)}
        >
          {/* Full Name */}
          <div className="flex flex-col">
            <span className="text-black">Full Name:</span>
            <input
              className="outline-none w-[25rem] h-[2rem] p-2 bg-[#E2EDEE] rounded-lg border-[2px] border-transparent focus:border-[#297979] "
              placeholder="John Doe"
              {...register("fullName", { required: true })}
            />
            {errors.fullName && (
              <span className="text-red-600">This field is required</span>
            )}
          </div>

          {/* Bio */}
          <div className="flex flex-col w-[25rem]">
            <span>Bio:</span>
            <textarea
              placeholder="Tell us about yourself"
              className="outline-none w-[25rem] h-[5rem] p-2 bg-[#E2EDEE] rounded-lg border-[2px] border-transparent focus:border-[#297979] resize-none"
              {...register("bio", {
                required: "This field is required",
                maxLength: {
                  message: "Bio cannot be longer than 140 characters",
                  value: 140,
                },
              })}
            />
            <span className="mt-1 self-end">{bioLength}/140</span>
            {errors.bio && (
              <span className="text-red-600">{errors.bio.message}</span>
            )}
          </div>

          {/* Skills */}
          <div className="flex flex-col w-[25rem]">
            <span>Skills:</span>
            <span className="text-gray-400 text-[.8rem]">
              Seperate skills with a comma (,)
            </span>
            <input
              placeholder="Show us your skills"
              className="outline-none w-[25rem] min-h-[2rem] p-2 bg-[#E2EDEE] rounded-lg border-[2px] border-transparent focus:border-[#297979] resize-none"
              {...register("skills", {
                required: "This field is required",
              })}
            />

            {errors.skills && (
              <span className="text-red-600">{errors.skills.message}</span>
            )}
          </div>

          <input
            type="submit"
            className={`h-[2.5rem] w-fit p-2  rounded-lg self-center mt-[2rem] cursor-pointer transition-all duration-300 ${
              isSubmitting
                ? "bg-decentra-gray cursor-not-allowed"
                : "bg-decentra-turquoise"
            }`}
            value={isSubmitting ? "Loading..." : "Submit"}
          />
        </form>

        <span
          className="self-center mt-[1.5rem] cursor-pointer"
          onClick={() => {
            signOut();
            router.replace("/");
          }}
        >
          Use a different account
        </span>
      </div>
    </div>
  );
};

export default OnBoarding;

'''
'''--- src/recoil/state.js ---
//Recoil import
import { atom } from "recoil";

//Near import
import { viewFunction, wallet } from "../../near/near-setup";

export const userProfile = atom({
  key: "userProfile",
  default: null,
});

export const projectsList = atom({
  key: "projectList",
  default: [],
});

export const updateData = (setProjects, setUser) => {
  //Getting all the projects
  viewFunction("getAllProject")
    .then((res) => {
      setProjects(res);
    })
    .catch((err) => {
      console.log(err);
    });

  //Getting the user profile
  viewFunction("getProfile", { accountId: wallet.getAccountId() })
    .then((res) => {
      setUser(res);
    })
    .catch((err) => {
      console.log(err);
    });
};

'''
'''--- src/utils/default-config.js ---
export const avatarImage = "https://bafybeihj2j6solt4kbl6doc7w2vw7e5eqgc66fsuzpattjnn4mjhxici7y.ipfs.dweb.link/avatar.png"
'''
'''--- src/utils/file-upload.js ---
//Web3Storage import
import { Web3Storage } from "web3.storage";
import imageCompression from "browser-image-compression";

var options = {
  maxSizeMB: 1,
  useWebWorker: true,
};

const token = process.env.NEXT_PUBLIC_STORAGE_API;
const client = new Web3Storage({ token });

export const uploadFile = async (file, type) => {
  if (!file) return;

  const fileName = file.name.replace(/ /g, "");

  var blob = file.slice(0, file.size, file.type);
  const newFile = new File([blob], fileName, {type: file.type});

  let finalFile = newFile;

  try {
    if (type === "image") finalFile = await imageCompression(newFile, options);

    const cid = await client.put([finalFile]);

    return `https://${cid}.ipfs.dweb.link/${fileName}`;
  } catch (e) {
    console.log(e);
  }
};
'''
'''--- src/utils/parse-date.js ---

export const parseDate = (date) => {
  const input = !isNaN(date) ? parseInt(date) : date
  var tempDate = new Date(input);
  const splitDate = tempDate.toString().split(" ");
  return `${splitDate[2]} ${splitDate[1]}, ${splitDate[3]}`;
};

'''
'''--- tailwind.config.js ---
module.exports = {
  content: [
    "./src/pages/**/*.{js,ts,jsx,tsx}",
    "./src/components/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {
      colors: {
        "decentra-green": "#399E5A",
        "decentra-turquoise": "#63E2C6",
        "decentra-bluegreen": "#5ABCB9",
        "decentra-gray": "#F6F6F6",
        "decentra-lightblue" : "#E2EDEE"
      },
      boxShadow: {
        decentra: "rgba(0, 0, 0, 0.15) 0px 5px 10px",
      },
    },
  },
  plugins: [],
}

'''