*GitHub Repository "nativeanish/in-counter-near"*

'''--- README.md ---
# in-counter-near
Incomplete counter Application in near protocols

'''
'''--- lib.rs ---
use std::collections::HashMap;

use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::{env, near_bindgen, AccountId};
near_sdk::setup_alloc!();

#[near_bindgen]
#[derive(BorshSerialize, BorshDeserialize)]
struct Counter {
    state: i64,
    action: HashMap<AccountId, String>,
}

#[near_bindgen]
impl Counter {
    pub fn increase(&mut self) {
        self.state += 1;
        self.action
            .insert(env::signer_account_id(), String::from("1"));
        let log = env::signer_account_id() + " have increase the state ";
        env::log(String::from(log).as_bytes());
    }
    pub fn read(&self) -> i64 {
        self.state
    }
    pub fn get_list(&self) -> Vec<String> {
        let mut vec: Vec<String> = vec![];
        for (a, _) in self.action.iter() {
            vec.push(a.trim().to_string());
        }
        vec
    }
}
impl Default for Counter {
    fn default() -> Self {
        Self {
            state: 0,
            action: HashMap::new(),
        }
    }
}

'''
'''--- package.json ---
{
  "name": "front",
  "version": "1.0.0",
  "main": "index.js",
  "license": "MIT",
  "dependencies": {
    "near-api-js": "^0.44.2",
    "parcel": "^2.3.2",
    "react": "^17.0.2",
    "react-dom": "^17.0.2"
  },
  "scripts": {
    "dev": "npx parcel public/index.html"
  },
  "devDependencies": {
    "buffer": "^6.0.3",
    "process": "^0.11.10"
  }
}

'''
'''--- public/index.html ---
<!DOCTYPE html>
<html>
  <head>
    <title>Near Application</title>
  </head>
  <body>
	  <div id="mountNode">
	  </div>
	  <script src="index.jsx" type="module"></script>
  </body>
</html>

'''
'''--- src/utils/near.js ---
import * as nearAPI from "near-api-js";
import { WalletAccount } from "near-api-js";
const get_near = async () => {
  const { keyStores } = nearAPI;
  const keyStore = new keyStores.BrowserLocalStorageKeyStore();
  const config = {
    networkId: "testnet",
    keyStore, // optional if not signing transactions
    nodeUrl: "https://rpc.testnet.near.org",
    walletUrl: "https://wallet.testnet.near.org",
    helperUrl: "https://helper.testnet.near.org",
    explorerUrl: "https://explorer.testnet.near.org",
  };
  const near = await nearAPI.connect(config);
  return near;
};
const get_wallet = async() => {
    const near = await get_near();
    const wallet = new WalletAccount(near);
    return wallet;
}
export const check_signIn = async() => {
    const wallet = await get_wallet();
    if (wallet.isSignedIn()){
        return wallet.getAccountId();
    }else {
        return false;
    }
}

export const signIn = async() => {
    const wallet = await get_wallet();
    wallet.requestSignIn();
    return wallet.getAccountId();
}
export const get_state = async() => {
    const wallet = await get_wallet();
    const contract = new nearAPI.Contract(wallet.account(),"dev-1646464161743-60471218272406",{
        viewMethods:["read","get_list"],
        changeMethods:["increase"],
    });

    const list = await contract.get_list();
    console.log(list); 
    return await contract.read();
}
export const increment = async() => {
    const wallet = await get_wallet();
    const contract = new nearAPI.Contract(wallet.account(),"dev-1646464161743-60471218272406",{
        viewMethods:["read","get_list"],
        changeMethods:["increase"],
    });
    await contract.increase({});
    console.log(res); 
}
export const logout = async() => {
    const wallet = await get_wallet();
    wallet.signOut();
}
'''