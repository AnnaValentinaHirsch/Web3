*GitHub Repository "near/near-light-client"*

'''--- .github/workflows/on_main.yml ---
name: "Deploying Light Client"

on:
  push:
     branches:
       - main

jobs:
  git-submodules-update:
    name: "Build and deploy Light Client"
    permissions:
      contents: read
      packages: write
    runs-on:
      group: ubuntu-22.04-8core
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}          

      - name: Build "light-client" Docker image and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          file: Dockerfile
          tags: |
            ghcr.io/near/near-light-client/light-client:${{ github.sha }}
            ghcr.io/near/near-light-client/light-client:latest

# TODO: releasing to succinct on tag

'''
'''--- .github/workflows/on_pull_request.yml ---
# See workflow runs at https://github.com/nextest-rs/reuse-build-partition-example/actions/workflows/ci.yml.
name: "Check PR is ready for merge"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  pull_request:
    branches:
      - master
    # schedule:
    #   # Run this every day at 01:00 UTC.
    #   - cron: 0 1 * * *

env:
  CARGO_TERM_COLOR: always

jobs:
  lint:
    name: "Lint"
    runs-on:
      group: ubuntu-22.04-8core
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - uses: actions-rust-lang/setup-rust-toolchain@v1.8.0
        with:
          cache-workspaces: |-
            .
      - uses: actions-rust-lang/rustfmt@v1
      - uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features

  build-test-artifacts:
    name: Build test artifacts
    runs-on: ubuntu-20.04-16core
    steps:
      - uses: actions/checkout@v3
        with:
          # By default actions/checkout checks out a merge commit. Check out the PR head instead.
          # https://github.com/actions/checkout#checkout-pull-request-head-commit-instead-of-merge-commit
          ref: ${{ github.event.pull_request.head.sha }}
      - uses: actions-rust-lang/setup-rust-toolchain@v1.8.0
        with:
          cache-workspaces: |-
            .
      - name: "Install cargo-nextest"
        uses: taiki-e/install-action@v2
        with:
          tool: nextest        
      - name: Build and archive tests
        run: cargo nextest archive -r --workspace --archive-file nextest-archive.tar.zst --locked
      - name: Upload archive to workflow
        uses: actions/upload-artifact@v3
        with:
          name: nextest-archive
          path: nextest-archive.tar.zst

  test-rust:
    name: "Test Rust"
    runs-on:
      group: ubuntu-22.04-8core
    needs: build-test-artifacts
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - uses: actions-rust-lang/setup-rust-toolchain@v1.8.0
        with:
          cache-workspaces: |-
            .
      - name: "Install cargo-nextest"
        uses: taiki-e/install-action@v2
        with:
          tool: nextest        
      - name: Download archive
        uses: actions/download-artifact@v3
        with:
          name: nextest-archive          
      - name: "Run normal tests"
        run: |
          cargo nextest run \
            --archive-file nextest-archive.tar.zst \
            --no-fail-fast
  
  run-tests-partitioned:
    name: "Run Beefy tests partitioned"
    needs: build-test-artifacts
    strategy:
      matrix:
        os: [ubuntu-22.04-32core, ubuntu-20.04-32core]
        include:
          - os: ubuntu-22.04-32core 
            share: 1
          - os: ubuntu-20.04-32core
            share: 2
    runs-on: ${{ matrix.os }} 
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - uses: actions-rust-lang/setup-rust-toolchain@v1.8.0
        with:
          cache-workspaces: |-
            .
      - name: "Install cargo-nextest"
        uses: taiki-e/install-action@v2
        with:
          tool: nextest        
      - name: Download archive
        uses: actions/download-artifact@v3
        with:
          name: nextest-archive
      - name: Run tests
        run: |
          cargo nextest run \
            --run-ignored ignored-only \
            --archive-file nextest-archive.tar.zst \
            --partition count:${{ matrix.share }}/2

  test-solidity-contracts:
    name: "Test Solidity Contracts"
    runs-on:
      group: ubuntu-22.04-8core
    defaults:
      run:
        working-directory: ./nearx/contract        
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
          token: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions-rust-lang/setup-rust-toolchain@v1.8.0
        with:
          cache-workspaces: |-
            .
      - name: Install Foundry
        uses: "foundry-rs/foundry-toolchain@v1"            
      - name: Add build summary
        run: |
          echo "## Build result" >> $GITHUB_STEP_SUMMARY
          echo "âœ… Passed" >> $GITHUB_STEP_SUMMARY          
      - name: "Run tests"
        run: forge test --gas-report -vv            
 

'''
'''--- Cargo.toml ---
[workspace.package]
edition = "2021"
license = "MIT"
version = "0.3.0"

[workspace]
members  = [ "bin/*", "crates/*", "nearx" ]
resolver = "2"

[workspace.dependencies]
anyhow            = "1.0"
async-trait       = "0.1"
config            = "0.13"
derive_more       = "0.99"
either            = { version = "1.9", features = [ "serde" ] }
itertools         = "0.12"
log               = "0.4"
pretty_assertions = "1.4"
pretty_env_logger = "0.5"
sled              = "0.34" # TODO: maybe heavy, use heed instead
thiserror         = "1.0"

# Async
axum    = "*"
borsh   = "1.3"
coerce  = { version = "0.8", features = [ "full" ] }
futures = "0.3"
reqwest = { version = "0.11", features = [ "gzip", "brotli", "deflate", "json" ] }
tokio   = { version = "1", features = [ "full" ] }

# Codec
hex        = { version = "0.4", features = [ "serde" ] }
protobuf   = "=3.2.0"
serde      = { version = "1.0", features = [ "derive" ] }
serde_json = "1.0"

# Near specific
near-crypto             = "0.20"
near-jsonrpc-client     = "0.8"
near-jsonrpc-primitives = "0.20"
near-primitives         = "0.20"
near-primitives-core    = "0.20"

near-light-client-protocol = { path = "crates/protocol" }
near-light-client-rpc      = { path = "crates/rpc" }
near-light-clientx         = { path = "circuits/plonky2x" }
test-utils                 = { path = "crates/test-utils" }

[patch."https://github.com/succinctlabs/starkyx.git"]
starkyx = { git = "https://github.com/dndll/starkyx.git" }
#curta = { path = "./vendor/starkyx/starkyx" }

[patch."https://github.com/succinctlabs/succinctx.git"]
#plonky2x = { path = "./vendor/succinctx/plonky2x/core" }
plonky2x = { git = "https://github.com/dndll/succinctx.git" }

'''
'''--- README.md ---
<div align="center">
  <a href="https://near.org"><img alt="NEAR Protocol" src="docs/assets/near-logo.svg" width=600></a>
  <h3> <a href="https://near.org">NEAR</a> is a low-cost, usable, and scalable layer-one blockchain that offers cheap data availability layer.</h3>
  <br />
</div>

# NEAR light client

[![Tests](https://github.com/near/near-light-client/actions/workflows/on_pull_request.yml/badge.svg)](https://github.com/near/near-light-client/actions/workflows/on_pull_request.yml)
[![Deploy](https://github.com/near/near-light-client/actions/workflows/on_main.yml/badge.svg)](https://github.com/near/near-light-client/actions/workflows/on_main.yml)

A fully featured, injectable, dependable implementation of the NEAR light client protocol[^1].

## Motivation

There are many light clients in circulation for NEAR, with a variety of protocols and features to varying degrees of security and maintenance.
In this repository, we hope to collaborate our efforts such that we can build a robust client and amalgamate our efforts to improve the light client and also innovate with with it.

This is inspired by the great `helios`[^2] light client, where there were once many light client implementations for Ethereum until it was released. 
This has now become an integral unification of efforts in innovating helios as well as a trustworthy system for people to build with.

Functional requirements:
- **injectable**: For the client to be injectable, it must be ready to be injected in various environments. Building a ZK light client using plonky3? Lambdaworks? Arcworks? Use a different EDDSA library? What about building a contract, where the code paths don't use a library? All of these 
various systems require varying libraries, each of which provides some base cryptography however they are implemented in various dependencies.
Interoperability with dependencies is very hard to maintain and eventually falls by the wayside.
With the light client being injectable, they can inject cryptographic semantics and the light client logic should be the same, with the only difference being what environment the application uses.
- **robust**: With an open source, contributor-friendly effort, stringent semantic versioning and audits, we can be sure that the light client will be robust and maintainable.
- **dependable**: The Protocol itself should not be dependent on many dependencies which would detract from its usability. Ideally, the light client should be `#[no_std]`, and it should be environment-agnostic.
If an environment is simply too difficult to maintain Interoperability with, such as `Solidity <> Rust`, we should try to build a modular set of building blocks to aid this.

## Structure

At present, there are currently two implementations of the light client. The `std` and the `zk` version. With varying approaches to get running with these.

### Off-chain  

This is the first light client that was used to build on the logic of the protocol, it has the greatest environment assumptions and a bunch of dependencies.

In `bin`, there is the off-chain light client, which syncs with the final head of the chain, applies the sync protocol and stores the block producers and the next header. 
This is the most basic way to run the light client, you can configure the `${ENVIRONMENT}.toml` to set your trusted checkpoints, state and the host exposed and this will work out of the box, syncing with the state and catching up if needed.

#### State

It also stores some information in the state db, this contains a few tries in `sled`, namely block producers, headers and any cachable information used for verification.
The state for this is largely unoptimised and definitely can be improved, particularly around the technology selected.

#### Interface

It exposes an HTTP interface for querying state and providing proofs. It should expose a JSON-RPC implementation to be more compatible with users already aware of NEAR RPC nodes.

### ZK

https://alpha.succinct.xyz/near/near-light-client

We have just merged the initial implementation of a ZK light client protocol, this can be seen in `nearx`. It leverages Succinct's[^3] prover network and plonky2x SDK as a proving system.
Thich will allow us to pay for proof generation from the proof market.

It is a fully featured light client protocol, providing sync and transaction verification. It exploits STARK acceleration for the STARK-friendly functionality and parallel proving for the Merkle verification.
We aim to also fold verification and syncing with proof recursion so the light client can act lazily, syncing when needed, vs syncing eagerly. 

#### Circuits

Below are the current circuits for the ZK light client.

The circuits will be improved going forward, as they serve only a "one-shot" command style for syncing/verification and no autonomous proving.

Since the ZK client integrates with a Solidity Contract on chain and the circuit must have a statically aligned size, we have to minimise as much calldata as possible, opting to witness verification in the circuit rather than store information.
One example of this is the `Block Producers`, if we were to store this information unoptimised, we would have to store all hashable fields, growable to their max size `(account_id(64 bytes), public_key(64), stake(16))`, also grown to eth storage slots.
So thats: (64 + 64 + 32(eth storage slots are minimum 32)) = 160 bytes per validator per epoch. At the time of writing, that is 100 validators per epoch, making the resulting bytes just for validators 16000. 

##### Sync

Syncs to the next `head`, either the last header of the next epoch or the next header in the current epoch.

Public inputs:
- `trusted_header_hash`: This is the last header that was synced or the checkpoint header. We use this to query the header info and witness the header is valid, as well as to ensure the header was once synced.

Public Outputs:
- `next_header_hash`: The header hash of the next header that has been synced in the protocol.

Proof generation time:

Improvements:
- Fast forward: The light client should sync arbitrarily many headers at a time. We can gather all the information and then sync in parallel, using boundary checks to ensure the joining of the parallel parts.
- Autonomous sync
- Lazy, aggregate proofs. The operational cost of sync light clients is intensely high. Quite often they do not need to be synced until a transaction needs to be verified. Since proving time is quite fast, we can introduce lazy syncing to the protocol.

In some cases, the light client would need to be synced eagerly. However, at most times the light client should be synced lazily and only when needed to mitigate operational costs.

##### Verify

Verifies a batch of transactions/receipts, this wraps the Merkle proof verification of multiple transactions in a parallelised circuit. 
This allows us to witness the verification of arbitrary amounts of transactions and only pay for verification on Ethereum once, with the relay of the results for the transactions/receipts calldata being the most fees.
We are introducing an additional circuit to allow us to skip the relay of this information.

Public inputs:
- `trusted_header_hash`: The last header that was synced. We can use this to also determine if we need to sync in this verification. And to query the header information.
- `transaction_or_receipt_ids`: The transactions or receipts to be verified.

Public Outputs:
- `transaction_or_receipt_results`: The IDs and the result of their verification 

### Crates

Here we have the building blocks used by the protocol, std binary and the ZK implementation. This is the main building blocks that we use for the implementations. There is a great deal of overlap in their functionality:
- calling rpc nodes
- hashing
- signature verification
- encoding
- the protocol itself

## Metrics

All metrics are currently based on a consumer machine with the following specifications:

- OS: NixOS 24.05.20240205.4b1aab2 (Uakari) x86_64
- CPU: AMD Ryzen 9 7950X (32) @ 4.500GHz 
- RAM: 32GB @ 4800MHz DDR5

Circuits:
- Sync: ~38seconds
- Verify_2x1: ~25s
- Verify_128x4: ~12mins, linearly with batch size. No parallelisation. Roughly 22 seconds per batch.

To run the tests yourself:
- `cargo nextest archive -r -p near-light-clientx --archive-file=nextest-archive.tar.zst --locked`
- `RUST_LOG=debug cargo nextest run --no-capture --run-ignored ignored-only --archive-file nextest-archive.tar.zst -- sync_e2e verify_e2e_2x1 verify_e2e_128x4`

[^1]: NEAR light client specification: [Near light client](https://nomicon.io/ChainSpec/LightClient)
[^2]: Helios, ethereum light client: https://github.com/a16z/helios
[^3]: Succinct's [plonky2 SDK](https://github.com/succinctlabs/succinctx) and [prover network](https://alpha.succinct.xyz/). 

## Contributions

After laying out some of the functional requirements and some overall understanding, we'd love to invite many light client maintainers to contribute to the project. 
If you have any questions, feel free to raise an issue. We are also working on ironing out the process so that it is as smooth as possible with appropriate guidelines.

'''
'''--- api/NEAR Light Client/bruno.json ---
{
  "version": "1",
  "name": "NEAR Light Client",
  "type": "collection"
}
'''
'''--- bin/client/Cargo.toml ---
[package]
edition.workspace = true
license.workspace = true
name              = "near-light-client"
version.workspace = true

[dependencies]
anyhow.workspace      = true
async-trait.workspace = true
axum.workspace        = true
borsh.workspace       = true
reqwest.workspace     = true
serde.workspace       = true
serde_json.workspace  = true
sled.workspace        = true
thiserror.workspace   = true
tokio.workspace       = true
coerce.workspace            = true
config.workspace            = true
either.workspace            = true
futures.workspace           = true
hex.workspace               = true
itertools.workspace         = true
log.workspace               = true
pretty_env_logger.workspace = true
protobuf.workspace          = true

near-crypto.workspace          = true
near-jsonrpc-client.workspace  = true
near-primitives-core.workspace = true
near-primitives.workspace      = true

protocol = { path = "../../crates/protocol", package = "near-light-client-protocol" }
rpc      = { path = "../../crates/rpc", package = "near-light-client-rpc" }

[dev-dependencies]
rand = "*"

'''
'''--- bin/client/src/client/message.rs ---
use coerce::actor::message::Message;
use near_primitives::types::TransactionOrReceiptId;
use protocol::{experimental::Proof as ExperimentalProof, Proof};

use crate::prelude::*;

pub struct Shutdown;

impl Message for Shutdown {
    type Result = Result<()>;
}

pub struct Head;

impl Message for Head {
    type Result = Option<Header>;
}

pub struct Archive {
    pub epoch: CryptoHash,
}

impl Message for Archive {
    type Result = Option<Header>;
}

#[derive(Debug, Deserialize, Serialize)]
pub struct GetProof(pub TransactionOrReceiptId);

impl Message for GetProof {
    type Result = Option<super::Proof>;
}

#[derive(Debug, Deserialize, Serialize)]
pub struct BatchGetProof(pub Vec<GetProof>);

impl Message for BatchGetProof {
    type Result = Option<ExperimentalProof>;
}

pub struct VerifyProof {
    pub proof: Proof,
}

impl Message for VerifyProof {
    type Result = Result<bool>;
}

'''
'''--- bin/client/src/client/mod.rs ---
use std::{str::FromStr, sync::Arc};

use coerce::actor::{context::ActorContext, message::Handler, Actor};
use message::{Archive, GetProof, Head, Shutdown, VerifyProof};
use near_primitives::views::validator_stake_view::ValidatorStakeView;
use protocol::{Proof, Protocol};
use rpc::LightClientRpc;
use tokio::time;

use self::{message::BatchGetProof, store::Store};
use crate::{
    client::store::{head_key, Collection, Entity},
    config::Config,
    prelude::*,
};

pub mod message;
mod store;

pub struct LightClient {
    config: Config,
    client: rpc::NearRpcClient,
    store: Arc<Store<store::sled::Store>>,
}

#[async_trait]
impl Actor for LightClient {
    async fn started(&mut self, _ctx: &mut ActorContext) {
        self.bootstrap_store()
            .await
            .expect("Failed to bootstrap store");
        // TODO: anonymous ctx.spawn(id, actor)
        let catchup = self.config.catchup;
        let store = self.store.clone();
        let client = self.client.clone();
        tokio::task::spawn(async move { Self::start_syncing(catchup, store, client).await });
    }
}

#[async_trait]
impl Handler<Head> for LightClient {
    async fn handle(
        &mut self,
        _message: Head,
        _ctx: &mut ActorContext,
    ) -> <Head as coerce::actor::message::Message>::Result {
        self.store.head().await.ok()
    }
}

#[async_trait]
impl Handler<Archive> for LightClient {
    async fn handle(
        &mut self,
        message: Archive,
        _ctx: &mut ActorContext,
    ) -> <Archive as coerce::actor::message::Message>::Result {
        self.header(message.epoch).await
    }
}

#[async_trait]
impl Handler<Shutdown> for LightClient {
    async fn handle(
        &mut self,
        _message: Shutdown,
        ctx: &mut ActorContext,
    ) -> <Shutdown as coerce::actor::message::Message>::Result {
        self.store.shutdown().await;
        ctx.stop(None);
        Ok(())
    }
}

#[async_trait]
impl Handler<GetProof> for LightClient {
    async fn handle(
        &mut self,
        message: GetProof,
        _ctx: &mut ActorContext,
    ) -> <GetProof as coerce::actor::message::Message>::Result {
        self.get_proofs(BatchGetProof(vec![message]))
            .await
            .ok()
            .and_then(|proofs| proofs.into_iter().next())
    }
}

#[async_trait]
impl Handler<VerifyProof> for LightClient {
    async fn handle(
        &mut self,
        message: VerifyProof,
        _ctx: &mut ActorContext,
    ) -> <VerifyProof as coerce::actor::message::Message>::Result {
        self.verify_proof(message.proof).await.map_err(|e| {
            log::error!("{:?}", e);
            e
        })
    }
}

#[async_trait]
impl Handler<BatchGetProof> for LightClient {
    async fn handle(
        &mut self,
        message: BatchGetProof,
        _ctx: &mut ActorContext,
    ) -> <BatchGetProof as coerce::actor::message::Message>::Result {
        self.experimental_get_proofs(message).await.ok()
    }
}

impl LightClient {
    pub fn new(config: &Config) -> Result<Self> {
        let client = rpc::NearRpcClient::new(config.network);

        // TODO: store selector in config
        let store = store::sled::init(config)?;

        Ok(Self {
            client,
            config: config.clone(),
            store: Store(store.into()).into(),
        })
    }

    async fn bootstrap_store(&mut self) -> Result<()> {
        let head = self.store.head().await;
        if head.is_err() {
            let sync_from =
                CryptoHash::from_str(&self.config.starting_head).map_err(anyhow::Error::msg)?;

            let starting_head = self
                .client
                .fetch_latest_header(&sync_from)
                .await?
                .ok_or_else(|| anyhow::anyhow!("We need a starting header"))?;

            log::info!("starting head: {:?}", starting_head.inner_lite.height);

            let mut inserts: Vec<(CryptoHash, Entity)> = vec![];

            inserts.push((
                starting_head.inner_lite.epoch_id,
                starting_head
                    .next_bps
                    .ok_or_else(|| anyhow::anyhow!("next_bps should be Some for boostrapped head"))?
                    .into_iter()
                    .map(ValidatorStakeView::into_validator_stake)
                    .collect_vec()
                    .into(),
            ));

            let boostrapped_head = Header {
                prev_block_hash: starting_head.prev_block_hash,
                inner_rest_hash: starting_head.inner_rest_hash,
                inner_lite: starting_head.inner_lite,
            };

            inserts.push((head_key(), boostrapped_head.into()));

            self.store.insert(&inserts).await?;
        }

        Ok(())
    }

    // TODO: dynamically determine if should catchup
    pub async fn start_syncing(
        mut catching_up: bool,
        store: Arc<Store<store::sled::Store>>,
        client: rpc::NearRpcClient,
    ) {
        // TODO: make configurable, currently set to ~block time
        let default_duration = time::Duration::from_secs(2);

        loop {
            let duration = if catching_up {
                time::Duration::from_millis(100)
            } else {
                default_duration
            };
            tokio::select! {
                r = Self::sync(store.clone(), client.clone()) => {
                    tokio::time::sleep(duration).await;
                    match r {
                        Err(e) => {
                            log::error!("Error syncing: {:?}", e);
                            catching_up = false;
                        },
                        Ok(false) if catching_up => {
                            log::debug!("Slowing down sync interval to {:?}", default_duration);
                            catching_up = false;
                        }
                        _ => (),
                    }
                }
            }
        }
    }
    pub async fn sync(
        store: Arc<Store<store::sled::Store>>,
        client: rpc::NearRpcClient,
    ) -> Result<bool> {
        let head = store.head().await?;
        log::debug!("Current head: {:#?}", head);

        let next_header = client
            .fetch_latest_header(
                &CryptoHash::from_str(&format!("{}", head.hash()))
                    .map_err(|e| anyhow!("Failed to parse hash: {:?}", e))?,
            )
            .await?
            .ok_or_else(|| anyhow!("Failed to fetch latest header"))?;
        log::trace!("Got new header: {:#?}", next_header.inner_lite);

        let bps = store
            .get(&Collection::BlockProducers, &head.inner_lite.epoch_id)
            .await
            .and_then(|x| x.bps())?;

        let synced = Protocol::sync(&head, &bps, next_header)?;

        let mut inserts: Vec<(CryptoHash, Entity)> = vec![];

        if let Some((epoch, next_bps)) = synced.next_bps {
            log::debug!("storing next bps[{:?}]", epoch);
            inserts.push((epoch.0, next_bps.into()));
        }

        inserts.push((head.inner_lite.epoch_id, synced.new_head.clone().into()));
        inserts.push((head_key(), synced.new_head.into()));

        store.insert(&inserts).await?;
        Ok(true)
    }

    async fn header(&self, epoch: CryptoHash) -> Option<Header> {
        self.store
            .get(&Collection::Headers, &epoch)
            .await
            .and_then(|e| e.header())
            .ok()
    }

    pub async fn verify_proof(&self, p: Proof) -> Result<bool> {
        anyhow::ensure!(
            self.store
                .contains(&Collection::UsedRoots, p.block_merkle_root())
                .await?,
            "Root {:?} is not known",
            p.block_merkle_root()
        );
        Protocol::inclusion_proof_verify(p)
    }

    pub async fn get_proofs(&self, req: BatchGetProof) -> Result<Vec<Proof>> {
        let req = req.0.into_iter().map(|p| p.0).collect();
        let head = self.store.head().await?;
        let proofs = self.client.batch_fetch_proofs(&head.hash(), req).await;
        let (oks, errs): (Vec<_>, Vec<_>) = proofs.into_values().partition_result();

        if !errs.is_empty() {
            return Err(anyhow::format_err!("Failed to fetch proofs: {:?}", errs));
        }

        self.store
            .insert(&[(head.inner_lite.block_merkle_root, Entity::UsedRoot)])
            .await?;
        Ok(oks
            .into_iter()
            .map(|x| (head.inner_lite.block_merkle_root, x))
            .map(Into::into)
            .collect())
    }

    pub async fn experimental_get_proofs(&self, req: BatchGetProof) -> Result<ExperimentalProof> {
        let req = req.0.into_iter().map(|p| p.0).collect();

        let head = self.store.head().await?;
        let proofs = self.client.batch_fetch_proofs(&head.hash(), req).await;

        let (oks, errs): (Vec<_>, Vec<_>) = proofs.into_values().partition_result();
        if !errs.is_empty() {
            Err(anyhow::format_err!("Failed to fetch proofs: {:?}", errs))
        } else {
            let p = protocol::experimental::Proof::new(head.inner_lite.block_merkle_root, oks);
            self.store
                .insert(&[(head.inner_lite.block_merkle_root, Entity::UsedRoot)])
                .await?;

            Ok(p)
        }
    }
}

#[cfg(test)]
mod tests {

    #[test]
    fn t() {}
}

'''
'''--- bin/client/src/client/store.rs ---
use ::sled::IVec;
use near_primitives::types::validator_stake::ValidatorStake;
use tokio::sync::RwLock;

use super::Header;
use crate::prelude::*;

pub struct Store<S: LightClientStore>(pub RwLock<S>);

impl<S: LightClientStore> Store<S> {
    pub async fn head(&self) -> Result<Header> {
        self.get(&Collection::Headers, &head_key())
            .await
            .and_then(|e| e.header())
    }

    pub async fn insert(&self, entries: &[(CryptoHash, Entity)]) -> Result<()> {
        self.0.write().await.insert(entries)
    }

    pub async fn get(&self, collection: &Collection, k: &CryptoHash) -> Result<Entity> {
        self.0.read().await.get(collection, k)
    }

    pub async fn shutdown(&self) {
        self.0.write().await.shutdown();
    }

    pub async fn contains(&self, collection: &Collection, k: &CryptoHash) -> Result<bool> {
        self.0.read().await.contains(collection, k)
    }
}

#[derive(Debug)]
pub enum Collection {
    BlockProducers,
    Headers,
    UsedRoots,
}

#[derive(Debug, BorshSerialize, BorshDeserialize)]
pub enum Entity {
    BlockProducers(Vec<ValidatorStake>),
    Header(Box<Header>),
    UsedRoot,
}

// Maybe tryinto
impl Entity {
    pub fn bps(self) -> Result<Vec<ValidatorStake>> {
        match self {
            Entity::BlockProducers(stake) => Ok(stake),
            _ => Err(anyhow::format_err!("Not a block producer")),
        }
    }
    pub fn header(self) -> Result<Header> {
        match self {
            Entity::Header(header) => Ok(*header),
            _ => Err(anyhow::format_err!("Not a header")),
        }
    }
}

impl From<Vec<ValidatorStake>> for Entity {
    fn from(stake: Vec<ValidatorStake>) -> Self {
        Self::BlockProducers(stake)
    }
}

impl From<Header> for Entity {
    fn from(header: Header) -> Self {
        Self::Header(Box::new(header))
    }
}

pub trait LightClientStore {
    fn insert(&mut self, entries: &[(CryptoHash, Entity)]) -> Result<()>;
    fn get(&self, collection: &Collection, k: &CryptoHash) -> Result<Entity>;
    fn head(&self) -> Result<Header>;
    fn contains(&self, collection: &Collection, k: &CryptoHash) -> Result<bool>;
    fn shutdown(&mut self);
}

pub trait DatabaseOperations {
    fn raw_insert<K: Into<IVec>, V: Into<IVec>>(
        &mut self,
        inserts: Vec<(Collection, Vec<(K, V)>)>,
    ) -> Result<()>;
    fn raw_get<K: AsRef<[u8]>, T: BorshDeserialize>(
        &self,
        collection: &Collection,
        key: K,
    ) -> Result<T>;
    fn raw_contains<K: AsRef<[u8]>>(&self, collection: &Collection, key: K) -> Result<bool>;
    fn shutdown(&mut self);
}

pub fn head_key() -> CryptoHash {
    CryptoHash::default()
}

pub mod sled {
    use ::sled::{open, transaction::TransactionError, Batch, Db, Transactional, Tree};
    use itertools::Itertools;

    use super::*;

    pub struct Store {
        db: Db,
        block_producers: Tree,
        headers: Tree,
        used_roots: Tree,
    }

    pub(crate) fn init(config: &crate::config::Config) -> Result<Store> {
        log::info!("Opening store at {:?}", config.state_path);
        let db = open(&config.state_path)?;

        log::debug!("Initializing block producers tree");
        let block_producers = db.open_tree("bps")?;

        log::debug!("Initializing headers tree");
        let headers = db.open_tree("archive")?;

        log::debug!("Initializing used_roots tree");
        let used_roots = db.open_tree("used_roots")?;
        used_roots.set_merge_operator(increment_ref);

        Ok(Store {
            db,
            block_producers,
            headers,
            used_roots,
        })
    }

    impl DatabaseOperations for Store {
        fn raw_get<K: AsRef<[u8]>, T: BorshDeserialize>(
            &self,
            collection: &Collection,
            key: K,
        ) -> Result<T> {
            log::debug!("Get {:?} {:?}", collection, key.as_ref());

            match collection {
                Collection::BlockProducers => self.block_producers.get(key),
                Collection::Headers => self.headers.get(key),
                Collection::UsedRoots => self.used_roots.get(key),
            }?
            .ok_or_else(|| anyhow::anyhow!("Key not found"))
            .and_then(|value| T::try_from_slice(&value).map_err(|e| anyhow::anyhow!(e)))
        }

        fn shutdown(&mut self) {
            self.db.flush().unwrap();
        }

        fn raw_insert<K, V>(&mut self, inserts: Vec<(Collection, Vec<(K, V)>)>) -> Result<()>
        where
            K: Into<IVec>,
            V: Into<IVec>,
        {
            let mut used_roots_entries = vec![];
            let batches = inserts
                .into_iter()
                .filter_map(|(collection, entries)| {
                    if let Collection::UsedRoots = collection {
                        used_roots_entries = entries;
                        None
                    } else {
                        let mut b = Batch::default();
                        for (k, v) in entries {
                            b.insert(k, v);
                        }
                        Some((collection, b))
                    }
                })
                .collect_vec();
            (&self.block_producers, &self.headers)
                .transaction(|(bps, headers)| {
                    for (collection, b) in &batches {
                        match collection {
                            Collection::BlockProducers => bps.apply_batch(b)?,
                            Collection::Headers => headers.apply_batch(b)?,
                            Collection::UsedRoots => {}
                        };
                    }
                    Ok(())
                })
                .map_err(|e: TransactionError| anyhow::anyhow!("{:?}", e))?;

            if !used_roots_entries.is_empty() {
                for (k, v) in used_roots_entries {
                    self.used_roots.merge(k.into(), v.into())?;
                }
            }
            Ok(())
        }

        fn raw_contains<K: AsRef<[u8]>>(&self, collection: &Collection, key: K) -> Result<bool> {
            match collection {
                Collection::BlockProducers => self.block_producers.contains_key(key),
                Collection::Headers => self.headers.contains_key(key),
                Collection::UsedRoots => self.used_roots.contains_key(key),
            }
            .map_err(|e| anyhow::anyhow!("Contains: {:?}", e))
        }
    }

    impl LightClientStore for Store {
        fn insert(&mut self, inserts: &[(CryptoHash, Entity)]) -> Result<()> {
            let inserts = inserts
                .iter()
                .map(|(k, v)| {
                    log::debug!("Insert {:?}", k);
                    log::trace!("Insert {:?}", v);
                    borsh::to_vec(k).and_then(|ek| {
                        borsh::to_vec(v).map(|ev| {
                            let collection = match v {
                                Entity::BlockProducers(_) => Collection::BlockProducers,
                                Entity::Header(_) => Collection::Headers,
                                Entity::UsedRoot => Collection::UsedRoots,
                            };
                            (collection, ek, ev)
                        })
                    })
                })
                .fold_ok(vec![], |mut acc, (collection, k, v)| {
                    acc.push((collection, vec![(k, v)]));
                    acc
                })?;
            self.raw_insert(inserts)
        }

        fn get(&self, collection: &Collection, k: &CryptoHash) -> Result<Entity> {
            self.raw_get(collection, borsh::to_vec(k)?)
        }

        fn head(&self) -> Result<Header> {
            let head = self
                .headers
                .get(borsh::to_vec(&head_key())?)?
                .ok_or_else(|| anyhow::anyhow!("Failed to get head, no head in store"))?;
            let h: Entity = borsh::from_slice(&head)?;
            h.header()
        }

        fn shutdown(&mut self) {
            <Self as DatabaseOperations>::shutdown(self);
        }

        fn contains(&self, collection: &Collection, k: &CryptoHash) -> Result<bool> {
            self.raw_contains(collection, borsh::to_vec(k)?)
        }
    }

    fn increment_ref(
        key: &[u8],             // the key being merged
        old_ref: Option<&[u8]>, // the previous value, if one existed
        _merged_bytes: &[u8],   // the new bytes being merged in
    ) -> Option<Vec<u8>> {
        let ref_count = old_ref
            .map(|ov| ov.to_vec())
            .and_then(|ov| u32::try_from_slice(&ov).ok())
            .unwrap_or(0);
        log::debug!("Incrementing ref count for {:?}, {}", key, ref_count);
        borsh::to_vec(&(ref_count + 1)).ok()
    }
    #[cfg(test)]
    mod tests {

        #[test]
        fn test_name() {}
    }
}

'''
'''--- bin/client/src/config.rs ---
use std::{env, path::PathBuf};

use config::{Config as ConfigTrait, ConfigError, Environment, File};
use rpc::Network;

use crate::prelude::*;

#[derive(Debug, Deserialize, Clone)]
pub struct Config {
    #[serde(default = "default_db_path")]
    pub state_path: PathBuf,
    pub starting_head: String,
    pub network: Network,
    #[serde(default = "default_host")]
    pub host: String,
    pub catchup: bool,
}

fn default_db_path() -> PathBuf {
    "state.db".into()
}

fn default_host() -> String {
    "0.0.0.0:3000".into()
}

impl Config {
    pub fn new() -> Result<Self, ConfigError> {
        let run_mode = env::var("NEAR_LIGHT_CLIENT_NETWORK")
            .unwrap_or_else(|_| "testnet".into())
            .to_lowercase();
        log::debug!("Run mode {run_mode}");

        let default_path =
            env::var("NEAR_LIGHT_CLIENT_CONFIG_FILE").unwrap_or_else(|_| "default".to_string());

        let s = ConfigTrait::builder()
            .add_source(File::with_name(&default_path).required(false))
            .add_source(File::with_name(&run_mode).required(false))
            // This file shouldn't be checked in to git
            .add_source(File::with_name("local").required(false))
            .add_source(Environment::with_prefix("NEAR_LIGHT_CLIENT"))
            .build()?;

        let r = s.try_deserialize();

        log::debug!("Config: {:#?}", r);
        r
    }
}

'''
'''--- bin/client/src/controller.rs ---
use std::{net::SocketAddr, str::FromStr};

use axum::{
    body,
    extract::{Path, State},
    http::StatusCode,
    response::{IntoResponse, Response},
    routing::{get, post},
    Router,
};
use coerce::actor::LocalActorRef;
use tokio::task::JoinHandle;

use crate::{client::LightClient, config::Config, prelude::*};

// TODO: replace with jsonrpc
pub(crate) fn init(config: &Config, ctx: LocalActorRef<LightClient>) -> JoinHandle<Result<()>> {
    let controller = Router::new()
        .route("/health", get(health_check))
        .route("/head", get(header::get_head))
        .with_state(ctx.clone())
        .route("/header/:epoch", get(header::get_by_epoch))
        .with_state(ctx.clone())
        .route("/proof", post(proof::post_get_proof))
        .with_state(ctx.clone())
        .route("/proof/verify", post(proof::post_verify_proof))
        .with_state(ctx.clone())
        .route("/proof/experimental", post(proof::post_get_batch_proof))
        .with_state(ctx.clone());

    let host = config.host.clone();
    tokio::spawn(async move {
        let addr = SocketAddr::from_str(&host).map_err(|e| anyhow::anyhow!(e))?;
        axum::Server::bind(&addr)
            .serve(controller.into_make_service())
            .await
            .map_err(|e| {
                log::error!("Failed to start server: {:?}", e);
                anyhow::anyhow!(e)
            })
    })
}

async fn health_check() -> StatusCode {
    StatusCode::OK
}

mod header {
    use super::*;
    use crate::client::message::{Archive, Head};

    #[derive(Debug, Deserialize, Serialize)]
    pub struct Params {
        epoch: CryptoHash,
    }

    pub(super) async fn get_by_epoch(
        State(client): State<LocalActorRef<LightClient>>,
        Path(params): Path<Params>,
    ) -> impl IntoResponse {
        client
            .send(Archive {
                epoch: params.epoch,
            })
            .await
            .map(axum::Json)
            .map_err(|_| internal_server_error())
    }

    pub(super) async fn get_head(
        State(client): State<LocalActorRef<LightClient>>,
    ) -> impl IntoResponse {
        client
            .send(Head)
            .await
            .map(axum::Json)
            .map_err(ErrorMapper)
            .map_err(IntoResponse::into_response)
    }
}

mod proof {
    use axum::Json;
    use protocol::Proof;

    use super::*;
    use crate::client::message::{BatchGetProof, GetProof, VerifyProof};

    pub(super) async fn post_get_proof(
        State(client): State<LocalActorRef<LightClient>>,
        Json(params): Json<GetProof>,
    ) -> impl IntoResponse {
        client
            .send(params)
            .await
            .map(axum::Json)
            .map_err(ErrorMapper)
            .map_err(IntoResponse::into_response)
    }

    pub(super) async fn post_verify_proof(
        State(client): State<LocalActorRef<LightClient>>,
        Json(proof): Json<Proof>,
    ) -> impl IntoResponse {
        client
            .send(VerifyProof { proof })
            .await
            .map_err(|e| anyhow::anyhow!(e))
            .and_then(|x| x)
            .map(axum::Json)
            .map_err(ErrorMapper)
            .map_err(IntoResponse::into_response)
    }

    #[derive(Debug, Serialize)]
    pub struct BatchProofWithErrors {
        proofs: protocol::experimental::Proof,
        errors: Vec<String>,
    }

    pub(super) async fn post_get_batch_proof(
        State(client): State<LocalActorRef<LightClient>>,
        Json(body): Json<BatchGetProof>,
    ) -> impl IntoResponse {
        client
            .send(body)
            .await
            .map_err(|e| anyhow::anyhow!(e))
            .and_then(|x| x.ok_or_else(|| anyhow::anyhow!("Failed to get batch proof")))
            .map_err(ErrorMapper)
            .map_err(IntoResponse::into_response)
            .map(axum::Json)
    }
}

struct ErrorMapper<T>(pub T);
impl<T> IntoResponse for ErrorMapper<T>
where
    T: ToString,
{
    fn into_response(self) -> Response {
        let mut r = Response::new(body::boxed(self.0.to_string()));
        *r.status_mut() = StatusCode::INTERNAL_SERVER_ERROR;
        r
    }
}

fn internal_server_error() -> impl IntoResponse {
    let mut r = Response::new("Error".to_string());
    *r.status_mut() = StatusCode::INTERNAL_SERVER_ERROR;
    r
}

'''
'''--- bin/client/src/main.rs ---
use coerce::actor::{system::ActorSystem, IntoActor};

use crate::client::{message::Shutdown, LightClient};

mod client;
mod config;
mod controller;

pub struct ShutdownMsg;

#[tokio::main]
async fn main() -> anyhow::Result<()> {
    pretty_env_logger::init();

    let config = config::Config::new()?;
    let system = ActorSystem::builder()
        .system_name("near-light-client")
        .build();

    let client_actor = LightClient::new(&config)?
        .into_actor(Some("light-client"), &system)
        .await?;
    let webapi = controller::init(&config, client_actor.clone());

    if tokio::signal::ctrl_c().await.is_ok() {
        log::info!("Shutting down..");
        webapi.abort();
        client_actor.notify(Shutdown)?;
    }

    Ok(())
}

pub mod prelude {
    pub use async_trait::async_trait;
    pub use protocol::prelude::*;
}

'''
'''--- crates/protocol/Cargo.toml ---
[package]
edition.workspace = true
license.workspace = true
name              = "near-light-client-protocol"
version.workspace = true

# Ideally, we should depend on as minimal dependencies as possible
[dependencies]
anyhow.workspace                  = true
borsh.workspace                   = true
either.workspace                  = true
itertools.workspace               = true
log.workspace                     = true
near-crypto.workspace             = true
near-jsonrpc-primitives.workspace = true
near-primitives-core.workspace    = true
near-primitives.workspace         = true
serde.workspace                   = true
thiserror.workspace               = true

# async-trait.workspace          = true
# axum.workspace                 = true
# coerce.workspace               = true
# config.workspace               = true
# near-jsonrpc-client.workspace  = true
# protobuf.workspace             = true
# reqwest.workspace              = true
# sled.workspace                 = true

[dev-dependencies]
hex.workspace               = true
pretty_env_logger.workspace = true
rand                        = "*"
serde_json.workspace        = true
test-utils.workspace        = true

'''
'''--- crates/protocol/src/config.rs ---
// https://github.com/near/nearcore/blob/master/nearcore/src/config.rs#L133C1-L134C1
// TODO: expose this from NP, currently this is a risk that the light client
// could be exploited if the max seats changes without knowing
pub const NUM_BLOCK_PRODUCER_SEATS: usize = 50;

// Used by nearcore to determine the end of the account in the state trie.
pub const ACCOUNT_DATA_SEPARATOR: u8 = b',';

'''
'''--- crates/protocol/src/error.rs ---
use thiserror::Error;

#[derive(Error, Debug, PartialEq, Eq)]
pub enum Error {
    #[error("Block already verified")]
    BlockAlreadyVerified,
    #[error("Block not in current or next epoch")]
    BlockNotCurrentOrNextEpoch,
    #[error("Signature invalid")]
    SignatureInvalid,
    #[error("Not enough approved stake")]
    NotEnoughApprovedStake,
    #[error("Block is in the next epoch but no new set")]
    NextBpsInvalid,
    #[error("Validator not signed")]
    ValidatorNotSigned,
}

'''
'''--- crates/protocol/src/experimental.rs ---
use either::Either;
use itertools::Itertools;
use near_primitives::{
    block_header::BlockHeaderInnerLite,
    merkle::{combine_hash, MerklePathItem},
    views::LightClientBlockLiteView,
};
use near_primitives_core::hash::CryptoHash;
use serde::{Deserialize, Serialize};

use crate::{prelude::*, Protocol};

/// Requires only needed parts of the LightClientBlockLiteView, and pre hashes
/// the inner_lite.
#[derive(Debug, Clone, BorshSerialize, BorshDeserialize, Serialize, Deserialize)]
pub struct LiteHeader {
    inner_lite_hash: CryptoHash,
    inner_rest_hash: CryptoHash,
    prev_block_hash: CryptoHash,
    outcome_root: CryptoHash,
}

impl LiteHeader {
    fn hash(&self) -> CryptoHash {
        combine_hash(
            &combine_hash(&self.inner_lite_hash, &self.inner_rest_hash),
            &self.prev_block_hash,
        )
    }
}

impl From<LightClientBlockLiteView> for LiteHeader {
    fn from(header: LightClientBlockLiteView) -> Self {
        let full_inner: BlockHeaderInnerLite = header.inner_lite.clone().into();
        Self {
            inner_lite_hash: CryptoHash::hash_borsh(full_inner),
            inner_rest_hash: header.inner_rest_hash,
            prev_block_hash: header.prev_block_hash,
            outcome_root: header.inner_lite.outcome_root,
        }
    }
}

/// Reduces the need to hash inner_lite, inner_rest and prev_block_hash
///
/// Useful for extremely expensive environments.
#[derive(Debug, Clone, BorshSerialize, BorshDeserialize)]
pub struct BlindHeader {
    block_hash: CryptoHash,
    outcome_root: CryptoHash,
}

impl From<LiteHeader> for BlindHeader {
    fn from(header: LiteHeader) -> Self {
        Self {
            block_hash: header.hash(),
            outcome_root: header.outcome_root,
        }
    }
}

#[derive(Debug, Clone, BorshSerialize, BorshDeserialize)]
pub enum Header {
    Lite(LiteHeader),
    Blind(BlindHeader),
}

impl Header {
    #[allow(unused)]
    fn hash(&self) -> CryptoHash {
        match self {
            Header::Lite(header) => header.hash(),
            Header::Blind(header) => header.block_hash,
        }
    }
    #[allow(unused)]
    fn outcome_root(&self) -> CryptoHash {
        match self {
            Header::Lite(header) => header.outcome_root,
            Header::Blind(header) => header.outcome_root,
        }
    }
}

#[derive(Debug, Clone, BorshSerialize, BorshDeserialize, Serialize, Deserialize)]
pub struct BlindedProof {
    outcome_proof_block_hash: CryptoHash,
    outcome_hash: CryptoHash,
    outcome_proof: Vec<LookupMerklePathItem>,
    outcome_root_proof: Vec<LookupMerklePathItem>,
    block_proof: Vec<LookupMerklePathItem>,
    // The header for the block that this proof was created from
    header: LiteHeader,
}

#[derive(Debug, Clone, Default, BorshSerialize, BorshDeserialize, Serialize, Deserialize)]
#[serde(transparent)]
struct MerkleCache {
    items: Vec<MerklePathItem>,
}

impl MerkleCache {
    fn cache(&mut self, batch: &mut [BlindedProof]) {
        let duplicates = batch
            .iter()
            .cloned()
            .flat_map(|fp| [fp.outcome_proof, fp.outcome_root_proof, fp.block_proof].concat())
            // TODO: this is super inefficient, we had a nice one without duplicates but
            // Unfortunately duplicates clones the array, so we can't do this zero
            // copy
            .duplicates()
            .collect_vec();

        batch
            .iter_mut()
            .flat_map(|fp| {
                fp.outcome_proof
                    .iter_mut()
                    .chain(fp.outcome_root_proof.iter_mut())
                    .chain(fp.block_proof.iter_mut())
            })
            .for_each(|item| {
                if let Some(i) = duplicates.iter().position(|dup| dup == item) {
                    item.0 = Either::Left(i as u32);
                }
            });
        self.items = duplicates.into_iter().map(|x| x.0.unwrap_right()).collect();
    }

    fn collect<'a>(
        &'a self,
        path: &'a [LookupMerklePathItem],
    ) -> impl Iterator<Item = &'a MerklePathItem> {
        path.iter().map(|x| match &x.0 {
            Either::Left(i) => &self.items[*i as usize],
            Either::Right(x) => x,
        })
    }
}

impl From<BasicProof> for BlindedProof {
    fn from(x: BasicProof) -> Self {
        Self {
            outcome_proof_block_hash: x.outcome_proof.block_hash,
            outcome_hash: CryptoHash::hash_borsh(x.outcome_proof.to_hashes()),
            outcome_proof: x
                .outcome_proof
                .proof
                .into_iter()
                .map(LookupMerklePathItem::from)
                .collect(),
            outcome_root_proof: x
                .outcome_root_proof
                .into_iter()
                .map(LookupMerklePathItem::from)
                .collect(),
            block_proof: x
                .block_proof
                .into_iter()
                .map(LookupMerklePathItem::from)
                .collect(),
            header: LiteHeader::from(x.block_header_lite),
        }
    }
}

#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize)]
#[serde(transparent)]
pub struct LookupMerklePathItem(
    #[serde(with = "either::serde_untagged")] Either<u32, MerklePathItem>,
);

impl From<MerklePathItem> for LookupMerklePathItem {
    fn from(x: MerklePathItem) -> Self {
        Self(Either::Right(x))
    }
}

impl From<u32> for LookupMerklePathItem {
    fn from(x: u32) -> Self {
        Self(Either::Left(x))
    }
}

impl std::hash::Hash for LookupMerklePathItem {
    fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
        state.write(
            match &self.0 {
                Either::Left(t) => CryptoHash::hash_borsh(t),
                Either::Right(u) => CryptoHash::hash_borsh(u),
            }
            .as_bytes(),
        )
    }
}

impl BorshSerialize for LookupMerklePathItem {
    fn serialize<W: std::io::Write>(&self, writer: &mut W) -> std::io::Result<()> {
        match &self.0 {
            Either::Left(_) => BorshSerialize::serialize(&0u8, writer),
            Either::Right(_) => BorshSerialize::serialize(&1u8, writer),
        }?;
        match &self.0 {
            Either::Left(i) => BorshSerialize::serialize(i, writer),
            Either::Right(path) => BorshSerialize::serialize(path, writer),
        }
    }
}

impl BorshDeserialize for LookupMerklePathItem {
    fn deserialize_reader<R: std::io::Read>(reader: &mut R) -> std::io::Result<Self> {
        let kind = u8::deserialize_reader(reader)?;
        if kind == 0 {
            let i = u32::deserialize_reader(reader)?;
            Ok(LookupMerklePathItem::from(i))
        } else if kind == 1 {
            let path = MerklePathItem::deserialize_reader(reader)?;
            Ok(LookupMerklePathItem::from(path))
        } else {
            Err(std::io::Error::new(
                std::io::ErrorKind::InvalidData,
                anyhow::anyhow!("Invalid LookupMerklePathItem kind: {}", kind),
            ))
        }
    }
}

#[derive(Debug, Clone, BorshSerialize, BorshDeserialize, Serialize, Deserialize)]
pub struct Proof {
    /// The block_merkle_root of the header used to create the proof batch
    /// It should be at least the header for the latest transactions proven + 1
    pub head_block_root: CryptoHash,
    batch: Vec<BlindedProof>,
    // common ancestry if there is a common ancestry line in the batch
    // we can save g as costs by only passing this once
    ancestry: Vec<MerklePathItem>,
    // Cache of common paths, indexed by u8
    cache: MerkleCache,
}

impl Proof {
    fn common_ancestry(
        proof1: &[MerklePathItem],
        proof2: &[MerklePathItem],
    ) -> Vec<MerklePathItem> {
        if proof1.is_empty() {
            return proof2.to_vec();
        }
        if proof2.is_empty() {
            return proof1.to_vec();
        }
        let mut common_ancestry = proof1
            .iter()
            .rev()
            .zip(proof2.iter().rev())
            .peekable()
            .peeking_take_while(|(x, y)| x.hash == y.hash && x.direction == y.direction)
            .map(|(x, _y)| x.clone())
            .collect_vec();
        common_ancestry.reverse();
        common_ancestry
    }

    pub fn new(head_block_root: CryptoHash, mut batch: Vec<BasicProof>) -> Self {
        // First decide common ancestry among all batches
        let ancestry = batch
            .iter()
            .fold(vec![], |acc, x| Self::common_ancestry(&acc, &x.block_proof));

        // Filter out ancestors
        batch.iter_mut().for_each(|x| {
            x.block_proof = x
                .block_proof
                .iter()
                .filter(|y| !ancestry.contains(y))
                .cloned()
                .collect_vec()
        });

        let mut batch = batch.into_iter().map(BlindedProof::from).collect_vec();
        let mut cache = MerkleCache::default();
        cache.cache(&mut batch);

        Proof {
            head_block_root,
            batch,
            ancestry,
            cache,
        }
    }
}

pub fn verify_proof(proof: Proof) -> bool {
    // TODO: We should know about the known_sync_block_merkle_root
    //assert!(blinded_headers.contains_key(&body.created_from));

    proof.batch.into_iter().all(|blinded| {
        let block_hash = blinded.header.hash();
        log::debug!("Verifying blinded proof: {:?}", blinded.header.outcome_root);
        let block_hash_matches = block_hash == blinded.outcome_proof_block_hash;

        let outcome_verified = Protocol::verify_outcome(
            &blinded.outcome_hash,
            proof.cache.collect(&blinded.outcome_proof),
            proof.cache.collect(&blinded.outcome_root_proof),
            &blinded.header.outcome_root,
        );

        let block_verified = Protocol::verify_block(
            &proof.head_block_root,
            proof
                .cache
                .collect(&blinded.block_proof)
                .chain(&proof.ancestry),
            &block_hash,
        );

        log::debug!(
            "block_hash_matches: {:?}, outcome_verified: {:?}, block_verified: {:?}",
            block_hash_matches,
            outcome_verified,
            block_verified
        );
        block_hash_matches && outcome_verified && block_verified
    })
}

#[cfg(test)]
pub(crate) mod tests {
    use std::str::FromStr;

    use test_utils::{fixture, logger};

    use super::*;
    use crate::merkle_util::{compute_root_from_path, compute_root_from_path_and_item};

    pub const BLOCK_MERKLE_ROOT: &str = "WWrLWbWHwSmjtTn5oBZPYgRCuCYn6fkYVa4yhPWNK4L";

    #[allow(dead_code)]
    fn write_proof(path: &str, proof: &Proof) {
        std::fs::write(
            path.to_string().replace(".json", ".hex"),
            hex::encode(borsh::to_vec(&proof).unwrap()),
        )
        .unwrap();
        let json = serde_json::to_string_pretty(&proof).unwrap();
        println!("Writing path: {}\n {}", path, json);
        std::fs::write(path, json).unwrap();
    }

    fn proof_fixture(is_new: bool) -> BasicProof {
        let path = if is_new { "new.json" } else { "old.json" };
        fixture(path)
    }

    #[test]
    fn test_blinded_same_block_hash() {
        let proof = proof_fixture(true);
        let full_block_hash = proof.block_header_lite.hash();
        let blinded = LiteHeader::from(proof.block_header_lite);
        assert_eq!(full_block_hash, blinded.hash());
    }

    #[test]
    fn test_blinded_outcome() {
        let proof = proof_fixture(true);
        let outcome_proof_old = proof.outcome_proof.clone();
        let outcome_proof_leaf = CryptoHash::hash_borsh(proof.outcome_proof.to_hashes());
        let blinded = BlindedProof::from(proof);

        let cache = MerkleCache::default();
        let outcome_proof_root =
            compute_root_from_path(cache.collect(&blinded.outcome_proof), blinded.outcome_hash);
        let outcome_root = compute_root_from_path_and_item(
            cache.collect(&blinded.outcome_root_proof),
            outcome_proof_root,
        );
        assert_eq!(outcome_root, blinded.header.outcome_root);
        assert_eq!(
            outcome_proof_root,
            compute_root_from_path(outcome_proof_old.proof.iter(), outcome_proof_leaf)
        )
    }

    #[test]
    fn test_cache() {
        let proof1 = proof_fixture(false);
        let proof2 = proof_fixture(false);

        // Sort the proof items so the order will be the same in  the cache
        let paths = proof2
            .outcome_proof
            .proof
            .iter()
            .chain(&proof2.outcome_root_proof)
            .chain(&proof2.block_proof)
            .cloned()
            .collect_vec();

        let original = vec![proof1, proof2];
        let mut blinded = original.into_iter().map(BlindedProof::from).collect_vec();
        let mut cache = MerkleCache::default();
        cache.cache(&mut blinded);
        // Since the proofs were the same, the cache should contain all of the paths for
        // all of the proofs
        itertools::assert_equal(paths, cache.items);
    }

    #[test]
    fn test_common_ancestry() {
        let proof = proof_fixture(true);
        let cached_nodes = Proof::common_ancestry(&proof.block_proof, &proof.block_proof);
        assert_eq!(cached_nodes, proof.block_proof);
        println!("{:#?}", cached_nodes);
    }

    #[test]
    fn test_create_e2e() {
        let root = CryptoHash::from_str(BLOCK_MERKLE_ROOT).unwrap();

        fn get_proof_len(proof: &BasicProof) -> usize {
            let mut bytes = vec![];
            BorshSerialize::serialize(&proof.block_proof, &mut bytes).unwrap();
            BorshSerialize::serialize(&proof.outcome_proof, &mut bytes).unwrap();
            BorshSerialize::serialize(&proof.block_header_lite, &mut bytes).unwrap();
            BorshSerialize::serialize(&proof.outcome_root_proof, &mut bytes).unwrap();
            bytes.len()
        }
        let proof1 = proof_fixture(true);
        let proof2 = proof_fixture(false);
        let proof_size = get_proof_len(&proof1) + get_proof_len(&proof2);
        println!("{:#?}", proof_size);
        let batch = vec![proof1, proof2];
        let proof = Proof::new(root, batch);
        let new_proof_size = borsh::to_vec(&proof).unwrap().len();
        assert!(new_proof_size < proof_size / 2);
        println!("{:#?}", new_proof_size);

        println!("{}", hex::encode(root));
        assert!(verify_proof(proof));
    }

    // Util for rewriting the original bridge proofs
    fn _rewrite_bridge_proofs(rainbow_prover_fixture_path: &str) {
        let rewritten = [
            (
                "22f00dd154366d758cd3e4fe81c1caed8e0db6227fe4b2b52a8e5a468aa0a723",
                "proof2.json",
            ),
            (
                "0d0776820a9a81481a559c36fd5d69c33718fb7d7fd3be7564a446e043e2cb35",
                "proof3.json",
            ),
            (
                "1f7129496c461c058fb3daf258d89bf7dacb4efad5742351f66098a00bb6fa53",
                "proof4.json",
            ),
            (
                "a9cd8eb4dd92ba5f2fef47d68e1d73ac8c57047959f6f8a2dcc664419e74e4b8",
                "proof5.json",
            ),
            (
                "cc3954a51b7c1a86861df8809f79c2bf839741e3e380e28360b8b3970a5d90bd",
                "proof6.json",
            ),
            (
                "8298c9cd1048df03e9ccefac4b022636a30a2f7e6a8c33cc4104901b92e08dfd",
                "proof7.json",
            ),
        ]
        .iter()
        .map(|(root, path)| {
            (
                CryptoHash(hex::decode(root).unwrap().try_into().unwrap()),
                format!("{}{}", rainbow_prover_fixture_path, path),
            )
        })
        .all(|(block_root, path)| {
            let proof = if path.contains("old") {
                let proof: BasicProof = fixture(&path);
                Proof::new(block_root, vec![proof])
            } else {
                fixture(&path)
            };

            write_proof(&path, &proof);
            verify_proof(proof)
        });
        assert!(rewritten);
    }

    #[test]
    fn batch_proofs() {
        logger();
        let p = fixture("batch.json");
        assert!(verify_proof(p));
    }
}

'''
'''--- crates/protocol/src/lib.rs ---
use config::NUM_BLOCK_PRODUCER_SEATS;
use error::Error;
pub use merkle_util::*;
pub use near_crypto::{ED25519PublicKey, PublicKey, Signature};
pub use near_primitives::{
    block_header::{ApprovalInner, BlockHeaderInnerLite},
    merkle::MerklePathItem,
    types::{validator_stake::ValidatorStake, BlockHeight, EpochId},
    views::{
        validator_stake_view::ValidatorStakeView, BlockHeaderInnerLiteView,
        LightClientBlockLiteView, LightClientBlockView, ValidatorStakeViewV1,
    },
};

use crate::prelude::*;

pub mod config;
pub mod error;
pub mod merkle_util;
pub mod prelude;
// Lightweight batch protocol with lookups for proofs
pub mod experimental;

#[derive(Debug)]
pub struct Synced {
    pub new_head: Header,
    pub next_bps: Option<(EpochId, Vec<ValidatorStake>)>,
}

#[derive(Debug, Serialize, Deserialize)]
#[serde(untagged)]
pub enum Proof {
    Basic {
        head_block_root: CryptoHash,
        proof: Box<BasicProof>,
    },
    Experimental(experimental::Proof),
}

impl From<(CryptoHash, BasicProof)> for Proof {
    fn from((head_block_root, proof): (CryptoHash, BasicProof)) -> Self {
        Self::Basic {
            head_block_root,
            proof: Box::new(proof),
        }
    }
}

impl From<experimental::Proof> for Proof {
    fn from(proof: experimental::Proof) -> Self {
        Self::Experimental(proof)
    }
}

impl Proof {
    pub fn block_merkle_root(&self) -> &CryptoHash {
        match self {
            Self::Basic {
                head_block_root, ..
            } => head_block_root,
            Self::Experimental(proof) => &proof.head_block_root,
        }
    }
}

pub struct Protocol;

impl Protocol {
    pub fn sync(
        head: &Header,
        epoch_bps: &[ValidatorStake],
        next_block: LightClientBlockView,
    ) -> Result<Synced> {
        Self::ensure_not_already_verified(head, &next_block.inner_lite.height)?;
        Self::ensure_epoch_is_current_or_next(head, &next_block.inner_lite.epoch_id)?;
        Self::ensure_if_next_epoch_contains_next_bps(
            head,
            &next_block.inner_lite.epoch_id,
            &next_block.next_bps,
        )?;

        let new_head = Header {
            prev_block_hash: next_block.prev_block_hash,
            inner_rest_hash: next_block.inner_rest_hash,
            inner_lite: next_block.inner_lite.clone(),
        };

        let approval_message = Self::reconstruct_approval_message(&next_block).unwrap();

        let StakeInfo { total, approved } = Self::validate_signatures(
            &next_block.approvals_after_next,
            epoch_bps,
            &approval_message,
        );

        Self::ensure_stake_is_sufficient(&total, &approved)?;

        log::trace!(
            "prev/current head: {}/{}",
            head.inner_lite.height,
            new_head.inner_lite.height
        );

        Ok(Synced {
            new_head,
            next_bps: Self::ensure_next_bps_is_valid(
                &next_block.inner_lite.next_bp_hash,
                next_block.next_bps,
            )?
            .map(|next_bps| next_bps.into_iter().map(Into::into).collect())
            .map(|next_bps| (EpochId(head.inner_lite.next_epoch_id), next_bps)),
        })
        .map(|synced| {
            log::debug!("Synced new head: {:?}", synced.new_head);
            synced
        })
    }
    pub fn inclusion_proof_verify(proof: Proof) -> Result<bool> {
        match proof {
            Proof::Experimental(proof) => Ok(experimental::verify_proof(proof)),
            Proof::Basic {
                head_block_root,
                proof,
            } => {
                let block_hash = proof.block_header_lite.hash();
                let block_hash_matches = block_hash == proof.outcome_proof.block_hash;

                let outcome_hash = CryptoHash::hash_borsh(proof.outcome_proof.to_hashes());

                let outcome_verified = Self::verify_outcome(
                    &outcome_hash,
                    proof.outcome_proof.proof.iter(),
                    proof.outcome_root_proof.iter(),
                    &proof.block_header_lite.inner_lite.outcome_root,
                );

                let block_verified =
                    Self::verify_block(&head_block_root, proof.block_proof.iter(), &block_hash);

                log::debug!(
                    "shard outcome included: {:?}, block included: {:?}",
                    outcome_verified,
                    block_verified
                );
                Ok(block_hash_matches && outcome_verified && block_verified).map(|verified| {
                    log::debug!("Verified proof {:?}", verified);
                    verified
                })
            }
        }
    }

    pub(crate) fn verify_outcome<'a>(
        outcome_hash: &CryptoHash,
        outcome_proof: impl Iterator<Item = &'a MerklePathItem>,
        outcome_root_proof: impl Iterator<Item = &'a MerklePathItem>,
        expected_outcome_root: &CryptoHash,
    ) -> bool {
        let outcome_root = compute_root_from_path(outcome_proof, *outcome_hash);
        #[cfg(test)]
        println!("outcome_root: {:?}", hex::encode(outcome_root));

        let leaf = CryptoHash::hash_borsh(outcome_root);
        #[cfg(test)]
        println!("leaf: {:?}", hex::encode(leaf));

        let outcome_root = compute_root_from_path(outcome_root_proof, leaf);
        #[cfg(test)]
        println!("outcome_root: {:?}", hex::encode(outcome_root));
        log::debug!("outcome_root: {:?}", outcome_root);

        &outcome_root == expected_outcome_root
    }

    pub(crate) fn verify_block<'a>(
        block_merkle_root: &CryptoHash,
        block_proof: impl Iterator<Item = &'a MerklePathItem>,
        block_hash: &CryptoHash,
    ) -> bool {
        verify_hash(*block_merkle_root, block_proof, *block_hash)
    }

    pub fn reconstruct_approval_message(block_view: &LightClientBlockView) -> Option<Vec<u8>> {
        let new_head = Header {
            prev_block_hash: block_view.prev_block_hash,
            inner_rest_hash: block_view.inner_rest_hash,
            inner_lite: block_view.inner_lite.clone(),
        };

        let next_block_hash = combine_hash(&block_view.next_block_inner_hash, &new_head.hash());

        let endorsement = ApprovalInner::Endorsement(next_block_hash);

        let approval_message = {
            let mut temp_vec = Vec::new();
            BorshSerialize::serialize(&endorsement, &mut temp_vec).ok()?;
            //temp_vec.extend_from_slice(&(endorsement.try_to_vec().ok()?[..]));
            temp_vec.extend_from_slice(&((block_view.inner_lite.height + 2).to_le_bytes()[..]));
            println!("temp_vec len: {:?}", temp_vec.len());
            temp_vec
        };

        log::debug!("Next block hash: {}", next_block_hash);
        log::debug!("Approval message: {:?}", approval_message);
        Option::Some(approval_message)
    }

    pub fn ensure_not_already_verified(
        head: &Header,
        block_height: &BlockHeight,
    ) -> Result<(), Error> {
        if block_height <= &head.inner_lite.height {
            Err(Error::BlockAlreadyVerified)
        } else {
            Ok(())
        }
    }

    pub fn ensure_epoch_is_current_or_next(
        head: &Header,
        epoch_id: &CryptoHash,
    ) -> Result<(), Error> {
        if ![head.inner_lite.epoch_id, head.inner_lite.next_epoch_id].contains(epoch_id) {
            log::debug!(
                "Next Block Epoch({:?}) is not in the current({:?}) or next({:?}) epoch",
                epoch_id,
                head.inner_lite.epoch_id,
                head.inner_lite.next_epoch_id
            );
            Err(Error::BlockNotCurrentOrNextEpoch)
        } else {
            Ok(())
        }
    }

    pub fn ensure_if_next_epoch_contains_next_bps(
        head: &Header,
        epoch_id: &CryptoHash,
        next_bps: &Option<Vec<ValidatorStakeView>>,
    ) -> Result<(), Error> {
        if &head.inner_lite.next_epoch_id == epoch_id && next_bps.is_none() {
            log::debug!("Block is in the next epoch but no new set");
            Err(Error::NextBpsInvalid)
        } else {
            Ok(())
        }
    }

    pub fn validate_signatures(
        signatures: &[Option<Box<Signature>>],
        epoch_bps: &[ValidatorStake],
        approval_message: &[u8],
    ) -> StakeInfo {
        signatures
            .iter()
            .zip(epoch_bps.iter())
            .fold((0, 0), |(total_stake, approved_stake), (sig, vs)| {
                let pk = vs.public_key();
                let stake = vs.stake();
                let total_stake = total_stake + stake;

                let approved_stake = match Self::validate_signature(approval_message, sig, pk) {
                    Ok(_) => approved_stake + stake,
                    Err(Error::SignatureInvalid) | Err(Error::ValidatorNotSigned) => approved_stake,
                    Err(_) => approved_stake,
                };

                (total_stake, approved_stake)
            })
            .into()
    }

    pub fn validate_signature(
        msg: &[u8],
        sig: &Option<Box<Signature>>,
        pk: &PublicKey,
    ) -> Result<(), Error> {
        match sig {
            Some(signature) if signature.verify(msg, pk) => {
                log::trace!("{} {:?} pk {} approved", signature, msg, pk);
                Ok(())
            }
            Some(signature) => {
                log::debug!("{} invalid sig {}", pk, signature);
                Err(Error::SignatureInvalid)
            }
            _ => {
                log::trace!("{} signature not approved", pk);
                Err(Error::ValidatorNotSigned)
            }
        }
    }

    pub fn ensure_stake_is_sufficient(
        total_stake: &u128,
        approved_stake: &u128,
    ) -> Result<(), Error> {
        let threshold = total_stake / 3 * 2;

        if approved_stake <= &threshold {
            log::debug!("Not enough stake approved");
            Err(Error::NotEnoughApprovedStake)
        } else {
            Ok(())
        }
    }

    pub fn ensure_next_bps_is_valid(
        expected_hash: &CryptoHash,
        next_bps: Option<Vec<ValidatorStakeView>>,
    ) -> Result<Option<Vec<ValidatorStakeView>>, Error> {
        if let Some(next_bps) = next_bps {
            let next_bps_hash = CryptoHash::hash_borsh(next_bps.clone());

            if &next_bps_hash == expected_hash {
                Ok(Some(next_bps))
            } else {
                log::warn!("Next block producers hash is invalid");
                Err(Error::NextBpsInvalid)
            }
        } else {
            Ok(None)
        }
    }
}

#[derive(Debug, Clone, PartialEq, Eq)]
pub struct StakeInfo {
    pub total: u128,
    pub approved: u128,
}

impl From<(u128, u128)> for StakeInfo {
    fn from((total, approved): (u128, u128)) -> Self {
        Self { total, approved }
    }
}

#[macro_export]
macro_rules! cvec {
	($($x:expr),*) => {
		{
			let mut temp_vec = Vec::new();
			$(
				temp_vec.extend_from_slice(&$x);
			)*
			temp_vec
		}
	};
}

#[cfg(test)]
mod tests {
    use itertools::Itertools;
    use near_jsonrpc_primitives::types::light_client::RpcLightClientExecutionProofResponse;
    use serde_json::{self};
    use test_utils::*;

    use super::*;

    #[test]
    fn test_sync_across_epoch_boundaries() {
        let (mut head, mut next_bps, next_block) = testnet_state();
        println!("head: {:#?}", head.inner_lite);
        let mut next_epoch_id = EpochId(head.inner_lite.next_epoch_id);

        let mut sync_and_update = |next_block: LightClientBlockView| {
            let sync_next = Protocol::sync(&head, &next_bps[..], next_block.clone()).unwrap();
            // Assert we matched the epoch id for the new BPS
            assert_eq!(
                head.inner_lite.next_epoch_id,
                sync_next.next_bps.as_ref().unwrap().0 .0
            );

            println!("new head: {:#?}", sync_next.new_head.inner_lite);

            head = sync_next.new_head;
            next_bps = sync_next.next_bps.unwrap().1;

            // Assert new head is the new block
            assert_eq!(head.inner_lite, next_block.inner_lite);
            // Assert new BPS is from the next block producers because we're
            // in an epoch boundary
            assert_eq!(
                &next_bps,
                &next_block
                    .next_bps
                    .unwrap()
                    .into_iter()
                    .map(Into::into)
                    .collect_vec()
            );
            next_epoch_id.0 = head.inner_lite.next_epoch_id;
        };

        // Do first sync
        sync_and_update(next_block.clone());

        // Get next header, do next sync
        let next_block = test_last();
        sync_and_update(next_block.body);
    }

    #[test]
    fn test_validate_already_verified() {
        let (head, _, _) = test_state();
        assert_eq!(
            Protocol::ensure_not_already_verified(&head, &BlockHeight::MIN),
            Err(Error::BlockAlreadyVerified)
        );
    }

    #[test]
    fn test_validate_bad_epoch() {
        let (head, _, _) = test_state();
        assert_eq!(
            Protocol::ensure_epoch_is_current_or_next(
                &head,
                &CryptoHash::hash_bytes(b"bogus hash")
            ),
            Err(Error::BlockNotCurrentOrNextEpoch)
        );
    }

    #[test]
    fn test_next_epoch_bps_invalid() {
        let (head, _, mut next_block) = test_state();
        next_block.next_bps = None;

        assert_eq!(
            Protocol::ensure_if_next_epoch_contains_next_bps(
                &head,
                &next_block.inner_lite.epoch_id,
                &next_block.next_bps
            ),
            Err(Error::NextBpsInvalid)
        );
    }

    #[test]
    fn test_next_invalid_signature() {
        let (_, next_bps, next_block) = test_state();
        assert_eq!(
            Protocol::validate_signature(
                &b"bogus approval message"[..],
                &next_block.approvals_after_next[0],
                next_bps[0].public_key(),
            ),
            Err(Error::SignatureInvalid)
        );
    }

    #[test]
    fn test_next_invalid_signatures_no_approved_stake() {
        let (_, next_bps, mut next_block) = test_state();

        let approval_message = Protocol::reconstruct_approval_message(&next_block);
        // Nobody signed anything
        next_block.approvals_after_next = next_block
            .approvals_after_next
            .iter()
            .cloned()
            .map(|_| None)
            .collect();

        let StakeInfo { total, approved } = Protocol::validate_signatures(
            &next_block.approvals_after_next,
            &next_bps.clone(),
            &approval_message.unwrap(),
        );

        assert_eq!((total, approved), (440511369730158962073902098744970, 0));
    }

    #[test]
    fn test_next_invalid_signatures_stake_isnt_sufficient() {
        let (_, next_bps, next_block) = test_state();

        let approval_message = Protocol::reconstruct_approval_message(&next_block);

        let StakeInfo { total, approved } = Protocol::validate_signatures(
            &next_block.approvals_after_next,
            &next_bps[..],
            &approval_message.unwrap(),
        );

        assert_eq!(
            (total, approved),
            (
                440511369730158962073902098744970,
                296239000750863364078617965755968
            )
        );

        assert!(Protocol::ensure_stake_is_sufficient(&total, &approved).is_ok());

        let min_approval_amount = (total / 3) * 2;

        assert_eq!(
            Protocol::ensure_stake_is_sufficient(&total, &(min_approval_amount - 1)),
            Err(Error::NotEnoughApprovedStake)
        );
    }

    #[test]
    fn test_next_bps_invalid_hash() {
        let (_, _, next_block) = test_state();

        assert_eq!(
            Protocol::ensure_next_bps_is_valid(
                &CryptoHash::hash_borsh(b"invalid"),
                next_block.next_bps
            ),
            Err(Error::NextBpsInvalid)
        );
    }

    #[test]
    fn test_next_bps() {
        let (_, _, next_block) = test_state();

        assert_eq!(
            Protocol::ensure_next_bps_is_valid(
                &next_block.inner_lite.next_bp_hash,
                next_block.next_bps.clone()
            )
            .unwrap(),
            next_block.next_bps
        );
    }

    #[test]
    fn test_next_bps_noop_on_empty() {
        let (_, _, next_block) = test_state();
        assert_eq!(
            Protocol::ensure_next_bps_is_valid(&next_block.inner_lite.next_bp_hash, None).unwrap(),
            None
        );
    }

    #[test]
    fn test_outcome_root() {
        let req = r#"{"outcome_proof":{"proof":[],"block_hash":"5CY72FinjVV2Hd5zRikYYMaKh67pftXJsw8vwRXAUAQF","id":"9UhBumQ3eEmPH5ALc3NwiDCQfDrFakteRD7rHE9CfZ32","outcome":{"logs":[],"receipt_ids":["2mrt6jXKwWzkGrhucAtSc8R3mjrhkwCjnqVckPdCMEDo"],"gas_burnt":2434069818500,"tokens_burnt":"243406981850000000000","executor_id":"datayalla.testnet","status":{"SuccessReceiptId":"2mrt6jXKwWzkGrhucAtSc8R3mjrhkwCjnqVckPdCMEDo"},"metadata":{"version":1,"gas_profile":null}}},"outcome_root_proof":[{"hash":"9f7YjLvzvSspJMMJ3DDTrFaEyPQ5qFqQDNoWzAbSTjTy","direction":"Right"},{"hash":"67ZxFmzWXbWJSyi7Wp9FTSbbJx2nMr7wSuW3EP1cJm4K","direction":"Left"}],"block_header_lite":{"prev_block_hash":"AEnTyGRrk2roQkYSWoqYhzkbp5SWWJtCd71ZYyj1P26i","inner_rest_hash":"G25j8jSWRyrXV317cPC3qYA4SyJWXsBfErjhBYQkxw5A","inner_lite":{"height":134481525,"epoch_id":"4tBzDozzGED3QiCRURfViVuyJy5ikaN9dVH7m2MYkTyw","next_epoch_id":"9gYJSiT3TQbKbwui5bdbzBA9PCMSSfiffWhBdMtcasm2","prev_state_root":"EwkRecSP8GRvaxL7ynCEoHhsL1ksU6FsHVLCevcccF5q","outcome_root":"8Eu5qpDUMpW5nbmTrTKmDH2VYqFEHTKPETSTpPoyGoGc","timestamp":1691615068679535000,"timestamp_nanosec":"1691615068679535094","next_bp_hash":"8LCFsP6LeueT4X3PEni9CMvH7maDYpBtfApWZdXmagss","block_merkle_root":"583vb6csYnczHyt5z6Msm4LzzGkceTZHdvXjC8vcWeGK"}},"block_proof":[{"hash":"AEnTyGRrk2roQkYSWoqYhzkbp5SWWJtCd71ZYyj1P26i","direction":"Left"},{"hash":"HgZaHXpb5zs4rxUQTeW69XBNLBJoo4sz2YEDh7aFnMpC","direction":"Left"},{"hash":"EYNXYsnESQkXo7B27a9xu6YgbDSyynNcByW5Q2SqAaKH","direction":"Right"},{"hash":"AbKbsD7snoSnmzAtwNqXLBT5sm7bZr48GCCLSdksFuzi","direction":"Left"},{"hash":"7KKmS7n3MtCfv7UqciidJ24Abqsk8m85jVQTh94KTjYS","direction":"Left"},{"hash":"5nKA1HCZMJbdCccZ16abZGEng4sMoZhKez74rcCFjnhL","direction":"Left"},{"hash":"BupagAycSLD7v42ksgMKJFiuCzCdZ6ksrGLwukw7Vfe3","direction":"Right"},{"hash":"D6v37P4kcVJh8N9bV417eqJoyMeQbuZ743oNsbKxsU7z","direction":"Right"},{"hash":"8sWxxbe1rdquP5VdYfQbw1UvtcXDRansJYJV5ySzyow4","direction":"Right"},{"hash":"CmKVKWRqEqi4UaeKKYXpPSesYqdQYwHQM3E4xLKEUAj8","direction":"Left"},{"hash":"3TvjFzVyPBvPpph5zL6VCASLCxdNeiKV6foPwUpAGqRv","direction":"Left"},{"hash":"AnzSG9f91ePS6L6ii3eAkocp4iKjp6wjzSwWsDYWLnMX","direction":"Right"},{"hash":"FYVJDL4T6c87An3pdeBvntB68NzpcPtpvLP6ifjxxNkr","direction":"Left"},{"hash":"2YMF6KE8XTz7Axj3uyAoFbZisWej9Xo8mxgVtauWCZaV","direction":"Left"},{"hash":"4BHtLcxqNfWSneBdW76qsd8om8Gjg58Qw5BX8PHz93hf","direction":"Left"},{"hash":"7G3QUT7NQSHyXNQyzm8dsaYrFk5LGhYaG7aVafKAekyG","direction":"Left"},{"hash":"3XaMNnvnX69gGqBJX43Na1bSTJ4VUe7z6h5ZYJsaSZZR","direction":"Left"},{"hash":"FKu7GtfviPioyAGXGZLBVTJeG7KY5BxGwuL447oAZxiL","direction":"Right"},{"hash":"BePd7DPKUQnGtnSds5fMJGBUwHGxSNBpaNLwceJGUcJX","direction":"Left"},{"hash":"2BVKWMd9pXZTEyE9D3KL52hAWAyMrXj1NqutamyurrY1","direction":"Left"},{"hash":"EWavHKhwQiT8ApnXvybvc9bFY6aJYJWqBhcrZpubKXtA","direction":"Left"},{"hash":"83Fsd3sdx5tsJkb6maBE1yViKiqbWCCNfJ4XZRsKnRZD","direction":"Left"},{"hash":"AaT9jQmUvVpgDHdFkLR2XctaUVdTti49enmtbT5hsoyL","direction":"Left"}]}"#;
        let p: RpcLightClientExecutionProofResponse = serde_json::from_str(req).unwrap();

        let outcome_hash = CryptoHash::hash_borsh(p.outcome_proof.to_hashes());

        let root_matches = Protocol::verify_outcome(
            &outcome_hash,
            p.outcome_proof.proof.iter(),
            p.outcome_root_proof.iter(),
            &p.block_header_lite.inner_lite.outcome_root,
        );
        assert!(root_matches);
    }
}

'''
'''--- crates/protocol/src/merkle_util.rs ---
pub use near_primitives::merkle::{combine_hash, Direction, MerklePath, MerklePathItem};
use near_primitives_core::types::MerkleHash;

use crate::prelude::*;

pub fn verify_hash<'a>(
    root: MerkleHash,
    path: impl Iterator<Item = &'a MerklePathItem>,
    item_hash: MerkleHash,
) -> bool {
    compute_root_from_path(path, item_hash) == root
}

pub fn compute_root_from_path<'a>(
    path: impl Iterator<Item = &'a MerklePathItem>,
    item_hash: MerkleHash,
) -> MerkleHash {
    let mut hash_so_far = item_hash;
    for uncle in path {
        match uncle.direction {
            Direction::Left => {
                hash_so_far = combine_hash(&uncle.hash, &hash_so_far);
            }
            Direction::Right => {
                hash_so_far = combine_hash(&hash_so_far, &uncle.hash);
            }
        }
    }
    hash_so_far
}

pub fn compute_root_from_path_and_item<'a, T: BorshSerialize>(
    path: impl Iterator<Item = &'a MerklePathItem>,
    item: T,
) -> MerkleHash {
    compute_root_from_path(path, CryptoHash::hash_borsh(item))
}

'''
'''--- crates/protocol/src/prelude.rs ---
pub use anyhow::{anyhow, Result};
pub use itertools::{izip, Itertools};
pub use log::{debug, error, info, trace, warn};
pub use near_primitives::types::AccountId;
pub use near_primitives_core::{
    borsh::{self, BorshDeserialize, BorshSerialize},
    hash::CryptoHash,
};
pub use serde::{Deserialize, Serialize};

pub type Header = near_primitives::views::LightClientBlockLiteView;
pub type BasicProof =
    near_jsonrpc_primitives::types::light_client::RpcLightClientExecutionProofResponse;
pub type ExperimentalProof = crate::experimental::Proof;

'''
'''--- crates/rpc/Cargo.toml ---
[package]
edition.workspace = true
license.workspace = true
name              = "near-light-client-rpc"
version.workspace = true

[dependencies]
anyhow.workspace                  = true
async-trait.workspace             = true
borsh.workspace                   = true
either.workspace                  = true
futures.workspace                 = true
itertools.workspace               = true
log.workspace                     = true
near-crypto.workspace             = true
near-jsonrpc-client.workspace     = true
near-jsonrpc-primitives.workspace = true
near-primitives-core.workspace    = true
near-primitives.workspace         = true
serde.workspace                   = true
thiserror.workspace               = true

# async-trait.workspace          = true
# axum.workspace                 = true
# coerce.workspace               = true
# config.workspace               = true
# near-jsonrpc-client.workspace  = true
# protobuf.workspace             = true
# reqwest.workspace              = true
# sled.workspace                 = true

[dev-dependencies]
hex.workspace               = true
pretty_env_logger.workspace = true
rand                        = "*"
serde_json.workspace        = true
tokio.workspace             = true

'''
'''--- crates/rpc/src/lib.rs ---
use std::{
    collections::HashMap,
    fmt::{Display, Formatter},
};

use async_trait::async_trait;
use futures::TryFutureExt;
use near_jsonrpc_client::{
    methods::{self, light_client_proof::RpcLightClientExecutionProofResponse},
    JsonRpcClient,
};
use near_primitives::{
    block_header::BlockHeader,
    views::{validator_stake_view::ValidatorStakeView, LightClientBlockView},
};

use crate::prelude::*;

pub mod prelude;

#[derive(Debug, Clone, Copy, Serialize, Deserialize, Default)]
pub enum Network {
    Mainnet,
    #[default]
    Testnet,
    Localnet,
    Statelessnet,
}

impl Network {
    pub fn to_endpoint(&self) -> &str {
        const MAINNET_RPC_ENDPOINT: &str = "https://rpc.mainnet.near.org";
        const TESTNET_RPC_ENDPOINT: &str = "https://rpc.testnet.near.org";
        match self {
            Self::Mainnet => MAINNET_RPC_ENDPOINT,
            Self::Testnet => TESTNET_RPC_ENDPOINT,
            Self::Statelessnet => "https://rpc.statelessnet.near.org",
            _ => "http://`localhost:3030",
        }
    }
    pub fn archive_endpoint(&self) -> &str {
        const MAINNET_RPC_ARCHIVE_ENDPOINT: &str = "https://archival-rpc.mainnet.near.org";
        const TESTNET_RPC_ARCHIVE_ENDPOINT: &str = "https://archival-rpc.testnet.near.org";
        match self {
            Self::Mainnet => MAINNET_RPC_ARCHIVE_ENDPOINT,
            Self::Testnet => TESTNET_RPC_ARCHIVE_ENDPOINT,
            Self::Statelessnet => "https://archival-rpc.statelessnet.near.org",
            _ => "http://`localhost:3030",
        }
    }
}

impl From<usize> for Network {
    fn from(n: usize) -> Self {
        match n {
            0 => Self::Mainnet,
            1 => Self::Testnet,
            48 => Self::Statelessnet,
            _ => Self::Localnet,
        }
    }
}

impl Display for Network {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let s = match self {
            Self::Mainnet => "mainnet",
            Self::Testnet => "testnet",
            Self::Statelessnet => "statelessnet",
            _ => "localnet",
        };
        write!(f, "{}", s)
    }
}

#[derive(Clone)]
pub struct NearRpcClient {
    client: JsonRpcClient,
    archive: JsonRpcClient,
}

impl std::fmt::Debug for NearRpcClient {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("NearRpcClient").finish()
    }
}

impl NearRpcClient {
    pub fn new(network: Network) -> Self {
        let client = JsonRpcClient::connect(network.to_endpoint());
        let archive = JsonRpcClient::connect(network.archive_endpoint());

        NearRpcClient { client, archive }
    }
    pub async fn batch_fetch_proofs(
        &self,
        last_verified_hash: &CryptoHash,
        reqs: Vec<GetProof>,
    ) -> HashMap<CryptoHash, Result<BasicProof, anyhow::Error>> {
        let mut futs = vec![];
        for req in reqs {
            futs.push(Box::pin(async {
                (
                    match req {
                        near_primitives::types::TransactionOrReceiptId::Transaction {
                            transaction_hash,
                            ..
                        } => transaction_hash,
                        near_primitives::types::TransactionOrReceiptId::Receipt {
                            receipt_id,
                            ..
                        } => receipt_id,
                    },
                    self.fetch_light_client_proof(req, *last_verified_hash)
                        .await,
                )
            }));
        }

        let proofs: Vec<(CryptoHash, Result<BasicProof>)> = futures::future::join_all(futs).await;
        proofs.into_iter().fold(HashMap::new(), |mut acc, (r, p)| {
            acc.insert(r, p);
            acc
        })
    }
}

#[async_trait]
pub trait LightClientRpc {
    async fn fetch_latest_header(
        &self,
        latest_verified: &CryptoHash,
    ) -> Result<Option<LightClientBlockView>>;
    async fn fetch_light_client_proof(
        &self,
        req: GetProof,
        latest_verified: CryptoHash,
    ) -> Result<RpcLightClientExecutionProofResponse>;
    async fn fetch_epoch_bps(&self, epoch_id: &CryptoHash) -> Result<Vec<ValidatorStakeView>>;
    async fn fetch_header(&self, hash: &CryptoHash) -> Result<Header>;
}

#[async_trait]
impl LightClientRpc for NearRpcClient {
    async fn fetch_header(&self, hash: &CryptoHash) -> Result<Header> {
        let req = methods::block::RpcBlockRequest {
            block_reference: near_primitives::types::BlockReference::BlockId(
                near_primitives::types::BlockId::Hash(*hash),
            ),
        };
        self.client
            .call(&req)
            .or_else(|e| {
                trace!("Error hitting main rpc, falling back to archive: {:?}", e);
                self.archive.call(&req)
            })
            .await
            .map_err(|e| anyhow!(e))
            .map(|x| x.header)
            .map(BlockHeader::from)
            .map(Into::into)
    }
    async fn fetch_latest_header(
        &self,
        latest_verified: &CryptoHash,
    ) -> Result<Option<LightClientBlockView>> {
        let req = methods::next_light_client_block::RpcLightClientNextBlockRequest {
            last_block_hash: *latest_verified,
        };
        log::debug!("requesting next block: {:?}", req);
        self.client
            .call(&req)
            .or_else(|e| {
                trace!("Error hitting main rpc, falling back to archive: {:?}", e);
                self.archive.call(&req)
            })
            .await
            .map_err(|e| anyhow::format_err!("{:?}", e))
    }

    async fn fetch_light_client_proof(
        &self,
        req: GetProof,
        latest_verified: CryptoHash,
    ) -> Result<RpcLightClientExecutionProofResponse> {
        let req = methods::light_client_proof::RpcLightClientExecutionProofRequest {
            id: req,
            light_client_head: latest_verified,
        };
        log::debug!("requesting proof: {:?}", req);
        self.client
            .call(&req)
            .or_else(|e| {
                trace!("Error hitting main rpc, falling back to archive: {:?}", e);
                self.archive.call(&req)
            })
            .await
            .map_err(|e| anyhow::format_err!("{:?}:{}", req.id, e))
    }

    // It's cleaner to get epoch bps based on epoch id
    async fn fetch_epoch_bps(&self, epoch_id: &CryptoHash) -> Result<Vec<ValidatorStakeView>> {
        let req = methods::next_light_client_block::RpcLightClientNextBlockRequest {
            last_block_hash: *epoch_id,
        };
        log::debug!("requesting validators: {:?}", req);
        self.client
            .call(&req)
            .or_else(|e| {
                trace!("Error hitting main rpc, falling back to archive: {:?}", e);
                self.archive.call(&req)
            })
            .await
            .map_err(|e| anyhow::format_err!("{:?}", e))
            .and_then(|x| x.ok_or_else(|| anyhow::format_err!("no block found for {:?}", epoch_id)))
            .and_then(|x| {
                x.next_bps
                    .ok_or_else(|| anyhow::format_err!("no BPS found for {:?}", epoch_id))
            })
            .map_err(|e| anyhow::format_err!("{:?}:{}", epoch_id, e))
    }
}

#[cfg(test)]
mod tests {
    use std::str::FromStr;

    use near_primitives::{
        types::{BlockId, BlockReference, TransactionOrReceiptId},
        views::{BlockView, ChunkView},
    };

    use super::*;

    #[allow(dead_code)]
    async fn fetch_chunk(c: &NearRpcClient, chunk_id: &CryptoHash) -> Result<ChunkView> {
        println!("fetching chunk: {:?}", chunk_id);
        let req = methods::chunk::RpcChunkRequest {
            chunk_reference: near_jsonrpc_primitives::types::chunks::ChunkReference::ChunkHash {
                chunk_id: *chunk_id,
            },
        };
        c.client
            .call(&req)
            .or_else(|e| {
                trace!("Error hitting main rpc, falling back to archive: {:?}", e);
                c.archive.call(&req)
            })
            .await
            .map_err(|e| anyhow::format_err!("{:?}", e))
    }

    #[allow(dead_code)]
    async fn fetch_block(c: &NearRpcClient, block_reference: BlockReference) -> Result<BlockView> {
        println!("fetching block: {:?}", block_reference);
        let req = methods::block::RpcBlockRequest { block_reference };
        c.client
            .call(&req)
            .or_else(|e| {
                trace!("Error hitting main rpc, falling back to archive: {:?}", e);
                c.archive.call(&req)
            })
            .await
            .map_err(|e| anyhow::format_err!("{:?}", e))
    }

    #[allow(dead_code)]
    async fn fetch_ids(client: &NearRpcClient, block: &BlockView) -> Vec<TransactionOrReceiptId> {
        let futs = block
            .chunks
            .iter()
            .map(|c| fetch_chunk(client, &c.chunk_hash).map(|x| x.unwrap()))
            .map(Box::pin)
            .collect_vec();
        let chunks = futures::future::join_all(futs).await;

        let receipts = chunks
            .iter()
            .flat_map(|c| c.receipts.clone())
            .map(|r| TransactionOrReceiptId::Receipt {
                receipt_id: r.receipt_id,
                receiver_id: r.receiver_id,
            })
            .collect_vec();
        let txs = chunks
            .iter()
            .flat_map(|c| c.transactions.clone())
            .map(|t| TransactionOrReceiptId::Transaction {
                transaction_hash: t.hash,
                sender_id: t.signer_id,
            })
            .collect_vec();

        [receipts, txs].concat()
    }

    // #[tokio::test]
    // this is committed in the repo, only needed for gathering data
    #[allow(dead_code)]
    async fn test_get_ids() {
        let client = NearRpcClient::new(Network::Testnet);

        let first_block = fetch_block(
            &client,
            BlockReference::BlockId(BlockId::Hash(
                CryptoHash::from_str("6taaeb6h2uJcuUvvmwXpYgagYvyHsFanWhm2ziGGHCff").unwrap(),
            )),
        )
        .await
        .unwrap()
        .header;

        let mut ids = vec![];

        let ids_to_fetch = 1024;

        let mut block = first_block.prev_hash;

        while ids.len() < ids_to_fetch {
            let next_block = fetch_block(&client, BlockReference::BlockId(BlockId::Hash(block)))
                .await
                .unwrap();
            ids.extend(fetch_ids(&client, &next_block).await);
            block = next_block.header.prev_hash;
        }

        std::fs::write("ids.json", serde_json::to_string(&ids).unwrap()).unwrap();
    }
}

'''
'''--- crates/rpc/src/prelude.rs ---
pub use anyhow::{anyhow, Result};
pub use futures::{FutureExt, TryFutureExt};
pub use itertools::Itertools;
pub use log::{debug, error, info, trace, warn};
pub use near_primitives::types::AccountId;
use near_primitives::types::TransactionOrReceiptId;
pub use near_primitives_core::{
    borsh::{self, BorshDeserialize, BorshSerialize},
    hash::CryptoHash,
};
pub use serde::{Deserialize, Serialize};

pub type Header = near_primitives::views::LightClientBlockLiteView;
pub type BasicProof =
    near_jsonrpc_primitives::types::light_client::RpcLightClientExecutionProofResponse;
pub type GetProof = TransactionOrReceiptId;

'''
'''--- crates/test-utils/Cargo.toml ---
[package]
edition.workspace = true
license.workspace = true
name              = "test-utils"
version.workspace = true

[dependencies]
anyhow.workspace                     = true
borsh.workspace                      = true
derive_more.workspace                = true
either.workspace                     = true
itertools.workspace                  = true
log.workspace                        = true
near-crypto.workspace                = true
near-jsonrpc-primitives.workspace    = true
near-light-client-protocol.workspace = true
near-primitives-core.workspace       = true
near-primitives.workspace            = true
pretty_assertions.workspace          = true
serde.workspace                      = true
thiserror.workspace                  = true
# async-trait.workspace          = true
# near-jsonrpc-client.workspace  = true
# protobuf.workspace             = true
# reqwest.workspace              = true
# sled.workspace                 = true

hex.workspace               = true
pretty_env_logger.workspace = true
rand                        = "*"
serde_json.workspace        = true

'''
'''--- crates/test-utils/src/lib.rs ---
use std::path::{Path, PathBuf};

use derive_more::Into;
use log::LevelFilter;
use near_light_client_protocol::{prelude::Header, LightClientBlockView, ValidatorStake};
pub use near_primitives::hash::CryptoHash;
pub use pretty_assertions::assert_eq as pas_eq;
pub use serde::de::DeserializeOwned;
use serde::{Deserialize, Serialize};

#[derive(Debug, Clone, Serialize, Deserialize, Into)]
pub struct LightClientFixture<T> {
    pub last_block_hash: CryptoHash,
    pub body: T,
}

pub fn workspace_dir() -> PathBuf {
    let output = std::process::Command::new(env!("CARGO"))
        .arg("locate-project")
        .arg("--workspace")
        .arg("--message-format=plain")
        .output()
        .unwrap()
        .stdout;
    let cargo_path = Path::new(std::str::from_utf8(&output).unwrap().trim());
    cargo_path.parent().unwrap().to_path_buf()
}

pub fn fixture<T: DeserializeOwned>(file: &str) -> T {
    serde_json::from_reader(
        std::fs::File::open(format!("{}/fixtures/{}", workspace_dir().display(), file)).unwrap(),
    )
    .unwrap()
}

pub fn lc<T: DeserializeOwned>(file: &str) -> LightClientFixture<T> {
    fixture(file)
}

pub fn main_last() -> LightClientFixture<LightClientBlockView> {
    lc("main_2.json")
}

pub fn main_next() -> LightClientFixture<LightClientBlockView> {
    lc("main_1.json")
}

pub fn main_first() -> LightClientFixture<LightClientBlockView> {
    lc("main_0.json")
}

pub fn test_last() -> LightClientFixture<LightClientBlockView> {
    lc("test_2.json")
}

pub fn test_next() -> LightClientFixture<LightClientBlockView> {
    lc("test_1.json")
}

pub fn test_first() -> LightClientFixture<LightClientBlockView> {
    lc("test_0.json")
}

pub fn view_to_lite_view(h: LightClientBlockView) -> Header {
    Header {
        prev_block_hash: h.prev_block_hash,
        inner_rest_hash: h.inner_rest_hash,
        inner_lite: h.inner_lite,
    }
}

pub fn logger() {
    let _ = pretty_env_logger::formatted_builder()
        .parse_default_env()
        .filter_module("hyper", LevelFilter::Off)
        .filter_module("reqwest", LevelFilter::Off)
        .filter_module("near_jsonrpc_client", LevelFilter::Off)
        .try_init();
}

pub fn mainnet_state() -> (Header, Vec<ValidatorStake>, LightClientBlockView) {
    logger();
    let first = main_first().body;
    let head = view_to_lite_view(first.clone());
    let bps = first
        .next_bps
        .unwrap()
        .into_iter()
        .map(Into::into)
        .collect();
    let next = main_next();

    (head, bps, next.body)
}

pub fn testnet_state() -> (Header, Vec<ValidatorStake>, LightClientBlockView) {
    logger();
    let first = test_first().body;
    let head = view_to_lite_view(first.clone());
    let bps = first
        .next_bps
        .unwrap()
        .into_iter()
        .map(Into::into)
        .collect();
    let next = test_next();

    (head, bps, next.body)
}

pub fn test_state() -> (Header, Vec<ValidatorStake>, LightClientBlockView) {
    mainnet_state()
}

pub fn to_header(bv: LightClientBlockView) -> Header {
    Header {
        prev_block_hash: bv.prev_block_hash,
        inner_rest_hash: bv.inner_rest_hash,
        inner_lite: bv.inner_lite,
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_workspace_dir() {
        println!("{:?}", workspace_dir());
    }
}

'''
'''--- default.toml ---
catchup       = false
network       = "Testnet"
starting_head = "4zwZQzjQDpimeLK3tX39nzok6UjDU9edS57EFhkAa4Sk"
state_path    = "state.db"

'''
'''--- docs/assets/near-logo.svg ---
<?xml version="1.0" encoding="UTF-8"?>
<svg id="Layer_1" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1656 567">
  <g>
    <path d="m703.42,157.72c-26.61,0-45.96,6.29-62.4,20.8l-29.03,25.15c-2.42,1.94-7.26,3.39-10.64.48-3.39-2.9-3.87-6.77-.97-10.64l15.48-23.22c2.42-3.39.49-7.74-3.87-7.74h-37.25c-4.35,0-7.74,3.39-7.74,7.74v226.4c0,4.35,3.39,7.74,7.74,7.74h38.7c4.35,0,7.74-3.39,7.74-7.74v-127.71c0-58.53,48.86-67.72,67.24-67.72,39.18,0,53.21,28.06,53.21,49.34v146.09c0,4.35,3.39,7.74,7.74,7.74h38.7c4.35,0,7.74-3.39,7.74-7.74v-150.93c0-54.18-35.32-88.04-92.4-88.04Z"/>
    <path d="m953.5,156.75c-74.98,0-122.87,45.96-122.87,108.36v34.35c0,65.79,47.89,110.78,122.87,110.78,66.27,0,112.71-34.35,117.55-80.79.49-4.84-2.9-8.22-7.74-8.22h-37.73c-3.39,0-6.29,1.94-7.26,5.32-4.84,15.48-27.57,38.7-64.82,38.7s-72.08-27.09-71.6-65.79l.49-43.05c.48-32.41,34.35-54.66,71.11-54.66,33.38,0,65.79,18.87,69.17,49.83h0c.28,3.58-2.18,6.81-5.71,7.49l-108.46,21.05c-4.35.97-7.74,4.84-7.74,9.67v.48c0,4.35,4.35,8.22,10.64,8.22h155.77c4.28,0,7.74-3.47,7.74-7.74v-30.47c0-57.56-49.83-103.52-121.42-103.52Z"/>
    <path d="m1223.42,156.75c-60.47,0-112.71,35.31-112.71,81.75,0,3.87,3.39,6.77,7.74,6.77h39.18c3.87,0,6.77-2.9,7.26-6.77,3.87-21.28,29.51-36.76,57.08-36.76,32.89,0,55.15,20.32,55.15,55.15v42.09c0,43.05-31.93,64.82-71.6,64.82-30.96,0-48.86-11.61-48.86-30.48,0-16.45,8.71-30.48,44.5-38.7l51.76-14.03c5.32-1.45,7.26-5.81,6.29-10.64-.48-3.87-4.83-5.81-8.71-5.81h-53.69c-45.47,0-91.43,29.02-91.43,71.59v6.77c0,43.54,41.12,66.27,88.04,66.27,29.99,0,55.63-11.61,71.59-25.15l23.71-20.32c3.87-3.39,7.74-3.39,11.12,0,2.9,2.9,1.93,7.26-.49,10.64l-14.51,22.74c-2.42,3.39-.49,7.74,3.87,7.74h34.83c4.35,0,7.74-3.39,7.74-7.74v-146.58c0-56.11-40.15-93.36-107.88-93.36Z"/>
    <path d="m1540.26,162.56h-54.18c-18.86,0-37.25,11.61-50.31,22.74l-21.28,18.38c-2.42,1.94-6.78,3.39-9.68.97-3.39-2.42-4.84-7.26-1.93-11.13l15.48-23.22c2.42-3.39.49-7.74-3.87-7.74h-36.28c-4.35,0-7.74,3.39-7.74,7.74v226.4c0,4.35,3.39,7.74,7.74,7.74h39.67c4.35,0,7.74-3.39,7.74-7.74v-116.1c0-49.83,20.32-72.08,64.34-72.08h50.31c4.35,0,7.74-3.39,7.74-7.74v-30.48c0-4.35-3.39-7.74-7.74-7.74Z"/>
  </g>
  <path d="m421.61,108c-13,0-25.07,6.74-31.88,17.82l-73.37,108.93c-2.39,3.59-1.42,8.43,2.17,10.82,2.91,1.94,6.76,1.7,9.41-.58l72.22-62.64c1.2-1.08,3.05-.97,4.13.23.49.55.75,1.26.75,1.99v196.12c0,1.62-1.31,2.92-2.93,2.92-.87,0-1.69-.38-2.24-1.05L181.56,121.24c-7.11-8.39-17.55-13.23-28.54-13.24h-7.63c-20.65,0-37.39,16.74-37.39,37.39v276.22c0,20.65,16.74,37.39,37.39,37.39,13,0,25.07-6.74,31.88-17.82l73.37-108.93c2.39-3.59,1.42-8.43-2.17-10.82-2.91-1.94-6.76-1.7-9.41.58l-72.22,62.64c-1.2,1.08-3.05.97-4.13-.23-.49-.55-.75-1.26-.74-1.99v-196.17c0-1.62,1.31-2.92,2.93-2.92.86,0,1.69.38,2.24,1.05l218.28,261.37c7.11,8.39,17.55,13.23,28.54,13.24h7.63c20.65.01,37.4-16.72,37.42-37.37V145.39c0-20.65-16.74-37.39-37.39-37.39Z"/>
</svg>
'''
'''--- fixtures/batch.json ---
{
  "head_block_root": "WWrLWbWHwSmjtTn5oBZPYgRCuCYn6fkYVa4yhPWNK4L",
  "batch": [
    {
      "outcome_proof_block_hash": "3r5dS7bXYG2w35qLXx78nHjPPs8psdYZUdStUYkvHr8N",
      "outcome_hash": "4PvydJrXBTeqk39TF8J9qYTm9apcKS6Ed6kQYcZZiTuY",
      "outcome_proof": [
        {
          "hash": "Efjb1pjAnEszsRUne8yQb1w4eHU4WXmDBmJqMKMHRkzL",
          "direction": "Left"
        }
      ],
      "outcome_root_proof": [
        {
          "hash": "4bJrNUwoYufbGY7qZTEHFUvaoQkuP6FbeWn1SWL7wExD",
          "direction": "Right"
        },
        {
          "hash": "2uVeqwzcwpn7e1KKDhgkihK92dUV564hLUDXuNaigqes",
          "direction": "Left"
        }
      ],
      "block_proof": [
        {
          "hash": "Hga6RGaSK1TQ1v1Bq3ZJztqzVTgz3jSeM6DZveJvfQgh",
          "direction": "Right"
        },
        {
          "hash": "GYbMcKnQdmkh7HemcMTTbQNLRndbjMUR9kEk8qiA8R8U",
          "direction": "Left"
        },
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7
      ],
      "header": {
        "inner_lite_hash": "2hEeSce4tTwiaCQ8AHprkndeg6jXv6rvg3rn7xw8m66V",
        "inner_rest_hash": "2zxnxeLSfGTFyYJjASAY9gVPVx3VXdL9424FpHCw1UHg",
        "prev_block_hash": "E7ugr7jwqLMBGHZf3Dszcmf4y9B96W4isaJraZJSrxUj",
        "outcome_root": "2gYcpDDNTGXZdzS68ne9tAWSvrbJ2fJMeNnhibAEWTVw"
      }
    },
    {
      "outcome_proof_block_hash": "AmnKRhJpAvL4o6yk19gRJApkjGE7yrG7jq3p5WmKFXWQ",
      "outcome_hash": "GaHpxTjVPSaru5X2ZRWoLR5xVgVDyo6icwVdYHTkbZEF",
      "outcome_proof": [
        {
          "hash": "Dbi8faqs4TsatmmZMjYm7LogyLgtKrbELwhNHC9D9LqQ",
          "direction": "Right"
        },
        {
          "hash": "CRg4onaW6BACVxxxCcptZ3W4ZgBy9Wp8QeL35JRyZwPB",
          "direction": "Left"
        },
        {
          "hash": "D4uXr1FfbtE9VLG397b5DNFquUDZDgXYkbVZ3GrxHzGj",
          "direction": "Right"
        }
      ],
      "outcome_root_proof": [
        {
          "hash": "HTxxToJm6JDW84wbBhbRVmU5v96Vck1xEt5EiZB3kCG5",
          "direction": "Right"
        },
        {
          "hash": "A5BfRnNu917uKoUfegwCKALfGTEFPUThpjbYfc1pbD7x",
          "direction": "Left"
        }
      ],
      "block_proof": [
        {
          "hash": "E7ugr7jwqLMBGHZf3Dszcmf4y9B96W4isaJraZJSrxUj",
          "direction": "Right"
        },
        {
          "hash": "4SK4uDGQf2HNE96efRM4gK5kncLCok4vQEmrR9Bwd4iy",
          "direction": "Right"
        },
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7
      ],
      "header": {
        "inner_lite_hash": "5sRv1mRJMEtuG4T7jdQyrP15wWNEJfX6miskUS42pLHS",
        "inner_rest_hash": "J4RPuwENpZmdkiMfqhqyYMbQ4MwR7idcaDBpP8431gMe",
        "prev_block_hash": "HbWHEEwcNZrChQxGJL3STkWNiB1UcRtLgAEzUtgkYp2S",
        "outcome_root": "8Nj3GSGjKD7DHZC9oemufj9ezAaPyBTW8Ln2qFY6huL7"
      }
    },
    {
      "outcome_proof_block_hash": "8a9taVBYYTNHj4aLqVuB8TqBaFn3KR614dv1Amj9E97z",
      "outcome_hash": "3gTRjypFxk3J2m4ksbrhvdZynXAVDDeokWMhM4R7ktux",
      "outcome_proof": [],
      "outcome_root_proof": [
        {
          "hash": "6f9Hx6WiARFDdMnmyXeoXKwDu9cvB1LykMtbRa2gupaf",
          "direction": "Right"
        },
        {
          "hash": "C1pg4zw5GZpXr7CNk9zbfaPaFYJ6CHZCQQPMSEunnoML",
          "direction": "Left"
        }
      ],
      "block_proof": [
        {
          "hash": "Gkh1v29dTQeZHUBsSmp37KFR9ZnV86nX4TX3fTsKuUbk",
          "direction": "Left"
        },
        {
          "hash": "CQJrXuSXFfLnthXpxeyfUCAnyjsEJS5XP7GVaZL2xPoL",
          "direction": "Right"
        },
        {
          "hash": "Evs1HM41TLrjga9j36qFRWgJYszpzgWkW1Ydsmw3xRna",
          "direction": "Right"
        },
        1,
        2,
        3,
        4,
        5,
        6,
        7
      ],
      "header": {
        "inner_lite_hash": "GZp6n6hEkDtfsuEfYFrXD1ZCUKuGwkjGKBGFjmMsS6f4",
        "inner_rest_hash": "4nXZUEBPSyFk3EM9ovfnTVX8vEh4TiqRpp2p55WwrErJ",
        "prev_block_hash": "Gkh1v29dTQeZHUBsSmp37KFR9ZnV86nX4TX3fTsKuUbk",
        "outcome_root": "14C1KBk1nyuwHdSjE9t7JXjzxMatHuEosDhRtKTiC7kN"
      }
    },
    {
      "outcome_proof_block_hash": "Fd8R2RB7eW4TbLxfAd5qr25bYgjUN8APbkwGbH2SQH6B",
      "outcome_hash": "HiUtMnyW4vpw2X9nQDDWVLZuz3sub8gPemVkhCGcFNQ7",
      "outcome_proof": [
        {
          "hash": "3in4oHZqxuGdwbmiqzcU1NNKmMrAHb92krPHJzRN13Hb",
          "direction": "Right"
        }
      ],
      "outcome_root_proof": [
        {
          "hash": "DukKRXN5Heb7SsuPQ1fhubLP1TT8yyry6MyFtXqgKdN7",
          "direction": "Right"
        },
        {
          "hash": "GWUgXnCEjbbshR8nXDmJGAkJeQ1w5DZjm5XWWFw9gFeZ",
          "direction": "Left"
        }
      ],
      "block_proof": [
        {
          "hash": "3eRBHhk53TcTdqNpJqujy7fVdkbba6ZL39iqBQCHxHJ6",
          "direction": "Right"
        },
        {
          "hash": "8Q1SnmFKxwbHiosq584mDKPTHtxmXDUmmDZi5bLgs4he",
          "direction": "Right"
        },
        {
          "hash": "12t1FCYy8VHnF6DX8i1chbjyNMCp4GxtN3kGvjYgo9NT",
          "direction": "Left"
        },
        {
          "hash": "J41Lz6YbXnV8Dc9e3cHxe8uek8APCXmJPNsPx6EAtM9N",
          "direction": "Left"
        },
        8,
        9,
        4,
        5,
        6,
        7
      ],
      "header": {
        "inner_lite_hash": "2zNaCSmvYcxriCjGxNnLFPsrqG6nxuterVC6y46kabCf",
        "inner_rest_hash": "DzGYc3CDLZXLn8EfADzZud6RPiuaaDj4E5o5Snmt2hQp",
        "prev_block_hash": "HqnvBjc9vvVNiNkGXtpuCEccbSR34J3uaMtX3Kao82dv",
        "outcome_root": "4pAoQPyEovYCZxPJg8WvSzwELHvCrUnBSXNTwqKcEUAA"
      }
    },
    {
      "outcome_proof_block_hash": "Bn4E3KmVthrkzEN26285FYTCjNseqDFTgKnHwGn977pK",
      "outcome_hash": "4PjjCXXYozNYaT4SXbG25SvhbWu2yPjHY7BZUmtkU63E",
      "outcome_proof": [],
      "outcome_root_proof": [
        {
          "hash": "Gay8YTcTjCC2nB4BGK55NJHb142fttFk6besLKqPoNKW",
          "direction": "Right"
        },
        10
      ],
      "block_proof": [
        {
          "hash": "CUDHYktaDykajBBphmow4grQcpd6LvWVxp2uwrRfBnBF",
          "direction": "Right"
        },
        {
          "hash": "Eyf4EwHz37kdKEfx9dfNMehHMtNjAN9p4ghiQ5FX52HP",
          "direction": "Left"
        },
        {
          "hash": "GdgmofkrCU5pKUZqNXkAidzi6FKVWyuzjR8gobwoJbKi",
          "direction": "Right"
        },
        {
          "hash": "8N1GKNovpVqo7WnBiwnuzibubGpABt1JJg7gaQcJwcjJ",
          "direction": "Right"
        },
        8,
        9,
        4,
        5,
        6,
        7
      ],
      "header": {
        "inner_lite_hash": "7tJ1xJLMcEoD1RqmVfbBt7d9wVmdC4rzzqXd3AaYAoaf",
        "inner_rest_hash": "9SNkoN3PaoQ3RzHnVoSetTTRA1yH4TovHZrPCeLZuKQn",
        "prev_block_hash": "FP9jWLcURrjeZq9Nn4GPRuw1BrS3B4viE3v7RP2MzV4T",
        "outcome_root": "JCJ91DiJ7onkzNfcS4eaUewJvTbtpUBhVdEDdDWaNmr5"
      }
    },
    {
      "outcome_proof_block_hash": "AQEUbQV7w1L5uEkeWJm77f9wuJwFzycR1SD9oNupXdr1",
      "outcome_hash": "A569UNq88YJTnob5StqcyzCipyA9WQynt8pK35LXeU2z",
      "outcome_proof": [],
      "outcome_root_proof": [
        {
          "hash": "8QoJyB1pW3eg8DxPSd1cJanbuECT53S8w5Z6rFz4gsnK",
          "direction": "Right"
        },
        10
      ],
      "block_proof": [
        {
          "hash": "37PEb6siLYmuKtv1S1msEj3VmsVgrJhvwKbSN1ZyGABP",
          "direction": "Left"
        },
        {
          "hash": "JDPb6f8UxgC37gkK6Wv8J9vWNxqXnzwDJF2Hhu8SSXpU",
          "direction": "Right"
        },
        {
          "hash": "2kLkUbR64hjc1vN8R3XcARXEkt8LGCgBibwERSN6Joft",
          "direction": "Right"
        },
        {
          "hash": "3TqhUCu9SGuyokb2vaRRrsPEMtP2yren9WENNX8LXnh9",
          "direction": "Right"
        },
        {
          "hash": "6D1daBxJE5SZXVt5FgTmnZchFciUJR9TYg44ppmPDycT",
          "direction": "Left"
        },
        11,
        12,
        13,
        6,
        7
      ],
      "header": {
        "inner_lite_hash": "8YJX9Z1N1u4KJfxeSZoxLuNgwYUKmZoTafCaaYxxfTx8",
        "inner_rest_hash": "3yso176TyBauYDM3xQZF8yDAc3wYJMaATSaLvjud17wo",
        "prev_block_hash": "37PEb6siLYmuKtv1S1msEj3VmsVgrJhvwKbSN1ZyGABP",
        "outcome_root": "5XPfzKsF1HLQK6chq9nzPta5fZgEDQZdWCi3ZaaiKji3"
      }
    },
    {
      "outcome_proof_block_hash": "3eYK12fPy78iMoGyFDvFyHWxSb1WzBu5mnqF1vn18Sjo",
      "outcome_hash": "DiWFJgJoEPcRzNhj1Z3bYYrW6HXkZXwZQCDksWDGWYCK",
      "outcome_proof": [
        {
          "hash": "625NncKyggf6JWLXUbJme9eWEBXud75DhK95oyGT8nkz",
          "direction": "Right"
        }
      ],
      "outcome_root_proof": [
        {
          "hash": "CTUfe8iEXuMrTrv2c1ew2W71Z7qCcNnM3qSnmzcNWJYh",
          "direction": "Right"
        },
        {
          "hash": "CmSXrkzVu4ma3xKQHR7GZUco5j2AXevS3ec5gnVvZTJx",
          "direction": "Left"
        }
      ],
      "block_proof": [
        {
          "hash": "CfjMS2dFmuHBsTdfJ5R4umUWobEETQzCZf2rmFYchz1P",
          "direction": "Right"
        },
        {
          "hash": "HEtJH4EmGCpmmYsbUF1sHquzDXUHBvDpVYVE2FN6pojY",
          "direction": "Left"
        },
        {
          "hash": "Fpg9yr4DgCVvNaK8XzUMcFVTTqB5bcbFFme9n4b9erfE",
          "direction": "Left"
        },
        {
          "hash": "8BsiXcWESKyfpUiuV5xwcgH6sznT2wpZ3toHAAntZXgs",
          "direction": "Left"
        },
        14,
        11,
        12,
        13,
        6,
        7
      ],
      "header": {
        "inner_lite_hash": "7dCpZqv62dgXu8FTQhw5LmtR4aGshT54u2kfUA4b7hKQ",
        "inner_rest_hash": "BtT5hFjgU5NtddngkK4qMLBtSHw7tM6RawJzhhKmSUjA",
        "prev_block_hash": "2SZhhYzYQ9fVAaSuS9Tp9DaP5T31q1Ko6HDbpiTYvSYG",
        "outcome_root": "7NrkJm4KqHFWpYTPQkAQizhLpoe7iCNTGQ1oLRY6Nu2y"
      }
    },
    {
      "outcome_proof_block_hash": "E9yLTjsHKyAM2NPmpvsJEo6Ceo87L8tZJeqVJZDFK6fn",
      "outcome_hash": "6qiVBWG1CxCtLgwA7tVTEFv3fLkkLBdERv8uicEFmSgn",
      "outcome_proof": [],
      "outcome_root_proof": [
        {
          "hash": "Ay16LXw5XBpLUytXRXCFFxHwXReeT7AM37Ln2TCf9dtp",
          "direction": "Right"
        },
        10
      ],
      "block_proof": [
        {
          "hash": "2pVbpHb3dtgUyN5RsyN9Sksa778XaCYZNNoYwTrjLA6T",
          "direction": "Left"
        },
        {
          "hash": "BGfGaHGspRkV7JNg3oVWj6e8XCNwJrbt1sjfCw6aQhEq",
          "direction": "Left"
        },
        {
          "hash": "GJvQ6Hwa2a82x8Tbu5M5kumcnuuGZCXrfKbSwBTdsRoH",
          "direction": "Right"
        },
        {
          "hash": "333wXQzgiDKiwhBbNo4KUPKYa4cTb1CpmfZ94zgCAeDh",
          "direction": "Right"
        },
        14,
        11,
        12,
        13,
        6,
        7
      ],
      "header": {
        "inner_lite_hash": "67D4C7JBk8eWXwWh4bR1bN4SH4MFLfKvWbqtPrDVixDC",
        "inner_rest_hash": "BHknTrn2WxLr7chMpgs9mTQTZxXLsHUNAZAsjSk4mYmj",
        "prev_block_hash": "2pVbpHb3dtgUyN5RsyN9Sksa778XaCYZNNoYwTrjLA6T",
        "outcome_root": "AXhEXdR689UNzPxDFszniyU4HAPXXoD9hXgyGdXvj3Y"
      }
    },
    {
      "outcome_proof_block_hash": "7N25WHCdNq6f42K2Lu3Jk3KVqa7UyRvqaWGvYTqUrnb5",
      "outcome_hash": "FibgVKNrRhQgVHnjhVBB51QB1iZiC4RWv6tHLkRGp3ne",
      "outcome_proof": [
        {
          "hash": "5o9VMR4xWxaioK6v151TcuGkGzGKwHHnAd64aazuTNkZ",
          "direction": "Left"
        }
      ],
      "outcome_root_proof": [
        {
          "hash": "Xz8zNimhG5Gsw6tn937kaweMRZcKDQAer5VHtdT7TU4",
          "direction": "Right"
        },
        {
          "hash": "A6xZhTpRjYt6djdxsb7tSNSD8U1b8mapTJFcp2UXSvZ3",
          "direction": "Left"
        }
      ],
      "block_proof": [
        {
          "hash": "FKhGQhMfewNK5ZtNkpY9dCx16cmfmmfPBLoBvU8Hn5YW",
          "direction": "Right"
        },
        {
          "hash": "5yTpYT6tu27ty5j32vKYqQYxSERe1qvdTpgsfJxbzhkf",
          "direction": "Right"
        },
        {
          "hash": "39tJXB5oBEKejmjznf6e3WcsQNPwvSPVP5tEPdAhFTW1",
          "direction": "Right"
        },
        {
          "hash": "Dx56BK27qFMPbKrxMNXKRcaDH7LxfyH3NgPCDSUQyTGt",
          "direction": "Left"
        },
        15,
        16,
        17,
        13,
        6,
        7
      ],
      "header": {
        "inner_lite_hash": "3xh1sTbGbuJK7sfzCYJh2yEYWCgmD4voyx9zHhEuiFNw",
        "inner_rest_hash": "HFbmky2Kxvdf587biCf1eNM3Vt41mnRhzcM1Zifo2fmh",
        "prev_block_hash": "66SDNjto6jXo7PSh2adrKAhKWmg5AAToiVA3RJ6zHWD3",
        "outcome_root": "FCx7vEffmUfRkPDgvDDfYTmcHiovDthCzGQh42FkwptX"
      }
    },
    {
      "outcome_proof_block_hash": "4U8vy3NzowZhRkwEiHhzVQkMEFknNiZWSfsnW7DX5xwD",
      "outcome_hash": "FArbBCt3GV9c9ttwoVd2vRKLiyHGa1BJgGyaWYKSiPme",
      "outcome_proof": [],
      "outcome_root_proof": [
        {
          "hash": "8kcvRwpMWrJtvhMJVA1732triphkVUAXFJbprfCiUoyU",
          "direction": "Right"
        },
        10
      ],
      "block_proof": [
        {
          "hash": "D6nKsiEojQYvu5kwzZ96CFTt7JGqz53XH4hKHGir2GBc",
          "direction": "Left"
        },
        {
          "hash": "E5guokgex3h4AogwBWSK4Dn8ygA6eXNfnTj4JyeKL1xz",
          "direction": "Right"
        },
        {
          "hash": "B97BmtsGNDLSnfW8BRyG9TDUVPmFtJwjawA2eThGLG9Y",
          "direction": "Left"
        },
        {
          "hash": "7f6qR2dmAyMNqY1Rf7h6iyQFvLuYu7kMoBSSkkwYRcAU",
          "direction": "Right"
        },
        15,
        16,
        17,
        13,
        6,
        7
      ],
      "header": {
        "inner_lite_hash": "9edAZZgpABc3kymJzjZ392jNKbfam7HsUBAhXdhqC6zW",
        "inner_rest_hash": "8fQRLSKq3LJyg5dHAZ4FG2FoPUZNxmSDYfJQt7nNQVw9",
        "prev_block_hash": "D6nKsiEojQYvu5kwzZ96CFTt7JGqz53XH4hKHGir2GBc",
        "outcome_root": "APxigxWvxang1nid7fyBziUA4YLiK4LT1Th3WEzyYwEJ"
      }
    },
    {
      "outcome_proof_block_hash": "HWMyCPRVrAcQKXcXk7aLBuQnTVebTqHEhkg8fMxj3UMj",
      "outcome_hash": "DiTUNUxDwN53g2yg9kpNepsiocm2pY9sDqzwNpbg4pD8",
      "outcome_proof": [
        {
          "hash": "2fhoktUfzE4dStL93byFuEqRrbcMhpBdwxYaLuyrC9SF",
          "direction": "Left"
        },
        18,
        19
      ],
      "outcome_root_proof": [
        20,
        21
      ],
      "block_proof": [
        22,
        23,
        24,
        25,
        26,
        27,
        17,
        13,
        6,
        7
      ],
      "header": {
        "inner_lite_hash": "BfVXSJW3ikZ1DCikaA22LvY6t9Y1UksZNBduRVN2qEJs",
        "inner_rest_hash": "77XJVCUNgqURcZctRGf5tHQWx5SMjdVVZgKBjDauD5xc",
        "prev_block_hash": "DiSh6mnHWmRJgoFdxGX4Te2sLXCfyvhe2x2uzDHaHc9",
        "outcome_root": "DqJaknTVohdThkzXYb6F8rwuzktErtFonBzM4mtDpc3R"
      }
    },
    {
      "outcome_proof_block_hash": "HWMyCPRVrAcQKXcXk7aLBuQnTVebTqHEhkg8fMxj3UMj",
      "outcome_hash": "2fhoktUfzE4dStL93byFuEqRrbcMhpBdwxYaLuyrC9SF",
      "outcome_proof": [
        {
          "hash": "DiTUNUxDwN53g2yg9kpNepsiocm2pY9sDqzwNpbg4pD8",
          "direction": "Right"
        },
        18,
        19
      ],
      "outcome_root_proof": [
        20,
        21
      ],
      "block_proof": [
        22,
        23,
        24,
        25,
        26,
        27,
        17,
        13,
        6,
        7
      ],
      "header": {
        "inner_lite_hash": "BfVXSJW3ikZ1DCikaA22LvY6t9Y1UksZNBduRVN2qEJs",
        "inner_rest_hash": "77XJVCUNgqURcZctRGf5tHQWx5SMjdVVZgKBjDauD5xc",
        "prev_block_hash": "DiSh6mnHWmRJgoFdxGX4Te2sLXCfyvhe2x2uzDHaHc9",
        "outcome_root": "DqJaknTVohdThkzXYb6F8rwuzktErtFonBzM4mtDpc3R"
      }
    },
    {
      "outcome_proof_block_hash": "HWMyCPRVrAcQKXcXk7aLBuQnTVebTqHEhkg8fMxj3UMj",
      "outcome_hash": "29DTPvy6CadYYU2nMA8hzbUZK7gyyfNpB9QsPq6DkUa6",
      "outcome_proof": [
        {
          "hash": "BVML5FcvYMF37914srysXHMwqNR86RwJDqmSREDLHdgZ",
          "direction": "Left"
        },
        {
          "hash": "3bEnHTFiEcyYN7N6RcLGRbMj6PmpsY58NEzxfkNPU3K7",
          "direction": "Right"
        },
        19
      ],
      "outcome_root_proof": [
        20,
        21
      ],
      "block_proof": [
        22,
        23,
        24,
        25,
        26,
        27,
        17,
        13,
        6,
        7
      ],
      "header": {
        "inner_lite_hash": "BfVXSJW3ikZ1DCikaA22LvY6t9Y1UksZNBduRVN2qEJs",
        "inner_rest_hash": "77XJVCUNgqURcZctRGf5tHQWx5SMjdVVZgKBjDauD5xc",
        "prev_block_hash": "DiSh6mnHWmRJgoFdxGX4Te2sLXCfyvhe2x2uzDHaHc9",
        "outcome_root": "DqJaknTVohdThkzXYb6F8rwuzktErtFonBzM4mtDpc3R"
      }
    },
    {
      "outcome_proof_block_hash": "B9JWY5eiYgPS4YEdCVYpjc2Hfi2YiUDcFYfjoVd8Cgaw",
      "outcome_hash": "EUa5ZPU3gryV79JsKWYqP1Hr4D6cdLMUyDcWdB4wR5et",
      "outcome_proof": [
        {
          "hash": "2Ef3q3JqnvQ7ohNbbBnEEXHvY751a31pdT4fMguRjU7f",
          "direction": "Left"
        }
      ],
      "outcome_root_proof": [
        {
          "hash": "C5enxhie3SY1bT9DbYNujKu7Pj5KVoRemeSHn2Ze47tR",
          "direction": "Right"
        },
        {
          "hash": "6u9qsVCJ2duWmJzCKByosBxLz1vRrcMBCxwQJRiVFZp",
          "direction": "Left"
        }
      ],
      "block_proof": [
        {
          "hash": "Hc9gU89D54q6xPkTiotqQQ3uZ4ATpLxyjA3eksfxXamx",
          "direction": "Right"
        },
        {
          "hash": "7gYgpZzSaDBYFHVtzYoU5GarEZLK59d2BRQ3Cy9o2kmN",
          "direction": "Right"
        },
        {
          "hash": "Bd7SGMfcoYoamoDq8NSyySid8HQp9k5myBTGUPVW6A6a",
          "direction": "Right"
        },
        {
          "hash": "EYEnEmjNM9CjxFTtPu8dNyiMdr6WtjpG6eZGucBk175V",
          "direction": "Right"
        },
        26,
        27,
        17,
        13,
        6,
        7
      ],
      "header": {
        "inner_lite_hash": "BKMXE1PfYHSEoQnG7eXtJdD34CeTypLyX1CJzWNZiwm7",
        "inner_rest_hash": "8BHDS1KsJ55UMy2ndpcYYKUDACQYmCrVbh42dDqWiQDp",
        "prev_block_hash": "5vxW4UeYrqouAFCs63LwQWjMhKpEM6aabZmbsTwpbqg8",
        "outcome_root": "GmBUBAtuqnVwXmGP5KTBdkDCkwo3pCfCNSYYfZ5joRy2"
      }
    },
    {
      "outcome_proof_block_hash": "3Q1GtpF9RPah9cG3HgS2Rc4Nq1ws9NmswQ7WkpYMrC55",
      "outcome_hash": "4dgzT7sWDwppkeixFwcNCqMkaNXc5wHdh5uiSx4CaS9r",
      "outcome_proof": [],
      "outcome_root_proof": [
        {
          "hash": "3fCasAkkmwJ7A7GtcKoEEabmRZ7vQibvDWYq7Fyfb5Vu",
          "direction": "Right"
        },
        10
      ],
      "block_proof": [
        {
          "hash": "8AqJ5aEEuSNb1QTvExCdsmEaUEhtZ44aKed5eADGDyYA",
          "direction": "Left"
        },
        {
          "hash": "9SpBDpKY6ufh2hAxbhS7zXUT4spxnx7yLU92xXofAskJ",
          "direction": "Right"
        },
        {
          "hash": "94R941GmSBUpCEp16ori3AWYPcxQPLoixVgAWAZ4Xp7o",
          "direction": "Left"
        },
        {
          "hash": "2qkNJsPjcU3ojZJv8Xngoo4CDwXfHAzU75VExJG4NmSw",
          "direction": "Left"
        },
        28,
        29,
        30,
        31,
        32,
        33
      ],
      "header": {
        "inner_lite_hash": "6aw5LHvcoWfcjmZA9rfc3UQX16MQZELWY1aTddoMWhYP",
        "inner_rest_hash": "CQtCaHorfe43v9KumQovuNzMaQh1MTe8oWeKdNBWfYDP",
        "prev_block_hash": "8AqJ5aEEuSNb1QTvExCdsmEaUEhtZ44aKed5eADGDyYA",
        "outcome_root": "Cm1B6vXdPKoctAPFC9G5Zm8PKyfCZfSFsgjAcSPP5nms"
      }
    },
    {
      "outcome_proof_block_hash": "BgPyMt5WDkXi2No6HCx2W8CYMzqdEABVAisTVKrc397Y",
      "outcome_hash": "AFoY4NoL3ARVz585wwV7zn5uWEHNZjFcaRBg2GNsCa2k",
      "outcome_proof": [],
      "outcome_root_proof": [
        {
          "hash": "5u2rogcQMAvBMgPV7JJTVcVU3FF3QH33tZdHqCLHaBFK",
          "direction": "Right"
        },
        {
          "hash": "8fqxCdoCborMxwpGym3kma3ZxFiABYLdPHtuMtXcS7zh",
          "direction": "Left"
        }
      ],
      "block_proof": [
        {
          "hash": "7Jcyi4Lc7GfuKYE326CYyM9npVpnLs8CXyAm4sVQ9vDw",
          "direction": "Right"
        },
        {
          "hash": "Hq8HZA8UAuWX8qd4DPHkXm9whzyzxJhZ5YXxDYaVgNYk",
          "direction": "Left"
        },
        {
          "hash": "SBhAbxofw771hJVnZq9w5u5aYPqgHURAKGdmgVkH1DJ",
          "direction": "Right"
        },
        {
          "hash": "3aZ4b4UcPdNLQoMJm2DqH9Vq8GSxuyZcP8Mbfk7Ws7Sc",
          "direction": "Right"
        },
        28,
        29,
        30,
        31,
        32,
        33
      ],
      "header": {
        "inner_lite_hash": "HfhNmHv5NnjbQyUz9TRtTjJ7MGFmvyQb9youeUraznRe",
        "inner_rest_hash": "4vfTLdDbNp48ThVsDYcaadu9jb1vyi34E2xqXzP5v19t",
        "prev_block_hash": "9kNH12h8DiVQkir4TD7CJETsVu69ftx9vTmiEJJjZvYd",
        "outcome_root": "6N1VaEjxmdicjG29CvCkNgKJPy4somoXuCMw3YH6nRhR"
      }
    },
    {
      "outcome_proof_block_hash": "4tk1YUH9P4iPoCxmzfBHeuHPQYXwRTsLAbNkPzqoNg9q",
      "outcome_hash": "2cmq7sPMdRwuH2oc2pU2rNUnoEp9bc4qRvPk6TcuuMfV",
      "outcome_proof": [],
      "outcome_root_proof": [
        {
          "hash": "ECJGeNrQ3dHfSZYRNhg4jxTGS5bNgtKX6vBN9XdfAqz7",
          "direction": "Right"
        },
        {
          "hash": "CVxBTkZxBEPnLk5QN5Sj2BrvQzCQdHYjXrFN8rzfY4RP",
          "direction": "Left"
        }
      ],
      "block_proof": [
        {
          "hash": "Fe2riqWzXNQH4J55TT1p2kd6oddy3aVHbPtK45HbrBRu",
          "direction": "Right"
        },
        {
          "hash": "C4CExCE3AH61DCGWKwKRKRYLhmpuuRSDiAgmTCxwhZQd",
          "direction": "Left"
        },
        34,
        35,
        36,
        29,
        30,
        31,
        32,
        33
      ],
      "header": {
        "inner_lite_hash": "F6r1aHyovKST91xtCL4QQG1Y6M7JLySMndiZGB8pMLuQ",
        "inner_rest_hash": "6RRDMRFPZ5dMNVYzxxHfMNb2MmhaAjaYw1CExKAaKqHX",
        "prev_block_hash": "8yd1cSebZzL8UWtqoHrezFoCdQQB7wLrw4MdGjGjsFr7",
        "outcome_root": "626b9ru2Ftauwsv61WkLLhfQkkyMVvuUvCeto651kgeG"
      }
    },
    {
      "outcome_proof_block_hash": "8yd1cSebZzL8UWtqoHrezFoCdQQB7wLrw4MdGjGjsFr7",
      "outcome_hash": "27WoaRrpCGAGA4WqHzPMkmroDU3SebJfDWQUE4heYLkr",
      "outcome_proof": [
        {
          "hash": "3j5GY7qi22mk4ETYYFBaRi6WQJAQ9pCirRjcsAs212XY",
          "direction": "Left"
        },
        {
          "hash": "DnnTKLYB2AShsajo3izzS45CeWGi2mG2Yj9ghdSyojwb",
          "direction": "Left"
        }
      ],
      "outcome_root_proof": [
        {
          "hash": "5A8qY6o7EGe18pciqzJp5nySvioct44XPwFjAqywZArZ",
          "direction": "Right"
        },
        {
          "hash": "gGteAiWEwp2dPNd6knE6Cj8mVza1yr9vdWfBrHJeyyg",
          "direction": "Left"
        }
      ],
      "block_proof": [
        {
          "hash": "Dqwd6XnJJE69WGsCwaG6LPL13AjRdmXMmbySzsofeioE",
          "direction": "Left"
        },
        {
          "hash": "E2NP63A6jys6w7k4ubF1172K7udS2MmjVvQD7PYrQA1A",
          "direction": "Right"
        },
        34,
        35,
        36,
        29,
        30,
        31,
        32,
        33
      ],
      "header": {
        "inner_lite_hash": "3V3azAPeKh2psNx3JqpTs7roWVwDeavrMutDmhP3vmfT",
        "inner_rest_hash": "6aHDq5gzvFfTPeqtnBAgjnFJVaTS8Z8hFmZiWv9jNESH",
        "prev_block_hash": "Dqwd6XnJJE69WGsCwaG6LPL13AjRdmXMmbySzsofeioE",
        "outcome_root": "DimBHpdaeyuS3g8p2ibfuURDLn35Cv8NwKT3KyYnbgVG"
      }
    },
    {
      "outcome_proof_block_hash": "CSxoAQRjsbR71AvpNKxynsfnAcpev97M5XrpArmmGUcU",
      "outcome_hash": "2DckF8zc4TSb9rokFxSrRenB8k2JB42qqz3BBcmqpCMb",
      "outcome_proof": [],
      "outcome_root_proof": [
        {
          "hash": "CbZ7LgnQvEuwxanwx9TCvsBMH4X9GVvZLh3AcBJ7ynK7",
          "direction": "Right"
        },
        {
          "hash": "33fMYKGtXdg5vb8oP4tXMVnBuPrRgFqRwsR1B6WVLXTd",
          "direction": "Left"
        }
      ],
      "block_proof": [
        {
          "hash": "8Xe5YHJbC3g34KkBK6L3DY4duwSRTKt8afBeUA5k8LX6",
          "direction": "Right"
        },
        {
          "hash": "ABYRg4MV2tdXEmSm9oPjVakJsC3N8FPwJkaTHMLoaa5M",
          "direction": "Right"
        },
        {
          "hash": "3MmGjp5YfvkqakpPWNkHjcx8PMAKKf8bcJebA1oa1sjb",
          "direction": "Left"
        },
        {
          "hash": "9jcftm3j58j6khA47ruH7UJPMtPWdUSyuBcQMMWnnruT",
          "direction": "Right"
        },
        {
          "hash": "HGFfeS3jRHU8BuV9m1ZTHoJA22TETKyhyBRyADFFjcXE",
          "direction": "Left"
        },
        37,
        30,
        31,
        32,
        33
      ],
      "header": {
        "inner_lite_hash": "2yc1Q4beLQc4VeK7j4Jg8JQ6dHQ4Q9G2BjeijASbwvku",
        "inner_rest_hash": "5Fv3gZhWHTdFBbiuKvPf1PXYvtpCDqrppuZ83AoaqztP",
        "prev_block_hash": "8U9aaVFs5oDHn2cNfPVBtJBe3jfTZLhJhE2AWnYz8WBw",
        "outcome_root": "BrobZkMDQjmchcPNUCX4PjMzWNyFEuN6QCkakd4vgFTA"
      }
    },
    {
      "outcome_proof_block_hash": "Gtyr4my2Gj1QDY8ia8LghwrtqjjNP14Lyuy5GgctEnZs",
      "outcome_hash": "CejXRLCP9P4Trm92WrHHePMxoGc8MowN1ZApFtNuHePy",
      "outcome_proof": [],
      "outcome_root_proof": [
        {
          "hash": "MBhimoKq3P8TLzVRiUoLRZ36Wbr5H6U4ZKX6Ad64zPr",
          "direction": "Right"
        },
        {
          "hash": "6xtt8PPZyxjL3i1zWPQvGQ9mwQeiQfsJCJ5jgzzCiV8N",
          "direction": "Left"
        }
      ],
      "block_proof": [
        {
          "hash": "CosDUzMEFjvFEPAsprD36821Gqh5ay9hUuXYYANmD8xP",
          "direction": "Left"
        },
        {
          "hash": "3G8sQy8S4ygZhzbEyJyXxhpRWc64L2ePPZU5Ed9iKjFq",
          "direction": "Left"
        },
        {
          "hash": "3MsGSESQ26LVyjYPFA8q1BTQRcRiN9SA5zau2iANMTPS",
          "direction": "Left"
        },
        {
          "hash": "68T9sLqD7VDJEmWfC8EVvFQFTip5Q6nQdcaCkH9SKvF2",
          "direction": "Left"
        },
        {
          "hash": "7Z6NA3s1k69Cbne9fR9nZtJcxWHSgaPX3c3T7VvUfqhe",
          "direction": "Right"
        },
        37,
        30,
        31,
        32,
        33
      ],
      "header": {
        "inner_lite_hash": "GrLZrWNuuxdDsxdduSy9ouXGfx1Hu5gWeRw71iBztBrW",
        "inner_rest_hash": "611qvrf6jZqUDFRayQjHVLehCPJEC3Vvkh4jPFzYgxfq",
        "prev_block_hash": "CosDUzMEFjvFEPAsprD36821Gqh5ay9hUuXYYANmD8xP",
        "outcome_root": "5kXTUr73JTRJek9BYntDUz5Evigs8B6oZMuTtxSWBG8Q"
      }
    },
    {
      "outcome_proof_block_hash": "CzbnmsRedvnDEM3MUBSExjty8kH9y3b2WdEyXrP46eD7",
      "outcome_hash": "qGR914SE71B6bBesYLQg4Y48KydcQQaa3GTuwRCfrXG",
      "outcome_proof": [],
      "outcome_root_proof": [
        {
          "hash": "J3bsa5XwZiusWhHHpGatJjMzgcpTFP67vNfaPf4rtFWy",
          "direction": "Right"
        },
        {
          "hash": "6szQSCDBVVP1GEt6XS6ug4fP1UjkNAxRHGpJt3yPpX7p",
          "direction": "Left"
        }
      ],
      "block_proof": [
        {
          "hash": "619pNnyUqtHKWZZ6mqXM5T6joCDAmmWh4Rts2wyViqoA",
          "direction": "Right"
        },
        {
          "hash": "6tLHKinnYPGvNU3veoVF2SYmg9z991pHftdsMj6WyTx4",
          "direction": "Right"
        },
        {
          "hash": "Bf7EuVhcL3kdZcxXaSQmDsEd4taDd4EQ1iQ1Vgk9BYex",
          "direction": "Left"
        },
        {
          "hash": "8t6DvSBRm5GhcshCHMG9oYS1t26UpsXRMfGmMaYMFQ2x",
          "direction": "Left"
        },
        {
          "hash": "B2uwaErow91RfyaA7EgeXnUPXzKQxyLXjiyEk3EBJfap",
          "direction": "Left"
        },
        38,
        39,
        31,
        32,
        33
      ],
      "header": {
        "inner_lite_hash": "6C21hiRuACNnPU4q5WDgM1AJTDYxKkYAfLzRfrxhQcgL",
        "inner_rest_hash": "7SXM8unGiwzY29NdBqH83a3jKTYuer3Hpe2jZFFG5oxU",
        "prev_block_hash": "7FbfGi8W8afiEDCm3FX8hdKEJp1xweRzVkXYwNmWYWRy",
        "outcome_root": "3KAdT3drXT6UUYph9TjDv8ng1L21F1LDubHjhuSCxAxS"
      }
    },
    {
      "outcome_proof_block_hash": "HWSCKxHUYsYabFtJg8VKc9vGPpyU2Z5bc73RYfpyy4mP",
      "outcome_hash": "Bk7Ljf5pnjHCxHfwkZEKhK3wdB5PdR8hQ5pQRidkLrii",
      "outcome_proof": [
        {
          "hash": "JDMZdWvPqj4genGdAEFhzR4VMnGwEwSr8vp16QaKsSif",
          "direction": "Right"
        }
      ],
      "outcome_root_proof": [
        {
          "hash": "DZCZtz8qDJrDmFPVsS5EfRbFDy4Wsm7ngXaUUo1QCfd4",
          "direction": "Right"
        },
        {
          "hash": "CN8uqmkpwkfzvzZ8gvB5x3nyZfxt8iBUKdUmkYJ1mKox",
          "direction": "Left"
        }
      ],
      "block_proof": [
        {
          "hash": "2GuatXrngUbrscCRriUtoAnXovYDK9Pg5TnqBZCKE79d",
          "direction": "Right"
        },
        {
          "hash": "8mYZwhEdGe1256QmRWkc9iCQLsSVbzi8oKgo6NCp785",
          "direction": "Right"
        },
        {
          "hash": "2s1iBFy7YwDvJoUxsmbZ8PpPZCD8awjtevaUA9375n3e",
          "direction": "Right"
        },
        {
          "hash": "F4NN2g77Z2UdW5vjku1s84yZjk4rp4Yi7jiiKZPuYzY",
          "direction": "Right"
        },
        {
          "hash": "EqcTwQLFyUqRNixLtKiXZ42iZGX3FW9Tiz3JP3fw3acv",
          "direction": "Right"
        },
        38,
        39,
        31,
        32,
        33
      ],
      "header": {
        "inner_lite_hash": "ABvfWf3tEaF9vcHM43uqPkucGWb3ynMuoJffHQidF4M7",
        "inner_rest_hash": "49RKYDm3uhX7SvLan2epaQQ9tydGWgSHhmVYvczwv8B6",
        "prev_block_hash": "GoS88YTweaXQjgeG6N6Km8ZavZoJyB4T9qVwS4UgQe3a",
        "outcome_root": "FjWuyieBPuQ8Qijf9uEYnACaKF297T7MZzshbwjxWUW7"
      }
    },
    {
      "outcome_proof_block_hash": "7hUAdcGm5mMuWTLdjsXgdpUsSLRAyd6HccfJDdMSB6Mu",
      "outcome_hash": "7tZ7beEAgQNJh1jZrxP2vNwQoqC2aodgqeurbx5kRZDP",
      "outcome_proof": [],
      "outcome_root_proof": [
        {
          "hash": "Bx7SiQY43sSDnwvuP6hVGBRzSmXKabLGv19c4W9e55TR",
          "direction": "Right"
        },
        10
      ],
      "block_proof": [
        {
          "hash": "A6ZCeowAt3xmhgoN1ti7QZf193CtBjUbmfhAz6u5L9uk",
          "direction": "Left"
        },
        {
          "hash": "7Luy9EQ26cz312pG88p5hvx2yjDjt5e462rew887sPx2",
          "direction": "Right"
        },
        {
          "hash": "2efME1zuuRrTE8TAZEafUVi7XSchdCdLU7nz8QRVtC5Q",
          "direction": "Right"
        },
        {
          "hash": "HMo2McnGnstSLsBdSoiDS3qUMZjjsoU6x1qTdj7DrK5R",
          "direction": "Left"
        },
        {
          "hash": "HWiyNgQXdcB2Nz1Vp9s5Z1UX7chtj7nqar32wiZQcyxq",
          "direction": "Left"
        },
        40,
        39,
        31,
        32,
        33
      ],
      "header": {
        "inner_lite_hash": "DGHWpP4P3vkFaRvDdQLnZ61M6ePCnRiCrBet15MHf1iy",
        "inner_rest_hash": "HA5ATMhVGgyemdq5WkoJ8o1XSeTEyd37x1xsFjEY5aQC",
        "prev_block_hash": "A6ZCeowAt3xmhgoN1ti7QZf193CtBjUbmfhAz6u5L9uk",
        "outcome_root": "FGHJ29Q1DPTEA3o1LDbVuPwF87qBfXnMAWHnPbAaRmXY"
      }
    },
    {
      "outcome_proof_block_hash": "5EKaBuzxNa8sPtne3WSt5srWXXrgGvKajagjLdHM2Kkx",
      "outcome_hash": "FTGpEtfdFFbazQbfoDdkzU3ZJetYYg2iL2e8NwkvGif6",
      "outcome_proof": [],
      "outcome_root_proof": [
        {
          "hash": "Zm2va2iEbsxrZtF9PKZBcYdQ6pkqvbpiNdSguFuqVq3",
          "direction": "Right"
        },
        {
          "hash": "FrPHNs6LUPfkskFKQEmae3qiTxhGzXVeJSUQ8mKwo5Lg",
          "direction": "Left"
        }
      ],
      "block_proof": [
        {
          "hash": "CBvz1vjPT1d2KXM12Y4d4dQs1epo8tdFghVm6CdX2ZBW",
          "direction": "Right"
        },
        {
          "hash": "21pATaPjLWmiunMQTEpDbbBnW4woqYUGxaiCouHbe1Kk",
          "direction": "Right"
        },
        {
          "hash": "H4owaaSh1yQ5YYLVzogwH9wxfoqLAV6W4mVHKijjpQAc",
          "direction": "Left"
        },
        {
          "hash": "GzXNkNeKWo6JoLiuejcfCgXCoHcUcot6MQ1ixj8VWuk4",
          "direction": "Right"
        },
        {
          "hash": "A47STR2avAd1GoJUUXqTgmCapwKTnAHHmntvfbJqZgTj",
          "direction": "Right"
        },
        40,
        39,
        31,
        32,
        33
      ],
      "header": {
        "inner_lite_hash": "FyM9oxg1xG5LG69QYVhkRsW4xzBYdq2XUYGLxVab1XPK",
        "inner_rest_hash": "6a7x22aDseHD3YTuN9uvmT3duxcfAAvfWSH6zzapu8uv",
        "prev_block_hash": "9JJFsJN5AVrVfgbCqdYEcet34aYLBjPhe9fo3bKgma1S",
        "outcome_root": "CRd8sJwWaHUFaXxis8MdoRRiTku94vARshaXoDYhfDuF"
      }
    }
  ],
  "ancestry": [
    {
      "hash": "6DP4mp6K49q4kQQSAYBo4QRRU3jXa8C5DrNaW1ge8Vrx",
      "direction": "Left"
    },
    {
      "hash": "DgigRuAvBTvEmyX5nJLFCSuRYWSEmWQmrrAGSs9DLQak",
      "direction": "Left"
    },
    {
      "hash": "57utWiKTjxWyZ1tUd4W9nyu7P4jzYhs3teP4m4kpSaDu",
      "direction": "Left"
    },
    {
      "hash": "HisstLDNrDLJy4ahW7chsZGwERcgJiySTXjsHmMRUdfK",
      "direction": "Right"
    },
    {
      "hash": "EB6aGQdtXnLwUGjDRGV7ah8Z2d6T22knUriQRYNg75JY",
      "direction": "Left"
    },
    {
      "hash": "HaaV8tAvLP9P6aj5CZGD9aBf9RSJYy7ohGpTmnu42hoZ",
      "direction": "Left"
    },
    {
      "hash": "27ziHAhqiCo8btQzn82vDJXSkJZJNn7y7hYD9WP2H1vu",
      "direction": "Left"
    },
    {
      "hash": "HwNidihiNH1SgaDhgGaVQbVgkejSQvukLhzGf7TEPoyW",
      "direction": "Right"
    },
    {
      "hash": "4RZmC5ZS7rJ3oQ9LkdbfpiYiVtYZWMxtcdexgJeusBD5",
      "direction": "Right"
    },
    {
      "hash": "F8B161Nx13ohvHNXks3i5A94917Mc3j9dHRMX5Bn4ikb",
      "direction": "Right"
    },
    {
      "hash": "8rLNm99SrgbyYrG9MV9NMiDvCXeU1jFXaJWrUcX4uSce",
      "direction": "Right"
    },
    {
      "hash": "FcDoohS3gUDvd8hBpkjdCQhhKkpCr4w7BFfNXWNsJwNR",
      "direction": "Right"
    },
    {
      "hash": "CHEiVMresScVo6BYKs4zM1uQQxAwa2CkeHWZqBhxxRbL",
      "direction": "Left"
    },
    {
      "hash": "BDTvH8vD78hi8arZ2QpiSZyVV8ybv7yZDaBh8G4UZqqU",
      "direction": "Right"
    },
    {
      "hash": "83Fsd3sdx5tsJkb6maBE1yViKiqbWCCNfJ4XZRsKnRZD",
      "direction": "Left"
    },
    {
      "hash": "AaT9jQmUvVpgDHdFkLR2XctaUVdTti49enmtbT5hsoyL",
      "direction": "Left"
    }
  ],
  "cache": [
    {
      "hash": "GkcC5qgUiUrxJtRPbxfpADaybg85VKvDwyvb3JyNVjuA",
      "direction": "Left"
    },
    {
      "hash": "9XuydMRVVEK5nYfwd7pHwKh6KyLWXjCsUJuFEuqxgUa6",
      "direction": "Left"
    },
    {
      "hash": "9dsJ5tU1WJWspTeQXdXXCbefNkqmV1wLtxhwLvvXqucD",
      "direction": "Right"
    },
    {
      "hash": "EYRjWXQ7jadU91wgMtzDciAYQr8sFeEhBDFUb5SJRc6",
      "direction": "Left"
    },
    {
      "hash": "BdBGkEfvUGMwCy1DWyK2noqvRJk8CwdeBVCBwfiN9JFL",
      "direction": "Right"
    },
    {
      "hash": "2sF2yNc5EQj47sJQw6vCo6R6MWukYpDvgRQqRPzP4CJo",
      "direction": "Left"
    },
    {
      "hash": "E6HrEYk7NEWUxrjDVkjZFy8rNx9Zc32y5YnyLyCcU3eC",
      "direction": "Left"
    },
    {
      "hash": "E3fs93nVb9JQvQJ6QMonhGJwgBAQiRa8YHgJwXhGFyak",
      "direction": "Left"
    },
    {
      "hash": "A8F7PAvGs5j2ukYEt8YUycJsQX5nvao8HaiV4ASQcQBP",
      "direction": "Left"
    },
    {
      "hash": "Fwgz3VUsZgR8JYVBCVApitkNRQaqiHs3SMuZ7xazqLd8",
      "direction": "Right"
    },
    {
      "hash": "4A9zZ1umpi36rXiuaKYJZgAjhUH9WoTrnSBXtA3wMdV2",
      "direction": "Left"
    },
    {
      "hash": "61JTPuMXGD99t8vve8b6ERPUYP6VYi2bNUJzgDF1czdX",
      "direction": "Left"
    },
    {
      "hash": "3faT5zQzwuzts2Jri1koSTsF3nT3WyZh3XE3P6miU2NW",
      "direction": "Left"
    },
    {
      "hash": "CJ95SeiV3LX8PaMDopjQD68721wQMZDyNLsQFsn29HMw",
      "direction": "Right"
    },
    {
      "hash": "EKyxaEdwti1tGofq4GUMYamjZ79KuJfti531tPe6bdZK",
      "direction": "Right"
    },
    {
      "hash": "DdVQ7QFgHmZRNmr2RXuzkNc4D4hxUM6dHpgPe865P68b",
      "direction": "Left"
    },
    {
      "hash": "EWzi7eZJTqN1KvGe6M7nH3GksH89jCb6htX3cyBnnAfy",
      "direction": "Left"
    },
    {
      "hash": "Ab4wfYWSHKjKvhpkH2cXnUDN64GzvLfbGDVZNervL1a",
      "direction": "Right"
    },
    {
      "hash": "GFpwD8twK9HBgSBJgNi53j7Q3VNeK1TAKZenMYf2EtoV",
      "direction": "Left"
    },
    {
      "hash": "648a1eGVB7psazSqFUX3Xe1qehQgQjAd5wBWz9x3c5Jq",
      "direction": "Right"
    },
    {
      "hash": "5eJZ5Wnu2m6btsRNfnkJ1subZrEHLGH31RJBBy3tN7SZ",
      "direction": "Right"
    },
    {
      "hash": "gwydeiGUo2j5yjZnkUxsFBaTgxH3Z4GyoNUYqAeGFVN",
      "direction": "Left"
    },
    {
      "hash": "DiSh6mnHWmRJgoFdxGX4Te2sLXCfyvhe2x2uzDHaHc9",
      "direction": "Left"
    },
    {
      "hash": "7Ko1DwMqGwdNRJRgetKSbfghKMRmg8KSAdri6rF1rZBN",
      "direction": "Left"
    },
    {
      "hash": "9nngootZbThL8EJwx7FBet2Cwg3v3aQarbJZPbBuyH6C",
      "direction": "Left"
    },
    {
      "hash": "4YiUJoSwER2LfEw7JNhB129xcn7v7u5jCZ83AD6tjrqR",
      "direction": "Left"
    },
    {
      "hash": "96awqjzUXUJkR3v1qutrALuhKYjtP6K6BBa8LS68BZtm",
      "direction": "Left"
    },
    {
      "hash": "9KeiNWYMvY8L8b4kPk46eL2hSJ2QGp2YzhTgEhRu5q8z",
      "direction": "Right"
    },
    {
      "hash": "J5nLwtmSTV74e65cBmecpcLMSHsx4asGyxsoVSvFQC8h",
      "direction": "Left"
    },
    {
      "hash": "FH9kBGUEeD5Lc7M3y74L9NEJjWVvR9AbAdaZfNhreRQB",
      "direction": "Left"
    },
    {
      "hash": "DDwyotnDJM6XvCPAbdVihrKBLhF3CKJDVCt689ZM52e8",
      "direction": "Left"
    },
    {
      "hash": "6Xk9qWvWRwm3MDWGM8er8geARovhHQHrzjnC8wnLGq3N",
      "direction": "Right"
    },
    {
      "hash": "B3uUcVdrShf5E5zQQVQz1Sns6mcnnj935nnCaCmpev6o",
      "direction": "Left"
    },
    {
      "hash": "1VSeeRdxGpybV7qFqxdALRZUnEeSinDm8uhJrwppquc",
      "direction": "Right"
    },
    {
      "hash": "DQe2UUq9xfeSvoQNX4HnYUBwtaBHqAUP74gAS9KidafU",
      "direction": "Left"
    },
    {
      "hash": "G2RFLaesZ48KDzWTy9NR7ePYGRPaY9t7e5ed4AZpzzX",
      "direction": "Right"
    },
    {
      "hash": "7XXpKJ6aKVhNhC352ZZ2Md4xATig3LM97XnQTuvdRd62",
      "direction": "Right"
    },
    {
      "hash": "BZnUwS1y8Px63EqcjGybtPK5xtpDeZMFJa6GDHYUbf25",
      "direction": "Right"
    },
    {
      "hash": "35K1ntZFk6GkajHVhXG2PZm4v2jREiz7hiq69DPLf3z9",
      "direction": "Left"
    },
    {
      "hash": "FWpT77u5c6KyZHrnGN1J3GRXdhCuQdot1Xq31YxDhagC",
      "direction": "Right"
    },
    {
      "hash": "Aioj5bCB2k3mmiAZ86N4kyUMz7ptmkgQML7Vs8Z824ct",
      "direction": "Right"
    }
  ]
}
'''
'''--- fixtures/e2e_bps.json ---
[
  {
    "validator_stake_struct_version": "V1",
    "account_id": "01node.pool.f863973.m0",
    "public_key": "ed25519:3iNqnvBgxJPXCxu6hNdvJso1PEAc1miAD35KQMBCA3aL",
    "stake": "11170441638409425668975791338168"
  },
  {
    "validator_stake_struct_version": "V1",
    "account_id": "aurora.pool.f863973.m0",
    "public_key": "ed25519:9c7mczZpNzJz98V1sDeGybfD4gMybP4JKHotH8RrrHTm",
    "stake": "17889966138083499342131296757169"
  },
  {
    "validator_stake_struct_version": "V1",
    "account_id": "bee1stake.pool.f863973.m0",
    "public_key": "ed25519:B7Mwy3sCCJ6GZzEojsKFXMjLQfVXPDC4Q1LjuHoZcyM6",
    "stake": "951628760573009933043158953323"
  },
  {
    "validator_stake_struct_version": "V1",
    "account_id": "bisontrails.pool.f863973.m0",
    "public_key": "ed25519:8g4P5EXyp2b2pfVMHY1QLfkRcY59hjPfWrFCKUWX3RmR",
    "stake": "784322861597508336390510885838"
  },
  {
    "validator_stake_struct_version": "V1",
    "account_id": "everstake.pool.f863973.m0",
    "public_key": "ed25519:4LDN8tZUTRRc4siGmYCPA67tRyxStACDchdGDZYKdFsw",
    "stake": "3424542870162917789465110810613"
  },
  {
    "validator_stake_struct_version": "V1",
    "account_id": "forked.pool.f863973.m0",
    "public_key": "ed25519:5CTpVEzEdmn5wK4y5e7DsqtRvQs3bM1ypUNU2RGj3mtL",
    "stake": "19553588599682112903267112637"
  },
  {
    "validator_stake_struct_version": "V1",
    "account_id": "kiln.pool.f863973.m0",
    "public_key": "ed25519:Bq8fe1eUgDRexX2CYDMhMMQBiN13j8vTAVFyTNhEfh1W",
    "stake": "7466078259126542726635504903558"
  },
  {
    "validator_stake_struct_version": "V1",
    "account_id": "lavenderfive.pool.f863973.m0",
    "public_key": "ed25519:AzwAiLDqprZKpDjhsH7dfyvFdfSasmPTjuJUAHfX1Pg4",
    "stake": "30215218325260022435961435186"
  },
  {
    "validator_stake_struct_version": "V1",
    "account_id": "ni.pool.f863973.m0",
    "public_key": "ed25519:GfCfFkLk2twbAWdsS3tr7C2eaiHN3znSfbshS5e8NqBS",
    "stake": "3102526369640411151678859285501"
  },
  {
    "validator_stake_struct_version": "V1",
    "account_id": "p2p-org.pool.f863973.m0",
    "public_key": "ed25519:5qyxefArHQfABdNv9ELuEiWcEo7DTzABM9LrMAKTCY3Z",
    "stake": "100198001398444504508422270154"
  },
  {
    "validator_stake_struct_version": "V1",
    "account_id": "pathrocknetwork.pool.f863973.m0",
    "public_key": "ed25519:CGzLGZEMb84nRSRZ7Au1ETAoQyN7SQXQi55fYafXq736",
    "stake": "1716080041801977779897178399888"
  },
  {
    "validator_stake_struct_version": "V1",
    "account_id": "stakely_v2.pool.f863973.m0",
    "public_key": "ed25519:7BanKZKGvFjK5Yy83gfJ71vPhqRwsDDyVHrV2FMJCUWr",
    "stake": "5536803168134829098864689871766"
  },
  {
    "validator_stake_struct_version": "V1",
    "account_id": "stakesstone.pool.f863973.m0",
    "public_key": "ed25519:3aAdsKUuzZbjW9hHnmLWFRKwXjmcxsnLNLfNL4gP1wJ8",
    "stake": "1884761660283483727605426573806"
  },
  {
    "validator_stake_struct_version": "V1",
    "account_id": "wolfedge-capital-testnet.pool.f863973.m0",
    "public_key": "ed25519:CQEMcPQz6sqhAgoBm9ka9UeVcXj5NpNpRtDYYGkPggvg",
    "stake": "4110455987307868059339044490"
  }
]
'''
'''--- fixtures/e2e_header.json ---
{
  "prev_block_hash": "5dbt6rh82Xx6nNG1PuKoQj96g4jnWw6cyb8HNWPPkVJE",
  "inner_rest_hash": "DZT9p28adyuiTSbUV5bsuPRxX9K7R1bag1AeUEMhm4bh",
  "inner_lite": {
    "height": 154654776,
    "epoch_id": "FsJbcG3yvQQC81FVLgAsaHZrMBFbrPM22kgqfGcCdrFb",
    "next_epoch_id": "Fjn8T3phCCSCXSdjtQ4DqHGV86yeS2MQ92qcufCEpwbf",
    "prev_state_root": "F2NNVhJJJdC7oWMbjpaJL3HVNK9RxcCWuTXjrM32ShuP",
    "outcome_root": "7SYchEDbwawjP2MVfZ2GinP8bBQU1hKFRz34b2ZzG3A8",
    "timestamp": 1705334624027402581,
    "timestamp_nanosec": "1705334624027402581",
    "next_bp_hash": "AcNatyPz9nmg2e5dMKQAbNLjFfkLgBN7AbR31vcpVJ7z",
    "block_merkle_root": "3huzCnEQhgDDMWyVNR9kNbQFJ7qJGy1J4MBrCJAWndW9"
  }
}
'''
'''--- fixtures/ids.json ---
[{"type":"receipt","receipt_id":"Bcj5ipQD9e4dw2rZYEKq9UEcXWRaaCJswziFT6EDMSdq","receiver_id":"wallet.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"AUE2x5y4s8sZDRfaTMznW2Kx9uTgicQG9fzebvBgqq9","sender_id":"hotwallet.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"3UzHjFP8hVR2P6JJHwWchhcXPUV3vuPCDhtdWK7JmTy9","receiver_id":"zavodil.testnet"},{"type":"receipt","receipt_id":"hQ4NQefXahZR8LcsTKWQPKi81zCFKfCJsyMewoxmg9F","receiver_id":"perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"9cVuYLKYF26QevZ315RLb9ArU3gbcgPc4LDRJfZQyZHo","receiver_id":"priceoracle.testnet"},{"type":"receipt","receipt_id":"4JkyYYCCFjbMpbLmRWYHEEXkpKeV6AzVfhJck7rGKudn","receiver_id":"v2_1.perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"9Zp41hsK5NEfkjiv3PhtqpgbRiHqsvpFcwe6CHrQ2kh2","receiver_id":"hotwallet.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"3z2zqitrXNYQs19z5tK5a4bZSxdx7baqzGFUyGAkW9Mz","sender_id":"zavodil.testnet"},{"type":"transaction","transaction_hash":"6qTggNtcCeks9pscLxmFHSzDe6bnfy4sX8WBQj6MYU3X","sender_id":"perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"3gSQ6tZE7M5tkRSoNbMERTRR45QErXiAGEYjodzWcGTL","receiver_id":"operator-manager.orderly-dev.testnet"},{"type":"receipt","receipt_id":"8N91Gtum3vSHSe66f1atCPAztTi2y3zXUNFZYf7qXoE8","receiver_id":"operator-manager.orderly-qa.testnet"},{"type":"receipt","receipt_id":"9ZuwWLYnYUGvTeMMBU5KubP4xMGbfMJ8gt3r1AeRHus2","receiver_id":"operator_manager.orderly.testnet"},{"type":"receipt","receipt_id":"CjaBC9EJE2eYg1vAy6sjJWpzgAroMv7tbFkhyz5Nhk3h","receiver_id":"wallet.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"yZmQCtrnz7CauPqAjYVFNLokzgWm8QrdP7mNm6Y1nBU","receiver_id":"asset-manager.orderly-dev.testnet"},{"type":"receipt","receipt_id":"26YmnfTUCCL77VxjARA8jnCzupTAQnD7JQLvGDhEA4h8","receiver_id":"asset-manager.orderly-qa.testnet"},{"type":"receipt","receipt_id":"BgPrJhYfC6gNh4pYMQ3BnPWPMgBDphLH3H8RNnW27tAc","receiver_id":"asset-manager.orderly.testnet"},{"type":"transaction","transaction_hash":"3V1qYGZe9NBc4EQjg5RzM5CrDiRgxqbQsYaRvMTyU4UR","sender_id":"hotwallet.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"4VvKfzUzQVA6zNSSG1CZRbiTe4QRz5rwAzcZadKi1EST","sender_id":"operator-manager.orderly-dev.testnet"},{"type":"transaction","transaction_hash":"FTLQF8KxwThbfriNk8jNHJsmNk9mteXwQ71Q6hc7JLbg","sender_id":"operator-manager.orderly-qa.testnet"},{"type":"transaction","transaction_hash":"4VqSnHtFPGsgRJ7f4iz75bibCfbEiqYjnyEdentUyvbr","sender_id":"operator_manager.orderly.testnet"},{"type":"receipt","receipt_id":"57hyHzGLxcYGgDyqeGPTVN6J8Gms4CVsjqFsySA1B9qc","receiver_id":"users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"AR78eh3QNfyyyy4UV2a9bax9zkudrP9zphCa9nDyeBcv","receiver_id":"ykaju2a8jcfg.users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"3sPxpYGTXYfNT6FvsrwUi9M8MMcuoahpAs3powS29XJH","receiver_id":"perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"7twejH9ZMD4t4zdLtJqANKhG37bckia8RLX5494Fw1SM","receiver_id":"relay.aurora"},{"type":"receipt","receipt_id":"DgRM8CNGkMokkhqcYFLUL39AcQ89a3AsNQrs4DynVohm","receiver_id":"v2_1.perp.spin-fi.testnet"},{"type":"transaction","transaction_hash":"CQno9p4ea2A8TyYddGRJTr7Xh9ZSq6uP123QqR2r9nM1","sender_id":"users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"AAoyzc41aoKjua4k9fJLEA5nGXFa9LMWWHtGKanJzscj","receiver_id":"aurora"},{"type":"transaction","transaction_hash":"FcQx6PWhDpHLyQJWd4HhfZ2xrkUcBfa3h57zsEtxwV4g","sender_id":"perp.spin-fi.testnet"},{"type":"transaction","transaction_hash":"DsjV3URFPGbVcFbWrpR9zT5BrrhzAZFG4n2qh8zSe7jX","sender_id":"relay.aurora"},{"type":"receipt","receipt_id":"E3uAZcoK3z2Vwmngg7epGy6LyHMvC5fJQDHjwwjgb5E5","receiver_id":"hotwallet.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"B4LoLw8na3PEtzo1ngh7iXcpWUR4Kv2SbwERrtRxCHip","receiver_id":"wallet.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"7Pk6Lov1rqkYeAJgnT82EySuokoVPyN8w4aMEQdPVudr","receiver_id":"oracle-2.testnet"},{"type":"receipt","receipt_id":"3xxbDeKJQS6EmbtTELWuUJ3Zou4LTF27LzZbcLXCEHbU","receiver_id":"priceoracle.testnet"},{"type":"transaction","transaction_hash":"9AvZKNAmK94x8hqwcshNDmmRu3dMUQv7eNZXR2WuE6nt","sender_id":"hotwallet.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"FsdqZDxLcaSWoopSCAXPpNUkA4nr1kUkuzxBukkNqTv2","sender_id":"oracle-2.testnet"},{"type":"receipt","receipt_id":"dBsQDEoSDijFTtZPdYHEkGUB5sWZg1XAvbRhxa8Jmpi","receiver_id":"users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"E4kHaTr5DroFkKXJUrzfXKtPRjyR68YAqGyb3dSnKGuD","receiver_id":"lwjdvlvzfo79.users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"5FJCmPzb9Kfxesf1kbNnoJ3ZxbPQ4yj4EZhbsKjcCoqr","receiver_id":"perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"CokutTqGaabTnrKSi13bAUzeECdwByMRnj99BwRG7fRu","receiver_id":"v2_1.perp.spin-fi.testnet"},{"type":"transaction","transaction_hash":"BvnUudsAkCaKvVvJ74prZFXds8PdpE925p8xZmRjYJ2C","sender_id":"users.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"GikmFvGMVn2UeJEcnDjN3BMEL5YmgCUypQDMBXLvW5g9","sender_id":"perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"5ypE9P9j9ASjmunm6kSLrTtuJ5HByR6Hf3cCKrqffRS4","receiver_id":"operator_manager.orderly.testnet"},{"type":"receipt","receipt_id":"68yQ89pQowx5DKFgNpgL4zcwrKgEaN96xGXmZZ8jBMzL","receiver_id":"operator-manager.orderly-qa.testnet"},{"type":"receipt","receipt_id":"EfAZduDmKxNoMSYDqHEpD2nuBXJhyaCyeWtDhRnri9d1","receiver_id":"operator-manager.orderly-dev.testnet"},{"type":"receipt","receipt_id":"8mUxUveBaHz7fi3ZS9kN1Ss6fkeBqvuR1pSeYWdunMXS","receiver_id":"asset-manager.orderly.testnet"},{"type":"receipt","receipt_id":"AYUaHUAxBUYKt1ThDttNatx7XV5FKH9bFMWmmrhWWU7y","receiver_id":"asset-manager.orderly-qa.testnet"},{"type":"receipt","receipt_id":"BxkNFzGUUBafcn8PY9X4vgDT9KgZNhUkbU7dsCXd7hNz","receiver_id":"asset-manager.orderly-dev.testnet"},{"type":"receipt","receipt_id":"5gg7aEBjbuKKvYogcbLRjB69AXfDXkGeSsd3P1qMhB77","receiver_id":"hotwallet.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"2awfPH5inWJgnDKToFrbm516MofkvJG5A1NR8b3ky65p","sender_id":"operator_manager.orderly.testnet"},{"type":"transaction","transaction_hash":"8WC45pj89X8RXaSXV13yKh3gmpVMaChBDskxYBisFg8g","sender_id":"operator-manager.orderly-qa.testnet"},{"type":"transaction","transaction_hash":"EQqdHTCe4ZYc6NKGeCbE89SV9Ft86wWpVyXVjACM38UP","sender_id":"operator-manager.orderly-dev.testnet"},{"type":"receipt","receipt_id":"GCaGAJ9yBJtg3RJxafAwT8M7jQgUcWcADg1ujHEii194","receiver_id":"wallet.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"4jEzH53nTjHjWDu8BiJaFQZPBP3T57XM5q971vQjB8kN","sender_id":"hotwallet.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"DcvY1wVUk5YsTL1s6G4K74gEACyrpeXAW8XUC11yib35","receiver_id":"perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"3Z6Ki6NtKAPqYjGbkUTnNQ4fc7bPPDVFvcvfoM5CsvnC","receiver_id":"users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"EMpoVsh6yt2xYghBDVC8HscXzUeWHJrZEwW1Kk6MXydq","receiver_id":"v2_1.perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"E47awk7rt6vrFewuYdDM2N6qN6TbFKKm3jZbQUHb53fb","receiver_id":"73uvy8y6kxr8.users.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"HwhMdANKVFq6dPLuADeS5KZ67Rde2gUutZ8S2gXuL72Y","sender_id":"perp.spin-fi.testnet"},{"type":"transaction","transaction_hash":"5eX8FWckCEiaRL19BbFHM1N9TbzdFZZWj1mN7dXr6ogv","sender_id":"users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"C7NiDYZbbuQLGDnvB62tadnb8kWguYVVEWqaB1QStjba","receiver_id":"oracle-2.testnet"},{"type":"receipt","receipt_id":"Cgm82SB7JNWPTDh5dbyzFLvE7kvp3A87Aqz5RqeXT71g","receiver_id":"hotwallet.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"86bhXNvcUjTz1dLVdNLWBxo1A6AUBso5wSHuordGHCxR","receiver_id":"wallet.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"6WRoqR8Zq87YSEop8xsBG7QyRxGJ4dH3w95v1NcQvyDm","receiver_id":"priceoracle.testnet"},{"type":"transaction","transaction_hash":"D2jCP5FAYbuAjyMWV1Fv3HqgDMKCdeAQMC98aWZN8TGr","sender_id":"hotwallet.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"FfDx9vhagyqLCxRBoxa6ZXqVgczhHaPuRpBY61ktpM19","sender_id":"oracle-2.testnet"},{"type":"receipt","receipt_id":"DheV2jZJEuq9RSAopQuDXgFsfwB5BsKE3yV18jCfVjbM","receiver_id":"users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"53vz1by3LYYKzDZcJskcUm7Smv297wWFKPSvwD7pLJPd","receiver_id":"dtazz1s6wte2.users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"Hcy5vxQWYvGdrmevVaz6248Tg1k3QZtHQu1hUUsvoxkD","receiver_id":"operator-manager.orderly-qa.testnet"},{"type":"receipt","receipt_id":"7MbcKn6ajP7EC34tEFj575rZBwDLPmJqQ5eDySkPeKAx","receiver_id":"operator_manager.orderly.testnet"},{"type":"receipt","receipt_id":"DYuZi3qLKAEGWFKBMCp2xA5HyH8oS6EWuzzeQuxQEXda","receiver_id":"operator-manager.orderly-dev.testnet"},{"type":"transaction","transaction_hash":"AZ18KJ6W3nJ1JScJVdAxm8j4cqHnc4XTGFpSCitQadTf","sender_id":"users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"AsZ8b8QYtK5Fs8XUDEmEx1A2at9bWr8r1aS8VnLcEtd3","receiver_id":"asset-manager.orderly-qa.testnet"},{"type":"receipt","receipt_id":"CAvm9Arji4Kpdvcp9xk9qc9p83i2P2CfRMm9jyo2DFfi","receiver_id":"asset-manager.orderly.testnet"},{"type":"receipt","receipt_id":"7jrdAT6NRQjDnpDu8QmUAbZ6oyLjEgMwzPLZsXpRPQVC","receiver_id":"asset-manager.orderly-dev.testnet"},{"type":"transaction","transaction_hash":"DR4FE9zXS1cQaAGU7f7y78p9yn4akVQHFEskSH2PD3Vh","sender_id":"operator-manager.orderly-qa.testnet"},{"type":"transaction","transaction_hash":"HcsL2SBdF8LtjJsFos6NkqpueMn1s1toYD77SdB5szy4","sender_id":"operator_manager.orderly.testnet"},{"type":"transaction","transaction_hash":"9LXG1JNhvuPfdo9fGZvBacxXe9NAASSPZmsW4mpCn1f4","sender_id":"operator-manager.orderly-dev.testnet"},{"type":"receipt","receipt_id":"C9TSpXgbu7YRJ5Jm1dMuj8KfMLH7eJHxk2jENteGJzCP","receiver_id":"hotwallet.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"9RBAJxHTEeE5v9QQAeZANNq9ydTTc87jvuGyrtCdo63P","receiver_id":"wallet.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"AkmPwHhqviQSNv3Ee1TGFg4EuHK62fPMyTrykJXfJGom","receiver_id":"perp.spin-fi.testnet"},{"type":"transaction","transaction_hash":"GMDVAQhmhe9TEhpsY74FgJeL5QU1aMwqQz54BsSQ885T","sender_id":"hotwallet.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"FnLggXc5oiEjiEgeQYQV6BQsYKnPtramMMMiU2ZedANe","receiver_id":"v2_1.perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"8gpNzBHQBH9ZWrw7cA8BAqw5ZRyNWbg1pDPoK8U6JTud","receiver_id":"users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"GGRLsLh79FFtCDfDMSwt15k2DTiho39WXRPqMd4SANRK","receiver_id":"zavodil.testnet"},{"type":"transaction","transaction_hash":"6eqiiQjc2N5HGMbQMzwuBtniQFtpWhetc1aq3yEuWJsA","sender_id":"perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"F6R3jvNT91MnjQwYEJ53kzak2EN49UPd1EHBWB9vi9Vo","receiver_id":"12fbh1glcgat.users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"8s2tqX1x8TJqS7enoMU1gsxp4hPExUkc8zg7nND4Pfj1","receiver_id":"priceoracle.testnet"},{"type":"transaction","transaction_hash":"9qjjnRnuiJhgFAZonH9zfVcw7P437DdMMsa3aXQxqkRA","sender_id":"users.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"DF7N8Add65ksvhLofgN9W898jK7DWxhZhe6F51HLohBg","sender_id":"zavodil.testnet"},{"type":"receipt","receipt_id":"nYio38Xrm5wY8WmJSdQ9tEo9Re7wSF2A8mT8rRSxFa6","receiver_id":"hotwallet.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"BYBGZKDmuUwaFs5c26i4UXM3Kv2KYZFQkb92J3YHrCoV","receiver_id":"perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"4H2tHD5PQ4NxFiJRZq7jos5Df4jQgM5ig2jaX1NQMTrY","receiver_id":"wallet.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"FB4bRfgozXaHu44zTCgq12FUoZbJt1Vv96KQGbzjTJJz","receiver_id":"v2_1.perp.spin-fi.testnet"},{"type":"transaction","transaction_hash":"CvozzbMChCeAKg6jm7UgJuqrA8KkpWPsL5mcnbLcbiqk","sender_id":"hotwallet.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"GoRr9hrxMarjxNAcwwREeRbSBT1RYstPeNQaVajJurff","sender_id":"perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"27dU68Bf5EVKv931qQGzpAEuKFrXYcrdKg11jdwRin6S","receiver_id":"operator-manager.orderly-qa.testnet"},{"type":"receipt","receipt_id":"4sZCtWBxQUFXR1YtYhFn7Fn786fNtGMhqfbPw2wEr5Wg","receiver_id":"operator_manager.orderly.testnet"},{"type":"receipt","receipt_id":"uUomhhuxwhUkrj6dCddfHdbbY1paygejSAeJyuwkBZH","receiver_id":"users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"GHe3crwmPJZ4fU9yQieVKsS5BYLbrAMbxgPbvpaTmqFt","receiver_id":"operator-manager.orderly-dev.testnet"},{"type":"receipt","receipt_id":"97x4tdZRgSWHsDFAfZbNFyHzAWRBoNmaBum4Uw92m1bL","receiver_id":"asset-manager.orderly-qa.testnet"},{"type":"receipt","receipt_id":"5dYTWJ4sUsQXgNYbZLYnFJYEBGnxFxfrcNzhZcouWT5j","receiver_id":"asset-manager.orderly.testnet"},{"type":"receipt","receipt_id":"GccuQBBSBtknXJyWwXuNdgiGi4QGvYeyKhPvcuwR2Xii","receiver_id":"68frdria49vm.users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"GjDGzTvKHX3syTJXNwV53Vx7FYnUkPojrfcaN9Q6DpYx","receiver_id":"asset-manager.orderly-dev.testnet"},{"type":"receipt","receipt_id":"AU5NoxAG5a8GKxWSNncH915uDaCUSQnVRNrZnQ6vwia3","receiver_id":"s-lam1.testnet"},{"type":"receipt","receipt_id":"3cWJrJmaewhX93UnduHRU2M8sW8F8qwEoD1xJsBTaJSs","receiver_id":"price-oracle-v1.nearlend-official.testnet"},{"type":"transaction","transaction_hash":"8N8K3idQm4yFT6jn9wwTh7jTj9XiG564T6T67yqyVWqe","sender_id":"operator-manager.orderly-qa.testnet"},{"type":"transaction","transaction_hash":"9sc3pjhPHAsGJnH9ui68kht4bhNCzBPgYatpR79Cspm5","sender_id":"operator_manager.orderly.testnet"},{"type":"transaction","transaction_hash":"9FCCaaeYwSHgaYfGquGAWheCHpKwNPfWHnWBi78vFR5F","sender_id":"users.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"D7mcCM26QXUxvMbPTfmw1jeZRYTLQdBTZDpDXqdYQMEW","sender_id":"operator-manager.orderly-dev.testnet"},{"type":"transaction","transaction_hash":"AdyN4mXDa5UoLCf9XQTQ7HvQbQ2g24VcATDVGWhy46zq","sender_id":"s-lam1.testnet"},{"type":"receipt","receipt_id":"HezCULqMkxpwQkbxSCtuhHac9deHyLPZ6L9D8QMEEFHq","receiver_id":"perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"DCvFdk3n5cWvD8NVQ7hgBVVrYcKB29A6RewxXPLMwKP","receiver_id":"hotwallet.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"8ztnGoe1e2mVN6giAzhopE27CUBbJKHzictagWFv6eUf","receiver_id":"relay.aurora"},{"type":"receipt","receipt_id":"4KHMyieDVBVgw7H4jB7GFsgc5WVkkkkcuWjHUWhoxQ9m","receiver_id":"wallet.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"8MVX9Yjj3uzUZXYvL2VCfyrGASbij6ghR2zQMpDtf1s7","receiver_id":"v2_1.perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"AAVFCoFRqVdjurTEGMZL4jSp2oZtFqtTcAGb31KNxtyk","receiver_id":"testnet"},{"type":"receipt","receipt_id":"Eo5fKR6YaSBzKW9vJUtVADEmoiAqqCSVutVYpvNm27Ry","receiver_id":"testnet"},{"type":"receipt","receipt_id":"9Dv2dZx3Fe6RffSRN8eTML6Ad4NwwWMbMVDbUMrXoF5W","receiver_id":"aurora"},{"type":"transaction","transaction_hash":"HM18RA6nrZYjdXz8q4HbWaqxteae64K5WoXv1rnfe2Uf","sender_id":"hotwallet.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"CQNbeL8ggXuZhKHEDzsi3rNi26Tza8eHFXCY3M46U1JW","sender_id":"perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"8TGttUnnyfpVvxjjqXjy8vkKwb8uNwBkwgpnXizVaco3","receiver_id":"dev-1705307954732-23212261612584"},{"type":"receipt","receipt_id":"F69bauLbRkLHU5z8Rpwtj5oRyqiFr4XLhKKt5JMaB3b8","receiver_id":"dev-1705307954716-26005621820061"},{"type":"transaction","transaction_hash":"CqVVswF3dEMQ8uJciL2RC19txKwsKm1CiJU1YDNxnJEV","sender_id":"relay.aurora"},{"type":"transaction","transaction_hash":"Bkc69B8zVNfwoukDZptpcG76rhgE1ekvp21roCLa3k4b","sender_id":"testnet"},{"type":"transaction","transaction_hash":"4LW882GsjTojrXSqLEcLYRD4Dfns2bbTaizpfEWDXeAR","sender_id":"testnet"},{"type":"receipt","receipt_id":"8c6ePJ4xvUKB24z9146bjRXdCfX2Rqx7zxYPVG127M4K","receiver_id":"users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"3AqgqHdwYWWwFC3qWU443bDNS3vxRSTdj6dMUpzxvKoi","receiver_id":"vvtjqhhfnrl2.users.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"4zzAH9GA3LfzcKuH5eRzM7ywF8PLADuCsFNb6fva6f42","sender_id":"users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"HdxzgzSZJjcBxYpWNMK6UpdEpoTKzpr4SrEvWVtdF97s","receiver_id":"testnet"},{"type":"receipt","receipt_id":"J4wZi1ydzgjhuJgwL6UYTN5TkHYha9S8zRoGvoCNft6w","receiver_id":"testnet"},{"type":"receipt","receipt_id":"ECiFmZbnGkp58AknPRNJdZM7VjQ6NxRRsFsJ2Q1pJDzy","receiver_id":"perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"7RuTSrDAZhAkXLqxYKoPqZv9mHKvWJdT4BxAtq6SKVEq","receiver_id":"dev-1705307951157-46295630099921"},{"type":"receipt","receipt_id":"84Tscq1mQuNq6rtp1YVcBGwZcv7nnmFY58ekQ5ZpN2xj","receiver_id":"dev-1705307951144-39784510361521"},{"type":"receipt","receipt_id":"699GLHexZMhH7HKdkNBQMktTMDr3AvdHpb5Pdu8CeLkC","receiver_id":"v2_1.perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"acAXEvqvNxYbJXDa34ApA8XHdXFtdZLUmDWz7s6cvM9","receiver_id":"hotwallet.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"7z5Zc7jojgmPz8HkF1KkNDSAy2FTMtXbhwTwGhfxjBw4","sender_id":"testnet"},{"type":"transaction","transaction_hash":"64ViGfWopTMWyTgdDqvZU5wigx6m4ysfQFAeH8bKP8JX","sender_id":"testnet"},{"type":"transaction","transaction_hash":"HDXxhUfEnooUb3B4Earft18ibBvWdTs3Bk9SDKv6Nd9W","sender_id":"perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"G9i4dZgzDZzgBrgBEtooLm9cVVBJGfaqBtjFm4cdnVPa","receiver_id":"operator_manager.orderly.testnet"},{"type":"receipt","receipt_id":"AjhoYqQrYhq6mAz1LP47YLxfssDCK9V1jZ3gKDMMAM9B","receiver_id":"operator-manager.orderly-qa.testnet"},{"type":"receipt","receipt_id":"GVHMrJZY6VGaKhY5Ay2uihGHK5wtjB4qBBdrRsXLaFLr","receiver_id":"wallet.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"4rGJ7mSkt8V4tgYHjoNLc3s4BxaqkQTszxrftDtJLFAQ","receiver_id":"operator-manager.orderly-dev.testnet"},{"type":"receipt","receipt_id":"2iTTQdUQCwGDCVVYWKdCxrznMgP2tHnpjsnq27SVxJte","receiver_id":"asset-manager.orderly.testnet"},{"type":"receipt","receipt_id":"A4nZmcuzmchT1QDiWs8yeBZ134bovwBWibuFScFork7f","receiver_id":"asset-manager.orderly-qa.testnet"},{"type":"transaction","transaction_hash":"D9aMyFpgBQk1CpPTrhEqgdKEAcPF3NexeWBXmf8d4B2c","sender_id":"hotwallet.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"Gfgs99YvvGae9q6z5WDMpdhVkAHmwFjZ7yk8p7Jsbit","receiver_id":"asset-manager.orderly-dev.testnet"},{"type":"transaction","transaction_hash":"GSiDVPdWYQFJ8WrJrXbQa7az7qAFzfR4WYK2snNDxWJv","sender_id":"operator_manager.orderly.testnet"},{"type":"transaction","transaction_hash":"qnLPZdSybWhkUQEwG8vHGtFMcHuKtUoWX2oHYnxVfCC","sender_id":"operator-manager.orderly-qa.testnet"},{"type":"transaction","transaction_hash":"Gqn6vq2QNL8NbhgW9sDKgbCij2TwUTtuGDWr9gybfsbk","sender_id":"operator-manager.orderly-dev.testnet"},{"type":"receipt","receipt_id":"4X8euaFjsFZP98A1bCfkgDMFashgtSxHns4mU1ReZWPY","receiver_id":"users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"AcAenoXYdKTu3AvLGScBnXsPG4vedWs1hcysRnksB1RB","receiver_id":"perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"E4sgW7Ucyjp9YHFiJZTdoGtUAvdGAFYSNKCht1BJijN9","receiver_id":"y1rifte3q9bd.users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"BZekNMxiCSkanDBWc1ayTE67uFra3gsXvvA8ZNeyaNS8","receiver_id":"v2_1.perp.spin-fi.testnet"},{"type":"transaction","transaction_hash":"68QsmAVyaVft3WWJ8FhitTuVGosnQL5MJMNZD4SNpN4f","sender_id":"users.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"8grJwgNZjCX2358axxFnCMr8T9mvK9choDYtcG5juBWc","sender_id":"perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"BX4d2vHY1EYVAAkBQhHsJZQbumaaDHjBTejGNiYwMaZV","receiver_id":"testnet"},{"type":"receipt","receipt_id":"2Fzou4H3regnvi3BmwhxzuebvqGscqrJXNouqrLLiNYJ","receiver_id":"testnet"},{"type":"receipt","receipt_id":"3anHYE6zuA7J9Tid2U3WosdSUaZkDMNUozg5qvh1oMNr","receiver_id":"dev-1705307935659-11845443462054"},{"type":"receipt","receipt_id":"C5bdGmjQY7GqmwwJf9yUZMZ6CkSDFmYHSNEGQCGskByc","receiver_id":"dev-1705307935640-33745202086023"},{"type":"receipt","receipt_id":"BvkNQa76y6nCDvn8Yw6KRHuvF3yvHd7a1Ce1qacVa2DB","receiver_id":"hotwallet.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"HNU4FP3FUbor7AAsnUSYmmM9teL5km3hQNSJEeLdHguN","receiver_id":"wallet.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"Cqn2FgbLvt3dApw2DdY8NBHLmhdk5ALBrYCNWRLnNsA4","sender_id":"testnet"},{"type":"transaction","transaction_hash":"ETG5NiqhbrqbhUVRbKMyEXcLX3Bus6ZhoR6rGraUVuVx","sender_id":"testnet"},{"type":"transaction","transaction_hash":"6XvR3i2zvweL91DPj22DB6ocqw3VCewcaTJ8dDCvu7xQ","sender_id":"hotwallet.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"4KqpmX1QL1dTCZFmYx7nKeEVZEXysjG8jdGrnoCZ1u2h","receiver_id":"users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"CGJ8FKxudQhrskhj8tBAgyYEhyz7kH3VowRVycfYnEBb","receiver_id":"perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"9tSG4wHi3pMrJz8wcj2ugaFNfgjokCkNh313kj2mAZsh","receiver_id":"v2_1.perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"2EmQBak3VUFpU8LkSvB2qodqY6u8xehoeN19TekNRjh9","receiver_id":"c1c4pchrv82x.users.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"Fkp93fAsqEabGsXrP2spXwjeTjZ1NRoarugAgmdke2ex","sender_id":"perp.spin-fi.testnet"},{"type":"transaction","transaction_hash":"UgpM3HsF8R5x24qoYYkqo2tY9Ha5VGDovbXCa7Qo1DF","sender_id":"users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"EsXjsen7ofj7cYDu6wcR7kdFUFK1yVWwKU8JGzPGbUcW","receiver_id":"operator-manager.orderly-dev.testnet"},{"type":"receipt","receipt_id":"2PefNKhfkQfkY8UuHtXDDq2zgM6pyBt9or9ToTtCWs7K","receiver_id":"operator-manager.orderly-qa.testnet"},{"type":"receipt","receipt_id":"E9NijeLA4QshKLWJzVDy9La8LPAbiYyYA9R4qxnC1FnK","receiver_id":"operator_manager.orderly.testnet"},{"type":"receipt","receipt_id":"EKm17Ay3rcXAnJiK18fQhRCKG2rE8e6nn4bQvpRGYxWV","receiver_id":"asset-manager.orderly-dev.testnet"},{"type":"receipt","receipt_id":"BVmRaPbPeE15LjacNnu7cA4Ga3mBQnA5VoGAeyHMuAia","receiver_id":"asset-manager.orderly-qa.testnet"},{"type":"receipt","receipt_id":"CXoi3YEf8NZDnUBufEXY3wGWwHb8ZnG6XZ63gvhnXCbb","receiver_id":"asset-manager.orderly.testnet"},{"type":"receipt","receipt_id":"GhQRQfBsyJceeiU5Jtd1HP2YGkNMohbsARRo8t9vCc8n","receiver_id":"hotwallet.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"EeyfPx8Kp6XqFYj6F78Jet19RjAJwW1XQi8zQ79Akq9a","sender_id":"operator-manager.orderly-dev.testnet"},{"type":"transaction","transaction_hash":"ANTjxVGXXdERtH52Q6CUV6KUfkSqP1gpQQsubMk48w7e","sender_id":"operator-manager.orderly-qa.testnet"},{"type":"transaction","transaction_hash":"4JFfdWzCWz1vu28TxUeGQdTUoQmDMtvYpYRVpNH2AVXn","sender_id":"operator_manager.orderly.testnet"},{"type":"receipt","receipt_id":"9Ufq1ofQkCoGMwutrxm4iLMS4pKR6GTzp3YQzFhRvb3L","receiver_id":"wallet.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"DoojfJrNoovzoJSnLP1jHwFgZT41DKA4ruBx9jobHhpK","sender_id":"hotwallet.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"BAqhtD62ezehhGUMXZhhUWLeAC3efZMEToPZephtwD4i","receiver_id":"perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"rMCNpYUtzjnfcnkwtUF3VERMezq8yVpsVgse6DyAnGF","receiver_id":"users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"4Bxxfd9nDMBJhJWTP1Rem6K8zZoe7PU8DZmiHrkQYicj","receiver_id":"v2_1.perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"6HwrBUmZyCmzP3EQNKsf3Kt6PMJW4RMYT79smyyjCnTo","receiver_id":"cjf9jw75emqs.users.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"7BRVmMb2gJTwex8eY18Xp9N1xUz876b1BtcffjFRj4PF","sender_id":"perp.spin-fi.testnet"},{"type":"transaction","transaction_hash":"Bcj4bZdat8Crs3wPcL5vcyTQJgsQf4mjCM1BgkpQ8FcJ","sender_id":"users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"Cxp89bX52LDTWganpMUv8Qqw36jmnp4UgpmvyW1qNQf7","receiver_id":"hotwallet.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"BNntaXTfaN7GF134qEQARdNpeVSFmX6FxNNeijq3JHZy","receiver_id":"wallet.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"GaSy31UJvqWC8mMmjEeF3qfzm6DqMLtL1oT9CRVCvuUW","receiver_id":"perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"66R4sNtB27tbGk5VUxzeuczVVBNXkD4gZANZdE28SVbr","receiver_id":"v2_1.perp.spin-fi.testnet"},{"type":"transaction","transaction_hash":"4XJQg9N2PKDCxYJ5hftSNwGkBdGf8TZAP4i5PGV7to4V","sender_id":"hotwallet.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"7ALubTZubmVpYHPMqjqr39isPBcMB2rVgzJ9bTunANU7","sender_id":"perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"BEm6cv8nhb5duZjfYj4avo9r5kFTEQg6qVQ5wwcv6Q9G","receiver_id":"operator-manager.orderly-qa.testnet"},{"type":"receipt","receipt_id":"3moyEexyEdLjpshaMRxzTVASS6WWnifunT9m3oaBPdME","receiver_id":"operator_manager.orderly.testnet"},{"type":"receipt","receipt_id":"3P9sYM7vQMVuv4arcqE1nj3Gf5iRpdXoV22geJNK5by8","receiver_id":"users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"DHFa1o8Zo6V2TZ9BQzYxBB6Wuuj5NWmrVYdcvbCsw7RZ","receiver_id":"operator-manager.orderly-dev.testnet"},{"type":"receipt","receipt_id":"AAMLmTEDmxu2J39982G3eeyBhcSCFxXqA6HwVLZ4Pzjm","receiver_id":"asset-manager.orderly-qa.testnet"},{"type":"receipt","receipt_id":"GiYZ5AbHkgKnq9k88HqrB7Unp9BMcukUVraG7UqJU8KY","receiver_id":"pgqqae3lbkkm.users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"8wR6f4uGWHTdHTfTbt4w38Emeo7hB6CQ1e9J4mLEggiH","receiver_id":"asset-manager.orderly.testnet"},{"type":"receipt","receipt_id":"ZDTRHH5q5GipARy6ab5gXmiJ2hnjwmmdfM3ryDQV6pz","receiver_id":"asset-manager.orderly-dev.testnet"},{"type":"transaction","transaction_hash":"3YGSU9Ke48Hv9r2946RjUg17qPMq9yw3JU6aVfD6PyWW","sender_id":"operator-manager.orderly-qa.testnet"},{"type":"transaction","transaction_hash":"HLDEMJsKFwJT4D1sami9LHKpT1kiz6Lts8wQjWHgxKd1","sender_id":"users.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"81Paj9Lh6ZLbbrRWFwj6YtUoEoqRUnySrP7RXErtYUmz","sender_id":"operator_manager.orderly.testnet"},{"type":"transaction","transaction_hash":"E4hj5EpuuBuRoMLJVBjyyNrUfw9x6gJ3Hq1NmxfRL8uu","sender_id":"operator-manager.orderly-dev.testnet"},{"type":"receipt","receipt_id":"3eoN7KGVf1p3rZe4Y6gx3RfSQYK2DbTFx7gGLvWauKRB","receiver_id":"137cf7bd5cc55e0bd42456532b513a7fcc9047093df608fcc5f84ffe585b6066"},{"type":"receipt","receipt_id":"Y3kGVBqybHnQYEP3FWyHZHHhHvwRNWozKgetgzyTskV","receiver_id":"testnet"},{"type":"receipt","receipt_id":"KJGhxbTxkxzRHquAM7Tg2BeKtkacWHgVGRAygaVurNB","receiver_id":"perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"Cg1WuH5NWNPY225WdTvNztWFedcVgbSSbq8wr4AkELsZ","receiver_id":"bulls_acct.testnet"},{"type":"receipt","receipt_id":"4raiaa9bfejJPKxhPm2wgJ6iXyKV76KSBGerrEHoS3kX","receiver_id":"testnet"},{"type":"receipt","receipt_id":"rxtVaiHjtKpK57hFtu4rhaoPPy1aCaTzsGkjK8wyWSp","receiver_id":"dev-1705307926477-27596965257070"},{"type":"receipt","receipt_id":"9zuMFMFNLCVsMSqb6wpv3s39URXioqfcUqRrBBt8aTj8","receiver_id":"v2_1.perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"AJXvDMKP2nLLuCWbYbT8oynZbkn3qzQ6VwpzLQSARFT4","receiver_id":"relay.aurora"},{"type":"receipt","receipt_id":"Ar5nyeWUw8LrAAzQYz8FytVux6R1wihaD7pVZKwKPhTj","receiver_id":"dev-1705307926431-91453828422938"},{"type":"receipt","receipt_id":"Feq2jEYjY3VpNukMsSa7QmPYNamPBXkjLy8zkmzQ16y6","receiver_id":"hotwallet.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"37cV9JUmdi11czrUe66xz3gPJCitqMvyECRZeW9iJzyG","sender_id":"137cf7bd5cc55e0bd42456532b513a7fcc9047093df608fcc5f84ffe585b6066"},{"type":"transaction","transaction_hash":"EKXDX4RJzcnz5HuW1CErcqGcK114YsKFNotU6boXRuDZ","sender_id":"testnet"},{"type":"transaction","transaction_hash":"4wMCZ8bdfexTpKDQBshQmukEnpcjYJa76PVtwZgGJ4dV","sender_id":"perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"AV36SJ2hUUi5BAD3RbgvaTERFwEbF5hvaRFibhWtVh3x","receiver_id":"wallet.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"8Tx9DeDk7TK4XquQTsS5FdsHpW7eENYBQVNqf1UoxduP","receiver_id":"aurora"},{"type":"transaction","transaction_hash":"ETZp8SjKfSrUujvAMs4pdtgC5xScZopepkWpB3Uk4qV","sender_id":"testnet"},{"type":"transaction","transaction_hash":"EvPZftJRJ4iMAAfsRQ4J1jFHSNQnGbwsSGE7qjSrgx1n","sender_id":"hotwallet.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"8z2uWsLxQTZBmGWbGNZ58CNqHGPiqkTiPR19raz4YbsY","sender_id":"relay.aurora"},{"type":"receipt","receipt_id":"GASozGFtYVJXniCe5RYm6yTyMCFfDv9A6cieoich96dJ","receiver_id":"users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"9ewramutTHiEZWooFv12JkpWritgVHo6uDFpzEtBCZd1","receiver_id":"9l94qo4u79w0.users.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"9cafH6D9aDp8ucujqAxUB9mWByL3368sVdH98AWmYwU3","sender_id":"users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"DxWjTkvaxms5Zr6GCHPw4BxfQAoUs8JqRWK7bDKLTH8i","receiver_id":"perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"EDSTB6DfGgJ5DqQUbqkD6gqkrJ9SFB4Tyd4ECzyJSegX","receiver_id":"testnet"},{"type":"receipt","receipt_id":"EJfVvpwMsHz1NHGbkS6LGqVXN2qneGYsbkYjKajRoGo1","receiver_id":"v2_1.perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"C7h71p7NVSHpcsQAYiV7WB63yj9SMMdc3jqMoHF2A3iz","receiver_id":"testnet"},{"type":"receipt","receipt_id":"51d6aKfsbSgM22CgyqERJctboPpp2NaByfqtFnZQMa78","receiver_id":"dev-1705307919672-34015732945741"},{"type":"receipt","receipt_id":"Hdc4eCrm6AmD2ywGiJafvWWM61KDjSRr3dnQELv1RdWp","receiver_id":"hotwallet.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"9QR9rrioFSeEVkxQvj7RpbTcwdpU6NjVchStn7QLz5R4","sender_id":"perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"QyjCHQrBN143vftm2MEKVQJqqvXUeFjzo2HP71J5xV6","receiver_id":"operator_manager.orderly.testnet"},{"type":"receipt","receipt_id":"H98tSMrFViq5ZtBLdgJiyRhGB3PitwMu4vnetSznXv2Y","receiver_id":"operator-manager.orderly-qa.testnet"},{"type":"receipt","receipt_id":"6zDqK9xdiceuNN2kgejgBVXFGTNqWyuJrNVbZQMvhDkc","receiver_id":"operator-manager.orderly-dev.testnet"},{"type":"receipt","receipt_id":"85HrksDfB4Pt6CJaHQkJdVn2nqQcEdZyYcRrEk7CqMpz","receiver_id":"wallet.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"AoRcE1QxgFYQcu3nS8mkFmDmLUZd6Nfxhcdcuq3krjH1","receiver_id":"dev-1705307919784-37188855122138"},{"type":"receipt","receipt_id":"9ZLkBrAf4HjncCUw6ZykUshmArYfKneXthdzUQfREVri","receiver_id":"oracle-2.testnet"},{"type":"transaction","transaction_hash":"HDGqo5cUMMweBQcn31cHtTVm1BaQr6nnL93fv2nwjx9K","sender_id":"testnet"},{"type":"receipt","receipt_id":"9S2UPDykbH4qZJ96bKJhiATVVKc9Ta1rkPdnC8MJe5ut","receiver_id":"asset-manager.orderly.testnet"},{"type":"receipt","receipt_id":"ErKaA4gCMu6pDos3svw2RBzPectbanV7un4rtWHcwWv6","receiver_id":"asset-manager.orderly-qa.testnet"},{"type":"receipt","receipt_id":"BUGPwqY17BYfzU8BjX3EtDkMGwkbkm5ay9KpNb5zgZrG","receiver_id":"asset-manager.orderly-dev.testnet"},{"type":"receipt","receipt_id":"6Kg7TUugwUWBVHgkS3z1LKjgoKeKYz9b5gpExRijer1Z","receiver_id":"priceoracle.testnet"},{"type":"transaction","transaction_hash":"3eVHwtVhUnJEYAQHrVgAeVEDWenXFze6N1y6PJtBJ6AH","sender_id":"hotwallet.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"CdSLnmYeppgPz7WwcjkhKFo4b6bgiMWwFE8tC5yvZG5P","sender_id":"testnet"},{"type":"transaction","transaction_hash":"5D3jekGJpArngn4w2mNbHESLCvGZYwYGJkLZcAsxKXTe","sender_id":"operator_manager.orderly.testnet"},{"type":"transaction","transaction_hash":"FgMHm6aV99iJ9PsMzwUMn1nVPti4Emr25Uburc35SPof","sender_id":"operator-manager.orderly-qa.testnet"},{"type":"transaction","transaction_hash":"5r7r8kgHrMXXCDkXFkvKdViaZoes39UeZo79zvVqJPKT","sender_id":"operator-manager.orderly-dev.testnet"},{"type":"transaction","transaction_hash":"4fsVpL3nksKRYaW7MGisU1MxEXABiAjWKsbLENaeG4Zn","sender_id":"oracle-2.testnet"},{"type":"receipt","receipt_id":"4VkBk5bkzDfyzkue4hgUZ7QY2rTLaSK93CkKB52VByr3","receiver_id":"users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"G6wm8f6fKGxnvh62g4o61zLCvmqEYVRfPQJwxqQdDKH2","receiver_id":"ramptest.testnet"},{"type":"receipt","receipt_id":"4T936LUHhkJWUPNAQmiBRaLcfWmwCkjVnbiNdDacTNty","receiver_id":"kll8a7p5mh4d.users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"8fzjF1nwehiYVjJHAqZgPC1LQeijHJRpexdAzQgdLPcy","receiver_id":"0e88a35855325f20d9cbd614755797220af4afba15c037c8d6a290a89cdc8b8f"},{"type":"receipt","receipt_id":"55MWqWf3y6ZJRCE2TwGntXDuy8mvDEY3n1SJvj447212","receiver_id":"perp.spin-fi.testnet"},{"type":"transaction","transaction_hash":"2iz4fapepNdGMSTZADDpA3DK2ashTtUiZpzHmea8pAQP","sender_id":"users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"4jpCpTTV7y4VvpwHoWvjWLeu1zUvmA1orNL2ZPwDcmwd","receiver_id":"v2_1.perp.spin-fi.testnet"},{"type":"transaction","transaction_hash":"FG1TzuSaTNoZEW796SputEymKWKYbDYvgLGsn3fVeH8j","sender_id":"ramptest.testnet"},{"type":"transaction","transaction_hash":"ErDTkCmrtK6ext4WHSw3FgLgeqFFRNZ4ZWJTURMTrL4P","sender_id":"perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"4RTejskoh7Wb2KdNH6UkE492wM79AtqDFmy44YVyTGNh","receiver_id":"hotwallet.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"AXgiZXHy7kMs6mMLkSF1bQHJumdMTjaVztyHodHFaVq1","receiver_id":"wallet.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"3TPWtP3UCZTKwzXphAprtZqh8QtQtJ8Mn4LbM36uhYXm","sender_id":"hotwallet.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"632Cy5ZX2tjEFE1DSf5DXNQVKUxbCLZb92nVDDZCHzgn","sender_id":"bhc15.testnet"},{"type":"receipt","receipt_id":"2wgtsApxzGvaacLNCzEde75Nwofe3VhHBK32TcXSB7WJ","receiver_id":"users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"2ZDerPY6zwPceZHH7rMDTbKbdJkVsFpx2gWkJ1sMWsdR","receiver_id":"0q34eghn01vv.users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"8Uo3arAX2ZwLeXuWvWPn241YAV4vXxyksqSozARoRAq9","receiver_id":"testnet"},{"type":"receipt","receipt_id":"2yy5VJCjvNXiRBsAQH4oFmD71RXcbPK6RCQypoByrkST","receiver_id":"testnet"},{"type":"receipt","receipt_id":"C3GrEKzkaBoU7NfZ8P2HVtnaxXTSYAD3DR42i6LAJQo","receiver_id":"perp.spin-fi.testnet"},{"type":"transaction","transaction_hash":"FU7PmA5AUQxfUSmeY8TrZTEhDjPJXsqe18cv7G1vzAv1","sender_id":"users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"46LqbXPA6gQjHyWVdmbCWapPHUknXiBswozueZWJQEAF","receiver_id":"dev-1705307910944-61831820799278"},{"type":"receipt","receipt_id":"AachQMGn3CzQ5MJXZAhzfvZGXA4ja2oEL2LvbyAqtBrb","receiver_id":"v2_1.perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"88T25wvh8k3SXPN3Zv35PgwkBHQt8jcZn5Fws8gPTBZQ","receiver_id":"dev-1705307910940-63645215141528"},{"type":"receipt","receipt_id":"APjUhHPiLmmUcGKXLPJkisMA4RnA3XehxShHktrxAFjS","receiver_id":"operator-manager.orderly-qa.testnet"},{"type":"receipt","receipt_id":"CQiPGrmbyzb3rZvS2uPELY9gwacxpuso5gU37J8AqHqZ","receiver_id":"hotwallet.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"Em48RmHvsyPRpEF3NU3izqMV2GdY5UQkN1v5UARNU3Jz","sender_id":"testnet"},{"type":"transaction","transaction_hash":"3Wa2TD8TXXesB8P3xN3zg4rvJyHngp71PHaNNjcvwbgT","sender_id":"perp.spin-fi.testnet"},{"type":"transaction","transaction_hash":"7hk88yT21FuVHcrMyZCaTU5Q53iJzBWPt18hQUXSyqx8","sender_id":"testnet"},{"type":"receipt","receipt_id":"23jmNcxbs3QquTYLX1eNcQWbBE3RAUu27CMFC5pTpewT","receiver_id":"operator_manager.orderly.testnet"},{"type":"receipt","receipt_id":"4ZDVp1sz3wp7RwyHAGzgc7w52VedUmHCxC5J2wHfugq5","receiver_id":"operator-manager.orderly-dev.testnet"},{"type":"receipt","receipt_id":"9LqgJqe8ewcnA1nwD57MKy3MVuLWRbA4GVSxKh3qAkM9","receiver_id":"wallet.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"HrnxtphU4f61rdakx5Hs3YWwFhdNTUEnxD5jnmCCboo","receiver_id":"asset-manager.orderly-qa.testnet"},{"type":"receipt","receipt_id":"Ayb4aPGDk4YaQv8jTD5kEqMSjD9nUmMGRG94hr1H4wPp","receiver_id":"zavodil.testnet"},{"type":"receipt","receipt_id":"6XrLiZa9NNEUYUXZhWjEftYsXnUkdcPBmXqABy6pM2f8","receiver_id":"asset-manager.orderly.testnet"},{"type":"receipt","receipt_id":"EystZsb29ZCHua6howqB4rW4uoHiLmmqp1wdvggVH4Sh","receiver_id":"asset-manager.orderly-dev.testnet"},{"type":"receipt","receipt_id":"4PfQuQCRbEwBrdHvSKYJBzVk1uMooPpwg57hLeUcaFhH","receiver_id":"priceoracle.testnet"},{"type":"transaction","transaction_hash":"AdBx5TxbU6B8oMTt5ERdaEvMjQHkez4qskux4fARHJKm","sender_id":"hotwallet.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"7Ap7oR2KciE6fgrgpvv8aYsmps7F3Uehdw8KKtjxGQJ7","sender_id":"operator-manager.orderly-qa.testnet"},{"type":"receipt","receipt_id":"7FZxHdMxz2kyiGoFuFwL4AcEUM6X2ZgFRoxmaJ4qcTHB","receiver_id":"testnet"},{"type":"receipt","receipt_id":"HJUpQMwNHrJJZUmynMfjhbBCmLrtehtBKdjpaXkaMAa7","receiver_id":"testnet"},{"type":"transaction","transaction_hash":"9J1ogtDDMdnpswejteNHcdVeAUbqyJfjevLQ7pTfWpxe","sender_id":"operator_manager.orderly.testnet"},{"type":"transaction","transaction_hash":"EGhfVcoKQKyiqcxaGFbfmgC8G9qZPMuGFbJkg5hnsmyt","sender_id":"operator-manager.orderly-dev.testnet"},{"type":"transaction","transaction_hash":"3E1aJHc9djkQJNWicMZggR6YPbZkPJL7VfDQ68fKL7Ya","sender_id":"zavodil.testnet"},{"type":"receipt","receipt_id":"BfPn3CFLjy4A1G57Q31SgdmehFR1A9vfMa9CNksqdqjH","receiver_id":"dev-1705307898433-26034121630686"},{"type":"receipt","receipt_id":"BmGXFE61s3BerQpccgAZREhvTsKXfMbXqpHfuvixkHqz","receiver_id":"dev-1705307898466-81907073670185"},{"type":"receipt","receipt_id":"12YXBaXQD1pMicv2XAy8NpvHRbnE2KQQTMd2RQhhxTya","receiver_id":"users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"DrhDG7sJbYipxR1BWntNjqt6RD3nrw1nGQpV97sDpbcm","receiver_id":"perp.spin-fi.testnet"},{"type":"transaction","transaction_hash":"6xnmoEYq4cE6DBLJDHfokrSw13rEHDzNTdqGV6XcWTsg","sender_id":"testnet"},{"type":"transaction","transaction_hash":"3cwMmToPyLVgc658k2J7Lzu7gbxZuo8MPNT9PjMkn1qu","sender_id":"testnet"},{"type":"receipt","receipt_id":"3PyK3NKvdmZAR4DsYeCuQrcAMjoQU12tC6DzQ8abVt4Y","receiver_id":"j21jwivujppq.users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"C6MEJkm3Fgd5pAeGj8kcxYRvewXoMVbGeaxRXQSXj8Ak","receiver_id":"v2_1.perp.spin-fi.testnet"},{"type":"transaction","transaction_hash":"38j7iZDr9RhXYgGumBYn4cUx8d3THbT2EuoK9ey6h6cZ","sender_id":"users.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"3B9gsr6aepyFnWFU5NgrbgnkPJjorTZgLEduHn7jhLxK","sender_id":"perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"5hno1hpABWKfhZrnQNQrNeftbiXeUE2nkyV1ve8AJWd7","receiver_id":"hotwallet.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"Fs1snRARpfMPzGdd3WHALSF8pNGkPGYEVjRJTZLSexfW","receiver_id":"wallet.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"4c2qJ6koBSoAQAJmM7uyukcCdQmcvrWmFHNeoFuvevee","sender_id":"hotwallet.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"AYoR6onupvM6Gv2XSyhSyydkhzYBuwHi3TKpggeCs5Bw","receiver_id":"perp.spin-fi.testnet"},{"type":"transaction","transaction_hash":"CMDT8PFrAuBYN1BzYDMWkyYvpkS6wZwMCjG16KwYSmdz","sender_id":"bhc13.testnet"},{"type":"receipt","receipt_id":"7REkFmUqJ1kk9mAnrRknd5hheGWvszKvBx8qwvZuwVpR","receiver_id":"users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"Hcd7g9nFSKrUyPTLrYDd1cxATvL6DUHnftS5RGUtQ3jt","receiver_id":"v2_1.perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"FTKmyfNjPapcKmTmRgHRsmaL6mDtuvpLEANLJNSQNYox","receiver_id":"4wppo22o4q7d.users.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"7Mt1fobGjafwC6W1oti7D8iYxKnJwgDierLfVSzU7KLM","sender_id":"perp.spin-fi.testnet"},{"type":"transaction","transaction_hash":"5gCAZ8Njeobxrg5NsjY327361NHYh1XGgfJtkwRxK8op","sender_id":"users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"5puFb1DPWk7vnEhBCJjoxSZvVaRyfMCSQSzo9HRhzkGf","receiver_id":"operator-manager.orderly-qa.testnet"},{"type":"receipt","receipt_id":"BzVZd89LT4UsT8EdsHMj7W6B9HXhvURFYTzZyvsA5kC1","receiver_id":"operator_manager.orderly.testnet"},{"type":"receipt","receipt_id":"GEyK6YvY33af3QpTh9xgB6qSGMbH1gXSE6vhmd3p4k2r","receiver_id":"operator-manager.orderly-dev.testnet"},{"type":"receipt","receipt_id":"2yU3wbMaADVa5yNQwrteJuMtpZ11Upw8nC81KBxVMiHb","receiver_id":"testnet"},{"type":"receipt","receipt_id":"3Ef1FpTfwu5w9pZq2dMFZKXjERM5NvPyd5fqF4EcYyeP","receiver_id":"testnet"},{"type":"receipt","receipt_id":"C7wxqZ9JeFJT9dEb2L9GMiE21SQB7e85efuP7jVLJmeS","receiver_id":"asset-manager.orderly-qa.testnet"},{"type":"receipt","receipt_id":"9fhVYpxUvRtofxxXi92pV26tQjwqem2GDs8JY2kHCEkE","receiver_id":"dev-1705307898829-35355796779017"},{"type":"receipt","receipt_id":"C11VQHuw2P6QhqWTvdukh21qxxJgMG22LTHsrEpp5FcZ","receiver_id":"asset-manager.orderly.testnet"},{"type":"receipt","receipt_id":"39beQnAfJbds2QhYK6mwRADR3n57Fv7z9aLd75siUj5K","receiver_id":"dev-1705307898858-90397935745110"},{"type":"receipt","receipt_id":"6s5MYdhZF1Kw62uijZ7Ym8qC2JwvyMVdXXmYSUXs3k3u","receiver_id":"asset-manager.orderly-dev.testnet"},{"type":"receipt","receipt_id":"8BrMtq6jpMLHRxxjKxo2aSGtg7xWzX9gD7K53mVbZDnr","receiver_id":"hotwallet.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"E2NZbSxTfZJ2pBw8WeZHsag2619wAmemgC3HBmmWMzdC","sender_id":"operator-manager.orderly-qa.testnet"},{"type":"transaction","transaction_hash":"6X8EK3HoCFCbcoRR7RNSqqRrDT3uCg1mRXwkVZGCZLU8","sender_id":"testnet"},{"type":"transaction","transaction_hash":"4NkCDrdjY3Jd2dJbt4X59hkHbG5co3SxYTUNAALqDmRx","sender_id":"operator_manager.orderly.testnet"},{"type":"transaction","transaction_hash":"HrifTYWLyW5ABrizokCsUB9ucpNqYmAnwYNzBLL3Cjyi","sender_id":"testnet"},{"type":"transaction","transaction_hash":"8ngd9uVW5T5Q2NG7jcHh3sYz2P3jqXkdWQ1AaYmCpDfC","sender_id":"operator-manager.orderly-dev.testnet"},{"type":"receipt","receipt_id":"EyFFfe3HKSGCwcHuJMJTxpZUwgWr1Utre8h9pJzXgK3o","receiver_id":"wallet.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"5u53aFNKuAvBcACxNFGx3h6WfYdpkvLQcrSzSJsx46nd","sender_id":"hotwallet.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"H4HywdHZoibZyMkHcVjEvNhpHPycSc2c89btgqBSPpgc","receiver_id":"perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"E6SY7Mb5zM9bAX5RjfAos1LTkrLgcYbHwn9Y9SghP7PE","receiver_id":"5-manager.dev-1705192023920-59281357047296"},{"type":"receipt","receipt_id":"68XYxPEmndTstRXLrUT4LxRNzMoP4ZTF7yWauaXRBQNy","receiver_id":"relay.aurora"},{"type":"receipt","receipt_id":"2rXmHAbk8YZN2YGnKw8QfeGJUsJArLBhMpFxvh5s7WSv","receiver_id":"v2_1.perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"4zy6PwvZF9LR1L4wMnZPpfJ9q1htHPxdrS1wLy8vFXrz","receiver_id":"5-ft.dev-1705192023920-59281357047296"},{"type":"receipt","receipt_id":"8nWPwYgXN22NNDctRoXbWPayRADqzBBD6o5sArxBBuRB","receiver_id":"testnet"},{"type":"receipt","receipt_id":"AiXXDjUzJHg3jVpDhuxuVYh13TKDQqCYKGWHhoUZGYGm","receiver_id":"testnet"},{"type":"receipt","receipt_id":"4cUnbLZyHZ7zaiYW332gEcRS619988fp8qf6Sf5tga5C","receiver_id":"aurora"},{"type":"receipt","receipt_id":"DwYs3r9HGeQZBqhnj2B915MWXTGZ6sStqoLLo5eijvpY","receiver_id":"users.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"o488CGEfsN6xVGPz4HpnwWJ3pkvizzNbbpLuyr9sqWh","sender_id":"perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"Gj4zCiCtJMLBAuLKekBjP8FtapoBdRPXKzVYKcq8fBJw","receiver_id":"zaru71wae3xm.users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"4AXsbA6PpSPa58Mpbhq7G8oyyZbUfiGNwTdw4s1ediey","receiver_id":"dev-1705307896734-91056264654871"},{"type":"receipt","receipt_id":"EEMnzGWFkJhjEJrJRbK2xrRUGKk31VURFU6hkWWAshZJ","receiver_id":"dev-1705307896718-65112976037726"},{"type":"transaction","transaction_hash":"8PR3U56NpGFzf6aPCxAjb5krsJPTnuWWXPG1aj5ci3Z6","sender_id":"5-manager.dev-1705192023920-59281357047296"},{"type":"transaction","transaction_hash":"F41htcw4KnAirmtbsuSCFEZq4PEErQj99KnLTjXuNwLn","sender_id":"relay.aurora"},{"type":"transaction","transaction_hash":"AvLUZkMWXMPAsZcbN6msP53qxifQKaEoFVRdajUnzWJF","sender_id":"users.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"BoTUruNPYK31dn6zmmvqcVD98yWJYdJx6mwUvhm6cxZF","sender_id":"testnet"},{"type":"transaction","transaction_hash":"DEKdqsUKsPXyaL5za8HzGCZJrf5oiBizERQ4A4giEhuu","sender_id":"testnet"},{"type":"receipt","receipt_id":"9MB8qBQTYT7yY4AMwBDDFq21Ui8xjsmf9euFrQpajHpo","receiver_id":"5-manager.dev-1705192023920-59281357047296"},{"type":"receipt","receipt_id":"13tXtnS2uBStKxPhVgqdM4YKm1ZkZEhavkT9ZZJVvggx","receiver_id":"s-lam1.testnet"},{"type":"receipt","receipt_id":"Ffr1anKFzzi1DWdRdzmCVGvd8GZXgK5JhKqaWekBvTB7","receiver_id":"5-manager.dev-1705192023920-59281357047296"},{"type":"receipt","receipt_id":"FtXuCxzWuVyTJPbzuZJvfx39BkGf7dYf2hXg499yNXA1","receiver_id":"5-manager.dev-1705192023920-59281357047296"},{"type":"receipt","receipt_id":"3wveX6eXzBYFv2p4BVnb7DRxQLSLWdPBa868B1dKAcY2","receiver_id":"5-manager.dev-1705192023920-59281357047296"},{"type":"receipt","receipt_id":"6BKKPfy23aLmZhci8AHbUNTcg692FTgfGgwEgSMM6Ehn","receiver_id":"price-oracle-v1.nearlend-official.testnet"},{"type":"receipt","receipt_id":"AbcJusprBecgG9NfV2Pwy2dAEcmmj2Ry8ndWnXHBHjZz","receiver_id":"hotwallet.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"FBLH6KwCkLzhQdwcUSxVNUwRDqiPKZw1Smd6o4GX8YSs","receiver_id":"5-manager.dev-1705192023920-59281357047296"},{"type":"receipt","receipt_id":"FqBVYpxRFMJdUC5LNaaQKGHj7NSELfbAa34n3rws36CX","receiver_id":"5-manager.dev-1705192023920-59281357047296"},{"type":"receipt","receipt_id":"GcDAF1ybPVs7uMacth3Ju4dcbzaa68Fv81My7g64BqPs","receiver_id":"5-ft.dev-1705192023920-59281357047296"},{"type":"receipt","receipt_id":"8mh9HkZ33pBtyURijc34vAeiT2rwvff6b1FetQYfaQYA","receiver_id":"wallet.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"4UMs5gaqkN8KAHxX48d1qdossGhryqSiqEtNBJJxYjTi","sender_id":"s-lam1.testnet"},{"type":"receipt","receipt_id":"83h2M6ee7pdc7tDbo6AxouJU1pztfGi1Xdr4ESqa6bAt","receiver_id":"5-manager.dev-1705192023920-59281357047296"},{"type":"receipt","receipt_id":"5yq7SyHH8Kp7Tvjs2EJ9aWeLdJgbEHnYYcC3ZxhyNTEb","receiver_id":"5-ft.dev-1705192023920-59281357047296"},{"type":"transaction","transaction_hash":"3yLteDqyFqya4CX6ySkjK5WPaBxTjKJAG6sov4P89NWM","sender_id":"hotwallet.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"GhZzj2NptNY9YTWYLxjqu8qHx7Ki1YBtpy2356AVLxNV","receiver_id":"ray.5-manager.dev-1705192023920-59281357047296"},{"type":"receipt","receipt_id":"CFaqYyetKq4Vyh27zyVGCKWFo2DuK59qRXqx1S5tkJDy","receiver_id":"5-ft.dev-1705192023920-59281357047296"},{"type":"receipt","receipt_id":"gwQDmw8R3up9k6KHzFcxAgZuagGak3zHaNDqxwqxYtg","receiver_id":"5-ft.dev-1705192023920-59281357047296"},{"type":"receipt","receipt_id":"CUcGzRfv4H1ASVLirzWnXXrCa7GiB5a1xBtRQmmNN8Bk","receiver_id":"5-manager.dev-1705192023920-59281357047296"},{"type":"receipt","receipt_id":"HxFPHfv6ipvGz6aQoZDZ1MSF9NyU1cvumTHfo7TuDqei","receiver_id":"5-manager.dev-1705192023920-59281357047296"},{"type":"receipt","receipt_id":"CJeA4nu83Mri2TSqjA1ggNAjFR3USZVXna8FZXkZTzZ","receiver_id":"operator-manager.orderly-qa.testnet"},{"type":"receipt","receipt_id":"DfhX7fwxPG6wrZJHu3quL3JH9wpgsRVvRegy6fuJwMaX","receiver_id":"operator_manager.orderly.testnet"},{"type":"receipt","receipt_id":"GJQACSipp1fuRphvb2Fu7qPNQtMNrihJdwsCPi3mxx9C","receiver_id":"users.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"vtzV6vE4j9R9tZsuie8PuTaXdvnXgegb4ojskLkC53k","sender_id":"5-manager.dev-1705192023920-59281357047296"},{"type":"receipt","receipt_id":"AB9SKoVPvhcM8rKAp5nh7XLRCmDxb8EUKW18ui35DV1A","receiver_id":"operator-manager.orderly-dev.testnet"},{"type":"receipt","receipt_id":"BafDCd9LSjRnZwFWhXKWmavV7j9ombwwxr2vwVdSA1RX","receiver_id":"asset-manager.orderly-qa.testnet"},{"type":"receipt","receipt_id":"42KKwyRV3mTYMka9RtuVEkFYPZgLjPi1pVN7sa5M1ydC","receiver_id":"asset-manager.orderly.testnet"},{"type":"receipt","receipt_id":"CtcUqSTSkHLP5L4htPUkKSLbUN4He824ymuEwXNdH9Hy","receiver_id":"8tcxyh4eaepg.users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"A7z2fzjRoAM1pqertM46F2mPoiDoZMtCRTNt5AJRimij","receiver_id":"asset-manager.orderly-dev.testnet"},{"type":"transaction","transaction_hash":"5TJ16YvPQCuM6uauFcTrPcUgGfcLZVw9oryACUBSUbry","sender_id":"operator-manager.orderly-qa.testnet"},{"type":"transaction","transaction_hash":"HtL9Vd6UtJzXnN6VYuKx8S8J8JCAeJzi34ZQSorxzzpF","sender_id":"operator_manager.orderly.testnet"},{"type":"transaction","transaction_hash":"267ataDuMW3r4kp1JeM4MtUbbvP9dyNrjAGEXbEo2KUy","sender_id":"users.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"BMGboW7FQH7miwnU74GN2ktntu7sm98SshNsai3j28ec","sender_id":"operator-manager.orderly-dev.testnet"},{"type":"receipt","receipt_id":"Ed8YULdQXHPSZ4LF5thA8e28koou5YKPYTeFXHnJqged","receiver_id":"hotwallet.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"J7EhMakp5kGHkJwCRJr7YNiX8bNZLkSY96bNi4yuknWA","receiver_id":"wallet.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"9aoJTjvWzcvNNFVgTVfA3d6242eZ3Br6JMm9sthEQTrh","receiver_id":"perp.spin-fi.testnet"},{"type":"transaction","transaction_hash":"GXu7Mee4Xt1mXT7tGTTRQVx4yTJQKgPsVpo9foCdT5ec","sender_id":"hotwallet.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"HaMd5RGQ4sKWQy4Sv5Ti55J98o9yjd97bNKoJ6gVbUM5","receiver_id":"v2_1.perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"DCoVFX5qDp28ff4xXhwJUJfSL69kZWqZcZLrNtNo4P77","receiver_id":"users.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"35N8UqhoxemuFMVNKQvcRpKaCm3Sb6VQhb2RE5JKN5Xg","sender_id":"perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"FBQDL1Md8DfrrYCQuNsUJoZ3omPu2pGcFf1a5SU29R3Q","receiver_id":"1vf8lat3eupe.users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"2ke2B2grA4UNgLZdLzPLNNWzq9YhYc5c8RtKDjkzm5UK","receiver_id":"testnet"},{"type":"receipt","receipt_id":"2n5FExgNXjGUdKXT7JWy2uy3osMxk5kqGNR114Efc5eL","receiver_id":"testnet"},{"type":"transaction","transaction_hash":"8QNg73mgKNLsmkmSru5zcoYCMJzVQ1irVsDNCXyBrXhm","sender_id":"users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"6vSCV1u1vYCs1c6dRGSY8Hw9ZYddhscFcrbontJBJh45","receiver_id":"dev-1705307878625-77546670858145"},{"type":"receipt","receipt_id":"DzN1ZqtLtbifhDtvYbiQErKdmiYEivSKFeTfLUjoFnmp","receiver_id":"dev-1705307878607-95984362744421"},{"type":"transaction","transaction_hash":"6Hw6PdzzM4B3w9sv2MVSrUAidqXsMbKXEKTr4ni1R5eP","sender_id":"testnet"},{"type":"transaction","transaction_hash":"AvSHRnF1JY1mfvuCnorFMaaSzB2eehia5wP8aXrPVqNm","sender_id":"testnet"},{"type":"receipt","receipt_id":"Sf2A5AxxYj3hv1MquBXHAqtxua6oiwpKf86Fy6CG2zp","receiver_id":"hotwallet.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"Ds8pzP4gKC29Y13uqLSkuHL91oqgqEiUwba58BGER8NM","receiver_id":"wallet.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"DZ1BazQkJY215TtDwnSwASGW2ZMPuDabNw2aY89iEcaC","receiver_id":"perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"5wfj3ZYEHpbo1NWnjdqJtjY2JV428py2U2qo9vn7pAMx","receiver_id":"v2_1.perp.spin-fi.testnet"},{"type":"transaction","transaction_hash":"CeaeXCcAbeSGauY73SPi8u8nLgfXv5FSvbVYEwPsMN2g","sender_id":"hotwallet.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"BwWV2oQ7HzRS6yKnN8jEYy7siiuWCAAMwNEeYPR38RJq","sender_id":"perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"26i1mbzFQcMBN4iCfrDFTZUEVb13L16TPGrnnHTZSxBA","receiver_id":"operator-manager.orderly-qa.testnet"},{"type":"receipt","receipt_id":"7P7Fbrr7CMAMnn2r8psQSRK8HvAkKnvHhpJmJuArhHuH","receiver_id":"operator_manager.orderly.testnet"},{"type":"receipt","receipt_id":"4BizbdPg8YLUwG6SybYhJdUsKdEuAPfkFMzMpRPDVaAq","receiver_id":"operator-manager.orderly-dev.testnet"},{"type":"receipt","receipt_id":"Eqp97EsTs1RBWUkJpbW62HFfATZKqHTRu1jaT5P4XxxJ","receiver_id":"users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"3exN6XrXZzNMZvPHSjYsuZwqkJZTJR6jyywjSGXHjHt8","receiver_id":"asset-manager.orderly-qa.testnet"},{"type":"receipt","receipt_id":"8mHPa5oRECdDm29fL9wRqp2NQ5PxVGqnzGQYWRcN7qNQ","receiver_id":"asset-manager.orderly.testnet"},{"type":"receipt","receipt_id":"3Dudq7DB5HGUu8yR9cSvo7fAQRGmyTFrWLfhEDGh69gi","receiver_id":"asset-manager.orderly-dev.testnet"},{"type":"receipt","receipt_id":"GUutW5WSA1RnajtQ13SAYb3joHZmfYpb3s2ko1J9ZqZE","receiver_id":"amca4m99b1u8.users.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"BsEU9eEjSQ1mqmEthvB5CkuDEQsCWUovN1AEwHbsLttF","sender_id":"operator-manager.orderly-qa.testnet"},{"type":"transaction","transaction_hash":"CqeF4iuk9LzCf1pWJvgbsAERzFJ7PaLpLryuJ2bE68hh","sender_id":"operator_manager.orderly.testnet"},{"type":"transaction","transaction_hash":"EhuKzKnLKoknG8bk325Lqp7dc6wLqWYXVBvmBBv2LTyh","sender_id":"operator-manager.orderly-dev.testnet"},{"type":"transaction","transaction_hash":"6Rd37YNfmpSSkREmrF6doC2pcehrJsw4FFuE6t46416D","sender_id":"users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"6pz1zC4MyEAPnBmkjpnKKzCVdDW4aYNP5ek3JxeiZUsi","receiver_id":"perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"FkQjBGFCw9UsMLwqqydEyyfeP36rdcWYyQdkhxoV6EGB","receiver_id":"testnet"},{"type":"receipt","receipt_id":"EuzSjBDMP3TfMdXZLbmKz8mJUqfHhciEptV3H74Sz8Kv","receiver_id":"v2_1.perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"4JLRSK6ppBniqv2dS8g8DV6yqnQ7pw5otNJwYPfitc3c","receiver_id":"testnet"},{"type":"receipt","receipt_id":"GKsPr1kVBCGbepGEw8mzq91DJfP4gG5NMh9JmZWShCm","receiver_id":"dev-1705307874862-35306783139366"},{"type":"receipt","receipt_id":"GP1K1ndb9fSRGrF6RUSjvAw6m139EoWWWCRSY7frW8HA","receiver_id":"hotwallet.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"3FB28U76MD2syh4jzjXFkxymDPp9HYZTnot53aBFT4Xg","sender_id":"perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"A49XD6VGqMVymQv3ZbDyZ7eCZjvg5THs7tQaGXZ3Cke9","receiver_id":"wallet.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"6vEEcNPm5P37q5LSFU4kYrVPGxKpvx6g4NjfkGVWTs8p","receiver_id":"dev-1705307874874-37652742511081"},{"type":"transaction","transaction_hash":"6viJ2PGP5pP7BF6PLBu9V5dJrMnChP8NuNyPy8i8qpYm","sender_id":"testnet"},{"type":"transaction","transaction_hash":"DxG6fA6fkrymd9snoiy7dxpMTHVFMPhR8hXSNAoTaaAY","sender_id":"hotwallet.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"EnNjTWXD3nQFhMctPbZHwGw2fQM9VHtBLi9tvBAN8fqm","sender_id":"testnet"},{"type":"receipt","receipt_id":"6EF1aWsz3m5cBxzjt3G3z21ppxFQK6SRZfKewYbutKDR","receiver_id":"testnet"},{"type":"receipt","receipt_id":"GUN23uhWrZshq9x8kFM67jtdXkw3nCmPb8AkUR1QkC7z","receiver_id":"testnet"},{"type":"receipt","receipt_id":"7LmEfPZaJaUS6zHnpqoTpupNYDKK6CFrtGBju1B74XFY","receiver_id":"dev-1705307872205-99213567112810"},{"type":"receipt","receipt_id":"3FZug3PSDbSwgN7KV8FwaioPACpDnFRAwXtKJ94vg64p","receiver_id":"users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"AFueZUywagapg3zzSQzZrVNL7S9rJci5H4vqXFqrZWxY","receiver_id":"rrbqctvnufrc.users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"4JZzXjVqBsnYmmEDeHd37pc3VtS3caDPUx6kwF5joKpJ","receiver_id":"dev-1705307872188-88884159947877"},{"type":"transaction","transaction_hash":"EkFx8AUJJVTduPWUSJp84vbZYaS3JbweTuQ921yPaWJK","sender_id":"testnet"},{"type":"transaction","transaction_hash":"EP79Q5dbvF6yaYBqRRdfWGxoVbJTcEPmf1xTRYu9csXF","sender_id":"users.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"DJYbqnB1sfaQUTo4MMwRnnCnVhyLqtyx9tQvfCtXxXzL","sender_id":"testnet"},{"type":"receipt","receipt_id":"8hw27x4nErnoAxb5dSsvCJZMvbEBGU2uZ3GB879LpeKu","receiver_id":"perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"CKUjpSErCByppV418o9o3NYMm7TNtgm43pPduAn9X5s8","receiver_id":"v2_1.perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"8uZt6DQsw2sq3xrFt3RJNieS6LKDhH25qoUyG4Cj6pC4","receiver_id":"operator-manager.orderly-qa.testnet"},{"type":"receipt","receipt_id":"CuwcRofqQBPpoKzAUpa3ksANv6Te8cXoWpK9Qoc6tzEC","receiver_id":"operator_manager.orderly.testnet"},{"type":"receipt","receipt_id":"GH2NVDouBgGcwcMcxfd2QaXTVeu8uuFxfFDMW6WF4hwz","receiver_id":"operator-manager.orderly-dev.testnet"},{"type":"receipt","receipt_id":"Fsk5TnJ6eywZqxTZiLrysALurQ1oQh9c6FiFre3U25es","receiver_id":"hotwallet.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"9jhcCd3FLM13E2LEk9n3Dn3t16RofCDPMXhphuCznphn","sender_id":"perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"9BTMpPUWiMjLrh1aVxiW8shc93rgwiLQmuqdTay2MLXB","receiver_id":"wallet.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"2GTdLdYM5qF8zTMeqxuuqPQFBq9H2K9KRyiZvhrcGGen","receiver_id":"asset-manager.orderly-qa.testnet"},{"type":"receipt","receipt_id":"GdbxinJkfMtzdofWC5wd3QPkKh4wvzdCmXkbQyBjDoht","receiver_id":"asset-manager.orderly.testnet"},{"type":"receipt","receipt_id":"2iWKHQA9vc391e8t4DKCQt35fBYgQfyypTrG5ateEvnV","receiver_id":"asset-manager.orderly-dev.testnet"},{"type":"receipt","receipt_id":"H54N6mtrYANytHTbqnMPWPQV3qiie9C74b4vnq58QKT8","receiver_id":"zavodil.testnet"},{"type":"transaction","transaction_hash":"5qaSDBKCJsPqofHiLcP9QzXfMBTmvBmno9kaGi9hUHZK","sender_id":"hotwallet.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"Dye9o49RwotXeyc9iAUEjiGF6LQT3YXADCNqC8faKt9V","sender_id":"operator-manager.orderly-qa.testnet"},{"type":"transaction","transaction_hash":"eYKK4wxVWsqSPoN4Y5qWuwbEjDSi8NojNDzpkoUwoPR","sender_id":"operator_manager.orderly.testnet"},{"type":"transaction","transaction_hash":"GZdRoPNAprgnuZJvD6MP6YiTNJNvKipXdLBeAQ12FFuQ","sender_id":"operator-manager.orderly-dev.testnet"},{"type":"receipt","receipt_id":"FEhmoRM2Moy3SXif3xR23Ux3LESX5trg2MjxQwckxTe3","receiver_id":"priceoracle.testnet"},{"type":"transaction","transaction_hash":"AicFkvxgPAGStRGCdzWMcgV4J1jYbzmH9gpZcGrihEh7","sender_id":"zavodil.testnet"},{"type":"receipt","receipt_id":"DX91kPfQPho6GLr98Dv2iuVb4ae1dNXNmuaA7qXm2R8P","receiver_id":"oracle-2.testnet"},{"type":"receipt","receipt_id":"B8iNpBjtxsWTn6843y2z1Z5LbNwYxkeyBuFjnwmnjBmx","receiver_id":"perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"B3Fgnxc16h1z1mRSVxj2u1717rhmA1vVVxzxvHA8SNjN","receiver_id":"users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"94KT7n6zxKnWXe7sGgStvwfxSNCRMU5sBUuJFrC76Wi9","receiver_id":"yoshiko.testnet"},{"type":"receipt","receipt_id":"xgdoW6E7BNTtbJezgtNnxRv37UZeRwPwFTXp3UQSCnZ","receiver_id":"yoshiko.testnet"},{"type":"receipt","receipt_id":"8AKbJYPs3sKY2BCiaiwztHRbZTAkTGYw4ZBunoWYBdGp","receiver_id":"relay.aurora"},{"type":"receipt","receipt_id":"4RB8d44ipPuLPgy2mL55iMKGHZ1vDMnkix3N4T31BfT7","receiver_id":"priceoracle.testnet"},{"type":"receipt","receipt_id":"HqjbxjyYt3RXb7tiCP9CgVWyERFYwA3XjwnwMAC1JGe3","receiver_id":"v2_1.perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"7aRcVbT1DEzQFgG3snoyoxBtGLZsX2yWPA6EJiYqrHAK","receiver_id":"u20d2otgkumg.users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"4cGiFWPqYdE2uBCVNRsKphG6iXMKJEziUDVM546uwPCm","receiver_id":"aurora"},{"type":"receipt","receipt_id":"7veqnMBDeJsGnJJeKh5HWGWtLgkcT7p1f5hEDX3Pwjui","receiver_id":"athlete.promotional.basketball.playible.testnet"},{"type":"transaction","transaction_hash":"3bVfoDA6ikR2WpCRTrSXtZQ9MTBHTonr3qNky3bcX73T","sender_id":"oracle-2.testnet"},{"type":"transaction","transaction_hash":"DsWufLkBqKUjfcM22MFgJDZuqcHVuFtdtspVZVzZ36Hk","sender_id":"perp.spin-fi.testnet"},{"type":"transaction","transaction_hash":"Hjd2BVMJbcwqeXUQKNVwn89u6TKh6MUcFb3Juyk9fAWk","sender_id":"users.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"FwatXJbHzbiabtHhonkkHu8sjvKMat5cBNa3fFk4tFBz","sender_id":"relay.aurora"},{"type":"transaction","transaction_hash":"66fQKS6Bmpmi6Y3gX3yrzhLwGTedrrX6T4eT6LRLnLAr","sender_id":"yoshiko.testnet"},{"type":"receipt","receipt_id":"5DYpU8wsUBWnskoK1xBJeXvH22RAEwGDjt2SQkbugAhd","receiver_id":"hotwallet.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"FjBpFiCo8kFxikSV6frSSq5vDZL2RGHiBRykoQf3X4YG","receiver_id":"dev-1699209171769-38068923418802"},{"type":"receipt","receipt_id":"BrfheXfYfgXNMSxapyd7MBZ133MZhw9baDKDMhHyMCag","receiver_id":"wallet.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"BaNYzySwPn2yALxKPHhzf5taPi7yikUPuRVJ1AcGCXDY","receiver_id":"pebbledev.testnet"},{"type":"transaction","transaction_hash":"3HvvgPffbvzciZLRkBNg1C9vMG6n2y9BpKKWZfgpvkZi","sender_id":"hotwallet.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"7fKad7uM7qTzJ5kA85t7pYtzskb5FM8RUfCj9PmHnckK","sender_id":"dev-1699209171769-38068923418802"},{"type":"transaction","transaction_hash":"8zx2aBEeZL2GDG8UxwQt5b3U2vDxLtFy9VYEFjuV8KBn","sender_id":"pebbledev.testnet"},{"type":"receipt","receipt_id":"DBdf76FsVWhECc4qD4SbCz2bGxuCiCtguWgxXCBnifMt","receiver_id":"operator_manager.orderly.testnet"},{"type":"receipt","receipt_id":"Bop4PowkKx2sRca8BYKQYcob1HqzQiVgDnzqNqN3skpS","receiver_id":"perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"BRYW4mie5t6NHx2NVE996GRDKRwSmotbugpVRA79bhR3","receiver_id":"v2_1.perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"5xiBH6w7w7Yiaqy87D363KxMQffFTaeM6xTWa4wn1Ut9","receiver_id":"asset-manager.orderly.testnet"},{"type":"receipt","receipt_id":"AZ4XbqnwQYPRRcNUtBp4v6MT4zcLDG3qq1hGt29sH4ER","receiver_id":"dev-1699209171769-38068923418802"},{"type":"receipt","receipt_id":"AX4Gct61w12k6iR3P8ad3b4sETHhSuLp38QWF4J7G7oz","receiver_id":"users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"FnTY4wcFRPiFcR5qyPv593dneKchT8BfbrjWGUFGdNBS","receiver_id":"pebbledev.testnet"},{"type":"receipt","receipt_id":"26AAaEsjthHfsaWDfgHDm3pGXQTmR1uKvzeug6BRT5w4","receiver_id":"pcjs4axc5e7y.users.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"6aH14X5u4jx2JRph1iArg58dEMvkW2ye6DgQ8sRycXhk","sender_id":"perp.spin-fi.testnet"},{"type":"transaction","transaction_hash":"8h6PpD2f9q3wXroKNJGyAVUBMQWaswAS1HEW6qjoUZNp","sender_id":"operator_manager.orderly.testnet"},{"type":"receipt","receipt_id":"Bj13ZD8febthbJ3XooWU6hYS6nAxbxV4LP2jr4yTURuv","receiver_id":"operator-manager.orderly-qa.testnet"},{"type":"receipt","receipt_id":"HW4ewYRR9AGNA6uGySQeCVYYu9yGUTCM3XJo8ho8cf4c","receiver_id":"operator_manager.orderly.testnet"},{"type":"receipt","receipt_id":"MkA3UXdjojDFaVrrMhhriDdGHEt6pNfWcPPyzUanqA7","receiver_id":"operator-manager.orderly-dev.testnet"},{"type":"transaction","transaction_hash":"8ALt92vR52CXpQPudMed2dduD8Ay3qiB2cBbuYmVEHuu","sender_id":"dev-1699209171769-38068923418802"},{"type":"transaction","transaction_hash":"6hLCLJHNiAg6SWL2f78GfGGDS4EdgMfXi34NV7yDRy1X","sender_id":"users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"FsiiL1PfH5Y73eLjDVgzvAA1LWCJ9HVnxaTnwWwjeus2","receiver_id":"asset-manager.orderly-qa.testnet"},{"type":"receipt","receipt_id":"HmSbYrTghMZ1ePiy7g1js5xS1G46tTHjoakZt9dQ3DtK","receiver_id":"asset-manager.orderly.testnet"},{"type":"receipt","receipt_id":"HNdJb95k99monmSWJ7HGSGauiaMyJ9GKWebgPFiYf3BK","receiver_id":"asset-manager.orderly-dev.testnet"},{"type":"transaction","transaction_hash":"32A9mYNig9ard1L4uRgqv64SFdj75yGjBzUtnbbYqkkx","sender_id":"operator-manager.orderly-qa.testnet"},{"type":"transaction","transaction_hash":"9aA4VauEdpksMxe396pVpiGUgjQ9p1CTN4ft48Ji3xZ9","sender_id":"operator_manager.orderly.testnet"},{"type":"transaction","transaction_hash":"6m5FG2ncuVc8hKB1g3w9z6MfNnaJzLJ94voegicf6mzm","sender_id":"operator-manager.orderly-dev.testnet"},{"type":"receipt","receipt_id":"7Af1Cfuy1PcwfpQ925HuodF8PYW9WrMrTZatV9nF6j7m","receiver_id":"testnet"},{"type":"receipt","receipt_id":"EeHPSMWkoFt8hRrBH8WvjAfdCzXedoTUMmc6kvXk7brL","receiver_id":"testnet"},{"type":"receipt","receipt_id":"FGm6ZWhXqe6KvLgBeyzcEphvqxoZXi7JX2FF6gDJzdtL","receiver_id":"hotwallet.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"98Tmqkonc3AunTETcZsCp8ZyjFmGCaQZnkdAvMVkxxiN","receiver_id":"wallet.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"2bJwBXVfVDvJveWz19Np4DkuQ1fWCWfXrEjDSyeYv35h","receiver_id":"dev-1705307857554-98615941249117"},{"type":"receipt","receipt_id":"FP4khnYzze9s46xfEoxyT5cJrSPgQArsfASVzTsP3ZEk","receiver_id":"dev-1705307857650-69966122322948"},{"type":"receipt","receipt_id":"36weAPLP4X9LW4YtE6P8GmhbMNwQWyHsux4Nw92wiBJW","receiver_id":"perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"6BXZE2hpZu6hHsFE3TAx6qvvjpufwZDK5UcPohC4z7gd","receiver_id":"v2_1.perp.spin-fi.testnet"},{"type":"transaction","transaction_hash":"EQsSLytLFxCRLzsj6TRTtpX7xt7u1sh2Lvs7Zy2saABU","sender_id":"hotwallet.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"CKrtimMN4zdxgQTYRjZkVkHCMw5vEmhExREKvVYjLrgQ","sender_id":"testnet"},{"type":"transaction","transaction_hash":"3iqKVMszUHGjkqrvkGHMChn9mVGjNqx4VbpkzzxufNqv","sender_id":"testnet"},{"type":"transaction","transaction_hash":"EGbWgiMUeA7qGFJCfsvKDWMgDGBm4pLNzeQfkMvsSso2","sender_id":"perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"Djnvd3g7hSsAyBEfK7fwE19CdHoxFfKrFN8eJ3HYxyiG","receiver_id":"users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"G83mfiKjyqUhaKDppeN739GNvKT41GMiRNBXZCVxz97p","receiver_id":"0vubdoy5ife1.users.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"DsyXG5Kvv3kKKNCFDa8wenpZ8gZW2GzHj35tGbH227he","sender_id":"pebbledev.testnet"},{"type":"transaction","transaction_hash":"GD2cubVLx9xAYenvdiiZgWi2NL4bfStssNBCshxxDVhy","sender_id":"users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"F9XbwX4eDjdvZ2ZB6FdTVYSFch4GocgcZ76NRD8jt5N3","receiver_id":"perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"AduydF4DkqTkZ4xWStEUT2WBHkK7dQL4vU4Edf5CZeen","receiver_id":"v2_1.perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"9seTCerCF3L3LvvMRLooXZiJHma8EBCY5WUXUyrZNfEV","receiver_id":"hotwallet.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"4hXtg4Cu9DFNdpVtaRwPvD3TEExpJamwGuXyxFapp5WB","receiver_id":"zavodil.testnet"},{"type":"receipt","receipt_id":"Xtr54tEmpo7UC9RD97kn7toLbpZzL5sCQi59jWsRevY","receiver_id":"wallet.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"2FVfgNw8bqLis9oNzbZVRAB6ruwPbikvF5KiPBxysrBo","receiver_id":"priceoracle.testnet"},{"type":"transaction","transaction_hash":"FihZNBc8vHvCbLTuNwXGdfFNDFtjZgC4jzcbYZak4RUR","sender_id":"perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"2EeMx4ZUffRZQ9MVm1EgSdHsa9Fh24sCzVG6h5C7sDtK","receiver_id":"operator-manager.orderly-qa.testnet"},{"type":"receipt","receipt_id":"9W6NJGDTsGUCQzQGN8nh8RccRaKBggAbvFRKKp7t3gvU","receiver_id":"operator_manager.orderly.testnet"},{"type":"receipt","receipt_id":"nZasMKuRg8XsbBzqWeJ55yJx89rpaPghei6NHg6p9Ue","receiver_id":"operator-manager.orderly-dev.testnet"},{"type":"transaction","transaction_hash":"3CPBhUtz1NQiqfH6kh7Mq2wit8CwocGUhCvbEu5nquuu","sender_id":"hotwallet.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"3JrmWoRsD2ms1qbKNFGk7HdJ41yAuwgmuSmgqacsUH6D","sender_id":"zavodil.testnet"},{"type":"receipt","receipt_id":"5ssHDEa5etgKoaH4aNLsh5i31E8t1r29xPRLJ1VGJKaP","receiver_id":"testnet"},{"type":"receipt","receipt_id":"8goQYKZbxZD93UHt95WscftoMyJdkPbf1bvuTd5Bk32F","receiver_id":"testnet"},{"type":"receipt","receipt_id":"6WRG8jq4QPhExbdfEAc3357U79Tj3CtWmgckQKpfaTC4","receiver_id":"asset-manager.orderly-qa.testnet"},{"type":"receipt","receipt_id":"DJ3sHW6ZxNNV3zgWUUcrYk1CJcTGH7D2uKiLAoRE94j6","receiver_id":"asset-manager.orderly.testnet"},{"type":"receipt","receipt_id":"GmhiQ4WKLB543g6ZBvApWCCohA26PChfBb7qo7vThptA","receiver_id":"asset-manager.orderly-dev.testnet"},{"type":"receipt","receipt_id":"EAJWhSxsj66bGHGpCmtThNHEhTs5b2Dz3yY8HfcMb3Px","receiver_id":"dev-1705307847872-52609250766362"},{"type":"receipt","receipt_id":"EKQgm4uD18Rk3xuMwGNJEXRCUjsm4Fv4pNtz1ySabDsL","receiver_id":"dev-1705307847895-22300198841507"},{"type":"transaction","transaction_hash":"BKL91qhzPjAMgqH3UFSAPm7nUhG1SHENFJUZzgspSfjD","sender_id":"operator-manager.orderly-qa.testnet"},{"type":"transaction","transaction_hash":"AW2tWQZ8xUBh7KhTzHYWX6S3jrogiHqiacJ4GsgtPdhF","sender_id":"operator_manager.orderly.testnet"},{"type":"transaction","transaction_hash":"57ty8LXfDyWrgsqm6wPRJtxtzGZbqUAZEDduRhVjhzAE","sender_id":"operator-manager.orderly-dev.testnet"},{"type":"receipt","receipt_id":"8qwymcUEU9KtfE78HBj9FPTBMctZAqJCnJVP7H7Z1taA","receiver_id":"users.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"7MSD1GUBqRPanWAFqdbxmzbHE9GcLcTEpX7tFnFhNeeK","sender_id":"testnet"},{"type":"transaction","transaction_hash":"4J6KXc5EcDKHTV7x8BM8tKCeim85Q8HFnqJwj9jaHB1W","sender_id":"testnet"},{"type":"receipt","receipt_id":"BytpP7PmyTZuSyA7hH3MBcyoLYUdZnFwW6EQfqqw2ZZZ","receiver_id":"8luca09ft80h.users.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"DxBJW2G3CQCnRkiggEfaipKZgmDNBkDubSMiEKzsJht8","sender_id":"users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"oLcrH7wywbKGXXdvYHweiuxP7UNcU38HHx1L1112bjJ","receiver_id":"perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"HtV35UYqT87Pug9Yc11FE2LVu2GN2pvy1g8s83ZuxuSb","receiver_id":"v2_1.perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"BKfVC3KSxcj7BU7MidRQh18Q1SiaubnHrW3PoMGexe9c","receiver_id":"hotwallet.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"6U4Xcatm88u7eWCTndCCBLzDgZKPTtofknsL4eV47R1T","sender_id":"perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"Cs71f5WLGj5GQVHbmgS4aHGCNxKgQVfbARqnN6xLJkEZ","receiver_id":"wallet.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"Bxvw5EkPMYgZ5V4ngM1AAnTGvaX6E3Vw8KoUfpnaJQfS","sender_id":"hotwallet.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"EN1dUzkQi2CaiinNp4yqHoFAbye1XVjwX9qQSnMTfjVU","receiver_id":"users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"7zZ1wNcrZkbNEP5ZF5BSmQHt1w4BdvPughqR1NHvYgiU","receiver_id":"perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"956rcc2qq21cjSnQmgpZ9du5C6gztiR1m4AYGphZ9tU8","receiver_id":"v2_1.perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"XbkhFpPBpYS7YXEJrefV4ocyEKH9mdfiYhrZ2Cr7SVz","receiver_id":"5hxn883xxege.users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"Azjbzezau7KFtbCEhE4gcmNShzsussV4JMDA5PrVTSqR","receiver_id":"operator-manager.orderly-dev.testnet"},{"type":"transaction","transaction_hash":"3Gw4qLojge7zC68dzU1cAKeUs5ibXUvoovqoucR3uLxQ","sender_id":"perp.spin-fi.testnet"},{"type":"transaction","transaction_hash":"HP95raWT3ek1R6fvL6e1fnT2A5efcm9Ch9PDwNocqyDs","sender_id":"users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"ExKut7Mf4Mbqv2bxAJDeyabDEXLPsYyjc26in8B1HbqN","receiver_id":"operator-manager.orderly-qa.testnet"},{"type":"receipt","receipt_id":"Axd5NJNev4mGC5V87nHQQffW13zR8CsNbxhxJJdMW8CT","receiver_id":"operator_manager.orderly.testnet"},{"type":"receipt","receipt_id":"DEz48Sg3o1sK3NsSdkKhQBXsicQCgarzM3tZrmVArqq5","receiver_id":"asset-manager.orderly-dev.testnet"},{"type":"receipt","receipt_id":"F3d4rEghtdn1D2fn6qCi9D2vnX5FYuZxr4sVjeXgVmCY","receiver_id":"asset-manager.orderly-qa.testnet"},{"type":"receipt","receipt_id":"2R8rLziQXf6jrjg6ZpFgxCRH37xG9HECtEJMJKvtXJXL","receiver_id":"asset-manager.orderly.testnet"},{"type":"transaction","transaction_hash":"52jw8BSDocthzi8CEDNkjjKHy4et7vuuGoFNHY9eTW92","sender_id":"operator-manager.orderly-dev.testnet"},{"type":"receipt","receipt_id":"BtpUxmo3WB7SBZQfVzy9myNejK1Gi2EWyEf4ZYt4PcJS","receiver_id":"hotwallet.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"D7PpPHXKYci9KF72TLnW49xcxPHWsCQm7PFnXkRkmu1M","sender_id":"operator-manager.orderly-qa.testnet"},{"type":"transaction","transaction_hash":"G4PhhKq7WDgfWzWHJhZY5x9ZS3eqh8wo9cjWXs2FT4ua","sender_id":"operator_manager.orderly.testnet"},{"type":"receipt","receipt_id":"FmAibdKQPQg5C3wjFVN4oNDhCf31d7Z5bm9sydmv1tBt","receiver_id":"wallet.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"46Tkb1uqqVXDqnQCwKgvAGQPbNFaoxB9LaFGs72jFNh1","receiver_id":"testnet"},{"type":"receipt","receipt_id":"AhrgBBgUjHabEizJV2ahW3i6aHsXkQYQoJ8P4wua9zK","receiver_id":"testnet"},{"type":"receipt","receipt_id":"ELCBuF6E4RkYsuAkkqQZuQWtsVUSiZ7AKyRBguQsFCTL","receiver_id":"testnet"},{"type":"receipt","receipt_id":"7nAXEpWiuzshXR87sBXdduWvM6Ua8wjFURbhbixP3Cym","receiver_id":"dev-1705307837661-46681505814982"},{"type":"receipt","receipt_id":"DSQcPFszkmqYGn16gTUze4jzazHgwVLC86YgE33fF93t","receiver_id":"dev-1705307837671-19734995528860"},{"type":"receipt","receipt_id":"EkZV5QCYYqjq9GhtGedR645xBQtLWQrUAEe4rrugddVa","receiver_id":"perp.spin-fi.testnet"},{"type":"transaction","transaction_hash":"Cz7dR1CtwuKmgmwNEHsdhqJYkYUu5y4pKXvDpzwk1g1Z","sender_id":"hotwallet.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"CEfSpje7uRfebQtFeGfH9NAXp5J8P2Fp44uBEBa9rNFq","receiver_id":"relay.aurora"},{"type":"receipt","receipt_id":"5MQMoTbfrv4dzoZ7L7bUgZwFRVauJN7EHojyC7gXHWiB","receiver_id":"testnet"},{"type":"receipt","receipt_id":"7niRGhjABrG1qU2E3NG8s6mDFG3DUZ4MJH8Pxy84yiFu","receiver_id":"dev-1705307818231-78108509900081"},{"type":"receipt","receipt_id":"DpjyXVGUmzhRge14qZqGhg4BEmEwxo9MqdtMknu1pdYV","receiver_id":"v2_1.perp.spin-fi.testnet"},{"type":"transaction","transaction_hash":"MdmXmF8fYvad8CChVn5stEKuJqYbJGKpB8RQ6A45u48","sender_id":"testnet"},{"type":"transaction","transaction_hash":"GAp8HFwWHMe6AYmzsruHCTEGs9rRCgdWYSBRHY6ePMme","sender_id":"testnet"},{"type":"receipt","receipt_id":"Ahmhv1HgeRYjJjEtqxnEqogTrtGxvc2X8Yk584RXeTuo","receiver_id":"dev-1705307818215-85371038755866"},{"type":"receipt","receipt_id":"9kCb95S8zh4N5KjV33QDriKPsuamRBjmzPvQncCbmXMV","receiver_id":"aurora"},{"type":"transaction","transaction_hash":"F1yqYqHv3fi1nD4x2Qer46v4yAwXt8nV7xQtENJgdk9R","sender_id":"testnet"},{"type":"transaction","transaction_hash":"8GWoCFCRQBsT3Ufk2hpDWW5yoHAmMjuA5jkEnHT5MsJT","sender_id":"perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"2AGSwbFAjzPuhGzgFsUvCB1kpMbquAcTQBuieVHCU1mf","receiver_id":"users.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"47sd586RJFziwHgVqGREAnEdYbacXcKkTJeKFLAmysW9","sender_id":"testnet"},{"type":"transaction","transaction_hash":"Fg8KZxzh8am1C5ReMn83Psm91qbnGSvzVKVmj2hxXpQC","sender_id":"relay.aurora"},{"type":"receipt","receipt_id":"EPMMuW6PBj4ZSB4yjj26YeLC2P8XgxD79qaHbZEo5qxU","receiver_id":"ys2rm4iswpa7.users.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"6BRveb46fL5Lum9cz1c4jTqSxJDFpg2jZy9fi9XSErpM","sender_id":"users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"8sQ2TkrZyVRzs4b9Sw5yFZ8rLEsZC4HMR2rfbx4G7AUz","receiver_id":"hotwallet.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"F9nqrTARSoRTHGBL68UKMVfJMVRGmFt3rqGdebRiUXiW","receiver_id":"wallet.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"5RsfPZwA4bZ5DrNYU3SeonmF1BxqjLeFbbLMMhnB6zy9","receiver_id":"perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"2pCtjcn1FvFgXh5TxVBod7qbTxuRYtbGJzMor2FgKvm5","receiver_id":"v2_1.perp.spin-fi.testnet"},{"type":"transaction","transaction_hash":"2SWsPeazuntYAxG5DLa2HKomMYhpRhQ63A5PvAug6PMc","sender_id":"hotwallet.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"GQfDL3zu4b2GYhch49W92saBqSqDkPRz4Ejj4gw95LaK","sender_id":"perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"8i9cMiFvDJbNQuRZw4e4t9E4tHZrHsTmg7mtChC4oL9b","receiver_id":"operator-manager.orderly-qa.testnet"},{"type":"receipt","receipt_id":"7W4NgQPJEUPyJz87kXWgEdogHsRMKZBwQ1dP9wibcvfs","receiver_id":"operator_manager.orderly.testnet"},{"type":"receipt","receipt_id":"Eh3DTgTSJMgXzrsM6EmthkjJq8AWtxpV9p8nDm7GobHH","receiver_id":"operator-manager.orderly-dev.testnet"},{"type":"receipt","receipt_id":"C25aD4p4UoiAmPJ82tsc3rx2hpNdqfq5q9TiDiYaQ4yM","receiver_id":"users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"2Sg3tGc8JDhVE379LwBpYQBGonYuqcRneRQttVBGNweD","receiver_id":"asset-manager.orderly-qa.testnet"},{"type":"receipt","receipt_id":"DHB58dWfhPR2PiH6CzMJTeetk5jhwA2zgXhYQQSD1mfg","receiver_id":"asset-manager.orderly.testnet"},{"type":"receipt","receipt_id":"7zYvuVG1KtMKi7cubi7BD4paLgf9LmHjUVG1v5ZS1hmH","receiver_id":"asset-manager.orderly-dev.testnet"},{"type":"receipt","receipt_id":"F6crUHkLV4yU4R4RHuzfZxn3xHSsUfKBFicFiHQUnoPz","receiver_id":"e9izgqoggd8y.users.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"DA3CTCyqhoHRTjKSRJEZ4FGBZTSc2zNE2fHmsjXg6obn","sender_id":"operator-manager.orderly-qa.testnet"},{"type":"transaction","transaction_hash":"84bZ4m3PW2SpSrPdjzTMNEKjeV9aszf5NHqac6w5d3uv","sender_id":"operator_manager.orderly.testnet"},{"type":"transaction","transaction_hash":"284ejVED9Wa6zAEPE128q51N1voZCyMxyFRnuSD5ZiHH","sender_id":"operator-manager.orderly-dev.testnet"},{"type":"receipt","receipt_id":"GbqxkEiLhCeQaZ56SLC2WfXmD9UxnHHvsWEXtxFNTg6C","receiver_id":"nico111.testnet"},{"type":"transaction","transaction_hash":"6rKqZ4doQHkFB7raNMxqTfsYTJeJomAV1G5hzsGSkGDh","sender_id":"users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"CJDtRazTG4hqqjWER8xwrhtSmSHmPfn7YfQnxf9qB58y","receiver_id":"nico111.testnet"},{"type":"receipt","receipt_id":"5AmRgzA27J1v5Y2HKzgNKjuadUfMP6ovQLQ4QBtM6z4H","receiver_id":"exchange.ref-dev.testnet"},{"type":"receipt","receipt_id":"HHJLJrFtVgcfdevr3oJA4X4idXLPzNRsZsmkgR1Xh733","receiver_id":"nico111.testnet"},{"type":"receipt","receipt_id":"GwV5EZguzXuYQPoJkrTroZkCudcNtb2YtLy19mfq3qfN","receiver_id":"nico111.testnet"},{"type":"receipt","receipt_id":"AtPmWjG8KwMyAsGuoBP3zdbASX5bzHQXkUqRSpbQifer","receiver_id":"boostfarm-dev.ref-dev.testnet"},{"type":"receipt","receipt_id":"Fr1KjSrQYaefosE7osZcTH87xX4gZgqT6oxVyUR2ffNA","receiver_id":"exchange.ref-dev.testnet"},{"type":"receipt","receipt_id":"ARsJFDf15wkx6SsWvzaZjtKH9dccCjwHM5yrqHdtvSwt","receiver_id":"nico111.testnet"},{"type":"receipt","receipt_id":"AAkGzQSVcEfD3CoRqgic4qrgnDSfsHEWbbsyww1hB7ks","receiver_id":"exchange.ref-dev.testnet"},{"type":"receipt","receipt_id":"EzZgijeSWqypWvfJRWUA5w1VmxKzdFTEKLfNKn3YpB3z","receiver_id":"perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"BnD6LtEAnyH7GPdff5gXY6BexjUJjTR6uzJmZVxLXUB2","receiver_id":"hotwallet.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"GDBAh3Ys9DCqj4GwbcfiTMdARhtfaidiHjatVi1zLb74","receiver_id":"wallet.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"CBbTrNUGSKKMpUFGKif9ERSxnow8B3y1JbLLcEWXpGSF","receiver_id":"v2_1.perp.spin-fi.testnet"},{"type":"transaction","transaction_hash":"BD2m54q7ibL56mM6vC1ACKjURSMCdztyCwQDe5QpTwam","sender_id":"nico111.testnet"},{"type":"transaction","transaction_hash":"37Rs9fWCue4W5SREVNYuFRS4N66ydCVDYqEWE467EEs8","sender_id":"hotwallet.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"HxCALtUuE4ZRG65ZkSGYBfbr8cC3XNCfRoZesfoici1v","sender_id":"perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"vCX8rcFoEFz4GzX5N87euvtbM3AT3WVBNnDpBihE6LE","receiver_id":"users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"GHjeFZcEFNLQa9XvsumUYW2cf5DCKRYjvG7AB3xNk1Kc","receiver_id":"345pclllrzhu.users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"6QkcqHFLiiC3MnwKB5xQ3ZwzwqrReMUkRQ2vuCbLs51z","receiver_id":"nico111.testnet"},{"type":"transaction","transaction_hash":"CKjaER62rLqY1ia89ZU2B4n21Rn6rR6DU5xov1aDu9Et","sender_id":"users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"GeHp1jtFKWsFoniuZYbB7gjkk5BfLmUnPeiPr6CVsGSV","receiver_id":"boostfarm-dev.ref-dev.testnet"},{"type":"receipt","receipt_id":"p92TBBxTR674PUhviHe3g4fzS8mcD9Sed27uz5FDVEd","receiver_id":"s-lam1.testnet"},{"type":"receipt","receipt_id":"7ds2qKnrHTW8Aju6awf4uLw7RQqYAhjFRrHQSxM9JLV9","receiver_id":"testnet"},{"type":"receipt","receipt_id":"27SNX5DcPjNFJJ45vBx4cj3x9HPddTT2SvU4rwzkWnjn","receiver_id":"testnet"},{"type":"receipt","receipt_id":"8H1xs4pKvfNC2cZNUcNv3pbDeRoDNCK1bueYrRst5saM","receiver_id":"price-oracle-v1.nearlend-official.testnet"},{"type":"receipt","receipt_id":"GbFwqrLJSTUoBkxFquq5JX7CTPgat4ogAqDUWeE3HKSe","receiver_id":"perp.spin-fi.testnet"},{"type":"transaction","transaction_hash":"Hyfrv7GEgZEHJDFYRJPsBXJSWXUToJWAsBLAH3ncnbya","sender_id":"nico111.testnet"},{"type":"receipt","receipt_id":"Bp58HbGSmhpYyqTBZha3x8h4R8kEtNyB3Bibifrv7uk3","receiver_id":"dev-1705307819711-48099469624020"},{"type":"receipt","receipt_id":"gdkmHGJDtqogNx2VDhofzbaYTXt7CKKp8isBYjbSQqx","receiver_id":"dev-1705307819745-10803656075488"},{"type":"receipt","receipt_id":"6D79XgKcecCKhskcDSHXcrPa1Q213iGGx8M7aPmfp4gw","receiver_id":"v2_1.perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"C3wWigoVJYBhAFKcwGa2uWcGDdbbNwwUF7J2d2bEUCZr","receiver_id":"hotwallet.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"3tcX53vqCyggpvHnZ5z8YxCmyeaGEYJFVX1JmLn9saLF","sender_id":"s-lam1.testnet"},{"type":"receipt","receipt_id":"CFsyZxQMwKuPGm4YMifh2g5aPJm57tBxKPUmaKesRsFu","receiver_id":"wallet.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"SbkE1svxBpELejfE2GTH37YAXL5gu53PW1baHQtc5W4","sender_id":"testnet"},{"type":"transaction","transaction_hash":"3Uch9NHR7mnn22z8m5BDHDsUy4e9Mk4HXhJtbUvQ4zgf","sender_id":"testnet"},{"type":"transaction","transaction_hash":"5sAJ8Qn94Br88iyPzTXfv3MkJmWiDE414xS4QkDYbX3S","sender_id":"perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"J5nXqeDUSnQV5fEgGZ4iKhhk7MohY38KU1ncmfiAFefR","receiver_id":"operator_manager.orderly.testnet"},{"type":"receipt","receipt_id":"FFrQeU4M5BU4QHskn7Te8BGm6b23CQAzr3FQ7TYEMBQY","receiver_id":"operator-manager.orderly-dev.testnet"},{"type":"receipt","receipt_id":"HBXDGpCNEktzjcmPCfQg34xtvc6yViKVcnGhBG8fLHop","receiver_id":"operator-manager.orderly-qa.testnet"},{"type":"receipt","receipt_id":"HLGkf2h4BC6Srg1URuuJPMEHtUTkV5FSjQDZV7V7xN2n","receiver_id":"testnet"},{"type":"receipt","receipt_id":"598R2twzFfaEUPY8uv98cKfwiHasVCCMc6CP3woNC9Ez","receiver_id":"testnet"},{"type":"transaction","transaction_hash":"EVNPe8qmmomLWtyCDS2452iRRQo91ak1SxSXQLQj6XkX","sender_id":"hotwallet.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"A9CaAnLQfidVrd5nksxY5uNPbt7BuhwWZJY7fGwh64s9","receiver_id":"asset-manager.orderly.testnet"},{"type":"receipt","receipt_id":"6nCpQVeeRkkPnScnkwo2vXXejMkQQSCvLnZ7bZLXn8NA","receiver_id":"asset-manager.orderly-dev.testnet"},{"type":"receipt","receipt_id":"DdDtXNbGQbRezY8djR8gxwWsXa9hgdmv1944iJBmAubQ","receiver_id":"dev-1705307819106-47174631681836"},{"type":"receipt","receipt_id":"EuzLNbGzgQ9D8kSNbtVfgov4RMcidv4qn2Wcuq231TY4","receiver_id":"asset-manager.orderly-qa.testnet"},{"type":"receipt","receipt_id":"DqMkLSwtcDoUzAXnWSZzSsFDaLHeCQdNNZvAM5U8hYWe","receiver_id":"dev-1705307819128-59250772899611"},{"type":"receipt","receipt_id":"AVQ2ppbLa2aL4R1MKRjdLccNLJFkenvXUPSqUYJDcru8","receiver_id":"users.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"CNxbsXJDmAihj57K7TQRjYvTnWASSTtiH58SjpLCM9eg","sender_id":"operator_manager.orderly.testnet"},{"type":"transaction","transaction_hash":"9Tw4px4WjJiUmzaaigCCazsdpWsJwgjD6xZc5vLaAWkU","sender_id":"operator-manager.orderly-dev.testnet"},{"type":"transaction","transaction_hash":"986FvtMCBFKHAVB2eTyEty5PVXn41UU4oY2gHzsvx2Ey","sender_id":"testnet"},{"type":"transaction","transaction_hash":"oCA7UT3eRKLPmo5TKf2EuMnzvzGULS6npo9vqsHBuMJ","sender_id":"operator-manager.orderly-qa.testnet"},{"type":"transaction","transaction_hash":"SnZ8phAZJefoaHW1XzsegCWXDZt6HX8rGArmJkRW4Kd","sender_id":"testnet"},{"type":"receipt","receipt_id":"EepTkM2QN26W5KoU4bN7d7wqDouMVVm3cwpiwpt4sbd9","receiver_id":"49qzzuam1rde.users.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"92vXrLaBHaYsL8HBqCnRo2UGWJv6R7PX8wFsn5sVWWDp","sender_id":"users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"5BFW9fo92pkgWVqTtJ1nmgthFcwoJQX3TTy4JvTzfAhu","receiver_id":"perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"2pkFMJHXc9koakvkxVXf8hodMDNvgxMkSzHEUZeCxGxm","receiver_id":"v2_1.perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"EztUUum7dkfTbBE6XM5CQedgWKqW176YjAK9UwLgic6n","receiver_id":"hotwallet.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"564Ahf25aayQBAGVjp19tuVKhGbCNt28aCDwdE8dZMd2","sender_id":"perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"6kXiES6ahyF25FVx3VuzkCfk9SWw3aRbCT8B7NpZ4bkc","receiver_id":"wallet.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"8ihpbidzX7EhvUQwU3RG9CQqh6Ljx7iApfVpd2Sbcmr1","receiver_id":"oracle-2.testnet"},{"type":"transaction","transaction_hash":"3AGm6kjAgQLPYnkY2eX5DKeSmqLK8DY1qakikpBonKBD","sender_id":"hotwallet.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"7B8nTRTQaMF9wHSqETnqjcJwVeNLMJMmFPLGbUvAsroW","receiver_id":"priceoracle.testnet"},{"type":"receipt","receipt_id":"4Y3S8EFJT7rTE75jF6ZmgMTgHbBuTsKdWjTUmc3U9mKy","receiver_id":"arkana-buidl-asia.testnet"},{"type":"transaction","transaction_hash":"96q6uSCNgEWJD4xkeXeABDYESMH6YBkeMqccKb2rC35X","sender_id":"oracle-2.testnet"},{"type":"receipt","receipt_id":"E7H9UYJ2H9DMFrfVKU5d5zZXvCSjk3EYdkKjWZR4kLBc","receiver_id":"users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"CaYPiDMcE1M3sxfnAmVoHgSUburAwhZkUj8e1ABJedNN","receiver_id":"arkana-buidl-asia.testnet"},{"type":"receipt","receipt_id":"HopCmFzcpkx4YU6T4DTEQXKebR5PdfrJ4ykrJPrvqtx5","receiver_id":"wrap.testnet"},{"type":"receipt","receipt_id":"EdYWaJrCc9oKUCPwxdQkv5Y9vwepc2tHrfyjkUEdLmzX","receiver_id":"fzg8m1vhpju6.users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"8wX57YEkzVB45sr5o24ZEZCA6BnKksoseosZsA48wksr","receiver_id":"dev-1702349001521-56718665013362"},{"type":"receipt","receipt_id":"5bheCkXHfZ5aBxYaH7DoNwJ1yiF5atakWpkdAm248A4G","receiver_id":"wrap.testnet"},{"type":"receipt","receipt_id":"8QMWsRqoHA2Q3Zs8pQTrom9P8iqMTuUhHYcYpxYHtGBn","receiver_id":"arkana-buidl-asia.testnet"},{"type":"receipt","receipt_id":"6ZJyTfd9DMpT31tNYmorkA9w1JidTArP2VhthqwqPJJ7","receiver_id":"perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"3KViRVMdUyakQJjWfDiRRBiTReCjwyjvqY4R2BnEBvhK","receiver_id":"wrap.testnet"},{"type":"receipt","receipt_id":"7iEYSk1RiCPwLajKY2DF9DsN9DV1KNGKb6J5PbeWjVBr","receiver_id":"arkana-buidl-asia.testnet"},{"type":"receipt","receipt_id":"ESaVAW8EPMaCxEat2XcY7Gz9tg6szaaq3d8fc7Js4aAy","receiver_id":"v2_1.perp.spin-fi.testnet"},{"type":"transaction","transaction_hash":"HgBjVrZjrQWKvrZFdYaAY2TibTnFwXyhjHSGvCY4kKMw","sender_id":"users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"DYp3ViETt8c2hxDdbYNwv75bQou9yHfFj1bQGwFaGtoS","receiver_id":"full-pagebacker2076287.arkana-buidl-asia.testnet"},{"type":"transaction","transaction_hash":"6CoYgGovA9w78EzpkqK4KjFeHz1X8BfGsxDdyADwWTbj","sender_id":"perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"3nvsbHVVW5hyyCWdkQqZQbMjWjTGB39yrMCtYoE3bDUR","receiver_id":"operator-manager.orderly-dev.testnet"},{"type":"receipt","receipt_id":"DroDMfXYZBiKECFBWrLvTRCNDYuNsiDFrVTkeb7otRF9","receiver_id":"operator-manager.orderly-qa.testnet"},{"type":"receipt","receipt_id":"Ff4nrX1Evb79rH8TbSH7VXo6fqj9YgB4GiUqrejn8LoH","receiver_id":"operator_manager.orderly.testnet"},{"type":"transaction","transaction_hash":"5C2S32Uy4qWZrCXDxRNWpt7ndS5JkGMjXv9C485c3wFQ","sender_id":"arkana-buidl-asia.testnet"},{"type":"receipt","receipt_id":"4J7zpDxEtDRPdLeM3sge2Q8x6Dpv2B9cibf2somzgVxd","receiver_id":"asset-manager.orderly-dev.testnet"},{"type":"receipt","receipt_id":"CcgGoWVS4zE9yqPZR17PyyZPkaHznjhE63X9XdPVs3tY","receiver_id":"asset-manager.orderly-qa.testnet"},{"type":"receipt","receipt_id":"FpGnkhoeiUAwZYiS34qw1EjVCtBHUbt9XgFWv6xiGbm4","receiver_id":"asset-manager.orderly.testnet"},{"type":"receipt","receipt_id":"H1Khr5zmULB1BfUEzcEPtmkGZXHuSCXG3zs2TpibRjZ1","receiver_id":"hotwallet.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"BmgjGZM5DT4kN1tthvu4oFdoULUpPkWsdfrthj7zDwYn","sender_id":"operator-manager.orderly-dev.testnet"},{"type":"transaction","transaction_hash":"G7fqA2LYSgZsz9Vz9RvUjoH2n6c7isRiHDcmb1sMJnuN","sender_id":"operator-manager.orderly-qa.testnet"},{"type":"transaction","transaction_hash":"5ZNLB1LXoEJ6n92mGFQg5WjkAtBMMnPsoTLJWbAv6s3z","sender_id":"operator_manager.orderly.testnet"},{"type":"receipt","receipt_id":"Ddewf2yopnchebA5JsSKQArKqZH482k23rrZiG8DcPoB","receiver_id":"wallet.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"Ah74AMdsJRe2b9mmswWSXCdqkApywWXNdD3n4MJMixbN","receiver_id":"bhc8521.testnet"},{"type":"receipt","receipt_id":"BhPLjed2d4pUuVx2Xaeks4WdXbUimeV74CDwW6ZCfdAg","receiver_id":"staking.bhc8521.testnet"},{"type":"transaction","transaction_hash":"31iNM4tXMuUBLqtAN52xTsB2XX4ApGmGVceJAu63J4ns","sender_id":"hotwallet.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"8LpPuro1PYRh8T5MUaWivCuMSHrwqZQmQLTvE835Vg3T","receiver_id":"testnet"},{"type":"transaction","transaction_hash":"BZ4rtTLazCRRpwEfg21GwQduCCjvz8hJ63SHpUkHoCGX","sender_id":"bhc8521.testnet"},{"type":"receipt","receipt_id":"AKZtWyTSVwUg8an4bjD5FWkEMCCmdGHGssDsmrHnzLJt","receiver_id":"testnet"},{"type":"receipt","receipt_id":"9UGAYfQw9DPHJDJyhcxMrfjwsFykDfxaNSkmaMBjizXA","receiver_id":"dev-1705307805064-79489375308037"},{"type":"receipt","receipt_id":"9Ce2bDCB6amKY85VTcmvYJtAzxDZWC5tTWXZTfRFk356","receiver_id":"relay.aurora"},{"type":"receipt","receipt_id":"DHoKDshQ6suGxNomNVqoFX9PjeQxUJ8gEs4WdXTu6BX1","receiver_id":"users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"BLLkf94F4WVJg266Daa6PhjwrowER2W5P6u5fh3jFjc1","receiver_id":"dev-1705307805076-31477167337320"},{"type":"transaction","transaction_hash":"Hq9NuBQAVN6xYFtaTTCPiudKhUxuT9AuPPcCSKZxqf4v","sender_id":"testnet"},{"type":"receipt","receipt_id":"BYsMdrSRva7kBKjvfydt3sTwkNpGThg9NWwVPqmr4iTr","receiver_id":"fr312vodm1sg.users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"ECDge6FPWD2Qerr8gCbpg5MN17tsYQ9Y3Bt5y3NuDg3s","receiver_id":"aurora"},{"type":"transaction","transaction_hash":"HTU2ozC56PTXuUfEpqnKc31TdfszC9LxNartTFtRYG95","sender_id":"testnet"},{"type":"transaction","transaction_hash":"E932KryZP8eVgQfrQgBjMVeg1GhWCeEAgpnFkRrksHpH","sender_id":"users.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"8TdTuvki4Ry3GDr2RJ3XHbvrUQp3YppmMzUsaJrsHfLo","sender_id":"relay.aurora"},{"type":"receipt","receipt_id":"BqdXUrprC1amV6xxk4DDYoDyTSg2UyxCJssxfa7GmDv9","receiver_id":"hotwallet.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"44TrM1g8tqryk7Gbs8yz7PBir9DRENpsQPMNGLVfzCMj","receiver_id":"wallet.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"8mzq49akkpBZ5traqvZiGF7XFBvdwZ2nkNarHJnSTcgE","receiver_id":"perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"DhWvMNKqiS7wkJBFWGVjmExt6KytRh4PnR8msV6oREhL","receiver_id":"v2_1.perp.spin-fi.testnet"},{"type":"transaction","transaction_hash":"4vHHJsxxyEz7yWDFAnhqEy41r1VaQPkQiCDTrjjJE3Jp","sender_id":"hotwallet.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"8nc3XMMBdgrGMXJizQTiGWTHM8MosFeafCnCFUEBdXT2","sender_id":"perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"H2gEMQnXqEroe24vc1eA2oayZdpN1k7txNRQyLDgyuTi","receiver_id":"operator-manager.orderly-dev.testnet"},{"type":"receipt","receipt_id":"6vnhzsfiwirgwwure8wbQuD3hg6RRb9Vi8EmS27D5rVV","receiver_id":"operator-manager.orderly-qa.testnet"},{"type":"receipt","receipt_id":"4MwtErZ3kjrMHujSzdcWWbjmiLRWzJLPESB54vh4Z7cM","receiver_id":"operator_manager.orderly.testnet"},{"type":"receipt","receipt_id":"Bsnf8XhZWBujYXGbwycQydc8QVECSnvafeN74Vapq9h1","receiver_id":"users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"44RvZxZWpWBuV5GKXbbTSJB2tgSbC7RrSDThPBYGhxt4","receiver_id":"asset-manager.orderly-dev.testnet"},{"type":"receipt","receipt_id":"CnqqHKDNV61tR2h4djp2RBvAG4oYBEZy1Y2UA6yZdfb2","receiver_id":"hyjndcqmxppl.users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"62CMjXc1mhEj51ierVCtDjhVdq5wtkQGGNMh1crvSV3","receiver_id":"asset-manager.orderly-qa.testnet"},{"type":"receipt","receipt_id":"2r2gTYDnSY7P7yVPRAx9sMvGWr1NStQHSEzHeMcvvmDo","receiver_id":"asset-manager.orderly.testnet"},{"type":"transaction","transaction_hash":"As8vMm97JkrDRMKk4NX6PdEcFCaR2DZwf5SATw5FadnA","sender_id":"operator-manager.orderly-dev.testnet"},{"type":"transaction","transaction_hash":"38mA1vScktN33RwGrWkANQ7ZgpSCUrRynuEjBzuVcWGw","sender_id":"users.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"APpphs1A9XHaQ33QAJdvLiAcGjsPvwWj6GbxUCnHRvQd","sender_id":"operator-manager.orderly-qa.testnet"},{"type":"transaction","transaction_hash":"9XbCKkxSXFXVPn2ipc9A92g2DQTsVisS21JZn2WgefJw","sender_id":"operator_manager.orderly.testnet"},{"type":"receipt","receipt_id":"3L9YAtehP3tHZKhDw7VXjrQ6KppDLNfd8u5WGnFqpwji","receiver_id":"testnet"},{"type":"receipt","receipt_id":"FryEVdwXXTT5rgVu88CgeANf7nPe5vkpZ795ZKh85x37","receiver_id":"testnet"},{"type":"receipt","receipt_id":"2rMpezkwJonFr8XC5aWRpGmaCkY65z1EXGLHLhvs4XzH","receiver_id":"zavodil.testnet"},{"type":"receipt","receipt_id":"HbsaFopRaA5ubsXgJsxo4saA2rFRnhE9uybyyQFvCKkX","receiver_id":"perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"5VMnAyzmGPYq2ukCP9tpFfe39qK625DameZwqSpk1fDu","receiver_id":"dev-1705307798949-31444104784078"},{"type":"receipt","receipt_id":"36XGDpDzFJKLNRtozmViF4zg85ULjfJcdgYEHUbTMVpJ","receiver_id":"dev-1705307798965-79857125077397"},{"type":"receipt","receipt_id":"CG9aeyULTp1gHYz9q2DRRZxHhejr51cEP55EDqH2M9FS","receiver_id":"priceoracle.testnet"},{"type":"receipt","receipt_id":"FbTwYwoqeihci8FeLNaHwuwFqpuDESz6xfVvarTPgAgu","receiver_id":"v2_1.perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"27tFPK2fmxeTeKhu15bM4yJXXNqFZ8msSkT7UQ1pPS5T","receiver_id":"hotwallet.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"9NePxdVcTM65MpREEDtBA6gf5TeX4nCrEs3irAQYGifF","receiver_id":"wallet.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"81LUyKYqEoxi8WnZrE3wwJjeRrfXpsY21mTL583QmoMF","receiver_id":"nico111.testnet"},{"type":"transaction","transaction_hash":"Cv2tnHsn2SyDAZniDYD4N2DHb9NmTvNNwCRAppob558x","sender_id":"testnet"},{"type":"transaction","transaction_hash":"Bo7AyzVpsVtwtdCgwFPpFSYu8uQV15GV1WpuSkUtYCKd","sender_id":"testnet"},{"type":"transaction","transaction_hash":"J4VMwmPXZusEVzHYk5zveTSwnWAj2LiqqPvavfgz3Lrr","sender_id":"zavodil.testnet"},{"type":"transaction","transaction_hash":"HjKbptwP7jB8WEnt734yKiLnpKD1HzcarHgwVQngRpHU","sender_id":"perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"ABB5rMfvZEqytWRUtZ3wpp4ikTW8UPHt1sgujcVA6sNn","receiver_id":"nico111.testnet"},{"type":"receipt","receipt_id":"5t2w2eiKweYLomcvHaohoKVjbRojGzBmwHVfQrZpALDk","receiver_id":"nico111.testnet"},{"type":"transaction","transaction_hash":"91NgYQuDLKRkfysKziQuXxu5Br5LDiPaqVd55ne7ZHa3","sender_id":"hotwallet.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"2mK8penEpmZKyij3EY5yQ17tLQbSmSbKKWz5uPeVf6Kb","receiver_id":"exchange.ref-dev.testnet"},{"type":"transaction","transaction_hash":"6aEt9mWx3BmbwRyNGrFT9vLrWEURuRiUq6rGnJteL8We","sender_id":"nico111.testnet"},{"type":"receipt","receipt_id":"EjbxKY5nVaJMp6iR6SNhX2WL1DYGLtHxTGN98tjbASaJ","receiver_id":"applebear.testnet"},{"type":"receipt","receipt_id":"HhhmnbAamoiycfXwemk25cynHNbP2Lsbsutr1arNyBrc","receiver_id":"users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"J2uSaeh65izgiwMtB9EW8j94bHgWaCcSmPkS81vyPNsy","receiver_id":"rkytkftle0ys.users.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"6C23bBzSnRSJkVm369H4azZ64DXFwGVQjBdnTsApFcHS","sender_id":"temp-1705307791079.testnet"},{"type":"transaction","transaction_hash":"H97cg3M3JKaScfs74CDcVrU5po2M6jgSRcRzM7sqsphp","sender_id":"users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"J2n1Xn7HsL7sxLEJtQjuLduHSmMv6yQi65UobBu9pYSp","receiver_id":"perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"Ca5zaaV7uNAKK93ydixMEu22UjGNB6Ajph5yc6sTvkK5","receiver_id":"v2_1.perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"3S4NnViwPkAg1SjRGbggsqk5vQrSRVUwSH4kRkquZmCw","receiver_id":"nico111.testnet"},{"type":"receipt","receipt_id":"6JZgWaQvZN1FgbgahtCeWtbHu9wv2yUuzfoEym1rXjqr","receiver_id":"testnet"},{"type":"receipt","receipt_id":"2shX5MX3iEVZQ7wkaprw7rd3aAq94Fpf3MhyuZkWLe3f","receiver_id":"nico111.testnet"},{"type":"receipt","receipt_id":"47ZjC98yjzakyGcRJi3qTcwGLiStVGzYAmBx9gm6d2a1","receiver_id":"usdc.fakes.testnet"},{"type":"receipt","receipt_id":"9axUnmMM4nsdPsGt7SSP3ZqLhpR8ssxHzKCuJXTu4kLv","receiver_id":"temp-1705307791079.testnet"},{"type":"receipt","receipt_id":"7mEqPE1MeGy46tYkYNQemMYiFNhGqJrMbvRVewi1NFc6","receiver_id":"hotwallet.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"8Bd5EkrT2o5dfD6oDvcytrD4SkeiVFG8R2vZAAr9Bcny","sender_id":"perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"2KJmK42QikiY41zVPHfhTnwm2Lxo3XUBcwAuraHxZLya","receiver_id":"operator-manager.orderly-qa.testnet"},{"type":"receipt","receipt_id":"Hug3DKE9jwhqNd1Duys6iQSDvrfcoVBRKiDiLvayLQRp","receiver_id":"operator_manager.orderly.testnet"},{"type":"receipt","receipt_id":"6a3DLhDC2crMngFdkET1C3Ufxg2g8rShU9qEVEoCm91i","receiver_id":"operator-manager.orderly-dev.testnet"},{"type":"receipt","receipt_id":"8x6R36XJBpNc9YN8vdGF4WPjXJv8p6gNXeBEwRyquwNq","receiver_id":"wallet.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"3R6XUecZqj7iwdKQnVeTfcmyZW3UoNL8ULuGmENm2rDN","receiver_id":"exchange.ref-dev.testnet"},{"type":"receipt","receipt_id":"7UifWEijLb7kcpve2MMxhbZdDcJyocSqxeB7J6H9AxjV","receiver_id":"usdc.fakes.testnet"},{"type":"receipt","receipt_id":"EgMK7mCt2QCsx7qpe42tztSn1re3dwnJAA9Y5dD5fg9h","receiver_id":"nico111.testnet"},{"type":"transaction","transaction_hash":"3KtkAJr1kxgJGY2BoDhzjC8Kzf5uW44RMkhhcgho54BM","sender_id":"testnet"},{"type":"receipt","receipt_id":"5Xk7fBpz6ADAp9U3aeQZZ4N881iAxfwLfJ8NDxzw5TFu","receiver_id":"asset-manager.orderly-qa.testnet"},{"type":"receipt","receipt_id":"6XbaTtrawA7Co3EGnQ4Z8JdWW3QS1SRMSeHA8BWkmbwr","receiver_id":"asset-manager.orderly.testnet"},{"type":"receipt","receipt_id":"B5AJrY9esXaXg7DN9LxBciisifXLsaiSmbtbCA4QyQMo","receiver_id":"usdc.fakes.testnet"},{"type":"receipt","receipt_id":"77risbi2vZCpGvekhmvau767wFHCHBv1zdYmvbvgYU1a","receiver_id":"asset-manager.orderly-dev.testnet"},{"type":"transaction","transaction_hash":"8pcFgzSeH4ukNfY4WuS3YpuqbowdikcnFqG9ZPTpHHLZ","sender_id":"hotwallet.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"HfHpwDwh1vsm9jWwWDpecz4Y1ACRJdi2bBeHEpJZgE5D","sender_id":"operator-manager.orderly-qa.testnet"},{"type":"transaction","transaction_hash":"6QFZdL2DhaeujKdvVdsmxLge9UBJekU9ZAB8rtPmiL6w","sender_id":"operator_manager.orderly.testnet"},{"type":"transaction","transaction_hash":"BzqFV34ybLugKYpMrQvKH61qFxgaWAih28CvEwsf9U62","sender_id":"nico111.testnet"},{"type":"transaction","transaction_hash":"DnSs3zfKU5otLyUuEZAUDLtq8RqHno4MZktZbFXZ4N5j","sender_id":"operator-manager.orderly-dev.testnet"},{"type":"receipt","receipt_id":"CrDxXz1oG8HkS8gYPj9T16HFwNSSsX3eFeY1MNp3gQEP","receiver_id":"applebear.testnet"},{"type":"receipt","receipt_id":"FMNYwCMPiYmhwVqKtj8Xov9dDGvNMGe3tA4dN5KgNtK5","receiver_id":"users.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"bMtjZage7MXyZCpYjRNcgH8ywMGAsTDCuuLubLUtHtv","sender_id":"temp-1705307785575.testnet"},{"type":"receipt","receipt_id":"AaCgjGwraHxc7PTbXZTi5oNrnzEiFjkTeZY6ZXY5dxJW","receiver_id":"61ms34eq1y42.users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"DyD4D5p34KV8XLZnfrcKZhfGVAXTMTBaM2bpBUj4eGK6","receiver_id":"perp.spin-fi.testnet"},{"type":"transaction","transaction_hash":"6VvbXspgFK8aUhzpcotmhhnv3L9ke5W5uREXbx4YjtPn","sender_id":"users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"2VvBLPzDseWnSyj98E7CCr7ZE9BZnSLEek4wj6sTH3qx","receiver_id":"v2_1.perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"9BjR4jSHw68UT2gDkyyeaUYsijvwRMp5GuZx4132acxb","receiver_id":"testnet"},{"type":"receipt","receipt_id":"HMdanLQPNhXQ8fwRKEEecPd11FrwzccBqYuREwXFbPUk","receiver_id":"serburberibar.testnet"},{"type":"receipt","receipt_id":"E7tog5sHCv7uZU24YaJSxuALmMwfhh5sXWZkbT38ajsz","receiver_id":"temp-1705307785575.testnet"},{"type":"transaction","transaction_hash":"8GqxHMnTT8GWZ7qE8jWnU7NgAQTphvXsgxCGjwfXk4sn","sender_id":"perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"HQUgjVjwiT2iiUYb9gs7KLX3GkxMkUgrVbkQHtmNXoBw","receiver_id":"dev-1700181646813-30367561749085"},{"type":"transaction","transaction_hash":"Bj9v56mNwpSA8es6EDvnZHXfiEtsQAwGoJ3azV3N6qvV","sender_id":"testnet"},{"type":"receipt","receipt_id":"FeX7gmMTmdf3YcsjnYNZ8Eoa4Gbot4kME6mzNq2x9FNe","receiver_id":"hotwallet.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"66qqnDyFf167i2w3SA7QnhmX5qTmuMxGwcGdWHJBcaec","sender_id":"serburberibar.testnet"},{"type":"receipt","receipt_id":"2fefgiS7JmLqKjtbHctxG1CAVSmhMfwoCwEDgo5SsDDq","receiver_id":"wallet.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"Gku7G9pfr32zNRg6e3u2WCAjKsWVT8geFQvKHqPafe34","receiver_id":"applebear.testnet"},{"type":"transaction","transaction_hash":"HnUrGDgpDNAxNxcU2gtHKgfereh5o2FSn6wLEHrKL9mm","sender_id":"hotwallet.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"AyMKZyHaGf9bJxn7MmygXkuxKBSHZunR2MqxbjuRUXm","receiver_id":"perp.spin-fi.testnet"},{"type":"transaction","transaction_hash":"D7w1R1NKgPFhRxWz1fGWNKDPLq6EF4oFrzCkKH68Z8ET","sender_id":"temp-1705307779565.testnet"},{"type":"receipt","receipt_id":"CAPZ5XG9yKZ6AG8Xikrzj9Mbp5uHZqahgHAe5QuV4rKg","receiver_id":"v2_1.perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"2ix2geQJajQps2f4jXEpJEqQhb3fbvRDLr7K4ti4biK5","receiver_id":"users.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"3koYJD3zCj7dpfo6ey8oDc2wS4Vky7CDsCwjepAAgKzY","sender_id":"perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"DBNrcrxM7s569b5SNAfXSAJ3gCy1e7f7qcj6wTTLzHgh","receiver_id":"l0buc6lh26h2.users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"8ftt4CXpmbW3bAMqn6iLEQGwtzDqDW1cGU5NUpLTtk4J","receiver_id":"testnet"},{"type":"receipt","receipt_id":"2tqVdmq1hjPKi4ajkkayCVKevX3oE9cywX18ikLTUdUE","receiver_id":"operator-manager.orderly-dev.testnet"},{"type":"receipt","receipt_id":"2tdVkSkKWM5JxWKPzgYrvLApWNw36hHjJNg4A4m2DaKB","receiver_id":"operator-manager.orderly-qa.testnet"},{"type":"receipt","receipt_id":"71DwMyAnsiT1mVgsZH9MptrxqzfT8koiZCNyBtsGJVWr","receiver_id":"operator_manager.orderly.testnet"},{"type":"receipt","receipt_id":"Eh7cMZ7xaso7p5qsFDDCmQGznSGUVPnefLRky21ioNR2","receiver_id":"temp-1705307779565.testnet"},{"type":"transaction","transaction_hash":"9XGvNFPCSyGhCmHn3gU38fy5M5K6SkWe8wFnPSSgJm6","sender_id":"users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"7kpFaqoo677FTc2vLCEYMsLqowWWJZA723ojW7wKvYV1","receiver_id":"asset-manager.orderly-dev.testnet"},{"type":"receipt","receipt_id":"2gJ2myK3khzu6MNASoksg5VeuSTNHDexQVQaZwk94886","receiver_id":"asset-manager.orderly-qa.testnet"},{"type":"receipt","receipt_id":"Gg5aKWQYuRWbmND1cfRDvYYBhCABhNzjBXJCuNS5AyPo","receiver_id":"asset-manager.orderly.testnet"},{"type":"transaction","transaction_hash":"9TBgWyzjT18Xkr255GXvvSP5sNDvn8rnsjWrwBZiK3Mv","sender_id":"testnet"},{"type":"transaction","transaction_hash":"GyEdA3Bf9Q4zfuUUDPPhA5WuKxiHKNc7H8VrBQVDmJiH","sender_id":"operator-manager.orderly-dev.testnet"},{"type":"transaction","transaction_hash":"ECh3QyN5s9aJFhaM7CkVAP5PfneQ5KYPkvR1LzL7hotH","sender_id":"operator-manager.orderly-qa.testnet"},{"type":"transaction","transaction_hash":"2XzgM7NpgZLYZXXrqm83uDEQYcBwzJvt1naFpTces6iq","sender_id":"operator_manager.orderly.testnet"},{"type":"receipt","receipt_id":"Fwg3S36jQgABh11j3NAdHkkfR4rjMLEPwm7GzR1eXe6e","receiver_id":"hotwallet.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"EAC1hmzTmy72uZ5NjazWPMLL1VdutXvUQYyf242LkT7W","receiver_id":"wallet.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"Bk4F1vMqayj9Q2wMVAtNFwL4dFCZnngGkyfaHwHw5epK","receiver_id":"relay.aurora"},{"type":"receipt","receipt_id":"4xijxh7YqCLLDkX357K3PxSFBJyiHEtmxVt6UezEbwWE","receiver_id":"applebear.testnet"},{"type":"receipt","receipt_id":"8ybdiKMhC2HpKVYWUJNSkSng3h6y1Dec6GRcmmmNa9NL","receiver_id":"perp.spin-fi.testnet"},{"type":"transaction","transaction_hash":"39FpHuTjNnQN6NNd93Ez1irwqHC4vFe29GYX9z2M7sd6","sender_id":"hotwallet.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"JBXzeBCYNnqUgyZhcFYG8DhMro7C9hUL99adMRNZpbdt","receiver_id":"aurora"},{"type":"receipt","receipt_id":"AnMRY2nLS851YvPsnJTKGPZBixiGpJwyqHzvF1aP9e9Q","receiver_id":"v2_1.perp.spin-fi.testnet"},{"type":"transaction","transaction_hash":"9WBwzvC3JgEh4mmYh8BZDoowkzgwL7owiA6jhicLD21t","sender_id":"temp-1705307774087.testnet"},{"type":"transaction","transaction_hash":"9UUSSjSDarZN84b3i5831ETCCSrVxUA3Ub1EJNMsUP1U","sender_id":"relay.aurora"},{"type":"transaction","transaction_hash":"BRs62S8puKmHfCLiDeLcwBW4jKumAcYUDwprNiST2S8t","sender_id":"perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"B8DQJfk7rfSQwLzWVFobmJPDRaHbWVd15CtVL7vWqmvk","receiver_id":"users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"2cDqqMSSAJ7khpGmHJcSikim9XsoGbcBUr5Rw2xLWpfZ","receiver_id":"lqykp8mqr904.users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"9TwhFdUfBBtDShmCoeZeW6XMXrmWJMmhqWFgJ7yFivEy","receiver_id":"testnet"},{"type":"receipt","receipt_id":"4De7XSQ4tyJgJ7rMoi4d2FAWQSX2ArQWUqwqJZ8kmQzF","receiver_id":"temp-1705307774087.testnet"},{"type":"transaction","transaction_hash":"DvwWAH7bwhWoHiV5XrV1N9rbtGyCbwyJeNCFNF6Yfhkz","sender_id":"users.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"HKV5zAoj4ZJXATFXBrAaSiKY8q8AEvuCHh2oMxxKjbyV","sender_id":"testnet"},{"type":"receipt","receipt_id":"823eM34ytTQyR3V1wr8D3fMrmJw8tQ7itnwTtA5egMMu","receiver_id":"perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"7iqyZTricahutiafpUsVwdNpNGhsq7evVjqDcd3AKG8z","receiver_id":"v2_1.perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"AkUdoXJ13wQbLj9NRdNwWhG9LvMxiWJMgpaHfCcB5SvH","receiver_id":"hotwallet.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"CM2LqLip8neNbXFtRgjoqvSjETWN3rmn6WFmyjBLcCbQ","receiver_id":"wallet.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"9TfeQa4g8BPnQiyRgmNbDK6hwXzzpa3Hd2J8sSKRk4JR","receiver_id":"applebear.testnet"},{"type":"transaction","transaction_hash":"68MfAYbrnxMQ51iqHG8p4DLjHVzoFzGsmnZhmGcFuHrN","sender_id":"perp.spin-fi.testnet"},{"type":"transaction","transaction_hash":"9qpoJPRcBE5Tbnhc7hptS9UDmxwMuxTejvKPPzur5Dud","sender_id":"hotwallet.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"J3XCo7Bxk1NSTg2tjexHZPejbvphYfgzhyAN7mUxZaLW","sender_id":"temp-1705307768570.testnet"},{"type":"receipt","receipt_id":"HQamKUb3Bu9sd4WuRrofE67SAxPniM3waYxMXt2poH5i","receiver_id":"operator-manager.orderly-qa.testnet"},{"type":"receipt","receipt_id":"2fKG7CrYvqHj47SbMCkDVQn1R23Esd3jwiv7ZKAwS31o","receiver_id":"operator_manager.orderly.testnet"},{"type":"receipt","receipt_id":"CDWhWYyAwKCPp7Ese7tqaMw4dUShZSEH6CRBS36ERADr","receiver_id":"operator-manager.orderly-dev.testnet"},{"type":"receipt","receipt_id":"AUBNyyKgpgrBLRJPgMNnQJZPzWauAehijw2JJfUqc86G","receiver_id":"bhc8521.testnet"},{"type":"receipt","receipt_id":"22vQ11NbSXe9LELKSy9jbDWhfD4NyKXvxLBtCFX52tHf","receiver_id":"staking.bhc8521.testnet"},{"type":"receipt","receipt_id":"4g4GFAtdxuQjUT5n8okdRo74wJvQtDyw8nad2cwmwujr","receiver_id":"asset-manager.orderly-qa.testnet"},{"type":"receipt","receipt_id":"2WMKwdnmZEgsHD3sezg5gLazmqpofqUAq5kJ8SqT3Z3a","receiver_id":"asset-manager.orderly.testnet"},{"type":"receipt","receipt_id":"BcEw3zvEGHDVEfG1ewRPe55gMXPXbxQv9SRXpuDwQZTz","receiver_id":"asset-manager.orderly-dev.testnet"},{"type":"receipt","receipt_id":"FGn4ocYtv66X1BPUmdhMyd84FHfCwmZbnuKTUgozs7mN","receiver_id":"users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"7x27JzEbU22oyMwo3HuWbb9eKwzjSS5VUkZULx5Mu9hq","receiver_id":"ttja473ppgmo.users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"Dkp9G8VHMevv7P6M6UrT7AbW9rkcJmiFYXfbfYL7CaeA","receiver_id":"testnet"},{"type":"transaction","transaction_hash":"2YaZCwEuwLZjmM5DHvH6Ej3eh2pWA4vbPfs6CsP6Jruw","sender_id":"bhc8521.testnet"},{"type":"transaction","transaction_hash":"CJnsFX84688D8vuqyFxeoqKUn5899gLq5tQA9LhtnmJA","sender_id":"operator-manager.orderly-qa.testnet"},{"type":"transaction","transaction_hash":"8va8nCmKbAW9zaTmoBJMQzQyaGDsBpiJyYfmZi9xyTvo","sender_id":"operator_manager.orderly.testnet"},{"type":"transaction","transaction_hash":"5sN6Bx6PZP5JKQGY8cKdnx9PxuahvxWTZ33FVpmctYrV","sender_id":"operator-manager.orderly-dev.testnet"},{"type":"receipt","receipt_id":"79d91Fg2wJrYoadNX78y13TmfLpC4ysFgwjQCGBSAMxd","receiver_id":"temp-1705307768570.testnet"},{"type":"transaction","transaction_hash":"LUWhDHLgTPypdsWQx6ZZWqwqjytgjRv7nMsPdv45uyX","sender_id":"users.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"7HXaDhcqy6HykFipoJmKajtfFonoBgRCrcDRBgjKPFq2","sender_id":"testnet"},{"type":"receipt","receipt_id":"3umPbf3mwhgyUHNCnACamcKKVUc64nenWGSVDjbbX4yk","receiver_id":"perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"9sueXbodHKd188y9jwj3TB8pwS8noiJ5rkqrjneDE49c","receiver_id":"v2_1.perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"6YhuaCoA6AQre6UqPNZEw4NuCp77VZVZrb5ExWcLwtau","receiver_id":"hotwallet.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"8RuwEQK9yop4dYoT3kxrjLRCXaLVL2kx81N7C2bEXYTc","receiver_id":"wallet.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"4GEfvjwsVa3MTogFAc8DXDcct9uscuD5SFMb4aiK4yqY","receiver_id":"applebear.testnet"},{"type":"transaction","transaction_hash":"zzhHC6gTHBFrRfMdPn5CBLtZDeQx5np6qvEn3GpgAfP","sender_id":"perp.spin-fi.testnet"},{"type":"transaction","transaction_hash":"Bk7rRrnMqaCqvNREfcbdMXb9Dx8FAvumpMXq1Yp2HXwB","sender_id":"hotwallet.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"GSXj5MeUTtc2hNq36UUR7tJWaA83rGiTF22ZJRXvM5dF","sender_id":"temp-1705307763050.testnet"},{"type":"receipt","receipt_id":"7FvemErDZ4rcSR6UyDirs9qsCGFEDnXFEr5fr6Bcadnw","receiver_id":"users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"jjM7ECquudVPjmuM7adgC8qViJRvqaZ4GF7Vs1Vop4a","receiver_id":"testnet"},{"type":"receipt","receipt_id":"FwyU8uTxFnj68kW8qB8b9juV157Gj5pMQ3qKAXsYz9aQ","receiver_id":"temp-1705307763050.testnet"},{"type":"receipt","receipt_id":"Ahq7kCVUDxz1ZtfBJtEUhdjLy6i2WZ4969BuH3DyjRRa","receiver_id":"4y4e1nt68oji.users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"5CL21jNbXXN9DpVzvfnTWkFVZUmoVRwHj9iPUmeL4waa","receiver_id":"perp.spin-fi.testnet"},{"type":"transaction","transaction_hash":"8fDS1fVpS9yT4YgfErqEGyM7CB6gDiaWcTYdC4CwasFe","sender_id":"testnet"},{"type":"transaction","transaction_hash":"GBsZ45z6LTbPQNt4dMaJtk3wM79f3DmY8hgB1L5ycVKh","sender_id":"users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"TMbmjNecmrY6H3pFygxXyrAR9NCKQdwzQaKYnixuDqi","receiver_id":"v2_1.perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"CJSTAfwG64nmdcfp9oa9o3N8QRKiByVzk1UQRKoTa5qE","receiver_id":"oracle-2.testnet"},{"type":"transaction","transaction_hash":"AumrEfXgM3gJSypJRq4HeCcXk5TKkJhY1rY7JNCTqSLV","sender_id":"perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"91L5TBq6ZMFauFpsL9AqLev3wBe3o3nLoJryrn4PECVY","receiver_id":"priceoracle.testnet"},{"type":"receipt","receipt_id":"Gk6ZGirVY8rEDLNm1TsVh5Qj8Bs6HdEojqPfG3Ux9971","receiver_id":"applebear.testnet"},{"type":"receipt","receipt_id":"GMufFqSmDXhTCpYTh9m1bp2podT7tcwBsJQhHwM2z17X","receiver_id":"hotwallet.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"DCJMbCJCMByQChr2n4WzyX3h71YGTtdJc4rQmiSA7eS6","receiver_id":"operator-manager.orderly-qa.testnet"},{"type":"receipt","receipt_id":"3DFZwywW1pszEn5YkTW5ivYmk97mACHUR12FDPj8GCZB","receiver_id":"operator-manager.orderly-dev.testnet"},{"type":"receipt","receipt_id":"4RzzPdcfE5o9frXrFCNu9TknRLXmyLAWCFLCXfJcSqYG","receiver_id":"operator_manager.orderly.testnet"},{"type":"receipt","receipt_id":"7wqBw4KjhMF6XHQus149dAJ6UrtGbjpBSKvNYwR9FPdK","receiver_id":"wallet.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"J14gsFJM2BU6bmK2kd6CjkJT3FgjuP4WTn1ngHBAze6h","sender_id":"oracle-2.testnet"},{"type":"transaction","transaction_hash":"DPxyJvcfZDJRqtDGENaPUEtYP2iFY4tkfXBxkTDkpHEr","sender_id":"temp-1705307757533.testnet"},{"type":"receipt","receipt_id":"7xyytos6GckQz4nM9JGAA83uTT57AZJPPr3ro18BdNJb","receiver_id":"asset-manager.orderly-qa.testnet"},{"type":"receipt","receipt_id":"3XbPeoyTcz8ZghD6L7dRcZV5S6PeDymegD8YNMj7qfzr","receiver_id":"asset-manager.orderly-dev.testnet"},{"type":"receipt","receipt_id":"4FZ8j8H6pQcM25jHtQgpKPRfqFTwawyfRbAjPoMBuvxo","receiver_id":"asset-manager.orderly.testnet"},{"type":"transaction","transaction_hash":"BFbJnwnCtQJbA6SRqB92F6maEaLcfKWcN86HYJtq5dBV","sender_id":"hotwallet.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"7ijuPCvAjBx7zSpRkReEpWoaauR76EfaBsWgKWnw3qJt","sender_id":"operator-manager.orderly-qa.testnet"},{"type":"transaction","transaction_hash":"9McQDTLvhCP35pNgA5awRwAnbK6dFah4ubSZogMtSADz","sender_id":"operator-manager.orderly-dev.testnet"},{"type":"transaction","transaction_hash":"BgNYq8UcLS7VpCMd2L8PyPCVxvBXdxh6JoP48UxF6tzG","sender_id":"operator_manager.orderly.testnet"},{"type":"receipt","receipt_id":"FAykAPcQGQMQdEYvUEUQvY7u2B5DxeiFm4xDZ4g2suT","receiver_id":"testnet"},{"type":"receipt","receipt_id":"DUGXpzP71UWaS5VFvPWWBNZFogjBUyMEzRebKUqRzcfP","receiver_id":"temp-1705307757533.testnet"},{"type":"receipt","receipt_id":"BXybt7LNBpc7pzd2RVh5AVjiTfqa4cbMhxJZNiXQMz1b","receiver_id":"users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"4rYskvzQt3MirPphZ2FKSisNqRRUxZYo6FRunYTC6eHh","receiver_id":"perp.spin-fi.testnet"},{"type":"transaction","transaction_hash":"EyQEmNTMj6JhoaRtebH7MH6ZEpkUHnFxYNeqZDDeMPoD","sender_id":"testnet"},{"type":"receipt","receipt_id":"84G35SZcWZcYfWkVskuVwMw97sH6MASMhgJJYyM1zmF5","receiver_id":"v2_1.perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"HZPc5jxj6LgHUeahWPnWLcdete3JEDG3WtUNpSSbZie1","receiver_id":"ehzs8rz8ddt8.users.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"2HXSeyyNBhhKFiGpgkxZpyYY7dkzesLEkturb8Wqgq3j","sender_id":"perp.spin-fi.testnet"},{"type":"transaction","transaction_hash":"CFi9XtWFgRAxV16ZgX9VZ4NE5pEGTNnefbgNn7qJ2fjY","sender_id":"users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"84WyHPKxtQhCrVVZbpNwgNhoV4kn6BmpZWtzXTAerg97","receiver_id":"applebear.testnet"},{"type":"transaction","transaction_hash":"7XDd5j9LvW1Lhxvd9SQjXAo29e2PXyAR53rQQgau773D","sender_id":"staking.bhc8521.testnet"},{"type":"transaction","transaction_hash":"BkBbie5MZLVxuAWm5Vfw6X2kypXjvUQrpNW3PJahpeQj","sender_id":"temp-1705307752525.testnet"},{"type":"receipt","receipt_id":"HqLNFKjFRmV7LccaiheFrckf9aG7ogKT1UGVwinCmGbp","receiver_id":"hotwallet.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"B3pj5pT2mDovF7sCodoXzjFejQYdhvrknGGtvrok5yCp","receiver_id":"wallet.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"GFPFo9vX87TaxDGsV4UrJuuU5F6qHpm2jvfiyYdM8UM1","receiver_id":"testnet"},{"type":"transaction","transaction_hash":"FhmzPxAqr5VHCdvK1K5Kema2uyDhJvMWquvZo6s5NiFy","sender_id":"hotwallet.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"4BguhWZF4i3XtJxyKXBQZbBsikdyicRJPtX7taUHsUhK","receiver_id":"temp-1705307752525.testnet"},{"type":"receipt","receipt_id":"5FZ2PT6Qg3GSM6BqhdU8hTeMuQLSmhpLyoqok9xaMDft","receiver_id":"s-lam1.testnet"},{"type":"receipt","receipt_id":"4o38cT9n6rGAv8yWXKNCQhxQZX5xdkaDEhCKHi8t1Vzk","receiver_id":"perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"CACWsqoJvJGkeMKsNqahocrLZ4UnUrJ1FX3sc5jJBGv2","receiver_id":"price-oracle-v1.nearlend-official.testnet"},{"type":"receipt","receipt_id":"EXNSBtTy5YjTVqwB1eFvzaKSWKhoekykrzvRjgK2529K","receiver_id":"v2_1.perp.spin-fi.testnet"},{"type":"transaction","transaction_hash":"B1omhdomvoiSPrr1kMUUtwJVT5BtchRwMwNhiF6ZBTvB","sender_id":"testnet"},{"type":"receipt","receipt_id":"3ekMws3PbFgdHZyiEn6UBgeWNvvwdFKN6C3ugNUC156y","receiver_id":"users.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"8yyuZDx3tZ23yto4DxjRv5jsh2iYc7qQexRRBi4CgZk1","sender_id":"s-lam1.testnet"},{"type":"transaction","transaction_hash":"Dhd9HvBPRJ8dYoUa1SnojEhRq2AuwY6766vNRVAykSSQ","sender_id":"perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"4qRmaR5J686H75dcx2RarEBSZLzU5MFNvUDB5ZyAqEmb","receiver_id":"operator-manager.orderly-qa.testnet"},{"type":"receipt","receipt_id":"EQKzBJSXNuj68F7SNvkcHUjZnkbS4EKJf83RPKQzGtCf","receiver_id":"operator_manager.orderly.testnet"},{"type":"receipt","receipt_id":"62pxMPj2qj3V29EVwuo6HjQf41MxwYmSP4aF1MNTh9tP","receiver_id":"operator-manager.orderly-dev.testnet"},{"type":"receipt","receipt_id":"8zD9JBBWJdk6VuMqL8dsWPhocdv862TQsTw8mRafck7v","receiver_id":"ilvrjq2hv9ns.users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"J9d5J3Eb7bY4nZj75vq8WuaGD9C8X9joJSSSi1hpdoug","receiver_id":"zavodil.testnet"},{"type":"receipt","receipt_id":"DvL4SD4mpQUc1Ux9bgZFmpPJhSBBZekCdgV2njnCzH86","receiver_id":"asset-manager.orderly-qa.testnet"},{"type":"receipt","receipt_id":"J2stAKSLdLCiygjLwbGHczXckXdzXs2d7bMJ8btabjAn","receiver_id":"asset-manager.orderly.testnet"},{"type":"receipt","receipt_id":"DnAAVQg1fvqSAub9N7K3SwrAFB6A56iSkwtS9bpejjGB","receiver_id":"asset-manager.orderly-dev.testnet"},{"type":"receipt","receipt_id":"65RxPUKpt9ecsKtcBbrMWyB7cw3Fw7WuGmjYV8c7Njpn","receiver_id":"priceoracle.testnet"},{"type":"receipt","receipt_id":"KxHZ9VD57joHnpcpZMtTwHVdECJPG525Fo6R1nsRjYj","receiver_id":"applebear.testnet"},{"type":"transaction","transaction_hash":"8CrgmdaBKCWfWadEWDJ5xMDBZZyeDraUkmsf39wpcsnu","sender_id":"users.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"E1GyP8orNiBHTH71Y2HvKT7gbw5NU6PxVnZghMyCCZG1","sender_id":"operator-manager.orderly-qa.testnet"},{"type":"transaction","transaction_hash":"9zNQYPSRYPD6BPcPKwerrsHWHEubEuY8boKKqCyC3tQg","sender_id":"operator_manager.orderly.testnet"},{"type":"transaction","transaction_hash":"HrJ5kKfG1aNb5gJ2pPzXzTVbwWhCYAYodvdyeqgJTs6N","sender_id":"temp-1705307745505.testnet"},{"type":"transaction","transaction_hash":"Go6hT8kDB3qcb2XS6rNtwGHASYp44Jt61vCP7Z2DrFqX","sender_id":"operator-manager.orderly-dev.testnet"},{"type":"transaction","transaction_hash":"AaQTeza1wDJshtzxGCiqGmUFETbDmASB97R4kq5ZCbgS","sender_id":"zavodil.testnet"},{"type":"receipt","receipt_id":"5n1jXPHxLzrRtEcZKGGS2Uiwrjb6omXWxYjUL4NDsuap","receiver_id":"hotwallet.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"CWqDmfn8C34wzH2ifjLCCs5G86UEnBxujXVVpL1FUnGb","receiver_id":"s-lam1.testnet"},{"type":"receipt","receipt_id":"4jsiX5ujgWQP4Ak5H9A6SYqPsDW5ZQZvomfgSpMLDn6v","receiver_id":"wallet.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"8aMRTJFUrQs6m5uL8zzgteKnVFrkbZcMEJ14C6X1Gvbn","receiver_id":"price-oracle-v1.nearlend-official.testnet"},{"type":"receipt","receipt_id":"82tVMBBJwF8Q3j2PPjiRJuxmJqDcStLzde8fxXHRMGN6","receiver_id":"relay.aurora"},{"type":"receipt","receipt_id":"3jCcaKswLFLcodHSbrb38twSmmhRFJUAQouUmvhrGsMi","receiver_id":"perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"5niRYcxG3yMgNmctjFABkrF1yAKwWL794wJSHdnwepme","receiver_id":"testnet"},{"type":"transaction","transaction_hash":"GhRhjvRxaRwJzwi3ak3pMpGs13HWdME1WoHyECja3qtz","sender_id":"hotwallet.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"DcSLpcKcRkQhCi93M6vZXGkDL3bziTWcLohegt7p7tZF","sender_id":"s-lam1.testnet"},{"type":"receipt","receipt_id":"4N853GZ1P8CuLCJ6j5PBuuiNwXzJpxP1bBDtk6AHfKwr","receiver_id":"relay.aurora"},{"type":"receipt","receipt_id":"GKqByK2wAHYEbJenRxkYheMpxwByM4NkvWZdfZerbQn8","receiver_id":"v2_1.perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"9kePVBL6LdzFaxAahy5UnS2mxk4SnTKt1stBooe5Rdo","receiver_id":"temp-1705307745505.testnet"},{"type":"receipt","receipt_id":"HRcpQE1tURdkuNQDvbiPGda4AzvhRkrN4t5LNfghMtPA","receiver_id":"aurora"},{"type":"receipt","receipt_id":"AMRxi5sAfv6WTxqciiTpZ4vyqrqjKRfY8KbjcXLUzJub","receiver_id":"operator-manager.orderly-dev.testnet"},{"type":"receipt","receipt_id":"DTQDzMVyFx5W6LU9STz7c8re5W6Nqv1YhsasNAnzAkTN","receiver_id":"aurora"},{"type":"transaction","transaction_hash":"G4Bh5vMco2NjdhWKp49k2FduWcur34hZ6HH2hRaUKCw7","sender_id":"perp.spin-fi.testnet"},{"type":"transaction","transaction_hash":"xkzuJAMkAVPUi1vwuKovjVADS2KaW8QjHw62oBx6wGH","sender_id":"testnet"},{"type":"transaction","transaction_hash":"GeG2C8LkZFj6Pn4uyGnc3e3ZmbVGC9Cgrp2Yf2U6svyV","sender_id":"relay.aurora"},{"type":"receipt","receipt_id":"7Twnb975W8R6CKVEWegrhi1JGHydR5zmzydR1fP6Pda7","receiver_id":"asset-manager.orderly-dev.testnet"},{"type":"transaction","transaction_hash":"CKVfpWPV3QQiJ5wfQdjsNpwchqA3jUtZUG2qDpMvqW4","sender_id":"relay.aurora"},{"type":"receipt","receipt_id":"CRqM5tuz9hcmFhkSpeoT4rn9d68QP7GuQonhhDwH7YJY","receiver_id":"users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"HjGHb5iTzWQ2oUqM4UFuRJmija2rxGQYiJGcirDiq5UJ","receiver_id":"bhc8521.testnet"},{"type":"transaction","transaction_hash":"97uTVfZKxPMadP5RWjgKeTja5qDiiWKyyjFuqhyruk9Z","sender_id":"operator-manager.orderly-dev.testnet"},{"type":"receipt","receipt_id":"EocTbZdsT6mfWJgXHEN3S1BdBzRWmNYPUZaxhtw6cBS9","receiver_id":"staking.bhc8521.testnet"},{"type":"receipt","receipt_id":"8PV12EPHocJg7WtNaUNU8LATDi29bDZpX4gAGWGn3fzb","receiver_id":"wi2zj8a44ww9.users.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"GoJ93V2GQRAuGQYW1uKzhQqrz4UKnbTVh7X5UD3k3rJR","sender_id":"bhc8521.testnet"},{"type":"transaction","transaction_hash":"672tcEtJCDdMDvZbH1Gz81piNDQvRwBhmEjjtvHzkoUz","sender_id":"users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"2c8Fyu9H7ihjxYaEM78EzC68CeN2TC6euimjRsQBdLD2","receiver_id":"applebear.testnet"},{"type":"receipt","receipt_id":"AUgHY84ypiaA356cQQwJxPdDXJ5nyezYSep6rjCKogRq","receiver_id":"perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"C44CMoXmqpKdRZwPbjgzXCBZzfvpPewPi5wAHpxr1v9H","receiver_id":"v2_1.perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"7akzoWwP6Kxnk3wCzMaKiYWnFwwoeFATXMYo61DkwWHZ","receiver_id":"comicdeer.testnet"},{"type":"transaction","transaction_hash":"GenuEHkF8LehYoZyYXg4575JxCbDfPVsH376URGWpb54","sender_id":"temp-1705307739983.testnet"},{"type":"receipt","receipt_id":"31UhY8whxQut1jzhbc79M37A1NY7YirNHNnZGMVDXVjF","receiver_id":"hotwallet.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"AeaoBWLmbr4qwvRE4V71pEv1gx3Qbip8nqW4fj61Kczv","sender_id":"perp.spin-fi.testnet"},{"type":"transaction","transaction_hash":"6wCb1fvmR16CyUDE7ehnVh23VGQBkYp16RWfgd2aqgy","sender_id":"temp-1705307739377.testnet"},{"type":"receipt","receipt_id":"HbLpDaQS36oij4YpMWxQTfLbQFH3Cf6oQ5EjLfRnn2Ga","receiver_id":"wallet.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"DPE2WfQ9MG3Ejr7sppNTTgYzwyqGLEfpgNhJfxS2LjjV","receiver_id":"testnet"},{"type":"transaction","transaction_hash":"Dg8GFhanR27tJA24EC9y7knWuJLmsSLfi615vsKizRQM","sender_id":"hotwallet.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"3UPPVspH68a79hdi9HwbxH3yKrbCTztmLiakSfrwVjAe","receiver_id":"operator_manager.orderly.testnet"},{"type":"receipt","receipt_id":"AziRTxKMqC4E1Wn63B1QdCrCTzddRs173tNZx6pRkSau","receiver_id":"operator-manager.orderly-qa.testnet"},{"type":"receipt","receipt_id":"GPDR68TDMnZ9ufYzBMKoptpozb8gi8E7rASSwb8woZGw","receiver_id":"temp-1705307739983.testnet"},{"type":"receipt","receipt_id":"Dfihs3YB8iUEvMTuRGmzQtN5jM7fTfR7NJRBUG4kbiEg","receiver_id":"testnet"},{"type":"receipt","receipt_id":"EFdUNSmV1izaLZrvZRnsGkJSwAdUXPNi3poxe8pxEZnZ","receiver_id":"temp-1705307739377.testnet"},{"type":"receipt","receipt_id":"H2W49UqNusj5HmacN6zkSHmzM2NRQ4YZZR4NBtYWFpyR","receiver_id":"asset-manager.orderly.testnet"},{"type":"receipt","receipt_id":"43c13ha3WLKq8KY313QS7zFsJrTz1FcNhfo3dauPuPut","receiver_id":"asset-manager.orderly-qa.testnet"},{"type":"transaction","transaction_hash":"569ivh78HtkNzMtAwV9nrZcw52KRLavKomeEHf5PFvwP","sender_id":"testnet"},{"type":"receipt","receipt_id":"Ea9uzwJbiVku4iLgttb9jBpDP3h2eu5bLkznRyQRACxG","receiver_id":"users.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"AGXGwswvaL2j3ZR5EzdKoL9o3vn3zxwu4nvof7ewwW87","sender_id":"testnet"},{"type":"transaction","transaction_hash":"5NuxFavFcXuQBy94VBaQ3hPhuEneeoG7ouEgqwCDrBty","sender_id":"operator_manager.orderly.testnet"},{"type":"transaction","transaction_hash":"GsgohZDa1G7oL4we5NreYcWdaGEPpYsDuKXH4eDPKvGX","sender_id":"operator-manager.orderly-qa.testnet"},{"type":"receipt","receipt_id":"29misn96KZENH7LiFouVME9xoMdTjEkP3yrTAFwQxsvq","receiver_id":"klbswp0a1vx8.users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"8xDaH77bash1UYfGnEehC3hJQiL3AXbx8E3HqS9zLbTD","receiver_id":"applebear.testnet"},{"type":"transaction","transaction_hash":"J1UxZyLEqwbdBcbeUUvsC6c1LiqE1XRnnCwi7kh8bNno","sender_id":"users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"E6x1wD66F21qfb2cirDrBFCGCuvVBkWdwLBPZGHkXqkk","receiver_id":"comicdeer.testnet"},{"type":"transaction","transaction_hash":"63oedx7DyoC3Go3Moh1GoCtumt8jCjAoegcQu4LiohXh","sender_id":"temp-1705307734894.testnet"},{"type":"transaction","transaction_hash":"8ketL1ZE7JZnxQQk6PHm832kxvo5mYmxvjJeJGqHUJe8","sender_id":"temp-1705307734347.testnet"},{"type":"receipt","receipt_id":"HGnmfz15V5V13V3ggPbfJXFURM2VApYDEDqmrQ7k8dnP","receiver_id":"hotwallet.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"7pZGBfeVq3ipGjB2yumpWpg71x87b28tLjHiiQvHkzFb","receiver_id":"wallet.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"2LzQai317mSFL9WH3RVGpZ3Q6a4aW1N6YzPoGTuPUJNk","receiver_id":"testnet"},{"type":"receipt","receipt_id":"DQxrJdHSKMMp7SggYX8NboHZAoLfzpZWz1hRvcwDD5UB","receiver_id":"temp-1705307734894.testnet"},{"type":"receipt","receipt_id":"ET94UwU3piYVZiEjEJndj5bod9fzm2AVuMBzCbWSWMLZ","receiver_id":"testnet"},{"type":"transaction","transaction_hash":"75jRwwtXiHqEBJryDjsnmPJ4sYQdNS5TPHU9WVxgNTgf","sender_id":"hotwallet.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"EGjCXPSdKCgPZsWw9A5CshcgQHJk7jaYFGaTAEEbnoqs","receiver_id":"temp-1705307734347.testnet"},{"type":"transaction","transaction_hash":"7fRTLkNAefQmBEMsQ6HnGhHNA1YkCmduDb7R7SP2kT3g","sender_id":"testnet"},{"type":"receipt","receipt_id":"FJ3cDdxosiZegJ4WNYjBhXZ7BfYdMaLpPAXzJjajrZv6","receiver_id":"users.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"H9aX55Tqm1CW36QARgLte3YZ9Wdf3fhm4tjLygYFqFbN","sender_id":"testnet"},{"type":"receipt","receipt_id":"CnCvsHRvKzAuzXPw43ZXtRLu5ZH2ww58XQGUUgWYjNBe","receiver_id":"0pqglttllt1f.users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"HDknH3enjr78hRcC3wR5rKiKMG5GERfLi9soAPoW2hR8","receiver_id":"applebear.testnet"},{"type":"receipt","receipt_id":"AALcw5BdUqPGracwTjMxpocG8tWiLrTWHEC4gAk5ZDoq","receiver_id":"perp.spin-fi.testnet"},{"type":"transaction","transaction_hash":"6NTTnsdahx26Jzubk6bvynCz4ZViUoGQjQQyPaXgirNT","sender_id":"users.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"8wbnwD6b1knr2YhZom11Ldgujahi4M4ZsfumbC9zo8uj","receiver_id":"v2_1.perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"2iCRM8o3uEwKKEoKc3UrWi3S8Ge5gwgd7mVqpYss99od","receiver_id":"comicdeer.testnet"},{"type":"transaction","transaction_hash":"8qoHBsjGtwQcjM9W8yM2L98EokAU4hMZpVnD9x3JCEv1","sender_id":"temp-1705307729372.testnet"},{"type":"transaction","transaction_hash":"9EMfeSscicikVrDv6mHJ73wi3K8HAwcRH3buAQfE93R5","sender_id":"temp-1705307728821.testnet"},{"type":"transaction","transaction_hash":"3tkpFoRZdWP5dEPpAZhXX1GWyzNhgg8orkYL2oCMQPkh","sender_id":"perp.spin-fi.testnet"},{"type":"receipt","receipt_id":"GBLCtHewjdxSrk8f1ttRSGSRAqR7CvPMWGHM8bi1P1WT","receiver_id":"operator-manager.orderly-qa.testnet"},{"type":"receipt","receipt_id":"4qpF4SRRVmHq155FrhK1RCDbZNnxMtmLXfccL97AMKqS","receiver_id":"operator_manager.orderly.testnet"},{"type":"receipt","receipt_id":"S9PXMk58XgSTom9eJWC3szry2QK4ggRLnjnpv6QXNw1","receiver_id":"operator-manager.orderly-dev.testnet"},{"type":"receipt","receipt_id":"7Uhb1LojjwC9pVrryc53kAEwkY1z7B3VWf2DueD5HCdz","receiver_id":"hotwallet.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"79UG9E86GX1CHeePXMgEQgxWfzsnPSfwYnBMiafAK6NB","receiver_id":"wallet.dev-kaiching.testnet"},{"type":"receipt","receipt_id":"4VRxmA79eB7qL4PqJK4QX2ayYpLJZ3W3dJBb8q1euAD7","receiver_id":"asset-manager.orderly-qa.testnet"},{"type":"receipt","receipt_id":"Fk4iDHJrtKZr6ow8c4R9TyixvTz3QHUMHWA3zqNZizni","receiver_id":"asset-manager.orderly.testnet"},{"type":"receipt","receipt_id":"ATocjDbjKLXyBayuoxXtsTKpAiYmZsBhRtYCwzGVh1hi","receiver_id":"asset-manager.orderly-dev.testnet"},{"type":"receipt","receipt_id":"99xzZxX5W4oAFjEwYX9C3bcApsr7J5tiWacwGbnb5sKb","receiver_id":"testnet"},{"type":"receipt","receipt_id":"AkvWzeUbwUcw76LQvBV1XVmHMZh26nbMSkQvbBfnfXQu","receiver_id":"temp-1705307729372.testnet"},{"type":"receipt","receipt_id":"9A3JPegdSynaeEM2EWVFysUBDv3S3kcCrsXwvAae7JtT","receiver_id":"testnet"},{"type":"transaction","transaction_hash":"CtfpEjzFM41fkfduXwoyM41Fxc52uKpeV2tmWMDenrz","sender_id":"hotwallet.dev-kaiching.testnet"},{"type":"transaction","transaction_hash":"5UhNLf3A8wjYZSZa3YGfLgaU7g4t8uUEX898u2r5NgPK","sender_id":"operator-manager.orderly-qa.testnet"},{"type":"transaction","transaction_hash":"Aw29U5ccvJx7NSe1258YjBjG4YJPpDjP4WBNZB2cFQBH","sender_id":"operator_manager.orderly.testnet"},{"type":"transaction","transaction_hash":"6t9v25pvgVJYtCSiyjt73ngLwFnUJV7YqyKf49WDqKLD","sender_id":"operator-manager.orderly-dev.testnet"}]
'''
'''--- fixtures/main_0.json ---
{
    "last_block_hash": "G2zUHxU5d5mbXXCAgQdKtK3c9epb1mjqg3QYhzYSN7pZ",
    "body": {
    "approvals_after_next": [
        null,
        null,
        null,
        "ed25519:bL7gMmiBay1hL6gg3ZJCfEPis8eu7iuiqeVruwXeC3JRNfFTvgoxJYMd9KbF5U8xAx7HNFsZkSNze8u2a62hgsE",
        null,
        "ed25519:4EfjdsJ3strzcv1Khug2kfr9SwrYV2WSxGahL4zBvuCjxz3LVu89XqLcmV6zaQaVwM6xzFqzHC357oS7CV7963my",
        "ed25519:4UpUYN5gmzWDt88pjnALQ1jdhtPL2AtuK9L3oouicTSuY7qnJyy1J95VTofoyh1pH72C64tSb1H2Zkt4zrT3KaGA",
        "ed25519:5MyDBuY8TNqKT1UNpsCWb7VD3upFCk9KTtdz6XkLkC9KG17vavADg2tukZxLgCJbRya78LAHi2LoYJD7RuBnDRy2",
        "ed25519:DnqkT3AnKagLZ7JBd2g8CWKCGevJLSYSa2rBhDpzqybmVwbZejMMzq7CjpF7gfuz5HJjCTrxDwWzw32okJEx6sq",
        "ed25519:xYtsX55e4YXqHHdPv2Co1xEMeCeDUgTqfe1dn8SEn1Nxq1D636A2GHX43ZFSN1fZvBGaEPN1pEmQDPRwHg8qGRd",
        "ed25519:5wFNxXU1qvuPd15B54QRFTRHh2iGCEK4yDu7NF2BxzeEYYEFAQys4oj4wP5YAsFxFKqEeEziNdG6Gna4peTHPp5L",
        "ed25519:59xtmA5kXWgqL7mS5fdio8uh4GqGDiTAUeBQMbyJV9hzNK9MU8MAQUnXzaPYFyBtpFFKnX5sFnFcSMMaEQ7HPo61",
        "ed25519:3Sr4U2orLJp7yZhNPK3QL8R66jLHtx64fTbHoj4bZW1EgFzK3M8TiuR4dWRY6HPkk9wFh6aZy7tpP6Ca86tyxZ4i",
        "ed25519:4L9CpDpsas7FjvbZndppXMrM6D3vp5yNx53FK66cSMdooXNfUv5px1cHb35gjtSR1zzANuUwJwhWPdNkeo29zxUb",
        "ed25519:4ECoyrHvcrJmjUQDQidebiLgLk3nom99t1ak7DQhAqFGpxeuWCNPUZTJ6qgtiNYxJQNQuMNPqiLoq6SznppxSJ3",
        "ed25519:4A1HSkd19TPDecPyoQyhze3smrwWcPVKWRRicexgH6aGRM2roHkVDMzHBiLvmhPZ8FUhXSuScxsS7aExVwvh8h6J",
        "ed25519:2BrEDT88UC2LfBNUJg8hvvm6KorLiGrWkWbGsXvg1URwVxWtEr9GWtZTPYRJ3e8B5UvHjYm2sp4JZyeYpHCekMbT",
        "ed25519:4vdfMpbfkjUsDhVcTo531RTF1W9D2WzgMGLXmWvhh7SMpXyCcLTDD8xt3NprCfEixTXyEhGzuYXEP38HZ7JrGWQp",
        "ed25519:2vx4xuvjUbY6nCq5SSsJw4DRzM3Diase6ognKfiPDdTpDLKFrV6swbUVboh864DMCxAmHzUJpedpv2ZfTATgeBJG",
        "ed25519:2afVsZPZA4DeDDT6GYrsizaCsrQFyYJGJ2jDFYUsrs6NAwwqUei2T3h3GpJhvpiiM1n7p3oamDPTYmyzL6uRYfr1",
        null,
        "ed25519:GLsqCdMn9B7AxPR6HzCB755bWikFdXkyL27SMPL55v39vU7YrTS26TWCWogBmw9JSSYMefRkRigAEQ1HBHfwGW4",
        "ed25519:4nL886oGHMPSFG5ksMzCXd4hRogxFDCfsJm1LG79ttDt3Qud9MQktrZgg6hyZEPEE9oQ7dqRfQPrmoE56YaX2bQa",
        "ed25519:5vrH1QDUwvaxkN6T52tgZyJj1kbGRbzv8vt98voJnJVvNz9oW59jF33auk4QoTxPeef4QJc4L4WQV8kCCWKvbCye",
        "ed25519:3e45EiobQkb13PZfi8zNiXmPLQ8skTyub7ztJ5343dzFtiznwWDBRfC5tQaehtCC7JDzgVEQGDvzUcHAQabWHdtN",
        null,
        "ed25519:4iqhcxhnACiSr34eKYWxh1Earrs2tNWNqkUSRxq3cnEFJkHURmjc5Km4RkYwy2rA1FPsFegNG2XKAzAxXkSYH3E6",
        "ed25519:46yCnuCihbH2fyxwJZqjykrhRSJ7CFMc7pHwqrWjk7oTxGc88n2nNnGpBTQUye2xUZFEoWBCdJz56ez3yLJfDWnb",
        null,
        "ed25519:2HhnrJoxgsdSfTebAUqZh3rrBi1hUdtBfE1ZdoJhvnzKHE8zBtSybW3BoUtKSzUzsoSPugXFAJHTmHF6opE6J3XN",
        null,
        "ed25519:3MuHGhp3GypLN4HNqdDCZFWCyT6GC4FsqjWqUHvsi6peq41UZGrm6kUuywWxVmP7RRrrNHefBTyZe3ZJQfPPFXea",
        null,
        "ed25519:2gt48uRhycyUt4NYbbWQujGbaPRRD4tXuyZCZ9vCj5ri8m3pMCzAa8BqBppi2VTzw9sWWAgNZy7SX3GaYiVKTHdv",
        "ed25519:2uZWENMz2wyA5pMLzva6FXw7cJP82LmEyWPHJaCdW8a6qYJod4s4H1JXdnC6DFMj5BADJoLJQpSERe6WFuZ1eNUi",
        "ed25519:3D2TUVazt4WucHSMLqKUCCqkVKTVJHnWj7ye9rroTGCTRSLez6n9eB5tNFUJWjYaSt4hzJERsEniPhpyT3kL3gWZ",
        "ed25519:56Z2P4vGYm63BBceQZpnFZY9DQ9ixae9PprH6u75wpBCCHKyyxA2x2T7Zpi14s2tVeCfRpooAH4TLTQ7kVJfETbd",
        null,
        "ed25519:4EVgXVCRRTnuLPwswSzq4Es93LxToiVjHvctuBHzkbnRW5jmDGDywe7qS6HoTHMLm7fvPSb4aYUrSzBKhMKBKmF1",
        "ed25519:2MCWigUYcR7SBdMVwLqFqrtknQCFB1FJCWQ1HXhTjTC47jTgcaCGUdpzAf4q3ZTNCyef4qyTq8PHZr4DrqnFXwrZ",
        "ed25519:2Ek4qD6rMVc6ouYSDhX4qVDbx8aTgew43pNnMrfRGBzyu5RwifkbsFCr5hSEd59rRsqs4LnYnGdCxYVxKoZHybuv",
        "ed25519:4eZTuVeA7iD22kfyZmNKYLE6GhF6EoFD5m9k6RmCwpihssHz9yZM4yoEC3E8bzGEhppNGayvLZW1yASYChszJrd3",
        "ed25519:4vdfMpbfkjUsDhVcTo531RTF1W9D2WzgMGLXmWvhh7SMpXyCcLTDD8xt3NprCfEixTXyEhGzuYXEP38HZ7JrGWQp",
        null,
        "ed25519:5rd5GGP5MShm8H4iRZtqwSR79KWEiu5Zu8xB38rszoTTRhdg78KwoHxuCE9iC9nK3u5YSaxyKAgUUPJQrzo5pMKG",
        "ed25519:29Gs5YdS4PDumcbBXXFAiwcRwRc7KhMTfsSWPfnRb1XfkGALwhRJagshw13k4WPVJkU1EhU3LPdJ2w6NK2dRKtDT",
        "ed25519:3PNcmxJas6K3F5qQf3yfYV7bU4wAd9nHF51K2NbuK4k7cxfk1NG5ENMH2ZLfsJ7KR3ARmXsAh35YYtsL8Fu3a2Pa",
        "ed25519:b3Dggr5QkFBwh2TscTbSKUeczcraWYuzzpi4LFFAebthKiBwYrvvVdQWQU3F5gxcji5RmbaxKefvPrwRJ8f1yzy",
        "ed25519:4pLy5hZkaq7dsJjNLjosXm2J7jh8U2qibiTv2Yf1gw6MaL6y3D3G39GWfZkUt4G9KuvLnVFSVV5QTxFFybmom8Uv",
        "ed25519:56EwwVBoAmma6B7CnipQ6pcRQvRBxZ5RiZqQDKeWZwjfj7jptE4iDuubisbcAjcYNu37BftSWD7GVzr8beNxdvPf",
        null,
        "ed25519:5tTndYygfDhTfLnfeNvqJHvwTsbAdEYvTzKDaaWULuCYZ3cW66RDhtAK3oX45ZoJUJx6fgSVivP3wTvNoErpD4Nk",
        "ed25519:5sMD2KyTcw8YyrCDLvWbqQWMYwoDf9cUuqGhxngXz3HVQ113FojpUcNTQw4CfsMzzMAwUaZpyHMfD3qN5wVsTiqu",
        "ed25519:4yBnanj6wxBVb2w2anA6bSg17FNUVmaBMhKEU5fGvkZzfwTKgYfNLDRsmneu3YDm43cqJ3tx6A3dstEnAPgEie6Y",
        null,
        "ed25519:5VagHekrzDEiB2nwzcZgK68tmUMajbsw7kCwe1hGiCSbYG2TVKgTPL2N46g1EUFU4EDn3BUFUgizSJNxdxtdTyrR",
        "ed25519:2fiGekMxgDRPBrqZrhCJb4qTeqWrmgbd3C7te1nrfxLZqXi7uofsUvpK67GEHPfcyfDWeF6CYqRpfJXrSjMjsrn8",
        null,
        "ed25519:5Gf3dJEvbi53RtNfWPyuQEepfSJTwgdKippQDtWBCduFWavjgLTiaP4Km7akv3VcyYM1cmJ5tFxYHi5gkbNQbc6L",
        "ed25519:5JNPe6z7Abd5z1c6Lh5pJPiuooQiVh2reG3JN4KPGrGnXmHMHgVuQm2kW253LWUTaXfaNthBanKjmYx3Ln4YbJfh",
        null,
        "ed25519:58TWqoySZgCiWrcQYMv8bDbc8jqJjfWFaAQ4bKLZrM5GvdSGGGU9aK19pzDaVPyKXKzev65HDZH24j5Nj816adHe",
        "ed25519:31N3icRmHm6GCAByB1j46qE4BM9p4rPPZtQnmz5oQrrBZT4xNdHxigogXu3BJ12y1PnZgpJctk3Np9esvkjsAZiq",
        null,
        "ed25519:5usML6j1rmL9Tico4Z8DzDHZj82hMVnp1EthTXUJ16SY8JKwR65Xm1ekMbHMnLJY1cgQA8heYG1E2FFYACKhfjUD",
        "ed25519:LFLGPaP93xCfahipLiPBjVQ9yESj15pSGjaT3XEne4xqYu3G7Tqcq3eq85PZXQHAzmA9EbJ54QdB8effnZBUCV9",
        "ed25519:2itgLdVcgF6f1BAJNZkqDesQ3sBtpXbMBnj7c3WSEVhGNYWLsHCZJWnXckwGgFbRDzJsiDQp5kod5tZaPNsFhFib",
        "ed25519:4F2JzAFRuGko9JmpcQ4vg1FtxRGiAfinjCQAtTANirDUpPXFX3LYt8HgGHnNDbXiBafaiBUy8aBE593oNzYReS5z",
        "ed25519:2x8x7cgXhKH5oFTtLC8Fk8mGHXeDoZ7Y2xBdMpKKeoxY1bLW8hnFjya3kcDfEdH5CzuDNvvmYwGGorXouthRVijV",
        "ed25519:e8VdwvhF85HQW4KkwRsYnzkvmC7fBnk8i5FvdCMxPJMCXvD9syeocEZp4NgsRWctZvx3XB4Z4bxGxC4fNcj2sEk",
        "ed25519:4dWrTV2zyD7CwE6G6fyWftSAXkfxd3XLpWrX9fb2SBjEH3Y68EPy3QDx1m8mWvQmCqx8NRmyCR5CTb4UvPreTtuF",
        "ed25519:2JC9WFgUAfTu6iViyoGtEzXtnXxScKWNvWXf8GsahyU2xvxtQhT8isAvnWXwWsrRAGNWuqYK9Xfiuqk7d7fwCxqS",
        "ed25519:5UW9NXEVRWX92xogz739vahnm9vJZPysJRnDnUXmSPXR3iaj5PUw8PAKwGmzhBnrGNrzmhHm9kwW6c3846hYyL5C",
        "ed25519:2iPLmQXADwQVN47gyz5SES373hi7qv5ExMCKJjksgFxzwqQW9xVKwzYCyn78F7uWKfJSyjwHwFyvCSDMKBLt1JEf",
        "ed25519:2M6H1ejSuyCT6i623Qndi5wQQ1tiFyUchYv1h8etfCUbVkKFk6pkt7diqs9pn7K68LcwkGj1iZM9FwF8k2fXRMr4",
        "ed25519:59YT8HaAtRUGCsPkMxiQAcBnK7DFBB5DUY99LyNBDnczF12bbH411b8VNXrCN8BUC336jrnvbfHsur3VVPYXh24o",
        "ed25519:RdJdiQbfgyjfH4ZpKfvrhZaHEJ4FR7jbkDhTQSHXNhyas5x3aCtq4tzXe4MhwyeHrrjeAt1ktoW2GxmaBiWbJua",
        "ed25519:2R8FzXSkZFCUppnKmxEhv7Zc7YmTuyBAykwEprJhe2iLRREjA8fM1Cv3czDFpv3vVccunvEENdyY1dNmNPJQM6hT",
        "ed25519:3ji33mQcP33yyprcGR8bpd5TVqgavZKqh1jwj4sJAnw7TVvsz8pZiGmySh6i8nkKyXJ9Db3L8K3uPFKH7MA5Uwnj",
        "ed25519:wijVdDYPZJq86cZddztJ5bXTccT4GtcZW2hM2WsqVCZHg3kasu1hidPtHs9hFw5NWMNupQ94F2Pq91aQVcTnxnH",
        "ed25519:4VeHJQbmtVc6z93VYVKCUymsoBuwceMcQftvuPXpxNXLYVLMnuXiavD3RA5RJc6N25gdD7yKt6DWpf1yzvN2iQeJ",
        "ed25519:4WjqEs8FZZVouHAuGY7CbLFJz2vBek5a2NccRPRLq8dPMjMCMdsfxaZMKpoFEm9dRRNqJKuKWBA6d293fH2YXGS3",
        "ed25519:412CzP9RStP7TUCRmF2JfJu7STSM7i6u1Kv5ZPwhEZYUogQzoToegC8WXWMM37eSmiW5Yue7Q8a69CYbRhBCMLFW",
        "ed25519:53V4WVpmKU59uq6uT6AVsggNv7XAkC2Ps39Hgzw5QzBhfGYnZczefmPPG3YQZnz56zqEd3uNi6NicjQheApiLtUV",
        "ed25519:bwpZGNtSP2KPB1Km7RPeRuE2BnzX3XXxKFdvZ4PfAmd5FHSxG2pJGnuYETFBt7JkWyZi4Zc7QKLj7mFvPDEeo2x",
        null,
        "ed25519:4mWrGvYAaBtSRcJW2JpuiikxmHqrY4cz4eZCrhw7JrhZbJGh8UYyYLbqyXNcpaTQV15ussd1aM6zKegdBFmNRHMn",
        "ed25519:CZTNa5oTZkB9GqvB37XzAorePVH6JVbkCfKLnW5LpR3SQ8Unri6DQHLRzPEEtBwaL4qy8qnKScT9TJy3H9aqauA",
        "ed25519:K1q8DEDAojSRs1WAmtpBmf8qBkkrpWoiGBACjYnZ9wCjWVXzZrNrbGaPeex4RjwrVNZ238SSB66uN1uz1gQbJJg",
        "ed25519:4BTQ9WGxLtCeApAMKQBmCURGJWSFDUmJPHtdTjQ8vHbaoFU5UutSHCyUayneXaxRGyadSNj5QFyyAk7uFLspzmzQ",
        "ed25519:2rrHGuUQLBEeHhUsMhmcrhmEBGMvPskkW9ytjg2N4uSRibHv1ZxmviBNg5TsHxnL9bMPF155HkVnHmV6kFugrxfS",
        "ed25519:iXmh4WSGRRTW7qfo1Q4GSDBP7xH8B7SDqjduejEd7b7KqN9S5SXrBTm5FTAYM2cpvv3DrmnLMw77oyDR2VkE4zv",
        "ed25519:2nrdmpTSS9KRcErWYx8Cw9ZDLoLpk8Nj5e8k3qj5gjG36VyFmJJMxyAeDxm9rU1yYi5KDjqe3knthZcgDcaiPVHJ",
        "ed25519:3Ga7MTF8FiHWXQ5PZWS2GNzsSx6HHJ69ggLTyNdK8S8cUSibEbKKwHCtsXYmG9DAFCCeyoBnLfBabT5rYkmVZtL9",
        "ed25519:41m4vDKQxNBNL82EgYHquVciwDS7J6Cfxiep85mxmfopsifRwsuEF3XP8zFLqzLkJk4SMT1fdDepdAUyu1GbG2mE",
        "ed25519:tx2UzLgtwBzJuBMELFxinsSeYkU9Ynt5EnRoix1t9BFgBrRqLw7JtEaLkYGBqEPT8tvRNW4PwLjxtuhdaiFQVWt",
        null,
        "ed25519:3g51y4V4XYeaEcEdQ4wjTWNP7US3v6VmXWrpJuLTMem9DFWsrxyuP3c5JhM18fkMqXP5sS2ZVUGn8GYKKkMbTQwe",
        null,
        "ed25519:42Ca6wANYQVbN8qZCeb6Ku5JbsMKZPQZgSM96HqBEqcBvhH4zwh6uxy3tXB7UaayUiuxqgySyyY1hnDNBq7KGd4K"
    ],
    "inner_lite": {
        "block_merkle_root": "BXvUvNf7vrL8gqWVYDywnjDKiyvupUZ7Ads8C2Eoxtbw",
        "epoch_id": "8YiL4eP5SxkA8LujDmdJTaigCQqFDbsa8vNVhds27BSi",
        "height": 86629892,
        "next_bp_hash": "BhazMdDPjGGnvaAHSV4zmYProNDuTtrvLZPG2CGVxKSm",
        "next_epoch_id": "FhmQexFCMWUBxNCWKgEKwvPbSWA4ccGMqJ7S5uTAdYYp",
        "outcome_root": "5ebmr7qgeLz5JRWRzKcP81o46aidCXVLYhGcnpy8rMAa",
        "prev_state_root": "DuRsW1tbqPmHLzFKwrwJ3UqNbKQ4vxDdLtkGSN5J8vGz",
        "timestamp": 1678040624360686820,
        "timestamp_nanosec": "1678040624360686820"
    },
    "inner_rest_hash": "5kXdEdRwaEuEZhrWo9XcmH1tYTGbKrxuwa6oNwEu4HyN",
    "next_block_inner_hash": "8Arhytj9Y8GtPBwuJ6Bj4RNQBxfYcRdEaSxrxj8jyYcW",
    "next_bps": [
        {
            "account_id": "figment.poolv1.near",
            "public_key": "ed25519:7RjyY1bRKDqkshbKZtgpQdwsdxou8j9my8g1hPKZ9ngM",
            "stake": "39190710991814566913431656700311",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "staked.poolv1.near",
            "public_key": "ed25519:3JBVXqenru2ErAM1kHQ8qfd29dCkURLd6JKrFgtmcDTZ",
            "stake": "33408250973490537204944465479076",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "astro-stakers.poolv1.near",
            "public_key": "ed25519:2nPSBCzjqikgwrqUMcuEVReJhmkC91eqJGPGqH9sZc28",
            "stake": "27292427620777590335574401890054",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "bzam6yjpnfnxsdmjf6pw.poolv1.near",
            "public_key": "ed25519:2ZJqaaCAisK4u8E2i611zFfvNmrvevovnU3M7SpGHkLY",
            "stake": "23408846648767629827515981617344",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "zavodil.poolv1.near",
            "public_key": "ed25519:HHARoU1hANWF9hu7YRstDDvgyigBhUeUuqecRVr8dpUz",
            "stake": "17694531319742156298477747349405",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "binancenode1.poolv1.near",
            "public_key": "ed25519:Bb7uPEocbsiQwRfPmsiiiM88DodtuYnBDi6dKZ4JZo2N",
            "stake": "14044502799134191366316169635733",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "yes_protocol1.poolv1.near",
            "public_key": "ed25519:4bnrmHSMYkvsgjbQSaCY3AFwrfS1w17ACEUQdn7aC4iT",
            "stake": "13628524282572516478175206169529",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "staking_yes_protocol1.poolv1.near",
            "public_key": "ed25519:CVVcLtfAWj6k1DqKJwhYBQwjMQFmXzFY2NBdMxp1RqL1",
            "stake": "13543925350166499395009588803588",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "epic.poolv1.near",
            "public_key": "ed25519:68HExKDtw1CjGzopZ8fMAMhMSZRVKRhwLzLQmGKtFNzT",
            "stake": "13355905944819886174627261319450",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "electric.poolv1.near",
            "public_key": "ed25519:GpSr5KAZMZ1Cb4dHMRUVhmp95y2fmWtm4dEjAr8iAva5",
            "stake": "13090083337151179762931096687513",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "aurora.pool.near",
            "public_key": "ed25519:FZKXoWHFCXMrKiXjAKFdHo5g9PDom4bWMRFERBfufi2Y",
            "stake": "12451855580121426439428655745901",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "stake1.poolv1.near",
            "public_key": "ed25519:7EiVt9i7SmULDKEnAXBFSMzwUmZdxUYDFkP73MZuCH1h",
            "stake": "11719358566277162892778709045617",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "sweat_validator.poolv1.near",
            "public_key": "ed25519:677kArWPFPRDgWEBHqHj6BCmEdTVBsAcjQAc75Gtyq2j",
            "stake": "11058115151629868910795902805263",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "dqw9k3e4422cxt92masmy.poolv1.near",
            "public_key": "ed25519:EPNc2bHqRCz6TKLstNiusv9qZCRBL63zViwUAcgoZJZj",
            "stake": "10476068037182648580415457334039",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "future_is_near.poolv1.near",
            "public_key": "ed25519:F3vEGwYYGisaXwKJWrYgorB95DfArDby8bK5wydxD5fp",
            "stake": "10306119952042972677551669535068",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "rekt.poolv1.near",
            "public_key": "ed25519:FoAaUdVKEHtVokG1aVmJNou61YcfQhXmaZ5Hnfsz4fHC",
            "stake": "10076256776824554644431213907710",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "kiln.poolv1.near",
            "public_key": "ed25519:GAekByYrSuo3seuaGQx7V1ZTC3gWZY8JxZJ4aWW76LiT",
            "stake": "7978174735983073566535916648683",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "nearcrowd.poolv1.near",
            "public_key": "ed25519:He7QeRuwizNEhBioYG3u4DZ8jWXyETiyNzFD3MkTjDMf",
            "stake": "7017722540162721639545394208777",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "finoa.poolv1.near",
            "public_key": "ed25519:62gxgzoie7FiK9dnWuiwM1bbuvhpceYDavK7SgdfEMJc",
            "stake": "6860581021715983931281048089998",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "d1.poolv1.near",
            "public_key": "ed25519:7ZhMRwnSHGJtWjGBZiRhhSi6XyqKeNHtnEXsVTNdrsk6",
            "stake": "6520870019275782642288428790407",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "continue.poolv1.near",
            "public_key": "ed25519:9rDZywYL3tnvzj6hnePw3MaPFPfSeSCLxBp1niTGbMaK",
            "stake": "6416645323311236081315091775842",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "anonymous.poolv1.near",
            "public_key": "ed25519:Hoj7LbPwNwAkLFhf8z2aDF1BG6NDSrq1BfkdaKqPfbXx",
            "stake": "6269773503340436338631439615251",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "hashquark.poolv1.near",
            "public_key": "ed25519:3YDdmN1vhF7yAWnYxGMHY46jcLE9h11HvEeF6Kntugeq",
            "stake": "6172802256755427997125380506868",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "foundry.poolv1.near",
            "public_key": "ed25519:5Qx8Fq3SK4Vu1sRRpf2HsNGLAqdNqgkKEebHMniLWhkW",
            "stake": "5924053005000060599940798970475",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "near-fans.poolv1.near",
            "public_key": "ed25519:AgV97ssnHm7qN8JhYZjwyDtuaT6Ms3Fgbw3WeAC8M3iF",
            "stake": "5645152479058435954523703199953",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "08investinwomen_runbybisontrails.poolv1.near",
            "public_key": "ed25519:C6yqxQ3suwjmm8ufG5e3BsHiwxUs9h839FCneF41V7TM",
            "stake": "5614212370655982110837986993255",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "stakin.poolv1.near",
            "public_key": "ed25519:85UGfKdVoxX9u86JsBMxmVHBguYonnM3vTR2WoD5GkEg",
            "stake": "5578666082994820956107908224491",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "neardevgov.poolv1.near",
            "public_key": "ed25519:FsZH8qQGfHRxFUbrK5pCEDgN758ZmqUtcUtYRWWGCcAG",
            "stake": "5553148737242490722951525939545",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "hb436_pool.poolv1.near",
            "public_key": "ed25519:7oU4C3vWqkeup7aMfjyV1ojt7yKX7ShLfvNCahBRy1eW",
            "stake": "5395298158513038062856973381635",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "chorusone.poolv1.near",
            "public_key": "ed25519:AZwJAgu2qRxHwdpj8ioZEFGcc2jbaZGN7ZvUe7CuXtM7",
            "stake": "5285439309411696569909181558011",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "northernlights.poolv1.near",
            "public_key": "ed25519:7HXh6iS9Rh92Uj1c5T9fPjQXPLnti4Rr2cJQcJEYpdGV",
            "stake": "4710930128468453908928044945480",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "nearfans.poolv1.near",
            "public_key": "ed25519:GM8vWM4TqTt7jh3sXYCAs2KPyn4vEmAceteBGEFYhyku",
            "stake": "4708833225232116404714402100501",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "everstake.poolv1.near",
            "public_key": "ed25519:4JLvwa1r2eAxHLyKeDJnpqMG5f2Z9rr49rwuTwb9g8u2",
            "stake": "4616694855252357296538088926011",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "openshards.poolv1.near",
            "public_key": "ed25519:4Xm73PiAGMZu3mZg4gF7j96iTAFHGbPvqzxBaTgKP4ub",
            "stake": "4611167649840233955166259082385",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "dokiacapital.poolv1.near",
            "public_key": "ed25519:FGcJJeWMyx1xDbfkcPM2oMeUeGaADJuPmeqx5rjsHn7t",
            "stake": "4331419324586002008142746578107",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "accomplice.poolv1.near",
            "public_key": "ed25519:5ck255MtkoGQxh9LfjNtdb4M7WHkUmjU7SBJCEkZP2B7",
            "stake": "4264801479482397314816589275103",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "cryptium.poolv1.near",
            "public_key": "ed25519:5Y9hW8cKBb5RnsJBqttHHC5ujz5zcZZ5xnrJPwkCWmGQ",
            "stake": "4226484662703132161492173438959",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "blockdaemon.poolv1.near",
            "public_key": "ed25519:3GNFSJiFQQ1rnR68T4eZRff2omPhg1CTewUHBJpQAdyc",
            "stake": "4171796373260059322004511184350",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "pandora.poolv1.near",
            "public_key": "ed25519:53N7KBhSkEP6tLuQmxZV9fAK16D1C2kWnuzes8KNyS7P",
            "stake": "4144748047205874385312585809901",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "p2p-org.poolv1.near",
            "public_key": "ed25519:J441YAvvYvjWs3aVzjc5KLLWRzmhQTEMaymPyWFkMGeG",
            "stake": "4048805972735866365074530725024",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "bisontrails.poolv1.near",
            "public_key": "ed25519:Emk6wQJtpQZRJCvvPmmwP9GD2Pk37xxRpmb5uRvJpX62",
            "stake": "4039758932870797818086859751282",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "smart-stake.poolv1.near",
            "public_key": "ed25519:A6wpkLQiYqPZ1rbd9s5S1Bg3LxccVsQqiCRDUXwzJ6Hx",
            "stake": "4002376855818437269514939198010",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "nc2.poolv1.near",
            "public_key": "ed25519:He7QeRuwizNEhBioYG3u4DZ8jWXyETiyNzFD3MkTjDMf",
            "stake": "3868042315178264743793121639957",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "ideocolabventures.poolv1.near",
            "public_key": "ed25519:6NFuvrmnJiokXibR9Z7TUHjB4NJnD1rJAHhBu9JWmBdh",
            "stake": "3769880876259486600862493202372",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "stakesabai.poolv1.near",
            "public_key": "ed25519:6abauNvvWnEkagjVpWRy2tZJdzPkmqurUjteMTKk5KQF",
            "stake": "3534205288132304436393952810174",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "buildlinks.poolv1.near",
            "public_key": "ed25519:Hd3irGt4zEqRPAzcFszX3oTkVWRFFxdecDvShCJSS1Wg",
            "stake": "3529810403442016897013455463975",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "sharpdarts.poolv1.near",
            "public_key": "ed25519:9XMHXqv7rM3QQxzjUu7dfKD7GhMkq8CEceaPdkhiBQUX",
            "stake": "3433742001498271995954196247958",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "consensus_finoa_01.poolv1.near",
            "public_key": "ed25519:3LqCGkM3uLjQjPmd3yVyaEnceinEL4cBfUm9vp5hJRTJ",
            "stake": "3209195467786781163602204069751",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "nodeasy.poolv1.near",
            "public_key": "ed25519:8mjespqqUePSYSsxYxPqCUsZUuMxVJr1vjBRwFeCke5K",
            "stake": "3174135990362849736132724520565",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "consensus_finoa_00.poolv1.near",
            "public_key": "ed25519:62c41nzrrZAspLnPBC2A112PXBhJuj1cGkVE3ANwbzat",
            "stake": "3136517004106683214102257846313",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "dsrvlabs.poolv1.near",
            "public_key": "ed25519:9SACdsDDgXA2WZLfJvpkKbu22Exxtc4CMbeHmVnN2P4a",
            "stake": "3067840980003220879024984381988",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "lux.poolv1.near",
            "public_key": "ed25519:HzTGTDfTz63QGvvUdMGozFeaENFGyYAoSrqYJb23qZFN",
            "stake": "3027487585345175379129523503539",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "lunanova.poolv1.near",
            "public_key": "ed25519:qkfP4NsSuHybdLhdvvYQ2Y9xWPsd249thEvrzbJBKNc",
            "stake": "2869429099556045971125051748602",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "brea.poolv1.near",
            "public_key": "ed25519:8dce49J5G28yMGRcSiDnYNFh7GBSma8TmYaw5mGTSH1Z",
            "stake": "2761004888330444471805867233673",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "zkv_staketosupportprivacy.poolv1.near",
            "public_key": "ed25519:2kAo86DW8mDaLDg37rFhQY8UYSZVq1CtegUHBEDvpSMA",
            "stake": "2688895333431110878826531346223",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "baziliknear.poolv1.near",
            "public_key": "ed25519:E4LAWdgLifBEoaWvhRNy5vpdAnUc3GsUHePeiAurZY5v",
            "stake": "2687557371825666364961137270639",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "erm.poolv1.near",
            "public_key": "ed25519:88nnN6LAuCbJaj9wucd1WUMfTtdv2s3njpvozHft8oQ5",
            "stake": "2535013983753259514324350166438",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "fish.poolv1.near",
            "public_key": "ed25519:27KegJd17HeXHk9h5MqkT35QAuvYvo5GFgPTpSVU4kPN",
            "stake": "2358565568379772079753008277863",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "01node.poolv1.near",
            "public_key": "ed25519:5xz7EbcnPqabwoFezdJBxieK8S7XLsdHHuLwM4vLLhFt",
            "stake": "2329882511279941854150540366127",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "stardust.poolv1.near",
            "public_key": "ed25519:6rxCJpTnrT6NFuGg6d5Dj3FEUz1ScNU9u35ywB3dYhrX",
            "stake": "2178423593670797277840547942730",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "republic.poolv1.near",
            "public_key": "ed25519:5sT6xtwxvLARW6y3KURYmyFd5SokJFhiK4jyqbamzzZ6",
            "stake": "2093723071667683065382799603615",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "moonlet.poolv1.near",
            "public_key": "ed25519:GkDwzPckMfhkdYgyFG69Uph8RJ12BcV9xNeZW2q93ZJD",
            "stake": "2059742067906287183285639607245",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "allnodes.poolv1.near",
            "public_key": "ed25519:AGEeyukQdMtg8EttsU39YLgryhao8yQeVwQTut5bbWdL",
            "stake": "2039663408554107535815505379928",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "masternode24.poolv1.near",
            "public_key": "ed25519:5ZyaXsGCya4Sch5bqUfohvo7iRFYB9ancRouggWRsiDU",
            "stake": "2012350269877199111401209610241",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "legends.poolv1.near",
            "public_key": "ed25519:DNK46DeHKeJPF9YetmNxZnqtpkeLjdUb9ezSRCue3TpB",
            "stake": "1968354391483172797457156749349",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "fresh.poolv1.near",
            "public_key": "ed25519:6YHLXhohY8kMnkp5Jw4HrJ52xtdyt1rcP6AaWkKzh3ED",
            "stake": "1908904327836435948235348879178",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "nearkoreahub.poolv1.near",
            "public_key": "ed25519:HUKmMJ59Hht8rcGG6uZ9M4qWsfbTCDtBgyV93YZnPXGE",
            "stake": "1810813061527302171156791616251",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "inotel.poolv1.near",
            "public_key": "ed25519:DmEDRntb9NwfbfdvDf6wzjsw1vxzQcJAAhFL2J75iLwr",
            "stake": "1782567180440611679770497698777",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "appload.poolv1.near",
            "public_key": "ed25519:6LbMVL6otkvZbpuC9sN3z7EXSMo3PT9noPeBdBZTFneM",
            "stake": "1776467120421753189733303571187",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "qbit.poolv1.near",
            "public_key": "ed25519:5DqZLnDu6PMEyhJzc5NhiMsoWeYMWG1bC4AULyafoXMv",
            "stake": "1652234858624479198192536953013",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "jazza.poolv1.near",
            "public_key": "ed25519:EW66Fkv7XcE9FiybuYtVURjHhYeEgwWWpzF685Vi7foY",
            "stake": "1597106594439040802881717033337",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "avado.poolv1.near",
            "public_key": "ed25519:FdLWsf42e3Sc7bdKMtxJMgWRP21ysZDSXFnS2vTwTaaA",
            "stake": "1505307860811011777670015928310",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "satori.poolv1.near",
            "public_key": "ed25519:9r8HYmw8mbys2Ng9BaKeQqZnaQTGCcBUbMatV5NeeWJj",
            "stake": "1505098346201303527187379792581",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "ledgerbyfigment.poolv1.near",
            "public_key": "ed25519:4JJTNeMaSb8W3NELh2rkkrDCqG1VpM3gdJ1hc9HFTBmN",
            "stake": "1348036827700696373289729069530",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "pandateam.poolv1.near",
            "public_key": "ed25519:Cu83NRziNLiT6HLu9kJ8svFoftZQ9wVmjScxjqCybppt",
            "stake": "1318824500630064561531598042784",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "atomic-nodes.poolv1.near",
            "public_key": "ed25519:CpVAHE3JpfDoEPqjBDgYEjgG8JhM5BFKbjUD2N1EuvAL",
            "stake": "1316382706920066498880690350957",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "staking_sp2.poolv1.near",
            "public_key": "ed25519:CS4uHAipvtxGz9irnoCX7SxT6d8zKpDj8Y3Fyf2zVgBp",
            "stake": "1189507404302244170408261674805",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "nonli-near.poolv1.near",
            "public_key": "ed25519:91jusDFxjY32h51tfq2HoKhoPbGs66s88t1v2oZPBSxC",
            "stake": "1185500627114290602114433270068",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "bridgetower_v1.poolv1.near",
            "public_key": "ed25519:AHgnnt8yhNBpoZChBiHXfjaH6X2zMZaDDXmmSWHvDcWL",
            "stake": "1035343021630447652262923377316",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "stakely_io.poolv1.near",
            "public_key": "ed25519:HWp9E3gP91s25ddMS9xUWuzbJUpVGiPoitu5bT6hqMHs",
            "stake": "1020578745651641761742955373717",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "calimero.pool.near",
            "public_key": "ed25519:7A9aFJtr9yWh5eyAUUUSdXMoxzi1qBjshiVCjsDWWa1J",
            "stake": "1015560640639701714440406846534",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "staking_opp_disc.poolv1.near",
            "public_key": "ed25519:8XbCfLQVSwtwaBajvByG87CxPPbaFdryz5qEkde1fSGv",
            "stake": "944960505429065839494973460425",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "galactic.poolv1.near",
            "public_key": "ed25519:GFK83N32DbERtFg8rkpfNBsKtkFpmNQzyKFM9kJvPCMG",
            "stake": "830772144361884120753059037812",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "cryptogarik.poolv1.near",
            "public_key": "ed25519:45zFAC8pLgwn1d5pSBpBHesWbzngfRgd92zaom7K8m8j",
            "stake": "827300917092673623166089488881",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "optimusvalidatornetwork.poolv1.near",
            "public_key": "ed25519:C3CJMKaWdEzkqyNCKwnKud6wDNnzs7Ura63k16zm4LUU",
            "stake": "801459175275830472244147140849",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "pathrocknetwork.poolv1.near",
            "public_key": "ed25519:2iJQLVXubWafG7K1NzGVvjP54UJCgVg3cuPMktw8r7uQ",
            "stake": "795030724280267553521849499320",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "dexagon.poolv1.near",
            "public_key": "ed25519:AQHwptR3Ho348BpFXJDjkxpWMW5ZwN7xWM3XWAWSEEgs",
            "stake": "780659556665056485734421808363",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "staking-power.poolv1.near",
            "public_key": "ed25519:42ikqyV1BYmSnhHJ9EsLLy9kgeAg1mC3qqU1AJGaTEaW",
            "stake": "738646348131606154966766133644",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "infiniteloop.poolv1.near",
            "public_key": "ed25519:9BUwtDegzwKcmJBjLgUDLHc3pePgPKcWJXYGcZb33Nyr",
            "stake": "694176933396187545051035694927",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "prophet.poolv1.near",
            "public_key": "ed25519:BV5b4DpgCUy1TEitE4TVPhpTY7uDNpHc8DBPyH6cYCBq",
            "stake": "671427327152189676364211636472",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "bitcoinsuisse.poolv1.near",
            "public_key": "ed25519:Cy2sboVqjDk6d3d2A2AJZBdFvokjk7sjZpYATLjcQSCj",
            "stake": "664034347137614625972384488742",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "cryptoblossom.poolv1.near",
            "public_key": "ed25519:5opTNJEkCBYuyMgAghY2Sxp4bBtXYQtbEvZ3Wc5Awohb",
            "stake": "657362172289058469322955981754",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "kosmos_and_p2p.poolv1.near",
            "public_key": "ed25519:41GWxdQHe4Y2fuisvz5k5G2NwDFEavRkisoZkB5tfJuC",
            "stake": "636380714876533610646626047337",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "readylayerone_staking.poolv1.near",
            "public_key": "ed25519:6AuBsxxSCYHkuJW9Rhf7HK2qYKErtThZUrN5HFDnQ9eg",
            "stake": "627541760546944899619080167427",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "n0ok.poolv1.near",
            "public_key": "ed25519:EC1p3w9hd4XkYoUiAKc8PSQGVFGiUXTDJvqkurRdAFz5",
            "stake": "602905252424836808188330346684",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "dragonfly.poolv1.near",
            "public_key": "ed25519:6Gj8MRp9KqfdiXa35LJcZnqeBNNEZoYk6ysvpzHaruvq",
            "stake": "572963989338187280768222496610",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "pangdao.poolv1.near",
            "public_key": "ed25519:C35kAQVW6MHoWtUZ599WHXamRXVZnrHMVD1q85FERiem",
            "stake": "535970788776886272819902339645",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "nearua.poolv1.near",
            "public_key": "ed25519:6YRLTm4coawMYrchYs1ex5BLY7xtnPrnvGWgk6NJAQvy",
            "stake": "471251934046200353217429993614",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "steak.poolv1.near",
            "public_key": "ed25519:3tZG4QgzWpTKt2dChqZVUTBvF35pvG7BHyyJULF8VXQc",
            "stake": "456216229134015268686162625641",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "galaxydigital.poolv1.near",
            "public_key": "ed25519:8ZD8CcSzSfVsYo7XyABHJsYcrpBE3EL5MwukoEfrNYMR",
            "stake": "448673047392542990806346549267",
            "validator_stake_struct_version": "V1"
        }
    ],
    "prev_block_hash": "B7dCe8xYAY8b379K626jDq7UiLqHDGSaN99YWZvixVAo"
}
}

'''
'''--- fixtures/main_1.json ---
{
    "last_block_hash": "B35Jn6mLXACRcsf6PATMixqgzqJZd71JaNh1LScJjFuJ",
    "body": {
    "approvals_after_next": [
        "ed25519:5vvbBTHSa1zmqDRPLSSNZXCQQWuEpT3rvhWZTUyCHULHemVnGZU6asN9m9z7ArurmQYZKWKJhRXfWMipBQAHxRjf",
        null,
        "ed25519:2UbQcGiwMCcxQgz8N24jvVgaqa7vhjEPqmZXKhq2nKzrDAqwxHD1LsWyAC8suniLPxxETEXNfHeUBPv1P1sZrHXP",
        null,
        null,
        "ed25519:5PCgLj1aGwNS8cnQt7HSQaYCKKaZqJPF9JUHEB23pTP8CxMA4QLwfwNT6an6R79V8JppC7uXHDd9XioR6axxB1kp",
        "ed25519:5uU5aRPGxV8MT5wAhemPXTdSRG3LBkM9FS45fqG4S8r2yViqvdnvsASsY91JnUjRvJAtDEeDyYLsQX5hvbDm9yRx",
        null,
        "ed25519:66kzMfvfHxx6VoytmCpetzDFbLwZgNS3m1n1fJ22miSALQx4gGzCGwnPPKvk8ZcGszHdtq6SxpPA3KUURa6v2jKr",
        "ed25519:49iFWxgQQZRWfHsCCtdQKAX1WdiApP58eYAirb6dQ3EL7GXFwbHMGac7Taa37kKF93o6yUbiCpD6MVTFU9mSJDmn",
        "ed25519:5aAgbQX5K4gzFE3BHMv7BWHVXmQF4YdUevWwiu7UVxm9iFBVuURxUCw6B69LWgGQp5wrUDq6Y2HbmSnUb98x6kiQ",
        "ed25519:B6boM9ZkxnGF2fikwxMM5vWx95iRu1HCRkidvDLGecL82dcwJeBjPBN7TPAxZ4dm9ZRr96HstHuWf81gDTmJFJJ",
        "ed25519:2CctKH9oQgyg4J4ByBffjqomt3Ybif679bGJLxMVwNb6QPMEirK6okGQFUpzJX37gke3Yd1yye1JkEbQeXAQjLWq",
        "ed25519:5QTvnj3GQWsPyX1P1496qZHDEsttMU7ZugLZD5eugSfd1veek7msq4UhR1qBempumB2V1aWN6PByjCR3cU1aujMa",
        "ed25519:66c1y13r94WXUiDS2rpinsAmhJ4SLBjDAELUQLPSK4yndsc85NXiCVpSA6BWXZpkrWHSPUU3AycgzVU1iqCJDdah",
        "ed25519:2kS7foGSLwEpjtAXQDoZ1zZys5E1FUq2DDGWWnHy29PoswxXXWtartnR1VVJEDJ2TXESqJTDHfg9N4HSKVXFyxXS",
        "ed25519:4AU1T1arxpDZHsmsucsL7nkcKbXfbAE6bnaW1yZ3qk718mkFtv4BZbeqSvahf9DKvkM7keUxiz6xF9JgBJgc3Swd",
        "ed25519:5FxLpNBCanXopaJQiqSE3Lfhh41ncY3FszkeGJZhXsvf8LgNRHKEZto4DK9tcacknqG4jiYhm6zb5YzeXp59xbSx",
        "ed25519:LVXhojNk3VDoLu7hqepo5aSMb5Xa3opYKtpigNkMCnfByQFwKaqJSWDjxfCGYkvZURWXGjUKQRnj8QHaENkdz99",
        null,
        "ed25519:cTkxbEhx6NVyUxP33Fondn7jteThP3otdctupwQpRyhQP9mKyvGTBGfywNmUBWPhiKCpFpFSgJQ3cpCSojjLu4y",
        null,
        null,
        "ed25519:92E4411aBBTmZUnCHvdT6pXhX5Nr9QQUZuaZHnsKpsVxsa4cemTzwUeuM7DGjYPtX1A7gmDwXEXUjAN4hQszffq",
        "ed25519:2dMos6EcHwf9W3jThq8XMXuUY2nX6p36gBC7q4Ao9D3T6GaPrQmzXcJXLqUji1f5DRUXxKjijxmJAVpHSdW2bdTF",
        null,
        "ed25519:8FLGJPBcWHToUET6QcEYsQaSbSiZBNV55FY3Y5GveAq2zUjf67QEDU4hMHdSSsLfbSXEMTJaHiZNPd3MCgEgY3n",
        "ed25519:4kK9bQKWuxY7VJzLPSFebT8XdnYFpkdUoiPtU1bPCYXcqxP5ut7hupfDsuuvsvBqehta7uP6aN9H5PATBNvwgwt9",
        "ed25519:26Sf9L1h5wQpn2FK87fKYNr8mWMo52BUVges3QH61YkKuGxFovnViEXREZyoLTgFqcpfaJMx5LXWRL8PkPqAg1dt",
        "ed25519:2ZyR3x8jwVNVMK1Qzayg6SrGQTJ1p2Kpwqokr2q9RvVJmkYhWL6SCHSkbqqYXf1rafaYLQU2urF95Fi3RL33Bt69",
        "ed25519:2uoToD5tnT3YEpPCUB4iaERKMds7YGTDrpwL8PtjTUP33TMyN5JwR6mu9h4rnoAS1XADwaTZqGboN1n3qewWxfdV",
        "ed25519:5qksAS3kpgFfR2Dm66ihoo3eYhm7gSU1ptGj4K6RV19Ap9NDxEZRisBCEs8HpJYaoeSY1ugg3REatnmVomtDMfuk",
        "ed25519:4R9G69L1PbtJ7cgib9heLcpygSbtBjYQ8RmW2SE7aaTVrFqYSMb4V1EvAwPySMaqqJEYzqpwrrwDq4M8ztdsYqM6",
        null,
        null,
        "ed25519:vephCaMPerLyat7Zb3kVD1R1TxSP7q4NzzNhBw14GoLQikJfi3ufUz2h11Si7hDerZ62oDFMjX9AtQrbaDjqbVA",
        "ed25519:2NFxDyCKW6RqH5uda3qParqC8kpeviqRrC4FVxddV35McyngRWq25eQMvcv4mBi7183NBGXJQ56fhWsQmWaF2MnU",
        null,
        "ed25519:5HpDXgN5BJeTgRDw1Aush14QwhEibAKXh2y8md2e2s29YKnHJMwXhYJQKszSzvmzZ6aejTianiTSWcoaypUzQxC2",
        null,
        null,
        "ed25519:5ao8Rp45dJpEo29Bk6kGjMga4hdHi6Nqg7mEkAKdfrQRmg8EEYuFSaenWi7ZFKSrKZBip7G6diHKbgtQ1421jLBj",
        "ed25519:5FxLpNBCanXopaJQiqSE3Lfhh41ncY3FszkeGJZhXsvf8LgNRHKEZto4DK9tcacknqG4jiYhm6zb5YzeXp59xbSx",
        null,
        "ed25519:5EjdSrHTEXvx3qQVs8wKwN328WNcCfTzsNbAQwFDwtBDZPBQs3PT8n5h3v7bnFGPUB4FrZPNADHftWUp6ywVgdDf",
        null,
        "ed25519:5ssSgo2KycWyzSv5GR3K5d7b3NdgybRwGN5QjtpoHuKagEGWVeQkyVomFpJS4xhS1vrDwfW8UxavS1DA5LQJD6QG",
        "ed25519:2UHKoiFnY79k9ffrEY9YrGnCoAShDPkoVam67jDL9gxKJ5R5xrVydU4U83cmnBxgSTp6SCRCfizERnqt9ydVyCse",
        "ed25519:4R2i1xTUM6MFtp7HuQg6PpDEHruJedJHTvnUFGnfSG5LV7YBSNJagWSo7e3xwSuJZXVeAkKiVmFuZSQcVg1yDKVC",
        null,
        "ed25519:2pX5dv9KCzyyZWnQ9gJithzykCTNd65YnhyCkT4CSPjDfj85M4Sq2tSUUjmdt28ZzUyesRHSzNJG3zPo4bUj9Z8p",
        "ed25519:5ypiUjeSSErEANDBqK8SKjbMqqyaaxReHZ5sk9QLf3kd5o8W5NkXah7HJEPmct4SsUvWYqJGVRgj23fGGc1doHcf",
        "ed25519:3a333GPskNK6xZTM62wB66wSC4DAkxJQ94GwaBFTvxQWwdFps4JdjWncVLjLd5WnEjiiUZwdhHVYyasRJ8prVjzn",
        "ed25519:41hvPSuKCXjzJQ2vjL5JaQGnjKdGRgJA5VSxVjGnJiP2e4gtSPZHkiqRNtFE8z8mEFvBoffJpiudD75hRKo9HUcM",
        "ed25519:3vcsUGZ7kpuFEaLkqNZArqjCbUJBYGUcC8oct7nVyp51TibDczAnE8g8Ab2G7YB7CMxoJC1sQ8a4gfMGHyp4mAQZ",
        "ed25519:Zp1mmNSiPo526PhX1Ynzm2XVz43sGB551HHKdzUNC8xd5i85QfDcq317WR4ZoFUUXGHUKcZVAtE55B7kXwuNfsD",
        "ed25519:4DqiMNbFYeEd8xcD8QUAwFxvvD1NPxvK9gDiXQdJrpTNk5yMpjT2XRP3JfPUfzYj61PhihULrdTnqhfCkg6wobZK",
        "ed25519:E51bvfeExBKoP8WGAmyfvoAGXQReWH77RUrCJyqXFL2hijCCAjrjKKy3rfKAKkFR83MH8GJKUKuSViFDxvMWmUM",
        "ed25519:2VVQNxKU2c8DigkumcvxvXUiqf2Uu7EmuEZBtWT1bvmAzuoXNq894vk42nAQ87uXMCDbsuQUNzRUgTCSbzyLiqVT",
        null,
        null,
        "ed25519:2tWcqb9JY1X8BkTTNV8LZ9H5tUBT555w32giPn4VXeu12DBkdYW2F3cYkjrnRtMwLLRrefFEHATnRFadxk6RkwSq",
        null,
        null,
        null,
        "ed25519:2fkSvTXwW9TPpjfryiUyCp3YwU12NAELnZG1tjw7YGBZj5B6U7ituv9Eg9srU12WsaNk1qsBuVDkD7yBC5PSmguE",
        "ed25519:3dHR4d72MihNCNSQQpQVSHDFtMjuGr2M16SDNw9o9GY7F9LE1T85jLnh1VSGeuJ4am7MJYLhu2c475WhHPsZdv21",
        "ed25519:5igDTC2viABdq6GGdhAD94mY69yAm3RTiadWHg1ettGN8hzCKX47MwQYVbkG8GZAQvomTLnAYcfutHDDViLuiGrF",
        "ed25519:gG6Ev45qkMYaYFQvK3H4Vq1rRfu6GVMTJUz1TRx5Q42btAxohAEEct9PSYyucWa6NnCwanqiWvJqSFoQR8SG72s",
        null,
        null,
        null,
        "ed25519:stmzpENgq9U3L3KWC7cJfb6W7i3Tcb9zqgTB3qbUtgeZSX27Mkfyw17nPjzArxvhCUVpbw9BmyK8tbMCeCR5sw7",
        "ed25519:3aUqk93Vh5BQgkEzbkkyJy11Sk4Twq9kTjWcAyhMpi96VSzaNxgFqcfhfRKTdFJ66iFS8uhEnVu2xReBeJ8JHN2r",
        "ed25519:xTfaU1zEuv59okpx5RxZPZPZT1i5neVjvzy4niF1CQ2stMiWY2k4taUZorcewXcAX4Ad2FPmaVgxZzeemokZjPq",
        "ed25519:2Y8ke4tTJC7TGyirQXpLvML3uY6qeQpuD7s7q1TUKgKe7NqZtwcfiaGitWGtniecji2tW79EVQCxqLmPjNKryJdg",
        null,
        null,
        "ed25519:3Gb8ZPXsxSx6WpjpsyQJdWEuvDucnijhuwUwdSjN7yDXGcQA9pSXoUcqieg9wX9VTxgpfDZWkFUdstryMaExa1PD",
        null,
        "ed25519:2Qi7HYDAHoi1itkCr8RcyzSPbKu5yvkg33bsuonqaSTgJK81poVJB5uUWzAoCAD5oFShDwedzLVJ9kLAwSH8Sjed",
        null,
        null,
        "ed25519:5F6Bib7w3DJY9XoacgdnvPTbDZidytdGUboL5SRWdWm3T31UPQqY14rSesZLUCGxR58W3Y2MTkEmYWdEGyW3f7sn",
        "ed25519:5SjUKnDkUH3YMbQLc2yWG7TcQhfgB22MYNvbp7AV82Qnpcj5cCbx4EektN5WiRJoDmvUVvFYtMBjs9qHaqs2YwX3",
        null,
        "ed25519:4Q3itTGZ9vuqKrNRnkWRD6EJxsQAkrohpHPDXF6NaVaXXZAhVL6KYmUBMtFKENr3GupkEDVLXRMtbsNmYQqCMhi7",
        null,
        "ed25519:2CZxFEz7F6hRz8ainH8zw7vSRoMWEjpfhhmWW75oDG566DJXsAgbEifNzAxqafhCZcbgvx5qQbmEuTv9gxfE9ZeU",
        "ed25519:Y87aepx7Xq6kqN6iextSPVEtf28cY2Eq9p5JSoWAQhijzqSQ5yMku3tobqTyYif7ugHVV4pMJMz5fd6jMnZSqFU",
        "ed25519:57S8Mc7MdUvXtgSAUzuU7dYo1GEKtCTYpjuBwzVxEDax1bFkjgenqTCHe2EikAQNH1UKactXBp7dAyMCTVSmJQfb",
        null,
        null,
        "ed25519:3FYabD19eeLKaKUjCKuZb6e9h6qxinES74bfoR9ri4kPrbKGvvkdAH4XHprYExDaXoxFen6TwAhTcAu1CAmu5FXa",
        "ed25519:2VzCKhGkq36cnkv1YV5JPG7EsfKDuYVXN11sTMoPZPnMWi6Ewe3L3Z7njuGzbtNmna1oyTrneWbEryp8iXZSBo7G",
        "ed25519:JkLbB8B3zwq1TH8BiV1Nh1k5vdXmpwWGX4z6kTsTAEs5QSBkQJbfsnG3esBJLFbB64a6pAnFZJKFVD8En6zw1KN",
        "ed25519:4TTxwBZY77xrfrnMNwGPBapaNJRZePAqqZ4P2ry1XK8jhrrh7VmnzLa1PWJkgQGZBoRBbYAup3xCzXFYiEJonmoh",
        "ed25519:2oNpxPM8bCVQdPEfVDb3Xu6Hj18c4rq4UT2zj5mBsZJ1yqgaba5cnycLctqQ2cfBW6tCwzPBBS8FpffN5o7k26UW",
        null,
        "ed25519:2fpvW53PVnxwrhS9Ep7YTDVFKFta8j2ZRx48ipmGp7CsJpQFfJcsQ2ap5yAkcpP8oZN8okm7LqjbvtZsjSxH8Ctp"
    ],
    "inner_lite": {
        "block_merkle_root": "399L6ovAtXNsNQwdziohUb4u9LJcCCSgUNjG3dFgghfD",
        "epoch_id": "FhmQexFCMWUBxNCWKgEKwvPbSWA4ccGMqJ7S5uTAdYYp",
        "height": 86673092,
        "next_bp_hash": "GjQ77x2L8jPUFa3Gfr5ASMrQ8d9jvQAQtmz4nSjxEibC",
        "next_epoch_id": "5h3PDeeRRQjgyNvzbKepLcBJT3jWJdhu662LzfJGC8ub",
        "outcome_root": "FWTgtobyEuNjujYoC1NPSLsBqHi9iZCVhvFefZrTbw6c",
        "prev_state_root": "E2zn3eDHtVWNjzjSLiitA4RTeL9qdyhDNxbqMVH2thJa",
        "timestamp": 1678091177281053676,
        "timestamp_nanosec": "1678091177281053676"
    },
    "inner_rest_hash": "6u75Ms66Cv89ddsrxZ4aUGCcGAVJLQb8Jb8rmCTXRqQa",
    "next_block_inner_hash": "A21JuSVeiRQ1An1PFe8ep6GESm6au6cb7pFhpr5ushyj",
    "next_bps": [
        {
            "account_id": "figment.poolv1.near",
            "public_key": "ed25519:7RjyY1bRKDqkshbKZtgpQdwsdxou8j9my8g1hPKZ9ngM",
            "stake": "39200024803940528973575298763673",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "staked.poolv1.near",
            "public_key": "ed25519:3JBVXqenru2ErAM1kHQ8qfd29dCkURLd6JKrFgtmcDTZ",
            "stake": "33414643559843438908727751376808",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "astro-stakers.poolv1.near",
            "public_key": "ed25519:2nPSBCzjqikgwrqUMcuEVReJhmkC91eqJGPGqH9sZc28",
            "stake": "27289177741159785764208074544478",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "bzam6yjpnfnxsdmjf6pw.poolv1.near",
            "public_key": "ed25519:2ZJqaaCAisK4u8E2i611zFfvNmrvevovnU3M7SpGHkLY",
            "stake": "23412442385124109111959704393172",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "zavodil.poolv1.near",
            "public_key": "ed25519:HHARoU1hANWF9hu7YRstDDvgyigBhUeUuqecRVr8dpUz",
            "stake": "17701628703836554044472295371974",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "binancenode1.poolv1.near",
            "public_key": "ed25519:Bb7uPEocbsiQwRfPmsiiiM88DodtuYnBDi6dKZ4JZo2N",
            "stake": "14046650896800799888153417967159",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "yes_protocol1.poolv1.near",
            "public_key": "ed25519:4bnrmHSMYkvsgjbQSaCY3AFwrfS1w17ACEUQdn7aC4iT",
            "stake": "13630733099368499155961836993682",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "staking_yes_protocol1.poolv1.near",
            "public_key": "ed25519:CVVcLtfAWj6k1DqKJwhYBQwjMQFmXzFY2NBdMxp1RqL1",
            "stake": "13546020082369482205302516746610",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "epic.poolv1.near",
            "public_key": "ed25519:68HExKDtw1CjGzopZ8fMAMhMSZRVKRhwLzLQmGKtFNzT",
            "stake": "13356811508080265047373565930707",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "electric.poolv1.near",
            "public_key": "ed25519:GpSr5KAZMZ1Cb4dHMRUVhmp95y2fmWtm4dEjAr8iAva5",
            "stake": "13092107877362457337300602755758",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "aurora.pool.near",
            "public_key": "ed25519:FZKXoWHFCXMrKiXjAKFdHo5g9PDom4bWMRFERBfufi2Y",
            "stake": "12454746161849083759170088371707",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "stake1.poolv1.near",
            "public_key": "ed25519:7EiVt9i7SmULDKEnAXBFSMzwUmZdxUYDFkP73MZuCH1h",
            "stake": "11721220115172457702230481342900",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "sweat_validator.poolv1.near",
            "public_key": "ed25519:677kArWPFPRDgWEBHqHj6BCmEdTVBsAcjQAc75Gtyq2j",
            "stake": "11059825454613191242261874716629",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "dqw9k3e4422cxt92masmy.poolv1.near",
            "public_key": "ed25519:EPNc2bHqRCz6TKLstNiusv9qZCRBL63zViwUAcgoZJZj",
            "stake": "10477688288070813046673319721412",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "future_is_near.poolv1.near",
            "public_key": "ed25519:F3vEGwYYGisaXwKJWrYgorB95DfArDby8bK5wydxD5fp",
            "stake": "10307728792286524606564026333797",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "rekt.poolv1.near",
            "public_key": "ed25519:FoAaUdVKEHtVokG1aVmJNou61YcfQhXmaZ5Hnfsz4fHC",
            "stake": "10077828192385636082481443527995",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "kiln.poolv1.near",
            "public_key": "ed25519:GAekByYrSuo3seuaGQx7V1ZTC3gWZY8JxZJ4aWW76LiT",
            "stake": "7979408657536312825229711990303",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "nearcrowd.poolv1.near",
            "public_key": "ed25519:He7QeRuwizNEhBioYG3u4DZ8jWXyETiyNzFD3MkTjDMf",
            "stake": "7001807916229680046917355996942",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "finoa.poolv1.near",
            "public_key": "ed25519:62gxgzoie7FiK9dnWuiwM1bbuvhpceYDavK7SgdfEMJc",
            "stake": "6861483545445845158323202736311",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "d1.poolv1.near",
            "public_key": "ed25519:7ZhMRwnSHGJtWjGBZiRhhSi6XyqKeNHtnEXsVTNdrsk6",
            "stake": "6521878550892243797224911301733",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "continue.poolv1.near",
            "public_key": "ed25519:9rDZywYL3tnvzj6hnePw3MaPFPfSeSCLxBp1niTGbMaK",
            "stake": "6417637733172756237601123535347",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "anonymous.poolv1.near",
            "public_key": "ed25519:Hoj7LbPwNwAkLFhf8z2aDF1BG6NDSrq1BfkdaKqPfbXx",
            "stake": "6270743200468831295679827821812",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "hashquark.poolv1.near",
            "public_key": "ed25519:3YDdmN1vhF7yAWnYxGMHY46jcLE9h11HvEeF6Kntugeq",
            "stake": "6175362221961170067802870448773",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "foundry.poolv1.near",
            "public_key": "ed25519:5Qx8Fq3SK4Vu1sRRpf2HsNGLAqdNqgkKEebHMniLWhkW",
            "stake": "5924963127258497582175162257801",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "near-fans.poolv1.near",
            "public_key": "ed25519:AgV97ssnHm7qN8JhYZjwyDtuaT6Ms3Fgbw3WeAC8M3iF",
            "stake": "5646004315584370223376404152795",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "stakin.poolv1.near",
            "public_key": "ed25519:85UGfKdVoxX9u86JsBMxmVHBguYonnM3vTR2WoD5GkEg",
            "stake": "5580462595623456026059292167551",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "neardevgov.poolv1.near",
            "public_key": "ed25519:FsZH8qQGfHRxFUbrK5pCEDgN758ZmqUtcUtYRWWGCcAG",
            "stake": "5554007598996901557725839152547",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "hb436_pool.poolv1.near",
            "public_key": "ed25519:7oU4C3vWqkeup7aMfjyV1ojt7yKX7ShLfvNCahBRy1eW",
            "stake": "5396132606951155208961863810534",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "chorusone.poolv1.near",
            "public_key": "ed25519:AZwJAgu2qRxHwdpj8ioZEFGcc2jbaZGN7ZvUe7CuXtM7",
            "stake": "5286277124625335767800178621050",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "08investinwomen_runbybisontrails.poolv1.near",
            "public_key": "ed25519:C6yqxQ3suwjmm8ufG5e3BsHiwxUs9h839FCneF41V7TM",
            "stake": "4856906456696842624236561105832",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "northernlights.poolv1.near",
            "public_key": "ed25519:7HXh6iS9Rh92Uj1c5T9fPjQXPLnti4Rr2cJQcJEYpdGV",
            "stake": "4711658731140888056795921024261",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "nearfans.poolv1.near",
            "public_key": "ed25519:GM8vWM4TqTt7jh3sXYCAs2KPyn4vEmAceteBGEFYhyku",
            "stake": "4709586543235098435184377692908",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "everstake.poolv1.near",
            "public_key": "ed25519:4JLvwa1r2eAxHLyKeDJnpqMG5f2Z9rr49rwuTwb9g8u2",
            "stake": "4620838452755712243637086322701",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "openshards.poolv1.near",
            "public_key": "ed25519:4Xm73PiAGMZu3mZg4gF7j96iTAFHGbPvqzxBaTgKP4ub",
            "stake": "4612026706268345658157448762216",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "dokiacapital.poolv1.near",
            "public_key": "ed25519:FGcJJeWMyx1xDbfkcPM2oMeUeGaADJuPmeqx5rjsHn7t",
            "stake": "4332089229899086438044055879713",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "accomplice.poolv1.near",
            "public_key": "ed25519:5ck255MtkoGQxh9LfjNtdb4M7WHkUmjU7SBJCEkZP2B7",
            "stake": "4265461082872426320947762917283",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "cryptium.poolv1.near",
            "public_key": "ed25519:5Y9hW8cKBb5RnsJBqttHHC5ujz5zcZZ5xnrJPwkCWmGQ",
            "stake": "4227138339987086865741482163992",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "blockdaemon.poolv1.near",
            "public_key": "ed25519:3GNFSJiFQQ1rnR68T4eZRff2omPhg1CTewUHBJpQAdyc",
            "stake": "4197040111346024441049273313502",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "pandora.poolv1.near",
            "public_key": "ed25519:53N7KBhSkEP6tLuQmxZV9fAK16D1C2kWnuzes8KNyS7P",
            "stake": "4145389082724253516786085258026",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "p2p-org.poolv1.near",
            "public_key": "ed25519:J441YAvvYvjWs3aVzjc5KLLWRzmhQTEMaymPyWFkMGeG",
            "stake": "4049570025795287309316483760164",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "bisontrails.poolv1.near",
            "public_key": "ed25519:Emk6wQJtpQZRJCvvPmmwP9GD2Pk37xxRpmb5uRvJpX62",
            "stake": "4040388205274151012507477396047",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "smart-stake.poolv1.near",
            "public_key": "ed25519:A6wpkLQiYqPZ1rbd9s5S1Bg3LxccVsQqiCRDUXwzJ6Hx",
            "stake": "4002339188200027820467736507211",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "nc2.poolv1.near",
            "public_key": "ed25519:He7QeRuwizNEhBioYG3u4DZ8jWXyETiyNzFD3MkTjDMf",
            "stake": "3868640554801610310344669357026",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "ideocolabventures.poolv1.near",
            "public_key": "ed25519:6NFuvrmnJiokXibR9Z7TUHjB4NJnD1rJAHhBu9JWmBdh",
            "stake": "3770463934219780046159683971210",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "stakesabai.poolv1.near",
            "public_key": "ed25519:6abauNvvWnEkagjVpWRy2tZJdzPkmqurUjteMTKk5KQF",
            "stake": "3534768787938044729359742916119",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "buildlinks.poolv1.near",
            "public_key": "ed25519:Hd3irGt4zEqRPAzcFszX3oTkVWRFFxdecDvShCJSS1Wg",
            "stake": "3530356331788390510385486168472",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "sharpdarts.poolv1.near",
            "public_key": "ed25519:9XMHXqv7rM3QQxzjUu7dfKD7GhMkq8CEceaPdkhiBQUX",
            "stake": "3434317485760686361100059179313",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "consensus_finoa_01.poolv1.near",
            "public_key": "ed25519:3LqCGkM3uLjQjPmd3yVyaEnceinEL4cBfUm9vp5hJRTJ",
            "stake": "3209691703690030696543241803105",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "nodeasy.poolv1.near",
            "public_key": "ed25519:8mjespqqUePSYSsxYxPqCUsZUuMxVJr1vjBRwFeCke5K",
            "stake": "3174626909165713893173063092069",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "consensus_finoa_00.poolv1.near",
            "public_key": "ed25519:62c41nzrrZAspLnPBC2A112PXBhJuj1cGkVE3ANwbzat",
            "stake": "3137002104474843811820517343673",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "dsrvlabs.poolv1.near",
            "public_key": "ed25519:9SACdsDDgXA2WZLfJvpkKbu22Exxtc4CMbeHmVnN2P4a",
            "stake": "3068315459047657980104319716187",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "lux.poolv1.near",
            "public_key": "ed25519:HzTGTDfTz63QGvvUdMGozFeaENFGyYAoSrqYJb23qZFN",
            "stake": "3027955823188477813646386532493",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "lunanova.poolv1.near",
            "public_key": "ed25519:qkfP4NsSuHybdLhdvvYQ2Y9xWPsd249thEvrzbJBKNc",
            "stake": "2869872891742491734400241773381",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "brea.poolv1.near",
            "public_key": "ed25519:8dce49J5G28yMGRcSiDnYNFh7GBSma8TmYaw5mGTSH1Z",
            "stake": "2761431911198826393841814732924",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "zkv_staketosupportprivacy.poolv1.near",
            "public_key": "ed25519:2kAo86DW8mDaLDg37rFhQY8UYSZVq1CtegUHBEDvpSMA",
            "stake": "2689311203869606702136939202233",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "baziliknear.poolv1.near",
            "public_key": "ed25519:E4LAWdgLifBEoaWvhRNy5vpdAnUc3GsUHePeiAurZY5v",
            "stake": "2687973035363389074817398296544",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "erm.poolv1.near",
            "public_key": "ed25519:88nnN6LAuCbJaj9wucd1WUMfTtdv2s3njpvozHft8oQ5",
            "stake": "2535406054550895904761521329280",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "fish.poolv1.near",
            "public_key": "ed25519:27KegJd17HeXHk9h5MqkT35QAuvYvo5GFgPTpSVU4kPN",
            "stake": "2358983456427096685644220007441",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "01node.poolv1.near",
            "public_key": "ed25519:5xz7EbcnPqabwoFezdJBxieK8S7XLsdHHuLwM4vLLhFt",
            "stake": "2330528318480015418100146241341",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "stardust.poolv1.near",
            "public_key": "ed25519:6rxCJpTnrT6NFuGg6d5Dj3FEUz1ScNU9u35ywB3dYhrX",
            "stake": "2178806653743283300352231318662",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "republic.poolv1.near",
            "public_key": "ed25519:5sT6xtwxvLARW6y3KURYmyFd5SokJFhiK4jyqbamzzZ6",
            "stake": "2124094805802115637220360270947",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "moonlet.poolv1.near",
            "public_key": "ed25519:GkDwzPckMfhkdYgyFG69Uph8RJ12BcV9xNeZW2q93ZJD",
            "stake": "2060181795258705911916941591880",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "allnodes.poolv1.near",
            "public_key": "ed25519:AGEeyukQdMtg8EttsU39YLgryhao8yQeVwQTut5bbWdL",
            "stake": "2040931689116612494847341058797",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "masternode24.poolv1.near",
            "public_key": "ed25519:5ZyaXsGCya4Sch5bqUfohvo7iRFYB9ancRouggWRsiDU",
            "stake": "2012671504435707853353515097044",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "legends.poolv1.near",
            "public_key": "ed25519:DNK46DeHKeJPF9YetmNxZnqtpkeLjdUb9ezSRCue3TpB",
            "stake": "1968658821601200061890227489142",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "fresh.poolv1.near",
            "public_key": "ed25519:6YHLXhohY8kMnkp5Jw4HrJ52xtdyt1rcP6AaWkKzh3ED",
            "stake": "1908150183443980951599274709995",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "nearkoreahub.poolv1.near",
            "public_key": "ed25519:HUKmMJ59Hht8rcGG6uZ9M4qWsfbTCDtBgyV93YZnPXGE",
            "stake": "1811083909817441667987589176124",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "inotel.poolv1.near",
            "public_key": "ed25519:DmEDRntb9NwfbfdvDf6wzjsw1vxzQcJAAhFL2J75iLwr",
            "stake": "1782842876212574346712032922373",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "appload.poolv1.near",
            "public_key": "ed25519:6LbMVL6otkvZbpuC9sN3z7EXSMo3PT9noPeBdBZTFneM",
            "stake": "1776741874688743688703041929555",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "qbit.poolv1.near",
            "public_key": "ed25519:5DqZLnDu6PMEyhJzc5NhiMsoWeYMWG1bC4AULyafoXMv",
            "stake": "1652490395742303074477718443607",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "jazza.poolv1.near",
            "public_key": "ed25519:EW66Fkv7XcE9FiybuYtVURjHhYeEgwWWpzF685Vi7foY",
            "stake": "1597353606604840980424800904819",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "avado.poolv1.near",
            "public_key": "ed25519:FdLWsf42e3Sc7bdKMtxJMgWRP21ysZDSXFnS2vTwTaaA",
            "stake": "1505548373962441112748918924496",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "satori.poolv1.near",
            "public_key": "ed25519:9r8HYmw8mbys2Ng9BaKeQqZnaQTGCcBUbMatV5NeeWJj",
            "stake": "1505331127901775221346314690273",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "ledgerbyfigment.poolv1.near",
            "public_key": "ed25519:4JJTNeMaSb8W3NELh2rkkrDCqG1VpM3gdJ1hc9HFTBmN",
            "stake": "1373165737471624299035501326834",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "pandateam.poolv1.near",
            "public_key": "ed25519:Cu83NRziNLiT6HLu9kJ8svFoftZQ9wVmjScxjqCybppt",
            "stake": "1319401971025635600139081661867",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "atomic-nodes.poolv1.near",
            "public_key": "ed25519:CpVAHE3JpfDoEPqjBDgYEjgG8JhM5BFKbjUD2N1EuvAL",
            "stake": "1317316684561014172009824793051",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "staking_sp2.poolv1.near",
            "public_key": "ed25519:CS4uHAipvtxGz9irnoCX7SxT6d8zKpDj8Y3Fyf2zVgBp",
            "stake": "1189691376038728067024536019279",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "nonli-near.poolv1.near",
            "public_key": "ed25519:91jusDFxjY32h51tfq2HoKhoPbGs66s88t1v2oZPBSxC",
            "stake": "1185683979296407552449484978525",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "bridgetower_v1.poolv1.near",
            "public_key": "ed25519:AHgnnt8yhNBpoZChBiHXfjaH6X2zMZaDDXmmSWHvDcWL",
            "stake": "1035503149976733624713005001867",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "stakely_io.poolv1.near",
            "public_key": "ed25519:HWp9E3gP91s25ddMS9xUWuzbJUpVGiPoitu5bT6hqMHs",
            "stake": "1020760846394154880766144702204",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "calimero.pool.near",
            "public_key": "ed25519:7A9aFJtr9yWh5eyAUUUSdXMoxzi1qBjshiVCjsDWWa1J",
            "stake": "1015717737955579635694985039591",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "staking_opp_disc.poolv1.near",
            "public_key": "ed25519:8XbCfLQVSwtwaBajvByG87CxPPbaFdryz5qEkde1fSGv",
            "stake": "945106655192692021097412621051",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "galactic.poolv1.near",
            "public_key": "ed25519:GFK83N32DbERtFg8rkpfNBsKtkFpmNQzyKFM9kJvPCMG",
            "stake": "830927076112751558154282570281",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "cryptogarik.poolv1.near",
            "public_key": "ed25519:45zFAC8pLgwn1d5pSBpBHesWbzngfRgd92zaom7K8m8j",
            "stake": "827464843548497529799056653246",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "optimusvalidatornetwork.poolv1.near",
            "public_key": "ed25519:C3CJMKaWdEzkqyNCKwnKud6wDNnzs7Ura63k16zm4LUU",
            "stake": "801631856333131504772049698059",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "pathrocknetwork.poolv1.near",
            "public_key": "ed25519:2iJQLVXubWafG7K1NzGVvjP54UJCgVg3cuPMktw8r7uQ",
            "stake": "798159212443744753724285430041",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "dexagon.poolv1.near",
            "public_key": "ed25519:AQHwptR3Ho348BpFXJDjkxpWMW5ZwN7xWM3XWAWSEEgs",
            "stake": "780999276344526677038708859628",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "staking-power.poolv1.near",
            "public_key": "ed25519:42ikqyV1BYmSnhHJ9EsLLy9kgeAg1mC3qqU1AJGaTEaW",
            "stake": "739026038674494288447656762547",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "infiniteloop.poolv1.near",
            "public_key": "ed25519:9BUwtDegzwKcmJBjLgUDLHc3pePgPKcWJXYGcZb33Nyr",
            "stake": "694566296575843240823586703784",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "prophet.poolv1.near",
            "public_key": "ed25519:BV5b4DpgCUy1TEitE4TVPhpTY7uDNpHc8DBPyH6cYCBq",
            "stake": "671531191635695644126409306723",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "bitcoinsuisse.poolv1.near",
            "public_key": "ed25519:Cy2sboVqjDk6d3d2A2AJZBdFvokjk7sjZpYATLjcQSCj",
            "stake": "664137048443648192578141678919",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "cryptoblossom.poolv1.near",
            "public_key": "ed25519:5opTNJEkCBYuyMgAghY2Sxp4bBtXYQtbEvZ3Wc5Awohb",
            "stake": "657573446115350419986675382728",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "kosmos_and_p2p.poolv1.near",
            "public_key": "ed25519:41GWxdQHe4Y2fuisvz5k5G2NwDFEavRkisoZkB5tfJuC",
            "stake": "636479139247840092730681502650",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "readylayerone_staking.poolv1.near",
            "public_key": "ed25519:6AuBsxxSCYHkuJW9Rhf7HK2qYKErtThZUrN5HFDnQ9eg",
            "stake": "627638790039632866604855751925",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "n0ok.poolv1.near",
            "public_key": "ed25519:EC1p3w9hd4XkYoUiAKc8PSQGVFGiUXTDJvqkurRdAFz5",
            "stake": "602998533980555427219630959758",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "dragonfly.poolv1.near",
            "public_key": "ed25519:6Gj8MRp9KqfdiXa35LJcZnqeBNNEZoYk6ysvpzHaruvq",
            "stake": "573052602252188603180363297630",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "pangdao.poolv1.near",
            "public_key": "ed25519:C35kAQVW6MHoWtUZ599WHXamRXVZnrHMVD1q85FERiem",
            "stake": "536053683155146799555394111476",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "nearua.poolv1.near",
            "public_key": "ed25519:6YRLTm4coawMYrchYs1ex5BLY7xtnPrnvGWgk6NJAQvy",
            "stake": "471324819292170126671679058698",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "steak.poolv1.near",
            "public_key": "ed25519:3tZG4QgzWpTKt2dChqZVUTBvF35pvG7BHyyJULF8VXQc",
            "stake": "456216229134015268686162625641",
            "validator_stake_struct_version": "V1"
        },
        {
            "account_id": "galaxydigital.poolv1.near",
            "public_key": "ed25519:8ZD8CcSzSfVsYo7XyABHJsYcrpBE3EL5MwukoEfrNYMR",
            "stake": "448742440117080714012027203095",
            "validator_stake_struct_version": "V1"
        }
    ],
    "prev_block_hash": "64Ho8BgxGx7UuDsjXNbzLVt4kvVkxzt1bThCJb6e9qaq"
}
}

'''
'''--- fixtures/main_2.json ---
{
    "last_block_hash": "Doy7Y7aVMgN8YhdAseGBMHNmYoqzWsXszqJ7MFLNMcQ7",
    "body": {
		"approvals_after_next": [
			"ed25519:2VhGGz8cojutZkdWbZ3bUUc4fqVdM6oo3zBtadCfa2HpUw8revjxpbbs4upmF7JFEWgwgfnX8nnDregKLvEjgc7m",
			null,
			"ed25519:49KmyiPyt5q51xdtDkcQ3ETtyPsUq8ddUWPttNLrnGNKhCwpykaPy8zNhXiFYPQEaZ21SAB5Euo3k7U2kb7mFJcC",
			"ed25519:2xvJ1PY4cbZ7DnVoQhX24Bi47ef6z23FByTjK5sbtZYer2W639KUaKSeEVQAs5Jz4jWbCpBGjDNRRgLNUBh8ZUfi",
			"ed25519:49dng3dQytReroebX6po1S7y7JmewstX5JdbW2yK5tqzfdAbzyizozfYb3jS7FWpqcbVCU8j7hTep3rAX3xeWRDu",
			"ed25519:4Xa1VPFo9WjcFKAFjRmvB4uAGcQVkrVMrgo7vX3MBYr6cDaXCRrKjk4UFzYqGJtD4jvkZrN7CH2LYmKm7QiE9U8s",
			"ed25519:5i9irHTS7p1W1tHmi7ANfWfr4Epcn9VHFeNs3Uvq39CknfCW5xf3HnZXfcKMJXW9DX1qCmMU9eTBaYygZ5BZa8tR",
			null,
			null,
			null,
			null,
			"ed25519:2wnBH5A73zCforWmtYQX2jmjF3DAo8Z3XcxvjFMiGjemYy1KbxLqhCjwfpeN2xB7ZCREEuBE6yriutFvtAvDWZdv",
			"ed25519:2B7PqahnewnRz296wDYxpUCeSobM9w2sLYviGubk2h38sEvUWbgBi5Jxvbck9ADMPNEyiYEbetr95Zfv57tjm4fR",
			"ed25519:5AWEsgjcn4QstDAdVYCJTTnjEyvCZ25Cp4h6canRJhFDFcUShkRSTBR38XoCKo9Amn7C1JWqVxkgk4wpogXSHcjD",
			"ed25519:49efUuXm3BM5XY3HSFSPjtv47w5JuRtg1AGH5ojFtzBTvVsqgEVXpKXi6ZupDxMT26d9g3jyFWqzvis4PTHMD4Jg",
			"ed25519:ePPSYDSAK4R1wmQc9HwbCuZd2FYgqRNknkFwREJSaA32sHHPykNoAJza8T1a8GVzHoTJFaaXNF1H5Apvg8ysqFo",
			null,
			"ed25519:3CqKXCuBtYkvwk5xsRwRCoYFwQeEScCUbJGuZZzn8H1hJkb7eSZAtvouUxVVMaRxyPGZciyFaLhpoX6X6veGbjqa",
			"ed25519:4xfsJpdJApuRveVRsdMpuK7mDdx1MP3uL3U3Cnib5J5sQPbUS33MzegaFLr8LcYeUTLsSCT6ycMi4k7eeC4cx2uy",
			"ed25519:4HnubxkveyE15tMZNcEDLq5DxxLyFT17XpsMD2jsw5BGUb6qCnTZuG5E8KQuvvbLMNcqnA9vrnhWbd2LxqtghaUs",
			null,
			"ed25519:562BGk9m5WwT2CruNiKTYJnquQjFadeURRYA97xZ6e4R6Gu19QAYkcryjCePZyS4kEKm2xjefDqpTaSgf2Kaf2VH",
			null,
			"ed25519:SvdETeddpFKbtHDCrvTnJKnu6SvE2mu1evahcPrf2RmqZK6Cz8dzAMykjvE2fVcxP46M3opovaFZxzc7o7Wt8cP",
			"ed25519:2xPkMJbmdTbiXDhZ3R7QNaVL7Gh9qVaSXbon9LaKUg9aVtJZTxTVHXGDLC9rdU5Xkq35UGmzPyqVjULLUawZuGnV",
			"ed25519:2oDV64kdMt4a2VuRiTeAoVu8Fpdz5RMs2twSFKYi7D6chBGjHxNrYGtLxhxFAScqDVmxDjUoRK1Dnvdytvtgd2n1",
			"ed25519:4gVh6trN6irVVsTQMyQFdE1z2GJcfDuVbwCLz76CRP6UJ1LAB8Lk11TfXeckKy39qrExZjgpUxpfJidXYN7xYGYR",
			"ed25519:PDxVou7E2mrxojsX42mL9zv73stcp8TdDAjb1UDT2F4MN8yd4YR7yYpsrK1NRxL2W7osAHyLnE1peWHdqBvzkLs",
			"ed25519:4Cah1td6h1zgswNwSNosVicXWbQ38WUjEM782Zm556WWSsSYgjGezYy3vsvkABQuCPorBSHxngPgTYohcSzwo5j7",
			null,
			"ed25519:2Pm6xG7LvKD9fMEvtSkvMRizPFPP5qBrh29YqDvkCKmoYMJBZSoQJP7kSECWSdJannn1hJkzg8AUFE87FRvCh8E8",
			"ed25519:2TNsyhbGWnJfN9e8Yaaggfbf3Yu7w7JpGAQnUe7LkzBKfruLF9yDxaAo4yc5CVJiVqX13NnQfPLcVPpaD1wgMFfV",
			"ed25519:41CHKZLBr3pM2eE5wXjgaXrBM7ugTiBBn2JSfar2tHhoAtSKNimfyfws9DemJDs7LB8CBNc85WtqdwGgCsB1nWfP",
			null,
			null,
			"ed25519:3ePYVb2Vnq2x8hm7sgoZWNVC3Hbx8RVXs37AVCpo1eLLLeReRocMDnDUsTss7kBHqMwi5QpZ8ZBUEocYFFX4MYhD",
			"ed25519:h3YGEEUj628izdmDR4eBmqYhtFcMfQM14gpL8cmHzE1eCpLmVWE18xQFcdbGLAoW8RGsVPaYdBHbrkGznNA6rT3",
			"ed25519:52wySwA9PdQNbrcJnw5oeaK86UGjKP1z8QcWPZZmi68indUqyHgo8x355AkH5hw61DoxGfZ2SCTMGSV9u2b5n8FU",
			"ed25519:4ecMCbGYYkBFU8Udth8uozYMnvkQqNde41ZyzBfzABFSoxxv9rK7Tc1BfCeedtUJvmqGUWpwQ9wcWHgKT8BYqNf5",
			"ed25519:23SyCVTm5KWjHHkAs4GFCZTvzZhB3G4QtpJNeSz8JgZdT6A77dabePnUqWpMMENF7rKF1dr8bri9doJR37PZB4bU",
			null,
			"ed25519:4saccLgvU75D4nBJWSPzd71mqtRGHhv2Kx5CtmGSGLxGG1Sd2BmZtrL9rHksQGjRVKxmHswv9RRDdj7JRKqCVJJx",
			"ed25519:3CqKXCuBtYkvwk5xsRwRCoYFwQeEScCUbJGuZZzn8H1hJkb7eSZAtvouUxVVMaRxyPGZciyFaLhpoX6X6veGbjqa",
			null,
			"ed25519:5XmffM6JMYCQQum9764cGxRA7xDGYMUpY3T5Jaiv89f2XHNniA4ZHUN6LkWnnZbdbj97cJYbstvTgCspbWQvVdfH",
			"ed25519:4J5LPAdP7Cbe4foYg3qQdTQyxLDVbZk79BR1xJEY1TQJrtJq9JyJPqHXxYibCqeAPVqXhWXJzMzn7BGjYuff8znN",
			null,
			"ed25519:47Hydvzd8rUcaWF7bkV1Vap7yPvFK7PeMSGMvhjRzNdfqjvEBiJoR4t9ktYVphx9BCQSzDQYdxjysR7yAMykq9rb",
			"ed25519:4894KtUJZ6Fp1eoMWnUo3gPZLnMS8q2CMMGRYjXxTiEfM8oRDjzUKhg4x1QLUwCWoq593UpcyroqhcAUkufLXkgD",
			null,
			"ed25519:5wvk8hNhNzUefu2ig3eyPcx9FHQAqTa9ScornNdGQ7X5VFECzDtXKZh49VDs3SiSAyC8iuB8FgJdxmUq1b39Xoxk",
			null,
			"ed25519:21KSxZzZtDkLLH5RuJ1auP73qkuL4WXyRLtdvq1XSRrH8Yk1AyqhsJ54YbRbbXmetpRuXuHKENwN1hQsNd37vQZd",
			"ed25519:4NcmdYz5VjHKmSRboX8NYsZLRGtGe6bPMcpCcWQdQfTXezDY6EtYL8awXWd6Y3kxaaZkJJ69FuFBazjtTTWADivu",
			"ed25519:34sdiKBSp2jkjTySbM14ivoXseRBxpYus7jAfsBNnaa4KPxhpLXVW32proR1YCt732AErg2KnyC7xkJc3Y6CVJ8V",
			null,
			"ed25519:4aijMmx4KWhS4XmxBfxVCxnJ4s8Yz3iRrFBLYXywb5v13CtKxW9VKSNqwAXJw6jndVaPTo7rz53CsSWNG8CEujgz",
			"ed25519:52MtGXV8G1Tq6jWWZZXxBVGVQQK8Egz2yt4TRMqEe4YPDgo9PmCwoNbpzPTSdBQXi4hwFDHpSP5aU1DdjnFLkrFA",
			null,
			"ed25519:5xBStwognhUYGVzX4dDyVTvJ5HpT5wqFnLcAbNVK9XAJXdivcZqX5MjFBLiwyPHUpPKvx25UEztbtpQVyTqjaorq",
			null,
			"ed25519:2GhyEXY4wR9iqWshGEF1tQ5Fwb6M6ZGUeXUwQjHed5eUQs71YwuYUyACgSH5VoMiJwGhPhitrjwBVqV9eLHbmDzv",
			"ed25519:31wQipuDcL6FwTDd3NCwaqiUDyi7cZUcr7qUF54sU1akdrkQmdHmx1wvoYXf9CU6jrAnF8qrvhridMdgVtZPZvx1",
			"ed25519:4DqZuCJx1pW7zYqqU1rU5K6Qf7TjP5LnVU89PfNkmnwfRcQeHaunkky5JC9qYNZLgpQ1nufb583DsakHD25fDNvJ",
			"ed25519:5EoXqxQa1TcMsjh6DfzQqbkMJe6Gc2VeyJaFCNhaHuMgN9AEa394cpaQrceS8h9mowNDHGJU6KGHSUCbPrPXv3et",
			"ed25519:59hxAGF8dSHwLaepMQKPHxqvFGHszQJfLhLjtjoXKYbidPfEPr1ZAF84X2npHoQ7SHwf7Ev47zEY2RCNUjvY4TuA",
			"ed25519:2rKQJBW1LKRvh3Z134e8oNravs9q84Gr72NdrZTbHu8eepp7SgUoAPexCRgCh4f3ubeG5wE6yMdHRB1WTZ8RrCgd",
			null,
			"ed25519:46TMbMumBmNEP6cLDtS2LshuznVHoFdxzmqYunkqeQm5S761Q6LfgxHkLXx424NFjyebAhmWk6z5bVYHCtyczxJN",
			"ed25519:2gWgD8Kyobc9XXGJ4346BVA4rB6wKMXjZyN6GsQPLNCsZEgR8cTk6gxhwgxHxUPDGkob8bsFmqU5hh8Xbochkb3s",
			null,
			"ed25519:61hGSWPcfZ6YxYW41WG69jhr9c5UrA2XrE2KZEEPHJkDHV4dJBFWvhtt8hXNz4cmPai2uwCy2DZSUgBYSR9sjaYn",
			"ed25519:5MZU8UxnychBdGxzNH5k3fa37zRV7hgiauZRuPNXks5J4EgBS8UQxZU1JUnD4j4JhEQRAUmfJ1J5S6VPfKbQHSbX",
			"ed25519:5EXH5GeSKE5T85XCuTbF5cMQbUPYG3nzXyKYM9eQL87v83v2U2dHaENa5AjgfY6NmXdfJjC7wNQuo2inASWvYFTi",
			null,
			null,
			null,
			"ed25519:5a38NPqoMHpXDqTthFZPFjKnv3cS7pyrrT5ziGNCwGBfaGk1VVyqrtDawmhKMBs8xhUmktXeXP9Wv2PQGdVkxh3",
			"ed25519:5mG8yAgauHMZMyFMrPvQw8qGQ7D2xiksE4vekVPWH4bEbxUuwJtdHr5cQgqY87KfSqqbkgrcxozKGRi3CFVapm9g",
			"ed25519:4BjQpErboUNcF28gzdxdKQWvRDb7SVZjx65knyCSqseHkZBRT25AfAJkdy8Ra6rPx43xK3YPxu38hbZmKG9nxFkn",
			null,
			"ed25519:3Uoo5KSZKfPGACtJLiH3KhFBs9N8iohXy5iUPK4BG3EFGHsPcUKLVboWnPevNRx7hcpmKsyxQbcRdndetDMVTWvi",
			"ed25519:5uTYvfbViRcsmox5UPkfkzHmEQ9Z5uxdeZ6NvmtTwsyidqEYN1evryH1USrpmZR4t2gswDSLitoSywEFftZ6GmGB",
			"ed25519:2B3V7Ms1ZPKcZ5NqJXW9MgRDgHW21gJV1kCu8nKASK451MdVUEdBTd4cyuAqduv5RZQd7F16XytdG7PDXam9BQcA",
			"ed25519:AJZ6918C6QkmnS9CA6ZUAAgqPhCaq7Sqb2ZFPWVE84cRsubN9EAR1zK2dBRxX9ZtQhheyzAHy6RwCN8EDRJUHTM",
			"ed25519:5VvRCFWLATSRSdEE85NQV3wNhRMnvmeXiV4oSHKyGwi8nowdVmnwmAT4kb7ro6Z1A74hYDqsRQjW4PC4Cxarcxq8",
			null,
			"ed25519:4PEddhHi6rrKjULmA5J4Sq5djmZ447CGuDQwUEhe2HNCxmLNWQ9njV7kxihmD4M5oidfvLvmdF7z9aDFfkzZBYfW",
			"ed25519:5HVs2UR3Ba5ELFjHUmMVfww8M21K4K9wodqBHhXntuRk53GBZnLx8V8eqA5KVbSCJeZZktoeTyqMT9Pa5jMaCKHW",
			"ed25519:31RMTcGQ546gn4MXUyytA6ugo1pKXVMa77cVMWtzMLHb6kQF4cPw4gdVE5B69waSaL1GzBtN7Ra7PMDgsMWoN8D6",
			null,
			"ed25519:vCcvHzko2DqtAtgPeodUzQ3ctemmZKwva5N6xroMcdxYW4CYiG4cgjseq4C72kGuoo1fmt8AQV1HSaG6wd7xeLA",
			"ed25519:4Gpvq9SWy6ARfNKHMw6gEC6AmF1EMqXUbdkKW1tGGpw8ySrrPw1ZqFfqAVCyVueteZBgQLp7MSsiBp2v97Z3M4DV",
			"ed25519:3Wn5NkmKk9RA5moGFTr5oW5QvHyF3fCnMVjDXDPi8WhwsgHQ9oEHpGpiFkpKKuJj1hTgeP4Yo76w1Nyv2Ya53XFt",
			"ed25519:5nGyhoz9wwJJwaDMGnBN3fpxaMVNzSeBrTx2F1v6R6nTRS3Fd16vpGCezCr2r8BSzCMZDrTAqqXb62HeyXZGZbpj",
			"ed25519:2WGZQemboLuyCrqoBKAD4GEGkWXCAo5SoN8z5oNzrNHJewesycHwrvoSuw8mmMSPBUQutqnowMtMxsPbgmJnxTpx",
			"ed25519:5EzFyykbaPjWrkPRgE5CWkLSkKrA2PGkfPucSJDB4Tzw5VETAS6TuusEAD9TVH9zpHmWvQ6qcxHMgD5ycUKWXsuu",
			"ed25519:4Qrtz6NqwegmRV3KWMKVXPiPQ2xJGKyVLwTQZ5gRipHUVaU6ovtoCh2Knk5rLr3BthZumWXYzbQiumS3Adq2GZWA",
			null,
			"ed25519:5sMjvdios6LjjCGiU2MMo7fjjkchJuxTwXroKWGD8jkzqFqGjyb1tEiD24sbHtuGdW1DTKLFLGzvLqKrexmf3vU8",
			null
		],
		"inner_lite": {
			"block_merkle_root": "ExTQ1q1HvfPZy7BehiR8JmgwUd9j3DTzHrTPmr6r9scd",
			"epoch_id": "5h3PDeeRRQjgyNvzbKepLcBJT3jWJdhu662LzfJGC8ub",
			"height": 86716292,
			"next_bp_hash": "ALsAx1zoiwiCvcJoSrNuGbtTk3XcUcXdMBGaZAW9C36m",
			"next_epoch_id": "BCC27fXZwLaqs3MmuhvVfiSHtHjSw2y4zQfP6RTCT2QS",
			"outcome_root": "EwkVmmLtfMwR29qGPUDVAEVPJZFPWjqTGBGpYDxLSja3",
			"prev_state_root": "8NnmP9ZsBesVgrLwWbLTNVGp9T8NK2oRcBLAsL7eZsCp",
			"timestamp": 1678142413035318546,
			"timestamp_nanosec": "1678142413035318546"
		},
		"inner_rest_hash": "49Jsd8ULPst4hPqn9gLV42pncN2B73Xgab18S4BRARMt",
		"next_block_inner_hash": "381NRbYEm7wo1miWJhCvyGFC7WuMyhTJkDP62rrPmm79",
		"next_bps": [
			{
				"account_id": "figment.poolv1.near",
				"public_key": "ed25519:7RjyY1bRKDqkshbKZtgpQdwsdxou8j9my8g1hPKZ9ngM",
				"stake": "39206129243863608141066930499972",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "staked.poolv1.near",
				"public_key": "ed25519:3JBVXqenru2ErAM1kHQ8qfd29dCkURLd6JKrFgtmcDTZ",
				"stake": "33419809779120392920269809612199",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "astro-stakers.poolv1.near",
				"public_key": "ed25519:2nPSBCzjqikgwrqUMcuEVReJhmkC91eqJGPGqH9sZc28",
				"stake": "27294688224403596819807905373855",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "bzam6yjpnfnxsdmjf6pw.poolv1.near",
				"public_key": "ed25519:2ZJqaaCAisK4u8E2i611zFfvNmrvevovnU3M7SpGHkLY",
				"stake": "23416062305792484840940844551487",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "zavodil.poolv1.near",
				"public_key": "ed25519:HHARoU1hANWF9hu7YRstDDvgyigBhUeUuqecRVr8dpUz",
				"stake": "17630216582180625016114945099933",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "binancenode1.poolv1.near",
				"public_key": "ed25519:Bb7uPEocbsiQwRfPmsiiiM88DodtuYnBDi6dKZ4JZo2N",
				"stake": "14048896105546755595738737008478",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "yes_protocol1.poolv1.near",
				"public_key": "ed25519:4bnrmHSMYkvsgjbQSaCY3AFwrfS1w17ACEUQdn7aC4iT",
				"stake": "13632840600753345981723601120095",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "staking_yes_protocol1.poolv1.near",
				"public_key": "ed25519:CVVcLtfAWj6k1DqKJwhYBQwjMQFmXzFY2NBdMxp1RqL1",
				"stake": "13548114501459907012425142831555",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "epic.poolv1.near",
				"public_key": "ed25519:68HExKDtw1CjGzopZ8fMAMhMSZRVKRhwLzLQmGKtFNzT",
				"stake": "13361490946637633806027080459531",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "electric.poolv1.near",
				"public_key": "ed25519:GpSr5KAZMZ1Cb4dHMRUVhmp95y2fmWtm4dEjAr8iAva5",
				"stake": "13094194582706200726499022124313",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "aurora.pool.near",
				"public_key": "ed25519:FZKXoWHFCXMrKiXjAKFdHo5g9PDom4bWMRFERBfufi2Y",
				"stake": "12455530195608719577803023115066",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "stake1.poolv1.near",
				"public_key": "ed25519:7EiVt9i7SmULDKEnAXBFSMzwUmZdxUYDFkP73MZuCH1h",
				"stake": "11723004342951596666411372180029",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "sweat_validator.poolv1.near",
				"public_key": "ed25519:677kArWPFPRDgWEBHqHj6BCmEdTVBsAcjQAc75Gtyq2j",
				"stake": "11061535470684271849484334918122",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "dqw9k3e4422cxt92masmy.poolv1.near",
				"public_key": "ed25519:EPNc2bHqRCz6TKLstNiusv9qZCRBL63zViwUAcgoZJZj",
				"stake": "10479308296906700818189011839258",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "future_is_near.poolv1.near",
				"public_key": "ed25519:F3vEGwYYGisaXwKJWrYgorB95DfArDby8bK5wydxD5fp",
				"stake": "10309322520727981661721876402207",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "rekt.poolv1.near",
				"public_key": "ed25519:FoAaUdVKEHtVokG1aVmJNou61YcfQhXmaZ5Hnfsz4fHC",
				"stake": "10079667782041637158777028934416",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "kiln.poolv1.near",
				"public_key": "ed25519:GAekByYrSuo3seuaGQx7V1ZTC3gWZY8JxZJ4aWW76LiT",
				"stake": "7980652394651037069871965079140",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "nearcrowd.poolv1.near",
				"public_key": "ed25519:He7QeRuwizNEhBioYG3u4DZ8jWXyETiyNzFD3MkTjDMf",
				"stake": "7002893129834998728551934925199",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "finoa.poolv1.near",
				"public_key": "ed25519:62gxgzoie7FiK9dnWuiwM1bbuvhpceYDavK7SgdfEMJc",
				"stake": "6862544459467539008922458111228",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "d1.poolv1.near",
				"public_key": "ed25519:7ZhMRwnSHGJtWjGBZiRhhSi6XyqKeNHtnEXsVTNdrsk6",
				"stake": "6522886931909028877795116092724",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "continue.poolv1.near",
				"public_key": "ed25519:9rDZywYL3tnvzj6hnePw3MaPFPfSeSCLxBp1niTGbMaK",
				"stake": "6418629997062742180813621956876",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "anonymous.poolv1.near",
				"public_key": "ed25519:Hoj7LbPwNwAkLFhf8z2aDF1BG6NDSrq1BfkdaKqPfbXx",
				"stake": "6271712752150531999559361269851",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "hashquark.poolv1.near",
				"public_key": "ed25519:3YDdmN1vhF7yAWnYxGMHY46jcLE9h11HvEeF6Kntugeq",
				"stake": "6176316778768669484263610930775",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "foundry.poolv1.near",
				"public_key": "ed25519:5Qx8Fq3SK4Vu1sRRpf2HsNGLAqdNqgkKEebHMniLWhkW",
				"stake": "5925879216899098565250728067432",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "near-fans.poolv1.near",
				"public_key": "ed25519:AgV97ssnHm7qN8JhYZjwyDtuaT6Ms3Fgbw3WeAC8M3iF",
				"stake": "5646665045313893189005647236282",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "stakin.poolv1.near",
				"public_key": "ed25519:85UGfKdVoxX9u86JsBMxmVHBguYonnM3vTR2WoD5GkEg",
				"stake": "5583623315375786166458286896325",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "neardevgov.poolv1.near",
				"public_key": "ed25519:FsZH8qQGfHRxFUbrK5pCEDgN758ZmqUtcUtYRWWGCcAG",
				"stake": "5554866332371942354526927649509",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "hb436_pool.poolv1.near",
				"public_key": "ed25519:7oU4C3vWqkeup7aMfjyV1ojt7yKX7ShLfvNCahBRy1eW",
				"stake": "5396966930657509205043842792722",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "chorusone.poolv1.near",
				"public_key": "ed25519:AZwJAgu2qRxHwdpj8ioZEFGcc2jbaZGN7ZvUe7CuXtM7",
				"stake": "5287147598217926353386779299664",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "08investinwomen_runbybisontrails.poolv1.near",
				"public_key": "ed25519:C6yqxQ3suwjmm8ufG5e3BsHiwxUs9h839FCneF41V7TM",
				"stake": "4857774634147130373813689246471",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "p2p-org.poolv1.near",
				"public_key": "ed25519:J441YAvvYvjWs3aVzjc5KLLWRzmhQTEMaymPyWFkMGeG",
				"stake": "4723790666044236105496108137009",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "northernlights.poolv1.near",
				"public_key": "ed25519:7HXh6iS9Rh92Uj1c5T9fPjQXPLnti4Rr2cJQcJEYpdGV",
				"stake": "4712387224906733281947973541174",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "nearfans.poolv1.near",
				"public_key": "ed25519:GM8vWM4TqTt7jh3sXYCAs2KPyn4vEmAceteBGEFYhyku",
				"stake": "4710423887240747307183606599570",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "everstake.poolv1.near",
				"public_key": "ed25519:4JLvwa1r2eAxHLyKeDJnpqMG5f2Z9rr49rwuTwb9g8u2",
				"stake": "4623315567330451805820491717070",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "openshards.poolv1.near",
				"public_key": "ed25519:4Xm73PiAGMZu3mZg4gF7j96iTAFHGbPvqzxBaTgKP4ub",
				"stake": "4611959073339809590025288736983",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "dokiacapital.poolv1.near",
				"public_key": "ed25519:FGcJJeWMyx1xDbfkcPM2oMeUeGaADJuPmeqx5rjsHn7t",
				"stake": "4332759036466228308554905977698",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "accomplice.poolv1.near",
				"public_key": "ed25519:5ck255MtkoGQxh9LfjNtdb4M7WHkUmjU7SBJCEkZP2B7",
				"stake": "4266120587684739122299552723543",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "cryptium.poolv1.near",
				"public_key": "ed25519:5Y9hW8cKBb5RnsJBqttHHC5ujz5zcZZ5xnrJPwkCWmGQ",
				"stake": "4227791919561939934282903484058",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "blockdaemon.poolv1.near",
				"public_key": "ed25519:3GNFSJiFQQ1rnR68T4eZRff2omPhg1CTewUHBJpQAdyc",
				"stake": "4197683971126897677552917113311",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "pandora.poolv1.near",
				"public_key": "ed25519:53N7KBhSkEP6tLuQmxZV9fAK16D1C2kWnuzes8KNyS7P",
				"stake": "4146080022605167207664031127947",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "bisontrails.poolv1.near",
				"public_key": "ed25519:Emk6wQJtpQZRJCvvPmmwP9GD2Pk37xxRpmb5uRvJpX62",
				"stake": "4038512909923817748075892748374",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "smart-stake.poolv1.near",
				"public_key": "ed25519:A6wpkLQiYqPZ1rbd9s5S1Bg3LxccVsQqiCRDUXwzJ6Hx",
				"stake": "4003234307493046391337326649739",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "nc2.poolv1.near",
				"public_key": "ed25519:He7QeRuwizNEhBioYG3u4DZ8jWXyETiyNzFD3MkTjDMf",
				"stake": "3869238705002385060975735647681",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "ideocolabventures.poolv1.near",
				"public_key": "ed25519:6NFuvrmnJiokXibR9Z7TUHjB4NJnD1rJAHhBu9JWmBdh",
				"stake": "3771051905041496783453388460098",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "stakesabai.poolv1.near",
				"public_key": "ed25519:6abauNvvWnEkagjVpWRy2tZJdzPkmqurUjteMTKk5KQF",
				"stake": "3535334314397193862153015712370",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "buildlinks.poolv1.near",
				"public_key": "ed25519:Hd3irGt4zEqRPAzcFszX3oTkVWRFFxdecDvShCJSS1Wg",
				"stake": "3526372164342614084796298814676",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "sharpdarts.poolv1.near",
				"public_key": "ed25519:9XMHXqv7rM3QQxzjUu7dfKD7GhMkq8CEceaPdkhiBQUX",
				"stake": "3434848476944224053624702383467",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "consensus_finoa_01.poolv1.near",
				"public_key": "ed25519:3LqCGkM3uLjQjPmd3yVyaEnceinEL4cBfUm9vp5hJRTJ",
				"stake": "3210187970648326218235433796250",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "nodeasy.poolv1.near",
				"public_key": "ed25519:8mjespqqUePSYSsxYxPqCUsZUuMxVJr1vjBRwFeCke5K",
				"stake": "3175117754588187183467391312105",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "consensus_finoa_00.poolv1.near",
				"public_key": "ed25519:62c41nzrrZAspLnPBC2A112PXBhJuj1cGkVE3ANwbzat",
				"stake": "3137487132332056735962851894070",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "dsrvlabs.poolv1.near",
				"public_key": "ed25519:9SACdsDDgXA2WZLfJvpkKbu22Exxtc4CMbeHmVnN2P4a",
				"stake": "3068789867106978388439487819348",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "lux.poolv1.near",
				"public_key": "ed25519:HzTGTDfTz63QGvvUdMGozFeaENFGyYAoSrqYJb23qZFN",
				"stake": "3028423991046584165619348124538",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "lunanova.poolv1.near",
				"public_key": "ed25519:qkfP4NsSuHybdLhdvvYQ2Y9xWPsd249thEvrzbJBKNc",
				"stake": "2870316617608351013129493882339",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "brea.poolv1.near",
				"public_key": "ed25519:8dce49J5G28yMGRcSiDnYNFh7GBSma8TmYaw5mGTSH1Z",
				"stake": "2761858870237463180720625792343",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "zkv_staketosupportprivacy.poolv1.near",
				"public_key": "ed25519:2kAo86DW8mDaLDg37rFhQY8UYSZVq1CtegUHBEDvpSMA",
				"stake": "2689727012142129963731924151456",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "baziliknear.poolv1.near",
				"public_key": "ed25519:E4LAWdgLifBEoaWvhRNy5vpdAnUc3GsUHePeiAurZY5v",
				"stake": "2688388636772692288448305121899",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "erm.poolv1.near",
				"public_key": "ed25519:88nnN6LAuCbJaj9wucd1WUMfTtdv2s3njpvozHft8oQ5",
				"stake": "2535798066743341414045251252289",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "fish.poolv1.near",
				"public_key": "ed25519:27KegJd17HeXHk9h5MqkT35QAuvYvo5GFgPTpSVU4kPN",
				"stake": "2359349916980152012597982756209",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "01node.poolv1.near",
				"public_key": "ed25519:5xz7EbcnPqabwoFezdJBxieK8S7XLsdHHuLwM4vLLhFt",
				"stake": "2330998910140068045131278690848",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "stardust.poolv1.near",
				"public_key": "ed25519:6rxCJpTnrT6NFuGg6d5Dj3FEUz1ScNU9u35ywB3dYhrX",
				"stake": "2179193523704935865995375845863",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "republic.poolv1.near",
				"public_key": "ed25519:5sT6xtwxvLARW6y3KURYmyFd5SokJFhiK4jyqbamzzZ6",
				"stake": "2124651577543740701890267481063",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "moonlet.poolv1.near",
				"public_key": "ed25519:GkDwzPckMfhkdYgyFG69Uph8RJ12BcV9xNeZW2q93ZJD",
				"stake": "2060503312099452529479997679460",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "allnodes.poolv1.near",
				"public_key": "ed25519:AGEeyukQdMtg8EttsU39YLgryhao8yQeVwQTut5bbWdL",
				"stake": "2041189719996971478342261526212",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "masternode24.poolv1.near",
				"public_key": "ed25519:5ZyaXsGCya4Sch5bqUfohvo7iRFYB9ancRouggWRsiDU",
				"stake": "2013012692631849510294424733258",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "legends.poolv1.near",
				"public_key": "ed25519:DNK46DeHKeJPF9YetmNxZnqtpkeLjdUb9ezSRCue3TpB",
				"stake": "1968963206127000985432877551650",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "fresh.poolv1.near",
				"public_key": "ed25519:6YHLXhohY8kMnkp5Jw4HrJ52xtdyt1rcP6AaWkKzh3ED",
				"stake": "1908553262368274972364412463603",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "nearkoreahub.poolv1.near",
				"public_key": "ed25519:HUKmMJ59Hht8rcGG6uZ9M4qWsfbTCDtBgyV93YZnPXGE",
				"stake": "1811363932350908894826349268172",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "inotel.poolv1.near",
				"public_key": "ed25519:DmEDRntb9NwfbfdvDf6wzjsw1vxzQcJAAhFL2J75iLwr",
				"stake": "1783140530783276198612825703651",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "appload.poolv1.near",
				"public_key": "ed25519:6LbMVL6otkvZbpuC9sN3z7EXSMo3PT9noPeBdBZTFneM",
				"stake": "1777016586059857984166086383996",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "qbit.poolv1.near",
				"public_key": "ed25519:5DqZLnDu6PMEyhJzc5NhiMsoWeYMWG1bC4AULyafoXMv",
				"stake": "1652745895856216988922137332983",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "jazza.poolv1.near",
				"public_key": "ed25519:EW66Fkv7XcE9FiybuYtVURjHhYeEgwWWpzF685Vi7foY",
				"stake": "1600810581770426565414413340826",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "avado.poolv1.near",
				"public_key": "ed25519:FdLWsf42e3Sc7bdKMtxJMgWRP21ysZDSXFnS2vTwTaaA",
				"stake": "1505671712920196582626546247266",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "satori.poolv1.near",
				"public_key": "ed25519:9r8HYmw8mbys2Ng9BaKeQqZnaQTGCcBUbMatV5NeeWJj",
				"stake": "1505563874806956005096650532342",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "ledgerbyfigment.poolv1.near",
				"public_key": "ed25519:4JJTNeMaSb8W3NELh2rkkrDCqG1VpM3gdJ1hc9HFTBmN",
				"stake": "1378902973337960064375143109943",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "atomic-nodes.poolv1.near",
				"public_key": "ed25519:CpVAHE3JpfDoEPqjBDgYEjgG8JhM5BFKbjUD2N1EuvAL",
				"stake": "1320330340013835475473012378960",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "pandateam.poolv1.near",
				"public_key": "ed25519:Cu83NRziNLiT6HLu9kJ8svFoftZQ9wVmjScxjqCybppt",
				"stake": "1319203644166316104758512034128",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "staking_sp2.poolv1.near",
				"public_key": "ed25519:CS4uHAipvtxGz9irnoCX7SxT6d8zKpDj8Y3Fyf2zVgBp",
				"stake": "1189875320275820429094732822094",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "nonli-near.poolv1.near",
				"public_key": "ed25519:91jusDFxjY32h51tfq2HoKhoPbGs66s88t1v2oZPBSxC",
				"stake": "1185432705606468385332754514200",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "bridgetower_v1.poolv1.near",
				"public_key": "ed25519:AHgnnt8yhNBpoZChBiHXfjaH6X2zMZaDDXmmSWHvDcWL",
				"stake": "1035663254387646835799962119440",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "stakely_io.poolv1.near",
				"public_key": "ed25519:HWp9E3gP91s25ddMS9xUWuzbJUpVGiPoitu5bT6hqMHs",
				"stake": "1021258364486646824071027357415",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "calimero.pool.near",
				"public_key": "ed25519:7A9aFJtr9yWh5eyAUUUSdXMoxzi1qBjshiVCjsDWWa1J",
				"stake": "1015874783766921089538649131256",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "staking_opp_disc.poolv1.near",
				"public_key": "ed25519:8XbCfLQVSwtwaBajvByG87CxPPbaFdryz5qEkde1fSGv",
				"stake": "945252783112950401552190350991",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "galactic.poolv1.near",
				"public_key": "ed25519:GFK83N32DbERtFg8rkpfNBsKtkFpmNQzyKFM9kJvPCMG",
				"stake": "831246120998540891354298874477",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "cryptogarik.poolv1.near",
				"public_key": "ed25519:45zFAC8pLgwn1d5pSBpBHesWbzngfRgd92zaom7K8m8j",
				"stake": "828004032171300648370990744344",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "optimusvalidatornetwork.poolv1.near",
				"public_key": "ed25519:C3CJMKaWdEzkqyNCKwnKud6wDNnzs7Ura63k16zm4LUU",
				"stake": "801755793868841694119971272782",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "pathrocknetwork.poolv1.near",
				"public_key": "ed25519:2iJQLVXubWafG7K1NzGVvjP54UJCgVg3cuPMktw8r7uQ",
				"stake": "798288406254751164539305822812",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "dexagon.poolv1.near",
				"public_key": "ed25519:AQHwptR3Ho348BpFXJDjkxpWMW5ZwN7xWM3XWAWSEEgs",
				"stake": "781119997524930787753273551265",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "staking-power.poolv1.near",
				"public_key": "ed25519:42ikqyV1BYmSnhHJ9EsLLy9kgeAg1mC3qqU1AJGaTEaW",
				"stake": "739158259862982574010823948092",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "infiniteloop.poolv1.near",
				"public_key": "ed25519:9BUwtDegzwKcmJBjLgUDLHc3pePgPKcWJXYGcZb33Nyr",
				"stake": "694945966749165983829361965202",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "prophet.poolv1.near",
				"public_key": "ed25519:BV5b4DpgCUy1TEitE4TVPhpTY7uDNpHc8DBPyH6cYCBq",
				"stake": "671635020628939237380029587432",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "bitcoinsuisse.poolv1.near",
				"public_key": "ed25519:Cy2sboVqjDk6d3d2A2AJZBdFvokjk7sjZpYATLjcQSCj",
				"stake": "664239734198440103401629427218",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "cryptoblossom.poolv1.near",
				"public_key": "ed25519:5opTNJEkCBYuyMgAghY2Sxp4bBtXYQtbEvZ3Wc5Awohb",
				"stake": "657665183791735436571718632241",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "kosmos_and_p2p.poolv1.near",
				"public_key": "ed25519:41GWxdQHe4Y2fuisvz5k5G2NwDFEavRkisoZkB5tfJuC",
				"stake": "636577548907797834502568994402",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "readylayerone_staking.poolv1.near",
				"public_key": "ed25519:6AuBsxxSCYHkuJW9Rhf7HK2qYKErtThZUrN5HFDnQ9eg",
				"stake": "627738918419591761430004629136",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "n0ok.poolv1.near",
				"public_key": "ed25519:EC1p3w9hd4XkYoUiAKc8PSQGVFGiUXTDJvqkurRdAFz5",
				"stake": "603091766828423031754951292758",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "dragonfly.poolv1.near",
				"public_key": "ed25519:6Gj8MRp9KqfdiXa35LJcZnqeBNNEZoYk6ysvpzHaruvq",
				"stake": "573145205007582852162929757548",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "pangdao.poolv1.near",
				"public_key": "ed25519:C35kAQVW6MHoWtUZ599WHXamRXVZnrHMVD1q85FERiem",
				"stake": "536104952358448307683904244716",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "nearua.poolv1.near",
				"public_key": "ed25519:6YRLTm4coawMYrchYs1ex5BLY7xtnPrnvGWgk6NJAQvy",
				"stake": "471397693642001593493614085881",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "galaxydigital.poolv1.near",
				"public_key": "ed25519:8ZD8CcSzSfVsYo7XyABHJsYcrpBE3EL5MwukoEfrNYMR",
				"stake": "448811822469059379056147844225",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "grassets.poolv1.near",
				"public_key": "ed25519:GS8uhr7mhsBWB5c1JgvsJzpwZDGrcnB9Xnw7YRyMSQP5",
				"stake": "418986205174954907945983151920",
				"validator_stake_struct_version": "V1"
			}
		],
		"prev_block_hash": "HrafGqcmmviAysiDHZypHiqj5W6Edr7QLUK2rkP6dCRA"
	}
	}

'''
'''--- fixtures/new.json ---
{
		"block_header_lite": {
			"inner_lite": {
				"block_merkle_root": "EZAE5EtGtZ9gHvym5ik8udvz36v6QoaTXaa57ThqZZcG",
				"epoch_id": "kfsRFy3JizrUbdbebBbF6qsbmcs6B1c7q1WmR2bAUNu",
				"height": 141429462,
				"next_bp_hash": "13TSrQRaeiG58P6HFNFgucGqUtw1Uzk5YtuRp6qCSvan",
				"next_epoch_id": "363skYdkBLcq7mQqV8D7y9SnKymVUr2uvkUL81Ls2qcU",
				"outcome_root": "GPcsQU6MbfuiF6ytJF366PqoeRVNa6c4xcwxmu77JKrA",
				"prev_state_root": "BjCJq95Q5V8uTV72Wx9xS3wf7VwknL7e8c95q6TwXWH",
				"timestamp": 1697116252972606168,
				"timestamp_nanosec": "1697116252972606168"
			},
			"inner_rest_hash": "DUcqmmQqLGvDaR9xNcNpCmAWbWgLgAeqfsBEZrqhdcri",
			"prev_block_hash": "13Uxh7cLcijnPjA7Y2wxhAHVCetQuibogzrmSB5n8QJc"
		},
		"block_proof": [
			{
				"direction": "Left",
				"hash": "13Uxh7cLcijnPjA7Y2wxhAHVCetQuibogzrmSB5n8QJc"
			},
			{
				"direction": "Left",
				"hash": "8B5D5CfGYTxgLDGkCVDn9hLYDLsiT19unDX5JxZCsiTr"
			},
			{
				"direction": "Left",
				"hash": "TCRtLaDGXdSBysPd4PScjZtrU3d2L3rW4M9ymYY3gWy"
			},
			{
				"direction": "Left",
				"hash": "2R6sC9L5aAbVayxs9sfXCHRuHbuBfyWaZ3JYS5J49W2d"
			},
			{
				"direction": "Left",
				"hash": "QtdhmXvsKEvTX174KCW2meAhSRZ92uWtDE68L5633MB"
			},
			{
				"direction": "Right",
				"hash": "9duwyjTd8bTnDBfNG1QzcpVe4xEdDz345ZKG4jDaaqnA"
			},
			{
				"direction": "Left",
				"hash": "21Nx67mvAPq2CAKkC5oGLNkNfxD5HbjhieXvw4Y2YLTj"
			},
			{
				"direction": "Left",
				"hash": "GUqSFcGbYrDSNs1iSmtdTue729vfPmejfpD5UhC9R6GR"
			},
			{
				"direction": "Right",
				"hash": "5r5uRqdgYX1cC6XunGQn14ehVoQdqYZpFt7Wzez8ecnu"
			},
			{
				"direction": "Left",
				"hash": "9bHgUynfCmXDGmHrC62Xao45giLaubFVumhrdvM4fxvH"
			},
			{
				"direction": "Right",
				"hash": "8enjc461ghBLKwPsGKUvmfnw8w23p594K8KJU8Xd6KML"
			},
			{
				"direction": "Right",
				"hash": "AUZR837iTHpKPhWukNHBC2yxyqgyudW5VtBSGDEYAyT1"
			},
			{
				"direction": "Right",
				"hash": "CU3VpwNsGY7E536b1ZGpaJXBSLjuVNp2yKguXQiMWwis"
			},
			{
				"direction": "Left",
				"hash": "3W6Yj1j2VtJ4CWbem92zc8kkCRPwjVTSdFsZfejPhgiH"
			},
			{
				"direction": "Right",
				"hash": "3PkDGYu1U2Jg6MTTsVtPVJMBEwYHHXxfxbRKxZ4h1THr"
			},
			{
				"direction": "Left",
				"hash": "4MMnD19pGH3Lra8MQASZBu9pd35bPPVyzjgWPRHePmH5"
			},
			{
				"direction": "Right",
				"hash": "Eg537w1JwemL7SYHqfXdJtSLBPBCbfPZt5jj7PZ41RYk"
			},
			{
				"direction": "Left",
				"hash": "HkoV39svoP9UGTHtKK2UBAXrV3Lk2TgHXRB7WCw18knQ"
			},
			{
				"direction": "Right",
				"hash": "8vQXtFKwgJwyGzVdmV9V9QSwFJGAmg9FWhSdaZh7JRo6"
			},
			{
				"direction": "Left",
				"hash": "EWBH9QMZJJyXv4dpadBPih5tU3xGKvkKsFPeKg82xHNv"
			},
			{
				"direction": "Left",
				"hash": "3ZSrvjnjc9pXhq2npc3sZTEhMh6eot8Xgwebk3Q6C6Kb"
			},
			{
				"direction": "Right",
				"hash": "CiUV5kcdjZpqw6iS2nYhiJZd5Prhh2ZHM7AXVoiCzr1R"
			},
			{
				"direction": "Right",
				"hash": "E71mnUNN1jWnyvrfKLsTAAaQ1rJtVwuRLiSjUqR8QKaT"
			},
			{
				"direction": "Left",
				"hash": "7x3QgcmcQu1Di5uYwP29nL4uRzLFv6tDpacZJrYTCDrY"
			},
			{
				"direction": "Left",
				"hash": "83Fsd3sdx5tsJkb6maBE1yViKiqbWCCNfJ4XZRsKnRZD"
			},
			{
				"direction": "Left",
				"hash": "AaT9jQmUvVpgDHdFkLR2XctaUVdTti49enmtbT5hsoyL"
			}
		],
		"outcome_proof": {
			"block_hash": "2qTqYFHTNsbWHppZQ51UbA42ogKpSY8qiLDQcnvrRLmG",
			"id": "j9XRxXGNhwh8GYAdEqs5BAGPaBpPFCgEDb7bUuTauu6",
			"outcome": {
				"executor_id": "cdk.topgunbakugo.testnet",
				"gas_burnt": 3039186723463,
				"logs": [
					"submitting 1 blobs"
				],
				"metadata": {
					"gas_profile": [
						{
							"cost": "BASE",
							"cost_category": "WASM_HOST_COST",
							"gas_used": "4501057887"
						},
						{
							"cost": "CONTRACT_LOADING_BASE",
							"cost_category": "WASM_HOST_COST",
							"gas_used": "35445963"
						},
						{
							"cost": "CONTRACT_LOADING_BYTES",
							"cost_category": "WASM_HOST_COST",
							"gas_used": "23966697750"
						},
						{
							"cost": "LOG_BASE",
							"cost_category": "WASM_HOST_COST",
							"gas_used": "3543313050"
						},
						{
							"cost": "LOG_BYTE",
							"cost_category": "WASM_HOST_COST",
							"gas_used": "237578238"
						},
						{
							"cost": "READ_CACHED_TRIE_NODE",
							"cost_category": "WASM_HOST_COST",
							"gas_used": "2280000000"
						},
						{
							"cost": "READ_MEMORY_BASE",
							"cost_category": "WASM_HOST_COST",
							"gas_used": "15659179200"
						},
						{
							"cost": "READ_MEMORY_BYTE",
							"cost_category": "WASM_HOST_COST",
							"gas_used": "152053320"
						},
						{
							"cost": "READ_REGISTER_BASE",
							"cost_category": "WASM_HOST_COST",
							"gas_used": "10068660744"
						},
						{
							"cost": "READ_REGISTER_BYTE",
							"cost_category": "WASM_HOST_COST",
							"gas_used": "111966432"
						},
						{
							"cost": "STORAGE_READ_BASE",
							"cost_category": "WASM_HOST_COST",
							"gas_used": "112713691500"
						},
						{
							"cost": "STORAGE_READ_KEY_BYTE",
							"cost_category": "WASM_HOST_COST",
							"gas_used": "247620264"
						},
						{
							"cost": "STORAGE_READ_VALUE_BYTE",
							"cost_category": "WASM_HOST_COST",
							"gas_used": "157108140"
						},
						{
							"cost": "STORAGE_WRITE_BASE",
							"cost_category": "WASM_HOST_COST",
							"gas_used": "64196736000"
						},
						{
							"cost": "STORAGE_WRITE_KEY_BYTE",
							"cost_category": "WASM_HOST_COST",
							"gas_used": "352414335"
						},
						{
							"cost": "TOUCHING_TRIE_NODE",
							"cost_category": "WASM_HOST_COST",
							"gas_used": "177121515186"
						},
						{
							"cost": "UTF8_DECODING_BASE",
							"cost_category": "WASM_HOST_COST",
							"gas_used": "3111779061"
						},
						{
							"cost": "UTF8_DECODING_BYTE",
							"cost_category": "WASM_HOST_COST",
							"gas_used": "5248448622"
						},
						{
							"cost": "WASM_INSTRUCTION",
							"cost_category": "WASM_HOST_COST",
							"gas_used": "149320340928"
						},
						{
							"cost": "WRITE_MEMORY_BASE",
							"cost_category": "WASM_HOST_COST",
							"gas_used": "14018974305"
						},
						{
							"cost": "WRITE_MEMORY_BYTE",
							"cost_category": "WASM_HOST_COST",
							"gas_used": "3137785344"
						},
						{
							"cost": "WRITE_REGISTER_BASE",
							"cost_category": "WASM_HOST_COST",
							"gas_used": "14327612430"
						},
						{
							"cost": "WRITE_REGISTER_BYTE",
							"cost_category": "WASM_HOST_COST",
							"gas_used": "4318576704"
						}
					],
					"version": 3
				},
				"receipt_ids": [
					"vTtqwAXNFtPzjvE56DGXx7cscGaMwxnedZJDXFf9Lfw"
				],
				"status": {
					"SuccessValue": "MTQxNDI5NDYx"
				},
				"tokens_burnt": "303918672346300000000"
			},
			"proof": [
				{
					"direction": "Left",
					"hash": "FDurSHTQEHFfTtTx7eroLF8HPCkqoTrNuAPToKM3rxVM"
				}
			]
		},
		"outcome_root_proof": [
			{
				"direction": "Right",
				"hash": "4v4RMRsH6gMk5hBGdkYDvZ3F4svupZUDaddYE7ipLWEB"
			},
			{
				"direction": "Left",
				"hash": "y41CyyzpXZZd1Wv9DVkdaD6TdmxwSixWTUQtdFUhxEu"
			}
		]
}

'''
'''--- fixtures/old.json ---
{
		"block_header_lite": {
			"inner_lite": {
				"block_merkle_root": "CRicirgx88qEgqTTXBrP3e8kj2JLoDkNmjtCCLsfgUAi",
				"epoch_id": "kfsRFy3JizrUbdbebBbF6qsbmcs6B1c7q1WmR2bAUNu",
				"height": 141429413,
				"next_bp_hash": "13TSrQRaeiG58P6HFNFgucGqUtw1Uzk5YtuRp6qCSvan",
				"next_epoch_id": "363skYdkBLcq7mQqV8D7y9SnKymVUr2uvkUL81Ls2qcU",
				"outcome_root": "DvxxqEhshdgePU3gnjrW9iBTEgyb1uiBTLkJsM9FhDzg",
				"prev_state_root": "5GSNfFfmYtgUm16LRBgayaZi89aYQ4rKCMuiCyGWuvSS",
				"timestamp": 1697116223277387356,
				"timestamp_nanosec": "1697116223277387356"
			},
			"inner_rest_hash": "HZNv3ipD8QpUCo7NrowN2TwxdUecWGjuArKY7GSkv1qb",
			"prev_block_hash": "2SBcD81z1MUc5ws7TicyShVFHuvrDZeu1Xo4s7xYxbFM"
		},
		"block_proof": [
			{
				"direction": "Right",
				"hash": "2JY1XGjtX4sMe5tSLaBLdsCum8Y3vm8mncxoHCPpNwDu"
			},
			{
				"direction": "Left",
				"hash": "6CPqptR9SEffA6zw8eJoUjd8nkAGNSu7cSY67YsA57Z5"
			},
			{
				"direction": "Left",
				"hash": "4UTbjzjUZyUfzQVeFWLa2rYfFAxQAGTd9SzZpW8KcHaU"
			},
			{
				"direction": "Left",
				"hash": "3GkRJMa4YCwxjdcmhRT9s4i7t2WY9M5abrarA7KiGUob"
			},
			{
				"direction": "Right",
				"hash": "7Yp6cw7FFfMqoSfBZD7o1eT1bCU69miZu7P8QHD8m4GC"
			},
			{
				"direction": "Left",
				"hash": "71xCGevBBqwHRgaD3LiqtqEV45kjJsxVQn8QVJcfaoPf"
			},
			{
				"direction": "Right",
				"hash": "2r3BxC8YWKWPxSCq3fg4Vzq7b5JehxKVKWhNEdHFoLYK"
			},
			{
				"direction": "Left",
				"hash": "GUqSFcGbYrDSNs1iSmtdTue729vfPmejfpD5UhC9R6GR"
			},
			{
				"direction": "Right",
				"hash": "5r5uRqdgYX1cC6XunGQn14ehVoQdqYZpFt7Wzez8ecnu"
			},
			{
				"direction": "Left",
				"hash": "9bHgUynfCmXDGmHrC62Xao45giLaubFVumhrdvM4fxvH"
			},
			{
				"direction": "Right",
				"hash": "8enjc461ghBLKwPsGKUvmfnw8w23p594K8KJU8Xd6KML"
			},
			{
				"direction": "Right",
				"hash": "AUZR837iTHpKPhWukNHBC2yxyqgyudW5VtBSGDEYAyT1"
			},
			{
				"direction": "Right",
				"hash": "CU3VpwNsGY7E536b1ZGpaJXBSLjuVNp2yKguXQiMWwis"
			},
			{
				"direction": "Left",
				"hash": "3W6Yj1j2VtJ4CWbem92zc8kkCRPwjVTSdFsZfejPhgiH"
			},
			{
				"direction": "Right",
				"hash": "3PkDGYu1U2Jg6MTTsVtPVJMBEwYHHXxfxbRKxZ4h1THr"
			},
			{
				"direction": "Left",
				"hash": "4MMnD19pGH3Lra8MQASZBu9pd35bPPVyzjgWPRHePmH5"
			},
			{
				"direction": "Right",
				"hash": "Eg537w1JwemL7SYHqfXdJtSLBPBCbfPZt5jj7PZ41RYk"
			},
			{
				"direction": "Left",
				"hash": "HkoV39svoP9UGTHtKK2UBAXrV3Lk2TgHXRB7WCw18knQ"
			},
			{
				"direction": "Right",
				"hash": "8vQXtFKwgJwyGzVdmV9V9QSwFJGAmg9FWhSdaZh7JRo6"
			},
			{
				"direction": "Left",
				"hash": "EWBH9QMZJJyXv4dpadBPih5tU3xGKvkKsFPeKg82xHNv"
			},
			{
				"direction": "Left",
				"hash": "3ZSrvjnjc9pXhq2npc3sZTEhMh6eot8Xgwebk3Q6C6Kb"
			},
			{
				"direction": "Right",
				"hash": "CiUV5kcdjZpqw6iS2nYhiJZd5Prhh2ZHM7AXVoiCzr1R"
			},
			{
				"direction": "Right",
				"hash": "E71mnUNN1jWnyvrfKLsTAAaQ1rJtVwuRLiSjUqR8QKaT"
			},
			{
				"direction": "Left",
				"hash": "7x3QgcmcQu1Di5uYwP29nL4uRzLFv6tDpacZJrYTCDrY"
			},
			{
				"direction": "Left",
				"hash": "83Fsd3sdx5tsJkb6maBE1yViKiqbWCCNfJ4XZRsKnRZD"
			},
			{
				"direction": "Left",
				"hash": "AaT9jQmUvVpgDHdFkLR2XctaUVdTti49enmtbT5hsoyL"
			}
		],
		"outcome_proof": {
			"block_hash": "CKymwud3BMkyDTnENanADfk9UiBeyHVWvkJWh5XXphZz",
			"id": "7LAgw7ETir15YXcKdbSuxLUZ1YNUpcDmKHjqxxAhpZ6U",
			"outcome": {
				"executor_id": "cdk.topgunbakugo.testnet",
				"gas_burnt": 12182960979079,
				"logs": [
					"submitting 1 blobs"
				],
				"metadata": {
					"gas_profile": [
						{
							"cost": "BASE",
							"cost_category": "WASM_HOST_COST",
							"gas_used": "4501057887"
						},
						{
							"cost": "CONTRACT_LOADING_BASE",
							"cost_category": "WASM_HOST_COST",
							"gas_used": "35445963"
						},
						{
							"cost": "CONTRACT_LOADING_BYTES",
							"cost_category": "WASM_HOST_COST",
							"gas_used": "23966697750"
						},
						{
							"cost": "LOG_BASE",
							"cost_category": "WASM_HOST_COST",
							"gas_used": "3543313050"
						},
						{
							"cost": "LOG_BYTE",
							"cost_category": "WASM_HOST_COST",
							"gas_used": "237578238"
						},
						{
							"cost": "READ_CACHED_TRIE_NODE",
							"cost_category": "WASM_HOST_COST",
							"gas_used": "2280000000"
						},
						{
							"cost": "READ_MEMORY_BASE",
							"cost_category": "WASM_HOST_COST",
							"gas_used": "15659179200"
						},
						{
							"cost": "READ_MEMORY_BYTE",
							"cost_category": "WASM_HOST_COST",
							"gas_used": "152053320"
						},
						{
							"cost": "READ_REGISTER_BASE",
							"cost_category": "WASM_HOST_COST",
							"gas_used": "10068660744"
						},
						{
							"cost": "READ_REGISTER_BYTE",
							"cost_category": "WASM_HOST_COST",
							"gas_used": "6942313032"
						},
						{
							"cost": "STORAGE_READ_BASE",
							"cost_category": "WASM_HOST_COST",
							"gas_used": "112713691500"
						},
						{
							"cost": "STORAGE_READ_KEY_BYTE",
							"cost_category": "WASM_HOST_COST",
							"gas_used": "247620264"
						},
						{
							"cost": "STORAGE_READ_VALUE_BYTE",
							"cost_category": "WASM_HOST_COST",
							"gas_used": "157108140"
						},
						{
							"cost": "STORAGE_WRITE_BASE",
							"cost_category": "WASM_HOST_COST",
							"gas_used": "64196736000"
						},
						{
							"cost": "STORAGE_WRITE_KEY_BYTE",
							"cost_category": "WASM_HOST_COST",
							"gas_used": "352414335"
						},
						{
							"cost": "TOUCHING_TRIE_NODE",
							"cost_category": "WASM_HOST_COST",
							"gas_used": "177121515186"
						},
						{
							"cost": "UTF8_DECODING_BASE",
							"cost_category": "WASM_HOST_COST",
							"gas_used": "3111779061"
						},
						{
							"cost": "UTF8_DECODING_BYTE",
							"cost_category": "WASM_HOST_COST",
							"gas_used": "5248448622"
						},
						{
							"cost": "WASM_INSTRUCTION",
							"cost_category": "WASM_HOST_COST",
							"gas_used": "8679108238944"
						},
						{
							"cost": "WRITE_MEMORY_BASE",
							"cost_category": "WASM_HOST_COST",
							"gas_used": "14018974305"
						},
						{
							"cost": "WRITE_MEMORY_BYTE",
							"cost_category": "WASM_HOST_COST",
							"gas_used": "191895184944"
						},
						{
							"cost": "WRITE_REGISTER_BASE",
							"cost_category": "WASM_HOST_COST",
							"gas_used": "14327612430"
						},
						{
							"cost": "WRITE_REGISTER_BYTE",
							"cost_category": "WASM_HOST_COST",
							"gas_used": "267766961904"
						}
					],
					"version": 3
				},
				"receipt_ids": [
					"3YCUYAFa4ps5QijQdQUHZt4CDfMPnacUAEvsTvaEKtJj"
				],
				"status": {
					"SuccessValue": "MTQxNDI5NDEy"
				},
				"tokens_burnt": "1218296097907900000000"
			},
			"proof": [
				{
					"direction": "Left",
					"hash": "HuHcBZgtbvujxZC2gA6roFTpnzvVy4QwYS55h7CY64bG"
				},
				{
					"direction": "Right",
					"hash": "CTsXUdmEbAMLcnVLw4XoJVaYYeLZoca1zLeFkSkjJPLf"
				}
			]
		},
		"outcome_root_proof": [
			{
				"direction": "Right",
				"hash": "AAFFM7AYBVmBXkYVwC8dNa82GjDfmQavW7okHpgyf2uX"
			},
			{
				"direction": "Left",
				"hash": "CYv4pGiLJPiUDaQsqEyTgWeg2S2jbLhxtKymFh2xgaXR"
			}
		]
	}

'''
'''--- fixtures/rpc_result.json ---
{
  "jsonrpc": "2.0",
  "result": {
    "approvals_after_next": [
      "ed25519:2SfeH7ap1UnMRdASysXjh2ibrod4wdACNpDVBRpSZRFxBmsVNmhebDoAAADAAZanZTZrBxZ22MfzWLqGiPJcpCiH",
      "ed25519:5pMNYgGqFaYJYLmSF5a6PMADFCU3pQgUq4UFbUV1Vtn9wXbcbchA48yVRaRuSBNc3ZBZYb7JKMTvx5hC2uLWUX2r",
      "ed25519:FZS9bmKUD5MFbHX5T5TnVDgm159ogoh6xQf9ArPcFoq1SQKJ2bBs6E81V6sCizeR3YW2fAByuABUkfyiLusN42x",
      "ed25519:5AD44CcpX8Hu1wwdP9F9Z9fqBJdNX2qaAUd2xCJpz8CaG435SHCmCQc8e8xMfcWisWoPFaYfqsu6z4ko6HNzfEzi",
      null,
      null,
      "ed25519:2x3KP75reTbveZpZZGT2UR3g3uEMSraUS1xUsDwajvB93SbnkuQCkbcenfQsoYy4XwCZZKbehXZRysvLuVo6m99h",
      null,
      null,
      null,
      "ed25519:4tNeB4bE1fzk4BhpWPMPiwhJBGWyVKe7wkT6NNexm1fTTLCp8tR4XDabjk169QeYnt54W34q8ncs7TaWgwnaxMLY",
      null,
      "ed25519:5bwwHVTxfqPUEaFRTE2wXnYbyjSwQCKdxrYtJ9biehyT2iARZD3K8u2447M2xkWxXSxUm4ootMPwaXX9vCH81Vo1",
      null,
      "ed25519:5cN4Ex1A6qTfzBzrfBi44z572LjQG6uaHs55TPVvx14G1JHYuDJZCuxiG3NSxFXRvGR83cJ5PAsPByGoNrZCoo9R",
      "ed25519:3tPSWsuDQHwPdQ5m8ycJJKZ2zkHxdnqt9iEiUFvrowMDEBsJBZ4d2duzecbygoTBwmLPVMeFMkSRduYwPXFD6Ctf",
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null
    ],
    "inner_lite": {
      "block_merkle_root": "3VbK6VKYZTT2yFCCiCmZUR8nR9cwC2dA2djCA2NYeTAj",
      "epoch_id": "5HLgB5pZasXR7mRPHD3ThoLHcBCaxoPKs54HqZZhumCh",
      "height": 134450926,
      "next_bp_hash": "D2Ljt2Px4w62MeEttwkprPhnGHAP1hVU4jQ2Xq1vCXpz",
      "next_epoch_id": "4tBzDozzGED3QiCRURfViVuyJy5ikaN9dVH7m2MYkTyw",
      "outcome_root": "4hjX2ePkBe86dfzHkaxQuJyRdhwdcUNUYSGc9jwHmFhL",
      "prev_state_root": "5L6f1VNWKMmvmeWUfU1rjnRAKzKcM8AG3J2jBAGnN8qW",
      "timestamp": 1691594068711298379,
      "timestamp_nanosec": "1691594068711298379"
    },
    "inner_rest_hash": "5NnTdd9BHtfmx4e9yt92E8aAA5SinJwP7TbAGKz3JoPM",
    "next_block_inner_hash": "66KS7V4g4nSBcoA1PBvBbT73EsmsfSaBTiw7rq2ZABVj",
    "next_bps": [
      {
        "account_id": "node2",
        "public_key": "ed25519:GkDv7nSMS3xcqA45cpMvFmfV1o4fRF6zYo1JRR6mNqg5",
        "stake": "44265717254114135334154959426719",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "node1",
        "public_key": "ed25519:6DSjZ8mvsRZDvFqFxo8tCKePG96omXW7eVYVSySmDk8e",
        "stake": "44261206780685583789386385632327",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "node3",
        "public_key": "ed25519:ydgzeXHJ5Xyt7M1gXLxqLBW1Ejx6scNV5Nx2pxFM8su",
        "stake": "44237649727162594138390820444993",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "node0",
        "public_key": "ed25519:7PGseFbWxvYVgZ89K1uTJKYoKetWs7BJtbyXDzfbAcqX",
        "stake": "44132561457096761080903289002058",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "aurora.pool.f863973.m0",
        "public_key": "ed25519:9c7mczZpNzJz98V1sDeGybfD4gMybP4JKHotH8RrrHTm",
        "stake": "16299239156745705070897151883081",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "legends.pool.f863973.m0",
        "public_key": "ed25519:AhQ6sUifJYgjqarXSAzdDZU9ZixpUesP9JEH1Vr7NbaF",
        "stake": "13807660588812152749831302005786",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "01node.pool.f863973.m0",
        "public_key": "ed25519:3iNqnvBgxJPXCxu6hNdvJso1PEAc1miAD35KQMBCA3aL",
        "stake": "9500076881184124711207857691784",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "kiln.pool.f863973.m0",
        "public_key": "ed25519:Bq8fe1eUgDRexX2CYDMhMMQBiN13j8vTAVFyTNhEfh1W",
        "stake": "6159946434881674980900264928163",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "stakely_v2.pool.f863973.m0",
        "public_key": "ed25519:7BanKZKGvFjK5Yy83gfJ71vPhqRwsDDyVHrV2FMJCUWr",
        "stake": "4770857576163955455586122673917",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "p2p.pool.f863973.m0",
        "public_key": "ed25519:4ie5979JdSR4f7MRAG58eghRxndVoKnAYAKa1PLoMYSS",
        "stake": "4526046906773286158213946123555",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "chorusone.pool.f863973.m0",
        "public_key": "ed25519:3TkUuDpzrq75KtJhkuLfNNJBPHR5QEWpDxrter3znwto",
        "stake": "3259439218063089194193031415328",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "orangeclub.pool.f863973.m0",
        "public_key": "ed25519:HezFeSzcwuR5wvkqccgMCMnpf1eQkVCfk52tXZEdKZHz",
        "stake": "3088332470010666143020951360950",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "everstake.pool.f863973.m0",
        "public_key": "ed25519:4LDN8tZUTRRc4siGmYCPA67tRyxStACDchdGDZYKdFsw",
        "stake": "2976077315995966856524143701659",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "ni.pool.f863973.m0",
        "public_key": "ed25519:GfCfFkLk2twbAWdsS3tr7C2eaiHN3znSfbshS5e8NqBS",
        "stake": "2637395942700001190437115211244",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "foundryusa.pool.f863973.m0",
        "public_key": "ed25519:ABGnMW8c87ZKWxvZLLWgvrNe72HN7UoSf4cTBxCHbEE5",
        "stake": "2519973386005598537224574454394",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "valeraverim.pool.f863973.m0",
        "public_key": "ed25519:3686ABqNUZc1qhLWLHg5xZpBzrWPiUCMNZxcCNmg3e2s",
        "stake": "2470136525946274228076495683740",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "nodeasy.pool.f863973.m0",
        "public_key": "ed25519:25Dhg8NBvQhsVTuugav3t1To1X1zKiomDmnh8yN9hHMb",
        "stake": "2425909014141758725912777512554",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "chorus-one.pool.f863973.m0",
        "public_key": "ed25519:6LFwyEEsqhuDxorWfsKcPPs324zLWTaoqk4o6RDXN7Qc",
        "stake": "2308225057942774439417777882009",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "lunanova2.pool.f863973.m0",
        "public_key": "ed25519:9Jv6e9Kye4wM9EL1XJvXY8CYsLi1HLdRKnTzXBQY44w9",
        "stake": "2215482842857541052781671289872",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "tribe-pool.pool.f863973.m0",
        "public_key": "ed25519:CRS4HTSAeiP8FKD3c3ZrCL5pC92Mu1LQaWj22keThwFY",
        "stake": "1602764416197338042648133041059",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "stakesstone.pool.f863973.m0",
        "public_key": "ed25519:3aAdsKUuzZbjW9hHnmLWFRKwXjmcxsnLNLfNL4gP1wJ8",
        "stake": "1578283084023789173040931515044",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "sweden.pool.f863973.m0",
        "public_key": "ed25519:2RVUnsMEZhGCj1A3vLZBGjj3i9SQ2L46Z1Z41aEgBzXg",
        "stake": "1548532292582097150401841667506",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "alexandruast.pool.f863973.m0",
        "public_key": "ed25519:A3XJ3uVGxSi9o2gnG2r8Ra3fqqodRpL4iuLTc6fNdGUj",
        "stake": "1421029067250363751257379321362",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "dsrvlabs.pool.f863973.m0",
        "public_key": "ed25519:61ei2efmmLkeDR1CG6JDEC2U3oZCUuC2K1X16Vmxrud9",
        "stake": "1420710102520981625168193840101",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "leadnode.pool.f863973.m0",
        "public_key": "ed25519:CdP6CBFETfWYzrEedmpeqkR6rsJNeT22oUFn2mEDGk5i",
        "stake": "1293980548478422306692375498343",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "blockscope.pool.f863973.m0",
        "public_key": "ed25519:6K6xRp88BCQX5pcyrfkXDU371awMAmdXQY4gsxgjKmZz",
        "stake": "1125234336965621139707969627241",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "baziliknear.pool.f863973.m0",
        "public_key": "ed25519:9Rbzfkhkk6RSa1HoPnJXS4q2nn1DwYeB4HMfJBB4WQpU",
        "stake": "998969104092684226229088305030",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "shurik.pool.f863973.m0",
        "public_key": "ed25519:9zEn7DVpvQDxWdj5jSgrqJzqsLo8T9Wv37t83NXBiWi6",
        "stake": "984049857220512933206451404746",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "al3c5.pool.f863973.m0",
        "public_key": "ed25519:BoYixTjyBePQ1VYP3s29rZfjtz1FLQ9og4FWZB5UgWCZ",
        "stake": "977044169014857094441637018902",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "namdokmai.pool.f863973.m0",
        "public_key": "ed25519:9uGeeM7j1fimpG7vn6EMcBXMei8ttWCohiMf44SoTzaz",
        "stake": "911434348813820791928410997483",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "solidstate.pool.f863973.m0",
        "public_key": "ed25519:DTDhqoMXDWhKedWpH7DPvR6dPDcXrk5pTHJw2bkFFvQy",
        "stake": "906322546409990761274993829869",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "chelovek_iz_naroda.pool.f863973.m0",
        "public_key": "ed25519:89aWsXXytjAZxyefXuGN73efnM9ugKTjPEGV4hDco8AZ",
        "stake": "814692708695353939033746073398",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "optimusvalidatornetwork.pool.f863973.m0",
        "public_key": "ed25519:BGoxGmpvN7HdUSREQXfjH6kw5G6ph7NBXVfBVfUSH85V",
        "stake": "814054648550192177321800954172",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "bee1stake.pool.f863973.m0",
        "public_key": "ed25519:B7Mwy3sCCJ6GZzEojsKFXMjLQfVXPDC4Q1LjuHoZcyM6",
        "stake": "781972927575166641002622160625",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "phet90testnet.pool.f863973.m0",
        "public_key": "ed25519:AVaLksnE1S1A3mC6Mr3t9KnD67aA2R2vw68qTZ92MNu2",
        "stake": "762566675498586883884539959108",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "tayang.pool.f863973.m0",
        "public_key": "ed25519:G9XWX55MfWEpT84ckcsJxVTKeZK4WqBGJX3xVpnPB5vv",
        "stake": "737416232733707368527062355060",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "n0ok.pool.f863973.m0",
        "public_key": "ed25519:D6Gq2RpUoDUojmE2vLpqQzuZwYmFPW6rMcXPrwRYhqN8",
        "stake": "705150722680291392608191934987",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "tagard.pool.f863973.m0",
        "public_key": "ed25519:3KyziFgx3PpzorJnMFifXU4KsK4nwPFaxCGWTHaFBADK",
        "stake": "651081542998224074665627416749",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "blockngine.pool.f863973.m0",
        "public_key": "ed25519:CZrTtCP6XkkxWtr3ATnXE8FL6bcG5cHcxfmdRgN7Lm7m",
        "stake": "640846795780054643564480679804",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "bflame.pool.f863973.m0",
        "public_key": "ed25519:4uYM5RXgR9D6VAGKHgQTVNLEmCgMVX7PzpBstT92Me6R",
        "stake": "605058887207243882597063214773",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "latenthero.pool.f863973.m0",
        "public_key": "ed25519:EQqmjRNouRKhwGL7Hnp3vcbDywg2Boj6to2gmnXybhEM",
        "stake": "579501797658738785367101394373",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "genesislab.pool.f863973.m0",
        "public_key": "ed25519:4eU3dssrAWferpEnkVX1tuggdrbFYyU7rS3f34o6Fgys",
        "stake": "578974175406255152467505303715",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "squatch.pool.f863973.m0",
        "public_key": "ed25519:DutaCJbLdrypqNprvwqXs1wxnRvP6R2Lm8nxxGR3X3dX",
        "stake": "553395143843664243069542602168",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "stake2grow.pool.f863973.m0",
        "public_key": "ed25519:9r9ksvMjxgVy85wa1m73tyfWA9FySg4JW8S92x7e7zNP",
        "stake": "535761087510977629390535747129",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "samid1.pool.f863973.m0",
        "public_key": "ed25519:Bv14yv5wDJp7HqP5u2zdvGLwqPjDx52PRapYFR3NWx56",
        "stake": "534149247275478583948653116034",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "stgr.pool.f863973.m0",
        "public_key": "ed25519:84BuxAQ5vKZoWpJKQphuq6EiNVDsJ9Rok65dKQwfLZPt",
        "stake": "528380855743018291020111334612",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "onin.pool.f863973.m0",
        "public_key": "ed25519:9aS9zeo29eqtVaeH7vzHSH69Guteor4KFPJTrSLVzpwS",
        "stake": "527967775059161543533986865379",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "tkserx.pool.f863973.m0",
        "public_key": "ed25519:Ci1FTNL5nVwxkS4st6KjcRsRz511hKwCVJVUUGFTgfXG",
        "stake": "523704153866043267068546627140",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "fibocrypto.pool.f863973.m0",
        "public_key": "ed25519:C8z6SsApAT98LfzUS1J1yTV9i7mV5nksewPMyzBAXZ8",
        "stake": "520921359899731721905187808568",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "anchikovproduction.pool.f863973.m0",
        "public_key": "ed25519:HDadu8UN6KTwenWdZRVmjsVnZhhKyLHLSNBYGCvrWmWg",
        "stake": "497897501456208619473976276870",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "stakenear.pool.f863973.m0",
        "public_key": "ed25519:Bs7MLvUxXqGkvXJynvMgAGTPp9ou5Dr9x5FY9AiPkQxd",
        "stake": "495675301959115191650760718728",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "darvin.pool.f863973.m0",
        "public_key": "ed25519:81gNacMEVhcK5iYkSq7n7YDErqxQWdBjA17hMMUnqy11",
        "stake": "494881636594441160083304270675",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "infstones.pool.f863973.m0",
        "public_key": "ed25519:BLP6HB8tcwYRTxswQ2YRaJ5sGj1dgGpUUfcNwbnWFGCU",
        "stake": "490001898180503202832577824087",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "mrvovk.pool.f863973.m0",
        "public_key": "ed25519:QrEpmP8KoxELaMP3GF35Vjvkmku6KWt6zBWXKgYKZB6",
        "stake": "487515094909290669291223844144",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "stakinv1.pool.f863973.m0",
        "public_key": "ed25519:7c3BBz8ycVgA1GYbJAuCdLrj6KxQuTay3JqqtQi8eHr4",
        "stake": "481249423780360914687500000001",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "moonlet.pool.f863973.m0",
        "public_key": "ed25519:3e1nVCVGNS3yr6CcUvpDAs3BhiWtyM9uTBWkyVR5Xn3K",
        "stake": "480808863737345947881440741760",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "teajs.pool.f863973.m0",
        "public_key": "ed25519:FNvHr7aBf53dv87oVg62Mt3sQzBHzuPfxuWEerc1CdXC",
        "stake": "477933897232636479389934684126",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "psixoz.pool.f863973.m0",
        "public_key": "ed25519:A1bn2V8rV448wkC4qVqeyw65trhJTtgUiw2i3YwNLL8u",
        "stake": "475445221776381166033509715595",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "pontiff.pool.f863973.m0",
        "public_key": "ed25519:4i8j7nwNyy18hfARtrVpckT8MiicdCXuWBX1TubdMb5Y",
        "stake": "468365728965607624448219350209",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "blazenet.pool.f863973.m0",
        "public_key": "ed25519:DiogP36wBXKFpFeqirrxN8G2Mq9vnakgBvgnHdL9CcN3",
        "stake": "446316274170690722221537308246",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "casualpooltest.pool.f863973.m0",
        "public_key": "ed25519:fbSaWuPhsKybnwvaGP2FXJQ2zYyaLdLmZFXEeneUsR1",
        "stake": "440867064245608938227772010668",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "aquarius.pool.f863973.m0",
        "public_key": "ed25519:8NfEarjStDYjJTwKUgQGy7Z7UTGsZaPhTUsExheQN3r1",
        "stake": "440148235855452745652986898246",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "pennyvalidators.pool.f863973.m0",
        "public_key": "ed25519:HiHdwq9rxi9hyxaGkazDHbYu4XL1j3J4TjgHQioyhEva",
        "stake": "405728670600272650055391114589",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "bazilik.pool.f863973.m0",
        "public_key": "ed25519:3pDJwDQ6Y5B9QeW1jz8KunhZH4D4GQG86reTmrRfdD7c",
        "stake": "403250137593053304649960181760",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "mondlicht.pool.devnet",
        "public_key": "ed25519:Cm7qzCFqnwtUSzpuF66wzHwacWujEg5m9qS5i4AvTqHA",
        "stake": "402497617456481760398687002268",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "prophet.pool.f863973.m0",
        "public_key": "ed25519:HYJ9mUhxLhzSVtbjj89smAaZkMqXca68iCumZy3gySoB",
        "stake": "397716493144666656449750562014",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "stingray.pool.f863973.m0",
        "public_key": "ed25519:9sTjViLyTuaBe8LEX341aB8iRd6tGdpKgiv6jEiUxPgQ",
        "stake": "359536001812954265048866367836",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "nw.pool.devnet",
        "public_key": "ed25519:65XTtuthwFDL9LpK9FJystfEvJ6brtBpfYSnRMa5a2wN",
        "stake": "315118407658677107789916337418",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "joe1.pool.f863973.m0",
        "public_key": "ed25519:G3SxwzmiEZSm3bHnTLtxJvm3NvT1TLQcWuV1iod6i6NJ",
        "stake": "273416814262407811871697081246",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "lastnode.pool.f863973.m0",
        "public_key": "ed25519:811gesxXYdYeThry96ZiWn8chgWYNyreiScMkmxg4U9u",
        "stake": "220270804778688010930322578899",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "gettingnear.pool.f863973.m0",
        "public_key": "ed25519:5QzHuNZ4stznMwf3xbDfYGUbjVt8w48q8hinDRmVx41z",
        "stake": "213712339162848133413099589282",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "bg-1.pool.f863973.m0",
        "public_key": "ed25519:BWaBJ1hYmZsarajYwt8VdKineUWza5fSd2mnoMdMSZAP",
        "stake": "204919467902684373907394667777",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "zainy.pool.f863973.m0",
        "public_key": "ed25519:37KfhBNYjqpaUVh3ft5kPcFn3xK1eVvtDZJCQQVCGnzQ",
        "stake": "196317148410404697607075316948",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "spectrum.pool.f863973.m0",
        "public_key": "ed25519:ASecMN9e28vtCJn7rD2noNwL5c3odzQgAfbfHrUnbSVe",
        "stake": "187970666492755993765452478949",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "kronos.pool.f863973.m0",
        "public_key": "ed25519:3i2pertqzF8xqkJ4BrE4t4r67YiYYrUKCktbqvDgjzuQ",
        "stake": "172491756954874935802103904529",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "sashamaxymchuk.pool.f863973.m0",
        "public_key": "ed25519:84G4fGj5nvuNq6WLqbBejApRjbRKztiWkqkLJ96gBwz7",
        "stake": "152884131789606095181465551080",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "kuutamocharlie.pool.devnet",
        "public_key": "ed25519:HEBzytNEnxHMJJDUm3cxrhNKw9Xisi2qtDofuJihSTa3",
        "stake": "142222363426850311243465320260",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "syncnode.pool.f863973.m0",
        "public_key": "ed25519:FUAVDkmLhuTbKYv4GWuWv9ogjKzRatLd5ZBMKXRy7WqE",
        "stake": "139666321079765860017503921423",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "bg-0.pool.f863973.m0",
        "public_key": "ed25519:Bk1noW3d2danddc14JCR8W73mpYfrE7R4VzkVcNDRWpC",
        "stake": "116856133414424298172981524215",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "idtcn3.pool.f863973.m0",
        "public_key": "ed25519:DtkY9WtkWweSrF13BJi5k4c6xyk3tBAC9y92AEY4Ayfb",
        "stake": "115351061157028257929083124677",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "do0k13.pool.f863973.m0",
        "public_key": "ed25519:BNZEVQLfRVQ6kRDtSiehn5VCdsDfvnmPP6PFEfEF4Kyc",
        "stake": "106038336453004870558375875777",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "hnnt.pool.f863973.m0",
        "public_key": "ed25519:AjB1yMysjrcgaa5RttyDWbBr9gdcCwmy5PEqTwmVPT9F",
        "stake": "99291434658186049311188694282",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "plaguedpool.pool.f863973.m0",
        "public_key": "ed25519:6caatXDJM21Lq13Kcy3t9vKxPvQERTtWRH4z16MGyan2",
        "stake": "97115861505057055581165907685",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "hashquark01.pool.f863973.m0",
        "public_key": "ed25519:EqyBTyrx2GsdNgc2BsPmjseaMrsCi2oZrMBqx43atJsL",
        "stake": "96804692411870275307630356138",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "azetsi.pool.f863973.m0",
        "public_key": "ed25519:2MFKLj9E2kRdJoQqUgaY9KtheebzLv9ntdgTGsZxLaE1",
        "stake": "92966651309527674508182409126",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "sssuryansh.pool.f863973.m0",
        "public_key": "ed25519:Cg98Xz8UBadXY6KHukfYXxmDijGDnjSDiptp8EyvnD8D",
        "stake": "90432426193699844585153681867",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "derori_validator_pool.pool.f863973.m0",
        "public_key": "ed25519:GHtE4n8X7HRgtjkEZ4cUFxViLsmcpV3VSLL3mXWce7V2",
        "stake": "84599702216570336286906441130",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "blueprint.pool.f863973.m0",
        "public_key": "ed25519:DUfxa8EUaTQyVXgEm4NFCtiez7jsjbM3m838c7aRSEBn",
        "stake": "82404139128438616491945776865",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "okexpool.pool.f863973.m0",
        "public_key": "ed25519:2921q6rM3Mw3aXcA5Jn6R9R5p5qTopDBnJ48JA7BDCeV",
        "stake": "76511734993666688037174515913",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "hahaha.pool.devnet",
        "public_key": "ed25519:5NYgjodnxftTAoe9Db1h3RLjcHsBxYGmKn2QLsVkya6o",
        "stake": "73316767756130284347462769344",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "projecttent.pool.f863973.m0",
        "public_key": "ed25519:2ueHfYVewchegMmae9bc86ngdD1FWTbxewVb8sr4cABx",
        "stake": "72483235808637512420500737974",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "shardlabs.pool.f863973.m0",
        "public_key": "ed25519:DxmhGQZ6oqdxw7qGBvzLuBzE6XQjEh67hk5tt66vhLqL",
        "stake": "66816561900374704156869040468",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "jstaking.pool.f863973.m0",
        "public_key": "ed25519:fui1E5XwnAWGYDBSQ3168aDfsW1KDFH8A7nBHvZiqGv",
        "stake": "59229067658473896057272580070",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "ibb.pool.f863973.m0",
        "public_key": "ed25519:7gvdHhcMcXT1jMZoxDKy7yXnRiPVX1tAFTa7HWTHbe8C",
        "stake": "54473475515031586704533699491",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "happystake.pool.f863973.m0",
        "public_key": "ed25519:3APqZiwzeZLzgfkJyGGTfepDYHA2d8NF1wZi4mCpZnaJ",
        "stake": "53510254187670242029884895862",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "kuutamo.pool.f863973.m0",
        "public_key": "ed25519:8T7J4vNjoUkQ8auYiqkxofELaa18aMGc4qNhCEx7qHCg",
        "stake": "50628728273478332366393557780",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "colossus-testnet.pool.f863973.m0",
        "public_key": "ed25519:4HfSAA4QuQDqzRKdD2W3cfUTLo3o81K8WGZFr5PiGruq",
        "stake": "50538109777569691873100000000",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "bgpntx.pool.f863973.m0",
        "public_key": "ed25519:DcCH7h9B4YhLc6BvdLTG5Mm62ZeLGT1yRrC7szbxRDaK",
        "stake": "50078553817974141220816485265",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "grassets.pool.f863973.m0",
        "public_key": "ed25519:3S4967Dt1VeeKrwBdTTR5tFEUFSwh17hEFLATRmtUNYV",
        "stake": "48169309950264258110076737593",
        "validator_stake_struct_version": "V1"
      },
      {
        "account_id": "pandateam.pool.f863973.m0",
        "public_key": "ed25519:7n426KJocZpJ5496UHp6onwYqWyt5xuiAyzvTGwCQLTN",
        "stake": "47663669216965697687612907251",
        "validator_stake_struct_version": "V1"
      }
    ],
    "prev_block_hash": "EWRCxh7jarEeQm4Ten5rbPFJEub6qEjHhsdycvUr7oVN"
  },
  "id": "pagoda-near-light-client"
}

'''
'''--- fixtures/test_0.json ---
{
    "last_block_hash": "6taaeb6h2uJcuUvvmwXpYgagYvyHsFanWhm2ziGGHCff",
    "body": {
		    "approvals_after_next": [
			    "ed25519:VK3Hhut16e5agbePKPfsyrLVQRJGQwWamSRTRCQwJNFL7FuKtxfoPiRNbaYoEcUqSGvYNK8LXru4etnNtCQZyf2",
			    "ed25519:3AzJSuR438NiC53Rx2BqjcxxeFKQcXBPspJfTyQ5CAuSmrazNJ1vsXgub1dfJWGkLB9m7zD16AghdHbwyxHa3gwo",
			    "ed25519:4gFgfJefgLs78u1PfQckGstEbhLK1TCtDWCXUiYLHiXvGFVmPWgZbtU57DJbiLQqYkKUN2yfRohRTZA6w52TAcVS",
			    "ed25519:5Q3QdNsCa9j3siWQNAHXk4FTsiKntFwB1sFE4zUuM6S6gPx1cniPFEg3VfoShpVR9M9VPAr3AVfRmDFQGCvcvcKq",
			    "ed25519:2X1uEUuWGBF9D6FgK6GGXf3qVjeiqa4F4UzCatdtmRA6MPrePbv9W5AmGgaEePuYv81WytXU1xmfSGfaHhbpYyEt",
			    "ed25519:ftssnQfBCA8iEYLTcAkupddx82df53Hjm6T7qvD1ZWwmMF7CQDkKPxnBMC6CVL6wPrZX6Dsrz18RCTmyks3M7gV",
			    "ed25519:4d4kPwBhg27K8ZMC5A4MgVDu4kbKmZ6nMQUTQBfXsShGS5DwAyCks4f1jKWnbh8jW4bJERiJUWH4mhHStfoNNbgF",
			    "ed25519:3d3VNqdXZQyfKudgfAPmMr645Rn3RUxFNYsvsJJUkPmV75vbMYZyKLAGgXKNGUddtwawDrnRjbvJtaMwFraCSb4X",
			    "ed25519:63qxBKg1npU8SzanxtTZmz6BPQGoZyihe2rXko8DAyM9Kmxrg3xrQyoyk9yk9Mxa6kgw6HNTpPAEbSLVewzhzxB2",
			    "ed25519:124mNKfU8gHtMdCnhZMLfiREpy6Lh2ZQYLo1KJo8JThqQp4BwqJ4wMCGvDp7jcCBBfHWzXz1eqnZWMWFubvcZnXT",
			    "ed25519:4dq1ud5d12SNzcdGP2rFdJYH91a9FVGRteoRirNBudhz2LmiiEANqgfkB93SmxA7BuQRdKYkK42hbSNUPXdGQxWj",
			    "ed25519:4DozYNm9f9suvuWj87QfAMfquaEqJJpZi8cPMH8u8h3re9BMwbvu1RfVLZEaWziihwCQUJWV7Meiat5wfqj5FUt5",
			    "ed25519:5sp9Awt7UzzJGiJN3jMF2jSP5nxU2E1wC6PVoKL57XgTfmWkdxQUmNgev8HPZruMvVWRYkpW1dYa9hibRuPU9sQV",
			    "ed25519:29ByUDGKUE6c7rZA5A1nVaNK14Z6dHgMT6ejAnirvTgRci5EEmjUdJS69XES6Pk9VxeDTi1X19Hnnw67KPyQMHbC",
			    "ed25519:2Myim4fHvkaAJWpaeAavoF42nkvAqaTVixnav4v7fSPHFWgXLNM5L8FNZowzfBfKimu3juHSf5fNUtht7Y8ZU2oT",
			    "ed25519:4qNiUd6fM6aXRqBuda2Pvwjt5h3EPuvTrryXUUjoaz9c5Uh9Q2pYyY7k6ENC2RkNGxmTMzGKbhMmXQKpVesADcrJ",
			    "ed25519:2nBVHpagEujexVf3PJUkBxPdA7mWadZkKMmcZ3KyKNaue7ya7UrUB8yDUG9DoFkP5ZbYdZmkrdWDboFSUEMjB1ae",
			    null,
			    null,
			    "ed25519:3zWa7NL6WJz3MYgPGjKGf9eEAG4qCAdHwBmV3zuxAoE8RTQkhj91WnXfZd5o2TrtHQDJYKLAsaGd7EikiBar7Bs",
			    "ed25519:67Ph2NiNfr9LERQdRh25npY1xmimC9m1L1ofaW5jXuvbG4Byfp7WoC9DXrfWzjLuwK9tKS4oQLC6gLaHefVn5DiV",
			    "ed25519:3UbX3YBcyARb4CbtFRnzA25qRKswvFiLLgsZ8VAEjs7D1qoG75B7UpRh8aYrXK2U2WuFEkzLb9dQVRb7mzLUxjfT",
			    "ed25519:2wuLqd2ZNdTfHF367bzFXL7NV2Qk3m6YNEeCdMASnx1sUB4BULm3Q4WNF9ZGrAKSMAaEyxKGFA3tvyKDxoSk1wve",
			    null,
			    "ed25519:7mbR6ii13WLpPn1m259ym4k3Rb2DxbU8NKdo5VjaGNt2VnAqYojLW9gKa9HMErJP2bUPZTj9BsjGBCNjCZ1cDzx",
			    "ed25519:2UP2VsEcgSubk9AgKAHJ9pAM9imrF4Ms5rQvsPynU5w33HpjxHS7gzsakcdXq94SCgScTV3y6oU2SZ4PijKTmsKt",
			    "ed25519:3maB3cKsDSL7AJu8s3cmnJcpekjU93mhdnQH5UWTeLdDmEbnmZEHAewSBFqhCwFe5hHKgapKSV9VoMCRnwsgrVtw",
			    "ed25519:2KEVy7rQ6FK91yMc6mgF8ueP1vpr5c1eLBMxhn64nmtVzU5V3tQjD4jjrBQkTYD5eaGqvke2noTiU93DTHQzRU3T",
			    "ed25519:4wj8EycC9K7aQ8JpGTTrY5K2adqxZL76p8kvjjyKaqXip4dE9HwXRFqh7cTgy3sXbQvdJtxSZ64njHeDoWvJD1Ct",
			    null,
			    null,
			    null
		    ],
		    "inner_lite": {
			    "block_merkle_root": "3huzCnEQhgDDMWyVNR9kNbQFJ7qJGy1J4MBrCJAWndW9",
			    "epoch_id": "FsJbcG3yvQQC81FVLgAsaHZrMBFbrPM22kgqfGcCdrFb",
			    "height": 154654776,
			    "next_bp_hash": "AcNatyPz9nmg2e5dMKQAbNLjFfkLgBN7AbR31vcpVJ7z",
			    "next_epoch_id": "Fjn8T3phCCSCXSdjtQ4DqHGV86yeS2MQ92qcufCEpwbf",
			    "outcome_root": "7SYchEDbwawjP2MVfZ2GinP8bBQU1hKFRz34b2ZzG3A8",
			    "prev_state_root": "F2NNVhJJJdC7oWMbjpaJL3HVNK9RxcCWuTXjrM32ShuP",
			    "timestamp": 1705334624027402581,
			    "timestamp_nanosec": "1705334624027402581"
		    },
		    "inner_rest_hash": "DZT9p28adyuiTSbUV5bsuPRxX9K7R1bag1AeUEMhm4bh",
		    "next_block_inner_hash": "DNCadyQPnQNYU3hA99zY2RfPQY4JpfRJeT8PewWpWQRQ",
		    "next_bps": [
			    {
				    "account_id": "node1",
				    "public_key": "ed25519:6DSjZ8mvsRZDvFqFxo8tCKePG96omXW7eVYVSySmDk8e",
				    "stake": "51965991496563659315960459285056",
				    "validator_stake_struct_version": "V1"
			    },
			    {
				    "account_id": "node2",
				    "public_key": "ed25519:GkDv7nSMS3xcqA45cpMvFmfV1o4fRF6zYo1JRR6mNqg5",
				    "stake": "51956315551249534697100259004698",
				    "validator_stake_struct_version": "V1"
			    },
			    {
				    "account_id": "node3",
				    "public_key": "ed25519:ydgzeXHJ5Xyt7M1gXLxqLBW1Ejx6scNV5Nx2pxFM8su",
				    "stake": "51901364964498492263434600300098",
				    "validator_stake_struct_version": "V1"
			    },
			    {
				    "account_id": "node0",
				    "public_key": "ed25519:7PGseFbWxvYVgZ89K1uTJKYoKetWs7BJtbyXDzfbAcqX",
				    "stake": "51807871317794349436390749741568",
				    "validator_stake_struct_version": "V1"
			    },
			    {
				    "account_id": "aurora.pool.f863973.m0",
				    "public_key": "ed25519:9c7mczZpNzJz98V1sDeGybfD4gMybP4JKHotH8RrrHTm",
				    "stake": "17889547137784368999057296757171",
				    "validator_stake_struct_version": "V1"
			    },
			    {
				    "account_id": "legends.pool.f863973.m0",
				    "public_key": "ed25519:AhQ6sUifJYgjqarXSAzdDZU9ZixpUesP9JEH1Vr7NbaF",
				    "stake": "16201913225042074278623061793112",
				    "validator_stake_struct_version": "V1"
			    },
			    {
				    "account_id": "01node.pool.f863973.m0",
				    "public_key": "ed25519:3iNqnvBgxJPXCxu6hNdvJso1PEAc1miAD35KQMBCA3aL",
				    "stake": "11170441638122498891243391338168",
				    "validator_stake_struct_version": "V1"
			    },
			    {
				    "account_id": "fastvalidator.pool.f863973.m0",
				    "public_key": "ed25519:93EQCbHLEY6cMuxDNe8LysWPy8zv5VsoqvHppMbMndpZ",
				    "stake": "10592433670906673196820699139628",
				    "validator_stake_struct_version": "V1"
			    },
			    {
				    "account_id": "kiln.pool.f863973.m0",
				    "public_key": "ed25519:Bq8fe1eUgDRexX2CYDMhMMQBiN13j8vTAVFyTNhEfh1W",
				    "stake": "7466078258914882102490404903558",
				    "validator_stake_struct_version": "V1"
			    },
			    {
				    "account_id": "stakely_v2.pool.f863973.m0",
				    "public_key": "ed25519:7BanKZKGvFjK5Yy83gfJ71vPhqRwsDDyVHrV2FMJCUWr",
				    "stake": "5536803167995073895287889871766",
				    "validator_stake_struct_version": "V1"
			    },
			    {
				    "account_id": "fastvalidator2.pool.f863973.m0",
				    "public_key": "ed25519:4BYnfLhhvNkcDe6U4W43uAqBXDaxM6DcN3YAbLKNUWSh",
				    "stake": "5302106052281372493614954324464",
				    "validator_stake_struct_version": "V1"
			    },
			    {
				    "account_id": "fastvalidator1.pool.f863973.m0",
				    "public_key": "ed25519:GSeKR7hJrgfBJ4FjS4GwQYaQzcVhuDun3PcjWZh4nGpT",
				    "stake": "5291814124144644904379619249839",
				    "validator_stake_struct_version": "V1"
			    },
			    {
				    "account_id": "chorusone.pool.f863973.m0",
				    "public_key": "ed25519:3TkUuDpzrq75KtJhkuLfNNJBPHR5QEWpDxrter3znwto",
				    "stake": "3830782869095601550208218306826",
				    "validator_stake_struct_version": "V1"
			    },
			    {
				    "account_id": "everstake.pool.f863973.m0",
				    "public_key": "ed25519:4LDN8tZUTRRc4siGmYCPA67tRyxStACDchdGDZYKdFsw",
				    "stake": "3424542869832679924363110810613",
				    "validator_stake_struct_version": "V1"
			    },
			    {
				    "account_id": "ni.pool.f863973.m0",
				    "public_key": "ed25519:GfCfFkLk2twbAWdsS3tr7C2eaiHN3znSfbshS5e8NqBS",
				    "stake": "3102526368747483216749759285501",
				    "validator_stake_struct_version": "V1"
			    },
			    {
				    "account_id": "foundryusa.pool.f863973.m0",
				    "public_key": "ed25519:ABGnMW8c87ZKWxvZLLWgvrNe72HN7UoSf4cTBxCHbEE5",
				    "stake": "2969728543420726431634300166705",
				    "validator_stake_struct_version": "V1"
			    },
			    {
				    "account_id": "chorus-one.pool.f863973.m0",
				    "public_key": "ed25519:6LFwyEEsqhuDxorWfsKcPPs324zLWTaoqk4o6RDXN7Qc",
				    "stake": "2699586772185217175436266507686",
				    "validator_stake_struct_version": "V1"
			    },
			    {
				    "account_id": "lunanova2.pool.f863973.m0",
				    "public_key": "ed25519:9Jv6e9Kye4wM9EL1XJvXY8CYsLi1HLdRKnTzXBQY44w9",
				    "stake": "2621112518848962964878885105004",
				    "validator_stake_struct_version": "V1"
			    },
			    {
				    "account_id": "valeraverim.pool.f863973.m0",
				    "public_key": "ed25519:3686ABqNUZc1qhLWLHg5xZpBzrWPiUCMNZxcCNmg3e2s",
				    "stake": "2470287532644478855780095683680",
				    "validator_stake_struct_version": "V1"
			    },
			    {
				    "account_id": "nodeasy.pool.f863973.m0",
				    "public_key": "ed25519:25Dhg8NBvQhsVTuugav3t1To1X1zKiomDmnh8yN9hHMb",
				    "stake": "2422603751767713530958290540330",
				    "validator_stake_struct_version": "V1"
			    },
			    {
				    "account_id": "stakesstone.pool.f863973.m0",
				    "public_key": "ed25519:3aAdsKUuzZbjW9hHnmLWFRKwXjmcxsnLNLfNL4gP1wJ8",
				    "stake": "1884761660146474524590126573806",
				    "validator_stake_struct_version": "V1"
			    },
			    {
				    "account_id": "pathrocknetwork.pool.f863973.m0",
				    "public_key": "ed25519:CGzLGZEMb84nRSRZ7Au1ETAoQyN7SQXQi55fYafXq736",
				    "stake": "1716080041579049406737178399888",
				    "validator_stake_struct_version": "V1"
			    },
			    {
				    "account_id": "dsrvlabs.pool.f863973.m0",
				    "public_key": "ed25519:61ei2efmmLkeDR1CG6JDEC2U3oZCUuC2K1X16Vmxrud9",
				    "stake": "1582167714882447593375801170700",
				    "validator_stake_struct_version": "V1"
			    },
			    {
				    "account_id": "bee1stake.pool.f863973.m0",
				    "public_key": "ed25519:B7Mwy3sCCJ6GZzEojsKFXMjLQfVXPDC4Q1LjuHoZcyM6",
				    "stake": "951628760427592588357858953323",
				    "validator_stake_struct_version": "V1"
			    },
			    {
				    "account_id": "bisontrails.pool.f863973.m0",
				    "public_key": "ed25519:8g4P5EXyp2b2pfVMHY1QLfkRcY59hjPfWrFCKUWX3RmR",
				    "stake": "784322861457562867996710885838",
				    "validator_stake_struct_version": "V1"
			    },
			    {
				    "account_id": "pennyvalidators.pool.f863973.m0",
				    "public_key": "ed25519:HiHdwq9rxi9hyxaGkazDHbYu4XL1j3J4TjgHQioyhEva",
				    "stake": "453985902267796464609404547243",
				    "validator_stake_struct_version": "V1"
			    },
			    {
				    "account_id": "nw.pool.devnet",
				    "public_key": "ed25519:65XTtuthwFDL9LpK9FJystfEvJ6brtBpfYSnRMa5a2wN",
				    "stake": "351594742984477077395922766923",
				    "validator_stake_struct_version": "V1"
			    },
			    {
				    "account_id": "leadnode.pool.f863973.m0",
				    "public_key": "ed25519:CdP6CBFETfWYzrEedmpeqkR6rsJNeT22oUFn2mEDGk5i",
				    "stake": "222791099831338589442315274396",
				    "validator_stake_struct_version": "V1"
			    },
			    {
				    "account_id": "blueprint.pool.f863973.m0",
				    "public_key": "ed25519:DUfxa8EUaTQyVXgEm4NFCtiez7jsjbM3m838c7aRSEBn",
				    "stake": "138000501667279356740025791621",
				    "validator_stake_struct_version": "V1"
			    },
			    {
				    "account_id": "al3c5.pool.f863973.m0",
				    "public_key": "ed25519:BoYixTjyBePQ1VYP3s29rZfjtz1FLQ9og4FWZB5UgWCZ",
				    "stake": "113955994115662929112230612769",
				    "validator_stake_struct_version": "V1"
			    },
			    {
				    "account_id": "cymac.pool.f863973.m0",
				    "public_key": "ed25519:EzUKatz6stcg4pKA2HpwhQXhSDvef3Cxyo6zvsz87est",
				    "stake": "112838247651548890239554150501",
				    "validator_stake_struct_version": "V1"
			    },
			    {
				    "account_id": "a41.pool.f863973.m0",
				    "public_key": "ed25519:Gzg8dYaeBe6ime9dsMKUFiRZeWLjQ3VHjBCbapjsCmUf",
				    "stake": "55030000541997702601700000000",
				    "validator_stake_struct_version": "V1"
			    }
		    ],
		    "prev_block_hash": "5dbt6rh82Xx6nNG1PuKoQj96g4jnWw6cyb8HNWPPkVJE"
	    }
}

'''
'''--- fixtures/test_1.json ---
{
    "last_block_hash": "A6XdHk59MvQf3aMA4Fo4AbqFBRMrFTPkMzbK4xKi4Pyr",
    "body": {
		"approvals_after_next": [
			"ed25519:4iYR8JPp96vrgh4X7vJt6x4iXkcz8xNKzMzn9Zy9393grrahCNnpKUAFzfjynoa3pDaaFVH4TG9i3kC277GCqDh",
			"ed25519:4JQWoZN6GwuXityiM9FtzutPSFT6NT4w9HyRVEHr77KCMASo65gg2WEbSxKr9b8hgKnxqsYtEnPURZo8158ZXgLu",
			"ed25519:4miyB7FCbkEPARW5vZh5PkdjN2T3xU4kbdQTEJh34E9J94qQkNJxibw59cFkHYQ8p5jZNTJm8gqo2WRZ1C5MT5ys",
			"ed25519:23sAhk87wCEk9y127pVTxzEHuPiPnhuGayqsm84ZDEssDZmmwBJV2AwgtJ8je7LLf3q5w58YH7ZdiCKRmRJVHU6y",
			"ed25519:3Nxn2PXkn3ebBjeTggZtZxatCfVvBND5pK9JafrruEt4Mvm7vrTVb3wS5n6iiwzzgqPi2futbrrGg6hD159Tywcb",
			"ed25519:4JDewsvjKo6b5qbi8TJT5QvG2oMDXjp6UGyD77cMiC9yBbpnsvqtqucT1ovWEZAejSEteTKh8MwTYNG4fqGxkgEK",
			"ed25519:53ExLA4n8k8GPRtx9gyG3GAUkzVWMEMHfWP9JNxhfWnPvnFKdF4Rx7qt9LGMSxh6hHxPBwYrqrM2MJGiXTBBmU9g",
			"ed25519:2b5RQYp2CQRC6Kde3Uw8gHpyPKbJJGHedBPDkPojFNddYDMU1xVxHe62RV3cUxv4pNr3GtC4ytdSzkjXyqXnUZWg",
			"ed25519:Ck7SvjdBK6NshMJHHQ1mH8mTsRRXbxg9V9QdZF3MzyAZWv9sNZoovCyuSJQjJdnmZR41ZeYZhPMAYKa7rwii6ZV",
			"ed25519:5T3eJwLWefGRpGKfMArKoY93nwgQbvN4tpTN5ETH7EDB89kpixn54k3HNR21hnwg5ZDuC4ZEPf97CCoWao5VDqmh",
			"ed25519:5VeUZVNrTqqfyT6FdRukznT6AB8X8fR43Mv4aTPuNjneKpEXWeiPtWrQniQnaiz64CikMhi5K67FuuP48uDY62Ya",
			"ed25519:45BerwL4v3JgXXcUnLAW3UAw8iTanQLo2okYbmzVkmSNB62GtmPf2PESEbgrd4jr3VNreb7oSxd7k3LAgNEV7Exn",
			"ed25519:5tAqssJmXV6Fcy8T6qQ9W819om6c93Fmz5fk1iFDu2mnTw1bfYrNVPZxwbjNMxyU6EzSu4cjykBVmcGXm7EJtHr8",
			"ed25519:462bhuLShbMmu6K8RkC6uc6fKmGmTzpC4iJcEqSdH5BS2q7sLmU2j2PWwAedg2Z8nXjVYRMCzci3FeYPZR8fkZK4",
			"ed25519:4JMdzn7HHrkpZh4yvY6Cx9cyfHSE44tj8jABhty14WJccJTugomC8xDLQE6HYTuxgXrpVmS8Dz8oK3fzwMSZeWsr",
			"ed25519:4yEHBfzWYhC7SSonhczffKvwWRJE5ViMXSkXpowAgZHbJMF2iKJtMfQk9jvf8XPWzsMj9W8eEBsmZfDLHVc1hyA6",
			"ed25519:vhEsZ3bry9yHtLQjiWD6KZZYSfZp6Aea6zrDaF4Z8eJi6ESkaNzKksjrXRyroXWhbyZtQVTqJDtz44t6AJAA8D1",
			"ed25519:4BqS5LjoEkS3CvvgfhgTiYsyoxTdg1wLYTUxyizENxpKUWvFVZPCeG4PTR7hGBth7nL1Duoh35bWr1Zhwnw5PwHc",
			null,
			null,
			"ed25519:2QphJc3W6cuM9pKP3UJ1Rb31V3gfsNck4TrCkJesxQjTRD8vUoPJHRdmuNyh7x7uKEiy9Fm1nPzLdJUKvnpBvsXe",
			"ed25519:4fjjCEvCr3Vd8kyjv1YYfXxZD3YcPmjxnEbeE4KdAA7pPip4FfbaAtv69rpguWP2YjQwRrW9rn6eVYvSXBFtVQJc",
			"ed25519:4kGKNsRxhx3XzV2gapzpxfczyKyMxzsdWfUbDSZWRAbLK1965EKjuFXTqhhvHC5vS2L1MiYtHWDi9zwzDk8zYiyG",
			"ed25519:Ff7Zj6HHHhLXfH8T3kKsQxJVF5EQLmLdTwBXtszLUaL3Um7qR1ZamXAxURXsK2cdgfbtpJkV4DwaH5Vx5VLZmow",
			"ed25519:5gUPptJB6aDKJTELCVQBvK5DHAtPkMcMMSrEDTBdfkt7hGA9TmEbTcAyz1RSANRCzzUDphtMemD2VGLJen23yWpK",
			"ed25519:274QMhhCkbkh6QpCQZ2q8eDGHMe7zoNDcun3GJPCgKnzfQ9e9hgndruuua8R5D68bTeEd3E5vsCzs3XgFdKYYkTL",
			"ed25519:4tRmVgq11TpQgDKVuvj5RVRD7qFhrv8ztQRxPu6c8y4KfbE7xKGdPFEeG7UXWXruZFs1wrGKTu8HJyLrjVpWcDHD",
			null,
			"ed25519:4HvAS18pettmeiAinDe3ZoLTFLNjpRzUVmafqYqRT21RyGLxxH1cyTz5ER2h5U5PYLewCdkVNwEbXsfH56dqyiD9",
			null,
			"ed25519:3bCdULXmujMamQiwfNnkvVjjbLDedDNdr9Mpcp7zrSAp32ZC5QWMuPFAv8tG8QFV9mdT1Yk3K25NLe32x9EhwU8N",
			"ed25519:XM5mNvN284AwzhT1BPs7MTt4UeESpvp73LyYg5ZXizKXJpo1j1xaQbh45Dru74qVP7uZp599Zbyo5reTe1bK2yA",
			null
		],
		"inner_lite": {
			"block_merkle_root": "5geZEhgh6CExgjagwJ99fgQtf5Ej6dHL6WNJ7fNXgG8c",
			"epoch_id": "Fjn8T3phCCSCXSdjtQ4DqHGV86yeS2MQ92qcufCEpwbf",
			"height": 154697976,
			"next_bp_hash": "HiGgVkmWFuvHdLaBCrp7G5Q9yzmSrxmyA78QhoVqHHwS",
			"next_epoch_id": "FgBfwcG3XMnWBkqu3xbYH8Guju8iBNJHJcvxdHsL6svr",
			"outcome_root": "2DoUX6XsDr5BxRN821ZxTLYYcQBzSSxPMTqMU4TLfu35",
			"prev_state_root": "J28Pfz9gHzXsChqW2U5ArTcMkTc1ATx6duk7rynkTnHZ",
			"timestamp": 1705361606832234145,
			"timestamp_nanosec": "1705361606832234145"
		},
		"inner_rest_hash": "2VFJq5AJCKnnai6mZFYtCyn1ZM6GmB4w5Rjy1StE7HXE",
		"next_block_inner_hash": "FFUJkMD1wEQYLH3JBrhKGBCySXVvsp79zUBZF4ifyHnE",
		"next_bps": [
			{
				"account_id": "node1",
				"public_key": "ed25519:6DSjZ8mvsRZDvFqFxo8tCKePG96omXW7eVYVSySmDk8e",
				"stake": "51980883591416601010719726777959",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "node2",
				"public_key": "ed25519:GkDv7nSMS3xcqA45cpMvFmfV1o4fRF6zYo1JRR6mNqg5",
				"stake": "51971204873229463484002611006028",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "node3",
				"public_key": "ed25519:ydgzeXHJ5Xyt7M1gXLxqLBW1Ejx6scNV5Nx2pxFM8su",
				"stake": "51916238539076580840311339695332",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "node0",
				"public_key": "ed25519:7PGseFbWxvYVgZ89K1uTJKYoKetWs7BJtbyXDzfbAcqX",
				"stake": "51822718099537070721488806689276",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "aurora.pool.f863973.m0",
				"public_key": "ed25519:9c7mczZpNzJz98V1sDeGybfD4gMybP4JKHotH8RrrHTm",
				"stake": "17895092803259114287724420293384",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "legends.pool.f863973.m0",
				"public_key": "ed25519:AhQ6sUifJYgjqarXSAzdDZU9ZixpUesP9JEH1Vr7NbaF",
				"stake": "16206556269879622555039863033060",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "01node.pool.f863973.m0",
				"public_key": "ed25519:3iNqnvBgxJPXCxu6hNdvJso1PEAc1miAD35KQMBCA3aL",
				"stake": "11173642795262854946815330034213",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "fastvalidator.pool.f863973.m0",
				"public_key": "ed25519:93EQCbHLEY6cMuxDNe8LysWPy8zv5VsoqvHppMbMndpZ",
				"stake": "10595469185547409447626687991414",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "kiln.pool.f863973.m0",
				"public_key": "ed25519:Bq8fe1eUgDRexX2CYDMhMMQBiN13j8vTAVFyTNhEfh1W",
				"stake": "7468217842007976196291671160040",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "stakely_v2.pool.f863973.m0",
				"public_key": "ed25519:7BanKZKGvFjK5Yy83gfJ71vPhqRwsDDyVHrV2FMJCUWr",
				"stake": "5538389871199320877264924449940",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "fastvalidator2.pool.f863973.m0",
				"public_key": "ed25519:4BYnfLhhvNkcDe6U4W43uAqBXDaxM6DcN3YAbLKNUWSh",
				"stake": "5303625497287173100081594363152",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "fastvalidator1.pool.f863973.m0",
				"public_key": "ed25519:GSeKR7hJrgfBJ4FjS4GwQYaQzcVhuDun3PcjWZh4nGpT",
				"stake": "5293330619752851761190952982195",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "chorusone.pool.f863973.m0",
				"public_key": "ed25519:3TkUuDpzrq75KtJhkuLfNNJBPHR5QEWpDxrter3znwto",
				"stake": "3831880671335147210435951074724",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "everstake.pool.f863973.m0",
				"public_key": "ed25519:4LDN8tZUTRRc4siGmYCPA67tRyxStACDchdGDZYKdFsw",
				"stake": "3425524339069666388552956739441",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "ni.pool.f863973.m0",
				"public_key": "ed25519:GfCfFkLk2twbAWdsS3tr7C2eaiHN3znSfbshS5e8NqBS",
				"stake": "3103415468246532541895473430716",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "foundryusa.pool.f863973.m0",
				"public_key": "ed25519:ABGnMW8c87ZKWxvZLLWgvrNe72HN7UoSf4cTBxCHbEE5",
				"stake": "2970579589997198167425850722035",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "chorus-one.pool.f863973.m0",
				"public_key": "ed25519:6LFwyEEsqhuDxorWfsKcPPs324zLWTaoqk4o6RDXN7Qc",
				"stake": "2700360401758961539837510871690",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "lunanova2.pool.f863973.m0",
				"public_key": "ed25519:9Jv6e9Kye4wM9EL1XJvXY8CYsLi1HLdRKnTzXBQY44w9",
				"stake": "2621863661185071626699112987798",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "valeraverim.pool.f863973.m0",
				"public_key": "ed25519:3686ABqNUZc1qhLWLHg5xZpBzrWPiUCMNZxcCNmg3e2s",
				"stake": "2470287532644478855780095683680",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "stakesstone.pool.f863973.m0",
				"public_key": "ed25519:3aAdsKUuzZbjW9hHnmLWFRKwXjmcxsnLNLfNL4gP1wJ8",
				"stake": "1885301783710511590471643861522",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "pathrocknetwork.pool.f863973.m0",
				"public_key": "ed25519:CGzLGZEMb84nRSRZ7Au1ETAoQyN7SQXQi55fYafXq736",
				"stake": "1716571825486169408513188183201",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "dsrvlabs.pool.f863973.m0",
				"public_key": "ed25519:61ei2efmmLkeDR1CG6JDEC2U3oZCUuC2K1X16Vmxrud9",
				"stake": "1582621122794136327048654501834",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "bee1stake.pool.f863973.m0",
				"public_key": "ed25519:B7Mwy3sCCJ6GZzEojsKFXMjLQfVXPDC4Q1LjuHoZcyM6",
				"stake": "951901472501611026961984404965",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "bisontrails.pool.f863973.m0",
				"public_key": "ed25519:8g4P5EXyp2b2pfVMHY1QLfkRcY59hjPfWrFCKUWX3RmR",
				"stake": "784547628028533758413173572394",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "pennyvalidators.pool.f863973.m0",
				"public_key": "ed25519:HiHdwq9rxi9hyxaGkazDHbYu4XL1j3J4TjgHQioyhEva",
				"stake": "454116002760902808255722029483",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "nw.pool.devnet",
				"public_key": "ed25519:65XTtuthwFDL9LpK9FJystfEvJ6brtBpfYSnRMa5a2wN",
				"stake": "351695500847678181284638315706",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "leadnode.pool.f863973.m0",
				"public_key": "ed25519:CdP6CBFETfWYzrEedmpeqkR6rsJNeT22oUFn2mEDGk5i",
				"stake": "222854945937138358386550711453",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "blueprint.pool.f863973.m0",
				"public_key": "ed25519:DUfxa8EUaTQyVXgEm4NFCtiez7jsjbM3m838c7aRSEBn",
				"stake": "138040049008009637755493563288",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "al3c5.pool.f863973.m0",
				"public_key": "ed25519:BoYixTjyBePQ1VYP3s29rZfjtz1FLQ9og4FWZB5UgWCZ",
				"stake": "113955994115662929112230612769",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "cymac.pool.f863973.m0",
				"public_key": "ed25519:EzUKatz6stcg4pKA2HpwhQXhSDvef3Cxyo6zvsz87est",
				"stake": "112870584143910008966689700738",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "p2p-org.pool.f863973.m0",
				"public_key": "ed25519:5qyxefArHQfABdNv9ELuEiWcEo7DTzABM9LrMAKTCY3Z",
				"stake": "100198001398444504508422270154",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "a41.pool.f863973.m0",
				"public_key": "ed25519:Gzg8dYaeBe6ime9dsMKUFiRZeWLjQ3VHjBCbapjsCmUf",
				"stake": "55030000541997702601700000000",
				"validator_stake_struct_version": "V1"
			}
		],
		"prev_block_hash": "ATa5K9ofmjtLXsgkp2VNQhALi5hgJPmojMVQ1MtYUa8e"
	}
	}

'''
'''--- fixtures/test_2.json ---
{
    "last_block_hash": "EAUfcEw9BMjf1TqwqprD5rcMXbGrXmjdmmihLWEYbigA",
    "body": {
		"approvals_after_next": [
			"ed25519:EjkN3ekQRFPnAW9MFjTGE7ntb6V16spgMB6YYnejRzs6mzfbp6UB4ELHUR7tezZZyVL7AgAgAHwtHPBnJC6HHFf",
			"ed25519:EPFUZAu9SXM8rm3JQMZdY4tF4nicUH8zPEdVnF96ukAZpHwFeUQKDLmrrWjopA95FhykvQTmuQUjYfNLTvDeXYi",
			"ed25519:3uVsabfdcWDPeRK6yCinDWXonXxWhu6qv1MAHMHTYYsB6tcFCi3GLbdsddcdmTg2sDCbJUpkfwC51ZbUB7QATzx7",
			"ed25519:fjdgPLhjDaLKQaUvPGuRkaAwUxFKA9rgkDT8uRQCqtts8oM3ZyS6gmkz53x3VLBFoWWDyM6aZCXQCvakpq1eEAe",
			null,
			null,
			"ed25519:4kxomt3EQriQubccMgnUg9eQ5nkM7z4Fb3suA3nKQVc3D5P9HkvzN6wF5zEkvvG2TUELFDrCckbuLGFb38N4zDQc",
			null,
			null,
			null,
			null,
			null,
			"ed25519:5FVqGn2MK2CAWtzJmhPt9XktRvU9d6KNJ8BGST55qoKPJ9vZzADBDcW18iXHT8HqWixqBDLm5f9M46z2RSZoA64Z",
			null,
			"ed25519:4SHM7cVMmtpWcrJRcVLL5SU14WeyEpHGSEuvaU4hnr3NypKyekv6vMWdCU4DTTR6BoQjhYvtWXeqqZtMvPsJ9j7s",
			null,
			"ed25519:34EDE41YUxvrS6KSBkvM6VRMHzempoYawFt1bJrGLD9KRuYWJCJBQmt6axJuwh49tLpYMe4TCqw6Sq5C5kdDVzjY",
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			"ed25519:5cEY3iPBcoooFKMds1zubY23yvfCaCARBm43Qv8xMrTuH6iPUW1Wjmvf8kc5SdC46HzBjYRXueZEURZuSQ5oeXnx",
			null,
			null,
			null,
			null,
			"ed25519:5Z18ZBq9iQ3m6cZ8R3fsZ5ipJU81rqMmHnipstRfTX77AJshFCBpP8TxA8fK7aN44nrHdabncCJ9jFo6msWTzCnW",
			null,
			null
		],
		"inner_lite": {
			"block_merkle_root": "4Bo6a89Pr9AmKqBF54PExQ5J6QnuMgmac3SooXftFirj",
			"epoch_id": "FgBfwcG3XMnWBkqu3xbYH8Guju8iBNJHJcvxdHsL6svr",
			"height": 154741176,
			"next_bp_hash": "2bg8kQAwnTYZetw6BRpWBvw69BSF9WE4Zws2bQgNyNcm",
			"next_epoch_id": "EPpSEMnWuzHW4aTQ5hfAbkG4EyT8z7g9JvnUZH4yQFS5",
			"outcome_root": "7Ntnzqbsmgg5g4vKGfyzR19ZswdXriYXzhzpCJgR89Zz",
			"prev_state_root": "7ynM1RWwXiJtEVqFi9Zjn54FD9j7qU4wDNcBRLs9iPSu",
			"timestamp": 1705388244771412430,
			"timestamp_nanosec": "1705388244771412430"
		},
		"inner_rest_hash": "VF86i5AC81TCtEfRfG1m4tZCz5DGt8FUYbiVfjajk4D",
		"next_block_inner_hash": "HPX8ijJhWVtLh3cSupas2vudKFAZefvufA6zpxv5zoem",
		"next_bps": [
			{
				"account_id": "node1",
				"public_key": "ed25519:6DSjZ8mvsRZDvFqFxo8tCKePG96omXW7eVYVSySmDk8e",
				"stake": "51995849873243611939132459599779",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "node2",
				"public_key": "ed25519:GkDv7nSMS3xcqA45cpMvFmfV1o4fRF6zYo1JRR6mNqg5",
				"stake": "51986168368370021532730821376618",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "node3",
				"public_key": "ed25519:ydgzeXHJ5Xyt7M1gXLxqLBW1Ejx6scNV5Nx2pxFM8su",
				"stake": "51931186208367497781029863589354",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "node0",
				"public_key": "ed25519:7PGseFbWxvYVgZ89K1uTJKYoKetWs7BJtbyXDzfbAcqX",
				"stake": "51837638842520506321820685079720",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "aurora.pool.f863973.m0",
				"public_key": "ed25519:9c7mczZpNzJz98V1sDeGybfD4gMybP4JKHotH8RrrHTm",
				"stake": "17900245019402583650133465073632",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "legends.pool.f863973.m0",
				"public_key": "ed25519:AhQ6sUifJYgjqarXSAzdDZU9ZixpUesP9JEH1Vr7NbaF",
				"stake": "16211222444669702135933673463207",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "01node.pool.f863973.m0",
				"public_key": "ed25519:3iNqnvBgxJPXCxu6hNdvJso1PEAc1miAD35KQMBCA3aL",
				"stake": "11176821118717456771315953721266",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "fastvalidator.pool.f863973.m0",
				"public_key": "ed25519:93EQCbHLEY6cMuxDNe8LysWPy8zv5VsoqvHppMbMndpZ",
				"stake": "10598519821992269587094887938586",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "kiln.pool.f863973.m0",
				"public_key": "ed25519:Bq8fe1eUgDRexX2CYDMhMMQBiN13j8vTAVFyTNhEfh1W",
				"stake": "7470359030070502795722434017080",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "stakely_v2.pool.f863973.m0",
				"public_key": "ed25519:7BanKZKGvFjK5Yy83gfJ71vPhqRwsDDyVHrV2FMJCUWr",
				"stake": "5539984478778409079274412314443",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "fastvalidator2.pool.f863973.m0",
				"public_key": "ed25519:4BYnfLhhvNkcDe6U4W43uAqBXDaxM6DcN3YAbLKNUWSh",
				"stake": "5305152511612693872683364078590",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "fastvalidator1.pool.f863973.m0",
				"public_key": "ed25519:GSeKR7hJrgfBJ4FjS4GwQYaQzcVhuDun3PcjWZh4nGpT",
				"stake": "5294854669987962601093008353993",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "chorusone.pool.f863973.m0",
				"public_key": "ed25519:3TkUuDpzrq75KtJhkuLfNNJBPHR5QEWpDxrter3znwto",
				"stake": "3832983942424293301319485066620",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "everstake.pool.f863973.m0",
				"public_key": "ed25519:4LDN8tZUTRRc4siGmYCPA67tRyxStACDchdGDZYKdFsw",
				"stake": "3426510612590284723534740848915",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "ni.pool.f863973.m0",
				"public_key": "ed25519:GfCfFkLk2twbAWdsS3tr7C2eaiHN3znSfbshS5e8NqBS",
				"stake": "3104309000394639023138702227876",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "foundryusa.pool.f863973.m0",
				"public_key": "ed25519:ABGnMW8c87ZKWxvZLLWgvrNe72HN7UoSf4cTBxCHbEE5",
				"stake": "2971434876176689081354111194088",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "chorus-one.pool.f863973.m0",
				"public_key": "ed25519:6LFwyEEsqhuDxorWfsKcPPs324zLWTaoqk4o6RDXN7Qc",
				"stake": "2701137886711820880744418684468",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "lunanova2.pool.f863973.m0",
				"public_key": "ed25519:9Jv6e9Kye4wM9EL1XJvXY8CYsLi1HLdRKnTzXBQY44w9",
				"stake": "2622618545437785136715521089346",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "stakesstone.pool.f863973.m0",
				"public_key": "ed25519:3aAdsKUuzZbjW9hHnmLWFRKwXjmcxsnLNLfNL4gP1wJ8",
				"stake": "1885844597972525233055555116008",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "pathrocknetwork.pool.f863973.m0",
				"public_key": "ed25519:CGzLGZEMb84nRSRZ7Au1ETAoQyN7SQXQi55fYafXq736",
				"stake": "1717066059294035141561843218976",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "dsrvlabs.pool.f863973.m0",
				"public_key": "ed25519:61ei2efmmLkeDR1CG6JDEC2U3oZCUuC2K1X16Vmxrud9",
				"stake": "1583076789418337934155466345470",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "bee1stake.pool.f863973.m0",
				"public_key": "ed25519:B7Mwy3sCCJ6GZzEojsKFXMjLQfVXPDC4Q1LjuHoZcyM6",
				"stake": "952175543126836190103726170469",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "bisontrails.pool.f863973.m0",
				"public_key": "ed25519:8g4P5EXyp2b2pfVMHY1QLfkRcY59hjPfWrFCKUWX3RmR",
				"stake": "784773514321136890208157331616",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "pennyvalidators.pool.f863973.m0",
				"public_key": "ed25519:HiHdwq9rxi9hyxaGkazDHbYu4XL1j3J4TjgHQioyhEva",
				"stake": "454246751367119221511607975024",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "nw.pool.devnet",
				"public_key": "ed25519:65XTtuthwFDL9LpK9FJystfEvJ6brtBpfYSnRMa5a2wN",
				"stake": "351796760649730627846279409552",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "leadnode.pool.f863973.m0",
				"public_key": "ed25519:CdP6CBFETfWYzrEedmpeqkR6rsJNeT22oUFn2mEDGk5i",
				"stake": "222919110100903924760392563095",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "blueprint.pool.f863973.m0",
				"public_key": "ed25519:DUfxa8EUaTQyVXgEm4NFCtiez7jsjbM3m838c7aRSEBn",
				"stake": "138079793355047795768517097405",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "cymac.pool.f863973.m0",
				"public_key": "ed25519:EzUKatz6stcg4pKA2HpwhQXhSDvef3Cxyo6zvsz87est",
				"stake": "112903081724858326049928307120",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "p2p-org.pool.f863973.m0",
				"public_key": "ed25519:5qyxefArHQfABdNv9ELuEiWcEo7DTzABM9LrMAKTCY3Z",
				"stake": "100198001398444504508422270154",
				"validator_stake_struct_version": "V1"
			},
			{
				"account_id": "a41.pool.f863973.m0",
				"public_key": "ed25519:Gzg8dYaeBe6ime9dsMKUFiRZeWLjQ3VHjBCbapjsCmUf",
				"stake": "55045849262927169777589487275",
				"validator_stake_struct_version": "V1"
			}
		],
		"prev_block_hash": "EqCBWBif1xyr6pq4Kvr6s4aPhEMRqBerfDVBJp4GDDUG"
	}
}

'''
'''--- nearx/Cargo.toml ---
[package]
description       = "A ZK light client for NEAR"
edition.workspace = true
name              = "near-light-clientx"
resolver          = "2"
version.workspace = true

[dependencies]
async-trait.workspace = true
borsh.workspace       = true
cfg-if                = "1.0.0"
ethers                = "2.0.11"
hex.workspace         = true
log.workspace         = true
pretty_assertions     = "1.4.0"
serde.workspace       = true

# Circuit related things
plonky2  = { git = "https://github.com/mir-protocol/plonky2.git" }
plonky2x = { git = "https://github.com/succinctlabs/succinctx.git" }

near-light-client-protocol.workspace = true
near-light-client-rpc.workspace      = true

[dev-dependencies]
borsh.workspace             = true
near-primitives.workspace   = true
pretty_env_logger.workspace = true
serde_json.workspace        = true
serial_test                 = "3"
test-utils.workspace        = true
tokio.workspace             = true

[features]
default = [ "testnet" ]

# FIXME: these features are not great - will be replaced by a full fledged operator
# Network features
mainnet = [  ]
testnet = [  ]

# Circuit features
sync   = [  ]
verify = [  ]

'''
'''--- nearx/contract/README.md ---
## Foundry

**Foundry is a blazing fast, portable and modular toolkit for Ethereum application development written in Rust.**

Foundry consists of:

-   **Forge**: Ethereum testing framework (like Truffle, Hardhat and DappTools).
-   **Cast**: Swiss army knife for interacting with EVM smart contracts, sending transactions and getting chain data.
-   **Anvil**: Local Ethereum node, akin to Ganache, Hardhat Network.
-   **Chisel**: Fast, utilitarian, and verbose solidity REPL.

## Documentation

https://book.getfoundry.sh/

## Usage

### Build

```shell
$ forge build
```

### Test

```shell
$ forge test
```

### Format

```shell
$ forge fmt
```

### Gas Snapshots

```shell
$ forge snapshot
```

### Anvil

```shell
$ anvil
```

### Deploy

```shell
$ forge script script/Counter.s.sol:CounterScript --rpc-url <your_rpc_url> --private-key <your_private_key>
```

### Cast

```shell
$ cast <subcommand>
```

### Help

```shell
$ forge --help
$ anvil --help
$ cast --help
```

'''
'''--- nearx/contract/foundry.toml ---
[profile.default]
fs_permissions = [ { access = "read", path = "./broadcast" } ]
gas_reports    = [ "*" ]
libs           = [ "lib" ]
optimizer      = true # This was breaking verification for some reason
optimizer-runs = 1000 # TODO: change when we properly release this
out            = "out"
solc_version   = "0.8.19"
src            = "src"

remappings = [
  "forge-std=lib/forge-std/src",
  "@openzeppelin/contracts=lib/openzeppelin-contracts/contracts",
  "@openzeppelin/contracts-upgradeable=lib/openzeppelin-contracts-upgradeable/contracts",
  "@openzeppelin/contracts@4.9.5=lib/openzeppelin-contracts/contracts",
  "@openzeppelin/contracts-upgradeable@4.9.5=lib/openzeppelin-contracts-upgradeable/contracts",
]

[profile.optimizer-details]
constant_optimizer = true
cse                = true
deduplicate        = true

'''
'''--- nearx/contract/slither.config.json ---
{
  "filter_paths": "lib"
}

'''
'''--- nearx/src/builder.rs ---
use near_light_client_protocol::{config::NUM_BLOCK_PRODUCER_SEATS, prelude::Itertools};
use plonky2x::prelude::*;
use pretty_assertions::assert_eq;

use crate::{
    merkle::{MerklePathVariable, NearMerkleTree},
    variables::{
        ApprovalMessage, BlockHeightVariable, BlockVariable, BpsApprovals, BpsArr,
        BuildEndorsement, CryptoHashVariable, HeaderVariable, ProofVariable, StakeInfoVariable,
        SyncedVariable, ValidatorStakeVariable,
    },
};

pub trait Ensure<L: PlonkParameters<D>, const D: usize> {
    fn ensure_not_already_verified(
        &mut self,
        head: &HeaderVariable,
        block_height: &BlockHeightVariable,
    ) -> BoolVariable;

    fn ensure_epoch_is_current_or_next(
        &mut self,
        head: &HeaderVariable,
        epoch_id: &CryptoHashVariable,
    ) -> BoolVariable;

    fn ensure_if_next_epoch_contains_next_bps(
        &mut self,
        head: &HeaderVariable,
        epoch_id: &CryptoHashVariable,
        next_bps: &BpsArr<ValidatorStakeVariable>,
    ) -> BoolVariable;

    fn validate_signatures<const LEN: usize>(
        &mut self,
        approvals: &BpsApprovals<LEN>,
        bps: &BpsArr<ValidatorStakeVariable, LEN>,
        approval_message: ApprovalMessage,
    ) -> StakeInfoVariable;

    fn ensure_stake_is_sufficient(&mut self, stake: &StakeInfoVariable) -> BoolVariable;

    fn ensure_next_bps_is_valid(
        &mut self,
        expected_hash: &CryptoHashVariable,
        next_bps_hash: Option<&CryptoHashVariable>,
    ) -> BoolVariable;

    fn ensure_block_hash_matches_outcome(
        &mut self,
        head: &HeaderVariable,
        outcome_proof_block_hash: &CryptoHashVariable,
    ) -> BoolVariable;

    fn ensure_block_hash_matches_outcome_hashed(
        &mut self,
        head: &CryptoHashVariable,
        outcome_proof_block_hash: &CryptoHashVariable,
    ) -> BoolVariable;

    fn verify_outcome<const OD: usize, const ORD: usize>(
        &mut self,
        expected: &CryptoHashVariable,
        outcome_proof: &MerklePathVariable<OD>,
        outcome_hash: &CryptoHashVariable,
        outcome_root_proof: &MerklePathVariable<ORD>,
    ) -> BoolVariable;

    fn verify_block<const BD: usize>(
        &mut self,
        expected: &CryptoHashVariable,
        block_proof: &MerklePathVariable<BD>,
        block_hash: &CryptoHashVariable,
    ) -> BoolVariable;

    fn assertx(&mut self, condition: BoolVariable);
}

impl<L: PlonkParameters<D>, const D: usize> Ensure<L, D> for CircuitBuilder<L, D> {
    fn ensure_not_already_verified(
        &mut self,
        head: &HeaderVariable,
        block_height: &BlockHeightVariable,
    ) -> BoolVariable {
        self.gt(*block_height, head.inner_lite.height)
    }

    fn ensure_epoch_is_current_or_next(
        &mut self,
        head: &HeaderVariable,
        epoch_id: &CryptoHashVariable,
    ) -> BoolVariable {
        let epoch_id = *epoch_id;
        let this = self.is_equal(epoch_id, head.inner_lite.epoch_id);
        let next = self.is_equal(epoch_id, head.inner_lite.next_epoch_id);
        self.or(this, next)
    }

    fn ensure_if_next_epoch_contains_next_bps(
        &mut self,
        head: &HeaderVariable,
        epoch_id: &CryptoHashVariable,
        next_bps: &BpsArr<ValidatorStakeVariable>,
    ) -> BoolVariable {
        let is_next_epoch = self.is_equal(head.inner_lite.next_epoch_id, *epoch_id);
        let is_not_empty = self.constant(next_bps.len() > 0);
        let ok_anyway = self._true();
        self.select(is_next_epoch, is_not_empty, ok_anyway)
    }

    fn validate_signatures<const LEN: usize>(
        &mut self,
        approvals_after_next: &BpsApprovals<LEN>,
        epoch_bps: &BpsArr<ValidatorStakeVariable, LEN>,
        approval_message: ApprovalMessage,
    ) -> StakeInfoVariable {
        assert_eq!(approvals_after_next.is_active.len(), LEN);
        assert_eq!(approvals_after_next.signatures.len(), LEN);
        assert_eq!(epoch_bps.data.len(), LEN);

        let messages = [approval_message; LEN];

        let mut pubkeys = vec![];
        let mut total_stake = self.zero();
        let mut approved_stake = self.zero();

        for i in 0..LEN {
            let vs = &epoch_bps.data[i];

            pubkeys.push(vs.public_key.clone());

            let maybe_add = self.add(approved_stake, vs.stake);
            approved_stake =
                self.select(approvals_after_next.is_active[i], maybe_add, approved_stake);
            total_stake = self.add(total_stake, vs.stake);
        }

        // TODO: what happens if a conditionally active signature fails?
        self.curta_eddsa_verify_sigs_conditional(
            approvals_after_next.is_active.clone(),
            None,
            ArrayVariable::new(messages.to_vec()),
            approvals_after_next.signatures.clone(),
            ArrayVariable::new(pubkeys),
        );

        StakeInfoVariable {
            total: total_stake,
            approved: approved_stake,
        }
    }

    fn ensure_stake_is_sufficient(&mut self, stake: &StakeInfoVariable) -> BoolVariable {
        // 2/3 stake
        let numerator = self.constant(2.into());
        let denominator = self.constant(3.into());

        let threshold = self.mul(stake.total, numerator);
        let approved = self.mul(stake.approved, denominator);
        self.gte(approved, threshold)
    }

    fn ensure_next_bps_is_valid(
        &mut self,
        expected_hash: &CryptoHashVariable,
        next_bps_hash: Option<&CryptoHashVariable>,
    ) -> BoolVariable {
        if let Some(next_bps) = next_bps_hash {
            self.is_equal(*next_bps, *expected_hash)
        } else {
            self._true()
        }
    }

    fn ensure_block_hash_matches_outcome(
        &mut self,
        head: &HeaderVariable,
        outcome_proof_block_hash: &CryptoHashVariable,
    ) -> BoolVariable {
        let hash = head.hash(self);
        self.is_equal(hash, *outcome_proof_block_hash)
    }

    fn ensure_block_hash_matches_outcome_hashed(
        &mut self,
        head_hash: &CryptoHashVariable,
        outcome_proof_block_hash: &CryptoHashVariable,
    ) -> BoolVariable {
        self.is_equal(*head_hash, *outcome_proof_block_hash)
    }

    fn verify_outcome<const OD: usize, const ORD: usize>(
        &mut self,
        expected: &CryptoHashVariable,
        outcome_proof: &MerklePathVariable<OD>,
        outcome_hash: &CryptoHashVariable,
        outcome_root_proof: &MerklePathVariable<ORD>,
    ) -> BoolVariable {
        let outcome_root = self.get_root_from_merkle_proof_hashed_leaf_unindex(
            &outcome_proof.path,
            &outcome_proof.indices,
            *outcome_hash,
        );

        let leaf = self.curta_sha256(&outcome_root.0 .0);

        let outcome_root = self.get_root_from_merkle_proof_hashed_leaf_unindex(
            &outcome_root_proof.path,
            &outcome_root_proof.indices,
            leaf,
        );
        self.is_equal(outcome_root, *expected)
    }

    fn verify_block<const BD: usize>(
        &mut self,
        expected: &CryptoHashVariable,
        block_proof: &MerklePathVariable<BD>,
        block_hash: &CryptoHashVariable,
    ) -> BoolVariable {
        let block_root = self.get_root_from_merkle_proof_hashed_leaf_unindex(
            &block_proof.path,
            &block_proof.indices,
            *block_hash,
        );
        self.is_equal(block_root, *expected)
    }

    fn assertx(&mut self, condition: BoolVariable) {
        let t = self._true();
        self.assert_is_equal(condition, t);
    }
}

pub trait Sync<L: PlonkParameters<D>, const D: usize> {
    fn sync(
        &mut self,
        head: &HeaderVariable,
        epoch_bps: &BpsArr<ValidatorStakeVariable>,
        next_block: &BlockVariable,
    ) -> SyncedVariable;

    fn reconstruct_approval_message(&mut self, next_block: &BlockVariable) -> ApprovalMessage;
}

impl<L: PlonkParameters<D>, const D: usize> Sync<L, D> for CircuitBuilder<L, D> {
    fn sync(
        &mut self,
        head: &HeaderVariable,
        epoch_bps: &BpsArr<ValidatorStakeVariable>,
        next_block: &BlockVariable,
    ) -> SyncedVariable {
        let a = self.ensure_not_already_verified(head, &next_block.header.inner_lite.height);
        self.assertx(a);

        let b = self.ensure_epoch_is_current_or_next(head, &next_block.header.inner_lite.epoch_id);
        self.assertx(b);

        let c = self.ensure_if_next_epoch_contains_next_bps(
            head,
            &next_block.header.inner_lite.epoch_id,
            &next_block.next_bps,
        );
        self.assertx(c);

        let approval = self.reconstruct_approval_message(next_block);
        let stake = self.validate_signatures(&next_block.approvals_after_next, epoch_bps, approval);
        let d = self.ensure_stake_is_sufficient(&stake);
        self.assertx(d);

        if next_block.next_bps.len() > 0 {
            // TODO: hashing bps in circut
            let e = self.ensure_next_bps_is_valid(
                &next_block.header.inner_lite.next_bp_hash,
                Some(&next_block.next_bps_hash),
            );
            self.assertx(e);
            assert!(next_block.next_bps.len() == NUM_BLOCK_PRODUCER_SEATS);
        }
        // FIXME: remove this, return the new head
        SyncedVariable {
            new_head: next_block.header.to_owned(),
            next_bps_epoch: next_block.header.inner_lite.next_epoch_id,
            next_bps: next_block.next_bps.to_owned(),
        }
    }

    fn reconstruct_approval_message(&mut self, next_block: &BlockVariable) -> ApprovalMessage {
        let next_header_hash = next_block.header.hash(self);
        let next_block_hash =
            self.curta_sha256_pair(next_block.next_block_inner_hash, next_header_hash);

        let should_hint = false;
        // TODO: decide if we should constrain this way or just hint in the manual
        // encodes
        if should_hint {
            let mut input_stream = VariableStream::new();
            input_stream.write(&next_block_hash);
            input_stream.write(&next_block.header.inner_lite.height);
            let output_stream = self.hint(input_stream, BuildEndorsement);
            output_stream.read::<ApprovalMessage>(self)
        } else {
            let mut bytes = vec![ByteVariable::zero(self)];
            bytes.extend_from_slice(&next_block_hash.as_bytes());
            let blocks_to_advance = self.constant::<U64Variable>(2u64);
            let height = self.add(blocks_to_advance, next_block.header.inner_lite.height);
            bytes.extend_from_slice(&to_le_bytes::<_, _, D, 8>(self, &height).0);
            let bytes: [ByteVariable; 41] = bytes.try_into().unwrap();
            BytesVariable(bytes)
        }
    }
}

pub trait Verify<L: PlonkParameters<D>, const D: usize> {
    fn verify(&mut self, proof: ProofVariable) -> BoolVariable;
}

impl<L: PlonkParameters<D>, const D: usize> Verify<L, D> for CircuitBuilder<L, D> {
    fn verify(&mut self, proof: ProofVariable) -> BoolVariable {
        let block_hash = proof.block_header.hash(self);

        let block_hash_matches = self.is_equal(block_hash, proof.outcome_proof_block_hash);

        let outcome_matches = self.verify_outcome(
            &proof.block_header.inner_lite.outcome_root,
            &proof.outcome_proof,
            &proof.outcome_hash,
            &proof.outcome_root_proof,
        );

        let block_matches =
            self.verify_block(&proof.head_block_root, &proof.block_proof, &block_hash);

        let comp = self.and(block_matches, outcome_matches);
        let verified = self.and(comp, block_hash_matches);
        self.assertx(verified);
        verified
    }
}

// TODO: test this and reuse for block header inner
fn to_le_bytes<L: PlonkParameters<D>, V: CircuitVariable, const D: usize, const N: usize>(
    b: &mut CircuitBuilder<L, D>,
    v: &V,
) -> BytesVariable<N> {
    let mut bytes = vec![];
    for target in v.targets() {
        let mut bits = b.api.split_le(target, 32);
        bits.reverse();
        let to_extend = bits
            .chunks(8)
            .rev()
            .map(|chunk| {
                let targets = chunk.iter().map(|b| b.target).collect_vec();
                ByteVariable::from_targets(&targets)
            })
            .collect_vec();
        bytes.extend(to_extend);
    }
    BytesVariable(bytes.try_into().unwrap())
}

#[cfg(test)]
mod tests {
    use near_light_client_protocol::{Protocol, StakeInfo};

    use self::assert_eq;
    use super::*;
    use crate::{test_utils::*, variables::*};

    #[test]
    fn test_header_hash() {
        let header = to_header(test_first().body);
        let expected_hash = header.hash().0;

        let define = |builder: &mut B| {
            let header = builder.read::<HeaderVariable>();
            let result = header.hash(builder);
            builder.write(result);
        };

        let writer = |input: &mut PI| {
            input.write::<HeaderVariable>(header.into());
        };

        let assertions = |mut output: PO| {
            let hash = output.read::<CryptoHashVariable>();
            assert_eq!(hash.0, expected_hash);
        };
        builder_suite(define, writer, assertions);
    }

    #[test]
    fn test_ensure_stake() {
        let approved_stakes = [200, 199, 201, 0];

        let define = |builder: &mut B| {
            let mut stake_info = builder.constant::<StakeInfoVariable>(
                StakeInfo {
                    total: 300,
                    approved: 0,
                }
                .into(),
            );

            for _ in 0..approved_stakes.len() {
                stake_info.approved = builder.read::<BalanceVariable>();
                let is_sufficient = builder.ensure_stake_is_sufficient(&stake_info);
                builder.write::<BoolVariable>(is_sufficient);
            }
        };
        let writer = |input: &mut PI| {
            for stake in approved_stakes {
                input.write::<BalanceVariable>(stake.into());
            }
        };
        let assertions = |mut output: PO| {
            assert!(output.read::<BoolVariable>(), "stake is equal to threshold");
            assert!(
                !output.read::<BoolVariable>(),
                "stake is less than threshold"
            );
            assert!(
                output.read::<BoolVariable>(),
                "stake is greater than threshold"
            );
            assert!(!output.read::<BoolVariable>(), "stake is zero");
        };
        builder_suite(define, writer, assertions);
    }

    #[test]
    fn test_ensure_height() {
        let test_header = to_header(test_next().body);
        let define = |builder: &mut B| {
            let header = builder.read::<HeaderVariable>();

            let early_block_height = builder.constant::<U64Variable>(1);
            let one = builder.one();
            let later_block_height = builder.add(header.inner_lite.height, one);

            let r = builder.ensure_not_already_verified(&header, &early_block_height);
            builder.write::<BoolVariable>(r);

            let r = builder.ensure_not_already_verified(&header, &later_block_height);
            builder.write::<BoolVariable>(r);
        };
        let writer = |input: &mut PI| {
            input.write::<HeaderVariable>(test_header.into());
        };
        let assertions = |mut output: PO| {
            assert!(!output.read::<BoolVariable>(), "too early");
            assert!(output.read::<BoolVariable>(), "height is later");
        };
        builder_suite(define, writer, assertions);
    }

    #[test]
    fn test_ensure_next_bps() {
        let (header, bps, _) = testnet_state();
        let bps_hash = CryptoHash::hash_borsh(bps.clone());

        let define = |builder: &mut B| {
            let header = builder.read::<HeaderVariable>();
            let next_bps = builder.read::<BpsArr<ValidatorStakeVariable>>();

            let current =
                builder.ensure_epoch_is_current_or_next(&header, &header.inner_lite.epoch_id);
            builder.write::<BoolVariable>(current);
            let next =
                builder.ensure_epoch_is_current_or_next(&header, &header.inner_lite.next_epoch_id);
            builder.write::<BoolVariable>(next);

            let contains_next_bps = builder.ensure_if_next_epoch_contains_next_bps(
                &header,
                &header.inner_lite.next_epoch_id,
                &next_bps,
            );
            builder.write::<BoolVariable>(contains_next_bps);

            let next_bps_hash = builder.constant::<CryptoHashVariable>(bps_hash.0.into());
            let is_valid = builder
                .ensure_next_bps_is_valid(&header.inner_lite.next_bp_hash, Some(&next_bps_hash));
            builder.write::<BoolVariable>(is_valid);
        };
        let writer = |input: &mut PI| {
            input.write::<HeaderVariable>(header.clone().into());
            input.write::<BpsArr<ValidatorStakeVariable>>(bps_to_variable(Some(bps)));
        };
        let assertions = |mut output: PO| {
            assert!(output.read::<BoolVariable>(), "epoch is current");
            assert!(output.read::<BoolVariable>(), "epoch is next");
            assert!(output.read::<BoolVariable>(), "next epoch has bps");
            assert!(output.read::<BoolVariable>(), "next bps is valid");
        };
        builder_suite(define, writer, assertions);
    }

    #[test]
    fn test_reconstruct_approval_msg() {
        let (_, _, next_block) = test_state();
        let define = |builder: &mut B| {
            let next_block = builder.read::<BlockVariable>();
            let os = builder.reconstruct_approval_message(&next_block);
            builder.write::<ApprovalMessage>(os);
        };
        let writer = |input: &mut PI| {
            input.write::<BlockVariable>(next_block.clone().into());
        };
        let assertions = |mut output: PO| {
            let created = output.read::<ApprovalMessage>();
            let msg = Protocol::reconstruct_approval_message(&next_block).unwrap();
            assert_eq!(msg, created);
        };
        builder_suite(define, writer, assertions);
    }

    #[test]
    fn test_raw_le_bytes() {
        let (_, _, next_block) = test_state();
        let define = |builder: &mut B| {
            let next_block = builder.read::<BlockVariable>();

            let mut bytes = vec![];
            for target in next_block.header.inner_lite.height.targets() {
                let mut bits = builder.api.split_le(target, 32);
                bits.reverse();
                let to_extend = bits
                    .chunks(8)
                    .rev()
                    .map(|chunk| {
                        let targets = chunk.iter().map(|b| b.target).collect_vec();
                        ByteVariable::from_targets(&targets)
                    })
                    .collect_vec();
                bytes.extend(to_extend);
            }
            builder.write::<BytesVariable<8>>(BytesVariable(bytes.try_into().unwrap()));
        };
        let writer = |input: &mut PI| {
            input.write::<BlockVariable>(next_block.clone().into());
        };
        let assertions = |mut output: PO| {
            let bytes = output.read::<BytesVariable<8>>();
            println!("{:?}", bytes);
            assert_eq!(bytes, next_block.inner_lite.height.to_le_bytes());
        };
        builder_suite(define, writer, assertions);
    }
}

/// These tests require either:
/// - A LOT of time if running in debug mode
/// - A LOT of RAM if running in release
///
/// TODO: CI for only beefy tests
#[cfg(test)]
mod beefy_tests {
    use serial_test::serial;

    use crate::{
        builder::{Ensure, Sync, Verify},
        test_utils::*,
        variables::*,
    };

    #[test]
    #[serial]
    #[ignore]
    fn beefy_builder_test_next_bps() {
        let (header, bps, _) = testnet_state();
        let bps_hash = CryptoHash::hash_borsh(bps.clone());

        let define = |builder: &mut B| {
            let header = builder.read::<HeaderVariable>();
            let next_bps = builder.read::<BpsArr<ValidatorStakeVariable>>();

            let current =
                builder.ensure_epoch_is_current_or_next(&header, &header.inner_lite.epoch_id);
            builder.write::<BoolVariable>(current);
            let next =
                builder.ensure_epoch_is_current_or_next(&header, &header.inner_lite.next_epoch_id);
            builder.write::<BoolVariable>(next);

            let contains_next_bps = builder.ensure_if_next_epoch_contains_next_bps(
                &header,
                &header.inner_lite.next_epoch_id,
                &next_bps,
            );
            builder.write::<BoolVariable>(contains_next_bps);

            let next_bps_hash = builder.constant::<CryptoHashVariable>(bps_hash.0.into());
            let is_valid = builder
                .ensure_next_bps_is_valid(&header.inner_lite.next_bp_hash, Some(&next_bps_hash));
            builder.write::<BoolVariable>(is_valid);
        };
        let writer = |input: &mut PI| {
            input.write::<HeaderVariable>(header.clone().into());
            input.write::<BpsArr<ValidatorStakeVariable>>(bps_to_variable(Some(bps)));
        };
        let assertions = |mut output: PO| {
            assert!(output.read::<BoolVariable>(), "epoch is current");
            assert!(output.read::<BoolVariable>(), "epoch is next");
            assert!(output.read::<BoolVariable>(), "next epoch has bps");
            assert!(output.read::<BoolVariable>(), "next bps is valid");
        };
        builder_suite(define, writer, assertions);
    }

    #[test]
    #[serial]
    #[ignore]
    fn beefy_builder_test_proof_blackbox() {
        let block_root =
            CryptoHash::from_str("WWrLWbWHwSmjtTn5oBZPYgRCuCYn6fkYVa4yhPWNK4L").unwrap();

        let define = |builder: &mut B| {
            let registered_proof = builder.read::<ProofVariable>();
            let proof_verified = builder.verify(registered_proof);
            builder.write::<BoolVariable>(proof_verified);
        };
        let writer = |input: &mut PI| {
            input.write::<ProofVariable>(
                near_light_client_protocol::Proof::Basic {
                    head_block_root: block_root,
                    proof: Box::new(fixture("old.json")),
                }
                .into(),
            );
        };
        let assertions = |mut output: PO| {
            assert!(output.read::<BoolVariable>(), "proof verified");
        };
        builder_suite(define, writer, assertions);
    }

    #[test]
    #[serial]
    #[ignore]
    fn beefy_builder_test_sync_across_epoch_boundaries() {
        let (head, next_bps, next_block) = test_state();

        let define = |builder: &mut B| {
            let head = builder.read::<HeaderVariable>();
            let bps = builder.read::<BpsArr<ValidatorStakeVariable>>();
            let next_block = builder.read::<BlockVariable>();
            let synced = builder.sync(&head, &bps, &next_block);
            builder.write::<SyncedVariable>(synced);
        };
        let writer = |input: &mut PI| {
            input.write::<HeaderVariable>(head.into());
            input.write::<BpsArr<ValidatorStakeVariable>>(bps_to_variable(Some(next_bps)));
            input.write::<BlockVariable>(next_block.clone().into());
        };
        let assertions = |mut output: PO| {
            let header = output.read::<SyncedVariable>();
            println!("header: {:?}", header);
        };
        builder_suite(define, writer, assertions);
    }

    #[test]
    #[serial]
    #[ignore]
    fn beefy_builder_test_bounded_signatures() {
        let (_, bps, next_block) = test_state();
        const BPS_AMT: usize = 15;

        let define = |builder: &mut B| {
            let bps = builder.read::<BpsArr<ValidatorStakeVariable, BPS_AMT>>();
            let next_block = builder.read::<BlockVariable>();

            let next_block_approvals = BpsApprovals {
                signatures: next_block.approvals_after_next.signatures[0..BPS_AMT]
                    .to_vec()
                    .into(),
                is_active: next_block.approvals_after_next.is_active[0..BPS_AMT]
                    .to_vec()
                    .into(),
            };

            let msg = builder.reconstruct_approval_message(&next_block);

            builder.validate_signatures(&next_block_approvals, &bps, msg);
        };
        let writer = |input: &mut PI| {
            input.write::<BpsArr<ValidatorStakeVariable, BPS_AMT>>(
                bps_to_variable(Some(bps.clone()))[0..BPS_AMT].into(),
            );
            input.write::<BlockVariable>(next_block.into());
        };
        let assertions = |mut _output: PO| {};
        builder_suite(define, writer, assertions);
    }
}

'''
'''--- nearx/src/hint.rs ---
use std::collections::HashMap;

use async_trait::async_trait;
use log::debug;
use near_light_client_protocol::{prelude::CryptoHash, Proof};
use near_light_client_rpc::{prelude::GetProof, LightClientRpc, NearRpcClient, Network};
use plonky2x::{frontend::hint::asynchronous::hint::AsyncHint, prelude::*};
use serde::{Deserialize, Serialize};

use crate::variables::{
    normalise_account_id, BlockVariable, CryptoHashVariable, HeaderVariable, ProofVariable,
    TransactionOrReceiptIdVariable,
};

#[derive(Debug, Clone, Deserialize, Serialize)]
pub struct FetchNextHeaderInputs(pub Network);

#[async_trait]
impl<L: PlonkParameters<D>, const D: usize> AsyncHint<L, D> for FetchNextHeaderInputs {
    async fn hint(
        &self,
        input_stream: &mut ValueStream<L, D>,
        output_stream: &mut ValueStream<L, D>,
    ) {
        let client = NearRpcClient::new(self.0);

        let h = input_stream.read_value::<CryptoHashVariable>().0;

        let next = client
            .fetch_latest_header(&CryptoHash(h))
            .await
            .expect("Failed to fetch header")
            .expect("Expected a header");

        output_stream.write_value::<BlockVariable>(next.into());
    }
}

impl FetchNextHeaderInputs {
    pub fn fetch<L: PlonkParameters<D>, const D: usize>(
        &self,
        b: &mut CircuitBuilder<L, D>,
        hash: &CryptoHashVariable,
    ) -> Option<BlockVariable> {
        let mut input_stream = VariableStream::new();
        input_stream.write::<CryptoHashVariable>(hash);

        let output_stream = b.async_hint(input_stream, self.clone());
        Some(output_stream.read::<BlockVariable>(b))
    }
}

#[derive(Debug, Clone, Deserialize, Serialize)]
pub struct FetchHeaderInputs(pub Network);

#[async_trait]
impl<L: PlonkParameters<D>, const D: usize> AsyncHint<L, D> for FetchHeaderInputs {
    async fn hint(
        &self,
        input_stream: &mut ValueStream<L, D>,
        output_stream: &mut ValueStream<L, D>,
    ) {
        let client = NearRpcClient::new(self.0);

        let h = input_stream.read_value::<CryptoHashVariable>().0;

        let header = client
            .fetch_header(&CryptoHash(h))
            .await
            .expect("Failed to fetch header");

        output_stream.write_value::<HeaderVariable>(header.into());
    }
}

impl FetchHeaderInputs {
    /// Fetches a header based on its known hash and witnesses the result.
    pub fn fetch<L: PlonkParameters<D>, const D: usize>(
        &self,
        b: &mut CircuitBuilder<L, D>,
        trusted_hash: &CryptoHashVariable,
    ) -> HeaderVariable {
        let mut input_stream = VariableStream::new();
        input_stream.write::<CryptoHashVariable>(trusted_hash);

        let output_stream = b.async_hint(input_stream, self.clone());
        let untrusted = output_stream.read::<HeaderVariable>(b);
        let untrusted_hash = untrusted.hash(b);
        b.assert_is_equal(*trusted_hash, untrusted_hash);
        untrusted
    }
}
// TODO: refactor into some client-like carrier for all hints that is serdeable
#[derive(Debug, Clone, Deserialize, Serialize)]
pub struct FetchProofInputs<const B: usize>(pub Network);

#[async_trait]
impl<L: PlonkParameters<D>, const D: usize, const B: usize> AsyncHint<L, D>
    for FetchProofInputs<B>
{
    async fn hint(
        &self,
        input_stream: &mut ValueStream<L, D>,
        output_stream: &mut ValueStream<L, D>,
    ) {
        let client = NearRpcClient::new(self.0);
        let block_merkle_root = input_stream.read_value::<CryptoHashVariable>().0;
        let last_verified = input_stream.read_value::<CryptoHashVariable>().0;

        let mut reqs = vec![];
        for _ in 0..B {
            let tx = input_stream.read_value::<TransactionOrReceiptIdVariable>();
            reqs.push(if tx.is_transaction {
                GetProof::Transaction {
                    transaction_hash: CryptoHash(tx.id.into()),
                    sender_id: normalise_account_id::<L::Field>(&tx.account),
                }
            } else {
                GetProof::Receipt {
                    receipt_id: CryptoHash(tx.id.into()),
                    receiver_id: normalise_account_id::<L::Field>(&tx.account),
                }
            });
        }

        let proofs = client
            .batch_fetch_proofs(&CryptoHash(last_verified), reqs)
            .await
            .into_iter()
            .map(|(k, p)| (k, p.expect("Failed to fetch proof")))
            .map(|(k, p)| {
                (
                    k,
                    Proof::Basic {
                        proof: Box::new(p),
                        head_block_root: CryptoHash(block_merkle_root),
                    },
                )
            })
            .collect::<HashMap<CryptoHash, Proof>>();
        debug!("Fetched {} proofs", proofs.len());

        assert_eq!(proofs.len(), B, "Invalid number of proofs");

        for (k, p) in proofs.into_iter() {
            output_stream.write_value::<CryptoHashVariable>(k.0.into());
            output_stream.write_value::<ProofVariable>(p.into());
        }
    }
}

impl<const N: usize> FetchProofInputs<N> {
    pub fn fetch<L: PlonkParameters<D>, const D: usize>(
        &self,
        b: &mut CircuitBuilder<L, D>,
        head: &HeaderVariable,
        reqs: &[TransactionOrReceiptIdVariable],
    ) -> ArrayVariable<ProofInputVariable, N> {
        let mut input_stream = VariableStream::new();

        input_stream.write::<CryptoHashVariable>(&head.inner_lite.block_merkle_root);
        input_stream.write::<CryptoHashVariable>(&head.hash(b));
        input_stream.write_slice::<TransactionOrReceiptIdVariable>(reqs);

        let output_stream = b.async_hint(input_stream, self.clone());
        let mut inputs = vec![];
        for _ in 0..N {
            inputs.push(ProofInputVariable {
                id: output_stream.read::<CryptoHashVariable>(b),
                proof: output_stream.read::<ProofVariable>(b),
            });
        }
        // Witness that each head block root in each proof is the same as the trusted
        // head
        inputs.iter().for_each(|x| {
            b.assert_is_equal(x.proof.head_block_root, head.inner_lite.block_merkle_root)
        });
        inputs.into()
    }
}

#[derive(CircuitVariable, Debug, Clone)]
pub struct ProofInputVariable {
    pub id: CryptoHashVariable,
    pub proof: ProofVariable,
}

#[cfg(test)]
mod tests {
    use super::*;
    use crate::{
        test_utils::{builder_suite, test_state, B, PI, PO},
        variables::{BlockVariableValue, HeaderVariable},
    };

    #[test]
    fn test_fetch_header() {
        let (header, _, nb) = test_state();

        let define = |b: &mut B| {
            let header = b.read::<HeaderVariable>();
            let hash = header.hash(b);
            let next_block =
                FetchNextHeaderInputs(near_light_client_rpc::Network::Mainnet).fetch(b, &hash);
            b.write::<BlockVariable>(next_block.unwrap());
        };
        let writer = |input: &mut PI| {
            input.write::<HeaderVariable>(header.into());
        };
        let assertions = |mut output: PO| {
            let inputs = output.read::<BlockVariable>();
            let nbh: BlockVariableValue<GoldilocksField> = nb.into();
            pretty_assertions::assert_eq!(format!("{:#?}", inputs), format!("{:#?}", nbh));
        };
        builder_suite(define, writer, assertions);
    }
}

'''
'''--- nearx/src/lib.rs ---
pub use plonky2x::{self, backend::circuit::Circuit, prelude::*};
pub use sync::SyncCircuit;
pub use verify::VerifyCircuit;

/// Building blocks injected into the CircuitBuilder
mod builder;
mod hint;
/// Unprefixed merkle tree without collision resistance
mod merkle;
mod variables;

/// Circuits for use by the operator
pub mod sync;
pub mod verify;

#[cfg(test)]
mod test_utils;

'''
'''--- nearx/src/main.rs ---
#[cfg(any(feature = "sync", feature = "verify"))]
use near_light_clientx::plonky2x::backend::function::Plonky2xFunction;

// Testnet, FIXME: this is error prone, use something else
#[allow(dead_code)]
const NETWORK: usize = 1;

// TODO: make this use a nicer API for use by the prover.
// TODO: perpetually sync, use queue etc
fn main() {
    cfg_if::cfg_if! {
        if #[cfg(feature = "sync")] {
            use near_light_clientx::SyncCircuit;
            SyncCircuit::<NETWORK>::entrypoint();
        } else if #[cfg(feature = "verify")] {
            const PROOF_AMT: usize = 128;
            const PROOF_BATCH_SIZE: usize = 4;

            assert!(PROOF_AMT % PROOF_BATCH_SIZE == 0);
            assert!((PROOF_AMT / PROOF_BATCH_SIZE).is_power_of_two());

            use near_light_clientx::VerifyCircuit;
            VerifyCircuit::<PROOF_AMT, PROOF_BATCH_SIZE, NETWORK>::entrypoint();
        } else {
            panic!("No circuit feature enabled");
        }
    }
}

'''
'''--- nearx/src/merkle.rs ---
use near_light_client_protocol::{merkle_util::MerklePath, prelude::Itertools};
use plonky2x::prelude::*;

/// This is an unprefixed merkle tree without collision resistance, this should
/// probably adapt the tendermint tree or introduce this functionality to
/// succinct's simple tree
pub trait NearMerkleTree {
    fn get_root_from_merkle_proof_hashed_leaf_unindex<const PROOF_DEPTH: usize>(
        &mut self,
        proof: &ArrayVariable<Bytes32Variable, PROOF_DEPTH>,
        path_indices: &ArrayVariable<BoolVariable, PROOF_DEPTH>,
        leaf: Bytes32Variable,
    ) -> Bytes32Variable;
    fn inner_hash(&mut self, left: &Bytes32Variable, right: &Bytes32Variable) -> Bytes32Variable;
}

impl<L: PlonkParameters<D>, const D: usize> NearMerkleTree for CircuitBuilder<L, D> {
    fn get_root_from_merkle_proof_hashed_leaf_unindex<const PROOF_DEPTH: usize>(
        &mut self,
        proof: &ArrayVariable<Bytes32Variable, PROOF_DEPTH>,
        path_indices: &ArrayVariable<BoolVariable, PROOF_DEPTH>,
        leaf: Bytes32Variable,
    ) -> Bytes32Variable {
        let mut hash_so_far = leaf;

        let default = self.constant::<Bytes32Variable>(INACTIVE_NODE.into());

        for i in 0..PROOF_DEPTH {
            let aunt = proof[i];
            let path_index = path_indices[i];

            let left_hash_pair = self.inner_hash(&hash_so_far, &aunt);
            let right_hash_pair = self.inner_hash(&aunt, &hash_so_far);

            let aunt_is_default = self.is_equal(aunt, default);

            let hash = self.select(path_index, right_hash_pair, left_hash_pair);

            hash_so_far = self.select(aunt_is_default, hash_so_far, hash)
        }
        hash_so_far
    }
    fn inner_hash(&mut self, left: &Bytes32Variable, right: &Bytes32Variable) -> Bytes32Variable {
        let mut encoded_leaf = vec![];

        encoded_leaf.extend(left.as_bytes().to_vec());
        encoded_leaf.extend(right.as_bytes().to_vec());

        self.curta_sha256(&encoded_leaf)
    }
}

pub fn determine_direction(dir: &near_light_client_protocol::Direction) -> bool {
    match dir {
        near_light_client_protocol::Direction::Left => true,
        near_light_client_protocol::Direction::Right => false,
    }
}

const INACTIVE_NODE: [u8; 32] = [255; 32];

#[derive(CircuitVariable, Clone, Debug)]
pub struct MerklePathVariable<const MAX_LEN: usize> {
    pub path: ArrayVariable<Bytes32Variable, MAX_LEN>,
    pub indices: ArrayVariable<BoolVariable, MAX_LEN>,
}
impl<F: RichField, const MAX_LEN: usize> From<MerklePath> for MerklePathVariableValue<MAX_LEN, F> {
    fn from(path: MerklePath) -> Self {
        assert!(path.len() <= MAX_LEN, "merkle path too long");

        let mut indices = path
            .iter()
            .map(|x| &x.direction)
            .map(determine_direction)
            .collect_vec();

        indices.resize(MAX_LEN, Default::default());

        let mut path = path.iter().map(|x| x.hash.0.into()).collect_vec();
        path.resize(MAX_LEN, INACTIVE_NODE.into());

        Self { path, indices }
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use crate::{test_utils::*, variables::ProofVariable};

    #[test]
    #[ignore]
    fn beefy_test_path_is_ignored_if_default() {
        let block_root =
            CryptoHash::from_str("WWrLWbWHwSmjtTn5oBZPYgRCuCYn6fkYVa4yhPWNK4L").unwrap();

        let define = |b: &mut B| {
            let p = b.read::<ProofVariable>();
            let hash = p.block_header.hash(b);

            let root = b.get_root_from_merkle_proof_hashed_leaf_unindex(
                &p.block_proof.path,
                &p.block_proof.indices,
                hash,
            );
            let v = b.is_equal(root, p.head_block_root);

            b.write::<BoolVariable>(v);
        };
        let writer = |input: &mut PI| {
            input.write::<ProofVariable>(
                near_light_client_protocol::Proof::Basic {
                    head_block_root: block_root,
                    proof: Box::new(fixture("old.json")),
                }
                .into(),
            );
        };
        let assertions = |mut output: PO| {
            assert!(output.read::<BoolVariable>());
        };
        builder_suite(define, writer, assertions);
    }
}

'''
'''--- nearx/src/sync.rs ---
pub use plonky2x::{self, backend::circuit::Circuit, prelude::*};

use crate::{
    builder::Sync,
    hint::{FetchHeaderInputs, FetchNextHeaderInputs},
    variables::{BuildEndorsement, CryptoHashVariable, EncodeInner, HashBpsInputs},
};

// TODO: lazy sync
// TODO[Style]: Shared trait for protocol functionality between crate <> circuit
// TODO[Style]: macro to share all the same implementation with semantic type
// differences between protocol crate
// TODO: determine fees, allows integrators to charge
#[derive(Debug, Clone)]
pub struct SyncCircuit<const NETWORK: usize>;

impl<const NETWORK: usize> Circuit for SyncCircuit<NETWORK> {
    fn define<L: PlonkParameters<D>, const D: usize>(b: &mut CircuitBuilder<L, D>)
    where
        <<L as PlonkParameters<D>>::Config as plonky2::plonk::config::GenericConfig<D>>::Hasher:
            plonky2::plonk::config::AlgebraicHasher<<L as PlonkParameters<D>>::Field>,
    {
        let network = NETWORK.into();
        let fetch_header = FetchHeaderInputs(network);
        let fetch_next_header = FetchNextHeaderInputs(network);

        // TODO: we do need to be defensive to ensure that this is actually the trusted
        // header hash, do not allow anybody to provide this input.
        let trusted_header_hash = b.evm_read::<CryptoHashVariable>();

        // This is a very interesting trick to be able to get the BPS for the next epoch
        // without the need to store the BPS, we verify the hash of the BPS in the
        // circuit
        let header = fetch_header.fetch(b, &trusted_header_hash);
        let bps = fetch_next_header
            .fetch(b, &header.inner_lite.next_epoch_id)
            .unwrap()
            .next_bps;

        let bps_hash = HashBpsInputs.hash(b, &bps);
        b.assert_is_equal(header.inner_lite.next_bp_hash, bps_hash);
        b.watch(&bps_hash, "calculate_bps_hash");

        let next_block = fetch_next_header
            .fetch(b, &trusted_header_hash)
            .expect("Failed to fetch next block");

        let synced = b.sync(&header, &bps, &next_block);
        let synced_hash = synced.new_head.hash(b);
        b.evm_write::<CryptoHashVariable>(synced_hash);
    }

    fn register_generators<L: PlonkParameters<D>, const D: usize>(registry: &mut HintRegistry<L, D>)
    where
        <<L as PlonkParameters<D>>::Config as plonky2::plonk::config::GenericConfig<D>>::Hasher:
            plonky2::plonk::config::AlgebraicHasher<L::Field>,
    {
        registry.register_async_hint::<FetchHeaderInputs>();
        registry.register_async_hint::<FetchNextHeaderInputs>();
        registry.register_hint::<EncodeInner>();
        registry.register_hint::<BuildEndorsement>();
        registry.register_hint::<HashBpsInputs>();
    }
}

#[cfg(test)]
mod beefy_tests {
    use serial_test::serial;

    use super::*;
    use crate::test_utils::{builder_suite, testnet_state, B, NETWORK, PI, PO};

    #[test]
    #[serial]
    #[ignore]
    fn sync_e2e() {
        let (header, _, _) = testnet_state();
        let header = header.hash().0;

        let define = |b: &mut B| {
            SyncCircuit::<NETWORK>::define(b);
        };
        let writer = |input: &mut PI| {
            input.evm_write::<CryptoHashVariable>(header.into());
        };
        let assertions = |mut output: PO| {
            let hash = output.evm_read::<CryptoHashVariable>();
            println!("hash: {:?}", hash);
        };
        builder_suite(define, writer, assertions);
    }
}

'''
'''--- nearx/src/test_utils.rs ---
use std::fs;
pub use std::str::FromStr;

pub use near_primitives::hash::CryptoHash;
use plonky2x::backend::function::{BytesRequestData, ProofRequest};
pub use plonky2x::{
    backend::circuit::{PublicInput, PublicOutput},
    prelude::*,
};
pub use test_utils::*;

// Testnet Repr
pub const NETWORK: usize = 1;

pub type B<const D: usize = 2> = CircuitBuilder<DefaultParameters, D>;
pub type PI<const D: usize = 2> = PublicInput<DefaultParameters, D>;
pub type PO<const D: usize = 2> = PublicOutput<DefaultParameters, D>;

pub fn builder_suite<F, WriteInputs, Assertions>(
    define: F,
    writer: WriteInputs,
    assertions: Assertions,
) where
    F: FnOnce(&mut B),
    WriteInputs: FnOnce(&mut PI),
    Assertions: FnOnce(PO),
{
    logger();
    let mut builder = B::new();
    define(&mut builder);

    let circuit = builder.build();

    let mut inputs = circuit.input();
    writer(&mut inputs);

    let proof_req = match &inputs {
        PublicInput::Bytes(bytes) => Some(ProofRequest::<DefaultParameters, 2>::Bytes(
            plonky2x::backend::function::ProofRequestBase {
                release_id: "todo".to_string(),
                parent_id: None,
                files: None,
                data: BytesRequestData {
                    input: bytes.clone(),
                },
            },
        )),
        PublicInput::Elements(elements) => Some(ProofRequest::<DefaultParameters, 2>::Elements(
            plonky2x::backend::function::ProofRequestBase {
                release_id: "todo".to_string(),
                parent_id: None,
                files: None,
                data: plonky2x::backend::function::ElementsRequestData {
                    circuit_id: "todo".to_string(),
                    input: elements.clone(),
                },
            },
        )),
        _ => None,
    };
    if let Some(req) = proof_req {
        fs::write("../build/input.json", serde_json::to_string(&req).unwrap()).unwrap();
    }

    let (proof, output) = circuit.prove(&inputs);

    assertions(output.clone());

    circuit.verify(&proof, &inputs, &output);
}

#[allow(dead_code)]
pub fn mock_builder_suite<F, WriteInputs, Assertions>(
    define: F,
    writer: WriteInputs,
    assertions: Assertions,
) where
    F: FnOnce(&mut B),
    WriteInputs: FnOnce(&mut PI),
    Assertions: FnOnce(PO),
{
    pretty_env_logger::try_init().unwrap_or_default();

    let mut builder = B::new();
    define(&mut builder);

    let circuit = builder.mock_build();

    let mut inputs = circuit.input();
    writer(&mut inputs);

    let (witness, output) = circuit.mock_prove(&inputs);
    println!("Mock proof {:#?}", witness.full_witness());

    assertions(output.clone());
}

'''
'''--- nearx/src/variables.rs ---
use ethers::types::U256;
use log::{debug, trace};
use near_light_client_protocol::{
    config::{ACCOUNT_DATA_SEPARATOR, NUM_BLOCK_PRODUCER_SEATS},
    prelude::{AccountId, CryptoHash, Header, Itertools},
    BlockHeaderInnerLiteView, ED25519PublicKey, LightClientBlockView, Proof, PublicKey, Signature,
    StakeInfo, Synced, ValidatorStake, ValidatorStakeView, ValidatorStakeViewV1,
};
use near_light_client_rpc::prelude::GetProof;
use plonky2x::{
    frontend::{
        curta::ec::point::{CompressedEdwardsY, CompressedEdwardsYVariable},
        ecc::curve25519::ed25519::eddsa::{EDDSASignatureVariable, EDDSASignatureVariableValue},
        hint::simple::hint::Hint,
        vars::EvmVariable,
    },
    prelude::*,
};
use pretty_assertions::assert_eq;
use serde::{Deserialize, Serialize};

use crate::merkle::MerklePathVariable;

// TODO: remove any unused fields like account id etc?
/// TODO: check if BPS seats changes for testnet/mainnet

/// Type for omitting the size across the codebase for arrays that are the same
/// size as BPS
pub(crate) type BpsArr<T, const A: usize = NUM_BLOCK_PRODUCER_SEATS> = ArrayVariable<T, A>;

pub type CryptoHashVariable = Bytes32Variable;
pub type BlockHeightVariable = U64Variable;
pub type BalanceVariable = U128Variable;
pub type AccountIdVariable = BytesVariable<{ AccountId::MAX_LEN }>;
pub type AccountIdVariableValue<F> = <AccountIdVariable as CircuitVariable>::ValueType<F>;

#[derive(CircuitVariable, Clone, Debug)]
pub struct HeaderVariable {
    pub prev_block_hash: CryptoHashVariable,
    pub inner_rest_hash: CryptoHashVariable,
    pub inner_lite: HeaderInnerVariable,
}
impl<F: RichField> From<Header> for HeaderVariableValue<F> {
    fn from(header: Header) -> Self {
        Self {
            prev_block_hash: header.prev_block_hash.0.into(),
            inner_rest_hash: header.inner_rest_hash.0.into(),
            inner_lite: header.inner_lite.into(),
        }
    }
}
impl<F: RichField> From<LightClientBlockView> for HeaderVariableValue<F> {
    fn from(header: LightClientBlockView) -> Self {
        Self {
            prev_block_hash: header.prev_block_hash.0.into(),
            inner_rest_hash: header.inner_rest_hash.0.into(),
            inner_lite: header.inner_lite.into(),
        }
    }
}
impl HeaderVariable {
    pub(crate) fn hash<L: PlonkParameters<D>, const D: usize>(
        &self,
        b: &mut CircuitBuilder<L, D>,
    ) -> CryptoHashVariable {
        let inner_lite = self.inner_lite.hash(b);
        let lite_rest = b.curta_sha256_pair(inner_lite, self.inner_rest_hash);
        b.curta_sha256_pair(lite_rest, self.prev_block_hash)
    }
}
impl EvmVariable for HeaderVariable {
    fn encode<L: PlonkParameters<D>, const D: usize>(
        &self,
        builder: &mut CircuitBuilder<L, D>,
    ) -> Vec<ByteVariable> {
        let mut bytes = vec![];
        bytes.extend_from_slice(&self.prev_block_hash.encode(builder));
        bytes.extend_from_slice(&self.inner_rest_hash.encode(builder));
        bytes.extend_from_slice(&self.inner_lite.encode(builder));
        assert!(bytes.len() == 64 + INNER_ENCODED_LEN);
        debug!("encoded header {:?}", bytes.len());
        bytes
    }

    fn decode<L: PlonkParameters<D>, const D: usize>(
        builder: &mut CircuitBuilder<L, D>,
        bytes: &[ByteVariable],
    ) -> Self {
        assert!(bytes.len() == 64 + INNER_ENCODED_LEN);
        let prev_block_hash = CryptoHashVariable::decode(builder, &bytes[0..32]);
        let inner_rest_hash = CryptoHashVariable::decode(builder, &bytes[32..64]);
        let inner_lite = HeaderInnerVariable::decode(builder, &bytes[64..64 + INNER_ENCODED_LEN]);
        Self {
            prev_block_hash,
            inner_rest_hash,
            inner_lite,
        }
    }

    fn encode_value<F: RichField>(value: Self::ValueType<F>) -> Vec<u8> {
        let mut bytes = vec![];
        bytes.extend_from_slice(&CryptoHashVariable::encode_value::<F>(
            value.prev_block_hash,
        ));
        bytes.extend_from_slice(&CryptoHashVariable::encode_value::<F>(
            value.inner_rest_hash,
        ));
        bytes.extend_from_slice(&HeaderInnerVariable::encode_value::<F>(value.inner_lite));
        assert!(bytes.len() == 64 + INNER_ENCODED_LEN);
        debug!("encoded header value {:?}", bytes.len());
        bytes
    }

    fn decode_value<F: RichField>(bytes: &[u8]) -> Self::ValueType<F> {
        assert!(bytes.len() == 64 + INNER_ENCODED_LEN);
        let prev_block_hash = CryptoHashVariable::decode_value::<F>(&bytes[0..32]);
        let inner_rest_hash = CryptoHashVariable::decode_value::<F>(&bytes[32..64]);
        let inner_lite = HeaderInnerVariable::decode_value::<F>(&bytes[64..]);
        Self::ValueType {
            prev_block_hash,
            inner_rest_hash,
            inner_lite,
        }
    }
}

#[derive(CircuitVariable, Clone, Debug)]
pub struct HeaderInnerVariable {
    pub height: U64Variable,
    pub epoch_id: CryptoHashVariable,
    pub next_epoch_id: CryptoHashVariable,
    pub prev_state_root: CryptoHashVariable,
    pub outcome_root: CryptoHashVariable,
    pub timestamp: U64Variable,
    pub next_bp_hash: CryptoHashVariable,
    pub block_merkle_root: CryptoHashVariable,
}
impl<F: RichField> From<BlockHeaderInnerLiteView> for HeaderInnerVariableValue<F> {
    fn from(header: BlockHeaderInnerLiteView) -> Self {
        Self {
            height: header.height,
            epoch_id: header.epoch_id.0.into(),
            next_epoch_id: header.next_epoch_id.0.into(),
            prev_state_root: header.prev_state_root.0.into(),
            outcome_root: header.outcome_root.0.into(),
            // Maybe don't need this anymore
            timestamp: if header.timestamp > 0 {
                header.timestamp
            } else {
                header.timestamp_nanosec
            },
            next_bp_hash: header.next_bp_hash.0.into(),
            block_merkle_root: header.block_merkle_root.0.into(),
        }
    }
}
pub const INNER_ENCODED_LEN: usize = 208;
impl HeaderInnerVariable {
    pub(crate) fn encode_borsh<L: PlonkParameters<D>, const D: usize>(
        &self,
        b: &mut CircuitBuilder<L, D>,
    ) -> BytesVariable<INNER_ENCODED_LEN> {
        // TODO: doubt we can abi encode this
        let mut input_stream = VariableStream::new();
        input_stream.write(&self.height);
        input_stream.write(&self.epoch_id);
        input_stream.write(&self.next_epoch_id);
        input_stream.write(&self.prev_state_root);
        input_stream.write(&self.outcome_root);
        input_stream.write(&self.timestamp);
        input_stream.write(&self.next_bp_hash);
        input_stream.write(&self.block_merkle_root);

        let output_bytes = b.hint(input_stream, EncodeInner);
        output_bytes.read::<BytesVariable<INNER_ENCODED_LEN>>(b)
    }

    pub(crate) fn hash<L: PlonkParameters<D>, const D: usize>(
        &self,
        b: &mut CircuitBuilder<L, D>,
    ) -> CryptoHashVariable {
        let bytes = self.encode_borsh(b);
        b.curta_sha256(&bytes.0)
    }
}
impl EvmVariable for HeaderInnerVariable {
    fn encode<L: PlonkParameters<D>, const D: usize>(
        &self,
        builder: &mut CircuitBuilder<L, D>,
    ) -> Vec<ByteVariable> {
        let mut bytes = vec![];
        bytes.extend_from_slice(&self.height.encode(builder));
        bytes.extend_from_slice(&self.epoch_id.encode(builder));
        bytes.extend_from_slice(&self.next_epoch_id.encode(builder));
        bytes.extend_from_slice(&self.prev_state_root.encode(builder));
        bytes.extend_from_slice(&self.outcome_root.encode(builder));
        bytes.extend_from_slice(&self.timestamp.encode(builder));
        bytes.extend_from_slice(&self.next_bp_hash.encode(builder));
        bytes.extend_from_slice(&self.block_merkle_root.encode(builder));
        debug!("encoded inner: {:?}", bytes.len());
        assert_eq!(bytes.len(), INNER_ENCODED_LEN);
        bytes
    }

    fn decode<L: PlonkParameters<D>, const D: usize>(
        builder: &mut CircuitBuilder<L, D>,
        bytes: &[ByteVariable],
    ) -> Self {
        assert_eq!(bytes.len(), INNER_ENCODED_LEN);
        let height = U64Variable::decode(builder, &bytes[0..8]);
        let epoch_id = CryptoHashVariable::decode(builder, &bytes[8..40]);
        let next_epoch_id = CryptoHashVariable::decode(builder, &bytes[40..72]);
        let prev_state_root = CryptoHashVariable::decode(builder, &bytes[72..104]);
        let outcome_root = CryptoHashVariable::decode(builder, &bytes[104..136]);
        let timestamp = U64Variable::decode(builder, &bytes[136..144]);
        let next_bp_hash = CryptoHashVariable::decode(builder, &bytes[144..176]);
        let block_merkle_root = CryptoHashVariable::decode(builder, &bytes[176..INNER_ENCODED_LEN]);
        Self {
            height,
            epoch_id,
            next_epoch_id,
            prev_state_root,
            outcome_root,
            timestamp,
            next_bp_hash,
            block_merkle_root,
        }
    }

    fn encode_value<F: RichField>(value: Self::ValueType<F>) -> Vec<u8> {
        let mut bytes = vec![];
        bytes.extend_from_slice(&U64Variable::encode_value::<F>(value.height));
        bytes.extend_from_slice(&CryptoHashVariable::encode_value::<F>(value.epoch_id));
        bytes.extend_from_slice(&CryptoHashVariable::encode_value::<F>(value.next_epoch_id));
        bytes.extend_from_slice(&CryptoHashVariable::encode_value::<F>(
            value.prev_state_root,
        ));
        bytes.extend_from_slice(&CryptoHashVariable::encode_value::<F>(value.outcome_root));
        bytes.extend_from_slice(&U64Variable::encode_value::<F>(value.timestamp));
        bytes.extend_from_slice(&CryptoHashVariable::encode_value::<F>(value.next_bp_hash));
        bytes.extend_from_slice(&CryptoHashVariable::encode_value::<F>(
            value.block_merkle_root,
        ));
        debug!("encoded inner value: {:?}", bytes.len());
        assert_eq!(bytes.len(), INNER_ENCODED_LEN);
        bytes
    }

    fn decode_value<F: RichField>(bytes: &[u8]) -> Self::ValueType<F> {
        assert_eq!(bytes.len(), INNER_ENCODED_LEN);
        let height = U64Variable::decode_value::<F>(&bytes[0..8]);
        let epoch_id = CryptoHashVariable::decode_value::<F>(&bytes[8..40]);
        let next_epoch_id = CryptoHashVariable::decode_value::<F>(&bytes[40..72]);
        let prev_state_root = CryptoHashVariable::decode_value::<F>(&bytes[72..104]);
        let outcome_root = CryptoHashVariable::decode_value::<F>(&bytes[104..136]);
        let timestamp = U64Variable::decode_value::<F>(&bytes[136..144]);
        let next_bp_hash = CryptoHashVariable::decode_value::<F>(&bytes[144..176]);
        let block_merkle_root =
            CryptoHashVariable::decode_value::<F>(&bytes[176..INNER_ENCODED_LEN]);

        Self::ValueType {
            height,
            epoch_id,
            next_epoch_id,
            prev_state_root,
            outcome_root,
            timestamp,
            next_bp_hash,
            block_merkle_root,
        }
    }
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct EncodeInner;
impl<L: PlonkParameters<D>, const D: usize> Hint<L, D> for EncodeInner {
    fn hint(&self, input_stream: &mut ValueStream<L, D>, output_stream: &mut ValueStream<L, D>) {
        let mut bytes: Vec<u8> = vec![];
        let height = input_stream.read_value::<U64Variable>();
        let epoch_id = input_stream.read_value::<CryptoHashVariable>();
        let next_epoch_id = input_stream.read_value::<CryptoHashVariable>();
        let prev_state_root = input_stream.read_value::<CryptoHashVariable>();
        let outcome_root = input_stream.read_value::<CryptoHashVariable>();
        let timestamp = input_stream.read_value::<U64Variable>();
        let next_bp_hash = input_stream.read_value::<CryptoHashVariable>();
        let block_merkle_root = input_stream.read_value::<CryptoHashVariable>();

        bytes.extend_from_slice(&height.to_le_bytes());
        bytes.extend_from_slice(&epoch_id.0);
        bytes.extend_from_slice(&next_epoch_id.0);
        bytes.extend_from_slice(&prev_state_root.0);
        bytes.extend_from_slice(&outcome_root.0);
        bytes.extend_from_slice(&timestamp.to_le_bytes());
        bytes.extend_from_slice(&next_bp_hash.0);
        bytes.extend_from_slice(&block_merkle_root.0);

        assert_eq!(
            bytes.len(),
            INNER_ENCODED_LEN,
            "expected {} bytes, got {}",
            INNER_ENCODED_LEN,
            bytes.len()
        );

        let bytes: [u8; INNER_ENCODED_LEN] = bytes.try_into().unwrap();
        output_stream.write_value::<BytesVariable<INNER_ENCODED_LEN>>(bytes);
    }
}

#[derive(CircuitVariable, Clone, Debug)]
pub struct BlockVariable {
    pub header: HeaderVariable,
    pub next_block_inner_hash: CryptoHashVariable,
    pub next_bps: BpsArr<ValidatorStakeVariable>,
    pub approvals_after_next: BpsApprovals<NUM_BLOCK_PRODUCER_SEATS>,
    pub next_bps_hash: CryptoHashVariable,
}

impl<F: RichField> From<LightClientBlockView> for BlockVariableValue<F> {
    fn from(block: LightClientBlockView) -> Self {
        // TODO[Optimisation]: Constrain these in-circuit
        let next_bps_hash = block
            .next_bps
            .as_ref()
            .map(CryptoHash::hash_borsh)
            .unwrap_or_default()
            .0
            .into();

        let variable = Self {
            next_block_inner_hash: block.next_block_inner_hash.0.into(),
            header: block.clone().into(),
            next_bps: bps_to_variable(block.next_bps),
            approvals_after_next: block.approvals_after_next.into(),
            next_bps_hash,
        };
        assert_eq!(variable.next_bps.len(), NUM_BLOCK_PRODUCER_SEATS);
        assert_eq!(
            variable.approvals_after_next.is_active.len(),
            NUM_BLOCK_PRODUCER_SEATS
        );
        assert_eq!(
            variable.approvals_after_next.signatures.len(),
            NUM_BLOCK_PRODUCER_SEATS
        );
        variable
    }
}

#[derive(CircuitVariable, Clone, Debug)]
pub struct BpsApprovals<const AMT: usize> {
    pub is_active: BpsArr<BoolVariable, AMT>,
    pub signatures: BpsArr<EDDSASignatureVariable, AMT>,
}

impl<F: RichField, const AMT: usize> From<Vec<Option<Box<Signature>>>>
    for BpsApprovalsValue<AMT, F>
{
    fn from(mut approvals: Vec<Option<Box<Signature>>>) -> Self {
        approvals.resize(AMT, None);
        let (signatures, is_active) = approvals
            .into_iter()
            .take(AMT)
            .map(|s| {
                let is_active = s.is_some();
                let s: SignatureVariableValue<F> = s.into();

                (s.signature, is_active)
            })
            .unzip();

        Self {
            is_active,
            signatures,
        }
    }
}

pub(crate) fn bps_to_variable<F: RichField, T: Into<ValidatorStake>>(
    next_bps: Option<Vec<T>>,
) -> Vec<ValidatorStakeVariableValue<F>> {
    next_bps
        .map(|next_bps| {
            let mut bps = next_bps
                .into_iter()
                .take(NUM_BLOCK_PRODUCER_SEATS)
                .map(Into::<ValidatorStake>::into)
                .map(Into::<ValidatorStakeVariableValue<F>>::into)
                .collect_vec();
            bps.resize(NUM_BLOCK_PRODUCER_SEATS, Default::default());
            bps
        })
        .unwrap_or_else(|| vec![Default::default(); NUM_BLOCK_PRODUCER_SEATS])
}

#[derive(CircuitVariable, Clone, Debug)]
pub struct ValidatorStakeVariable {
    pub account_id: AccountIdVariable,
    pub public_key: PublicKeyVariable,
    pub stake: BalanceVariable,
}

const ACCOUNT_ID_PADDING_BYTE: u8 = ACCOUNT_DATA_SEPARATOR;
impl<F: RichField> From<ValidatorStake> for ValidatorStakeVariableValue<F> {
    fn from(vs: ValidatorStake) -> Self {
        let public_key = CompressedEdwardsY(vs.public_key().unwrap_as_ed25519().0);
        let stake = vs.stake().into();
        let account_id = pad_account_id(&vs.take_account_id());
        Self {
            account_id,
            public_key,
            stake,
        }
    }
}

pub(crate) fn pad_account_id(account_id: &AccountId) -> [u8; AccountId::MAX_LEN] {
    let account_id = account_id.as_str().as_bytes().to_vec();
    pad_account_bytes(account_id)
}

pub(crate) fn pad_account_bytes(mut account_id: Vec<u8>) -> [u8; AccountId::MAX_LEN] {
    account_id.resize(AccountId::MAX_LEN, ACCOUNT_ID_PADDING_BYTE);
    account_id.try_into().expect("invalid account bytes")
}

pub(crate) fn normalise_account_id<F: RichField>(
    account_id: &AccountIdVariableValue<F>,
) -> AccountId {
    let unpadded_bytes = account_id
        .split(|x| *x == ACCOUNT_ID_PADDING_BYTE)
        .collect_vec()[0];
    let account_str = String::from_utf8(unpadded_bytes.to_vec()).expect("invalid account bytes");
    trace!("account id: {}", account_str);
    account_str.parse().expect("invalid account id")
}

impl<F: RichField> From<ValidatorStakeVariableValue<F>> for ValidatorStakeView {
    fn from(val: ValidatorStakeVariableValue<F>) -> Self {
        let account_id = normalise_account_id::<F>(&val.account_id);
        let public_key = PublicKey::ED25519(ED25519PublicKey(val.public_key.0));
        ValidatorStakeView::V1(ValidatorStakeViewV1 {
            account_id,
            public_key,
            stake: val.stake.as_u128(),
        })
    }
}

impl<F: RichField> Default for ValidatorStakeVariableValue<F> {
    fn default() -> Self {
        let account_id: [u8; AccountId::MAX_LEN] = [0u8; AccountId::MAX_LEN];
        let public_key = CompressedEdwardsY::default();

        Self {
            account_id,
            public_key,
            stake: u128::default().into(),
        }
    }
}

pub type PublicKeyVariable = CompressedEdwardsYVariable;

#[derive(CircuitVariable, Clone, Debug)]
pub struct SignatureVariable {
    pub signature: EDDSASignatureVariable,
}

impl<F: RichField> From<Option<Box<Signature>>> for SignatureVariableValue<F> {
    fn from(sig: Option<Box<Signature>>) -> Self {
        sig.and_then(|s| match *s {
            Signature::ED25519(s) => Some(Self {
                signature: EDDSASignatureVariableValue {
                    r: CompressedEdwardsY(*s.r_bytes()),
                    s: U256::from_little_endian(s.s_bytes()),
                },
            }),
            // Silently ignores invalid signatures (ECDSA)
            // The reasoning being that ECDSA is being phased out and almost all validators
            // use EDDSA.
            // If we still need this, we should implement ECDSA.
            _ => None,
        })
        .unwrap_or_default()
    }
}

impl<F: RichField> Default for SignatureVariableValue<F> {
    fn default() -> Self {
        Self {
            signature: EDDSASignatureVariableValue {
                r: CompressedEdwardsY::default(),
                s: Default::default(),
            },
        }
    }
}

#[derive(CircuitVariable, Clone, Debug)]
pub struct ProofVariable {
    pub head_block_root: CryptoHashVariable,
    // TODO: constrain the outcome hash by borsh encoding in the circuit, not here
    pub outcome_hash: CryptoHashVariable,
    pub outcome_proof_block_hash: CryptoHashVariable,
    pub outcome_proof: MerklePathVariable<16>, // TODO: get real number here
    pub outcome_root_proof: MerklePathVariable<8>, // TODO: get real number here
    pub block_header: HeaderVariable,
    pub block_proof: MerklePathVariable<64>, // TODO: get real number here
}

impl<F> From<Proof> for ProofVariableValue<F>
where
    F: RichField,
{
    fn from(proof: Proof) -> Self {
        match proof {
            Proof::Basic {
                head_block_root,
                proof,
            } => Self {
                head_block_root: head_block_root.0.into(),
                outcome_hash: CryptoHash::hash_borsh(proof.outcome_proof.to_hashes())
                    .0
                    .into(),
                outcome_proof_block_hash: proof.outcome_proof.block_hash.0.into(),
                outcome_proof: proof.outcome_proof.proof.into(),
                outcome_root_proof: proof.outcome_root_proof.into(),
                block_header: proof.block_header_lite.into(),
                block_proof: proof.block_proof.into(),
            },
            Proof::Experimental(_) => todo!("Batch proving"),
        }
    }
}

#[derive(CircuitVariable, Clone, Debug)]
pub struct StakeInfoVariable {
    pub approved: BalanceVariable,
    pub total: BalanceVariable,
}

impl<F: RichField> From<StakeInfo> for StakeInfoVariableValue<F> {
    fn from(value: StakeInfo) -> Self {
        Self {
            approved: value.approved.into(),
            total: value.total.into(),
        }
    }
}

pub type ApprovalMessage = BytesVariable<41>;

// TODO: not sure these even need to be hints
#[derive(Clone, Debug, Serialize, Deserialize)]
pub struct BuildEndorsement;

impl<L: PlonkParameters<D>, const D: usize> Hint<L, D> for BuildEndorsement {
    fn hint(&self, input_stream: &mut ValueStream<L, D>, output_stream: &mut ValueStream<L, D>) {
        let mut bytes = vec![];
        let next_block_hash = input_stream.read_value::<CryptoHashVariable>();
        let next_block_height = input_stream.read_value::<U64Variable>();

        bytes.push(0u8);
        bytes.extend_from_slice(next_block_hash.as_bytes());
        bytes.extend_from_slice(&(next_block_height + 2).to_le_bytes());

        output_stream.write_value::<ApprovalMessage>(bytes.try_into().unwrap());
    }
}

#[derive(CircuitVariable, Clone, Debug)]
pub struct SyncedVariable {
    pub new_head: HeaderVariable,
    pub next_bps_epoch: CryptoHashVariable,
    pub next_bps: BpsArr<ValidatorStakeVariable>,
}

impl<F> From<Synced> for SyncedVariableValue<F>
where
    F: RichField,
{
    fn from(value: Synced) -> Self {
        let default_bps = vec![ValidatorStakeVariableValue::default(); NUM_BLOCK_PRODUCER_SEATS];
        Self {
            new_head: value.new_head.into(),
            next_bps_epoch: value
                .next_bps
                .as_ref()
                .map(|v| v.0 .0 .0.into())
                .unwrap_or_default(),
            next_bps: value
                .next_bps
                .map(|v| v.1.into_iter().map(Into::into).collect_vec())
                .unwrap_or(default_bps),
        }
    }
}

#[derive(Debug, Clone, Deserialize, Serialize)]
pub struct HashBpsInputs;

impl<L: PlonkParameters<D>, const D: usize> Hint<L, D> for HashBpsInputs {
    fn hint(&self, input_stream: &mut ValueStream<L, D>, output_stream: &mut ValueStream<L, D>) {
        let bps = input_stream.read_value::<BpsArr<ValidatorStakeVariable>>();
        // TODO: if we use a bitmask we wont need default checks
        let default_validator =
            ValidatorStakeVariableValue::<<L as PlonkParameters<D>>::Field>::default();

        let bps = bps
            .into_iter()
            .filter(|x| x.account_id != default_validator.account_id)
            .map(Into::<ValidatorStakeView>::into)
            .collect_vec();
        trace!("Bps to hash: {:#?}", bps);
        let hash = CryptoHash::hash_borsh(bps);
        debug!("Hash: {:#?}", hash);

        // TODO: figure out how to hash this in circuit
        // It's non trivial because the account id is padded to the max len
        output_stream.write_value::<CryptoHashVariable>(hash.0.into());
    }
}

impl HashBpsInputs {
    pub fn hash<L: PlonkParameters<D>, const D: usize>(
        self,
        b: &mut CircuitBuilder<L, D>,
        bps: &BpsArr<ValidatorStakeVariable>,
    ) -> CryptoHashVariable {
        let mut input_stream = VariableStream::new();
        input_stream.write::<BpsArr<ValidatorStakeVariable>>(bps);

        let output_stream = b.hint(input_stream, self);
        output_stream.read::<CryptoHashVariable>(b)
    }
}

// TODO: EVM these, maybe macro?
// TODO: try to optimise the size here, since this directly affects calldata on
// Eth, limiting queue size.
// What if we take it in the circuit, but pad/normalise in solidity at the last
// ACCOUNT_DATA_SEPARATOR, allowing less than MAX_LEN requests at the calldata
// side.
// Also, for DA, if we only did receipts then we can preconfigure the receiver
// to a configurable contract, this would emit 64 bytes from calldata, roughly
// 2/3 of the request size.
#[derive(CircuitVariable, Clone, Debug)]
pub struct TransactionOrReceiptIdVariable {
    pub is_transaction: BoolVariable,
    pub id: CryptoHashVariable,
    pub account: AccountIdVariable,
}

impl<F: RichField> From<GetProof> for TransactionOrReceiptIdVariableValue<F> {
    fn from(value: GetProof) -> Self {
        match value {
            GetProof::Transaction {
                transaction_hash,
                sender_id,
            } => Self {
                is_transaction: true,
                id: transaction_hash.0.into(),
                account: pad_account_id(&sender_id),
            },
            GetProof::Receipt {
                receipt_id,
                receiver_id,
            } => Self {
                is_transaction: false,
                id: receipt_id.0.into(),
                account: pad_account_id(&receiver_id),
            },
        }
    }
}

pub fn byte_from_bool<L: PlonkParameters<D>, const D: usize>(
    b: &mut CircuitBuilder<L, D>,
    bool: BoolVariable,
) -> ByteVariable {
    let zero = b._false();
    let mut bits = [zero; 8];
    bits[7] = bool;

    ByteVariable::from_be_bits(bits)
}

impl EvmVariable for TransactionOrReceiptIdVariable {
    fn encode<L: PlonkParameters<D>, const D: usize>(
        &self,
        builder: &mut CircuitBuilder<L, D>,
    ) -> Vec<ByteVariable> {
        let mut bytes = vec![];
        bytes.extend_from_slice(&byte_from_bool(builder, self.is_transaction).encode(builder));
        bytes.extend_from_slice(&self.id.encode(builder));
        bytes.extend_from_slice(&self.account.encode(builder));
        bytes
    }

    fn decode<L: PlonkParameters<D>, const D: usize>(
        builder: &mut CircuitBuilder<L, D>,
        bytes: &[ByteVariable],
    ) -> Self {
        let zero = builder.zero::<ByteVariable>();
        let is_receipt = builder.is_equal(bytes[0], zero);
        let is_transaction = builder.not(is_receipt);
        Self {
            is_transaction,
            id: CryptoHashVariable::decode(builder, &bytes[1..33]),
            account: AccountIdVariable::decode(builder, &bytes[33..33 + AccountId::MAX_LEN]),
        }
    }
    fn encode_value<F: RichField>(value: Self::ValueType<F>) -> Vec<u8> {
        let mut bytes = vec![value.is_transaction as u8];
        bytes.extend_from_slice(&CryptoHashVariable::encode_value::<F>(value.id));
        bytes.extend_from_slice(&AccountIdVariable::encode_value::<F>(pad_account_bytes(
            value.account.to_vec(),
        )));
        bytes
    }
    fn decode_value<F: RichField>(bytes: &[u8]) -> Self::ValueType<F> {
        assert_eq!(bytes.len(), 1 + 32 + AccountId::MAX_LEN);

        Self::ValueType {
            is_transaction: bytes[0] != 0,
            id: CryptoHashVariable::decode_value::<F>(&bytes[1..33]),
            account: AccountIdVariable::decode_value::<F>(&bytes[33..33 + AccountId::MAX_LEN]),
        }
    }
}
#[cfg(test)]
mod tests {
    use std::str::FromStr;

    use ::test_utils::CryptoHash;
    use near_light_client_protocol::prelude::Itertools;
    use near_primitives::types::TransactionOrReceiptId;

    use super::*;
    use crate::{
        test_utils::{builder_suite, B, PI, PO},
        variables::TransactionOrReceiptIdVariableValue,
    };

    #[test]
    fn test_serialise_tx() {
        fn tx(hash: &str, sender: &str) -> TransactionOrReceiptId {
            TransactionOrReceiptId::Transaction {
                transaction_hash: CryptoHash::from_str(hash).unwrap(),
                sender_id: sender.parse().unwrap(),
            }
        }
        fn rx(hash: &str, receiver: &str) -> TransactionOrReceiptId {
            TransactionOrReceiptId::Receipt {
                receipt_id: CryptoHash::from_str(hash).unwrap(),
                receiver_id: receiver.parse().unwrap(),
            }
        }

        let txs: Vec<TransactionOrReceiptIdVariableValue<GoldilocksField>> = vec![
            tx(
                "3z2zqitrXNYQs19z5tK5a4bZSxdx7baqzGFUyGAkW9Mz",
                "zavodil.testnet",
            ),
            rx(
                "9cVuYLKYF26QevZ315RLb9ArU3gbcgPc4LDRJfZQyZHo",
                "priceoracle.testnet",
            ),
        ]
        .into_iter()
        .map(Into::into)
        .collect_vec();

        let define = |b: &mut B| {
            let receipt = b.evm_read::<TransactionOrReceiptIdVariable>();
            b.evm_write::<TransactionOrReceiptIdVariable>(receipt);
            let tx = b.evm_read::<TransactionOrReceiptIdVariable>();
            b.evm_write::<TransactionOrReceiptIdVariable>(tx);
        };
        let writer = |input: &mut PI| {
            input.evm_write::<TransactionOrReceiptIdVariable>(txs[0].clone().into());
            input.evm_write::<TransactionOrReceiptIdVariable>(txs[1].clone().into());
        };
        let assertions = |mut output: PO| {
            println!("{:#?}", output.evm_read::<TransactionOrReceiptIdVariable>());
            println!("{:#?}", output.evm_read::<TransactionOrReceiptIdVariable>());
        };
        builder_suite(define, writer, assertions);
    }
}

'''
'''--- nearx/src/verify.rs ---
use near_light_client_protocol::prelude::Itertools;
pub use plonky2x::{self, backend::circuit::Circuit, prelude::*};
use plonky2x::{
    frontend::{hint::simple::hint::Hint, mapreduce::generator::MapReduceDynamicGenerator},
    prelude::plonky2::plonk::config::{AlgebraicHasher, GenericConfig},
    register_watch_generator,
};
use serde::{Deserialize, Serialize};

use crate::{
    builder::Verify,
    hint::{FetchHeaderInputs, FetchProofInputs, ProofInputVariable},
    variables::{byte_from_bool, CryptoHashVariable, EncodeInner, TransactionOrReceiptIdVariable},
};

pub type ProofMapReduceVariable<const B: usize> = ArrayVariable<ProofVerificationResultVariable, B>;

#[derive(CircuitVariable, Debug, Clone)]
pub struct ProofVerificationResultVariable {
    pub id: CryptoHashVariable,
    pub result: BoolVariable,
}

#[derive(Debug, Clone)]
pub struct VerifyCircuit<const N: usize, const B: usize, const NETWORK: usize = 1>;

impl<const N: usize, const B: usize, const NETWORK: usize> Circuit
    for VerifyCircuit<N, B, NETWORK>
{
    fn define<L: PlonkParameters<D>, const D: usize>(b: &mut CircuitBuilder<L, D>)
    where
        <<L as PlonkParameters<D>>::Config as GenericConfig<D>>::Hasher:
            AlgebraicHasher<<L as PlonkParameters<D>>::Field>,
    {
        // TODO: this is trusted, we should join the result of this to assert that the
        // light client did know about this header OR ensure in the circuit we knew
        // about this information, the contract should emit an event for the height so
        // it's easily queryable
        let trusted_header_hash = b.evm_read::<CryptoHashVariable>();
        let head = FetchHeaderInputs(NETWORK.into()).fetch(b, &trusted_header_hash);
        // TODO: check that the head.block_height was once known to the verifier if not
        // the checkpoint header

        let mut ids = vec![];
        for _ in 0..N {
            ids.push(b.evm_read::<TransactionOrReceiptIdVariable>());
        }

        let proofs = FetchProofInputs::<N>(NETWORK.into()).fetch(b, &head, &ids);

        // Init a default result for N
        let zero = b.constant::<CryptoHashVariable>([0u8; 32].into());
        let _false = b._false();
        // TODO: Introduce some active bitmask here to avoid the need for defaulting
        let default = ProofVerificationResultVariable {
            id: zero,
            result: _false,
        };

        // TODO: write some outputs here for each ID
        let output = b.mapreduce_dynamic::<ProofVerificationResultVariable, ProofInputVariable, ArrayVariable<ProofVerificationResultVariable, N>, Self, B, _, _>(
            default,
            proofs.data,
            |default, proofs, b| {
                let mut results = vec![];

                // TODO[Optimisation]: could parallelise these
                for ProofInputVariable { id, proof } in proofs.data {
                    // TODO: default identifiers should be ignored here:
                    let result = b.verify(proof);
                    results.push(ProofVerificationResultVariable { id, result });
                }

                results.resize(
                    N,
                    default,
                );

                results.into()
            },
            |_, l, r, b| MergeProofHint::<N>.merge(b, &l, &r),
        );
        b.watch_slice(&output.data, "output");

        // TODO: write the trusted_header_hash here for verification onchain
        for r in output.data {
            b.evm_write::<CryptoHashVariable>(r.id);
            let passed = byte_from_bool(b, r.result);
            b.evm_write::<ByteVariable>(passed);
        }
    }

    fn register_generators<L: PlonkParameters<D>, const D: usize>(registry: &mut HintRegistry<L, D>)
    where
        <<L as PlonkParameters<D>>::Config as GenericConfig<D>>::Hasher: AlgebraicHasher<L::Field>,
    {
        registry.register_async_hint::<FetchProofInputs<N>>();
        registry.register_hint::<MergeProofHint<N>>();
        registry.register_async_hint::<FetchHeaderInputs>();

        // We hash in verify
        registry.register_hint::<EncodeInner>();

        let dynamic_id = MapReduceDynamicGenerator::<L, (), (), (), Self, 1, D>::id();

        registry.register_simple::<MapReduceDynamicGenerator<
            L,
            ProofVerificationResultVariable,
            ProofInputVariable,
            ArrayVariable<ProofVerificationResultVariable, N>,
            Self,
            B,
            D,
        >>(dynamic_id);

        register_watch_generator!(registry, L, D, ProofVerificationResultVariable);
    }
}

// Hinting for this as it's taking too much effort to do it in a constrained way
// It's probably a security risk that we'd need to fix later since technically
// these can just be changed post-verification
//
// |ctx, mut left, right, b| {
// let mut r_heights = right.height_indices.data;
// let mut r_results = right.results.data;
//
// left.height_indices
//     .data
//     .iter_mut()
//     .zip(left.results.data.iter_mut())
//     .for_each(|(h, r)| {
//         let is_zero = b.is_equal(h.clone(), ctx.zero);
//         *h = b.select(is_zero, r_heights.pop().unwrap(), *h);
//         *r = b.select(is_zero, r_results.pop().unwrap(), *r);
//     });
//
// left
// },
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MergeProofHint<const N: usize>;

impl<L: PlonkParameters<D>, const D: usize, const N: usize> Hint<L, D> for MergeProofHint<N> {
    fn hint(&self, input_stream: &mut ValueStream<L, D>, output_stream: &mut ValueStream<L, D>) {
        let left = input_stream.read_value::<ProofMapReduceVariable<N>>();
        log::debug!("Left results: {:?}", left);

        let right = input_stream.read_value::<ProofMapReduceVariable<N>>();
        log::debug!("Right results: {:?}", right);

        let mut results = left
            .into_iter()
            .chain(right)
            .filter_map(|r| {
                if r.id.0 != [0u8; 32] && r.id.0 != [255u8; 32] {
                    Some(r)
                } else {
                    None
                }
            })
            .collect_vec();

        log::debug!("Merged results: {:?}", results);

        results.resize(
            N,
            ProofVerificationResultVariableValue::<L::Field> {
                id: [0u8; 32].into(),
                result: false,
            },
        );

        output_stream.write_value::<ProofMapReduceVariable<N>>(results);
    }
}

impl<const N: usize> MergeProofHint<N> {
    fn merge<L: PlonkParameters<D>, const D: usize>(
        self,
        b: &mut CircuitBuilder<L, D>,
        left: &ProofMapReduceVariable<N>,
        right: &ProofMapReduceVariable<N>,
    ) -> ProofMapReduceVariable<N> {
        let mut input_stream = VariableStream::new();
        input_stream.write::<ProofMapReduceVariable<N>>(left);
        input_stream.write::<ProofMapReduceVariable<N>>(right);

        let output_stream = b.hint(input_stream, self);
        output_stream.read::<ProofMapReduceVariable<N>>(b)
    }
}

#[cfg(test)]
mod beefy_tests {
    use std::str::FromStr;

    use near_light_client_protocol::prelude::Itertools;
    use near_primitives::types::TransactionOrReceiptId;
    use serial_test::serial;
    use test_utils::{fixture, CryptoHash};

    use super::*;
    use crate::{
        test_utils::{builder_suite, testnet_state, B, NETWORK, PI, PO},
        variables::TransactionOrReceiptIdVariableValue,
    };

    #[test]
    #[serial]
    #[ignore]
    fn verify_e2e_2x1() {
        let (header, _, _) = testnet_state();

        // TODO: test many configs of these
        const AMT: usize = 2;
        const BATCH: usize = 1;

        fn tx(hash: &str, sender: &str) -> TransactionOrReceiptId {
            TransactionOrReceiptId::Transaction {
                transaction_hash: CryptoHash::from_str(hash).unwrap(),
                sender_id: sender.parse().unwrap(),
            }
        }
        fn rx(hash: &str, receiver: &str) -> TransactionOrReceiptId {
            TransactionOrReceiptId::Receipt {
                receipt_id: CryptoHash::from_str(hash).unwrap(),
                receiver_id: receiver.parse().unwrap(),
            }
        }

        // TODO: test way more of these, pull the last 64 transactions and prove them
        let txs: Vec<TransactionOrReceiptIdVariableValue<GoldilocksField>> = vec![
            tx(
                "3z2zqitrXNYQs19z5tK5a4bZSxdx7baqzGFUyGAkW9Mz",
                "zavodil.testnet",
            ),
            rx(
                "9cVuYLKYF26QevZ315RLb9ArU3gbcgPc4LDRJfZQyZHo",
                "priceoracle.testnet",
            ),
        ]
        .into_iter()
        .map(Into::into)
        .collect_vec();

        assert_eq!(txs.len(), AMT);

        let define = |b: &mut B| {
            VerifyCircuit::<AMT, BATCH, NETWORK>::define(b);
        };
        let writer = |input: &mut PI| {
            input.evm_write::<CryptoHashVariable>(header.hash().0.into());
            for tx in txs {
                input.evm_write::<TransactionOrReceiptIdVariable>(tx.into());
            }
        };
        let assertions = |mut output: PO| {
            let mut results = vec![];
            for _ in 0..AMT {
                let id = output.evm_read::<CryptoHashVariable>();
                let result = output.evm_read::<ByteVariable>();
                results.push(ProofVerificationResultVariableValue::<GoldilocksField> {
                    id,
                    result: result != 0,
                });
            }
            println!("{:#?}", results);
        };
        builder_suite(define, writer, assertions);
    }

    // TODO: ignore flag as this test will likely be overkill
    // #[test]
    // #[serial]
    // #[ignore]
    #[allow(dead_code)] // Justification: huge test, takes 36 minutes. keep for local testing
    fn verify_e2e_128x4() {
        let (header, _, _) = testnet_state();

        const AMT: usize = 128;
        const BATCH: usize = 4;

        let txs = fixture::<Vec<TransactionOrReceiptId>>("ids.json")
            .into_iter()
            .take(AMT)
            .map(Into::<TransactionOrReceiptIdVariableValue<GoldilocksField>>::into)
            .collect_vec();

        assert_eq!(txs.len(), AMT);

        let define = |b: &mut B| {
            VerifyCircuit::<AMT, BATCH, NETWORK>::define(b);
        };
        let writer = |input: &mut PI| {
            input.evm_write::<CryptoHashVariable>(header.hash().0.into());
            for tx in txs {
                input.evm_write::<TransactionOrReceiptIdVariable>(tx.into());
            }
        };
        let assertions = |mut output: PO| {
            let mut results = vec![];
            for _ in 0..AMT {
                let id = output.evm_read::<CryptoHashVariable>();
                let result = output.evm_read::<ByteVariable>();
                results.push(ProofVerificationResultVariableValue::<GoldilocksField> {
                    id,
                    result: result != 0,
                });
            }
            println!("{:#?}", results);
        };
        builder_suite(define, writer, assertions);
    }
}

'''
'''--- rust-toolchain.toml ---
[toolchain]
# This specifies the version of Rust we use to build.
# Individual crates in the workspace may support a lower version, as indicated by `rust-version` field in each crate's `Cargo.toml`.
# The version specified below, should be at least as high as the maximum `rust-version` within the workspace.
channel    = "nightly-2023-12-31"
components = [ "rustfmt", "clippy" ]

'''
'''--- rustfmt.toml ---
# Justification: Rust will be moving to this going forward
group_imports = "StdExternalCrate"

# Justification: Just cleaner
imports_granularity = "Crate"

format_code_in_doc_comments = true
wrap_comments               = true

'''
'''--- scripts/build-circuit.sh ---
#!/usr/bin/env bash

export RUST_LOG=debug 

if [ "$1" != "sync" ] && [ "$1" != "verify" ]; then
  echo "Usage: $0 <sync|verify>"
  exit
fi

cargo build --bin near-light-clientx \
  --release \
  --features $1

mv -f target/release/near-light-clientx build/$1

TAILARGS="${@: 2}"

build/$1 build $TAILARGS

'''
'''--- scripts/fetch-deployment-info.sh ---
#!/usr/bin/env bash

if [ -z "$CIRCUIT" ]; then
  export CIRCUIT=Verify
fi

if [ -z "$VERSION" ]; then
  export VERSION=v0.0.3
fi

echo "Getting deployments"
(cd "api/NEAR Light Client" && npx -y @usebruno/cli run "Succinct/Get Deployments.bru" --env testnet -o /tmp/result.json)

RESULT=$(cat /tmp/result.json | jq '.results[0].response.data')
echo "Deployments: $RESULT"

echo "Filtering deployments"
export DEPLOYMENTSTR=$(echo $RESULT | \
  jq \
  ".[] | select(.edges.release.name | contains(\"$CIRCUIT\") and contains(\"$VERSION\"))")

echo "Deployment: $DEPLOYMENTSTR"

'''
'''--- scripts/forge-script.sh ---
#!/usr/bin/env bash

if [ ! -f ../.env ]
then
  export $(cat .env | grep -v '#' | sed 's/\r$//' | awk '/=/ {print $1}' )
fi

export VERSION="${VERSION:-v0.0.3}"
export ETH_RPC="${ETH_RPC:-https://rpc.sepolia.eth.gateway.fm}"
export NEAR_CHECKPOINT_HEADER_HASH="${NEAR_CHECKPOINT_HEADER_HASH:=0x63b87190ffbaa36d7dab50f918fe36f70ab26910a0e9d797161e2356561598e3}"
export CHAIN_ID=${CHAIN_ID:=11155111}

if [ -z "$ETH_PRIVATE_KEY" ]; then
  echo "You need to set ETH_PRIVATE_KEY"
  exit 1
fi

function script() {
  if [ -z "$SKIP_BROADCAST" ];then
    TAIL="--broadcast"
  fi

  if [ -z "$SKIP_VERIFY" ]; then
    TAIL="$TAIL --verify --verifier etherscan"
  fi

  if [ ! -z "$IS_LEGACY" ]; then
    TAIL="$TAIL --legacy"
  fi

  (
    cd ./nearx/contract && \
      forge script $1 \
      --rpc-url $ETH_RPC \
      --private-key $ETH_PRIVATE_KEY \
      $TAIL
  )
}

function pullDeployment() {
  echo "Getting deployments"
  (cd "api/NEAR Light Client" && npx -y @usebruno/cli run "Succinct/Get Deployments.bru" --env testnet -o /tmp/result.json)
  RESULT=$(cat /tmp/result.json | jq '.results[0].response.data')
  RESULT=$(echo $RESULT | jq -r "[.[] | select(.chain_id == $CHAIN_ID)]")
  echo $RESULT
}

function extractInfo() {
  echo $RESULT | \
    jq -r \
    ".[] | select(.edges.release.name | contains(\"$1\") and contains(\"$VERSION\"))"
}

function init() {
  pullDeployment
  S_INFO=$(extractInfo Sync)
  V_INFO=$(extractInfo Verify)

  export GATEWAY_ID=${GATEWAY_ID:-$(echo $S_INFO | jq -r .gateway)}
  export SYNC_FUNCTION_ID=$(echo $S_INFO | jq -r .function_id)
  export VERIFY_FUNCTION_ID=$(echo $V_INFO | jq -r .function_id)

  echo $GATEWAY_ID
  echo $SYNC_FUNCTION_ID
  echo $VERIFY_FUNCTION_ID
  # TODO: could test chain_id here too to make sure we arent botching the releases
}

case "${1,,}" in
'deploy')
  script Deploy
;;
'initialise')
  init
  script Initialise
;;
'update-params')
  init
  SKIP_VERIFY=true script UpdateParams 
;;
'upgrade')
  script Upgrade
;;
'request-sync')
  script RequestSync
;;
'request-verify')
  script RequestVerify
;;
*)
  echo "Falling back to script: $@"
  script $1
;;
esac

'''
'''--- scripts/prove-circuit.sh ---
#!/usr/bin/env bash

export RUST_LOG=debug

if [ "$1" != "sync" ] && [ "$1" != "verify" ]; then
  echo "Usage: $0 <sync|verify>"
  exit
fi

# If INPUT is not set, set it to input.json
if [ -z "$INPUT" ]; then
  INPUT="input.json"
fi

TAILARGS="${@: 2}"

# Append the rest of the arguments to this command
build/$1 prove $INPUT $TAILARGS

'''
'''--- statelessnet.toml ---
catchup       = true
host          = "0.0.0.0:3030"
network       = "Statelessnet"
starting_head = "HqbXSLFKKvNiqruwkYj2pittRZJyXuBKHRWTVHRVcwEb"
state_path    = "statelessnetstate.db"

'''
'''--- succinct.json ---
{
    "entrypoints": [
        {
            "name": "sync",
            "framework": "plonky2x",
            "baseDir": ".",
            "buildCommand": "scripts/build-circuit.sh sync",
            "proveCommand": "RUST_LOG=debug ./build/sync prove input.json",
            "requiredArtifacts": [
                "sync"
            ]
        },
        {
            "name": "verify",
            "framework": "plonky2x",
            "baseDir": ".",
            "buildCommand": "scripts/build-circuit.sh verify",
            "proveCommand": "RUST_LOG=debug ./build/verify prove input.json",
            "requiredArtifacts": [
                "verify"
            ]
        }
    ]
}

'''
'''--- taplo.toml ---
[formatting]
align_comments = false
# Align consecutive entries vertically.
align_entries = true
# Maximum amount of allowed consecutive blank lines. This does not affect the whitespace at the end of the document, as it is always stripped.
allowed_blank_lines = 1
# Collapse arrays that don't exceed the maximum column width and don't contain comments.
array_auto_collapse = true
# Expand arrays to multiple lines that exceed the maximum column width.
array_auto_expand = true
# Maximum column width in characters, affects array expansion and collapse, this doesn't take whitespace into account.
# Note that this is not set in stone, and works on a best-effort basis.
column_width = 170
# Omit white space padding from single-line arrays
compact_arrays = false
# Alphabetically reorder keys that are not separated by empty lines.
reorder_keys = true

exclude = [ "vendor/**", "build/**", ".direnv/**" ]

'''
'''--- testnet.toml ---
catchup       = true
host          = "0.0.0.0:3030"
network       = "Testnet"
starting_head = "4bM5eXMDGxpFZXbWNT6TqX1HdZsWoHZ11KerCHJ8RKmU"
state_path    = "state.db"

'''