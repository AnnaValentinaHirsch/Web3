*GitHub Repository "meinharrd/stellar-helpers"*

'''--- README.md ---
# Stellar Helpers

A collection of scripts for managing Stellar accounts.

## Install

```bash
$ npm install
```

## Usage

**Generate a key pair:**
```bash
$ node stellar-keypair.js
```
Outputs a secret key followed by the corresponding public account ID, for example:
`SBXXXXXXXXXXXXYJWRXEER7W7ZVTFZBF3S3GJKXQ5PJNEARYS677QWVJ GAXXXXXXXXXXXXIUUI5OMTULLU5SYB3EDTDLJB54LGVHRW3QEPAYDS5B`

The key pair can be used for all Stellar networks (public, testnet, others).

**Activate an account by adding a starting balance from a funded account (testnet):**
```bash
$ node stellar-create-account.js --secret=SECRET_KEY_OF_FUNDING_ACCOUNT --starting_balance=1.1 --destination=ACCOUNT_ID_OF_RECIPIENT --memo="Creating account" --testnet
```
Outputs a transaction ID on success, for example:
`4a261121cca088f40e503de4a19ba10f216bdf083149fcc21e8934705b98b8ac`

**Make a payment of 10 XLM to an account (testnet):**
```bash
$ node stellar-payment.js --secret=SECRET_KEY_OF_SENDER --amount=10 --destination=ACCOUNT_ID_OF_RECIPIENT --testnet
```
Outputs a transaction ID on success.

**Make a payment of 4.50 EURT to an account:**
```bash
$ node stellar-payment.js --secret=SECRET_KEY_OF_SENDER --amount=4.5 --destination=ACCOUNT_ID_OF_RECIPIENT --asset_code=EURT --asset_issuer=GAP5LETOV6YIE62YAM56STDANPRDO7ZFDBGSNHJQIYGGKSMOZAHOOS2S --memo="4.50 EUR for coffee"
```
Outputs a transaction ID on success.

'''
'''--- lib/stellar.js ---
const StellarSdk = require('stellar-sdk')

const executeTransaction = async function (secret, operation, memo, testnet) {
  const url = testnet ? 'https://horizon-testnet.stellar.org/' : 'https://horizon.stellar.org/'
  const server = new StellarSdk.Server(url)

  try {
    const keypair = StellarSdk.Keypair.fromSecret(secret)
    const account = await server.loadAccount(keypair.publicKey())

    var options = {
      fee: 100,
      networkPassphrase: testnet ? StellarSdk.Networks.TESTNET : StellarSdk.Networks.PUBLIC
    }

    if (memo) {
      options.memo = StellarSdk.Memo.text(String(memo))
    }

    var transaction = new StellarSdk.TransactionBuilder(account, options)
      .addOperation(operation)
      .setTimeout(60)
      .build()

    transaction.sign(keypair)
    const result = await server.submitTransaction(transaction)

    console.log(result.id)
  } catch(err) {
    if (err.response && err.response.data && err.response.data.extras.result_codes.operations) {
      console.log('Error: ' + err.response.data.extras.result_codes.operations[0])
      process.exit(1)
    }

    console.log(err)
    process.exit(1)
  }
}

module.exports = {
  executeTransaction
}

'''
'''--- package.json ---
{
  "name": "stellar-helpers",
  "version": "0.0.1",
  "dependencies": {
    "minimist": "^1.2.5",
    "stellar-sdk": "^5.0.4"
  }
}

'''
'''--- stellar-create-account.js ---
const minimist = require('minimist')
const StellarSdk = require('stellar-sdk')
const stellar = require('./lib/stellar')

const args = minimist(process.argv.slice(2))

const usage = function () {
  console.log('Usage: node stellar-create-account.js --secret=secret --starting_balance=starting_balance --destination=destination [--memo=memo] [--testnet]')
}

if (!args.secret || !args.starting_balance || !args.destination) {
  usage()
  process.exit(1)
}

var options = {
  destination: args.destination,
  startingBalance: String(args.starting_balance)
}

const operation = StellarSdk.Operation.createAccount(options)

stellar.executeTransaction(args.secret, operation, args.memo, args.testnet)

'''
'''--- stellar-keypair.js ---
const StellarSdk = require('stellar-sdk')

const pair = StellarSdk.Keypair.random()

console.log(pair.secret(), pair.publicKey())

'''
'''--- stellar-payment.js ---
const minimist = require('minimist')
const StellarSdk = require('stellar-sdk')
const stellar = require('./lib/stellar')

const args = minimist(process.argv.slice(2))

const usage = function () {
  console.log('Usage: node stellar-payment.js --secret=secret --amount=amount --destination=destination [--asset_code=asset_code] [--asset_issuer=asset_issuer] [--memo=memo] [--testnet]')
}

if (!args.secret || !args.amount || !args.destination) {
  usage()
  process.exit(1)
}

var options = {
  destination: args.destination,
  amount: String(args.amount)
}

if (args.asset_code && args.asset_issuer) {
  options.asset = new StellarSdk.Asset(args.asset_code, args.asset_issuer)
} else {
  options.asset = StellarSdk.Asset.native()
}

const operation = StellarSdk.Operation.payment(options)

stellar.executeTransaction(args.secret, operation, args.memo, args.testnet)

'''