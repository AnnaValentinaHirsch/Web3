*GitHub Repository "4undRaiser/near-quotes-dapp"*

'''--- public/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>NEAR marketplace DApp</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

'''
'''--- public/robots.txt ---
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

'''
'''--- src/App.js ---
import React, { useEffect, useCallback, useState } from "react";
import { Container, Nav } from "react-bootstrap";
import { login, logout as destroy, accountBalance } from "./utils/near";
import Wallet from "./components/Wallet";
import { Notification } from "./components/utils/Notifications";
import Books from "./components/marketplace/Quotes";
import Cover from "./components/utils/Cover";
import "./App.css";

const App = function AppWrapper() {
  const account = window.walletConnection.account();

  const [balance, setBalance] = useState("0");

  const getBalance = useCallback(async () => {
    if (account.accountId) {
      setBalance(await accountBalance());
    }
  });

  useEffect(() => {
    getBalance();
  }, [getBalance]);

  return (
    <>
      <Notification />
      {account.accountId ? (
        <Container fluid="md">
          <Nav className="justify-content-end pt-3 pb-5">
            <Nav.Item>
              <Wallet
                address={account.accountId}
                amount={balance}
                symbol="NEAR"
                destroy={destroy}
              />
            </Nav.Item>
          </Nav>
          <main>
            <Books />
          </main>
        </Container>
      ) : (
        <Cover name="Near Quotes" login={login} coverImg="https://parade.com/.image/t_share/MTkwNTc1ODc5NDk1MjMwNTg5/life-quotes-happy.jpg" />
      )}
    </>
  );
};

export default App;

'''
'''--- src/App.test.js ---
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

'''
'''--- src/components/Wallet.js ---
import React from "react";
import { Dropdown, Stack, Spinner } from "react-bootstrap";

const Wallet = ({ address, amount, symbol, destroy }) => {
  if (address) {
    return (
      <>
        <Dropdown>
          <Dropdown.Toggle
            variant="light"
            align="end"
            id="dropdown-basic"
            className="d-flex align-items-center border rounded-pill py-1"
          >
            {amount ? (
              <>
                {amount} <span className="ms-1"> {symbol}</span>
              </>
            ) : (
              <Spinner animation="border" size="sm" className="opacity-25" />
            )}
          </Dropdown.Toggle>

          <Dropdown.Menu className="shadow-lg border-0">
            <Dropdown.Item
              href={`https://explorer.testnet.near.org/accounts/${address}`}
              target="_blank"
            >
              <Stack direction="horizontal" gap={2}>
                <i className="bi bi-person-circle fs-4" />
                <span className="font-monospace">{address}</span>
              </Stack>
            </Dropdown.Item>

            <Dropdown.Divider />
            <Dropdown.Item
              as="button"
              className="d-flex align-items-center"
              onClick={() => {
                destroy();
              }}
            >
              <i className="bi bi-box-arrow-right me-2 fs-4" />
              Disconnect
            </Dropdown.Item>
          </Dropdown.Menu>
        </Dropdown>
      </>
    );
  }

  return null;
};

export default Wallet;

'''
'''--- src/components/marketplace/AddQuote.js ---
import React, {useState} from "react";
import PropTypes from "prop-types";
import {Button, Modal, Form, FloatingLabel} from "react-bootstrap";

const AddQuote = ({save}) => {
    const [description, setDescription] = useState("");

    const isFormFilled = () => description;

    const [show, setShow] = useState(false);

    const handleClose = () => setShow(false);
    const handleShow = () => setShow(true);

    return (
        <>
            <Button
                onClick={handleShow}
                variant="dark"
                className="rounded-pill px-0"
                style={{width: "38px"}}
            >
                <i class="bi bi-plus"></i>
            </Button>
            <Modal show={show} onHide={handleClose} centered>
                <Modal.Header closeButton>
                    <Modal.Title>New Quote</Modal.Title>
                </Modal.Header>
                <Form>
                    <Modal.Body>

                        <FloatingLabel
                            controlId="inputDescription"
                            label="Description"
                            className="mb-3"
                        >
                            <Form.Control
                                as="textarea"
                                placeholder="description"
                                style={{height: "80px"}}
                                onChange={(e) => {
                                    setDescription(e.target.value);
                                }}
                            />
                        </FloatingLabel>

                    </Modal.Body>
                </Form>
                <Modal.Footer>
                    <Button variant="outline-secondary" onClick={handleClose}>
                        Close
                    </Button>
                    <Button
                        variant="dark"
                        disabled={!isFormFilled()}
                        onClick={() => {
                            save({
                                description,
                            });
                            handleClose();
                        }}
                    >
                        Save Quote
                    </Button>
                </Modal.Footer>
            </Modal>
        </>
    );
};

AddQuote.propTypes = {
    save: PropTypes.func.isRequired,
};

export default AddQuote;

'''
'''--- src/components/marketplace/Quote.js ---
import React from "react";
import PropTypes from "prop-types";
import {utils} from "near-api-js";
import {Card, Button, Col, Badge, Stack, Form} from "react-bootstrap";
import {useState} from "react";

const Quote = ({quote, likeQuote, saveComment, isOwner, changeQuote}) => {
    const {id, description, owner, likes, comments} = quote;

    const [ammount, setAmmount] = useState('');
    const [comment, setComment] = useState('');
    const [newDescription, setnewDescription] = useState('');

    const triggerLike = () => {
        likeQuote(id, ammount);
    };

    const triggerCreateComment = () => {
        saveComment(id, {commentDescription: comment});

    };

    const triggerChangeQuote = () => {
        changeQuote(id, newDescription);

    };

    return (
        <Col key={id}>
            <Card className=" h-100">
                <Card.Header>
                    <Stack direction="horizontal" gap={3}>
                        <span className="font-monospace text-secondary">{owner}</span>
                        <Badge bg="secondary" className="ms-auto">
                            {likes} likes
                        </Badge>
                    </Stack>
                </Card.Header>
                <div className=" ratio ratio-4x3">
                    <Card.Title>" {description} "</Card.Title>
                </div>
                <Card.Body className="d-flex  flex-column text-center">

                    {isOwner !== true && (
                        <>
                            <Form.Control
                                className={"pt-2 mb-1"}
                                type="text"
                                placeholder="Enter comment"
                                onChange={(e) => {
                                    setComment(e.target.value);
                                }}
                            />

                            <Button
                                variant="primary"
                                className={"mb-4"}
                                onClick={() => triggerCreateComment()}
                            >
                                Comment
                            </Button>
                        </>
                    )}

            {isOwner === true && (
                        <>
                            <Form.Control
                                className={"pt-2 mb-1"}
                                type="text"
                                placeholder="Enter new Description"
                                onChange={(e) => {
                                    setnewDescription(e.target.value);
                                }}
                            />

                            <Button
                                variant="primary"
                                className={"mb-4"}
                                onClick={() => triggerChangeQuote()}
                            >
                               Submit
                            </Button>
                        </>
                    )}

                    {isOwner !== true && (
                        <>
                            <Card.Text className="flex-grow-1 ">like this quote by sending some near to the
                                author</Card.Text>
                        </>
                    )}

                    {isOwner !== true && (
                        <>
                            <Form.Control
                                className={"pt-2 mb-1"}
                                type="text"
                                placeholder="Enter ammount"
                                onChange={(e) => {
                                    setAmmount(e.target.value);
                                }}
                            />

                            <Button
                                variant="primary"
                                className={"mb-4"}
                                onClick={() => triggerLike()}
                            >
                                Like
                            </Button>
                        </>
                    )}

                    <Card.Text className="flex-grow-1 "> <h3>COMMENTS</h3></Card.Text>
                            <hr className="solid"></hr>

                    {comments.map((com) => (
                        <Card.Text className="flex-grow-1">
                           description: <h4>{com.commentDescription}</h4>  <br/>
                            <hr className="solid"></hr>
                        </Card.Text>
                        
                    ))
                    }

                </Card.Body>
            </Card>
        </Col>
    );
};

Quote.propTypes = {
    quote: PropTypes.instanceOf(Object).isRequired,
    likeQuote: PropTypes.func.isRequired,
    saveComment: PropTypes.func.isRequired,
    changeQuote: PropTypes.func.isRequired,
};

export default Quote;
'''
'''--- src/components/marketplace/Quotes.js ---
import React, {useEffect, useState, useCallback} from "react";
import {toast} from "react-toastify";
import AddQuote from "./AddQuote";
import Quote from "./Quote";
import Loader from "../utils/Loader";
import {Row} from "react-bootstrap";

import {NotificationSuccess, NotificationError} from "../utils/Notifications";
import {
    getQuotess as getQuoteList,
    likeQuote,
    addComment,
    createQuote,
    editQuote,
} from "../../utils/marketplace";

const Quotes = () => {
    const [quotes, setQuotes] = useState([]);
    const [loading, setLoading] = useState(false);

    const account = window.walletConnection.account();

    // function to get the list of books
    const getQuotes = useCallback(async () => {
        try {
            setLoading(true);
            setQuotes(await getQuoteList());
        } catch (error) {
            console.log({error});
        } finally {
            setLoading(false);
        }
    });

    const addQuote = async (data) => {
        setLoading(true);
        try {
            await createQuote(data).then((resp) => {
                toast(<NotificationSuccess text="Quote has beeen added successfully."/>);
                getQuotes();
            });
        } catch (error) {
            console.log({error});
            toast(<NotificationError text="Failed to add quote."/>);
        } finally {
            setLoading(false);
        }
    };

    const createComment = async (id, comment) => {
        setLoading(true);
        try {
            await addComment(id, comment).then((resp) => {
                toast(<NotificationSuccess text="Comment has beeen added successfully."/>);
                getQuotes();
            });
        } catch (error) {
            console.log({error});
            toast(<NotificationError text="Failed to add comment"/>);
        } finally {
            setLoading(false);
        }
    };

    const changeQuote = async (id, newDescription) => {
        setLoading(true);
        try {
            await editQuote(id, newDescription).then((resp) => {
                toast(<NotificationSuccess text="Description has beeen edited successfully."/>);
                getQuotes();
            });
        } catch (error) {
            console.log({error});
            toast(<NotificationError text="Failed to edit description"/>);
        } finally {
            setLoading(false);
        }
    };

    //  function to initiate transaction
    const like = async (id, ammount) => {
        try {
            await likeQuote({
                id,
                ammount,
            }).then((resp) => {
                toast(<NotificationSuccess text="quote liked successfully"/>);
                getQuotes()
            });
        } catch (error) {
            toast(<NotificationError text="Failed to like quote."/>);
        } finally {
            setLoading(false);
        }
    };

    useEffect(() => {
        getQuotes();
    }, []);

    return (
        <>
            {!loading ? (
                <>
                    <div className="d-flex justify-content-between align-items-center mb-4">
                        <h1 className="fs-4 fw-bold mb-0">Near Quotes</h1>
                        <AddQuote save={addQuote}/>
                    </div>
                    <Row xs={1} sm={2} lg={3} className="g-3  mb-5 g-xl-4 g-xxl-5">
                        {quotes.map((_quote) => (
                            <Quote
                                quote={{
                                    ..._quote,
                                }}
                                likeQuote={like}
                                saveComment={createComment}
                                changeQuote={changeQuote}
                                isOwner={account.accountId === _quote.owner}
                            />
                        ))}
                    </Row>
                </>
            ) : (
                <Loader/>
            )}
        </>
    );
};

export default Quotes;

'''
'''--- src/components/utils/Cover.js ---
import React from "react";
import PropTypes from "prop-types";
import { Button } from "react-bootstrap";

const Cover = ({ name, login, coverImg }) => {
  if ((name, login, coverImg)) {
    return (
      <div
        className="d-flex justify-content-center flex-column text-center "
        style={{ background: "#000", minHeight: "100vh" }}
      >
        <div className="mt-auto text-light mb-5">
          <div
            className=" ratio ratio-1x1 mx-auto mb-2"
            style={{ maxWidth: "320px" }}
          >
            <img src={coverImg} alt="" />
          </div>
          <h1>{name}</h1>
          <p>Please connect your wallet to continue.</p>
          <Button
            onClick={login}
            variant="outline-light"
            className="rounded-pill px-3 mt-3"
          >
            Connect Wallet
          </Button>
        </div>
        <p className="mt-auto text-secondary">Powered by NEAR</p>
      </div>
    );
  }
  return null;
};

Cover.propTypes = {
  name: PropTypes.string,
};

Cover.defaultProps = {
  name: "",
};

export default Cover;

'''
'''--- src/components/utils/Loader.js ---
import React from "react";
import { Spinner } from "react-bootstrap";

const Loader = () => (
  <div className="d-flex justify-content-center">
    <Spinner animation="border" role="status" className="opacity-25">
      <span className="visually-hidden">Loading...</span>
    </Spinner>
  </div>
);
export default Loader;

'''
'''--- src/components/utils/Notifications.js ---
import React from "react";
import { ToastContainer } from "react-toastify";
import PropTypes from "prop-types";
import "react-toastify/dist/ReactToastify.css";

const Notification = () => (
  <ToastContainer
    position="bottom-center"
    autoClose={5000}
    hideProgressBar
    newestOnTop
    closeOnClick
    rtl={false}
    pauseOnFocusLoss
    draggable={false}
    pauseOnHover
  />
);

const NotificationSuccess = ({ text }) => (
  <div>
    <i className="bi bi-check-circle-fill text-success mx-2" />
    <span className="text-secondary mx-1">{text}</span>
  </div>
);

const NotificationError = ({ text }) => (
  <div>
    <i className="bi bi-x-circle-fill text-danger mx-2" />
    <span className="text-secondary mx-1">{text}</span>
  </div>
);

const Props = {
  text: PropTypes.string,
};

const DefaultProps = {
  text: "",
};

NotificationSuccess.propTypes = Props;
NotificationSuccess.defaultProps = DefaultProps;

NotificationError.propTypes = Props;
NotificationError.defaultProps = DefaultProps;

export { Notification, NotificationSuccess, NotificationError };

'''
'''--- src/index.js ---
import React from "react";
import ReactDOM from "react-dom";
import App from "./App";
import reportWebVitals from "./reportWebVitals";
import { initializeContract } from "./utils/near";
import "bootstrap-icons/font/bootstrap-icons.css";
import "bootstrap/dist/css/bootstrap.min.css";

window.nearInitPromise = initializeContract()
  .then(() => {
    ReactDOM.render(
      <React.StrictMode>
        <App />
      </React.StrictMode>,
      document.getElementById("root")
    );
  })
  .catch(console.error);

reportWebVitals();

'''
'''--- src/reportWebVitals.js ---
const reportWebVitals = (onPerfEntry) => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({
      getCLS, getFID, getFCP, getLCP, getTTFB,
    }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

'''
'''--- src/setupTests.js ---
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

'''
'''--- src/utils/config.js ---
const CONTRACT_NAME = process.env.CONTRACT_NAME || "nearquotecontracts.4undraisertestnet.testnet"; // put here a smart contracts' name

function environment(env) {
  switch (env) {
    case "mainnet":
      return {
        networkId: "mainnet",
        nodeUrl: "https://rpc.mainnet.near.org",
        contractName: CONTRACT_NAME,
        walletUrl: "https://wallet.near.org",
        helperUrl: "https://helper.mainnet.near.org",
        explorerUrl: "https://explorer.mainnet.near.org",
      };
    case "testnet":
      return {
        networkId: "testnet",
        nodeUrl: "https://rpc.testnet.near.org",
        contractName: CONTRACT_NAME,
        walletUrl: "https://wallet.testnet.near.org",
        helperUrl: "https://helper.testnet.near.org",
        explorerUrl: "https://explorer.testnet.near.org",
      };
    default:
      throw Error(`Unknown environment '${env}'.`);
  }
}

export default environment;

'''
'''--- src/utils/marketplace.js ---
import { v4 as uuid4 } from "uuid";
import { parseNearAmount } from "near-api-js/lib/utils/format";

const GAS = 100000000000000;

export function createQuote(quote) {
  quote.id = uuid4();
  return window.contract.addQuote({ quote });
}

export function addComment(id, comment) {
  return window.contract.addComment({id, comment }, GAS);
}

export function editQuote(id, newDescription) {
  return window.contract.changeQuote({id, newDescription }, GAS);
}

export function getQuotess() {
  return window.contract.getQuotes();
}

export async function likeQuote({ id, ammount }) {
  const _ammount = parseNearAmount(ammount + "");
  await window.contract.likeQuote({ id: id }, GAS, _ammount);
}

'''
'''--- src/utils/near.js ---
import environment from "./config";
import { connect, Contract, keyStores, WalletConnection } from "near-api-js";
import { formatNearAmount } from "near-api-js/lib/utils/format";

const nearEnv = environment("testnet");

export async function initializeContract() {
  const near = await connect(
    Object.assign(
      { deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() } },
      nearEnv
    )
  );
  window.walletConnection = new WalletConnection(near);
  window.accountId = window.walletConnection.getAccountId();
  window.contract = new Contract(
    window.walletConnection.account(),
    nearEnv.contractName,
    {
      // List here all view methods
      viewMethods: ["getQuote", "getQuotes", "getUserLikes"],
      // List call methods that change state
      changeMethods: ["addQuote", "likeQuote", "changeQuote", "addComment"],
    }
  );
}

export async function accountBalance() {
  return formatNearAmount(
    (await window.walletConnection.account().getAccountBalance()).total,
    2
  );
}

export async function getAccountId() {
  return window.walletConnection.getAccountId();
}

export function login() {
  window.walletConnection.requestSignIn(nearEnv.contractName);
}

export function logout() {
  window.walletConnection.signOut();
  window.location.reload();
}

'''