*GitHub Repository "nearprotocol/slips"*

'''--- .travis.yml ---
language: node_js

node_js:
  - "node"

before_script:
  - npm install -g markdownlint-cli

script:
  - markdownlint -c markdownlint.json *.md
  - ./check.sh

'''
'''--- README.md ---
# SatoshiLabs Improvement Proposals

[![Build Status](https://travis-ci.org/satoshilabs/slips.svg?branch=master)](https://travis-ci.org/satoshilabs/slips)

SatoshiLabs projects need a way how to document their technical decisions and features.
For some of them Bitcoin Improvement Proposal (BIP) is not a right place because
their range and implications are outside of the scope of Bitcoin and cryptocurrencies.

SLIP repository is an extension to Bitcoin Improvement Proposal (BIP) process
and contains the documents that are unsuitable for submission to BIP repository.

Each SLIP should provide a concise technical specification of the feature and a rationale for the feature.

| Number                    | Title                                                                 | Type          | Status   |
|---------------------------|-----------------------------------------------------------------------|---------------|----------|
| [SLIP-0000](slip-0000.md) | SLIP Template                                                         | Informational | Accepted |
| [SLIP-0010](slip-0010.md) | Universal private key derivation from master private key              | Standard      | Draft    |
| [SLIP-0011](slip-0011.md) | Symmetric encryption of key-value pairs using deterministic hierarchy | Standard      | Draft    |
| [SLIP-0012](slip-0012.md) | Public key encryption using deterministic hierarchy                   | Standard      | Draft    |
| [SLIP-0013](slip-0013.md) | Authentication using deterministic hierarchy                          | Standard      | Draft    |
| [SLIP-0014](slip-0014.md) | Stress Test Deterministic Wallet                                      | Informational | Draft    |
| [SLIP-0015](slip-0015.md) | Format for Bitcoin metadata and its encryption in HD wallets          | Standard      | Draft    |
| [SLIP-0016](slip-0016.md) | Format for password storage and its encryption                        | Standard      | Draft    |
| [SLIP-0017](slip-0017.md) | Elliptic Curve Diffie-Hellman using deterministic hierarchy           | Standard      | Draft    |
| [SLIP-0018](slip-0018.md) | reserved (CoSi)                                                       | Standard      | Draft    |
| [SLIP-0019](slip-0019.md) | Proof of Ownership                                                    | Standard      | Draft    |
| [SLIP-0020](slip-0020.md) | Proof of User Confirmation                                            | Standard      | Draft    |
| [SLIP-0021](slip-0021.md) | Hierarchical derivation of symmetric keys                             | Standard      | Draft    |
| [SLIP-0022](slip-0022.md) | FIDO2 Credential ID format for HD wallets                             | Standard      | Draft    |
| [SLIP-0023](slip-0023.md) | Cardano HD master node derivation from a master seed                  | Standard      | Draft    |
| [SLIP-0032](slip-0032.md) | Extended serialization format for BIP-32 wallets                      | Standard      | Draft    |
| [SLIP-0039](slip-0039.md) | Shamir's Secret-Sharing for Mnemonic Codes                            | Standard      | Draft    |
| [SLIP-0044](slip-0044.md) | Registered coin types for BIP-0044                                    | Standard      | Draft    |
| [SLIP-0048](slip-0048.md) | Deterministic key hierarchy for Graphene-based networks               | Standard      | Draft    |
| [SLIP-0077](slip-0077.md) | Deterministic blinding key derivation for Confidential Transactions   | Standard      | Draft    |
| [SLIP-0132](slip-0132.md) | Registered HD version bytes for BIP-0032                              | Standard      | Draft    |
| [SLIP-0173](slip-0173.md) | Registered human-readable parts for BIP-0173                          | Standard      | Draft    |

---

This work is licensed under a [Creative Commons Attribution-ShareAlike 4.0 International License](https://creativecommons.org/licenses/by-sa/4.0/).

'''
'''--- check.sh ---
echo SLIP-0044 duplicates:
grep '^[0-9]' slip-0044.md | cut -f 3 -d '|' | tr -d ' ' | sort | uniq -d

'''
'''--- markdownlint.json ---
{
  "MD004": false,
  "MD013": false,
  "MD024": false,
  "MD029": false,
  "MD033": false,
  "MD040": false
}

'''
'''--- slip-0000.md ---
# SLIP-0000 : SLIP Template

```
Number:  SLIP-0000
Title:   SLIP Template
Type:    Informational
Status:  Accepted
Authors: SatoshiLabs <info@satoshilabs.com>
Created: 2014-06-06
```

## Abstract

This is a section for an abstract.

## Motivation

This is a section for a motivation.

## Body

This is a section for a body. The title of the section should be changed
and the section can be split into multiple sections and subsections.

## References

This is a section for references such as links to other documents (BIP or SLIP)
or to reference implementations.

'''
'''--- slip-0010.md ---
# SLIP-0010 : Universal private key derivation from master private key

```
Number:  SLIP-0010
Title:   Universal private key derivation from master private key
Type:    Standard
Status:  Draft
Authors: Jochen Hoenicke <hoenicke@gmail.com>
         Pavol Rusnak <stick@satoshilabs.com>
Created: 2016-04-26
```

## Abstract

SLIP-0010 describes how to derive private and public key pairs for curve
types different from secp256k1.

## Motivation

Some Trezor applications, in particular SSH and GPG, need different
curve types, e.g., NIST P-256 and ed25519.  For security reasons different
private and public key pairs should be used for these curves.  This SLIP
describes how to derive a master private/public key for these curves and
how a BIP-0032 like derivation is used.

## Body

Trezor generates all keys from a 12 to 24 word mnemonic sequence and
optionally a passphrase.  The BIP-0039 standard describes the procedure
to compute a 512 bit seed from this passphrase.  From this seed Trezor
can create several master keys, one for each curve.  It uses a process
similar and compatible to BIP-0032.  For other curves it uses a
different salt than BIP-0032.  This avoids using the same private key
for different elliptic curves with different orders.

### Master key generation

We adapt the master key generation from BIP-0032.  To use different
private keys for different curves we use different keys for the HMAC
hash that generates the master key.  For the NIST P-256 curve the only
other difference is the different group order.  In the algorithm below
we denote the group order of the elliptic curve with n. For ed25519
curve the private keys are no longer multipliers for the group
generator; instead the hash of the private key is the multiplier.  For
this reason, our scheme for ed25519 does not support public key
derivation and uses the produced hashes directly as private keys.

To avoid invalid master keys, the algorithm is retried with the
intermediate hash as new seed if the key is invalid.

1. Generate a seed byte sequence S of 512 bits according to BIP-0039.
2. Calculate I = HMAC-SHA512(Key = Curve, Data = S)
3. Split I into two 32-byte sequences, I<sub>L</sub> and I<sub>R</sub>.
4. Use parse<sub>256</sub>(I<sub>L</sub>) as master secret key, and I<sub>R</sub> as master chain code.
5. If curve is not ed25519 and I<sub>L</sub> is 0 or ≥ n (invalid key):
    * Set S := I and continue at step 2.

The supported curves are

* Curve = "Bitcoin seed" for the secp256k1 curve (this is compatible to BIP-0032).
* Curve = "Nist256p1 seed" for the NIST P-256 curve.
* Curve = "ed25519 seed" for the ed25519 curve.

For ed25519, the last step always succeeds since every 256-bit number
(even 0) is a valid private key.

### Child key derivation (CKD) functions

Private and public key derivation for NIST P-256 is identical to the
generation for secp256k1 but uses the order of that curve as modulo.
We change BIP-32 to not fail if the resulting key is not valid but
retry hashing until a valid key is found.  For ed25519 only hardened
key generation from Private parent key to private child key is supported.

Given a parent extended key and an index i, it is possible to compute
the corresponding child extended key. The algorithm to do so depends
on whether the child is a hardened key or not (or, equivalently,
whether i ≥ 2<sup>31</sup>), and whether we're talking about private
or public keys.

#### Private parent key &rarr; private child key

Let n denote the order of the curve.

The function CKDpriv((k<sub>par</sub>, c<sub>par</sub>), i) &rarr; (k<sub>i</sub>, c<sub>i</sub>) computes a child extended private key from the parent extended private key:

1. Check whether i ≥ 2<sup>31</sup> (whether the child is a hardened key).
    * If so (hardened child): let I = HMAC-SHA512(Key = c<sub>par</sub>, Data = 0x00 || ser<sub>256</sub>(k<sub>par</sub>) || ser<sub>32</sub>(i)). (Note: The 0x00 pads the private key to make it 33 bytes long.)
    * If not (normal child):
        * If curve is ed25519: return failure.
        * let I = HMAC-SHA512(Key = c<sub>par</sub>, Data = ser<sub>P</sub>(point(k<sub>par</sub>)) || ser<sub>32</sub>(i)).
2. Split I into two 32-byte sequences, I<sub>L</sub> and I<sub>R</sub>.
3. The returned chain code c<sub>i</sub> is I<sub>R</sub>.
4. If curve is ed25519: The returned child key k<sub>i</sub> is parse<sub>256</sub>(I<sub>L</sub>).
5. If parse<sub>256</sub>(I<sub>L</sub>) ≥ n or parse<sub>256</sub>(I<sub>L</sub>) + k<sub>par</sub> (mod n) = 0 (resulting key is invalid):
    * let I = HMAC-SHA512(Key = c<sub>par</sub>, Data = 0x01 || I<sub>R</sub> || ser<sub>32</sub>(i) and restart at step 2.
6. Otherwise: The returned child key k<sub>i</sub> is parse<sub>256</sub>(I<sub>L</sub>) + k<sub>par</sub> (mod n).

The HMAC-SHA512 function is specified in [RFC 4231](http://tools.ietf.org/html/rfc4231).

#### Public parent key &rarr; public child key

This function always fails for ed25519 since normal derivation is not supported.

The function CKDpub((K<sub>par</sub>, c<sub>par</sub>), i) &rarr; (K<sub>i</sub>, c<sub>i</sub>) computes a child extended public key from the parent extended public key. It is only defined for non-hardened child keys.

1. Check whether i ≥ 2<sup>31</sup> (whether the child is a hardened key).
    * If so (hardened child): return failure
    * If not (normal child): let I = HMAC-SHA512(Key = c<sub>par</sub>, Data = ser<sub>P</sub>(K<sub>par</sub>) || ser<sub>32</sub>(i)).
2. Split I into two 32-byte sequences, I<sub>L</sub> and I<sub>R</sub>.
3. The returned child key K<sub>i</sub> is point(parse<sub>256</sub>(I<sub>L</sub>)) + K<sub>par</sub>.
4. The returned chain code c<sub>i</sub> is I<sub>R</sub>.
5. If parse<sub>256</sub>(I<sub>L</sub>) ≥ n or K<sub>i</sub> is the point at infinity (the resulting key is invalid):
    * let I = HMAC-SHA512(Key = c<sub>par</sub>, Data = 0x01 || I<sub>R</sub> || ser<sub>32</sub>(i)) and restart at step 2.

## Test vectors

### Test vector 1 for secp256k1

Seed (hex): 000102030405060708090a0b0c0d0e0f

* Chain m
  * fingerprint: 00000000
  * chain code: 873dff81c02f525623fd1fe5167eac3a55a049de3d314bb42ee227ffed37d508
  * private: e8f32e723decf4051aefac8e2c93c9c5b214313817cdb01a1494b917c8436b35
  * public: 0339a36013301597daef41fbe593a02cc513d0b55527ec2df1050e2e8ff49c85c2
* Chain m/0<sub>H</sub>
  * fingerprint: 3442193e
  * chain code: 47fdacbd0f1097043b78c63c20c34ef4ed9a111d980047ad16282c7ae6236141
  * private: edb2e14f9ee77d26dd93b4ecede8d16ed408ce149b6cd80b0715a2d911a0afea
  * public: 035a784662a4a20a65bf6aab9ae98a6c068a81c52e4b032c0fb5400c706cfccc56
* Chain m/0<sub>H</sub>/1
  * fingerprint: 5c1bd648
  * chain code: 2a7857631386ba23dacac34180dd1983734e444fdbf774041578e9b6adb37c19
  * private: 3c6cb8d0f6a264c91ea8b5030fadaa8e538b020f0a387421a12de9319dc93368
  * public: 03501e454bf00751f24b1b489aa925215d66af2234e3891c3b21a52bedb3cd711c
* Chain m/0<sub>H</sub>/1/2<sub>H</sub>
  * fingerprint: bef5a2f9
  * chain code: 04466b9cc8e161e966409ca52986c584f07e9dc81f735db683c3ff6ec7b1503f
  * private: cbce0d719ecf7431d88e6a89fa1483e02e35092af60c042b1df2ff59fa424dca
  * public: 0357bfe1e341d01c69fe5654309956cbea516822fba8a601743a012a7896ee8dc2
* Chain m/0<sub>H</sub>/1/2<sub>H</sub>/2
  * fingerprint: ee7ab90c
  * chain code: cfb71883f01676f587d023cc53a35bc7f88f724b1f8c2892ac1275ac822a3edd
  * private: 0f479245fb19a38a1954c5c7c0ebab2f9bdfd96a17563ef28a6a4b1a2a764ef4
  * public: 02e8445082a72f29b75ca48748a914df60622a609cacfce8ed0e35804560741d29
* Chain m/0<sub>H</sub>/1/2<sub>H</sub>/2/1000000000
  * fingerprint: d880d7d8
  * chain code: c783e67b921d2beb8f6b389cc646d7263b4145701dadd2161548a8b078e65e9e
  * private: 471b76e389e528d6de6d816857e012c5455051cad6660850e58372a6c3e6e7c8
  * public: 022a471424da5e657499d1ff51cb43c47481a03b1e77f951fe64cec9f5a48f7011

### Test vector 1 for nist256p1

Seed (hex): 000102030405060708090a0b0c0d0e0f

* Chain m
  * fingerprint: 00000000
  * chain code: beeb672fe4621673f722f38529c07392fecaa61015c80c34f29ce8b41b3cb6ea
  * private: 612091aaa12e22dd2abef664f8a01a82cae99ad7441b7ef8110424915c268bc2
  * public: 0266874dc6ade47b3ecd096745ca09bcd29638dd52c2c12117b11ed3e458cfa9e8
* Chain m/0<sub>H</sub>
  * fingerprint: be6105b5
  * chain code: 3460cea53e6a6bb5fb391eeef3237ffd8724bf0a40e94943c98b83825342ee11
  * private: 6939694369114c67917a182c59ddb8cafc3004e63ca5d3b84403ba8613debc0c
  * public: 0384610f5ecffe8fda089363a41f56a5c7ffc1d81b59a612d0d649b2d22355590c
* Chain m/0<sub>H</sub>/1
  * fingerprint: 9b02312f
  * chain code: 4187afff1aafa8445010097fb99d23aee9f599450c7bd140b6826ac22ba21d0c
  * private: 284e9d38d07d21e4e281b645089a94f4cf5a5a81369acf151a1c3a57f18b2129
  * public: 03526c63f8d0b4bbbf9c80df553fe66742df4676b241dabefdef67733e070f6844
* Chain m/0<sub>H</sub>/1/2<sub>H</sub>
  * fingerprint: b98005c1
  * chain code: 98c7514f562e64e74170cc3cf304ee1ce54d6b6da4f880f313e8204c2a185318
  * private: 694596e8a54f252c960eb771a3c41e7e32496d03b954aeb90f61635b8e092aa7
  * public: 0359cf160040778a4b14c5f4d7b76e327ccc8c4a6086dd9451b7482b5a4972dda0
* Chain m/0<sub>H</sub>/1/2<sub>H</sub>/2
  * fingerprint: 0e9f3274
  * chain code: ba96f776a5c3907d7fd48bde5620ee374d4acfd540378476019eab70790c63a0
  * private: 5996c37fd3dd2679039b23ed6f70b506c6b56b3cb5e424681fb0fa64caf82aaa
  * public: 029f871f4cb9e1c97f9f4de9ccd0d4a2f2a171110c61178f84430062230833ff20
* Chain m/0<sub>H</sub>/1/2<sub>H</sub>/2/1000000000
  * fingerprint: 8b2b5c4b
  * chain code: b9b7b82d326bb9cb5b5b121066feea4eb93d5241103c9e7a18aad40f1dde8059
  * private: 21c4f269ef0a5fd1badf47eeacebeeaa3de22eb8e5b0adcd0f27dd99d34d0119
  * public: 02216cd26d31147f72427a453c443ed2cde8a1e53c9cc44e5ddf739725413fe3f4

### Test vector 1 for ed25519

Seed (hex): 000102030405060708090a0b0c0d0e0f

* Chain m
  * fingerprint: 00000000
  * chain code: 90046a93de5380a72b5e45010748567d5ea02bbf6522f979e05c0d8d8ca9fffb
  * private: 2b4be7f19ee27bbf30c667b642d5f4aa69fd169872f8fc3059c08ebae2eb19e7
  * public: 00a4b2856bfec510abab89753fac1ac0e1112364e7d250545963f135f2a33188ed
* Chain m/0<sub>H</sub>
  * fingerprint: ddebc675
  * chain code: 8b59aa11380b624e81507a27fedda59fea6d0b779a778918a2fd3590e16e9c69
  * private: 68e0fe46dfb67e368c75379acec591dad19df3cde26e63b93a8e704f1dade7a3
  * public: 008c8a13df77a28f3445213a0f432fde644acaa215fc72dcdf300d5efaa85d350c
* Chain m/0<sub>H</sub>/1<sub>H</sub>
  * fingerprint: 13dab143
  * chain code: a320425f77d1b5c2505a6b1b27382b37368ee640e3557c315416801243552f14
  * private: b1d0bad404bf35da785a64ca1ac54b2617211d2777696fbffaf208f746ae84f2
  * public: 001932a5270f335bed617d5b935c80aedb1a35bd9fc1e31acafd5372c30f5c1187
* Chain m/0<sub>H</sub>/1<sub>H</sub>/2<sub>H</sub>
  * fingerprint: ebe4cb29
  * chain code: 2e69929e00b5ab250f49c3fb1c12f252de4fed2c1db88387094a0f8c4c9ccd6c
  * private: 92a5b23c0b8a99e37d07df3fb9966917f5d06e02ddbd909c7e184371463e9fc9
  * public: 00ae98736566d30ed0e9d2f4486a64bc95740d89c7db33f52121f8ea8f76ff0fc1
* Chain m/0<sub>H</sub>/1<sub>H</sub>/2<sub>H</sub>/2<sub>H</sub>
  * fingerprint: 316ec1c6
  * chain code: 8f6d87f93d750e0efccda017d662a1b31a266e4a6f5993b15f5c1f07f74dd5cc
  * private: 30d1dc7e5fc04c31219ab25a27ae00b50f6fd66622f6e9c913253d6511d1e662
  * public: 008abae2d66361c879b900d204ad2cc4984fa2aa344dd7ddc46007329ac76c429c
* Chain m/0<sub>H</sub>/1<sub>H</sub>/2<sub>H</sub>/2<sub>H</sub>/1000000000<sub>H</sub>
  * fingerprint: d6322ccd
  * chain code: 68789923a0cac2cd5a29172a475fe9e0fb14cd6adb5ad98a3fa70333e7afa230
  * private: 8f94d394a8e8fd6b1bc2f3f49f5c47e385281d5c17e65324b0f62483e37e8793
  * public: 003c24da049451555d51a7014a37337aa4e12d41e485abccfa46b47dfb2af54b7a

### Test vector 2 for secp256k1

Seed (hex): fffcf9f6f3f0edeae7e4e1dedbd8d5d2cfccc9c6c3c0bdbab7b4b1aeaba8a5a29f9c999693908d8a8784817e7b7875726f6c696663605d5a5754514e4b484542

* Chain m
  * fingerprint: 00000000
  * chain code: 60499f801b896d83179a4374aeb7822aaeaceaa0db1f85ee3e904c4defbd9689
  * private: 4b03d6fc340455b363f51020ad3ecca4f0850280cf436c70c727923f6db46c3e
  * public: 03cbcaa9c98c877a26977d00825c956a238e8dddfbd322cce4f74b0b5bd6ace4a7
* Chain m/0
  * fingerprint: bd16bee5
  * chain code: f0909affaa7ee7abe5dd4e100598d4dc53cd709d5a5c2cac40e7412f232f7c9c
  * private: abe74a98f6c7eabee0428f53798f0ab8aa1bd37873999041703c742f15ac7e1e
  * public: 02fc9e5af0ac8d9b3cecfe2a888e2117ba3d089d8585886c9c826b6b22a98d12ea
* Chain m/0/2147483647<sub>H</sub>
  * fingerprint: 5a61ff8e
  * chain code: be17a268474a6bb9c61e1d720cf6215e2a88c5406c4aee7b38547f585c9a37d9
  * private: 877c779ad9687164e9c2f4f0f4ff0340814392330693ce95a58fe18fd52e6e93
  * public: 03c01e7425647bdefa82b12d9bad5e3e6865bee0502694b94ca58b666abc0a5c3b
* Chain m/0/2147483647<sub>H</sub>/1
  * fingerprint: d8ab4937
  * chain code: f366f48f1ea9f2d1d3fe958c95ca84ea18e4c4ddb9366c336c927eb246fb38cb
  * private: 704addf544a06e5ee4bea37098463c23613da32020d604506da8c0518e1da4b7
  * public: 03a7d1d856deb74c508e05031f9895dab54626251b3806e16b4bd12e781a7df5b9
* Chain m/0/2147483647<sub>H</sub>/1/2147483646<sub>H</sub>
  * fingerprint: 78412e3a
  * chain code: 637807030d55d01f9a0cb3a7839515d796bd07706386a6eddf06cc29a65a0e29
  * private: f1c7c871a54a804afe328b4c83a1c33b8e5ff48f5087273f04efa83b247d6a2d
  * public: 02d2b36900396c9282fa14628566582f206a5dd0bcc8d5e892611806cafb0301f0
* Chain m/0/2147483647<sub>H</sub>/1/2147483646<sub>H</sub>/2
  * fingerprint: 31a507b8
  * chain code: 9452b549be8cea3ecb7a84bec10dcfd94afe4d129ebfd3b3cb58eedf394ed271
  * private: bb7d39bdb83ecf58f2fd82b6d918341cbef428661ef01ab97c28a4842125ac23
  * public: 024d902e1a2fc7a8755ab5b694c575fce742c48d9ff192e63df5193e4c7afe1f9c

### Test vector 2 for nist256p1

Seed (hex): fffcf9f6f3f0edeae7e4e1dedbd8d5d2cfccc9c6c3c0bdbab7b4b1aeaba8a5a29f9c999693908d8a8784817e7b7875726f6c696663605d5a5754514e4b484542

* Chain m
  * fingerprint: 00000000
  * chain code: 96cd4465a9644e31528eda3592aa35eb39a9527769ce1855beafc1b81055e75d
  * private: eaa31c2e46ca2962227cf21d73a7ef0ce8b31c756897521eb6c7b39796633357
  * public: 02c9e16154474b3ed5b38218bb0463e008f89ee03e62d22fdcc8014beab25b48fa
* Chain m/0
  * fingerprint: 607f628f
  * chain code: 84e9c258bb8557a40e0d041115b376dd55eda99c0042ce29e81ebe4efed9b86a
  * private: d7d065f63a62624888500cdb4f88b6d59c2927fee9e6d0cdff9cad555884df6e
  * public: 039b6df4bece7b6c81e2adfeea4bcf5c8c8a6e40ea7ffa3cf6e8494c61a1fc82cc
* Chain m/0/2147483647<sub>H</sub>
  * fingerprint: 946d2a54
  * chain code: f235b2bc5c04606ca9c30027a84f353acf4e4683edbd11f635d0dcc1cd106ea6
  * private: 96d2ec9316746a75e7793684ed01e3d51194d81a42a3276858a5b7376d4b94b9
  * public: 02f89c5deb1cae4fedc9905f98ae6cbf6cbab120d8cb85d5bd9a91a72f4c068c76
* Chain m/0/2147483647<sub>H</sub>/1
  * fingerprint: 218182d8
  * chain code: 7c0b833106235e452eba79d2bdd58d4086e663bc8cc55e9773d2b5eeda313f3b
  * private: 974f9096ea6873a915910e82b29d7c338542ccde39d2064d1cc228f371542bbc
  * public: 03abe0ad54c97c1d654c1852dfdc32d6d3e487e75fa16f0fd6304b9ceae4220c64
* Chain m/0/2147483647<sub>H</sub>/1/2147483646<sub>H</sub>
  * fingerprint: 931223e4
  * chain code: 5794e616eadaf33413aa309318a26ee0fd5163b70466de7a4512fd4b1a5c9e6a
  * private: da29649bbfaff095cd43819eda9a7be74236539a29094cd8336b07ed8d4eff63
  * public: 03cb8cb067d248691808cd6b5a5a06b48e34ebac4d965cba33e6dc46fe13d9b933
* Chain m/0/2147483647<sub>H</sub>/1/2147483646<sub>H</sub>/2
  * fingerprint: 956c4629
  * chain code: 3bfb29ee8ac4484f09db09c2079b520ea5616df7820f071a20320366fbe226a7
  * private: bb0a77ba01cc31d77205d51d08bd313b979a71ef4de9b062f8958297e746bd67
  * public: 020ee02e18967237cf62672983b253ee62fa4dd431f8243bfeccdf39dbe181387f

### Test vector 2 for ed25519

Seed (hex): fffcf9f6f3f0edeae7e4e1dedbd8d5d2cfccc9c6c3c0bdbab7b4b1aeaba8a5a29f9c999693908d8a8784817e7b7875726f6c696663605d5a5754514e4b484542

* Chain m
  * fingerprint: 00000000
  * chain code: ef70a74db9c3a5af931b5fe73ed8e1a53464133654fd55e7a66f8570b8e33c3b
  * private: 171cb88b1b3c1db25add599712e36245d75bc65a1a5c9e18d76f9f2b1eab4012
  * public: 008fe9693f8fa62a4305a140b9764c5ee01e455963744fe18204b4fb948249308a
* Chain m/0<sub>H</sub>
  * fingerprint: 31981b50
  * chain code: 0b78a3226f915c082bf118f83618a618ab6dec793752624cbeb622acb562862d
  * private: 1559eb2bbec5790b0c65d8693e4d0875b1747f4970ae8b650486ed7470845635
  * public: 0086fab68dcb57aa196c77c5f264f215a112c22a912c10d123b0d03c3c28ef1037
* Chain m/0<sub>H</sub>/2147483647<sub>H</sub>
  * fingerprint: 1e9411b1
  * chain code: 138f0b2551bcafeca6ff2aa88ba8ed0ed8de070841f0c4ef0165df8181eaad7f
  * private: ea4f5bfe8694d8bb74b7b59404632fd5968b774ed545e810de9c32a4fb4192f4
  * public: 005ba3b9ac6e90e83effcd25ac4e58a1365a9e35a3d3ae5eb07b9e4d90bcf7506d
* Chain m/0<sub>H</sub>/2147483647<sub>H</sub>/1<sub>H</sub>
  * fingerprint: fcadf38c
  * chain code: 73bd9fff1cfbde33a1b846c27085f711c0fe2d66fd32e139d3ebc28e5a4a6b90
  * private: 3757c7577170179c7868353ada796c839135b3d30554bbb74a4b1e4a5a58505c
  * public: 002e66aa57069c86cc18249aecf5cb5a9cebbfd6fadeab056254763874a9352b45
* Chain m/0<sub>H</sub>/2147483647<sub>H</sub>/1<sub>H</sub>/2147483646<sub>H</sub>
  * fingerprint: aca70953
  * chain code: 0902fe8a29f9140480a00ef244bd183e8a13288e4412d8389d140aac1794825a
  * private: 5837736c89570de861ebc173b1086da4f505d4adb387c6a1b1342d5e4ac9ec72
  * public: 00e33c0f7d81d843c572275f287498e8d408654fdf0d1e065b84e2e6f157aab09b
* Chain m/0<sub>H</sub>/2147483647<sub>H</sub>/1<sub>H</sub>/2147483646<sub>H</sub>/2<sub>H</sub>
  * fingerprint: 422c654b
  * chain code: 5d70af781f3a37b829f0d060924d5e960bdc02e85423494afc0b1a41bbe196d4
  * private: 551d333177df541ad876a60ea71f00447931c0a9da16f227c11ea080d7391b8d
  * public: 0047150c75db263559a70d5778bf36abbab30fb061ad69f69ece61a72b0cfa4fc0

### Test derivation retry for nist256p1

Seed (hex): 000102030405060708090a0b0c0d0e0f

* Chain m
  * fingerprint: 00000000
  * chain code: beeb672fe4621673f722f38529c07392fecaa61015c80c34f29ce8b41b3cb6ea
  * private: 612091aaa12e22dd2abef664f8a01a82cae99ad7441b7ef8110424915c268bc2
  * public: 0266874dc6ade47b3ecd096745ca09bcd29638dd52c2c12117b11ed3e458cfa9e8
* Chain m/28578<sub>H</sub>
  * fingerprint: be6105b5
  * chain code: e94c8ebe30c2250a14713212f6449b20f3329105ea15b652ca5bdfc68f6c65c2
  * private: 06f0db126f023755d0b8d86d4591718a5210dd8d024e3e14b6159d63f53aa669
  * public: 02519b5554a4872e8c9c1c847115363051ec43e93400e030ba3c36b52a3e70a5b7
* Chain m/28578<sub>H</sub>/33941
  * fingerprint: 3e2b7bc6
  * chain code: 9e87fe95031f14736774cd82f25fd885065cb7c358c1edf813c72af535e83071
  * private: 092154eed4af83e078ff9b84322015aefe5769e31270f62c3f66c33888335f3a
  * public: 0235bfee614c0d5b2cae260000bb1d0d84b270099ad790022c1ae0b2e782efe120

### Test seed retry for nist256p1

Seed (hex): a7305bc8df8d0951f0cb224c0e95d7707cbdf2c6ce7e8d481fec69c7ff5e9446

* Chain m
  * fingerprint: 00000000
  * chain code: 7762f9729fed06121fd13f326884c82f59aa95c57ac492ce8c9654e60efd130c
  * private: 3b8c18469a4634517d6d0b65448f8e6c62091b45540a1743c5846be55d47d88f
  * public: 0383619fadcde31063d8c5cb00dbfe1713f3e6fa169d8541a798752a1c1ca0cb20

## Implementation

* [Python implementation to generate test vectors](slip-0010/testvectors.py)
* [.NET Standard 2.0 Implementation](https://github.com/elucidsoft/dotnetstandard-bip32)

## References

* [BIP-0032: Hierarchical Deterministic Wallets](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki)
* [BIP-0039: Mnemonic code for generating deterministic keys](https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki)

'''
'''--- slip-0010/test.py ---
#!/usr/bin/env python2

import binascii
import hashlib
import hmac
import struct

def int_to_string(x, pad):
    result = ['\x00'] * pad
    while x > 0:
        pad -= 1
        ordinal = x & 0xFF
        result[pad] = (chr(ordinal))
        x >>= 8
    return ''.join(result)

def string_to_int(s):
    result = 0
    for c in s:
        if not isinstance(c, int):
            c = ord(c)
        result = (result << 8) + c
    return result

# mode 0 - compatible with BIP32 private derivation
def derive(parent_key, parent_chaincode, i):
    assert len(parent_key) == 32
    assert len(parent_chaincode) == 32
    secp256k1_n = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141
    k = parent_chaincode
    d = '\x00' + parent_key + struct.pack('>L', i)
    h = hmac.new(k, d, hashlib.sha512).digest()
    key, chaincode = h[:32], h[32:]
    key = (string_to_int(key) + string_to_int(parent_key)) % secp256k1_n
    key = int_to_string(key, 32)
    return (key, chaincode)

# mode 1 - universal
def derive_universal(parent_key, parent_chaincode, i, n, curveid, data):
    assert len(parent_key) == 32
    assert len(parent_chaincode) == 32
    ctr = 0
    while True:
        k = parent_chaincode
        d = '\x01' + parent_key + struct.pack('>L', i) + curveid + struct.pack('>L', ctr) + data
        h = hmac.new(k, d, hashlib.sha512).digest()
        key, chaincode = h[:32], h[32:]
        if string_to_int(key) >= n:
            ctr += 1
        else:
            return (key, chaincode)

master_key = binascii.unhexlify('e8f32e723decf4051aefac8e2c93c9c5b214313817cdb01a1494b917c8436b35')
master_chaincode = binascii.unhexlify('873dff81c02f525623fd1fe5167eac3a55a049de3d314bb42ee227ffed37d508')

k, c = derive(master_key, master_chaincode, 0x80000000 + 44)
assert binascii.hexlify(k) == '8a8e34c835bceec0213d542623158811d5686d931d51efbf8e3ea8f62edc703f'
assert binascii.hexlify(c) == '4681a20841656292a6f6fda184811ace2c5fa67de53c47eb9d0cc557bae2dea4'
print 'ok'

k, c = derive_universal(master_key, master_chaincode, 1337, n=(2**255 - 19), curveid='ed25519', data='https://www.example.com')
assert binascii.hexlify(k) == '51e7ccf5c5fd11301926ccdf195f6c02b2696a2b9e5a95a930f7e527654b5d03'
assert binascii.hexlify(c) == 'b45f2b67f218223833f5607d1a26b030e6a1ebc7fdd7b3bc9481e1d78ee2c728'
print 'ok'

'''
'''--- slip-0010/testvectors.py ---
#!/usr/bin/env python2

import binascii
import hashlib
import hmac
import struct
import ecdsa
import ed25519
from base58 import b58encode_check

privdev = 0x80000000

def int_to_string(x, pad):
    result = ['\x00'] * pad
    while x > 0:
        pad -= 1
        ordinal = x & 0xFF
        result[pad] = (chr(ordinal))
        x >>= 8
    return ''.join(result)

def string_to_int(s):
    result = 0
    for c in s:
        if not isinstance(c, int):
            c = ord(c)
        result = (result << 8) + c
    return result

# mode 0 - compatible with BIP32 private derivation
def seed2hdnode(seed, modifier, curve):
    k = seed
    while True:
        h = hmac.new(modifier, seed, hashlib.sha512).digest()
        key, chaincode = h[:32], h[32:]
        a = string_to_int(key)
        if (curve == 'ed25519'):
            break
        if (a < curve.order and a != 0):
            break
        seed = h
        #print 'RETRY seed: ' + binascii.hexlify(seed)
    return (key, chaincode)

def fingerprint(publickey):
    h = hashlib.new('ripemd160', hashlib.sha256(publickey).digest()).digest()
    return h[:4]

def b58xprv(parent_fingerprint, private_key, chain, depth, childnr):
    raw = ('\x04\x88\xad\xe4' +
              chr(depth) + parent_fingerprint + int_to_string(childnr, 4) +
              chain + '\x00' + private_key)
    return b58encode_check(raw)

def b58xpub(parent_fingerprint, public_key, chain, depth, childnr):
    raw = ('\x04\x88\xb2\x1e' +
              chr(depth) + parent_fingerprint + int_to_string(childnr, 4) +
              chain + public_key)
    return b58encode_check(raw)

def publickey(private_key, curve):
    if curve == 'ed25519':
        sk = ed25519.SigningKey(private_key)
        return '\x00' + sk.get_verifying_key().to_bytes()
    else:
        Q = string_to_int(private_key) * curve.generator
        xstr = int_to_string(Q.x(), 32)
        parity = Q.y() & 1
        return chr(2 + parity) + xstr

def derive(parent_key, parent_chaincode, i, curve):
    assert len(parent_key) == 32
    assert len(parent_chaincode) == 32
    k = parent_chaincode
    if ((i & privdev) != 0):
        key = '\x00' + parent_key
    else:
        key = publickey(parent_key, curve)
    d = key + struct.pack('>L', i)
    while True:
        h = hmac.new(k, d, hashlib.sha512).digest()
        key, chaincode = h[:32], h[32:]
        if curve == 'ed25519':
            break
        #print 'I: ' + binascii.hexlify(h)
        a = string_to_int(key)
        key = (a + string_to_int(parent_key)) % curve.order
        if (a < curve.order and key != 0):
            key = int_to_string(key, 32)
            break
        d = '\x01' + h[32:] + struct.pack('>L', i)
        #print 'a failed: ' + binascii.hexlify(h[:32])
        #print 'RETRY: ' + binascii.hexlify(d)
                        
    return (key, chaincode)

def get_curve_info(curvename):
    if curvename == 'secp256k1':
        return (ecdsa.curves.SECP256k1, 'Bitcoin seed') 
    if curvename == 'nist256p1':
        return (ecdsa.curves.NIST256p, 'Nist256p1 seed') 
    if curvename == 'ed25519':
        return ('ed25519', 'ed25519 seed')
    raise BaseException('unsupported curve: '+curvename)

def show_testvector(name, curvename, seedhex, derivationpath):
    curve, seedmodifier = get_curve_info(curvename)
    master_seed = binascii.unhexlify(seedhex)
    k,c = seed2hdnode(master_seed, seedmodifier, curve)
    p = publickey(k, curve)
    fpr = '\x00\x00\x00\x00'
    path = 'm'
    print "### "+name+" for "+curvename
    print ''
    print "Seed (hex): " + seedhex
    print ''
    print '* Chain ' + path
    print '  * fingerprint: ' + binascii.hexlify(fpr)
    print '  * chain code: ' + binascii.hexlify(c)
    print '  * private: ' + binascii.hexlify(k)
    print '  * public: ' + binascii.hexlify(p)
    depth = 0
    for i in derivationpath:
        if curve == 'ed25519':
            # no public derivation for ed25519
            i = i | privdev
        fpr = fingerprint(p)
        depth = depth + 1
        path = path + "/" + str(i & (privdev-1))
        if ((i & privdev) != 0):
            path = path + "<sub>H</sub>"
        k,c = derive(k, c, i, curve)
        p = publickey(k, curve) 
        print '* Chain ' + path
        print '  * fingerprint: ' + binascii.hexlify(fpr)
        print '  * chain code: ' + binascii.hexlify(c)
        print '  * private: ' + binascii.hexlify(k)
        print '  * public: ' + binascii.hexlify(p)
        #print b58xprv(fpr, kc, cc, depth, i)
        #print b58xpub(fpr, pc, cc, depth, i)
    print

def show_testvectors(name, curvenames, seedhex, derivationpath):
    for curvename in curvenames:
        show_testvector(name, curvename, seedhex, derivationpath)

curvenames = ['secp256k1', 'nist256p1', 'ed25519'];
        
show_testvectors("Test vector 1", curvenames,
                 '000102030405060708090a0b0c0d0e0f',
                 [privdev + 0, 1, privdev + 2, 2, 1000000000])
show_testvectors("Test vector 2", curvenames,
                 'fffcf9f6f3f0edeae7e4e1dedbd8d5d2cfccc9c6c3c0bdbab7b4b1aeaba8a5a29f9c999693908d8a8784817e7b7875726f6c696663605d5a5754514e4b484542',
                 [0, privdev + 2147483647, 1, privdev + 2147483646, 2])
            
show_testvectors("Test derivation retry", ['nist256p1'],
                 '000102030405060708090a0b0c0d0e0f',
                 [privdev + 28578, 33941])

show_testvectors("Test seed retry", ['nist256p1'],
                 'a7305bc8df8d0951f0cb224c0e95d7707cbdf2c6ce7e8d481fec69c7ff5e9446',
                 [])

'''
'''--- slip-0011.md ---
# SLIP-0011 : Symmetric encryption of key-value pairs using deterministic hierarchy

```
Number:  SLIP-0011
Title:   Symmetric encryption of key-value pairs using deterministic hierarchy
Type:    Standard
Status:  Draft
Authors: Pavol Rusnak <stick@satoshilabs.com>
         Marek Palatinus <slush@satoshilabs.com>
         Karel Bilek <kb@karelbilek.com>
Created: 2014-06-12
```

## Abstract

This document is explaining symmetric encryption on hardware devices, using deterministic hierarchy.

## Motivation

We want to provide a symmetric encryption in the hardware wallet, where the key doesn't exit the device, and where the user might be forced to confirm the encryption/decryption on the display.

## Body

### Overview

The following data are sent to the hardware wallet:

* BIP 32 path
* key (that is being shown on the device)
* value
* encrypt/decrypt direction
* should user confirm on encrypt?
* should user confirm on decrypt?
* optional IV

Value is what is actually being encrypted. The key for the encryption is constructed from the private key on the BIP address, the key displayed on the device, and the two informations about whether to ask for confirmation.

It is constructed in such a way, that different path, key or the confirm information will get a different encryption key and IV. So, you cannot "skip" the confirmation by using different input.

IV can be either manually set, or it is computed together with the key.

The value must be divisible into 16-byte blocks. The application has to pad the blocks itself and ensure safety; for example, by using PKCS7.

### Details

The details are best explained on a slightly simplified code from TREZOR Python emulator.

```python
def _cipher_keyvalue(self, address_n, key, value, encrypt, ask_on_encrypt, ask_on_decrypt, iv):
    if len(value) % 16 > 0:
        return Failure(message="Input length must be a multiple of 16")
    private_key = BIP32(self.storage.get_node()).get_private_node(list(address_n)).private_key
    key += "E1" if ask_on_encrypt else "E0"
    key += "D1" if ask_on_decrypt else "D0"
    secret = hmac.HMAC(key=private_key, msg=key, digestmod=hashlib.sha512).digest()
    aes_key = secret[0:32]
    aes_iv = iv if iv else secret[32:48]
    aes = pyaes.AESModeOfOperationCBC(key=aes_key, iv=aes_iv)
    if encrypt:
        res = ''.join([aes.encrypt(value[i:i+16]) for i in range(0, len(value), 16)])
    else:
        res = ''.join([aes.decrypt(value[i:i+16]) for i in range(0, len(value), 16)])
    return CipheredKeyValue(value=res)
```

```python
if len(value) % 16 > 0:
    return Failure(message="Input length must be a multiple of 16")
```

First, the value is checked, if it is divisable into 16-byte blocks, since the symmetric cipher is block cipher. The application has to pad the blocks itself and ensure safety; for example, by using PKCS7.

```python
private_key = BIP32(self.storage.get_node()).get_private_node(list(address_n)).private_key
```

Private key of the BIP32 node is derived.

```python
key += "E1" if ask_on_encrypt else "E0"
key += "D1" if ask_on_decrypt else "D0"
```

The key, displayed on the device, is concatenated with either E1 or E0 and either D1 or D0, depending on whether the confirmation is enabled in a given direction.

```python
secret = hmac.HMAC(key=private_key, msg=key, digestmod=hashlib.sha512).digest()
```

The key, with the concatenated E1/E0 or D1/D0, is HMACed, with the private key from HD Node, with SHA512 as a hash function.

```python
aes_key = secret[0:32]
aes_iv = iv if iv else secret[32:48]
```

The AES key is the first 32 bytes of the HMAC; the input vector is the next 16 bytes.

```python
aes = pyaes.AESModeOfOperationCBC(key=aes_key, iv=aes_iv)
```

The algorithm is AES, in CBC mode.

```python
if encrypt:
    res = ''.join([aes.encrypt(value[i:i+16]) for i in range(0, len(value), 16)])
else:
    res = ''.join([aes.decrypt(value[i:i+16]) for i in range(0, len(value), 16)])
```

The result are the encrypted/decrypted blocks, concatenated together.

## Test Vectors

Check [test_msg_cipherkeyvalue.py](https://github.com/trezor/python-trezor/blob/master/trezorlib/tests/device_tests/test_msg_cipherkeyvalue.py) for the test vectors.

## References

The algorithm is implemented in [TREZOR firmware](https://github.com/trezor/trezor-mcu/blob/master/firmware/fsm.c) (function `fsm_msgCipherKeyValue`) and its [emulator](https://github.com/trezor/trezor-emu/blob/master/trezor/machine.py#L781) (function `_cipher_keyvalue`).

It is used in algorithms described in [SLIP-0015](slip-0015.md) and [SLIP-0016](slip-0016.md).

'''
'''--- slip-0012.md ---
# SLIP-0012 : Public key encryption using deterministic hierarchy

```
Number:  SLIP-0012
Title:   Public key encryption using deterministic hierarchy
Type:    Standard
Status:  Draft
Authors: Pavol Rusnak <stick@satoshilabs.com>
         Marek Palatinus <slush@satoshilabs.com>
Created: 2014-06-12
```

## Abstract

This is a section for an abstract.

## Motivation

This is a section for a motivation.

## Body

This is a section for a body. The title of the section should be changed
and the section can be split into multiple sections and subsections.

## References

This is a section for references such as links to other documents (BIP or SLIP)
or to reference implementations.

'''
'''--- slip-0013.md ---
# SLIP-0013 : Authentication using deterministic hierarchy

```
Number:  SLIP-0013
Title:   Authentication using deterministic hierarchy
Type:    Standard
Status:  Draft
Authors: Pavol Rusnak <stick@satoshilabs.com>
Created: 2015-03-12
```

## Abstract

This document describes a method that is used for authenticating
to various services such as websites or remote shells using a determinstic
hierarchy.

## Motivation

Using Deterministic Hierarchy for authenticating into systems is ideal,
because the same concepts of easy backup that relate to backing up
deterministic wallets can be applied to backing up user identities.

## Service Identity

Let's introduce the service identity. It consists of two elements:

a) RFC 3986 URI `proto://[user@]host[:port][/path]`

Examples:

* `https://example.com`
* `ftp://public@example.com/pub`
* `ssh://root@example.com:2222`

b) index (32-bit unsigned integer)

The index is used so one can generate more keys corresponding to the same URI.

## HD Structure

1. First concatenate `index` with the URI (`uri`). Use little endian for `index`.

2. Compute the SHA256 hash of the result (`hash`).

3. Truncate `hash` to 128 bits (`hash128`)

4. Split `hash128` into four 32-bit integers `A`, `B`, `C`, `D`. Use little endian for each.

5. Set highest bits of numbers `A`, `B`, `C`, `D` to 1 (e.g. logical OR with 0x80000000) to harden

6. Derive the HD node `m/13'/A'/B'/C'/D'` according to BIP32.

### Worked example

1. `index + uri`=`0` + `https://satoshi@bitcoin.org/login`

2. `sha256(index + uri)` = `d0e2389d4c8394a9f3e32de01104bf6e8db2d9e2bb0905d60fffa5a18fd696db`

3. `hash128` = `d0e2389d4c8394a9f3e32de01104bf6e`

4. `A` = 2637750992, `B` = 2845082444, `C` = 3761103859, `D` = 1858012177

5. `A'` = 2637750992, `B'` = 2845082444, `C'` = 3761103859, `D'` = 4005495825

6. `bip32 node path` = `m/2147483661/2637750992/2845082444/3761103859/4005495825`

See a [Python example](https://github.com/trezor/python-trezor/blob/ca45019918bc4c54f1ace899a9acf397c8f4d92f/tests/test_msg_signidentity.py#L27).

## Challenge - Response

Service issues the challenge consisting of three parts:

a) service identity described above (e.g. `https://example.com 0`)

b) hidden challenge

* random bytes sequence of maximum length 64
* this won't be shown to the user

c) visual challenge

* arbitrary string of text of maximum length 64
* this will be shown to the user and we recommend using timestamp in `YYYY-MM-DD HH:MM:SS` format or similar

Signer takes this data and computes the private key according to section HD Structure.
Then it concatenates sha256 hashes of challenge hidden and challenge visual and
signs the result using the standard Bitcoin message signing.
Finally, the signature is returned together with the node public key and node address.

It's up to service operator to take this message and react in three possible ways:

1. signature is invalid or not present -> show error to user
2. signature is valid, address/public key seen for the first time -> create user account
3. signature is valid, address/public key known -> login to user account

## References

* [BIP-0032: Hierarchical Deterministic Wallets](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki)
* [BIP-0043: Purpose Field for Deterministic Wallets](https://github.com/bitcoin/bips/blob/master/bip-0043.mediawiki)
* [RFC 3986: Uniform Resource Identifier (URI): Generic Syntax](https://tools.ietf.org/html/rfc3986)

'''
'''--- slip-0014.md ---
# SLIP-0014 : Stress Test Deterministic Wallet

```
Number:  SLIP-0014
Title:   Stress Test Deterministic Wallet
Type:    Informational
Status:  Draft
Authors: Pavol Rusnak <stick@satoshilabs.com>
Created: 2015-01-12
```

## Abstract

SLIP-0014 describes a stress test deterministic wallet, which can be used
to test various cornercases that such wallet can encounter.

## Motivation

During the development of myTREZOR deterministic wallet we realized there
are quite a lot of different types of transactions in the network. In order
to simplify testing of transaction history we came up with the idea to create
a special xpub that will contain these various types of transactions.

For more coins and their addresses (not listed in this document) see [addresses.md](slip-0014/addresses.md)

## Wallet

### Bitcoin Legacy P2PKH (BIP44)

```
mnemonic: all all all all all all all all all all all all

m/0/i account:
xprv9xj9UhHNKHr6kJKJBVj82ZxFrbfhczBDUHyVj7kHGAiZqAeUenz2JhrphnMMYVKcWcVPFJESngtKsVa4FYEvFfWUTtZThCoZdwDeS9qQnqm
xpub6BiVtCpG9fQPxnPmHXG8PhtzQdWC2Su4qWu6XW9tpWFYhxydCLJGrWBJZ5H6qTAHdPQ7pQhtpjiYZVZARo14qHiay2fvrX996oEP42u8wZy

m/i account:
xprvA1xn6h6qAwinYq5P37sJsEY39ntjzDpueQPAX9dBQcU81dqZrfBJBVMVuyqnVrMRViPxriZkdLd2vTtpnJaoaomJ67JBk3G1xMagp89w2XX
xpub6Ex8WCdj1KH5mK9r99QKENUmhpjEPgYm1dJmKY2nxx16tSAiQCVYjHfymFdzfpYDAHGtWYTif7WkUKLMULRJFPeV1hvEbeXqrM11K85yPjp
```

[link to blockchain.info](https://blockchain.info/xpub/xpub6BiVtCpG9fQPxnPmHXG8PhtzQdWC2Su4qWu6XW9tpWFYhxydCLJGrWBJZ5H6qTAHdPQ7pQhtpjiYZVZARo14qHiay2fvrX996oEP42u8wZy)

#### Addresses

index | address                            | private key
------|------------------------------------|-----------------------------------------------------
   0  | 1JAd7XCBzGudGpJQSDSfpmJhiygtLQWaGL | L1KjqxZkUwdXaKNL15F2jJZVZpgi2HkHPHGyqTrQNNegyZez3A7Z
   1  | 1GWFxtwWmNVqotUPXLcKVL2mUKpshuJYo  | KyBcuurcaJw6NqnZsmtpDqjbsS67PTXEZAK9QyFEDsyYjmNJJozj
   2  | 1Eni8JFS4yA2wJkicc3yx3QzCNzopLybCM | L3yYwqub7bYq6qKkPf9UAE7uuZYV8adAHvEaceXY9fKX8G7FDCoZ
   3  | 124dT55Jqpj9AKTyJnTX6G8RkUs7ReTzun | L2SNnZeTNHwgr9mayyHLZxmpyQN4SNbrxjBf9Rwq5Fvu2wwTm476
   4  | 15T9DSqc6wjkPxcr2MNVSzF9JAePdvS3n1 | L4jzKXRhQXesPeUSUNi7EMHAEBFzwJuAkZsNi5tja9rLxgGajwPv
   5  | 1GA9u9TfCG7SWmKCveBumdA1TZpfom6ZdJ | L1N67rzEMn6fqvhkFeDnt11LMxYdGZtGQgdYVuASNpmQRawgbJEN
   6  | 1PogPE3bXc84abzEuM2rJEZf2vCbCEZzXz | L3Y5pgT2ewKqdqh6kcGDQ7YHFoW5Vh4xErrPqb4Yjb5re9QYZw7D
   7  | 176U2WABbj4h5PCrxE963wmxzXd2Mw6bP4 | L2RpVajejxusxUXqLHTFJAyp1nzJnT2xuJpfm7Uah4GGUHz7XD58
   8  | 1HRZDR7CmLnq59w6mtzNa7SHtVWPSxdgKA | Kx8nBDjAkXkykD62AF8XjP8W5Z4a79iZC8Z7axyDWXsZTcn5agzM
   9  | 1MPdvYLzcekvEzAB7DmiHa1oU8Foh4KUw8 | L1xWyxmCkjsB2Z9wnjoZ5TGabeg8KbpZt1PjgVsKA9pn3L7JCiTs

### Bitcoin Segwit P2SH (BIP49)

```
mnemonic: all all all all all all all all all all all all

m/0/i account:
xprv9yVyTu1dmn2ekCQYnV4FhXrVNbnJKBbAwXgDaqmhcjyxHaz31UTdLYGqdwFCBv8LA1BafJUWeiQ6J1uUSU5ebGK6GmcFiJsb3bYfpfpLyva
xpub6CVKsQYXc9awxgV1tWbG4foDvdcnieK2JkbpPEBKB5WwAPKBZ1mstLbKVB4ov7QzxzjaxNK6EfmNY5Jsk2cG26EVcEkycGW4tchT2dyUhrx

m/i account:
xprvA1o8joUTA2L813mNWCDBP1DAeDx9tFZZfzFpA9CzMBTRvfwC7mQ36SjRNFrpvK9qnbXaxX2iohqztZsFaq5qNCRvMmRUSr3dWxoNq8pNtmz
xpub6EnV9K1LzPtRDXqqcDkBk99uCFneHiHR3DBQxXcbuWzQoUGLfJiHeF3uDW1JZH3ZG7mr4TuNtPbgLYwEibEkcDcnQkQksZi7jm3eY8PqKFv
```

#### Addresses

index | address                            | private key
------|------------------------------------|-----------------------------------------------------
   0  | 3L6TyTisPBmrDAj6RoKmDzNnj4eQi54gD2 | L1xY6RmpnGn7r5bhQCrDXFTqVGFY7e1p62Rw5yw6bNzKUzRLD1tw
   1  | 3GMMgFUQiYTYQhuHQuZfQoXPvW3GPqfGmD | Kx2KfpCa6Aewb1zxPBt5ex8MFNKk3SrJaeYRVjNRCUg7zALXDy8w
   2  | 3BKbtvJtLSjnSoGUYTeQ17tMKTuyqbUV7P | L3L1oYXQbPmgpgvyB6BzM5PihfAvZfi3pFMZfppVQscM1zQokdtg
   3  | 3Dyf1D6pVR6ZAQYN1th6ehgS1uqgGk1TGh | L3w2TxQpwJCkEhM96o3DTFTC1Pv67kpQ4Nwp4jD9n8oHvFQ7KsSB
   4  | 33wLRyxHFtrXLF7Aun38Dctw5QyiBdruK2 | L1K9dsgY46AgcGsNYdqJCEQbKBvvSuRz1MrWu3ATgyRaq3vVprtn
   5  | 32pKKUD5TKyqb4kzPorJnY8XhiLaHBKni1 | L2ET81wAcxm4vU22w7mEU2EC9bf5aNr1XaMNA1B9GkMHr5YT99a5
   6  | 3NCRi181wMB1v9gPyms9WDruKemBfrE9rQ | KzyfHMxPYBmwgy3pJtqj2UK6xbqzA8TDZUdapXMCQidk2zLg1zVC
   7  | 32d6ze9Be4J45ERomziXxGWXxLobAAQq85 | L3i75zyVQKi5ZBjHMghQSgCx1HYQnYjZh1N2Y6gBLciEa7mqYqvN
   8  | 3FNTNKoAcXDUTUSNAtVTcvAehwQLyJSmP9 | L5SXQN7L1KNFTVurn4xaevP494RYRWNSqVUE2cUFMFnpQTSPHNYG
   9  | 3L55P4LZsyKYUw5Aqy6DPky6ySw3g34TQS | Kzi8YhDogNJKVis8r5z4Lq8M6rSNudAG5p63pF45i9fQQb3KCAeC

## References

- [BIP-0032: Hierarchical Deterministic Wallets](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki)
- [BIP-0039: Mnemonic code for generating deterministic keys](https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki)
- [BIP-0044: Multi-Account Hierarchy for Deterministic Wallets](https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki)

'''
'''--- slip-0014/addresses.md ---
# SLIP-0014: Addresses for various Coins and Chains

Generated using [https://iancoleman.github.io/bip39/](https://iancoleman.github.io/bip39/)

## Bitcoin

`m/44'/0'/0'/0/i`

index | address                            | public key                                                         | private key
------|------------------------------------|--------------------------------------------------------------------|------------
   0  | 1JAd7XCBzGudGpJQSDSfpmJhiygtLQWaGL | 03c6d9cc725bb7e19c026df03bf693ee1171371a8eaf25f04b7a58f6befabcd38c | L1KjqxZkUwdXaKNL15F2jJZVZpgi2HkHPHGyqTrQNNegyZez3A7Z
   1  | 1GWFxtwWmNVqotUPXLcKVL2mUKpshuJYo  | 02c651a011009e2c7e7b3ed2068857ca0a47cba35b73e06c32e3c06ef3aa67621d | KyBcuurcaJw6NqnZsmtpDqjbsS67PTXEZAK9QyFEDsyYjmNJJozj
   2  | 1Eni8JFS4yA2wJkicc3yx3QzCNzopLybCM | 03330236b68aa6fdcaca0ea72e11b360c84ed19a338509aa527b678a7ec9076882 | L3yYwqub7bYq6qKkPf9UAE7uuZYV8adAHvEaceXY9fKX8G7FDCoZ
   3  | 124dT55Jqpj9AKTyJnTX6G8RkUs7ReTzun | 03e6c684d1e5edffe2fc43d260eb19fea91754b92e90627df7f87e06fc12c6a485 | L2SNnZeTNHwgr9mayyHLZxmpyQN4SNbrxjBf9Rwq5Fvu2wwTm476
   4  | 15T9DSqc6wjkPxcr2MNVSzF9JAePdvS3n1 | 03f54094da6a0b2e0799286268bb59ca7c83538e81c78e64f6333f40f9e0e222c0 | L4jzKXRhQXesPeUSUNi7EMHAEBFzwJuAkZsNi5tja9rLxgGajwPv
   5  | 1GA9u9TfCG7SWmKCveBumdA1TZpfom6ZdJ | 02a7a079c1ef9916b289c2ff21a992c808d0de3dfcf8a9f163205c5c9e21f55d5c | L1N67rzEMn6fqvhkFeDnt11LMxYdGZtGQgdYVuASNpmQRawgbJEN
   6  | 1PogPE3bXc84abzEuM2rJEZf2vCbCEZzXz | 0369cb2f81b3ec4f0132cf1ac88f09332439773b3f1579bb6557717d0b720c7226 | L3Y5pgT2ewKqdqh6kcGDQ7YHFoW5Vh4xErrPqb4Yjb5re9QYZw7D
   7  | 176U2WABbj4h5PCrxE963wmxzXd2Mw6bP4 | 03dca76f16e6dd87396c5cdae1af1515b60d104fba881cd7591fe6fa60ef3aeabd | L2RpVajejxusxUXqLHTFJAyp1nzJnT2xuJpfm7Uah4GGUHz7XD58
   8  | 1HRZDR7CmLnq59w6mtzNa7SHtVWPSxdgKA | 0346978a895e75eb498dbf4aff8fa334e6994db1b34a4f2576adc9225415eb9548 | Kx8nBDjAkXkykD62AF8XjP8W5Z4a79iZC8Z7axyDWXsZTcn5agzM
   9  | 1MPdvYLzcekvEzAB7DmiHa1oU8Foh4KUw8 | 02c3ffb6e3456bda85d17845a764f23a54aad4fd39260d5c8da6493134713862ca | L1xWyxmCkjsB2Z9wnjoZ5TGabeg8KbpZt1PjgVsKA9pn3L7JCiTs

## Bitcoin Testnet

`m/44'/1'/0'/0/i`

index | address                            | public key                                                         | private key
------|------------------------------------|--------------------------------------------------------------------|------------
   0  | mvbu1Gdy8SUjTenqerxUaZyYjmveZvt33q | 030e669acac1f280d1ddf441cd2ba5e97417bf2689e4bbec86df4f831bf9f7ffd0 | cPigoY3hubxpXad1t5WmxpcQpmezLeCcbpA7EpyhDofFnein2wF5
   1  | mopZWqZZyQc3F2Sy33cvDtJchSAMsnLi7b | 0294e3e5e77e22eea0e4c0d30d89beb4db7f69b4bf1ae709e411d6a06618b8f852 | cVN8eHRQh8r9THM2Mu5HCSjx6cfVdssqGL1KeiCKBwUouyf6K5F5
   2  | mgswWyysmViMqYmn5XEj1pVz7rVUftVEBP | 03f5008445568548bd745a3dedccc6048969436bf1a49411f60938ff1938941f14 | cUCiXe6qNE43rEJkSR9e1Tt37W5gQmmGeBiSmXzDbZgxbs5Z5nvK
   3  | momtnzR3XqXgDSsFmd8gkGxUiHZLde3RmA | 029ad0b9519779c540b34fa8d11d24d14a5475546bfa28c7de50573d22a503ce21 | cTAi8RAF2htyUn3F921npbuJLSVdYfpfwqjwLEAPkqvFxLAF716k
   4  | moE1dVYvebvtaMuNdXQKvu4UxUftLmS1Gt | 0313a443e806f25052ac7363adc689fcfa72893f2a51a35ab5e096ed5e6cd8517e | cUmGFJMq5Vkh4rjKHe4J4S5adJH1E8xFJJ2ZARBSZNBVzYwj1RvH
   5  | muXZYKRJFJ2qPegzV2GEzLqHxngJpzMrmT | 02e35cca50cb2626212bce8fdfb988bb33f303b15536e9f84f018e63045dbb84ac | cRHMG1RjgVWTdUNEgDD5oNEvQvBAha5N3YntnT7rC8yekePLGQwR
   6  | mnY26FLTzfC94mDoUcyDJh1GVE3LuAUMbs | 0344e14b3da8f5fe77a5465d0f8fe089d64ed5517d1f1f989edd00f530938a2c22 | cS9rFFu8douRgweuQKLdF4QXpS3H1UeoNxZWTt6K874nt4sy56HX
   7  | mgV9Z3YuSbxGb2b2Y1T6VCqtU2osui7vhG | 035169c4d6a36b6c4f3e210f46d329efa1cb7a67ffce7d62062d4a8a17c23756e1 | cQ1Uh9vXLhaoEgPGUEGMoWACpzrVesmB8G4KdK5vZBnLBifyB29Q
   8  | miLqfMwzis98J5vkjjhTiXVsrkAYwuxmts | 03260dc4925b14addb52b4e62c698b99d2318f3d909477a081ae8e5d94dc3c66d8 | cPwi3WVwjgr422fBeLa22UHwRkQEMZqoJBjevuosqd25yyYekEkF
   9  | mhAacBq3SnXEpoxzEwKqfnQz1iYjxmGg9V | 02b3397d76b093624981b3c3a279c79496d16820f821528b9e403bdfc162b34c3c | cRkkmKXgTmq3Je2B71Rn4HQxeo2hEqvtUeQ5r4Q7eKr5qtq6vzu4

## Dash

`m/44'/5'/0'/0/i`

index | address                            | public key                                                         | private key
------|------------------------------------|--------------------------------------------------------------------|------------
   0  | XdTw4G5AWW4cogGd7ayybyBNDbuB45UpgH | 02936f80cac2ba719ddb238646eb6b78a170a55a52a9b9f08c43523a4a6bd5c896 | XFiosCguxccAvHDasUYWU4mmx4PABR4dDQhk99k8D2N9cKeTRnYq
   1  | XbDjZajDR6Y9uB23GBrMUKX4Lci3PqPXT1 | 027e1c93904ae880921decff4042cee3901c984fb89f33b39e9cf1db544002e6ba | XKCAE7yNMpRyczUehbX1aMQabUqd8g5Hx2FobmkZ2QVUmoRFiKGJ
   2  | XimA3jRAgsksN937ibHrMny6gYy3RChjFs | 0233e06386e60f9f02fcd2b73f1868cdf5a6dfdcebcd6ddc2b337b25feb1053532 | XBscYDmgeg6xuK9tUZk5itHGYRqs5VqpUcu4Yn5An3TJrfz7xfgb
   3  | Xhxyt3pKQKa2HkePA8tP3NSjkWXFgdsjzH | 02012cf694423b0bba8a54596f4923c1c8d74458f884f8d611c7305ca6d25320d1 | XEkU65os4QjrLYy8HKxfEYtFyuy7RqMAGpHDEgSdMjFWtDFDRPid
   4  | XfcGasDgKu2JvVS38b9pWUcfY8yfCaH9dF | 029aaeefff9ae8ea408de41747ac634b49cb90e111b1ac623c3c742dc5ebe42737 | XFaR8NpQjY8wWrUPNmedwvXyFQTJyj75k1jfYh4Bs2sfBzmfTRFz
   5  | XuBYWmRi7q2KrajtXxpmWC5vKMyqCeKMAj | 0211311f13a287ad81adf710cc837f66b2ce432070752c376861d08c7b91eda67e | XEBxR4AExnhCEBXLvQGX9KYg1TwSfngN4CgnzMeY6zeAgLQYxnYH
   6  | XvYXR1LCedCJBXDVuye7wevrmR5ASaQdEq | 03a526d4aa1bd23e3a4d21646b25901d30734b09413eb6462f9251707db0da0f0a | XEo8Haet4xLXrPiEbmRogGXjs8UyeowRUXHrfKkF45m32w18u7hK
   7  | XgrVDtp8X2C3hEPcwcNY31UPvWGfHSBytG | 02c13197de985aff1847a0b0b6fa41d750cdcf3dee03b3e209729ea4a5c99341a7 | XBdQ7YnpdKqyuA5RH2RzwfWnACKgpTJg9STbxrGFmgoKG7URhYGN
   8  | XteBgFFTpGz2NNedqsZEcqPz5m31AQBBYz | 0260ec3beb9f51b4de98fe7f4c13814077603b6211c9e6acdd1c7b0cc796450d79 | XK13VgxcbF3h9Hr9g5bn1uuhtuaNsfEbcFzQxUsowVVeV7LKGQRy
   9  | XpkAwbPzQFdLmuAeYs7BLJfHfXL163QatG | 027df3bcb58f397d99ec944ae74b15f15bf6ab24190e11e7d3fc164107eb36258b | XEq1Rvq4AQKNm52pqiaeUnyG6DZ9Zf6EvrmaZ23Xx2aVrUPYkq6b

## Litecoin

`m/44'/2'/0'/0/i`

index | address                            | public key                                                         | private key
------|------------------------------------|--------------------------------------------------------------------|------------
   0  | LcubERmHD31PWup1fbozpKuiqjHZ4anxcL | 021239d8b20ad1f83d34383e82075d0e11f7a98d06f9e015b56cff61db1e4f8c25 | T5wTndHdQ1sDnQhApMnDrbQV56PEnjZeRMq9ao2aRJALyUdjdExP
   1  | LVWBmHBkCGNjSPHucvL2PmnuRAJnucmRE6 | 02c88e3d1c97fe3ff8eb2f51c37ca66cbfabb6404ddf8158478fae3b8a90e98035 | TAZnJTHBjN7UoXV6v1aGhVkgq7kBbtXe9h1oKND7LHGS4FC5wnKQ
   2  | LUQ91iCfoayy3G3rrFtmF6eVzKQyFSdi2T | 02df4513e0faae40c6e1dbca606c4fe6c3e22d00a30024ea2b01b7da0097a97f82 | T3bxs7ZtsnCrXn1dhYJeRBu2FkLFLf8oyhiahMkhdJwxiDVAUP1e
   3  | LNk7cQvGW5LPgkii3RUX7YQWtX6HjmLbB4 | 03a69bec3139474eec35f7c87d59f8b6ec37423dbcfce5c5d090bd26de604a2b70 | T3SQgQ4byehx5ayT98PE7ZDPr68taysoW2Hm6FyDNWuyKiBpWa3L
   4  | Laz1nYzJwrGcaZDEERENpNVbgte1n3vWLJ | 03ed59a1f1b1e2af17ae00ff373a3cedd8b7bd3c4723a76d469e52ec8caba09337 | T5HGaZgAs35kWheKDFDhdHz1sqNgo3FitUaeBegugamfFxRSjYga
   5  | LcBMCi1mQ71LLvFqN2TMgEgomoc9yqEFzg | 0279224038c76ffcfd1a95ca5d93bcb15c426e18776362fcddd76ff7cc60b9a25d | TAdPGc81ANgVhvEVyK5K5DQee4DEv1dDeXAUCBqn6ocPx5Wdi7qc
   6  | LfyFtx6XekFZ54gATTjrgeFFmMqAboZwvi | 0284b369982fba3be2ef729a96b13806b2372c6f3b5209c44fd5ce29c0a1eca976 | T8WecZVp58aYSvtaw8PAhhx2hxMRBUuvT25dtDyk4x6vE97PHnAY
   7  | Le2twPHqkDEiPrY4uZw6Ufes3e7t4VUZ68 | 032e030b64a7de06fc972b7fb82ca4392c4e5a535ce942f32d6b660b1d58b5176c | T5ojDJgMa3QYZkst9po2B6P5SXyP4vFuBFZBhvyp8E9Ek74yCzoE
   8  | LViaNcv7TTQv8yFFvBnjC63dwVNL3e21c1 | 026b9d73e88ecbcd55a68e0a8e6c651e2543075b85fc6e85386e1a8009e9a55abe | T7YQp9UidMzNSRJHPpCVWeANPpDK5Nz1MhfWuP5sy6YFUB5VJiat
   9  | LfritJSaLhmsRDaZwYSnfpUMNTA8kTweHa | 030ad428a32f117f21cbf581630858b28baa957cb475ac43b7536b1a1da3d00293 | T3WSZzJmXPZB7Mr5vAQ5qmi2b9zFww5oLHqUcyy7371d9ujZb8Kb

## Ethereum

`m/44'/60'/0'/0/i`

index | address                                    | public key                                                         | private key
------|--------------------------------------------|--------------------------------------------------------------------|------------
   0  | 0x73d0385F4d8E00C5e6504C6030F47BF6212736A8 | 03ad8e7eb4f3a7d1a409fa7bdc7b79d8840fe746d3fa9ee17fee4f84631ec1430b | 759e46263f1505994d11142d70027975c9b9fef15489b09bd987eb8a31aba0db
   1  | 0xFA01a39f8Abaeb660c3137f14A310d0b414b2A15 | 03ddeae7da4e54757d3f3038315344709971849a971d2619797d9b8574e373ae9b | 616883a861adaab932634c283e294bcfdc9797757984bc4a15a9484ada947177
   2  | 0x574BbB36871bA6b78E27f4B4dCFb76eA0091880B | 039d09121b995a1f7fe5d30996f6a66fff4688f8eee096faea2957e1fe53923860 | 4f74b7bb78734476e41caa28a397493260103f4ccf0b8a14fe340da5a8a7e22c
   3  | 0xba98D6a5ac827632E3457De7512d211e4ff7e8bD | 0307b32cc46360c9acf750da7acf7dce918aee97dd383236248c9c79b8efbd98fc | a02122e1ac06fb63da2fd293706c91b5839108de765dc9ce3e2d3fb1573bafd4
   4  | 0x1f815D67006163E502b8eD4947C91ad0A62De24e | 03d26a9f183bbb531e140ab3d87bca361706b4c4be7c731e29160cab833e7a9282 | f686b6033ef11ad995ff93b240bd28b04c6dc3a24cb35861b642f7ba969564e0
   5  | 0xf69619a3dCAA63757A6BA0AF3628f5F6C42c50d2 | 02ae8cef29ef6d2ad9b98af746589743c510e4b49784ec1181a079b4b1df3c5211 | 945f0973cd011048b56bb87887ad782c72b09ff181f4af97ad033581ea009a74
   6  | 0xA8664Df3D5E74BE57c19fC7005BBcd0F5328041e | 023ed2881ee76991dafd40e33df96a88a5e929869635cdfc261e947d1e9ca31be9 | 7226389c1de87a3498234ad49e00e48060609b839616de313b341c6245142993
   7  | 0xf2252f414e727d652d5a488fE4BFf7e64478737F | 03b765e9b8ba13ffb45e69f038bf1506aa2ecf1f1824c88551f98e93026c06e6b4 | 640dfbf3d433c548d0a1b9d0d5dc824f72d631cdfca0902ad16788b6b3081067
   8  | 0x5708Ae081b48ad7bA8c50ca3D4fa0238d544D6FA | 031acf557e85d59e0305b8b79d4a5cc5077d09811206be208c00c4e457e7017ac1 | 728a3bd762ac7a25d58eafcd3240bb783304cd323e78b5967a8ecdb4c1e1a982
   9  | 0x12eF7dfb86f6D5E3e0521b72472ca02D2a3814F4 | 02c9f2bf6bbf6244eec9866ad6eb6dec628cbf71f2e2cb77c25d72baeca2c32f61 | 9ee5234da5069eede6135c0f684fd0b633504a04614c740aef47a57a28c0384d

'''
'''--- slip-0015.md ---
# SLIP-0015 : Format for Bitcoin metadata and its encryption in HD wallets

```
Number:  SLIP-0015
Title:   Format for Bitcoin metadata and its encryption in HD wallets
Type:    Standard
Status:  Draft
Authors: Karel Bilek <kb@karelbilek.com>
Created: 2015-01-12
```

## Abstract

SLIP-0015 describes a format to save Bitcoin transaction metadata (labels to accounts, transactions)
in a secure way, with regard to HD wallets, especially (but not limited to) hardware HD wallets.

## Goals

In myTREZOR web wallet, we need to save additional metadata, such as account labels or transaction labels.
We had several goals:

1. data should be safely saved on a untrustworthy cloud service (such as Dropbox)
2. usage should be effortless with secure hardware wallet
3. we should allow other applications to use the files, even when they don't support hardware wallets in general

Because we want effortless usage, we want users to be able to add metadata even when they don't have the device connected, or even when they don't actually own the device.

For this reason, we don't want to sign the changes on the secure device and we want to encrypt everything
on an unsecure device, with the key in memory.
This has the unfortunate consequence of attacker being able to both read and edit metadata if he attacks
the unsecure device.

However, we want at least prevent the cloud storage operator to be able to read the metadata. We want to hide
the metadata itself from the cloud storage operator, and even the XPUBs of the accounts for deniability.

## General design

We first derive a *master key* from hardware device itself, which is shared for all accounts on the device.

We then derive *account key* for every account. This key is a string -- because of the stated goal 3., we want to be able to import it into third party applications without HD wallets.

From the account key, we derive both a filename and a symmetric encryption key. We then save the metadata to the given file, in an encrypted JSON.

## Design details

### Deriving master key

We first get the master key by sending CipherKeyValue to hardware device with following parameters

* path: `m/10015'/0'` (hardened path, see BIP32)
* key: `Enable labeling?`
* value: `fedcba98765432100123456789abcdeffedcba98765432100123456789abcdef` (byte sequence, here in hexadecimal)
* encrypt: true
* ask_on_encrypt, ask_on_decrypt: true
* iv: unset

CipherKeyValue is defined in [SLIP-0011](slip-0011.md).

The master key should be 32 bytes (256 bits) long. It is treated as a pseudo-random byte sequence.

### Deriving account key

From the master key, we derive the account key for every account in the following way:

First, we use the HMAC function:

`HMAC-SHA256(master key, xpub)`

where

* master key is a byte sequence, as defined in the previous section
* xpub is a string, as defined in BIP32. For example:

`xpub6BiVtCpG9fQPxnPmHXG8PhtzQdWC2Su4qWu6XW9tpWFYhxydCLJGrWBJZ5H6qTAHdPQ7pQhtpjiYZVZARo14qHiay2fvrX996oEP42u8wZy`

Then, the result is converted to string using Base58Check encoding, as used in Bitcoin.

The API key is either 49 or 50 characters long.

### Deriving filename and password from account key

We take the account key, *as a string*, and we use HMAC function to derive filename and password for metadata file. Every account has its own metadata file.

* First, we use the HMAC function `HMAC-SHA512(API key, constant)`, where

  * API key is a string (in base58c) from the previous section.

    The API key is taken as a string, so third-party applications can use their own API keys.

  * constant is `0123456789abcdeffedcba9876543210` (byte sequence, here in hexadecimal).

* The result is 64 bytes/512 bits.

  * The first half is used to derive the filename.

    The bytes are converted to hexadecimal, which is the used as a filename, with the extension ".mtdt".

    We are using hexadecimal instead of base64/base58 because of the ambiguity on case-insensitive filesystems.

  * The second half is used as a key for further encryption, as a byte sequence.

* We are using `AES-256-GCM` algorithm for encryption.

  * Random 12 bytes are generated as a IV
  * GCM is used with the full 128-bit tag

* The resulting file looks like this:

  * first 12 bytes of the file are the random IV
  * the next 16 bytes are the GCM authentication tag
  * the rest is the ciphertext

### Data format

The (decrypted) metadata are in following format:

The file is a serialized JSON object with the following keys:

* `version`: version of metadata format, for future backwards compatibility. The version is currently `1.0.0`.
* `accountLabel`: label for the account, a string
* `outputLabels`: labels for outputs, described further
* `addressLabels`: labels for addresses, described further

`outputLabels` has transaction hashes for keys, and for values it has object with output indexes for keys and output labels, as strings, for values. Output indexes start at 0.

`addressLabels` has addresses (in traditional Base58Check encoding) for keys and their labels for values. Only receiving addresses are saved in this object.

All labels can have any unicode letters. Empty string is treated in the software as having no label.

An example object looks like this:

```javascript
{
  "version": "1.0.0",
  "accountLabel": "Saving account", // one file per account, so only 1 label needed
  "addressLabels": {
    "1JAd7XCBzGudGpJQSDSfpmJhiygtLQWaGL": "My receiving address",
    "1GWFxtwWmNVqotUPXLcKVL2mUKpshuJYo": ""  // equivalent to no label set or null
  },
  "outputLabels": {
    "350eebc1012ce2339b71b5fca317a0d174abc3a633684bc65a71845deb596539": {
      "0": "Money to Adam",
      "1": ""  // equivalent to no label set
    },
    "ebbd138134e2c8acfee4fd4edb6f7f9175ee7b4020bcc82aba9a13ce06fae85b": {
      "0": "Feeding bitcoin eater"
    }
  }
}
```

(comments are of course not part of a valid JSON and are included here only for clarity)

## Example

All the example code is in Python2.

### Deriving "master" key

Example code, deriving a master key from a connected TREZOR is in [1_masterkey.py](slip-0015/1_masterkey.py). It requires [python-trezor](https://github.com/trezor/python-trezor) installed and TREZOR connencted

For the "stress test" wallet, defined in SLIP-0014, the master key should be (in hex):

```
20c8bf0701213cdcf4c2f56fd0096c1772322d42fb9c4d0ddf6bb122d713d2f3
```

### Deriving "account" key

Example code, deriving an account key for master key, is in [2_accountkey.py](slip-0015/2_accountkey.py). First argument of the script is xpub of the account, the second argument is the master key from previous step (in hexadecimal).

For the "stress test" wallet, defined in SLIP-0014, and its first account (with the xpub `xpub6BiVtCp...`), the key should be:

```
v5kCxSKLTsnwmgPBeaRyFDWeG9zXouF34L72763zjLrS4LWy8
```

### Deriving filename, decoding

Example code for decryption is in [3_decrypt.py](slip-0015/3_decrypt.py). First and only argument is the account key from previous step. The file has to be in a current working directory (in myTREZOR, we use `~/Dropbox/Apps/TREZOR/` for saving the files).

With the key `v5kCxSKLTsnwmgPBeaRyFDWeG9zXouF34L72763zjLrS4LWy8`, filename `08108c3a46882bb71a5df59f4962e02f89a63efb1cf5f32ded94694528be6cec.mtdt` and the data (in hex)

```
d32a5831b74ba04cdf44309fbb96a1b464fe5d4a27d1e753c30602ba1947
3cca7d8734e8b9442dbd41d530c42e03fea59a5d38b21392f3e4a135eb07
009d5a8b9996055b7aff076918c4ed63ee49db56c5a6b069cac7f221f704
5af7197cdbb562ba004d7a6f06eb7cffd1dfb177fd652e66c2d05d944b58
85d6a104853a0d07e4cebff3513a2f6a1c8ff6f4f98ce222f3d601f1c796
d070b7523649e10242dfe78cb2db50e826dd18b1f65213f5c0748577ecc9
7b8e13ab9cd0c5fe7b76635717c64ad352064a3321df6bbfa2db8ef8c692
55ef9d8a8dfbce9c6ad3029bbdcf1b2bb04795fd96aa95d27e6ca1ed2658
bfb108b44dac2159184d6e3cabe341e2ec5d83756aeb8c408e92fe6ca3e6
3d4c0d644aa2648341506324574d205934c65f54979b1d684f7a2442e8d5
2149ed67449019e6091aa182afcaf5aa1fa8bf3114ee7b46e47b4c6648d1
d1355cefd10081be6e8c7bdf1b2ff14d8896b1ede811fa1aa2c024a6ebf3
6baf0a8d6afa2975bf551e8bc3f03117b42dc4cbe2a6bd700f2fda40c78a
48627ebc130286ba98
```

we should get to file, similar to the one described above.

Similarly, in [4_encrypt.py](slip-0015/4_encrypt.py) there is an example code for encrypting.

'''
'''--- slip-0015/1_masterkey.py ---
#!/usr/bin/env python2

from trezorlib.client import TrezorClient
from trezorlib.transport_hid import HidTransport
from binascii import hexlify, unhexlify

# for more details on this, see python-trezor
client = TrezorClient(HidTransport(HidTransport.enumerate()[0]))

bip32_path = client.expand_path("10015'/0'")
masterkey = client.encrypt_keyvalue(
    bip32_path,
    "Enable labeling?",
    unhexlify("fedcba98765432100123456789abcdeffedcba98765432100123456789abcdef"),
    True,
    True
)

print 'Key:', hexlify(masterkey)

'''
'''--- slip-0015/2_accountkey.py ---
#!/usr/bin/env python2

import hmac, hashlib, base58, binascii, sys

# xpub of the first account
xpub = sys.argv[1]
# hexadecimal representation of the master key
master_hex = sys.argv[2]

master_key = binascii.unhexlify(master_hex)
digest = hmac.new(master_key, xpub, hashlib.sha256).digest()
print base58.b58encode_check(digest)

'''
'''--- slip-0015/3_decrypt.py ---
#!/usr/bin/env python2

import hmac, hashlib, binascii, sys
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.backends import default_backend

key = sys.argv[1]

constant_hex = "0123456789abcdeffedcba9876543210"
constant = binascii.unhexlify(constant_hex)
digest = hmac.new(key, constant, hashlib.sha512).digest()

filename_binary = digest[0:32]

# right now the file needs to be in the working directory
filename = binascii.hexlify(filename_binary) + ".mtdt"

backend = default_backend()
cipherkey = digest[32:64]

with open(filename, "rb") as f:
    iv = f.read(12)
    tag = f.read(16)
    cipher = Cipher(algorithms.AES(cipherkey), modes.GCM(iv, tag), backend=backend)
    decryptor = cipher.decryptor()
    data = "";
    while True:
        block = f.read(16)
        # data are not authenticated yet
        if block:
            data = data + decryptor.update(block)
        else:
            break
    # throws exception when the tag is wrong
    data = data + decryptor.finalize()

print data

'''
'''--- slip-0015/4_encrypt.py ---
#!/usr/bin/env python2

import hmac, hashlib, binascii, sys, os
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.backends import default_backend

key = sys.argv[1]

constant_hex = "0123456789abcdeffedcba9876543210"
constant = binascii.unhexlify(constant_hex)
digest = hmac.new(key, constant, hashlib.sha512).digest()

filename_binary = digest[0:32]

# right now the file needs to be in the working directory
filename = binascii.hexlify(filename_binary) + ".mtdt"

# hardcoded
data = """{
    "accountLabel": "Saving account",
    "addressLabels": {
      "1JAd7XCBzGudGpJQSDSfpmJhiygtLQWaGL": "My receiving address",
      "1GWFxtwWmNVqotUPXLcKVL2mUKpshuJYo": ""
    },
    "version": "1.0.0",
    "outputLabels": {
      "350eebc1012ce2339b71b5fca317a0d174abc3a633684bc65a71845deb596539": {
        "0": "Money to Adam"
      },
      "ebbd138134e2c8acfee4fd4edb6f7f9175ee7b4020bcc82aba9a13ce06fae85b": {
        "0": "Feeding bitcoin eater"
      }
    }
  }"""

backend = default_backend()
cipherkey = digest[32:64]

iv = os.urandom(12)
cipher = Cipher(algorithms.AES(cipherkey), modes.GCM(iv), backend=backend)
encryptor = cipher.encryptor()

ctext = encryptor.update(data) + encryptor.finalize()
tag = encryptor.tag

with open(filename, "wb") as f:
    f.write(iv)
    f.write(tag)
    f.write(ctext)

'''
'''--- slip-0016.md ---
# SLIP-0016 : Format for password storage and its encryption

```
Number:  SLIP-0016
Title:   Format for password storage and its encryption
Type:    Standard
Status:  Draft
Authors: Peter Jensen <peteritsjustadream@gmail.com>
Created: 2016-18-02
```

## Abstract

SLIP-0016 describes simple encryption concept for hardware device for secure storage of passwords.

## General design

At first, we derive a master key from HW device itself, which is divided in two parts.
First part is hashed and used as a name of storage file.
Second part is used for primary storage encryption.

Storage file is encrypted JSON object, which contains configuration, tags and separate entries. Each entry has other two encrypted properties derivated from  device to provide higher level of security with low risk of leaks.

## Design details

### Deriving master key

We derive masterKey from hardware device by sending cipherKeyValue with following params:

* path: `m/10016'/0` (hardened path, see BIP32)
* ENC_KEY: `'Unlock encrypted storage?'` (max length message is 256 bytes)
* ENC_VALUE: `'2d650551248d792eabf628f451200d7f51cb63e46aadcbb1038aacb05e8c8aee2d650551248d792eabf628f451200d7f51cb63e46aadcbb1038aacb05e8c8aee'` (in hexadecimal (128 /2), max length is 1024 bytes)
* encrypt: `true`
* ask_on_encrypt: `true`
* ask_on_decrypt: `true`
* iv: unset

JS EXAMPLE:

```javascript
session.cipherKeyValue(
[(10016 | 0x80000000) >>> 0, 0],
'Unlock encrypted storage?',
'2d650551248d792eabf628f451200d7f51cb63e46aadcbb1038aacb05e8c8aee2d650551248d792eabf628f451200d7f51cb63e46aadcbb1038aacb05e8c8aee',
true, true, true)
```

CipherKeyValue is defined in [SLIP-0011](slip-0011.md).

### Deriving file name

From the first half of master key, we derive the file name for every user/device in the following way:
First, we use the HMAC function:

`HMAC-SHA256(fileKey, FILENAME_MESS)`

where:

- fileKey is the first half of masterKey (`masterKey.substring(0, masterKey.length / 2)`)
- FILENAME_MESS is a constant string `'5f91add3fa1c3c76e90c90a3bd0999e2bd7833d06a483fe884ee60397aca277a'`

The output result is digested to HEX string. After, we append extension `'.pswd'`

EXAMPLE RESULT: `a80387a2222f4360f71fd2165368c6ed91b26287d9bc1ce8be71e64e6b216a4f.pswd`

### Deriving encryption key and file level encryption

As an encryption key is used the SECOND half (32 bytes) of master key for the first level of data file encryption. Encryption key is in HEX string.

For encrypt/decrypt we are using `AES-256-GCM` algorithm.

- Input Vector (IV) is 12 randomly generated bytes
- GCM is used with full 128-bit autentication tag (authTag)

[more info](https://nodejs.org/api/crypto.html#crypto_crypto_createcipheriv_algorithm_key_iv)

The result output stored in file is:

- first 12 bytes of the file is randomly generated IV
- next 16 bytes is the GCM authTag
- the rest is output ciphertext

[more info](https://nodejs.org/api/crypto.html#crypto_crypto_createdecipheriv_algorithm_key_iv)

### Data format

(Decrypted) data file is serialized JSON object with the following keys:

* `version`: for future backwards compatibility and data storage manipulation
* `config`: for remembering personal setup of application
* `tags`: contain set of labels with their icons (from icomoon set). Default tag is **All** and it is only tag, unable to edit or delete.

```javascript
{title:"My social networks", icon:"person", active:"active"}
```

* `entries`: is object of all password entries encrypted second time

```javascript
{
    "title": "http://wwww.github.com",
    "username": "Satoshi Nakamoto",
    "nonce": "8688105887642a3cbb61889d8762432ef864df107e097d2b19e93c8d808c2e21",
    "note": "public note",
    "password": {},
    "safe_note": {},
    "tags": [1]
}
```

### Entry level encryption

Every entry contains keys from upper example.

- `title`: title is represented as string. If given string is matching URL, it will be shown on device as domain without protocol prefix.
- `username`: string, will be passed to device, in encryption/decryption process
- `nonce`: hidden generated string which is output of cipherKeyValue over Title + Username key and random values
- `password`: is buffer array output of plain string and nonce (encryption process described later)
- `safe_note`: is also buffer array output of plain string and nonce (also described later)
- `note`: is plain UTF8 string
- `tags`: is array of Tags key values

Step by step entry encryption:

1. Generate random 32 bytes buffer and convert to HEX string inadequately called `nonce`
2. Set key as `'Unlock ' + title + ' for user ' + username + '?'`
3. Ask device for `cipherKeyValue`, where path is the same as in the deriving file name, key is described in second step and enc_value is our `nonce` from the first step. Do not forget to setup properly other three bool values!

EXAMPLE:

```javascript
session.cipherKeyValue(
[(10016 | 0x80000000) >>> 0, 0], // same path
'Unlock github.com for user Satoshi Nakamoto?',
'2d650551248d792eabf628f451200d7f51cb63e46aadcbb1038aacb05e8c8aee2d650551248d792eabf628f451200d7f51cb63e46aadcbb1038aacb05e8c8aee',
true,   //encrypt? - has to be TRUE in encryption
false,  //askOnEncrypt? is the same in encryption and decryption
true) // askOnDecrypt? we want this becuase otherwise somebody could rob us!
```

4. Then we use our famous `nonce` from the first step in `AES-256-GCM` algorithm encryption for `password` string and `safe_note` string. Process of encryption is the same as in the deriving encryption key and file level encryption. So basically we get some Buffer array output with 12 bytes of IV and 16 bytes of GCM authTag and the rest is cipherText.
5. Output of each encryption is stored to appropriate keys, just instead of generated `nonce` we store result from third step ( `cipherKeyValue`) which we later use for decryption process

### Entry decryption

1. We ask device for the same  `cipherKeyValue` as in encryption process, just instead of  `nonce`, we use our encrypted result and boolean value  `encrypt?` is **false**!

EXAMPLE:

```javascript
session.cipherKeyValue(
[(10016 | 0x80000000) >>> 0, 0], // same path
'Unlock github.com for user Satoshi Nakamoto?',
'8688105887642a3cbb61889d8762432ef864df107e097d2b19e93c8d808c2e21',
false,   //encrypt? - has to be FALSE in decryption
false,  //askOnEncrypt? is the same in encryption and decryption
true) // askOnDecrypt? we want this becuase otherwise somebody could rob us!
```

2. Other steps are the same as in entry encryption, we just symetrically decrypt values of `password` and  `safe_note` via `AES-256-GCM` algorithm. Size of IV and authTag for AES is the same as in encryption. Beware on cipher Key data type - it must be hex. Output is in JSON.

Check example of password reader implementation in Python: [pwd_reader.py](https://github.com/trezor/python-trezor/blob/master/tools/pwd_reader.py) - there is an example code for decryption.

'''
'''--- slip-0017.md ---
# SLIP-0017 : ECDH using deterministic hierarchy

```
Number:  SLIP-0017
Title:   ECDH using deterministic hierarchy
Type:    Standard
Status:  Draft
Authors: Roman Zeyde <roman.zeyde@gmail.com>
Created: 2016-05-29
```

## Abstract

This document describes a method for implementing Elliptic Curve
Diffie-Hellman algorithm, using a determinstic hierarchy.

## Motivation

Using Deterministic Hierarchy for encryption and decryption is ideal,
because the same concepts of easy backup that relate to backing up
deterministic wallets can be applied to backing up private keys.

## Service Identity

Let's introduce the service identity. It consists of two elements:

a) RFC 3986 URI `proto://[user@]host[:port][/path]`

Examples:

* `https://example.com`
* `ftp://public@example.com/pub`
* `ssh://root@example.com:2222`

b) index (32-bit unsigned integer)

The index is used so one can generate more keys corresponding to the same URI.

## HD Structure

1. First concatenate `index` with the URI (`uri`). Use little endian for `index`.

2. Compute the SHA256 hash of the result (`hash`).

3. Truncate `hash` to 128 bits (`hash128`)

4. Split `hash128` into four 32-bit integers `A`, `B`, `C`, `D`. Use little endian for each.

5. Set highest bits of numbers `A`, `B`, `C`, `D` to 1 (e.g. logical OR with 0x80000000) to harden

6. Derive the HD node `m/17'/A'/B'/C'/D'` according to BIP32.

## Shared secret generation

Suppose that Alice and Bob need to agree on a shared secret.

First, they agree on a specific elliptic curve and generate
two public keys: `P1 = k1*G` for Alice and `P2 = k2*G` for Bob.

In order to derive a shared secret, Alice retrieves Bob's public key (P2).
Then, she calls `Q = GetECDHSessionKey(P2)` API on her TREZOR, to compute
`Q = k1*P2`, by multiplying Bob's public key `P2` (as an elliptic curve point)
by her private key `k1` (as a 256-bit scalar).

The result is the elliptic curve point `Q = k1*k2*P`, which can be computed in a
similar way by Bob (since `Q = k2*P1`), is used to derive a shared secret.

## References

* [BIP-0032: Hierarchical Deterministic Wallets](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki)
* [BIP-0043: Purpose Field for Deterministic Wallets](https://github.com/bitcoin/bips/blob/master/bip-0043.mediawiki)
* [RFC 3986: Uniform Resource Identifier (URI): Generic Syntax](https://tools.ietf.org/html/rfc3986)

'''
'''--- slip-0019.md ---
# SLIP-0019 : Proof of Ownership

```
Number:  SLIP-0019
Title:   Proof of Ownership
Type:    Standard
Status:  Draft
Authors: TBD
Created: 2019-04-25
```

## Abstract

This is a section for an abstract.

## Motivation

This is a section for a motivation.

## Body

This is a section for a body. The title of the section should be changed
and the section can be split into multiple sections and subsections.

## References

This is a section for references such as links to other documents (BIP or SLIP)
or to reference implementations.

'''
'''--- slip-0020.md ---
# SLIP-0020 : Proof of User Confirmation

```
Number:  SLIP-0020
Title:   Proof of User Confirmation
Type:    Standard
Status:  Draft
Authors: TBD
Created: 2019-04-25
```

## Abstract

This is a section for an abstract.

## Motivation

This is a section for a motivation.

## Body

This is a section for a body. The title of the section should be changed
and the section can be split into multiple sections and subsections.

## References

This is a section for references such as links to other documents (BIP or SLIP)
or to reference implementations.

'''
'''--- slip-0021.md ---
# SLIP-0021 : Hierarchical derivation of symmetric keys

```
Number:  SLIP-0021
Title:   Hierarchical derivation of symmetric keys
Type:    Standard
Status:  Draft
Authors: Andrew R. Kozlik <andrew.kozlik@satoshilabs.com>
         Ondrej Vejpustek <ondrej.vejpustek@satoshilabs.com>
         Pavol Rusnak <stick@satoshilabs.com>
Created: 2019-06-25
```

## Abstract

This document describes a method of deriving a hierarchy of symmetric keys from a master secret, such as the recovery seed used in cryptocurrency wallets.

## Motivation

The [BIP-0032](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki) and [SLIP-0010](https://github.com/satoshilabs/slips/blob/master/slip-0010.md) specifications define how to derive a hierarchy of private/public key pairs from a master seed for the elliptic curves secp256k1, NIST P-256 and ed25519. However, there does not exist any similar specification for the derivation of keys for symmetric-key algorithms, which are needed for example in password encryption or encryption of Bitcoin metadata. [SLIP-0011](https://github.com/satoshilabs/slips/blob/master/slip-0010.md) deals with this problem by first using BIP-0032 to derive a secp256k1 private key and then deriving the symmetric key from this private key. However, BIP-0032 was not designed to be used in this way and it also implies that an implementation of SLIP-0011 requires secp256k1 arithmetic, which should not be needed for symmetric key derivation. The purpose of this specification is to lay down a common framework for the deterministic derivation of a hierarchy of symmetric keys from a master seed.

## Master node generation

We adapt the master node generation from BIP-0032 and SLIP-0010. To achieve proper domain separation from the secp256k1, NIST P-256 and ed25519 key hierarchies, we use the string “Symmetric key seed” instead of the curve name. Let *S* be the master secret, such as that defined in [SLIP-0039](https://github.com/satoshilabs/slips/blob/master/slip-0039.md) or the binary seed defined in [BIP-0039](https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki). Then the master node *m* is derived as follows:

```
m = HMAC-SHA512(key = b"Symmetric key seed", msg = S)
```

The master node is used to derive child nodes, each of which can in turn be used to derive lower-level child nodes of their own and so on. Each node is associated with a 256-bit symmetric key. The master node is thus the root of a key tree.

## Child node derivation

The child nodes of a parent node *N* are identified by a variable-length byte string called a *label*. The labels of all nodes which are derived from the master node, i.e., the first-level labels, MUST identify the purpose of the subordinate nodes. The purpose determines the further structure beneath the node. This label must be sufficiently unique to avoid collisions between applications. Examples include the ASCII encoding of the strings "BIP-9999", "SLIP-9999" or "FIDO2 Trezor Credential ID".

The derivation function is defined as:

```
ChildNode(N, label) = HMAC-SHA512(key = N[0:32], msg = b"\x00" + label),
```

where *N*[0:32] is the first 32 bytes of node data. The key for a given node is defined as the last 32 bytes of the node data:

```
Key(N) = N[32:64]
```

## Example

This example shows several keys derived from the master secret

```
S = c76c4ac4f4e4a00d6b274d5c39c700bb4a7ddc04fbc6f78e85ca75007b5b495f74a9043eeb77bdd53aa6fc3a0e31462270316fa04b8c19114c8798706cd02ac8
```

which is the binary seed obtained from the BIP-0039 mnemonic "all all all all all all all all all all all all" with an empty passphrase.

```
Key(m) = dbf12b44133eaab506a740f6565cc117228cbf1dd70635cfa8ddfdc9af734756
Key(m/"SLIP-0021") = 1d065e3ac1bbe5c7fad32cf2305f7d709dc070d672044a19e610c77cdf33de0d
Key(m/"SLIP-0021"/"Master encryption key") = ea163130e35bbafdf5ddee97a17b39cef2be4b4f390180d65b54cf05c6a82fde
Key(m/"SLIP-0021"/"Authentication key") = 47194e938ab24cc82bfa25f6486ed54bebe79c40ae2a5a32ea6db294d81861a6
```

## Design rationale

This standard is designed in accordance with [NIST SP 800-108](https://doi.org/10.6028/NIST.SP.800-108) Recommendation for Key Derivation Using Pseudorandom Functions.

### Key length

Each node is associated with a 256-bit symmetric key. This key length is considered sufficiently secure for a number of years to come, see [keylength.com](https://www.keylength.com/en/compare/). It is also compatible with all major symmetric-key algorithms in use today, such as AES-256, ChaCha20Poly1305 or HMAC. The key derivation functions specified in NIST SP 800-108 allow for the derivation of variable length keys. Nevertheless, since such a feature appears to be of little use, a fixed key length was chosen to keep the implementation of this SLIP as simple as possible.

### Key separation

The fact that each node is associated with a key of its own and uses a separate key for the derivation of child nodes is based on the principle that a single key should be used for only one purpose, e.g., encryption, integrity authentication, key derivation. The reasoning behind this principle is well known:

1. The use of the same key for two different cryptographic processes may weaken the security provided by one or both of the processes.
2. Limiting the use of a key limits the damage that could be done if the key is compromised.
3. Some uses of keys interfere with each other.

Most importantly, the scheme is designed so that the knowledge of Key(*N*) is independent of the ability to derive child nodes of *N*. Thus the compromise of Key(*N*) does not jeopardize any child keys of *N*.

### Labeling child nodes

In the BIP-0032 specification child nodes are indexed by a 31-bit integer. This is well suited for hierarchical wallets, but there are instances where it would be more convenient to be able to specify the derived key using a randomly generated value with sufficient entropy to avoid collisions. For such purposes a 31-bit index is insufficient. A variable-length byte string allows maximum flexibility in labeling nodes, for example by using a printable string, an encoded integer index or a 256-bit random value.

### Child node derivation

Since this derivation scheme is intended to be fully deterministic once the master secret is known, the context and separator as defined in NIST SP 800-108 are omitted from the HMAC-SHA512 input. The counter and the length of the derived key are also omitted from the input, because they are constant.

The value of the message entering the HMAC-SHA512 function is a null byte followed by the label of the child node. The reason for this is that the first byte of the message value is reserved for future use. It can be used for domain separation in case support for other types of labels is desired.

## References

* [BIP-0032: Hierarchical Deterministic Wallets](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki)
* [SLIP-0010: Universal private key derivation from master private key](https://github.com/satoshilabs/slips/blob/master/slip-0010.md)
* [SLIP-0011: Symmetric encryption of key-value pairs using deterministic hierarchy](https://github.com/satoshilabs/slips/blob/master/slip-0010.md)
* [NIST Special Publication 800-108: Recommendation for Key Derivation Using Pseudorandom Functions](https://doi.org/10.6028/NIST.SP.800-108)

'''
'''--- slip-0022.md ---
# SLIP-0022 : FIDO2 credential ID format for HD wallets

```
Number:  SLIP-0022
Title:   FIDO2 credential ID format for HD wallets
Type:    Standard
Status:  Draft
Authors: Andrew R. Kozlik <andrew.kozlik@satoshilabs.com>
Created: 2019-07-19
```

## Abstract

This is a section for an abstract.

## Motivation

This is a section for a motivation.

## Body

This is a section for a body. The title of the section should be changed
and the section can be split into multiple sections and subsections.

## References

This is a section for references such as links to other documents (BIP or SLIP)
or to reference implementations.

'''
'''--- slip-0023.md ---
# SLIP-0023 : Cardano HD master node derivation from a master seed

```
Number:  SLIP-0023
Title:   Cardano HD master node derivation from a master seed
Type:    Standard
Status:  Draft
Authors: Andrew R. Kozlik <andrew.kozlik@satoshilabs.com>
Created: 2019-07-24
```

## Abstract

This specification describes how to derive the master node, aka root node, of the key tree in Cardano hierarchical deterministic wallets.

## Motivation

Cryptocurrency wallets generally work by combining a [BIP-0039](https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki) mnemonic or a set of [SLIP-0039](https://github.com/satoshilabs/slips/blob/master/slip-0039.md) mnemonics with a user-entered passphrase to generate a master seed. This master seed is then used to derive a hierarchy of cryptographic keys as defined in [BIP-0032](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki) and [SLIP-0010](https://github.com/satoshilabs/slips/blob/master/slip-0010.md).

Cardano hierarchical deterministic wallets use an extended private key which requires them to implement a custom adaptation of the BIP-0032 child key derivation scheme. The Cardano wallets currently in existence implement several mutually incompatible schemes for the derivation of the master node from a BIP-0039 mnemonic and passphrase. Unfortunately all of these derivation schemes fail to separate the derivation of the seed from the derivation of the key tree, making it impossible to integrate them with new seed derivation schemes. This specification aims to rectify this by defining a new scheme for the derivation of the master node from a seed. The new scheme is primarily intended for use with SLIP-0039 Shamir's Secret-Sharing for Mnemonic Codes.

## Cardano universal master node derivation

This scheme adapts the master node derivation used in BIP-0032 and SLIP-0010 by defining a new curve name "ed25519 cardano seed" for the Ed25519 curve with the Cardano deterministic key hierarchy. The curve name is used as salt in BIP-0032 and SLIP-0010 when deriving the master node from the seed. This is necessary to ensure proper domain separation between different elliptic curves or different types of key hierarchies. The root extended private key (*k*<sub>L</sub>,&nbsp;*k*<sub>R</sub>) is computed by taking the SHA-512 hash of the root private key *I*<sub>L</sub>, modifying certain bits to make it a valid EdDSA key and clearing the third highest bit of *k*<sub>L</sub> to ensure compatibility with Cardano child key derivation.

1. Let *S* be a seed byte sequence such as the master secret from SLIP-0039.
2. Calculate *I* := HMAC-SHA512(Key = "ed25519 cardano seed", Data = *S*).
3. Split *I* into two 32-byte sequences, *I*<sub>L</sub> := *I*[0:32] and *I*<sub>R</sub> := *I*[32:64].
4. Let *k* := SHA-512(*I*<sub>L</sub>).
5. Modify *k* by assigning *k*[0] := *k*[0] & 0xf8 and *k*[31] := (*k*[31] & 0x1f) | 0x40.
6. Interpret *k*[0:32] as a 256-bit integer *k*<sub>L</sub> in little-endian byte order. Let *k*<sub>R</sub> := *k*[32:64] and use (*k*<sub>L</sub>,&nbsp;*k*<sub>R</sub>) as the root extended private key and *c* := *I*<sub>R</sub> as the root chain code.

## Cardano Icarus master node derivation

The Icarus master node derivation scheme, aka V2 derivation scheme, is commonly used with BIP-0039 in Cardano wallets. Since there does not exist any specification of this scheme, its description is included below for completeness.

1. Let *M* be a BIP-0039 mnemonic and *P* the passphrase entered by the user.
2. Determine the initial entropy *E* that was used to generate *M*.
3. Compute *S* := PBKDF2-HMAC-SHA512(password = *P*, salt = *E*, iterations = 4096, dkLen = 96).
4. Modify *S* by assigning *S*[0] := *S*[0] & 0xf8 and *S*[31] := (*S*[31] & 0x1f) | 0x40.
5. Interpret *S*[0:32] as a 256-bit integer *k*<sub>L</sub> in little-endian byte order. Let *k*<sub>R</sub> := *S*[32:64] and use (*k*<sub>L</sub>,&nbsp;*k*<sub>R</sub>) as the root extended private key and *c* := *S*[64:96] as the root chain code.

## Child key derivation

The derivation of child keys in the Cardano deterministic key hierarchy is specified in [BIP32-Ed25519](https://cardanolaunch.com/assets/Ed25519_BIP.pdf).

## Compliance

When SLIP-0039 is used as the source of the master secret the master node for the Cardano deterministic key hierarchy MUST be derived using the Cardano universal master node derivation scheme as specified [above](#cardano-universal-master-node-derivation).

When BIP-0039 is used as the source of the master secret the master node for the Cardano deterministic key hierarchy SHOULD be derived using the Cardano Icarus master node derivation scheme to maintain compatibility with existing wallets.

## Test vectors

In the following test vectors the values of *S*, *k*<sub>R</sub>, *A* and *c* are each encoded as a string containing two hexadecimal digits for each byte. The value of *k*<sub>L</sub> is encoded as an integer in base 10.

### Test vector 1 for Cardano universal master node derivation (128 bits)

Let the seed be *S* = "578d685d20b602683dc5171df411d3e2".

Note that *S* is the master secret obtained from the following three SLIP-0039 share mnemonics with the passphrase "TREZOR":

* "extra extend academic bishop cricket bundle tofu goat apart victim enlarge program behavior permit course armed jerky faint language modern",
* "extra extend academic acne away best indicate impact square oasis prospect painting voting guest either argue username racism enemy eclipse",
* "extra extend academic arcade born dive legal hush gross briefing talent drug much home firefly toxic analysis idea umbrella slice".

The root extended private keys is:<br/>
*k*<sub>L</sub> = 38096432269777187972282727382530464140043628323029465813805073381215192153792<br/>
*k*<sub>R</sub> = "4064253ffefc4127489bce1b825a47329010c5afb4d21154ef949ef786204405"

The root public key is:<br/>
*A* = "83e3ecaf57f90f022c45e10d1b8cb78499c30819515ad9a81ad82139fdb12a90"

The root chain code is:<br/>
*c* = "22c12755afdd192742613b3062069390743ea232bc1b366c8f41e37292af9305"

The address for the derivation path 44'/1815'/0'/0/0 is:<br/>
Ae2tdPwUPEYxF9NAMNdd3v2LZoMeWp7gCZiDb6bZzFQeeVASzoP7HC4V9s6

The address for the derivation path 44'/1815'/0'/0/1 is:<br/>
Ae2tdPwUPEZ1TjYcvfkWAbiHtGVxv4byEHHZoSyQXjPJ362DifCe1ykgqgy

The address for the derivation path 44'/1815'/0'/0/2 is:<br/>
Ae2tdPwUPEZGXmSbda1kBNfyhRQGRcQxJFdk7mhWZXAGnapyejv2b2U3aRb

### Test vector 2 for Cardano universal master node derivation (256 bits)

Let the seed be *S* = "a055b781aac0c9dc1bfb7d803bc8ffd5d4392e506db2e4a5a93f0aba958c5be7".

Note that this is the master secret obtained from the two SLIP-0039 share mnemonics with the passphrase "TREZOR":

* "hobo romp academic axis august founder knife legal recover alien expect emphasis loan kitchen involve teacher capture rebuild trial numb spider forward ladle lying voter typical security quantity hawk legs idle leaves gasoline",
* "hobo romp academic agency ancestor industry argue sister scene midst graduate profile numb paid headset airport daisy flame express scene usual welcome quick silent downtown oral critical step remove says rhythm venture aunt".

The extended private keys is:<br/>
*k*<sub>L</sub> =
35870817594148037193235249761081259065186522922583196642112477624627719791504
<br/>
*k*<sub>R</sub> = "f9d99bf3cd9c7e12663e8646afa40cb3aecf15d91f2abc15d21056c6bccb3414"

The root public key is:<br/>
*A* = "eea170f0ef97b59d22907cb429888029721ed67d3e7a1b56b81731086ab7db64"

The root chain code is:<br/>
*c* = "04f1de750b62725fcc1ae1b93ca4063acb53c486b959cadaa100ebd7828e5460"

The address for the derivation path 44'/1815'/0'/0/0 is:<br/>
Ae2tdPwUPEYyDD1C2FbVJFAE3FuAxLspfMYt29TJ1urnSKr57cVhEcioSCC

The address for the derivation path 44'/1815'/0'/0/1 is:<br/>
Ae2tdPwUPEZHJGtyz47F6wD7qAegt1JNRJWuiE36QLvFzeqJPBZ2EBvhr8M

The address for the derivation path 44'/1815'/0'/0/2 is:<br/>
Ae2tdPwUPEYxD9xNPBJTzYmtFVVWEPB6KW4TCDijQ4pDwU11wt5621PyCi4

## References

* [BIP-0032](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki): Hierarchical Deterministic Wallets
* [SLIP-0010](https://github.com/satoshilabs/slips/blob/master/slip-0010.md): Universal private key derivation from master private key
* [BIP-0039](https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki): Mnemonic code for generating deterministic keys
* [SLIP-0039](https://github.com/satoshilabs/slips/blob/master/slip-0039.md): Shamir's Secret-Sharing for Mnemonic Codes
* D. Khovratovich and J. Law: [BIP32-Ed25519 Hierarchical Deterministic Keys over a Non-linear Keyspace](https://cardanolaunch.com/assets/Ed25519_BIP.pdf)

'''
'''--- slip-0032.md ---
# SLIP-0032 : Extended serialization format for BIP-32 wallets

```
Number:  SLIP-0032
Title:   Extended serialization format for BIP-32 wallets
Type:    Standard
Status:  Draft
Authors: Pavol Rusnak <stick@satoshilabs.com>
Created: 2017-09-06
```

## Abstract

BIP-0032 already defines a serialization format for hierarchical deterministic
keys.  In this document we present extended version of the serialization
format, which aims to overcome some limitations of the original proposal.

## Changes

First modification is including full BIP-32 path of the exported node, so
wallet can check whether the provided key was exported from expected part of
the deterministic hierarchy.

Second modification is removal of fingerprint field, which was barely used by
wallets and introduces unnecessary extra computation steps during serialization
of the key. Sometimes it is even not possible to compute the fingerprint at all
(when the parent key is unknown).

Last modification is the change from Base58 encoding to Bech32 encoding, which
is more efficient in many areas.

## Serialization format

Extended public and private keys are serialized as follows:

* 1 byte: depth: 0x00 for master nodes, 0x01 for level-1 derived keys, ...
* 4 * depth bytes: serialized BIP-32 path; each entry is encoded as 32-bit unsigned integer, most significant byte first
* 32 bytes: the chain code
* 33 bytes: the public key or private key data (ser<sub>P</sub>(K) for public keys, 0x00 || ser<sub>256</sub>(k) for private keys)

This structure is encoded using Bech32 format described in BIP-0173. We will
use 'xpub' human-readable part for extended public keys and 'xprv' for extended
private keys.

## Test vectors

<pre>
mnemonic = abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon about

m :

legacy_bip32_xprv = xprv9s21ZrQH143K3GJpoapnV8SFfukcVBSfeCficPSGfubmSFDxo1kuHnLisriDvSnRRuL2Qrg5ggqHKNVpxR86QEC8w35uxmGoggxtQTPvfUu
legacy_bip32_xpub = xpub661MyMwAqRbcFkPHucMnrGNzDwb6teAX1RbKQmqtEF8kK3Z7LZ59qafCjB9eCRLiTVG3uxBxgKvRgbubRhqSKXnGGb1aoaqLrpMBDrVxga8

slip32_prv_hex    = 007923408dadd3c7b56eed15567707ae5e5dca089de972e07f3b860450e2a3b70e001837c1be8e2995ec11cda2b066151be2cfb48adf9e47b151d46adab3a21cdf67
slip32_pub_hex    = 007923408dadd3c7b56eed15567707ae5e5dca089de972e07f3b860450e2a3b70e03d902f35f560e0470c63313c7369168d9d7df2d49bf295fd9fb7cb109ccee0494

slip32_prv_bech32 = xprv1qpujxsyd4hfu0dtwa524vac84e09mjsgnh5h9crl8wrqg58z5wmsuqqcxlqmar3fjhkprndzkpnp2xlze76g4hu7g7c4r4r2m2e6y8xlvu566tn6
slip32_pub_bech32 = xpub1qpujxsyd4hfu0dtwa524vac84e09mjsgnh5h9crl8wrqg58z5wmsuq7eqte474swq3cvvvcncumfz6xe6l0j6jdl990an7mukyyuemsyjszuwypl

m/0 :

legacy_bip32_xprv = xprv9ukW2UsmeQP9NB14w61cimzwEKbUJxHCypMb1PpEafjCETz69a6tp8aYdMkHfz6U49Ut262f9MpGZkCna1zDhEfW2BGkSehvrxd5ueR4TBe
legacy_bip32_xpub = xpub68jrRzQfUmwSaf5Y37Yd5uwfnMRxiR14M3HBonDr91GB7GKEh7R9Mvu2UeCtbASfXZ9FdNo9FwFx6a37HNXUDiXVQFXuadXmevRBa3y7rL8

slip32_prv_hex    = 0100000000e0e6503ac057cf5dc76e0735e56dd44d193b2e9e271cc2d46bc759c99b021e3c00baa89a8bdd61c5e22b9f10601d8791c9f8fc4b2fa6df9d68d336f0eb03b06eb6
slip32_pub_hex    = 0100000000e0e6503ac057cf5dc76e0735e56dd44d193b2e9e271cc2d46bc759c99b021e3c0376bf533d4b15510fa9f4124b6e48616f07debcf2ef0cfb185cdc4a576450b475

slip32_prv_bech32 = xprv1qyqqqqqqurn9qwkq2l84m3mwqu672mw5f5vnkt57yuwv94rtcavunxczrc7qpw4gn29a6cw9ug4e7yrqrkrerj0cl39jlfkln45dxdhsavpmqm4krfqykk
slip32_pub_bech32 = xpub1qyqqqqqqurn9qwkq2l84m3mwqu672mw5f5vnkt57yuwv94rtcavunxczrc7qxa4l2v75k923p75lgyjtdeyxzmc8m6709mcvlvv9ehz22aj9pdr4m6lwmk

m/1 :

legacy_bip32_xprv = xprv9ukW2UsmeQP9PQFT4K5ZcUPAXZy7hZPqMAX94Q2rTNA5qRznspNy8q87j3hc5eWWS7hS7sGVpEiGbMHLqxubZFqAASWSBuyVDqE9jxqjD9E
legacy_bip32_xpub = xpub68jrRzQfUmwSbtKvALcZycKu5boc727giPSjrnSU1hh4iEKwRMhDgdSbaK3Ac8hngo2Fgbz9B5S4V1jbkR8ffjFLjTBWSvALDZPzTLqeMqb

slip32_prv_hex    = 01000000015c48917d6838b666aeb11eac7c4f98f807779b57c7522e38509719eeb1e7a59200c1beaff0c4db984670a40c69c2947b9d33cd7f6e749c67e1fcb5c6118dda1282
slip32_pub_hex    = 01000000015c48917d6838b666aeb11eac7c4f98f807779b57c7522e38509719eeb1e7a59202ea2649b3512b9a859ab658a85e2989a7ae39b2518877b2dc0f2b44b785d5788d

slip32_prv_bech32 = xprv1qyqqqqqpt3yfzltg8zmxdt43r6k8cnuclqrh0x6hcafzuwzsjuv7av085kfqpsd74lcvfkucgec2grrfc228h8fne4lkuayuvlsledwxzxxa5y5zefalyg
slip32_pub_bech32 = xpub1qyqqqqqpt3yfzltg8zmxdt43r6k8cnuclqrh0x6hcafzuwzsjuv7av085kfq963xfxe4z2u6skdtvk9gtc5cnfaw8xe9rzrhktwq726yk7za27ydw88adn

m/0' :

legacy_bip32_xprv = xprv9ukW2Usuz4v7Yd2EC4vNXaMckdsEdgBA9n7MQbqMJbW9FuHDWWjDwzEM2h6XmFnrzX7JVmfcNWMEVoRauU6hQpbokqPPNTbdycW9fHSPYyF
legacy_bip32_xpub = xpub68jrRzQopSUQm76hJ6TNtiJMJfhj38u1X12xCzExrw388hcN443UVnYpswdUkV7vPJ3KayiCdp3Q5E23s4wvkucohVTh7eSstJdBFyn2DMx

slip32_prv_hex    = 0180000000f1c03f5ff97108912fd56761d3fada8879e4173aba45f10da4bbd94b1c49716000c08cf331996482c06db3d259ff99be4bf7083824d53185e33191ee7ceb2bf96f
slip32_pub_hex    = 0180000000f1c03f5ff97108912fd56761d3fada8879e4173aba45f10da4bbd94b1c497160027f1d87730e460e921b382242911565bf93daf2081ed685b2edd1d01176b2c13c

slip32_prv_bech32 = xprv1qxqqqqqq78qr7hlewyyfzt74vasa87k63pu7g9e6hfzlzrdyh0v5k8zfw9sqpsyv7vcejeyzcpkm85jel7vmujlhpquzf4f3sh3nry0w0n4jh7t0jhc039
slip32_pub_bech32 = xpub1qxqqqqqq78qr7hlewyyfzt74vasa87k63pu7g9e6hfzlzrdyh0v5k8zfw9sqylcasaesu3swjgdnsgjzjy2kt0unmteqs8kkskewm5wsz9mt9sfuvlxj6p

m/1' :

legacy_bip32_xprv = xprv9ukW2Usuz4v7ZSQ9zPsP7jQkeP7MtjLzyyb9zfZ7uZc7Hr1Kf1FKQq1tM8edPHeB2fPBATtH7XYNAEmxtCWRNvP5qZkv4E3CXL3FvwPsBSm
legacy_bip32_xpub = xpub68jrRzQopSUQmvUd6RQPUsMVCQwrJC4rMCWko3xjTu96AeLUCYZZxdLNCSXBA3QhaZJ67AynQNCtfcBFemxfjzWHWLKbkVCFyHGjFHHgqeE

slip32_prv_hex    = 018000000143cc4bca59c666a5f79265148125802ed2cec46df1c5ca8e6a058dab525a73f1003ef02fc53000742891fc90458ba9edc8363d8f1f267e326b1078710c7db34de5
slip32_pub_hex    = 018000000143cc4bca59c666a5f79265148125802ed2cec46df1c5ca8e6a058dab525a73f103b5184a526dac6abda3d8d54a541471ce83e8c2260d56706053e2780922319f5e

slip32_prv_bech32 = xprv1qxqqqqqpg0xyhjjecen2taujv52gzfvq9mfva3rd78zu4rn2qkx6k5j6w0csq0hs9lznqqr59zgleyz93w57mjpk8k837fn7xf43q7r3p37mxn095hysnx
slip32_pub_bech32 = xpub1qxqqqqqpg0xyhjjecen2taujv52gzfvq9mfva3rd78zu4rn2qkx6k5j6w0cs8dgcfffxmtr2hk3a34222s28rn5rarpzvr2kwps98cncpy3rr867k5u83k

m/44'/0'/0' :

legacy_bip32_xprv = xprv9xpXFhFpqdQK3TmytPBqXtGSwS3DLjojFhTGht8gwAAii8py5X6pxeBnQ6ehJiyJ6nDjWGJfZ95WxByFXVkDxHXrqu53WCRGypk2ttuqncb
legacy_bip32_xpub = xpub6BosfCnifzxcFwrSzQiqu2DBVTshkCXacvNsWGYJVVhhawA7d4R5WSWGFNbi8Aw6ZRc1brxMyWMzG3DSSSSoekkudhUd9yLb6qx39T9nMdj

slip32_prv_hex    = 038000002c80000000800000003da4bc190a2680111d31fadfdc905f2a7f6ce77c6f109919116f253d4344521900fe64af825b5b78554c33a28b23085fc082f691b3c712cc1d4e66e133297da87a
slip32_pub_hex    = 038000002c80000000800000003da4bc190a2680111d31fadfdc905f2a7f6ce77c6f109919116f253d4344521903774c910fcf07fa96886ea794f0d5caed9afe30b44b83f7e213bb92930e7df4bd

slip32_prv_bech32 = xprv1qwqqqqpvsqqqqqyqqqqqq0dyhsvs5f5qzywnr7klmjg972nldnnhcmcsnyv3zme984p5g5seqrlxftuztddhs42vxw3gkgcgtlqg9a53k0r39nqafenwzvef0k585enml6g
slip32_pub_bech32 = xpub1qwqqqqpvsqqqqqyqqqqqq0dyhsvs5f5qzywnr7klmjg972nldnnhcmcsnyv3zme984p5g5seqdm5eyg0eurl495gd6nefux4etke4l3sk39c8alzzwae9ycw0h6t6ltmssr

m/44'/0'/1' :

legacy_bip32_xprv = xprv9xpXFhFpqdQK5owUStFsuAiWUxYpLkvQn1QmVDumBKTvmmjkNEZgpMYoAaAftt3JVeDhRkvyLvrKathDToUMdz2FqRF7JNavF7uboJWArrw
legacy_bip32_xpub = xpub6BosfCnifzxcJJ1wYuntGJfF2zPJkDeG9ELNHcKNjezuea4tumswN9sH1psMdSVqCMoJC21Bv8usSeqSP4Sp1tLzW7aY59fGn9GCYzx5UTo

slip32_prv_hex    = 038000002c80000000800000012971fa2db0ff5d69e166a406813aa3d9ed09c4adac2e0ce33523da8c5609f4f4008855dfda37fe663bffc0136618504e3cbd7d992134609cef6191c729339d5c65
slip32_pub_hex    = 038000002c80000000800000012971fa2db0ff5d69e166a406813aa3d9ed09c4adac2e0ce33523da8c5609f4f4025d0261853d4c3a379160fb51d2f262ac64e65219139982c4e2180bcef1a233d9

slip32_prv_bech32 = xprv1qwqqqqpvsqqqqqyqqqqqz2t3lgkmpl6ad8skdfqxsya28k0dp8z2mtpwpn3n2g7633tqna85qzy9th76xllxvwllcqfkvxzsfc7t6lveyy6xp880vxguw2fnn4wx2mhtjy8
slip32_pub_bech32 = xpub1qwqqqqpvsqqqqqyqqqqqz2t3lgkmpl6ad8skdfqxsya28k0dp8z2mtpwpn3n2g7633tqna85qfwsycv984xr5du3vra4r5hjv2kxfejjryfenqkyugvqhnh35geajlgxhp0

m/44'/2'/0' :

legacy_bip32_xprv = Ltpv7735AbcbmL1gbgDWj2ezvs59rh4RM1oTN2BKTKbfe3146FCPCNFbBBSWfuV9vCJNMXD9LuHpQnqVWpn2hbMhikqPdoGqbS3ptdPoNWEvvgR
legacy_bip32_xpub = Ltub2YDQmP391UYeDYvLye9P1SuNJFkcRGN7SYHM8JMxaDnegcPTXHJ2BnYmvHnFnGPGKu2WMuCga6iZV3SDxDMGrRyMcrYEfSPhrpS1EPkC43E

slip32_prv_hex    = 038000002c8000000280000000869c5045e5fc789646babcd1961b101bc31e75fe50df8a585c79b05dca0ac75800983cd10d8d14160b10b9a4bb63207e9585054a3133619d57b78ea9d5aa3046d2
slip32_pub_hex    = 038000002c8000000280000000869c5045e5fc789646babcd1961b101bc31e75fe50df8a585c79b05dca0ac7580340fe3b8e89165258bac0cb711613c618d1af63dc321a90b751d0697301441bcc

slip32_prv_bech32 = xprv1qwqqqqpvsqqqqq5qqqqqpp5u2pz7tlrcjert40x3jcd3qx7rre6lu5xl3fv9c7dsth9q436cqzvre5gd352pvzcshxjtkceq062c2p22xyekr82hk782n4d2xprdysp4gxc
slip32_pub_bech32 = xpub1qwqqqqpvsqqqqq5qqqqqpp5u2pz7tlrcjert40x3jcd3qx7rre6lu5xl3fv9c7dsth9q436cqdq0uwuw3yt9yk96cr9hz9snccvdrtmrmsep4y9h28gxjucpgsducuj4f9r

m/49'/0'/0' :

legacy_bip32_xprv = yprvAHwhK6RbpuS3dgCYHM5jc2ZvEKd7Bi61u9FVhYMpgMSuZS613T1xxQeKTffhrHY79hZ5PsskBjcc6C2V7DrnsMsNaGDaWev3GLRQRgV7hxF
legacy_bip32_xpub = ypub6Ww3ibxVfGzLrAH1PNcjyAWenMTbbAosGNB6VvmSEgytSER9azLDWCxoJwW7Ke7icmizBMXrzBx9979FfaHxHcrArf3zbeJJJUZPf663zsP

slip32_prv_hex    = 038000003180000000800000006eaae365ae0e0a0aab84325cfe7cd76c3b909035f889e7d3f1b847a9a0797ecb00880d51752bda4190607e079588d3f644d96bfa03446bce93cddfda3c4a99c7e6
slip32_pub_hex    = 038000003180000000800000006eaae365ae0e0a0aab84325cfe7cd76c3b909035f889e7d3f1b847a9a0797ecb02f1f347891b20f7568eae3ec9869fbfb67bcab6f358326f10ecc42356bd55939d

slip32_prv_bech32 = xprv1qwqqqqp3sqqqqqyqqqqqqm42udj6urs2p24cgvjule7dwmpmjzgrt7yfulflrwz84xs8jlktqzyq65t490dyryrq0cretzxn7ezdj6l6qdzxhn5neh0a50z2n8r7vumvllf
slip32_pub_bech32 = xpub1qwqqqqp3sqqqqqyqqqqqqm42udj6urs2p24cgvjule7dwmpmjzgrt7yfulflrwz84xs8jlktqtclx3ufrvs0w45w4clvnp5lh7m8hj4k7dvrymcsanzzx44a2kfe6xynfgh

m/49'/2'/0' :

legacy_bip32_xprv = Mtpv7RooeEQDUitupgpJcxZnfDwvq8hC24R7GAiscrqFhHHhit96vCNY7yudJgrM841dMbiRUQceC12566XAHHC8Rd1BtnBdokq9tmF7jLLvUdh
legacy_bip32_xpub = Mtub2rz9F1pkisRsSZX8sa4Ajon9GhPP6JymLgpuHqbYdU5JKFLBF7Qy8b1tZ3dccj2fefrAxfrPdVkpCxuWn3g72UctH2bvJRkp6iFmp8aLeRZ

slip32_prv_hex    = 0380000031800000028000000067b7e1dc5c70a93504218ccf40c47ad46d4a9c858196376ce0e853aca7be049800cf222cc2e097049fe2ca76626c19c7e7a3ef971b1f64195758ab3c832463fcf4
slip32_pub_hex    = 0380000031800000028000000067b7e1dc5c70a93504218ccf40c47ad46d4a9c858196376ce0e853aca7be049802b07388bd2edaba3c0a2c0856716fd7c9965d212fb2736f7b925f57d922b10ace

slip32_prv_bech32 = xprv1qwqqqqp3sqqqqq5qqqqqqeahu8w9cu9fx5zzrrx0grz844rdf2wgtqvkxakwp6zn4jnmupycqr8jytxzuztsf8lzefmxymqecln68muhrv0kgx2htz4neqeyv070gg6dcn7
slip32_pub_bech32 = xpub1qwqqqqp3sqqqqq5qqqqqqeahu8w9cu9fx5zzrrx0grz844rdf2wgtqvkxakwp6zn4jnmupycq2c88z9a9mdt50q29sy9vut06lyevhfp97e8xmmmjf040kfzky9vu2pu92u

m/84'/0'/0' :

legacy_bip32_xprv = zprvAdG4iTXWBoARxkkzNpNh8r6Qag3irQB8PzEMkAFeTRXxHpbF9z4QgEvBRmfvqWvGp42t42nvgGpNgYSJA9iefm1yYNZKEm7z6qUWCroSQnE
legacy_bip32_xpub = zpub6rFR7y4Q2AijBEqTUquhVz398htDFrtymD9xYYfG1m4wAcvPhXNfE3EfH1r1ADqtfSdVCToUG868RvUUkgDKf31mGDtKsAYz2oz2AGutZYs

slip32_prv_hex    = 038000005480000000800000004a53a0ab21b9dc95869c4e92a161194e03c0ef3ff5014ac692f433c4765490fc00e14f274d16ca0d91031b98b162618061d03930fa381af6d4caf44b01819ab6d4
slip32_pub_hex    = 038000005480000000800000004a53a0ab21b9dc95869c4e92a161194e03c0ef3ff5014ac692f433c4765490fc02707a62fdacc26ea9b63b1c197906f56ee0180d0bcf1966e1a2da34f5f3a09a9b

slip32_prv_bech32 = xprv1qwqqqqz5sqqqqqyqqqqqqjjn5z4jrwwujkrfcn5j59s3jnsrcrhnlagpftrf9apnc3m9fy8uqrs57f6dzm9qmygrrwvtzcnpspsaqwfslgup4ak5et6ykqvpn2mdggeaxrp
slip32_pub_bech32 = xpub1qwqqqqz5sqqqqqyqqqqqqjjn5z4jrwwujkrfcn5j59s3jnsrcrhnlagpftrf9apnc3m9fy8uqfc85cha4npxa2dk8vwpj7gx74hwqxqdp083jehp5tdrfa0n5zdfkg3lp00
</pre>

## References

* [BIP-0032: Hierarchical Deterministic Wallets](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki)
* [BIP-0173: Base32 address format for native v0-16 witness outputs](https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki)

'''
'''--- slip-0039.md ---
# SLIP-0039 : Shamir's Secret-Sharing for Mnemonic Codes

```
Number:  SLIP-0039
Title:   Shamir's Secret-Sharing for Mnemonic Codes
Type:    Standard
Status:  Draft
Authors: Pavol Rusnak <stick@satoshilabs.com>
         Andrew Kozlik <andrew.kozlik@satoshilabs.com>
         Ondrej Vejpustek <ondrej.vejpustek@satoshilabs.com>
         Tomas Susanka <tomas.susanka@satoshilabs.com>
         Marek Palatinus <slush@satoshilabs.com>
         Jochen Hoenicke <hoenicke@gmail.com>
Created: 2017-12-18
```

## Table of contents

* [Abstract](#abstract)
* [Notation](#notation)
* [Motivation](#motivation)
* [Shamir's secret-sharing](#shamirs-secret-sharing)
* [Two level scheme](#two-level-scheme)
* [Format of the share mnemonic](#format-of-the-share-mnemonic)
* [Generating and combining the shares](#generating-and-combining-the-shares)
  * [Polynomial interpolation](#polynomial-interpolation)
  * [Sharing a secret](#sharing-a-secret)
  * [Generating the shares](#generating-the-shares)
  * [Combining the shares](#combining-the-shares)
* [Checksum](#checksum)
* [Passphrase](#passphrase)
* [Encryption of the master secret](#encryption-of-the-master-secret)
* [Decryption of the master secret](#decryption-of-the-master-secret)
* [Versioning](#versioning)
* [Localization](#localization)
* [Wordlist](#wordlist)
* [Test vectors](#test-vectors)
* [Reference implementation](#reference-implementation)
* [Design rationale](#design-rationale)
* [References](#references)

## Abstract

This SLIP describes a standard and interoperable implementation of Shamir's secret-sharing (SSS). SSS splits a master secret, such as the master seed *S* for Hierarchical Deterministic Wallets described in [BIP-0032](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki), into unique parts which can be distributed among participants. A specified minimum number of parts is required to be supplied in order to reconstruct the original secret. Knowledge of fewer than the required number of parts does not leak information about the master secret.

## Notation

Notation        | Meaning
----------------|---------------------------------------------------------------
*G*             | total number of groups, a positive integer, 1 &le; *G* &le; 16
*N<sub>i</sub>* | total number of members in group *i*, a positive integer, 1 &le; *N<sub>i</sub>* &le; 16
*GT*            | group threshold, a positive integer, 1 &le; *GT* &le; *G*
*T<sub>i</sub>* | member threshold for group *i*, a positive integer, 1 &le; *T<sub>i</sub>* &le; *N<sub>i</sub>*
*id*            | random identifier, a 15-bit positive integer
*MS*            | master secret, a string
*n*             | length of the master secret in bytes
*EMS*           | encrypted master secret, a string
&#124;&#124;    | concatenation operator
xor             | bit-wise exclusive-or of two strings

## Motivation

Preservation of digital assets is generally important and it is especially important in the case of decentralized payments systems such as Bitcoin, where there is no recourse in the case of loss of an asset. The usual approach to protecting digital assets is redundant backups, but when the asset itself is of significant and liquidable value, there is a substantial risk of the backup holder absconding with the asset. Shamir's secret-sharing provides a better mechanism for backing up secrets by distributing custodianship among a number of trusted parties in a manner that can prevent loss even if one or a few of those parties become compromised.

However, the lack of SSS standardization to date presents a risk of being unable to perform secret recovery in the future should the tooling change. Therefore, we propose standardizing SSS so that SLIP-0039 compatible implementations will be interoperable.

## Shamir's secret-sharing

Shamir's secret-sharing (SSS) is a cryptographic mechanism describing how to split a secret into *N* unique parts, where any *T* of them are required to reconstruct the secret. First, a polynomial *f* of degree *T* &minus; 1 is constructed and each party is given a corresponding point - an integer input *x* to the polynomial and the corresponding output *f*(*x*).

When any *T* points are provided, they exactly define the polynomial. Usually the value of the polynomial *f*(0) is used as the shared secret. In this specification the shared secret is stored as *f*(255)<sup>[3](#IndexEncoding)</sup>. More details on SSS can be found on [Wikipedia](https://en.wikipedia.org/wiki/Shamir%27s_Secret_Sharing).

We propose that given a secret, *T* &minus; 2 shares be generated randomly and the remaining shares be computed in such a way that *f*(255) encodes the shared secret and *f*(254) encodes the digest<sup>[4](#Digest)</sup> of the shared secret. Encoding the digest makes it possible to verify that the shared secret has been correctly recovered. The diagram below illustrates the splitting of a secret into five shares such that any three are required to recover the shared secret (*N* = 5 and *T* = 3).

![curve](slip-0039/shamir-curve.svg)

Shamir's secret sharing scheme is applied separately to each byte of the shared secret and GF(256) is used as the underlying finite field<sup>[1](#FiniteField)</sup>. Bytes are interpreted as elements of GF(256) using polynomial representation with operations modulo the Rijndael irreducible polynomial *x*<sup>8</sup> + *x*<sup>4</sup> + *x*<sup>3</sup> + *x* + 1, see [AES](https://doi.org/10.6028/NIST.FIPS.197) sections 3.2, 4.1 and 4.4.

## Two level scheme

One characteristic of Shamir’s secret sharing scheme is that all shares are equal. Thus if the owner of the secret needs to distribute the amount of trust unevenly between shareholders, then some shareholders need to be given multiple shares. Furthermore, as discussed by [Allen and Friedenbach](https://github.com/WebOfTrustInfo/rwot8-barcelona/blob/master/topics-and-advance-readings/social-key-recovery.md), the owner might want to restrict the combinations of shareholders which are able to reconstruct the secret, because some combinations of shareholders might be more likely to collude against the owner than others. To facilitate this we propose that the encrypted master secret (*EMS*) is first split using a *GT*-of-*G* scheme to obtain a set of first-level shares, aka *group shares*. The *i*-th group share, 1 &le; *i* &le; *G*, is then split using a *T<sub>i</sub>*-of-*N<sub>i</sub>* scheme to obtain a set of second-level shares, aka *member shares*, which are distributed among the shareholders. Two levels are assumed to be sufficient to accommodate the majority of use cases while maintaining a comprehensive user interface.

For example, Alice wants to be able to reconstruct her *EMS* on her own using her 2 shares, which she has stored at different locations. In case these shares get destroyed, she also wants to have a backup with her friends and family in such a way that 3 of her 5 friends together with 2 of her 6 family members are required to reconstruct the *EMS*. A two level secret sharing scheme can easily accommodate such requirements. In the given example Alice first splits the *EMS* using a 2-of-4 scheme to obtain the group shares A, B, C and D. She keeps A and B for herself and splits C further using a 3-of-5 scheme to obtain member shares C1, ... , C5, giving one to each friend. Similarly, Alice splits D among her family members using a 2-of-6 scheme. Thus family members receive a greater amount of trust than friends, without having to give one person multiple shares. However, even if all six family members collude against Alice, they cannot obtain the *EMS* without the help of at least two of Alice's friends or without stealing one of Alice's own shares.

All shares created in accordance with this specification use the two level secret sharing scheme. If the creator of the shares wishes to use only a basic single-level *T*-of-*N* scheme, then they SHOULD<sup>[2](#GroupPolicies)</sup> create a single group and conduct the splitting at the second level, i.e. *GT* = 1, *G* = 1, *T*<sub>1</sub> = *T* and *N*<sub>1</sub> = *N*.

If the member threshold *T<sub>i</sub>* of a group is 1, then the size *N<sub>i</sub>* of the group SHOULD<sup>[2](#GroupPolicies)</sup> also be equal to 1. The one share can then be given to multiple members.

## Format of the share mnemonic

We propose the following format of the shares:

| Identifier (*id*) | Iteration exponent (*e*) | Group index (*GI*) | Group threshold (*Gt*) | Group count (*g*) | Member index (*I*) | Member threshold (*t*) | Padded share value (*ps*) | Checksum (*C*) |
|---------|--------|--------|--------|--------|--------|--------|---------------------|---------|
| 15 bits | 5 bits | 4 bits | 4 bits | 4 bits | 4 bits | 4 bits | padding + 8*n* bits | 30 bits |

* The **identifier** (*id*) field is a random 15-bit value which is the same for all shares and is used to verify that the shares belong together; it is also used as salt in the encryption of the master secret.
* The **iteration exponent** (*e*) field indicates the total number of iterations to be used in PBKDF2. The number of iterations is calculated as 10000&times;2<sup>*e*</sup>.
* The **group index** (*GI*) field<sup>[3](#IndexEncoding)</sup> is the *x* value of the group share.
* The **group threshold** (*Gt*) field<sup>[3](#IndexEncoding)</sup> indicates how many group shares are needed to reconstruct the master secret. The actual value is encoded as *Gt* = *GT* &minus; 1, so a value of 0 indicates that a single group share is needed (*GT* = 1), a value of 1 indicates that two group shares are needed (*GT* = 2) etc.
* The **group count** (*g*) indicates the total number of groups. The actual value is encoded as *g* = *G* &minus; 1.
* The **member index** (*I*) field<sup>[3](#IndexEncoding)</sup> is the *x* value of the member share in the given group.
* The **member threshold** (*t*) field<sup>[3](#IndexEncoding)</sup> indicates how many member shares are needed to reconstruct the group share. The actual value is encoded as *t* = *T* &minus; 1.
* The **padded share value** (*ps*) field corresponds to a list of the SSS part's *f<sub>k</sub>*(*x*) values (see the diagram above), 1 &le; *k* &le; *n*. Each *f<sub>k</sub>*(*x*) value is encoded as a string of eight bits in big-endian order. The concatenation of these bit strings is the share value. This value is left-padded with "0" bits so that the length of the padded share value in bits becomes the nearest multiple of 10.
* The **checksum** (*C*) field is an RS1024 checksum (see [below](#checksum)) of the data part of the share (that is *id* || *e* || *GI* || *Gt* || *g* || *I* || *t* || *ps*). The customization string (*cs*) of RS1024 is "shamir".

This structure is then converted into a mnemonic code by splitting it up into 10-bit segments with each becoming an index into a word list containing exactly 1024 words (see [below](#wordlist)). Big-endian bit order is used in all conversions. The entropy<sup>[4](#Digest)</sup> of the master secret MUST be at least 128 bits and its length MUST be a multiple of 16 bits. All implementations MUST support master secrets of length 128 bits and 256 bits:

| Security | Padded share value length | Total share length  |
|----------|---------------------------|---------------------|
| 128 bits | 130 bits                  | 200 bits = 20 words |
| 256 bits | 260 bits                  | 330 bits = 33 words |

This construction yields a beneficial property where the random identifier and the iteration exponent transform into the first two words of the mnemonic code, so the user can immediately tell whether the correct shares are being combined, i.e. they have to have the same first two words. Moreover, the third word encodes the group index, group threshold and part of the group count. Since the group threshold and group count are constant, all shares belonging to the same group start with the same three words.

## Generating and combining the shares

### Polynomial interpolation

Given a set of *m* points (*x<sub>i</sub>*, *y<sub>i</sub>*), 1 &le; *i* &le; *m*, such that no two *x<sub>i</sub>* values equal, there exists a polynomial that assumes the value *y<sub>i</sub>* at each point *x<sub>i</sub>*. The polynomial of lowest degree that satisfies these conditions is uniquely determined and can be obtained using the Lagrange interpolation formula given below.

Since Shamir's secret sharing scheme is applied separately to each of the *n* bytes of the shared secret, we work with *y*<sub>*i*</sub> as a vector of *n* values, where *y*<sub>*i*</sub>[*k*] = *f<sub>k</sub>*(*x<sub>i</sub>*), 1 &le; *k* &le; *n*, and *f<sub>k</sub>* is the polynomial in the *k*-th instance of the scheme.

#### Interpolate(*x*, {(*x<sub>i</sub>*, *y*<sub>*i*</sub>), 1 &le; *i* &le; *m*})

**Input:** the desired index *x*, a set of index/value-vector pairs {(*x<sub>i</sub>*, *y*<sub>*i*</sub>), 1 &le; *i* &le; *m*} &subseteq; GF(256) &times; GF(256)<sup>*n*</sup>

**Output:** the value-vector (*f*<sub>1</sub>(*x*), ... , *f<sub>n</sub>*(*x*))

![f_k(x) = \sum_{i=1}^m y_i[k] \prod_{\underset{j \neq i}{j=1}}^m \frac{x - x_j}{x_i - x_j}](slip-0039/lagrange.png)

### Sharing a secret

#### SplitSecret(*T*, *N*, *S*)

**Input:** threshold *T*, number of shares *N*, secret *S*

**Output:** shares *y*<sub>1</sub>, ... , *y<sub>N</sub>* for share indices 0, ... , *N* &minus; 1

1. Check the following conditions:
   * 0 &lt; *T* &le; *N* &le; 16
   * The length of *S* in bits is at least 128 and a multiple of 16.

   If any of these conditions is not satisfied, then abort.
2. If *T* is 1, then let *y<sub>i</sub>* = *S* for all *i*, 1 &le; *i* &le; *N*, and return.
3. Let *n* be the length of *S* in bytes. Generate *R* &in; GF(256)<sup>*n*&minus;4</sup> randomly with uniform distribution and let *D* be the concatenation of the first 4 bytes of HMAC-SHA256(key=*R*, msg=*S*) with the *n* &minus; 4 bytes of *R*.
4. Let *y*<sub>1</sub>, ... , *y*<sub>*T*&minus;2</sub> &in; GF(256)<sup>*n*</sup> be generated randomly, independently with uniform distribution.
5. For *i* such that *T* &minus; 2 &lt; *i* &le; *N* compute *y<sub>i</sub>* = Interpolation(*i* &minus; 1, {(0, *y*<sub>1</sub>), ... , (*T* &minus; 3, *y*<sub>*T*&minus;2</sub>), (254, *D*), (255, *S*)}).

The source of randomness used to generate the values in steps 3 and 4 above MUST be suitable for generating cryptographic keys.

#### RecoverSecret(*T*, [(*x*<sub>1</sub>, *y*<sub>1</sub>), ... , (*x<sub>m</sub>*, *y<sub>m</sub>*)])

**Input:** threshold *T*, a list of *m* share-index/share-value pairs [(*x*<sub>1</sub>, *y*<sub>1</sub>), ... , (*x<sub>m</sub>*, *y<sub>m</sub>*)]

**Output:** the shared secret *S*

1. If *T* is 1, then let *S* = *y*<sub>1</sub> and return.
2. Compute *S* = Interpolation(255, [(*x*<sub>1</sub>, *y*<sub>1</sub>), ... , (*x<sub>m</sub>*, *y<sub>m</sub>*)]).
4. Compute *D* = Interpolation(254, [(*x*<sub>1</sub>, *y*<sub>1</sub>), ... , (*x<sub>m</sub>*, *y<sub>m</sub>*)]).
5. Let *R* be the last *n* &minus; 4 bytes of *D*. If the first 4 bytes of HMAC-SHA256(key=*R*, msg=*S*) are equal to the first 4 bytes of *D*, then return *S*, otherwise abort.

### Generating the shares

#### GenerateShares(*GT*, [(*T*<sub>1</sub>,*N*<sub>1</sub>), ... , (*T<sub>G</sub>*,*N<sub>G</sub>*)], *MS*, *P*, *e*)

**Input:** group threshold *GT*, list of member thresholds *T*<sub>1</sub>, ... , *T<sub>G</sub>* and group sizes *N*<sub>1</sub>, ... , *N<sub>G</sub>*, master secret *MS*, passphrase *P*, iteration exponent *e*

**Output:** list of shares

1. If *T<sub>i</sub>* = 1 and *N<sub>i</sub>* &gt; 1 for any *i*, then abort.
2. Generate a random 15-bit value *id*.
3. Compute the encrypted master secret *EMS* = Encrypt(*MS*, *P*, *e*, *id*).
4. Compute the group shares *s*<sub>1</sub>, ... , *s<sub>G</sub>* = SplitSecret(*GT*, *G*, *EMS*).
5. For each group share *s<sub>i</sub>*, 1 &le; *i* &le; *G*, compute the member shares *s*<sub>*i*,1</sub>, ... , *s*<sub>*i*,*N<sub>i</sub>*</sub> = SplitSecret(*T<sub>i</sub>*, *N<sub>i</sub>*, *s<sub>i</sub>*).
6. For each *i* and each *j*, 1 &le; *i* &le; *G*, 1 &le; *j* &le; *N<sub>i</sub>*, return (*id*, *e*, *i* &minus; 1, *GT* &minus; 1, *j* &minus; 1, *T<sub>i</sub>* &minus; 1, *s<sub>i,j</sub>*).

### Combining the shares

**Input:** list of shares, passphrase *P*

**Output:** master secret *MS*

1. Check the following conditions:
   * The checksum of each share MUST be valid. Implementations SHOULD NOT implement correction beyond potentially suggesting to the user where in the mnemonic an error might be found, without suggesting the correction to make<sup>[5](#ChecksumDesign)</sup>.
   * All shares MUST have the same identifier *id*, iteration exponent *e*, group threshold *GT*, group count *G* and length. The value of *G* MUST be greater than or equal to *GT*.
   * Let *GM* be the number of pairwise distinct group indices among the given shares. Then *GM* MUST be equal to *GT*.
   * All shares with a given group index *GI<sub>i</sub>*, 1 &le; *i* &le; *GM*, MUST have the same member threshold *T<sub>i</sub>*, their member indices MUST be pairwise distinct and their count *M<sub>i</sub>* MUST be equal to *T<sub>i</sub>*.
   * The length of the padding of the share value in bits, which is equal to the length of the padded share value in bits modulo 16, MUST NOT exceed 8 bits.
   * All padding bits MUST be "0".
   * The length of each share value MUST be at least 128 bits.

   Abort if any check fails.

2. Let *s<sub>i</sub>* = RecoverSecret([(*I*<sub>*i*,1</sub>, *s*<sub>*i*,1</sub>), ... , (*I*<sub>*i*,*M<sub>i</sub>*</sub>, *s*<sub>*i*,*M<sub>i</sub>*</sub>)]), where *I<sub>i,j</sub>* and *s<sub>i,j</sub>* are the member-index/share-value pairs of the shares with group index *GI<sub>i</sub>*.

3. Let *EMS* = RecoverSecret([(*GI*<sub>1</sub>, *s*<sub>1</sub>), ... , (*GI<sub>GM</sub>*, *s<sub>GM</sub>*)])

4. Return *MS* = Decrypt(*EMS*, *P*, *e*, *id*).

## Checksum

The last three words of the mnemonic form a checksum and contain no information. Valid mnemonics MUST pass the criteria for validity specified by the Python3 code snippet below. The function `rs1024_verify_checksum` must return true when its arguments are:

- `cs`: the customization string
- `data`: the data part as a list of 10-bit integers, each corresponding to one word of the mnemonic

```
def rs1024_polymod(values):
  GEN = [0xe0e040, 0x1c1c080, 0x3838100, 0x7070200, 0xe0e0009, 0x1c0c2412, 0x38086c24, 0x3090fc48, 0x21b1f890, 0x3f3f120]
  chk = 1
  for v in values:
    b = (chk >> 20)
    chk = (chk & 0xfffff) << 10 ^ v
    for i in range(10):
      chk ^= GEN[i] if ((b >> i) & 1) else 0
  return chk

def rs1024_verify_checksum(cs, data):
  return rs1024_polymod([ord(x) for x in cs] + data) == 1
```

This implements a Reed-Solomon code over GF(1024) that guarantees detection of any error affecting at most 3 words and has less than a 1 in 10<sup>9</sup> chance of failing to detect more errors. More details about the properties can be found in the Checksum Design appendix<sup>[5](#ChecksumDesign)</sup>. The customization string is processed by feeding each character's US-ASCII value into the checksum calculation prior to the data.

To construct a valid checksum given the customization string and the values of the data-part words, the code below can be used:

```
def rs1024_create_checksum(cs, data):
  values = [ord(x) for x in cs] + data
  polymod = rs1024_polymod(values + [0,0,0]) ^ 1
  return [(polymod >> 10 * (2 - i)) & 1023 for i in range(3)]
```

## Passphrase

To allow additional protection, the master secret is encrypted with a passphrase using the encryption function described below. There is no way to verify that the correct passphrase was used to decrypt the encrypted master secret. This allows the user to obtain multiple master secrets from a single encrypted master secret by using different passphrases<sup>[8](#PassphraseVerification)</sup>.

In order to achieve the best interoperability among various operating systems and wallet implementations, the passphrase MUST be a string containing only printable ASCII characters (code points 32-126). If no passphrase is provided, an empty string SHALL be used as the passphrase.

## Encryption of the master secret

The master secret is encrypted using a wide-blocksize pseudorandom permutation<sup>[7](#Encryption)</sup> based on the Luby-Rackoff construction. It consists of a four round Feistel network with the key derivation function PBKDF2<sup>[6](#KDFParam)</sup> as the round function. This scheme is invertible, which means that the creator of the shares can choose the master secret, making it possible to migrate a BIP-32 wallet from BIP-39 mnemonics to the new secret sharing scheme. The master secret is first split into two equally long parts, where `L` is the first *n*/2 bytes of the master secret and `R` is the last *n*/2 bytes of the master secret, and processed as follows:

```
L = MS[:len(S)/2]
R = MS[len(S)/2:]
for i in [0,1,2,3]:
    (L, R) = (R, L xor F(i, R))
```

The encrypted master secret is then `EMS = R || L`.

The *i*-th round function `F(i, R)` is defined as follows:

```
F(i, R) = PBKDF2(PRF = HMAC-SHA256, Password = (i || passphrase), Salt = ("shamir" || id || R), iterations = 2500 << e, dkLen = n/2 bytes)
```

The value of *i* is encoded as one byte.

The random identifier value *id* is encoded as two bytes in big-endian byte order.

## Decryption of the master secret

The only difference between encryption and decryption is the reversal of the order of the values of `i`:

```
L = EMS[:len(EMS)/2]
R = EMS[len(EMS)/2:]
for i in [3,2,1,0]:
    (L, R) = (R, L xor F(i, R))
MS = R || L
```

## Versioning

Our scheme doesn't support versioning. This is intentional to avoid unclear claims such as SLIP-0039 compatibility without a clear understanding of which version of the scheme is actually meant.

## Localization

No localization is supported. This standard deals with a set of English words only. Previous attempts with arbitrary wordlists caused lots of confusion among users and decreased interoperability across various implementations.

## Wordlist

The wordlist mandated by this SLIP is [available here](slip-0039/wordlist.txt). Several criteria were applied in creation of the list:

* The wordlist is alphabetically sorted.
* No word is shorter than 4 letters.
* No word is longer than 8 letters.
* All words begin with a unique 4-letter prefix.
* The wordlist contains only common English words (+ the word "satoshi").
* The minimum Damerau-Levenshtein distance between any two words is at least 2.
* The similarity between the pronunciation of any two words has been minimized.

(see the [test](slip-0039/test_wordlist.sh) which checks whether these criteria are fulfilled).

## Test vectors

The test vectors are given as a list of triples. The first member of the triple is a description of the test vector, the second member is a list of mnemonics and the third member is the master secret which results from combining the mnemonics. The master secret is encoded as a string containing two hexadecimal digits for each byte. If the string is empty, then attempting to combine the given set of mnemonics should result in error. The passphrase "TREZOR" is used for all valid sets of mnemonics.

<http://github.com/trezor/python-shamir-mnemonic/blob/master/vectors.json>

## Reference implementation

The reference implementation is available from
<http://github.com/trezor/python-shamir-mnemonic/>.

## Design rationale

1. <a name="FiniteField"></a>**Choice of finite field**

    Finite fields of the form GF(2<sup>*m*</sup>) and GF(*p*), where *p* is a prime number, were considered for this scheme. The field GF(256) was chosen, because the field arithmetic is easy to implement in any programming language and many implementations are already available since it is used in the AES cipher. The fact that it is byte oriented makes it easy to work with.

    Using a field of prime order GF(*p*), where log<sub>2</sub> *p* is approximately the length of the master secret in bits, would require support for multi-precision arithmetic. Many programming languages, such as C/C++, do not support multi-precision arithmetic out of the box. Implementations would also need to store information about the prime number that should be used for each admissible length of the master secret or they would need to compute the prime number on the fly.

    Choosing GF(2<sup>*m*</sup>), where *m* is the length of the master secret in bits would require a more complicated implementation than GF(256). This is in part due to the multi-precision nature of the arithmetic and in part due to the fact that implementations would need to store an (e.g. lexicographically minimal) irreducible polynomial of degree *m* for each admissible value of *m* or they would need to be able to determine this polynomial on the fly.

2. <a name="GroupPolicies"></a>**Group policies**

    It is recommended that when a single-level *T*-of-*N* scheme is desired, then a single group share should be created and split into *N* member shares. The alternative would be to create *N* groups, with each group using a 1-of-1 member scheme. There is no difference in terms of security between the two methods. The advantage of using the recommended method is that when recovering the secret, it is possible to determine from any share that a single-level scheme was used. This makes it possible to provide a more comprehensive user experience.

    It is recommended that if the member threshold *T<sub>i</sub>* of a group is 1, then the size *N<sub>i</sub>* of the group should also be 1. Splitting a group share using a 1-of-*N* scheme for *N* &gt; 1 provides no additional security over a 1-of-1 scheme, because the shares in a group with threshold 1 will only differ in the member index (fourth word of the mnemonic) and in the three checksum words at the end of the mnemonic. If a user attempts to produce several member shares with threshold 1, then it is most likely to be a mistake or a failure to understand the consequences.

3. <a name="IndexEncoding"></a>**Index encoding**

    It is anticipated that 16 groups with 16 member shares in each group will be more than enough for any application of Shamir's Secret Sharing Scheme to BIP-32 master seeds. Thus to reduce the mnemonic length, the index and threshold values are restricted to 4 bits each.

    In this specification the shared secret is stored under index 255 instead of the usual index 0. The disadvantage of using index 0 for the shared secret is that 0 then cannot be used as the index value for a share, thus any shares with index value 0 have to be considered invalid. However, some implementations might fail to check this, which would open the door to the following attack: Assume that an implementation doesn't check that the supplied *x* value is non-zero. An attacker that has write access to one of the shares can then change the stored point from (*x*,*y*) to (0,*y*). If the implementation uses this value in the Lagrange interpolation formula, then the resulting shared secret will always be equal to *y* regardless of the values of the other shares. If this value is protected with a weak passphrase and used as a master seed for a BIP-32 wallet, then the attacker will be able to steal any funds transferred to this wallet because he knows *y*.

4. <a name="Digest"></a>**Digest**

    If the threshold *T* is at least 2, then share index 254 is used to encode the digest of the shared secret *S*. The share value *D* corresponding to index 254 consists of two parts. The first 4 bytes of *D* encode the actual digest and the remaining *n* &minus; 4 bytes *R* are randomly generated. The digest is computed as the first four bytes of HMAC-SHA256(key=*R*, msg=*S*). Encoding the digest makes it possible to detect an invalid set of shares with a random failure chance of 2<sup>&minus;32</sup>. Since each mnemonic has an identifier and an RS1024 checksum, an invalid set of shares is unlikely to appear randomly. Thus an invalid digest generally indicates that one or more of the provided shares have been maliciously fabricated by an attacker.

    Let *m* denote the entropy of the shared secret in bits. A disadvantage of encoding the digest of the shared secret is that an attacker who has knowledge of *T* &minus; 1 share values can reduce the entropy of the shared secret to *m* &minus; 32 bits by performing a brute-force search over the 2<sup>*m*</sup> possible values of the shared secret and eliminating the ones which give an invalid digest. The entropy of the shared secret must be sufficiently large to make such attacks impractical, which is why this specification requires that *m* &ge; 128.

    The advantage of using HMAC-SHA256(key=*R*, msg=*S*) as opposed to SHA-256(*S*) to compute the digest is that it provides better protection against attacks where the attacker has only partial knowledge of *T* &minus; 1 shares or partial knowledge of the shared secret. For example, if the digest would only depend on *S* and not on *R*, then it would be possible to perform the attack described above with the knowledge of only the first 4 bytes of *T* &minus; 1 share values.

5. <a name="ChecksumDesign"></a>**Checksum design**

    The checksum design is heavily inspired by Bech32 defined in [BIP-0173](https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#Bech32). The RS1024 checksum uses a Reed-Solomon code over GF(1024), so that the code alphabet matches the 10-bit wordlist. A Reed-Solomon code over GF(1024) allows creating mnemonics of length up to a thousand words, which is plenty. Shared secrets that would require such length are impractical for human entry and should be stored in binary form rather than mnemonic form. We picked 3 checksum words as a trade-off between the length of the mnemonics and the error-detection capabilities, as 3 checksum words is the lowest number sufficient for a random failure chance below 1 per billion. RS1024 is an MDS code, which means that it is guaranteed to detect any 3 or fewer errors. This is the maximum possible for any kind of checksum that has length 3. Reed-Solomon codes can be viewed as a special case of BCH codes. In the Python3 code snippet we use the BCH view of Reed-Solomon codes, because it allows for a more efficient implementation of the algorithms. The generating polynomial of the code is (*x* &minus; *a*)(*x* &minus; *a*<sup>2</sup>)(*x* &minus; *a*<sup>3</sup>), where *a* is a root of the primitive polynomial *x*<sup>10</sup> + *x*<sup>3</sup> + 1 over GF(2). The elements of GF(1024) are represented as polynomials with operations modulo this primitive polynomial.

    Implementations should not implement correction beyond potentially suggesting to the user where in the mnemonic an error might be found, without suggesting the correction to make. The same recommendation is also made in BIP-0173 (Bech32), which uses a similar checksum scheme. The reason for this is that automated error-corrections change invalid mnemonics into valid mnemonics. The problem is that if more than a few errors are made, then the auto-corrected mnemonic will be valid but different from the original. Use of such a mnemonic may cause funds to be lost irrecoverably (most notably if the threshold is 1). This is why corrections should be made only by the user, who can inspect the hand-written mnemonic more closely and is therefore better qualified to decide where exactly the errors were made.

6. <a name="KDFParam"></a>**Choice of KDF function and parameters**

    PBKDF2 is a widely used standard password-based key derivation function. Newer key derivation functions such as scrypt or Argon2 were considered, but these require a large amount of memory, which is a limiting factor in hardware wallets.

    The SHA-256 algorithm operates on 32-bit words, whereas the SHA-512 algorithm operates on 64-bit words. As a consequence SHA-512 is significantly faster on 64-bit platforms than on 32-bit platforms, but SHA-256 performs almost the same on both platforms. Using HMAC-SHA512 would put the user who may be running on a 32-bit platform at a significant disadvantage against an attacker which is running a brute force attack on a 64-bit platform. This is why HMAC-SHA256 was chosen as the pseudorandom function for PBKDF2.

    The total number of iterations in PBKDF2 was chosen to be at least 10000, i.e. 2500 iterations in each of the four rounds of the Feistel-based encryption function. A larger number of iterations in PBKDF2 would currently impact the user experience in hardware wallets. The creator of the shares is free to choose a larger number of iterations, theoretically as high as 2&times;10<sup>13</sup>, making the format more future-proof and more suitable for a wider range of environments.

7. <a name="Encryption"></a>**Encryption**

    The advantage of a wide-blocksize pseudorandom permutation over a simple encryption scheme is that it thwarts attacks where the adversary obtains, for example, the first several bytes of *T* different shares. If the master secret were not protected by a strong pseudorandom permutation, the adversary could compute a part of the master secret. This is a serious concern if the master secret is, for example, a private key. Protecting the master secret using AES in any of the common block cipher modes does not solve this problem.

    It might appear that such attacks would not be possible had a lager finite field been used, such as GF(2<sup>*m*</sup>) or GF(*p*), where *m* &asymp; log<sub>2</sub> *p* and *m* is the length of the master secret in bits. However, we are not aware of any proof that Shamir's secret sharing scheme is secure in scenarios where partial information about the shares is leaked. In fact, our preliminary investigation indicates that in certain cases information about the shared secret may leak if partial knowledge of *T* shares is available. Thus the use of a strong pseudorandom permutation is advisable regardless of the choice of the field.

    The role of the key derivation function in the Feistel-based encryption function is twofold. Firstly, it protects the passphrase against brute-force and dictionary attacks. Secondly, if the adversary obtains a part of the encrypted master secret as described above, the slow key derivation function protects against brute-force attacks which attempt to reveal the unknown part of the encrypted master secret.

8. <a name="PassphraseVerification"></a>**Passphrase verification**

    The proposed design does not provide a way to verify that the correct passphrase was used to decrypt the encrypted master secret. This is an intentional feature which allows the user to obtain multiple master secrets from a single encrypted master secret by using different passphrases. This design allows for plausible deniability when the master secret is used as the master seed for a hierarchical deterministic wallet (see [BIP-32](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki)). Every passphrase generates a valid seed but only the correct one will make the desired wallet available. Thus the owner can use one passphrase to access their real wallet and another passphrase to access a decoy wallet. If the owner is later coerced into revealing their passphrase either by [law](https://en.wikipedia.org/wiki/Key_disclosure_law) or by force, then they can reveal the passphrase which accesses the decoy wallet and [plausibly deny](https://en.wikipedia.org/wiki/Plausible_deniability) the existence of their real wallet, because there is no way for the coercer to prove that the decoy wallet is not the real one.

## References

* [BIP-0032: Hierarchical Deterministic Wallets](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki)
* [Secret Sharing Step by Step by Point Software](http://www.pointsoftware.ch/en/secret-sharing-step-by-step/)
* [FIPS-197: Specification for the Advanced Encryption Standard (AES)](https://doi.org/10.6028/NIST.FIPS.197)
* [C. Allen and M. Friedenbach: A New Approach to Social Key Recovery](https://github.com/WebOfTrustInfo/rwot8-barcelona/blob/master/topics-and-advance-readings/social-key-recovery.md)

'''
'''--- slip-0039/shamir-curve.svg ---
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<svg
   xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmlns:cc="http://creativecommons.org/ns#"
   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
   xmlns:svg="http://www.w3.org/2000/svg"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   viewBox="0 0 984.52207 778.37341"
   height="778.37341"
   width="984.52209"
   xml:space="preserve"
   id="svg2"
   version="1.1"
   sodipodi:docname="shamir-curve.svg"
   inkscape:version="0.92.2 2405546, 2018-03-11"><sodipodi:namedview
   pagecolor="#ffffff"
   bordercolor="#666666"
   borderopacity="1"
   objecttolerance="10"
   gridtolerance="10"
   guidetolerance="10"
   inkscape:pageopacity="0"
   inkscape:pageshadow="2"
   inkscape:window-width="1920"
   inkscape:window-height="1140"
   id="namedview171"
   showgrid="false"
   fit-margin-top="20"
   fit-margin-left="20"
   fit-margin-right="30"
   fit-margin-bottom="20"
   inkscape:zoom="0.70710678"
   inkscape:cx="452.64388"
   inkscape:cy="320.06357"
   inkscape:window-x="0"
   inkscape:window-y="0"
   inkscape:window-maximized="1"
   inkscape:current-layer="svg2"
   inkscape:snap-page="false"
   inkscape:snap-grids="true"
   inkscape:snap-others="true"
   inkscape:snap-object-midpoints="true" /><metadata
   id="metadata8"><rdf:RDF><cc:Work
       rdf:about=""><dc:format>image/svg+xml</dc:format><dc:type
         rdf:resource="http://purl.org/dc/dcmitype/StillImage" /><dc:title /></cc:Work></rdf:RDF></metadata><defs
   id="defs6"><marker
     inkscape:isstock="true"
     style="overflow:visible;"
     id="marker5596"
     refX="0.0"
     refY="0.0"
     orient="auto"
     inkscape:stockid="Arrow1Mend"><path
       transform="scale(0.4) rotate(180) translate(10,0)"
       style="fill-rule:evenodd;stroke:#808080;stroke-width:1pt;stroke-opacity:1;fill:#808080;fill-opacity:1"
       d="M 0.0,0.0 L 5.0,-5.0 L -12.5,0.0 L 5.0,5.0 L 0.0,0.0 z "
       id="path5594" /></marker><inkscape:path-effect
     is_visible="true"
     id="path-effect5586"
     effect="spiro" /><marker
     inkscape:collect="always"
     inkscape:stockid="Arrow1Mend"
     orient="auto"
     refY="0.0"
     refX="0.0"
     id="marker4964"
     style="overflow:visible;"
     inkscape:isstock="true"><path
       id="path4962"
       d="M 0.0,0.0 L 5.0,-5.0 L -12.5,0.0 L 5.0,5.0 L 0.0,0.0 z "
       style="fill-rule:evenodd;stroke:#808080;stroke-width:1pt;stroke-opacity:1;fill:#808080;fill-opacity:1"
       transform="scale(0.4) rotate(180) translate(10,0)" /></marker><marker
     inkscape:stockid="Arrow1Mstart"
     orient="auto"
     refY="0.0"
     refX="0.0"
     id="marker4834"
     style="overflow:visible"
     inkscape:isstock="true"><path
       id="path4832"
       d="M 0.0,0.0 L 5.0,-5.0 L -12.5,0.0 L 5.0,5.0 L 0.0,0.0 z "
       style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;stroke-opacity:1;fill:#000000;fill-opacity:1"
       transform="scale(0.4) translate(10,0)" /></marker><inkscape:path-effect
     is_visible="true"
     id="path-effect4824"
     effect="spiro" /><inkscape:path-effect
     is_visible="true"
     id="path-effect3957"
     effect="spiro" /><marker
     inkscape:collect="always"
     inkscape:isstock="true"
     style="overflow:visible"
     id="Arrow1Mstart"
     refX="0.0"
     refY="0.0"
     orient="auto"
     inkscape:stockid="Arrow1Mstart"><path
       transform="scale(0.4) translate(10,0)"
       style="fill-rule:evenodd;stroke:#000000;stroke-width:1pt;stroke-opacity:1;fill:#000000;fill-opacity:1"
       d="M 0.0,0.0 L 5.0,-5.0 L -12.5,0.0 L 5.0,5.0 L 0.0,0.0 z "
       id="path6811" /></marker><marker
     inkscape:collect="always"
     inkscape:isstock="true"
     style="overflow:visible;"
     id="Arrow1Mend"
     refX="0.0"
     refY="0.0"
     orient="auto"
     inkscape:stockid="Arrow1Mend"><path
       transform="scale(0.4) rotate(180) translate(10,0)"
       style="fill-rule:evenodd;stroke:#808080;stroke-width:1pt;stroke-opacity:1;fill:#808080;fill-opacity:1"
       d="M 0.0,0.0 L 5.0,-5.0 L -12.5,0.0 L 5.0,5.0 L 0.0,0.0 z "
       id="path6814" /></marker><marker
     inkscape:stockid="Arrow1Mend"
     orient="auto"
     refY="0.0"
     refX="0.0"
     id="marker7557"
     style="overflow:visible;"
     inkscape:isstock="true"><path
       id="path7555"
       d="M 0.0,0.0 L 5.0,-5.0 L -12.5,0.0 L 5.0,5.0 L 0.0,0.0 z "
       style="fill-rule:evenodd;stroke:#808080;stroke-width:1pt;stroke-opacity:1;fill:#808080;fill-opacity:1"
       transform="scale(0.4) rotate(180) translate(10,0)" /></marker><marker
     inkscape:stockid="Arrow1Mend"
     orient="auto"
     refY="0.0"
     refX="0.0"
     id="marker7493"
     style="overflow:visible;"
     inkscape:isstock="true"><path
       id="path7491"
       d="M 0.0,0.0 L 5.0,-5.0 L -12.5,0.0 L 5.0,5.0 L 0.0,0.0 z "
       style="fill-rule:evenodd;stroke:#808080;stroke-width:1pt;stroke-opacity:1;fill:#808080;fill-opacity:1"
       transform="scale(0.4) rotate(180) translate(10,0)" /></marker><marker
     inkscape:stockid="Arrow1Mend"
     orient="auto"
     refY="0.0"
     refX="0.0"
     id="marker7435"
     style="overflow:visible;"
     inkscape:isstock="true"><path
       id="path7433"
       d="M 0.0,0.0 L 5.0,-5.0 L -12.5,0.0 L 5.0,5.0 L 0.0,0.0 z "
       style="fill-rule:evenodd;stroke:#808080;stroke-width:1pt;stroke-opacity:1;fill:#808080;fill-opacity:1"
       transform="scale(0.4) rotate(180) translate(10,0)" /></marker><marker
     inkscape:collect="always"
     inkscape:isstock="true"
     style="overflow:visible;"
     id="marker7377"
     refX="0.0"
     refY="0.0"
     orient="auto"
     inkscape:stockid="Arrow1Mend"><path
       transform="scale(0.4) rotate(180) translate(10,0)"
       style="fill-rule:evenodd;stroke:#808080;stroke-width:1pt;stroke-opacity:1;fill:#808080;fill-opacity:1"
       d="M 0.0,0.0 L 5.0,-5.0 L -12.5,0.0 L 5.0,5.0 L 0.0,0.0 z "
       id="path7375" /></marker><marker
     inkscape:isstock="true"
     style="overflow:visible;"
     id="marker7313"
     refX="0.0"
     refY="0.0"
     orient="auto"
     inkscape:stockid="Arrow1Mend"><path
       transform="scale(0.4) rotate(180) translate(10,0)"
       style="fill-rule:evenodd;stroke:#979797;stroke-width:1pt;stroke-opacity:1;fill:#979797;fill-opacity:1"
       d="M 0.0,0.0 L 5.0,-5.0 L -12.5,0.0 L 5.0,5.0 L 0.0,0.0 z "
       id="path7311" /></marker><marker
     inkscape:stockid="Arrow1Mend"
     orient="auto"
     refY="0"
     refX="0"
     id="marker7493-9"
     style="overflow:visible"
     inkscape:isstock="true"><path
       id="path7491-2"
       d="M 0,0 5,-5 -12.5,0 5,5 Z"
       style="fill:#808080;fill-opacity:1;fill-rule:evenodd;stroke:#808080;stroke-width:1.00000003pt;stroke-opacity:1"
       transform="matrix(-0.4,0,0,-0.4,-4,0)"
       inkscape:connector-curvature="0" /></marker><marker
     inkscape:stockid="Arrow1Mend"
     orient="auto"
     refY="0"
     refX="0"
     id="marker7435-8"
     style="overflow:visible"
     inkscape:isstock="true"><path
       id="path7433-9"
       d="M 0,0 5,-5 -12.5,0 5,5 Z"
       style="fill:#808080;fill-opacity:1;fill-rule:evenodd;stroke:#808080;stroke-width:1.00000003pt;stroke-opacity:1"
       transform="matrix(-0.4,0,0,-0.4,-4,0)"
       inkscape:connector-curvature="0" /></marker><marker
     inkscape:stockid="Arrow1Mend"
     orient="auto"
     refY="0"
     refX="0"
     id="marker7435-8-3"
     style="overflow:visible"
     inkscape:isstock="true"><path
       id="path7433-9-6"
       d="M 0,0 5,-5 -12.5,0 5,5 Z"
       style="fill:#808080;fill-opacity:1;fill-rule:evenodd;stroke:#808080;stroke-width:1.00000003pt;stroke-opacity:1"
       transform="matrix(-0.4,0,0,-0.4,-4,0)"
       inkscape:connector-curvature="0" /></marker><marker
     inkscape:stockid="Arrow1Mend"
     orient="auto"
     refY="0"
     refX="0"
     id="marker7435-0"
     style="overflow:visible"
     inkscape:isstock="true"><path
       id="path7433-92"
       d="M 0,0 5,-5 -12.5,0 5,5 Z"
       style="fill:#808080;fill-opacity:1;fill-rule:evenodd;stroke:#808080;stroke-width:1.00000003pt;stroke-opacity:1"
       transform="matrix(-0.4,0,0,-0.4,-4,0)"
       inkscape:connector-curvature="0" /></marker><clipPath
     id="clipPath"><rect
       y="10.373434"
       x="44"
       height="756"
       width="930"
       id="rect980"
       style="fill:none;fill-opacity:1;fill-rule:nonzero;stroke:#000000;stroke-width:1.00157475;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;paint-order:stroke fill markers" /></clipPath><clipPath
     id="clipPathc"><rect
       y="10.373434"
       x="44"
       height="756"
       width="930"
       id="rect8828"
       style="fill:none;fill-opacity:1;fill-rule:nonzero;stroke:#000000;stroke-width:1.00157475;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;paint-order:stroke fill markers" /></clipPath><clipPath
     id="clipPathT"><rect
       y="30.373434"
       x="38"
       height="732"
       width="922"
       id="rect9111"
       style="fill:none;fill-opacity:1;fill-rule:nonzero;stroke:#000000;stroke-width:2.6500001;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;paint-order:stroke fill markers" /></clipPath></defs><path
   inkscape:connector-curvature="0"
   id="path4742"
   d="M 256,700.96936 V 490.42841"
   style="fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:0.72886026;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:0.72886037, 5.83088295;stroke-dashoffset:0;stroke-opacity:1" /><path
   inkscape:connector-curvature="0"
   id="path4742-9"
   d="M 346,699.11975 V 385.52992"
   style="fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:0.88952261;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:0.88952269, 7.11618148;stroke-dashoffset:0;stroke-opacity:1" /><path
   inkscape:connector-curvature="0"
   id="path4742-9-1"
   d="M 436,699.10626 V 312.07987"
   style="fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:0.98820335;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:0.98820337, 7.90562706;stroke-dashoffset:0;stroke-opacity:1" /><path
   inkscape:connector-curvature="0"
   id="path4742-9-1-2"
   d="M 526,699.08545 V 269.69548"
   style="fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:1.04088318;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:1.04088317, 8.32706536;stroke-dashoffset:0;stroke-opacity:1" /><path
   inkscape:connector-curvature="0"
   id="path4742-9-1-9"
   d="M 756,699.1235 V 302.89441"
   style="fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:0.99988317;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:0.99988309, 7.99906482;stroke-dashoffset:0;stroke-opacity:1" /><path
   inkscape:connector-curvature="0"
   id="path4742-9-1-2-3"
   d="M 846,699.11816 V 371.29841"
   style="fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:0.90948099;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:0.90948093, 7.27584745;stroke-dashoffset:0;stroke-opacity:1" /><g
   transform="matrix(1.3333333,0,0,-1.3333333,-93.227122,1038.497)"
   id="g14" /><path
   id="path50"
   style="fill:none;stroke:#808080;stroke-width:2.64599991;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:7.66129017;stroke-dasharray:none;stroke-opacity:1;marker-start:url(#Arrow1Mstart)"
   d="M 166.71852,24.827692 V 744.82767"
   inkscape:connector-curvature="0" /><path
   id="path54"
   style="fill:none;stroke:#808080;stroke-width:2.64561319;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:7.66129017;stroke-dasharray:none;stroke-opacity:1;marker-end:url(#Arrow1Mend);marker-start:"
   d="M 96.656873,697.81034 H 950.71552"
   inkscape:connector-curvature="0" /><path
   inkscape:connector-curvature="0"
   d="m 526,263.69548 c 3.40166,0 6,2.59834 6,6 0,3.40166 -2.59834,6 -6,6 -3.40168,0 -6,-2.59834 -6,-6 0,-3.40166 2.59833,-6 6,-6 z"
   style="fill:#000000;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1.66666663"
   id="path116" /><path
   sodipodi:nodetypes="cc"
   inkscape:connector-curvature="0"
   d="M 361.54905,179.14604 345.91119,358.70862"
   style="fill:none;stroke:#808080;stroke-width:2;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:10;stroke-dasharray:none;stroke-opacity:1;marker-end:url(#marker7377)"
   id="path318" /><path
   sodipodi:nodetypes="cc"
   inkscape:connector-curvature="0"
   d="m 414.5986,178.01006 100.56471,78.76335"
   style="fill:none;stroke:#808080;stroke-width:2;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:10;stroke-dasharray:none;stroke-opacity:1;marker-end:url(#marker7493)"
   id="path322" /><path
   sodipodi:nodetypes="cc"
   inkscape:connector-curvature="0"
   d="m 387.67349,179.87471 39.80374,115.85256"
   style="fill:none;stroke:#808080;stroke-width:2;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:10;stroke-dasharray:none;stroke-opacity:1;marker-end:url(#marker7435)"
   id="path326" /><text
   xml:space="preserve"
   style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:24px;line-height:25px;font-family:'DejaVu Sans Mono';-inkscape-font-specification:'DejaVu Sans Mono';letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;stroke-width:1"
   x="357.98346"
   y="152.54085"
   id="text2104"><tspan
     id="tspan3959"
     sodipodi:role="line"
     x="357.98346"
     y="152.54085"
     style="font-size:24px;text-align:center;text-anchor:middle;stroke-width:1">Shamir shares</tspan></text>

<text
   id="text2108"
   y="87.788765"
   x="594.2113"
   style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:24px;line-height:25px;font-family:'DejaVu Sans Mono';-inkscape-font-specification:'DejaVu Sans Mono, Normal';font-variant-ligatures:normal;font-variant-caps:normal;font-variant-numeric:normal;font-feature-settings:normal;text-align:start;letter-spacing:0px;word-spacing:0px;writing-mode:lr-tb;text-anchor:start;fill:#000000;fill-opacity:1;stroke:none;stroke-width:1"
   xml:space="preserve"><tspan
     y="87.788765"
     x="594.2113"
     id="tspan120"
     sodipodi:role="line">digest of the</tspan><tspan
     y="112.78876"
     x="594.2113"
     id="tspan122"
     sodipodi:role="line">shared secret</tspan></text>

<text
   transform="scale(0.99999821,1.0000018)"
   id="text2253"
   y="728.57208"
   x="248.14891"
   style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:23.99995804px;line-height:24.99995613px;font-family:'DejaVu Sans Mono';-inkscape-font-specification:'DejaVu Sans Mono, Normal';font-variant-ligatures:normal;font-variant-caps:normal;font-variant-numeric:normal;font-feature-settings:normal;text-align:start;letter-spacing:0px;word-spacing:0px;writing-mode:lr-tb;text-anchor:start;fill:#000000;fill-opacity:1;stroke:none;stroke-width:0.99999821"
   xml:space="preserve"><tspan
     id="tspan5766"
     style="stroke-width:0.99999821"
     y="728.57208"
     x="248.14891"
     sodipodi:role="line">1</tspan></text>

<text
   transform="scale(0.99999111,1.0000089)"
   xml:space="preserve"
   style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:23.99978638px;line-height:24.99977875px;font-family:'DejaVu Sans Mono';-inkscape-font-specification:'DejaVu Sans Mono';letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;stroke-width:0.99999112"
   x="346.12613"
   y="728.56696"
   id="text2261"><tspan
     id="tspan2259"
     sodipodi:role="line"
     x="346.12613"
     y="728.56696"
     style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:23.99978638px;font-family:'DejaVu Sans Mono';-inkscape-font-specification:'DejaVu Sans Mono';text-align:center;text-anchor:middle;stroke-width:0.99999112">2</tspan></text>

<text
   transform="scale(1.0000052,0.99999481)"
   id="text2267"
   y="728.23737"
   x="436.09149"
   style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:24.00012398px;line-height:25.0001297px;font-family:'DejaVu Sans Mono';-inkscape-font-specification:'DejaVu Sans Mono';letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;stroke-width:1.00000513"
   xml:space="preserve"><tspan
     style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:24.00012398px;font-family:'DejaVu Sans Mono';-inkscape-font-specification:'DejaVu Sans Mono';text-align:center;text-anchor:middle;stroke-width:1.00000513"
     y="728.23737"
     x="436.09149"
     sodipodi:role="line"
     id="tspan2265">3<tspan
   id="tspan3929"
   style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:15.60007954px;font-family:'DejaVu Sans Mono';-inkscape-font-specification:'DejaVu Sans Mono';baseline-shift:sub;stroke-width:1.00000513" /></tspan></text>

<text
   transform="scale(0.99999331,1.0000067)"
   xml:space="preserve"
   style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:23.99983978px;line-height:24.99983215px;font-family:'DejaVu Sans Mono';-inkscape-font-specification:'DejaVu Sans Mono';letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;stroke-width:0.99999332"
   x="525.97424"
   y="728.56854"
   id="text2273"><tspan
     id="tspan2271"
     sodipodi:role="line"
     x="525.97424"
     y="728.56854"
     style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:23.99983978px;font-family:'DejaVu Sans Mono';-inkscape-font-specification:'DejaVu Sans Mono';text-align:center;text-anchor:middle;stroke-width:0.99999332">4<tspan
   id="tspan3931"
   style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:15.59989548px;font-family:'DejaVu Sans Mono';-inkscape-font-specification:'DejaVu Sans Mono';baseline-shift:sub;stroke-width:0.99999332" /></tspan></text>

<text
   id="text2277"
   y="65.443527"
   x="154.60573"
   style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:40px;line-height:25px;font-family:'DejaVu Sans Mono';-inkscape-font-specification:'DejaVu Sans Mono';letter-spacing:0px;word-spacing:0px;fill:#808080;fill-opacity:1;stroke:none;stroke-width:1;"
   xml:space="preserve"><tspan
     style="font-size:21.33333206px;text-align:center;text-anchor:middle;stroke-width:1;fill:#808080;"
     y="65.443527"
     x="154.60573"
     id="tspan2275"
     sodipodi:role="line">y</tspan></text>

<text
   xml:space="preserve"
   style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:40px;line-height:25px;font-family:'DejaVu Sans Mono';-inkscape-font-specification:'DejaVu Sans Mono';letter-spacing:0px;word-spacing:0px;fill:#808080;fill-opacity:1;stroke:none;stroke-width:1;"
   x="916.73499"
   y="721.67456"
   id="text2281"><tspan
     sodipodi:role="line"
     id="tspan2279"
     x="916.73499"
     y="721.67456"
     style="font-size:21.33333206px;text-align:center;text-anchor:middle;stroke-width:1;fill:#808080;">x</tspan></text>

<path
   inkscape:connector-curvature="0"
   d="m 756,296.89441 c 3.40166,0 6,2.59834 6,6 0,3.40166 -2.59834,6 -6,6 -3.40167,0 -6,-2.59834 -6,-6 0,-3.40166 2.59833,-6 6,-6 z"
   style="fill:#000000;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1.66666651"
   id="path94-7" /><path
   inkscape:connector-curvature="0"
   d="m 846,365.29841 c 3.40166,0 6,2.59834 6,6 0,3.40166 -2.59834,6 -6,6 -3.40168,0 -6,-2.59834 -6,-6 0,-3.40166 2.59833,-6 6,-6 z"
   style="fill:#000000;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1.66666663"
   id="path116-0" /><text
   transform="scale(1.0000058,0.9999942)"
   xml:space="preserve"
   style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:24.00013924px;line-height:25.00014496px;font-family:'DejaVu Sans Mono';-inkscape-font-specification:'DejaVu Sans Mono';letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;stroke-width:1.00000584"
   x="755.17084"
   y="728.23779"
   id="text2273-6"><tspan
     id="tspan2271-0"
     sodipodi:role="line"
     x="755.17084"
     y="728.23779"
     style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:24.00013924px;font-family:'DejaVu Sans Mono';-inkscape-font-specification:'DejaVu Sans Mono';text-align:center;text-anchor:middle;stroke-width:1.00000584">254</tspan></text>

<text
   id="text5246"
   y="716.23779"
   x="884.43646"
   style="font-style:normal;font-weight:normal;font-size:40px;line-height:125%;font-family:sans-serif;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
   xml:space="preserve"><tspan
     y="752.26794"
     x="884.43646"
     id="tspan5244"
     sodipodi:role="line" /></text>

<text
   transform="scale(0.99999881,1.0000012)"
   xml:space="preserve"
   style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:23.99997139px;line-height:24.99996948px;font-family:'DejaVu Sans Mono';-inkscape-font-specification:'DejaVu Sans Mono';letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;stroke-width:0.99999881"
   x="845.50043"
   y="728.23273"
   id="text2273-6-2"><tspan
     id="tspan2271-0-6"
     sodipodi:role="line"
     x="845.50043"
     y="728.23273"
     style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:23.99997139px;font-family:'DejaVu Sans Mono';-inkscape-font-specification:'DejaVu Sans Mono';text-align:center;text-anchor:middle;stroke-width:0.99999881">255</tspan></text>

<text
   id="text2108-1"
   y="142.65936"
   x="888.6825"
   style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:24px;line-height:25px;font-family:'DejaVu Sans Mono';-inkscape-font-specification:'DejaVu Sans Mono';letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;stroke-width:1"
   xml:space="preserve"><tspan
     id="tspan5313"
     style="font-size:24px;text-align:center;text-anchor:middle;stroke-width:1"
     y="142.65936"
     x="888.6825"
     sodipodi:role="line">shared</tspan><tspan
     id="tspan3935"
     style="font-size:24px;text-align:center;text-anchor:middle;stroke-width:1"
     y="167.65936"
     x="888.6825"
     sodipodi:role="line">secret</tspan></text>

<path
   sodipodi:nodetypes="cc"
   inkscape:connector-curvature="0"
   d="M 690.34091,136.34335 751.9933,284.41891"
   style="fill:none;stroke:#808080;stroke-width:2;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:10;stroke-dasharray:none;stroke-opacity:1;marker-end:url(#marker7435-8)"
   id="path326-7" /><path
   sodipodi:nodetypes="cc"
   inkscape:connector-curvature="0"
   d="M 890.41398,177.82883 849.20108,351.8113"
   style="fill:none;stroke:#808080;stroke-width:2;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:10;stroke-dasharray:none;stroke-opacity:1;marker-end:url(#marker7435-8-3)"
   id="path326-7-1" /><path
   sodipodi:nodetypes="ssssss"
   inkscape:connector-curvature="0"
   d="m 346,379.52992 c 3.40166,0 6,2.59834 6,6 0,3.40166 -2.59834,6 -6,6 -3.40166,0 -6,-2.59834 -6,-6 0,-2.72486 1.66725,-4.93426 4.07913,-5.70556 0.59906,-0.19158 1.24407,-0.29444 1.92087,-0.29444 z"
   style="fill:#000000;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1.66666651"
   id="path88" /><path
   inkscape:connector-curvature="0"
   d="m 256,484.42841 c 3.40169,0 6,2.59831 6,6 0,3.40169 -2.59831,6 -6,6 -3.40171,0 -6,-2.59831 -6,-6 0,-3.40169 2.59829,-6 6,-6 z"
   style="fill:#000000;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1.66666603"
   id="path82" /><path
   inkscape:connector-curvature="0"
   d="m 436,306.07987 c 3.40166,0 6,2.59834 6,6 0,3.40166 -2.59834,6 -6,6 -3.40167,0 -6,-2.59834 -6,-6 0,-3.40166 2.59833,-6 6,-6 z"
   style="fill:#000000;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1.66666651"
   id="path94" /><path
   inkscape:connector-curvature="0"
   d="m 166.9375,619.52966 c 3.40169,0 6,2.59831 6,6 0,3.40169 -2.59831,6 -6,6 -3.40171,0 -6,-2.59831 -6,-6 0,-3.40169 2.59829,-6 6,-6 z"
   style="fill:#000000;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1.66666603"
   id="path82-8" /><path
   inkscape:original-d="M 307.84924,175.13076 C 274.51691,258.79643 215.72773,473.98497 182.3934,557.65263"
   inkscape:path-effect="#path-effect4824"
   inkscape:connector-curvature="0"
   id="path4822"
   d="M 307.84924,175.13076 182.3934,557.65263"
   style="fill:#808080;fill-opacity:1;stroke:#808080;stroke-width:2;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;marker-end:url(#marker4964)"
   sodipodi:nodetypes="cc" /><path
   inkscape:original-d="M 337.09188,177.28324 C 321.75955,212.28224 273.8993,419.1092 258.56497,454.1102"
   inkscape:path-effect="#path-effect5586"
   inkscape:connector-curvature="0"
   id="path5584"
   d="M 337.09188,177.28324 258.56497,454.1102"
   style="fill:#808080;fill-opacity:1;stroke:#808080;stroke-width:2;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;marker-end:url(#marker5596)"
   sodipodi:nodetypes="cc" /><text
   id="text5772"
   y="728.23358"
   x="168.9985"
   style="font-style:normal;font-weight:normal;font-size:23.99995804px;line-height:1.25;font-family:sans-serif;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none"
   xml:space="preserve"><tspan
     y="728.23358"
     x="168.9985"
     id="tspan5770"
     sodipodi:role="line">0</tspan></text>

<path
   id="path10339"
   clip-path="url(#clipPathT)"
   title="-0.02*(x-70)*(x-50)+65"
   d="m 38,798.97343 c 0.307641,-0.58618 0.615282,-1.17188 0.922923,-1.75709 0.307641,-0.58521 0.615282,-1.16992 0.922923,-1.75416 0.307641,-0.58423 0.615282,-1.16797 0.922923,-1.75122 0.307641,-0.58325 0.615282,-1.16601 0.922923,-1.74829 0.307641,-0.58227 0.615282,-1.16406 0.922923,-1.74536 0.307641,-0.58129 0.615282,-1.1621 0.922923,-1.74242 0.307641,-0.58032 0.615281,-1.16015 0.922922,-1.73949 0.307641,-0.57934 0.615282,-1.15819 0.922923,-1.73655 0.307641,-0.57836 0.615282,-1.15624 0.922923,-1.73362 0.307641,-0.57739 0.615282,-1.15428 0.922923,-1.73069 0.307641,-0.57641 0.615282,-1.15232 0.922923,-1.72775 0.307641,-0.57543 0.615282,-1.15037 0.922923,-1.72482 0.307641,-0.57445 0.615282,-1.14841 0.922923,-1.72189 0.307641,-0.57347 0.615282,-1.14645 0.922923,-1.71895 0.307641,-0.57249 0.615282,-1.1445 0.922923,-1.71601 0.307641,-0.57152 0.615282,-1.14255 0.922923,-1.71309 0.307641,-0.57054 0.615282,-1.14059 0.922923,-1.71015 0.307641,-0.56956 0.615282,-1.13863 0.922923,-1.70721 0.307641,-0.56859 0.615282,-1.13668 0.922923,-1.70429 0.307641,-0.5676 0.615281,-1.13472 0.922922,-1.70134 0.307641,-0.56663 0.615282,-1.13277 0.922923,-1.69842 0.307641,-0.56565 0.615282,-1.13081 0.922923,-1.69548 0.307641,-0.56467 0.615282,-1.12885 0.922923,-1.69255 0.307641,-0.56369 0.615282,-1.12689 0.922923,-1.68961 0.307641,-0.56271 0.615282,-1.12494 0.922923,-1.68668 0.307641,-0.56174 0.615282,-1.12298 0.922923,-1.68374 0.307641,-0.56076 0.615282,-1.12103 0.922923,-1.68081 0.307641,-0.55979 0.615282,-1.11908 0.922923,-1.67788 0.307641,-0.5588 0.615282,-1.11712 0.922923,-1.67494 0.307641,-0.55783 0.615282,-1.11517 0.922923,-1.67201 0.307641,-0.55685 0.615282,-1.11321 0.922923,-1.66908 0.307641,-0.55587 0.615282,-1.11125 0.922923,-1.66614 0.307641,-0.55489 0.615281,-1.10929 0.922922,-1.66321 0.307641,-0.55391 0.615282,-1.10734 0.922923,-1.66027 0.307641,-0.55294 0.615282,-1.10539 0.922923,-1.65734 0.307641,-0.55196 0.615282,-1.10343 0.922923,-1.65441 0.307641,-0.55098 0.615282,-1.10147 0.922923,-1.65147 0.307641,-0.55 0.615282,-1.09952 0.922923,-1.64854 0.307641,-0.54903 0.615282,-1.09756 0.922923,-1.64561 0.307641,-0.54804 0.615282,-1.0956 0.922923,-1.64267 0.307641,-0.54706 0.615282,-1.09364 0.922923,-1.63973 0.307641,-0.54609 0.615282,-1.09169 0.922923,-1.63681 0.307641,-0.54511 0.615282,-1.08973 0.922923,-1.63387 0.307641,-0.54413 0.615282,-1.08777 0.922923,-1.63093 0.307641,-0.54316 0.615282,-1.08582 0.922923,-1.628 0.307641,-0.54218 0.615281,-1.08387 0.922922,-1.62507 0.307641,-0.5412 0.615282,-1.08191 0.922923,-1.62213 0.307641,-0.54023 0.615282,-1.07996 0.922923,-1.6192 0.307641,-0.53925 0.615282,-1.078 0.922923,-1.61627 0.307641,-0.53827 0.615282,-1.07604 0.922923,-1.61333 0.307641,-0.53729 0.615282,-1.07409 0.922923,-1.6104 0.307641,-0.53631 0.615282,-1.07213 0.922923,-1.60747 0.307641,-0.53533 0.615282,-1.07017 0.922923,-1.60453 0.307641,-0.53435 0.615282,-1.06822 0.922923,-1.60159 0.307641,-0.53338 0.615282,-1.06627 0.922923,-1.59867 0.307641,-0.5324 0.615282,-1.0643 0.922923,-1.59573 0.307641,-0.53142 0.615282,-1.06235 0.922923,-1.59279 0.307641,-0.53044 0.615282,-1.0604 0.922923,-1.58986 0.307641,-0.52947 0.615281,-1.05844 0.922922,-1.58693 0.307641,-0.52849 0.615282,-1.05648 0.922923,-1.58399 0.307641,-0.52751 0.615282,-1.05453 0.922923,-1.58106 0.307641,-0.52653 0.615282,-1.05258 0.922923,-1.57813 0.307641,-0.52555 0.615282,-1.05061 0.922923,-1.57519 0.307641,-0.52458 0.615282,-1.04866 0.922923,-1.57226 0.307641,-0.5236 0.615282,-1.0467 0.922923,-1.56932 0.307641,-0.52262 0.615282,-1.04475 0.922923,-1.56639 0.307641,-0.52164 0.615282,-1.0428 0.922923,-1.56346 0.307644,-0.52066 0.615284,-1.04084 0.922924,-1.56052 0.30764,-0.51969 0.61528,-1.03888 0.92292,-1.55759 0.30764,-0.51871 0.61528,-1.03693 0.92292,-1.55466 0.30765,-0.51773 0.61529,-1.03497 0.92293,-1.55172 0.30764,-0.51675 0.61528,-1.03301 0.92292,-1.54878 0.30764,-0.51578 0.61528,-1.03106 0.92292,-1.54586 0.30764,-0.51479 0.61529,-1.0291 0.92293,-1.54292 0.30764,-0.51382 0.61528,-1.02714 0.92292,-1.53998 0.30764,-0.51284 0.61528,-1.02519 0.92292,-1.53705 0.30764,-0.51187 0.61528,-1.02324 0.92293,-1.53412 0.30764,-0.51089 0.61528,-1.02128 0.92292,-1.53119 0.30764,-0.5099 0.61528,-1.01932 0.92292,-1.52825 0.30764,-0.50893 0.61528,-1.01736 0.92292,-1.52531 0.30764,-0.50795 0.61529,-1.01541 0.92293,-1.52239 0.30764,-0.50697 0.61528,-1.01345 0.92292,-1.51944 0.30764,-0.506 0.61528,-1.0115 0.92292,-1.51652 0.30764,-0.50502 0.61528,-1.00954 0.92293,-1.51358 0.30764,-0.50404 0.61528,-1.00759 0.92292,-1.51065 0.30764,-0.50306 0.61528,-1.00563 0.92292,-1.50771 0.30764,-0.50208 0.61528,-1.00367 0.92292,-1.50478 0.30765,-0.5011 0.61529,-1.00172 0.92293,-1.50184 0.30764,-0.50013 0.61528,-0.99977 0.92292,-1.49892 0.30764,-0.49914 0.61528,-0.9978 0.92292,-1.49597 0.30764,-0.49817 0.61529,-0.99585 0.92293,-1.49305 0.30764,-0.49719 0.61528,-0.99389 0.92292,-1.49011 0.30764,-0.49621 0.61528,-0.99194 0.92292,-1.48717 0.30764,-0.49524 0.61528,-0.98999 0.92292,-1.48425 0.30765,-0.49425 0.61529,-0.98802 0.92293,-1.4813 0.30764,-0.49329 0.61528,-0.98608 0.92292,-1.47838 0.30764,-0.4923 0.61528,-0.98411 0.92292,-1.47544 0.30764,-0.49132 0.61529,-0.98216 0.92293,-1.47251 0.30764,-0.49034 0.61528,-0.9802 0.92292,-1.46957 0.30764,-0.48937 0.61528,-0.97825 0.92292,-1.46664 0.30764,-0.48839 0.61528,-0.97629 0.92293,-1.4637 0.30764,-0.48742 0.61528,-0.97434 0.92292,-1.46077 0.30764,-0.48644 0.61528,-0.97238 0.92292,-1.45784 0.30764,-0.48546 0.61528,-0.97043 0.92292,-1.45491 0.30764,-0.48447 0.61529,-0.96846 0.92293,-1.45196 0.30764,-0.48351 0.61528,-0.96652 0.92292,-1.44904 0.30764,-0.48252 0.61528,-0.96456 0.92292,-1.4461 0.30764,-0.48155 0.61528,-0.9626 0.92293,-1.44317 0.30764,-0.48057 0.61528,-0.96065 0.92292,-1.44024 0.30764,-0.47958 0.61528,-0.95868 0.92292,-1.4373 0.30764,-0.47861 0.61528,-0.95673 0.92292,-1.43436 0.30765,-0.47764 0.61529,-0.95478 0.92293,-1.43143 0.30764,-0.47666 0.61528,-0.95283 0.92292,-1.4285 0.30764,-0.47568 0.61528,-0.95087 0.92292,-1.42557 0.30764,-0.4747 0.61529,-0.94891 0.92293,-1.42263 0.30764,-0.47372 0.61528,-0.94695 0.92292,-1.4197 0.30764,-0.47274 0.61528,-0.94499 0.92292,-1.41676 0.30764,-0.47177 0.61528,-0.94304 0.92292,-1.41383 0.30765,-0.47079 0.61529,-0.94108 0.92293,-1.41089 0.30764,-0.46981 0.61528,-0.93913 0.92292,-1.40797 0.30764,-0.46883 0.61528,-0.93717 0.92292,-1.40502 0.30764,-0.46786 0.61529,-0.93522 0.92293,-1.4021 0.30764,-0.46687 0.61528,-0.93326 0.92292,-1.39916 0.30764,-0.4659 0.61528,-0.9313 0.92292,-1.39622 0.30764,-0.46492 0.61528,-0.92935 0.92293,-1.3933 0.30764,-0.46394 0.61528,-0.92739 0.92292,-1.39036 0.30764,-0.46296 0.61528,-0.92543 0.92292,-1.38742 0.30764,-0.46199 0.61528,-0.92348 0.92292,-1.38449 0.30765,-0.46101 0.61529,-0.92153 0.92293,-1.38156 0.30764,-0.46003 0.61528,-0.91957 0.92292,-1.37862 0.30764,-0.45905 0.61528,-0.91762 0.92292,-1.37569 0.30764,-0.45807 0.61528,-0.91566 0.92293,-1.37276 0.30764,-0.45709 0.61528,-0.9137 0.92292,-1.36982 0.30764,-0.45612 0.61528,-0.91174 0.92292,-1.36688 0.30764,-0.45515 0.61528,-0.9098 0.92292,-1.36396 0.30765,-0.45416 0.61529,-0.90783 0.92293,-1.36102 0.30764,-0.45318 0.61528,-0.90588 0.92292,-1.35808 0.30764,-0.45221 0.61528,-0.90393 0.92292,-1.35516 0.30764,-0.45123 0.61529,-0.90196 0.92293,-1.35221 0.30764,-0.45026 0.61528,-0.90002 0.92292,-1.34929 0.30764,-0.44927 0.61528,-0.89805 0.92292,-1.34635 0.30764,-0.44829 0.61528,-0.8961 0.92293,-1.34342 0.30764,-0.44731 0.61528,-0.89414 0.92292,-1.34048 0.30764,-0.44634 0.61528,-0.89219 0.92292,-1.33755 0.30764,-0.44536 0.61528,-0.89023 0.92292,-1.33461 0.30764,-0.44439 0.61529,-0.88828 0.92293,-1.33168 0.30764,-0.44341 0.61528,-0.88632 0.92292,-1.32875 0.30764,-0.44243 0.61528,-0.88437 0.92292,-1.32582 0.30764,-0.44144 0.61528,-0.8824 0.92293,-1.32288 0.30764,-0.44047 0.61528,-0.88045 0.92292,-1.31994 0.30764,-0.43949 0.61528,-0.8785 0.92292,-1.31701 0.30764,-0.43852 0.61528,-0.87654 0.92292,-1.31408 0.30765,-0.43754 0.61529,-0.87459 0.92293,-1.31114 0.30764,-0.43656 0.61528,-0.87263 0.92292,-1.30822 0.30764,-0.43558 0.61528,-0.87067 0.92292,-1.30527 0.30764,-0.43461 0.61529,-0.86872 0.92293,-1.30234 0.30764,-0.43363 0.61528,-0.86677 0.92292,-1.29941 0.30764,-0.43265 0.61528,-0.86481 0.92292,-1.29648 0.30764,-0.43167 0.61528,-0.86285 0.92292,-1.29354 0.30765,-0.43069 0.61529,-0.86089 0.92293,-1.29061 0.30764,-0.42971 0.61528,-0.85893 0.92292,-1.28767 0.30764,-0.42874 0.61528,-0.85698 0.92292,-1.28474 0.30764,-0.42776 0.61529,-0.85502 0.92293,-1.2818 0.30764,-0.42678 0.61528,-0.85307 0.92292,-1.27888 0.30764,-0.4258 0.61528,-0.85111 0.92292,-1.27593 0.30764,-0.42483 0.61528,-0.84916 0.92293,-1.27301 0.30764,-0.42384 0.61528,-0.8472 0.92292,-1.27007 0.30764,-0.42287 0.61528,-0.84524 0.92292,-1.26713 0.30764,-0.42189 0.61528,-0.84329 0.92292,-1.26421 0.30764,-0.42091 0.61529,-0.84133 0.92293,-1.26126 0.30764,-0.41994 0.61528,-0.83938 0.92292,-1.25834 0.30764,-0.41896 0.61528,-0.83742 0.92292,-1.2554 0.30764,-0.41798 0.61528,-0.83547 0.92293,-1.25247 0.30764,-0.417 0.61528,-0.83351 0.92292,-1.24953 0.30764,-0.41602 0.61528,-0.83155 0.92292,-1.2466 0.30764,-0.41504 0.61528,-0.8296 0.92292,-1.24366 0.30765,-0.41407 0.61529,-0.82765 0.92293,-1.24074 0.30764,-0.41308 0.61528,-0.82568 0.92292,-1.23779 0.30764,-0.41211 0.61528,-0.82373 0.92292,-1.23487 0.30764,-0.41113 0.61529,-0.82177 0.92293,-1.23193 0.30764,-0.41015 0.61528,-0.81982 0.92292,-1.22899 0.30764,-0.40918 0.61528,-0.81787 0.92292,-1.22606 0.30764,-0.4082 0.61528,-0.81591 0.92292,-1.22313 0.30765,-0.40722 0.61529,-0.81395 0.92293,-1.2202 0.30764,-0.40624 0.61528,-0.81199 0.92292,-1.21726 0.30764,-0.40526 0.61528,-0.81004 0.92292,-1.21432 0.30764,-0.40429 0.61529,-0.80809 0.92293,-1.2114 0.30764,-0.40331 0.61528,-0.80613 0.92292,-1.20846 0.30764,-0.40233 0.61528,-0.80417 0.92292,-1.20552 0.30764,-0.40135 0.61528,-0.80222 0.92293,-1.20259 0.30764,-0.40038 0.61528,-0.80026 0.92292,-1.19966 0.30764,-0.3994 0.61528,-0.7983 0.92292,-1.19672 0.30764,-0.39842 0.61528,-0.79635 0.92292,-1.19379 0.30765,-0.39744 0.61529,-0.7944 0.92293,-1.19086 0.30764,-0.39646 0.61528,-0.79244 0.92292,-1.18792 0.30764,-0.39549 0.61528,-0.79048 0.92292,-1.18499 0.30764,-0.39451 0.61528,-0.78852 0.92293,-1.18205 0.30764,-0.39353 0.61528,-0.78657 0.92292,-1.17912 0.30764,-0.39255 0.61528,-0.78462 0.92292,-1.17619 0.30764,-0.39157 0.61528,-0.78266 0.92292,-1.17325 0.30765,-0.3906 0.61529,-0.7807 0.92293,-1.17032 0.30764,-0.38962 0.61528,-0.77875 0.92292,-1.16739 0.30764,-0.38864 0.61528,-0.77678 0.92292,-1.16445 0.30764,-0.38766 0.61529,-0.77483 0.92293,-1.16151 0.30764,-0.38669 0.61528,-0.77288 0.92292,-1.15859 0.30764,-0.3857 0.61528,-0.77092 0.92292,-1.15565 0.30764,-0.38472 0.61528,-0.76896 0.92293,-1.15271 0.30764,-0.38375 0.61528,-0.76701 0.92292,-1.14978 0.30764,-0.38277 0.61528,-0.76506 0.92292,-1.14685 0.30764,-0.38179 0.61528,-0.7631 0.92292,-1.14391 0.30764,-0.38082 0.61529,-0.76115 0.92293,-1.14098 0.30764,-0.37984 0.61528,-0.75919 0.92292,-1.13805 0.30764,-0.37886 0.61528,-0.75723 0.92292,-1.13511 0.30764,-0.37789 0.61528,-0.75528 0.92293,-1.13218 0.30764,-0.37691 0.61528,-0.75332 0.92292,-1.12925 0.30764,-0.37592 0.61528,-0.75136 0.92292,-1.12631 0.30764,-0.37495 0.61528,-0.7494 0.92292,-1.12337 0.30765,-0.37397 0.61529,-0.74745 0.92293,-1.12045 0.30764,-0.37299 0.61528,-0.74549 0.92292,-1.11751 0.30764,-0.37201 0.61528,-0.74353 0.92292,-1.11457 0.30764,-0.37104 0.61528,-0.74158 0.92293,-1.11164 0.30764,-0.37006 0.61528,-0.73963 0.92292,-1.10871 0.30764,-0.36908 0.61528,-0.73767 0.92292,-1.10577 0.30764,-0.36811 0.61528,-0.73572 0.92292,-1.10284 0.30765,-0.36713 0.61529,-0.73376 0.92293,-1.09991 0.30764,-0.36615 0.61528,-0.7318 0.92292,-1.09697 0.30764,-0.36517 0.61528,-0.72985 0.92292,-1.09404 0.30764,-0.36419 0.61529,-0.72789 0.92293,-1.0911 0.30764,-0.36322 0.61528,-0.72594 0.92292,-1.08817 0.30764,-0.36224 0.61528,-0.72398 0.92292,-1.08524 0.30764,-0.36126 0.61528,-0.72202 0.92293,-1.0823 0.30764,-0.36028 0.61528,-0.72007 0.92292,-1.07937 0.30764,-0.3593 0.61528,-0.71811 0.92292,-1.07644 0.30764,-0.35832 0.61528,-0.71615 0.92292,-1.0735 0.30764,-0.35734 0.61529,-0.7142 0.92293,-1.07057 0.30764,-0.35636 0.61528,-0.71224 0.92292,-1.06763 0.30764,-0.35539 0.61528,-0.71029 0.92292,-1.0647 0.30764,-0.35441 0.61528,-0.70833 0.92293,-1.06176 0.30764,-0.35344 0.61528,-0.70638 0.92292,-1.05884 0.30764,-0.35245 0.61528,-0.70442 0.92292,-1.05589 0.30764,-0.35148 0.61528,-0.70247 0.92292,-1.05297 0.30765,-0.3505 0.61529,-0.70051 0.92293,-1.05003 0.30764,-0.34952 0.61528,-0.69855 0.92292,-1.04709 0.30764,-0.34855 0.61528,-0.6966 0.92292,-1.04417 0.30764,-0.34756 0.61529,-0.69464 0.92293,-1.04123 0.30764,-0.34658 0.61528,-0.69268 0.92292,-1.03829 0.30764,-0.34561 0.61528,-0.69073 0.92292,-1.03536 0.30764,-0.34463 0.61528,-0.68877 0.92292,-1.03243 0.30765,-0.34365 0.61529,-0.68682 0.92293,-1.02949 0.30764,-0.34268 0.61528,-0.68486 0.92292,-1.02656 0.30764,-0.3417 0.61528,-0.68291 0.92292,-1.02363 0.30764,-0.34072 0.61529,-0.68095 0.92293,-1.02069 0.30764,-0.33974 0.61528,-0.67899 0.92292,-1.01776 0.30764,-0.33876 0.61528,-0.67703 0.92292,-1.01482 0.30764,-0.33779 0.61528,-0.67508 0.92293,-1.01189 0.30764,-0.33681 0.61528,-0.67313 0.92292,-1.00896 0.30764,-0.33583 0.61528,-0.67117 0.92292,-1.00602 0.30764,-0.33485 0.61528,-0.66921 0.92292,-1.00309 0.30765,-0.33387 0.61529,-0.66725 0.92293,-1.00015 0.30764,-0.3329 0.61528,-0.6653 0.92292,-0.99722 0.30764,-0.33192 0.61528,-0.66335 0.92292,-0.99429 0.30764,-0.33094 0.61528,-0.66139 0.92293,-0.99135 0.30764,-0.32996 0.61528,-0.65944 0.92292,-0.98842 0.30764,-0.32898 0.61528,-0.65748 0.92292,-0.98549 0.30764,-0.328 0.61528,-0.65552 0.92292,-0.98255 0.30765,-0.32702 0.61529,-0.65356 0.92293,-0.97961 0.30764,-0.32605 0.61528,-0.65161 0.92292,-0.97669 0.30764,-0.32507 0.61528,-0.64965 0.92292,-0.97375 0.30764,-0.32409 0.61529,-0.6477 0.92293,-0.97081 0.30764,-0.32312 0.61528,-0.64575 0.92292,-0.96789 0.30764,-0.32213 0.61528,-0.64378 0.92292,-0.96494 0.30764,-0.32116 0.61528,-0.64183 0.92293,-0.96202 0.30764,-0.32018 0.61528,-0.63987 0.92292,-0.95908 0.30764,-0.3192 0.61528,-0.63792 0.92292,-0.95614 0.30764,-0.31823 0.61528,-0.63597 0.92292,-0.95322 0.30764,-0.31725 0.61529,-0.634 0.92293,-0.95028 0.30764,-0.31627 0.61528,-0.63205 0.92292,-0.94734 0.30764,-0.31529 0.61528,-0.6301 0.92292,-0.94441 0.30764,-0.31432 0.61528,-0.62814 0.92293,-0.94148 0.30764,-0.31334 0.61528,-0.62618 0.92292,-0.93854 0.30764,-0.31236 0.61528,-0.62423 0.92292,-0.93561 0.30764,-0.31138 0.61528,-0.62227 0.92292,-0.93268 0.30765,-0.3104 0.61529,-0.62031 0.92293,-0.92974 0.30764,-0.30942 0.61528,-0.61836 0.92292,-0.92681 0.30764,-0.30844 0.61528,-0.6164 0.92292,-0.92387 0.30764,-0.30747 0.61528,-0.61445 0.92293,-0.92094 0.30764,-0.30649 0.61528,-0.61249 0.92292,-0.91801 0.30764,-0.30551 0.61528,-0.61053 0.92292,-0.91507 0.30764,-0.30454 0.61528,-0.60858 0.92292,-0.91214 0.30765,-0.30356 0.61529,-0.60662 0.92293,-0.9092 0.30764,-0.30258 0.61528,-0.60467 0.92292,-0.90627 0.30764,-0.30161 0.61528,-0.60272 0.92292,-0.90334 0.30764,-0.30062 0.61529,-0.60076 0.92293,-0.9004 0.30764,-0.29965 0.61528,-0.59881 0.92292,-0.89747 0.30764,-0.29867 0.61528,-0.59685 0.92292,-0.89454 0.30764,-0.29769 0.61528,-0.59489 0.92293,-0.8916 0.30764,-0.29671 0.61528,-0.59293 0.92292,-0.88867 0.30764,-0.29573 0.61528,-0.59098 0.92292,-0.88573 0.30764,-0.29476 0.61528,-0.58902 0.92292,-0.8828 0.30764,-0.29378 0.61529,-0.58707 0.92293,-0.87987 0.30764,-0.2928 0.61528,-0.58511 0.92292,-0.87693 0.30764,-0.29182 0.61528,-0.58315 0.92292,-0.874 0.30764,-0.29084 0.61528,-0.5812 0.92293,-0.87106 0.30764,-0.28987 0.61528,-0.57924 0.92292,-0.86813 0.30764,-0.28889 0.61528,-0.57729 0.92292,-0.8652 0.30764,-0.28791 0.61528,-0.57533 0.92292,-0.86226 0.30765,-0.28694 0.61529,-0.57338 0.92293,-0.85933 0.30764,-0.28596 0.61528,-0.57142 0.92292,-0.8564 0.30764,-0.28497 0.61528,-0.56946 0.92292,-0.85346 0.30764,-0.284 0.61529,-0.56751 0.92293,-0.85053 0.30764,-0.28302 0.61528,-0.56555 0.92292,-0.84759 0.30764,-0.28204 0.61528,-0.56359 0.92292,-0.84466 0.30764,-0.28106 0.61528,-0.56164 0.92292,-0.84172 0.30765,-0.28009 0.61529,-0.55969 0.92293,-0.8388 0.30764,-0.27911 0.61528,-0.55772 0.92292,-0.83585 0.30764,-0.27814 0.61528,-0.55578 0.92292,-0.83293 0.30764,-0.27715 0.61529,-0.55381 0.92293,-0.82999 0.30764,-0.27617 0.61528,-0.55186 0.92292,-0.82706 0.30764,-0.27519 0.61528,-0.5499 0.92292,-0.82412 0.30764,-0.27422 0.61528,-0.54795 0.92293,-0.82119 0.30764,-0.27324 0.61528,-0.54599 0.92292,-0.81825 0.30764,-0.27227 0.61528,-0.54404 0.92292,-0.81532 0.30764,-0.27129 0.61528,-0.54208 0.92292,-0.81239 0.30765,-0.27031 0.61529,-0.54012 0.92293,-0.80945 0.30764,-0.26933 0.61528,-0.53817 0.92292,-0.80652 0.30764,-0.26835 0.61528,-0.53622 0.92292,-0.80359 0.30764,-0.26737 0.61528,-0.53425 0.92293,-0.80065 0.30764,-0.2664 0.61528,-0.5323 0.92292,-0.79772 0.30764,-0.26542 0.61528,-0.53034 0.92292,-0.79478 0.30764,-0.26444 0.61528,-0.52839 0.92292,-0.79185 0.30765,-0.26346 0.61529,-0.52643 0.92293,-0.78892 0.30764,-0.26248 0.61528,-0.52448 0.92292,-0.78598 0.30764,-0.26151 0.61528,-0.52252 0.92292,-0.78305 0.30764,-0.26053 0.61529,-0.52056 0.92293,-0.78011 0.30764,-0.25955 0.61528,-0.51861 0.92292,-0.77718 0.30764,-0.25858 0.61528,-0.51666 0.92292,-0.77425 0.30764,-0.2576 0.61528,-0.5147 0.92293,-0.77131 0.30764,-0.25662 0.61528,-0.51275 0.92292,-0.76838 0.30764,-0.25564 0.61528,-0.51079 0.92292,-0.76545 0.30764,-0.25466 0.61528,-0.50883 0.92292,-0.76251 0.30764,-0.25368 0.61529,-0.50687 0.92293,-0.75958 0.30764,-0.2527 0.61528,-0.50492 0.92292,-0.75664 0.30764,-0.25173 0.61528,-0.50296 0.92292,-0.75371 0.30764,-0.25075 0.61528,-0.50101 0.92293,-0.75078 0.30764,-0.24977 0.61528,-0.49905 0.92292,-0.74784 0.30764,-0.24879 0.61528,-0.49709 0.92292,-0.74491 0.30764,-0.24781 0.61528,-0.49514 0.92292,-0.74197 0.30765,-0.24684 0.61529,-0.49318 0.92293,-0.73904 0.30764,-0.24586 0.61528,-0.49123 0.92292,-0.73611 0.30764,-0.24488 0.61528,-0.48927 0.92292,-0.73317 0.30764,-0.24391 0.61528,-0.48732 0.92293,-0.73024 0.30764,-0.24293 0.61528,-0.48536 0.92292,-0.72731 0.30764,-0.24194 0.61528,-0.4834 0.92292,-0.72437 0.30764,-0.24097 0.61528,-0.48144 0.92292,-0.72144 0.30765,-0.23999 0.61529,-0.47949 0.92293,-0.7185 0.30764,-0.23901 0.61528,-0.47753 0.92292,-0.71557 0.30764,-0.23803 0.61528,-0.47558 0.92292,-0.71263 0.30764,-0.23706 0.61529,-0.47363 0.92293,-0.70971 0.30764,-0.23607 0.61528,-0.47166 0.92292,-0.70676 0.30764,-0.23511 0.61528,-0.46972 0.92292,-0.70384 0.30764,-0.23412 0.61528,-0.46775 0.92293,-0.7009 0.30764,-0.23314 0.61528,-0.4658 0.92292,-0.69797 0.30764,-0.23216 0.61528,-0.46384 0.92292,-0.69503 0.30764,-0.23119 0.61528,-0.46189 0.92292,-0.6921 0.30764,-0.23021 0.61529,-0.45993 0.92293,-0.68916 0.30764,-0.22923 0.61528,-0.45798 0.92292,-0.68623 0.30764,-0.22826 0.61528,-0.45602 0.92292,-0.6833 0.30764,-0.22728 0.61528,-0.45406 0.92293,-0.68036 0.30764,-0.2263 0.61528,-0.45211 0.92292,-0.67743 0.30764,-0.22532 0.61528,-0.45015 0.92292,-0.6745 0.30764,-0.22434 0.61528,-0.44819 0.92292,-0.67156 0.30765,-0.22336 0.61529,-0.44624 0.92293,-0.66863 0.30764,-0.22238 0.61528,-0.44428 0.92292,-0.66569 0.30764,-0.22141 0.61528,-0.44233 0.92292,-0.66276 0.30764,-0.22043 0.61529,-0.44037 0.92293,-0.65983 0.30764,-0.21945 0.61528,-0.43841 0.92292,-0.65689 0.30764,-0.21847 0.61528,-0.43646 0.92292,-0.65396 0.30764,-0.2175 0.61528,-0.4345 0.92292,-0.65102 0.30765,-0.21652 0.61529,-0.43255 0.92293,-0.64809 0.30764,-0.21554 0.61528,-0.4306 0.92292,-0.64516 0.30764,-0.21456 0.61528,-0.42864 0.92292,-0.64222 0.30764,-0.21359 0.61529,-0.42668 0.92293,-0.63929 0.30764,-0.21261 0.61528,-0.42473 0.92292,-0.63636 0.30764,-0.21163 0.61528,-0.42277 0.92292,-0.63342 0.30764,-0.21065 0.61528,-0.42081 0.92293,-0.63049 0.30764,-0.20967 0.61528,-0.41885 0.92292,-0.62755 0.30764,-0.2087 0.61528,-0.4169 0.92292,-0.62462 0.30764,-0.20772 0.61528,-0.41495 0.92292,-0.62169 0.30765,-0.20674 0.61529,-0.41299 0.92293,-0.61875 0.30764,-0.20576 0.61528,-0.41103 0.92292,-0.61582 0.30764,-0.20478 0.61528,-0.40907 0.92292,-0.61288 0.30764,-0.20381 0.61528,-0.40712 0.92293,-0.60995 0.30764,-0.20283 0.61528,-0.40517 0.92292,-0.60702 0.30764,-0.20185 0.61528,-0.40321 0.92292,-0.60408 0.30764,-0.20087 0.61528,-0.40125 0.92292,-0.60115 0.30765,-0.19989 0.61529,-0.3993 0.92293,-0.59821 0.30764,-0.19892 0.61528,-0.39735 0.92292,-0.59529 0.30764,-0.19793 0.61528,-0.39538 0.92292,-0.59234 0.30764,-0.19696 0.61529,-0.39343 0.92293,-0.58942 0.30764,-0.19598 0.61528,-0.39147 0.92292,-0.58648 0.30764,-0.195 0.61528,-0.38951 0.92292,-0.58354 0.30764,-0.19403 0.61528,-0.38756 0.92293,-0.58061 0.30764,-0.19305 0.61528,-0.38561 0.92292,-0.57768 0.30764,-0.19207 0.61528,-0.38365 0.92292,-0.57475 0.30764,-0.19109 0.61528,-0.38169 0.92292,-0.57181 0.30764,-0.19011 0.61529,-0.37974 0.92293,-0.56887 0.30764,-0.18914 0.61528,-0.37779 0.92292,-0.56594 0.30764,-0.18816 0.61528,-0.37583 0.92292,-0.56301 0.30764,-0.18718 0.61528,-0.37387 0.92293,-0.56008 0.30764,-0.1862 0.61528,-0.37191 0.92292,-0.55714 0.30764,-0.18522 0.61528,-0.36996 0.92292,-0.55421 0.30764,-0.18424 0.61528,-0.368 0.92292,-0.55127 0.30765,-0.18327 0.61529,-0.36605 0.92293,-0.54834 0.30764,-0.18229 0.61528,-0.36409 0.92292,-0.5454 0.30764,-0.18132 0.61528,-0.36214 0.92292,-0.54248 0.30764,-0.18033 0.61528,-0.36018 0.92293,-0.53953 0.30764,-0.17936 0.61528,-0.35823 0.92292,-0.53661 0.30764,-0.17838 0.61528,-0.35627 0.92292,-0.53367 0.30764,-0.1774 0.61528,-0.35431 0.92292,-0.53073 0.30765,-0.17643 0.61529,-0.35236 0.92293,-0.52781 0.30764,-0.17544 0.61528,-0.3504 0.92292,-0.52486 0.30764,-0.17447 0.61528,-0.34845 0.92292,-0.52194 0.30764,-0.17349 0.61529,-0.34649 0.92293,-0.519 0.30764,-0.17251 0.61528,-0.34453 0.92292,-0.51607 0.30764,-0.17153 0.61528,-0.34257 0.92292,-0.51313 0.30764,-0.17055 0.61528,-0.34062 0.92293,-0.5102 0.30764,-0.16958 0.61528,-0.33866 0.92292,-0.50726 0.30764,-0.1686 0.61528,-0.33671 0.92292,-0.50433 0.30764,-0.16763 0.61528,-0.33476 0.92292,-0.5014 0.30764,-0.16665 0.61529,-0.3328 0.92293,-0.49847 0.30764,-0.16566 0.61528,-0.33084 0.92292,-0.49553 0.30764,-0.16468 0.61528,-0.32888 0.92292,-0.49259 0.30764,-0.16371 0.61528,-0.32693 0.92293,-0.48966 0.30764,-0.16274 0.61528,-0.32498 0.92292,-0.48673 0.30764,-0.16176 0.61528,-0.32302 0.92292,-0.4838 0.30764,-0.16077 0.61528,-0.32106 0.92292,-0.48086 0.30765,-0.15979 0.61529,-0.3191 0.92293,-0.47792 0.30764,-0.15882 0.61528,-0.31715 0.92292,-0.475 0.30764,-0.15784 0.61528,-0.31519 0.92292,-0.47205 0.30764,-0.15687 0.61529,-0.31324 0.92293,-0.46913 0.30764,-0.15589 0.61528,-0.31128 0.92292,-0.46619 0.30764,-0.15491 0.61528,-0.30933 0.92292,-0.46326 0.30764,-0.15393 0.61528,-0.30737 0.92292,-0.46032 0.30765,-0.15295 0.61529,-0.30542 0.92293,-0.45739 0.30764,-0.15198 0.61528,-0.30346 0.92292,-0.45446 0.30764,-0.15099 0.61528,-0.3015 0.92292,-0.45152 0.30764,-0.15002 0.61529,-0.29955 0.92293,-0.44859 0.30764,-0.14904 0.61528,-0.29759 0.92292,-0.44565 0.30764,-0.14806 0.61528,-0.29564 0.92292,-0.44272 0.30764,-0.14709 0.61528,-0.29368 0.92293,-0.43979 0.30764,-0.1461 0.61528,-0.29172 0.92292,-0.43685 0.30764,-0.14513 0.61528,-0.28977 0.92292,-0.43392 0.30764,-0.14415 0.61528,-0.28781 0.92292,-0.43098 0.30765,-0.14318 0.61529,-0.28586 0.92293,-0.42805 0.30764,-0.1422 0.61528,-0.2839 0.92292,-0.42512 0.30764,-0.14122 0.61528,-0.28194 0.92292,-0.42218 0.30764,-0.14024 0.61528,-0.27999 0.92293,-0.41925 0.30764,-0.13926 0.61528,-0.27803 0.92292,-0.41632 0.30764,-0.13828 0.61528,-0.27607 0.92292,-0.41338 0.30764,-0.13731 0.61528,-0.27412 0.92292,-0.41045 0.30765,-0.13632 0.61529,-0.27216 0.92293,-0.40751 0.30764,-0.13535 0.61528,-0.27021 0.92292,-0.40458 0.30764,-0.13437 0.61528,-0.26825 0.92292,-0.40165 0.30764,-0.13339 0.61529,-0.26629 0.92293,-0.39871 0.30764,-0.13242 0.61528,-0.26434 0.92292,-0.39578 0.30764,-0.13144 0.61528,-0.26238 0.92292,-0.39284 0.30764,-0.13046 0.61528,-0.26043 0.92293,-0.38991 0.30764,-0.12948 0.61528,-0.25848 0.92292,-0.38698 0.30764,-0.1285 0.61528,-0.25652 0.92292,-0.38404 0.30764,-0.12753 0.61528,-0.25456 0.92292,-0.38111 0.30764,-0.12655 0.61529,-0.25261 0.92293,-0.37818 0.30764,-0.12557 0.61528,-0.25065 0.92292,-0.37524 0.30764,-0.12459 0.61528,-0.24869 0.92292,-0.37231 0.30764,-0.12361 0.61528,-0.24673 0.92293,-0.36937 0.30764,-0.12264 0.61528,-0.24478 0.92292,-0.36644 0.30764,-0.12166 0.61528,-0.24282 0.92292,-0.3635 0.30764,-0.12069 0.61528,-0.24087 0.92292,-0.36058 0.30765,-0.1197 0.61529,-0.23891 0.92293,-0.35763 0.30764,-0.11873 0.61528,-0.23696 0.92292,-0.35471 0.30764,-0.11775 0.61528,-0.235 0.92292,-0.35177 0.30764,-0.11677 0.61528,-0.23305 0.92293,-0.34884 0.30764,-0.11579 0.61528,-0.23109 0.92292,-0.3459 0.30764,-0.11481 0.61528,-0.22913 0.92292,-0.34297 0.30764,-0.11383 0.61528,-0.22718 0.92292,-0.34003 0.30765,-0.11286 0.61529,-0.22523 0.92293,-0.3371 0.30764,-0.11188 0.61528,-0.22327 0.92292,-0.33417 0.30764,-0.1109 0.61528,-0.22131 0.92292,-0.33123 0.30764,-0.10993 0.61529,-0.21936 0.92293,-0.3283 0.30764,-0.10895 0.61528,-0.2174 0.92292,-0.32537 0.30764,-0.10797 0.61528,-0.21544 0.92292,-0.32243 0.30764,-0.10699 0.61528,-0.21349 0.92293,-0.3195 0.30764,-0.10601 0.61528,-0.21153 0.92292,-0.31656 0.30764,-0.10504 0.61528,-0.20958 0.92292,-0.31363 0.30764,-0.10406 0.61528,-0.20762 0.92292,-0.3107 0.30764,-0.10308 0.61529,-0.20566 0.92293,-0.30776 0.30764,-0.1021 0.61528,-0.20371 0.92292,-0.30483 0.30764,-0.10112 0.61528,-0.20175 0.92292,-0.30189 0.30764,-0.10015 0.61528,-0.1998 0.92293,-0.29897 0.30764,-0.0992 0.61528,-0.19784 0.92292,-0.29602 0.30764,-0.0982 0.61528,-0.19589 0.92292,-0.2931 0.30764,-0.0972 0.61528,-0.19392 0.92292,-0.29016 0.30765,-0.0962 0.61529,-0.19197 0.92293,-0.28722 0.30764,-0.0953 0.61528,-0.19002 0.92292,-0.28429 0.30764,-0.0943 0.61528,-0.18806 0.92292,-0.28136 0.30764,-0.0933 0.61529,-0.1861 0.92293,-0.27842 0.30764,-0.0923 0.61528,-0.18415 0.92292,-0.27549 0.30764,-0.0913 0.61528,-0.1822 0.92292,-0.27256 0.30764,-0.0904 0.61528,-0.18024 0.92292,-0.26962 0.30765,-0.0894 0.61529,-0.17828 0.92293,-0.26669 0.30764,-0.0884 0.61528,-0.17632 0.92292,-0.26375 0.30764,-0.0874 0.61528,-0.17437 0.92292,-0.26082 0.30764,-0.0865 0.61529,-0.17242 0.92293,-0.25789 0.30764,-0.0855 0.61528,-0.17046 0.92292,-0.25495 0.30764,-0.0845 0.61528,-0.16851 0.92292,-0.25202 0.30764,-0.0835 0.61528,-0.16655 0.92293,-0.24909 0.30764,-0.0825 0.61528,-0.16459 0.92292,-0.24615 0.30764,-0.0816 0.61528,-0.16263 0.92292,-0.24322 0.30764,-0.0806 0.61528,-0.16067 0.92292,-0.24028 0.30765,-0.0796 0.61529,-0.15872 0.92293,-0.23735 0.30764,-0.0786 0.61528,-0.15677 0.92292,-0.23442 0.30764,-0.0777 0.61528,-0.15481 0.92292,-0.23148 0.30764,-0.0767 0.61528,-0.15285 0.92293,-0.22855 0.30764,-0.0757 0.61528,-0.15089 0.92292,-0.22561 0.30764,-0.0747 0.61528,-0.14894 0.92292,-0.22268 0.30764,-0.0737 0.61528,-0.14699 0.92292,-0.21975 0.30765,-0.0728 0.61529,-0.14503 0.92293,-0.21681 0.30764,-0.0718 0.61528,-0.14307 0.92292,-0.21388 0.30764,-0.0708 0.61528,-0.14112 0.92292,-0.21094 0.30764,-0.0698 0.61529,-0.13917 0.92293,-0.20801 0.30764,-0.0689 0.61528,-0.13721 0.92292,-0.20508 0.30764,-0.0679 0.61528,-0.13525 0.92292,-0.20214 0.30764,-0.0669 0.61528,-0.1333 0.92292,-0.19921 0.30765,-0.0659 0.61529,-0.13134 0.92293,-0.19628 0.30764,-0.0649 0.61528,-0.12938 0.92292,-0.19334 0.30764,-0.064 0.61528,-0.12743 0.92292,-0.19041 0.30764,-0.063 0.61529,-0.12547 0.92293,-0.18747 0.30764,-0.062 0.61528,-0.12352 0.92292,-0.18454 0.30764,-0.061 0.61528,-0.12156 0.92292,-0.18161 0.30764,-0.06 0.61528,-0.1196 0.92293,-0.17867 0.30764,-0.0591 0.61528,-0.11765 0.92292,-0.17574 0.30764,-0.0581 0.61528,-0.11569 0.92292,-0.17281 0.30764,-0.0571 0.61528,-0.11373 0.92292,-0.16987 0.30765,-0.0561 0.61529,-0.11178 0.92293,-0.16693 0.30764,-0.0552 0.61528,-0.10983 0.92292,-0.16401 0.30764,-0.0542 0.61528,-0.10786 0.92292,-0.16106 0.30764,-0.0532 0.61528,-0.10592 0.92293,-0.15814 0.30764,-0.0522 0.61528,-0.10396 0.92292,-0.1552 0.30764,-0.0512 0.61528,-0.102 0.92292,-0.15227 0.30764,-0.0503 0.61528,-0.10004 0.92292,-0.14933 0.30765,-0.0493 0.61529,-0.0981 0.92293,-0.1464 0.30764,-0.0483 0.61528,-0.0961 0.92292,-0.14347 0.30764,-0.0473 0.61528,-0.0942 0.92292,-0.14053 0.30764,-0.0464 0.61529,-0.0922 0.92293,-0.1376 0.30764,-0.0454 0.61528,-0.0903 0.92292,-0.13466 0.30764,-0.0444 0.61528,-0.0883 0.92292,-0.13173 0.30764,-0.0434 0.61528,-0.0864 0.92293,-0.1288 0.30764,-0.0424 0.61528,-0.0844 0.92292,-0.12586 0.30764,-0.0415 0.61528,-0.0824 0.92292,-0.12293 0.30764,-0.0405 0.61528,-0.0805 0.92292,-0.12 0.30764,-0.0395 0.61529,-0.0785 0.92293,-0.11706 0.30764,-0.0385 0.61528,-0.0766 0.92292,-0.11413 0.30764,-0.0376 0.61528,-0.0746 0.92292,-0.11119 0.30764,-0.0366 0.61528,-0.0727 0.92293,-0.10826 0.30764,-0.0356 0.61528,-0.0707 0.92292,-0.10532 0.30764,-0.0346 0.61528,-0.0688 0.92292,-0.1024 0.30764,-0.0336 0.61528,-0.0668 0.92292,-0.0994 0.30765,-0.0327 0.61529,-0.0648 0.92293,-0.0965 0.30764,-0.0317 0.61528,-0.0629 0.92292,-0.0936 0.30764,-0.0307 0.61528,-0.0609 0.92292,-0.0907 0.30764,-0.0297 0.61529,-0.059 0.92293,-0.0877 0.30764,-0.0288 0.61528,-0.057 0.92292,-0.0848 0.30764,-0.0278 0.61528,-0.0551 0.92292,-0.0819 0.30764,-0.0268 0.61528,-0.0531 0.92292,-0.0789 0.30765,-0.0258 0.61529,-0.0512 0.92293,-0.076 0.30764,-0.0248 0.61528,-0.0492 0.92292,-0.0731 0.30764,-0.0239 0.61528,-0.0472 0.92292,-0.0701 0.30764,-0.0229 0.61529,-0.0453 0.92293,-0.0672 0.30764,-0.0219 0.61528,-0.0433 0.92292,-0.0643 0.30764,-0.0209 0.61528,-0.0414 0.92292,-0.0613 0.30764,-0.0199 0.61528,-0.0394 0.92293,-0.0584 0.30764,-0.019 0.61528,-0.0375 0.92292,-0.0555 0.30764,-0.018 0.61528,-0.0355 0.92292,-0.0525 0.30764,-0.017 0.61528,-0.0335 0.92292,-0.0496 0.30765,-0.016 0.61529,-0.0316 0.92293,-0.0466 0.30764,-0.0151 0.61528,-0.0296 0.92292,-0.0437 0.30764,-0.0141 0.61528,-0.0277 0.92292,-0.0408 0.30764,-0.0131 0.61528,-0.0257 0.92293,-0.0378 0.30764,-0.0121 0.61528,-0.0238 0.92292,-0.0349 0.30764,-0.0111 0.61528,-0.0218 0.92292,-0.032 0.30764,-0.0102 0.61528,-0.0199 0.92292,-0.0291 0.30765,-0.009 0.61529,-0.0179 0.92293,-0.0261 0.30764,-0.008 0.61528,-0.0159 0.92292,-0.0232 0.30764,-0.007 0.61528,-0.014 0.92292,-0.0202 0.30764,-0.006 0.61529,-0.012 0.92293,-0.0173 0.30764,-0.005 0.61528,-0.0101 0.92292,-0.0144 0.30764,-0.004 0.61528,-0.008 0.92292,-0.0114 0.30764,-0.003 0.61528,-0.006 0.92292,-0.009 0.30765,-0.002 0.61529,-0.004 0.92293,-0.006 0.30764,-10e-4 0.61528,-0.002 0.92292,-0.003 0.30764,-3.9e-4 0.61528,-2.9e-4 0.92292,2.9e-4 0.30764,5.9e-4 0.61529,0.002 0.92293,0.003 0.30764,0.002 0.61528,0.004 0.92292,0.006 0.30764,0.003 0.61528,0.006 0.92292,0.009 0.30764,0.004 0.61528,0.008 0.92293,0.012 0.30764,0.005 0.61528,0.009 0.92292,0.015 0.30764,0.005 0.61528,0.0114 0.92292,0.0179 0.30764,0.006 0.61528,0.0134 0.92292,0.0208 0.30765,0.007 0.61529,0.0154 0.92293,0.0238 0.30764,0.008 0.61528,0.0173 0.92292,0.0267 0.30764,0.009 0.61528,0.0193 0.92292,0.0296 0.30764,0.0104 0.61528,0.0212 0.92293,0.0326 0.30764,0.0113 0.61528,0.0232 0.92292,0.0355 0.30764,0.0123 0.61528,0.0251 0.92292,0.0384 0.30764,0.0133 0.61528,0.0271 0.92292,0.0414 0.30765,0.0143 0.61529,0.029 0.92293,0.0443 0.30764,0.0152 0.61528,0.031 0.92292,0.0472 0.30764,0.0162 0.61528,0.033 0.92292,0.0502 0.30764,0.0172 0.61529,0.0349 0.92293,0.0531 0.30764,0.0182 0.61528,0.0369 0.92292,0.056 0.30764,0.0192 0.61528,0.0388 0.92292,0.059 0.30764,0.0202 0.61528,0.0408 0.92293,0.0619 0.30764,0.0211 0.61528,0.0427 0.92292,0.0648 0.30764,0.0221 0.61528,0.0447 0.92292,0.0678 0.30764,0.0231 0.61528,0.0466 0.92292,0.0707 0.30764,0.0241 0.61529,0.0486 0.92293,0.0736 0.30764,0.025 0.61528,0.0506 0.92292,0.0766 0.30764,0.026 0.61528,0.0525 0.92292,0.0795 0.30764,0.027 0.61528,0.0545 0.92293,0.0824 0.30764,0.028 0.61528,0.0564 0.92292,0.0854 0.30764,0.029 0.61528,0.0584 0.92292,0.0883 0.30764,0.0299 0.61528,0.0603 0.92292,0.0912 0.30765,0.0309 0.61529,0.0623 0.92293,0.0942 0.30764,0.0319 0.61528,0.0642 0.92292,0.0971 0.30764,0.0329 0.61528,0.0662 0.92292,0.10005 0.30764,0.0338 0.61529,0.0682 0.92293,0.10298 0.30764,0.0348 0.61528,0.0701 0.92292,0.10591 0.30764,0.0358 0.61528,0.0721 0.92292,0.10884 0.30764,0.0368 0.61528,0.074 0.92292,0.11178 0.30765,0.0378 0.61529,0.076 0.92293,0.11472 0.30764,0.0387 0.61528,0.0779 0.92292,0.11765 0.30764,0.0397 0.61528,0.0799 0.92292,0.12058 0.30764,0.0407 0.61529,0.0818 0.92293,0.12351 0.30764,0.0417 0.61528,0.0838 0.92292,0.12645 0.30764,0.0426 0.61528,0.0858 0.92292,0.12939 0.30764,0.0436 0.61528,0.0877 0.92293,0.13231 0.30764,0.0446 0.61528,0.0897 0.92292,0.13526 0.30764,0.0456 0.61528,0.0916 0.92292,0.13818 0.30764,0.0465 0.61528,0.0936 0.92292,0.14112 0.30765,0.0475 0.61529,0.0956 0.92293,0.14405 0.30764,0.0485 0.61528,0.0975 0.92292,0.14699 0.30764,0.0495 0.61528,0.0995 0.92292,0.14992 0.30764,0.0505 0.61528,0.10141 0.92293,0.15285 0.30764,0.0514 0.61528,0.10337 0.92292,0.15579 0.30764,0.0524 0.61528,0.10533 0.92292,0.15872 0.30764,0.0534 0.61528,0.10729 0.92292,0.16166 0.30765,0.0544 0.61529,0.10924 0.92293,0.16459 0.30764,0.0554 0.61528,0.11119 0.92292,0.16752 0.30764,0.0563 0.61528,0.11315 0.92292,0.17046 0.30764,0.0573 0.61529,0.11511 0.92293,0.17339 0.30764,0.0583 0.61528,0.11706 0.92292,0.17633 0.30764,0.0593 0.61528,0.11902 0.92292,0.17926 0.30764,0.0602 0.61528,0.12097 0.92292,0.18219 0.30765,0.0612 0.61529,0.12293 0.92293,0.18513 0.30764,0.0622 0.61528,0.12488 0.92292,0.18806 0.30764,0.0632 0.61528,0.12684 0.92292,0.19099 0.30764,0.0642 0.61529,0.1288 0.92293,0.19393 0.30764,0.0651 0.61528,0.13075 0.92292,0.19686 0.30764,0.0661 0.61528,0.13271 0.92292,0.1998 0.30764,0.0671 0.61528,0.13466 0.92293,0.20273 0.30764,0.0681 0.61528,0.13662 0.92292,0.20566 0.30764,0.0691 0.61528,0.13858 0.92292,0.2086 0.30764,0.07 0.61528,0.14053 0.92292,0.21153 0.30765,0.071 0.61529,0.14249 0.92293,0.21447 0.30764,0.072 0.61528,0.14444 0.92292,0.2174 0.30764,0.0729 0.61528,0.1464 0.92292,0.22033 0.30764,0.0739 0.61528,0.14836 0.92293,0.22327 0.30764,0.0749 0.61528,0.15031 0.92292,0.2262 0.30764,0.0759 0.61528,0.15227 0.92292,0.22913 0.30764,0.0769 0.61528,0.15423 0.92292,0.23207 0.30765,0.0778 0.61529,0.15618 0.92293,0.235 0.30764,0.0788 0.61528,0.15814 0.92292,0.23794 0.30764,0.0798 0.61528,0.16009 0.92292,0.24087 0.30764,0.0808 0.61529,0.16205 0.92293,0.24381 0.30764,0.0817 0.61528,0.164 0.92292,0.24673 0.30764,0.0827 0.61528,0.16596 0.92292,0.24968 0.30764,0.0837 0.61528,0.16791 0.92293,0.2526 0.30764,0.0847 0.61528,0.16987 0.92292,0.25554 0.30764,0.0857 0.61528,0.17183 0.92292,0.25847 0.30764,0.0867 0.61528,0.17379 0.92292,0.26141 0.30764,0.0876 0.61529,0.17574 0.92293,0.26434 0.30764,0.0886 0.61528,0.1777 0.92292,0.26728 0.30764,0.0896 0.61528,0.17965 0.92292,0.27021 0.30764,0.0906 0.61528,0.1816 0.92293,0.27314 0.30764,0.0915 0.61528,0.18356 0.92292,0.27608 0.30764,0.0925 0.61528,0.18552 0.92292,0.27901 0.30764,0.0935 0.61528,0.18747 0.92292,0.28194 0.30765,0.0945 0.61529,0.18943 0.92293,0.28488 0.30764,0.0954 0.61528,0.19139 0.92292,0.28781 0.30764,0.0964 0.61528,0.19334 0.92292,0.29075 0.30764,0.0974 0.61529,0.1953 0.92293,0.29368 0.30764,0.0984 0.61528,0.19725 0.92292,0.29661 0.30764,0.0994 0.61528,0.19921 0.92292,0.29955 0.30764,0.10034 0.61528,0.20117 0.92292,0.30248 0.30765,0.10132 0.61529,0.20312 0.92293,0.30542 0.30764,0.10229 0.61528,0.20507 0.92292,0.30835 0.30764,0.10327 0.61528,0.20703 0.92292,0.31128 0.30764,0.10425 0.61529,0.20899 0.92293,0.31422 0.30764,0.10522 0.61528,0.21094 0.92292,0.31715 0.30764,0.1062 0.61528,0.2129 0.92292,0.32008 0.30764,0.10718 0.61528,0.21486 0.92293,0.32302 0.30764,0.10816 0.61528,0.21681 0.92292,0.32595 0.30764,0.10914 0.61528,0.21877 0.92292,0.32889 0.30764,0.11012 0.61528,0.22072 0.92292,0.33182 0.30765,0.11109 0.61529,0.22268 0.92293,0.33475 0.30764,0.11208 0.61528,0.22464 0.92292,0.33769 0.30764,0.11305 0.61528,0.22659 0.92292,0.34062 0.30764,0.11403 0.61528,0.22855 0.92293,0.34356 0.30764,0.115 0.61528,0.2305 0.92292,0.34649 0.30764,0.11598 0.61528,0.23246 0.92292,0.34942 0.30764,0.11696 0.61528,0.23442 0.92292,0.35236 0.30765,0.11794 0.61529,0.23637 0.92293,0.35529 0.30764,0.11892 0.61528,0.23833 0.92292,0.35822 0.30764,0.1199 0.61528,0.24029 0.92292,0.36116 0.30764,0.12088 0.61529,0.24224 0.92293,0.36409 0.30764,0.12186 0.61528,0.2442 0.92292,0.36703 0.30764,0.12283 0.61528,0.24615 0.92292,0.36996 0.30764,0.12381 0.61528,0.24811 0.92292,0.3729 0.30765,0.12478 0.61529,0.25006 0.92293,0.37582 0.30764,0.12577 0.61528,0.25202 0.92292,0.37877 0.30764,0.12674 0.61528,0.25397 0.92292,0.38169 0.30764,0.12772 0.61529,0.25593 0.92293,0.38463 0.30764,0.1287 0.61528,0.25789 0.92292,0.38756 0.30764,0.12968 0.61528,0.25985 0.92292,0.3905 0.30764,0.13066 0.61528,0.2618 0.92293,0.39343 0.30764,0.13164 0.61528,0.26376 0.92292,0.39637 0.30764,0.13261 0.61528,0.26571 0.92292,0.3993 0.30764,0.13359 0.61528,0.26766 0.92292,0.40223 0.30765,0.13457 0.61529,0.26962 0.92293,0.40517 0.30764,0.13554 0.61528,0.27158 0.92292,0.4081 0.30764,0.13652 0.61528,0.27353 0.92292,0.41103 0.30764,0.1375 0.61528,0.27549 0.92293,0.41397 0.30764,0.13848 0.61528,0.27745 0.92292,0.4169 0.30764,0.13946 0.61528,0.2794 0.92292,0.41984 0.30764,0.14043 0.61528,0.28136 0.92292,0.42277 0.30765,0.14141 0.61529,0.28331 0.92293,0.4257 0.30764,0.14239 0.61528,0.28527 0.92292,0.42864 0.30764,0.14337 0.61528,0.28723 0.92292,0.43157 0.30764,0.14435 0.61529,0.28918 0.92293,0.43451 0.30764,0.14532 0.61528,0.29113 0.92292,0.43744 0.30764,0.1463 0.61528,0.29309 0.92292,0.44037 0.30764,0.14728 0.61528,0.29505 0.92293,0.44331 0.30764,0.14825 0.61528,0.297 0.92292,0.44624 0.30764,0.14923 0.61528,0.29896 0.92292,0.44917 0.30764,0.15021 0.61528,0.30092 0.92292,0.45211 0.30764,0.15119 0.61529,0.30287 0.92293,0.45504 0.30764,0.15217 0.61528,0.30483 0.92292,0.45798 0.30764,0.15315 0.61528,0.30678 0.92292,0.46091 0.30764,0.15412 0.61528,0.30874 0.92293,0.46384 0.30764,0.15511 0.61528,0.3107 0.92292,0.46678 0.30764,0.15608 0.61528,0.31265 0.92292,0.46971 0.30764,0.15706 0.61528,0.31461 0.92292,0.47265 0.30765,0.15804 0.61529,0.31656 0.92293,0.47558 0.30764,0.15901 0.61528,0.31852 0.92292,0.47851 0.30764,0.15999 0.61528,0.32048 0.92292,0.48145 0.30764,0.16097 0.61529,0.32243 0.92293,0.48438 0.30764,0.16195 0.61528,0.32439 0.92292,0.48731 0.30764,0.16293 0.61528,0.32635 0.92292,0.49025 0.30764,0.16391 0.61528,0.3283 0.92292,0.49319 0.30765,0.16488 0.61529,0.33025 0.92293,0.49611 0.30764,0.16586 0.61528,0.33221 0.92292,0.49905 0.30764,0.16684 0.61528,0.33417 0.92292,0.50199 0.30764,0.16781 0.61529,0.33612 0.92293,0.50492 0.30764,0.16879 0.61528,0.33807 0.92292,0.50785 0.30764,0.16977 0.61528,0.34003 0.92292,0.51078 0.30764,0.17075 0.61528,0.34199 0.92293,0.51372 0.30764,0.17173 0.61528,0.34395 0.92292,0.51666 0.30764,0.1727 0.61528,0.3459 0.92292,0.51958 0.30764,0.17369 0.61528,0.34786 0.92292,0.52252 0.30765,0.17467 0.61529,0.34982 0.92293,0.52546 0.30764,0.17564 0.61528,0.35177 0.92292,0.52839 0.30764,0.17662 0.61528,0.35373 0.92292,0.53132 0.30764,0.1776 0.61528,0.35568 0.92293,0.53426 0.30764,0.17857 0.61528,0.35764 0.92292,0.53719 0.30764,0.17955 0.61528,0.35959 0.92292,0.54012 0.30764,0.18053 0.61528,0.36155 0.92292,0.54306 0.30765,0.18151 0.61529,0.36351 0.92293,0.54599 0.30764,0.18249 0.61528,0.36547 0.92292,0.54893 0.30764,0.18346 0.61528,0.36742 0.92292,0.55186 0.30764,0.18444 0.61529,0.36937 0.92293,0.55479 0.30764,0.18542 0.61528,0.37133 0.92292,0.55773 0.30764,0.1864 0.61528,0.37329 0.92292,0.56066 0.30764,0.18738 0.61528,0.37525 0.92292,0.5636 0.30765,0.18835 0.61529,0.3772 0.92293,0.56653 0.30764,0.18933 0.61528,0.37915 0.92292,0.56946 0.30764,0.19031 0.61528,0.38111 0.92292,0.5724 0.30764,0.19129 0.61529,0.38306 0.92293,0.57533 0.30764,0.19227 0.61528,0.38502 0.92292,0.57826 0.30764,0.19325 0.61528,0.38698 0.92292,0.5812 0.30764,0.19422 0.61528,0.38894 0.92293,0.58414 0.30764,0.19519 0.61528,0.39088 0.92292,0.58706 0.30764,0.19618 0.61528,0.39285 0.92292,0.59 0.30764,0.19716 0.61528,0.3948 0.92292,0.59294 0.30765,0.19813 0.61529,0.39675 0.92293,0.59586 0.30764,0.19912 0.61528,0.39872 0.92292,0.59881 0.30764,0.20008 0.61528,0.40066 0.92292,0.60173 0.30764,0.20107 0.61528,0.40263 0.92293,0.60467 0.30764,0.20205 0.61528,0.40458 0.92292,0.6076 0.30764,0.20303 0.61528,0.40654 0.92292,0.61054 0.30764,0.204 0.61528,0.40849 0.92292,0.61347 0.30765,0.20498 0.61529,0.41045 0.92293,0.61641 0.30764,0.20595 0.61528,0.4124 0.92292,0.61934 0.30764,0.20693 0.61528,0.41436 0.92292,0.62227 0.30764,0.20791 0.61529,0.41632 0.92293,0.62521 0.30764,0.20889 0.61528,0.41827 0.92292,0.62814 0.30764,0.20987 0.61528,0.42022 0.92292,0.63107 0.30764,0.21085 0.61528,0.42218 0.92293,0.63401 0.30764,0.21182 0.61528,0.42414 0.92292,0.63694 0.30764,0.2128 0.61528,0.4261 0.92292,0.63988 0.30764,0.21378 0.61528,0.42805 0.92292,0.64281 0.30764,0.21476 0.61529,0.43 0.92293,0.64574 0.30764,0.21574 0.61528,0.43196 0.92292,0.64868 0.30764,0.21671 0.61528,0.43392 0.92292,0.65161 0.30764,0.21769 0.61528,0.43587 0.92293,0.65454 0.30764,0.21867 0.61528,0.43784 0.92292,0.65748 0.30764,0.21965 0.61528,0.43979 0.92292,0.66042 0.30764,0.22062 0.61528,0.44174 0.92292,0.66334 0.30765,0.22161 0.61529,0.4437 0.92293,0.66628 0.30764,0.22259 0.61528,0.44566 0.92292,0.66922 0.30764,0.22356 0.61528,0.44761 0.92292,0.67215 0.30764,0.22453 0.61529,0.44956 0.92293,0.67508 0.30764,0.22552 0.61528,0.45152 0.92292,0.67802 0.30764,0.22649 0.61528,0.45347 0.92292,0.68095 0.30764,0.22747 0.61528,0.45543 0.92292,0.68388 0.30765,0.22845 0.61529,0.45739 0.92293,0.68682 0.30764,0.22942 0.61528,0.45934 0.92292,0.68975 0.30764,0.2304 0.61528,0.4613 0.92292,0.69268 0.30764,0.23139 0.61529,0.46326 0.92293,0.69562 0.30764,0.23237 0.61528,0.46522 0.92292,0.69856 0.30764,0.23334 0.61528,0.46717 0.92292,0.70148 0.30764,0.23432 0.61528,0.46913 0.92293,0.70442 0.30764,0.2353 0.61528,0.47109 0.92292,0.70736 0.30764,0.23627 0.61528,0.47304 0.92292,0.71029 0.30764,0.23725 0.61528,0.47499 0.92292,0.71322 0.30764,0.23823 0.61529,0.47695 0.92293,0.71616 0.30764,0.2392 0.61528,0.4789 0.92292,0.71909 0.30764,0.24018 0.61528,0.48086 0.92292,0.72202 0.30764,0.24116 0.61528,0.48282 0.92293,0.72496 0.30764,0.24214 0.61528,0.48477 0.92292,0.72789 0.30764,0.24312 0.61528,0.48673 0.92292,0.73083 0.30764,0.24409 0.61528,0.48868 0.92292,0.73376 0.30765,0.24507 0.61529,0.49064 0.92293,0.73669 0.30764,0.24605 0.61528,0.4926 0.92292,0.73963 0.30764,0.24703 0.61528,0.49455 0.92292,0.74256 0.30764,0.24801 0.61529,0.49651 0.92293,0.74549 0.30764,0.24899 0.61528,0.49847 0.92292,0.74843 0.30764,0.24997 0.61528,0.50042 0.92292,0.75137 0.30764,0.25094 0.61528,0.50237 0.92292,0.75429 0.30765,0.25192 0.61529,0.50433 0.92293,0.75723 0.30764,0.2529 0.61528,0.50629 0.92292,0.76017 0.30764,0.25387 0.61528,0.50824 0.92292,0.7631 0.30764,0.25485 0.61529,0.51019 0.92293,0.76603 0.30764,0.25583 0.61528,0.51215 0.92292,0.76896 0.30764,0.25681 0.61528,0.51411 0.92292,0.7719 0.30764,0.25779 0.61528,0.51607 0.92293,0.77484 0.30764,0.25876 0.61528,0.51802 0.92292,0.77776 0.30764,0.25975 0.61528,0.51998 0.92292,0.78071 0.30764,0.26072 0.61528,0.52193 0.92292,0.78363 0.30765,0.2617 0.61529,0.52389 0.92293,0.78657 0.30764,0.26268 0.61528,0.52585 0.92292,0.7895 0.30764,0.26366 0.61528,0.52781 0.92292,0.79244 0.30764,0.26463 0.61528,0.52976 0.92293,0.79537 0.30764,0.26561 0.61528,0.53172 0.92292,0.79831 0.30764,0.26659 0.61528,0.53367 0.92292,0.80123 0.30764,0.26757 0.61528,0.53563 0.92292,0.80418 0.30765,0.26854 0.61529,0.53758 0.92293,0.8071 0.30764,0.26953 0.61528,0.53954 0.92292,0.81004 0.30764,0.2705 0.61528,0.5415 0.92292,0.81298 0.30764,0.27148 0.61529,0.54345 0.92293,0.8159 0.30764,0.27246 0.61528,0.54541 0.92292,0.81885 0.30764,0.27343 0.61528,0.54736 0.92292,0.82177 0.30764,0.27442 0.61528,0.54932 0.92293,0.82471 0.30764,0.27539 0.61528,0.55127 0.92292,0.82764 0.30764,0.27637 0.61528,0.55323 0.92292,0.83058 0.30764,0.27735 0.61528,0.55519 0.92292,0.83351 0.30764,0.27833 0.61529,0.55714 0.92293,0.83645 0.30764,0.2793 0.61528,0.55909 0.92292,0.83938 0.30764,0.28028 0.61528,0.56105 0.92292,0.84231 0.30764,0.28126 0.61528,0.56301 0.92293,0.84524 0.30764,0.28224 0.61528,0.56497 0.92292,0.84819 0.30764,0.28321 0.61528,0.56692 0.92292,0.85111 0.30764,0.28419 0.61528,0.56888 0.92292,0.85405 0.30765,0.28517 0.61529,0.57083 0.92293,0.85698 0.30764,0.28615 0.61528,0.57279 0.92292,0.85991 0.30764,0.28713 0.61528,0.57475 0.92292,0.86285 0.30764,0.28811 0.61529,0.57671 0.92293,0.86579 0.30764,0.28908 0.61528,0.57865 0.92292,0.86872 0.30764,0.29006 0.61528,0.58061 0.92292,0.87165 0.30764,0.29104 0.61528,0.58256 0.92292,0.87458 0.30765,0.29202 0.61529,0.58453 0.92293,0.87752 0.30764,0.293 0.61528,0.58648 0.92292,0.88045 0.30764,0.29398 0.61528,0.58844 0.92292,0.88339 0.30764,0.29495 0.61529,0.59039 0.92293,0.88632 0.30764,0.29593 0.61528,0.59235 0.92292,0.88926 0.30764,0.2969 0.61528,0.5943 0.92292,0.89218 0.30764,0.29789 0.61528,0.59626 0.92293,0.89513 0.30764,0.29886 0.61528,0.59821 0.92292,0.89805 0.30764,0.29984 0.61528,0.60017 0.92292,0.90099 0.30764,0.30082 0.61528,0.60213 0.92292,0.90393 0.30764,0.30179 0.61529,0.60408 0.92293,0.90685 0.30764,0.30278 0.61528,0.60604 0.92292,0.90979 0.30764,0.30376 0.61528,0.608 0.92292,0.91273 0.30764,0.30473 0.61528,0.60995 0.92293,0.91566 0.30764,0.30571 0.61528,0.61191 0.92292,0.91859 0.30764,0.30669 0.61528,0.61386 0.92292,0.92153 0.30764,0.30766 0.61528,0.61582 0.92292,0.92446 0.30765,0.30864 0.61529,0.61777 0.92293,0.92739 0.30764,0.30962 0.61528,0.61973 0.92292,0.93033 0.30764,0.3106 0.61528,0.62169 0.92292,0.93327 0.30764,0.31157 0.61529,0.62364 0.92293,0.93619 0.30764,0.31256 0.61528,0.6256 0.92292,0.93913 0.30764,0.31353 0.61528,0.62756 0.92292,0.94207 0.30764,0.31451 0.61528,0.62951 0.92292,0.94499 0.30765,0.31549 0.61529,0.63147 0.92293,0.94794 0.30764,0.31646 0.61528,0.63342 0.92292,0.95086 0.30764,0.31744 0.61528,0.63538 0.92292,0.9538 0.30764,0.31842 0.61529,0.63733 0.92293,0.95673 0.30764,0.3194 0.61528,0.63929 0.92292,0.95967 0.30764,0.32038 0.61528,0.64125 0.92292,0.9626 0.30764,0.32136 0.61528,0.6432 0.92293,0.96554 0.30764,0.32233 0.61528,0.64515 0.92292,0.96847 0.30764,0.32331 0.61528,0.64711 0.92292,0.9714 0.30764,0.32429 0.61528,0.64907 0.92292,0.97433 0.30765,0.32527 0.61529,0.65103 0.92293,0.97727 0.30764,0.32625 0.61528,0.65299 0.92292,0.98021 0.30764,0.32722 0.61528,0.65494 0.92292,0.98314 0.30764,0.3282 0.61528,0.65689 0.92293,0.98607 0.30764,0.32918 0.61528,0.65885 0.92292,0.98901 0.30764,0.33015 0.61528,0.6608 0.92292,0.99193 0.30764,0.33114 0.61528,0.66277 0.92292,0.99488 0.30765,0.33211 0.61529,0.66471 0.92293,0.99781 0.30764,0.33309 0.61528,0.66667 0.92292,1.00074 0.30764,0.33407 0.61528,0.66863 0.92292,1.00367 0.30764,0.33505 0.61529,0.67059 0.92293,1.00661 0.30764,0.33603 0.61528,0.67254 0.92292,1.00954 0.30764,0.33701 0.61528,0.6745 0.92292,1.01248 0.30764,0.33798 0.61528,0.67645 0.92293,1.01541 0.30764,0.33896 0.61528,0.67841 0.92292,1.01835 0.30764,0.33993 0.61528,0.68036 0.92292,1.02127 0.30764,0.34092 0.61528,0.68232 0.92292,1.02422 0.30764,0.34189 0.61529,0.68427 0.92293,1.02714 0.30764,0.34287 0.61528,0.68623 0.92292,1.03008 0.30764,0.34385 0.61528,0.68819 0.92292,1.03302 0.30764,0.34482 0.61528,0.69014 0.92293,1.03594 0.30764,0.34581 0.61528,0.6921 0.92292,1.03889 0.30764,0.34678 0.61528,0.69405 0.92292,1.04181 0.30764,0.34776 0.61528,0.69601 0.92292,1.04475 0.30765,0.34874 0.61529,0.69797 0.92293,1.04768 0.30764,0.34972 0.61528,0.69993 0.92292,1.05062 0.30764,0.35069 0.61528,0.70188 0.92292,1.05355 0.30764,0.35167 0.61529,0.70384 0.92293,1.05649 0.30764,0.35265 0.61528,0.70579 0.92292,1.05941 0.30764,0.35363 0.61528,0.70775 0.92292,1.06236 0.30764,0.3546 0.61528,0.7097 0.92292,1.06528 0.30765,0.35559 0.61529,0.71166 0.92293,1.06822 0.30764,0.35657 0.61528,0.71362 0.92292,1.07116 0.30764,0.35754 0.61528,0.71557 0.92292,1.07409 0.30764,0.35851 0.61529,0.71752 0.92293,1.07702 0.30764,0.35949 0.61528,0.71948 0.92292,1.07995 0.30764,0.36048 0.61528,0.72144 0.92292,1.08289 0.30764,0.36145 0.61528,0.7234 0.92293,1.08583 0.30764,0.36242 0.61528,0.72535 0.92292,1.08875 0.30764,0.36341 0.61528,0.72731 0.92292,1.09169 0.30764,0.36439 0.61528,0.72927 0.92292,1.09463 0.30764,0.36536 0.61529,0.73122 0.92293,1.09756 0.30764,0.36634 0.61528,0.73317 0.92292,1.10049 0.30764,0.36732 0.61528,0.73513 0.92292,1.10343 0.30764,0.36829 0.61528,0.73708 0.92293,1.10636 0.30764,0.36927 0.61528,0.73904 0.92292,1.10929 0.30764,0.37025 0.61528,0.741 0.92292,1.11223 0.30764,0.37123 0.61528,0.74295 0.92292,1.11516 0.30765,0.37221 0.61529,0.74491 0.92293,1.1181 0.30764,0.37318 0.61528,0.74686 0.92292,1.12103 0.30764,0.37416 0.61528,0.74882 0.92292,1.12396 0.30764,0.37514 0.61529,0.75078 0.92293,1.1269 0.30764,0.37612 0.61528,0.75273 0.92292,1.12983 0.30764,0.3771 0.61528,0.75469 0.92292,1.13276 0.30764,0.37808 0.61528,0.75665 0.92292,1.1357 0.30765,0.37906 0.61529,0.7586 0.92293,1.13864 0.30764,0.38003 0.61528,0.76055 0.92292,1.14156 0.30764,0.38101 0.61528,0.76252 0.92292,1.1445 0.30764,0.38199 0.61529,0.76447 0.92293,1.14744 0.30764,0.38297 0.61528,0.76642 0.92292,1.15037 0.30764,0.38394 0.61528,0.76838 0.92292,1.1533 0.30764,0.38492 0.61528,0.77033 0.92293,1.15624 0.30764,0.3859 0.61528,0.77229 0.92292,1.15917 0.30764,0.38687 0.61528,0.77424 0.92292,1.1621 0.30764,0.38786 0.61528,0.7762 0.92292,1.16504 0.30765,0.38883 0.61529,0.77816 0.92293,1.16797 0.30764,0.38981 0.61528,0.78011 0.92292,1.1709"
   style="fill:none;fill-opacity:1;fill-rule:nonzero;stroke:#000000;stroke-width:2.6500001;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;paint-order:stroke fill markers"
   inkscape:connector-curvature="0"
   transform="matrix(0.94654596,0,0,1.0005513,43.866865,-13.879016)" /></svg>
'''
'''--- slip-0039/test_wordlist.sh ---
#!/bin/bash

# wordlist is alphabetically sorted
diff wordlist.txt <(sort wordlist.txt) && echo OK

# no word is shorter than 4 letters
diff wordlist.txt <(grep '^....' wordlist.txt) && echo OK

# no word is longer than 8 letters
! grep -q '^.........' wordlist.txt && echo OK

# all words have unique 4-letter prefix
diff <(cut -c 1-4 wordlist.txt) <(cut -c 1-4 wordlist.txt | sort -u) && echo OK

# wordlist contains only common English words (+ the word "satoshi")
test "$(comm -23 wordlist.txt <(aspell -l en dump master | tr [A-Z] [a-z] | sort ))" = "satoshi" && echo OK

'''
'''--- slip-0039/wordlist.txt ---
academic
acid
acne
acquire
acrobat
activity
actress
adapt
adequate
adjust
admit
adorn
adult
advance
advocate
afraid
again
agency
agree
aide
aircraft
airline
airport
ajar
alarm
album
alcohol
alien
alive
alpha
already
alto
aluminum
always
amazing
ambition
amount
amuse
analysis
anatomy
ancestor
ancient
angel
angry
animal
answer
antenna
anxiety
apart
aquatic
arcade
arena
argue
armed
artist
artwork
aspect
auction
august
aunt
average
aviation
avoid
award
away
axis
axle
beam
beard
beaver
become
bedroom
behavior
being
believe
belong
benefit
best
beyond
bike
biology
birthday
bishop
black
blanket
blessing
blimp
blind
blue
body
bolt
boring
born
both
boundary
bracelet
branch
brave
breathe
briefing
broken
brother
browser
bucket
budget
building
bulb
bulge
bumpy
bundle
burden
burning
busy
buyer
cage
calcium
camera
campus
canyon
capacity
capital
capture
carbon
cards
careful
cargo
carpet
carve
category
cause
ceiling
center
ceramic
champion
change
charity
check
chemical
chest
chew
chubby
cinema
civil
class
clay
cleanup
client
climate
clinic
clock
clogs
closet
clothes
club
cluster
coal
coastal
coding
column
company
corner
costume
counter
course
cover
cowboy
cradle
craft
crazy
credit
cricket
criminal
crisis
critical
crowd
crucial
crunch
crush
crystal
cubic
cultural
curious
curly
custody
cylinder
daisy
damage
dance
darkness
database
daughter
deadline
deal
debris
debut
decent
decision
declare
decorate
decrease
deliver
demand
density
deny
depart
depend
depict
deploy
describe
desert
desire
desktop
destroy
detailed
detect
device
devote
diagnose
dictate
diet
dilemma
diminish
dining
diploma
disaster
discuss
disease
dish
dismiss
display
distance
dive
divorce
document
domain
domestic
dominant
dough
downtown
dragon
dramatic
dream
dress
drift
drink
drove
drug
dryer
duckling
duke
duration
dwarf
dynamic
early
earth
easel
easy
echo
eclipse
ecology
edge
editor
educate
either
elbow
elder
election
elegant
element
elephant
elevator
elite
else
email
emerald
emission
emperor
emphasis
employer
empty
ending
endless
endorse
enemy
energy
enforce
engage
enjoy
enlarge
entrance
envelope
envy
epidemic
episode
equation
equip
eraser
erode
escape
estate
estimate
evaluate
evening
evidence
evil
evoke
exact
example
exceed
exchange
exclude
excuse
execute
exercise
exhaust
exotic
expand
expect
explain
express
extend
extra
eyebrow
facility
fact
failure
faint
fake
false
family
famous
fancy
fangs
fantasy
fatal
fatigue
favorite
fawn
fiber
fiction
filter
finance
findings
finger
firefly
firm
fiscal
fishing
fitness
flame
flash
flavor
flea
flexible
flip
float
floral
fluff
focus
forbid
force
forecast
forget
formal
fortune
forward
founder
fraction
fragment
frequent
freshman
friar
fridge
friendly
frost
froth
frozen
fumes
funding
furl
fused
galaxy
game
garbage
garden
garlic
gasoline
gather
general
genius
genre
genuine
geology
gesture
glad
glance
glasses
glen
glimpse
goat
golden
graduate
grant
grasp
gravity
gray
greatest
grief
grill
grin
grocery
gross
group
grownup
grumpy
guard
guest
guilt
guitar
gums
hairy
hamster
hand
hanger
harvest
have
havoc
hawk
hazard
headset
health
hearing
heat
helpful
herald
herd
hesitate
hobo
holiday
holy
home
hormone
hospital
hour
huge
human
humidity
hunting
husband
hush
husky
hybrid
idea
identify
idle
image
impact
imply
improve
impulse
include
income
increase
index
indicate
industry
infant
inform
inherit
injury
inmate
insect
inside
install
intend
intimate
invasion
involve
iris
island
isolate
item
ivory
jacket
jerky
jewelry
join
judicial
juice
jump
junction
junior
junk
jury
justice
kernel
keyboard
kidney
kind
kitchen
knife
knit
laden
ladle
ladybug
lair
lamp
language
large
laser
laundry
lawsuit
leader
leaf
learn
leaves
lecture
legal
legend
legs
lend
length
level
liberty
library
license
lift
likely
lilac
lily
lips
liquid
listen
literary
living
lizard
loan
lobe
location
losing
loud
loyalty
luck
lunar
lunch
lungs
luxury
lying
lyrics
machine
magazine
maiden
mailman
main
makeup
making
mama
manager
mandate
mansion
manual
marathon
march
market
marvel
mason
material
math
maximum
mayor
meaning
medal
medical
member
memory
mental
merchant
merit
method
metric
midst
mild
military
mineral
minister
miracle
mixed
mixture
mobile
modern
modify
moisture
moment
morning
mortgage
mother
mountain
mouse
move
much
mule
multiple
muscle
museum
music
mustang
nail
national
necklace
negative
nervous
network
news
nuclear
numb
numerous
nylon
oasis
obesity
object
observe
obtain
ocean
often
olympic
omit
oral
orange
orbit
order
ordinary
organize
ounce
oven
overall
owner
paces
pacific
package
paid
painting
pajamas
pancake
pants
papa
paper
parcel
parking
party
patent
patrol
payment
payroll
peaceful
peanut
peasant
pecan
penalty
pencil
percent
perfect
permit
petition
phantom
pharmacy
photo
phrase
physics
pickup
picture
piece
pile
pink
pipeline
pistol
pitch
plains
plan
plastic
platform
playoff
pleasure
plot
plunge
practice
prayer
preach
predator
pregnant
premium
prepare
presence
prevent
priest
primary
priority
prisoner
privacy
prize
problem
process
profile
program
promise
prospect
provide
prune
public
pulse
pumps
punish
puny
pupal
purchase
purple
python
quantity
quarter
quick
quiet
race
racism
radar
railroad
rainbow
raisin
random
ranked
rapids
raspy
reaction
realize
rebound
rebuild
recall
receiver
recover
regret
regular
reject
relate
remember
remind
remove
render
repair
repeat
replace
require
rescue
research
resident
response
result
retailer
retreat
reunion
revenue
review
reward
rhyme
rhythm
rich
rival
river
robin
rocky
romantic
romp
roster
round
royal
ruin
ruler
rumor
sack
safari
salary
salon
salt
satisfy
satoshi
saver
says
scandal
scared
scatter
scene
scholar
science
scout
scramble
screw
script
scroll
seafood
season
secret
security
segment
senior
shadow
shaft
shame
shaped
sharp
shelter
sheriff
short
should
shrimp
sidewalk
silent
silver
similar
simple
single
sister
skin
skunk
slap
slavery
sled
slice
slim
slow
slush
smart
smear
smell
smirk
smith
smoking
smug
snake
snapshot
sniff
society
software
soldier
solution
soul
source
space
spark
speak
species
spelling
spend
spew
spider
spill
spine
spirit
spit
spray
sprinkle
square
squeeze
stadium
staff
standard
starting
station
stay
steady
step
stick
stilt
story
strategy
strike
style
subject
submit
sugar
suitable
sunlight
superior
surface
surprise
survive
sweater
swimming
swing
switch
symbolic
sympathy
syndrome
system
tackle
tactics
tadpole
talent
task
taste
taught
taxi
teacher
teammate
teaspoon
temple
tenant
tendency
tension
terminal
testify
texture
thank
that
theater
theory
therapy
thorn
threaten
thumb
thunder
ticket
tidy
timber
timely
ting
tofu
together
tolerate
total
toxic
tracks
traffic
training
transfer
trash
traveler
treat
trend
trial
tricycle
trip
triumph
trouble
true
trust
twice
twin
type
typical
ugly
ultimate
umbrella
uncover
undergo
unfair
unfold
unhappy
union
universe
unkind
unknown
unusual
unwrap
upgrade
upstairs
username
usher
usual
valid
valuable
vampire
vanish
various
vegan
velvet
venture
verdict
verify
very
veteran
vexed
victim
video
view
vintage
violence
viral
visitor
visual
vitamins
vocal
voice
volume
voter
voting
walnut
warmth
warn
watch
wavy
wealthy
weapon
webcam
welcome
welfare
western
width
wildlife
window
wine
wireless
wisdom
withdraw
wits
wolf
woman
work
worthy
wrap
wrist
writing
wrote
year
yelp
yield
yoga
zero

'''
'''--- slip-0044.md ---
# SLIP-0044 : Registered coin types for BIP-0044

```
Number:  SLIP-0044
Title:   Registered coin types for BIP-0044
Type:    Standard
Status:  Draft
Authors: Pavol Rusnak <stick@satoshilabs.com>
         Marek Palatinus <slush@satoshilabs.com>
Created: 2014-07-09
```

## Abstract

BIP-0044 defines a logical hierarchy for deterministic wallets.
Level 2 of the hierarchy describes a coin type in use.

## Motivation

BIP repository does not want to deal with assigning the values for various
coin types different than Bitcoin so we propose this SLIP to become such body.

## Registered coin types

These are the registered coin types for usage in level 2 of BIP44 described in chapter "Coin type".

All these constants are used as hardened derivation.

index | hexa       | symbol | coin
------|------------|--------|-----------------------------------
0     | 0x80000000 | BTC    | [Bitcoin](https://bitcoin.org/)
1     | 0x80000001 |        | Testnet (all coins)
2     | 0x80000002 | LTC    | [Litecoin](https://litecoin.org/)
3     | 0x80000003 | DOGE   | [Dogecoin](https://github.com/dogecoin/dogecoin)
4     | 0x80000004 | RDD    | Reddcoin
5     | 0x80000005 | DASH   | [Dash](https://github.com/dashpay/dash) (ex Darkcoin)
6     | 0x80000006 | PPC    | [Peercoin](https://peercoin.net/)
7     | 0x80000007 | NMC    | [Namecoin](http://namecoin.info/)
8     | 0x80000008 | FTC    | [Feathercoin](https://www.feathercoin.com/)
9     | 0x80000009 | XCP    | [Counterparty](http://counterparty.io/)
10    | 0x8000000a | BLK    | [Blackcoin](http://blackcoin.co/)
11    | 0x8000000b | NSR    | [NuShares](https://nubits.com/nushares/introduction)
12    | 0x8000000c | NBT    | NuBits
13    | 0x8000000d | MZC    | Mazacoin
14    | 0x8000000e | VIA    | Viacoin
15    | 0x8000000f | XCH    | ClearingHouse
16    | 0x80000010 | RBY    | Rubycoin
17    | 0x80000011 | GRS    | Groestlcoin
18    | 0x80000012 | DGC    | Digitalcoin
19    | 0x80000013 | CCN    | Cannacoin
20    | 0x80000014 | DGB    | DigiByte
21    | 0x80000015 |        | [Open Assets](https://github.com/OpenAssets/open-assets-protocol)
22    | 0x80000016 | MONA   | Monacoin
23    | 0x80000017 | CLAM   | Clams
24    | 0x80000018 | XPM    | Primecoin
25    | 0x80000019 | NEOS   | Neoscoin
26    | 0x8000001a | JBS    | Jumbucks
27    | 0x8000001b | ZRC    | ziftrCOIN
28    | 0x8000001c | VTC    | Vertcoin
29    | 0x8000001d | NXT    | NXT
30    | 0x8000001e | BURST  | Burst
31    | 0x8000001f | MUE    | MonetaryUnit
32    | 0x80000020 | ZOOM   | Zoom
33    | 0x80000021 | VASH   | [Virtual Cash](http://www.bitnet.cc/) Also known as VPNcoin
34    | 0x80000022 | CDN    | [Canada eCoin](https://github.com/Canada-eCoin/)
35    | 0x80000023 | SDC    | ShadowCash
36    | 0x80000024 | PKB    | [ParkByte](https://github.com/parkbyte/)
37    | 0x80000025 | PND    | Pandacoin
38    | 0x80000026 | START  | StartCOIN
39    | 0x80000027 | MOIN   | [MOIN](https://discovermoin.com)
40    | 0x80000028 | EXP    | [Expanse](http://www.expanse.tech/)
41    | 0x80000029 | EMC2   | [Einsteinium](https://www.emc2.foundation/)
42    | 0x8000002a | DCR    | [Decred](https://decred.org/)
43    | 0x8000002b | XEM    | [NEM](https://github.com/NemProject)
44    | 0x8000002c | PART   | [Particl](https://particl.io/)
45    | 0x8000002d | ARG    | [Argentum](http://www.argentum.io)
46    | 0x8000002e |        | [Libertas](https://github.com/dangershony/Libertas)
47    | 0x8000002f |        | [Posw coin](https://poswallet.com)
48    | 0x80000030 | SHR    | [Shreeji](https://github.com/SMJBIT/SHREEJI)
49    | 0x80000031 | GCR    | Global Currency Reserve (GCRcoin)
50    | 0x80000032 | NVC    | [Novacoin](https://github.com/novacoin-project/novacoin)
51    | 0x80000033 | AC     | [Asiacoin](https://github.com/AsiaCoin/AsiaCoinFix)
52    | 0x80000034 | BTCD   | [Bitcoindark](https://github.com/jl777/btcd)
53    | 0x80000035 | DOPE   | [Dopecoin](https://github.com/dopecoin-dev/DopeCoinV3)
54    | 0x80000036 | TPC    | [Templecoin](https://github.com/9cat/templecoin)
55    | 0x80000037 | AIB    | [AIB](https://github.com/iobond/aib)
56    | 0x80000038 | EDRC   | [EDRCoin](https://github.com/EDRCoin/EDRcoin-src)
57    | 0x80000039 | SYS    | [Syscoin](https://github.com/syscoin/syscoin2)
58    | 0x8000003a | SLR    | [Solarcoin](https://github.com/onsightit/solarcoin)
59    | 0x8000003b | SMLY   | [Smileycoin](https://github.com/tutor-web/smileyCoin)
60    | 0x8000003c | ETH    | [Ether](https://ethereum.org/ether)
61    | 0x8000003d | ETC    | [Ether Classic](https://ethereumclassic.github.io)
62    | 0x8000003e | PSB    | [Pesobit](https://github.com/pesobitph/pesobit-source)
63    | 0x8000003f | LDCN   | [Landcoin](http://landcoin.co/)
64    | 0x80000040 |        | [Open Chain](https://github.com/openchain/)
65    | 0x80000041 | XBC    | [Bitcoinplus](https://bitcoinplus.org)
66    | 0x80000042 | IOP    | [Internet of People](http://www.fermat.org)
67    | 0x80000043 | NXS    | [Nexus](http://www.nexusearth.com/)
68    | 0x80000044 | INSN   | [InsaneCoin](http://insanecoin.com)
69    | 0x80000045 | OK     | [OKCash](https://github.com/okcashpro/)
70    | 0x80000046 | BRIT   | [BritCoin](https://britcoin.com)
71    | 0x80000047 | CMP    | [Compcoin](https://compcoin.com)
72    | 0x80000048 | CRW    | [Crown](http://crown.tech/)
73    | 0x80000049 | BELA   | [BelaCoin](http://belacoin.org)
74    | 0x8000004a | ICX    | [ICON](https://icon.foundation/)
75    | 0x8000004b | FJC    | [FujiCoin](http://www.fujicoin.org/)
76    | 0x8000004c | MIX    | [MIX](https://www.mix-blockchain.org/)
77    | 0x8000004d | XVG    | [Verge](https://github.com/vergecurrency/verge/)
78    | 0x8000004e | EFL    | [Electronic Gulden](https://egulden.org/)
79    | 0x8000004f | CLUB   | [ClubCoin](https://clubcoin.co/)
80    | 0x80000050 | RICHX  | [RichCoin](https://richcoin.us/)
81    | 0x80000051 | POT    | [Potcoin](http://potcoin.com/)
82    | 0x80000052 | QRK    | Quarkcoin
83    | 0x80000053 | TRC    | [Terracoin](https://terracoin.io/)
84    | 0x80000054 | GRC    | Gridcoin
85    | 0x80000055 | AUR    | [Auroracoin](http://auroracoin.is/)
86    | 0x80000056 | IXC    | IXCoin
87    | 0x80000057 | NLG    | [Gulden](https://Gulden.com/)
88    | 0x80000058 | BITB   | [BitBean](http://bitbean.org/)
89    | 0x80000059 | BTA    | [Bata](http://bata.io/)
90    | 0x8000005a | XMY    | [Myriadcoin](http://myriadcoin.org)
91    | 0x8000005b | BSD    | [BitSend](http://bitsend.info)
92    | 0x8000005c | UNO    | [Unobtanium](http://http://unobtanium.uno/)
93    | 0x8000005d | MTR    | [MasterTrader](https://github.com/CrypticApplications/MTR-Update/)
94    | 0x8000005e | GB     | [GoldBlocks](https://github.com/goldblockscoin/goldblocks)
95    | 0x8000005f | SHM    | [Saham](https://github.com/SahamDev/SahamDev)
96    | 0x80000060 | CRX    | [Chronos](https://github.com/chronoscoin/Chronoscoin)
97    | 0x80000061 | BIQ    | [Ubiquoin](https://github.com/ubiquoin/ubiq)
98    | 0x80000062 | EVO    | [Evotion](https://github.com/evoshiun/Evotion)
99    | 0x80000063 | STO    | [SaveTheOcean](https://github.com/SaveTheOceanMovement/SaveTheOceanCoin)
100   | 0x80000064 | BIGUP  | [BigUp](https://github.com/BigUps/)
101   | 0x80000065 | GAME   | [GameCredits](https://github.com/gamecredits-project)
102   | 0x80000066 | DLC    | [Dollarcoins](https://github.com/dollarcoins/source)
103   | 0x80000067 | ZYD    | [Zayedcoin](https://github.com/ZayedCoin/Zayedcoin)
104   | 0x80000068 | DBIC   | [Dubaicoin](https://github.com/DubaiCoinDev/DubaiCoin)
105   | 0x80000069 | STRAT  | [Stratis](http://www.stratisplatform.com)
106   | 0x8000006a | SH     | [Shilling](https://github.com/yavwa/Shilling)
107   | 0x8000006b | MARS   | [MarsCoin](http://www.marscoin.org/)
108   | 0x8000006c | UBQ    | [Ubiq](https://github.com/Ubiq)
109   | 0x8000006d | PTC    | [Pesetacoin](http://pesetacoin.info/)
110   | 0x8000006e | NRO    | [Neurocoin](https://neurocoin.org)
111   | 0x8000006f | ARK    | [ARK](https://ark.io)
112   | 0x80000070 | USC    | [UltimateSecureCashMain](http://ultimatesecurecash.info)
113   | 0x80000071 | THC    | [Hempcoin](http://hempcoin.org)
114   | 0x80000072 | LINX   | [Linx](https://mylinx.io)
115   | 0x80000073 | ECN    | [Ecoin](https://www.ecoinsource.com)
116   | 0x80000074 | DNR    | [Denarius](https://denarius.io)
117   | 0x80000075 | PINK   | [Pinkcoin](http://getstarted.with.pink)
118   | 0x80000076 | ATOM   | [Atom](https://cosmos.network)
119   | 0x80000077 | PIVX   | [Pivx](https://github.com/PIVX-Project/PIVX)
120   | 0x80000078 | FLASH  | [Flashcoin](https://flashcoin.io)
121   | 0x80000079 | ZEN    | [Zencash](https://zensystem.io)
122   | 0x8000007a | PUT    | [Putincoin](https://putincoin.info)
123   | 0x8000007b | ZNY    | [BitZeny](https://bitzeny.tech/)
124   | 0x8000007c | UNIFY  | [Unify](http://unifycryptocurrency.com)
125   | 0x8000007d | XST    | [StealthCoin](http://www.stealthcoin.com)
126   | 0x8000007e | BRK    | [Breakout Coin](http://www.breakoutcoin.com)
127   | 0x8000007f | VC     | [Vcash](https://vcash.info)
128   | 0x80000080 | XMR    | [Monero](https://getmonero.org/)
129   | 0x80000081 | VOX    | [Voxels](https://www.voxelus.com)
130   | 0x80000082 | NAV    | [NavCoin](https://github.com/navcoindev/navcoin2)
131   | 0x80000083 | FCT    | [Factom Factoids](https://github.com/FactomProject/FactomDocs/blob/master/wallet_info/wallet_test_vectors.md)
132   | 0x80000084 | EC     | [Factom Entry Credits](https://github.com/FactomProject)
133   | 0x80000085 | ZEC    | [Zcash](https://z.cash)
134   | 0x80000086 | LSK    | [Lisk](https://lisk.io/)
135   | 0x80000087 | STEEM  | [Steem](http://steem.io)
136   | 0x80000088 | XZC    | [ZCoin](https://zcoin.io)
137   | 0x80000089 | RBTC   | [RSK](http://www.rsk.co/)
138   | 0x8000008a |        | [Giftblock](https://github.com/gyft/giftblock)
139   | 0x8000008b | RPT    | [RealPointCoin](https://github.com/MaxSmile/RealPointCoinQt)
140   | 0x8000008c | LBC    | [LBRY Credits](https://lbry.io/)
141   | 0x8000008d | KMD    | [Komodo](https://komodoplatform.com/)
142   | 0x8000008e | BSQ    | [bisq Token](http://bisq.io/)
143   | 0x8000008f | RIC    | [Riecoin](https://github.com/riecoin/riecoin)
144   | 0x80000090 | XRP    | [Ripple](https://ripple.com)
145   | 0x80000091 | BCH    | [Bitcoin Cash](https://www.bitcoincash.org)
146   | 0x80000092 | NEBL   | [Neblio](https://nebl.io)
147   | 0x80000093 | ZCL    | [ZClassic](http://zclassic.org/)
148   | 0x80000094 | XLM    | [Stellar Lumens](https://www.stellar.org/)
149   | 0x80000095 | NLC2   | [NoLimitCoin2](http://www.nolimitcoin.org)
150   | 0x80000096 | WHL    | [WhaleCoin](https://whalecoin.org/)
151   | 0x80000097 | ERC    | [EuropeCoin](https://www.europecoin.eu.org/)
152   | 0x80000098 | DMD    | [Diamond](http://bit.diamonds)
153   | 0x80000099 | BTM    | [Bytom](https://bytom.io)
154   | 0x8000009a | BIO    | [Biocoin](https://biocoin.bio)
155   | 0x8000009b | XWC    | [Whitecoin](https://www.whitecoin.info)
156   | 0x8000009c | BTG    | [Bitcoin Gold](http://www.btcgpu.org)
157   | 0x8000009d | BTC2X  | [Bitcoin 2x](https://medium.com/@DCGco/bitcoin-scaling-agreement-at-consensus-2017-133521fe9a77)
158   | 0x8000009e | SSN    | [SuperSkynet](http://wwww.superskynet.org/)
159   | 0x8000009f | TOA    | [TOACoin](http://www.toacoin.com)
160   | 0x800000a0 | BTX    | [Bitcore](https://bitcore.cc)
161   | 0x800000a1 | ACC    | [Adcoin](https://www.getadcoin.com/)
162   | 0x800000a2 | BCO    | [Bridgecoin](https://bridgecoin.org/)
163   | 0x800000a3 | ELLA   | [Ellaism](https://ellaism.org)
164   | 0x800000a4 | PIRL   | [Pirl](https://pirl.io)
165   | 0x800000a5 | XRB    | [RaiBlocks](https://raiblocks.com)
166   | 0x800000a6 | VIVO   | [Vivo](https://www.vivocrypto.com/)
167   | 0x800000a7 | FRST   | [Firstcoin](http://firstcoinproject.com)
168   | 0x800000a8 | HNC    | [Helleniccoin](http://www.helleniccoin.gr/)
169   | 0x800000a9 | BUZZ   | [BUZZ](http://www.buzzcoin.info/)
170   | 0x800000aa | MBRS   | [Ember](https://www.embercoin.io/)
171   | 0x800000ab | HSR    | [Hcash](https://h.cash)
172   | 0x800000ac | HTML   | [HTMLCOIN](https://htmlcoin.com/)
173   | 0x800000ad | ODN    | [Obsidian](https://obsidianplatform.com/)
174   | 0x800000ae | ONX    | [OnixCoin](https://www.onixcoin.com/)
175   | 0x800000af | RVN    | [Ravencoin](https://ravencoin.org/)
176   | 0x800000b0 | GBX    | [GoByte](https://gobyte.network)
177   | 0x800000b1 | BTCZ   | [BitcoinZ](https://btcz.rocks/en/)
178   | 0x800000b2 | POA    | [Poa](https://poa.network)
179   | 0x800000b3 | NYC    | [NewYorkCoin](http://nycoin.net)
180   | 0x800000b4 | MXT    | [MarteXcoin](http://martexcoin.org)
181   | 0x800000b5 | WC     | [Wincoin](https://wincoin.co)
182   | 0x800000b6 | MNX    | [Minexcoin](https://minexcoin.com)
183   | 0x800000b7 | BTCP   | [Bitcoin Private](https://btcprivate.org)
184   | 0x800000b8 | MUSIC  | [Musicoin](https://www.musicoin.org)
185   | 0x800000b9 | BCA    | [Bitcoin Atom](https://bitcoinatom.io)
186   | 0x800000ba | CRAVE  | [Crave](https://craveproject.net)
187   | 0x800000bb | STAK   | [STRAKS](https://straks.io)
188   | 0x800000bc | WBTC   | [World Bitcoin](http://www.wbtcteam.org/)
189   | 0x800000bd | LCH    | [LiteCash](http://www.litecash.info/)
190   | 0x800000be | EXCL   | [ExclusiveCoin](https://exclusivecoin.pw/)
191   | 0x800000bf |        | [Lynx](https://getlynx.io)
192   | 0x800000c0 | LCC    | [LitecoinCash](https://litecoinca.sh)
193   | 0x800000c1 | XFE    | [Feirm](https://www.feirm.com)
194   | 0x800000c2 | EOS    | [EOS](https://eos.io)
195   | 0x800000c3 | TRX    | [Tron](https://tron.network/enindex.html)
196   | 0x800000c4 | KOBO   | [Kobocoin](https://kobocoin.com)
197   | 0x800000c5 | HUSH   | [HUSH](https://myhush.org)
198   | 0x800000c6 | BANANO | [Bananos](https://banano.co.in)
199   | 0x800000c7 | ETF    | [ETF](http://ethereumfog.org)
200   | 0x800000c8 | OMNI   | [Omni](http://www.omnilayer.org)
201   | 0x800000c9 | BIFI   | [BitcoinFile](https://www.bitcoinfile.org)
202   | 0x800000ca | UFO    | [Uniform Fiscal Object](https://ufobject.com)
203   | 0x800000cb | CNMC   | [Cryptonodes](https://www.cryptonodes.ch)
204   | 0x800000cc | BCN    | [Bytecoin](http://bytecoin.org)
205   | 0x800000cd | RIN    | [Ringo](http://dkwzjw.github.io/ringo/)
206   | 0x800000ce | ATP    | [PlatON](https://www.platon.network)
207   | 0x800000cf | EVT    | [everiToken](https://everiToken.io)
208   | 0x800000d0 | ATN    | [ATN](https://atn.io)
209   | 0x800000d1 | BIS    | [Bismuth](http://www.bismuth.cz)
210   | 0x800000d2 | NEET   | [NEETCOIN](https://neetcoin.jp/)
211   | 0x800000d3 | BOPO   | [BopoChain](http://www.bopochain.org/)
212   | 0x800000d4 | OOT    | [Utrum](https://utrum.io/ootcoin/)
213   | 0x800000d5 | XSPEC  | [Spectrecoin](https://spectreproject.io/)
214   | 0x800000d5 | MONK   | [Monkey Project](https://www.monkey.vision)
215   | 0x800000d7 | BOXY   | [BoxyCoin](http://www.boxycoin.org/)
216   | 0x800000d8 | FLO    | [Flo](https://www.flo.cash/)
217   | 0x800000d9 | MEC    | [Megacoin](https://www.megacoin.eu)
218   | 0x800000da | BTDX   | [BitCloud](https://bit-cloud.info)
219   | 0x800000db | XAX    | [Artax](https://www.artaxcoin.org/)
220   | 0x800000dc | ANON   | [ANON](https://www.anonfork.io/)
221   | 0x800000dd | LTZ    | [LitecoinZ](https://litecoinz.org/)
222   | 0x800000de | BITG   | [Bitcoin Green](https://savebitcoin.io)
223   | 0x800000df | ASK    | [AskCoin](https://askcoin.org)
224   | 0x800000e0 | SMART  | [Smartcash](https://smartcash.cc)
225   | 0x800000e1 | XUEZ   | [XUEZ](https://xuezcoin.com)
226   | 0x800000e2 | HLM    | [Helium](https://www.heliumlabs.org/)
227   | 0x800000e3 | WEB    | [Webchain](https://webchain.network/)
228   | 0x800000e4 | ACM    | [Actinium](https://actinium.org)
229   | 0x800000e5 | NOS    | [NOS Stable Coins](https://nos.cash)
230   | 0x800000e6 | BITC   | [BitCash](https://www.choosebitcash.com)
231   | 0x800000e7 | HTH    | [Help The Homeless Coin](https://hthcoin.world)
232   | 0x800000e8 | TZC    | [Trezarcoin](https://trezarcoin.com)
233   | 0x800000e9 | VAR    | [Varda](https://varda.io)
234   | 0x800000ea | IOV    | [IOV](https://www.iov.one)
235   | 0x800000eb | FIO    | [FIO](https://fio.foundation)
236   | 0x800000ec | BSV    | [BitcoinSV](https://bitcoinsv.io)
237   | 0x800000ed | DXN    | [DEXON](https://dexon.org/)
238   | 0x800000ee | QRL    | [Quantum Resistant Ledger](https://www.theqrl.org/)
239   | 0x800000ef | PCX    | [ChainX](https://github.com/chainx-org/ChainX)
240   | 0x800000f0 | LOKI   | [Loki](https://github.com/loki-project/loki)
241   | 0x800000f1 |        | [Imagewallet](https://imagewallet.io)
242   | 0x800000f2 | NIM    | [Nimiq](https://nimiq.com/)
243   | 0x800000f3 | SOV    | [Sovereign Coin](http://www.sovcore.org/)
244   | 0x800000f4 | JCT    | [Jibital Coin](https://jibital.ir/)
245   | 0x800000f5 | SLP    | [Simple Ledger Protocol](https://simpleledger.cash)
246   | 0x800000f6 | EWT    | [Energy Web](https://energyweb.org)
247   | 0x800000f7 | UC     | [Ulord](http://ulord.one)
248   | 0x800000f8 | EXOS   | [EXOS](https://economy.openexo.com)
249   | 0x800000f9 | ECA    | [Electra](https://www.electraproject.org)
250   | 0x800000fa | SOOM   | [Soom](http://www.fourthblockchain.org/)
251   | 0x800000fb | XRD    | [Redstone](https://www.redstoneplatform.com/)
252   | 0x800000fc | FREE   | [FreeCoin](https://web.freepay.biz)
253   | 0x800000fd | NPW    | [NewPowerCoin](https://npw.live)
254   | 0x800000fe | BST    | [BlockStamp](https://blockstamp.info)
255   | 0x800000ff |        | [SmartHoldem](https://smartholdem.io)
256   | 0x80000100 | NANO   | [Bitcoin Nano](https://www.btcnano.org)
257   | 0x80000101 | BTCC   | [Bitcoin Core](https://thebitcoincore.org)
258   | 0x80000102 |        | [Zen Protocol](https://www.zenprotocol.com/)
259   | 0x80000103 | ZEST   | [Zest](https://www.zestcoin.io)
260   | 0x80000104 | ABT    | [ArcBlock](https://arcblock.io)
261   | 0x80000105 | PION   | [Pion](https://pioncoin.org/)
262   | 0x80000106 | DT3    | [DreamTeam3](https://crypto-dreamteam.com)
263   | 0x80000107 | ZBUX   | [Zbux](https://z-bux.org)
264   | 0x80000108 | KPL    | [Kepler](https://kepler.cash)
265   | 0x80000109 | TPAY   | [TokenPay](https://tokenpay.com)
266   | 0x8000010a | ZILLA  | [ChainZilla](https://www.chainzilla.io)
267   | 0x8000010b | ANK    | [Anker](https://ankerid.com)
268   | 0x8000010c | BCC    | [BCChain](https://github.com/bc-chain/BCC)
269   | 0x8000010d | HPB    | [HPB](https://hpb.io)
270   | 0x8000010e | ONE    | [ONE](http://www.onechain.one/)
271   | 0x8000010f | SBC    | [SBC](http://www.smartbitcoin.one)
272   | 0x80000110 | IPC    | [IPChain](https://www.ipcchain.org)
273   | 0x80000111 | DMTC   | [Dominantchain](https://dominantchain.com/)
274   | 0x80000112 | OGC    | [Onegram](https://onegram.org/)
275   | 0x80000113 | SHIT   | [Shitcoin](https://shitcoin.org)
276   | 0x80000114 | ANDES  | [Andescoin](https://andes-coin.com)
277   | 0x80000115 | AREPA  | [Arepacoin](https://arepacoinve.info)
278   | 0x80000116 | BOLI   | [Bolivarcoin](https://bolis.info)
279   | 0x80000117 | RIL    | [Rilcoin](https://www.rilcoincrypto.org)
280   | 0x80000118 | HTR    | [Hathor Network](https://hathor.network/)
281   | 0x80000119 | FCTID  | [Factom ID](https://github.com/FactomProject)
282   | 0x8000011a | BRAVO  | [BRAVO](https://bravocoin.com/)
283   | 0x8000011b | ALGO   | [Algorand](https://www.algorand.com/)
284   | 0x8000011c | BZX    | [Bitcoinzero](https://bitcoinzerox.net)
285   | 0x8000011d | GXX    | [GravityCoin](https://www.gravitycoin.io/)
286   | 0x8000011e | HEAT   | [HEAT](https://heatledger.com/)
287   | 0x8000011f | XDN    | [DigitalNote](https://digitalnote.biz)
288   | 0x80000120 | FSN    | [FUSION](https://www.fusion.org/)
289   | 0x80000121 | CPC    | [Capricoin](https://capricoin.org)
290   | 0x80000122 | BOLD   | [Bold](https://boldprivate.network)
291   | 0x80000123 | IOST   | [IOST](https://iost.io/)
292   | 0x80000124 | TKEY   | [Tkeycoin](https://tkeycoin.com)
293   | 0x80000125 | USE    | [Usechain](https://usechain.net)
294   | 0x80000126 | BCZ    | [BitcoinCZ](https://www.bitcoincz.org/)
295   | 0x80000127 | IOC    | [Iocoin](https://iocoin.io)
296   | 0x80000128 | ASF    | [Asofe](https://github.com/TheLightSide/asofe)
297   | 0x80000129 | MASS   | [MASS](https://www.massnet.org)
298   | 0x8000012a | FAIR   | [FairCoin](https://faircoin.world/)
299   | 0x8000012b | NUKO   | [Nekonium](https://nekonium.github.io/)
300   | 0x8000012c | GNX    | [Genaro Network](https://genaro.network/)
301   | 0x8000012d | DIVI   | [Divi Project](https://diviproject.org)
302   | 0x8000012e | CMT    | [Community](https://thecriptocommunity.com)
303   | 0x8000012f | EUNO   | [EUNO](https://euno.co/)
304   | 0x80000130 | IOTX   | [IoTeX](https://iotex.io/)
305   | 0x80000131 | ONION  | [DeepOnion](https://deeponion.org)
306   | 0x80000132 | 8BIT   | [8Bit](https://8bit.cash)
307   | 0x80000133 | ATC    | [AToken Coin](https://www.atoken.com/)
308   | 0x80000134 | BTS    | [Bitshares](https://bitshares.org/)
309   | 0x80000135 | CKB    | [Nervos CKB](https://www.nervos.org)
310   | 0x80000136 | UGAS   | [Ultrain](https://www.ultrain.io/)
311   | 0x80000137 | ADS    | [Adshares](https://adshares.net/)
312   | 0x80000138 | ARA    | [Aura](https://auraledger.com/)
313   | 0x80000139 | ZIL    | [Zilliqa](https://zilliqa.com/)
314   | 0x8000013a | MOAC   | [MOAC](https://moac.io/)
315   | 0x8000013b | SWTC   | [SWTC](http://swtc.top/)
316   | 0x8000013c | VNSC   | [vnscoin](http://www.vnscoin.org/)
317   | 0x8000013d | PLUG   | [Pl^g](https://www.poweredbyplug.com/)
318   | 0x8000013e | MAN    | [Matrix AI Network](https://www.matrix.io/)
319   | 0x8000013f | ECC    | [ECCoin](https://ecc.network)
320   | 0x80000140 | RPD    | [Rapids](https://www.rapidsnetwork.io/)
321   | 0x80000141 | RAP    | [Rapture](https://our-rapture.com/)
322   | 0x80000142 | GARD   | [Hashgard](https://www.hashgard.io/)
323   | 0x80000143 | ZER    | [Zero](https://www.zerocurrency.io/)
324   | 0x80000144 | EBST   | [eBoost](https://eboost.fun/)
325   | 0x80000145 | SHARD  | [Shard](https://shardcoin.io/)
326   | 0x80000146 | LINDA  | [Linda Coin](https://lindacoin.com/)
327   | 0x80000147 | CMM    | [Commercium](https://www.commercium.net/)
328   | 0x80000148 | BLOCK  | [Blocknet](https://blocknet.co/)
329   | 0x80000149 | AUDAX  | [AUDAX](https://www.audaxproject.io)
330   | 0x8000014a | LUNA   | [Terra](https://terra.money)
331   | 0x8000014b | ZPM    | [zPrime](https://github.com/zprimecoin/zprime)
332   | 0x8000014c | KUVA   | [Kuva Utility Note](https://www.kuvacash.com)
333   | 0x8000014d | MEM    | [MemCoin](https://memcoin.org)
334   | 0x8000014e | CS     | [Credits](https://credits.com)
335   | 0x8000014f | SWIFT  | [SwiftCash](https://swiftcash.cc)
336   | 0x80000150 | FIX    | [FIX](https://fix.network)
337   | 0x80000151 | CPC    | [CPChain](https://cpchain.io)
338   | 0x80000152 | VGO    | [VirtualGoodsToken](http://vgo.life)
339   | 0x80000153 | DVT    | [DeVault](https://devault.cc)
340   | 0x80000154 | N8V    | [N8VCoin](https://n8vcoin.io)
341   | 0x80000155 | MTNS   | [OmotenashiCoin](http://omotenashicoin.site/)
342   | 0x80000156 | BLAST  | [BLAST](https://blastblastblast.com/)
343   | 0x80000157 | DCT    | [DECENT](https://decent.ch)
344   | 0x80000158 | AUX    | [Auxilium](https://auxilium.global)
345   | 0x80000159 | USDP   | [USDP](http://www.usdp.pro/)
346   | 0x8000015a | HTDF   | [HTDF](https://www.orientwalt.com/)
347   | 0x8000015b | YEC    | [Ycash](https://www.ycash.xyz/)
348   | 0x8000015c | QLC    | [QLC Chain](https://qlcchain.org)
349   | 0x8000015d | TEA    | [Icetea Blockchain](https://icetea.io/)
350   | 0x8000015e | ARW    | [ArrowChain](https://www.arrowchain.io/)
351   | 0x8000015f | MDM    | [Medium](https://www.themedium.io/)
352   | 0x80000160 | CYB    | [Cybex](https://dex.cybex.io/)
353   | 0x80000161 | LTO    | [LTO Network](https://lto.network)
354   | 0x80000162 | DOT    | [Polkadot](https://polkadot.network/)
355   | 0x80000163 | AEON   | [Aeon](https://www.aeon.cash/)
356   | 0x80000164 | RES    | [Resistance](https://www.resistance.io)
357   | 0x80000165 | AYA    | [Aryacoin](https://aryacoin.io/)
358   | 0x80000166 | DAPS   | [Dapscoin](https://officialdapscoin.com)
359   | 0x80000167 | CSC    | [CasinoCoin](https://casinocoin.org)
360   | 0x80000168 | VSYS   | [V Systems](https://www.v.systems/)
361   | 0x80000169 | NOLLAR | [Nollar](https://nollar.org)
362   | 0x8000016a | XNOS   | [NOS](https://nos.cash)
363   | 0x8000016b | CPU    | [CPUchain](https://cpuchain.org)
364   | 0x8000016c | LAMB   | [Lambda Storage Chain](https://lambda.im)
365   | 0x8000016d | VCT    | [ValueCyber](https://valuecyber.org)
366   | 0x8000016e | CZR    | [Canonchain](http://www.canonchain.com/)
367   | 0x8000016f | ABBC   | [ABBC](https://www.abbcfoundation.com/)
368   | 0x80000170 | HET    | [HET](http://www.hetcoin.info/)
369   | 0x80000171 | XAS    | [Asch](https://asch.io)
370   | 0x80000172 | VDL    | [Vidulum](https://vidulum.app)
371   | 0x80000173 | MED    | [MediBloc](https://medibloc.org)
372   | 0x80000174 | ZVC    | [ZVChain](https://www.zvchain.io)
373   | 0x80000175 | VESTX  | [Vestx](https://www.vestxcoin.com)
374   | 0x80000176 | DBT    | [DarkBit](https://www.DarkBitPay.com)
375   | 0x80000177 | SEOS   | [SuperEOS](https://github.com/supereos)
376   | 0x80000178 | MXW    | [Maxonrow](https://mxw.one/)
377   | 0x80000179 | ZNZ    | [ZENZO](https://zenzo.io/)
378   | 0x8000017a | XCX    | [XChain](https://github.com/xchainxchain)
379   | 0x8000017b | SOX    | [SonicX](https://sonicx.org/)
380   | 0x8000017c | NYZO   | [Nyzo](https://nyzo.co/)
381   | 0x8000017d | ULC    | [ULCoin](http://www.ulwallet.io)
382   | 0x8000017e |        |
383   | 0x8000017f |        |
384   | 0x80000180 | XSN    | [Stakenet](https://xsncoin.io/)
385   | 0x80000181 |        |
386   | 0x80000182 |        |
387   | 0x80000183 |        |
388   | 0x80000184 |        |
389   | 0x80000185 |        |
390   | 0x80000186 |        |
391   | 0x80000187 |        |
392   | 0x80000188 | CENNZ  | [CENNZnet](https://centrality.ai)
393   | 0x80000189 |        |
394   | 0x8000018a |        |
395   | 0x8000018b |        |
396   | 0x8000018c |        |
397   | 0x8000018d |        |
398   | 0x8000018e | XPC    | [XPChain](https://www.xpchain.io/)
399   | 0x8000018f |        |
400   | 0x80000190 | NIX    | [NIX](https://nixplatform.io)
401   | 0x80000191 |        |
402   | 0x80000192 |        |
403   | 0x80000193 |        |
404   | 0x80000194 | XBI    | [XBI](https://bitcoinincognito.org)
405   | 0x80000195 |        |
406   | 0x80000196 |        |
407   | 0x80000197 |        |
408   | 0x80000198 |        |
409   | 0x80000199 |        |
410   | 0x8000019a |        |
411   | 0x8000019b |        |
412   | 0x8000019c | AIN    | [AIN](https://www.ainetwork.ai)
413   | 0x8000019d |        |
414   | 0x8000019e |        |
415   | 0x8000019f |        |
416   | 0x800001a0 | SLX    | [SLX](https://slate.io/)
417   | 0x800001a1 |        |
418   | 0x800001a2 |        |
419   | 0x800001a3 |        |
420   | 0x800001a4 | NODE   | [NodeHost](https://nodehost.online)
421   | 0x800001a5 |        |
422   | 0x800001a6 |        |
423   | 0x800001a7 |        |
424   | 0x800001a8 |        |
425   | 0x800001a9 | AION   | [Aion](https://aion.network)
426   | 0x800001aa | BC     | [Bitcoin Confidential](https://www.bitcoinconfidential.cc/)
427   | 0x800001ab |        |
428   | 0x800001ac |        |
429   | 0x800001ad |        |
430   | 0x800001ae |        |
431   | 0x800001af |        |
432   | 0x800001b0 |        |
433   | 0x800001b1 |        |
434   | 0x800001b2 |        |
435   | 0x800001b3 |        |
436   | 0x800001b4 |        |
437   | 0x800001b5 |        |
438   | 0x800001b6 |        |
439   | 0x800001b7 |        |
440   | 0x800001b8 |        |
441   | 0x800001b9 |        |
442   | 0x800001ba |        |
443   | 0x800001bb |        |
444   | 0x800001bc | PHR    | [Phore](https://phore.io)
445   | 0x800001bd |        |
446   | 0x800001be |        |
447   | 0x800001bf | DIN    | [Dinero](https://dinerocoin.org/)
448   | 0x800001c0 |        |
449   | 0x800001c1 |        |
450   | 0x800001c2 |        |
451   | 0x800001c3 |        |
452   | 0x800001c4 |        |
453   | 0x800001c5 |        |
454   | 0x800001c6 |        |
455   | 0x800001c7 |        |
456   | 0x800001c8 |        |
457   | 0x800001c9 | AE     | [æternity](https://aeternity.com)
458   | 0x800001ca |        |
459   | 0x800001cb |        |
460   | 0x800001cc |        |
461   | 0x800001cd |        |
462   | 0x800001ce |        |
463   | 0x800001cf |        |
464   | 0x800001d0 | ETI    | [EtherInc](https://einc.io)
465   | 0x800001d1 |        |
466   | 0x800001d2 |        |
467   | 0x800001d3 |        |
468   | 0x800001d4 |        |
469   | 0x800001d5 |        |
470   | 0x800001d6 |        |
471   | 0x800001d7 |        |
472   | 0x800001d8 |        |
473   | 0x800001d9 |        |
474   | 0x800001da |        |
475   | 0x800001db |        |
476   | 0x800001dc |        |
477   | 0x800001dd |        |
478   | 0x800001de |        |
479   | 0x800001df |        |
480   | 0x800001e0 |        |
481   | 0x800001e1 |        |
482   | 0x800001e2 |        |
483   | 0x800001e3 |        |
484   | 0x800001e4 |        |
485   | 0x800001e5 |        |
486   | 0x800001e6 |        |
487   | 0x800001e7 |        |
488   | 0x800001e8 | VEO    | [Amoveo](https://github.com/zack-bitcoin/amoveo/)
489   | 0x800001e9 |        |
490   | 0x800001ea |        |
491   | 0x800001eb |        |
492   | 0x800001ec |        |
493   | 0x800001ed |        |
494   | 0x800001ee |        |
495   | 0x800001ef |        |
496   | 0x800001f0 |        |
497   | 0x800001f1 |        |
498   | 0x800001f2 |        |
499   | 0x800001f3 |        |
500   | 0x800001f4 | THETA  | [Theta](https://www.thetatoken.org/)
501   | 0x800001f5 |        |
502   | 0x800001f6 |        |
503   | 0x800001f7 |        |
504   | 0x800001f8 |        |
505   | 0x800001f9 |        |
506   | 0x800001fa |        |
507   | 0x800001fb |        |
508   | 0x800001fc |        |
509   | 0x800001fd |        |
510   | 0x800001fe | KOTO   | [Koto](https://ko-to.org/)
511   | 0x800001ff |        |
512   | 0x80000200 | XRD    | [Radiant](https://radiant.cash/)
513   | 0x80000201 |        |
514   | 0x80000202 |        |
515   | 0x80000203 |        |
516   | 0x80000204 | VEE    | [Virtual Economy Era](https://www.vee.tech/)
517   | 0x80000205 |        |
518   | 0x80000206 | LET    | [Linkeye](https://www.linkeye.com/)
519   | 0x80000207 |        |
520   | 0x80000208 | BTCV   | [BitcoinVIP](https://www.bitvip.org/)
521   | 0x80000209 |        |
522   | 0x8000020a |        |
523   | 0x8000020b |        |
524   | 0x8000020c |        |
525   | 0x8000020d |        |
526   | 0x8000020e | BU     | [BUMO](https://www.bumo.io/)
527   | 0x8000020f |        |
528   | 0x80000210 | YAP    | [Yapstone](https://yapstone.pro/)
529   | 0x80000211 |        |
530   | 0x80000212 |        |
531   | 0x80000213 |        |
532   | 0x80000214 |        |
533   | 0x80000215 | PRJ    | [ProjectCoin](https://projectcoin.net/)
534   | 0x80000216 |        |
535   | 0x80000217 |        |
536   | 0x80000218 |        |
537   | 0x80000219 |        |
538   | 0x8000021a |        |
539   | 0x8000021b |        |
540   | 0x8000021c |        |
541   | 0x8000021d |        |
542   | 0x8000021e |        |
543   | 0x8000021f |        |
544   | 0x80000220 |        |
545   | 0x80000221 |        |
546   | 0x80000222 |        |
547   | 0x80000223 |        |
548   | 0x80000224 |        |
549   | 0x80000225 |        |
550   | 0x80000226 |        |
551   | 0x80000227 |        |
552   | 0x80000228 |        |
553   | 0x80000229 |        |
554   | 0x8000022a |        |
555   | 0x8000022b | BCS    | [Bitcoin Smart](http://bcs.info)
556   | 0x8000022c |        |
557   | 0x8000022d | LKR    | [Lkrcoin](https://lkrcoin.io/)
558   | 0x8000022e |        |
559   | 0x8000022f |        |
560   | 0x80000230 |        |
561   | 0x80000231 | NTY    | [Nexty](https://nexty.io/)
562   | 0x80000232 |        |
563   | 0x80000233 |        |
564   | 0x80000234 |        |
565   | 0x80000235 |        |
566   | 0x80000236 |        |
567   | 0x80000237 |        |
568   | 0x80000238 |        |
569   | 0x80000239 |        |
570   | 0x8000023a |        |
571   | 0x8000023b |        |
572   | 0x8000023c |        |
573   | 0x8000023d |        |
574   | 0x8000023e |        |
575   | 0x8000023f |        |
576   | 0x80000240 |        |
577   | 0x80000241 |        |
578   | 0x80000242 |        |
579   | 0x80000243 |        |
580   | 0x80000244 |        |
581   | 0x80000245 |        |
582   | 0x80000246 |        |
583   | 0x80000247 |        |
584   | 0x80000248 |        |
585   | 0x80000249 |        |
586   | 0x8000024a |        |
587   | 0x8000024b |        |
588   | 0x8000024c |        |
589   | 0x8000024d |        |
590   | 0x8000024e |        |
591   | 0x8000024f |        |
592   | 0x80000250 |        |
593   | 0x80000251 |        |
594   | 0x80000252 |        |
595   | 0x80000253 |        |
596   | 0x80000254 |        |
597   | 0x80000255 |        |
598   | 0x80000256 |        |
599   | 0x80000257 |        |
600   | 0x80000258 | UTE    | [Unit-e](https://dtr.org/unit-e/)
601   | 0x80000259 |        |
602   | 0x8000025a |        |
603   | 0x8000025b |        |
604   | 0x8000025c |        |
605   | 0x8000025d |        |
606   | 0x8000025e |        |
607   | 0x8000025f |        |
608   | 0x80000260 |        |
609   | 0x80000261 |        |
610   | 0x80000262 |        |
611   | 0x80000263 |        |
612   | 0x80000264 |        |
613   | 0x80000265 |        |
614   | 0x80000266 |        |
615   | 0x80000267 |        |
616   | 0x80000268 |        |
617   | 0x80000269 |        |
618   | 0x8000026a | SSP    | [SmartShare](http://www.smartshare.vip/)
619   | 0x8000026b |        |
620   | 0x8000026c |        |
621   | 0x8000026d |        |
622   | 0x8000026e |        |
623   | 0x8000026f |        |
624   | 0x80000270 |        |
625   | 0x80000271 | EAST   | [Eastcoin](http://easthub.io/)
626   | 0x80000272 |        |
627   | 0x80000273 |        |
628   | 0x80000274 |        |
629   | 0x80000275 |        |
630   | 0x80000276 |        |
631   | 0x80000277 |        |
632   | 0x80000278 |        |
633   | 0x80000279 |        |
634   | 0x8000027a |        |
635   | 0x8000027b |        |
636   | 0x8000027c |        |
637   | 0x8000027d |        |
638   | 0x8000027e |        |
639   | 0x8000027f |        |
640   | 0x80000280 |        |
641   | 0x80000281 |        |
642   | 0x80000282 |        |
643   | 0x80000283 |        |
644   | 0x80000284 |        |
645   | 0x80000285 |        |
646   | 0x80000286 |        |
647   | 0x80000287 |        |
648   | 0x80000288 |        |
649   | 0x80000289 |        |
650   | 0x8000028a |        |
651   | 0x8000028b |        |
652   | 0x8000028c |        |
653   | 0x8000028d |        |
654   | 0x8000028e |        |
655   | 0x8000028f |        |
656   | 0x80000290 |        |
657   | 0x80000291 |        |
658   | 0x80000292 |        |
659   | 0x80000293 |        |
660   | 0x80000294 |        |
661   | 0x80000295 |        |
662   | 0x80000296 |        |
663   | 0x80000297 | SFRX   | [EtherGem Sapphire](https://egem.io)
664   | 0x80000298 |        |
665   | 0x80000299 |        |
666   | 0x8000029a | ACT    | [Achain](https://www.achain.com/)
667   | 0x8000029b | PRKL   | [Perkle](https://esprezzo.io/)
668   | 0x8000029c | SSC    | [SelfSell](https://www.selfsell.com/)
669   | 0x8000029d |        |
670   | 0x8000029e |        |
671   | 0x8000029f |        |
672   | 0x800002a0 |        |
673   | 0x800002a1 |        |
674   | 0x800002a2 |        |
675   | 0x800002a3 |        |
676   | 0x800002a4 |        |
677   | 0x800002a5 |        |
678   | 0x800002a6 |        |
679   | 0x800002a7 |        |
680   | 0x800002a8 |        |
681   | 0x800002a9 |        |
682   | 0x800002aa |        |
683   | 0x800002ab |        |
684   | 0x800002ac |        |
685   | 0x800002ad |        |
686   | 0x800002ae |        |
687   | 0x800002af |        |
688   | 0x800002b0 |        |
689   | 0x800002b1 |        |
690   | 0x800002b2 |        |
691   | 0x800002b3 |        |
692   | 0x800002b4 |        |
693   | 0x800002b5 |        |
694   | 0x800002b6 |        |
695   | 0x800002b7 |        |
696   | 0x800002b8 |        |
697   | 0x800002b9 |        |
698   | 0x800002ba | VEIL   | [Veil](https://www.veil-project.com)
699   | 0x800002bb |        |
700   | 0x800002bc | XDAI   | [xDai](https://blockscout.com/poa/dai)
701   | 0x800002bd |        |
702   | 0x800002be |        |
703   | 0x800002bf |        |
704   | 0x800002c0 |        |
705   | 0x800002c1 |        |
706   | 0x800002c2 |        |
707   | 0x800002c3 |        |
708   | 0x800002c4 |        |
709   | 0x800002c5 |        |
710   | 0x800002c6 |        |
711   | 0x800002c7 |        |
712   | 0x800002c8 |        |
713   | 0x800002c9 | XTL    | [Katal](https://katal.io)
714   | 0x800002ca | BNB    | [Binance](https://www.binance.org)
715   | 0x800002cb |        |
716   | 0x800002cc |        |
717   | 0x800002cd |        |
718   | 0x800002ce |        |
719   | 0x800002cf |        |
720   | 0x800002d0 |        |
721   | 0x800002d1 |        |
722   | 0x800002d2 |        |
723   | 0x800002d3 |        |
724   | 0x800002d4 |        |
725   | 0x800002d5 |        |
726   | 0x800002d6 |        |
727   | 0x800002d7 |        |
728   | 0x800002d8 |        |
729   | 0x800002d9 |        |
730   | 0x800002da |        |
731   | 0x800002db |        |
732   | 0x800002dc |        |
733   | 0x800002dd |        |
734   | 0x800002de |        |
735   | 0x800002df |        |
736   | 0x800002e0 |        |
737   | 0x800002e1 |        |
738   | 0x800002e2 |        |
739   | 0x800002e3 |        |
740   | 0x800002e4 |        |
741   | 0x800002e5 |        |
742   | 0x800002e6 |        |
743   | 0x800002e7 |        |
744   | 0x800002e8 |        |
745   | 0x800002e9 |        |
746   | 0x800002ea |        |
747   | 0x800002eb |        |
748   | 0x800002ec |        |
749   | 0x800002ed |        |
750   | 0x800002ee |        |
751   | 0x800002ef |        |
752   | 0x800002f0 |        |
753   | 0x800002f1 |        |
754   | 0x800002f2 |        |
755   | 0x800002f3 |        |
756   | 0x800002f4 |        |
757   | 0x800002f5 |        |
758   | 0x800002f6 |        |
759   | 0x800002f7 |        |
760   | 0x800002f8 |        |
761   | 0x800002f9 |        |
762   | 0x800002fa |        |
763   | 0x800002fb |        |
764   | 0x800002fc |        |
765   | 0x800002fd |        |
766   | 0x800002fe |        |
767   | 0x800002ff |        |
768   | 0x80000300 | BALLZ  | [Ballzcoin](https://ballzcoin.org)
769   | 0x80000301 |        |
770   | 0x80000302 |        |
771   | 0x80000303 |        |
772   | 0x80000304 |        |
773   | 0x80000305 |        |
774   | 0x80000306 |        |
775   | 0x80000307 |        |
776   | 0x80000308 |        |
777   | 0x80000309 | BTW    | [Bitcoin World](http://btw.one)
778   | 0x8000030a |        |
779   | 0x8000030b |        |
780   | 0x8000030c |        |
781   | 0x8000030d |        |
782   | 0x8000030e |        |
783   | 0x8000030f |        |
784   | 0x80000310 |        |
785   | 0x80000311 |        |
786   | 0x80000312 |        |
787   | 0x80000313 |        |
788   | 0x80000314 |        |
789   | 0x80000315 |        |
790   | 0x80000316 |        |
791   | 0x80000317 |        |
792   | 0x80000318 |        |
793   | 0x80000319 |        |
794   | 0x8000031a |        |
795   | 0x8000031b |        |
796   | 0x8000031c |        |
797   | 0x8000031d |        |
798   | 0x8000031e |        |
799   | 0x8000031f |        |
800   | 0x80000320 | BEET   | [Beetle Coin](https://beetlecoin.io/)
801   | 0x80000321 | DST    | [DSTRA](https://dstra.io/)
802   | 0x80000322 |        |
803   | 0x80000323 |        |
804   | 0x80000324 |        |
805   | 0x80000325 |        |
806   | 0x80000326 |        |
807   | 0x80000327 |        |
808   | 0x80000328 | QVT    | [Qvolta](https://qvolta.com)
809   | 0x80000329 |        |
810   | 0x8000032a |        |
811   | 0x8000032b |        |
812   | 0x8000032c |        |
813   | 0x8000032d |        |
814   | 0x8000032e |        |
815   | 0x8000032f |        |
816   | 0x80000330 |        |
817   | 0x80000331 |        |
818   | 0x80000332 | VET    | [VeChain Token](https://vechain.com/)
819   | 0x80000333 |        |
820   | 0x80000334 | CLO    | [Callisto](http://callisto.network/)
821   | 0x80000335 |        |
822   | 0x80000336 |        |
823   | 0x80000337 |        |
824   | 0x80000338 |        |
825   | 0x80000339 |        |
826   | 0x8000033a |        |
827   | 0x8000033b |        |
828   | 0x8000033c |        |
829   | 0x8000033d |        |
830   | 0x8000033e |        |
831   | 0x8000033f | CRUZ   | [cruzbit](https://github.com/cruzbit/cruzbit)
832   | 0x80000340 |        |
833   | 0x80000341 |        |
834   | 0x80000342 |        |
835   | 0x80000343 |        |
836   | 0x80000344 |        |
837   | 0x80000345 |        |
838   | 0x80000346 |        |
839   | 0x80000347 |        |
840   | 0x80000348 |        |
841   | 0x80000349 |        |
842   | 0x8000034a |        |
843   | 0x8000034b |        |
844   | 0x8000034c |        |
845   | 0x8000034d |        |
846   | 0x8000034e |        |
847   | 0x8000034f |        |
848   | 0x80000350 |        |
849   | 0x80000351 |        |
850   | 0x80000352 |        |
851   | 0x80000353 |        |
852   | 0x80000354 |        |
853   | 0x80000355 |        |
854   | 0x80000356 |        |
855   | 0x80000357 |        |
856   | 0x80000358 |        |
857   | 0x80000359 |        |
858   | 0x8000035a |        |
859   | 0x8000035b |        |
860   | 0x8000035c |        |
861   | 0x8000035d |        |
862   | 0x8000035e |        |
863   | 0x8000035f |        |
864   | 0x80000360 |        |
865   | 0x80000361 |        |
866   | 0x80000362 |        |
867   | 0x80000363 |        |
868   | 0x80000364 |        |
869   | 0x80000365 |        |
870   | 0x80000366 |        |
871   | 0x80000367 |        |
872   | 0x80000368 |        |
873   | 0x80000369 |        |
874   | 0x8000036a |        |
875   | 0x8000036b |        |
876   | 0x8000036c |        |
877   | 0x8000036d |        |
878   | 0x8000036e |        |
879   | 0x8000036f |        |
880   | 0x80000370 |        |
881   | 0x80000371 |        |
882   | 0x80000372 |        |
883   | 0x80000373 |        |
884   | 0x80000374 |        |
885   | 0x80000375 |        |
886   | 0x80000376 | ADF    | [AD Token](http://adfunds.org)
887   | 0x80000377 |        |
888   | 0x80000378 | NEO    | [NEO](https://neo.org/)
889   | 0x80000379 | TOMO   | [TOMO](https://tomochain.com/)
890   | 0x8000037a | XSEL   | [Seln](https://selnx.jp/)
891   | 0x8000037b |        |
892   | 0x8000037c |        |
893   | 0x8000037d |        |
894   | 0x8000037e |        |
895   | 0x8000037f |        |
896   | 0x80000380 |        |
897   | 0x80000381 |        |
898   | 0x80000382 |        |
899   | 0x80000383 |        |
900   | 0x80000384 | LMO    | [Lumeneo](https://lumeneo.network/)
901   | 0x80000385 |        |
902   | 0x80000386 |        |
903   | 0x80000387 |        |
904   | 0x80000388 |        |
905   | 0x80000389 |        |
906   | 0x8000038a |        |
907   | 0x8000038b |        |
908   | 0x8000038c |        |
909   | 0x8000038d |        |
910   | 0x8000038e |        |
911   | 0x8000038f |        |
912   | 0x80000390 |        |
913   | 0x80000391 |        |
914   | 0x80000392 |        |
915   | 0x80000393 |        |
916   | 0x80000394 | META   | [Metadium](https://www.metadium.com/)
917   | 0x80000395 |        |
918   | 0x80000396 |        |
919   | 0x80000397 |        |
920   | 0x80000398 |        |
921   | 0x80000399 |        |
922   | 0x8000039a |        |
923   | 0x8000039b |        |
924   | 0x8000039c |        |
925   | 0x8000039d |        |
926   | 0x8000039e |        |
927   | 0x8000039f |        |
928   | 0x800003a0 |        |
929   | 0x800003a1 |        |
930   | 0x800003a2 |        |
931   | 0x800003a3 |        |
932   | 0x800003a4 |        |
933   | 0x800003a5 |        |
934   | 0x800003a6 |        |
935   | 0x800003a7 |        |
936   | 0x800003a8 |        |
937   | 0x800003a9 |        |
938   | 0x800003aa |        |
939   | 0x800003ab |        |
940   | 0x800003ac |        |
941   | 0x800003ad |        |
942   | 0x800003ae |        |
943   | 0x800003af |        |
944   | 0x800003b0 |        |
945   | 0x800003b1 |        |
946   | 0x800003b2 |        |
947   | 0x800003b3 |        |
948   | 0x800003b4 |        |
949   | 0x800003b5 |        |
950   | 0x800003b6 |        |
951   | 0x800003b7 |        |
952   | 0x800003b8 |        |
953   | 0x800003b9 |        |
954   | 0x800003ba |        |
955   | 0x800003bb |        |
956   | 0x800003bc |        |
957   | 0x800003bd |        |
958   | 0x800003be |        |
959   | 0x800003bf |        |
960   | 0x800003c0 |        |
961   | 0x800003c1 |        |
962   | 0x800003c2 |        |
963   | 0x800003c3 |        |
964   | 0x800003c4 |        |
965   | 0x800003c5 |        |
966   | 0x800003c6 |        |
967   | 0x800003c7 |        |
968   | 0x800003c8 |        |
969   | 0x800003c9 |        |
970   | 0x800003ca | TWINS  | [TWINS](https://win.win/)
971   | 0x800003cb |        |
972   | 0x800003cc |        |
973   | 0x800003cd |        |
974   | 0x800003ce |        |
975   | 0x800003cf |        |
976   | 0x800003d0 |        |
977   | 0x800003d1 |        |
978   | 0x800003d2 |        |
979   | 0x800003d3 |        |
980   | 0x800003d4 |        |
981   | 0x800003d5 |        |
982   | 0x800003d6 |        |
983   | 0x800003d7 |        |
984   | 0x800003d8 |        |
985   | 0x800003d9 |        |
986   | 0x800003da |        |
987   | 0x800003db |        |
988   | 0x800003dc |        |
989   | 0x800003dd |        |
990   | 0x800003de |        |
991   | 0x800003df |        |
992   | 0x800003e0 |        |
993   | 0x800003e1 |        |
994   | 0x800003e2 |        |
995   | 0x800003e3 |        |
996   | 0x800003e4 | OKP    | [OK Points](https://www.okcoin.com/chain)
997   | 0x800003e5 | SUM    | [Solidum](https://solidum.network)
998   | 0x800003e6 | LBTC   | [Lightning Bitcoin](http://lbtc.io/)
999   | 0x800003e7 | BCD    | [Bitcoin Diamond](http://btcd.io/)
1000  | 0x800003e8 | BTN    | [Bitcoin New](http://bitcoinnew.org/)
1001  | 0x800003e9 | TT     | [ThunderCore](https://thundercore.com/)
1002  | 0x800003ea | BKT    | [BanKitt](https://www.bankitt.network/)
1024  | 0x80000400 | ONT    | [Ontology](https://ont.io)
1111  | 0x80000457 | BBC    | [Big Bitcoin](http://bigbitcoins.org/)
1120  | 0x80000460 | RISE   | [RISE](https://rise.vision)
1122  | 0x80000462 | CMT    | [CyberMiles Token](https://www.cybermiles.io)
1128  | 0x80000468 | ETSC   | [Ethereum Social](https://ethereumsocial.kr/)
1145  | 0x80000479 | CDY    | [Bitcoin Candy](http://www.bitcoincandy.one)
1337  | 0x80000539 | DFC    | [Defcoin](http://defcoin-ng.org)
1397  | 0x80000575 | HYC    | [Hycon](https://hycon.io)
1524  | 0x800005f4 |        | [Taler](http://taler.site)
1616  | 0x80000650 | ELF    | [AELF](https://aelf.io)
1620  | 0x80000654 | ATH    | [Atheios](https://atheios.com)
1688  | 0x80000698 | BCX    | [BitcoinX](https://bcx.org)
1729  | 0x800006c1 | XTZ    | [Tezos](https://tezos.com)
1776  | 0x800006f0 | LBTC   | [Liquid BTC](https://blockstream.com/liquid/)
1815  | 0x80000717 | ADA    | [Cardano](https://www.cardanohub.org/en/home/)
1856  | 0x80000743 | TES    | [Teslacoin](https://www.tesla-coin.com/)
1901  | 0x8000076d | CLC    | [Classica](https://github.com/classica/)
1919  | 0x8000077f | VIPS   | [VIPSTARCOIN](https://www.vipstarcoin.jp/)
1926  | 0x80000786 | CITY   | [City Coin](https://city-chain.org/)
1977  | 0x800007b9 | XMX    | [Xuma](http://www.xumacoin.org/)
1984  | 0x800007c0 | TRTL   | [TurtleCoin](https://turtlecoin.lol/)
1987  | 0x800007c3 | EGEM   | [EtherGem](https://egem.io)
1989  | 0x800007c5 | HODL   | [HOdlcoin](https://hodlcoin.com/)
1990  | 0x800007c6 | PHL    | [Placeholders](https://placeh.io/)
1997  | 0x800007cd | POLIS  | [Polis](https://polispay.org/)
1998  | 0x800007ce | XMCC   | [Monoeci](https://monoeci.io/)
1999  | 0x800007cf | COLX   | [ColossusXT](https://colossusxt.io/)
2000  | 0x800007d0 | GIN    | [GinCoin](https://gincoin.io/)
2001  | 0x800007d1 | MNP    | [MNPCoin](https://mnpcoin.pro/)
2017  | 0x800007e1 | KIN    | [Kin](https://www.kinecosystem.org/)
2018  | 0x800007e2 | EOSC   | [EOSClassic](https://eos-classic.io/)
2019  | 0x800007e3 | GBT    | [GoldBean Token](http://www.adfunds.org/)
2020  | 0x800007e4 | PKC    | [PKC](https://www.pkc.ink/)
2048  | 0x80000800 | MCASH  | [MCashChain](https://mcash.network/)
2049  | 0x80000801 | TRUE   | [TrueChain](https://www.truechain.pro/)
2112  | 0x80000840 | IoTE   | [IoTE](https://www.iote.one/)
2221  | 0x800008ad | ASK    | [ASK](https://permission.io/)
2301  | 0x800008fd | QTUM   | [QTUM](https://qtum.org/en/)
2302  | 0x800008fe | ETP    | [Metaverse](https://mvs.org/)
2303  | 0x800008ff | GXC    | [GXChain](https://www.gxb.io)
2304  | 0x80000900 | CRP    | [CranePay](https://cranepay.io)
2305  | 0x80000901 | ELA    | [Elastos](https://www.elastos.org/)
2338  | 0x80000922 | SNOW   | [Snowblossom](https://snowblossom.org/)
2570  | 0x80000a0a | AOA    | [Aurora](https://www.aurorachain.io/)
2894  | 0x80000b4e | REOSC  | [REOSC Ecosystem](https://www.reosc.io/)
3003  | 0x80000bbb | LUX    | [LUX](https://luxcore.io/)
3030  | 0x80000bd6 | XHB    | [Hedera HBAR](https://www.hedera.com/)
3381  | 0x80000d35 | DYN    | [Dynamic](https://duality.solutions/dynamic/)
3383  | 0x80000d37 | SEQ    | [Sequence](https://duality.solutions/sequence/)
3552  | 0x80000de0 | DEO    | [Destocoin](https://desto.io)
3564  | 0x80000dec | DST    | [DeStream](https://destream.io)
2718  | 0x80000a9e | NAS    | [Nebulas](https://nebulas.io/)
2941  | 0x80000b7d | BND    | [Blocknode](https://blocknode.tech)
3276  | 0x80000ccc | CCC    | [CodeChain](https://codechain.io/)
3377  | 0x80000d31 | ROI    | [ROIcoin](https://roi-coin.com/)
4218  | 0x8000107a | IOTA   | [IOTA](https://www.iota.org/)
4242  | 0x80001092 | AXE    | [Axe](https://github.com/AXErunners/axe)
5248  | 0x00001480 | FIC    | [FIC](https://ficnetwork.com)
5353  | 0x000014e9 | HNS    | [Handshake](https://handshake.org)
5757  | 0x8000167d |        | [Stacks](https://github.com/blockstack/blockstack-core)
5920  | 0x80001720 | SLU    | [SILUBIUM](https://github.com/SilubiumProject/slucore)
6060  | 0x800017ac | GO     | [GoChain GO](https://gochain.io/)
6666  | 0x80001a0a | BPA    | [Bitcoin Pizza](http://p.top/)
6688  | 0x80001a20 | SAFE   | [SAFE](http://www.anwang.com/)
6969  | 0x80001b39 | ROGER  | [TheHolyrogerCoin](https://github.com/TheHolyRoger/TheHolyRogerCoin)
7777  | 0x80001e61 | BTV    | [Bitvote](https://www.bitvote.one)
8339  | 0x80002093 | BTQ    | [BitcoinQuark](https://www.bitcoinquark.org)
8888  | 0x800022b8 | SBTC   | [Super Bitcoin](https://www.superbtc.org)
8964  | 0x80002304 | NULS   | [NULS](https://nuls.io)
8999  | 0x80002327 | BTP    | [Bitcoin Pay](http://www.btceasypay.com)
9797  | 0x80002645 | NRG    | [Energi](https://www.energi.world/)
9888  | 0x800026a0 | BTF    | [Bitcoin Faith](http://bitcoinfaith.org)
9999  | 0x8000270f | GOD    | [Bitcoin God](https://www.bitcoingod.org)
10000 | 0x80002710 | FO     | [FIBOS](https://fibos.io/)
10291 | 0x80002833 | BTR    | [Bitcoin Rhodium](https://www.bitcoinrh.org)
11111 | 0x80002B67 | ESS    | [Essentia One](https://essentia.one/)
12345 | 0x80003039 | IPOS   | [IPOS](https://iposlab.com)
13107 | 0x80003333 | BTY    | [BitYuan](https://www.bityuan.com)
13108 | 0x80003334 | YCC    | [Yuan Chain Coin](https://www.yuan.org)
15845 | 0x80003de5 | SDGO   | [SanDeGo](http://www.sandego.net)
16754 | 0x80004172 | ARDR   | [Ardor](https://www.jelurida.com)
19165 | 0x80004add | SAFE   | [Safecoin](https://www.safecoin.org)
19167 | 0x80004adf | ZEL    | [ZelCash](https://www.zel.cash)
19169 | 0x80004ae1 | RITO   | [Ritocoin](https://www.ritocoin.org)
20036 | 0x80004e44 | XND    | [ndau](https://ndau.io/)
22504 | 0x800057e8 | PWR    | [PWRcoin](https://github.com/Plainkoin/PWRcoin)
25252 | 0x800062a4 | BELL   | [Bellcoin](https://bellcoin.web4u.jp/)
25718 | 0x80006476 | CHX    | [Own](https://wallet.weown.com)
31102 | 0x8000797e | ESN    | [EtherSocial Network](https://ethersocial.network)
31337 | 0x80007a69 |        | [ThePower.io](https://thepower.io)
33416 | 0x80008288 | TEO    | [Trust Eth reOrigin](https://tao.foundation)
33878 | 0x80008456 | BTCS   | [Bitcoin Stake](http://www.btcscoin.com/)
34952 | 0x80008888 | BTT    | [ByteTrade](https://bytetrade.io/)
37992 | 0x80009468 | FXTC   | [FixedTradeCoin](https://fixedtradecoin.org/)
39321 | 0x80009999 | AMA    | [Amabig](https://amabig.com/)
49344 | 0x0000C0C0 | STASH  | [STASH](https://stashpay.io/)
65536 | 0x80010000 | KETH   | [Krypton World](http:/krypton.world/)
88888 | 0x80015b38 | RYO    | [c0ban](https://www.c0ban.co/)
99999 | 0x8001869f | WICC   | [Waykichain](http://www.waykichain.com)
200625 | 0x80030fb1 | AKA    | [Akroma](https://akroma.io)
200665 | 0x80011000 | GENOM  | [GENOM](https://genom.tech)
246529 | 0x8003C301 | ATS    | [ARTIS sigma1](https://artis.eco/)
424242 | 0x80067932 | X42    | [x42](http://www.x42.tech)
666666 | 0x800a2c2a | VITE   | [Vite](https://www.vite.org)
1171337 | 0x8011df89 | ILT    | [iOlite](https://iolite.io/)
1313114 | 0x8014095a | ETHO   | [Ether-1](https://www.ether1.org)
1313500 | 0x80140adc | XERO   | [Xerom](https://www.xerom.org)
1712144 | 0x801a2010 | LAX    | [LAPO](https://lapo.io)
5249353 | 0x80501949 | BCO    | [BitcoinOre](http://bitcoinore.org/)
5249354 | 0x8050194a | BHD    | [BitcoinHD](http://btchd.net/)
5264462 | 0x8050544e | PTN    | [PalletOne](https://pallet.one/)
5718350 | 0x8057414e | WAN    | [Wanchain](https://wanchain.org/)
5741564 | 0x80579bfc | WAVES  | [Waves](https://wavesplatform.com/)
7562605 | 0x8073656d | SEM    | [Semux](https://semux.org)
7567736 | 0x80737978 | ION    | [ION](https://ionomy.com/)
7825266 | 0x80776772 | WGR    | [WGR](https://wagerr.com)
7825267 | 0x80776773 | OBSR   | [OBServer](https://obsr.org/)
61717561 | 0x83adbc39 | AQUA   | [Aquachain](https://aquachain.github.io/)
91927009 | 0x857ab1e1 | kUSD   | [kUSD](https://kowala.tech)
99999998 | 0x85f5e0fe | FLUID  | [Fluid Chains](https://www.fluidchains.com)
99999999 | 0x85f5e0ff | QKC    | [QuarkChain](https://www.quarkchain.io)

Coin types will be added only if there is a wallet implementing BIP-0044 for desired coin.

## Libraries

* [BIP44-constants](https://www.npmjs.com/package/bip44-constants) ([source](http://github.com/bitcoinjs/bip44-constants)) JavaScript package with described coin types

## References

* [BIP-0044: Multi-Account Hierarchy for Deterministic Wallets](https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki)

'''
'''--- slip-0048.md ---
# SLIP-0048 : Deterministic Key Hierarchy for Graphene-based Networks

```
Number:  SLIP-0048
Title:   Deterministic key hierarchy for Graphene-based networks
Type:    Standard
Status:  Draft
Authors: Fabian Schuh <Fabian@chainsquad.com>
Created: 2016-10-18
```

## Abstract

This SLIP defines the logical hierarchy for deterministic wallets using Graphene technology.
It extends [BIP-0044](https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki) known from Bitcoin which should be read and understood before going into the details of this specification.

## Motivation

The key derivation structure defined in BIP-0044/SLIP-0044 does not properly represent the possibilities available to Graphene based networks. For this reason, we defined this SLIP and provide a standard for hierarchies on those networks.

## Account Roles on Graphene

Graphene-based blockchains (such as BitShares, Steem, Peerplays, MUSE, etc.) do not use the UTXO model. Instead, there are accounts registered on the blockchains that have a (modifiable) role scheme attached to each of them. The actual roles depend on the use case of the network but most of them constitute an `owner` and an `active` role among others. Usually, the only difference between `owner` and `active` role is that the `owner` can change the `owner` role, while the `active` cannot, and thus represents some kind of cold storage or super-admin roles.

Technically, each role can consist of multiple (weighted) keys or other accounts to facilitate hierarchical weighted roles on the blockchain.

Wallets are supposed to have at least one key installed that is associated with the account's owner role (i.e. the `owner` key) to allow recovery.

The `memo` key is different in that it is **not** a roles but a single key that is assigned to an account. This key is used for private (encrypted) messaging to derive a shared secret between sender and receiver.

## Deterministic Key Hierarchy

```
m / purpose' / network' / role' / account-index' / key-index'
```

Each level has a special meaning, described in the chapters below. Apostrophe in the path indicates that BIP32 hardened derivation is used.

### Purpose

Purpose is a constant set to 48' (or 0x80000030) following the BIP43 recommendation. It indicates that the subtree of this node is used according to this specification.

Hardened derivation is used at this level.

### Network

One master node (seed) can be used for unlimited number of independent keys which can be used in different networks such as BitShares, Steem, PeerPlays and others. However, sharing the same space for various networks has some disadvantages.

This level creates a separate subtree for every network, avoiding reusing addresses across networks and improving privacy issues.

`network`is a constant, set for each network. Developers may ask for registering unused number for their project.

The list of already allocated networks is in the chapter "Registered networks" below.

Hardened derivation is used at this level.

### Role

Each account can be associated with its own keys. To distinguish different roles, a roles id is used to obtain a specific sub tree. Since each Graphene-based network can have it's own specific set of roles, the actually used role indices are provided in the section "Registered networks", below.

Hardened derivation is used at this level.

The Role comes prior to the Account index so that a role-specific parent key can be derived which allows to derive child keys that do not interfer with other roles.
A simple use-case would be a mobile wallet app that does not want to expose owner keys but only has active keys available by going through the tree starting with:

```
m / purpose' / network' / [active]
```

### Account-Index

Since hierarchical key derivation can be used to obtain an infinite amount of keys, we allow users to store keys for an infinite amount of accounts by using account indices. This means that account-index 0, derives a subkey to obtain multiple keys associated with account *A*, while account-index 1 does the same for account *B*. Note that the public keys cannot be associated with each other unless a common parent node in the tree is published.

Software needs to discover all used accounts after importing the seed from an external source. Such an algorithm is described in "Account discovery" chapter.

Thus, software should prevent a update of an account with a specific key (see below) if a previous key does not have an account associated with it.

## Account discovery

When the master seed is imported from an external source the software should start to discover the accounts in the following manner (for a specific role, e.g. `active`):

* derive the first account's node (index = 0)
* derive the child keys for each role (respect the gap limit)
* use the blockchains API to obtain the account associated with one of this public keys
* if the public key is not associated with any account, stop discovery
* if there is an account associated with any of these key, increase the account index and go to step 1

Depending on the blockchain's API and available resources, account discovery could be done with multiple accounts (resepct the gap limit) at once. With a gap limit of 5 for account's and a gap limit of 5 for keys, we would need to scan for 25 keys. Combined with bloom filtering, the amount of data could be reduced at the expense of a single step lookup.

This algorithm is successful because software should disallow creation of new accounts if previous one has no associated account.

### Key-Index

We want to be able to for example take an account's current role key and put it on a different device.
If that device is compromised, we want the other (more secure) device to be able to generate the new generation of that posting key without further interaction. For this reason, each accounts-role leaf generates a new subtree of keys. This allows to keep the keys for other roles and merely update the role with the compromised keys. Other wallets with the same tree will still be able to access the accounts by deriving the new keys.

### Public Key gap limit

Public Key gap limit is currently set to 5. If the software hits 5 unused public keys in a row, it expects there are no used accounts beyond this point and stops searching the public key chain.

Wallet software should allow the advanced user to manually search beyond the gap limit of 5.

## Account Setup Procedure

This paragraph describes how to *onboard* an existing account into this standard, e.g. for hardware wallets. Later it will be possible to create (and register) new accounts, given a funded account is already available through this specifications (account creation costs a fee on most networks).

The procedure to onboard an account involves **two** transactions and works as follows:

1. The user requests an unused public key from the master (seed) node according to the specifications
2. The obtained public key is **added** to the existing account's **owner** role (full-weight)
3. This key is used for an `account_update` operation in order to replace the existing roles for sole access to the account by keys following this specification.

The advantages of this procedure are:

* This algorithm proves that it has the correct private key to obtain owner roles since this key is required to sign the `account_update` operation.
* Optionally, alternative keys to specific operations (e.g. *posting* roles on Steem) can be added that do not follow the above specification, to allow for multi-signature schemes
* Wallets following this specification can be used solely as coldstorage for the owner key while the active key could be held outside the wallet

Disadvantages are:

* The user needs to be educated about the roles, or
* a simplified account roles setup scheme needs to be developed

## Registered networks

Index          | Network     | Roles
---------------|-------------|---------------------------------------------------------
0x00000000     | Steem       | `0x0`: owner, `0x1`: active, `0x3`: memo, `0x4`: posting
0x00000001     | BitShares   | `0x0`: owner, `0x1`: active, `0x3`: memo
0x00000002     | PeerPlays   | `0x0`: owner, `0x1`: active, `0x3`: memo
0x00000003     | Muse        | `0x0`: owner, `0x1`: active, `0x3`: memo
0x00000004     | EOS         | `0x0`: owner, `0x1`: active
0x00000005     | FIBOS       | `0x0`: owner, `0x1`: active
0x00000006     | ONE         | `0x0`: owner, `0x1`: active
0x00000007     | SBC         | `0x0`: owner, `0x1`: active
0x00000008     | YOYOW       | `0x0`: owner, `0x1`: active, `0x3`: memo, `0x4`: secondary
0x00000009     | BOS         | `0x0`: owner, `0x1`: active
0x0000000a     | ONEGRAM     | `0x0`: owner, `0x1`: active
0x0000000b     | BRAVO       | `0x0`: owner, `0x1`: active, `0x3`: memo, `0x4`: posting
0x0000000c     | DECENT      | `0x0`: owner, `0x1`: active, `0x3`: memo

## Examples

Network    | Role          | Account-index  | Key-Index | Path
-----------|---------------|----------------|-----------|----------------------------
Steem      | active        | first          | first     | m / 48' / 0' / 1' / 0' / 0'
BitShares  | owner         | forth          | forth     | m / 48' / 1' / 0' / 3' / 3'
EOS        | owner         | first          | first     | m / 48' / 4' / 0' / 0' / 0'
FIBOS      | owner         | first          | first     | m / 48' / 5' / 0' / 0' / 0'
BOS        | owner         | first          | first     | m / 48' / 9' / 0' / 0' / 0'
ONEGRAM    | owner         | first          | first     | m / 48' / 10' / 0' / 0' / 0'

## References

* [BIP-0044: Multi-Account Hierarchy for Deterministic Wallets](https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki)
* [Graphene Wiki](https://github.com/cryptonomex/graphene/wiki)

## Updates

2017/09/07: In the hierarchy, the key role and the account index are swapped to allow separation of roles in sub-trees.

'''
'''--- slip-0048/testvectors.py ---
#!/usr/bin/env python2

import binascii
import hashlib
import hmac
import struct
import ecdsa
from mnemonic import mnemonic

privdev = 0x80000000

def int_to_string(x, pad):
    result = ['\x00'] * pad
    while x > 0:
        pad -= 1
        ordinal = x & 0xFF
        result[pad] = (chr(ordinal))
        x >>= 8
    return ''.join(result)

def string_to_int(s):
    result = 0
    for c in s:
        if not isinstance(c, int):
            c = ord(c)
        result = (result << 8) + c
    return result

def seed2hdnode(seed, modifier, curve):
    while True:
        h = hmac.new(modifier, seed, hashlib.sha512).digest()
        key, chaincode = h[:32], h[32:]
        a = string_to_int(key)
        if (a < curve.order and a != 0):
            break
        seed = h
    return (key, chaincode)

def fingerprint(publickey):
    h = hashlib.new('ripemd160', hashlib.sha256(publickey).digest()).digest()
    return h[:4]

def publickey(private_key, curve):
    Q = string_to_int(private_key) * curve.generator
    xstr = int_to_string(Q.x(), 32)
    parity = Q.y() & 1
    return chr(2 + parity) + xstr

def derive(parent_key, parent_chaincode, i, curve):
    assert len(parent_key) == 32
    assert len(parent_chaincode) == 32
    k = parent_chaincode
    if ((i & privdev) != 0):
        key = '\x00' + parent_key
    else:
        key = publickey(parent_key, curve)
    d = key + struct.pack('>L', i)
    while True:
        h = hmac.new(k, d, hashlib.sha512).digest()
        key, chaincode = h[:32], h[32:]
        a = string_to_int(key)
        key = (a + string_to_int(parent_key)) % curve.order
        if (a < curve.order and key != 0):
            key = int_to_string(key, 32)
            break
        d = '\x01' + h[32:] + struct.pack('>L', i)
    return (key, chaincode)

def get_curve_info(curvename):
    return (ecdsa.curves.SECP256k1, 'Bitcoin seed')

def show_testvector(name, curvename, seedhex, derivationpath):
    curve, seedmodifier = get_curve_info(curvename)
    master_seed = binascii.unhexlify(seedhex)
    k, c = seed2hdnode(master_seed, seedmodifier, curve)
    p = publickey(k, curve)
    fpr = '\x00\x00\x00\x00'
    path = 'm'
    print("### " + name + " for " + curvename)
    print("Seed (hex): " + seedhex)
    print('* Chain ' + path)
    print('    * fpr: ' + binascii.hexlify(fpr))
    print('    * chain: ' + binascii.hexlify(c))
    print('    * prv: ' + binascii.hexlify(k))
    print('    * pub: ' + binascii.hexlify(p))
    depth = 0
    for i in derivationpath:
        fpr = fingerprint(p)
        depth = depth + 1
        path = path + "/" + str(i & (privdev - 1))
        if ((i & privdev) != 0):
            path = path + "<sub>H</sub>"
        k, c = derive(k, c, i, curve)
        p = publickey(k, curve)
        print('* Chain ' + path)
        print('    * fpr: ' + binascii.hexlify(fpr))
        print('    * chain: ' + binascii.hexlify(c))
        print('    * prv: ' + binascii.hexlify(k))
        print('    * pub: ' + binascii.hexlify(p))
    print

m = mnemonic.Mnemonic("english")
show_testvector("Test vector 1",
                'secp256k1',
                binascii.hexlify(m.to_seed("hello")),
                [
                    privdev + 48,
                    privdev + 0,
                    privdev + 0,
                    privdev + 1,
                    privdev + 0,
                ])

show_testvector("Test vector 2",
                'secp256k1',
                binascii.hexlify(m.to_seed("hello")),
                [
                    privdev + 48,
                    privdev + 1,
                    privdev + 3,
                    privdev + 0,
                    privdev + 3,
                ])

'''
'''--- slip-0077.md ---
# SLIP-0077 : Deterministic blinding key derivation for Confidential Transactions

```
Number:  SLIP-0077
Title:   Deterministic blinding key derivation for Confidential Transactions
Type:    Standard
Status:  Draft
Authors: Roman Zeyde <mail@romanzey.de>
Created: 2019-06-15
```

## Abstract

This document describes a method for blinding key derivation
for Confidential Transactions, using a determinstic hierarchy.

## General design

In confidential transactions, the sender and the receiver use ECDH to derive a shared nonce, which is then used for hiding/recovering of the actual value and asset type being transacted.
In Elements/Liquid, the receiver uses the following derivation scheme for his ECDH public/private keys:

```
blinding_private_key := HMAC_SHA256(key=master_blinding_key, msg=script_pubkey)
blinding_public_key := secp256k1_publickey(private_key=blinding_private_key)
```

Note: `blinding_private_key` (as 256-bit scalar) must be less than the secp256k1 curve group order - otherwise, the derivation above must fail.

The receiver is using `blinding_public_key` to construct a "confidential address", which is used by the sender to blind the relevant transaction outputs. Each such blinded transaction output also contains the sender's ECDH public key, so the receiver would be able to recover the shared nonce using its `blinding_private_key`.

An additional use-case is sharing some/all of the receiver's blinding private keys with an external auditor, allowing unblinding the audited outputs without being able to spend them.

## Design details

### Master blinding key derivation

In order to use similar blinding key derivation scheme on TREZOR, we suggest using [SLIP-0021](https://github.com/satoshilabs/slips/blob/master/slip-0021.md) derivation scheme for `master_blinding_key`:

```
domain := b"Symmetric key seed"
root   := HMAC_SHA512(key=domain, msg=seed)

label := b"SLIP-0077"
node  := HMAC_SHA512(key=root[0:32], msg=(b"\x00" + label))

master_blinding_key := node[32:64]
```

The above seed should be derived using [BIP-0039](https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki#from-mnemonic-to-seed) mnemonic and passphrase (if available).

### Shared nonce derivation

The shared nonce is derived using ECDH and double-SHA256 of the compressed shared public key:

```
shared := secp256k1_multiply(blinding_private_key, sender_public_key, compressed=True)
nonce := SHA256(SHA256(shared))
```

## References

* [An investigation into Confidential Transactions](https://github.com/AdamISZ/ConfidentialTransactionsDoc/blob/master/essayonCT.pdf)
* [Confidential Transactions tutorial](https://elementsproject.org/elements-code-tutorial/confidential-transactions#blindingkey)
* [Liquid Developer Guide](https://docs.blockstream.com/liquid/developer-guide/developer-guide-index.html#confidential-transactions)
* [Elements' blinding key derivation](https://github.com/ElementsProject/elements/blob/a6beb256ed5195c2a1014a34fdf354d5797247a8/src/wallet/wallet.cpp#L5594)
* [Elements' output unblinding using ECDH](https://github.com/ElementsProject/elements/blob/66c015529e7846f8491bcafd986326bcafc1bfcb/src/blind.cpp#L53)

'''
'''--- slip-0132.md ---
# SLIP-0132 : Registered HD version bytes for BIP-0032

```
Number:  SLIP-0132
Title:   Registered HD version bytes for BIP-0032
Type:    Standard
Status:  Draft
Authors: Clark Moody <clark@clarkmoody.com>
Created: 2018-02-08
```

## Abstract

BIP-0032 defines the derivation scheme for heirarchical deterministic wallets, which encode their public and private keys in an extended serialization format known as `xpub`. The `xpub` prefix is an artifact of Base58 encoding the four version bytes of the serialization format.

## Motivation

The BIP repository defines public and private key version bytes for Bitcoin's mainnet and testnet. However, other cryptocurrencies use different version bytes for encoding HD seeds, and the BIP repository is focused on Bitcoin. Thus, we propose this SLIP act as a registry for all coin HD version bytes.

Since BIP-0032 does not specify the address format for a given derivation path, wallet developers [have proposed](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-September/014907.html) altering the version bytes to achieve this. With the activation of SegWit on Bitcoin, the number of ways of encoding an address public key has increased. While [BIP-0049](https://github.com/bitcoin/bips/blob/master/bip-0049.mediawiki) proposes a method for encoding P2WPKH-nested-in-P2SH addresses, it fails to change the HD seed version bytes (retains `xpub` prefix), leading to unsustainable user confusion. Either the user must know that the `xpub` uses BIP-0049 derivation, or the consumer of the `xpub` must scan both address spaces (P2PKH and P2WPKH-in-P2SH).

[BIP-0084](https://github.com/bitcoin/bips/blob/master/bip-0084.mediawiki) proposes a native-SegWit derivation scheme, encoding P2WPKH addresses in Bech32. However, the extended serialization format is presented with a `zpub` prefix but no version bytes. This is an issue since multiple values of the version bytes may encode to the same prefix.

A final important motiviation for establishing a clearinghouse of HD version bytes is the fact that the extended serialization format does not encode the coin type. The [SLIP-0032](https://github.com/satoshilabs/slips/blob/master/slip-0032.md) proposal attempts a remedy by including the full BIP-0032 derivation path within the serialized key. Along with a human-readable prefix of `xpub` and Bech32 encoding, SLIP-0032 should greatly improve the wallet ecosystem. Until wallets begin implementation of SLIP-0032, however, this registry aims to alleviate the confusion.

## Registered HD version bytes

These are the registered HD version bytes for extended serialization of public and private keys.

Coin                                      | Public Key            | Private Key           | Address Encoding                 | BIP 32 Path |
------------------------------------------|-----------------------|-----------------------|----------------------------------|-------------|
[Bitcoin](https://bitcoin.org/)           | `0x0488b21e` - `xpub` | `0x0488ade4` - `xprv` | P2PKH or P2SH                    | m/44'/0'    |
Bitcoin                                   | `0x049d7cb2` - `ypub` | `0x049d7878` - `yprv` | P2WPKH in P2SH                   | m/49'/0'    |
Bitcoin                                   | `0x04b24746` - `zpub` | `0x04b2430c` - `zprv` | P2WPKH                           | m/84'/0'    |
Bitcoin                                   | `0x0295b43f` - `Ypub` | `0x0295b005` - `Yprv` | Multi-signature P2WSH in P2SH    | -           |
Bitcoin                                   | `0x02aa7ed3` - `Zpub` | `0x02aa7a99` - `Zprv` | Multi-signature P2WSH            | -           |
Bitcoin Testnet                           | `0x043587cf` - `tpub` | `0x04358394` - `tprv` | P2PKH or P2SH                    | m/44'/1'    |
Bitcoin Testnet                           | `0x044a5262` - `upub` | `0x044a4e28` - `uprv` | P2WPKH in P2SH                   | m/49'/1'    |
Bitcoin Testnet                           | `0x045f1cf6` - `vpub` | `0x045f18bc` - `vprv` | P2WPKH                           | m/84'/1'    |
Bitcoin Testnet                           | `0x024289ef` - `Upub` | `0x024285b5` - `Uprv` | Multi-signature P2WSH in P2SH    | -           |
Bitcoin Testnet                           | `0x02575483` - `Vpub` | `0x02575048` - `Vprv` | Multi-signature P2WSH            | -           |
[Litecoin](https://litecoin.org/)         | `0x019da462` - `Ltub` | `0x019d9cfe` - `Ltpv` | P2PKH or P2SH                    | m/44'/2'    |
Litecoin                                  | `0x01b26ef6` - `Mtub` | `0x01b26792` - `Mtpv` | P2WPKH in P2SH                   | m/49'/1'    |
Litecoin Testnet                          | `0x0436f6e1` - `ttub` | `0x0436ef7d` - `ttpv` | P2PKH or P2SH                    | m/44'/1'    |
[Vertcoin](https://vertcoin.org/)         | `0x0488b21e` - `vtcp` | `0x0488ade4` - `vtcv` | P2PKH or P2SH                    | m/44'/28'   |
[Polis](https://polispay.org/)            | `0x03e25d7e` - `ppub` | `0x03e25945` - `pprv` | P2PKH                            | m/44'/1997' |

## Bitcoin Test Vectors

```
Mnemonic: abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon about

m/44'/0'/0'
xprv9xpXFhFpqdQK3TmytPBqXtGSwS3DLjojFhTGht8gwAAii8py5X6pxeBnQ6ehJiyJ6nDjWGJfZ95WxByFXVkDxHXrqu53WCRGypk2ttuqncb
xpub6BosfCnifzxcFwrSzQiqu2DBVTshkCXacvNsWGYJVVhhawA7d4R5WSWGFNbi8Aw6ZRc1brxMyWMzG3DSSSSoekkudhUd9yLb6qx39T9nMdj
m/44'/0'/0'/0/0 address:
1LqBGSKuX5yYUonjxT5qGfpUsXKYYWeabA

m/49'/0'/0'
yprvAHwhK6RbpuS3dgCYHM5jc2ZvEKd7Bi61u9FVhYMpgMSuZS613T1xxQeKTffhrHY79hZ5PsskBjcc6C2V7DrnsMsNaGDaWev3GLRQRgV7hxF
ypub6Ww3ibxVfGzLrAH1PNcjyAWenMTbbAosGNB6VvmSEgytSER9azLDWCxoJwW7Ke7icmizBMXrzBx9979FfaHxHcrArf3zbeJJJUZPf663zsP
m/49'/0'/0'/0/0 address:
37VucYSaXLCAsxYyAPfbSi9eh4iEcbShgf

m/84'/0'/0'
zprvAdG4iTXWBoARxkkzNpNh8r6Qag3irQB8PzEMkAFeTRXxHpbF9z4QgEvBRmfvqWvGp42t42nvgGpNgYSJA9iefm1yYNZKEm7z6qUWCroSQnE
zpub6rFR7y4Q2AijBEqTUquhVz398htDFrtymD9xYYfG1m4wAcvPhXNfE3EfH1r1ADqtfSdVCToUG868RvUUkgDKf31mGDtKsAYz2oz2AGutZYs
m/84'/0'/0'/0/0 address:
bc1qcr8te4kr609gcawutmrza0j4xv80jy8z306fyu
```

[Test vectors generation code](https://gist.github.com/clarkmoody/0a788d2e012ffe339bb7d3873e47c081)

## References

* [BIP-0032: Heirarchical Deterministic Wallets # Serialization](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki#serialization-format)
* [SLIP-0032: Extended serialization format for BIP-32 wallets](https://github.com/satoshilabs/slips/blob/master/slip-0032.md)

'''
'''--- slip-0173.md ---
# SLIP-0173 : Registered human-readable parts for BIP-0173

```
Number:  SLIP-0173
Title:   Registered human-readable parts for BIP-0173
Type:    Standard
Status:  Draft
Authors: Clark Moody <clark@clarkmoody.com>
Created: 2017-05-17
```

## Abstract

BIP-0173 defines a new format for segregated witness output addresses that contains a human-readable part that identifies the coin type.

## Motivation

The BIP repository does not want to deal with assigning the values for various coin types different than Bitcoin so we propose this SLIP to become such body.

## Registered human-readable parts

These are the registered human-readable parts for usage in Bech32 encoding of witness programs.

| Coin                                           | Mainnet | Testnet | Regtest   |
| ---------------------------------------------- | ------- | ------- | --------- |
| [Bellcoin](https://bellcoin.web4u.jp/)         | `bm`    | `bt`    | `br`      |
| [Bitcoin](https://bitcoin.org/)                | `bc`    | `tb`    | `bcrt`    |
| [Bitcoin Atom](https://bitcoinatom.io/)        | `bca`   | `tbca`  | `bcart`   |
| [Bitcoin Gold](https://bitcoingold.org/)       | `btg`   | `tbtg`  |           |
| [Bitcoin Platinum](https://btcplt.org/)        | `btp`   | `tbtp`  |           |
| [Bitcoin Private](https://btcprivate.org/)     | `btcp`  | `tbtcp` | `regbtcp` |
| [Bitcore](https://bitcore.cc/)                 | `btx`   | `tbtx`  |           |
| [BitZeny](https://bitzeny.tech/)               | `bz`    | `tz`    | `rz`      |
| [CranePay](https://cranepay.io/)               | `cp`    | `cpt`   | `cpr`     |
| [DigiByte](https://www.digibyte.io/)           | `dgb`   | `dgbt`  | `dgbrt`   |
| [FujiCoin](http://www.fujicoin.org/)           | `fc`    | `tf`    | `fcrt`    |
| [Groestlcoin](https://groestlcoin.org/)        | `grs`   | `tgrs`  | `grsrt`   |
| [Handshake](https://handshake.org/)            | `hs`    | `ts`    | `rs`      |
| [Litecoin](https://litecoin.org/)              | `ltc`   | `tltc`  | `rltc`    |
| [Monacoin](https://monacoin.org/)              | `mona`  | `tmona` | `rmona`   |
| [Myriad](https://myriadcoin.org/)              | `my`    | `tm`    |           |
| [Namecoin](https://www.namecoin.org/)          | `nc`    | `tn`    | `ncrt`    |
| [Peercoin](https://www.peercoin.net)           | `xpc`   | `tpc`   |           |
| [Quantum Resistant Ledger](https://theqrl.org) | `qrl`   | `tqrl`  | `qrlrt`   |
| [Ravencoin](https://ravencoin.org/)            | `rc`    | `tr`    | `rcrt`    |
| [Susucoin](https://www.susukino.com/)          | `susu`  | `tutu`  | `ruru`    |
| [Unit-e](https://dtr.org/unit-e/)              | `ue`    | `tue`   | `uert`    |
| [Vertcoin](https://vertcoin.org/)              | `vtc`   | `tvtc`  |           |
| [Viacoin](https://viacoin.org/)                | `via`   | `tvia`  |           |
| [VIPSTARCOIN](https://www.vipstarcoin.jp/)     | `vips`  | `tvips` |           |
| [Zen Protocol](https://zenprotocol.com/)       | `zen`   | `tzn`   |           |
| [Zilliqa](https://zilliqa.com/)                | `zil`   | `tzil`  |           |

## Libraries

* [Reference Implementations](https://github.com/sipa/bech32/tree/master/ref)

## References

* [BIP-0173: Base32 address format for native v0-16 witness outputs](https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki)

'''