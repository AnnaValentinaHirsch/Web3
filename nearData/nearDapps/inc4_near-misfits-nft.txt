*GitHub Repository "inc4/near-misfits-nft"*

'''--- .env ---
SKIP_PREFLIGHT_CHECK=true
'''
'''--- README.md ---
## Available Scripts

In the project directory, you can run:

### `yarn start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in the browser.

'''
'''--- package.json ---
{
  "name": "template",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@testing-library/jest-dom": "^5.11.4",
    "@testing-library/react": "^11.1.0",
    "@testing-library/user-event": "^12.1.10",
    "near-api-js": "^0.42.0",
    "near-units": "^0.1.9",
    "prop-types": "^15.7.2",
    "react": "^17.0.2",
    "react-dom": "^17.0.2",
    "react-router": "^5.2.0",
    "react-router-dom": "^5.2.0",
    "react-scripts": "4.0.3",
    "react-svg": "^14.0.7",
    "sass": "^1.35.2",
    "shortid": "^2.2.16",
    "web-vitals": "^1.0.1"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": "@inc4/react"
  },
  "prettier": "@inc4/prettier-config",
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "@inc4/eslint-config-react": "1.0.1",
    "eslint": "^7.31.0",
    "eslint-config-airbnb": "^18.1.0",
    "eslint-config-prettier": "^6.10.1",
    "eslint-plugin-import": "^2.20.2",
    "eslint-plugin-jsx-a11y": "^6.2.3",
    "eslint-plugin-prettier": "^3.1.3",
    "eslint-plugin-react": "^7.19.0",
    "eslint-plugin-react-hooks": "^2.5.1",
    "prettier": "^2.3.2",
    "typescript": "^4.4.4"
  }
}

'''
'''--- public/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/images/misfits.png" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Manrope:wght@500;600&family=Montserrat:wght@300;400;500;600;700&display=swap"
      rel="stylesheet"
    />
    <script
      type="text/javascript"
      src="https://addevent.com/libs/atc/1.6.1/atc.min.js"
      async
      defer
    ></script>

    <title>Misfits</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
  </body>
</html>

'''
'''--- src/Main.js ---
import React, { useEffect, useContext } from 'react';
import { appStore, onAppMount } from './state/app';
import RenderRoutes from './components/RenderRoutes';
import Layout from './layouts/Layout';
import routes from './routes';
import './styles/Main.scss';

const Main = () => {
  const { dispatch } = useContext(appStore);

  const onMount = () => {
    dispatch(onAppMount());
  };

  useEffect(onMount, []);
  return (
    <Layout>
      <RenderRoutes routes={routes} />
    </Layout>
  );
};

export default Main;

'''
'''--- src/assets/images/copy-icon.svg ---
<svg width="14" height="14" viewBox="0 0 14 14" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M4.34869 13.4013C2.83207 13.4013 1.46477 12.4877 0.884293 11.0866C0.303811 9.68542 0.62444 8.07258 1.69669 7L3.28819 5.4085L4.34869 6.469L2.75794 8.05975C2.18949 8.6282 1.96748 9.45674 2.17555 10.2333C2.38362 11.0098 2.99015 11.6163 3.76667 11.8244C4.5432 12.0325 5.37174 11.8105 5.94019 11.242L7.53094 9.65125L8.59144 10.7125L7.00069 12.3033C6.29875 13.0087 5.34383 13.404 4.34869 13.4013ZM4.87894 10.1815L3.81844 9.121L9.12169 3.81775L10.1822 4.87825L4.87969 10.1808L4.87894 10.1815ZM10.7132 8.59075L9.65194 7.53025L11.2427 5.9395C11.8189 5.37275 12.0468 4.5405 11.8399 3.75924C11.6329 2.97797 11.0228 2.36774 10.2416 2.16058C9.46038 1.95343 8.62808 2.18119 8.06119 2.75725L6.46969 4.348L5.40919 3.2875L7.00069 1.696C8.46701 0.242475 10.8324 0.247654 12.2924 1.70759C13.7523 3.16752 13.7575 5.53294 12.3039 6.99925L10.7132 8.59V8.59075Z" fill="#3F4246"/>
</svg>

'''
'''--- src/assets/images/footer-near-logo.svg ---
<svg width="114" height="30" viewBox="0 0 114 30" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M57.0667 6.26667V23.7667C57.0667 23.9 56.9667 24.0333 56.8 24.0333H54.9667C54.1333 24.0333 53.3333 23.6 52.8667 22.9L44.6 10.1333L44.8667 16.5V23.8C44.8667 23.9333 44.7667 24.0667 44.6 24.0667H42.2C42.0667 24.0667 41.9333 23.9667 41.9333 23.8V6.26667C41.9333 6.13333 42.0333 6 42.2 6H44C44.8333 6 45.6333 6.43333 46.1 7.13333L54.3667 19.8667L54.1 13.5V6.26667C54.1 6.13333 54.2 6 54.3667 6H56.7667C56.9667 6 57.0667 6.1 57.0667 6.26667Z" fill="black"/>
<path d="M81.6667 24H79.1334C78.9667 24 78.8334 23.8333 78.9 23.6667L85.6334 6.23333C85.7 6.1 85.8334 6 85.9667 6H89.1667C89.3334 6 89.4667 6.1 89.5 6.23333L96.2667 23.6667C96.3334 23.8333 96.2 24 96.0334 24H93.5C93.4 24 93.3 23.9333 93.2667 23.8333L87.8334 9.5C87.7667 9.3 87.4334 9.3 87.3667 9.5L81.9334 23.8333C81.8667 23.9333 81.7667 24 81.6667 24Z" fill="black"/>
<path d="M113.933 23.6L108.867 17.1333C111.733 16.6 113.4 14.6667 113.4 11.7C113.4 8.3 111.2 6 107.267 6H100.2C100 6 99.8334 6.16667 99.8334 6.36667C99.8334 7.7 100.9 8.76667 102.233 8.76667H107C109.367 8.76667 110.5 9.96667 110.5 11.7333C110.5 13.5 109.4 14.7 107 14.7H100.267C100.067 14.7 99.9 14.8667 99.9 15.0667V23.7333C99.9 23.8667 100 24 100.167 24H102.567C102.7 24 102.833 23.9 102.833 23.7333V17.3H105.6L110 23.0333C110.467 23.6667 111.2 24 112 24H113.833C113.967 24 114.067 23.7667 113.933 23.6Z" fill="black"/>
<path d="M74.0667 6H62.9C62.7 6 62.5667 6.13333 62.5667 6.33333C62.5667 7.66667 63.6667 8.76667 65 8.76667H74.0667C74.2 8.76667 74.3333 8.66667 74.3333 8.5V6.23333C74.3 6.1 74.2 6 74.0667 6ZM74.0667 21.2333H65.7333C65.6 21.2333 65.4667 21.1333 65.4667 20.9667V16.4667C65.4667 16.3333 65.5667 16.2 65.7333 16.2H73.4333C73.5667 16.2 73.7 16.1 73.7 15.9333V13.6667C73.7 13.5333 73.6 13.4 73.4333 13.4H62.9333C62.7333 13.4 62.5667 13.5667 62.5667 13.7667V23.6C62.5667 23.8 62.7333 23.9667 62.9333 23.9667H74.0667C74.2 23.9667 74.3333 23.8667 74.3333 23.7V21.4333C74.3 21.3333 74.2 21.2333 74.0667 21.2333Z" fill="black"/>
<path d="M24.0667 1.53333L17.8 10.8333C17.3667 11.4667 18.2 12.2333 18.8 11.7L24.9667 6.33333C25.1333 6.2 25.3667 6.3 25.3667 6.53333V23.3C25.3667 23.5333 25.0667 23.6333 24.9333 23.4667L6.26667 1.13333C5.66667 0.4 4.8 0 3.83333 0H3.16667C1.43333 0 0 1.43333 0 3.2V26.8C0 28.5667 1.43333 30 3.2 30C4.3 30 5.33333 29.4333 5.93333 28.4667L12.2 19.1667C12.6333 18.5333 11.8 17.7667 11.2 18.3L5.03333 23.6333C4.86667 23.7667 4.63333 23.6667 4.63333 23.4333V6.7C4.63333 6.46667 4.93333 6.36667 5.06667 6.53333L23.7333 28.8667C24.3333 29.6 25.2333 30 26.1667 30H26.8333C28.6 30 30.0333 28.5667 30.0333 26.8V3.2C30 1.43333 28.5667 0 26.8 0C25.7 0 24.6667 0.566667 24.0667 1.53333Z" fill="black"/>
</svg>

'''
'''--- src/assets/images/hero-cloud1.svg ---
<svg width="330" height="261" viewBox="0 0 330 261" fill="none" xmlns="http://www.w3.org/2000/svg">
<circle cx="225.864" cy="130.604" r="24.1358" transform="rotate(180 225.864 130.604)" fill="white"/>
<circle cx="194.921" cy="157.215" r="24.1358" transform="rotate(180 194.921 157.215)" fill="white"/>
<g filter="url(#filter0_f)">
<ellipse cx="165.163" cy="130.421" rx="64.9785" ry="28.9318" transform="rotate(9.05964 165.163 130.421)" fill="url(#paint0_linear)"/>
</g>
<circle cx="110.136" cy="130.604" r="24.1358" transform="rotate(180 110.136 130.604)" fill="white"/>
<circle cx="142.936" cy="146.075" r="39.6075" transform="rotate(180 142.936 146.075)" fill="white"/>
<circle cx="182.543" cy="117.608" r="39.6075" transform="rotate(180 182.543 117.608)" fill="white"/>
<defs>
<filter id="filter0_f" x="0.831078" y="0.0649948" width="328.664" height="260.712" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
<feFlood flood-opacity="0" result="BackgroundImageFix"/>
<feBlend mode="normal" in="SourceGraphic" in2="BackgroundImageFix" result="shape"/>
<feGaussianBlur stdDeviation="50" result="effect1_foregroundBlur"/>
</filter>
<linearGradient id="paint0_linear" x1="216.622" y1="141.208" x2="112.297" y2="111.171" gradientUnits="userSpaceOnUse">
<stop stop-color="#E2F5FF"/>
<stop offset="1" stop-color="#D7DBFF"/>
</linearGradient>
</defs>
</svg>

'''
'''--- src/assets/images/hero-cloud2.svg ---
<svg width="311" height="253" viewBox="0 0 311 253" fill="none" xmlns="http://www.w3.org/2000/svg">
<g opacity="0.5">
<circle r="20.6038" transform="matrix(-1 -8.74228e-08 -8.74228e-08 1 207.396 126.019)" fill="white"/>
<circle r="20.6038" transform="matrix(-1 -8.74228e-08 -8.74228e-08 1 180.981 103.302)" fill="white"/>
<g filter="url(#filter0_f)">
<ellipse rx="55.4695" ry="24.6979" transform="matrix(0.987525 -0.157462 -0.157462 -0.987525 155.578 126.175)" fill="url(#paint0_linear)"/>
</g>
<circle r="20.6038" transform="matrix(-1 -8.74228e-08 -8.74228e-08 1 108.604 126.019)" fill="white"/>
<circle r="33.8113" transform="matrix(-1 -8.74228e-08 -8.74228e-08 1 136.604 112.811)" fill="white"/>
<circle r="33.8113" transform="matrix(-1 -8.74228e-08 -8.74228e-08 1 170.415 137.113)" fill="white"/>
</g>
<defs>
<filter id="filter0_f" x="0.660736" y="0.261322" width="309.835" height="251.827" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
<feFlood flood-opacity="0" result="BackgroundImageFix"/>
<feBlend mode="normal" in="SourceGraphic" in2="BackgroundImageFix" result="shape"/>
<feGaussianBlur stdDeviation="50" result="effect1_foregroundBlur"/>
</filter>
<linearGradient id="paint0_linear" x1="99.3973" y1="33.9066" x2="10.3394" y2="8.26463" gradientUnits="userSpaceOnUse">
<stop stop-color="#E2F5FF"/>
<stop offset="1" stop-color="#D7DBFF"/>
</linearGradient>
</defs>
</svg>

'''
'''--- src/assets/images/hero-cloud3.svg ---
<svg width="311" height="253" viewBox="0 0 311 253" fill="none" xmlns="http://www.w3.org/2000/svg">
<circle cx="207.396" cy="126.906" r="20.6038" transform="rotate(180 207.396 126.906)" fill="white"/>
<circle cx="180.981" cy="149.623" r="20.6038" transform="rotate(180 180.981 149.623)" fill="white"/>
<g filter="url(#filter0_f)">
<ellipse cx="155.578" cy="126.75" rx="55.4695" ry="24.6979" transform="rotate(9.05964 155.578 126.75)" fill="url(#paint0_linear)"/>
</g>
<circle cx="108.604" cy="126.906" r="20.6038" transform="rotate(180 108.604 126.906)" fill="white"/>
<circle cx="136.604" cy="140.113" r="33.8113" transform="rotate(180 136.604 140.113)" fill="white"/>
<circle cx="170.415" cy="115.811" r="33.8113" transform="rotate(180 170.415 115.811)" fill="white"/>
<defs>
<filter id="filter0_f" x="0.660675" y="0.835999" width="309.835" height="251.827" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
<feFlood flood-opacity="0" result="BackgroundImageFix"/>
<feBlend mode="normal" in="SourceGraphic" in2="BackgroundImageFix" result="shape"/>
<feGaussianBlur stdDeviation="50" result="effect1_foregroundBlur"/>
</filter>
<linearGradient id="paint0_linear" x1="199.506" y1="135.958" x2="110.448" y2="110.316" gradientUnits="userSpaceOnUse">
<stop stop-color="#E2F5FF"/>
<stop offset="1" stop-color="#D7DBFF"/>
</linearGradient>
</defs>
</svg>

'''
'''--- src/assets/images/hero-ellipse.svg ---
<svg width="1091" height="865" viewBox="0 0 1091 865" fill="none" xmlns="http://www.w3.org/2000/svg">
<g filter="url(#filter0_f)">
<ellipse cx="579.614" cy="432.604" rx="382.613" ry="227.191" transform="rotate(-170.94 579.614 432.604)" fill="url(#paint0_linear)"/>
</g>
<defs>
<filter id="filter0_f" x="0.0582275" y="0.241035" width="1159.11" height="864.726" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
<feFlood flood-opacity="0" result="BackgroundImageFix"/>
<feBlend mode="normal" in="SourceGraphic" in2="BackgroundImageFix" result="shape"/>
<feGaussianBlur stdDeviation="100" result="effect1_foregroundBlur"/>
</filter>
<linearGradient id="paint0_linear" x1="882.616" y1="517.313" x2="247.02" y2="380.088" gradientUnits="userSpaceOnUse">
<stop stop-color="#E2F5FF"/>
<stop offset="1" stop-color="#D7DBFF"/>
</linearGradient>
</defs>
</svg>

'''
'''--- src/assets/images/leran-background-circle.svg ---
<svg width="400" height="400" viewBox="0 0 400 400" fill="none" xmlns="http://www.w3.org/2000/svg">
<circle cx="200" cy="200" r="200" fill="white"/>
</svg>

'''
'''--- src/assets/images/leran-background-ellipse.svg ---
<svg width="869" height="862" viewBox="0 0 869 862" fill="none" xmlns="http://www.w3.org/2000/svg">
<g opacity="0.8" filter="url(#filter0_f)">
<ellipse rx="296.644" ry="245.279" transform="matrix(-0.841235 -0.54067 0.4604 -0.887712 434.741 431.123)" fill="url(#paint0_linear)"/>
</g>
<defs>
<filter id="filter0_f" x="0.764139" y="0.674194" width="867.953" height="860.898" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
<feFlood flood-opacity="0" result="BackgroundImageFix"/>
<feBlend mode="normal" in="SourceGraphic" in2="BackgroundImageFix" result="shape"/>
<feGaussianBlur stdDeviation="80" result="effect1_foregroundBlur"/>
</filter>
<linearGradient id="paint0_linear" x1="555.581" y1="302.12" x2="3.17818" y2="243.054" gradientUnits="userSpaceOnUse">
<stop stop-color="#F7E9EC"/>
<stop offset="1" stop-color="#DEE3F5"/>
</linearGradient>
</defs>
</svg>

'''
'''--- src/assets/images/link-drop-background.svg ---
<svg height="858" viewBox="0 0 1440 858" fill="none" xmlns="http://www.w3.org/2000/svg">
<g filter="url(#filter0_f)">
<ellipse rx="908.824" ry="229.038" transform="matrix(-0.999936 0.0113513 0.067921 -0.997691 586.724 428.825)" fill="url(#paint0_linear)"/>
</g>
<defs>
<filter id="filter0_f" x="-522.177" y="0.0791931" width="2217.8" height="857.492" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
<feFlood flood-opacity="0" result="BackgroundImageFix"/>
<feBlend mode="normal" in="SourceGraphic" in2="BackgroundImageFix" result="shape"/>
<feGaussianBlur stdDeviation="100" result="effect1_foregroundBlur"/>
</filter>
<linearGradient id="paint0_linear" x1="1628.55" y1="314.436" x2="373.268" y2="-324.119" gradientUnits="userSpaceOnUse">
<stop stop-color="#E2F5FF"/>
<stop offset="1" stop-color="#D7DBFF"/>
</linearGradient>
</defs>
</svg>

'''
'''--- src/assets/images/nft-background.svg ---
<svg width="1440" height="1391" viewBox="0 0 1440 1391" fill="none" xmlns="http://www.w3.org/2000/svg">
<g opacity="0.5">
<circle cx="980.505" cy="304.614" r="69.2307" transform="rotate(-155.321 980.505 304.614)" fill="white"/>
<circle cx="867.984" cy="336.914" r="69.2307" transform="rotate(-155.321 867.984 336.914)" fill="white"/>
<g filter="url(#filter0_f_498_277)">
<ellipse cx="822.514" cy="231.439" rx="186.383" ry="82.9873" transform="rotate(33.7388 822.514 231.439)" fill="url(#paint0_linear_498_277)"/>
</g>
<circle cx="678.873" cy="166.012" r="69.2307" transform="rotate(-155.321 678.873 166.012)" fill="white"/>
<circle cx="745.833" cy="245.62" r="113.609" transform="rotate(-155.321 745.833 245.62)" fill="white"/>
<circle cx="883.159" cy="218.858" r="113.609" transform="rotate(-155.321 883.159 218.858)" fill="white"/>
</g>
<circle cx="456.506" cy="261.558" r="76.8793" transform="rotate(180 456.506 261.558)" fill="white"/>
<circle cx="357.943" cy="346.322" r="76.8793" transform="rotate(180 357.943 346.322)" fill="white"/>
<g filter="url(#filter1_f_498_277)">
<ellipse cx="263.157" cy="260.975" rx="206.974" ry="92.1557" transform="rotate(9.05964 263.157 260.975)" fill="url(#paint1_linear_498_277)"/>
</g>
<circle cx="87.8793" cy="261.558" r="76.8793" transform="rotate(180 87.8793 261.558)" fill="white"/>
<circle cx="192.356" cy="310.839" r="126.161" transform="rotate(180 192.356 310.839)" fill="white"/>
<circle cx="318.517" cy="220.161" r="126.161" transform="rotate(180 318.517 220.161)" fill="white"/>
<circle cx="1281.44" cy="806.368" r="70.8276" transform="rotate(180 1281.44 806.368)" fill="white"/>
<circle cx="1190.63" cy="884.46" r="70.8276" transform="rotate(180 1190.63 884.46)" fill="white"/>
<g filter="url(#filter2_f_498_277)">
<ellipse cx="1103.31" cy="805.831" rx="190.682" ry="84.9014" transform="rotate(9.05964 1103.31 805.831)" fill="url(#paint2_linear_498_277)"/>
</g>
<circle cx="941.828" cy="806.368" r="70.8276" transform="rotate(180 941.828 806.368)" fill="white"/>
<circle cx="1038.08" cy="851.77" r="116.23" transform="rotate(180 1038.08 851.77)" fill="white"/>
<circle cx="1154.31" cy="768.23" r="116.23" transform="rotate(180 1154.31 768.23)" fill="white"/>
<circle r="70.8276" transform="matrix(1 8.74228e-08 8.74228e-08 -1 1020.83 228.368)" fill="white"/>
<circle r="70.8276" transform="matrix(1 8.74228e-08 8.74228e-08 -1 1111.63 306.46)" fill="white"/>
<g filter="url(#filter3_f_498_277)">
<ellipse rx="190.682" ry="84.9014" transform="matrix(-0.987525 0.157462 0.157462 0.987525 1198.96 227.831)" fill="url(#paint3_linear_498_277)"/>
</g>
<circle r="70.8276" transform="matrix(1 8.74228e-08 8.74228e-08 -1 1360.44 228.368)" fill="white"/>
<circle r="116.23" transform="matrix(1 8.74228e-08 8.74228e-08 -1 1264.18 273.77)" fill="white"/>
<circle r="116.23" transform="matrix(1 8.74228e-08 8.74228e-08 -1 1147.95 190.23)" fill="white"/>
<circle r="70.8276" transform="matrix(1 8.74228e-08 8.74228e-08 -1 141.828 670.368)" fill="white"/>
<circle r="70.8276" transform="matrix(1 8.74228e-08 8.74228e-08 -1 232.632 748.46)" fill="white"/>
<g filter="url(#filter4_f_498_277)">
<ellipse rx="190.682" ry="84.9014" transform="matrix(-0.987525 0.157462 0.157462 0.987525 319.957 669.831)" fill="url(#paint4_linear_498_277)"/>
</g>
<circle r="70.8276" transform="matrix(1 8.74228e-08 8.74228e-08 -1 481.437 670.368)" fill="white"/>
<circle r="116.23" transform="matrix(1 8.74228e-08 8.74228e-08 -1 385.184 715.77)" fill="white"/>
<circle r="116.23" transform="matrix(1 8.74228e-08 8.74228e-08 -1 268.954 632.23)" fill="white"/>
<circle r="70.8276" transform="matrix(1 8.74228e-08 8.74228e-08 -1 597.828 471.368)" fill="white"/>
<circle r="70.8276" transform="matrix(1 8.74228e-08 8.74228e-08 -1 688.632 549.46)" fill="white"/>
<g filter="url(#filter5_f_498_277)">
<ellipse rx="190.682" ry="84.9014" transform="matrix(-0.987525 0.157462 0.157462 0.987525 775.957 470.831)" fill="url(#paint5_linear_498_277)"/>
</g>
<circle r="70.8276" transform="matrix(1 8.74228e-08 8.74228e-08 -1 937.437 471.368)" fill="white"/>
<circle r="116.23" transform="matrix(1 8.74228e-08 8.74228e-08 -1 841.184 516.77)" fill="white"/>
<circle r="116.23" transform="matrix(1 8.74228e-08 8.74228e-08 -1 724.954 433.23)" fill="white"/>
<circle r="70.8276" transform="matrix(1 8.74228e-08 8.74228e-08 -1 50.8276 1202.37)" fill="white"/>
<circle r="70.8276" transform="matrix(1 8.74228e-08 8.74228e-08 -1 141.632 1280.46)" fill="white"/>
<g filter="url(#filter6_f_498_277)">
<ellipse rx="190.682" ry="84.9014" transform="matrix(-0.987525 0.157462 0.157462 0.987525 228.957 1201.83)" fill="url(#paint6_linear_498_277)"/>
</g>
<circle r="70.8276" transform="matrix(1 8.74228e-08 8.74228e-08 -1 390.437 1202.37)" fill="white"/>
<circle r="116.23" transform="matrix(1 8.74228e-08 8.74228e-08 -1 294.184 1247.77)" fill="white"/>
<circle r="116.23" transform="matrix(1 8.74228e-08 8.74228e-08 -1 177.954 1164.23)" fill="white"/>
<defs>
<filter id="filter0_f_498_277" x="560.772" y="7.013" width="523.485" height="448.852" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
<feFlood flood-opacity="0" result="BackgroundImageFix"/>
<feBlend mode="normal" in="SourceGraphic" in2="BackgroundImageFix" result="shape"/>
<feGaussianBlur stdDeviation="50" result="effect1_foregroundBlur_498_277"/>
</filter>
<filter id="filter1_f_498_277" x="-41.7589" y="64.2832" width="609.831" height="393.384" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
<feFlood flood-opacity="0" result="BackgroundImageFix"/>
<feBlend mode="normal" in="SourceGraphic" in2="BackgroundImageFix" result="shape"/>
<feGaussianBlur stdDeviation="50" result="effect1_foregroundBlur_498_277"/>
</filter>
<filter id="filter2_f_498_277" x="814.522" y="616.751" width="577.57" height="378.161" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
<feFlood flood-opacity="0" result="BackgroundImageFix"/>
<feBlend mode="normal" in="SourceGraphic" in2="BackgroundImageFix" result="shape"/>
<feGaussianBlur stdDeviation="50" result="effect1_foregroundBlur_498_277"/>
</filter>
<filter id="filter3_f_498_277" x="910.172" y="38.7505" width="577.57" height="378.161" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
<feFlood flood-opacity="0" result="BackgroundImageFix"/>
<feBlend mode="normal" in="SourceGraphic" in2="BackgroundImageFix" result="shape"/>
<feGaussianBlur stdDeviation="50" result="effect1_foregroundBlur_498_277"/>
</filter>
<filter id="filter4_f_498_277" x="31.1717" y="480.751" width="577.57" height="378.161" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
<feFlood flood-opacity="0" result="BackgroundImageFix"/>
<feBlend mode="normal" in="SourceGraphic" in2="BackgroundImageFix" result="shape"/>
<feGaussianBlur stdDeviation="50" result="effect1_foregroundBlur_498_277"/>
</filter>
<filter id="filter5_f_498_277" x="487.172" y="281.751" width="577.57" height="378.161" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
<feFlood flood-opacity="0" result="BackgroundImageFix"/>
<feBlend mode="normal" in="SourceGraphic" in2="BackgroundImageFix" result="shape"/>
<feGaussianBlur stdDeviation="50" result="effect1_foregroundBlur_498_277"/>
</filter>
<filter id="filter6_f_498_277" x="-59.8283" y="1012.75" width="577.57" height="378.161" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
<feFlood flood-opacity="0" result="BackgroundImageFix"/>
<feBlend mode="normal" in="SourceGraphic" in2="BackgroundImageFix" result="shape"/>
<feGaussianBlur stdDeviation="50" result="effect1_foregroundBlur_498_277"/>
</filter>
<linearGradient id="paint0_linear_498_277" x1="970.116" y1="262.381" x2="670.873" y2="176.221" gradientUnits="userSpaceOnUse">
<stop stop-color="#E2F5FF"/>
<stop offset="1" stop-color="#D7DBFF"/>
</linearGradient>
<linearGradient id="paint1_linear_498_277" x1="427.066" y1="295.336" x2="94.7619" y2="199.658" gradientUnits="userSpaceOnUse">
<stop stop-color="#E2F5FF"/>
<stop offset="1" stop-color="#D7DBFF"/>
</linearGradient>
<linearGradient id="paint2_linear_498_277" x1="1254.31" y1="837.487" x2="948.168" y2="749.34" gradientUnits="userSpaceOnUse">
<stop stop-color="#E2F5FF"/>
<stop offset="1" stop-color="#D7DBFF"/>
</linearGradient>
<linearGradient id="paint3_linear_498_277" x1="341.688" y1="116.557" x2="35.5427" y2="28.4105" gradientUnits="userSpaceOnUse">
<stop stop-color="#E2F5FF"/>
<stop offset="1" stop-color="#D7DBFF"/>
</linearGradient>
<linearGradient id="paint4_linear_498_277" x1="341.688" y1="116.557" x2="35.5427" y2="28.4105" gradientUnits="userSpaceOnUse">
<stop stop-color="#E2F5FF"/>
<stop offset="1" stop-color="#D7DBFF"/>
</linearGradient>
<linearGradient id="paint5_linear_498_277" x1="341.688" y1="116.557" x2="35.5427" y2="28.4105" gradientUnits="userSpaceOnUse">
<stop stop-color="#E2F5FF"/>
<stop offset="1" stop-color="#D7DBFF"/>
</linearGradient>
<linearGradient id="paint6_linear_498_277" x1="341.688" y1="116.557" x2="35.5427" y2="28.4105" gradientUnits="userSpaceOnUse">
<stop stop-color="#E2F5FF"/>
<stop offset="1" stop-color="#D7DBFF"/>
</linearGradient>
</defs>
</svg>

'''
'''--- src/assets/images/rarity-background-gradient.svg ---
<svg width="1047" height="740" viewBox="0 0 1047 740" fill="none" xmlns="http://www.w3.org/2000/svg">
<g filter="url(#filter0_f)">
<ellipse rx="396.087" ry="207.014" transform="matrix(0.995463 0.0951487 0.115021 0.993363 555.521 369.953)" fill="url(#paint0_linear)"/>
</g>
<defs>
<filter id="filter0_f" x="0.499817" y="0.851318" width="1110.04" height="738.203" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
<feFlood flood-opacity="0" result="BackgroundImageFix"/>
<feBlend mode="normal" in="SourceGraphic" in2="BackgroundImageFix" result="shape"/>
<feGaussianBlur stdDeviation="80" result="effect1_foregroundBlur"/>
</filter>
<linearGradient id="paint0_linear" x1="124.851" y1="184.848" x2="519.246" y2="189.124" gradientUnits="userSpaceOnUse">
<stop stop-color="#E1D8FF"/>
<stop offset="1" stop-color="#FFECE6"/>
</linearGradient>
</defs>
</svg>

'''
'''--- src/assets/images/rarity-common.svg ---
<svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M15.75 2.25V15.75H2.25V2.25H15.75ZM18 0H0V18H18V0Z" fill="#F5B842"/>
<g opacity="0.5">
<path opacity="0.5" d="M13.5 4.5H4.5V13.5H13.5V4.5Z" fill="#F5B842"/>
</g>
</svg>

'''
'''--- src/assets/images/rarity-rare.svg ---
<svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M9 5.025L14.35 15.75H3.625L9 5.025ZM9 0L0 18H18L9 0Z" fill="#D05555"/>
<g opacity="0.5">
<path opacity="0.5" d="M11.775 10.2L9.00001 15.75L6.22501 10.2H11.775Z" fill="#D05555"/>
</g>
</svg>

'''
'''--- src/assets/images/rarity-super-rare.svg ---
<svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M14.9 3.1L13.55 8.45L13.425 9L13.55 9.55L14.9 14.9L9.55 13.55L9 13.425L8.45 13.55L3.1 14.9L4.45 9.55L4.575 9L4.45 8.45L3.1 3.1L8.45 4.45L9 4.575L9.55 4.45L14.9 3.1ZM18 0L9 2.25L0 0L2.25 9L0 18L9 15.75L18 18L15.75 9L18 0Z" fill="#6B6EF9"/>
<g opacity="0.5">
<path opacity="0.5" d="M9 4.5L7.3 7.325L4.5 9L7.3 10.675L9 13.5L10.7 10.675L13.5 9L10.7 7.325L9 4.5Z" fill="#6B6EF9"/>
</g>
</svg>

'''
'''--- src/assets/images/rarity-uncommon.svg ---
<svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M9 2.25C12.725 2.25 15.75 5.275 15.75 9C15.75 12.725 12.725 15.75 9 15.75C5.275 15.75 2.25 12.725 2.25 9C2.25 5.275 5.275 2.25 9 2.25ZM9 0C4.025 0 0 4.025 0 9C0 13.975 4.025 18 9 18C13.975 18 18 13.975 18 9C18 4.025 13.975 0 9 0Z" fill="#A6D836"/>
<g opacity="0.5">
<path opacity="0.5" d="M9 13.5C11.4853 13.5 13.5 11.4853 13.5 9C13.5 6.51472 11.4853 4.5 9 4.5C6.51472 4.5 4.5 6.51472 4.5 9C4.5 11.4853 6.51472 13.5 9 13.5Z" fill="#A6D836"/>
</g>
</svg>

'''
'''--- src/assets/images/rarity-very-rare.svg ---
<svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M9 3.175L14.825 9L9 14.825L3.175 9L9 3.175ZM9 0L0 9L9 18L18 9L9 0Z" fill="#38D2DC"/>
<g opacity="0.5">
<path opacity="0.5" d="M8.98164 6.75545L6.7366 9.00049L8.98165 11.2455L11.2267 9.00049L8.98164 6.75545Z" fill="#38D2DC"/>
</g>
</svg>

'''
'''--- src/assets/images/share-social/discord.svg ---
<svg width="31" height="30" viewBox="0 0 31 30" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M12.2923 14.25C11.4173 14.25 10.709 15.0417 10.709 16C10.709 16.9583 11.4173 17.75 12.2923 17.75C13.1673 17.75 13.8756 16.9583 13.8756 16C13.8756 15.0417 13.1673 14.25 12.2923 14.25ZM18.0007 14.25C17.1257 14.25 16.4173 15.0417 16.4173 16C16.4173 16.9583 17.1257 17.75 18.0007 17.75C18.8757 17.75 19.584 16.9583 19.584 16C19.584 15.0417 18.9173 14.25 18.0007 14.25ZM0.208984 15C0.208984 23.2917 6.91732 30 15.209 30C23.5007 30 30.209 23.2917 30.209 15C30.209 6.70833 23.5007 0 15.209 0C6.91732 0 0.208984 6.70833 0.208984 15ZM19.584 21.5833C19.584 21.5833 19.0007 20.9167 18.5423 20.2917C20.584 19.7083 21.3756 18.4167 21.3756 18.4167C20.7506 18.8333 20.1257 19.125 19.584 19.3333C18.7923 19.6667 18.0423 19.875 17.2923 20C15.7923 20.2917 14.4173 20.2083 13.209 20C12.334 19.8333 11.5423 19.5833 10.9173 19.3333C10.5423 19.2083 10.1673 19 9.75065 18.7917C9.70898 18.75 9.66732 18.75 9.62565 18.7083C9.58399 18.7083 9.58398 18.6667 9.54231 18.6667C9.25065 18.5 9.08398 18.4167 9.08398 18.4167C9.08398 18.4167 9.83398 19.6667 11.834 20.25C11.3756 20.8333 10.7923 21.5417 10.7923 21.5417C7.33398 21.4167 6.00065 19.1667 6.00065 19.1667C6.00065 14.125 8.25065 10 8.25065 10C10.5006 8.29167 12.6673 8.33333 12.6673 8.33333L12.834 8.54167C10.0006 9.375 8.70898 10.5833 8.70898 10.5833C8.70898 10.5833 9.04232 10.375 9.62565 10.125C11.2923 9.375 12.6257 9.16667 13.209 9.125C13.2923 9.125 13.3756 9.08333 13.459 9.08333C14.4173 8.95833 15.5006 8.91667 16.6256 9.04167C18.1256 9.20833 19.709 9.66667 21.334 10.5417C21.334 10.5417 20.084 9.375 17.4173 8.54167L17.6256 8.29167C17.6256 8.29167 19.7923 8.25 22.0423 9.95833C22.0423 9.95833 24.2923 14.0417 24.2923 19.125C24.3756 19.2083 23.0423 21.5 19.584 21.5833Z" fill="#CB015B"/>
</svg>

'''
'''--- src/assets/images/share-social/email.svg ---
<svg width="30" height="30" viewBox="0 0 30 30" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M15 0C6.70833 0 0 6.70833 0 15C0 23.2917 6.70833 30 15 30C23.2917 30 30 23.2917 30 15C30 6.70833 23.2917 0 15 0ZM22.7917 9L14.8333 15.2917L6.875 9H22.7917ZM5.83333 9.875L11.4167 14.3333L5.83333 19.9167V9.875ZM6.58333 21L12.4583 15.125L14.7917 16.9583L14.8333 17V16.9583L17.2917 15L23.25 20.9583H6.58333V21ZM24.1667 20.0417L18.3333 14.2083L24.1667 9.58333V20.0417Z" fill="#CB015B"/>
</svg>

'''
'''--- src/assets/images/share-social/facebook.svg ---
<svg width="31" height="30" viewBox="0 0 31 30" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M27.1967 6.10879C27.0712 5.89958 26.9037 5.73222 26.7364 5.52301C26.1088 4.76988 25.4394 4.10042 24.6862 3.4728C24.5189 3.30544 24.3096 3.17992 24.1004 3.01255C21.59 1.12971 18.4519 0 15.1046 0C11.7573 0 8.61926 1.12971 6.1088 3.01255C5.8996 3.13808 5.73222 3.30544 5.52302 3.4728C4.76988 4.10042 4.10041 4.76988 3.4728 5.52301C3.30543 5.69038 3.17992 5.89958 3.01256 6.10879C1.12971 8.61925 0 11.7573 0 15.1046C0 22.5941 5.48117 28.8285 12.6778 29.9582V18.8703H10.4184V15.0628H12.6778C12.6778 15.0628 12.6778 12.5105 12.6778 11.9665C12.6778 11.3808 12.5523 7.57322 17.4477 7.57322H20.8786V11.5481H18.3682C17.8661 11.5481 17.364 12.0921 17.364 12.4686C17.364 12.8452 17.364 15.0628 17.364 15.0628H20.8786C20.7531 17.0711 20.4602 18.8703 20.4602 18.8703H17.364V30C24.6444 28.9121 30.2092 22.6778 30.2092 15.1046C30.2092 11.7155 29.0795 8.61925 27.1967 6.10879Z" fill="#CB015B"/>
</svg>

'''
'''--- src/assets/images/share-social/instagram.svg ---
<svg width="30" height="30" viewBox="0 0 30 30" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M14.7917 10C12.0417 10 9.79167 12.25 9.79167 15C9.79167 17.75 12.0417 20 14.7917 20C17.5417 20 19.7917 17.75 19.7917 15C19.7917 12.25 17.5417 10 14.7917 10ZM15 0C6.70833 0 0 6.70833 0 15C0 23.2917 6.70833 30 15 30C23.2917 30 30 23.2917 30 15C30 6.70833 23.2917 0 15 0ZM14.7917 22.7083C10.5417 22.7083 7.08333 19.25 7.08333 15C7.08333 10.75 10.5417 7.29167 14.7917 7.29167C19.0417 7.29167 22.5 10.75 22.5 15C22.5 19.25 19.0417 22.7083 14.7917 22.7083ZM22.7917 8.79167C21.7917 8.79167 21 8 21 7C21 6 21.7917 5.20833 22.7917 5.20833C23.7917 5.20833 24.5833 6 24.5833 7C24.5833 8 23.7917 8.79167 22.7917 8.79167Z" fill="#CB015B"/>
</svg>

'''
'''--- src/assets/images/share-social/linkedin.svg ---
<svg width="30" height="30" viewBox="0 0 30 30" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M0 15C0 23.2917 6.70833 30 15 30C23.2917 30 30 23.2917 30 15C30 6.70833 23.2917 0 15 0C6.70833 0 0 6.70833 0 15ZM11.7917 21.6667H8.50001V11.0833H11.7917V21.6667ZM10.125 9.79167C9.08335 9.79167 8.41665 9.04167 8.41665 8.16667C8.41665 7.25 9.12501 6.54167 10.1667 6.54167C11.2083 6.54167 11.875 7.25 11.9167 8.16667C11.9167 9.08333 11.25 9.79167 10.125 9.79167ZM23.375 21.6667H20.0833V15.7917C20.0833 14.4167 19.625 13.5 18.4166 13.5C17.5 13.5 16.9583 14.125 16.75 14.75C16.6666 14.9583 16.625 15.25 16.625 15.5833V21.6667H13.3333V14.4583C13.3333 13.125 13.2917 12.0417 13.25 11.0833H16.125L16.2917 12.5417H16.375C16.7917 11.8333 17.875 10.8333 19.625 10.8333C21.7917 10.8333 23.4166 12.2917 23.4166 15.4167V21.6667H23.375Z" fill="#CB015B"/>
</svg>

'''
'''--- src/assets/images/share-social/telegram.svg ---
<svg width="31" height="30" viewBox="0 0 31 30" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M0.208984 15C0.208984 23.2917 6.91732 30 15.209 30C23.5007 30 30.209 23.2917 30.209 15C30.209 6.70833 23.5007 0 15.209 0C6.91732 0 0.208984 6.70833 0.208984 15ZM24.334 8.54167C24.334 8.54167 21.7507 21.75 21.709 22.0417C21.6257 22.375 21.5007 22.6667 21.2507 22.9167C21.0007 23.1667 20.6256 23.4167 20.1673 23.4167C19.3756 23.4167 19.0007 22.9167 18.959 22.875L16.1673 20.25L13.8756 22.25C13.8756 22.25 13.584 22.5 13.1673 22.5C13.0423 22.5 12.959 22.4583 12.834 22.4583C12.7923 22.4583 12.7923 22.4583 12.7507 22.4583C12.7507 22.4583 12.7507 22.4583 12.709 22.4583C12.6673 22.4583 12.6257 22.4167 12.584 22.375C12.459 22.2917 12.3757 22.2083 12.2923 22.125C12.1257 21.9167 12.0007 21.6667 11.8757 21.25C11.6673 20.625 10.834 18.0417 10.6673 17.5833C10.2507 17.4167 7.91732 16.4583 7.16732 16.1667C6.95899 16.0833 6.70899 15.9583 6.50065 15.75C6.29232 15.5417 6.08399 15.1667 6.08399 14.7917C6.08399 14.3333 6.37565 13.9167 6.62565 13.7083C6.87565 13.5 7.12565 13.4167 7.20898 13.375C9.08398 12.5833 12.709 11 15.959 9.58333C17.584 8.875 19.084 8.25 20.2507 7.75C21.3757 7.25 22.1257 6.95833 22.334 6.875C22.5423 6.79167 22.7507 6.70833 23.0007 6.70833C23.2507 6.70833 23.5007 6.75 23.7923 6.91667C24.084 7.08333 24.2923 7.375 24.3757 7.70833C24.4173 7.875 24.3756 8.20833 24.334 8.54167ZM16.5007 10.875C13.2507 12.25 9.62565 13.8333 7.75065 14.6667C8.54232 15 10.9173 15.9583 11.2923 16.125C13.459 14.875 18.2506 12.0833 19.334 11.375C19.4173 11.3333 19.584 11.2083 19.709 11.2083C19.834 11.2083 19.8757 11.2917 19.8757 11.4167C19.8757 11.5 19.834 11.5833 19.584 11.8333C19.2923 12.125 14.2923 17.3333 14.2923 17.3333L13.5006 20.5417L16.209 18.2083L20.0007 21.7917C20.0007 21.7917 20.084 21.8333 20.1256 21.875C20.1673 21.8333 20.209 21.75 20.1673 21.7917C20.2506 21.2917 22.7923 8.29167 22.7923 8.29167C22.7923 8.25 22.7923 8.29167 22.7923 8.25C22.709 8.29167 21.9173 8.625 20.7923 9.125C19.6673 9.54167 18.1257 10.2083 16.5007 10.875Z" fill="#CB015B"/>
</svg>

'''
'''--- src/assets/images/share-social/twitter.svg ---
<svg width="30" height="30" viewBox="0 0 30 30" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M0 15C0 23.2917 6.70833 30 15 30C23.2917 30 30 23.2917 30 15C30 6.70833 23.2917 0 15 0C6.70833 0 0 6.70833 0 15ZM22.3333 11.25C22.3333 11.4167 22.3333 11.5833 22.3333 11.75C22.3333 16.75 18.5417 22.5417 11.5417 22.5417C9.41667 22.5417 7.41667 21.9167 5.75 20.8333C6.08333 20.8333 6.375 20.8333 6.66667 20.8333C8.45833 20.8333 10.0833 20.2083 11.375 19.2083C9.70833 19.1667 8.33333 18.0833 7.83333 16.5833C8.08333 16.625 8.29167 16.6667 8.54167 16.6667C8.875 16.6667 9.20833 16.625 9.54167 16.5417C7.79167 16.2083 6.5 14.6667 6.5 12.8333V12.7917C7 13.0833 7.58333 13.25 8.20833 13.25C7.20833 12.5833 6.54167 11.4167 6.54167 10.0833C6.54167 9.375 6.70833 8.75 7.04167 8.16667C8.91667 10.4583 11.7083 11.9583 14.8333 12.125C14.75 11.8333 14.75 11.5417 14.75 11.25C14.75 9.16667 16.4583 7.45833 18.5417 7.45833C19.625 7.45833 20.625 7.91667 21.2917 8.66667C22.1667 8.5 22.9583 8.16667 23.7083 7.75C23.4167 8.625 22.8333 9.375 22.0417 9.83333C22.7917 9.75 23.5417 9.54167 24.2083 9.25C23.7083 10.0417 23.0833 10.7083 22.3333 11.25Z" fill="#CB015B"/>
</svg>

'''
'''--- src/assets/images/share-social/wechat.svg ---
<svg width="31" height="30" viewBox="0 0 31 30" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M21.584 15.8333C21.1673 15.8333 20.834 16.1667 20.834 16.5833C20.834 17.0417 21.1673 17.375 21.584 17.375C22.0006 17.375 22.334 17.0417 22.334 16.625C22.3756 16.2083 22.0006 15.875 21.584 15.8333ZM16.7507 15.8333C16.334 15.8333 15.959 16.2083 15.959 16.625C15.959 17.0417 16.334 17.375 16.7507 17.375C17.1673 17.375 17.5006 17.0417 17.5423 16.625C17.5423 16.2083 17.209 15.8333 16.7507 15.8333ZM9.08398 9.875C8.54231 9.875 8.12565 10.25 8.12565 10.7917C8.12565 11.3333 8.50066 11.75 9.04232 11.75C9.58399 11.75 10.0006 11.375 10.0423 10.8333C10.0006 10.3333 9.58398 9.91667 9.08398 9.875ZM0.208984 15C0.208984 23.2917 6.91732 30 15.209 30C23.5007 30 30.209 23.2917 30.209 15C30.209 6.70833 23.5007 0 15.209 0C6.91732 0 0.208984 6.70833 0.208984 15ZM9.95899 18.9583C9.70899 18.9167 9.37565 18.9583 9.16732 19.0833C8.45898 19.5 7.75064 19.9583 6.91731 20.4583C7.08397 19.7917 7.16731 19.1667 7.33397 18.625C7.45897 18.2083 7.41731 17.9583 7.00065 17.7083C4.50065 15.9583 3.45899 13.2917 4.25066 10.5833C4.95899 8.08333 6.75064 6.54167 9.20897 5.75C12.5423 4.66667 16.2507 5.79167 18.2923 8.41667C19.0007 9.375 19.459 10.4167 19.584 11.7083C17.5007 11.8333 15.709 12.4583 14.209 13.875C12.709 15.3333 12.0423 17.0833 12.2507 19.25C11.4173 19.1667 10.6673 19.0417 9.95899 18.9583ZM24.584 22.375C23.959 22.9583 23.709 23.4167 24.1257 24.1667C24.209 24.2917 24.209 24.5 24.2507 24.6667C23.584 24.375 23.0006 23.9167 22.334 23.875C21.709 23.7917 21.0006 24.1667 20.334 24.25C18.2923 24.4583 16.459 23.875 14.959 22.5C12.084 19.8333 12.5007 15.7917 15.834 13.5833C18.7923 11.6667 23.1257 12.2917 25.209 14.9583C27.0007 17.3333 26.7923 20.4167 24.584 22.375ZM15.0007 11.75C15.5423 11.75 15.9173 11.3333 15.9173 10.7917C15.9173 10.2917 15.5007 9.875 14.959 9.875C14.459 9.875 14.0006 10.3333 14.0006 10.8333C14.084 11.3333 14.5007 11.75 15.0007 11.75Z" fill="#CB015B"/>
</svg>

'''
'''--- src/assets/images/social-face.svg ---
<svg width="24" height="26" viewBox="0 0 24 26" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M15.9223 12.0706C15.9223 12.8456 15.3051 13.4809 14.5234 13.4809C14.252 13.4809 13.9976 13.4016 13.7822 13.2647C13.6276 13.1664 13.493 13.0385 13.3866 12.889C13.2215 12.6576 13.1239 12.3744 13.1239 12.0695C13.1239 11.2945 13.741 10.6592 14.5227 10.6592C15.0137 10.6592 15.4397 10.9097 15.6887 11.2881C15.8366 11.5125 15.9223 11.7818 15.9223 12.0706ZM24 2.61741V25.4118C23.4504 24.9618 23.0162 24.6071 22.6585 24.3149C21.9655 23.7488 21.5592 23.4169 21.1566 23.0806C20.5861 22.6042 20.023 22.1189 18.6621 20.9462C18.362 20.6875 18.023 20.3954 17.6366 20.0626L18.3634 22.4132H2.81143C1.26171 22.4132 0 21.2442 0 19.7958V2.61741C0 1.16894 1.26171 0 2.81143 0H21.1886C22.7383 0 24 1.16894 24 2.61741ZM14.9897 15.5647C16.7718 15.0984 17.4609 14.0695 17.4719 14.0529C16.9097 14.3959 16.3749 14.6373 15.895 14.8024C12.9402 15.9522 9.65206 15.5587 7.33724 14.3577C7.3305 14.3535 7.30587 14.3404 7.26956 14.3211C7.21272 14.2908 7.12725 14.2453 7.03688 14.195C6.94658 14.1447 6.85138 14.0896 6.77496 14.0401C6.77496 14.0401 7.05676 14.4752 7.73944 14.9113C8.10015 15.1417 8.57277 15.3724 9.17486 15.5393L9.17483 15.5393L9.17496 15.5394C8.76353 16.0222 8.2561 16.5939 8.2561 16.5939C6.89751 16.5541 5.91644 16.1619 5.24742 15.7413C4.42387 15.2235 4.07314 14.6626 4.07314 14.6626C4.07314 10.5713 6.048 7.25506 6.048 7.25506C8.02286 5.88282 9.90171 5.92094 9.90171 5.92094L9.90177 5.921L9.90181 5.921L10.039 6.07347C7.59374 6.72793 6.45376 7.71899 6.43241 7.73768C6.44487 7.7314 6.74446 7.58084 7.24114 7.36941C10.4012 6.08339 14.228 6.08369 17.4857 7.73788C17.4857 7.73788 17.418 7.67832 17.28 7.57866C17.0512 7.41343 16.6292 7.13796 16.0023 6.84093C15.4948 6.6005 14.8531 6.34596 14.071 6.1243L14.071 6.12427L14.0709 6.12424L14.2629 5.92094C14.2629 5.92094 15.5032 5.89578 17.0276 6.62238C17.3794 6.79005 17.7463 6.99776 18.1166 7.25506L18.1167 7.25512C18.1167 7.25512 20.0915 10.5714 20.0915 14.6627C20.0915 14.6627 18.9258 16.505 15.895 16.5939L15.8949 16.5939L15.8949 16.5939C15.8949 16.5939 15.4011 16.0475 14.9897 15.5647ZM8.11816 12.0695C8.11816 11.2945 8.73531 10.6592 9.51702 10.6592C10.2987 10.6592 10.9296 11.2945 10.9159 12.0695C10.9159 12.8446 10.2987 13.4799 9.51702 13.4799C8.74902 13.4799 8.11816 12.8446 8.11816 12.0695Z" fill="#262626"/>
</svg>

'''
'''--- src/assets/images/social-twitter.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M21.533 7.1119C21.5482 7.32509 21.5482 7.53832 21.5482 7.75151C21.5482 14.254 16.599 21.7464 7.5533 21.7464C4.76648 21.7464 2.17767 20.9393 0 19.5383C0.395953 19.584 0.776625 19.5992 1.18781 19.5992C3.48727 19.5992 5.60405 18.8226 7.29441 17.4977C5.13197 17.452 3.31978 16.0358 2.69541 14.0865C3 14.1322 3.30455 14.1627 3.62437 14.1627C4.06598 14.1627 4.50764 14.1017 4.91878 13.9952C2.66498 13.5383 0.974578 11.5586 0.974578 9.16775V9.10686C1.62937 9.47234 2.39086 9.70076 3.19791 9.73118C1.87303 8.84792 1.00505 7.34032 1.00505 5.63473C1.00505 4.72104 1.24866 3.88348 1.67508 3.15251C4.09641 6.13728 7.73602 8.08648 11.8172 8.29972C11.7411 7.93423 11.6954 7.55356 11.6954 7.17284C11.6954 4.46215 13.8883 2.25406 16.6141 2.25406C18.0304 2.25406 19.3095 2.84797 20.208 3.80736C21.3197 3.59417 22.3857 3.18298 23.3299 2.61954C22.9643 3.7617 22.1877 4.72109 21.1674 5.33018C22.1573 5.22364 23.1167 4.94947 23.9999 4.56879C23.33 5.54337 22.4924 6.41136 21.533 7.1119Z" fill="#262626"/>
</svg>

'''
'''--- src/components/Buy/BuyMore/index.js ---
export { default } from './BuyMore';

'''
'''--- src/components/Buy/index.js ---
export { default } from './Buy';

'''
'''--- src/components/BuyMoreBtn/index.js ---
export { default } from './BuyMoreBtn';

'''
'''--- src/components/ConnectWalletBtn/index.js ---
export { default } from './ConnectWalletBtn';

'''
'''--- src/components/FAQ/index.js ---
export { default } from './FAQ';

'''
'''--- src/components/Generate/index.js ---
export { default } from './Generate';

'''
'''--- src/components/GenerateCountBtn/index.js ---
export { default } from './GenerateCountBtn';

'''
'''--- src/components/Hero/index.js ---
export { default } from './Hero';

'''
'''--- src/components/Learn/index.js ---
export { default } from './Learn';

'''
'''--- src/components/Loader/Loader.js ---
import React from 'react';

const Loader = () => (
  <div className="lds-ring">
    <div></div>
    <div></div>
    <div></div>
    <div></div>
  </div>
);

export default Loader;

'''
'''--- src/components/Loader/index.js ---
export { default } from './Loader';

'''
'''--- src/components/Navigation/Navigation.js ---
import React from 'react';
import PropTypes from 'prop-types';
import { Link } from 'react-router-dom';

const Navigation = ({ className, signedIn }) => (
  <nav className={`navigation ${className || ''}`}>
    <ul className="navigation__list">
      <li className="navigation__list-item">
        <Link to="/#learn" className="navigation__link">
          Learn
        </Link>
      </li>
      <li className="navigation__list-item">
        <Link to="/#rarity" className="navigation__link">
          Rarity
        </Link>
      </li>
      <li className="navigation__list-item">
        <Link to="/#generate" className="navigation__link">
          Generate
        </Link>
      </li>
      <li className="navigation__list-item">
        <Link to="/#faq" className="navigation__link">
          FAQ
        </Link>
      </li>
      {signedIn && (
        <>
          <li className="navigation__list-item">
            <Link to="/my-nfts" className="navigation__link">
              My NFTs
            </Link>
          </li>
          <li className="navigation__list-item">
            <Link to="/link-drop" className="navigation__link">
              LinkDrop
            </Link>
          </li>
        </>
      )}
    </ul>
  </nav>
);

Navigation.propTypes = {
  className: PropTypes.string,
  signedIn: PropTypes.bool,
};

Navigation.defaultProps = {
  className: '',
  signedIn: false,
};

export default Navigation;

'''
'''--- src/components/Navigation/index.js ---
export { default } from './Navigation';

'''
'''--- src/components/NftItem/NftItem.js ---
/* eslint-disable jsx-a11y/click-events-have-key-events */
/* eslint-disable jsx-a11y/no-noninteractive-element-interactions */
import React, { useState, useEffect } from 'react';
import { ReactSVG } from 'react-svg';
import PropTypes from 'prop-types';
import NftItemInfo from '../NftItemInfo';
import Normies from '../../assets/images/rarity-common.svg';
import Skellies from '../../assets/images/rarity-rare.svg';
import Zombies from '../../assets/images/rarity-uncommon.svg';
import Meerkats from '../../assets/images/rarity-very-rare.svg';
import Glitches from '../../assets/images/rarity-super-rare.svg';
import Reveal from '../../pages/MyNFTS/Reveal';

const rarity = {
  Normies,
  Skellies,
  Zombies,
  Meerkats,
  Glitches,
};

const NftItem = ({ item, onClick, isReveal, urlIpfs }) => {
  const [reveal, setReveal] = useState(isReveal);
  const [info, setInfo] = useState({});

  useEffect(async () => {
    try {
      const response = await fetch(`${urlIpfs}/${item.reference}`);
      const data = await response.json();

      setInfo(data);
    } catch (e) {
      // eslint-disable-next-line
      console.log(e);
    }
  }, []);

  const handleClick = () => {
    setReveal(true);
    onClick({ [item.title]: true });
  };

  return (
    <div className="nft-item">
      {reveal ? (
        <div>
          <img
            className="nft-item__img"
            src={`${urlIpfs}/${item.media}`}
            alt="misfit"
          />

          <div className="nft-item__footer">
            <p className="nft-item__hash"># {item?.title?.padStart(5, '0')}</p>
            <ReactSVG src={rarity[info?.kind] || Normies} />
          </div>

          <NftItemInfo
            className="nft-item__info"
            item={item}
            urlIpfs={urlIpfs}
            info={info}
          />
        </div>
      ) : (
        <Reveal title={item?.title} handleClick={handleClick} />
      )}
    </div>
  );
};

NftItem.propTypes = {
  item: PropTypes.object,
  onClick: PropTypes.func,
  isReveal: PropTypes.bool,
  urlIpfs: PropTypes.string,
};

NftItem.defaultProps = {
  item: {},
  onClick: () => {},
};

export default NftItem;

'''
'''--- src/components/NftItem/index.js ---
export { default } from './NftItem';

'''
'''--- src/components/NftItemInfo/NftItemInfo.js ---
import React, { useEffect, useRef } from 'react';
import PropTypes from 'prop-types';
import { ReactSVG } from 'react-svg';
import rarity from '../../assets/images/rarity-common.svg';

const NftItemInfo = ({ className, item, urlIpfs, info }) => {
  const nftInfo = useRef();

  useEffect(() => {
    const { right } = nftInfo?.current?.getBoundingClientRect();

    if (right > window.innerWidth) {
      const width = window.innerWidth;
      nftInfo.current.style.transform = `translateX(-${right - width + 50}px)`;
    }
  });

  return (
    <div ref={nftInfo} className={`nft-item-info  ${className || ''}`}>
      <div className="nft-item-info__icon-wrapper">
        <div className="nft-item-info__image-wrapper">
          <img
            className="nft-item-info__image"
            src={`${urlIpfs}/${item.media}`}
            alt="misfit"
          />
        </div>
        <p className="nft-item-info__number">
          # {item?.title?.padStart(5, '0')}
        </p>
        <ReactSVG
          className="nft-item-info__rarity"
          src={item.rarity || rarity}
        />
      </div>
      <div className="nft-item-info__stats">
        <p>kind : {info?.kind || 'no data'}</p>
        <p>seed : {info?.seed || 'no data'}</p>
      </div>
    </div>
  );
};

NftItemInfo.propTypes = {
  className: PropTypes.string,
  item: PropTypes.object,
  urlIpfs: PropTypes.string,
  info: PropTypes.object,
};
export default NftItemInfo;

'''
'''--- src/components/NftItemInfo/index.js ---
export { default } from './NftItemInfo';

'''
'''--- src/components/NftList/NftList.js ---
import React, { useContext } from 'react';
import NftItem from '../NftItem';
import { appStore } from '../../state/app';

const NftList = () => {
  const { state, update } = useContext(appStore);
  const { app } = state;

  const handleClick = (revealMisfits) => {
    const newRevealMisfits = { ...app.revealMisfits, ...revealMisfits };

    update('app', { revealMisfits: newRevealMisfits });
    localStorage.setItem('revealMisfits', JSON.stringify(newRevealMisfits));
  };

  return (
    <div className="nfts-list">
      {app.misfitsArray.map((item) => (
        <NftItem
          key={item.token_id}
          item={item.metadata}
          isReveal={app.revealMisfits[item.token_id]}
          urlIpfs={app.urlIpfs}
          onClick={handleClick}
        />
      ))}
    </div>
  );
};

export default NftList;

'''
'''--- src/components/NftList/index.js ---
export { default } from './NftList';

'''
'''--- src/components/NoNfts/index.js ---
export { default } from './NoNfts';

'''
'''--- src/components/Price/index.js ---
export { default } from './Price';

'''
'''--- src/components/Rarity/index.js ---
export { default } from './Rarity';

'''
'''--- src/components/Rarity/rarityData.js ---
import shortid from 'shortid';
import normies from '../../assets/images/rarity-common.svg';
import zombies from '../../assets/images/rarity-uncommon.svg';
import skeletons from '../../assets/images/rarity-rare.svg';
import nearkats from '../../assets/images/rarity-very-rare.svg';
import glitch from '../../assets/images/rarity-super-rare.svg';

const rarityData = {
  rates: [
    {
      id: shortid.generate(),
      svgIcon: normies,
      count: '1,600',
      text: 'Normies',
    },
    {
      id: shortid.generate(),
      svgIcon: zombies,
      count: '150',
      text: 'Zombies',
    },
    {
      id: shortid.generate(),
      svgIcon: skeletons,
      count: '101',
      text: 'Skeletons',
    },
    {
      id: shortid.generate(),
      svgIcon: nearkats,
      count: '50',
      text: 'Nearkats',
    },
    {
      id: shortid.generate(),
      svgIcon: glitch,
      count: '22',
      text: 'Glitch',
    },
  ],
  misfits: [
    {
      id: shortid.generate(),
      svgRarityIcon: normies,
      alt: 'normies icon',
      src: './images/rarity-normies.png',
      srcSet:
        './images/rarity-normies-2x.webp 2x, ./images/rarity-normies.webp 1x',
    },
    {
      id: shortid.generate(),
      svgRarityIcon: zombies,
      alt: 'zombies icon',
      src: './images/rarity-zombies.png',
      srcSet:
        './images/rarity-zombies-2x.webp 2x, ./images/rarity-zombies.webp 1x',
    },
    {
      id: shortid.generate(),
      svgRarityIcon: skeletons,
      alt: 'skeletons icon',
      src: './images/rarity-skeletons.png',
      srcSet:
        './images/rarity-skeletons-2x.webp 2x, ./images/rarity-skeletons.webp 1x',
    },
    {
      id: shortid.generate(),
      svgRarityIcon: glitch,
      alt: 'glitch icon',
      src: './images/rarity-glitch.png',
      srcSet:
        './images/rarity-glitch-2x.webp 2x, ./images/rarity-glitch.webp 1x',
    },
  ],
};

export default rarityData;

'''
'''--- src/components/RateList/index.js ---
export { default } from './RateList';

'''
'''--- src/components/RenderRoutes/RenderRoutes.js ---
import React from 'react';
import { Switch, Redirect } from 'react-router';
import PropTypes from 'prop-types';
import RouteWithSubRoutes from './RouteWithSubRoutes';
import ScrollToTop from '../ScrollToTop';

const RenderRoutes = ({ routes }) => (
  <>
    <Switch>
      {routes.map((route) => (
        <RouteWithSubRoutes key={route.key} {...route} />
      ))}
      <Redirect to="/" />
    </Switch>
    <ScrollToTop />
  </>
);

RenderRoutes.propTypes = {
  routes: PropTypes.array,
};

export default RenderRoutes;

'''
'''--- src/components/RenderRoutes/RouteWithSubRoutes/RouteWithSubRoutes.js ---
import React from 'react';
import { Route } from 'react-router';

export const RouteWithSubRoutes = (route) => {
  const { path, exact, routes } = route;
  return (
    <Route
      path={path}
      exact={exact}
      render={(props) => <route.component {...props} routes={routes} />}
    />
  );
};

export default RouteWithSubRoutes;

'''
'''--- src/components/RenderRoutes/RouteWithSubRoutes/index.js ---
export { default } from './RouteWithSubRoutes';

'''
'''--- src/components/RenderRoutes/index.js ---
export { default } from './RenderRoutes';

'''
'''--- src/components/ScrollToTop/index.js ---
export { default } from './ScrollToTop';

'''
'''--- src/components/ShareSocialLinks/index.js ---
export { default } from './ShareSocialLinks';

'''
'''--- src/components/SocialLinks/index.js ---
export { default } from './SocialLinks';

'''
'''--- src/config.js ---
const contractName = process.env.REACT_APP_CONTRACT_NAME || 'misfits.tenk.near';

export default function getConfig() {
  let config = {
    networkId: 'testnet',
    nodeUrl: 'https://rpc.testnet.near.org',
    walletUrl: 'https://wallet.testnet.near.org',
    helperUrl: 'https://helper.testnet.near.org',
    contractName,
    GAS: '200000000000000',
    DEFAULT_NEW_ACCOUNT_AMOUNT: '5',
    contractMethods: {
      changeMethods: [
        'nft_mint_one',
        'nft_mint_many',
        'create_linkdrop',
        'nft_transfer',
      ],
      viewMethods: [
        'cost_per_token',
        'discount',
        'token_storage_cost',
        'total_cost',
        'nft_supply_for_owner',
        'nft_total_supply',
        'nft_tokens',
        'nft_tokens_for_owner',
        'tokens_left',
        'cost_of_linkdrop',
        'nft_metadata',
        'get_key_balance',
        'check_key',
      ],
    },
  };

  // if (process.env.REACT_APP_ENV === 'prod') {
  config = {
    ...config,
    networkId: 'mainnet',
    nodeUrl: 'https://rpc.mainnet.near.org',
    walletUrl: 'https://wallet.near.org',
    helperUrl: 'https://helper.mainnet.near.org',
  };
  // }

  return config;
}

'''
'''--- src/hooks/useBuy.js ---
import { useState, useEffect, useContext } from 'react';
import useMintNft from './useMintNft';
import useLinkDrop from './useLinkDrop';
import { appStore } from '../state/app';

const useBuy = (isLinkDrop) => {
  const { state } = useContext(appStore);

  const { mintNft } = useMintNft();
  const { createLinkDrop } = useLinkDrop();

  const text = isLinkDrop ? 'Generate gift links' : 'Buy more';

  const [count, setCount] = useState();
  const [showMessage, setShowMessage] = useState(false);
  const [showCountAnimation, setShowCountAnimation] = useState('');

  useEffect(() => {
    if (showMessage) {
      setTimeout(() => {
        setShowMessage(false);
      }, 3000);
    }
    return undefined;
  }, [showMessage]);

  const handleClick = async () => {
    if (!count) {
      setShowMessage(true);
    } else {
      // eslint-disable-next-line no-unused-expressions
      isLinkDrop ? createLinkDrop(count) : mintNft(count);
    }
  };

  const formatPrice = (price) => {
    const arrayFromPrice = price.toString().split('');
    let formatedPrice = arrayFromPrice.join('');

    price
      .toString()
      .split('')
      .forEach((item, index, arr) => {
        if (item === '.') {
          const endIndex = index + 2 >= arr.length ? index + 2 : index + 3;
          formatedPrice = arr.slice(0, endIndex).join('');
        }
      });

    return formatedPrice;
  };

  const handleNumberClick = (number) => {
    if (count === number) {
      return;
    }

    setCount(number);
    setShowCountAnimation('generate-block__animation-hide');

    setTimeout(
      () => setShowCountAnimation('generate-block__animation-price'),
      0,
    );
  };

  return {
    text,
    count,
    state,
    showMessage,
    setShowMessage,
    showCountAnimation,
    formatPrice,
    handleClick,
    handleNumberClick,
  };
};

export default useBuy;

'''
'''--- src/hooks/useCopyToClipboard.js ---
const useCopyToClipboard = () => {
  const handleCopy = (link) => {
    const el = document.createElement('textarea');
    el.value = link;
    el.setAttribute('readonly', '');
    el.style.position = 'absolute';
    el.style.left = '-9999px';
    document.body.appendChild(el);
    el.select();
    document.execCommand('copy');
    document.body.removeChild(el);
  };

  return { handleCopy };
};

export default useCopyToClipboard;

'''
'''--- src/hooks/useLinkDrop.js ---
/* eslint-disable no-console */
import { useContext } from 'react';
import { generate as id } from 'shortid';
import { KeyPairEd25519 } from 'near-api-js/lib/utils';
import { GAS } from '../state/near';
import { appStore } from '../state/app';

const useLinkDrop = () => {
  const { state } = useContext(appStore);
  const { contract, account, app, price } = state;

  const walletUrl = (contractId, key, url) =>
    `https://wallet.near.org/linkdrop/${contractId}/${key}?redirectUrl=${url}/my-nfts`;

  const createLinkDrop = async () => {
    const keyPair = KeyPairEd25519.fromRandom();
    const currentUrl = window.location.origin;
    const url = walletUrl(
      contract.contractId,
      keyPair.secretKey.toString(),
      currentUrl,
    );

    const { linkDropArray } = app;

    localStorage.setItem(
      `linkDropArray:${account.accountId}`,
      JSON.stringify([
        ...linkDropArray,
        {
          link: url,
          text: '',
          id: id(),
          isUsed: false,
        },
      ]),
    );

    const cost = price.costLinkDrop;

    const publicKey = keyPair.getPublicKey().toString();

    try {
      await contract.create_linkdrop({
        args: { public_key: publicKey },
        gas: GAS,
        amount: cost,
        callbackUrl: `${currentUrl}/link-drop`,
      });
    } catch (err) {
      console.log(err);
    }
  };
  return { createLinkDrop };
};

export default useLinkDrop;

'''
'''--- src/hooks/useMintNft.js ---
/* eslint-disable no-alert */
import { useContext } from 'react';
import { appStore } from '../state/app';

const useMintNft = () => {
  const { state } = useContext(appStore);
  const { contract, price } = state;

  const mintNft = async (count = 1) => {
    const callbackUrl = `${window.location.origin}/my-nfts`;
    if (count === 1) {
      contract.nft_mint_one({
        args: {},
        gas: '50000000000000',
        amount: price.oneTokenCost,
        callbackUrl,
      });
    } else {
      contract.nft_mint_many({
        args: { num: count },
        gas: '230000000000000',
        amount: price.tenTokenCost,
        callbackUrl,
      });
    }
  };

  return { mintNft };
};

export default useMintNft;

'''
'''--- src/hooks/useTransfer.js ---
/* eslint-disable no-unused-vars */
/* eslint-disable no-console */
/* eslint-disable no-alert */
/* eslint-disable camelcase */
import { useContext } from 'react';
import { useHistory } from 'react-router-dom';
import { appStore } from '../state/app';

const useTransfer = () => {
  const history = useHistory();

  const { state } = useContext(appStore);

  const { contract } = state;

  const nftTransfer = async (tokenId, receiver_id) => {
    const token_id = tokenId.toString();
    console.log('transfer');

    await contract.nft_transfer({
      args: { receiver_id, token_id },
      amount: '1',
    });
    history.push('/my-nfts');
  };
  return { nftTransfer };
};

export default useTransfer;

'''
'''--- src/index.js ---
import React from 'react';
import ReactDOM from 'react-dom';
import { BrowserRouter } from 'react-router-dom';
import Main from './Main';
import { AppProvider } from './state/app';

ReactDOM.render(
  <AppProvider>
    <BrowserRouter>
      <Main />
    </BrowserRouter>
  </AppProvider>,
  document.getElementById('root'),
);

'''
'''--- src/layouts/Footer/Footer.js ---
import React, { useContext, memo } from 'react';
import { ReactSVG } from 'react-svg';
import { appStore } from '../../state/app';
import Navigation from '../../components/Navigation';
import SocialLinks from '../../components/SocialLinks';
import logo from '../../assets/images/footer-near-logo.svg';

const Footer = () => {
  const { state } = useContext(appStore);
  const { wallet } = state || {};

  return wallet ? (
    <footer className="footer">
      <div className="footer__container">
        <Navigation className="footer__navigation" signedIn={wallet.signedIn} />
        <SocialLinks className="footer__social" />

        <p className="footer__built">Built on</p>
        <ReactSVG className="footer__logo" src={logo} />

        <p className="footer__text">
          NEAR Misfits NFTs are built on top of NEAR Protocol, where minting
          NFTs cost less than a cent per item.
        </p>
        <p className="footer__copyright ">
          © 2021 NEAR Misfits. All Rights Reserved.
        </p>
      </div>
    </footer>
  ) : (
    <></>
  );
};

export default memo(Footer);

'''
'''--- src/layouts/Footer/index.js ---
export { default } from './Footer';

'''
'''--- src/layouts/Header/Header.js ---
import React, { useContext, memo } from 'react';
import { appStore } from '../../state/app';
import Navigation from '../../components/Navigation';
import SocialLinks from '../../components/SocialLinks';
import ConnectWalletBtn from '../../components/ConnectWalletBtn';
import Loader from '../../components/Loader/Loader';

const Header = () => {
  const { state } = useContext(appStore);
  const { wallet, account } = state;

  if (!wallet) {
    return <Loader />;
  }

  return (
    <header className="header">
      <Navigation className="header__navigation" signedIn={wallet.signedIn} />
      <SocialLinks className="header__social" />
      {account?.accountId ? (
        <ConnectWalletBtn
          text={account.accountId}
          handleClick={() => wallet.signOut()}
        />
      ) : (
        <ConnectWalletBtn handleClick={() => wallet.signIn()} />
      )}
    </header>
  );
};

export default memo(Header);

'''
'''--- src/layouts/Header/index.js ---
export { default } from './Header';

'''
'''--- src/layouts/Layout/Layout.js ---
import React, { useEffect, useContext } from 'react';
import PropTypes from 'prop-types';
import { useLocation, useHistory } from 'react-router';
import { appStore } from '../../state/app';
import Modal from '../Modal';
import Header from '../Header';
import Footer from '../Footer';

const Layout = ({ children }) => {
  const { pathname, hash } = useLocation();
  const history = useHistory();

  const { state } = useContext(appStore);
  const { modalOpen } = state.app;

  useEffect(() => {
    if (!hash) return;

    setTimeout(() => {
      const elem = document.querySelector(hash);

      elem.scrollIntoView({
        behavior: 'smooth',
      });
    }, 100);

    if (hash !== '#generate-block') history.push(pathname);
  }, [hash]);

  // hide scroll when modal open
  if (modalOpen) {
    document.body.style.overflow = 'hidden';
  } else {
    document.body.style.overflow = '';
  }

  return (
    <>
      <Header />
      {children}
      <Footer />
      {modalOpen && <Modal />}
    </>
  );
};

Layout.propTypes = {
  children: PropTypes.element,
};

export default Layout;

'''
'''--- src/layouts/Layout/index.js ---
export { default } from './Layout';

'''
'''--- src/layouts/Modal/index.js ---
export { default } from './Modal';

'''
'''--- src/pages/Home/Home.js ---
import React from 'react';
import Hero from '../../components/Hero';
import Learn from '../../components/Learn';
import Rarity from '../../components/Rarity';
import Generate from '../../components/Generate';
import FAQ from '../../components/FAQ';

const Home = () => (
  <div className="home">
    <Hero />
    <Learn />
    <Rarity />
    <Generate />
    <FAQ />
  </div>
);

export default Home;

'''
'''--- src/pages/Home/index.js ---
export { default } from './Home';

'''
'''--- src/pages/LinkDrop/LinkDrop.js ---
import React, { useEffect, useContext, useState } from 'react';
import { useHistory } from 'react-router';
import { ReactSVG } from 'react-svg';
import { appStore } from '../../state/app';
import ShareSocialLinks from '../../components/ShareSocialLinks';
import Buy from '../../components/Buy';
import NoNfts from '../../components/NoNfts/NoNfts';
import background from '../../assets/images/link-drop-background.svg';
import ShareableLink from './ShareableLink';
import ShareableInput from './ShareableInput';
import ShareableCircle from './ShareableCircle';
import SaveBtn from './SaveBtn/SaveBtn';
import useCopyToClipboard from '../../hooks/useCopyToClipboard';

const LinkDrop = () => {
  const history = useHistory();

  const { state, update } = useContext(appStore);
  const { app, account } = state;

  const [linkDropArray, setLinkDropArray] = useState([...app.linkDropArray]);
  const [activeIndex, setActiveIndex] = useState(0);

  const { handleCopy } = useCopyToClipboard();

  useEffect(() => {
    if (app.linkDropArray.length) {
      setLinkDropArray([...app.linkDropArray]);
    }
  }, [app.linkDropArray.length]);

  useEffect(() => {
    if (!localStorage.undefined_wallet_auth_key) {
      history.push('/');
    }
  });

  const handleBlur = (e) => {
    const text = e.target.value;
    const dataIndex = +e.target.dataset.index;

    // update text for input
    const updatedLinkDropArray = linkDropArray.map((item, index) =>
      dataIndex === index ? { ...item, text } : item,
    );

    // update in state
    setLinkDropArray(updatedLinkDropArray);

    // update text in global state
    update('app.linkDropArray', [...updatedLinkDropArray]);

    // update in local storage for user
    localStorage.setItem(
      `linkDropArray:${account.accountId}`,
      JSON.stringify([...updatedLinkDropArray]),
    );
  };

  const handleCircleClick = (index) => setActiveIndex(index);

  // copy to clipboard when share social links (instagram/wechat/descord)

  const handleShareSocialLinks = () => {
    const activeText = linkDropArray[activeIndex]?.text;
    const activeLink = linkDropArray[activeIndex]?.link;

    const copyText = `${activeText}  ${activeLink}`;
    handleCopy(copyText);
  };

  return linkDropArray.length ? (
    <div className="link-drop">
      <div className="link-drop__data-wrapper" id="share-nft">
        <ReactSVG src={background} className="link-drop__background" />

        <div className="link-drop__data">
          <header className="link-drop__header">
            <span className="link-drop__header-purpure">Share</span> a mystery{' '}
            <span className="link-drop__header-purpure">NFT</span> with your
            friend
          </header>

          <div className="link-drop__center">
            <div>
              <ul className="link-drop__list">
                {linkDropArray.map((item, index) => (
                  <li className="link-drop__item" key={item.id}>
                    <ShareableCircle
                      activeLinkForShare={activeIndex}
                      onClick={handleCircleClick}
                      index={index}
                    />
                    <div className="link-drop__inputs">
                      <ShareableLink link={item.link} />
                      <ShareableInput
                        text={item.text}
                        index={index}
                        onBlur={handleBlur}
                      />
                    </div>
                  </li>
                ))}
              </ul>
              <div className="link-drop__save">
                <SaveBtn linkDropArray={linkDropArray} />
              </div>

              <ShareSocialLinks
                color="blue"
                className="link-drop__share-links"
                text={linkDropArray[activeIndex]?.text}
                link={linkDropArray[activeIndex]?.link}
                onClick={handleShareSocialLinks}
              />
            </div>
            <picture>
              <source srcSet="./images/misfits-big-2x.webp 2x, ./images/misfits-big.webp 1x" />
              <img
                className="link-drop__img"
                src="/images/misfits-big.png"
                alt="big misfits"
              />
            </picture>
          </div>
        </div>
      </div>

      <Buy soldOut={app.soldOut} />
    </div>
  ) : (
    <NoNfts soldOut={app.soldOut} />
  );
};

export default LinkDrop;

'''
'''--- src/pages/LinkDrop/SaveBtn/index.js ---
export { default } from './SaveBtn';

'''
'''--- src/pages/LinkDrop/ShareableCircle/index.js ---
export { default } from './ShareableCircle';

'''
'''--- src/pages/LinkDrop/ShareableInput/index.js ---
export { default } from './ShareableInput';

'''
'''--- src/pages/LinkDrop/ShareableLink/index.js ---
export { default } from './ShareableLink';

'''
'''--- src/pages/LinkDrop/index.js ---
export { default } from './LinkDrop';

'''
'''--- src/pages/MyNFTS/MyNFTS.js ---
import React, { useContext, useEffect } from 'react';
import { useHistory } from 'react-router';
import { ReactSVG } from 'react-svg';
import NftList from '../../components/NftList/NftList';
import NoNfts from '../../components/NoNfts/NoNfts';
import { appStore } from '../../state/app';
import Buy from '../../components/Buy';
import backgroundNft from '../../assets/images/nft-background.svg';

const MyNFTS = () => {
  const history = useHistory();

  const { state } = useContext(appStore);
  const { soldOut } = state.app;
  const nftsCount = state.app.misfitsArray.length;

  useEffect(() => {
    if (!localStorage.undefined_wallet_auth_key) {
      history.push('/');
    }
  });

  return nftsCount ? (
    <div className="my-nfts">
      <ReactSVG className="my-nfts__background" src={backgroundNft} />
      <div className="my-nfts__data">
        <NftList />
      </div>
      <Buy soldOut={soldOut} />
    </div>
  ) : (
    <NoNfts soldOut={soldOut} />
  );
};

export default MyNFTS;

'''
'''--- src/pages/MyNFTS/index.js ---
export { default } from './MyNFTS';

'''
'''--- src/react-app-env.d.ts ---
/// <reference types="react-scripts" />

'''
'''--- src/routes.js ---
import React from 'react';
import Home from './pages/Home';
import LinkDrop from './pages/LinkDrop';
import MyNFTS from './pages/MyNFTS';

const routes = [
  {
    path: '/',
    key: 'ROOT',
    exact: true,
    component: () => <Home />,
  },
  {
    path: '/my-nfts',
    key: 'MY_NFTS',
    component: () => <MyNFTS />,
  },
  {
    path: '/link-drop',
    key: 'LINK_DROP',
    component: () => <LinkDrop />,
  },
];

export default routes;

'''
'''--- src/setupTests.js ---
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

'''
'''--- src/state/app.js ---
import { StateUtils } from '../utils/state-utils';
import { initNear } from './near';

const initialState = {
  app: {
    soldOut: true,
    oneCount: 1,
    manyCount: 10,
    revealMisfits: JSON.parse(localStorage.getItem('revealMisfits')) || {},
    misfitsArray: [],
    linkDropArray: [],
    urlIpfs: '',
    tokensLeft: undefined,
    modalOpen: false,
  },
  near: {
    initialized: false,
  },
  price: {
    oneNFT: 5,
    manyNFTS: 31.99,
    tokenStorageFormat: 0,
    discountFormat: 0,
  },
};

export const { appStore, AppProvider } = StateUtils(initialState, 'app');

export const onAppMount =
  () =>
  async ({ dispatch }) => {
    dispatch(initNear());
  };

'''
'''--- src/state/near.js ---
/* eslint-disable */
import getConfig from '../config';
import * as nearAPI from 'near-api-js';
import { getWallet, getContract, getPrice } from '../utils/near-utils';
import { KeyPairEd25519 } from 'near-api-js/lib/utils';

export const {
  networkId,
  nodeUrl,
  walletUrl,
  GAS,
  contractName,
  contractMethods,
} = getConfig();

export const {
  utils: {
    format: { formatNearAmount, parseNearAmount },
  },
} = nearAPI;

const linkmatcher =
  /https:\/\/wallet.near.org\/linkdrop\/[^/]+\/(?<key>.+)\?redirectUrl=/;

function getPublicKey(link) {
  const m = link.match(linkmatcher).groups.key;
  return KeyPairEd25519.fromString(m).getPublicKey();
}

export const initNear =
  () =>
  async ({ update, getState }) => {
    try {
      const { near, wallet } = await getWallet();

      const price = await getPrice(near);

      wallet.signIn = (successUrl) => {
        wallet.requestSignIn({
          successUrl,
          contractId: contractName,
        });
      };

      const signOut = wallet.signOut;
      wallet.signOut = () => {
        signOut.call(wallet);
        update('wallet.signedIn', false);
        update('', { account: null });
        localStorage.removeItem('undefined_wallet_auth_key');
        wallet.signedIn = wallet.isSignedIn();
        new nearAPI.keyStores.BrowserLocalStorageKeyStore().clear();
      };

      wallet.signedIn = wallet.isSignedIn();

      let account;
      if (wallet.signedIn) {
        account = wallet.account();
        const contract = getContract(account, contractMethods);

        wallet.balance = formatNearAmount(
          (await wallet.account().getAccountBalance()).available,
          2,
        );

        await update('', { wallet, account, contract, price, near });

        // take lindDropArray from Local Storage for only that user that connect with near wallet
        let linkDropArray =
          JSON.parse(
            localStorage.getItem(`linkDropArray:${account.accountId}`),
          ) || [];

        // tokensLeft - count of how many tokens left
        // misfitsArray - NFTs of user
        // {base_uri: urlIpfs} take url for IPFS where NFTs and data stored
        // linkDropArray.map - check is somebody claim your link drop or not

        const [
          tokensLeft,
          nftTotalSupply,
          misfitsArray,
          { base_uri: urlIpfs },
        ] = await Promise.all([
          contract.tokens_left(),
          contract.nft_total_supply(),
          contract.nft_tokens_for_owner({
            account_id: account.accountId,
          }),
          contract.nft_metadata(),
          ...linkDropArray.map(async (link) => {
            const public_key = getPublicKey(link.link).toString();
            link.isUsed = !(await contract.check_key({ public_key }));
          }),
        ]);

        // if all tokens buy soldOut will be true
        const soldOut = tokensLeft === 0;

        // filter linkDrops that was used
        linkDropArray = linkDropArray.filter(({ isUsed }) => !isUsed);

        // update LocalStorage
        localStorage.setItem(
          `linkDropArray:${account.accountId}`,
          JSON.stringify([...linkDropArray]),
        );

        const state = getState();
        const app = {
          ...state.app,
          misfitsArray,
          urlIpfs,
          linkDropArray,
          soldOut,
          tokensLeft,
        };

        await update('', { app });

        // Debugging start
        console.log('tokens_left:', tokensLeft);
        console.log('nft_total_supply', nftTotalSupply);
        console.log('state:', getState());
        // Debugging end

        return;
      }

      await update('', { near, wallet, account, price });
      console.log('state:', getState());
    } catch (e) {
      console.log('error:', e);
    }
  };

'''
'''--- src/utils/near-utils.js ---
/* eslint-disable */
import * as nearAPI from 'near-api-js';
import getConfig from '../config';

export const { networkId, nodeUrl, walletUrl, contractName, contractMethods } =
  getConfig();

export const {
  utils: {
    format: { formatNearAmount, parseNearAmount },
  },
} = nearAPI;

export const formatAccountId = (accountId, len = 16) => {
  if (accountId.length > len) {
    return `${accountId.substr(0, len - 3)}...`;
  }
  return accountId;
};

export const getWallet = async () => {
  const near = await nearAPI.connect({
    networkId,
    nodeUrl,
    walletUrl,
    deps: { keyStore: new nearAPI.keyStores.BrowserLocalStorageKeyStore() },
  });
  const wallet = new nearAPI.WalletAccount(near);
  return { near, wallet };
};

export const getContract = (account, methods = contractMethods) => {
  return new nearAPI.Contract(account, contractName, {
    ...methods,
    sender: account.accountId,
  });
};

export const getPrice = async (near) => {
  const contract = await near.loadContract(contractName, {
    ...contractMethods,
  });

  let [discount, tenTokenCost, tokenStorage, oneTokenCost, costLinkDrop] =
    await Promise.all([
      contract.discount({
        num: 10,
      }),
      contract.total_cost({ num: 10 }),
      contract.token_storage_cost(),
      contract.cost_per_token({ num: 1 }),
      contract.cost_of_linkdrop(),
    ]);

  const discountFormat = formatNearAmount(discount);
  const tenTokenFormat = formatNearAmount(tenTokenCost);
  const oneTokenFormat = formatNearAmount(oneTokenCost);
  const tokenStorageFormat = formatNearAmount(tokenStorage);

  const price = {
    oneNFT: oneTokenFormat - tokenStorageFormat,
    manyNFTS: tenTokenFormat - 10 * tokenStorageFormat,
    tokenStorageFormat,
    discountFormat,
    tenTokenCost,
    oneTokenCost,
    costLinkDrop: costLinkDrop,
  };

  return price;
};

'''
'''--- src/utils/state-utils.js ---
/* eslint-disable */
import React, { createContext, useReducer } from 'react';

export const StateUtils = (initialState, prefix) => {
  let updatedState;
  const getState = () => updatedState;
  const store = createContext(initialState);
  const { Provider: InnerProvider } = store;

  const updateState = (state, newState, path = '') => {
    if (path.length === 0) {
      return { ...state, ...newState };
    }
    const pathArr = path.split('.');
    const first = pathArr[0];
    state = { ...state };
    if (!state[first]) {
      state[first] = {};
    }
    if (pathArr.length === 1) {
      state[first] =
        !!newState && typeof newState === 'object' && !Array.isArray(newState)
          ? {
              ...state[first],
              ...newState,
            }
          : newState;
    } else {
      state[first] = {
        ...state[first],
        ...updateState(state[first], newState, pathArr.slice(1).join('.')),
      };
    }

    return state;
  };

  const Provider = ({ children }) => {
    const [state, dispatch] = useReducer((_state, payload) => {
      const { path, newState } = payload;
      if (path === undefined) {
        return _state;
      }
      updatedState = updateState(_state, newState, path);
      return updatedState;
    }, initialState);

    const update = (path, newState) => {
      dispatch({ path, newState });
    };
    const wrappedDispatch = (fn) =>
      fn({ update, getState, dispatch: wrappedDispatch });

    return (
      <InnerProvider value={{ update, state, dispatch: wrappedDispatch }}>
        {children}
      </InnerProvider>
    );
  };

  if (prefix) {
    return {
      [`${prefix}Store`]: store,
      [`${prefix.substr(0, 1).toUpperCase() + prefix.substr(1)}Provider`]:
        Provider,
    };
  }

  return { store, Provider };
};

'''
'''--- tsconfig.json ---
{
  "compilerOptions": {
    "target": "es5",
    "module": "esnext",
    "allowJs": true,
    "strict": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowSyntheticDefaultImports": true,
    "noFallthroughCasesInSwitch": true,
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx"
  },
  "include": [
    "src"
  ]
}

'''