*GitHub Repository "Panasthetik/near-art-exhibitions"*

'''--- README.md ---
# Near Art Exhibitions
Art exhibitions and artist portfolio site on Near Protocol with Rust, WASM, Parcel and React. Based on the 'Near Starter Template' also posted on this GitHub and documented in my Medium articles.    
      
Can be expanded / adapted to suit a variety of needs in Fine Art or Photography for those looking to build on Near Protocol. Permissions and other functions should be added for production deployment. Also possible would be a native token with DAO functionality for the curation and voting, but it's beyond the scope of this template.

# Features (high-level):
1) User can add an exhibition with title, description and 5 image links.
2) User can add an artist to an exhibition with portfolio (5 image links).
3) Users can 'Endorse' artists and 'Vote' on exhibitions.
4) News feed on Home page updates when an Artist or Exhibition is added (UNIX timestamp, date needs to be re-formatted in Rust to be properly displayable in React).
5) User can delete an exhibition (Rust indexing doesn't update (-1 value) ID in the vector - to fix).
6) Artists page lists all artists by exhibition (by ID).

# Testing
You can run "cargo build" in the 'contract' folder, and it will compile a debug target in regular Rust. You can then run "bash ./test.sh" in the 'contract' folder and it will run the 5 unit tests.

# In Progress (to-do's)
1) Redo the exhibitions ID to be a unique number.
2) Reformat the date in Rust (from "block.timestamp()" to UTC).
3) Allow-list, "only owner" for 'Delete Exhibition'.
4) Add donations to Artist, Exhibition or both.
5) News feed lists donations and endorsements.
6) IPFS or Pinata for the images.

# Instructions
In progress - install and deploy instructions coming soon.  

You can compile the Rust code to WASM and re-deploy a fresh copy of this contract to the Near Testnet by following the instructions in the Near Starter Template articles posted elsewhere on this GitHub. Be sure to include the contract address in the "config.js" Near configuration file before launching the React app with "npm start".

'''
'''--- contract/Cargo.toml ---
[package]
name = "near-art-exhibitions"
version = "0.1.0"
authors = ["Panasthetik"]
edition = "2018"
# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[lib]
crate-type = ["cdylib"]

[dependencies]
near-sdk = "4.0.0-pre.4"
hex = "0.4.3"

[profile.release]
codegen-units = 1
# Tell `rustc` to optimize for small code size.
opt-level = "z"
lto = true
debug = false
panic = "abort"
# Opt into extra safety checks on arithmetic operations https://stackoverflow.com/a/64136471/249801
overflow-checks = true
'''
'''--- contract/build.bat ---
cargo build --target wasm32-unknown-unknown --release
copy target\wasm32-unknown-unknown\release\*.wasm res
'''
'''--- contract/build.sh ---
#!/bin/bash
set -e

RUSTFLAGS='-C link-arg=-s' cargo build --target wasm32-unknown-unknown --release
cp target/wasm32-unknown-unknown/release/*.wasm ./res/

'''
'''--- contract/src/lib.rs ---
#[allow(unused_imports)]

use near_sdk::{borsh::{self, BorshDeserialize, BorshSerialize}};
use near_sdk::{env, PromiseIndex, near_bindgen};
near_sdk::setup_alloc!();

mod models;
mod utils;

use std::convert::TryInto;

use crate::{
    utils::{
        AccountId,
        Timestamp
    },
    models::{
        Exhibition,
        Artist, 
        Endorsement,
        // ActionType,
        // NewsItem,
        ArtistNewsItem,
        ExhibitionNewsItem,
    }
};

#[near_bindgen]
#[derive(Clone, Default, BorshDeserialize, BorshSerialize)]

pub struct ExhibitionContract {
    owner: AccountId,
    exhibitions: Vec<Exhibition>,
    total_artists: usize,
    artist_news_items: Vec<ArtistNewsItem>,
    exhibition_news_items: Vec<ExhibitionNewsItem>,
}

#[near_bindgen]
impl ExhibitionContract{
    #[init]
    pub fn new(
        owner: AccountId,
    ) -> Self{
        let exhibitions: Vec<Exhibition> = Vec::new();
        let artists: Vec<Artist> = Vec::new();
        let total_artists: i32 = 0;
        let artist_news_items: Vec<ArtistNewsItem> = Vec::new();
        let exhibition_news_items: Vec<ExhibitionNewsItem> = Vec::new();

        ExhibitionContract{
            owner,
            exhibitions,
            total_artists: total_artists.try_into().unwrap(),
            artist_news_items,
            exhibition_news_items,
        }
    }

    pub fn add_exhibition(&mut self, title: String, description: String,
        f_image_link: String, s_image_link: String, 
        t_image_link: String, q_image_link: String, c_image_link: String) {
        
        let id = self.exhibitions.len() as i32;

        let exhibition_news_id = self.exhibition_news_items.len() as i32;

        let exhibition_news = ExhibitionNewsItem::new(exhibition_news_id);
       
        self.exhibitions.push(Exhibition::new(
            id,
            title,
            description,
            f_image_link,
            s_image_link,
            t_image_link,
            q_image_link,
            c_image_link
        ));

        env::log("Added a new exhibition!".as_bytes());

        self.exhibition_news_items.push(exhibition_news);
    }

    pub fn list_exhibition_news(&self) -> Vec<ExhibitionNewsItem> {
        let exhibitions_news = &self.exhibition_news_items;

       return exhibitions_news.to_vec();
    }

    pub fn delete_exhibition(&mut self, id:usize) -> usize{
        let exhibition: &mut Exhibition = self.exhibitions.get_mut(id).unwrap();

        let artist_count: usize = exhibition.artists.len().try_into().unwrap();
   

        let mut new_total_artists = self.total_artists - artist_count;

        self.exhibitions.remove(id);

        return new_total_artists;
    }

    pub fn list_exhibitions(&self) -> Vec<Exhibition> {
        let exhibitions = &self.exhibitions;

       return exhibitions.to_vec();
    }

    pub fn exhibition_count(&mut self) -> usize {
        return self.exhibitions.len();
    }

    pub fn artist_count(&mut self, id:usize) -> u64 {
        let exhibition: &mut Exhibition = self.exhibitions.get_mut(id).unwrap();
        return exhibition.artists.len().try_into().unwrap();
    }

    pub fn add_artist(&mut self, id:usize, age: i32, first_name: String, last_name: String, medium: String,
        a_image_link: String, b_image_link: String, d_image_link: String, x_image_link: String, y_image_link: String, location: String){
        let exhibition: &mut Exhibition = self.exhibitions.get_mut(id).unwrap();
        let artist_id = exhibition.artists.len() as usize;

        let art_news_id = self.artist_news_items.len() as i32;

        let artist_news = ArtistNewsItem::new(art_news_id);

        // let curator = env::predecessor_account_id();
        // assert_eq!(curator, exhibition.creator);
        // if curator != exhibition.creator {
        //     env::panic(b"Only the owner can add artists!!");
        // };
        let artist = Artist::new(artist_id.try_into().unwrap(), age, first_name, last_name,
        medium, a_image_link, b_image_link, d_image_link, x_image_link, y_image_link, location);

        self.total_artists = self.total_artists + 1;
        env::log("Successfully added an artist to this exhibition!".as_bytes());
        exhibition.artists.push(artist);

        self.artist_news_items.push(artist_news);
        
    }

    pub fn list_artists_news(&self) -> Vec<ArtistNewsItem> {
        let artists_news = &self.artist_news_items;

       return artists_news.to_vec();
    }

    pub fn add_endorsement(&mut self, id:usize, artist_id: usize, comment: String){
        let exhibition: &mut Exhibition = self.exhibitions.get_mut(id).unwrap();
        // let endorser = env::predecessor_account_id();
        let artist = &mut exhibition.artists.get_mut(artist_id).unwrap();
        let endorsement = Endorsement::new(comment);
        artist.total_endorsements = artist.total_endorsements + 1;
        env::log("Endorsement submitted successfully for this artist!".as_bytes());
        artist.endorsements.push(endorsement);
        
    }

    pub fn get_total_endorsements(&mut self, id:usize, artist_id: usize) -> u64 {
        let exhibition: &mut Exhibition = self.exhibitions.get_mut(id).unwrap();
        let artist = &mut exhibition.artists.get_mut(artist_id).unwrap();
        return artist.endorsements.len().try_into().unwrap();

    }

    // pub fn delete_artist(&mut self, id:usize, artist_id: usize) {
    //     let exhibition: &mut Exhibition = self.exhibitions.get_mut(id).unwrap();
    //     let mut artist_id = exhibition.artists.get(artist_id);
    //     exhibition.artists.remove(artist_id);
    //     self.total_artists = self.total_artists - 1;

    // }

    pub fn get_artists(&mut self, id:usize) -> Vec<Artist> {
        let exhibition: &mut Exhibition = self.exhibitions.get_mut(id).unwrap();
        return exhibition.artists.clone();

    }

    pub fn get_total_artists(&mut self) -> usize {
        let artists_count = self.total_artists;
        return artists_count;
    }
 

    pub fn add_vote(&mut self, id:usize){
        let exhibition: &mut Exhibition = self.exhibitions.get_mut(id).unwrap();
        let voter = env::predecessor_account_id();

        exhibition.total_votes = exhibition.total_votes + 1;
        env::log("Vote submitted successfully for this event!".as_bytes());
        exhibition.votes.push(voter.to_string());
        
    }

    pub fn get_total_votes(&mut self, id:usize) -> u64 {
        let exhibition: &mut Exhibition = self.exhibitions.get_mut(id).unwrap();
        return exhibition.total_votes.try_into().unwrap();

    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use near_sdk::test_utils::VMContextBuilder;
    use near_sdk::{testing_env, AccountId};

    fn get_context(predecessor: AccountId) -> VMContextBuilder {
        let mut builder = VMContextBuilder::new();
        builder.predecessor_account_id(predecessor);
        builder
    }

    #[test]
    fn add_project() {

        let alice = AccountId::new_unchecked("alice.testnet".to_string());
        // Set up the testing context and unit test environment
        let context = get_context(alice.clone());

        testing_env!(context.build());

        let mut contract = ExhibitionContract::new(alice.to_string());

        contract.add_exhibition("New Contemporary Art Show".to_string(), "Amazing selection of 
            international artists from all over the world".to_string(),
            "https://picsum.photos/seed/picsum/200/300".to_string(),
            "https://picsum.photos/seed/picsum/200/300".to_string(),
            "https://picsum.photos/seed/picsum/200/300".to_string());

        let result = contract.exhibition_count();

        assert_eq!(result, 1);
    }

    #[test]
    fn add_voter() {

        let alice = AccountId::new_unchecked("alice.testnet".to_string());
        // Set up the testing context and unit test environment
        let context = get_context(alice.clone());

        testing_env!(context.build());

        let mut contract = ExhibitionContract::new(alice.to_string());

        contract.add_exhibition("New Contemporary Art Show".to_string(), "Amazing selection of 
        international artists from all over the world".to_string(),
        "https://picsum.photos/seed/picsum/200/300".to_string(),
        "https://picsum.photos/seed/picsum/200/300".to_string(),
        "https://picsum.photos/seed/picsum/200/300".to_string());

        contract.add_vote(0);

        let result = contract.get_total_votes(0);

        assert_eq!(result, 1);

    }

    #[test]
    fn add_an_artist() {

        let alice = AccountId::new_unchecked("alice.testnet".to_string());
        // Set up the testing context and unit test environment
        let context = get_context(alice.clone());

        testing_env!(context.build());

        let mut contract = ExhibitionContract::new(alice.to_string());

                contract.add_exhibition("New Contemporary Art Show".to_string(), "Amazing selection of 
            international artists from all over the world".to_string(),
            "https://picsum.photos/seed/picsum/200/300".to_string(),
            "https://picsum.photos/seed/picsum/200/300".to_string(),
            "https://picsum.photos/seed/picsum/200/300".to_string());

        contract.add_artist(0, 47, "Jason".to_string(), "Jagello".to_string(), "Photography".to_string(), "Detroit".to_string());

        let result = contract.get_artists(0);

        let artists = contract.get_total_artists();

        assert_eq!(artists, 1);

    }

    #[test]
    fn remove_exhibition() {
        let alice = AccountId::new_unchecked("alice.testnet".to_string());
        // Set up the testing context and unit test environment
        let context = get_context(alice.clone());

        testing_env!(context.build());

        let mut contract = ExhibitionContract::new(alice.to_string());

                contract.add_exhibition("New Contemporary Art Show".to_string(), "Amazing selection of 
            international artists from all over the world".to_string(),
            "https://picsum.photos/seed/picsum/200/300".to_string(),
            "https://picsum.photos/seed/picsum/200/300".to_string(),
            "https://picsum.photos/seed/picsum/200/300".to_string());
            
        let result = contract.exhibition_count();

        assert_eq!(result, 1);

        contract.delete_exhibition(0);

        let new_result = contract.exhibition_count();

        assert_eq!(new_result, 0);

    }

    // #[test]
    // fn delete_an_artist() {

    //     let alice = AccountId::new_unchecked("alice.testnet".to_string());
    //     // Set up the testing context and unit test environment
    //     let context = get_context(alice.clone());

    //     testing_env!(context.build());

    //     let mut contract = ExhibitionContract::new(alice.to_string());

    //     contract.add_exhibition("New Contemporary Art Show".to_string(), "Amazing selection of 
    //     international artists from all over the world".to_string());

    //     contract.add_artist(0, 47, "Jason".to_string(), "Jagello".to_string(), "Photography".to_string(), "Detroit".to_string());

    //     let result = contract.get_artists(0);

    //     let artists = contract.get_total_artists();

    //     assert_eq!(artists, 1);

    //     contract.delete_artist(0, 47, "Jason".to_string(), "Jagello".to_string(), "Photography".to_string(), "Detroit".to_string());

        // let new_artists = contract.get_total_artists();

        // assert_eq!(artists, 0);

//     }
}
'''
'''--- contract/src/models.rs ---
#[allow(unused_imports)]

use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::serde::{Deserialize, Serialize};
use near_sdk::{env, near_bindgen};

use crate::utils::{
    AccountId,
    Timestamp
};

#[derive(Clone, Serialize, Deserialize, BorshDeserialize, BorshSerialize)]
#[serde(crate = "near_sdk::serde")]
pub struct ArtistNewsItem {
    art_news_id: i32,
    pub creator: AccountId,
    pub created_at: Timestamp,
    // pub action: ActionType,
    pub message: String,

}

#[derive(Clone, Serialize, Deserialize, BorshDeserialize, BorshSerialize)]
#[serde(crate = "near_sdk::serde")]
pub struct ExhibitionNewsItem {
    exhibition_news_id: i32,
    pub creator: AccountId,
    pub created_at: Timestamp,
    // pub action: ActionType,
    pub message: String,

}

// #[derive(Clone, Serialize, Deserialize, BorshDeserialize, BorshSerialize)]
// #[serde(crate = "near_sdk::serde")]
// pub enum ActionType {
//     ExhibitionAdded,
//     ArtistAdded,

// }

impl ArtistNewsItem {
    pub fn new(art_news_id: i32) -> Self {

        ArtistNewsItem {
            art_news_id,
            creator: env::signer_account_id().to_string(),
            created_at: env:: block_timestamp(),
            // action: ActionType::ArtistAdded,
            message: "A curator has added an artist".to_string(),
        }
    }
}

impl ExhibitionNewsItem {
    pub fn new(exhibition_news_id: i32) -> Self {

        ExhibitionNewsItem {
            exhibition_news_id,
            creator: env::signer_account_id().to_string(),
            created_at: env:: block_timestamp(),
            // action: ActionType::ExhibitionAdded,
            message: "A curator has added an exhibition".to_string(),
        }
    }
}

#[derive(Clone, Serialize, Deserialize, BorshDeserialize, BorshSerialize)]
#[serde(crate = "near_sdk::serde")]
pub struct Exhibition {
    id: i32,
    pub creator: AccountId,
    pub created_at: Timestamp,
    pub title: String,
    pub total_votes: i64,
    pub description: String,
    pub f_image_link: String,
    pub s_image_link: String,
    pub t_image_link: String,
    pub q_image_link: String,
    pub c_image_link: String,
    pub votes: Vec<String>,
    pub artists: Vec<Artist>
}

impl Exhibition {
    pub fn new(id:i32, title: String, description: String, f_image_link:String,
        s_image_link:String, t_image_link:String,
        q_image_link:String, c_image_link:String) -> Self {
        
        Exhibition {
            id,
            creator: env::signer_account_id().to_string(),
            created_at: env::block_timestamp(),
            title,
            total_votes : 0,
            description,
            f_image_link,
            s_image_link,
            t_image_link,
            q_image_link,
            c_image_link,
            votes: vec![],
            artists: vec![],
        }
    }
}

#[derive(Clone, Serialize, Deserialize, BorshDeserialize, BorshSerialize)]
#[serde(crate = "near_sdk::serde")]
pub struct Artist {
    pub artist_id: i32,
    pub age: i32,
    pub first_name: String,
    pub last_name: String,
    pub total_endorsements: i64,
    pub medium: String,
    pub a_image_link: String,
    pub b_image_link: String,
    pub d_image_link: String,
    pub x_image_link: String,
    pub y_image_link: String,
    pub location: String,
    pub date_added: Timestamp,
    pub added_by: AccountId,
    pub endorsements: Vec<Endorsement>

}

impl Artist {
    pub fn new(
        artist_id:i32,
        age: i32,
        first_name: String,
        last_name: String,
        medium: String,
        a_image_link: String,
        b_image_link: String,
        d_image_link: String,
        x_image_link: String,
        y_image_link: String,
        location: String) -> Self {

            Artist {
                artist_id, 
                age,
                first_name,
                last_name,
                total_endorsements: 0,
                medium,
                a_image_link,
                b_image_link,
                d_image_link,
                x_image_link,
                y_image_link,
                location,
                date_added: env::block_timestamp(),
                added_by: env::signer_account_id().to_string(),
                endorsements: vec![],
            }
        }

}
#[derive(Clone, Serialize, Deserialize, BorshDeserialize, BorshSerialize)]
#[serde(crate = "near_sdk::serde")]
pub struct Endorsement {
    pub endorser: AccountId,
    pub added_at: Timestamp,
    pub comment: String,
}

impl Endorsement{
    pub fn new(comment: String) -> Self {

        Endorsement {
            endorser: env::signer_account_id().to_string(),
            added_at: env:: block_timestamp(),
            comment,
        }
    }
}

'''
'''--- contract/src/utils.rs ---
pub type AccountId = String;

pub type Timestamp = u64;
'''
'''--- contract/test.sh ---

'''
'''--- package.json ---
{
  "name": "near-router",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@7urtle/lambda": "^1.4.1",
    "@parcel/utils": "^2.3.2",
    "@testing-library/jest-dom": "^5.16.3",
    "@testing-library/react": "^12.1.4",
    "@testing-library/user-event": "^13.5.0",
    "near-api-js": "^0.44.2",
    "near-cli": "^3.2.0",
    "parcel": "^2.3.2",
    "process": "^0.11.10",
    "react": "~17.0.1",
    "react-dom": "~17.0.1",
    "react-router-dom": "^6.3.0",
    "react-scripts": "5.0.0",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "parcel src/index.html",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

'''
'''--- src/App.js ---
import 'regenerator-runtime/runtime'
// import { useEffect, useState } from 'react'
// import ListExhibitions from './components/ListExhibitions.js'
// import CreateExhibition from './components/CreateExhibitions.js'
// import AddArtist from './components/AddArtists.js'
import * as React from 'react'
// import { login, logout } from './utils'
import './global.css'

import { Routes, Route, Link } from "react-router-dom";
import HomePage from './pages/HomePage';
import ArtistsPage from './pages/ArtistsPage';
// import ExhibitionsPage from './pages/ExhibitionsPage';
import AddExhibition from './pages/AddExhibition';
import AddArtistPage from './pages/AddArtistPage';
import Exhibition from './pages/Exhibition';
import ExhibitionsPage from './pages/ExhibitionsPage';
import DeleteExhibition from './pages/DeleteExhibition'
// import ExhibitionsMain from './pages/ExhibitionsMain';

// import { lastIndexof, substr } from "@7urtle/lambda";

// import getConfig from './config'

// const { networkId } = getConfig(process.env.NODE_ENV || 'development')

const App = () => {

    return (

<div>
      <header>
          <h1>Welcome to Awesome Exhibitions!</h1>
          <div>
            <nav>
            <Link to="/addartist"> Add Artist___</Link>
            <Link to="/addexhibition">  Add Exhibition___</Link>
              <Link to="/exhibitions">  Exhibitions___</Link>
              <Link to="artists">  Artists___</Link>
              <Link to="/">  Home___</Link>
              <Link to="/deleteexhibition">  Delete Exhibition</Link>
          </nav>
      </div>
      </header>
      <Routes>
        <Route path="/" element={<HomePage />} />
          <Route path="/artists" element={<ArtistsPage />} />
          <Route path="/exhibitions" element={<ExhibitionsPage />} />
          <Route path="/addexhibition" element={<AddExhibition />} />
          <Route path="/addartist" element={<AddArtistPage />} />
          <Route path="/exhibition/:id" element={<Exhibition />} />
          <Route path="/deleteexhibition" element={<DeleteExhibition />} />
          {/* <Route path="/exhibitions" element={<ExhibitionsMain />} /> */}
          

      </Routes>
      </div>
     
    )
  }

export default App;
'''
'''--- src/components/AddArtists.js ---
import React, { useState } from 'react'
    function AddArtist({toggleModal}) {
        const [id, setId] = useState(0)
        const [age, setAge] = useState(0)
      const [first_name, setFirstName] = useState('')
        const [last_name, setLastName] = useState('')
      const [medium, setMedium] = useState('')
      const [a_image_link, setAimage] = useState('')
      const [b_image_link, setBimage] = useState('')
      const [d_image_link, setDimage] = useState('')
      const [x_image_link, setXimage] = useState('')
      const [y_image_link, setYimage] = useState('')
      
        const [location, setLocation] = useState('')
        
      const [showNotification, setShowNotification] = useState(false)
      const handleSubmit = (event) => {
        event.preventDefault()
        window.contract.add_artist({
          id: id * 1, age: age * 1, first_name: first_name, last_name: last_name, medium: medium, location: location,
        a_image_link: a_image_link, b_image_link: b_image_link, d_image_link: d_image_link, x_image_link: x_image_link, y_image_link: y_image_link})
        setShowNotification(!showNotification)
        alert(`artist info: ${id} ${age} ${first_name} ${last_name} ${medium} ${location} ${a_image_link} ${b_image_link} ${d_image_link} ${x_image_link} ${y_image_link}`)
      }
    console.log(`its ${toggleModal}`);
      return (
        <div>
          {toggleModal == true && (
            <div className='addexhibition'>
              <form onSubmit={handleSubmit}>
                <label>
                  Enter artist info - Exhibition ID:
                  <input
                    type="number"
                    value={id}
                    onChange={(e) => setId(e.target.value)}
                  />
                          </label>
                          <label>
                  Enter Age:
                  <input
                    type="number"
                    value={age}
                    onChange={(e) => setAge(e.target.value)}
                  />
                          </label>
                          

                <label>
                  Enter first name:
                  <input
                    type="text"
                    value={first_name}
                    onChange={(e) => setFirstName(e.target.value)}
                  />
                          </label>
                          
                          <label>
                  Enter last name:
                  <input
                    type="text"
                    value={last_name}
                    onChange={(e) => setLastName(e.target.value)}
                  />
                          </label>
                          
                          <label>
                  Enter medium:
                  <input
                    type="text"
                    value={medium}
                    onChange={(e) => setMedium(e.target.value)}
                  />
                </label>

                <label>
                  Enter first image:
                  <input
                    type="text"
                    value={a_image_link}
                    onChange={(e) => setAimage(e.target.value)}
                  />
                </label>

                <label>
                  Enter second image:
                  <input
                    type="text"
                    value={b_image_link}
                    onChange={(e) => setBimage(e.target.value)}
                  />
                </label>

                <label>
                  Enter third image:
                  <input
                    type="text"
                    value={d_image_link}
                    onChange={(e) => setDimage(e.target.value)}
                  />
                </label>
                <label>
                  Enter fourth image:
                  <input
                    type="text"
                    value={x_image_link}
                    onChange={(e) => setXimage(e.target.value)}
                  />
                </label>
                <label>
                  Enter fifth image:
                  <input
                    type="text"
                    value={y_image_link}
                    onChange={(e) => setYimage(e.target.value)}
                  />
                </label>

                <label>
                  Enter location:
                  <input
                    type="text"
                    value={location}
                    onChange={(e) => setLocation(e.target.value)}
                  />
                </label>
                <input type="submit" className='submit' />
              </form>
            </div>
          )}
          
          {showNotification && <Notification />}
        </div>
        
      )
    }
    function Notification() {
      return (
        <aside>
          <footer>
            <div>✔ Succeeded </div> 
            <div>Added new artist just now!</div>
          </footer>
        </aside>
      )
    }
    export default AddArtist
'''
'''--- src/components/AddEndorsement.js ---
import React, { useState } from 'react'
    function AddEndorsement({toggleModal}) {
        const [id, setId] = useState(0)
        const [artist_id, setArtistId] = useState(0)

        const [comment, setComment] = useState('')
        
      const [showNotification, setShowNotification] = useState(false)
      const handleSubmit = (event) => {
        event.preventDefault()
        window.contract.add_endorsement({id:id * 1, artist_id:artist_id * 1, comment:comment})
        setShowNotification(!showNotification)
        alert(`endorement info: ${id} ${artist_id} ${comment}`)
      }
    console.log(`its ${toggleModal}`);
      return (
        <div>
          {toggleModal == true && (
            <div className='addexhibition'>
              <form onSubmit={handleSubmit}>
                <label>
                  Enter Exhibition ID:
                  <input
                    type="number"
                    value={id}
                    onChange={(e) => setId(e.target.value)}
                  />
                          </label>
                          <label>
                  Enter Artist ID:
                  <input
                    type="number"
                    value={artist_id}
                    onChange={(e) => setArtistId(e.target.value)}
                  />
                          </label>
                          

                <label>
                  Enter comment for the artist:
                  <input
                    type="text"
                    value={comment}
                    onChange={(e) => setComment(e.target.value)}
                  />
                          </label>
                <input type="submit" className='submit' />
              </form>
            </div>
          )}
          
          {showNotification && <Notification />}
        </div>
        
      )
    }
    function Notification() {
      return (
        <aside>
          <footer>
            <div>✔ Succeeded </div> 
            <div>Added new endorsement just now!</div>
          </footer>
        </aside>
      )
    }
export default AddEndorsement;
'''
'''--- src/components/ArtistNews.js ---

import React from 'react'

// const ONE_NEAR = 1_000_000_000_000_000_000_000_000
function ArtistNews({ artistnews }) {
//   const artist_count = window.contract.artist_count({ id: exhibition.id });
  // const [donationAmount, setDonationAmount] = useState(0)
  // const [showDonateNotification, setShowDonateNotification] = useState(false)
  // function donate(e) {
  //   e.preventDefault()
  //   console.log(donationAmount)
  //   window.contract.add_donation({ id: project.id, amount: donationAmount * 1 })
  //   setShowDonateNotification(!showDonateNotification)
  // }
//   console.log(exhibition.artists);

  return (
   
    <div className="exhibition">
      {/* <h3>{artistnews.art_news_id}</h3> */}
      {/* <h4>{artistnews.art_news_id} ; {artistnews.message}</h4> */}
      <span className="creator">{artistnews.art_news_id} - {artistnews.message}. { `They were added by:  `}{artistnews.creator} {`at `}{artistnews.created_at / 1000000}</span>
     
      </div>
 
    

  )
}

// function VoteNotification() {
//   return (
//     <aside>
//       <footer>
//         <div>✔ Succeeded </div>
//         <div>Vote was successful and added!!</div>
//       </footer>
//     </aside>
//   )
// }
export default ArtistNews;
'''
'''--- src/components/CreateExhibitions.js ---
import React, { useState } from 'react'
    function CreateExhibition({toggleModal}) {
      const [title, setTitle] = useState('')
      const [description, setDescription] = useState('')
      const [f_image_link, setFimageLink] = useState('')
      const [s_image_link, setSimageLink] = useState('')
      const [t_image_link, setTimageLink] = useState('')
      const [q_image_link, setQimageLink] = useState('')
      const [c_image_link, setCimageLink] = useState('')
      const [showNotification, setShowNotification] = useState(false)
      const handleSubmit = (event) => {
        event.preventDefault()
        window.contract.add_exhibition({
          title: title, description: description, f_image_link: f_image_link,
          s_image_link: s_image_link, t_image_link: t_image_link,
          q_image_link:q_image_link, c_image_link:c_image_link})
        setShowNotification(!showNotification)
        alert(`exhibition info: ${title} ${description} ${f_image_link} ${s_image_link} ${t_image_link} ${q_image_link} ${c_image_link}`)
      }
    console.log(`its ${toggleModal}`);
      return (
        <div>
          {toggleModal == true && (
            <div className='addexhibition'>
              <form onSubmit={handleSubmit}>
                <label>
                  Enter exhibition title:
                  <input
                    type="text"
                    value={title}
                    onChange={(e) => setTitle(e.target.value)}
                  />
                </label>

                {/* <label>
                  Enter budget:
                  <input
                    type="number"
                    value={target}
                    onChange={(e) => setTarget(e.target.value)}
                  />
                </label> */}

                <label>
                  Enter exhibition description:
                  <input
                    type="text"
                    value={description}
                    onChange={(e) => setDescription(e.target.value)}
                  />
                </label>
                <label>
                  Enter first exhibition image:
                  <input
                    type="text"
                    value={f_image_link}
                    onChange={(e) => setFimageLink(e.target.value)}
                  />
                </label>
                <label>
                  Enter second exhibition image:
                  <input
                    type="text"
                    value={s_image_link}
                    onChange={(e) => setSimageLink(e.target.value)}
                  />
                </label>
                <label>
                  Enter third exhibition image:
                  <input
                    type="text"
                    value={t_image_link}
                    onChange={(e) => setTimageLink(e.target.value)}
                  />
                </label>
                <label>
                  Enter fourth exhibition image:
                  <input
                    type="text"
                    value={q_image_link}
                    onChange={(e) => setQimageLink(e.target.value)}
                  />
                </label>
                <label>
                  Enter fifth exhibition image:
                  <input
                    type="text"
                    value={c_image_link}
                    onChange={(e) => setCimageLink(e.target.value)}
                  />
                </label>
                <input type="submit" className='submit' />
              </form>
            </div>
          )}
          
          {showNotification && <Notification />}
        </div>
        
      )
    }
    function Notification() {
      return (
        <aside>
          <footer>
            <div>✔ Succeeded </div> 
            <div>Added new event just now</div>
          </footer>
        </aside>
      )
    }
    export default CreateExhibition
'''
'''--- src/components/DeleteExhibitionForm.js ---
import React, { useState } from 'react'
    function DeleteExhibitionForm({toggleModal}) {
      const [id, setId] = useState(0)
    //   const [description, setDescription] = useState('')
    //   const [f_image_link, setFimageLink] = useState('')
    //   const [s_image_link, setSimageLink] = useState('')
    //   const [t_image_link, setTimageLink] = useState('')
      const [showNotification, setShowNotification] = useState(false)
      const handleSubmit = (event) => {
        event.preventDefault()
        window.contract.delete_exhibition({id: id * 1})
        setShowNotification(!showNotification)
        alert(`exhibition info: ${id} is being deleted!`)
      }
    console.log(`its ${toggleModal}`);
      return (
        <div>
          {toggleModal == true && (
            <div className='addexhibition'>
              <form onSubmit={handleSubmit}>
                <label>
                  Enter exhibition ID:
                  <input
                    type="number"
                    value={id}
                    onChange={(e) => setId(e.target.value)}
                  />
                </label>

                {/* <label>
                  Enter budget:
                  <input
                    type="number"
                    value={target}
                    onChange={(e) => setTarget(e.target.value)}
                  />
                </label> */}

                {/* <label>
                  Enter exhibition description:
                  <input
                    type="text"
                    value={description}
                    onChange={(e) => setDescription(e.target.value)}
                  />
                </label>
                <label>
                  Enter first exhibition image:
                  <input
                    type="text"
                    value={f_image_link}
                    onChange={(e) => setFimageLink(e.target.value)}
                  />
                </label>
                <label>
                  Enter second exhibition image:
                  <input
                    type="text"
                    value={s_image_link}
                    onChange={(e) => setSimageLink(e.target.value)}
                  />
                </label>
                <label>
                  Enter third exhibition image:
                  <input
                    type="text"
                    value={t_image_link}
                    onChange={(e) => setTimageLink(e.target.value)}
                  />
                </label> */}
                <input type="submit" className='submit' />
              </form>
            </div>
          )}
          
          {showNotification && <Notification />}
        </div>
        
      )
    }
    function Notification() {
      return (
        <aside>
          <footer>
            <div>✔ Succeeded </div> 
            <div>Deleted exhibition just now</div>
          </footer>
        </aside>
      )
    }
export default DeleteExhibitionForm;
'''
'''--- src/components/ExhibitionNews.js ---

import React, { useState, useEffect} from 'react'

// const ONE_NEAR = 1_000_000_000_000_000_000_000_000
function ExhibitionNews({ exhibitionnews }) {

  function getDate() {
    const unixTime = exhibitionnews.created_at / 1000000;
    const date = new Date(unixTime);

    return (
      date
    )
    
  }

  //   const artist_count = window.contract.artist_count({ id: exhibition.id });
  // const [donationAmount, setDonationAmount] = useState(0)
  // const [showDonateNotification, setShowDonateNotification] = useState(false)
  // function donate(e) {
  //   e.preventDefault()
  //   console.log(donationAmount)
  //   window.contract.add_donation({ id: project.id, amount: donationAmount * 1 })
  //   setShowDonateNotification(!showDonateNotification)
  // }
  //   console.log(exhibition.artists);
  // console.log(date.toLocaleDateString("en-US"));
  let datetime = getDate();
  console.log(datetime)
  return (

    <div className="exhibition">

      {/* <div>{exhibitionnews.date}</div> */}
      {/* <h3>{exhibitionnews.exhibition_news_id}</h3> */}
      {/* <h4>{exhibitionnews.message}</h4> */}
      <span className="creator">{exhibitionnews.exhibition_news_id} - {exhibitionnews.message}. {`It was created by:  `}{exhibitionnews.creator} {`at `}{exhibitionnews.created_at / 1000000}</span>
      {/* <span>{date}</span> */}
 
      </div>
      

  )
}

// function VoteNotification() {
//   return (
//     <aside>
//       <footer>
//         <div>✔ Succeeded </div>
//         <div>Vote was successful and added!!</div>
//       </footer>
//     </aside>
//   )
// }
export default ExhibitionNews;
'''
'''--- src/components/ExhibitionsIndex.js ---

import React from 'react'

// const ONE_NEAR = 1_000_000_000_000_000_000_000_000
function ExhibitionsIndex({ exhibition }) {
  const artist_count = window.contract.artist_count({ id: exhibition.id });
  // const [donationAmount, setDonationAmount] = useState(0)
  // const [showDonateNotification, setShowDonateNotification] = useState(false)
  // function donate(e) {
  //   e.preventDefault()
  //   console.log(donationAmount)
  //   window.contract.add_donation({ id: project.id, amount: donationAmount * 1 })
  //   setShowDonateNotification(!showDonateNotification)
  // }
  console.log(exhibition.artists);

  return (
   
    <div className="exhibition">
      <h3>{exhibition.id}{`     /`}{exhibition.title}</h3>
      <h4>{exhibition.description}</h4>
      <span className="creator">{ `created by:  `}{exhibition.creator}</span>
      <h4>Image Examples: </h4>
      <span>
        <img src={exhibition.f_image_link} alt='' />{`  `}
        <img src={exhibition.s_image_link} alt='' />{`  `}
        <img src={exhibition.t_image_link} alt='' />{`  `}
        <img src={exhibition.q_image_link} alt='' />{`  `}
        <img src={exhibition.c_image_link} alt='' />{`  `}

      </span>

      {/* <h3>{artist_count}</h3> */}
      <h4>Votes: {exhibition.total_votes}</h4>
      <button
        onClick={() => {
          window.contract.add_vote({ id: exhibition.id })
        }}
      >
        Vote On This Exhibition!
      </button>
     
      </div>
 
    

  )
}

// function VoteNotification() {
//   return (
//     <aside>
//       <footer>
//         <div>✔ Succeeded </div>
//         <div>Vote was successful and added!!</div>
//       </footer>
//     </aside>
//   )
// }
export default ExhibitionsIndex;
'''
'''--- src/components/ListArtists.js ---

import React from 'react'

function ListArtists({ exhibition }) {

    console.log(exhibition.artists);
    
    const data = exhibition.artists;

    return (
        <>
            {
                exhibition && data.map((d) => {
                    return (
                        <div className="exhibition">
                            <h3>Artist {d.artist_id}: {d.first_name} {d.last_name}</h3>
                            <ul key={d.artist_id}>
                     <li>Age: {d.age}</li>
                     {/* <li>First Name: {d.first_name}</li> */}
                    {/* <li>Last Name: {d.last_name}</li> */}
                                <li>Location: {d.location}</li>
                                <li>Medium: {d.medium}</li>
                                {/* <li>Added By: {d.added_by}</li> */}
                                </ul>
                                <span>
        <img src={d.a_image_link} alt='' />{`  `}
        <img src={d.b_image_link} alt='' />{`  `}
                                <img src={d.d_image_link} alt='' />{`  `}
                                <img src={d.x_image_link} alt='' />{`  `}
                                <img src={d.y_image_link} alt='' />{`  `}

      </span>
                               

                 
                            <h5>Endorsements: {d.total_endorsements}</h5>
                            <span className="creator">{`Added by:  `}{d.added_by}{ `            `}</span>
                      </div>
  
                    )
                })
            }

    </>

  )
}

export default ListArtists;
'''
'''--- src/components/ListExhibitions.js ---

import React from 'react'
// const ONE_NEAR = 1_000_000_000_000_000_000_000_000
function ListExhibitions({ exhibition }) {
  const artist_count = window.contract.artist_count({ id: exhibition.id });
  // const [donationAmount, setDonationAmount] = useState(0)
  // const [showDonateNotification, setShowDonateNotification] = useState(false)
  // function donate(e) {
  //   e.preventDefault()
  //   console.log(donationAmount)
  //   window.contract.add_donation({ id: project.id, amount: donationAmount * 1 })
  //   setShowDonateNotification(!showDonateNotification)
  // }
  return (
    <div className="exhibition">
      <h2>{exhibition.title}</h2>{' '}
      <span className="creator">{exhibition.creator}</span>
      <h3>description:</h3>
      <p>{exhibition.description}</p>
      {/* <h4>target: {project.estimated_budget} NEAR</h4> */}
      <h4>Votes: {exhibition.total_votes}</h4>
      <h4>Artists: {}</h4>
      {/* <h4>Voters: {exhibition.votes}</h4> */}
      <button
        onClick={() => {
          window.contract.add_vote({ id: exhibition.id })
        }}
      >
        Vote
      </button>
    </div>
  )
}

// function VoteNotification() {
//   return (
//     <aside>
//       <footer>
//         <div>✔ Succeeded </div>
//         <div>Vote was successful and added!!</div>
//       </footer>
//     </aside>
//   )
// }
export default ListExhibitions
'''
'''--- src/config.js ---
const CONTRACT_NAME = process.env.CONTRACT_NAME || '<YOUR_CONTRACT_ACCOUNT>.<YOUR_TESTNET_USERNAME>.testnet'

function getConfig(env) {
  switch (env) {

  case 'production':
  case 'mainnet':
    return {
      networkId: 'mainnet',
      nodeUrl: 'https://rpc.mainnet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.near.org',
      helperUrl: 'https://helper.mainnet.near.org',
      explorerUrl: 'https://explorer.mainnet.near.org',
    }
  case 'development':
  case 'testnet':
    return {
      networkId: 'testnet',
      nodeUrl: 'https://rpc.testnet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.testnet.near.org',
      helperUrl: 'https://helper.testnet.near.org',
      explorerUrl: 'https://explorer.testnet.near.org',
    }
  case 'betanet':
    return {
      networkId: 'betanet',
      nodeUrl: 'https://rpc.betanet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.betanet.near.org',
      helperUrl: 'https://helper.betanet.near.org',
      explorerUrl: 'https://explorer.betanet.near.org',
    }
  case 'local':
    return {
      networkId: 'local',
      nodeUrl: 'http://localhost:3030',
      keyPath: `${process.env.HOME}/.near/validator_key.json`,
      walletUrl: 'http://localhost:4000/wallet',
      contractName: CONTRACT_NAME,
    }
  case 'test':
  case 'ci':
    return {
      networkId: 'shared-test',
      nodeUrl: 'https://rpc.ci-testnet.near.org',
      contractName: CONTRACT_NAME,
      masterAccount: 'test.near',
    }
  case 'ci-betanet':
    return {
      networkId: 'shared-test-staging',
      nodeUrl: 'https://rpc.ci-betanet.near.org',
      contractName: CONTRACT_NAME,
      masterAccount: 'test.near',
    }
  default:
    throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`)
  }
}

module.exports = getConfig
'''
'''--- src/global.css ---
/* @import url('https://fonts.googleapis.com/css2?family=Inconsolata&display=swap');
* {
  box-sizing: border-box;
} */

html {
    --bg: #1f2028;
    --fg: #ffffff;
    --gray: #555;
    --light-gray: #ccc;
    --shadow: #e6e6e6;
    --success: rgb(90, 206, 132);
    --primary: #a9adc1;
    --secondary: #0072CE;
  
    background-color: var(--bg);
    color: var(--fg);
    font-family: -apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica,Arial,sans-serif;
    font-size: calc(0.9em + 0.5vw);
    font-family: 'Inconsolata', monospace;
    line-height: 1.3;
  }
  
  body {
    margin: 0;
    padding: 1em;
  }
  .exhibition {
    background-color: #2e3039;
    padding: 2em;
    margin: 1em;
  }
  
  
  header {
    display: flex;
    justify-content: space-between;
  }
  /* .logo{
    background-image: url(assets/logo-white.svg);
    width: 70px;
    height: 70px;
  } */
  a,
  .link {
    color: var(--primary);
    text-decoration: none;
  }
  a:hover,
  a:focus,
  .link:hover,
  .link:focus {
    text-decoration: underline;
  }
  .id {
    color: #ffffff;
  }
  a:active,
  .link:active {
    color: var(--secondary);
  }
  
  button, input {
    font: inherit;
    outline: none;
  }
  
  button {
    background-color: var(--fg);
    border-radius: 5px;
    border: none;
    color: black;
    cursor: pointer;
    padding: 0.3em 0.75em;
    transition: transform 30ms;
  }
  .signin{
    text-align: center;
  }
  .submit{
    background-color: var(--fg);
    border-radius: 5px;
    border: none;
    color: black;
    cursor: pointer;
    padding: 0.3em 0.75em;
    transition: transform 30ms;
  }
  button:hover, button:focus {
    box-shadow: 0 0 10em rgba(255, 255, 255, 0.2) inset;
  }
  button:active {
    box-shadow: 0 0 10em rgba(0, 0, 0, 0.1) inset;
  }
  button.link {
    background: none;
    border: none;
    box-shadow: none;
    display: inline;
  }
  [disabled] button, button[disabled] {
    box-shadow: none;
    background-color: var(--light-gray);
    color: gray;
    cursor: not-allowed;
    transform: none;
  }
  [disabled] button {
    text-indent: -900em;
    width: 2em;
    position: relative;
  }
  [disabled] button:after {
    content: " ";
    display: block;
    width: 0.8em;
    height: 0.8em;
    border-radius: 50%;
    border: 2px solid #fff;
    border-color: var(--fg) transparent var(--fg) transparent;
    animation: loader 1.2s linear infinite;
    position: absolute;
    top: 0.45em;
    right: 0.5em;
  }
  @keyframes loader {
    0% { transform: rotate(0deg) }
    100% { transform: rotate(360deg) }
  }
  
  fieldset {
    border: none;
    padding: 2em 0;
  }
  .creator{
    background-color: var(--bg);
    font-size: 0.7em;
    padding: 0.5em;
    border-radius: 5%;
  }
  .exhibitions {
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
  }
  @media (max-width: 800px) {
    .exhibitions {
      flex-direction: column;
    }
  }
  
  .addexhibition {
    background-color: #2e3039;
    padding: 3em;
    margin-top: 3em;
    
  }
  
  input {
    background-color: #1f2028;
    border: none;
    border-radius: 5px 0 0 5px;
    caret-color: var(--primary);
    color: #a5adbd;
    padding: 0.25em 1em;
    margin: 0.5em;
  }
  input::selection {
    background-color: var(--secondary);
    color: #efefef;
  }
  input:focus {
    box-shadow: 0 0 10em rgba(0, 0, 0, 0.02) inset;
  }
  
  code {
    color: var(--gray);
  }
  
  li {
    padding-bottom: 1em;
  }
  
  aside {
    animation: notify ease-in-out 10s;
    background-color: var(--shadow);
    border-radius: 5px;
    bottom: 0;
    font-size: 0.8em;
    margin: 1em;
    padding: 1em;
    position: fixed;
    transform: translateY(10em);
    right: 0;
  }
  aside footer {
    display: flex;
    font-size: 0.9em;
    justify-content: space-between;
    margin-top: 0.5em;
  }
  aside footer *:first-child {
    color: var(--success);
  }
  aside footer *:last-child {
    color: var(--gray);
  }
  @keyframes notify {
    0% { transform: translateY(10em) }
    5% { transform: translateY(0) }
    95% { transform: translateY(0) }
    100% { transform: translateY(10em) }
  }
  
  @media (prefers-color-scheme: dark) {
    html {
      --bg: #1e1e1e;
      --fg: #efefef;
      --gray: #aaa;
      --shadow: #2a2a2a;
      --light-gray: #444;
    }
    /* h1 {
      background-image: url(assets/logo-white.svg);
    } */
    input:focus {
      box-shadow: 0 0 10em rgba(255, 255, 255, 0.02) inset;
    }
  }
'''
'''--- src/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <!-- <meta charset="utf-8" />
    <link rel="icon" href="./assets/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="apple-touch-icon" href="./assets/favicon.ico" /> -->
    <title>Events Creator App.</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
    <script type="module" src="./index.js"></script>
  </body>
</html>
'''
'''--- src/index.js ---
import React from 'react';
import ReactDOM from 'react-dom';
import App from './App';
import { initContract } from './utils';
import { BrowserRouter } from "react-router-dom";

window.nearInitPromise = initContract()
  .then(() => {
    ReactDOM.render(
      <BrowserRouter>
        <App />
        </BrowserRouter>,
      document.querySelector('#root')
    )
  })
  .catch(console.error)
'''
'''--- src/pages/AddArtistPage.js ---
// import CreateExhibition from '../components/CreateExhibitions.js';
import ListExhibitions from '../components/ListExhibitions.js';
import AddArtist from '../components/AddArtists.js';
import 'regenerator-runtime/runtime';
import { useEffect, useState } from 'react';

import React from 'react';
import { login, logout } from '../utils';
import '../global.css';

import getConfig from '../config';

const { networkId } = getConfig(process.env.NODE_ENV || 'development');

const AddArtistPage = () => {

    const [exhibitions, setExhibitions] = useState([]);
    const [toggleModal, setToggleModal] = useState(false);

    function addArtist() {
        setToggleModal(!toggleModal)
    }
    
    // useEffect(
    //     () => {
    //       // in this case, we only care to query the contract when signed in
    //       if (window.walletConnection.isSignedIn()) {
    //         // window.contract is set by initContract in index.js
    //         window.contract.list_exhibitions().then((exhibitionprojects) => {
    //           const exhibitionList = [...exhibitionprojects]
    //           setExhibitions(exhibitionList)
    //         })
    //       }
    //     },
    
    //     // The second argument to useEffect tells React when to re-run the effect
    //     // Use an empty array to specify "only run on first render"
    //     // This works because signing into NEAR Wallet reloads the page
    //     // [exhibitions],
    //     [],
    // )
    
    if (!window.walletConnection.isSignedIn()) {
        return (
            <main className='signin'>
                <h2>Please Sign In!</h2>
                <p style={{ textAlign: 'center' }}>
                    Sign in to add an artist:
                </p>
                <p style={{ textAlign: 'center', marginTop: '2.5em' }}>
                    <button onClick={login}>Sign in</button>
                </p>
            </main>
        )
    }

    return (
        // <div>
        //     <h1>
        //         Add Am Exhibition!!
        //     </h1>
            
        // </div>
        <>
            <header>
        <h1>Add An Artist!!</h1>
            
          <div className="logo"></div>
          <button className="link" style={{ float: 'right' }} onClick={logout}>
            Sign out <span className="id">{window.accountId}</span>
          </button>
        </header>
        <button onClick={addArtist}>Add An Artist!</button>

  
        <main>
          <AddArtist toggleModal={toggleModal} />
          {/* <AddArtist toggleModal={toggleModal}/> */}
          {/* <section className='events'>
            {exhibitions.map((exhibition, id) => {
              return (
                <div key={id}>
                  <ListExhibitions exhibition={exhibition} />
                </div>
              )
            })}
          </section> */}
        </main>
      </>
    );
};
export default AddArtistPage;
'''
'''--- src/pages/AddExhibition.js ---
import CreateExhibition from '../components/CreateExhibitions.js';
import ListExhibitions from '../components/ListExhibitions.js';
import 'regenerator-runtime/runtime';
import { useEffect, useState } from 'react';

import React from 'react';
import { login, logout } from '../utils';
import '../global.css';

import getConfig from '../config';

const { networkId } = getConfig(process.env.NODE_ENV || 'development');

const AddExhibition = () => {

    const [exhibitions, setExhibitions] = useState([]);
    const [toggleModal, setToggleModal] = useState(false);

    function addExhibition() {
        setToggleModal(!toggleModal)
    }
    
    // useEffect(
    //     () => {
    //       // in this case, we only care to query the contract when signed in
    //       if (window.walletConnection.isSignedIn()) {
    //         // window.contract is set by initContract in index.js
    //         window.contract.list_exhibitions().then((exhibitionprojects) => {
    //           const exhibitionList = [...exhibitionprojects]
    //           setExhibitions(exhibitionList)
    //         })
    //       }
    //     },
    
    //     // The second argument to useEffect tells React when to re-run the effect
    //     // Use an empty array to specify "only run on first render"
    //     // This works because signing into NEAR Wallet reloads the page
    //     // [exhibitions],
    //     [],
    // )
    
    if (!window.walletConnection.isSignedIn()) {
        return (
            <main className='signin'>
                <h2>Please Sign In!</h2>
                <p style={{ textAlign: 'center' }}>
                    Sign in to add an exhibition:
                </p>
                <p style={{ textAlign: 'center', marginTop: '2.5em' }}>
                    <button onClick={login}>Sign in</button>
                </p>
            </main>
        )
    }

    return (
        // <div>
        //     <h1>
        //         Add Am Exhibition!!
        //     </h1>
            
        // </div>
        <>
            <header>
        <h1>Add An Exhibition!!</h1>
            
          <div className="logo"></div>
          <button className="link" style={{ float: 'right' }} onClick={logout}>
            Sign out <span className="id">{window.accountId}</span>
          </button>
        </header>
        <button onClick={addExhibition}>Add an exhibition</button>

  
        <main>
          <CreateExhibition toggleModal={toggleModal} />
          {/* <AddArtist toggleModal={toggleModal}/> */}
          {/* <section className='events'>
            {exhibitions.map((exhibition, id) => {
              return (
                <div key={id}>
                  <ListExhibitions exhibition={exhibition} />
                </div>
              )
            })}
          </section> */}
        </main>
      </>
    );
};
export default AddExhibition;
'''
'''--- src/pages/ArtistsPage.js ---
import 'regenerator-runtime/runtime'
import { useEffect, useState } from 'react'
// import ListExhibitions from '../components/ListExhibitions.js'
// import CreateExhibition from '../components/CreateExhibitions.js'
import ExhibitionsIndex from '../components/ExhibitionsIndex.js'

import React from 'react'
import { login, logout } from '../utils'
import '../global.css'

import { NavLink } from "react-router-dom";

import getConfig from '../config'
import ListArtists from '../components/ListArtists.js'

import AddEndorsement from '../components/AddEndorsement.js'

const { networkId } = getConfig(process.env.NODE_ENV || 'development')

const ArtistsPage = () => {
  // use React Hooks to store greeting in component state
  const [exhibitions, setExhibitions] = useState([]);

  const [toggleModal, setToggleModal] = useState(false);

  function addEndorsement() {
    setToggleModal(!toggleModal)
}

  // The useEffect hook can be used to fire side-effects during render
  // Learn more: https://reactjs.org/docs/hooks-intro.html
  useEffect(
    () => {
      // in this case, we only care to query the contract when signed in
      if (window.walletConnection.isSignedIn()) {
        // window.contract is set by initContract in index.js
        window.contract.list_exhibitions().then((exhibitionprojects) => {
          const exhibitionList = [...exhibitionprojects]

          setExhibitions(exhibitionList)
 
          })
      }
    },

    // The second argument to useEffect tells React when to re-run the effect
    // Use an empty array to specify "only run on first render"
    // This works because signing into NEAR Wallet reloads the page
    // [exhibitions],
    [],
  )

  // if not signed in, return early with sign-in prompt
  if (!window.walletConnection.isSignedIn()) {
    return (
      <main className='signin'>
        <h2>Please Sign In!</h2>
        <p style={{ textAlign: 'center' }}>
          Sign in to see the current artists:
        </p>
        <p style={{ textAlign: 'center', marginTop: '2.5em' }}>
          <button onClick={login}>Sign in</button>
        </p>
      </main>
    )
  }

  return (
    // use React Fragment, <>, to avoid wrapping elements in unnecessary divs
    <>
      <header>
        <div className="logo"></div>
        <button className="link" style={{ float: 'right' }} onClick={logout}>
          Sign out <span className="id">{window.accountId}</span>
        </button>
      </header>
      

      <main>
      <button onClick={addEndorsement}>Add an endorsement for an artist:</button>
      <AddEndorsement toggleModal={toggleModal} />
        <h2>Current Artists List By Exhibition:</h2>
        

        <section className='events'>
          {exhibitions.map((exhibition, id) => {
            return (
         
              <div key={id}>
                {/* <NavLink to={"/exhibition/" + exhibition.id}> */}
                  {/* Exhibition number: {exhibition.id}</NavLink> */}
                <h3>Exhibition {exhibition.id}: {exhibition.title}</h3>
                <ListArtists exhibition={exhibition} />
              </div>
              
            )
          })}
        </section>
      </main>
    </>
  )
}
export default ArtistsPage;
// // import { useEffect, useState } from 'react';
// import '../global.css';
// import React from 'react';

// const ArtistsPage = () => {

//     return (
//         <>
//             <div>
//             <h1>Artists</h1>
//                 <p>Artists Page</p>

//             </div>
//             </>
//     );
// };
// export default ArtistsPage;
'''
'''--- src/pages/DeleteExhibition.js ---
// import CreateExhibition from '../components/CreateExhibitions.js';
import ListExhibitions from '../components/ListExhibitions.js';
import 'regenerator-runtime/runtime';
import { useEffect, useState } from 'react';
import DeleteExhibitionForm from '../components/DeleteExhibitionForm.js'

import React from 'react';
import { login, logout } from '../utils';
import '../global.css';

import getConfig from '../config';

const { networkId } = getConfig(process.env.NODE_ENV || 'development');

const DeleteExhibition = () => {

    const [exhibitions, setExhibitions] = useState([]);
    const [toggleModal, setToggleModal] = useState(false);

    function deleteExhibition() {
        setToggleModal(!toggleModal)
    }
    
    // useEffect(
    //     () => {
    //       // in this case, we only care to query the contract when signed in
    //       if (window.walletConnection.isSignedIn()) {
    //         // window.contract is set by initContract in index.js
    //         window.contract.list_exhibitions().then((exhibitionprojects) => {
    //           const exhibitionList = [...exhibitionprojects]
    //           setExhibitions(exhibitionList)
    //         })
    //       }
    //     },
    
    //     // The second argument to useEffect tells React when to re-run the effect
    //     // Use an empty array to specify "only run on first render"
    //     // This works because signing into NEAR Wallet reloads the page
    //     // [exhibitions],
    //     [],
    // )
    
    if (!window.walletConnection.isSignedIn()) {
        return (
            <main className='signin'>
                <h2>Please Sign In!</h2>
                <p style={{ textAlign: 'center' }}>
                    Sign in to delete an exhibition:
                </p>
                <p style={{ textAlign: 'center', marginTop: '2.5em' }}>
                    <button onClick={login}>Sign in</button>
                </p>
            </main>
        )
    }

    return (
        // <div>
        //     <h1>
        //         Add Am Exhibition!!
        //     </h1>
            
        // </div>
        <>
            <header>
        <h1>Delete An Exhibition</h1>
            
          <div className="logo"></div>
          <button className="link" style={{ float: 'right' }} onClick={logout}>
            Sign out <span className="id">{window.accountId}</span>
          </button>
        </header>
        <button onClick={deleteExhibition}>Delete an exhibition</button>

  
        <main>
          <DeleteExhibitionForm toggleModal={toggleModal} />
          {/* <AddArtist toggleModal={toggleModal}/> */}
          {/* <section className='events'>
            {exhibitions.map((exhibition, id) => {
              return (
                <div key={id}>
                  <ListExhibitions exhibition={exhibition} />
                </div>
              )
            })}
          </section> */}
        </main>
      </>
    );
};
export default DeleteExhibition;
'''
'''--- src/pages/Exhibition.js ---
import { useEffect, useState } from 'react';
import '../global.css';
import React from 'react';
import { useParams, withRouter } from "react-router";

const Exhibition = () => {

    const params = useParams()
    const [exhibition, setExhibition] = useState({});

    useEffect(() => {
        async function fetchData() {
            const res = await window.contract.list_exhibitions(exhibition.id);
            setExhibition(res.data);
        }
        fetchData();
    });

    return (
        <>
            <div className="exhibition">
                <h1>Exhibition Id: {exhibition.id}</h1>
      <h2>{exhibition.title}</h2>{' '}
      <span className="creator">{exhibition.creator}</span>
      <h3>description:</h3>
      <p>{exhibition.description}</p>
      {/* <h4>target: {project.estimated_budget} NEAR</h4> */}
      <h4>Votes: {exhibition.total_votes}</h4>
      <h4>Artists: {}</h4>
      {/* <h4>Voters: {exhibition.votes}</h4> */}
      <button
        onClick={() => {
          window.contract.add_vote({ id: exhibition.id })
        }}
      >
        Vote
      </button>
    </div>
            </>
    );
};
export default Exhibition;
'''
'''--- src/pages/ExhibitionsMain.js ---
import 'regenerator-runtime/runtime'
import { useEffect, useState } from 'react'
import ExhibitionsIndex from '../components/ExhibitionsIndex.js'
import CreateExhibition from '../components/CreateExhibitions.js'

import React from 'react'
import { login, logout } from '../utils'
import '../global.css'

import { NavLink } from "react-router-dom";

import getConfig from '../config'

const { networkId } = getConfig(process.env.NODE_ENV || 'development')

const ExhibitionsMain= () => {
  // use React Hooks to store greeting in component state
  const [exhibitions, setExhibitions] = useState([])

//   function addExhibition() {
//     setToggleModal(!toggleModal)
//   }

//   function addArtist() {
//     setToggleModal(!toggleModal)
//   }

  // The useEffect hook can be used to fire side-effects during render
  // Learn more: https://reactjs.org/docs/hooks-intro.html
  useEffect(
    () => {
      // in this case, we only care to query the contract when signed in
      if (window.walletConnection.isSignedIn()) {
        // window.contract is set by initContract in index.js
        window.contract.list_exhibitions().then((exhibitionprojects) => {
          const exhibitionList = [...exhibitionprojects]
          setExhibitions(exhibitionList)
        })
      }
    },

    // The second argument to useEffect tells React when to re-run the effect
    // Use an empty array to specify "only run on first render"
    // This works because signing into NEAR Wallet reloads the page
    // [exhibitions],
    [],
  )

  // if not signed in, return early with sign-in prompt
  if (!window.walletConnection.isSignedIn()) {
    return (
      <main className='signin'>
        <h1>Welcome to Awesome Exhibitions</h1>
        <p style={{ textAlign: 'center' }}>
          Click the button below to sign in:
        </p>
        <p style={{ textAlign: 'center', marginTop: '2.5em' }}>
          <button onClick={login}>Sign in</button>
        </p>
      </main>
    )
  }

  return (
    // use React Fragment, <>, to avoid wrapping elements in unnecessary divs
    <>
      <header>
        <div className="logo"></div>
        <button className="link" style={{ float: 'right' }} onClick={logout}>
          Sign out <span className="id">{window.accountId}</span>
        </button>
      </header>

          <main>
          <h1>Current Exhibitions List</h1>
        {/* <CreateExhibition toggleModal={toggleModal} /> */}
        {/* <AddArtist toggleModal={toggleModal}/> */}
        {/* <section className='events'>
          {exhibitions.map((exhibition, id) => {
            return (
                <div key={id}>
                  {/* <NavLink to={"/exhibition/" + exhibition.id}> Exhibitions number: {exhibition.id}</NavLink> */}
                {/* <ExhibitionsIndex exhibition={exhibition}/> */}
              {/* </div>
            )
          })} */}
        {/* </section> */}
      </main>
    </>
  )
}
export default ExhibitionsMain;
'''
'''--- src/pages/ExhibitionsPage.js ---
import 'regenerator-runtime/runtime'
import { useEffect, useState } from 'react'
// import ListExhibitions from '../components/ListExhibitions.js'
import CreateExhibition from '../components/CreateExhibitions.js'
import ExhibitionsIndex from '../components/ExhibitionsIndex.js'

import React from 'react'
import { login, logout } from '../utils'
import '../global.css'

import { NavLink } from "react-router-dom";

import getConfig from '../config'

const { networkId } = getConfig(process.env.NODE_ENV || 'development')

const ExhibitionsPage = () => {
  // use React Hooks to store greeting in component state
  const [exhibitions, setExhibitions] = useState([]);

  // The useEffect hook can be used to fire side-effects during render
  // Learn more: https://reactjs.org/docs/hooks-intro.html
  useEffect(
    () => {
      // in this case, we only care to query the contract when signed in
      if (window.walletConnection.isSignedIn()) {
        // window.contract is set by initContract in index.js
        window.contract.list_exhibitions().then((exhibitionprojects) => {
          const exhibitionList = [...exhibitionprojects]

          setExhibitions(exhibitionList)
 
          })
      }
    },

    // The second argument to useEffect tells React when to re-run the effect
    // Use an empty array to specify "only run on first render"
    // This works because signing into NEAR Wallet reloads the page
    // [exhibitions],
    [],
  )

  // if not signed in, return early with sign-in prompt
  if (!window.walletConnection.isSignedIn()) {
    return (
      <main className='signin'>
        <h2>Please Sign In!</h2>
        <p style={{ textAlign: 'center' }}>
          Sign in to see the current exhibitions:
        </p>
        <p style={{ textAlign: 'center', marginTop: '2.5em' }}>
          <button onClick={login}>Sign in</button>
        </p>
      </main>
    )
  }

  return (
    // use React Fragment, <>, to avoid wrapping elements in unnecessary divs
    <>
      <header>
        <div className="logo"></div>
        <button className="link" style={{ float: 'right' }} onClick={logout}>
          Sign out <span className="id">{window.accountId}</span>
        </button>
      </header>

          <main>
        <h2>Current Exhibitions List:</h2>

        <section className='events'>
          {exhibitions.map((exhibition, id) => {
            return (
         
              <div key={id}>
                <NavLink to={"/exhibition/" + exhibition.id}>
                  Exhibition number: {exhibition.id}</NavLink>
                
                <ExhibitionsIndex exhibition={exhibition} />
              </div>
              
            )
          })}
        </section>
      </main>
    </>
  )
}
export default ExhibitionsPage;
'''
'''--- src/pages/HomePage.js ---
import 'regenerator-runtime/runtime'
import { useEffect, useState } from 'react'
// import ListExhibitions from '../components/ListExhibitions.js'
// import CreateExhibition from '../components/CreateExhibitions.js'
// import ExhibitionsIndex from '../components/ExhibitionsIndex.js'

import React from 'react'
import { login, logout } from '../utils'
import '../global.css'

import { NavLink } from "react-router-dom";

import getConfig from '../config'
import ArtistNews from '../components/ArtistNews'
import ExhibitionNews from '../components/ExhibitionNews'

const { networkId } = getConfig(process.env.NODE_ENV || 'development')

const ExhibitionsPage = () => {
  // use React Hooks to store greeting in component state
  const [artistsnews, setArtistNews] = useState([]);
  const [exhibitionsnews, setExhibitionNews] = useState([]);

  // The useEffect hook can be used to fire side-effects during render
  // Learn more: https://reactjs.org/docs/hooks-intro.html
  useEffect(
    () => {
      // in this case, we only care to query the contract when signed in
      if (window.walletConnection.isSignedIn()) {
        // window.contract is set by initContract in index.js
        window.contract.list_artists_news().then((exhibitionartistnews) => {
          const exhibitionArtNews = [...exhibitionartistnews]

          setArtistNews(exhibitionArtNews)
 
          })
      }
    },

    // The second argument to useEffect tells React when to re-run the effect
    // Use an empty array to specify "only run on first render"
    // This works because signing into NEAR Wallet reloads the page
    // [exhibitions],
    [],
  )

  useEffect(
    () => {
      // in this case, we only care to query the contract when signed in
      if (window.walletConnection.isSignedIn()) {
        // window.contract is set by initContract in index.js
        window.contract.list_exhibition_news().then((exhibitionexhibnews) => {
          const exhibitionExNews = [...exhibitionexhibnews]

          setExhibitionNews(exhibitionExNews)
 
          })
      }
    },

    // The second argument to useEffect tells React when to re-run the effect
    // Use an empty array to specify "only run on first render"
    // This works because signing into NEAR Wallet reloads the page
    // [exhibitions],
    [],
  )

  // if not signed in, return early with sign-in prompt
  if (!window.walletConnection.isSignedIn()) {
    return (
      <main className='signin'>
        <h2>Please Sign In!</h2>
        <p style={{ textAlign: 'center' }}>
          Sign in to see the current exhibitions, artists and news!:
        </p>
        <p style={{ textAlign: 'center', marginTop: '2.5em' }}>
          <button onClick={login}>Sign in</button>
        </p>
      </main>
    )
  }

  return (
    // use React Fragment, <>, to avoid wrapping elements in unnecessary divs
    <>
      <header>
        <div className="logo"></div>
        <button className="link" style={{ float: 'right' }} onClick={logout}>
          Sign out <span className="id">{window.accountId}</span>
        </button>
      </header>

          <main>
        <h2>Current News!!</h2>

        <section className='events'>
        <h4>Artists News</h4>
          {artistsnews.map((artistnews, art_news_id) => {
            return (
         
              <div key={art_news_id}>

                <ArtistNews artistnews={artistnews} />
              </div>
              
            )
          })}
        </section>
        <section className='events'>
        <h4>Exhibitions News</h4>
          {exhibitionsnews.map((exhibitionnews, exhibition_news_id) => {
            return (
         
              <div key={exhibition_news_id}>

          
                <ExhibitionNews exhibitionnews={exhibitionnews} />
              </div>
              
            )
          })}
        </section>
      </main>
    </>
  )
}
export default ExhibitionsPage;
'''
'''--- src/utils.js ---
import { connect, Contract, keyStores, WalletConnection } from 'near-api-js'
import getConfig from './config'

const nearConfig = getConfig(process.env.NODE_ENV || 'development')

// Initialize contract & set global variables
export async function initContract() {
  // Initialize connection to the NEAR testnet
  const near = await connect(Object.assign({ deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() } }, nearConfig))

  // Initializing Wallet based Account. It can work with NEAR testnet wallet that
  // is hosted at https://wallet.testnet.near.org
  window.walletConnection = new WalletConnection(near)

  // Getting the Account ID. If still unauthorized, it's just empty string
  window.accountId = window.walletConnection.getAccountId()

  // Initializing our contract APIs by contract name and configuration
  window.contract = await new Contract(window.walletConnection.account(), nearConfig.contractName, {
    // View methods are read only. They don't modify the state, but usually return some value.
    viewMethods: ['exhibition_count', 'get_total_artists', 'list_exhibition_news', 'list_artists_news'],
    // Change methods can modify the state. But you don't receive the returned value when called.
    changeMethods: ['add_exhibition', 'add_vote', 'add_endorsement', 'list_exhibitions', 'artist_count', 'add_artist', 'delete_exhibition'],
  })
}

export function logout() {
  window.walletConnection.signOut()
  // reload page
  window.location.replace(window.location.origin + window.location.pathname)
}

export function login() {
  // Allow the current app to make calls to the specified contract on the
  // user's behalf.
  // This works by creating a new access key for the user's account and storing
  // the private key in localStorage.
  window.walletConnection.requestSignIn(nearConfig.contractName)
}
'''