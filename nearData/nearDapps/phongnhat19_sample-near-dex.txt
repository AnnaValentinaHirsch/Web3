*GitHub Repository "phongnhat19/sample-near-dex"*

'''--- README.md ---
# Example app with [chakra-ui](https://github.com/chakra-ui/chakra-ui) and TypeScript

This example features how to use [chakra-ui](https://github.com/chakra-ui/chakra-ui) as the component library within a Next.js app with TypeScript.

Next.js and chakra-ui have built-in TypeScript declarations, so we'll get autocompletion for their modules straight away.

We are connecting the Next.js `_app.js` with `chakra-ui`'s Provider and theme so the pages can have app-wide dark/light mode. We are also creating some components which shows the usage of `chakra-ui`'s style props.

## Deploy your own

Deploy the example using [Vercel](https://vercel.com?utm_source=github&utm_medium=readme&utm_campaign=next-example) or preview live with [StackBlitz](https://stackblitz.com/github/vercel/next.js/tree/canary/examples/with-chakra-ui)

[![Deploy with Vercel](https://vercel.com/button)](https://vercel.com/new/git/external?repository-url=https://github.com/vercel/next.js/tree/canary/examples/with-chakra-ui-typescript&project-name=with-chakra-ui&repository-name=with-chakra-ui)

## How to use

### Using `create-next-app`

Execute [`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app) with [npm](https://docs.npmjs.com/cli/init) or [Yarn](https://yarnpkg.com/lang/en/docs/cli/create/) to bootstrap the example:

```bash
npx create-next-app --example with-chakra-ui with-chakra-ui-app
# or
yarn create next-app --example with-chakra-ui with-chakra-ui-app
# or
pnpm create next-app -- --example with-chakra-ui with-chakra-ui-app
```

Deploy it to the cloud with [Vercel](https://vercel.com/new?utm_source=github&utm_medium=readme&utm_campaign=next-example) ([Documentation](https://nextjs.org/docs/deployment)).

## Notes

Chakra has supported Gradients and RTL in `v1.1`. To utilize RTL, [add RTL direction and swap](https://chakra-ui.com/docs/features/rtl-support).

If you don't have multi-direction app, you should make `<Html lang="ar" dir="rtl">` inside `_document.ts`.

'''
'''--- next-env.d.ts ---
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/basic-features/typescript for more information.

'''
'''--- next.config.js ---
module.exports = {
  async redirects() {
    return [
      {
        source: '/',
        destination: '/swap',
        permanent: true,
      },
    ]
  },
}
'''
'''--- package.json ---
{
  "private": true,
  "scripts": {
    "dev": "next",
    "build": "next build",
    "start": "next start"
  },
  "dependencies": {
    "@chakra-ui/icons": "^1.1.7",
    "@chakra-ui/react": "1.8.8",
    "@emotion/react": "^11",
    "@emotion/styled": "^11",
    "@near-wallet-selector/core": "^3.0.2",
    "@near-wallet-selector/near-wallet": "^3.0.2",
    "@near-wallet-selector/sender": "^3.0.2",
    "framer-motion": "^6",
    "next": "latest",
    "react": "^17.0.2",
    "react-dom": "^17.0.2",
    "recoil": "^0.7.3-alpha.2"
  },
  "devDependencies": {
    "@types/node": "^14.6.0",
    "@types/react": "^17.0.3",
    "@types/react-dom": "^17.0.3",
    "typescript": "4.3.2"
  }
}

'''
'''--- src/atoms/swap.ts ---
import { SUPPORTED_TOKENS } from "config/supportedTokens";
import { atom } from "recoil";
import { Token } from "types/token";

export const swapSlippageToleranceState = atom({
  key: "swapSlippageToleranceState",
  default: "0.5",
});

export const inputTokenState = atom<Token>({
  key: "inputTokenState",
  default: SUPPORTED_TOKENS[0]
})

export const swapInputState = atom<string>({
  key: "swapInputState",
  default: ""
})

export const outputTokenState = atom<Token>({
  key: "outputTokenState",
  default: SUPPORTED_TOKENS[1]
})

export const swapOutputState = atom<string>({
  key: "swapOutputState",
  default: ""
})
'''
'''--- src/config/supportedTokens.ts ---
import { Token } from "types/token";

export const SUPPORTED_TOKENS: Token[] = [
  {
    logo: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png',
    name: 'USD Circle',
    symbol: 'USDC',
    isNative: false,
    address: 'a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48.factory.bridge.near'
  },
  {
    logo: 'https://s2.coinmarketcap.com/static/img/coins/64x64/6535.png',
    name: 'NEAR Protocol',
    symbol: 'NEAR',
    isNative: true,
    address: ''
  }
]
'''
'''--- src/types/token.ts ---
export interface Token {
  logo: string;
  isNative: boolean;
  symbol: string;
  name: string;
  address: string;
}
'''
'''--- src/utils/string.ts ---
export const truncate = (str: string, n: number, e: number) => {
  if (!str) {
    return '';
  }
  if (n > str.length - e) {
    return str;
  }
  return str.substr(0, n - 1) + '...' + str.substr(str.length - e - 1);
};
'''
'''--- tsconfig.json ---
{
  "compilerOptions": {
    "baseUrl": "./src",
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": false,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "paths": {
      "atoms/*": ["atoms/*"],
      "components": ["components/index"],
      "components/*": ["components/*"],
      "contexts/*": ["contexts/*"],
      "utils/*": ["utils/*"],
      "config/*": ["config/*"],
      "types/*": ["types/*"],
      "pages/*": ["pages/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx"],
  "exclude": ["node_modules"]
}

'''