*GitHub Repository "jdnichollsc/my-first-near"*

'''--- README.md ---
# NEAR CLI

- [Setup](https://github.com/near/near-cli#setup)
- [Examples from NEAR, Inc.](https://github.com/near-examples)
- [NEAR Examples](https://examples.near.org/)
- [NEAR Protocol Specification](https://nomicon.io/)
- [NEAR Explorer](https://explorer.testnet.near.org/) - Explore the NEAR Blockchain

## Commands

- `npm i near-cli -g`
- `near login` - Account ID: jdnichollsc.testnet
- `near state jdnichollsc.testnet` - Get info of an account
- `near keys jdnichollsc.testnet` - Get keys of an account (Check if the account is FullAccess, etc)
- `yarn asb` - Compile code from **assembly** folder to WebAssembly
- `yarn asb --wat` - Generate **.wat** file to see the binary files
- `yarn asp --init` - Create library with unit tests
- `yarn asp` - Run unit tests

## Packages

- `aspect` - Framework para testing
'''
'''--- as-pect.config.js ---
module.exports = require('near-sdk-as/imports')
'''
'''--- asconfig.json ---
{
  "extends": "near-sdk-as/asconfig.json"
}
'''
'''--- assembly/__tests__/as-pect.d.ts ---
/// <reference types="@as-pect/assembly/types/as-pect" />

'''
'''--- assembly/__tests__/counter.spec.ts ---
import { getCounter, resetCounter, incrementCounter, decrementCounter, Counter } from '../counter'

describe("counter", () => {

  it("should work as Singleton correctly", () => {
    const counter = new Counter()
    expect(counter.get()).toBe(0)

    counter.increment(3)
    counter.increment(2)
    expect(counter.get()).toBe(5)

    counter.decrement(2)
    expect(counter.get()).toBe(3)

    counter.reset()
    expect(counter.get()).toBe(0)
  });

  it("should work as Single counter correctly", () => {
    expect(getCounter()).toBe(0)

    incrementCounter(3)
    incrementCounter(2)
    expect(getCounter()).toBe(5)

    decrementCounter(2)
    expect(getCounter()).toBe(3)

    resetCounter()
    expect(getCounter()).toBe(0)
  });
});

'''
'''--- assembly/__tests__/example.spec.ts ---
import { getHello, DEFAULT_MESSAGE } from '..'

describe("example", () => {

  it("should work correctly", () => {
    const expected = DEFAULT_MESSAGE;
    expect(getHello()).toBe(expected);
  });
});

'''
'''--- assembly/as_types.d.ts ---
/// <reference types="near-sdk-as/assembly/as_types" />
'''
'''--- assembly/counter.ts ---
import { storage, logging } from "near-sdk-as";

/**
 * Counter Singleton Smart Contract
 */
@nearBindgen
export class Counter {
  private counter: i32 = 0;

  increment(value: i32): void {
    this.counter += value;
    logging.log("Counter is now: " + this.counter.toString());
  }

  decrement(value: i32): void {
    this.counter -= value;
    logging.log("Counter is now: " + this.counter.toString());
  }

  get(): i32 {
    return this.counter;
  }

  reset(): void {
    this.counter = 0;
    logging.log("Counter is reset!");
  } 
}

/**
 * Counter Single Smart Contract
 */

export function incrementCounter(value: i32): void {
  const newCounter = storage.getPrimitive<i32>("counter", 0) + value;
  storage.set<i32>("counter", newCounter);
  logging.log("Counter is now: " + newCounter.toString());
}

export function decrementCounter(value: i32): void {
  const newCounter = storage.getPrimitive<i32>("counter", 0) - value;
  storage.set<i32>("counter", newCounter);
  logging.log("Counter is now: " + newCounter.toString());
}

export function getCounter(): i32 {
  return storage.getPrimitive<i32>("counter", 0);
}

export function resetCounter(): void {
  storage.set<i32>("counter", 0);
  logging.log("Counter is reset!");
}
'''
'''--- assembly/index.ts ---
export const DEFAULT_MESSAGE = "Hola NEAR World! <3";

export function getHello(): string {
  return DEFAULT_MESSAGE;
}
'''
'''--- assembly/tsconfig.json ---
{
  "extends": "../node_modules/assemblyscript/std/assembly.json",
  "include": [
    "./**/*.ts",
    "../node_modules/**/*/as_types.d.ts"
  ]
}
'''
'''--- package.json ---
{
  "name": "my-first-near",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "devDependencies": {
    "near-sdk-as": "^3.2.3"
  }
}

'''