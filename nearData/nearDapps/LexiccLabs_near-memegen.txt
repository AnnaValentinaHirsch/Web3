*GitHub Repository "LexiccLabs/near-memegen"*

'''--- .travis.yml ---
language: node_js
node_js:
  - 12

before_script:
  - "curl -H 'Cache-Control: no-cache' https://raw.githubusercontent.com/fossas/fossa-cli/master/install.sh | sudo bash"

script:
  - fossa init
  - fossa analyze --server-scan
  - fossa test

'''
'''--- README.md ---
# NEAR Memegen

Implements simple Memegen with NEAR DevNet wallet integration.

https://nearprotocol.github.io/near-memegen/

'''
'''--- assembly/main.ts ---
import "allocator/arena";
export { memory };

import { context, storage, near } from "./near";

import { Meme } from "./model.near";

// --- contract code goes below 

// The maximum number of latest messages the contract returns.
const NUM_MESSAGES_KEY = "num";
const MEME_PREFIX = "m:";

// Adds a new message under the name of the sender's account id.
// NOTE: This is a change method. Which means it will modify the state.
// But right now we don't distinguish them with annotations yet.
export function addMeme(timeMs: i32, imgUrl: string, topText: string, middleText: string, bottomText: string): void {
  // Get the total number of messages as u64 type
  let num = getNumMemes();
  // Create a new instance of PostedMessage object
  let meme = new Meme();
  meme.id = num;
  meme.sender = context.sender;
  meme.timeMs = timeMs;
  meme.imgUrl = imgUrl;
  meme.topText = topText;
  meme.middleText = middleText;
  meme.bottomText = bottomText;
  // Storing serialized instance using a key like "message:5"
  storage.setBytes(
    MEME_PREFIX + meme.id.toString(),
    meme.encode()
  );
  num += 1;
  storage.setItem(NUM_MESSAGES_KEY, num.toString());
}

export function getNumMemes(): i32 {
  return I32.parseInt(storage.getItem(NUM_MESSAGES_KEY) || "0");
}

export function getMeme(id: i32): Meme {
  return Meme.decode(
      storage.getBytes(MEME_PREFIX + id.toString()));
}

'''
'''--- assembly/model.ts ---
// Exporting a new class PostedMessage so it can be used outside of this file.
export class Meme {
  id: i32;
  sender: string;
  timeMs: i32;
  imgUrl: string;
  topText: string;
  middleText: string;
  bottomText: string;
}
'''
'''--- assembly/tsconfig.json ---
{
  "extends": "../node_modules/assemblyscript/std/assembly.json",
  "include": [
    "./**/*.ts"
  ]
}

'''
'''--- gulpfile.js ---
const gulp = require("gulp");
const nearUtils = require("near-shell/gulp-utils");

gulp.task("build:model", callback => {
  nearUtils.generateBindings("model.ts", "../out/model.near.ts", callback);
});

gulp.task("build:bindings", ["build:model"], callback => {
  nearUtils.generateBindings("main.ts", "../out/main.near.ts", callback);
});

gulp.task("build", ["build:bindings"], callback => {
  nearUtils.compile("../out/main.near.ts", "../out/main.wasm", callback);
});

gulp.task("default", ["build"]);

// TODO: Extract all following boilerplate into library

// This task is not required when running the project locally. Its purpose is to set up the
// AssemblyScript compiler when a new project has been loaded in WebAssembly Studio.
gulp.task("project:load", () => {
  const utils = require("@wasm/studio-utils");
  utils.eval(utils.project.getFile("setup.js").getData(), {
    logLn,
    project,
    monaco,
    fileTypeForExtension,
  });
});

'''
'''--- package.json ---
{
  "name": "@wasm/guestbook",
  "description": "",
  "version": "0.0.1",
  "scripts": {
    "build": "mkdir -p out/ && gulp",
    "deploy:contract": "near deploy",
    "deploy:pages": "gh-pages -d src",
    "deploy": "npm run build && npm run deploy:contract && npm run deploy:pages",
    "prestart": "npm run build && npm run deploy:contract",
    "start": "python3 -mhttp.server --directory src",
    "test": "npm run build && jest test --env=near-shell/local_test_environment",
    "test-on-devnet": "npm run build && jest test --env=near-shell/devnet_test_environment"
  },
  "devDependencies": {
    "assemblyscript": "github:nearprotocol/assemblyscript.git",
    "assemblyscript-json": "github:nearprotocol/assemblyscript-json",
    "gh-pages": "^2.0.1",
    "gulp": "^3",
    "jest": "^22.4.4",
    "jest-environment-node": "^24.5.0",
    "near-runtime-ts": "github:nearprotocol/near-runtime-ts",
    "near-shell": "github:nearprotocol/near-shell"
  },
  "wasmStudio": {
    "name": "NEAR Guest Book",
    "description": "NEAR Guest Book with NEAR DevNet Wallet integration on blockchain.",
    "icon": "typescript-lang-file-icon"
  },
  "dependencies": {}
}

'''
'''--- setup.js ---
// This file is not required when running the project locally. Its purpose is to set up the
// AssemblyScript compiler when a new project has been loaded in WebAssembly Studio.

// Path manipulation lifted from https://gist.github.com/creationix/7435851

// Joins path segments.  Preserves initial "/" and resolves ".." and "."
// Does not support using ".." to go above/outside the root.
// This means that join("foo", "../../bar") will not resolve to "../bar"
function join(/* path segments */) {
  // Split the inputs into a list of path commands.
  var parts = [];
  for (var i = 0, l = arguments.length; i < l; i++) {
    parts = parts.concat(arguments[i].split("/"));
  }
  // Interpret the path commands to get the new resolved path.
  var newParts = [];
  for (i = 0, l = parts.length; i < l; i++) {
    var part = parts[i];
    // Remove leading and trailing slashes
    // Also remove "." segments
    if (!part || part === ".") continue;
    // Interpret ".." to pop the last segment
    if (part === "..") newParts.pop();
    // Push new path segments.
    else newParts.push(part);
  }
  // Preserve the initial slash if there was one.
  if (parts[0] === "") newParts.unshift("");
  // Turn back into a single string path.
  return newParts.join("/") || (newParts.length ? "/" : ".");
}

// A simple function to get the dirname of a path
// Trailing slashes are ignored. Leading slash is preserved.
function dirname(path) {
  return join(path, "..");
}

require.config({
  paths: {
    "binaryen": "https://cdn.jsdelivr.net/gh/AssemblyScript/binaryen.js@e41ec5c177e3d2cacccd4ccb1877ae29a7352dc1/index",
    "assemblyscript": "https://cdn.jsdelivr.net/gh/nearprotocol/assemblyscript@a4aa1a5/dist/assemblyscript",
    "assemblyscript/bin/asc": "https://cdn.jsdelivr.net/gh/nearprotocol/assemblyscript@a4aa1a5/dist/asc",
  }
});
logLn("Loading AssemblyScript compiler ...");
require(["assemblyscript/bin/asc"], asc => {
  monaco.languages.typescript.typescriptDefaults.addExtraLib(asc.definitionFiles.assembly);
  asc.runningInStudio = true;
  asc.main = (main => (args, options, fn) => {
    if (typeof options === "function") {
      fn = options;
      options = undefined;
    }

    return main(args, options || {
      stdout: asc.createMemoryStream(),
      stderr: asc.createMemoryStream(logLn),
      readFile: (filename, baseDir) => {
        let path = join(baseDir, filename);
        console.log("readFile", path);
        if (path.startsWith("out/") && path.indexOf(".near.ts") == -1) {
          path = path.replace(/^out/, baseDir );
          console.log("path", path);
        } else if (path.startsWith(baseDir) && path.indexOf(".near.ts") != -1) {
          path = path.replace(new RegExp("^" + baseDir), "out");
          console.log("path", path);
        }
        const file = project.getFile(path);
        return file ? file.data : null;
      },
      writeFile: (filename, contents) => {
        const name = filename.startsWith("../") ? filename.substring(3) : filename;
        const type = fileTypeForExtension(name.substring(name.lastIndexOf(".") + 1));
        project.newFile(name, type, true).setData(contents);
      },
      listFiles: () => []
    }, fn);
  })(asc.main);
  logLn("AssemblyScript compiler is ready!");
});

'''
'''--- src/config.js ---
(function() {
    const CONTRACT_NAME = 'near-memegen';
    const DEFAULT_ENV = 'development';

    function getConfig(env) {
        switch (env) {
            case 'production':
            case 'development':
                return {
                    networkId: 'default',
                    nodeUrl: 'https://studio.nearprotocol.com/devnet',
                    helperUrl: 'https://studio.nearprotocol.com/contract-api',
                    contractName: CONTRACT_NAME,
                };
            case 'local':
            case 'test':
                return {
                    networkId: 'local',
                    nodeUrl: 'http://localhost:3030',
                    contractName: CONTRACT_NAME
                };
            default:
                throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`);
        }
    }

    const cookieConfig = typeof Cookies != 'undefined' && Cookies.getJSON('fiddleConfig');
    if (typeof module !== 'undefined' && module.exports) {
        module.exports = getConfig;
    } else {
        window.nearConfig =  cookieConfig && cookieConfig.nearPages ? cookieConfig : getConfig(DEFAULT_ENV);
    }
})();

'''
'''--- src/index.html ---
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
  <title>NEAR Memegen</title>

  <!-- Bootstrap -->
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap-theme.min.css" integrity="sha384-rHyoN1iRsVXV4nD0JutlnGaslCJuC7uwjduW9SVrLvRYooPp2bWYgmgJQIXwl/Sp" crossorigin="anonymous">

  <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
  <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
  <!--[if lt IE 9]>
    <script src="https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js"></script>
    <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
  <![endif]-->
  <style>
      .glyphicon-refresh-animate {
          -animation: spin .7s infinite linear;
          -webkit-animation: spin2 .7s infinite linear;
      }

      @-webkit-keyframes spin2 {
          from { -webkit-transform: rotate(0deg);}
          to { -webkit-transform: rotate(360deg);}
      }

      @keyframes spin {
          from { transform: scale(1) rotate(0deg);}
          to { transform: scale(1) rotate(360deg);}
      }

      .meme-holder {
        margin: 5px 0;
        cursor: pointer;
        display: inline-block;
        width: 100% !important;
        height: auto !important;
      }

      @media (min-width: 600px) {
        .meme-holder {
          font-size: 50%;
        }
      }

      @media (min-width: 768px) {
        .meme-holder {
          font-size: 66%;
        }
      }

      @media (min-width: 997px) {
        .meme-holder {
          font-size: 75%;
        }
      }

      @media (min-width: 1200px) {
        .meme-holder {
          font-size: 80%;
        }
      }

      @media (min-width: 600px) {
        .meme-preview {
          max-width: 600px;
        }
      }

      .gif-preview {
        cursor: pointer;
        margin: 2px 0;
        width: 100% !important;
        height: auto !important;
      }

      @media (min-width: 480px) {
        #gifs-preview {
          -webkit-column-count: 3;
          -webkit-column-gap:   4px;
          -moz-column-count:    3;
          -moz-column-gap:      4px;
          column-count:         3;
          column-gap:           4px;          
        }
      }

      @media (min-width: 600px) {
        #messages {
          -webkit-column-count: 3;
          -webkit-column-gap:   10px;
          -moz-column-count:    3;
          -moz-column-gap:      10px;
          column-count:         3;
          column-gap:           10px;          
        }

        #gifs-preview {
          -webkit-column-count: 5;
          -webkit-column-gap:   4px;
          -moz-column-count:    5;
          -moz-column-gap:      4px;
          column-count:         5;
          column-gap:           4px;          
        }
      }

      .meme-wrapper {
        position: relative;
        margin: auto;
        text-align: center;
        max-height: 600px;
        overflow:hidden;
      }

      .meme-img {
        width: 100%;
      }

      .meme-text {
        position: absolute; 
        left: 0;
        right: 0; 
        margin: 0;
        padding: 0;
        font-family: impact;
        font-size: 2.5em;
        text-transform: uppercase;
        color: white;
        letter-spacing: 0.01em;
        text-shadow: 0.05em 0.05em 0.125em #000;
        -webkit-text-stroke-width: 0.05em;
        -webkit-text-stroke-color: black;
      }

      .meme-text-top {
        top: 0px;
      }

      .meme-text-middle {
        top: 42%;
      }

      .meme-text-bottom {
        bottom: 0px;
      }
  </style>
</head>
<body style="padding-top: 70px; padding-bottom: 30px;">

  <!-- Fixed navbar -->
  <nav class="navbar navbar-inverse navbar-fixed-top">
      <div class="container">
      <div class="navbar-header">
          <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar">
          <span class="sr-only">Toggle navigation</span>
          <span class="icon-bar"></span>
          <span class="icon-bar"></span>
          <span class="icon-bar"></span>
          </button>
          <a class="navbar-brand" href="./">NEAR Memegen</a>
      </div>
      <div id="navbar" class="navbar-collapse collapse">
          <ul class="nav navbar-nav">
          <li class="active"><a href="./">Home</a></li>
          <li><a href="https://github.com/nearprotocol/near-memegen">Source / GitHub</a></li>
          <li><a href="//wallet.nearprotocol.com/">Wallet</a></li>
          <li class="hidden" id="logout-option"><a href="#logout" id="logout-button">Logout, <span class='account-id'></span></a></li>
          </ul>
      </div><!--/.nav-collapse -->
      </div>
  </nav>

  <div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <div class="modal-header">
          <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>
          <h4 class="modal-title" id="myModalLabel">Meme</h4>
        </div>
        <div class="modal-body">
          <div id="modal-meme" class="meme-preview"></div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
        </div>
      </div>
    </div>
  </div>

  <div class="container" role="main">
    <div id="guest-book-container" class="hidden">
      <div class="row">
        <label for="text-gif-search">Search GIFs</label>
        <input id="text-gif-search" type="text" class="form-control" placeholder="Search GIFs" />
      </div>
      <div id="gifs-preview">
      </div>
      <hr>
      <div id="meme-lord" class="hidden">
        <h3>Preview:</h3>
        <div class="row">
          <div id="meme-preview" class="meme-preview">
          </div>
        </div>
        <div class="row">
          <label for="text-top">Top text:</label>
          <input id="text-top" type="text" class="form-control" placeholder="Top text" />
        </div>
        <div class="row">
          <label for="text-middle">Middle text:</label>
          <input id="text-middle" type="text" class="form-control" placeholder="Middle text" />
        </div>
        <div class="row">
          <label for="text-bottom">Bottom text:</label>
          <input id="text-bottom" type="text" class="form-control" placeholder="Bottom text" />
        </div>
        <br>
        <div class="row">
          <button id="submit-meme" class="btn btn-lg btn-primary">Post your MEME</button>
        </div>
        <hr>
      </div>
    </div>
    <h3>Memes: <button id="refresh-button" class="btn btn-sm btn-default"><span id="refresh-span" class="glyphicon glyphicon-refresh"></span></button></h3>
    <div id="messages">

    </div>
  </div>

  <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
  <!-- Include all compiled plugins (below), or include individual files as needed -->
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js" integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/js-cookie@2/src/js.cookie.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/nearlib@0.8.2/dist/nearlib.js"></script>
  <script src="./config.js"></script>
  <script src="./main.js"></script>

  <!-- TRACKING YOU MUHAHAHAHAAH -->
  <script async src="https://www.googletagmanager.com/gtag/js?id=UA-100373569-4"></script>
  <script>
    window.dataLayer = window.dataLayer || [];
    function gtag(){dataLayer.push(arguments);}
    gtag('js', new Date());

    gtag('config', 'UA-100373569-4');
  </script>

</body>
</html>

'''
'''--- src/loader.html ---
<head>
    <script>
        window.paceOptions = {
            elements: {
                selectors: ['.never-appears']
            }
        };
    </script>
    <script src="https://cdn.jsdelivr.net/gh/HubSpot/pace@v0.5.3/pace.min.js"></script>
    <link href="https://cdn.jsdelivr.net/gh/HubSpot/pace@v0.5.3/themes/black/pace-theme-center-radar.css" rel="stylesheet" />
</head>
'''
'''--- src/main.js ---
// Defining some global constants
const animateClass = 'glyphicon-refresh-animate';
const loadingHtml = '<span class="glyphicon glyphicon-refresh glyphicon-refresh-animate"></span> Loading'; 
const appTitle = 'NEAR Guest Book';
const walletBaseUrl = 'https://wallet.nearprotocol.com';
const TENOR_API_KEY = 'CIDF1JJPZGRB';
const TENOR_LIMIT = 20;

// Defining global variables that we initialize asynchronously later.
let walletAccount;
let accountId;
let contractId;
let baseUrl;
let near;
let contract;
let refreshTimeout;
let anon_id;
let currentGifs;
let selectedGif;
let numMemes = -1;

// Function that initializes the signIn button using WalletAccount 
function signedOutFlow() {
  $('#login-button').click(() => {
    walletAccount.requestSignIn(
      contractId,
      appTitle,
      baseUrl + '/',
      baseUrl + '/',
    );
  });
}

async function fetchMeme(id, obj) {
  let meme = await contract.getMeme({id});
  renderMeme(obj, meme);
  const text = 'Posted by ' + meme.sender;
  obj.click(() => {
    $('#myModalLabel').text(text);
    renderMeme($('#modal-meme'), meme);
    $('#myModal').modal('show'); // imagemodal is the id attribute assigned to the bootstrap modal, then i use the show function
  })
}

async function fetchLatestMemes() {
  let lastNum = await contract.getNumMemes({})
  if (numMemes == -1) {
    numMemes = Math.max(0, lastNum - 10);
  }
  for (let i = numMemes; i < lastNum; ++i) {
    let localObj = $('<div/>').addClass('meme-holder');
    fetchMeme(i, localObj);
   
    $('#messages').prepend(localObj);
  }
  numMemes = lastNum;
  $('#refresh-span').removeClass(animateClass);
}

// Calls view function on the contract and sets up timeout to be called again in 5 seconds
// It only calls the contract if the this page/tab is active.
function refreshMessages() {
  // If we already have a timeout scheduled, cancel it
  if (!!refreshTimeout) {
    clearTimeout(refreshTimeout);
    refreshTimeout = null;
  }
  // Schedules a new timeout
  refreshTimeout = setTimeout(refreshMessages, 5000);
  // Checking if the page is not active and exits without requesting messages from the chain
  // to avoid unnecessary queries to the devnet.
  if (document.hidden) {
    return;
  }
  // Adding animation UI
  $('#refresh-span').addClass(animateClass);
  // Calling the contract to read messages which makes a call to devnet.
  // The read call works even if the Account ID is not provided. 

  fetchLatestMemes()
    .catch(console.log);
  
}

function makeCurrentMeme() {
  return {
    timeMs: Math.trunc(new Date().getTime() / 1000),
    imgUrl: selectedGif.media[0].gif.url,
    topText: $('#text-top').val(),
    middleText: $('#text-middle').val(),
    bottomText: $('#text-bottom').val(),
  }
}

function renderMeme(obj, meme) {
  obj.empty();
  let wrapper = $('<div/>')
    .addClass("meme-wrapper");
  let img = $('<img/>')
    .addClass("meme-img")
    .attr('src', meme.imgUrl);
  let textTop = $('<p/>')
    .addClass("meme-text meme-text-top")
    .text(meme.topText);
  let textMiddle = $('<p/>')
    .addClass("meme-text meme-text-middle")
    .text(meme.middleText);
  let textBottom = $('<p/>')
    .addClass("meme-text meme-text-bottom")
    .text(meme.bottomText);
  wrapper.append([img, textTop, textMiddle, textBottom]);
  obj.append(wrapper);
}

function selectGif() {
  let index = $(this).data('gif-index');
  selectedGif = currentGifs[index];
  $('#meme-lord').removeClass('hidden');
  $('html, body').animate({
    scrollTop: $("#meme-lord").offset().top
  }, 500);
  $('#text-top').focus();
  renderMeme($('#meme-preview'), makeCurrentMeme());
}

function renderGifs(d) {
  currentGifs = d.results;
  let h = $('#gifs-preview');
  h.empty();
  for (let i = 0; i < currentGifs.length; ++i) {
    let g = currentGifs[i];
    let img = $('<img/>')
      .addClass("gif-preview")
      .data("gif-index", i)
      .attr('src', g.media[0].tinygif.url)
      .click(selectGif);
    h.append(img);
  }
}

function searchGif() {
  let search_term = $('#text-gif-search').val();
  if (!search_term) {
    $('#gifs-preview').empty();
    return;
  }
  let url = "https://api.tenor.com/v1/search?tag=" + encodeURIComponent(search_term)
      + "&key=" + TENOR_API_KEY
      + "&limit=" + TENOR_LIMIT
      + "&anon_id=" + anon_id;
  
  $.ajax({
    url,
    type: 'GET',
  }).then(renderGifs)
    .catch(console.error);
}

// Submits a new message to the devnet
function submitMeme() {
  let meme = makeCurrentMeme();
  $('#text-top, #text-middle, #text-bottom').val('');
  $('#meme-lord').addClass('hidden');
  $('#text-gif-search').val('');
  $('#gifs-preview').empty();
  $('html, body').animate({
    scrollTop: $("#text-gif-search").offset().top
  }, 500);
  $('#text-gif-search').focus();
  contract.addMeme(meme)
    .then(() => {
      // Starting refresh animation
      $('#refresh-span').addClass(animateClass);
      // Refreshing the messages in 1 seconds to account for the block creation
      setTimeout(() => {
        refreshMessages();
      }, 1000);
    })
    .catch(console.log);
}

async function initAnonId() {
  let result = await $.ajax({
    url: "https://api.tenor.com/v1/anonid?key=" + TENOR_API_KEY,
    type: 'GET',
  });
  anon_id = result.anon_id;
}

function initMemeEditing() {
  $('#text-top, #text-middle, #text-bottom').keyup(() => {
    renderMeme($('#meme-preview'), makeCurrentMeme());
  });

  $('#submit-meme').click(() => {
    submitMeme();
  });
}

let searchTimeout = null;

function scheduleSearch() {
  // If we already have a timeout scheduled, cancel it
  if (!!searchTimeout) {
    clearTimeout(searchTimeout);
    searchTimeout = null;
  }
  // Schedules a new timeout
  searchTimeout = setTimeout(searchGif, 500);
}

// Main function for the signed-in flow (already authorized by the wallet).
async function signedInFlow() {
  // Hiding sign-in html parts and showing post message things
  // $('#sign-in-container').addClass('hidden');
  $('#guest-book-container').removeClass('hidden');
  // $('#logout-option').removeClass('hidden');

  // Displaying the accountId
  $('.account-id').text(accountId);

  // Focusing on the enter message field.
  $('#text-gif-search').focus();

  // Adding handling for logging out
  $('#logout-button').click(() => {
    // It removes the auth token from the local storage.
    walletAccount.signOut();
    // Forcing redirect.
    window.location.replace(baseUrl + '/');
  })

  await initAnonId();

  // Enablid enter key to send messages as well. 
  $('#text-gif-search').keypress(function (e) {
    if (e.which == 13) {
      e.preventDefault();
      searchGif();
      return false;
    }
  }).keyup(() => {
    scheduleSearch();
  });

  initMemeEditing();
}

// Initialization code
async function init() {
  // Fetching studio/app specific config. It contains contract name and devnet url.
  contractId = nearConfig.contractName;
  baseUrl = "https://app.near.ai/" + contractId.substring(contractId.length - 9);

  // Initializing near and near client from the nearlib.
  near = await nearlib.dev.connect(nearConfig);

  // Getting the Account ID. If unauthorized yet, it's just empty string.
  // accountId = walletAccount.getAccountId();
  accountId = nearlib.dev.myAccountId;

  // Initializing the contract.
  // For now we need to specify method names from the contract manually.
  // It also takes the Account ID which it would use for signing transactions.
  contract = await near.loadContract(nearConfig.contractName, {
    viewMethods: ["getMeme", "getNumMemes"],
    changeMethods: ["addMeme"],
    sender: accountId,
  });

  // Initializing messages and starting auto-refreshing.
  $('#refresh-button').click(refreshMessages);
  refreshMessages();

  // Based on whether you've authorized, checking which flow we should go.
  await signedInFlow();
}

init().catch(console.log);

'''
'''--- src/test.html ---
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/jasmine/3.3.0/jasmine.css">
  <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jasmine/3.3.0/jasmine.js"></script>
  <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jasmine/3.3.0/jasmine-html.js"></script>
  <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jasmine/3.3.0/boot.js"></script>
</head>
<body style="background: #fff">
  <script src="https://cdn.jsdelivr.net/npm/nearlib@0.8.2/dist/nearlib.js"></script>
  <script src="./test.js"></script>
</body>
</html>

'''
'''--- src/test.js ---
function sleep(time) {
  return new Promise(function (resolve, reject) {
    setTimeout(resolve, time);
  });
}

describe("Guestbook", function() {
    let near;
    let contract;
    let alice;
    let bob = "bob.near";
    let eve = "eve.near";
  
    beforeAll(async function() {
      const config = await nearlib.dev.getConfig();
      near = await nearlib.dev.connect();
      alice = nearlib.dev.myAccountId;
      const url = new URL(window.location.href);
      config.contractName = url.searchParams.get("contractName");
      console.log("nearConfig", config);
      await sleep(1000);
      contract = await near.loadContract(config.contractName, {
        // NOTE: This configuration only needed while NEAR is still in development
        viewMethods: ["getMessages"],
        changeMethods: ["addMessage"],
        sender: alice
      });
    });

    describe("Guestbook", function() {
      it("returns 0 messages in initial empty states", async function() {
        const messages = await contract.getMessages({});
        expect(messages.length).toBe(0);
      });
    });
  });
'''