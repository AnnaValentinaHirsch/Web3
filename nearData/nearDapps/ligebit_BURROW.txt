*GitHub Repository "ligebit/BURROW"*

'''--- README.md ---
Заполните config.js

Для мультипликации:
`node multiplicator`

Для демультипликации:
`node demultiplicator`

'''
'''--- burrow.js ---
const { Contract } = require("near-api-js");

const NUM_DECIMALS = 27n;
const MAX_RATIO = 10000n;

const DURAK_DEFENCE = 9500n;

class BURROW {

    constructor(near, account) {
        this.near = near;
        this.contractAddress = 'contract.main.burrow.near';
        this.account = account;
    }

    async load() {
        this.config = await this.near.call_contract(this.contractAddress, 'get_config', {});
    }

    async updateAssets() {
        const assets = await this.near.call_contract(this.contractAddress, 'get_assets_paged_detailed', {
            from_index: 0,
            limit: 100,
        });

        this.assets = Object.assign({}, ...assets.map(n => ({ [n.token_id]: n })))

        // console.log(assetsRequest);

        // const assets = assetsRequest.map((asset) => ({
        //     tokenId: asset[0],
        //     supplied: asset[1].supplied,
        //     borrowed: asset[1].borrowed,
        //     last_update_timestamp: asset[1].last_update_timestamp,
        //     config: asset[1].config
        // }));

        for (const id in this.assets) {
            const tokenMetadata = await this.near.call_contract(this.assets[id].token_id, 'ft_metadata', {});
            this.assets[id].tokenMetadata = tokenMetadata;
        }

    }

    static fromBalancePrice(balance, price, extraDecimals) {
        let num = BigInt(price.multiplier) * BigInt(balance);
        let denominatorDecimals = BigInt(price.decimals) + BigInt(extraDecimals);
        if (denominatorDecimals > NUM_DECIMALS) {
            return num / (10n ** (denominatorDecimals - NUM_DECIMALS))
        } else {
            return num * (10n ** (NUM_DECIMALS - denominatorDecimals))
        }
    }

    async updatePrices() {
        if(!this.assets) throw new Error('before using this method call updateAssets()');

        const arrayAssetsAddresses = Object.values(this.assets).map((asset) => asset.token_id);

        const prices = (await this.near.call_contract(this.config.oracle_account_id, 'get_price_data', {"asset_ids":arrayAssetsAddresses})).prices;

        const arrayOjectprices = prices.reduce((obj, item) => Object.assign(obj, { [item.asset_id]: item.price }), {});

        for (const id in this.assets) {
            this.assets[id].price = arrayOjectprices[this.assets[id].token_id];

            //calculate price
            //const price = BigInt(10)**BigInt(this.assets[id].tokenMetadata.decimals) * BigInt(this.assets[id].price.multiplier) / BigInt(10)**(BigInt(this.assets[id].price.decimals) - BigInt(this.assets[id].tokenMetadata.decimals))
        }
    }

    static getHumanPriceAsset(asset) {
        const priceBigInt = BigInt(10)**BigInt(asset.tokenMetadata.decimals) * BigInt(asset.price.multiplier) / BigInt(10)**(BigInt(asset.price.decimals) - BigInt(asset.tokenMetadata.decimals))
        return parseInt(priceBigInt)/(10**asset.tokenMetadata.decimals);
    }

    getAccount(accountId) {
        return this.near.call_contract(this.contractAddress, 'get_account', {account_id: accountId});
    }

    async getAccountColateralBorrow() {
        await this.updatePrices();
        const accountAssets = await this.getAccount('bozon.near');
    
        let collateralAll = 0n;
        let adjustedCollateral = 0n;
    
        let borrowAll = 0n;
        let adjustedBorrow = 0n;
    
        for (const asset of accountAssets.collateral) {
            const price = this.assets[asset.token_id].price;
            const volatilityRatio = BigInt(this.assets[asset.token_id].config.volatility_ratio);
            const extraDecimals = this.assets[asset.token_id].config.extra_decimals;
            const decimals = this.assets[asset.token_id].tokenMetadata.decimals;
    
            const collateral = BURROW.fromBalancePrice(asset.balance, price, extraDecimals);
            collateralAll += collateral;
    
            adjustedCollateral += (collateral * volatilityRatio) / MAX_RATIO;
    
            //adjusted_collateral_sum = sum(collateral_i * price_i * volatility_ratio_i)
        }
    
        for (const asset of accountAssets.borrowed) {
            const price = this.assets[asset.token_id].price;
            const volatilityRatio = BigInt(this.assets[asset.token_id].config.volatility_ratio);
            const extraDecimals = this.assets[asset.token_id].config.extra_decimals;
            const decimals = this.assets[asset.token_id].tokenMetadata.decimals;
    
            const borrow = BURROW.fromBalancePrice(asset.balance, price, extraDecimals);
    
            borrowAll += borrow;
            adjustedBorrow += (borrow / volatilityRatio) * MAX_RATIO;
            //adjusted_collateral_sum = sum(collateral_i * price_i * volatility_ratio_i)
        }

        return {
            account: accountAssets,
            adjustedCollateral: adjustedCollateral,
            adjustedBorrow: adjustedBorrow,
            collateralAll: collateralAll,
            borrowAll: borrowAll
        }
    }

    getMaxBorrowAmount(tokenId, accountDetail) {
        const volatiliyRatio = BigInt(this.assets[tokenId].config.volatility_ratio || 0);
        const tokenDecimals = BigInt(this.assets[tokenId].tokenMetadata.decimals);
        const extraDecimals = BigInt(this.assets[tokenId].config.extra_decimals);

        const aviableBorrowBalanceInUsd = (accountDetail.adjustedCollateral - accountDetail.adjustedBorrow) * volatiliyRatio;

        return (aviableBorrowBalanceInUsd / BigInt(this.assets[tokenId].price.multiplier)) * (10n** (tokenDecimals + extraDecimals)) / (10n ** NUM_DECIMALS)
    }

    getMaxWithdrawAmount(tokenId, accountDetail) {
        const volatiliyRatio = BigInt(this.assets[tokenId].config.volatility_ratio || 0);
        const tokenDecimals = BigInt(this.assets[tokenId].tokenMetadata.decimals);
        const extraDecimals = BigInt(this.assets[tokenId].config.extra_decimals);

        const aviableBorrowBalanceInUsd = (accountDetail.adjustedCollateral - accountDetail.adjustedBorrow) / volatiliyRatio;

        return aviableBorrowBalanceInUsd * BigInt(this.assets[tokenId].price.multiplier) * (10n** (tokenDecimals + extraDecimals)) / (10n ** NUM_DECIMALS)
    }

    execute(args) {
        const contart = new Contract(
            this.account,
            this.contractAddress, {
                viewMethods: [],
                changeMethods: ['execute']
            }
        );
        return contart.execute(args, "300000000000000", "1");
    }

    oracleCall(args) {
        const contart = new Contract(
            this.account,
            this.config.oracle_account_id, {
                viewMethods: [],
                changeMethods: ['oracle_call']
            }
        );
        return contart.oracle_call(args, "300000000000000", "1");
    }

    getBalanceToken(tokenId, accountId) {
        return this.near.call_contract(tokenId, 'ft_balance_of', {account_id: accountId});
    }
   
}

module.exports = {BURROW, NUM_DECIMALS}
'''
'''--- config.js ---
module.exports = function config() {
    //Данные от аккаунта

    //Ключ вида '3Vb1zTRpg7R4eSTP6feRhjKmnPc7MyVnAd5B9PASin259uFhL6jKHtshnHhMtvMyLytcrLpDEZBhsJcQSR39C24P'
    const PRIVATE_KEY = '3Vb1zTRpg7R4eSTP6feRhjKmnPc7MyVnAd5B9PASin259uFhL6jKHtshnHhMtvMyLytcrLpDEZBhsJcQSR39C24P';
    //аккаунт вида account.near
    const ACCOUNT_ID = 'account.near';

    //Адрес токена для мультипликации
    const multiplicatorTokenId = 'a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48.factory.bridge.near';
    //const multiplicatorTokenId = 'dac17f958d2ee523a2206206994597c13d831ec7.factory.bridge.near';

    //Во сколько раз увеличить свободный депозит (BigInt)
    const multiplicator = 10n;

    return {
        PRIVATE_KEY: PRIVATE_KEY,
        ACCOUNT_ID: ACCOUNT_ID,
        multiplicatorTokenId: multiplicatorTokenId,
        multiplicator: multiplicator
    }
}
'''
'''--- demultiplicator.js ---
const {BURROW, NUM_DECIMALS} = require("./burrow");
const NEAR = require("./near");

const {PRIVATE_KEY, ACCOUNT_ID, multiplicatorTokenId, multiplicator} = require('./config.js')();

async function main() {
    const near = new NEAR('mainnet');
    await near.load();

    const account = await near.addAccount(PRIVATE_KEY, ACCOUNT_ID);

    const burrow = new BURROW(near, account);

    await burrow.load();
    await burrow.updateAssets();
    await burrow.updatePrices();

    console.log(await burrow.oracleCall({
        "receiver_id": burrow.contractAddress,
        "msg": JSON.stringify({
            Execute: {
                actions: [
                    {
                        DecreaseCollateral: {
                            "token_id": multiplicatorTokenId
                        }
                    },
                    {
                        Repay: {
                            "token_id": multiplicatorTokenId
                        }
                    },
                    {
                        IncreaseCollateral: {
                            "token_id": multiplicatorTokenId
                        }
                    }
                ]
            }
        })
    }));

}

main();
'''
'''--- multiplicator.js ---
const {BURROW, NUM_DECIMALS} = require("./burrow");
const NEAR = require("./near");

const {PRIVATE_KEY, ACCOUNT_ID, multiplicatorTokenId, multiplicator} = require('./config.js')();

async function main() {
    const near = new NEAR('mainnet');
    await near.load();

    const account = await near.addAccount(PRIVATE_KEY, ACCOUNT_ID);

    const burrow = new BURROW(near, account);

    await burrow.load();
    await burrow.updateAssets();
    await burrow.updatePrices();

    
    const accountDetail = await burrow.getAccountColateralBorrow('bozon.near');

    const maxBorrow = burrow.getMaxBorrowAmount(multiplicatorTokenId, accountDetail)

    console.log(await burrow.oracleCall({
        "receiver_id": burrow.contractAddress,
        "msg": JSON.stringify({
            Execute: {
                actions: [
                    {
                        Borrow: {
                            "token_id": multiplicatorTokenId,
                            "amount": (maxBorrow * multiplicator).toString()
                        }
                    },
                    {
                        IncreaseCollateral: {
                            "token_id": multiplicatorTokenId
                        }
                    }
                ]
            }
        })
    }));

}

main();
'''
'''--- near.js ---
const { connect, KeyPair, keyStores, utils, transactions } = require("near-api-js");

module.exports = class NEAR {

    constructor(networkId) {

        this.keyStore = new keyStores.InMemoryKeyStore();

        this.config = {
            networkId,
            keyStore: this.keyStore,
            nodeUrl: `https://rpc.${networkId}.near.org`,
            walletUrl: `https://wallet.${networkId}.near.org`,
            helperUrl: `https://helper.${networkId}.near.org`,
            explorerUrl: `https://explorer.${networkId}.near.org`
        };
    }

    async load() {
        this.nearConnect = await connect(this.config);
    }

    request_near_rpc(params, method) {
        return new Promise(async (resolve, reject) => {

            const json_args = {jsonrpc: "2.0", id: "dontcare", method: method, params: params}

            const fetch_args = {
                method: "POST",
                body: JSON.stringify(json_args),
                headers: {
                    "Content-Type": "application/json"
                }
            }
    
            try {
                const response = await fetch(this.config.nodeUrl, fetch_args);
                const {result} = await response.json();
                if(result.result) {
                    const decode_result = JSON.parse((new TextDecoder()).decode(new Uint8Array(result.result)));
                    resolve(decode_result);
                }
                resolve(result);
            
            } catch(err) {
                setTimeout(async () => {
                    console.log(`Error. Repeat`);
                    return await this.request_near_rpc(params, method);
                }, 5000)
            }
        }); 
    }

    call_contract(account_id, method_name, args) {
        return new Promise(async (resolve, reject) => {

            const args_base64 = Buffer.from(JSON.stringify(args)).toString('base64')

            const params = {
                account_id: account_id, 
                method_name: method_name, 
                request_type: 'call_function', 
                finality: 'final', 
                'args_base64': args_base64
            }

            const resuslt = await this.request_near_rpc(params, 'query');

            resolve(resuslt);
        }); 
    }

    view_account(accountId) {
        return new Promise(async (resolve, reject) => {

            const params = {
                account_id: accountId, 
                request_type: 'view_account', 
                finality: 'optimistic'
            }

            const result = await this.request_near_rpc(params, 'query');
    
            resolve(result);
        }); 
    }

    get_block(blockNumber) {
        return new Promise(async (resolve, reject) => {

            let params;
            if(blockNumber) {
                params = {
                    block_id: blockNumber
                }
            } else {
                params = {
                    finality: 'final'
                }
            }

            const result = await this.request_near_rpc(params, 'block');
    
            resolve(result);
        }); 
    }

    get_chunk(chunkHash) {
        return new Promise(async (resolve, reject) => {

            const params = {
                chunk_id: chunkHash
            }

            const result = await this.request_near_rpc(params, 'chunk');
    
            resolve(result);
        }); 
    }

    protocol_config() {
        return new Promise(async (resolve, reject) => {

            const params = {
                finality: 'final'
            }

            const result = await this.request_near_rpc(params, 'EXPERIMENTAL_protocol_config');

            resolve(result);
        }); 
    }

    async addAccount(PRIVATE_KEY, ACCOUNT_ID) {
        const keyPair = KeyPair.fromString(PRIVATE_KEY);
        await this.keyStore.setKey(this.config.networkId, ACCOUNT_ID, keyPair);
        return await this.nearConnect.account(ACCOUNT_ID);
    }

}
'''
'''--- package-lock.json ---
{
  "name": "BURROW",
  "lockfileVersion": 2,
  "requires": true,
  "packages": {
    "": {
      "dependencies": {
        "near-api-js": "^0.44.2"
      }
    },
    "node_modules/base-x": {
      "version": "3.0.9",
      "resolved": "https://registry.npmjs.org/base-x/-/base-x-3.0.9.tgz",
      "integrity": "sha512-H7JU6iBHTal1gp56aKoaa//YUxEaAOUiydvrV/pILqIHXTtqxSkATOnDA2u+jZ/61sD+L/412+7kzXRtWukhpQ==",
      "dependencies": {
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/bn.js": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/bn.js/-/bn.js-5.2.0.tgz",
      "integrity": "sha512-D7iWRBvnZE8ecXiLj/9wbxH7Tk79fAh8IHaTNq1RWRixsS02W+5qS+iE9yq6RYl0asXx5tw0bLhmT5pIfbSquw=="
    },
    "node_modules/borsh": {
      "version": "0.6.0",
      "resolved": "https://registry.npmjs.org/borsh/-/borsh-0.6.0.tgz",
      "integrity": "sha512-sl5k89ViqsThXQpYa9XDtz1sBl3l1lI313cFUY1HKr+wvMILnb+58xpkqTNrYbelh99dY7K8usxoCusQmqix9Q==",
      "dependencies": {
        "bn.js": "^5.2.0",
        "bs58": "^4.0.0",
        "text-encoding-utf-8": "^1.0.2"
      }
    },
    "node_modules/bs58": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/bs58/-/bs58-4.0.1.tgz",
      "integrity": "sha1-vhYedsNU9veIrkBx9j806MTwpCo=",
      "dependencies": {
        "base-x": "^3.0.2"
      }
    },
    "node_modules/capability": {
      "version": "0.2.5",
      "resolved": "https://registry.npmjs.org/capability/-/capability-0.2.5.tgz",
      "integrity": "sha1-Ua2HNT8ZNv/Xfy8hx0YzpN6oiAE="
    },
    "node_modules/depd": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/depd/-/depd-2.0.0.tgz",
      "integrity": "sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/error-polyfill": {
      "version": "0.1.3",
      "resolved": "https://registry.npmjs.org/error-polyfill/-/error-polyfill-0.1.3.tgz",
      "integrity": "sha512-XHJk60ufE+TG/ydwp4lilOog549iiQF2OAPhkk9DdiYWMrltz5yhDz/xnKuenNwP7gy3dsibssO5QpVhkrSzzg==",
      "dependencies": {
        "capability": "^0.2.5",
        "o3": "^1.0.3",
        "u3": "^0.1.1"
      }
    },
    "node_modules/http-errors": {
      "version": "1.8.1",
      "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-1.8.1.tgz",
      "integrity": "sha512-Kpk9Sm7NmI+RHhnj6OIWDI1d6fIoFAtFt9RLaTMRlg/8w49juAStsrBgp0Dp4OdxdVbRIeKhtCUvoi/RuAhO4g==",
      "dependencies": {
        "depd": "~1.1.2",
        "inherits": "2.0.4",
        "setprototypeof": "1.2.0",
        "statuses": ">= 1.5.0 < 2",
        "toidentifier": "1.0.1"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/http-errors/node_modules/depd": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/depd/-/depd-1.1.2.tgz",
      "integrity": "sha1-m81S4UwJd2PnSbJ0xDRu0uVgtak=",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/inherits": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ=="
    },
    "node_modules/js-sha256": {
      "version": "0.9.0",
      "resolved": "https://registry.npmjs.org/js-sha256/-/js-sha256-0.9.0.tgz",
      "integrity": "sha512-sga3MHh9sgQN2+pJ9VYZ+1LPwXOxuBJBA5nrR5/ofPfuiJBE2hnjsaN8se8JznOmGLN2p49Pe5U/ttafcs/apA=="
    },
    "node_modules/mustache": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/mustache/-/mustache-4.2.0.tgz",
      "integrity": "sha512-71ippSywq5Yb7/tVYyGbkBggbU8H3u5Rz56fH60jGFgr8uHwxs+aSKeqmluIVzM0m0kB7xQjKS6qPfd0b2ZoqQ==",
      "bin": {
        "mustache": "bin/mustache"
      }
    },
    "node_modules/near-api-js": {
      "version": "0.44.2",
      "resolved": "https://registry.npmjs.org/near-api-js/-/near-api-js-0.44.2.tgz",
      "integrity": "sha512-eMnc4V+geggapEUa3nU2p8HSHn/njtloI4P2mceHQWO8vDE1NGpnAw8FuTBrLmXSgIv9m6oocgFc9t3VNf5zwg==",
      "dependencies": {
        "bn.js": "5.2.0",
        "borsh": "^0.6.0",
        "bs58": "^4.0.0",
        "depd": "^2.0.0",
        "error-polyfill": "^0.1.3",
        "http-errors": "^1.7.2",
        "js-sha256": "^0.9.0",
        "mustache": "^4.0.0",
        "node-fetch": "^2.6.1",
        "text-encoding-utf-8": "^1.0.2",
        "tweetnacl": "^1.0.1"
      }
    },
    "node_modules/node-fetch": {
      "version": "2.6.7",
      "resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-2.6.7.tgz",
      "integrity": "sha512-ZjMPFEfVx5j+y2yF35Kzx5sF7kDzxuDj6ziH4FFbOp87zKDZNx8yExJIb05OGF4Nlt9IHFIMBkRl41VdvcNdbQ==",
      "dependencies": {
        "whatwg-url": "^5.0.0"
      },
      "engines": {
        "node": "4.x || >=6.0.0"
      },
      "peerDependencies": {
        "encoding": "^0.1.0"
      },
      "peerDependenciesMeta": {
        "encoding": {
          "optional": true
        }
      }
    },
    "node_modules/o3": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/o3/-/o3-1.0.3.tgz",
      "integrity": "sha1-GSzod6iC36Z1HwQSqGX6+y2h2sA=",
      "dependencies": {
        "capability": "^0.2.5"
      }
    },
    "node_modules/safe-buffer": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
      "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ]
    },
    "node_modules/setprototypeof": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz",
      "integrity": "sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw=="
    },
    "node_modules/statuses": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/statuses/-/statuses-1.5.0.tgz",
      "integrity": "sha1-Fhx9rBd2Wf2YEfQ3cfqZOBR4Yow=",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/text-encoding-utf-8": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/text-encoding-utf-8/-/text-encoding-utf-8-1.0.2.tgz",
      "integrity": "sha512-8bw4MY9WjdsD2aMtO0OzOCY3pXGYNx2d2FfHRVUKkiCPDWjKuOlhLVASS+pD7VkLTVjW268LYJHwsnPFlBpbAg=="
    },
    "node_modules/toidentifier": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/toidentifier/-/toidentifier-1.0.1.tgz",
      "integrity": "sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA==",
      "engines": {
        "node": ">=0.6"
      }
    },
    "node_modules/tr46": {
      "version": "0.0.3",
      "resolved": "https://registry.npmjs.org/tr46/-/tr46-0.0.3.tgz",
      "integrity": "sha1-gYT9NH2snNwYWZLzpmIuFLnZq2o="
    },
    "node_modules/tweetnacl": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/tweetnacl/-/tweetnacl-1.0.3.tgz",
      "integrity": "sha512-6rt+RN7aOi1nGMyC4Xa5DdYiukl2UWCbcJft7YhxReBGQD7OAM8Pbxw6YMo4r2diNEA8FEmu32YOn9rhaiE5yw=="
    },
    "node_modules/u3": {
      "version": "0.1.1",
      "resolved": "https://registry.npmjs.org/u3/-/u3-0.1.1.tgz",
      "integrity": "sha512-+J5D5ir763y+Am/QY6hXNRlwljIeRMZMGs0cT6qqZVVzzT3X3nFPXVyPOFRMOR4kupB0T8JnCdpWdp6Q/iXn3w=="
    },
    "node_modules/webidl-conversions": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-3.0.1.tgz",
      "integrity": "sha1-JFNCdeKnvGvnvIZhHMFq4KVlSHE="
    },
    "node_modules/whatwg-url": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-5.0.0.tgz",
      "integrity": "sha1-lmRU6HZUYuN2RNNib2dCzotwll0=",
      "dependencies": {
        "tr46": "~0.0.3",
        "webidl-conversions": "^3.0.0"
      }
    }
  },
  "dependencies": {
    "base-x": {
      "version": "3.0.9",
      "resolved": "https://registry.npmjs.org/base-x/-/base-x-3.0.9.tgz",
      "integrity": "sha512-H7JU6iBHTal1gp56aKoaa//YUxEaAOUiydvrV/pILqIHXTtqxSkATOnDA2u+jZ/61sD+L/412+7kzXRtWukhpQ==",
      "requires": {
        "safe-buffer": "^5.0.1"
      }
    },
    "bn.js": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/bn.js/-/bn.js-5.2.0.tgz",
      "integrity": "sha512-D7iWRBvnZE8ecXiLj/9wbxH7Tk79fAh8IHaTNq1RWRixsS02W+5qS+iE9yq6RYl0asXx5tw0bLhmT5pIfbSquw=="
    },
    "borsh": {
      "version": "0.6.0",
      "resolved": "https://registry.npmjs.org/borsh/-/borsh-0.6.0.tgz",
      "integrity": "sha512-sl5k89ViqsThXQpYa9XDtz1sBl3l1lI313cFUY1HKr+wvMILnb+58xpkqTNrYbelh99dY7K8usxoCusQmqix9Q==",
      "requires": {
        "bn.js": "^5.2.0",
        "bs58": "^4.0.0",
        "text-encoding-utf-8": "^1.0.2"
      }
    },
    "bs58": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/bs58/-/bs58-4.0.1.tgz",
      "integrity": "sha1-vhYedsNU9veIrkBx9j806MTwpCo=",
      "requires": {
        "base-x": "^3.0.2"
      }
    },
    "capability": {
      "version": "0.2.5",
      "resolved": "https://registry.npmjs.org/capability/-/capability-0.2.5.tgz",
      "integrity": "sha1-Ua2HNT8ZNv/Xfy8hx0YzpN6oiAE="
    },
    "depd": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/depd/-/depd-2.0.0.tgz",
      "integrity": "sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw=="
    },
    "error-polyfill": {
      "version": "0.1.3",
      "resolved": "https://registry.npmjs.org/error-polyfill/-/error-polyfill-0.1.3.tgz",
      "integrity": "sha512-XHJk60ufE+TG/ydwp4lilOog549iiQF2OAPhkk9DdiYWMrltz5yhDz/xnKuenNwP7gy3dsibssO5QpVhkrSzzg==",
      "requires": {
        "capability": "^0.2.5",
        "o3": "^1.0.3",
        "u3": "^0.1.1"
      }
    },
    "http-errors": {
      "version": "1.8.1",
      "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-1.8.1.tgz",
      "integrity": "sha512-Kpk9Sm7NmI+RHhnj6OIWDI1d6fIoFAtFt9RLaTMRlg/8w49juAStsrBgp0Dp4OdxdVbRIeKhtCUvoi/RuAhO4g==",
      "requires": {
        "depd": "~1.1.2",
        "inherits": "2.0.4",
        "setprototypeof": "1.2.0",
        "statuses": ">= 1.5.0 < 2",
        "toidentifier": "1.0.1"
      },
      "dependencies": {
        "depd": {
          "version": "1.1.2",
          "resolved": "https://registry.npmjs.org/depd/-/depd-1.1.2.tgz",
          "integrity": "sha1-m81S4UwJd2PnSbJ0xDRu0uVgtak="
        }
      }
    },
    "inherits": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ=="
    },
    "js-sha256": {
      "version": "0.9.0",
      "resolved": "https://registry.npmjs.org/js-sha256/-/js-sha256-0.9.0.tgz",
      "integrity": "sha512-sga3MHh9sgQN2+pJ9VYZ+1LPwXOxuBJBA5nrR5/ofPfuiJBE2hnjsaN8se8JznOmGLN2p49Pe5U/ttafcs/apA=="
    },
    "mustache": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/mustache/-/mustache-4.2.0.tgz",
      "integrity": "sha512-71ippSywq5Yb7/tVYyGbkBggbU8H3u5Rz56fH60jGFgr8uHwxs+aSKeqmluIVzM0m0kB7xQjKS6qPfd0b2ZoqQ=="
    },
    "near-api-js": {
      "version": "0.44.2",
      "resolved": "https://registry.npmjs.org/near-api-js/-/near-api-js-0.44.2.tgz",
      "integrity": "sha512-eMnc4V+geggapEUa3nU2p8HSHn/njtloI4P2mceHQWO8vDE1NGpnAw8FuTBrLmXSgIv9m6oocgFc9t3VNf5zwg==",
      "requires": {
        "bn.js": "5.2.0",
        "borsh": "^0.6.0",
        "bs58": "^4.0.0",
        "depd": "^2.0.0",
        "error-polyfill": "^0.1.3",
        "http-errors": "^1.7.2",
        "js-sha256": "^0.9.0",
        "mustache": "^4.0.0",
        "node-fetch": "^2.6.1",
        "text-encoding-utf-8": "^1.0.2",
        "tweetnacl": "^1.0.1"
      }
    },
    "node-fetch": {
      "version": "2.6.7",
      "resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-2.6.7.tgz",
      "integrity": "sha512-ZjMPFEfVx5j+y2yF35Kzx5sF7kDzxuDj6ziH4FFbOp87zKDZNx8yExJIb05OGF4Nlt9IHFIMBkRl41VdvcNdbQ==",
      "requires": {
        "whatwg-url": "^5.0.0"
      }
    },
    "o3": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/o3/-/o3-1.0.3.tgz",
      "integrity": "sha1-GSzod6iC36Z1HwQSqGX6+y2h2sA=",
      "requires": {
        "capability": "^0.2.5"
      }
    },
    "safe-buffer": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
      "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ=="
    },
    "setprototypeof": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz",
      "integrity": "sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw=="
    },
    "statuses": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/statuses/-/statuses-1.5.0.tgz",
      "integrity": "sha1-Fhx9rBd2Wf2YEfQ3cfqZOBR4Yow="
    },
    "text-encoding-utf-8": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/text-encoding-utf-8/-/text-encoding-utf-8-1.0.2.tgz",
      "integrity": "sha512-8bw4MY9WjdsD2aMtO0OzOCY3pXGYNx2d2FfHRVUKkiCPDWjKuOlhLVASS+pD7VkLTVjW268LYJHwsnPFlBpbAg=="
    },
    "toidentifier": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/toidentifier/-/toidentifier-1.0.1.tgz",
      "integrity": "sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA=="
    },
    "tr46": {
      "version": "0.0.3",
      "resolved": "https://registry.npmjs.org/tr46/-/tr46-0.0.3.tgz",
      "integrity": "sha1-gYT9NH2snNwYWZLzpmIuFLnZq2o="
    },
    "tweetnacl": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/tweetnacl/-/tweetnacl-1.0.3.tgz",
      "integrity": "sha512-6rt+RN7aOi1nGMyC4Xa5DdYiukl2UWCbcJft7YhxReBGQD7OAM8Pbxw6YMo4r2diNEA8FEmu32YOn9rhaiE5yw=="
    },
    "u3": {
      "version": "0.1.1",
      "resolved": "https://registry.npmjs.org/u3/-/u3-0.1.1.tgz",
      "integrity": "sha512-+J5D5ir763y+Am/QY6hXNRlwljIeRMZMGs0cT6qqZVVzzT3X3nFPXVyPOFRMOR4kupB0T8JnCdpWdp6Q/iXn3w=="
    },
    "webidl-conversions": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-3.0.1.tgz",
      "integrity": "sha1-JFNCdeKnvGvnvIZhHMFq4KVlSHE="
    },
    "whatwg-url": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-5.0.0.tgz",
      "integrity": "sha1-lmRU6HZUYuN2RNNib2dCzotwll0=",
      "requires": {
        "tr46": "~0.0.3",
        "webidl-conversions": "^3.0.0"
      }
    }
  }
}

'''
'''--- package.json ---
{
  "dependencies": {
    "near-api-js": "^0.44.2"
  }
}

'''