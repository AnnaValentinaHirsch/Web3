*GitHub Repository "mehtaphysical/orbit-db-near-iam"*

'''--- package.json ---
{
  "name": "orbit-db-near-iam",
  "version": "1.0.0",
  "description": "",
  "main": "dist/index.cjs.js",
  "module": "dist/index.esm.js",
  "browser": "dist/index.umd.js",
  "scripts": {
    "test": "jest",
    "test:watch": "npm run test -- --watch",
    "build": "rollup -c",
    "dev": "rollup -c -w"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "devDependencies": {
    "@rollup/plugin-commonjs": "^19.0.0",
    "@rollup/plugin-json": "^4.1.0",
    "@rollup/plugin-node-resolve": "^13.0.0",
    "eslint": "^7.28.0",
    "ipfs": "^0.55.3",
    "jest": "^27.0.4",
    "orbit-db": "^0.26.1",
    "prettier": "^2.3.1",
    "rollup": "^2.52.1",
    "rollup-plugin-node-polyfills": "^0.2.1"
  },
  "dependencies": {
    "bs58": "^4.0.1",
    "near-api-js": "^0.41.0",
    "orbit-db-access-controllers": "^0.2.6",
    "orbit-db-identity-provider": "^0.4.0",
    "tweetnacl": "^1.0.3"
  }
}

'''
'''--- rollup.config.js ---
import resolve from "@rollup/plugin-node-resolve";
import commonjs from "@rollup/plugin-commonjs";
import json from "@rollup/plugin-json";
import pkg from "./package.json";

export default [
  {
    input: "src/index.js",
    output: {
      name: "index",
      file: pkg.browser,
      format: "umd",
    },
    plugins: [json()],
  },
  {
    input: "src/index.js",
    plugins: [json()],
    external: [
      "tweetnacl",
      "orbit-db-identity-provider",
      "near-api-js/lib/providers",
      "bs58",
      "orbit-db-access-controllers",
    ],
    output: [
      { file: pkg.main, format: "cjs" },
      { file: pkg.module, format: "es" },
    ],
  },
];

'''
'''--- src/NEARAccessController.js ---
import { AccessController } from "orbit-db-access-controllers";
import { verify } from "./verify";

export class NEARAccessController extends AccessController {
  static async create(orbitdb, options) {
    return new NEARAccessController();
  }

  static get type() {
    return "NEARAccessController";
  }

  async canAppend({ identity }) {
    return verify(identity);
  }

  async save() {
    return {};
  }
}

'''
'''--- src/NEARIdentityProvider.js ---
import IdentityProvider from "orbit-db-identity-provider";
import { encode } from "bs58";
import { verify } from "./verify";

export class NEARIdentityProvider extends IdentityProvider {
  constructor(options) {
    super(options);
    this.near = options.near;
    this.wallet = options.wallet;
  }
  async getId() {
    return this.wallet.getAccountId();
  }

  async signIdentity(data) {
    const keyPair = await this.near.config.keyStore.getKey(
      this.near.config.networkId,
      this.wallet.getAccountId()
    );
    const { publicKey, signature } = keyPair.sign(Buffer.from(data));

    return `${publicKey.toString()}..${encode(signature)}..${
      this.near.config.nodeUrl
    }`;
  }

  static async verifyIdentity(identity) {
    return verify(identity);
  }

  static get type() {
    return "NEARIdentityProvider";
  }
}

'''
'''--- src/index.js ---
export * from "./NEARAccessController";
export * from "./NEARIdentityProvider";

'''
'''--- src/verify.js ---
import { sign } from "tweetnacl";
import { JsonRpcProvider } from "near-api-js/lib/providers";
import { decode } from "bs58";

export const verify = async (identity) => {
  const [publicKey, signature, nodeUrl] =
    identity.signatures.publicKey.split("..");
  if (!nodeUrl) return false;

  const provider = new JsonRpcProvider(nodeUrl);

  try {
    const good = sign.detached.verify(
      Buffer.from(`${identity.publicKey}${identity.signatures.id}`),
      decode(signature),
      decode(publicKey.split(":")[1])
    );
    if (!good) return false;

    await provider.query({
      request_type: "view_access_key",
      account_id: identity.id,
      public_key: publicKey,
      finality: "optimistic",
    });

    return true;
  } catch (e) {
    console.error(e);
    return false;
  }
};

'''