*GitHub Repository "heavenswill/Movie-List"*

'''--- README.md ---
# Movie-List

"Movie-List" application is a simple near project. You can add new movies, read uploaded movies, update movies, delete movies, add a comment about added movies, and read comments about the movie.

## Installation

1- Clone repository to your computer

`https://github.com/heavenswill/Movie-List.git`

2- go to file 

`cd Movie-List`

3- run this in your terminal

`yarn`

4- Login your account

`login near` 

5- Build contract

`yarn build:release`

6- deploy contract

`yarn deploy`

7- Export the development account to the $CONTRACT

`export CONTRACT=<YOUR_DEV_ACCOUNT_HERE>`

## Usage

+ Add a new movie

`near call $CONTRACT createMovie '{"name":<MOVIE NAME>,"type":<MOVIE TYPE>,"description":<DESCRIPTION ABOUT MOVIE>}' --accountId YOUR-ACCOUNT.testnet`

+ Read informaiton about movie

`near view $CONTRACT getMovieById '{"id":MOVIE-ID}' --accountId YOUR-ACCOUNT.testnet`

+ Read information about movies

`near view $CONTRACT getMovies '{"offset":<WHERE TO START>,"limit":<LIMIT OF GET MOVIE>}' --accountId YOUR-ACCOUNT.testnet`

+ Update movie

`near call $CONTRACT updateMovie '{"id":MOVIE ID,"updates":{"name":"<MOVIE NAME>","type":"<WHAT TYPE OF MOVIE>","description":"<DESCRIPTION ABOUT MOVIE>"}}' --accountId YOUR-ACCOUNT.testnet`

+ Delete movie

`near call $CONTRACT del '{"id":MOVIE ID}' --accountId YOUR-ACCOUNT.testnet`

+ Add a comment

`near call $CONTRACT addComment '{"text":<COMMENT>,"movieId":MOVIE ID}' --accountId YOUR-ACCOUNT.testnet`

+ Read comments

`near call $CONTRACT getComments --accountId YOUR-ACCOUNT.testnet`

+ Read movie's comments

`near call $CONTRACT getCommentsByMovieId '{"id":MOVIE ID,"limit":<LIMIT OF GET COMMENT>}' --accountId YOUR-ACCOUNT.testnet`

## Loom video

https://www.loom.com/share/1994566905e34edaa632529b22d66bdd

## Patika

https://www.patika.dev/tr

'''
'''--- asconfig.json ---
{
  "extends": "near-sdk-as/asconfig.json"
}

'''
'''--- assembly/as_types.d.ts ---
/// <reference types="near-sdk-as/assembly/as_types" />

'''
'''--- assembly/index.ts ---
import { Movie, PartialMovie, comments, PostedComment } from "./model";

export function createMovie(
  name: string,
  type: string,
  description: string
): Movie {
  return Movie.addMovie(name, type, description);
}

export function getMovieById(id: u32): Movie {
  return Movie.findMovieById(id);
}

export function getMovies(offset: u32, limit: u32 = 10): Movie[] {
  return Movie.findMovies(offset, limit);
}

export function updateMovie(id: u32, updates: PartialMovie): Movie {
  return Movie.findMovieByIdAndUpdate(id, updates);
}

export function del(id: u32): void {
  Movie.findMovieByIdAndDelete(id);
}

export function addComment(text: string, movieId: u32): void {
  const comment = new PostedComment(text, movieId);
  comments.push(comment);
}
const limit_movie = 10;
export function getComments(): PostedComment[] {
  const numComments = min(limit_movie, comments.length);
  const startIndex = comments.length - numComments;
  const result = new Array<PostedComment>(numComments);
  for (let i = 0; i < numComments; i++) {
    result[i] = comments[i + startIndex];
  }
  return result;
}

export function getCommentsByMovieId(
  id: i32,
  limit: i32 = 10
): PostedComment[] {
  const numComments = min(limit, comments.length);
  const startIndex = comments.length - numComments;
  const result = new Array<PostedComment>(numComments);
  for (let i = 0; i < numComments; i++) {
    if (comments[i].movieId == id) {
      result[i] = comments[i + startIndex];
    }
  }
  return result;
}

'''
'''--- assembly/model.ts ---
import {
  PersistentUnorderedMap,
  math,
  PersistentVector,
  Context,
} from "near-sdk-as";

export const movies = new PersistentUnorderedMap<u32, Movie>("movies");

export const ownerMovie = new PersistentUnorderedMap<u32, Array<AccountId>>(
  "access"
);

export const comments = new PersistentVector<PostedComment>("m");

type AccountId = string;

@nearBindgen
export class PostedComment {
  movieId: u32;
  sender: string;
  constructor(public text: string, movieId: u32) {
    this.sender = Context.sender;
    this.movieId = movieId;
    this.text = text;
  }
}

@nearBindgen
export class PartialMovie {
  name: string;
  type: string;
  description: string;
}

@nearBindgen
export class Movie {
  id: u32;
  user: AccountId = Context.sender;
  name: string;
  type: string;
  description: string;

  constructor(name: string, type: string, description: string) {
    this.id = math.hash32<string>(name);
    this.name = name;
    this.type = type;
    this.description = description;
  }

  static addMovie(name: string, type: string, description: string): Movie {
    const movie = new Movie(name, type, description);
    movies.set(movie.id, movie);

    return movie;
  }

  static findMovieById(id: u32): Movie {
    return movies.getSome(id);
  }

  static findMovies(offset: u32, limit: u32): Movie[] {
    return movies.values(offset, offset + limit);
  }

  static findMovieByIdAndUpdate(id: u32, partial: PartialMovie): Movie {
    const movie = this.findMovieById(id);

    movie.name = partial.name;
    movie.type = partial.type;
    movie.description = partial.description;

    movies.set(id, movie);

    return movie;
  }

  static findMovieByIdAndDelete(id: u32): void {
    movies.delete(id);
  }
}

'''
'''--- assembly/tsconfig.json ---
{
  "extends": "assemblyscript/std/assembly.json",
  "include": ["./**/*.ts"]
}

'''
'''--- index.html ---
<!DOCTYPE html>
<html lang="en">
<head>
<script type="module">
import { add } from "./build/release.js";
document.body.innerText = add(1, 2);
</script>
</head>
<body></body>
</html>

'''
'''--- package.json ---
{
  "name": "near-project",
  "version": "1.0.0",
  "main": "index.js",
  "license": "MIT",
  "dependencies": {
    "@assemblyscript/loader": "^0.20.4",
    "asbuild": "^0.2.0",
    "assemblyscript": "^0.20.4",
    "near-cli": "^3.2.0",
    "near-sdk-as": "^3.2.3"
  },
  "type": "module",
  "exports": {
    ".": {
      "import": "./build/release.js",
      "types": "./build/release.d.ts"
    }
  },
  "scripts": {
    "asbuild:debug": "asc assembly/index.ts --target debug",
    "asbuild:release": "asc assembly/index.ts --target release",
    "asbuild": "yarn asbuild:debug && yarn asbuild:release",
    "start": "npx serve .",
    "build:release": "asb",
    "deploy": "near dev-deploy build/release/near-project.wasm",
    "dev": "yarn build:release && yarn deploy",
    "test": "asp"
  },
  "devDependencies": {
    "assemblyscript": "^0.20.4"
  }
}

'''
'''--- tests/index.js ---
import assert from "assert";
import { add } from "../build/debug.js";
assert.strictEqual(add(1, 2), 3);
console.log("ok");

'''