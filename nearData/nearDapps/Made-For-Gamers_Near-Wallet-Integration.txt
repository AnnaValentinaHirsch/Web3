*GitHub Repository "Made-For-Gamers/Near-Wallet-Integration"*

'''--- Examples/nearUnityClient.Android/Near Unity Client/Assets/Fonts/Jupiter/LICENSE.txt ---
The Jupiter font is created by Isurus Labs and is in the public domain.
'''
'''--- Examples/nearUnityClient.Android/Near Unity Client/Assets/MFG/Scripts/API/Near_API.cs ---
using Newtonsoft.Json;
using System.Collections;
using System.Collections.Generic;
using System.Net;
using System.Text;
using UnityEngine;
using UnityEngine.Networking;
using TMPro;

public class Near_API : MonoBehaviour
{
    [SerializeField] private TextMeshProUGUI resultText;

    private UnityWebRequest request;
    private Post_ViewAccount account;

    //Base URLs
    static Dictionary<string, string> baseUrl = new Dictionary<string, string>()
    {
        {"mainnet", "https://rpc.mainnet.near.org"},
        {"testnet", "https://rpc.testnet.near.org"},
        {"betanet", "https://rpc.betanet.near.org"},
        {"localnet", "http://localhost:3030"},
    };

    private void Start()
    {
        StartCoroutine(ViewAccount(baseUrl["testnet"]));
    }

    private IEnumerator ViewAccount(string url)
    {
        //Init post request
        account = new Post_ViewAccount();
        byte[] rawData = Encoding.UTF8.GetBytes(JsonConvert.SerializeObject(account));

        using (request = new UnityWebRequest(url, "POST"))
        {
           
            request.SetRequestHeader("Content-Type", "application/json");
            request.uploadHandler = new UploadHandlerRaw(rawData);
            request.downloadHandler = new DownloadHandlerBuffer();
            yield return request.SendWebRequest();

            //Result
            if (request.result == UnityWebRequest.Result.Success)
            {
                ViewAccount viewAccount = JsonConvert.DeserializeObject<ViewAccount>(request.downloadHandler.text);
                resultText.text = "Amount: " + viewAccount.result.amount + "\n"
                    + "Block Hash: " + viewAccount.result.block_hash + "\n"
                     + "Block Height: " + viewAccount.result.block_height + "\n"
                      + "Code Hash: " + viewAccount.result.code_hash + "\n"
                       + "Locked: " + viewAccount.result.locked + "\n"
                        + "Storage Paid At: " + viewAccount.result.storage_paid_at + "\n"
                         + "Storage Usage: " + viewAccount.result.storage_usage + "\n"
                           + "Account ID: " + WalletAuthenticate.nearAccountID + "\n";
            }
            else
            {
                Debug.LogError(string.Format("API post error: {0}", request.error));
            }
        }
    }
}

'''
'''--- Examples/nearUnityClient.Android/Near Unity Client/Assets/MFG/Scripts/API/Post Data/Post_ViewAccount.cs ---

public class Post_ViewAccount 
{
    public string jsonrpc = "2.0";
    public string id = "mfg.testnet";
    public string method = "query";
    public Param @params = new Param();

    public class Param
    {
        public string request_type = "view_account";
        public string finality = "final";
        public string account_id = "mfg.testnet";
    }
}

'''
'''--- Examples/nearUnityClient.Android/Near Unity Client/Assets/MFG/Scripts/API/Return Data/ViewAccount.cs ---
using System;

[Serializable]
public class ViewAccount 
{
    public string jsonrpc;
    public Result result = new Result();
    public string id;

    public class Result
    {
        public string amount;
        public string block_hash;
        public int block_height;
        public string code_hash;
        public string locked;
        public int storage_paid_at;
        public int storage_usage;
    }
}

'''
'''--- Examples/nearUnityClient.Android/Near Unity Client/Assets/MFG/Scripts/Auth/WalletAuthenticate.cs ---
using UnityEngine;
using System.Runtime.InteropServices;
using TMPro;
using System;
using System.Web;
using UnityEngine.SceneManagement;

public class WalletAuthenticate : MonoBehaviour
{
#if UNITY_WEBGL && !UNITY_EDITOR

    [DllImport("__Internal")]
    private static extern void AuthenticateWithNearWallet(string appKey, string contractName, string onSuccess, string onFailure);
 
    public void AuthenticateTest()
    {
         AuthenticateWithNearWallet("mfg.testnet", "", "OnAuthenticationSuccess", "OnAuthenticationFailure");
    }

#endif

    [SerializeField] private TextMeshProUGUI txtAccountId;
    public static string nearAccountID;
    public static string nearAllKeys;

    public void OnAuthenticationSuccess(string accountId, string allKeys)
    {
        nearAccountID = accountId;
        nearAllKeys = allKeys;
        SceneManager.LoadScene("NearAccount");
    }

    public void OnAuthenticationFailure(string error)
    {
        txtAccountId.text = error;
    }

    void Start()
    {
        string currentUrl = Application.absoluteURL;
        var uri = new Uri(currentUrl);
        var queryParams = HttpUtility.ParseQueryString(uri.Query);

        if (queryParams["account_id"] != null && queryParams["all_keys"] != null)
        {
            var accountId = queryParams["account_id"];
            var allKeys = queryParams["all_keys"];
            OnAuthenticationSuccess(accountId, allKeys);
        }
    }
}

'''
'''--- Examples/nearUnityClient.Android/Near Unity Client/Assets/NearExample/LoginSceneScript.cs ---
﻿using System.Collections;
using System.Collections.Generic;
using System.Threading.Tasks;
using UnityEngine;
using UnityEngine.SceneManagement;

public class LoginSceneScript : MonoBehaviour
{
    // Start is called before the first frame update
    void Start()
    {
        Application.deepLinkActivated += async (string url) => await CompleteSignIn(url);
    }
    
    async Task CompleteSignIn(string url)
    {        
        await NearPersistentManager.Instance.WalletAccount.CompleteSignIn(url);
        if(NearPersistentManager.Instance.WalletAccount.IsSignedIn() == true)
        {
            SceneManager.LoadScene("Near", LoadSceneMode.Single);
        }        
    }
}

'''
'''--- Examples/nearUnityClient.Android/Near Unity Client/Assets/NearExample/NearPersistentManager.cs ---
﻿using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using NearClientUnity;
using NearClientUnity.Utilities;
using NearClientUnity.KeyStores;
using NearClientUnity.Providers;

public class NearPersistentManager : MonoBehaviour
{
    public static NearPersistentManager Instance { get; private set; }
    public WalletAccount WalletAccount { get; set; }
    public Near Near { get; set; }

    void Start()
    {
        Near = new Near(config: new NearConfig()
        {
            NetworkId = "default",
            NodeUrl = "https://rpc.testnet.near.org",
            ProviderType = ProviderType.JsonRpc,
            SignerType = SignerType.InMemory,
            KeyStore = new InMemoryKeyStore(),
            ContractName = "myContractId",
            WalletUrl = "https://wallet.testnet.near.org"
        });
        WalletAccount = new WalletAccount(
        Near,
        "",
        new AuthService(),
        new AuthStorage());
    }    

    private void Awake()
    {
        if (Instance == null)
        {
            Instance = this;
            DontDestroyOnLoad(gameObject);
        }
        else
        {
            Destroy(gameObject);
        }
    }
}

public class AuthService : IExternalAuthService
{
    public bool OpenUrl(string url)
    {
        try
        {
            Application.OpenURL(url);
            return true;
        }
        catch
        {
            return false;
        }
    }
}

public class AuthStorage : IExternalAuthStorage
{  
    public bool HasKey(string key)
    {
        return PlayerPrefs.HasKey(key);
    }

    public void Add(string key, string value)
    {
        PlayerPrefs.SetString(key, value);
        PlayerPrefs.Save();
    }

    public string GetValue(string key)
    {
        return PlayerPrefs.GetString(key);
    }

    public void DeleteKey(string key)
    {
        PlayerPrefs.DeleteKey(key);
        PlayerPrefs.Save();
    }
}
'''
'''--- Examples/nearUnityClient.Android/Near Unity Client/Assets/NearExample/NearSceneScript.cs ---
﻿using System.Linq;
using System.Threading.Tasks;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using NearClientUnity;
using NearClientUnity.Utilities;
using NearClientUnity.KeyStores;
using NearClientUnity.Providers;

public class NearSceneScript : MonoBehaviour
{
    private string accountId;
    private string accountBalance;
    private string accountStorageUsed;
    private string accountStoragePaid;
    private bool finished = false;

    void Awake()
    {
        Task.Run(async() => await CollectInformation());
    }

    private Text GetTextObjectByName(string name)
    {
        var canvas = GameObject.Find("Canvas");
        var texts = canvas.GetComponentsInChildren<Text>();
        return texts.FirstOrDefault(textObject => textObject.name == name);
    }

    async Task CollectInformation()
    {
        var walletAccountId = NearPersistentManager.Instance.WalletAccount.GetAccountId();        
        Account account = await NearPersistentManager.Instance.Near.AccountAsync(walletAccountId);
        AccountState accountState = await account.GetStateAsync();
        accountId = walletAccountId;
        accountBalance = FormatNearAmount(accountState.Amount);
        accountStorageUsed = accountState.StorageUsage.ToString();
        accountStoragePaid = accountState.StoragePaidAt.ToString();
        finished = true;
    }

    private string FormatNearAmount(string amount)
    {
        int NEAR_NOMINATION_EXP = 24;
        return $"{amount.Substring(0, amount.Length - NEAR_NOMINATION_EXP)} Near";
    }

    private void LateUpdate()
    {
        if(finished == true)
        {
            GetTextObjectByName("textAccountId").text = $"Id: {accountId}";
            GetTextObjectByName("textAccountBalance").text = $"Balance: {accountBalance}";
            GetTextObjectByName("textAccountStorage").text = $"Storage (used/paid): {accountStorageUsed}/{accountStoragePaid}";
        }
    }
 }

'''
'''--- Examples/nearUnityClient.Android/Near Unity Client/Assets/NearExample/SignInButtonHandler.cs ---
﻿using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class SignInButtonHandler : MonoBehaviour
{
    public async void RequestSignIn()
    {
        await NearPersistentManager.Instance.WalletAccount.RequestSignIn(
            "",
            "Near Unity Client",
            new Uri("nearclientunity://testnet.near.org/success"),
            new Uri("nearclientunity://testnet.near.org/fail"),
            new Uri("nearclientios://testnet.near.org")
            );
    }

    //nft-frontend-simple-mint.blockhead.testnet
}

'''
'''--- Examples/nearUnityClient.Android/Near Unity Client/Assets/NearExample/SignOutButtonHandler.cs ---
﻿using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.SceneManagement;

public class SignOutButtonHandler : MonoBehaviour
{
    public void SignOut()
    {
        NearPersistentManager.Instance.WalletAccount.SignOut();
        if (NearPersistentManager.Instance.WalletAccount.IsSignedIn() == false)
        {
            SceneManager.LoadScene("Login", LoadSceneMode.Single);
        }
    }
}

'''
'''--- Examples/nearUnityClient.Android/Near Unity Client/Assets/NearExample/SplashSceneScript.cs ---
﻿using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.SceneManagement;

public class SplashSceneScript : MonoBehaviour
{
    private bool finished = false;
    
    void Start()
    {
        StartCoroutine(DoFade());
    }

    IEnumerator DoFade()
    {
        CanvasGroup canvasGroup = GetComponent<CanvasGroup>();
        while(canvasGroup.alpha < 1)
        {
            canvasGroup.alpha += Time.deltaTime;
            yield return null;
        }
        yield return new WaitForSeconds(1);
        while(canvasGroup.alpha > 0)
        {
            canvasGroup.alpha -= Time.deltaTime;
            yield return null;
        }
        yield return finished = true;
    }

    private void LateUpdate()
    {
        if(finished == true && NearPersistentManager.Instance.WalletAccount.IsSignedIn() == false)
        {
            SceneManager.LoadScene("Login", LoadSceneMode.Single);
        }
        if (finished == true && NearPersistentManager.Instance.WalletAccount.IsSignedIn() == true)
        {
            SceneManager.LoadScene("Near", LoadSceneMode.Single);
        }
    }
   
}

'''
'''--- Examples/nearUnityClient.Android/Near Unity Client/Assets/RFG/NEAR/Scripts/NearAPI.cs ---
using UnityEngine;
using System.Runtime.InteropServices;

namespace RFG.NEAR
{

  public class NearAPI
  {
    private static string _signedIn = "false";//Just to mimic the actual functionality
    private static string _dummytokens = "[{token_id:'1',metadata:{title:'Fred',media:'https://roguefoxguild.mypinata.cloud/ipfs/QmYMT3s9C4ckQxfMEm7ew4PUVPSrYLeo36uhdhGSctDJdB/Character_1.png'} },{token_id:'2',metadata:{title:'Alice',media:'https://roguefoxguild.mypinata.cloud/ipfs/QmYMT3s9C4ckQxfMEm7ew4PUVPSrYLeo36uhdhGSctDJdB/Character_2.png'}}]";

#if !UNITY_EDITOR

    [DllImport("__Internal")]
    public static extern void RequestSignIn(string contractId, string network = "testnet");

    [DllImport("__Internal")]
    public static extern void SignOut(string network = "testnet");

    [DllImport("__Internal")]
    public static extern void IsSignedIn(string network = "testnet");

    [DllImport("__Internal")]
    public static extern void NftTokensForOwner(string accountId, string contractId,string network = "testnet");

    [DllImport("__Internal")]
    public static extern void GetAccountId(string network = "testnet");

#else

    public static void RequestSignIn(string contractId, string network = "testnet")
    {
      Debug.Log("RequestSignIn: " + contractId + " " + network);
      _signedIn = "true";
    }

    public static void SignOut(string network = "testnet")
    {
      Debug.Log("SignOut: " + network);
      _signedIn = "false";
    }

    public static void IsSignedIn(string network = "testnet")
    {
      Debug.Log("IsSignedIn: " + network);
      NearCallbacks.Instance.IsSignedIn(_signedIn);
    }

    public static void GetAccountId(string network = "testnet")
    {
      Debug.Log("GetAccountId: " + network);
      NearCallbacks.Instance.GetAccountId("testing.near");
    }

    public static void NftTokensForOwner(string accountId, string contractId, string network = "testnet")
    {
      Debug.Log("NftTokensForOwner: " + accountId + " " + contractId + " " + network);
      NearCallbacks.Instance.NftTokensForOwner(_dummytokens);
    }

#endif

  }
}
'''
'''--- Examples/nearUnityClient.Android/Near Unity Client/Assets/RFG/NEAR/Scripts/NearCallbacks.cs ---
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System;
using Newtonsoft.Json;

namespace RFG.NEAR
{

  [System.Serializable]
  public class Token
  {
    public string token_id;
    public string owner_id;
    public MetaData metadata;
  }

  [System.Serializable]
  public class MetaData
  {
    public string title;
    public string description;
    public string media;
    public string media_hash;
    public string copies;
    public string issued_at;
    public string expires_at;
    public string starts_at;
    public string updated_at;
    public string extra;
    public string reference;
    public string reference_hash;
  }

  public class NearCallbacks : MonoBehaviour
  {
    public static event Action<bool> OnSignIn;
    public static event Action<string> OnGetAccountId;
    public static event Action<Token[]> OnNftTokensForOwner;

    public static NearCallbacks Instance;

    void Awake()
    {
      if (Instance == null)
      {
        Instance = this;
      }
      else
      {
        Destroy(gameObject);
      }
    }

    public void GetAccountId(string accountId)
    {
      Debug.Log("GetAccountId: " + accountId);
      OnGetAccountId?.Invoke(accountId);
    }

    public void IsSignedIn(string signedIn)
    {
      OnSignIn?.Invoke(signedIn == "true");
    }

    public void NftTokensForOwner(string tokens)
    {
      Token[] tokenArray = JsonConvert.DeserializeObject<Token[]>(tokens);
      OnNftTokensForOwner?.Invoke(tokenArray);
    }

  }

}
'''
'''--- Examples/nearUnityClient.Android/Near Unity Client/Assets/RFG/NEAR/Scripts/NearController.cs ---
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using TMPro;
using RFG.NEAR;
using System.Threading.Tasks;

public class NearController : MonoBehaviour
{
  [SerializeField] private string _contractId = "h00kd.near";
  [SerializeField] private string _network = "testnet";

  [SerializeField] private TMP_Text _textWelcome;
  [SerializeField] private TMP_Text _textTokens;
  [SerializeField] Button _buttonSignInOut;
  [SerializeField] UIToken _uiTokenPrefab;
  [SerializeField] Transform _uiTokenParent;

  private string _accountId;
  private bool _signedIn;

  void OnEnable()
  {
    NearCallbacks.OnSignIn += OnSignIn;
    NearCallbacks.OnGetAccountId += OnGetAccountId;
    NearCallbacks.OnNftTokensForOwner += OnNftTokensForOwner;
  }

  void OnDisable()
  {
    NearCallbacks.OnSignIn -= OnSignIn;
    NearCallbacks.OnGetAccountId -= OnGetAccountId;
    NearCallbacks.OnNftTokensForOwner -= OnNftTokensForOwner;
  }

  void Start()
  {
    NearAPI.IsSignedIn(_network);
  }

  private void OnSignIn(bool signedIn)
  {
    _signedIn = signedIn;
    if (_signedIn)
    {
      NearAPI.GetAccountId(_network);
      _buttonSignInOut.GetComponentInChildren<TMP_Text>().text = "Sign Out";
      _textTokens.text = "Click Get Tokens to continue...";
    }
    else
    {
      _textWelcome.text = "You must sign in...";
      _textTokens.text = "You must sign in...";
      _buttonSignInOut.GetComponentInChildren<TMP_Text>().text = "Sign In";
    }
  }
  private void OnGetAccountId(string accountId)
  {
    _accountId = accountId;
    _textWelcome.text = "Welcome " + _accountId;
  }
  private async void OnNftTokensForOwner(Token[] tokens)
  {
    foreach (Transform child in _uiTokenParent)
    {
      Destroy(child.gameObject);
    }

    foreach (var token in tokens)
    {
      _textTokens.text = "Select a token to continue...";

      // Get the image
      Texture texture = await RestAPI.GetImage(token.metadata.media);
      if (texture != null)
      {
        UIToken uiToken = Instantiate(_uiTokenPrefab);
        uiToken.SetImage(texture);
        uiToken.SetTitle(token.metadata.title);
        uiToken.SetTokenId(token.token_id);
        uiToken.SetButtonListener(OnTokenButtonClicked);
        uiToken.transform.SetParent(_uiTokenParent);
        uiToken.transform.localScale = Vector3.one;
        uiToken.transform.localPosition = Vector3.zero;
        _uiTokenParent.localPosition = Vector3.zero;
      }
    }
  }

  void OnTokenButtonClicked(string tokenId)
  {
    Debug.Log("OnTokenButtonClicked: " + tokenId);
    _textTokens.text = "Token Id: " + tokenId + " was selected!";
  }

  public void NftTokensForOwner()
  {
    if (!_signedIn)
    {
      _textTokens.text = "You must sign in to get tokens...";
      return;
    }
    NearAPI.NftTokensForOwner(_accountId, _contractId, _network);
  }
  public void SignInOut()
  {
    if (_signedIn)
    {
      NearAPI.SignOut(_network);
      NearAPI.IsSignedIn(_network);
    }
    else
    {
      NearAPI.RequestSignIn(_contractId, _network);//This will do a page refresh anyway
      NearAPI.IsSignedIn(_network);
    }
  }

}

'''
'''--- Examples/nearUnityClient.Android/Near Unity Client/Assets/RFG/NEAR/Scripts/UI/UIToken.cs ---
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using TMPro;

public class UIToken : MonoBehaviour
{
  [SerializeField] private TMP_Text _textTokenId;
  [SerializeField] private Image _image;
  [SerializeField] private TMP_Text _textTitle;
  [SerializeField] private Button _button;

  public void SetImage(Texture texture)
  {
    _image.sprite = Sprite.Create((Texture2D)texture, new Rect(0, 0, texture.width, texture.height), Vector2.zero);
  }

  public void SetTitle(string title)
  {
    _textTitle.text = title;
  }

  public void SetTokenId(string tokenId)
  {
    _textTokenId.text = tokenId;
  }

  public void SetButtonListener(System.Action<string> listener)
  {
    _button.onClick.AddListener(() => listener(_textTokenId.text));
  }

}

'''
'''--- Examples/nearUnityClient.Android/Near Unity Client/Assets/RFG/NEAR/Scripts/Utils/RestAPI.cs ---
using System.Threading.Tasks;
using UnityEngine;
using UnityEngine.Networking;

namespace RFG.NEAR
{

  public class RestAPI
  {
    public const string IPFSURL = "https://cloudflare-ipfs.com/ipfs/";

    async static public Task<Texture> GetImage(string imageIPFS)
    {
      Debug.Log("GetImage: " + imageIPFS);
      imageIPFS = imageIPFS.Replace("///", IPFSURL);
      using (UnityWebRequest webRequest = UnityWebRequestTexture.GetTexture(imageIPFS))
      {
        try
        {
          await webRequest.SendWebRequest();
          Texture texture = DownloadHandlerTexture.GetContent(webRequest);
          return texture;
        }
        catch (System.Exception)
        {
          Debug.Log("Error: " + imageIPFS);
          return null;
        }
      }
    }
  }

}
'''
'''--- Examples/nearUnityClient.Android/Near Unity Client/Assets/RFG/NEAR/Scripts/Utils/UnityAsyncOperationAwaiter.cs ---
using System.Runtime.CompilerServices; using System.Threading.Tasks; using UnityEngine;

public static class ExtensionMethods
{
    public static TaskAwaiter GetAwaiter(this AsyncOperation asyncOp)
    {
        var tcs = new TaskCompletionSource<object>();
        asyncOp.completed += obj => { tcs.SetResult(null); };
        return ((Task)tcs.Task).GetAwaiter();
    }
}
'''
'''--- Examples/nearUnityClient.Android/Near Unity Client/Assets/TextMesh Pro/Fonts/LiberationSans - OFL.txt ---
Digitized data copyright (c) 2010 Google Corporation
	with Reserved Font Arimo, Tinos and Cousine.
Copyright (c) 2012 Red Hat, Inc.
	with Reserved Font Name Liberation.

This Font Software is licensed under the SIL Open Font License, Version 1.1.
This license is copied below, and is also available with a FAQ at: http://scripts.sil.org/OFL

-----------------------------------------------------------
SIL OPEN FONT LICENSE Version 1.1 - 26 February 2007
-----------------------------------------------------------

PREAMBLE
The goals of the Open Font License (OFL) are to stimulate worldwide development of collaborative font projects, to support the font creation efforts of academic and linguistic communities, and to provide a free and open framework in which fonts may be shared and improved in partnership with others.

The OFL allows the licensed fonts to be used, studied, modified and redistributed freely as long as they are not sold by themselves. The fonts, including any derivative works, can be bundled, embedded, redistributed and/or sold with any software provided that any reserved names are not used by derivative works. The fonts and derivatives, however, cannot be released under any other type of license. The requirement for fonts to remain under this license does not apply to any document created using the fonts or their derivatives.

DEFINITIONS
"Font Software" refers to the set of files released by the Copyright Holder(s) under this license and clearly marked as such. This may include source files, build scripts and documentation.

"Reserved Font Name" refers to any names specified as such after the copyright statement(s).

"Original Version" refers to the collection of Font Software components as distributed by the Copyright Holder(s).

"Modified Version" refers to any derivative made by adding to, deleting, or substituting -- in part or in whole -- any of the components of the Original Version, by changing formats or by porting the Font Software to a new environment.

"Author" refers to any designer, engineer, programmer, technical writer or other person who contributed to the Font Software.

PERMISSION & CONDITIONS
Permission is hereby granted, free of charge, to any person obtaining a copy of the Font Software, to use, study, copy, merge, embed, modify, redistribute, and sell modified and unmodified copies of the Font Software, subject to the following conditions:

1) Neither the Font Software nor any of its individual components, in Original or Modified Versions, may be sold by itself.

2) Original or Modified Versions of the Font Software may be bundled, redistributed and/or sold with any software, provided that each copy contains the above copyright notice and this license. These can be included either as stand-alone text files, human-readable headers or in the appropriate machine-readable metadata fields within text or binary files as long as those fields can be easily viewed by the user.

3) No Modified Version of the Font Software may use the Reserved Font Name(s) unless explicit written permission is granted by the corresponding Copyright Holder. This restriction only applies to the primary font name as presented to the users.

4) The name(s) of the Copyright Holder(s) or the Author(s) of the Font Software shall not be used to promote, endorse or advertise any Modified Version, except to acknowledge the contribution(s) of the Copyright Holder(s) and the Author(s) or with their explicit written permission.

5) The Font Software, modified or unmodified, in part or in whole, must be distributed entirely under this license, and must not be distributed under any other license. The requirement for fonts to remain under this license does not apply to any document created using the Font Software.

TERMINATION
This license becomes null and void if any of the above conditions are not met.

DISCLAIMER
THE FONT SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT OF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, INCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROM OTHER DEALINGS IN THE FONT SOFTWARE.
'''
'''--- Examples/nearUnityClient.Android/Near Unity Client/Assets/TextMesh Pro/Resources/LineBreaking Following Characters.txt ---
﻿)]｝〕〉》」』】〙〗〟’”｠»ヽヾーァィゥェォッャュョヮヵヶぁぃぅぇぉっゃゅょゎゕゖㇰㇱㇲㇳㇴㇵㇶㇷㇸㇹㇺㇻㇼㇽㇾㇿ々〻‐゠–〜?!‼⁇⁈⁉・、%,.:;。！？］）：；＝}¢°"†‡℃〆％，．
'''
'''--- Examples/nearUnityClient.Android/Near Unity Client/Assets/TextMesh Pro/Resources/LineBreaking Leading Characters.txt ---
﻿([｛〔〈《「『【〘〖〝‘“｟«$—…‥〳〴〵\［（{£¥"々〇＄￥￦ #
'''
'''--- Examples/nearUnityClient.Android/Near Unity Client/Assets/TextMesh Pro/Sprites/EmojiOne Attribution.txt ---
This sample of beautiful emojis are provided by EmojiOne https://www.emojione.com/

Please visit their website to view the complete set of their emojis and review their licensing terms.
'''
'''--- Examples/nearUnityClient.Android/Near Unity Client/Assets/TextMesh Pro/Sprites/EmojiOne.json ---
{"frames": [

{
	"filename": "1f60a.png",
	"frame": {"x":0,"y":0,"w":128,"h":128},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":128,"h":128},
	"sourceSize": {"w":128,"h":128},
	"pivot": {"x":0.5,"y":0.5}
},
{
	"filename": "1f60b.png",
	"frame": {"x":128,"y":0,"w":128,"h":128},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":128,"h":128},
	"sourceSize": {"w":128,"h":128},
	"pivot": {"x":0.5,"y":0.5}
},
{
	"filename": "1f60d.png",
	"frame": {"x":256,"y":0,"w":128,"h":128},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":128,"h":128},
	"sourceSize": {"w":128,"h":128},
	"pivot": {"x":0.5,"y":0.5}
},
{
	"filename": "1f60e.png",
	"frame": {"x":384,"y":0,"w":128,"h":128},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":128,"h":128},
	"sourceSize": {"w":128,"h":128},
	"pivot": {"x":0.5,"y":0.5}
},
{
	"filename": "1f600.png",
	"frame": {"x":0,"y":128,"w":128,"h":128},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":128,"h":128},
	"sourceSize": {"w":128,"h":128},
	"pivot": {"x":0.5,"y":0.5}
},
{
	"filename": "1f601.png",
	"frame": {"x":128,"y":128,"w":128,"h":128},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":128,"h":128},
	"sourceSize": {"w":128,"h":128},
	"pivot": {"x":0.5,"y":0.5}
},
{
	"filename": "1f602.png",
	"frame": {"x":256,"y":128,"w":128,"h":128},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":128,"h":128},
	"sourceSize": {"w":128,"h":128},
	"pivot": {"x":0.5,"y":0.5}
},
{
	"filename": "1f603.png",
	"frame": {"x":384,"y":128,"w":128,"h":128},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":128,"h":128},
	"sourceSize": {"w":128,"h":128},
	"pivot": {"x":0.5,"y":0.5}
},
{
	"filename": "1f604.png",
	"frame": {"x":0,"y":256,"w":128,"h":128},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":128,"h":128},
	"sourceSize": {"w":128,"h":128},
	"pivot": {"x":0.5,"y":0.5}
},
{
	"filename": "1f605.png",
	"frame": {"x":128,"y":256,"w":128,"h":128},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":128,"h":128},
	"sourceSize": {"w":128,"h":128},
	"pivot": {"x":0.5,"y":0.5}
},
{
	"filename": "1f606.png",
	"frame": {"x":256,"y":256,"w":128,"h":128},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":128,"h":128},
	"sourceSize": {"w":128,"h":128},
	"pivot": {"x":0.5,"y":0.5}
},
{
	"filename": "1f609.png",
	"frame": {"x":384,"y":256,"w":128,"h":128},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":128,"h":128},
	"sourceSize": {"w":128,"h":128},
	"pivot": {"x":0.5,"y":0.5}
},
{
	"filename": "1f618.png",
	"frame": {"x":0,"y":384,"w":128,"h":128},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":128,"h":128},
	"sourceSize": {"w":128,"h":128},
	"pivot": {"x":0.5,"y":0.5}
},
{
	"filename": "1f923.png",
	"frame": {"x":128,"y":384,"w":128,"h":128},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":128,"h":128},
	"sourceSize": {"w":128,"h":128},
	"pivot": {"x":0.5,"y":0.5}
},
{
	"filename": "263a.png",
	"frame": {"x":256,"y":384,"w":128,"h":128},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":128,"h":128},
	"sourceSize": {"w":128,"h":128},
	"pivot": {"x":0.5,"y":0.5}
},
{
	"filename": "2639.png",
	"frame": {"x":384,"y":384,"w":128,"h":128},
	"rotated": false,
	"trimmed": false,
	"spriteSourceSize": {"x":0,"y":0,"w":128,"h":128},
	"sourceSize": {"w":128,"h":128},
	"pivot": {"x":0.5,"y":0.5}
}],
"meta": {
	"app": "http://www.codeandweb.com/texturepacker",
	"version": "1.0",
	"image": "EmojiOne.png",
	"format": "RGBA8888",
	"size": {"w":512,"h":512},
	"scale": "1",
	"smartupdate": "$TexturePacker:SmartUpdate:196a26a2e149d875b91ffc8fa3581e76:fc928c7e275404b7e0649307410475cb:424723c3774975ddb2053fd5c4b85f6e$"
}
}

'''
'''--- Examples/nearUnityClient.Android/Near Unity Client/Assets/WebGLTemplates/MFG/TemplateData/style.css ---
html {
    box-sizing: border-box;
}

*, *:before, *:after {
    box-sizing: inherit;
}

html, body {
    height: 100%;
}

canvas {
    display: block;
}

body {
    margin: 0;
}

#unity-container {
    width: 100%;
    height: 100%;
}

#unity-canvas {
    width: 100%;
    height: 100%;
    background: #181818
}

.loading-text {
    font-family: Arial;
    color: white;
}

.loading-heading {
    font-family: Arial;
    font-weight:600;
    font-size: 60px;
    color: lawngreen;
}

#loading-cover {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
}

#unity-loading-bar {
    flex: 1 1 auto;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    background-color: grey;
    height: 40%;
}

#unity-logo {
    text-align: center;
}

#unity-logo img {
    max-width: 80%;
}

#unity-progress-bar-empty {
    width: 60%;
    height: 26px;
    margin: 10px 20px 20px 10px;
    text-align: left;
    border: 2px solid black;
    padding: 4px;
}

#unity-progress-bar-full {
    width: 0%;
    height: 100%;
    background-color: lawngreen;
}

.light #unity-progress-bar-empty {
    border-color: lawngreen;
}

.light #unity-progress-bar-full {
    background-color: red;
}

#unity-fullscreen-button {
    position: absolute;
    right: 10px;
    bottom: 10px;
    width: 38px;
    height: 38px;
    background: url('fullscreen-button.png') no-repeat center;
    background-size: contain;
}

.spinner,
.spinner:after {
  border-radius: 50%;
  width: 5em;
  height: 5em;
}

.spinner {
  margin: 10px;
  font-size: 10px;
  position: relative;
  text-indent: -9999em;
  border-top: 1.1em solid rgba(255, 255, 255, 0.2);
  border-right: 1.1em solid rgba(255, 255, 255, 0.2);
  border-bottom: 1.1em solid rgba(255, 255, 255, 0.2);
  border-left: 1.1em solid #ffffff;
  transform: translateZ(0);
  animation: spinner-spin 1.1s infinite linear;
}
@keyframes spinner-spin {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

'''
'''--- Examples/nearUnityClient.Android/Near Unity Client/Assets/WebGLTemplates/MFG/index.html ---
<!DOCTYPE html>
<html lang="en-us">
<head>
    <meta charset="utf-8">
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <title>{{{ PRODUCT_NAME }}}</title>
    <link rel="shortcut icon" href="TemplateData/favicon.ico">
    <link rel="stylesheet" href="TemplateData/style.css">
    <script src="https://cdn.jsdelivr.net/npm/near-api-js@1.1.0/dist/near-api-js.js"></script> 

    <script type="text/javascript">
      import * as nearApi from "./near-api-js.min.js";

    
    </script>  
</head>

<body class="{{{ SPLASH_SCREEN_STYLE.toLowerCase() }}}">
    <div id="unity-container" class="unity-desktop">
            <canvas id="unity-canvas"></canvas>
        </div>
        <div id="loading-cover" style="display:none;">
            <div id="unity-loading-bar">
                <div align="center" class="loading-heading" ;">ITERIUM</div>
                <div align="center"><h2 class="loading-text" ;"><<< LOADING >>></h2></div>
                <div align="center"><h3 class="loading-text" ;">RECEIVING AN UPDATE ERROR:   PRESS CONTROL + F5   OR   COMMAND + SHIFT + R on MAC</></h3></div>
                <div id="unity-progress-bar-empty" style="display: none;">
                    <div id="unity-progress-bar-full"></div>
                </div>
                <div class="spinner"></div>
            </div>
        </div>
        <div id="unity-fullscreen-button" style="display: none;"></div>

        <script>
          const hideFullScreenButton = "{{{ HIDE_FULL_SCREEN_BUTTON }}}";
          const buildUrl = "Build";
          const loaderUrl = buildUrl + "/{{{ LOADER_FILENAME }}}";
          const config = {
            dataUrl: buildUrl + "/{{{ DATA_FILENAME }}}",
            frameworkUrl: buildUrl + "/{{{ FRAMEWORK_FILENAME }}}",
            codeUrl: buildUrl + "/{{{ CODE_FILENAME }}}",
    #if MEMORY_FILENAME
            memoryUrl: buildUrl + "/{{{ MEMORY_FILENAME }}}",
    #endif
    #if SYMBOLS_FILENAME
            symbolsUrl: buildUrl + "/{{{ SYMBOLS_FILENAME }}}",
    #endif
            streamingAssetsUrl: "StreamingAssets",
            companyName: "{{{ COMPANY_NAME }}}",
            productName: "{{{ PRODUCT_NAME }}}",
            productVersion: "{{{ PRODUCT_VERSION }}}",
          };

          const container = document.querySelector("#unity-container");
          const canvas = document.querySelector("#unity-canvas");
          const loadingCover = document.querySelector("#loading-cover");
          const progressBarEmpty = document.querySelector("#unity-progress-bar-empty");
          const progressBarFull = document.querySelector("#unity-progress-bar-full");
          const fullscreenButton = document.querySelector("#unity-fullscreen-button");
          const spinner = document.querySelector('.spinner');

          const canFullscreen = (function() {
            for (const key of [
                'exitFullscreen',
                'webkitExitFullscreen',
                'webkitCancelFullScreen',
                'mozCancelFullScreen',
                'msExitFullscreen',
              ]) {
              if (key in document) {
                return true;
              }
            }
            return false;
          }());

          if (/iPhone|iPad|iPod|Android/i.test(navigator.userAgent)) {
            container.className = "unity-mobile";
            config.devicePixelRatio = 1;
          }
          loadingCover.style.display = "";

          const script = document.createElement("script");
          script.src = loaderUrl;
          script.onload = () => {
            createUnityInstance(canvas, config, (progress) => {
              spinner.style.display = "none";
              progressBarEmpty.style.display = "";
              progressBarFull.style.width = `${100 * progress}%`;
            }).then((unityInstance) => {

                window.mfgInstance = unityInstance;

              loadingCover.style.display = "none";
              if (canFullscreen) {
                if (!hideFullScreenButton) {
                  fullscreenButton.style.display = "";
                }
                fullscreenButton.onclick = () => {
                  unityInstance.SetFullscreen(1);
                };
              }
            }).catch((message) => {
              alert(message);
            });
          };
          document.body.appendChild(script);
        </script>
   
</body>
</html>

'''
'''--- Examples/nearUnityClient.Android/Near Unity Client/Assets/WebGLTemplates/MFG/near-api-js.min.js ---
(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
    'use strict'
    // base-x encoding / decoding
    // Copyright (c) 2018 base-x contributors
    // Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)
    // Distributed under the MIT software license, see the accompanying
    // file LICENSE or http://www.opensource.org/licenses/mit-license.php.
    // @ts-ignore
    var _Buffer = require('safe-buffer').Buffer
    function base (ALPHABET) {
      if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }
      var BASE_MAP = new Uint8Array(256)
      for (var j = 0; j < BASE_MAP.length; j++) {
        BASE_MAP[j] = 255
      }
      for (var i = 0; i < ALPHABET.length; i++) {
        var x = ALPHABET.charAt(i)
        var xc = x.charCodeAt(0)
        if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }
        BASE_MAP[xc] = i
      }
      var BASE = ALPHABET.length
      var LEADER = ALPHABET.charAt(0)
      var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up
      var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up
      function encode (source) {
        if (Array.isArray(source) || source instanceof Uint8Array) { source = _Buffer.from(source) }
        if (!_Buffer.isBuffer(source)) { throw new TypeError('Expected Buffer') }
        if (source.length === 0) { return '' }
            // Skip & count leading zeroes.
        var zeroes = 0
        var length = 0
        var pbegin = 0
        var pend = source.length
        while (pbegin !== pend && source[pbegin] === 0) {
          pbegin++
          zeroes++
        }
            // Allocate enough space in big-endian base58 representation.
        var size = ((pend - pbegin) * iFACTOR + 1) >>> 0
        var b58 = new Uint8Array(size)
            // Process the bytes.
        while (pbegin !== pend) {
          var carry = source[pbegin]
                // Apply "b58 = b58 * 256 + ch".
          var i = 0
          for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {
            carry += (256 * b58[it1]) >>> 0
            b58[it1] = (carry % BASE) >>> 0
            carry = (carry / BASE) >>> 0
          }
          if (carry !== 0) { throw new Error('Non-zero carry') }
          length = i
          pbegin++
        }
            // Skip leading zeroes in base58 result.
        var it2 = size - length
        while (it2 !== size && b58[it2] === 0) {
          it2++
        }
            // Translate the result into a string.
        var str = LEADER.repeat(zeroes)
        for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }
        return str
      }
      function decodeUnsafe (source) {
        if (typeof source !== 'string') { throw new TypeError('Expected String') }
        if (source.length === 0) { return _Buffer.alloc(0) }
        var psz = 0
            // Skip and count leading '1's.
        var zeroes = 0
        var length = 0
        while (source[psz] === LEADER) {
          zeroes++
          psz++
        }
            // Allocate enough space in big-endian base256 representation.
        var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.
        var b256 = new Uint8Array(size)
            // Process the characters.
        while (source[psz]) {
                // Decode character
          var carry = BASE_MAP[source.charCodeAt(psz)]
                // Invalid character
          if (carry === 255) { return }
          var i = 0
          for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {
            carry += (BASE * b256[it3]) >>> 0
            b256[it3] = (carry % 256) >>> 0
            carry = (carry / 256) >>> 0
          }
          if (carry !== 0) { throw new Error('Non-zero carry') }
          length = i
          psz++
        }
            // Skip leading zeroes in b256.
        var it4 = size - length
        while (it4 !== size && b256[it4] === 0) {
          it4++
        }
        var vch = _Buffer.allocUnsafe(zeroes + (size - it4))
        vch.fill(0x00, 0, zeroes)
        var j = zeroes
        while (it4 !== size) {
          vch[j++] = b256[it4++]
        }
        return vch
      }
      function decode (string) {
        var buffer = decodeUnsafe(string)
        if (buffer) { return buffer }
        throw new Error('Non-base' + BASE + ' character')
      }
      return {
        encode: encode,
        decodeUnsafe: decodeUnsafe,
        decode: decode
      }
    }
    module.exports = base
    
    },{"safe-buffer":34}],2:[function(require,module,exports){
    'use strict'
    
    exports.byteLength = byteLength
    exports.toByteArray = toByteArray
    exports.fromByteArray = fromByteArray
    
    var lookup = []
    var revLookup = []
    var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array
    
    var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
    for (var i = 0, len = code.length; i < len; ++i) {
      lookup[i] = code[i]
      revLookup[code.charCodeAt(i)] = i
    }
    
    // Support decoding URL-safe base64 strings, as Node.js does.
    // See: https://en.wikipedia.org/wiki/Base64#URL_applications
    revLookup['-'.charCodeAt(0)] = 62
    revLookup['_'.charCodeAt(0)] = 63
    
    function getLens (b64) {
      var len = b64.length
    
      if (len % 4 > 0) {
        throw new Error('Invalid string. Length must be a multiple of 4')
      }
    
      // Trim off extra bytes after placeholder bytes are found
      // See: https://github.com/beatgammit/base64-js/issues/42
      var validLen = b64.indexOf('=')
      if (validLen === -1) validLen = len
    
      var placeHoldersLen = validLen === len
        ? 0
        : 4 - (validLen % 4)
    
      return [validLen, placeHoldersLen]
    }
    
    // base64 is 4/3 + up to two characters of the original data
    function byteLength (b64) {
      var lens = getLens(b64)
      var validLen = lens[0]
      var placeHoldersLen = lens[1]
      return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
    }
    
    function _byteLength (b64, validLen, placeHoldersLen) {
      return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
    }
    
    function toByteArray (b64) {
      var tmp
      var lens = getLens(b64)
      var validLen = lens[0]
      var placeHoldersLen = lens[1]
    
      var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))
    
      var curByte = 0
    
      // if there are placeholders, only get up to the last complete 4 chars
      var len = placeHoldersLen > 0
        ? validLen - 4
        : validLen
    
      var i
      for (i = 0; i < len; i += 4) {
        tmp =
          (revLookup[b64.charCodeAt(i)] << 18) |
          (revLookup[b64.charCodeAt(i + 1)] << 12) |
          (revLookup[b64.charCodeAt(i + 2)] << 6) |
          revLookup[b64.charCodeAt(i + 3)]
        arr[curByte++] = (tmp >> 16) & 0xFF
        arr[curByte++] = (tmp >> 8) & 0xFF
        arr[curByte++] = tmp & 0xFF
      }
    
      if (placeHoldersLen === 2) {
        tmp =
          (revLookup[b64.charCodeAt(i)] << 2) |
          (revLookup[b64.charCodeAt(i + 1)] >> 4)
        arr[curByte++] = tmp & 0xFF
      }
    
      if (placeHoldersLen === 1) {
        tmp =
          (revLookup[b64.charCodeAt(i)] << 10) |
          (revLookup[b64.charCodeAt(i + 1)] << 4) |
          (revLookup[b64.charCodeAt(i + 2)] >> 2)
        arr[curByte++] = (tmp >> 8) & 0xFF
        arr[curByte++] = tmp & 0xFF
      }
    
      return arr
    }
    
    function tripletToBase64 (num) {
      return lookup[num >> 18 & 0x3F] +
        lookup[num >> 12 & 0x3F] +
        lookup[num >> 6 & 0x3F] +
        lookup[num & 0x3F]
    }
    
    function encodeChunk (uint8, start, end) {
      var tmp
      var output = []
      for (var i = start; i < end; i += 3) {
        tmp =
          ((uint8[i] << 16) & 0xFF0000) +
          ((uint8[i + 1] << 8) & 0xFF00) +
          (uint8[i + 2] & 0xFF)
        output.push(tripletToBase64(tmp))
      }
      return output.join('')
    }
    
    function fromByteArray (uint8) {
      var tmp
      var len = uint8.length
      var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
      var parts = []
      var maxChunkLength = 16383 // must be multiple of 3
    
      // go through the array every three bytes, we'll deal with trailing stuff later
      for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
        parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
      }
    
      // pad the end with zeros, but make sure to not forget the extra bytes
      if (extraBytes === 1) {
        tmp = uint8[len - 1]
        parts.push(
          lookup[tmp >> 2] +
          lookup[(tmp << 4) & 0x3F] +
          '=='
        )
      } else if (extraBytes === 2) {
        tmp = (uint8[len - 2] << 8) + uint8[len - 1]
        parts.push(
          lookup[tmp >> 10] +
          lookup[(tmp >> 4) & 0x3F] +
          lookup[(tmp << 2) & 0x3F] +
          '='
        )
      }
    
      return parts.join('')
    }
    
    },{}],3:[function(require,module,exports){
    (function (module, exports) {
      'use strict';
    
      // Utils
      function assert (val, msg) {
        if (!val) throw new Error(msg || 'Assertion failed');
      }
    
      // Could use `inherits` module, but don't want to move from single file
      // architecture yet.
      function inherits (ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function () {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
    
      // BN
    
      function BN (number, base, endian) {
        if (BN.isBN(number)) {
          return number;
        }
    
        this.negative = 0;
        this.words = null;
        this.length = 0;
    
        // Reduction context
        this.red = null;
    
        if (number !== null) {
          if (base === 'le' || base === 'be') {
            endian = base;
            base = 10;
          }
    
          this._init(number || 0, base || 10, endian || 'be');
        }
      }
      if (typeof module === 'object') {
        module.exports = BN;
      } else {
        exports.BN = BN;
      }
    
      BN.BN = BN;
      BN.wordSize = 26;
    
      var Buffer;
      try {
        if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
          Buffer = window.Buffer;
        } else {
          Buffer = require('buffer').Buffer;
        }
      } catch (e) {
      }
    
      BN.isBN = function isBN (num) {
        if (num instanceof BN) {
          return true;
        }
    
        return num !== null && typeof num === 'object' &&
          num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
      };
    
      BN.max = function max (left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
      };
    
      BN.min = function min (left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
      };
    
      BN.prototype._init = function init (number, base, endian) {
        if (typeof number === 'number') {
          return this._initNumber(number, base, endian);
        }
    
        if (typeof number === 'object') {
          return this._initArray(number, base, endian);
        }
    
        if (base === 'hex') {
          base = 16;
        }
        assert(base === (base | 0) && base >= 2 && base <= 36);
    
        number = number.toString().replace(/\s+/g, '');
        var start = 0;
        if (number[0] === '-') {
          start++;
          this.negative = 1;
        }
    
        if (start < number.length) {
          if (base === 16) {
            this._parseHex(number, start, endian);
          } else {
            this._parseBase(number, base, start);
            if (endian === 'le') {
              this._initArray(this.toArray(), base, endian);
            }
          }
        }
      };
    
      BN.prototype._initNumber = function _initNumber (number, base, endian) {
        if (number < 0) {
          this.negative = 1;
          number = -number;
        }
        if (number < 0x4000000) {
          this.words = [number & 0x3ffffff];
          this.length = 1;
        } else if (number < 0x10000000000000) {
          this.words = [
            number & 0x3ffffff,
            (number / 0x4000000) & 0x3ffffff
          ];
          this.length = 2;
        } else {
          assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
          this.words = [
            number & 0x3ffffff,
            (number / 0x4000000) & 0x3ffffff,
            1
          ];
          this.length = 3;
        }
    
        if (endian !== 'le') return;
    
        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
      };
    
      BN.prototype._initArray = function _initArray (number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === 'number');
        if (number.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }
    
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
    
        var j, w;
        var off = 0;
        if (endian === 'be') {
          for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
            w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
            this.words[j] |= (w << off) & 0x3ffffff;
            this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        } else if (endian === 'le') {
          for (i = 0, j = 0; i < number.length; i += 3) {
            w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
            this.words[j] |= (w << off) & 0x3ffffff;
            this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        }
        return this._strip();
      };
    
      function parseHex4Bits (string, index) {
        var c = string.charCodeAt(index);
        // '0' - '9'
        if (c >= 48 && c <= 57) {
          return c - 48;
        // 'A' - 'F'
        } else if (c >= 65 && c <= 70) {
          return c - 55;
        // 'a' - 'f'
        } else if (c >= 97 && c <= 102) {
          return c - 87;
        } else {
          assert(false, 'Invalid character in ' + string);
        }
      }
    
      function parseHexByte (string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) {
          r |= parseHex4Bits(string, index - 1) << 4;
        }
        return r;
      }
    
      BN.prototype._parseHex = function _parseHex (number, start, endian) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
    
        // 24-bits chunks
        var off = 0;
        var j = 0;
    
        var w;
        if (endian === 'be') {
          for (i = number.length - 1; i >= start; i -= 2) {
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 0x3ffffff;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        } else {
          var parseLength = number.length - start;
          for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 0x3ffffff;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        }
    
        this._strip();
      };
    
      function parseBase (str, start, end, mul) {
        var r = 0;
        var b = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;
    
          r *= mul;
    
          // 'a'
          if (c >= 49) {
            b = c - 49 + 0xa;
    
          // 'A'
          } else if (c >= 17) {
            b = c - 17 + 0xa;
    
          // '0' - '9'
          } else {
            b = c;
          }
          assert(c >= 0 && b < mul, 'Invalid character');
          r += b;
        }
        return r;
      }
    
      BN.prototype._parseBase = function _parseBase (number, base, start) {
        // Initialize as zero
        this.words = [0];
        this.length = 1;
    
        // Find length of limb in base
        for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
          limbLen++;
        }
        limbLen--;
        limbPow = (limbPow / base) | 0;
    
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
    
        var word = 0;
        for (var i = start; i < end; i += limbLen) {
          word = parseBase(number, i, i + limbLen, base);
    
          this.imuln(limbPow);
          if (this.words[0] + word < 0x4000000) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
    
        if (mod !== 0) {
          var pow = 1;
          word = parseBase(number, i, number.length, base);
    
          for (i = 0; i < mod; i++) {
            pow *= base;
          }
    
          this.imuln(pow);
          if (this.words[0] + word < 0x4000000) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
    
        this._strip();
      };
    
      BN.prototype.copy = function copy (dest) {
        dest.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          dest.words[i] = this.words[i];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };
    
      function move (dest, src) {
        dest.words = src.words;
        dest.length = src.length;
        dest.negative = src.negative;
        dest.red = src.red;
      }
    
      BN.prototype._move = function _move (dest) {
        move(dest, this);
      };
    
      BN.prototype.clone = function clone () {
        var r = new BN(null);
        this.copy(r);
        return r;
      };
    
      BN.prototype._expand = function _expand (size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }
        return this;
      };
    
      // Remove leading `0` from `this`
      BN.prototype._strip = function strip () {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };
    
      BN.prototype._normSign = function _normSign () {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };
    
      // Check Symbol.for because not everywhere where Symbol defined
      // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility
      if (typeof Symbol !== 'undefined' && typeof Symbol.for === 'function') {
        try {
          BN.prototype[Symbol.for('nodejs.util.inspect.custom')] = inspect;
        } catch (e) {
          BN.prototype.inspect = inspect;
        }
      } else {
        BN.prototype.inspect = inspect;
      }
    
      function inspect () {
        return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
      }
    
      /*
    
      var zeros = [];
      var groupSizes = [];
      var groupBases = [];
    
      var s = '';
      var i = -1;
      while (++i < BN.wordSize) {
        zeros[i] = s;
        s += '0';
      }
      groupSizes[0] = 0;
      groupSizes[1] = 0;
      groupBases[0] = 0;
      groupBases[1] = 0;
      var base = 2 - 1;
      while (++base < 36 + 1) {
        var groupSize = 0;
        var groupBase = 1;
        while (groupBase < (1 << BN.wordSize) / base) {
          groupBase *= base;
          groupSize += 1;
        }
        groupSizes[base] = groupSize;
        groupBases[base] = groupBase;
      }
    
      */
    
      var zeros = [
        '',
        '0',
        '00',
        '000',
        '0000',
        '00000',
        '000000',
        '0000000',
        '00000000',
        '000000000',
        '0000000000',
        '00000000000',
        '000000000000',
        '0000000000000',
        '00000000000000',
        '000000000000000',
        '0000000000000000',
        '00000000000000000',
        '000000000000000000',
        '0000000000000000000',
        '00000000000000000000',
        '000000000000000000000',
        '0000000000000000000000',
        '00000000000000000000000',
        '000000000000000000000000',
        '0000000000000000000000000'
      ];
    
      var groupSizes = [
        0, 0,
        25, 16, 12, 11, 10, 9, 8,
        8, 7, 7, 7, 7, 6, 6,
        6, 6, 6, 6, 6, 5, 5,
        5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5
      ];
    
      var groupBases = [
        0, 0,
        33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
        43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
        16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
        6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
        24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
      ];
    
      BN.prototype.toString = function toString (base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
    
        var out;
        if (base === 16 || base === 'hex') {
          out = '';
          var off = 0;
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w = this.words[i];
            var word = (((w << off) | carry) & 0xffffff).toString(16);
            carry = (w >>> (24 - off)) & 0xffffff;
            off += 2;
            if (off >= 26) {
              off -= 26;
              i--;
            }
            if (carry !== 0 || i !== this.length - 1) {
              out = zeros[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding !== 0) {
            out = '0' + out;
          }
          if (this.negative !== 0) {
            out = '-' + out;
          }
          return out;
        }
    
        if (base === (base | 0) && base >= 2 && base <= 36) {
          // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
          var groupSize = groupSizes[base];
          // var groupBase = Math.pow(base, groupSize);
          var groupBase = groupBases[base];
          out = '';
          var c = this.clone();
          c.negative = 0;
          while (!c.isZero()) {
            var r = c.modrn(groupBase).toString(base);
            c = c.idivn(groupBase);
    
            if (!c.isZero()) {
              out = zeros[groupSize - r.length] + r + out;
            } else {
              out = r + out;
            }
          }
          if (this.isZero()) {
            out = '0' + out;
          }
          while (out.length % padding !== 0) {
            out = '0' + out;
          }
          if (this.negative !== 0) {
            out = '-' + out;
          }
          return out;
        }
    
        assert(false, 'Base should be between 2 and 36');
      };
    
      BN.prototype.toNumber = function toNumber () {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 0x4000000;
        } else if (this.length === 3 && this.words[2] === 0x01) {
          // NOTE: at this stage it is known that the top bit is set
          ret += 0x10000000000000 + (this.words[1] * 0x4000000);
        } else if (this.length > 2) {
          assert(false, 'Number can only safely store up to 53 bits');
        }
        return (this.negative !== 0) ? -ret : ret;
      };
    
      BN.prototype.toJSON = function toJSON () {
        return this.toString(16, 2);
      };
    
      if (Buffer) {
        BN.prototype.toBuffer = function toBuffer (endian, length) {
          return this.toArrayLike(Buffer, endian, length);
        };
      }
    
      BN.prototype.toArray = function toArray (endian, length) {
        return this.toArrayLike(Array, endian, length);
      };
    
      var allocate = function allocate (ArrayType, size) {
        if (ArrayType.allocUnsafe) {
          return ArrayType.allocUnsafe(size);
        }
        return new ArrayType(size);
      };
    
      BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
        this._strip();
    
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, 'byte array longer than desired length');
        assert(reqLength > 0, 'Requested array length <= 0');
    
        var res = allocate(ArrayType, reqLength);
        var postfix = endian === 'le' ? 'LE' : 'BE';
        this['_toArrayLike' + postfix](res, byteLength);
        return res;
      };
    
      BN.prototype._toArrayLikeLE = function _toArrayLikeLE (res, byteLength) {
        var position = 0;
        var carry = 0;
    
        for (var i = 0, shift = 0; i < this.length; i++) {
          var word = (this.words[i] << shift) | carry;
    
          res[position++] = word & 0xff;
          if (position < res.length) {
            res[position++] = (word >> 8) & 0xff;
          }
          if (position < res.length) {
            res[position++] = (word >> 16) & 0xff;
          }
    
          if (shift === 6) {
            if (position < res.length) {
              res[position++] = (word >> 24) & 0xff;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }
    
        if (position < res.length) {
          res[position++] = carry;
    
          while (position < res.length) {
            res[position++] = 0;
          }
        }
      };
    
      BN.prototype._toArrayLikeBE = function _toArrayLikeBE (res, byteLength) {
        var position = res.length - 1;
        var carry = 0;
    
        for (var i = 0, shift = 0; i < this.length; i++) {
          var word = (this.words[i] << shift) | carry;
    
          res[position--] = word & 0xff;
          if (position >= 0) {
            res[position--] = (word >> 8) & 0xff;
          }
          if (position >= 0) {
            res[position--] = (word >> 16) & 0xff;
          }
    
          if (shift === 6) {
            if (position >= 0) {
              res[position--] = (word >> 24) & 0xff;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }
    
        if (position >= 0) {
          res[position--] = carry;
    
          while (position >= 0) {
            res[position--] = 0;
          }
        }
      };
    
      if (Math.clz32) {
        BN.prototype._countBits = function _countBits (w) {
          return 32 - Math.clz32(w);
        };
      } else {
        BN.prototype._countBits = function _countBits (w) {
          var t = w;
          var r = 0;
          if (t >= 0x1000) {
            r += 13;
            t >>>= 13;
          }
          if (t >= 0x40) {
            r += 7;
            t >>>= 7;
          }
          if (t >= 0x8) {
            r += 4;
            t >>>= 4;
          }
          if (t >= 0x02) {
            r += 2;
            t >>>= 2;
          }
          return r + t;
        };
      }
    
      BN.prototype._zeroBits = function _zeroBits (w) {
        // Short-cut
        if (w === 0) return 26;
    
        var t = w;
        var r = 0;
        if ((t & 0x1fff) === 0) {
          r += 13;
          t >>>= 13;
        }
        if ((t & 0x7f) === 0) {
          r += 7;
          t >>>= 7;
        }
        if ((t & 0xf) === 0) {
          r += 4;
          t >>>= 4;
        }
        if ((t & 0x3) === 0) {
          r += 2;
          t >>>= 2;
        }
        if ((t & 0x1) === 0) {
          r++;
        }
        return r;
      };
    
      // Return number of used bits in a BN
      BN.prototype.bitLength = function bitLength () {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
      };
    
      function toBitArray (num) {
        var w = new Array(num.bitLength());
    
        for (var bit = 0; bit < w.length; bit++) {
          var off = (bit / 26) | 0;
          var wbit = bit % 26;
    
          w[bit] = (num.words[off] >>> wbit) & 0x01;
        }
    
        return w;
      }
    
      // Number of trailing zero bits
      BN.prototype.zeroBits = function zeroBits () {
        if (this.isZero()) return 0;
    
        var r = 0;
        for (var i = 0; i < this.length; i++) {
          var b = this._zeroBits(this.words[i]);
          r += b;
          if (b !== 26) break;
        }
        return r;
      };
    
      BN.prototype.byteLength = function byteLength () {
        return Math.ceil(this.bitLength() / 8);
      };
    
      BN.prototype.toTwos = function toTwos (width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };
    
      BN.prototype.fromTwos = function fromTwos (width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };
    
      BN.prototype.isNeg = function isNeg () {
        return this.negative !== 0;
      };
    
      // Return negative clone of `this`
      BN.prototype.neg = function neg () {
        return this.clone().ineg();
      };
    
      BN.prototype.ineg = function ineg () {
        if (!this.isZero()) {
          this.negative ^= 1;
        }
    
        return this;
      };
    
      // Or `num` with `this` in-place
      BN.prototype.iuor = function iuor (num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }
    
        for (var i = 0; i < num.length; i++) {
          this.words[i] = this.words[i] | num.words[i];
        }
    
        return this._strip();
      };
    
      BN.prototype.ior = function ior (num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
      };
    
      // Or `num` with `this`
      BN.prototype.or = function or (num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
      };
    
      BN.prototype.uor = function uor (num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
      };
    
      // And `num` with `this` in-place
      BN.prototype.iuand = function iuand (num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) {
          b = num;
        } else {
          b = this;
        }
    
        for (var i = 0; i < b.length; i++) {
          this.words[i] = this.words[i] & num.words[i];
        }
    
        this.length = b.length;
    
        return this._strip();
      };
    
      BN.prototype.iand = function iand (num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
      };
    
      // And `num` with `this`
      BN.prototype.and = function and (num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
      };
    
      BN.prototype.uand = function uand (num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
      };
    
      // Xor `num` with `this` in-place
      BN.prototype.iuxor = function iuxor (num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
    
        for (var i = 0; i < b.length; i++) {
          this.words[i] = a.words[i] ^ b.words[i];
        }
    
        if (this !== a) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
    
        this.length = a.length;
    
        return this._strip();
      };
    
      BN.prototype.ixor = function ixor (num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };
    
      // Xor `num` with `this`
      BN.prototype.xor = function xor (num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
      };
    
      BN.prototype.uxor = function uxor (num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };
    
      // Not ``this`` with ``width`` bitwidth
      BN.prototype.inotn = function inotn (width) {
        assert(typeof width === 'number' && width >= 0);
    
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
    
        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);
    
        if (bitsLeft > 0) {
          bytesNeeded--;
        }
    
        // Handle complete words
        for (var i = 0; i < bytesNeeded; i++) {
          this.words[i] = ~this.words[i] & 0x3ffffff;
        }
    
        // Handle the residue
        if (bitsLeft > 0) {
          this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
        }
    
        // And remove leading zeroes
        return this._strip();
      };
    
      BN.prototype.notn = function notn (width) {
        return this.clone().inotn(width);
      };
    
      // Set `bit` of `this`
      BN.prototype.setn = function setn (bit, val) {
        assert(typeof bit === 'number' && bit >= 0);
    
        var off = (bit / 26) | 0;
        var wbit = bit % 26;
    
        this._expand(off + 1);
    
        if (val) {
          this.words[off] = this.words[off] | (1 << wbit);
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }
    
        return this._strip();
      };
    
      // Add `num` to `this` in-place
      BN.prototype.iadd = function iadd (num) {
        var r;
    
        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r = this.isub(num);
          this.negative ^= 1;
          return this._normSign();
    
        // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r = this.isub(num);
          num.negative = 1;
          return r._normSign();
        }
    
        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
    
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
          this.words[i] = r & 0x3ffffff;
          carry = r >>> 26;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          this.words[i] = r & 0x3ffffff;
          carry = r >>> 26;
        }
    
        this.length = a.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        // Copy the rest of the words
        } else if (a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
    
        return this;
      };
    
      // Add `num` to `this`
      BN.prototype.add = function add (num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }
    
        if (this.length > num.length) return this.clone().iadd(num);
    
        return num.clone().iadd(this);
      };
    
      // Subtract `num` from `this` in-place
      BN.prototype.isub = function isub (num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
          num.negative = 0;
          var r = this.iadd(num);
          num.negative = 1;
          return r._normSign();
    
        // -this - num = -(this + num)
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }
    
        // At this point both numbers are positive
        var cmp = this.cmp(num);
    
        // Optimization - zeroify
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }
    
        // a > b
        var a, b;
        if (cmp > 0) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
    
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 0x3ffffff;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 0x3ffffff;
        }
    
        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
    
        this.length = Math.max(this.length, i);
    
        if (a !== this) {
          this.negative = 1;
        }
    
        return this._strip();
      };
    
      // Subtract `num` from `this`
      BN.prototype.sub = function sub (num) {
        return this.clone().isub(num);
      };
    
      function smallMulTo (self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = (self.length + num.length) | 0;
        out.length = len;
        len = (len - 1) | 0;
    
        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
    
        var lo = r & 0x3ffffff;
        var carry = (r / 0x4000000) | 0;
        out.words[0] = lo;
    
        for (var k = 1; k < len; k++) {
          // Sum all words with the same `i + j = k` and accumulate `ncarry`,
          // note that ncarry could be >= 0x3ffffff
          var ncarry = carry >>> 26;
          var rword = carry & 0x3ffffff;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
            var i = (k - j) | 0;
            a = self.words[i] | 0;
            b = num.words[j] | 0;
            r = a * b + rword;
            ncarry += (r / 0x4000000) | 0;
            rword = r & 0x3ffffff;
          }
          out.words[k] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k] = carry | 0;
        } else {
          out.length--;
        }
    
        return out._strip();
      }
    
      // TODO(indutny): it may be reasonable to omit it for users who don't need
      // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
      // multiplication (like elliptic secp256k1).
      var comb10MulTo = function comb10MulTo (self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 0x1fff;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 0x1fff;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 0x1fff;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 0x1fff;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 0x1fff;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 0x1fff;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 0x1fff;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 0x1fff;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 0x1fff;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 0x1fff;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 0x1fff;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 0x1fff;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 0x1fff;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 0x1fff;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 0x1fff;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 0x1fff;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 0x1fff;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 0x1fff;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 0x1fff;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 0x1fff;
        var bh9 = b9 >>> 13;
    
        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = (mid + Math.imul(ah0, bl0)) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
        w0 &= 0x3ffffff;
        /* k = 1 */
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = (mid + Math.imul(ah1, bl0)) | 0;
        hi = Math.imul(ah1, bh0);
        lo = (lo + Math.imul(al0, bl1)) | 0;
        mid = (mid + Math.imul(al0, bh1)) | 0;
        mid = (mid + Math.imul(ah0, bl1)) | 0;
        hi = (hi + Math.imul(ah0, bh1)) | 0;
        var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
        w1 &= 0x3ffffff;
        /* k = 2 */
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = (mid + Math.imul(ah2, bl0)) | 0;
        hi = Math.imul(ah2, bh0);
        lo = (lo + Math.imul(al1, bl1)) | 0;
        mid = (mid + Math.imul(al1, bh1)) | 0;
        mid = (mid + Math.imul(ah1, bl1)) | 0;
        hi = (hi + Math.imul(ah1, bh1)) | 0;
        lo = (lo + Math.imul(al0, bl2)) | 0;
        mid = (mid + Math.imul(al0, bh2)) | 0;
        mid = (mid + Math.imul(ah0, bl2)) | 0;
        hi = (hi + Math.imul(ah0, bh2)) | 0;
        var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
        w2 &= 0x3ffffff;
        /* k = 3 */
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = (mid + Math.imul(ah3, bl0)) | 0;
        hi = Math.imul(ah3, bh0);
        lo = (lo + Math.imul(al2, bl1)) | 0;
        mid = (mid + Math.imul(al2, bh1)) | 0;
        mid = (mid + Math.imul(ah2, bl1)) | 0;
        hi = (hi + Math.imul(ah2, bh1)) | 0;
        lo = (lo + Math.imul(al1, bl2)) | 0;
        mid = (mid + Math.imul(al1, bh2)) | 0;
        mid = (mid + Math.imul(ah1, bl2)) | 0;
        hi = (hi + Math.imul(ah1, bh2)) | 0;
        lo = (lo + Math.imul(al0, bl3)) | 0;
        mid = (mid + Math.imul(al0, bh3)) | 0;
        mid = (mid + Math.imul(ah0, bl3)) | 0;
        hi = (hi + Math.imul(ah0, bh3)) | 0;
        var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
        w3 &= 0x3ffffff;
        /* k = 4 */
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = (mid + Math.imul(ah4, bl0)) | 0;
        hi = Math.imul(ah4, bh0);
        lo = (lo + Math.imul(al3, bl1)) | 0;
        mid = (mid + Math.imul(al3, bh1)) | 0;
        mid = (mid + Math.imul(ah3, bl1)) | 0;
        hi = (hi + Math.imul(ah3, bh1)) | 0;
        lo = (lo + Math.imul(al2, bl2)) | 0;
        mid = (mid + Math.imul(al2, bh2)) | 0;
        mid = (mid + Math.imul(ah2, bl2)) | 0;
        hi = (hi + Math.imul(ah2, bh2)) | 0;
        lo = (lo + Math.imul(al1, bl3)) | 0;
        mid = (mid + Math.imul(al1, bh3)) | 0;
        mid = (mid + Math.imul(ah1, bl3)) | 0;
        hi = (hi + Math.imul(ah1, bh3)) | 0;
        lo = (lo + Math.imul(al0, bl4)) | 0;
        mid = (mid + Math.imul(al0, bh4)) | 0;
        mid = (mid + Math.imul(ah0, bl4)) | 0;
        hi = (hi + Math.imul(ah0, bh4)) | 0;
        var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
        w4 &= 0x3ffffff;
        /* k = 5 */
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = (mid + Math.imul(ah5, bl0)) | 0;
        hi = Math.imul(ah5, bh0);
        lo = (lo + Math.imul(al4, bl1)) | 0;
        mid = (mid + Math.imul(al4, bh1)) | 0;
        mid = (mid + Math.imul(ah4, bl1)) | 0;
        hi = (hi + Math.imul(ah4, bh1)) | 0;
        lo = (lo + Math.imul(al3, bl2)) | 0;
        mid = (mid + Math.imul(al3, bh2)) | 0;
        mid = (mid + Math.imul(ah3, bl2)) | 0;
        hi = (hi + Math.imul(ah3, bh2)) | 0;
        lo = (lo + Math.imul(al2, bl3)) | 0;
        mid = (mid + Math.imul(al2, bh3)) | 0;
        mid = (mid + Math.imul(ah2, bl3)) | 0;
        hi = (hi + Math.imul(ah2, bh3)) | 0;
        lo = (lo + Math.imul(al1, bl4)) | 0;
        mid = (mid + Math.imul(al1, bh4)) | 0;
        mid = (mid + Math.imul(ah1, bl4)) | 0;
        hi = (hi + Math.imul(ah1, bh4)) | 0;
        lo = (lo + Math.imul(al0, bl5)) | 0;
        mid = (mid + Math.imul(al0, bh5)) | 0;
        mid = (mid + Math.imul(ah0, bl5)) | 0;
        hi = (hi + Math.imul(ah0, bh5)) | 0;
        var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
        w5 &= 0x3ffffff;
        /* k = 6 */
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = (mid + Math.imul(ah6, bl0)) | 0;
        hi = Math.imul(ah6, bh0);
        lo = (lo + Math.imul(al5, bl1)) | 0;
        mid = (mid + Math.imul(al5, bh1)) | 0;
        mid = (mid + Math.imul(ah5, bl1)) | 0;
        hi = (hi + Math.imul(ah5, bh1)) | 0;
        lo = (lo + Math.imul(al4, bl2)) | 0;
        mid = (mid + Math.imul(al4, bh2)) | 0;
        mid = (mid + Math.imul(ah4, bl2)) | 0;
        hi = (hi + Math.imul(ah4, bh2)) | 0;
        lo = (lo + Math.imul(al3, bl3)) | 0;
        mid = (mid + Math.imul(al3, bh3)) | 0;
        mid = (mid + Math.imul(ah3, bl3)) | 0;
        hi = (hi + Math.imul(ah3, bh3)) | 0;
        lo = (lo + Math.imul(al2, bl4)) | 0;
        mid = (mid + Math.imul(al2, bh4)) | 0;
        mid = (mid + Math.imul(ah2, bl4)) | 0;
        hi = (hi + Math.imul(ah2, bh4)) | 0;
        lo = (lo + Math.imul(al1, bl5)) | 0;
        mid = (mid + Math.imul(al1, bh5)) | 0;
        mid = (mid + Math.imul(ah1, bl5)) | 0;
        hi = (hi + Math.imul(ah1, bh5)) | 0;
        lo = (lo + Math.imul(al0, bl6)) | 0;
        mid = (mid + Math.imul(al0, bh6)) | 0;
        mid = (mid + Math.imul(ah0, bl6)) | 0;
        hi = (hi + Math.imul(ah0, bh6)) | 0;
        var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
        w6 &= 0x3ffffff;
        /* k = 7 */
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = (mid + Math.imul(ah7, bl0)) | 0;
        hi = Math.imul(ah7, bh0);
        lo = (lo + Math.imul(al6, bl1)) | 0;
        mid = (mid + Math.imul(al6, bh1)) | 0;
        mid = (mid + Math.imul(ah6, bl1)) | 0;
        hi = (hi + Math.imul(ah6, bh1)) | 0;
        lo = (lo + Math.imul(al5, bl2)) | 0;
        mid = (mid + Math.imul(al5, bh2)) | 0;
        mid = (mid + Math.imul(ah5, bl2)) | 0;
        hi = (hi + Math.imul(ah5, bh2)) | 0;
        lo = (lo + Math.imul(al4, bl3)) | 0;
        mid = (mid + Math.imul(al4, bh3)) | 0;
        mid = (mid + Math.imul(ah4, bl3)) | 0;
        hi = (hi + Math.imul(ah4, bh3)) | 0;
        lo = (lo + Math.imul(al3, bl4)) | 0;
        mid = (mid + Math.imul(al3, bh4)) | 0;
        mid = (mid + Math.imul(ah3, bl4)) | 0;
        hi = (hi + Math.imul(ah3, bh4)) | 0;
        lo = (lo + Math.imul(al2, bl5)) | 0;
        mid = (mid + Math.imul(al2, bh5)) | 0;
        mid = (mid + Math.imul(ah2, bl5)) | 0;
        hi = (hi + Math.imul(ah2, bh5)) | 0;
        lo = (lo + Math.imul(al1, bl6)) | 0;
        mid = (mid + Math.imul(al1, bh6)) | 0;
        mid = (mid + Math.imul(ah1, bl6)) | 0;
        hi = (hi + Math.imul(ah1, bh6)) | 0;
        lo = (lo + Math.imul(al0, bl7)) | 0;
        mid = (mid + Math.imul(al0, bh7)) | 0;
        mid = (mid + Math.imul(ah0, bl7)) | 0;
        hi = (hi + Math.imul(ah0, bh7)) | 0;
        var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
        w7 &= 0x3ffffff;
        /* k = 8 */
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = (mid + Math.imul(ah8, bl0)) | 0;
        hi = Math.imul(ah8, bh0);
        lo = (lo + Math.imul(al7, bl1)) | 0;
        mid = (mid + Math.imul(al7, bh1)) | 0;
        mid = (mid + Math.imul(ah7, bl1)) | 0;
        hi = (hi + Math.imul(ah7, bh1)) | 0;
        lo = (lo + Math.imul(al6, bl2)) | 0;
        mid = (mid + Math.imul(al6, bh2)) | 0;
        mid = (mid + Math.imul(ah6, bl2)) | 0;
        hi = (hi + Math.imul(ah6, bh2)) | 0;
        lo = (lo + Math.imul(al5, bl3)) | 0;
        mid = (mid + Math.imul(al5, bh3)) | 0;
        mid = (mid + Math.imul(ah5, bl3)) | 0;
        hi = (hi + Math.imul(ah5, bh3)) | 0;
        lo = (lo + Math.imul(al4, bl4)) | 0;
        mid = (mid + Math.imul(al4, bh4)) | 0;
        mid = (mid + Math.imul(ah4, bl4)) | 0;
        hi = (hi + Math.imul(ah4, bh4)) | 0;
        lo = (lo + Math.imul(al3, bl5)) | 0;
        mid = (mid + Math.imul(al3, bh5)) | 0;
        mid = (mid + Math.imul(ah3, bl5)) | 0;
        hi = (hi + Math.imul(ah3, bh5)) | 0;
        lo = (lo + Math.imul(al2, bl6)) | 0;
        mid = (mid + Math.imul(al2, bh6)) | 0;
        mid = (mid + Math.imul(ah2, bl6)) | 0;
        hi = (hi + Math.imul(ah2, bh6)) | 0;
        lo = (lo + Math.imul(al1, bl7)) | 0;
        mid = (mid + Math.imul(al1, bh7)) | 0;
        mid = (mid + Math.imul(ah1, bl7)) | 0;
        hi = (hi + Math.imul(ah1, bh7)) | 0;
        lo = (lo + Math.imul(al0, bl8)) | 0;
        mid = (mid + Math.imul(al0, bh8)) | 0;
        mid = (mid + Math.imul(ah0, bl8)) | 0;
        hi = (hi + Math.imul(ah0, bh8)) | 0;
        var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
        w8 &= 0x3ffffff;
        /* k = 9 */
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = (mid + Math.imul(ah9, bl0)) | 0;
        hi = Math.imul(ah9, bh0);
        lo = (lo + Math.imul(al8, bl1)) | 0;
        mid = (mid + Math.imul(al8, bh1)) | 0;
        mid = (mid + Math.imul(ah8, bl1)) | 0;
        hi = (hi + Math.imul(ah8, bh1)) | 0;
        lo = (lo + Math.imul(al7, bl2)) | 0;
        mid = (mid + Math.imul(al7, bh2)) | 0;
        mid = (mid + Math.imul(ah7, bl2)) | 0;
        hi = (hi + Math.imul(ah7, bh2)) | 0;
        lo = (lo + Math.imul(al6, bl3)) | 0;
        mid = (mid + Math.imul(al6, bh3)) | 0;
        mid = (mid + Math.imul(ah6, bl3)) | 0;
        hi = (hi + Math.imul(ah6, bh3)) | 0;
        lo = (lo + Math.imul(al5, bl4)) | 0;
        mid = (mid + Math.imul(al5, bh4)) | 0;
        mid = (mid + Math.imul(ah5, bl4)) | 0;
        hi = (hi + Math.imul(ah5, bh4)) | 0;
        lo = (lo + Math.imul(al4, bl5)) | 0;
        mid = (mid + Math.imul(al4, bh5)) | 0;
        mid = (mid + Math.imul(ah4, bl5)) | 0;
        hi = (hi + Math.imul(ah4, bh5)) | 0;
        lo = (lo + Math.imul(al3, bl6)) | 0;
        mid = (mid + Math.imul(al3, bh6)) | 0;
        mid = (mid + Math.imul(ah3, bl6)) | 0;
        hi = (hi + Math.imul(ah3, bh6)) | 0;
        lo = (lo + Math.imul(al2, bl7)) | 0;
        mid = (mid + Math.imul(al2, bh7)) | 0;
        mid = (mid + Math.imul(ah2, bl7)) | 0;
        hi = (hi + Math.imul(ah2, bh7)) | 0;
        lo = (lo + Math.imul(al1, bl8)) | 0;
        mid = (mid + Math.imul(al1, bh8)) | 0;
        mid = (mid + Math.imul(ah1, bl8)) | 0;
        hi = (hi + Math.imul(ah1, bh8)) | 0;
        lo = (lo + Math.imul(al0, bl9)) | 0;
        mid = (mid + Math.imul(al0, bh9)) | 0;
        mid = (mid + Math.imul(ah0, bl9)) | 0;
        hi = (hi + Math.imul(ah0, bh9)) | 0;
        var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
        w9 &= 0x3ffffff;
        /* k = 10 */
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = (mid + Math.imul(ah9, bl1)) | 0;
        hi = Math.imul(ah9, bh1);
        lo = (lo + Math.imul(al8, bl2)) | 0;
        mid = (mid + Math.imul(al8, bh2)) | 0;
        mid = (mid + Math.imul(ah8, bl2)) | 0;
        hi = (hi + Math.imul(ah8, bh2)) | 0;
        lo = (lo + Math.imul(al7, bl3)) | 0;
        mid = (mid + Math.imul(al7, bh3)) | 0;
        mid = (mid + Math.imul(ah7, bl3)) | 0;
        hi = (hi + Math.imul(ah7, bh3)) | 0;
        lo = (lo + Math.imul(al6, bl4)) | 0;
        mid = (mid + Math.imul(al6, bh4)) | 0;
        mid = (mid + Math.imul(ah6, bl4)) | 0;
        hi = (hi + Math.imul(ah6, bh4)) | 0;
        lo = (lo + Math.imul(al5, bl5)) | 0;
        mid = (mid + Math.imul(al5, bh5)) | 0;
        mid = (mid + Math.imul(ah5, bl5)) | 0;
        hi = (hi + Math.imul(ah5, bh5)) | 0;
        lo = (lo + Math.imul(al4, bl6)) | 0;
        mid = (mid + Math.imul(al4, bh6)) | 0;
        mid = (mid + Math.imul(ah4, bl6)) | 0;
        hi = (hi + Math.imul(ah4, bh6)) | 0;
        lo = (lo + Math.imul(al3, bl7)) | 0;
        mid = (mid + Math.imul(al3, bh7)) | 0;
        mid = (mid + Math.imul(ah3, bl7)) | 0;
        hi = (hi + Math.imul(ah3, bh7)) | 0;
        lo = (lo + Math.imul(al2, bl8)) | 0;
        mid = (mid + Math.imul(al2, bh8)) | 0;
        mid = (mid + Math.imul(ah2, bl8)) | 0;
        hi = (hi + Math.imul(ah2, bh8)) | 0;
        lo = (lo + Math.imul(al1, bl9)) | 0;
        mid = (mid + Math.imul(al1, bh9)) | 0;
        mid = (mid + Math.imul(ah1, bl9)) | 0;
        hi = (hi + Math.imul(ah1, bh9)) | 0;
        var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
        w10 &= 0x3ffffff;
        /* k = 11 */
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = (mid + Math.imul(ah9, bl2)) | 0;
        hi = Math.imul(ah9, bh2);
        lo = (lo + Math.imul(al8, bl3)) | 0;
        mid = (mid + Math.imul(al8, bh3)) | 0;
        mid = (mid + Math.imul(ah8, bl3)) | 0;
        hi = (hi + Math.imul(ah8, bh3)) | 0;
        lo = (lo + Math.imul(al7, bl4)) | 0;
        mid = (mid + Math.imul(al7, bh4)) | 0;
        mid = (mid + Math.imul(ah7, bl4)) | 0;
        hi = (hi + Math.imul(ah7, bh4)) | 0;
        lo = (lo + Math.imul(al6, bl5)) | 0;
        mid = (mid + Math.imul(al6, bh5)) | 0;
        mid = (mid + Math.imul(ah6, bl5)) | 0;
        hi = (hi + Math.imul(ah6, bh5)) | 0;
        lo = (lo + Math.imul(al5, bl6)) | 0;
        mid = (mid + Math.imul(al5, bh6)) | 0;
        mid = (mid + Math.imul(ah5, bl6)) | 0;
        hi = (hi + Math.imul(ah5, bh6)) | 0;
        lo = (lo + Math.imul(al4, bl7)) | 0;
        mid = (mid + Math.imul(al4, bh7)) | 0;
        mid = (mid + Math.imul(ah4, bl7)) | 0;
        hi = (hi + Math.imul(ah4, bh7)) | 0;
        lo = (lo + Math.imul(al3, bl8)) | 0;
        mid = (mid + Math.imul(al3, bh8)) | 0;
        mid = (mid + Math.imul(ah3, bl8)) | 0;
        hi = (hi + Math.imul(ah3, bh8)) | 0;
        lo = (lo + Math.imul(al2, bl9)) | 0;
        mid = (mid + Math.imul(al2, bh9)) | 0;
        mid = (mid + Math.imul(ah2, bl9)) | 0;
        hi = (hi + Math.imul(ah2, bh9)) | 0;
        var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
        w11 &= 0x3ffffff;
        /* k = 12 */
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = (mid + Math.imul(ah9, bl3)) | 0;
        hi = Math.imul(ah9, bh3);
        lo = (lo + Math.imul(al8, bl4)) | 0;
        mid = (mid + Math.imul(al8, bh4)) | 0;
        mid = (mid + Math.imul(ah8, bl4)) | 0;
        hi = (hi + Math.imul(ah8, bh4)) | 0;
        lo = (lo + Math.imul(al7, bl5)) | 0;
        mid = (mid + Math.imul(al7, bh5)) | 0;
        mid = (mid + Math.imul(ah7, bl5)) | 0;
        hi = (hi + Math.imul(ah7, bh5)) | 0;
        lo = (lo + Math.imul(al6, bl6)) | 0;
        mid = (mid + Math.imul(al6, bh6)) | 0;
        mid = (mid + Math.imul(ah6, bl6)) | 0;
        hi = (hi + Math.imul(ah6, bh6)) | 0;
        lo = (lo + Math.imul(al5, bl7)) | 0;
        mid = (mid + Math.imul(al5, bh7)) | 0;
        mid = (mid + Math.imul(ah5, bl7)) | 0;
        hi = (hi + Math.imul(ah5, bh7)) | 0;
        lo = (lo + Math.imul(al4, bl8)) | 0;
        mid = (mid + Math.imul(al4, bh8)) | 0;
        mid = (mid + Math.imul(ah4, bl8)) | 0;
        hi = (hi + Math.imul(ah4, bh8)) | 0;
        lo = (lo + Math.imul(al3, bl9)) | 0;
        mid = (mid + Math.imul(al3, bh9)) | 0;
        mid = (mid + Math.imul(ah3, bl9)) | 0;
        hi = (hi + Math.imul(ah3, bh9)) | 0;
        var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
        w12 &= 0x3ffffff;
        /* k = 13 */
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = (mid + Math.imul(ah9, bl4)) | 0;
        hi = Math.imul(ah9, bh4);
        lo = (lo + Math.imul(al8, bl5)) | 0;
        mid = (mid + Math.imul(al8, bh5)) | 0;
        mid = (mid + Math.imul(ah8, bl5)) | 0;
        hi = (hi + Math.imul(ah8, bh5)) | 0;
        lo = (lo + Math.imul(al7, bl6)) | 0;
        mid = (mid + Math.imul(al7, bh6)) | 0;
        mid = (mid + Math.imul(ah7, bl6)) | 0;
        hi = (hi + Math.imul(ah7, bh6)) | 0;
        lo = (lo + Math.imul(al6, bl7)) | 0;
        mid = (mid + Math.imul(al6, bh7)) | 0;
        mid = (mid + Math.imul(ah6, bl7)) | 0;
        hi = (hi + Math.imul(ah6, bh7)) | 0;
        lo = (lo + Math.imul(al5, bl8)) | 0;
        mid = (mid + Math.imul(al5, bh8)) | 0;
        mid = (mid + Math.imul(ah5, bl8)) | 0;
        hi = (hi + Math.imul(ah5, bh8)) | 0;
        lo = (lo + Math.imul(al4, bl9)) | 0;
        mid = (mid + Math.imul(al4, bh9)) | 0;
        mid = (mid + Math.imul(ah4, bl9)) | 0;
        hi = (hi + Math.imul(ah4, bh9)) | 0;
        var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
        w13 &= 0x3ffffff;
        /* k = 14 */
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = (mid + Math.imul(ah9, bl5)) | 0;
        hi = Math.imul(ah9, bh5);
        lo = (lo + Math.imul(al8, bl6)) | 0;
        mid = (mid + Math.imul(al8, bh6)) | 0;
        mid = (mid + Math.imul(ah8, bl6)) | 0;
        hi = (hi + Math.imul(ah8, bh6)) | 0;
        lo = (lo + Math.imul(al7, bl7)) | 0;
        mid = (mid + Math.imul(al7, bh7)) | 0;
        mid = (mid + Math.imul(ah7, bl7)) | 0;
        hi = (hi + Math.imul(ah7, bh7)) | 0;
        lo = (lo + Math.imul(al6, bl8)) | 0;
        mid = (mid + Math.imul(al6, bh8)) | 0;
        mid = (mid + Math.imul(ah6, bl8)) | 0;
        hi = (hi + Math.imul(ah6, bh8)) | 0;
        lo = (lo + Math.imul(al5, bl9)) | 0;
        mid = (mid + Math.imul(al5, bh9)) | 0;
        mid = (mid + Math.imul(ah5, bl9)) | 0;
        hi = (hi + Math.imul(ah5, bh9)) | 0;
        var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
        w14 &= 0x3ffffff;
        /* k = 15 */
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = (mid + Math.imul(ah9, bl6)) | 0;
        hi = Math.imul(ah9, bh6);
        lo = (lo + Math.imul(al8, bl7)) | 0;
        mid = (mid + Math.imul(al8, bh7)) | 0;
        mid = (mid + Math.imul(ah8, bl7)) | 0;
        hi = (hi + Math.imul(ah8, bh7)) | 0;
        lo = (lo + Math.imul(al7, bl8)) | 0;
        mid = (mid + Math.imul(al7, bh8)) | 0;
        mid = (mid + Math.imul(ah7, bl8)) | 0;
        hi = (hi + Math.imul(ah7, bh8)) | 0;
        lo = (lo + Math.imul(al6, bl9)) | 0;
        mid = (mid + Math.imul(al6, bh9)) | 0;
        mid = (mid + Math.imul(ah6, bl9)) | 0;
        hi = (hi + Math.imul(ah6, bh9)) | 0;
        var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
        w15 &= 0x3ffffff;
        /* k = 16 */
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = (mid + Math.imul(ah9, bl7)) | 0;
        hi = Math.imul(ah9, bh7);
        lo = (lo + Math.imul(al8, bl8)) | 0;
        mid = (mid + Math.imul(al8, bh8)) | 0;
        mid = (mid + Math.imul(ah8, bl8)) | 0;
        hi = (hi + Math.imul(ah8, bh8)) | 0;
        lo = (lo + Math.imul(al7, bl9)) | 0;
        mid = (mid + Math.imul(al7, bh9)) | 0;
        mid = (mid + Math.imul(ah7, bl9)) | 0;
        hi = (hi + Math.imul(ah7, bh9)) | 0;
        var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
        w16 &= 0x3ffffff;
        /* k = 17 */
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = (mid + Math.imul(ah9, bl8)) | 0;
        hi = Math.imul(ah9, bh8);
        lo = (lo + Math.imul(al8, bl9)) | 0;
        mid = (mid + Math.imul(al8, bh9)) | 0;
        mid = (mid + Math.imul(ah8, bl9)) | 0;
        hi = (hi + Math.imul(ah8, bh9)) | 0;
        var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
        w17 &= 0x3ffffff;
        /* k = 18 */
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = (mid + Math.imul(ah9, bl9)) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
        w18 &= 0x3ffffff;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
          o[19] = c;
          out.length++;
        }
        return out;
      };
    
      // Polyfill comb
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }
    
      function bigMulTo (self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;
    
        var carry = 0;
        var hncarry = 0;
        for (var k = 0; k < out.length - 1; k++) {
          // Sum all words with the same `i + j = k` and accumulate `ncarry`,
          // note that ncarry could be >= 0x3ffffff
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 0x3ffffff;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
            var i = k - j;
            var a = self.words[i] | 0;
            var b = num.words[j] | 0;
            var r = a * b;
    
            var lo = r & 0x3ffffff;
            ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
            lo = (lo + rword) | 0;
            rword = lo & 0x3ffffff;
            ncarry = (ncarry + (lo >>> 26)) | 0;
    
            hncarry += ncarry >>> 26;
            ncarry &= 0x3ffffff;
          }
          out.words[k] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k] = carry;
        } else {
          out.length--;
        }
    
        return out._strip();
      }
    
      function jumboMulTo (self, num, out) {
        // Temporary disable, see https://github.com/indutny/bn.js/issues/211
        // var fftm = new FFTM();
        // return fftm.mulp(self, num, out);
        return bigMulTo(self, num, out);
      }
    
      BN.prototype.mulTo = function mulTo (num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }
    
        return res;
      };
    
      // Cooley-Tukey algorithm for FFT
      // slightly revisited to rely on looping instead of recursion
    
      function FFTM (x, y) {
        this.x = x;
        this.y = y;
      }
    
      FFTM.prototype.makeRBT = function makeRBT (N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for (var i = 0; i < N; i++) {
          t[i] = this.revBin(i, l, N);
        }
    
        return t;
      };
    
      // Returns binary-reversed representation of `x`
      FFTM.prototype.revBin = function revBin (x, l, N) {
        if (x === 0 || x === N - 1) return x;
    
        var rb = 0;
        for (var i = 0; i < l; i++) {
          rb |= (x & 1) << (l - i - 1);
          x >>= 1;
        }
    
        return rb;
      };
    
      // Performs "tweedling" phase, therefore 'emulating'
      // behaviour of the recursive algorithm
      FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
        for (var i = 0; i < N; i++) {
          rtws[i] = rws[rbt[i]];
          itws[i] = iws[rbt[i]];
        }
      };
    
      FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
    
        for (var s = 1; s < N; s <<= 1) {
          var l = s << 1;
    
          var rtwdf = Math.cos(2 * Math.PI / l);
          var itwdf = Math.sin(2 * Math.PI / l);
    
          for (var p = 0; p < N; p += l) {
            var rtwdf_ = rtwdf;
            var itwdf_ = itwdf;
    
            for (var j = 0; j < s; j++) {
              var re = rtws[p + j];
              var ie = itws[p + j];
    
              var ro = rtws[p + j + s];
              var io = itws[p + j + s];
    
              var rx = rtwdf_ * ro - itwdf_ * io;
    
              io = rtwdf_ * io + itwdf_ * ro;
              ro = rx;
    
              rtws[p + j] = re + ro;
              itws[p + j] = ie + io;
    
              rtws[p + j + s] = re - ro;
              itws[p + j + s] = ie - io;
    
              /* jshint maxdepth : false */
              if (j !== l) {
                rx = rtwdf * rtwdf_ - itwdf * itwdf_;
    
                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                rtwdf_ = rx;
              }
            }
          }
        }
      };
    
      FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for (N = N / 2 | 0; N; N = N >>> 1) {
          i++;
        }
    
        return 1 << i + 1 + odd;
      };
    
      FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
        if (N <= 1) return;
    
        for (var i = 0; i < N / 2; i++) {
          var t = rws[i];
    
          rws[i] = rws[N - i - 1];
          rws[N - i - 1] = t;
    
          t = iws[i];
    
          iws[i] = -iws[N - i - 1];
          iws[N - i - 1] = -t;
        }
      };
    
      FFTM.prototype.normalize13b = function normalize13b (ws, N) {
        var carry = 0;
        for (var i = 0; i < N / 2; i++) {
          var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
            Math.round(ws[2 * i] / N) +
            carry;
    
          ws[i] = w & 0x3ffffff;
    
          if (w < 0x4000000) {
            carry = 0;
          } else {
            carry = w / 0x4000000 | 0;
          }
        }
    
        return ws;
      };
    
      FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
        var carry = 0;
        for (var i = 0; i < len; i++) {
          carry = carry + (ws[i] | 0);
    
          rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
          rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
        }
    
        // Pad with zeroes
        for (i = 2 * len; i < N; ++i) {
          rws[i] = 0;
        }
    
        assert(carry === 0);
        assert((carry & ~0x1fff) === 0);
      };
    
      FFTM.prototype.stub = function stub (N) {
        var ph = new Array(N);
        for (var i = 0; i < N; i++) {
          ph[i] = 0;
        }
    
        return ph;
      };
    
      FFTM.prototype.mulp = function mulp (x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
    
        var rbt = this.makeRBT(N);
    
        var _ = this.stub(N);
    
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
    
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
    
        var rmws = out.words;
        rmws.length = N;
    
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
    
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
    
        for (var i = 0; i < N; i++) {
          var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
          iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
          rwst[i] = rx;
        }
    
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
    
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out._strip();
      };
    
      // Multiply `this` by `num`
      BN.prototype.mul = function mul (num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };
    
      // Multiply employing FFT
      BN.prototype.mulf = function mulf (num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };
    
      // In-place Multiplication
      BN.prototype.imul = function imul (num) {
        return this.clone().mulTo(num, this);
      };
    
      BN.prototype.imuln = function imuln (num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
    
        assert(typeof num === 'number');
        assert(num < 0x4000000);
    
        // Carry
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = (this.words[i] | 0) * num;
          var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
          carry >>= 26;
          carry += (w / 0x4000000) | 0;
          // NOTE: lo is 27bit maximum
          carry += lo >>> 26;
          this.words[i] = lo & 0x3ffffff;
        }
    
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
    
        return isNegNum ? this.ineg() : this;
      };
    
      BN.prototype.muln = function muln (num) {
        return this.clone().imuln(num);
      };
    
      // `this` * `this`
      BN.prototype.sqr = function sqr () {
        return this.mul(this);
      };
    
      // `this` * `this` in-place
      BN.prototype.isqr = function isqr () {
        return this.imul(this.clone());
      };
    
      // Math.pow(`this`, `num`)
      BN.prototype.pow = function pow (num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);
    
        // Skip leading zeroes
        var res = this;
        for (var i = 0; i < w.length; i++, res = res.sqr()) {
          if (w[i] !== 0) break;
        }
    
        if (++i < w.length) {
          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
            if (w[i] === 0) continue;
    
            res = res.mul(q);
          }
        }
    
        return res;
      };
    
      // Shift-left in-place
      BN.prototype.iushln = function iushln (bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
        var i;
    
        if (r !== 0) {
          var carry = 0;
    
          for (i = 0; i < this.length; i++) {
            var newCarry = this.words[i] & carryMask;
            var c = ((this.words[i] | 0) - newCarry) << r;
            this.words[i] = c | carry;
            carry = newCarry >>> (26 - r);
          }
    
          if (carry) {
            this.words[i] = carry;
            this.length++;
          }
        }
    
        if (s !== 0) {
          for (i = this.length - 1; i >= 0; i--) {
            this.words[i + s] = this.words[i];
          }
    
          for (i = 0; i < s; i++) {
            this.words[i] = 0;
          }
    
          this.length += s;
        }
    
        return this._strip();
      };
    
      BN.prototype.ishln = function ishln (bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
      };
    
      // Shift-right in-place
      // NOTE: `hint` is a lowest bit before trailing zeroes
      // NOTE: if `extended` is present - it will be filled with destroyed bits
      BN.prototype.iushrn = function iushrn (bits, hint, extended) {
        assert(typeof bits === 'number' && bits >= 0);
        var h;
        if (hint) {
          h = (hint - (hint % 26)) / 26;
        } else {
          h = 0;
        }
    
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
        var maskedWords = extended;
    
        h -= s;
        h = Math.max(0, h);
    
        // Extended mode, copy masked part
        if (maskedWords) {
          for (var i = 0; i < s; i++) {
            maskedWords.words[i] = this.words[i];
          }
          maskedWords.length = s;
        }
    
        if (s === 0) {
          // No-op, we should not move anything at all
        } else if (this.length > s) {
          this.length -= s;
          for (i = 0; i < this.length; i++) {
            this.words[i] = this.words[i + s];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }
    
        var carry = 0;
        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
          var word = this.words[i] | 0;
          this.words[i] = (carry << (26 - r)) | (word >>> r);
          carry = word & mask;
        }
    
        // Push carried bits as a mask
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }
    
        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }
    
        return this._strip();
      };
    
      BN.prototype.ishrn = function ishrn (bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };
    
      // Shift-left
      BN.prototype.shln = function shln (bits) {
        return this.clone().ishln(bits);
      };
    
      BN.prototype.ushln = function ushln (bits) {
        return this.clone().iushln(bits);
      };
    
      // Shift-right
      BN.prototype.shrn = function shrn (bits) {
        return this.clone().ishrn(bits);
      };
    
      BN.prototype.ushrn = function ushrn (bits) {
        return this.clone().iushrn(bits);
      };
    
      // Test if n bit is set
      BN.prototype.testn = function testn (bit) {
        assert(typeof bit === 'number' && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
    
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;
    
        // Check bit and return
        var w = this.words[s];
    
        return !!(w & q);
      };
    
      // Return only lowers bits of number (in-place)
      BN.prototype.imaskn = function imaskn (bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
    
        assert(this.negative === 0, 'imaskn works only with positive numbers');
    
        if (this.length <= s) {
          return this;
        }
    
        if (r !== 0) {
          s++;
        }
        this.length = Math.min(s, this.length);
    
        if (r !== 0) {
          var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
          this.words[this.length - 1] &= mask;
        }
    
        return this._strip();
      };
    
      // Return only lowers bits of number
      BN.prototype.maskn = function maskn (bits) {
        return this.clone().imaskn(bits);
      };
    
      // Add plain number `num` to `this`
      BN.prototype.iaddn = function iaddn (num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0) return this.isubn(-num);
    
        // Possible sign change
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) <= num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }
    
          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }
    
        // Add without checks
        return this._iaddn(num);
      };
    
      BN.prototype._iaddn = function _iaddn (num) {
        this.words[0] += num;
    
        // Carry
        for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
          this.words[i] -= 0x4000000;
          if (i === this.length - 1) {
            this.words[i + 1] = 1;
          } else {
            this.words[i + 1]++;
          }
        }
        this.length = Math.max(this.length, i + 1);
    
        return this;
      };
    
      // Subtract plain number `num` from `this`
      BN.prototype.isubn = function isubn (num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0) return this.iaddn(-num);
    
        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }
    
        this.words[0] -= num;
    
        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          // Carry
          for (var i = 0; i < this.length && this.words[i] < 0; i++) {
            this.words[i] += 0x4000000;
            this.words[i + 1] -= 1;
          }
        }
    
        return this._strip();
      };
    
      BN.prototype.addn = function addn (num) {
        return this.clone().iaddn(num);
      };
    
      BN.prototype.subn = function subn (num) {
        return this.clone().isubn(num);
      };
    
      BN.prototype.iabs = function iabs () {
        this.negative = 0;
    
        return this;
      };
    
      BN.prototype.abs = function abs () {
        return this.clone().iabs();
      };
    
      BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
        var len = num.length + shift;
        var i;
    
        this._expand(len);
    
        var w;
        var carry = 0;
        for (i = 0; i < num.length; i++) {
          w = (this.words[i + shift] | 0) + carry;
          var right = (num.words[i] | 0) * mul;
          w -= right & 0x3ffffff;
          carry = (w >> 26) - ((right / 0x4000000) | 0);
          this.words[i + shift] = w & 0x3ffffff;
        }
        for (; i < this.length - shift; i++) {
          w = (this.words[i + shift] | 0) + carry;
          carry = w >> 26;
          this.words[i + shift] = w & 0x3ffffff;
        }
    
        if (carry === 0) return this._strip();
    
        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for (i = 0; i < this.length; i++) {
          w = -(this.words[i] | 0) + carry;
          carry = w >> 26;
          this.words[i] = w & 0x3ffffff;
        }
        this.negative = 1;
    
        return this._strip();
      };
    
      BN.prototype._wordDiv = function _wordDiv (num, mode) {
        var shift = this.length - num.length;
    
        var a = this.clone();
        var b = num;
    
        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b = b.ushln(shift);
          a.iushln(shift);
          bhi = b.words[b.length - 1] | 0;
        }
    
        // Initialize quotient
        var m = a.length - b.length;
        var q;
    
        if (mode !== 'mod') {
          q = new BN(null);
          q.length = m + 1;
          q.words = new Array(q.length);
          for (var i = 0; i < q.length; i++) {
            q.words[i] = 0;
          }
        }
    
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
          a = diff;
          if (q) {
            q.words[m] = 1;
          }
        }
    
        for (var j = m - 1; j >= 0; j--) {
          var qj = (a.words[b.length + j] | 0) * 0x4000000 +
            (a.words[b.length + j - 1] | 0);
    
          // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
          // (0x7ffffff)
          qj = Math.min((qj / bhi) | 0, 0x3ffffff);
    
          a._ishlnsubmul(b, qj, j);
          while (a.negative !== 0) {
            qj--;
            a.negative = 0;
            a._ishlnsubmul(b, 1, j);
            if (!a.isZero()) {
              a.negative ^= 1;
            }
          }
          if (q) {
            q.words[j] = qj;
          }
        }
        if (q) {
          q._strip();
        }
        a._strip();
    
        // Denormalize
        if (mode !== 'div' && shift !== 0) {
          a.iushrn(shift);
        }
    
        return {
          div: q || null,
          mod: a
        };
      };
    
      // NOTE: 1) `mode` can be set to `mod` to request mod only,
      //       to `div` to request div only, or be absent to
      //       request both div & mod
      //       2) `positive` is true if unsigned mod is requested
      BN.prototype.divmod = function divmod (num, mode, positive) {
        assert(!num.isZero());
    
        if (this.isZero()) {
          return {
            div: new BN(0),
            mod: new BN(0)
          };
        }
    
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);
    
          if (mode !== 'mod') {
            div = res.div.neg();
          }
    
          if (mode !== 'div') {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.iadd(num);
            }
          }
    
          return {
            div: div,
            mod: mod
          };
        }
    
        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);
    
          if (mode !== 'mod') {
            div = res.div.neg();
          }
    
          return {
            div: div,
            mod: res.mod
          };
        }
    
        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);
    
          if (mode !== 'div') {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.isub(num);
            }
          }
    
          return {
            div: res.div,
            mod: mod
          };
        }
    
        // Both numbers are positive at this point
    
        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN(0),
            mod: this
          };
        }
    
        // Very short reduction
        if (num.length === 1) {
          if (mode === 'div') {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }
    
          if (mode === 'mod') {
            return {
              div: null,
              mod: new BN(this.modrn(num.words[0]))
            };
          }
    
          return {
            div: this.divn(num.words[0]),
            mod: new BN(this.modrn(num.words[0]))
          };
        }
    
        return this._wordDiv(num, mode);
      };
    
      // Find `this` / `num`
      BN.prototype.div = function div (num) {
        return this.divmod(num, 'div', false).div;
      };
    
      // Find `this` % `num`
      BN.prototype.mod = function mod (num) {
        return this.divmod(num, 'mod', false).mod;
      };
    
      BN.prototype.umod = function umod (num) {
        return this.divmod(num, 'mod', true).mod;
      };
    
      // Find Round(`this` / `num`)
      BN.prototype.divRound = function divRound (num) {
        var dm = this.divmod(num);
    
        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;
    
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
    
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
    
        // Round down
        if (cmp < 0 || (r2 === 1 && cmp === 0)) return dm.div;
    
        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };
    
      BN.prototype.modrn = function modrn (num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
    
        assert(num <= 0x3ffffff);
        var p = (1 << 26) % num;
    
        var acc = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          acc = (p * acc + (this.words[i] | 0)) % num;
        }
    
        return isNegNum ? -acc : acc;
      };
    
      // WARNING: DEPRECATED
      BN.prototype.modn = function modn (num) {
        return this.modrn(num);
      };
    
      // In-place division by number
      BN.prototype.idivn = function idivn (num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
    
        assert(num <= 0x3ffffff);
    
        var carry = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var w = (this.words[i] | 0) + carry * 0x4000000;
          this.words[i] = (w / num) | 0;
          carry = w % num;
        }
    
        this._strip();
        return isNegNum ? this.ineg() : this;
      };
    
      BN.prototype.divn = function divn (num) {
        return this.clone().idivn(num);
      };
    
      BN.prototype.egcd = function egcd (p) {
        assert(p.negative === 0);
        assert(!p.isZero());
    
        var x = this;
        var y = p.clone();
    
        if (x.negative !== 0) {
          x = x.umod(p);
        } else {
          x = x.clone();
        }
    
        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);
    
        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);
    
        var g = 0;
    
        while (x.isEven() && y.isEven()) {
          x.iushrn(1);
          y.iushrn(1);
          ++g;
        }
    
        var yp = y.clone();
        var xp = x.clone();
    
        while (!x.isZero()) {
          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
          if (i > 0) {
            x.iushrn(i);
            while (i-- > 0) {
              if (A.isOdd() || B.isOdd()) {
                A.iadd(yp);
                B.isub(xp);
              }
    
              A.iushrn(1);
              B.iushrn(1);
            }
          }
    
          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
          if (j > 0) {
            y.iushrn(j);
            while (j-- > 0) {
              if (C.isOdd() || D.isOdd()) {
                C.iadd(yp);
                D.isub(xp);
              }
    
              C.iushrn(1);
              D.iushrn(1);
            }
          }
    
          if (x.cmp(y) >= 0) {
            x.isub(y);
            A.isub(C);
            B.isub(D);
          } else {
            y.isub(x);
            C.isub(A);
            D.isub(B);
          }
        }
    
        return {
          a: C,
          b: D,
          gcd: y.iushln(g)
        };
      };
    
      // This is reduced incarnation of the binary EEA
      // above, designated to invert members of the
      // _prime_ fields F(p) at a maximal speed
      BN.prototype._invmp = function _invmp (p) {
        assert(p.negative === 0);
        assert(!p.isZero());
    
        var a = this;
        var b = p.clone();
    
        if (a.negative !== 0) {
          a = a.umod(p);
        } else {
          a = a.clone();
        }
    
        var x1 = new BN(1);
        var x2 = new BN(0);
    
        var delta = b.clone();
    
        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
          if (i > 0) {
            a.iushrn(i);
            while (i-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }
    
              x1.iushrn(1);
            }
          }
    
          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
          if (j > 0) {
            b.iushrn(j);
            while (j-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }
    
              x2.iushrn(1);
            }
          }
    
          if (a.cmp(b) >= 0) {
            a.isub(b);
            x1.isub(x2);
          } else {
            b.isub(a);
            x2.isub(x1);
          }
        }
    
        var res;
        if (a.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }
    
        if (res.cmpn(0) < 0) {
          res.iadd(p);
        }
    
        return res;
      };
    
      BN.prototype.gcd = function gcd (num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
    
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
    
        // Remove common factor of two
        for (var shift = 0; a.isEven() && b.isEven(); shift++) {
          a.iushrn(1);
          b.iushrn(1);
        }
    
        do {
          while (a.isEven()) {
            a.iushrn(1);
          }
          while (b.isEven()) {
            b.iushrn(1);
          }
    
          var r = a.cmp(b);
          if (r < 0) {
            // Swap `a` and `b` to make `a` always bigger than `b`
            var t = a;
            a = b;
            b = t;
          } else if (r === 0 || b.cmpn(1) === 0) {
            break;
          }
    
          a.isub(b);
        } while (true);
    
        return b.iushln(shift);
      };
    
      // Invert number in the field F(num)
      BN.prototype.invm = function invm (num) {
        return this.egcd(num).a.umod(num);
      };
    
      BN.prototype.isEven = function isEven () {
        return (this.words[0] & 1) === 0;
      };
    
      BN.prototype.isOdd = function isOdd () {
        return (this.words[0] & 1) === 1;
      };
    
      // And first word and num
      BN.prototype.andln = function andln (num) {
        return this.words[0] & num;
      };
    
      // Increment at the bit position in-line
      BN.prototype.bincn = function bincn (bit) {
        assert(typeof bit === 'number');
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
    
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
          this._expand(s + 1);
          this.words[s] |= q;
          return this;
        }
    
        // Add bit and propagate, if needed
        var carry = q;
        for (var i = s; carry !== 0 && i < this.length; i++) {
          var w = this.words[i] | 0;
          w += carry;
          carry = w >>> 26;
          w &= 0x3ffffff;
          this.words[i] = w;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };
    
      BN.prototype.isZero = function isZero () {
        return this.length === 1 && this.words[0] === 0;
      };
    
      BN.prototype.cmpn = function cmpn (num) {
        var negative = num < 0;
    
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
    
        this._strip();
    
        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }
    
          assert(num <= 0x3ffffff, 'Number is too big');
    
          var w = this.words[0] | 0;
          res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
      };
    
      // Compare two numbers and return:
      // 1 - if `this` > `num`
      // 0 - if `this` == `num`
      // -1 - if `this` < `num`
      BN.prototype.cmp = function cmp (num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
    
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
      };
    
      // Unsigned comparison
      BN.prototype.ucmp = function ucmp (num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
    
        var res = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var a = this.words[i] | 0;
          var b = num.words[i] | 0;
    
          if (a === b) continue;
          if (a < b) {
            res = -1;
          } else if (a > b) {
            res = 1;
          }
          break;
        }
        return res;
      };
    
      BN.prototype.gtn = function gtn (num) {
        return this.cmpn(num) === 1;
      };
    
      BN.prototype.gt = function gt (num) {
        return this.cmp(num) === 1;
      };
    
      BN.prototype.gten = function gten (num) {
        return this.cmpn(num) >= 0;
      };
    
      BN.prototype.gte = function gte (num) {
        return this.cmp(num) >= 0;
      };
    
      BN.prototype.ltn = function ltn (num) {
        return this.cmpn(num) === -1;
      };
    
      BN.prototype.lt = function lt (num) {
        return this.cmp(num) === -1;
      };
    
      BN.prototype.lten = function lten (num) {
        return this.cmpn(num) <= 0;
      };
    
      BN.prototype.lte = function lte (num) {
        return this.cmp(num) <= 0;
      };
    
      BN.prototype.eqn = function eqn (num) {
        return this.cmpn(num) === 0;
      };
    
      BN.prototype.eq = function eq (num) {
        return this.cmp(num) === 0;
      };
    
      //
      // A reduce context, could be using montgomery or something better, depending
      // on the `m` itself.
      //
      BN.red = function red (num) {
        return new Red(num);
      };
    
      BN.prototype.toRed = function toRed (ctx) {
        assert(!this.red, 'Already a number in reduction context');
        assert(this.negative === 0, 'red works only with positives');
        return ctx.convertTo(this)._forceRed(ctx);
      };
    
      BN.prototype.fromRed = function fromRed () {
        assert(this.red, 'fromRed works only with numbers in reduction context');
        return this.red.convertFrom(this);
      };
    
      BN.prototype._forceRed = function _forceRed (ctx) {
        this.red = ctx;
        return this;
      };
    
      BN.prototype.forceRed = function forceRed (ctx) {
        assert(!this.red, 'Already a number in reduction context');
        return this._forceRed(ctx);
      };
    
      BN.prototype.redAdd = function redAdd (num) {
        assert(this.red, 'redAdd works only with red numbers');
        return this.red.add(this, num);
      };
    
      BN.prototype.redIAdd = function redIAdd (num) {
        assert(this.red, 'redIAdd works only with red numbers');
        return this.red.iadd(this, num);
      };
    
      BN.prototype.redSub = function redSub (num) {
        assert(this.red, 'redSub works only with red numbers');
        return this.red.sub(this, num);
      };
    
      BN.prototype.redISub = function redISub (num) {
        assert(this.red, 'redISub works only with red numbers');
        return this.red.isub(this, num);
      };
    
      BN.prototype.redShl = function redShl (num) {
        assert(this.red, 'redShl works only with red numbers');
        return this.red.shl(this, num);
      };
    
      BN.prototype.redMul = function redMul (num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };
    
      BN.prototype.redIMul = function redIMul (num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };
    
      BN.prototype.redSqr = function redSqr () {
        assert(this.red, 'redSqr works only with red numbers');
        this.red._verify1(this);
        return this.red.sqr(this);
      };
    
      BN.prototype.redISqr = function redISqr () {
        assert(this.red, 'redISqr works only with red numbers');
        this.red._verify1(this);
        return this.red.isqr(this);
      };
    
      // Square root over p
      BN.prototype.redSqrt = function redSqrt () {
        assert(this.red, 'redSqrt works only with red numbers');
        this.red._verify1(this);
        return this.red.sqrt(this);
      };
    
      BN.prototype.redInvm = function redInvm () {
        assert(this.red, 'redInvm works only with red numbers');
        this.red._verify1(this);
        return this.red.invm(this);
      };
    
      // Return negative clone of `this` % `red modulo`
      BN.prototype.redNeg = function redNeg () {
        assert(this.red, 'redNeg works only with red numbers');
        this.red._verify1(this);
        return this.red.neg(this);
      };
    
      BN.prototype.redPow = function redPow (num) {
        assert(this.red && !num.red, 'redPow(normalNum)');
        this.red._verify1(this);
        return this.red.pow(this, num);
      };
    
      // Prime numbers with efficient reduction
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };
    
      // Pseudo-Mersenne prime
      function MPrime (name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
    
        this.tmp = this._tmp();
      }
    
      MPrime.prototype._tmp = function _tmp () {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };
    
      MPrime.prototype.ireduce = function ireduce (num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;
    
        do {
          this.split(r, this.tmp);
          r = this.imulK(r);
          r = r.iadd(this.tmp);
          rlen = r.bitLength();
        } while (rlen > this.n);
    
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
          r.words[0] = 0;
          r.length = 1;
        } else if (cmp > 0) {
          r.isub(this.p);
        } else {
          if (r.strip !== undefined) {
            // r is a BN v4 instance
            r.strip();
          } else {
            // r is a BN v5 instance
            r._strip();
          }
        }
    
        return r;
      };
    
      MPrime.prototype.split = function split (input, out) {
        input.iushrn(this.n, 0, out);
      };
    
      MPrime.prototype.imulK = function imulK (num) {
        return num.imul(this.k);
      };
    
      function K256 () {
        MPrime.call(
          this,
          'k256',
          'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
      }
      inherits(K256, MPrime);
    
      K256.prototype.split = function split (input, output) {
        // 256 = 9 * 26 + 22
        var mask = 0x3fffff;
    
        var outLen = Math.min(input.length, 9);
        for (var i = 0; i < outLen; i++) {
          output.words[i] = input.words[i];
        }
        output.length = outLen;
    
        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }
    
        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
    
        for (i = 10; i < input.length; i++) {
          var next = input.words[i] | 0;
          input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
          prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };
    
      K256.prototype.imulK = function imulK (num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
    
        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for (var i = 0; i < num.length; i++) {
          var w = num.words[i] | 0;
          lo += w * 0x3d1;
          num.words[i] = lo & 0x3ffffff;
          lo = w * 0x40 + ((lo / 0x4000000) | 0);
        }
    
        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };
    
      function P224 () {
        MPrime.call(
          this,
          'p224',
          'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
      }
      inherits(P224, MPrime);
    
      function P192 () {
        MPrime.call(
          this,
          'p192',
          'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
      }
      inherits(P192, MPrime);
    
      function P25519 () {
        // 2 ^ 255 - 19
        MPrime.call(
          this,
          '25519',
          '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
      }
      inherits(P25519, MPrime);
    
      P25519.prototype.imulK = function imulK (num) {
        // K = 0x13
        var carry = 0;
        for (var i = 0; i < num.length; i++) {
          var hi = (num.words[i] | 0) * 0x13 + carry;
          var lo = hi & 0x3ffffff;
          hi >>>= 26;
    
          num.words[i] = lo;
          carry = hi;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };
    
      // Exported mostly for testing purposes, use plain name instead
      BN._prime = function prime (name) {
        // Cached version of prime
        if (primes[name]) return primes[name];
    
        var prime;
        if (name === 'k256') {
          prime = new K256();
        } else if (name === 'p224') {
          prime = new P224();
        } else if (name === 'p192') {
          prime = new P192();
        } else if (name === 'p25519') {
          prime = new P25519();
        } else {
          throw new Error('Unknown prime ' + name);
        }
        primes[name] = prime;
    
        return prime;
      };
    
      //
      // Base reduction engine
      //
      function Red (m) {
        if (typeof m === 'string') {
          var prime = BN._prime(m);
          this.m = prime.p;
          this.prime = prime;
        } else {
          assert(m.gtn(1), 'modulus must be greater than 1');
          this.m = m;
          this.prime = null;
        }
      }
    
      Red.prototype._verify1 = function _verify1 (a) {
        assert(a.negative === 0, 'red works only with positives');
        assert(a.red, 'red works only with red numbers');
      };
    
      Red.prototype._verify2 = function _verify2 (a, b) {
        assert((a.negative | b.negative) === 0, 'red works only with positives');
        assert(a.red && a.red === b.red,
          'red works only with red numbers');
      };
    
      Red.prototype.imod = function imod (a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
    
        move(a, a.umod(this.m)._forceRed(this));
        return a;
      };
    
      Red.prototype.neg = function neg (a) {
        if (a.isZero()) {
          return a.clone();
        }
    
        return this.m.sub(a)._forceRed(this);
      };
    
      Red.prototype.add = function add (a, b) {
        this._verify2(a, b);
    
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };
    
      Red.prototype.iadd = function iadd (a, b) {
        this._verify2(a, b);
    
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };
    
      Red.prototype.sub = function sub (a, b) {
        this._verify2(a, b);
    
        var res = a.sub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };
    
      Red.prototype.isub = function isub (a, b) {
        this._verify2(a, b);
    
        var res = a.isub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };
    
      Red.prototype.shl = function shl (a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
      };
    
      Red.prototype.imul = function imul (a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
      };
    
      Red.prototype.mul = function mul (a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
      };
    
      Red.prototype.isqr = function isqr (a) {
        return this.imul(a, a.clone());
      };
    
      Red.prototype.sqr = function sqr (a) {
        return this.mul(a, a);
      };
    
      Red.prototype.sqrt = function sqrt (a) {
        if (a.isZero()) return a.clone();
    
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
    
        // Fast case
        if (mod3 === 3) {
          var pow = this.m.add(new BN(1)).iushrn(2);
          return this.pow(a, pow);
        }
    
        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while (!q.isZero() && q.andln(1) === 0) {
          s++;
          q.iushrn(1);
        }
        assert(!q.isZero());
    
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
    
        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
    
        while (this.pow(z, lpow).cmp(nOne) !== 0) {
          z.redIAdd(nOne);
        }
    
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while (t.cmp(one) !== 0) {
          var tmp = t;
          for (var i = 0; tmp.cmp(one) !== 0; i++) {
            tmp = tmp.redSqr();
          }
          assert(i < m);
          var b = this.pow(c, new BN(1).iushln(m - i - 1));
    
          r = r.redMul(b);
          c = b.redSqr();
          t = t.redMul(c);
          m = i;
        }
    
        return r;
      };
    
      Red.prototype.invm = function invm (a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };
    
      Red.prototype.pow = function pow (a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
    
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for (var i = 2; i < wnd.length; i++) {
          wnd[i] = this.mul(wnd[i - 1], a);
        }
    
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }
    
        for (i = num.length - 1; i >= 0; i--) {
          var word = num.words[i];
          for (var j = start - 1; j >= 0; j--) {
            var bit = (word >> j) & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }
    
            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }
    
            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
    
            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }
    
        return res;
      };
    
      Red.prototype.convertTo = function convertTo (num) {
        var r = num.umod(this.m);
    
        return r === num ? r.clone() : r;
      };
    
      Red.prototype.convertFrom = function convertFrom (num) {
        var res = num.clone();
        res.red = null;
        return res;
      };
    
      //
      // Montgomery method engine
      //
    
      BN.mont = function mont (num) {
        return new Mont(num);
      };
    
      function Mont (m) {
        Red.call(this, m);
    
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - (this.shift % 26);
        }
    
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
    
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits(Mont, Red);
    
      Mont.prototype.convertTo = function convertTo (num) {
        return this.imod(num.ushln(this.shift));
      };
    
      Mont.prototype.convertFrom = function convertFrom (num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
      };
    
      Mont.prototype.imul = function imul (a, b) {
        if (a.isZero() || b.isZero()) {
          a.words[0] = 0;
          a.length = 1;
          return a;
        }
    
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
    
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
    
        return res._forceRed(this);
      };
    
      Mont.prototype.mul = function mul (a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
    
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
    
        return res._forceRed(this);
      };
    
      Mont.prototype.invm = function invm (a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(typeof module === 'undefined' || module, this);
    
    },{"buffer":5}],4:[function(require,module,exports){
    (function (Buffer){(function (){
    "use strict";
    var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
        o["default"] = v;
    });
    var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __importStar = (this && this.__importStar) || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };
    var __importDefault = (this && this.__importDefault) || function (mod) {
        return (mod && mod.__esModule) ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.deserializeUnchecked = exports.deserialize = exports.serialize = exports.BinaryReader = exports.BinaryWriter = exports.BorshError = exports.baseDecode = exports.baseEncode = void 0;
    const bn_js_1 = __importDefault(require("bn.js"));
    const bs58_1 = __importDefault(require("bs58"));
    // TODO: Make sure this polyfill not included when not required
    const encoding = __importStar(require("text-encoding-utf-8"));
    const ResolvedTextDecoder = typeof TextDecoder !== "function" ? encoding.TextDecoder : TextDecoder;
    const textDecoder = new ResolvedTextDecoder("utf-8", { fatal: true });
    function baseEncode(value) {
        if (typeof value === "string") {
            value = Buffer.from(value, "utf8");
        }
        return bs58_1.default.encode(Buffer.from(value));
    }
    exports.baseEncode = baseEncode;
    function baseDecode(value) {
        return Buffer.from(bs58_1.default.decode(value));
    }
    exports.baseDecode = baseDecode;
    const INITIAL_LENGTH = 1024;
    class BorshError extends Error {
        constructor(message) {
            super(message);
            this.fieldPath = [];
            this.originalMessage = message;
        }
        addToFieldPath(fieldName) {
            this.fieldPath.splice(0, 0, fieldName);
            // NOTE: Modifying message directly as jest doesn't use .toString()
            this.message = this.originalMessage + ": " + this.fieldPath.join(".");
        }
    }
    exports.BorshError = BorshError;
    /// Binary encoder.
    class BinaryWriter {
        constructor() {
            this.buf = Buffer.alloc(INITIAL_LENGTH);
            this.length = 0;
        }
        maybeResize() {
            if (this.buf.length < 16 + this.length) {
                this.buf = Buffer.concat([this.buf, Buffer.alloc(INITIAL_LENGTH)]);
            }
        }
        writeU8(value) {
            this.maybeResize();
            this.buf.writeUInt8(value, this.length);
            this.length += 1;
        }
        writeU16(value) {
            this.maybeResize();
            this.buf.writeUInt16LE(value, this.length);
            this.length += 2;
        }
        writeU32(value) {
            this.maybeResize();
            this.buf.writeUInt32LE(value, this.length);
            this.length += 4;
        }
        writeU64(value) {
            this.maybeResize();
            this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray("le", 8)));
        }
        writeU128(value) {
            this.maybeResize();
            this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray("le", 16)));
        }
        writeU256(value) {
            this.maybeResize();
            this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray("le", 32)));
        }
        writeU512(value) {
            this.maybeResize();
            this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray("le", 64)));
        }
        writeBuffer(buffer) {
            // Buffer.from is needed as this.buf.subarray can return plain Uint8Array in browser
            this.buf = Buffer.concat([
                Buffer.from(this.buf.subarray(0, this.length)),
                buffer,
                Buffer.alloc(INITIAL_LENGTH),
            ]);
            this.length += buffer.length;
        }
        writeString(str) {
            this.maybeResize();
            const b = Buffer.from(str, "utf8");
            this.writeU32(b.length);
            this.writeBuffer(b);
        }
        writeFixedArray(array) {
            this.writeBuffer(Buffer.from(array));
        }
        writeArray(array, fn) {
            this.maybeResize();
            this.writeU32(array.length);
            for (const elem of array) {
                this.maybeResize();
                fn(elem);
            }
        }
        toArray() {
            return this.buf.subarray(0, this.length);
        }
    }
    exports.BinaryWriter = BinaryWriter;
    function handlingRangeError(target, propertyKey, propertyDescriptor) {
        const originalMethod = propertyDescriptor.value;
        propertyDescriptor.value = function (...args) {
            try {
                return originalMethod.apply(this, args);
            }
            catch (e) {
                if (e instanceof RangeError) {
                    const code = e.code;
                    if (["ERR_BUFFER_OUT_OF_BOUNDS", "ERR_OUT_OF_RANGE"].indexOf(code) >= 0) {
                        throw new BorshError("Reached the end of buffer when deserializing");
                    }
                }
                throw e;
            }
        };
    }
    class BinaryReader {
        constructor(buf) {
            this.buf = buf;
            this.offset = 0;
        }
        readU8() {
            const value = this.buf.readUInt8(this.offset);
            this.offset += 1;
            return value;
        }
        readU16() {
            const value = this.buf.readUInt16LE(this.offset);
            this.offset += 2;
            return value;
        }
        readU32() {
            const value = this.buf.readUInt32LE(this.offset);
            this.offset += 4;
            return value;
        }
        readU64() {
            const buf = this.readBuffer(8);
            return new bn_js_1.default(buf, "le");
        }
        readU128() {
            const buf = this.readBuffer(16);
            return new bn_js_1.default(buf, "le");
        }
        readU256() {
            const buf = this.readBuffer(32);
            return new bn_js_1.default(buf, "le");
        }
        readU512() {
            const buf = this.readBuffer(64);
            return new bn_js_1.default(buf, "le");
        }
        readBuffer(len) {
            if (this.offset + len > this.buf.length) {
                throw new BorshError(`Expected buffer length ${len} isn't within bounds`);
            }
            const result = this.buf.slice(this.offset, this.offset + len);
            this.offset += len;
            return result;
        }
        readString() {
            const len = this.readU32();
            const buf = this.readBuffer(len);
            try {
                // NOTE: Using TextDecoder to fail on invalid UTF-8
                return textDecoder.decode(buf);
            }
            catch (e) {
                throw new BorshError(`Error decoding UTF-8 string: ${e}`);
            }
        }
        readFixedArray(len) {
            return new Uint8Array(this.readBuffer(len));
        }
        readArray(fn) {
            const len = this.readU32();
            const result = Array();
            for (let i = 0; i < len; ++i) {
                result.push(fn());
            }
            return result;
        }
    }
    __decorate([
        handlingRangeError
    ], BinaryReader.prototype, "readU8", null);
    __decorate([
        handlingRangeError
    ], BinaryReader.prototype, "readU16", null);
    __decorate([
        handlingRangeError
    ], BinaryReader.prototype, "readU32", null);
    __decorate([
        handlingRangeError
    ], BinaryReader.prototype, "readU64", null);
    __decorate([
        handlingRangeError
    ], BinaryReader.prototype, "readU128", null);
    __decorate([
        handlingRangeError
    ], BinaryReader.prototype, "readU256", null);
    __decorate([
        handlingRangeError
    ], BinaryReader.prototype, "readU512", null);
    __decorate([
        handlingRangeError
    ], BinaryReader.prototype, "readString", null);
    __decorate([
        handlingRangeError
    ], BinaryReader.prototype, "readFixedArray", null);
    __decorate([
        handlingRangeError
    ], BinaryReader.prototype, "readArray", null);
    exports.BinaryReader = BinaryReader;
    function capitalizeFirstLetter(string) {
        return string.charAt(0).toUpperCase() + string.slice(1);
    }
    function serializeField(schema, fieldName, value, fieldType, writer) {
        try {
            // TODO: Handle missing values properly (make sure they never result in just skipped write)
            if (typeof fieldType === "string") {
                writer[`write${capitalizeFirstLetter(fieldType)}`](value);
            }
            else if (fieldType instanceof Array) {
                if (typeof fieldType[0] === "number") {
                    if (value.length !== fieldType[0]) {
                        throw new BorshError(`Expecting byte array of length ${fieldType[0]}, but got ${value.length} bytes`);
                    }
                    writer.writeFixedArray(value);
                }
                else if (fieldType.length === 2 && typeof fieldType[1] === "number") {
                    if (value.length !== fieldType[1]) {
                        throw new BorshError(`Expecting byte array of length ${fieldType[1]}, but got ${value.length} bytes`);
                    }
                    for (let i = 0; i < fieldType[1]; i++) {
                        serializeField(schema, null, value[i], fieldType[0], writer);
                    }
                }
                else {
                    writer.writeArray(value, (item) => {
                        serializeField(schema, fieldName, item, fieldType[0], writer);
                    });
                }
            }
            else if (fieldType.kind !== undefined) {
                switch (fieldType.kind) {
                    case "option": {
                        if (value === null || value === undefined) {
                            writer.writeU8(0);
                        }
                        else {
                            writer.writeU8(1);
                            serializeField(schema, fieldName, value, fieldType.type, writer);
                        }
                        break;
                    }
                    case "map": {
                        writer.writeU32(value.size);
                        value.forEach((val, key) => {
                            serializeField(schema, fieldName, key, fieldType.key, writer);
                            serializeField(schema, fieldName, val, fieldType.value, writer);
                        });
                        break;
                    }
                    default:
                        throw new BorshError(`FieldType ${fieldType} unrecognized`);
                }
            }
            else {
                serializeStruct(schema, value, writer);
            }
        }
        catch (error) {
            if (error instanceof BorshError) {
                error.addToFieldPath(fieldName);
            }
            throw error;
        }
    }
    function serializeStruct(schema, obj, writer) {
        if (typeof obj.borshSerialize === "function") {
            obj.borshSerialize(writer);
            return;
        }
        const structSchema = schema.get(obj.constructor);
        if (!structSchema) {
            throw new BorshError(`Class ${obj.constructor.name} is missing in schema`);
        }
        if (structSchema.kind === "struct") {
            structSchema.fields.map(([fieldName, fieldType]) => {
                serializeField(schema, fieldName, obj[fieldName], fieldType, writer);
            });
        }
        else if (structSchema.kind === "enum") {
            const name = obj[structSchema.field];
            for (let idx = 0; idx < structSchema.values.length; ++idx) {
                const [fieldName, fieldType] = structSchema.values[idx];
                if (fieldName === name) {
                    writer.writeU8(idx);
                    serializeField(schema, fieldName, obj[fieldName], fieldType, writer);
                    break;
                }
            }
        }
        else {
            throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${obj.constructor.name}`);
        }
    }
    /// Serialize given object using schema of the form:
    /// { class_name -> [ [field_name, field_type], .. ], .. }
    function serialize(schema, obj, Writer = BinaryWriter) {
        const writer = new Writer();
        serializeStruct(schema, obj, writer);
        return writer.toArray();
    }
    exports.serialize = serialize;
    function deserializeField(schema, fieldName, fieldType, reader) {
        try {
            if (typeof fieldType === "string") {
                return reader[`read${capitalizeFirstLetter(fieldType)}`]();
            }
            if (fieldType instanceof Array) {
                if (typeof fieldType[0] === "number") {
                    return reader.readFixedArray(fieldType[0]);
                }
                else if (typeof fieldType[1] === "number") {
                    const arr = [];
                    for (let i = 0; i < fieldType[1]; i++) {
                        arr.push(deserializeField(schema, null, fieldType[0], reader));
                    }
                    return arr;
                }
                else {
                    return reader.readArray(() => deserializeField(schema, fieldName, fieldType[0], reader));
                }
            }
            if (fieldType.kind === "option") {
                const option = reader.readU8();
                if (option) {
                    return deserializeField(schema, fieldName, fieldType.type, reader);
                }
                return undefined;
            }
            if (fieldType.kind === "map") {
                let map = new Map();
                const length = reader.readU32();
                for (let i = 0; i < length; i++) {
                    const key = deserializeField(schema, fieldName, fieldType.key, reader);
                    const val = deserializeField(schema, fieldName, fieldType.value, reader);
                    map.set(key, val);
                }
                return map;
            }
            return deserializeStruct(schema, fieldType, reader);
        }
        catch (error) {
            if (error instanceof BorshError) {
                error.addToFieldPath(fieldName);
            }
            throw error;
        }
    }
    function deserializeStruct(schema, classType, reader) {
        if (typeof classType.borshDeserialize === "function") {
            return classType.borshDeserialize(reader);
        }
        const structSchema = schema.get(classType);
        if (!structSchema) {
            throw new BorshError(`Class ${classType.name} is missing in schema`);
        }
        if (structSchema.kind === "struct") {
            const result = {};
            for (const [fieldName, fieldType] of schema.get(classType).fields) {
                result[fieldName] = deserializeField(schema, fieldName, fieldType, reader);
            }
            return new classType(result);
        }
        if (structSchema.kind === "enum") {
            const idx = reader.readU8();
            if (idx >= structSchema.values.length) {
                throw new BorshError(`Enum index: ${idx} is out of range`);
            }
            const [fieldName, fieldType] = structSchema.values[idx];
            const fieldValue = deserializeField(schema, fieldName, fieldType, reader);
            return new classType({ [fieldName]: fieldValue });
        }
        throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${classType.constructor.name}`);
    }
    /// Deserializes object from bytes using schema.
    function deserialize(schema, classType, buffer, Reader = BinaryReader) {
        const reader = new Reader(buffer);
        const result = deserializeStruct(schema, classType, reader);
        if (reader.offset < buffer.length) {
            throw new BorshError(`Unexpected ${buffer.length - reader.offset} bytes after deserialized data`);
        }
        return result;
    }
    exports.deserialize = deserialize;
    /// Deserializes object from bytes using schema, without checking the length read
    function deserializeUnchecked(schema, classType, buffer, Reader = BinaryReader) {
        const reader = new Reader(buffer);
        return deserializeStruct(schema, classType, reader);
    }
    exports.deserializeUnchecked = deserializeUnchecked;
    
    }).call(this)}).call(this,require("buffer").Buffer)
    },{"bn.js":3,"bs58":6,"buffer":7,"text-encoding-utf-8":38}],5:[function(require,module,exports){
    
    },{}],6:[function(require,module,exports){
    var basex = require('base-x')
    var ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'
    
    module.exports = basex(ALPHABET)
    
    },{"base-x":1}],7:[function(require,module,exports){
    (function (Buffer){(function (){
    /*!
     * The buffer module from node.js, for the browser.
     *
     * @author   Feross Aboukhadijeh <https://feross.org>
     * @license  MIT
     */
    /* eslint-disable no-proto */
    
    'use strict'
    
    var base64 = require('base64-js')
    var ieee754 = require('ieee754')
    
    exports.Buffer = Buffer
    exports.SlowBuffer = SlowBuffer
    exports.INSPECT_MAX_BYTES = 50
    
    var K_MAX_LENGTH = 0x7fffffff
    exports.kMaxLength = K_MAX_LENGTH
    
    /**
     * If `Buffer.TYPED_ARRAY_SUPPORT`:
     *   === true    Use Uint8Array implementation (fastest)
     *   === false   Print warning and recommend using `buffer` v4.x which has an Object
     *               implementation (most compatible, even IE6)
     *
     * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
     * Opera 11.6+, iOS 4.2+.
     *
     * We report that the browser does not support typed arrays if the are not subclassable
     * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
     * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
     * for __proto__ and has a buggy typed array implementation.
     */
    Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()
    
    if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
        typeof console.error === 'function') {
      console.error(
        'This browser lacks typed array (Uint8Array) support which is required by ' +
        '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
      )
    }
    
    function typedArraySupport () {
      // Can typed array instances can be augmented?
      try {
        var arr = new Uint8Array(1)
        arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function () { return 42 } }
        return arr.foo() === 42
      } catch (e) {
        return false
      }
    }
    
    Object.defineProperty(Buffer.prototype, 'parent', {
      enumerable: true,
      get: function () {
        if (!Buffer.isBuffer(this)) return undefined
        return this.buffer
      }
    })
    
    Object.defineProperty(Buffer.prototype, 'offset', {
      enumerable: true,
      get: function () {
        if (!Buffer.isBuffer(this)) return undefined
        return this.byteOffset
      }
    })
    
    function createBuffer (length) {
      if (length > K_MAX_LENGTH) {
        throw new RangeError('The value "' + length + '" is invalid for option "size"')
      }
      // Return an augmented `Uint8Array` instance
      var buf = new Uint8Array(length)
      buf.__proto__ = Buffer.prototype
      return buf
    }
    
    /**
     * The Buffer constructor returns instances of `Uint8Array` that have their
     * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
     * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
     * and the `Uint8Array` methods. Square bracket notation works as expected -- it
     * returns a single octet.
     *
     * The `Uint8Array` prototype remains unmodified.
     */
    
    function Buffer (arg, encodingOrOffset, length) {
      // Common case.
      if (typeof arg === 'number') {
        if (typeof encodingOrOffset === 'string') {
          throw new TypeError(
            'The "string" argument must be of type string. Received type number'
          )
        }
        return allocUnsafe(arg)
      }
      return from(arg, encodingOrOffset, length)
    }
    
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    if (typeof Symbol !== 'undefined' && Symbol.species != null &&
        Buffer[Symbol.species] === Buffer) {
      Object.defineProperty(Buffer, Symbol.species, {
        value: null,
        configurable: true,
        enumerable: false,
        writable: false
      })
    }
    
    Buffer.poolSize = 8192 // not used by this implementation
    
    function from (value, encodingOrOffset, length) {
      if (typeof value === 'string') {
        return fromString(value, encodingOrOffset)
      }
    
      if (ArrayBuffer.isView(value)) {
        return fromArrayLike(value)
      }
    
      if (value == null) {
        throw TypeError(
          'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
          'or Array-like Object. Received type ' + (typeof value)
        )
      }
    
      if (isInstance(value, ArrayBuffer) ||
          (value && isInstance(value.buffer, ArrayBuffer))) {
        return fromArrayBuffer(value, encodingOrOffset, length)
      }
    
      if (typeof value === 'number') {
        throw new TypeError(
          'The "value" argument must not be of type number. Received type number'
        )
      }
    
      var valueOf = value.valueOf && value.valueOf()
      if (valueOf != null && valueOf !== value) {
        return Buffer.from(valueOf, encodingOrOffset, length)
      }
    
      var b = fromObject(value)
      if (b) return b
    
      if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
          typeof value[Symbol.toPrimitive] === 'function') {
        return Buffer.from(
          value[Symbol.toPrimitive]('string'), encodingOrOffset, length
        )
      }
    
      throw new TypeError(
        'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
        'or Array-like Object. Received type ' + (typeof value)
      )
    }
    
    /**
     * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
     * if value is a number.
     * Buffer.from(str[, encoding])
     * Buffer.from(array)
     * Buffer.from(buffer)
     * Buffer.from(arrayBuffer[, byteOffset[, length]])
     **/
    Buffer.from = function (value, encodingOrOffset, length) {
      return from(value, encodingOrOffset, length)
    }
    
    // Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
    // https://github.com/feross/buffer/pull/148
    Buffer.prototype.__proto__ = Uint8Array.prototype
    Buffer.__proto__ = Uint8Array
    
    function assertSize (size) {
      if (typeof size !== 'number') {
        throw new TypeError('"size" argument must be of type number')
      } else if (size < 0) {
        throw new RangeError('The value "' + size + '" is invalid for option "size"')
      }
    }
    
    function alloc (size, fill, encoding) {
      assertSize(size)
      if (size <= 0) {
        return createBuffer(size)
      }
      if (fill !== undefined) {
        // Only pay attention to encoding if it's a string. This
        // prevents accidentally sending in a number that would
        // be interpretted as a start offset.
        return typeof encoding === 'string'
          ? createBuffer(size).fill(fill, encoding)
          : createBuffer(size).fill(fill)
      }
      return createBuffer(size)
    }
    
    /**
     * Creates a new filled Buffer instance.
     * alloc(size[, fill[, encoding]])
     **/
    Buffer.alloc = function (size, fill, encoding) {
      return alloc(size, fill, encoding)
    }
    
    function allocUnsafe (size) {
      assertSize(size)
      return createBuffer(size < 0 ? 0 : checked(size) | 0)
    }
    
    /**
     * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
     * */
    Buffer.allocUnsafe = function (size) {
      return allocUnsafe(size)
    }
    /**
     * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
     */
    Buffer.allocUnsafeSlow = function (size) {
      return allocUnsafe(size)
    }
    
    function fromString (string, encoding) {
      if (typeof encoding !== 'string' || encoding === '') {
        encoding = 'utf8'
      }
    
      if (!Buffer.isEncoding(encoding)) {
        throw new TypeError('Unknown encoding: ' + encoding)
      }
    
      var length = byteLength(string, encoding) | 0
      var buf = createBuffer(length)
    
      var actual = buf.write(string, encoding)
    
      if (actual !== length) {
        // Writing a hex string, for example, that contains invalid characters will
        // cause everything after the first invalid character to be ignored. (e.g.
        // 'abxxcd' will be treated as 'ab')
        buf = buf.slice(0, actual)
      }
    
      return buf
    }
    
    function fromArrayLike (array) {
      var length = array.length < 0 ? 0 : checked(array.length) | 0
      var buf = createBuffer(length)
      for (var i = 0; i < length; i += 1) {
        buf[i] = array[i] & 255
      }
      return buf
    }
    
    function fromArrayBuffer (array, byteOffset, length) {
      if (byteOffset < 0 || array.byteLength < byteOffset) {
        throw new RangeError('"offset" is outside of buffer bounds')
      }
    
      if (array.byteLength < byteOffset + (length || 0)) {
        throw new RangeError('"length" is outside of buffer bounds')
      }
    
      var buf
      if (byteOffset === undefined && length === undefined) {
        buf = new Uint8Array(array)
      } else if (length === undefined) {
        buf = new Uint8Array(array, byteOffset)
      } else {
        buf = new Uint8Array(array, byteOffset, length)
      }
    
      // Return an augmented `Uint8Array` instance
      buf.__proto__ = Buffer.prototype
      return buf
    }
    
    function fromObject (obj) {
      if (Buffer.isBuffer(obj)) {
        var len = checked(obj.length) | 0
        var buf = createBuffer(len)
    
        if (buf.length === 0) {
          return buf
        }
    
        obj.copy(buf, 0, 0, len)
        return buf
      }
    
      if (obj.length !== undefined) {
        if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
          return createBuffer(0)
        }
        return fromArrayLike(obj)
      }
    
      if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
        return fromArrayLike(obj.data)
      }
    }
    
    function checked (length) {
      // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
      // length is NaN (which is otherwise coerced to zero.)
      if (length >= K_MAX_LENGTH) {
        throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                             'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
      }
      return length | 0
    }
    
    function SlowBuffer (length) {
      if (+length != length) { // eslint-disable-line eqeqeq
        length = 0
      }
      return Buffer.alloc(+length)
    }
    
    Buffer.isBuffer = function isBuffer (b) {
      return b != null && b._isBuffer === true &&
        b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
    }
    
    Buffer.compare = function compare (a, b) {
      if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)
      if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)
      if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
        throw new TypeError(
          'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
        )
      }
    
      if (a === b) return 0
    
      var x = a.length
      var y = b.length
    
      for (var i = 0, len = Math.min(x, y); i < len; ++i) {
        if (a[i] !== b[i]) {
          x = a[i]
          y = b[i]
          break
        }
      }
    
      if (x < y) return -1
      if (y < x) return 1
      return 0
    }
    
    Buffer.isEncoding = function isEncoding (encoding) {
      switch (String(encoding).toLowerCase()) {
        case 'hex':
        case 'utf8':
        case 'utf-8':
        case 'ascii':
        case 'latin1':
        case 'binary':
        case 'base64':
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return true
        default:
          return false
      }
    }
    
    Buffer.concat = function concat (list, length) {
      if (!Array.isArray(list)) {
        throw new TypeError('"list" argument must be an Array of Buffers')
      }
    
      if (list.length === 0) {
        return Buffer.alloc(0)
      }
    
      var i
      if (length === undefined) {
        length = 0
        for (i = 0; i < list.length; ++i) {
          length += list[i].length
        }
      }
    
      var buffer = Buffer.allocUnsafe(length)
      var pos = 0
      for (i = 0; i < list.length; ++i) {
        var buf = list[i]
        if (isInstance(buf, Uint8Array)) {
          buf = Buffer.from(buf)
        }
        if (!Buffer.isBuffer(buf)) {
          throw new TypeError('"list" argument must be an Array of Buffers')
        }
        buf.copy(buffer, pos)
        pos += buf.length
      }
      return buffer
    }
    
    function byteLength (string, encoding) {
      if (Buffer.isBuffer(string)) {
        return string.length
      }
      if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
        return string.byteLength
      }
      if (typeof string !== 'string') {
        throw new TypeError(
          'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
          'Received type ' + typeof string
        )
      }
    
      var len = string.length
      var mustMatch = (arguments.length > 2 && arguments[2] === true)
      if (!mustMatch && len === 0) return 0
    
      // Use a for loop to avoid recursion
      var loweredCase = false
      for (;;) {
        switch (encoding) {
          case 'ascii':
          case 'latin1':
          case 'binary':
            return len
          case 'utf8':
          case 'utf-8':
            return utf8ToBytes(string).length
          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return len * 2
          case 'hex':
            return len >>> 1
          case 'base64':
            return base64ToBytes(string).length
          default:
            if (loweredCase) {
              return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
            }
            encoding = ('' + encoding).toLowerCase()
            loweredCase = true
        }
      }
    }
    Buffer.byteLength = byteLength
    
    function slowToString (encoding, start, end) {
      var loweredCase = false
    
      // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
      // property of a typed array.
    
      // This behaves neither like String nor Uint8Array in that we set start/end
      // to their upper/lower bounds if the value passed is out of range.
      // undefined is handled specially as per ECMA-262 6th Edition,
      // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
      if (start === undefined || start < 0) {
        start = 0
      }
      // Return early if start > this.length. Done here to prevent potential uint32
      // coercion fail below.
      if (start > this.length) {
        return ''
      }
    
      if (end === undefined || end > this.length) {
        end = this.length
      }
    
      if (end <= 0) {
        return ''
      }
    
      // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
      end >>>= 0
      start >>>= 0
    
      if (end <= start) {
        return ''
      }
    
      if (!encoding) encoding = 'utf8'
    
      while (true) {
        switch (encoding) {
          case 'hex':
            return hexSlice(this, start, end)
    
          case 'utf8':
          case 'utf-8':
            return utf8Slice(this, start, end)
    
          case 'ascii':
            return asciiSlice(this, start, end)
    
          case 'latin1':
          case 'binary':
            return latin1Slice(this, start, end)
    
          case 'base64':
            return base64Slice(this, start, end)
    
          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return utf16leSlice(this, start, end)
    
          default:
            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
            encoding = (encoding + '').toLowerCase()
            loweredCase = true
        }
      }
    }
    
    // This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
    // to detect a Buffer instance. It's not possible to use `instanceof Buffer`
    // reliably in a browserify context because there could be multiple different
    // copies of the 'buffer' package in use. This method works even for Buffer
    // instances that were created from another copy of the `buffer` package.
    // See: https://github.com/feross/buffer/issues/154
    Buffer.prototype._isBuffer = true
    
    function swap (b, n, m) {
      var i = b[n]
      b[n] = b[m]
      b[m] = i
    }
    
    Buffer.prototype.swap16 = function swap16 () {
      var len = this.length
      if (len % 2 !== 0) {
        throw new RangeError('Buffer size must be a multiple of 16-bits')
      }
      for (var i = 0; i < len; i += 2) {
        swap(this, i, i + 1)
      }
      return this
    }
    
    Buffer.prototype.swap32 = function swap32 () {
      var len = this.length
      if (len % 4 !== 0) {
        throw new RangeError('Buffer size must be a multiple of 32-bits')
      }
      for (var i = 0; i < len; i += 4) {
        swap(this, i, i + 3)
        swap(this, i + 1, i + 2)
      }
      return this
    }
    
    Buffer.prototype.swap64 = function swap64 () {
      var len = this.length
      if (len % 8 !== 0) {
        throw new RangeError('Buffer size must be a multiple of 64-bits')
      }
      for (var i = 0; i < len; i += 8) {
        swap(this, i, i + 7)
        swap(this, i + 1, i + 6)
        swap(this, i + 2, i + 5)
        swap(this, i + 3, i + 4)
      }
      return this
    }
    
    Buffer.prototype.toString = function toString () {
      var length = this.length
      if (length === 0) return ''
      if (arguments.length === 0) return utf8Slice(this, 0, length)
      return slowToString.apply(this, arguments)
    }
    
    Buffer.prototype.toLocaleString = Buffer.prototype.toString
    
    Buffer.prototype.equals = function equals (b) {
      if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
      if (this === b) return true
      return Buffer.compare(this, b) === 0
    }
    
    Buffer.prototype.inspect = function inspect () {
      var str = ''
      var max = exports.INSPECT_MAX_BYTES
      str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()
      if (this.length > max) str += ' ... '
      return '<Buffer ' + str + '>'
    }
    
    Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
      if (isInstance(target, Uint8Array)) {
        target = Buffer.from(target, target.offset, target.byteLength)
      }
      if (!Buffer.isBuffer(target)) {
        throw new TypeError(
          'The "target" argument must be one of type Buffer or Uint8Array. ' +
          'Received type ' + (typeof target)
        )
      }
    
      if (start === undefined) {
        start = 0
      }
      if (end === undefined) {
        end = target ? target.length : 0
      }
      if (thisStart === undefined) {
        thisStart = 0
      }
      if (thisEnd === undefined) {
        thisEnd = this.length
      }
    
      if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
        throw new RangeError('out of range index')
      }
    
      if (thisStart >= thisEnd && start >= end) {
        return 0
      }
      if (thisStart >= thisEnd) {
        return -1
      }
      if (start >= end) {
        return 1
      }
    
      start >>>= 0
      end >>>= 0
      thisStart >>>= 0
      thisEnd >>>= 0
    
      if (this === target) return 0
    
      var x = thisEnd - thisStart
      var y = end - start
      var len = Math.min(x, y)
    
      var thisCopy = this.slice(thisStart, thisEnd)
      var targetCopy = target.slice(start, end)
    
      for (var i = 0; i < len; ++i) {
        if (thisCopy[i] !== targetCopy[i]) {
          x = thisCopy[i]
          y = targetCopy[i]
          break
        }
      }
    
      if (x < y) return -1
      if (y < x) return 1
      return 0
    }
    
    // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
    // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
    //
    // Arguments:
    // - buffer - a Buffer to search
    // - val - a string, Buffer, or number
    // - byteOffset - an index into `buffer`; will be clamped to an int32
    // - encoding - an optional encoding, relevant is val is a string
    // - dir - true for indexOf, false for lastIndexOf
    function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
      // Empty buffer means no match
      if (buffer.length === 0) return -1
    
      // Normalize byteOffset
      if (typeof byteOffset === 'string') {
        encoding = byteOffset
        byteOffset = 0
      } else if (byteOffset > 0x7fffffff) {
        byteOffset = 0x7fffffff
      } else if (byteOffset < -0x80000000) {
        byteOffset = -0x80000000
      }
      byteOffset = +byteOffset // Coerce to Number.
      if (numberIsNaN(byteOffset)) {
        // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
        byteOffset = dir ? 0 : (buffer.length - 1)
      }
    
      // Normalize byteOffset: negative offsets start from the end of the buffer
      if (byteOffset < 0) byteOffset = buffer.length + byteOffset
      if (byteOffset >= buffer.length) {
        if (dir) return -1
        else byteOffset = buffer.length - 1
      } else if (byteOffset < 0) {
        if (dir) byteOffset = 0
        else return -1
      }
    
      // Normalize val
      if (typeof val === 'string') {
        val = Buffer.from(val, encoding)
      }
    
      // Finally, search either indexOf (if dir is true) or lastIndexOf
      if (Buffer.isBuffer(val)) {
        // Special case: looking for empty string/buffer always fails
        if (val.length === 0) {
          return -1
        }
        return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
      } else if (typeof val === 'number') {
        val = val & 0xFF // Search for a byte value [0-255]
        if (typeof Uint8Array.prototype.indexOf === 'function') {
          if (dir) {
            return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
          } else {
            return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
          }
        }
        return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
      }
    
      throw new TypeError('val must be string, number or Buffer')
    }
    
    function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
      var indexSize = 1
      var arrLength = arr.length
      var valLength = val.length
    
      if (encoding !== undefined) {
        encoding = String(encoding).toLowerCase()
        if (encoding === 'ucs2' || encoding === 'ucs-2' ||
            encoding === 'utf16le' || encoding === 'utf-16le') {
          if (arr.length < 2 || val.length < 2) {
            return -1
          }
          indexSize = 2
          arrLength /= 2
          valLength /= 2
          byteOffset /= 2
        }
      }
    
      function read (buf, i) {
        if (indexSize === 1) {
          return buf[i]
        } else {
          return buf.readUInt16BE(i * indexSize)
        }
      }
    
      var i
      if (dir) {
        var foundIndex = -1
        for (i = byteOffset; i < arrLength; i++) {
          if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
            if (foundIndex === -1) foundIndex = i
            if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
          } else {
            if (foundIndex !== -1) i -= i - foundIndex
            foundIndex = -1
          }
        }
      } else {
        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
        for (i = byteOffset; i >= 0; i--) {
          var found = true
          for (var j = 0; j < valLength; j++) {
            if (read(arr, i + j) !== read(val, j)) {
              found = false
              break
            }
          }
          if (found) return i
        }
      }
    
      return -1
    }
    
    Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
      return this.indexOf(val, byteOffset, encoding) !== -1
    }
    
    Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
    }
    
    Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
    }
    
    function hexWrite (buf, string, offset, length) {
      offset = Number(offset) || 0
      var remaining = buf.length - offset
      if (!length) {
        length = remaining
      } else {
        length = Number(length)
        if (length > remaining) {
          length = remaining
        }
      }
    
      var strLen = string.length
    
      if (length > strLen / 2) {
        length = strLen / 2
      }
      for (var i = 0; i < length; ++i) {
        var parsed = parseInt(string.substr(i * 2, 2), 16)
        if (numberIsNaN(parsed)) return i
        buf[offset + i] = parsed
      }
      return i
    }
    
    function utf8Write (buf, string, offset, length) {
      return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
    }
    
    function asciiWrite (buf, string, offset, length) {
      return blitBuffer(asciiToBytes(string), buf, offset, length)
    }
    
    function latin1Write (buf, string, offset, length) {
      return asciiWrite(buf, string, offset, length)
    }
    
    function base64Write (buf, string, offset, length) {
      return blitBuffer(base64ToBytes(string), buf, offset, length)
    }
    
    function ucs2Write (buf, string, offset, length) {
      return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
    }
    
    Buffer.prototype.write = function write (string, offset, length, encoding) {
      // Buffer#write(string)
      if (offset === undefined) {
        encoding = 'utf8'
        length = this.length
        offset = 0
      // Buffer#write(string, encoding)
      } else if (length === undefined && typeof offset === 'string') {
        encoding = offset
        length = this.length
        offset = 0
      // Buffer#write(string, offset[, length][, encoding])
      } else if (isFinite(offset)) {
        offset = offset >>> 0
        if (isFinite(length)) {
          length = length >>> 0
          if (encoding === undefined) encoding = 'utf8'
        } else {
          encoding = length
          length = undefined
        }
      } else {
        throw new Error(
          'Buffer.write(string, encoding, offset[, length]) is no longer supported'
        )
      }
    
      var remaining = this.length - offset
      if (length === undefined || length > remaining) length = remaining
    
      if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
        throw new RangeError('Attempt to write outside buffer bounds')
      }
    
      if (!encoding) encoding = 'utf8'
    
      var loweredCase = false
      for (;;) {
        switch (encoding) {
          case 'hex':
            return hexWrite(this, string, offset, length)
    
          case 'utf8':
          case 'utf-8':
            return utf8Write(this, string, offset, length)
    
          case 'ascii':
            return asciiWrite(this, string, offset, length)
    
          case 'latin1':
          case 'binary':
            return latin1Write(this, string, offset, length)
    
          case 'base64':
            // Warning: maxLength not taken into account in base64Write
            return base64Write(this, string, offset, length)
    
          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return ucs2Write(this, string, offset, length)
    
          default:
            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
            encoding = ('' + encoding).toLowerCase()
            loweredCase = true
        }
      }
    }
    
    Buffer.prototype.toJSON = function toJSON () {
      return {
        type: 'Buffer',
        data: Array.prototype.slice.call(this._arr || this, 0)
      }
    }
    
    function base64Slice (buf, start, end) {
      if (start === 0 && end === buf.length) {
        return base64.fromByteArray(buf)
      } else {
        return base64.fromByteArray(buf.slice(start, end))
      }
    }
    
    function utf8Slice (buf, start, end) {
      end = Math.min(buf.length, end)
      var res = []
    
      var i = start
      while (i < end) {
        var firstByte = buf[i]
        var codePoint = null
        var bytesPerSequence = (firstByte > 0xEF) ? 4
          : (firstByte > 0xDF) ? 3
            : (firstByte > 0xBF) ? 2
              : 1
    
        if (i + bytesPerSequence <= end) {
          var secondByte, thirdByte, fourthByte, tempCodePoint
    
          switch (bytesPerSequence) {
            case 1:
              if (firstByte < 0x80) {
                codePoint = firstByte
              }
              break
            case 2:
              secondByte = buf[i + 1]
              if ((secondByte & 0xC0) === 0x80) {
                tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
                if (tempCodePoint > 0x7F) {
                  codePoint = tempCodePoint
                }
              }
              break
            case 3:
              secondByte = buf[i + 1]
              thirdByte = buf[i + 2]
              if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
                if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                  codePoint = tempCodePoint
                }
              }
              break
            case 4:
              secondByte = buf[i + 1]
              thirdByte = buf[i + 2]
              fourthByte = buf[i + 3]
              if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
                if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                  codePoint = tempCodePoint
                }
              }
          }
        }
    
        if (codePoint === null) {
          // we did not generate a valid codePoint so insert a
          // replacement char (U+FFFD) and advance only 1 byte
          codePoint = 0xFFFD
          bytesPerSequence = 1
        } else if (codePoint > 0xFFFF) {
          // encode to utf16 (surrogate pair dance)
          codePoint -= 0x10000
          res.push(codePoint >>> 10 & 0x3FF | 0xD800)
          codePoint = 0xDC00 | codePoint & 0x3FF
        }
    
        res.push(codePoint)
        i += bytesPerSequence
      }
    
      return decodeCodePointsArray(res)
    }
    
    // Based on http://stackoverflow.com/a/22747272/680742, the browser with
    // the lowest limit is Chrome, with 0x10000 args.
    // We go 1 magnitude less, for safety
    var MAX_ARGUMENTS_LENGTH = 0x1000
    
    function decodeCodePointsArray (codePoints) {
      var len = codePoints.length
      if (len <= MAX_ARGUMENTS_LENGTH) {
        return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
      }
    
      // Decode in chunks to avoid "call stack size exceeded".
      var res = ''
      var i = 0
      while (i < len) {
        res += String.fromCharCode.apply(
          String,
          codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
        )
      }
      return res
    }
    
    function asciiSlice (buf, start, end) {
      var ret = ''
      end = Math.min(buf.length, end)
    
      for (var i = start; i < end; ++i) {
        ret += String.fromCharCode(buf[i] & 0x7F)
      }
      return ret
    }
    
    function latin1Slice (buf, start, end) {
      var ret = ''
      end = Math.min(buf.length, end)
    
      for (var i = start; i < end; ++i) {
        ret += String.fromCharCode(buf[i])
      }
      return ret
    }
    
    function hexSlice (buf, start, end) {
      var len = buf.length
    
      if (!start || start < 0) start = 0
      if (!end || end < 0 || end > len) end = len
    
      var out = ''
      for (var i = start; i < end; ++i) {
        out += toHex(buf[i])
      }
      return out
    }
    
    function utf16leSlice (buf, start, end) {
      var bytes = buf.slice(start, end)
      var res = ''
      for (var i = 0; i < bytes.length; i += 2) {
        res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
      }
      return res
    }
    
    Buffer.prototype.slice = function slice (start, end) {
      var len = this.length
      start = ~~start
      end = end === undefined ? len : ~~end
    
      if (start < 0) {
        start += len
        if (start < 0) start = 0
      } else if (start > len) {
        start = len
      }
    
      if (end < 0) {
        end += len
        if (end < 0) end = 0
      } else if (end > len) {
        end = len
      }
    
      if (end < start) end = start
    
      var newBuf = this.subarray(start, end)
      // Return an augmented `Uint8Array` instance
      newBuf.__proto__ = Buffer.prototype
      return newBuf
    }
    
    /*
     * Need to make sure that buffer isn't trying to write out of bounds.
     */
    function checkOffset (offset, ext, length) {
      if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
      if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
    }
    
    Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
      offset = offset >>> 0
      byteLength = byteLength >>> 0
      if (!noAssert) checkOffset(offset, byteLength, this.length)
    
      var val = this[offset]
      var mul = 1
      var i = 0
      while (++i < byteLength && (mul *= 0x100)) {
        val += this[offset + i] * mul
      }
    
      return val
    }
    
    Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
      offset = offset >>> 0
      byteLength = byteLength >>> 0
      if (!noAssert) {
        checkOffset(offset, byteLength, this.length)
      }
    
      var val = this[offset + --byteLength]
      var mul = 1
      while (byteLength > 0 && (mul *= 0x100)) {
        val += this[offset + --byteLength] * mul
      }
    
      return val
    }
    
    Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
      offset = offset >>> 0
      if (!noAssert) checkOffset(offset, 1, this.length)
      return this[offset]
    }
    
    Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
      offset = offset >>> 0
      if (!noAssert) checkOffset(offset, 2, this.length)
      return this[offset] | (this[offset + 1] << 8)
    }
    
    Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
      offset = offset >>> 0
      if (!noAssert) checkOffset(offset, 2, this.length)
      return (this[offset] << 8) | this[offset + 1]
    }
    
    Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
      offset = offset >>> 0
      if (!noAssert) checkOffset(offset, 4, this.length)
    
      return ((this[offset]) |
          (this[offset + 1] << 8) |
          (this[offset + 2] << 16)) +
          (this[offset + 3] * 0x1000000)
    }
    
    Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
      offset = offset >>> 0
      if (!noAssert) checkOffset(offset, 4, this.length)
    
      return (this[offset] * 0x1000000) +
        ((this[offset + 1] << 16) |
        (this[offset + 2] << 8) |
        this[offset + 3])
    }
    
    Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
      offset = offset >>> 0
      byteLength = byteLength >>> 0
      if (!noAssert) checkOffset(offset, byteLength, this.length)
    
      var val = this[offset]
      var mul = 1
      var i = 0
      while (++i < byteLength && (mul *= 0x100)) {
        val += this[offset + i] * mul
      }
      mul *= 0x80
    
      if (val >= mul) val -= Math.pow(2, 8 * byteLength)
    
      return val
    }
    
    Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
      offset = offset >>> 0
      byteLength = byteLength >>> 0
      if (!noAssert) checkOffset(offset, byteLength, this.length)
    
      var i = byteLength
      var mul = 1
      var val = this[offset + --i]
      while (i > 0 && (mul *= 0x100)) {
        val += this[offset + --i] * mul
      }
      mul *= 0x80
    
      if (val >= mul) val -= Math.pow(2, 8 * byteLength)
    
      return val
    }
    
    Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
      offset = offset >>> 0
      if (!noAssert) checkOffset(offset, 1, this.length)
      if (!(this[offset] & 0x80)) return (this[offset])
      return ((0xff - this[offset] + 1) * -1)
    }
    
    Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
      offset = offset >>> 0
      if (!noAssert) checkOffset(offset, 2, this.length)
      var val = this[offset] | (this[offset + 1] << 8)
      return (val & 0x8000) ? val | 0xFFFF0000 : val
    }
    
    Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
      offset = offset >>> 0
      if (!noAssert) checkOffset(offset, 2, this.length)
      var val = this[offset + 1] | (this[offset] << 8)
      return (val & 0x8000) ? val | 0xFFFF0000 : val
    }
    
    Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
      offset = offset >>> 0
      if (!noAssert) checkOffset(offset, 4, this.length)
    
      return (this[offset]) |
        (this[offset + 1] << 8) |
        (this[offset + 2] << 16) |
        (this[offset + 3] << 24)
    }
    
    Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
      offset = offset >>> 0
      if (!noAssert) checkOffset(offset, 4, this.length)
    
      return (this[offset] << 24) |
        (this[offset + 1] << 16) |
        (this[offset + 2] << 8) |
        (this[offset + 3])
    }
    
    Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
      offset = offset >>> 0
      if (!noAssert) checkOffset(offset, 4, this.length)
      return ieee754.read(this, offset, true, 23, 4)
    }
    
    Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
      offset = offset >>> 0
      if (!noAssert) checkOffset(offset, 4, this.length)
      return ieee754.read(this, offset, false, 23, 4)
    }
    
    Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
      offset = offset >>> 0
      if (!noAssert) checkOffset(offset, 8, this.length)
      return ieee754.read(this, offset, true, 52, 8)
    }
    
    Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
      offset = offset >>> 0
      if (!noAssert) checkOffset(offset, 8, this.length)
      return ieee754.read(this, offset, false, 52, 8)
    }
    
    function checkInt (buf, value, offset, ext, max, min) {
      if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
      if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
      if (offset + ext > buf.length) throw new RangeError('Index out of range')
    }
    
    Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
      value = +value
      offset = offset >>> 0
      byteLength = byteLength >>> 0
      if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1
        checkInt(this, value, offset, byteLength, maxBytes, 0)
      }
    
      var mul = 1
      var i = 0
      this[offset] = value & 0xFF
      while (++i < byteLength && (mul *= 0x100)) {
        this[offset + i] = (value / mul) & 0xFF
      }
    
      return offset + byteLength
    }
    
    Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
      value = +value
      offset = offset >>> 0
      byteLength = byteLength >>> 0
      if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1
        checkInt(this, value, offset, byteLength, maxBytes, 0)
      }
    
      var i = byteLength - 1
      var mul = 1
      this[offset + i] = value & 0xFF
      while (--i >= 0 && (mul *= 0x100)) {
        this[offset + i] = (value / mul) & 0xFF
      }
    
      return offset + byteLength
    }
    
    Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
      value = +value
      offset = offset >>> 0
      if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
      this[offset] = (value & 0xff)
      return offset + 1
    }
    
    Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
      value = +value
      offset = offset >>> 0
      if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
      this[offset] = (value & 0xff)
      this[offset + 1] = (value >>> 8)
      return offset + 2
    }
    
    Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
      value = +value
      offset = offset >>> 0
      if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
      this[offset] = (value >>> 8)
      this[offset + 1] = (value & 0xff)
      return offset + 2
    }
    
    Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
      value = +value
      offset = offset >>> 0
      if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
      this[offset + 3] = (value >>> 24)
      this[offset + 2] = (value >>> 16)
      this[offset + 1] = (value >>> 8)
      this[offset] = (value & 0xff)
      return offset + 4
    }
    
    Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
      value = +value
      offset = offset >>> 0
      if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
      this[offset] = (value >>> 24)
      this[offset + 1] = (value >>> 16)
      this[offset + 2] = (value >>> 8)
      this[offset + 3] = (value & 0xff)
      return offset + 4
    }
    
    Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
      value = +value
      offset = offset >>> 0
      if (!noAssert) {
        var limit = Math.pow(2, (8 * byteLength) - 1)
    
        checkInt(this, value, offset, byteLength, limit - 1, -limit)
      }
    
      var i = 0
      var mul = 1
      var sub = 0
      this[offset] = value & 0xFF
      while (++i < byteLength && (mul *= 0x100)) {
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
          sub = 1
        }
        this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
      }
    
      return offset + byteLength
    }
    
    Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
      value = +value
      offset = offset >>> 0
      if (!noAssert) {
        var limit = Math.pow(2, (8 * byteLength) - 1)
    
        checkInt(this, value, offset, byteLength, limit - 1, -limit)
      }
    
      var i = byteLength - 1
      var mul = 1
      var sub = 0
      this[offset + i] = value & 0xFF
      while (--i >= 0 && (mul *= 0x100)) {
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
          sub = 1
        }
        this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
      }
    
      return offset + byteLength
    }
    
    Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
      value = +value
      offset = offset >>> 0
      if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
      if (value < 0) value = 0xff + value + 1
      this[offset] = (value & 0xff)
      return offset + 1
    }
    
    Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
      value = +value
      offset = offset >>> 0
      if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
      this[offset] = (value & 0xff)
      this[offset + 1] = (value >>> 8)
      return offset + 2
    }
    
    Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
      value = +value
      offset = offset >>> 0
      if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
      this[offset] = (value >>> 8)
      this[offset + 1] = (value & 0xff)
      return offset + 2
    }
    
    Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
      value = +value
      offset = offset >>> 0
      if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
      this[offset] = (value & 0xff)
      this[offset + 1] = (value >>> 8)
      this[offset + 2] = (value >>> 16)
      this[offset + 3] = (value >>> 24)
      return offset + 4
    }
    
    Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
      value = +value
      offset = offset >>> 0
      if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
      if (value < 0) value = 0xffffffff + value + 1
      this[offset] = (value >>> 24)
      this[offset + 1] = (value >>> 16)
      this[offset + 2] = (value >>> 8)
      this[offset + 3] = (value & 0xff)
      return offset + 4
    }
    
    function checkIEEE754 (buf, value, offset, ext, max, min) {
      if (offset + ext > buf.length) throw new RangeError('Index out of range')
      if (offset < 0) throw new RangeError('Index out of range')
    }
    
    function writeFloat (buf, value, offset, littleEndian, noAssert) {
      value = +value
      offset = offset >>> 0
      if (!noAssert) {
        checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
      }
      ieee754.write(buf, value, offset, littleEndian, 23, 4)
      return offset + 4
    }
    
    Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
      return writeFloat(this, value, offset, true, noAssert)
    }
    
    Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
      return writeFloat(this, value, offset, false, noAssert)
    }
    
    function writeDouble (buf, value, offset, littleEndian, noAssert) {
      value = +value
      offset = offset >>> 0
      if (!noAssert) {
        checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
      }
      ieee754.write(buf, value, offset, littleEndian, 52, 8)
      return offset + 8
    }
    
    Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
      return writeDouble(this, value, offset, true, noAssert)
    }
    
    Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
      return writeDouble(this, value, offset, false, noAssert)
    }
    
    // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
    Buffer.prototype.copy = function copy (target, targetStart, start, end) {
      if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
      if (!start) start = 0
      if (!end && end !== 0) end = this.length
      if (targetStart >= target.length) targetStart = target.length
      if (!targetStart) targetStart = 0
      if (end > 0 && end < start) end = start
    
      // Copy 0 bytes; we're done
      if (end === start) return 0
      if (target.length === 0 || this.length === 0) return 0
    
      // Fatal error conditions
      if (targetStart < 0) {
        throw new RangeError('targetStart out of bounds')
      }
      if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
      if (end < 0) throw new RangeError('sourceEnd out of bounds')
    
      // Are we oob?
      if (end > this.length) end = this.length
      if (target.length - targetStart < end - start) {
        end = target.length - targetStart + start
      }
    
      var len = end - start
    
      if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
        // Use built-in when available, missing from IE11
        this.copyWithin(targetStart, start, end)
      } else if (this === target && start < targetStart && targetStart < end) {
        // descending copy from end
        for (var i = len - 1; i >= 0; --i) {
          target[i + targetStart] = this[i + start]
        }
      } else {
        Uint8Array.prototype.set.call(
          target,
          this.subarray(start, end),
          targetStart
        )
      }
    
      return len
    }
    
    // Usage:
    //    buffer.fill(number[, offset[, end]])
    //    buffer.fill(buffer[, offset[, end]])
    //    buffer.fill(string[, offset[, end]][, encoding])
    Buffer.prototype.fill = function fill (val, start, end, encoding) {
      // Handle string cases:
      if (typeof val === 'string') {
        if (typeof start === 'string') {
          encoding = start
          start = 0
          end = this.length
        } else if (typeof end === 'string') {
          encoding = end
          end = this.length
        }
        if (encoding !== undefined && typeof encoding !== 'string') {
          throw new TypeError('encoding must be a string')
        }
        if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
          throw new TypeError('Unknown encoding: ' + encoding)
        }
        if (val.length === 1) {
          var code = val.charCodeAt(0)
          if ((encoding === 'utf8' && code < 128) ||
              encoding === 'latin1') {
            // Fast path: If `val` fits into a single byte, use that numeric value.
            val = code
          }
        }
      } else if (typeof val === 'number') {
        val = val & 255
      }
    
      // Invalid ranges are not set to a default, so can range check early.
      if (start < 0 || this.length < start || this.length < end) {
        throw new RangeError('Out of range index')
      }
    
      if (end <= start) {
        return this
      }
    
      start = start >>> 0
      end = end === undefined ? this.length : end >>> 0
    
      if (!val) val = 0
    
      var i
      if (typeof val === 'number') {
        for (i = start; i < end; ++i) {
          this[i] = val
        }
      } else {
        var bytes = Buffer.isBuffer(val)
          ? val
          : Buffer.from(val, encoding)
        var len = bytes.length
        if (len === 0) {
          throw new TypeError('The value "' + val +
            '" is invalid for argument "value"')
        }
        for (i = 0; i < end - start; ++i) {
          this[i + start] = bytes[i % len]
        }
      }
    
      return this
    }
    
    // HELPER FUNCTIONS
    // ================
    
    var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g
    
    function base64clean (str) {
      // Node takes equal signs as end of the Base64 encoding
      str = str.split('=')[0]
      // Node strips out invalid characters like \n and \t from the string, base64-js does not
      str = str.trim().replace(INVALID_BASE64_RE, '')
      // Node converts strings with length < 2 to ''
      if (str.length < 2) return ''
      // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
      while (str.length % 4 !== 0) {
        str = str + '='
      }
      return str
    }
    
    function toHex (n) {
      if (n < 16) return '0' + n.toString(16)
      return n.toString(16)
    }
    
    function utf8ToBytes (string, units) {
      units = units || Infinity
      var codePoint
      var length = string.length
      var leadSurrogate = null
      var bytes = []
    
      for (var i = 0; i < length; ++i) {
        codePoint = string.charCodeAt(i)
    
        // is surrogate component
        if (codePoint > 0xD7FF && codePoint < 0xE000) {
          // last char was a lead
          if (!leadSurrogate) {
            // no lead yet
            if (codePoint > 0xDBFF) {
              // unexpected trail
              if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
              continue
            } else if (i + 1 === length) {
              // unpaired lead
              if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
              continue
            }
    
            // valid lead
            leadSurrogate = codePoint
    
            continue
          }
    
          // 2 leads in a row
          if (codePoint < 0xDC00) {
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
            leadSurrogate = codePoint
            continue
          }
    
          // valid surrogate pair
          codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
        } else if (leadSurrogate) {
          // valid bmp char, but last char was a lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        }
    
        leadSurrogate = null
    
        // encode utf8
        if (codePoint < 0x80) {
          if ((units -= 1) < 0) break
          bytes.push(codePoint)
        } else if (codePoint < 0x800) {
          if ((units -= 2) < 0) break
          bytes.push(
            codePoint >> 0x6 | 0xC0,
            codePoint & 0x3F | 0x80
          )
        } else if (codePoint < 0x10000) {
          if ((units -= 3) < 0) break
          bytes.push(
            codePoint >> 0xC | 0xE0,
            codePoint >> 0x6 & 0x3F | 0x80,
            codePoint & 0x3F | 0x80
          )
        } else if (codePoint < 0x110000) {
          if ((units -= 4) < 0) break
          bytes.push(
            codePoint >> 0x12 | 0xF0,
            codePoint >> 0xC & 0x3F | 0x80,
            codePoint >> 0x6 & 0x3F | 0x80,
            codePoint & 0x3F | 0x80
          )
        } else {
          throw new Error('Invalid code point')
        }
      }
    
      return bytes
    }
    
    function asciiToBytes (str) {
      var byteArray = []
      for (var i = 0; i < str.length; ++i) {
        // Node's code seems to be doing this and not & 0x7F..
        byteArray.push(str.charCodeAt(i) & 0xFF)
      }
      return byteArray
    }
    
    function utf16leToBytes (str, units) {
      var c, hi, lo
      var byteArray = []
      for (var i = 0; i < str.length; ++i) {
        if ((units -= 2) < 0) break
    
        c = str.charCodeAt(i)
        hi = c >> 8
        lo = c % 256
        byteArray.push(lo)
        byteArray.push(hi)
      }
    
      return byteArray
    }
    
    function base64ToBytes (str) {
      return base64.toByteArray(base64clean(str))
    }
    
    function blitBuffer (src, dst, offset, length) {
      for (var i = 0; i < length; ++i) {
        if ((i + offset >= dst.length) || (i >= src.length)) break
        dst[i + offset] = src[i]
      }
      return i
    }
    
    // ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
    // the `instanceof` check but they should be treated as of that type.
    // See: https://github.com/feross/buffer/issues/166
    function isInstance (obj, type) {
      return obj instanceof type ||
        (obj != null && obj.constructor != null && obj.constructor.name != null &&
          obj.constructor.name === type.name)
    }
    function numberIsNaN (obj) {
      // For IE11 support
      return obj !== obj // eslint-disable-line no-self-compare
    }
    
    }).call(this)}).call(this,require("buffer").Buffer)
    },{"base64-js":2,"buffer":7,"ieee754":25}],8:[function(require,module,exports){
    require(".").check("es5");
    },{".":9}],9:[function(require,module,exports){
    require("./lib/definitions");
    module.exports = require("./lib");
    
    },{"./lib":12,"./lib/definitions":11}],10:[function(require,module,exports){
    var CapabilityDetector = function () {
        this.tests = {};
        this.cache = {};
    };
    CapabilityDetector.prototype = {
        constructor: CapabilityDetector,
        define: function (name, test) {
            if (typeof (name) != "string" || !(test instanceof Function))
                throw new Error("Invalid capability definition.");
            if (this.tests[name])
                throw new Error('Duplicated capability definition by "' + name + '".');
            this.tests[name] = test;
        },
        check: function (name) {
            if (!this.test(name))
                throw new Error('The current environment does not support "' + name + '", therefore we cannot continue.');
        },
        test: function (name) {
            if (this.cache[name] !== undefined)
                return this.cache[name];
            if (!this.tests[name])
                throw new Error('Unknown capability with name "' + name + '".');
            var test = this.tests[name];
            this.cache[name] = !!test();
            return this.cache[name];
        }
    };
    
    module.exports = CapabilityDetector;
    },{}],11:[function(require,module,exports){
    var capability = require("."),
        define = capability.define,
        test = capability.test;
    
    define("strict mode", function () {
        return (this === undefined);
    });
    
    define("arguments.callee.caller", function () {
        try {
            return (function () {
                    return arguments.callee.caller;
                })() === arguments.callee;
        } catch (strictModeIsEnforced) {
            return false;
        }
    });
    
    define("es5", function () {
        return test("Array.prototype.forEach") &&
            test("Array.prototype.map") &&
            test("Function.prototype.bind") &&
            test("Object.create") &&
            test("Object.defineProperties") &&
            test("Object.defineProperty") &&
            test("Object.prototype.hasOwnProperty");
    });
    
    define("Array.prototype.forEach", function () {
        return Array.prototype.forEach;
    });
    
    define("Array.prototype.map", function () {
        return Array.prototype.map;
    });
    
    define("Function.prototype.bind", function () {
        return Function.prototype.bind;
    });
    
    define("Object.create", function () {
        return Object.create;
    });
    
    define("Object.defineProperties", function () {
        return Object.defineProperties;
    });
    
    define("Object.defineProperty", function () {
        return Object.defineProperty;
    });
    
    define("Object.prototype.hasOwnProperty", function () {
        return Object.prototype.hasOwnProperty;
    });
    
    define("Error.captureStackTrace", function () {
        return Error.captureStackTrace;
    });
    
    define("Error.prototype.stack", function () {
        try {
            throw new Error();
        }
        catch (e) {
            return e.stack || e.stacktrace;
        }
    });
    },{".":12}],12:[function(require,module,exports){
    var CapabilityDetector = require("./CapabilityDetector");
    
    var detector = new CapabilityDetector();
    
    var capability = function (name) {
        return detector.test(name);
    };
    capability.define = function (name, test) {
        detector.define(name, test);
    };
    capability.check = function (name) {
        detector.check(name);
    };
    capability.test = capability;
    
    module.exports = capability;
    },{"./CapabilityDetector":10}],13:[function(require,module,exports){
    /*!
     * depd
     * Copyright(c) 2015 Douglas Christopher Wilson
     * MIT Licensed
     */
    
    'use strict'
    
    /**
     * Module exports.
     * @public
     */
    
    module.exports = depd
    
    /**
     * Create deprecate for namespace in caller.
     */
    
    function depd (namespace) {
      if (!namespace) {
        throw new TypeError('argument namespace is required')
      }
    
      function deprecate (message) {
        // no-op in browser
      }
    
      deprecate._file = undefined
      deprecate._ignored = true
      deprecate._namespace = namespace
      deprecate._traced = false
      deprecate._warned = Object.create(null)
    
      deprecate.function = wrapfunction
      deprecate.property = wrapproperty
    
      return deprecate
    }
    
    /**
     * Return a wrapped function in a deprecation message.
     *
     * This is a no-op version of the wrapper, which does nothing but call
     * validation.
     */
    
    function wrapfunction (fn, message) {
      if (typeof fn !== 'function') {
        throw new TypeError('argument fn must be a function')
      }
    
      return fn
    }
    
    /**
     * Wrap property in a deprecation message.
     *
     * This is a no-op version of the wrapper, which does nothing but call
     * validation.
     */
    
    function wrapproperty (obj, prop, message) {
      if (!obj || (typeof obj !== 'object' && typeof obj !== 'function')) {
        throw new TypeError('argument obj must be object')
      }
    
      var descriptor = Object.getOwnPropertyDescriptor(obj, prop)
    
      if (!descriptor) {
        throw new TypeError('must call property on owner object')
      }
    
      if (!descriptor.configurable) {
        throw new TypeError('property must be configurable')
      }
    }
    
    },{}],14:[function(require,module,exports){
    arguments[4][13][0].apply(exports,arguments)
    },{"dup":13}],15:[function(require,module,exports){
    module.exports = require("./lib");
    },{"./lib":16}],16:[function(require,module,exports){
    require("capability/es5");
    
    var capability = require("capability");
    
    var polyfill;
    if (capability("Error.captureStackTrace"))
        polyfill = require("./v8");
    else if (capability("Error.prototype.stack"))
        polyfill = require("./non-v8/index");
    else
        polyfill = require("./unsupported");
    
    module.exports = polyfill();
    },{"./non-v8/index":20,"./unsupported":22,"./v8":23,"capability":9,"capability/es5":8}],17:[function(require,module,exports){
    var Class = require("o3").Class,
        abstractMethod = require("o3").abstractMethod;
    
    var Frame = Class(Object, {
        prototype: {
            init: Class.prototype.merge,
            frameString: undefined,
            toString: function () {
                return this.frameString;
            },
            functionValue: undefined,
            getThis: abstractMethod,
            getTypeName: abstractMethod,
            getFunction: function () {
                return this.functionValue;
            },
            getFunctionName: abstractMethod,
            getMethodName: abstractMethod,
            getFileName: abstractMethod,
            getLineNumber: abstractMethod,
            getColumnNumber: abstractMethod,
            getEvalOrigin: abstractMethod,
            isTopLevel: abstractMethod,
            isEval: abstractMethod,
            isNative: abstractMethod,
            isConstructor: abstractMethod
        }
    });
    
    module.exports = Frame;
    },{"o3":29}],18:[function(require,module,exports){
    var Class = require("o3").Class,
        Frame = require("./Frame"),
        cache = require("u3").cache;
    
    var FrameStringParser = Class(Object, {
        prototype: {
            stackParser: null,
            frameParser: null,
            locationParsers: null,
            constructor: function (options) {
                Class.prototype.merge.call(this, options);
            },
            getFrames: function (frameStrings, functionValues) {
                var frames = [];
                for (var index = 0, length = frameStrings.length; index < length; ++index)
                    frames[index] = this.getFrame(frameStrings[index], functionValues[index]);
                return frames;
            },
            getFrame: function (frameString, functionValue) {
                var config = {
                    frameString: frameString,
                    functionValue: functionValue
                };
                return new Frame(config);
            }
        }
    });
    
    module.exports = {
        getClass: cache(function () {
            return FrameStringParser;
        }),
        getInstance: cache(function () {
            var FrameStringParser = this.getClass();
            var instance = new FrameStringParser();
            return instance;
        })
    };
    },{"./Frame":17,"o3":29,"u3":41}],19:[function(require,module,exports){
    var Class = require("o3").Class,
        abstractMethod = require("o3").abstractMethod,
        eachCombination = require("u3").eachCombination,
        cache = require("u3").cache,
        capability = require("capability");
    
    var AbstractFrameStringSource = Class(Object, {
        prototype: {
            captureFrameStrings: function (frameShifts) {
                var error = this.createError();
                frameShifts.unshift(this.captureFrameStrings);
                frameShifts.unshift(this.createError);
                var capturedFrameStrings = this.getFrameStrings(error);
    
                var frameStrings = capturedFrameStrings.slice(frameShifts.length),
                    functionValues = [];
    
                if (capability("arguments.callee.caller")) {
                    var capturedFunctionValues = [
                        this.createError,
                        this.captureFrameStrings
                    ];
                    try {
                        var aCaller = arguments.callee;
                        while (aCaller = aCaller.caller)
                            capturedFunctionValues.push(aCaller);
                    }
                    catch (useStrictError) {
                    }
                    functionValues = capturedFunctionValues.slice(frameShifts.length);
                }
                return {
                    frameStrings: frameStrings,
                    functionValues: functionValues
                };
            },
            getFrameStrings: function (error) {
                var message = error.message || "";
                var name = error.name || "";
                var stackString = this.getStackString(error);
                if (stackString === undefined)
                    return;
                var stackStringChunks = stackString.split("\n");
                var fromPosition = 0;
                var toPosition = stackStringChunks.length;
                if (this.hasHeader)
                    fromPosition += name.split("\n").length + message.split("\n").length - 1;
                if (this.hasFooter)
                    toPosition -= 1;
                return stackStringChunks.slice(fromPosition, toPosition);
            },
            createError: abstractMethod,
            getStackString: abstractMethod,
            hasHeader: undefined,
            hasFooter: undefined
        }
    });
    
    var FrameStringSourceCalibrator = Class(Object, {
        prototype: {
            calibrateClass: function (FrameStringSource) {
                return this.calibrateMethods(FrameStringSource) && this.calibrateEnvelope(FrameStringSource);
            },
            calibrateMethods: function (FrameStringSource) {
                try {
                    eachCombination([[
                        function (message) {
                            return new Error(message);
                        },
                        function (message) {
                            try {
                                throw new Error(message);
                            }
                            catch (error) {
                                return error;
                            }
                        }
                    ], [
                        function (error) {
                            return error.stack;
                        },
                        function (error) {
                            return error.stacktrace;
                        }
                    ]], function (createError, getStackString) {
                        if (getStackString(createError()))
                            throw {
                                getStackString: getStackString,
                                createError: createError
                            };
                    });
                } catch (workingImplementation) {
                    Class.merge.call(FrameStringSource, {
                        prototype: workingImplementation
                    });
                    return true;
                }
                return false;
            },
            calibrateEnvelope: function (FrameStringSource) {
                var getStackString = FrameStringSource.prototype.getStackString;
                var createError = FrameStringSource.prototype.createError;
                var calibratorStackString = getStackString(createError("marker"));
                var calibratorFrameStrings = calibratorStackString.split("\n");
                Class.merge.call(FrameStringSource, {
                    prototype: {
                        hasHeader: /marker/.test(calibratorFrameStrings[0]),
                        hasFooter: calibratorFrameStrings[calibratorFrameStrings.length - 1] === ""
                    }
                });
                return true;
            }
        }
    });
    
    
    module.exports = {
        getClass: cache(function () {
            var FrameStringSource;
            if (FrameStringSource)
                return FrameStringSource;
            FrameStringSource = Class(AbstractFrameStringSource, {});
            var calibrator = new FrameStringSourceCalibrator();
            if (!calibrator.calibrateClass(FrameStringSource))
                throw new Error("Cannot read Error.prototype.stack in this environment.");
            return FrameStringSource;
        }),
        getInstance: cache(function () {
            var FrameStringSource = this.getClass();
            var instance = new FrameStringSource();
            return instance;
        })
    };
    },{"capability":9,"o3":29,"u3":41}],20:[function(require,module,exports){
    var FrameStringSource = require("./FrameStringSource"),
        FrameStringParser = require("./FrameStringParser"),
        cache = require("u3").cache,
        prepareStackTrace = require("../prepareStackTrace");
    
    module.exports = function () {
    
        Error.captureStackTrace = function captureStackTrace(throwable, terminator) {
            var warnings;
            var frameShifts = [
                captureStackTrace
            ];
            if (terminator) {
                // additional frames can come here if arguments.callee.caller is supported
                // otherwise it is hard to identify the terminator
                frameShifts.push(terminator);
            }
            var captured = FrameStringSource.getInstance().captureFrameStrings(frameShifts);
            Object.defineProperties(throwable, {
                stack: {
                    configurable: true,
                    get: cache(function () {
                        var frames = FrameStringParser.getInstance().getFrames(captured.frameStrings, captured.functionValues);
                        return (Error.prepareStackTrace || prepareStackTrace)(throwable, frames, warnings);
                    })
                },
                cachedStack: {
                    configurable: true,
                    writable: true,
                    enumerable: false,
                    value: true
                }
            });
        };
    
        Error.getStackTrace = function (throwable) {
            if (throwable.cachedStack)
                return throwable.stack;
            var frameStrings = FrameStringSource.getInstance().getFrameStrings(throwable),
                frames = [],
                warnings;
            if (frameStrings)
                frames = FrameStringParser.getInstance().getFrames(frameStrings, []);
            else
                warnings = [
                    "The stack is not readable by unthrown errors in this environment."
                ];
            var stack = (Error.prepareStackTrace || prepareStackTrace)(throwable, frames, warnings);
            if (frameStrings)
                try {
                    Object.defineProperties(throwable, {
                        stack: {
                            configurable: true,
                            writable: true,
                            enumerable: false,
                            value: stack
                        },
                        cachedStack: {
                            configurable: true,
                            writable: true,
                            enumerable: false,
                            value: true
                        }
                    });
                } catch (nonConfigurableError) {
                }
            return stack;
        };
    
        return {
            prepareStackTrace: prepareStackTrace
        };
    };
    },{"../prepareStackTrace":21,"./FrameStringParser":18,"./FrameStringSource":19,"u3":41}],21:[function(require,module,exports){
    var prepareStackTrace = function (throwable, frames, warnings) {
        var string = "";
        string += throwable.name || "Error";
        string += ": " + (throwable.message || "");
        if (warnings instanceof Array)
            for (var warningIndex in warnings) {
                var warning = warnings[warningIndex];
                string += "\n   # " + warning;
            }
        for (var frameIndex in frames) {
            var frame = frames[frameIndex];
            string += "\n   at " + frame.toString();
        }
        return string;
    };
    
    module.exports = prepareStackTrace;
    },{}],22:[function(require,module,exports){
    var cache = require("u3").cache,
        prepareStackTrace = require("./prepareStackTrace");
    
    module.exports = function () {
    
        Error.captureStackTrace = function (throwable, terminator) {
            Object.defineProperties(throwable, {
                stack: {
                    configurable: true,
                    get: cache(function () {
                        return (Error.prepareStackTrace || prepareStackTrace)(throwable, []);
                    })
                },
                cachedStack: {
                    configurable: true,
                    writable: true,
                    enumerable: false,
                    value: true
                }
            });
        };
    
        Error.getStackTrace = function (throwable) {
            if (throwable.cachedStack)
                return throwable.stack;
            var stack = (Error.prepareStackTrace || prepareStackTrace)(throwable, []);
            try {
                Object.defineProperties(throwable, {
                    stack: {
                        configurable: true,
                        writable: true,
                        enumerable: false,
                        value: stack
                    },
                    cachedStack: {
                        configurable: true,
                        writable: true,
                        enumerable: false,
                        value: true
                    }
                });
            } catch (nonConfigurableError) {
            }
            return stack;
        };
    
        return {
            prepareStackTrace: prepareStackTrace
        };
    };
    },{"./prepareStackTrace":21,"u3":41}],23:[function(require,module,exports){
    var prepareStackTrace = require("./prepareStackTrace");
    
    module.exports = function () {
        Error.getStackTrace = function (throwable) {
            return throwable.stack;
        };
    
        return {
            prepareStackTrace: prepareStackTrace
        };
    };
    },{"./prepareStackTrace":21}],24:[function(require,module,exports){
    /*!
     * http-errors
     * Copyright(c) 2014 Jonathan Ong
     * Copyright(c) 2016 Douglas Christopher Wilson
     * MIT Licensed
     */
    
    'use strict'
    
    /**
     * Module dependencies.
     * @private
     */
    
    var deprecate = require('depd')('http-errors')
    var setPrototypeOf = require('setprototypeof')
    var statuses = require('statuses')
    var inherits = require('inherits')
    var toIdentifier = require('toidentifier')
    
    /**
     * Module exports.
     * @public
     */
    
    module.exports = createError
    module.exports.HttpError = createHttpErrorConstructor()
    module.exports.isHttpError = createIsHttpErrorFunction(module.exports.HttpError)
    
    // Populate exports for all constructors
    populateConstructorExports(module.exports, statuses.codes, module.exports.HttpError)
    
    /**
     * Get the code class of a status code.
     * @private
     */
    
    function codeClass (status) {
      return Number(String(status).charAt(0) + '00')
    }
    
    /**
     * Create a new HTTP Error.
     *
     * @returns {Error}
     * @public
     */
    
    function createError () {
      // so much arity going on ~_~
      var err
      var msg
      var status = 500
      var props = {}
      for (var i = 0; i < arguments.length; i++) {
        var arg = arguments[i]
        if (arg instanceof Error) {
          err = arg
          status = err.status || err.statusCode || status
          continue
        }
        switch (typeof arg) {
          case 'string':
            msg = arg
            break
          case 'number':
            status = arg
            if (i !== 0) {
              deprecate('non-first-argument status code; replace with createError(' + arg + ', ...)')
            }
            break
          case 'object':
            props = arg
            break
        }
      }
    
      if (typeof status === 'number' && (status < 400 || status >= 600)) {
        deprecate('non-error status code; use only 4xx or 5xx status codes')
      }
    
      if (typeof status !== 'number' ||
        (!statuses[status] && (status < 400 || status >= 600))) {
        status = 500
      }
    
      // constructor
      var HttpError = createError[status] || createError[codeClass(status)]
    
      if (!err) {
        // create error
        err = HttpError
          ? new HttpError(msg)
          : new Error(msg || statuses[status])
        Error.captureStackTrace(err, createError)
      }
    
      if (!HttpError || !(err instanceof HttpError) || err.status !== status) {
        // add properties to generic error
        err.expose = status < 500
        err.status = err.statusCode = status
      }
    
      for (var key in props) {
        if (key !== 'status' && key !== 'statusCode') {
          err[key] = props[key]
        }
      }
    
      return err
    }
    
    /**
     * Create HTTP error abstract base class.
     * @private
     */
    
    function createHttpErrorConstructor () {
      function HttpError () {
        throw new TypeError('cannot construct abstract class')
      }
    
      inherits(HttpError, Error)
    
      return HttpError
    }
    
    /**
     * Create a constructor for a client error.
     * @private
     */
    
    function createClientErrorConstructor (HttpError, name, code) {
      var className = toClassName(name)
    
      function ClientError (message) {
        // create the error object
        var msg = message != null ? message : statuses[code]
        var err = new Error(msg)
    
        // capture a stack trace to the construction point
        Error.captureStackTrace(err, ClientError)
    
        // adjust the [[Prototype]]
        setPrototypeOf(err, ClientError.prototype)
    
        // redefine the error message
        Object.defineProperty(err, 'message', {
          enumerable: true,
          configurable: true,
          value: msg,
          writable: true
        })
    
        // redefine the error name
        Object.defineProperty(err, 'name', {
          enumerable: false,
          configurable: true,
          value: className,
          writable: true
        })
    
        return err
      }
    
      inherits(ClientError, HttpError)
      nameFunc(ClientError, className)
    
      ClientError.prototype.status = code
      ClientError.prototype.statusCode = code
      ClientError.prototype.expose = true
    
      return ClientError
    }
    
    /**
     * Create function to test is a value is a HttpError.
     * @private
     */
    
    function createIsHttpErrorFunction (HttpError) {
      return function isHttpError (val) {
        if (!val || typeof val !== 'object') {
          return false
        }
    
        if (val instanceof HttpError) {
          return true
        }
    
        return val instanceof Error &&
          typeof val.expose === 'boolean' &&
          typeof val.statusCode === 'number' && val.status === val.statusCode
      }
    }
    
    /**
     * Create a constructor for a server error.
     * @private
     */
    
    function createServerErrorConstructor (HttpError, name, code) {
      var className = toClassName(name)
    
      function ServerError (message) {
        // create the error object
        var msg = message != null ? message : statuses[code]
        var err = new Error(msg)
    
        // capture a stack trace to the construction point
        Error.captureStackTrace(err, ServerError)
    
        // adjust the [[Prototype]]
        setPrototypeOf(err, ServerError.prototype)
    
        // redefine the error message
        Object.defineProperty(err, 'message', {
          enumerable: true,
          configurable: true,
          value: msg,
          writable: true
        })
    
        // redefine the error name
        Object.defineProperty(err, 'name', {
          enumerable: false,
          configurable: true,
          value: className,
          writable: true
        })
    
        return err
      }
    
      inherits(ServerError, HttpError)
      nameFunc(ServerError, className)
    
      ServerError.prototype.status = code
      ServerError.prototype.statusCode = code
      ServerError.prototype.expose = false
    
      return ServerError
    }
    
    /**
     * Set the name of a function, if possible.
     * @private
     */
    
    function nameFunc (func, name) {
      var desc = Object.getOwnPropertyDescriptor(func, 'name')
    
      if (desc && desc.configurable) {
        desc.value = name
        Object.defineProperty(func, 'name', desc)
      }
    }
    
    /**
     * Populate the exports object with constructors for every error class.
     * @private
     */
    
    function populateConstructorExports (exports, codes, HttpError) {
      codes.forEach(function forEachCode (code) {
        var CodeError
        var name = toIdentifier(statuses[code])
    
        switch (codeClass(code)) {
          case 400:
            CodeError = createClientErrorConstructor(HttpError, name, code)
            break
          case 500:
            CodeError = createServerErrorConstructor(HttpError, name, code)
            break
        }
    
        if (CodeError) {
          // export the constructor
          exports[code] = CodeError
          exports[name] = CodeError
        }
      })
    
      // backwards-compatibility
      exports["I'mateapot"] = deprecate.function(exports.ImATeapot,
        '"I\'mateapot"; use "ImATeapot" instead')
    }
    
    /**
     * Get a class name from a name identifier.
     * @private
     */
    
    function toClassName (name) {
      return name.substr(-5) !== 'Error'
        ? name + 'Error'
        : name
    }
    
    },{"depd":13,"inherits":26,"setprototypeof":35,"statuses":37,"toidentifier":39}],25:[function(require,module,exports){
    /*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
    exports.read = function (buffer, offset, isLE, mLen, nBytes) {
      var e, m
      var eLen = (nBytes * 8) - mLen - 1
      var eMax = (1 << eLen) - 1
      var eBias = eMax >> 1
      var nBits = -7
      var i = isLE ? (nBytes - 1) : 0
      var d = isLE ? -1 : 1
      var s = buffer[offset + i]
    
      i += d
    
      e = s & ((1 << (-nBits)) - 1)
      s >>= (-nBits)
      nBits += eLen
      for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}
    
      m = e & ((1 << (-nBits)) - 1)
      e >>= (-nBits)
      nBits += mLen
      for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}
    
      if (e === 0) {
        e = 1 - eBias
      } else if (e === eMax) {
        return m ? NaN : ((s ? -1 : 1) * Infinity)
      } else {
        m = m + Math.pow(2, mLen)
        e = e - eBias
      }
      return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
    }
    
    exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
      var e, m, c
      var eLen = (nBytes * 8) - mLen - 1
      var eMax = (1 << eLen) - 1
      var eBias = eMax >> 1
      var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
      var i = isLE ? 0 : (nBytes - 1)
      var d = isLE ? 1 : -1
      var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0
    
      value = Math.abs(value)
    
      if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0
        e = eMax
      } else {
        e = Math.floor(Math.log(value) / Math.LN2)
        if (value * (c = Math.pow(2, -e)) < 1) {
          e--
          c *= 2
        }
        if (e + eBias >= 1) {
          value += rt / c
        } else {
          value += rt * Math.pow(2, 1 - eBias)
        }
        if (value * c >= 2) {
          e++
          c /= 2
        }
    
        if (e + eBias >= eMax) {
          m = 0
          e = eMax
        } else if (e + eBias >= 1) {
          m = ((value * c) - 1) * Math.pow(2, mLen)
          e = e + eBias
        } else {
          m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
          e = 0
        }
      }
    
      for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}
    
      e = (e << mLen) | m
      eLen += mLen
      for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}
    
      buffer[offset + i - d] |= s * 128
    }
    
    },{}],26:[function(require,module,exports){
    if (typeof Object.create === 'function') {
      // implementation from standard node.js 'util' module
      module.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor
          ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
              value: ctor,
              enumerable: false,
              writable: true,
              configurable: true
            }
          })
        }
      };
    } else {
      // old school shim for old browsers
      module.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor
          var TempCtor = function () {}
          TempCtor.prototype = superCtor.prototype
          ctor.prototype = new TempCtor()
          ctor.prototype.constructor = ctor
        }
      }
    }
    
    },{}],27:[function(require,module,exports){
    (function (process,global){(function (){
    /**
     * [js-sha256]{@link https://github.com/emn178/js-sha256}
     *
     * @version 0.9.0
     * @author Chen, Yi-Cyuan [emn178@gmail.com]
     * @copyright Chen, Yi-Cyuan 2014-2017
     * @license MIT
     */
    /*jslint bitwise: true */
    (function () {
      'use strict';
    
      var ERROR = 'input is invalid type';
      var WINDOW = typeof window === 'object';
      var root = WINDOW ? window : {};
      if (root.JS_SHA256_NO_WINDOW) {
        WINDOW = false;
      }
      var WEB_WORKER = !WINDOW && typeof self === 'object';
      var NODE_JS = !root.JS_SHA256_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;
      if (NODE_JS) {
        root = global;
      } else if (WEB_WORKER) {
        root = self;
      }
      var COMMON_JS = !root.JS_SHA256_NO_COMMON_JS && typeof module === 'object' && module.exports;
      var AMD = typeof define === 'function' && define.amd;
      var ARRAY_BUFFER = !root.JS_SHA256_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';
      var HEX_CHARS = '0123456789abcdef'.split('');
      var EXTRA = [-2147483648, 8388608, 32768, 128];
      var SHIFT = [24, 16, 8, 0];
      var K = [
        0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
      ];
      var OUTPUT_TYPES = ['hex', 'array', 'digest', 'arrayBuffer'];
    
      var blocks = [];
    
      if (root.JS_SHA256_NO_NODE_JS || !Array.isArray) {
        Array.isArray = function (obj) {
          return Object.prototype.toString.call(obj) === '[object Array]';
        };
      }
    
      if (ARRAY_BUFFER && (root.JS_SHA256_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {
        ArrayBuffer.isView = function (obj) {
          return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;
        };
      }
    
      var createOutputMethod = function (outputType, is224) {
        return function (message) {
          return new Sha256(is224, true).update(message)[outputType]();
        };
      };
    
      var createMethod = function (is224) {
        var method = createOutputMethod('hex', is224);
        if (NODE_JS) {
          method = nodeWrap(method, is224);
        }
        method.create = function () {
          return new Sha256(is224);
        };
        method.update = function (message) {
          return method.create().update(message);
        };
        for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
          var type = OUTPUT_TYPES[i];
          method[type] = createOutputMethod(type, is224);
        }
        return method;
      };
    
      var nodeWrap = function (method, is224) {
        var crypto = eval("require('crypto')");
        var Buffer = eval("require('buffer').Buffer");
        var algorithm = is224 ? 'sha224' : 'sha256';
        var nodeMethod = function (message) {
          if (typeof message === 'string') {
            return crypto.createHash(algorithm).update(message, 'utf8').digest('hex');
          } else {
            if (message === null || message === undefined) {
              throw new Error(ERROR);
            } else if (message.constructor === ArrayBuffer) {
              message = new Uint8Array(message);
            }
          }
          if (Array.isArray(message) || ArrayBuffer.isView(message) ||
            message.constructor === Buffer) {
            return crypto.createHash(algorithm).update(new Buffer(message)).digest('hex');
          } else {
            return method(message);
          }
        };
        return nodeMethod;
      };
    
      var createHmacOutputMethod = function (outputType, is224) {
        return function (key, message) {
          return new HmacSha256(key, is224, true).update(message)[outputType]();
        };
      };
    
      var createHmacMethod = function (is224) {
        var method = createHmacOutputMethod('hex', is224);
        method.create = function (key) {
          return new HmacSha256(key, is224);
        };
        method.update = function (key, message) {
          return method.create(key).update(message);
        };
        for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
          var type = OUTPUT_TYPES[i];
          method[type] = createHmacOutputMethod(type, is224);
        }
        return method;
      };
    
      function Sha256(is224, sharedMemory) {
        if (sharedMemory) {
          blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] =
            blocks[4] = blocks[5] = blocks[6] = blocks[7] =
            blocks[8] = blocks[9] = blocks[10] = blocks[11] =
            blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;
          this.blocks = blocks;
        } else {
          this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
        }
    
        if (is224) {
          this.h0 = 0xc1059ed8;
          this.h1 = 0x367cd507;
          this.h2 = 0x3070dd17;
          this.h3 = 0xf70e5939;
          this.h4 = 0xffc00b31;
          this.h5 = 0x68581511;
          this.h6 = 0x64f98fa7;
          this.h7 = 0xbefa4fa4;
        } else { // 256
          this.h0 = 0x6a09e667;
          this.h1 = 0xbb67ae85;
          this.h2 = 0x3c6ef372;
          this.h3 = 0xa54ff53a;
          this.h4 = 0x510e527f;
          this.h5 = 0x9b05688c;
          this.h6 = 0x1f83d9ab;
          this.h7 = 0x5be0cd19;
        }
    
        this.block = this.start = this.bytes = this.hBytes = 0;
        this.finalized = this.hashed = false;
        this.first = true;
        this.is224 = is224;
      }
    
      Sha256.prototype.update = function (message) {
        if (this.finalized) {
          return;
        }
        var notString, type = typeof message;
        if (type !== 'string') {
          if (type === 'object') {
            if (message === null) {
              throw new Error(ERROR);
            } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {
              message = new Uint8Array(message);
            } else if (!Array.isArray(message)) {
              if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {
                throw new Error(ERROR);
              }
            }
          } else {
            throw new Error(ERROR);
          }
          notString = true;
        }
        var code, index = 0, i, length = message.length, blocks = this.blocks;
    
        while (index < length) {
          if (this.hashed) {
            this.hashed = false;
            blocks[0] = this.block;
            blocks[16] = blocks[1] = blocks[2] = blocks[3] =
              blocks[4] = blocks[5] = blocks[6] = blocks[7] =
              blocks[8] = blocks[9] = blocks[10] = blocks[11] =
              blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;
          }
    
          if (notString) {
            for (i = this.start; index < length && i < 64; ++index) {
              blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];
            }
          } else {
            for (i = this.start; index < length && i < 64; ++index) {
              code = message.charCodeAt(index);
              if (code < 0x80) {
                blocks[i >> 2] |= code << SHIFT[i++ & 3];
              } else if (code < 0x800) {
                blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
              } else if (code < 0xd800 || code >= 0xe000) {
                blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
              } else {
                code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));
                blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
              }
            }
          }
    
          this.lastByteIndex = i;
          this.bytes += i - this.start;
          if (i >= 64) {
            this.block = blocks[16];
            this.start = i - 64;
            this.hash();
            this.hashed = true;
          } else {
            this.start = i;
          }
        }
        if (this.bytes > 4294967295) {
          this.hBytes += this.bytes / 4294967296 << 0;
          this.bytes = this.bytes % 4294967296;
        }
        return this;
      };
    
      Sha256.prototype.finalize = function () {
        if (this.finalized) {
          return;
        }
        this.finalized = true;
        var blocks = this.blocks, i = this.lastByteIndex;
        blocks[16] = this.block;
        blocks[i >> 2] |= EXTRA[i & 3];
        this.block = blocks[16];
        if (i >= 56) {
          if (!this.hashed) {
            this.hash();
          }
          blocks[0] = this.block;
          blocks[16] = blocks[1] = blocks[2] = blocks[3] =
            blocks[4] = blocks[5] = blocks[6] = blocks[7] =
            blocks[8] = blocks[9] = blocks[10] = blocks[11] =
            blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;
        }
        blocks[14] = this.hBytes << 3 | this.bytes >>> 29;
        blocks[15] = this.bytes << 3;
        this.hash();
      };
    
      Sha256.prototype.hash = function () {
        var a = this.h0, b = this.h1, c = this.h2, d = this.h3, e = this.h4, f = this.h5, g = this.h6,
          h = this.h7, blocks = this.blocks, j, s0, s1, maj, t1, t2, ch, ab, da, cd, bc;
    
        for (j = 16; j < 64; ++j) {
          // rightrotate
          t1 = blocks[j - 15];
          s0 = ((t1 >>> 7) | (t1 << 25)) ^ ((t1 >>> 18) | (t1 << 14)) ^ (t1 >>> 3);
          t1 = blocks[j - 2];
          s1 = ((t1 >>> 17) | (t1 << 15)) ^ ((t1 >>> 19) | (t1 << 13)) ^ (t1 >>> 10);
          blocks[j] = blocks[j - 16] + s0 + blocks[j - 7] + s1 << 0;
        }
    
        bc = b & c;
        for (j = 0; j < 64; j += 4) {
          if (this.first) {
            if (this.is224) {
              ab = 300032;
              t1 = blocks[0] - 1413257819;
              h = t1 - 150054599 << 0;
              d = t1 + 24177077 << 0;
            } else {
              ab = 704751109;
              t1 = blocks[0] - 210244248;
              h = t1 - 1521486534 << 0;
              d = t1 + 143694565 << 0;
            }
            this.first = false;
          } else {
            s0 = ((a >>> 2) | (a << 30)) ^ ((a >>> 13) | (a << 19)) ^ ((a >>> 22) | (a << 10));
            s1 = ((e >>> 6) | (e << 26)) ^ ((e >>> 11) | (e << 21)) ^ ((e >>> 25) | (e << 7));
            ab = a & b;
            maj = ab ^ (a & c) ^ bc;
            ch = (e & f) ^ (~e & g);
            t1 = h + s1 + ch + K[j] + blocks[j];
            t2 = s0 + maj;
            h = d + t1 << 0;
            d = t1 + t2 << 0;
          }
          s0 = ((d >>> 2) | (d << 30)) ^ ((d >>> 13) | (d << 19)) ^ ((d >>> 22) | (d << 10));
          s1 = ((h >>> 6) | (h << 26)) ^ ((h >>> 11) | (h << 21)) ^ ((h >>> 25) | (h << 7));
          da = d & a;
          maj = da ^ (d & b) ^ ab;
          ch = (h & e) ^ (~h & f);
          t1 = g + s1 + ch + K[j + 1] + blocks[j + 1];
          t2 = s0 + maj;
          g = c + t1 << 0;
          c = t1 + t2 << 0;
          s0 = ((c >>> 2) | (c << 30)) ^ ((c >>> 13) | (c << 19)) ^ ((c >>> 22) | (c << 10));
          s1 = ((g >>> 6) | (g << 26)) ^ ((g >>> 11) | (g << 21)) ^ ((g >>> 25) | (g << 7));
          cd = c & d;
          maj = cd ^ (c & a) ^ da;
          ch = (g & h) ^ (~g & e);
          t1 = f + s1 + ch + K[j + 2] + blocks[j + 2];
          t2 = s0 + maj;
          f = b + t1 << 0;
          b = t1 + t2 << 0;
          s0 = ((b >>> 2) | (b << 30)) ^ ((b >>> 13) | (b << 19)) ^ ((b >>> 22) | (b << 10));
          s1 = ((f >>> 6) | (f << 26)) ^ ((f >>> 11) | (f << 21)) ^ ((f >>> 25) | (f << 7));
          bc = b & c;
          maj = bc ^ (b & d) ^ cd;
          ch = (f & g) ^ (~f & h);
          t1 = e + s1 + ch + K[j + 3] + blocks[j + 3];
          t2 = s0 + maj;
          e = a + t1 << 0;
          a = t1 + t2 << 0;
        }
    
        this.h0 = this.h0 + a << 0;
        this.h1 = this.h1 + b << 0;
        this.h2 = this.h2 + c << 0;
        this.h3 = this.h3 + d << 0;
        this.h4 = this.h4 + e << 0;
        this.h5 = this.h5 + f << 0;
        this.h6 = this.h6 + g << 0;
        this.h7 = this.h7 + h << 0;
      };
    
      Sha256.prototype.hex = function () {
        this.finalize();
    
        var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3, h4 = this.h4, h5 = this.h5,
          h6 = this.h6, h7 = this.h7;
    
        var hex = HEX_CHARS[(h0 >> 28) & 0x0F] + HEX_CHARS[(h0 >> 24) & 0x0F] +
          HEX_CHARS[(h0 >> 20) & 0x0F] + HEX_CHARS[(h0 >> 16) & 0x0F] +
          HEX_CHARS[(h0 >> 12) & 0x0F] + HEX_CHARS[(h0 >> 8) & 0x0F] +
          HEX_CHARS[(h0 >> 4) & 0x0F] + HEX_CHARS[h0 & 0x0F] +
          HEX_CHARS[(h1 >> 28) & 0x0F] + HEX_CHARS[(h1 >> 24) & 0x0F] +
          HEX_CHARS[(h1 >> 20) & 0x0F] + HEX_CHARS[(h1 >> 16) & 0x0F] +
          HEX_CHARS[(h1 >> 12) & 0x0F] + HEX_CHARS[(h1 >> 8) & 0x0F] +
          HEX_CHARS[(h1 >> 4) & 0x0F] + HEX_CHARS[h1 & 0x0F] +
          HEX_CHARS[(h2 >> 28) & 0x0F] + HEX_CHARS[(h2 >> 24) & 0x0F] +
          HEX_CHARS[(h2 >> 20) & 0x0F] + HEX_CHARS[(h2 >> 16) & 0x0F] +
          HEX_CHARS[(h2 >> 12) & 0x0F] + HEX_CHARS[(h2 >> 8) & 0x0F] +
          HEX_CHARS[(h2 >> 4) & 0x0F] + HEX_CHARS[h2 & 0x0F] +
          HEX_CHARS[(h3 >> 28) & 0x0F] + HEX_CHARS[(h3 >> 24) & 0x0F] +
          HEX_CHARS[(h3 >> 20) & 0x0F] + HEX_CHARS[(h3 >> 16) & 0x0F] +
          HEX_CHARS[(h3 >> 12) & 0x0F] + HEX_CHARS[(h3 >> 8) & 0x0F] +
          HEX_CHARS[(h3 >> 4) & 0x0F] + HEX_CHARS[h3 & 0x0F] +
          HEX_CHARS[(h4 >> 28) & 0x0F] + HEX_CHARS[(h4 >> 24) & 0x0F] +
          HEX_CHARS[(h4 >> 20) & 0x0F] + HEX_CHARS[(h4 >> 16) & 0x0F] +
          HEX_CHARS[(h4 >> 12) & 0x0F] + HEX_CHARS[(h4 >> 8) & 0x0F] +
          HEX_CHARS[(h4 >> 4) & 0x0F] + HEX_CHARS[h4 & 0x0F] +
          HEX_CHARS[(h5 >> 28) & 0x0F] + HEX_CHARS[(h5 >> 24) & 0x0F] +
          HEX_CHARS[(h5 >> 20) & 0x0F] + HEX_CHARS[(h5 >> 16) & 0x0F] +
          HEX_CHARS[(h5 >> 12) & 0x0F] + HEX_CHARS[(h5 >> 8) & 0x0F] +
          HEX_CHARS[(h5 >> 4) & 0x0F] + HEX_CHARS[h5 & 0x0F] +
          HEX_CHARS[(h6 >> 28) & 0x0F] + HEX_CHARS[(h6 >> 24) & 0x0F] +
          HEX_CHARS[(h6 >> 20) & 0x0F] + HEX_CHARS[(h6 >> 16) & 0x0F] +
          HEX_CHARS[(h6 >> 12) & 0x0F] + HEX_CHARS[(h6 >> 8) & 0x0F] +
          HEX_CHARS[(h6 >> 4) & 0x0F] + HEX_CHARS[h6 & 0x0F];
        if (!this.is224) {
          hex += HEX_CHARS[(h7 >> 28) & 0x0F] + HEX_CHARS[(h7 >> 24) & 0x0F] +
            HEX_CHARS[(h7 >> 20) & 0x0F] + HEX_CHARS[(h7 >> 16) & 0x0F] +
            HEX_CHARS[(h7 >> 12) & 0x0F] + HEX_CHARS[(h7 >> 8) & 0x0F] +
            HEX_CHARS[(h7 >> 4) & 0x0F] + HEX_CHARS[h7 & 0x0F];
        }
        return hex;
      };
    
      Sha256.prototype.toString = Sha256.prototype.hex;
    
      Sha256.prototype.digest = function () {
        this.finalize();
    
        var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3, h4 = this.h4, h5 = this.h5,
          h6 = this.h6, h7 = this.h7;
    
        var arr = [
          (h0 >> 24) & 0xFF, (h0 >> 16) & 0xFF, (h0 >> 8) & 0xFF, h0 & 0xFF,
          (h1 >> 24) & 0xFF, (h1 >> 16) & 0xFF, (h1 >> 8) & 0xFF, h1 & 0xFF,
          (h2 >> 24) & 0xFF, (h2 >> 16) & 0xFF, (h2 >> 8) & 0xFF, h2 & 0xFF,
          (h3 >> 24) & 0xFF, (h3 >> 16) & 0xFF, (h3 >> 8) & 0xFF, h3 & 0xFF,
          (h4 >> 24) & 0xFF, (h4 >> 16) & 0xFF, (h4 >> 8) & 0xFF, h4 & 0xFF,
          (h5 >> 24) & 0xFF, (h5 >> 16) & 0xFF, (h5 >> 8) & 0xFF, h5 & 0xFF,
          (h6 >> 24) & 0xFF, (h6 >> 16) & 0xFF, (h6 >> 8) & 0xFF, h6 & 0xFF
        ];
        if (!this.is224) {
          arr.push((h7 >> 24) & 0xFF, (h7 >> 16) & 0xFF, (h7 >> 8) & 0xFF, h7 & 0xFF);
        }
        return arr;
      };
    
      Sha256.prototype.array = Sha256.prototype.digest;
    
      Sha256.prototype.arrayBuffer = function () {
        this.finalize();
    
        var buffer = new ArrayBuffer(this.is224 ? 28 : 32);
        var dataView = new DataView(buffer);
        dataView.setUint32(0, this.h0);
        dataView.setUint32(4, this.h1);
        dataView.setUint32(8, this.h2);
        dataView.setUint32(12, this.h3);
        dataView.setUint32(16, this.h4);
        dataView.setUint32(20, this.h5);
        dataView.setUint32(24, this.h6);
        if (!this.is224) {
          dataView.setUint32(28, this.h7);
        }
        return buffer;
      };
    
      function HmacSha256(key, is224, sharedMemory) {
        var i, type = typeof key;
        if (type === 'string') {
          var bytes = [], length = key.length, index = 0, code;
          for (i = 0; i < length; ++i) {
            code = key.charCodeAt(i);
            if (code < 0x80) {
              bytes[index++] = code;
            } else if (code < 0x800) {
              bytes[index++] = (0xc0 | (code >> 6));
              bytes[index++] = (0x80 | (code & 0x3f));
            } else if (code < 0xd800 || code >= 0xe000) {
              bytes[index++] = (0xe0 | (code >> 12));
              bytes[index++] = (0x80 | ((code >> 6) & 0x3f));
              bytes[index++] = (0x80 | (code & 0x3f));
            } else {
              code = 0x10000 + (((code & 0x3ff) << 10) | (key.charCodeAt(++i) & 0x3ff));
              bytes[index++] = (0xf0 | (code >> 18));
              bytes[index++] = (0x80 | ((code >> 12) & 0x3f));
              bytes[index++] = (0x80 | ((code >> 6) & 0x3f));
              bytes[index++] = (0x80 | (code & 0x3f));
            }
          }
          key = bytes;
        } else {
          if (type === 'object') {
            if (key === null) {
              throw new Error(ERROR);
            } else if (ARRAY_BUFFER && key.constructor === ArrayBuffer) {
              key = new Uint8Array(key);
            } else if (!Array.isArray(key)) {
              if (!ARRAY_BUFFER || !ArrayBuffer.isView(key)) {
                throw new Error(ERROR);
              }
            }
          } else {
            throw new Error(ERROR);
          }
        }
    
        if (key.length > 64) {
          key = (new Sha256(is224, true)).update(key).array();
        }
    
        var oKeyPad = [], iKeyPad = [];
        for (i = 0; i < 64; ++i) {
          var b = key[i] || 0;
          oKeyPad[i] = 0x5c ^ b;
          iKeyPad[i] = 0x36 ^ b;
        }
    
        Sha256.call(this, is224, sharedMemory);
    
        this.update(iKeyPad);
        this.oKeyPad = oKeyPad;
        this.inner = true;
        this.sharedMemory = sharedMemory;
      }
      HmacSha256.prototype = new Sha256();
    
      HmacSha256.prototype.finalize = function () {
        Sha256.prototype.finalize.call(this);
        if (this.inner) {
          this.inner = false;
          var innerHash = this.array();
          Sha256.call(this, this.is224, this.sharedMemory);
          this.update(this.oKeyPad);
          this.update(innerHash);
          Sha256.prototype.finalize.call(this);
        }
      };
    
      var exports = createMethod();
      exports.sha256 = exports;
      exports.sha224 = createMethod(true);
      exports.sha256.hmac = createHmacMethod();
      exports.sha224.hmac = createHmacMethod(true);
    
      if (COMMON_JS) {
        module.exports = exports;
      } else {
        root.sha256 = exports.sha256;
        root.sha224 = exports.sha224;
        if (AMD) {
          define(function () {
            return exports;
          });
        }
      }
    })();
    
    }).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
    },{"_process":33}],28:[function(require,module,exports){
    (function (global, factory) {
      typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
      typeof define === 'function' && define.amd ? define(factory) :
      (global = global || self, global.Mustache = factory());
    }(this, (function () { 'use strict';
    
      /*!
       * mustache.js - Logic-less {{mustache}} templates with JavaScript
       * http://github.com/janl/mustache.js
       */
    
      var objectToString = Object.prototype.toString;
      var isArray = Array.isArray || function isArrayPolyfill (object) {
        return objectToString.call(object) === '[object Array]';
      };
    
      function isFunction (object) {
        return typeof object === 'function';
      }
    
      /**
       * More correct typeof string handling array
       * which normally returns typeof 'object'
       */
      function typeStr (obj) {
        return isArray(obj) ? 'array' : typeof obj;
      }
    
      function escapeRegExp (string) {
        return string.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, '\\$&');
      }
    
      /**
       * Null safe way of checking whether or not an object,
       * including its prototype, has a given property
       */
      function hasProperty (obj, propName) {
        return obj != null && typeof obj === 'object' && (propName in obj);
      }
    
      /**
       * Safe way of detecting whether or not the given thing is a primitive and
       * whether it has the given property
       */
      function primitiveHasOwnProperty (primitive, propName) {
        return (
          primitive != null
          && typeof primitive !== 'object'
          && primitive.hasOwnProperty
          && primitive.hasOwnProperty(propName)
        );
      }
    
      // Workaround for https://issues.apache.org/jira/browse/COUCHDB-577
      // See https://github.com/janl/mustache.js/issues/189
      var regExpTest = RegExp.prototype.test;
      function testRegExp (re, string) {
        return regExpTest.call(re, string);
      }
    
      var nonSpaceRe = /\S/;
      function isWhitespace (string) {
        return !testRegExp(nonSpaceRe, string);
      }
    
      var entityMap = {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        "'": '&#39;',
        '/': '&#x2F;',
        '`': '&#x60;',
        '=': '&#x3D;'
      };
    
      function escapeHtml (string) {
        return String(string).replace(/[&<>"'`=\/]/g, function fromEntityMap (s) {
          return entityMap[s];
        });
      }
    
      var whiteRe = /\s*/;
      var spaceRe = /\s+/;
      var equalsRe = /\s*=/;
      var curlyRe = /\s*\}/;
      var tagRe = /#|\^|\/|>|\{|&|=|!/;
    
      /**
       * Breaks up the given `template` string into a tree of tokens. If the `tags`
       * argument is given here it must be an array with two string values: the
       * opening and closing tags used in the template (e.g. [ "<%", "%>" ]). Of
       * course, the default is to use mustaches (i.e. mustache.tags).
       *
       * A token is an array with at least 4 elements. The first element is the
       * mustache symbol that was used inside the tag, e.g. "#" or "&". If the tag
       * did not contain a symbol (i.e. {{myValue}}) this element is "name". For
       * all text that appears outside a symbol this element is "text".
       *
       * The second element of a token is its "value". For mustache tags this is
       * whatever else was inside the tag besides the opening symbol. For text tokens
       * this is the text itself.
       *
       * The third and fourth elements of the token are the start and end indices,
       * respectively, of the token in the original template.
       *
       * Tokens that are the root node of a subtree contain two more elements: 1) an
       * array of tokens in the subtree and 2) the index in the original template at
       * which the closing tag for that section begins.
       *
       * Tokens for partials also contain two more elements: 1) a string value of
       * indendation prior to that tag and 2) the index of that tag on that line -
       * eg a value of 2 indicates the partial is the third tag on this line.
       */
      function parseTemplate (template, tags) {
        if (!template)
          return [];
        var lineHasNonSpace = false;
        var sections = [];     // Stack to hold section tokens
        var tokens = [];       // Buffer to hold the tokens
        var spaces = [];       // Indices of whitespace tokens on the current line
        var hasTag = false;    // Is there a {{tag}} on the current line?
        var nonSpace = false;  // Is there a non-space char on the current line?
        var indentation = '';  // Tracks indentation for tags that use it
        var tagIndex = 0;      // Stores a count of number of tags encountered on a line
    
        // Strips all whitespace tokens array for the current line
        // if there was a {{#tag}} on it and otherwise only space.
        function stripSpace () {
          if (hasTag && !nonSpace) {
            while (spaces.length)
              delete tokens[spaces.pop()];
          } else {
            spaces = [];
          }
    
          hasTag = false;
          nonSpace = false;
        }
    
        var openingTagRe, closingTagRe, closingCurlyRe;
        function compileTags (tagsToCompile) {
          if (typeof tagsToCompile === 'string')
            tagsToCompile = tagsToCompile.split(spaceRe, 2);
    
          if (!isArray(tagsToCompile) || tagsToCompile.length !== 2)
            throw new Error('Invalid tags: ' + tagsToCompile);
    
          openingTagRe = new RegExp(escapeRegExp(tagsToCompile[0]) + '\\s*');
          closingTagRe = new RegExp('\\s*' + escapeRegExp(tagsToCompile[1]));
          closingCurlyRe = new RegExp('\\s*' + escapeRegExp('}' + tagsToCompile[1]));
        }
    
        compileTags(tags || mustache.tags);
    
        var scanner = new Scanner(template);
    
        var start, type, value, chr, token, openSection;
        while (!scanner.eos()) {
          start = scanner.pos;
    
          // Match any text between tags.
          value = scanner.scanUntil(openingTagRe);
    
          if (value) {
            for (var i = 0, valueLength = value.length; i < valueLength; ++i) {
              chr = value.charAt(i);
    
              if (isWhitespace(chr)) {
                spaces.push(tokens.length);
                indentation += chr;
              } else {
                nonSpace = true;
                lineHasNonSpace = true;
                indentation += ' ';
              }
    
              tokens.push([ 'text', chr, start, start + 1 ]);
              start += 1;
    
              // Check for whitespace on the current line.
              if (chr === '\n') {
                stripSpace();
                indentation = '';
                tagIndex = 0;
                lineHasNonSpace = false;
              }
            }
          }
    
          // Match the opening tag.
          if (!scanner.scan(openingTagRe))
            break;
    
          hasTag = true;
    
          // Get the tag type.
          type = scanner.scan(tagRe) || 'name';
          scanner.scan(whiteRe);
    
          // Get the tag value.
          if (type === '=') {
            value = scanner.scanUntil(equalsRe);
            scanner.scan(equalsRe);
            scanner.scanUntil(closingTagRe);
          } else if (type === '{') {
            value = scanner.scanUntil(closingCurlyRe);
            scanner.scan(curlyRe);
            scanner.scanUntil(closingTagRe);
            type = '&';
          } else {
            value = scanner.scanUntil(closingTagRe);
          }
    
          // Match the closing tag.
          if (!scanner.scan(closingTagRe))
            throw new Error('Unclosed tag at ' + scanner.pos);
    
          if (type == '>') {
            token = [ type, value, start, scanner.pos, indentation, tagIndex, lineHasNonSpace ];
          } else {
            token = [ type, value, start, scanner.pos ];
          }
          tagIndex++;
          tokens.push(token);
    
          if (type === '#' || type === '^') {
            sections.push(token);
          } else if (type === '/') {
            // Check section nesting.
            openSection = sections.pop();
    
            if (!openSection)
              throw new Error('Unopened section "' + value + '" at ' + start);
    
            if (openSection[1] !== value)
              throw new Error('Unclosed section "' + openSection[1] + '" at ' + start);
          } else if (type === 'name' || type === '{' || type === '&') {
            nonSpace = true;
          } else if (type === '=') {
            // Set the tags for the next time around.
            compileTags(value);
          }
        }
    
        stripSpace();
    
        // Make sure there are no open sections when we're done.
        openSection = sections.pop();
    
        if (openSection)
          throw new Error('Unclosed section "' + openSection[1] + '" at ' + scanner.pos);
    
        return nestTokens(squashTokens(tokens));
      }
    
      /**
       * Combines the values of consecutive text tokens in the given `tokens` array
       * to a single token.
       */
      function squashTokens (tokens) {
        var squashedTokens = [];
    
        var token, lastToken;
        for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {
          token = tokens[i];
    
          if (token) {
            if (token[0] === 'text' && lastToken && lastToken[0] === 'text') {
              lastToken[1] += token[1];
              lastToken[3] = token[3];
            } else {
              squashedTokens.push(token);
              lastToken = token;
            }
          }
        }
    
        return squashedTokens;
      }
    
      /**
       * Forms the given array of `tokens` into a nested tree structure where
       * tokens that represent a section have two additional items: 1) an array of
       * all tokens that appear in that section and 2) the index in the original
       * template that represents the end of that section.
       */
      function nestTokens (tokens) {
        var nestedTokens = [];
        var collector = nestedTokens;
        var sections = [];
    
        var token, section;
        for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {
          token = tokens[i];
    
          switch (token[0]) {
            case '#':
            case '^':
              collector.push(token);
              sections.push(token);
              collector = token[4] = [];
              break;
            case '/':
              section = sections.pop();
              section[5] = token[2];
              collector = sections.length > 0 ? sections[sections.length - 1][4] : nestedTokens;
              break;
            default:
              collector.push(token);
          }
        }
    
        return nestedTokens;
      }
    
      /**
       * A simple string scanner that is used by the template parser to find
       * tokens in template strings.
       */
      function Scanner (string) {
        this.string = string;
        this.tail = string;
        this.pos = 0;
      }
    
      /**
       * Returns `true` if the tail is empty (end of string).
       */
      Scanner.prototype.eos = function eos () {
        return this.tail === '';
      };
    
      /**
       * Tries to match the given regular expression at the current position.
       * Returns the matched text if it can match, the empty string otherwise.
       */
      Scanner.prototype.scan = function scan (re) {
        var match = this.tail.match(re);
    
        if (!match || match.index !== 0)
          return '';
    
        var string = match[0];
    
        this.tail = this.tail.substring(string.length);
        this.pos += string.length;
    
        return string;
      };
    
      /**
       * Skips all text until the given regular expression can be matched. Returns
       * the skipped string, which is the entire tail if no match can be made.
       */
      Scanner.prototype.scanUntil = function scanUntil (re) {
        var index = this.tail.search(re), match;
    
        switch (index) {
          case -1:
            match = this.tail;
            this.tail = '';
            break;
          case 0:
            match = '';
            break;
          default:
            match = this.tail.substring(0, index);
            this.tail = this.tail.substring(index);
        }
    
        this.pos += match.length;
    
        return match;
      };
    
      /**
       * Represents a rendering context by wrapping a view object and
       * maintaining a reference to the parent context.
       */
      function Context (view, parentContext) {
        this.view = view;
        this.cache = { '.': this.view };
        this.parent = parentContext;
      }
    
      /**
       * Creates a new context using the given view with this context
       * as the parent.
       */
      Context.prototype.push = function push (view) {
        return new Context(view, this);
      };
    
      /**
       * Returns the value of the given name in this context, traversing
       * up the context hierarchy if the value is absent in this context's view.
       */
      Context.prototype.lookup = function lookup (name) {
        var cache = this.cache;
    
        var value;
        if (cache.hasOwnProperty(name)) {
          value = cache[name];
        } else {
          var context = this, intermediateValue, names, index, lookupHit = false;
    
          while (context) {
            if (name.indexOf('.') > 0) {
              intermediateValue = context.view;
              names = name.split('.');
              index = 0;
    
              /**
               * Using the dot notion path in `name`, we descend through the
               * nested objects.
               *
               * To be certain that the lookup has been successful, we have to
               * check if the last object in the path actually has the property
               * we are looking for. We store the result in `lookupHit`.
               *
               * This is specially necessary for when the value has been set to
               * `undefined` and we want to avoid looking up parent contexts.
               *
               * In the case where dot notation is used, we consider the lookup
               * to be successful even if the last "object" in the path is
               * not actually an object but a primitive (e.g., a string, or an
               * integer), because it is sometimes useful to access a property
               * of an autoboxed primitive, such as the length of a string.
               **/
              while (intermediateValue != null && index < names.length) {
                if (index === names.length - 1)
                  lookupHit = (
                    hasProperty(intermediateValue, names[index])
                    || primitiveHasOwnProperty(intermediateValue, names[index])
                  );
    
                intermediateValue = intermediateValue[names[index++]];
              }
            } else {
              intermediateValue = context.view[name];
    
              /**
               * Only checking against `hasProperty`, which always returns `false` if
               * `context.view` is not an object. Deliberately omitting the check
               * against `primitiveHasOwnProperty` if dot notation is not used.
               *
               * Consider this example:
               * ```
               * Mustache.render("The length of a football field is {{#length}}{{length}}{{/length}}.", {length: "100 yards"})
               * ```
               *
               * If we were to check also against `primitiveHasOwnProperty`, as we do
               * in the dot notation case, then render call would return:
               *
               * "The length of a football field is 9."
               *
               * rather than the expected:
               *
               * "The length of a football field is 100 yards."
               **/
              lookupHit = hasProperty(context.view, name);
            }
    
            if (lookupHit) {
              value = intermediateValue;
              break;
            }
    
            context = context.parent;
          }
    
          cache[name] = value;
        }
    
        if (isFunction(value))
          value = value.call(this.view);
    
        return value;
      };
    
      /**
       * A Writer knows how to take a stream of tokens and render them to a
       * string, given a context. It also maintains a cache of templates to
       * avoid the need to parse the same template twice.
       */
      function Writer () {
        this.templateCache = {
          _cache: {},
          set: function set (key, value) {
            this._cache[key] = value;
          },
          get: function get (key) {
            return this._cache[key];
          },
          clear: function clear () {
            this._cache = {};
          }
        };
      }
    
      /**
       * Clears all cached templates in this writer.
       */
      Writer.prototype.clearCache = function clearCache () {
        if (typeof this.templateCache !== 'undefined') {
          this.templateCache.clear();
        }
      };
    
      /**
       * Parses and caches the given `template` according to the given `tags` or
       * `mustache.tags` if `tags` is omitted,  and returns the array of tokens
       * that is generated from the parse.
       */
      Writer.prototype.parse = function parse (template, tags) {
        var cache = this.templateCache;
        var cacheKey = template + ':' + (tags || mustache.tags).join(':');
        var isCacheEnabled = typeof cache !== 'undefined';
        var tokens = isCacheEnabled ? cache.get(cacheKey) : undefined;
    
        if (tokens == undefined) {
          tokens = parseTemplate(template, tags);
          isCacheEnabled && cache.set(cacheKey, tokens);
        }
        return tokens;
      };
    
      /**
       * High-level method that is used to render the given `template` with
       * the given `view`.
       *
       * The optional `partials` argument may be an object that contains the
       * names and templates of partials that are used in the template. It may
       * also be a function that is used to load partial templates on the fly
       * that takes a single argument: the name of the partial.
       *
       * If the optional `config` argument is given here, then it should be an
       * object with a `tags` attribute or an `escape` attribute or both.
       * If an array is passed, then it will be interpreted the same way as
       * a `tags` attribute on a `config` object.
       *
       * The `tags` attribute of a `config` object must be an array with two
       * string values: the opening and closing tags used in the template (e.g.
       * [ "<%", "%>" ]). The default is to mustache.tags.
       *
       * The `escape` attribute of a `config` object must be a function which
       * accepts a string as input and outputs a safely escaped string.
       * If an `escape` function is not provided, then an HTML-safe string
       * escaping function is used as the default.
       */
      Writer.prototype.render = function render (template, view, partials, config) {
        var tags = this.getConfigTags(config);
        var tokens = this.parse(template, tags);
        var context = (view instanceof Context) ? view : new Context(view, undefined);
        return this.renderTokens(tokens, context, partials, template, config);
      };
    
      /**
       * Low-level method that renders the given array of `tokens` using
       * the given `context` and `partials`.
       *
       * Note: The `originalTemplate` is only ever used to extract the portion
       * of the original template that was contained in a higher-order section.
       * If the template doesn't use higher-order sections, this argument may
       * be omitted.
       */
      Writer.prototype.renderTokens = function renderTokens (tokens, context, partials, originalTemplate, config) {
        var buffer = '';
    
        var token, symbol, value;
        for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {
          value = undefined;
          token = tokens[i];
          symbol = token[0];
    
          if (symbol === '#') value = this.renderSection(token, context, partials, originalTemplate, config);
          else if (symbol === '^') value = this.renderInverted(token, context, partials, originalTemplate, config);
          else if (symbol === '>') value = this.renderPartial(token, context, partials, config);
          else if (symbol === '&') value = this.unescapedValue(token, context);
          else if (symbol === 'name') value = this.escapedValue(token, context, config);
          else if (symbol === 'text') value = this.rawValue(token);
    
          if (value !== undefined)
            buffer += value;
        }
    
        return buffer;
      };
    
      Writer.prototype.renderSection = function renderSection (token, context, partials, originalTemplate, config) {
        var self = this;
        var buffer = '';
        var value = context.lookup(token[1]);
    
        // This function is used to render an arbitrary template
        // in the current context by higher-order sections.
        function subRender (template) {
          return self.render(template, context, partials, config);
        }
    
        if (!value) return;
    
        if (isArray(value)) {
          for (var j = 0, valueLength = value.length; j < valueLength; ++j) {
            buffer += this.renderTokens(token[4], context.push(value[j]), partials, originalTemplate, config);
          }
        } else if (typeof value === 'object' || typeof value === 'string' || typeof value === 'number') {
          buffer += this.renderTokens(token[4], context.push(value), partials, originalTemplate, config);
        } else if (isFunction(value)) {
          if (typeof originalTemplate !== 'string')
            throw new Error('Cannot use higher-order sections without the original template');
    
          // Extract the portion of the original template that the section contains.
          value = value.call(context.view, originalTemplate.slice(token[3], token[5]), subRender);
    
          if (value != null)
            buffer += value;
        } else {
          buffer += this.renderTokens(token[4], context, partials, originalTemplate, config);
        }
        return buffer;
      };
    
      Writer.prototype.renderInverted = function renderInverted (token, context, partials, originalTemplate, config) {
        var value = context.lookup(token[1]);
    
        // Use JavaScript's definition of falsy. Include empty arrays.
        // See https://github.com/janl/mustache.js/issues/186
        if (!value || (isArray(value) && value.length === 0))
          return this.renderTokens(token[4], context, partials, originalTemplate, config);
      };
    
      Writer.prototype.indentPartial = function indentPartial (partial, indentation, lineHasNonSpace) {
        var filteredIndentation = indentation.replace(/[^ \t]/g, '');
        var partialByNl = partial.split('\n');
        for (var i = 0; i < partialByNl.length; i++) {
          if (partialByNl[i].length && (i > 0 || !lineHasNonSpace)) {
            partialByNl[i] = filteredIndentation + partialByNl[i];
          }
        }
        return partialByNl.join('\n');
      };
    
      Writer.prototype.renderPartial = function renderPartial (token, context, partials, config) {
        if (!partials) return;
        var tags = this.getConfigTags(config);
    
        var value = isFunction(partials) ? partials(token[1]) : partials[token[1]];
        if (value != null) {
          var lineHasNonSpace = token[6];
          var tagIndex = token[5];
          var indentation = token[4];
          var indentedValue = value;
          if (tagIndex == 0 && indentation) {
            indentedValue = this.indentPartial(value, indentation, lineHasNonSpace);
          }
          var tokens = this.parse(indentedValue, tags);
          return this.renderTokens(tokens, context, partials, indentedValue, config);
        }
      };
    
      Writer.prototype.unescapedValue = function unescapedValue (token, context) {
        var value = context.lookup(token[1]);
        if (value != null)
          return value;
      };
    
      Writer.prototype.escapedValue = function escapedValue (token, context, config) {
        var escape = this.getConfigEscape(config) || mustache.escape;
        var value = context.lookup(token[1]);
        if (value != null)
          return (typeof value === 'number' && escape === mustache.escape) ? String(value) : escape(value);
      };
    
      Writer.prototype.rawValue = function rawValue (token) {
        return token[1];
      };
    
      Writer.prototype.getConfigTags = function getConfigTags (config) {
        if (isArray(config)) {
          return config;
        }
        else if (config && typeof config === 'object') {
          return config.tags;
        }
        else {
          return undefined;
        }
      };
    
      Writer.prototype.getConfigEscape = function getConfigEscape (config) {
        if (config && typeof config === 'object' && !isArray(config)) {
          return config.escape;
        }
        else {
          return undefined;
        }
      };
    
      var mustache = {
        name: 'mustache.js',
        version: '4.2.0',
        tags: [ '{{', '}}' ],
        clearCache: undefined,
        escape: undefined,
        parse: undefined,
        render: undefined,
        Scanner: undefined,
        Context: undefined,
        Writer: undefined,
        /**
         * Allows a user to override the default caching strategy, by providing an
         * object with set, get and clear methods. This can also be used to disable
         * the cache by setting it to the literal `undefined`.
         */
        set templateCache (cache) {
          defaultWriter.templateCache = cache;
        },
        /**
         * Gets the default or overridden caching object from the default writer.
         */
        get templateCache () {
          return defaultWriter.templateCache;
        }
      };
    
      // All high-level mustache.* functions use this writer.
      var defaultWriter = new Writer();
    
      /**
       * Clears all cached templates in the default writer.
       */
      mustache.clearCache = function clearCache () {
        return defaultWriter.clearCache();
      };
    
      /**
       * Parses and caches the given template in the default writer and returns the
       * array of tokens it contains. Doing this ahead of time avoids the need to
       * parse templates on the fly as they are rendered.
       */
      mustache.parse = function parse (template, tags) {
        return defaultWriter.parse(template, tags);
      };
    
      /**
       * Renders the `template` with the given `view`, `partials`, and `config`
       * using the default writer.
       */
      mustache.render = function render (template, view, partials, config) {
        if (typeof template !== 'string') {
          throw new TypeError('Invalid template! Template should be a "string" ' +
                              'but "' + typeStr(template) + '" was given as the first ' +
                              'argument for mustache#render(template, view, partials)');
        }
    
        return defaultWriter.render(template, view, partials, config);
      };
    
      // Export the escaping function so that the user may override it.
      // See https://github.com/janl/mustache.js/issues/244
      mustache.escape = escapeHtml;
    
      // Export these mainly for testing, but also for advanced usage.
      mustache.Scanner = Scanner;
      mustache.Context = Context;
      mustache.Writer = Writer;
    
      return mustache;
    
    })));
    
    },{}],29:[function(require,module,exports){
    require("capability/es5");
    
    module.exports = require("./lib");
    },{"./lib":32,"capability/es5":8}],30:[function(require,module,exports){
    var Class = function () {
        var options = Object.create({
            Source: Object,
            config: {},
            buildArgs: []
        });
    
        function checkOption(option) {
            var key = "config";
            if (option instanceof Function)
                key = "Source";
            else if (option instanceof Array)
                key = "buildArgs";
            else if (option instanceof Object)
                key = "config";
            else
                throw new Error("Invalid configuration option.");
            if (options.hasOwnProperty(key))
                throw new Error("Duplicated configuration option: " + key + ".");
            options[key] = option;
        }
    
        for (var index = 0, length = arguments.length; index < length; ++index)
            checkOption(arguments[index]);
    
        var Source = options.Source,
            config = options.config,
            buildArgs = options.buildArgs;
    
        return (Source.extend || Class.extend).call(Source, config, buildArgs);
    };
    
    Class.factory = function () {
        var Source = this;
        return function () {
            var instance = this;
            if (instance.build instanceof Function)
                instance.build.apply(instance, arguments);
            if (instance.init instanceof Function)
                instance.init.apply(instance, arguments);
        };
    };
    
    Class.extend = function (config, buildArgs) {
        var Source = this;
        if (!config)
            config = {};
        var Subject;
        if ((config.prototype instanceof Object) && config.prototype.constructor !== Object)
            Subject = config.prototype.constructor;
        else if (config.factory instanceof Function)
            Subject = config.factory.call(Source);
        Subject = (Source.clone || Class.clone).call(Source, Subject, buildArgs);
        (Subject.merge || Class.merge).call(Subject, config);
        return Subject;
    };
    
    Class.prototype.extend = function (config, buildArgs) {
        var subject = this;
        var instance = (subject.clone || Class.prototype.clone).apply(subject, buildArgs);
        (instance.merge || Class.prototype.merge).call(instance, config);
        return instance;
    };
    
    Class.clone = function (Subject, buildArgs) {
        var Source = this;
        if (!(Subject instanceof Function))
            Subject = (Source.factory || Class.factory).call(Source);
        Subject.prototype = (Source.prototype.clone || Class.prototype.clone).apply(Source.prototype, buildArgs || []);
        Subject.prototype.constructor = Subject;
        for (var staticProperty in Source)
            if (staticProperty !== "prototype")
                Subject[staticProperty] = Source[staticProperty];
        return Subject;
    };
    
    Class.prototype.clone = function () {
        var subject = this;
        var instance = Object.create(subject);
        if (instance.build instanceof Function)
            instance.build.apply(instance, arguments);
        return instance;
    };
    
    Class.merge = function (config) {
        var Subject = this;
        for (var staticProperty in config)
            if (staticProperty !== "prototype")
                Subject[staticProperty] = config[staticProperty];
        if (config.prototype instanceof Object)
            (Subject.prototype.merge || Class.prototype.merge).call(Subject.prototype, config.prototype);
        return Subject;
    };
    
    Class.prototype.merge = function (config) {
        var subject = this;
        for (var property in config)
            if (property !== "constructor")
                subject[property] = config[property];
        return subject;
    };
    
    Class.absorb = function (config) {
        var Subject = this;
        for (var staticProperty in config)
            if (staticProperty !== "prototype" && (Subject[staticProperty] === undefined || Subject[staticProperty] === Function.prototype[staticProperty]))
                Subject[staticProperty] = config[staticProperty];
        if (config.prototype instanceof Object)
            (Subject.prototype.absorb || Class.prototype.absorb).call(Subject.prototype, config.prototype);
        return Subject;
    };
    
    Class.prototype.absorb = function (config) {
        var subject = this;
        for (var property in config)
            if (property !== "constructor" && (subject[property] === undefined || subject[property] === Object.prototype[property]))
                subject[property] = config[property];
        return subject;
    };
    
    Class.getAncestor = function () {
        var Source = this;
        if (Source !== Source.prototype.constructor)
            return Source.prototype.constructor;
    };
    
    Class.newInstance = function () {
        var Subject = this;
        var instance = Object.create(this.prototype);
        Subject.apply(instance, arguments);
        return instance;
    };
    
    module.exports = Class;
    },{}],31:[function(require,module,exports){
    module.exports = function () {
        throw new Error("Not implemented.");
    };
    },{}],32:[function(require,module,exports){
    module.exports = {
        Class: require("./Class"),
        abstractMethod: require("./abstractMethod")
    };
    },{"./Class":30,"./abstractMethod":31}],33:[function(require,module,exports){
    // shim for using process in browser
    var process = module.exports = {};
    
    // cached from whatever global is present so that test runners that stub it
    // don't break things.  But we need to wrap it in a try catch in case it is
    // wrapped in strict mode code which doesn't define any globals.  It's inside a
    // function because try/catches deoptimize in certain engines.
    
    var cachedSetTimeout;
    var cachedClearTimeout;
    
    function defaultSetTimout() {
        throw new Error('setTimeout has not been defined');
    }
    function defaultClearTimeout () {
        throw new Error('clearTimeout has not been defined');
    }
    (function () {
        try {
            if (typeof setTimeout === 'function') {
                cachedSetTimeout = setTimeout;
            } else {
                cachedSetTimeout = defaultSetTimout;
            }
        } catch (e) {
            cachedSetTimeout = defaultSetTimout;
        }
        try {
            if (typeof clearTimeout === 'function') {
                cachedClearTimeout = clearTimeout;
            } else {
                cachedClearTimeout = defaultClearTimeout;
            }
        } catch (e) {
            cachedClearTimeout = defaultClearTimeout;
        }
    } ())
    function runTimeout(fun) {
        if (cachedSetTimeout === setTimeout) {
            //normal enviroments in sane situations
            return setTimeout(fun, 0);
        }
        // if setTimeout wasn't available but was latter defined
        if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
            cachedSetTimeout = setTimeout;
            return setTimeout(fun, 0);
        }
        try {
            // when when somebody has screwed with setTimeout but no I.E. maddness
            return cachedSetTimeout(fun, 0);
        } catch(e){
            try {
                // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
                return cachedSetTimeout.call(null, fun, 0);
            } catch(e){
                // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
                return cachedSetTimeout.call(this, fun, 0);
            }
        }
    
    
    }
    function runClearTimeout(marker) {
        if (cachedClearTimeout === clearTimeout) {
            //normal enviroments in sane situations
            return clearTimeout(marker);
        }
        // if clearTimeout wasn't available but was latter defined
        if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
            cachedClearTimeout = clearTimeout;
            return clearTimeout(marker);
        }
        try {
            // when when somebody has screwed with setTimeout but no I.E. maddness
            return cachedClearTimeout(marker);
        } catch (e){
            try {
                // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
                return cachedClearTimeout.call(null, marker);
            } catch (e){
                // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
                // Some versions of I.E. have different rules for clearTimeout vs setTimeout
                return cachedClearTimeout.call(this, marker);
            }
        }
    
    
    
    }
    var queue = [];
    var draining = false;
    var currentQueue;
    var queueIndex = -1;
    
    function cleanUpNextTick() {
        if (!draining || !currentQueue) {
            return;
        }
        draining = false;
        if (currentQueue.length) {
            queue = currentQueue.concat(queue);
        } else {
            queueIndex = -1;
        }
        if (queue.length) {
            drainQueue();
        }
    }
    
    function drainQueue() {
        if (draining) {
            return;
        }
        var timeout = runTimeout(cleanUpNextTick);
        draining = true;
    
        var len = queue.length;
        while(len) {
            currentQueue = queue;
            queue = [];
            while (++queueIndex < len) {
                if (currentQueue) {
                    currentQueue[queueIndex].run();
                }
            }
            queueIndex = -1;
            len = queue.length;
        }
        currentQueue = null;
        draining = false;
        runClearTimeout(timeout);
    }
    
    process.nextTick = function (fun) {
        var args = new Array(arguments.length - 1);
        if (arguments.length > 1) {
            for (var i = 1; i < arguments.length; i++) {
                args[i - 1] = arguments[i];
            }
        }
        queue.push(new Item(fun, args));
        if (queue.length === 1 && !draining) {
            runTimeout(drainQueue);
        }
    };
    
    // v8 likes predictible objects
    function Item(fun, array) {
        this.fun = fun;
        this.array = array;
    }
    Item.prototype.run = function () {
        this.fun.apply(null, this.array);
    };
    process.title = 'browser';
    process.browser = true;
    process.env = {};
    process.argv = [];
    process.version = ''; // empty string to avoid regexp issues
    process.versions = {};
    
    function noop() {}
    
    process.on = noop;
    process.addListener = noop;
    process.once = noop;
    process.off = noop;
    process.removeListener = noop;
    process.removeAllListeners = noop;
    process.emit = noop;
    process.prependListener = noop;
    process.prependOnceListener = noop;
    
    process.listeners = function (name) { return [] }
    
    process.binding = function (name) {
        throw new Error('process.binding is not supported');
    };
    
    process.cwd = function () { return '/' };
    process.chdir = function (dir) {
        throw new Error('process.chdir is not supported');
    };
    process.umask = function() { return 0; };
    
    },{}],34:[function(require,module,exports){
    /*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
    /* eslint-disable node/no-deprecated-api */
    var buffer = require('buffer')
    var Buffer = buffer.Buffer
    
    // alternative to using Object.keys for old browsers
    function copyProps (src, dst) {
      for (var key in src) {
        dst[key] = src[key]
      }
    }
    if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
      module.exports = buffer
    } else {
      // Copy properties from require('buffer')
      copyProps(buffer, exports)
      exports.Buffer = SafeBuffer
    }
    
    function SafeBuffer (arg, encodingOrOffset, length) {
      return Buffer(arg, encodingOrOffset, length)
    }
    
    SafeBuffer.prototype = Object.create(Buffer.prototype)
    
    // Copy static methods from Buffer
    copyProps(Buffer, SafeBuffer)
    
    SafeBuffer.from = function (arg, encodingOrOffset, length) {
      if (typeof arg === 'number') {
        throw new TypeError('Argument must not be a number')
      }
      return Buffer(arg, encodingOrOffset, length)
    }
    
    SafeBuffer.alloc = function (size, fill, encoding) {
      if (typeof size !== 'number') {
        throw new TypeError('Argument must be a number')
      }
      var buf = Buffer(size)
      if (fill !== undefined) {
        if (typeof encoding === 'string') {
          buf.fill(fill, encoding)
        } else {
          buf.fill(fill)
        }
      } else {
        buf.fill(0)
      }
      return buf
    }
    
    SafeBuffer.allocUnsafe = function (size) {
      if (typeof size !== 'number') {
        throw new TypeError('Argument must be a number')
      }
      return Buffer(size)
    }
    
    SafeBuffer.allocUnsafeSlow = function (size) {
      if (typeof size !== 'number') {
        throw new TypeError('Argument must be a number')
      }
      return buffer.SlowBuffer(size)
    }
    
    },{"buffer":7}],35:[function(require,module,exports){
    'use strict'
    /* eslint no-proto: 0 */
    module.exports = Object.setPrototypeOf || ({ __proto__: [] } instanceof Array ? setProtoOf : mixinProperties)
    
    function setProtoOf (obj, proto) {
      obj.__proto__ = proto
      return obj
    }
    
    function mixinProperties (obj, proto) {
      for (var prop in proto) {
        if (!Object.prototype.hasOwnProperty.call(obj, prop)) {
          obj[prop] = proto[prop]
        }
      }
      return obj
    }
    
    },{}],36:[function(require,module,exports){
    module.exports={
      "100": "Continue",
      "101": "Switching Protocols",
      "102": "Processing",
      "103": "Early Hints",
      "200": "OK",
      "201": "Created",
      "202": "Accepted",
      "203": "Non-Authoritative Information",
      "204": "No Content",
      "205": "Reset Content",
      "206": "Partial Content",
      "207": "Multi-Status",
      "208": "Already Reported",
      "226": "IM Used",
      "300": "Multiple Choices",
      "301": "Moved Permanently",
      "302": "Found",
      "303": "See Other",
      "304": "Not Modified",
      "305": "Use Proxy",
      "306": "(Unused)",
      "307": "Temporary Redirect",
      "308": "Permanent Redirect",
      "400": "Bad Request",
      "401": "Unauthorized",
      "402": "Payment Required",
      "403": "Forbidden",
      "404": "Not Found",
      "405": "Method Not Allowed",
      "406": "Not Acceptable",
      "407": "Proxy Authentication Required",
      "408": "Request Timeout",
      "409": "Conflict",
      "410": "Gone",
      "411": "Length Required",
      "412": "Precondition Failed",
      "413": "Payload Too Large",
      "414": "URI Too Long",
      "415": "Unsupported Media Type",
      "416": "Range Not Satisfiable",
      "417": "Expectation Failed",
      "418": "I'm a teapot",
      "421": "Misdirected Request",
      "422": "Unprocessable Entity",
      "423": "Locked",
      "424": "Failed Dependency",
      "425": "Unordered Collection",
      "426": "Upgrade Required",
      "428": "Precondition Required",
      "429": "Too Many Requests",
      "431": "Request Header Fields Too Large",
      "451": "Unavailable For Legal Reasons",
      "500": "Internal Server Error",
      "501": "Not Implemented",
      "502": "Bad Gateway",
      "503": "Service Unavailable",
      "504": "Gateway Timeout",
      "505": "HTTP Version Not Supported",
      "506": "Variant Also Negotiates",
      "507": "Insufficient Storage",
      "508": "Loop Detected",
      "509": "Bandwidth Limit Exceeded",
      "510": "Not Extended",
      "511": "Network Authentication Required"
    }
    
    },{}],37:[function(require,module,exports){
    /*!
     * statuses
     * Copyright(c) 2014 Jonathan Ong
     * Copyright(c) 2016 Douglas Christopher Wilson
     * MIT Licensed
     */
    
    'use strict'
    
    /**
     * Module dependencies.
     * @private
     */
    
    var codes = require('./codes.json')
    
    /**
     * Module exports.
     * @public
     */
    
    module.exports = status
    
    // status code to message map
    status.STATUS_CODES = codes
    
    // array of status codes
    status.codes = populateStatusesMap(status, codes)
    
    // status codes for redirects
    status.redirect = {
      300: true,
      301: true,
      302: true,
      303: true,
      305: true,
      307: true,
      308: true
    }
    
    // status codes for empty bodies
    status.empty = {
      204: true,
      205: true,
      304: true
    }
    
    // status codes for when you should retry the request
    status.retry = {
      502: true,
      503: true,
      504: true
    }
    
    /**
     * Populate the statuses map for given codes.
     * @private
     */
    
    function populateStatusesMap (statuses, codes) {
      var arr = []
    
      Object.keys(codes).forEach(function forEachCode (code) {
        var message = codes[code]
        var status = Number(code)
    
        // Populate properties
        statuses[status] = message
        statuses[message] = status
        statuses[message.toLowerCase()] = status
    
        // Add to array
        arr.push(status)
      })
    
      return arr
    }
    
    /**
     * Get the status code.
     *
     * Given a number, this will throw if it is not a known status
     * code, otherwise the code will be returned. Given a string,
     * the string will be parsed for a number and return the code
     * if valid, otherwise will lookup the code assuming this is
     * the status message.
     *
     * @param {string|number} code
     * @returns {number}
     * @public
     */
    
    function status (code) {
      if (typeof code === 'number') {
        if (!status[code]) throw new Error('invalid status code: ' + code)
        return code
      }
    
      if (typeof code !== 'string') {
        throw new TypeError('code must be a number or string')
      }
    
      // '403'
      var n = parseInt(code, 10)
      if (!isNaN(n)) {
        if (!status[n]) throw new Error('invalid status code: ' + n)
        return n
      }
    
      n = status[code.toLowerCase()]
      if (!n) throw new Error('invalid status message: "' + code + '"')
      return n
    }
    
    },{"./codes.json":36}],38:[function(require,module,exports){
    'use strict';
    
    // This is free and unencumbered software released into the public domain.
    // See LICENSE.md for more information.
    
    //
    // Utilities
    //
    
    /**
     * @param {number} a The number to test.
     * @param {number} min The minimum value in the range, inclusive.
     * @param {number} max The maximum value in the range, inclusive.
     * @return {boolean} True if a >= min and a <= max.
     */
    function inRange(a, min, max) {
      return min <= a && a <= max;
    }
    
    /**
     * @param {*} o
     * @return {Object}
     */
    function ToDictionary(o) {
      if (o === undefined) return {};
      if (o === Object(o)) return o;
      throw TypeError('Could not convert argument to dictionary');
    }
    
    /**
     * @param {string} string Input string of UTF-16 code units.
     * @return {!Array.<number>} Code points.
     */
    function stringToCodePoints(string) {
      // https://heycam.github.io/webidl/#dfn-obtain-unicode
    
      // 1. Let S be the DOMString value.
      var s = String(string);
    
      // 2. Let n be the length of S.
      var n = s.length;
    
      // 3. Initialize i to 0.
      var i = 0;
    
      // 4. Initialize U to be an empty sequence of Unicode characters.
      var u = [];
    
      // 5. While i < n:
      while (i < n) {
    
        // 1. Let c be the code unit in S at index i.
        var c = s.charCodeAt(i);
    
        // 2. Depending on the value of c:
    
        // c < 0xD800 or c > 0xDFFF
        if (c < 0xD800 || c > 0xDFFF) {
          // Append to U the Unicode character with code point c.
          u.push(c);
        }
    
        // 0xDC00 ≤ c ≤ 0xDFFF
        else if (0xDC00 <= c && c <= 0xDFFF) {
          // Append to U a U+FFFD REPLACEMENT CHARACTER.
          u.push(0xFFFD);
        }
    
        // 0xD800 ≤ c ≤ 0xDBFF
        else if (0xD800 <= c && c <= 0xDBFF) {
          // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT
          // CHARACTER.
          if (i === n - 1) {
            u.push(0xFFFD);
          }
          // 2. Otherwise, i < n−1:
          else {
            // 1. Let d be the code unit in S at index i+1.
            var d = string.charCodeAt(i + 1);
    
            // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:
            if (0xDC00 <= d && d <= 0xDFFF) {
              // 1. Let a be c & 0x3FF.
              var a = c & 0x3FF;
    
              // 2. Let b be d & 0x3FF.
              var b = d & 0x3FF;
    
              // 3. Append to U the Unicode character with code point
              // 2^16+2^10*a+b.
              u.push(0x10000 + (a << 10) + b);
    
              // 4. Set i to i+1.
              i += 1;
            }
    
            // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a
            // U+FFFD REPLACEMENT CHARACTER.
            else  {
              u.push(0xFFFD);
            }
          }
        }
    
        // 3. Set i to i+1.
        i += 1;
      }
    
      // 6. Return U.
      return u;
    }
    
    /**
     * @param {!Array.<number>} code_points Array of code points.
     * @return {string} string String of UTF-16 code units.
     */
    function codePointsToString(code_points) {
      var s = '';
      for (var i = 0; i < code_points.length; ++i) {
        var cp = code_points[i];
        if (cp <= 0xFFFF) {
          s += String.fromCharCode(cp);
        } else {
          cp -= 0x10000;
          s += String.fromCharCode((cp >> 10) + 0xD800,
                                   (cp & 0x3FF) + 0xDC00);
        }
      }
      return s;
    }
    
    
    //
    // Implementation of Encoding specification
    // https://encoding.spec.whatwg.org/
    //
    
    //
    // 3. Terminology
    //
    
    /**
     * End-of-stream is a special token that signifies no more tokens
     * are in the stream.
     * @const
     */ var end_of_stream = -1;
    
    /**
     * A stream represents an ordered sequence of tokens.
     *
     * @constructor
     * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide the
     * stream.
     */
    function Stream(tokens) {
      /** @type {!Array.<number>} */
      this.tokens = [].slice.call(tokens);
    }
    
    Stream.prototype = {
      /**
       * @return {boolean} True if end-of-stream has been hit.
       */
      endOfStream: function() {
        return !this.tokens.length;
      },
    
      /**
       * When a token is read from a stream, the first token in the
       * stream must be returned and subsequently removed, and
       * end-of-stream must be returned otherwise.
       *
       * @return {number} Get the next token from the stream, or
       * end_of_stream.
       */
       read: function() {
        if (!this.tokens.length)
          return end_of_stream;
         return this.tokens.shift();
       },
    
      /**
       * When one or more tokens are prepended to a stream, those tokens
       * must be inserted, in given order, before the first token in the
       * stream.
       *
       * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.
       */
      prepend: function(token) {
        if (Array.isArray(token)) {
          var tokens = /**@type {!Array.<number>}*/(token);
          while (tokens.length)
            this.tokens.unshift(tokens.pop());
        } else {
          this.tokens.unshift(token);
        }
      },
    
      /**
       * When one or more tokens are pushed to a stream, those tokens
       * must be inserted, in given order, after the last token in the
       * stream.
       *
       * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.
       */
      push: function(token) {
        if (Array.isArray(token)) {
          var tokens = /**@type {!Array.<number>}*/(token);
          while (tokens.length)
            this.tokens.push(tokens.shift());
        } else {
          this.tokens.push(token);
        }
      }
    };
    
    //
    // 4. Encodings
    //
    
    // 4.1 Encoders and decoders
    
    /** @const */
    var finished = -1;
    
    /**
     * @param {boolean} fatal If true, decoding errors raise an exception.
     * @param {number=} opt_code_point Override the standard fallback code point.
     * @return {number} The code point to insert on a decoding error.
     */
    function decoderError(fatal, opt_code_point) {
      if (fatal)
        throw TypeError('Decoder error');
      return opt_code_point || 0xFFFD;
    }
    
    //
    // 7. API
    //
    
    /** @const */ var DEFAULT_ENCODING = 'utf-8';
    
    // 7.1 Interface TextDecoder
    
    /**
     * @constructor
     * @param {string=} encoding The label of the encoding;
     *     defaults to 'utf-8'.
     * @param {Object=} options
     */
    function TextDecoder(encoding, options) {
      if (!(this instanceof TextDecoder)) {
        return new TextDecoder(encoding, options);
      }
      encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;
      if (encoding !== DEFAULT_ENCODING) {
        throw new Error('Encoding not supported. Only utf-8 is supported');
      }
      options = ToDictionary(options);
    
      /** @private @type {boolean} */
      this._streaming = false;
      /** @private @type {boolean} */
      this._BOMseen = false;
      /** @private @type {?Decoder} */
      this._decoder = null;
      /** @private @type {boolean} */
      this._fatal = Boolean(options['fatal']);
      /** @private @type {boolean} */
      this._ignoreBOM = Boolean(options['ignoreBOM']);
    
      Object.defineProperty(this, 'encoding', {value: 'utf-8'});
      Object.defineProperty(this, 'fatal', {value: this._fatal});
      Object.defineProperty(this, 'ignoreBOM', {value: this._ignoreBOM});
    }
    
    TextDecoder.prototype = {
      /**
       * @param {ArrayBufferView=} input The buffer of bytes to decode.
       * @param {Object=} options
       * @return {string} The decoded string.
       */
      decode: function decode(input, options) {
        var bytes;
        if (typeof input === 'object' && input instanceof ArrayBuffer) {
          bytes = new Uint8Array(input);
        } else if (typeof input === 'object' && 'buffer' in input &&
                   input.buffer instanceof ArrayBuffer) {
          bytes = new Uint8Array(input.buffer,
                                 input.byteOffset,
                                 input.byteLength);
        } else {
          bytes = new Uint8Array(0);
        }
    
        options = ToDictionary(options);
    
        if (!this._streaming) {
          this._decoder = new UTF8Decoder({fatal: this._fatal});
          this._BOMseen = false;
        }
        this._streaming = Boolean(options['stream']);
    
        var input_stream = new Stream(bytes);
    
        var code_points = [];
    
        /** @type {?(number|!Array.<number>)} */
        var result;
    
        while (!input_stream.endOfStream()) {
          result = this._decoder.handler(input_stream, input_stream.read());
          if (result === finished)
            break;
          if (result === null)
            continue;
          if (Array.isArray(result))
            code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));
          else
            code_points.push(result);
        }
        if (!this._streaming) {
          do {
            result = this._decoder.handler(input_stream, input_stream.read());
            if (result === finished)
              break;
            if (result === null)
              continue;
            if (Array.isArray(result))
              code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));
            else
              code_points.push(result);
          } while (!input_stream.endOfStream());
          this._decoder = null;
        }
    
        if (code_points.length) {
          // If encoding is one of utf-8, utf-16be, and utf-16le, and
          // ignore BOM flag and BOM seen flag are unset, run these
          // subsubsteps:
          if (['utf-8'].indexOf(this.encoding) !== -1 &&
              !this._ignoreBOM && !this._BOMseen) {
            // If token is U+FEFF, set BOM seen flag.
            if (code_points[0] === 0xFEFF) {
              this._BOMseen = true;
              code_points.shift();
            } else {
              // Otherwise, if token is not end-of-stream, set BOM seen
              // flag and append token to output.
              this._BOMseen = true;
            }
          }
        }
    
        return codePointsToString(code_points);
      }
    };
    
    // 7.2 Interface TextEncoder
    
    /**
     * @constructor
     * @param {string=} encoding The label of the encoding;
     *     defaults to 'utf-8'.
     * @param {Object=} options
     */
    function TextEncoder(encoding, options) {
      if (!(this instanceof TextEncoder))
        return new TextEncoder(encoding, options);
      encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;
      if (encoding !== DEFAULT_ENCODING) {
        throw new Error('Encoding not supported. Only utf-8 is supported');
      }
      options = ToDictionary(options);
    
      /** @private @type {boolean} */
      this._streaming = false;
      /** @private @type {?Encoder} */
      this._encoder = null;
      /** @private @type {{fatal: boolean}} */
      this._options = {fatal: Boolean(options['fatal'])};
    
      Object.defineProperty(this, 'encoding', {value: 'utf-8'});
    }
    
    TextEncoder.prototype = {
      /**
       * @param {string=} opt_string The string to encode.
       * @param {Object=} options
       * @return {Uint8Array} Encoded bytes, as a Uint8Array.
       */
      encode: function encode(opt_string, options) {
        opt_string = opt_string ? String(opt_string) : '';
        options = ToDictionary(options);
    
        // NOTE: This option is nonstandard. None of the encodings
        // permitted for encoding (i.e. UTF-8, UTF-16) are stateful,
        // so streaming is not necessary.
        if (!this._streaming)
          this._encoder = new UTF8Encoder(this._options);
        this._streaming = Boolean(options['stream']);
    
        var bytes = [];
        var input_stream = new Stream(stringToCodePoints(opt_string));
        /** @type {?(number|!Array.<number>)} */
        var result;
        while (!input_stream.endOfStream()) {
          result = this._encoder.handler(input_stream, input_stream.read());
          if (result === finished)
            break;
          if (Array.isArray(result))
            bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));
          else
            bytes.push(result);
        }
        if (!this._streaming) {
          while (true) {
            result = this._encoder.handler(input_stream, input_stream.read());
            if (result === finished)
              break;
            if (Array.isArray(result))
              bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));
            else
              bytes.push(result);
          }
          this._encoder = null;
        }
        return new Uint8Array(bytes);
      }
    };
    
    //
    // 8. The encoding
    //
    
    // 8.1 utf-8
    
    /**
     * @constructor
     * @implements {Decoder}
     * @param {{fatal: boolean}} options
     */
    function UTF8Decoder(options) {
      var fatal = options.fatal;
    
      // utf-8's decoder's has an associated utf-8 code point, utf-8
      // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8
      // lower boundary (initially 0x80), and a utf-8 upper boundary
      // (initially 0xBF).
      var /** @type {number} */ utf8_code_point = 0,
          /** @type {number} */ utf8_bytes_seen = 0,
          /** @type {number} */ utf8_bytes_needed = 0,
          /** @type {number} */ utf8_lower_boundary = 0x80,
          /** @type {number} */ utf8_upper_boundary = 0xBF;
    
      /**
       * @param {Stream} stream The stream of bytes being decoded.
       * @param {number} bite The next byte read from the stream.
       * @return {?(number|!Array.<number>)} The next code point(s)
       *     decoded, or null if not enough data exists in the input
       *     stream to decode a complete code point.
       */
      this.handler = function(stream, bite) {
        // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,
        // set utf-8 bytes needed to 0 and return error.
        if (bite === end_of_stream && utf8_bytes_needed !== 0) {
          utf8_bytes_needed = 0;
          return decoderError(fatal);
        }
    
        // 2. If byte is end-of-stream, return finished.
        if (bite === end_of_stream)
          return finished;
    
        // 3. If utf-8 bytes needed is 0, based on byte:
        if (utf8_bytes_needed === 0) {
    
          // 0x00 to 0x7F
          if (inRange(bite, 0x00, 0x7F)) {
            // Return a code point whose value is byte.
            return bite;
          }
    
          // 0xC2 to 0xDF
          if (inRange(bite, 0xC2, 0xDF)) {
            // Set utf-8 bytes needed to 1 and utf-8 code point to byte
            // − 0xC0.
            utf8_bytes_needed = 1;
            utf8_code_point = bite - 0xC0;
          }
    
          // 0xE0 to 0xEF
          else if (inRange(bite, 0xE0, 0xEF)) {
            // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.
            if (bite === 0xE0)
              utf8_lower_boundary = 0xA0;
            // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.
            if (bite === 0xED)
              utf8_upper_boundary = 0x9F;
            // 3. Set utf-8 bytes needed to 2 and utf-8 code point to
            // byte − 0xE0.
            utf8_bytes_needed = 2;
            utf8_code_point = bite - 0xE0;
          }
    
          // 0xF0 to 0xF4
          else if (inRange(bite, 0xF0, 0xF4)) {
            // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.
            if (bite === 0xF0)
              utf8_lower_boundary = 0x90;
            // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.
            if (bite === 0xF4)
              utf8_upper_boundary = 0x8F;
            // 3. Set utf-8 bytes needed to 3 and utf-8 code point to
            // byte − 0xF0.
            utf8_bytes_needed = 3;
            utf8_code_point = bite - 0xF0;
          }
    
          // Otherwise
          else {
            // Return error.
            return decoderError(fatal);
          }
    
          // Then (byte is in the range 0xC2 to 0xF4) set utf-8 code
          // point to utf-8 code point << (6 × utf-8 bytes needed) and
          // return continue.
          utf8_code_point = utf8_code_point << (6 * utf8_bytes_needed);
          return null;
        }
    
        // 4. If byte is not in the range utf-8 lower boundary to utf-8
        // upper boundary, run these substeps:
        if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {
    
          // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8
          // bytes seen to 0, set utf-8 lower boundary to 0x80, and set
          // utf-8 upper boundary to 0xBF.
          utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;
          utf8_lower_boundary = 0x80;
          utf8_upper_boundary = 0xBF;
    
          // 2. Prepend byte to stream.
          stream.prepend(bite);
    
          // 3. Return error.
          return decoderError(fatal);
        }
    
        // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary
        // to 0xBF.
        utf8_lower_boundary = 0x80;
        utf8_upper_boundary = 0xBF;
    
        // 6. Increase utf-8 bytes seen by one and set utf-8 code point
        // to utf-8 code point + (byte − 0x80) << (6 × (utf-8 bytes
        // needed − utf-8 bytes seen)).
        utf8_bytes_seen += 1;
        utf8_code_point += (bite - 0x80) << (6 * (utf8_bytes_needed - utf8_bytes_seen));
    
        // 7. If utf-8 bytes seen is not equal to utf-8 bytes needed,
        // continue.
        if (utf8_bytes_seen !== utf8_bytes_needed)
          return null;
    
        // 8. Let code point be utf-8 code point.
        var code_point = utf8_code_point;
    
        // 9. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes
        // seen to 0.
        utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;
    
        // 10. Return a code point whose value is code point.
        return code_point;
      };
    }
    
    /**
     * @constructor
     * @implements {Encoder}
     * @param {{fatal: boolean}} options
     */
    function UTF8Encoder(options) {
      var fatal = options.fatal;
      /**
       * @param {Stream} stream Input stream.
       * @param {number} code_point Next code point read from the stream.
       * @return {(number|!Array.<number>)} Byte(s) to emit.
       */
      this.handler = function(stream, code_point) {
        // 1. If code point is end-of-stream, return finished.
        if (code_point === end_of_stream)
          return finished;
    
        // 2. If code point is in the range U+0000 to U+007F, return a
        // byte whose value is code point.
        if (inRange(code_point, 0x0000, 0x007f))
          return code_point;
    
        // 3. Set count and offset based on the range code point is in:
        var count, offset;
        // U+0080 to U+07FF:    1 and 0xC0
        if (inRange(code_point, 0x0080, 0x07FF)) {
          count = 1;
          offset = 0xC0;
        }
        // U+0800 to U+FFFF:    2 and 0xE0
        else if (inRange(code_point, 0x0800, 0xFFFF)) {
          count = 2;
          offset = 0xE0;
        }
        // U+10000 to U+10FFFF: 3 and 0xF0
        else if (inRange(code_point, 0x10000, 0x10FFFF)) {
          count = 3;
          offset = 0xF0;
        }
    
        // 4.Let bytes be a byte sequence whose first byte is (code
        // point >> (6 × count)) + offset.
        var bytes = [(code_point >> (6 * count)) + offset];
    
        // 5. Run these substeps while count is greater than 0:
        while (count > 0) {
    
          // 1. Set temp to code point >> (6 × (count − 1)).
          var temp = code_point >> (6 * (count - 1));
    
          // 2. Append to bytes 0x80 | (temp & 0x3F).
          bytes.push(0x80 | (temp & 0x3F));
    
          // 3. Decrease count by one.
          count -= 1;
        }
    
        // 6. Return bytes bytes, in order.
        return bytes;
      };
    }
    
    exports.TextEncoder = TextEncoder;
    exports.TextDecoder = TextDecoder;
    },{}],39:[function(require,module,exports){
    /*!
     * toidentifier
     * Copyright(c) 2016 Douglas Christopher Wilson
     * MIT Licensed
     */
    
    'use strict'
    
    /**
     * Module exports.
     * @public
     */
    
    module.exports = toIdentifier
    
    /**
     * Trasform the given string into a JavaScript identifier
     *
     * @param {string} str
     * @returns {string}
     * @public
     */
    
    function toIdentifier (str) {
      return str
        .split(' ')
        .map(function (token) {
          return token.slice(0, 1).toUpperCase() + token.slice(1)
        })
        .join('')
        .replace(/[^ _0-9a-z]/gi, '')
    }
    
    },{}],40:[function(require,module,exports){
    (function(nacl) {
    'use strict';
    
    // Ported in 2014 by Dmitry Chestnykh and Devi Mandiri.
    // Public domain.
    //
    // Implementation derived from TweetNaCl version 20140427.
    // See for details: http://tweetnacl.cr.yp.to/
    
    var gf = function(init) {
      var i, r = new Float64Array(16);
      if (init) for (i = 0; i < init.length; i++) r[i] = init[i];
      return r;
    };
    
    //  Pluggable, initialized in high-level API below.
    var randombytes = function(/* x, n */) { throw new Error('no PRNG'); };
    
    var _0 = new Uint8Array(16);
    var _9 = new Uint8Array(32); _9[0] = 9;
    
    var gf0 = gf(),
        gf1 = gf([1]),
        _121665 = gf([0xdb41, 1]),
        D = gf([0x78a3, 0x1359, 0x4dca, 0x75eb, 0xd8ab, 0x4141, 0x0a4d, 0x0070, 0xe898, 0x7779, 0x4079, 0x8cc7, 0xfe73, 0x2b6f, 0x6cee, 0x5203]),
        D2 = gf([0xf159, 0x26b2, 0x9b94, 0xebd6, 0xb156, 0x8283, 0x149a, 0x00e0, 0xd130, 0xeef3, 0x80f2, 0x198e, 0xfce7, 0x56df, 0xd9dc, 0x2406]),
        X = gf([0xd51a, 0x8f25, 0x2d60, 0xc956, 0xa7b2, 0x9525, 0xc760, 0x692c, 0xdc5c, 0xfdd6, 0xe231, 0xc0a4, 0x53fe, 0xcd6e, 0x36d3, 0x2169]),
        Y = gf([0x6658, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666]),
        I = gf([0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7, 0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83]);
    
    function ts64(x, i, h, l) {
      x[i]   = (h >> 24) & 0xff;
      x[i+1] = (h >> 16) & 0xff;
      x[i+2] = (h >>  8) & 0xff;
      x[i+3] = h & 0xff;
      x[i+4] = (l >> 24)  & 0xff;
      x[i+5] = (l >> 16)  & 0xff;
      x[i+6] = (l >>  8)  & 0xff;
      x[i+7] = l & 0xff;
    }
    
    function vn(x, xi, y, yi, n) {
      var i,d = 0;
      for (i = 0; i < n; i++) d |= x[xi+i]^y[yi+i];
      return (1 & ((d - 1) >>> 8)) - 1;
    }
    
    function crypto_verify_16(x, xi, y, yi) {
      return vn(x,xi,y,yi,16);
    }
    
    function crypto_verify_32(x, xi, y, yi) {
      return vn(x,xi,y,yi,32);
    }
    
    function core_salsa20(o, p, k, c) {
      var j0  = c[ 0] & 0xff | (c[ 1] & 0xff)<<8 | (c[ 2] & 0xff)<<16 | (c[ 3] & 0xff)<<24,
          j1  = k[ 0] & 0xff | (k[ 1] & 0xff)<<8 | (k[ 2] & 0xff)<<16 | (k[ 3] & 0xff)<<24,
          j2  = k[ 4] & 0xff | (k[ 5] & 0xff)<<8 | (k[ 6] & 0xff)<<16 | (k[ 7] & 0xff)<<24,
          j3  = k[ 8] & 0xff | (k[ 9] & 0xff)<<8 | (k[10] & 0xff)<<16 | (k[11] & 0xff)<<24,
          j4  = k[12] & 0xff | (k[13] & 0xff)<<8 | (k[14] & 0xff)<<16 | (k[15] & 0xff)<<24,
          j5  = c[ 4] & 0xff | (c[ 5] & 0xff)<<8 | (c[ 6] & 0xff)<<16 | (c[ 7] & 0xff)<<24,
          j6  = p[ 0] & 0xff | (p[ 1] & 0xff)<<8 | (p[ 2] & 0xff)<<16 | (p[ 3] & 0xff)<<24,
          j7  = p[ 4] & 0xff | (p[ 5] & 0xff)<<8 | (p[ 6] & 0xff)<<16 | (p[ 7] & 0xff)<<24,
          j8  = p[ 8] & 0xff | (p[ 9] & 0xff)<<8 | (p[10] & 0xff)<<16 | (p[11] & 0xff)<<24,
          j9  = p[12] & 0xff | (p[13] & 0xff)<<8 | (p[14] & 0xff)<<16 | (p[15] & 0xff)<<24,
          j10 = c[ 8] & 0xff | (c[ 9] & 0xff)<<8 | (c[10] & 0xff)<<16 | (c[11] & 0xff)<<24,
          j11 = k[16] & 0xff | (k[17] & 0xff)<<8 | (k[18] & 0xff)<<16 | (k[19] & 0xff)<<24,
          j12 = k[20] & 0xff | (k[21] & 0xff)<<8 | (k[22] & 0xff)<<16 | (k[23] & 0xff)<<24,
          j13 = k[24] & 0xff | (k[25] & 0xff)<<8 | (k[26] & 0xff)<<16 | (k[27] & 0xff)<<24,
          j14 = k[28] & 0xff | (k[29] & 0xff)<<8 | (k[30] & 0xff)<<16 | (k[31] & 0xff)<<24,
          j15 = c[12] & 0xff | (c[13] & 0xff)<<8 | (c[14] & 0xff)<<16 | (c[15] & 0xff)<<24;
    
      var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7,
          x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14,
          x15 = j15, u;
    
      for (var i = 0; i < 20; i += 2) {
        u = x0 + x12 | 0;
        x4 ^= u<<7 | u>>>(32-7);
        u = x4 + x0 | 0;
        x8 ^= u<<9 | u>>>(32-9);
        u = x8 + x4 | 0;
        x12 ^= u<<13 | u>>>(32-13);
        u = x12 + x8 | 0;
        x0 ^= u<<18 | u>>>(32-18);
    
        u = x5 + x1 | 0;
        x9 ^= u<<7 | u>>>(32-7);
        u = x9 + x5 | 0;
        x13 ^= u<<9 | u>>>(32-9);
        u = x13 + x9 | 0;
        x1 ^= u<<13 | u>>>(32-13);
        u = x1 + x13 | 0;
        x5 ^= u<<18 | u>>>(32-18);
    
        u = x10 + x6 | 0;
        x14 ^= u<<7 | u>>>(32-7);
        u = x14 + x10 | 0;
        x2 ^= u<<9 | u>>>(32-9);
        u = x2 + x14 | 0;
        x6 ^= u<<13 | u>>>(32-13);
        u = x6 + x2 | 0;
        x10 ^= u<<18 | u>>>(32-18);
    
        u = x15 + x11 | 0;
        x3 ^= u<<7 | u>>>(32-7);
        u = x3 + x15 | 0;
        x7 ^= u<<9 | u>>>(32-9);
        u = x7 + x3 | 0;
        x11 ^= u<<13 | u>>>(32-13);
        u = x11 + x7 | 0;
        x15 ^= u<<18 | u>>>(32-18);
    
        u = x0 + x3 | 0;
        x1 ^= u<<7 | u>>>(32-7);
        u = x1 + x0 | 0;
        x2 ^= u<<9 | u>>>(32-9);
        u = x2 + x1 | 0;
        x3 ^= u<<13 | u>>>(32-13);
        u = x3 + x2 | 0;
        x0 ^= u<<18 | u>>>(32-18);
    
        u = x5 + x4 | 0;
        x6 ^= u<<7 | u>>>(32-7);
        u = x6 + x5 | 0;
        x7 ^= u<<9 | u>>>(32-9);
        u = x7 + x6 | 0;
        x4 ^= u<<13 | u>>>(32-13);
        u = x4 + x7 | 0;
        x5 ^= u<<18 | u>>>(32-18);
    
        u = x10 + x9 | 0;
        x11 ^= u<<7 | u>>>(32-7);
        u = x11 + x10 | 0;
        x8 ^= u<<9 | u>>>(32-9);
        u = x8 + x11 | 0;
        x9 ^= u<<13 | u>>>(32-13);
        u = x9 + x8 | 0;
        x10 ^= u<<18 | u>>>(32-18);
    
        u = x15 + x14 | 0;
        x12 ^= u<<7 | u>>>(32-7);
        u = x12 + x15 | 0;
        x13 ^= u<<9 | u>>>(32-9);
        u = x13 + x12 | 0;
        x14 ^= u<<13 | u>>>(32-13);
        u = x14 + x13 | 0;
        x15 ^= u<<18 | u>>>(32-18);
      }
       x0 =  x0 +  j0 | 0;
       x1 =  x1 +  j1 | 0;
       x2 =  x2 +  j2 | 0;
       x3 =  x3 +  j3 | 0;
       x4 =  x4 +  j4 | 0;
       x5 =  x5 +  j5 | 0;
       x6 =  x6 +  j6 | 0;
       x7 =  x7 +  j7 | 0;
       x8 =  x8 +  j8 | 0;
       x9 =  x9 +  j9 | 0;
      x10 = x10 + j10 | 0;
      x11 = x11 + j11 | 0;
      x12 = x12 + j12 | 0;
      x13 = x13 + j13 | 0;
      x14 = x14 + j14 | 0;
      x15 = x15 + j15 | 0;
    
      o[ 0] = x0 >>>  0 & 0xff;
      o[ 1] = x0 >>>  8 & 0xff;
      o[ 2] = x0 >>> 16 & 0xff;
      o[ 3] = x0 >>> 24 & 0xff;
    
      o[ 4] = x1 >>>  0 & 0xff;
      o[ 5] = x1 >>>  8 & 0xff;
      o[ 6] = x1 >>> 16 & 0xff;
      o[ 7] = x1 >>> 24 & 0xff;
    
      o[ 8] = x2 >>>  0 & 0xff;
      o[ 9] = x2 >>>  8 & 0xff;
      o[10] = x2 >>> 16 & 0xff;
      o[11] = x2 >>> 24 & 0xff;
    
      o[12] = x3 >>>  0 & 0xff;
      o[13] = x3 >>>  8 & 0xff;
      o[14] = x3 >>> 16 & 0xff;
      o[15] = x3 >>> 24 & 0xff;
    
      o[16] = x4 >>>  0 & 0xff;
      o[17] = x4 >>>  8 & 0xff;
      o[18] = x4 >>> 16 & 0xff;
      o[19] = x4 >>> 24 & 0xff;
    
      o[20] = x5 >>>  0 & 0xff;
      o[21] = x5 >>>  8 & 0xff;
      o[22] = x5 >>> 16 & 0xff;
      o[23] = x5 >>> 24 & 0xff;
    
      o[24] = x6 >>>  0 & 0xff;
      o[25] = x6 >>>  8 & 0xff;
      o[26] = x6 >>> 16 & 0xff;
      o[27] = x6 >>> 24 & 0xff;
    
      o[28] = x7 >>>  0 & 0xff;
      o[29] = x7 >>>  8 & 0xff;
      o[30] = x7 >>> 16 & 0xff;
      o[31] = x7 >>> 24 & 0xff;
    
      o[32] = x8 >>>  0 & 0xff;
      o[33] = x8 >>>  8 & 0xff;
      o[34] = x8 >>> 16 & 0xff;
      o[35] = x8 >>> 24 & 0xff;
    
      o[36] = x9 >>>  0 & 0xff;
      o[37] = x9 >>>  8 & 0xff;
      o[38] = x9 >>> 16 & 0xff;
      o[39] = x9 >>> 24 & 0xff;
    
      o[40] = x10 >>>  0 & 0xff;
      o[41] = x10 >>>  8 & 0xff;
      o[42] = x10 >>> 16 & 0xff;
      o[43] = x10 >>> 24 & 0xff;
    
      o[44] = x11 >>>  0 & 0xff;
      o[45] = x11 >>>  8 & 0xff;
      o[46] = x11 >>> 16 & 0xff;
      o[47] = x11 >>> 24 & 0xff;
    
      o[48] = x12 >>>  0 & 0xff;
      o[49] = x12 >>>  8 & 0xff;
      o[50] = x12 >>> 16 & 0xff;
      o[51] = x12 >>> 24 & 0xff;
    
      o[52] = x13 >>>  0 & 0xff;
      o[53] = x13 >>>  8 & 0xff;
      o[54] = x13 >>> 16 & 0xff;
      o[55] = x13 >>> 24 & 0xff;
    
      o[56] = x14 >>>  0 & 0xff;
      o[57] = x14 >>>  8 & 0xff;
      o[58] = x14 >>> 16 & 0xff;
      o[59] = x14 >>> 24 & 0xff;
    
      o[60] = x15 >>>  0 & 0xff;
      o[61] = x15 >>>  8 & 0xff;
      o[62] = x15 >>> 16 & 0xff;
      o[63] = x15 >>> 24 & 0xff;
    }
    
    function core_hsalsa20(o,p,k,c) {
      var j0  = c[ 0] & 0xff | (c[ 1] & 0xff)<<8 | (c[ 2] & 0xff)<<16 | (c[ 3] & 0xff)<<24,
          j1  = k[ 0] & 0xff | (k[ 1] & 0xff)<<8 | (k[ 2] & 0xff)<<16 | (k[ 3] & 0xff)<<24,
          j2  = k[ 4] & 0xff | (k[ 5] & 0xff)<<8 | (k[ 6] & 0xff)<<16 | (k[ 7] & 0xff)<<24,
          j3  = k[ 8] & 0xff | (k[ 9] & 0xff)<<8 | (k[10] & 0xff)<<16 | (k[11] & 0xff)<<24,
          j4  = k[12] & 0xff | (k[13] & 0xff)<<8 | (k[14] & 0xff)<<16 | (k[15] & 0xff)<<24,
          j5  = c[ 4] & 0xff | (c[ 5] & 0xff)<<8 | (c[ 6] & 0xff)<<16 | (c[ 7] & 0xff)<<24,
          j6  = p[ 0] & 0xff | (p[ 1] & 0xff)<<8 | (p[ 2] & 0xff)<<16 | (p[ 3] & 0xff)<<24,
          j7  = p[ 4] & 0xff | (p[ 5] & 0xff)<<8 | (p[ 6] & 0xff)<<16 | (p[ 7] & 0xff)<<24,
          j8  = p[ 8] & 0xff | (p[ 9] & 0xff)<<8 | (p[10] & 0xff)<<16 | (p[11] & 0xff)<<24,
          j9  = p[12] & 0xff | (p[13] & 0xff)<<8 | (p[14] & 0xff)<<16 | (p[15] & 0xff)<<24,
          j10 = c[ 8] & 0xff | (c[ 9] & 0xff)<<8 | (c[10] & 0xff)<<16 | (c[11] & 0xff)<<24,
          j11 = k[16] & 0xff | (k[17] & 0xff)<<8 | (k[18] & 0xff)<<16 | (k[19] & 0xff)<<24,
          j12 = k[20] & 0xff | (k[21] & 0xff)<<8 | (k[22] & 0xff)<<16 | (k[23] & 0xff)<<24,
          j13 = k[24] & 0xff | (k[25] & 0xff)<<8 | (k[26] & 0xff)<<16 | (k[27] & 0xff)<<24,
          j14 = k[28] & 0xff | (k[29] & 0xff)<<8 | (k[30] & 0xff)<<16 | (k[31] & 0xff)<<24,
          j15 = c[12] & 0xff | (c[13] & 0xff)<<8 | (c[14] & 0xff)<<16 | (c[15] & 0xff)<<24;
    
      var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7,
          x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14,
          x15 = j15, u;
    
      for (var i = 0; i < 20; i += 2) {
        u = x0 + x12 | 0;
        x4 ^= u<<7 | u>>>(32-7);
        u = x4 + x0 | 0;
        x8 ^= u<<9 | u>>>(32-9);
        u = x8 + x4 | 0;
        x12 ^= u<<13 | u>>>(32-13);
        u = x12 + x8 | 0;
        x0 ^= u<<18 | u>>>(32-18);
    
        u = x5 + x1 | 0;
        x9 ^= u<<7 | u>>>(32-7);
        u = x9 + x5 | 0;
        x13 ^= u<<9 | u>>>(32-9);
        u = x13 + x9 | 0;
        x1 ^= u<<13 | u>>>(32-13);
        u = x1 + x13 | 0;
        x5 ^= u<<18 | u>>>(32-18);
    
        u = x10 + x6 | 0;
        x14 ^= u<<7 | u>>>(32-7);
        u = x14 + x10 | 0;
        x2 ^= u<<9 | u>>>(32-9);
        u = x2 + x14 | 0;
        x6 ^= u<<13 | u>>>(32-13);
        u = x6 + x2 | 0;
        x10 ^= u<<18 | u>>>(32-18);
    
        u = x15 + x11 | 0;
        x3 ^= u<<7 | u>>>(32-7);
        u = x3 + x15 | 0;
        x7 ^= u<<9 | u>>>(32-9);
        u = x7 + x3 | 0;
        x11 ^= u<<13 | u>>>(32-13);
        u = x11 + x7 | 0;
        x15 ^= u<<18 | u>>>(32-18);
    
        u = x0 + x3 | 0;
        x1 ^= u<<7 | u>>>(32-7);
        u = x1 + x0 | 0;
        x2 ^= u<<9 | u>>>(32-9);
        u = x2 + x1 | 0;
        x3 ^= u<<13 | u>>>(32-13);
        u = x3 + x2 | 0;
        x0 ^= u<<18 | u>>>(32-18);
    
        u = x5 + x4 | 0;
        x6 ^= u<<7 | u>>>(32-7);
        u = x6 + x5 | 0;
        x7 ^= u<<9 | u>>>(32-9);
        u = x7 + x6 | 0;
        x4 ^= u<<13 | u>>>(32-13);
        u = x4 + x7 | 0;
        x5 ^= u<<18 | u>>>(32-18);
    
        u = x10 + x9 | 0;
        x11 ^= u<<7 | u>>>(32-7);
        u = x11 + x10 | 0;
        x8 ^= u<<9 | u>>>(32-9);
        u = x8 + x11 | 0;
        x9 ^= u<<13 | u>>>(32-13);
        u = x9 + x8 | 0;
        x10 ^= u<<18 | u>>>(32-18);
    
        u = x15 + x14 | 0;
        x12 ^= u<<7 | u>>>(32-7);
        u = x12 + x15 | 0;
        x13 ^= u<<9 | u>>>(32-9);
        u = x13 + x12 | 0;
        x14 ^= u<<13 | u>>>(32-13);
        u = x14 + x13 | 0;
        x15 ^= u<<18 | u>>>(32-18);
      }
    
      o[ 0] = x0 >>>  0 & 0xff;
      o[ 1] = x0 >>>  8 & 0xff;
      o[ 2] = x0 >>> 16 & 0xff;
      o[ 3] = x0 >>> 24 & 0xff;
    
      o[ 4] = x5 >>>  0 & 0xff;
      o[ 5] = x5 >>>  8 & 0xff;
      o[ 6] = x5 >>> 16 & 0xff;
      o[ 7] = x5 >>> 24 & 0xff;
    
      o[ 8] = x10 >>>  0 & 0xff;
      o[ 9] = x10 >>>  8 & 0xff;
      o[10] = x10 >>> 16 & 0xff;
      o[11] = x10 >>> 24 & 0xff;
    
      o[12] = x15 >>>  0 & 0xff;
      o[13] = x15 >>>  8 & 0xff;
      o[14] = x15 >>> 16 & 0xff;
      o[15] = x15 >>> 24 & 0xff;
    
      o[16] = x6 >>>  0 & 0xff;
      o[17] = x6 >>>  8 & 0xff;
      o[18] = x6 >>> 16 & 0xff;
      o[19] = x6 >>> 24 & 0xff;
    
      o[20] = x7 >>>  0 & 0xff;
      o[21] = x7 >>>  8 & 0xff;
      o[22] = x7 >>> 16 & 0xff;
      o[23] = x7 >>> 24 & 0xff;
    
      o[24] = x8 >>>  0 & 0xff;
      o[25] = x8 >>>  8 & 0xff;
      o[26] = x8 >>> 16 & 0xff;
      o[27] = x8 >>> 24 & 0xff;
    
      o[28] = x9 >>>  0 & 0xff;
      o[29] = x9 >>>  8 & 0xff;
      o[30] = x9 >>> 16 & 0xff;
      o[31] = x9 >>> 24 & 0xff;
    }
    
    function crypto_core_salsa20(out,inp,k,c) {
      core_salsa20(out,inp,k,c);
    }
    
    function crypto_core_hsalsa20(out,inp,k,c) {
      core_hsalsa20(out,inp,k,c);
    }
    
    var sigma = new Uint8Array([101, 120, 112, 97, 110, 100, 32, 51, 50, 45, 98, 121, 116, 101, 32, 107]);
                // "expand 32-byte k"
    
    function crypto_stream_salsa20_xor(c,cpos,m,mpos,b,n,k) {
      var z = new Uint8Array(16), x = new Uint8Array(64);
      var u, i;
      for (i = 0; i < 16; i++) z[i] = 0;
      for (i = 0; i < 8; i++) z[i] = n[i];
      while (b >= 64) {
        crypto_core_salsa20(x,z,k,sigma);
        for (i = 0; i < 64; i++) c[cpos+i] = m[mpos+i] ^ x[i];
        u = 1;
        for (i = 8; i < 16; i++) {
          u = u + (z[i] & 0xff) | 0;
          z[i] = u & 0xff;
          u >>>= 8;
        }
        b -= 64;
        cpos += 64;
        mpos += 64;
      }
      if (b > 0) {
        crypto_core_salsa20(x,z,k,sigma);
        for (i = 0; i < b; i++) c[cpos+i] = m[mpos+i] ^ x[i];
      }
      return 0;
    }
    
    function crypto_stream_salsa20(c,cpos,b,n,k) {
      var z = new Uint8Array(16), x = new Uint8Array(64);
      var u, i;
      for (i = 0; i < 16; i++) z[i] = 0;
      for (i = 0; i < 8; i++) z[i] = n[i];
      while (b >= 64) {
        crypto_core_salsa20(x,z,k,sigma);
        for (i = 0; i < 64; i++) c[cpos+i] = x[i];
        u = 1;
        for (i = 8; i < 16; i++) {
          u = u + (z[i] & 0xff) | 0;
          z[i] = u & 0xff;
          u >>>= 8;
        }
        b -= 64;
        cpos += 64;
      }
      if (b > 0) {
        crypto_core_salsa20(x,z,k,sigma);
        for (i = 0; i < b; i++) c[cpos+i] = x[i];
      }
      return 0;
    }
    
    function crypto_stream(c,cpos,d,n,k) {
      var s = new Uint8Array(32);
      crypto_core_hsalsa20(s,n,k,sigma);
      var sn = new Uint8Array(8);
      for (var i = 0; i < 8; i++) sn[i] = n[i+16];
      return crypto_stream_salsa20(c,cpos,d,sn,s);
    }
    
    function crypto_stream_xor(c,cpos,m,mpos,d,n,k) {
      var s = new Uint8Array(32);
      crypto_core_hsalsa20(s,n,k,sigma);
      var sn = new Uint8Array(8);
      for (var i = 0; i < 8; i++) sn[i] = n[i+16];
      return crypto_stream_salsa20_xor(c,cpos,m,mpos,d,sn,s);
    }
    
    /*
    * Port of Andrew Moon's Poly1305-donna-16. Public domain.
    * https://github.com/floodyberry/poly1305-donna
    */
    
    var poly1305 = function(key) {
      this.buffer = new Uint8Array(16);
      this.r = new Uint16Array(10);
      this.h = new Uint16Array(10);
      this.pad = new Uint16Array(8);
      this.leftover = 0;
      this.fin = 0;
    
      var t0, t1, t2, t3, t4, t5, t6, t7;
    
      t0 = key[ 0] & 0xff | (key[ 1] & 0xff) << 8; this.r[0] = ( t0                     ) & 0x1fff;
      t1 = key[ 2] & 0xff | (key[ 3] & 0xff) << 8; this.r[1] = ((t0 >>> 13) | (t1 <<  3)) & 0x1fff;
      t2 = key[ 4] & 0xff | (key[ 5] & 0xff) << 8; this.r[2] = ((t1 >>> 10) | (t2 <<  6)) & 0x1f03;
      t3 = key[ 6] & 0xff | (key[ 7] & 0xff) << 8; this.r[3] = ((t2 >>>  7) | (t3 <<  9)) & 0x1fff;
      t4 = key[ 8] & 0xff | (key[ 9] & 0xff) << 8; this.r[4] = ((t3 >>>  4) | (t4 << 12)) & 0x00ff;
      this.r[5] = ((t4 >>>  1)) & 0x1ffe;
      t5 = key[10] & 0xff | (key[11] & 0xff) << 8; this.r[6] = ((t4 >>> 14) | (t5 <<  2)) & 0x1fff;
      t6 = key[12] & 0xff | (key[13] & 0xff) << 8; this.r[7] = ((t5 >>> 11) | (t6 <<  5)) & 0x1f81;
      t7 = key[14] & 0xff | (key[15] & 0xff) << 8; this.r[8] = ((t6 >>>  8) | (t7 <<  8)) & 0x1fff;
      this.r[9] = ((t7 >>>  5)) & 0x007f;
    
      this.pad[0] = key[16] & 0xff | (key[17] & 0xff) << 8;
      this.pad[1] = key[18] & 0xff | (key[19] & 0xff) << 8;
      this.pad[2] = key[20] & 0xff | (key[21] & 0xff) << 8;
      this.pad[3] = key[22] & 0xff | (key[23] & 0xff) << 8;
      this.pad[4] = key[24] & 0xff | (key[25] & 0xff) << 8;
      this.pad[5] = key[26] & 0xff | (key[27] & 0xff) << 8;
      this.pad[6] = key[28] & 0xff | (key[29] & 0xff) << 8;
      this.pad[7] = key[30] & 0xff | (key[31] & 0xff) << 8;
    };
    
    poly1305.prototype.blocks = function(m, mpos, bytes) {
      var hibit = this.fin ? 0 : (1 << 11);
      var t0, t1, t2, t3, t4, t5, t6, t7, c;
      var d0, d1, d2, d3, d4, d5, d6, d7, d8, d9;
    
      var h0 = this.h[0],
          h1 = this.h[1],
          h2 = this.h[2],
          h3 = this.h[3],
          h4 = this.h[4],
          h5 = this.h[5],
          h6 = this.h[6],
          h7 = this.h[7],
          h8 = this.h[8],
          h9 = this.h[9];
    
      var r0 = this.r[0],
          r1 = this.r[1],
          r2 = this.r[2],
          r3 = this.r[3],
          r4 = this.r[4],
          r5 = this.r[5],
          r6 = this.r[6],
          r7 = this.r[7],
          r8 = this.r[8],
          r9 = this.r[9];
    
      while (bytes >= 16) {
        t0 = m[mpos+ 0] & 0xff | (m[mpos+ 1] & 0xff) << 8; h0 += ( t0                     ) & 0x1fff;
        t1 = m[mpos+ 2] & 0xff | (m[mpos+ 3] & 0xff) << 8; h1 += ((t0 >>> 13) | (t1 <<  3)) & 0x1fff;
        t2 = m[mpos+ 4] & 0xff | (m[mpos+ 5] & 0xff) << 8; h2 += ((t1 >>> 10) | (t2 <<  6)) & 0x1fff;
        t3 = m[mpos+ 6] & 0xff | (m[mpos+ 7] & 0xff) << 8; h3 += ((t2 >>>  7) | (t3 <<  9)) & 0x1fff;
        t4 = m[mpos+ 8] & 0xff | (m[mpos+ 9] & 0xff) << 8; h4 += ((t3 >>>  4) | (t4 << 12)) & 0x1fff;
        h5 += ((t4 >>>  1)) & 0x1fff;
        t5 = m[mpos+10] & 0xff | (m[mpos+11] & 0xff) << 8; h6 += ((t4 >>> 14) | (t5 <<  2)) & 0x1fff;
        t6 = m[mpos+12] & 0xff | (m[mpos+13] & 0xff) << 8; h7 += ((t5 >>> 11) | (t6 <<  5)) & 0x1fff;
        t7 = m[mpos+14] & 0xff | (m[mpos+15] & 0xff) << 8; h8 += ((t6 >>>  8) | (t7 <<  8)) & 0x1fff;
        h9 += ((t7 >>> 5)) | hibit;
    
        c = 0;
    
        d0 = c;
        d0 += h0 * r0;
        d0 += h1 * (5 * r9);
        d0 += h2 * (5 * r8);
        d0 += h3 * (5 * r7);
        d0 += h4 * (5 * r6);
        c = (d0 >>> 13); d0 &= 0x1fff;
        d0 += h5 * (5 * r5);
        d0 += h6 * (5 * r4);
        d0 += h7 * (5 * r3);
        d0 += h8 * (5 * r2);
        d0 += h9 * (5 * r1);
        c += (d0 >>> 13); d0 &= 0x1fff;
    
        d1 = c;
        d1 += h0 * r1;
        d1 += h1 * r0;
        d1 += h2 * (5 * r9);
        d1 += h3 * (5 * r8);
        d1 += h4 * (5 * r7);
        c = (d1 >>> 13); d1 &= 0x1fff;
        d1 += h5 * (5 * r6);
        d1 += h6 * (5 * r5);
        d1 += h7 * (5 * r4);
        d1 += h8 * (5 * r3);
        d1 += h9 * (5 * r2);
        c += (d1 >>> 13); d1 &= 0x1fff;
    
        d2 = c;
        d2 += h0 * r2;
        d2 += h1 * r1;
        d2 += h2 * r0;
        d2 += h3 * (5 * r9);
        d2 += h4 * (5 * r8);
        c = (d2 >>> 13); d2 &= 0x1fff;
        d2 += h5 * (5 * r7);
        d2 += h6 * (5 * r6);
        d2 += h7 * (5 * r5);
        d2 += h8 * (5 * r4);
        d2 += h9 * (5 * r3);
        c += (d2 >>> 13); d2 &= 0x1fff;
    
        d3 = c;
        d3 += h0 * r3;
        d3 += h1 * r2;
        d3 += h2 * r1;
        d3 += h3 * r0;
        d3 += h4 * (5 * r9);
        c = (d3 >>> 13); d3 &= 0x1fff;
        d3 += h5 * (5 * r8);
        d3 += h6 * (5 * r7);
        d3 += h7 * (5 * r6);
        d3 += h8 * (5 * r5);
        d3 += h9 * (5 * r4);
        c += (d3 >>> 13); d3 &= 0x1fff;
    
        d4 = c;
        d4 += h0 * r4;
        d4 += h1 * r3;
        d4 += h2 * r2;
        d4 += h3 * r1;
        d4 += h4 * r0;
        c = (d4 >>> 13); d4 &= 0x1fff;
        d4 += h5 * (5 * r9);
        d4 += h6 * (5 * r8);
        d4 += h7 * (5 * r7);
        d4 += h8 * (5 * r6);
        d4 += h9 * (5 * r5);
        c += (d4 >>> 13); d4 &= 0x1fff;
    
        d5 = c;
        d5 += h0 * r5;
        d5 += h1 * r4;
        d5 += h2 * r3;
        d5 += h3 * r2;
        d5 += h4 * r1;
        c = (d5 >>> 13); d5 &= 0x1fff;
        d5 += h5 * r0;
        d5 += h6 * (5 * r9);
        d5 += h7 * (5 * r8);
        d5 += h8 * (5 * r7);
        d5 += h9 * (5 * r6);
        c += (d5 >>> 13); d5 &= 0x1fff;
    
        d6 = c;
        d6 += h0 * r6;
        d6 += h1 * r5;
        d6 += h2 * r4;
        d6 += h3 * r3;
        d6 += h4 * r2;
        c = (d6 >>> 13); d6 &= 0x1fff;
        d6 += h5 * r1;
        d6 += h6 * r0;
        d6 += h7 * (5 * r9);
        d6 += h8 * (5 * r8);
        d6 += h9 * (5 * r7);
        c += (d6 >>> 13); d6 &= 0x1fff;
    
        d7 = c;
        d7 += h0 * r7;
        d7 += h1 * r6;
        d7 += h2 * r5;
        d7 += h3 * r4;
        d7 += h4 * r3;
        c = (d7 >>> 13); d7 &= 0x1fff;
        d7 += h5 * r2;
        d7 += h6 * r1;
        d7 += h7 * r0;
        d7 += h8 * (5 * r9);
        d7 += h9 * (5 * r8);
        c += (d7 >>> 13); d7 &= 0x1fff;
    
        d8 = c;
        d8 += h0 * r8;
        d8 += h1 * r7;
        d8 += h2 * r6;
        d8 += h3 * r5;
        d8 += h4 * r4;
        c = (d8 >>> 13); d8 &= 0x1fff;
        d8 += h5 * r3;
        d8 += h6 * r2;
        d8 += h7 * r1;
        d8 += h8 * r0;
        d8 += h9 * (5 * r9);
        c += (d8 >>> 13); d8 &= 0x1fff;
    
        d9 = c;
        d9 += h0 * r9;
        d9 += h1 * r8;
        d9 += h2 * r7;
        d9 += h3 * r6;
        d9 += h4 * r5;
        c = (d9 >>> 13); d9 &= 0x1fff;
        d9 += h5 * r4;
        d9 += h6 * r3;
        d9 += h7 * r2;
        d9 += h8 * r1;
        d9 += h9 * r0;
        c += (d9 >>> 13); d9 &= 0x1fff;
    
        c = (((c << 2) + c)) | 0;
        c = (c + d0) | 0;
        d0 = c & 0x1fff;
        c = (c >>> 13);
        d1 += c;
    
        h0 = d0;
        h1 = d1;
        h2 = d2;
        h3 = d3;
        h4 = d4;
        h5 = d5;
        h6 = d6;
        h7 = d7;
        h8 = d8;
        h9 = d9;
    
        mpos += 16;
        bytes -= 16;
      }
      this.h[0] = h0;
      this.h[1] = h1;
      this.h[2] = h2;
      this.h[3] = h3;
      this.h[4] = h4;
      this.h[5] = h5;
      this.h[6] = h6;
      this.h[7] = h7;
      this.h[8] = h8;
      this.h[9] = h9;
    };
    
    poly1305.prototype.finish = function(mac, macpos) {
      var g = new Uint16Array(10);
      var c, mask, f, i;
    
      if (this.leftover) {
        i = this.leftover;
        this.buffer[i++] = 1;
        for (; i < 16; i++) this.buffer[i] = 0;
        this.fin = 1;
        this.blocks(this.buffer, 0, 16);
      }
    
      c = this.h[1] >>> 13;
      this.h[1] &= 0x1fff;
      for (i = 2; i < 10; i++) {
        this.h[i] += c;
        c = this.h[i] >>> 13;
        this.h[i] &= 0x1fff;
      }
      this.h[0] += (c * 5);
      c = this.h[0] >>> 13;
      this.h[0] &= 0x1fff;
      this.h[1] += c;
      c = this.h[1] >>> 13;
      this.h[1] &= 0x1fff;
      this.h[2] += c;
    
      g[0] = this.h[0] + 5;
      c = g[0] >>> 13;
      g[0] &= 0x1fff;
      for (i = 1; i < 10; i++) {
        g[i] = this.h[i] + c;
        c = g[i] >>> 13;
        g[i] &= 0x1fff;
      }
      g[9] -= (1 << 13);
    
      mask = (c ^ 1) - 1;
      for (i = 0; i < 10; i++) g[i] &= mask;
      mask = ~mask;
      for (i = 0; i < 10; i++) this.h[i] = (this.h[i] & mask) | g[i];
    
      this.h[0] = ((this.h[0]       ) | (this.h[1] << 13)                    ) & 0xffff;
      this.h[1] = ((this.h[1] >>>  3) | (this.h[2] << 10)                    ) & 0xffff;
      this.h[2] = ((this.h[2] >>>  6) | (this.h[3] <<  7)                    ) & 0xffff;
      this.h[3] = ((this.h[3] >>>  9) | (this.h[4] <<  4)                    ) & 0xffff;
      this.h[4] = ((this.h[4] >>> 12) | (this.h[5] <<  1) | (this.h[6] << 14)) & 0xffff;
      this.h[5] = ((this.h[6] >>>  2) | (this.h[7] << 11)                    ) & 0xffff;
      this.h[6] = ((this.h[7] >>>  5) | (this.h[8] <<  8)                    ) & 0xffff;
      this.h[7] = ((this.h[8] >>>  8) | (this.h[9] <<  5)                    ) & 0xffff;
    
      f = this.h[0] + this.pad[0];
      this.h[0] = f & 0xffff;
      for (i = 1; i < 8; i++) {
        f = (((this.h[i] + this.pad[i]) | 0) + (f >>> 16)) | 0;
        this.h[i] = f & 0xffff;
      }
    
      mac[macpos+ 0] = (this.h[0] >>> 0) & 0xff;
      mac[macpos+ 1] = (this.h[0] >>> 8) & 0xff;
      mac[macpos+ 2] = (this.h[1] >>> 0) & 0xff;
      mac[macpos+ 3] = (this.h[1] >>> 8) & 0xff;
      mac[macpos+ 4] = (this.h[2] >>> 0) & 0xff;
      mac[macpos+ 5] = (this.h[2] >>> 8) & 0xff;
      mac[macpos+ 6] = (this.h[3] >>> 0) & 0xff;
      mac[macpos+ 7] = (this.h[3] >>> 8) & 0xff;
      mac[macpos+ 8] = (this.h[4] >>> 0) & 0xff;
      mac[macpos+ 9] = (this.h[4] >>> 8) & 0xff;
      mac[macpos+10] = (this.h[5] >>> 0) & 0xff;
      mac[macpos+11] = (this.h[5] >>> 8) & 0xff;
      mac[macpos+12] = (this.h[6] >>> 0) & 0xff;
      mac[macpos+13] = (this.h[6] >>> 8) & 0xff;
      mac[macpos+14] = (this.h[7] >>> 0) & 0xff;
      mac[macpos+15] = (this.h[7] >>> 8) & 0xff;
    };
    
    poly1305.prototype.update = function(m, mpos, bytes) {
      var i, want;
    
      if (this.leftover) {
        want = (16 - this.leftover);
        if (want > bytes)
          want = bytes;
        for (i = 0; i < want; i++)
          this.buffer[this.leftover + i] = m[mpos+i];
        bytes -= want;
        mpos += want;
        this.leftover += want;
        if (this.leftover < 16)
          return;
        this.blocks(this.buffer, 0, 16);
        this.leftover = 0;
      }
    
      if (bytes >= 16) {
        want = bytes - (bytes % 16);
        this.blocks(m, mpos, want);
        mpos += want;
        bytes -= want;
      }
    
      if (bytes) {
        for (i = 0; i < bytes; i++)
          this.buffer[this.leftover + i] = m[mpos+i];
        this.leftover += bytes;
      }
    };
    
    function crypto_onetimeauth(out, outpos, m, mpos, n, k) {
      var s = new poly1305(k);
      s.update(m, mpos, n);
      s.finish(out, outpos);
      return 0;
    }
    
    function crypto_onetimeauth_verify(h, hpos, m, mpos, n, k) {
      var x = new Uint8Array(16);
      crypto_onetimeauth(x,0,m,mpos,n,k);
      return crypto_verify_16(h,hpos,x,0);
    }
    
    function crypto_secretbox(c,m,d,n,k) {
      var i;
      if (d < 32) return -1;
      crypto_stream_xor(c,0,m,0,d,n,k);
      crypto_onetimeauth(c, 16, c, 32, d - 32, c);
      for (i = 0; i < 16; i++) c[i] = 0;
      return 0;
    }
    
    function crypto_secretbox_open(m,c,d,n,k) {
      var i;
      var x = new Uint8Array(32);
      if (d < 32) return -1;
      crypto_stream(x,0,32,n,k);
      if (crypto_onetimeauth_verify(c, 16,c, 32,d - 32,x) !== 0) return -1;
      crypto_stream_xor(m,0,c,0,d,n,k);
      for (i = 0; i < 32; i++) m[i] = 0;
      return 0;
    }
    
    function set25519(r, a) {
      var i;
      for (i = 0; i < 16; i++) r[i] = a[i]|0;
    }
    
    function car25519(o) {
      var i, v, c = 1;
      for (i = 0; i < 16; i++) {
        v = o[i] + c + 65535;
        c = Math.floor(v / 65536);
        o[i] = v - c * 65536;
      }
      o[0] += c-1 + 37 * (c-1);
    }
    
    function sel25519(p, q, b) {
      var t, c = ~(b-1);
      for (var i = 0; i < 16; i++) {
        t = c & (p[i] ^ q[i]);
        p[i] ^= t;
        q[i] ^= t;
      }
    }
    
    function pack25519(o, n) {
      var i, j, b;
      var m = gf(), t = gf();
      for (i = 0; i < 16; i++) t[i] = n[i];
      car25519(t);
      car25519(t);
      car25519(t);
      for (j = 0; j < 2; j++) {
        m[0] = t[0] - 0xffed;
        for (i = 1; i < 15; i++) {
          m[i] = t[i] - 0xffff - ((m[i-1]>>16) & 1);
          m[i-1] &= 0xffff;
        }
        m[15] = t[15] - 0x7fff - ((m[14]>>16) & 1);
        b = (m[15]>>16) & 1;
        m[14] &= 0xffff;
        sel25519(t, m, 1-b);
      }
      for (i = 0; i < 16; i++) {
        o[2*i] = t[i] & 0xff;
        o[2*i+1] = t[i]>>8;
      }
    }
    
    function neq25519(a, b) {
      var c = new Uint8Array(32), d = new Uint8Array(32);
      pack25519(c, a);
      pack25519(d, b);
      return crypto_verify_32(c, 0, d, 0);
    }
    
    function par25519(a) {
      var d = new Uint8Array(32);
      pack25519(d, a);
      return d[0] & 1;
    }
    
    function unpack25519(o, n) {
      var i;
      for (i = 0; i < 16; i++) o[i] = n[2*i] + (n[2*i+1] << 8);
      o[15] &= 0x7fff;
    }
    
    function A(o, a, b) {
      for (var i = 0; i < 16; i++) o[i] = a[i] + b[i];
    }
    
    function Z(o, a, b) {
      for (var i = 0; i < 16; i++) o[i] = a[i] - b[i];
    }
    
    function M(o, a, b) {
      var v, c,
         t0 = 0,  t1 = 0,  t2 = 0,  t3 = 0,  t4 = 0,  t5 = 0,  t6 = 0,  t7 = 0,
         t8 = 0,  t9 = 0, t10 = 0, t11 = 0, t12 = 0, t13 = 0, t14 = 0, t15 = 0,
        t16 = 0, t17 = 0, t18 = 0, t19 = 0, t20 = 0, t21 = 0, t22 = 0, t23 = 0,
        t24 = 0, t25 = 0, t26 = 0, t27 = 0, t28 = 0, t29 = 0, t30 = 0,
        b0 = b[0],
        b1 = b[1],
        b2 = b[2],
        b3 = b[3],
        b4 = b[4],
        b5 = b[5],
        b6 = b[6],
        b7 = b[7],
        b8 = b[8],
        b9 = b[9],
        b10 = b[10],
        b11 = b[11],
        b12 = b[12],
        b13 = b[13],
        b14 = b[14],
        b15 = b[15];
    
      v = a[0];
      t0 += v * b0;
      t1 += v * b1;
      t2 += v * b2;
      t3 += v * b3;
      t4 += v * b4;
      t5 += v * b5;
      t6 += v * b6;
      t7 += v * b7;
      t8 += v * b8;
      t9 += v * b9;
      t10 += v * b10;
      t11 += v * b11;
      t12 += v * b12;
      t13 += v * b13;
      t14 += v * b14;
      t15 += v * b15;
      v = a[1];
      t1 += v * b0;
      t2 += v * b1;
      t3 += v * b2;
      t4 += v * b3;
      t5 += v * b4;
      t6 += v * b5;
      t7 += v * b6;
      t8 += v * b7;
      t9 += v * b8;
      t10 += v * b9;
      t11 += v * b10;
      t12 += v * b11;
      t13 += v * b12;
      t14 += v * b13;
      t15 += v * b14;
      t16 += v * b15;
      v = a[2];
      t2 += v * b0;
      t3 += v * b1;
      t4 += v * b2;
      t5 += v * b3;
      t6 += v * b4;
      t7 += v * b5;
      t8 += v * b6;
      t9 += v * b7;
      t10 += v * b8;
      t11 += v * b9;
      t12 += v * b10;
      t13 += v * b11;
      t14 += v * b12;
      t15 += v * b13;
      t16 += v * b14;
      t17 += v * b15;
      v = a[3];
      t3 += v * b0;
      t4 += v * b1;
      t5 += v * b2;
      t6 += v * b3;
      t7 += v * b4;
      t8 += v * b5;
      t9 += v * b6;
      t10 += v * b7;
      t11 += v * b8;
      t12 += v * b9;
      t13 += v * b10;
      t14 += v * b11;
      t15 += v * b12;
      t16 += v * b13;
      t17 += v * b14;
      t18 += v * b15;
      v = a[4];
      t4 += v * b0;
      t5 += v * b1;
      t6 += v * b2;
      t7 += v * b3;
      t8 += v * b4;
      t9 += v * b5;
      t10 += v * b6;
      t11 += v * b7;
      t12 += v * b8;
      t13 += v * b9;
      t14 += v * b10;
      t15 += v * b11;
      t16 += v * b12;
      t17 += v * b13;
      t18 += v * b14;
      t19 += v * b15;
      v = a[5];
      t5 += v * b0;
      t6 += v * b1;
      t7 += v * b2;
      t8 += v * b3;
      t9 += v * b4;
      t10 += v * b5;
      t11 += v * b6;
      t12 += v * b7;
      t13 += v * b8;
      t14 += v * b9;
      t15 += v * b10;
      t16 += v * b11;
      t17 += v * b12;
      t18 += v * b13;
      t19 += v * b14;
      t20 += v * b15;
      v = a[6];
      t6 += v * b0;
      t7 += v * b1;
      t8 += v * b2;
      t9 += v * b3;
      t10 += v * b4;
      t11 += v * b5;
      t12 += v * b6;
      t13 += v * b7;
      t14 += v * b8;
      t15 += v * b9;
      t16 += v * b10;
      t17 += v * b11;
      t18 += v * b12;
      t19 += v * b13;
      t20 += v * b14;
      t21 += v * b15;
      v = a[7];
      t7 += v * b0;
      t8 += v * b1;
      t9 += v * b2;
      t10 += v * b3;
      t11 += v * b4;
      t12 += v * b5;
      t13 += v * b6;
      t14 += v * b7;
      t15 += v * b8;
      t16 += v * b9;
      t17 += v * b10;
      t18 += v * b11;
      t19 += v * b12;
      t20 += v * b13;
      t21 += v * b14;
      t22 += v * b15;
      v = a[8];
      t8 += v * b0;
      t9 += v * b1;
      t10 += v * b2;
      t11 += v * b3;
      t12 += v * b4;
      t13 += v * b5;
      t14 += v * b6;
      t15 += v * b7;
      t16 += v * b8;
      t17 += v * b9;
      t18 += v * b10;
      t19 += v * b11;
      t20 += v * b12;
      t21 += v * b13;
      t22 += v * b14;
      t23 += v * b15;
      v = a[9];
      t9 += v * b0;
      t10 += v * b1;
      t11 += v * b2;
      t12 += v * b3;
      t13 += v * b4;
      t14 += v * b5;
      t15 += v * b6;
      t16 += v * b7;
      t17 += v * b8;
      t18 += v * b9;
      t19 += v * b10;
      t20 += v * b11;
      t21 += v * b12;
      t22 += v * b13;
      t23 += v * b14;
      t24 += v * b15;
      v = a[10];
      t10 += v * b0;
      t11 += v * b1;
      t12 += v * b2;
      t13 += v * b3;
      t14 += v * b4;
      t15 += v * b5;
      t16 += v * b6;
      t17 += v * b7;
      t18 += v * b8;
      t19 += v * b9;
      t20 += v * b10;
      t21 += v * b11;
      t22 += v * b12;
      t23 += v * b13;
      t24 += v * b14;
      t25 += v * b15;
      v = a[11];
      t11 += v * b0;
      t12 += v * b1;
      t13 += v * b2;
      t14 += v * b3;
      t15 += v * b4;
      t16 += v * b5;
      t17 += v * b6;
      t18 += v * b7;
      t19 += v * b8;
      t20 += v * b9;
      t21 += v * b10;
      t22 += v * b11;
      t23 += v * b12;
      t24 += v * b13;
      t25 += v * b14;
      t26 += v * b15;
      v = a[12];
      t12 += v * b0;
      t13 += v * b1;
      t14 += v * b2;
      t15 += v * b3;
      t16 += v * b4;
      t17 += v * b5;
      t18 += v * b6;
      t19 += v * b7;
      t20 += v * b8;
      t21 += v * b9;
      t22 += v * b10;
      t23 += v * b11;
      t24 += v * b12;
      t25 += v * b13;
      t26 += v * b14;
      t27 += v * b15;
      v = a[13];
      t13 += v * b0;
      t14 += v * b1;
      t15 += v * b2;
      t16 += v * b3;
      t17 += v * b4;
      t18 += v * b5;
      t19 += v * b6;
      t20 += v * b7;
      t21 += v * b8;
      t22 += v * b9;
      t23 += v * b10;
      t24 += v * b11;
      t25 += v * b12;
      t26 += v * b13;
      t27 += v * b14;
      t28 += v * b15;
      v = a[14];
      t14 += v * b0;
      t15 += v * b1;
      t16 += v * b2;
      t17 += v * b3;
      t18 += v * b4;
      t19 += v * b5;
      t20 += v * b6;
      t21 += v * b7;
      t22 += v * b8;
      t23 += v * b9;
      t24 += v * b10;
      t25 += v * b11;
      t26 += v * b12;
      t27 += v * b13;
      t28 += v * b14;
      t29 += v * b15;
      v = a[15];
      t15 += v * b0;
      t16 += v * b1;
      t17 += v * b2;
      t18 += v * b3;
      t19 += v * b4;
      t20 += v * b5;
      t21 += v * b6;
      t22 += v * b7;
      t23 += v * b8;
      t24 += v * b9;
      t25 += v * b10;
      t26 += v * b11;
      t27 += v * b12;
      t28 += v * b13;
      t29 += v * b14;
      t30 += v * b15;
    
      t0  += 38 * t16;
      t1  += 38 * t17;
      t2  += 38 * t18;
      t3  += 38 * t19;
      t4  += 38 * t20;
      t5  += 38 * t21;
      t6  += 38 * t22;
      t7  += 38 * t23;
      t8  += 38 * t24;
      t9  += 38 * t25;
      t10 += 38 * t26;
      t11 += 38 * t27;
      t12 += 38 * t28;
      t13 += 38 * t29;
      t14 += 38 * t30;
      // t15 left as is
    
      // first car
      c = 1;
      v =  t0 + c + 65535; c = Math.floor(v / 65536);  t0 = v - c * 65536;
      v =  t1 + c + 65535; c = Math.floor(v / 65536);  t1 = v - c * 65536;
      v =  t2 + c + 65535; c = Math.floor(v / 65536);  t2 = v - c * 65536;
      v =  t3 + c + 65535; c = Math.floor(v / 65536);  t3 = v - c * 65536;
      v =  t4 + c + 65535; c = Math.floor(v / 65536);  t4 = v - c * 65536;
      v =  t5 + c + 65535; c = Math.floor(v / 65536);  t5 = v - c * 65536;
      v =  t6 + c + 65535; c = Math.floor(v / 65536);  t6 = v - c * 65536;
      v =  t7 + c + 65535; c = Math.floor(v / 65536);  t7 = v - c * 65536;
      v =  t8 + c + 65535; c = Math.floor(v / 65536);  t8 = v - c * 65536;
      v =  t9 + c + 65535; c = Math.floor(v / 65536);  t9 = v - c * 65536;
      v = t10 + c + 65535; c = Math.floor(v / 65536); t10 = v - c * 65536;
      v = t11 + c + 65535; c = Math.floor(v / 65536); t11 = v - c * 65536;
      v = t12 + c + 65535; c = Math.floor(v / 65536); t12 = v - c * 65536;
      v = t13 + c + 65535; c = Math.floor(v / 65536); t13 = v - c * 65536;
      v = t14 + c + 65535; c = Math.floor(v / 65536); t14 = v - c * 65536;
      v = t15 + c + 65535; c = Math.floor(v / 65536); t15 = v - c * 65536;
      t0 += c-1 + 37 * (c-1);
    
      // second car
      c = 1;
      v =  t0 + c + 65535; c = Math.floor(v / 65536);  t0 = v - c * 65536;
      v =  t1 + c + 65535; c = Math.floor(v / 65536);  t1 = v - c * 65536;
      v =  t2 + c + 65535; c = Math.floor(v / 65536);  t2 = v - c * 65536;
      v =  t3 + c + 65535; c = Math.floor(v / 65536);  t3 = v - c * 65536;
      v =  t4 + c + 65535; c = Math.floor(v / 65536);  t4 = v - c * 65536;
      v =  t5 + c + 65535; c = Math.floor(v / 65536);  t5 = v - c * 65536;
      v =  t6 + c + 65535; c = Math.floor(v / 65536);  t6 = v - c * 65536;
      v =  t7 + c + 65535; c = Math.floor(v / 65536);  t7 = v - c * 65536;
      v =  t8 + c + 65535; c = Math.floor(v / 65536);  t8 = v - c * 65536;
      v =  t9 + c + 65535; c = Math.floor(v / 65536);  t9 = v - c * 65536;
      v = t10 + c + 65535; c = Math.floor(v / 65536); t10 = v - c * 65536;
      v = t11 + c + 65535; c = Math.floor(v / 65536); t11 = v - c * 65536;
      v = t12 + c + 65535; c = Math.floor(v / 65536); t12 = v - c * 65536;
      v = t13 + c + 65535; c = Math.floor(v / 65536); t13 = v - c * 65536;
      v = t14 + c + 65535; c = Math.floor(v / 65536); t14 = v - c * 65536;
      v = t15 + c + 65535; c = Math.floor(v / 65536); t15 = v - c * 65536;
      t0 += c-1 + 37 * (c-1);
    
      o[ 0] = t0;
      o[ 1] = t1;
      o[ 2] = t2;
      o[ 3] = t3;
      o[ 4] = t4;
      o[ 5] = t5;
      o[ 6] = t6;
      o[ 7] = t7;
      o[ 8] = t8;
      o[ 9] = t9;
      o[10] = t10;
      o[11] = t11;
      o[12] = t12;
      o[13] = t13;
      o[14] = t14;
      o[15] = t15;
    }
    
    function S(o, a) {
      M(o, a, a);
    }
    
    function inv25519(o, i) {
      var c = gf();
      var a;
      for (a = 0; a < 16; a++) c[a] = i[a];
      for (a = 253; a >= 0; a--) {
        S(c, c);
        if(a !== 2 && a !== 4) M(c, c, i);
      }
      for (a = 0; a < 16; a++) o[a] = c[a];
    }
    
    function pow2523(o, i) {
      var c = gf();
      var a;
      for (a = 0; a < 16; a++) c[a] = i[a];
      for (a = 250; a >= 0; a--) {
          S(c, c);
          if(a !== 1) M(c, c, i);
      }
      for (a = 0; a < 16; a++) o[a] = c[a];
    }
    
    function crypto_scalarmult(q, n, p) {
      var z = new Uint8Array(32);
      var x = new Float64Array(80), r, i;
      var a = gf(), b = gf(), c = gf(),
          d = gf(), e = gf(), f = gf();
      for (i = 0; i < 31; i++) z[i] = n[i];
      z[31]=(n[31]&127)|64;
      z[0]&=248;
      unpack25519(x,p);
      for (i = 0; i < 16; i++) {
        b[i]=x[i];
        d[i]=a[i]=c[i]=0;
      }
      a[0]=d[0]=1;
      for (i=254; i>=0; --i) {
        r=(z[i>>>3]>>>(i&7))&1;
        sel25519(a,b,r);
        sel25519(c,d,r);
        A(e,a,c);
        Z(a,a,c);
        A(c,b,d);
        Z(b,b,d);
        S(d,e);
        S(f,a);
        M(a,c,a);
        M(c,b,e);
        A(e,a,c);
        Z(a,a,c);
        S(b,a);
        Z(c,d,f);
        M(a,c,_121665);
        A(a,a,d);
        M(c,c,a);
        M(a,d,f);
        M(d,b,x);
        S(b,e);
        sel25519(a,b,r);
        sel25519(c,d,r);
      }
      for (i = 0; i < 16; i++) {
        x[i+16]=a[i];
        x[i+32]=c[i];
        x[i+48]=b[i];
        x[i+64]=d[i];
      }
      var x32 = x.subarray(32);
      var x16 = x.subarray(16);
      inv25519(x32,x32);
      M(x16,x16,x32);
      pack25519(q,x16);
      return 0;
    }
    
    function crypto_scalarmult_base(q, n) {
      return crypto_scalarmult(q, n, _9);
    }
    
    function crypto_box_keypair(y, x) {
      randombytes(x, 32);
      return crypto_scalarmult_base(y, x);
    }
    
    function crypto_box_beforenm(k, y, x) {
      var s = new Uint8Array(32);
      crypto_scalarmult(s, x, y);
      return crypto_core_hsalsa20(k, _0, s, sigma);
    }
    
    var crypto_box_afternm = crypto_secretbox;
    var crypto_box_open_afternm = crypto_secretbox_open;
    
    function crypto_box(c, m, d, n, y, x) {
      var k = new Uint8Array(32);
      crypto_box_beforenm(k, y, x);
      return crypto_box_afternm(c, m, d, n, k);
    }
    
    function crypto_box_open(m, c, d, n, y, x) {
      var k = new Uint8Array(32);
      crypto_box_beforenm(k, y, x);
      return crypto_box_open_afternm(m, c, d, n, k);
    }
    
    var K = [
      0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
      0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
      0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
      0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
      0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
      0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
      0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
      0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
      0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
      0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
      0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
      0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
      0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
      0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
      0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
      0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
      0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
      0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
      0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
      0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
      0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
      0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
      0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
      0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
      0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
      0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
      0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
      0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
      0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
      0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
      0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
      0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
      0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
      0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
      0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
      0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
      0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
      0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
      0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
      0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
    ];
    
    function crypto_hashblocks_hl(hh, hl, m, n) {
      var wh = new Int32Array(16), wl = new Int32Array(16),
          bh0, bh1, bh2, bh3, bh4, bh5, bh6, bh7,
          bl0, bl1, bl2, bl3, bl4, bl5, bl6, bl7,
          th, tl, i, j, h, l, a, b, c, d;
    
      var ah0 = hh[0],
          ah1 = hh[1],
          ah2 = hh[2],
          ah3 = hh[3],
          ah4 = hh[4],
          ah5 = hh[5],
          ah6 = hh[6],
          ah7 = hh[7],
    
          al0 = hl[0],
          al1 = hl[1],
          al2 = hl[2],
          al3 = hl[3],
          al4 = hl[4],
          al5 = hl[5],
          al6 = hl[6],
          al7 = hl[7];
    
      var pos = 0;
      while (n >= 128) {
        for (i = 0; i < 16; i++) {
          j = 8 * i + pos;
          wh[i] = (m[j+0] << 24) | (m[j+1] << 16) | (m[j+2] << 8) | m[j+3];
          wl[i] = (m[j+4] << 24) | (m[j+5] << 16) | (m[j+6] << 8) | m[j+7];
        }
        for (i = 0; i < 80; i++) {
          bh0 = ah0;
          bh1 = ah1;
          bh2 = ah2;
          bh3 = ah3;
          bh4 = ah4;
          bh5 = ah5;
          bh6 = ah6;
          bh7 = ah7;
    
          bl0 = al0;
          bl1 = al1;
          bl2 = al2;
          bl3 = al3;
          bl4 = al4;
          bl5 = al5;
          bl6 = al6;
          bl7 = al7;
    
          // add
          h = ah7;
          l = al7;
    
          a = l & 0xffff; b = l >>> 16;
          c = h & 0xffff; d = h >>> 16;
    
          // Sigma1
          h = ((ah4 >>> 14) | (al4 << (32-14))) ^ ((ah4 >>> 18) | (al4 << (32-18))) ^ ((al4 >>> (41-32)) | (ah4 << (32-(41-32))));
          l = ((al4 >>> 14) | (ah4 << (32-14))) ^ ((al4 >>> 18) | (ah4 << (32-18))) ^ ((ah4 >>> (41-32)) | (al4 << (32-(41-32))));
    
          a += l & 0xffff; b += l >>> 16;
          c += h & 0xffff; d += h >>> 16;
    
          // Ch
          h = (ah4 & ah5) ^ (~ah4 & ah6);
          l = (al4 & al5) ^ (~al4 & al6);
    
          a += l & 0xffff; b += l >>> 16;
          c += h & 0xffff; d += h >>> 16;
    
          // K
          h = K[i*2];
          l = K[i*2+1];
    
          a += l & 0xffff; b += l >>> 16;
          c += h & 0xffff; d += h >>> 16;
    
          // w
          h = wh[i%16];
          l = wl[i%16];
    
          a += l & 0xffff; b += l >>> 16;
          c += h & 0xffff; d += h >>> 16;
    
          b += a >>> 16;
          c += b >>> 16;
          d += c >>> 16;
    
          th = c & 0xffff | d << 16;
          tl = a & 0xffff | b << 16;
    
          // add
          h = th;
          l = tl;
    
          a = l & 0xffff; b = l >>> 16;
          c = h & 0xffff; d = h >>> 16;
    
          // Sigma0
          h = ((ah0 >>> 28) | (al0 << (32-28))) ^ ((al0 >>> (34-32)) | (ah0 << (32-(34-32)))) ^ ((al0 >>> (39-32)) | (ah0 << (32-(39-32))));
          l = ((al0 >>> 28) | (ah0 << (32-28))) ^ ((ah0 >>> (34-32)) | (al0 << (32-(34-32)))) ^ ((ah0 >>> (39-32)) | (al0 << (32-(39-32))));
    
          a += l & 0xffff; b += l >>> 16;
          c += h & 0xffff; d += h >>> 16;
    
          // Maj
          h = (ah0 & ah1) ^ (ah0 & ah2) ^ (ah1 & ah2);
          l = (al0 & al1) ^ (al0 & al2) ^ (al1 & al2);
    
          a += l & 0xffff; b += l >>> 16;
          c += h & 0xffff; d += h >>> 16;
    
          b += a >>> 16;
          c += b >>> 16;
          d += c >>> 16;
    
          bh7 = (c & 0xffff) | (d << 16);
          bl7 = (a & 0xffff) | (b << 16);
    
          // add
          h = bh3;
          l = bl3;
    
          a = l & 0xffff; b = l >>> 16;
          c = h & 0xffff; d = h >>> 16;
    
          h = th;
          l = tl;
    
          a += l & 0xffff; b += l >>> 16;
          c += h & 0xffff; d += h >>> 16;
    
          b += a >>> 16;
          c += b >>> 16;
          d += c >>> 16;
    
          bh3 = (c & 0xffff) | (d << 16);
          bl3 = (a & 0xffff) | (b << 16);
    
          ah1 = bh0;
          ah2 = bh1;
          ah3 = bh2;
          ah4 = bh3;
          ah5 = bh4;
          ah6 = bh5;
          ah7 = bh6;
          ah0 = bh7;
    
          al1 = bl0;
          al2 = bl1;
          al3 = bl2;
          al4 = bl3;
          al5 = bl4;
          al6 = bl5;
          al7 = bl6;
          al0 = bl7;
    
          if (i%16 === 15) {
            for (j = 0; j < 16; j++) {
              // add
              h = wh[j];
              l = wl[j];
    
              a = l & 0xffff; b = l >>> 16;
              c = h & 0xffff; d = h >>> 16;
    
              h = wh[(j+9)%16];
              l = wl[(j+9)%16];
    
              a += l & 0xffff; b += l >>> 16;
              c += h & 0xffff; d += h >>> 16;
    
              // sigma0
              th = wh[(j+1)%16];
              tl = wl[(j+1)%16];
              h = ((th >>> 1) | (tl << (32-1))) ^ ((th >>> 8) | (tl << (32-8))) ^ (th >>> 7);
              l = ((tl >>> 1) | (th << (32-1))) ^ ((tl >>> 8) | (th << (32-8))) ^ ((tl >>> 7) | (th << (32-7)));
    
              a += l & 0xffff; b += l >>> 16;
              c += h & 0xffff; d += h >>> 16;
    
              // sigma1
              th = wh[(j+14)%16];
              tl = wl[(j+14)%16];
              h = ((th >>> 19) | (tl << (32-19))) ^ ((tl >>> (61-32)) | (th << (32-(61-32)))) ^ (th >>> 6);
              l = ((tl >>> 19) | (th << (32-19))) ^ ((th >>> (61-32)) | (tl << (32-(61-32)))) ^ ((tl >>> 6) | (th << (32-6)));
    
              a += l & 0xffff; b += l >>> 16;
              c += h & 0xffff; d += h >>> 16;
    
              b += a >>> 16;
              c += b >>> 16;
              d += c >>> 16;
    
              wh[j] = (c & 0xffff) | (d << 16);
              wl[j] = (a & 0xffff) | (b << 16);
            }
          }
        }
    
        // add
        h = ah0;
        l = al0;
    
        a = l & 0xffff; b = l >>> 16;
        c = h & 0xffff; d = h >>> 16;
    
        h = hh[0];
        l = hl[0];
    
        a += l & 0xffff; b += l >>> 16;
        c += h & 0xffff; d += h >>> 16;
    
        b += a >>> 16;
        c += b >>> 16;
        d += c >>> 16;
    
        hh[0] = ah0 = (c & 0xffff) | (d << 16);
        hl[0] = al0 = (a & 0xffff) | (b << 16);
    
        h = ah1;
        l = al1;
    
        a = l & 0xffff; b = l >>> 16;
        c = h & 0xffff; d = h >>> 16;
    
        h = hh[1];
        l = hl[1];
    
        a += l & 0xffff; b += l >>> 16;
        c += h & 0xffff; d += h >>> 16;
    
        b += a >>> 16;
        c += b >>> 16;
        d += c >>> 16;
    
        hh[1] = ah1 = (c & 0xffff) | (d << 16);
        hl[1] = al1 = (a & 0xffff) | (b << 16);
    
        h = ah2;
        l = al2;
    
        a = l & 0xffff; b = l >>> 16;
        c = h & 0xffff; d = h >>> 16;
    
        h = hh[2];
        l = hl[2];
    
        a += l & 0xffff; b += l >>> 16;
        c += h & 0xffff; d += h >>> 16;
    
        b += a >>> 16;
        c += b >>> 16;
        d += c >>> 16;
    
        hh[2] = ah2 = (c & 0xffff) | (d << 16);
        hl[2] = al2 = (a & 0xffff) | (b << 16);
    
        h = ah3;
        l = al3;
    
        a = l & 0xffff; b = l >>> 16;
        c = h & 0xffff; d = h >>> 16;
    
        h = hh[3];
        l = hl[3];
    
        a += l & 0xffff; b += l >>> 16;
        c += h & 0xffff; d += h >>> 16;
    
        b += a >>> 16;
        c += b >>> 16;
        d += c >>> 16;
    
        hh[3] = ah3 = (c & 0xffff) | (d << 16);
        hl[3] = al3 = (a & 0xffff) | (b << 16);
    
        h = ah4;
        l = al4;
    
        a = l & 0xffff; b = l >>> 16;
        c = h & 0xffff; d = h >>> 16;
    
        h = hh[4];
        l = hl[4];
    
        a += l & 0xffff; b += l >>> 16;
        c += h & 0xffff; d += h >>> 16;
    
        b += a >>> 16;
        c += b >>> 16;
        d += c >>> 16;
    
        hh[4] = ah4 = (c & 0xffff) | (d << 16);
        hl[4] = al4 = (a & 0xffff) | (b << 16);
    
        h = ah5;
        l = al5;
    
        a = l & 0xffff; b = l >>> 16;
        c = h & 0xffff; d = h >>> 16;
    
        h = hh[5];
        l = hl[5];
    
        a += l & 0xffff; b += l >>> 16;
        c += h & 0xffff; d += h >>> 16;
    
        b += a >>> 16;
        c += b >>> 16;
        d += c >>> 16;
    
        hh[5] = ah5 = (c & 0xffff) | (d << 16);
        hl[5] = al5 = (a & 0xffff) | (b << 16);
    
        h = ah6;
        l = al6;
    
        a = l & 0xffff; b = l >>> 16;
        c = h & 0xffff; d = h >>> 16;
    
        h = hh[6];
        l = hl[6];
    
        a += l & 0xffff; b += l >>> 16;
        c += h & 0xffff; d += h >>> 16;
    
        b += a >>> 16;
        c += b >>> 16;
        d += c >>> 16;
    
        hh[6] = ah6 = (c & 0xffff) | (d << 16);
        hl[6] = al6 = (a & 0xffff) | (b << 16);
    
        h = ah7;
        l = al7;
    
        a = l & 0xffff; b = l >>> 16;
        c = h & 0xffff; d = h >>> 16;
    
        h = hh[7];
        l = hl[7];
    
        a += l & 0xffff; b += l >>> 16;
        c += h & 0xffff; d += h >>> 16;
    
        b += a >>> 16;
        c += b >>> 16;
        d += c >>> 16;
    
        hh[7] = ah7 = (c & 0xffff) | (d << 16);
        hl[7] = al7 = (a & 0xffff) | (b << 16);
    
        pos += 128;
        n -= 128;
      }
    
      return n;
    }
    
    function crypto_hash(out, m, n) {
      var hh = new Int32Array(8),
          hl = new Int32Array(8),
          x = new Uint8Array(256),
          i, b = n;
    
      hh[0] = 0x6a09e667;
      hh[1] = 0xbb67ae85;
      hh[2] = 0x3c6ef372;
      hh[3] = 0xa54ff53a;
      hh[4] = 0x510e527f;
      hh[5] = 0x9b05688c;
      hh[6] = 0x1f83d9ab;
      hh[7] = 0x5be0cd19;
    
      hl[0] = 0xf3bcc908;
      hl[1] = 0x84caa73b;
      hl[2] = 0xfe94f82b;
      hl[3] = 0x5f1d36f1;
      hl[4] = 0xade682d1;
      hl[5] = 0x2b3e6c1f;
      hl[6] = 0xfb41bd6b;
      hl[7] = 0x137e2179;
    
      crypto_hashblocks_hl(hh, hl, m, n);
      n %= 128;
    
      for (i = 0; i < n; i++) x[i] = m[b-n+i];
      x[n] = 128;
    
      n = 256-128*(n<112?1:0);
      x[n-9] = 0;
      ts64(x, n-8,  (b / 0x20000000) | 0, b << 3);
      crypto_hashblocks_hl(hh, hl, x, n);
    
      for (i = 0; i < 8; i++) ts64(out, 8*i, hh[i], hl[i]);
    
      return 0;
    }
    
    function add(p, q) {
      var a = gf(), b = gf(), c = gf(),
          d = gf(), e = gf(), f = gf(),
          g = gf(), h = gf(), t = gf();
    
      Z(a, p[1], p[0]);
      Z(t, q[1], q[0]);
      M(a, a, t);
      A(b, p[0], p[1]);
      A(t, q[0], q[1]);
      M(b, b, t);
      M(c, p[3], q[3]);
      M(c, c, D2);
      M(d, p[2], q[2]);
      A(d, d, d);
      Z(e, b, a);
      Z(f, d, c);
      A(g, d, c);
      A(h, b, a);
    
      M(p[0], e, f);
      M(p[1], h, g);
      M(p[2], g, f);
      M(p[3], e, h);
    }
    
    function cswap(p, q, b) {
      var i;
      for (i = 0; i < 4; i++) {
        sel25519(p[i], q[i], b);
      }
    }
    
    function pack(r, p) {
      var tx = gf(), ty = gf(), zi = gf();
      inv25519(zi, p[2]);
      M(tx, p[0], zi);
      M(ty, p[1], zi);
      pack25519(r, ty);
      r[31] ^= par25519(tx) << 7;
    }
    
    function scalarmult(p, q, s) {
      var b, i;
      set25519(p[0], gf0);
      set25519(p[1], gf1);
      set25519(p[2], gf1);
      set25519(p[3], gf0);
      for (i = 255; i >= 0; --i) {
        b = (s[(i/8)|0] >> (i&7)) & 1;
        cswap(p, q, b);
        add(q, p);
        add(p, p);
        cswap(p, q, b);
      }
    }
    
    function scalarbase(p, s) {
      var q = [gf(), gf(), gf(), gf()];
      set25519(q[0], X);
      set25519(q[1], Y);
      set25519(q[2], gf1);
      M(q[3], X, Y);
      scalarmult(p, q, s);
    }
    
    function crypto_sign_keypair(pk, sk, seeded) {
      var d = new Uint8Array(64);
      var p = [gf(), gf(), gf(), gf()];
      var i;
    
      if (!seeded) randombytes(sk, 32);
      crypto_hash(d, sk, 32);
      d[0] &= 248;
      d[31] &= 127;
      d[31] |= 64;
    
      scalarbase(p, d);
      pack(pk, p);
    
      for (i = 0; i < 32; i++) sk[i+32] = pk[i];
      return 0;
    }
    
    var L = new Float64Array([0xed, 0xd3, 0xf5, 0x5c, 0x1a, 0x63, 0x12, 0x58, 0xd6, 0x9c, 0xf7, 0xa2, 0xde, 0xf9, 0xde, 0x14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x10]);
    
    function modL(r, x) {
      var carry, i, j, k;
      for (i = 63; i >= 32; --i) {
        carry = 0;
        for (j = i - 32, k = i - 12; j < k; ++j) {
          x[j] += carry - 16 * x[i] * L[j - (i - 32)];
          carry = Math.floor((x[j] + 128) / 256);
          x[j] -= carry * 256;
        }
        x[j] += carry;
        x[i] = 0;
      }
      carry = 0;
      for (j = 0; j < 32; j++) {
        x[j] += carry - (x[31] >> 4) * L[j];
        carry = x[j] >> 8;
        x[j] &= 255;
      }
      for (j = 0; j < 32; j++) x[j] -= carry * L[j];
      for (i = 0; i < 32; i++) {
        x[i+1] += x[i] >> 8;
        r[i] = x[i] & 255;
      }
    }
    
    function reduce(r) {
      var x = new Float64Array(64), i;
      for (i = 0; i < 64; i++) x[i] = r[i];
      for (i = 0; i < 64; i++) r[i] = 0;
      modL(r, x);
    }
    
    // Note: difference from C - smlen returned, not passed as argument.
    function crypto_sign(sm, m, n, sk) {
      var d = new Uint8Array(64), h = new Uint8Array(64), r = new Uint8Array(64);
      var i, j, x = new Float64Array(64);
      var p = [gf(), gf(), gf(), gf()];
    
      crypto_hash(d, sk, 32);
      d[0] &= 248;
      d[31] &= 127;
      d[31] |= 64;
    
      var smlen = n + 64;
      for (i = 0; i < n; i++) sm[64 + i] = m[i];
      for (i = 0; i < 32; i++) sm[32 + i] = d[32 + i];
    
      crypto_hash(r, sm.subarray(32), n+32);
      reduce(r);
      scalarbase(p, r);
      pack(sm, p);
    
      for (i = 32; i < 64; i++) sm[i] = sk[i];
      crypto_hash(h, sm, n + 64);
      reduce(h);
    
      for (i = 0; i < 64; i++) x[i] = 0;
      for (i = 0; i < 32; i++) x[i] = r[i];
      for (i = 0; i < 32; i++) {
        for (j = 0; j < 32; j++) {
          x[i+j] += h[i] * d[j];
        }
      }
    
      modL(sm.subarray(32), x);
      return smlen;
    }
    
    function unpackneg(r, p) {
      var t = gf(), chk = gf(), num = gf(),
          den = gf(), den2 = gf(), den4 = gf(),
          den6 = gf();
    
      set25519(r[2], gf1);
      unpack25519(r[1], p);
      S(num, r[1]);
      M(den, num, D);
      Z(num, num, r[2]);
      A(den, r[2], den);
    
      S(den2, den);
      S(den4, den2);
      M(den6, den4, den2);
      M(t, den6, num);
      M(t, t, den);
    
      pow2523(t, t);
      M(t, t, num);
      M(t, t, den);
      M(t, t, den);
      M(r[0], t, den);
    
      S(chk, r[0]);
      M(chk, chk, den);
      if (neq25519(chk, num)) M(r[0], r[0], I);
    
      S(chk, r[0]);
      M(chk, chk, den);
      if (neq25519(chk, num)) return -1;
    
      if (par25519(r[0]) === (p[31]>>7)) Z(r[0], gf0, r[0]);
    
      M(r[3], r[0], r[1]);
      return 0;
    }
    
    function crypto_sign_open(m, sm, n, pk) {
      var i;
      var t = new Uint8Array(32), h = new Uint8Array(64);
      var p = [gf(), gf(), gf(), gf()],
          q = [gf(), gf(), gf(), gf()];
    
      if (n < 64) return -1;
    
      if (unpackneg(q, pk)) return -1;
    
      for (i = 0; i < n; i++) m[i] = sm[i];
      for (i = 0; i < 32; i++) m[i+32] = pk[i];
      crypto_hash(h, m, n);
      reduce(h);
      scalarmult(p, q, h);
    
      scalarbase(q, sm.subarray(32));
      add(p, q);
      pack(t, p);
    
      n -= 64;
      if (crypto_verify_32(sm, 0, t, 0)) {
        for (i = 0; i < n; i++) m[i] = 0;
        return -1;
      }
    
      for (i = 0; i < n; i++) m[i] = sm[i + 64];
      return n;
    }
    
    var crypto_secretbox_KEYBYTES = 32,
        crypto_secretbox_NONCEBYTES = 24,
        crypto_secretbox_ZEROBYTES = 32,
        crypto_secretbox_BOXZEROBYTES = 16,
        crypto_scalarmult_BYTES = 32,
        crypto_scalarmult_SCALARBYTES = 32,
        crypto_box_PUBLICKEYBYTES = 32,
        crypto_box_SECRETKEYBYTES = 32,
        crypto_box_BEFORENMBYTES = 32,
        crypto_box_NONCEBYTES = crypto_secretbox_NONCEBYTES,
        crypto_box_ZEROBYTES = crypto_secretbox_ZEROBYTES,
        crypto_box_BOXZEROBYTES = crypto_secretbox_BOXZEROBYTES,
        crypto_sign_BYTES = 64,
        crypto_sign_PUBLICKEYBYTES = 32,
        crypto_sign_SECRETKEYBYTES = 64,
        crypto_sign_SEEDBYTES = 32,
        crypto_hash_BYTES = 64;
    
    nacl.lowlevel = {
      crypto_core_hsalsa20: crypto_core_hsalsa20,
      crypto_stream_xor: crypto_stream_xor,
      crypto_stream: crypto_stream,
      crypto_stream_salsa20_xor: crypto_stream_salsa20_xor,
      crypto_stream_salsa20: crypto_stream_salsa20,
      crypto_onetimeauth: crypto_onetimeauth,
      crypto_onetimeauth_verify: crypto_onetimeauth_verify,
      crypto_verify_16: crypto_verify_16,
      crypto_verify_32: crypto_verify_32,
      crypto_secretbox: crypto_secretbox,
      crypto_secretbox_open: crypto_secretbox_open,
      crypto_scalarmult: crypto_scalarmult,
      crypto_scalarmult_base: crypto_scalarmult_base,
      crypto_box_beforenm: crypto_box_beforenm,
      crypto_box_afternm: crypto_box_afternm,
      crypto_box: crypto_box,
      crypto_box_open: crypto_box_open,
      crypto_box_keypair: crypto_box_keypair,
      crypto_hash: crypto_hash,
      crypto_sign: crypto_sign,
      crypto_sign_keypair: crypto_sign_keypair,
      crypto_sign_open: crypto_sign_open,
    
      crypto_secretbox_KEYBYTES: crypto_secretbox_KEYBYTES,
      crypto_secretbox_NONCEBYTES: crypto_secretbox_NONCEBYTES,
      crypto_secretbox_ZEROBYTES: crypto_secretbox_ZEROBYTES,
      crypto_secretbox_BOXZEROBYTES: crypto_secretbox_BOXZEROBYTES,
      crypto_scalarmult_BYTES: crypto_scalarmult_BYTES,
      crypto_scalarmult_SCALARBYTES: crypto_scalarmult_SCALARBYTES,
      crypto_box_PUBLICKEYBYTES: crypto_box_PUBLICKEYBYTES,
      crypto_box_SECRETKEYBYTES: crypto_box_SECRETKEYBYTES,
      crypto_box_BEFORENMBYTES: crypto_box_BEFORENMBYTES,
      crypto_box_NONCEBYTES: crypto_box_NONCEBYTES,
      crypto_box_ZEROBYTES: crypto_box_ZEROBYTES,
      crypto_box_BOXZEROBYTES: crypto_box_BOXZEROBYTES,
      crypto_sign_BYTES: crypto_sign_BYTES,
      crypto_sign_PUBLICKEYBYTES: crypto_sign_PUBLICKEYBYTES,
      crypto_sign_SECRETKEYBYTES: crypto_sign_SECRETKEYBYTES,
      crypto_sign_SEEDBYTES: crypto_sign_SEEDBYTES,
      crypto_hash_BYTES: crypto_hash_BYTES,
    
      gf: gf,
      D: D,
      L: L,
      pack25519: pack25519,
      unpack25519: unpack25519,
      M: M,
      A: A,
      S: S,
      Z: Z,
      pow2523: pow2523,
      add: add,
      set25519: set25519,
      modL: modL,
      scalarmult: scalarmult,
      scalarbase: scalarbase,
    };
    
    /* High-level API */
    
    function checkLengths(k, n) {
      if (k.length !== crypto_secretbox_KEYBYTES) throw new Error('bad key size');
      if (n.length !== crypto_secretbox_NONCEBYTES) throw new Error('bad nonce size');
    }
    
    function checkBoxLengths(pk, sk) {
      if (pk.length !== crypto_box_PUBLICKEYBYTES) throw new Error('bad public key size');
      if (sk.length !== crypto_box_SECRETKEYBYTES) throw new Error('bad secret key size');
    }
    
    function checkArrayTypes() {
      for (var i = 0; i < arguments.length; i++) {
        if (!(arguments[i] instanceof Uint8Array))
          throw new TypeError('unexpected type, use Uint8Array');
      }
    }
    
    function cleanup(arr) {
      for (var i = 0; i < arr.length; i++) arr[i] = 0;
    }
    
    nacl.randomBytes = function(n) {
      var b = new Uint8Array(n);
      randombytes(b, n);
      return b;
    };
    
    nacl.secretbox = function(msg, nonce, key) {
      checkArrayTypes(msg, nonce, key);
      checkLengths(key, nonce);
      var m = new Uint8Array(crypto_secretbox_ZEROBYTES + msg.length);
      var c = new Uint8Array(m.length);
      for (var i = 0; i < msg.length; i++) m[i+crypto_secretbox_ZEROBYTES] = msg[i];
      crypto_secretbox(c, m, m.length, nonce, key);
      return c.subarray(crypto_secretbox_BOXZEROBYTES);
    };
    
    nacl.secretbox.open = function(box, nonce, key) {
      checkArrayTypes(box, nonce, key);
      checkLengths(key, nonce);
      var c = new Uint8Array(crypto_secretbox_BOXZEROBYTES + box.length);
      var m = new Uint8Array(c.length);
      for (var i = 0; i < box.length; i++) c[i+crypto_secretbox_BOXZEROBYTES] = box[i];
      if (c.length < 32) return null;
      if (crypto_secretbox_open(m, c, c.length, nonce, key) !== 0) return null;
      return m.subarray(crypto_secretbox_ZEROBYTES);
    };
    
    nacl.secretbox.keyLength = crypto_secretbox_KEYBYTES;
    nacl.secretbox.nonceLength = crypto_secretbox_NONCEBYTES;
    nacl.secretbox.overheadLength = crypto_secretbox_BOXZEROBYTES;
    
    nacl.scalarMult = function(n, p) {
      checkArrayTypes(n, p);
      if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error('bad n size');
      if (p.length !== crypto_scalarmult_BYTES) throw new Error('bad p size');
      var q = new Uint8Array(crypto_scalarmult_BYTES);
      crypto_scalarmult(q, n, p);
      return q;
    };
    
    nacl.scalarMult.base = function(n) {
      checkArrayTypes(n);
      if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error('bad n size');
      var q = new Uint8Array(crypto_scalarmult_BYTES);
      crypto_scalarmult_base(q, n);
      return q;
    };
    
    nacl.scalarMult.scalarLength = crypto_scalarmult_SCALARBYTES;
    nacl.scalarMult.groupElementLength = crypto_scalarmult_BYTES;
    
    nacl.box = function(msg, nonce, publicKey, secretKey) {
      var k = nacl.box.before(publicKey, secretKey);
      return nacl.secretbox(msg, nonce, k);
    };
    
    nacl.box.before = function(publicKey, secretKey) {
      checkArrayTypes(publicKey, secretKey);
      checkBoxLengths(publicKey, secretKey);
      var k = new Uint8Array(crypto_box_BEFORENMBYTES);
      crypto_box_beforenm(k, publicKey, secretKey);
      return k;
    };
    
    nacl.box.after = nacl.secretbox;
    
    nacl.box.open = function(msg, nonce, publicKey, secretKey) {
      var k = nacl.box.before(publicKey, secretKey);
      return nacl.secretbox.open(msg, nonce, k);
    };
    
    nacl.box.open.after = nacl.secretbox.open;
    
    nacl.box.keyPair = function() {
      var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);
      var sk = new Uint8Array(crypto_box_SECRETKEYBYTES);
      crypto_box_keypair(pk, sk);
      return {publicKey: pk, secretKey: sk};
    };
    
    nacl.box.keyPair.fromSecretKey = function(secretKey) {
      checkArrayTypes(secretKey);
      if (secretKey.length !== crypto_box_SECRETKEYBYTES)
        throw new Error('bad secret key size');
      var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);
      crypto_scalarmult_base(pk, secretKey);
      return {publicKey: pk, secretKey: new Uint8Array(secretKey)};
    };
    
    nacl.box.publicKeyLength = crypto_box_PUBLICKEYBYTES;
    nacl.box.secretKeyLength = crypto_box_SECRETKEYBYTES;
    nacl.box.sharedKeyLength = crypto_box_BEFORENMBYTES;
    nacl.box.nonceLength = crypto_box_NONCEBYTES;
    nacl.box.overheadLength = nacl.secretbox.overheadLength;
    
    nacl.sign = function(msg, secretKey) {
      checkArrayTypes(msg, secretKey);
      if (secretKey.length !== crypto_sign_SECRETKEYBYTES)
        throw new Error('bad secret key size');
      var signedMsg = new Uint8Array(crypto_sign_BYTES+msg.length);
      crypto_sign(signedMsg, msg, msg.length, secretKey);
      return signedMsg;
    };
    
    nacl.sign.open = function(signedMsg, publicKey) {
      checkArrayTypes(signedMsg, publicKey);
      if (publicKey.length !== crypto_sign_PUBLICKEYBYTES)
        throw new Error('bad public key size');
      var tmp = new Uint8Array(signedMsg.length);
      var mlen = crypto_sign_open(tmp, signedMsg, signedMsg.length, publicKey);
      if (mlen < 0) return null;
      var m = new Uint8Array(mlen);
      for (var i = 0; i < m.length; i++) m[i] = tmp[i];
      return m;
    };
    
    nacl.sign.detached = function(msg, secretKey) {
      var signedMsg = nacl.sign(msg, secretKey);
      var sig = new Uint8Array(crypto_sign_BYTES);
      for (var i = 0; i < sig.length; i++) sig[i] = signedMsg[i];
      return sig;
    };
    
    nacl.sign.detached.verify = function(msg, sig, publicKey) {
      checkArrayTypes(msg, sig, publicKey);
      if (sig.length !== crypto_sign_BYTES)
        throw new Error('bad signature size');
      if (publicKey.length !== crypto_sign_PUBLICKEYBYTES)
        throw new Error('bad public key size');
      var sm = new Uint8Array(crypto_sign_BYTES + msg.length);
      var m = new Uint8Array(crypto_sign_BYTES + msg.length);
      var i;
      for (i = 0; i < crypto_sign_BYTES; i++) sm[i] = sig[i];
      for (i = 0; i < msg.length; i++) sm[i+crypto_sign_BYTES] = msg[i];
      return (crypto_sign_open(m, sm, sm.length, publicKey) >= 0);
    };
    
    nacl.sign.keyPair = function() {
      var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
      var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);
      crypto_sign_keypair(pk, sk);
      return {publicKey: pk, secretKey: sk};
    };
    
    nacl.sign.keyPair.fromSecretKey = function(secretKey) {
      checkArrayTypes(secretKey);
      if (secretKey.length !== crypto_sign_SECRETKEYBYTES)
        throw new Error('bad secret key size');
      var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
      for (var i = 0; i < pk.length; i++) pk[i] = secretKey[32+i];
      return {publicKey: pk, secretKey: new Uint8Array(secretKey)};
    };
    
    nacl.sign.keyPair.fromSeed = function(seed) {
      checkArrayTypes(seed);
      if (seed.length !== crypto_sign_SEEDBYTES)
        throw new Error('bad seed size');
      var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
      var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);
      for (var i = 0; i < 32; i++) sk[i] = seed[i];
      crypto_sign_keypair(pk, sk, true);
      return {publicKey: pk, secretKey: sk};
    };
    
    nacl.sign.publicKeyLength = crypto_sign_PUBLICKEYBYTES;
    nacl.sign.secretKeyLength = crypto_sign_SECRETKEYBYTES;
    nacl.sign.seedLength = crypto_sign_SEEDBYTES;
    nacl.sign.signatureLength = crypto_sign_BYTES;
    
    nacl.hash = function(msg) {
      checkArrayTypes(msg);
      var h = new Uint8Array(crypto_hash_BYTES);
      crypto_hash(h, msg, msg.length);
      return h;
    };
    
    nacl.hash.hashLength = crypto_hash_BYTES;
    
    nacl.verify = function(x, y) {
      checkArrayTypes(x, y);
      // Zero length arguments are considered not equal.
      if (x.length === 0 || y.length === 0) return false;
      if (x.length !== y.length) return false;
      return (vn(x, 0, y, 0, x.length) === 0) ? true : false;
    };
    
    nacl.setPRNG = function(fn) {
      randombytes = fn;
    };
    
    (function() {
      // Initialize PRNG if environment provides CSPRNG.
      // If not, methods calling randombytes will throw.
      var crypto = typeof self !== 'undefined' ? (self.crypto || self.msCrypto) : null;
      if (crypto && crypto.getRandomValues) {
        // Browsers.
        var QUOTA = 65536;
        nacl.setPRNG(function(x, n) {
          var i, v = new Uint8Array(n);
          for (i = 0; i < n; i += QUOTA) {
            crypto.getRandomValues(v.subarray(i, i + Math.min(n - i, QUOTA)));
          }
          for (i = 0; i < n; i++) x[i] = v[i];
          cleanup(v);
        });
      } else if (typeof require !== 'undefined') {
        // Node.js.
        crypto = require('crypto');
        if (crypto && crypto.randomBytes) {
          nacl.setPRNG(function(x, n) {
            var i, v = crypto.randomBytes(n);
            for (i = 0; i < n; i++) x[i] = v[i];
            cleanup(v);
          });
        }
      }
    })();
    
    })(typeof module !== 'undefined' && module.exports ? module.exports : (self.nacl = self.nacl || {}));
    
    },{"crypto":5}],41:[function(require,module,exports){
    arguments[4][15][0].apply(exports,arguments)
    },{"./lib":44,"dup":15}],42:[function(require,module,exports){
    var cache = function (fn) {
        var called = false,
            store;
    
        if (!(fn instanceof Function)) {
            called = true;
            store = fn;
            fn = null;
        }
    
        return function () {
            if (!called) {
                called = true;
                store = fn.apply(this, arguments);
                fn = null;
            }
            return store;
        };
    };
    
    module.exports = cache;
    },{}],43:[function(require,module,exports){
    module.exports = function eachCombination(alternativesByDimension, callback, combination) {
        if (!combination)
            combination = [];
        if (combination.length < alternativesByDimension.length) {
            var alternatives = alternativesByDimension[combination.length];
            for (var index in alternatives) {
                combination[combination.length] = alternatives[index];
                eachCombination(alternativesByDimension, callback, combination);
                --combination.length;
            }
        }
        else
            callback.apply(null, combination);
    };
    },{}],44:[function(require,module,exports){
    module.exports = {
        cache: require("./cache"),
        eachCombination: require("./eachCombination")
    };
    },{"./cache":42,"./eachCombination":43}],45:[function(require,module,exports){
    (function (Buffer){(function (){
    window.nearApi = require('./lib/browser-index');
    window.Buffer = Buffer;
    
    }).call(this)}).call(this,require("buffer").Buffer)
    },{"./lib/browser-index":50,"buffer":7}],46:[function(require,module,exports){
    (function (process,Buffer){(function (){
    "use strict";
    var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __importDefault = (this && this.__importDefault) || function (mod) {
        return (mod && mod.__esModule) ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Account = void 0;
    const bn_js_1 = __importDefault(require("bn.js"));
    const depd_1 = __importDefault(require("depd"));
    const transaction_1 = require("./transaction");
    const providers_1 = require("./providers");
    const borsh_1 = require("borsh");
    const key_pair_1 = require("./utils/key_pair");
    const errors_1 = require("./utils/errors");
    const rpc_errors_1 = require("./utils/rpc_errors");
    const constants_1 = require("./constants");
    const exponential_backoff_1 = __importDefault(require("./utils/exponential-backoff"));
    // Default number of retries with different nonce before giving up on a transaction.
    const TX_NONCE_RETRY_NUMBER = 12;
    // Default wait until next retry in millis.
    const TX_NONCE_RETRY_WAIT = 500;
    // Exponential back off for waiting to retry.
    const TX_NONCE_RETRY_WAIT_BACKOFF = 1.5;
    function parseJsonFromRawResponse(response) {
        return JSON.parse(Buffer.from(response).toString());
    }
    function bytesJsonStringify(input) {
        return Buffer.from(JSON.stringify(input));
    }
    /**
     * This class provides common account related RPC calls including signing transactions with a {@link utils/key_pair!KeyPair}.
     *
     * @hint Use {@link walletAccount!WalletConnection} in the browser to redirect to [NEAR Wallet](https://wallet.near.org/) for Account/key management using the {@link key_stores/browser_local_storage_key_store!BrowserLocalStorageKeyStore}.
     * @see [https://docs.near.org/docs/develop/front-end/naj-quick-reference#account](https://docs.near.org/tools/near-api-js/quick-reference#account)
     * @see [Account Spec](https://nomicon.io/DataStructures/Account.html)
     */
    class Account {
        constructor(connection, accountId) {
            /** @hidden */
            this.accessKeyByPublicKeyCache = {};
            this.connection = connection;
            this.accountId = accountId;
        }
        /**
         * Returns basic NEAR account information via the `view_account` RPC query method
         * @see [https://docs.near.org/api/rpc/contracts#view-account](https://docs.near.org/api/rpc/contracts#view-account)
         */
        state() {
            return __awaiter(this, void 0, void 0, function* () {
                return this.connection.provider.query({
                    request_type: 'view_account',
                    account_id: this.accountId,
                    finality: 'optimistic'
                });
            });
        }
        /** @hidden */
        printLogsAndFailures(contractId, results) {
            if (!process.env['NEAR_NO_LOGS']) {
                for (const result of results) {
                    console.log(`Receipt${result.receiptIds.length > 1 ? 's' : ''}: ${result.receiptIds.join(', ')}`);
                    this.printLogs(contractId, result.logs, '\t');
                    if (result.failure) {
                        console.warn(`\tFailure [${contractId}]: ${result.failure}`);
                    }
                }
            }
        }
        /** @hidden */
        printLogs(contractId, logs, prefix = '') {
            if (!process.env['NEAR_NO_LOGS']) {
                for (const log of logs) {
                    console.log(`${prefix}Log [${contractId}]: ${log}`);
                }
            }
        }
        /**
         * Create a signed transaction which can be broadcast to the network
         * @param receiverId NEAR account receiving the transaction
         * @param actions list of actions to perform as part of the transaction
         * @see {@link providers/json-rpc-provider!JsonRpcProvider#sendTransaction | JsonRpcProvider.sendTransaction}
         */
        signTransaction(receiverId, actions) {
            return __awaiter(this, void 0, void 0, function* () {
                const accessKeyInfo = yield this.findAccessKey(receiverId, actions);
                if (!accessKeyInfo) {
                    throw new providers_1.TypedError(`Can not sign transactions for account ${this.accountId} on network ${this.connection.networkId}, no matching key pair exists for this account`, 'KeyNotFound');
                }
                const { accessKey } = accessKeyInfo;
                const block = yield this.connection.provider.block({ finality: 'final' });
                const blockHash = block.header.hash;
                const nonce = accessKey.nonce.add(new bn_js_1.default(1));
                return yield (0, transaction_1.signTransaction)(receiverId, nonce, actions, (0, borsh_1.baseDecode)(blockHash), this.connection.signer, this.accountId, this.connection.networkId);
            });
        }
        /**
         * Sign a transaction to preform a list of actions and broadcast it using the RPC API.
         * @see {@link providers/json-rpc-provider!JsonRpcProvider#sendTransaction | JsonRpcProvider.sendTransaction}
         */
        signAndSendTransaction({ receiverId, actions, returnError }) {
            return __awaiter(this, void 0, void 0, function* () {
                let txHash, signedTx;
                // TODO: TX_NONCE (different constants for different uses of exponentialBackoff?)
                const result = yield (0, exponential_backoff_1.default)(TX_NONCE_RETRY_WAIT, TX_NONCE_RETRY_NUMBER, TX_NONCE_RETRY_WAIT_BACKOFF, () => __awaiter(this, void 0, void 0, function* () {
                    [txHash, signedTx] = yield this.signTransaction(receiverId, actions);
                    const publicKey = signedTx.transaction.publicKey;
                    try {
                        return yield this.connection.provider.sendTransaction(signedTx);
                    }
                    catch (error) {
                        if (error.type === 'InvalidNonce') {
                            (0, errors_1.logWarning)(`Retrying transaction ${receiverId}:${(0, borsh_1.baseEncode)(txHash)} with new nonce.`);
                            delete this.accessKeyByPublicKeyCache[publicKey.toString()];
                            return null;
                        }
                        if (error.type === 'Expired') {
                            (0, errors_1.logWarning)(`Retrying transaction ${receiverId}:${(0, borsh_1.baseEncode)(txHash)} due to expired block hash`);
                            return null;
                        }
                        error.context = new providers_1.ErrorContext((0, borsh_1.baseEncode)(txHash));
                        throw error;
                    }
                }));
                if (!result) {
                    // TODO: This should have different code actually, as means "transaction not submitted for sure"
                    throw new providers_1.TypedError('nonce retries exceeded for transaction. This usually means there are too many parallel requests with the same access key.', 'RetriesExceeded');
                }
                const flatLogs = [result.transaction_outcome, ...result.receipts_outcome].reduce((acc, it) => {
                    if (it.outcome.logs.length ||
                        (typeof it.outcome.status === 'object' && typeof it.outcome.status.Failure === 'object')) {
                        return acc.concat({
                            'receiptIds': it.outcome.receipt_ids,
                            'logs': it.outcome.logs,
                            'failure': typeof it.outcome.status.Failure != 'undefined' ? (0, rpc_errors_1.parseRpcError)(it.outcome.status.Failure) : null
                        });
                    }
                    else
                        return acc;
                }, []);
                this.printLogsAndFailures(signedTx.transaction.receiverId, flatLogs);
                // Should be falsy if result.status.Failure is null
                if (!returnError && typeof result.status === 'object' && typeof result.status.Failure === 'object' && result.status.Failure !== null) {
                    // if error data has error_message and error_type properties, we consider that node returned an error in the old format
                    if (result.status.Failure.error_message && result.status.Failure.error_type) {
                        throw new providers_1.TypedError(`Transaction ${result.transaction_outcome.id} failed. ${result.status.Failure.error_message}`, result.status.Failure.error_type);
                    }
                    else {
                        throw (0, rpc_errors_1.parseResultError)(result);
                    }
                }
                // TODO: if Tx is Unknown or Started.
                return result;
            });
        }
        /**
         * Finds the {@link providers/provider!AccessKeyView} associated with the accounts {@link utils/key_pair!PublicKey} stored in the {@link key_stores/keystore!KeyStore}.
         *
         * @todo Find matching access key based on transaction (i.e. receiverId and actions)
         *
         * @param receiverId currently unused (see todo)
         * @param actions currently unused (see todo)
         * @returns `{ publicKey PublicKey; accessKey: AccessKeyView }`
         */
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        findAccessKey(receiverId, actions) {
            return __awaiter(this, void 0, void 0, function* () {
                // TODO: Find matching access key based on transaction (i.e. receiverId and actions)
                const publicKey = yield this.connection.signer.getPublicKey(this.accountId, this.connection.networkId);
                if (!publicKey) {
                    throw new providers_1.TypedError(`no matching key pair found in ${this.connection.signer}`, 'PublicKeyNotFound');
                }
                const cachedAccessKey = this.accessKeyByPublicKeyCache[publicKey.toString()];
                if (cachedAccessKey !== undefined) {
                    return { publicKey, accessKey: cachedAccessKey };
                }
                try {
                    const rawAccessKey = yield this.connection.provider.query({
                        request_type: 'view_access_key',
                        account_id: this.accountId,
                        public_key: publicKey.toString(),
                        finality: 'optimistic'
                    });
                    // store nonce as BN to preserve precision on big number
                    const accessKey = Object.assign(Object.assign({}, rawAccessKey), { nonce: new bn_js_1.default(rawAccessKey.nonce) });
                    // this function can be called multiple times and retrieve the same access key
                    // this checks to see if the access key was already retrieved and cached while
                    // the above network call was in flight. To keep nonce values in line, we return
                    // the cached access key.
                    if (this.accessKeyByPublicKeyCache[publicKey.toString()]) {
                        return { publicKey, accessKey: this.accessKeyByPublicKeyCache[publicKey.toString()] };
                    }
                    this.accessKeyByPublicKeyCache[publicKey.toString()] = accessKey;
                    return { publicKey, accessKey };
                }
                catch (e) {
                    if (e.type == 'AccessKeyDoesNotExist') {
                        return null;
                    }
                    throw e;
                }
            });
        }
        /**
         * Create a new account and deploy a contract to it
         *
         * @param contractId NEAR account where the contract is deployed
         * @param publicKey The public key to add to the created contract account
         * @param data The compiled contract code
         * @param amount of NEAR to transfer to the created contract account. Transfer enough to pay for storage https://docs.near.org/docs/concepts/storage-staking
         */
        createAndDeployContract(contractId, publicKey, data, amount) {
            return __awaiter(this, void 0, void 0, function* () {
                const accessKey = (0, transaction_1.fullAccessKey)();
                yield this.signAndSendTransaction({
                    receiverId: contractId,
                    actions: [(0, transaction_1.createAccount)(), (0, transaction_1.transfer)(amount), (0, transaction_1.addKey)(key_pair_1.PublicKey.from(publicKey), accessKey), (0, transaction_1.deployContract)(data)]
                });
                const contractAccount = new Account(this.connection, contractId);
                return contractAccount;
            });
        }
        /**
         * @param receiverId NEAR account receiving Ⓝ
         * @param amount Amount to send in yoctoⓃ
         */
        sendMoney(receiverId, amount) {
            return __awaiter(this, void 0, void 0, function* () {
                return this.signAndSendTransaction({
                    receiverId,
                    actions: [(0, transaction_1.transfer)(amount)]
                });
            });
        }
        /**
         * @param newAccountId NEAR account name to be created
         * @param publicKey A public key created from the masterAccount
         */
        createAccount(newAccountId, publicKey, amount) {
            return __awaiter(this, void 0, void 0, function* () {
                const accessKey = (0, transaction_1.fullAccessKey)();
                return this.signAndSendTransaction({
                    receiverId: newAccountId,
                    actions: [(0, transaction_1.createAccount)(), (0, transaction_1.transfer)(amount), (0, transaction_1.addKey)(key_pair_1.PublicKey.from(publicKey), accessKey)]
                });
            });
        }
        /**
         * @param beneficiaryId The NEAR account that will receive the remaining Ⓝ balance from the account being deleted
         */
        deleteAccount(beneficiaryId) {
            return __awaiter(this, void 0, void 0, function* () {
                if (!process.env['NEAR_NO_LOGS']) {
                    console.log('Deleting an account does not automatically transfer NFTs and FTs to the beneficiary address. Ensure to transfer assets before deleting.');
                }
                return this.signAndSendTransaction({
                    receiverId: this.accountId,
                    actions: [(0, transaction_1.deleteAccount)(beneficiaryId)]
                });
            });
        }
        /**
         * @param data The compiled contract code
         */
        deployContract(data) {
            return __awaiter(this, void 0, void 0, function* () {
                return this.signAndSendTransaction({
                    receiverId: this.accountId,
                    actions: [(0, transaction_1.deployContract)(data)]
                });
            });
        }
        /** @hidden */
        encodeJSContractArgs(contractId, method, args) {
            return Buffer.concat([Buffer.from(contractId), Buffer.from([0]), Buffer.from(method), Buffer.from([0]), Buffer.from(args)]);
        }
        /**
         * Execute function call
         * @returns {Promise<FinalExecutionOutcome>}
         */
        functionCall({ contractId, methodName, args = {}, gas = constants_1.DEFAULT_FUNCTION_CALL_GAS, attachedDeposit, walletMeta, walletCallbackUrl, stringify, jsContract }) {
            return __awaiter(this, void 0, void 0, function* () {
                this.validateArgs(args);
                let functionCallArgs;
                if (jsContract) {
                    const encodedArgs = this.encodeJSContractArgs(contractId, methodName, JSON.stringify(args));
                    functionCallArgs = ['call_js_contract', encodedArgs, gas, attachedDeposit, null, true];
                }
                else {
                    const stringifyArg = stringify === undefined ? transaction_1.stringifyJsonOrBytes : stringify;
                    functionCallArgs = [methodName, args, gas, attachedDeposit, stringifyArg, false];
                }
                return this.signAndSendTransaction({
                    receiverId: jsContract ? this.connection.jsvmAccountId : contractId,
                    // eslint-disable-next-line prefer-spread
                    actions: [transaction_1.functionCall.apply(void 0, functionCallArgs)],
                    walletMeta,
                    walletCallbackUrl
                });
            });
        }
        /**
         * @see [https://docs.near.org/concepts/basics/accounts/access-keys](https://docs.near.org/concepts/basics/accounts/access-keys)
         * @todo expand this API to support more options.
         * @param publicKey A public key to be associated with the contract
         * @param contractId NEAR account where the contract is deployed
         * @param methodNames The method names on the contract that should be allowed to be called. Pass null for no method names and '' or [] for any method names.
         * @param amount Payment in yoctoⓃ that is sent to the contract during this function call
         */
        addKey(publicKey, contractId, methodNames, amount) {
            return __awaiter(this, void 0, void 0, function* () {
                if (!methodNames) {
                    methodNames = [];
                }
                if (!Array.isArray(methodNames)) {
                    methodNames = [methodNames];
                }
                let accessKey;
                if (!contractId) {
                    accessKey = (0, transaction_1.fullAccessKey)();
                }
                else {
                    accessKey = (0, transaction_1.functionCallAccessKey)(contractId, methodNames, amount);
                }
                return this.signAndSendTransaction({
                    receiverId: this.accountId,
                    actions: [(0, transaction_1.addKey)(key_pair_1.PublicKey.from(publicKey), accessKey)]
                });
            });
        }
        /**
         * @param publicKey The public key to be deleted
         * @returns {Promise<FinalExecutionOutcome>}
         */
        deleteKey(publicKey) {
            return __awaiter(this, void 0, void 0, function* () {
                return this.signAndSendTransaction({
                    receiverId: this.accountId,
                    actions: [(0, transaction_1.deleteKey)(key_pair_1.PublicKey.from(publicKey))]
                });
            });
        }
        /**
         * @see [https://near-nodes.io/validator/staking-and-delegation](https://near-nodes.io/validator/staking-and-delegation)
         *
         * @param publicKey The public key for the account that's staking
         * @param amount The account to stake in yoctoⓃ
         */
        stake(publicKey, amount) {
            return __awaiter(this, void 0, void 0, function* () {
                return this.signAndSendTransaction({
                    receiverId: this.accountId,
                    actions: [(0, transaction_1.stake)(amount, key_pair_1.PublicKey.from(publicKey))]
                });
            });
        }
        /** @hidden */
        validateArgs(args) {
            const isUint8Array = args.byteLength !== undefined && args.byteLength === args.length;
            if (isUint8Array) {
                return;
            }
            if (Array.isArray(args) || typeof args !== 'object') {
                throw new errors_1.PositionalArgsError();
            }
        }
        /**
         * Invoke a contract view function using the RPC API.
         * @see [https://docs.near.org/api/rpc/contracts#call-a-contract-function](https://docs.near.org/api/rpc/contracts#call-a-contract-function)
         *
         * @param contractId NEAR account where the contract is deployed
         * @param methodName The view-only method (no state mutations) name on the contract as it is written in the contract code
         * @param args Any arguments to the view contract method, wrapped in JSON
         * @param options.parse Parse the result of the call. Receives a Buffer (bytes array) and converts it to any object. By default result will be treated as json.
         * @param options.stringify Convert input arguments into a bytes array. By default the input is treated as a JSON.
         * @param options.jsContract Is contract from JS SDK, automatically encodes args from JS SDK to binary.
         * @param options.blockQuery specifies which block to query state at. By default returns last "optimistic" block (i.e. not necessarily finalized).
         * @returns {Promise<any>}
         */
        viewFunction(...restArgs) {
            return __awaiter(this, void 0, void 0, function* () {
                if (typeof restArgs[0] === 'string') {
                    const contractId = restArgs[0];
                    const methodName = restArgs[1];
                    const args = restArgs[2];
                    const options = restArgs[3];
                    return yield this.viewFunctionV1(contractId, methodName, args, options);
                }
                else {
                    return yield this.viewFunctionV2(restArgs[0]);
                }
            });
        }
        viewFunctionV1(contractId, methodName, args = {}, { parse = parseJsonFromRawResponse, stringify = bytesJsonStringify, jsContract = false, blockQuery = { finality: 'optimistic' } } = {}) {
            return __awaiter(this, void 0, void 0, function* () {
                const deprecate = (0, depd_1.default)('Account.viewFunction(contractId, methodName, args, options)');
                deprecate('use `Account.viewFunction(ViewFunctionCallOptions)` instead');
                return this.viewFunctionV2({ contractId, methodName, args, parse, stringify, jsContract, blockQuery });
            });
        }
        viewFunctionV2({ contractId, methodName, args, parse = parseJsonFromRawResponse, stringify = bytesJsonStringify, jsContract = false, blockQuery = { finality: 'optimistic' } }) {
            return __awaiter(this, void 0, void 0, function* () {
                let encodedArgs;
                this.validateArgs(args);
                if (jsContract) {
                    encodedArgs = this.encodeJSContractArgs(contractId, methodName, Object.keys(args).length > 0 ? JSON.stringify(args) : '');
                }
                else {
                    encodedArgs = stringify(args);
                }
                const result = yield this.connection.provider.query(Object.assign(Object.assign({ request_type: 'call_function' }, blockQuery), { account_id: jsContract ? this.connection.jsvmAccountId : contractId, method_name: jsContract ? 'view_js_contract' : methodName, args_base64: encodedArgs.toString('base64') }));
                if (result.logs) {
                    this.printLogs(contractId, result.logs);
                }
                return result.result && result.result.length > 0 && parse(Buffer.from(result.result));
            });
        }
        /**
         * Returns the state (key value pairs) of this account's contract based on the key prefix.
         * Pass an empty string for prefix if you would like to return the entire state.
         * @see [https://docs.near.org/api/rpc/contracts#view-contract-state](https://docs.near.org/api/rpc/contracts#view-contract-state)
         *
         * @param prefix allows to filter which keys should be returned. Empty prefix means all keys. String prefix is utf-8 encoded.
         * @param blockQuery specifies which block to query state at. By default returns last "optimistic" block (i.e. not necessarily finalized).
         */
        viewState(prefix, blockQuery = { finality: 'optimistic' }) {
            return __awaiter(this, void 0, void 0, function* () {
                const { values } = yield this.connection.provider.query(Object.assign(Object.assign({ request_type: 'view_state' }, blockQuery), { account_id: this.accountId, prefix_base64: Buffer.from(prefix).toString('base64') }));
                return values.map(({ key, value }) => ({
                    key: Buffer.from(key, 'base64'),
                    value: Buffer.from(value, 'base64')
                }));
            });
        }
        /**
         * Get all access keys for the account
         * @see [https://docs.near.org/api/rpc/access-keys#view-access-key-list](https://docs.near.org/api/rpc/access-keys#view-access-key-list)
         */
        getAccessKeys() {
            var _a;
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this.connection.provider.query({
                    request_type: 'view_access_key_list',
                    account_id: this.accountId,
                    finality: 'optimistic'
                });
                // Replace raw nonce into a new BN
                return (_a = response === null || response === void 0 ? void 0 : response.keys) === null || _a === void 0 ? void 0 : _a.map((key) => (Object.assign(Object.assign({}, key), { access_key: Object.assign(Object.assign({}, key.access_key), { nonce: new bn_js_1.default(key.access_key.nonce) }) })));
            });
        }
        /**
         * Returns a list of authorized apps
         * @todo update the response value to return all the different keys, not just app keys.
         */
        getAccountDetails() {
            return __awaiter(this, void 0, void 0, function* () {
                // TODO: update the response value to return all the different keys, not just app keys.
                // Also if we need this function, or getAccessKeys is good enough.
                const accessKeys = yield this.getAccessKeys();
                const authorizedApps = accessKeys
                    .filter(item => item.access_key.permission !== 'FullAccess')
                    .map(item => {
                    const perm = item.access_key.permission;
                    return {
                        contractId: perm.FunctionCall.receiver_id,
                        amount: perm.FunctionCall.allowance,
                        publicKey: item.public_key,
                    };
                });
                return { authorizedApps };
            });
        }
        /**
         * Returns calculated account balance
         */
        getAccountBalance() {
            return __awaiter(this, void 0, void 0, function* () {
                const protocolConfig = yield this.connection.provider.experimental_protocolConfig({ finality: 'final' });
                const state = yield this.state();
                const costPerByte = new bn_js_1.default(protocolConfig.runtime_config.storage_amount_per_byte);
                const stateStaked = new bn_js_1.default(state.storage_usage).mul(costPerByte);
                const staked = new bn_js_1.default(state.locked);
                const totalBalance = new bn_js_1.default(state.amount).add(staked);
                const availableBalance = totalBalance.sub(bn_js_1.default.max(staked, stateStaked));
                return {
                    total: totalBalance.toString(),
                    stateStaked: stateStaked.toString(),
                    staked: staked.toString(),
                    available: availableBalance.toString()
                };
            });
        }
        /**
         * Returns the NEAR tokens balance and validators of a given account that is delegated to the staking pools that are part of the validators set in the current epoch.
         *
         * NOTE: If the tokens are delegated to a staking pool that is currently on pause or does not have enough tokens to participate in validation, they won't be accounted for.
         * @returns {Promise<ActiveDelegatedStakeBalance>}
         */
        getActiveDelegatedStakeBalance() {
            return __awaiter(this, void 0, void 0, function* () {
                const block = yield this.connection.provider.block({ finality: 'final' });
                const blockHash = block.header.hash;
                const epochId = block.header.epoch_id;
                const { current_validators, next_validators, current_proposals } = yield this.connection.provider.validators(epochId);
                const pools = new Set();
                [...current_validators, ...next_validators, ...current_proposals]
                    .forEach((validator) => pools.add(validator.account_id));
                const uniquePools = [...pools];
                const promises = uniquePools
                    .map((validator) => (this.viewFunction({
                    contractId: validator,
                    methodName: 'get_account_total_balance',
                    args: { account_id: this.accountId },
                    blockQuery: { blockId: blockHash }
                })));
                const results = yield Promise.allSettled(promises);
                const hasTimeoutError = results.some((result) => {
                    if (result.status === 'rejected' && result.reason.type === 'TimeoutError') {
                        return true;
                    }
                    return false;
                });
                // When RPC is down and return timeout error, throw error
                if (hasTimeoutError) {
                    throw new Error('Failed to get delegated stake balance');
                }
                const summary = results.reduce((result, state, index) => {
                    const validatorId = uniquePools[index];
                    if (state.status === 'fulfilled') {
                        const currentBN = new bn_js_1.default(state.value);
                        if (!currentBN.isZero()) {
                            return Object.assign(Object.assign({}, result), { stakedValidators: [...result.stakedValidators, { validatorId, amount: currentBN.toString() }], total: result.total.add(currentBN) });
                        }
                    }
                    if (state.status === 'rejected') {
                        return Object.assign(Object.assign({}, result), { failedValidators: [...result.failedValidators, { validatorId, error: state.reason }] });
                    }
                    return result;
                }, { stakedValidators: [], failedValidators: [], total: new bn_js_1.default(0) });
                return Object.assign(Object.assign({}, summary), { total: summary.total.toString() });
            });
        }
    }
    exports.Account = Account;
    
    }).call(this)}).call(this,require('_process'),require("buffer").Buffer)
    },{"./constants":53,"./providers":62,"./transaction":67,"./utils/errors":69,"./utils/exponential-backoff":70,"./utils/key_pair":73,"./utils/rpc_errors":74,"_process":33,"bn.js":3,"borsh":4,"buffer":7,"depd":14}],47:[function(require,module,exports){
    "use strict";
    var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UrlAccountCreator = exports.LocalAccountCreator = exports.AccountCreator = void 0;
    const web_1 = require("./utils/web");
    /**
     * Account creator provides an interface for implementations to actually create accounts
     */
    class AccountCreator {
    }
    exports.AccountCreator = AccountCreator;
    class LocalAccountCreator extends AccountCreator {
        constructor(masterAccount, initialBalance) {
            super();
            this.masterAccount = masterAccount;
            this.initialBalance = initialBalance;
        }
        /**
         * Creates an account using a masterAccount, meaning the new account is created from an existing account
         * @param newAccountId The name of the NEAR account to be created
         * @param publicKey The public key from the masterAccount used to create this account
         * @returns {Promise<void>}
         */
        createAccount(newAccountId, publicKey) {
            return __awaiter(this, void 0, void 0, function* () {
                yield this.masterAccount.createAccount(newAccountId, publicKey, this.initialBalance);
            });
        }
    }
    exports.LocalAccountCreator = LocalAccountCreator;
    class UrlAccountCreator extends AccountCreator {
        constructor(connection, helperUrl) {
            super();
            this.connection = connection;
            this.helperUrl = helperUrl;
        }
        /**
         * Creates an account using a helperUrl
         * This is [hosted here](https://helper.nearprotocol.com) or set up locally with the [near-contract-helper](https://github.com/nearprotocol/near-contract-helper) repository
         * @param newAccountId The name of the NEAR account to be created
         * @param publicKey The public key from the masterAccount used to create this account
         * @returns {Promise<void>}
         */
        createAccount(newAccountId, publicKey) {
            return __awaiter(this, void 0, void 0, function* () {
                yield (0, web_1.fetchJson)(`${this.helperUrl}/account`, JSON.stringify({ newAccountId, newAccountPublicKey: publicKey.toString() }));
            });
        }
    }
    exports.UrlAccountCreator = UrlAccountCreator;
    
    },{"./utils/web":76}],48:[function(require,module,exports){
    (function (Buffer){(function (){
    'use strict';
    var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __importDefault = (this && this.__importDefault) || function (mod) {
        return (mod && mod.__esModule) ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Account2FA = exports.AccountMultisig = exports.MultisigStateStatus = exports.MultisigDeleteRequestRejectionError = exports.MULTISIG_CONFIRM_METHODS = exports.MULTISIG_CHANGE_METHODS = exports.MULTISIG_DEPOSIT = exports.MULTISIG_GAS = exports.MULTISIG_ALLOWANCE = exports.MULTISIG_STORAGE_KEY = void 0;
    const bn_js_1 = __importDefault(require("bn.js"));
    const account_1 = require("./account");
    const format_1 = require("./utils/format");
    const key_pair_1 = require("./utils/key_pair");
    const transaction_1 = require("./transaction");
    const providers_1 = require("./providers");
    const web_1 = require("./utils/web");
    exports.MULTISIG_STORAGE_KEY = '__multisigRequest';
    exports.MULTISIG_ALLOWANCE = new bn_js_1.default((0, format_1.parseNearAmount)('1'));
    // TODO: Different gas value for different requests (can reduce gas usage dramatically)
    exports.MULTISIG_GAS = new bn_js_1.default('100000000000000');
    exports.MULTISIG_DEPOSIT = new bn_js_1.default('0');
    exports.MULTISIG_CHANGE_METHODS = ['add_request', 'add_request_and_confirm', 'delete_request', 'confirm'];
    exports.MULTISIG_CONFIRM_METHODS = ['confirm'];
    var MultisigDeleteRequestRejectionError;
    (function (MultisigDeleteRequestRejectionError) {
        MultisigDeleteRequestRejectionError["CANNOT_DESERIALIZE_STATE"] = "Cannot deserialize the contract state";
        MultisigDeleteRequestRejectionError["MULTISIG_NOT_INITIALIZED"] = "Smart contract panicked: Multisig contract should be initialized before usage";
        MultisigDeleteRequestRejectionError["NO_SUCH_REQUEST"] = "Smart contract panicked: panicked at 'No such request: either wrong number or already confirmed'";
        MultisigDeleteRequestRejectionError["REQUEST_COOLDOWN_ERROR"] = "Request cannot be deleted immediately after creation.";
        MultisigDeleteRequestRejectionError["METHOD_NOT_FOUND"] = "Contract method is not found";
    })(MultisigDeleteRequestRejectionError = exports.MultisigDeleteRequestRejectionError || (exports.MultisigDeleteRequestRejectionError = {}));
    var MultisigStateStatus;
    (function (MultisigStateStatus) {
        MultisigStateStatus[MultisigStateStatus["INVALID_STATE"] = 0] = "INVALID_STATE";
        MultisigStateStatus[MultisigStateStatus["STATE_NOT_INITIALIZED"] = 1] = "STATE_NOT_INITIALIZED";
        MultisigStateStatus[MultisigStateStatus["VALID_STATE"] = 2] = "VALID_STATE";
        MultisigStateStatus[MultisigStateStatus["UNKNOWN_STATE"] = 3] = "UNKNOWN_STATE";
    })(MultisigStateStatus = exports.MultisigStateStatus || (exports.MultisigStateStatus = {}));
    var MultisigCodeStatus;
    (function (MultisigCodeStatus) {
        MultisigCodeStatus[MultisigCodeStatus["INVALID_CODE"] = 0] = "INVALID_CODE";
        MultisigCodeStatus[MultisigCodeStatus["VALID_CODE"] = 1] = "VALID_CODE";
        MultisigCodeStatus[MultisigCodeStatus["UNKNOWN_CODE"] = 2] = "UNKNOWN_CODE";
    })(MultisigCodeStatus || (MultisigCodeStatus = {}));
    // in memory request cache for node w/o localStorage
    const storageFallback = {
        [exports.MULTISIG_STORAGE_KEY]: null
    };
    class AccountMultisig extends account_1.Account {
        constructor(connection, accountId, options) {
            super(connection, accountId);
            this.storage = options.storage;
            this.onAddRequestResult = options.onAddRequestResult;
        }
        signAndSendTransactionWithAccount(receiverId, actions) {
            const _super = Object.create(null, {
                signAndSendTransaction: { get: () => super.signAndSendTransaction }
            });
            return __awaiter(this, void 0, void 0, function* () {
                return _super.signAndSendTransaction.call(this, { receiverId, actions });
            });
        }
        signAndSendTransaction({ receiverId, actions }) {
            const _super = Object.create(null, {
                signAndSendTransaction: { get: () => super.signAndSendTransaction }
            });
            return __awaiter(this, void 0, void 0, function* () {
                const { accountId } = this;
                const args = Buffer.from(JSON.stringify({
                    request: {
                        receiver_id: receiverId,
                        actions: convertActions(actions, accountId, receiverId)
                    }
                }));
                let result;
                try {
                    result = yield _super.signAndSendTransaction.call(this, {
                        receiverId: accountId,
                        actions: [
                            (0, transaction_1.functionCall)('add_request_and_confirm', args, exports.MULTISIG_GAS, exports.MULTISIG_DEPOSIT)
                        ]
                    });
                }
                catch (e) {
                    if (e.toString().includes('Account has too many active requests. Confirm or delete some')) {
                        yield this.deleteUnconfirmedRequests();
                        return yield this.signAndSendTransaction({ receiverId, actions });
                    }
                    throw e;
                }
                // TODO: Are following even needed? Seems like it throws on error already
                if (!result.status) {
                    throw new Error('Request failed');
                }
                const status = Object.assign({}, result.status);
                if (!status.SuccessValue || typeof status.SuccessValue !== 'string') {
                    throw new Error('Request failed');
                }
                this.setRequest({
                    accountId,
                    actions,
                    requestId: parseInt(Buffer.from(status.SuccessValue, 'base64').toString('ascii'), 10)
                });
                if (this.onAddRequestResult) {
                    yield this.onAddRequestResult(result);
                }
                // NOTE there is no await on purpose to avoid blocking for 2fa
                this.deleteUnconfirmedRequests();
                return result;
            });
        }
        /*
         * This method submits a canary transaction that is expected to always fail in order to determine whether the contract currently has valid multisig state
         * and whether it is initialized. The canary transaction attempts to delete a request at index u32_max and will go through if a request exists at that index.
         * a u32_max + 1 and -1 value cannot be used for the canary due to expected u32 error thrown before deserialization attempt.
         */
        checkMultisigCodeAndStateStatus(contractBytes) {
            const _super = Object.create(null, {
                signAndSendTransaction: { get: () => super.signAndSendTransaction }
            });
            return __awaiter(this, void 0, void 0, function* () {
                const u32_max = 4294967295;
                const validCodeStatusIfNoDeploy = contractBytes ? MultisigCodeStatus.UNKNOWN_CODE : MultisigCodeStatus.VALID_CODE;
                try {
                    if (contractBytes) {
                        yield _super.signAndSendTransaction.call(this, {
                            receiverId: this.accountId, actions: [
                                (0, transaction_1.deployContract)(contractBytes),
                                (0, transaction_1.functionCall)('delete_request', { request_id: u32_max }, exports.MULTISIG_GAS, exports.MULTISIG_DEPOSIT)
                            ]
                        });
                    }
                    else {
                        yield this.deleteRequest(u32_max);
                    }
                    return { codeStatus: MultisigCodeStatus.VALID_CODE, stateStatus: MultisigStateStatus.VALID_STATE };
                }
                catch (e) {
                    if (new RegExp(MultisigDeleteRequestRejectionError.CANNOT_DESERIALIZE_STATE).test(e && e.kind && e.kind.ExecutionError)) {
                        return { codeStatus: validCodeStatusIfNoDeploy, stateStatus: MultisigStateStatus.INVALID_STATE };
                    }
                    else if (new RegExp(MultisigDeleteRequestRejectionError.MULTISIG_NOT_INITIALIZED).test(e && e.kind && e.kind.ExecutionError)) {
                        return { codeStatus: validCodeStatusIfNoDeploy, stateStatus: MultisigStateStatus.STATE_NOT_INITIALIZED };
                    }
                    else if (new RegExp(MultisigDeleteRequestRejectionError.NO_SUCH_REQUEST).test(e && e.kind && e.kind.ExecutionError)) {
                        return { codeStatus: validCodeStatusIfNoDeploy, stateStatus: MultisigStateStatus.VALID_STATE };
                    }
                    else if (new RegExp(MultisigDeleteRequestRejectionError.METHOD_NOT_FOUND).test(e && e.message)) {
                        // not reachable if transaction included a deploy
                        return { codeStatus: MultisigCodeStatus.INVALID_CODE, stateStatus: MultisigStateStatus.UNKNOWN_STATE };
                    }
                    throw e;
                }
            });
        }
        deleteRequest(request_id) {
            return super.signAndSendTransaction({
                receiverId: this.accountId,
                actions: [(0, transaction_1.functionCall)('delete_request', { request_id }, exports.MULTISIG_GAS, exports.MULTISIG_DEPOSIT)]
            });
        }
        deleteAllRequests() {
            return __awaiter(this, void 0, void 0, function* () {
                const request_ids = yield this.getRequestIds();
                if (request_ids.length) {
                    yield Promise.all(request_ids.map((id) => this.deleteRequest(id)));
                }
            });
        }
        deleteUnconfirmedRequests() {
            const _super = Object.create(null, {
                signAndSendTransaction: { get: () => super.signAndSendTransaction }
            });
            return __awaiter(this, void 0, void 0, function* () {
                // TODO: Delete in batch, don't delete unexpired
                // TODO: Delete in batch, don't delete unexpired (can reduce gas usage dramatically)
                const request_ids = yield this.getRequestIds();
                const { requestId } = this.getRequest();
                for (const requestIdToDelete of request_ids) {
                    if (requestIdToDelete == requestId) {
                        continue;
                    }
                    try {
                        yield _super.signAndSendTransaction.call(this, {
                            receiverId: this.accountId,
                            actions: [(0, transaction_1.functionCall)('delete_request', { request_id: requestIdToDelete }, exports.MULTISIG_GAS, exports.MULTISIG_DEPOSIT)]
                        });
                    }
                    catch (e) {
                        console.warn('Attempt to delete an earlier request before 15 minutes failed. Will try again.');
                    }
                }
            });
        }
        // helpers
        getRequestIds() {
            return __awaiter(this, void 0, void 0, function* () {
                // TODO: Read requests from state to allow filtering by expiration time
                // TODO: https://github.com/near/core-contracts/blob/305d1db4f4f2cf5ce4c1ef3479f7544957381f11/multisig/src/lib.rs#L84
                return this.viewFunction(this.accountId, 'list_request_ids');
            });
        }
        getRequest() {
            if (this.storage) {
                return JSON.parse(this.storage.getItem(exports.MULTISIG_STORAGE_KEY) || '{}');
            }
            return storageFallback[exports.MULTISIG_STORAGE_KEY];
        }
        setRequest(data) {
            if (this.storage) {
                return this.storage.setItem(exports.MULTISIG_STORAGE_KEY, JSON.stringify(data));
            }
            storageFallback[exports.MULTISIG_STORAGE_KEY] = data;
        }
    }
    exports.AccountMultisig = AccountMultisig;
    class Account2FA extends AccountMultisig {
        constructor(connection, accountId, options) {
            super(connection, accountId, options);
            this.helperUrl = 'https://helper.testnet.near.org';
            this.helperUrl = options.helperUrl || this.helperUrl;
            this.storage = options.storage;
            this.sendCode = options.sendCode || this.sendCodeDefault;
            this.getCode = options.getCode || this.getCodeDefault;
            this.verifyCode = options.verifyCode || this.verifyCodeDefault;
            this.onConfirmResult = options.onConfirmResult;
        }
        /**
         * Sign a transaction to preform a list of actions and broadcast it using the RPC API.
         * @see {@link providers/json-rpc-provider!JsonRpcProvider#sendTransaction | JsonRpcProvider.sendTransaction}
         */
        signAndSendTransaction({ receiverId, actions }) {
            const _super = Object.create(null, {
                signAndSendTransaction: { get: () => super.signAndSendTransaction }
            });
            return __awaiter(this, void 0, void 0, function* () {
                yield _super.signAndSendTransaction.call(this, { receiverId, actions });
                // TODO: Should following override onRequestResult in superclass instead of doing custom signAndSendTransaction?
                yield this.sendCode();
                const result = yield this.promptAndVerify();
                if (this.onConfirmResult) {
                    yield this.onConfirmResult(result);
                }
                return result;
            });
        }
        // default helpers for CH deployments of multisig
        deployMultisig(contractBytes) {
            const _super = Object.create(null, {
                signAndSendTransactionWithAccount: { get: () => super.signAndSendTransactionWithAccount }
            });
            return __awaiter(this, void 0, void 0, function* () {
                const { accountId } = this;
                const seedOrLedgerKey = (yield this.getRecoveryMethods()).data
                    .filter(({ kind, publicKey }) => (kind === 'phrase' || kind === 'ledger') && publicKey !== null)
                    .map((rm) => rm.publicKey);
                const fak2lak = (yield this.getAccessKeys())
                    .filter(({ public_key, access_key: { permission } }) => permission === 'FullAccess' && !seedOrLedgerKey.includes(public_key))
                    .map((ak) => ak.public_key)
                    .map(toPK);
                const confirmOnlyKey = toPK((yield this.postSignedJson('/2fa/getAccessKey', { accountId })).publicKey);
                const newArgs = Buffer.from(JSON.stringify({ 'num_confirmations': 2 }));
                const actions = [
                    ...fak2lak.map((pk) => (0, transaction_1.deleteKey)(pk)),
                    ...fak2lak.map((pk) => (0, transaction_1.addKey)(pk, (0, transaction_1.functionCallAccessKey)(accountId, exports.MULTISIG_CHANGE_METHODS, null))),
                    (0, transaction_1.addKey)(confirmOnlyKey, (0, transaction_1.functionCallAccessKey)(accountId, exports.MULTISIG_CONFIRM_METHODS, null)),
                    (0, transaction_1.deployContract)(contractBytes),
                ];
                const newFunctionCallActionBatch = actions.concat((0, transaction_1.functionCall)('new', newArgs, exports.MULTISIG_GAS, exports.MULTISIG_DEPOSIT));
                console.log('deploying multisig contract for', accountId);
                const { stateStatus: multisigStateStatus } = yield this.checkMultisigCodeAndStateStatus(contractBytes);
                switch (multisigStateStatus) {
                    case MultisigStateStatus.STATE_NOT_INITIALIZED:
                        return yield _super.signAndSendTransactionWithAccount.call(this, accountId, newFunctionCallActionBatch);
                    case MultisigStateStatus.VALID_STATE:
                        return yield _super.signAndSendTransactionWithAccount.call(this, accountId, actions);
                    case MultisigStateStatus.INVALID_STATE:
                        throw new providers_1.TypedError(`Can not deploy a contract to account ${this.accountId} on network ${this.connection.networkId}, the account has existing state.`, 'ContractHasExistingState');
                    default:
                        throw new providers_1.TypedError(`Can not deploy a contract to account ${this.accountId} on network ${this.connection.networkId}, the account state could not be verified.`, 'ContractStateUnknown');
                }
            });
        }
        disableWithFAK({ contractBytes, cleanupContractBytes }) {
            return __awaiter(this, void 0, void 0, function* () {
                let cleanupActions = [];
                if (cleanupContractBytes) {
                    yield this.deleteAllRequests().catch(e => e);
                    cleanupActions = yield this.get2faDisableCleanupActions(cleanupContractBytes);
                }
                const keyConversionActions = yield this.get2faDisableKeyConversionActions();
                const actions = [
                    ...cleanupActions,
                    ...keyConversionActions,
                    (0, transaction_1.deployContract)(contractBytes)
                ];
                const accessKeyInfo = yield this.findAccessKey(this.accountId, actions);
                if (accessKeyInfo && accessKeyInfo.accessKey && accessKeyInfo.accessKey.permission !== 'FullAccess') {
                    throw new providers_1.TypedError('No full access key found in keystore. Unable to bypass multisig', 'NoFAKFound');
                }
                return this.signAndSendTransactionWithAccount(this.accountId, actions);
            });
        }
        get2faDisableCleanupActions(cleanupContractBytes) {
            return __awaiter(this, void 0, void 0, function* () {
                const currentAccountState = yield this.viewState('').catch(error => {
                    const cause = error.cause && error.cause.name;
                    if (cause == 'NO_CONTRACT_CODE') {
                        return [];
                    }
                    throw cause == 'TOO_LARGE_CONTRACT_STATE'
                        ? new providers_1.TypedError(`Can not deploy a contract to account ${this.accountId} on network ${this.connection.networkId}, the account has existing state.`, 'ContractHasExistingState')
                        : error;
                });
                const currentAccountStateKeys = currentAccountState.map(({ key }) => key.toString('base64'));
                return currentAccountState.length ? [
                    (0, transaction_1.deployContract)(cleanupContractBytes),
                    (0, transaction_1.functionCall)('clean', { keys: currentAccountStateKeys }, exports.MULTISIG_GAS, new bn_js_1.default('0'))
                ] : [];
            });
        }
        get2faDisableKeyConversionActions() {
            return __awaiter(this, void 0, void 0, function* () {
                const { accountId } = this;
                const accessKeys = yield this.getAccessKeys();
                const lak2fak = accessKeys
                    .filter(({ access_key }) => access_key.permission !== 'FullAccess')
                    .filter(({ access_key }) => {
                    const perm = access_key.permission.FunctionCall;
                    return perm.receiver_id === accountId &&
                        perm.method_names.length === 4 &&
                        perm.method_names.includes('add_request_and_confirm');
                });
                const confirmOnlyKey = key_pair_1.PublicKey.from((yield this.postSignedJson('/2fa/getAccessKey', { accountId })).publicKey);
                return [
                    (0, transaction_1.deleteKey)(confirmOnlyKey),
                    ...lak2fak.map(({ public_key }) => (0, transaction_1.deleteKey)(key_pair_1.PublicKey.from(public_key))),
                    ...lak2fak.map(({ public_key }) => (0, transaction_1.addKey)(key_pair_1.PublicKey.from(public_key), (0, transaction_1.fullAccessKey)()))
                ];
            });
        }
        /**
         * This method converts LAKs back to FAKs, clears state and deploys an 'empty' contract (contractBytes param)
         * @param [contractBytes]{@link https://github.com/near/near-wallet/blob/master/packages/frontend/src/wasm/main.wasm?raw=true}
         * @param [cleanupContractBytes]{@link https://github.com/near/core-contracts/blob/master/state-cleanup/res/state_cleanup.wasm?raw=true}
         */
        disable(contractBytes, cleanupContractBytes) {
            return __awaiter(this, void 0, void 0, function* () {
                const { stateStatus } = yield this.checkMultisigCodeAndStateStatus();
                if (stateStatus !== MultisigStateStatus.VALID_STATE && stateStatus !== MultisigStateStatus.STATE_NOT_INITIALIZED) {
                    throw new providers_1.TypedError(`Can not deploy a contract to account ${this.accountId} on network ${this.connection.networkId}, the account state could not be verified.`, 'ContractStateUnknown');
                }
                let deleteAllRequestsError;
                yield this.deleteAllRequests().catch(e => deleteAllRequestsError = e);
                const cleanupActions = yield this.get2faDisableCleanupActions(cleanupContractBytes).catch(e => {
                    if (e.type === 'ContractHasExistingState') {
                        throw deleteAllRequestsError || e;
                    }
                    throw e;
                });
                const actions = [
                    ...cleanupActions,
                    ...(yield this.get2faDisableKeyConversionActions()),
                    (0, transaction_1.deployContract)(contractBytes),
                ];
                console.log('disabling 2fa for', this.accountId);
                return yield this.signAndSendTransaction({
                    receiverId: this.accountId,
                    actions
                });
            });
        }
        sendCodeDefault() {
            return __awaiter(this, void 0, void 0, function* () {
                const { accountId } = this;
                const { requestId } = this.getRequest();
                const method = yield this.get2faMethod();
                yield this.postSignedJson('/2fa/send', {
                    accountId,
                    method,
                    requestId,
                });
                return requestId;
            });
        }
        getCodeDefault() {
            return __awaiter(this, void 0, void 0, function* () {
                throw new Error('There is no getCode callback provided. Please provide your own in AccountMultisig constructor options. It has a parameter method where method.kind is "email" or "phone".');
            });
        }
        promptAndVerify() {
            return __awaiter(this, void 0, void 0, function* () {
                const method = yield this.get2faMethod();
                const securityCode = yield this.getCode(method);
                try {
                    const result = yield this.verifyCode(securityCode);
                    // TODO: Parse error from result for real (like in normal account.signAndSendTransaction)
                    return result;
                }
                catch (e) {
                    console.warn('Error validating security code:', e);
                    if (e.toString().includes('invalid 2fa code provided') || e.toString().includes('2fa code not valid')) {
                        return yield this.promptAndVerify();
                    }
                    throw e;
                }
            });
        }
        verifyCodeDefault(securityCode) {
            return __awaiter(this, void 0, void 0, function* () {
                const { accountId } = this;
                const request = this.getRequest();
                if (!request) {
                    throw new Error('no request pending');
                }
                const { requestId } = request;
                return yield this.postSignedJson('/2fa/verify', {
                    accountId,
                    securityCode,
                    requestId
                });
            });
        }
        getRecoveryMethods() {
            return __awaiter(this, void 0, void 0, function* () {
                const { accountId } = this;
                return {
                    accountId,
                    data: yield this.postSignedJson('/account/recoveryMethods', { accountId })
                };
            });
        }
        get2faMethod() {
            return __awaiter(this, void 0, void 0, function* () {
                let { data } = yield this.getRecoveryMethods();
                if (data && data.length) {
                    data = data.find((m) => m.kind.indexOf('2fa-') === 0);
                }
                if (!data)
                    return null;
                const { kind, detail } = data;
                return { kind, detail };
            });
        }
        signatureFor() {
            return __awaiter(this, void 0, void 0, function* () {
                const { accountId } = this;
                const block = yield this.connection.provider.block({ finality: 'final' });
                const blockNumber = block.header.height.toString();
                const signed = yield this.connection.signer.signMessage(Buffer.from(blockNumber), accountId, this.connection.networkId);
                const blockNumberSignature = Buffer.from(signed.signature).toString('base64');
                return { blockNumber, blockNumberSignature };
            });
        }
        postSignedJson(path, body) {
            return __awaiter(this, void 0, void 0, function* () {
                return yield (0, web_1.fetchJson)(this.helperUrl + path, JSON.stringify(Object.assign(Object.assign({}, body), (yield this.signatureFor()))));
            });
        }
    }
    exports.Account2FA = Account2FA;
    // helpers
    const toPK = (pk) => key_pair_1.PublicKey.from(pk);
    const convertPKForContract = (pk) => pk.toString().replace('ed25519:', '');
    const convertActions = (actions, accountId, receiverId) => actions.map((a) => {
        const type = a.enum;
        const { gas, publicKey, methodName, args, deposit, accessKey, code } = a[type];
        const action = {
            type: type[0].toUpperCase() + type.substr(1),
            gas: (gas && gas.toString()) || undefined,
            public_key: (publicKey && convertPKForContract(publicKey)) || undefined,
            method_name: methodName,
            args: (args && Buffer.from(args).toString('base64')) || undefined,
            code: (code && Buffer.from(code).toString('base64')) || undefined,
            amount: (deposit && deposit.toString()) || undefined,
            deposit: (deposit && deposit.toString()) || '0',
            permission: undefined,
        };
        if (accessKey) {
            if (receiverId === accountId && accessKey.permission.enum !== 'fullAccess') {
                action.permission = {
                    receiver_id: accountId,
                    allowance: exports.MULTISIG_ALLOWANCE.toString(),
                    method_names: exports.MULTISIG_CHANGE_METHODS,
                };
            }
            if (accessKey.permission.enum === 'functionCall') {
                const { receiverId: receiver_id, methodNames: method_names, allowance } = accessKey.permission.functionCall;
                action.permission = {
                    receiver_id,
                    allowance: (allowance && allowance.toString()) || undefined,
                    method_names
                };
            }
        }
        return action;
    });
    
    }).call(this)}).call(this,require("buffer").Buffer)
    },{"./account":46,"./providers":62,"./transaction":67,"./utils/format":71,"./utils/key_pair":73,"./utils/web":76,"bn.js":3,"buffer":7}],49:[function(require,module,exports){
    "use strict";
    var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.connect = void 0;
    /**
     * Connect to NEAR using the provided configuration.
     *
     * {@link ConnectConfig.networkId} and {@link ConnectConfig.nodeUrl} are required.
     *
     * To sign transactions you can also pass: {@link ConnectConfig.keyStore}
     *
     * Both are passed they are prioritize in that order.
     *
     * @see {@link ConnectConfig}
     * @example
     * ```js
     * async function initNear() {
     *   const near = await connect({
     *      networkId: 'testnet',
     *      nodeUrl: 'https://rpc.testnet.near.org'
     *   })
     * }
     * ```
     *
     * @module browserConnect
     */
    const near_1 = require("./near");
    /**
     * Initialize connection to Near network.
     */
    function connect(config) {
        return __awaiter(this, void 0, void 0, function* () {
            return new near_1.Near(config);
        });
    }
    exports.connect = connect;
    
    },{"./near":61}],50:[function(require,module,exports){
    "use strict";
    var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() { return m[k]; } };
        }
        Object.defineProperty(o, k2, desc);
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
        o["default"] = v;
    });
    var __importStar = (this && this.__importStar) || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };
    var __exportStar = (this && this.__exportStar) || function(m, exports) {
        for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.keyStores = void 0;
    /** @hidden @module */
    exports.keyStores = __importStar(require("./key_stores/browser-index"));
    __exportStar(require("./common-index"), exports);
    __exportStar(require("./browser-connect"), exports);
    require("error-polyfill");
    
    },{"./browser-connect":49,"./common-index":51,"./key_stores/browser-index":56,"error-polyfill":15}],51:[function(require,module,exports){
    "use strict";
    var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() { return m[k]; } };
        }
        Object.defineProperty(o, k2, desc);
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
        o["default"] = v;
    });
    var __importStar = (this && this.__importStar) || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.WalletConnection = exports.ConnectedWalletAccount = exports.Near = exports.KeyPair = exports.Signer = exports.InMemorySigner = exports.Contract = exports.Connection = exports.Account = exports.multisig = exports.validators = exports.transactions = exports.utils = exports.providers = exports.accountCreator = void 0;
    /** @hidden @module */
    const providers = __importStar(require("./providers"));
    exports.providers = providers;
    const utils = __importStar(require("./utils"));
    exports.utils = utils;
    const transactions = __importStar(require("./transaction"));
    exports.transactions = transactions;
    const validators = __importStar(require("./validators"));
    exports.validators = validators;
    const account_1 = require("./account");
    Object.defineProperty(exports, "Account", { enumerable: true, get: function () { return account_1.Account; } });
    const multisig = __importStar(require("./account_multisig"));
    exports.multisig = multisig;
    const accountCreator = __importStar(require("./account_creator"));
    exports.accountCreator = accountCreator;
    const connection_1 = require("./connection");
    Object.defineProperty(exports, "Connection", { enumerable: true, get: function () { return connection_1.Connection; } });
    const signer_1 = require("./signer");
    Object.defineProperty(exports, "Signer", { enumerable: true, get: function () { return signer_1.Signer; } });
    Object.defineProperty(exports, "InMemorySigner", { enumerable: true, get: function () { return signer_1.InMemorySigner; } });
    const contract_1 = require("./contract");
    Object.defineProperty(exports, "Contract", { enumerable: true, get: function () { return contract_1.Contract; } });
    const key_pair_1 = require("./utils/key_pair");
    Object.defineProperty(exports, "KeyPair", { enumerable: true, get: function () { return key_pair_1.KeyPair; } });
    const near_1 = require("./near");
    Object.defineProperty(exports, "Near", { enumerable: true, get: function () { return near_1.Near; } });
    const wallet_account_1 = require("./wallet-account");
    Object.defineProperty(exports, "ConnectedWalletAccount", { enumerable: true, get: function () { return wallet_account_1.ConnectedWalletAccount; } });
    Object.defineProperty(exports, "WalletConnection", { enumerable: true, get: function () { return wallet_account_1.WalletConnection; } });
    
    },{"./account":46,"./account_creator":47,"./account_multisig":48,"./connection":52,"./contract":54,"./near":61,"./providers":62,"./signer":66,"./transaction":67,"./utils":72,"./utils/key_pair":73,"./validators":77,"./wallet-account":78}],52:[function(require,module,exports){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Connection = void 0;
    const providers_1 = require("./providers");
    const signer_1 = require("./signer");
    /**
     * @param config Contains connection info details
     * @returns {Provider}
     */
    function getProvider(config) {
        switch (config.type) {
            case undefined:
                return config;
            case 'JsonRpcProvider': return new providers_1.JsonRpcProvider(Object.assign({}, config.args));
            default: throw new Error(`Unknown provider type ${config.type}`);
        }
    }
    /**
     * @param config Contains connection info details
     * @returns {Signer}
     */
    function getSigner(config) {
        switch (config.type) {
            case undefined:
                return config;
            case 'InMemorySigner': {
                return new signer_1.InMemorySigner(config.keyStore);
            }
            default: throw new Error(`Unknown signer type ${config.type}`);
        }
    }
    /**
     * Connects an account to a given network via a given provider
     */
    class Connection {
        constructor(networkId, provider, signer, jsvmAccountId) {
            this.networkId = networkId;
            this.provider = provider;
            this.signer = signer;
            this.jsvmAccountId = jsvmAccountId;
        }
        /**
         * @param config Contains connection info details
         */
        static fromConfig(config) {
            const provider = getProvider(config.provider);
            const signer = getSigner(config.signer);
            return new Connection(config.networkId, provider, signer, config.jsvmAccountId);
        }
    }
    exports.Connection = Connection;
    
    },{"./providers":62,"./signer":66}],53:[function(require,module,exports){
    "use strict";
    var __importDefault = (this && this.__importDefault) || function (mod) {
        return (mod && mod.__esModule) ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DEFAULT_FUNCTION_CALL_GAS = void 0;
    const bn_js_1 = __importDefault(require("bn.js"));
    // Default amount of gas to be sent with the function calls. Used to pay for the fees
    // incurred while running the contract execution. The unused amount will be refunded back to
    // the originator.
    // Due to protocol changes that charge upfront for the maximum possible gas price inflation due to
    // full blocks, the price of max_prepaid_gas is decreased to `300 * 10**12`.
    // For discussion see https://github.com/nearprotocol/NEPs/issues/67
    exports.DEFAULT_FUNCTION_CALL_GAS = new bn_js_1.default('30000000000000');
    
    },{"bn.js":3}],54:[function(require,module,exports){
    "use strict";
    var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __importDefault = (this && this.__importDefault) || function (mod) {
        return (mod && mod.__esModule) ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Contract = void 0;
    const bn_js_1 = __importDefault(require("bn.js"));
    const depd_1 = __importDefault(require("depd"));
    const providers_1 = require("./providers");
    const errors_1 = require("./utils/errors");
    // Makes `function.name` return given name
    function nameFunction(name, body) {
        return {
            [name](...args) {
                return body(...args);
            }
        }[name];
    }
    const isUint8Array = (x) => x && x.byteLength !== undefined && x.byteLength === x.length;
    const isObject = (x) => Object.prototype.toString.call(x) === '[object Object]';
    /**
     * Defines a smart contract on NEAR including the change (mutable) and view (non-mutable) methods
     *
     * @see [https://docs.near.org/tools/near-api-js/quick-reference#contract](https://docs.near.org/tools/near-api-js/quick-reference#contract)
     * @example
     * ```js
     * import { Contract } from 'near-api-js';
     *
     * async function contractExample() {
     *   const methodOptions = {
     *     viewMethods: ['getMessageByAccountId'],
     *     changeMethods: ['addMessage']
     *   };
     *   const contract = new Contract(
     *     wallet.account(),
     *     'contract-id.testnet',
     *     methodOptions
     *   );
     *
     *   // use a contract view method
     *   const messages = await contract.getMessages({
     *     accountId: 'example-account.testnet'
     *   });
     *
     *   // use a contract change method
     *   await contract.addMessage({
     *      meta: 'some info',
     *      callbackUrl: 'https://example.com/callback',
     *      args: { text: 'my message' },
     *      amount: 1
     *   })
     * }
     * ```
     */
    class Contract {
        /**
         * @param account NEAR account to sign change method transactions
         * @param contractId NEAR account id where the contract is deployed
         * @param options NEAR smart contract methods that your application will use. These will be available as `contract.methodName`
         */
        constructor(account, contractId, options) {
            this.account = account;
            this.contractId = contractId;
            const { viewMethods = [], changeMethods = [] } = options;
            viewMethods.forEach((methodName) => {
                Object.defineProperty(this, methodName, {
                    writable: false,
                    enumerable: true,
                    value: nameFunction(methodName, (args = {}, options = {}, ...ignored) => __awaiter(this, void 0, void 0, function* () {
                        if (ignored.length || !(isObject(args) || isUint8Array(args)) || !isObject(options)) {
                            throw new errors_1.PositionalArgsError();
                        }
                        return this.account.viewFunction(this.contractId, methodName, args, options);
                    }))
                });
            });
            changeMethods.forEach((methodName) => {
                Object.defineProperty(this, methodName, {
                    writable: false,
                    enumerable: true,
                    value: nameFunction(methodName, (...args) => __awaiter(this, void 0, void 0, function* () {
                        if (args.length && (args.length > 3 || !(isObject(args[0]) || isUint8Array(args[0])))) {
                            throw new errors_1.PositionalArgsError();
                        }
                        if (args.length > 1 || !(args[0] && args[0].args)) {
                            const deprecate = (0, depd_1.default)('contract.methodName(args, gas, amount)');
                            deprecate('use `contract.methodName({ args, gas?, amount?, callbackUrl?, meta? })` instead');
                            return this._changeMethod({
                                methodName,
                                args: args[0],
                                gas: args[1],
                                amount: args[2]
                            });
                        }
                        return this._changeMethod(Object.assign({ methodName }, args[0]));
                    }))
                });
            });
        }
        _changeMethod({ args, methodName, gas, amount, meta, callbackUrl }) {
            return __awaiter(this, void 0, void 0, function* () {
                validateBNLike({ gas, amount });
                const rawResult = yield this.account.functionCall({
                    contractId: this.contractId,
                    methodName,
                    args,
                    gas,
                    attachedDeposit: amount,
                    walletMeta: meta,
                    walletCallbackUrl: callbackUrl
                });
                return (0, providers_1.getTransactionLastResult)(rawResult);
            });
        }
    }
    exports.Contract = Contract;
    /**
     * Validation on arguments being a big number from bn.js
     * Throws if an argument is not in BN format or otherwise invalid
     * @param argMap
     */
    function validateBNLike(argMap) {
        const bnLike = 'number, decimal string or BN';
        for (const argName of Object.keys(argMap)) {
            const argValue = argMap[argName];
            if (argValue && !bn_js_1.default.isBN(argValue) && isNaN(argValue)) {
                throw new errors_1.ArgumentTypeError(argName, bnLike, argValue);
            }
        }
    }
    
    },{"./providers":62,"./utils/errors":69,"bn.js":3,"depd":14}],55:[function(require,module,exports){
    module.exports={
        "schema": {
            "BadUTF16": {
                "name": "BadUTF16",
                "subtypes": [],
                "props": {}
            },
            "BadUTF8": {
                "name": "BadUTF8",
                "subtypes": [],
                "props": {}
            },
            "BalanceExceeded": {
                "name": "BalanceExceeded",
                "subtypes": [],
                "props": {}
            },
            "BreakpointTrap": {
                "name": "BreakpointTrap",
                "subtypes": [],
                "props": {}
            },
            "CacheError": {
                "name": "CacheError",
                "subtypes": [
                    "ReadError",
                    "WriteError",
                    "DeserializationError",
                    "SerializationError"
                ],
                "props": {}
            },
            "CallIndirectOOB": {
                "name": "CallIndirectOOB",
                "subtypes": [],
                "props": {}
            },
            "CannotAppendActionToJointPromise": {
                "name": "CannotAppendActionToJointPromise",
                "subtypes": [],
                "props": {}
            },
            "CannotReturnJointPromise": {
                "name": "CannotReturnJointPromise",
                "subtypes": [],
                "props": {}
            },
            "CodeDoesNotExist": {
                "name": "CodeDoesNotExist",
                "subtypes": [],
                "props": {
                    "account_id": ""
                }
            },
            "CompilationError": {
                "name": "CompilationError",
                "subtypes": [
                    "CodeDoesNotExist",
                    "PrepareError",
                    "WasmerCompileError"
                ],
                "props": {}
            },
            "ContractSizeExceeded": {
                "name": "ContractSizeExceeded",
                "subtypes": [],
                "props": {
                    "limit": "",
                    "size": ""
                }
            },
            "Deprecated": {
                "name": "Deprecated",
                "subtypes": [],
                "props": {
                    "method_name": ""
                }
            },
            "Deserialization": {
                "name": "Deserialization",
                "subtypes": [],
                "props": {}
            },
            "DeserializationError": {
                "name": "DeserializationError",
                "subtypes": [],
                "props": {}
            },
            "EmptyMethodName": {
                "name": "EmptyMethodName",
                "subtypes": [],
                "props": {}
            },
            "FunctionCallError": {
                "name": "FunctionCallError",
                "subtypes": [
                    "CompilationError",
                    "LinkError",
                    "MethodResolveError",
                    "WasmTrap",
                    "WasmUnknownError",
                    "HostError",
                    "EvmError"
                ],
                "props": {}
            },
            "GasExceeded": {
                "name": "GasExceeded",
                "subtypes": [],
                "props": {}
            },
            "GasInstrumentation": {
                "name": "GasInstrumentation",
                "subtypes": [],
                "props": {}
            },
            "GasLimitExceeded": {
                "name": "GasLimitExceeded",
                "subtypes": [],
                "props": {}
            },
            "GenericTrap": {
                "name": "GenericTrap",
                "subtypes": [],
                "props": {}
            },
            "GuestPanic": {
                "name": "GuestPanic",
                "subtypes": [],
                "props": {
                    "panic_msg": ""
                }
            },
            "HostError": {
                "name": "HostError",
                "subtypes": [
                    "BadUTF16",
                    "BadUTF8",
                    "GasExceeded",
                    "GasLimitExceeded",
                    "BalanceExceeded",
                    "EmptyMethodName",
                    "GuestPanic",
                    "IntegerOverflow",
                    "InvalidPromiseIndex",
                    "CannotAppendActionToJointPromise",
                    "CannotReturnJointPromise",
                    "InvalidPromiseResultIndex",
                    "InvalidRegisterId",
                    "IteratorWasInvalidated",
                    "MemoryAccessViolation",
                    "InvalidReceiptIndex",
                    "InvalidIteratorIndex",
                    "InvalidAccountId",
                    "InvalidMethodName",
                    "InvalidPublicKey",
                    "ProhibitedInView",
                    "NumberOfLogsExceeded",
                    "KeyLengthExceeded",
                    "ValueLengthExceeded",
                    "TotalLogLengthExceeded",
                    "NumberPromisesExceeded",
                    "NumberInputDataDependenciesExceeded",
                    "ReturnedValueLengthExceeded",
                    "ContractSizeExceeded",
                    "Deprecated"
                ],
                "props": {}
            },
            "IllegalArithmetic": {
                "name": "IllegalArithmetic",
                "subtypes": [],
                "props": {}
            },
            "IncorrectCallIndirectSignature": {
                "name": "IncorrectCallIndirectSignature",
                "subtypes": [],
                "props": {}
            },
            "Instantiate": {
                "name": "Instantiate",
                "subtypes": [],
                "props": {}
            },
            "IntegerOverflow": {
                "name": "IntegerOverflow",
                "subtypes": [],
                "props": {}
            },
            "InternalMemoryDeclared": {
                "name": "InternalMemoryDeclared",
                "subtypes": [],
                "props": {}
            },
            "InvalidAccountId": {
                "name": "InvalidAccountId",
                "subtypes": [],
                "props": {
                    "account_id": ""
                }
            },
            "InvalidIteratorIndex": {
                "name": "InvalidIteratorIndex",
                "subtypes": [],
                "props": {
                    "iterator_index": ""
                }
            },
            "InvalidMethodName": {
                "name": "InvalidMethodName",
                "subtypes": [],
                "props": {}
            },
            "InvalidPromiseIndex": {
                "name": "InvalidPromiseIndex",
                "subtypes": [],
                "props": {
                    "promise_idx": ""
                }
            },
            "InvalidPromiseResultIndex": {
                "name": "InvalidPromiseResultIndex",
                "subtypes": [],
                "props": {
                    "result_idx": ""
                }
            },
            "InvalidPublicKey": {
                "name": "InvalidPublicKey",
                "subtypes": [],
                "props": {}
            },
            "InvalidReceiptIndex": {
                "name": "InvalidReceiptIndex",
                "subtypes": [],
                "props": {
                    "receipt_index": ""
                }
            },
            "InvalidRegisterId": {
                "name": "InvalidRegisterId",
                "subtypes": [],
                "props": {
                    "register_id": ""
                }
            },
            "IteratorWasInvalidated": {
                "name": "IteratorWasInvalidated",
                "subtypes": [],
                "props": {
                    "iterator_index": ""
                }
            },
            "KeyLengthExceeded": {
                "name": "KeyLengthExceeded",
                "subtypes": [],
                "props": {
                    "length": "",
                    "limit": ""
                }
            },
            "LinkError": {
                "name": "LinkError",
                "subtypes": [],
                "props": {
                    "msg": ""
                }
            },
            "Memory": {
                "name": "Memory",
                "subtypes": [],
                "props": {}
            },
            "MemoryAccessViolation": {
                "name": "MemoryAccessViolation",
                "subtypes": [],
                "props": {}
            },
            "MemoryOutOfBounds": {
                "name": "MemoryOutOfBounds",
                "subtypes": [],
                "props": {}
            },
            "MethodEmptyName": {
                "name": "MethodEmptyName",
                "subtypes": [],
                "props": {}
            },
            "MethodInvalidSignature": {
                "name": "MethodInvalidSignature",
                "subtypes": [],
                "props": {}
            },
            "MethodNotFound": {
                "name": "MethodNotFound",
                "subtypes": [],
                "props": {}
            },
            "MethodResolveError": {
                "name": "MethodResolveError",
                "subtypes": [
                    "MethodEmptyName",
                    "MethodUTF8Error",
                    "MethodNotFound",
                    "MethodInvalidSignature"
                ],
                "props": {}
            },
            "MethodUTF8Error": {
                "name": "MethodUTF8Error",
                "subtypes": [],
                "props": {}
            },
            "MisalignedAtomicAccess": {
                "name": "MisalignedAtomicAccess",
                "subtypes": [],
                "props": {}
            },
            "NumberInputDataDependenciesExceeded": {
                "name": "NumberInputDataDependenciesExceeded",
                "subtypes": [],
                "props": {
                    "limit": "",
                    "number_of_input_data_dependencies": ""
                }
            },
            "NumberOfLogsExceeded": {
                "name": "NumberOfLogsExceeded",
                "subtypes": [],
                "props": {
                    "limit": ""
                }
            },
            "NumberPromisesExceeded": {
                "name": "NumberPromisesExceeded",
                "subtypes": [],
                "props": {
                    "limit": "",
                    "number_of_promises": ""
                }
            },
            "PrepareError": {
                "name": "PrepareError",
                "subtypes": [
                    "Serialization",
                    "Deserialization",
                    "InternalMemoryDeclared",
                    "GasInstrumentation",
                    "StackHeightInstrumentation",
                    "Instantiate",
                    "Memory"
                ],
                "props": {}
            },
            "ProhibitedInView": {
                "name": "ProhibitedInView",
                "subtypes": [],
                "props": {
                    "method_name": ""
                }
            },
            "ReadError": {
                "name": "ReadError",
                "subtypes": [],
                "props": {}
            },
            "ReturnedValueLengthExceeded": {
                "name": "ReturnedValueLengthExceeded",
                "subtypes": [],
                "props": {
                    "length": "",
                    "limit": ""
                }
            },
            "Serialization": {
                "name": "Serialization",
                "subtypes": [],
                "props": {}
            },
            "SerializationError": {
                "name": "SerializationError",
                "subtypes": [],
                "props": {
                    "hash": ""
                }
            },
            "StackHeightInstrumentation": {
                "name": "StackHeightInstrumentation",
                "subtypes": [],
                "props": {}
            },
            "StackOverflow": {
                "name": "StackOverflow",
                "subtypes": [],
                "props": {}
            },
            "TotalLogLengthExceeded": {
                "name": "TotalLogLengthExceeded",
                "subtypes": [],
                "props": {
                    "length": "",
                    "limit": ""
                }
            },
            "Unreachable": {
                "name": "Unreachable",
                "subtypes": [],
                "props": {}
            },
            "ValueLengthExceeded": {
                "name": "ValueLengthExceeded",
                "subtypes": [],
                "props": {
                    "length": "",
                    "limit": ""
                }
            },
            "WasmTrap": {
                "name": "WasmTrap",
                "subtypes": [
                    "Unreachable",
                    "IncorrectCallIndirectSignature",
                    "MemoryOutOfBounds",
                    "CallIndirectOOB",
                    "IllegalArithmetic",
                    "MisalignedAtomicAccess",
                    "BreakpointTrap",
                    "StackOverflow",
                    "GenericTrap"
                ],
                "props": {}
            },
            "WasmUnknownError": {
                "name": "WasmUnknownError",
                "subtypes": [],
                "props": {}
            },
            "WasmerCompileError": {
                "name": "WasmerCompileError",
                "subtypes": [],
                "props": {
                    "msg": ""
                }
            },
            "WriteError": {
                "name": "WriteError",
                "subtypes": [],
                "props": {}
            },
            "AccessKeyNotFound": {
                "name": "AccessKeyNotFound",
                "subtypes": [],
                "props": {
                    "account_id": "",
                    "public_key": ""
                }
            },
            "AccountAlreadyExists": {
                "name": "AccountAlreadyExists",
                "subtypes": [],
                "props": {
                    "account_id": ""
                }
            },
            "AccountDoesNotExist": {
                "name": "AccountDoesNotExist",
                "subtypes": [],
                "props": {
                    "account_id": ""
                }
            },
            "ActionError": {
                "name": "ActionError",
                "subtypes": [
                    "AccountAlreadyExists",
                    "AccountDoesNotExist",
                    "CreateAccountOnlyByRegistrar",
                    "CreateAccountNotAllowed",
                    "ActorNoPermission",
                    "DeleteKeyDoesNotExist",
                    "AddKeyAlreadyExists",
                    "DeleteAccountStaking",
                    "LackBalanceForState",
                    "TriesToUnstake",
                    "TriesToStake",
                    "InsufficientStake",
                    "FunctionCallError",
                    "NewReceiptValidationError",
                    "OnlyImplicitAccountCreationAllowed"
                ],
                "props": {
                    "index": ""
                }
            },
            "ActionsValidationError": {
                "name": "ActionsValidationError",
                "subtypes": [
                    "DeleteActionMustBeFinal",
                    "TotalPrepaidGasExceeded",
                    "TotalNumberOfActionsExceeded",
                    "AddKeyMethodNamesNumberOfBytesExceeded",
                    "AddKeyMethodNameLengthExceeded",
                    "IntegerOverflow",
                    "InvalidAccountId",
                    "ContractSizeExceeded",
                    "FunctionCallMethodNameLengthExceeded",
                    "FunctionCallArgumentsLengthExceeded",
                    "UnsuitableStakingKey",
                    "FunctionCallZeroAttachedGas"
                ],
                "props": {}
            },
            "ActorNoPermission": {
                "name": "ActorNoPermission",
                "subtypes": [],
                "props": {
                    "account_id": "",
                    "actor_id": ""
                }
            },
            "AddKeyAlreadyExists": {
                "name": "AddKeyAlreadyExists",
                "subtypes": [],
                "props": {
                    "account_id": "",
                    "public_key": ""
                }
            },
            "AddKeyMethodNameLengthExceeded": {
                "name": "AddKeyMethodNameLengthExceeded",
                "subtypes": [],
                "props": {
                    "length": "",
                    "limit": ""
                }
            },
            "AddKeyMethodNamesNumberOfBytesExceeded": {
                "name": "AddKeyMethodNamesNumberOfBytesExceeded",
                "subtypes": [],
                "props": {
                    "limit": "",
                    "total_number_of_bytes": ""
                }
            },
            "BalanceMismatchError": {
                "name": "BalanceMismatchError",
                "subtypes": [],
                "props": {
                    "final_accounts_balance": "",
                    "final_postponed_receipts_balance": "",
                    "incoming_receipts_balance": "",
                    "incoming_validator_rewards": "",
                    "initial_accounts_balance": "",
                    "initial_postponed_receipts_balance": "",
                    "new_delayed_receipts_balance": "",
                    "other_burnt_amount": "",
                    "outgoing_receipts_balance": "",
                    "processed_delayed_receipts_balance": "",
                    "slashed_burnt_amount": "",
                    "tx_burnt_amount": ""
                }
            },
            "CostOverflow": {
                "name": "CostOverflow",
                "subtypes": [],
                "props": {}
            },
            "CreateAccountNotAllowed": {
                "name": "CreateAccountNotAllowed",
                "subtypes": [],
                "props": {
                    "account_id": "",
                    "predecessor_id": ""
                }
            },
            "CreateAccountOnlyByRegistrar": {
                "name": "CreateAccountOnlyByRegistrar",
                "subtypes": [],
                "props": {
                    "account_id": "",
                    "predecessor_id": "",
                    "registrar_account_id": ""
                }
            },
            "DeleteAccountStaking": {
                "name": "DeleteAccountStaking",
                "subtypes": [],
                "props": {
                    "account_id": ""
                }
            },
            "DeleteActionMustBeFinal": {
                "name": "DeleteActionMustBeFinal",
                "subtypes": [],
                "props": {}
            },
            "DeleteKeyDoesNotExist": {
                "name": "DeleteKeyDoesNotExist",
                "subtypes": [],
                "props": {
                    "account_id": "",
                    "public_key": ""
                }
            },
            "DepositWithFunctionCall": {
                "name": "DepositWithFunctionCall",
                "subtypes": [],
                "props": {}
            },
            "Expired": {
                "name": "Expired",
                "subtypes": [],
                "props": {}
            },
            "FunctionCallArgumentsLengthExceeded": {
                "name": "FunctionCallArgumentsLengthExceeded",
                "subtypes": [],
                "props": {
                    "length": "",
                    "limit": ""
                }
            },
            "FunctionCallMethodNameLengthExceeded": {
                "name": "FunctionCallMethodNameLengthExceeded",
                "subtypes": [],
                "props": {
                    "length": "",
                    "limit": ""
                }
            },
            "FunctionCallZeroAttachedGas": {
                "name": "FunctionCallZeroAttachedGas",
                "subtypes": [],
                "props": {}
            },
            "InsufficientStake": {
                "name": "InsufficientStake",
                "subtypes": [],
                "props": {
                    "account_id": "",
                    "minimum_stake": "",
                    "stake": ""
                }
            },
            "InvalidAccessKeyError": {
                "name": "InvalidAccessKeyError",
                "subtypes": [
                    "AccessKeyNotFound",
                    "ReceiverMismatch",
                    "MethodNameMismatch",
                    "RequiresFullAccess",
                    "NotEnoughAllowance",
                    "DepositWithFunctionCall"
                ],
                "props": {}
            },
            "InvalidChain": {
                "name": "InvalidChain",
                "subtypes": [],
                "props": {}
            },
            "InvalidDataReceiverId": {
                "name": "InvalidDataReceiverId",
                "subtypes": [],
                "props": {
                    "account_id": ""
                }
            },
            "InvalidNonce": {
                "name": "InvalidNonce",
                "subtypes": [],
                "props": {
                    "ak_nonce": "",
                    "tx_nonce": ""
                }
            },
            "InvalidPredecessorId": {
                "name": "InvalidPredecessorId",
                "subtypes": [],
                "props": {
                    "account_id": ""
                }
            },
            "InvalidReceiverId": {
                "name": "InvalidReceiverId",
                "subtypes": [],
                "props": {
                    "account_id": ""
                }
            },
            "InvalidSignature": {
                "name": "InvalidSignature",
                "subtypes": [],
                "props": {}
            },
            "InvalidSignerId": {
                "name": "InvalidSignerId",
                "subtypes": [],
                "props": {
                    "account_id": ""
                }
            },
            "InvalidTxError": {
                "name": "InvalidTxError",
                "subtypes": [
                    "InvalidAccessKeyError",
                    "InvalidSignerId",
                    "SignerDoesNotExist",
                    "InvalidNonce",
                    "InvalidReceiverId",
                    "InvalidSignature",
                    "NotEnoughBalance",
                    "LackBalanceForState",
                    "CostOverflow",
                    "InvalidChain",
                    "Expired",
                    "ActionsValidation"
                ],
                "props": {}
            },
            "LackBalanceForState": {
                "name": "LackBalanceForState",
                "subtypes": [],
                "props": {
                    "account_id": "",
                    "amount": ""
                }
            },
            "MethodNameMismatch": {
                "name": "MethodNameMismatch",
                "subtypes": [],
                "props": {
                    "method_name": ""
                }
            },
            "NotEnoughAllowance": {
                "name": "NotEnoughAllowance",
                "subtypes": [],
                "props": {
                    "account_id": "",
                    "allowance": "",
                    "cost": "",
                    "public_key": ""
                }
            },
            "NotEnoughBalance": {
                "name": "NotEnoughBalance",
                "subtypes": [],
                "props": {
                    "balance": "",
                    "cost": "",
                    "signer_id": ""
                }
            },
            "OnlyImplicitAccountCreationAllowed": {
                "name": "OnlyImplicitAccountCreationAllowed",
                "subtypes": [],
                "props": {
                    "account_id": ""
                }
            },
            "ReceiptValidationError": {
                "name": "ReceiptValidationError",
                "subtypes": [
                    "InvalidPredecessorId",
                    "InvalidReceiverId",
                    "InvalidSignerId",
                    "InvalidDataReceiverId",
                    "ReturnedValueLengthExceeded",
                    "NumberInputDataDependenciesExceeded",
                    "ActionsValidation"
                ],
                "props": {}
            },
            "ReceiverMismatch": {
                "name": "ReceiverMismatch",
                "subtypes": [],
                "props": {
                    "ak_receiver": "",
                    "tx_receiver": ""
                }
            },
            "RequiresFullAccess": {
                "name": "RequiresFullAccess",
                "subtypes": [],
                "props": {}
            },
            "SignerDoesNotExist": {
                "name": "SignerDoesNotExist",
                "subtypes": [],
                "props": {
                    "signer_id": ""
                }
            },
            "TotalNumberOfActionsExceeded": {
                "name": "TotalNumberOfActionsExceeded",
                "subtypes": [],
                "props": {
                    "limit": "",
                    "total_number_of_actions": ""
                }
            },
            "TotalPrepaidGasExceeded": {
                "name": "TotalPrepaidGasExceeded",
                "subtypes": [],
                "props": {
                    "limit": "",
                    "total_prepaid_gas": ""
                }
            },
            "TriesToStake": {
                "name": "TriesToStake",
                "subtypes": [],
                "props": {
                    "account_id": "",
                    "balance": "",
                    "locked": "",
                    "stake": ""
                }
            },
            "TriesToUnstake": {
                "name": "TriesToUnstake",
                "subtypes": [],
                "props": {
                    "account_id": ""
                }
            },
            "TxExecutionError": {
                "name": "TxExecutionError",
                "subtypes": [
                    "ActionError",
                    "InvalidTxError"
                ],
                "props": {}
            },
            "UnsuitableStakingKey": {
                "name": "UnsuitableStakingKey",
                "subtypes": [],
                "props": {
                    "public_key": ""
                }
            },
            "Closed": {
                "name": "Closed",
                "subtypes": [],
                "props": {}
            },
            "InternalError": {
                "name": "InternalError",
                "subtypes": [],
                "props": {}
            },
            "ServerError": {
                "name": "ServerError",
                "subtypes": [
                    "TxExecutionError",
                    "Timeout",
                    "Closed",
                    "InternalError"
                ],
                "props": {}
            },
            "Timeout": {
                "name": "Timeout",
                "subtypes": [],
                "props": {}
            }
        }
    }
    
    },{}],56:[function(require,module,exports){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MergeKeyStore = exports.BrowserLocalStorageKeyStore = exports.InMemoryKeyStore = exports.KeyStore = void 0;
    /** @hidden @module */
    const keystore_1 = require("./keystore");
    Object.defineProperty(exports, "KeyStore", { enumerable: true, get: function () { return keystore_1.KeyStore; } });
    const in_memory_key_store_1 = require("./in_memory_key_store");
    Object.defineProperty(exports, "InMemoryKeyStore", { enumerable: true, get: function () { return in_memory_key_store_1.InMemoryKeyStore; } });
    const browser_local_storage_key_store_1 = require("./browser_local_storage_key_store");
    Object.defineProperty(exports, "BrowserLocalStorageKeyStore", { enumerable: true, get: function () { return browser_local_storage_key_store_1.BrowserLocalStorageKeyStore; } });
    const merge_key_store_1 = require("./merge_key_store");
    Object.defineProperty(exports, "MergeKeyStore", { enumerable: true, get: function () { return merge_key_store_1.MergeKeyStore; } });
    
    },{"./browser_local_storage_key_store":57,"./in_memory_key_store":58,"./keystore":59,"./merge_key_store":60}],57:[function(require,module,exports){
    "use strict";
    var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BrowserLocalStorageKeyStore = void 0;
    const keystore_1 = require("./keystore");
    const key_pair_1 = require("../utils/key_pair");
    const LOCAL_STORAGE_KEY_PREFIX = 'near-api-js:keystore:';
    /**
     * This class is used to store keys in the browsers local storage.
     *
     * @see [https://docs.near.org/docs/develop/front-end/naj-quick-reference#key-store](https://docs.near.org/docs/develop/front-end/naj-quick-reference#key-store)
     * @example
     * ```js
     * import { connect, keyStores } from 'near-api-js';
     *
     * const keyStore = new keyStores.BrowserLocalStorageKeyStore();
     * const config = {
     *   keyStore, // instance of BrowserLocalStorageKeyStore
     *   networkId: 'testnet',
     *   nodeUrl: 'https://rpc.testnet.near.org',
     *   walletUrl: 'https://wallet.testnet.near.org',
     *   helperUrl: 'https://helper.testnet.near.org',
     *   explorerUrl: 'https://explorer.testnet.near.org'
     * };
     *
     * // inside an async function
     * const near = await connect(config)
     * ```
     */
    class BrowserLocalStorageKeyStore extends keystore_1.KeyStore {
        /**
         * @param localStorage defaults to window.localStorage
         * @param prefix defaults to `near-api-js:keystore:`
         */
        constructor(localStorage = window.localStorage, prefix = LOCAL_STORAGE_KEY_PREFIX) {
            super();
            this.localStorage = localStorage;
            this.prefix = prefix;
        }
        /**
         * Stores a {@link utils/key_pair!KeyPair} in local storage.
         * @param networkId The targeted network. (ex. default, betanet, etc…)
         * @param accountId The NEAR account tied to the key pair
         * @param keyPair The key pair to store in local storage
         */
        setKey(networkId, accountId, keyPair) {
            return __awaiter(this, void 0, void 0, function* () {
                this.localStorage.setItem(this.storageKeyForSecretKey(networkId, accountId), keyPair.toString());
            });
        }
        /**
         * Gets a {@link utils/key_pair!KeyPair} from local storage
         * @param networkId The targeted network. (ex. default, betanet, etc…)
         * @param accountId The NEAR account tied to the key pair
         * @returns {Promise<KeyPair>}
         */
        getKey(networkId, accountId) {
            return __awaiter(this, void 0, void 0, function* () {
                const value = this.localStorage.getItem(this.storageKeyForSecretKey(networkId, accountId));
                if (!value) {
                    return null;
                }
                return key_pair_1.KeyPair.fromString(value);
            });
        }
        /**
         * Removes a {@link utils/key_pair!KeyPair} from local storage
         * @param networkId The targeted network. (ex. default, betanet, etc…)
         * @param accountId The NEAR account tied to the key pair
         */
        removeKey(networkId, accountId) {
            return __awaiter(this, void 0, void 0, function* () {
                this.localStorage.removeItem(this.storageKeyForSecretKey(networkId, accountId));
            });
        }
        /**
         * Removes all items that start with `prefix` from local storage
         */
        clear() {
            return __awaiter(this, void 0, void 0, function* () {
                for (const key of this.storageKeys()) {
                    if (key.startsWith(this.prefix)) {
                        this.localStorage.removeItem(key);
                    }
                }
            });
        }
        /**
         * Get the network(s) from local storage
         * @returns {Promise<string[]>}
         */
        getNetworks() {
            return __awaiter(this, void 0, void 0, function* () {
                const result = new Set();
                for (const key of this.storageKeys()) {
                    if (key.startsWith(this.prefix)) {
                        const parts = key.substring(this.prefix.length).split(':');
                        result.add(parts[1]);
                    }
                }
                return Array.from(result.values());
            });
        }
        /**
         * Gets the account(s) from local storage
         * @param networkId The targeted network. (ex. default, betanet, etc…)
         */
        getAccounts(networkId) {
            return __awaiter(this, void 0, void 0, function* () {
                const result = new Array();
                for (const key of this.storageKeys()) {
                    if (key.startsWith(this.prefix)) {
                        const parts = key.substring(this.prefix.length).split(':');
                        if (parts[1] === networkId) {
                            result.push(parts[0]);
                        }
                    }
                }
                return result;
            });
        }
        /**
         * @hidden
         * Helper function to retrieve a local storage key
         * @param networkId The targeted network. (ex. default, betanet, etc…)
         * @param accountId The NEAR account tied to the storage keythat's sought
         * @returns {string} An example might be: `near-api-js:keystore:near-friend:default`
         */
        storageKeyForSecretKey(networkId, accountId) {
            return `${this.prefix}${accountId}:${networkId}`;
        }
        /** @hidden */
        *storageKeys() {
            for (let i = 0; i < this.localStorage.length; i++) {
                yield this.localStorage.key(i);
            }
        }
    }
    exports.BrowserLocalStorageKeyStore = BrowserLocalStorageKeyStore;
    
    },{"../utils/key_pair":73,"./keystore":59}],58:[function(require,module,exports){
    "use strict";
    var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.InMemoryKeyStore = void 0;
    const keystore_1 = require("./keystore");
    const key_pair_1 = require("../utils/key_pair");
    /**
     * Simple in-memory keystore for mainly for testing purposes.
     *
     * @see [https://docs.near.org/docs/develop/front-end/naj-quick-reference#key-store](https://docs.near.org/docs/develop/front-end/naj-quick-reference#key-store)
     * @example
     * ```js
     * import { connect, keyStores, utils } from 'near-api-js';
     *
     * const privateKey = '.......';
     * const keyPair = utils.KeyPair.fromString(privateKey);
     *
     * const keyStore = new keyStores.InMemoryKeyStore();
     * keyStore.setKey('testnet', 'example-account.testnet', keyPair);
     *
     * const config = {
     *   keyStore, // instance of InMemoryKeyStore
     *   networkId: 'testnet',
     *   nodeUrl: 'https://rpc.testnet.near.org',
     *   walletUrl: 'https://wallet.testnet.near.org',
     *   helperUrl: 'https://helper.testnet.near.org',
     *   explorerUrl: 'https://explorer.testnet.near.org'
     * };
     *
     * // inside an async function
     * const near = await connect(config)
     * ```
     */
    class InMemoryKeyStore extends keystore_1.KeyStore {
        constructor() {
            super();
            this.keys = {};
        }
        /**
         * Stores a {@link utils/key_pair!KeyPair} in in-memory storage item
         * @param networkId The targeted network. (ex. default, betanet, etc…)
         * @param accountId The NEAR account tied to the key pair
         * @param keyPair The key pair to store in local storage
         */
        setKey(networkId, accountId, keyPair) {
            return __awaiter(this, void 0, void 0, function* () {
                this.keys[`${accountId}:${networkId}`] = keyPair.toString();
            });
        }
        /**
         * Gets a {@link utils/key_pair!KeyPair} from in-memory storage
         * @param networkId The targeted network. (ex. default, betanet, etc…)
         * @param accountId The NEAR account tied to the key pair
         * @returns {Promise<KeyPair>}
         */
        getKey(networkId, accountId) {
            return __awaiter(this, void 0, void 0, function* () {
                const value = this.keys[`${accountId}:${networkId}`];
                if (!value) {
                    return null;
                }
                return key_pair_1.KeyPair.fromString(value);
            });
        }
        /**
         * Removes a {@link utils/key_pair!KeyPair} from in-memory storage
         * @param networkId The targeted network. (ex. default, betanet, etc…)
         * @param accountId The NEAR account tied to the key pair
         */
        removeKey(networkId, accountId) {
            return __awaiter(this, void 0, void 0, function* () {
                delete this.keys[`${accountId}:${networkId}`];
            });
        }
        /**
         * Removes all {@link utils/key_pair!KeyPair} from in-memory storage
         */
        clear() {
            return __awaiter(this, void 0, void 0, function* () {
                this.keys = {};
            });
        }
        /**
         * Get the network(s) from in-memory storage
         * @returns {Promise<string[]>}
         */
        getNetworks() {
            return __awaiter(this, void 0, void 0, function* () {
                const result = new Set();
                Object.keys(this.keys).forEach((key) => {
                    const parts = key.split(':');
                    result.add(parts[1]);
                });
                return Array.from(result.values());
            });
        }
        /**
         * Gets the account(s) from in-memory storage
         * @param networkId The targeted network. (ex. default, betanet, etc…)
         */
        getAccounts(networkId) {
            return __awaiter(this, void 0, void 0, function* () {
                const result = new Array();
                Object.keys(this.keys).forEach((key) => {
                    const parts = key.split(':');
                    if (parts[parts.length - 1] === networkId) {
                        result.push(parts.slice(0, parts.length - 1).join(':'));
                    }
                });
                return result;
            });
        }
        /** @hidden */
        toString() {
            return 'InMemoryKeyStore';
        }
    }
    exports.InMemoryKeyStore = InMemoryKeyStore;
    
    },{"../utils/key_pair":73,"./keystore":59}],59:[function(require,module,exports){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.KeyStore = void 0;
    /**
     * KeyStores are passed to {@link near!Near} via {@link near!NearConfig}
     * and are used by the {@link signer!InMemorySigner} to sign transactions.
     *
     * @see {@link connect}
     */
    class KeyStore {
    }
    exports.KeyStore = KeyStore;
    
    },{}],60:[function(require,module,exports){
    "use strict";
    var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MergeKeyStore = void 0;
    const keystore_1 = require("./keystore");
    class MergeKeyStore extends keystore_1.KeyStore {
        /**
         * @param keyStores read calls are attempted from start to end of array
         * @param options.writeKeyStoreIndex the keystore index that will receive all write calls
         */
        constructor(keyStores, options = { writeKeyStoreIndex: 0 }) {
            super();
            this.options = options;
            this.keyStores = keyStores;
        }
        /**
         * Store a {@link utils/key_pair!KeyPair} to the first index of a key store array
         * @param networkId The targeted network. (ex. default, betanet, etc…)
         * @param accountId The NEAR account tied to the key pair
         * @param keyPair The key pair to store in local storage
         */
        setKey(networkId, accountId, keyPair) {
            return __awaiter(this, void 0, void 0, function* () {
                yield this.keyStores[this.options.writeKeyStoreIndex].setKey(networkId, accountId, keyPair);
            });
        }
        /**
         * Gets a {@link utils/key_pair!KeyPair} from the array of key stores
         * @param networkId The targeted network. (ex. default, betanet, etc…)
         * @param accountId The NEAR account tied to the key pair
         * @returns {Promise<KeyPair>}
         */
        getKey(networkId, accountId) {
            return __awaiter(this, void 0, void 0, function* () {
                for (const keyStore of this.keyStores) {
                    const keyPair = yield keyStore.getKey(networkId, accountId);
                    if (keyPair) {
                        return keyPair;
                    }
                }
                return null;
            });
        }
        /**
         * Removes a {@link utils/key_pair!KeyPair} from the array of key stores
         * @param networkId The targeted network. (ex. default, betanet, etc…)
         * @param accountId The NEAR account tied to the key pair
         */
        removeKey(networkId, accountId) {
            return __awaiter(this, void 0, void 0, function* () {
                for (const keyStore of this.keyStores) {
                    yield keyStore.removeKey(networkId, accountId);
                }
            });
        }
        /**
         * Removes all items from each key store
         */
        clear() {
            return __awaiter(this, void 0, void 0, function* () {
                for (const keyStore of this.keyStores) {
                    yield keyStore.clear();
                }
            });
        }
        /**
         * Get the network(s) from the array of key stores
         * @returns {Promise<string[]>}
         */
        getNetworks() {
            return __awaiter(this, void 0, void 0, function* () {
                const result = new Set();
                for (const keyStore of this.keyStores) {
                    for (const network of yield keyStore.getNetworks()) {
                        result.add(network);
                    }
                }
                return Array.from(result);
            });
        }
        /**
         * Gets the account(s) from the array of key stores
         * @param networkId The targeted network. (ex. default, betanet, etc…)
         */
        getAccounts(networkId) {
            return __awaiter(this, void 0, void 0, function* () {
                const result = new Set();
                for (const keyStore of this.keyStores) {
                    for (const account of yield keyStore.getAccounts(networkId)) {
                        result.add(account);
                    }
                }
                return Array.from(result);
            });
        }
        /** @hidden */
        toString() {
            return `MergeKeyStore(${this.keyStores.join(', ')})`;
        }
    }
    exports.MergeKeyStore = MergeKeyStore;
    
    },{"./keystore":59}],61:[function(require,module,exports){
    "use strict";
    var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __importDefault = (this && this.__importDefault) || function (mod) {
        return (mod && mod.__esModule) ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Near = void 0;
    /**
     * This module contains the main class developers will use to interact with NEAR.
     * The {@link Near} class is used to interact with {@link account!Account | Accounts} through the {@link providers/json-rpc-provider!JsonRpcProvider}.
     * It is configured via the {@link NearConfig}.
     *
     * @see [https://docs.near.org/tools/near-api-js/quick-reference#account](https://docs.near.org/tools/near-api-js/quick-reference#account)
     *
     * @module near
     */
    const bn_js_1 = __importDefault(require("bn.js"));
    const account_1 = require("./account");
    const connection_1 = require("./connection");
    const account_creator_1 = require("./account_creator");
    /**
     * This is the main class developers should use to interact with NEAR.
     * @example
     * ```js
     * const near = new Near(config);
     * ```
     */
    class Near {
        constructor(config) {
            this.config = config;
            this.connection = connection_1.Connection.fromConfig({
                networkId: config.networkId,
                provider: { type: 'JsonRpcProvider', args: { url: config.nodeUrl, headers: config.headers } },
                signer: config.signer || { type: 'InMemorySigner', keyStore: config.keyStore },
                jsvmAccountId: config.jsvmAccountId || `jsvm.${config.networkId}`
            });
            if (config.masterAccount) {
                // TODO: figure out better way of specifiying initial balance.
                // Hardcoded number below must be enough to pay the gas cost to dev-deploy with near-shell for multiple times
                const initialBalance = config.initialBalance ? new bn_js_1.default(config.initialBalance) : new bn_js_1.default('500000000000000000000000000');
                this.accountCreator = new account_creator_1.LocalAccountCreator(new account_1.Account(this.connection, config.masterAccount), initialBalance);
            }
            else if (config.helperUrl) {
                this.accountCreator = new account_creator_1.UrlAccountCreator(this.connection, config.helperUrl);
            }
            else {
                this.accountCreator = null;
            }
        }
        /**
         * @param accountId near accountId used to interact with the network.
         */
        account(accountId) {
            return __awaiter(this, void 0, void 0, function* () {
                const account = new account_1.Account(this.connection, accountId);
                return account;
            });
        }
        /**
         * Create an account using the {@link account_creator!AccountCreator}. Either:
         * * using a masterAccount with {@link account_creator!LocalAccountCreator}
         * * using the helperUrl with {@link account_creator!UrlAccountCreator}
         * @see {@link NearConfig.masterAccount} and {@link NearConfig.helperUrl}
         *
         * @param accountId
         * @param publicKey
         */
        createAccount(accountId, publicKey) {
            return __awaiter(this, void 0, void 0, function* () {
                if (!this.accountCreator) {
                    throw new Error('Must specify account creator, either via masterAccount or helperUrl configuration settings.');
                }
                yield this.accountCreator.createAccount(accountId, publicKey);
                return new account_1.Account(this.connection, accountId);
            });
        }
    }
    exports.Near = Near;
    
    },{"./account":46,"./account_creator":47,"./connection":52,"bn.js":3}],62:[function(require,module,exports){
    "use strict";
    /** @hidden @module */
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ErrorContext = exports.TypedError = exports.getTransactionLastResult = exports.FinalExecutionStatusBasic = exports.JsonRpcProvider = exports.Provider = void 0;
    const provider_1 = require("./provider");
    Object.defineProperty(exports, "Provider", { enumerable: true, get: function () { return provider_1.Provider; } });
    Object.defineProperty(exports, "getTransactionLastResult", { enumerable: true, get: function () { return provider_1.getTransactionLastResult; } });
    Object.defineProperty(exports, "FinalExecutionStatusBasic", { enumerable: true, get: function () { return provider_1.FinalExecutionStatusBasic; } });
    const json_rpc_provider_1 = require("./json-rpc-provider");
    Object.defineProperty(exports, "JsonRpcProvider", { enumerable: true, get: function () { return json_rpc_provider_1.JsonRpcProvider; } });
    Object.defineProperty(exports, "TypedError", { enumerable: true, get: function () { return json_rpc_provider_1.TypedError; } });
    Object.defineProperty(exports, "ErrorContext", { enumerable: true, get: function () { return json_rpc_provider_1.ErrorContext; } });
    
    },{"./json-rpc-provider":63,"./provider":64}],63:[function(require,module,exports){
    (function (process,Buffer){(function (){
    "use strict";
    var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __rest = (this && this.__rest) || function (s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    };
    var __importDefault = (this && this.__importDefault) || function (mod) {
        return (mod && mod.__esModule) ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.JsonRpcProvider = exports.ErrorContext = exports.TypedError = void 0;
    /**
     * @module
     * @description
     * This module contains the {@link JsonRpcProvider} client class
     * which can be used to interact with the [NEAR RPC API](https://docs.near.org/api/rpc/introduction).
     * @see {@link providers/provider | providers} for a list of request and response types
     */
    const provider_1 = require("./provider");
    const web_1 = require("../utils/web");
    const errors_1 = require("../utils/errors");
    Object.defineProperty(exports, "TypedError", { enumerable: true, get: function () { return errors_1.TypedError; } });
    Object.defineProperty(exports, "ErrorContext", { enumerable: true, get: function () { return errors_1.ErrorContext; } });
    const borsh_1 = require("borsh");
    const exponential_backoff_1 = __importDefault(require("../utils/exponential-backoff"));
    const rpc_errors_1 = require("../utils/rpc_errors");
    // Default number of retries before giving up on a request.
    const REQUEST_RETRY_NUMBER = 12;
    // Default wait until next retry in millis.
    const REQUEST_RETRY_WAIT = 500;
    // Exponential back off for waiting to retry.
    const REQUEST_RETRY_WAIT_BACKOFF = 1.5;
    /// Keep ids unique across all connections.
    let _nextId = 123;
    /**
     * Client class to interact with the [NEAR RPC API](https://docs.near.org/api/rpc/introduction).
     * @see [https://github.com/near/nearcore/tree/master/chain/jsonrpc](https://github.com/near/nearcore/tree/master/chain/jsonrpc)
     */
    class JsonRpcProvider extends provider_1.Provider {
        /**
         * @param connectionInfo Connection info
         */
        constructor(connectionInfo) {
            super();
            this.connection = connectionInfo || { url: '' };
        }
        /**
         * Gets the RPC's status
         * @see [https://docs.near.org/docs/develop/front-end/rpc#general-validator-status](https://docs.near.org/docs/develop/front-end/rpc#general-validator-status)
         */
        status() {
            return __awaiter(this, void 0, void 0, function* () {
                return this.sendJsonRpc('status', []);
            });
        }
        /**
         * Sends a signed transaction to the RPC and waits until transaction is fully complete
         * @see [https://docs.near.org/docs/develop/front-end/rpc#send-transaction-await](https://docs.near.org/docs/develop/front-end/rpc#general-validator-status)
         *
         * @param signedTransaction The signed transaction being sent
         */
        sendTransaction(signedTransaction) {
            return __awaiter(this, void 0, void 0, function* () {
                const bytes = signedTransaction.encode();
                return this.sendJsonRpc('broadcast_tx_commit', [Buffer.from(bytes).toString('base64')]);
            });
        }
        /**
         * Sends a signed transaction to the RPC and immediately returns transaction hash
         * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#send-transaction-async)
         * @param signedTransaction The signed transaction being sent
         * @returns {Promise<FinalExecutionOutcome>}
         */
        sendTransactionAsync(signedTransaction) {
            return __awaiter(this, void 0, void 0, function* () {
                const bytes = signedTransaction.encode();
                return this.sendJsonRpc('broadcast_tx_async', [Buffer.from(bytes).toString('base64')]);
            });
        }
        /**
         * Gets a transaction's status from the RPC
         * @see [https://docs.near.org/docs/develop/front-end/rpc#transaction-status](https://docs.near.org/docs/develop/front-end/rpc#general-validator-status)
         *
         * @param txHash A transaction hash as either a Uint8Array or a base58 encoded string
         * @param accountId The NEAR account that signed the transaction
         */
        txStatus(txHash, accountId) {
            return __awaiter(this, void 0, void 0, function* () {
                if (typeof txHash === 'string') {
                    return this.txStatusString(txHash, accountId);
                }
                else {
                    return this.txStatusUint8Array(txHash, accountId);
                }
            });
        }
        txStatusUint8Array(txHash, accountId) {
            return __awaiter(this, void 0, void 0, function* () {
                return this.sendJsonRpc('tx', [(0, borsh_1.baseEncode)(txHash), accountId]);
            });
        }
        txStatusString(txHash, accountId) {
            return __awaiter(this, void 0, void 0, function* () {
                return this.sendJsonRpc('tx', [txHash, accountId]);
            });
        }
        /**
         * Gets a transaction's status from the RPC with receipts
         * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#transaction-status-with-receipts)
         * @param txHash The hash of the transaction
         * @param accountId The NEAR account that signed the transaction
         * @returns {Promise<FinalExecutionOutcome>}
         */
        txStatusReceipts(txHash, accountId) {
            return __awaiter(this, void 0, void 0, function* () {
                if (typeof txHash === 'string') {
                    return this.sendJsonRpc('EXPERIMENTAL_tx_status', [txHash, accountId]);
                }
                else {
                    return this.sendJsonRpc('EXPERIMENTAL_tx_status', [(0, borsh_1.baseEncode)(txHash), accountId]);
                }
            });
        }
        /**
         * Query the RPC by passing an {@link providers/provider!RpcQueryRequest}
         * @see [https://docs.near.org/api/rpc/contracts](https://docs.near.org/api/rpc/contracts)
         *
         * @typeParam T the shape of the returned query response
         */
        query(...args) {
            return __awaiter(this, void 0, void 0, function* () {
                let result;
                if (args.length === 1) {
                    const _a = args[0], { block_id, blockId } = _a, otherParams = __rest(_a, ["block_id", "blockId"]);
                    result = yield this.sendJsonRpc('query', Object.assign(Object.assign({}, otherParams), { block_id: block_id || blockId }));
                }
                else {
                    const [path, data] = args;
                    result = yield this.sendJsonRpc('query', [path, data]);
                }
                if (result && result.error) {
                    throw new errors_1.TypedError(`Querying failed: ${result.error}.\n${JSON.stringify(result, null, 2)}`, result.error.name);
                }
                return result;
            });
        }
        /**
         * Query for block info from the RPC
         * pass block_id OR finality as blockQuery, not both
         * @see [https://docs.near.org/api/rpc/block-chunk](https://docs.near.org/api/rpc/block-chunk)
         *
         * @param blockQuery {@link providers/provider!BlockReference} (passing a {@link providers/provider!BlockId} is deprecated)
         */
        block(blockQuery) {
            return __awaiter(this, void 0, void 0, function* () {
                const { finality } = blockQuery;
                const { blockId } = blockQuery;
                return this.sendJsonRpc('block', { block_id: blockId, finality });
            });
        }
        /**
         * Query changes in block from the RPC
         * pass block_id OR finality as blockQuery, not both
         * @see [https://docs.near.org/api/rpc/block-chunk](https://docs.near.org/api/rpc/block-chunk)
         */
        blockChanges(blockQuery) {
            return __awaiter(this, void 0, void 0, function* () {
                const { finality } = blockQuery;
                const { blockId } = blockQuery;
                return this.sendJsonRpc('EXPERIMENTAL_changes_in_block', { block_id: blockId, finality });
            });
        }
        /**
         * Queries for details about a specific chunk appending details of receipts and transactions to the same chunk data provided by a block
         * @see [https://docs.near.org/api/rpc/block-chunk](https://docs.near.org/api/rpc/block-chunk)
         *
         * @param chunkId Hash of a chunk ID or shard ID
         */
        chunk(chunkId) {
            return __awaiter(this, void 0, void 0, function* () {
                return this.sendJsonRpc('chunk', [chunkId]);
            });
        }
        /**
         * Query validators of the epoch defined by the given block id.
         * @see [https://docs.near.org/api/rpc/network#validation-status](https://docs.near.org/api/rpc/network#validation-status)
         *
         * @param blockId Block hash or height, or null for latest.
         */
        validators(blockId) {
            return __awaiter(this, void 0, void 0, function* () {
                return this.sendJsonRpc('validators', [blockId]);
            });
        }
        /**
         * Gets the protocol config at a block from RPC
         *
         * @param blockReference specifies the block to get the protocol config for
         */
        experimental_protocolConfig(blockReference) {
            return __awaiter(this, void 0, void 0, function* () {
                const _a = blockReference, { blockId } = _a, otherParams = __rest(_a, ["blockId"]);
                return yield this.sendJsonRpc('EXPERIMENTAL_protocol_config', Object.assign(Object.assign({}, otherParams), { block_id: blockId }));
            });
        }
        /**
         * Gets a light client execution proof for verifying execution outcomes
         * @see [https://github.com/nearprotocol/NEPs/blob/master/specs/ChainSpec/LightClient.md#light-client-proof](https://github.com/nearprotocol/NEPs/blob/master/specs/ChainSpec/LightClient.md#light-client-proof)
         */
        lightClientProof(request) {
            return __awaiter(this, void 0, void 0, function* () {
                return yield this.sendJsonRpc('EXPERIMENTAL_light_client_proof', request);
            });
        }
        /**
         * Gets access key changes for a given array of accountIds
         * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-access-key-changes-all)
         * @returns {Promise<ChangeResult>}
         */
        accessKeyChanges(accountIdArray, blockQuery) {
            return __awaiter(this, void 0, void 0, function* () {
                const { finality } = blockQuery;
                const { blockId } = blockQuery;
                return this.sendJsonRpc('EXPERIMENTAL_changes', {
                    changes_type: 'all_access_key_changes',
                    account_ids: accountIdArray,
                    block_id: blockId,
                    finality
                });
            });
        }
        /**
         * Gets single access key changes for a given array of access keys
         * pass block_id OR finality as blockQuery, not both
         * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-access-key-changes-single)
         * @returns {Promise<ChangeResult>}
         */
        singleAccessKeyChanges(accessKeyArray, blockQuery) {
            return __awaiter(this, void 0, void 0, function* () {
                const { finality } = blockQuery;
                const { blockId } = blockQuery;
                return this.sendJsonRpc('EXPERIMENTAL_changes', {
                    changes_type: 'single_access_key_changes',
                    keys: accessKeyArray,
                    block_id: blockId,
                    finality
                });
            });
        }
        /**
         * Gets account changes for a given array of accountIds
         * pass block_id OR finality as blockQuery, not both
         * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-account-changes)
         * @returns {Promise<ChangeResult>}
         */
        accountChanges(accountIdArray, blockQuery) {
            return __awaiter(this, void 0, void 0, function* () {
                const { finality } = blockQuery;
                const { blockId } = blockQuery;
                return this.sendJsonRpc('EXPERIMENTAL_changes', {
                    changes_type: 'account_changes',
                    account_ids: accountIdArray,
                    block_id: blockId,
                    finality
                });
            });
        }
        /**
         * Gets contract state changes for a given array of accountIds
         * pass block_id OR finality as blockQuery, not both
         * Note: If you pass a keyPrefix it must be base64 encoded
         * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-contract-state-changes)
         * @returns {Promise<ChangeResult>}
         */
        contractStateChanges(accountIdArray, blockQuery, keyPrefix = '') {
            return __awaiter(this, void 0, void 0, function* () {
                const { finality } = blockQuery;
                const { blockId } = blockQuery;
                return this.sendJsonRpc('EXPERIMENTAL_changes', {
                    changes_type: 'data_changes',
                    account_ids: accountIdArray,
                    key_prefix_base64: keyPrefix,
                    block_id: blockId,
                    finality
                });
            });
        }
        /**
         * Gets contract code changes for a given array of accountIds
         * pass block_id OR finality as blockQuery, not both
         * Note: Change is returned in a base64 encoded WASM file
         * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-contract-code-changes)
         * @returns {Promise<ChangeResult>}
         */
        contractCodeChanges(accountIdArray, blockQuery) {
            return __awaiter(this, void 0, void 0, function* () {
                const { finality } = blockQuery;
                const { blockId } = blockQuery;
                return this.sendJsonRpc('EXPERIMENTAL_changes', {
                    changes_type: 'contract_code_changes',
                    account_ids: accountIdArray,
                    block_id: blockId,
                    finality
                });
            });
        }
        /**
         * Returns gas price for a specific block_height or block_hash.
         * @see [https://docs.near.org/api/rpc/gas](https://docs.near.org/api/rpc/gas)
         *
         * @param blockId Block hash or height, or null for latest.
         */
        gasPrice(blockId) {
            return __awaiter(this, void 0, void 0, function* () {
                return yield this.sendJsonRpc('gas_price', [blockId]);
            });
        }
        /**
         * Directly call the RPC specifying the method and params
         *
         * @param method RPC method
         * @param params Parameters to the method
         */
        sendJsonRpc(method, params) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield (0, exponential_backoff_1.default)(REQUEST_RETRY_WAIT, REQUEST_RETRY_NUMBER, REQUEST_RETRY_WAIT_BACKOFF, () => __awaiter(this, void 0, void 0, function* () {
                    try {
                        const request = {
                            method,
                            params,
                            id: (_nextId++),
                            jsonrpc: '2.0'
                        };
                        const response = yield (0, web_1.fetchJson)(this.connection, JSON.stringify(request));
                        if (response.error) {
                            if (typeof response.error.data === 'object') {
                                if (typeof response.error.data.error_message === 'string' && typeof response.error.data.error_type === 'string') {
                                    // if error data has error_message and error_type properties, we consider that node returned an error in the old format
                                    throw new errors_1.TypedError(response.error.data.error_message, response.error.data.error_type);
                                }
                                throw (0, rpc_errors_1.parseRpcError)(response.error.data);
                            }
                            else {
                                const errorMessage = `[${response.error.code}] ${response.error.message}: ${response.error.data}`;
                                // NOTE: All this hackery is happening because structured errors not implemented
                                // TODO: Fix when https://github.com/nearprotocol/nearcore/issues/1839 gets resolved
                                if (response.error.data === 'Timeout' || errorMessage.includes('Timeout error')
                                    || errorMessage.includes('query has timed out')) {
                                    throw new errors_1.TypedError(errorMessage, 'TimeoutError');
                                }
                                throw new errors_1.TypedError(errorMessage, response.error.name);
                            }
                        }
                        // Success when response.error is not exist
                        return response;
                    }
                    catch (error) {
                        if (error.type === 'TimeoutError') {
                            if (!process.env['NEAR_NO_LOGS']) {
                                console.warn(`Retrying request to ${method} as it has timed out`, params);
                            }
                            return null;
                        }
                        throw error;
                    }
                }));
                const { result } = response;
                // From jsonrpc spec:
                // result
                //   This member is REQUIRED on success.
                //   This member MUST NOT exist if there was an error invoking the method.
                if (typeof result === 'undefined') {
                    throw new errors_1.TypedError(`Exceeded ${REQUEST_RETRY_NUMBER} attempts for request to ${method}.`, 'RetriesExceeded');
                }
                return result;
            });
        }
    }
    exports.JsonRpcProvider = JsonRpcProvider;
    
    }).call(this)}).call(this,require('_process'),require("buffer").Buffer)
    },{"../utils/errors":69,"../utils/exponential-backoff":70,"../utils/rpc_errors":74,"../utils/web":76,"./provider":64,"_process":33,"borsh":4,"buffer":7}],64:[function(require,module,exports){
    (function (Buffer){(function (){
    "use strict";
    /**
     * NEAR RPC API request types and responses
     * @module
     */
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getTransactionLastResult = exports.Provider = exports.IdType = exports.FinalExecutionStatusBasic = exports.ExecutionStatusBasic = void 0;
    var ExecutionStatusBasic;
    (function (ExecutionStatusBasic) {
        ExecutionStatusBasic["Unknown"] = "Unknown";
        ExecutionStatusBasic["Pending"] = "Pending";
        ExecutionStatusBasic["Failure"] = "Failure";
    })(ExecutionStatusBasic = exports.ExecutionStatusBasic || (exports.ExecutionStatusBasic = {}));
    var FinalExecutionStatusBasic;
    (function (FinalExecutionStatusBasic) {
        FinalExecutionStatusBasic["NotStarted"] = "NotStarted";
        FinalExecutionStatusBasic["Started"] = "Started";
        FinalExecutionStatusBasic["Failure"] = "Failure";
    })(FinalExecutionStatusBasic = exports.FinalExecutionStatusBasic || (exports.FinalExecutionStatusBasic = {}));
    var IdType;
    (function (IdType) {
        IdType["Transaction"] = "transaction";
        IdType["Receipt"] = "receipt";
    })(IdType = exports.IdType || (exports.IdType = {}));
    /** @hidden */
    class Provider {
    }
    exports.Provider = Provider;
    /** @hidden */
    function getTransactionLastResult(txResult) {
        if (typeof txResult.status === 'object' && typeof txResult.status.SuccessValue === 'string') {
            const value = Buffer.from(txResult.status.SuccessValue, 'base64').toString();
            try {
                return JSON.parse(value);
            }
            catch (e) {
                return value;
            }
        }
        return null;
    }
    exports.getTransactionLastResult = getTransactionLastResult;
    
    }).call(this)}).call(this,require("buffer").Buffer)
    },{"buffer":7}],65:[function(require,module,exports){
    module.exports={
        "GasLimitExceeded": "Exceeded the maximum amount of gas allowed to burn per contract",
        "MethodEmptyName": "Method name is empty",
        "WasmerCompileError": "Wasmer compilation error: {{msg}}",
        "GuestPanic": "Smart contract panicked: {{panic_msg}}",
        "Memory": "Error creating Wasm memory",
        "GasExceeded": "Exceeded the prepaid gas",
        "MethodUTF8Error": "Method name is not valid UTF8 string",
        "BadUTF16": "String encoding is bad UTF-16 sequence",
        "WasmTrap": "WebAssembly trap: {{msg}}",
        "GasInstrumentation": "Gas instrumentation failed or contract has denied instructions.",
        "InvalidPromiseIndex": "{{promise_idx}} does not correspond to existing promises",
        "InvalidPromiseResultIndex": "Accessed invalid promise result index: {{result_idx}}",
        "Deserialization": "Error happened while deserializing the module",
        "MethodNotFound": "Contract method is not found",
        "InvalidRegisterId": "Accessed invalid register id: {{register_id}}",
        "InvalidReceiptIndex": "VM Logic returned an invalid receipt index: {{receipt_index}}",
        "EmptyMethodName": "Method name is empty in contract call",
        "CannotReturnJointPromise": "Returning joint promise is currently prohibited",
        "StackHeightInstrumentation": "Stack instrumentation failed",
        "CodeDoesNotExist": "Cannot find contract code for account {{account_id}}",
        "MethodInvalidSignature": "Invalid method signature",
        "IntegerOverflow": "Integer overflow happened during contract execution",
        "MemoryAccessViolation": "MemoryAccessViolation",
        "InvalidIteratorIndex": "Iterator index {{iterator_index}} does not exist",
        "IteratorWasInvalidated": "Iterator {{iterator_index}} was invalidated after its creation by performing a mutable operation on trie",
        "InvalidAccountId": "VM Logic returned an invalid account id",
        "Serialization": "Error happened while serializing the module",
        "CannotAppendActionToJointPromise": "Actions can only be appended to non-joint promise.",
        "InternalMemoryDeclared": "Internal memory declaration has been found in the module",
        "Instantiate": "Error happened during instantiation",
        "ProhibitedInView": "{{method_name}} is not allowed in view calls",
        "InvalidMethodName": "VM Logic returned an invalid method name",
        "BadUTF8": "String encoding is bad UTF-8 sequence",
        "BalanceExceeded": "Exceeded the account balance",
        "LinkError": "Wasm contract link error: {{msg}}",
        "InvalidPublicKey": "VM Logic provided an invalid public key",
        "ActorNoPermission": "Actor {{actor_id}} doesn't have permission to account {{account_id}} to complete the action",
        "LackBalanceForState": "The account {{account_id}} wouldn't have enough balance to cover storage, required to have {{amount}} yoctoNEAR more",
        "ReceiverMismatch": "Wrong AccessKey used for transaction: transaction is sent to receiver_id={{tx_receiver}}, but is signed with function call access key that restricted to only use with receiver_id={{ak_receiver}}. Either change receiver_id in your transaction or switch to use a FullAccessKey.",
        "CostOverflow": "Transaction gas or balance cost is too high",
        "InvalidSignature": "Transaction is not signed with the given public key",
        "AccessKeyNotFound": "Signer \"{{account_id}}\" doesn't have access key with the given public_key {{public_key}}",
        "NotEnoughBalance": "Sender {{signer_id}} does not have enough balance {{#formatNear}}{{balance}}{{/formatNear}} for operation costing {{#formatNear}}{{cost}}{{/formatNear}}",
        "NotEnoughAllowance": "Access Key {account_id}:{public_key} does not have enough balance {{#formatNear}}{{allowance}}{{/formatNear}} for transaction costing {{#formatNear}}{{cost}}{{/formatNear}}",
        "Expired": "Transaction has expired",
        "DeleteAccountStaking": "Account {{account_id}} is staking and can not be deleted",
        "SignerDoesNotExist": "Signer {{signer_id}} does not exist",
        "TriesToStake": "Account {{account_id}} tried to stake {{#formatNear}}{{stake}}{{/formatNear}}, but has staked {{#formatNear}}{{locked}}{{/formatNear}} and only has {{#formatNear}}{{balance}}{{/formatNear}}",
        "AddKeyAlreadyExists": "The public key {{public_key}} is already used for an existing access key",
        "InvalidSigner": "Invalid signer account ID {{signer_id}} according to requirements",
        "CreateAccountNotAllowed": "The new account_id {{account_id}} can't be created by {{predecessor_id}}",
        "RequiresFullAccess": "The transaction contains more then one action, but it was signed with an access key which allows transaction to apply only one specific action. To apply more then one actions TX must be signed with a full access key",
        "TriesToUnstake": "Account {{account_id}} is not yet staked, but tried to unstake",
        "InvalidNonce": "Transaction nonce {{tx_nonce}} must be larger than nonce of the used access key {{ak_nonce}}",
        "AccountAlreadyExists": "Can't create a new account {{account_id}}, because it already exists",
        "InvalidChain": "Transaction parent block hash doesn't belong to the current chain",
        "AccountDoesNotExist": "Can't complete the action because account {{account_id}} doesn't exist",
        "MethodNameMismatch": "Transaction method name {{method_name}} isn't allowed by the access key",
        "DeleteAccountHasRent": "Account {{account_id}} can't be deleted. It has {{#formatNear}}{{balance}}{{/formatNear}}, which is enough to cover the rent",
        "DeleteAccountHasEnoughBalance": "Account {{account_id}} can't be deleted. It has {{#formatNear}}{{balance}}{{/formatNear}}, which is enough to cover it's storage",
        "InvalidReceiver": "Invalid receiver account ID {{receiver_id}} according to requirements",
        "DeleteKeyDoesNotExist": "Account {{account_id}} tries to remove an access key that doesn't exist",
        "Timeout": "Timeout exceeded",
        "Closed": "Connection closed"
    }
    
    },{}],66:[function(require,module,exports){
    "use strict";
    var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __importDefault = (this && this.__importDefault) || function (mod) {
        return (mod && mod.__esModule) ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.InMemorySigner = exports.Signer = void 0;
    const js_sha256_1 = __importDefault(require("js-sha256"));
    const key_pair_1 = require("./utils/key_pair");
    const in_memory_key_store_1 = require("./key_stores/in_memory_key_store");
    /**
     * General signing interface, can be used for in memory signing, RPC singing, external wallet, HSM, etc.
     */
    class Signer {
    }
    exports.Signer = Signer;
    /**
     * Signs using in memory key store.
     */
    class InMemorySigner extends Signer {
        constructor(keyStore) {
            super();
            this.keyStore = keyStore;
        }
        /**
         * Creates a single account Signer instance with account, network and keyPair provided.
         *
         * Intended to be useful for temporary keys (e.g. claiming a Linkdrop).
         *
         * @param networkId The targeted network. (ex. default, betanet, etc…)
         * @param accountId The NEAR account to assign the key pair to
         * @param keyPair The keyPair to use for signing
         */
        static fromKeyPair(networkId, accountId, keyPair) {
            return __awaiter(this, void 0, void 0, function* () {
                const keyStore = new in_memory_key_store_1.InMemoryKeyStore();
                yield keyStore.setKey(networkId, accountId, keyPair);
                return new InMemorySigner(keyStore);
            });
        }
        /**
         * Creates a public key for the account given
         * @param accountId The NEAR account to assign a public key to
         * @param networkId The targeted network. (ex. default, betanet, etc…)
         * @returns {Promise<PublicKey>}
         */
        createKey(accountId, networkId) {
            return __awaiter(this, void 0, void 0, function* () {
                const keyPair = key_pair_1.KeyPair.fromRandom('ed25519');
                yield this.keyStore.setKey(networkId, accountId, keyPair);
                return keyPair.getPublicKey();
            });
        }
        /**
         * Gets the existing public key for a given account
         * @param accountId The NEAR account to assign a public key to
         * @param networkId The targeted network. (ex. default, betanet, etc…)
         * @returns {Promise<PublicKey>} Returns the public key or null if not found
         */
        getPublicKey(accountId, networkId) {
            return __awaiter(this, void 0, void 0, function* () {
                const keyPair = yield this.keyStore.getKey(networkId, accountId);
                if (keyPair === null) {
                    return null;
                }
                return keyPair.getPublicKey();
            });
        }
        /**
         * @param message A message to be signed, typically a serialized transaction
         * @param accountId the NEAR account signing the message
         * @param networkId The targeted network. (ex. default, betanet, etc…)
         * @returns {Promise<Signature>}
         */
        signMessage(message, accountId, networkId) {
            return __awaiter(this, void 0, void 0, function* () {
                const hash = new Uint8Array(js_sha256_1.default.sha256.array(message));
                if (!accountId) {
                    throw new Error('InMemorySigner requires provided account id');
                }
                const keyPair = yield this.keyStore.getKey(networkId, accountId);
                if (keyPair === null) {
                    throw new Error(`Key for ${accountId} not found in ${networkId}`);
                }
                return keyPair.sign(hash);
            });
        }
        toString() {
            return `InMemorySigner(${this.keyStore})`;
        }
    }
    exports.InMemorySigner = InMemorySigner;
    
    },{"./key_stores/in_memory_key_store":58,"./utils/key_pair":73,"js-sha256":27}],67:[function(require,module,exports){
    (function (Buffer){(function (){
    "use strict";
    var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __importDefault = (this && this.__importDefault) || function (mod) {
        return (mod && mod.__esModule) ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.signTransaction = exports.createTransaction = exports.SCHEMA = exports.Action = exports.SignedTransaction = exports.Transaction = exports.Signature = exports.deleteAccount = exports.deleteKey = exports.addKey = exports.stake = exports.transfer = exports.functionCall = exports.stringifyJsonOrBytes = exports.deployContract = exports.createAccount = exports.DeleteAccount = exports.DeleteKey = exports.AddKey = exports.Stake = exports.Transfer = exports.FunctionCall = exports.DeployContract = exports.CreateAccount = exports.IAction = exports.functionCallAccessKey = exports.fullAccessKey = exports.AccessKey = exports.AccessKeyPermission = exports.FullAccessPermission = exports.FunctionCallPermission = void 0;
    const js_sha256_1 = __importDefault(require("js-sha256"));
    const enums_1 = require("./utils/enums");
    const borsh_1 = require("borsh");
    const key_pair_1 = require("./utils/key_pair");
    class FunctionCallPermission extends enums_1.Assignable {
    }
    exports.FunctionCallPermission = FunctionCallPermission;
    class FullAccessPermission extends enums_1.Assignable {
    }
    exports.FullAccessPermission = FullAccessPermission;
    class AccessKeyPermission extends enums_1.Enum {
    }
    exports.AccessKeyPermission = AccessKeyPermission;
    class AccessKey extends enums_1.Assignable {
    }
    exports.AccessKey = AccessKey;
    function fullAccessKey() {
        return new AccessKey({ permission: new AccessKeyPermission({ fullAccess: new FullAccessPermission({}) }) });
    }
    exports.fullAccessKey = fullAccessKey;
    function functionCallAccessKey(receiverId, methodNames, allowance) {
        return new AccessKey({ permission: new AccessKeyPermission({ functionCall: new FunctionCallPermission({ receiverId, allowance, methodNames }) }) });
    }
    exports.functionCallAccessKey = functionCallAccessKey;
    class IAction extends enums_1.Assignable {
    }
    exports.IAction = IAction;
    class CreateAccount extends IAction {
    }
    exports.CreateAccount = CreateAccount;
    class DeployContract extends IAction {
    }
    exports.DeployContract = DeployContract;
    class FunctionCall extends IAction {
    }
    exports.FunctionCall = FunctionCall;
    class Transfer extends IAction {
    }
    exports.Transfer = Transfer;
    class Stake extends IAction {
    }
    exports.Stake = Stake;
    class AddKey extends IAction {
    }
    exports.AddKey = AddKey;
    class DeleteKey extends IAction {
    }
    exports.DeleteKey = DeleteKey;
    class DeleteAccount extends IAction {
    }
    exports.DeleteAccount = DeleteAccount;
    function createAccount() {
        return new Action({ createAccount: new CreateAccount({}) });
    }
    exports.createAccount = createAccount;
    function deployContract(code) {
        return new Action({ deployContract: new DeployContract({ code }) });
    }
    exports.deployContract = deployContract;
    function stringifyJsonOrBytes(args) {
        const isUint8Array = args.byteLength !== undefined && args.byteLength === args.length;
        const serializedArgs = isUint8Array ? args : Buffer.from(JSON.stringify(args));
        return serializedArgs;
    }
    exports.stringifyJsonOrBytes = stringifyJsonOrBytes;
    /**
     * Constructs {@link Action} instance representing contract method call.
     *
     * @param methodName the name of the method to call
     * @param args arguments to pass to method. Can be either plain JS object which gets serialized as JSON automatically
     *  or `Uint8Array` instance which represents bytes passed as is.
     * @param gas max amount of gas that method call can use
     * @param deposit amount of NEAR (in yoctoNEAR) to send together with the call
     * @param stringify Convert input arguments into bytes array.
     * @param jsContract  Is contract from JS SDK, skips stringification of arguments.
     */
    function functionCall(methodName, args, gas, deposit, stringify = stringifyJsonOrBytes, jsContract = false) {
        if (jsContract) {
            return new Action({ functionCall: new FunctionCall({ methodName, args, gas, deposit }) });
        }
        return new Action({ functionCall: new FunctionCall({ methodName, args: stringify(args), gas, deposit }) });
    }
    exports.functionCall = functionCall;
    function transfer(deposit) {
        return new Action({ transfer: new Transfer({ deposit }) });
    }
    exports.transfer = transfer;
    function stake(stake, publicKey) {
        return new Action({ stake: new Stake({ stake, publicKey }) });
    }
    exports.stake = stake;
    function addKey(publicKey, accessKey) {
        return new Action({ addKey: new AddKey({ publicKey, accessKey }) });
    }
    exports.addKey = addKey;
    function deleteKey(publicKey) {
        return new Action({ deleteKey: new DeleteKey({ publicKey }) });
    }
    exports.deleteKey = deleteKey;
    function deleteAccount(beneficiaryId) {
        return new Action({ deleteAccount: new DeleteAccount({ beneficiaryId }) });
    }
    exports.deleteAccount = deleteAccount;
    class Signature extends enums_1.Assignable {
    }
    exports.Signature = Signature;
    class Transaction extends enums_1.Assignable {
        encode() {
            return (0, borsh_1.serialize)(exports.SCHEMA, this);
        }
        static decode(bytes) {
            return (0, borsh_1.deserialize)(exports.SCHEMA, Transaction, bytes);
        }
    }
    exports.Transaction = Transaction;
    class SignedTransaction extends enums_1.Assignable {
        encode() {
            return (0, borsh_1.serialize)(exports.SCHEMA, this);
        }
        static decode(bytes) {
            return (0, borsh_1.deserialize)(exports.SCHEMA, SignedTransaction, bytes);
        }
    }
    exports.SignedTransaction = SignedTransaction;
    /**
     * Contains a list of the valid transaction Actions available with this API
     * @see {@link https://nomicon.io/RuntimeSpec/Actions.html | Actions Spec}
     */
    class Action extends enums_1.Enum {
    }
    exports.Action = Action;
    exports.SCHEMA = new Map([
        [Signature, { kind: 'struct', fields: [
                    ['keyType', 'u8'],
                    ['data', [64]]
                ] }],
        [SignedTransaction, { kind: 'struct', fields: [
                    ['transaction', Transaction],
                    ['signature', Signature]
                ] }],
        [Transaction, { kind: 'struct', fields: [
                    ['signerId', 'string'],
                    ['publicKey', key_pair_1.PublicKey],
                    ['nonce', 'u64'],
                    ['receiverId', 'string'],
                    ['blockHash', [32]],
                    ['actions', [Action]]
                ] }],
        [key_pair_1.PublicKey, { kind: 'struct', fields: [
                    ['keyType', 'u8'],
                    ['data', [32]]
                ] }],
        [AccessKey, { kind: 'struct', fields: [
                    ['nonce', 'u64'],
                    ['permission', AccessKeyPermission],
                ] }],
        [AccessKeyPermission, { kind: 'enum', field: 'enum', values: [
                    ['functionCall', FunctionCallPermission],
                    ['fullAccess', FullAccessPermission],
                ] }],
        [FunctionCallPermission, { kind: 'struct', fields: [
                    ['allowance', { kind: 'option', type: 'u128' }],
                    ['receiverId', 'string'],
                    ['methodNames', ['string']],
                ] }],
        [FullAccessPermission, { kind: 'struct', fields: [] }],
        [Action, { kind: 'enum', field: 'enum', values: [
                    ['createAccount', CreateAccount],
                    ['deployContract', DeployContract],
                    ['functionCall', FunctionCall],
                    ['transfer', Transfer],
                    ['stake', Stake],
                    ['addKey', AddKey],
                    ['deleteKey', DeleteKey],
                    ['deleteAccount', DeleteAccount],
                ] }],
        [CreateAccount, { kind: 'struct', fields: [] }],
        [DeployContract, { kind: 'struct', fields: [
                    ['code', ['u8']]
                ] }],
        [FunctionCall, { kind: 'struct', fields: [
                    ['methodName', 'string'],
                    ['args', ['u8']],
                    ['gas', 'u64'],
                    ['deposit', 'u128']
                ] }],
        [Transfer, { kind: 'struct', fields: [
                    ['deposit', 'u128']
                ] }],
        [Stake, { kind: 'struct', fields: [
                    ['stake', 'u128'],
                    ['publicKey', key_pair_1.PublicKey]
                ] }],
        [AddKey, { kind: 'struct', fields: [
                    ['publicKey', key_pair_1.PublicKey],
                    ['accessKey', AccessKey]
                ] }],
        [DeleteKey, { kind: 'struct', fields: [
                    ['publicKey', key_pair_1.PublicKey]
                ] }],
        [DeleteAccount, { kind: 'struct', fields: [
                    ['beneficiaryId', 'string']
                ] }],
    ]);
    function createTransaction(signerId, publicKey, receiverId, nonce, actions, blockHash) {
        return new Transaction({ signerId, publicKey, nonce, receiverId, actions, blockHash });
    }
    exports.createTransaction = createTransaction;
    /**
     * Signs a given transaction from an account with given keys, applied to the given network
     * @param transaction The Transaction object to sign
     * @param signer The {Signer} object that assists with signing keys
     * @param accountId The human-readable NEAR account name
     * @param networkId The targeted network. (ex. default, betanet, etc…)
     */
    function signTransactionObject(transaction, signer, accountId, networkId) {
        return __awaiter(this, void 0, void 0, function* () {
            const message = (0, borsh_1.serialize)(exports.SCHEMA, transaction);
            const hash = new Uint8Array(js_sha256_1.default.sha256.array(message));
            const signature = yield signer.signMessage(message, accountId, networkId);
            const signedTx = new SignedTransaction({
                transaction,
                signature: new Signature({ keyType: transaction.publicKey.keyType, data: signature.signature })
            });
            return [hash, signedTx];
        });
    }
    function signTransaction(...args) {
        return __awaiter(this, void 0, void 0, function* () {
            if (args[0].constructor === Transaction) {
                const [transaction, signer, accountId, networkId] = args;
                return signTransactionObject(transaction, signer, accountId, networkId);
            }
            else {
                const [receiverId, nonce, actions, blockHash, signer, accountId, networkId] = args;
                const publicKey = yield signer.getPublicKey(accountId, networkId);
                const transaction = createTransaction(accountId, publicKey, receiverId, nonce, actions, blockHash);
                return signTransactionObject(transaction, signer, accountId, networkId);
            }
        });
    }
    exports.signTransaction = signTransaction;
    
    }).call(this)}).call(this,require("buffer").Buffer)
    },{"./utils/enums":68,"./utils/key_pair":73,"borsh":4,"buffer":7,"js-sha256":27}],68:[function(require,module,exports){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Assignable = exports.Enum = void 0;
    /** @hidden @module */
    class Enum {
        constructor(properties) {
            if (Object.keys(properties).length !== 1) {
                throw new Error('Enum can only take single value');
            }
            Object.keys(properties).map((key) => {
                this[key] = properties[key];
                this.enum = key;
            });
        }
    }
    exports.Enum = Enum;
    class Assignable {
        constructor(properties) {
            Object.keys(properties).map((key) => {
                this[key] = properties[key];
            });
        }
    }
    exports.Assignable = Assignable;
    
    },{}],69:[function(require,module,exports){
    (function (process){(function (){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.logWarning = exports.ErrorContext = exports.TypedError = exports.ArgumentTypeError = exports.PositionalArgsError = void 0;
    class PositionalArgsError extends Error {
        constructor() {
            super('Contract method calls expect named arguments wrapped in object, e.g. { argName1: argValue1, argName2: argValue2 }');
        }
    }
    exports.PositionalArgsError = PositionalArgsError;
    class ArgumentTypeError extends Error {
        constructor(argName, argType, argValue) {
            super(`Expected ${argType} for '${argName}' argument, but got '${JSON.stringify(argValue)}'`);
        }
    }
    exports.ArgumentTypeError = ArgumentTypeError;
    class TypedError extends Error {
        constructor(message, type, context) {
            super(message);
            this.type = type || 'UntypedError';
            this.context = context;
        }
    }
    exports.TypedError = TypedError;
    class ErrorContext {
        constructor(transactionHash) {
            this.transactionHash = transactionHash;
        }
    }
    exports.ErrorContext = ErrorContext;
    function logWarning(...args) {
        if (!process.env['NEAR_NO_LOGS']) {
            console.warn(...args);
        }
    }
    exports.logWarning = logWarning;
    
    }).call(this)}).call(this,require('_process'))
    },{"_process":33}],70:[function(require,module,exports){
    "use strict";
    var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    function exponentialBackoff(startWaitTime, retryNumber, waitBackoff, getResult) {
        return __awaiter(this, void 0, void 0, function* () {
            // TODO: jitter?
            let waitTime = startWaitTime;
            for (let i = 0; i < retryNumber; i++) {
                const result = yield getResult();
                if (result) {
                    return result;
                }
                yield sleep(waitTime);
                waitTime *= waitBackoff;
            }
            return null;
        });
    }
    exports.default = exponentialBackoff;
    // Sleep given number of millis.
    function sleep(millis) {
        return new Promise(resolve => setTimeout(resolve, millis));
    }
    
    },{}],71:[function(require,module,exports){
    "use strict";
    var __importDefault = (this && this.__importDefault) || function (mod) {
        return (mod && mod.__esModule) ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseNearAmount = exports.formatNearAmount = exports.NEAR_NOMINATION = exports.NEAR_NOMINATION_EXP = void 0;
    const bn_js_1 = __importDefault(require("bn.js"));
    /**
     * Exponent for calculating how many indivisible units are there in one NEAR. See {@link NEAR_NOMINATION}.
     */
    exports.NEAR_NOMINATION_EXP = 24;
    /**
     * Number of indivisible units in one NEAR. Derived from {@link NEAR_NOMINATION_EXP}.
     */
    exports.NEAR_NOMINATION = new bn_js_1.default('10', 10).pow(new bn_js_1.default(exports.NEAR_NOMINATION_EXP, 10));
    // Pre-calculate offests used for rounding to different number of digits
    const ROUNDING_OFFSETS = [];
    const BN10 = new bn_js_1.default(10);
    for (let i = 0, offset = new bn_js_1.default(5); i < exports.NEAR_NOMINATION_EXP; i++, offset = offset.mul(BN10)) {
        ROUNDING_OFFSETS[i] = offset;
    }
    /**
     * Convert account balance value from internal indivisible units to NEAR. 1 NEAR is defined by {@link NEAR_NOMINATION}.
     * Effectively this divides given amount by {@link NEAR_NOMINATION}.
     *
     * @param balance decimal string representing balance in smallest non-divisible NEAR units (as specified by {@link NEAR_NOMINATION})
     * @param fracDigits number of fractional digits to preserve in formatted string. Balance is rounded to match given number of digits.
     * @returns Value in Ⓝ
     */
    function formatNearAmount(balance, fracDigits = exports.NEAR_NOMINATION_EXP) {
        const balanceBN = new bn_js_1.default(balance, 10);
        if (fracDigits !== exports.NEAR_NOMINATION_EXP) {
            // Adjust balance for rounding at given number of digits
            const roundingExp = exports.NEAR_NOMINATION_EXP - fracDigits - 1;
            if (roundingExp > 0) {
                balanceBN.iadd(ROUNDING_OFFSETS[roundingExp]);
            }
        }
        balance = balanceBN.toString();
        const wholeStr = balance.substring(0, balance.length - exports.NEAR_NOMINATION_EXP) || '0';
        const fractionStr = balance.substring(balance.length - exports.NEAR_NOMINATION_EXP)
            .padStart(exports.NEAR_NOMINATION_EXP, '0').substring(0, fracDigits);
        return trimTrailingZeroes(`${formatWithCommas(wholeStr)}.${fractionStr}`);
    }
    exports.formatNearAmount = formatNearAmount;
    /**
     * Convert human readable NEAR amount to internal indivisible units.
     * Effectively this multiplies given amount by {@link NEAR_NOMINATION}.
     *
     * @param amt decimal string (potentially fractional) denominated in NEAR.
     * @returns The parsed yoctoⓃ amount or null if no amount was passed in
     */
    function parseNearAmount(amt) {
        if (!amt) {
            return null;
        }
        amt = cleanupAmount(amt);
        const split = amt.split('.');
        const wholePart = split[0];
        const fracPart = split[1] || '';
        if (split.length > 2 || fracPart.length > exports.NEAR_NOMINATION_EXP) {
            throw new Error(`Cannot parse '${amt}' as NEAR amount`);
        }
        return trimLeadingZeroes(wholePart + fracPart.padEnd(exports.NEAR_NOMINATION_EXP, '0'));
    }
    exports.parseNearAmount = parseNearAmount;
    /**
     * Removes commas from the input
     * @param amount A value or amount that may contain commas
     * @returns string The cleaned value
     */
    function cleanupAmount(amount) {
        return amount.replace(/,/g, '').trim();
    }
    /**
     * Removes .000… from an input
     * @param value A value that may contain trailing zeroes in the decimals place
     * @returns string The value without the trailing zeros
     */
    function trimTrailingZeroes(value) {
        return value.replace(/\.?0*$/, '');
    }
    /**
     * Removes leading zeroes from an input
     * @param value A value that may contain leading zeroes
     * @returns string The value without the leading zeroes
     */
    function trimLeadingZeroes(value) {
        value = value.replace(/^0+/, '');
        if (value === '') {
            return '0';
        }
        return value;
    }
    /**
     * Returns a human-readable value with commas
     * @param value A value that may not contain commas
     * @returns string A value with commas
     */
    function formatWithCommas(value) {
        const pattern = /(-?\d+)(\d{3})/;
        while (pattern.test(value)) {
            value = value.replace(pattern, '$1,$2');
        }
        return value;
    }
    
    },{"bn.js":3}],72:[function(require,module,exports){
    "use strict";
    var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() { return m[k]; } };
        }
        Object.defineProperty(o, k2, desc);
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
        o["default"] = v;
    });
    var __importStar = (this && this.__importStar) || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.logWarning = exports.rpc_errors = exports.KeyPairEd25519 = exports.KeyPair = exports.PublicKey = exports.format = exports.enums = exports.web = exports.serialize = exports.key_pair = void 0;
    const key_pair = __importStar(require("./key_pair"));
    exports.key_pair = key_pair;
    const serialize = __importStar(require("./serialize"));
    exports.serialize = serialize;
    const web = __importStar(require("./web"));
    exports.web = web;
    const enums = __importStar(require("./enums"));
    exports.enums = enums;
    const format = __importStar(require("./format"));
    exports.format = format;
    const rpc_errors = __importStar(require("./rpc_errors"));
    exports.rpc_errors = rpc_errors;
    const key_pair_1 = require("./key_pair");
    Object.defineProperty(exports, "PublicKey", { enumerable: true, get: function () { return key_pair_1.PublicKey; } });
    Object.defineProperty(exports, "KeyPair", { enumerable: true, get: function () { return key_pair_1.KeyPair; } });
    Object.defineProperty(exports, "KeyPairEd25519", { enumerable: true, get: function () { return key_pair_1.KeyPairEd25519; } });
    const errors_1 = require("./errors");
    Object.defineProperty(exports, "logWarning", { enumerable: true, get: function () { return errors_1.logWarning; } });
    
    },{"./enums":68,"./errors":69,"./format":71,"./key_pair":73,"./rpc_errors":74,"./serialize":75,"./web":76}],73:[function(require,module,exports){
    "use strict";
    var __importDefault = (this && this.__importDefault) || function (mod) {
        return (mod && mod.__esModule) ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.KeyPairEd25519 = exports.KeyPair = exports.PublicKey = exports.KeyType = void 0;
    const tweetnacl_1 = __importDefault(require("tweetnacl"));
    const serialize_1 = require("./serialize");
    const enums_1 = require("./enums");
    /** All supported key types */
    var KeyType;
    (function (KeyType) {
        KeyType[KeyType["ED25519"] = 0] = "ED25519";
    })(KeyType = exports.KeyType || (exports.KeyType = {}));
    function key_type_to_str(keyType) {
        switch (keyType) {
            case KeyType.ED25519: return 'ed25519';
            default: throw new Error(`Unknown key type ${keyType}`);
        }
    }
    function str_to_key_type(keyType) {
        switch (keyType.toLowerCase()) {
            case 'ed25519': return KeyType.ED25519;
            default: throw new Error(`Unknown key type ${keyType}`);
        }
    }
    /**
     * PublicKey representation that has type and bytes of the key.
     */
    class PublicKey extends enums_1.Assignable {
        static from(value) {
            if (typeof value === 'string') {
                return PublicKey.fromString(value);
            }
            return value;
        }
        static fromString(encodedKey) {
            const parts = encodedKey.split(':');
            if (parts.length === 1) {
                return new PublicKey({ keyType: KeyType.ED25519, data: (0, serialize_1.base_decode)(parts[0]) });
            }
            else if (parts.length === 2) {
                return new PublicKey({ keyType: str_to_key_type(parts[0]), data: (0, serialize_1.base_decode)(parts[1]) });
            }
            else {
                throw new Error('Invalid encoded key format, must be <curve>:<encoded key>');
            }
        }
        toString() {
            return `${key_type_to_str(this.keyType)}:${(0, serialize_1.base_encode)(this.data)}`;
        }
        verify(message, signature) {
            switch (this.keyType) {
                case KeyType.ED25519: return tweetnacl_1.default.sign.detached.verify(message, signature, this.data);
                default: throw new Error(`Unknown key type ${this.keyType}`);
            }
        }
    }
    exports.PublicKey = PublicKey;
    class KeyPair {
        /**
         * @param curve Name of elliptical curve, case-insensitive
         * @returns Random KeyPair based on the curve
         */
        static fromRandom(curve) {
            switch (curve.toUpperCase()) {
                case 'ED25519': return KeyPairEd25519.fromRandom();
                default: throw new Error(`Unknown curve ${curve}`);
            }
        }
        static fromString(encodedKey) {
            const parts = encodedKey.split(':');
            if (parts.length === 1) {
                return new KeyPairEd25519(parts[0]);
            }
            else if (parts.length === 2) {
                switch (parts[0].toUpperCase()) {
                    case 'ED25519': return new KeyPairEd25519(parts[1]);
                    default: throw new Error(`Unknown curve: ${parts[0]}`);
                }
            }
            else {
                throw new Error('Invalid encoded key format, must be <curve>:<encoded key>');
            }
        }
    }
    exports.KeyPair = KeyPair;
    /**
     * This class provides key pair functionality for Ed25519 curve:
     * generating key pairs, encoding key pairs, signing and verifying.
     */
    class KeyPairEd25519 extends KeyPair {
        /**
         * Construct an instance of key pair given a secret key.
         * It's generally assumed that these are encoded in base58.
         * @param {string} secretKey
         */
        constructor(secretKey) {
            super();
            const keyPair = tweetnacl_1.default.sign.keyPair.fromSecretKey((0, serialize_1.base_decode)(secretKey));
            this.publicKey = new PublicKey({ keyType: KeyType.ED25519, data: keyPair.publicKey });
            this.secretKey = secretKey;
        }
        /**
         * Generate a new random keypair.
         * @example
         * const keyRandom = KeyPair.fromRandom();
         * keyRandom.publicKey
         * // returns [PUBLIC_KEY]
         *
         * keyRandom.secretKey
         * // returns [SECRET_KEY]
         */
        static fromRandom() {
            const newKeyPair = tweetnacl_1.default.sign.keyPair();
            return new KeyPairEd25519((0, serialize_1.base_encode)(newKeyPair.secretKey));
        }
        sign(message) {
            const signature = tweetnacl_1.default.sign.detached(message, (0, serialize_1.base_decode)(this.secretKey));
            return { signature, publicKey: this.publicKey };
        }
        verify(message, signature) {
            return this.publicKey.verify(message, signature);
        }
        toString() {
            return `ed25519:${this.secretKey}`;
        }
        getPublicKey() {
            return this.publicKey;
        }
    }
    exports.KeyPairEd25519 = KeyPairEd25519;
    
    },{"./enums":68,"./serialize":75,"tweetnacl":40}],74:[function(require,module,exports){
    "use strict";
    var __importDefault = (this && this.__importDefault) || function (mod) {
        return (mod && mod.__esModule) ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.formatError = exports.parseResultError = exports.parseRpcError = exports.ServerError = void 0;
    const mustache_1 = __importDefault(require("mustache"));
    const rpc_error_schema_json_1 = __importDefault(require("../generated/rpc_error_schema.json"));
    const error_messages_json_1 = __importDefault(require("../res/error_messages.json"));
    const common_index_1 = require("../common-index");
    const errors_1 = require("../utils/errors");
    const mustacheHelpers = {
        formatNear: () => (n, render) => common_index_1.utils.format.formatNearAmount(render(n))
    };
    class ServerError extends errors_1.TypedError {
    }
    exports.ServerError = ServerError;
    class ServerTransactionError extends ServerError {
    }
    function parseRpcError(errorObj) {
        const result = {};
        const errorClassName = walkSubtype(errorObj, rpc_error_schema_json_1.default.schema, result, '');
        // NOTE: This assumes that all errors extend TypedError
        const error = new ServerError(formatError(errorClassName, result), errorClassName);
        Object.assign(error, result);
        return error;
    }
    exports.parseRpcError = parseRpcError;
    function parseResultError(result) {
        const server_error = parseRpcError(result.status.Failure);
        const server_tx_error = new ServerTransactionError();
        Object.assign(server_tx_error, server_error);
        server_tx_error.type = server_error.type;
        server_tx_error.message = server_error.message;
        server_tx_error.transaction_outcome = result.transaction_outcome;
        return server_tx_error;
    }
    exports.parseResultError = parseResultError;
    function formatError(errorClassName, errorData) {
        if (typeof error_messages_json_1.default[errorClassName] === 'string') {
            return mustache_1.default.render(error_messages_json_1.default[errorClassName], Object.assign(Object.assign({}, errorData), mustacheHelpers));
        }
        return JSON.stringify(errorData);
    }
    exports.formatError = formatError;
    /**
     * Walks through defined schema returning error(s) recursively
     * @param errorObj The error to be parsed
     * @param schema A defined schema in JSON mapping to the RPC errors
     * @param result An object used in recursion or called directly
     * @param typeName The human-readable error type name as defined in the JSON mapping
     */
    function walkSubtype(errorObj, schema, result, typeName) {
        let error;
        let type;
        let errorTypeName;
        for (const errorName in schema) {
            if (isString(errorObj[errorName])) {
                // Return early if error type is in a schema
                return errorObj[errorName];
            }
            if (isObject(errorObj[errorName])) {
                error = errorObj[errorName];
                type = schema[errorName];
                errorTypeName = errorName;
            }
            else if (isObject(errorObj.kind) && isObject(errorObj.kind[errorName])) {
                error = errorObj.kind[errorName];
                type = schema[errorName];
                errorTypeName = errorName;
            }
            else {
                continue;
            }
        }
        if (error && type) {
            for (const prop of Object.keys(type.props)) {
                result[prop] = error[prop];
            }
            return walkSubtype(error, schema, result, errorTypeName);
        }
        else {
            // TODO: is this the right thing to do?
            result.kind = errorObj;
            return typeName;
        }
    }
    /**
     * Helper function determining if the argument is an object
     * @param n Value to check
     */
    function isObject(n) {
        return Object.prototype.toString.call(n) === '[object Object]';
    }
    /**
     * Helper function determining if the argument is a string
     * @param n Value to check
     */
    function isString(n) {
        return Object.prototype.toString.call(n) === '[object String]';
    }
    
    },{"../common-index":51,"../generated/rpc_error_schema.json":55,"../res/error_messages.json":65,"../utils/errors":69,"mustache":28}],75:[function(require,module,exports){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BinaryReader = exports.BinaryWriter = exports.BorshError = exports.deserialize = exports.serialize = exports.base_decode = exports.base_encode = void 0;
    var borsh_1 = require("borsh");
    Object.defineProperty(exports, "base_encode", { enumerable: true, get: function () { return borsh_1.baseEncode; } });
    Object.defineProperty(exports, "base_decode", { enumerable: true, get: function () { return borsh_1.baseDecode; } });
    Object.defineProperty(exports, "serialize", { enumerable: true, get: function () { return borsh_1.serialize; } });
    Object.defineProperty(exports, "deserialize", { enumerable: true, get: function () { return borsh_1.deserialize; } });
    Object.defineProperty(exports, "BorshError", { enumerable: true, get: function () { return borsh_1.BorshError; } });
    Object.defineProperty(exports, "BinaryWriter", { enumerable: true, get: function () { return borsh_1.BinaryWriter; } });
    Object.defineProperty(exports, "BinaryReader", { enumerable: true, get: function () { return borsh_1.BinaryReader; } });
    
    },{"borsh":4}],76:[function(require,module,exports){
    "use strict";
    var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __importDefault = (this && this.__importDefault) || function (mod) {
        return (mod && mod.__esModule) ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fetchJson = void 0;
    const http_errors_1 = __importDefault(require("http-errors"));
    const exponential_backoff_1 = __importDefault(require("./exponential-backoff"));
    const providers_1 = require("../providers");
    const errors_1 = require("./errors");
    const START_WAIT_TIME_MS = 1000;
    const BACKOFF_MULTIPLIER = 1.5;
    const RETRY_NUMBER = 10;
    function fetchJson(connectionInfoOrUrl, json) {
        return __awaiter(this, void 0, void 0, function* () {
            let connectionInfo = { url: null };
            if (typeof (connectionInfoOrUrl) === 'string') {
                connectionInfo.url = connectionInfoOrUrl;
            }
            else {
                connectionInfo = connectionInfoOrUrl;
            }
            const response = yield (0, exponential_backoff_1.default)(START_WAIT_TIME_MS, RETRY_NUMBER, BACKOFF_MULTIPLIER, () => __awaiter(this, void 0, void 0, function* () {
                try {
                    const response = yield fetch(connectionInfo.url, {
                        method: json ? 'POST' : 'GET',
                        body: json ? json : undefined,
                        headers: Object.assign(Object.assign({}, connectionInfo.headers), { 'Content-Type': 'application/json' })
                    });
                    if (!response.ok) {
                        if (response.status === 503) {
                            (0, errors_1.logWarning)(`Retrying HTTP request for ${connectionInfo.url} as it's not available now`);
                            return null;
                        }
                        throw (0, http_errors_1.default)(response.status, yield response.text());
                    }
                    return response;
                }
                catch (error) {
                    if (error.toString().includes('FetchError') || error.toString().includes('Failed to fetch')) {
                        (0, errors_1.logWarning)(`Retrying HTTP request for ${connectionInfo.url} because of error: ${error}`);
                        return null;
                    }
                    throw error;
                }
            }));
            if (!response) {
                throw new providers_1.TypedError(`Exceeded ${RETRY_NUMBER} attempts for ${connectionInfo.url}.`, 'RetriesExceeded');
            }
            return yield response.json();
        });
    }
    exports.fetchJson = fetchJson;
    
    },{"../providers":62,"./errors":69,"./exponential-backoff":70,"http-errors":24}],77:[function(require,module,exports){
    'use strict';
    var __importDefault = (this && this.__importDefault) || function (mod) {
        return (mod && mod.__esModule) ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.diffEpochValidators = exports.findSeatPrice = void 0;
    const bn_js_1 = __importDefault(require("bn.js"));
    const depd_1 = __importDefault(require("depd"));
    /** Finds seat price given validators stakes and number of seats.
     *  Calculation follow the spec: https://nomicon.io/Economics/README.html#validator-selection
     * @params validators: current or next epoch validators.
     * @params maxNumberOfSeats: maximum number of seats in the network.
     * @params minimumStakeRatio: minimum stake ratio
     * @params protocolVersion: version of the protocol from genesis config
     */
    function findSeatPrice(validators, maxNumberOfSeats, minimumStakeRatio, protocolVersion) {
        if (protocolVersion && protocolVersion < 49) {
            return findSeatPriceForProtocolBefore49(validators, maxNumberOfSeats);
        }
        if (!minimumStakeRatio) {
            const deprecate = (0, depd_1.default)('findSeatPrice(validators, maxNumberOfSeats)');
            deprecate('`use `findSeatPrice(validators, maxNumberOfSeats, minimumStakeRatio)` instead');
            minimumStakeRatio = [1, 6250]; // harcoded minimumStakeRation from 12/7/21
        }
        return findSeatPriceForProtocolAfter49(validators, maxNumberOfSeats, minimumStakeRatio);
    }
    exports.findSeatPrice = findSeatPrice;
    function findSeatPriceForProtocolBefore49(validators, numSeats) {
        const stakes = validators.map(v => new bn_js_1.default(v.stake, 10)).sort((a, b) => a.cmp(b));
        const num = new bn_js_1.default(numSeats);
        const stakesSum = stakes.reduce((a, b) => a.add(b));
        if (stakesSum.lt(num)) {
            throw new Error('Stakes are below seats');
        }
        // assert stakesSum >= numSeats
        let left = new bn_js_1.default(1), right = stakesSum.add(new bn_js_1.default(1));
        while (!left.eq(right.sub(new bn_js_1.default(1)))) {
            const mid = left.add(right).div(new bn_js_1.default(2));
            let found = false;
            let currentSum = new bn_js_1.default(0);
            for (let i = 0; i < stakes.length; ++i) {
                currentSum = currentSum.add(stakes[i].div(mid));
                if (currentSum.gte(num)) {
                    left = mid;
                    found = true;
                    break;
                }
            }
            if (!found) {
                right = mid;
            }
        }
        return left;
    }
    // nearcore reference: https://github.com/near/nearcore/blob/5a8ae263ec07930cd34d0dcf5bcee250c67c02aa/chain/epoch_manager/src/validator_selection.rs#L308;L315
    function findSeatPriceForProtocolAfter49(validators, maxNumberOfSeats, minimumStakeRatio) {
        if (minimumStakeRatio.length != 2) {
            throw Error('minimumStakeRatio should have 2 elements');
        }
        const stakes = validators.map(v => new bn_js_1.default(v.stake, 10)).sort((a, b) => a.cmp(b));
        const stakesSum = stakes.reduce((a, b) => a.add(b));
        if (validators.length < maxNumberOfSeats) {
            return stakesSum.mul(new bn_js_1.default(minimumStakeRatio[0])).div(new bn_js_1.default(minimumStakeRatio[1]));
        }
        else {
            return stakes[0].add(new bn_js_1.default(1));
        }
    }
    /** Diff validators between current and next epoch.
     * Returns additions, subtractions and changes to validator set.
     * @params currentValidators: list of current validators.
     * @params nextValidators: list of next validators.
     */
    function diffEpochValidators(currentValidators, nextValidators) {
        const validatorsMap = new Map();
        currentValidators.forEach(v => validatorsMap.set(v.account_id, v));
        const nextValidatorsSet = new Set(nextValidators.map(v => v.account_id));
        return {
            newValidators: nextValidators.filter(v => !validatorsMap.has(v.account_id)),
            removedValidators: currentValidators.filter(v => !nextValidatorsSet.has(v.account_id)),
            changedValidators: nextValidators.filter(v => (validatorsMap.has(v.account_id) && validatorsMap.get(v.account_id).stake != v.stake))
                .map(v => ({ current: validatorsMap.get(v.account_id), next: v }))
        };
    }
    exports.diffEpochValidators = diffEpochValidators;
    
    },{"bn.js":3,"depd":14}],78:[function(require,module,exports){
    (function (Buffer){(function (){
    "use strict";
    var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __importDefault = (this && this.__importDefault) || function (mod) {
        return (mod && mod.__esModule) ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ConnectedWalletAccount = exports.WalletConnection = void 0;
    /**
     * The classes in this module are used in conjunction with the {@link key_stores/browser_local_storage_key_store!BrowserLocalStorageKeyStore}.
     * This module exposes two classes:
     * * {@link WalletConnection} which redirects users to [NEAR Wallet](https://wallet.near.org/) for key management.
     * * {@link ConnectedWalletAccount} is an {@link account!Account} implementation that uses {@link WalletConnection} to get keys
     *
     * @module walletAccount
     */
    const account_1 = require("./account");
    const transaction_1 = require("./transaction");
    const utils_1 = require("./utils");
    const borsh_1 = require("borsh");
    const borsh_2 = require("borsh");
    const bn_js_1 = __importDefault(require("bn.js"));
    const LOGIN_WALLET_URL_SUFFIX = '/login/';
    const MULTISIG_HAS_METHOD = 'add_request_and_confirm';
    const LOCAL_STORAGE_KEY_SUFFIX = '_wallet_auth_key';
    const PENDING_ACCESS_KEY_PREFIX = 'pending_key'; // browser storage key for a pending access key (i.e. key has been generated but we are not sure it was added yet)
    /**
     * This class is used in conjunction with the {@link key_stores/browser_local_storage_key_store!BrowserLocalStorageKeyStore}.
     * It redirects users to [NEAR Wallet](https://wallet.near.org) for key management.
     * This class is not intended for use outside the browser. Without `window` (i.e. in server contexts), it will instantiate but will throw a clear error when used.
     *
     * @see [https://docs.near.org/tools/near-api-js/quick-reference#wallet](https://docs.near.org/tools/near-api-js/quick-reference#wallet)
     * @example
     * ```js
     * // create new WalletConnection instance
     * const wallet = new WalletConnection(near, 'my-app');
     *
     * // If not signed in redirect to the NEAR wallet to sign in
     * // keys will be stored in the BrowserLocalStorageKeyStore
     * if(!wallet.isSignedIn()) return wallet.requestSignIn()
     * ```
     */
    class WalletConnection {
        constructor(near, appKeyPrefix) {
            if (typeof window === 'undefined') {
                return new Proxy(this, {
                    get(target, property) {
                        if (property === 'isSignedIn') {
                            return () => false;
                        }
                        if (property === 'getAccountId') {
                            return () => '';
                        }
                        if (target[property] && typeof target[property] === 'function') {
                            return () => {
                                throw new Error('No window found in context, please ensure you are using WalletConnection on the browser');
                            };
                        }
                        return target[property];
                    }
                });
            }
            this._near = near;
            const authDataKey = appKeyPrefix + LOCAL_STORAGE_KEY_SUFFIX;
            const authData = JSON.parse(window.localStorage.getItem(authDataKey));
            this._networkId = near.config.networkId;
            this._walletBaseUrl = near.config.walletUrl;
            appKeyPrefix = appKeyPrefix || near.config.contractName || 'default';
            this._keyStore = near.connection.signer.keyStore;
            this._authData = authData || { allKeys: [] };
            this._authDataKey = authDataKey;
            if (!this.isSignedIn()) {
                this._completeSignInPromise = this._completeSignInWithAccessKey();
            }
        }
        /**
         * Returns true, if this WalletConnection is authorized with the wallet.
         * @example
         * ```js
         * const wallet = new WalletConnection(near, 'my-app');
         * wallet.isSignedIn();
         * ```
         */
        isSignedIn() {
            return !!this._authData.accountId;
        }
        /**
         * Returns promise of completing signing in after redirecting from wallet
         * @example
         * ```js
         * // on login callback page
         * const wallet = new WalletConnection(near, 'my-app');
         * wallet.isSignedIn(); // false
         * await wallet.isSignedInAsync(); // true
         * ```
         */
        isSignedInAsync() {
            return __awaiter(this, void 0, void 0, function* () {
                if (!this._completeSignInPromise) {
                    return this.isSignedIn();
                }
                yield this._completeSignInPromise;
                return this.isSignedIn();
            });
        }
        /**
         * Returns authorized Account ID.
         * @example
         * ```js
         * const wallet = new WalletConnection(near, 'my-app');
         * wallet.getAccountId();
         * ```
         */
        getAccountId() {
            return this._authData.accountId || '';
        }
        /**
         * Redirects current page to the wallet authentication page.
         * @param options An optional options object
         * @param options.contractId The NEAR account where the contract is deployed
         * @param options.successUrl URL to redirect upon success. Default: current url
         * @param options.failureUrl URL to redirect upon failure. Default: current url
         *
         * @example
         * ```js
         * const wallet = new WalletConnection(near, 'my-app');
         * // redirects to the NEAR Wallet
         * wallet.requestSignIn({ contractId: 'account-with-deploy-contract.near' });
         * ```
         */
        requestSignIn({ contractId, methodNames, successUrl, failureUrl }) {
            return __awaiter(this, void 0, void 0, function* () {
                const currentUrl = new URL(window.location.href);
                const newUrl = new URL(this._walletBaseUrl + LOGIN_WALLET_URL_SUFFIX);
                newUrl.searchParams.set('success_url', successUrl || currentUrl.href);
                newUrl.searchParams.set('failure_url', failureUrl || currentUrl.href);
                if (contractId) {
                    /* Throws exception if contract account does not exist */
                    const contractAccount = yield this._near.account(contractId);
                    yield contractAccount.state();
                    newUrl.searchParams.set('contract_id', contractId);
                    const accessKey = utils_1.KeyPair.fromRandom('ed25519');
                    newUrl.searchParams.set('public_key', accessKey.getPublicKey().toString());
                    yield this._keyStore.setKey(this._networkId, PENDING_ACCESS_KEY_PREFIX + accessKey.getPublicKey(), accessKey);
                }
                if (methodNames) {
                    methodNames.forEach(methodName => {
                        newUrl.searchParams.append('methodNames', methodName);
                    });
                }
                window.location.assign(newUrl.toString());
            });
        }
        /**
         * Requests the user to quickly sign for a transaction or batch of transactions by redirecting to the NEAR wallet.
         */
        requestSignTransactions({ transactions, meta, callbackUrl }) {
            return __awaiter(this, void 0, void 0, function* () {
                const currentUrl = new URL(window.location.href);
                const newUrl = new URL('sign', this._walletBaseUrl);
                newUrl.searchParams.set('transactions', transactions
                    .map(transaction => (0, borsh_2.serialize)(transaction_1.SCHEMA, transaction))
                    .map(serialized => Buffer.from(serialized).toString('base64'))
                    .join(','));
                newUrl.searchParams.set('callbackUrl', callbackUrl || currentUrl.href);
                if (meta)
                    newUrl.searchParams.set('meta', meta);
                window.location.assign(newUrl.toString());
            });
        }
        /**
         * @hidden
         * Complete sign in for a given account id and public key. To be invoked by the app when getting a callback from the wallet.
         */
        _completeSignInWithAccessKey() {
            return __awaiter(this, void 0, void 0, function* () {
                const currentUrl = new URL(window.location.href);
                const publicKey = currentUrl.searchParams.get('public_key') || '';
                const allKeys = (currentUrl.searchParams.get('all_keys') || '').split(',');
                const accountId = currentUrl.searchParams.get('account_id') || '';
                // TODO: Handle errors during login
                if (accountId) {
                    const authData = {
                        accountId,
                        allKeys
                    };
                    window.localStorage.setItem(this._authDataKey, JSON.stringify(authData));
                    if (publicKey) {
                        yield this._moveKeyFromTempToPermanent(accountId, publicKey);
                    }
                    this._authData = authData;
                }
                currentUrl.searchParams.delete('public_key');
                currentUrl.searchParams.delete('all_keys');
                currentUrl.searchParams.delete('account_id');
                currentUrl.searchParams.delete('meta');
                currentUrl.searchParams.delete('transactionHashes');
                window.history.replaceState({}, document.title, currentUrl.toString());
            });
        }
        /**
         * @hidden
         * @param accountId The NEAR account owning the given public key
         * @param publicKey The public key being set to the key store
         */
        _moveKeyFromTempToPermanent(accountId, publicKey) {
            return __awaiter(this, void 0, void 0, function* () {
                const keyPair = yield this._keyStore.getKey(this._networkId, PENDING_ACCESS_KEY_PREFIX + publicKey);
                yield this._keyStore.setKey(this._networkId, accountId, keyPair);
                yield this._keyStore.removeKey(this._networkId, PENDING_ACCESS_KEY_PREFIX + publicKey);
            });
        }
        /**
         * Sign out from the current account
         * @example
         * walletConnection.signOut();
         */
        signOut() {
            this._authData = {};
            window.localStorage.removeItem(this._authDataKey);
        }
        /**
         * Returns the current connected wallet account
         */
        account() {
            if (!this._connectedAccount) {
                this._connectedAccount = new ConnectedWalletAccount(this, this._near.connection, this._authData.accountId);
            }
            return this._connectedAccount;
        }
    }
    exports.WalletConnection = WalletConnection;
    /**
     * {@link account!Account} implementation which redirects to wallet using {@link WalletConnection} when no local key is available.
     */
    class ConnectedWalletAccount extends account_1.Account {
        constructor(walletConnection, connection, accountId) {
            super(connection, accountId);
            this.walletConnection = walletConnection;
        }
        // Overriding Account methods
        /**
         * Sign a transaction by redirecting to the NEAR Wallet
         * @see {@link WalletConnection.requestSignTransactions}
         */
        signAndSendTransaction({ receiverId, actions, walletMeta, walletCallbackUrl = window.location.href }) {
            const _super = Object.create(null, {
                signAndSendTransaction: { get: () => super.signAndSendTransaction }
            });
            return __awaiter(this, void 0, void 0, function* () {
                const localKey = yield this.connection.signer.getPublicKey(this.accountId, this.connection.networkId);
                let accessKey = yield this.accessKeyForTransaction(receiverId, actions, localKey);
                if (!accessKey) {
                    throw new Error(`Cannot find matching key for transaction sent to ${receiverId}`);
                }
                if (localKey && localKey.toString() === accessKey.public_key) {
                    try {
                        return yield _super.signAndSendTransaction.call(this, { receiverId, actions });
                    }
                    catch (e) {
                        if (e.type === 'NotEnoughAllowance') {
                            accessKey = yield this.accessKeyForTransaction(receiverId, actions);
                        }
                        else {
                            throw e;
                        }
                    }
                }
                const block = yield this.connection.provider.block({ finality: 'final' });
                const blockHash = (0, borsh_1.baseDecode)(block.header.hash);
                const publicKey = utils_1.PublicKey.from(accessKey.public_key);
                // TODO: Cache & listen for nonce updates for given access key
                const nonce = accessKey.access_key.nonce.add(new bn_js_1.default(1));
                const transaction = (0, transaction_1.createTransaction)(this.accountId, publicKey, receiverId, nonce, actions, blockHash);
                yield this.walletConnection.requestSignTransactions({
                    transactions: [transaction],
                    meta: walletMeta,
                    callbackUrl: walletCallbackUrl
                });
                return new Promise((resolve, reject) => {
                    setTimeout(() => {
                        reject(new Error('Failed to redirect to sign transaction'));
                    }, 1000);
                });
                // TODO: Aggregate multiple transaction request with "debounce".
                // TODO: Introduce TrasactionQueue which also can be used to watch for status?
            });
        }
        /**
         * Check if given access key allows the function call or method attempted in transaction
         * @param accessKey Array of \{access_key: AccessKey, public_key: PublicKey\} items
         * @param receiverId The NEAR account attempting to have access
         * @param actions The action(s) needed to be checked for access
         */
        accessKeyMatchesTransaction(accessKey, receiverId, actions) {
            return __awaiter(this, void 0, void 0, function* () {
                const { access_key: { permission } } = accessKey;
                if (permission === 'FullAccess') {
                    return true;
                }
                if (permission.FunctionCall) {
                    const { receiver_id: allowedReceiverId, method_names: allowedMethods } = permission.FunctionCall;
                    /********************************
                    Accept multisig access keys and let wallets attempt to signAndSendTransaction
                    If an access key has itself as receiverId and method permission add_request_and_confirm, then it is being used in a wallet with multisig contract: https://github.com/near/core-contracts/blob/671c05f09abecabe7a7e58efe942550a35fc3292/multisig/src/lib.rs#L149-L153
                    ********************************/
                    if (allowedReceiverId === this.accountId && allowedMethods.includes(MULTISIG_HAS_METHOD)) {
                        return true;
                    }
                    if (allowedReceiverId === receiverId) {
                        if (actions.length !== 1) {
                            return false;
                        }
                        const [{ functionCall }] = actions;
                        return functionCall &&
                            (!functionCall.deposit || functionCall.deposit.toString() === '0') && // TODO: Should support charging amount smaller than allowance?
                            (allowedMethods.length === 0 || allowedMethods.includes(functionCall.methodName));
                        // TODO: Handle cases when allowance doesn't have enough to pay for gas
                    }
                }
                // TODO: Support other permissions than FunctionCall
                return false;
            });
        }
        /**
         * Helper function returning the access key (if it exists) to the receiver that grants the designated permission
         * @param receiverId The NEAR account seeking the access key for a transaction
         * @param actions The action(s) sought to gain access to
         * @param localKey A local public key provided to check for access
         */
        accessKeyForTransaction(receiverId, actions, localKey) {
            return __awaiter(this, void 0, void 0, function* () {
                const accessKeys = yield this.getAccessKeys();
                if (localKey) {
                    const accessKey = accessKeys.find(key => key.public_key.toString() === localKey.toString());
                    if (accessKey && (yield this.accessKeyMatchesTransaction(accessKey, receiverId, actions))) {
                        return accessKey;
                    }
                }
                const walletKeys = this.walletConnection._authData.allKeys;
                for (const accessKey of accessKeys) {
                    if (walletKeys.indexOf(accessKey.public_key) !== -1 && (yield this.accessKeyMatchesTransaction(accessKey, receiverId, actions))) {
                        return accessKey;
                    }
                }
                return null;
            });
        }
    }
    exports.ConnectedWalletAccount = ConnectedWalletAccount;
    
    }).call(this)}).call(this,require("buffer").Buffer)
    },{"./account":46,"./transaction":67,"./utils":72,"bn.js":3,"borsh":4,"buffer":7}]},{},[45]);
'''
'''--- Examples/nearUnityClient.Android/Near Unity Client/Near Unity Client.sln ---
﻿
Microsoft Visual Studio Solution File, Format Version 12.00
# Visual Studio 15
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Assembly-CSharp", "Assembly-CSharp.csproj", "{8FA57C64-9116-A379-2CA7-EC02916D044A}"
EndProject
Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = "Solution Items", "Solution Items", "{18ABA720-D05C-4534-B8F4-78AF6393DDA4}"
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|Any CPU = Debug|Any CPU
		Release|Any CPU = Release|Any CPU
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{8FA57C64-9116-A379-2CA7-EC02916D044A}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{8FA57C64-9116-A379-2CA7-EC02916D044A}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{8FA57C64-9116-A379-2CA7-EC02916D044A}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{8FA57C64-9116-A379-2CA7-EC02916D044A}.Release|Any CPU.Build.0 = Release|Any CPU
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
EndGlobal

'''
'''--- Examples/nearUnityClient.Android/Near Unity Client/ProjectSettings/ProjectVersion.txt ---
m_EditorVersion: 2021.3.15f1
m_EditorVersionWithRevision: 2021.3.15f1 (e8e88683f834)

'''
'''--- Examples/nearUnityClient.Android/Near Unity Client/ProjectSettings/SceneTemplateSettings.json ---
{
    "templatePinStates": [],
    "dependencyTypeInfos": [
        {
            "userAdded": false,
            "type": "UnityEngine.AnimationClip",
            "ignore": false,
            "defaultInstantiationMode": 0,
            "supportsModification": true
        },
        {
            "userAdded": false,
            "type": "UnityEditor.Animations.AnimatorController",
            "ignore": false,
            "defaultInstantiationMode": 0,
            "supportsModification": true
        },
        {
            "userAdded": false,
            "type": "UnityEngine.AnimatorOverrideController",
            "ignore": false,
            "defaultInstantiationMode": 0,
            "supportsModification": true
        },
        {
            "userAdded": false,
            "type": "UnityEditor.Audio.AudioMixerController",
            "ignore": false,
            "defaultInstantiationMode": 0,
            "supportsModification": true
        },
        {
            "userAdded": false,
            "type": "UnityEngine.ComputeShader",
            "ignore": true,
            "defaultInstantiationMode": 1,
            "supportsModification": true
        },
        {
            "userAdded": false,
            "type": "UnityEngine.Cubemap",
            "ignore": false,
            "defaultInstantiationMode": 0,
            "supportsModification": true
        },
        {
            "userAdded": false,
            "type": "UnityEngine.GameObject",
            "ignore": false,
            "defaultInstantiationMode": 0,
            "supportsModification": true
        },
        {
            "userAdded": false,
            "type": "UnityEditor.LightingDataAsset",
            "ignore": false,
            "defaultInstantiationMode": 0,
            "supportsModification": false
        },
        {
            "userAdded": false,
            "type": "UnityEngine.LightingSettings",
            "ignore": false,
            "defaultInstantiationMode": 0,
            "supportsModification": true
        },
        {
            "userAdded": false,
            "type": "UnityEngine.Material",
            "ignore": false,
            "defaultInstantiationMode": 0,
            "supportsModification": true
        },
        {
            "userAdded": false,
            "type": "UnityEditor.MonoScript",
            "ignore": true,
            "defaultInstantiationMode": 1,
            "supportsModification": true
        },
        {
            "userAdded": false,
            "type": "UnityEngine.PhysicMaterial",
            "ignore": false,
            "defaultInstantiationMode": 0,
            "supportsModification": true
        },
        {
            "userAdded": false,
            "type": "UnityEngine.PhysicsMaterial2D",
            "ignore": false,
            "defaultInstantiationMode": 0,
            "supportsModification": true
        },
        {
            "userAdded": false,
            "type": "UnityEngine.Rendering.PostProcessing.PostProcessProfile",
            "ignore": false,
            "defaultInstantiationMode": 0,
            "supportsModification": true
        },
        {
            "userAdded": false,
            "type": "UnityEngine.Rendering.PostProcessing.PostProcessResources",
            "ignore": false,
            "defaultInstantiationMode": 0,
            "supportsModification": true
        },
        {
            "userAdded": false,
            "type": "UnityEngine.Rendering.VolumeProfile",
            "ignore": false,
            "defaultInstantiationMode": 0,
            "supportsModification": true
        },
        {
            "userAdded": false,
            "type": "UnityEditor.SceneAsset",
            "ignore": false,
            "defaultInstantiationMode": 0,
            "supportsModification": false
        },
        {
            "userAdded": false,
            "type": "UnityEngine.Shader",
            "ignore": true,
            "defaultInstantiationMode": 1,
            "supportsModification": true
        },
        {
            "userAdded": false,
            "type": "UnityEngine.ShaderVariantCollection",
            "ignore": true,
            "defaultInstantiationMode": 1,
            "supportsModification": true
        },
        {
            "userAdded": false,
            "type": "UnityEngine.Texture",
            "ignore": false,
            "defaultInstantiationMode": 0,
            "supportsModification": true
        },
        {
            "userAdded": false,
            "type": "UnityEngine.Texture2D",
            "ignore": false,
            "defaultInstantiationMode": 0,
            "supportsModification": true
        },
        {
            "userAdded": false,
            "type": "UnityEngine.Timeline.TimelineAsset",
            "ignore": false,
            "defaultInstantiationMode": 0,
            "supportsModification": true
        }
    ],
    "defaultDependencyTypeInfo": {
        "userAdded": false,
        "type": "<default_scene_template_dependencies>",
        "ignore": false,
        "defaultInstantiationMode": 1,
        "supportsModification": true
    },
    "newSceneOverride": 0
}
'''
'''--- README.md ---
# near-client-unity

## Author

NEAR Inc

## License

near-client-unity is available under the MIT license. See the LICENSE file for more info.

'''
'''--- Src/NearClientUnity.sln ---
﻿
Microsoft Visual Studio Solution File, Format Version 12.00
# Visual Studio Version 16
VisualStudioVersion = 16.0.29519.87
MinimumVisualStudioVersion = 10.0.40219.1
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "NearClientUnity", "NearClientUnity\NearClientUnity.csproj", "{9745A63F-3356-4EF8-938A-E0E3070D41C4}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "NearClientUnityTests", "NearClientUnityTests\NearClientUnityTests.csproj", "{3DDFA07F-FBEF-4F5C-893B-C6332EE8920F}"
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|Any CPU = Debug|Any CPU
		Release|Any CPU = Release|Any CPU
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{9745A63F-3356-4EF8-938A-E0E3070D41C4}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{9745A63F-3356-4EF8-938A-E0E3070D41C4}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{9745A63F-3356-4EF8-938A-E0E3070D41C4}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{9745A63F-3356-4EF8-938A-E0E3070D41C4}.Release|Any CPU.Build.0 = Release|Any CPU
		{3DDFA07F-FBEF-4F5C-893B-C6332EE8920F}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{3DDFA07F-FBEF-4F5C-893B-C6332EE8920F}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{3DDFA07F-FBEF-4F5C-893B-C6332EE8920F}.Release|Any CPU.ActiveCfg = Release|Any CPU
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
	GlobalSection(ExtensibilityGlobals) = postSolution
		SolutionGuid = {DE1AEA3F-9AAC-435A-A026-697EE3955128}
	EndGlobalSection
EndGlobal

'''
'''--- Src/NearClientUnity/AccessKey.cs ---
﻿using NearClientUnity.Utilities;
using System.IO;

namespace NearClientUnity
{
    public class AccessKey
    {
        public ulong Nonce { get; set; }
        public AccessKeyPermission Permission { get; set; }

        public static AccessKey FromByteArray(byte[] rawBytes)
        {
            using (var ms = new MemoryStream(rawBytes))
            {
                return FromStream(ms);
            }
        }

        public static AccessKey FromDynamicJsonObject(dynamic jsonObject)
        {
            
            if (jsonObject.permission.GetType().Name == "JValue" && jsonObject.permission.Value.GetType().Name == "String" && jsonObject.permission.Value == "FullAccess")
            {
                return new AccessKey
                {
                    Nonce = jsonObject.nonce,
                    Permission = new AccessKeyPermission
                    {
                        PermissionType = AccessKeyPermissionType.FullAccessPermission,
                        FullAccess = new FullAccessPermission()
                    }
                };
            }
            else
            {
                var rawAllowance = jsonObject.permission.FunctionCall.allowance ?? null;
                return new AccessKey
                {
                    Nonce = jsonObject.nonce,
                    Permission = new AccessKeyPermission
                    {
                        PermissionType = AccessKeyPermissionType.FunctionCallPermission,
                        FunctionCall = new FunctionCallPermission()
                        {
                            Allowance = rawAllowance == null ? UInt128.Parse(rawAllowance) : null,
                            MethodNames = jsonObject.permission.FunctionCall.method_names.ToObject<string[]>(),
                            ReceiverId = jsonObject.permission.FunctionCall.receiver_id,
                        }
                    }
                };
            }
        }

        public static AccessKey FromStream(MemoryStream stream)
        {
            return FromRawDataStream(stream);
        }

        public static AccessKey FromStream(ref MemoryStream stream)
        {
            return FromRawDataStream(stream);
        }

        public static AccessKey FullAccessKey()
        {
            var key = new AccessKey
            {
                Nonce = 0,
                Permission = new AccessKeyPermission
                {
                    PermissionType = AccessKeyPermissionType.FullAccessPermission,
                    FullAccess = new FullAccessPermission()
                }
            };
            return key;
        }

        public static AccessKey FunctionCallAccessKey(string receiverId, string[] methodNames, UInt128? allowance)
        {
            var key = new AccessKey
            {
                Nonce = 0,
                Permission = new AccessKeyPermission
                {
                    PermissionType = AccessKeyPermissionType.FunctionCallPermission,
                    FunctionCall = new FunctionCallPermission
                    {
                        ReceiverId = receiverId,
                        Allowance = allowance,
                        MethodNames = methodNames
                    }
                }
            };
            return key;
        }

        public static AccessKey FunctionCallAccessKey(string receiverId, string[] methodNames)
        {
            var key = new AccessKey
            {
                Nonce = 0,
                Permission = new AccessKeyPermission
                {
                    PermissionType = AccessKeyPermissionType.FunctionCallPermission,
                    FunctionCall = new FunctionCallPermission
                    {
                        ReceiverId = receiverId,
                        MethodNames = methodNames
                    }
                }
            };
            return key;
        }

        public byte[] ToByteArray()
        {
            using (var ms = new MemoryStream())
            {
                using (var writer = new NearBinaryWriter(ms))
                {
                    writer.Write(Nonce);
                    writer.Write(Permission.ToByteArray());
                    return ms.ToArray();
                }
            }
        }

        private static AccessKey FromRawDataStream(MemoryStream stream)
        {
            using (var reader = new NearBinaryReader(stream, true))
            {
                var nonce = reader.ReadULong();
                var permission = AccessKeyPermission.FromStream(ref stream);

                return new AccessKey()
                {
                    Nonce = nonce,
                    Permission = permission
                };
            }
        }
    }
}
'''
'''--- Src/NearClientUnity/AccessKeyPermission.cs ---
﻿using NearClientUnity.Utilities;
using System;
using System.IO;

namespace NearClientUnity
{
    public class AccessKeyPermission
    {
        public FullAccessPermission FullAccess { get; set; }
        public FunctionCallPermission FunctionCall { get; set; }
        public AccessKeyPermissionType PermissionType { get; set; }

        public static AccessKeyPermission FromByteArray(byte[] rawBytes)
        {
            using (var ms = new MemoryStream(rawBytes))
            {
                return FromStream(ms);
            }
        }

        public static AccessKeyPermission FromStream(MemoryStream stream)
        {
            return FromRawDataStream(stream);
        }

        public static AccessKeyPermission FromStream(ref MemoryStream stream)
        {
            return FromRawDataStream(stream);
        }

        public byte[] ToByteArray()
        {
            using (var ms = new MemoryStream())
            {
                using (var writer = new NearBinaryWriter(ms))
                {
                    switch (PermissionType)
                    {
                        case AccessKeyPermissionType.FullAccessPermission:
                            {
                                writer.Write((byte)AccessKeyPermissionType.FullAccessPermission);
                                writer.Write(FullAccess.ToByteArray());
                                return ms.ToArray();
                            }
                        case AccessKeyPermissionType.FunctionCallPermission:
                            {
                                writer.Write((byte)AccessKeyPermissionType.FunctionCallPermission);
                                writer.Write(FunctionCall.ToByteArray());
                                return ms.ToArray();
                            }
                        default:
                            throw new NotSupportedException("Unsupported access key permission type");
                    }
                }
            }
        }

        private static AccessKeyPermission FromRawDataStream(MemoryStream stream)
        {
            using (var reader = new NearBinaryReader(stream, true))
            {
                var permissionType = (AccessKeyPermissionType)reader.ReadByte();

                switch (permissionType)
                {
                    case AccessKeyPermissionType.FullAccessPermission:
                        {
                            var fullAccess = FullAccessPermission.FromStream(ref stream);

                            return new AccessKeyPermission()
                            {
                                PermissionType = permissionType,
                                FullAccess = fullAccess,
                            };
                        }
                    case AccessKeyPermissionType.FunctionCallPermission:
                        {
                            var functionCall = FunctionCallPermission.FromStream(ref stream);

                            return new AccessKeyPermission()
                            {
                                PermissionType = permissionType,
                                FunctionCall = functionCall,
                            };
                        }
                    default:
                        throw new NotSupportedException("Unsupported access key permission type");
                }
            }
        }
    }
}
'''
'''--- Src/NearClientUnity/AccessKeyPermissionType.cs ---
﻿namespace NearClientUnity
{
    public enum AccessKeyPermissionType
    {
        FunctionCallPermission = 0,
        FullAccessPermission = 1,
    }
}
'''
'''--- Src/NearClientUnity/Account.cs ---
﻿using NearClientUnity.Providers;
using NearClientUnity.Utilities;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Text;
using System.Threading.Tasks;

namespace NearClientUnity
{
    public class Account
    {
        // Default amount of tokens to be send with the function calls. Used to pay for the fees
        // incurred while running the contract execution. The unused amount will be refunded back to
        // the originator.
        public const int DefaultFuncCallAmount = 2000000;

        private const int TxStatusRetryNumber = 10;
        private const int TxStatusRetryWait = 500;
        private readonly string _accountId;
        private readonly Connection _connection;
        private AccessKey _accessKey;
        private bool _ready;
        private AccountState _state;

        public Account(Connection connection, string accountId)
        {
            _connection = connection;
            _accountId = accountId;
        }

        public string AccountId => _accountId;
        public Connection Connection => _connection;

        public async Task<FinalExecutionOutcome> AddKeyAsync(string publicKey, UInt128? amount,
            string methodName = "", string contractId = "")
        {
            AccessKey accessKey;
            if (string.IsNullOrEmpty(contractId) || string.IsNullOrWhiteSpace(contractId))
            {
                accessKey = AccessKey.FullAccessKey();
            }
            else
            {
                accessKey = AccessKey.FunctionCallAccessKey(contractId, (string.IsNullOrWhiteSpace(methodName) || string.IsNullOrEmpty(methodName)) ? Array.Empty<string>() : new[] { methodName }, amount);
            }
            var result = await SignAndSendTransactionAsync(_accountId, new[] { Action.AddKey(new PublicKey(publicKey), accessKey) });
            return result;
        }

        public async Task<FinalExecutionOutcome> AddKeyAsync(string publicKey,
            string methodName = "", string contractId = "")
        {
            AccessKey accessKey;
            if (string.IsNullOrEmpty(contractId) || string.IsNullOrWhiteSpace(contractId))
            {
                accessKey = AccessKey.FullAccessKey();
            }
            else
            {
                accessKey = AccessKey.FunctionCallAccessKey(contractId, (string.IsNullOrWhiteSpace(methodName) || string.IsNullOrEmpty(methodName)) ? Array.Empty<string>() : new[] { methodName });
            }
            var result = await SignAndSendTransactionAsync(_accountId, new[] { Action.AddKey(new PublicKey(publicKey), accessKey) });
            return result;
        }

        public async Task<FinalExecutionOutcome> CreateAccountAsync(string newAccountId, string publicKey,
            UInt128 amount)
        {
            var accessKey = AccessKey.FullAccessKey();
            var actions = new[]
                {Action.CreateAccount(), Action.Transfer(amount), Action.AddKey(new PublicKey(publicKey), accessKey)};
            var result = await SignAndSendTransactionAsync(newAccountId, actions);
            return result;
        }

        public async Task<FinalExecutionOutcome> CreateAccountAsync(string newAccountId, PublicKey publicKey,
            UInt128 amount)
        {
            var accessKey = AccessKey.FullAccessKey();
            var actions = new[]
                {Action.CreateAccount(), Action.Transfer(amount), Action.AddKey(publicKey, accessKey)};
            var result = await SignAndSendTransactionAsync(newAccountId, actions);
            return result;
        }

        public async Task<Account> CreateAndDeployContractAsync(string contractId, string publicKey, byte[] data,
            UInt128 amount)
        {
            var accessKey = AccessKey.FullAccessKey();
            var actions = new[]
            {
                Action.CreateAccount(), Action.Transfer(amount), Action.AddKey(new PublicKey(publicKey), accessKey),
                Action.DeployContract(data)
            };

            await SignAndSendTransactionAsync(contractId, actions);

            var contractAccount = new Account(_connection, contractId);
            return contractAccount;
        }

        public async Task<Account> CreateAndDeployContractAsync(string contractId, PublicKey publicKey, byte[] data,
            UInt128 amount)
        {
            var accessKey = AccessKey.FullAccessKey();
            var actions = new[]
            {
                Action.CreateAccount(), Action.Transfer(amount), Action.AddKey(publicKey, accessKey),
                Action.DeployContract(data)
            };

            await SignAndSendTransactionAsync(contractId, actions);

            var contractAccount = new Account(_connection, contractId);
            return contractAccount;
        }

        public async Task<FinalExecutionOutcome> DeleteAccountAsync(string beneficiaryId)
        {
            var result =
                await SignAndSendTransactionAsync(_accountId, new[] { Action.DeleteAccount(beneficiaryId) });
            return result;
        }

        public async Task<FinalExecutionOutcome> DeleteKeyAsync(string publicKey)
        {
            var result = await SignAndSendTransactionAsync(_accountId, new[] { Action.DeleteKey(new PublicKey(publicKey)) });
            return result;
        }

        public async Task<FinalExecutionOutcome> DeleteKeyAsync(PublicKey publicKey)
        {
            var result = await SignAndSendTransactionAsync(_accountId, new[] { Action.DeleteKey(publicKey) });
            return result;
        }

        public async Task<FinalExecutionOutcome> DeployContractAsync(byte[] data)
        {
            var result = await SignAndSendTransactionAsync(_accountId, new[] { Action.DeployContract(data) });
            return result;
        }

        public async Task FetchStateAsync()
        {
            _accessKey = null;

            try
            {
                var rawState = await _connection.Provider.QueryAsync($"account/{_accountId}", "");
                if (rawState == null)
                {                    
                    return;
                }
                _state = new AccountState()
                {
                    AccountId = rawState.account_id ?? null,
                    Staked = rawState.staked ?? null,
                    Locked = rawState.locked,
                    Amount = rawState.amount,
                    CodeHash = rawState.code_hash,
                    StoragePaidAt = rawState.storage_paid_at,
                    StorageUsage = rawState.storage_usage
                };
            }
            catch (Exception)
            {
                throw new Exception($"Failed to fetch state for '{_accountId}'");
            }

            var publicKey = await _connection.Signer.GetPublicKeyAsync(_accountId, _connection.NetworkId);
            if (publicKey == null) return;

            try
            {
                var rawAccessKey =
                    await _connection.Provider.QueryAsync($"access_key/{_accountId}/{publicKey.ToString()}", "");
                _accessKey = AccessKey.FromDynamicJsonObject(rawAccessKey);
            }
            catch (Exception)
            {
                throw new Exception(
                    $"Failed to fetch access key for '{_accountId}' with public key {publicKey.ToString()}");
            }
        }

        public async Task<FinalExecutionOutcome> FunctionCallAsync(string contractId, string methodName, dynamic args, ulong? gas = null, Nullable<UInt128> amount = null)
        {
            if (args == null)
            {
                args = new ExpandoObject();
            }

            var methodArgs = Encoding.UTF8.GetBytes(JsonConvert.SerializeObject(args));
            var gasValue = gas ?? DefaultFuncCallAmount;
            var amountValue = amount ?? DefaultFuncCallAmount;
            var result = await SignAndSendTransactionAsync(contractId, new Action[] { Action.FunctionCall(methodName, methodArgs, gasValue, amountValue) });
            return result;
        }

        /// Returns array of {access_key: AccessKey, public_key: PublicKey} items.
        public async Task<dynamic> GetAccessKeysAsync()
        {
            var response = await _connection.Provider.QueryAsync($"access_key/{_accountId}", "");
            return response;
        }

        public async Task<dynamic> GetAccountDetailsAsync()
        {
            // TODO: update the response value to return all the different keys, not just app keys.
            // Also if we need this function, or getAccessKeys is good enough.
            var accessKeys = await GetAccessKeysAsync();
            dynamic result = new ExpandoObject();
            var authorizedApps = new List<dynamic>();

            foreach (var key in accessKeys)
            {
                var rawPermission = key.access_key.permission;
                var isFullAccess = rawPermission.GetType().Name == "JValue" && rawPermission.Value.GetType().Name == "String" && key.access_key.permission.Value == "FullAccess";
                if (isFullAccess) continue;
                var perm = key.access_key.permission.FunctionCall;
                dynamic authorizedApp = new ExpandoObject();
                authorizedApp.ContractId = perm.receiver_id;
                authorizedApp.Amount = perm.allowance;
                authorizedApp.PublicKey = key.public_key;
                authorizedApps.Add(authorizedApp);
            }

            result.AuthorizedApps = authorizedApps.ToArray();
            result.Transactions = Array.Empty<dynamic>();
            return result;
        }

        public async Task<AccountState> GetStateAsync()
        {
            await GetReadyStatusAsync();
            return _state;
        }

        public async Task<FinalExecutionOutcome> SendMoneyAsync(string receiverId, UInt128 amount)
        {
            var result = await SignAndSendTransactionAsync(receiverId, new[] { Action.Transfer(amount) });
            return result;
        }

        public async Task<FinalExecutionOutcome> StakeAsync(string publicKey, UInt128 amount)
        {
            var result = await SignAndSendTransactionAsync(_accountId, new[] { Action.Stake(amount, new PublicKey(publicKey)) });
            return result;
        }

        public async Task<FinalExecutionOutcome> StakeAsync(PublicKey publicKey, UInt128 amount)
        {
            var result = await SignAndSendTransactionAsync(_accountId, new[] { Action.Stake(amount, publicKey) });
            return result;
        }

        public async Task<dynamic> ViewFunctionAsync(string contractId, string methodName, dynamic args)
        {
            if (args == null)
            {
                args = new ExpandoObject();
            }

            var methodArgs = Encoding.UTF8.GetBytes(JsonConvert.SerializeObject(args));
            var response = await _connection.Provider.QueryAsync($"call/{contractId}/{methodName}", Base58.Encode(methodArgs));

            var result = response;

            if (result.logs != null && result.logs.GetType() is ArraySegment<string> && result.logs.Length > 0)
            {
                PrintLogs(contractId, result.logs);
            }

            return result;
        }

        protected async Task<bool> GetReadyStatusAsync()
        {
            if (_ready) return _ready;
            try
            {
                await FetchStateAsync();
                _ready = true;
            }
            catch (Exception e)
            {
                _ready = false;
                throw e;
            }

            return _ready;
        }

        private void PrintLogs(string contractId, string[] logs)
        {
            foreach (var log in logs)
            {
                Console.WriteLine($"[{contractId}]: {log}");
            }
        }

        private async Task<FinalExecutionOutcome> RetryTxResultAsync(byte[] txHash, string accountId)
        {
            var waitTime = TxStatusRetryWait;
            for (var i = 0; i < TxStatusRetryNumber; i++)
            {
                try
                {
                    var result = await _connection.Provider.GetTxStatusAsync(txHash, accountId);
                    return result;
                }
                catch
                {
                    await Task.Delay(waitTime);
                    waitTime *= TxStatusRetryWait;
                    i++;
                }
            }

            throw new Exception(
                $"Exceeded {TxStatusRetryNumber} status check attempts for transaction ${Base58.Encode(txHash)}");
        }

        private async Task<FinalExecutionOutcome> SignAndSendTransactionAsync(string receiverId, Action[] actions)
        {
            if (!await GetReadyStatusAsync())
            {
                throw new Exception($"Can not sign transactions, no matching key pair found in Signer.");
            }
            var status = await _connection.Provider.GetStatusAsync();
            var signTransaction = await SignedTransaction.SignTransactionAsync(receiverId, (ulong)++_accessKey.Nonce, actions,
                new ByteArray32() { Buffer = Base58.Decode(status.SyncInfo.LatestBlockHash) }, _connection.Signer, _accountId, _connection.NetworkId);
            FinalExecutionOutcome result;

            try
            {
                result = await _connection.Provider.SendTransactionAsync(signTransaction.Item2);
            }
            catch (Exception e)
            {
                var parts = e.Message.Split(':');
                if (parts.Length > 1 && parts[1] == " Request timed out.")
                {
                    result = await RetryTxResultAsync(signTransaction.Item1, _accountId);
                }
                else
                {
                    throw e;
                }
            }

            var tempFlatLogs = new ExecutionOutcomeWithId[1 + result.Receipts.Length];
            tempFlatLogs[0] = result.Transaction;
            Array.Copy(result.Receipts, 0, tempFlatLogs, 1, result.Receipts.Length);

            var flatLogs = new List<string>();

            foreach (var t in tempFlatLogs)
            {
                flatLogs.AddRange(t.Outcome.Logs);
            }

            PrintLogs(signTransaction.Item2.Transaction.ReceiverId, flatLogs.ToArray());

            if (result.Status != null && result.Status.Failure != null)
            {
                throw new Exception($"Transaction {result.Transaction.Id} failed. {result.Status.Failure.ErrorMessage ?? ""}");
            }

            // ToDo: Add typed error handling
            return result;
        }
    }
}
'''
'''--- Src/NearClientUnity/AccountCreator.cs ---
﻿using NearClientUnity.Utilities;
using System.Threading.Tasks;

namespace NearClientUnity
{
    public abstract class AccountCreator
    {
        public abstract Task CreateAccountAsync(string newAccountId, PublicKey publicKey);
    }
}
'''
'''--- Src/NearClientUnity/AccountState.cs ---
﻿namespace NearClientUnity
{
    public class AccountState
    {
        public string AccountId { get; set; }
        public string Amount { get; set; }
        public string CodeHash { get; set; }
        public string Locked { get; set; }
        public string Staked { get; set; }
        public uint StoragePaidAt { get; set; }
        public uint StorageUsage { get; set; }
    }
}
'''
'''--- Src/NearClientUnity/Action.cs ---
﻿using NearClientUnity.Utilities;
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.IO;

namespace NearClientUnity
{
    public class Action
    {
        private readonly dynamic _args;
        private readonly ActionType _type;

        public Action(ActionType type, dynamic args)
        {
            _type = type;
            _args = args;
        }

        public dynamic Args => _args;

        public ActionType Type => _type;

        public static Action AddKey(PublicKey publicKey, AccessKey accessKey)
        {
            dynamic args = new ExpandoObject();
            args.PublicKey = publicKey;
            args.AccessKey = accessKey;
            return new Action(ActionType.AddKey, args);
        }

        public static Action CreateAccount()
        {
            return new Action(ActionType.CreateAccount, null);
        }

        public static Action DeleteAccount(string beneficiaryId)
        {
            dynamic args = new ExpandoObject();
            args.BeneficiaryId = beneficiaryId;
            return new Action(ActionType.DeleteAccount, args);
        }

        public static Action DeleteKey(PublicKey publicKey)
        {
            dynamic args = new ExpandoObject();
            args.PublicKey = publicKey;
            return new Action(ActionType.DeleteKey, args);
        }

        public static Action DeployContract(byte[] code)
        {
            dynamic args = new ExpandoObject();
            args.Code = code;
            return new Action(ActionType.DeployContract, args);
        }

        public static Action FromByteArray(byte[] rawBytes)
        {
            using (var ms = new MemoryStream(rawBytes))
            {
                return FromStream(ms);
            }
        }

        public static Action FromStream(MemoryStream stream)
        {
            return FromRawDataStream(stream);
        }

        public static Action FromStream(ref MemoryStream stream)
        {
            return FromRawDataStream(stream);
        }

        public static Action FunctionCall(string methodName, byte[] methodArgs, ulong? gas, UInt128 deposit)
        {
            dynamic args = new ExpandoObject();
            args.MethodName = methodName;
            args.MethodArgs = methodArgs;
            args.Gas = gas;
            args.Deposit = deposit;
            return new Action(ActionType.FunctionCall, args);
        }

        public static Action Stake(UInt128 stake, PublicKey publicKey)
        {
            dynamic args = new ExpandoObject();
            args.Stake = stake;
            args.PublicKey = publicKey;
            return new Action(ActionType.Stake, args);
        }

        public static Action Transfer(UInt128 deposit)
        {
            dynamic args = new ExpandoObject();
            args.Deposit = deposit;
            return new Action(ActionType.Transfer, args);
        }

        public byte[] ToByteArray()
        {
            using (var ms = new MemoryStream())
            {
                using (var writer = new NearBinaryWriter(ms))
                {
                    writer.Write((byte)_type);

                    switch (_type)
                    {
                        case ActionType.AddKey:
                            {
                                writer.Write(_args.PublicKey.ToByteArray());
                                writer.Write(_args.AccessKey.ToByteArray());
                                return ms.ToArray();
                            }
                        case ActionType.DeleteKey:
                            {
                                writer.Write(_args.PublicKey.ToByteArray());
                                return ms.ToArray();
                            }
                        case ActionType.CreateAccount:
                            {
                                return ms.ToArray();
                            }
                        case ActionType.DeleteAccount:
                            {
                                writer.Write((string)_args.BeneficiaryId);
                                return ms.ToArray();
                            }
                        case ActionType.DeployContract:
                            {
                                writer.Write((uint)_args.Code.Length);
                                writer.Write((byte[])_args.Code);
                                return ms.ToArray();
                            }
                        case ActionType.FunctionCall:
                            {
                                writer.Write((string)_args.MethodName);
                                writer.Write((uint)_args.MethodArgs.Length);
                                writer.Write((byte[])_args.MethodArgs);
                                writer.Write((ulong)_args.Gas);
                                writer.Write((UInt128)_args.Deposit);
                                return ms.ToArray();
                            }
                        case ActionType.Stake:
                            {
                                writer.Write((UInt128)_args.Stake);
                                writer.Write(_args.PublicKey.ToByteArray());
                                return ms.ToArray();
                            }
                        case ActionType.Transfer:
                            {
                                writer.Write((UInt128)_args.Deposit);
                                return ms.ToArray();
                            }
                        default:
                            throw new NotSupportedException("Unsupported action type");
                    }
                }
            }
        }

        private static Action FromRawDataStream(MemoryStream stream)
        {
            using (var reader = new NearBinaryReader(stream, true))
            {
                var actionType = (ActionType)reader.ReadByte();

                switch (actionType)
                {
                    case ActionType.AddKey:
                        {
                            dynamic args = new ExpandoObject();
                            args.PublicKey = PublicKey.FromStream(ref stream);
                            args.AccessKey = AccessKey.FromStream(ref stream);
                            return new Action(ActionType.AddKey, args);
                        }
                    case ActionType.DeleteKey:
                        {
                            dynamic args = new ExpandoObject();
                            args.PublicKey = PublicKey.FromStream(ref stream);
                            return new Action(ActionType.DeleteKey, args);
                        }
                    case ActionType.CreateAccount:
                        {
                            return new Action(ActionType.CreateAccount, null);
                        }
                    case ActionType.DeleteAccount:
                        {
                            dynamic args = new ExpandoObject();
                            args.BeneficiaryId = reader.ReadString();
                            return new Action(ActionType.DeleteAccount, args);
                        }
                    case ActionType.DeployContract:
                        {
                            dynamic args = new ExpandoObject();

                            var byteCount = reader.ReadUInt();

                            var code = new List<byte>();

                            for (var i = 0; i < byteCount; i++)
                            {
                                code.Add(reader.ReadByte());
                            }

                            args.Code = code.ToArray();
                            return new Action(ActionType.DeployContract, args);
                        }
                    case ActionType.FunctionCall:
                        {
                            dynamic args = new ExpandoObject();

                            var methodName = reader.ReadString();

                            var methodArgsCount = reader.ReadUInt();

                            var methodArgs = new List<byte>();

                            for (var i = 0; i < methodArgsCount; i++)
                            {
                                methodArgs.Add(reader.ReadByte());
                            }

                            var gas = reader.ReadULong();

                            var deposit = reader.ReadUInt128();

                            args.MethodName = methodName;
                            args.MethodArgs = methodArgs.ToArray();
                            args.Gas = gas;
                            args.Deposit = deposit;

                            return new Action(ActionType.FunctionCall, args);
                        }
                    case ActionType.Stake:
                        {
                            dynamic args = new ExpandoObject();

                            var stake = reader.ReadUInt128();

                            var publicKey = PublicKey.FromStream(ref stream);

                            args.Stake = stake;
                            args.PublicKey = publicKey;

                            return new Action(ActionType.Stake, args);
                        }
                    case ActionType.Transfer:
                        {
                            dynamic args = new ExpandoObject();

                            var deposit = reader.ReadUInt128();

                            args.Deposit = deposit;

                            return new Action(ActionType.Transfer, args);
                        }
                    default:
                        throw new NotSupportedException("Unsupported action type");
                }
            }
        }
    }
}
'''
'''--- Src/NearClientUnity/ActionType.cs ---
﻿namespace NearClientUnity
{
    public enum ActionType : byte
    {
        CreateAccount = 0,
        DeployContract = 1,
        FunctionCall = 2,
        Transfer = 3,
        Stake = 4,
        AddKey = 5,
        DeleteKey = 6,
        DeleteAccount = 7
    }
}
'''
'''--- Src/NearClientUnity/Connection.cs ---
﻿using NearClientUnity.KeyStores;
using NearClientUnity.Providers;
using System;

namespace NearClientUnity
{
    public class Connection
    {
        private readonly string _networkId;
        private readonly Provider _provider;
        private readonly Signer _signer;

        public Connection(string networkId, Provider provider, Signer signer)
        {
            _networkId = networkId;
            _provider = provider;
            _signer = signer;
        }

        public string NetworkId => _networkId;
        public Provider Provider => _provider;
        public Signer Signer => _signer;

        public static Connection FromConfig(ConnectionConfig config)
        {
            var provider = GetProvider(config.Provider);
            var signer = GetSigner(config.Signer);
            return new Connection(config.NetworkId, provider, signer);
        }

        private static Provider GetProvider(ProviderConfig config)
        {
            switch (config.Type)
            {
                case ProviderType.JsonRpc:
                    {
                        return new JsonRpcProvider(config.Args.Url as string);
                    }
                default:
                    throw new Exception($"Unknown provider type { config.Type }");
            }
        }

        private static Signer GetSigner(SignerConfig config)
        {
            switch (config.Type)
            {
                case SignerType.InMemory:
                    {
                        return new InMemorySigner(config.Args.KeyStore as KeyStore);
                    }
                default:
                    throw new Exception($"Unknown signer type {config.Type}");
            }
        }
    }
}
'''
'''--- Src/NearClientUnity/ConnectionConfig.cs ---
﻿namespace NearClientUnity
{
    public class ConnectionConfig
    {
        public string NetworkId { get; set; }
        public ProviderConfig Provider { get; set; }
        public SignerConfig Signer { get; set; }
    }
}
'''
'''--- Src/NearClientUnity/ContractNear.cs ---
﻿using NearClientUnity.Providers;
using NearClientUnity.Utilities;
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Text;
using System.Threading.Tasks;

namespace NearClientUnity
{
    public class ContractNear : DynamicObject, IDynamicMetaObjectProvider
    {
        private readonly Account _account;
        private readonly string _contractId;
        private readonly string[] _availableChangeMethods;
        private readonly string[] _availableViewMethods;

        public ContractNear(Account account, string contractId, ContractOptions options)
        {
            _account = account;
            _contractId = contractId;
            _availableViewMethods = options.viewMethods as string[];
            _availableChangeMethods = options.changeMethods as string[];
        }

        public async Task<dynamic> Change(string methodName, dynamic args, ulong? gas = null, Nullable<UInt128> amount = null)
        {
            var rawResult = await _account.FunctionCallAsync(_contractId, methodName, args, gas, amount);
            return Provider.GetTransactionLastResult(rawResult);
        }

        public override bool TryInvokeMember(InvokeMemberBinder binder, object[] args, out dynamic result)
        {
            if (Array.Exists(_availableChangeMethods, changeMethod => changeMethod == binder.Name))
            {
                if (args.Length == 0)
                {
                    dynamic changeMethodnArgs = new ExpandoObject();
                    result = Change(binder.Name, changeMethodnArgs);
                    return true;
                }
                if (args.Length == 1 && args[0].GetType() == typeof(ExpandoObject))
                {
                    result = Change(binder.Name, args[0]);
                    return true;
                }
                else if (args.Length == 2 && args[0].GetType() == typeof(ExpandoObject) && args[1].GetType() == typeof(ulong))
                {
                    result = Change(binder.Name, args[0], (ulong)args[1]);
                    return true;
                }
                else if (args.Length == 2 && args[0].GetType() == typeof(ExpandoObject) && args[1].GetType() == typeof(UInt128))
                {
                    result = Change(binder.Name, args[0], (Nullable<ulong>)null, (UInt128)args[1]);
                    return true;
                }
                else if (args.Length == 3 && args[0].GetType() == typeof(ExpandoObject) && args[1].GetType() == typeof(ulong) && args[2].GetType() == typeof(UInt128))
                {
                    result = Change(binder.Name, args[0], (ulong)args[1], (UInt128)args[2]);
                    return true;
                }
                else
                {
                    result = null;
                    return false;
                }
            }
            else if (Array.Exists(_availableViewMethods, viewMethod => viewMethod == binder.Name))
            {
                if (args.Length == 0)
                {
                    dynamic viewMethodnArgs = new ExpandoObject();
                    result = View(binder.Name, viewMethodnArgs);
                    return true;
                }
                if (args.Length == 1 && args[0].GetType() == typeof(ExpandoObject))
                {
                    result = View(binder.Name, args[0]);
                    return true;
                }
                else
                {
                    result = null;
                    return false;
                }
            }
            else
            {
                result = null;
                return false;
            }
        }

        public async Task<dynamic> View(string methodName, dynamic args)
        {
            var rawResult = await _account.ViewFunctionAsync(_contractId, methodName, args);
            dynamic data = new ExpandoObject();
            var logs = new List<string>();
            var result = new List<byte>();
            foreach (var log in rawResult.logs)
            {
                logs.Add((string)log);
            }
            foreach (var item in rawResult.result)
            {
                result.Add((byte)item);
            }
            data.logs = logs.ToArray();
            data.result = Encoding.UTF8.GetString(result.ToArray()).Trim('"');
            return data;
        }
    }
}
'''
'''--- Src/NearClientUnity/ContractOptions.cs ---
﻿namespace NearClientUnity
{
    public class ContractOptions
    {
        public string[] changeMethods { get; set; }
        public string sender { get; set; }
        public string[] viewMethods { get; set; }
    }
}
'''
'''--- Src/NearClientUnity/FullAccessPermission.cs ---
﻿using NearClientUnity.Utilities;
using System.IO;

namespace NearClientUnity
{
    public class FullAccessPermission
    {
        public static FullAccessPermission FromByteArray(byte[] rawBytes)
        {
            using (var ms = new MemoryStream(rawBytes))
            {
                return FromStream(ms);
            }
        }

        public static FullAccessPermission FromStream(MemoryStream stream)
        {
            return FromRawDataStream(stream);
        }

        public static FullAccessPermission FromStream(ref MemoryStream stream)
        {
            return FromRawDataStream(stream);
        }

        public byte[] ToByteArray()
        {
            using (var ms = new MemoryStream())
            {
                using (var writer = new NearBinaryWriter(ms))
                {
                    return ms.ToArray();
                }
            }
        }

        private static FullAccessPermission FromRawDataStream(MemoryStream stream)
        {
            using (var reader = new NearBinaryReader(stream, true))
            {
                return new FullAccessPermission();
            }
        }
    }
}
'''
'''--- Src/NearClientUnity/FunctionCallPermission.cs ---
﻿using NearClientUnity.Utilities;
using System.Collections.Generic;
using System.IO;

namespace NearClientUnity
{
    public class FunctionCallPermission
    {
        public UInt128? Allowance { get; set; }
        public string[] MethodNames { get; set; }
        public string ReceiverId { get; set; }

        public static FunctionCallPermission FromByteArray(byte[] rawBytes)
        {
            using (var ms = new MemoryStream(rawBytes))
            {
                return FromStream(ms);
            }
        }

        public static FunctionCallPermission FromStream(MemoryStream stream)
        {
            return FromRawDataStream(stream);
        }

        public static FunctionCallPermission FromStream(ref MemoryStream stream)
        {
            return FromRawDataStream(stream);
        }

        public byte[] ToByteArray()
        {
            using (var ms = new MemoryStream())
            {
                using (var writer = new NearBinaryWriter(ms))
                {
                    if (Allowance == null)
                    {
                        writer.Write((byte)0);
                    }
                    else
                    {
                        writer.Write((byte)1);
                        writer.Write((UInt128)Allowance);
                    }

                    writer.Write(ReceiverId);

                    writer.Write((uint)MethodNames.Length);

                    foreach (var mn in MethodNames)
                    {
                        writer.Write(mn);
                    }

                    return ms.ToArray();
                }
            }
        }

        private static FunctionCallPermission FromRawDataStream(MemoryStream stream)
        {
            using (var reader = new NearBinaryReader(stream, true))
            {
                UInt128? allowance = null;

                var allowanceFlag = reader.ReadByte();

                if ((int)allowanceFlag == 1) allowance = reader.ReadUInt128();

                var receiverId = reader.ReadString();

                var methodNamesCount = reader.ReadUInt();

                var methodNames = new List<string>();

                for (var i = 0; i < methodNamesCount; i++)
                {
                    methodNames.Add(reader.ReadString());
                }

                return new FunctionCallPermission()
                {
                    Allowance = allowance,
                    ReceiverId = receiverId,
                    MethodNames = methodNames.ToArray()
                };
            }
        }
    }
}
'''
'''--- Src/NearClientUnity/IExternalAuthService.cs ---
﻿namespace NearClientUnity
{
    public interface IExternalAuthService
    {
        bool OpenUrl(string url);
    }
}
'''
'''--- Src/NearClientUnity/IExternalAuthStorage.cs ---
﻿namespace NearClientUnity
{
    public interface IExternalAuthStorage
    {
        bool HasKey(string key);
        void Add(string key, string value);
        string GetValue(string key);
        void DeleteKey(string key);
    }
}
'''
'''--- Src/NearClientUnity/InMemorySigner.cs ---
﻿using NearClientUnity.KeyStores;
using NearClientUnity.Utilities;
using System;
using System.Threading.Tasks;

namespace NearClientUnity
{
    public class InMemorySigner : Signer
    {
        private readonly KeyStore _keyStore;

        public InMemorySigner(KeyStore keyStore)
        {
            _keyStore = keyStore;
        }

        public KeyStore KeyStore => _keyStore;

        public override async Task<PublicKey> CreateKeyAsync(string accountId, string networkId = "")
        {
            var keyPair = KeyPair.FromRandom("ed25519");
            await _keyStore.SetKeyAsync(networkId, accountId, keyPair);
            return keyPair.GetPublicKey();
        }

        public override async Task<PublicKey> GetPublicKeyAsync(string accountId = "", string networkId = "")
        {
            var keyPair = await _keyStore.GetKeyAsync(networkId, accountId);
            return keyPair?.GetPublicKey();
        }

        public override async Task<Utilities.Signature> SignHashAsync(byte[] hash, string accountId = "", string networkId = "")
        {
            if (string.IsNullOrEmpty(accountId) || string.IsNullOrWhiteSpace(accountId))
            {
                throw new ArgumentException("InMemorySigner requires provided account id");
            }
            var keyPair = await _keyStore.GetKeyAsync(networkId, accountId);
            if (keyPair == null)
            {
                throw new InMemorySignerException($"Key for { accountId} not found in { networkId}");
            }
            return keyPair.Sign(hash);
        }
    }

    public class InMemorySignerException : Exception
    {
        public InMemorySignerException()
        {
        }

        public InMemorySignerException(string name)
            : base(name)
        {
        }
    }
}
'''
'''--- Src/NearClientUnity/KeyStores/AccountInfo.cs ---
﻿namespace NearClientUnity.KeyStores
{
    public class AccountInfo
    {
        public string AccountId { get; set; }
        public string PrivateKey { get; set; }
    }
}
'''
'''--- Src/NearClientUnity/KeyStores/InMemoryKeyStore.cs ---
﻿using NearClientUnity.Utilities;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace NearClientUnity.KeyStores
{
    public class InMemoryKeyStore : KeyStore
    {
        private readonly Dictionary<string, string> _keys;

        public InMemoryKeyStore()
        {
            _keys = new Dictionary<string, string>();
        }

        public override async Task ClearAsync()
        {
            await Task.Factory.StartNew(() => { _keys.Clear(); });
        }

        public override async Task<string[]> GetAccountsAsync(string networkId)
        {
            return await Task.Factory.StartNew(() =>
            {
                var allAccounts = new List<string>();
                var keys = _keys.Keys.ToArray();
                if (keys.Length == 0) return new string[0];
                foreach (var key in keys)
                {
                    var parts = key.Split(':');
                    if (parts[parts.Length - 1] != networkId) continue;
                    Array.Resize(ref parts, parts.Length - 1);
                    allAccounts.Add(string.Join(":", parts));
                }
                var accounts = new HashSet<string>(allAccounts).ToArray();
                return accounts;
            });
        }

        public override async Task<KeyPair> GetKeyAsync(string networkId, string accountId)
        {
            return await Task.Factory.StartNew(() =>
            {
                try
                {
                    var value = _keys[$"{accountId}:{networkId}"];
                    var result = KeyPair.FromString(value);
                    return result;
                }
                catch (KeyNotFoundException)
                {
                    return null;
                }
            });
        }

        public override async Task<string[]> GetNetworksAsync()
        {
            return await Task.Factory.StartNew(() =>
            {
                var keys = _keys.Keys.ToArray();
                if (keys.Length == 0) return new string[0];
                var allNetworks = keys.Select(key => key.Split(':')[1]).ToList();
                var networks = new HashSet<string>(allNetworks).ToArray();
                return networks;
            });
        }

        public override async Task RemoveKeyAsync(string networkId, string accountId)
        {
            await Task.Factory.StartNew(() => { _keys.Remove($"{accountId}:{networkId}"); });
        }

        public override async Task SetKeyAsync(string networkId, string accountId, KeyPair keyPair)
        {
            await Task.Factory.StartNew(() =>
            {
                _keys[$"{accountId}:{networkId}"] = keyPair.ToString();
            });
        }
    }
}
'''
'''--- Src/NearClientUnity/KeyStores/KeyStore.cs ---
﻿using NearClientUnity.Utilities;
using System.Threading.Tasks;

namespace NearClientUnity.KeyStores
{
    public abstract class KeyStore
    {
        public abstract Task ClearAsync();

        public abstract Task<string[]> GetAccountsAsync(string networkId);

        public abstract Task<KeyPair> GetKeyAsync(string networkId, string accountId);

        public abstract Task<string[]> GetNetworksAsync();

        public abstract Task RemoveKeyAsync(string networkId, string accountId);

        public abstract Task SetKeyAsync(string networkId, string accountId, KeyPair keyPair);
    }
}
'''
'''--- Src/NearClientUnity/KeyStores/MergeKeyStore.cs ---
﻿using NearClientUnity.Utilities;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace NearClientUnity.KeyStores
{
    public class MergeKeyStore : KeyStore
    {
        private KeyStore[] _keyStores;

        public MergeKeyStore(KeyStore[] keyStores)
        {
            _keyStores = keyStores;
        }

        public KeyStore[] KeyStores => _keyStores;
        public KeyStore[] Stores => _keyStores;

        public override async Task ClearAsync()
        {
            foreach (var keyStore in _keyStores)
            {
                await keyStore.ClearAsync();
            }
        }

        public override async Task<string[]> GetAccountsAsync(string networkId)
        {
            var result = new HashSet<string>();
            foreach (var keyStore in _keyStores)
            {
                foreach (var account in await keyStore.GetAccountsAsync(networkId))
                {
                    result.Add(account);
                }
            }

            return result.ToArray();
        }

        public override async Task<KeyPair> GetKeyAsync(string networkId, string accountId)
        {
            foreach (var keyStore in _keyStores)
            {
                var keyPair = await keyStore.GetKeyAsync(networkId, accountId);
                if (keyPair != null) return keyPair;
            }

            return null;
        }

        public override async Task<string[]> GetNetworksAsync()
        {
            var result = new HashSet<string>();
            foreach (var keyStore in _keyStores)
            {
                foreach (var network in await keyStore.GetNetworksAsync())
                {
                    result.Add(network);
                }
            }

            return result.ToArray();
        }

        public override async Task RemoveKeyAsync(string networkId, string accountId)
        {
            foreach (var keyStore in _keyStores)
            {
                await keyStore.RemoveKeyAsync(networkId, accountId);
            }
        }

        public override async Task SetKeyAsync(string networkId, string accountId, KeyPair keyPair)
        {
            await _keyStores[0].SetKeyAsync(networkId, accountId, keyPair);
        }
    }
}
'''
'''--- Src/NearClientUnity/KeyStores/UnencryptedFileSystemKeyStore.cs ---
﻿using NearClientUnity.Utilities;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace NearClientUnity.KeyStores
{
    public class UnencryptedFileSystemKeyStore : KeyStore
    {
        private readonly string _keyDir;

        public UnencryptedFileSystemKeyStore(string keyDir)
        {
            _keyDir = keyDir;
        }

        public static async Task EnsureDir(string path)
        {
            await Task.Run(() => Directory.CreateDirectory(path));
        }

        public static async Task<dynamic> LoadJsonFile(string path)
        {
            using (var sourceStream = new FileStream(path,
                FileMode.Open, FileAccess.Read, FileShare.Read,
                bufferSize: 4096, useAsync: true))
            {
                var sb = new StringBuilder();

                var buffer = new byte[0x1000];
                int numRead;
                while ((numRead = await sourceStream.ReadAsync(buffer, 0, buffer.Length)) != 0)
                {
                    var text = Encoding.Unicode.GetString(buffer, 0, numRead);
                    sb.Append(text);
                }

                dynamic result = JObject.Parse(sb.ToString());
                return result;
            }
        }

        public static async Task<dynamic[]> ReadKeyFile(string path)
        {
            var accountInfo = await LoadJsonFile(path);
            string privateKey = accountInfo.PrivateKey;
            if (privateKey == null && accountInfo.SecretKey != null) privateKey = accountInfo.SecretKey;
            return new dynamic[] { accountInfo.AccountId, KeyPair.FromString(privateKey) };
        }

        public override async Task ClearAsync()
        {
            foreach (var network in await GetNetworksAsync())
            {
                foreach (var account in await GetAccountsAsync(network))
                {
                    await RemoveKeyAsync(network, account);
                }

                await RemoveNetworkAsync(network);
            }
        }

        public override async Task<string[]> GetAccountsAsync(string networkId)
        {
            return await Task.Factory.StartNew(() =>
            {
                if (!Directory.Exists($"{_keyDir}/{networkId}")) return new string[0];
                return Directory.GetFiles($"{_keyDir}/{networkId}", "*.json")
                        .Select(Path.GetFileNameWithoutExtension)
                        .ToArray();
            });
        }

        public override async Task<KeyPair> GetKeyAsync(string networkId, string accountId)
        {
            if (!File.Exists(GetKeyFilePath(networkId, accountId))) return null;
            var accountKeyPair = await ReadKeyFile(GetKeyFilePath(networkId, accountId));
            return accountKeyPair[1];
        }

        public override async Task<string[]> GetNetworksAsync()
        {
            return await Task.Factory.StartNew(() =>
            {
                if (!Directory.Exists(_keyDir)) return new string[0];
                var directory = new DirectoryInfo(_keyDir);
                var networks = directory.GetDirectories().Select(subDirectory => subDirectory.Name).ToList();
                return networks.ToArray();
            });
        }

        public override async Task RemoveKeyAsync(string networkId, string accountId)
        {
            var filePath = GetKeyFilePath(networkId, accountId);
            if (File.Exists(filePath))
            {
                await Task.Factory.StartNew(() =>
                {
                    File.Delete(filePath);
                });
            }
        }

        public async Task RemoveNetworkAsync(string networkId)
        {
            var dirPath = GetNetworkDirPath(networkId);
            if (Directory.Exists(dirPath))
            {
                await Task.Factory.StartNew(() =>
                {
                    Directory.Delete(dirPath);
                });
            }
        }

        public override async Task SetKeyAsync(string networkId, string accountId, KeyPair keyPair)
        {
            await EnsureDir($"{_keyDir}/{networkId}");
            var content = new AccountInfo() { AccountId = accountId, PrivateKey = keyPair.ToString() };
            var jsonString = JsonConvert.SerializeObject(content);
            var encodedJsonString = Encoding.Unicode.GetBytes(jsonString);

            using (var sourceStream = new FileStream(GetKeyFilePath(networkId, accountId),
                FileMode.Append, FileAccess.Write, FileShare.None,
                bufferSize: 4096, useAsync: true))
            {
                await sourceStream.WriteAsync(encodedJsonString, 0, encodedJsonString.Length);
            };
        }

        private string GetKeyFilePath(string networkId, string accountId)
        {
            return $"{_keyDir}/{networkId}/{accountId}.json";
        }

        private string GetNetworkDirPath(string networkId)
        {
            return $"{_keyDir}/{networkId}/";
        }
    }
}
'''
'''--- Src/NearClientUnity/LocalAccountCreator.cs ---
﻿using NearClientUnity.Utilities;
using System.Threading.Tasks;

namespace NearClientUnity
{
    public class LocalAccountCreator : AccountCreator
    {
        private readonly UInt128 _initialBalance;
        private readonly Account _masterAccount;

        public LocalAccountCreator(Account masterAccount, UInt128 initialBalance)
        {
            _masterAccount = masterAccount;
            _initialBalance = initialBalance;
        }

        public override async Task CreateAccountAsync(string newAccountId, PublicKey publicKey)
        {
            await _masterAccount.CreateAccountAsync(newAccountId, publicKey, _initialBalance);
        }
    }
}
'''
'''--- Src/NearClientUnity/Near.cs ---
﻿using NearClientUnity.KeyStores;
using NearClientUnity.Utilities;
using System;
using System.Dynamic;
using System.Threading.Tasks;

namespace NearClientUnity
{
    public class Near
    {
        private readonly AccountCreator _accountCreator;
        private readonly NearConfig _config;
        private readonly Connection _connection;

        public Near(NearConfig config)
        {
            _config = config;

            dynamic providerArgs = new ExpandoObject();
            providerArgs.Url = config.NodeUrl;
            dynamic signerArgs = new ExpandoObject();
            signerArgs.KeyStore = config.KeyStore;
            var connectionConfig = new ConnectionConfig()
            {
                NetworkId = config.NetworkId,
                Provider = new ProviderConfig()
                {
                    Type = config.ProviderType,
                    Args = providerArgs
                },
                Signer = new SignerConfig()
                {
                    Type = config.SignerType,
                    Args = signerArgs
                }
            };
            _connection = Connection.FromConfig(connectionConfig);

            if (config.MasterAccount != null)
            {
                // TODO: figure out better way of specifiying initial balance.
                var initialBalance = config.InitialBalance > 0
                    ? config.InitialBalance
                    : new UInt128(1000 * 1000) * new UInt128(1000 * 1000);
                _accountCreator =
                    new LocalAccountCreator(new Account(_connection, config.MasterAccount), initialBalance);
            }
            else if (config.HelperUrl != null)
            {
                _accountCreator = new UrlAccountCreator(_connection, config.HelperUrl);
            }
            else
            {
                _accountCreator = null;
            }
        }

        public AccountCreator AccountCreator => _accountCreator;
        public NearConfig Config => _config;
        public Connection Connection => _connection;

        public static async Task<Near> ConnectAsync(dynamic config)
        {
            // Try to find extra key in `KeyPath` if provided.
            if (config.KeyPath == null) return new Near(config);
            try
            {
                var accountKeyFile = await UnencryptedFileSystemKeyStore.ReadKeyFile(config.keyPath);
                if (accountKeyFile[0] != null)
                {
                    // TODO: Only load key if network ID matches
                    var keyPair = accountKeyFile[1];
                    var keyPathStore = new InMemoryKeyStore();
                    await keyPathStore.SetKeyAsync(config.NetworkId, accountKeyFile[0], keyPair);
                    if (config.MasterAccount == null)
                    {
                        config.MasterAccount = accountKeyFile[0];
                    }

                    config.KeyStore = new MergeKeyStore(new KeyStore[] { config.KeyStore, keyPathStore });
                }
            }
            catch (Exception error)
            {
                Console.WriteLine($"Failed to load master account key from {config.KeyPath}: {error}");
            }

            return new Near(config);
        }

        public async Task<Account> AccountAsync(string accountId)
        {
            var account = new Account(_connection, accountId);
            await account.FetchStateAsync();
            return account;
        }

        public async Task<Account> CreateAccountAsync(string accountId, PublicKey publicKey)
        {
            if (_accountCreator == null)
            {
                throw new Exception(
                    "Must specify account creator, either via masterAccount or helperUrl configuration settings.");
            }

            await _accountCreator.CreateAccountAsync(accountId, publicKey);
            return new Account(_connection, accountId);
        }
    }
}
'''
'''--- Src/NearClientUnity/NearConfig.cs ---
﻿using NearClientUnity.KeyStores;
using NearClientUnity.Utilities;

namespace NearClientUnity
{
    public class NearConfig : ConnectionConfig
    {
        public string ContractName { get; set; }
        public string HelperUrl { get; set; }
        public UInt128 InitialBalance { get; set; }
        public string KeyPath { get; set; }
        public KeyStore KeyStore { get; set; }
        public string MasterAccount { get; set; }
        public string NodeUrl { get; set; }
        public ProviderType ProviderType { get; set; }
        public SignerType SignerType { get; set; }
        public string WalletUrl { get; set; }
    }
}
'''
'''--- Src/NearClientUnity/NearSignature.cs ---
﻿using NearClientUnity.Utilities;
using System;
using System.IO;

namespace NearClientUnity
{
    public class NearSignature
    {
        private ByteArray64 _data;
        private readonly KeyType _keyType;

        public NearSignature(byte[] signature)
        {
            _keyType = KeyType.Ed25519;
            _data = new ByteArray64() { Buffer = signature };
        }

        public NearSignature(KeyType keyType, ByteArray64 data)
        {
            _keyType = KeyType.Ed25519;
            _data = data;
        }

        public ByteArray64 Data => _data;

        public KeyType KeyType => _keyType;

        public static NearSignature FromByteArray(byte[] rawBytes)
        {
            if (rawBytes.Length != 65) throw new ArgumentException("Invalid raw bytes for near signature");
            using (var ms = new MemoryStream(rawBytes))
            {
                return FromStream(ms);
            }
        }

        public static NearSignature FromStream(MemoryStream stream)
        {
            return FromRawDataStream(stream);
        }

        public static NearSignature FromStream(ref MemoryStream stream)
        {
            return FromRawDataStream(stream);
        }

        public byte[] ToByteArray()
        {
            using (var ms = new MemoryStream())
            {
                using (var writer = new NearBinaryWriter(ms))
                {
                    writer.Write((byte)_keyType);
                    writer.Write(_data.Buffer);
                    return ms.ToArray();
                }
            }
        }

        private static NearSignature FromRawDataStream(MemoryStream stream)
        {
            using (var reader = new NearBinaryReader(stream, true))
            {
                KeyType keyType;
                switch ((int)reader.ReadByte())
                {
                    case 0:
                        {
                            keyType = KeyType.Ed25519;
                            break;
                        }
                    default:
                        {
                            throw new NotSupportedException("Invalid key type in raw bytes for public key");
                        }
                }

                var data = new ByteArray64
                {
                    Buffer = reader.ReadBytes(64)
                };

                return new NearSignature(keyType, data);
            }
        }
    }
}
'''
'''--- Src/NearClientUnity/Properties/AssemblyInfo.cs ---
﻿using System.Reflection;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following set of attributes.
// Change these attribute values to modify the information associated with an assembly.
[assembly: AssemblyTitle("NearClientUnity")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("Near Inc")]
[assembly: AssemblyProduct("NearClientUnity")]
[assembly: AssemblyCopyright("Copyright ©  2019")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible to COM components. If
// you need to access a type in this assembly from COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("9745a63f-3356-4ef8-938a-e0e3070d41c4")]

// Version information for an assembly consists of the following four values:
//
// Major Version Minor Version Build Number Revision
//
// You can specify all the values or you can default the Build and Revision Numbers by using the '*'
// as shown below: [assembly: AssemblyVersion("1.0.*")]
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]
'''
'''--- Src/NearClientUnity/ProviderConfig.cs ---
﻿namespace NearClientUnity
{
    public class ProviderConfig
    {
        public dynamic Args { get; set; }
        public ProviderType Type { get; set; }
    }
}
'''
'''--- Src/NearClientUnity/ProviderType.cs ---
﻿namespace NearClientUnity
{
    public enum ProviderType
    {
        JsonRpc
    }
}
'''
'''--- Src/NearClientUnity/Providers/BlockHeader.cs ---
﻿namespace NearClientUnity.Providers
{
    public abstract class BlockHeader
    {
        public abstract string ApprovalMask { get; set; }
        public abstract string ApprovalSigs { get; set; }
        public abstract string Hash { get; set; }
        public abstract int Height { get; set; }
        public abstract string PrevHash { get; set; }
        public abstract string PrevStateRoot { get; set; }
        public abstract int TimeStamp { get; set; }
        public abstract TotalWeight TotalWeight { get; set; }
        public abstract string TxRoot { get; set; }
    }
}
'''
'''--- Src/NearClientUnity/Providers/BlockResult.cs ---
﻿namespace NearClientUnity.Providers
{
    public abstract class BlockResult
    {
        public abstract BlockHeader Header { get; set; }
        public abstract Transaction[] Transactions { get; set; }
    }
}
'''
'''--- Src/NearClientUnity/Providers/ChunkHeader.cs ---
﻿namespace NearClientUnity.Providers
{
    public abstract class ChunkHeader
    {
        public abstract string BalanceBurnt { get; set; }
        public abstract string ChunkHash { get; set; }
        public abstract int EncodedLength { get; set; }
        public abstract string EncodedMerkleRoot { get; set; }
        public abstract int GasLimit { get; set; }
        public abstract int GasUsed { get; set; }
        public abstract int HeightCreated { get; set; }
        public abstract int HeightIncluded { get; set; }
        public abstract string OutgoingReceiptsRoot { get; set; }
        public abstract string PrevBlockHash { get; set; }
        public abstract int PrevStateNumParts { get; set; }
        public abstract string PrevStateRootHash { get; set; }
        public abstract string RentPaid { get; set; }
        public abstract int ShardId { get; set; }
        public abstract string Signature { get; set; }
        public abstract string TxRoot { get; set; }
        public abstract dynamic[] ValidatorProposals { get; set; }
        public abstract string ValidatorReward { get; set; }
    }
}
'''
'''--- Src/NearClientUnity/Providers/ChunkResult.cs ---
﻿namespace NearClientUnity.Providers
{
    public abstract class ChunkResult
    {
        public abstract ChunkHeader Header { get; set; }
        public abstract dynamic[] Receipts { get; set; }
        public abstract Transaction[] Transactions { get; set; }
    }
}
'''
'''--- Src/NearClientUnity/Providers/ExecutionError.cs ---
﻿namespace NearClientUnity.Providers
{
    public class ExecutionError
    {
        public string ErrorMessage { get; set; }
        public string ErrorType { get; set; }

        public static ExecutionError FromDynamicJsonObject(dynamic jsonObject)
        {
            var result = new ExecutionError()
            {
                ErrorMessage = jsonObject.error_message,
                ErrorType = jsonObject.error_type
            };
            return result;
        }
    }
}
'''
'''--- Src/NearClientUnity/Providers/ExecutionOutcome.cs ---
﻿using System.Collections.Generic;

namespace NearClientUnity.Providers
{
    public class ExecutionOutcome
    {
        public int GasBurnt { get; set; }
        public string[] Logs { get; set; }
        public string[] ReceiptIds { get; set; }
        public ExecutionStatus Status { get; set; }
        public ExecutionStatusBasic StatusBasic { get; set; }

        public static ExecutionOutcome FromDynamicJsonObject(dynamic jsonObject)
        {
            var logs = new List<string>();
            foreach (var log in jsonObject.logs)
            {
                logs.Add((string)log);
            }
            var receiptIds = new List<string>();
            foreach (var receipt in jsonObject.receipt_ids)
            {
                receiptIds.Add((string)receipt);
            }
            var result = new ExecutionOutcome()
            {
                GasBurnt = jsonObject.gas_burnt,
                Logs = logs.ToArray(),
                ReceiptIds = receiptIds.ToArray(),
                Status = ExecutionStatus.FromDynamicJsonObject(jsonObject.status),
            };
            return result;
        }
    }
}
'''
'''--- Src/NearClientUnity/Providers/ExecutionOutcomeWithId.cs ---
﻿namespace NearClientUnity.Providers
{
    public class ExecutionOutcomeWithId
    {
        public string Id { get; set; }
        public ExecutionOutcome Outcome { get; set; }

        public static ExecutionOutcomeWithId FromDynamicJsonObject(dynamic jsonObject)
        {
            var result = new ExecutionOutcomeWithId()
            {
                Id = jsonObject.id,
                Outcome = ExecutionOutcome.FromDynamicJsonObject(jsonObject.outcome)
            };
            return result;
        }
    }
}
'''
'''--- Src/NearClientUnity/Providers/ExecutionStatus.cs ---
﻿namespace NearClientUnity.Providers
{
    public class ExecutionStatus
    {
        public ExecutionError Failure { get; set; }
        public string SuccessReceiptId { get; set; }
        public string SuccessValue { get; set; }

        public static ExecutionStatus FromDynamicJsonObject(dynamic jsonObject)
        {
            if (jsonObject.ToString() == "Unknown")
            {
                return new ExecutionStatus();
            }

            var isFailure = jsonObject.Failure != null;

            if (isFailure)
            {
                return new ExecutionStatus()
                {
                    Failure = ExecutionError.FromDynamicJsonObject(jsonObject.Failure),
                };
            }

            return new ExecutionStatus()
            {
                SuccessReceiptId = jsonObject.SuccessReceiptId,
                SuccessValue = jsonObject.SuccessValue,
            };
        }
    }
}
'''
'''--- Src/NearClientUnity/Providers/ExecutionStatusBasic.cs ---
﻿namespace NearClientUnity.Providers
{
    public abstract class ExecutionStatusBasic
    {
        public const string Failure = "Failure";
        public const string NotStarted = "NotStarted";
        public const string Started = "Started";
    }
}
'''
'''--- Src/NearClientUnity/Providers/FinalExecutionOutcome.cs ---
﻿using System.Collections.Generic;

namespace NearClientUnity.Providers
{
    public class FinalExecutionOutcome
    {
        public ExecutionOutcomeWithId[] Receipts { get; set; }
        public FinalExecutionStatus Status { get; set; }
        public FinalExecutionStatusBasic StatusBasic { get; set; }
        public ExecutionOutcomeWithId Transaction { get; set; }

        public static FinalExecutionOutcome FromDynamicJsonObject(dynamic jsonObject)
        {
            var receipts = new List<ExecutionOutcomeWithId>();
            foreach (var receipt in jsonObject.receipts)
            {
                receipts.Add(ExecutionOutcomeWithId.FromDynamicJsonObject(receipt));
            }
            var result = new FinalExecutionOutcome()
            {
                Receipts = receipts.ToArray(),
                Status = FinalExecutionStatus.FromDynamicJsonObject(jsonObject.status),
                Transaction = ExecutionOutcomeWithId.FromDynamicJsonObject(jsonObject.transaction)
            };
            return result;
        }
    }
}
'''
'''--- Src/NearClientUnity/Providers/FinalExecutionStatus.cs ---
﻿namespace NearClientUnity.Providers
{
    public class FinalExecutionStatus
    {
        public ExecutionError Failure { get; set; }
        public string SuccessValue { get; set; }

        public static FinalExecutionStatus FromDynamicJsonObject(dynamic jsonObject)
        {
            var isFailure = jsonObject.Failure != null;
            if (isFailure)
            {
                return new FinalExecutionStatus()
                {
                    Failure = ExecutionError.FromDynamicJsonObject(jsonObject.Failure),
                };
            }
            return new FinalExecutionStatus()
            {
                SuccessValue = jsonObject.SuccessValue
            };
        }
    }
}
'''
'''--- Src/NearClientUnity/Providers/FinalExecutionStatusBasic.cs ---
﻿namespace NearClientUnity.Providers
{
    public abstract class FinalExecutionStatusBasic
    {
        public const string Failure = "Failure";
        public const string NotStarted = "NotStarted";
        public const string Started = "Started";
    }
}
'''
'''--- Src/NearClientUnity/Providers/JsonRpcProvider.cs ---
﻿using NearClientUnity.Utilities;
using Newtonsoft.Json;
using System;
using System.Dynamic;
using System.Threading.Tasks;
using System.Web;

namespace NearClientUnity.Providers
{
    public class JsonRpcProvider : Provider
    {
        private readonly ConnectionInfo _connection;

        public JsonRpcProvider(string url)
        {
            var connectionInfo = new ConnectionInfo
            {
                Url = url
            };
            _connection = connectionInfo;
        }

        private int _id { get; set; } = 123;

        public override async Task<BlockResult> GetBlockAsync(int blockId)
        {
            var parameters = new dynamic[1];
            parameters[0] = blockId;
            var result = await SendJsonRpc("block", parameters);
            return result;
        }

        public override async Task<ChunkResult> GetChunkAsync(string chunkId)
        {
            var parameters = new dynamic[1];
            parameters[0] = chunkId;
            var result = await SendJsonRpc("chunk", parameters);
            return result;
        }

        public override Task<ChunkResult> GetChunkAsync(int[,] chunkId)
        {
            throw new NotImplementedException();
        }

        public override INetwork GetNetwork()
        {
            INetwork result = null;

            result.Name = "test";
            result.ChainId = "test";

            return result;
        }

        public override async Task<NodeStatusResult> GetStatusAsync()
        {
            var rawStatusResul = await SendJsonRpc("status", new dynamic[0]);
            var result = NodeStatusResult.FromDynamicJsonObject(rawStatusResul);
            return result;
        }

        public override async Task<FinalExecutionOutcome> GetTxStatusAsync(byte[] txHash, string accountId)
        {
            var parameters = new dynamic[2];
            parameters[0] = Base58.Encode(txHash);
            parameters[1] = accountId;
            var result = await SendJsonRpc("tx", parameters);
            return result;
        }

        public override async Task<dynamic> QueryAsync(string path, string data)
        {
            var parameters = new dynamic[2];
            parameters[0] = path;
            parameters[1] = data;

            try
            {
                var result = await SendJsonRpc("query", parameters);
                return result;
            }
            catch (Exception e)
            {
                throw new Exception($"Quering {path} failed: { e.Message}.");
            }
        }

        public override async Task<FinalExecutionOutcome> SendTransactionAsync(SignedTransaction signedTransaction)
        {
            var bytes = signedTransaction.ToByteArray();
            var parameters = new dynamic[1];
            parameters[0] = Convert.ToBase64String(bytes, 0, bytes.Length);
            var rawOutcomeResult = await SendJsonRpc("broadcast_tx_commit", parameters);
            var result = FinalExecutionOutcome.FromDynamicJsonObject(rawOutcomeResult);
            return result;
        }

        private async Task<dynamic> SendJsonRpc(string method, dynamic[] parameters)
        {
            dynamic request = new ExpandoObject();

            request.method = method;
            request.parameters = parameters;
            request.id = _id++;
            request.jsonrpc = "2.0";
            var requestString = JsonConvert.SerializeObject(request).Replace("\"parameters\":", "\"params\":");
            try
            {
                var result = await Web.FetchJsonAsync(_connection, requestString);
                return result;
            }
            catch (HttpException e)
            {
                throw new Exception($"{e.ErrorCode}: {e.Message}");
            }
        }
    }
}
'''
'''--- Src/NearClientUnity/Providers/NodeStatusResult.cs ---
﻿using Newtonsoft.Json.Linq;

namespace NearClientUnity.Providers
{
    public class NodeStatusResult
    {
        public string ChainId { get; set; }
        public string RpcAddr { get; set; }
        public SyncInfo SyncInfo { get; set; }
        public JArray Validators { get; set; }

        public static NodeStatusResult FromDynamicJsonObject(dynamic jsonObject)
        {
            var result = new NodeStatusResult()
            {
                ChainId = jsonObject.chain_id,
                RpcAddr = jsonObject.rpc_addr,
                SyncInfo = new SyncInfo()
                {
                    LatestBlockHash = jsonObject.sync_info.latest_block_hash,
                    LatestBlockHeight = jsonObject.sync_info.latest_block_height,
                    LatestBlockTime = jsonObject.sync_info.latest_block_time,
                    LatestStateRoot = jsonObject.sync_info.latest_state_root,
                    Syncing = jsonObject.sync_info.syncing
                },
                Validators = jsonObject.validators
            };
            return result;
        }
    }
}
'''
'''--- Src/NearClientUnity/Providers/Provider.cs ---
﻿using NearClientUnity.Utilities;
using Newtonsoft.Json.Linq;
using System;
using System.Text;
using System.Threading.Tasks;

namespace NearClientUnity.Providers
{
    public abstract class Provider
    {
        public static dynamic GetTransactionLastResult(FinalExecutionOutcome txResult)
        {
            if (txResult.Status == null || txResult.Status.GetType() != typeof(FinalExecutionStatus) || string.Equals(
                    txResult.Status.SuccessValue, null, StringComparison.Ordinal)) return null;

            var value = Encoding.UTF8.GetString(Convert.FromBase64String(txResult.Status.SuccessValue)).Trim('"');

            try
            {
                var result = JObject.Parse(value);
                return result;
            }
            catch
            {
                return value;
            }
        }

        public abstract Task<BlockResult> GetBlockAsync(int blockId);

        public abstract Task<ChunkResult> GetChunkAsync(string chunkId);

        public abstract Task<ChunkResult> GetChunkAsync(int[,] chunkId);

        public abstract INetwork GetNetwork();

        public abstract Task<NodeStatusResult> GetStatusAsync();

        public abstract Task<FinalExecutionOutcome> GetTxStatusAsync(byte[] txHash, string accountId);

        public abstract Task<dynamic> QueryAsync(string path, string data);

        public abstract Task<FinalExecutionOutcome> SendTransactionAsync(SignedTransaction signedTransaction);
    }
}
'''
'''--- Src/NearClientUnity/Providers/SyncInfo.cs ---
﻿namespace NearClientUnity.Providers
{
    public class SyncInfo
    {
        public string LatestBlockHash { get; set; }
        public int LatestBlockHeight { get; set; }
        public string LatestBlockTime { get; set; }
        public string LatestStateRoot { get; set; }
        public bool Syncing { get; set; }
    }
}
'''
'''--- Src/NearClientUnity/Providers/TotalWeight.cs ---
﻿namespace NearClientUnity.Providers
{
    public abstract class TotalWeight
    {
        public abstract int Num { get; set; }
    }
}
'''
'''--- Src/NearClientUnity/Providers/Transaction.cs ---
﻿namespace NearClientUnity.Providers
{
    public abstract class Transaction
    {
        public abstract dynamic Body { get; set; }
        public abstract string Hash { get; set; }
        public abstract string PublicKey { get; set; }
        public abstract string Signature { get; set; }
    }
}
'''
'''--- Src/NearClientUnity/SignedTransaction.cs ---
﻿using NearClientUnity.Utilities;
using System;
using System.IO;
using System.Security.Cryptography;
using System.Threading.Tasks;

namespace NearClientUnity
{
    public class SignedTransaction
    {
        public NearSignature Signature { get; set; }
        public Transaction Transaction { get; set; }

        public static SignedTransaction FromByteArray(byte[] rawBytes)
        {
            using (var ms = new MemoryStream(rawBytes))
            {
                return FromStream(ms);
            }
        }

        public static SignedTransaction FromStream(MemoryStream stream)
        {
            return FromRawDataStream(stream);
        }

        public static SignedTransaction FromStream(ref MemoryStream stream)
        {
            return FromRawDataStream(stream);
        }

        public static async Task<Tuple<byte[], SignedTransaction>> SignTransactionAsync(string receiverId, ulong nonce, Action[] actions, ByteArray32 blockHash, Signer signer, string accountId, string networkId)
        {
            var publicKey = await signer.GetPublicKeyAsync(accountId, networkId);
            var transaction = new Transaction
            {
                SignerId = accountId,
                PublicKey = publicKey,
                Nonce = nonce,
                ReceiverId = receiverId,
                Actions = actions,
                BlockHash = blockHash
            };
            var message = transaction.ToByteArray();

            byte[] hash;
            using (var sha256 = SHA256.Create())
            {
                hash = sha256.ComputeHash(message);
            }

            var signature = await signer.SignMessageAsync(message, accountId, networkId);

            var signedTx = new SignedTransaction
            {
                Transaction = transaction,
                Signature = new NearSignature(signature.SignatureBytes)
            };
            var result = new Tuple<byte[], SignedTransaction>(hash, signedTx);
            return result;
        }

        public static async Task<Tuple<byte[], SignedTransaction>> SignTransactionAsync(string receiverId, ulong nonce, Action[] actions, ByteArray32 blockHash, Signer signer, string accountId)
        {
            var publicKey = await signer.GetPublicKeyAsync(accountId);
            var transaction = new Transaction
            {
                SignerId = accountId,
                PublicKey = publicKey,
                Nonce = nonce,
                ReceiverId = receiverId,
                Actions = actions,
                BlockHash = blockHash
            };
            var message = transaction.ToByteArray();

            byte[] hash;
            using (var sha256 = SHA256.Create())
            {
                hash = sha256.ComputeHash(message);
            }

            var signature = await signer.SignMessageAsync(message, accountId);

            var signedTx = new SignedTransaction
            {
                Transaction = transaction,
                Signature = new NearSignature(signature.SignatureBytes)
            };

            var result = new Tuple<byte[], SignedTransaction>(message, signedTx);
            return result;
        }

        public static async Task<Tuple<byte[], SignedTransaction>> SignTransactionAsync(string receiverId, ulong nonce, Action[] actions, ByteArray32 blockHash, Signer signer)
        {
            var publicKey = await signer.GetPublicKeyAsync();
            var transaction = new Transaction
            {
                PublicKey = publicKey,
                Nonce = nonce,
                ReceiverId = receiverId,
                Actions = actions,
                BlockHash = blockHash
            };
            var message = transaction.ToByteArray();

            byte[] hash;
            using (var sha256 = SHA256.Create())
            {
                hash = sha256.ComputeHash(message);
            }

            var signature = await signer.SignMessageAsync(message);

            var signedTx = new SignedTransaction
            {
                Transaction = transaction,
                Signature = new NearSignature(signature.SignatureBytes)
            };

            var result = new Tuple<byte[], SignedTransaction>(hash, signedTx);
            return result;
        }

        public byte[] ToByteArray()
        {
            using (var ms = new MemoryStream())
            {
                using (var writer = new NearBinaryWriter(ms))
                {
                    writer.Write(Transaction.ToByteArray());
                    writer.Write(Signature.ToByteArray());
                    return ms.ToArray();
                }
            }
        }

        private static SignedTransaction FromRawDataStream(MemoryStream stream)
        {
            using (var reader = new NearBinaryReader(stream, true))
            {
                var transaction = Transaction.FromStream(ref stream);
                var signature = NearSignature.FromStream(ref stream);

                return new SignedTransaction()
                {
                    Transaction = transaction,
                    Signature = signature,
                };
            }
        }
    }
}
'''
'''--- Src/NearClientUnity/Signer.cs ---
﻿using NearClientUnity.Utilities;
using System.Security.Cryptography;
using System.Threading.Tasks;

namespace NearClientUnity
{
    public abstract class Signer
    {
        /**
        * Creates new key and returns public key.
        */

        public abstract Task<PublicKey> CreateKeyAsync(string accountId, string networkId = "");

        /**
         * Returns public key for given account / network.
         * @param accountId accountId to retrieve from.
         * @param networkId network for this accountId.
         */

        public abstract Task<PublicKey> GetPublicKeyAsync(string accountId = "", string networkId = "");

        /**
         * Signs given hash.
         * @param hash hash to sign.
         * @param accountId accountId to use for signing.
         * @param networkId network for this accontId.
         */

        public abstract Task<Utilities.Signature> SignHashAsync(byte[] hash, string accountId = "", string networkId = "");

        /**
         * Signs given message, by first hashing with sha256.
         * @param message message to sign.
         * @param accountId accountId to use for signing.
         * @param networkId network for this accontId.
         */

        public async Task<Utilities.Signature> SignMessageAsync(byte[] message, string accountId = "", string networkId = "")
        {
            byte[] messageSha256;

            using (var sha256 = SHA256.Create())
            {
                messageSha256 = sha256.ComputeHash(message);
            }

            var result = await SignHashAsync(messageSha256, accountId, networkId);
            return result;
        }
    }
}
'''
'''--- Src/NearClientUnity/SignerConfig.cs ---
﻿namespace NearClientUnity
{
    public class SignerConfig
    {
        public dynamic Args { get; set; }
        public SignerType Type { get; set; }
    }
}
'''
'''--- Src/NearClientUnity/SignerType.cs ---
﻿namespace NearClientUnity
{
    public enum SignerType
    {
        InMemory
    }
}
'''
'''--- Src/NearClientUnity/Transaction.cs ---
﻿using NearClientUnity.Utilities;
using System.Collections.Generic;
using System.IO;

namespace NearClientUnity
{
    public class Transaction
    {
        public Action[] Actions { get; set; }
        public ByteArray32 BlockHash { get; set; }
        public ulong Nonce { get; set; }
        public PublicKey PublicKey { get; set; }
        public string ReceiverId { get; set; }
        public string SignerId { get; set; }

        public static Transaction FromByteArray(byte[] rawBytes)
        {
            using (var ms = new MemoryStream(rawBytes))
            {
                return FromStream(ms);
            }
        }

        public static Transaction FromStream(MemoryStream stream)
        {
            return FromRawDataStream(stream);
        }

        public static Transaction FromStream(ref MemoryStream stream)
        {
            return FromRawDataStream(stream);
        }

        public byte[] ToByteArray()
        {
            using (var ms = new MemoryStream())
            {
                using (var writer = new NearBinaryWriter(ms))
                {
                    writer.Write(SignerId);
                    writer.Write(PublicKey.ToByteArray());
                    writer.Write(Nonce);
                    writer.Write(ReceiverId);
                    writer.Write(BlockHash.Buffer);

                    writer.Write((uint)Actions.Length);
                    foreach (var action in Actions)
                    {
                        writer.Write(action.ToByteArray());
                    }

                    return ms.ToArray();
                }
            }
        }

        private static Transaction FromRawDataStream(MemoryStream stream)
        {
            using (var reader = new NearBinaryReader(stream, true))
            {
                var signerId = reader.ReadString();
                var publicKey = PublicKey.FromStream(ref stream);
                var nonce = reader.ReadULong();
                var receiverId = reader.ReadString();
                var blockHash = new ByteArray32() { Buffer = reader.ReadBytes(32) };
                var actionsCount = reader.ReadUInt();
                var actions = new List<Action>();

                for (var i = 0; i < actionsCount; i++)
                {
                    actions.Add(Action.FromStream(ref stream));
                }

                return new Transaction()
                {
                    SignerId = signerId,
                    PublicKey = publicKey,
                    Nonce = nonce,
                    ReceiverId = receiverId,
                    BlockHash = blockHash,
                    Actions = actions.ToArray()
                };
            }
        }
    }
}
'''
'''--- Src/NearClientUnity/UrlAccountCreator.cs ---
﻿using NearClientUnity.Utilities;
using System.Threading.Tasks;

namespace NearClientUnity
{
    public class UrlAccountCreator : AccountCreator
    {
        private readonly Connection _connection;
        private readonly ConnectionInfo _helperConnection;

        public UrlAccountCreator(Connection connection, string helperUrl)
        {
            _connection = connection;
            _helperConnection = new ConnectionInfo
            {
                Url = helperUrl
            };
        }

        public override async Task CreateAccountAsync(string newAccountId, PublicKey publicKey)
        {
            // TODO: hit url to create account.
            throw new System.NotImplementedException();
        }
    }
}
'''
'''--- Src/NearClientUnity/Utilities/Base58.cs ---
﻿using System;
using System.Linq;
using System.Numerics;

namespace NearClientUnity.Utilities
{
    public static class Base58
    {
        private const string Digits = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";

        public static byte[] Decode(string data)
        {
            BigInteger intData = 0;

            for (var i = 0; i < data.Length; i++)
            {
                var digit = Digits.IndexOf(data[i]);

                if (digit < 0)
                {
                    throw new FormatException($"Invalid Base58 character `{data[i]}` at position {i}");
                }

                intData = intData * 58 + digit;
            }

            var leadingZeroCount = data.TakeWhile(c => c == '1').Count();
            var leadingZeros = Enumerable.Repeat((byte)0, leadingZeroCount);
            var bytesWithoutLeadingZeros =
                intData.ToByteArray()
                    .Reverse()
                    .SkipWhile(b => b == 0);

            var result = leadingZeros.Concat(bytesWithoutLeadingZeros).ToArray();

            return result;
        }

        public static string Encode(byte[] data)
        {
            var intData = data.Aggregate<byte, BigInteger>(0, (current, t) => current * 256 + t);
            var result = string.Empty;

            while (intData > 0)
            {
                var remainder = (int)(intData % 58);
                intData /= 58;
                result = Digits[remainder] + result;
            }

            for (var i = 0; i < data.Length && data[i] == 0; i++)
            {
                result = '1' + result;
            }

            return result;
        }
    }
}
'''
'''--- Src/NearClientUnity/Utilities/ByteArray32.cs ---
﻿namespace NearClientUnity.Utilities
{
    public struct ByteArray32
    {
        public const byte BufferLength = 32;
        public byte[] Buffer;
    }
}
'''
'''--- Src/NearClientUnity/Utilities/ByteArray64.cs ---
﻿namespace NearClientUnity.Utilities
{
    public struct ByteArray64
    {
        public const byte BufferLength = 64;
        public byte[] Buffer;
    }
}
'''
'''--- Src/NearClientUnity/Utilities/ConnectionInfo.cs ---
﻿using System;
using System.Collections.Generic;

namespace NearClientUnity.Utilities
{
    public class ConnectionInfo
    {
        public bool AllowInsecure { get; set; }
        public Dictionary<string, string> Headers { get; set; }
        public string Password { get; set; }
        public TimeSpan Timeout { get; set; }
        public string Url { get; set; }
        public string User { get; set; }
    }
}
'''
'''--- Src/NearClientUnity/Utilities/Ed25519/CryptoBytes.cs ---
﻿using System;
using System.Linq;
using System.Numerics;
using System.Runtime.CompilerServices;

namespace NearClientUnity.Utilities.Ed25519
{
    public static class CryptoBytes
    {
        private const string StrDigits = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";

        /// <summary>
        /// // Decode a base58-encoded string into byte array
        /// </summary>
        /// <param name="input">
        /// </param>
        /// <returns>
        /// Byte array
        /// </returns>
        public static byte[] Base58Decode(string input)
        {
            // Decode Base58 string to BigInteger
            BigInteger intData = 0;
            for (var i = 0; i < input.Length; i++)
            {
                var digit = StrDigits.IndexOf(input[i]); //Slow
                if (digit < 0)
                    throw new FormatException($"Invalid Base58 character `{input[i]}` at position {i}");
                intData = intData * 58 + digit;
            }

            // Encode BigInteger to byte[] Leading zero bytes get encoded as leading `1` characters
            var leadingZeroCount = input.TakeWhile(c => c == '1').Count();
            var leadingZeros = Enumerable.Repeat((byte)0, leadingZeroCount);
            var bytesWithoutLeadingZeros =
                intData.ToByteArray()
                    .Reverse() // to big endian
                    .SkipWhile(b => b == 0); //strip sign byte
            var result = leadingZeros.Concat(bytesWithoutLeadingZeros).ToArray();
            return result;
        }

        /// <summary>
        /// Encode a byte sequence as a base58-encoded string
        /// </summary>
        /// <param name="input">
        /// Byte sequence
        /// </param>
        /// <returns>
        /// Encoding result
        /// </returns>
        public static string Base58Encode(byte[] input)
        {
            // Decode byte[] to BigInteger
            var intData = input.Aggregate<byte, BigInteger>(0, (current, t) => current * 256 + t);

            // Encode BigInteger to Base58 string
            var result = "";
            while (intData > 0)
            {
                var remainder = (int)(intData % 58);
                intData /= 58;
                result = StrDigits[remainder] + result;
            }

            // Append `1` for each leading 0 byte
            for (var i = 0; i < input.Length && input[i] == 0; i++) result = '1' + result;
            return result;
        }

        /// <summary>
        /// Comparison of two arrays. The runtime of this method does not depend on the contents of
        /// the arrays. Using constant time prevents timing attacks that allow an attacker to learn
        /// if the arrays have a common prefix. It is important to use such a constant time
        /// comparison when verifying MACs.
        /// </summary>
        /// <param name="x">
        /// Byte array
        /// </param>
        /// <param name="y">
        /// Byte array
        /// </param>
        /// <returns>
        /// True if arrays are equal
        /// </returns>
        public static bool ConstantTimeEquals(byte[] x, byte[] y)
        {
            if (x.Length != y.Length)
                return false;
            return InternalConstantTimeEquals(x, 0, y, 0, x.Length) != 0;
        }

        /// <summary>
        /// Comparison of two array segments. The runtime of this method does not depend on the
        /// contents of the arrays. Using constant time prevents timing attacks that allow an
        /// attacker to learn if the arrays have a common prefix. It is important to use such a
        /// constant time comparison when verifying MACs.
        /// </summary>
        /// <param name="x">
        /// Byte array segment
        /// </param>
        /// <param name="y">
        /// Byte array segment
        /// </param>
        /// <returns>
        /// True if contents of x and y are equal
        /// </returns>
        public static bool ConstantTimeEquals(ArraySegment<byte> x, ArraySegment<byte> y)
        {
            if (x.Count != y.Count)
                return false;
            return InternalConstantTimeEquals(x.Array, x.Offset, y.Array, y.Offset, x.Count) != 0;
        }

        /// <summary>
        /// Comparison of two byte sequences. The runtime of this method does not depend on the
        /// contents of the arrays. Using constant time prevents timing attacks that allow an
        /// attacker to learn if the arrays have a common prefix. It is important to use such a
        /// constant time comparison when verifying MACs.
        /// </summary>
        /// <param name="x">
        /// Byte array
        /// </param>
        /// <param name="xOffset">
        /// Offset of byte sequence in the x array
        /// </param>
        /// <param name="y">
        /// Byte array
        /// </param>
        /// <param name="yOffset">
        /// Offset of byte sequence in the y array
        /// </param>
        /// <param name="length">
        /// Length of byte sequence
        /// </param>
        /// <returns>
        /// True if sequences are equal
        /// </returns>
        public static bool ConstantTimeEquals(byte[] x, int xOffset, byte[] y, int yOffset, int length)
        {
            return InternalConstantTimeEquals(x, xOffset, y, yOffset, length) != 0;
        }

        /// <summary>
        /// Decodes a Base64 encoded string back to bytes.
        /// </summary>
        /// <param name="base64String">
        /// Base 64 encoded data
        /// </param>
        /// <returns>
        /// Byte array
        /// </returns>
        public static byte[] FromBase64String(string base64String)
        {
            if (base64String == null)
                return null;
            return Convert.FromBase64String(base64String);
        }

        /// <summary>
        /// Converts the hex string to bytes. Case insensitive.
        /// </summary>
        /// <param name="hexString">
        /// Hex encoded byte sequence
        /// </param>
        /// <returns>
        /// Byte array
        /// </returns>
        public static byte[] FromHexString(string hexString)
        {
            if (hexString == null)
                return null;
            if (hexString.Length % 2 != 0)
                throw new FormatException("The hex string is invalid because it has an odd length");
            var result = new byte[hexString.Length / 2];
            for (var i = 0; i < result.Length; i++)
                result[i] = Convert.ToByte(hexString.Substring(i * 2, 2), 16);
            return result;
        }

        /// <summary>
        /// Encodes the bytes with the Base64 encoding. More compact than hex, but it is
        /// case-sensitive and uses the special characters `+`, `/` and `=`.
        /// </summary>
        /// <param name="data">
        /// Byte array
        /// </param>
        /// <returns>
        /// Base 64 encoded data
        /// </returns>
        public static string ToBase64String(byte[] data)
        {
            if (data == null)
                return null;
            return Convert.ToBase64String(data);
        }

        /// <summary>
        /// Constant-time conversion of the bytes array to an lower-case hex string. Please see
        /// http://stackoverflow.com/a/14333437/445517 for the detailed explanation.
        /// </summary>
        /// <param name="data">
        /// Byte array
        /// </param>
        /// <returns>
        /// Hex representation of byte array
        /// </returns>
        public static string ToHexStringLower(byte[] data)
        {
            if (data == null)
                return null;
            var c = new char[data.Length * 2];
            for (var i = 0; i < data.Length; i++)
            {
                var b = data[i] >> 4;
                c[i * 2] = (char)(87 + b + (((b - 10) >> 31) & -39));
                b = data[i] & 0xF;
                c[i * 2 + 1] = (char)(87 + b + (((b - 10) >> 31) & -39));
            }

            return new string(c);
        }

        /// <summary>
        /// Constant-time conversion of the bytes array to an upper-case hex string. Please see
        /// http://stackoverflow.com/a/14333437/445517 for the detailed explanation
        /// </summary>
        /// <param name="data">
        /// Byte array
        /// </param>
        /// <returns>
        /// Hex representation of byte array
        /// </returns>
        public static string ToHexStringUpper(byte[] data)
        {
            if (data == null)
                return null;
            var c = new char[data.Length * 2];
            for (var i = 0; i < data.Length; i++)
            {
                var b = data[i] >> 4;
                c[i * 2] = (char)(55 + b + (((b - 10) >> 31) & -7));
                b = data[i] & 0xF;
                c[i * 2 + 1] = (char)(55 + b + (((b - 10) >> 31) & -7));
            }

            return new string(c);
        }

        /// <summary>
        /// Overwrites the contents of the array, wiping the previous content.
        /// </summary>
        /// <param name="data">
        /// Byte array
        /// </param>
        public static void Wipe(byte[] data)
        {
            InternalWipe(data, 0, data.Length);
        }

        /// <summary>
        /// Overwrites the contents of the array, wiping the previous content.
        /// </summary>
        /// <param name="data">
        /// Byte array
        /// </param>
        /// <param name="offset">
        /// Index of byte sequence
        /// </param>
        /// <param name="length">
        /// Length of byte sequence
        /// </param>
        public static void Wipe(byte[] data, int offset, int length)
        {
            InternalWipe(data, offset, length);
        }

        /// <summary>
        /// Overwrites the contents of the array segment, wiping the previous content.
        /// </summary>
        /// <param name="data">
        /// Byte array segment
        /// </param>
        public static void Wipe(ArraySegment<byte> data)
        {
            InternalWipe(data.Array, data.Offset, data.Count);
        }

        // Secure wiping is hard
        // * the GC can move around and copy memory Perhaps this can be avoided by using unmanaged
        // memory or by fixing the position of the array in memory
        // * Swap files and error dumps can contain secret information It seems possible to lock
        // memory in RAM, no idea about error dumps
        // * Compiler could optimize out the wiping if it knows that data won't be read back I hope
        // this is enough, suppressing inlining but perhaps `RtlSecureZeroMemory` is needed
        [MethodImpl(MethodImplOptions.NoInlining)]
        internal static void InternalWipe(byte[] data, int offset, int count)
        {
            Array.Clear(data, offset, count);
        }

        // shallow wipe of structs
        [MethodImpl(MethodImplOptions.NoInlining)]
        internal static void InternalWipe<T>(ref T data)
            where T : struct
        {
            data = default;
        }

        private static uint InternalConstantTimeEquals(byte[] x, int xOffset, byte[] y, int yOffset, int length)
        {
            var differentbits = 0;
            for (var i = 0; i < length; i++)
                differentbits |= x[xOffset + i] ^ y[yOffset + i];
            return 1 & (unchecked((uint)differentbits - 1) >> 8);
        }
    }
}
'''
'''--- Src/NearClientUnity/Utilities/Ed25519/Ed25519.cs ---
﻿using NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.Ed25519Ops;
using System;

namespace NearClientUnity.Utilities.Ed25519
{
    public static class Ed25519
    {
        /// <summary>
        /// A 64 byte expanded form of private key. This form is used internally to improve performance
        /// </summary>
        public const int ExpandedPrivateKeySize = 32 * 2;

        /// <summary>
        /// Private key seeds are 32 byte arbitrary values. This is the form that should be
        /// generated and stored.
        /// </summary>
        public const int PrivateKeySeedSize = 32;

        /// <summary>
        /// Public Keys are 32 byte values. All possible values of this size a valid.
        /// </summary>
        public const int PublicKeySize = 32;

        /// <summary>
        /// Signatures are 64 byte values
        /// </summary>
        public const int SignatureSize = 64;

        /// <summary>
        /// Calculate expanded form of private key from the key seed.
        /// </summary>
        /// <param name="privateKeySeed">
        /// Private key seed value
        /// </param>
        /// <returns>
        /// Expanded form of the private key
        /// </returns>
        public static byte[] ExpandedPrivateKeyFromSeed(byte[] privateKeySeed)
        {
            byte[] privateKey;
            byte[] publicKey;
            KeyPairFromSeed(out publicKey, out privateKey, privateKeySeed);
            CryptoBytes.Wipe(publicKey);
            return privateKey;
        }

        /// <summary>
        /// Calculate key pair from the key seed.
        /// </summary>
        /// <param name="publicKey">
        /// Public key
        /// </param>
        /// <param name="expandedPrivateKey">
        /// Expanded form of the private key
        /// </param>
        /// <param name="privateKeySeed">
        /// Private key seed value
        /// </param>
        public static void KeyPairFromSeed(out byte[] publicKey, out byte[] expandedPrivateKey, byte[] privateKeySeed)
        {
            var pk = new byte[PublicKeySize];
            var sk = new byte[ExpandedPrivateKeySize];

            Ed25519Operations.CryptoSignKeyPair(pk, 0, sk, 0, privateKeySeed, 0);
            publicKey = pk;
            expandedPrivateKey = sk;
        }

        /// <summary>
        /// Calculate key pair from the key seed.
        /// </summary>
        /// <param name="publicKey">
        /// Public key
        /// </param>
        /// <param name="expandedPrivateKey">
        /// Expanded form of the private key
        /// </param>
        /// <param name="privateKeySeed">
        /// Private key seed value
        /// </param>
        public static void KeyPairFromSeed(ArraySegment<byte> publicKey, ArraySegment<byte> expandedPrivateKey,
            ArraySegment<byte> privateKeySeed)
        {
            Ed25519Operations.CryptoSignKeyPair(
                publicKey.Array, publicKey.Offset,
                expandedPrivateKey.Array, expandedPrivateKey.Offset,
                privateKeySeed.Array, privateKeySeed.Offset);
        }

        /// <summary>
        /// Calculate public key from private key seed
        /// </summary>
        /// <param name="privateKeySeed">
        /// Private key seed value
        /// </param>
        /// <returns>
        /// </returns>
        public static byte[] PublicKeyFromSeed(byte[] privateKeySeed)
        {
            byte[] privateKey;
            byte[] publicKey;
            KeyPairFromSeed(out publicKey, out privateKey, privateKeySeed);
            CryptoBytes.Wipe(privateKey);
            return publicKey;
        }

        /// <summary>
        /// Create new Ed25519 signature
        /// </summary>
        /// <param name="signature">
        /// Buffer for signature
        /// </param>
        /// <param name="message">
        /// Message bytes
        /// </param>
        /// <param name="expandedPrivateKey">
        /// Expanded form of private key
        /// </param>
        public static void Sign(ArraySegment<byte> signature, ArraySegment<byte> message,
            ArraySegment<byte> expandedPrivateKey)
        {
            Ed25519Operations.CryptoSign(signature.Array, signature.Offset, message.Array, message.Offset,
                message.Count, expandedPrivateKey.Array, expandedPrivateKey.Offset);
        }

        /// <summary>
        /// Create new Ed25519 signature
        /// </summary>
        /// <param name="message">
        /// Message bytes
        /// </param>
        /// <param name="expandedPrivateKey">
        /// Expanded form of private key
        /// </param>
        public static byte[] Sign(byte[] message, byte[] expandedPrivateKey)
        {
            var signature = new byte[SignatureSize];
            Sign(new ArraySegment<byte>(signature), new ArraySegment<byte>(message),
                new ArraySegment<byte>(expandedPrivateKey));
            return signature;
        }

        /// <summary>
        /// Verify Ed25519 signature
        /// </summary>
        /// <param name="signature">
        /// Signature bytes
        /// </param>
        /// <param name="message">
        /// Message
        /// </param>
        /// <param name="publicKey">
        /// Public key
        /// </param>
        /// <returns>
        /// True if signature is valid, false if it's not
        /// </returns>
        public static bool Verify(ArraySegment<byte> signature, ArraySegment<byte> message,
            ArraySegment<byte> publicKey)
        {
            return Ed25519Operations.CryptoSignVerify(signature.Array, signature.Offset, message.Array,
                message.Offset, message.Count, publicKey.Array, publicKey.Offset);
        }

        /// <summary>
        /// Verify Ed25519 signature
        /// </summary>
        /// <param name="signature">
        /// Signature bytes
        /// </param>
        /// <param name="message">
        /// Message
        /// </param>
        /// <param name="publicKey">
        /// Public key
        /// </param>
        /// <returns>
        /// True if signature is valid, false if it's not
        /// </returns>
        public static bool Verify(byte[] signature, byte[] message, byte[] publicKey)
        {
            return Ed25519Operations.CryptoSignVerify(signature, 0, message, 0, message.Length, publicKey, 0);
        }
    }
}
'''
'''--- Src/NearClientUnity/Utilities/Ed25519/Internal/Array16.cs ---
﻿namespace NearClientUnity.Utilities.Ed25519.Internal
{
    // Array16<UInt32> Salsa20 state Array16<UInt64> SHA-512 block
    internal struct Array16<T>
    {
        public T X0;
        public T X1;
        public T X10;
        public T X11;
        public T X12;
        public T X13;
        public T X14;
        public T X15;
        public T X2;
        public T X3;
        public T X4;
        public T X5;
        public T X6;
        public T X7;
        public T X8;
        public T X9;
    }
}
'''
'''--- Src/NearClientUnity/Utilities/Ed25519/Internal/Array8.cs ---
﻿namespace NearClientUnity.Utilities.Ed25519.Internal
{
    // Array8<UInt32> Poly1305 key Array8<UInt64> SHA-512 state/output
    internal struct Array8<T>
    {
        public T X0;
        public T X1;
        public T X2;
        public T X3;
        public T X4;
        public T X5;
        public T X6;
        public T X7;
    }
}
'''
'''--- Src/NearClientUnity/Utilities/Ed25519/Internal/ByteIntegerConverter.cs ---
﻿namespace NearClientUnity.Utilities.Ed25519.Internal
{
    // Loops? Arrays? Never heard of that stuff Library avoids unnecessary heap allocations and
    // unsafe code so this ugly code becomes necessary :(
    internal static class ByteIntegerConverter
    {
        public static void Array16LoadBigEndian64(out Array16<ulong> output, byte[] input, int inputOffset)
        {
            output.X0 = LoadBigEndian64(input, inputOffset + 0);
            output.X1 = LoadBigEndian64(input, inputOffset + 8);
            output.X2 = LoadBigEndian64(input, inputOffset + 16);
            output.X3 = LoadBigEndian64(input, inputOffset + 24);
            output.X4 = LoadBigEndian64(input, inputOffset + 32);
            output.X5 = LoadBigEndian64(input, inputOffset + 40);
            output.X6 = LoadBigEndian64(input, inputOffset + 48);
            output.X7 = LoadBigEndian64(input, inputOffset + 56);
            output.X8 = LoadBigEndian64(input, inputOffset + 64);
            output.X9 = LoadBigEndian64(input, inputOffset + 72);
            output.X10 = LoadBigEndian64(input, inputOffset + 80);
            output.X11 = LoadBigEndian64(input, inputOffset + 88);
            output.X12 = LoadBigEndian64(input, inputOffset + 96);
            output.X13 = LoadBigEndian64(input, inputOffset + 104);
            output.X14 = LoadBigEndian64(input, inputOffset + 112);
            output.X15 = LoadBigEndian64(input, inputOffset + 120);
        }

        public static void StoreBigEndian64(byte[] buf, int offset, ulong value)
        {
            buf[offset + 7] = unchecked((byte)value);
            buf[offset + 6] = unchecked((byte)(value >> 8));
            buf[offset + 5] = unchecked((byte)(value >> 16));
            buf[offset + 4] = unchecked((byte)(value >> 24));
            buf[offset + 3] = unchecked((byte)(value >> 32));
            buf[offset + 2] = unchecked((byte)(value >> 40));
            buf[offset + 1] = unchecked((byte)(value >> 48));
            buf[offset + 0] = unchecked((byte)(value >> 56));
        }

        private static ulong LoadBigEndian64(byte[] buf, int offset)
        {
            return
                buf[offset + 7]
                | ((ulong)buf[offset + 6] << 8)
                | ((ulong)buf[offset + 5] << 16)
                | ((ulong)buf[offset + 4] << 24)
                | ((ulong)buf[offset + 3] << 32)
                | ((ulong)buf[offset + 2] << 40)
                | ((ulong)buf[offset + 1] << 48)
                | ((ulong)buf[offset + 0] << 56);
        }
    }
}
'''
'''--- Src/NearClientUnity/Utilities/Ed25519/Internal/Ed25519Ref10/Ed25519Ops/KeyPair.cs ---
﻿using NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.Group.Operations;
using NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.ScalarOps;
using System;

namespace NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.Ed25519Ops
{
    internal static partial class Ed25519Operations
    {
        public static void CryptoSignKeyPair(byte[] pk, int pkoffset, byte[] sk, int skoffset, byte[] seed,
            int seedoffset)
        {
            int i;

            Array.Copy(seed, seedoffset, sk, skoffset, 32);
            var h = Sha512.Hash(sk, skoffset, 32);
            ScalarOperations.Clamp(h, 0);

            GroupOperations.ScalarMultBase(out var A, h, 0);
            GroupOperations.P3ToBytes(pk, pkoffset, ref A);

            for (i = 0; i < 32; ++i) sk[skoffset + 32 + i] = pk[pkoffset + i];
            CryptoBytes.Wipe(h);
        }
    }
}
'''
'''--- Src/NearClientUnity/Utilities/Ed25519/Internal/Ed25519Ref10/Ed25519Ops/open.cs ---
﻿using NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.Group;
using NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.Group.Operations;
using NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.ScalarOps;
using System;

namespace NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.Ed25519Ops
{
    internal static partial class Ed25519Operations
    {
        public static bool CryptoSignVerify(
            byte[] sig, int sigoffset,
            byte[] m, int moffset, int mlen,
            byte[] pk, int pkoffset)
        {
            var checker = new byte[32];
            GroupElementP3 A;
            GroupElementP2 R;

            if ((sig[sigoffset + 63] & 224) != 0) return false;
            if (GroupOperations.FromBytes(out A, pk, pkoffset) != 0)
                return false;

            var hasher = new Sha512();
            hasher.Update(sig, sigoffset, 32);
            hasher.Update(pk, pkoffset, 32);
            hasher.Update(m, moffset, mlen);
            var h = hasher.Finalize();

            ScalarOperations.Reduce(h);

            var sm32 = new byte[32];
            Array.Copy(sig, sigoffset + 32, sm32, 0, 32);
            GroupOperations.DoubleScalarMult(out R, h, ref A, sm32);
            GroupOperations.ToBytes(checker, 0, ref R);
            var result = CryptoBytes.ConstantTimeEquals(checker, 0, sig, sigoffset, 32);
            CryptoBytes.Wipe(h);
            CryptoBytes.Wipe(checker);
            return result;
        }
    }
}
'''
'''--- Src/NearClientUnity/Utilities/Ed25519/Internal/Ed25519Ref10/Ed25519Ops/sign.cs ---
﻿using NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.Group;
using NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.Group.Operations;
using NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.ScalarOps;
using System;

namespace NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.Ed25519Ops
{
    internal static partial class Ed25519Operations
    {
        public static void CryptoSign(
            byte[] sig, int sigoffset,
            byte[] m, int moffset, int mlen,
            byte[] sk, int skoffset)
        {
            var hasher = new Sha512();
            {
                hasher.Update(sk, skoffset, 32);
                var az = hasher.Finalize();
                ScalarOperations.Clamp(az, 0);

                hasher.Init();
                hasher.Update(az, 32, 32);
                hasher.Update(m, moffset, mlen);
                var r = hasher.Finalize();

                ScalarOperations.Reduce(r);
                GroupElementP3 R;
                GroupOperations.ScalarMultBase(out R, r, 0);
                GroupOperations.P3ToBytes(sig, sigoffset, ref R);

                hasher.Init();
                hasher.Update(sig, sigoffset, 32);
                hasher.Update(sk, skoffset + 32, 32);
                hasher.Update(m, moffset, mlen);
                var hram = hasher.Finalize();

                ScalarOperations.Reduce(hram);
                var s = new byte[32];
                Array.Copy(sig, sigoffset + 32, s, 0, 32);
                ScalarOperations.MulAdd(s, hram, az, r);
                Array.Copy(s, 0, sig, sigoffset + 32, 32);
                CryptoBytes.Wipe(s);
            }
        }
    }
}
'''
'''--- Src/NearClientUnity/Utilities/Ed25519/Internal/Ed25519Ref10/Field/FieldElement.cs ---
﻿namespace NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.Field
{
    internal struct FieldElement
    {
        internal int X0, X1, X2, X3, X4, X5, X6, X7, X8, X9;

        internal FieldElement(params int[] elements)
        {
            X0 = elements[0];
            X1 = elements[1];
            X2 = elements[2];
            X3 = elements[3];
            X4 = elements[4];
            X5 = elements[5];
            X6 = elements[6];
            X7 = elements[7];
            X8 = elements[8];
            X9 = elements[9];
        }
    }
}
'''
'''--- Src/NearClientUnity/Utilities/Ed25519/Internal/Ed25519Ref10/Field/Operations/Add.cs ---
﻿namespace NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.Field.Operations
{
    internal static partial class FieldOperations
    {
        /*
		h = f + g
		Can overlap h with f or g.

		Preconditions:
		   |f| bounded by 1.1*2^25,1.1*2^24,1.1*2^25,1.1*2^24,etc.
		   |g| bounded by 1.1*2^25,1.1*2^24,1.1*2^25,1.1*2^24,etc.

		Postconditions:
		   |h| bounded by 1.1*2^26,1.1*2^25,1.1*2^26,1.1*2^25,etc.
		*/

        //void Add(fe h,const fe f,const fe g)
        internal static void Add(out FieldElement h, ref FieldElement f, ref FieldElement g)
        {
            var f0 = f.X0;
            var f1 = f.X1;
            var f2 = f.X2;
            var f3 = f.X3;
            var f4 = f.X4;
            var f5 = f.X5;
            var f6 = f.X6;
            var f7 = f.X7;
            var f8 = f.X8;
            var f9 = f.X9;
            var g0 = g.X0;
            var g1 = g.X1;
            var g2 = g.X2;
            var g3 = g.X3;
            var g4 = g.X4;
            var g5 = g.X5;
            var g6 = g.X6;
            var g7 = g.X7;
            var g8 = g.X8;
            var g9 = g.X9;
            var h0 = f0 + g0;
            var h1 = f1 + g1;
            var h2 = f2 + g2;
            var h3 = f3 + g3;
            var h4 = f4 + g4;
            var h5 = f5 + g5;
            var h6 = f6 + g6;
            var h7 = f7 + g7;
            var h8 = f8 + g8;
            var h9 = f9 + g9;

            h.X0 = h0;
            h.X1 = h1;
            h.X2 = h2;
            h.X3 = h3;
            h.X4 = h4;
            h.X5 = h5;
            h.X6 = h6;
            h.X7 = h7;
            h.X8 = h8;
            h.X9 = h9;
        }
    }
}
'''
'''--- Src/NearClientUnity/Utilities/Ed25519/Internal/Ed25519Ref10/Field/Operations/ConditionalMove.cs ---
﻿namespace NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.Field.Operations
{
    internal static partial class FieldOperations
    {
        /*
		Replace (f,g) with (g,g) if b == 1;
		replace (f,g) with (f,g) if b == 0.

		Preconditions: b in {0,1}.
		*/

        //void ConditionalMove(fe f,const fe g,unsigned int b)
        internal static void ConditionalMove(ref FieldElement f, ref FieldElement g, int b)
        {
            var f0 = f.X0;
            var f1 = f.X1;
            var f2 = f.X2;
            var f3 = f.X3;
            var f4 = f.X4;
            var f5 = f.X5;
            var f6 = f.X6;
            var f7 = f.X7;
            var f8 = f.X8;
            var f9 = f.X9;
            var g0 = g.X0;
            var g1 = g.X1;
            var g2 = g.X2;
            var g3 = g.X3;
            var g4 = g.X4;
            var g5 = g.X5;
            var g6 = g.X6;
            var g7 = g.X7;
            var g8 = g.X8;
            var g9 = g.X9;
            var x0 = f0 ^ g0;
            var x1 = f1 ^ g1;
            var x2 = f2 ^ g2;
            var x3 = f3 ^ g3;
            var x4 = f4 ^ g4;
            var x5 = f5 ^ g5;
            var x6 = f6 ^ g6;
            var x7 = f7 ^ g7;
            var x8 = f8 ^ g8;
            var x9 = f9 ^ g9;

            b = -b;
            x0 &= b;
            x1 &= b;
            x2 &= b;
            x3 &= b;
            x4 &= b;
            x5 &= b;
            x6 &= b;
            x7 &= b;
            x8 &= b;
            x9 &= b;
            f.X0 = f0 ^ x0;
            f.X1 = f1 ^ x1;
            f.X2 = f2 ^ x2;
            f.X3 = f3 ^ x3;
            f.X4 = f4 ^ x4;
            f.X5 = f5 ^ x5;
            f.X6 = f6 ^ x6;
            f.X7 = f7 ^ x7;
            f.X8 = f8 ^ x8;
            f.X9 = f9 ^ x9;
        }
    }
}
'''
'''--- Src/NearClientUnity/Utilities/Ed25519/Internal/Ed25519Ref10/Field/Operations/ControlledSwap.cs ---
﻿namespace NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.Field.Operations
{
    internal static partial class FieldOperations
    {
        /*
        Replace (f,g) with (g,f) if b == 1;
        replace (f,g) with (f,g) if b == 0.

        Preconditions: b in {0,1}.
        */

        public static void ControlledSwap(ref FieldElement f, ref FieldElement g, uint b)
        {
            var f0 = f.X0;
            var f1 = f.X1;
            var f2 = f.X2;
            var f3 = f.X3;
            var f4 = f.X4;
            var f5 = f.X5;
            var f6 = f.X6;
            var f7 = f.X7;
            var f8 = f.X8;
            var f9 = f.X9;
            var g0 = g.X0;
            var g1 = g.X1;
            var g2 = g.X2;
            var g3 = g.X3;
            var g4 = g.X4;
            var g5 = g.X5;
            var g6 = g.X6;
            var g7 = g.X7;
            var g8 = g.X8;
            var g9 = g.X9;
            var x0 = f0 ^ g0;
            var x1 = f1 ^ g1;
            var x2 = f2 ^ g2;
            var x3 = f3 ^ g3;
            var x4 = f4 ^ g4;
            var x5 = f5 ^ g5;
            var x6 = f6 ^ g6;
            var x7 = f7 ^ g7;
            var x8 = f8 ^ g8;
            var x9 = f9 ^ g9;

            var negb = unchecked((int)-b);
            x0 &= negb;
            x1 &= negb;
            x2 &= negb;
            x3 &= negb;
            x4 &= negb;
            x5 &= negb;
            x6 &= negb;
            x7 &= negb;
            x8 &= negb;
            x9 &= negb;
            f.X0 = f0 ^ x0;
            f.X1 = f1 ^ x1;
            f.X2 = f2 ^ x2;
            f.X3 = f3 ^ x3;
            f.X4 = f4 ^ x4;
            f.X5 = f5 ^ x5;
            f.X6 = f6 ^ x6;
            f.X7 = f7 ^ x7;
            f.X8 = f8 ^ x8;
            f.X9 = f9 ^ x9;
            g.X0 = g0 ^ x0;
            g.X1 = g1 ^ x1;
            g.X2 = g2 ^ x2;
            g.X3 = g3 ^ x3;
            g.X4 = g4 ^ x4;
            g.X5 = g5 ^ x5;
            g.X6 = g6 ^ x6;
            g.X7 = g7 ^ x7;
            g.X8 = g8 ^ x8;
            g.X9 = g9 ^ x9;
        }
    }
}
'''
'''--- Src/NearClientUnity/Utilities/Ed25519/Internal/Ed25519Ref10/Field/Operations/FieldOperations_0.cs ---
﻿namespace NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.Field.Operations
{
    internal static partial class FieldOperations
    {
        public static void FieldOperations_0(out FieldElement h)
        {
            h = default;
        }
    }
}
'''
'''--- Src/NearClientUnity/Utilities/Ed25519/Internal/Ed25519Ref10/Field/Operations/FieldOperations_1.cs ---
﻿namespace NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.Field.Operations
{
    internal static partial class FieldOperations
    {
        public static void FieldOperations_1(out FieldElement h)
        {
            h = default;
            h.X0 = 1;
        }
    }
}
'''
'''--- Src/NearClientUnity/Utilities/Ed25519/Internal/Ed25519Ref10/Field/Operations/FromBytes.cs ---
﻿namespace NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.Field.Operations
{
    internal static partial class FieldOperations
    {
        // Ignores top bit of h.
        internal static void FromBytes(out FieldElement h, byte[] data, int offset)
        {
            var h0 = Load_4(data, offset);
            var h1 = Load_3(data, offset + 4) << 6;
            var h2 = Load_3(data, offset + 7) << 5;
            var h3 = Load_3(data, offset + 10) << 3;
            var h4 = Load_3(data, offset + 13) << 2;
            var h5 = Load_4(data, offset + 16);
            var h6 = Load_3(data, offset + 20) << 7;
            var h7 = Load_3(data, offset + 23) << 5;
            var h8 = Load_3(data, offset + 26) << 4;
            var h9 = (Load_3(data, offset + 29) & 8388607) << 2;

            var carry9 = (h9 + (1 << 24)) >> 25;
            h0 += carry9 * 19;
            h9 -= carry9 << 25;
            var carry1 = (h1 + (1 << 24)) >> 25;
            h2 += carry1;
            h1 -= carry1 << 25;
            var carry3 = (h3 + (1 << 24)) >> 25;
            h4 += carry3;
            h3 -= carry3 << 25;
            var carry5 = (h5 + (1 << 24)) >> 25;
            h6 += carry5;
            h5 -= carry5 << 25;
            var carry7 = (h7 + (1 << 24)) >> 25;
            h8 += carry7;
            h7 -= carry7 << 25;

            var carry0 = (h0 + (1 << 25)) >> 26;
            h1 += carry0;
            h0 -= carry0 << 26;
            var carry2 = (h2 + (1 << 25)) >> 26;
            h3 += carry2;
            h2 -= carry2 << 26;
            var carry4 = (h4 + (1 << 25)) >> 26;
            h5 += carry4;
            h4 -= carry4 << 26;
            var carry6 = (h6 + (1 << 25)) >> 26;
            h7 += carry6;
            h6 -= carry6 << 26;
            var carry8 = (h8 + (1 << 25)) >> 26;
            h9 += carry8;
            h8 -= carry8 << 26;

            h.X0 = (int)h0;
            h.X1 = (int)h1;
            h.X2 = (int)h2;
            h.X3 = (int)h3;
            h.X4 = (int)h4;
            h.X5 = (int)h5;
            h.X6 = (int)h6;
            h.X7 = (int)h7;
            h.X8 = (int)h8;
            h.X9 = (int)h9;
        }
    }
}
'''
'''--- Src/NearClientUnity/Utilities/Ed25519/Internal/Ed25519Ref10/Field/Operations/FromBytes2.cs ---
﻿namespace NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.Field.Operations
{
    internal static partial class FieldOperations
    {
        // does NOT ignore top bit
        internal static void FromBytes2(out FieldElement h, byte[] data, int offset)
        {
            var h0 = Load_4(data, offset);
            var h1 = Load_3(data, offset + 4) << 6;
            var h2 = Load_3(data, offset + 7) << 5;
            var h3 = Load_3(data, offset + 10) << 3;
            var h4 = Load_3(data, offset + 13) << 2;
            var h5 = Load_4(data, offset + 16);
            var h6 = Load_3(data, offset + 20) << 7;
            var h7 = Load_3(data, offset + 23) << 5;
            var h8 = Load_3(data, offset + 26) << 4;
            var h9 = Load_3(data, offset + 29) << 2;

            var carry9 = (h9 + (1 << 24)) >> 25;
            h0 += carry9 * 19;
            h9 -= carry9 << 25;
            var carry1 = (h1 + (1 << 24)) >> 25;
            h2 += carry1;
            h1 -= carry1 << 25;
            var carry3 = (h3 + (1 << 24)) >> 25;
            h4 += carry3;
            h3 -= carry3 << 25;
            var carry5 = (h5 + (1 << 24)) >> 25;
            h6 += carry5;
            h5 -= carry5 << 25;
            var carry7 = (h7 + (1 << 24)) >> 25;
            h8 += carry7;
            h7 -= carry7 << 25;

            var carry0 = (h0 + (1 << 25)) >> 26;
            h1 += carry0;
            h0 -= carry0 << 26;
            var carry2 = (h2 + (1 << 25)) >> 26;
            h3 += carry2;
            h2 -= carry2 << 26;
            var carry4 = (h4 + (1 << 25)) >> 26;
            h5 += carry4;
            h4 -= carry4 << 26;
            var carry6 = (h6 + (1 << 25)) >> 26;
            h7 += carry6;
            h6 -= carry6 << 26;
            var carry8 = (h8 + (1 << 25)) >> 26;
            h9 += carry8;
            h8 -= carry8 << 26;

            h.X0 = (int)h0;
            h.X1 = (int)h1;
            h.X2 = (int)h2;
            h.X3 = (int)h3;
            h.X4 = (int)h4;
            h.X5 = (int)h5;
            h.X6 = (int)h6;
            h.X7 = (int)h7;
            h.X8 = (int)h8;
            h.X9 = (int)h9;
        }
    }
}
'''
'''--- Src/NearClientUnity/Utilities/Ed25519/Internal/Ed25519Ref10/Field/Operations/Invert.cs ---
﻿namespace NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.Field.Operations
{
    internal static partial class FieldOperations
    {
        internal static void Invert(out FieldElement result, ref FieldElement z)
        {
            int i;

            /* qhasm: z2 = z1^2^1 */
            /* asm 1: Square(>z2=fe#1,<z1=fe#11); for (i = 1;i < 1;++i) Square(>z2=fe#1,>z2=fe#1); */
            /* asm 2: Square(>z2=t0,<z1=z); for (i = 1;i < 1;++i) Square(>z2=t0,>z2=t0); */
            Square(out var t0, ref z); //for (i = 1; i < 1; ++i) Square(out t0, ref t0);

            /* qhasm: z8 = z2^2^2 */
            /* asm 1: Square(>z8=fe#2,<z2=fe#1); for (i = 1;i < 2;++i) Square(>z8=fe#2,>z8=fe#2); */
            /* asm 2: Square(>z8=t1,<z2=t0); for (i = 1;i < 2;++i) Square(>z8=t1,>z8=t1); */
            Square(out var t1, ref t0);
            for (i = 1; i < 2; ++i) Square(out t1, ref t1);

            /* qhasm: z9 = z1*z8 */
            /* asm 1: Multiplication(>z9=fe#2,<z1=fe#11,<z8=fe#2); */
            /* asm 2: Multiplication(>z9=t1,<z1=z,<z8=t1); */
            Multiplication(out t1, ref z, ref t1);

            /* qhasm: z11 = z2*z9 */
            /* asm 1: Multiplication(>z11=fe#1,<z2=fe#1,<z9=fe#2); */
            /* asm 2: Multiplication(>z11=t0,<z2=t0,<z9=t1); */
            Multiplication(out t0, ref t0, ref t1);

            /* qhasm: z22 = z11^2^1 */
            /* asm 1: Square(>z22=fe#3,<z11=fe#1); for (i = 1;i < 1;++i) Square(>z22=fe#3,>z22=fe#3); */
            /* asm 2: Square(>z22=t2,<z11=t0); for (i = 1;i < 1;++i) Square(>z22=t2,>z22=t2); */
            Square(out var t2, ref t0); //for (i = 1; i < 1; ++i) Square(out t2, ref t2);

            /* qhasm: z_5_0 = z9*z22 */
            /* asm 1: Multiplication(>z_5_0=fe#2,<z9=fe#2,<z22=fe#3); */
            /* asm 2: Multiplication(>z_5_0=t1,<z9=t1,<z22=t2); */
            Multiplication(out t1, ref t1, ref t2);

            /* qhasm: z_10_5 = z_5_0^2^5 */
            /* asm 1: Square(>z_10_5=fe#3,<z_5_0=fe#2); for (i = 1;i < 5;++i) Square(>z_10_5=fe#3,>z_10_5=fe#3); */
            /* asm 2: Square(>z_10_5=t2,<z_5_0=t1); for (i = 1;i < 5;++i) Square(>z_10_5=t2,>z_10_5=t2); */
            Square(out t2, ref t1);
            for (i = 1; i < 5; ++i) Square(out t2, ref t2);

            /* qhasm: z_10_0 = z_10_5*z_5_0 */
            /* asm 1: Multiplication(>z_10_0=fe#2,<z_10_5=fe#3,<z_5_0=fe#2); */
            /* asm 2: Multiplication(>z_10_0=t1,<z_10_5=t2,<z_5_0=t1); */
            Multiplication(out t1, ref t2, ref t1);

            /* qhasm: z_20_10 = z_10_0^2^10 */
            /* asm 1: Square(>z_20_10=fe#3,<z_10_0=fe#2); for (i = 1;i < 10;++i) Square(>z_20_10=fe#3,>z_20_10=fe#3); */
            /* asm 2: Square(>z_20_10=t2,<z_10_0=t1); for (i = 1;i < 10;++i) Square(>z_20_10=t2,>z_20_10=t2); */
            Square(out t2, ref t1);
            for (i = 1; i < 10; ++i) Square(out t2, ref t2);

            /* qhasm: z_20_0 = z_20_10*z_10_0 */
            /* asm 1: Multiplication(>z_20_0=fe#3,<z_20_10=fe#3,<z_10_0=fe#2); */
            /* asm 2: Multiplication(>z_20_0=t2,<z_20_10=t2,<z_10_0=t1); */
            Multiplication(out t2, ref t2, ref t1);

            /* qhasm: z_40_20 = z_20_0^2^20 */
            /* asm 1: Square(>z_40_20=fe#4,<z_20_0=fe#3); for (i = 1;i < 20;++i) Square(>z_40_20=fe#4,>z_40_20=fe#4); */
            /* asm 2: Square(>z_40_20=t3,<z_20_0=t2); for (i = 1;i < 20;++i) Square(>z_40_20=t3,>z_40_20=t3); */
            Square(out var t3, ref t2);
            for (i = 1; i < 20; ++i) Square(out t3, ref t3);

            /* qhasm: z_40_0 = z_40_20*z_20_0 */
            /* asm 1: Multiplication(>z_40_0=fe#3,<z_40_20=fe#4,<z_20_0=fe#3); */
            /* asm 2: Multiplication(>z_40_0=t2,<z_40_20=t3,<z_20_0=t2); */
            Multiplication(out t2, ref t3, ref t2);

            /* qhasm: z_50_10 = z_40_0^2^10 */
            /* asm 1: Square(>z_50_10=fe#3,<z_40_0=fe#3); for (i = 1;i < 10;++i) Square(>z_50_10=fe#3,>z_50_10=fe#3); */
            /* asm 2: Square(>z_50_10=t2,<z_40_0=t2); for (i = 1;i < 10;++i) Square(>z_50_10=t2,>z_50_10=t2); */
            Square(out t2, ref t2);
            for (i = 1; i < 10; ++i) Square(out t2, ref t2);

            /* qhasm: z_50_0 = z_50_10*z_10_0 */
            /* asm 1: Multiplication(>z_50_0=fe#2,<z_50_10=fe#3,<z_10_0=fe#2); */
            /* asm 2: Multiplication(>z_50_0=t1,<z_50_10=t2,<z_10_0=t1); */
            Multiplication(out t1, ref t2, ref t1);

            /* qhasm: z_100_50 = z_50_0^2^50 */
            /* asm 1: Square(>z_100_50=fe#3,<z_50_0=fe#2); for (i = 1;i < 50;++i) Square(>z_100_50=fe#3,>z_100_50=fe#3); */
            /* asm 2: Square(>z_100_50=t2,<z_50_0=t1); for (i = 1;i < 50;++i) Square(>z_100_50=t2,>z_100_50=t2); */
            Square(out t2, ref t1);
            for (i = 1; i < 50; ++i) Square(out t2, ref t2);

            /* qhasm: z_100_0 = z_100_50*z_50_0 */
            /* asm 1: Multiplication(>z_100_0=fe#3,<z_100_50=fe#3,<z_50_0=fe#2); */
            /* asm 2: Multiplication(>z_100_0=t2,<z_100_50=t2,<z_50_0=t1); */
            Multiplication(out t2, ref t2, ref t1);

            /* qhasm: z_200_100 = z_100_0^2^100 */
            /* asm 1: Square(>z_200_100=fe#4,<z_100_0=fe#3); for (i = 1;i < 100;++i) Square(>z_200_100=fe#4,>z_200_100=fe#4); */
            /* asm 2: Square(>z_200_100=t3,<z_100_0=t2); for (i = 1;i < 100;++i) Square(>z_200_100=t3,>z_200_100=t3); */
            Square(out t3, ref t2);
            for (i = 1; i < 100; ++i) Square(out t3, ref t3);

            /* qhasm: z_200_0 = z_200_100*z_100_0 */
            /* asm 1: Multiplication(>z_200_0=fe#3,<z_200_100=fe#4,<z_100_0=fe#3); */
            /* asm 2: Multiplication(>z_200_0=t2,<z_200_100=t3,<z_100_0=t2); */
            Multiplication(out t2, ref t3, ref t2);

            /* qhasm: z_250_50 = z_200_0^2^50 */
            /* asm 1: Square(>z_250_50=fe#3,<z_200_0=fe#3); for (i = 1;i < 50;++i) Square(>z_250_50=fe#3,>z_250_50=fe#3); */
            /* asm 2: Square(>z_250_50=t2,<z_200_0=t2); for (i = 1;i < 50;++i) Square(>z_250_50=t2,>z_250_50=t2); */
            Square(out t2, ref t2);
            for (i = 1; i < 50; ++i) Square(out t2, ref t2);

            /* qhasm: z_250_0 = z_250_50*z_50_0 */
            /* asm 1: Multiplication(>z_250_0=fe#2,<z_250_50=fe#3,<z_50_0=fe#2); */
            /* asm 2: Multiplication(>z_250_0=t1,<z_250_50=t2,<z_50_0=t1); */
            Multiplication(out t1, ref t2, ref t1);

            /* qhasm: z_255_5 = z_250_0^2^5 */
            /* asm 1: Square(>z_255_5=fe#2,<z_250_0=fe#2); for (i = 1;i < 5;++i) Square(>z_255_5=fe#2,>z_255_5=fe#2); */
            /* asm 2: Square(>z_255_5=t1,<z_250_0=t1); for (i = 1;i < 5;++i) Square(>z_255_5=t1,>z_255_5=t1); */
            Square(out t1, ref t1);
            for (i = 1; i < 5; ++i) Square(out t1, ref t1);

            /* qhasm: z_255_21 = z_255_5*z11 */
            /* asm 1: Multiplication(>z_255_21=fe#12,<z_255_5=fe#2,<z11=fe#1); */
            /* asm 2: Multiplication(>z_255_21=out,<z_255_5=t1,<z11=t0); */
            Multiplication(out result, ref t1, ref t0);

            /* qhasm: return */
        }
    }
}
'''
'''--- Src/NearClientUnity/Utilities/Ed25519/Internal/Ed25519Ref10/Field/Operations/IsNegative.cs ---
﻿namespace NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.Field.Operations
{
    internal static partial class FieldOperations
    {
        /*
        return 1 if f is in {1,3,5,...,q-2}
        return 0 if f is in {0,2,4,...,q-1}

        Preconditions:
        |f| bounded by 1.1*2^26,1.1*2^25,1.1*2^26,1.1*2^25,etc.
        */

        //int IsNegative(const fe f)
        public static int IsNegative(ref FieldElement f)
        {
            Reduce(out var fr, ref f);
            return fr.X0 & 1;
        }
    }
}
'''
'''--- Src/NearClientUnity/Utilities/Ed25519/Internal/Ed25519Ref10/Field/Operations/IsNonZero.cs ---
﻿namespace NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.Field.Operations
{
    internal static partial class FieldOperations
    {
        /*
        return 1 if f == 0
        return 0 if f != 0

        Preconditions:
           |f| bounded by 1.1*2^26,1.1*2^25,1.1*2^26,1.1*2^25,etc.
        */

        // Todo: Discuss this with upstream Above comment is from the original code. But I believe
        // the original code returned 0 if f == 0
        // -1 if f != 0 This code actually returns 0 if f==0 and 1 if f != 0
        internal static int IsNonZero(ref FieldElement f)
        {
            Reduce(out var fieldElement, ref f);
            var differentBits = 0;
            differentBits |= fieldElement.X0;
            differentBits |= fieldElement.X1;
            differentBits |= fieldElement.X2;
            differentBits |= fieldElement.X3;
            differentBits |= fieldElement.X4;
            differentBits |= fieldElement.X5;
            differentBits |= fieldElement.X6;
            differentBits |= fieldElement.X7;
            differentBits |= fieldElement.X8;
            differentBits |= fieldElement.X9;
            return (int)((unchecked((uint)differentBits - 1) >> 31) ^ 1);
        }
    }
}
'''
'''--- Src/NearClientUnity/Utilities/Ed25519/Internal/Ed25519Ref10/Field/Operations/Load.cs ---
﻿namespace NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.Field.Operations
{
    internal static partial class FieldOperations
    {
        private static long Load_3(byte[] data, int offset)
        {
            uint result = data[offset + 0];
            result |= (uint)data[offset + 1] << 8;
            result |= (uint)data[offset + 2] << 16;
            return result;
        }

        private static long Load_4(byte[] data, int offset)
        {
            uint result = data[offset + 0];
            result |= (uint)data[offset + 1] << 8;
            result |= (uint)data[offset + 2] << 16;
            result |= (uint)data[offset + 3] << 24;
            return result;
        }
    }
}
'''
'''--- Src/NearClientUnity/Utilities/Ed25519/Internal/Ed25519Ref10/Field/Operations/Multiplication.cs ---
﻿namespace NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.Field.Operations
{
    internal static partial class FieldOperations
    {
        /*
		h = f * g
		Can overlap h with f or g.

		Preconditions:
		   |f| bounded by 1.65*2^26,1.65*2^25,1.65*2^26,1.65*2^25,etc.
		   |g| bounded by 1.65*2^26,1.65*2^25,1.65*2^26,1.65*2^25,etc.

		Postconditions:
		   |h| bounded by 1.01*2^25,1.01*2^24,1.01*2^25,1.01*2^24,etc.
		*/

        /*
		Notes on implementation strategy:

		Using schoolbook multiplication.
		Karatsuba would save a little in some cost models.

		Most multiplications by 2 and 19 are 32-bit precomputations;
		cheaper than 64-bit postcomputations.

		There is one remaining multiplication by 19 in the carry chain;
		one *19 precomputation can be merged into this,
		but the resulting data flow is considerably less clean.

		There are 12 carries below.
		10 of them are 2-way parallelizable and vectorizable.
		Can get away with 11 carries, but then data flow is much deeper.

		With tighter constraints on inputs can squeeze carries into int32.
		*/

        internal static void Multiplication(out FieldElement h, ref FieldElement f, ref FieldElement g)
        {
            var f0 = f.X0;
            var f1 = f.X1;
            var f2 = f.X2;
            var f3 = f.X3;
            var f4 = f.X4;
            var f5 = f.X5;
            var f6 = f.X6;
            var f7 = f.X7;
            var f8 = f.X8;
            var f9 = f.X9;
            var g0 = g.X0;
            var g1 = g.X1;
            var g2 = g.X2;
            var g3 = g.X3;
            var g4 = g.X4;
            var g5 = g.X5;
            var g6 = g.X6;
            var g7 = g.X7;
            var g8 = g.X8;
            var g9 = g.X9;

            var g1_19 = 19 * g1; /* 1.959375*2^29 */
            var g2_19 = 19 * g2; /* 1.959375*2^30; still ok */
            var g3_19 = 19 * g3;
            var g4_19 = 19 * g4;
            var g5_19 = 19 * g5;
            var g6_19 = 19 * g6;
            var g7_19 = 19 * g7;
            var g8_19 = 19 * g8;
            var g9_19 = 19 * g9;

            var f1_2 = 2 * f1;
            var f3_2 = 2 * f3;
            var f5_2 = 2 * f5;
            var f7_2 = 2 * f7;
            var f9_2 = 2 * f9;

            var f0g0 = f0 * (long)g0;
            var f0g1 = f0 * (long)g1;
            var f0g2 = f0 * (long)g2;
            var f0g3 = f0 * (long)g3;
            var f0g4 = f0 * (long)g4;
            var f0g5 = f0 * (long)g5;
            var f0g6 = f0 * (long)g6;
            var f0g7 = f0 * (long)g7;
            var f0g8 = f0 * (long)g8;
            var f0g9 = f0 * (long)g9;
            var f1g0 = f1 * (long)g0;
            var f1g1_2 = f1_2 * (long)g1;
            var f1g2 = f1 * (long)g2;
            var f1g3_2 = f1_2 * (long)g3;
            var f1g4 = f1 * (long)g4;
            var f1g5_2 = f1_2 * (long)g5;
            var f1g6 = f1 * (long)g6;
            var f1g7_2 = f1_2 * (long)g7;
            var f1g8 = f1 * (long)g8;
            var f1g9_38 = f1_2 * (long)g9_19;
            var f2g0 = f2 * (long)g0;
            var f2g1 = f2 * (long)g1;
            var f2g2 = f2 * (long)g2;
            var f2g3 = f2 * (long)g3;
            var f2g4 = f2 * (long)g4;
            var f2g5 = f2 * (long)g5;
            var f2g6 = f2 * (long)g6;
            var f2g7 = f2 * (long)g7;
            var f2g8_19 = f2 * (long)g8_19;
            var f2g9_19 = f2 * (long)g9_19;
            var f3g0 = f3 * (long)g0;
            var f3g1_2 = f3_2 * (long)g1;
            var f3g2 = f3 * (long)g2;
            var f3g3_2 = f3_2 * (long)g3;
            var f3g4 = f3 * (long)g4;
            var f3g5_2 = f3_2 * (long)g5;
            var f3g6 = f3 * (long)g6;
            var f3g7_38 = f3_2 * (long)g7_19;
            var f3g8_19 = f3 * (long)g8_19;
            var f3g9_38 = f3_2 * (long)g9_19;
            var f4g0 = f4 * (long)g0;
            var f4g1 = f4 * (long)g1;
            var f4g2 = f4 * (long)g2;
            var f4g3 = f4 * (long)g3;
            var f4g4 = f4 * (long)g4;
            var f4g5 = f4 * (long)g5;
            var f4g6_19 = f4 * (long)g6_19;
            var f4g7_19 = f4 * (long)g7_19;
            var f4g8_19 = f4 * (long)g8_19;
            var f4g9_19 = f4 * (long)g9_19;
            var f5g0 = f5 * (long)g0;
            var f5g1_2 = f5_2 * (long)g1;
            var f5g2 = f5 * (long)g2;
            var f5g3_2 = f5_2 * (long)g3;
            var f5g4 = f5 * (long)g4;
            var f5g5_38 = f5_2 * (long)g5_19;
            var f5g6_19 = f5 * (long)g6_19;
            var f5g7_38 = f5_2 * (long)g7_19;
            var f5g8_19 = f5 * (long)g8_19;
            var f5g9_38 = f5_2 * (long)g9_19;
            var f6g0 = f6 * (long)g0;
            var f6g1 = f6 * (long)g1;
            var f6g2 = f6 * (long)g2;
            var f6g3 = f6 * (long)g3;
            var f6g4_19 = f6 * (long)g4_19;
            var f6g5_19 = f6 * (long)g5_19;
            var f6g6_19 = f6 * (long)g6_19;
            var f6g7_19 = f6 * (long)g7_19;
            var f6g8_19 = f6 * (long)g8_19;
            var f6g9_19 = f6 * (long)g9_19;
            var f7g0 = f7 * (long)g0;
            var f7g1_2 = f7_2 * (long)g1;
            var f7g2 = f7 * (long)g2;
            var f7g3_38 = f7_2 * (long)g3_19;
            var f7g4_19 = f7 * (long)g4_19;
            var f7g5_38 = f7_2 * (long)g5_19;
            var f7g6_19 = f7 * (long)g6_19;
            var f7g7_38 = f7_2 * (long)g7_19;
            var f7g8_19 = f7 * (long)g8_19;
            var f7g9_38 = f7_2 * (long)g9_19;
            var f8g0 = f8 * (long)g0;
            var f8g1 = f8 * (long)g1;
            var f8g2_19 = f8 * (long)g2_19;
            var f8g3_19 = f8 * (long)g3_19;
            var f8g4_19 = f8 * (long)g4_19;
            var f8g5_19 = f8 * (long)g5_19;
            var f8g6_19 = f8 * (long)g6_19;
            var f8g7_19 = f8 * (long)g7_19;
            var f8g8_19 = f8 * (long)g8_19;
            var f8g9_19 = f8 * (long)g9_19;
            var f9g0 = f9 * (long)g0;
            var f9g1_38 = f9_2 * (long)g1_19;
            var f9g2_19 = f9 * (long)g2_19;
            var f9g3_38 = f9_2 * (long)g3_19;
            var f9g4_19 = f9 * (long)g4_19;
            var f9g5_38 = f9_2 * (long)g5_19;
            var f9g6_19 = f9 * (long)g6_19;
            var f9g7_38 = f9_2 * (long)g7_19;
            var f9g8_19 = f9 * (long)g8_19;
            var f9g9_38 = f9_2 * (long)g9_19;

            var h0 = f0g0 + f1g9_38 + f2g8_19 + f3g7_38 + f4g6_19 + f5g5_38 + f6g4_19 + f7g3_38 + f8g2_19 + f9g1_38;
            var h1 = f0g1 + f1g0 + f2g9_19 + f3g8_19 + f4g7_19 + f5g6_19 + f6g5_19 + f7g4_19 + f8g3_19 + f9g2_19;
            var h2 = f0g2 + f1g1_2 + f2g0 + f3g9_38 + f4g8_19 + f5g7_38 + f6g6_19 + f7g5_38 + f8g4_19 + f9g3_38;
            var h3 = f0g3 + f1g2 + f2g1 + f3g0 + f4g9_19 + f5g8_19 + f6g7_19 + f7g6_19 + f8g5_19 + f9g4_19;
            var h4 = f0g4 + f1g3_2 + f2g2 + f3g1_2 + f4g0 + f5g9_38 + f6g8_19 + f7g7_38 + f8g6_19 + f9g5_38;
            var h5 = f0g5 + f1g4 + f2g3 + f3g2 + f4g1 + f5g0 + f6g9_19 + f7g8_19 + f8g7_19 + f9g6_19;
            var h6 = f0g6 + f1g5_2 + f2g4 + f3g3_2 + f4g2 + f5g1_2 + f6g0 + f7g9_38 + f8g8_19 + f9g7_38;
            var h7 = f0g7 + f1g6 + f2g5 + f3g4 + f4g3 + f5g2 + f6g1 + f7g0 + f8g9_19 + f9g8_19;
            var h8 = f0g8 + f1g7_2 + f2g6 + f3g5_2 + f4g4 + f5g3_2 + f6g2 + f7g1_2 + f8g0 + f9g9_38;
            var h9 = f0g9 + f1g8 + f2g7 + f3g6 + f4g5 + f5g4 + f6g3 + f7g2 + f8g1 + f9g0;

            /*
            |h0| <= (1.65*1.65*2^52*(1+19+19+19+19)+1.65*1.65*2^50*(38+38+38+38+38))
              i.e. |h0| <= 1.4*2^60; narrower ranges for h2, h4, h6, h8
            |h1| <= (1.65*1.65*2^51*(1+1+19+19+19+19+19+19+19+19))
              i.e. |h1| <= 1.7*2^59; narrower ranges for h3, h5, h7, h9
            */

            var carry0 = (h0 + (1 << 25)) >> 26;
            h1 += carry0;
            h0 -= carry0 << 26;
            var carry4 = (h4 + (1 << 25)) >> 26;
            h5 += carry4;
            h4 -= carry4 << 26;
            /* |h0| <= 2^25 */
            /* |h4| <= 2^25 */
            /* |h1| <= 1.71*2^59 */
            /* |h5| <= 1.71*2^59 */

            var carry1 = (h1 + (1 << 24)) >> 25;
            h2 += carry1;
            h1 -= carry1 << 25;
            var carry5 = (h5 + (1 << 24)) >> 25;
            h6 += carry5;
            h5 -= carry5 << 25;
            /* |h1| <= 2^24; from now on fits into int32 */
            /* |h5| <= 2^24; from now on fits into int32 */
            /* |h2| <= 1.41*2^60 */
            /* |h6| <= 1.41*2^60 */

            var carry2 = (h2 + (1 << 25)) >> 26;
            h3 += carry2;
            h2 -= carry2 << 26;
            var carry6 = (h6 + (1 << 25)) >> 26;
            h7 += carry6;
            h6 -= carry6 << 26;
            /* |h2| <= 2^25; from now on fits into int32 unchanged */
            /* |h6| <= 2^25; from now on fits into int32 unchanged */
            /* |h3| <= 1.71*2^59 */
            /* |h7| <= 1.71*2^59 */

            var carry3 = (h3 + (1 << 24)) >> 25;
            h4 += carry3;
            h3 -= carry3 << 25;
            var carry7 = (h7 + (1 << 24)) >> 25;
            h8 += carry7;
            h7 -= carry7 << 25;
            /* |h3| <= 2^24; from now on fits into int32 unchanged */
            /* |h7| <= 2^24; from now on fits into int32 unchanged */
            /* |h4| <= 1.72*2^34 */
            /* |h8| <= 1.41*2^60 */

            carry4 = (h4 + (1 << 25)) >> 26;
            h5 += carry4;
            h4 -= carry4 << 26;
            var carry8 = (h8 + (1 << 25)) >> 26;
            h9 += carry8;
            h8 -= carry8 << 26;
            /* |h4| <= 2^25; from now on fits into int32 unchanged */
            /* |h8| <= 2^25; from now on fits into int32 unchanged */
            /* |h5| <= 1.01*2^24 */
            /* |h9| <= 1.71*2^59 */

            var carry9 = (h9 + (1 << 24)) >> 25;
            h0 += carry9 * 19;
            h9 -= carry9 << 25;
            /* |h9| <= 2^24; from now on fits into int32 unchanged */
            /* |h0| <= 1.1*2^39 */

            carry0 = (h0 + (1 << 25)) >> 26;
            h1 += carry0;
            h0 -= carry0 << 26;
            /* |h0| <= 2^25; from now on fits into int32 unchanged */
            /* |h1| <= 1.01*2^24 */

            h.X0 = (int)h0;
            h.X1 = (int)h1;
            h.X2 = (int)h2;
            h.X3 = (int)h3;
            h.X4 = (int)h4;
            h.X5 = (int)h5;
            h.X6 = (int)h6;
            h.X7 = (int)h7;
            h.X8 = (int)h8;
            h.X9 = (int)h9;
        }
    }
}
'''
'''--- Src/NearClientUnity/Utilities/Ed25519/Internal/Ed25519Ref10/Field/Operations/Multiplication121666.cs ---
﻿namespace NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.Field.Operations
{
    internal static partial class FieldOperations
    {
        /*
		h = f * 121666
		Can overlap h with f.

		Preconditions:
		   |f| bounded by 1.1*2^26,1.1*2^25,1.1*2^26,1.1*2^25,etc.

		Postconditions:
		   |h| bounded by 1.1*2^25,1.1*2^24,1.1*2^25,1.1*2^24,etc.
		*/

        public static void Multiplication121666(out FieldElement h, ref FieldElement f)
        {
            var f0 = f.X0;
            var f1 = f.X1;
            var f2 = f.X2;
            var f3 = f.X3;
            var f4 = f.X4;
            var f5 = f.X5;
            var f6 = f.X6;
            var f7 = f.X7;
            var f8 = f.X8;
            var f9 = f.X9;

            var h0 = f0 * 121666L;
            var h1 = f1 * 121666L;
            var h2 = f2 * 121666L;
            var h3 = f3 * 121666L;
            var h4 = f4 * 121666L;
            var h5 = f5 * 121666L;
            var h6 = f6 * 121666L;
            var h7 = f7 * 121666L;
            var h8 = f8 * 121666L;
            var h9 = f9 * 121666L;

            var carry9 = (h9 + (1 << 24)) >> 25;
            h0 += carry9 * 19;
            h9 -= carry9 << 25;
            var carry1 = (h1 + (1 << 24)) >> 25;
            h2 += carry1;
            h1 -= carry1 << 25;
            var carry3 = (h3 + (1 << 24)) >> 25;
            h4 += carry3;
            h3 -= carry3 << 25;
            var carry5 = (h5 + (1 << 24)) >> 25;
            h6 += carry5;
            h5 -= carry5 << 25;
            var carry7 = (h7 + (1 << 24)) >> 25;
            h8 += carry7;
            h7 -= carry7 << 25;

            var carry0 = (h0 + (1 << 25)) >> 26;
            h1 += carry0;
            h0 -= carry0 << 26;
            var carry2 = (h2 + (1 << 25)) >> 26;
            h3 += carry2;
            h2 -= carry2 << 26;
            var carry4 = (h4 + (1 << 25)) >> 26;
            h5 += carry4;
            h4 -= carry4 << 26;
            var carry6 = (h6 + (1 << 25)) >> 26;
            h7 += carry6;
            h6 -= carry6 << 26;
            var carry8 = (h8 + (1 << 25)) >> 26;
            h9 += carry8;
            h8 -= carry8 << 26;

            h.X0 = (int)h0;
            h.X1 = (int)h1;
            h.X2 = (int)h2;
            h.X3 = (int)h3;
            h.X4 = (int)h4;
            h.X5 = (int)h5;
            h.X6 = (int)h6;
            h.X7 = (int)h7;
            h.X8 = (int)h8;
            h.X9 = (int)h9;
        }
    }
}
'''
'''--- Src/NearClientUnity/Utilities/Ed25519/Internal/Ed25519Ref10/Field/Operations/Negative.cs ---
﻿namespace NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.Field.Operations
{
    internal static partial class FieldOperations
    {
        /*
		h = -f

		Preconditions:
		   |f| bounded by 1.1*2^25,1.1*2^24,1.1*2^25,1.1*2^24,etc.

		Postconditions:
		   |h| bounded by 1.1*2^25,1.1*2^24,1.1*2^25,1.1*2^24,etc.
		*/

        internal static void Negative(out FieldElement h, ref FieldElement f)
        {
            var f0 = f.X0;
            var f1 = f.X1;
            var f2 = f.X2;
            var f3 = f.X3;
            var f4 = f.X4;
            var f5 = f.X5;
            var f6 = f.X6;
            var f7 = f.X7;
            var f8 = f.X8;
            var f9 = f.X9;
            var h0 = -f0;
            var h1 = -f1;
            var h2 = -f2;
            var h3 = -f3;
            var h4 = -f4;
            var h5 = -f5;
            var h6 = -f6;
            var h7 = -f7;
            var h8 = -f8;
            var h9 = -f9;

            h.X0 = h0;
            h.X1 = h1;
            h.X2 = h2;
            h.X3 = h3;
            h.X4 = h4;
            h.X5 = h5;
            h.X6 = h6;
            h.X7 = h7;
            h.X8 = h8;
            h.X9 = h9;
        }
    }
}
'''
'''--- Src/NearClientUnity/Utilities/Ed25519/Internal/Ed25519Ref10/Field/Operations/Pow22523.cs ---
﻿namespace NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.Field.Operations
{
    internal static partial class FieldOperations
    {
        internal static void Pow22523(out FieldElement result, ref FieldElement z)
        {
            int i;

            /* qhasm: z2 = z1^2^1 */
            /* asm 1: Square(>z2=fe#1,<z1=fe#11); for (i = 1;i < 1;++i) Square(>z2=fe#1,>z2=fe#1); */
            /* asm 2: Square(>z2=t0,<z1=z); for (i = 1;i < 1;++i) Square(>z2=t0,>z2=t0); */
            Square(out var t0, ref z); //for (i = 1; i < 1; ++i) Square(out t0, ref t0);

            /* qhasm: z8 = z2^2^2 */
            /* asm 1: Square(>z8=fe#2,<z2=fe#1); for (i = 1;i < 2;++i) Square(>z8=fe#2,>z8=fe#2); */
            /* asm 2: Square(>z8=t1,<z2=t0); for (i = 1;i < 2;++i) Square(>z8=t1,>z8=t1); */
            Square(out var t1, ref t0);
            for (i = 1; i < 2; ++i) Square(out t1, ref t1);

            /* qhasm: z9 = z1*z8 */
            /* asm 1: Multiplication(>z9=fe#2,<z1=fe#11,<z8=fe#2); */
            /* asm 2: Multiplication(>z9=t1,<z1=z,<z8=t1); */
            Multiplication(out t1, ref z, ref t1);

            /* qhasm: z11 = z2*z9 */
            /* asm 1: Multiplication(>z11=fe#1,<z2=fe#1,<z9=fe#2); */
            /* asm 2: Multiplication(>z11=t0,<z2=t0,<z9=t1); */
            Multiplication(out t0, ref t0, ref t1);

            /* qhasm: z22 = z11^2^1 */
            /* asm 1: Square(>z22=fe#1,<z11=fe#1); for (i = 1;i < 1;++i) Square(>z22=fe#1,>z22=fe#1); */
            /* asm 2: Square(>z22=t0,<z11=t0); for (i = 1;i < 1;++i) Square(>z22=t0,>z22=t0); */
            Square(out t0, ref t0); //for (i = 1; i < 1; ++i) Square(out t0, ref  t0);

            /* qhasm: z_5_0 = z9*z22 */
            /* asm 1: Multiplication(>z_5_0=fe#1,<z9=fe#2,<z22=fe#1); */
            /* asm 2: Multiplication(>z_5_0=t0,<z9=t1,<z22=t0); */
            Multiplication(out t0, ref t1, ref t0);

            /* qhasm: z_10_5 = z_5_0^2^5 */
            /* asm 1: Square(>z_10_5=fe#2,<z_5_0=fe#1); for (i = 1;i < 5;++i) Square(>z_10_5=fe#2,>z_10_5=fe#2); */
            /* asm 2: Square(>z_10_5=t1,<z_5_0=t0); for (i = 1;i < 5;++i) Square(>z_10_5=t1,>z_10_5=t1); */
            Square(out t1, ref t0);
            for (i = 1; i < 5; ++i) Square(out t1, ref t1);

            /* qhasm: z_10_0 = z_10_5*z_5_0 */
            /* asm 1: Multiplication(>z_10_0=fe#1,<z_10_5=fe#2,<z_5_0=fe#1); */
            /* asm 2: Multiplication(>z_10_0=t0,<z_10_5=t1,<z_5_0=t0); */
            Multiplication(out t0, ref t1, ref t0);

            /* qhasm: z_20_10 = z_10_0^2^10 */
            /* asm 1: Square(>z_20_10=fe#2,<z_10_0=fe#1); for (i = 1;i < 10;++i) Square(>z_20_10=fe#2,>z_20_10=fe#2); */
            /* asm 2: Square(>z_20_10=t1,<z_10_0=t0); for (i = 1;i < 10;++i) Square(>z_20_10=t1,>z_20_10=t1); */
            Square(out t1, ref t0);
            for (i = 1; i < 10; ++i) Square(out t1, ref t1);

            /* qhasm: z_20_0 = z_20_10*z_10_0 */
            /* asm 1: Multiplication(>z_20_0=fe#2,<z_20_10=fe#2,<z_10_0=fe#1); */
            /* asm 2: Multiplication(>z_20_0=t1,<z_20_10=t1,<z_10_0=t0); */
            Multiplication(out t1, ref t1, ref t0);

            /* qhasm: z_40_20 = z_20_0^2^20 */
            /* asm 1: Square(>z_40_20=fe#3,<z_20_0=fe#2); for (i = 1;i < 20;++i) Square(>z_40_20=fe#3,>z_40_20=fe#3); */
            /* asm 2: Square(>z_40_20=t2,<z_20_0=t1); for (i = 1;i < 20;++i) Square(>z_40_20=t2,>z_40_20=t2); */
            Square(out var t2, ref t1);
            for (i = 1; i < 20; ++i) Square(out t2, ref t2);

            /* qhasm: z_40_0 = z_40_20*z_20_0 */
            /* asm 1: Multiplication(>z_40_0=fe#2,<z_40_20=fe#3,<z_20_0=fe#2); */
            /* asm 2: Multiplication(>z_40_0=t1,<z_40_20=t2,<z_20_0=t1); */
            Multiplication(out t1, ref t2, ref t1);

            /* qhasm: z_50_10 = z_40_0^2^10 */
            /* asm 1: Square(>z_50_10=fe#2,<z_40_0=fe#2); for (i = 1;i < 10;++i) Square(>z_50_10=fe#2,>z_50_10=fe#2); */
            /* asm 2: Square(>z_50_10=t1,<z_40_0=t1); for (i = 1;i < 10;++i) Square(>z_50_10=t1,>z_50_10=t1); */
            Square(out t1, ref t1);
            for (i = 1; i < 10; ++i) Square(out t1, ref t1);

            /* qhasm: z_50_0 = z_50_10*z_10_0 */
            /* asm 1: Multiplication(>z_50_0=fe#1,<z_50_10=fe#2,<z_10_0=fe#1); */
            /* asm 2: Multiplication(>z_50_0=t0,<z_50_10=t1,<z_10_0=t0); */
            Multiplication(out t0, ref t1, ref t0);

            /* qhasm: z_100_50 = z_50_0^2^50 */
            /* asm 1: Square(>z_100_50=fe#2,<z_50_0=fe#1); for (i = 1;i < 50;++i) Square(>z_100_50=fe#2,>z_100_50=fe#2); */
            /* asm 2: Square(>z_100_50=t1,<z_50_0=t0); for (i = 1;i < 50;++i) Square(>z_100_50=t1,>z_100_50=t1); */
            Square(out t1, ref t0);
            for (i = 1; i < 50; ++i) Square(out t1, ref t1);

            /* qhasm: z_100_0 = z_100_50*z_50_0 */
            /* asm 1: Multiplication(>z_100_0=fe#2,<z_100_50=fe#2,<z_50_0=fe#1); */
            /* asm 2: Multiplication(>z_100_0=t1,<z_100_50=t1,<z_50_0=t0); */
            Multiplication(out t1, ref t1, ref t0);

            /* qhasm: z_200_100 = z_100_0^2^100 */
            /* asm 1: Square(>z_200_100=fe#3,<z_100_0=fe#2); for (i = 1;i < 100;++i) Square(>z_200_100=fe#3,>z_200_100=fe#3); */
            /* asm 2: Square(>z_200_100=t2,<z_100_0=t1); for (i = 1;i < 100;++i) Square(>z_200_100=t2,>z_200_100=t2); */
            Square(out t2, ref t1);
            for (i = 1; i < 100; ++i) Square(out t2, ref t2);

            /* qhasm: z_200_0 = z_200_100*z_100_0 */
            /* asm 1: Multiplication(>z_200_0=fe#2,<z_200_100=fe#3,<z_100_0=fe#2); */
            /* asm 2: Multiplication(>z_200_0=t1,<z_200_100=t2,<z_100_0=t1); */
            Multiplication(out t1, ref t2, ref t1);

            /* qhasm: z_250_50 = z_200_0^2^50 */
            /* asm 1: Square(>z_250_50=fe#2,<z_200_0=fe#2); for (i = 1;i < 50;++i) Square(>z_250_50=fe#2,>z_250_50=fe#2); */
            /* asm 2: Square(>z_250_50=t1,<z_200_0=t1); for (i = 1;i < 50;++i) Square(>z_250_50=t1,>z_250_50=t1); */
            Square(out t1, ref t1);
            for (i = 1; i < 50; ++i) Square(out t1, ref t1);

            /* qhasm: z_250_0 = z_250_50*z_50_0 */
            /* asm 1: Multiplication(>z_250_0=fe#1,<z_250_50=fe#2,<z_50_0=fe#1); */
            /* asm 2: Multiplication(>z_250_0=t0,<z_250_50=t1,<z_50_0=t0); */
            Multiplication(out t0, ref t1, ref t0);

            /* qhasm: z_252_2 = z_250_0^2^2 */
            /* asm 1: Square(>z_252_2=fe#1,<z_250_0=fe#1); for (i = 1;i < 2;++i) Square(>z_252_2=fe#1,>z_252_2=fe#1); */
            /* asm 2: Square(>z_252_2=t0,<z_250_0=t0); for (i = 1;i < 2;++i) Square(>z_252_2=t0,>z_252_2=t0); */
            Square(out t0, ref t0);
            for (i = 1; i < 2; ++i) Square(out t0, ref t0);

            /* qhasm: z_252_3 = z_252_2*z1 */
            /* asm 1: Multiplication(>z_252_3=fe#12,<z_252_2=fe#1,<z1=fe#11); */
            /* asm 2: Multiplication(>z_252_3=out,<z_252_2=t0,<z1=z); */
            Multiplication(out result, ref t0, ref z);

            /* qhasm: return */
        }
    }
}
'''
'''--- Src/NearClientUnity/Utilities/Ed25519/Internal/Ed25519Ref10/Field/Operations/Reduce.cs ---
﻿namespace NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.Field.Operations
{
    internal static partial class FieldOperations
    {
        private static void Reduce(out FieldElement hr, ref FieldElement h)
        {
            var h0 = h.X0;
            var h1 = h.X1;
            var h2 = h.X2;
            var h3 = h.X3;
            var h4 = h.X4;
            var h5 = h.X5;
            var h6 = h.X6;
            var h7 = h.X7;
            var h8 = h.X8;
            var h9 = h.X9;

            var q = (19 * h9 + (1 << 24)) >> 25;
            q = (h0 + q) >> 26;
            q = (h1 + q) >> 25;
            q = (h2 + q) >> 26;
            q = (h3 + q) >> 25;
            q = (h4 + q) >> 26;
            q = (h5 + q) >> 25;
            q = (h6 + q) >> 26;
            q = (h7 + q) >> 25;
            q = (h8 + q) >> 26;
            q = (h9 + q) >> 25;

            /* Goal: Output h-(2^255-19)q, which is between 0 and 2^255-20. */
            h0 += 19 * q;
            /* Goal: Output h-2^255 q, which is between 0 and 2^255-20. */

            var carry0 = h0 >> 26;
            h1 += carry0;
            h0 -= carry0 << 26;
            var carry1 = h1 >> 25;
            h2 += carry1;
            h1 -= carry1 << 25;
            var carry2 = h2 >> 26;
            h3 += carry2;
            h2 -= carry2 << 26;
            var carry3 = h3 >> 25;
            h4 += carry3;
            h3 -= carry3 << 25;
            var carry4 = h4 >> 26;
            h5 += carry4;
            h4 -= carry4 << 26;
            var carry5 = h5 >> 25;
            h6 += carry5;
            h5 -= carry5 << 25;
            var carry6 = h6 >> 26;
            h7 += carry6;
            h6 -= carry6 << 26;
            var carry7 = h7 >> 25;
            h8 += carry7;
            h7 -= carry7 << 25;
            var carry8 = h8 >> 26;
            h9 += carry8;
            h8 -= carry8 << 26;
            var carry9 = h9 >> 25;
            h9 -= carry9 << 25;
            /* h10 = carry9 */

            hr.X0 = h0;
            hr.X1 = h1;
            hr.X2 = h2;
            hr.X3 = h3;
            hr.X4 = h4;
            hr.X5 = h5;
            hr.X6 = h6;
            hr.X7 = h7;
            hr.X8 = h8;
            hr.X9 = h9;
        }
    }
}
'''
'''--- Src/NearClientUnity/Utilities/Ed25519/Internal/Ed25519Ref10/Field/Operations/Square.cs ---
﻿namespace NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.Field.Operations
{
    internal static partial class FieldOperations
    {
        /*
		h = f * f
		Can overlap h with f.

		Preconditions:
		   |f| bounded by 1.65*2^26,1.65*2^25,1.65*2^26,1.65*2^25,etc.

		Postconditions:
		   |h| bounded by 1.01*2^25,1.01*2^24,1.01*2^25,1.01*2^24,etc.
		*/

        /*
		See Multiplication.c for discussion of implementation strategy.
		*/

        internal static void Square(out FieldElement h, ref FieldElement f)
        {
            var f0 = f.X0;
            var f1 = f.X1;
            var f2 = f.X2;
            var f3 = f.X3;
            var f4 = f.X4;
            var f5 = f.X5;
            var f6 = f.X6;
            var f7 = f.X7;
            var f8 = f.X8;
            var f9 = f.X9;

            var f0_2 = 2 * f0;
            var f1_2 = 2 * f1;
            var f2_2 = 2 * f2;
            var f3_2 = 2 * f3;
            var f4_2 = 2 * f4;
            var f5_2 = 2 * f5;
            var f6_2 = 2 * f6;
            var f7_2 = 2 * f7;
            var f5_38 = 38 * f5; /* 1.959375*2^30 */
            var f6_19 = 19 * f6; /* 1.959375*2^30 */
            var f7_38 = 38 * f7; /* 1.959375*2^30 */
            var f8_19 = 19 * f8; /* 1.959375*2^30 */
            var f9_38 = 38 * f9; /* 1.959375*2^30 */

            var f0f0 = f0 * (long)f0;
            var f0f1_2 = f0_2 * (long)f1;
            var f0f2_2 = f0_2 * (long)f2;
            var f0f3_2 = f0_2 * (long)f3;
            var f0f4_2 = f0_2 * (long)f4;
            var f0f5_2 = f0_2 * (long)f5;
            var f0f6_2 = f0_2 * (long)f6;
            var f0f7_2 = f0_2 * (long)f7;
            var f0f8_2 = f0_2 * (long)f8;
            var f0f9_2 = f0_2 * (long)f9;
            var f1f1_2 = f1_2 * (long)f1;
            var f1f2_2 = f1_2 * (long)f2;
            var f1f3_4 = f1_2 * (long)f3_2;
            var f1f4_2 = f1_2 * (long)f4;
            var f1f5_4 = f1_2 * (long)f5_2;
            var f1f6_2 = f1_2 * (long)f6;
            var f1f7_4 = f1_2 * (long)f7_2;
            var f1f8_2 = f1_2 * (long)f8;
            var f1f9_76 = f1_2 * (long)f9_38;
            var f2f2 = f2 * (long)f2;
            var f2f3_2 = f2_2 * (long)f3;
            var f2f4_2 = f2_2 * (long)f4;
            var f2f5_2 = f2_2 * (long)f5;
            var f2f6_2 = f2_2 * (long)f6;
            var f2f7_2 = f2_2 * (long)f7;
            var f2f8_38 = f2_2 * (long)f8_19;
            var f2f9_38 = f2 * (long)f9_38;
            var f3f3_2 = f3_2 * (long)f3;
            var f3f4_2 = f3_2 * (long)f4;
            var f3f5_4 = f3_2 * (long)f5_2;
            var f3f6_2 = f3_2 * (long)f6;
            var f3f7_76 = f3_2 * (long)f7_38;
            var f3f8_38 = f3_2 * (long)f8_19;
            var f3f9_76 = f3_2 * (long)f9_38;
            var f4f4 = f4 * (long)f4;
            var f4f5_2 = f4_2 * (long)f5;
            var f4f6_38 = f4_2 * (long)f6_19;
            var f4f7_38 = f4 * (long)f7_38;
            var f4f8_38 = f4_2 * (long)f8_19;
            var f4f9_38 = f4 * (long)f9_38;
            var f5f5_38 = f5 * (long)f5_38;
            var f5f6_38 = f5_2 * (long)f6_19;
            var f5f7_76 = f5_2 * (long)f7_38;
            var f5f8_38 = f5_2 * (long)f8_19;
            var f5f9_76 = f5_2 * (long)f9_38;
            var f6f6_19 = f6 * (long)f6_19;
            var f6f7_38 = f6 * (long)f7_38;
            var f6f8_38 = f6_2 * (long)f8_19;
            var f6f9_38 = f6 * (long)f9_38;
            var f7f7_38 = f7 * (long)f7_38;
            var f7f8_38 = f7_2 * (long)f8_19;
            var f7f9_76 = f7_2 * (long)f9_38;
            var f8f8_19 = f8 * (long)f8_19;
            var f8f9_38 = f8 * (long)f9_38;
            var f9f9_38 = f9 * (long)f9_38;

            var h0 = f0f0 + f1f9_76 + f2f8_38 + f3f7_76 + f4f6_38 + f5f5_38;
            var h1 = f0f1_2 + f2f9_38 + f3f8_38 + f4f7_38 + f5f6_38;
            var h2 = f0f2_2 + f1f1_2 + f3f9_76 + f4f8_38 + f5f7_76 + f6f6_19;
            var h3 = f0f3_2 + f1f2_2 + f4f9_38 + f5f8_38 + f6f7_38;
            var h4 = f0f4_2 + f1f3_4 + f2f2 + f5f9_76 + f6f8_38 + f7f7_38;
            var h5 = f0f5_2 + f1f4_2 + f2f3_2 + f6f9_38 + f7f8_38;
            var h6 = f0f6_2 + f1f5_4 + f2f4_2 + f3f3_2 + f7f9_76 + f8f8_19;
            var h7 = f0f7_2 + f1f6_2 + f2f5_2 + f3f4_2 + f8f9_38;
            var h8 = f0f8_2 + f1f7_4 + f2f6_2 + f3f5_4 + f4f4 + f9f9_38;
            var h9 = f0f9_2 + f1f8_2 + f2f7_2 + f3f6_2 + f4f5_2;

            var carry0 = (h0 + (1 << 25)) >> 26;
            h1 += carry0;
            h0 -= carry0 << 26;
            var carry4 = (h4 + (1 << 25)) >> 26;
            h5 += carry4;
            h4 -= carry4 << 26;
            var carry1 = (h1 + (1 << 24)) >> 25;
            h2 += carry1;
            h1 -= carry1 << 25;
            var carry5 = (h5 + (1 << 24)) >> 25;
            h6 += carry5;
            h5 -= carry5 << 25;
            var carry2 = (h2 + (1 << 25)) >> 26;
            h3 += carry2;
            h2 -= carry2 << 26;
            var carry6 = (h6 + (1 << 25)) >> 26;
            h7 += carry6;
            h6 -= carry6 << 26;
            var carry3 = (h3 + (1 << 24)) >> 25;
            h4 += carry3;
            h3 -= carry3 << 25;
            var carry7 = (h7 + (1 << 24)) >> 25;
            h8 += carry7;
            h7 -= carry7 << 25;

            carry4 = (h4 + (1 << 25)) >> 26;
            h5 += carry4;
            h4 -= carry4 << 26;

            var carry8 = (h8 + (1 << 25)) >> 26;
            h9 += carry8;
            h8 -= carry8 << 26;
            var carry9 = (h9 + (1 << 24)) >> 25;
            h0 += carry9 * 19;
            h9 -= carry9 << 25;

            carry0 = (h0 + (1 << 25)) >> 26;
            h1 += carry0;
            h0 -= carry0 << 26;

            h.X0 = (int)h0;
            h.X1 = (int)h1;
            h.X2 = (int)h2;
            h.X3 = (int)h3;
            h.X4 = (int)h4;
            h.X5 = (int)h5;
            h.X6 = (int)h6;
            h.X7 = (int)h7;
            h.X8 = (int)h8;
            h.X9 = (int)h9;
        }
    }
}
'''
'''--- Src/NearClientUnity/Utilities/Ed25519/Internal/Ed25519Ref10/Field/Operations/Square2.cs ---
﻿namespace NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.Field.Operations
{
    internal static partial class FieldOperations
    {
        /*
            h = 2 * f * f
            Can overlap h with f.

            Preconditions:
            |f| bounded by 1.65*2^26,1.65*2^25,1.65*2^26,1.65*2^25,etc.

            Postconditions:
            |h| bounded by 1.01*2^25,1.01*2^24,1.01*2^25,1.01*2^24,etc.
        */

        /*
		    See Multiplication.c for discussion of implementation strategy.
		*/

        internal static void Square2(out FieldElement h, ref FieldElement f)
        {
            var f0 = f.X0;
            var f1 = f.X1;
            var f2 = f.X2;
            var f3 = f.X3;
            var f4 = f.X4;
            var f5 = f.X5;
            var f6 = f.X6;
            var f7 = f.X7;
            var f8 = f.X8;
            var f9 = f.X9;

            var f0_2 = 2 * f0;
            var f1_2 = 2 * f1;
            var f2_2 = 2 * f2;
            var f3_2 = 2 * f3;
            var f4_2 = 2 * f4;
            var f5_2 = 2 * f5;
            var f6_2 = 2 * f6;
            var f7_2 = 2 * f7;
            var f5_38 = 38 * f5; /* 1.959375*2^30 */
            var f6_19 = 19 * f6; /* 1.959375*2^30 */
            var f7_38 = 38 * f7; /* 1.959375*2^30 */
            var f8_19 = 19 * f8; /* 1.959375*2^30 */
            var f9_38 = 38 * f9; /* 1.959375*2^30 */

            var f0f0 = f0 * (long)f0;
            var f0f1_2 = f0_2 * (long)f1;
            var f0f2_2 = f0_2 * (long)f2;
            var f0f3_2 = f0_2 * (long)f3;
            var f0f4_2 = f0_2 * (long)f4;
            var f0f5_2 = f0_2 * (long)f5;
            var f0f6_2 = f0_2 * (long)f6;
            var f0f7_2 = f0_2 * (long)f7;
            var f0f8_2 = f0_2 * (long)f8;
            var f0f9_2 = f0_2 * (long)f9;
            var f1f1_2 = f1_2 * (long)f1;
            var f1f2_2 = f1_2 * (long)f2;
            var f1f3_4 = f1_2 * (long)f3_2;
            var f1f4_2 = f1_2 * (long)f4;
            var f1f5_4 = f1_2 * (long)f5_2;
            var f1f6_2 = f1_2 * (long)f6;
            var f1f7_4 = f1_2 * (long)f7_2;
            var f1f8_2 = f1_2 * (long)f8;
            var f1f9_76 = f1_2 * (long)f9_38;
            var f2f2 = f2 * (long)f2;
            var f2f3_2 = f2_2 * (long)f3;
            var f2f4_2 = f2_2 * (long)f4;
            var f2f5_2 = f2_2 * (long)f5;
            var f2f6_2 = f2_2 * (long)f6;
            var f2f7_2 = f2_2 * (long)f7;
            var f2f8_38 = f2_2 * (long)f8_19;
            var f2f9_38 = f2 * (long)f9_38;
            var f3f3_2 = f3_2 * (long)f3;
            var f3f4_2 = f3_2 * (long)f4;
            var f3f5_4 = f3_2 * (long)f5_2;
            var f3f6_2 = f3_2 * (long)f6;
            var f3f7_76 = f3_2 * (long)f7_38;
            var f3f8_38 = f3_2 * (long)f8_19;
            var f3f9_76 = f3_2 * (long)f9_38;
            var f4f4 = f4 * (long)f4;
            var f4f5_2 = f4_2 * (long)f5;
            var f4f6_38 = f4_2 * (long)f6_19;
            var f4f7_38 = f4 * (long)f7_38;
            var f4f8_38 = f4_2 * (long)f8_19;
            var f4f9_38 = f4 * (long)f9_38;
            var f5f5_38 = f5 * (long)f5_38;
            var f5f6_38 = f5_2 * (long)f6_19;
            var f5f7_76 = f5_2 * (long)f7_38;
            var f5f8_38 = f5_2 * (long)f8_19;
            var f5f9_76 = f5_2 * (long)f9_38;
            var f6f6_19 = f6 * (long)f6_19;
            var f6f7_38 = f6 * (long)f7_38;
            var f6f8_38 = f6_2 * (long)f8_19;
            var f6f9_38 = f6 * (long)f9_38;
            var f7f7_38 = f7 * (long)f7_38;
            var f7f8_38 = f7_2 * (long)f8_19;
            var f7f9_76 = f7_2 * (long)f9_38;
            var f8f8_19 = f8 * (long)f8_19;
            var f8f9_38 = f8 * (long)f9_38;
            var f9f9_38 = f9 * (long)f9_38;

            var h0 = f0f0 + f1f9_76 + f2f8_38 + f3f7_76 + f4f6_38 + f5f5_38;
            var h1 = f0f1_2 + f2f9_38 + f3f8_38 + f4f7_38 + f5f6_38;
            var h2 = f0f2_2 + f1f1_2 + f3f9_76 + f4f8_38 + f5f7_76 + f6f6_19;
            var h3 = f0f3_2 + f1f2_2 + f4f9_38 + f5f8_38 + f6f7_38;
            var h4 = f0f4_2 + f1f3_4 + f2f2 + f5f9_76 + f6f8_38 + f7f7_38;
            var h5 = f0f5_2 + f1f4_2 + f2f3_2 + f6f9_38 + f7f8_38;
            var h6 = f0f6_2 + f1f5_4 + f2f4_2 + f3f3_2 + f7f9_76 + f8f8_19;
            var h7 = f0f7_2 + f1f6_2 + f2f5_2 + f3f4_2 + f8f9_38;
            var h8 = f0f8_2 + f1f7_4 + f2f6_2 + f3f5_4 + f4f4 + f9f9_38;
            var h9 = f0f9_2 + f1f8_2 + f2f7_2 + f3f6_2 + f4f5_2;

            h0 += h0;
            h1 += h1;
            h2 += h2;
            h3 += h3;
            h4 += h4;
            h5 += h5;
            h6 += h6;
            h7 += h7;
            h8 += h8;
            h9 += h9;

            var carry0 = (h0 + (1 << 25)) >> 26;
            h1 += carry0;
            h0 -= carry0 << 26;
            var carry4 = (h4 + (1 << 25)) >> 26;
            h5 += carry4;
            h4 -= carry4 << 26;
            var carry1 = (h1 + (1 << 24)) >> 25;
            h2 += carry1;
            h1 -= carry1 << 25;
            var carry5 = (h5 + (1 << 24)) >> 25;
            h6 += carry5;
            h5 -= carry5 << 25;
            var carry2 = (h2 + (1 << 25)) >> 26;
            h3 += carry2;
            h2 -= carry2 << 26;
            var carry6 = (h6 + (1 << 25)) >> 26;
            h7 += carry6;
            h6 -= carry6 << 26;
            var carry3 = (h3 + (1 << 24)) >> 25;
            h4 += carry3;
            h3 -= carry3 << 25;
            var carry7 = (h7 + (1 << 24)) >> 25;
            h8 += carry7;
            h7 -= carry7 << 25;

            carry4 = (h4 + (1 << 25)) >> 26;
            h5 += carry4;
            h4 -= carry4 << 26;

            var carry8 = (h8 + (1 << 25)) >> 26;
            h9 += carry8;
            h8 -= carry8 << 26;
            var carry9 = (h9 + (1 << 24)) >> 25;
            h0 += carry9 * 19;
            h9 -= carry9 << 25;

            carry0 = (h0 + (1 << 25)) >> 26;
            h1 += carry0;
            h0 -= carry0 << 26;

            h.X0 = (int)h0;
            h.X1 = (int)h1;
            h.X2 = (int)h2;
            h.X3 = (int)h3;
            h.X4 = (int)h4;
            h.X5 = (int)h5;
            h.X6 = (int)h6;
            h.X7 = (int)h7;
            h.X8 = (int)h8;
            h.X9 = (int)h9;
        }
    }
}
'''
'''--- Src/NearClientUnity/Utilities/Ed25519/Internal/Ed25519Ref10/Field/Operations/Subtract.cs ---
﻿namespace NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.Field.Operations
{
    internal static partial class FieldOperations
    {
        /*
		h = f - g
		Can overlap h with f or g.

		Preconditions:
		   |f| bounded by 1.1*2^25,1.1*2^24,1.1*2^25,1.1*2^24,etc.
		   |g| bounded by 1.1*2^25,1.1*2^24,1.1*2^25,1.1*2^24,etc.

		Postconditions:
		   |h| bounded by 1.1*2^26,1.1*2^25,1.1*2^26,1.1*2^25,etc.
		*/

        internal static void Subtract(out FieldElement h, ref FieldElement f, ref FieldElement g)
        {
            var f0 = f.X0;
            var f1 = f.X1;
            var f2 = f.X2;
            var f3 = f.X3;
            var f4 = f.X4;
            var f5 = f.X5;
            var f6 = f.X6;
            var f7 = f.X7;
            var f8 = f.X8;
            var f9 = f.X9;

            var g0 = g.X0;
            var g1 = g.X1;
            var g2 = g.X2;
            var g3 = g.X3;
            var g4 = g.X4;
            var g5 = g.X5;
            var g6 = g.X6;
            var g7 = g.X7;
            var g8 = g.X8;
            var g9 = g.X9;

            var h0 = f0 - g0;
            var h1 = f1 - g1;
            var h2 = f2 - g2;
            var h3 = f3 - g3;
            var h4 = f4 - g4;
            var h5 = f5 - g5;
            var h6 = f6 - g6;
            var h7 = f7 - g7;
            var h8 = f8 - g8;
            var h9 = f9 - g9;

            h.X0 = h0;
            h.X1 = h1;
            h.X2 = h2;
            h.X3 = h3;
            h.X4 = h4;
            h.X5 = h5;
            h.X6 = h6;
            h.X7 = h7;
            h.X8 = h8;
            h.X9 = h9;
        }
    }
}
'''
'''--- Src/NearClientUnity/Utilities/Ed25519/Internal/Ed25519Ref10/Field/Operations/ToBytes.cs ---
﻿namespace NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.Field.Operations
{
    internal static partial class FieldOperations
    {
        /*
        Preconditions:
          |h| bounded by 1.1*2^26,1.1*2^25,1.1*2^26,1.1*2^25,etc.

        Write p=2^255-19; q=floor(h/p).
        Basic claim: q = floor(2^(-255)(h + 19 2^(-25)h9 + 2^(-1))).

        Proof:
          Have |h|<=p so |q|<=1 so |19^2 2^(-255) q|<1/4.
          Also have |h-2^230 h9|<2^231 so |19 2^(-255)(h-2^230 h9)|<1/4.

          Write y=2^(-1)-19^2 2^(-255)q-19 2^(-255)(h-2^230 h9).
          Then 0<y<1.

          Write r=h-pq.
          Have 0<=r<=p-1=2^255-20.
          Thus 0<=r+19(2^-255)r<r+19(2^-255)2^255<=2^255-1.

          Write x=r+19(2^-255)r+y.
          Then 0<x<2^255 so floor(2^(-255)x) = 0 so floor(q+2^(-255)x) = q.

          Have q+2^(-255)x = 2^(-255)(h + 19 2^(-25) h9 + 2^(-1))
          so floor(2^(-255)(h + 19 2^(-25) h9 + 2^(-1))) = q.
        */

        internal static void ToBytes(byte[] s, int offset, ref FieldElement h)
        {
            FieldElement hr;
            Reduce(out hr, ref h);

            var h0 = hr.X0;
            var h1 = hr.X1;
            var h2 = hr.X2;
            var h3 = hr.X3;
            var h4 = hr.X4;
            var h5 = hr.X5;
            var h6 = hr.X6;
            var h7 = hr.X7;
            var h8 = hr.X8;
            var h9 = hr.X9;

            /*
            Goal: Output h0+...+2^255 h10-2^255 q, which is between 0 and 2^255-20.
            Have h0+...+2^230 h9 between 0 and 2^255-1;
            evidently 2^255 h10-2^255 q = 0.
            Goal: Output h0+...+2^230 h9.
            */
            unchecked
            {
                s[offset + 0] = (byte)(h0);
                s[offset + 1] = (byte)(h0 >> 8);
                s[offset + 2] = (byte)(h0 >> 16);
                s[offset + 3] = (byte)((h0 >> 24) | (h1 << 2));
                s[offset + 4] = (byte)(h1 >> 6);
                s[offset + 5] = (byte)(h1 >> 14);
                s[offset + 6] = (byte)((h1 >> 22) | (h2 << 3));
                s[offset + 7] = (byte)(h2 >> 5);
                s[offset + 8] = (byte)(h2 >> 13);
                s[offset + 9] = (byte)((h2 >> 21) | (h3 << 5));
                s[offset + 10] = (byte)(h3 >> 3);
                s[offset + 11] = (byte)(h3 >> 11);
                s[offset + 12] = (byte)((h3 >> 19) | (h4 << 6));
                s[offset + 13] = (byte)(h4 >> 2);
                s[offset + 14] = (byte)(h4 >> 10);
                s[offset + 15] = (byte)(h4 >> 18);
                s[offset + 16] = (byte)(h5);
                s[offset + 17] = (byte)(h5 >> 8);
                s[offset + 18] = (byte)(h5 >> 16);
                s[offset + 19] = (byte)((h5 >> 24) | (h6 << 1));
                s[offset + 20] = (byte)(h6 >> 7);
                s[offset + 21] = (byte)(h6 >> 15);
                s[offset + 22] = (byte)((h6 >> 23) | (h7 << 3));
                s[offset + 23] = (byte)(h7 >> 5);
                s[offset + 24] = (byte)(h7 >> 13);
                s[offset + 25] = (byte)((h7 >> 21) | (h8 << 4));
                s[offset + 26] = (byte)(h8 >> 4);
                s[offset + 27] = (byte)(h8 >> 12);
                s[offset + 28] = (byte)((h8 >> 20) | (h9 << 6));
                s[offset + 29] = (byte)(h9 >> 2);
                s[offset + 30] = (byte)(h9 >> 10);
                s[offset + 31] = (byte)(h9 >> 18);
            }
        }
    }
}
'''
'''--- Src/NearClientUnity/Utilities/Ed25519/Internal/Ed25519Ref10/Group/GroupElement.cs ---
﻿using NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.Field;

namespace NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.Group
{
    /*
    ge means group element.

    Here the group is the set of pairs (x,y) of field elements (see fe.h)
    satisfying -x^2 + y^2 = 1 + d x^2y^2
    where d = -121665/121666.

    Representations:
      GroupElement_p2 (projective): (X:Y:Z) satisfying x=X/Z, y=Y/Z
      GroupElement_p3 (extended): (X:Y:Z:T) satisfying x=X/Z, y=Y/Z, XY=ZT
      GroupElement_p1p1 (completed): ((X:Z),(Y:T)) satisfying x=X/Z, y=Y/T
      GroupElement_precomp (Duif): (y+x,y-x,2dxy)
    */

    internal struct GroupElementCached
    {
        public FieldElement T2d;
        public FieldElement YminusX;
        public FieldElement YplusX;
        public FieldElement Z;
    }

    internal struct GroupElementP1P1
    {
        public FieldElement T;
        public FieldElement X;
        public FieldElement Y;
        public FieldElement Z;
    }

    internal struct GroupElementP2
    {
        public FieldElement X;
        public FieldElement Y;
        public FieldElement Z;
    }

    internal struct GroupElementP3
    {
        public FieldElement T;
        public FieldElement X;
        public FieldElement Y;
        public FieldElement Z;
    }

    internal struct GroupElementPreComp
    {
        public FieldElement xy2d;
        public FieldElement yminusx;
        public FieldElement yplusx;

        public GroupElementPreComp(FieldElement yplusx, FieldElement yminusx, FieldElement xy2d)
        {
            this.yplusx = yplusx;
            this.yminusx = yminusx;
            this.xy2d = xy2d;
        }
    }
}
'''
'''--- Src/NearClientUnity/Utilities/Ed25519/Internal/Ed25519Ref10/Group/Operations/Add.cs ---
﻿using NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.Field.Operations;

namespace NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.Group.Operations
{
    internal static partial class GroupOperations
    {
        /*
		r = p + q
		*/

        private static void Add(out GroupElementP1P1 r, ref GroupElementP3 p, ref GroupElementCached q)
        {
            /* qhasm: YpX1 = Y1+X1 */
            /* asm 1: Add(>YpX1=fe#1,<Y1=fe#12,<X1=fe#11); */
            /* asm 2: Add(>YpX1=r.X,<Y1=p.Y,<X1=p.X); */
            FieldOperations.Add(out r.X, ref p.Y, ref p.X);

            /* qhasm: YmX1 = Y1-X1 */
            /* asm 1: Subtract(>YmX1=fe#2,<Y1=fe#12,<X1=fe#11); */
            /* asm 2: Subtract(>YmX1=r.Y,<Y1=p.Y,<X1=p.X); */
            FieldOperations.Subtract(out r.Y, ref p.Y, ref p.X);

            /* qhasm: A = YpX1*YpX2 */
            /* asm 1: Multiplication(>A=fe#3,<YpX1=fe#1,<YpX2=fe#15); */
            /* asm 2: Multiplication(>A=r.Z,<YpX1=r.X,<YpX2=q.YplusX); */
            FieldOperations.Multiplication(out r.Z, ref r.X, ref q.YplusX);

            /* qhasm: B = YmX1*YmX2 */
            /* asm 1: Multiplication(>B=fe#2,<YmX1=fe#2,<YmX2=fe#16); */
            /* asm 2: Multiplication(>B=r.Y,<YmX1=r.Y,<YmX2=q.YminusX); */
            FieldOperations.Multiplication(out r.Y, ref r.Y, ref q.YminusX);

            /* qhasm: C = T2d2*T1 */
            /* asm 1: Multiplication(>C=fe#4,<T2d2=fe#18,<T1=fe#14); */
            /* asm 2: Multiplication(>C=r.T,<T2d2=q.T2d,<T1=p.T); */
            FieldOperations.Multiplication(out r.T, ref q.T2d, ref p.T);

            /* qhasm: ZZ = Z1*Z2 */
            /* asm 1: Multiplication(>ZZ=fe#1,<Z1=fe#13,<Z2=fe#17); */
            /* asm 2: Multiplication(>ZZ=r.X,<Z1=p.Z,<Z2=q.Z); */
            FieldOperations.Multiplication(out r.X, ref p.Z, ref q.Z);

            /* qhasm: D = 2*ZZ */
            /* asm 1: Add(>D=fe#5,<ZZ=fe#1,<ZZ=fe#1); */
            /* asm 2: Add(>D=t0,<ZZ=r.X,<ZZ=r.X); */
            FieldOperations.Add(out var t0, ref r.X, ref r.X);

            /* qhasm: X3 = A-B */
            /* asm 1: Subtract(>X3=fe#1,<A=fe#3,<B=fe#2); */
            /* asm 2: Subtract(>X3=r.X,<A=r.Z,<B=r.Y); */
            FieldOperations.Subtract(out r.X, ref r.Z, ref r.Y);

            /* qhasm: Y3 = A+B */
            /* asm 1: Add(>Y3=fe#2,<A=fe#3,<B=fe#2); */
            /* asm 2: Add(>Y3=r.Y,<A=r.Z,<B=r.Y); */
            FieldOperations.Add(out r.Y, ref r.Z, ref r.Y);

            /* qhasm: Z3 = D+C */
            /* asm 1: Add(>Z3=fe#3,<D=fe#5,<C=fe#4); */
            /* asm 2: Add(>Z3=r.Z,<D=t0,<C=r.T); */
            FieldOperations.Add(out r.Z, ref t0, ref r.T);

            /* qhasm: T3 = D-C */
            /* asm 1: Subtract(>T3=fe#4,<D=fe#5,<C=fe#4); */
            /* asm 2: Subtract(>T3=r.T,<D=t0,<C=r.T); */
            FieldOperations.Subtract(out r.T, ref t0, ref r.T);

            /* qhasm: return */
        }
    }
}
'''
'''--- Src/NearClientUnity/Utilities/Ed25519/Internal/Ed25519Ref10/Group/Operations/DoubleScalarMult.cs ---
﻿using NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.Lookup;

namespace NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.Group.Operations
{
    internal static partial class GroupOperations
    {
        public static void DoubleScalarMult(out GroupElementP2 r, byte[] a, ref GroupElementP3 A, byte[] b)
        {
            var Bi = LookupTables.Base2;
            // todo: Perhaps remove these allocations?
            var aslide = new sbyte[256];
            var bslide = new sbyte[256];
            var Ai = new GroupElementCached[8]; /* A,3A,5A,7A,9A,11A,13A,15A */
            GroupElementP1P1 t;
            GroupElementP3 u;
            GroupElementP3 A2;
            int i;

            Slide(aslide, a);
            Slide(bslide, b);

            P3ToCached(out Ai[0], ref A);
            GetP3Dbl(out t, ref A);
            P1P1ConvertToP3(out A2, ref t);
            Add(out t, ref A2, ref Ai[0]);
            P1P1ConvertToP3(out u, ref t);
            P3ToCached(out Ai[1], ref u);
            Add(out t, ref A2, ref Ai[1]);
            P1P1ConvertToP3(out u, ref t);
            P3ToCached(out Ai[2], ref u);
            Add(out t, ref A2, ref Ai[2]);
            P1P1ConvertToP3(out u, ref t);
            P3ToCached(out Ai[3], ref u);
            Add(out t, ref A2, ref Ai[3]);
            P1P1ConvertToP3(out u, ref t);
            P3ToCached(out Ai[4], ref u);
            Add(out t, ref A2, ref Ai[4]);
            P1P1ConvertToP3(out u, ref t);
            P3ToCached(out Ai[5], ref u);
            Add(out t, ref A2, ref Ai[5]);
            P1P1ConvertToP3(out u, ref t);
            P3ToCached(out Ai[6], ref u);
            Add(out t, ref A2, ref Ai[6]);
            P1P1ConvertToP3(out u, ref t);
            P3ToCached(out Ai[7], ref u);

            GetP2(out r);

            for (i = 255; i >= 0; --i)
                if (aslide[i] != 0 || bslide[i] != 0)
                    break;

            for (; i >= 0; --i)
            {
                GetP2Dbl(out t, ref r);

                if (aslide[i] > 0)
                {
                    P1P1ConvertToP3(out u, ref t);
                    Add(out t, ref u, ref Ai[aslide[i] / 2]);
                }
                else if (aslide[i] < 0)
                {
                    P1P1ConvertToP3(out u, ref t);
                    Subtract(out t, ref u, ref Ai[-aslide[i] / 2]);
                }

                if (bslide[i] > 0)
                {
                    P1P1ConvertToP3(out u, ref t);
                    Madd(out t, ref u, ref Bi[bslide[i] / 2]);
                }
                else if (bslide[i] < 0)
                {
                    P1P1ConvertToP3(out u, ref t);
                    Msub(out t, ref u, ref Bi[-bslide[i] / 2]);
                }

                P1P1ConvertToP2(out r, ref t);
            }
        }

        private static void Slide(sbyte[] r, byte[] a)
        {
            for (var i = 0; i < 256; ++i)
                r[i] = (sbyte)(1 & (a[i >> 3] >> (i & 7)));

            for (var i = 0; i < 256; ++i)
                if (r[i] != 0)
                    for (var b = 1; b <= 6 && i + b < 256; ++b)
                        if (r[i + b] != 0)
                        {
                            if (r[i] + (r[i + b] << b) <= 15)
                            {
                                r[i] += (sbyte)(r[i + b] << b);
                                r[i + b] = 0;
                            }
                            else if (r[i] - (r[i + b] << b) >= -15)
                            {
                                r[i] -= (sbyte)(r[i + b] << b);
                                for (var k = i + b; k < 256; ++k)
                                {
                                    if (r[k] == 0)
                                    {
                                        r[k] = 1;
                                        break;
                                    }

                                    r[k] = 0;
                                }
                            }
                            else
                            {
                                break;
                            }
                        }
        }

        /*
		r = a * A + b * B
		where a = a[0]+256*a[1]+...+256^31 a[31].
		and b = b[0]+256*b[1]+...+256^31 b[31].
		B is the Ed25519 base point (x,4/5) with x positive.
		*/
    }
}
'''
'''--- Src/NearClientUnity/Utilities/Ed25519/Internal/Ed25519Ref10/Group/Operations/FromBytes.cs ---
﻿using NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.Field.Operations;
using NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.Lookup;

namespace NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.Group.Operations
{
    internal static partial class GroupOperations
    {
        public static int FromBytes(out GroupElementP3 h, byte[] data, int offset)
        {
            FieldOperations.FromBytes(out h.Y, data, offset);
            FieldOperations.FieldOperations_1(out h.Z);
            FieldOperations.Square(out var u, ref h.Y);
            FieldOperations.Multiplication(out var v, ref u, ref LookupTables.D);
            FieldOperations.Subtract(out u, ref u, ref h.Z); /* u = y^2-1 */
            FieldOperations.Add(out v, ref v, ref h.Z); /* v = dy^2+1 */

            FieldOperations.Square(out var v3, ref v);
            FieldOperations.Multiplication(out v3, ref v3, ref v); /* v3 = v^3 */
            FieldOperations.Square(out h.X, ref v3);
            FieldOperations.Multiplication(out h.X, ref h.X, ref v);
            FieldOperations.Multiplication(out h.X, ref h.X, ref u); /* x = uv^7 */

            FieldOperations.Pow22523(out h.X, ref h.X); /* x = (uv^7)^((q-5)/8) */
            FieldOperations.Multiplication(out h.X, ref h.X, ref v3);
            FieldOperations.Multiplication(out h.X, ref h.X, ref u); /* x = uv^3(uv^7)^((q-5)/8) */

            FieldOperations.Square(out var vxx, ref h.X);
            FieldOperations.Multiplication(out vxx, ref vxx, ref v);
            FieldOperations.Subtract(out var check, ref vxx, ref u); /* vx^2-u */
            if (FieldOperations.IsNonZero(ref check) != 0)
            {
                FieldOperations.Add(out check, ref vxx, ref u); /* vx^2+u */
                if (FieldOperations.IsNonZero(ref check) != 0)
                {
                    h = default;
                    return -1;
                }

                FieldOperations.Multiplication(out h.X, ref h.X, ref LookupTables.Sqrtm1);
            }

            if (FieldOperations.IsNegative(ref h.X) == data[offset + 31] >> 7)
                FieldOperations.Negative(out h.X, ref h.X);

            FieldOperations.Multiplication(out h.T, ref h.X, ref h.Y);
            return 0;
        }
    }
}
'''
'''--- Src/NearClientUnity/Utilities/Ed25519/Internal/Ed25519Ref10/Group/Operations/GetP2.cs ---
﻿using NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.Field.Operations;

namespace NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.Group.Operations
{
    internal static partial class GroupOperations
    {
        private static void GetP2(out GroupElementP2 h)
        {
            FieldOperations.FieldOperations_0(out h.X);
            FieldOperations.FieldOperations_1(out h.Y);
            FieldOperations.FieldOperations_1(out h.Z);
        }
    }
}
'''
'''--- Src/NearClientUnity/Utilities/Ed25519/Internal/Ed25519Ref10/Group/Operations/GetP2Dbl.cs ---
﻿using NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.Field;
using NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.Field.Operations;

namespace NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.Group.Operations
{
    internal static partial class GroupOperations
    {
        /*
		r = 2 * p
		*/

        private static void GetP2Dbl(out GroupElementP1P1 r, ref GroupElementP2 p)
        {
            FieldElement t0;

            /* qhasm: XX=X1^2 */
            /* asm 1: Square(>XX=fe#1,<X1=fe#11); */
            /* asm 2: Square(>XX=r.X,<X1=p.X); */
            FieldOperations.Square(out r.X, ref p.X);

            /* qhasm: YY=Y1^2 */
            /* asm 1: Square(>YY=fe#3,<Y1=fe#12); */
            /* asm 2: Square(>YY=r.Z,<Y1=p.Y); */
            FieldOperations.Square(out r.Z, ref p.Y);

            /* qhasm: B=2*Z1^2 */
            /* asm 1: Square2(>B=fe#4,<Z1=fe#13); */
            /* asm 2: Square2(>B=r.T,<Z1=p.Z); */
            FieldOperations.Square2(out r.T, ref p.Z);

            /* qhasm: A=X1+Y1 */
            /* asm 1: Add(>A=fe#2,<X1=fe#11,<Y1=fe#12); */
            /* asm 2: Add(>A=r.Y,<X1=p.X,<Y1=p.Y); */
            FieldOperations.Add(out r.Y, ref p.X, ref p.Y);

            /* qhasm: AA=A^2 */
            /* asm 1: Square(>AA=fe#5,<A=fe#2); */
            /* asm 2: Square(>AA=t0,<A=r.Y); */
            FieldOperations.Square(out t0, ref r.Y);

            /* qhasm: Y3=YY+XX */
            /* asm 1: Add(>Y3=fe#2,<YY=fe#3,<XX=fe#1); */
            /* asm 2: Add(>Y3=r.Y,<YY=r.Z,<XX=r.X); */
            FieldOperations.Add(out r.Y, ref r.Z, ref r.X);

            /* qhasm: Z3=YY-XX */
            /* asm 1: Subtract(>Z3=fe#3,<YY=fe#3,<XX=fe#1); */
            /* asm 2: Subtract(>Z3=r.Z,<YY=r.Z,<XX=r.X); */
            FieldOperations.Subtract(out r.Z, ref r.Z, ref r.X);

            /* qhasm: X3=AA-Y3 */
            /* asm 1: Subtract(>X3=fe#1,<AA=fe#5,<Y3=fe#2); */
            /* asm 2: Subtract(>X3=r.X,<AA=t0,<Y3=r.Y); */
            FieldOperations.Subtract(out r.X, ref t0, ref r.Y);

            /* qhasm: T3=B-Z3 */
            /* asm 1: Subtract(>T3=fe#4,<B=fe#4,<Z3=fe#3); */
            /* asm 2: Subtract(>T3=r.T,<B=r.T,<Z3=r.Z); */
            FieldOperations.Subtract(out r.T, ref r.T, ref r.Z);

            /* qhasm: return */
        }
    }
}
'''
'''--- Src/NearClientUnity/Utilities/Ed25519/Internal/Ed25519Ref10/Group/Operations/GetP3.cs ---
﻿using NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.Field.Operations;

namespace NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.Group.Operations
{
    internal static partial class GroupOperations
    {
        private static void GetP3(out GroupElementP3 h)
        {
            FieldOperations.FieldOperations_0(out h.X);
            FieldOperations.FieldOperations_1(out h.Y);
            FieldOperations.FieldOperations_1(out h.Z);
            FieldOperations.FieldOperations_0(out h.T);
        }
    }
}
'''
'''--- Src/NearClientUnity/Utilities/Ed25519/Internal/Ed25519Ref10/Group/Operations/GetP3Dbl.cs ---
﻿namespace NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.Group.Operations
{
    internal static partial class GroupOperations
    {
        /*
		r = 2 * p
		*/

        private static void GetP3Dbl(out GroupElementP1P1 r, ref GroupElementP3 p)
        {
            GroupElementP2 q;
            P3ConvertToP2(out q, ref p);
            GetP2Dbl(out r, ref q);
        }
    }
}
'''
'''--- Src/NearClientUnity/Utilities/Ed25519/Internal/Ed25519Ref10/Group/Operations/GetPreComp.cs ---
﻿using NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.Field.Operations;

namespace NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.Group.Operations
{
    internal static partial class GroupOperations
    {
        private static void GetPreComp(out GroupElementPreComp h)
        {
            FieldOperations.FieldOperations_1(out h.yplusx);
            FieldOperations.FieldOperations_1(out h.yminusx);
            FieldOperations.FieldOperations_0(out h.xy2d);
        }
    }
}
'''
'''--- Src/NearClientUnity/Utilities/Ed25519/Internal/Ed25519Ref10/Group/Operations/Madd.cs ---
﻿using NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.Field.Operations;

namespace NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.Group.Operations
{
    internal static partial class GroupOperations
    {
        /*
		r = p + q
		*/

        private static void Madd(out GroupElementP1P1 r, ref GroupElementP3 p, ref GroupElementPreComp q)
        {
            /* qhasm: YpX1 = Y1+X1 */
            /* asm 1: Add(>YpX1=fe#1,<Y1=fe#12,<X1=fe#11); */
            /* asm 2: Add(>YpX1=r.X,<Y1=p.Y,<X1=p.X); */
            FieldOperations.Add(out r.X, ref p.Y, ref p.X);

            /* qhasm: YmX1 = Y1-X1 */
            /* asm 1: Subtract(>YmX1=fe#2,<Y1=fe#12,<X1=fe#11); */
            /* asm 2: Subtract(>YmX1=r.Y,<Y1=p.Y,<X1=p.X); */
            FieldOperations.Subtract(out r.Y, ref p.Y, ref p.X);

            /* qhasm: A = YpX1*ypx2 */
            /* asm 1: Multiplication(>A=fe#3,<YpX1=fe#1,<ypx2=fe#15); */
            /* asm 2: Multiplication(>A=r.Z,<YpX1=r.X,<ypx2=q.yplusx); */
            FieldOperations.Multiplication(out r.Z, ref r.X, ref q.yplusx);

            /* qhasm: B = YmX1*ymx2 */
            /* asm 1: Multiplication(>B=fe#2,<YmX1=fe#2,<ymx2=fe#16); */
            /* asm 2: Multiplication(>B=r.Y,<YmX1=r.Y,<ymx2=q.yminusx); */
            FieldOperations.Multiplication(out r.Y, ref r.Y, ref q.yminusx);

            /* qhasm: C = xy2d2*T1 */
            /* asm 1: Multiplication(>C=fe#4,<xy2d2=fe#17,<T1=fe#14); */
            /* asm 2: Multiplication(>C=r.T,<xy2d2=q.xy2d,<T1=p.T); */
            FieldOperations.Multiplication(out r.T, ref q.xy2d, ref p.T);

            /* qhasm: D = 2*Z1 */
            /* asm 1: Add(>D=fe#5,<Z1=fe#13,<Z1=fe#13); */
            /* asm 2: Add(>D=t0,<Z1=p.Z,<Z1=p.Z); */
            FieldOperations.Add(out var t0, ref p.Z, ref p.Z);

            /* qhasm: X3 = A-B */
            /* asm 1: Subtract(>X3=fe#1,<A=fe#3,<B=fe#2); */
            /* asm 2: Subtract(>X3=r.X,<A=r.Z,<B=r.Y); */
            FieldOperations.Subtract(out r.X, ref r.Z, ref r.Y);

            /* qhasm: Y3 = A+B */
            /* asm 1: Add(>Y3=fe#2,<A=fe#3,<B=fe#2); */
            /* asm 2: Add(>Y3=r.Y,<A=r.Z,<B=r.Y); */
            FieldOperations.Add(out r.Y, ref r.Z, ref r.Y);

            /* qhasm: Z3 = D+C */
            /* asm 1: Add(>Z3=fe#3,<D=fe#5,<C=fe#4); */
            /* asm 2: Add(>Z3=r.Z,<D=t0,<C=r.T); */
            FieldOperations.Add(out r.Z, ref t0, ref r.T);

            /* qhasm: T3 = D-C */
            /* asm 1: Subtract(>T3=fe#4,<D=fe#5,<C=fe#4); */
            /* asm 2: Subtract(>T3=r.T,<D=t0,<C=r.T); */
            FieldOperations.Subtract(out r.T, ref t0, ref r.T);

            /* qhasm: return */
        }
    }
}
'''
'''--- Src/NearClientUnity/Utilities/Ed25519/Internal/Ed25519Ref10/Group/Operations/Msub.cs ---
﻿using NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.Field;
using NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.Field.Operations;

namespace NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.Group.Operations
{
    internal static partial class GroupOperations
    {
        /*
		r = p - q
		*/

        private static void Msub(out GroupElementP1P1 r, ref GroupElementP3 p, ref GroupElementPreComp q)
        {
            FieldElement t0;

            /* qhasm: YpX1 = Y1+X1 */
            /* asm 1: Add(>YpX1=fe#1,<Y1=fe#12,<X1=fe#11); */
            /* asm 2: Add(>YpX1=r.X,<Y1=p.Y,<X1=p.X); */
            FieldOperations.Add(out r.X, ref p.Y, ref p.X);

            /* qhasm: YmX1 = Y1-X1 */
            /* asm 1: Subtract(>YmX1=fe#2,<Y1=fe#12,<X1=fe#11); */
            /* asm 2: Subtract(>YmX1=r.Y,<Y1=p.Y,<X1=p.X); */
            FieldOperations.Subtract(out r.Y, ref p.Y, ref p.X);

            /* qhasm: A = YpX1*ymx2 */
            /* asm 1: Multiplication(>A=fe#3,<YpX1=fe#1,<ymx2=fe#16); */
            /* asm 2: Multiplication(>A=r.Z,<YpX1=r.X,<ymx2=q.yminusx); */
            FieldOperations.Multiplication(out r.Z, ref r.X, ref q.yminusx);

            /* qhasm: B = YmX1*ypx2 */
            /* asm 1: Multiplication(>B=fe#2,<YmX1=fe#2,<ypx2=fe#15); */
            /* asm 2: Multiplication(>B=r.Y,<YmX1=r.Y,<ypx2=q.yplusx); */
            FieldOperations.Multiplication(out r.Y, ref r.Y, ref q.yplusx);

            /* qhasm: C = xy2d2*T1 */
            /* asm 1: Multiplication(>C=fe#4,<xy2d2=fe#17,<T1=fe#14); */
            /* asm 2: Multiplication(>C=r.T,<xy2d2=q.xy2d,<T1=p.T); */
            FieldOperations.Multiplication(out r.T, ref q.xy2d, ref p.T);

            /* qhasm: D = 2*Z1 */
            /* asm 1: Add(>D=fe#5,<Z1=fe#13,<Z1=fe#13); */
            /* asm 2: Add(>D=t0,<Z1=p.Z,<Z1=p.Z); */
            FieldOperations.Add(out t0, ref p.Z, ref p.Z);

            /* qhasm: X3 = A-B */
            /* asm 1: Subtract(>X3=fe#1,<A=fe#3,<B=fe#2); */
            /* asm 2: Subtract(>X3=r.X,<A=r.Z,<B=r.Y); */
            FieldOperations.Subtract(out r.X, ref r.Z, ref r.Y);

            /* qhasm: Y3 = A+B */
            /* asm 1: Add(>Y3=fe#2,<A=fe#3,<B=fe#2); */
            /* asm 2: Add(>Y3=r.Y,<A=r.Z,<B=r.Y); */
            FieldOperations.Add(out r.Y, ref r.Z, ref r.Y);

            /* qhasm: Z3 = D-C */
            /* asm 1: Subtract(>Z3=fe#3,<D=fe#5,<C=fe#4); */
            /* asm 2: Subtract(>Z3=r.Z,<D=t0,<C=r.T); */
            FieldOperations.Subtract(out r.Z, ref t0, ref r.T);

            /* qhasm: T3 = D+C */
            /* asm 1: Add(>T3=fe#4,<D=fe#5,<C=fe#4); */
            /* asm 2: Add(>T3=r.T,<D=t0,<C=r.T); */
            FieldOperations.Add(out r.T, ref t0, ref r.T);

            /* qhasm: return */
        }
    }
}
'''
'''--- Src/NearClientUnity/Utilities/Ed25519/Internal/Ed25519Ref10/Group/Operations/P1P1ConvertToP2.cs ---
﻿using NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.Field.Operations;

namespace NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.Group.Operations
{
    internal static partial class GroupOperations
    {
        /*
		r = p
		*/

        private static void P1P1ConvertToP2(out GroupElementP2 r, ref GroupElementP1P1 p)
        {
            FieldOperations.Multiplication(out r.X, ref p.X, ref p.T);
            FieldOperations.Multiplication(out r.Y, ref p.Y, ref p.Z);
            FieldOperations.Multiplication(out r.Z, ref p.Z, ref p.T);
        }
    }
}
'''
'''--- Src/NearClientUnity/Utilities/Ed25519/Internal/Ed25519Ref10/Group/Operations/P1P1ConvertToP3.cs ---
﻿using NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.Field.Operations;

namespace NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.Group.Operations
{
    internal static partial class GroupOperations
    {
        /*
		r = p
		*/

        private static void P1P1ConvertToP3(out GroupElementP3 r, ref GroupElementP1P1 p)
        {
            FieldOperations.Multiplication(out r.X, ref p.X, ref p.T);
            FieldOperations.Multiplication(out r.Y, ref p.Y, ref p.Z);
            FieldOperations.Multiplication(out r.Z, ref p.Z, ref p.T);
            FieldOperations.Multiplication(out r.T, ref p.X, ref p.Y);
        }
    }
}
'''
'''--- Src/NearClientUnity/Utilities/Ed25519/Internal/Ed25519Ref10/Group/Operations/P3ConvertToP2.cs ---
﻿namespace NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.Group.Operations
{
    internal static partial class GroupOperations
    {
        /*
		r = p
		*/

        private static void P3ConvertToP2(out GroupElementP2 r, ref GroupElementP3 p)
        {
            r.X = p.X;
            r.Y = p.Y;
            r.Z = p.Z;
        }
    }
}
'''
'''--- Src/NearClientUnity/Utilities/Ed25519/Internal/Ed25519Ref10/Group/Operations/P3ToBytes.cs ---
﻿using NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.Field.Operations;

namespace NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.Group.Operations
{
    internal static partial class GroupOperations
    {
        public static void P3ToBytes(byte[] s, int offset, ref GroupElementP3 h)
        {
            FieldOperations.Invert(out var recip, ref h.Z);
            FieldOperations.Multiplication(out var x, ref h.X, ref recip);
            FieldOperations.Multiplication(out var y, ref h.Y, ref recip);
            FieldOperations.ToBytes(s, offset, ref y);
            s[offset + 31] ^= (byte)(FieldOperations.IsNegative(ref x) << 7);
        }
    }
}
'''
'''--- Src/NearClientUnity/Utilities/Ed25519/Internal/Ed25519Ref10/Group/Operations/P3ToCached.cs ---
﻿using NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.Field.Operations;
using NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.Lookup;

namespace NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.Group.Operations
{
    internal static partial class GroupOperations
    {
        /*
		r = p
		*/

        private static void P3ToCached(out GroupElementCached r, ref GroupElementP3 p)
        {
            FieldOperations.Add(out r.YplusX, ref p.Y, ref p.X);
            FieldOperations.Subtract(out r.YminusX, ref p.Y, ref p.X);
            r.Z = p.Z;
            FieldOperations.Multiplication(out r.T2d, ref p.T, ref LookupTables.D2);
        }
    }
}
'''
'''--- Src/NearClientUnity/Utilities/Ed25519/Internal/Ed25519Ref10/Group/Operations/ScalarMultBase.cs ---
﻿using NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.Field.Operations;
using NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.Lookup;

namespace NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.Group.Operations
{
    internal static partial class GroupOperations
    {
        public static void ScalarMultBase(out GroupElementP3 h, byte[] a, int offset)
        {
            var e = new sbyte[64];

            GroupElementP1P1 r;
            GroupElementP2 s;
            GroupElementPreComp t;

            for (var i = 0; i < 32; ++i)
            {
                e[2 * i + 0] = (sbyte)(a[offset + i] & 15);
                e[2 * i + 1] = (sbyte)((a[offset + i] >> 4) & 15);
            }
            /* each e[i] is between 0 and 15 */
            /* e[63] is between 0 and 7 */

            sbyte carry = 0;
            for (var i = 0; i < 63; ++i)
            {
                e[i] += carry;
                carry = (sbyte)(e[i] + 8);
                carry >>= 4;
                e[i] -= (sbyte)(carry << 4);
            }

            e[63] += carry;
            /* each e[i] is between -8 and 8 */

            GetP3(out h);
            for (var i = 1; i < 64; i += 2)
            {
                Select(out t, i / 2, e[i]);
                Madd(out r, ref h, ref t);
                P1P1ConvertToP3(out h, ref r);
            }

            GetP3Dbl(out r, ref h);
            P1P1ConvertToP2(out s, ref r);
            GetP2Dbl(out r, ref s);
            P1P1ConvertToP2(out s, ref r);
            GetP2Dbl(out r, ref s);
            P1P1ConvertToP2(out s, ref r);
            GetP2Dbl(out r, ref s);
            P1P1ConvertToP3(out h, ref r);

            for (var i = 0; i < 64; i += 2)
            {
                Select(out t, i / 2, e[i]);
                Madd(out r, ref h, ref t);
                P1P1ConvertToP3(out h, ref r);
            }
        }

        private static void Cmov(ref GroupElementPreComp t, ref GroupElementPreComp u, byte b)
        {
            FieldOperations.ConditionalMove(ref t.yplusx, ref u.yplusx, b);
            FieldOperations.ConditionalMove(ref t.yminusx, ref u.yminusx, b);
            FieldOperations.ConditionalMove(ref t.xy2d, ref u.xy2d, b);
        }

        private static byte Equal(byte b, byte c)
        {
            var ub = b;
            var uc = c;
            var x = (byte)(ub ^ uc); /* 0: yes; 1..255: no */
            uint y = x; /* 0: yes; 1..255: no */
            unchecked
            {
                y -= 1;
            } /* 4294967295: yes; 0..254: no */

            y >>= 31; /* 1: yes; 0: no */
            return (byte)y;
        }

        private static byte Negative(sbyte b)
        {
            var x = unchecked((ulong)b); /* 18446744073709551361..18446744073709551615: yes; 0..255: no */
            x >>= 63; /* 1: yes; 0: no */
            return (byte)x;
        }

        private static void Select(out GroupElementPreComp t, int pos, sbyte b)
        {
            GroupElementPreComp minust;
            var bnegative = Negative(b);
            var babs = (byte)(b - ((-bnegative & b) << 1));

            GetPreComp(out t);
            var table = LookupTables.Base[pos];
            Cmov(ref t, ref table[0], Equal(babs, 1));
            Cmov(ref t, ref table[1], Equal(babs, 2));
            Cmov(ref t, ref table[2], Equal(babs, 3));
            Cmov(ref t, ref table[3], Equal(babs, 4));
            Cmov(ref t, ref table[4], Equal(babs, 5));
            Cmov(ref t, ref table[5], Equal(babs, 6));
            Cmov(ref t, ref table[6], Equal(babs, 7));
            Cmov(ref t, ref table[7], Equal(babs, 8));
            minust.yplusx = t.yminusx;
            minust.yminusx = t.yplusx;
            FieldOperations.Negative(out minust.xy2d, ref t.xy2d);
            Cmov(ref t, ref minust, bnegative);
        }

        /*
        h = a * B
        where a = a[0]+256*a[1]+...+256^31 a[31]
        B is the Ed25519 base point (x,4/5) with x positive.

        Preconditions:
          a[31] <= 127
        */
    }
}
'''
'''--- Src/NearClientUnity/Utilities/Ed25519/Internal/Ed25519Ref10/Group/Operations/Subtract.cs ---
﻿using NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.Field.Operations;

namespace NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.Group.Operations
{
    internal static partial class GroupOperations
    {
        /*
		r = p - q
		*/

        private static void Subtract(out GroupElementP1P1 r, ref GroupElementP3 p, ref GroupElementCached q)
        {
            /* qhasm: YpX1 = Y1+X1 */
            /* asm 1: Add(>YpX1=fe#1,<Y1=fe#12,<X1=fe#11); */
            /* asm 2: Add(>YpX1=r.X,<Y1=p.Y,<X1=p.X); */
            FieldOperations.Add(out r.X, ref p.Y, ref p.X);

            /* qhasm: YmX1 = Y1-X1 */
            /* asm 1: Subtract(>YmX1=fe#2,<Y1=fe#12,<X1=fe#11); */
            /* asm 2: Subtract(>YmX1=r.Y,<Y1=p.Y,<X1=p.X); */
            FieldOperations.Subtract(out r.Y, ref p.Y, ref p.X);

            /* qhasm: A = YpX1*YmX2 */
            /* asm 1: Multiplication(>A=fe#3,<YpX1=fe#1,<YmX2=fe#16); */
            /* asm 2: Multiplication(>A=r.Z,<YpX1=r.X,<YmX2=q.YminusX); */
            FieldOperations.Multiplication(out r.Z, ref r.X, ref q.YminusX);

            /* qhasm: B = YmX1*YpX2 */
            /* asm 1: Multiplication(>B=fe#2,<YmX1=fe#2,<YpX2=fe#15); */
            /* asm 2: Multiplication(>B=r.Y,<YmX1=r.Y,<YpX2=q.YplusX); */
            FieldOperations.Multiplication(out r.Y, ref r.Y, ref q.YplusX);

            /* qhasm: C = T2d2*T1 */
            /* asm 1: Multiplication(>C=fe#4,<T2d2=fe#18,<T1=fe#14); */
            /* asm 2: Multiplication(>C=r.T,<T2d2=q.T2d,<T1=p.T); */
            FieldOperations.Multiplication(out r.T, ref q.T2d, ref p.T);

            /* qhasm: ZZ = Z1*Z2 */
            /* asm 1: Multiplication(>ZZ=fe#1,<Z1=fe#13,<Z2=fe#17); */
            /* asm 2: Multiplication(>ZZ=r.X,<Z1=p.Z,<Z2=q.Z); */
            FieldOperations.Multiplication(out r.X, ref p.Z, ref q.Z);

            /* qhasm: D = 2*ZZ */
            /* asm 1: Add(>D=fe#5,<ZZ=fe#1,<ZZ=fe#1); */
            /* asm 2: Add(>D=t0,<ZZ=r.X,<ZZ=r.X); */
            FieldOperations.Add(out var t0, ref r.X, ref r.X);

            /* qhasm: X3 = A-B */
            /* asm 1: Subtract(>X3=fe#1,<A=fe#3,<B=fe#2); */
            /* asm 2: Subtract(>X3=r.X,<A=r.Z,<B=r.Y); */
            FieldOperations.Subtract(out r.X, ref r.Z, ref r.Y);

            /* qhasm: Y3 = A+B */
            /* asm 1: Add(>Y3=fe#2,<A=fe#3,<B=fe#2); */
            /* asm 2: Add(>Y3=r.Y,<A=r.Z,<B=r.Y); */
            FieldOperations.Add(out r.Y, ref r.Z, ref r.Y);

            /* qhasm: Z3 = D-C */
            /* asm 1: Subtract(>Z3=fe#3,<D=fe#5,<C=fe#4); */
            /* asm 2: Subtract(>Z3=r.Z,<D=t0,<C=r.T); */
            FieldOperations.Subtract(out r.Z, ref t0, ref r.T);

            /* qhasm: T3 = D+C */
            /* asm 1: Add(>T3=fe#4,<D=fe#5,<C=fe#4); */
            /* asm 2: Add(>T3=r.T,<D=t0,<C=r.T); */
            FieldOperations.Add(out r.T, ref t0, ref r.T);

            /* qhasm: return */
        }
    }
}
'''
'''--- Src/NearClientUnity/Utilities/Ed25519/Internal/Ed25519Ref10/Group/Operations/ToBytes.cs ---
﻿using NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.Field.Operations;

namespace NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.Group.Operations
{
    internal static partial class GroupOperations
    {
        public static void ToBytes(byte[] s, int offset, ref GroupElementP2 h)
        {
            FieldOperations.Invert(out var recip, ref h.Z);
            FieldOperations.Multiplication(out var x, ref h.X, ref recip);
            FieldOperations.Multiplication(out var y, ref h.Y, ref recip);
            FieldOperations.ToBytes(s, offset, ref y);
            s[offset + 31] ^= (byte)(FieldOperations.IsNegative(ref x) << 7);
        }
    }
}
'''
'''--- Src/NearClientUnity/Utilities/Ed25519/Internal/Ed25519Ref10/Lookup/Base.cs ---
﻿using NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.Field;
using NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.Group;

namespace NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.Lookup
{
    internal static partial class LookupTables
    {
        /* base[i][j] = (j+1)*256^i*B */

        //32*8
        internal static readonly GroupElementPreComp[][] Base =
        {
            new[]
            {
                new GroupElementPreComp(
                    new FieldElement(25967493, -14356035, 29566456, 3660896, -12694345, 4014787, 27544626, -11754271,
                        -6079156, 2047605),
                    new FieldElement(-12545711, 934262, -2722910, 3049990, -727428, 9406986, 12720692, 5043384,
                        19500929, -15469378),
                    new FieldElement(-8738181, 4489570, 9688441, -14785194, 10184609, -12363380, 29287919, 11864899,
                        -24514362, -4438546)
                ),
                new GroupElementPreComp(
                    new FieldElement(-12815894, -12976347, -21581243, 11784320, -25355658, -2750717, -11717903,
                        -3814571, -358445, -10211303),
                    new FieldElement(-21703237, 6903825, 27185491, 6451973, -29577724, -9554005, -15616551, 11189268,
                        -26829678, -5319081),
                    new FieldElement(26966642, 11152617, 32442495, 15396054, 14353839, -12752335, -3128826, -9541118,
                        -15472047, -4166697)
                ),
                new GroupElementPreComp(
                    new FieldElement(15636291, -9688557, 24204773, -7912398, 616977, -16685262, 27787600, -14772189,
                        28944400, -1550024),
                    new FieldElement(16568933, 4717097, -11556148, -1102322, 15682896, -11807043, 16354577, -11775962,
                        7689662, 11199574),
                    new FieldElement(30464156, -5976125, -11779434, -15670865, 23220365, 15915852, 7512774, 10017326,
                        -17749093, -9920357)
                ),
                new GroupElementPreComp(
                    new FieldElement(-17036878, 13921892, 10945806, -6033431, 27105052, -16084379, -28926210, 15006023,
                        3284568, -6276540),
                    new FieldElement(23599295, -8306047, -11193664, -7687416, 13236774, 10506355, 7464579, 9656445,
                        13059162, 10374397),
                    new FieldElement(7798556, 16710257, 3033922, 2874086, 28997861, 2835604, 32406664, -3839045,
                        -641708, -101325)
                ),
                new GroupElementPreComp(
                    new FieldElement(10861363, 11473154, 27284546, 1981175, -30064349, 12577861, 32867885, 14515107,
                        -15438304, 10819380),
                    new FieldElement(4708026, 6336745, 20377586, 9066809, -11272109, 6594696, -25653668, 12483688,
                        -12668491, 5581306),
                    new FieldElement(19563160, 16186464, -29386857, 4097519, 10237984, -4348115, 28542350, 13850243,
                        -23678021, -15815942)
                ),
                new GroupElementPreComp(
                    new FieldElement(-15371964, -12862754, 32573250, 4720197, -26436522, 5875511, -19188627, -15224819,
                        -9818940, -12085777),
                    new FieldElement(-8549212, 109983, 15149363, 2178705, 22900618, 4543417, 3044240, -15689887,
                        1762328, 14866737),
                    new FieldElement(-18199695, -15951423, -10473290, 1707278, -17185920, 3916101, -28236412, 3959421,
                        27914454, 4383652)
                ),
                new GroupElementPreComp(
                    new FieldElement(5153746, 9909285, 1723747, -2777874, 30523605, 5516873, 19480852, 5230134,
                        -23952439, -15175766),
                    new FieldElement(-30269007, -3463509, 7665486, 10083793, 28475525, 1649722, 20654025, 16520125,
                        30598449, 7715701),
                    new FieldElement(28881845, 14381568, 9657904, 3680757, -20181635, 7843316, -31400660, 1370708,
                        29794553, -1409300)
                ),
                new GroupElementPreComp(
                    new FieldElement(14499471, -2729599, -33191113, -4254652, 28494862, 14271267, 30290735, 10876454,
                        -33154098, 2381726),
                    new FieldElement(-7195431, -2655363, -14730155, 462251, -27724326, 3941372, -6236617, 3696005,
                        -32300832, 15351955),
                    new FieldElement(27431194, 8222322, 16448760, -3907995, -18707002, 11938355, -32961401, -2970515,
                        29551813, 10109425)
                )
            },
            new[]
            {
                new GroupElementPreComp(
                    new FieldElement(-13657040, -13155431, -31283750, 11777098, 21447386, 6519384, -2378284, -1627556,
                        10092783, -4764171),
                    new FieldElement(27939166, 14210322, 4677035, 16277044, -22964462, -12398139, -32508754, 12005538,
                        -17810127, 12803510),
                    new FieldElement(17228999, -15661624, -1233527, 300140, -1224870, -11714777, 30364213, -9038194,
                        18016357, 4397660)
                ),
                new GroupElementPreComp(
                    new FieldElement(-10958843, -7690207, 4776341, -14954238, 27850028, -15602212, -26619106, 14544525,
                        -17477504, 982639),
                    new FieldElement(29253598, 15796703, -2863982, -9908884, 10057023, 3163536, 7332899, -4120128,
                        -21047696, 9934963),
                    new FieldElement(5793303, 16271923, -24131614, -10116404, 29188560, 1206517, -14747930, 4559895,
                        -30123922, -10897950)
                ),
                new GroupElementPreComp(
                    new FieldElement(-27643952, -11493006, 16282657, -11036493, 28414021, -15012264, 24191034, 4541697,
                        -13338309, 5500568),
                    new FieldElement(12650548, -1497113, 9052871, 11355358, -17680037, -8400164, -17430592, 12264343,
                        10874051, 13524335),
                    new FieldElement(25556948, -3045990, 714651, 2510400, 23394682, -10415330, 33119038, 5080568,
                        -22528059, 5376628)
                ),
                new GroupElementPreComp(
                    new FieldElement(-26088264, -4011052, -17013699, -3537628, -6726793, 1920897, -22321305, -9447443,
                        4535768, 1569007),
                    new FieldElement(-2255422, 14606630, -21692440, -8039818, 28430649, 8775819, -30494562, 3044290,
                        31848280, 12543772),
                    new FieldElement(-22028579, 2943893, -31857513, 6777306, 13784462, -4292203, -27377195, -2062731,
                        7718482, 14474653)
                ),
                new GroupElementPreComp(
                    new FieldElement(2385315, 2454213, -22631320, 46603, -4437935, -15680415, 656965, -7236665,
                        24316168, -5253567),
                    new FieldElement(13741529, 10911568, -33233417, -8603737, -20177830, -1033297, 33040651, -13424532,
                        -20729456, 8321686),
                    new FieldElement(21060490, -2212744, 15712757, -4336099, 1639040, 10656336, 23845965, -11874838,
                        -9984458, 608372)
                ),
                new GroupElementPreComp(
                    new FieldElement(-13672732, -15087586, -10889693, -7557059, -6036909, 11305547, 1123968, -6780577,
                        27229399, 23887),
                    new FieldElement(-23244140, -294205, -11744728, 14712571, -29465699, -2029617, 12797024, -6440308,
                        -1633405, 16678954),
                    new FieldElement(-29500620, 4770662, -16054387, 14001338, 7830047, 9564805, -1508144, -4795045,
                        -17169265, 4904953)
                ),
                new GroupElementPreComp(
                    new FieldElement(24059557, 14617003, 19037157, -15039908, 19766093, -14906429, 5169211, 16191880,
                        2128236, -4326833),
                    new FieldElement(-16981152, 4124966, -8540610, -10653797, 30336522, -14105247, -29806336, 916033,
                        -6882542, -2986532),
                    new FieldElement(-22630907, 12419372, -7134229, -7473371, -16478904, 16739175, 285431, 2763829,
                        15736322, 4143876)
                ),
                new GroupElementPreComp(
                    new FieldElement(2379352, 11839345, -4110402, -5988665, 11274298, 794957, 212801, -14594663,
                        23527084, -16458268),
                    new FieldElement(33431127, -11130478, -17838966, -15626900, 8909499, 8376530, -32625340, 4087881,
                        -15188911, -14416214),
                    new FieldElement(1767683, 7197987, -13205226, -2022635, -13091350, 448826, 5799055, 4357868,
                        -4774191, -16323038)
                )
            },
            new[]
            {
                new GroupElementPreComp(
                    new FieldElement(6721966, 13833823, -23523388, -1551314, 26354293, -11863321, 23365147, -3949732,
                        7390890, 2759800),
                    new FieldElement(4409041, 2052381, 23373853, 10530217, 7676779, -12885954, 21302353, -4264057,
                        1244380, -12919645),
                    new FieldElement(-4421239, 7169619, 4982368, -2957590, 30256825, -2777540, 14086413, 9208236,
                        15886429, 16489664)
                ),
                new GroupElementPreComp(
                    new FieldElement(1996075, 10375649, 14346367, 13311202, -6874135, -16438411, -13693198, 398369,
                        -30606455, -712933),
                    new FieldElement(-25307465, 9795880, -2777414, 14878809, -33531835, 14780363, 13348553, 12076947,
                        -30836462, 5113182),
                    new FieldElement(-17770784, 11797796, 31950843, 13929123, -25888302, 12288344, -30341101, -7336386,
                        13847711, 5387222)
                ),
                new GroupElementPreComp(
                    new FieldElement(-18582163, -3416217, 17824843, -2340966, 22744343, -10442611, 8763061, 3617786,
                        -19600662, 10370991),
                    new FieldElement(20246567, -14369378, 22358229, -543712, 18507283, -10413996, 14554437, -8746092,
                        32232924, 16763880),
                    new FieldElement(9648505, 10094563, 26416693, 14745928, -30374318, -6472621, 11094161, 15689506,
                        3140038, -16510092)
                ),
                new GroupElementPreComp(
                    new FieldElement(-16160072, 5472695, 31895588, 4744994, 8823515, 10365685, -27224800, 9448613,
                        -28774454, 366295),
                    new FieldElement(19153450, 11523972, -11096490, -6503142, -24647631, 5420647, 28344573, 8041113,
                        719605, 11671788),
                    new FieldElement(8678025, 2694440, -6808014, 2517372, 4964326, 11152271, -15432916, -15266516,
                        27000813, -10195553)
                ),
                new GroupElementPreComp(
                    new FieldElement(-15157904, 7134312, 8639287, -2814877, -7235688, 10421742, 564065, 5336097,
                        6750977, -14521026),
                    new FieldElement(11836410, -3979488, 26297894, 16080799, 23455045, 15735944, 1695823, -8819122,
                        8169720, 16220347),
                    new FieldElement(-18115838, 8653647, 17578566, -6092619, -8025777, -16012763, -11144307, -2627664,
                        -5990708, -14166033)
                ),
                new GroupElementPreComp(
                    new FieldElement(-23308498, -10968312, 15213228, -10081214, -30853605, -11050004, 27884329, 2847284,
                        2655861, 1738395),
                    new FieldElement(-27537433, -14253021, -25336301, -8002780, -9370762, 8129821, 21651608, -3239336,
                        -19087449, -11005278),
                    new FieldElement(1533110, 3437855, 23735889, 459276, 29970501, 11335377, 26030092, 5821408,
                        10478196, 8544890)
                ),
                new GroupElementPreComp(
                    new FieldElement(32173121, -16129311, 24896207, 3921497, 22579056, -3410854, 19270449, 12217473,
                        17789017, -3395995),
                    new FieldElement(-30552961, -2228401, -15578829, -10147201, 13243889, 517024, 15479401, -3853233,
                        30460520, 1052596),
                    new FieldElement(-11614875, 13323618, 32618793, 8175907, -15230173, 12596687, 27491595, -4612359,
                        3179268, -9478891)
                ),
                new GroupElementPreComp(
                    new FieldElement(31947069, -14366651, -4640583, -15339921, -15125977, -6039709, -14756777,
                        -16411740, 19072640, -9511060),
                    new FieldElement(11685058, 11822410, 3158003, -13952594, 33402194, -4165066, 5977896, -5215017,
                        473099, 5040608),
                    new FieldElement(-20290863, 8198642, -27410132, 11602123, 1290375, -2799760, 28326862, 1721092,
                        -19558642, -3131606)
                )
            },
            new[]
            {
                new GroupElementPreComp(
                    new FieldElement(7881532, 10687937, 7578723, 7738378, -18951012, -2553952, 21820786, 8076149,
                        -27868496, 11538389),
                    new FieldElement(-19935666, 3899861, 18283497, -6801568, -15728660, -11249211, 8754525, 7446702,
                        -5676054, 5797016),
                    new FieldElement(-11295600, -3793569, -15782110, -7964573, 12708869, -8456199, 2014099, -9050574,
                        -2369172, -5877341)
                ),
                new GroupElementPreComp(
                    new FieldElement(-22472376, -11568741, -27682020, 1146375, 18956691, 16640559, 1192730, -3714199,
                        15123619, 10811505),
                    new FieldElement(14352098, -3419715, -18942044, 10822655, 32750596, 4699007, -70363, 15776356,
                        -28886779, -11974553),
                    new FieldElement(-28241164, -8072475, -4978962, -5315317, 29416931, 1847569, -20654173, -16484855,
                        4714547, -9600655)
                ),
                new GroupElementPreComp(
                    new FieldElement(15200332, 8368572, 19679101, 15970074, -31872674, 1959451, 24611599, -4543832,
                        -11745876, 12340220),
                    new FieldElement(12876937, -10480056, 33134381, 6590940, -6307776, 14872440, 9613953, 8241152,
                        15370987, 9608631),
                    new FieldElement(-4143277, -12014408, 8446281, -391603, 4407738, 13629032, -7724868, 15866074,
                        -28210621, -8814099)
                ),
                new GroupElementPreComp(
                    new FieldElement(26660628, -15677655, 8393734, 358047, -7401291, 992988, -23904233, 858697,
                        20571223, 8420556),
                    new FieldElement(14620715, 13067227, -15447274, 8264467, 14106269, 15080814, 33531827, 12516406,
                        -21574435, -12476749),
                    new FieldElement(236881, 10476226, 57258, -14677024, 6472998, 2466984, 17258519, 7256740, 8791136,
                        15069930)
                ),
                new GroupElementPreComp(
                    new FieldElement(1276410, -9371918, 22949635, -16322807, -23493039, -5702186, 14711875, 4874229,
                        -30663140, -2331391),
                    new FieldElement(5855666, 4990204, -13711848, 7294284, -7804282, 1924647, -1423175, -7912378,
                        -33069337, 9234253),
                    new FieldElement(20590503, -9018988, 31529744, -7352666, -2706834, 10650548, 31559055, -11609587,
                        18979186, 13396066)
                ),
                new GroupElementPreComp(
                    new FieldElement(24474287, 4968103, 22267082, 4407354, 24063882, -8325180, -18816887, 13594782,
                        33514650, 7021958),
                    new FieldElement(-11566906, -6565505, -21365085, 15928892, -26158305, 4315421, -25948728, -3916677,
                        -21480480, 12868082),
                    new FieldElement(-28635013, 13504661, 19988037, -2132761, 21078225, 6443208, -21446107, 2244500,
                        -12455797, -8089383)
                ),
                new GroupElementPreComp(
                    new FieldElement(-30595528, 13793479, -5852820, 319136, -25723172, -6263899, 33086546, 8957937,
                        -15233648, 5540521),
                    new FieldElement(-11630176, -11503902, -8119500, -7643073, 2620056, 1022908, -23710744, -1568984,
                        -16128528, -14962807),
                    new FieldElement(23152971, 775386, 27395463, 14006635, -9701118, 4649512, 1689819, 892185,
                        -11513277, -15205948)
                ),
                new GroupElementPreComp(
                    new FieldElement(9770129, 9586738, 26496094, 4324120, 1556511, -3550024, 27453819, 4763127,
                        -19179614, 5867134),
                    new FieldElement(-32765025, 1927590, 31726409, -4753295, 23962434, -16019500, 27846559, 5931263,
                        -29749703, -16108455),
                    new FieldElement(27461885, -2977536, 22380810, 1815854, -23033753, -3031938, 7283490, -15148073,
                        -19526700, 7734629)
                )
            },
            new[]
            {
                new GroupElementPreComp(
                    new FieldElement(-8010264, -9590817, -11120403, 6196038, 29344158, -13430885, 7585295, -3176626,
                        18549497, 15302069),
                    new FieldElement(-32658337, -6171222, -7672793, -11051681, 6258878, 13504381, 10458790, -6418461,
                        -8872242, 8424746),
                    new FieldElement(24687205, 8613276, -30667046, -3233545, 1863892, -1830544, 19206234, 7134917,
                        -11284482, -828919)
                ),
                new GroupElementPreComp(
                    new FieldElement(11334899, -9218022, 8025293, 12707519, 17523892, -10476071, 10243738, -14685461,
                        -5066034, 16498837),
                    new FieldElement(8911542, 6887158, -9584260, -6958590, 11145641, -9543680, 17303925, -14124238,
                        6536641, 10543906),
                    new FieldElement(-28946384, 15479763, -17466835, 568876, -1497683, 11223454, -2669190, -16625574,
                        -27235709, 8876771)
                ),
                new GroupElementPreComp(
                    new FieldElement(-25742899, -12566864, -15649966, -846607, -33026686, -796288, -33481822, 15824474,
                        -604426, -9039817),
                    new FieldElement(10330056, 70051, 7957388, -9002667, 9764902, 15609756, 27698697, -4890037, 1657394,
                        3084098),
                    new FieldElement(10477963, -7470260, 12119566, -13250805, 29016247, -5365589, 31280319, 14396151,
                        -30233575, 15272409)
                ),
                new GroupElementPreComp(
                    new FieldElement(-12288309, 3169463, 28813183, 16658753, 25116432, -5630466, -25173957, -12636138,
                        -25014757, 1950504),
                    new FieldElement(-26180358, 9489187, 11053416, -14746161, -31053720, 5825630, -8384306, -8767532,
                        15341279, 8373727),
                    new FieldElement(28685821, 7759505, -14378516, -12002860, -31971820, 4079242, 298136, -10232602,
                        -2878207, 15190420)
                ),
                new GroupElementPreComp(
                    new FieldElement(-32932876, 13806336, -14337485, -15794431, -24004620, 10940928, 8669718, 2742393,
                        -26033313, -6875003),
                    new FieldElement(-1580388, -11729417, -25979658, -11445023, -17411874, -10912854, 9291594,
                        -16247779, -12154742, 6048605),
                    new FieldElement(-30305315, 14843444, 1539301, 11864366, 20201677, 1900163, 13934231, 5128323,
                        11213262, 9168384)
                ),
                new GroupElementPreComp(
                    new FieldElement(-26280513, 11007847, 19408960, -940758, -18592965, -4328580, -5088060, -11105150,
                        20470157, -16398701),
                    new FieldElement(-23136053, 9282192, 14855179, -15390078, -7362815, -14408560, -22783952, 14461608,
                        14042978, 5230683),
                    new FieldElement(29969567, -2741594, -16711867, -8552442, 9175486, -2468974, 21556951, 3506042,
                        -5933891, -12449708)
                ),
                new GroupElementPreComp(
                    new FieldElement(-3144746, 8744661, 19704003, 4581278, -20430686, 6830683, -21284170, 8971513,
                        -28539189, 15326563),
                    new FieldElement(-19464629, 10110288, -17262528, -3503892, -23500387, 1355669, -15523050, 15300988,
                        -20514118, 9168260),
                    new FieldElement(-5353335, 4488613, -23803248, 16314347, 7780487, -15638939, -28948358, 9601605,
                        33087103, -9011387)
                ),
                new GroupElementPreComp(
                    new FieldElement(-19443170, -15512900, -20797467, -12445323, -29824447, 10229461, -27444329,
                        -15000531, -5996870, 15664672),
                    new FieldElement(23294591, -16632613, -22650781, -8470978, 27844204, 11461195, 13099750, -2460356,
                        18151676, 13417686),
                    new FieldElement(-24722913, -4176517, -31150679, 5988919, -26858785, 6685065, 1661597, -12551441,
                        15271676, -15452665)
                )
            },
            new[]
            {
                new GroupElementPreComp(
                    new FieldElement(11433042, -13228665, 8239631, -5279517, -1985436, -725718, -18698764, 2167544,
                        -6921301, -13440182),
                    new FieldElement(-31436171, 15575146, 30436815, 12192228, -22463353, 9395379, -9917708, -8638997,
                        12215110, 12028277),
                    new FieldElement(14098400, 6555944, 23007258, 5757252, -15427832, -12950502, 30123440, 4617780,
                        -16900089, -655628)
                ),
                new GroupElementPreComp(
                    new FieldElement(-4026201, -15240835, 11893168, 13718664, -14809462, 1847385, -15819999, 10154009,
                        23973261, -12684474),
                    new FieldElement(-26531820, -3695990, -1908898, 2534301, -31870557, -16550355, 18341390, -11419951,
                        32013174, -10103539),
                    new FieldElement(-25479301, 10876443, -11771086, -14625140, -12369567, 1838104, 21911214, 6354752,
                        4425632, -837822)
                ),
                new GroupElementPreComp(
                    new FieldElement(-10433389, -14612966, 22229858, -3091047, -13191166, 776729, -17415375, -12020462,
                        4725005, 14044970),
                    new FieldElement(19268650, -7304421, 1555349, 8692754, -21474059, -9910664, 6347390, -1411784,
                        -19522291, -16109756),
                    new FieldElement(-24864089, 12986008, -10898878, -5558584, -11312371, -148526, 19541418, 8180106,
                        9282262, 10282508)
                ),
                new GroupElementPreComp(
                    new FieldElement(-26205082, 4428547, -8661196, -13194263, 4098402, -14165257, 15522535, 8372215,
                        5542595, -10702683),
                    new FieldElement(-10562541, 14895633, 26814552, -16673850, -17480754, -2489360, -2781891, 6993761,
                        -18093885, 10114655),
                    new FieldElement(-20107055, -929418, 31422704, 10427861, -7110749, 6150669, -29091755, -11529146,
                        25953725, -106158)
                ),
                new GroupElementPreComp(
                    new FieldElement(-4234397, -8039292, -9119125, 3046000, 2101609, -12607294, 19390020, 6094296,
                        -3315279, 12831125),
                    new FieldElement(-15998678, 7578152, 5310217, 14408357, -33548620, -224739, 31575954, 6326196,
                        7381791, -2421839),
                    new FieldElement(-20902779, 3296811, 24736065, -16328389, 18374254, 7318640, 6295303, 8082724,
                        -15362489, 12339664)
                ),
                new GroupElementPreComp(
                    new FieldElement(27724736, 2291157, 6088201, -14184798, 1792727, 5857634, 13848414, 15768922,
                        25091167, 14856294),
                    new FieldElement(-18866652, 8331043, 24373479, 8541013, -701998, -9269457, 12927300, -12695493,
                        -22182473, -9012899),
                    new FieldElement(-11423429, -5421590, 11632845, 3405020, 30536730, -11674039, -27260765, 13866390,
                        30146206, 9142070)
                ),
                new GroupElementPreComp(
                    new FieldElement(3924129, -15307516, -13817122, -10054960, 12291820, -668366, -27702774, 9326384,
                        -8237858, 4171294),
                    new FieldElement(-15921940, 16037937, 6713787, 16606682, -21612135, 2790944, 26396185, 3731949,
                        345228, -5462949),
                    new FieldElement(-21327538, 13448259, 25284571, 1143661, 20614966, -8849387, 2031539, -12391231,
                        -16253183, -13582083)
                ),
                new GroupElementPreComp(
                    new FieldElement(31016211, -16722429, 26371392, -14451233, -5027349, 14854137, 17477601, 3842657,
                        28012650, -16405420),
                    new FieldElement(-5075835, 9368966, -8562079, -4600902, -15249953, 6970560, -9189873, 16292057,
                        -8867157, 3507940),
                    new FieldElement(29439664, 3537914, 23333589, 6997794, -17555561, -11018068, -15209202, -15051267,
                        -9164929, 6580396)
                )
            },
            new[]
            {
                new GroupElementPreComp(
                    new FieldElement(-12185861, -7679788, 16438269, 10826160, -8696817, -6235611, 17860444, -9273846,
                        -2095802, 9304567),
                    new FieldElement(20714564, -4336911, 29088195, 7406487, 11426967, -5095705, 14792667, -14608617,
                        5289421, -477127),
                    new FieldElement(-16665533, -10650790, -6160345, -13305760, 9192020, -1802462, 17271490, 12349094,
                        26939669, -3752294)
                ),
                new GroupElementPreComp(
                    new FieldElement(-12889898, 9373458, 31595848, 16374215, 21471720, 13221525, -27283495, -12348559,
                        -3698806, 117887),
                    new FieldElement(22263325, -6560050, 3984570, -11174646, -15114008, -566785, 28311253, 5358056,
                        -23319780, 541964),
                    new FieldElement(16259219, 3261970, 2309254, -15534474, -16885711, -4581916, 24134070, -16705829,
                        -13337066, -13552195)
                ),
                new GroupElementPreComp(
                    new FieldElement(9378160, -13140186, -22845982, -12745264, 28198281, -7244098, -2399684, -717351,
                        690426, 14876244),
                    new FieldElement(24977353, -314384, -8223969, -13465086, 28432343, -1176353, -13068804, -12297348,
                        -22380984, 6618999),
                    new FieldElement(-1538174, 11685646, 12944378, 13682314, -24389511, -14413193, 8044829, -13817328,
                        32239829, -5652762)
                ),
                new GroupElementPreComp(
                    new FieldElement(-18603066, 4762990, -926250, 8885304, -28412480, -3187315, 9781647, -10350059,
                        32779359, 5095274),
                    new FieldElement(-33008130, -5214506, -32264887, -3685216, 9460461, -9327423, -24601656, 14506724,
                        21639561, -2630236),
                    new FieldElement(-16400943, -13112215, 25239338, 15531969, 3987758, -4499318, -1289502, -6863535,
                        17874574, 558605)
                ),
                new GroupElementPreComp(
                    new FieldElement(-13600129, 10240081, 9171883, 16131053, -20869254, 9599700, 33499487, 5080151,
                        2085892, 5119761),
                    new FieldElement(-22205145, -2519528, -16381601, 414691, -25019550, 2170430, 30634760, -8363614,
                        -31999993, -5759884),
                    new FieldElement(-6845704, 15791202, 8550074, -1312654, 29928809, -12092256, 27534430, -7192145,
                        -22351378, 12961482)
                ),
                new GroupElementPreComp(
                    new FieldElement(-24492060, -9570771, 10368194, 11582341, -23397293, -2245287, 16533930, 8206996,
                        -30194652, -5159638),
                    new FieldElement(-11121496, -3382234, 2307366, 6362031, -135455, 8868177, -16835630, 7031275,
                        7589640, 8945490),
                    new FieldElement(-32152748, 8917967, 6661220, -11677616, -1192060, -15793393, 7251489, -11182180,
                        24099109, -14456170)
                ),
                new GroupElementPreComp(
                    new FieldElement(5019558, -7907470, 4244127, -14714356, -26933272, 6453165, -19118182, -13289025,
                        -6231896, -10280736),
                    new FieldElement(10853594, 10721687, 26480089, 5861829, -22995819, 1972175, -1866647, -10557898,
                        -3363451, -6441124),
                    new FieldElement(-17002408, 5906790, 221599, -6563147, 7828208, -13248918, 24362661, -2008168,
                        -13866408, 7421392)
                ),
                new GroupElementPreComp(
                    new FieldElement(8139927, -6546497, 32257646, -5890546, 30375719, 1886181, -21175108, 15441252,
                        28826358, -4123029),
                    new FieldElement(6267086, 9695052, 7709135, -16603597, -32869068, -1886135, 14795160, -7840124,
                        13746021, -1742048),
                    new FieldElement(28584902, 7787108, -6732942, -15050729, 22846041, -7571236, -3181936, -363524,
                        4771362, -8419958)
                )
            },
            new[]
            {
                new GroupElementPreComp(
                    new FieldElement(24949256, 6376279, -27466481, -8174608, -18646154, -9930606, 33543569, -12141695,
                        3569627, 11342593),
                    new FieldElement(26514989, 4740088, 27912651, 3697550, 19331575, -11472339, 6809886, 4608608,
                        7325975, -14801071),
                    new FieldElement(-11618399, -14554430, -24321212, 7655128, -1369274, 5214312, -27400540, 10258390,
                        -17646694, -8186692)
                ),
                new GroupElementPreComp(
                    new FieldElement(11431204, 15823007, 26570245, 14329124, 18029990, 4796082, -31446179, 15580664,
                        9280358, -3973687),
                    new FieldElement(-160783, -10326257, -22855316, -4304997, -20861367, -13621002, -32810901,
                        -11181622, -15545091, 4387441),
                    new FieldElement(-20799378, 12194512, 3937617, -5805892, -27154820, 9340370, -24513992, 8548137,
                        20617071, -7482001)
                ),
                new GroupElementPreComp(
                    new FieldElement(-938825, -3930586, -8714311, 16124718, 24603125, -6225393, -13775352, -11875822,
                        24345683, 10325460),
                    new FieldElement(-19855277, -1568885, -22202708, 8714034, 14007766, 6928528, 16318175, -1010689,
                        4766743, 3552007),
                    new FieldElement(-21751364, -16730916, 1351763, -803421, -4009670, 3950935, 3217514, 14481909,
                        10988822, -3994762)
                ),
                new GroupElementPreComp(
                    new FieldElement(15564307, -14311570, 3101243, 5684148, 30446780, -8051356, 12677127, -6505343,
                        -8295852, 13296005),
                    new FieldElement(-9442290, 6624296, -30298964, -11913677, -4670981, -2057379, 31521204, 9614054,
                        -30000824, 12074674),
                    new FieldElement(4771191, -135239, 14290749, -13089852, 27992298, 14998318, -1413936, -1556716,
                        29832613, -16391035)
                ),
                new GroupElementPreComp(
                    new FieldElement(7064884, -7541174, -19161962, -5067537, -18891269, -2912736, 25825242, 5293297,
                        -27122660, 13101590),
                    new FieldElement(-2298563, 2439670, -7466610, 1719965, -27267541, -16328445, 32512469, -5317593,
                        -30356070, -4190957),
                    new FieldElement(-30006540, 10162316, -33180176, 3981723, -16482138, -13070044, 14413974, 9515896,
                        19568978, 9628812)
                ),
                new GroupElementPreComp(
                    new FieldElement(33053803, 199357, 15894591, 1583059, 27380243, -4580435, -17838894, -6106839,
                        -6291786, 3437740),
                    new FieldElement(-18978877, 3884493, 19469877, 12726490, 15913552, 13614290, -22961733, 70104,
                        7463304, 4176122),
                    new FieldElement(-27124001, 10659917, 11482427, -16070381, 12771467, -6635117, -32719404, -5322751,
                        24216882, 5944158)
                ),
                new GroupElementPreComp(
                    new FieldElement(8894125, 7450974, -2664149, -9765752, -28080517, -12389115, 19345746, 14680796,
                        11632993, 5847885),
                    new FieldElement(26942781, -2315317, 9129564, -4906607, 26024105, 11769399, -11518837, 6367194,
                        -9727230, 4782140),
                    new FieldElement(19916461, -4828410, -22910704, -11414391, 25606324, -5972441, 33253853, 8220911,
                        6358847, -1873857)
                ),
                new GroupElementPreComp(
                    new FieldElement(801428, -2081702, 16569428, 11065167, 29875704, 96627, 7908388, -4480480,
                        -13538503, 1387155),
                    new FieldElement(19646058, 5720633, -11416706, 12814209, 11607948, 12749789, 14147075, 15156355,
                        -21866831, 11835260),
                    new FieldElement(19299512, 1155910, 28703737, 14890794, 2925026, 7269399, 26121523, 15467869,
                        -26560550, 5052483)
                )
            },
            new[]
            {
                new GroupElementPreComp(
                    new FieldElement(-3017432, 10058206, 1980837, 3964243, 22160966, 12322533, -6431123, -12618185,
                        12228557, -7003677),
                    new FieldElement(32944382, 14922211, -22844894, 5188528, 21913450, -8719943, 4001465, 13238564,
                        -6114803, 8653815),
                    new FieldElement(22865569, -4652735, 27603668, -12545395, 14348958, 8234005, 24808405, 5719875,
                        28483275, 2841751)
                ),
                new GroupElementPreComp(
                    new FieldElement(-16420968, -1113305, -327719, -12107856, 21886282, -15552774, -1887966, -315658,
                        19932058, -12739203),
                    new FieldElement(-11656086, 10087521, -8864888, -5536143, -19278573, -3055912, 3999228, 13239134,
                        -4777469, -13910208),
                    new FieldElement(1382174, -11694719, 17266790, 9194690, -13324356, 9720081, 20403944, 11284705,
                        -14013818, 3093230)
                ),
                new GroupElementPreComp(
                    new FieldElement(16650921, -11037932, -1064178, 1570629, -8329746, 7352753, -302424, 16271225,
                        -24049421, -6691850),
                    new FieldElement(-21911077, -5927941, -4611316, -5560156, -31744103, -10785293, 24123614, 15193618,
                        -21652117, -16739389),
                    new FieldElement(-9935934, -4289447, -25279823, 4372842, 2087473, 10399484, 31870908, 14690798,
                        17361620, 11864968)
                ),
                new GroupElementPreComp(
                    new FieldElement(-11307610, 6210372, 13206574, 5806320, -29017692, -13967200, -12331205, -7486601,
                        -25578460, -16240689),
                    new FieldElement(14668462, -12270235, 26039039, 15305210, 25515617, 4542480, 10453892, 6577524,
                        9145645, -6443880),
                    new FieldElement(5974874, 3053895, -9433049, -10385191, -31865124, 3225009, -7972642, 3936128,
                        -5652273, -3050304)
                ),
                new GroupElementPreComp(
                    new FieldElement(30625386, -4729400, -25555961, -12792866, -20484575, 7695099, 17097188, -16303496,
                        -27999779, 1803632),
                    new FieldElement(-3553091, 9865099, -5228566, 4272701, -5673832, -16689700, 14911344, 12196514,
                        -21405489, 7047412),
                    new FieldElement(20093277, 9920966, -11138194, -5343857, 13161587, 12044805, -32856851, 4124601,
                        -32343828, -10257566)
                ),
                new GroupElementPreComp(
                    new FieldElement(-20788824, 14084654, -13531713, 7842147, 19119038, -13822605, 4752377, -8714640,
                        -21679658, 2288038),
                    new FieldElement(-26819236, -3283715, 29965059, 3039786, -14473765, 2540457, 29457502, 14625692,
                        -24819617, 12570232),
                    new FieldElement(-1063558, -11551823, 16920318, 12494842, 1278292, -5869109, -21159943, -3498680,
                        -11974704, 4724943)
                ),
                new GroupElementPreComp(
                    new FieldElement(17960970, -11775534, -4140968, -9702530, -8876562, -1410617, -12907383, -8659932,
                        -29576300, 1903856),
                    new FieldElement(23134274, -14279132, -10681997, -1611936, 20684485, 15770816, -12989750, 3190296,
                        26955097, 14109738),
                    new FieldElement(15308788, 5320727, -30113809, -14318877, 22902008, 7767164, 29425325, -11277562,
                        31960942, 11934971)
                ),
                new GroupElementPreComp(
                    new FieldElement(-27395711, 8435796, 4109644, 12222639, -24627868, 14818669, 20638173, 4875028,
                        10491392, 1379718),
                    new FieldElement(-13159415, 9197841, 3875503, -8936108, -1383712, -5879801, 33518459, 16176658,
                        21432314, 12180697),
                    new FieldElement(-11787308, 11500838, 13787581, -13832590, -22430679, 10140205, 1465425, 12689540,
                        -10301319, -13872883)
                )
            },
            new[]
            {
                new GroupElementPreComp(
                    new FieldElement(5414091, -15386041, -21007664, 9643570, 12834970, 1186149, -2622916, -1342231,
                        26128231, 6032912),
                    new FieldElement(-26337395, -13766162, 32496025, -13653919, 17847801, -12669156, 3604025, 8316894,
                        -25875034, -10437358),
                    new FieldElement(3296484, 6223048, 24680646, -12246460, -23052020, 5903205, -8862297, -4639164,
                        12376617, 3188849)
                ),
                new GroupElementPreComp(
                    new FieldElement(29190488, -14659046, 27549113, -1183516, 3520066, -10697301, 32049515, -7309113,
                        -16109234, -9852307),
                    new FieldElement(-14744486, -9309156, 735818, -598978, -20407687, -5057904, 25246078, -15795669,
                        18640741, -960977),
                    new FieldElement(-6928835, -16430795, 10361374, 5642961, 4910474, 12345252, -31638386, -494430,
                        10530747, 1053335)
                ),
                new GroupElementPreComp(
                    new FieldElement(-29265967, -14186805, -13538216, -12117373, -19457059, -10655384, -31462369,
                        -2948985, 24018831, 15026644),
                    new FieldElement(-22592535, -3145277, -2289276, 5953843, -13440189, 9425631, 25310643, 13003497,
                        -2314791, -15145616),
                    new FieldElement(-27419985, -603321, -8043984, -1669117, -26092265, 13987819, -27297622, 187899,
                        -23166419, -2531735)
                ),
                new GroupElementPreComp(
                    new FieldElement(-21744398, -13810475, 1844840, 5021428, -10434399, -15911473, 9716667, 16266922,
                        -5070217, 726099),
                    new FieldElement(29370922, -6053998, 7334071, -15342259, 9385287, 2247707, -13661962, -4839461,
                        30007388, -15823341),
                    new FieldElement(-936379, 16086691, 23751945, -543318, -1167538, -5189036, 9137109, 730663, 9835848,
                        4555336)
                ),
                new GroupElementPreComp(
                    new FieldElement(-23376435, 1410446, -22253753, -12899614, 30867635, 15826977, 17693930, 544696,
                        -11985298, 12422646),
                    new FieldElement(31117226, -12215734, -13502838, 6561947, -9876867, -12757670, -5118685, -4096706,
                        29120153, 13924425),
                    new FieldElement(-17400879, -14233209, 19675799, -2734756, -11006962, -5858820, -9383939, -11317700,
                        7240931, -237388)
                ),
                new GroupElementPreComp(
                    new FieldElement(-31361739, -11346780, -15007447, -5856218, -22453340, -12152771, 1222336, 4389483,
                        3293637, -15551743),
                    new FieldElement(-16684801, -14444245, 11038544, 11054958, -13801175, -3338533, -24319580, 7733547,
                        12796905, -6335822),
                    new FieldElement(-8759414, -10817836, -25418864, 10783769, -30615557, -9746811, -28253339, 3647836,
                        3222231, -11160462)
                ),
                new GroupElementPreComp(
                    new FieldElement(18606113, 1693100, -25448386, -15170272, 4112353, 10045021, 23603893, -2048234,
                        -7550776, 2484985),
                    new FieldElement(9255317, -3131197, -12156162, -1004256, 13098013, -9214866, 16377220, -2102812,
                        -19802075, -3034702),
                    new FieldElement(-22729289, 7496160, -5742199, 11329249, 19991973, -3347502, -31718148, 9936966,
                        -30097688, -10618797)
                ),
                new GroupElementPreComp(
                    new FieldElement(21878590, -5001297, 4338336, 13643897, -3036865, 13160960, 19708896, 5415497,
                        -7360503, -4109293),
                    new FieldElement(27736861, 10103576, 12500508, 8502413, -3413016, -9633558, 10436918, -1550276,
                        -23659143, -8132100),
                    new FieldElement(19492550, -12104365, -29681976, -852630, -3208171, 12403437, 30066266, 8367329,
                        13243957, 8709688)
                )
            },
            new[]
            {
                new GroupElementPreComp(
                    new FieldElement(12015105, 2801261, 28198131, 10151021, 24818120, -4743133, -11194191, -5645734,
                        5150968, 7274186),
                    new FieldElement(2831366, -12492146, 1478975, 6122054, 23825128, -12733586, 31097299, 6083058,
                        31021603, -9793610),
                    new FieldElement(-2529932, -2229646, 445613, 10720828, -13849527, -11505937, -23507731, 16354465,
                        15067285, -14147707)
                ),
                new GroupElementPreComp(
                    new FieldElement(7840942, 14037873, -33364863, 15934016, -728213, -3642706, 21403988, 1057586,
                        -19379462, -12403220),
                    new FieldElement(915865, -16469274, 15608285, -8789130, -24357026, 6060030, -17371319, 8410997,
                        -7220461, 16527025),
                    new FieldElement(32922597, -556987, 20336074, -16184568, 10903705, -5384487, 16957574, 52992,
                        23834301, 6588044)
                ),
                new GroupElementPreComp(
                    new FieldElement(32752030, 11232950, 3381995, -8714866, 22652988, -10744103, 17159699, 16689107,
                        -20314580, -1305992),
                    new FieldElement(-4689649, 9166776, -25710296, -10847306, 11576752, 12733943, 7924251, -2752281,
                        1976123, -7249027),
                    new FieldElement(21251222, 16309901, -2983015, -6783122, 30810597, 12967303, 156041, -3371252,
                        12331345, -8237197)
                ),
                new GroupElementPreComp(
                    new FieldElement(8651614, -4477032, -16085636, -4996994, 13002507, 2950805, 29054427, -5106970,
                        10008136, -4667901),
                    new FieldElement(31486080, 15114593, -14261250, 12951354, 14369431, -7387845, 16347321, -13662089,
                        8684155, -10532952),
                    new FieldElement(19443825, 11385320, 24468943, -9659068, -23919258, 2187569, -26263207, -6086921,
                        31316348, 14219878)
                ),
                new GroupElementPreComp(
                    new FieldElement(-28594490, 1193785, 32245219, 11392485, 31092169, 15722801, 27146014, 6992409,
                        29126555, 9207390),
                    new FieldElement(32382935, 1110093, 18477781, 11028262, -27411763, -7548111, -4980517, 10843782,
                        -7957600, -14435730),
                    new FieldElement(2814918, 7836403, 27519878, -7868156, -20894015, -11553689, -21494559, 8550130,
                        28346258, 1994730)
                ),
                new GroupElementPreComp(
                    new FieldElement(-19578299, 8085545, -14000519, -3948622, 2785838, -16231307, -19516951, 7174894,
                        22628102, 8115180),
                    new FieldElement(-30405132, 955511, -11133838, -15078069, -32447087, -13278079, -25651578, 3317160,
                        -9943017, 930272),
                    new FieldElement(-15303681, -6833769, 28856490, 1357446, 23421993, 1057177, 24091212, -1388970,
                        -22765376, -10650715)
                ),
                new GroupElementPreComp(
                    new FieldElement(-22751231, -5303997, -12907607, -12768866, -15811511, -7797053, -14839018,
                        -16554220, -1867018, 8398970),
                    new FieldElement(-31969310, 2106403, -4736360, 1362501, 12813763, 16200670, 22981545, -6291273,
                        18009408, -15772772),
                    new FieldElement(-17220923, -9545221, -27784654, 14166835, 29815394, 7444469, 29551787, -3727419,
                        19288549, 1325865)
                ),
                new GroupElementPreComp(
                    new FieldElement(15100157, -15835752, -23923978, -1005098, -26450192, 15509408, 12376730, -3479146,
                        33166107, -8042750),
                    new FieldElement(20909231, 13023121, -9209752, 16251778, -5778415, -8094914, 12412151, 10018715,
                        2213263, -13878373),
                    new FieldElement(32529814, -11074689, 30361439, -16689753, -9135940, 1513226, 22922121, 6382134,
                        -5766928, 8371348)
                )
            },
            new[]
            {
                new GroupElementPreComp(
                    new FieldElement(9923462, 11271500, 12616794, 3544722, -29998368, -1721626, 12891687, -8193132,
                        -26442943, 10486144),
                    new FieldElement(-22597207, -7012665, 8587003, -8257861, 4084309, -12970062, 361726, 2610596,
                        -23921530, -11455195),
                    new FieldElement(5408411, -1136691, -4969122, 10561668, 24145918, 14240566, 31319731, -4235541,
                        19985175, -3436086)
                ),
                new GroupElementPreComp(
                    new FieldElement(-13994457, 16616821, 14549246, 3341099, 32155958, 13648976, -17577068, 8849297,
                        65030, 8370684),
                    new FieldElement(-8320926, -12049626, 31204563, 5839400, -20627288, -1057277, -19442942, 6922164,
                        12743482, -9800518),
                    new FieldElement(-2361371, 12678785, 28815050, 4759974, -23893047, 4884717, 23783145, 11038569,
                        18800704, 255233)
                ),
                new GroupElementPreComp(
                    new FieldElement(-5269658, -1773886, 13957886, 7990715, 23132995, 728773, 13393847, 9066957,
                        19258688, -14753793),
                    new FieldElement(-2936654, -10827535, -10432089, 14516793, -3640786, 4372541, -31934921, 2209390,
                        -1524053, 2055794),
                    new FieldElement(580882, 16705327, 5468415, -2683018, -30926419, -14696000, -7203346, -8994389,
                        -30021019, 7394435)
                ),
                new GroupElementPreComp(
                    new FieldElement(23838809, 1822728, -15738443, 15242727, 8318092, -3733104, -21672180, -3492205,
                        -4821741, 14799921),
                    new FieldElement(13345610, 9759151, 3371034, -16137791, 16353039, 8577942, 31129804, 13496856,
                        -9056018, 7402518),
                    new FieldElement(2286874, -4435931, -20042458, -2008336, -13696227, 5038122, 11006906, -15760352,
                        8205061, 1607563)
                ),
                new GroupElementPreComp(
                    new FieldElement(14414086, -8002132, 3331830, -3208217, 22249151, -5594188, 18364661, -2906958,
                        30019587, -9029278),
                    new FieldElement(-27688051, 1585953, -10775053, 931069, -29120221, -11002319, -14410829, 12029093,
                        9944378, 8024),
                    new FieldElement(4368715, -3709630, 29874200, -15022983, -20230386, -11410704, -16114594, -999085,
                        -8142388, 5640030)
                ),
                new GroupElementPreComp(
                    new FieldElement(10299610, 13746483, 11661824, 16234854, 7630238, 5998374, 9809887, -16694564,
                        15219798, -14327783),
                    new FieldElement(27425505, -5719081, 3055006, 10660664, 23458024, 595578, -15398605, -1173195,
                        -18342183, 9742717),
                    new FieldElement(6744077, 2427284, 26042789, 2720740, -847906, 1118974, 32324614, 7406442, 12420155,
                        1994844)
                ),
                new GroupElementPreComp(
                    new FieldElement(14012521, -5024720, -18384453, -9578469, -26485342, -3936439, -13033478, -10909803,
                        24319929, -6446333),
                    new FieldElement(16412690, -4507367, 10772641, 15929391, -17068788, -4658621, 10555945, -10484049,
                        -30102368, -4739048),
                    new FieldElement(22397382, -7767684, -9293161, -12792868, 17166287, -9755136, -27333065, 6199366,
                        21880021, -12250760)
                ),
                new GroupElementPreComp(
                    new FieldElement(-4283307, 5368523, -31117018, 8163389, -30323063, 3209128, 16557151, 8890729,
                        8840445, 4957760),
                    new FieldElement(-15447727, 709327, -6919446, -10870178, -29777922, 6522332, -21720181, 12130072,
                        -14796503, 5005757),
                    new FieldElement(-2114751, -14308128, 23019042, 15765735, -25269683, 6002752, 10183197, -13239326,
                        -16395286, -2176112)
                )
            },
            new[]
            {
                new GroupElementPreComp(
                    new FieldElement(-19025756, 1632005, 13466291, -7995100, -23640451, 16573537, -32013908, -3057104,
                        22208662, 2000468),
                    new FieldElement(3065073, -1412761, -25598674, -361432, -17683065, -5703415, -8164212, 11248527,
                        -3691214, -7414184),
                    new FieldElement(10379208, -6045554, 8877319, 1473647, -29291284, -12507580, 16690915, 2553332,
                        -3132688, 16400289)
                ),
                new GroupElementPreComp(
                    new FieldElement(15716668, 1254266, -18472690, 7446274, -8448918, 6344164, -22097271, -7285580,
                        26894937, 9132066),
                    new FieldElement(24158887, 12938817, 11085297, -8177598, -28063478, -4457083, -30576463, 64452,
                        -6817084, -2692882),
                    new FieldElement(13488534, 7794716, 22236231, 5989356, 25426474, -12578208, 2350710, -3418511,
                        -4688006, 2364226)
                ),
                new GroupElementPreComp(
                    new FieldElement(16335052, 9132434, 25640582, 6678888, 1725628, 8517937, -11807024, -11697457,
                        15445875, -7798101),
                    new FieldElement(29004207, -7867081, 28661402, -640412, -12794003, -7943086, 31863255, -4135540,
                        -278050, -15759279),
                    new FieldElement(-6122061, -14866665, -28614905, 14569919, -10857999, -3591829, 10343412, -6976290,
                        -29828287, -10815811)
                ),
                new GroupElementPreComp(
                    new FieldElement(27081650, 3463984, 14099042, -4517604, 1616303, -6205604, 29542636, 15372179,
                        17293797, 960709),
                    new FieldElement(20263915, 11434237, -5765435, 11236810, 13505955, -10857102, -16111345, 6493122,
                        -19384511, 7639714),
                    new FieldElement(-2830798, -14839232, 25403038, -8215196, -8317012, -16173699, 18006287, -16043750,
                        29994677, -15808121)
                ),
                new GroupElementPreComp(
                    new FieldElement(9769828, 5202651, -24157398, -13631392, -28051003, -11561624, -24613141, -13860782,
                        -31184575, 709464),
                    new FieldElement(12286395, 13076066, -21775189, -1176622, -25003198, 4057652, -32018128, -8890874,
                        16102007, 13205847),
                    new FieldElement(13733362, 5599946, 10557076, 3195751, -5557991, 8536970, -25540170, 8525972,
                        10151379, 10394400)
                ),
                new GroupElementPreComp(
                    new FieldElement(4024660, -16137551, 22436262, 12276534, -9099015, -2686099, 19698229, 11743039,
                        -33302334, 8934414),
                    new FieldElement(-15879800, -4525240, -8580747, -2934061, 14634845, -698278, -9449077, 3137094,
                        -11536886, 11721158),
                    new FieldElement(17555939, -5013938, 8268606, 2331751, -22738815, 9761013, 9319229, 8835153,
                        -9205489, -1280045)
                ),
                new GroupElementPreComp(
                    new FieldElement(-461409, -7830014, 20614118, 16688288, -7514766, -4807119, 22300304, 505429,
                        6108462, -6183415),
                    new FieldElement(-5070281, 12367917, -30663534, 3234473, 32617080, -8422642, 29880583, -13483331,
                        -26898490, -7867459),
                    new FieldElement(-31975283, 5726539, 26934134, 10237677, -3173717, -605053, 24199304, 3795095,
                        7592688, -14992079)
                ),
                new GroupElementPreComp(
                    new FieldElement(21594432, -14964228, 17466408, -4077222, 32537084, 2739898, 6407723, 12018833,
                        -28256052, 4298412),
                    new FieldElement(-20650503, -11961496, -27236275, 570498, 3767144, -1717540, 13891942, -1569194,
                        13717174, 10805743),
                    new FieldElement(-14676630, -15644296, 15287174, 11927123, 24177847, -8175568, -796431, 14860609,
                        -26938930, -5863836)
                )
            },
            new[]
            {
                new GroupElementPreComp(
                    new FieldElement(12962541, 5311799, -10060768, 11658280, 18855286, -7954201, 13286263, -12808704,
                        -4381056, 9882022),
                    new FieldElement(18512079, 11319350, -20123124, 15090309, 18818594, 5271736, -22727904, 3666879,
                        -23967430, -3299429),
                    new FieldElement(-6789020, -3146043, 16192429, 13241070, 15898607, -14206114, -10084880, -6661110,
                        -2403099, 5276065)
                ),
                new GroupElementPreComp(
                    new FieldElement(30169808, -5317648, 26306206, -11750859, 27814964, 7069267, 7152851, 3684982,
                        1449224, 13082861),
                    new FieldElement(10342826, 3098505, 2119311, 193222, 25702612, 12233820, 23697382, 15056736,
                        -21016438, -8202000),
                    new FieldElement(-33150110, 3261608, 22745853, 7948688, 19370557, -15177665, -26171976, 6482814,
                        -10300080, -11060101)
                ),
                new GroupElementPreComp(
                    new FieldElement(32869458, -5408545, 25609743, 15678670, -10687769, -15471071, 26112421, 2521008,
                        -22664288, 6904815),
                    new FieldElement(29506923, 4457497, 3377935, -9796444, -30510046, 12935080, 1561737, 3841096,
                        -29003639, -6657642),
                    new FieldElement(10340844, -6630377, -18656632, -2278430, 12621151, -13339055, 30878497, -11824370,
                        -25584551, 5181966)
                ),
                new GroupElementPreComp(
                    new FieldElement(25940115, -12658025, 17324188, -10307374, -8671468, 15029094, 24396252, -16450922,
                        -2322852, -12388574),
                    new FieldElement(-21765684, 9916823, -1300409, 4079498, -1028346, 11909559, 1782390, 12641087,
                        20603771, -6561742),
                    new FieldElement(-18882287, -11673380, 24849422, 11501709, 13161720, -4768874, 1925523, 11914390,
                        4662781, 7820689)
                ),
                new GroupElementPreComp(
                    new FieldElement(12241050, -425982, 8132691, 9393934, 32846760, -1599620, 29749456, 12172924,
                        16136752, 15264020),
                    new FieldElement(-10349955, -14680563, -8211979, 2330220, -17662549, -14545780, 10658213, 6671822,
                        19012087, 3772772),
                    new FieldElement(3753511, -3421066, 10617074, 2028709, 14841030, -6721664, 28718732, -15762884,
                        20527771, 12988982)
                ),
                new GroupElementPreComp(
                    new FieldElement(-14822485, -5797269, -3707987, 12689773, -898983, -10914866, -24183046, -10564943,
                        3299665, -12424953),
                    new FieldElement(-16777703, -15253301, -9642417, 4978983, 3308785, 8755439, 6943197, 6461331,
                        -25583147, 8991218),
                    new FieldElement(-17226263, 1816362, -1673288, -6086439, 31783888, -8175991, -32948145, 7417950,
                        -30242287, 1507265)
                ),
                new GroupElementPreComp(
                    new FieldElement(29692663, 6829891, -10498800, 4334896, 20945975, -11906496, -28887608, 8209391,
                        14606362, -10647073),
                    new FieldElement(-3481570, 8707081, 32188102, 5672294, 22096700, 1711240, -33020695, 9761487,
                        4170404, -2085325),
                    new FieldElement(-11587470, 14855945, -4127778, -1531857, -26649089, 15084046, 22186522, 16002000,
                        -14276837, -8400798)
                ),
                new GroupElementPreComp(
                    new FieldElement(-4811456, 13761029, -31703877, -2483919, -3312471, 7869047, -7113572, -9620092,
                        13240845, 10965870),
                    new FieldElement(-7742563, -8256762, -14768334, -13656260, -23232383, 12387166, 4498947, 14147411,
                        29514390, 4302863),
                    new FieldElement(-13413405, -12407859, 20757302, -13801832, 14785143, 8976368, -5061276, -2144373,
                        17846988, -13971927)
                )
            },
            new[]
            {
                new GroupElementPreComp(
                    new FieldElement(-2244452, -754728, -4597030, -1066309, -6247172, 1455299, -21647728, -9214789,
                        -5222701, 12650267),
                    new FieldElement(-9906797, -16070310, 21134160, 12198166, -27064575, 708126, 387813, 13770293,
                        -19134326, 10958663),
                    new FieldElement(22470984, 12369526, 23446014, -5441109, -21520802, -9698723, -11772496, -11574455,
                        -25083830, 4271862)
                ),
                new GroupElementPreComp(
                    new FieldElement(-25169565, -10053642, -19909332, 15361595, -5984358, 2159192, 75375, -4278529,
                        -32526221, 8469673),
                    new FieldElement(15854970, 4148314, -8893890, 7259002, 11666551, 13824734, -30531198, 2697372,
                        24154791, -9460943),
                    new FieldElement(15446137, -15806644, 29759747, 14019369, 30811221, -9610191, -31582008, 12840104,
                        24913809, 9815020)
                ),
                new GroupElementPreComp(
                    new FieldElement(-4709286, -5614269, -31841498, -12288893, -14443537, 10799414, -9103676, 13438769,
                        18735128, 9466238),
                    new FieldElement(11933045, 9281483, 5081055, -5183824, -2628162, -4905629, -7727821, -10896103,
                        -22728655, 16199064),
                    new FieldElement(14576810, 379472, -26786533, -8317236, -29426508, -10812974, -102766, 1876699,
                        30801119, 2164795)
                ),
                new GroupElementPreComp(
                    new FieldElement(15995086, 3199873, 13672555, 13712240, -19378835, -4647646, -13081610, -15496269,
                        -13492807, 1268052),
                    new FieldElement(-10290614, -3659039, -3286592, 10948818, 23037027, 3794475, -3470338, -12600221,
                        -17055369, 3565904),
                    new FieldElement(29210088, -9419337, -5919792, -4952785, 10834811, -13327726, -16512102, -10820713,
                        -27162222, -14030531)
                ),
                new GroupElementPreComp(
                    new FieldElement(-13161890, 15508588, 16663704, -8156150, -28349942, 9019123, -29183421, -3769423,
                        2244111, -14001979),
                    new FieldElement(-5152875, -3800936, -9306475, -6071583, 16243069, 14684434, -25673088, -16180800,
                        13491506, 4641841),
                    new FieldElement(10813417, 643330, -19188515, -728916, 30292062, -16600078, 27548447, -7721242,
                        14476989, -12767431)
                ),
                new GroupElementPreComp(
                    new FieldElement(10292079, 9984945, 6481436, 8279905, -7251514, 7032743, 27282937, -1644259,
                        -27912810, 12651324),
                    new FieldElement(-31185513, -813383, 22271204, 11835308, 10201545, 15351028, 17099662, 3988035,
                        21721536, -3148940),
                    new FieldElement(10202177, -6545839, -31373232, -9574638, -32150642, -8119683, -12906320, 3852694,
                        13216206, 14842320)
                ),
                new GroupElementPreComp(
                    new FieldElement(-15815640, -10601066, -6538952, -7258995, -6984659, -6581778, -31500847, 13765824,
                        -27434397, 9900184),
                    new FieldElement(14465505, -13833331, -32133984, -14738873, -27443187, 12990492, 33046193, 15796406,
                        -7051866, -8040114),
                    new FieldElement(30924417, -8279620, 6359016, -12816335, 16508377, 9071735, -25488601, 15413635,
                        9524356, -7018878)
                ),
                new GroupElementPreComp(
                    new FieldElement(12274201, -13175547, 32627641, -1785326, 6736625, 13267305, 5237659, -5109483,
                        15663516, 4035784),
                    new FieldElement(-2951309, 8903985, 17349946, 601635, -16432815, -4612556, -13732739, -15889334,
                        -22258478, 4659091),
                    new FieldElement(-16916263, -4952973, -30393711, -15158821, 20774812, 15897498, 5736189, 15026997,
                        -2178256, -13455585)
                )
            },
            new[]
            {
                new GroupElementPreComp(
                    new FieldElement(-8858980, -2219056, 28571666, -10155518, -474467, -10105698, -3801496, 278095,
                        23440562, -290208),
                    new FieldElement(10226241, -5928702, 15139956, 120818, -14867693, 5218603, 32937275, 11551483,
                        -16571960, -7442864),
                    new FieldElement(17932739, -12437276, -24039557, 10749060, 11316803, 7535897, 22503767, 5561594,
                        -3646624, 3898661)
                ),
                new GroupElementPreComp(
                    new FieldElement(7749907, -969567, -16339731, -16464, -25018111, 15122143, -1573531, 7152530,
                        21831162, 1245233),
                    new FieldElement(26958459, -14658026, 4314586, 8346991, -5677764, 11960072, -32589295, -620035,
                        -30402091, -16716212),
                    new FieldElement(-12165896, 9166947, 33491384, 13673479, 29787085, 13096535, 6280834, 14587357,
                        -22338025, 13987525)
                ),
                new GroupElementPreComp(
                    new FieldElement(-24349909, 7778775, 21116000, 15572597, -4833266, -5357778, -4300898, -5124639,
                        -7469781, -2858068),
                    new FieldElement(9681908, -6737123, -31951644, 13591838, -6883821, 386950, 31622781, 6439245,
                        -14581012, 4091397),
                    new FieldElement(-8426427, 1470727, -28109679, -1596990, 3978627, -5123623, -19622683, 12092163,
                        29077877, -14741988)
                ),
                new GroupElementPreComp(
                    new FieldElement(5269168, -6859726, -13230211, -8020715, 25932563, 1763552, -5606110, -5505881,
                        -20017847, 2357889),
                    new FieldElement(32264008, -15407652, -5387735, -1160093, -2091322, -3946900, 23104804, -12869908,
                        5727338, 189038),
                    new FieldElement(14609123, -8954470, -6000566, -16622781, -14577387, -7743898, -26745169, 10942115,
                        -25888931, -14884697)
                ),
                new GroupElementPreComp(
                    new FieldElement(20513500, 5557931, -15604613, 7829531, 26413943, -2019404, -21378968, 7471781,
                        13913677, -5137875),
                    new FieldElement(-25574376, 11967826, 29233242, 12948236, -6754465, 4713227, -8940970, 14059180,
                        12878652, 8511905),
                    new FieldElement(-25656801, 3393631, -2955415, -7075526, -2250709, 9366908, -30223418, 6812974,
                        5568676, -3127656)
                ),
                new GroupElementPreComp(
                    new FieldElement(11630004, 12144454, 2116339, 13606037, 27378885, 15676917, -17408753, -13504373,
                        -14395196, 8070818),
                    new FieldElement(27117696, -10007378, -31282771, -5570088, 1127282, 12772488, -29845906, 10483306,
                        -11552749, -1028714),
                    new FieldElement(10637467, -5688064, 5674781, 1072708, -26343588, -6982302, -1683975, 9177853,
                        -27493162, 15431203)
                ),
                new GroupElementPreComp(
                    new FieldElement(20525145, 10892566, -12742472, 12779443, -29493034, 16150075, -28240519, 14943142,
                        -15056790, -7935931),
                    new FieldElement(-30024462, 5626926, -551567, -9981087, 753598, 11981191, 25244767, -3239766,
                        -3356550, 9594024),
                    new FieldElement(-23752644, 2636870, -5163910, -10103818, 585134, 7877383, 11345683, -6492290,
                        13352335, -10977084)
                ),
                new GroupElementPreComp(
                    new FieldElement(-1931799, -5407458, 3304649, -12884869, 17015806, -4877091, -29783850, -7752482,
                        -13215537, -319204),
                    new FieldElement(20239939, 6607058, 6203985, 3483793, -18386976, -779229, -20723742, 15077870,
                        -22750759, 14523817),
                    new FieldElement(27406042, -6041657, 27423596, -4497394, 4996214, 10002360, -28842031, -4545494,
                        -30172742, -4805667)
                )
            },
            new[]
            {
                new GroupElementPreComp(
                    new FieldElement(11374242, 12660715, 17861383, -12540833, 10935568, 1099227, -13886076, -9091740,
                        -27727044, 11358504),
                    new FieldElement(-12730809, 10311867, 1510375, 10778093, -2119455, -9145702, 32676003, 11149336,
                        -26123651, 4985768),
                    new FieldElement(-19096303, 341147, -6197485, -239033, 15756973, -8796662, -983043, 13794114,
                        -19414307, -15621255)
                ),
                new GroupElementPreComp(
                    new FieldElement(6490081, 11940286, 25495923, -7726360, 8668373, -8751316, 3367603, 6970005,
                        -1691065, -9004790),
                    new FieldElement(1656497, 13457317, 15370807, 6364910, 13605745, 8362338, -19174622, -5475723,
                        -16796596, -5031438),
                    new FieldElement(-22273315, -13524424, -64685, -4334223, -18605636, -10921968, -20571065, -7007978,
                        -99853, -10237333)
                ),
                new GroupElementPreComp(
                    new FieldElement(17747465, 10039260, 19368299, -4050591, -20630635, -16041286, 31992683, -15857976,
                        -29260363, -5511971),
                    new FieldElement(31932027, -4986141, -19612382, 16366580, 22023614, 88450, 11371999, -3744247,
                        4882242, -10626905),
                    new FieldElement(29796507, 37186, 19818052, 10115756, -11829032, 3352736, 18551198, 3272828,
                        -5190932, -4162409)
                ),
                new GroupElementPreComp(
                    new FieldElement(12501286, 4044383, -8612957, -13392385, -32430052, 5136599, -19230378, -3529697,
                        330070, -3659409),
                    new FieldElement(6384877, 2899513, 17807477, 7663917, -2358888, 12363165, 25366522, -8573892,
                        -271295, 12071499),
                    new FieldElement(-8365515, -4042521, 25133448, -4517355, -6211027, 2265927, -32769618, 1936675,
                        -5159697, 3829363)
                ),
                new GroupElementPreComp(
                    new FieldElement(28425966, -5835433, -577090, -4697198, -14217555, 6870930, 7921550, -6567787,
                        26333140, 14267664),
                    new FieldElement(-11067219, 11871231, 27385719, -10559544, -4585914, -11189312, 10004786, -8709488,
                        -21761224, 8930324),
                    new FieldElement(-21197785, -16396035, 25654216, -1725397, 12282012, 11008919, 1541940, 4757911,
                        -26491501, -16408940)
                ),
                new GroupElementPreComp(
                    new FieldElement(13537262, -7759490, -20604840, 10961927, -5922820, -13218065, -13156584, 6217254,
                        -15943699, 13814990),
                    new FieldElement(-17422573, 15157790, 18705543, 29619, 24409717, -260476, 27361681, 9257833,
                        -1956526, -1776914),
                    new FieldElement(-25045300, -10191966, 15366585, 15166509, -13105086, 8423556, -29171540, 12361135,
                        -18685978, 4578290)
                ),
                new GroupElementPreComp(
                    new FieldElement(24579768, 3711570, 1342322, -11180126, -27005135, 14124956, -22544529, 14074919,
                        21964432, 8235257),
                    new FieldElement(-6528613, -2411497, 9442966, -5925588, 12025640, -1487420, -2981514, -1669206,
                        13006806, 2355433),
                    new FieldElement(-16304899, -13605259, -6632427, -5142349, 16974359, -10911083, 27202044, 1719366,
                        1141648, -12796236)
                ),
                new GroupElementPreComp(
                    new FieldElement(-12863944, -13219986, -8318266, -11018091, -6810145, -4843894, 13475066, -3133972,
                        32674895, 13715045),
                    new FieldElement(11423335, -5468059, 32344216, 8962751, 24989809, 9241752, -13265253, 16086212,
                        -28740881, -15642093),
                    new FieldElement(-1409668, 12530728, -6368726, 10847387, 19531186, -14132160, -11709148, 7791794,
                        -27245943, 4383347)
                )
            },
            new[]
            {
                new GroupElementPreComp(
                    new FieldElement(-28970898, 5271447, -1266009, -9736989, -12455236, 16732599, -4862407, -4906449,
                        27193557, 6245191),
                    new FieldElement(-15193956, 5362278, -1783893, 2695834, 4960227, 12840725, 23061898, 3260492,
                        22510453, 8577507),
                    new FieldElement(-12632451, 11257346, -32692994, 13548177, -721004, 10879011, 31168030, 13952092,
                        -29571492, -3635906)
                ),
                new GroupElementPreComp(
                    new FieldElement(3877321, -9572739, 32416692, 5405324, -11004407, -13656635, 3759769, 11935320,
                        5611860, 8164018),
                    new FieldElement(-16275802, 14667797, 15906460, 12155291, -22111149, -9039718, 32003002, -8832289,
                        5773085, -8422109),
                    new FieldElement(-23788118, -8254300, 1950875, 8937633, 18686727, 16459170, -905725, 12376320,
                        31632953, 190926)
                ),
                new GroupElementPreComp(
                    new FieldElement(-24593607, -16138885, -8423991, 13378746, 14162407, 6901328, -8288749, 4508564,
                        -25341555, -3627528),
                    new FieldElement(8884438, -5884009, 6023974, 10104341, -6881569, -4941533, 18722941, -14786005,
                        -1672488, 827625),
                    new FieldElement(-32720583, -16289296, -32503547, 7101210, 13354605, 2659080, -1800575, -14108036,
                        -24878478, 1541286)
                ),
                new GroupElementPreComp(
                    new FieldElement(2901347, -1117687, 3880376, -10059388, -17620940, -3612781, -21802117, -3567481,
                        20456845, -1885033),
                    new FieldElement(27019610, 12299467, -13658288, -1603234, -12861660, -4861471, -19540150, -5016058,
                        29439641, 15138866),
                    new FieldElement(21536104, -6626420, -32447818, -10690208, -22408077, 5175814, -5420040, -16361163,
                        7779328, 109896)
                ),
                new GroupElementPreComp(
                    new FieldElement(30279744, 14648750, -8044871, 6425558, 13639621, -743509, 28698390, 12180118,
                        23177719, -554075),
                    new FieldElement(26572847, 3405927, -31701700, 12890905, -19265668, 5335866, -6493768, 2378492,
                        4439158, -13279347),
                    new FieldElement(-22716706, 3489070, -9225266, -332753, 18875722, -1140095, 14819434, -12731527,
                        -17717757, -5461437)
                ),
                new GroupElementPreComp(
                    new FieldElement(-5056483, 16566551, 15953661, 3767752, -10436499, 15627060, -820954, 2177225,
                        8550082, -15114165),
                    new FieldElement(-18473302, 16596775, -381660, 15663611, 22860960, 15585581, -27844109, -3582739,
                        -23260460, -8428588),
                    new FieldElement(-32480551, 15707275, -8205912, -5652081, 29464558, 2713815, -22725137, 15860482,
                        -21902570, 1494193)
                ),
                new GroupElementPreComp(
                    new FieldElement(-19562091, -14087393, -25583872, -9299552, 13127842, 759709, 21923482, 16529112,
                        8742704, 12967017),
                    new FieldElement(-28464899, 1553205, 32536856, -10473729, -24691605, -406174, -8914625, -2933896,
                        -29903758, 15553883),
                    new FieldElement(21877909, 3230008, 9881174, 10539357, -4797115, 2841332, 11543572, 14513274,
                        19375923, -12647961)
                ),
                new GroupElementPreComp(
                    new FieldElement(8832269, -14495485, 13253511, 5137575, 5037871, 4078777, 24880818, -6222716,
                        2862653, 9455043),
                    new FieldElement(29306751, 5123106, 20245049, -14149889, 9592566, 8447059, -2077124, -2990080,
                        15511449, 4789663),
                    new FieldElement(-20679756, 7004547, 8824831, -9434977, -4045704, -3750736, -5754762, 108893,
                        23513200, 16652362)
                )
            },
            new[]
            {
                new GroupElementPreComp(
                    new FieldElement(-33256173, 4144782, -4476029, -6579123, 10770039, -7155542, -6650416, -12936300,
                        -18319198, 10212860),
                    new FieldElement(2756081, 8598110, 7383731, -6859892, 22312759, -1105012, 21179801, 2600940,
                        -9988298, -12506466),
                    new FieldElement(-24645692, 13317462, -30449259, -15653928, 21365574, -10869657, 11344424, 864440,
                        -2499677, -16710063)
                ),
                new GroupElementPreComp(
                    new FieldElement(-26432803, 6148329, -17184412, -14474154, 18782929, -275997, -22561534, 211300,
                        2719757, 4940997),
                    new FieldElement(-1323882, 3911313, -6948744, 14759765, -30027150, 7851207, 21690126, 8518463,
                        26699843, 5276295),
                    new FieldElement(-13149873, -6429067, 9396249, 365013, 24703301, -10488939, 1321586, 149635,
                        -15452774, 7159369)
                ),
                new GroupElementPreComp(
                    new FieldElement(9987780, -3404759, 17507962, 9505530, 9731535, -2165514, 22356009, 8312176,
                        22477218, -8403385),
                    new FieldElement(18155857, -16504990, 19744716, 9006923, 15154154, -10538976, 24256460, -4864995,
                        -22548173, 9334109),
                    new FieldElement(2986088, -4911893, 10776628, -3473844, 10620590, -7083203, -21413845, 14253545,
                        -22587149, 536906)
                ),
                new GroupElementPreComp(
                    new FieldElement(4377756, 8115836, 24567078, 15495314, 11625074, 13064599, 7390551, 10589625,
                        10838060, -15420424),
                    new FieldElement(-19342404, 867880, 9277171, -3218459, -14431572, -1986443, 19295826, -15796950,
                        6378260, 699185),
                    new FieldElement(7895026, 4057113, -7081772, -13077756, -17886831, -323126, -716039, 15693155,
                        -5045064, -13373962)
                ),
                new GroupElementPreComp(
                    new FieldElement(-7737563, -5869402, -14566319, -7406919, 11385654, 13201616, 31730678, -10962840,
                        -3918636, -9669325),
                    new FieldElement(10188286, -15770834, -7336361, 13427543, 22223443, 14896287, 30743455, 7116568,
                        -21786507, 5427593),
                    new FieldElement(696102, 13206899, 27047647, -10632082, 15285305, -9853179, 10798490, -4578720,
                        19236243, 12477404)
                ),
                new GroupElementPreComp(
                    new FieldElement(-11229439, 11243796, -17054270, -8040865, -788228, -8167967, -3897669, 11180504,
                        -23169516, 7733644),
                    new FieldElement(17800790, -14036179, -27000429, -11766671, 23887827, 3149671, 23466177, -10538171,
                        10322027, 15313801),
                    new FieldElement(26246234, 11968874, 32263343, -5468728, 6830755, -13323031, -15794704, -101982,
                        -24449242, 10890804)
                ),
                new GroupElementPreComp(
                    new FieldElement(-31365647, 10271363, -12660625, -6267268, 16690207, -13062544, -14982212, 16484931,
                        25180797, -5334884),
                    new FieldElement(-586574, 10376444, -32586414, -11286356, 19801893, 10997610, 2276632, 9482883,
                        316878, 13820577),
                    new FieldElement(-9882808, -4510367, -2115506, 16457136, -11100081, 11674996, 30756178, -7515054,
                        30696930, -3712849)
                ),
                new GroupElementPreComp(
                    new FieldElement(32988917, -9603412, 12499366, 7910787, -10617257, -11931514, -7342816, -9985397,
                        -32349517, 7392473),
                    new FieldElement(-8855661, 15927861, 9866406, -3649411, -2396914, -16655781, -30409476, -9134995,
                        25112947, -2926644),
                    new FieldElement(-2504044, -436966, 25621774, -5678772, 15085042, -5479877, -24884878, -13526194,
                        5537438, -13914319)
                )
            },
            new[]
            {
                new GroupElementPreComp(
                    new FieldElement(-11225584, 2320285, -9584280, 10149187, -33444663, 5808648, -14876251, -1729667,
                        31234590, 6090599),
                    new FieldElement(-9633316, 116426, 26083934, 2897444, -6364437, -2688086, 609721, 15878753,
                        -6970405, -9034768),
                    new FieldElement(-27757857, 247744, -15194774, -9002551, 23288161, -10011936, -23869595, 6503646,
                        20650474, 1804084)
                ),
                new GroupElementPreComp(
                    new FieldElement(-27589786, 15456424, 8972517, 8469608, 15640622, 4439847, 3121995, -10329713,
                        27842616, -202328),
                    new FieldElement(-15306973, 2839644, 22530074, 10026331, 4602058, 5048462, 28248656, 5031932,
                        -11375082, 12714369),
                    new FieldElement(20807691, -7270825, 29286141, 11421711, -27876523, -13868230, -21227475, 1035546,
                        -19733229, 12796920)
                ),
                new GroupElementPreComp(
                    new FieldElement(12076899, -14301286, -8785001, -11848922, -25012791, 16400684, -17591495,
                        -12899438, 3480665, -15182815),
                    new FieldElement(-32361549, 5457597, 28548107, 7833186, 7303070, -11953545, -24363064, -15921875,
                        -33374054, 2771025),
                    new FieldElement(-21389266, 421932, 26597266, 6860826, 22486084, -6737172, -17137485, -4210226,
                        -24552282, 15673397)
                ),
                new GroupElementPreComp(
                    new FieldElement(-20184622, 2338216, 19788685, -9620956, -4001265, -8740893, -20271184, 4733254,
                        3727144, -12934448),
                    new FieldElement(6120119, 814863, -11794402, -622716, 6812205, -15747771, 2019594, 7975683,
                        31123697, -10958981),
                    new FieldElement(30069250, -11435332, 30434654, 2958439, 18399564, -976289, 12296869, 9204260,
                        -16432438, 9648165)
                ),
                new GroupElementPreComp(
                    new FieldElement(32705432, -1550977, 30705658, 7451065, -11805606, 9631813, 3305266, 5248604,
                        -26008332, -11377501),
                    new FieldElement(17219865, 2375039, -31570947, -5575615, -19459679, 9219903, 294711, 15298639,
                        2662509, -16297073),
                    new FieldElement(-1172927, -7558695, -4366770, -4287744, -21346413, -8434326, 32087529, -1222777,
                        32247248, -14389861)
                ),
                new GroupElementPreComp(
                    new FieldElement(14312628, 1221556, 17395390, -8700143, -4945741, -8684635, -28197744, -9637817,
                        -16027623, -13378845),
                    new FieldElement(-1428825, -9678990, -9235681, 6549687, -7383069, -468664, 23046502, 9803137,
                        17597934, 2346211),
                    new FieldElement(18510800, 15337574, 26171504, 981392, -22241552, 7827556, -23491134, -11323352,
                        3059833, -11782870)
                ),
                new GroupElementPreComp(
                    new FieldElement(10141598, 6082907, 17829293, -1947643, 9830092, 13613136, -25556636, -5544586,
                        -33502212, 3592096),
                    new FieldElement(33114168, -15889352, -26525686, -13343397, 33076705, 8716171, 1151462, 1521897,
                        -982665, -6837803),
                    new FieldElement(-32939165, -4255815, 23947181, -324178, -33072974, -12305637, -16637686, 3891704,
                        26353178, 693168)
                ),
                new GroupElementPreComp(
                    new FieldElement(30374239, 1595580, -16884039, 13186931, 4600344, 406904, 9585294, -400668,
                        31375464, 14369965),
                    new FieldElement(-14370654, -7772529, 1510301, 6434173, -18784789, -6262728, 32732230, -13108839,
                        17901441, 16011505),
                    new FieldElement(18171223, -11934626, -12500402, 15197122, -11038147, -15230035, -19172240,
                        -16046376, 8764035, 12309598)
                )
            },
            new[]
            {
                new GroupElementPreComp(
                    new FieldElement(5975908, -5243188, -19459362, -9681747, -11541277, 14015782, -23665757, 1228319,
                        17544096, -10593782),
                    new FieldElement(5811932, -1715293, 3442887, -2269310, -18367348, -8359541, -18044043, -15410127,
                        -5565381, 12348900),
                    new FieldElement(-31399660, 11407555, 25755363, 6891399, -3256938, 14872274, -24849353, 8141295,
                        -10632534, -585479)
                ),
                new GroupElementPreComp(
                    new FieldElement(-12675304, 694026, -5076145, 13300344, 14015258, -14451394, -9698672, -11329050,
                        30944593, 1130208),
                    new FieldElement(8247766, -6710942, -26562381, -7709309, -14401939, -14648910, 4652152, 2488540,
                        23550156, -271232),
                    new FieldElement(17294316, -3788438, 7026748, 15626851, 22990044, 113481, 2267737, -5908146,
                        -408818, -137719)
                ),
                new GroupElementPreComp(
                    new FieldElement(16091085, -16253926, 18599252, 7340678, 2137637, -1221657, -3364161, 14550936,
                        3260525, -7166271),
                    new FieldElement(-4910104, -13332887, 18550887, 10864893, -16459325, -7291596, -23028869, -13204905,
                        -12748722, 2701326),
                    new FieldElement(-8574695, 16099415, 4629974, -16340524, -20786213, -6005432, -10018363, 9276971,
                        11329923, 1862132)
                ),
                new GroupElementPreComp(
                    new FieldElement(14763076, -15903608, -30918270, 3689867, 3511892, 10313526, -21951088, 12219231,
                        -9037963, -940300),
                    new FieldElement(8894987, -3446094, 6150753, 3013931, 301220, 15693451, -31981216, -2909717,
                        -15438168, 11595570),
                    new FieldElement(15214962, 3537601, -26238722, -14058872, 4418657, -15230761, 13947276, 10730794,
                        -13489462, -4363670)
                ),
                new GroupElementPreComp(
                    new FieldElement(-2538306, 7682793, 32759013, 263109, -29984731, -7955452, -22332124, -10188635,
                        977108, 699994),
                    new FieldElement(-12466472, 4195084, -9211532, 550904, -15565337, 12917920, 19118110, -439841,
                        -30534533, -14337913),
                    new FieldElement(31788461, -14507657, 4799989, 7372237, 8808585, -14747943, 9408237, -10051775,
                        12493932, -5409317)
                ),
                new GroupElementPreComp(
                    new FieldElement(-25680606, 5260744, -19235809, -6284470, -3695942, 16566087, 27218280, 2607121,
                        29375955, 6024730),
                    new FieldElement(842132, -2794693, -4763381, -8722815, 26332018, -12405641, 11831880, 6985184,
                        -9940361, 2854096),
                    new FieldElement(-4847262, -7969331, 2516242, -5847713, 9695691, -7221186, 16512645, 960770,
                        12121869, 16648078)
                ),
                new GroupElementPreComp(
                    new FieldElement(-15218652, 14667096, -13336229, 2013717, 30598287, -464137, -31504922, -7882064,
                        20237806, 2838411),
                    new FieldElement(-19288047, 4453152, 15298546, -16178388, 22115043, -15972604, 12544294, -13470457,
                        1068881, -12499905),
                    new FieldElement(-9558883, -16518835, 33238498, 13506958, 30505848, -1114596, -8486907, -2630053,
                        12521378, 4845654)
                ),
                new GroupElementPreComp(
                    new FieldElement(-28198521, 10744108, -2958380, 10199664, 7759311, -13088600, 3409348, -873400,
                        -6482306, -12885870),
                    new FieldElement(-23561822, 6230156, -20382013, 10655314, -24040585, -11621172, 10477734, -1240216,
                        -3113227, 13974498),
                    new FieldElement(12966261, 15550616, -32038948, -1615346, 21025980, -629444, 5642325, 7188737,
                        18895762, 12629579)
                )
            },
            new[]
            {
                new GroupElementPreComp(
                    new FieldElement(14741879, -14946887, 22177208, -11721237, 1279741, 8058600, 11758140, 789443,
                        32195181, 3895677),
                    new FieldElement(10758205, 15755439, -4509950, 9243698, -4879422, 6879879, -2204575, -3566119,
                        -8982069, 4429647),
                    new FieldElement(-2453894, 15725973, -20436342, -10410672, -5803908, -11040220, -7135870, -11642895,
                        18047436, -15281743)
                ),
                new GroupElementPreComp(
                    new FieldElement(-25173001, -11307165, 29759956, 11776784, -22262383, -15820455, 10993114,
                        -12850837, -17620701, -9408468),
                    new FieldElement(21987233, 700364, -24505048, 14972008, -7774265, -5718395, 32155026, 2581431,
                        -29958985, 8773375),
                    new FieldElement(-25568350, 454463, -13211935, 16126715, 25240068, 8594567, 20656846, 12017935,
                        -7874389, -13920155)
                ),
                new GroupElementPreComp(
                    new FieldElement(6028182, 6263078, -31011806, -11301710, -818919, 2461772, -31841174, -5468042,
                        -1721788, -2776725),
                    new FieldElement(-12278994, 16624277, 987579, -5922598, 32908203, 1248608, 7719845, -4166698,
                        28408820, 6816612),
                    new FieldElement(-10358094, -8237829, 19549651, -12169222, 22082623, 16147817, 20613181, 13982702,
                        -10339570, 5067943)
                ),
                new GroupElementPreComp(
                    new FieldElement(-30505967, -3821767, 12074681, 13582412, -19877972, 2443951, -19719286, 12746132,
                        5331210, -10105944),
                    new FieldElement(30528811, 3601899, -1957090, 4619785, -27361822, -15436388, 24180793, -12570394,
                        27679908, -1648928),
                    new FieldElement(9402404, -13957065, 32834043, 10838634, -26580150, -13237195, 26653274, -8685565,
                        22611444, -12715406)
                ),
                new GroupElementPreComp(
                    new FieldElement(22190590, 1118029, 22736441, 15130463, -30460692, -5991321, 19189625, -4648942,
                        4854859, 6622139),
                    new FieldElement(-8310738, -2953450, -8262579, -3388049, -10401731, -271929, 13424426, -3567227,
                        26404409, 13001963),
                    new FieldElement(-31241838, -15415700, -2994250, 8939346, 11562230, -12840670, -26064365, -11621720,
                        -15405155, 11020693)
                ),
                new GroupElementPreComp(
                    new FieldElement(1866042, -7949489, -7898649, -10301010, 12483315, 13477547, 3175636, -12424163,
                        28761762, 1406734),
                    new FieldElement(-448555, -1777666, 13018551, 3194501, -9580420, -11161737, 24760585, -4347088,
                        25577411, -13378680),
                    new FieldElement(-24290378, 4759345, -690653, -1852816, 2066747, 10693769, -29595790, 9884936,
                        -9368926, 4745410)
                ),
                new GroupElementPreComp(
                    new FieldElement(-9141284, 6049714, -19531061, -4341411, -31260798, 9944276, -15462008, -11311852,
                        10931924, -11931931),
                    new FieldElement(-16561513, 14112680, -8012645, 4817318, -8040464, -11414606, -22853429, 10856641,
                        -20470770, 13434654),
                    new FieldElement(22759489, -10073434, -16766264, -1871422, 13637442, -10168091, 1765144, -12654326,
                        28445307, -5364710)
                ),
                new GroupElementPreComp(
                    new FieldElement(29875063, 12493613, 2795536, -3786330, 1710620, 15181182, -10195717, -8788675,
                        9074234, 1167180),
                    new FieldElement(-26205683, 11014233, -9842651, -2635485, -26908120, 7532294, -18716888, -9535498,
                        3843903, 9367684),
                    new FieldElement(-10969595, -6403711, 9591134, 9582310, 11349256, 108879, 16235123, 8601684,
                        -139197, 4242895)
                )
            },
            new[]
            {
                new GroupElementPreComp(
                    new FieldElement(22092954, -13191123, -2042793, -11968512, 32186753, -11517388, -6574341, 2470660,
                        -27417366, 16625501),
                    new FieldElement(-11057722, 3042016, 13770083, -9257922, 584236, -544855, -7770857, 2602725,
                        -27351616, 14247413),
                    new FieldElement(6314175, -10264892, -32772502, 15957557, -10157730, 168750, -8618807, 14290061,
                        27108877, -1180880)
                ),
                new GroupElementPreComp(
                    new FieldElement(-8586597, -7170966, 13241782, 10960156, -32991015, -13794596, 33547976, -11058889,
                        -27148451, 981874),
                    new FieldElement(22833440, 9293594, -32649448, -13618667, -9136966, 14756819, -22928859, -13970780,
                        -10479804, -16197962),
                    new FieldElement(-7768587, 3326786, -28111797, 10783824, 19178761, 14905060, 22680049, 13906969,
                        -15933690, 3797899)
                ),
                new GroupElementPreComp(
                    new FieldElement(21721356, -4212746, -12206123, 9310182, -3882239, -13653110, 23740224, -2709232,
                        20491983, -8042152),
                    new FieldElement(9209270, -15135055, -13256557, -6167798, -731016, 15289673, 25947805, 15286587,
                        30997318, -6703063),
                    new FieldElement(7392032, 16618386, 23946583, -8039892, -13265164, -1533858, -14197445, -2321576,
                        17649998, -250080)
                ),
                new GroupElementPreComp(
                    new FieldElement(-9301088, -14193827, 30609526, -3049543, -25175069, -1283752, -15241566, -9525724,
                        -2233253, 7662146),
                    new FieldElement(-17558673, 1763594, -33114336, 15908610, -30040870, -12174295, 7335080, -8472199,
                        -3174674, 3440183),
                    new FieldElement(-19889700, -5977008, -24111293, -9688870, 10799743, -16571957, 40450, -4431835,
                        4862400, 1133)
                ),
                new GroupElementPreComp(
                    new FieldElement(-32856209, -7873957, -5422389, 14860950, -16319031, 7956142, 7258061, 311861,
                        -30594991, -7379421),
                    new FieldElement(-3773428, -1565936, 28985340, 7499440, 24445838, 9325937, 29727763, 16527196,
                        18278453, 15405622),
                    new FieldElement(-4381906, 8508652, -19898366, -3674424, -5984453, 15149970, -13313598, 843523,
                        -21875062, 13626197)
                ),
                new GroupElementPreComp(
                    new FieldElement(2281448, -13487055, -10915418, -2609910, 1879358, 16164207, -10783882, 3953792,
                        13340839, 15928663),
                    new FieldElement(31727126, -7179855, -18437503, -8283652, 2875793, -16390330, -25269894, -7014826,
                        -23452306, 5964753),
                    new FieldElement(4100420, -5959452, -17179337, 6017714, -18705837, 12227141, -26684835, 11344144,
                        2538215, -7570755)
                ),
                new GroupElementPreComp(
                    new FieldElement(-9433605, 6123113, 11159803, -2156608, 30016280, 14966241, -20474983, 1485421,
                        -629256, -15958862),
                    new FieldElement(-26804558, 4260919, 11851389, 9658551, -32017107, 16367492, -20205425, -13191288,
                        11659922, -11115118),
                    new FieldElement(26180396, 10015009, -30844224, -8581293, 5418197, 9480663, 2231568, -10170080,
                        33100372, -1306171)
                ),
                new GroupElementPreComp(
                    new FieldElement(15121113, -5201871, -10389905, 15427821, -27509937, -15992507, 21670947, 4486675,
                        -5931810, -14466380),
                    new FieldElement(16166486, -9483733, -11104130, 6023908, -31926798, -1364923, 2340060, -16254968,
                        -10735770, -10039824),
                    new FieldElement(28042865, -3557089, -12126526, 12259706, -3717498, -6945899, 6766453, -8689599,
                        18036436, 5803270)
                )
            },
            new[]
            {
                new GroupElementPreComp(
                    new FieldElement(-817581, 6763912, 11803561, 1585585, 10958447, -2671165, 23855391, 4598332,
                        -6159431, -14117438),
                    new FieldElement(-31031306, -14256194, 17332029, -2383520, 31312682, -5967183, 696309, 50292,
                        -20095739, 11763584),
                    new FieldElement(-594563, -2514283, -32234153, 12643980, 12650761, 14811489, 665117, -12613632,
                        -19773211, -10713562)
                ),
                new GroupElementPreComp(
                    new FieldElement(30464590, -11262872, -4127476, -12734478, 19835327, -7105613, -24396175, 2075773,
                        -17020157, 992471),
                    new FieldElement(18357185, -6994433, 7766382, 16342475, -29324918, 411174, 14578841, 8080033,
                        -11574335, -10601610),
                    new FieldElement(19598397, 10334610, 12555054, 2555664, 18821899, -10339780, 21873263, 16014234,
                        26224780, 16452269)
                ),
                new GroupElementPreComp(
                    new FieldElement(-30223925, 5145196, 5944548, 16385966, 3976735, 2009897, -11377804, -7618186,
                        -20533829, 3698650),
                    new FieldElement(14187449, 3448569, -10636236, -10810935, -22663880, -3433596, 7268410, -10890444,
                        27394301, 12015369),
                    new FieldElement(19695761, 16087646, 28032085, 12999827, 6817792, 11427614, 20244189, -1312777,
                        -13259127, -3402461)
                ),
                new GroupElementPreComp(
                    new FieldElement(30860103, 12735208, -1888245, -4699734, -16974906, 2256940, -8166013, 12298312,
                        -8550524, -10393462),
                    new FieldElement(-5719826, -11245325, -1910649, 15569035, 26642876, -7587760, -5789354, -15118654,
                        -4976164, 12651793),
                    new FieldElement(-2848395, 9953421, 11531313, -5282879, 26895123, -12697089, -13118820, -16517902,
                        9768698, -2533218)
                ),
                new GroupElementPreComp(
                    new FieldElement(-24719459, 1894651, -287698, -4704085, 15348719, -8156530, 32767513, 12765450,
                        4940095, 10678226),
                    new FieldElement(18860224, 15980149, -18987240, -1562570, -26233012, -11071856, -7843882, 13944024,
                        -24372348, 16582019),
                    new FieldElement(-15504260, 4970268, -29893044, 4175593, -20993212, -2199756, -11704054, 15444560,
                        -11003761, 7989037)
                ),
                new GroupElementPreComp(
                    new FieldElement(31490452, 5568061, -2412803, 2182383, -32336847, 4531686, -32078269, 6200206,
                        -19686113, -14800171),
                    new FieldElement(-17308668, -15879940, -31522777, -2831, -32887382, 16375549, 8680158, -16371713,
                        28550068, -6857132),
                    new FieldElement(-28126887, -5688091, 16837845, -1820458, -6850681, 12700016, -30039981, 4364038,
                        1155602, 5988841)
                ),
                new GroupElementPreComp(
                    new FieldElement(21890435, -13272907, -12624011, 12154349, -7831873, 15300496, 23148983, -4470481,
                        24618407, 8283181),
                    new FieldElement(-33136107, -10512751, 9975416, 6841041, -31559793, 16356536, 3070187, -7025928,
                        1466169, 10740210),
                    new FieldElement(-1509399, -15488185, -13503385, -10655916, 32799044, 909394, -13938903, -5779719,
                        -32164649, -15327040)
                ),
                new GroupElementPreComp(
                    new FieldElement(3960823, -14267803, -28026090, -15918051, -19404858, 13146868, 15567327, 951507,
                        -3260321, -573935),
                    new FieldElement(24740841, 5052253, -30094131, 8961361, 25877428, 6165135, -24368180, 14397372,
                        -7380369, -6144105),
                    new FieldElement(-28888365, 3510803, -28103278, -1158478, -11238128, -10631454, -15441463,
                        -14453128, -1625486, -6494814)
                )
            },
            new[]
            {
                new GroupElementPreComp(
                    new FieldElement(793299, -9230478, 8836302, -6235707, -27360908, -2369593, 33152843, -4885251,
                        -9906200, -621852),
                    new FieldElement(5666233, 525582, 20782575, -8038419, -24538499, 14657740, 16099374, 1468826,
                        -6171428, -15186581),
                    new FieldElement(-4859255, -3779343, -2917758, -6748019, 7778750, 11688288, -30404353, -9871238,
                        -1558923, -9863646)
                ),
                new GroupElementPreComp(
                    new FieldElement(10896332, -7719704, 824275, 472601, -19460308, 3009587, 25248958, 14783338,
                        -30581476, -15757844),
                    new FieldElement(10566929, 12612572, -31944212, 11118703, -12633376, 12362879, 21752402, 8822496,
                        24003793, 14264025),
                    new FieldElement(27713862, -7355973, -11008240, 9227530, 27050101, 2504721, 23886875, -13117525,
                        13958495, -5732453)
                ),
                new GroupElementPreComp(
                    new FieldElement(-23481610, 4867226, -27247128, 3900521, 29838369, -8212291, -31889399, -10041781,
                        7340521, -15410068),
                    new FieldElement(4646514, -8011124, -22766023, -11532654, 23184553, 8566613, 31366726, -1381061,
                        -15066784, -10375192),
                    new FieldElement(-17270517, 12723032, -16993061, 14878794, 21619651, -6197576, 27584817, 3093888,
                        -8843694, 3849921)
                ),
                new GroupElementPreComp(
                    new FieldElement(-9064912, 2103172, 25561640, -15125738, -5239824, 9582958, 32477045, -9017955,
                        5002294, -15550259),
                    new FieldElement(-12057553, -11177906, 21115585, -13365155, 8808712, -12030708, 16489530, 13378448,
                        -25845716, 12741426),
                    new FieldElement(-5946367, 10645103, -30911586, 15390284, -3286982, -7118677, 24306472, 15852464,
                        28834118, -7646072)
                ),
                new GroupElementPreComp(
                    new FieldElement(-17335748, -9107057, -24531279, 9434953, -8472084, -583362, -13090771, 455841,
                        20461858, 5491305),
                    new FieldElement(13669248, -16095482, -12481974, -10203039, -14569770, -11893198, -24995986,
                        11293807, -28588204, -9421832),
                    new FieldElement(28497928, 6272777, -33022994, 14470570, 8906179, -1225630, 18504674, -14165166,
                        29867745, -8795943)
                ),
                new GroupElementPreComp(
                    new FieldElement(-16207023, 13517196, -27799630, -13697798, 24009064, -6373891, -6367600, -13175392,
                        22853429, -4012011),
                    new FieldElement(24191378, 16712145, -13931797, 15217831, 14542237, 1646131, 18603514, -11037887,
                        12876623, -2112447),
                    new FieldElement(17902668, 4518229, -411702, -2829247, 26878217, 5258055, -12860753, 608397,
                        16031844, 3723494)
                ),
                new GroupElementPreComp(
                    new FieldElement(-28632773, 12763728, -20446446, 7577504, 33001348, -13017745, 17558842, -7872890,
                        23896954, -4314245),
                    new FieldElement(-20005381, -12011952, 31520464, 605201, 2543521, 5991821, -2945064, 7229064,
                        -9919646, -8826859),
                    new FieldElement(28816045, 298879, -28165016, -15920938, 19000928, -1665890, -12680833, -2949325,
                        -18051778, -2082915)
                ),
                new GroupElementPreComp(
                    new FieldElement(16000882, -344896, 3493092, -11447198, -29504595, -13159789, 12577740, 16041268,
                        -19715240, 7847707),
                    new FieldElement(10151868, 10572098, 27312476, 7922682, 14825339, 4723128, -32855931, -6519018,
                        -10020567, 3852848),
                    new FieldElement(-11430470, 15697596, -21121557, -4420647, 5386314, 15063598, 16514493, -15932110,
                        29330899, -15076224)
                )
            },
            new[]
            {
                new GroupElementPreComp(
                    new FieldElement(-25499735, -4378794, -15222908, -6901211, 16615731, 2051784, 3303702, 15490,
                        -27548796, 12314391),
                    new FieldElement(15683520, -6003043, 18109120, -9980648, 15337968, -5997823, -16717435, 15921866,
                        16103996, -3731215),
                    new FieldElement(-23169824, -10781249, 13588192, -1628807, -3798557, -1074929, -19273607, 5402699,
                        -29815713, -9841101)
                ),
                new GroupElementPreComp(
                    new FieldElement(23190676, 2384583, -32714340, 3462154, -29903655, -1529132, -11266856, 8911517,
                        -25205859, 2739713),
                    new FieldElement(21374101, -3554250, -33524649, 9874411, 15377179, 11831242, -33529904, 6134907,
                        4931255, 11987849),
                    new FieldElement(-7732, -2978858, -16223486, 7277597, 105524, -322051, -31480539, 13861388,
                        -30076310, 10117930)
                ),
                new GroupElementPreComp(
                    new FieldElement(-29501170, -10744872, -26163768, 13051539, -25625564, 5089643, -6325503, 6704079,
                        12890019, 15728940),
                    new FieldElement(-21972360, -11771379, -951059, -4418840, 14704840, 2695116, 903376, -10428139,
                        12885167, 8311031),
                    new FieldElement(-17516482, 5352194, 10384213, -13811658, 7506451, 13453191, 26423267, 4384730,
                        1888765, -5435404)
                ),
                new GroupElementPreComp(
                    new FieldElement(-25817338, -3107312, -13494599, -3182506, 30896459, -13921729, -32251644,
                        -12707869, -19464434, -3340243),
                    new FieldElement(-23607977, -2665774, -526091, 4651136, 5765089, 4618330, 6092245, 14845197,
                        17151279, -9854116),
                    new FieldElement(-24830458, -12733720, -15165978, 10367250, -29530908, -265356, 22825805, -7087279,
                        -16866484, 16176525)
                ),
                new GroupElementPreComp(
                    new FieldElement(-23583256, 6564961, 20063689, 3798228, -4740178, 7359225, 2006182, -10363426,
                        -28746253, -10197509),
                    new FieldElement(-10626600, -4486402, -13320562, -5125317, 3432136, -6393229, 23632037, -1940610,
                        32808310, 1099883),
                    new FieldElement(15030977, 5768825, -27451236, -2887299, -6427378, -15361371, -15277896, -6809350,
                        2051441, -15225865)
                ),
                new GroupElementPreComp(
                    new FieldElement(-3362323, -7239372, 7517890, 9824992, 23555850, 295369, 5148398, -14154188,
                        -22686354, 16633660),
                    new FieldElement(4577086, -16752288, 13249841, -15304328, 19958763, -14537274, 18559670, -10759549,
                        8402478, -9864273),
                    new FieldElement(-28406330, -1051581, -26790155, -907698, -17212414, -11030789, 9453451, -14980072,
                        17983010, 9967138)
                ),
                new GroupElementPreComp(
                    new FieldElement(-25762494, 6524722, 26585488, 9969270, 24709298, 1220360, -1677990, 7806337,
                        17507396, 3651560),
                    new FieldElement(-10420457, -4118111, 14584639, 15971087, -15768321, 8861010, 26556809, -5574557,
                        -18553322, -11357135),
                    new FieldElement(2839101, 14284142, 4029895, 3472686, 14402957, 12689363, -26642121, 8459447,
                        -5605463, -7621941)
                ),
                new GroupElementPreComp(
                    new FieldElement(-4839289, -3535444, 9744961, 2871048, 25113978, 3187018, -25110813, -849066,
                        17258084, -7977739),
                    new FieldElement(18164541, -10595176, -17154882, -1542417, 19237078, -9745295, 23357533, -15217008,
                        26908270, 12150756),
                    new FieldElement(-30264870, -7647865, 5112249, -7036672, -1499807, -6974257, 43168, -5537701,
                        -32302074, 16215819)
                )
            },
            new[]
            {
                new GroupElementPreComp(
                    new FieldElement(-6898905, 9824394, -12304779, -4401089, -31397141, -6276835, 32574489, 12532905,
                        -7503072, -8675347),
                    new FieldElement(-27343522, -16515468, -27151524, -10722951, 946346, 16291093, 254968, 7168080,
                        21676107, -1943028),
                    new FieldElement(21260961, -8424752, -16831886, -11920822, -23677961, 3968121, -3651949, -6215466,
                        -3556191, -7913075)
                ),
                new GroupElementPreComp(
                    new FieldElement(16544754, 13250366, -16804428, 15546242, -4583003, 12757258, -2462308, -8680336,
                        -18907032, -9662799),
                    new FieldElement(-2415239, -15577728, 18312303, 4964443, -15272530, -12653564, 26820651, 16690659,
                        25459437, -4564609),
                    new FieldElement(-25144690, 11425020, 28423002, -11020557, -6144921, -15826224, 9142795, -2391602,
                        -6432418, -1644817)
                ),
                new GroupElementPreComp(
                    new FieldElement(-23104652, 6253476, 16964147, -3768872, -25113972, -12296437, -27457225, -16344658,
                        6335692, 7249989),
                    new FieldElement(-30333227, 13979675, 7503222, -12368314, -11956721, -4621693, -30272269, 2682242,
                        25993170, -12478523),
                    new FieldElement(4364628, 5930691, 32304656, -10044554, -8054781, 15091131, 22857016, -10598955,
                        31820368, 15075278)
                ),
                new GroupElementPreComp(
                    new FieldElement(31879134, -8918693, 17258761, 90626, -8041836, -4917709, 24162788, -9650886,
                        -17970238, 12833045),
                    new FieldElement(19073683, 14851414, -24403169, -11860168, 7625278, 11091125, -19619190, 2074449,
                        -9413939, 14905377),
                    new FieldElement(24483667, -11935567, -2518866, -11547418, -1553130, 15355506, -25282080, 9253129,
                        27628530, -7555480)
                ),
                new GroupElementPreComp(
                    new FieldElement(17597607, 8340603, 19355617, 552187, 26198470, -3176583, 4593324, -9157582,
                        -14110875, 15297016),
                    new FieldElement(510886, 14337390, -31785257, 16638632, 6328095, 2713355, -20217417, -11864220,
                        8683221, 2921426),
                    new FieldElement(18606791, 11874196, 27155355, -5281482, -24031742, 6265446, -25178240, -1278924,
                        4674690, 13890525)
                ),
                new GroupElementPreComp(
                    new FieldElement(13609624, 13069022, -27372361, -13055908, 24360586, 9592974, 14977157, 9835105,
                        4389687, 288396),
                    new FieldElement(9922506, -519394, 13613107, 5883594, -18758345, -434263, -12304062, 8317628,
                        23388070, 16052080),
                    new FieldElement(12720016, 11937594, -31970060, -5028689, 26900120, 8561328, -20155687, -11632979,
                        -14754271, -10812892)
                ),
                new GroupElementPreComp(
                    new FieldElement(15961858, 14150409, 26716931, -665832, -22794328, 13603569, 11829573, 7467844,
                        -28822128, 929275),
                    new FieldElement(11038231, -11582396, -27310482, -7316562, -10498527, -16307831, -23479533,
                        -9371869, -21393143, 2465074),
                    new FieldElement(20017163, -4323226, 27915242, 1529148, 12396362, 15675764, 13817261, -9658066,
                        2463391, -4622140)
                ),
                new GroupElementPreComp(
                    new FieldElement(-16358878, -12663911, -12065183, 4996454, -1256422, 1073572, 9583558, 12851107,
                        4003896, 12673717),
                    new FieldElement(-1731589, -15155870, -3262930, 16143082, 19294135, 13385325, 14741514, -9103726,
                        7903886, 2348101),
                    new FieldElement(24536016, -16515207, 12715592, -3862155, 1511293, 10047386, -3842346, -7129159,
                        -28377538, 10048127)
                )
            },
            new[]
            {
                new GroupElementPreComp(
                    new FieldElement(-12622226, -6204820, 30718825, 2591312, -10617028, 12192840, 18873298, -7297090,
                        -32297756, 15221632),
                    new FieldElement(-26478122, -11103864, 11546244, -1852483, 9180880, 7656409, -21343950, 2095755,
                        29769758, 6593415),
                    new FieldElement(-31994208, -2907461, 4176912, 3264766, 12538965, -868111, 26312345, -6118678,
                        30958054, 8292160)
                ),
                new GroupElementPreComp(
                    new FieldElement(31429822, -13959116, 29173532, 15632448, 12174511, -2760094, 32808831, 3977186,
                        26143136, -3148876),
                    new FieldElement(22648901, 1402143, -22799984, 13746059, 7936347, 365344, -8668633, -1674433,
                        -3758243, -2304625),
                    new FieldElement(-15491917, 8012313, -2514730, -12702462, -23965846, -10254029, -1612713, -1535569,
                        -16664475, 8194478)
                ),
                new GroupElementPreComp(
                    new FieldElement(27338066, -7507420, -7414224, 10140405, -19026427, -6589889, 27277191, 8855376,
                        28572286, 3005164),
                    new FieldElement(26287124, 4821776, 25476601, -4145903, -3764513, -15788984, -18008582, 1182479,
                        -26094821, -13079595),
                    new FieldElement(-7171154, 3178080, 23970071, 6201893, -17195577, -4489192, -21876275, -13982627,
                        32208683, -1198248)
                ),
                new GroupElementPreComp(
                    new FieldElement(-16657702, 2817643, -10286362, 14811298, 6024667, 13349505, -27315504, -10497842,
                        -27672585, -11539858),
                    new FieldElement(15941029, -9405932, -21367050, 8062055, 31876073, -238629, -15278393, -1444429,
                        15397331, -4130193),
                    new FieldElement(8934485, -13485467, -23286397, -13423241, -32446090, 14047986, 31170398, -1441021,
                        -27505566, 15087184)
                ),
                new GroupElementPreComp(
                    new FieldElement(-18357243, -2156491, 24524913, -16677868, 15520427, -6360776, -15502406, 11461896,
                        16788528, -5868942),
                    new FieldElement(-1947386, 16013773, 21750665, 3714552, -17401782, -16055433, -3770287, -10323320,
                        31322514, -11615635),
                    new FieldElement(21426655, -5650218, -13648287, -5347537, -28812189, -4920970, -18275391, -14621414,
                        13040862, -12112948)
                ),
                new GroupElementPreComp(
                    new FieldElement(11293895, 12478086, -27136401, 15083750, -29307421, 14748872, 14555558, -13417103,
                        1613711, 4896935),
                    new FieldElement(-25894883, 15323294, -8489791, -8057900, 25967126, -13425460, 2825960, -4897045,
                        -23971776, -11267415),
                    new FieldElement(-15924766, -5229880, -17443532, 6410664, 3622847, 10243618, 20615400, 12405433,
                        -23753030, -8436416)
                ),
                new GroupElementPreComp(
                    new FieldElement(-7091295, 12556208, -20191352, 9025187, -17072479, 4333801, 4378436, 2432030,
                        23097949, -566018),
                    new FieldElement(4565804, -16025654, 20084412, -7842817, 1724999, 189254, 24767264, 10103221,
                        -18512313, 2424778),
                    new FieldElement(366633, -11976806, 8173090, -6890119, 30788634, 5745705, -7168678, 1344109,
                        -3642553, 12412659)
                ),
                new GroupElementPreComp(
                    new FieldElement(-24001791, 7690286, 14929416, -168257, -32210835, -13412986, 24162697, -15326504,
                        -3141501, 11179385),
                    new FieldElement(18289522, -14724954, 8056945, 16430056, -21729724, 7842514, -6001441, -1486897,
                        -18684645, -11443503),
                    new FieldElement(476239, 6601091, -6152790, -9723375, 17503545, -4863900, 27672959, 13403813,
                        11052904, 5219329)
                )
            },
            new[]
            {
                new GroupElementPreComp(
                    new FieldElement(20678546, -8375738, -32671898, 8849123, -5009758, 14574752, 31186971, -3973730,
                        9014762, -8579056),
                    new FieldElement(-13644050, -10350239, -15962508, 5075808, -1514661, -11534600, -33102500, 9160280,
                        8473550, -3256838),
                    new FieldElement(24900749, 14435722, 17209120, -15292541, -22592275, 9878983, -7689309, -16335821,
                        -24568481, 11788948)
                ),
                new GroupElementPreComp(
                    new FieldElement(-3118155, -11395194, -13802089, 14797441, 9652448, -6845904, -20037437, 10410733,
                        -24568470, -1458691),
                    new FieldElement(-15659161, 16736706, -22467150, 10215878, -9097177, 7563911, 11871841, -12505194,
                        -18513325, 8464118),
                    new FieldElement(-23400612, 8348507, -14585951, -861714, -3950205, -6373419, 14325289, 8628612,
                        33313881, -8370517)
                ),
                new GroupElementPreComp(
                    new FieldElement(-20186973, -4967935, 22367356, 5271547, -1097117, -4788838, -24805667, -10236854,
                        -8940735, -5818269),
                    new FieldElement(-6948785, -1795212, -32625683, -16021179, 32635414, -7374245, 15989197, -12838188,
                        28358192, -4253904),
                    new FieldElement(-23561781, -2799059, -32351682, -1661963, -9147719, 10429267, -16637684, 4072016,
                        -5351664, 5596589)
                ),
                new GroupElementPreComp(
                    new FieldElement(-28236598, -3390048, 12312896, 6213178, 3117142, 16078565, 29266239, 2557221,
                        1768301, 15373193),
                    new FieldElement(-7243358, -3246960, -4593467, -7553353, -127927, -912245, -1090902, -4504991,
                        -24660491, 3442910),
                    new FieldElement(-30210571, 5124043, 14181784, 8197961, 18964734, -11939093, 22597931, 7176455,
                        -18585478, 13365930)
                ),
                new GroupElementPreComp(
                    new FieldElement(-7877390, -1499958, 8324673, 4690079, 6261860, 890446, 24538107, -8570186,
                        -9689599, -3031667),
                    new FieldElement(25008904, -10771599, -4305031, -9638010, 16265036, 15721635, 683793, -11823784,
                        15723479, -15163481),
                    new FieldElement(-9660625, 12374379, -27006999, -7026148, -7724114, -12314514, 11879682, 5400171,
                        519526, -1235876)
                ),
                new GroupElementPreComp(
                    new FieldElement(22258397, -16332233, -7869817, 14613016, -22520255, -2950923, -20353881, 7315967,
                        16648397, 7605640),
                    new FieldElement(-8081308, -8464597, -8223311, 9719710, 19259459, -15348212, 23994942, -5281555,
                        -9468848, 4763278),
                    new FieldElement(-21699244, 9220969, -15730624, 1084137, -25476107, -2852390, 31088447, -7764523,
                        -11356529, 728112)
                ),
                new GroupElementPreComp(
                    new FieldElement(26047220, -11751471, -6900323, -16521798, 24092068, 9158119, -4273545, -12555558,
                        -29365436, -5498272),
                    new FieldElement(17510331, -322857, 5854289, 8403524, 17133918, -3112612, -28111007, 12327945,
                        10750447, 10014012),
                    new FieldElement(-10312768, 3936952, 9156313, -8897683, 16498692, -994647, -27481051, -666732,
                        3424691, 7540221)
                ),
                new GroupElementPreComp(
                    new FieldElement(30322361, -6964110, 11361005, -4143317, 7433304, 4989748, -7071422, -16317219,
                        -9244265, 15258046),
                    new FieldElement(13054562, -2779497, 19155474, 469045, -12482797, 4566042, 5631406, 2711395,
                        1062915, -5136345),
                    new FieldElement(-19240248, -11254599, -29509029, -7499965, -5835763, 13005411, -6066489, 12194497,
                        32960380, 1459310)
                )
            },
            new[]
            {
                new GroupElementPreComp(
                    new FieldElement(19852034, 7027924, 23669353, 10020366, 8586503, -6657907, 394197, -6101885,
                        18638003, -11174937),
                    new FieldElement(31395534, 15098109, 26581030, 8030562, -16527914, -5007134, 9012486, -7584354,
                        -6643087, -5442636),
                    new FieldElement(-9192165, -2347377, -1997099, 4529534, 25766844, 607986, -13222, 9677543,
                        -32294889, -6456008)
                ),
                new GroupElementPreComp(
                    new FieldElement(-2444496, -149937, 29348902, 8186665, 1873760, 12489863, -30934579, -7839692,
                        -7852844, -8138429),
                    new FieldElement(-15236356, -15433509, 7766470, 746860, 26346930, -10221762, -27333451, 10754588,
                        -9431476, 5203576),
                    new FieldElement(31834314, 14135496, -770007, 5159118, 20917671, -16768096, -7467973, -7337524,
                        31809243, 7347066)
                ),
                new GroupElementPreComp(
                    new FieldElement(-9606723, -11874240, 20414459, 13033986, 13716524, -11691881, 19797970, -12211255,
                        15192876, -2087490),
                    new FieldElement(-12663563, -2181719, 1168162, -3804809, 26747877, -14138091, 10609330, 12694420,
                        33473243, -13382104),
                    new FieldElement(33184999, 11180355, 15832085, -11385430, -1633671, 225884, 15089336, -11023903,
                        -6135662, 14480053)
                ),
                new GroupElementPreComp(
                    new FieldElement(31308717, -5619998, 31030840, -1897099, 15674547, -6582883, 5496208, 13685227,
                        27595050, 8737275),
                    new FieldElement(-20318852, -15150239, 10933843, -16178022, 8335352, -7546022, -31008351, -12610604,
                        26498114, 66511),
                    new FieldElement(22644454, -8761729, -16671776, 4884562, -3105614, -13559366, 30540766, -4286747,
                        -13327787, -7515095)
                ),
                new GroupElementPreComp(
                    new FieldElement(-28017847, 9834845, 18617207, -2681312, -3401956, -13307506, 8205540, 13585437,
                        -17127465, 15115439),
                    new FieldElement(23711543, -672915, 31206561, -8362711, 6164647, -9709987, -33535882, -1426096,
                        8236921, 16492939),
                    new FieldElement(-23910559, -13515526, -26299483, -4503841, 25005590, -7687270, 19574902, 10071562,
                        6708380, -6222424)
                ),
                new GroupElementPreComp(
                    new FieldElement(2101391, -4930054, 19702731, 2367575, -15427167, 1047675, 5301017, 9328700,
                        29955601, -11678310),
                    new FieldElement(3096359, 9271816, -21620864, -15521844, -14847996, -7592937, -25892142, -12635595,
                        -9917575, 6216608),
                    new FieldElement(-32615849, 338663, -25195611, 2510422, -29213566, -13820213, 24822830, -6146567,
                        -26767480, 7525079)
                ),
                new GroupElementPreComp(
                    new FieldElement(-23066649, -13985623, 16133487, -7896178, -3389565, 778788, -910336, -2782495,
                        -19386633, 11994101),
                    new FieldElement(21691500, -13624626, -641331, -14367021, 3285881, -3483596, -25064666, 9718258,
                        -7477437, 13381418),
                    new FieldElement(18445390, -4202236, 14979846, 11622458, -1727110, -3582980, 23111648, -6375247,
                        28535282, 15779576)
                ),
                new GroupElementPreComp(
                    new FieldElement(30098053, 3089662, -9234387, 16662135, -21306940, 11308411, -14068454, 12021730,
                        9955285, -16303356),
                    new FieldElement(9734894, -14576830, -7473633, -9138735, 2060392, 11313496, -18426029, 9924399,
                        20194861, 13380996),
                    new FieldElement(-26378102, -7965207, -22167821, 15789297, -18055342, -6168792, -1984914, 15707771,
                        26342023, 10146099)
                )
            },
            new[]
            {
                new GroupElementPreComp(
                    new FieldElement(-26016874, -219943, 21339191, -41388, 19745256, -2878700, -29637280, 2227040,
                        21612326, -545728),
                    new FieldElement(-13077387, 1184228, 23562814, -5970442, -20351244, -6348714, 25764461, 12243797,
                        -20856566, 11649658),
                    new FieldElement(-10031494, 11262626, 27384172, 2271902, 26947504, -15997771, 39944, 6114064,
                        33514190, 2333242)
                ),
                new GroupElementPreComp(
                    new FieldElement(-21433588, -12421821, 8119782, 7219913, -21830522, -9016134, -6679750, -12670638,
                        24350578, -13450001),
                    new FieldElement(-4116307, -11271533, -23886186, 4843615, -30088339, 690623, -31536088, -10406836,
                        8317860, 12352766),
                    new FieldElement(18200138, -14475911, -33087759, -2696619, -23702521, -9102511, -23552096, -2287550,
                        20712163, 6719373)
                ),
                new GroupElementPreComp(
                    new FieldElement(26656208, 6075253, -7858556, 1886072, -28344043, 4262326, 11117530, -3763210,
                        26224235, -3297458),
                    new FieldElement(-17168938, -14854097, -3395676, -16369877, -19954045, 14050420, 21728352, 9493610,
                        18620611, -16428628),
                    new FieldElement(-13323321, 13325349, 11432106, 5964811, 18609221, 6062965, -5269471, -9725556,
                        -30701573, -16479657)
                ),
                new GroupElementPreComp(
                    new FieldElement(-23860538, -11233159, 26961357, 1640861, -32413112, -16737940, 12248509, -5240639,
                        13735342, 1934062),
                    new FieldElement(25089769, 6742589, 17081145, -13406266, 21909293, -16067981, -15136294, -3765346,
                        -21277997, 5473616),
                    new FieldElement(31883677, -7961101, 1083432, -11572403, 22828471, 13290673, -7125085, 12469656,
                        29111212, -5451014)
                ),
                new GroupElementPreComp(
                    new FieldElement(24244947, -15050407, -26262976, 2791540, -14997599, 16666678, 24367466, 6388839,
                        -10295587, 452383),
                    new FieldElement(-25640782, -3417841, 5217916, 16224624, 19987036, -4082269, -24236251, -5915248,
                        15766062, 8407814),
                    new FieldElement(-20406999, 13990231, 15495425, 16395525, 5377168, 15166495, -8917023, -4388953,
                        -8067909, 2276718)
                ),
                new GroupElementPreComp(
                    new FieldElement(30157918, 12924066, -17712050, 9245753, 19895028, 3368142, -23827587, 5096219,
                        22740376, -7303417),
                    new FieldElement(2041139, -14256350, 7783687, 13876377, -25946985, -13352459, 24051124, 13742383,
                        -15637599, 13295222),
                    new FieldElement(33338237, -8505733, 12532113, 7977527, 9106186, -1715251, -17720195, -4612972,
                        -4451357, -14669444)
                ),
                new GroupElementPreComp(
                    new FieldElement(-20045281, 5454097, -14346548, 6447146, 28862071, 1883651, -2469266, -4141880,
                        7770569, 9620597),
                    new FieldElement(23208068, 7979712, 33071466, 8149229, 1758231, -10834995, 30945528, -1694323,
                        -33502340, -14767970),
                    new FieldElement(1439958, -16270480, -1079989, -793782, 4625402, 10647766, -5043801, 1220118,
                        30494170, -11440799)
                ),
                new GroupElementPreComp(
                    new FieldElement(-5037580, -13028295, -2970559, -3061767, 15640974, -6701666, -26739026, 926050,
                        -1684339, -13333647),
                    new FieldElement(13908495, -3549272, 30919928, -6273825, -21521863, 7989039, 9021034, 9078865,
                        3353509, 4033511),
                    new FieldElement(-29663431, -15113610, 32259991, -344482, 24295849, -12912123, 23161163, 8839127,
                        27485041, 7356032)
                )
            },
            new[]
            {
                new GroupElementPreComp(
                    new FieldElement(9661027, 705443, 11980065, -5370154, -1628543, 14661173, -6346142, 2625015,
                        28431036, -16771834),
                    new FieldElement(-23839233, -8311415, -25945511, 7480958, -17681669, -8354183, -22545972, 14150565,
                        15970762, 4099461),
                    new FieldElement(29262576, 16756590, 26350592, -8793563, 8529671, -11208050, 13617293, -9937143,
                        11465739, 8317062)
                ),
                new GroupElementPreComp(
                    new FieldElement(-25493081, -6962928, 32500200, -9419051, -23038724, -2302222, 14898637, 3848455,
                        20969334, -5157516),
                    new FieldElement(-20384450, -14347713, -18336405, 13884722, -33039454, 2842114, -21610826, -3649888,
                        11177095, 14989547),
                    new FieldElement(-24496721, -11716016, 16959896, 2278463, 12066309, 10137771, 13515641, 2581286,
                        -28487508, 9930240)
                ),
                new GroupElementPreComp(
                    new FieldElement(-17751622, -2097826, 16544300, -13009300, -15914807, -14949081, 18345767,
                        -13403753, 16291481, -5314038),
                    new FieldElement(-33229194, 2553288, 32678213, 9875984, 8534129, 6889387, -9676774, 6957617,
                        4368891, 9788741),
                    new FieldElement(16660756, 7281060, -10830758, 12911820, 20108584, -8101676, -21722536, -8613148,
                        16250552, -11111103)
                ),
                new GroupElementPreComp(
                    new FieldElement(-19765507, 2390526, -16551031, 14161980, 1905286, 6414907, 4689584, 10604807,
                        -30190403, 4782747),
                    new FieldElement(-1354539, 14736941, -7367442, -13292886, 7710542, -14155590, -9981571, 4383045,
                        22546403, 437323),
                    new FieldElement(31665577, -12180464, -16186830, 1491339, -18368625, 3294682, 27343084, 2786261,
                        -30633590, -14097016)
                ),
                new GroupElementPreComp(
                    new FieldElement(-14467279, -683715, -33374107, 7448552, 19294360, 14334329, -19690631, 2355319,
                        -19284671, -6114373),
                    new FieldElement(15121312, -15796162, 6377020, -6031361, -10798111, -12957845, 18952177, 15496498,
                        -29380133, 11754228),
                    new FieldElement(-2637277, -13483075, 8488727, -14303896, 12728761, -1622493, 7141596, 11724556,
                        22761615, -10134141)
                ),
                new GroupElementPreComp(
                    new FieldElement(16918416, 11729663, -18083579, 3022987, -31015732, -13339659, -28741185, -12227393,
                        32851222, 11717399),
                    new FieldElement(11166634, 7338049, -6722523, 4531520, -29468672, -7302055, 31474879, 3483633,
                        -1193175, -4030831),
                    new FieldElement(-185635, 9921305, 31456609, -13536438, -12013818, 13348923, 33142652, 6546660,
                        -19985279, -3948376)
                ),
                new GroupElementPreComp(
                    new FieldElement(-32460596, 11266712, -11197107, -7899103, 31703694, 3855903, -8537131, -12833048,
                        -30772034, -15486313),
                    new FieldElement(-18006477, 12709068, 3991746, -6479188, -21491523, -10550425, -31135347, -16049879,
                        10928917, 3011958),
                    new FieldElement(-6957757, -15594337, 31696059, 334240, 29576716, 14796075, -30831056, -12805180,
                        18008031, 10258577)
                ),
                new GroupElementPreComp(
                    new FieldElement(-22448644, 15655569, 7018479, -4410003, -30314266, -1201591, -1853465, 1367120,
                        25127874, 6671743),
                    new FieldElement(29701166, -14373934, -10878120, 9279288, -17568, 13127210, 21382910, 11042292,
                        25838796, 4642684),
                    new FieldElement(-20430234, 14955537, -24126347, 8124619, -5369288, -5990470, 30468147, -13900640,
                        18423289, 4177476)
                )
            }
        };
    }
}
'''
'''--- Src/NearClientUnity/Utilities/Ed25519/Internal/Ed25519Ref10/Lookup/Base2.cs ---
﻿using NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.Field;
using NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.Group;

namespace NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.Lookup
{
    internal static partial class LookupTables
    {
        internal static readonly GroupElementPreComp[] Base2 =
        {
            new GroupElementPreComp(
                new FieldElement(25967493, -14356035, 29566456, 3660896, -12694345, 4014787, 27544626, -11754271,
                    -6079156, 2047605),
                new FieldElement(-12545711, 934262, -2722910, 3049990, -727428, 9406986, 12720692, 5043384, 19500929,
                    -15469378),
                new FieldElement(-8738181, 4489570, 9688441, -14785194, 10184609, -12363380, 29287919, 11864899,
                    -24514362, -4438546)
            ),
            new GroupElementPreComp(
                new FieldElement(15636291, -9688557, 24204773, -7912398, 616977, -16685262, 27787600, -14772189,
                    28944400, -1550024),
                new FieldElement(16568933, 4717097, -11556148, -1102322, 15682896, -11807043, 16354577, -11775962,
                    7689662, 11199574),
                new FieldElement(30464156, -5976125, -11779434, -15670865, 23220365, 15915852, 7512774, 10017326,
                    -17749093, -9920357)
            ),
            new GroupElementPreComp(
                new FieldElement(10861363, 11473154, 27284546, 1981175, -30064349, 12577861, 32867885, 14515107,
                    -15438304, 10819380),
                new FieldElement(4708026, 6336745, 20377586, 9066809, -11272109, 6594696, -25653668, 12483688,
                    -12668491, 5581306),
                new FieldElement(19563160, 16186464, -29386857, 4097519, 10237984, -4348115, 28542350, 13850243,
                    -23678021, -15815942)
            ),
            new GroupElementPreComp(
                new FieldElement(5153746, 9909285, 1723747, -2777874, 30523605, 5516873, 19480852, 5230134, -23952439,
                    -15175766),
                new FieldElement(-30269007, -3463509, 7665486, 10083793, 28475525, 1649722, 20654025, 16520125,
                    30598449, 7715701),
                new FieldElement(28881845, 14381568, 9657904, 3680757, -20181635, 7843316, -31400660, 1370708, 29794553,
                    -1409300)
            ),
            new GroupElementPreComp(
                new FieldElement(-22518993, -6692182, 14201702, -8745502, -23510406, 8844726, 18474211, -1361450,
                    -13062696, 13821877),
                new FieldElement(-6455177, -7839871, 3374702, -4740862, -27098617, -10571707, 31655028, -7212327,
                    18853322, -14220951),
                new FieldElement(4566830, -12963868, -28974889, -12240689, -7602672, -2830569, -8514358, -10431137,
                    2207753, -3209784)
            ),
            new GroupElementPreComp(
                new FieldElement(-25154831, -4185821, 29681144, 7868801, -6854661, -9423865, -12437364, -663000,
                    -31111463, -16132436),
                new FieldElement(25576264, -2703214, 7349804, -11814844, 16472782, 9300885, 3844789, 15725684, 171356,
                    6466918),
                new FieldElement(23103977, 13316479, 9739013, -16149481, 817875, -15038942, 8965339, -14088058,
                    -30714912, 16193877)
            ),
            new GroupElementPreComp(
                new FieldElement(-33521811, 3180713, -2394130, 14003687, -16903474, -16270840, 17238398, 4729455,
                    -18074513, 9256800),
                new FieldElement(-25182317, -4174131, 32336398, 5036987, -21236817, 11360617, 22616405, 9761698,
                    -19827198, 630305),
                new FieldElement(-13720693, 2639453, -24237460, -7406481, 9494427, -5774029, -6554551, -15960994,
                    -2449256, -14291300)
            ),
            new GroupElementPreComp(
                new FieldElement(-3151181, -5046075, 9282714, 6866145, -31907062, -863023, -18940575, 15033784,
                    25105118, -7894876),
                new FieldElement(-24326370, 15950226, -31801215, -14592823, -11662737, -5090925, 1573892, -2625887,
                    2198790, -15804619),
                new FieldElement(-3099351, 10324967, -2241613, 7453183, -5446979, -2735503, -13812022, -16236442,
                    -32461234, -12290683)
            )
        };
    }
}
'''
'''--- Src/NearClientUnity/Utilities/Ed25519/Internal/Ed25519Ref10/Lookup/D.cs ---
﻿using NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.Field;

namespace NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.Lookup
{
    internal static partial class LookupTables
    {
        internal static FieldElement D = new FieldElement(-10913610, 13857413, -15372611, 6949391, 114729, -8787816,
            -6275908, -3247719, -18696448, -12055116);
    }
}
'''
'''--- Src/NearClientUnity/Utilities/Ed25519/Internal/Ed25519Ref10/Lookup/D2.cs ---
﻿using NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.Field;

namespace NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.Lookup
{
    internal static partial class LookupTables
    {
        internal static FieldElement D2 = new FieldElement(-21827239, -5839606, -30745221, 13898782, 229458, 15978800,
            -12551817, -6495438, 29715968, 9444199);
    }
}
'''
'''--- Src/NearClientUnity/Utilities/Ed25519/Internal/Ed25519Ref10/Lookup/sqrtm1.cs ---
﻿using NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.Field;

namespace NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.Lookup
{
    internal static partial class LookupTables
    {
        internal static FieldElement Sqrtm1 = new FieldElement(-32595792, -7943725, 9377950, 3500415, 12389472, -272473,
            -25146209, -2005654, 326686, 11406482);
    }
}
'''
'''--- Src/NearClientUnity/Utilities/Ed25519/Internal/Ed25519Ref10/MontgomeryOps/ScalarMult.cs ---
﻿using NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.Field;
using NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.Field.Operations;
using NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.ScalarOps;

namespace NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.MontgomeryOps
{
    public static class MontgomeryOperations
    {
        public static void ScalarMult(
            byte[] q, int qoffset,
            byte[] n, int noffset,
            byte[] p, int poffset)
        {
            FieldElement p0, q0;
            FieldOperations.FromBytes2(out p0, p, poffset);
            ScalarMult(out q0, n, noffset, ref p0);
            FieldOperations.ToBytes(q, qoffset, ref q0);
        }

        private static void ScalarMult(
            out FieldElement q,
            byte[] n, int noffset,
            ref FieldElement p)
        {
            var e = new byte[32]; //ToDo: remove allocation
            FieldElement tmp1;

            for (var i = 0; i < 32; ++i)
                e[i] = n[noffset + i];
            ScalarOperations.Clamp(e, 0);
            var x1 = p;
            FieldOperations.FieldOperations_1(out var x2);
            FieldOperations.FieldOperations_0(out var z2);
            var x3 = x1;
            FieldOperations.FieldOperations_1(out var z3);

            uint swap = 0;
            for (var pos = 254; pos >= 0; --pos)
            {
                var b = (uint)(e[pos / 8] >> (pos & 7));
                b &= 1;
                swap ^= b;
                FieldOperations.ControlledSwap(ref x2, ref x3, swap);
                FieldOperations.ControlledSwap(ref z2, ref z3, swap);
                swap = b;

                /* qhasm: enter ladder */

                /* qhasm: D = X3-Z3 */
                /* asm 1: Subtract(>D=fe#5,<X3=fe#3,<Z3=fe#4); */
                /* asm 2: Subtract(>D=tmp0,<X3=x3,<Z3=z3); */
                FieldOperations.Subtract(out var tmp0, ref x3, ref z3);

                /* qhasm: B = X2-Z2 */
                /* asm 1: Subtract(>B=fe#6,<X2=fe#1,<Z2=fe#2); */
                /* asm 2: Subtract(>B=tmp1,<X2=x2,<Z2=z2); */
                FieldOperations.Subtract(out tmp1, ref x2, ref z2);

                /* qhasm: A = X2+Z2 */
                /* asm 1: Add(>A=fe#1,<X2=fe#1,<Z2=fe#2); */
                /* asm 2: Add(>A=x2,<X2=x2,<Z2=z2); */
                FieldOperations.Add(out x2, ref x2, ref z2);

                /* qhasm: C = X3+Z3 */
                /* asm 1: Add(>C=fe#2,<X3=fe#3,<Z3=fe#4); */
                /* asm 2: Add(>C=z2,<X3=x3,<Z3=z3); */
                FieldOperations.Add(out z2, ref x3, ref z3);

                /* qhasm: DA = D*A */
                /* asm 1: Multiplication(>DA=fe#4,<D=fe#5,<A=fe#1); */
                /* asm 2: Multiplication(>DA=z3,<D=tmp0,<A=x2); */
                FieldOperations.Multiplication(out z3, ref tmp0, ref x2);

                /* qhasm: CB = C*B */
                /* asm 1: Multiplication(>CB=fe#2,<C=fe#2,<B=fe#6); */
                /* asm 2: Multiplication(>CB=z2,<C=z2,<B=tmp1); */
                FieldOperations.Multiplication(out z2, ref z2, ref tmp1);

                /* qhasm: BB = B^2 */
                /* asm 1: Square(>BB=fe#5,<B=fe#6); */
                /* asm 2: Square(>BB=tmp0,<B=tmp1); */
                FieldOperations.Square(out tmp0, ref tmp1);

                /* qhasm: AA = A^2 */
                /* asm 1: Square(>AA=fe#6,<A=fe#1); */
                /* asm 2: Square(>AA=tmp1,<A=x2); */
                FieldOperations.Square(out tmp1, ref x2);

                /* qhasm: t0 = DA+CB */
                /* asm 1: Add(>t0=fe#3,<DA=fe#4,<CB=fe#2); */
                /* asm 2: Add(>t0=x3,<DA=z3,<CB=z2); */
                FieldOperations.Add(out x3, ref z3, ref z2);

                /* qhasm: assign x3 to t0 */

                /* qhasm: t1 = DA-CB */
                /* asm 1: Subtract(>t1=fe#2,<DA=fe#4,<CB=fe#2); */
                /* asm 2: Subtract(>t1=z2,<DA=z3,<CB=z2); */
                FieldOperations.Subtract(out z2, ref z3, ref z2);

                /* qhasm: X4 = AA*BB */
                /* asm 1: Multiplication(>X4=fe#1,<AA=fe#6,<BB=fe#5); */
                /* asm 2: Multiplication(>X4=x2,<AA=tmp1,<BB=tmp0); */
                FieldOperations.Multiplication(out x2, ref tmp1, ref tmp0);

                /* qhasm: E = AA-BB */
                /* asm 1: Subtract(>E=fe#6,<AA=fe#6,<BB=fe#5); */
                /* asm 2: Subtract(>E=tmp1,<AA=tmp1,<BB=tmp0); */
                FieldOperations.Subtract(out tmp1, ref tmp1, ref tmp0);

                /* qhasm: t2 = t1^2 */
                /* asm 1: Square(>t2=fe#2,<t1=fe#2); */
                /* asm 2: Square(>t2=z2,<t1=z2); */
                FieldOperations.Square(out z2, ref z2);

                /* qhasm: t3 = a24*E */
                /* asm 1: Multiplication121666(>t3=fe#4,<E=fe#6); */
                /* asm 2: Multiplication121666(>t3=z3,<E=tmp1); */
                FieldOperations.Multiplication121666(out z3, ref tmp1);

                /* qhasm: X5 = t0^2 */
                /* asm 1: Square(>X5=fe#3,<t0=fe#3); */
                /* asm 2: Square(>X5=x3,<t0=x3); */
                FieldOperations.Square(out x3, ref x3);

                /* qhasm: t4 = BB+t3 */
                /* asm 1: Add(>t4=fe#5,<BB=fe#5,<t3=fe#4); */
                /* asm 2: Add(>t4=tmp0,<BB=tmp0,<t3=z3); */
                FieldOperations.Add(out tmp0, ref tmp0, ref z3);

                /* qhasm: Z5 = X1*t2 */
                /* asm 1: Multiplication(>Z5=fe#4,x1,<t2=fe#2); */
                /* asm 2: Multiplication(>Z5=z3,x1,<t2=z2); */
                FieldOperations.Multiplication(out z3, ref x1, ref z2);

                /* qhasm: Z4 = E*t4 */
                /* asm 1: Multiplication(>Z4=fe#2,<E=fe#6,<t4=fe#5); */
                /* asm 2: Multiplication(>Z4=z2,<E=tmp1,<t4=tmp0); */
                FieldOperations.Multiplication(out z2, ref tmp1, ref tmp0);

                /* qhasm: return */
            }

            FieldOperations.ControlledSwap(ref x2, ref x3, swap);
            FieldOperations.ControlledSwap(ref z2, ref z3, swap);

            FieldOperations.Invert(out z2, ref z2);
            FieldOperations.Multiplication(out x2, ref x2, ref z2);
            q = x2;
            CryptoBytes.Wipe(e);
        }
    }
}
'''
'''--- Src/NearClientUnity/Utilities/Ed25519/Internal/Ed25519Ref10/ScalarOps/Clamp.cs ---
﻿namespace NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.ScalarOps
{
    internal static partial class ScalarOperations
    {
        public static void Clamp(byte[] s, int offset)
        {
            s[offset + 0] &= 248;
            s[offset + 31] &= 127;
            s[offset + 31] |= 64;
        }
    }
}
'''
'''--- Src/NearClientUnity/Utilities/Ed25519/Internal/Ed25519Ref10/ScalarOps/Load.cs ---
﻿namespace NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.ScalarOps
{
    internal static partial class ScalarOperations
    {
        private static long Load_3(byte[] input, int offset)
        {
            long result = input[offset + 0];
            result |= (long)input[offset + 1] << 8;
            result |= (long)input[offset + 2] << 16;
            return result;
        }

        private static long Load_4(byte[] input, int offset)
        {
            long result = input[offset + 0];
            result |= (long)input[offset + 1] << 8;
            result |= (long)input[offset + 2] << 16;
            result |= (long)input[offset + 3] << 24;
            return result;
        }
    }
}
'''
'''--- Src/NearClientUnity/Utilities/Ed25519/Internal/Ed25519Ref10/ScalarOps/MulAdd.cs ---
﻿namespace NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.ScalarOps
{
    internal static partial class ScalarOperations
    {
        /*
        Input:
          a[0]+256*a[1]+...+256^31*a[31] = a
          b[0]+256*b[1]+...+256^31*b[31] = b
          c[0]+256*c[1]+...+256^31*c[31] = c

        Output:
          s[0]+256*s[1]+...+256^31*s[31] = (ab+c) mod l
          where l = 2^252 + 27742317777372353535851937790883648493.
        */

        public static void MulAdd(byte[] s, byte[] a, byte[] b, byte[] c)
        {
            var a0 = 2097151 & Load_3(a, 0);
            var a1 = 2097151 & (Load_4(a, 2) >> 5);
            var a2 = 2097151 & (Load_3(a, 5) >> 2);
            var a3 = 2097151 & (Load_4(a, 7) >> 7);
            var a4 = 2097151 & (Load_4(a, 10) >> 4);
            var a5 = 2097151 & (Load_3(a, 13) >> 1);
            var a6 = 2097151 & (Load_4(a, 15) >> 6);
            var a7 = 2097151 & (Load_3(a, 18) >> 3);
            var a8 = 2097151 & Load_3(a, 21);
            var a9 = 2097151 & (Load_4(a, 23) >> 5);
            var a10 = 2097151 & (Load_3(a, 26) >> 2);
            var a11 = Load_4(a, 28) >> 7;
            var b0 = 2097151 & Load_3(b, 0);
            var b1 = 2097151 & (Load_4(b, 2) >> 5);
            var b2 = 2097151 & (Load_3(b, 5) >> 2);
            var b3 = 2097151 & (Load_4(b, 7) >> 7);
            var b4 = 2097151 & (Load_4(b, 10) >> 4);
            var b5 = 2097151 & (Load_3(b, 13) >> 1);
            var b6 = 2097151 & (Load_4(b, 15) >> 6);
            var b7 = 2097151 & (Load_3(b, 18) >> 3);
            var b8 = 2097151 & Load_3(b, 21);
            var b9 = 2097151 & (Load_4(b, 23) >> 5);
            var b10 = 2097151 & (Load_3(b, 26) >> 2);
            var b11 = Load_4(b, 28) >> 7;
            var c0 = 2097151 & Load_3(c, 0);
            var c1 = 2097151 & (Load_4(c, 2) >> 5);
            var c2 = 2097151 & (Load_3(c, 5) >> 2);
            var c3 = 2097151 & (Load_4(c, 7) >> 7);
            var c4 = 2097151 & (Load_4(c, 10) >> 4);
            var c5 = 2097151 & (Load_3(c, 13) >> 1);
            var c6 = 2097151 & (Load_4(c, 15) >> 6);
            var c7 = 2097151 & (Load_3(c, 18) >> 3);
            var c8 = 2097151 & Load_3(c, 21);
            var c9 = 2097151 & (Load_4(c, 23) >> 5);
            var c10 = 2097151 & (Load_3(c, 26) >> 2);
            var c11 = Load_4(c, 28) >> 7;

            var s0 = c0 + a0 * b0;
            var s1 = c1 + a0 * b1 + a1 * b0;
            var s2 = c2 + a0 * b2 + a1 * b1 + a2 * b0;
            var s3 = c3 + a0 * b3 + a1 * b2 + a2 * b1 + a3 * b0;
            var s4 = c4 + a0 * b4 + a1 * b3 + a2 * b2 + a3 * b1 + a4 * b0;
            var s5 = c5 + a0 * b5 + a1 * b4 + a2 * b3 + a3 * b2 + a4 * b1 + a5 * b0;
            var s6 = c6 + a0 * b6 + a1 * b5 + a2 * b4 + a3 * b3 + a4 * b2 + a5 * b1 + a6 * b0;
            var s7 = c7 + a0 * b7 + a1 * b6 + a2 * b5 + a3 * b4 + a4 * b3 + a5 * b2 + a6 * b1 + a7 * b0;
            var s8 = c8 + a0 * b8 + a1 * b7 + a2 * b6 + a3 * b5 + a4 * b4 + a5 * b3 + a6 * b2 + a7 * b1 + a8 * b0;
            var s9 = c9 + a0 * b9 + a1 * b8 + a2 * b7 + a3 * b6 + a4 * b5 + a5 * b4 + a6 * b3 + a7 * b2 + a8 * b1 +
                     a9 * b0;
            var s10 = c10 + a0 * b10 + a1 * b9 + a2 * b8 + a3 * b7 + a4 * b6 + a5 * b5 + a6 * b4 + a7 * b3 + a8 * b2 +
                      a9 * b1 + a10 * b0;
            var s11 = c11 + a0 * b11 + a1 * b10 + a2 * b9 + a3 * b8 + a4 * b7 + a5 * b6 + a6 * b5 + a7 * b4 + a8 * b3 +
                      a9 * b2 + a10 * b1 + a11 * b0;
            var s12 = a1 * b11 + a2 * b10 + a3 * b9 + a4 * b8 + a5 * b7 + a6 * b6 + a7 * b5 + a8 * b4 + a9 * b3 +
                      a10 * b2 +
                      a11 * b1;
            var s13 = a2 * b11 + a3 * b10 + a4 * b9 + a5 * b8 + a6 * b7 + a7 * b6 + a8 * b5 + a9 * b4 + a10 * b3 +
                      a11 * b2;
            var s14 = a3 * b11 + a4 * b10 + a5 * b9 + a6 * b8 + a7 * b7 + a8 * b6 + a9 * b5 + a10 * b4 + a11 * b3;
            var s15 = a4 * b11 + a5 * b10 + a6 * b9 + a7 * b8 + a8 * b7 + a9 * b6 + a10 * b5 + a11 * b4;
            var s16 = a5 * b11 + a6 * b10 + a7 * b9 + a8 * b8 + a9 * b7 + a10 * b6 + a11 * b5;
            var s17 = a6 * b11 + a7 * b10 + a8 * b9 + a9 * b8 + a10 * b7 + a11 * b6;
            var s18 = a7 * b11 + a8 * b10 + a9 * b9 + a10 * b8 + a11 * b7;
            var s19 = a8 * b11 + a9 * b10 + a10 * b9 + a11 * b8;
            var s20 = a9 * b11 + a10 * b10 + a11 * b9;
            var s21 = a10 * b11 + a11 * b10;
            var s22 = a11 * b11;
            long s23 = 0;

            var carry0 = (s0 + (1 << 20)) >> 21;
            s1 += carry0;
            s0 -= carry0 << 21;
            var carry2 = (s2 + (1 << 20)) >> 21;
            s3 += carry2;
            s2 -= carry2 << 21;
            var carry4 = (s4 + (1 << 20)) >> 21;
            s5 += carry4;
            s4 -= carry4 << 21;
            var carry6 = (s6 + (1 << 20)) >> 21;
            s7 += carry6;
            s6 -= carry6 << 21;
            var carry8 = (s8 + (1 << 20)) >> 21;
            s9 += carry8;
            s8 -= carry8 << 21;
            var carry10 = (s10 + (1 << 20)) >> 21;
            s11 += carry10;
            s10 -= carry10 << 21;
            var carry12 = (s12 + (1 << 20)) >> 21;
            s13 += carry12;
            s12 -= carry12 << 21;
            var carry14 = (s14 + (1 << 20)) >> 21;
            s15 += carry14;
            s14 -= carry14 << 21;
            var carry16 = (s16 + (1 << 20)) >> 21;
            s17 += carry16;
            s16 -= carry16 << 21;
            var carry18 = (s18 + (1 << 20)) >> 21;
            s19 += carry18;
            s18 -= carry18 << 21;
            var carry20 = (s20 + (1 << 20)) >> 21;
            s21 += carry20;
            s20 -= carry20 << 21;
            var carry22 = (s22 + (1 << 20)) >> 21;
            s23 += carry22;
            s22 -= carry22 << 21;

            var carry1 = (s1 + (1 << 20)) >> 21;
            s2 += carry1;
            s1 -= carry1 << 21;
            var carry3 = (s3 + (1 << 20)) >> 21;
            s4 += carry3;
            s3 -= carry3 << 21;
            var carry5 = (s5 + (1 << 20)) >> 21;
            s6 += carry5;
            s5 -= carry5 << 21;
            var carry7 = (s7 + (1 << 20)) >> 21;
            s8 += carry7;
            s7 -= carry7 << 21;
            var carry9 = (s9 + (1 << 20)) >> 21;
            s10 += carry9;
            s9 -= carry9 << 21;
            var carry11 = (s11 + (1 << 20)) >> 21;
            s12 += carry11;
            s11 -= carry11 << 21;
            var carry13 = (s13 + (1 << 20)) >> 21;
            s14 += carry13;
            s13 -= carry13 << 21;
            var carry15 = (s15 + (1 << 20)) >> 21;
            s16 += carry15;
            s15 -= carry15 << 21;
            var carry17 = (s17 + (1 << 20)) >> 21;
            s18 += carry17;
            s17 -= carry17 << 21;
            var carry19 = (s19 + (1 << 20)) >> 21;
            s20 += carry19;
            s19 -= carry19 << 21;
            var carry21 = (s21 + (1 << 20)) >> 21;
            s22 += carry21;
            s21 -= carry21 << 21;

            s11 += s23 * 666643;
            s12 += s23 * 470296;
            s13 += s23 * 654183;
            s14 -= s23 * 997805;
            s15 += s23 * 136657;
            s16 -= s23 * 683901;

            s10 += s22 * 666643;
            s11 += s22 * 470296;
            s12 += s22 * 654183;
            s13 -= s22 * 997805;
            s14 += s22 * 136657;
            s15 -= s22 * 683901;

            s9 += s21 * 666643;
            s10 += s21 * 470296;
            s11 += s21 * 654183;
            s12 -= s21 * 997805;
            s13 += s21 * 136657;
            s14 -= s21 * 683901;

            s8 += s20 * 666643;
            s9 += s20 * 470296;
            s10 += s20 * 654183;
            s11 -= s20 * 997805;
            s12 += s20 * 136657;
            s13 -= s20 * 683901;

            s7 += s19 * 666643;
            s8 += s19 * 470296;
            s9 += s19 * 654183;
            s10 -= s19 * 997805;
            s11 += s19 * 136657;
            s12 -= s19 * 683901;

            s6 += s18 * 666643;
            s7 += s18 * 470296;
            s8 += s18 * 654183;
            s9 -= s18 * 997805;
            s10 += s18 * 136657;
            s11 -= s18 * 683901;

            carry6 = (s6 + (1 << 20)) >> 21;
            s7 += carry6;
            s6 -= carry6 << 21;
            carry8 = (s8 + (1 << 20)) >> 21;
            s9 += carry8;
            s8 -= carry8 << 21;
            carry10 = (s10 + (1 << 20)) >> 21;
            s11 += carry10;
            s10 -= carry10 << 21;
            carry12 = (s12 + (1 << 20)) >> 21;
            s13 += carry12;
            s12 -= carry12 << 21;
            carry14 = (s14 + (1 << 20)) >> 21;
            s15 += carry14;
            s14 -= carry14 << 21;
            carry16 = (s16 + (1 << 20)) >> 21;
            s17 += carry16;
            s16 -= carry16 << 21;

            carry7 = (s7 + (1 << 20)) >> 21;
            s8 += carry7;
            s7 -= carry7 << 21;
            carry9 = (s9 + (1 << 20)) >> 21;
            s10 += carry9;
            s9 -= carry9 << 21;
            carry11 = (s11 + (1 << 20)) >> 21;
            s12 += carry11;
            s11 -= carry11 << 21;
            carry13 = (s13 + (1 << 20)) >> 21;
            s14 += carry13;
            s13 -= carry13 << 21;
            carry15 = (s15 + (1 << 20)) >> 21;
            s16 += carry15;
            s15 -= carry15 << 21;

            s5 += s17 * 666643;
            s6 += s17 * 470296;
            s7 += s17 * 654183;
            s8 -= s17 * 997805;
            s9 += s17 * 136657;
            s10 -= s17 * 683901;

            s4 += s16 * 666643;
            s5 += s16 * 470296;
            s6 += s16 * 654183;
            s7 -= s16 * 997805;
            s8 += s16 * 136657;
            s9 -= s16 * 683901;

            s3 += s15 * 666643;
            s4 += s15 * 470296;
            s5 += s15 * 654183;
            s6 -= s15 * 997805;
            s7 += s15 * 136657;
            s8 -= s15 * 683901;

            s2 += s14 * 666643;
            s3 += s14 * 470296;
            s4 += s14 * 654183;
            s5 -= s14 * 997805;
            s6 += s14 * 136657;
            s7 -= s14 * 683901;

            s1 += s13 * 666643;
            s2 += s13 * 470296;
            s3 += s13 * 654183;
            s4 -= s13 * 997805;
            s5 += s13 * 136657;
            s6 -= s13 * 683901;

            s0 += s12 * 666643;
            s1 += s12 * 470296;
            s2 += s12 * 654183;
            s3 -= s12 * 997805;
            s4 += s12 * 136657;
            s5 -= s12 * 683901;
            s12 = 0;

            carry0 = (s0 + (1 << 20)) >> 21;
            s1 += carry0;
            s0 -= carry0 << 21;
            carry2 = (s2 + (1 << 20)) >> 21;
            s3 += carry2;
            s2 -= carry2 << 21;
            carry4 = (s4 + (1 << 20)) >> 21;
            s5 += carry4;
            s4 -= carry4 << 21;
            carry6 = (s6 + (1 << 20)) >> 21;
            s7 += carry6;
            s6 -= carry6 << 21;
            carry8 = (s8 + (1 << 20)) >> 21;
            s9 += carry8;
            s8 -= carry8 << 21;
            carry10 = (s10 + (1 << 20)) >> 21;
            s11 += carry10;
            s10 -= carry10 << 21;

            carry1 = (s1 + (1 << 20)) >> 21;
            s2 += carry1;
            s1 -= carry1 << 21;
            carry3 = (s3 + (1 << 20)) >> 21;
            s4 += carry3;
            s3 -= carry3 << 21;
            carry5 = (s5 + (1 << 20)) >> 21;
            s6 += carry5;
            s5 -= carry5 << 21;
            carry7 = (s7 + (1 << 20)) >> 21;
            s8 += carry7;
            s7 -= carry7 << 21;
            carry9 = (s9 + (1 << 20)) >> 21;
            s10 += carry9;
            s9 -= carry9 << 21;
            carry11 = (s11 + (1 << 20)) >> 21;
            s12 += carry11;
            s11 -= carry11 << 21;

            s0 += s12 * 666643;
            s1 += s12 * 470296;
            s2 += s12 * 654183;
            s3 -= s12 * 997805;
            s4 += s12 * 136657;
            s5 -= s12 * 683901;
            s12 = 0;

            carry0 = s0 >> 21;
            s1 += carry0;
            s0 -= carry0 << 21;
            carry1 = s1 >> 21;
            s2 += carry1;
            s1 -= carry1 << 21;
            carry2 = s2 >> 21;
            s3 += carry2;
            s2 -= carry2 << 21;
            carry3 = s3 >> 21;
            s4 += carry3;
            s3 -= carry3 << 21;
            carry4 = s4 >> 21;
            s5 += carry4;
            s4 -= carry4 << 21;
            carry5 = s5 >> 21;
            s6 += carry5;
            s5 -= carry5 << 21;
            carry6 = s6 >> 21;
            s7 += carry6;
            s6 -= carry6 << 21;
            carry7 = s7 >> 21;
            s8 += carry7;
            s7 -= carry7 << 21;
            carry8 = s8 >> 21;
            s9 += carry8;
            s8 -= carry8 << 21;
            carry9 = s9 >> 21;
            s10 += carry9;
            s9 -= carry9 << 21;
            carry10 = s10 >> 21;
            s11 += carry10;
            s10 -= carry10 << 21;
            carry11 = s11 >> 21;
            s12 += carry11;
            s11 -= carry11 << 21;

            s0 += s12 * 666643;
            s1 += s12 * 470296;
            s2 += s12 * 654183;
            s3 -= s12 * 997805;
            s4 += s12 * 136657;
            s5 -= s12 * 683901;

            carry0 = s0 >> 21;
            s1 += carry0;
            s0 -= carry0 << 21;
            carry1 = s1 >> 21;
            s2 += carry1;
            s1 -= carry1 << 21;
            carry2 = s2 >> 21;
            s3 += carry2;
            s2 -= carry2 << 21;
            carry3 = s3 >> 21;
            s4 += carry3;
            s3 -= carry3 << 21;
            carry4 = s4 >> 21;
            s5 += carry4;
            s4 -= carry4 << 21;
            carry5 = s5 >> 21;
            s6 += carry5;
            s5 -= carry5 << 21;
            carry6 = s6 >> 21;
            s7 += carry6;
            s6 -= carry6 << 21;
            carry7 = s7 >> 21;
            s8 += carry7;
            s7 -= carry7 << 21;
            carry8 = s8 >> 21;
            s9 += carry8;
            s8 -= carry8 << 21;
            carry9 = s9 >> 21;
            s10 += carry9;
            s9 -= carry9 << 21;
            carry10 = s10 >> 21;
            s11 += carry10;
            s10 -= carry10 << 21;

            unchecked
            {
                s[0] = (byte)(s0);
                s[1] = (byte)(s0 >> 8);
                s[2] = (byte)((s0 >> 16) | (s1 << 5));
                s[3] = (byte)(s1 >> 3);
                s[4] = (byte)(s1 >> 11);
                s[5] = (byte)((s1 >> 19) | (s2 << 2));
                s[6] = (byte)(s2 >> 6);
                s[7] = (byte)((s2 >> 14) | (s3 << 7));
                s[8] = (byte)(s3 >> 1);
                s[9] = (byte)(s3 >> 9);
                s[10] = (byte)((s3 >> 17) | (s4 << 4));
                s[11] = (byte)(s4 >> 4);
                s[12] = (byte)(s4 >> 12);
                s[13] = (byte)((s4 >> 20) | (s5 << 1));
                s[14] = (byte)(s5 >> 7);
                s[15] = (byte)((s5 >> 15) | (s6 << 6));
                s[16] = (byte)(s6 >> 2);
                s[17] = (byte)(s6 >> 10);
                s[18] = (byte)((s6 >> 18) | (s7 << 3));
                s[19] = (byte)(s7 >> 5);
                s[20] = (byte)(s7 >> 13);
                s[21] = (byte)(s8);
                s[22] = (byte)(s8 >> 8);
                s[23] = (byte)((s8 >> 16) | (s9 << 5));
                s[24] = (byte)(s9 >> 3);
                s[25] = (byte)(s9 >> 11);
                s[26] = (byte)((s9 >> 19) | (s10 << 2));
                s[27] = (byte)(s10 >> 6);
                s[28] = (byte)((s10 >> 14) | (s11 << 7));
                s[29] = (byte)(s11 >> 1);
                s[30] = (byte)(s11 >> 9);
                s[31] = (byte)(s11 >> 17);
            }
        }
    }
}
'''
'''--- Src/NearClientUnity/Utilities/Ed25519/Internal/Ed25519Ref10/ScalarOps/Reduce.cs ---
﻿namespace NearClientUnity.Utilities.Ed25519.Internal.Ed25519Ref10.ScalarOps
{
    internal static partial class ScalarOperations
    {
        /*
        Input:
          s[0]+256*s[1]+...+256^63*s[63] = s

        Output:
          s[0]+256*s[1]+...+256^31*s[31] = s mod l
          where l = 2^252 + 27742317777372353535851937790883648493.
          Overwrites s in place.
        */

        public static void Reduce(byte[] s)
        {
            var s0 = 2097151 & Load_3(s, 0);
            var s1 = 2097151 & (Load_4(s, 2) >> 5);
            var s2 = 2097151 & (Load_3(s, 5) >> 2);
            var s3 = 2097151 & (Load_4(s, 7) >> 7);
            var s4 = 2097151 & (Load_4(s, 10) >> 4);
            var s5 = 2097151 & (Load_3(s, 13) >> 1);
            var s6 = 2097151 & (Load_4(s, 15) >> 6);
            var s7 = 2097151 & (Load_3(s, 18) >> 3);
            var s8 = 2097151 & Load_3(s, 21);
            var s9 = 2097151 & (Load_4(s, 23) >> 5);
            var s10 = 2097151 & (Load_3(s, 26) >> 2);
            var s11 = 2097151 & (Load_4(s, 28) >> 7);
            var s12 = 2097151 & (Load_4(s, 31) >> 4);
            var s13 = 2097151 & (Load_3(s, 34) >> 1);
            var s14 = 2097151 & (Load_4(s, 36) >> 6);
            var s15 = 2097151 & (Load_3(s, 39) >> 3);
            var s16 = 2097151 & Load_3(s, 42);
            var s17 = 2097151 & (Load_4(s, 44) >> 5);
            var s18 = 2097151 & (Load_3(s, 47) >> 2);
            var s19 = 2097151 & (Load_4(s, 49) >> 7);
            var s20 = 2097151 & (Load_4(s, 52) >> 4);
            var s21 = 2097151 & (Load_3(s, 55) >> 1);
            var s22 = 2097151 & (Load_4(s, 57) >> 6);
            var s23 = Load_4(s, 60) >> 3;

            s11 += s23 * 666643;
            s12 += s23 * 470296;
            s13 += s23 * 654183;
            s14 -= s23 * 997805;
            s15 += s23 * 136657;
            s16 -= s23 * 683901;

            s10 += s22 * 666643;
            s11 += s22 * 470296;
            s12 += s22 * 654183;
            s13 -= s22 * 997805;
            s14 += s22 * 136657;
            s15 -= s22 * 683901;

            s9 += s21 * 666643;
            s10 += s21 * 470296;
            s11 += s21 * 654183;
            s12 -= s21 * 997805;
            s13 += s21 * 136657;
            s14 -= s21 * 683901;

            s8 += s20 * 666643;
            s9 += s20 * 470296;
            s10 += s20 * 654183;
            s11 -= s20 * 997805;
            s12 += s20 * 136657;
            s13 -= s20 * 683901;

            s7 += s19 * 666643;
            s8 += s19 * 470296;
            s9 += s19 * 654183;
            s10 -= s19 * 997805;
            s11 += s19 * 136657;
            s12 -= s19 * 683901;

            s6 += s18 * 666643;
            s7 += s18 * 470296;
            s8 += s18 * 654183;
            s9 -= s18 * 997805;
            s10 += s18 * 136657;
            s11 -= s18 * 683901;

            var carry6 = (s6 + (1 << 20)) >> 21;
            s7 += carry6;
            s6 -= carry6 << 21;
            var carry8 = (s8 + (1 << 20)) >> 21;
            s9 += carry8;
            s8 -= carry8 << 21;
            var carry10 = (s10 + (1 << 20)) >> 21;
            s11 += carry10;
            s10 -= carry10 << 21;
            var carry12 = (s12 + (1 << 20)) >> 21;
            s13 += carry12;
            s12 -= carry12 << 21;
            var carry14 = (s14 + (1 << 20)) >> 21;
            s15 += carry14;
            s14 -= carry14 << 21;
            var carry16 = (s16 + (1 << 20)) >> 21;
            s17 += carry16;
            s16 -= carry16 << 21;

            var carry7 = (s7 + (1 << 20)) >> 21;
            s8 += carry7;
            s7 -= carry7 << 21;
            var carry9 = (s9 + (1 << 20)) >> 21;
            s10 += carry9;
            s9 -= carry9 << 21;
            var carry11 = (s11 + (1 << 20)) >> 21;
            s12 += carry11;
            s11 -= carry11 << 21;
            var carry13 = (s13 + (1 << 20)) >> 21;
            s14 += carry13;
            s13 -= carry13 << 21;
            var carry15 = (s15 + (1 << 20)) >> 21;
            s16 += carry15;
            s15 -= carry15 << 21;

            s5 += s17 * 666643;
            s6 += s17 * 470296;
            s7 += s17 * 654183;
            s8 -= s17 * 997805;
            s9 += s17 * 136657;
            s10 -= s17 * 683901;

            s4 += s16 * 666643;
            s5 += s16 * 470296;
            s6 += s16 * 654183;
            s7 -= s16 * 997805;
            s8 += s16 * 136657;
            s9 -= s16 * 683901;

            s3 += s15 * 666643;
            s4 += s15 * 470296;
            s5 += s15 * 654183;
            s6 -= s15 * 997805;
            s7 += s15 * 136657;
            s8 -= s15 * 683901;

            s2 += s14 * 666643;
            s3 += s14 * 470296;
            s4 += s14 * 654183;
            s5 -= s14 * 997805;
            s6 += s14 * 136657;
            s7 -= s14 * 683901;

            s1 += s13 * 666643;
            s2 += s13 * 470296;
            s3 += s13 * 654183;
            s4 -= s13 * 997805;
            s5 += s13 * 136657;
            s6 -= s13 * 683901;

            s0 += s12 * 666643;
            s1 += s12 * 470296;
            s2 += s12 * 654183;
            s3 -= s12 * 997805;
            s4 += s12 * 136657;
            s5 -= s12 * 683901;
            s12 = 0;

            var carry0 = (s0 + (1 << 20)) >> 21;
            s1 += carry0;
            s0 -= carry0 << 21;
            var carry2 = (s2 + (1 << 20)) >> 21;
            s3 += carry2;
            s2 -= carry2 << 21;
            var carry4 = (s4 + (1 << 20)) >> 21;
            s5 += carry4;
            s4 -= carry4 << 21;
            carry6 = (s6 + (1 << 20)) >> 21;
            s7 += carry6;
            s6 -= carry6 << 21;
            carry8 = (s8 + (1 << 20)) >> 21;
            s9 += carry8;
            s8 -= carry8 << 21;
            carry10 = (s10 + (1 << 20)) >> 21;
            s11 += carry10;
            s10 -= carry10 << 21;

            var carry1 = (s1 + (1 << 20)) >> 21;
            s2 += carry1;
            s1 -= carry1 << 21;
            var carry3 = (s3 + (1 << 20)) >> 21;
            s4 += carry3;
            s3 -= carry3 << 21;
            var carry5 = (s5 + (1 << 20)) >> 21;
            s6 += carry5;
            s5 -= carry5 << 21;
            carry7 = (s7 + (1 << 20)) >> 21;
            s8 += carry7;
            s7 -= carry7 << 21;
            carry9 = (s9 + (1 << 20)) >> 21;
            s10 += carry9;
            s9 -= carry9 << 21;
            carry11 = (s11 + (1 << 20)) >> 21;
            s12 += carry11;
            s11 -= carry11 << 21;

            s0 += s12 * 666643;
            s1 += s12 * 470296;
            s2 += s12 * 654183;
            s3 -= s12 * 997805;
            s4 += s12 * 136657;
            s5 -= s12 * 683901;
            s12 = 0;

            carry0 = s0 >> 21;
            s1 += carry0;
            s0 -= carry0 << 21;
            carry1 = s1 >> 21;
            s2 += carry1;
            s1 -= carry1 << 21;
            carry2 = s2 >> 21;
            s3 += carry2;
            s2 -= carry2 << 21;
            carry3 = s3 >> 21;
            s4 += carry3;
            s3 -= carry3 << 21;
            carry4 = s4 >> 21;
            s5 += carry4;
            s4 -= carry4 << 21;
            carry5 = s5 >> 21;
            s6 += carry5;
            s5 -= carry5 << 21;
            carry6 = s6 >> 21;
            s7 += carry6;
            s6 -= carry6 << 21;
            carry7 = s7 >> 21;
            s8 += carry7;
            s7 -= carry7 << 21;
            carry8 = s8 >> 21;
            s9 += carry8;
            s8 -= carry8 << 21;
            carry9 = s9 >> 21;
            s10 += carry9;
            s9 -= carry9 << 21;
            carry10 = s10 >> 21;
            s11 += carry10;
            s10 -= carry10 << 21;
            carry11 = s11 >> 21;
            s12 += carry11;
            s11 -= carry11 << 21;

            s0 += s12 * 666643;
            s1 += s12 * 470296;
            s2 += s12 * 654183;
            s3 -= s12 * 997805;
            s4 += s12 * 136657;
            s5 -= s12 * 683901;

            carry0 = s0 >> 21;
            s1 += carry0;
            s0 -= carry0 << 21;
            carry1 = s1 >> 21;
            s2 += carry1;
            s1 -= carry1 << 21;
            carry2 = s2 >> 21;
            s3 += carry2;
            s2 -= carry2 << 21;
            carry3 = s3 >> 21;
            s4 += carry3;
            s3 -= carry3 << 21;
            carry4 = s4 >> 21;
            s5 += carry4;
            s4 -= carry4 << 21;
            carry5 = s5 >> 21;
            s6 += carry5;
            s5 -= carry5 << 21;
            carry6 = s6 >> 21;
            s7 += carry6;
            s6 -= carry6 << 21;
            carry7 = s7 >> 21;
            s8 += carry7;
            s7 -= carry7 << 21;
            carry8 = s8 >> 21;
            s9 += carry8;
            s8 -= carry8 << 21;
            carry9 = s9 >> 21;
            s10 += carry9;
            s9 -= carry9 << 21;
            carry10 = s10 >> 21;
            s11 += carry10;
            s10 -= carry10 << 21;

            unchecked
            {
                s[0] = (byte)(s0);
                s[1] = (byte)(s0 >> 8);
                s[2] = (byte)((s0 >> 16) | (s1 << 5));
                s[3] = (byte)(s1 >> 3);
                s[4] = (byte)(s1 >> 11);
                s[5] = (byte)((s1 >> 19) | (s2 << 2));
                s[6] = (byte)(s2 >> 6);
                s[7] = (byte)((s2 >> 14) | (s3 << 7));
                s[8] = (byte)(s3 >> 1);
                s[9] = (byte)(s3 >> 9);
                s[10] = (byte)((s3 >> 17) | (s4 << 4));
                s[11] = (byte)(s4 >> 4);
                s[12] = (byte)(s4 >> 12);
                s[13] = (byte)((s4 >> 20) | (s5 << 1));
                s[14] = (byte)(s5 >> 7);
                s[15] = (byte)((s5 >> 15) | (s6 << 6));
                s[16] = (byte)(s6 >> 2);
                s[17] = (byte)(s6 >> 10);
                s[18] = (byte)((s6 >> 18) | (s7 << 3));
                s[19] = (byte)(s7 >> 5);
                s[20] = (byte)(s7 >> 13);
                s[21] = (byte)(s8);
                s[22] = (byte)(s8 >> 8);
                s[23] = (byte)((s8 >> 16) | (s9 << 5));
                s[24] = (byte)(s9 >> 3);
                s[25] = (byte)(s9 >> 11);
                s[26] = (byte)((s9 >> 19) | (s10 << 2));
                s[27] = (byte)(s10 >> 6);
                s[28] = (byte)((s10 >> 14) | (s11 << 7));
                s[29] = (byte)(s11 >> 1);
                s[30] = (byte)(s11 >> 9);
                s[31] = (byte)(s11 >> 17);
            }
        }
    }
}
'''
'''--- Src/NearClientUnity/Utilities/Ed25519/Internal/Sha512Internal.cs ---
﻿namespace NearClientUnity.Utilities.Ed25519.Internal
{
    internal static class Sha512Internal
    {
        private static readonly ulong[] K =
        {
            0x428a2f98d728ae22, 0x7137449123ef65cd, 0xb5c0fbcfec4d3b2f, 0xe9b5dba58189dbbc,
            0x3956c25bf348b538, 0x59f111f1b605d019, 0x923f82a4af194f9b, 0xab1c5ed5da6d8118,
            0xd807aa98a3030242, 0x12835b0145706fbe, 0x243185be4ee4b28c, 0x550c7dc3d5ffb4e2,
            0x72be5d74f27b896f, 0x80deb1fe3b1696b1, 0x9bdc06a725c71235, 0xc19bf174cf692694,
            0xe49b69c19ef14ad2, 0xefbe4786384f25e3, 0x0fc19dc68b8cd5b5, 0x240ca1cc77ac9c65,
            0x2de92c6f592b0275, 0x4a7484aa6ea6e483, 0x5cb0a9dcbd41fbd4, 0x76f988da831153b5,
            0x983e5152ee66dfab, 0xa831c66d2db43210, 0xb00327c898fb213f, 0xbf597fc7beef0ee4,
            0xc6e00bf33da88fc2, 0xd5a79147930aa725, 0x06ca6351e003826f, 0x142929670a0e6e70,
            0x27b70a8546d22ffc, 0x2e1b21385c26c926, 0x4d2c6dfc5ac42aed, 0x53380d139d95b3df,
            0x650a73548baf63de, 0x766a0abb3c77b2a8, 0x81c2c92e47edaee6, 0x92722c851482353b,
            0xa2bfe8a14cf10364, 0xa81a664bbc423001, 0xc24b8b70d0f89791, 0xc76c51a30654be30,
            0xd192e819d6ef5218, 0xd69906245565a910, 0xf40e35855771202a, 0x106aa07032bbd1b8,
            0x19a4c116b8d2d0c8, 0x1e376c085141ab53, 0x2748774cdf8eeb99, 0x34b0bcb5e19b48a8,
            0x391c0cb3c5c95a63, 0x4ed8aa4ae3418acb, 0x5b9cca4f7763e373, 0x682e6ff3d6b2b8a3,
            0x748f82ee5defb2fc, 0x78a5636f43172f60, 0x84c87814a1f0ab72, 0x8cc702081a6439ec,
            0x90befffa23631e28, 0xa4506cebde82bde9, 0xbef9a3f7b2c67915, 0xc67178f2e372532b,
            0xca273eceea26619c, 0xd186b8c721c0c207, 0xeada7dd6cde0eb1e, 0xf57d4f7fee6ed178,
            0x06f067aa72176fba, 0x0a637dc5a2c898a6, 0x113f9804bef90dae, 0x1b710b35131c471b,
            0x28db77f523047d84, 0x32caab7b40c72493, 0x3c9ebe0a15c9bebc, 0x431d67c49c100d4c,
            0x4cc5d4becb3e42b6, 0x597f299cfc657e2a, 0x5fcb6fab3ad6faec, 0x6c44198c4a475817
        };

        internal static void Core(out Array8<ulong> outputState, ref Array8<ulong> inputState, ref Array16<ulong> input)
        {
            unchecked
            {
                var a = inputState.X0;
                var b = inputState.X1;
                var c = inputState.X2;
                var d = inputState.X3;
                var e = inputState.X4;
                var f = inputState.X5;
                var g = inputState.X6;
                var h = inputState.X7;

                var w0 = input.X0;
                var w1 = input.X1;
                var w2 = input.X2;
                var w3 = input.X3;
                var w4 = input.X4;
                var w5 = input.X5;
                var w6 = input.X6;
                var w7 = input.X7;
                var w8 = input.X8;
                var w9 = input.X9;
                var w10 = input.X10;
                var w11 = input.X11;
                var w12 = input.X12;
                var w13 = input.X13;
                var w14 = input.X14;
                var w15 = input.X15;

                var t = 0;
                while (true)
                {
                    ulong t1, t2;

                    {
                        //0
                        t1 = h +
                             ((e >> 14) ^ (e << (64 - 14)) ^ (e >> 18) ^ (e << (64 - 18)) ^ (e >> 41) ^
                              (e << (64 - 41))) +
                             //Sigma1(e)
                             ((e & f) ^ (~e & g)) + //Ch(e,f,g)
                             K[t] + w0;
                        t2 = ((a >> 28) ^ (a << (64 - 28)) ^ (a >> 34) ^ (a << (64 - 34)) ^ (a >> 39) ^
                              (a << (64 - 39))) +
                             //Sigma0(a)
                             ((a & b) ^ (a & c) ^ (b & c)); //Maj(a,b,c)
                        h = g;
                        g = f;
                        f = e;
                        e = d + t1;
                        d = c;
                        c = b;
                        b = a;
                        a = t1 + t2;
                        t++;
                    }
                    {
                        //1
                        t1 = h +
                             ((e >> 14) ^ (e << (64 - 14)) ^ (e >> 18) ^ (e << (64 - 18)) ^ (e >> 41) ^
                              (e << (64 - 41))) +
                             //Sigma1(e)
                             ((e & f) ^ (~e & g)) + //Ch(e,f,g)
                             K[t] + w1;
                        t2 = ((a >> 28) ^ (a << (64 - 28)) ^ (a >> 34) ^ (a << (64 - 34)) ^ (a >> 39) ^
                              (a << (64 - 39))) +
                             //Sigma0(a)
                             ((a & b) ^ (a & c) ^ (b & c)); //Maj(a,b,c)
                        h = g;
                        g = f;
                        f = e;
                        e = d + t1;
                        d = c;
                        c = b;
                        b = a;
                        a = t1 + t2;
                        t++;
                    }
                    {
                        //2
                        t1 = h +
                             ((e >> 14) ^ (e << (64 - 14)) ^ (e >> 18) ^ (e << (64 - 18)) ^ (e >> 41) ^
                              (e << (64 - 41))) +
                             //Sigma1(e)
                             ((e & f) ^ (~e & g)) + //Ch(e,f,g)
                             K[t] + w2;
                        t2 = ((a >> 28) ^ (a << (64 - 28)) ^ (a >> 34) ^ (a << (64 - 34)) ^ (a >> 39) ^
                              (a << (64 - 39))) +
                             //Sigma0(a)
                             ((a & b) ^ (a & c) ^ (b & c)); //Maj(a,b,c)
                        h = g;
                        g = f;
                        f = e;
                        e = d + t1;
                        d = c;
                        c = b;
                        b = a;
                        a = t1 + t2;
                        t++;
                    }
                    {
                        //3
                        t1 = h +
                             ((e >> 14) ^ (e << (64 - 14)) ^ (e >> 18) ^ (e << (64 - 18)) ^ (e >> 41) ^
                              (e << (64 - 41))) +
                             //Sigma1(e)
                             ((e & f) ^ (~e & g)) + //Ch(e,f,g)
                             K[t] + w3;
                        t2 = ((a >> 28) ^ (a << (64 - 28)) ^ (a >> 34) ^ (a << (64 - 34)) ^ (a >> 39) ^
                              (a << (64 - 39))) +
                             //Sigma0(a)
                             ((a & b) ^ (a & c) ^ (b & c)); //Maj(a,b,c)
                        h = g;
                        g = f;
                        f = e;
                        e = d + t1;
                        d = c;
                        c = b;
                        b = a;
                        a = t1 + t2;
                        t++;
                    }
                    {
                        //4
                        t1 = h +
                             ((e >> 14) ^ (e << (64 - 14)) ^ (e >> 18) ^ (e << (64 - 18)) ^ (e >> 41) ^
                              (e << (64 - 41))) +
                             //Sigma1(e)
                             ((e & f) ^ (~e & g)) + //Ch(e,f,g)
                             K[t] + w4;
                        t2 = ((a >> 28) ^ (a << (64 - 28)) ^ (a >> 34) ^ (a << (64 - 34)) ^ (a >> 39) ^
                              (a << (64 - 39))) +
                             //Sigma0(a)
                             ((a & b) ^ (a & c) ^ (b & c)); //Maj(a,b,c)
                        h = g;
                        g = f;
                        f = e;
                        e = d + t1;
                        d = c;
                        c = b;
                        b = a;
                        a = t1 + t2;
                        t++;
                    }
                    {
                        //5
                        t1 = h +
                             ((e >> 14) ^ (e << (64 - 14)) ^ (e >> 18) ^ (e << (64 - 18)) ^ (e >> 41) ^
                              (e << (64 - 41))) +
                             //Sigma1(e)
                             ((e & f) ^ (~e & g)) + //Ch(e,f,g)
                             K[t] + w5;
                        t2 = ((a >> 28) ^ (a << (64 - 28)) ^ (a >> 34) ^ (a << (64 - 34)) ^ (a >> 39) ^
                              (a << (64 - 39))) +
                             //Sigma0(a)
                             ((a & b) ^ (a & c) ^ (b & c)); //Maj(a,b,c)
                        h = g;
                        g = f;
                        f = e;
                        e = d + t1;
                        d = c;
                        c = b;
                        b = a;
                        a = t1 + t2;
                        t++;
                    }
                    {
                        //6
                        t1 = h +
                             ((e >> 14) ^ (e << (64 - 14)) ^ (e >> 18) ^ (e << (64 - 18)) ^ (e >> 41) ^
                              (e << (64 - 41))) +
                             //Sigma1(e)
                             ((e & f) ^ (~e & g)) + //Ch(e,f,g)
                             K[t] + w6;
                        t2 = ((a >> 28) ^ (a << (64 - 28)) ^ (a >> 34) ^ (a << (64 - 34)) ^ (a >> 39) ^
                              (a << (64 - 39))) +
                             //Sigma0(a)
                             ((a & b) ^ (a & c) ^ (b & c)); //Maj(a,b,c)
                        h = g;
                        g = f;
                        f = e;
                        e = d + t1;
                        d = c;
                        c = b;
                        b = a;
                        a = t1 + t2;
                        t++;
                    }
                    {
                        //7
                        t1 = h +
                             ((e >> 14) ^ (e << (64 - 14)) ^ (e >> 18) ^ (e << (64 - 18)) ^ (e >> 41) ^
                              (e << (64 - 41))) +
                             //Sigma1(e)
                             ((e & f) ^ (~e & g)) + //Ch(e,f,g)
                             K[t] + w7;
                        t2 = ((a >> 28) ^ (a << (64 - 28)) ^ (a >> 34) ^ (a << (64 - 34)) ^ (a >> 39) ^
                              (a << (64 - 39))) +
                             //Sigma0(a)
                             ((a & b) ^ (a & c) ^ (b & c)); //Maj(a,b,c)
                        h = g;
                        g = f;
                        f = e;
                        e = d + t1;
                        d = c;
                        c = b;
                        b = a;
                        a = t1 + t2;
                        t++;
                    }
                    {
                        //8
                        t1 = h +
                             ((e >> 14) ^ (e << (64 - 14)) ^ (e >> 18) ^ (e << (64 - 18)) ^ (e >> 41) ^
                              (e << (64 - 41))) +
                             //Sigma1(e)
                             ((e & f) ^ (~e & g)) + //Ch(e,f,g)
                             K[t] + w8;
                        t2 = ((a >> 28) ^ (a << (64 - 28)) ^ (a >> 34) ^ (a << (64 - 34)) ^ (a >> 39) ^
                              (a << (64 - 39))) +
                             //Sigma0(a)
                             ((a & b) ^ (a & c) ^ (b & c)); //Maj(a,b,c)
                        h = g;
                        g = f;
                        f = e;
                        e = d + t1;
                        d = c;
                        c = b;
                        b = a;
                        a = t1 + t2;
                        t++;
                    }
                    {
                        //9
                        t1 = h +
                             ((e >> 14) ^ (e << (64 - 14)) ^ (e >> 18) ^ (e << (64 - 18)) ^ (e >> 41) ^
                              (e << (64 - 41))) +
                             //Sigma1(e)
                             ((e & f) ^ (~e & g)) + //Ch(e,f,g)
                             K[t] + w9;
                        t2 = ((a >> 28) ^ (a << (64 - 28)) ^ (a >> 34) ^ (a << (64 - 34)) ^ (a >> 39) ^
                              (a << (64 - 39))) +
                             //Sigma0(a)
                             ((a & b) ^ (a & c) ^ (b & c)); //Maj(a,b,c)
                        h = g;
                        g = f;
                        f = e;
                        e = d + t1;
                        d = c;
                        c = b;
                        b = a;
                        a = t1 + t2;
                        t++;
                    }
                    {
                        //10
                        t1 = h +
                             ((e >> 14) ^ (e << (64 - 14)) ^ (e >> 18) ^ (e << (64 - 18)) ^ (e >> 41) ^
                              (e << (64 - 41))) +
                             //Sigma1(e)
                             ((e & f) ^ (~e & g)) + //Ch(e,f,g)
                             K[t] + w10;
                        t2 = ((a >> 28) ^ (a << (64 - 28)) ^ (a >> 34) ^ (a << (64 - 34)) ^ (a >> 39) ^
                              (a << (64 - 39))) +
                             //Sigma0(a)
                             ((a & b) ^ (a & c) ^ (b & c)); //Maj(a,b,c)
                        h = g;
                        g = f;
                        f = e;
                        e = d + t1;
                        d = c;
                        c = b;
                        b = a;
                        a = t1 + t2;
                        t++;
                    }
                    {
                        //11
                        t1 = h +
                             ((e >> 14) ^ (e << (64 - 14)) ^ (e >> 18) ^ (e << (64 - 18)) ^ (e >> 41) ^
                              (e << (64 - 41))) +
                             //Sigma1(e)
                             ((e & f) ^ (~e & g)) + //Ch(e,f,g)
                             K[t] + w11;
                        t2 = ((a >> 28) ^ (a << (64 - 28)) ^ (a >> 34) ^ (a << (64 - 34)) ^ (a >> 39) ^
                              (a << (64 - 39))) +
                             //Sigma0(a)
                             ((a & b) ^ (a & c) ^ (b & c)); //Maj(a,b,c)
                        h = g;
                        g = f;
                        f = e;
                        e = d + t1;
                        d = c;
                        c = b;
                        b = a;
                        a = t1 + t2;
                        t++;
                    }
                    {
                        //12
                        t1 = h +
                             ((e >> 14) ^ (e << (64 - 14)) ^ (e >> 18) ^ (e << (64 - 18)) ^ (e >> 41) ^
                              (e << (64 - 41))) +
                             //Sigma1(e)
                             ((e & f) ^ (~e & g)) + //Ch(e,f,g)
                             K[t] + w12;
                        t2 = ((a >> 28) ^ (a << (64 - 28)) ^ (a >> 34) ^ (a << (64 - 34)) ^ (a >> 39) ^
                              (a << (64 - 39))) +
                             //Sigma0(a)
                             ((a & b) ^ (a & c) ^ (b & c)); //Maj(a,b,c)
                        h = g;
                        g = f;
                        f = e;
                        e = d + t1;
                        d = c;
                        c = b;
                        b = a;
                        a = t1 + t2;
                        t++;
                    }
                    {
                        //13
                        t1 = h +
                             ((e >> 14) ^ (e << (64 - 14)) ^ (e >> 18) ^ (e << (64 - 18)) ^ (e >> 41) ^
                              (e << (64 - 41))) +
                             //Sigma1(e)
                             ((e & f) ^ (~e & g)) + //Ch(e,f,g)
                             K[t] + w13;
                        t2 = ((a >> 28) ^ (a << (64 - 28)) ^ (a >> 34) ^ (a << (64 - 34)) ^ (a >> 39) ^
                              (a << (64 - 39))) +
                             //Sigma0(a)
                             ((a & b) ^ (a & c) ^ (b & c)); //Maj(a,b,c)
                        h = g;
                        g = f;
                        f = e;
                        e = d + t1;
                        d = c;
                        c = b;
                        b = a;
                        a = t1 + t2;
                        t++;
                    }
                    {
                        //14
                        t1 = h +
                             ((e >> 14) ^ (e << (64 - 14)) ^ (e >> 18) ^ (e << (64 - 18)) ^ (e >> 41) ^
                              (e << (64 - 41))) +
                             //Sigma1(e)
                             ((e & f) ^ (~e & g)) + //Ch(e,f,g)
                             K[t] + w14;
                        t2 = ((a >> 28) ^ (a << (64 - 28)) ^ (a >> 34) ^ (a << (64 - 34)) ^ (a >> 39) ^
                              (a << (64 - 39))) +
                             //Sigma0(a)
                             ((a & b) ^ (a & c) ^ (b & c)); //Maj(a,b,c)
                        h = g;
                        g = f;
                        f = e;
                        e = d + t1;
                        d = c;
                        c = b;
                        b = a;
                        a = t1 + t2;
                        t++;
                    }
                    {
                        //15
                        t1 = h +
                             ((e >> 14) ^ (e << (64 - 14)) ^ (e >> 18) ^ (e << (64 - 18)) ^ (e >> 41) ^
                              (e << (64 - 41))) +
                             //Sigma1(e)
                             ((e & f) ^ (~e & g)) + //Ch(e,f,g)
                             K[t] + w15;
                        t2 = ((a >> 28) ^ (a << (64 - 28)) ^ (a >> 34) ^ (a << (64 - 34)) ^ (a >> 39) ^
                              (a << (64 - 39))) +
                             //Sigma0(a)
                             ((a & b) ^ (a & c) ^ (b & c)); //Maj(a,b,c)
                        h = g;
                        g = f;
                        f = e;
                        e = d + t1;
                        d = c;
                        c = b;
                        b = a;
                        a = t1 + t2;
                        t++;
                    }
                    if (t == 80)
                        break;

                    w0 += ((w14 >> 19) ^ (w14 << (64 - 19)) ^ (w14 >> 61) ^ (w14 << (64 - 61)) ^ (w14 >> 6)) +
                          w9 +
                          ((w1 >> 1) ^ (w1 << (64 - 1)) ^ (w1 >> 8) ^ (w1 << (64 - 8)) ^ (w1 >> 7));
                    w1 += ((w15 >> 19) ^ (w15 << (64 - 19)) ^ (w15 >> 61) ^ (w15 << (64 - 61)) ^ (w15 >> 6)) +
                          w10 +
                          ((w2 >> 1) ^ (w2 << (64 - 1)) ^ (w2 >> 8) ^ (w2 << (64 - 8)) ^ (w2 >> 7));
                    w2 += ((w0 >> 19) ^ (w0 << (64 - 19)) ^ (w0 >> 61) ^ (w0 << (64 - 61)) ^ (w0 >> 6)) +
                          w11 +
                          ((w3 >> 1) ^ (w3 << (64 - 1)) ^ (w3 >> 8) ^ (w3 << (64 - 8)) ^ (w3 >> 7));
                    w3 += ((w1 >> 19) ^ (w1 << (64 - 19)) ^ (w1 >> 61) ^ (w1 << (64 - 61)) ^ (w1 >> 6)) +
                          w12 +
                          ((w4 >> 1) ^ (w4 << (64 - 1)) ^ (w4 >> 8) ^ (w4 << (64 - 8)) ^ (w4 >> 7));
                    w4 += ((w2 >> 19) ^ (w2 << (64 - 19)) ^ (w2 >> 61) ^ (w2 << (64 - 61)) ^ (w2 >> 6)) +
                          w13 +
                          ((w5 >> 1) ^ (w5 << (64 - 1)) ^ (w5 >> 8) ^ (w5 << (64 - 8)) ^ (w5 >> 7));
                    w5 += ((w3 >> 19) ^ (w3 << (64 - 19)) ^ (w3 >> 61) ^ (w3 << (64 - 61)) ^ (w3 >> 6)) +
                          w14 +
                          ((w6 >> 1) ^ (w6 << (64 - 1)) ^ (w6 >> 8) ^ (w6 << (64 - 8)) ^ (w6 >> 7));
                    w6 += ((w4 >> 19) ^ (w4 << (64 - 19)) ^ (w4 >> 61) ^ (w4 << (64 - 61)) ^ (w4 >> 6)) +
                          w15 +
                          ((w7 >> 1) ^ (w7 << (64 - 1)) ^ (w7 >> 8) ^ (w7 << (64 - 8)) ^ (w7 >> 7));
                    w7 += ((w5 >> 19) ^ (w5 << (64 - 19)) ^ (w5 >> 61) ^ (w5 << (64 - 61)) ^ (w5 >> 6)) +
                          w0 +
                          ((w8 >> 1) ^ (w8 << (64 - 1)) ^ (w8 >> 8) ^ (w8 << (64 - 8)) ^ (w8 >> 7));
                    w8 += ((w6 >> 19) ^ (w6 << (64 - 19)) ^ (w6 >> 61) ^ (w6 << (64 - 61)) ^ (w6 >> 6)) +
                          w1 +
                          ((w9 >> 1) ^ (w9 << (64 - 1)) ^ (w9 >> 8) ^ (w9 << (64 - 8)) ^ (w9 >> 7));
                    w9 += ((w7 >> 19) ^ (w7 << (64 - 19)) ^ (w7 >> 61) ^ (w7 << (64 - 61)) ^ (w7 >> 6)) +
                          w2 +
                          ((w10 >> 1) ^ (w10 << (64 - 1)) ^ (w10 >> 8) ^ (w10 << (64 - 8)) ^ (w10 >> 7));
                    w10 += ((w8 >> 19) ^ (w8 << (64 - 19)) ^ (w8 >> 61) ^ (w8 << (64 - 61)) ^ (w8 >> 6)) +
                           w3 +
                           ((w11 >> 1) ^ (w11 << (64 - 1)) ^ (w11 >> 8) ^ (w11 << (64 - 8)) ^ (w11 >> 7));
                    w11 += ((w9 >> 19) ^ (w9 << (64 - 19)) ^ (w9 >> 61) ^ (w9 << (64 - 61)) ^ (w9 >> 6)) +
                           w4 +
                           ((w12 >> 1) ^ (w12 << (64 - 1)) ^ (w12 >> 8) ^ (w12 << (64 - 8)) ^ (w12 >> 7));
                    w12 += ((w10 >> 19) ^ (w10 << (64 - 19)) ^ (w10 >> 61) ^ (w10 << (64 - 61)) ^ (w10 >> 6)) +
                           w5 +
                           ((w13 >> 1) ^ (w13 << (64 - 1)) ^ (w13 >> 8) ^ (w13 << (64 - 8)) ^ (w13 >> 7));
                    w13 += ((w11 >> 19) ^ (w11 << (64 - 19)) ^ (w11 >> 61) ^ (w11 << (64 - 61)) ^ (w11 >> 6)) +
                           w6 +
                           ((w14 >> 1) ^ (w14 << (64 - 1)) ^ (w14 >> 8) ^ (w14 << (64 - 8)) ^ (w14 >> 7));
                    w14 += ((w12 >> 19) ^ (w12 << (64 - 19)) ^ (w12 >> 61) ^ (w12 << (64 - 61)) ^ (w12 >> 6)) +
                           w7 +
                           ((w15 >> 1) ^ (w15 << (64 - 1)) ^ (w15 >> 8) ^ (w15 << (64 - 8)) ^ (w15 >> 7));
                    w15 += ((w13 >> 19) ^ (w13 << (64 - 19)) ^ (w13 >> 61) ^ (w13 << (64 - 61)) ^ (w13 >> 6)) +
                           w8 +
                           ((w0 >> 1) ^ (w0 << (64 - 1)) ^ (w0 >> 8) ^ (w0 << (64 - 8)) ^ (w0 >> 7));
                }

                outputState.X0 = inputState.X0 + a;
                outputState.X1 = inputState.X1 + b;
                outputState.X2 = inputState.X2 + c;
                outputState.X3 = inputState.X3 + d;
                outputState.X4 = inputState.X4 + e;
                outputState.X5 = inputState.X5 + f;
                outputState.X6 = inputState.X6 + g;
                outputState.X7 = inputState.X7 + h;
            }
        }

        internal static void Sha512Init(out Array8<ulong> state)
        {
            state.X0 = 0x6a09e667f3bcc908;
            state.X1 = 0xbb67ae8584caa73b;
            state.X2 = 0x3c6ef372fe94f82b;
            state.X3 = 0xa54ff53a5f1d36f1;
            state.X4 = 0x510e527fade682d1;
            state.X5 = 0x9b05688c2b3e6c1f;
            state.X6 = 0x1f83d9abfb41bd6b;
            state.X7 = 0x5be0cd19137e2179;
        }
    }
}
'''
'''--- Src/NearClientUnity/Utilities/Ed25519/Sha512.cs ---
﻿using NearClientUnity.Utilities.Ed25519.Internal;
using System;

namespace NearClientUnity.Utilities.Ed25519
{
    public class Sha512
    {
        public const int BlockSize = 128;
        private static readonly byte[] Padding = { 0x80 };
        private readonly byte[] _buffer;
        private Array8<ulong> _state;
        private ulong _totalBytes;

        /// <summary>
        /// Allocation and initialization of the new SHA-512 object.
        /// </summary>
        public Sha512()
        {
            _buffer = new byte[BlockSize];
            Init();
        }

        /// <summary>
        /// Calculates SHA-512 hash value for the given bytes array.
        /// </summary>
        /// <param name="data">
        /// Data bytes array
        /// </param>
        /// <returns>
        /// Hash bytes
        /// </returns>
        public static byte[] Hash(byte[] data)
        {
            return Hash(data, 0, data.Length);
        }

        /// <summary>
        /// Calculates SHA-512 hash value for the given bytes array.
        /// </summary>
        /// <param name="data">
        /// Data bytes array
        /// </param>
        /// <param name="index">
        /// Offset of byte sequence
        /// </param>
        /// <param name="length">
        /// Sequence length
        /// </param>
        /// <returns>
        /// Hash bytes
        /// </returns>
        public static byte[] Hash(byte[] data, int index, int length)
        {
            var hasher = new Sha512();
            hasher.Update(data, index, length);
            return hasher.Finalize();
        }

        /// <summary>
        /// Finalizes SHA-512 hashing
        /// </summary>
        /// <param name="output">
        /// Output buffer
        /// </param>
        public void Finalize(ArraySegment<byte> output)
        {
            Update(Padding, 0, Padding.Length);
            Array16<ulong> block;
            ByteIntegerConverter.Array16LoadBigEndian64(out block, _buffer, 0);
            CryptoBytes.InternalWipe(_buffer, 0, _buffer.Length);
            var bytesInBuffer = (int)_totalBytes & (BlockSize - 1);
            if (bytesInBuffer > BlockSize - 16)
            {
                Sha512Internal.Core(out _state, ref _state, ref block);
                block = default;
            }

            block.X15 = (_totalBytes - 1) * 8;
            Sha512Internal.Core(out _state, ref _state, ref block);

            ByteIntegerConverter.StoreBigEndian64(output.Array, output.Offset + 0, _state.X0);
            ByteIntegerConverter.StoreBigEndian64(output.Array, output.Offset + 8, _state.X1);
            ByteIntegerConverter.StoreBigEndian64(output.Array, output.Offset + 16, _state.X2);
            ByteIntegerConverter.StoreBigEndian64(output.Array, output.Offset + 24, _state.X3);
            ByteIntegerConverter.StoreBigEndian64(output.Array, output.Offset + 32, _state.X4);
            ByteIntegerConverter.StoreBigEndian64(output.Array, output.Offset + 40, _state.X5);
            ByteIntegerConverter.StoreBigEndian64(output.Array, output.Offset + 48, _state.X6);
            ByteIntegerConverter.StoreBigEndian64(output.Array, output.Offset + 56, _state.X7);
            _state = default;
        }

        /// <summary>
        /// Finalizes SHA-512 hashing.
        /// </summary>
        /// <returns>
        /// Hash bytes
        /// </returns>
        public byte[] Finalize()
        {
            var result = new byte[64];
            Finalize(new ArraySegment<byte>(result));
            return result;
        }

        /// <summary>
        /// Performs an initialization of internal SHA-512 state.
        /// </summary>
        public void Init()
        {
            Sha512Internal.Sha512Init(out _state);
            _totalBytes = 0;
        }

        /// <summary>
        /// Updates internal state with data from the provided array segment.
        /// </summary>
        /// <param name="data">
        /// Array segment
        /// </param>
        public void Update(ArraySegment<byte> data)
        {
            Update(data.Array, data.Offset, data.Count);
        }

        /// <summary>
        /// Updates internal state with data from the provided array.
        /// </summary>
        /// <param name="data">
        /// Array of bytes
        /// </param>
        /// <param name="index">
        /// Offset of byte sequence
        /// </param>
        /// <param name="length">
        /// Sequence length
        /// </param>
        public void Update(byte[] data, int index, int length)
        {
            Array16<ulong> block;
            var bytesInBuffer = (int)_totalBytes & (BlockSize - 1);
            _totalBytes += (uint)length;

            if (_totalBytes >= ulong.MaxValue / 8)
                throw new InvalidOperationException("Too much data");
            // Fill existing buffer
            if (bytesInBuffer != 0)
            {
                var toCopy = Math.Min(BlockSize - bytesInBuffer, length);
                Buffer.BlockCopy(data, index, _buffer, bytesInBuffer, toCopy);
                index += toCopy;
                length -= toCopy;
                bytesInBuffer += toCopy;
                if (bytesInBuffer == BlockSize)
                {
                    ByteIntegerConverter.Array16LoadBigEndian64(out block, _buffer, 0);
                    Sha512Internal.Core(out _state, ref _state, ref block);
                    CryptoBytes.InternalWipe(_buffer, 0, _buffer.Length);
                    bytesInBuffer = 0;
                }
            }

            // Hash complete blocks without copying
            while (length >= BlockSize)
            {
                ByteIntegerConverter.Array16LoadBigEndian64(out block, data, index);
                Sha512Internal.Core(out _state, ref _state, ref block);
                index += BlockSize;
                length -= BlockSize;
            }

            // Copy remainder into buffer
            if (length > 0) Buffer.BlockCopy(data, index, _buffer, bytesInBuffer, length);
        }
    }
}
'''
'''--- Src/NearClientUnity/Utilities/INetwork.cs ---
﻿namespace NearClientUnity.Utilities
{
    public interface INetwork
    {
        string ChainId { get; set; }
        string Name { get; set; }

        dynamic DefaultProvider(dynamic providers);
    }
}
'''
'''--- Src/NearClientUnity/Utilities/KeyPair.cs ---
﻿using System;

namespace NearClientUnity.Utilities
{
    public abstract class KeyPair
    {
        public static KeyPair FromRandom(string curve)
        {
            switch (curve.ToUpper())
            {
                case "ED25519":
                    return KeyPairEd25519.FromRandom();

                default:
                    throw new NotSupportedException($"Unknown curve {curve}");
            }
        }

        public static KeyPair FromString(string encodedKey)
        {
            var parts = encodedKey.Split(':');
            switch (parts.Length)
            {
                case 1:
                    {
                        return new KeyPairEd25519(parts[0]);
                    }
                case 2:
                    {
                        switch (parts[0].ToUpper())
                        {
                            case "ED25519":
                                return new KeyPairEd25519(parts[1]);

                            default:
                                throw new NotSupportedException($"Unknown curve {parts[0]}");
                        }
                    }
                default:
                    throw new NotSupportedException("Invalid encoded key format, must be '<curve>:<encoded key>'");
            }
        }

        public abstract PublicKey GetPublicKey();

        public abstract Signature Sign(byte[] message);

        public abstract bool Verify(byte[] message, byte[] signature);
    }
}
'''
'''--- Src/NearClientUnity/Utilities/KeyPairEd25519.cs ---
﻿using System.Security.Cryptography;

namespace NearClientUnity.Utilities
{
    public class KeyPairEd25519 : KeyPair
    {
        private readonly byte[] _expandedSecretKey;
        private readonly PublicKey _publicKey;
        private readonly string _secretKey;

        public KeyPairEd25519(string secretKey)
        {
            var publicKeyFromSeed = Ed25519.Ed25519.PublicKeyFromSeed(Base58.Decode(secretKey));
            var publicKeyFromSeed32 = new ByteArray32 { Buffer = publicKeyFromSeed };

            _publicKey = new PublicKey(KeyType.Ed25519, publicKeyFromSeed32);
            _secretKey = secretKey;
            _expandedSecretKey = Ed25519.Ed25519.ExpandedPrivateKeyFromSeed(Base58.Decode(secretKey));
        }

        public static KeyPairEd25519 FromRandom()
        {
            var randomSecretKey = new byte[32];
            using (var rng = new RNGCryptoServiceProvider())
            {
                rng.GetBytes(randomSecretKey);
            }

            return new KeyPairEd25519(Base58.Encode(randomSecretKey));
        }

        public override PublicKey GetPublicKey()
        {
            return _publicKey;
        }

        public string GetSecretKey()
        {
            return _secretKey;
        }

        public override Signature Sign(byte[] message)
        {
            var signature = Ed25519.Ed25519.Sign(message, _expandedSecretKey);
            var sign = new Signature { SignatureBytes = signature, PublicKey = this._publicKey };
            return sign;
        }

        public override string ToString()
        {
            return $"ed25519:{_secretKey}";
        }

        public override bool Verify(byte[] message, byte[] signature)
        {
            return Ed25519.Ed25519.Verify(signature, message, _publicKey.Data.Buffer);
        }
    }
}
'''
'''--- Src/NearClientUnity/Utilities/KeyType.cs ---
﻿namespace NearClientUnity.Utilities
{
    public enum KeyType : byte
    {
        Ed25519 = 0
    }
}
'''
'''--- Src/NearClientUnity/Utilities/KeyTypeConverter.cs ---
﻿using System;

namespace NearClientUnity.Utilities
{
    public static class KeyTypeConverter
    {
        public static string KeyTypeToString(KeyType keyType)
        {
            switch (keyType)
            {
                case KeyType.Ed25519:
                    {
                        return "ed25519";
                    }
                default:
                    throw new NotSupportedException($"Unknown key type {keyType}");
            }
        }

        public static KeyType StringToKeyType(string keyType)
        {
            switch (keyType.ToLower())
            {
                case "ed25519":
                    {
                        return KeyType.Ed25519;
                    }
                default:
                    throw new NotSupportedException($"Unknown key type {keyType}");
            }
        }
    }
}
'''
'''--- Src/NearClientUnity/Utilities/NearBinaryReader.cs ---
﻿using System;
using System.IO;
using System.Text;

namespace NearClientUnity.Utilities
{
    public class NearBinaryReader : IDisposable
    {
        private const int MaxCharBytesSize = 128;

        private readonly bool _leaveOpen;
        private readonly int _maxCharsSize;
        private byte[] _buffer;
        private char[] _charBuffer;
        private byte[] _charBytes;
        private Decoder _decoder;
        private Stream _stream;

        // From MaxCharBytesSize & Encoding
        public NearBinaryReader(Stream input) : this(input, new UTF8Encoding())
        {
        }

        public NearBinaryReader(Stream input, bool leaveOpen) : this(input, new UTF8Encoding(), leaveOpen)
        {
        }

        public NearBinaryReader(Stream input, Encoding encoding, bool leaveOpen = false)
        {
            _stream = input;
            _decoder = encoding.GetDecoder();
            _maxCharsSize = encoding.GetMaxCharCount(MaxCharBytesSize);
            var minBufferSize = encoding.GetMaxByteCount(1); // max bytes per one char

            if (minBufferSize < 16)
                minBufferSize = 16;

            _buffer = new byte[minBufferSize];
            _leaveOpen = leaveOpen;
        }

        public virtual Stream BaseStream => _stream;

        public virtual void Close()
        {
            Dispose(true);
        }

        public void Dispose()
        {
            Dispose(true);
        }

        public virtual byte ReadByte()
        {
            var b = _stream.ReadByte();
            return (byte)b;
        }

        public virtual byte[] ReadBytes(int count)
        {
            if (count < 0) throw new ArgumentOutOfRangeException("count", "ArgumentOutOfRange_NeedNonNegNum");

            if (count == 0)
            {
                var emptyArray = new byte[0];
                return emptyArray;
            }

            var result = new byte[count];

            var numRead = 0;
            do
            {
                var n = _stream.Read(result, numRead, count);
                if (n == 0)
                    break;
                numRead += n;
                count -= n;
            } while (count > 0);

            return result;
        }

        public virtual string ReadString()
        {
            var currentPosition = 0;

            var stringLength = (int)ReadUInt();

            if (stringLength == 0)
            {
                return string.Empty;
            }

            if (_charBytes == null)
            {
                _charBytes = new byte[MaxCharBytesSize];
            }

            if (_charBuffer == null)
            {
                _charBuffer = new char[_maxCharsSize];
            }

            StringBuilder sb = null;
            do
            {
                var readLength = ((stringLength - currentPosition) > MaxCharBytesSize)
                    ? MaxCharBytesSize
                    : (stringLength - currentPosition);

                var n = _stream.Read(_charBytes, 0, readLength);

                var charsRead = _decoder.GetChars(_charBytes, 0, n, _charBuffer, 0);

                if (currentPosition == 0 && n == stringLength)
                    return new string(_charBuffer, 0, charsRead);

                if (sb == null)
                    sb = StringBuilderCache.Acquire(stringLength); // Actual string length in chars may be smaller.
                sb.Append(_charBuffer, 0, charsRead);
                currentPosition += n;
            } while (currentPosition < stringLength);

            return StringBuilderCache.GetStringAndRelease(sb);
        }

        public virtual uint ReadUInt()
        {
            FillBuffer(4);
            return (uint)(_buffer[0] | _buffer[1] << 8 | _buffer[2] << 16 | _buffer[3] << 24);
        }

        public virtual UInt128 ReadUInt128()
        {
            FillBuffer(16);

            var result = new UInt128(_buffer);

            return result;
        }

        public virtual ulong ReadULong()
        {
            FillBuffer(8);
            var lo = (uint)(_buffer[0] | _buffer[1] << 8 |
                             _buffer[2] << 16 | _buffer[3] << 24);
            var hi = (uint)(_buffer[4] | _buffer[5] << 8 |
                             _buffer[6] << 16 | _buffer[7] << 24);
            return ((ulong)hi) << 32 | lo;
        }

        protected virtual void Dispose(bool disposing)
        {
            if (disposing)
            {
                var copyOfStream = _stream;
                _stream = null;
                if (copyOfStream != null && !_leaveOpen)
                    copyOfStream.Close();
            }

            _stream = null;
            _buffer = null;
            _decoder = null;
            _charBytes = null;
            _charBuffer = null;
        }

        protected virtual void FillBuffer(int numBytes)
        {
            if (_buffer != null && (numBytes < 0 || numBytes > _buffer.Length))
            {
                throw new ArgumentOutOfRangeException("numBytes", "ArgumentOutOfRange_BinaryReaderFillBuffer");
            }

            var bytesRead = 0;
            int n;

            if (numBytes == 1)
            {
                n = _stream.ReadByte();
                _buffer[0] = (byte)n;
                return;
            }

            do
            {
                n = _stream.Read(_buffer, bytesRead, numBytes - bytesRead);
                bytesRead += n;
            } while (bytesRead < numBytes);
        }
    }

    internal static class StringBuilderCache
    {
        private const int MaxBuilderSize = 256;
        [ThreadStatic] private static StringBuilder _cachedInstance;

        public static StringBuilder Acquire(int capacity = 16)
        {
            if (capacity > MaxBuilderSize) return new StringBuilder(capacity);
            var cachedInstance = _cachedInstance;
            if (cachedInstance == null || capacity > cachedInstance.Capacity) return new StringBuilder(capacity);
            _cachedInstance = null;
            cachedInstance.Clear();
            return cachedInstance;
        }

        public static string GetStringAndRelease(StringBuilder sb)
        {
            var result = sb.ToString();
            Release(sb);
            return result;
        }

        private static void Release(StringBuilder sb)
        {
            if (sb.Capacity <= MaxBuilderSize)
            {
                _cachedInstance = sb;
            }
        }
    }
}
'''
'''--- Src/NearClientUnity/Utilities/NearBinaryWriter.cs ---
﻿using System;
using System.IO;
using System.Text;

namespace NearClientUnity.Utilities
{
    public class NearBinaryWriter : IDisposable
    {
        public static readonly NearBinaryWriter Null = new NearBinaryWriter();

        protected Stream OutStream;
        private const int LargeByteBufferSize = 256;
        private byte[] _buffer;
        private readonly Encoder _encoder;
        private readonly Encoding _encoding;
        private byte[] _largeByteBuffer;
        private readonly bool _leaveOpen;
        private int _maxChars;        

        public NearBinaryWriter(Stream output) : this(output, new UTF8Encoding(false, true))
        {
        }

        public NearBinaryWriter(Stream output, Encoding encoding, bool leaveOpen = false)
        {
            if (output == null)
                throw new ArgumentNullException(nameof(output));
            if (!output.CanWrite)
                throw new ArgumentException("Argument_StreamNotWritable");

            OutStream = output;
            _buffer = new byte[16];
            _encoding = encoding ?? throw new ArgumentNullException(nameof(encoding));
            _encoder = _encoding.GetEncoder();
            _leaveOpen = leaveOpen;
        }

        protected NearBinaryWriter()
        {
            OutStream = Stream.Null;
            _buffer = new byte[16];
            _encoding = new UTF8Encoding(false, true);
            _encoder = _encoding.GetEncoder();
        }

        public virtual Stream BaseStream
        {
            get
            {
                Flush();
                return OutStream;
            }
        }

        public virtual void Close()
        {
            Dispose(true);
        }

        public void Dispose()
        {
            Dispose(true);
        }

        public virtual void Flush()
        {
            OutStream.Flush();
        }

        public virtual long Seek(int offset, SeekOrigin origin)
        {
            return OutStream.Seek(offset, origin);
        }

        public virtual void Write(byte value)
        {
            OutStream.WriteByte(value);
        }

        public virtual void Write(byte[] buffer)
        {
            if (buffer == null)
                throw new ArgumentNullException("buffer");

            OutStream.Write(buffer, 0, buffer.Length);
        }

        public virtual void Write(uint value)
        {
            _buffer[0] = (byte)value;
            _buffer[1] = (byte)(value >> 8);
            _buffer[2] = (byte)(value >> 16);
            _buffer[3] = (byte)(value >> 24);
            OutStream.Write(_buffer, 0, 4);
        }

        public virtual void Write(ulong value)
        {
            _buffer[0] = (byte)value;
            _buffer[1] = (byte)(value >> 8);
            _buffer[2] = (byte)(value >> 16);
            _buffer[3] = (byte)(value >> 24);
            _buffer[4] = (byte)(value >> 32);
            _buffer[5] = (byte)(value >> 40);
            _buffer[6] = (byte)(value >> 48);
            _buffer[7] = (byte)(value >> 56);

            OutStream.Write(_buffer, 0, 8);
        }

        public virtual void Write(UInt128 value)
        {
            _buffer = value.GetBytes();
            OutStream.Write(_buffer, 0, 16);
        }

        [System.Security.SecuritySafeCritical]
        public unsafe virtual void Write(String value)
        {
            if (value == null)
                throw new ArgumentNullException(nameof(value));

            int len = _encoding.GetByteCount(value);
            Write((uint)len);

            if (_largeByteBuffer == null)
            {
                _largeByteBuffer = new byte[LargeByteBufferSize];
                _maxChars = _largeByteBuffer.Length / _encoding.GetMaxByteCount(1);
            }

            if (len <= _largeByteBuffer.Length)
            {
                _encoding.GetBytes(value, 0, value.Length, _largeByteBuffer, 0);

                OutStream.Write(_largeByteBuffer, 0, len);
            }
            else
            {
                int charStart = 0;
                int numLeft = value.Length;

                while (numLeft > 0)
                {
                    int charCount = (numLeft > _maxChars) ? _maxChars : numLeft;
                    int byteLen;

                    checked
                    {
                        if (charStart < 0 || charCount < 0 || charStart + charCount > value.Length)
                        {
                            throw new ArgumentOutOfRangeException("charCount");
                        }

                        fixed (char* pChars = value)
                        {
                            fixed (byte* pBytes = _largeByteBuffer)
                            {
                                byteLen = _encoder.GetBytes(pChars + charStart, charCount, pBytes,
                                    _largeByteBuffer.Length, charCount == numLeft);
                            }
                        }
                    }

                    OutStream.Write(_largeByteBuffer, 0, byteLen);

                    charStart += charCount;
                    numLeft -= charCount;
                }
            }
        }

        protected virtual void Dispose(bool disposing)
        {
            if (!disposing) return;
            if (_leaveOpen)
                OutStream.Flush();
            else
                OutStream.Close();
        }
    }
}
'''
'''--- Src/NearClientUnity/Utilities/PublicKey.cs ---
﻿using System;
using System.IO;

namespace NearClientUnity.Utilities
{
    public class PublicKey
    {
        private readonly ByteArray32 _data;
        private KeyType _keyType;

        public PublicKey(KeyType keyType, ByteArray32 data)
        {
            _keyType = keyType;
            _data = data;
        }

        public PublicKey(string encodedKey)
        {
            var parts = encodedKey.Split(':');
            switch (parts.Length)
            {
                case 1:
                    {
                        var decodeData = Base58.Decode(parts[0]);
                        if (decodeData.Length != ByteArray32.BufferLength)
                            throw new ArgumentException("Invalid encoded key");
                        var byteArray32 = new ByteArray32 { Buffer = decodeData };
                        _keyType = KeyType.Ed25519;
                        _data = byteArray32;
                        break;
                    }
                case 2:
                    {
                        var decodeData = Base58.Decode(parts[1]);
                        if (decodeData.Length != 32) throw new ArgumentException("Invalid encoded key");
                        var byteArray32 = new ByteArray32 { Buffer = decodeData };
                        _keyType = KeyTypeConverter.StringToKeyType(parts[0]);
                        _data = byteArray32;
                        break;
                    }
                default:
                    throw new NotSupportedException("Invalid encoded key format, must be '<curve>:<encoded key>'");
            }
        }

        internal ByteArray32 Data => _data;

        public static PublicKey FromByteArray(byte[] rawBytes)
        {
            if (rawBytes.Length != 33) throw new ArgumentException("Invalid raw bytes for public key");
            using (var ms = new MemoryStream(rawBytes))
            {
                return FromStream(ms);
            }
        }

        public static PublicKey FromStream(MemoryStream stream)
        {
            return FromRawDataStream(stream);
        }

        public static PublicKey FromStream(ref MemoryStream stream)
        {
            return FromRawDataStream(stream);
        }

        public byte[] ToByteArray()
        {
            using (var ms = new MemoryStream())
            {
                using (var writer = new NearBinaryWriter(ms))
                {
                    writer.Write((byte)_keyType);
                    writer.Write(_data.Buffer);
                    return ms.ToArray();
                }
            }
        }

        public override string ToString()
        {
            var key = Base58.Encode(_data.Buffer);
            var type = KeyTypeConverter.KeyTypeToString(_keyType);
            return $"{type}:{key}";
        }

        private static PublicKey FromRawDataStream(MemoryStream stream)
        {
            using (var reader = new NearBinaryReader(stream, true))
            {
                KeyType keyType;
                switch ((int)reader.ReadByte())
                {
                    case 0:
                        {
                            keyType = KeyType.Ed25519;
                            break;
                        }
                    default:
                        {
                            throw new NotSupportedException("Invalid key type in raw bytes for public key");
                        }
                }

                var data = new ByteArray32
                {
                    Buffer = reader.ReadBytes(32)
                };

                return new PublicKey(keyType, data);
            }
        }
    }
}
'''
'''--- Src/NearClientUnity/Utilities/Signature.cs ---
﻿namespace NearClientUnity.Utilities
{
    public class Signature
    {
        public PublicKey PublicKey { get; set; }
        public byte[] SignatureBytes { get; set; }
    }
}
'''
'''--- Src/NearClientUnity/Utilities/UInt128.cs ---
﻿using System;
using System.Diagnostics;
using System.Globalization;
using System.Linq;
using System.Numerics;

namespace NearClientUnity.Utilities
{
    public struct UInt128 : IFormattable, IComparable, IComparable<UInt128>, IEquatable<UInt128>
    {
        private const int maxRepShift = 53;

        private static readonly ulong maxRep = (ulong)1 << maxRepShift;

        private static readonly UInt128 maxRepSquaredHigh = (ulong)1 << (2 * maxRepShift - 64);

        private static readonly UInt128 maxValue = ~(UInt128)0;

        private static readonly UInt128 one = (UInt128)1;

        private static readonly UInt128 zero = (UInt128)0;

        private static byte[] bitLength = Enumerable.Range(0, byte.MaxValue + 1)
            .Select(value =>
            {
                int count;
                for (count = 0; value != 0; count++)
                    value >>= 1;
                return (byte)count;
            }).ToArray();

        private ulong s0;

        private ulong s1;

        public UInt128(long value)
        {
            Create(out this, value);
        }

        public UInt128(ulong value)
        {
            Create(out this, value);
        }

        public UInt128(decimal value)
        {
            Create(out this, value);
        }

        public UInt128(double value)
        {
            Create(out this, value);
        }

        public UInt128(BigInteger value)
        {
            Create(out this, value);
        }

        public UInt128(byte[] value)
        {
            Create(out this, value);
        }

        public static UInt128 MaxValue => maxValue;

        public static UInt128 MinValue => zero;

        public static UInt128 One => one;

        public static UInt128 Zero => zero;

        public bool IsEven => (s0 & 1) == 0;

        public bool IsOne => s1 == 0 && s0 == 1;

        public bool IsPowerOfTwo => (this & (this - 1)).IsZero;

        public bool IsZero => (s0 | s1) == 0;

        public ulong S0 => s0;

        public ulong S1 => s1;

        public int Sign => IsZero ? 0 : 1;

        private uint r0 => (uint)s0;

        private uint r1 => (uint)(s0 >> 32);

        private uint r2 => (uint)s1;

        private uint r3 => (uint)(s1 >> 32);

        public static UInt128 Abs(UInt128 a)
        {
            return a;
        }

        public static void Add(out UInt128 c, ulong a, ulong b)
        {
            c.s0 = a + b;
            c.s1 = 0;
            if (c.s0 < a && c.s0 < b)
                ++c.s1;
            Debug.Assert((BigInteger)c == ((BigInteger)a + (BigInteger)b));
        }

        public static void Add(out UInt128 c, ref UInt128 a, ulong b)
        {
            c.s0 = a.s0 + b;
            c.s1 = a.s1;
            if (c.s0 < a.s0 && c.s0 < b)
                ++c.s1;
            Debug.Assert((BigInteger)c == ((BigInteger)a + (BigInteger)b) % ((BigInteger)1 << 128));
        }

        public static void Add(out UInt128 c, ref UInt128 a, ref UInt128 b)
        {
            c.s0 = a.s0 + b.s0;
            c.s1 = a.s1 + b.s1;
            if (c.s0 < a.s0 && c.s0 < b.s0)
                ++c.s1;
            Debug.Assert((BigInteger)c == ((BigInteger)a + (BigInteger)b) % ((BigInteger)1 << 128));
        }

        public static void Add(ref UInt128 a, ulong b)
        {
            var sum = a.s0 + b;
            if (sum < a.s0 && sum < b)
                ++a.s1;
            a.s0 = sum;
        }

        public static void Add(ref UInt128 a, ref UInt128 b)
        {
            var sum = a.s0 + b.s0;
            if (sum < a.s0 && sum < b.s0)
                ++a.s1;
            a.s0 = sum;
            a.s1 += b.s1;
        }

        public static void Add(ref UInt128 a, UInt128 b)
        {
            Add(ref a, ref b);
        }

        public static UInt128 Add(UInt128 a, UInt128 b)
        {
            Add(out var c, ref a, ref b);
            return c;
        }

        public static void And(out UInt128 c, ref UInt128 a, ref UInt128 b)
        {
            c.s0 = a.s0 & b.s0;
            c.s1 = a.s1 & b.s1;
        }

        public static void ArithmeticRightShift(out UInt128 c, ref UInt128 a, int b)
        {
            if (b < 64)
                ArithmeticRightShift64(out c, ref a, b);
            else if (b == 64)
            {
                c.s0 = a.s1;
                c.s1 = (ulong)((long)a.s1 >> 63);
            }
            else
            {
                c.s0 = a.s1 >> (b - 64);
                c.s1 = (ulong)((long)a.s1 >> 63);
            }
        }

        public static void ArithmeticRightShift(ref UInt128 c, int d)
        {
            if (d < 64)
                ArithmeticRightShift64(ref c, d);
            else
            {
                c.s0 = (ulong)((long)c.s1 >> (d - 64));
                c.s1 = 0;
            }
        }

        public static void ArithmeticRightShift(ref UInt128 c)
        {
            c.s0 = c.s1 << 63 | c.s0 >> 1;
            c.s1 = (ulong)((long)c.s1 >> 1);
        }

        public static void ArithmeticRightShift64(out UInt128 c, ref UInt128 a, int b)
        {
            if (b == 0)
                c = a;
            else
            {
                c.s0 = a.s0 >> b | a.s1 << (64 - b);
                c.s1 = (ulong)((long)a.s1 >> b);
            }
        }

        public static void ArithmeticShift(out UInt128 c, ref UInt128 a, int d)
        {
            if (d < 0)
                ArithmeticRightShift(out c, ref a, -d);
            else
                LeftShift(out c, ref a, d);
        }

        public static void ArithmeticShift(ref UInt128 c, int d)
        {
            if (d < 0)
                ArithmeticRightShift(ref c, -d);
            else
                LeftShift(ref c, d);
        }

        public static ulong CeilingCbrt(UInt128 a)
        {
            var s = (ulong)Math.Ceiling(Math.Pow(ConvertToDouble(ref a), (double)1 / 3));
            Cube(out var s3, s);
            if (s3 < a)
                ++s;
            else
            {
                Multiply(out var sum, 3 * s, s + 1);
                Subtract(out var diff, ref s3, ref a);
                if (LessThan(ref sum, ref diff))
                    --s;
            }

            Debug.Assert((BigInteger)(s - 1) * (s - 1) * (s - 1) < a && (BigInteger)s * s * s >= a);
            return s;
        }

        public static ulong CeilingSqrt(UInt128 a)
        {
            if (a.s1 == 0 && a.s0 <= maxRep)
                return (ulong)Math.Ceiling(Math.Sqrt(a.s0));
            var s = (ulong)Math.Ceiling(Math.Sqrt(ConvertToDouble(ref a)));
            if (a.s1 < maxRepSquaredHigh)
            {
                Square(out var s2, s);
                var r = s2.s0 - a.s0;
                if (r > long.MaxValue)
                    ++s;
                else if (r - (s << 1) <= long.MaxValue)
                    --s;
                Debug.Assert((BigInteger)(s - 1) * (s - 1) < a && (BigInteger)s * s >= a);
                return s;
            }

            s = FloorSqrt(ref a, s);
            Square(out var square, s);
            if (square.S0 != a.S0 || square.S1 != a.S1)
                ++s;
            Debug.Assert((BigInteger)(s - 1) * (s - 1) < a && (BigInteger)s * s >= a);
            return s;
        }

        public static int Compare(UInt128 a, UInt128 b)
        {
            return a.CompareTo(b);
        }

        public static double ConvertToDouble(ref UInt128 a)
        {
            if (a.s1 == 0)
                return a.s0;
            return a.s1 * (double)ulong.MaxValue + a.s0;
        }

        public static float ConvertToFloat(ref UInt128 a)
        {
            if (a.s1 == 0)
                return a.s0;
            return a.s1 * (float)ulong.MaxValue + a.s0;
        }

        public static void Create(out UInt128 c, uint r0, uint r1, uint r2, uint r3)
        {
            c.s0 = (ulong)r1 << 32 | r0;
            c.s1 = (ulong)r3 << 32 | r2;
        }

        public static void Create(out UInt128 c, ulong s0, ulong s1)
        {
            c.s0 = s0;
            c.s1 = s1;
        }

        public static void Create(out UInt128 c, long a)
        {
            c.s0 = (ulong)a;
            c.s1 = a < 0 ? ulong.MaxValue : 0;
        }

        public static void Create(out UInt128 c, byte[] bytes)
        {
            c.s0 = c.s1 = 0;
            for (var i = 0; i < 8; i++)
            {
                c.s0 |= (((ulong)bytes[i]) << (i * 8));
                c.s1 |= (((ulong)bytes[i + 8]) << (i * 8));
            }
        }

        public static void Create(out UInt128 c, ulong a)
        {
            c.s0 = a;
            c.s1 = 0;
        }

        public static void Create(out UInt128 c, decimal a)
        {
            var bits = decimal.GetBits(decimal.Truncate(a));
            Create(out c, (uint)bits[0], (uint)bits[1], (uint)bits[2], 0);
            if (a < 0)
                Negate(ref c);
        }

        public static void Create(out UInt128 c, BigInteger a)
        {
            var sign = a.Sign;
            if (sign == -1)
                a = -a;
            c.s0 = (ulong)(a & ulong.MaxValue);
            c.s1 = (ulong)(a >> 64);
            if (sign == -1)
                Negate(ref c);
        }

        public static void Create(out UInt128 c, double a)
        {
            var negate = false;
            if (a < 0)
            {
                negate = true;
                a = -a;
            }

            if (a <= ulong.MaxValue)
            {
                c.s0 = (ulong)a;
                c.s1 = 0;
            }
            else
            {
                var shift = Math.Max((int)Math.Ceiling(Math.Log(a, 2)) - 63, 0);
                c.s0 = (ulong)(a / Math.Pow(2, shift));
                c.s1 = 0;
                LeftShift(ref c, shift);
            }

            if (negate)
                Negate(ref c);
        }

        public static UInt128 Cube(ulong a)
        {
            Cube(out var c, a);
            return c;
        }

        public static UInt128 Cube(UInt128 a)
        {
            Cube(out var c, ref a);
            return c;
        }

        public static void Cube(out UInt128 c, ulong a)
        {
            Square(out var square, a);
            Multiply(out c, ref square, a);
        }

        public static void Cube(out UInt128 c, ref UInt128 a)
        {
            UInt128 square;
            if (a.s1 == 0)
            {
                Square64(out square, a.s0);
                Multiply(out c, ref square, a.s0);
            }
            else
            {
                Multiply128(out square, ref a, ref a);
                Multiply128(out c, ref square, ref a);
            }
        }

        public static void Divide(out UInt128 w, ref UInt128 u, uint v)
        {
            if (u.s1 == 0)
                Divide64(out w, u.s0, v);
            else if (u.s1 <= uint.MaxValue)
                Divide96(out w, ref u, v);
            else
                Divide128(out w, ref u, v);
        }

        public static void Divide(out UInt128 w, ref UInt128 u, ulong v)
        {
            if (u.s1 == 0)
                Divide64(out w, u.s0, v);
            else
            {
                var v0 = (uint)v;
                if (v == v0)
                {
                    if (u.s1 <= uint.MaxValue)
                        Divide96(out w, ref u, v0);
                    else
                        Divide128(out w, ref u, v0);
                }
                else
                {
                    if (u.s1 <= uint.MaxValue)
                        Divide96(out w, ref u, v);
                    else
                        Divide128(out w, ref u, v);
                }
            }
        }

        public static void Divide(out UInt128 c, ref UInt128 a, ref UInt128 b)
        {
            if (LessThan(ref a, ref b))
                c = Zero;
            else if (b.s1 == 0)
                Divide(out c, ref a, b.s0);
            else if (b.s1 <= uint.MaxValue)
            {
                Create(out c, DivRem96(out var rem, ref a, ref b));
            }
            else
            {
                Create(out c, DivRem128(out var rem, ref a, ref b));
            }
        }

        public static UInt128 Divide(UInt128 a, UInt128 b)
        {
            Divide(out var c, ref a, ref b);
            return c;
        }

        public static UInt128 DivRem(UInt128 a, UInt128 b, out UInt128 remainder)
        {
            Divide(out var c, ref a, ref b);
            Remainder(out remainder, ref a, ref b);
            return c;
        }

        public static bool Equals(ref UInt128 a, ref UInt128 b)
        {
            return a.s0 == b.s0 && a.s1 == b.s1;
        }

        public static void ExclusiveOr(out UInt128 c, ref UInt128 a, ref UInt128 b)
        {
            c.s0 = a.s0 ^ b.s0;
            c.s1 = a.s1 ^ b.s1;
        }

        public static explicit operator byte(UInt128 a)
        {
            return (byte)a.s0;
        }

        public static explicit operator decimal(UInt128 a)
        {
            if (a.s1 == 0)
                return a.s0;
            var shift = Math.Max(0, 32 - GetBitLength(a.s1));
            RightShift(out var ashift, ref a, shift);
            return new decimal((int)a.r0, (int)a.r1, (int)a.r2, false, (byte)shift);
        }

        public static explicit operator double(UInt128 a)
        {
            return ConvertToDouble(ref a);
        }

        public static explicit operator float(UInt128 a)
        {
            return ConvertToFloat(ref a);
        }

        public static explicit operator int(UInt128 a)
        {
            return (int)a.s0;
        }

        public static explicit operator long(UInt128 a)
        {
            return (long)a.s0;
        }

        public static explicit operator sbyte(UInt128 a)
        {
            return (sbyte)a.s0;
        }

        public static explicit operator short(UInt128 a)
        {
            return (short)a.s0;
        }

        public static explicit operator uint(UInt128 a)
        {
            return (uint)a.s0;
        }

        public static explicit operator UInt128(double a)
        {
            Create(out var c, a);
            return c;
        }

        public static explicit operator UInt128(sbyte a)
        {
            Create(out var c, a);
            return c;
        }

        public static explicit operator UInt128(short a)
        {
            Create(out var c, a);
            return c;
        }

        public static explicit operator UInt128(int a)
        {
            Create(out var c, a);
            return c;
        }

        public static explicit operator UInt128(long a)
        {
            Create(out var c, a);
            return c;
        }

        public static explicit operator UInt128(decimal a)
        {
            Create(out var c, a);
            return c;
        }

        public static explicit operator UInt128(BigInteger a)
        {
            Create(out var c, a);
            return c;
        }

        public static explicit operator ulong(UInt128 a)
        {
            return a.s0;
        }

        public static explicit operator ushort(UInt128 a)
        {
            return (ushort)a.s0;
        }

        public static ulong FloorCbrt(UInt128 a)
        {
            var s = (ulong)Math.Pow(ConvertToDouble(ref a), (double)1 / 3);
            Cube(out var s3, s);
            if (a < s3)
                --s;
            else
            {
                Multiply(out var sum, 3 * s, s + 1);
                Subtract(out var diff, ref a, ref s3);
                if (LessThan(ref sum, ref diff))
                    ++s;
            }

            Debug.Assert((BigInteger)s * s * s <= a && (BigInteger)(s + 1) * (s + 1) * (s + 1) > a);
            return s;
        }

        public static ulong FloorSqrt(UInt128 a)
        {
            if (a.s1 == 0 && a.s0 <= maxRep)
                return (ulong)Math.Sqrt(a.s0);
            var s = (ulong)Math.Sqrt(ConvertToDouble(ref a));
            if (a.s1 < maxRepSquaredHigh)
            {
                Square(out var s2, s);
                var r = a.s0 - s2.s0;
                if (r > long.MaxValue)
                    --s;
                else if (r - (s << 1) <= long.MaxValue)
                    ++s;
                Debug.Assert((BigInteger)s * s <= a && (BigInteger)(s + 1) * (s + 1) > a);
                return s;
            }

            s = FloorSqrt(ref a, s);
            Debug.Assert((BigInteger)s * s <= a && (BigInteger)(s + 1) * (s + 1) > a);
            return s;
        }

        public static UInt128 GreatestCommonDivisor(UInt128 a, UInt128 b)
        {
            GreatestCommonDivisor(out var c, ref a, ref b);
            return c;
        }

        public static void GreatestCommonDivisor(out UInt128 c, ref UInt128 a, ref UInt128 b)
        {
            // Check whether one number is > 64 bits and the other is <= 64 bits and both are non-zero.
            UInt128 a1, b1;
            if ((a.s1 == 0) != (b.s1 == 0) && !a.IsZero && !b.IsZero)
            {
                // Perform a normal step so that both a and b are <= 64 bits.
                if (LessThan(ref a, ref b))
                {
                    a1 = a;
                    Remainder(out b1, ref b, ref a);
                }
                else
                {
                    b1 = b;
                    Remainder(out a1, ref a, ref b);
                }
            }
            else
            {
                a1 = a;
                b1 = b;
            }

            // Make sure neither is zero.
            if (a1.IsZero)
            {
                c = b1;
                return;
            }

            if (b1.IsZero)
            {
                c = a1;
                return;
            }

            // Ensure a >= b.
            if (LessThan(ref a1, ref b1))
                Swap(ref a1, ref b1);

            // Lehmer-Euclid algorithm.
            // See: http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.31.693
            while (a1.s1 != 0 && !b.IsZero)
            {
                // Extract the high 63 bits of a and b.
                var norm = 63 - GetBitLength(a1.s1);
                Shift(out var ahat, ref a1, norm);
                Shift(out var bhat, ref b1, norm);
                var uhat = (long)ahat.s1;
                var vhat = (long)bhat.s1;

                // Check whether q exceeds single-precision.
                if (vhat == 0)
                {
                    // Perform a normal step and try again.
                    Remainder(out var rem, ref a1, ref b1);
                    a1 = b1;
                    b1 = rem;
                    continue;
                }

                // Perform steps using signed single-precision arithmetic.
                var x0 = (long)1;
                var y0 = (long)0;
                var x1 = (long)0;
                var y1 = (long)1;
                var even = true;
                while (true)
                {
                    // Calculate quotient, cosquence pair, and update uhat and vhat.
                    var q = uhat / vhat;
                    var x2 = x0 - q * x1;
                    var y2 = y0 - q * y1;
                    var t = uhat;
                    uhat = vhat;
                    vhat = t - q * vhat;
                    even = !even;

                    // Apply Jebelean's termination condition to check whether q is valid.
                    if (even)
                    {
                        if (vhat < -x2 || uhat - vhat < y2 - y1)
                            break;
                    }
                    else
                    {
                        if (vhat < -y2 || uhat - vhat < x2 - x1)
                            break;
                    }

                    // Adjust cosequence history.
                    x0 = x1;
                    y0 = y1;
                    x1 = x2;
                    y1 = y2;
                }

                // Check whether a normal step is necessary.
                if (x0 == 1 && y0 == 0)
                {
                    Remainder(out var rem, ref a1, ref b1);
                    a1 = b1;
                    b1 = rem;
                    continue;
                }

                // Back calculate a and b from the last valid cosequence pairs.
                UInt128 anew, bnew;
                if (even)
                {
                    AddProducts(out anew, y0, ref b1, x0, ref a1);
                    AddProducts(out bnew, x1, ref a1, y1, ref b1);
                }
                else
                {
                    AddProducts(out anew, x0, ref a1, y0, ref b1);
                    AddProducts(out bnew, y1, ref b1, x1, ref a1);
                }

                a1 = anew;
                b1 = bnew;
            }

            // Check whether we have any 64 bit work left.
            if (!b1.IsZero)
            {
                var a2 = a1.s0;
                var b2 = b1.s0;

                // Perform 64 bit steps.
                while (a2 > uint.MaxValue && b2 != 0)
                {
                    var t = a2 % b2;
                    a2 = b2;
                    b2 = t;
                }

                // Check whether we have any 32 bit work left.
                if (b2 != 0)
                {
                    var a3 = (uint)a2;
                    var b3 = (uint)b2;

                    // Perform 32 bit steps.
                    while (b3 != 0)
                    {
                        var t = a3 % b3;
                        a3 = b3;
                        b3 = t;
                    }

                    Create(out c, a3);
                }
                else
                    Create(out c, a2);
            }
            else
                c = a1;
        }

        public static implicit operator BigInteger(UInt128 a)
        {
            if (a.s1 == 0)
                return a.s0;
            return (BigInteger)a.s1 << 64 | a.s0;
        }

        public static implicit operator UInt128(byte a)
        {
            Create(out var c, a);
            return c;
        }

        public static implicit operator UInt128(byte[] a)
        {
            Create(out var c, a);
            return c;
        }

        public static implicit operator UInt128(ushort a)
        {
            Create(out var c, a);
            return c;
        }

        public static implicit operator UInt128(uint a)
        {
            Create(out var c, a);
            return c;
        }

        public static implicit operator UInt128(ulong a)
        {
            Create(out var c, a);
            return c;
        }

        public static void LeftShift(out UInt128 c, ref UInt128 a, int b)
        {
            if (b < 64)
                LeftShift64(out c, ref a, b);
            else if (b == 64)
            {
                c.s0 = 0;
                c.s1 = a.s0;
                return;
            }
            else
            {
                c.s0 = 0;
                c.s1 = a.s0 << (b - 64);
            }
        }

        public static void LeftShift(ref UInt128 c, int d)
        {
            if (d < 64)
                LeftShift64(ref c, d);
            else
            {
                c.s1 = c.s0 << (d - 64);
                c.s0 = 0;
            }
        }

        public static void LeftShift(ref UInt128 c)
        {
            c.s1 = c.s1 << 1 | c.s0 >> 63;
            c.s0 <<= 1;
        }

        public static ulong LeftShift64(out UInt128 c, ref UInt128 a, int d)
        {
            if (d == 0)
            {
                c = a;
                return 0;
            }

            var dneg = 64 - d;
            c.s1 = a.s1 << d | a.s0 >> dneg;
            c.s0 = a.s0 << d;
            return a.s1 >> dneg;
        }

        public static double Log(UInt128 a)
        {
            return Log(a, Math.E);
        }

        public static double Log(UInt128 a, double b)
        {
            return Math.Log(ConvertToDouble(ref a), b);
        }

        public static double Log10(UInt128 a)
        {
            return Log(a, 10);
        }

        public static UInt128 Max(UInt128 a, UInt128 b)
        {
            if (LessThan(ref b, ref a))
                return a;
            return b;
        }

        public static UInt128 Min(UInt128 a, UInt128 b)
        {
            if (LessThan(ref a, ref b))
                return a;
            return b;
        }

        public static void ModAdd(out UInt128 c, ref UInt128 a, ref UInt128 b, ref UInt128 modulus)
        {
            Add(out c, ref a, ref b);
            if (!LessThan(ref c, ref modulus) || LessThan(ref c, ref a) && LessThan(ref c, ref b))
                Subtract(ref c, ref modulus);
        }

        public static UInt128 ModAdd(UInt128 a, UInt128 b, UInt128 modulus)
        {
            ModAdd(out var c, ref a, ref b, ref modulus);
            return c;
        }

        public static void ModMul(out UInt128 c, ref UInt128 a, ref UInt128 b, ref UInt128 modulus)
        {
            if (modulus.s1 == 0)
            {
                Multiply64(out var product, a.s0, b.s0);
                Create(out c, UInt128.Remainder(ref product, modulus.s0));
            }
            else
            {
                Multiply(out UInt256 product, ref a, ref b);
                Remainder(out c, ref product, ref modulus);
            }
        }

        public static void ModMul(ref UInt128 a, ref UInt128 b, ref UInt128 modulus)
        {
            if (modulus.s1 == 0)
            {
                Multiply64(out var product, a.s0, b.s0);
                Create(out a, UInt128.Remainder(ref product, modulus.s0));
            }
            else
            {
                Multiply(out UInt256 product, ref a, ref b);
                Remainder(out a, ref product, ref modulus);
            }
        }

        public static UInt128 ModMul(UInt128 a, UInt128 b, UInt128 modulus)
        {
            ModMul(out var c, ref a, ref b, ref modulus);
            return c;
        }

        public static void ModPow(out UInt128 result, ref UInt128 value, ref UInt128 exponent, ref UInt128 modulus)
        {
            result = one;
            var v = value;
            var e = exponent.s0;
            if (exponent.s1 != 0)
            {
                for (var i = 0; i < 64; i++)
                {
                    if ((e & 1) != 0)
                        ModMul(ref result, ref v, ref modulus);
                    ModMul(ref v, ref v, ref modulus);
                    e >>= 1;
                }

                e = exponent.s1;
            }

            while (e != 0)
            {
                if ((e & 1) != 0)
                    ModMul(ref result, ref v, ref modulus);
                if (e != 1)
                    ModMul(ref v, ref v, ref modulus);
                e >>= 1;
            }

            Debug.Assert(BigInteger.ModPow(value, exponent, modulus) == result);
        }

        public static UInt128 ModPow(UInt128 value, UInt128 exponent, UInt128 modulus)
        {
            ModPow(out var result, ref value, ref exponent, ref modulus);
            return result;
        }

        public static void ModSub(out UInt128 c, ref UInt128 a, ref UInt128 b, ref UInt128 modulus)
        {
            Subtract(out c, ref a, ref b);
            if (LessThan(ref a, ref b))
                Add(ref c, ref modulus);
        }

        public static UInt128 ModSub(UInt128 a, UInt128 b, UInt128 modulus)
        {
            ModSub(out var c, ref a, ref b, ref modulus);
            return c;
        }

        public static void Multiply(out UInt128 c, ulong a, ulong b)
        {
            Multiply64(out c, a, b);
            Debug.Assert((BigInteger)c == (BigInteger)a * (BigInteger)b);
        }

        public static void Multiply(out UInt128 c, ref UInt128 a, uint b)
        {
            if (a.s1 == 0)
                Multiply64(out c, a.s0, b);
            else
                Multiply128(out c, ref a, b);
            Debug.Assert((BigInteger)c == (BigInteger)a * (BigInteger)b % ((BigInteger)1 << 128));
        }

        public static void Multiply(out UInt128 c, ref UInt128 a, ulong b)
        {
            if (a.s1 == 0)
                Multiply64(out c, a.s0, b);
            else
                Multiply128(out c, ref a, b);
            Debug.Assert((BigInteger)c == (BigInteger)a * (BigInteger)b % ((BigInteger)1 << 128));
        }

        public static void Multiply(out UInt128 c, ref UInt128 a, ref UInt128 b)
        {
            if ((a.s1 | b.s1) == 0)
                Multiply64(out c, a.s0, b.s0);
            else if (a.s1 == 0)
                Multiply128(out c, ref b, a.s0);
            else if (b.s1 == 0)
                Multiply128(out c, ref a, b.s0);
            else
                Multiply128(out c, ref a, ref b);
            Debug.Assert((BigInteger)c == (BigInteger)a * (BigInteger)b % ((BigInteger)1 << 128));
        }

        public static UInt128 Multiply(UInt128 a, UInt128 b)
        {
            Multiply(out UInt128 c, ref a, ref b);
            return c;
        }

        public static void Negate(ref UInt128 a)
        {
            var s0 = a.s0;
            a.s0 = 0 - s0;
            a.s1 = 0 - a.s1;
            if (s0 > 0)
                --a.s1;
        }

        public static void Negate(out UInt128 c, ref UInt128 a)
        {
            c.s0 = 0 - a.s0;
            c.s1 = 0 - a.s1;
            if (a.s0 > 0)
                --c.s1;
            Debug.Assert((BigInteger)c == (BigInteger)(~a + 1));
        }

        public static UInt128 Negate(UInt128 a)
        {
            Negate(out var c, ref a);
            return c;
        }

        public static void Not(out UInt128 c, ref UInt128 a)
        {
            c.s0 = ~a.s0;
            c.s1 = ~a.s1;
        }

        public static UInt128 operator -(UInt128 a, UInt128 b)
        {
            Subtract(out var c, ref a, ref b);
            return c;
        }

        public static UInt128 operator -(UInt128 a, ulong b)
        {
            Subtract(out var c, ref a, b);
            return c;
        }

        public static UInt128 operator -(ulong a, UInt128 b)
        {
            Subtract(out var c, a, ref b);
            return c;
        }

        public static UInt128 operator --(UInt128 a)
        {
            Subtract(out var c, ref a, 1);
            return c;
        }

        public static bool operator !=(UInt128 a, UInt128 b)
        {
            return !a.Equals(b);
        }

        public static bool operator !=(UInt128 a, int b)
        {
            return !a.Equals(b);
        }

        public static bool operator !=(int a, UInt128 b)
        {
            return !b.Equals(a);
        }

        public static bool operator !=(UInt128 a, uint b)
        {
            return !a.Equals(b);
        }

        public static bool operator !=(uint a, UInt128 b)
        {
            return !b.Equals(a);
        }

        public static bool operator !=(UInt128 a, long b)
        {
            return !a.Equals(b);
        }

        public static bool operator !=(long a, UInt128 b)
        {
            return !b.Equals(a);
        }

        public static bool operator !=(UInt128 a, ulong b)
        {
            return !a.Equals(b);
        }

        public static bool operator !=(ulong a, UInt128 b)
        {
            return !b.Equals(a);
        }

        public static ulong operator %(UInt128 a, uint b)
        {
            return Remainder(ref a, b);
        }

        public static ulong operator %(UInt128 a, ulong b)
        {
            return Remainder(ref a, b);
        }

        public static UInt128 operator %(UInt128 a, UInt128 b)
        {
            Remainder(out var c, ref a, ref b);
            return c;
        }

        public static UInt128 operator &(UInt128 a, UInt128 b)
        {
            And(out var c, ref a, ref b);
            return c;
        }

        public static uint operator &(UInt128 a, uint b)
        {
            return (uint)a.s0 & b;
        }

        public static uint operator &(uint a, UInt128 b)
        {
            return a & (uint)b.s0;
        }

        public static ulong operator &(UInt128 a, ulong b)
        {
            return a.s0 & b;
        }

        public static ulong operator &(ulong a, UInt128 b)
        {
            return a & b.s0;
        }

        public static UInt128 operator *(UInt128 a, uint b)
        {
            Multiply(out var c, ref a, b);
            return c;
        }

        public static UInt128 operator *(uint a, UInt128 b)
        {
            Multiply(out var c, ref b, a);
            return c;
        }

        public static UInt128 operator *(UInt128 a, ulong b)
        {
            Multiply(out var c, ref a, b);
            return c;
        }

        public static UInt128 operator *(ulong a, UInt128 b)
        {
            Multiply(out var c, ref b, a);
            return c;
        }

        public static UInt128 operator *(UInt128 a, UInt128 b)
        {
            Multiply(out UInt128 c, ref a, ref b);
            return c;
        }

        public static UInt128 operator /(UInt128 a, ulong b)
        {
            Divide(out var c, ref a, b);
            return c;
        }

        public static UInt128 operator /(UInt128 a, UInt128 b)
        {
            Divide(out var c, ref a, ref b);
            return c;
        }

        public static UInt128 operator ^(UInt128 a, UInt128 b)
        {
            ExclusiveOr(out var c, ref a, ref b);
            return c;
        }

        public static UInt128 operator |(UInt128 a, UInt128 b)
        {
            Or(out var c, ref a, ref b);
            return c;
        }

        public static UInt128 operator ~(UInt128 a)
        {
            Not(out var c, ref a);
            return c;
        }

        public static UInt128 operator +(UInt128 a, UInt128 b)
        {
            Add(out var c, ref a, ref b);
            return c;
        }

        public static UInt128 operator +(UInt128 a, ulong b)
        {
            Add(out var c, ref a, b);
            return c;
        }

        public static UInt128 operator +(ulong a, UInt128 b)
        {
            Add(out var c, ref b, a);
            return c;
        }

        public static UInt128 operator +(UInt128 a)
        {
            return a;
        }

        public static UInt128 operator ++(UInt128 a)
        {
            Add(out var c, ref a, 1);
            return c;
        }

        public static bool operator <(UInt128 a, UInt128 b)
        {
            return LessThan(ref a, ref b);
        }

        public static bool operator <(UInt128 a, int b)
        {
            return LessThan(ref a, b);
        }

        public static bool operator <(int a, UInt128 b)
        {
            return LessThan(a, ref b);
        }

        public static bool operator <(UInt128 a, uint b)
        {
            return LessThan(ref a, b);
        }

        public static bool operator <(uint a, UInt128 b)
        {
            return LessThan(a, ref b);
        }

        public static bool operator <(UInt128 a, long b)
        {
            return LessThan(ref a, b);
        }

        public static bool operator <(long a, UInt128 b)
        {
            return LessThan(a, ref b);
        }

        public static bool operator <(UInt128 a, ulong b)
        {
            return LessThan(ref a, b);
        }

        public static bool operator <(ulong a, UInt128 b)
        {
            return LessThan(a, ref b);
        }

        public static UInt128 operator <<(UInt128 a, int b)
        {
            LeftShift(out var c, ref a, b);
            return c;
        }

        public static bool operator <=(UInt128 a, UInt128 b)
        {
            return !LessThan(ref b, ref a);
        }

        public static bool operator <=(UInt128 a, int b)
        {
            return !LessThan(b, ref a);
        }

        public static bool operator <=(int a, UInt128 b)
        {
            return !LessThan(ref b, a);
        }

        public static bool operator <=(UInt128 a, uint b)
        {
            return !LessThan(b, ref a);
        }

        public static bool operator <=(uint a, UInt128 b)
        {
            return !LessThan(ref b, a);
        }

        public static bool operator <=(UInt128 a, long b)
        {
            return !LessThan(b, ref a);
        }

        public static bool operator <=(long a, UInt128 b)
        {
            return !LessThan(ref b, a);
        }

        public static bool operator <=(UInt128 a, ulong b)
        {
            return !LessThan(b, ref a);
        }

        public static bool operator <=(ulong a, UInt128 b)
        {
            return !LessThan(ref b, a);
        }

        public static bool operator ==(UInt128 a, UInt128 b)
        {
            return a.Equals(b);
        }

        public static bool operator ==(UInt128 a, int b)
        {
            return a.Equals(b);
        }

        public static bool operator ==(int a, UInt128 b)
        {
            return b.Equals(a);
        }

        public static bool operator ==(UInt128 a, uint b)
        {
            return a.Equals(b);
        }

        public static bool operator ==(uint a, UInt128 b)
        {
            return b.Equals(a);
        }

        public static bool operator ==(UInt128 a, long b)
        {
            return a.Equals(b);
        }

        public static bool operator ==(long a, UInt128 b)
        {
            return b.Equals(a);
        }

        public static bool operator ==(UInt128 a, ulong b)
        {
            return a.Equals(b);
        }

        public static bool operator ==(ulong a, UInt128 b)
        {
            return b.Equals(a);
        }

        public static bool operator >(UInt128 a, UInt128 b)
        {
            return LessThan(ref b, ref a);
        }

        public static bool operator >(UInt128 a, int b)
        {
            return LessThan(b, ref a);
        }

        public static bool operator >(int a, UInt128 b)
        {
            return LessThan(ref b, a);
        }

        public static bool operator >(UInt128 a, uint b)
        {
            return LessThan(b, ref a);
        }

        public static bool operator >(uint a, UInt128 b)
        {
            return LessThan(ref b, a);
        }

        public static bool operator >(UInt128 a, long b)
        {
            return LessThan(b, ref a);
        }

        public static bool operator >(long a, UInt128 b)
        {
            return LessThan(ref b, a);
        }

        public static bool operator >(UInt128 a, ulong b)
        {
            return LessThan(b, ref a);
        }

        public static bool operator >(ulong a, UInt128 b)
        {
            return LessThan(ref b, a);
        }

        public static bool operator >=(UInt128 a, UInt128 b)
        {
            return !LessThan(ref a, ref b);
        }

        public static bool operator >=(UInt128 a, int b)
        {
            return !LessThan(ref a, b);
        }

        public static bool operator >=(int a, UInt128 b)
        {
            return !LessThan(a, ref b);
        }

        public static bool operator >=(UInt128 a, uint b)
        {
            return !LessThan(ref a, b);
        }

        public static bool operator >=(uint a, UInt128 b)
        {
            return !LessThan(a, ref b);
        }

        public static bool operator >=(UInt128 a, long b)
        {
            return !LessThan(ref a, b);
        }

        public static bool operator >=(long a, UInt128 b)
        {
            return !LessThan(a, ref b);
        }

        public static bool operator >=(UInt128 a, ulong b)
        {
            return !LessThan(ref a, b);
        }

        public static bool operator >=(ulong a, UInt128 b)
        {
            return !LessThan(a, ref b);
        }

        public static UInt128 operator >>(UInt128 a, int b)
        {
            RightShift(out var c, ref a, b);
            return c;
        }

        public static void Or(out UInt128 c, ref UInt128 a, ref UInt128 b)
        {
            c.s0 = a.s0 | b.s0;
            c.s1 = a.s1 | b.s1;
        }

        public static UInt128 Parse(string value)
        {
            if (!TryParse(value, out var c))
                throw new FormatException();
            return c;
        }

        public static void Pow(out UInt128 result, ref UInt128 value, uint exponent)
        {
            result = one;
            while (exponent != 0)
            {
                if ((exponent & 1) != 0)
                {
                    var previous = result;
                    Multiply(out result, ref previous, ref value);
                }

                if (exponent != 1)
                {
                    var previous = value;
                    Square(out value, ref previous);
                }

                exponent >>= 1;
            }
        }

        public static UInt128 Pow(UInt128 value, uint exponent)
        {
            Pow(out var result, ref value, exponent);
            return result;
        }

        public static void Reduce(out UInt128 w, ref UInt128 u, ref UInt128 v, ref UInt128 n, ulong k0)
        {
            Multiply64(out var carry, u.s0, v.s0);
            var t0 = carry.s0;
            Multiply64(out carry, u.s1, v.s0, carry.s1);
            var t1 = carry.s0;
            var t2 = carry.s1;

            var m = t0 * k0;
            Multiply64(out carry, m, n.s1, MultiplyHigh64(m, n.s0, t0));
            Add(ref carry, t1);
            t0 = carry.s0;
            Add(out carry, carry.s1, t2);
            t1 = carry.s0;
            t2 = carry.s1;

            Multiply64(out carry, u.s0, v.s1, t0);
            t0 = carry.s0;
            Multiply64(out carry, u.s1, v.s1, carry.s1);
            Add(ref carry, t1);
            t1 = carry.s0;
            Add(out carry, carry.s1, t2);
            t2 = carry.s0;
            var t3 = carry.s1;

            m = t0 * k0;
            Multiply64(out carry, m, n.s1, MultiplyHigh64(m, n.s0, t0));
            Add(ref carry, t1);
            t0 = carry.s0;
            Add(out carry, carry.s1, t2);
            t1 = carry.s0;
            t2 = t3 + carry.s1;

            Create(out w, t0, t1);
            if (t2 != 0 || !LessThan(ref w, ref n))
                Subtract(ref w, ref n);
        }

        public static void Reduce(out UInt128 w, ref UInt128 t, ref UInt128 n, ulong k0)
        {
            var t0 = t.s0;
            var t1 = t.s1;
            var t2 = (ulong)0;

            for (var i = 0; i < 2; i++)
            {
                var m = t0 * k0;
                Multiply64(out var carry, m, n.s1, MultiplyHigh64(m, n.s0, t0));
                Add(ref carry, t1);
                t0 = carry.s0;
                Add(out carry, carry.s1, t2);
                t1 = carry.s0;
                t2 = carry.s1;
            }

            Create(out w, t0, t1);
            if (t2 != 0 || !LessThan(ref w, ref n))
                Subtract(ref w, ref n);
        }

        public static UInt128 Reduce(UInt128 u, UInt128 v, UInt128 n, ulong k0)
        {
            Reduce(out var w, ref u, ref v, ref n, k0);
            return w;
        }

        public static UInt128 Reduce(UInt128 t, UInt128 n, ulong k0)
        {
            Reduce(out var w, ref t, ref n, k0);
            return w;
        }

        public static uint Remainder(ref UInt128 u, uint v)
        {
            if (u.s1 == 0)
                return (uint)(u.s0 % v);
            return u.s1 <= uint.MaxValue ? Remainder96(ref u, v) : Remainder128(ref u, v);
        }

        public static ulong Remainder(ref UInt128 u, ulong v)
        {
            if (u.s1 == 0)
                return u.s0 % v;
            var v0 = (uint)v;
            if (v != v0) return u.s1 <= uint.MaxValue ? Remainder96(ref u, v) : Remainder128(ref u, v);
            return u.s1 <= uint.MaxValue ? Remainder96(ref u, v0) : Remainder128(ref u, v0);
        }

        public static void Remainder(out UInt128 c, ref UInt128 a, ref UInt128 b)
        {
            if (LessThan(ref a, ref b))
                c = a;
            else if (b.s1 == 0)
                Create(out c, Remainder(ref a, b.s0));
            else if (b.s1 <= uint.MaxValue)
                DivRem96(out c, ref a, ref b);
            else
                DivRem128(out c, ref a, ref b);
        }

        public static void Remainder(ref UInt128 a, ref UInt128 b)
        {
            var a2 = a;
            Remainder(out a, ref a2, ref b);
        }

        public static UInt128 Remainder(UInt128 a, UInt128 b)
        {
            Remainder(out var c, ref a, ref b);
            return c;
        }

        public static void RightShift(out UInt128 c, ref UInt128 a, int b)
        {
            if (b < 64)
                RightShift64(out c, ref a, b);
            else if (b == 64)
            {
                c.s0 = a.s1;
                c.s1 = 0;
            }
            else
            {
                c.s0 = a.s1 >> (b - 64);
                c.s1 = 0;
            }
        }

        public static void RightShift(ref UInt128 c, int d)
        {
            if (d < 64)
                RightShift64(ref c, d);
            else
            {
                c.s0 = c.s1 >> (d - 64);
                c.s1 = 0;
            }
        }

        public static void RightShift(ref UInt128 c)
        {
            c.s0 = c.s1 << 63 | c.s0 >> 1;
            c.s1 >>= 1;
        }

        public static void RightShift64(out UInt128 c, ref UInt128 a, int b)
        {
            if (b == 0)
                c = a;
            else
            {
                c.s0 = a.s0 >> b | a.s1 << (64 - b);
                c.s1 = a.s1 >> b;
            }
        }

        public static void Shift(out UInt128 c, ref UInt128 a, int d)
        {
            if (d < 0)
                RightShift(out c, ref a, -d);
            else
                LeftShift(out c, ref a, d);
        }

        public static void Shift(ref UInt128 c, int d)
        {
            if (d < 0)
                RightShift(ref c, -d);
            else
                LeftShift(ref c, d);
        }

        public static UInt128 Square(ulong a)
        {
            Square(out var c, a);
            return c;
        }

        public static UInt128 Square(UInt128 a)
        {
            Square(out var c, ref a);
            return c;
        }

        public static void Square(out UInt128 c, ulong a)
        {
            Square64(out c, a);
        }

        public static void Square(out UInt128 c, ref UInt128 a)
        {
            if (a.s1 == 0)
                Square64(out c, a.s0);
            else
                Multiply128(out c, ref a, ref a);
        }

        public static void Subtract(out UInt128 c, ref UInt128 a, ulong b)
        {
            c.s0 = a.s0 - b;
            c.s1 = a.s1;
            if (a.s0 < b)
                --c.s1;
            Debug.Assert((BigInteger)c ==
                         ((BigInteger)a - (BigInteger)b + ((BigInteger)1 << 128)) % ((BigInteger)1 << 128));
        }

        public static void Subtract(out UInt128 c, ulong a, ref UInt128 b)
        {
            c.s0 = a - b.s0;
            c.s1 = 0 - b.s1;
            if (a < b.s0)
                --c.s1;
            Debug.Assert((BigInteger)c ==
                         ((BigInteger)a - (BigInteger)b + ((BigInteger)1 << 128)) % ((BigInteger)1 << 128));
        }

        public static void Subtract(out UInt128 c, ref UInt128 a, ref UInt128 b)
        {
            c.s0 = a.s0 - b.s0;
            c.s1 = a.s1 - b.s1;
            if (a.s0 < b.s0)
                --c.s1;
            Debug.Assert((BigInteger)c ==
                         ((BigInteger)a - (BigInteger)b + ((BigInteger)1 << 128)) % ((BigInteger)1 << 128));
        }

        public static void Subtract(ref UInt128 a, ulong b)
        {
            if (a.s0 < b)
                --a.s1;
            a.s0 -= b;
        }

        public static void Subtract(ref UInt128 a, ref UInt128 b)
        {
            if (a.s0 < b.s0)
                --a.s1;
            a.s0 -= b.s0;
            a.s1 -= b.s1;
        }

        public static void Subtract(ref UInt128 a, UInt128 b)
        {
            Subtract(ref a, ref b);
        }

        public static UInt128 Subtract(UInt128 a, UInt128 b)
        {
            Subtract(out var c, ref a, ref b);
            return c;
        }

        public static void Swap(ref UInt128 a, ref UInt128 b)
        {
            var as0 = a.s0;
            var as1 = a.s1;
            a.s0 = b.s0;
            a.s1 = b.s1;
            b.s0 = as0;
            b.s1 = as1;
        }

        public static bool TryParse(string value, out UInt128 result)
        {
            return TryParse(value, NumberStyles.Integer, NumberFormatInfo.CurrentInfo, out result);
        }

        public static bool TryParse(string value, NumberStyles style, IFormatProvider provider, out UInt128 result)
        {
            if (!BigInteger.TryParse(value, style, provider, out var a))
            {
                result = Zero;
                return false;
            }

            Create(out result, a);
            return true;
        }

        public int CompareTo(UInt128 other)
        {
            return s1 != other.s1 ? s1.CompareTo(other.s1) : s0.CompareTo(other.s0);
        }

        public int CompareTo(int other)
        {
            if (s1 != 0 || other < 0)
                return 1;
            return s0.CompareTo((ulong)other);
        }

        public int CompareTo(uint other)
        {
            return s1 != 0 ? 1 : s0.CompareTo((ulong)other);
        }

        public int CompareTo(long other)
        {
            if (s1 != 0 || other < 0)
                return 1;
            return s0.CompareTo((ulong)other);
        }

        public int CompareTo(ulong other)
        {
            return s1 != 0 ? 1 : s0.CompareTo(other);
        }

        public int CompareTo(object obj)
        {
            if (obj == null)
                return 1;
            if (!(obj is UInt128))
                throw new ArgumentException();
            return CompareTo((UInt128)obj);
        }

        public bool Equals(UInt128 other)
        {
            return s0 == other.s0 && s1 == other.s1;
        }

        public bool Equals(int other)
        {
            return other >= 0 && s0 == (uint)other && s1 == 0;
        }

        public bool Equals(uint other)
        {
            return s0 == other && s1 == 0;
        }

        public bool Equals(long other)
        {
            return other >= 0 && s0 == (ulong)other && s1 == 0;
        }

        public bool Equals(ulong other)
        {
            return s0 == other && s1 == 0;
        }

        public override bool Equals(object obj)
        {
            if (!(obj is UInt128))
                return false;
            return Equals((UInt128)obj);
        }

        public byte[] GetBytes()
        {
            var bytes = new byte[16];

            for (var i = 0; i < 8; i++)
            {
                bytes[i] = (byte)((this.s0 >> (i * 8)) & 0xFF);
                bytes[i + 8] = (byte)((this.s1 >> (i * 8)) & 0xFF);
            }

            return bytes;
        }

        public override int GetHashCode()
        {
            return s0.GetHashCode() ^ s1.GetHashCode();
        }

        public override string ToString()
        {
            return ((BigInteger)this).ToString();
        }

        public string ToString(string format)
        {
            return ((BigInteger)this).ToString(format);
        }

        public string ToString(IFormatProvider provider)
        {
            return ToString(null, provider);
        }

        public string ToString(string format, IFormatProvider provider)
        {
            return ((BigInteger)this).ToString(format, provider);
        }

        private static ulong Add(ulong a, ulong b, ref uint carry)
        {
            var c = a + b;
            if (c < a && c < b)
                ++carry;
            return c;
        }

        private static void AddProducts(out UInt128 result, long x, ref UInt128 u, long y, ref UInt128 v)
        {
            // Compute x * u + y * v assuming y is negative and the result is positive and fits in
            // 128 bits.
            Multiply(out var product1, ref u, (ulong)x);
            Multiply(out var product2, ref v, (ulong)(-y));
            Subtract(out result, ref product1, ref product2);
        }

        private static void ArithmeticRightShift64(ref UInt128 c, int d)
        {
            if (d == 0)
                return;
            c.s0 = c.s1 << (64 - d) | c.s0 >> d;
            c.s1 = (ulong)((long)c.s1 >> d);
        }

        private static void Divide128(out UInt128 w, ref UInt128 u, uint v)
        {
            var r3 = u.r3;
            var w3 = r3 / v;
            var u0 = (ulong)(r3 - w3 * v);
            var u0u1 = u0 << 32 | u.r2;
            var w2 = (uint)(u0u1 / v);
            u0 = u0u1 - w2 * v;
            u0u1 = u0 << 32 | u.r1;
            var w1 = (uint)(u0u1 / v);
            u0 = u0u1 - w1 * v;
            u0u1 = u0 << 32 | u.r0;
            var w0 = (uint)(u0u1 / v);
            w.s1 = (ulong)w3 << 32 | w2;
            w.s0 = (ulong)w1 << 32 | w0;
            Debug.Assert((BigInteger)w == (BigInteger)u / v);
        }

        private static void Divide128(out UInt128 w, ref UInt128 u, ulong v)
        {
            w.s0 = w.s1 = 0;
            var dneg = GetBitLength((uint)(v >> 32));
            var d = 32 - dneg;
            var vPrime = v << d;
            var v1 = (uint)(vPrime >> 32);
            var v2 = (uint)vPrime;
            var r0 = u.r0;
            var r1 = u.r1;
            var r2 = u.r2;
            var r3 = u.r3;
            var r4 = (uint)0;
            if (d != 0)
            {
                r4 = r3 >> dneg;
                r3 = r3 << d | r2 >> dneg;
                r2 = r2 << d | r1 >> dneg;
                r1 = r1 << d | r0 >> dneg;
                r0 <<= d;
            }

            w.s1 = DivRem(r4, ref r3, ref r2, v1, v2);
            var q1 = DivRem(r3, ref r2, ref r1, v1, v2);
            var q0 = DivRem(r2, ref r1, ref r0, v1, v2);
            w.s0 = (ulong)q1 << 32 | q0;
            Debug.Assert((BigInteger)w == (BigInteger)u / v);
        }

        private static void Divide64(out UInt128 w, ulong u, ulong v)
        {
            w.s1 = 0;
            w.s0 = u / v;
            Debug.Assert((BigInteger)w == (BigInteger)u / v);
        }

        private static void Divide96(out UInt128 w, ref UInt128 u, uint v)
        {
            var r2 = u.r2;
            var w2 = r2 / v;
            var u0 = (ulong)(r2 - w2 * v);
            var u0u1 = u0 << 32 | u.r1;
            var w1 = (uint)(u0u1 / v);
            u0 = u0u1 - w1 * v;
            u0u1 = u0 << 32 | u.r0;
            var w0 = (uint)(u0u1 / v);
            w.s1 = w2;
            w.s0 = (ulong)w1 << 32 | w0;
            Debug.Assert((BigInteger)w == (BigInteger)u / v);
        }

        private static void Divide96(out UInt128 w, ref UInt128 u, ulong v)
        {
            w.s0 = w.s1 = 0;
            var dneg = GetBitLength((uint)(v >> 32));
            var d = 32 - dneg;
            var vPrime = v << d;
            var v1 = (uint)(vPrime >> 32);
            var v2 = (uint)vPrime;
            var r0 = u.r0;
            var r1 = u.r1;
            var r2 = u.r2;
            var r3 = (uint)0;
            if (d != 0)
            {
                r3 = r2 >> dneg;
                r2 = r2 << d | r1 >> dneg;
                r1 = r1 << d | r0 >> dneg;
                r0 <<= d;
            }

            var q1 = DivRem(r3, ref r2, ref r1, v1, v2);
            var q0 = DivRem(r2, ref r1, ref r0, v1, v2);
            w.s0 = (ulong)q1 << 32 | q0;
            w.s1 = 0;
            Debug.Assert((BigInteger)w == (BigInteger)u / v);
        }

        private static uint DivRem(uint u0, ref uint u1, ref uint u2, uint v1, uint v2)
        {
            var qhat = Q(u0, u1, u2, v1, v2);
            var carry = qhat * v2;
            var borrow = (long)u2 - (uint)carry;
            carry >>= 32;
            u2 = (uint)borrow;
            borrow >>= 32;
            carry += qhat * v1;
            borrow += (long)u1 - (uint)carry;
            carry >>= 32;
            u1 = (uint)borrow;
            borrow >>= 32;
            borrow += (long)u0 - (uint)carry;
            if (borrow != 0)
            {
                --qhat;
                carry = (ulong)u2 + v2;
                u2 = (uint)carry;
                carry >>= 32;
                carry += (ulong)u1 + v1;
                u1 = (uint)carry;
            }

            return (uint)qhat;
        }

        private static uint DivRem(uint u0, ref uint u1, ref uint u2, ref uint u3, uint v1, uint v2, uint v3)
        {
            var qhat = Q(u0, u1, u2, v1, v2);
            var carry = qhat * v3;
            var borrow = (long)u3 - (uint)carry;
            carry >>= 32;
            u3 = (uint)borrow;
            borrow >>= 32;
            carry += qhat * v2;
            borrow += (long)u2 - (uint)carry;
            carry >>= 32;
            u2 = (uint)borrow;
            borrow >>= 32;
            carry += qhat * v1;
            borrow += (long)u1 - (uint)carry;
            carry >>= 32;
            u1 = (uint)borrow;
            borrow >>= 32;
            borrow += (long)u0 - (uint)carry;
            if (borrow != 0)
            {
                --qhat;
                carry = (ulong)u3 + v3;
                u3 = (uint)carry;
                carry >>= 32;
                carry += (ulong)u2 + v2;
                u2 = (uint)carry;
                carry >>= 32;
                carry += (ulong)u1 + v1;
                u1 = (uint)carry;
            }

            return (uint)qhat;
        }

        private static uint DivRem(uint u0, ref uint u1, ref uint u2, ref uint u3, ref uint u4, uint v1, uint v2,
            uint v3, uint v4)
        {
            var qhat = Q(u0, u1, u2, v1, v2);
            var carry = qhat * v4;
            var borrow = (long)u4 - (uint)carry;
            carry >>= 32;
            u4 = (uint)borrow;
            borrow >>= 32;
            carry += qhat * v3;
            borrow += (long)u3 - (uint)carry;
            carry >>= 32;
            u3 = (uint)borrow;
            borrow >>= 32;
            carry += qhat * v2;
            borrow += (long)u2 - (uint)carry;
            carry >>= 32;
            u2 = (uint)borrow;
            borrow >>= 32;
            carry += qhat * v1;
            borrow += (long)u1 - (uint)carry;
            carry >>= 32;
            u1 = (uint)borrow;
            borrow >>= 32;
            borrow += (long)u0 - (uint)carry;
            if (borrow != 0)
            {
                --qhat;
                carry = (ulong)u4 + v4;
                u4 = (uint)carry;
                carry >>= 32;
                carry += (ulong)u3 + v3;
                u3 = (uint)carry;
                carry >>= 32;
                carry += (ulong)u2 + v2;
                u2 = (uint)carry;
                carry >>= 32;
                carry += (ulong)u1 + v1;
                u1 = (uint)carry;
            }

            return (uint)qhat;
        }

        private static uint DivRem128(out UInt128 rem, ref UInt128 a, ref UInt128 b)
        {
            var d = 32 - GetBitLength(b.r3);
            LeftShift64(out var v, ref b, d);
            var r4 = (uint)LeftShift64(out rem, ref a, d);
            var r3 = rem.r3;
            var r2 = rem.r2;
            var r1 = rem.r1;
            var r0 = rem.r0;
            var div = DivRem(r4, ref r3, ref r2, ref r1, ref r0, v.r3, v.r2, v.r1, v.r0);
            Create(out rem, r0, r1, r2, r3);
            RightShift64(ref rem, d);
            Debug.Assert((BigInteger)div == (BigInteger)a / (BigInteger)b);
            Debug.Assert((BigInteger)rem == (BigInteger)a % (BigInteger)b);
            return div;
        }

        private static ulong DivRem96(out UInt128 rem, ref UInt128 a, ref UInt128 b)
        {
            var d = 32 - GetBitLength(b.r2);
            LeftShift64(out var v, ref b, d);
            var r4 = (uint)LeftShift64(out rem, ref a, d);
            var v1 = v.r2;
            var v2 = v.r1;
            var v3 = v.r0;
            var r3 = rem.r3;
            var r2 = rem.r2;
            var r1 = rem.r1;
            var r0 = rem.r0;
            var q1 = DivRem(r4, ref r3, ref r2, ref r1, v1, v2, v3);
            var q0 = DivRem(r3, ref r2, ref r1, ref r0, v1, v2, v3);
            Create(out rem, r0, r1, r2, 0);
            var div = (ulong)q1 << 32 | q0;
            RightShift64(ref rem, d);
            Debug.Assert((BigInteger)div == (BigInteger)a / (BigInteger)b);
            Debug.Assert((BigInteger)rem == (BigInteger)a % (BigInteger)b);
            return div;
        }

        private static ulong FloorSqrt(ref UInt128 a, ulong s)
        {
            var sprev = (ulong)0;
            while (true)
            {
                Divide(out var div, ref a, s);
                Add(out var sum, ref div, s);
                var snext = sum.S0 >> 1;
                if (sum.S1 != 0)
                    snext |= (ulong)1 << 63;
                if (snext == sprev)
                {
                    if (snext < s)
                        s = snext;
                    break;
                }

                sprev = s;
                s = snext;
            }

            return s;
        }

        private static int GetBitLength(uint value)
        {
            var tt = value >> 16;
            if (tt != 0)
            {
                var t = tt >> 8;
                if (t != 0)
                    return bitLength[t] + 24;
                return bitLength[tt] + 16;
            }
            else
            {
                var t = value >> 8;
                if (t != 0)
                    return bitLength[t] + 8;
                return bitLength[value];
            }
        }

        private static int GetBitLength(ulong value)
        {
            var r1 = value >> 32;
            if (r1 != 0)
                return GetBitLength((uint)r1) + 32;
            return GetBitLength((uint)value);
        }

        private static ulong LeftShift64(out UInt256 c, ref UInt256 a, int d)
        {
            if (d == 0)
            {
                c = a;
                return 0;
            }

            var dneg = 64 - d;
            c.S3 = a.S3 << d | a.S2 >> dneg;
            c.S2 = a.S2 << d | a.S1 >> dneg;
            c.S1 = a.S1 << d | a.S0 >> dneg;
            c.S0 = a.S0 << d;
            return a.S3 >> dneg;
        }

        private static ulong LeftShift64(ref UInt128 c, int d)
        {
            if (d == 0)
                return 0;
            var dneg = 64 - d;
            var result = c.s1 >> dneg;
            c.s1 = c.s1 << d | c.s0 >> dneg;
            c.s0 <<= d;
            return result;
        }

        private static bool LessThan(ref UInt128 a, long b)
        {
            return b >= 0 && a.s1 == 0 && a.s0 < (ulong)b;
        }

        private static bool LessThan(long a, ref UInt128 b)
        {
            return a < 0 || b.s1 != 0 || (ulong)a < b.s0;
        }

        private static bool LessThan(ref UInt128 a, ulong b)
        {
            return a.s1 == 0 && a.s0 < b;
        }

        private static bool LessThan(ulong a, ref UInt128 b)
        {
            return b.s1 != 0 || a < b.s0;
        }

        private static bool LessThan(ref UInt128 a, ref UInt128 b)
        {
            if (a.s1 != b.s1)
                return a.s1 < b.s1;
            return a.s0 < b.s0;
        }

        private static void Multiply(out UInt256 c, ref UInt128 a, ref UInt128 b)
        {
            Multiply64(out var c00, a.s0, b.s0);
            Multiply64(out var c01, a.s0, b.s1);
            Multiply64(out var c10, a.s1, b.s0);
            Multiply64(out var c11, a.s1, b.s1);
            var carry1 = (uint)0;
            var carry2 = (uint)0;
            c.S0 = c00.S0;
            c.S1 = Add(Add(c00.s1, c01.s0, ref carry1), c10.s0, ref carry1);
            c.S2 = Add(Add(Add(c01.s1, c10.s1, ref carry2), c11.s0, ref carry2), carry1, ref carry2);
            c.S3 = c11.s1 + carry2;
            Debug.Assert((BigInteger)c == (BigInteger)a * (BigInteger)b);
        }

        private static void Multiply128(out UInt128 w, ref UInt128 u, uint v)
        {
            Multiply64(out w, u.s0, v);
            w.s1 += u.s1 * v;
            Debug.Assert((BigInteger)w == (BigInteger)u * v % ((BigInteger)1 << 128));
        }

        private static void Multiply128(out UInt128 w, ref UInt128 u, ulong v)
        {
            Multiply64(out w, u.s0, v);
            w.s1 += u.s1 * v;
            Debug.Assert((BigInteger)w == (BigInteger)u * v % ((BigInteger)1 << 128));
        }

        private static void Multiply128(out UInt128 w, ref UInt128 u, ref UInt128 v)
        {
            Multiply64(out w, u.s0, v.s0);
            w.s1 += u.s1 * v.s0 + u.s0 * v.s1;
            Debug.Assert((BigInteger)w == (BigInteger)u * v % ((BigInteger)1 << 128));
        }

        private static void Multiply64(out UInt128 w, uint u, uint v)
        {
            w.s0 = (ulong)u * v;
            w.s1 = 0;
            Debug.Assert((BigInteger)w == (BigInteger)u * v);
        }

        private static void Multiply64(out UInt128 w, ulong u, uint v)
        {
            var u0 = (ulong)(uint)u;
            var u1 = u >> 32;
            var carry = u0 * v;
            var r0 = (uint)carry;
            carry = (carry >> 32) + u1 * v;
            w.s0 = carry << 32 | r0;
            w.s1 = carry >> 32;
            Debug.Assert((BigInteger)w == (BigInteger)u * v);
        }

        private static void Multiply64(out UInt128 w, ulong u, ulong v)
        {
            var u0 = (ulong)(uint)u;
            var u1 = u >> 32;
            var v0 = (ulong)(uint)v;
            var v1 = v >> 32;
            var carry = u0 * v0;
            var r0 = (uint)carry;
            carry = (carry >> 32) + u0 * v1;
            var r2 = carry >> 32;
            carry = (uint)carry + u1 * v0;
            w.s0 = carry << 32 | r0;
            w.s1 = (carry >> 32) + r2 + u1 * v1;
            Debug.Assert((BigInteger)w == (BigInteger)u * v);
        }

        private static void Multiply64(out UInt128 w, ulong u, ulong v, ulong c)
        {
            var u0 = (ulong)(uint)u;
            var u1 = u >> 32;
            var v0 = (ulong)(uint)v;
            var v1 = v >> 32;
            var carry = u0 * v0 + (uint)c;
            var r0 = (uint)carry;
            carry = (carry >> 32) + u0 * v1 + (c >> 32);
            var r2 = carry >> 32;
            carry = (uint)carry + u1 * v0;
            w.s0 = carry << 32 | r0;
            w.s1 = (carry >> 32) + r2 + u1 * v1;
            Debug.Assert((BigInteger)w == (BigInteger)u * v + c);
        }

        private static ulong MultiplyHigh64(ulong u, ulong v, ulong c)
        {
            var u0 = (ulong)(uint)u;
            var u1 = u >> 32;
            var v0 = (ulong)(uint)v;
            var v1 = v >> 32;
            var carry = ((u0 * v0 + (uint)c) >> 32) + u0 * v1 + (c >> 32);
            var r2 = carry >> 32;
            carry = (uint)carry + u1 * v0;
            return (carry >> 32) + r2 + u1 * v1;
        }

        private static ulong Q(uint u0, uint u1, uint u2, uint v1, uint v2)
        {
            var u0u1 = (ulong)u0 << 32 | u1;
            var qhat = u0 == v1 ? uint.MaxValue : u0u1 / v1;
            var r = u0u1 - qhat * v1;
            if (r == (uint)r && v2 * qhat > (r << 32 | u2))
            {
                --qhat;
                r += v1;
                if (r == (uint)r && v2 * qhat > (r << 32 | u2))
                {
                    --qhat;
                    r += v1;
                }
            }

            return qhat;
        }

        private static void Remainder(out UInt128 c, ref UInt256 a, ref UInt128 b)
        {
            if (b.r3 == 0)
                Remainder192(out c, ref a, ref b);
            else
                Remainder256(out c, ref a, ref b);
        }

        private static uint Remainder128(ref UInt128 u, uint v)
        {
            var u0 = (ulong)(u.r3 % v);
            var u0u1 = u0 << 32 | u.r2;
            u0 = u0u1 % v;
            u0u1 = u0 << 32 | u.r1;
            u0 = u0u1 % v;
            u0u1 = u0 << 32 | u.r0;
            return (uint)(u0u1 % v);
        }

        private static ulong Remainder128(ref UInt128 u, ulong v)
        {
            var dneg = GetBitLength((uint)(v >> 32));
            var d = 32 - dneg;
            var vPrime = v << d;
            var v1 = (uint)(vPrime >> 32);
            var v2 = (uint)vPrime;
            var r0 = u.r0;
            var r1 = u.r1;
            var r2 = u.r2;
            var r3 = u.r3;
            var r4 = (uint)0;
            if (d != 0)
            {
                r4 = r3 >> dneg;
                r3 = r3 << d | r2 >> dneg;
                r2 = r2 << d | r1 >> dneg;
                r1 = r1 << d | r0 >> dneg;
                r0 <<= d;
            }

            DivRem(r4, ref r3, ref r2, v1, v2);
            DivRem(r3, ref r2, ref r1, v1, v2);
            DivRem(r2, ref r1, ref r0, v1, v2);
            return ((ulong)r1 << 32 | r0) >> d;
        }

        private static void Remainder192(out UInt128 c, ref UInt256 a, ref UInt128 b)
        {
            var d = 32 - GetBitLength(b.r2);
            LeftShift64(out var v, ref b, d);
            var v1 = v.r2;
            var v2 = v.r1;
            var v3 = v.r0;
            LeftShift64(out var rem, ref a, d);
            var r6 = rem.R6;
            var r5 = rem.R5;
            var r4 = rem.R4;
            var r3 = rem.R3;
            var r2 = rem.R2;
            var r1 = rem.R1;
            var r0 = rem.R0;
            DivRem(r6, ref r5, ref r4, ref r3, v1, v2, v3);
            DivRem(r5, ref r4, ref r3, ref r2, v1, v2, v3);
            DivRem(r4, ref r3, ref r2, ref r1, v1, v2, v3);
            DivRem(r3, ref r2, ref r1, ref r0, v1, v2, v3);
            Create(out c, r0, r1, r2, 0);
            RightShift64(ref c, d);
            Debug.Assert((BigInteger)c == (BigInteger)a % (BigInteger)b);
        }

        private static void Remainder256(out UInt128 c, ref UInt256 a, ref UInt128 b)
        {
            var d = 32 - GetBitLength(b.r3);
            LeftShift64(out var v, ref b, d);
            var v1 = v.r3;
            var v2 = v.r2;
            var v3 = v.r1;
            var v4 = v.r0;
            var r8 = (uint)LeftShift64(out var rem, ref a, d);
            var r7 = rem.R7;
            var r6 = rem.R6;
            var r5 = rem.R5;
            var r4 = rem.R4;
            var r3 = rem.R3;
            var r2 = rem.R2;
            var r1 = rem.R1;
            var r0 = rem.R0;
            DivRem(r8, ref r7, ref r6, ref r5, ref r4, v1, v2, v3, v4);
            DivRem(r7, ref r6, ref r5, ref r4, ref r3, v1, v2, v3, v4);
            DivRem(r6, ref r5, ref r4, ref r3, ref r2, v1, v2, v3, v4);
            DivRem(r5, ref r4, ref r3, ref r2, ref r1, v1, v2, v3, v4);
            DivRem(r4, ref r3, ref r2, ref r1, ref r0, v1, v2, v3, v4);
            Create(out c, r0, r1, r2, r3);
            RightShift64(ref c, d);
            Debug.Assert((BigInteger)c == (BigInteger)a % (BigInteger)b);
        }

        private static uint Remainder96(ref UInt128 u, uint v)
        {
            var u0 = (ulong)(u.r2 % v);
            var u0u1 = u0 << 32 | u.r1;
            u0 = u0u1 % v;
            u0u1 = u0 << 32 | u.r0;
            return (uint)(u0u1 % v);
        }

        private static ulong Remainder96(ref UInt128 u, ulong v)
        {
            var dneg = GetBitLength((uint)(v >> 32));
            var d = 32 - dneg;
            var vPrime = v << d;
            var v1 = (uint)(vPrime >> 32);
            var v2 = (uint)vPrime;
            var r0 = u.r0;
            var r1 = u.r1;
            var r2 = u.r2;
            var r3 = (uint)0;
            if (d != 0)
            {
                r3 = r2 >> dneg;
                r2 = r2 << d | r1 >> dneg;
                r1 = r1 << d | r0 >> dneg;
                r0 <<= d;
            }

            DivRem(r3, ref r2, ref r1, v1, v2);
            DivRem(r2, ref r1, ref r0, v1, v2);
            return ((ulong)r1 << 32 | r0) >> d;
        }

        private static void RightShift64(ref UInt128 c, int d)
        {
            if (d == 0)
                return;
            c.s0 = c.s1 << (64 - d) | c.s0 >> d;
            c.s1 >>= d;
        }

        private static void Square64(out UInt128 w, ulong u)
        {
            var u0 = (ulong)(uint)u;
            var u1 = u >> 32;
            var carry = u0 * u0;
            var r0 = (uint)carry;
            var u0u1 = u0 * u1;
            carry = (carry >> 32) + u0u1;
            var r2 = carry >> 32;
            carry = (uint)carry + u0u1;
            w.s0 = carry << 32 | r0;
            w.s1 = (carry >> 32) + r2 + u1 * u1;
            Debug.Assert((BigInteger)w == (BigInteger)u * u);
        }

        private struct UInt256
        {
            public ulong S0;
            public ulong S1;
            public ulong S2;
            public ulong S3;

            public uint R0 => (uint)S0;
            public uint R1 => (uint)(S0 >> 32);
            public uint R2 => (uint)S1;
            public uint R3 => (uint)(S1 >> 32);
            public uint R4 => (uint)S2;
            public uint R5 => (uint)(S2 >> 32);
            public uint R6 => (uint)S3;
            public uint R7 => (uint)(S3 >> 32);

            public UInt128 T0
            {
                get
                {
                    Create(out var result, S0, S1);
                    return result;
                }
            }

            public UInt128 T1
            {
                get
                {
                    Create(out var result, S2, S3);
                    return result;
                }
            }

            public static implicit operator BigInteger(UInt256 a)
            {
                return (BigInteger)a.S3 << 192 | (BigInteger)a.S2 << 128 | (BigInteger)a.S1 << 64 | a.S0;
            }

            public override string ToString()
            {
                return ((BigInteger)this).ToString();
            }
        }
    }
}
'''
'''--- Src/NearClientUnity/Utilities/Web.cs ---
﻿using Newtonsoft.Json.Linq;
using System;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading.Tasks;
using System.Web;

namespace NearClientUnity.Utilities
{
    public static class Web
    {
        public static async Task<dynamic> FetchJsonAsync(string url, string json = "")
        {
            using (var client = new HttpClient())
            {
                client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

                HttpResponseMessage response;

                if (!string.IsNullOrEmpty(json))
                {
                    HttpContent content = new StringContent(json, Encoding.UTF8, "application/json");
                    content.Headers.ContentType = new MediaTypeHeaderValue("application/json");
                    response = client.PostAsync(url, content).Result;
                }
                else
                {
                    response = await client.GetAsync(url);
                }

                if (response.IsSuccessStatusCode)
                {
                    string jsonString = await response.Content.ReadAsStringAsync();

                    dynamic rawResult = JObject.Parse(jsonString);

                    if (rawResult.error != null && rawResult.error.data != null)
                    {
                        throw new Exception($"[{rawResult.error.code}]: {rawResult.error.data.error_type}: {rawResult.error.data.error_message}");
                    }

                    return rawResult.result;
                }
                else
                {
                    throw new HttpException((int)response.StatusCode, response.Content.ToString());
                }
            }
        }

        public static async Task<dynamic> FetchJsonAsync(ConnectionInfo connection, string json = "")
        {
            var url = connection.Url;
            var result = await FetchJsonAsync(url, json);
            return result;
        }
    }
}
'''
'''--- Src/NearClientUnity/WalletAccount.cs ---
﻿using NearClientUnity.KeyStores;
using NearClientUnity.Utilities;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Dynamic;
using System.Net.Http;
using System.Reflection;
using System.Threading.Tasks;
using System.Web;
using System.Web.Util;

namespace NearClientUnity
{
    public class WalletAccount
    {
        private const string LocalStorageKeySuffix = "_wallet_auth_key";
        private const string LoginWalletUrlSuffix = "/login/";
        private const string PendingAccessKeyPrefix = "pending_key";

        private dynamic _authData = new ExpandoObject();
        private string _authDataKey;
        private IExternalAuthService _authService;
        private IExternalAuthStorage _authStorage;
        private KeyStore _keyStore;        
        private string _networkId;
        private string _walletBaseUrl;

        public WalletAccount(Near near, string appKeyPrefix, IExternalAuthService authService, IExternalAuthStorage authStorage)
        {
            _networkId = near.Config.NetworkId;
            _walletBaseUrl = near.Config.WalletUrl;
            appKeyPrefix = string.IsNullOrEmpty(appKeyPrefix) || string.IsNullOrWhiteSpace(appKeyPrefix)
                ? "default"
                : appKeyPrefix;
            _authDataKey = $"{appKeyPrefix}{LocalStorageKeySuffix}";
            _keyStore = (near.Connection.Signer as InMemorySigner).KeyStore;
            _authService = authService;
            _authStorage = authStorage;

           
            if (_authStorage.HasKey(_authDataKey))
            {
                _authData.AccountId = _authStorage.GetValue(_authDataKey);
            }
            else
            {
                _authData.AccountId = null;
            }
        }

        public IExternalAuthStorage NearAuthStorage => _authStorage;

        public async Task CompleteSignIn(string url)
        {
            HttpEncoder.Current = HttpEncoder.Default;
            Uri uri = new Uri(url);
            string publicKey = HttpUtility.ParseQueryString(uri.Query).Get("public_key");
            string accountId = HttpUtility.ParseQueryString(uri.Query).Get("account_id");
            _authData.AccountId = accountId;

            try
            {
                _authStorage.Add(_authDataKey, accountId);                
                await MoveKeyFromTempToPermanent(accountId, publicKey);
            }
            catch (Exception e)
            {
                throw e;
            }
        }

        public string GetAccountId()
        {
            return _authData.AccountId ?? "";
        }

        public bool IsSignedIn()
        {
            if (_authData.AccountId == null) return false;
            return true;
        }

        public async Task<bool> RequestSignIn(string contractId, string title, Uri successUrl, Uri failureUrl, Uri appUrl)
        {
            if (!string.IsNullOrWhiteSpace(GetAccountId())) return true;
            if (await _keyStore.GetKeyAsync(_networkId, GetAccountId()) != null) return true;

            var accessKey = KeyPair.FromRandom("ed25519");

            var url = new UriBuilder(_walletBaseUrl + LoginWalletUrlSuffix);

            url.Query = new FormUrlEncodedContent(new Dictionary<string, string>()
            {
                { "title", title },
                { "contract_id", contractId },
                { "success_url", successUrl.AbsoluteUri },
                { "failure_url", failureUrl.AbsoluteUri },
                { "app_url", appUrl.AbsoluteUri},
                { "public_key", accessKey.GetPublicKey().ToString() },
            }).ReadAsStringAsync().Result;

            await _keyStore.SetKeyAsync(_networkId, PendingAccessKeyPrefix + accessKey.GetPublicKey(), accessKey);
            return _authService.OpenUrl(url.Uri.AbsoluteUri);
        }

        public void SignOut()
        {
            _authData = new ExpandoObject();
            _authData.AccountId = null;
            _authStorage.DeleteKey(_authDataKey);
        }

        private async Task MoveKeyFromTempToPermanent(string accountId, string publicKey)
        {
            var pendingAccountId = PendingAccessKeyPrefix + publicKey;
            KeyPair keyPair;
            try
            {
                keyPair = await _keyStore.GetKeyAsync(_networkId, pendingAccountId);
            }
            catch (Exception)
            {
                throw new Exception("Wallet account error: no KeyPair");
            }

            try
            {
                await _keyStore.SetKeyAsync(_networkId, accountId, keyPair);
            }
            catch (Exception e)
            {
                throw e;
            }

            try
            {
                await _keyStore.RemoveKeyAsync(_networkId, PendingAccessKeyPrefix + publicKey);
            }
            catch (Exception e)
            {
                throw e;
            }
        }
    }
}
'''
'''--- Src/NearClientUnityTests/AccessKeyTests.cs ---
﻿using NearClientUnity;
using NearClientUnity.Utilities;
using NearClientUnityTests.Utils;
using NUnit.Framework;
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Linq;
using System.Threading.Tasks;

namespace NearClientUnityTests
{
    [TestFixture]
    public class AccessKeyTests
    {
        private ContractNear _contract;
        private string _contractId;
        private Near _near;
        private Account _testAccount;
        private Account _workingAccount;

        public void ClassInit()
        {
            ClassInitAsync().Wait();
        }

        [OneTimeSetUp]
        public async Task ClassInitAsync()
        {
            _near = await TestUtils.SetUpTestConnection();
            var masterAccount = await _near.AccountAsync(accountId: TestUtils.TestAccountName);
            var amount = TestUtils.InitialBalance * new UInt128(100);
            _testAccount = await TestUtils.CreateAccount(masterAccount: masterAccount, amount: amount);
        }

        public void SetupBeforeEachTest()
        {
            SetupBeforeEachTestAsync().Wait();
        }

        [SetUp]
        public async Task SetupBeforeEachTestAsync()
        {
            _contractId = TestUtils.GenerateUniqueString(prefix: "test");
            _workingAccount = await TestUtils.CreateAccount(masterAccount: _testAccount, amount: TestUtils.InitialBalance);
            _contract = await TestUtils.DeployContract(_workingAccount, _contractId, new UInt128(10000000));
        }

        [Test]
        public async Task ShouldLoadingAccountAfterAddingAFullKey()
        {
            var keypair = KeyPairEd25519.FromRandom();
            var publicKey = keypair.GetPublicKey();
            await _workingAccount.AddKeyAsync(publicKey.ToString(), null, "", "");
            var rawAccessKeys = await _workingAccount.GetAccessKeysAsync();
            var accessKeys = new List<dynamic>();
            foreach (dynamic accessKey in rawAccessKeys)
            {
                accessKeys.Add(accessKey);
            }
            Assert.That(accessKeys, Has.Exactly(2).Items);
            var addedKey = accessKeys.First(obj => ((string)obj.public_key).Equals(publicKey.ToString()));
            Assert.IsNotNull(addedKey);
            var permission = (string)addedKey.access_key.permission;
            Assert.AreEqual(permission, "FullAccess");
        }

        [Test]
        public async Task ShouldMakeFunctionCallUsingAccessKey()
        {
            var keypair = KeyPairEd25519.FromRandom();
            var publicKey = keypair.GetPublicKey();
            await _workingAccount.AddKeyAsync(publicKey.ToString(), new UInt128(10000000), "", _contractId);
            var signer = (InMemorySigner)this._near.Connection.Signer;
            await signer.KeyStore.SetKeyAsync(TestUtils.NetworkId, _workingAccount.AccountId, keypair);
            var setCallValue = TestUtils.GenerateUniqueString(prefix: "setCallPrefix");
            dynamic args = new ExpandoObject();
            args.value = setCallValue;
            await _contract.Change("setValue", args, null, new UInt128(0));
            var viewArgs = new ExpandoObject();
            var testValue = await _contract.View("getValue", viewArgs);
            Assert.AreEqual(testValue.result, setCallValue);
        }

        [Test]
        public async Task ShouldRemoveAccessKeyNoLongerWorks()
        {
            var keypair = KeyPairEd25519.FromRandom();
            var publicKey = keypair.GetPublicKey();
            await _workingAccount.AddKeyAsync(publicKey.ToString(), new UInt128(400000), "", _contractId);
            await _workingAccount.DeleteKeyAsync(publicKey: publicKey.ToString());
            var signer = (InMemorySigner)this._near.Connection.Signer;
            await signer.KeyStore.SetKeyAsync(TestUtils.NetworkId, _workingAccount.AccountId, keypair);
            dynamic args = new ExpandoObject();
            args.value = "test";
            try
            {
                var changeResult = await _contract.Change("setValue", args, null, new UInt128(0));
                Assert.Fail("should throw an error");
            }
            catch (Exception e)
            {
                Assert.Pass("pass with exception", e);
            }
        }

        [Test]
        public async Task ShouldViewAccountDetailsAfterAddingAccessKeys()
        {
            var keypair = KeyPairEd25519.FromRandom();
            var publicKey = keypair.GetPublicKey();
            await _workingAccount.AddKeyAsync(publicKey.ToString(), new UInt128(1000000000), "", _contractId);
            var contractId2 = "test_contract2_" + (int)DateTime.UtcNow.Subtract(new DateTime(1970, 1, 1)).TotalSeconds;
            var contract2 = await TestUtils.DeployContract(_workingAccount, contractId2, new UInt128(10000000));
            var keypair2 = KeyPairEd25519.FromRandom();
            var publicKey2 = keypair2.GetPublicKey();
            await _workingAccount.AddKeyAsync(publicKey2.ToString(), new UInt128(2000000000), "", contractId2);
            var details = await _workingAccount.GetAccountDetailsAsync();

            var expectedResult = new List<dynamic>();
            dynamic authorizedApp1 = new ExpandoObject();
            authorizedApp1.ContractId = _contractId;
            authorizedApp1.Amount = new UInt128(1000000000);
            authorizedApp1.PublicKey = publicKey.ToString();
            expectedResult.Add(authorizedApp1);

            dynamic authorizedApp2 = new ExpandoObject();
            authorizedApp2.ContractId = contractId2;
            authorizedApp2.Amount = new UInt128(2000000000);
            authorizedApp2.PublicKey = publicKey2.ToString();
            expectedResult.Add(authorizedApp2);

            IEnumerable<string> expected = expectedResult.Select(x => ((object)x.ContractId).ToString()).ToList().OrderBy(s => s);
            dynamic[] apps = details.AuthorizedApps;
            IEnumerable<string> real = apps.Select(x => ((object)x.ContractId).ToString()).ToList().OrderBy(s => s);
            Assert.IsTrue(real.SequenceEqual(expected));
        }
    }
}
'''
'''--- Src/NearClientUnityTests/AccountTests.cs ---
﻿using NearClientUnity;
using NearClientUnity.Utilities;
using NearClientUnityTests.Utils;
using NUnit.Framework;
using System;
using System.Threading.Tasks;

namespace NearClientUnityTests
{
    [TestFixture]
    internal class AccountTests
    {
        private Near _near;
        private Account _workingAccount;

        [OneTimeSetUp]
        public async Task ClassInitAsync()
        {
            _near = await TestUtils.SetUpTestConnection();
            _workingAccount = await TestUtils.CreateAccount(await _near.AccountAsync(TestUtils.TestAccountName), TestUtils.InitialBalance * (UInt128)100);
        }

        [Test]
        public async Task CreateAccountAndThenViewAccountReturnsTheCreatedAccount()
        {
            var newAccountName = TestUtils.GenerateUniqueString("test");
            var newAccountPublicKey = "9AhWenZ3JddamBoyMqnTbp7yVbRuvqAv3zwfrWgfVRJE";
            await _workingAccount.CreateAccountAsync(newAccountName, newAccountPublicKey, TestUtils.InitialBalance);
            var newAccount = new Account(_near.Connection, newAccountName);
            var state = await newAccount.GetStateAsync();
            var expectedResult = TestUtils.InitialBalance.ToString();
            var actualResult = state.Amount;
            Assert.AreEqual(expectedResult, actualResult);
        }

        [Test]
        public void CreateExistingAccount()
        {
            Assert.That(async () => await _workingAccount.CreateAccountAsync(_workingAccount.AccountId, "9AhWenZ3JddamBoyMqnTbp7yVbRuvqAv3zwfrWgfVRJE", 100), Throws.TypeOf<Exception>());
        }

        [Test]
        public async Task DeleteAccount()
        {
            var sender = await TestUtils.CreateAccount(_workingAccount, TestUtils.InitialBalance);
            var receiver = await TestUtils.CreateAccount(_workingAccount, TestUtils.InitialBalance);
            await sender.DeleteAccountAsync(receiver.AccountId);
            var reloaded = new Account(sender.Connection, sender.AccountId);
            Assert.That(async () => await reloaded.GetStateAsync(), Throws.TypeOf<Exception>());
        }

        [Test]
        public async Task SendMoney()
        {
            var sender = await TestUtils.CreateAccount(_workingAccount, TestUtils.InitialBalance);
            var receiver = await TestUtils.CreateAccount(_workingAccount, TestUtils.InitialBalance);
            await sender.SendMoneyAsync(receiver.AccountId, (UInt128)10000);
            await receiver.FetchStateAsync();
            var state = await receiver.GetStateAsync();
            var expectedResult = (TestUtils.InitialBalance + (UInt128)10000).ToString();
            var actualResult = state.Amount;
            Assert.AreEqual(expectedResult, actualResult);
        }

        [Test]
        public async Task ViewPreDefinedAccountWorksAndReturnsCorrectName()
        {
            var expectedResult = "11111111111111111111111111111111";
            var rawResult = await _workingAccount.GetStateAsync();
            var actualResult = rawResult.CodeHash;
            Assert.AreEqual(expectedResult, actualResult);
        }
    }
}
'''
'''--- Src/NearClientUnityTests/AccountWithDeployContractTests.cs ---
﻿using NearClientUnity;
using NearClientUnity.Providers;
using NearClientUnity.Utilities;
using NearClientUnityTests.Utils;
using NUnit.Framework;
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.IO;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;

[assembly: InternalsVisibleTo("NearClientUnity")]

namespace NearClientUnityTests
{
    public class TestConsoleWriter : TextWriter
    {
        private readonly List<string> _logs;
        private StringBuilder content = new StringBuilder();

        public TestConsoleWriter(List<string> logs)
        {
            _logs = logs;
        }

        public override Encoding Encoding
        {
            get
            {
                return Encoding.UTF8;
            }
        }

        public override void Write(char value)
        {
            base.Write(value);
            content.Append(value);
            if (value == '\n')
            {
                // for Windows
                var result = content.ToString().Replace("\r\n", string.Empty);
                // for other OS
                result = result.Replace("\n", string.Empty);
                _logs.Add(result);
                content = new StringBuilder();
            }
        }
    }

    [TestFixture]
    internal class AccountWithDeployContractTests
    {
        private dynamic _contract;
        private string _contractId;
        private List<string> _logs;
        private Near _near;
        private Account _workingAccount;
        private TextWriter defaultConsoleOut;

        [TearDown]
        public void AfterEachTest()
        {
            Console.SetOut(defaultConsoleOut);
            defaultConsoleOut = null;
            _logs = null;
        }

        [SetUp]
        public void BeforeEachTest()
        {
            defaultConsoleOut = Console.Out;
            _logs = new List<string>();
            Console.SetOut(new TestConsoleWriter(_logs));
        }

        [Test]
        public void CanGetAssertMessageFromMethodResult()
        {
            Assert.That(async () => await _contract.triggerAssert(), Throws.TypeOf<Exception>());
            Assert.AreEqual($"[{_contractId}]: LOG: log before assert", _logs[0]);
            Assert.IsTrue(_logs[1].Contains($"[{_contractId}]: ABORT: expected to fail, filename: \"assembly/main.ts\""));
        }

        [Test]
        public async Task CanGetLogsFromMethodResult()
        {
            string[] expectedResult = new[] { $"[{_contractId}]: LOG: log1", $"[{_contractId}]: LOG: log2" };
            await _contract.generateLogs();
            string[] actualResult = _logs.ToArray();
            Assert.AreEqual(expectedResult, actualResult);
        }

        public void ClassInit()
        {
            ClassInitAsync().Wait();
        }

        [OneTimeSetUp]
        public async Task ClassInitAsync()
        {
            _contractId = TestUtils.GenerateUniqueString("test_contract");
            _near = await TestUtils.SetUpTestConnection();
            _workingAccount = await TestUtils.CreateAccount(await _near.AccountAsync(TestUtils.TestAccountName), TestUtils.InitialBalance * (UInt128)100);

            var newPublicKey = await _near.Connection.Signer.CreateKeyAsync(_contractId, TestUtils.NetworkId);

            var data = Wasm.GetBytes();

            await _workingAccount.CreateAndDeployContractAsync(_contractId, newPublicKey, data, (UInt128)1000000);

            var contractOptions = new ContractOptions()
            {
                viewMethods = new string[] { "hello", "getValue", "getAllKeys", "returnHiWithLogs" },
                changeMethods = new string[] { "setValue", "generateLogs", "triggerAssert", "testSetRemove" },
            };

            _contract = new ContractNear(_workingAccount, _contractId, contractOptions);
        }

        [Test]
        public async Task MakeFunctionCallsViaAccount()
        {
            var expectedResult = "hello trex";
            dynamic args = new ExpandoObject();
            args.name = "trex";
            var rawJsonObject = await _workingAccount.ViewFunctionAsync(_contractId, "hello", args);

            var result = new List<byte>();

            foreach (var item in rawJsonObject.result)
            {
                result.Add((byte)item);
            }

            var actualResult = Encoding.UTF8.GetString(result.ToArray()).Trim('"');

            Assert.AreEqual(expectedResult, actualResult);

            var setCallValue = TestUtils.GenerateUniqueString("setCallPrefix");
            expectedResult = setCallValue;

            args = new ExpandoObject();
            args.value = setCallValue;

            actualResult = Provider.GetTransactionLastResult(await _workingAccount.FunctionCallAsync(_contractId, "setValue", args));

            Assert.AreEqual(expectedResult, actualResult);

            args = new ExpandoObject();
            rawJsonObject = await _workingAccount.ViewFunctionAsync(_contractId, "getValue", args);
            result = new List<byte>();

            foreach (var item in rawJsonObject.result)
            {
                result.Add((byte)item);
            }

            actualResult = Encoding.UTF8.GetString(result.ToArray()).Trim('"');

            Assert.AreEqual(expectedResult, actualResult);
        }

        [Test]
        public async Task MakeFunctionCallsViaContract()
        {
            var expectedResult = "hello trex";

            dynamic args = new ExpandoObject();
            args.name = "trex";

            var rawJsonObject = await _contract.hello(args);

            var result = new List<byte>();

            foreach (var item in rawJsonObject.result)
            {
                result.Add((byte)item);
            }

            var actualResult = Encoding.UTF8.GetString(result.ToArray()).Trim('"');

            Assert.AreEqual(expectedResult, actualResult);

            var setCallValue = TestUtils.GenerateUniqueString("setCallPrefix");
            expectedResult = setCallValue;

            args = new ExpandoObject();
            args.value = setCallValue;

            actualResult = await _contract.setValue(args);

            Assert.AreEqual(expectedResult, actualResult);

            rawJsonObject = await _contract.getValue();

            result = new List<byte>();

            foreach (var item in rawJsonObject.result)
            {
                result.Add((byte)item);
            }

            actualResult = Encoding.UTF8.GetString(result.ToArray()).Trim('"');

            Assert.AreEqual(expectedResult, actualResult);
        }

        [Test]
        public async Task MakeFunctionCallsViaContractWithGas()
        {
            ulong gas = 100000;
            var expectedResult = "hello trex";

            dynamic args = new ExpandoObject();
            args.name = "trex";

            var rawJsonObject = await _contract.hello(args);

            var result = new List<byte>();

            foreach (var item in rawJsonObject.result)
            {
                result.Add((byte)item);
            }

            var actualResult = Encoding.UTF8.GetString(result.ToArray()).Trim('"');

            Assert.AreEqual(expectedResult, actualResult);

            var setCallValue = TestUtils.GenerateUniqueString("setCallPrefix");
            expectedResult = setCallValue;

            args = new ExpandoObject();
            args.value = setCallValue;

            actualResult = await _contract.setValue(args, gas);

            Assert.AreEqual(expectedResult, actualResult);

            rawJsonObject = await _contract.getValue();

            result = new List<byte>();

            foreach (var item in rawJsonObject.result)
            {
                result.Add((byte)item);
            }

            actualResult = Encoding.UTF8.GetString(result.ToArray()).Trim('"');

            Assert.AreEqual(expectedResult, actualResult);
        }

        [Test]
        public async Task TestSetRemove()
        {
            dynamic args = new ExpandoObject();
            args.value = "123";

            bool? result = null;

            try
            {
                await _contract.testSetRemove(args);
                result = true;
            }
            catch
            {
                result = false;
            }

            Assert.IsTrue(result);
        }
    }
}
'''
'''--- Src/NearClientUnityTests/KeyStores/InMemoryKeyStoreTests.cs ---
﻿using NearClientUnity.KeyStores;
using NUnit.Framework;
using System.Threading.Tasks;

namespace NearClientUnityTests.KeyStores
{
    [TestFixture]
    public class InMemoryKeyStoreTests : KeyStoreTests
    {
        [Test]
        public async Task AddTwoKeysToNetworkAndRetrieveThem()
        {
            await AddTwoKeysToNetworkAndRetrieveThem_BaseTest();
        }

        [OneTimeSetUp]
        public void ClassInit()
        {
            _keyStore = new InMemoryKeyStore();
        }

        [Test]
        public async Task GetAllAccountsWithEmptyNetworkReturnsEmptyArray()
        {
            await GetAllAccountsWithEmptyNetworkReturnsEmptyArray_BaseTest();
        }

        [Test]
        public async Task GetAllAccountsWithSingleNetworkInKeystoreReturnsArrayIds()
        {
            await GetAllAccountsWithSingleNetworkInKeystoreReturnsArrayIds_BaseTest();
        }

        [Test]
        public async Task GetKeyPairForNotExistingAccountReturnsNull()
        {
            await GetKeyPairForNotExistingAccountReturnsNull_BaseTest();
        }

        [Test]
        public async Task GetKeyPairFromNetworkWithAccountInKeystoreReturnsKeyPair()
        {
            await GetKeyPairFromNetworkWithAccountInKeystoreReturnsKeyPair_BaseTest();
        }

        [Test]
        public async Task GetNetworksInKeystoreReturnsArrayNetworks()
        {
            await GetNetworksInKeystoreReturnsArrayNetworks_BaseTest();
        }

        [SetUp]
        public void SetupBeforeEachTest()
        {
            SetupBeforeEachTestAync().Wait();
        }
    }
}
'''
'''--- Src/NearClientUnityTests/KeyStores/KeyStoreTests.cs ---
﻿using NearClientUnity.Utilities;
using NUnit.Framework;
using System;
using System.Threading.Tasks;

namespace NearClientUnityTests.KeyStores
{
    public class KeyStoreTests
    {
        protected dynamic _keyStore;
        private const string AccountIdSingleKey = "singlekey_accountid";
        private const string NetworkIdSingleKey = "singlekeynetworkid";
        private readonly KeyPair _keypairSingleKey = new KeyPairEd25519("2wyRcSwSuHtRVmkMCGjPwnzZmQLeXLzLLyED1NDMt4BjnKgQL6tF85yBx6Jr26D2dUNeC716RBoTxntVHsegogYw");

        protected async Task AddTwoKeysToNetworkAndRetrieveThem_BaseTest()
        {
            const string networkId = "twoKeyNetwork";
            const string accountId1 = "acc1";
            const string accountId2 = "acc2";
            var expectedKey1 = KeyPair.FromRandom("ED25519");
            var expectedKey2 = KeyPair.FromRandom("ED25519");
            await _keyStore.SetKeyAsync(networkId, accountId1, expectedKey1);
            await _keyStore.SetKeyAsync(networkId, accountId2, expectedKey2);
            var actualKey1 = await _keyStore.GetKeyAsync(networkId, accountId1);
            var actualKey2 = await _keyStore.GetKeyAsync(networkId, accountId2);
            Assert.AreEqual(expectedKey1.ToString(), actualKey1.ToString());
            Assert.AreEqual(expectedKey2.ToString(), actualKey2.ToString());

            var actualAccountIds = await _keyStore.GetAccountsAsync(networkId);
            var expectedAccountIds = new[] { accountId1, accountId2 };
            Array.Sort(expectedAccountIds);
            Array.Sort(actualAccountIds);
            Assert.AreEqual(expectedAccountIds, actualAccountIds);

            var actualNetworks = await _keyStore.GetNetworksAsync();
            var expectedNetworks = new[] { NetworkIdSingleKey, networkId };
            Assert.AreEqual(expectedNetworks, actualNetworks);
        }

        protected async Task GetAllAccountsWithEmptyNetworkReturnsEmptyArray_BaseTest()
        {
            var actualArray = await _keyStore.GetAccountsAsync("emptynetwork");
            var expectedArray = new string[0];
            Assert.AreEqual(expectedArray, actualArray);
        }

        protected async Task GetAllAccountsWithSingleNetworkInKeystoreReturnsArrayIds_BaseTest()
        {
            var actualArray = await _keyStore.GetAccountsAsync(NetworkIdSingleKey);
            var expectedArray = new[] { AccountIdSingleKey };
            Assert.AreEqual(expectedArray, actualArray);
        }

        protected async Task GetKeyPairForNotExistingAccountReturnsNull_BaseTest()
        {
            KeyPair actualKeyPair = await _keyStore.GetKeyAsync("somenetwork", "someaccount");
            KeyPair expectedKeyPair = null;
            Assert.AreEqual(expectedKeyPair, actualKeyPair);
        }

        protected async Task GetKeyPairFromNetworkWithAccountInKeystoreReturnsKeyPair_BaseTest()
        {
            var actualKeyPair = await _keyStore.GetKeyAsync(NetworkIdSingleKey, AccountIdSingleKey);
            var expectedKeyPair = _keypairSingleKey;
            Assert.AreEqual(expectedKeyPair.ToString(), actualKeyPair.ToString());
        }

        protected async Task GetNetworksInKeystoreReturnsArrayNetworks_BaseTest()
        {
            var actualArray = await _keyStore.GetNetworksAsync();
            var expectedArray = new[] { NetworkIdSingleKey };
            Assert.AreEqual(expectedArray, actualArray);
        }

        protected async Task SetupBeforeEachTestAync()
        {
            await _keyStore.ClearAsync();
            await _keyStore.SetKeyAsync(NetworkIdSingleKey, AccountIdSingleKey, _keypairSingleKey);
        }
    }
}
'''
'''--- Src/NearClientUnityTests/KeyStores/MergeKeyStoreTests.cs ---
﻿using NearClientUnity.KeyStores;
using NearClientUnity.Utilities;
using NUnit.Framework;
using System.Threading.Tasks;

namespace NearClientUnityTests.KeyStores
{
    [TestFixture]
    public class MergeKeyStoreTests : KeyStoreTests
    {
        [Test]
        public async Task AddTwoKeysToNetworkAndRetrieveThem()
        {
            await AddTwoKeysToNetworkAndRetrieveThem_BaseTest();
        }

        [OneTimeSetUp]
        public void ClassInit()
        {
            _keyStore = new MergeKeyStore(new KeyStore[] { new InMemoryKeyStore(), new InMemoryKeyStore() });
        }

        [Test]
        public async Task GetAllAccountsWithEmptyNetworkReturnsEmptyArray()
        {
            await GetAllAccountsWithEmptyNetworkReturnsEmptyArray_BaseTest();
        }

        [Test]
        public async Task GetAllAccountsWithSingleNetworkInKeystoreReturnsArrayIds()
        {
            await GetAllAccountsWithSingleNetworkInKeystoreReturnsArrayIds_BaseTest();
        }

        [Test]
        public async Task GetKeyPairForNotExistingAccountReturnsNull()
        {
            await GetKeyPairForNotExistingAccountReturnsNull_BaseTest();
        }

        [Test]
        public async Task GetKeyPairFromNetworkWithAccountInKeystoreReturnsKeyPair()
        {
            await GetKeyPairFromNetworkWithAccountInKeystoreReturnsKeyPair_BaseTest();
        }

        [Test]
        public async Task GetNetworksInKeystoreReturnsArrayNetworks()
        {
            await GetNetworksInKeystoreReturnsArrayNetworks_BaseTest();
        }

        [Test]
        public async Task LooksUpKeyFromFallbackKeyStore()
        {
            var expectedKey = KeyPair.FromRandom("ED25519");
            await _keyStore.Stores[1].SetKeyAsync("network", "account", expectedKey);
            var actualKey = await _keyStore.GetKeyAsync("network", "account");
            Assert.AreEqual(expectedKey.ToString(), actualKey.ToString());
        }

        [Test]
        public async Task LooksUpKeyInProperOrder()
        {
            var expectedKey1 = KeyPair.FromRandom("ED25519");
            var expectedKey2 = KeyPair.FromRandom("ED25519");
            await _keyStore.Stores[0].SetKeyAsync("network", "account", expectedKey1);
            await _keyStore.Stores[1].SetKeyAsync("network", "account", expectedKey2);
            var actualKey1 = await _keyStore.GetKeyAsync("network", "account");
            Assert.AreEqual(expectedKey1.ToString(), actualKey1.ToString());
        }

        [Test]
        public async Task SetsKeysOnlyInFirstKeyStore()
        {
            var key1 = KeyPair.FromRandom("ED25519");
            await _keyStore.SetKeyAsync("network", "account", key1);
            Assert.AreEqual(1, (await _keyStore.Stores[0].GetAccountsAsync("network")).Length);
            Assert.AreEqual(0, (await _keyStore.Stores[1].GetAccountsAsync("network")).Length);
        }

        [SetUp]
        public void SetupBeforeEachTest()
        {
            SetupBeforeEachTestAync().Wait();
        }
    }
}
'''
'''--- Src/NearClientUnityTests/KeyStores/UnencryptedFileSystemKeyStoreTests.cs ---
﻿using NearClientUnity.KeyStores;
using NUnit.Framework;
using System;
using System.IO;
using System.Threading.Tasks;

namespace NearClientUnityTests.KeyStores
{
    public class UnencryptedFileSystemKeyStoreTests : KeyStoreTests
    {
        private readonly string _keystorePath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "test-keys");

        [Test]
        public async Task AddTwoKeysToNetworkAndRetrieveThem()
        {
            await AddTwoKeysToNetworkAndRetrieveThem_BaseTest();
        }

        [OneTimeSetUp]
        public void ClassInit()
        {
            _keyStore = new UnencryptedFileSystemKeyStore(_keystorePath);
        }

        [Test]
        public async Task GetAllAccountsWithEmptyNetworkReturnsEmptyArray()
        {
            await GetAllAccountsWithEmptyNetworkReturnsEmptyArray_BaseTest();
        }

        [Test]
        public async Task GetAllAccountsWithSingleNetworkInKeystoreReturnsArrayIds()
        {
            await GetAllAccountsWithSingleNetworkInKeystoreReturnsArrayIds_BaseTest();
        }

        [Test]
        public async Task GetKeyPairForNotExistingAccountReturnsNull()
        {
            await GetKeyPairForNotExistingAccountReturnsNull_BaseTest();
        }

        [Test]
        public async Task GetKeyPairFromNetworkWithAccountInKeystoreReturnsKeyPair()
        {
            await GetKeyPairFromNetworkWithAccountInKeystoreReturnsKeyPair_BaseTest();
        }

        [Test]
        public async Task GetNetworksInKeystoreReturnsArrayNetworks()
        {
            await GetNetworksInKeystoreReturnsArrayNetworks_BaseTest();
        }

        [SetUp]
        public void SetupBeforeEachTest()
        {
            SetupBeforeEachTestAync().Wait();
        }
    }
}
'''
'''--- Src/NearClientUnityTests/PromisesTests.cs ---
﻿using NearClientUnity;
using NearClientUnity.Utilities;
using NearClientUnityTests.Utils;
using Newtonsoft.Json;
using NUnit.Framework;
using System;
using System.Dynamic;
using System.Linq;
using System.Threading.Tasks;

namespace NearClientUnityTests
{
    [TestFixture]
    public class PromisesTests
    {
        private ContractNear _contract;
        private ContractNear _contract1;
        private ContractNear _contract2;
        private string _contractName;
        private string _contractName1;
        private string _contractName2;
        private Near _near;
        private Account _workingAccount;

        public void ClassInit()
        {
            ClassInitAsync().Wait();
        }

        [OneTimeSetUp]
        public async Task ClassInitAsync()
        {
            _near = await TestUtils.SetUpTestConnection();
            var masterAccount = await _near.AccountAsync(accountId: TestUtils.TestAccountName);
            var amount = TestUtils.InitialBalance * new UInt128(100);
            _workingAccount = await TestUtils.CreateAccount(masterAccount, amount);
        }

        public void SetupBeforeEachTest()
        {
            SetupBeforeEachTestAsync().Wait();
        }

        [SetUp]
        public async Task SetupBeforeEachTestAsync()
        {
            _contractName = TestUtils.GenerateUniqueString("cnt");
            _contractName1 = TestUtils.GenerateUniqueString("cnt");
            _contractName2 = TestUtils.GenerateUniqueString("cnt");
            _contract = await TestUtils.DeployContract(_workingAccount, _contractName, new UInt128(10000000));
            _contract1 = await TestUtils.DeployContract(_workingAccount, _contractName1, new UInt128(10000000));
            _contract2 = await TestUtils.DeployContract(_workingAccount, _contractName2, new UInt128(10000000));
        }

        //it should pass test cross contract call with callbacks (A->B->A=>B=>A)
        [Test]
        public async Task ShouldPassTestCrossContractWithCallbacks()
        {
            dynamic callPromiseParam = new ExpandoObject();
            callPromiseParam.receiver = _contractName;
            callPromiseParam.methodName = "callbackWithName";
            callPromiseParam.gas = 400000;
            callPromiseParam.balance = 0;
            callPromiseParam.callback = "callbackWithName";
            callPromiseParam.callbackBalance = 0;
            callPromiseParam.callbackGas = 400000;

            dynamic callPromise1Param = new ExpandoObject();
            callPromise1Param.receiver = _contractName1;
            callPromise1Param.methodName = "callPromise";
            callPromise1Param.args = callPromiseParam;
            callPromise1Param.gas = 1000000;
            callPromise1Param.balance = 0;
            callPromise1Param.callback = "callbackWithName";
            callPromise1Param.callbackBalance = 0;
            callPromise1Param.callbackGas = 300000;

            dynamic changeArgs = new ExpandoObject();
            changeArgs.args = callPromise1Param;

            var rawRealResult = await _contract.Change("callPromise", changeArgs, null, new UInt128(0));
            var realResult = rawRealResult.ToObject<Result>();

            dynamic viewParam = new ExpandoObject();
            string rawLastResult1 = (await _contract1.View("getLastResult", viewParam)).result;
            var lastResult1 = JsonConvert.DeserializeObject<Result>(rawLastResult1);
            Assert.AreEqual(lastResult1, new Result(n: _contractName1, rs: new RSResult[1] { new RSResult(ok: true, r: new Result(n: _contractName, rs: new RSResult[0])) }));

            string rawLastResult = (await _contract.View("getLastResult", viewParam)).result;
            var lastResult = JsonConvert.DeserializeObject<Result>(rawLastResult);
            Assert.AreEqual(lastResult, new Result(n: _contractName, rs: new RSResult[1] { new RSResult(ok: true, r: lastResult1) }));

            Assert.AreEqual(realResult, lastResult);
        }

        //it should pass test single promise, no callback (A->B)
        [Test]
        public async Task ShouldPassTestSinglePromiseNoCallback()
        {
            dynamic changeParam = new ExpandoObject();
            changeParam.receiver = _contractName1;
            changeParam.methodName = "callbackWithName";
            changeParam.gas = 300000;
            changeParam.balance = 0;
            changeParam.callbackBalance = 0;
            changeParam.callbackGas = 0;
            dynamic args = new ExpandoObject();
            args.args = changeParam;
            var rawRealResult = await _contract.Change("callPromise", args, null, new UInt128(0));
            var realResult = rawRealResult.ToObject<Result>();
            dynamic viewParam = new ExpandoObject();
            string rawLastResult = (await _contract1.View("getLastResult", viewParam)).result;
            var lastResult = JsonConvert.DeserializeObject<Result>(rawLastResult);
            Assert.AreEqual(lastResult, new Result(n: _contractName1, rs: new RSResult[0]));
            Assert.AreEqual(realResult, lastResult);
        }

        //it should pass test single promise with callback (A->B=>A)
        [Test]
        public async Task ShouldPassTestSinglePromiseWithCallback()
        {
            dynamic changeParam = new ExpandoObject();
            changeParam.receiver = _contractName1;
            changeParam.methodName = "callbackWithName";
            changeParam.gas = 300000;
            changeParam.balance = 0;
            changeParam.callback = "callbackWithName";
            changeParam.callbackBalance = 0;
            changeParam.callbackGas = 200000;
            dynamic args = new ExpandoObject();
            args.args = changeParam;
            var rawRealResult = await _contract.Change("callPromise", args, null, new UInt128(0));
            var realResult = rawRealResult.ToObject<Result>();
            dynamic viewParam = new ExpandoObject();
            string rawLastResult1 = (await _contract1.View("getLastResult", viewParam)).result;
            var lastResult1 = JsonConvert.DeserializeObject<Result>(rawLastResult1);
            Assert.AreEqual(lastResult1, new Result(n: _contractName1, rs: new RSResult[0]));
            string rawLastResult = (await _contract.View("getLastResult", viewParam)).result;
            var lastResult = JsonConvert.DeserializeObject<Result>(rawLastResult);
            Assert.AreEqual(lastResult, new Result(n: _contractName, rs: new RSResult[1] { new RSResult(ok: true, r: lastResult1) }));
            Assert.AreEqual(realResult, lastResult);
        }

        //it should pass test two promises, no callbacks (A->B->C)
        [Test]
        public async Task ShouldPassTestTwoPromisesNoCallbacks()
        {
            dynamic callPromiseParam = new ExpandoObject();
            callPromiseParam.receiver = _contractName2;
            callPromiseParam.methodName = "callbackWithName";
            callPromiseParam.gas = 400000;
            callPromiseParam.balance = 0;
            callPromiseParam.callbackBalance = 0;
            callPromiseParam.callbackGas = 200000;
            dynamic args = new ExpandoObject();
            args.receiver = _contractName1;
            args.methodName = "callPromise";
            args.args = callPromiseParam;
            args.gas = 600000;
            args.balance = 0;
            args.callbackBalance = 0;
            args.callbackGas = 600000;
            var rawRealResult = await _contract.Change("callPromise", args, null, new UInt128(0));
            var realResult = rawRealResult.ToObject<Result>();
            dynamic viewParam = new ExpandoObject();
            string rawLastResult2 = (await _contract2.View("getLastResult", viewParam)).result;
            var lastResult2 = JsonConvert.DeserializeObject<Result>(rawLastResult2);
            Assert.AreEqual(lastResult2, new Result(n: _contractName2, rs: new RSResult[0]));
            Assert.AreEqual(realResult, lastResult2);
        }

        //it should pass test two promises, with one callbacks to B only (A->B->C=>B)
        [Test]
        public async Task ShouldPassTestTwoPromisesWithOneCallbacksToBOnly()
        {
            dynamic callPromise2Param = new ExpandoObject();
            callPromise2Param.receiver = _contractName2;
            callPromise2Param.methodName = "callbackWithName";
            callPromise2Param.gas = 400000;
            callPromise2Param.balance = 0;
            callPromise2Param.callback = "callbackWithName";
            callPromise2Param.callbackBalance = 0;
            callPromise2Param.callbackGas = 400000;

            dynamic callPromise1Param = new ExpandoObject();
            callPromise1Param.receiver = _contractName1;
            callPromise1Param.methodName = "callPromise";
            callPromise1Param.args = callPromise2Param;
            callPromise1Param.gas = 1000000;
            callPromise1Param.balance = 0;
            callPromise1Param.callbackBalance = 0;
            callPromise1Param.callbackGas = 0;

            dynamic changeArgs = new ExpandoObject();
            changeArgs.args = callPromise1Param;

            var rawRealResult = await _contract.Change("callPromise", changeArgs, null, new UInt128(0));
            var realResult = rawRealResult.ToObject<Result>();

            dynamic viewParam = new ExpandoObject();
            string rawLastResult2 = (await _contract2.View("getLastResult", viewParam)).result;
            var lastResult2 = JsonConvert.DeserializeObject<Result>(rawLastResult2);
            Assert.AreEqual(lastResult2, new Result(n: _contractName2, rs: new RSResult[0]));

            string rawLastResult1 = (await _contract1.View("getLastResult", viewParam)).result;
            var lastResult1 = JsonConvert.DeserializeObject<Result>(rawLastResult1);
            Assert.AreEqual(lastResult1, new Result(n: _contractName1, rs: new RSResult[1] { new RSResult(ok: true, r: lastResult2) }));

            Assert.AreEqual(realResult, lastResult1);
        }

        //it should pass test 2 promises with 1 skipped callbacks (A->B->C=>A)
        [Test]
        public async Task ShouldPassTestTwoPromisesWithOneSkippedCallbacks()
        {
            dynamic callPromise2Param = new ExpandoObject();
            callPromise2Param.receiver = _contractName2;
            callPromise2Param.methodName = "callbackWithName";
            callPromise2Param.gas = 200000;
            callPromise2Param.balance = 0;
            callPromise2Param.callbackBalance = 0;
            callPromise2Param.callbackGas = 200000;

            dynamic callPromise1Param = new ExpandoObject();
            callPromise1Param.receiver = _contractName1;
            callPromise1Param.methodName = "callPromise";
            callPromise1Param.args = callPromise2Param;
            callPromise1Param.gas = 500000;
            callPromise1Param.balance = 0;
            callPromise1Param.callback = "callbackWithName";
            callPromise1Param.callbackBalance = 0;
            callPromise1Param.callbackGas = 300000;

            dynamic changeArgs = new ExpandoObject();
            changeArgs.args = callPromise1Param;

            var rawRealResult = await _contract.Change("callPromise", changeArgs, null, new UInt128(0));
            var realResult = rawRealResult.ToObject<Result>();

            dynamic viewParam = new ExpandoObject();
            string rawLastResult2 = (await _contract2.View("getLastResult", viewParam)).result;
            var lastResult2 = JsonConvert.DeserializeObject<Result>(rawLastResult2);
            Assert.AreEqual(lastResult2, new Result(n: _contractName2, rs: new RSResult[0]));

            string rawLastResult = (await _contract.View("getLastResult", viewParam)).result;
            var lastResult = JsonConvert.DeserializeObject<Result>(rawLastResult);
            Assert.AreEqual(lastResult, new Result(n: _contractName, rs: new RSResult[1] { new RSResult(ok: true, r: lastResult2) }));

            Assert.AreEqual(realResult, lastResult);
        }

        //it should pass test two promises, with two callbacks (A->B->C=>B=>A)
        [Test]
        public async Task ShouldPassTestTwoPromisesWithTwoCallbacks()
        {
            dynamic callPromise2Param = new ExpandoObject();
            callPromise2Param.receiver = _contractName2;
            callPromise2Param.methodName = "callbackWithName";
            callPromise2Param.gas = 400000;
            callPromise2Param.balance = 0;
            callPromise2Param.callback = "callbackWithName";
            callPromise2Param.callbackBalance = 0;
            callPromise2Param.callbackGas = 200000;

            dynamic callPromise1Param = new ExpandoObject();
            callPromise1Param.receiver = _contractName1;
            callPromise1Param.methodName = "callPromise";
            callPromise1Param.args = callPromise2Param;
            callPromise1Param.gas = 1000000;
            callPromise1Param.balance = 0;
            callPromise1Param.callback = "callbackWithName";
            callPromise1Param.callbackBalance = 0;
            callPromise1Param.callbackGas = 300000;

            dynamic changeArgs = new ExpandoObject();
            changeArgs.args = callPromise1Param;

            var rawRealResult = await _contract.Change("callPromise", changeArgs, null, new UInt128(0));
            var realResult = rawRealResult.ToObject<Result>();

            dynamic viewParam = new ExpandoObject();
            string rawLastResult2 = (await _contract2.View("getLastResult", viewParam)).result;
            var lastResult2 = JsonConvert.DeserializeObject<Result>(rawLastResult2);
            Assert.AreEqual(lastResult2, new Result(n: _contractName2, rs: new RSResult[0]));

            string rawLastResult1 = (await _contract1.View("getLastResult", viewParam)).result;
            var lastResult1 = JsonConvert.DeserializeObject<Result>(rawLastResult1);
            Assert.AreEqual(lastResult1, new Result(n: _contractName1, rs: new RSResult[1] { new RSResult(ok: true, r: lastResult2) }));

            string rawLastResult = (await _contract.View("getLastResult", viewParam)).result;
            var lastResult = JsonConvert.DeserializeObject<Result>(rawLastResult);
            Assert.AreEqual(lastResult, new Result(n: _contractName, rs: new RSResult[1] { new RSResult(ok: true, r: lastResult1) }));

            Assert.AreEqual(realResult, lastResult);
        }
    }

    public class Result : IEquatable<Result>
    {
        public string n;
        public RSResult[] rs;

        public Result(string n, RSResult[] rs)
        {
            this.n = n;
            this.rs = rs;
        }

        public bool Equals(Result other)
        {
            return n.Equals(other.n) && rs.Count() == other.rs.Count();
        }
    }

    public class RSResult : IEquatable<RSResult>
    {
        public bool ok;
        public Result r;

        public RSResult(bool ok, Result r)
        {
            this.ok = ok;
            this.r = r;
        }

        public bool Equals(RSResult other)
        {
            return ok.Equals(other.ok) && r.Equals(other.r);
        }
    }
}
'''
'''--- Src/NearClientUnityTests/Properties/AssemblyInfo.cs ---
﻿using System.Reflection;

// Information about this assembly is defined by the following attributes. Change them to the values
// specific to your project.

[assembly: AssemblyTitle("NearClientUnityTests")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("")]
[assembly: AssemblyCopyright("${AuthorCopyright}")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// The assembly version has the format "{Major}.{Minor}.{Build}.{Revision}". The form
// "{Major}.{Minor}.*" will automatically update the build and revision, and
// "{Major}.{Minor}.{Build}.*" will update just the revision.

[assembly: AssemblyVersion("1.0.*")]

// The following attributes are used to specify the signing key for the assembly, if desired. See
// the Mono documentation for more information about signing.

//[assembly: AssemblyDelaySign(false)]
//[assembly: AssemblyKeyFile("")]
'''
'''--- Src/NearClientUnityTests/SignerTests.cs ---
﻿using NearClientUnity;
using NearClientUnity.KeyStores;
using NearClientUnity.Utilities;
using NUnit.Framework;

namespace NearClientUnityTests
{
    [TestFixture]
    public class SignerTests
    {
        [Test]
        public void ShouldThrowNoKey()
        {
            var signer = new InMemorySigner(new InMemoryKeyStore());
            var decodedMessage = Base58.Decode("message");
            Assert.That(() => signer.SignMessageAsync(decodedMessage, "user", "network"), Throws.Exception.TypeOf<InMemorySignerException>());
        }
    }
}
'''
'''--- Src/NearClientUnityTests/Utils/EnvironmentConfig.cs ---
﻿using System;

namespace NearClientUnityTests.Utils
{
    public enum Environment
    {
        Production,
        Development,
        Local,
        Test,
        TestRemote,
        CI,
        CIStaging
    }

    public class EnvironmentConfig
    {
        public string MasterAccount;
        public string NetworkId;
        public Uri NodeUrl;

        public EnvironmentConfig(string networkId, Uri nodeUrl, string masterAccount)
        {
            NetworkId = networkId;
            NodeUrl = nodeUrl;
            MasterAccount = masterAccount;
        }

        public static EnvironmentConfig GetConfig(Environment env)
        {
            switch (env)
            {
                case Environment.Production:
                case Environment.Development:
                    {
                        return new EnvironmentConfig("default", new Uri("https://rpc.nearprotocol.com"), TestUtils.TestAccountName);
                    }
                case Environment.Local:
                    {
                        return new EnvironmentConfig("local", new Uri("http://localhost:3030"), TestUtils.TestAccountName);
                    }
                case Environment.Test:
                    {
                        return new EnvironmentConfig("local", new Uri("http://localhost:3030"), TestUtils.TestAccountName);
                    }
                case Environment.TestRemote:
                case Environment.CI:
                    {
                        return new EnvironmentConfig("shared-test", new Uri("http://shared-test.nearprotocol.com:3030"), TestUtils.TestAccountName);
                    }
                case Environment.CIStaging:
                    {
                        return new EnvironmentConfig("shared-test-staging", new Uri("http://staging-shared-test.nearprotocol.com:3030"), TestUtils.TestAccountName);
                    }
                default:
                    {
                        return new EnvironmentConfig("local", new Uri("http://localhost:3030"), TestUtils.TestAccountName);
                    }
            }
        }
    }
}
'''
'''--- Src/NearClientUnityTests/Utils/KeyPairTests.cs ---
﻿using NearClientUnity.Utilities;
using NUnit.Framework;
using System.Security.Cryptography;
using System.Text;

namespace NearClientUnityTests.Utils
{
    [TestFixture]
    public class KeyPairTests
    {
        [Test]
        public void ItShouldConvertToString()
        {
            var keypair = KeyPairEd25519.FromRandom();
            var keypairFromString = (KeyPairEd25519)KeyPair.FromString(keypair.ToString());
            Assert.AreEqual(keypairFromString.GetSecretKey(), keypair.GetSecretKey());
            var key = "ed25519:2wyRcSwSuHtRVmkMCGjPwnzZmQLeXLzLLyED1NDMt4BjnKgQL6tF85yBx6Jr26D2dUNeC716RBoTxntVHsegogYw";
            var keypairFromKeyString = KeyPair.FromString(key);
            Assert.AreEqual(keypairFromKeyString.ToString(), key);
        }

        [Test]
        public void ItShouldInitFromSecret()
        {
            var keypair = new KeyPairEd25519(secretKey: "5JueXZhEEVqGVT5powZ5twyPP8wrap2K7RdAYGGdjBwiBdd7Hh6aQxMP1u3Ma9Yanq1nEv32EW7u8kUJsZ6f315C");
            Assert.AreEqual(keypair.GetPublicKey().ToString(), "ed25519:EWrekY1deMND7N3Q7Dixxj12wD7AVjFRt2H9q21QHUSW");
        }

        [Test]
        public void ItShouldSignAndVerify()
        {
            var keypair = new KeyPairEd25519(secretKey: "26x56YPzPDro5t2smQfGcYAPy3j7R2jB2NUb7xKbAGK23B6x4WNQPh3twb6oDksFov5X8ts5CtntUNbpQpAKFdbR");
            Assert.AreEqual(keypair.GetPublicKey().ToString(), "ed25519:AYWv9RAN1hpSQA4p1DLhCNnpnNXwxhfH9qeHN8B4nJ59");
            byte[] messageBytes = Encoding.Default.GetBytes("message");
            byte[] messageSha256;
            using (var sha256 = SHA256.Create())
            {
                messageSha256 = sha256.ComputeHash(messageBytes);
            }
            var signature = keypair.Sign(messageSha256);
            var signedMessage = Base58.Encode(signature.SignatureBytes);
            Assert.AreEqual(signedMessage, "26gFr4xth7W9K7HPWAxq3BLsua8oTy378mC1MYFiEXHBBpeBjP8WmJEJo8XTBowetvqbRshcQEtBUdwQcAqDyP8T");
        }

        [Test]
        public void ItShouldSignAndVerifyWithRandom()
        {
            var keypair = KeyPairEd25519.FromRandom();
            byte[] messageBytes = Encoding.Default.GetBytes("message");
            byte[] messageSha256;
            using (var sha256 = SHA256.Create())
            {
                messageSha256 = sha256.ComputeHash(messageBytes);
            }
            var signature = keypair.Sign(messageSha256);
            Assert.AreEqual(keypair.Verify(messageSha256, signature.SignatureBytes), true);
        }
    }
}
'''
'''--- Src/NearClientUnityTests/Utils/ProviderTests.cs ---
﻿using NearClientUnity.Providers;
using NUnit.Framework;

namespace NearClientUnityTests.Utils
{
    [TestFixture]
    public class ProviderTests
    {
        [Test]
        public void ShouldHaveCorrectFinalResult()
        {
            var excStatus = new ExecutionStatus()
            {
                SuccessReceiptId = "11112"
            };
            var excOutcome = new ExecutionOutcome()
            {
                Status = excStatus,
                Logs = new string[0],
                ReceiptIds = new string[] { "11112" },
                GasBurnt = 1
            };
            var transaction = new ExecutionOutcomeWithId()
            {
                Id = "11111",
                Outcome = excOutcome
            };
            var firstExcStatus = new ExecutionStatus()
            {
                SuccessValue = "e30="
            };
            var firstExcOutcome = new ExecutionOutcome()
            {
                Status = firstExcStatus,
                Logs = new string[0],
                ReceiptIds = new string[] { "11112" },
                GasBurnt = 9001
            };
            var secondExcStatus = new ExecutionStatus()
            {
                SuccessValue = ""
            };
            var secondExcOutcome = new ExecutionOutcome()
            {
                Status = secondExcStatus,
                Logs = new string[0],
                ReceiptIds = new string[0],
                GasBurnt = 0
            };
            var receipts = new ExecutionOutcomeWithId[] {
                new ExecutionOutcomeWithId { Id = "11112", Outcome = firstExcOutcome },
                new ExecutionOutcomeWithId { Id = "11113", Outcome = secondExcOutcome }
            };
            var result = new FinalExecutionOutcome()
            {
                Status = new FinalExecutionStatus()
                {
                    SuccessValue = "e30="
                },
                Transaction = transaction,
                Receipts = receipts
            };
            dynamic lastResult = Provider.GetTransactionLastResult(result);
            Assert.IsFalse(lastResult is null);
        }

        [Test]
        public void ShouldHaveCorrectFinalResultWithNull()
        {
            var excStatus = new ExecutionStatus()
            {
                SuccessReceiptId = "11112"
            };
            var excOutcome = new ExecutionOutcome()
            {
                Status = excStatus,
                Logs = new string[0],
                ReceiptIds = new string[] { "11112" },
                GasBurnt = 1
            };
            var transaction = new ExecutionOutcomeWithId()
            {
                Id = "11111",
                Outcome = excOutcome
            };
            var firstExcStatus = new ExecutionStatus()
            {
                Failure = new ExecutionError()
            };
            var firstExcOutcome = new ExecutionOutcome()
            {
                Status = firstExcStatus,
                Logs = new string[0],
                ReceiptIds = new string[] { "11112" },
                GasBurnt = 9001
            };
            var secondExcStatus = new ExecutionStatus()
            {
                SuccessValue = ""
            };
            var secondExcOutcome = new ExecutionOutcome()
            {
                Status = secondExcStatus,
                Logs = new string[0],
                ReceiptIds = new string[0],
                GasBurnt = 0
            };
            var receipts = new ExecutionOutcomeWithId[] {
                new ExecutionOutcomeWithId { Id = "11112", Outcome = firstExcOutcome },
                new ExecutionOutcomeWithId { Id = "11113", Outcome = secondExcOutcome }
            };
            var result = new FinalExecutionOutcome()
            {
                Status = new FinalExecutionStatus()
                {
                    Failure = new ExecutionError()
                },
                Transaction = transaction,
                Receipts = receipts
            };
            dynamic lastResult = Provider.GetTransactionLastResult(result);
            Assert.IsTrue(lastResult is null);
        }
    }
}
'''
'''--- Src/NearClientUnityTests/Utils/SerializeTests.cs ---
﻿using NearClientUnity;
using NearClientUnity.KeyStores;
using NearClientUnity.Utilities;
using NUnit.Framework;
using System;
using System.Threading.Tasks;
using Action = NearClientUnity.Action;

namespace NearClientUnityTests.Utils
{
    [TestFixture]
    public class SerializeTests
    {
        [Test]
        public async Task SerializeAndSignMultiActionTx()
        {
            var keyStore = new InMemoryKeyStore();
            var keyPair = KeyPair.FromString("ed25519:2wyRcSwSuHtRVmkMCGjPwnzZmQLeXLzLLyED1NDMt4BjnKgQL6tF85yBx6Jr26D2dUNeC716RBoTxntVHsegogYw");
            await keyStore.SetKeyAsync("test", "test.near", keyPair);
            var publicKey = keyPair.GetPublicKey();

            var actions = new[]
            {
                Action.CreateAccount(),
                Action.DeployContract(new byte[] {1, 2, 3}),
                Action.FunctionCall("qqq", new byte[] {1, 2, 3}, 1000, 1000000),
                Action.Transfer(123),
                Action.Stake(1000000, publicKey),
                Action.AddKey(publicKey, AccessKey.FunctionCallAccessKey("zzz", new []{"www"}, null)),
                Action.DeleteKey(publicKey),
                Action.DeleteAccount("123")
            };

            var blockHash = new ByteArray32() { Buffer = Base58.Decode("244ZQ9cgj3CQ6bWBdytfrJMuMQ1jdXLFGnr4HhvtCTnM") };
            var signedTransaction = await SignedTransaction.SignTransactionAsync("123", 1, actions, blockHash, new InMemorySigner(keyStore), "test.near", "test");

            const string expected = "Fo3MJ9XzKjnKuDuQKhDAC6fra5H2UWawRejFSEpPNk3Y";
            var actual = Base58.Encode(signedTransaction.Item1);
            Assert.AreEqual(expected, actual);
        }

        [Test]
        public async Task SerializeAndSignTransferTx()
        {
            var keyStore = new InMemoryKeyStore();

            var keyPair = KeyPair.FromString("ed25519:3hoMW1HvnRLSFCLZnvPzWeoGwtdHzke34B2cTHM8rhcbG3TbuLKtShTv3DvyejnXKXKBiV7YPkLeqUHN1ghnqpFv");

            await keyStore.SetKeyAsync("test", "test.near", keyPair);

            var actions = new[] { Action.Transfer(1) };

            var blockHash = Base58.Decode("244ZQ9cgj3CQ6bWBdytfrJMuMQ1jdXLFGnr4HhvtCTnM");

            var signedTransaction = await SignedTransaction.SignTransactionAsync("whatever.near", 1, actions, new ByteArray32() { Buffer = blockHash }, new InMemorySigner(keyStore), "test.near", "test");

            const string expectedBase64String = "lpqDMyGG7pdV5IOTJVJYBuGJo9LSu0tHYOlEQ+l+HE8i3u7wBZqOlxMQDtpuGRRNp+ig735TmyBwi6HY0CG9AQ==";
            var actualBase64String = Convert.ToBase64String(signedTransaction.Item2.Signature.Data.Buffer);

            Assert.AreEqual(expectedBase64String, actualBase64String);

            const string expectedHexString = "09000000746573742e6e65617200917b3d268d4b58f7fec1b150bd68d69be3ee5d4cc39855e341538465bb77860d01000000000000000d00000077686174657665722e6e6561720fa473fd26901df296be6adc4cc4df34d040efa2435224b6986910e630c2fef601000000030100000000000000000000000000000000969a83332186ee9755e4839325525806e189a3d2d2bb4b4760e94443e97e1c4f22deeef0059a8e9713100eda6e19144da7e8a0ef7e539b20708ba1d8d021bd01";

            var serialized = signedTransaction.Item2.ToByteArray();

            var actualHexString = BitConverter.ToString(serialized).Replace("-", "").ToLower();

            Assert.AreEqual(expectedHexString, actualHexString);
        }

        [Test]
        public void SerializeTransferTx()
        {
            var actions = new[] { Action.Transfer(1) };
            var blockHash = Base58.Decode("244ZQ9cgj3CQ6bWBdytfrJMuMQ1jdXLFGnr4HhvtCTnM");
            var transaction = new Transaction()
            {
                SignerId = "test.near",
                PublicKey = new PublicKey("Anu7LYDfpLtkP7E16LT9imXF694BdQaa9ufVkQiwTQxC"),
                Nonce = 1,
                ReceiverId = "whatever.near",
                Actions = actions,
                BlockHash = new ByteArray32() { Buffer = blockHash }
            };
            var serialized = transaction.ToByteArray();
            var actualHexString = BitConverter.ToString(serialized).Replace("-", "").ToLower();
            const string expectedHexString = "09000000746573742e6e65617200917b3d268d4b58f7fec1b150bd68d69be3ee5d4cc39855e341538465bb77860d01000000000000000d00000077686174657665722e6e6561720fa473fd26901df296be6adc4cc4df34d040efa2435224b6986910e630c2fef6010000000301000000000000000000000000000000";
            Assert.AreEqual(expectedHexString, actualHexString);

            var deserialized = Transaction.FromByteArray(serialized);

            var expectedSerialized = serialized;
            var actualSerialized = deserialized.ToByteArray();
            Assert.AreEqual(expectedSerialized, actualSerialized);
        }
    }
}
'''
'''--- Src/NearClientUnityTests/Utils/TestUtils.cs ---
﻿using NearClientUnity;
using NearClientUnity.KeyStores;
using NearClientUnity.Utilities;
using System;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;

namespace NearClientUnityTests.Utils
{
    public class TestUtils
    {
        public static readonly UInt128 InitialBalance = 100000000000;
        public static readonly string NetworkId = "unittest";
        public static readonly string TestAccountName = "test.near";

        public static async Task<Account> CreateAccount(Account masterAccount, UInt128 amount, uint trial = 5)
        {
            await masterAccount.FetchStateAsync();
            var newAccountName = GenerateUniqueString(prefix: "test");
            var newPublicKey = await masterAccount.Connection.Signer.CreateKeyAsync(newAccountName, TestUtils.NetworkId);
            await masterAccount.CreateAccountAsync(newAccountName, newPublicKey, amount);
            return new Account(masterAccount.Connection, newAccountName);
        }

        public static async Task<ContractNear> DeployContract(Account workingAccount, string contractId, UInt128 amount)
        {
            var newPublicKey = await workingAccount.Connection.Signer.CreateKeyAsync(contractId, TestUtils.NetworkId);
            var wasmBytes = Wasm.GetBytes();
            await workingAccount.CreateAndDeployContractAsync(contractId, newPublicKey, wasmBytes, amount);
            var options = new ContractOptions()
            {
                viewMethods = new string[] { "getValue", "getLastResult" },
                changeMethods = new string[] { "setValue", "callPromise" }
            };
            return new ContractNear(workingAccount, contractId, options);
        }

        public static string GenerateUniqueString(string prefix)
        {
            int length = 20;
            const string valid = "1234567890";
            StringBuilder res = new StringBuilder();
            using (RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider())
            {
                byte[] uintBuffer = new byte[sizeof(uint)];

                while (length-- > 0)
                {
                    rng.GetBytes(uintBuffer);
                    uint num = BitConverter.ToUInt32(uintBuffer, 0);
                    res.Append(valid[(int)(num % (uint)valid.Length)]);
                }
            }

            return $"{prefix}{res.ToString()}";
        }

        public static async Task<Near> SetUpTestConnection()
        {
            var keyStore = new InMemoryKeyStore();
            var key = "ed25519:2wyRcSwSuHtRVmkMCGjPwnzZmQLeXLzLLyED1NDMt4BjnKgQL6tF85yBx6Jr26D2dUNeC716RBoTxntVHsegogYw";
            var keyPair = KeyPair.FromString(key);
            await keyStore.SetKeyAsync(NetworkId, TestAccountName, keyPair);
            var environment = EnvironmentConfig.GetConfig(Environment.CI);
            var config = new NearConfig()
            {
                NetworkId = TestUtils.NetworkId,
                NodeUrl = environment.NodeUrl.AbsoluteUri,
                ProviderType = ProviderType.JsonRpc,
                SignerType = SignerType.InMemory,
                KeyStore = keyStore,
                ContractName = "contractId",
                WalletUrl = environment.NodeUrl.AbsoluteUri
            };
            return await Near.ConnectAsync(config: config);
        }
    }
}
'''
'''--- Src/NearClientUnityTests/Utils/Wasm.cs ---
﻿using System.IO;
using System.Reflection;

namespace NearClientUnityTests.Utils
{
    public static class Wasm
    {
        public static byte[] GetBytes()
        {
            Assembly a = Assembly.GetExecutingAssembly();
            using (Stream resFilestream = a.GetManifestResourceStream("NearClientUnityTests.Utils.main.wasm"))
            {
                if (resFilestream == null) return null;
                byte[] ba = new byte[resFilestream.Length];
                resFilestream.Read(ba, 0, ba.Length);
                return ba;
            }
        }
    }
}
'''
'''--- Src/NearClientUnityTests/WalletAccountTests.cs ---
﻿using NearClientUnity;
using NearClientUnity.KeyStores;
using NearClientUnity.Utilities;
using NUnit.Framework;
using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading.Tasks;

namespace NearClientUnityTests
{
    public class MockAuthService : IExternalAuthService
    {
        private readonly List<string> _urls = new List<string>();
        public List<string> Urls => _urls;

        public bool OpenUrl(string url)
        {
            _urls.Add(url);
            return true;
        }
    }

    public class MockAuthStorage : IExternalAuthStorage
    {
        private Dictionary<string, string> _storage = new Dictionary<string, string>();
        public void Add(string key, string value)
        {
            _storage.Add(key, value);
        }

        public void DeleteKey(string key)
        {
            _storage.Remove(key);
        }

        public string GetValue(string key)
        {
            return _storage[key];
        }

        public bool HasKey(string key)
        {
            return _storage.ContainsKey(key);
        }

        public void Clear()
        {
            _storage.Clear();
        }
    }

    [TestFixture]
    public class WalletAccountTests
    {
        private const string _walletUrl = "http://example.com/wallet";
        private MockAuthService _authService;
        private MockAuthStorage _authStorage;
        private KeyStore _keyStore;
        private Near _nearFake;
        private WalletAccount _walletAccount;

        [Test]
        public async Task CanCompleteSignIn()
        {
            var keyPair = KeyPair.FromRandom("ed25519");
            await _keyStore.SetKeyAsync("networkId", "pending_key" + keyPair.GetPublicKey().ToString(), keyPair);
            var url = "http://example.com/location?account_id=near.account&public_key=" + keyPair.GetPublicKey().ToString();
            await _walletAccount.CompleteSignIn(url);
            Assert.AreEqual((await _keyStore.GetKeyAsync("networkId", "near.account")).ToString(), keyPair.ToString());
            Assert.IsTrue(_walletAccount.IsSignedIn());
            Assert.AreEqual("near.account", _walletAccount.GetAccountId());
        }

        [Test]
        public async Task CanRequestSignIn()
        {
            await _walletAccount.RequestSignIn("signInContract", "signInTitle", new Uri("http://example.com/success"), new Uri("http://example.com/fail"), new Uri("http://example.com/location"));
            var accounts = await _keyStore.GetAccountsAsync("networkId");
            Assert.AreEqual(1, accounts.Length);
            Assert.IsTrue(accounts[0].Contains("pending_key"));

            var expected = new UriBuilder("http://example.com/");
            var keyPair = await _keyStore.GetKeyAsync("networkId", accounts[0]);
            var publicKey = keyPair.GetPublicKey().ToString();
            expected.Query = new FormUrlEncodedContent(new Dictionary<string, string>()
            {
                { "title", "signInTitle" },
                { "contract_id", "signInContract" },
                { "success_url", "http://example.com/success" },
                { "failure_url", "http://example.com/fail" },
                { "app_url", "http://example.com/location"},
                { "public_key", publicKey},
            }).ReadAsStringAsync().Result;

            var actual = new Uri(_authService.Urls[0]);

            Assert.AreEqual(expected.Uri.Query, actual.Query);
            Assert.AreEqual(expected.Uri.Host, actual.Host);
        }

        //not signed in by default
        [Test]
        public void NotSignedInByDefault()
        {
            Assert.IsFalse(_walletAccount.IsSignedIn());
        }

        [TearDown]
        public void SetupAfterEachTestAsync()
        {
            _authStorage.Clear();
        }

        public void SetupBeforeEachTest()
        {
            SetupBeforeEachTestAsync().Wait();
        }

        [SetUp]
        public async Task SetupBeforeEachTestAsync()
        {
            _keyStore = new InMemoryKeyStore();
            _nearFake = new Near(config: new NearConfig()
            {
                NetworkId = "networkId",
                NodeUrl = _walletUrl,
                ProviderType = ProviderType.JsonRpc,
                SignerType = SignerType.InMemory,
                KeyStore = _keyStore,
                ContractName = "contractId",
                WalletUrl = _walletUrl
            });
            _authService = new MockAuthService();
            _authStorage = new MockAuthStorage();
            _walletAccount = new WalletAccount(_nearFake, "", _authService, _authStorage);
        }
    }
}
'''