*GitHub Repository "jamesondh/near-clp"*

'''--- README.md ---
# NEARswap

`NEARswap` it's a smart-contract which is:

* Automated Market Maker
* Continious Liquidity Provider

on NEAR blockchain.

NEAR, with it's unique set of features and scaling potential aspires to be a significant player in the new Decentralize Finance world. Below we will explain a motivation for the NEARswap and why it is important to fulfill the NEAR DeFi mission.

## Why and How?

Our economy heavily depend on the following factors:

- production
- supply chains
- financial services

The latter one enable growth of our economy to new levels through all aspects of asset management and financial derivatives. At its heart, financial services arrange everything from savings accounts to synthetic collateralized debt obligations. With that, access to assets and obligations is a key to scale assets management.

With blockchain we can move financial services to a new level - Decentralized Finance. As noted above, access to assets obligation is a key to scale the economy. Principal solutions to that is:

- Liqidity services
- Automated Market Making.

We build `NEARswap` to fulfill this goals in a very open and decentralized manner. Here are our **GOALS**:

- Focus on liquidity pools and AMM
- Eliminate side markets incentives on NEARswap. Side market is an entity which could change a behavior of the CLP / AMM protocol and shift the benefits or potentially manipulate the whole market.
- Highly predictable behavior designed with the main blockchain principles: trustless smart-contracts.

'''
'''--- contract/.vscode/launch.json ---
{
    "version": "0.2.0",
    "configurations": [
        {
            "type": "lldb",
            "request": "launch",
            "name": "Debug simulation_test",
            "cargo": {
                "args": [
                    "+nightly",
                    "test",
                    "--no-run",
                    "--test=simulation_test",
                    "--package=near-clp"
                ],
                "filter": {
                    "name": "simulation_test",
                    "kind": "test"
                }
            },
            "args": [],
            "cwd": "${workspaceFolder}"
        }
    ]
}

'''
'''--- contract/.vscode/tasks.json ---
{
	"version": "2.0.0",
	"tasks": [
		{
			"type": "shell",
			"command":"make",
			"args": [
                "test"
			], 
			"problemMatcher": [
				"$rustc"
			],
			"group": "test",
			"label": "make test"
		},
		{
			"type": "shell",
			"command":"make build",
			"problemMatcher": [
				"$rustc"
			],
			"group": "build",
			"label": "make build"
		}

	]
}
'''
'''--- contract/Cargo.toml ---
[package]
name = "near-clp"
version = "0.1.0"
authors = ["Robert Zaremba https://zaremba.ch"]
edition = "2018"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
serde = { version = "*", features = ["derive"] }
serde_json = "*"
# borsh = "^0.7.0"
near-sdk = "^2.0.0"
wee_alloc = { version = "0.4.5", default-features = false, features = [] }
uint = { version = "0.8.3", default-features = false }

[dev-dependencies]
#required for integration tests (simulation)
lazy_static = "1.4.0"
log = "0.4"
env_logger = { version = "0.7.1", default-features = false }
near-crypto = { git = "https://github.com/nearprotocol/nearcore.git" }
near-primitives = { git = "https://github.com/nearprotocol/nearcore.git" }
near-vm-errors = { git = "https://github.com/nearprotocol/nearcore.git" }
near-runtime-standalone = { git = "https://github.com/nearprotocol/nearcore.git" }

[profile.release]
codegen-units = 1
# Tell `rustc` to optimize for small code size.
opt-level = "z"
lto = true
debug = false
panic = "abort"

[workspace]
members = []

'''
'''--- contract/README.md ---
# Continuous Liquidity Provider smart-contracts

Continuous Liquidity Provider smart-contracts for NEAR Blockchain.

Liquidity pools hold one or more token reserves. These reserves are programmed to perform trades according to a predetermined formula which continuously measures the supply of tokens held in each reserve.

Requirements and related discussion is available in [GitHub](https://github.com/near/bounties/issues/6).

## Building and development

To build run:
```bash
make build
```

### Testing

To run simulation tests, we need extra dependencies:
`libclang-dev`, `llvm`

To test run:
```bash
make test
```

## Changes to Uniswap v1

#### Deadline

+ removed `deadline` argument from `remove_liqidity` and `add_liqidity**. NEAR process transactions in shards and we don't expect to have stalling transactions.

#### Factory pattern for CLPs

Factory could allow changing a contract which creates a new pool. But this doesn't solve the problem of updating already deployed pools.

**Benefits of not having a pool factory**. In fact there are clear benefits of dropping the factory pattern:

1. Since NEAR cross contract calls are async and more complicated, a simple exchange can be do much easier
1. Removing some attack vectors: front-runners could manipulate a price when they see a cross contract swap (token-token).
1. With all liquidity residing in a single contract we can have a shared NEAR pool (version 2). I'm still building that idea. But this allows few new opportunities.
1. We can reduce fees for token-token swaps (currently this is a double of token-near swap fee - as in the Uniswap).

#### Mutable Fees

Highly volatile markets should have bigger fees to recompensate impermanent losses.
However this leads to a problem : who can change fees.
Good news is that we can build on that without changing the CLP contract. An entity who is allowed to do modifications can be a contract and owner / contract can always change to a new owner / contract, enhancing the governance. At the beginning this can be managed by a foundation. This is fine - centralized governance is good for start. And foundation is a perfect candidate.

'''
'''--- contract/TODO.md ---
### Checks

+ For token->* swaps, validate token allowance before updating the contract state.
  Currently the exception in the `transfer_from` function is not handled.

Handle exceptions in _foreign_ contracts (notably token contracts). Tips how to do it are in a [StackOverflow question](https://stackoverflow.com/questions/62987417).

Places to change:
+ add_liquidity

Tips:
+ https://github.com/nearprotocol/NEPs/pull/26

### CLP related functionality

+ add non integer type for balances to calculate expected amount. We can do it using [decimate](https://crates.io/crates/decimate)
+ add weights
+ change fees calculation for token 2 token swaps

### Economics

+ Add storage costs calculations (based on fungible token example)
+ remove / limit Impermanent Loss problem

### UI / Explorer functionality

+ Create and support multitoken standard. Each pool have their own share tokens. By using a multi-token standard, we can integrate the contract with future token explorer platforms.

'''
'''--- contract/src/internal.rs ---
use crate::*;
use util::yton;

impl NearCLP {
    pub(crate) fn assert_owner(&self) {
        assert!(
            env::predecessor_account_id() == self.owner,
            "Only the owner can call this function"
        );
    }

    pub(crate) fn get_pool(&self, ref token: &AccountId) -> Pool {
        match self.pools.get(token) {
            None => env::panic(b"Pool for this token doesn't exist"),
            Some(p) => return p,
        }
    }

    pub(crate) fn set_pool(&mut self, ref token: &AccountId, pool: &Pool) {
        self.pools.insert(token, pool);
    }

    /// Calculates amout of tokens a user buys for `in_amount` tokens, when a total balance
    /// in the pool is `in_bal` and `out_bal` of paid tokens and buying tokens respectively.
    pub(crate) fn calc_out_amount(&self, in_amount: u128, in_bal: u128, out_bal: u128) -> u128 {
        // this is getInputPrice in Uniswap
        env::log(
            format!(
                "in_amount {} out_bal {} in_bal {}",
                yton(in_amount),
                yton(out_bal),
                yton(in_bal)
            )
            .as_bytes(),
        );
        let in_with_fee = U256::from(in_amount * 997);
        let numerator = in_with_fee * U256::from(out_bal);
        let denominator = U256::from(in_bal) * U256::from(1000) + in_with_fee;
        let result = (numerator / denominator).as_u128();
        env::log(format!("return {}", result).as_bytes());
        return result;
    }

    /// Calculates amout of tokens a user must pay to buy `out_amount` tokens, when a total
    /// balance in the pool is `in_bal` and `out_bal` of paid tokens and buying tokens
    /// respectively.
    pub(crate) fn calc_in_amount(&self, out_amount: u128, in_bal: u128, out_bal: u128) -> u128 {
        // this is getOutputPrice in Uniswap
        let numerator = U256::from(in_bal) * U256::from(out_amount) * U256::from(1000);
        let denominator = U256::from(out_bal - out_amount) * U256::from(997);
        let result = (numerator / denominator + 1).as_u128();
        return result;
    }

    pub(crate) fn _swap_near(
        &mut self,
        p: &mut Pool,
        token: &AccountId,
        near: Balance,
        reserve: Balance,
        recipient: AccountId,
    ) {
        env::log(
            format!(
                "User purchased {} {} for {} YoctoNEAR",
                reserve, token, near
            )
            .as_bytes(),
        );
        p.token_bal -= reserve;
        p.near_bal += near;
        self.set_pool(token, p);

        nep21::ext_nep21::transfer(
            recipient,
            reserve.into(),
            token,
            TEN_NEAR,
            SINGLE_CALL_GAS / 2,
        )
        .then(ext_self::add_liquidity_transfer_callback(
            env::current_account_id(),
            token,
            0,
            SINGLE_CALL_GAS / 2,
        ));

        //let transfer_args =

        /*
        Promise::new(env::current_account_id())
        .function_call("transfer".as_bytes(), arguments: Vec<u8>, amount: Balance, gas: Gas)
        .call(nep21::ext_nep21::transfer(recipient, reserve.into(), token, 0, SINGLE_CALL_GAS)
        .then(
            ext_status_message::after_nep21_transfer(
                recipient,
                &account_id,
                0,
                CANT_FAIL_GAS,
            ),
            */
    }

    /// Pool sells reserve token for `near_paid` NEAR tokens. Asserts that a user buys at least
    /// `min_tokens` of reserve tokens.
    pub(crate) fn _swap_near_exact_in(
        &mut self,
        token: &AccountId,
        near_paid: Balance,
        min_tokens: Balance,
        recipient: AccountId,
    ) {
        assert!(near_paid > 0 && min_tokens > 0, "E2");
        let mut p = self.get_pool(&token);
        // env::log(format!(
        //         "self.calc_out_amount({},{},{})",near_paid, p.near_bal, p.token_bal
        //         ).as_bytes(),);
        let tokens_out = self.calc_out_amount(near_paid, p.near_bal, p.token_bal);
        assert!(tokens_out >= min_tokens, "E7");
        self._swap_near(&mut p, token, near_paid, tokens_out, recipient);
    }

    /// Pool sells `tokens_out` reserve token for NEAR tokens. Asserts that a user pays no more
    /// than `max_near_paid`.
    pub(crate) fn _swap_near_exact_out(
        &mut self,
        token: &AccountId,
        tokens_out: Balance,
        max_near_paid: Balance,
        buyer: AccountId,
        recipient: AccountId,
    ) {
        assert!(tokens_out > 0 && max_near_paid > 0, "E2");
        let mut p = self.get_pool(&token);
        let near_to_pay = self.calc_in_amount(tokens_out, p.near_bal, p.token_bal);
        // panics if near_to_pay > max_near_paid
        let near_refund = max_near_paid - near_to_pay;
        if near_refund > 0 {
            Promise::new(buyer).transfer(near_refund as u128);
        }
        self._swap_near(&mut p, token, near_to_pay, tokens_out, recipient);
    }

    pub(crate) fn _swap_reserve(
        &mut self,
        p: &mut Pool,
        token: &AccountId,
        near: Balance,
        reserve: Balance,
        buyer: AccountId,
        recipient: AccountId,
    ) {
        env::log(
            format!(
                "User purchased {} NEAR tokens for {} reserve tokens",
                near, reserve
            )
            .as_bytes(),
        );
        p.token_bal += reserve;
        p.near_bal -= near;
        self.set_pool(&token, p);
        Promise::new(recipient)
            .transfer(near as u128)
            .and(nep21::ext_nep21::transfer_from(
                buyer,
                env::current_account_id(),
                reserve.into(),
                token,
                0,
                SINGLE_CALL_GAS,
            ));
    }

    /// Pool sells NEAR for `tokens_paid` reserve tokens. Asserts that a user buys at least
    /// `min_near`.
    pub(crate) fn _swap_reserve_exact_in(
        &mut self,
        token: &AccountId,
        tokens_paid: Balance,
        min_near: Balance,
        buyer: AccountId,
        recipient: AccountId,
    ) {
        assert!(tokens_paid > 0 && min_near > 0, "E2");
        let mut p = self.get_pool(&token);
        let near_out = self.calc_out_amount(tokens_paid, p.token_bal, p.near_bal);
        assert!(near_out >= min_near, "E7");
        self._swap_reserve(&mut p, token, tokens_paid, near_out, buyer, recipient);
    }

    /// Pool sells `tokens_out` reserve tokens for NEAR tokens. Asserts that a user pays
    /// no more than `max_near_paid`.
    pub(crate) fn _swap_reserve_exact_out(
        &mut self,
        token: &AccountId,
        near_out: Balance,
        max_tokens_paid: Balance,
        buyer: AccountId,
        recipient: AccountId,
    ) {
        assert!(near_out > 0 && max_tokens_paid > 0, "E2");
        let mut p = self.get_pool(&token);
        let tokens_to_pay = self.calc_in_amount(near_out, p.near_bal, p.token_bal);
        assert!(tokens_to_pay <= max_tokens_paid, "E8");
        self._swap_reserve(&mut p, token, tokens_to_pay, near_out, buyer, recipient);
    }

    pub(crate) fn _swap_tokens(
        &mut self,
        p1: &mut Pool,
        p2: &mut Pool,
        token1: &AccountId,
        token2: &AccountId,
        token1_in: Balance,
        token2_out: Balance,
        near_swap: Balance,
        buyer: AccountId,
        recipient: AccountId,
    ) {
        env::log(
            format!(
                "User purchased {} {} tokens for {} {} tokens",
                token2_out, token2, token1_in, token1
            )
            .as_bytes(),
        );
        p1.token_bal += token1_in;
        p1.near_bal -= near_swap;
        p2.token_bal -= token2_out;
        p2.near_bal += near_swap;
        self.set_pool(&token1, p1);
        self.set_pool(&token2, p1);
        nep21::ext_nep21::transfer_from(
            buyer,
            env::current_account_id(),
            token1_in.into(),
            token1,
            0,
            SINGLE_CALL_GAS,
        )
        .and(nep21::ext_nep21::transfer(
            recipient,
            token2_out.into(),
            token2,
            0,
            SINGLE_CALL_GAS,
        ));
    }

    pub(crate) fn _price_swap_tokens_in(
        &self,
        p_in: &Pool,
        p_out: &Pool,
        tokens_in: Balance,
    ) -> (Balance, Balance) {
        let near_swap = self.calc_out_amount(tokens_in, p_in.token_bal, p_in.near_bal);
        let tokens2_out = self.calc_out_amount(near_swap, p_out.near_bal, p_out.token_bal);
        return (near_swap, tokens2_out);
    }

    pub(crate) fn _price_swap_tokens_out(
        &self,
        p_in: &Pool,
        p_out: &Pool,
        tokens_out: Balance,
    ) -> (Balance, Balance) {
        let near_swap = self.calc_in_amount(tokens_out, p_out.token_bal, p_out.near_bal);
        let tokens1_to_pay = self.calc_in_amount(near_swap, p_in.near_bal, p_in.token_bal);
        return (near_swap, tokens1_to_pay);
    }

    pub(crate) fn _swap_tokens_exact_in(
        &mut self,
        token1: &AccountId,
        token2: &AccountId,
        tokens1_paid: Balance,
        min_tokens2: Balance,
        buyer: AccountId,
        recipient: AccountId,
    ) {
        assert!(tokens1_paid > 0 && min_tokens2 > 0, "E2");
        assert_ne!(token1, token2, "E9");
        let mut p1 = self.get_pool(&token1);
        let mut p2 = self.get_pool(&token2);
        let (near_swap, tokens2_out) = self._price_swap_tokens_in(&p1, &p2, tokens1_paid);
        assert!(tokens2_out >= min_tokens2, "E7");

        self._swap_tokens(
            &mut p1,
            &mut p2,
            token1,
            token2,
            tokens1_paid,
            tokens2_out,
            near_swap,
            buyer,
            recipient,
        )
    }

    pub(crate) fn _swap_tokens_exact_out(
        &mut self,
        token1: &AccountId,
        token2: &AccountId,
        tokens2_out: Balance,
        max_tokens1_paid: Balance,
        buyer: AccountId,
        recipient: AccountId,
    ) {
        assert!(tokens2_out > 0 && max_tokens1_paid > 0, "E2");
        assert_ne!(token1, token2, "E9");
        let mut p1 = self.get_pool(&token1);
        let mut p2 = self.get_pool(&token2);
        let (near_swap, tokens1_to_pay) = self._price_swap_tokens_out(&p1, &p2, tokens2_out);
        assert!(tokens1_to_pay >= max_tokens1_paid, "E8");

        self._swap_tokens(
            &mut p1,
            &mut p2,
            token1,
            token2,
            tokens1_to_pay,
            tokens2_out,
            near_swap,
            buyer,
            recipient,
        )
    }
}

'''
'''--- contract/src/lib.rs ---
// use near_sdk::json_types::U128;
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::collections::UnorderedMap;
use near_sdk::serde::{Deserialize, Serialize};
use near_sdk::{env, ext_contract, near_bindgen, AccountId, Balance, Promise, PromiseResult};
use uint::construct_uint;
//use std::collections::UnorderedMap;

// a way to optimize memory management
#[global_allocator]
static ALLOC: wee_alloc::WeeAlloc = wee_alloc::WeeAlloc::INIT;

mod internal;
mod nep21;
mod util;

// Prepaid gas for making a single simple call.
const SINGLE_CALL_GAS: u64 = 200_000_000_000_000;
const TEN_NEAR: u128 = 10_000_000_000_000_000_000_000_000;

// Errors
// "E1" - Pool for this token already exists
// "E2" - all token arguments must be positive.
// "E3" - required amount of tokens to transfer is bigger then specified max.
// "E4" - computed amount of shares to receive is smaller the minimum required by the user.
// "E5" - not enough shares to redeem.
// "E6" - computed amount of near or reserve tokens is smaller than user required minimums for shares redeemption.
// "E7" - computed amount of buying tokens is smaller than user required minimum.
// "E8" - computed amount of selling tokens is bigger than user required maximum.
// "E9" - assets (tokens) must be different in token to token swap.

construct_uint! {
    /// 256-bit unsigned integer.
    pub struct U256(4);
}

/// Interface for the contract itself.
#[ext_contract(ext_self)]
pub trait SelfContract {
    /// callback to check the result of the add_liquidity action
    fn add_liquidity_transfer_callback(&mut self, token: AccountId);
}

/// PoolInfo is a helper structure to extract public data from a Pool
#[derive(Debug, PartialEq, BorshDeserialize, BorshSerialize, Serialize, Deserialize)]
pub struct PoolInfo {
    pub near_bal: Balance,
    pub token_bal: Balance,
    /// total amount of participation shares. Shares are represented using the same amount of
    /// tailing decimals as the NEAR token, which is 24
    pub total_shares: Balance,
}

use std::fmt;

impl fmt::Display for PoolInfo {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        return write!(
            f,
            "({}, {}, {})",
            self.near_bal, self.token_bal, self.total_shares
        );
    }
}

#[derive(BorshDeserialize, BorshSerialize)]
pub struct Pool {
    near_bal: Balance,
    token_bal: Balance,
    shares: UnorderedMap<AccountId, Balance>,
    /// check `PoolInfo.total_shares`
    total_shares: Balance,
}

impl Pool {
    pub fn new(pool_id: Vec<u8>) -> Self {
        Self {
            near_bal: 0,
            token_bal: 0,
            shares: UnorderedMap::new(pool_id),
            total_shares: 0,
        }
    }

    pub fn pool_info(&self) -> PoolInfo {
        PoolInfo {
            near_bal: self.near_bal,
            token_bal: self.token_bal,
            total_shares: self.total_shares,
        }
    }
}

/// NearCLP is the main contract for managing the swap pools and liquidity.
/// It implements the NEARswap functionality.
#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct NearCLP {
    pub fee_dst: AccountId,
    pub owner: AccountId,
    // we are using unordered map because it allows to iterate over the pools
    pools: UnorderedMap<AccountId, Pool>,
}

impl Default for NearCLP {
    fn default() -> Self {
        panic!("Fun token should be initialized before usage")
    }
}

//-------------------------
// CONTRACT PUBLIC API
//-------------------------
#[near_bindgen]
impl NearCLP {
    #[init]
    pub fn new(owner: AccountId) -> Self {
        assert!(!env::state_exists(), "Already initialized");
        util::assert_account(&owner, "Owner");
        Self {
            fee_dst: owner.clone(),
            owner,
            pools: UnorderedMap::new(env::current_account_id().as_bytes().to_vec()),
        }
    }

    pub fn set_fee_dst(&mut self, fee_dst: AccountId) {
        assert!(
            env::predecessor_account_id() == self.owner,
            "Only owner can change fee_dst"
        );
        assert!(
            env::is_valid_account_id(fee_dst.as_bytes()),
            "fee_dst account ID is invalid."
        );
        self.fee_dst = fee_dst;
    }

    /// Owner is an account (can be a multisig) who has management rights to update
    /// fee size.
    pub fn change_owner(&mut self, new_owner: AccountId) {
        self.assert_owner();
        assert!(
            env::is_valid_account_id(new_owner.as_bytes()),
            "fee_dst account ID is invalid."
        );
        self.owner = new_owner;
    }

    /**********************
       POOL MANAGEMENT
    **********************/

    /// Allows any user to creat a new near-token pool. Each pool is identified by the `token`
    /// account - which we call the Pool Reserve Token.
    /// If a pool for give token exists then "E1" assert exception is thrown.
    pub fn create_pool(&mut self, token: AccountId) {
        assert!(
            self.pools
                .insert(&token, &Pool::new(token.as_bytes().to_vec()))
                .is_none(),
            "E1"
        );
    }

    /// Extracts public information of the `token` pool.
    pub fn pool_info(&self, token: &AccountId) -> Option<PoolInfo> {
        match self.pools.get(&token) {
            None => None,
            Some(p) => Some(p.pool_info()),
        }
    }

    /// Returns list of pools identified as their reserve token AccountId.
    pub fn list_pools(&self) -> Vec<AccountId> {
        return self.pools.keys().collect();
    }

    /// Increases Near and the Reserve token liquidity.
    /// The supplied funds must preserver current ratio of the liquidity pool.
    #[payable]
    pub fn add_liquidity(
        &mut self,
        token: AccountId,
        max_token_amount: Balance,
        min_shares_amont: Balance,
    ) {
        let mut p = self.get_pool(&token);
        let caller = env::predecessor_account_id();
        let shares_minted;
        let near_amount = env::attached_deposit();
        let computed_token_amount;
        assert!(near_amount > 0 && max_token_amount > 0, "E2");

        // the very first deposit -- we define the constant ratio
        if p.total_shares == 0 {
            env::log(b"Creating a first deposit");
            p.near_bal = near_amount;
            shares_minted = p.near_bal;
            p.total_shares = shares_minted;
            computed_token_amount = max_token_amount;
            p.token_bal = computed_token_amount;
            p.shares.insert(&caller, &p.near_bal);
        } else {
            computed_token_amount = near_amount * p.token_bal / p.near_bal + 1;
            shares_minted = near_amount * p.total_shares / near_amount;
            assert!(max_token_amount >= computed_token_amount, "E3");
            assert!(min_shares_amont <= shares_minted, "E4");

            p.shares.insert(
                &caller,
                &(p.shares.get(&caller).unwrap_or(0) + shares_minted),
            );
            p.token_bal += computed_token_amount;
            p.near_bal += near_amount;
            p.total_shares += shares_minted;
        }

        env::log(
            format!(
                "Minting {} of shares for {} NEAR and {} reserve tokens",
                shares_minted, near_amount, computed_token_amount
            )
            .as_bytes(),
        );
        println!(
            ">> in contract, attached deposit: {}, PoolInfo: {}",
            near_amount,
            p.pool_info()
        );

        self.set_pool(&token, &p);

        // Prepare a callback for liquidity transfer which we will attach later on.
        let callback_args = format!(r#"{{ "token":"{tok}" }}"#, tok = token).into();
        let callback = Promise::new(env::current_account_id()).function_call(
            "add_liquidity_transfer_callback".into(),
            callback_args,
            0,
            SINGLE_CALL_GAS / 2,
        );
        //let callback=ext_self::add_liquidity_transfer_callback(env::current_account_id(),&token,0,SINGLE_CALL_GAS/2);
        //let callback_args="{}".into();
        //let callback=Promise::new(token.clone()).function_call("get_total_supply".into(), callback_args, 0, SINGLE_CALL_GAS/2);

        let args: Vec<u8> = format!(
            r#"{{ "owner_id":"{oid}","new_owner_id":"{noid}","amount":"{amount}" }}"#,
            oid = caller,
            noid = env::current_account_id(),
            amount = computed_token_amount
        )
        .into();

        Promise::new(token) //call the token contract
            .function_call("transfer_from".into(), args, 0, SINGLE_CALL_GAS / 2)
            .then(callback);

        /*
        REPLACED BY CODE ABOVE
        nep21::ext_nep21::transfer_from(
            caller,
            env::current_account_id(),
            token_amount.into(),
            &token,
            0,
            SINGLE_CALL_GAS,
        );
        */
        // TODO:
        // Handling exception is work-in-progress in NEAR runtime
        // 1. rollback `p` on changes or move the pool update to a promise
        // 2. consider adding a lock to prevent other contracts calling and manipulate the prise before the token transfer will get finalized.
    }

    /// Redeems `shares` for liquidity stored in this pool with condition of getting at least
    /// `min_near` of Near and `min_tokens` of reserve. Shares are note exchengable between
    /// different pools.
    pub fn withdraw_liquidity(
        &mut self,
        token: AccountId,
        shares: Balance,
        min_near: Balance,
        min_tokens: Balance,
    ) {
        assert!(shares > 0 && min_near > 0 && min_tokens > 0, "E2");
        let caller = env::predecessor_account_id();
        let mut p = self.get_pool(&token);
        let current_shares = p.shares.get(&caller).unwrap_or(0);
        assert!(current_shares >= shares, "E5");

        let near_amount = shares * p.near_bal / p.total_shares;
        let token_amount = shares * p.token_bal / p.total_shares;
        assert!(near_amount >= min_near && token_amount >= min_tokens, "E6");

        env::log(
            format!(
                "Reedeming {} shares for {} NEAR and {} reserve tokens",
                shares, near_amount, token_amount
            )
            .as_bytes(),
        );
        p.shares.insert(&caller, &(current_shares - shares));
        p.total_shares -= shares;
        p.token_bal -= token_amount;
        p.near_bal -= near_amount;

        Promise::new(caller.clone()) // caller is clone because it has to be used later
            .transfer(near_amount as u128)
            .and(nep21::ext_nep21::transfer(
                caller,
                token_amount.into(),
                &token,
                0,
                SINGLE_CALL_GAS,
            ));
    }

    /// Returns the owner balance of shares of a pool identified by token.
    pub fn shares_balance_of(&self, token: AccountId, owner: AccountId) -> Balance {
        return self.get_pool(&token).shares.get(&owner).unwrap_or(0);
    }

    /**********************
    CLP market functions
    **********************/

    /// Swaps NEAR to `token` and transfers the reserve tokens to the caller.
    /// Caller attaches near tokens he wants to swap to the transacion under a condition of
    /// receving at least `min_tokens`.
    #[payable]
    pub fn swap_near_to_reserve_exact_in(&mut self, token: AccountId, min_tokens: Balance) {
        self._swap_near_exact_in(
            &token,
            env::attached_deposit(),
            min_tokens,
            env::predecessor_account_id(),
        );
    }

    /// Same as `swap_near_to_reserve_exact_in`, but user additionly specifies the `recipient`
    /// who will receive the tokens after the swap.
    #[payable]
    pub fn swap_near_to_reserve_exact_in_xfr(
        &mut self,
        token: AccountId,
        min_tokens: Balance,
        recipient: AccountId,
    ) {
        self._swap_near_exact_in(&token, env::attached_deposit(), min_tokens, recipient);
    }

    /// Swaps NEAR to `token` and transfers the reserve tokens to the caller.
    /// Caller attaches maximum amount of NEAR he is willing to swap to receive `tokens_out`
    /// of `token` wants to swap to the transacion. Surplus of NEAR tokens will be returned.
    /// Transaction will panic if the caller doesn't attach enough NEAR tokens.
    #[payable]
    pub fn swap_near_to_reserve_exact_out(&mut self, token: AccountId, tokens_out: Balance) {
        let b = env::predecessor_account_id();
        self._swap_near_exact_out(&token, tokens_out, env::attached_deposit(), b.clone(), b);
    }

    /// Same as `swap_near_to_reserve_exact_out`, but user additionly specifies the `recipient`
    /// who will receive the tokens after the swap.
    #[payable]
    pub fn swap_near_to_reserve_exact_out_xfr(
        &mut self,
        token: AccountId,
        tokens_out: Balance,
        recipient: AccountId,
    ) {
        self._swap_near_exact_out(
            &token,
            tokens_out,
            env::attached_deposit(),
            env::predecessor_account_id(),
            recipient,
        );
    }

    /// Swaps `token` to NEAR and transfers NEAR to the caller under a condition of
    /// receving at least `min_near`.
    /// Preceeding to this transaction, caller has to create sufficient allowance of `token`
    /// for this contract.
    /// TODO: Transaction will panic if a caller doesn't provide enough allowance.
    #[payable]
    pub fn swap_reserve_to_near_exact_in(
        &mut self,
        token: AccountId,
        tokens_paid: Balance,
        min_near: Balance,
    ) {
        let b = env::predecessor_account_id();
        self._swap_reserve_exact_in(&token, tokens_paid, min_near, b.clone(), b);
    }

    /// Same as `swap_reserve_to_near_exact_in`, but user additionly specifies the `recipient`
    /// who will receive the tokens after the swap.
    #[payable]
    pub fn swap_reserve_to_near_exact_in_xfr(
        &mut self,
        token: AccountId,
        tokens_paid: Balance,
        min_near: Balance,
        recipient: AccountId,
    ) {
        let b = env::predecessor_account_id();
        self._swap_reserve_exact_in(&token, tokens_paid, min_near, b, recipient);
    }

    /// Swaps `token` to NEAR and transfers NEAR to the caller.
    /// Caller defines the amount of NEAR he wants to receive under a condition of not spending
    /// more than `max_tokens` of `token`.
    /// Preceeding to this transaction, caller has to create sufficient allowance of `token`
    /// for this contract.
    /// TODO: Transaction will panic if a caller doesn't provide enough allowance.
    pub fn swap_reserve_to_near_exact_out(
        &mut self,
        token: AccountId,
        near_out: Balance,
        max_tokens: Balance,
    ) {
        let b = env::predecessor_account_id();
        self._swap_reserve_exact_out(&token, near_out, max_tokens, b.clone(), b);
    }

    /// Same as `swap_reserve_to_near_exact_out`, but user additionly specifies the `recipient`
    /// who will receive the tokens after the swap.
    pub fn swap_reserve_to_near_exact_out_xfr(
        &mut self,
        token: AccountId,
        near_out: Balance,
        max_tokens: Balance,
        recipient: AccountId,
    ) {
        let b = env::predecessor_account_id();
        self._swap_reserve_exact_out(&token, near_out, max_tokens, b, recipient);
    }

    /// Swaps two different tokens.
    /// Caller defines the amount of tokens he wants to swap under a condition of
    /// receving at least `min_tokens_to`.
    /// Preceeding to this transaction, caller has to create sufficient allowance of
    /// `token_from` for this contract.
    //// TODO: Transaction will panic if a caller doesn't provide enough allowance.
    pub fn swap_tokens_exact_in(
        &mut self,
        from: AccountId,
        to: AccountId,
        tokens_from: Balance,
        min_tokens_to: Balance,
    ) {
        let b = env::predecessor_account_id();
        self._swap_tokens_exact_in(&from, &to, tokens_from, min_tokens_to, b.clone(), b);
    }

    /// Same as `swap_tokens_exact_in`, but user additionly specifies the `recipient`
    /// who will receive the tokens after the swap.
    pub fn swap_tokens_exact_in_xfr(
        &mut self,
        from: AccountId,
        to: AccountId,
        tokens_from: Balance,
        min_tokens_to: Balance,
        recipient: AccountId,
    ) {
        let b = env::predecessor_account_id();
        self._swap_tokens_exact_in(&from, &to, tokens_from, min_tokens_to, b, recipient);
    }

    /// Swaps two different tokens.
    /// Caller defines the amount of tokens he wants to receive under a of not spending
    /// more than `max_tokens_from`.
    /// Preceeding to this transaction, caller has to create sufficient allowance of
    /// `token_from` for this contract.
    //// TODO: Transaction will panic if a caller doesn't provide enough allowance.
    pub fn swap_tokens_exact_out(
        &mut self,
        from: AccountId,
        to: AccountId,
        tokens_to: Balance,
        max_tokens_from: Balance,
    ) {
        let b = env::predecessor_account_id();
        self._swap_tokens_exact_out(&from, &to, tokens_to, max_tokens_from, b.clone(), b);
    }

    /// Same as `swap_tokens_exact_out`, but user additionly specifies the `recipient`
    /// who will receive the tokens after the swap.
    pub fn swap_tokens_exact_out_xfr(
        &mut self,
        from: AccountId,
        to: AccountId,
        tokens_to: Balance,
        max_tokens_from: Balance,
        recipient: AccountId,
    ) {
        let b = env::predecessor_account_id();
        self._swap_tokens_exact_out(&from, &to, tokens_to, max_tokens_from, b, recipient);
    }

    /// Calculates amount of tokens user will recieve when swapping `near_in` for `token`
    /// assets
    pub fn price_near_to_token_in(&self, token: AccountId, near_in: Balance) -> Balance {
        assert!(near_in > 0, "E2");
        let p = self.get_pool(&token);
        return self.calc_out_amount(near_in, p.near_bal, p.token_bal);
    }

    /// Calculates amount of NEAR user will need to swap if he wants to receive
    /// `tokens_out` of `tokens`
    pub fn price_near_to_token_out(&self, token: AccountId, tokens_out: Balance) -> Balance {
        assert!(tokens_out > 0, "E2");
        let p = self.get_pool(&token);
        return self.calc_in_amount(tokens_out, p.token_bal, p.near_bal);
    }

    /// Calculates amount of NEAR user will recieve when swapping `tokens_in` for NEAR.
    pub fn price_token_to_near_in(&self, token: AccountId, tokens_in: Balance) -> Balance {
        assert!(tokens_in > 0, "E2");
        let p = self.get_pool(&token);
        return self.calc_out_amount(tokens_in, p.token_bal, p.near_bal);
    }

    /// Calculates amount of tokens user will need to swap if he wants to receive
    /// `tokens_out` of `tokens`
    pub fn price_token_to_near_out(&self, token: AccountId, near_out: Balance) -> Balance {
        assert!(near_out > 0, "E2");
        let p = self.get_pool(&token);
        return self.calc_in_amount(near_out, p.near_bal, p.token_bal);
    }

    /// Calculates amount of tokens `to` user will receive when swapping `tokens_in` of `from`
    pub fn price_token_to_token_in(
        &self,
        from: AccountId,
        to: AccountId,
        tokens_in: Balance,
    ) -> Balance {
        assert!(tokens_in > 0, "E2");
        let p1 = self.get_pool(&from);
        let p2 = self.get_pool(&to);
        let (_, tokens_out) = self._price_swap_tokens_in(&p1, &p2, tokens_in);
        return tokens_out;
    }

    /// Calculates amount of tokens `from` user will need to swap if he wants to receive
    /// `tokens_out` of tokens `to`
    pub fn price_token_to_token_out(
        &self,
        from: AccountId,
        to: AccountId,
        tokens_out: Balance,
    ) -> Balance {
        assert!(tokens_out > 0, "E2");
        let p1 = self.get_pool(&from);
        let p2 = self.get_pool(&to);
        let (_, tokens_in) = self._price_swap_tokens_out(&p1, &p2, tokens_out);
        return tokens_in;
    }

    pub fn add_liquidity_transfer_callback(&mut self, token: AccountId) {
        env::log(format!("enter add_liquidity_transfer_callback").as_bytes());

        assert_eq!(
            env::current_account_id(),
            env::predecessor_account_id(),
            "Can be called only as a callback"
        );

        assert_eq!(
            env::promise_results_count(),
            1,
            "Contract expected a result on the callback"
        );
        let action_succeeded = match env::promise_result(0) {
            PromiseResult::Successful(_) => true,
            _ => false,
        };

        //simulation do not allows for promises inside callbacks
        //for now just log result

        env::log(format!("PromiseResult  transfer succeeded:{}", action_succeeded).as_bytes());

        if !action_succeeded {
            env::log(
                format!(
                    "from add_liquidity_transfer_callback, token:{} transfer FAILED!",
                    token
                )
                .as_bytes(),
            );
            panic!("callback");
            //TO-DO ROLLBACK add_liquidity
        }

        // If the stake action failed and the current locked amount is positive, then the contract has to unstake.
        /*if !stake_action_succeeded && env::account_locked_balance() > 0 {
            Promise::new(env::current_account_id()).stake(0, self.stake_public_key.clone());
        }
        */
    }
}
//-------------------------
// END CONTRACT PUBLIC API
//-------------------------

//#[cfg(not(target_arch = "wasm32"))]
#[cfg(test)]
mod unit_tests_fun_token;

//#[cfg(not(target_arch = "wasm32"))]
#[cfg(test)]
mod tests {
    use super::*;
    use near_sdk::MockedBlockchain;
    use near_sdk::{testing_env, VMContext};

    use unit_tests_fun_token::FungibleToken;

    struct Accounts {
        current: AccountId,
        owner: AccountId,
        predecessor: AccountId,
        token1: AccountId,
        token2: AccountId,
    }

    struct Ctx {
        accounts: Accounts,
        vm: VMContext,
        token_supply: u128,
    }

    impl Ctx {
        fn create_accounts() -> Accounts {
            return Accounts {
                current: "clp_near".to_string(),
                owner: "owner_near".to_string(),
                predecessor: "pre_near".to_string(),
                token1: "token1_near".to_string(),
                token2: "token2_near".to_string(),
            };
        }

        pub fn new(input: Vec<u8>, is_view: bool) -> Self {
            let accounts = Ctx::create_accounts();
            let vm = VMContext {
                current_account_id: accounts.current.clone(),
                signer_account_id: accounts.owner.clone(),
                signer_account_pk: vec![0, 1, 2],
                predecessor_account_id: accounts.predecessor.clone(),
                input,
                block_index: 0,
                block_timestamp: 0,
                account_balance: 0,
                account_locked_balance: 0,
                storage_usage: 0,
                attached_deposit: 0,
                prepaid_gas: 10u64.pow(18),
                random_seed: vec![0, 1, 2],
                is_view,
                output_data_receivers: vec![],
                epoch_height: 19,
            };
            return Self {
                accounts: accounts,
                vm: vm,
                token_supply: 1_000_000_000_000_000u128,
            };
        }

        pub fn set_vmc_with_token_op_deposit(&mut self) {
            let storage_price_per_byte: Balance = 100000000000000000000;
            self.set_vmc_deposit(storage_price_per_byte * 670); // arbitrary number easy to recoginze)
        }

        pub fn set_vmc_deposit(&mut self, attached_deposit: Balance) {
            self.vm.attached_deposit = attached_deposit;
            testing_env!(self.vm.clone());
        }

        // pub fn accounts_c(self) -> Accounts {
        //     return self.accounts;
        // }
    }

    fn init() -> (Ctx, NearCLP) {
        let ctx = Ctx::new(vec![], false);
        testing_env!(ctx.vm.clone());
        let contract = NearCLP::new(ctx.accounts.owner.clone());
        return (ctx, contract);
    }

    // TODO - fix this test.
    // #[test]
    // #[should_panic]
    // fn test_new_twice_fails() {
    //     let (ctx, _c) = init();
    //     NearCLP::new(ctx.accounts.current);
    // }

    #[test]
    fn change_owner() {
        let (mut ctx, mut c) = init();

        assert_eq!(&c.owner, &ctx.accounts.owner);

        ctx.vm.predecessor_account_id = ctx.accounts.owner;
        testing_env!(ctx.vm);
        let owner2 = "new_owner_near".to_string();
        c.change_owner(owner2.clone());
        assert_eq!(c.owner, owner2);
    }

    #[test]
    #[should_panic(expected = "Only the owner can call this function")]
    fn change_owner_other_account() {
        let (_, mut c) = init();
        let owner2 = "new_owner_near".to_string();
        c.change_owner(owner2.clone());
    }

    #[test]
    #[should_panic(expected = "E1")]
    fn create_twice_same_pool_fails() {
        let (ctx, mut c) = init();
        c.create_pool(ctx.accounts.token1.clone());

        // let's check firstly the pool is there
        let pools = c.list_pools();
        let expected = [ctx.accounts.token1.clone()];
        assert_eq!(pools, expected);

        //
        c.create_pool(ctx.accounts.token1);
    }

    fn check_and_create_pool(c: &mut NearCLP, token: &AccountId) {
        c.create_pool(token.to_string());
        match c.pool_info(token) {
            None => panic!("Pool for {} token is expected"),
            Some(p) => assert_eq!(
                p,
                PoolInfo {
                    near_bal: 0,
                    token_bal: 0,
                    total_shares: 0
                }
            ),
        }
    }

    #[test]
    fn anyone_create_pool() {
        let (ctx, mut c) = init();
        check_and_create_pool(&mut c, &ctx.accounts.token1);
        check_and_create_pool(&mut c, &ctx.accounts.token2);

        let mut pools = c.list_pools();
        let mut expected = [ctx.accounts.token1, ctx.accounts.token2];
        pools.sort();
        expected.sort();
        assert_eq!(pools, expected);
    }

    #[test]
    fn add_liquidity_happy_path() {
        let (mut ctx, mut c) = init();
        let a = ctx.accounts.predecessor.clone();
        let t = ctx.accounts.token1.clone();
        let mut token1 = FungibleToken::new(a.clone(), ctx.token_supply.into());
        check_and_create_pool(&mut c, &t);
        assert_eq!(
            token1.total_supply, ctx.token_supply,
            "Token total supply must be correct"
        );

        let near_deposit = 3000u128;
        let token_deposit = 500u128;
        ctx.set_vmc_with_token_op_deposit();
        token1.inc_allowance(t.clone(), token_deposit.into());

        ctx.set_vmc_deposit(near_deposit);
        let max_token_deposit = token_deposit;
        let min_shares_required = near_deposit;
        c.add_liquidity(t.clone(), max_token_deposit, min_shares_required);

        let p = c.pool_info(&t).expect("Pool should exist");
        assert_eq!(p.near_bal, near_deposit, "Near balance should be correct");
        assert_eq!(
            p.token_bal, token_deposit,
            "Token balance should be correct"
        );
    }

    // TODO tests
    // + add liquidity with max_balance > allowance
}

'''
'''--- contract/src/nep21.rs ---
use near_sdk::ext_contract;
use near_sdk::json_types::U128;

#[ext_contract(ext_nep21)]
pub trait NEP21 {
    // #[payable]
    fn transfer(&mut self, dest: AccountId, amount: U128);

    // #[payable]
    fn transfer_from(&mut self, from: AccountId, dest: AccountId, amount: U128);
}

'''
'''--- contract/src/unit_tests_fun_token.rs ---
#![cfg(not(target_arch = "wasm32"))]
#![cfg(test)]
#![allow(dead_code)]
/**
 * Fungible Token implementation based on near-sdk/examples
 */
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::collections::UnorderedMap;
use near_sdk::json_types::U128;
use near_sdk::{env, near_bindgen, AccountId, Balance, Promise, StorageUsage};

/// Price per 1 byte of storage from mainnet genesis config.
const STORAGE_PRICE_PER_BYTE: Balance = 100000000000000000000;

/// Contains balance and allowances information for one account.
#[derive(BorshDeserialize, BorshSerialize)]
pub struct Account {
    /// Current account balance.
    pub balance: Balance,
    /// Escrow Account ID hash to the allowance amount.
    /// Allowance is the amount of tokens the Escrow Account ID can spent on behalf of the account
    /// owner.
    pub allowances: UnorderedMap<Vec<u8>, Balance>,
}

impl Account {
    /// Initializes a new Account with 0 balance and no allowances for a given `account_hash`.
    pub fn new(account_hash: Vec<u8>) -> Self {
        Self {
            balance: 0,
            allowances: UnorderedMap::new(account_hash),
        }
    }

    /// Sets allowance for account `escrow_account_id` to `allowance`.
    pub fn set_allowance(&mut self, escrow_account_id: &AccountId, allowance: Balance) {
        let escrow_hash = env::sha256(escrow_account_id.as_bytes());
        if allowance > 0 {
            self.allowances.insert(&escrow_hash, &allowance);
        } else {
            self.allowances.remove(&escrow_hash);
        }
    }

    /// Returns the allowance of account `escrow_account_id`.
    pub fn get_allowance(&self, escrow_account_id: &AccountId) -> Balance {
        let escrow_hash = env::sha256(escrow_account_id.as_bytes());
        self.allowances.get(&escrow_hash).unwrap_or(0)
    }
}

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct FungibleToken {
    /// sha256(AccountID) -> Account details.
    pub accounts: UnorderedMap<Vec<u8>, Account>,

    /// Total supply of the all token.
    pub total_supply: Balance,
}

impl Default for FungibleToken {
    fn default() -> Self {
        panic!("Fun token should be initialized before usage")
    }
}

#[near_bindgen]
impl FungibleToken {
    /// Initializes the contract with the given total supply owned by the given `owner_id`.
    #[init]
    pub fn new(owner_id: AccountId, total_supply: U128) -> Self {
        let total_supply = total_supply.into();
        assert!(!env::state_exists(), "Already initialized");
        let mut ft = Self {
            accounts: UnorderedMap::new(b"a".to_vec()),
            total_supply,
        };
        let mut account = ft.get_account(&owner_id);
        account.balance = total_supply;
        ft.set_account(&owner_id, &account);
        ft
    }

    /// Demo function to create tokens for given account.
    /// Panics if the `beneficiary` account doesn't exist.
    pub fn mint(&mut self, beneficiary: AccountId, b: Balance) {
        assert!(
            env::is_valid_account_id(beneficiary.as_bytes()),
            "Owner's account ID is invalid"
        );
        let account_hash = env::sha256(beneficiary.as_bytes());
        let mut account = self
            .accounts
            .get(&account_hash)
            .unwrap_or_else(|| panic!("Account doesn't exist"));
        // let mut account = self.get_account(&owner_id);
        account.balance = b;
        self.set_account(&beneficiary, &account);
    }

    /// Increments the `allowance` for `escrow_account_id` by `amount` on the account of the caller of this contract
    /// (`predecessor_id`) who is the balance owner.
    /// Requirements:
    /// * Caller of the method has to attach deposit enough to cover storage difference at the
    ///   fixed storage price defined in the contract.
    #[payable]
    pub fn inc_allowance(&mut self, escrow_account_id: AccountId, amount: U128) {
        let initial_storage = env::storage_usage();
        assert!(
            env::is_valid_account_id(escrow_account_id.as_bytes()),
            "Escrow account ID is invalid"
        );
        let owner_id = env::predecessor_account_id();
        if escrow_account_id == owner_id {
            env::panic(b"Can not increment allowance for yourself");
        }
        let mut account = self.get_account(&owner_id);
        let current_allowance = account.get_allowance(&escrow_account_id);
        account.set_allowance(
            &escrow_account_id,
            current_allowance.saturating_add(amount.0),
        );
        self.set_account(&owner_id, &account);
        self.refund_storage(initial_storage);
    }

    /// Decrements the `allowance` for `escrow_account_id` by `amount` on the account of the caller of this contract
    /// (`predecessor_id`) who is the balance owner.
    /// Requirements:
    /// * Caller of the method has to attach deposit enough to cover storage difference at the
    ///   fixed storage price defined in the contract.
    #[payable]
    pub fn dec_allowance(&mut self, escrow_account_id: AccountId, amount: U128) {
        let initial_storage = env::storage_usage();
        assert!(
            env::is_valid_account_id(escrow_account_id.as_bytes()),
            "Escrow account ID is invalid"
        );
        let owner_id = env::predecessor_account_id();
        if escrow_account_id == owner_id {
            env::panic(b"Can not decrement allowance for yourself");
        }
        let mut account = self.get_account(&owner_id);
        let current_allowance = account.get_allowance(&escrow_account_id);
        account.set_allowance(
            &escrow_account_id,
            current_allowance.saturating_sub(amount.0),
        );
        self.set_account(&owner_id, &account);
        self.refund_storage(initial_storage);
    }

    /// Transfers the `amount` of tokens from `owner_id` to the `new_owner_id`.
    /// Requirements:
    /// * `amount` should be a positive integer.
    /// * `owner_id` should have balance on the account greater or equal than the transfer `amount`.
    /// * If this function is called by an escrow account (`owner_id != predecessor_account_id`),
    ///   then the allowance of the caller of the function (`predecessor_account_id`) on
    ///   the account of `owner_id` should be greater or equal than the transfer `amount`.
    /// * Caller of the method has to attach deposit enough to cover storage difference at the
    ///   fixed storage price defined in the contract.
    #[payable]
    pub fn transfer_from(&mut self, owner_id: AccountId, new_owner_id: AccountId, amount: U128) {
        let initial_storage = env::storage_usage();
        assert!(
            env::is_valid_account_id(new_owner_id.as_bytes()),
            "New owner's account ID is invalid"
        );
        let amount = amount.into();
        if amount == 0 {
            env::panic(b"Can't transfer 0 tokens");
        }
        assert_ne!(
            owner_id, new_owner_id,
            "The new owner should be different from the current owner"
        );
        // Retrieving the account from the state.
        let mut account = self.get_account(&owner_id);

        // Checking and updating unlocked balance
        if account.balance < amount {
            env::panic(b"Not enough balance");
        }
        account.balance -= amount;

        // If transferring by escrow, need to check and update allowance.
        let escrow_account_id = env::predecessor_account_id();
        if escrow_account_id != owner_id {
            let allowance = account.get_allowance(&escrow_account_id);
            if allowance < amount {
                env::panic(b"Not enough allowance");
            }
            account.set_allowance(&escrow_account_id, allowance - amount);
        }

        // Saving the account back to the state.
        self.set_account(&owner_id, &account);

        // Deposit amount to the new owner and save the new account to the state.
        let mut new_account = self.get_account(&new_owner_id);
        new_account.balance += amount;
        self.set_account(&new_owner_id, &new_account);
        self.refund_storage(initial_storage);
    }

    /// Transfer `amount` of tokens from the caller of the contract (`predecessor_id`) to
    /// `new_owner_id`.
    /// Act the same was as `transfer_from` with `owner_id` equal to the caller of the contract
    /// (`predecessor_id`).
    /// Requirements:
    /// * Caller of the method has to attach deposit enough to cover storage difference at the
    ///   fixed storage price defined in the contract.
    #[payable]
    pub fn transfer(&mut self, new_owner_id: AccountId, amount: U128) {
        // NOTE: New owner's Account ID checked in transfer_from.
        // Storage fees are also refunded in transfer_from.
        self.transfer_from(env::predecessor_account_id(), new_owner_id, amount);
    }

    /// Returns total supply of tokens.
    pub fn get_total_supply(&self) -> U128 {
        self.total_supply.into()
    }

    /// Returns balance of the `owner_id` account.
    pub fn get_balance(&self, owner_id: AccountId) -> U128 {
        self.get_account(&owner_id).balance.into()
    }

    /// Returns current allowance of `escrow_account_id` for the account of `owner_id`.
    ///
    /// NOTE: Other contracts should not rely on this information, because by the moment a contract
    /// receives this information, the allowance may already be changed by the owner.
    /// So this method should only be used on the front-end to see the current allowance.
    pub fn get_allowance(&self, owner_id: AccountId, escrow_account_id: AccountId) -> U128 {
        assert!(
            env::is_valid_account_id(escrow_account_id.as_bytes()),
            "Escrow account ID is invalid"
        );
        self.get_account(&owner_id)
            .get_allowance(&escrow_account_id)
            .into()
    }
}

impl FungibleToken {
    /// Helper method to get the account details for `owner_id`.
    fn get_account(&self, owner_id: &AccountId) -> Account {
        assert!(
            env::is_valid_account_id(owner_id.as_bytes()),
            "Owner's account ID is invalid"
        );
        let account_hash = env::sha256(owner_id.as_bytes());
        self.accounts
            .get(&account_hash)
            .unwrap_or_else(|| Account::new(account_hash))
    }

    /// Helper method to set the account details for `owner_id` to the state.
    fn set_account(&mut self, owner_id: &AccountId, account: &Account) {
        let account_hash = env::sha256(owner_id.as_bytes());
        if account.balance > 0 || !account.allowances.is_empty() {
            self.accounts.insert(&account_hash, &account);
        } else {
            self.accounts.remove(&account_hash);
        }
    }

    fn refund_storage(&self, initial_storage: StorageUsage) {
        let current_storage = env::storage_usage();
        let attached_deposit = env::attached_deposit();
        let refund_amount = if current_storage > initial_storage {
            let required_deposit =
                Balance::from(current_storage - initial_storage) * STORAGE_PRICE_PER_BYTE;
            assert!(
                required_deposit <= attached_deposit,
                "The required attached deposit is {}, but the given attached deposit is is {}",
                required_deposit,
                attached_deposit,
            );
            attached_deposit - required_deposit
        } else {
            attached_deposit
                + Balance::from(initial_storage - current_storage) * STORAGE_PRICE_PER_BYTE
        };
        if refund_amount > 0 {
            env::log(format!("Refunding {} tokens for storage", refund_amount).as_bytes());
            Promise::new(env::predecessor_account_id()).transfer(refund_amount);
        }
    }
}

'''
'''--- contract/src/util.rs ---
use near_sdk::{env, AccountId};

/** Ensures that an account `a` is valid and panics if it's not.
`name`: printed name of the account */
pub fn assert_account(a: &AccountId, name: &str) {
    assert!(
        env::is_valid_account_id(a.as_bytes()),
        format!("{} account ID is invalid", name)
    );
}

pub fn yton(near_amount: u128) -> u128 {
    return near_amount / 10u128.pow(24)
}

'''
'''--- contract/target/doc/near_clp/index.html ---
<!DOCTYPE html><html lang="en"><head><meta charset="utf-8"><meta name="viewport" content="width=device-width, initial-scale=1.0"><meta name="generator" content="rustdoc"><meta name="description" content="API documentation for the Rust `near_clp` crate."><meta name="keywords" content="rust, rustlang, rust-lang, near_clp"><title>near_clp - Rust</title><link rel="stylesheet" type="text/css" href="../normalize.css"><link rel="stylesheet" type="text/css" href="../rustdoc.css" id="mainThemeStyle"><link rel="stylesheet" type="text/css" href="../dark.css"><link rel="stylesheet" type="text/css" href="../light.css" id="themeStyle"><script src="../storage.js"></script><noscript><link rel="stylesheet" href="../noscript.css"></noscript><link rel="shortcut icon" href="../favicon.ico"><style type="text/css">#crate-search{background-image:url("../down-arrow.svg");}</style></head><body class="rustdoc mod"><!--[if lte IE 8]><div class="warning">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class="sidebar"><div class="sidebar-menu">&#9776;</div><a href='../near_clp/index.html'><div class='logo-container'><img src='../rust-logo.png' alt='logo'></div></a><p class='location'>Crate near_clp</p><div class="sidebar-elems"><a id='all-types' href='all.html'><p>See all near_clp's items</p></a><div class="block items"><ul><li><a href="#modules">Modules</a></li><li><a href="#structs">Structs</a></li></ul></div><p class='location'></p><script>window.sidebarCurrent = {name: 'near_clp', ty: 'mod', relpath: '../'};</script></div></nav><div class="theme-picker"><button id="theme-picker" aria-label="Pick another theme!"><img src="../brush.svg" width="18" alt="Pick another theme!"></button><div id="theme-choices"></div></div><script src="../theme.js"></script><nav class="sub"><form class="search-form"><div class="search-container"><div><select id="crate-search"><option value="All crates">All crates</option></select><input class="search-input" name="search" disabled autocomplete="off" spellcheck="false" placeholder="Click or press ‘S’ to search, ‘?’ for more options…" type="search"></div><a id="settings-menu" href="../settings.html"><img src="../wheel.svg" width="18" alt="Change settings"></a></div></form></nav><section id="main" class="content"><h1 class='fqn'><span class='out-of-band'><span id='render-detail'><a id="toggle-all-docs" href="javascript:void(0)" title="collapse all docs">[<span class='inner'>&#x2212;</span>]</a></span><a class='srclink' href='../src/near_clp/lib.rs.html#2-1056' title='goto source code'>[src]</a></span><span class='in-band'>Crate <a class="mod" href=''>near_clp</a></span></h1><h2 id='modules' class='section-header'><a href="#modules">Modules</a></h2>
<table><tr class='module-item'><td><a class="mod" href="ext_self/index.html" title='near_clp::ext_self mod'>ext_self</a></td><td class='docblock-short'></td></tr></table><h2 id='structs' class='section-header'><a href="#structs">Structs</a></h2>
<table><tr class='module-item'><td><a class="struct" href="struct.NearCLP.html" title='near_clp::NearCLP struct'>NearCLP</a></td><td class='docblock-short'><p>NearCLP is the main contract for managing the swap pools and liquidity.
It implements the NEARswap functionality.</p>
</td></tr><tr class='module-item'><td><a class="struct" href="struct.Pool.html" title='near_clp::Pool struct'>Pool</a></td><td class='docblock-short'></td></tr><tr class='module-item'><td><a class="struct" href="struct.PoolInfo.html" title='near_clp::PoolInfo struct'>PoolInfo</a></td><td class='docblock-short'><p>PoolInfo is a helper structure to extract public data from a Pool</p>
</td></tr><tr class='module-item'><td><a class="struct" href="struct.U256.html" title='near_clp::U256 struct'>U256</a></td><td class='docblock-short'><p>Little-endian large integer type</p>
</td></tr></table></section><section id="search" class="content hidden"></section><section class="footer"></section><script>window.rootPath = "../";window.currentCrate = "near_clp";</script><script src="../main.js"></script><script defer src="../search-index.js"></script></body></html>
'''
'''--- contract/target/doc/near_clp/struct.NearCLP.html ---
<!DOCTYPE html><html lang="en"><head><meta charset="utf-8"><meta name="viewport" content="width=device-width, initial-scale=1.0"><meta name="generator" content="rustdoc"><meta name="description" content="API documentation for the Rust `NearCLP` struct in crate `near_clp`."><meta name="keywords" content="rust, rustlang, rust-lang, NearCLP"><title>near_clp::NearCLP - Rust</title><link rel="stylesheet" type="text/css" href="../normalize.css"><link rel="stylesheet" type="text/css" href="../rustdoc.css" id="mainThemeStyle"><link rel="stylesheet" type="text/css" href="../dark.css"><link rel="stylesheet" type="text/css" href="../light.css" id="themeStyle"><script src="../storage.js"></script><noscript><link rel="stylesheet" href="../noscript.css"></noscript><link rel="shortcut icon" href="../favicon.ico"><style type="text/css">#crate-search{background-image:url("../down-arrow.svg");}</style></head><body class="rustdoc struct"><!--[if lte IE 8]><div class="warning">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class="sidebar"><div class="sidebar-menu">&#9776;</div><a href='../near_clp/index.html'><div class='logo-container'><img src='../rust-logo.png' alt='logo'></div></a><p class='location'>Struct NearCLP</p><div class="sidebar-elems"><div class="block items"><a class="sidebar-title" href="#fields">Fields</a><div class="sidebar-links"><a href="#structfield.fee_dst">fee_dst</a><a href="#structfield.owner">owner</a></div><a class="sidebar-title" href="#implementations">Methods</a><div class="sidebar-links"><a href="#method.add_liquidity">add_liquidity</a><a href="#method.change_owner">change_owner</a><a href="#method.create_pool">create_pool</a><a href="#method.nep21_transfer_callback">nep21_transfer_callback</a><a href="#method.new">new</a><a href="#method.pool_info">pool_info</a><a href="#method.price_near_to_token_in">price_near_to_token_in</a><a href="#method.price_near_to_token_out">price_near_to_token_out</a><a href="#method.price_token_to_near_in">price_token_to_near_in</a><a href="#method.price_token_to_near_out">price_token_to_near_out</a><a href="#method.price_token_to_token_in">price_token_to_token_in</a><a href="#method.price_token_to_token_out">price_token_to_token_out</a><a href="#method.set_fee_dst">set_fee_dst</a><a href="#method.shares_balance_of">shares_balance_of</a><a href="#method.swap_near_to_reserve_exact_in">swap_near_to_reserve_exact_in</a><a href="#method.swap_near_to_reserve_exact_in_xfr">swap_near_to_reserve_exact_in_xfr</a><a href="#method.swap_near_to_reserve_exact_out">swap_near_to_reserve_exact_out</a><a href="#method.swap_near_to_reserve_exact_out_xfr">swap_near_to_reserve_exact_out_xfr</a><a href="#method.swap_reserve_to_near_exact_in">swap_reserve_to_near_exact_in</a><a href="#method.swap_reserve_to_near_exact_in_xfr">swap_reserve_to_near_exact_in_xfr</a><a href="#method.swap_reserve_to_near_exact_out">swap_reserve_to_near_exact_out</a><a href="#method.swap_reserve_to_near_exact_out_xfr">swap_reserve_to_near_exact_out_xfr</a><a href="#method.swap_tokens_exact_in">swap_tokens_exact_in</a><a href="#method.swap_tokens_exact_in_xfr">swap_tokens_exact_in_xfr</a><a href="#method.swap_tokens_exact_out">swap_tokens_exact_out</a><a href="#method.swap_tokens_exact_out_xfr">swap_tokens_exact_out_xfr</a><a href="#method.withdraw_liquidity">withdraw_liquidity</a></div><a class="sidebar-title" href="#trait-implementations">Trait Implementations</a><div class="sidebar-links"><a href="#impl-BorshDeserialize">BorshDeserialize</a><a href="#impl-BorshSerialize">BorshSerialize</a><a href="#impl-Default">Default</a></div><a class="sidebar-title" href="#synthetic-implementations">Auto Trait Implementations</a><div class="sidebar-links"><a href="#impl-RefUnwindSafe">RefUnwindSafe</a><a href="#impl-Send">Send</a><a href="#impl-Sync">Sync</a><a href="#impl-Unpin">Unpin</a><a href="#impl-UnwindSafe">UnwindSafe</a></div><a class="sidebar-title" href="#blanket-implementations">Blanket Implementations</a><div class="sidebar-links"><a href="#impl-Any">Any</a><a href="#impl-Borrow%3CT%3E">Borrow&lt;T&gt;</a><a href="#impl-BorrowMut%3CT%3E">BorrowMut&lt;T&gt;</a><a href="#impl-From%3CT%3E">From&lt;T&gt;</a><a href="#impl-Into%3CU%3E">Into&lt;U&gt;</a><a href="#impl-Same%3CT%3E">Same&lt;T&gt;</a><a href="#impl-TryFrom%3CU%3E">TryFrom&lt;U&gt;</a><a href="#impl-TryInto%3CU%3E">TryInto&lt;U&gt;</a></div></div><p class='location'><a href='index.html'>near_clp</a></p><script>window.sidebarCurrent = {name: 'NearCLP', ty: 'struct', relpath: ''};</script><script defer src="sidebar-items.js"></script></div></nav><div class="theme-picker"><button id="theme-picker" aria-label="Pick another theme!"><img src="../brush.svg" width="18" alt="Pick another theme!"></button><div id="theme-choices"></div></div><script src="../theme.js"></script><nav class="sub"><form class="search-form"><div class="search-container"><div><select id="crate-search"><option value="All crates">All crates</option></select><input class="search-input" name="search" disabled autocomplete="off" spellcheck="false" placeholder="Click or press ‘S’ to search, ‘?’ for more options…" type="search"></div><a id="settings-menu" href="../settings.html"><img src="../wheel.svg" width="18" alt="Change settings"></a></div></form></nav><section id="main" class="content"><h1 class='fqn'><span class='out-of-band'><span id='render-detail'><a id="toggle-all-docs" href="javascript:void(0)" title="collapse all docs">[<span class='inner'>&#x2212;</span>]</a></span><a class='srclink' href='../src/near_clp/lib.rs.html#101-106' title='goto source code'>[src]</a></span><span class='in-band'>Struct <a href='index.html'>near_clp</a>::<wbr><a class="struct" href=''>NearCLP</a></span></h1><div class="docblock type-decl hidden-by-usual-hider"><pre class='rust struct'>pub struct NearCLP {
    pub fee_dst: <a class="type" href="../near_vm_logic/types/type.AccountId.html" title="type near_vm_logic::types::AccountId">AccountId</a>,
    pub owner: <a class="type" href="../near_vm_logic/types/type.AccountId.html" title="type near_vm_logic::types::AccountId">AccountId</a>,
    // some fields omitted
}</pre></div><div class='docblock'><p>NearCLP is the main contract for managing the swap pools and liquidity.
It implements the NEARswap functionality.</p>
</div><h2 id='fields' class='fields small-section-header'>
                       Fields<a href='#fields' class='anchor'></a></h2><span id="structfield.fee_dst" class="structfield small-section-header"><a href="#structfield.fee_dst" class="anchor field"></a><code>fee_dst: <a class="type" href="../near_vm_logic/types/type.AccountId.html" title="type near_vm_logic::types::AccountId">AccountId</a></code></span><span id="structfield.owner" class="structfield small-section-header"><a href="#structfield.owner" class="anchor field"></a><code>owner: <a class="type" href="../near_vm_logic/types/type.AccountId.html" title="type near_vm_logic::types::AccountId">AccountId</a></code></span><h2 id='implementations' class='small-section-header'>Implementations<a href='#implementations' class='anchor'></a></h2><h3 id='impl' class='impl'><code class='in-band'>impl <a class="struct" href="../near_clp/struct.NearCLP.html" title="struct near_clp::NearCLP">NearCLP</a></code><a href='#impl' class='anchor'></a><a class='srclink' href='../src/near_clp/lib.rs.html#115-527' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='method.new' class="method"><code>pub fn <a href='#method.new' class='fnname'>new</a>(owner: <a class="type" href="../near_vm_logic/types/type.AccountId.html" title="type near_vm_logic::types::AccountId">AccountId</a>) -&gt; Self</code><a class='srclink' href='../src/near_clp/lib.rs.html#117-125' title='goto source code'>[src]</a></h4><h4 id='method.set_fee_dst' class="method"><code>pub fn <a href='#method.set_fee_dst' class='fnname'>set_fee_dst</a>(&amp;mut self, fee_dst: <a class="type" href="../near_vm_logic/types/type.AccountId.html" title="type near_vm_logic::types::AccountId">AccountId</a>)</code><a class='srclink' href='../src/near_clp/lib.rs.html#127-137' title='goto source code'>[src]</a></h4><h4 id='method.change_owner' class="method"><code>pub fn <a href='#method.change_owner' class='fnname'>change_owner</a>(&amp;mut self, new_owner: <a class="type" href="../near_vm_logic/types/type.AccountId.html" title="type near_vm_logic::types::AccountId">AccountId</a>)</code><a class='srclink' href='../src/near_clp/lib.rs.html#141-148' title='goto source code'>[src]</a></h4><div class='docblock'><p>Owner is an account (can be a multisig) who has management rights to update
fee size.</p>
</div><h4 id='method.create_pool' class="method"><code>pub fn <a href='#method.create_pool' class='fnname'>create_pool</a>(&amp;mut self, token: <a class="type" href="../near_vm_logic/types/type.AccountId.html" title="type near_vm_logic::types::AccountId">AccountId</a>)</code><a class='srclink' href='../src/near_clp/lib.rs.html#157-164' title='goto source code'>[src]</a></h4><div class='docblock'><p>Allows any user to creat a new near-token pool. Each pool is identified by the <code>token</code>
account - which we call the Pool Reserve Token.
If a pool for give token exists then &quot;E1&quot; assert exception is thrown.</p>
</div><h4 id='method.pool_info' class="method"><code>pub fn <a href='#method.pool_info' class='fnname'>pool_info</a>(&amp;self, token: <a class="type" href="../near_vm_logic/types/type.AccountId.html" title="type near_vm_logic::types::AccountId">AccountId</a>) -&gt; <a class="enum" href="https://doc.rust-lang.org/nightly/core/option/enum.Option.html" title="enum core::option::Option">Option</a>&lt;<a class="struct" href="../near_clp/struct.PoolInfo.html" title="struct near_clp::PoolInfo">PoolInfo</a>&gt;</code><a class='srclink' href='../src/near_clp/lib.rs.html#167-172' title='goto source code'>[src]</a></h4><div class='docblock'><p>Extracts public information of the <code>token</code> pool.</p>
</div><h4 id='method.add_liquidity' class="method"><code>pub fn <a href='#method.add_liquidity' class='fnname'>add_liquidity</a>(<br>&nbsp;&nbsp;&nbsp;&nbsp;&amp;mut self, <br>&nbsp;&nbsp;&nbsp;&nbsp;token: <a class="type" href="../near_vm_logic/types/type.AccountId.html" title="type near_vm_logic::types::AccountId">AccountId</a>, <br>&nbsp;&nbsp;&nbsp;&nbsp;max_token_amount: <a class="type" href="../near_vm_logic/types/type.Balance.html" title="type near_vm_logic::types::Balance">Balance</a>, <br>&nbsp;&nbsp;&nbsp;&nbsp;min_shares_amont: <a class="type" href="../near_vm_logic/types/type.Balance.html" title="type near_vm_logic::types::Balance">Balance</a><br>)</code><a class='srclink' href='../src/near_clp/lib.rs.html#177-240' title='goto source code'>[src]</a></h4><div class='docblock'><p>Increases Near and the Reserve token liquidity.
The supplied funds must preserver current ratio of the liquidity pool.</p>
</div><h4 id='method.withdraw_liquidity' class="method"><code>pub fn <a href='#method.withdraw_liquidity' class='fnname'>withdraw_liquidity</a>(<br>&nbsp;&nbsp;&nbsp;&nbsp;&amp;mut self, <br>&nbsp;&nbsp;&nbsp;&nbsp;token: <a class="type" href="../near_vm_logic/types/type.AccountId.html" title="type near_vm_logic::types::AccountId">AccountId</a>, <br>&nbsp;&nbsp;&nbsp;&nbsp;shares: <a class="type" href="../near_vm_logic/types/type.Balance.html" title="type near_vm_logic::types::Balance">Balance</a>, <br>&nbsp;&nbsp;&nbsp;&nbsp;min_near: <a class="type" href="../near_vm_logic/types/type.Balance.html" title="type near_vm_logic::types::Balance">Balance</a>, <br>&nbsp;&nbsp;&nbsp;&nbsp;min_tokens: <a class="type" href="../near_vm_logic/types/type.Balance.html" title="type near_vm_logic::types::Balance">Balance</a><br>)</code><a class='srclink' href='../src/near_clp/lib.rs.html#245-283' title='goto source code'>[src]</a></h4><div class='docblock'><p>Redeems <code>shares</code> for liquidity stored in this pool with condition of getting at least
<code>min_near</code> of Near and <code>min_tokens</code> of reserve. Shares are note exchengable between
different pools.</p>
</div><h4 id='method.shares_balance_of' class="method"><code>pub fn <a href='#method.shares_balance_of' class='fnname'>shares_balance_of</a>(&amp;self, token: <a class="type" href="../near_vm_logic/types/type.AccountId.html" title="type near_vm_logic::types::AccountId">AccountId</a>, owner: <a class="type" href="../near_vm_logic/types/type.AccountId.html" title="type near_vm_logic::types::AccountId">AccountId</a>) -&gt; <a class="type" href="../near_vm_logic/types/type.Balance.html" title="type near_vm_logic::types::Balance">Balance</a></code><a class='srclink' href='../src/near_clp/lib.rs.html#286-288' title='goto source code'>[src]</a></h4><div class='docblock'><p>Returns the owner balance of shares of a pool identified by token.</p>
</div><h4 id='method.swap_near_to_reserve_exact_in' class="method"><code>pub fn <a href='#method.swap_near_to_reserve_exact_in' class='fnname'>swap_near_to_reserve_exact_in</a>(<br>&nbsp;&nbsp;&nbsp;&nbsp;&amp;mut self, <br>&nbsp;&nbsp;&nbsp;&nbsp;token: <a class="type" href="../near_vm_logic/types/type.AccountId.html" title="type near_vm_logic::types::AccountId">AccountId</a>, <br>&nbsp;&nbsp;&nbsp;&nbsp;min_tokens: <a class="type" href="../near_vm_logic/types/type.Balance.html" title="type near_vm_logic::types::Balance">Balance</a><br>)</code><a class='srclink' href='../src/near_clp/lib.rs.html#298-305' title='goto source code'>[src]</a></h4><div class='docblock'><p>Swaps NEAR to <code>token</code> and transfers the reserve tokens to the caller.
Caller attaches near tokens he wants to swap to the transacion under a condition of
receving at least <code>min_tokens</code>.</p>
</div><h4 id='method.swap_near_to_reserve_exact_in_xfr' class="method"><code>pub fn <a href='#method.swap_near_to_reserve_exact_in_xfr' class='fnname'>swap_near_to_reserve_exact_in_xfr</a>(<br>&nbsp;&nbsp;&nbsp;&nbsp;&amp;mut self, <br>&nbsp;&nbsp;&nbsp;&nbsp;token: <a class="type" href="../near_vm_logic/types/type.AccountId.html" title="type near_vm_logic::types::AccountId">AccountId</a>, <br>&nbsp;&nbsp;&nbsp;&nbsp;min_tokens: <a class="type" href="../near_vm_logic/types/type.Balance.html" title="type near_vm_logic::types::Balance">Balance</a>, <br>&nbsp;&nbsp;&nbsp;&nbsp;recipient: <a class="type" href="../near_vm_logic/types/type.AccountId.html" title="type near_vm_logic::types::AccountId">AccountId</a><br>)</code><a class='srclink' href='../src/near_clp/lib.rs.html#310-317' title='goto source code'>[src]</a></h4><div class='docblock'><p>Same as <code>swap_near_to_reserve_exact_in</code>, but user additionly specifies the <code>recipient</code>
who will receive the tokens after the swap.</p>
</div><h4 id='method.swap_near_to_reserve_exact_out' class="method"><code>pub fn <a href='#method.swap_near_to_reserve_exact_out' class='fnname'>swap_near_to_reserve_exact_out</a>(<br>&nbsp;&nbsp;&nbsp;&nbsp;&amp;mut self, <br>&nbsp;&nbsp;&nbsp;&nbsp;token: <a class="type" href="../near_vm_logic/types/type.AccountId.html" title="type near_vm_logic::types::AccountId">AccountId</a>, <br>&nbsp;&nbsp;&nbsp;&nbsp;tokens_out: <a class="type" href="../near_vm_logic/types/type.Balance.html" title="type near_vm_logic::types::Balance">Balance</a><br>)</code><a class='srclink' href='../src/near_clp/lib.rs.html#324-327' title='goto source code'>[src]</a></h4><div class='docblock'><p>Swaps NEAR to <code>token</code> and transfers the reserve tokens to the caller.
Caller attaches maximum amount of NEAR he is willing to swap to receive <code>tokens_out</code>
of <code>token</code> wants to swap to the transacion. Surplus of NEAR tokens will be returned.
Transaction will panic if the caller doesn't attach enough NEAR tokens.</p>
</div><h4 id='method.swap_near_to_reserve_exact_out_xfr' class="method"><code>pub fn <a href='#method.swap_near_to_reserve_exact_out_xfr' class='fnname'>swap_near_to_reserve_exact_out_xfr</a>(<br>&nbsp;&nbsp;&nbsp;&nbsp;&amp;mut self, <br>&nbsp;&nbsp;&nbsp;&nbsp;token: <a class="type" href="../near_vm_logic/types/type.AccountId.html" title="type near_vm_logic::types::AccountId">AccountId</a>, <br>&nbsp;&nbsp;&nbsp;&nbsp;tokens_out: <a class="type" href="../near_vm_logic/types/type.Balance.html" title="type near_vm_logic::types::Balance">Balance</a>, <br>&nbsp;&nbsp;&nbsp;&nbsp;recipient: <a class="type" href="../near_vm_logic/types/type.AccountId.html" title="type near_vm_logic::types::AccountId">AccountId</a><br>)</code><a class='srclink' href='../src/near_clp/lib.rs.html#332-345' title='goto source code'>[src]</a></h4><div class='docblock'><p>Same as <code>swap_near_to_reserve_exact_out</code>, but user additionly specifies the <code>recipient</code>
who will receive the tokens after the swap.</p>
</div><h4 id='method.swap_reserve_to_near_exact_in' class="method"><code>pub fn <a href='#method.swap_reserve_to_near_exact_in' class='fnname'>swap_reserve_to_near_exact_in</a>(<br>&nbsp;&nbsp;&nbsp;&nbsp;&amp;mut self, <br>&nbsp;&nbsp;&nbsp;&nbsp;token: <a class="type" href="../near_vm_logic/types/type.AccountId.html" title="type near_vm_logic::types::AccountId">AccountId</a>, <br>&nbsp;&nbsp;&nbsp;&nbsp;tokens_paid: <a class="type" href="../near_vm_logic/types/type.Balance.html" title="type near_vm_logic::types::Balance">Balance</a>, <br>&nbsp;&nbsp;&nbsp;&nbsp;min_near: <a class="type" href="../near_vm_logic/types/type.Balance.html" title="type near_vm_logic::types::Balance">Balance</a><br>)</code><a class='srclink' href='../src/near_clp/lib.rs.html#353-361' title='goto source code'>[src]</a></h4><div class='docblock'><p>Swaps <code>token</code> to NEAR and transfers NEAR to the caller under a condition of
receving at least <code>min_near</code>.
Preceeding to this transaction, caller has to create sufficient allowance of <code>token</code>
for this contract.
TODO: Transaction will panic if a caller doesn't provide enough allowance.</p>
</div><h4 id='method.swap_reserve_to_near_exact_in_xfr' class="method"><code>pub fn <a href='#method.swap_reserve_to_near_exact_in_xfr' class='fnname'>swap_reserve_to_near_exact_in_xfr</a>(<br>&nbsp;&nbsp;&nbsp;&nbsp;&amp;mut self, <br>&nbsp;&nbsp;&nbsp;&nbsp;token: <a class="type" href="../near_vm_logic/types/type.AccountId.html" title="type near_vm_logic::types::AccountId">AccountId</a>, <br>&nbsp;&nbsp;&nbsp;&nbsp;tokens_paid: <a class="type" href="../near_vm_logic/types/type.Balance.html" title="type near_vm_logic::types::Balance">Balance</a>, <br>&nbsp;&nbsp;&nbsp;&nbsp;min_near: <a class="type" href="../near_vm_logic/types/type.Balance.html" title="type near_vm_logic::types::Balance">Balance</a>, <br>&nbsp;&nbsp;&nbsp;&nbsp;recipient: <a class="type" href="../near_vm_logic/types/type.AccountId.html" title="type near_vm_logic::types::AccountId">AccountId</a><br>)</code><a class='srclink' href='../src/near_clp/lib.rs.html#366-375' title='goto source code'>[src]</a></h4><div class='docblock'><p>Same as <code>swap_reserve_to_near_exact_in</code>, but user additionly specifies the <code>recipient</code>
who will receive the tokens after the swap.</p>
</div><h4 id='method.swap_reserve_to_near_exact_out' class="method"><code>pub fn <a href='#method.swap_reserve_to_near_exact_out' class='fnname'>swap_reserve_to_near_exact_out</a>(<br>&nbsp;&nbsp;&nbsp;&nbsp;&amp;mut self, <br>&nbsp;&nbsp;&nbsp;&nbsp;token: <a class="type" href="../near_vm_logic/types/type.AccountId.html" title="type near_vm_logic::types::AccountId">AccountId</a>, <br>&nbsp;&nbsp;&nbsp;&nbsp;near_out: <a class="type" href="../near_vm_logic/types/type.Balance.html" title="type near_vm_logic::types::Balance">Balance</a>, <br>&nbsp;&nbsp;&nbsp;&nbsp;max_tokens: <a class="type" href="../near_vm_logic/types/type.Balance.html" title="type near_vm_logic::types::Balance">Balance</a><br>)</code><a class='srclink' href='../src/near_clp/lib.rs.html#383-391' title='goto source code'>[src]</a></h4><div class='docblock'><p>Swaps <code>token</code> to NEAR and transfers NEAR to the caller.
Caller defines the amount of NEAR he wants to receive under a condition of not spending
more than <code>max_tokens</code> of <code>token</code>.
Preceeding to this transaction, caller has to create sufficient allowance of <code>token</code>
for this contract.
TODO: Transaction will panic if a caller doesn't provide enough allowance.</p>
</div><h4 id='method.swap_reserve_to_near_exact_out_xfr' class="method"><code>pub fn <a href='#method.swap_reserve_to_near_exact_out_xfr' class='fnname'>swap_reserve_to_near_exact_out_xfr</a>(<br>&nbsp;&nbsp;&nbsp;&nbsp;&amp;mut self, <br>&nbsp;&nbsp;&nbsp;&nbsp;token: <a class="type" href="../near_vm_logic/types/type.AccountId.html" title="type near_vm_logic::types::AccountId">AccountId</a>, <br>&nbsp;&nbsp;&nbsp;&nbsp;near_out: <a class="type" href="../near_vm_logic/types/type.Balance.html" title="type near_vm_logic::types::Balance">Balance</a>, <br>&nbsp;&nbsp;&nbsp;&nbsp;max_tokens: <a class="type" href="../near_vm_logic/types/type.Balance.html" title="type near_vm_logic::types::Balance">Balance</a>, <br>&nbsp;&nbsp;&nbsp;&nbsp;recipient: <a class="type" href="../near_vm_logic/types/type.AccountId.html" title="type near_vm_logic::types::AccountId">AccountId</a><br>)</code><a class='srclink' href='../src/near_clp/lib.rs.html#395-404' title='goto source code'>[src]</a></h4><div class='docblock'><p>Same as <code>swap_reserve_to_near_exact_out</code>, but user additionly specifies the <code>recipient</code>
who will receive the tokens after the swap.</p>
</div><h4 id='method.swap_tokens_exact_in' class="method"><code>pub fn <a href='#method.swap_tokens_exact_in' class='fnname'>swap_tokens_exact_in</a>(<br>&nbsp;&nbsp;&nbsp;&nbsp;&amp;mut self, <br>&nbsp;&nbsp;&nbsp;&nbsp;from: <a class="type" href="../near_vm_logic/types/type.AccountId.html" title="type near_vm_logic::types::AccountId">AccountId</a>, <br>&nbsp;&nbsp;&nbsp;&nbsp;to: <a class="type" href="../near_vm_logic/types/type.AccountId.html" title="type near_vm_logic::types::AccountId">AccountId</a>, <br>&nbsp;&nbsp;&nbsp;&nbsp;tokens_from: <a class="type" href="../near_vm_logic/types/type.Balance.html" title="type near_vm_logic::types::Balance">Balance</a>, <br>&nbsp;&nbsp;&nbsp;&nbsp;min_tokens_to: <a class="type" href="../near_vm_logic/types/type.Balance.html" title="type near_vm_logic::types::Balance">Balance</a><br>)</code><a class='srclink' href='../src/near_clp/lib.rs.html#412-421' title='goto source code'>[src]</a></h4><div class='docblock'><p>Swaps two different tokens.
Caller defines the amount of tokens he wants to swap under a condition of
receving at least <code>min_tokens_to</code>.
Preceeding to this transaction, caller has to create sufficient allowance of
<code>token_from</code> for this contract.</p>
</div><h4 id='method.swap_tokens_exact_in_xfr' class="method"><code>pub fn <a href='#method.swap_tokens_exact_in_xfr' class='fnname'>swap_tokens_exact_in_xfr</a>(<br>&nbsp;&nbsp;&nbsp;&nbsp;&amp;mut self, <br>&nbsp;&nbsp;&nbsp;&nbsp;from: <a class="type" href="../near_vm_logic/types/type.AccountId.html" title="type near_vm_logic::types::AccountId">AccountId</a>, <br>&nbsp;&nbsp;&nbsp;&nbsp;to: <a class="type" href="../near_vm_logic/types/type.AccountId.html" title="type near_vm_logic::types::AccountId">AccountId</a>, <br>&nbsp;&nbsp;&nbsp;&nbsp;tokens_from: <a class="type" href="../near_vm_logic/types/type.Balance.html" title="type near_vm_logic::types::Balance">Balance</a>, <br>&nbsp;&nbsp;&nbsp;&nbsp;min_tokens_to: <a class="type" href="../near_vm_logic/types/type.Balance.html" title="type near_vm_logic::types::Balance">Balance</a>, <br>&nbsp;&nbsp;&nbsp;&nbsp;recipient: <a class="type" href="../near_vm_logic/types/type.AccountId.html" title="type near_vm_logic::types::AccountId">AccountId</a><br>)</code><a class='srclink' href='../src/near_clp/lib.rs.html#425-435' title='goto source code'>[src]</a></h4><div class='docblock'><p>Same as <code>swap_tokens_exact_in</code>, but user additionly specifies the <code>recipient</code>
who will receive the tokens after the swap.</p>
</div><h4 id='method.swap_tokens_exact_out' class="method"><code>pub fn <a href='#method.swap_tokens_exact_out' class='fnname'>swap_tokens_exact_out</a>(<br>&nbsp;&nbsp;&nbsp;&nbsp;&amp;mut self, <br>&nbsp;&nbsp;&nbsp;&nbsp;from: <a class="type" href="../near_vm_logic/types/type.AccountId.html" title="type near_vm_logic::types::AccountId">AccountId</a>, <br>&nbsp;&nbsp;&nbsp;&nbsp;to: <a class="type" href="../near_vm_logic/types/type.AccountId.html" title="type near_vm_logic::types::AccountId">AccountId</a>, <br>&nbsp;&nbsp;&nbsp;&nbsp;tokens_to: <a class="type" href="../near_vm_logic/types/type.Balance.html" title="type near_vm_logic::types::Balance">Balance</a>, <br>&nbsp;&nbsp;&nbsp;&nbsp;max_tokens_from: <a class="type" href="../near_vm_logic/types/type.Balance.html" title="type near_vm_logic::types::Balance">Balance</a><br>)</code><a class='srclink' href='../src/near_clp/lib.rs.html#443-452' title='goto source code'>[src]</a></h4><div class='docblock'><p>Swaps two different tokens.
Caller defines the amount of tokens he wants to receive under a of not spending
more than <code>max_tokens_from</code>.
Preceeding to this transaction, caller has to create sufficient allowance of
<code>token_from</code> for this contract.</p>
</div><h4 id='method.swap_tokens_exact_out_xfr' class="method"><code>pub fn <a href='#method.swap_tokens_exact_out_xfr' class='fnname'>swap_tokens_exact_out_xfr</a>(<br>&nbsp;&nbsp;&nbsp;&nbsp;&amp;mut self, <br>&nbsp;&nbsp;&nbsp;&nbsp;from: <a class="type" href="../near_vm_logic/types/type.AccountId.html" title="type near_vm_logic::types::AccountId">AccountId</a>, <br>&nbsp;&nbsp;&nbsp;&nbsp;to: <a class="type" href="../near_vm_logic/types/type.AccountId.html" title="type near_vm_logic::types::AccountId">AccountId</a>, <br>&nbsp;&nbsp;&nbsp;&nbsp;tokens_to: <a class="type" href="../near_vm_logic/types/type.Balance.html" title="type near_vm_logic::types::Balance">Balance</a>, <br>&nbsp;&nbsp;&nbsp;&nbsp;max_tokens_from: <a class="type" href="../near_vm_logic/types/type.Balance.html" title="type near_vm_logic::types::Balance">Balance</a>, <br>&nbsp;&nbsp;&nbsp;&nbsp;recipient: <a class="type" href="../near_vm_logic/types/type.AccountId.html" title="type near_vm_logic::types::AccountId">AccountId</a><br>)</code><a class='srclink' href='../src/near_clp/lib.rs.html#456-466' title='goto source code'>[src]</a></h4><div class='docblock'><p>Same as <code>swap_tokens_exact_out</code>, but user additionly specifies the <code>recipient</code>
who will receive the tokens after the swap.</p>
</div><h4 id='method.price_near_to_token_in' class="method"><code>pub fn <a href='#method.price_near_to_token_in' class='fnname'>price_near_to_token_in</a>(<br>&nbsp;&nbsp;&nbsp;&nbsp;&amp;self, <br>&nbsp;&nbsp;&nbsp;&nbsp;token: <a class="type" href="../near_vm_logic/types/type.AccountId.html" title="type near_vm_logic::types::AccountId">AccountId</a>, <br>&nbsp;&nbsp;&nbsp;&nbsp;near_in: <a class="type" href="../near_vm_logic/types/type.Balance.html" title="type near_vm_logic::types::Balance">Balance</a><br>) -&gt; <a class="type" href="../near_vm_logic/types/type.Balance.html" title="type near_vm_logic::types::Balance">Balance</a></code><a class='srclink' href='../src/near_clp/lib.rs.html#470-474' title='goto source code'>[src]</a></h4><div class='docblock'><p>Calculates amount of tokens user will recieve when swapping <code>near_in</code> for <code>token</code>
assets</p>
</div><h4 id='method.price_near_to_token_out' class="method"><code>pub fn <a href='#method.price_near_to_token_out' class='fnname'>price_near_to_token_out</a>(<br>&nbsp;&nbsp;&nbsp;&nbsp;&amp;self, <br>&nbsp;&nbsp;&nbsp;&nbsp;token: <a class="type" href="../near_vm_logic/types/type.AccountId.html" title="type near_vm_logic::types::AccountId">AccountId</a>, <br>&nbsp;&nbsp;&nbsp;&nbsp;tokens_out: <a class="type" href="../near_vm_logic/types/type.Balance.html" title="type near_vm_logic::types::Balance">Balance</a><br>) -&gt; <a class="type" href="../near_vm_logic/types/type.Balance.html" title="type near_vm_logic::types::Balance">Balance</a></code><a class='srclink' href='../src/near_clp/lib.rs.html#478-482' title='goto source code'>[src]</a></h4><div class='docblock'><p>Calculates amount of NEAR user will need to swap if he wants to receive
<code>tokens_out</code> of <code>tokens</code></p>
</div><h4 id='method.price_token_to_near_in' class="method"><code>pub fn <a href='#method.price_token_to_near_in' class='fnname'>price_token_to_near_in</a>(<br>&nbsp;&nbsp;&nbsp;&nbsp;&amp;self, <br>&nbsp;&nbsp;&nbsp;&nbsp;token: <a class="type" href="../near_vm_logic/types/type.AccountId.html" title="type near_vm_logic::types::AccountId">AccountId</a>, <br>&nbsp;&nbsp;&nbsp;&nbsp;tokens_in: <a class="type" href="../near_vm_logic/types/type.Balance.html" title="type near_vm_logic::types::Balance">Balance</a><br>) -&gt; <a class="type" href="../near_vm_logic/types/type.Balance.html" title="type near_vm_logic::types::Balance">Balance</a></code><a class='srclink' href='../src/near_clp/lib.rs.html#485-489' title='goto source code'>[src]</a></h4><div class='docblock'><p>Calculates amount of NEAR user will recieve when swapping <code>tokens_in</code> for NEAR.</p>
</div><h4 id='method.price_token_to_near_out' class="method"><code>pub fn <a href='#method.price_token_to_near_out' class='fnname'>price_token_to_near_out</a>(<br>&nbsp;&nbsp;&nbsp;&nbsp;&amp;self, <br>&nbsp;&nbsp;&nbsp;&nbsp;token: <a class="type" href="../near_vm_logic/types/type.AccountId.html" title="type near_vm_logic::types::AccountId">AccountId</a>, <br>&nbsp;&nbsp;&nbsp;&nbsp;near_out: <a class="type" href="../near_vm_logic/types/type.Balance.html" title="type near_vm_logic::types::Balance">Balance</a><br>) -&gt; <a class="type" href="../near_vm_logic/types/type.Balance.html" title="type near_vm_logic::types::Balance">Balance</a></code><a class='srclink' href='../src/near_clp/lib.rs.html#493-497' title='goto source code'>[src]</a></h4><div class='docblock'><p>Calculates amount of tokens user will need to swap if he wants to receive
<code>tokens_out</code> of <code>tokens</code></p>
</div><h4 id='method.price_token_to_token_in' class="method"><code>pub fn <a href='#method.price_token_to_token_in' class='fnname'>price_token_to_token_in</a>(<br>&nbsp;&nbsp;&nbsp;&nbsp;&amp;self, <br>&nbsp;&nbsp;&nbsp;&nbsp;from: <a class="type" href="../near_vm_logic/types/type.AccountId.html" title="type near_vm_logic::types::AccountId">AccountId</a>, <br>&nbsp;&nbsp;&nbsp;&nbsp;to: <a class="type" href="../near_vm_logic/types/type.AccountId.html" title="type near_vm_logic::types::AccountId">AccountId</a>, <br>&nbsp;&nbsp;&nbsp;&nbsp;tokens_in: <a class="type" href="../near_vm_logic/types/type.Balance.html" title="type near_vm_logic::types::Balance">Balance</a><br>) -&gt; <a class="type" href="../near_vm_logic/types/type.Balance.html" title="type near_vm_logic::types::Balance">Balance</a></code><a class='srclink' href='../src/near_clp/lib.rs.html#500-511' title='goto source code'>[src]</a></h4><div class='docblock'><p>Calculates amount of tokens <code>to</code> user will receive when swapping <code>tokens_in</code> of <code>from</code></p>
</div><h4 id='method.price_token_to_token_out' class="method"><code>pub fn <a href='#method.price_token_to_token_out' class='fnname'>price_token_to_token_out</a>(<br>&nbsp;&nbsp;&nbsp;&nbsp;&amp;self, <br>&nbsp;&nbsp;&nbsp;&nbsp;from: <a class="type" href="../near_vm_logic/types/type.AccountId.html" title="type near_vm_logic::types::AccountId">AccountId</a>, <br>&nbsp;&nbsp;&nbsp;&nbsp;to: <a class="type" href="../near_vm_logic/types/type.AccountId.html" title="type near_vm_logic::types::AccountId">AccountId</a>, <br>&nbsp;&nbsp;&nbsp;&nbsp;tokens_out: <a class="type" href="../near_vm_logic/types/type.Balance.html" title="type near_vm_logic::types::Balance">Balance</a><br>) -&gt; <a class="type" href="../near_vm_logic/types/type.Balance.html" title="type near_vm_logic::types::Balance">Balance</a></code><a class='srclink' href='../src/near_clp/lib.rs.html#515-526' title='goto source code'>[src]</a></h4><div class='docblock'><p>Calculates amount of tokens <code>from</code> user will need to swap if he wants to receive
<code>tokens_out</code> of tokens <code>to</code></p>
</div></div><h3 id='impl-1' class='impl'><code class='in-band'>impl <a class="struct" href="../near_clp/struct.NearCLP.html" title="struct near_clp::NearCLP">NearCLP</a></code><a href='#impl-1' class='anchor'></a><a class='srclink' href='../src/near_clp/lib.rs.html#529-876' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='method.nep21_transfer_callback' class="method"><code>pub fn <a href='#method.nep21_transfer_callback' class='fnname'>nep21_transfer_callback</a>(&amp;mut self)</code><a class='srclink' href='../src/near_clp/lib.rs.html#619-648' title='goto source code'>[src]</a></h4></div><h2 id='trait-implementations' class='small-section-header'>Trait Implementations<a href='#trait-implementations' class='anchor'></a></h2><div id='trait-implementations-list'><h3 id='impl-BorshDeserialize' class='impl'><code class='in-band'>impl <a class="trait" href="../borsh/de/trait.BorshDeserialize.html" title="trait borsh::de::BorshDeserialize">BorshDeserialize</a> for <a class="struct" href="../near_clp/struct.NearCLP.html" title="struct near_clp::NearCLP">NearCLP</a> <span class="where fmt-newline">where<br>&nbsp;&nbsp;&nbsp;&nbsp;<a class="type" href="../near_vm_logic/types/type.AccountId.html" title="type near_vm_logic::types::AccountId">AccountId</a>: <a class="trait" href="../borsh/de/trait.BorshDeserialize.html" title="trait borsh::de::BorshDeserialize">BorshDeserialize</a>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<a class="type" href="../near_vm_logic/types/type.AccountId.html" title="type near_vm_logic::types::AccountId">AccountId</a>: <a class="trait" href="../borsh/de/trait.BorshDeserialize.html" title="trait borsh::de::BorshDeserialize">BorshDeserialize</a>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<a class="struct" href="../near_sdk/collections/unordered_map/struct.UnorderedMap.html" title="struct near_sdk::collections::unordered_map::UnorderedMap">UnorderedMap</a>&lt;<a class="type" href="../near_vm_logic/types/type.AccountId.html" title="type near_vm_logic::types::AccountId">AccountId</a>, <a class="struct" href="../near_clp/struct.Pool.html" title="struct near_clp::Pool">Pool</a>&gt;: <a class="trait" href="../borsh/de/trait.BorshDeserialize.html" title="trait borsh::de::BorshDeserialize">BorshDeserialize</a>,&nbsp;</span></code><a href='#impl-BorshDeserialize' class='anchor'></a><a class='srclink' href='../src/near_clp/lib.rs.html#100' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='method.deserialize' class="method hidden"><code>fn <a href='../borsh/de/trait.BorshDeserialize.html#tymethod.deserialize' class='fnname'>deserialize</a>(buf: &amp;mut <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.slice.html">&amp;[</a><a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u8.html">u8</a><a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.slice.html">]</a>) -&gt; <a class="enum" href="https://doc.rust-lang.org/nightly/core/result/enum.Result.html" title="enum core::result::Result">Result</a>&lt;Self, <a class="struct" href="https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html" title="struct std::io::error::Error">Error</a>&gt;</code><a class='srclink' href='../src/near_clp/lib.rs.html#100' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Deserializes this instance from a given slice of bytes. Updates the buffer to point at the remaining bytes. <a href="../borsh/de/trait.BorshDeserialize.html#tymethod.deserialize">Read more</a></p>
</div><h4 id='method.try_from_slice' class="method hidden"><code>fn <a href='../borsh/de/trait.BorshDeserialize.html#method.try_from_slice' class='fnname'>try_from_slice</a>(v: <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.slice.html">&amp;[</a><a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u8.html">u8</a><a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.slice.html">]</a>) -&gt; <a class="enum" href="https://doc.rust-lang.org/nightly/core/result/enum.Result.html" title="enum core::result::Result">Result</a>&lt;Self, <a class="struct" href="https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html" title="struct std::io::error::Error">Error</a>&gt;</code><a class='srclink' href='../src/borsh/de/mod.rs.html#19-29' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Deserialize this instance from a slice of bytes.</p>
</div><h4 id='method.is_u8' class="method hidden"><code>fn <a href='../borsh/de/trait.BorshDeserialize.html#method.is_u8' class='fnname'>is_u8</a>() -&gt; <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.bool.html">bool</a></code><a class='srclink' href='../src/borsh/de/mod.rs.html#37-39' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Whether Self is u8. NOTE: <code>Vec&lt;u8&gt;</code> is the most common use-case for serialization and deserialization, it's worth handling it as a special case to improve performance. It's a workaround for specific <code>Vec&lt;u8&gt;</code> implementation versus generic <code>Vec&lt;T&gt;</code> implementation. See https://github.com/rust-lang/rfcs/pull/1210 for details. <a href="../borsh/de/trait.BorshDeserialize.html#method.is_u8">Read more</a></p>
</div></div><h3 id='impl-BorshSerialize' class='impl'><code class='in-band'>impl <a class="trait" href="../borsh/ser/trait.BorshSerialize.html" title="trait borsh::ser::BorshSerialize">BorshSerialize</a> for <a class="struct" href="../near_clp/struct.NearCLP.html" title="struct near_clp::NearCLP">NearCLP</a> <span class="where fmt-newline">where<br>&nbsp;&nbsp;&nbsp;&nbsp;<a class="type" href="../near_vm_logic/types/type.AccountId.html" title="type near_vm_logic::types::AccountId">AccountId</a>: <a class="trait" href="../borsh/ser/trait.BorshSerialize.html" title="trait borsh::ser::BorshSerialize">BorshSerialize</a>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<a class="type" href="../near_vm_logic/types/type.AccountId.html" title="type near_vm_logic::types::AccountId">AccountId</a>: <a class="trait" href="../borsh/ser/trait.BorshSerialize.html" title="trait borsh::ser::BorshSerialize">BorshSerialize</a>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<a class="struct" href="../near_sdk/collections/unordered_map/struct.UnorderedMap.html" title="struct near_sdk::collections::unordered_map::UnorderedMap">UnorderedMap</a>&lt;<a class="type" href="../near_vm_logic/types/type.AccountId.html" title="type near_vm_logic::types::AccountId">AccountId</a>, <a class="struct" href="../near_clp/struct.Pool.html" title="struct near_clp::Pool">Pool</a>&gt;: <a class="trait" href="../borsh/ser/trait.BorshSerialize.html" title="trait borsh::ser::BorshSerialize">BorshSerialize</a>,&nbsp;</span></code><a href='#impl-BorshSerialize' class='anchor'></a><a class='srclink' href='../src/near_clp/lib.rs.html#100' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='method.serialize' class="method hidden"><code>fn <a href='../borsh/ser/trait.BorshSerialize.html#tymethod.serialize' class='fnname'>serialize</a>&lt;W:&nbsp;<a class="trait" href="https://doc.rust-lang.org/nightly/std/io/trait.Write.html" title="trait std::io::Write">Write</a>&gt;(&amp;self, writer: <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.reference.html">&amp;mut </a>W) -&gt; <a class="enum" href="https://doc.rust-lang.org/nightly/core/result/enum.Result.html" title="enum core::result::Result">Result</a>&lt;<a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.unit.html">()</a>, <a class="struct" href="https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html" title="struct std::io::error::Error">Error</a>&gt;</code><a class='srclink' href='../src/near_clp/lib.rs.html#100' title='goto source code'>[src]</a></h4><h4 id='method.try_to_vec' class="method hidden"><code>fn <a href='../borsh/ser/trait.BorshSerialize.html#method.try_to_vec' class='fnname'>try_to_vec</a>(&amp;self) -&gt; <a class="enum" href="https://doc.rust-lang.org/nightly/core/result/enum.Result.html" title="enum core::result::Result">Result</a>&lt;<a class="struct" href="https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html" title="struct alloc::vec::Vec">Vec</a>&lt;<a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u8.html">u8</a>&gt;, <a class="struct" href="https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html" title="struct std::io::error::Error">Error</a>&gt;</code><a class='srclink' href='../src/borsh/ser/mod.rs.html#14-18' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Serialize this instance into a vector of bytes.</p>
</div><h4 id='method.is_u8-1' class="method hidden"><code>fn <a href='../borsh/ser/trait.BorshSerialize.html#method.is_u8' class='fnname'>is_u8</a>() -&gt; <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.bool.html">bool</a></code><a class='srclink' href='../src/borsh/ser/mod.rs.html#26-28' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Whether Self is u8. NOTE: <code>Vec&lt;u8&gt;</code> is the most common use-case for serialization and deserialization, it's worth handling it as a special case to improve performance. It's a workaround for specific <code>Vec&lt;u8&gt;</code> implementation versus generic <code>Vec&lt;T&gt;</code> implementation. See https://github.com/rust-lang/rfcs/pull/1210 for details. <a href="../borsh/ser/trait.BorshSerialize.html#method.is_u8">Read more</a></p>
</div></div><h3 id='impl-Default' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/core/default/trait.Default.html" title="trait core::default::Default">Default</a> for <a class="struct" href="../near_clp/struct.NearCLP.html" title="struct near_clp::NearCLP">NearCLP</a></code><a href='#impl-Default' class='anchor'></a><a class='srclink' href='../src/near_clp/lib.rs.html#108-112' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='method.default' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default' class='fnname'>default</a>() -&gt; Self</code><a class='srclink' href='../src/near_clp/lib.rs.html#109-111' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Returns the &quot;default value&quot; for a type. <a href="https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default">Read more</a></p>
</div></div></div><h2 id='synthetic-implementations' class='small-section-header'>Auto Trait Implementations<a href='#synthetic-implementations' class='anchor'></a></h2><div id='synthetic-implementations-list'><h3 id='impl-RefUnwindSafe' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/std/panic/trait.RefUnwindSafe.html" title="trait std::panic::RefUnwindSafe">RefUnwindSafe</a> for <a class="struct" href="../near_clp/struct.NearCLP.html" title="struct near_clp::NearCLP">NearCLP</a></code><a href='#impl-RefUnwindSafe' class='anchor'></a></h3><div class='impl-items'></div><h3 id='impl-Send' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/core/marker/trait.Send.html" title="trait core::marker::Send">Send</a> for <a class="struct" href="../near_clp/struct.NearCLP.html" title="struct near_clp::NearCLP">NearCLP</a></code><a href='#impl-Send' class='anchor'></a></h3><div class='impl-items'></div><h3 id='impl-Sync' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html" title="trait core::marker::Sync">Sync</a> for <a class="struct" href="../near_clp/struct.NearCLP.html" title="struct near_clp::NearCLP">NearCLP</a></code><a href='#impl-Sync' class='anchor'></a></h3><div class='impl-items'></div><h3 id='impl-Unpin' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/core/marker/trait.Unpin.html" title="trait core::marker::Unpin">Unpin</a> for <a class="struct" href="../near_clp/struct.NearCLP.html" title="struct near_clp::NearCLP">NearCLP</a></code><a href='#impl-Unpin' class='anchor'></a></h3><div class='impl-items'></div><h3 id='impl-UnwindSafe' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/std/panic/trait.UnwindSafe.html" title="trait std::panic::UnwindSafe">UnwindSafe</a> for <a class="struct" href="../near_clp/struct.NearCLP.html" title="struct near_clp::NearCLP">NearCLP</a></code><a href='#impl-UnwindSafe' class='anchor'></a></h3><div class='impl-items'></div></div><h2 id='blanket-implementations' class='small-section-header'>Blanket Implementations<a href='#blanket-implementations' class='anchor'></a></h2><div id='blanket-implementations-list'><h3 id='impl-Any' class='impl'><code class='in-band'>impl&lt;T&gt; <a class="trait" href="https://doc.rust-lang.org/nightly/core/any/trait.Any.html" title="trait core::any::Any">Any</a> for T <span class="where fmt-newline">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: 'static + ?<a class="trait" href="https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html" title="trait core::marker::Sized">Sized</a>,&nbsp;</span></code><a href='#impl-Any' class='anchor'></a><a class='srclink' href='https://doc.rust-lang.org/nightly/src/core/any.rs.html#108-112' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='method.type_id' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/any/trait.Any.html#tymethod.type_id' class='fnname'>type_id</a>(&amp;self) -&gt; <a class="struct" href="https://doc.rust-lang.org/nightly/core/any/struct.TypeId.html" title="struct core::any::TypeId">TypeId</a></code><a class='srclink' href='https://doc.rust-lang.org/nightly/src/core/any.rs.html#109-111' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Gets the <code>TypeId</code> of <code>self</code>. <a href="https://doc.rust-lang.org/nightly/core/any/trait.Any.html#tymethod.type_id">Read more</a></p>
</div></div><h3 id='impl-Borrow%3CT%3E' class='impl'><code class='in-band'>impl&lt;T&gt; <a class="trait" href="https://doc.rust-lang.org/nightly/core/borrow/trait.Borrow.html" title="trait core::borrow::Borrow">Borrow</a>&lt;T&gt; for T <span class="where fmt-newline">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: ?<a class="trait" href="https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html" title="trait core::marker::Sized">Sized</a>,&nbsp;</span></code><a href='#impl-Borrow%3CT%3E' class='anchor'></a><a class='srclink' href='https://doc.rust-lang.org/nightly/src/core/borrow.rs.html#213-217' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='method.borrow' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/borrow/trait.Borrow.html#tymethod.borrow' class='fnname'>borrow</a>(&amp;self) -&gt; <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.reference.html">&amp;</a>T</code><a class='srclink' href='https://doc.rust-lang.org/nightly/src/core/borrow.rs.html#214-216' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Immutably borrows from an owned value. <a href="https://doc.rust-lang.org/nightly/core/borrow/trait.Borrow.html#tymethod.borrow">Read more</a></p>
</div></div><h3 id='impl-BorrowMut%3CT%3E' class='impl'><code class='in-band'>impl&lt;T&gt; <a class="trait" href="https://doc.rust-lang.org/nightly/core/borrow/trait.BorrowMut.html" title="trait core::borrow::BorrowMut">BorrowMut</a>&lt;T&gt; for T <span class="where fmt-newline">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: ?<a class="trait" href="https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html" title="trait core::marker::Sized">Sized</a>,&nbsp;</span></code><a href='#impl-BorrowMut%3CT%3E' class='anchor'></a><a class='srclink' href='https://doc.rust-lang.org/nightly/src/core/borrow.rs.html#220-224' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='method.borrow_mut' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut' class='fnname'>borrow_mut</a>(&amp;mut self) -&gt; <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.reference.html">&amp;mut </a>T</code><a class='srclink' href='https://doc.rust-lang.org/nightly/src/core/borrow.rs.html#221-223' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Mutably borrows from an owned value. <a href="https://doc.rust-lang.org/nightly/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut">Read more</a></p>
</div></div><h3 id='impl-From%3CT%3E' class='impl'><code class='in-band'>impl&lt;T&gt; <a class="trait" href="https://doc.rust-lang.org/nightly/core/convert/trait.From.html" title="trait core::convert::From">From</a>&lt;T&gt; for T</code><a href='#impl-From%3CT%3E' class='anchor'></a><a class='srclink' href='https://doc.rust-lang.org/nightly/src/core/convert/mod.rs.html#566-570' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='method.from' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from' class='fnname'>from</a>(t: T) -&gt; T</code><a class='srclink' href='https://doc.rust-lang.org/nightly/src/core/convert/mod.rs.html#567-569' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the conversion.</p>
</div></div><h3 id='impl-Into%3CU%3E' class='impl'><code class='in-band'>impl&lt;T, U&gt; <a class="trait" href="https://doc.rust-lang.org/nightly/core/convert/trait.Into.html" title="trait core::convert::Into">Into</a>&lt;U&gt; for T <span class="where fmt-newline">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: <a class="trait" href="https://doc.rust-lang.org/nightly/core/convert/trait.From.html" title="trait core::convert::From">From</a>&lt;T&gt;,&nbsp;</span></code><a href='#impl-Into%3CU%3E' class='anchor'></a><a class='srclink' href='https://doc.rust-lang.org/nightly/src/core/convert/mod.rs.html#555-562' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='method.into' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/convert/trait.Into.html#tymethod.into' class='fnname'>into</a>(self) -&gt; U</code><a class='srclink' href='https://doc.rust-lang.org/nightly/src/core/convert/mod.rs.html#559-561' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the conversion.</p>
</div></div><h3 id='impl-Same%3CT%3E' class='impl'><code class='in-band'>impl&lt;T&gt; <a class="trait" href="../typenum/type_operators/trait.Same.html" title="trait typenum::type_operators::Same">Same</a>&lt;T&gt; for T</code><a href='#impl-Same%3CT%3E' class='anchor'></a><a class='srclink' href='../src/typenum/type_operators.rs.html#33-35' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='associatedtype.Output' class="type"><code>type <a href='../typenum/type_operators/trait.Same.html#associatedtype.Output' class="type">Output</a> = T</code></h4><div class='docblock'><p>Should always be <code>Self</code></p>
</div></div><h3 id='impl-TryFrom%3CU%3E' class='impl'><code class='in-band'>impl&lt;T, U&gt; <a class="trait" href="https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html" title="trait core::convert::TryFrom">TryFrom</a>&lt;U&gt; for T <span class="where fmt-newline">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: <a class="trait" href="https://doc.rust-lang.org/nightly/core/convert/trait.Into.html" title="trait core::convert::Into">Into</a>&lt;T&gt;,&nbsp;</span></code><a href='#impl-TryFrom%3CU%3E' class='anchor'></a><a class='srclink' href='https://doc.rust-lang.org/nightly/src/core/convert/mod.rs.html#603-612' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='associatedtype.Error' class="type"><code>type <a href='https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html#associatedtype.Error' class="type">Error</a> = <a class="enum" href="https://doc.rust-lang.org/nightly/core/convert/enum.Infallible.html" title="enum core::convert::Infallible">Infallible</a></code></h4><div class='docblock'><p>The type returned in the event of a conversion error.</p>
</div><h4 id='method.try_from' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html#tymethod.try_from' class='fnname'>try_from</a>(value: U) -&gt; <a class="enum" href="https://doc.rust-lang.org/nightly/core/result/enum.Result.html" title="enum core::result::Result">Result</a>&lt;T, &lt;T as <a class="trait" href="https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html" title="trait core::convert::TryFrom">TryFrom</a>&lt;U&gt;&gt;::<a class="type" href="https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html#associatedtype.Error" title="type core::convert::TryFrom::Error">Error</a>&gt;</code><a class='srclink' href='https://doc.rust-lang.org/nightly/src/core/convert/mod.rs.html#609-611' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the conversion.</p>
</div></div><h3 id='impl-TryInto%3CU%3E' class='impl'><code class='in-band'>impl&lt;T, U&gt; <a class="trait" href="https://doc.rust-lang.org/nightly/core/convert/trait.TryInto.html" title="trait core::convert::TryInto">TryInto</a>&lt;U&gt; for T <span class="where fmt-newline">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: <a class="trait" href="https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html" title="trait core::convert::TryFrom">TryFrom</a>&lt;T&gt;,&nbsp;</span></code><a href='#impl-TryInto%3CU%3E' class='anchor'></a><a class='srclink' href='https://doc.rust-lang.org/nightly/src/core/convert/mod.rs.html#589-598' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='associatedtype.Error-1' class="type"><code>type <a href='https://doc.rust-lang.org/nightly/core/convert/trait.TryInto.html#associatedtype.Error' class="type">Error</a> = &lt;U as <a class="trait" href="https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html" title="trait core::convert::TryFrom">TryFrom</a>&lt;T&gt;&gt;::<a class="type" href="https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html#associatedtype.Error" title="type core::convert::TryFrom::Error">Error</a></code></h4><div class='docblock'><p>The type returned in the event of a conversion error.</p>
</div><h4 id='method.try_into' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/convert/trait.TryInto.html#tymethod.try_into' class='fnname'>try_into</a>(self) -&gt; <a class="enum" href="https://doc.rust-lang.org/nightly/core/result/enum.Result.html" title="enum core::result::Result">Result</a>&lt;U, &lt;U as <a class="trait" href="https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html" title="trait core::convert::TryFrom">TryFrom</a>&lt;T&gt;&gt;::<a class="type" href="https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html#associatedtype.Error" title="type core::convert::TryFrom::Error">Error</a>&gt;</code><a class='srclink' href='https://doc.rust-lang.org/nightly/src/core/convert/mod.rs.html#595-597' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the conversion.</p>
</div></div></div></section><section id="search" class="content hidden"></section><section class="footer"></section><script>window.rootPath = "../";window.currentCrate = "near_clp";</script><script src="../main.js"></script><script defer src="../search-index.js"></script></body></html>
'''
'''--- contract/target/doc/near_clp/struct.Pool.html ---
<!DOCTYPE html><html lang="en"><head><meta charset="utf-8"><meta name="viewport" content="width=device-width, initial-scale=1.0"><meta name="generator" content="rustdoc"><meta name="description" content="API documentation for the Rust `Pool` struct in crate `near_clp`."><meta name="keywords" content="rust, rustlang, rust-lang, Pool"><title>near_clp::Pool - Rust</title><link rel="stylesheet" type="text/css" href="../normalize.css"><link rel="stylesheet" type="text/css" href="../rustdoc.css" id="mainThemeStyle"><link rel="stylesheet" type="text/css" href="../dark.css"><link rel="stylesheet" type="text/css" href="../light.css" id="themeStyle"><script src="../storage.js"></script><noscript><link rel="stylesheet" href="../noscript.css"></noscript><link rel="shortcut icon" href="../favicon.ico"><style type="text/css">#crate-search{background-image:url("../down-arrow.svg");}</style></head><body class="rustdoc struct"><!--[if lte IE 8]><div class="warning">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class="sidebar"><div class="sidebar-menu">&#9776;</div><a href='../near_clp/index.html'><div class='logo-container'><img src='../rust-logo.png' alt='logo'></div></a><p class='location'>Struct Pool</p><div class="sidebar-elems"><div class="block items"><a class="sidebar-title" href="#implementations">Methods</a><div class="sidebar-links"><a href="#method.new">new</a><a href="#method.pool_info">pool_info</a></div><a class="sidebar-title" href="#trait-implementations">Trait Implementations</a><div class="sidebar-links"><a href="#impl-BorshDeserialize">BorshDeserialize</a><a href="#impl-BorshSerialize">BorshSerialize</a></div><a class="sidebar-title" href="#synthetic-implementations">Auto Trait Implementations</a><div class="sidebar-links"><a href="#impl-RefUnwindSafe">RefUnwindSafe</a><a href="#impl-Send">Send</a><a href="#impl-Sync">Sync</a><a href="#impl-Unpin">Unpin</a><a href="#impl-UnwindSafe">UnwindSafe</a></div><a class="sidebar-title" href="#blanket-implementations">Blanket Implementations</a><div class="sidebar-links"><a href="#impl-Any">Any</a><a href="#impl-Borrow%3CT%3E">Borrow&lt;T&gt;</a><a href="#impl-BorrowMut%3CT%3E">BorrowMut&lt;T&gt;</a><a href="#impl-From%3CT%3E">From&lt;T&gt;</a><a href="#impl-Into%3CU%3E">Into&lt;U&gt;</a><a href="#impl-Same%3CT%3E">Same&lt;T&gt;</a><a href="#impl-TryFrom%3CU%3E">TryFrom&lt;U&gt;</a><a href="#impl-TryInto%3CU%3E">TryInto&lt;U&gt;</a></div></div><p class='location'><a href='index.html'>near_clp</a></p><script>window.sidebarCurrent = {name: 'Pool', ty: 'struct', relpath: ''};</script><script defer src="sidebar-items.js"></script></div></nav><div class="theme-picker"><button id="theme-picker" aria-label="Pick another theme!"><img src="../brush.svg" width="18" alt="Pick another theme!"></button><div id="theme-choices"></div></div><script src="../theme.js"></script><nav class="sub"><form class="search-form"><div class="search-container"><div><select id="crate-search"><option value="All crates">All crates</option></select><input class="search-input" name="search" disabled autocomplete="off" spellcheck="false" placeholder="Click or press ‘S’ to search, ‘?’ for more options…" type="search"></div><a id="settings-menu" href="../settings.html"><img src="../wheel.svg" width="18" alt="Change settings"></a></div></form></nav><section id="main" class="content"><h1 class='fqn'><span class='out-of-band'><span id='render-detail'><a id="toggle-all-docs" href="javascript:void(0)" title="collapse all docs">[<span class='inner'>&#x2212;</span>]</a></span><a class='srclink' href='../src/near_clp/lib.rs.html#70-76' title='goto source code'>[src]</a></span><span class='in-band'>Struct <a href='index.html'>near_clp</a>::<wbr><a class="struct" href=''>Pool</a></span></h1><div class="docblock type-decl hidden-by-usual-hider"><pre class='rust struct'>pub struct Pool { /* fields omitted */ }</pre></div><h2 id='implementations' class='small-section-header'>Implementations<a href='#implementations' class='anchor'></a></h2><h3 id='impl' class='impl'><code class='in-band'>impl <a class="struct" href="../near_clp/struct.Pool.html" title="struct near_clp::Pool">Pool</a></code><a href='#impl' class='anchor'></a><a class='srclink' href='../src/near_clp/lib.rs.html#78-95' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='method.new' class="method"><code>pub fn <a href='#method.new' class='fnname'>new</a>(pool_id: <a class="struct" href="https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html" title="struct alloc::vec::Vec">Vec</a>&lt;<a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u8.html">u8</a>&gt;) -&gt; Self</code><a class='srclink' href='../src/near_clp/lib.rs.html#79-86' title='goto source code'>[src]</a></h4><h4 id='method.pool_info' class="method"><code>pub fn <a href='#method.pool_info' class='fnname'>pool_info</a>(&amp;self) -&gt; <a class="struct" href="../near_clp/struct.PoolInfo.html" title="struct near_clp::PoolInfo">PoolInfo</a></code><a class='srclink' href='../src/near_clp/lib.rs.html#88-94' title='goto source code'>[src]</a></h4></div><h2 id='trait-implementations' class='small-section-header'>Trait Implementations<a href='#trait-implementations' class='anchor'></a></h2><div id='trait-implementations-list'><h3 id='impl-BorshDeserialize' class='impl'><code class='in-band'>impl <a class="trait" href="../borsh/de/trait.BorshDeserialize.html" title="trait borsh::de::BorshDeserialize">BorshDeserialize</a> for <a class="struct" href="../near_clp/struct.Pool.html" title="struct near_clp::Pool">Pool</a> <span class="where fmt-newline">where<br>&nbsp;&nbsp;&nbsp;&nbsp;<a class="type" href="../near_vm_logic/types/type.Balance.html" title="type near_vm_logic::types::Balance">Balance</a>: <a class="trait" href="../borsh/de/trait.BorshDeserialize.html" title="trait borsh::de::BorshDeserialize">BorshDeserialize</a>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<a class="type" href="../near_vm_logic/types/type.Balance.html" title="type near_vm_logic::types::Balance">Balance</a>: <a class="trait" href="../borsh/de/trait.BorshDeserialize.html" title="trait borsh::de::BorshDeserialize">BorshDeserialize</a>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<a class="struct" href="../near_sdk/collections/unordered_map/struct.UnorderedMap.html" title="struct near_sdk::collections::unordered_map::UnorderedMap">UnorderedMap</a>&lt;<a class="type" href="../near_vm_logic/types/type.AccountId.html" title="type near_vm_logic::types::AccountId">AccountId</a>, <a class="type" href="../near_vm_logic/types/type.Balance.html" title="type near_vm_logic::types::Balance">Balance</a>&gt;: <a class="trait" href="../borsh/de/trait.BorshDeserialize.html" title="trait borsh::de::BorshDeserialize">BorshDeserialize</a>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<a class="type" href="../near_vm_logic/types/type.Balance.html" title="type near_vm_logic::types::Balance">Balance</a>: <a class="trait" href="../borsh/de/trait.BorshDeserialize.html" title="trait borsh::de::BorshDeserialize">BorshDeserialize</a>,&nbsp;</span></code><a href='#impl-BorshDeserialize' class='anchor'></a><a class='srclink' href='../src/near_clp/lib.rs.html#69' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='method.deserialize' class="method hidden"><code>fn <a href='../borsh/de/trait.BorshDeserialize.html#tymethod.deserialize' class='fnname'>deserialize</a>(buf: &amp;mut <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.slice.html">&amp;[</a><a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u8.html">u8</a><a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.slice.html">]</a>) -&gt; <a class="enum" href="https://doc.rust-lang.org/nightly/core/result/enum.Result.html" title="enum core::result::Result">Result</a>&lt;Self, <a class="struct" href="https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html" title="struct std::io::error::Error">Error</a>&gt;</code><a class='srclink' href='../src/near_clp/lib.rs.html#69' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Deserializes this instance from a given slice of bytes. Updates the buffer to point at the remaining bytes. <a href="../borsh/de/trait.BorshDeserialize.html#tymethod.deserialize">Read more</a></p>
</div><h4 id='method.try_from_slice' class="method hidden"><code>fn <a href='../borsh/de/trait.BorshDeserialize.html#method.try_from_slice' class='fnname'>try_from_slice</a>(v: <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.slice.html">&amp;[</a><a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u8.html">u8</a><a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.slice.html">]</a>) -&gt; <a class="enum" href="https://doc.rust-lang.org/nightly/core/result/enum.Result.html" title="enum core::result::Result">Result</a>&lt;Self, <a class="struct" href="https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html" title="struct std::io::error::Error">Error</a>&gt;</code><a class='srclink' href='../src/borsh/de/mod.rs.html#19-29' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Deserialize this instance from a slice of bytes.</p>
</div><h4 id='method.is_u8' class="method hidden"><code>fn <a href='../borsh/de/trait.BorshDeserialize.html#method.is_u8' class='fnname'>is_u8</a>() -&gt; <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.bool.html">bool</a></code><a class='srclink' href='../src/borsh/de/mod.rs.html#37-39' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Whether Self is u8. NOTE: <code>Vec&lt;u8&gt;</code> is the most common use-case for serialization and deserialization, it's worth handling it as a special case to improve performance. It's a workaround for specific <code>Vec&lt;u8&gt;</code> implementation versus generic <code>Vec&lt;T&gt;</code> implementation. See https://github.com/rust-lang/rfcs/pull/1210 for details. <a href="../borsh/de/trait.BorshDeserialize.html#method.is_u8">Read more</a></p>
</div></div><h3 id='impl-BorshSerialize' class='impl'><code class='in-band'>impl <a class="trait" href="../borsh/ser/trait.BorshSerialize.html" title="trait borsh::ser::BorshSerialize">BorshSerialize</a> for <a class="struct" href="../near_clp/struct.Pool.html" title="struct near_clp::Pool">Pool</a> <span class="where fmt-newline">where<br>&nbsp;&nbsp;&nbsp;&nbsp;<a class="type" href="../near_vm_logic/types/type.Balance.html" title="type near_vm_logic::types::Balance">Balance</a>: <a class="trait" href="../borsh/ser/trait.BorshSerialize.html" title="trait borsh::ser::BorshSerialize">BorshSerialize</a>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<a class="type" href="../near_vm_logic/types/type.Balance.html" title="type near_vm_logic::types::Balance">Balance</a>: <a class="trait" href="../borsh/ser/trait.BorshSerialize.html" title="trait borsh::ser::BorshSerialize">BorshSerialize</a>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<a class="struct" href="../near_sdk/collections/unordered_map/struct.UnorderedMap.html" title="struct near_sdk::collections::unordered_map::UnorderedMap">UnorderedMap</a>&lt;<a class="type" href="../near_vm_logic/types/type.AccountId.html" title="type near_vm_logic::types::AccountId">AccountId</a>, <a class="type" href="../near_vm_logic/types/type.Balance.html" title="type near_vm_logic::types::Balance">Balance</a>&gt;: <a class="trait" href="../borsh/ser/trait.BorshSerialize.html" title="trait borsh::ser::BorshSerialize">BorshSerialize</a>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<a class="type" href="../near_vm_logic/types/type.Balance.html" title="type near_vm_logic::types::Balance">Balance</a>: <a class="trait" href="../borsh/ser/trait.BorshSerialize.html" title="trait borsh::ser::BorshSerialize">BorshSerialize</a>,&nbsp;</span></code><a href='#impl-BorshSerialize' class='anchor'></a><a class='srclink' href='../src/near_clp/lib.rs.html#69' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='method.serialize' class="method hidden"><code>fn <a href='../borsh/ser/trait.BorshSerialize.html#tymethod.serialize' class='fnname'>serialize</a>&lt;W:&nbsp;<a class="trait" href="https://doc.rust-lang.org/nightly/std/io/trait.Write.html" title="trait std::io::Write">Write</a>&gt;(&amp;self, writer: <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.reference.html">&amp;mut </a>W) -&gt; <a class="enum" href="https://doc.rust-lang.org/nightly/core/result/enum.Result.html" title="enum core::result::Result">Result</a>&lt;<a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.unit.html">()</a>, <a class="struct" href="https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html" title="struct std::io::error::Error">Error</a>&gt;</code><a class='srclink' href='../src/near_clp/lib.rs.html#69' title='goto source code'>[src]</a></h4><h4 id='method.try_to_vec' class="method hidden"><code>fn <a href='../borsh/ser/trait.BorshSerialize.html#method.try_to_vec' class='fnname'>try_to_vec</a>(&amp;self) -&gt; <a class="enum" href="https://doc.rust-lang.org/nightly/core/result/enum.Result.html" title="enum core::result::Result">Result</a>&lt;<a class="struct" href="https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html" title="struct alloc::vec::Vec">Vec</a>&lt;<a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u8.html">u8</a>&gt;, <a class="struct" href="https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html" title="struct std::io::error::Error">Error</a>&gt;</code><a class='srclink' href='../src/borsh/ser/mod.rs.html#14-18' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Serialize this instance into a vector of bytes.</p>
</div><h4 id='method.is_u8-1' class="method hidden"><code>fn <a href='../borsh/ser/trait.BorshSerialize.html#method.is_u8' class='fnname'>is_u8</a>() -&gt; <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.bool.html">bool</a></code><a class='srclink' href='../src/borsh/ser/mod.rs.html#26-28' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Whether Self is u8. NOTE: <code>Vec&lt;u8&gt;</code> is the most common use-case for serialization and deserialization, it's worth handling it as a special case to improve performance. It's a workaround for specific <code>Vec&lt;u8&gt;</code> implementation versus generic <code>Vec&lt;T&gt;</code> implementation. See https://github.com/rust-lang/rfcs/pull/1210 for details. <a href="../borsh/ser/trait.BorshSerialize.html#method.is_u8">Read more</a></p>
</div></div></div><h2 id='synthetic-implementations' class='small-section-header'>Auto Trait Implementations<a href='#synthetic-implementations' class='anchor'></a></h2><div id='synthetic-implementations-list'><h3 id='impl-RefUnwindSafe' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/std/panic/trait.RefUnwindSafe.html" title="trait std::panic::RefUnwindSafe">RefUnwindSafe</a> for <a class="struct" href="../near_clp/struct.Pool.html" title="struct near_clp::Pool">Pool</a></code><a href='#impl-RefUnwindSafe' class='anchor'></a></h3><div class='impl-items'></div><h3 id='impl-Send' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/core/marker/trait.Send.html" title="trait core::marker::Send">Send</a> for <a class="struct" href="../near_clp/struct.Pool.html" title="struct near_clp::Pool">Pool</a></code><a href='#impl-Send' class='anchor'></a></h3><div class='impl-items'></div><h3 id='impl-Sync' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html" title="trait core::marker::Sync">Sync</a> for <a class="struct" href="../near_clp/struct.Pool.html" title="struct near_clp::Pool">Pool</a></code><a href='#impl-Sync' class='anchor'></a></h3><div class='impl-items'></div><h3 id='impl-Unpin' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/core/marker/trait.Unpin.html" title="trait core::marker::Unpin">Unpin</a> for <a class="struct" href="../near_clp/struct.Pool.html" title="struct near_clp::Pool">Pool</a></code><a href='#impl-Unpin' class='anchor'></a></h3><div class='impl-items'></div><h3 id='impl-UnwindSafe' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/std/panic/trait.UnwindSafe.html" title="trait std::panic::UnwindSafe">UnwindSafe</a> for <a class="struct" href="../near_clp/struct.Pool.html" title="struct near_clp::Pool">Pool</a></code><a href='#impl-UnwindSafe' class='anchor'></a></h3><div class='impl-items'></div></div><h2 id='blanket-implementations' class='small-section-header'>Blanket Implementations<a href='#blanket-implementations' class='anchor'></a></h2><div id='blanket-implementations-list'><h3 id='impl-Any' class='impl'><code class='in-band'>impl&lt;T&gt; <a class="trait" href="https://doc.rust-lang.org/nightly/core/any/trait.Any.html" title="trait core::any::Any">Any</a> for T <span class="where fmt-newline">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: 'static + ?<a class="trait" href="https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html" title="trait core::marker::Sized">Sized</a>,&nbsp;</span></code><a href='#impl-Any' class='anchor'></a><a class='srclink' href='https://doc.rust-lang.org/nightly/src/core/any.rs.html#108-112' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='method.type_id' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/any/trait.Any.html#tymethod.type_id' class='fnname'>type_id</a>(&amp;self) -&gt; <a class="struct" href="https://doc.rust-lang.org/nightly/core/any/struct.TypeId.html" title="struct core::any::TypeId">TypeId</a></code><a class='srclink' href='https://doc.rust-lang.org/nightly/src/core/any.rs.html#109-111' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Gets the <code>TypeId</code> of <code>self</code>. <a href="https://doc.rust-lang.org/nightly/core/any/trait.Any.html#tymethod.type_id">Read more</a></p>
</div></div><h3 id='impl-Borrow%3CT%3E' class='impl'><code class='in-band'>impl&lt;T&gt; <a class="trait" href="https://doc.rust-lang.org/nightly/core/borrow/trait.Borrow.html" title="trait core::borrow::Borrow">Borrow</a>&lt;T&gt; for T <span class="where fmt-newline">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: ?<a class="trait" href="https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html" title="trait core::marker::Sized">Sized</a>,&nbsp;</span></code><a href='#impl-Borrow%3CT%3E' class='anchor'></a><a class='srclink' href='https://doc.rust-lang.org/nightly/src/core/borrow.rs.html#213-217' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='method.borrow' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/borrow/trait.Borrow.html#tymethod.borrow' class='fnname'>borrow</a>(&amp;self) -&gt; <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.reference.html">&amp;</a>T</code><a class='srclink' href='https://doc.rust-lang.org/nightly/src/core/borrow.rs.html#214-216' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Immutably borrows from an owned value. <a href="https://doc.rust-lang.org/nightly/core/borrow/trait.Borrow.html#tymethod.borrow">Read more</a></p>
</div></div><h3 id='impl-BorrowMut%3CT%3E' class='impl'><code class='in-band'>impl&lt;T&gt; <a class="trait" href="https://doc.rust-lang.org/nightly/core/borrow/trait.BorrowMut.html" title="trait core::borrow::BorrowMut">BorrowMut</a>&lt;T&gt; for T <span class="where fmt-newline">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: ?<a class="trait" href="https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html" title="trait core::marker::Sized">Sized</a>,&nbsp;</span></code><a href='#impl-BorrowMut%3CT%3E' class='anchor'></a><a class='srclink' href='https://doc.rust-lang.org/nightly/src/core/borrow.rs.html#220-224' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='method.borrow_mut' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut' class='fnname'>borrow_mut</a>(&amp;mut self) -&gt; <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.reference.html">&amp;mut </a>T</code><a class='srclink' href='https://doc.rust-lang.org/nightly/src/core/borrow.rs.html#221-223' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Mutably borrows from an owned value. <a href="https://doc.rust-lang.org/nightly/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut">Read more</a></p>
</div></div><h3 id='impl-From%3CT%3E' class='impl'><code class='in-band'>impl&lt;T&gt; <a class="trait" href="https://doc.rust-lang.org/nightly/core/convert/trait.From.html" title="trait core::convert::From">From</a>&lt;T&gt; for T</code><a href='#impl-From%3CT%3E' class='anchor'></a><a class='srclink' href='https://doc.rust-lang.org/nightly/src/core/convert/mod.rs.html#566-570' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='method.from' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from' class='fnname'>from</a>(t: T) -&gt; T</code><a class='srclink' href='https://doc.rust-lang.org/nightly/src/core/convert/mod.rs.html#567-569' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the conversion.</p>
</div></div><h3 id='impl-Into%3CU%3E' class='impl'><code class='in-band'>impl&lt;T, U&gt; <a class="trait" href="https://doc.rust-lang.org/nightly/core/convert/trait.Into.html" title="trait core::convert::Into">Into</a>&lt;U&gt; for T <span class="where fmt-newline">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: <a class="trait" href="https://doc.rust-lang.org/nightly/core/convert/trait.From.html" title="trait core::convert::From">From</a>&lt;T&gt;,&nbsp;</span></code><a href='#impl-Into%3CU%3E' class='anchor'></a><a class='srclink' href='https://doc.rust-lang.org/nightly/src/core/convert/mod.rs.html#555-562' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='method.into' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/convert/trait.Into.html#tymethod.into' class='fnname'>into</a>(self) -&gt; U</code><a class='srclink' href='https://doc.rust-lang.org/nightly/src/core/convert/mod.rs.html#559-561' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the conversion.</p>
</div></div><h3 id='impl-Same%3CT%3E' class='impl'><code class='in-band'>impl&lt;T&gt; <a class="trait" href="../typenum/type_operators/trait.Same.html" title="trait typenum::type_operators::Same">Same</a>&lt;T&gt; for T</code><a href='#impl-Same%3CT%3E' class='anchor'></a><a class='srclink' href='../src/typenum/type_operators.rs.html#33-35' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='associatedtype.Output' class="type"><code>type <a href='../typenum/type_operators/trait.Same.html#associatedtype.Output' class="type">Output</a> = T</code></h4><div class='docblock'><p>Should always be <code>Self</code></p>
</div></div><h3 id='impl-TryFrom%3CU%3E' class='impl'><code class='in-band'>impl&lt;T, U&gt; <a class="trait" href="https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html" title="trait core::convert::TryFrom">TryFrom</a>&lt;U&gt; for T <span class="where fmt-newline">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: <a class="trait" href="https://doc.rust-lang.org/nightly/core/convert/trait.Into.html" title="trait core::convert::Into">Into</a>&lt;T&gt;,&nbsp;</span></code><a href='#impl-TryFrom%3CU%3E' class='anchor'></a><a class='srclink' href='https://doc.rust-lang.org/nightly/src/core/convert/mod.rs.html#603-612' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='associatedtype.Error' class="type"><code>type <a href='https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html#associatedtype.Error' class="type">Error</a> = <a class="enum" href="https://doc.rust-lang.org/nightly/core/convert/enum.Infallible.html" title="enum core::convert::Infallible">Infallible</a></code></h4><div class='docblock'><p>The type returned in the event of a conversion error.</p>
</div><h4 id='method.try_from' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html#tymethod.try_from' class='fnname'>try_from</a>(value: U) -&gt; <a class="enum" href="https://doc.rust-lang.org/nightly/core/result/enum.Result.html" title="enum core::result::Result">Result</a>&lt;T, &lt;T as <a class="trait" href="https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html" title="trait core::convert::TryFrom">TryFrom</a>&lt;U&gt;&gt;::<a class="type" href="https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html#associatedtype.Error" title="type core::convert::TryFrom::Error">Error</a>&gt;</code><a class='srclink' href='https://doc.rust-lang.org/nightly/src/core/convert/mod.rs.html#609-611' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the conversion.</p>
</div></div><h3 id='impl-TryInto%3CU%3E' class='impl'><code class='in-band'>impl&lt;T, U&gt; <a class="trait" href="https://doc.rust-lang.org/nightly/core/convert/trait.TryInto.html" title="trait core::convert::TryInto">TryInto</a>&lt;U&gt; for T <span class="where fmt-newline">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: <a class="trait" href="https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html" title="trait core::convert::TryFrom">TryFrom</a>&lt;T&gt;,&nbsp;</span></code><a href='#impl-TryInto%3CU%3E' class='anchor'></a><a class='srclink' href='https://doc.rust-lang.org/nightly/src/core/convert/mod.rs.html#589-598' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='associatedtype.Error-1' class="type"><code>type <a href='https://doc.rust-lang.org/nightly/core/convert/trait.TryInto.html#associatedtype.Error' class="type">Error</a> = &lt;U as <a class="trait" href="https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html" title="trait core::convert::TryFrom">TryFrom</a>&lt;T&gt;&gt;::<a class="type" href="https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html#associatedtype.Error" title="type core::convert::TryFrom::Error">Error</a></code></h4><div class='docblock'><p>The type returned in the event of a conversion error.</p>
</div><h4 id='method.try_into' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/convert/trait.TryInto.html#tymethod.try_into' class='fnname'>try_into</a>(self) -&gt; <a class="enum" href="https://doc.rust-lang.org/nightly/core/result/enum.Result.html" title="enum core::result::Result">Result</a>&lt;U, &lt;U as <a class="trait" href="https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html" title="trait core::convert::TryFrom">TryFrom</a>&lt;T&gt;&gt;::<a class="type" href="https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html#associatedtype.Error" title="type core::convert::TryFrom::Error">Error</a>&gt;</code><a class='srclink' href='https://doc.rust-lang.org/nightly/src/core/convert/mod.rs.html#595-597' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the conversion.</p>
</div></div></div></section><section id="search" class="content hidden"></section><section class="footer"></section><script>window.rootPath = "../";window.currentCrate = "near_clp";</script><script src="../main.js"></script><script defer src="../search-index.js"></script></body></html>
'''
'''--- contract/target/doc/near_clp/struct.PoolInfo.html ---
<!DOCTYPE html><html lang="en"><head><meta charset="utf-8"><meta name="viewport" content="width=device-width, initial-scale=1.0"><meta name="generator" content="rustdoc"><meta name="description" content="API documentation for the Rust `PoolInfo` struct in crate `near_clp`."><meta name="keywords" content="rust, rustlang, rust-lang, PoolInfo"><title>near_clp::PoolInfo - Rust</title><link rel="stylesheet" type="text/css" href="../normalize.css"><link rel="stylesheet" type="text/css" href="../rustdoc.css" id="mainThemeStyle"><link rel="stylesheet" type="text/css" href="../dark.css"><link rel="stylesheet" type="text/css" href="../light.css" id="themeStyle"><script src="../storage.js"></script><noscript><link rel="stylesheet" href="../noscript.css"></noscript><link rel="shortcut icon" href="../favicon.ico"><style type="text/css">#crate-search{background-image:url("../down-arrow.svg");}</style></head><body class="rustdoc struct"><!--[if lte IE 8]><div class="warning">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class="sidebar"><div class="sidebar-menu">&#9776;</div><a href='../near_clp/index.html'><div class='logo-container'><img src='../rust-logo.png' alt='logo'></div></a><p class='location'>Struct PoolInfo</p><div class="sidebar-elems"><div class="block items"><a class="sidebar-title" href="#fields">Fields</a><div class="sidebar-links"><a href="#structfield.near_bal">near_bal</a><a href="#structfield.token_bal">token_bal</a><a href="#structfield.total_shares">total_shares</a></div><a class="sidebar-title" href="#trait-implementations">Trait Implementations</a><div class="sidebar-links"><a href="#impl-BorshDeserialize">BorshDeserialize</a><a href="#impl-BorshSerialize">BorshSerialize</a><a href="#impl-Debug">Debug</a><a href="#impl-Deserialize%3C%27de%3E">Deserialize&lt;&#39;de&gt;</a><a href="#impl-Display">Display</a><a href="#impl-PartialEq%3CPoolInfo%3E">PartialEq&lt;PoolInfo&gt;</a><a href="#impl-Serialize">Serialize</a><a href="#impl-StructuralPartialEq">StructuralPartialEq</a></div><a class="sidebar-title" href="#synthetic-implementations">Auto Trait Implementations</a><div class="sidebar-links"><a href="#impl-RefUnwindSafe">RefUnwindSafe</a><a href="#impl-Send">Send</a><a href="#impl-Sync">Sync</a><a href="#impl-Unpin">Unpin</a><a href="#impl-UnwindSafe">UnwindSafe</a></div><a class="sidebar-title" href="#blanket-implementations">Blanket Implementations</a><div class="sidebar-links"><a href="#impl-Any">Any</a><a href="#impl-Borrow%3CT%3E">Borrow&lt;T&gt;</a><a href="#impl-BorrowMut%3CT%3E">BorrowMut&lt;T&gt;</a><a href="#impl-DeserializeOwned">DeserializeOwned</a><a href="#impl-From%3CT%3E">From&lt;T&gt;</a><a href="#impl-Into%3CU%3E">Into&lt;U&gt;</a><a href="#impl-Same%3CT%3E">Same&lt;T&gt;</a><a href="#impl-ToString">ToString</a><a href="#impl-TryFrom%3CU%3E">TryFrom&lt;U&gt;</a><a href="#impl-TryInto%3CU%3E">TryInto&lt;U&gt;</a></div></div><p class='location'><a href='index.html'>near_clp</a></p><script>window.sidebarCurrent = {name: 'PoolInfo', ty: 'struct', relpath: ''};</script><script defer src="sidebar-items.js"></script></div></nav><div class="theme-picker"><button id="theme-picker" aria-label="Pick another theme!"><img src="../brush.svg" width="18" alt="Pick another theme!"></button><div id="theme-choices"></div></div><script src="../theme.js"></script><nav class="sub"><form class="search-form"><div class="search-container"><div><select id="crate-search"><option value="All crates">All crates</option></select><input class="search-input" name="search" disabled autocomplete="off" spellcheck="false" placeholder="Click or press ‘S’ to search, ‘?’ for more options…" type="search"></div><a id="settings-menu" href="../settings.html"><img src="../wheel.svg" width="18" alt="Change settings"></a></div></form></nav><section id="main" class="content"><h1 class='fqn'><span class='out-of-band'><span id='render-detail'><a id="toggle-all-docs" href="javascript:void(0)" title="collapse all docs">[<span class='inner'>&#x2212;</span>]</a></span><a class='srclink' href='../src/near_clp/lib.rs.html#49-55' title='goto source code'>[src]</a></span><span class='in-band'>Struct <a href='index.html'>near_clp</a>::<wbr><a class="struct" href=''>PoolInfo</a></span></h1><div class="docblock type-decl hidden-by-usual-hider"><pre class='rust struct'>pub struct PoolInfo {
    pub near_bal: <a class="type" href="../near_vm_logic/types/type.Balance.html" title="type near_vm_logic::types::Balance">Balance</a>,
    pub token_bal: <a class="type" href="../near_vm_logic/types/type.Balance.html" title="type near_vm_logic::types::Balance">Balance</a>,
    pub total_shares: <a class="type" href="../near_vm_logic/types/type.Balance.html" title="type near_vm_logic::types::Balance">Balance</a>,
}</pre></div><div class='docblock'><p>PoolInfo is a helper structure to extract public data from a Pool</p>
</div><h2 id='fields' class='fields small-section-header'>
                       Fields<a href='#fields' class='anchor'></a></h2><span id="structfield.near_bal" class="structfield small-section-header"><a href="#structfield.near_bal" class="anchor field"></a><code>near_bal: <a class="type" href="../near_vm_logic/types/type.Balance.html" title="type near_vm_logic::types::Balance">Balance</a></code></span><span id="structfield.token_bal" class="structfield small-section-header"><a href="#structfield.token_bal" class="anchor field"></a><code>token_bal: <a class="type" href="../near_vm_logic/types/type.Balance.html" title="type near_vm_logic::types::Balance">Balance</a></code></span><span id="structfield.total_shares" class="structfield small-section-header"><a href="#structfield.total_shares" class="anchor field"></a><code>total_shares: <a class="type" href="../near_vm_logic/types/type.Balance.html" title="type near_vm_logic::types::Balance">Balance</a></code></span><div class='docblock'><p>total amount of participation shares. Shares are represented using the same amount of
tailing decimals as the NEAR token, which is 24</p>
</div><h2 id='trait-implementations' class='small-section-header'>Trait Implementations<a href='#trait-implementations' class='anchor'></a></h2><div id='trait-implementations-list'><h3 id='impl-BorshDeserialize' class='impl'><code class='in-band'>impl <a class="trait" href="../borsh/de/trait.BorshDeserialize.html" title="trait borsh::de::BorshDeserialize">BorshDeserialize</a> for <a class="struct" href="../near_clp/struct.PoolInfo.html" title="struct near_clp::PoolInfo">PoolInfo</a> <span class="where fmt-newline">where<br>&nbsp;&nbsp;&nbsp;&nbsp;<a class="type" href="../near_vm_logic/types/type.Balance.html" title="type near_vm_logic::types::Balance">Balance</a>: <a class="trait" href="../borsh/de/trait.BorshDeserialize.html" title="trait borsh::de::BorshDeserialize">BorshDeserialize</a>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<a class="type" href="../near_vm_logic/types/type.Balance.html" title="type near_vm_logic::types::Balance">Balance</a>: <a class="trait" href="../borsh/de/trait.BorshDeserialize.html" title="trait borsh::de::BorshDeserialize">BorshDeserialize</a>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<a class="type" href="../near_vm_logic/types/type.Balance.html" title="type near_vm_logic::types::Balance">Balance</a>: <a class="trait" href="../borsh/de/trait.BorshDeserialize.html" title="trait borsh::de::BorshDeserialize">BorshDeserialize</a>,&nbsp;</span></code><a href='#impl-BorshDeserialize' class='anchor'></a><a class='srclink' href='../src/near_clp/lib.rs.html#48' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='method.deserialize' class="method hidden"><code>fn <a href='../borsh/de/trait.BorshDeserialize.html#tymethod.deserialize' class='fnname'>deserialize</a>(buf: &amp;mut <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.slice.html">&amp;[</a><a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u8.html">u8</a><a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.slice.html">]</a>) -&gt; <a class="enum" href="https://doc.rust-lang.org/nightly/core/result/enum.Result.html" title="enum core::result::Result">Result</a>&lt;Self, <a class="struct" href="https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html" title="struct std::io::error::Error">Error</a>&gt;</code><a class='srclink' href='../src/near_clp/lib.rs.html#48' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Deserializes this instance from a given slice of bytes. Updates the buffer to point at the remaining bytes. <a href="../borsh/de/trait.BorshDeserialize.html#tymethod.deserialize">Read more</a></p>
</div><h4 id='method.try_from_slice' class="method hidden"><code>fn <a href='../borsh/de/trait.BorshDeserialize.html#method.try_from_slice' class='fnname'>try_from_slice</a>(v: <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.slice.html">&amp;[</a><a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u8.html">u8</a><a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.slice.html">]</a>) -&gt; <a class="enum" href="https://doc.rust-lang.org/nightly/core/result/enum.Result.html" title="enum core::result::Result">Result</a>&lt;Self, <a class="struct" href="https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html" title="struct std::io::error::Error">Error</a>&gt;</code><a class='srclink' href='../src/borsh/de/mod.rs.html#19-29' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Deserialize this instance from a slice of bytes.</p>
</div><h4 id='method.is_u8' class="method hidden"><code>fn <a href='../borsh/de/trait.BorshDeserialize.html#method.is_u8' class='fnname'>is_u8</a>() -&gt; <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.bool.html">bool</a></code><a class='srclink' href='../src/borsh/de/mod.rs.html#37-39' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Whether Self is u8. NOTE: <code>Vec&lt;u8&gt;</code> is the most common use-case for serialization and deserialization, it's worth handling it as a special case to improve performance. It's a workaround for specific <code>Vec&lt;u8&gt;</code> implementation versus generic <code>Vec&lt;T&gt;</code> implementation. See https://github.com/rust-lang/rfcs/pull/1210 for details. <a href="../borsh/de/trait.BorshDeserialize.html#method.is_u8">Read more</a></p>
</div></div><h3 id='impl-BorshSerialize' class='impl'><code class='in-band'>impl <a class="trait" href="../borsh/ser/trait.BorshSerialize.html" title="trait borsh::ser::BorshSerialize">BorshSerialize</a> for <a class="struct" href="../near_clp/struct.PoolInfo.html" title="struct near_clp::PoolInfo">PoolInfo</a> <span class="where fmt-newline">where<br>&nbsp;&nbsp;&nbsp;&nbsp;<a class="type" href="../near_vm_logic/types/type.Balance.html" title="type near_vm_logic::types::Balance">Balance</a>: <a class="trait" href="../borsh/ser/trait.BorshSerialize.html" title="trait borsh::ser::BorshSerialize">BorshSerialize</a>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<a class="type" href="../near_vm_logic/types/type.Balance.html" title="type near_vm_logic::types::Balance">Balance</a>: <a class="trait" href="../borsh/ser/trait.BorshSerialize.html" title="trait borsh::ser::BorshSerialize">BorshSerialize</a>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<a class="type" href="../near_vm_logic/types/type.Balance.html" title="type near_vm_logic::types::Balance">Balance</a>: <a class="trait" href="../borsh/ser/trait.BorshSerialize.html" title="trait borsh::ser::BorshSerialize">BorshSerialize</a>,&nbsp;</span></code><a href='#impl-BorshSerialize' class='anchor'></a><a class='srclink' href='../src/near_clp/lib.rs.html#48' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='method.serialize' class="method hidden"><code>fn <a href='../borsh/ser/trait.BorshSerialize.html#tymethod.serialize' class='fnname'>serialize</a>&lt;W:&nbsp;<a class="trait" href="https://doc.rust-lang.org/nightly/std/io/trait.Write.html" title="trait std::io::Write">Write</a>&gt;(&amp;self, writer: <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.reference.html">&amp;mut </a>W) -&gt; <a class="enum" href="https://doc.rust-lang.org/nightly/core/result/enum.Result.html" title="enum core::result::Result">Result</a>&lt;<a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.unit.html">()</a>, <a class="struct" href="https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html" title="struct std::io::error::Error">Error</a>&gt;</code><a class='srclink' href='../src/near_clp/lib.rs.html#48' title='goto source code'>[src]</a></h4><h4 id='method.try_to_vec' class="method hidden"><code>fn <a href='../borsh/ser/trait.BorshSerialize.html#method.try_to_vec' class='fnname'>try_to_vec</a>(&amp;self) -&gt; <a class="enum" href="https://doc.rust-lang.org/nightly/core/result/enum.Result.html" title="enum core::result::Result">Result</a>&lt;<a class="struct" href="https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html" title="struct alloc::vec::Vec">Vec</a>&lt;<a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u8.html">u8</a>&gt;, <a class="struct" href="https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html" title="struct std::io::error::Error">Error</a>&gt;</code><a class='srclink' href='../src/borsh/ser/mod.rs.html#14-18' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Serialize this instance into a vector of bytes.</p>
</div><h4 id='method.is_u8-1' class="method hidden"><code>fn <a href='../borsh/ser/trait.BorshSerialize.html#method.is_u8' class='fnname'>is_u8</a>() -&gt; <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.bool.html">bool</a></code><a class='srclink' href='../src/borsh/ser/mod.rs.html#26-28' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Whether Self is u8. NOTE: <code>Vec&lt;u8&gt;</code> is the most common use-case for serialization and deserialization, it's worth handling it as a special case to improve performance. It's a workaround for specific <code>Vec&lt;u8&gt;</code> implementation versus generic <code>Vec&lt;T&gt;</code> implementation. See https://github.com/rust-lang/rfcs/pull/1210 for details. <a href="../borsh/ser/trait.BorshSerialize.html#method.is_u8">Read more</a></p>
</div></div><h3 id='impl-Debug' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html" title="trait core::fmt::Debug">Debug</a> for <a class="struct" href="../near_clp/struct.PoolInfo.html" title="struct near_clp::PoolInfo">PoolInfo</a></code><a href='#impl-Debug' class='anchor'></a><a class='srclink' href='../src/near_clp/lib.rs.html#48' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='method.fmt' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt' class='fnname'>fmt</a>(&amp;self, f: &amp;mut <a class="struct" href="https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html" title="struct core::fmt::Formatter">Formatter</a>) -&gt; <a class="type" href="https://doc.rust-lang.org/nightly/core/fmt/type.Result.html" title="type core::fmt::Result">Result</a></code><a class='srclink' href='../src/near_clp/lib.rs.html#48' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Formats the value using the given formatter. <a href="https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt">Read more</a></p>
</div></div><h3 id='impl-Deserialize%3C%27de%3E' class='impl'><code class='in-band'>impl&lt;'de&gt; <a class="trait" href="../serde/de/trait.Deserialize.html" title="trait serde::de::Deserialize">Deserialize</a>&lt;'de&gt; for <a class="struct" href="../near_clp/struct.PoolInfo.html" title="struct near_clp::PoolInfo">PoolInfo</a></code><a href='#impl-Deserialize%3C%27de%3E' class='anchor'></a><a class='srclink' href='../src/near_clp/lib.rs.html#48' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='method.deserialize-1' class="method hidden"><code>fn <a href='../serde/de/trait.Deserialize.html#tymethod.deserialize' class='fnname'>deserialize</a>&lt;__D&gt;(__deserializer: __D) -&gt; <a class="enum" href="https://doc.rust-lang.org/nightly/core/result/enum.Result.html" title="enum core::result::Result">Result</a>&lt;Self, __D::<a class="type" href="../serde/de/trait.Deserializer.html#associatedtype.Error" title="type serde::de::Deserializer::Error">Error</a>&gt; <span class="where fmt-newline">where<br>&nbsp;&nbsp;&nbsp;&nbsp;__D: <a class="trait" href="../serde/de/trait.Deserializer.html" title="trait serde::de::Deserializer">Deserializer</a>&lt;'de&gt;,&nbsp;</span></code><a class='srclink' href='../src/near_clp/lib.rs.html#48' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Deserialize this value from the given Serde deserializer. <a href="../serde/de/trait.Deserialize.html#tymethod.deserialize">Read more</a></p>
</div></div><h3 id='impl-Display' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html" title="trait core::fmt::Display">Display</a> for <a class="struct" href="../near_clp/struct.PoolInfo.html" title="struct near_clp::PoolInfo">PoolInfo</a></code><a href='#impl-Display' class='anchor'></a><a class='srclink' href='../src/near_clp/lib.rs.html#59-67' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='method.fmt-1' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html#tymethod.fmt' class='fnname'>fmt</a>(&amp;self, f: &amp;mut <a class="struct" href="https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html" title="struct core::fmt::Formatter">Formatter</a>) -&gt; <a class="type" href="https://doc.rust-lang.org/nightly/core/fmt/type.Result.html" title="type core::fmt::Result">Result</a></code><a class='srclink' href='../src/near_clp/lib.rs.html#60-66' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Formats the value using the given formatter. <a href="https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html#tymethod.fmt">Read more</a></p>
</div></div><h3 id='impl-PartialEq%3CPoolInfo%3E' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html" title="trait core::cmp::PartialEq">PartialEq</a>&lt;<a class="struct" href="../near_clp/struct.PoolInfo.html" title="struct near_clp::PoolInfo">PoolInfo</a>&gt; for <a class="struct" href="../near_clp/struct.PoolInfo.html" title="struct near_clp::PoolInfo">PoolInfo</a></code><a href='#impl-PartialEq%3CPoolInfo%3E' class='anchor'></a><a class='srclink' href='../src/near_clp/lib.rs.html#48' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='method.eq' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq' class='fnname'>eq</a>(&amp;self, other: &amp;<a class="struct" href="../near_clp/struct.PoolInfo.html" title="struct near_clp::PoolInfo">PoolInfo</a>) -&gt; <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.bool.html">bool</a></code><a class='srclink' href='../src/near_clp/lib.rs.html#48' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>. <a href="https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq">Read more</a></p>
</div><h4 id='method.ne' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne' class='fnname'>ne</a>(&amp;self, other: &amp;<a class="struct" href="../near_clp/struct.PoolInfo.html" title="struct near_clp::PoolInfo">PoolInfo</a>) -&gt; <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.bool.html">bool</a></code><a class='srclink' href='../src/near_clp/lib.rs.html#48' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>This method tests for <code>!=</code>.</p>
</div></div><h3 id='impl-Serialize' class='impl'><code class='in-band'>impl <a class="trait" href="../serde/ser/trait.Serialize.html" title="trait serde::ser::Serialize">Serialize</a> for <a class="struct" href="../near_clp/struct.PoolInfo.html" title="struct near_clp::PoolInfo">PoolInfo</a></code><a href='#impl-Serialize' class='anchor'></a><a class='srclink' href='../src/near_clp/lib.rs.html#48' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='method.serialize-1' class="method hidden"><code>fn <a href='../serde/ser/trait.Serialize.html#tymethod.serialize' class='fnname'>serialize</a>&lt;__S&gt;(&amp;self, __serializer: __S) -&gt; <a class="enum" href="https://doc.rust-lang.org/nightly/core/result/enum.Result.html" title="enum core::result::Result">Result</a>&lt;__S::<a class="type" href="../serde/ser/trait.Serializer.html#associatedtype.Ok" title="type serde::ser::Serializer::Ok">Ok</a>, __S::<a class="type" href="../serde/ser/trait.Serializer.html#associatedtype.Error" title="type serde::ser::Serializer::Error">Error</a>&gt; <span class="where fmt-newline">where<br>&nbsp;&nbsp;&nbsp;&nbsp;__S: <a class="trait" href="../serde/ser/trait.Serializer.html" title="trait serde::ser::Serializer">Serializer</a>,&nbsp;</span></code><a class='srclink' href='../src/near_clp/lib.rs.html#48' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Serialize this value into the given Serde serializer. <a href="../serde/ser/trait.Serialize.html#tymethod.serialize">Read more</a></p>
</div></div><h3 id='impl-StructuralPartialEq' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/core/marker/trait.StructuralPartialEq.html" title="trait core::marker::StructuralPartialEq">StructuralPartialEq</a> for <a class="struct" href="../near_clp/struct.PoolInfo.html" title="struct near_clp::PoolInfo">PoolInfo</a></code><a href='#impl-StructuralPartialEq' class='anchor'></a><a class='srclink' href='../src/near_clp/lib.rs.html#48' title='goto source code'>[src]</a></h3><div class='impl-items'></div></div><h2 id='synthetic-implementations' class='small-section-header'>Auto Trait Implementations<a href='#synthetic-implementations' class='anchor'></a></h2><div id='synthetic-implementations-list'><h3 id='impl-RefUnwindSafe' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/std/panic/trait.RefUnwindSafe.html" title="trait std::panic::RefUnwindSafe">RefUnwindSafe</a> for <a class="struct" href="../near_clp/struct.PoolInfo.html" title="struct near_clp::PoolInfo">PoolInfo</a></code><a href='#impl-RefUnwindSafe' class='anchor'></a></h3><div class='impl-items'></div><h3 id='impl-Send' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/core/marker/trait.Send.html" title="trait core::marker::Send">Send</a> for <a class="struct" href="../near_clp/struct.PoolInfo.html" title="struct near_clp::PoolInfo">PoolInfo</a></code><a href='#impl-Send' class='anchor'></a></h3><div class='impl-items'></div><h3 id='impl-Sync' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html" title="trait core::marker::Sync">Sync</a> for <a class="struct" href="../near_clp/struct.PoolInfo.html" title="struct near_clp::PoolInfo">PoolInfo</a></code><a href='#impl-Sync' class='anchor'></a></h3><div class='impl-items'></div><h3 id='impl-Unpin' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/core/marker/trait.Unpin.html" title="trait core::marker::Unpin">Unpin</a> for <a class="struct" href="../near_clp/struct.PoolInfo.html" title="struct near_clp::PoolInfo">PoolInfo</a></code><a href='#impl-Unpin' class='anchor'></a></h3><div class='impl-items'></div><h3 id='impl-UnwindSafe' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/std/panic/trait.UnwindSafe.html" title="trait std::panic::UnwindSafe">UnwindSafe</a> for <a class="struct" href="../near_clp/struct.PoolInfo.html" title="struct near_clp::PoolInfo">PoolInfo</a></code><a href='#impl-UnwindSafe' class='anchor'></a></h3><div class='impl-items'></div></div><h2 id='blanket-implementations' class='small-section-header'>Blanket Implementations<a href='#blanket-implementations' class='anchor'></a></h2><div id='blanket-implementations-list'><h3 id='impl-Any' class='impl'><code class='in-band'>impl&lt;T&gt; <a class="trait" href="https://doc.rust-lang.org/nightly/core/any/trait.Any.html" title="trait core::any::Any">Any</a> for T <span class="where fmt-newline">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: 'static + ?<a class="trait" href="https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html" title="trait core::marker::Sized">Sized</a>,&nbsp;</span></code><a href='#impl-Any' class='anchor'></a><a class='srclink' href='https://doc.rust-lang.org/nightly/src/core/any.rs.html#108-112' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='method.type_id' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/any/trait.Any.html#tymethod.type_id' class='fnname'>type_id</a>(&amp;self) -&gt; <a class="struct" href="https://doc.rust-lang.org/nightly/core/any/struct.TypeId.html" title="struct core::any::TypeId">TypeId</a></code><a class='srclink' href='https://doc.rust-lang.org/nightly/src/core/any.rs.html#109-111' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Gets the <code>TypeId</code> of <code>self</code>. <a href="https://doc.rust-lang.org/nightly/core/any/trait.Any.html#tymethod.type_id">Read more</a></p>
</div></div><h3 id='impl-Borrow%3CT%3E' class='impl'><code class='in-band'>impl&lt;T&gt; <a class="trait" href="https://doc.rust-lang.org/nightly/core/borrow/trait.Borrow.html" title="trait core::borrow::Borrow">Borrow</a>&lt;T&gt; for T <span class="where fmt-newline">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: ?<a class="trait" href="https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html" title="trait core::marker::Sized">Sized</a>,&nbsp;</span></code><a href='#impl-Borrow%3CT%3E' class='anchor'></a><a class='srclink' href='https://doc.rust-lang.org/nightly/src/core/borrow.rs.html#213-217' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='method.borrow' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/borrow/trait.Borrow.html#tymethod.borrow' class='fnname'>borrow</a>(&amp;self) -&gt; <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.reference.html">&amp;</a>T</code><a class='srclink' href='https://doc.rust-lang.org/nightly/src/core/borrow.rs.html#214-216' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Immutably borrows from an owned value. <a href="https://doc.rust-lang.org/nightly/core/borrow/trait.Borrow.html#tymethod.borrow">Read more</a></p>
</div></div><h3 id='impl-BorrowMut%3CT%3E' class='impl'><code class='in-band'>impl&lt;T&gt; <a class="trait" href="https://doc.rust-lang.org/nightly/core/borrow/trait.BorrowMut.html" title="trait core::borrow::BorrowMut">BorrowMut</a>&lt;T&gt; for T <span class="where fmt-newline">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: ?<a class="trait" href="https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html" title="trait core::marker::Sized">Sized</a>,&nbsp;</span></code><a href='#impl-BorrowMut%3CT%3E' class='anchor'></a><a class='srclink' href='https://doc.rust-lang.org/nightly/src/core/borrow.rs.html#220-224' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='method.borrow_mut' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut' class='fnname'>borrow_mut</a>(&amp;mut self) -&gt; <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.reference.html">&amp;mut </a>T</code><a class='srclink' href='https://doc.rust-lang.org/nightly/src/core/borrow.rs.html#221-223' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Mutably borrows from an owned value. <a href="https://doc.rust-lang.org/nightly/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut">Read more</a></p>
</div></div><h3 id='impl-DeserializeOwned' class='impl'><code class='in-band'>impl&lt;T&gt; <a class="trait" href="../serde/de/trait.DeserializeOwned.html" title="trait serde::de::DeserializeOwned">DeserializeOwned</a> for T <span class="where fmt-newline">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: for&lt;'de&gt; <a class="trait" href="../serde/de/trait.Deserialize.html" title="trait serde::de::Deserialize">Deserialize</a>&lt;'de&gt;,&nbsp;</span></code><a href='#impl-DeserializeOwned' class='anchor'></a><a class='srclink' href='../src/serde/de/mod.rs.html#604' title='goto source code'>[src]</a></h3><div class='impl-items'></div><h3 id='impl-From%3CT%3E' class='impl'><code class='in-band'>impl&lt;T&gt; <a class="trait" href="https://doc.rust-lang.org/nightly/core/convert/trait.From.html" title="trait core::convert::From">From</a>&lt;T&gt; for T</code><a href='#impl-From%3CT%3E' class='anchor'></a><a class='srclink' href='https://doc.rust-lang.org/nightly/src/core/convert/mod.rs.html#566-570' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='method.from' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from' class='fnname'>from</a>(t: T) -&gt; T</code><a class='srclink' href='https://doc.rust-lang.org/nightly/src/core/convert/mod.rs.html#567-569' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the conversion.</p>
</div></div><h3 id='impl-Into%3CU%3E' class='impl'><code class='in-band'>impl&lt;T, U&gt; <a class="trait" href="https://doc.rust-lang.org/nightly/core/convert/trait.Into.html" title="trait core::convert::Into">Into</a>&lt;U&gt; for T <span class="where fmt-newline">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: <a class="trait" href="https://doc.rust-lang.org/nightly/core/convert/trait.From.html" title="trait core::convert::From">From</a>&lt;T&gt;,&nbsp;</span></code><a href='#impl-Into%3CU%3E' class='anchor'></a><a class='srclink' href='https://doc.rust-lang.org/nightly/src/core/convert/mod.rs.html#555-562' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='method.into' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/convert/trait.Into.html#tymethod.into' class='fnname'>into</a>(self) -&gt; U</code><a class='srclink' href='https://doc.rust-lang.org/nightly/src/core/convert/mod.rs.html#559-561' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the conversion.</p>
</div></div><h3 id='impl-Same%3CT%3E' class='impl'><code class='in-band'>impl&lt;T&gt; <a class="trait" href="../typenum/type_operators/trait.Same.html" title="trait typenum::type_operators::Same">Same</a>&lt;T&gt; for T</code><a href='#impl-Same%3CT%3E' class='anchor'></a><a class='srclink' href='../src/typenum/type_operators.rs.html#33-35' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='associatedtype.Output' class="type"><code>type <a href='../typenum/type_operators/trait.Same.html#associatedtype.Output' class="type">Output</a> = T</code></h4><div class='docblock'><p>Should always be <code>Self</code></p>
</div></div><h3 id='impl-ToString' class='impl'><code class='in-band'>impl&lt;T&gt; <a class="trait" href="https://doc.rust-lang.org/nightly/alloc/string/trait.ToString.html" title="trait alloc::string::ToString">ToString</a> for T <span class="where fmt-newline">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: <a class="trait" href="https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html" title="trait core::fmt::Display">Display</a> + ?<a class="trait" href="https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html" title="trait core::marker::Sized">Sized</a>,&nbsp;</span></code><a href='#impl-ToString' class='anchor'></a><a class='srclink' href='https://doc.rust-lang.org/nightly/src/alloc/string.rs.html#2237-2247' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='method.to_string' class="method hidden"><code>default fn <a href='https://doc.rust-lang.org/nightly/alloc/string/trait.ToString.html#tymethod.to_string' class='fnname'>to_string</a>(&amp;self) -&gt; <a class="struct" href="https://doc.rust-lang.org/nightly/alloc/string/struct.String.html" title="struct alloc::string::String">String</a></code><a class='srclink' href='https://doc.rust-lang.org/nightly/src/alloc/string.rs.html#2239-2246' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Converts the given value to a <code>String</code>. <a href="https://doc.rust-lang.org/nightly/alloc/string/trait.ToString.html#tymethod.to_string">Read more</a></p>
</div></div><h3 id='impl-TryFrom%3CU%3E' class='impl'><code class='in-band'>impl&lt;T, U&gt; <a class="trait" href="https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html" title="trait core::convert::TryFrom">TryFrom</a>&lt;U&gt; for T <span class="where fmt-newline">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: <a class="trait" href="https://doc.rust-lang.org/nightly/core/convert/trait.Into.html" title="trait core::convert::Into">Into</a>&lt;T&gt;,&nbsp;</span></code><a href='#impl-TryFrom%3CU%3E' class='anchor'></a><a class='srclink' href='https://doc.rust-lang.org/nightly/src/core/convert/mod.rs.html#603-612' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='associatedtype.Error' class="type"><code>type <a href='https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html#associatedtype.Error' class="type">Error</a> = <a class="enum" href="https://doc.rust-lang.org/nightly/core/convert/enum.Infallible.html" title="enum core::convert::Infallible">Infallible</a></code></h4><div class='docblock'><p>The type returned in the event of a conversion error.</p>
</div><h4 id='method.try_from' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html#tymethod.try_from' class='fnname'>try_from</a>(value: U) -&gt; <a class="enum" href="https://doc.rust-lang.org/nightly/core/result/enum.Result.html" title="enum core::result::Result">Result</a>&lt;T, &lt;T as <a class="trait" href="https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html" title="trait core::convert::TryFrom">TryFrom</a>&lt;U&gt;&gt;::<a class="type" href="https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html#associatedtype.Error" title="type core::convert::TryFrom::Error">Error</a>&gt;</code><a class='srclink' href='https://doc.rust-lang.org/nightly/src/core/convert/mod.rs.html#609-611' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the conversion.</p>
</div></div><h3 id='impl-TryInto%3CU%3E' class='impl'><code class='in-band'>impl&lt;T, U&gt; <a class="trait" href="https://doc.rust-lang.org/nightly/core/convert/trait.TryInto.html" title="trait core::convert::TryInto">TryInto</a>&lt;U&gt; for T <span class="where fmt-newline">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: <a class="trait" href="https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html" title="trait core::convert::TryFrom">TryFrom</a>&lt;T&gt;,&nbsp;</span></code><a href='#impl-TryInto%3CU%3E' class='anchor'></a><a class='srclink' href='https://doc.rust-lang.org/nightly/src/core/convert/mod.rs.html#589-598' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='associatedtype.Error-1' class="type"><code>type <a href='https://doc.rust-lang.org/nightly/core/convert/trait.TryInto.html#associatedtype.Error' class="type">Error</a> = &lt;U as <a class="trait" href="https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html" title="trait core::convert::TryFrom">TryFrom</a>&lt;T&gt;&gt;::<a class="type" href="https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html#associatedtype.Error" title="type core::convert::TryFrom::Error">Error</a></code></h4><div class='docblock'><p>The type returned in the event of a conversion error.</p>
</div><h4 id='method.try_into' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/convert/trait.TryInto.html#tymethod.try_into' class='fnname'>try_into</a>(self) -&gt; <a class="enum" href="https://doc.rust-lang.org/nightly/core/result/enum.Result.html" title="enum core::result::Result">Result</a>&lt;U, &lt;U as <a class="trait" href="https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html" title="trait core::convert::TryFrom">TryFrom</a>&lt;T&gt;&gt;::<a class="type" href="https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html#associatedtype.Error" title="type core::convert::TryFrom::Error">Error</a>&gt;</code><a class='srclink' href='https://doc.rust-lang.org/nightly/src/core/convert/mod.rs.html#595-597' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the conversion.</p>
</div></div></div></section><section id="search" class="content hidden"></section><section class="footer"></section><script>window.rootPath = "../";window.currentCrate = "near_clp";</script><script src="../main.js"></script><script defer src="../search-index.js"></script></body></html>
'''
'''--- contract/target/doc/near_clp/struct.U256.html ---
<!DOCTYPE html><html lang="en"><head><meta charset="utf-8"><meta name="viewport" content="width=device-width, initial-scale=1.0"><meta name="generator" content="rustdoc"><meta name="description" content="API documentation for the Rust `U256` struct in crate `near_clp`."><meta name="keywords" content="rust, rustlang, rust-lang, U256"><title>near_clp::U256 - Rust</title><link rel="stylesheet" type="text/css" href="../normalize.css"><link rel="stylesheet" type="text/css" href="../rustdoc.css" id="mainThemeStyle"><link rel="stylesheet" type="text/css" href="../dark.css"><link rel="stylesheet" type="text/css" href="../light.css" id="themeStyle"><script src="../storage.js"></script><noscript><link rel="stylesheet" href="../noscript.css"></noscript><link rel="shortcut icon" href="../favicon.ico"><style type="text/css">#crate-search{background-image:url("../down-arrow.svg");}</style></head><body class="rustdoc struct"><!--[if lte IE 8]><div class="warning">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class="sidebar"><div class="sidebar-menu">&#9776;</div><a href='../near_clp/index.html'><div class='logo-container'><img src='../rust-logo.png' alt='logo'></div></a><p class='location'>Struct U256</p><div class="sidebar-elems"><div class="block items"><a class="sidebar-title" href="#implementations">Methods</a><div class="sidebar-links"><a href="#method.as_u128">as_u128</a><a href="#method.as_u32">as_u32</a><a href="#method.as_u64">as_u64</a><a href="#method.as_usize">as_usize</a><a href="#method.bit">bit</a><a href="#method.bits">bits</a><a href="#method.byte">byte</a><a href="#method.checked_add">checked_add</a><a href="#method.checked_div">checked_div</a><a href="#method.checked_mul">checked_mul</a><a href="#method.checked_neg">checked_neg</a><a href="#method.checked_pow">checked_pow</a><a href="#method.checked_rem">checked_rem</a><a href="#method.checked_sub">checked_sub</a><a href="#method.div_mod">div_mod</a><a href="#method.exp10">exp10</a><a href="#method.from_big_endian">from_big_endian</a><a href="#method.from_dec_str">from_dec_str</a><a href="#method.from_little_endian">from_little_endian</a><a href="#method.is_zero">is_zero</a><a href="#method.leading_zeros">leading_zeros</a><a href="#method.low_u128">low_u128</a><a href="#method.low_u32">low_u32</a><a href="#method.low_u64">low_u64</a><a href="#method.max_value">max_value</a><a href="#method.one">one</a><a href="#method.overflowing_add">overflowing_add</a><a href="#method.overflowing_mul">overflowing_mul</a><a href="#method.overflowing_neg">overflowing_neg</a><a href="#method.overflowing_pow">overflowing_pow</a><a href="#method.overflowing_sub">overflowing_sub</a><a href="#method.pow">pow</a><a href="#method.saturating_add">saturating_add</a><a href="#method.saturating_mul">saturating_mul</a><a href="#method.saturating_sub">saturating_sub</a><a href="#method.to_big_endian">to_big_endian</a><a href="#method.to_little_endian">to_little_endian</a><a href="#method.trailing_zeros">trailing_zeros</a><a href="#method.zero">zero</a></div><a class="sidebar-title" href="#trait-implementations">Trait Implementations</a><div class="sidebar-links"><a href="#impl-Add%3CT%3E">Add&lt;T&gt;</a><a href="#impl-AddAssign%3CU256%3E">AddAssign&lt;U256&gt;</a><a href="#impl-AsRef%3C%5Bu64%5D%3E">AsRef&lt;[u64]&gt;</a><a href="#impl-BitAnd%3CU256%3E">BitAnd&lt;U256&gt;</a><a href="#impl-BitOr%3CU256%3E">BitOr&lt;U256&gt;</a><a href="#impl-BitXor%3CU256%3E">BitXor&lt;U256&gt;</a><a href="#impl-Clone">Clone</a><a href="#impl-Copy">Copy</a><a href="#impl-Debug">Debug</a><a href="#impl-Default">Default</a><a href="#impl-Display">Display</a><a href="#impl-Div%3CT%3E">Div&lt;T&gt;</a><a href="#impl-DivAssign%3CT%3E">DivAssign&lt;T&gt;</a><a href="#impl-Eq">Eq</a><a href="#impl-From%3C%26%27a%20%5Bu8%3B%2032%5D%3E">From&lt;&amp;&#39;a [u8; 32]&gt;</a><a href="#impl-From%3C%26%27a%20%5Bu8%5D%3E">From&lt;&amp;&#39;a [u8]&gt;</a><a href="#impl-From%3C%26%27a%20U256%3E">From&lt;&amp;&#39;a U256&gt;</a><a href="#impl-From%3C%5Bu8%3B%2032%5D%3E">From&lt;[u8; 32]&gt;</a><a href="#impl-From%3CU256%3E">From&lt;U256&gt;</a><a href="#impl-From%3Ci128%3E">From&lt;i128&gt;</a><a href="#impl-From%3Ci16%3E">From&lt;i16&gt;</a><a href="#impl-From%3Ci32%3E">From&lt;i32&gt;</a><a href="#impl-From%3Ci64%3E">From&lt;i64&gt;</a><a href="#impl-From%3Ci8%3E">From&lt;i8&gt;</a><a href="#impl-From%3Cisize%3E">From&lt;isize&gt;</a><a href="#impl-From%3Cu128%3E">From&lt;u128&gt;</a><a href="#impl-From%3Cu16%3E">From&lt;u16&gt;</a><a href="#impl-From%3Cu32%3E">From&lt;u32&gt;</a><a href="#impl-From%3Cu64%3E">From&lt;u64&gt;</a><a href="#impl-From%3Cu8%3E">From&lt;u8&gt;</a><a href="#impl-From%3Cusize%3E">From&lt;usize&gt;</a><a href="#impl-Hash">Hash</a><a href="#impl-LowerHex">LowerHex</a><a href="#impl-Mul%3C%26%27a%20U256%3E">Mul&lt;&amp;&#39;a U256&gt;</a><a href="#impl-Mul%3C%26%27a%20i16%3E">Mul&lt;&amp;&#39;a i16&gt;</a><a href="#impl-Mul%3C%26%27a%20i32%3E">Mul&lt;&amp;&#39;a i32&gt;</a><a href="#impl-Mul%3C%26%27a%20i64%3E">Mul&lt;&amp;&#39;a i64&gt;</a><a href="#impl-Mul%3C%26%27a%20i8%3E">Mul&lt;&amp;&#39;a i8&gt;</a><a href="#impl-Mul%3C%26%27a%20isize%3E">Mul&lt;&amp;&#39;a isize&gt;</a><a href="#impl-Mul%3C%26%27a%20u16%3E">Mul&lt;&amp;&#39;a u16&gt;</a><a href="#impl-Mul%3C%26%27a%20u32%3E">Mul&lt;&amp;&#39;a u32&gt;</a><a href="#impl-Mul%3C%26%27a%20u64%3E">Mul&lt;&amp;&#39;a u64&gt;</a><a href="#impl-Mul%3C%26%27a%20u8%3E">Mul&lt;&amp;&#39;a u8&gt;</a><a href="#impl-Mul%3C%26%27a%20usize%3E">Mul&lt;&amp;&#39;a usize&gt;</a><a href="#impl-Mul%3CU256%3E">Mul&lt;U256&gt;</a><a href="#impl-Mul%3Ci16%3E">Mul&lt;i16&gt;</a><a href="#impl-Mul%3Ci32%3E">Mul&lt;i32&gt;</a><a href="#impl-Mul%3Ci64%3E">Mul&lt;i64&gt;</a><a href="#impl-Mul%3Ci8%3E">Mul&lt;i8&gt;</a><a href="#impl-Mul%3Cisize%3E">Mul&lt;isize&gt;</a><a href="#impl-Mul%3Cu16%3E">Mul&lt;u16&gt;</a><a href="#impl-Mul%3Cu32%3E">Mul&lt;u32&gt;</a><a href="#impl-Mul%3Cu64%3E">Mul&lt;u64&gt;</a><a href="#impl-Mul%3Cu8%3E">Mul&lt;u8&gt;</a><a href="#impl-Mul%3Cusize%3E">Mul&lt;usize&gt;</a><a href="#impl-MulAssign%3CU256%3E">MulAssign&lt;U256&gt;</a><a href="#impl-MulAssign%3Ci16%3E">MulAssign&lt;i16&gt;</a><a href="#impl-MulAssign%3Ci32%3E">MulAssign&lt;i32&gt;</a><a href="#impl-MulAssign%3Ci64%3E">MulAssign&lt;i64&gt;</a><a href="#impl-MulAssign%3Ci8%3E">MulAssign&lt;i8&gt;</a><a href="#impl-MulAssign%3Cisize%3E">MulAssign&lt;isize&gt;</a><a href="#impl-MulAssign%3Cu16%3E">MulAssign&lt;u16&gt;</a><a href="#impl-MulAssign%3Cu32%3E">MulAssign&lt;u32&gt;</a><a href="#impl-MulAssign%3Cu64%3E">MulAssign&lt;u64&gt;</a><a href="#impl-MulAssign%3Cu8%3E">MulAssign&lt;u8&gt;</a><a href="#impl-MulAssign%3Cusize%3E">MulAssign&lt;usize&gt;</a><a href="#impl-Not">Not</a><a href="#impl-Ord">Ord</a><a href="#impl-PartialEq%3CU256%3E">PartialEq&lt;U256&gt;</a><a href="#impl-PartialOrd%3CU256%3E">PartialOrd&lt;U256&gt;</a><a href="#impl-Rem%3CT%3E">Rem&lt;T&gt;</a><a href="#impl-RemAssign%3CT%3E">RemAssign&lt;T&gt;</a><a href="#impl-Shl%3CT%3E">Shl&lt;T&gt;</a><a href="#impl-ShlAssign%3CT%3E">ShlAssign&lt;T&gt;</a><a href="#impl-Shr%3CT%3E">Shr&lt;T&gt;</a><a href="#impl-ShrAssign%3CT%3E">ShrAssign&lt;T&gt;</a><a href="#impl-StructuralEq">StructuralEq</a><a href="#impl-StructuralPartialEq">StructuralPartialEq</a><a href="#impl-Sub%3CT%3E">Sub&lt;T&gt;</a><a href="#impl-SubAssign%3CU256%3E">SubAssign&lt;U256&gt;</a><a href="#impl-TryFrom%3CU256%3E">TryFrom&lt;U256&gt;</a></div><a class="sidebar-title" href="#synthetic-implementations">Auto Trait Implementations</a><div class="sidebar-links"><a href="#impl-RefUnwindSafe">RefUnwindSafe</a><a href="#impl-Send">Send</a><a href="#impl-Sync">Sync</a><a href="#impl-Unpin">Unpin</a><a href="#impl-UnwindSafe">UnwindSafe</a></div><a class="sidebar-title" href="#blanket-implementations">Blanket Implementations</a><div class="sidebar-links"><a href="#impl-Any">Any</a><a href="#impl-Borrow%3CT%3E">Borrow&lt;T&gt;</a><a href="#impl-BorrowMut%3CT%3E">BorrowMut&lt;T&gt;</a><a href="#impl-Equivalent%3CK%3E">Equivalent&lt;K&gt;</a><a href="#impl-From%3CT%3E">From&lt;T&gt;</a><a href="#impl-Into%3CU%3E">Into&lt;U&gt;</a><a href="#impl-NumAssignOps%3CRhs%3E">NumAssignOps&lt;Rhs&gt;</a><a href="#impl-NumOps%3CRhs%2C%20Output%3E">NumOps&lt;Rhs, Output&gt;</a><a href="#impl-RefNum%3CBase%3E">RefNum&lt;Base&gt;</a><a href="#impl-Same%3CT%3E">Same&lt;T&gt;</a><a href="#impl-ToOwned">ToOwned</a><a href="#impl-ToString">ToString</a><a href="#impl-TryFrom%3CU%3E">TryFrom&lt;U&gt;</a><a href="#impl-TryInto%3CU%3E">TryInto&lt;U&gt;</a></div></div><p class='location'><a href='index.html'>near_clp</a></p><script>window.sidebarCurrent = {name: 'U256', ty: 'struct', relpath: ''};</script><script defer src="sidebar-items.js"></script></div></nav><div class="theme-picker"><button id="theme-picker" aria-label="Pick another theme!"><img src="../brush.svg" width="18" alt="Pick another theme!"></button><div id="theme-choices"></div></div><script src="../theme.js"></script><nav class="sub"><form class="search-form"><div class="search-container"><div><select id="crate-search"><option value="All crates">All crates</option></select><input class="search-input" name="search" disabled autocomplete="off" spellcheck="false" placeholder="Click or press ‘S’ to search, ‘?’ for more options…" type="search"></div><a id="settings-menu" href="../settings.html"><img src="../wheel.svg" width="18" alt="Change settings"></a></div></form></nav><section id="main" class="content"><h1 class='fqn'><span class='out-of-band'><span id='render-detail'><a id="toggle-all-docs" href="javascript:void(0)" title="collapse all docs">[<span class='inner'>&#x2212;</span>]</a></span><a class='srclink' href='../src/uint/uint.rs.html#449' title='goto source code'>[src]</a></span><span class='in-band'>Struct <a href='index.html'>near_clp</a>::<wbr><a class="struct" href=''>U256</a></span></h1><div class="docblock type-decl hidden-by-usual-hider"><pre class='rust struct'><span class="docblock attributes top-attr">#[repr(C)]</span>pub struct U256(pub <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.array.html">[</a><a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u64.html">u64</a><a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.array.html">; 4]</a>);</pre></div><div class='docblock'><p>Little-endian large integer type
256-bit unsigned integer.</p>
</div><h2 id='implementations' class='small-section-header'>Implementations<a href='#implementations' class='anchor'></a></h2><h3 id='impl' class='impl'><code class='in-band'>impl <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#465-1155' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='associatedconstant.MAX' class="associatedconstant"><code>pub const <a href='#associatedconstant.MAX' class="constant"><b>MAX</b></a>: <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a class='srclink' href='../src/uint/uint.rs.html#468' title='goto source code'>[src]</a></h4><div class='docblock'><p>Maximum value.</p>
</div><h4 id='method.from_dec_str' class="method"><code>pub fn <a href='#method.from_dec_str' class='fnname'>from_dec_str</a>(value: &amp;<a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.str.html">str</a>) -&gt; <a class="enum" href="https://doc.rust-lang.org/nightly/core/result/enum.Result.html" title="enum core::result::Result">Result</a>&lt;Self, <a class="enum" href="../uint/uint/enum.FromDecStrErr.html" title="enum uint::uint::FromDecStrErr">FromDecStrErr</a>&gt;</code><a class='srclink' href='../src/uint/uint.rs.html#471-489' title='goto source code'>[src]</a></h4><div class='docblock'><p>Convert from a decimal string.</p>
</div><h4 id='method.low_u32' class="method"><code>pub const fn <a href='#method.low_u32' class='fnname'>low_u32</a>(&amp;self) -&gt; <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u32.html">u32</a></code><a class='srclink' href='../src/uint/uint.rs.html#493-496' title='goto source code'>[src]</a></h4><div class='docblock'><p>Conversion to u32</p>
</div><h4 id='method.low_u64' class="method"><code>pub const fn <a href='#method.low_u64' class='fnname'>low_u64</a>(&amp;self) -&gt; <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u64.html">u64</a></code><a class='srclink' href='../src/uint/uint.rs.html#500-503' title='goto source code'>[src]</a></h4><div class='docblock'><p>Low word (u64)</p>
</div><h4 id='method.as_u32' class="method"><code>pub fn <a href='#method.as_u32' class='fnname'>as_u32</a>(&amp;self) -&gt; <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u32.html">u32</a></code><a class='srclink' href='../src/uint/uint.rs.html#511-517' title='goto source code'>[src]</a></h4><div class='docblock'><p>Conversion to u32 with overflow checking</p>
<h1 id="panics" class="section-header"><a href="#panics">Panics</a></h1>
<p>Panics if the number is larger than 2^32.</p>
</div><h4 id='method.as_u64' class="method"><code>pub fn <a href='#method.as_u64' class='fnname'>as_u64</a>(&amp;self) -&gt; <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u64.html">u64</a></code><a class='srclink' href='../src/uint/uint.rs.html#525-531' title='goto source code'>[src]</a></h4><div class='docblock'><p>Conversion to u64 with overflow checking</p>
<h1 id="panics-1" class="section-header"><a href="#panics-1">Panics</a></h1>
<p>Panics if the number is larger than u64::max_value().</p>
</div><h4 id='method.as_usize' class="method"><code>pub fn <a href='#method.as_usize' class='fnname'>as_usize</a>(&amp;self) -&gt; <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.usize.html">usize</a></code><a class='srclink' href='../src/uint/uint.rs.html#539-545' title='goto source code'>[src]</a></h4><div class='docblock'><p>Conversion to usize with overflow checking</p>
<h1 id="panics-2" class="section-header"><a href="#panics-2">Panics</a></h1>
<p>Panics if the number is larger than usize::max_value().</p>
</div><h4 id='method.is_zero' class="method"><code>pub fn <a href='#method.is_zero' class='fnname'>is_zero</a>(&amp;self) -&gt; <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.bool.html">bool</a></code><a class='srclink' href='../src/uint/uint.rs.html#549-553' title='goto source code'>[src]</a></h4><div class='docblock'><p>Whether this is zero.</p>
</div><h4 id='method.bits' class="method"><code>pub fn <a href='#method.bits' class='fnname'>bits</a>(&amp;self) -&gt; <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.usize.html">usize</a></code><a class='srclink' href='../src/uint/uint.rs.html#566-572' title='goto source code'>[src]</a></h4><div class='docblock'><p>Return the least number of bits needed to represent the number</p>
</div><h4 id='method.bit' class="method"><code>pub const fn <a href='#method.bit' class='fnname'>bit</a>(&amp;self, index: <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.usize.html">usize</a>) -&gt; <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.bool.html">bool</a></code><a class='srclink' href='../src/uint/uint.rs.html#580-583' title='goto source code'>[src]</a></h4><div class='docblock'><p>Return if specific bit is set.</p>
<h1 id="panics-3" class="section-header"><a href="#panics-3">Panics</a></h1>
<p>Panics if <code>index</code> exceeds the bit width of the number.</p>
</div><h4 id='method.leading_zeros' class="method"><code>pub fn <a href='#method.leading_zeros' class='fnname'>leading_zeros</a>(&amp;self) -&gt; <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u32.html">u32</a></code><a class='srclink' href='../src/uint/uint.rs.html#586-598' title='goto source code'>[src]</a></h4><div class='docblock'><p>Returns the number of leading zeros in the binary representation of self.</p>
</div><h4 id='method.trailing_zeros' class="method"><code>pub fn <a href='#method.trailing_zeros' class='fnname'>trailing_zeros</a>(&amp;self) -&gt; <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u32.html">u32</a></code><a class='srclink' href='../src/uint/uint.rs.html#601-613' title='goto source code'>[src]</a></h4><div class='docblock'><p>Returns the number of leading zeros in the binary representation of self.</p>
</div><h4 id='method.byte' class="method"><code>pub const fn <a href='#method.byte' class='fnname'>byte</a>(&amp;self, index: <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.usize.html">usize</a>) -&gt; <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u8.html">u8</a></code><a class='srclink' href='../src/uint/uint.rs.html#621-624' title='goto source code'>[src]</a></h4><div class='docblock'><p>Return specific byte.</p>
<h1 id="panics-4" class="section-header"><a href="#panics-4">Panics</a></h1>
<p>Panics if <code>index</code> exceeds the byte width of the number.</p>
</div><h4 id='method.to_big_endian' class="method"><code>pub fn <a href='#method.to_big_endian' class='fnname'>to_big_endian</a>(&amp;self, bytes: <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.slice.html">&amp;mut [</a><a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u8.html">u8</a><a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.slice.html">]</a>)</code><a class='srclink' href='../src/uint/uint.rs.html#628-634' title='goto source code'>[src]</a></h4><div class='docblock'><p>Write to the slice in big-endian format.</p>
</div><h4 id='method.to_little_endian' class="method"><code>pub fn <a href='#method.to_little_endian' class='fnname'>to_little_endian</a>(&amp;self, bytes: <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.slice.html">&amp;mut [</a><a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u8.html">u8</a><a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.slice.html">]</a>)</code><a class='srclink' href='../src/uint/uint.rs.html#638-644' title='goto source code'>[src]</a></h4><div class='docblock'><p>Write to the slice in little-endian format.</p>
</div><h4 id='method.exp10' class="method"><code>pub fn <a href='#method.exp10' class='fnname'>exp10</a>(n: <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.usize.html">usize</a>) -&gt; Self</code><a class='srclink' href='../src/uint/uint.rs.html#653-658' title='goto source code'>[src]</a></h4><div class='docblock'><p>Create <code>10**n</code> as this type.</p>
<h1 id="panics-5" class="section-header"><a href="#panics-5">Panics</a></h1>
<p>Panics if the result overflows the type.</p>
</div><h4 id='method.zero' class="method"><code>pub const fn <a href='#method.zero' class='fnname'>zero</a>() -&gt; Self</code><a class='srclink' href='../src/uint/uint.rs.html#662-664' title='goto source code'>[src]</a></h4><div class='docblock'><p>Zero (additive identity) of this type.</p>
</div><h4 id='method.one' class="method"><code>pub fn <a href='#method.one' class='fnname'>one</a>() -&gt; Self</code><a class='srclink' href='../src/uint/uint.rs.html#668-670' title='goto source code'>[src]</a></h4><div class='docblock'><p>One (multiplicative identity) of this type.</p>
</div><h4 id='method.max_value' class="method"><code>pub fn <a href='#method.max_value' class='fnname'>max_value</a>() -&gt; Self</code><a class='srclink' href='../src/uint/uint.rs.html#674-680' title='goto source code'>[src]</a></h4><div class='docblock'><p>The maximum value which can be inhabited by this type.</p>
</div><h4 id='method.div_mod' class="method"><code>pub fn <a href='#method.div_mod' class='fnname'>div_mod</a>(self, other: Self) -&gt; <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.tuple.html">(</a>Self, Self<a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.tuple.html">)</a></code><a class='srclink' href='../src/uint/uint.rs.html#819-843' title='goto source code'>[src]</a></h4><div class='docblock'><p>Returns a pair <code>(self / other, self % other)</code>.</p>
<h1 id="panics-6" class="section-header"><a href="#panics-6">Panics</a></h1>
<p>Panics if <code>other</code> is zero.</p>
</div><h4 id='method.pow' class="method"><code>pub fn <a href='#method.pow' class='fnname'>pow</a>(self, expon: Self) -&gt; Self</code><a class='srclink' href='../src/uint/uint.rs.html#851-874' title='goto source code'>[src]</a></h4><div class='docblock'><p>Fast exponentiation by squaring
https://en.wikipedia.org/wiki/Exponentiation_by_squaring</p>
<h1 id="panics-7" class="section-header"><a href="#panics-7">Panics</a></h1>
<p>Panics if the result overflows the type.</p>
</div><h4 id='method.overflowing_pow' class="method"><code>pub fn <a href='#method.overflowing_pow' class='fnname'>overflowing_pow</a>(self, expon: Self) -&gt; <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.tuple.html">(</a>Self, <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.bool.html">bool</a><a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.tuple.html">)</a></code><a class='srclink' href='../src/uint/uint.rs.html#877-900' title='goto source code'>[src]</a></h4><div class='docblock'><p>Fast exponentiation by squaring. Returns result and overflow flag.</p>
</div><h4 id='method.checked_pow' class="method"><code>pub fn <a href='#method.checked_pow' class='fnname'>checked_pow</a>(self, expon: <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>) -&gt; <a class="enum" href="https://doc.rust-lang.org/nightly/core/option/enum.Option.html" title="enum core::option::Option">Option</a>&lt;<a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>&gt;</code><a class='srclink' href='../src/uint/uint.rs.html#903-908' title='goto source code'>[src]</a></h4><div class='docblock'><p>Checked exponentiation. Returns <code>None</code> if overflow occurred.</p>
</div><h4 id='method.overflowing_add' class="method"><code>pub fn <a href='#method.overflowing_add' class='fnname'>overflowing_add</a>(self, other: <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>) -&gt; <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.tuple.html">(</a><a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>, <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.bool.html">bool</a><a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.tuple.html">)</a></code><a class='srclink' href='../src/uint/uint.rs.html#912-920' title='goto source code'>[src]</a></h4><div class='docblock'><p>Add with overflow.</p>
</div><h4 id='method.saturating_add' class="method"><code>pub fn <a href='#method.saturating_add' class='fnname'>saturating_add</a>(self, other: <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>) -&gt; <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a class='srclink' href='../src/uint/uint.rs.html#923-928' title='goto source code'>[src]</a></h4><div class='docblock'><p>Addition which saturates at the maximum value (Self::max_value()).</p>
</div><h4 id='method.checked_add' class="method"><code>pub fn <a href='#method.checked_add' class='fnname'>checked_add</a>(self, other: <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>) -&gt; <a class="enum" href="https://doc.rust-lang.org/nightly/core/option/enum.Option.html" title="enum core::option::Option">Option</a>&lt;<a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>&gt;</code><a class='srclink' href='../src/uint/uint.rs.html#931-936' title='goto source code'>[src]</a></h4><div class='docblock'><p>Checked addition. Returns <code>None</code> if overflow occurred.</p>
</div><h4 id='method.overflowing_sub' class="method"><code>pub fn <a href='#method.overflowing_sub' class='fnname'>overflowing_sub</a>(self, other: <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>) -&gt; <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.tuple.html">(</a><a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>, <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.bool.html">bool</a><a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.tuple.html">)</a></code><a class='srclink' href='../src/uint/uint.rs.html#940-948' title='goto source code'>[src]</a></h4><div class='docblock'><p>Subtraction which underflows and returns a flag if it does.</p>
</div><h4 id='method.saturating_sub' class="method"><code>pub fn <a href='#method.saturating_sub' class='fnname'>saturating_sub</a>(self, other: <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>) -&gt; <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a class='srclink' href='../src/uint/uint.rs.html#951-956' title='goto source code'>[src]</a></h4><div class='docblock'><p>Subtraction which saturates at zero.</p>
</div><h4 id='method.checked_sub' class="method"><code>pub fn <a href='#method.checked_sub' class='fnname'>checked_sub</a>(self, other: <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>) -&gt; <a class="enum" href="https://doc.rust-lang.org/nightly/core/option/enum.Option.html" title="enum core::option::Option">Option</a>&lt;<a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>&gt;</code><a class='srclink' href='../src/uint/uint.rs.html#959-964' title='goto source code'>[src]</a></h4><div class='docblock'><p>Checked subtraction. Returns <code>None</code> if overflow occurred.</p>
</div><h4 id='method.overflowing_mul' class="method"><code>pub fn <a href='#method.overflowing_mul' class='fnname'>overflowing_mul</a>(self, other: <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>) -&gt; <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.tuple.html">(</a><a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>, <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.bool.html">bool</a><a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.tuple.html">)</a></code><a class='srclink' href='../src/uint/uint.rs.html#968-970' title='goto source code'>[src]</a></h4><div class='docblock'><p>Multiply with overflow, returning a flag if it does.</p>
</div><h4 id='method.saturating_mul' class="method"><code>pub fn <a href='#method.saturating_mul' class='fnname'>saturating_mul</a>(self, other: <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>) -&gt; <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a class='srclink' href='../src/uint/uint.rs.html#973-978' title='goto source code'>[src]</a></h4><div class='docblock'><p>Multiplication which saturates at the maximum value..</p>
</div><h4 id='method.checked_mul' class="method"><code>pub fn <a href='#method.checked_mul' class='fnname'>checked_mul</a>(self, other: <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>) -&gt; <a class="enum" href="https://doc.rust-lang.org/nightly/core/option/enum.Option.html" title="enum core::option::Option">Option</a>&lt;<a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>&gt;</code><a class='srclink' href='../src/uint/uint.rs.html#981-986' title='goto source code'>[src]</a></h4><div class='docblock'><p>Checked multiplication. Returns <code>None</code> if overflow occurred.</p>
</div><h4 id='method.checked_div' class="method"><code>pub fn <a href='#method.checked_div' class='fnname'>checked_div</a>(self, other: <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>) -&gt; <a class="enum" href="https://doc.rust-lang.org/nightly/core/option/enum.Option.html" title="enum core::option::Option">Option</a>&lt;<a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>&gt;</code><a class='srclink' href='../src/uint/uint.rs.html#989-995' title='goto source code'>[src]</a></h4><div class='docblock'><p>Checked division. Returns <code>None</code> if <code>other == 0</code>.</p>
</div><h4 id='method.checked_rem' class="method"><code>pub fn <a href='#method.checked_rem' class='fnname'>checked_rem</a>(self, other: <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>) -&gt; <a class="enum" href="https://doc.rust-lang.org/nightly/core/option/enum.Option.html" title="enum core::option::Option">Option</a>&lt;<a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>&gt;</code><a class='srclink' href='../src/uint/uint.rs.html#998-1004' title='goto source code'>[src]</a></h4><div class='docblock'><p>Checked modulus. Returns <code>None</code> if <code>other == 0</code>.</p>
</div><h4 id='method.overflowing_neg' class="method"><code>pub fn <a href='#method.overflowing_neg' class='fnname'>overflowing_neg</a>(self) -&gt; <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.tuple.html">(</a><a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>, <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.bool.html">bool</a><a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.tuple.html">)</a></code><a class='srclink' href='../src/uint/uint.rs.html#1007-1013' title='goto source code'>[src]</a></h4><div class='docblock'><p>Negation with overflow.</p>
</div><h4 id='method.checked_neg' class="method"><code>pub fn <a href='#method.checked_neg' class='fnname'>checked_neg</a>(self) -&gt; <a class="enum" href="https://doc.rust-lang.org/nightly/core/option/enum.Option.html" title="enum core::option::Option">Option</a>&lt;<a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>&gt;</code><a class='srclink' href='../src/uint/uint.rs.html#1016-1021' title='goto source code'>[src]</a></h4><div class='docblock'><p>Checked negation. Returns <code>None</code> unless <code>self == 0</code>.</p>
</div><h4 id='method.from_big_endian' class="method"><code>pub fn <a href='#method.from_big_endian' class='fnname'>from_big_endian</a>(slice: <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.slice.html">&amp;[</a><a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u8.html">u8</a><a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.slice.html">]</a>) -&gt; Self</code><a class='srclink' href='../src/uint/uint.rs.html#1125-1138' title='goto source code'>[src]</a></h4><div class='docblock'><p>Converts from big endian representation bytes in memory.</p>
</div><h4 id='method.from_little_endian' class="method"><code>pub fn <a href='#method.from_little_endian' class='fnname'>from_little_endian</a>(slice: <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.slice.html">&amp;[</a><a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u8.html">u8</a><a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.slice.html">]</a>) -&gt; Self</code><a class='srclink' href='../src/uint/uint.rs.html#1141-1154' title='goto source code'>[src]</a></h4><div class='docblock'><p>Converts from little endian representation bytes in memory.</p>
</div></div><h3 id='impl-1' class='impl'><code class='in-band'>impl <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-1' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#388-412' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='method.low_u128' class="method"><code>pub const fn <a href='#method.low_u128' class='fnname'>low_u128</a>(&amp;self) -&gt; <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u128.html">u128</a></code><a class='srclink' href='../src/uint/uint.rs.html#391-394' title='goto source code'>[src]</a></h4><div class='docblock'><p>Low 2 words (u128)</p>
</div><h4 id='method.as_u128' class="method"><code>pub fn <a href='#method.as_u128' class='fnname'>as_u128</a>(&amp;self) -&gt; <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u128.html">u128</a></code><a class='srclink' href='../src/uint/uint.rs.html#402-411' title='goto source code'>[src]</a></h4><div class='docblock'><p>Conversion to u128 with overflow checking</p>
<h1 id="panics-8" class="section-header"><a href="#panics-8">Panics</a></h1>
<p>Panics if the number is larger than 2^128.</p>
</div></div><h2 id='trait-implementations' class='small-section-header'>Trait Implementations<a href='#trait-implementations' class='anchor'></a></h2><div id='trait-implementations-list'><h3 id='impl-Add%3CT%3E' class='impl'><code class='in-band'>impl&lt;T&gt; <a class="trait" href="https://doc.rust-lang.org/nightly/core/ops/arith/trait.Add.html" title="trait core::ops::arith::Add">Add</a>&lt;T&gt; for <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a> <span class="where fmt-newline">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: <a class="trait" href="https://doc.rust-lang.org/nightly/core/convert/trait.Into.html" title="trait core::convert::Into">Into</a>&lt;<a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>&gt;,&nbsp;</span></code><a href='#impl-Add%3CT%3E' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#1228-1236' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='associatedtype.Output-6' class="type"><code>type <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Add.html#associatedtype.Output' class="type">Output</a> = <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code></h4><div class='docblock'><p>The resulting type after applying the <code>+</code> operator.</p>
</div><h4 id='method.add' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Add.html#tymethod.add' class='fnname'>add</a>(self, other: T) -&gt; <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a class='srclink' href='../src/uint/uint.rs.html#1231-1235' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the <code>+</code> operation.</p>
</div></div><h3 id='impl-Add%3CT%3E-1' class='impl'><code class='in-band'>impl&lt;'a, T&gt; <a class="trait" href="https://doc.rust-lang.org/nightly/core/ops/arith/trait.Add.html" title="trait core::ops::arith::Add">Add</a>&lt;T&gt; for &amp;'a <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a> <span class="where fmt-newline">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: <a class="trait" href="https://doc.rust-lang.org/nightly/core/convert/trait.Into.html" title="trait core::convert::Into">Into</a>&lt;<a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>&gt;,&nbsp;</span></code><a href='#impl-Add%3CT%3E-1' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#1238-1244' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='associatedtype.Output-7' class="type"><code>type <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Add.html#associatedtype.Output' class="type">Output</a> = <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code></h4><div class='docblock'><p>The resulting type after applying the <code>+</code> operator.</p>
</div><h4 id='method.add-1' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Add.html#tymethod.add' class='fnname'>add</a>(self, other: T) -&gt; <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a class='srclink' href='../src/uint/uint.rs.html#1241-1243' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the <code>+</code> operation.</p>
</div></div><h3 id='impl-AddAssign%3CU256%3E' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/core/ops/arith/trait.AddAssign.html" title="trait core::ops::arith::AddAssign">AddAssign</a>&lt;<a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>&gt; for <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-AddAssign%3CU256%3E' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#1246-1252' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='method.add_assign' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.AddAssign.html#tymethod.add_assign' class='fnname'>add_assign</a>(&amp;mut self, other: <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>)</code><a class='srclink' href='../src/uint/uint.rs.html#1247-1251' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the <code>+=</code> operation.</p>
</div></div><h3 id='impl-AsRef%3C%5Bu64%5D%3E' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html" title="trait core::convert::AsRef">AsRef</a>&lt;<a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.slice.html">[</a><a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u64.html">u64</a><a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.slice.html">]</a>&gt; for <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-AsRef%3C%5Bu64%5D%3E' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#452-457' title='goto source code'>[src]</a></h3><div class='docblock'><p>Get a reference to the underlying little-endian words.</p>
</div><div class='impl-items'><h4 id='method.as_ref' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html#tymethod.as_ref' class='fnname'>as_ref</a>(&amp;self) -&gt; <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.slice.html">&amp;[</a><a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u64.html">u64</a><a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.slice.html">]</a></code><a class='srclink' href='../src/uint/uint.rs.html#454-456' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the conversion.</p>
</div></div><h3 id='impl-BitAnd%3CU256%3E' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitAnd.html" title="trait core::ops::bit::BitAnd">BitAnd</a>&lt;<a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>&gt; for <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-BitAnd%3CU256%3E' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#1343-1356' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='associatedtype.Output-53' class="type"><code>type <a href='https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitAnd.html#associatedtype.Output' class="type">Output</a> = <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code></h4><div class='docblock'><p>The resulting type after applying the <code>&amp;</code> operator.</p>
</div><h4 id='method.bitand' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitAnd.html#tymethod.bitand' class='fnname'>bitand</a>(self, other: <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>) -&gt; <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a class='srclink' href='../src/uint/uint.rs.html#1347-1355' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the <code>&amp;</code> operation.</p>
</div></div><h3 id='impl-BitOr%3CU256%3E' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitOr.html" title="trait core::ops::bit::BitOr">BitOr</a>&lt;<a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>&gt; for <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-BitOr%3CU256%3E' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#1373-1386' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='associatedtype.Output-54' class="type"><code>type <a href='https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitOr.html#associatedtype.Output' class="type">Output</a> = <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code></h4><div class='docblock'><p>The resulting type after applying the <code>|</code> operator.</p>
</div><h4 id='method.bitor' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitOr.html#tymethod.bitor' class='fnname'>bitor</a>(self, other: <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>) -&gt; <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a class='srclink' href='../src/uint/uint.rs.html#1377-1385' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the <code>|</code> operation.</p>
</div></div><h3 id='impl-BitXor%3CU256%3E' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitXor.html" title="trait core::ops::bit::BitXor">BitXor</a>&lt;<a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>&gt; for <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-BitXor%3CU256%3E' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#1358-1371' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='associatedtype.Output-55' class="type"><code>type <a href='https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitXor.html#associatedtype.Output' class="type">Output</a> = <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code></h4><div class='docblock'><p>The resulting type after applying the <code>^</code> operator.</p>
</div><h4 id='method.bitxor' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitXor.html#tymethod.bitxor' class='fnname'>bitxor</a>(self, other: <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>) -&gt; <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a class='srclink' href='../src/uint/uint.rs.html#1362-1370' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the <code>^</code> operation.</p>
</div></div><h3 id='impl-Clone' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html" title="trait core::clone::Clone">Clone</a> for <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-Clone' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#448' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='method.clone' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone' class='fnname'>clone</a>(&amp;self) -&gt; <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a class='srclink' href='../src/uint/uint.rs.html#448' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Returns a copy of the value. <a href="https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone">Read more</a></p>
</div><h4 id='method.clone_from' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from' class='fnname'>clone_from</a>(&amp;mut self, source: <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.reference.html">&amp;</a>Self)</code><span class='since' title='Stable since Rust version 1.0.0'>1.0.0</span><a class='srclink' href='https://doc.rust-lang.org/nightly/src/core/clone.rs.html#131-133' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs copy-assignment from <code>source</code>. <a href="https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from">Read more</a></p>
</div></div><h3 id='impl-Copy' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html" title="trait core::marker::Copy">Copy</a> for <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-Copy' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#448' title='goto source code'>[src]</a></h3><div class='impl-items'></div><h3 id='impl-Debug' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html" title="trait core::fmt::Debug">Debug</a> for <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-Debug' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#1490-1494' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='method.fmt' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt' class='fnname'>fmt</a>(&amp;self, f: &amp;mut <a class="struct" href="https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html" title="struct core::fmt::Formatter">Formatter</a>) -&gt; <a class="type" href="https://doc.rust-lang.org/nightly/core/fmt/type.Result.html" title="type core::fmt::Result">Result</a></code><a class='srclink' href='../src/uint/uint.rs.html#1491-1493' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Formats the value using the given formatter. <a href="https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt">Read more</a></p>
</div></div><h3 id='impl-Default' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/core/default/trait.Default.html" title="trait core::default::Default">Default</a> for <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-Default' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#1177-1181' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='method.default' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default' class='fnname'>default</a>() -&gt; Self</code><a class='srclink' href='../src/uint/uint.rs.html#1178-1180' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Returns the &quot;default value&quot; for a type. <a href="https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default">Read more</a></p>
</div></div><h3 id='impl-Display' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html" title="trait core::fmt::Display">Display</a> for <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-Display' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#1496-1523' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='method.fmt-1' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html#tymethod.fmt' class='fnname'>fmt</a>(&amp;self, f: &amp;mut <a class="struct" href="https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html" title="struct core::fmt::Formatter">Formatter</a>) -&gt; <a class="type" href="https://doc.rust-lang.org/nightly/core/fmt/type.Result.html" title="type core::fmt::Result">Result</a></code><a class='srclink' href='../src/uint/uint.rs.html#1497-1522' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Formats the value using the given formatter. <a href="https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html#tymethod.fmt">Read more</a></p>
</div></div><h3 id='impl-Div%3CT%3E' class='impl'><code class='in-band'>impl&lt;T&gt; <a class="trait" href="https://doc.rust-lang.org/nightly/core/ops/arith/trait.Div.html" title="trait core::ops::arith::Div">Div</a>&lt;T&gt; for <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a> <span class="where fmt-newline">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: <a class="trait" href="https://doc.rust-lang.org/nightly/core/convert/trait.Into.html" title="trait core::convert::Into">Into</a>&lt;<a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>&gt;,&nbsp;</span></code><a href='#impl-Div%3CT%3E' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#1294-1301' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='associatedtype.Output' class="type"><code>type <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Div.html#associatedtype.Output' class="type">Output</a> = <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code></h4><div class='docblock'><p>The resulting type after applying the <code>/</code> operator.</p>
</div><h4 id='method.div' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Div.html#tymethod.div' class='fnname'>div</a>(self, other: T) -&gt; <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a class='srclink' href='../src/uint/uint.rs.html#1297-1300' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the <code>/</code> operation.</p>
</div></div><h3 id='impl-Div%3CT%3E-1' class='impl'><code class='in-band'>impl&lt;'a, T&gt; <a class="trait" href="https://doc.rust-lang.org/nightly/core/ops/arith/trait.Div.html" title="trait core::ops::arith::Div">Div</a>&lt;T&gt; for &amp;'a <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a> <span class="where fmt-newline">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: <a class="trait" href="https://doc.rust-lang.org/nightly/core/convert/trait.Into.html" title="trait core::convert::Into">Into</a>&lt;<a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>&gt;,&nbsp;</span></code><a href='#impl-Div%3CT%3E-1' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#1303-1309' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='associatedtype.Output-1' class="type"><code>type <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Div.html#associatedtype.Output' class="type">Output</a> = <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code></h4><div class='docblock'><p>The resulting type after applying the <code>/</code> operator.</p>
</div><h4 id='method.div-1' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Div.html#tymethod.div' class='fnname'>div</a>(self, other: T) -&gt; <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a class='srclink' href='../src/uint/uint.rs.html#1306-1308' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the <code>/</code> operation.</p>
</div></div><h3 id='impl-DivAssign%3CT%3E' class='impl'><code class='in-band'>impl&lt;T&gt; <a class="trait" href="https://doc.rust-lang.org/nightly/core/ops/arith/trait.DivAssign.html" title="trait core::ops::arith::DivAssign">DivAssign</a>&lt;T&gt; for <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a> <span class="where fmt-newline">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: <a class="trait" href="https://doc.rust-lang.org/nightly/core/convert/trait.Into.html" title="trait core::convert::Into">Into</a>&lt;<a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>&gt;,&nbsp;</span></code><a href='#impl-DivAssign%3CT%3E' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#1311-1315' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='method.div_assign' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.DivAssign.html#tymethod.div_assign' class='fnname'>div_assign</a>(&amp;mut self, other: T)</code><a class='srclink' href='../src/uint/uint.rs.html#1312-1314' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the <code>/=</code> operation.</p>
</div></div><h3 id='impl-Eq' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html" title="trait core::cmp::Eq">Eq</a> for <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-Eq' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#448' title='goto source code'>[src]</a></h3><div class='impl-items'></div><h3 id='impl-From%3C%26%27a%20%5Bu8%3B%2032%5D%3E' class='impl'><code class='in-band'>impl&lt;'a&gt; <a class="trait" href="https://doc.rust-lang.org/nightly/core/convert/trait.From.html" title="trait core::convert::From">From</a>&lt;&amp;'a <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.array.html">[</a><a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u8.html">u8</a><a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.array.html">; 32]</a>&gt; for <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-From%3C%26%27a%20%5Bu8%3B%2032%5D%3E' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#1171-1175' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='method.from-3' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from' class='fnname'>from</a>(bytes: &amp;<a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.array.html">[</a><a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u8.html">u8</a><a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.array.html">; 32]</a>) -&gt; Self</code><a class='srclink' href='../src/uint/uint.rs.html#1172-1174' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the conversion.</p>
</div></div><h3 id='impl-From%3C%26%27a%20%5Bu8%5D%3E' class='impl'><code class='in-band'>impl&lt;'a&gt; <a class="trait" href="https://doc.rust-lang.org/nightly/core/convert/trait.From.html" title="trait core::convert::From">From</a>&lt;<a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.slice.html">&amp;'a [</a><a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u8.html">u8</a><a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.slice.html">]</a>&gt; for <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-From%3C%26%27a%20%5Bu8%5D%3E' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#1211-1215' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='method.from-14' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from' class='fnname'>from</a>(bytes: <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.slice.html">&amp;[</a><a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u8.html">u8</a><a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.slice.html">]</a>) -&gt; <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a class='srclink' href='../src/uint/uint.rs.html#1212-1214' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the conversion.</p>
</div></div><h3 id='impl-From%3C%26%27a%20U256%3E' class='impl'><code class='in-band'>impl&lt;'a&gt; <a class="trait" href="https://doc.rust-lang.org/nightly/core/convert/trait.From.html" title="trait core::convert::From">From</a>&lt;&amp;'a <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>&gt; for <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-From%3C%26%27a%20U256%3E' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#459-463' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='method.from' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from' class='fnname'>from</a>(x: &amp;'a <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>) -&gt; <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a class='srclink' href='../src/uint/uint.rs.html#460-462' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the conversion.</p>
</div></div><h3 id='impl-From%3C%5Bu8%3B%2032%5D%3E' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/core/convert/trait.From.html" title="trait core::convert::From">From</a>&lt;<a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.array.html">[</a><a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u8.html">u8</a><a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.array.html">; 32]</a>&gt; for <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-From%3C%5Bu8%3B%2032%5D%3E' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#1165-1169' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='method.from-2' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from' class='fnname'>from</a>(bytes: <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.array.html">[</a><a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u8.html">u8</a><a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.array.html">; 32]</a>) -&gt; Self</code><a class='srclink' href='../src/uint/uint.rs.html#1166-1168' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the conversion.</p>
</div></div><h3 id='impl-From%3CU256%3E' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/core/convert/trait.From.html" title="trait core::convert::From">From</a>&lt;<a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>&gt; for <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.array.html">[</a><a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u8.html">u8</a><a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.array.html">; 32]</a></code><a href='#impl-From%3CU256%3E' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#1157-1163' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='method.from-1' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from' class='fnname'>from</a>(number: <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>) -&gt; Self</code><a class='srclink' href='../src/uint/uint.rs.html#1158-1162' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the conversion.</p>
</div></div><h3 id='impl-From%3Ci128%3E' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/core/convert/trait.From.html" title="trait core::convert::From">From</a>&lt;<a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.i128.html">i128</a>&gt; for <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-From%3Ci128%3E' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#379-386' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='method.from-16' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from' class='fnname'>from</a>(value: <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.i128.html">i128</a>) -&gt; <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a class='srclink' href='../src/uint/uint.rs.html#380-385' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the conversion.</p>
</div></div><h3 id='impl-From%3Ci16%3E' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/core/convert/trait.From.html" title="trait core::convert::From">From</a>&lt;<a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.i16.html">i16</a>&gt; for <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-From%3Ci16%3E' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#62-66' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='method.from-11' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from' class='fnname'>from</a>(value: <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.i16.html">i16</a>) -&gt; <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a class='srclink' href='../src/uint/uint.rs.html#63-65' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the conversion.</p>
</div></div><h3 id='impl-From%3Ci32%3E' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/core/convert/trait.From.html" title="trait core::convert::From">From</a>&lt;<a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.i32.html">i32</a>&gt; for <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-From%3Ci32%3E' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#62-66' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='method.from-12' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from' class='fnname'>from</a>(value: <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.i32.html">i32</a>) -&gt; <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a class='srclink' href='../src/uint/uint.rs.html#63-65' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the conversion.</p>
</div></div><h3 id='impl-From%3Ci64%3E' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/core/convert/trait.From.html" title="trait core::convert::From">From</a>&lt;<a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.i64.html">i64</a>&gt; for <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-From%3Ci64%3E' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#1196-1203' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='method.from-9' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from' class='fnname'>from</a>(value: <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.i64.html">i64</a>) -&gt; <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a class='srclink' href='../src/uint/uint.rs.html#1197-1202' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the conversion.</p>
</div></div><h3 id='impl-From%3Ci8%3E' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/core/convert/trait.From.html" title="trait core::convert::From">From</a>&lt;<a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.i8.html">i8</a>&gt; for <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-From%3Ci8%3E' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#62-66' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='method.from-10' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from' class='fnname'>from</a>(value: <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.i8.html">i8</a>) -&gt; <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a class='srclink' href='../src/uint/uint.rs.html#63-65' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the conversion.</p>
</div></div><h3 id='impl-From%3Cisize%3E' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/core/convert/trait.From.html" title="trait core::convert::From">From</a>&lt;<a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.isize.html">isize</a>&gt; for <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-From%3Cisize%3E' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#62-66' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='method.from-13' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from' class='fnname'>from</a>(value: <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.isize.html">isize</a>) -&gt; <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a class='srclink' href='../src/uint/uint.rs.html#63-65' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the conversion.</p>
</div></div><h3 id='impl-From%3Cu128%3E' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/core/convert/trait.From.html" title="trait core::convert::From">From</a>&lt;<a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u128.html">u128</a>&gt; for <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-From%3Cu128%3E' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#370-377' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='method.from-15' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from' class='fnname'>from</a>(value: <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u128.html">u128</a>) -&gt; <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a class='srclink' href='../src/uint/uint.rs.html#371-376' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the conversion.</p>
</div></div><h3 id='impl-From%3Cu16%3E' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/core/convert/trait.From.html" title="trait core::convert::From">From</a>&lt;<a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u16.html">u16</a>&gt; for <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-From%3Cu16%3E' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#62-66' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='method.from-6' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from' class='fnname'>from</a>(value: <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u16.html">u16</a>) -&gt; <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a class='srclink' href='../src/uint/uint.rs.html#63-65' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the conversion.</p>
</div></div><h3 id='impl-From%3Cu32%3E' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/core/convert/trait.From.html" title="trait core::convert::From">From</a>&lt;<a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u32.html">u32</a>&gt; for <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-From%3Cu32%3E' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#62-66' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='method.from-7' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from' class='fnname'>from</a>(value: <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u32.html">u32</a>) -&gt; <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a class='srclink' href='../src/uint/uint.rs.html#63-65' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the conversion.</p>
</div></div><h3 id='impl-From%3Cu64%3E' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/core/convert/trait.From.html" title="trait core::convert::From">From</a>&lt;<a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u64.html">u64</a>&gt; for <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-From%3Cu64%3E' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#1183-1189' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='method.from-4' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from' class='fnname'>from</a>(value: <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u64.html">u64</a>) -&gt; <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a class='srclink' href='../src/uint/uint.rs.html#1184-1188' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the conversion.</p>
</div></div><h3 id='impl-From%3Cu8%3E' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/core/convert/trait.From.html" title="trait core::convert::From">From</a>&lt;<a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u8.html">u8</a>&gt; for <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-From%3Cu8%3E' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#62-66' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='method.from-5' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from' class='fnname'>from</a>(value: <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u8.html">u8</a>) -&gt; <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a class='srclink' href='../src/uint/uint.rs.html#63-65' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the conversion.</p>
</div></div><h3 id='impl-From%3Cusize%3E' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/core/convert/trait.From.html" title="trait core::convert::From">From</a>&lt;<a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.usize.html">usize</a>&gt; for <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-From%3Cusize%3E' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#62-66' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='method.from-8' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from' class='fnname'>from</a>(value: <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.usize.html">usize</a>) -&gt; <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a class='srclink' href='../src/uint/uint.rs.html#63-65' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the conversion.</p>
</div></div><h3 id='impl-Hash' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html" title="trait core::hash::Hash">Hash</a> for <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-Hash' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#448' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='method.hash' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash' class='fnname'>hash</a>&lt;__H:&nbsp;<a class="trait" href="https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html" title="trait core::hash::Hasher">Hasher</a>&gt;(&amp;self, state: <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.reference.html">&amp;mut </a>__H)</code><a class='srclink' href='../src/uint/uint.rs.html#448' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Feeds this value into the given [<code>Hasher</code>]. <a href="https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash">Read more</a></p>
</div><h4 id='method.hash_slice' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice' class='fnname'>hash_slice</a>&lt;H&gt;(data: <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.slice.html">&amp;[Self]</a>, state: <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.reference.html">&amp;mut </a>H) <span class="where fmt-newline">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: <a class="trait" href="https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html" title="trait core::hash::Hasher">Hasher</a>,&nbsp;</span></code><span class='since' title='Stable since Rust version 1.3.0'>1.3.0</span><a class='srclink' href='https://doc.rust-lang.org/nightly/src/core/hash/mod.rs.html#192-199' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Feeds a slice of this type into the given [<code>Hasher</code>]. <a href="https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice">Read more</a></p>
</div></div><h3 id='impl-LowerHex' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/core/fmt/trait.LowerHex.html" title="trait core::fmt::LowerHex">LowerHex</a> for <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-LowerHex' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#1525-1551' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='method.fmt-2' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/fmt/trait.LowerHex.html#tymethod.fmt' class='fnname'>fmt</a>(&amp;self, f: &amp;mut <a class="struct" href="https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html" title="struct core::fmt::Formatter">Formatter</a>) -&gt; <a class="type" href="https://doc.rust-lang.org/nightly/core/fmt/type.Result.html" title="type core::fmt::Result">Result</a></code><a class='srclink' href='../src/uint/uint.rs.html#1526-1550' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Formats the value using the given formatter.</p>
</div></div><h3 id='impl-Mul%3C%26%27a%20U256%3E' class='impl'><code class='in-band'>impl&lt;'a&gt; <a class="trait" href="https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html" title="trait core::ops::arith::Mul">Mul</a>&lt;&amp;'a <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>&gt; for <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-Mul%3C%26%27a%20U256%3E' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#266-275' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='associatedtype.Output-9' class="type"><code>type <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#associatedtype.Output' class="type">Output</a> = <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code></h4><div class='docblock'><p>The resulting type after applying the <code>*</code> operator.</p>
</div><h4 id='method.mul-1' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#tymethod.mul' class='fnname'>mul</a>(self, other: &amp;'a <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>) -&gt; <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a class='srclink' href='../src/uint/uint.rs.html#269-274' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the <code>*</code> operation.</p>
</div></div><h3 id='impl-Mul%3C%26%27a%20U256%3E-1' class='impl'><code class='in-band'>impl&lt;'a&gt; <a class="trait" href="https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html" title="trait core::ops::arith::Mul">Mul</a>&lt;&amp;'a <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>&gt; for &amp;'a <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-Mul%3C%26%27a%20U256%3E-1' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#277-286' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='associatedtype.Output-10' class="type"><code>type <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#associatedtype.Output' class="type">Output</a> = <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code></h4><div class='docblock'><p>The resulting type after applying the <code>*</code> operator.</p>
</div><h4 id='method.mul-2' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#tymethod.mul' class='fnname'>mul</a>(self, other: &amp;'a <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>) -&gt; <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a class='srclink' href='../src/uint/uint.rs.html#280-285' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the <code>*</code> operation.</p>
</div></div><h3 id='impl-Mul%3C%26%27a%20i16%3E' class='impl'><code class='in-band'>impl&lt;'a&gt; <a class="trait" href="https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html" title="trait core::ops::arith::Mul">Mul</a>&lt;&amp;'a <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.i16.html">i16</a>&gt; for <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-Mul%3C%26%27a%20i16%3E' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#322-330' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='associatedtype.Output-37' class="type"><code>type <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#associatedtype.Output' class="type">Output</a> = <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code></h4><div class='docblock'><p>The resulting type after applying the <code>*</code> operator.</p>
</div><h4 id='method.mul-29' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#tymethod.mul' class='fnname'>mul</a>(self, other: &amp;'a <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.i16.html">i16</a>) -&gt; <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a class='srclink' href='../src/uint/uint.rs.html#325-329' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the <code>*</code> operation.</p>
</div></div><h3 id='impl-Mul%3C%26%27a%20i16%3E-1' class='impl'><code class='in-band'>impl&lt;'a&gt; <a class="trait" href="https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html" title="trait core::ops::arith::Mul">Mul</a>&lt;&amp;'a <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.i16.html">i16</a>&gt; for &amp;'a <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-Mul%3C%26%27a%20i16%3E-1' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#332-340' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='associatedtype.Output-38' class="type"><code>type <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#associatedtype.Output' class="type">Output</a> = <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code></h4><div class='docblock'><p>The resulting type after applying the <code>*</code> operator.</p>
</div><h4 id='method.mul-30' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#tymethod.mul' class='fnname'>mul</a>(self, other: &amp;'a <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.i16.html">i16</a>) -&gt; <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a class='srclink' href='../src/uint/uint.rs.html#335-339' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the <code>*</code> operation.</p>
</div></div><h3 id='impl-Mul%3C%26%27a%20i32%3E' class='impl'><code class='in-band'>impl&lt;'a&gt; <a class="trait" href="https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html" title="trait core::ops::arith::Mul">Mul</a>&lt;&amp;'a <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.i32.html">i32</a>&gt; for <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-Mul%3C%26%27a%20i32%3E' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#322-330' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='associatedtype.Output-41' class="type"><code>type <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#associatedtype.Output' class="type">Output</a> = <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code></h4><div class='docblock'><p>The resulting type after applying the <code>*</code> operator.</p>
</div><h4 id='method.mul-33' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#tymethod.mul' class='fnname'>mul</a>(self, other: &amp;'a <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.i32.html">i32</a>) -&gt; <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a class='srclink' href='../src/uint/uint.rs.html#325-329' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the <code>*</code> operation.</p>
</div></div><h3 id='impl-Mul%3C%26%27a%20i32%3E-1' class='impl'><code class='in-band'>impl&lt;'a&gt; <a class="trait" href="https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html" title="trait core::ops::arith::Mul">Mul</a>&lt;&amp;'a <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.i32.html">i32</a>&gt; for &amp;'a <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-Mul%3C%26%27a%20i32%3E-1' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#332-340' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='associatedtype.Output-42' class="type"><code>type <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#associatedtype.Output' class="type">Output</a> = <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code></h4><div class='docblock'><p>The resulting type after applying the <code>*</code> operator.</p>
</div><h4 id='method.mul-34' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#tymethod.mul' class='fnname'>mul</a>(self, other: &amp;'a <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.i32.html">i32</a>) -&gt; <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a class='srclink' href='../src/uint/uint.rs.html#335-339' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the <code>*</code> operation.</p>
</div></div><h3 id='impl-Mul%3C%26%27a%20i64%3E' class='impl'><code class='in-band'>impl&lt;'a&gt; <a class="trait" href="https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html" title="trait core::ops::arith::Mul">Mul</a>&lt;&amp;'a <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.i64.html">i64</a>&gt; for <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-Mul%3C%26%27a%20i64%3E' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#322-330' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='associatedtype.Output-45' class="type"><code>type <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#associatedtype.Output' class="type">Output</a> = <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code></h4><div class='docblock'><p>The resulting type after applying the <code>*</code> operator.</p>
</div><h4 id='method.mul-37' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#tymethod.mul' class='fnname'>mul</a>(self, other: &amp;'a <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.i64.html">i64</a>) -&gt; <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a class='srclink' href='../src/uint/uint.rs.html#325-329' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the <code>*</code> operation.</p>
</div></div><h3 id='impl-Mul%3C%26%27a%20i64%3E-1' class='impl'><code class='in-band'>impl&lt;'a&gt; <a class="trait" href="https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html" title="trait core::ops::arith::Mul">Mul</a>&lt;&amp;'a <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.i64.html">i64</a>&gt; for &amp;'a <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-Mul%3C%26%27a%20i64%3E-1' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#332-340' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='associatedtype.Output-46' class="type"><code>type <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#associatedtype.Output' class="type">Output</a> = <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code></h4><div class='docblock'><p>The resulting type after applying the <code>*</code> operator.</p>
</div><h4 id='method.mul-38' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#tymethod.mul' class='fnname'>mul</a>(self, other: &amp;'a <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.i64.html">i64</a>) -&gt; <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a class='srclink' href='../src/uint/uint.rs.html#335-339' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the <code>*</code> operation.</p>
</div></div><h3 id='impl-Mul%3C%26%27a%20i8%3E' class='impl'><code class='in-band'>impl&lt;'a&gt; <a class="trait" href="https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html" title="trait core::ops::arith::Mul">Mul</a>&lt;&amp;'a <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.i8.html">i8</a>&gt; for <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-Mul%3C%26%27a%20i8%3E' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#322-330' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='associatedtype.Output-33' class="type"><code>type <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#associatedtype.Output' class="type">Output</a> = <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code></h4><div class='docblock'><p>The resulting type after applying the <code>*</code> operator.</p>
</div><h4 id='method.mul-25' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#tymethod.mul' class='fnname'>mul</a>(self, other: &amp;'a <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.i8.html">i8</a>) -&gt; <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a class='srclink' href='../src/uint/uint.rs.html#325-329' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the <code>*</code> operation.</p>
</div></div><h3 id='impl-Mul%3C%26%27a%20i8%3E-1' class='impl'><code class='in-band'>impl&lt;'a&gt; <a class="trait" href="https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html" title="trait core::ops::arith::Mul">Mul</a>&lt;&amp;'a <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.i8.html">i8</a>&gt; for &amp;'a <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-Mul%3C%26%27a%20i8%3E-1' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#332-340' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='associatedtype.Output-34' class="type"><code>type <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#associatedtype.Output' class="type">Output</a> = <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code></h4><div class='docblock'><p>The resulting type after applying the <code>*</code> operator.</p>
</div><h4 id='method.mul-26' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#tymethod.mul' class='fnname'>mul</a>(self, other: &amp;'a <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.i8.html">i8</a>) -&gt; <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a class='srclink' href='../src/uint/uint.rs.html#335-339' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the <code>*</code> operation.</p>
</div></div><h3 id='impl-Mul%3C%26%27a%20isize%3E' class='impl'><code class='in-band'>impl&lt;'a&gt; <a class="trait" href="https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html" title="trait core::ops::arith::Mul">Mul</a>&lt;&amp;'a <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.isize.html">isize</a>&gt; for <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-Mul%3C%26%27a%20isize%3E' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#322-330' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='associatedtype.Output-49' class="type"><code>type <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#associatedtype.Output' class="type">Output</a> = <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code></h4><div class='docblock'><p>The resulting type after applying the <code>*</code> operator.</p>
</div><h4 id='method.mul-41' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#tymethod.mul' class='fnname'>mul</a>(self, other: &amp;'a <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.isize.html">isize</a>) -&gt; <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a class='srclink' href='../src/uint/uint.rs.html#325-329' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the <code>*</code> operation.</p>
</div></div><h3 id='impl-Mul%3C%26%27a%20isize%3E-1' class='impl'><code class='in-band'>impl&lt;'a&gt; <a class="trait" href="https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html" title="trait core::ops::arith::Mul">Mul</a>&lt;&amp;'a <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.isize.html">isize</a>&gt; for &amp;'a <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-Mul%3C%26%27a%20isize%3E-1' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#332-340' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='associatedtype.Output-50' class="type"><code>type <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#associatedtype.Output' class="type">Output</a> = <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code></h4><div class='docblock'><p>The resulting type after applying the <code>*</code> operator.</p>
</div><h4 id='method.mul-42' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#tymethod.mul' class='fnname'>mul</a>(self, other: &amp;'a <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.isize.html">isize</a>) -&gt; <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a class='srclink' href='../src/uint/uint.rs.html#335-339' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the <code>*</code> operation.</p>
</div></div><h3 id='impl-Mul%3C%26%27a%20u16%3E' class='impl'><code class='in-band'>impl&lt;'a&gt; <a class="trait" href="https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html" title="trait core::ops::arith::Mul">Mul</a>&lt;&amp;'a <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u16.html">u16</a>&gt; for <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-Mul%3C%26%27a%20u16%3E' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#322-330' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='associatedtype.Output-17' class="type"><code>type <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#associatedtype.Output' class="type">Output</a> = <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code></h4><div class='docblock'><p>The resulting type after applying the <code>*</code> operator.</p>
</div><h4 id='method.mul-9' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#tymethod.mul' class='fnname'>mul</a>(self, other: &amp;'a <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u16.html">u16</a>) -&gt; <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a class='srclink' href='../src/uint/uint.rs.html#325-329' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the <code>*</code> operation.</p>
</div></div><h3 id='impl-Mul%3C%26%27a%20u16%3E-1' class='impl'><code class='in-band'>impl&lt;'a&gt; <a class="trait" href="https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html" title="trait core::ops::arith::Mul">Mul</a>&lt;&amp;'a <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u16.html">u16</a>&gt; for &amp;'a <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-Mul%3C%26%27a%20u16%3E-1' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#332-340' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='associatedtype.Output-18' class="type"><code>type <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#associatedtype.Output' class="type">Output</a> = <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code></h4><div class='docblock'><p>The resulting type after applying the <code>*</code> operator.</p>
</div><h4 id='method.mul-10' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#tymethod.mul' class='fnname'>mul</a>(self, other: &amp;'a <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u16.html">u16</a>) -&gt; <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a class='srclink' href='../src/uint/uint.rs.html#335-339' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the <code>*</code> operation.</p>
</div></div><h3 id='impl-Mul%3C%26%27a%20u32%3E' class='impl'><code class='in-band'>impl&lt;'a&gt; <a class="trait" href="https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html" title="trait core::ops::arith::Mul">Mul</a>&lt;&amp;'a <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u32.html">u32</a>&gt; for <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-Mul%3C%26%27a%20u32%3E' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#322-330' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='associatedtype.Output-21' class="type"><code>type <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#associatedtype.Output' class="type">Output</a> = <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code></h4><div class='docblock'><p>The resulting type after applying the <code>*</code> operator.</p>
</div><h4 id='method.mul-13' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#tymethod.mul' class='fnname'>mul</a>(self, other: &amp;'a <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u32.html">u32</a>) -&gt; <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a class='srclink' href='../src/uint/uint.rs.html#325-329' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the <code>*</code> operation.</p>
</div></div><h3 id='impl-Mul%3C%26%27a%20u32%3E-1' class='impl'><code class='in-band'>impl&lt;'a&gt; <a class="trait" href="https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html" title="trait core::ops::arith::Mul">Mul</a>&lt;&amp;'a <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u32.html">u32</a>&gt; for &amp;'a <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-Mul%3C%26%27a%20u32%3E-1' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#332-340' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='associatedtype.Output-22' class="type"><code>type <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#associatedtype.Output' class="type">Output</a> = <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code></h4><div class='docblock'><p>The resulting type after applying the <code>*</code> operator.</p>
</div><h4 id='method.mul-14' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#tymethod.mul' class='fnname'>mul</a>(self, other: &amp;'a <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u32.html">u32</a>) -&gt; <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a class='srclink' href='../src/uint/uint.rs.html#335-339' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the <code>*</code> operation.</p>
</div></div><h3 id='impl-Mul%3C%26%27a%20u64%3E' class='impl'><code class='in-band'>impl&lt;'a&gt; <a class="trait" href="https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html" title="trait core::ops::arith::Mul">Mul</a>&lt;&amp;'a <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u64.html">u64</a>&gt; for <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-Mul%3C%26%27a%20u64%3E' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#322-330' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='associatedtype.Output-25' class="type"><code>type <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#associatedtype.Output' class="type">Output</a> = <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code></h4><div class='docblock'><p>The resulting type after applying the <code>*</code> operator.</p>
</div><h4 id='method.mul-17' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#tymethod.mul' class='fnname'>mul</a>(self, other: &amp;'a <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u64.html">u64</a>) -&gt; <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a class='srclink' href='../src/uint/uint.rs.html#325-329' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the <code>*</code> operation.</p>
</div></div><h3 id='impl-Mul%3C%26%27a%20u64%3E-1' class='impl'><code class='in-band'>impl&lt;'a&gt; <a class="trait" href="https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html" title="trait core::ops::arith::Mul">Mul</a>&lt;&amp;'a <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u64.html">u64</a>&gt; for &amp;'a <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-Mul%3C%26%27a%20u64%3E-1' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#332-340' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='associatedtype.Output-26' class="type"><code>type <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#associatedtype.Output' class="type">Output</a> = <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code></h4><div class='docblock'><p>The resulting type after applying the <code>*</code> operator.</p>
</div><h4 id='method.mul-18' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#tymethod.mul' class='fnname'>mul</a>(self, other: &amp;'a <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u64.html">u64</a>) -&gt; <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a class='srclink' href='../src/uint/uint.rs.html#335-339' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the <code>*</code> operation.</p>
</div></div><h3 id='impl-Mul%3C%26%27a%20u8%3E' class='impl'><code class='in-band'>impl&lt;'a&gt; <a class="trait" href="https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html" title="trait core::ops::arith::Mul">Mul</a>&lt;&amp;'a <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u8.html">u8</a>&gt; for <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-Mul%3C%26%27a%20u8%3E' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#322-330' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='associatedtype.Output-13' class="type"><code>type <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#associatedtype.Output' class="type">Output</a> = <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code></h4><div class='docblock'><p>The resulting type after applying the <code>*</code> operator.</p>
</div><h4 id='method.mul-5' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#tymethod.mul' class='fnname'>mul</a>(self, other: &amp;'a <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u8.html">u8</a>) -&gt; <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a class='srclink' href='../src/uint/uint.rs.html#325-329' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the <code>*</code> operation.</p>
</div></div><h3 id='impl-Mul%3C%26%27a%20u8%3E-1' class='impl'><code class='in-band'>impl&lt;'a&gt; <a class="trait" href="https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html" title="trait core::ops::arith::Mul">Mul</a>&lt;&amp;'a <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u8.html">u8</a>&gt; for &amp;'a <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-Mul%3C%26%27a%20u8%3E-1' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#332-340' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='associatedtype.Output-14' class="type"><code>type <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#associatedtype.Output' class="type">Output</a> = <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code></h4><div class='docblock'><p>The resulting type after applying the <code>*</code> operator.</p>
</div><h4 id='method.mul-6' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#tymethod.mul' class='fnname'>mul</a>(self, other: &amp;'a <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u8.html">u8</a>) -&gt; <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a class='srclink' href='../src/uint/uint.rs.html#335-339' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the <code>*</code> operation.</p>
</div></div><h3 id='impl-Mul%3C%26%27a%20usize%3E' class='impl'><code class='in-band'>impl&lt;'a&gt; <a class="trait" href="https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html" title="trait core::ops::arith::Mul">Mul</a>&lt;&amp;'a <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.usize.html">usize</a>&gt; for <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-Mul%3C%26%27a%20usize%3E' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#322-330' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='associatedtype.Output-29' class="type"><code>type <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#associatedtype.Output' class="type">Output</a> = <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code></h4><div class='docblock'><p>The resulting type after applying the <code>*</code> operator.</p>
</div><h4 id='method.mul-21' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#tymethod.mul' class='fnname'>mul</a>(self, other: &amp;'a <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.usize.html">usize</a>) -&gt; <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a class='srclink' href='../src/uint/uint.rs.html#325-329' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the <code>*</code> operation.</p>
</div></div><h3 id='impl-Mul%3C%26%27a%20usize%3E-1' class='impl'><code class='in-band'>impl&lt;'a&gt; <a class="trait" href="https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html" title="trait core::ops::arith::Mul">Mul</a>&lt;&amp;'a <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.usize.html">usize</a>&gt; for &amp;'a <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-Mul%3C%26%27a%20usize%3E-1' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#332-340' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='associatedtype.Output-30' class="type"><code>type <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#associatedtype.Output' class="type">Output</a> = <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code></h4><div class='docblock'><p>The resulting type after applying the <code>*</code> operator.</p>
</div><h4 id='method.mul-22' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#tymethod.mul' class='fnname'>mul</a>(self, other: &amp;'a <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.usize.html">usize</a>) -&gt; <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a class='srclink' href='../src/uint/uint.rs.html#335-339' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the <code>*</code> operation.</p>
</div></div><h3 id='impl-Mul%3CU256%3E' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html" title="trait core::ops::arith::Mul">Mul</a>&lt;<a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>&gt; for <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-Mul%3CU256%3E' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#255-264' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='associatedtype.Output-8' class="type"><code>type <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#associatedtype.Output' class="type">Output</a> = <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code></h4><div class='docblock'><p>The resulting type after applying the <code>*</code> operator.</p>
</div><h4 id='method.mul' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#tymethod.mul' class='fnname'>mul</a>(self, other: <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>) -&gt; <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a class='srclink' href='../src/uint/uint.rs.html#258-263' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the <code>*</code> operation.</p>
</div></div><h3 id='impl-Mul%3CU256%3E-1' class='impl'><code class='in-band'>impl&lt;'a&gt; <a class="trait" href="https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html" title="trait core::ops::arith::Mul">Mul</a>&lt;<a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>&gt; for &amp;'a <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-Mul%3CU256%3E-1' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#288-297' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='associatedtype.Output-11' class="type"><code>type <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#associatedtype.Output' class="type">Output</a> = <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code></h4><div class='docblock'><p>The resulting type after applying the <code>*</code> operator.</p>
</div><h4 id='method.mul-3' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#tymethod.mul' class='fnname'>mul</a>(self, other: <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>) -&gt; <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a class='srclink' href='../src/uint/uint.rs.html#291-296' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the <code>*</code> operation.</p>
</div></div><h3 id='impl-Mul%3Ci16%3E' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html" title="trait core::ops::arith::Mul">Mul</a>&lt;<a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.i16.html">i16</a>&gt; for <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-Mul%3Ci16%3E' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#312-320' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='associatedtype.Output-36' class="type"><code>type <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#associatedtype.Output' class="type">Output</a> = <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code></h4><div class='docblock'><p>The resulting type after applying the <code>*</code> operator.</p>
</div><h4 id='method.mul-28' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#tymethod.mul' class='fnname'>mul</a>(self, other: <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.i16.html">i16</a>) -&gt; <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a class='srclink' href='../src/uint/uint.rs.html#315-319' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the <code>*</code> operation.</p>
</div></div><h3 id='impl-Mul%3Ci16%3E-1' class='impl'><code class='in-band'>impl&lt;'a&gt; <a class="trait" href="https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html" title="trait core::ops::arith::Mul">Mul</a>&lt;<a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.i16.html">i16</a>&gt; for &amp;'a <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-Mul%3Ci16%3E-1' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#342-350' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='associatedtype.Output-39' class="type"><code>type <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#associatedtype.Output' class="type">Output</a> = <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code></h4><div class='docblock'><p>The resulting type after applying the <code>*</code> operator.</p>
</div><h4 id='method.mul-31' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#tymethod.mul' class='fnname'>mul</a>(self, other: <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.i16.html">i16</a>) -&gt; <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a class='srclink' href='../src/uint/uint.rs.html#345-349' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the <code>*</code> operation.</p>
</div></div><h3 id='impl-Mul%3Ci32%3E' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html" title="trait core::ops::arith::Mul">Mul</a>&lt;<a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.i32.html">i32</a>&gt; for <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-Mul%3Ci32%3E' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#312-320' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='associatedtype.Output-40' class="type"><code>type <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#associatedtype.Output' class="type">Output</a> = <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code></h4><div class='docblock'><p>The resulting type after applying the <code>*</code> operator.</p>
</div><h4 id='method.mul-32' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#tymethod.mul' class='fnname'>mul</a>(self, other: <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.i32.html">i32</a>) -&gt; <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a class='srclink' href='../src/uint/uint.rs.html#315-319' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the <code>*</code> operation.</p>
</div></div><h3 id='impl-Mul%3Ci32%3E-1' class='impl'><code class='in-band'>impl&lt;'a&gt; <a class="trait" href="https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html" title="trait core::ops::arith::Mul">Mul</a>&lt;<a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.i32.html">i32</a>&gt; for &amp;'a <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-Mul%3Ci32%3E-1' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#342-350' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='associatedtype.Output-43' class="type"><code>type <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#associatedtype.Output' class="type">Output</a> = <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code></h4><div class='docblock'><p>The resulting type after applying the <code>*</code> operator.</p>
</div><h4 id='method.mul-35' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#tymethod.mul' class='fnname'>mul</a>(self, other: <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.i32.html">i32</a>) -&gt; <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a class='srclink' href='../src/uint/uint.rs.html#345-349' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the <code>*</code> operation.</p>
</div></div><h3 id='impl-Mul%3Ci64%3E' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html" title="trait core::ops::arith::Mul">Mul</a>&lt;<a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.i64.html">i64</a>&gt; for <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-Mul%3Ci64%3E' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#312-320' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='associatedtype.Output-44' class="type"><code>type <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#associatedtype.Output' class="type">Output</a> = <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code></h4><div class='docblock'><p>The resulting type after applying the <code>*</code> operator.</p>
</div><h4 id='method.mul-36' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#tymethod.mul' class='fnname'>mul</a>(self, other: <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.i64.html">i64</a>) -&gt; <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a class='srclink' href='../src/uint/uint.rs.html#315-319' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the <code>*</code> operation.</p>
</div></div><h3 id='impl-Mul%3Ci64%3E-1' class='impl'><code class='in-band'>impl&lt;'a&gt; <a class="trait" href="https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html" title="trait core::ops::arith::Mul">Mul</a>&lt;<a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.i64.html">i64</a>&gt; for &amp;'a <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-Mul%3Ci64%3E-1' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#342-350' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='associatedtype.Output-47' class="type"><code>type <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#associatedtype.Output' class="type">Output</a> = <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code></h4><div class='docblock'><p>The resulting type after applying the <code>*</code> operator.</p>
</div><h4 id='method.mul-39' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#tymethod.mul' class='fnname'>mul</a>(self, other: <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.i64.html">i64</a>) -&gt; <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a class='srclink' href='../src/uint/uint.rs.html#345-349' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the <code>*</code> operation.</p>
</div></div><h3 id='impl-Mul%3Ci8%3E' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html" title="trait core::ops::arith::Mul">Mul</a>&lt;<a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.i8.html">i8</a>&gt; for <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-Mul%3Ci8%3E' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#312-320' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='associatedtype.Output-32' class="type"><code>type <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#associatedtype.Output' class="type">Output</a> = <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code></h4><div class='docblock'><p>The resulting type after applying the <code>*</code> operator.</p>
</div><h4 id='method.mul-24' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#tymethod.mul' class='fnname'>mul</a>(self, other: <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.i8.html">i8</a>) -&gt; <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a class='srclink' href='../src/uint/uint.rs.html#315-319' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the <code>*</code> operation.</p>
</div></div><h3 id='impl-Mul%3Ci8%3E-1' class='impl'><code class='in-band'>impl&lt;'a&gt; <a class="trait" href="https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html" title="trait core::ops::arith::Mul">Mul</a>&lt;<a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.i8.html">i8</a>&gt; for &amp;'a <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-Mul%3Ci8%3E-1' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#342-350' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='associatedtype.Output-35' class="type"><code>type <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#associatedtype.Output' class="type">Output</a> = <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code></h4><div class='docblock'><p>The resulting type after applying the <code>*</code> operator.</p>
</div><h4 id='method.mul-27' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#tymethod.mul' class='fnname'>mul</a>(self, other: <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.i8.html">i8</a>) -&gt; <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a class='srclink' href='../src/uint/uint.rs.html#345-349' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the <code>*</code> operation.</p>
</div></div><h3 id='impl-Mul%3Cisize%3E' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html" title="trait core::ops::arith::Mul">Mul</a>&lt;<a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.isize.html">isize</a>&gt; for <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-Mul%3Cisize%3E' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#312-320' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='associatedtype.Output-48' class="type"><code>type <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#associatedtype.Output' class="type">Output</a> = <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code></h4><div class='docblock'><p>The resulting type after applying the <code>*</code> operator.</p>
</div><h4 id='method.mul-40' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#tymethod.mul' class='fnname'>mul</a>(self, other: <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.isize.html">isize</a>) -&gt; <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a class='srclink' href='../src/uint/uint.rs.html#315-319' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the <code>*</code> operation.</p>
</div></div><h3 id='impl-Mul%3Cisize%3E-1' class='impl'><code class='in-band'>impl&lt;'a&gt; <a class="trait" href="https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html" title="trait core::ops::arith::Mul">Mul</a>&lt;<a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.isize.html">isize</a>&gt; for &amp;'a <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-Mul%3Cisize%3E-1' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#342-350' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='associatedtype.Output-51' class="type"><code>type <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#associatedtype.Output' class="type">Output</a> = <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code></h4><div class='docblock'><p>The resulting type after applying the <code>*</code> operator.</p>
</div><h4 id='method.mul-43' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#tymethod.mul' class='fnname'>mul</a>(self, other: <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.isize.html">isize</a>) -&gt; <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a class='srclink' href='../src/uint/uint.rs.html#345-349' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the <code>*</code> operation.</p>
</div></div><h3 id='impl-Mul%3Cu16%3E' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html" title="trait core::ops::arith::Mul">Mul</a>&lt;<a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u16.html">u16</a>&gt; for <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-Mul%3Cu16%3E' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#312-320' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='associatedtype.Output-16' class="type"><code>type <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#associatedtype.Output' class="type">Output</a> = <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code></h4><div class='docblock'><p>The resulting type after applying the <code>*</code> operator.</p>
</div><h4 id='method.mul-8' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#tymethod.mul' class='fnname'>mul</a>(self, other: <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u16.html">u16</a>) -&gt; <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a class='srclink' href='../src/uint/uint.rs.html#315-319' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the <code>*</code> operation.</p>
</div></div><h3 id='impl-Mul%3Cu16%3E-1' class='impl'><code class='in-band'>impl&lt;'a&gt; <a class="trait" href="https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html" title="trait core::ops::arith::Mul">Mul</a>&lt;<a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u16.html">u16</a>&gt; for &amp;'a <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-Mul%3Cu16%3E-1' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#342-350' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='associatedtype.Output-19' class="type"><code>type <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#associatedtype.Output' class="type">Output</a> = <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code></h4><div class='docblock'><p>The resulting type after applying the <code>*</code> operator.</p>
</div><h4 id='method.mul-11' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#tymethod.mul' class='fnname'>mul</a>(self, other: <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u16.html">u16</a>) -&gt; <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a class='srclink' href='../src/uint/uint.rs.html#345-349' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the <code>*</code> operation.</p>
</div></div><h3 id='impl-Mul%3Cu32%3E' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html" title="trait core::ops::arith::Mul">Mul</a>&lt;<a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u32.html">u32</a>&gt; for <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-Mul%3Cu32%3E' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#312-320' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='associatedtype.Output-20' class="type"><code>type <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#associatedtype.Output' class="type">Output</a> = <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code></h4><div class='docblock'><p>The resulting type after applying the <code>*</code> operator.</p>
</div><h4 id='method.mul-12' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#tymethod.mul' class='fnname'>mul</a>(self, other: <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u32.html">u32</a>) -&gt; <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a class='srclink' href='../src/uint/uint.rs.html#315-319' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the <code>*</code> operation.</p>
</div></div><h3 id='impl-Mul%3Cu32%3E-1' class='impl'><code class='in-band'>impl&lt;'a&gt; <a class="trait" href="https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html" title="trait core::ops::arith::Mul">Mul</a>&lt;<a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u32.html">u32</a>&gt; for &amp;'a <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-Mul%3Cu32%3E-1' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#342-350' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='associatedtype.Output-23' class="type"><code>type <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#associatedtype.Output' class="type">Output</a> = <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code></h4><div class='docblock'><p>The resulting type after applying the <code>*</code> operator.</p>
</div><h4 id='method.mul-15' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#tymethod.mul' class='fnname'>mul</a>(self, other: <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u32.html">u32</a>) -&gt; <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a class='srclink' href='../src/uint/uint.rs.html#345-349' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the <code>*</code> operation.</p>
</div></div><h3 id='impl-Mul%3Cu64%3E' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html" title="trait core::ops::arith::Mul">Mul</a>&lt;<a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u64.html">u64</a>&gt; for <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-Mul%3Cu64%3E' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#312-320' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='associatedtype.Output-24' class="type"><code>type <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#associatedtype.Output' class="type">Output</a> = <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code></h4><div class='docblock'><p>The resulting type after applying the <code>*</code> operator.</p>
</div><h4 id='method.mul-16' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#tymethod.mul' class='fnname'>mul</a>(self, other: <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u64.html">u64</a>) -&gt; <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a class='srclink' href='../src/uint/uint.rs.html#315-319' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the <code>*</code> operation.</p>
</div></div><h3 id='impl-Mul%3Cu64%3E-1' class='impl'><code class='in-band'>impl&lt;'a&gt; <a class="trait" href="https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html" title="trait core::ops::arith::Mul">Mul</a>&lt;<a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u64.html">u64</a>&gt; for &amp;'a <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-Mul%3Cu64%3E-1' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#342-350' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='associatedtype.Output-27' class="type"><code>type <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#associatedtype.Output' class="type">Output</a> = <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code></h4><div class='docblock'><p>The resulting type after applying the <code>*</code> operator.</p>
</div><h4 id='method.mul-19' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#tymethod.mul' class='fnname'>mul</a>(self, other: <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u64.html">u64</a>) -&gt; <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a class='srclink' href='../src/uint/uint.rs.html#345-349' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the <code>*</code> operation.</p>
</div></div><h3 id='impl-Mul%3Cu8%3E' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html" title="trait core::ops::arith::Mul">Mul</a>&lt;<a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u8.html">u8</a>&gt; for <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-Mul%3Cu8%3E' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#312-320' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='associatedtype.Output-12' class="type"><code>type <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#associatedtype.Output' class="type">Output</a> = <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code></h4><div class='docblock'><p>The resulting type after applying the <code>*</code> operator.</p>
</div><h4 id='method.mul-4' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#tymethod.mul' class='fnname'>mul</a>(self, other: <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u8.html">u8</a>) -&gt; <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a class='srclink' href='../src/uint/uint.rs.html#315-319' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the <code>*</code> operation.</p>
</div></div><h3 id='impl-Mul%3Cu8%3E-1' class='impl'><code class='in-band'>impl&lt;'a&gt; <a class="trait" href="https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html" title="trait core::ops::arith::Mul">Mul</a>&lt;<a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u8.html">u8</a>&gt; for &amp;'a <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-Mul%3Cu8%3E-1' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#342-350' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='associatedtype.Output-15' class="type"><code>type <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#associatedtype.Output' class="type">Output</a> = <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code></h4><div class='docblock'><p>The resulting type after applying the <code>*</code> operator.</p>
</div><h4 id='method.mul-7' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#tymethod.mul' class='fnname'>mul</a>(self, other: <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u8.html">u8</a>) -&gt; <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a class='srclink' href='../src/uint/uint.rs.html#345-349' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the <code>*</code> operation.</p>
</div></div><h3 id='impl-Mul%3Cusize%3E' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html" title="trait core::ops::arith::Mul">Mul</a>&lt;<a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.usize.html">usize</a>&gt; for <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-Mul%3Cusize%3E' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#312-320' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='associatedtype.Output-28' class="type"><code>type <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#associatedtype.Output' class="type">Output</a> = <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code></h4><div class='docblock'><p>The resulting type after applying the <code>*</code> operator.</p>
</div><h4 id='method.mul-20' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#tymethod.mul' class='fnname'>mul</a>(self, other: <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.usize.html">usize</a>) -&gt; <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a class='srclink' href='../src/uint/uint.rs.html#315-319' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the <code>*</code> operation.</p>
</div></div><h3 id='impl-Mul%3Cusize%3E-1' class='impl'><code class='in-band'>impl&lt;'a&gt; <a class="trait" href="https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html" title="trait core::ops::arith::Mul">Mul</a>&lt;<a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.usize.html">usize</a>&gt; for &amp;'a <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-Mul%3Cusize%3E-1' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#342-350' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='associatedtype.Output-31' class="type"><code>type <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#associatedtype.Output' class="type">Output</a> = <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code></h4><div class='docblock'><p>The resulting type after applying the <code>*</code> operator.</p>
</div><h4 id='method.mul-23' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#tymethod.mul' class='fnname'>mul</a>(self, other: <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.usize.html">usize</a>) -&gt; <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a class='srclink' href='../src/uint/uint.rs.html#345-349' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the <code>*</code> operation.</p>
</div></div><h3 id='impl-MulAssign%3CU256%3E' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/core/ops/arith/trait.MulAssign.html" title="trait core::ops::arith::MulAssign">MulAssign</a>&lt;<a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>&gt; for <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-MulAssign%3CU256%3E' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#299-304' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='method.mul_assign' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.MulAssign.html#tymethod.mul_assign' class='fnname'>mul_assign</a>(&amp;mut self, other: <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>)</code><a class='srclink' href='../src/uint/uint.rs.html#300-303' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the <code>*=</code> operation.</p>
</div></div><h3 id='impl-MulAssign%3Ci16%3E' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/core/ops/arith/trait.MulAssign.html" title="trait core::ops::arith::MulAssign">MulAssign</a>&lt;<a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.i16.html">i16</a>&gt; for <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-MulAssign%3Ci16%3E' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#352-357' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='method.mul_assign-7' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.MulAssign.html#tymethod.mul_assign' class='fnname'>mul_assign</a>(&amp;mut self, other: <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.i16.html">i16</a>)</code><a class='srclink' href='../src/uint/uint.rs.html#353-356' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the <code>*=</code> operation.</p>
</div></div><h3 id='impl-MulAssign%3Ci32%3E' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/core/ops/arith/trait.MulAssign.html" title="trait core::ops::arith::MulAssign">MulAssign</a>&lt;<a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.i32.html">i32</a>&gt; for <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-MulAssign%3Ci32%3E' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#352-357' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='method.mul_assign-8' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.MulAssign.html#tymethod.mul_assign' class='fnname'>mul_assign</a>(&amp;mut self, other: <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.i32.html">i32</a>)</code><a class='srclink' href='../src/uint/uint.rs.html#353-356' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the <code>*=</code> operation.</p>
</div></div><h3 id='impl-MulAssign%3Ci64%3E' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/core/ops/arith/trait.MulAssign.html" title="trait core::ops::arith::MulAssign">MulAssign</a>&lt;<a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.i64.html">i64</a>&gt; for <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-MulAssign%3Ci64%3E' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#352-357' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='method.mul_assign-9' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.MulAssign.html#tymethod.mul_assign' class='fnname'>mul_assign</a>(&amp;mut self, other: <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.i64.html">i64</a>)</code><a class='srclink' href='../src/uint/uint.rs.html#353-356' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the <code>*=</code> operation.</p>
</div></div><h3 id='impl-MulAssign%3Ci8%3E' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/core/ops/arith/trait.MulAssign.html" title="trait core::ops::arith::MulAssign">MulAssign</a>&lt;<a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.i8.html">i8</a>&gt; for <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-MulAssign%3Ci8%3E' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#352-357' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='method.mul_assign-6' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.MulAssign.html#tymethod.mul_assign' class='fnname'>mul_assign</a>(&amp;mut self, other: <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.i8.html">i8</a>)</code><a class='srclink' href='../src/uint/uint.rs.html#353-356' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the <code>*=</code> operation.</p>
</div></div><h3 id='impl-MulAssign%3Cisize%3E' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/core/ops/arith/trait.MulAssign.html" title="trait core::ops::arith::MulAssign">MulAssign</a>&lt;<a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.isize.html">isize</a>&gt; for <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-MulAssign%3Cisize%3E' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#352-357' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='method.mul_assign-10' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.MulAssign.html#tymethod.mul_assign' class='fnname'>mul_assign</a>(&amp;mut self, other: <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.isize.html">isize</a>)</code><a class='srclink' href='../src/uint/uint.rs.html#353-356' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the <code>*=</code> operation.</p>
</div></div><h3 id='impl-MulAssign%3Cu16%3E' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/core/ops/arith/trait.MulAssign.html" title="trait core::ops::arith::MulAssign">MulAssign</a>&lt;<a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u16.html">u16</a>&gt; for <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-MulAssign%3Cu16%3E' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#352-357' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='method.mul_assign-2' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.MulAssign.html#tymethod.mul_assign' class='fnname'>mul_assign</a>(&amp;mut self, other: <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u16.html">u16</a>)</code><a class='srclink' href='../src/uint/uint.rs.html#353-356' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the <code>*=</code> operation.</p>
</div></div><h3 id='impl-MulAssign%3Cu32%3E' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/core/ops/arith/trait.MulAssign.html" title="trait core::ops::arith::MulAssign">MulAssign</a>&lt;<a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u32.html">u32</a>&gt; for <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-MulAssign%3Cu32%3E' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#352-357' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='method.mul_assign-3' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.MulAssign.html#tymethod.mul_assign' class='fnname'>mul_assign</a>(&amp;mut self, other: <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u32.html">u32</a>)</code><a class='srclink' href='../src/uint/uint.rs.html#353-356' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the <code>*=</code> operation.</p>
</div></div><h3 id='impl-MulAssign%3Cu64%3E' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/core/ops/arith/trait.MulAssign.html" title="trait core::ops::arith::MulAssign">MulAssign</a>&lt;<a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u64.html">u64</a>&gt; for <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-MulAssign%3Cu64%3E' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#352-357' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='method.mul_assign-4' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.MulAssign.html#tymethod.mul_assign' class='fnname'>mul_assign</a>(&amp;mut self, other: <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u64.html">u64</a>)</code><a class='srclink' href='../src/uint/uint.rs.html#353-356' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the <code>*=</code> operation.</p>
</div></div><h3 id='impl-MulAssign%3Cu8%3E' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/core/ops/arith/trait.MulAssign.html" title="trait core::ops::arith::MulAssign">MulAssign</a>&lt;<a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u8.html">u8</a>&gt; for <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-MulAssign%3Cu8%3E' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#352-357' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='method.mul_assign-1' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.MulAssign.html#tymethod.mul_assign' class='fnname'>mul_assign</a>(&amp;mut self, other: <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u8.html">u8</a>)</code><a class='srclink' href='../src/uint/uint.rs.html#353-356' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the <code>*=</code> operation.</p>
</div></div><h3 id='impl-MulAssign%3Cusize%3E' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/core/ops/arith/trait.MulAssign.html" title="trait core::ops::arith::MulAssign">MulAssign</a>&lt;<a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.usize.html">usize</a>&gt; for <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-MulAssign%3Cusize%3E' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#352-357' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='method.mul_assign-5' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.MulAssign.html#tymethod.mul_assign' class='fnname'>mul_assign</a>(&amp;mut self, other: <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.usize.html">usize</a>)</code><a class='srclink' href='../src/uint/uint.rs.html#353-356' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the <code>*=</code> operation.</p>
</div></div><h3 id='impl-Not' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/core/ops/bit/trait.Not.html" title="trait core::ops::bit::Not">Not</a> for <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-Not' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#1388-1400' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='associatedtype.Output-52' class="type"><code>type <a href='https://doc.rust-lang.org/nightly/core/ops/bit/trait.Not.html#associatedtype.Output' class="type">Output</a> = <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code></h4><div class='docblock'><p>The resulting type after applying the <code>!</code> operator.</p>
</div><h4 id='method.not' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/ops/bit/trait.Not.html#tymethod.not' class='fnname'>not</a>(self) -&gt; <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a class='srclink' href='../src/uint/uint.rs.html#1392-1399' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the unary <code>!</code> operation.</p>
</div></div><h3 id='impl-Ord' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html" title="trait core::cmp::Ord">Ord</a> for <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-Ord' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#1478-1482' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='method.cmp' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#tymethod.cmp' class='fnname'>cmp</a>(&amp;self, other: &amp;<a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>) -&gt; <a class="enum" href="https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html" title="enum core::cmp::Ordering">Ordering</a></code><a class='srclink' href='../src/uint/uint.rs.html#1479-1481' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>This method returns an [<code>Ordering</code>] between <code>self</code> and <code>other</code>. <a href="https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#tymethod.cmp">Read more</a></p>
</div><h4 id='method.max' class="method hidden"><code><span class="docblock attributes">#[must_use]</span>fn <a href='https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.max' class='fnname'>max</a>(self, other: Self) -&gt; Self</code><span class='since' title='Stable since Rust version 1.21.0'>1.21.0</span><a class='srclink' href='https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#599-604' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Compares and returns the maximum of two values. <a href="https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.max">Read more</a></p>
</div><h4 id='method.min' class="method hidden"><code><span class="docblock attributes">#[must_use]</span>fn <a href='https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.min' class='fnname'>min</a>(self, other: Self) -&gt; Self</code><span class='since' title='Stable since Rust version 1.21.0'>1.21.0</span><a class='srclink' href='https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#619-624' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Compares and returns the minimum of two values. <a href="https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.min">Read more</a></p>
</div><h4 id='method.clamp' class="method hidden"><code><span class="docblock attributes">#[must_use]</span>fn <a href='https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.clamp' class='fnname'>clamp</a>(self, min: Self, max: Self) -&gt; Self</code><a class='srclink' href='https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#646-658' title='goto source code'>[src]</a></h4><div class='stability hidden'><div class='stab unstable'><span class='emoji'>🔬</span> This is a nightly-only experimental API. (<code>clamp</code>)</div></div><div class='docblock hidden'><p>Restrict a value to a certain interval. <a href="https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.clamp">Read more</a></p>
</div></div><h3 id='impl-PartialEq%3CU256%3E' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html" title="trait core::cmp::PartialEq">PartialEq</a>&lt;<a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>&gt; for <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-PartialEq%3CU256%3E' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#448' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='method.eq' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq' class='fnname'>eq</a>(&amp;self, other: &amp;<a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>) -&gt; <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.bool.html">bool</a></code><a class='srclink' href='../src/uint/uint.rs.html#448' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>. <a href="https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq">Read more</a></p>
</div><h4 id='method.ne' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne' class='fnname'>ne</a>(&amp;self, other: &amp;<a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>) -&gt; <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.bool.html">bool</a></code><a class='srclink' href='../src/uint/uint.rs.html#448' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>This method tests for <code>!=</code>.</p>
</div></div><h3 id='impl-PartialOrd%3CU256%3E' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html" title="trait core::cmp::PartialOrd">PartialOrd</a>&lt;<a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>&gt; for <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-PartialOrd%3CU256%3E' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#1484-1488' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='method.partial_cmp' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp' class='fnname'>partial_cmp</a>(&amp;self, other: &amp;<a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>) -&gt; <a class="enum" href="https://doc.rust-lang.org/nightly/core/option/enum.Option.html" title="enum core::option::Option">Option</a>&lt;<a class="enum" href="https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html" title="enum core::cmp::Ordering">Ordering</a>&gt;</code><a class='srclink' href='../src/uint/uint.rs.html#1485-1487' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href="https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp">Read more</a></p>
</div><h4 id='method.lt' class="method hidden"><code><span class="docblock attributes">#[must_use]</span>fn <a href='https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.lt' class='fnname'>lt</a>(&amp;self, other: <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.reference.html">&amp;</a>Rhs) -&gt; <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.bool.html">bool</a></code><span class='since' title='Stable since Rust version 1.0.0'>1.0.0</span><a class='srclink' href='https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#841-843' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href="https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.lt">Read more</a></p>
</div><h4 id='method.le' class="method hidden"><code><span class="docblock attributes">#[must_use]</span>fn <a href='https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.le' class='fnname'>le</a>(&amp;self, other: <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.reference.html">&amp;</a>Rhs) -&gt; <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.bool.html">bool</a></code><span class='since' title='Stable since Rust version 1.0.0'>1.0.0</span><a class='srclink' href='https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#860-862' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code> operator. <a href="https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.le">Read more</a></p>
</div><h4 id='method.gt' class="method hidden"><code><span class="docblock attributes">#[must_use]</span>fn <a href='https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.gt' class='fnname'>gt</a>(&amp;self, other: <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.reference.html">&amp;</a>Rhs) -&gt; <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.bool.html">bool</a></code><span class='since' title='Stable since Rust version 1.0.0'>1.0.0</span><a class='srclink' href='https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#878-880' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href="https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.gt">Read more</a></p>
</div><h4 id='method.ge' class="method hidden"><code><span class="docblock attributes">#[must_use]</span>fn <a href='https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.ge' class='fnname'>ge</a>(&amp;self, other: <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.reference.html">&amp;</a>Rhs) -&gt; <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.bool.html">bool</a></code><span class='since' title='Stable since Rust version 1.0.0'>1.0.0</span><a class='srclink' href='https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#897-899' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code> operator. <a href="https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.ge">Read more</a></p>
</div></div><h3 id='impl-Rem%3CT%3E' class='impl'><code class='in-band'>impl&lt;T&gt; <a class="trait" href="https://doc.rust-lang.org/nightly/core/ops/arith/trait.Rem.html" title="trait core::ops::arith::Rem">Rem</a>&lt;T&gt; for <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a> <span class="where fmt-newline">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: <a class="trait" href="https://doc.rust-lang.org/nightly/core/convert/trait.Into.html" title="trait core::convert::Into">Into</a>&lt;<a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>&gt; + <a class="trait" href="https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html" title="trait core::marker::Copy">Copy</a>,&nbsp;</span></code><a href='#impl-Rem%3CT%3E' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#1317-1325' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='associatedtype.Output-2' class="type"><code>type <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Rem.html#associatedtype.Output' class="type">Output</a> = <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code></h4><div class='docblock'><p>The resulting type after applying the <code>%</code> operator.</p>
</div><h4 id='method.rem' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Rem.html#tymethod.rem' class='fnname'>rem</a>(self, other: T) -&gt; <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a class='srclink' href='../src/uint/uint.rs.html#1320-1324' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the <code>%</code> operation.</p>
</div></div><h3 id='impl-Rem%3CT%3E-1' class='impl'><code class='in-band'>impl&lt;'a, T&gt; <a class="trait" href="https://doc.rust-lang.org/nightly/core/ops/arith/trait.Rem.html" title="trait core::ops::arith::Rem">Rem</a>&lt;T&gt; for &amp;'a <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a> <span class="where fmt-newline">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: <a class="trait" href="https://doc.rust-lang.org/nightly/core/convert/trait.Into.html" title="trait core::convert::Into">Into</a>&lt;<a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>&gt; + <a class="trait" href="https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html" title="trait core::marker::Copy">Copy</a>,&nbsp;</span></code><a href='#impl-Rem%3CT%3E-1' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#1327-1333' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='associatedtype.Output-3' class="type"><code>type <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Rem.html#associatedtype.Output' class="type">Output</a> = <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code></h4><div class='docblock'><p>The resulting type after applying the <code>%</code> operator.</p>
</div><h4 id='method.rem-1' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Rem.html#tymethod.rem' class='fnname'>rem</a>(self, other: T) -&gt; <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a class='srclink' href='../src/uint/uint.rs.html#1330-1332' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the <code>%</code> operation.</p>
</div></div><h3 id='impl-RemAssign%3CT%3E' class='impl'><code class='in-band'>impl&lt;T&gt; <a class="trait" href="https://doc.rust-lang.org/nightly/core/ops/arith/trait.RemAssign.html" title="trait core::ops::arith::RemAssign">RemAssign</a>&lt;T&gt; for <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a> <span class="where fmt-newline">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: <a class="trait" href="https://doc.rust-lang.org/nightly/core/convert/trait.Into.html" title="trait core::convert::Into">Into</a>&lt;<a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>&gt; + <a class="trait" href="https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html" title="trait core::marker::Copy">Copy</a>,&nbsp;</span></code><a href='#impl-RemAssign%3CT%3E' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#1335-1341' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='method.rem_assign' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.RemAssign.html#tymethod.rem_assign' class='fnname'>rem_assign</a>(&amp;mut self, other: T)</code><a class='srclink' href='../src/uint/uint.rs.html#1336-1340' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the <code>%=</code> operation.</p>
</div></div><h3 id='impl-Shl%3CT%3E' class='impl'><code class='in-band'>impl&lt;T&gt; <a class="trait" href="https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html" title="trait core::ops::bit::Shl">Shl</a>&lt;T&gt; for <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a> <span class="where fmt-newline">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: <a class="trait" href="https://doc.rust-lang.org/nightly/core/convert/trait.Into.html" title="trait core::convert::Into">Into</a>&lt;<a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>&gt;,&nbsp;</span></code><a href='#impl-Shl%3CT%3E' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#1402-1424' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='associatedtype.Output-56' class="type"><code>type <a href='https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#associatedtype.Output' class="type">Output</a> = <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code></h4><div class='docblock'><p>The resulting type after applying the <code>&lt;&lt;</code> operator.</p>
</div><h4 id='method.shl' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#tymethod.shl' class='fnname'>shl</a>(self, shift: T) -&gt; <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a class='srclink' href='../src/uint/uint.rs.html#1405-1423' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the <code>&lt;&lt;</code> operation.</p>
</div></div><h3 id='impl-Shl%3CT%3E-1' class='impl'><code class='in-band'>impl&lt;'a, T&gt; <a class="trait" href="https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html" title="trait core::ops::bit::Shl">Shl</a>&lt;T&gt; for &amp;'a <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a> <span class="where fmt-newline">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: <a class="trait" href="https://doc.rust-lang.org/nightly/core/convert/trait.Into.html" title="trait core::convert::Into">Into</a>&lt;<a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>&gt;,&nbsp;</span></code><a href='#impl-Shl%3CT%3E-1' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#1426-1431' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='associatedtype.Output-57' class="type"><code>type <a href='https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#associatedtype.Output' class="type">Output</a> = <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code></h4><div class='docblock'><p>The resulting type after applying the <code>&lt;&lt;</code> operator.</p>
</div><h4 id='method.shl-1' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#tymethod.shl' class='fnname'>shl</a>(self, shift: T) -&gt; <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a class='srclink' href='../src/uint/uint.rs.html#1428-1430' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the <code>&lt;&lt;</code> operation.</p>
</div></div><h3 id='impl-ShlAssign%3CT%3E' class='impl'><code class='in-band'>impl&lt;T&gt; <a class="trait" href="https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShlAssign.html" title="trait core::ops::bit::ShlAssign">ShlAssign</a>&lt;T&gt; for <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a> <span class="where fmt-newline">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: <a class="trait" href="https://doc.rust-lang.org/nightly/core/convert/trait.Into.html" title="trait core::convert::Into">Into</a>&lt;<a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>&gt;,&nbsp;</span></code><a href='#impl-ShlAssign%3CT%3E' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#1433-1437' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='method.shl_assign' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign' class='fnname'>shl_assign</a>(&amp;mut self, shift: T)</code><a class='srclink' href='../src/uint/uint.rs.html#1434-1436' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the <code>&lt;&lt;=</code> operation.</p>
</div></div><h3 id='impl-Shr%3CT%3E' class='impl'><code class='in-band'>impl&lt;T&gt; <a class="trait" href="https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html" title="trait core::ops::bit::Shr">Shr</a>&lt;T&gt; for <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a> <span class="where fmt-newline">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: <a class="trait" href="https://doc.rust-lang.org/nightly/core/convert/trait.Into.html" title="trait core::convert::Into">Into</a>&lt;<a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>&gt;,&nbsp;</span></code><a href='#impl-Shr%3CT%3E' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#1439-1463' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='associatedtype.Output-58' class="type"><code>type <a href='https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#associatedtype.Output' class="type">Output</a> = <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code></h4><div class='docblock'><p>The resulting type after applying the <code>&gt;&gt;</code> operator.</p>
</div><h4 id='method.shr' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#tymethod.shr' class='fnname'>shr</a>(self, shift: T) -&gt; <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a class='srclink' href='../src/uint/uint.rs.html#1442-1462' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the <code>&gt;&gt;</code> operation.</p>
</div></div><h3 id='impl-Shr%3CT%3E-1' class='impl'><code class='in-band'>impl&lt;'a, T&gt; <a class="trait" href="https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html" title="trait core::ops::bit::Shr">Shr</a>&lt;T&gt; for &amp;'a <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a> <span class="where fmt-newline">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: <a class="trait" href="https://doc.rust-lang.org/nightly/core/convert/trait.Into.html" title="trait core::convert::Into">Into</a>&lt;<a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>&gt;,&nbsp;</span></code><a href='#impl-Shr%3CT%3E-1' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#1465-1470' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='associatedtype.Output-59' class="type"><code>type <a href='https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#associatedtype.Output' class="type">Output</a> = <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code></h4><div class='docblock'><p>The resulting type after applying the <code>&gt;&gt;</code> operator.</p>
</div><h4 id='method.shr-1' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#tymethod.shr' class='fnname'>shr</a>(self, shift: T) -&gt; <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a class='srclink' href='../src/uint/uint.rs.html#1467-1469' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the <code>&gt;&gt;</code> operation.</p>
</div></div><h3 id='impl-ShrAssign%3CT%3E' class='impl'><code class='in-band'>impl&lt;T&gt; <a class="trait" href="https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShrAssign.html" title="trait core::ops::bit::ShrAssign">ShrAssign</a>&lt;T&gt; for <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a> <span class="where fmt-newline">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: <a class="trait" href="https://doc.rust-lang.org/nightly/core/convert/trait.Into.html" title="trait core::convert::Into">Into</a>&lt;<a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>&gt;,&nbsp;</span></code><a href='#impl-ShrAssign%3CT%3E' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#1472-1476' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='method.shr_assign' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign' class='fnname'>shr_assign</a>(&amp;mut self, shift: T)</code><a class='srclink' href='../src/uint/uint.rs.html#1473-1475' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the <code>&gt;&gt;=</code> operation.</p>
</div></div><h3 id='impl-StructuralEq' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/core/marker/trait.StructuralEq.html" title="trait core::marker::StructuralEq">StructuralEq</a> for <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-StructuralEq' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#448' title='goto source code'>[src]</a></h3><div class='impl-items'></div><h3 id='impl-StructuralPartialEq' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/core/marker/trait.StructuralPartialEq.html" title="trait core::marker::StructuralPartialEq">StructuralPartialEq</a> for <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-StructuralPartialEq' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#448' title='goto source code'>[src]</a></h3><div class='impl-items'></div><h3 id='impl-Sub%3CT%3E' class='impl'><code class='in-band'>impl&lt;T&gt; <a class="trait" href="https://doc.rust-lang.org/nightly/core/ops/arith/trait.Sub.html" title="trait core::ops::arith::Sub">Sub</a>&lt;T&gt; for <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a> <span class="where fmt-newline">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: <a class="trait" href="https://doc.rust-lang.org/nightly/core/convert/trait.Into.html" title="trait core::convert::Into">Into</a>&lt;<a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>&gt;,&nbsp;</span></code><a href='#impl-Sub%3CT%3E' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#1254-1263' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='associatedtype.Output-4' class="type"><code>type <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Sub.html#associatedtype.Output' class="type">Output</a> = <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code></h4><div class='docblock'><p>The resulting type after applying the <code>-</code> operator.</p>
</div><h4 id='method.sub' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Sub.html#tymethod.sub' class='fnname'>sub</a>(self, other: T) -&gt; <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a class='srclink' href='../src/uint/uint.rs.html#1258-1262' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the <code>-</code> operation.</p>
</div></div><h3 id='impl-Sub%3CT%3E-1' class='impl'><code class='in-band'>impl&lt;'a, T&gt; <a class="trait" href="https://doc.rust-lang.org/nightly/core/ops/arith/trait.Sub.html" title="trait core::ops::arith::Sub">Sub</a>&lt;T&gt; for &amp;'a <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a> <span class="where fmt-newline">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: <a class="trait" href="https://doc.rust-lang.org/nightly/core/convert/trait.Into.html" title="trait core::convert::Into">Into</a>&lt;<a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>&gt;,&nbsp;</span></code><a href='#impl-Sub%3CT%3E-1' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#1265-1271' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='associatedtype.Output-5' class="type"><code>type <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Sub.html#associatedtype.Output' class="type">Output</a> = <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code></h4><div class='docblock'><p>The resulting type after applying the <code>-</code> operator.</p>
</div><h4 id='method.sub-1' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.Sub.html#tymethod.sub' class='fnname'>sub</a>(self, other: T) -&gt; <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a class='srclink' href='../src/uint/uint.rs.html#1268-1270' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the <code>-</code> operation.</p>
</div></div><h3 id='impl-SubAssign%3CU256%3E' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/core/ops/arith/trait.SubAssign.html" title="trait core::ops::arith::SubAssign">SubAssign</a>&lt;<a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>&gt; for <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-SubAssign%3CU256%3E' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#1273-1279' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='method.sub_assign' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/ops/arith/trait.SubAssign.html#tymethod.sub_assign' class='fnname'>sub_assign</a>(&amp;mut self, other: <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>)</code><a class='srclink' href='../src/uint/uint.rs.html#1274-1278' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the <code>-=</code> operation.</p>
</div></div><h3 id='impl-TryFrom%3CU256%3E' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html" title="trait core::convert::TryFrom">TryFrom</a>&lt;<a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>&gt; for <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u8.html">u8</a></code><a href='#impl-TryFrom%3CU256%3E' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#74-89' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='associatedtype.Error' class="type"><code>type <a href='https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html#associatedtype.Error' class="type">Error</a> = &amp;'static <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.str.html">str</a></code></h4><div class='docblock'><p>The type returned in the event of a conversion error.</p>
</div><h4 id='method.try_from' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html#tymethod.try_from' class='fnname'>try_from</a>(u: <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>) -&gt; <a class="enum" href="https://doc.rust-lang.org/nightly/core/result/enum.Result.html" title="enum core::result::Result">Result</a>&lt;<a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u8.html">u8</a>, &amp;'static <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.str.html">str</a>&gt;</code><a class='srclink' href='../src/uint/uint.rs.html#78-88' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the conversion.</p>
</div></div><h3 id='impl-TryFrom%3CU256%3E-1' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html" title="trait core::convert::TryFrom">TryFrom</a>&lt;<a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>&gt; for <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u16.html">u16</a></code><a href='#impl-TryFrom%3CU256%3E-1' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#74-89' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='associatedtype.Error-1' class="type"><code>type <a href='https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html#associatedtype.Error' class="type">Error</a> = &amp;'static <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.str.html">str</a></code></h4><div class='docblock'><p>The type returned in the event of a conversion error.</p>
</div><h4 id='method.try_from-1' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html#tymethod.try_from' class='fnname'>try_from</a>(u: <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>) -&gt; <a class="enum" href="https://doc.rust-lang.org/nightly/core/result/enum.Result.html" title="enum core::result::Result">Result</a>&lt;<a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u16.html">u16</a>, &amp;'static <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.str.html">str</a>&gt;</code><a class='srclink' href='../src/uint/uint.rs.html#78-88' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the conversion.</p>
</div></div><h3 id='impl-TryFrom%3CU256%3E-10' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html" title="trait core::convert::TryFrom">TryFrom</a>&lt;<a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>&gt; for <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u128.html">u128</a></code><a href='#impl-TryFrom%3CU256%3E-10' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#414-427' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='associatedtype.Error-10' class="type"><code>type <a href='https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html#associatedtype.Error' class="type">Error</a> = &amp;'static <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.str.html">str</a></code></h4><div class='docblock'><p>The type returned in the event of a conversion error.</p>
</div><h4 id='method.try_from-10' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html#tymethod.try_from' class='fnname'>try_from</a>(u: <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>) -&gt; <a class="enum" href="https://doc.rust-lang.org/nightly/core/result/enum.Result.html" title="enum core::result::Result">Result</a>&lt;<a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u128.html">u128</a>, &amp;'static <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.str.html">str</a>&gt;</code><a class='srclink' href='../src/uint/uint.rs.html#418-426' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the conversion.</p>
</div></div><h3 id='impl-TryFrom%3CU256%3E-11' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html" title="trait core::convert::TryFrom">TryFrom</a>&lt;<a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>&gt; for <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.i128.html">i128</a></code><a href='#impl-TryFrom%3CU256%3E-11' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#429-442' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='associatedtype.Error-11' class="type"><code>type <a href='https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html#associatedtype.Error' class="type">Error</a> = &amp;'static <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.str.html">str</a></code></h4><div class='docblock'><p>The type returned in the event of a conversion error.</p>
</div><h4 id='method.try_from-11' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html#tymethod.try_from' class='fnname'>try_from</a>(u: <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>) -&gt; <a class="enum" href="https://doc.rust-lang.org/nightly/core/result/enum.Result.html" title="enum core::result::Result">Result</a>&lt;<a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.i128.html">i128</a>, &amp;'static <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.str.html">str</a>&gt;</code><a class='srclink' href='../src/uint/uint.rs.html#433-441' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the conversion.</p>
</div></div><h3 id='impl-TryFrom%3CU256%3E-2' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html" title="trait core::convert::TryFrom">TryFrom</a>&lt;<a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>&gt; for <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u32.html">u32</a></code><a href='#impl-TryFrom%3CU256%3E-2' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#74-89' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='associatedtype.Error-2' class="type"><code>type <a href='https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html#associatedtype.Error' class="type">Error</a> = &amp;'static <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.str.html">str</a></code></h4><div class='docblock'><p>The type returned in the event of a conversion error.</p>
</div><h4 id='method.try_from-2' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html#tymethod.try_from' class='fnname'>try_from</a>(u: <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>) -&gt; <a class="enum" href="https://doc.rust-lang.org/nightly/core/result/enum.Result.html" title="enum core::result::Result">Result</a>&lt;<a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u32.html">u32</a>, &amp;'static <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.str.html">str</a>&gt;</code><a class='srclink' href='../src/uint/uint.rs.html#78-88' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the conversion.</p>
</div></div><h3 id='impl-TryFrom%3CU256%3E-3' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html" title="trait core::convert::TryFrom">TryFrom</a>&lt;<a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>&gt; for <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.usize.html">usize</a></code><a href='#impl-TryFrom%3CU256%3E-3' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#74-89' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='associatedtype.Error-3' class="type"><code>type <a href='https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html#associatedtype.Error' class="type">Error</a> = &amp;'static <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.str.html">str</a></code></h4><div class='docblock'><p>The type returned in the event of a conversion error.</p>
</div><h4 id='method.try_from-3' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html#tymethod.try_from' class='fnname'>try_from</a>(u: <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>) -&gt; <a class="enum" href="https://doc.rust-lang.org/nightly/core/result/enum.Result.html" title="enum core::result::Result">Result</a>&lt;<a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.usize.html">usize</a>, &amp;'static <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.str.html">str</a>&gt;</code><a class='srclink' href='../src/uint/uint.rs.html#78-88' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the conversion.</p>
</div></div><h3 id='impl-TryFrom%3CU256%3E-4' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html" title="trait core::convert::TryFrom">TryFrom</a>&lt;<a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>&gt; for <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u64.html">u64</a></code><a href='#impl-TryFrom%3CU256%3E-4' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#74-89' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='associatedtype.Error-4' class="type"><code>type <a href='https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html#associatedtype.Error' class="type">Error</a> = &amp;'static <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.str.html">str</a></code></h4><div class='docblock'><p>The type returned in the event of a conversion error.</p>
</div><h4 id='method.try_from-4' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html#tymethod.try_from' class='fnname'>try_from</a>(u: <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>) -&gt; <a class="enum" href="https://doc.rust-lang.org/nightly/core/result/enum.Result.html" title="enum core::result::Result">Result</a>&lt;<a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.u64.html">u64</a>, &amp;'static <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.str.html">str</a>&gt;</code><a class='srclink' href='../src/uint/uint.rs.html#78-88' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the conversion.</p>
</div></div><h3 id='impl-TryFrom%3CU256%3E-5' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html" title="trait core::convert::TryFrom">TryFrom</a>&lt;<a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>&gt; for <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.i8.html">i8</a></code><a href='#impl-TryFrom%3CU256%3E-5' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#74-89' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='associatedtype.Error-5' class="type"><code>type <a href='https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html#associatedtype.Error' class="type">Error</a> = &amp;'static <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.str.html">str</a></code></h4><div class='docblock'><p>The type returned in the event of a conversion error.</p>
</div><h4 id='method.try_from-5' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html#tymethod.try_from' class='fnname'>try_from</a>(u: <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>) -&gt; <a class="enum" href="https://doc.rust-lang.org/nightly/core/result/enum.Result.html" title="enum core::result::Result">Result</a>&lt;<a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.i8.html">i8</a>, &amp;'static <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.str.html">str</a>&gt;</code><a class='srclink' href='../src/uint/uint.rs.html#78-88' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the conversion.</p>
</div></div><h3 id='impl-TryFrom%3CU256%3E-6' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html" title="trait core::convert::TryFrom">TryFrom</a>&lt;<a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>&gt; for <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.i16.html">i16</a></code><a href='#impl-TryFrom%3CU256%3E-6' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#74-89' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='associatedtype.Error-6' class="type"><code>type <a href='https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html#associatedtype.Error' class="type">Error</a> = &amp;'static <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.str.html">str</a></code></h4><div class='docblock'><p>The type returned in the event of a conversion error.</p>
</div><h4 id='method.try_from-6' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html#tymethod.try_from' class='fnname'>try_from</a>(u: <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>) -&gt; <a class="enum" href="https://doc.rust-lang.org/nightly/core/result/enum.Result.html" title="enum core::result::Result">Result</a>&lt;<a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.i16.html">i16</a>, &amp;'static <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.str.html">str</a>&gt;</code><a class='srclink' href='../src/uint/uint.rs.html#78-88' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the conversion.</p>
</div></div><h3 id='impl-TryFrom%3CU256%3E-7' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html" title="trait core::convert::TryFrom">TryFrom</a>&lt;<a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>&gt; for <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.i32.html">i32</a></code><a href='#impl-TryFrom%3CU256%3E-7' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#74-89' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='associatedtype.Error-7' class="type"><code>type <a href='https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html#associatedtype.Error' class="type">Error</a> = &amp;'static <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.str.html">str</a></code></h4><div class='docblock'><p>The type returned in the event of a conversion error.</p>
</div><h4 id='method.try_from-7' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html#tymethod.try_from' class='fnname'>try_from</a>(u: <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>) -&gt; <a class="enum" href="https://doc.rust-lang.org/nightly/core/result/enum.Result.html" title="enum core::result::Result">Result</a>&lt;<a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.i32.html">i32</a>, &amp;'static <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.str.html">str</a>&gt;</code><a class='srclink' href='../src/uint/uint.rs.html#78-88' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the conversion.</p>
</div></div><h3 id='impl-TryFrom%3CU256%3E-8' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html" title="trait core::convert::TryFrom">TryFrom</a>&lt;<a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>&gt; for <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.isize.html">isize</a></code><a href='#impl-TryFrom%3CU256%3E-8' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#74-89' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='associatedtype.Error-8' class="type"><code>type <a href='https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html#associatedtype.Error' class="type">Error</a> = &amp;'static <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.str.html">str</a></code></h4><div class='docblock'><p>The type returned in the event of a conversion error.</p>
</div><h4 id='method.try_from-8' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html#tymethod.try_from' class='fnname'>try_from</a>(u: <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>) -&gt; <a class="enum" href="https://doc.rust-lang.org/nightly/core/result/enum.Result.html" title="enum core::result::Result">Result</a>&lt;<a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.isize.html">isize</a>, &amp;'static <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.str.html">str</a>&gt;</code><a class='srclink' href='../src/uint/uint.rs.html#78-88' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the conversion.</p>
</div></div><h3 id='impl-TryFrom%3CU256%3E-9' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html" title="trait core::convert::TryFrom">TryFrom</a>&lt;<a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>&gt; for <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.i64.html">i64</a></code><a href='#impl-TryFrom%3CU256%3E-9' class='anchor'></a><a class='srclink' href='../src/uint/uint.rs.html#74-89' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='associatedtype.Error-9' class="type"><code>type <a href='https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html#associatedtype.Error' class="type">Error</a> = &amp;'static <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.str.html">str</a></code></h4><div class='docblock'><p>The type returned in the event of a conversion error.</p>
</div><h4 id='method.try_from-9' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html#tymethod.try_from' class='fnname'>try_from</a>(u: <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a>) -&gt; <a class="enum" href="https://doc.rust-lang.org/nightly/core/result/enum.Result.html" title="enum core::result::Result">Result</a>&lt;<a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.i64.html">i64</a>, &amp;'static <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.str.html">str</a>&gt;</code><a class='srclink' href='../src/uint/uint.rs.html#78-88' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the conversion.</p>
</div></div></div><h2 id='synthetic-implementations' class='small-section-header'>Auto Trait Implementations<a href='#synthetic-implementations' class='anchor'></a></h2><div id='synthetic-implementations-list'><h3 id='impl-RefUnwindSafe' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/std/panic/trait.RefUnwindSafe.html" title="trait std::panic::RefUnwindSafe">RefUnwindSafe</a> for <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-RefUnwindSafe' class='anchor'></a></h3><div class='impl-items'></div><h3 id='impl-Send' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/core/marker/trait.Send.html" title="trait core::marker::Send">Send</a> for <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-Send' class='anchor'></a></h3><div class='impl-items'></div><h3 id='impl-Sync' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html" title="trait core::marker::Sync">Sync</a> for <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-Sync' class='anchor'></a></h3><div class='impl-items'></div><h3 id='impl-Unpin' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/core/marker/trait.Unpin.html" title="trait core::marker::Unpin">Unpin</a> for <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-Unpin' class='anchor'></a></h3><div class='impl-items'></div><h3 id='impl-UnwindSafe' class='impl'><code class='in-band'>impl <a class="trait" href="https://doc.rust-lang.org/nightly/std/panic/trait.UnwindSafe.html" title="trait std::panic::UnwindSafe">UnwindSafe</a> for <a class="struct" href="../near_clp/struct.U256.html" title="struct near_clp::U256">U256</a></code><a href='#impl-UnwindSafe' class='anchor'></a></h3><div class='impl-items'></div></div><h2 id='blanket-implementations' class='small-section-header'>Blanket Implementations<a href='#blanket-implementations' class='anchor'></a></h2><div id='blanket-implementations-list'><h3 id='impl-Any' class='impl'><code class='in-band'>impl&lt;T&gt; <a class="trait" href="https://doc.rust-lang.org/nightly/core/any/trait.Any.html" title="trait core::any::Any">Any</a> for T <span class="where fmt-newline">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: 'static + ?<a class="trait" href="https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html" title="trait core::marker::Sized">Sized</a>,&nbsp;</span></code><a href='#impl-Any' class='anchor'></a><a class='srclink' href='https://doc.rust-lang.org/nightly/src/core/any.rs.html#108-112' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='method.type_id' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/any/trait.Any.html#tymethod.type_id' class='fnname'>type_id</a>(&amp;self) -&gt; <a class="struct" href="https://doc.rust-lang.org/nightly/core/any/struct.TypeId.html" title="struct core::any::TypeId">TypeId</a></code><a class='srclink' href='https://doc.rust-lang.org/nightly/src/core/any.rs.html#109-111' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Gets the <code>TypeId</code> of <code>self</code>. <a href="https://doc.rust-lang.org/nightly/core/any/trait.Any.html#tymethod.type_id">Read more</a></p>
</div></div><h3 id='impl-Borrow%3CT%3E' class='impl'><code class='in-band'>impl&lt;T&gt; <a class="trait" href="https://doc.rust-lang.org/nightly/core/borrow/trait.Borrow.html" title="trait core::borrow::Borrow">Borrow</a>&lt;T&gt; for T <span class="where fmt-newline">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: ?<a class="trait" href="https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html" title="trait core::marker::Sized">Sized</a>,&nbsp;</span></code><a href='#impl-Borrow%3CT%3E' class='anchor'></a><a class='srclink' href='https://doc.rust-lang.org/nightly/src/core/borrow.rs.html#213-217' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='method.borrow' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/borrow/trait.Borrow.html#tymethod.borrow' class='fnname'>borrow</a>(&amp;self) -&gt; <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.reference.html">&amp;</a>T</code><a class='srclink' href='https://doc.rust-lang.org/nightly/src/core/borrow.rs.html#214-216' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Immutably borrows from an owned value. <a href="https://doc.rust-lang.org/nightly/core/borrow/trait.Borrow.html#tymethod.borrow">Read more</a></p>
</div></div><h3 id='impl-BorrowMut%3CT%3E' class='impl'><code class='in-band'>impl&lt;T&gt; <a class="trait" href="https://doc.rust-lang.org/nightly/core/borrow/trait.BorrowMut.html" title="trait core::borrow::BorrowMut">BorrowMut</a>&lt;T&gt; for T <span class="where fmt-newline">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: ?<a class="trait" href="https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html" title="trait core::marker::Sized">Sized</a>,&nbsp;</span></code><a href='#impl-BorrowMut%3CT%3E' class='anchor'></a><a class='srclink' href='https://doc.rust-lang.org/nightly/src/core/borrow.rs.html#220-224' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='method.borrow_mut' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut' class='fnname'>borrow_mut</a>(&amp;mut self) -&gt; <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.reference.html">&amp;mut </a>T</code><a class='srclink' href='https://doc.rust-lang.org/nightly/src/core/borrow.rs.html#221-223' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Mutably borrows from an owned value. <a href="https://doc.rust-lang.org/nightly/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut">Read more</a></p>
</div></div><h3 id='impl-Equivalent%3CK%3E' class='impl'><code class='in-band'>impl&lt;Q, K&gt; <a class="trait" href="../indexmap/equivalent/trait.Equivalent.html" title="trait indexmap::equivalent::Equivalent">Equivalent</a>&lt;K&gt; for Q <span class="where fmt-newline">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: <a class="trait" href="https://doc.rust-lang.org/nightly/core/borrow/trait.Borrow.html" title="trait core::borrow::Borrow">Borrow</a>&lt;Q&gt; + ?<a class="trait" href="https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html" title="trait core::marker::Sized">Sized</a>,<br>&nbsp;&nbsp;&nbsp;&nbsp;Q: <a class="trait" href="https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html" title="trait core::cmp::Eq">Eq</a> + ?<a class="trait" href="https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html" title="trait core::marker::Sized">Sized</a>,&nbsp;</span></code><a href='#impl-Equivalent%3CK%3E' class='anchor'></a><a class='srclink' href='../src/indexmap/equivalent.rs.html#18-27' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='method.equivalent' class="method hidden"><code>fn <a href='../indexmap/equivalent/trait.Equivalent.html#tymethod.equivalent' class='fnname'>equivalent</a>(&amp;self, key: <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.reference.html">&amp;</a>K) -&gt; <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.bool.html">bool</a></code><a class='srclink' href='../src/indexmap/equivalent.rs.html#24-26' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Compare self to <code>key</code> and return <code>true</code> if they are equal.</p>
</div></div><h3 id='impl-From%3CT%3E' class='impl'><code class='in-band'>impl&lt;T&gt; <a class="trait" href="https://doc.rust-lang.org/nightly/core/convert/trait.From.html" title="trait core::convert::From">From</a>&lt;T&gt; for T</code><a href='#impl-From%3CT%3E' class='anchor'></a><a class='srclink' href='https://doc.rust-lang.org/nightly/src/core/convert/mod.rs.html#566-570' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='method.from-17' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from' class='fnname'>from</a>(t: T) -&gt; T</code><a class='srclink' href='https://doc.rust-lang.org/nightly/src/core/convert/mod.rs.html#567-569' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the conversion.</p>
</div></div><h3 id='impl-Into%3CU%3E' class='impl'><code class='in-band'>impl&lt;T, U&gt; <a class="trait" href="https://doc.rust-lang.org/nightly/core/convert/trait.Into.html" title="trait core::convert::Into">Into</a>&lt;U&gt; for T <span class="where fmt-newline">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: <a class="trait" href="https://doc.rust-lang.org/nightly/core/convert/trait.From.html" title="trait core::convert::From">From</a>&lt;T&gt;,&nbsp;</span></code><a href='#impl-Into%3CU%3E' class='anchor'></a><a class='srclink' href='https://doc.rust-lang.org/nightly/src/core/convert/mod.rs.html#555-562' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='method.into' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/convert/trait.Into.html#tymethod.into' class='fnname'>into</a>(self) -&gt; U</code><a class='srclink' href='https://doc.rust-lang.org/nightly/src/core/convert/mod.rs.html#559-561' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the conversion.</p>
</div></div><h3 id='impl-NumAssignOps%3CRhs%3E' class='impl'><code class='in-band'>impl&lt;T, Rhs&gt; <a class="trait" href="../num_traits/trait.NumAssignOps.html" title="trait num_traits::NumAssignOps">NumAssignOps</a>&lt;Rhs&gt; for T <span class="where fmt-newline">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: <a class="trait" href="https://doc.rust-lang.org/nightly/core/ops/arith/trait.AddAssign.html" title="trait core::ops::arith::AddAssign">AddAssign</a>&lt;Rhs&gt; + <a class="trait" href="https://doc.rust-lang.org/nightly/core/ops/arith/trait.SubAssign.html" title="trait core::ops::arith::SubAssign">SubAssign</a>&lt;Rhs&gt; + <a class="trait" href="https://doc.rust-lang.org/nightly/core/ops/arith/trait.MulAssign.html" title="trait core::ops::arith::MulAssign">MulAssign</a>&lt;Rhs&gt; + <a class="trait" href="https://doc.rust-lang.org/nightly/core/ops/arith/trait.DivAssign.html" title="trait core::ops::arith::DivAssign">DivAssign</a>&lt;Rhs&gt; + <a class="trait" href="https://doc.rust-lang.org/nightly/core/ops/arith/trait.RemAssign.html" title="trait core::ops::arith::RemAssign">RemAssign</a>&lt;Rhs&gt;,&nbsp;</span></code><a href='#impl-NumAssignOps%3CRhs%3E' class='anchor'></a><a class='srclink' href='../src/num_traits/lib.rs.html#129-132' title='goto source code'>[src]</a></h3><div class='impl-items'></div><h3 id='impl-NumOps%3CRhs%2C%20Output%3E' class='impl'><code class='in-band'>impl&lt;T, Rhs, Output&gt; <a class="trait" href="../num_traits/trait.NumOps.html" title="trait num_traits::NumOps">NumOps</a>&lt;Rhs, Output&gt; for T <span class="where fmt-newline">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: <a class="trait" href="https://doc.rust-lang.org/nightly/core/ops/arith/trait.Sub.html" title="trait core::ops::arith::Sub">Sub</a>&lt;Rhs, Output = Output&gt; + <a class="trait" href="https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html" title="trait core::ops::arith::Mul">Mul</a>&lt;Rhs, Output = Output&gt; + <a class="trait" href="https://doc.rust-lang.org/nightly/core/ops/arith/trait.Div.html" title="trait core::ops::arith::Div">Div</a>&lt;Rhs, Output = Output&gt; + <a class="trait" href="https://doc.rust-lang.org/nightly/core/ops/arith/trait.Add.html" title="trait core::ops::arith::Add">Add</a>&lt;Rhs, Output = Output&gt; + <a class="trait" href="https://doc.rust-lang.org/nightly/core/ops/arith/trait.Rem.html" title="trait core::ops::arith::Rem">Rem</a>&lt;Rhs, Output = Output&gt;,&nbsp;</span></code><a href='#impl-NumOps%3CRhs%2C%20Output%3E' class='anchor'></a><a class='srclink' href='../src/num_traits/lib.rs.html#98-105' title='goto source code'>[src]</a></h3><div class='impl-items'></div><h3 id='impl-RefNum%3CBase%3E' class='impl'><code class='in-band'>impl&lt;T, Base&gt; <a class="trait" href="../num_traits/trait.RefNum.html" title="trait num_traits::RefNum">RefNum</a>&lt;Base&gt; for T <span class="where fmt-newline">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: <a class="trait" href="../num_traits/trait.NumOps.html" title="trait num_traits::NumOps">NumOps</a>&lt;Base, Base&gt; + for&lt;'r&gt; <a class="trait" href="../num_traits/trait.NumOps.html" title="trait num_traits::NumOps">NumOps</a>&lt;<a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.reference.html">&amp;'r </a>Base, Base&gt;,&nbsp;</span></code><a href='#impl-RefNum%3CBase%3E' class='anchor'></a><a class='srclink' href='../src/num_traits/lib.rs.html#119' title='goto source code'>[src]</a></h3><div class='impl-items'></div><h3 id='impl-Same%3CT%3E' class='impl'><code class='in-band'>impl&lt;T&gt; <a class="trait" href="../typenum/type_operators/trait.Same.html" title="trait typenum::type_operators::Same">Same</a>&lt;T&gt; for T</code><a href='#impl-Same%3CT%3E' class='anchor'></a><a class='srclink' href='../src/typenum/type_operators.rs.html#33-35' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='associatedtype.Output-60' class="type"><code>type <a href='../typenum/type_operators/trait.Same.html#associatedtype.Output' class="type">Output</a> = T</code></h4><div class='docblock'><p>Should always be <code>Self</code></p>
</div></div><h3 id='impl-ToOwned' class='impl'><code class='in-band'>impl&lt;T&gt; <a class="trait" href="https://doc.rust-lang.org/nightly/alloc/borrow/trait.ToOwned.html" title="trait alloc::borrow::ToOwned">ToOwned</a> for T <span class="where fmt-newline">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: <a class="trait" href="https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html" title="trait core::clone::Clone">Clone</a>,&nbsp;</span></code><a href='#impl-ToOwned' class='anchor'></a><a class='srclink' href='https://doc.rust-lang.org/nightly/src/alloc/borrow.rs.html#80-92' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='associatedtype.Owned' class="type"><code>type <a href='https://doc.rust-lang.org/nightly/alloc/borrow/trait.ToOwned.html#associatedtype.Owned' class="type">Owned</a> = T</code></h4><div class='docblock'><p>The resulting type after obtaining ownership.</p>
</div><h4 id='method.to_owned' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/alloc/borrow/trait.ToOwned.html#tymethod.to_owned' class='fnname'>to_owned</a>(&amp;self) -&gt; T</code><a class='srclink' href='https://doc.rust-lang.org/nightly/src/alloc/borrow.rs.html#85-87' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Creates owned data from borrowed data, usually by cloning. <a href="https://doc.rust-lang.org/nightly/alloc/borrow/trait.ToOwned.html#tymethod.to_owned">Read more</a></p>
</div><h4 id='method.clone_into' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/alloc/borrow/trait.ToOwned.html#method.clone_into' class='fnname'>clone_into</a>(&amp;self, target: <a class="primitive" href="https://doc.rust-lang.org/nightly/std/primitive.reference.html">&amp;mut </a>T)</code><a class='srclink' href='https://doc.rust-lang.org/nightly/src/alloc/borrow.rs.html#89-91' title='goto source code'>[src]</a></h4><div class='stability hidden'><div class='stab unstable'><details><summary><span class='emoji'>🔬</span> This is a nightly-only experimental API. (<code>toowned_clone_into</code>)</summary><p>recently added</p>
</details></div></div><div class='docblock hidden'><p>Uses borrowed data to replace owned data, usually by cloning. <a href="https://doc.rust-lang.org/nightly/alloc/borrow/trait.ToOwned.html#method.clone_into">Read more</a></p>
</div></div><h3 id='impl-ToString' class='impl'><code class='in-band'>impl&lt;T&gt; <a class="trait" href="https://doc.rust-lang.org/nightly/alloc/string/trait.ToString.html" title="trait alloc::string::ToString">ToString</a> for T <span class="where fmt-newline">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: <a class="trait" href="https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html" title="trait core::fmt::Display">Display</a> + ?<a class="trait" href="https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html" title="trait core::marker::Sized">Sized</a>,&nbsp;</span></code><a href='#impl-ToString' class='anchor'></a><a class='srclink' href='https://doc.rust-lang.org/nightly/src/alloc/string.rs.html#2237-2247' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='method.to_string' class="method hidden"><code>default fn <a href='https://doc.rust-lang.org/nightly/alloc/string/trait.ToString.html#tymethod.to_string' class='fnname'>to_string</a>(&amp;self) -&gt; <a class="struct" href="https://doc.rust-lang.org/nightly/alloc/string/struct.String.html" title="struct alloc::string::String">String</a></code><a class='srclink' href='https://doc.rust-lang.org/nightly/src/alloc/string.rs.html#2239-2246' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Converts the given value to a <code>String</code>. <a href="https://doc.rust-lang.org/nightly/alloc/string/trait.ToString.html#tymethod.to_string">Read more</a></p>
</div></div><h3 id='impl-TryFrom%3CU%3E' class='impl'><code class='in-band'>impl&lt;T, U&gt; <a class="trait" href="https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html" title="trait core::convert::TryFrom">TryFrom</a>&lt;U&gt; for T <span class="where fmt-newline">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: <a class="trait" href="https://doc.rust-lang.org/nightly/core/convert/trait.Into.html" title="trait core::convert::Into">Into</a>&lt;T&gt;,&nbsp;</span></code><a href='#impl-TryFrom%3CU%3E' class='anchor'></a><a class='srclink' href='https://doc.rust-lang.org/nightly/src/core/convert/mod.rs.html#603-612' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='associatedtype.Error-12' class="type"><code>type <a href='https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html#associatedtype.Error' class="type">Error</a> = <a class="enum" href="https://doc.rust-lang.org/nightly/core/convert/enum.Infallible.html" title="enum core::convert::Infallible">Infallible</a></code></h4><div class='docblock'><p>The type returned in the event of a conversion error.</p>
</div><h4 id='method.try_from-12' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html#tymethod.try_from' class='fnname'>try_from</a>(value: U) -&gt; <a class="enum" href="https://doc.rust-lang.org/nightly/core/result/enum.Result.html" title="enum core::result::Result">Result</a>&lt;T, &lt;T as <a class="trait" href="https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html" title="trait core::convert::TryFrom">TryFrom</a>&lt;U&gt;&gt;::<a class="type" href="https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html#associatedtype.Error" title="type core::convert::TryFrom::Error">Error</a>&gt;</code><a class='srclink' href='https://doc.rust-lang.org/nightly/src/core/convert/mod.rs.html#609-611' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the conversion.</p>
</div></div><h3 id='impl-TryInto%3CU%3E' class='impl'><code class='in-band'>impl&lt;T, U&gt; <a class="trait" href="https://doc.rust-lang.org/nightly/core/convert/trait.TryInto.html" title="trait core::convert::TryInto">TryInto</a>&lt;U&gt; for T <span class="where fmt-newline">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: <a class="trait" href="https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html" title="trait core::convert::TryFrom">TryFrom</a>&lt;T&gt;,&nbsp;</span></code><a href='#impl-TryInto%3CU%3E' class='anchor'></a><a class='srclink' href='https://doc.rust-lang.org/nightly/src/core/convert/mod.rs.html#589-598' title='goto source code'>[src]</a></h3><div class='impl-items'><h4 id='associatedtype.Error-13' class="type"><code>type <a href='https://doc.rust-lang.org/nightly/core/convert/trait.TryInto.html#associatedtype.Error' class="type">Error</a> = &lt;U as <a class="trait" href="https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html" title="trait core::convert::TryFrom">TryFrom</a>&lt;T&gt;&gt;::<a class="type" href="https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html#associatedtype.Error" title="type core::convert::TryFrom::Error">Error</a></code></h4><div class='docblock'><p>The type returned in the event of a conversion error.</p>
</div><h4 id='method.try_into' class="method hidden"><code>fn <a href='https://doc.rust-lang.org/nightly/core/convert/trait.TryInto.html#tymethod.try_into' class='fnname'>try_into</a>(self) -&gt; <a class="enum" href="https://doc.rust-lang.org/nightly/core/result/enum.Result.html" title="enum core::result::Result">Result</a>&lt;U, &lt;U as <a class="trait" href="https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html" title="trait core::convert::TryFrom">TryFrom</a>&lt;T&gt;&gt;::<a class="type" href="https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html#associatedtype.Error" title="type core::convert::TryFrom::Error">Error</a>&gt;</code><a class='srclink' href='https://doc.rust-lang.org/nightly/src/core/convert/mod.rs.html#595-597' title='goto source code'>[src]</a></h4><div class='docblock hidden'><p>Performs the conversion.</p>
</div></div></div></section><section id="search" class="content hidden"></section><section class="footer"></section><script>window.rootPath = "../";window.currentCrate = "near_clp";</script><script src="../main.js"></script><script defer src="../search-index.js"></script></body></html>
'''
'''--- contract/tests/simulation_test.rs ---
mod utils;
use crate::utils::{
    ExternalUser,
    MAX_GAS,
    TEN_NEAR,
};
use near_clp::PoolInfo;
//use near_primitives::errors::ActionErrorKind;
//use near_primitives::errors::TxExecutionError;
use near_primitives::{
    transaction::ExecutionStatus,
    types::{AccountId},
};
use near_runtime_standalone::RuntimeStandalone;
use near_sdk::json_types::{U128, U64};
use serde_json::json;
use utils::{
    deploy_and_init_fungible_token, deploy_clp, near_call, near_view, new_root, ntoy,
    NewClpArgs, NewFungibleTokenArgs,
};

pub const CLP_ACCOUNT_NAME: &str = "nearclp";
pub const FUNGIBLE_TOKEN_ACCOUNT_NAME: &str = "fungible_token";
pub const ALICE_ACCOUNT_NAME: &str = "alice";
pub const BOB_ACCOUNT_NAME: &str = "bob";
pub const CAROL_ACCOUNT_NAME: &str = "carol";
pub const DAVE_ACCOUNT_NAME: &str = "dave";
pub const FUN_TOKEN2_ACCOUNT_NAME: &str = "fun_token_2";

#[test]
fn deploy_fungible_mint_for_alice() {
    let (mut r, _, fungible_token, _, _, _, _, _, _) = basic_setup();
    let total_supply = 1_000_000;

    let args = NewFungibleTokenArgs {
        owner_id: FUNGIBLE_TOKEN_ACCOUNT_NAME.into(),
        total_supply: U128(total_supply.clone()),
    };

    deploy_and_init_fungible_token(&mut r, &fungible_token, "new", U64(MAX_GAS), &args).unwrap();

    let returned_supply: U128 = near_view(
        &r,
        &FUNGIBLE_TOKEN_ACCOUNT_NAME.into(),
        "get_total_supply",
        "",
    );
    assert_eq!(returned_supply.0, total_supply);
    println!("Note that we can use println! instead of env::log in simulation tests.");
    let demo_variable = "-- --nocapture".to_string();
    println!(
        "Just remember to to add this after 'cargo test': '{}'",
        demo_variable
    );

    let alice_balance: U128 = near_view(
        &r,
        &FUNGIBLE_TOKEN_ACCOUNT_NAME.into(),
        "get_balance",
        &json!({
            "owner_id": ALICE_ACCOUNT_NAME,
        }),
    );
    // Confirm Alice's initial balance is 0
    assert_eq!(alice_balance.0, 0);
    // send some to Alice
    let _execution_result = near_call(
        &mut r,
        &fungible_token,
        &fungible_token.account_id(),
        "transfer",
        &serde_json::to_vec(&json!({
            "new_owner_id": ALICE_ACCOUNT_NAME,
            "amount": "191919",
        }))
        .unwrap(),
        U64(MAX_GAS),
        36_500_000_000_000_000_000_000,
    )
    .unwrap();

    let alice_balance: U128 = near_view(
        &r,
        &FUNGIBLE_TOKEN_ACCOUNT_NAME.into(),
        "get_balance",
        &json!({
            "owner_id": ALICE_ACCOUNT_NAME,
        }),
    );
    // Confirm Alice's initial balance has increased to set amount
    assert_eq!(alice_balance.0, 191_919);
}

// utility, get pool info from CLP
fn get_pool_info(r: &RuntimeStandalone, funtok: &str) -> PoolInfo {
    return near_view(
        r,
        &CLP_ACCOUNT_NAME.into(),
        "pool_info",
        &json!({ "token": funtok }),
    );
}

#[test]
fn alice_is_a_lp() {
    let (mut r, _, fungible_token, fun_token2, clp, alice, _bob, carol, _dave) = basic_setup();

    let args = NewFungibleTokenArgs {
        owner_id: FUNGIBLE_TOKEN_ACCOUNT_NAME.into(),
        total_supply: U128(1_000_000),
    };

    println!("deploy_and_init_fungible_token");
    deploy_and_init_fungible_token(&mut r, &fungible_token, "new", U64(MAX_GAS), &args).unwrap();

    let args2 = NewFungibleTokenArgs {
        owner_id: FUN_TOKEN2_ACCOUNT_NAME.into(),
        total_supply: U128(10_000_000),
    };

    println!("deploy_and_init_fungible_token 2");
    deploy_and_init_fungible_token(&mut r, &fun_token2, "new", U64(MAX_GAS), &args2).unwrap();

    let args_clp = NewClpArgs {
        owner: ALICE_ACCOUNT_NAME.into(),
    };
    println!("deploy_and_init_clp");
    deploy_clp(&mut r, &clp, "new", U64(MAX_GAS), &args_clp).unwrap();

    // alice creates a pool
    println!("about to create alice's pool");
    call(
        &mut r,
        &alice,
        &clp.account_id(),
        "create_pool",
        format!(r#"{{ "token":"{}" }}"#,FUNGIBLE_TOKEN_ACCOUNT_NAME),
        0,
    );

    assert_eq!(
        get_pool_info(&r, &FUNGIBLE_TOKEN_ACCOUNT_NAME),
        PoolInfo {
            near_bal: 0,
            token_bal: 0,
            total_shares: 0
        },
        "new pool should be empty"
    );

    println!("alice adds first liquidity");

    let near_deposit: u128 = ntoy(3_000);
    let token_deposit: u128 = ntoy(3_000_000); // 1/1000 ratio

    call(
        &mut r,
        &alice,
        &clp.account_id(),
        "add_liquidity",
        format!(
            r#"{{
                    "token": "{tok}",
                    "max_token_amount": {mta},
                    "min_shares_amont": {msa}
                }}"#,
            tok = FUNGIBLE_TOKEN_ACCOUNT_NAME,
            mta = token_deposit,
            msa = near_deposit
        ),
        near_deposit.into(),
    );

    let pool_info = get_pool_info(&r, &FUNGIBLE_TOKEN_ACCOUNT_NAME);
    assert_eq!(
        pool_info,
        PoolInfo {
            near_bal: near_deposit.into(),
            token_bal: token_deposit.into(),
            total_shares: near_deposit.into()
        },
        "new pool balance should be from first deposit"
    );

    println!("pool_info:{}",pool_info);
    let prev_pool_near_blance = pool_info.near_bal;

    // Check Carols's fungible token balance before
    println!("send some funtok to carol");
    call(
        &mut r,
        &fungible_token,
        &fungible_token.account_id(),
        "transfer",
        format!(r#"{{
            "new_owner_id": {},
            "amount": "191919",
        }}"#,"carol"),
        TEN_NEAR, //refundable, required if the fun-contract needs more storage
    );

    println!("let's see how many tokens carol has now");
    let carol_funt_balance_pre:u128 = get_funtok_balance(&mut r, &carol).into();
    println!("Carol fun tokens {}", carol_funt_balance_pre);

    println!("carol swaps some near for tokens");
    let carol_deposit_yoctos: u128 = ntoy(10);
    let min_token_expected: u128 = ntoy(9900); 

    call(
        &mut r,
        &carol,
        &clp.account_id(),
        "swap_near_to_reserve_exact_in",
        format!(
            r#"{{
                "token": "{tok}",
                "min_tokens": {min_tok}
                }}"#,
            tok = FUNGIBLE_TOKEN_ACCOUNT_NAME,
            min_tok = min_token_expected
        ),
        carol_deposit_yoctos.into(),
    );

    println!("let's see how many token carol has after the swap");
    let carol_funt_balance_post:u128 = get_funtok_balance(&mut r, &carol).into();
    println!("Carol tokens after {}", carol_funt_balance_post);

    let carol_received = carol_funt_balance_post - carol_funt_balance_pre;

    assert!(carol_received >= min_token_expected, "carol should have received at least min_token_expected");

    assert_eq!(
        get_pool_info(&r, &FUNGIBLE_TOKEN_ACCOUNT_NAME),
        PoolInfo {
            near_bal: (prev_pool_near_blance + carol_deposit_yoctos).into(),
            token_bal: (token_deposit - carol_received).into(),
            total_shares: (prev_pool_near_blance + carol_deposit_yoctos).into()
        },
        "new pool balance after swap"
    );

    /*
    let mut alice_counter: u8 = near_view(
        &r,
        &FUN_TOKEN2_ACCOUNT_NAME.into(),
        "get_num",
        &json!({
            "account": ALICE_ACCOUNT_NAME
        })
    );

    assert_eq!(alice_counter.clone(), 0);

    let mut execution_outcome = near_call(&mut r,
        &alice,
        &FUN_TOKEN2_ACCOUNT_NAME,
        "increment",
        &[],
        U64(MAX_GAS),
        0
    ).unwrap();

    println!("Log(s) {:?}", execution_outcome.logs);

    // Make sure it was successful
    assert_eq!(execution_outcome.status, ExecutionStatus::SuccessValue(vec![]));

    alice_counter = near_view(
        &r,
        &FUN_TOKEN2_ACCOUNT_NAME.into(),
        "get_num",
        &json!({
            "account": ALICE_ACCOUNT_NAME
        })
    );

    assert_eq!(alice_counter.clone(), 1);

    // Now we expect that when we increment again, the number will be two, which will move a fungible token
    // Before we can move over the fungible token, though, we need to

    // Check Alice's fungible token balance before, which should be zero.
    let mut alice_tokens: U128 = near_view(
        &r,
        &FUNGIBLE_TOKEN_ACCOUNT_NAME.into(),
        "get_balance",
        &json!({
            "owner_id": ALICE_ACCOUNT_NAME
        })
    );

    assert_eq!(alice_tokens.clone().0, 0);

    // Now increment again
    execution_outcome = near_call(&mut r,
        &alice,
        &CLP_ACCOUNT_NAME,
        "cross_contract_increment",
        &serde_json::to_vec(&json!({
            "counter_account": FUN_TOKEN2_ACCOUNT_NAME,
            "token_account": FUNGIBLE_TOKEN_ACCOUNT_NAME,
        }),).unwrap(),
        U64(MAX_GAS),
        0
    ).unwrap();

    println!("Log(s) {:?}", execution_outcome.logs);
    // Make sure it was successful
    assert_eq!(execution_outcome.status, ExecutionStatus::SuccessValue(vec![]));

    // Check that the number has increased to 2
    alice_counter = near_view(
        &r,
        &FUN_TOKEN2_ACCOUNT_NAME.into(),
        "get_num",
        &json!({
            "account": ALICE_ACCOUNT_NAME
        })
    );

    assert_eq!(alice_counter.clone(), 2);

    // Cross-contract call within a callback (see README for more details)
    // Check that the fungible token has been given to Alice since 2 is an even number
    // Note: this is a current limitation with simulation tests.
    // At this time you cannot send more cross-contract calls inside of a cross-contract callback
    // Intentionally commented out the final assertion that would reasonably succeed
    /*
    let alice_new_tokens: U128 = near_view(
        &r,
        &FUNGIBLE_TOKEN_ACCOUNT_NAME.into(),
        "get_balance",
        &json!({
            "owner_id": ALICE_ACCOUNT_NAME
        })
    );

    assert_eq!(alice_new_tokens.clone().0, 1);
    */

    // Below we will demonstrate handling an error and a limitation with capturing errors in simulation testing.
    // The following call will fail because we're trying to transfer fungible tokens from an account to itself.

    let will_error = near_call(&mut r,
        &simulation_example,
        &CLP_ACCOUNT_NAME,
        "send_token_if_counter_even",
        &serde_json::to_vec(&json!({
            "new_num": alice_counter.clone(),
            "token_account": FUNGIBLE_TOKEN_ACCOUNT_NAME,
            "recipient_account": CLP_ACCOUNT_NAME,
        }),).unwrap(),
        U64(MAX_GAS),
        0
    );
    if will_error.is_err() {
        let execution_status  = will_error.clone().unwrap_err().status;

        #[allow(unused_variables)]
        if let ExecutionStatus::Failure(TxExecutionError::ActionError(near_primitives::errors::ActionError { index, kind })) = execution_status {
            if let ActionErrorKind::FunctionCallError(near_vm_errors::FunctionCallError::HostError(near_vm_errors::HostError::GuestPanic { panic_msg })) = kind {
                assert_eq!(panic_msg, "(post_transfer) The promise failed. See receipt failures.".to_string());

                // Uncomment the below line if the ".then" is removed at the bottom of send_token_if_counter_even in src/lib.rs
                // assert!(panic_msg.contains("The new owner should be different from the current owner"));
            }
        }
    }

    // Error messages early in promise execution (see README for more details)
    // Note that above, the error we received is the error set up in src/lib.rs and not the error returned from the fungible token contract.
    // (At the time of this writing, the error message for an account attempting to transfer tokens to itself would be:
    // "The new owner should be different from the current owner"
    // This demonstrates a limitation in simulation testing at the moment. Please see the README for more information on practical debugging steps.

    // Now that we've finished demonstrating that limitation, we'll make the call with the correct

    // Confirm that the simulation account has zero fungible tokens
    let fungible_tokens: U128 = near_view(
        &r,
        &FUNGIBLE_TOKEN_ACCOUNT_NAME.into(),
        "get_balance",
        &json!({
            "owner_id": CLP_ACCOUNT_NAME
        })
    );

    assert_eq!(fungible_tokens.clone().0, 0);

    // Give 50 fungible tokens to simulation account

    near_call(&mut r,
              &fungible_token,
              &FUNGIBLE_TOKEN_ACCOUNT_NAME,
              "transfer",
              &serde_json::to_vec(&json!({
            "new_owner_id": CLP_ACCOUNT_NAME,
            "amount": "50",
        }),).unwrap(),
              U64(MAX_GAS),
              36_500_000_000_000_000_000_000
    ).unwrap();

    // Now transfer one of those fungible tokens to Alice

    let will_succeed = near_call(&mut r,
        &simulation_example,
        &CLP_ACCOUNT_NAME,
        "send_token_if_counter_even",
        &serde_json::to_vec(&json!({
            "new_num": alice_counter.clone(),
            "token_account": FUNGIBLE_TOKEN_ACCOUNT_NAME,
            "recipient_account": ALICE_ACCOUNT_NAME,
        }),).unwrap(),
        U64(MAX_GAS),
        0
    ).unwrap();

    println!("Log(s) {:?}", will_succeed.logs);
    // Make sure it was successful
    assert_eq!(will_succeed.status, ExecutionStatus::SuccessValue(vec![]));

    alice_tokens = near_view(
        &r,
        &FUNGIBLE_TOKEN_ACCOUNT_NAME.into(),
        "get_balance",
        &json!({
            "owner_id": ALICE_ACCOUNT_NAME
        })
    );

    assert_eq!(alice_tokens.clone().0, 1);

    let fungible_tokens: U128 = near_view(
        &r,
        &FUNGIBLE_TOKEN_ACCOUNT_NAME.into(),
        "get_balance",
        &json!({
            "owner_id": CLP_ACCOUNT_NAME
        })
    );

    assert_eq!(fungible_tokens.clone().0, 49);
    */
}

fn basic_setup() -> (
    RuntimeStandalone,
    ExternalUser,
    ExternalUser,
    ExternalUser,
    ExternalUser,
    ExternalUser,
    ExternalUser,
    ExternalUser,
    ExternalUser,
) {
    let (mut r, main) = new_root("main.testnet".into());

    let fungible_token = main
        .create_external(&mut r, &FUNGIBLE_TOKEN_ACCOUNT_NAME.into(), ntoy(1_000_000))
        .unwrap();

    let funt2 = main
        .create_external(&mut r, &FUN_TOKEN2_ACCOUNT_NAME.into(), ntoy(1_000_000))
        .unwrap();

    let clp = main
        .create_external(&mut r, &CLP_ACCOUNT_NAME.into(), ntoy(1_000_000))
        .unwrap();

    let alice = main
        .create_external(&mut r, &ALICE_ACCOUNT_NAME.into(), ntoy(1_000_000))
        .unwrap();

    let bob = main
        .create_external(&mut r, &BOB_ACCOUNT_NAME.into(), ntoy(2_000_000))
        .unwrap();

    let carol = main
        .create_external(&mut r, &CAROL_ACCOUNT_NAME.into(), ntoy(5_000))
        .unwrap();

    let dave = main
        .create_external(&mut r, &DAVE_ACCOUNT_NAME.into(), ntoy(3_000))
        .unwrap();

    return (r, main, fungible_token, funt2, clp, alice, bob, carol, dave);
}

//util fn
fn get_funtok_balance(    
    r: &mut RuntimeStandalone,
    account: &ExternalUser
) -> U128 {

    let result: U128 = near_view(
        &r,
        &FUNGIBLE_TOKEN_ACCOUNT_NAME.into(),
        "get_balance",
        &json!({
            "owner_id": &account.account_id()
        })
    );

    return result;

}

pub fn call(    
    runtime: &mut RuntimeStandalone,
    sending_account: &ExternalUser,
    contract: &AccountId,
    method: &str,
    args: String,
    attached_amount: u128
) {

    let gas = MAX_GAS;

    let tx = sending_account
        .new_tx(runtime, contract)
        .function_call(method.into(), args.as_bytes().to_vec(), gas.into(), attached_amount)
        .sign(&sending_account.signer);
    
    let execution_outcome = runtime.resolve_tx(tx).unwrap(); //first TXN - unwraps to ExecutionOutcome
    runtime.process_all().unwrap(); //proces until there's no more generated receipts

    /* THE ABOVE CODE REPLACED THIS: near_call(runtime, //runtime
        sending_account, //sending account
        contract, //contract
        method,
        args.as_bytes(),
        U64(MAX_GAS),
        attached_amount
    )
    .unwrap();
    */

    println!("--------------------------------");
    println!("-- {}.{}() --", contract,method);
    println!("execution_outcome.status {:?}", execution_outcome.status);
    println!("execution_outcome {:?}", execution_outcome);
    match execution_outcome.status {
        ExecutionStatus::Failure(msg) => panic!(msg),
        ExecutionStatus::SuccessValue(value) => println!("execution_outcome.status => success {:?}",value),
        ExecutionStatus::SuccessReceiptId(_) => panic!("thre are pending receipts! call runtime.process_all() to complete all txns"),
        ExecutionStatus::Unknown => unreachable!(),
    }
    println!("-- RECEIPTS ({}) --", execution_outcome.receipt_ids.len());
    let mut count_failed=0;
    for elem in execution_outcome.receipt_ids {
        let outcome2 = runtime.outcome(&elem);
        println!("receipt outcome: {:?}", outcome2); 
        match outcome2 { 
            Some(outcome2) =>{
                println!("receipt logs: {:?}", outcome2.logs);
                match outcome2.status {
                    ExecutionStatus::Failure(txresult) => {
                        println!("receipt failure: {:?}", txresult);
                        count_failed+=1;
                    },
                    ExecutionStatus::SuccessValue(value) => println!("receipt success {:?}",value),
                    ExecutionStatus::SuccessReceiptId(_) => panic!("there are pending receipts! call runtime.process_all() to complete all txns"),
                    ExecutionStatus::Unknown => unreachable!(),
                }
            },
            None =>println!("None")
        }
    }
    if count_failed>0 {
        panic!(format!("{} RECEIPT(S) FAILED",count_failed));
    }
    println!("--------------------------------");
}

'''
'''--- contract/tests/utils.rs ---
use near_crypto::{InMemorySigner, KeyType, Signer};
use near_primitives::{
    account::{AccessKey, Account},
    errors::{RuntimeError, TxExecutionError},
    hash::CryptoHash,
    transaction::{ExecutionOutcome, ExecutionStatus, Transaction},
    types::{AccountId, Balance},
};
use near_runtime_standalone::{init_runtime_and_signer, RuntimeStandalone};
use near_sdk::json_types::{U64, U128};
use serde::de::DeserializeOwned;
use serde::Serialize;

pub const MAX_GAS: u64 = 300_000_000_000_000;
pub const TEN_NEAR: u128 = 10_000_000_000_000_000_000_000_000;

/// NEAR to yoctoNEAR
pub fn ntoy(near_amount: Balance) -> Balance {
    near_amount * 10u128.pow(24)
}

lazy_static::lazy_static! {
    static ref CLP_WASM_BYTES: &'static [u8] = include_bytes!("../target/wasm32-unknown-unknown/release/near_clp.wasm").as_ref();
    static ref FUNGIBLE_TOKEN_BYTES: &'static [u8] = include_bytes!("./res/nep21_basic.wasm").as_ref();
    //static ref COUNTER_BYTES: &'static [u8] = include_bytes!("res/counter.wasm").as_ref();
}

type TxResult = Result<ExecutionOutcome, ExecutionOutcome>;

fn outcome_into_result(outcome: ExecutionOutcome) -> TxResult {
    match outcome.status {
        ExecutionStatus::SuccessValue(_) => Ok(outcome),
        ExecutionStatus::Failure(_) => Err(outcome),
        ExecutionStatus::SuccessReceiptId(_) => panic!("Unresolved ExecutionOutcome run runitme.resolve(tx) to resolve the filnal outcome of tx"),
        ExecutionStatus::Unknown => unreachable!()
    }
}

/// Specific to fungible token contract's `new` method
#[derive(Serialize)]
pub struct NewFungibleTokenArgs {
    pub owner_id: AccountId,
    pub total_supply: U128,
}

#[derive(Serialize)]
pub struct NewClpArgs {
    pub owner: AccountId,
}

#[derive(Clone)]
pub struct ExternalUser {
    pub account_id: AccountId,
    pub signer: InMemorySigner,
}

impl ExternalUser {
    #[allow(dead_code)]
    pub fn new(account_id: AccountId, signer: InMemorySigner) -> Self {
        Self { account_id, signer }
    }

    #[allow(dead_code)]
    pub fn account_id(&self) -> &AccountId {
        &self.account_id
    }

    #[allow(dead_code)]
    pub fn signer(&self) -> &InMemorySigner {
        &self.signer
    }

    #[allow(dead_code)]
    pub fn account(&self, runtime: &mut RuntimeStandalone) -> Account {
        runtime
            .view_account(&self.account_id)
            .expect("Account should be there")
    }

    pub fn create_external(
        &self,
        runtime: &mut RuntimeStandalone,
        new_account_id: &AccountId,
        amount: Balance,
    ) -> Result<ExternalUser, ExecutionOutcome> {
        let new_signer =
            InMemorySigner::from_seed(&new_account_id, KeyType::ED25519, &new_account_id);
        let tx = self
            .new_tx(runtime, new_account_id)
            .create_account()
            .add_key(new_signer.public_key(), AccessKey::full_access())
            .transfer(amount)
            .sign(&self.signer);
        let res = runtime.resolve_tx(tx);

        // This logic be rewritten, FYI
        if let Err(err) = res.clone() {
            if let RuntimeError::InvalidTxError(tx_err) = err {
                let mut out = ExecutionOutcome::default();
                out.status = ExecutionStatus::Failure(TxExecutionError::InvalidTxError(tx_err));
                return Err(out);
            } else {
                unreachable!();
            }
        } else {
            outcome_into_result(res.unwrap())?;
            runtime.process_all().unwrap();
            Ok(ExternalUser {
                account_id: new_account_id.clone(),
                signer: new_signer,
            })
        }
    }

    pub fn new_tx(&self, runtime: &RuntimeStandalone, receiver_id: &AccountId) -> Transaction {
        let nonce = runtime
            .view_access_key(&self.account_id, &self.signer.public_key())
            .unwrap()
            .nonce
            + 1;
        Transaction::new(
            self.account_id.clone(),
            self.signer.public_key(),
            receiver_id.clone(),
            nonce,
            CryptoHash::default(),
        )
    }
}

pub fn near_view<I: ToString, O: DeserializeOwned>(
    runtime: &RuntimeStandalone,
    contract_id: &AccountId,
    method: &str,
    args: I,
) -> O {
    let args = args.to_string();
    let result = runtime
        .view_method_call(contract_id, method, args.as_bytes())
        .unwrap()
        .0;
    let output: O = serde_json::from_reader(result.as_slice()).unwrap();
    output
}

pub fn near_call(
    runtime: &mut RuntimeStandalone,
    sending_account: &ExternalUser,
    contract_id: &AccountId,
    method: &str,
    args: &[u8],
    gas: U64,
    deposit: Balance
) -> TxResult {
    let tx = sending_account
        .new_tx(runtime, contract_id)
        .function_call(method.into(), args.to_vec(), gas.into(), deposit)
        .sign(&sending_account.signer);
    let ex_outcome = runtime.resolve_tx(tx).unwrap();
    runtime.process_all().unwrap();
    outcome_into_result(ex_outcome)
}

pub fn deploy_and_init_fungible_token(
    runtime: &mut RuntimeStandalone,
    account: &ExternalUser,
    init_method: &str,
    gas: U64,
    args: &NewFungibleTokenArgs,
) -> TxResult {
    let tx = account
        .new_tx(runtime, &account.account_id)
        // transfer tokens otherwise "wouldn't have enough balance to cover storage"
        .transfer(ntoy(50))
        .deploy_contract(FUNGIBLE_TOKEN_BYTES.to_vec())
        .function_call(init_method.into(), serde_json::to_vec(args).unwrap(), gas.into(), 0)
        .sign(&account.signer);
    let res = runtime.resolve_tx(tx).unwrap();
    runtime.process_all().unwrap();
    outcome_into_result(res)
}

pub fn deploy_clp(
    runtime: &mut RuntimeStandalone,
    account: &ExternalUser,
    init_method: &str,
    gas: U64,
    args: &NewClpArgs
) -> TxResult {
    let tx = account
        .new_tx(runtime, &account.account_id)
        .transfer(ntoy(50))
        .deploy_contract(CLP_WASM_BYTES.to_vec())
        .function_call(init_method.into(), serde_json::to_vec(args).unwrap(), gas.into(), 0)
        .sign(&account.signer);
    let res = runtime.resolve_tx(tx).unwrap();
    runtime.process_all().unwrap();
    outcome_into_result(res)
}

pub fn new_root(account_id: AccountId) -> (RuntimeStandalone, ExternalUser) {
    let (runtime, signer) = init_runtime_and_signer(&account_id);
    (runtime, ExternalUser { account_id, signer })
}

'''
'''--- docs/ethereum-near-bridge.md ---
# Ethereum-Near Bridge findings

- Bridge between Ethereum - ERC-20 and NEAR NEP-21

- ERC-20 gets locked on ethereum using ethereum contract and minted in NEAR as NEP-21 using NEAR contract. (While transferring from ethereum to NEAR)

- This is done with the help of Bridge (https://github.com/near/rainbow-bridge-cli)

- High level view when we transfer ERC20 token from ETH blockchain to NEAR blockchain. (https://github.com/near/rainbow-bridge-cli/blob/master/docs/workflows/eth2near-fun-transfer.md)

- Example (https://github.com/near-examples/erc20-to-nep21) It will run on local network, for testnet it will be different.

'''
'''--- neardev/nep-21/Cargo.toml ---
[package]
name = "nep21-mintable"
version = "0.1.0"
authors = ["Near Inc <hello@near.org>", "NEARswap team"]
edition = "2018"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
near-sdk = "2.0.0"

[profile.release]
codegen-units = 1
# Tell `rustc` to optimize for small code size.
opt-level = "z"
lto = true
debug = false
panic = "abort"

'''
'''--- neardev/nep-21/README.md ---
# Fungible token

This is an example Fungible Token implementation in Rust for [NEP-21 - Fungible Token](https://github.com/nearprotocol/NEPs/blob/master/specs/Standards/Tokens/FungibleToken.md)

## Build

    make build

## Reference-level explanation

The full implementation in Rust can be found there: https://github.com/nearprotocol/near-sdk-rs/blob/master/examples/fungible-token/src/lib.rs

**NOTES**
 - The maximum balance value is limited by U128 (2**128 - 1).
 - JSON calls should pass U128 as a base-10 string. E.g. "100".
 - The contract optimizes the inner trie structure by hashing account IDs. It will prevent some
    abuse of deep tries. Shouldn't be an issue, once NEAR clients implement full hashing of keys.
  - This contract doesn't optimize the amount of storage, since any account can create unlimited
    amount of allowances to other accounts. It's unclear how to address this issue unless, this
    contract limits the total number of different allowances possible at the same time.
    And even if it limits the total number, it's still possible to transfer small amounts to
    multiple accounts.

'''
'''--- neardev/nep-21/src/lib.rs ---
/**
* Fungible Token implementation with JSON serialization.
* NOTES:
*  - The maximum balance value is limited by U128 (2**128 - 1).
*  - JSON calls should pass U128 as a base-10 string. E.g. "100".
*  - The contract optimizes the inner trie structure by hashing account IDs. It will prevent some
*    abuse of deep tries. Shouldn't be an issue, once NEAR clients implement full hashing of keys.
*  - The contract tracks the change in storage before and after the call. If the storage increases,
*    the contract requires the caller of the contract to attach enough deposit to the function call
*    to cover the storage cost.
*    This is done to prevent a denial of service attack on the contract by taking all available storage.
*    If the storage decreases, the contract will issue a refund for the cost of the released storage.
*    The unused tokens from the attached deposit are also refunded, so it's safe to
*    attach more deposit than required.
*  - To prevent the deployed contract from being modified or deleted, it should not have any access
*    keys on its account.
*/
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::collections::UnorderedMap;
use near_sdk::json_types::U128;
use near_sdk::{env, near_bindgen, wee_alloc, AccountId, Balance, Promise, StorageUsage};

#[global_allocator]
static ALLOC: wee_alloc::WeeAlloc = wee_alloc::WeeAlloc::INIT;

/// Price per 1 byte of storage from mainnet genesis config.
const STORAGE_PRICE_PER_BYTE: Balance = 100000000000000000000;

/// Contains balance and allowances information for one account.
#[derive(BorshDeserialize, BorshSerialize)]
pub struct Account {
    /// Current account balance.
    pub balance: Balance,
    /// Escrow Account ID hash to the allowance amount.
    /// Allowance is the amount of tokens the Escrow Account ID can spent on behalf of the account
    /// owner.
    pub allowances: UnorderedMap<Vec<u8>, Balance>,
}

impl Account {
    /// Initializes a new Account with 0 balance and no allowances for a given `account_hash`.
    pub fn new(account_hash: Vec<u8>) -> Self {
        Self {
            balance: 0,
            allowances: UnorderedMap::new(account_hash),
        }
    }

    /// Sets allowance for account `escrow_account_id` to `allowance`.
    pub fn set_allowance(&mut self, escrow_account_id: &AccountId, allowance: Balance) {
        let escrow_hash = env::sha256(escrow_account_id.as_bytes());
        if allowance > 0 {
            self.allowances.insert(&escrow_hash, &allowance);
        } else {
            self.allowances.remove(&escrow_hash);
        }
    }

    /// Returns the allowance of account `escrow_account_id`.
    pub fn get_allowance(&self, escrow_account_id: &AccountId) -> Balance {
        let escrow_hash = env::sha256(escrow_account_id.as_bytes());
        self.allowances.get(&escrow_hash).unwrap_or(0)
    }
}

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct FungibleToken {
    /// sha256(AccountID) -> Account details.
    pub accounts: UnorderedMap<Vec<u8>, Account>,

    /// Total supply of the all token.
    pub total_supply: Balance,
}

impl Default for FungibleToken {
    fn default() -> Self {
        panic!("Fun token should be initialized before usage")
    }
}

#[near_bindgen]
impl FungibleToken {
    /// Initializes the contract with the given total supply owned by the given `owner_id`.
    #[init]
    pub fn new(owner_id: AccountId, total_supply: U128) -> Self {
        let total_supply = total_supply.into();
        assert!(!env::state_exists(), "Already initialized");
        let mut ft = Self {
            accounts: UnorderedMap::new(b"a".to_vec()),
            total_supply,
        };
        let mut account = ft.get_account(&owner_id);
        account.balance = total_supply;
        ft.set_account(&owner_id, &account);
        ft
    }

    /// Increments the `allowance` for `escrow_account_id` by `amount` on the account of the caller of this contract
    /// (`predecessor_id`) who is the balance owner.
    /// Requirements:
    /// * Caller of the method has to attach deposit enough to cover storage difference at the
    ///   fixed storage price defined in the contract.
    #[payable]
    pub fn inc_allowance(&mut self, escrow_account_id: AccountId, amount: U128) {
        let initial_storage = env::storage_usage();
        assert!(
            env::is_valid_account_id(escrow_account_id.as_bytes()),
            "Escrow account ID is invalid"
        );
        let owner_id = env::predecessor_account_id();
        if escrow_account_id == owner_id {
            env::panic(b"Can not increment allowance for yourself");
        }
        let mut account = self.get_account(&owner_id);
        let current_allowance = account.get_allowance(&escrow_account_id);
        account.set_allowance(
            &escrow_account_id,
            current_allowance.saturating_add(amount.0),
        );
        self.set_account(&owner_id, &account);
        self.refund_storage(initial_storage);
    }

    /// Decrements the `allowance` for `escrow_account_id` by `amount` on the account of the caller of this contract
    /// (`predecessor_id`) who is the balance owner.
    /// Requirements:
    /// * Caller of the method has to attach deposit enough to cover storage difference at the
    ///   fixed storage price defined in the contract.
    #[payable]
    pub fn dec_allowance(&mut self, escrow_account_id: AccountId, amount: U128) {
        let initial_storage = env::storage_usage();
        assert!(
            env::is_valid_account_id(escrow_account_id.as_bytes()),
            "Escrow account ID is invalid"
        );
        let owner_id = env::predecessor_account_id();
        if escrow_account_id == owner_id {
            env::panic(b"Can not decrement allowance for yourself");
        }
        let mut account = self.get_account(&owner_id);
        let current_allowance = account.get_allowance(&escrow_account_id);
        account.set_allowance(
            &escrow_account_id,
            current_allowance.saturating_sub(amount.0),
        );
        self.set_account(&owner_id, &account);
        self.refund_storage(initial_storage);
    }

    /// Transfers the `amount` of tokens from `owner_id` to the `new_owner_id`.
    /// Requirements:
    /// * `amount` should be a positive integer.
    /// * `owner_id` should have balance on the account greater or equal than the transfer `amount`.
    /// * If this function is called by an escrow account (`owner_id != predecessor_account_id`),
    ///   then the allowance of the caller of the function (`predecessor_account_id`) on
    ///   the account of `owner_id` should be greater or equal than the transfer `amount`.
    /// * Caller of the method has to attach deposit enough to cover storage difference at the
    ///   fixed storage price defined in the contract.
    #[payable]
    pub fn transfer_from(&mut self, owner_id: AccountId, new_owner_id: AccountId, amount: U128) {
        let initial_storage = env::storage_usage();
        assert!(
            env::is_valid_account_id(new_owner_id.as_bytes()),
            "New owner's account ID is invalid"
        );
        let amount = amount.into();
        if amount == 0 {
            env::panic(b"Can't transfer 0 tokens");
        }
        assert_ne!(
            owner_id, new_owner_id,
            "The new owner should be different from the current owner"
        );
        // Retrieving the account from the state.
        let mut account = self.get_account(&owner_id);

        // Checking and updating unlocked balance
        if account.balance < amount {
            env::panic(b"Not enough balance");
        }
        account.balance -= amount;

        // If transferring by escrow, need to check and update allowance.
        let escrow_account_id = env::predecessor_account_id();
        if escrow_account_id != owner_id {
            let allowance = account.get_allowance(&escrow_account_id);
            if allowance < amount {
                env::panic(b"Not enough allowance");
            }
            account.set_allowance(&escrow_account_id, allowance - amount);
        }

        // Saving the account back to the state.
        self.set_account(&owner_id, &account);

        // Deposit amount to the new owner and save the new account to the state.
        let mut new_account = self.get_account(&new_owner_id);
        new_account.balance += amount;
        self.set_account(&new_owner_id, &new_account);
        self.refund_storage(initial_storage);
    }

    /// Transfer `amount` of tokens from the caller of the contract (`predecessor_id`) to
    /// `new_owner_id`.
    /// Act the same was as `transfer_from` with `owner_id` equal to the caller of the contract
    /// (`predecessor_id`).
    /// Requirements:
    /// * Caller of the method has to attach deposit enough to cover storage difference at the
    ///   fixed storage price defined in the contract.
    #[payable]
    pub fn transfer(&mut self, new_owner_id: AccountId, amount: U128) {
        // NOTE: New owner's Account ID checked in transfer_from.
        // Storage fees are also refunded in transfer_from.
        self.transfer_from(env::predecessor_account_id(), new_owner_id, amount);
    }

    /// Returns total supply of tokens.
    pub fn get_total_supply(&self) -> U128 {
        self.total_supply.into()
    }

    /// Returns balance of the `owner_id` account.
    pub fn get_balance(&self, owner_id: AccountId) -> U128 {
        self.get_account(&owner_id).balance.into()
    }

    /// Returns current allowance of `escrow_account_id` for the account of `owner_id`.
    ///
    /// NOTE: Other contracts should not rely on this information, because by the moment a contract
    /// receives this information, the allowance may already be changed by the owner.
    /// So this method should only be used on the front-end to see the current allowance.
    pub fn get_allowance(&self, owner_id: AccountId, escrow_account_id: AccountId) -> U128 {
        assert!(
            env::is_valid_account_id(escrow_account_id.as_bytes()),
            "Escrow account ID is invalid"
        );
        self.get_account(&owner_id)
            .get_allowance(&escrow_account_id)
            .into()
    }

    // Mints 1000 tokens to the caller.
    pub fn mint(&mut self) {
        let amount: Balance = 1000;
        self.total_supply += amount;
        let dest = env::predecessor_account_id();
        let mut a = self.get_account(&dest);
        a.balance += amount;
        self.set_account(&dest, &a);
    }
}

impl FungibleToken {
    /// Helper method to get the account details for `owner_id`.
    fn get_account(&self, owner_id: &AccountId) -> Account {
        assert!(
            env::is_valid_account_id(owner_id.as_bytes()),
            "Owner's account ID is invalid"
        );
        let account_hash = env::sha256(owner_id.as_bytes());
        self.accounts
            .get(&account_hash)
            .unwrap_or_else(|| Account::new(account_hash))
    }

    /// Helper method to set the account details for `owner_id` to the state.
    fn set_account(&mut self, owner_id: &AccountId, account: &Account) {
        let account_hash = env::sha256(owner_id.as_bytes());
        if account.balance > 0 || !account.allowances.is_empty() {
            self.accounts.insert(&account_hash, &account);
        } else {
            self.accounts.remove(&account_hash);
        }
    }

    fn refund_storage(&self, initial_storage: StorageUsage) {
        let current_storage = env::storage_usage();
        let attached_deposit = env::attached_deposit();
        let refund_amount = if current_storage > initial_storage {
            let required_deposit =
                Balance::from(current_storage - initial_storage) * STORAGE_PRICE_PER_BYTE;
            assert!(
                required_deposit <= attached_deposit,
                "The required attached deposit is {}, but the given attached deposit is is {}",
                required_deposit,
                attached_deposit,
            );
            attached_deposit - required_deposit
        } else {
            attached_deposit
                + Balance::from(initial_storage - current_storage) * STORAGE_PRICE_PER_BYTE
        };
        if refund_amount > 0 {
            env::log(format!("Refunding {} tokens for storage", refund_amount).as_bytes());
            Promise::new(env::predecessor_account_id()).transfer(refund_amount);
        }
    }
}

'''
'''--- package.json ---
{
  "name": "near-clp",
  "description": "NEAR Continious Liquidity Pool UI",
  "version": "0.1.0",
  "license": "Apache-2.0",
  "scripts": {
    "build": "npm run build:contract && npm run build:web",
    "build:contract": "node ./contract/build",
    "build:web": "parcel build src/index.html --public-url ./",
    "dev:deploy:contract": "near dev-deploy",
    "deploy:contract": "near deploy",
    "deploy:pages": "gh-pages -d dist/",
    "deploy": "npm run build && npm run deploy:contract && npm run deploy:pages",
    "prestart": "npm run build:contract && npm run dev:deploy:contract",
    "start": "env-cmd -f ./neardev/dev-account.env parcel src/index.html",
    "dev": "nodemon --watch assembly -e ts --exec \"npm run start\"",
    "test": "(cd contract && cargo test --package status-message -- --nocapture && cd ..) && npm run build:contract && jest test --runInBand"
  },
  "devDependencies": {
    "@babel/preset-env": "^7.9.5",
    "@babel/preset-react": "^7.9.4",
    "babel-jest": "~26.0.1",
    "gh-pages": "^3.0.0",
    "jest": "~26.1.0",
    "jest-environment-node": "^26.1.0",
    "nodemon": "^2.0.4",
    "parcel-bundler": "^1.12.4",
    "react-test-renderer": "^16.13.1",
    "env-cmd": "^10.1.0"
  },
  "dependencies": {
    "near-api-js": "~0.27.0",
    "react": "^16.13.1",
    "react-dom": "^16.13.1",
    "regenerator-runtime": "^0.13.5"
  },
  "eslintConfig": {
    "extends": "react-app"
  },
  "jest": {
    "moduleNameMapper": {
      "\\.(jpg|ico|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$": "<rootDir>/src/__mocks__/fileMock.js",
      "\\.(css|less)$": "<rootDir>/src/__mocks__/fileMock.js"
    },
    "setupFiles": [
      "<rootDir>/src/jest.init.js"
    ],
    "testEnvironment": "near-shell/test_environment",
    "testPathIgnorePatterns": [
      "<rootDir>/assembly/",
      "<rootDir>/node_modules/"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

'''
'''--- rainbowbridge/testnet/config.json ---
{
	"nearNetworkId": "testnet",
	"nearNodeUrl": "https://rpc.testnet.near.org/",
	"ethNodeUrl": "https://rinkeby.infura.io/v3/eb2f8572f71a4e4b9d9302456356f5d8",
	"nearMasterAccount": "send.testnet",
	"nearMasterSk": "ed25519:59Dk1oE7mzdGFCeYgjqTZbLygJkjsASqW7YtreYidFsGdhUhCq4XMMdBKUok5GD7Hd8bAXNuEXkNBmh7pnuTWaCb",
	"nearClientAccount": "ethonnearclient10",
	"nearProverAccount": "ethonnearprover10",
	"nearClientTrustedSigner": "eth2nearrelay10.testnet",
	"ethMasterSk": "93c81911a434c0254eb3f034bf95e1f4daff88016fba765109a460cf372158ac",
	"ethEd25519Address": "0x9003342d15B21b4C42e1702447fE2f39FfAF55C2",
	"ethClientAddress": "0xF721c979db97413AA9D0F91ad531FaBF769bb09C",
	"ethProverAddress": "0xc5D62d66B8650E6242D9936c7e50E959BA0F9E37",
	"ethErc20Address": "0xfecfF77c2E2Db54f90c522ebD9807e7D5174bc8a",
	"ethLockerAddress": "0xF722164Aa57f61f5FbAB6E2173Ec41bE56a8F137",
	"nearFunTokenSk": "ed25519:59Dk1oE7mzdGFCeYgjqTZbLygJkjsASqW7YtreYidFsGdhUhCq4XMMdBKUok5GD7Hd8bAXNuEXkNBmh7pnuTWaCb"
}
'''
'''--- rainbowbridge/testnet/generic-config.json ---
{
        "nearNetworkId": "testnet",
        "nearNodeUrl": "https://rpc.testnet.near.org/",
        "ethNodeUrl": "https://rinkeby.infura.io/v3/<project_id>",
        "nearMasterAccount": "<near_token_holder_account>",
        "nearMasterSk": "<near_token_holder_sk>",
        "nearClientAccount": "ethonnearclient10",
        "nearProverAccount": "ethonnearprover10",
        "nearClientTrustedSigner": "eth2nearrelay10.testnet",
        "ethMasterSk": "<eth_token_holder_sk>",
        "ethEd25519Address": "0x9003342d15B21b4C42e1702447fE2f39FfAF55C2",
        "ethClientAddress": "0xF721c979db97413AA9D0F91ad531FaBF769bb09C",
        "ethProverAddress": "0xc5D62d66B8650E6242D9936c7e50E959BA0F9E37",
        "ethErc20Address": "<some_erc20_token>"
}
'''
'''--- webapp/.env ---
REACT_APP_IPFS_GATEWAY = "https://ipfs.infura.io:5001/api/v0/cat/"
REACT_APP_CHAIN_ID = 4
REACT_APP_ETH_ADDRESS_EXPLORER = "https://etherscan.io/address/"
REACT_APP_NEAR_ADDRESS_EXPLORER = "https://wallet.testnet.near.org/profile/"

'''
'''--- webapp/.gitpod.yml ---
tasks:
  - init: yarn
    command: yarn dev
ports:
  - port: 1234
    onOpen: open-browser

'''
'''--- webapp/README.md ---
nearswap-interface
==================

This app was initialized with [create-near-app]

Quick Start
===========

To run this project locally:

1. Prerequisites: Make sure you've installed [Node.js] ≥ 12 and [Rust with correct target][Rust]
2. Install dependencies: `yarn install`
3. Run the local development server: `yarn dev` (see `package.json` for a
   full list of `scripts` you can run with `yarn`)

Now you'll have a local development environment backed by the NEAR TestNet!

Go ahead and play with the app and the code. As you make code changes, the app will automatically reload.

Exploring The Code
==================

1. The "backend" code lives in the `/contract` folder. This code gets deployed to
   the NEAR blockchain when you run `yarn deploy:contract`. This sort of
   code-that-runs-on-a-blockchain is called a "smart contract" – [learn more
   about NEAR smart contracts][smart contract docs].
2. The frontend code lives in the `/src` folder. `/src/index.html` is a great
   place to start exploring. Note that it loads in `/src/index.js`, where you
   can learn how the frontend connects to the NEAR blockchain.
3. Tests: there are different kinds of tests for the frontend and the smart
   contract. The smart contract code gets tested with [cargo], and the frontend
   code gets tested with [jest]. You can run both of these at once with `yarn
   run test`.

Deploy
======

Every smart contract in NEAR has its [own associated account][NEAR accounts]. When you run `yarn dev`, your smart contract gets deployed to the live NEAR TestNet with a throwaway account. When you're ready to make it permanent, here's how.

Step 0: Install near-cli (optional)
-------------------------------------

[near-cli] is a command line interface (CLI) for interacting with the NEAR blockchain. It was installed to the local `node_modules` folder when you ran `yarn install`, but for best ergonomics you may want to install it globally:

    yarn install --global near-cli

Or, if you'd rather use the locally-installed version, you can prefix all `near` commands with `npx`

Ensure that it's installed with `near --version` (or `npx near --version`)

Step 1: Create an account for the contract
------------------------------------------

Each account on NEAR can have at most one contract deployed to it. If you've already created an account such as `your-name.testnet`, you can deploy your contract to `nearswap-interface.your-name.testnet`. Assuming you've already created an account on [NEAR Wallet], here's how to create `nearswap-interface.your-name.testnet`:

1. Authorize NEAR CLI, following the commands it gives you:

      near login

2. Create a subaccount (replace `YOUR-NAME` below with your actual account name):

      near create-account nearswap-interface.YOUR-NAME.testnet --masterAccount YOUR-NAME.testnet

Step 2: set contract name in code
---------------------------------

Modify the line in `src/config.js` that sets the account name of the contract. Set it to the account id you used above.

    const CONTRACT_NAME = process.env.CONTRACT_NAME || 'nearswap-interface.YOUR-NAME.testnet'

Step 3: deploy!
---------------

One command:

    yarn deploy

As you can see in `package.json`, this does two things:

1. builds & deploys smart contract to NEAR TestNet
2. builds & deploys frontend code to GitHub using [gh-pages]. This will only work if the project already has a repository set up on GitHub. Feel free to modify the `deploy` script in `package.json` to deploy elsewhere.

Troubleshooting
===============

On Windows, if you're seeing an error containing `EPERM` it may be related to spaces in your path. Please see [this issue](https://github.com/zkat/npx/issues/209) for more details.

  [create-near-app]: https://github.com/near/create-near-app
  [Node.js]: https://nodejs.org/en/download/package-manager/
  [Rust]: https://github.com/near/near-sdk-rs#pre-requisites
  [React]: https://reactjs.org
  [smart contract docs]: https://docs.near.org/docs/roles/developer/contracts/intro
  [cargo]: https://doc.rust-lang.org/book/ch01-03-hello-cargo.html
  [jest]: https://jestjs.io/
  [NEAR accounts]: https://docs.near.org/docs/concepts/account
  [NEAR Wallet]: https://wallet.testnet.near.org/
  [near-cli]: https://github.com/near/near-cli
  [gh-pages]: https://github.com/tschaub/gh-pages

'''
'''--- webapp/as-pect.config.js ---
module.exports = require('near-sdk-as/imports')
'''
'''--- webapp/asconfig.json ---
{
  "extends": "near-sdk-as/asconfig.json",
  "entry": "assembly/main.ts",
  "options": {
    "binaryFile": "out/main.wasm"
  }
}
'''
'''--- webapp/babel.config.js ---
module.exports = {
  presets: ['@babel/preset-env', '@babel/preset-react'],
}

'''
'''--- webapp/package.json ---
{
  "name": "nearswap-interface",
  "version": "0.1.0",
  "license": "UNLICENSED",
  "scripts": {
    "build": "yarn run build:web",
    "build:web": "parcel build src/index.html --public-url ./",
    "deploy:pages": "gh-pages -d dist/",
    "prestart": "echo OK",
    "start": "echo The app is starting! It will automatically open in your browser when ready && echo env-cmd -f ./neardev/dev-account.env && parcel src/index.html --open",
    "test": "jest test --runInBand"
  },
  "devDependencies": {
    "@babel/preset-env": "^7.9.5",
    "@babel/preset-react": "^7.9.4",
    "babel-jest": "^26.0.0",
    "env-cmd": "^10.1.0",
    "gh-pages": "^3.0.0",
    "jest": "^26.0.1",
    "jest-environment-node": "^26.0.0",
    "near-cli": "^1.1.0",
    "nodemon": "^2.0.3",
    "parcel-bundler": "^1.12.4",
    "react-test-renderer": "^16.13.1"
  },
  "dependencies": {
    "@emotion/core": "^10.0.35",
    "@emotion/styled": "^10.0.27",
    "@walletconnect/web3-provider": "^1.2.2",
    "emotion-theming": "^10.0.27",
    "near-api-js": "^0.29.0",
    "react": ">=16.3.0",
    "react-bootstrap": "^1.3.0",
    "react-dom": "^16.13.1",
    "react-hook-thunk-reducer": "^0.2.4",
    "react-icons": "^3.11.0",
    "react-router-dom": "^5.2.0",
    "regenerator-runtime": "^0.13.5",
    "string_decoder": "^1.3.0",
    "web3": "^1.3.0",
    "web3modal": "^1.9.0"
  },
  "jest": {
    "moduleNameMapper": {
      "\\.(jpg|ico|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$": "<rootDir>/src/__mocks__/fileMock.js",
      "\\.(css|less)$": "<rootDir>/src/__mocks__/fileMock.js"
    },
    "setupFiles": [
      "<rootDir>/src/jest.init.js"
    ],
    "testEnvironment": "near-cli/test_environment",
    "testPathIgnorePatterns": [
      "<rootDir>/assembly/",
      "<rootDir>/node_modules/"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

'''
'''--- webapp/src/App.js ---
import 'regenerator-runtime/runtime'
import React, { useContext, useEffect } from 'react'
import './global.css'

import { Web3Context } from './contexts/Web3Context';

import Container from 'react-bootstrap/Container';
import Nav from 'react-bootstrap/Nav';
import Tabs from 'react-bootstrap/Tabs';
import Tab from 'react-bootstrap/Tab';
import Button from 'react-bootstrap/Button';
import Card from 'react-bootstrap/Card';
import Row from 'react-bootstrap/Row';
import Col from 'react-bootstrap/Col';

import { BsArrowLeftRight } from "react-icons/bs";
import { BsDropletFill } from "react-icons/bs";

import getConfig from './config'
const { networkId } = getConfig(process.env.NODE_ENV || 'development')

import NavigationBar from "./components/NavigationBar";
import SwapTab from "./components/SwapTab";
import PoolTab from "./components/PoolTab";
import CurrencySelectionModal from "./components/CurrencySelectionModal";

import styled from "@emotion/styled";
const Wrapper = styled("div")`
  height: 100vh;
  overflow-y: auto;
  background: ${props => props.theme.background};
  color: ${props => props.theme.body};
  .navbar-brand, .nav-link {
    color: ${props => props.theme.body} !important;
  }
  .btn-warning {
    background-color: ${props => props.theme.buttonColor} !important;
  }
  .nav-link.active {
    text-shadow: 1px 1px ${props => props.theme.navTabShadow};
  }
  .navbar-toggler {
    background-color: ${props => props.theme.navbarToggler};
  }
  .btn-warning:focus {
    box-shadow: 0 0 0 .2rem ${props => props.theme.buttonBorder} !important;
  }
`;

export default function App() {

  return (
    <Wrapper>
      <link
        rel="stylesheet"
        href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css"
        integrity="sha384-JcKb8q3iqJ61gNV9KGb8thSsNjpSL0n8PARn9HuZOnIxN0hoP+VmmDGMN5t9UJ0Z"
        crossOrigin="anonymous"
      />
      <NavigationBar/>
      <Container className="pb-2">
        <Row className="d-flex justify-content-center">
          <Col md={8} lg={6}>
            <Card className="border-0 bg-transparent">
              <Card.Body>
                <Tab.Container defaultActiveKey="swap">
                  <Nav justify className="border-0 mb-3">
                    <Nav.Link eventKey="swap"><BsArrowLeftRight/>{' '}Swap</Nav.Link>
                    <Nav.Link eventKey="pool"><BsDropletFill/>{' '}Pool</Nav.Link>
                  </Nav>
                  <Tab.Content animation="true">
                    <Tab.Pane eventKey="swap"><SwapTab/></Tab.Pane>
                    <Tab.Pane eventKey="pool"><PoolTab/></Tab.Pane>
                  </Tab.Content>
                </Tab.Container>
                <br/>
              </Card.Body>
            </Card>
          </Col>
        </Row>
      </Container>
      <CurrencySelectionModal/>
    </Wrapper>
  )
}

'''
'''--- webapp/src/__mocks__/fileMock.js ---
// NOTE: This is used to mock resource imports in JSX for tests
module.exports = '' 

'''
'''--- webapp/src/assets/logo-black.svg ---
<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#24272a"/><stop offset=".42" stop-color="#24272a" stop-opacity="0"/><stop offset=".59" stop-color="#24272a" stop-opacity="0"/><stop offset=".81" stop-color="#24272a"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#24272a"/></svg>
'''
'''--- webapp/src/assets/logo-white.svg ---
<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#fff"/><stop offset=".42" stop-color="#fff" stop-opacity="0"/><stop offset=".59" stop-color="#fff" stop-opacity="0"/><stop offset=".81" stop-color="#fff"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#fff"/></svg>
'''
'''--- webapp/src/assets/test-token-list.json ---
{
  "name": "Default List",
  "tokens": [
    {
      "name": "NEAR",
      "type": "Native token",
      "address": "",
      "symbol": "NEAR",
      "decimals": 9,
      "logoURI": "https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/near/info/logo.png"
    },
    {
      "name": "Wrapped Ethereum",
      "type": "ERC-20",
      "address": "",
      "symbol": "wETH",
      "decimals": 9,
      "logoURI": "https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/info/logo.png"
    },
    {
      "name": "Abundance",
      "type": "ERC-20",
      "address": "0x3e13318e92F0C67Ca10f0120372E998d43E6a8E8",
      "symbol": "ABND",
      "decimals": 9,
      "logoURI": ""
    },
    {
      "name": "Ampleforth",
      "type": "ERC-20",
      "address": "",
      "symbol": "AMPL",
      "decimals": 9,
      "logoURI": "https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xD46bA6D942050d489DBd938a2C909A5d5039A161/logo.png"
    },
    {
      "name": "Balancer",
      "type": "ERC-20",
      "address": "0xba100000625a3754423978a60c9317c58a424e3D",
      "symbol": "BAL",
      "decimals": 18,
      "logoURI": "https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xba100000625a3754423978a60c9317c58a424e3D/logo.png"
    },
    {
      "name": "Compound",
      "type": "ERC-20",
      "address": "0xc00e94Cb662C3520282E6f5717214004A7f26888",
      "symbol": "COMP",
      "decimals": 18,
      "logoURI": "https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xc00e94Cb662C3520282E6f5717214004A7f26888/logo.png"
    }
  ]
}

'''
'''--- webapp/src/components/AboutButton.js ---
import React, { useState } from "react";

import Modal from 'react-bootstrap/Modal';
import Button from 'react-bootstrap/Button';

import { BsQuestion } from "react-icons/bs";

export default function AboutButton() {

  const [show, setShow] = useState(false);
  const handleClose = () => setShow(false);
  const handleShow = () => setShow(true);

  return (
    <>
      <span onClick={handleShow}><BsQuestion/></span>

      <Modal show={show} onHide={handleClose}>
        <Modal.Header closeButton>
          <Modal.Title>About</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <p>NEARswap is a continous liquidity provider exchange protocol on the NEAR blockchain. Built for the <a href="https://near.org/rainbow/" className="rainbow">Hack the Rainbow</a> hackathon!</p>
        </Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={handleClose}>
            Close
          </Button>
        </Modal.Footer>
      </Modal>
    </>
  );
}

'''
'''--- webapp/src/components/NavigationBar.js ---
import React from "react";

import Navbar from 'react-bootstrap/Navbar';
import Nav from 'react-bootstrap/Nav';
import Container from 'react-bootstrap/Container';

import ThemeSwitcher from "./ThemeSwitcher";
import WalletConnectionButtons from "./WalletConnectionButtons";
import AboutButton from "./AboutButton";
import SettingsButton from "./SettingsButton";

import { FaGithub } from "react-icons/fa";

export default function NavigationBar() {
  return (
    <>
      <Navbar className="py-2">
        <Container>
          <Navbar.Brand href="" className="pl-3"><strong>NEARswap</strong></Navbar.Brand>
          <Nav className="mr-auto">
            <Nav.Link><AboutButton/></Nav.Link>
            <Nav.Link><ThemeSwitcher/></Nav.Link>
            <Nav.Link href="https://github.com/robert-zaremba/near-clp"><FaGithub/></Nav.Link>
          </Nav>
          <WalletConnectionButtons/>
          <SettingsButton/>
        </Container>
      </Navbar>
    </>
  );
}

'''
'''--- webapp/src/components/PoolInfoCard.js ---
import React, { useContext, useEffect } from "react";

import { TokenListContext } from "../contexts/TokenListContext";

import Row from 'react-bootstrap/Row';
import Col from 'react-bootstrap/Col';
import Button from 'react-bootstrap/Button';
import Image from 'react-bootstrap/Image';
import Table from 'react-bootstrap/Table';

import { CgSwap } from "react-icons/cg";

import styled from "@emotion/styled";
const Theme = styled("div")`
  background: ${props => props.theme.cardBackground};
  color: ${props => props.theme.body};
  border: 1px solid ${props => props.theme.cardBorder};
  border-radius: 20px;
  box-shadow: 0px 1px 0px 0px ${props => props.theme.cardShadow};
  .form-control:focus {
    color: ${props => props.theme.textInput};
  }
`;
const ColoredThemeText = styled("span")`
  color: ${props => props.theme.coloredText};
  text-shadow: 0px 1px 2px ${props => props.theme.coloredTextShadow};
`;

export default function PoolInfoCard(props) {

  // Token list state (used to get image)
  const tokenListState = useContext(TokenListContext);

  return (
    <>
      <Theme className="py-2 mb-2 mt-1">
        <label className="ml-4 mb-1 mt-0">
          <small><ColoredThemeText><b>NEAR-{tokenListState.state.tokenList.tokens[props.tokenIndex].symbol}</b></ColoredThemeText></small>
        </label>
        <div className="px-2 ml-3 mb-1">
          <Image rounded src={tokenListState.state.tokenList.tokens[0].logoURI} width="23px" className="mr-1"/>
          <Image rounded src={tokenListState.state.tokenList.tokens[props.tokenIndex].logoURI} width="23px" className="mr-1"/>
          NEAR <CgSwap/> {tokenListState.state.tokenList.tokens[props.tokenIndex].name} Pool
          <br/>
          <div className="my-1">
            <Row noGutters>
              <Col>
                <Table borderless size="sm" className="text-secondary mb-1" style={{ fontSize: '80%' }}>
                  <thead>
                    <tr>
                      <th></th>
                      <th>Total tokens</th>
                      <th>Price</th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr>
                      <td>NEAR</td>
                      <td>8,433.2</td>
                      <td>$533.24</td>
                    </tr>
                    <tr>
                      <td><ColoredThemeText>{tokenListState.state.tokenList.tokens[props.tokenIndex].symbol}</ColoredThemeText></td>
                      <td><ColoredThemeText>425.4</ColoredThemeText></td>
                      <td style={{ fontSize: '120%' }}><ColoredThemeText>$225.02</ColoredThemeText></td>
                    </tr>
                  </tbody>
                </Table>
              </Col>
              <Col className="my-auto text-center" xs={12} sm={4}>
                <Button variant="warning" size="sm" className="mr-1 mb-1">Add liquidity</Button>
                <Button variant="warning" size="sm" className="mr-1 mb-1">Swap</Button>
                <Button variant="warning" size="sm" className="mr-1 mb-1" disabled>Details</Button>
              </Col>
            </Row>
          </div>
        </div>
      </Theme>
    </>
  );
}

'''
'''--- webapp/src/components/PoolTab.js ---
import React, { useContext } from "react";

import { InputsContext } from "../contexts/InputsContext";

import PriceInputCard from "./PriceInputCard"
import PoolInfoCard from "./PoolInfoCard"

import Button from 'react-bootstrap/Button';

import { BsPlus } from "react-icons/bs";

import styled from "@emotion/styled";
const Hr = styled("hr")`
  border-top: 1px solid ${props => props.theme.hr}
`;

export default function PoolTab() {

  const inputs = useContext(InputsContext);

  return (
    <>
      <p className="text-center my-1 text-secondary" style={{ 'letterSpacing': '3px' }}><small>TOP POOLS</small></p>
      <PoolInfoCard tokenIndex="2" />
      <PoolInfoCard tokenIndex="3" hasProvidedLiquidity/>
      <p className="mt-4 text-center text-secondary"><small><i>Don't see a pair you're looking for? Create a new pool below.</i></small></p>
      <Hr className="mt-4"/>
      <p className="text-center my-1 text-secondary" style={{ 'letterSpacing': '3px' }}><small>PROVIDE LIQUIDITY</small></p>
      <PriceInputCard
        label="Input"
        name="input1"
        logoUrl={inputs.state.pool.input1.logoUrl}
        symbol={inputs.state.pool.input1.symbol}
        type={inputs.state.pool.input1.type}
        tokenIndex={inputs.state.pool.input1.tokenIndex}
      />
      <div className="text-center my-2">
        <BsPlus/>
      </div>
      <PriceInputCard
        label="Input"
        name="input2"
        logoUrl={inputs.state.pool.input2.logoUrl}
        symbol={inputs.state.pool.input2.symbol}
        type={inputs.state.pool.input2.type}
        tokenIndex={inputs.state.pool.input2.tokenIndex}
        currencySelectionDisabled
      />
      <br/>
      <Button variant="warning" block disabled>Add Liquidity</Button>
    </>
  );
}

'''
'''--- webapp/src/components/PriceInputCard.js ---
import React, { useEffect, useState, useContext } from "react";

import findCurrencyLogoUrl from "../services/find-currency-logo-url";

import { InputsContext } from "../contexts/InputsContext";
import { TokenListContext } from "../contexts/TokenListContext";

import Row from 'react-bootstrap/Row';
import Col from 'react-bootstrap/Col';
import Button from 'react-bootstrap/Button';

import { BsCaretDownFill } from "react-icons/bs";
import { FaEthereum } from "react-icons/fa";

import styled from "@emotion/styled";
const Theme = styled("div")`
  background: ${props => props.theme.cardBackground};
  color: ${props => props.theme.body};
  border: 1px solid ${props => props.theme.cardBorder};
  border-radius: 20px;
  box-shadow: 0px 1px 0px 0px ${props => props.theme.cardShadow};
  .form-control:focus {
    color: ${props => props.theme.textInput};
  }
`;

// props.name must be one of:
// (Swap): from, to
// (Pool): input1, input2
export default function PriceInputCard(props) {

  // Global state
  const inputs = useContext(InputsContext);
  const { dispatch } = inputs;

  // Token list state (used to populate button with token logo and symbol)
  const tokenListState = useContext(TokenListContext);

  // Handles updating button view and global state
  function handleTokenButtonUpdate() {

    // Find URL of token logo
    let newImageUrl = findCurrencyLogoUrl(props.tokenIndex, tokenListState.state.tokenList);
    let newSymbol = tokenListState.state.tokenList.tokens[props.tokenIndex].symbol;
    let newType = tokenListState.state.tokenList.tokens[props.tokenIndex].type;

    // Update image, symbol, and type of selected currency
    switch (props.name) {
      case 'from':
        dispatch({ type: 'UPDATE_FROM_SELECTED_CURRENCY', 
          payload: { logoUrl: newImageUrl, symbol: newSymbol, type: newType }
        });
        break;
      case 'to':
        dispatch({ type: 'UPDATE_TO_SELECTED_CURRENCY', 
          payload: { logoUrl: newImageUrl, symbol: newSymbol, type: newType }
        });
        break;
      case 'input1':
        dispatch({ type: 'UPDATE_INPUT1_SELECTED_CURRENCY', 
          payload: { logoUrl: newImageUrl, symbol: newSymbol, type: newType }
        });
        break;
      case 'input2':
        dispatch({ type: 'UPDATE_INPUT2_SELECTED_CURRENCY', 
          payload: { logoUrl: newImageUrl, symbol: newSymbol, type: newType }
        });
    }
  }

  // Load icons and symbol for the current selected currency/token
  useEffect(() => {
    handleTokenButtonUpdate();
  }, []);

  // Handle opening modal to select currency
  function handleCurrencySelectionModal() { 
    dispatch({ type: 'SET_CURRENCY_SELECTION_INPUT', payload: { input: props.name } });
  }

  function handleAmountChange(event) {
    switch (props.name) {
      case 'from':
        dispatch({ type: 'SET_FROM_AMOUNT', payload: { amount: event.target.value } });
        break;
      case 'to':
        dispatch({ type: 'SET_TO_AMOUNT', payload: { amount: event.target.value } });
        break;
      case 'input1':
        dispatch({ type: 'SET_INPUT1_AMOUNT', payload: { amount: event.target.value } });
        break;
      case 'input2':
        dispatch({ type: 'SET_INPUT2_AMOUNT', payload: { amount: event.target.value } });
    }
  }

  return (
    <>
      <Theme className="py-2">
        <label className="ml-4 mb-1 mt-0">
          <small className="text-secondary">{props.label}</small>
        </label>
        <Row className="px-2">
          <Col>
            <div className="input-group-lg mb-1">
              <input type="text" className="form-control border-0 bg-transparent" placeholder="0.0" onChange={handleAmountChange}/>
            </div>
          </Col>
          <Col xl={2} lg={3} md={4} sm={4} xs={12} className="d-flex flex-row-reverse align-items-center mr-2">
            <div className="text-right">
              <Button size="sm" variant="outline-secondary" className="mr-1" style={{'whiteSpace': 'nowrap'}} onClick={handleCurrencySelectionModal} disabled={props.currencySelectionDisabled}>
                <img src={props.logoUrl} width="15px" className="align-middle pb-1" />
                {' '}{props.symbol}
                {' '}
                <BsCaretDownFill/>
              </Button>
              <br/>
              <small className="mr-3 text-secondary" style={{'whiteSpace': 'nowrap', 'fontSize': '60%'}}>
                {props.type === "ERC-20"
                  ? <><FaEthereum/> ERC-20</>
                  : props.type
                }
              </small>
            </div>
          </Col>
        </Row>
      </Theme>
    </>
  );
}

'''
'''--- webapp/src/components/SettingsButton.js ---
import React, {useContext} from "react";

import { Web3Context } from '../contexts/Web3Context';

import Dropdown from 'react-bootstrap/Dropdown';

import { FaCog } from "react-icons/fa";

export default function SettingsButton() {
  
  // Web3 state
  const web3State = useContext(Web3Context);
  const { currentUser, web3Modal } = web3State;

  // Return disabled settings button if no wallets connected
  if (!window.walletConnection.isSignedIn() && !currentUser) {
    return (
      <>
        <Dropdown alignRight>
          <Dropdown.Toggle disabled variant="warning"className="py-2 mr-1 mb-1">
            <FaCog/>
          </Dropdown.Toggle>
        </Dropdown>
      </>
    )
  }

  // Initialize connection information
  let nearConnected, ethConnected = "";
  if (window.walletConnection.isSignedIn()) {
    nearConnected = <Dropdown.Item href={(process.env.REACT_APP_NEAR_ADDRESS_EXPLORER) + window.accountId}>Connected to NEAR: {window.accountId}</Dropdown.Item>;
  }
  if (currentUser) {
    ethConnected = <Dropdown.Item href={(process.env.REACT_APP_ETH_ADDRESS_EXPLORER) + currentUser}>Connected to Ethereum: {currentUser.substring(0,5)}...{currentUser.substr(currentUser.length-5)}</Dropdown.Item>
  }

  return (
    <>
      <Dropdown alignRight>
        <Dropdown.Toggle variant="warning" className="py-2 mr-1 mb-1">
          <FaCog/>
        </Dropdown.Toggle>
        <Dropdown.Menu className="mt-2">
          {nearConnected}
          {ethConnected}
          {/*<Dropdown.Divider />*/}
        </Dropdown.Menu>
      </Dropdown>
    </>
  );
}
'''
'''--- webapp/src/components/SwapTab.js ---
import React, { useContext } from "react";

import { InputsContext } from "../contexts/InputsContext";

import PriceInputCard from "./PriceInputCard";

import Button from 'react-bootstrap/Button';

import { BsArrowUpDown } from "react-icons/bs";

export default function SwapTab() {

  const inputs = useContext(InputsContext);

  return (
    <>
      <p className="text-center my-1 text-secondary" style={{ 'letterSpacing': '3px' }}><small>SWAP</small></p>
      <PriceInputCard
        label="From"
        name="from"
        logoUrl={inputs.state.swap.from.logoUrl}
        symbol={inputs.state.swap.from.symbol}
        type={inputs.state.swap.from.type}
        tokenIndex={inputs.state.swap.from.tokenIndex}
      />
      <div className="text-center my-2">
        <BsArrowUpDown/>
      </div>
      <PriceInputCard
        label="To"
        name="to"
        logoUrl={inputs.state.swap.to.logoUrl}
        symbol={inputs.state.swap.to.symbol}
        type={inputs.state.swap.to.type}
        tokenIndex={inputs.state.swap.to.tokenIndex}
      />
      <br/>
      <Button variant="warning" block disabled>Swap</Button>
    </>
  );
}

'''
'''--- webapp/src/components/ThemeSwitcher.js ---
import React from "react";
import { useTheme } from "../contexts/ThemeContext";

import { RiContrastFill } from "react-icons/ri";

export default function ThemeSwitcher() {

  const themeState = useTheme();

  return (
    <span onClick={() => themeState.toggle()}><RiContrastFill/></span>
  );
}
'''
'''--- webapp/src/components/WalletConnectionButtons.js ---
import React, { useContext } from "react";

import { login, logout } from '../utils'

import { Web3Context, signInWithWeb3 } from '../contexts/Web3Context';

import Row from 'react-bootstrap/Row';
import Col from 'react-bootstrap/Col';
import Button from 'react-bootstrap/Button';

export default function WalletConnectionButtons() {

  // Web3 state
  const web3State = useContext(Web3Context);
  const { web3Modal, setWeb3Modal, setCurrentUser, currentUser } = web3State;

  // Initial connection buttons
  let nearConnectionBtn, ethConnectionBtn;

  // Set NEAR connection button with correct label and function call
  if (!window.walletConnection.isSignedIn()) {
    nearConnectionBtn = <Button variant="warning" size="sm" onClick={login} className="h-100 w-100">Connect to NEAR wallet</Button>;
  } else {
    nearConnectionBtn = <Button variant="warning" size="sm" onClick={logout} className="h-100 w-100">Disconnect NEAR wallet</Button>;
  }

  // Set Ethereum connection button with correct label and function call
  if (!currentUser) {
    ethConnectionBtn = <Button variant="warning" size="sm" className="h-100 w-100" onClick={
      async () => {
        try {
          const w3c = await signInWithWeb3();
          const [account] = await w3c.web3.eth.getAccounts();
          setWeb3Modal(w3c);
          setCurrentUser(account);
        } catch (err) {
          console.log('web3Modal error', err);
        }
      }
    }>Connect to Ethereum wallet</Button>
  } else {
    ethConnectionBtn = <Button variant="warning" size="sm" className="h-100 w-100" onClick={
      async () => {
        try {
          setWeb3Modal("");
          setCurrentUser("");
          await web3Modal.web3Modal.clearCachedProvider();
        } catch (err) {
          console.log('web3Modal error', err);
        }
      }
    }>Disconnect Ethereum wallet</Button>
  }

  return (
    <Row noGutters className="">
      <div className="text-center">
      <Col xs={12} className="mb-1 mr-1">
        {nearConnectionBtn}
      </Col>
      <Col xs={12} className="mb-1 mr-1">
        {ethConnectionBtn}
      </Col>
      </div>
    </Row>
  );
}

'''
'''--- webapp/src/config.js ---
const CONTRACT_NAME = process.env.CONTRACT_NAME ||'nearswap-interface'

function getConfig(env) {
  switch (env) {

  case 'production':
  case 'mainnet':
    return {
      networkId: 'mainnet',
      nodeUrl: 'https://rpc.mainnet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.near.org',
      helperUrl: 'https://helper.mainnet.near.org',
      explorerUrl: 'https://explorer.mainnet.near.org',
    }
  case 'development':
  case 'testnet':
    return {
      networkId: 'testnet',
      nodeUrl: 'https://rpc.testnet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.testnet.near.org',
      helperUrl: 'https://helper.testnet.near.org',
      explorerUrl: 'https://explorer.testnet.near.org',
    }
  case 'betanet':
    return {
      networkId: 'betanet',
      nodeUrl: 'https://rpc.betanet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.betanet.near.org',
      helperUrl: 'https://helper.betanet.near.org',
      explorerUrl: 'https://explorer.betanet.near.org',
    }
  case 'local':
    return {
      networkId: 'local',
      nodeUrl: 'http://localhost:3030',
      keyPath: `${process.env.HOME}/.near/validator_key.json`,
      walletUrl: 'http://localhost:4000/wallet',
      contractName: CONTRACT_NAME,
    }
  case 'test':
  case 'ci':
    return {
      networkId: 'shared-test',
      nodeUrl: 'https://rpc.ci-testnet.near.org',
      contractName: CONTRACT_NAME,
      masterAccount: 'test.near',
    }
  case 'ci-betanet':
    return {
      networkId: 'shared-test-staging',
      nodeUrl: 'https://rpc.ci-betanet.near.org',
      contractName: CONTRACT_NAME,
      masterAccount: 'test.near',
    }
  default:
    throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`)
  }
}

module.exports = getConfig

'''
'''--- webapp/src/contexts/InputsContext.js ---
import React, {createContext, useReducer} from 'react';

const initialState = { 
  swap: {
    from: {
      amount: "",     // Amount of tokens
      symbol: "",     // Symbol of token
      type: "",       // Native token (NEAR or ETH), ERC-20, NEP-21, ...
      logoUrl: "",    // Address of token logo image
      tokenIndex: 1   // Index of token within token list
    },
    to: {
      amount: "",
      symbol: "",
      type: "",
      logoUrl: "",
      tokenIndex: 0
    }
  },
  pool: {
    input1: {
      amount: "",
      symbol: "",
      type: "",
      logoUrl: "",
      tokenIndex: 2
    },
    input2: {
      amount: "",
      symbol: "",
      type: "",
      logoUrl: "",
      tokenIndex: 0
    }
  },
  currencySelectionModal: {
    isVisible: false,
    selectedInput: ""
  }
};

const InputsContext = createContext(initialState);
const { Provider } = InputsContext;

const InputsProvider = ( { children } ) => {
  const [state, dispatch] = useReducer((state, action) => {
    switch(action.type) {
      case 'SET_FROM_AMOUNT':
        return { ...state, swap: { from: { 
          amount: action.payload.amount,
          symbol: state.swap.from.symbol,
          type: state.swap.from.type,
          logoUrl: state.swap.from.logoUrl,
          tokenIndex: state.swap.from.tokenIndex
        }, to: state.swap.to }};
      case 'SET_TO_AMOUNT':
        return { ...state, swap: { to: { 
          amount: action.payload.amount,
          symbol: state.swap.to.symbol,
          type: state.swap.to.type,
          logoUrl: state.swap.to.logoUrl,
          tokenIndex: state.swap.to.tokenIndex
        }, from: state.swap.from }};
      case 'SET_INPUT1_AMOUNT':
        return { ...state, pool: { input1: { 
          amount: action.payload.amount,
          symbol: state.pool.input1.symbol,
          type: state.pool.input1.type,
          logoUrl: state.pool.input1.logoUrl,
          tokenIndex: state.pool.input1.tokenIndex
        }, input2: state.pool.input2 }};
      case 'SET_INPUT2_AMOUNT':
        return { ...state, pool: { input2: { 
          amount: action.payload.amount,
          symbol: state.pool.input2.symbol,
          type: state.pool.input2.type,
          logoUrl: state.pool.input2.logoUrl,
          tokenIndex: state.pool.input2.tokenIndex
        }, input1: state.pool.input1 }};
      case 'UPDATE_FROM_SELECTED_CURRENCY':
        return { ...state, swap: { from: {
          amount: state.swap.from.amount,
          symbol: action.payload.symbol,
          type: action.payload.type,
          logoUrl: action.payload.logoUrl,
          tokenIndex: state.swap.from.tokenIndex
        }, to: state.swap.to }, currencySelectionModal: { isVisible: false }};
      case 'UPDATE_TO_SELECTED_CURRENCY':
        return { ...state, swap: { to: {
          amount: state.swap.to.amount,
          symbol: action.payload.symbol,
          type: action.payload.type,
          logoUrl: action.payload.logoUrl,
          tokenIndex: state.swap.to.tokenIndex
        }, from: state.swap.from }, currencySelectionModal: { isVisible: false }};
      case 'UPDATE_INPUT1_SELECTED_CURRENCY':
        return { ...state, pool: { input1: {
          amount: state.pool.input1.amount,
          symbol: action.payload.symbol,
          type: action.payload.type,
          logoUrl: action.payload.logoUrl,
          tokenIndex: state.pool.input1.tokenIndex
        }, input2: state.pool.input2 }, currencySelectionModal: { isVisible: false }};
      case 'UPDATE_INPUT2_SELECTED_CURRENCY':
        return { ...state, pool: { input2: {
          amount: state.pool.input2.amount,
          symbol: action.payload.symbol,
          type: action.payload.type,
          logoUrl: action.payload.logoUrl,
          tokenIndex: state.pool.input2.tokenIndex
        }, input1: state.pool.input1 }, currencySelectionModal: { isVisible: false }};
      case 'TOGGLE_CURRENCY_SELECTION_MODAL':
        return { ...state, currencySelectionModal: { isVisible: !state.currencySelectionModal.isVisible, selectedInput: state.currencySelectionModal.selectedInput } };
      case 'SET_CURRENCY_SELECTION_INPUT':
        return { ...state, currencySelectionModal: { selectedInput: action.payload.input, isVisible: !state.isVisible } };
      default:
        throw new Error();
    };
  }, initialState);

  return <Provider value={{ state, dispatch }}>{children}</Provider>;
}

export { InputsContext, InputsProvider };

'''
'''--- webapp/src/contexts/ThemeContext.js ---
import React from "react";
import { ThemeProvider as EmotionThemeProvider } from "emotion-theming";
import theme from "../css/theme.js";

const defaultContextData = {
  dark: false,
  toggle: () => {}
};

const ThemeContext = React.createContext(defaultContextData);
const useTheme = () => React.useContext(ThemeContext);

const useEffectDarkMode = () => {
  const [themeState, setThemeState] = React.useState({
    dark: false,
    hasThemeMounted: false
  });
  React.useEffect(() => {
    const lsDark = localStorage.getItem("dark") === "true";
    setThemeState({ ...themeState, dark: lsDark, hasThemeMounted: true });
  }, []);

  return [themeState, setThemeState];
};

const ThemeProvider = ({ children }) => {
  const [themeState, setThemeState] = useEffectDarkMode();

  if (!themeState.hasThemeMounted) {
    return <div />;
  }

  const toggle = () => {
    const dark = !themeState.dark;
    localStorage.setItem("dark", JSON.stringify(dark));
    setThemeState({ ...themeState, dark });
  };

  const computedTheme = themeState.dark ? theme("dark") : theme("light");

  return (
    <EmotionThemeProvider theme={computedTheme}>
      <ThemeContext.Provider
        value={{
          dark: themeState.dark,
          toggle
        }}
      >
        {children}
      </ThemeContext.Provider>
    </EmotionThemeProvider>
  );
};

export { ThemeProvider, useTheme };
'''
'''--- webapp/src/contexts/TokenListContext.js ---
import React, { createContext, useContext, useEffect } from 'react';
import { useThunkReducer } from 'react-hook-thunk-reducer';

import { Web3Context } from "../contexts/Web3Context";

import { getERC20Balance } from "../services/web3utils";

import { default as testTokenList } from '../assets/test-token-list.json';

const initialState = {
  tokenList: testTokenList
}

const updateBalances = (tokenList, w3, ethAccount) => {
  let tl = tokenList;
  tl.tokens.map(async (token, index) => {
    if (token.type === "ERC-20" && w3 && ethAccount && token.address !== "") {
      token.balance = await getERC20Balance(w3, ethAccount, token.address);
    }
    if (token.type === "Native token") {
      token.balance = (await window.walletConnection.account().getAccountBalance()).available / 1000000000000000000000000 ;
    }
  });
  return tl;
}

const TokenListContext = createContext(initialState);
const { Provider } = TokenListContext;

const TokenListProvider = ( { children } ) => {

  const [state, dispatch] = useThunkReducer((state, action) => {
    switch(action.type) {
      case 'FETCH_BALANCES':
        let updatedTokenList = updateBalances(state.tokenList, action.payload.w3.web3, action.payload.ethAccount);
        return { tokenList: updatedTokenList };
        break;
      default:
        throw new Error();
    };
  }, initialState);

  // Web3 state
  const web3State = useContext(Web3Context);
  const { currentUser, web3Modal } = web3State;

  useEffect(() => {

    // Update balances of NEAR tokens
    if (window.walletConnection.isSignedIn() || currentUser) {
      try {
        // Inject token balances in token list using wallet information
        dispatch({
          type: 'FETCH_BALANCES',
          payload: {
            w3: web3Modal,
            ethAccount: currentUser
          }
        });
      } catch (e) {
        console.error(`Could not inject balances`);
      }
    }

  }, [currentUser, web3Modal]);

  return <Provider value={{ state, dispatch }}>{children}</Provider>;
}

export { TokenListContext, TokenListProvider };

'''
'''--- webapp/src/contexts/Web3Context.js ---
import React, {createContext, useState, useEffect} from 'react';

import Web3Modal from 'web3modal';
import Web3 from 'web3';
import WalletConnectProvider from '@walletconnect/web3-provider';

const Web3Context = createContext();
const { Provider } = Web3Context;

const providerOptions = {
  walletconnect: {
    package: WalletConnectProvider, // required
    options: {
      infuraId: +process.env.REACT_APP_IPFS_GATEWAY.split('/').pop(),
    },
  },
};

const w3connect = async (web3Modal) => {
  const provider = await web3Modal.connect();
  const web3 = new Web3(provider);
  const injectedChainId = await web3.eth.getChainId();

  if (injectedChainId !== +process.env.REACT_APP_CHAIN_ID) {
    alert(
      `Please switch Web3 to the correct network and try signing in again. Detected network: ${
        injectedChainId
      }, Required network: ${
        +process.env.REACT_APP_CHAIN_ID
      }`,
    );
  }

  return { web3Modal, web3, provider };
};

const signInWithWeb3 = async () => {

  const web3Modal = new Web3Modal({
    network: +process.env.REACT_APP_CHAIN_ID, // optional
    providerOptions, // required
    cacheProvider: true,
  });

  const provider = await web3Modal.connect();
  const web3 = new Web3(provider);
  const injectedChainId = await web3.eth.getChainId();

  if (injectedChainId !== +process.env.REACT_APP_CHAIN_ID) {
    alert(
      `Please switch Web3 to the correct network and try signing in again. Detected network: ${
        injectedChainId
      }, Required network: ${
        +process.env.REACT_APP_CHAIN_ID
      }`,
    );
  }

  return { web3Modal, web3, provider };
};

const Web3Provider = ( { children } ) => {

  const [currentUser, setCurrentUser] = useState();
  const [web3Modal, setWeb3Modal] = useState(
    new Web3Modal({
      network: +process.env.REACT_APP_CHAIN_ID, // optional
      providerOptions, // required
      cacheProvider: true,
    }),
  );

  useEffect(() => {
    const initCurrentUser = async () => {
      try {
        const w3c = await w3connect(web3Modal);
        setWeb3Modal(w3c);

        const [account] = await w3c.web3.eth.getAccounts();
        let user = account;
        setCurrentUser(user);
      } catch (e) {
        console.error(`Could not log in with web3`);
      }
    };

    if (web3Modal.cachedProvider) {
      initCurrentUser();
    }
  }, [web3Modal, currentUser]);

  return <Provider value={{ web3Modal, setWeb3Modal, setCurrentUser, currentUser }}>{children}</Provider>;
}

export { Web3Context, Web3Provider, signInWithWeb3 };

'''
'''--- webapp/src/css/theme.js ---
const white = "#FFFFFF";
const black = "#000000";
const darkBackground = "#0b0d0f";
const lightGray = "#F8F8F9";
const darkGray = "#495057"
const darkBlue = "#262d35";	
const offWhite = '#dee2e6';
const lightShadow = 'rgba(9,30,66,.25)';
const yellow = '#F0EC74';
const darkerYellow = 'rgba(222,170,12,.5)';
const lightYellow = '#faf9d1';
const seaGreen = '#8FD6BD';
const darkerSeaGreen = '#2f8164';

const themeLight = {
  background: lightGray,
  body: black,
  cardBackground: white,
  cardBorder: offWhite,
  cardShadow: lightShadow,
  buttonColor: yellow,
  textInput: darkGray,
  navTabShadow: yellow,
  navbarToggler: "transparent",
  buttonBorder: darkerYellow,
  hr: "rgba(0,0,0,.1)",
  coloredText: darkerYellow,
  coloredTextShadow: lightYellow,
};

const themeDark = {
  background: darkBackground,
  body: white,
  cardBackground: darkBlue,
  cardBorder: darkBlue,
  cardShadow: black,
  buttonColor: seaGreen,
  textInput: offWhite,
  navTabShadow: darkGray,
  navbarToggler: lightGray,
  buttonBorder: darkerSeaGreen,
  hr: darkGray,
  coloredText: seaGreen,
  coloredTextShadow: black,
};

const theme = mode => (mode === "dark" ? themeDark : themeLight);

export default theme;
'''
'''--- webapp/src/global.css ---
@import url('https://fonts.googleapis.com/css2?family=Quicksand:wght@500&display=swap');

* {
  font-family: 'Quicksand', sans-serif;
}

button {
  border-radius: 10px !important;
}

.rainbow {
  background: linear-gradient(to right, orange , yellow, green, cyan, blue, violet);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
}

.nav-item a, .nav-item a:hover {
  color: #6c757d;
}

.nav-tabs .nav-link {
  border: 0 !important;
}

.nav-link.active {
  background: transparent !important;
  font-weight: 700;
}

.card-header-tabs {
  margin-left: 0 !important;
  margin-right: 0 !important;
}

.btn-warning {
  border: none !important;
}

.btn-outline-secondary {
  border: 0 !important;
}

.form-control:focus {
  box-shadow: none !important;
}

@keyframes loader {
  0% { transform: rotate(0deg) }
  100% { transform: rotate(360deg) }
}

aside {
  animation: notify ease-in-out 10s;
  background-color: var(--shadow);
  border-radius: 5px;
  bottom: 0;
  font-size: 0.8em;
  margin: 1em;
  padding: 1em;
  position: fixed;
  transform: translateY(10em);
  right: 0;
}
aside footer {
  display: flex;
  font-size: 0.9em;
  justify-content: space-between;
  margin-top: 0.5em;
}
aside footer *:first-child {
  color: var(--success);
}
aside footer *:last-child {
  color: var(--gray);
}
@keyframes notify {
  0% { transform: translateY(10em) }
  5% { transform: translateY(0) }
  95% { transform: translateY(0) }
  100% { transform: translateY(10em) }
}

'''
'''--- webapp/src/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="./assets/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="apple-touch-icon" href="./assets/favicon.ico" />
    <title>Welcome to NEAR with React</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
    <script src="./index.js"></script>
  </body>
</html>

'''
'''--- webapp/src/index.js ---
import React from 'react'
import ReactDOM from 'react-dom'
import App from './App'
import { initContract } from './utils'

import { ThemeProvider } from "./contexts/ThemeContext";
import { InputsProvider } from './contexts/InputsContext';
import { Web3Provider } from './contexts/Web3Context';
import { TokenListProvider } from './contexts/TokenListContext';

window.nearInitPromise = initContract()
  .then(() => {
    ReactDOM.render(
      <InputsProvider>
        <Web3Provider>
          <TokenListProvider>
            <ThemeProvider>
              <App />
            </ThemeProvider>
          </TokenListProvider>
        </Web3Provider>
      </InputsProvider>,
      document.querySelector('#root')
    )
  })
  .catch(console.error)

'''
'''--- webapp/src/jest.init.js ---
import 'regenerator-runtime/runtime'

'''
'''--- webapp/src/main.test.js ---
beforeAll(async function () {
  // NOTE: nearlib and nearConfig are made available by near-cli/test_environment
  const near = await nearlib.connect(nearConfig)
  window.accountId = nearConfig.contractName
  window.contract = await near.loadContract(nearConfig.contractName, {
    viewMethods: ['get_greeting'],
    changeMethods: [],
    sender: window.accountId
  })

  window.walletConnection = {
    requestSignIn() {
    },
    signOut() {
    },
    isSignedIn() {
      return true
    },
    getAccountId() {
      return window.accountId
    }
  }
})

test('get_greeting', async () => {
  const message = await window.contract.get_greeting({ account_id: window.accountId })
  expect(message).toEqual('Hello')
})

'''
'''--- webapp/src/services/find-currency-logo-url.js ---
export default function findCurrencyLogoUrl(newTokenIndex, tokenList) {
  let hasImage = tokenList.tokens[newTokenIndex].hasOwnProperty("logoURI");

  // Only display image on button if it exists
  if (hasImage) {
    if (tokenList.tokens[newTokenIndex].logoURI.startsWith("ipfs://")) {
      return (process.env.REACT_APP_IPFS_GATEWAY + tokenList.tokens[newTokenIndex].logoURI.substring(7));
    } else {
      return tokenList.tokens[newTokenIndex].logoURI;
    }
  }

  return "";
}
'''
'''--- webapp/src/services/human_standard_token_abi.js ---
export const human_standard_token_abi = [
  {
    "constant": true,
    "inputs": [],
    "name": "name",
    "outputs": [
      {
        "name": "",
        "type": "string"
      }
    ],
    "payable": false,
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_spender",
        "type": "address"
      },
      {
        "name": "_value",
        "type": "uint256"
      }
    ],
    "name": "approve",
    "outputs": [
      {
        "name": "success",
        "type": "bool"
      }
    ],
    "payable": false,
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "totalSupply",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_from",
        "type": "address"
      },
      {
        "name": "_to",
        "type": "address"
      },
      {
        "name": "_value",
        "type": "uint256"
      }
    ],
    "name": "transferFrom",
    "outputs": [
      {
        "name": "success",
        "type": "bool"
      }
    ],
    "payable": false,
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "decimals",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "version",
    "outputs": [
      {
        "name": "",
        "type": "string"
      }
    ],
    "payable": false,
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "_owner",
        "type": "address"
      }
    ],
    "name": "balanceOf",
    "outputs": [
      {
        "name": "balance",
        "type": "uint256"
      }
    ],
    "payable": false,
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "symbol",
    "outputs": [
      {
        "name": "",
        "type": "string"
      }
    ],
    "payable": false,
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_to",
        "type": "address"
      },
      {
        "name": "_value",
        "type": "uint256"
      }
    ],
    "name": "transfer",
    "outputs": [
      {
        "name": "success",
        "type": "bool"
      }
    ],
    "payable": false,
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_spender",
        "type": "address"
      },
      {
        "name": "_value",
        "type": "uint256"
      },
      {
        "name": "_extraData",
        "type": "bytes"
      }
    ],
    "name": "approveAndCall",
    "outputs": [
      {
        "name": "success",
        "type": "bool"
      }
    ],
    "payable": false,
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "_owner",
        "type": "address"
      },
      {
        "name": "_spender",
        "type": "address"
      }
    ],
    "name": "allowance",
    "outputs": [
      {
        "name": "remaining",
        "type": "uint256"
      }
    ],
    "payable": false,
    "type": "function"
  },
  {
    "inputs": [
      {
        "name": "_initialAmount",
        "type": "uint256"
      },
      {
        "name": "_tokenName",
        "type": "string"
      },
      {
        "name": "_decimalUnits",
        "type": "uint8"
      },
      {
        "name": "_tokenSymbol",
        "type": "string"
      }
    ],
    "type": "constructor"
  },
  {
    "payable": false,
    "type": "fallback"
  },
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": true,
        "name": "_from",
        "type": "address"
      },
      {
        "indexed": true,
        "name": "_to",
        "type": "address"
      },
      {
        "indexed": false,
        "name": "_value",
        "type": "uint256"
      }
    ],
    "name": "Transfer",
    "type": "event"
  },
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": true,
        "name": "_owner",
        "type": "address"
      },
      {
        "indexed": true,
        "name": "_spender",
        "type": "address"
      },
      {
        "indexed": false,
        "name": "_value",
        "type": "uint256"
      }
    ],
    "name": "Approval",
    "type": "event"
  },
]

'''
'''--- webapp/src/services/web3utils.js ---
import { human_standard_token_abi } from "./human_standard_token_abi";

const getERC20Balance = async (web3, ethAddr, tokenAddr) => {
  
  const tokenContract = await new web3.eth.Contract(human_standard_token_abi, tokenAddr);

  const decimals = await tokenContract.methods.decimals().call();
  const balance = await tokenContract.methods.balanceOf(ethAddr).call();

  try {
    const adjustedBalance = balance / Math.pow(10, decimals);
    return adjustedBalance;
  } catch (error) {
    console.log(`Could not retrieve ERC-20 balance`);
  }
}

export { getERC20Balance };

'''
'''--- webapp/src/utils.js ---
import { connect, Contract, keyStores, WalletConnection } from 'near-api-js'
import getConfig from './config'

const nearConfig = getConfig(process.env.NODE_ENV || 'development')

// Initialize contract & set global variables
export async function initContract() {
  // Initialize connection to the NEAR testnet
  const near = await connect(Object.assign({ deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() } }, nearConfig))

  // Initializing Wallet based Account. It can work with NEAR testnet wallet that
  // is hosted at https://wallet.testnet.near.org
  window.walletConnection = new WalletConnection(near)

  // Getting the Account ID. If still unauthorized, it's just empty string
  window.accountId = window.walletConnection.getAccountId()

  // Initializing our contract APIs by contract name and configuration
  window.contract = await new Contract(window.walletConnection.account(), nearConfig.contractName, {
    // View methods are read only. They don't modify the state, but usually return some value.
    viewMethods: ['get_greeting'],
    // Change methods can modify the state. But you don't receive the returned value when called.
    changeMethods: ['set_greeting'],
  })
}

export function logout() {
  window.walletConnection.signOut()
  // reload page
  window.location.replace(window.location.origin + window.location.pathname)
}

export function login() {
  // Allow the current app to make calls to the specified contract on the
  // user's behalf.
  // This works by creating a new access key for the user's account and storing
  // the private key in localStorage.
  window.walletConnection.requestSignIn(nearConfig.contractName)
}

'''
'''--- webapp/src/wallet/login/index.html ---
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/css/bootstrap.min.css" integrity="sha384-GJzZqFGwb1QTTN6wy59ffF1BuGJpLSa9DkKMp0DgiMDm4iYMj70gZWKYbI706tWS" crossorigin="anonymous">
</head>
<body style="background: #fff; margin-top: 3em">
  <div>For local account login, Please run the following command in NEAR CLI, then enter account id here.
  </div>
  <div>
      <code id="shell-command"></code>
  </div>
  <input type="text" id="accountId" name="accountId" placeholder="Account id"></input>
  <button type="button" onClick="done()">done</button>
  <script>
    const currentUrl = new URL(window.location.href);
    const message = `NODE_ENV=local near create_account {newAccountId} --masterAccount {masterAccountId} --publicKey ${currentUrl.searchParams.get('public_key')} --initialAmount 10000000000000000000`;
    document.getElementById('shell-command').innerText = message;

    function done() {
      const successUrl = new URL(currentUrl.searchParams.get('success_url'));
      successUrl.searchParams.set('account_id', document.getElementById('accountId').value);
      successUrl.searchParams.set('public_key', currentUrl.searchParams.get('public_key'));
      window.location.assign(successUrl.toString());
    }
  </script>
</body>
</html>
'''