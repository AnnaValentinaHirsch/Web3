*GitHub Repository "jackysense/decentralized_service_transaction_platform"*

'''--- .eslintrc.yml ---
env:
  es2021: true
  node: true
extends:
  - 'eslint:recommended'
  - 'plugin:@typescript-eslint/recommended'
parser: '@typescript-eslint/parser'
parserOptions:
  ecmaVersion: 12
  sourceType: module
plugins:
  - '@typescript-eslint'
rules: {}

'''
'''--- .gitpod.yml ---
image:
  file: .gitpod.Dockerfile
# Options to prebuild the image after github events and set notifications/badges
github:
  prebuilds:
    # enable for the master/default branch (defaults to true)
    master: true
    # enable for pull requests coming from this repo (defaults to true)
    pullRequests: true
    # enable for pull requests coming from forks (defaults to false)
    pullRequestsFromForks: true
    # add a check to pull requests (defaults to true)
    addCheck: true
    # add a "Review in Gitpod" button as a comment to pull requests (defaults to false)
    addComment: true
    # add a "Review in Gitpod" button to the pull request's description (defaults to false)
    addBadge: false
    # add a label once the prebuild is ready to pull requests (defaults to false)
    addLabel: false

# List the start up tasks. You can start them in parallel in multiple terminals. See https://www.gitpod.io/docs/config-start-tasks/
tasks:
  - before: echo "nvm use default" >> ~/.bashrc && nvm use default
    command: source ~/.bashrc; gp open README-Gitpod.md && yarn && alias near=./node_modules/near-cli/bin/near && yarn dev

ports:
  - port: 1234
    onOpen: open-browser

'''
'''--- .travis.yml ---
language: node_js
node_js:
  - 12
os:
  - linux
  - osx
  - windows
env:
  - NEAR_ENV=ci YARN_GPG=no
  - NEAR_ENV=ci-betanet YARN_GPG=no
cache: yarn
script:
  - yarn lint && yarn test

'''
'''--- README-Gitpod.md ---
Decentralized Service Transaction Platform - Gitpod version
===========================

Sign in with [NEAR] and add a message to the Decentralized Service Transaction Platform! A starter app built with an [AssemblyScript] backend and a [React] frontend.

This README is specific to Gitpod and this example. For local development, please see [README.md](README.md).

Exploring The Code
==================

1. The backend code lives in the `/assembly` folder. This code gets deployed to
   the NEAR blockchain when you run `yarn deploy:contract`. This sort of
   code-that-runs-on-a-blockchain is called a "smart contract" – [learn more
   about NEAR smart contracts][smart contract docs].
2. The frontend code lives in the `/src` folder.
   [/src/index.html](/src/index.html) is a great place to start exploring. Note
   that it loads in `/src/index.js`, where you can learn how the frontend
   connects to the NEAR blockchain.
3. Tests: there are different kinds of tests for the frontend and backend. The
   backend code gets tested with the [asp] command for running the backend
   AssemblyScript tests, and [jest] for running frontend tests. You can run
   both of these at once with `yarn test`.

Both contract and client-side code will auto-reload as you change source files.

Using
======

Gitpod has taken care of installing all the necessary tools and dependencies. At the bottom of Gitpod is a terminal which will display a link to follow:

    Server running at http://localhost:1234

A small dialog appears showing options similar to this:

![A Gitpod dialog box saying 'A service is available on port 1234' and giving options to 'Open Preview' or 'Open Browser'](assets/gitpod-port-1234.jpg)

The "Open Preview" option will open the site in a tab within the IDE. Note that Gitpod may need a little time to spin up the website. It's possible this step might require reloading after a brief pause.

The "Open Browser" option will open a new tab in your browser. Either option will work and is up to your preference.

Once you've opened the web app in your browser, log in and experiment with the simple "Decentralized Service Transaction Platform" smart contract.

The "Save" button sends the text input to the blockchain, storing it as a string. The web app will reload with the new Decentralized Service Transaction Platform tasks automatically.

The "Save & Donate" button demonstrates attaching NEAR and a gas price when calling the smart contract's method `addTask`. When the web app refreshes with "paid" tasks, the user interface highlights them.

Data collection
===============
By using Gitpod in this project, you agree to opt-in to basic, anonymous analytics. No personal information is transmitted. Instead, these usage statistics aid in discovering potential bugs and user flow information.

  [smart contract docs]: https://docs.near.org/docs/develop/contracts/overview
  [asp]: https://www.npmjs.com/package/@as-pect/cli
  [jest]: https://jestjs.io/
  [NEAR]: https://near.org/
  [AssemblyScript]: https://www.assemblyscript.org/introduction.html
  [React]: https://reactjs.org

'''
'''--- README.md ---
Decentralized Service Transaction Platform
==========

[![Build Status](https://travis-ci.com/near-examples/guest-book.svg?branch=master)](https://travis-ci.com/near-examples/guest-book)

[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/near-examples/guest-book)

<!-- MAGIC COMMENT: DO NOT DELETE! Everything above this line is hidden on NEAR Examples page -->

Sign in with [NEAR] and add a message to the Decentralized Service Transaction Platform! A starter app built with an [AssemblyScript] backend and a [React] frontend.

Quick Start
===========

To run this project locally:

1. Prerequisites: Make sure you have Node.js ≥ 12 installed (https://nodejs.org), then use it to install [yarn]: `npm install --global yarn` (or just `npm i -g yarn`)
2. Run the local development server: `yarn && yarn dev` (see `package.json` for a
   full list of `scripts` you can run with `yarn`)

Now you'll have a local development environment backed by the NEAR TestNet! Running `yarn dev` will tell you the URL you can visit in your browser to see the app.

Exploring The Code
==================

1. The backend code lives in the `/assembly` folder. This code gets deployed to
   the NEAR blockchain when you run `yarn deploy:contract`. This sort of
   code-that-runs-on-a-blockchain is called a "smart contract" – [learn more
   about NEAR smart contracts][smart contract docs].
2. The frontend code lives in the `/src` folder.
   [/src/index.html](/src/index.html) is a great place to start exploring. Note
   that it loads in `/src/index.js`, where you can learn how the frontend
   connects to the NEAR blockchain.
3. Tests: there are different kinds of tests for the frontend and backend. The
   backend code gets tested with the [asp] command for running the backend
   AssemblyScript tests, and [jest] for running frontend tests. You can run
   both of these at once with `yarn test`.

Both contract and client-side code will auto-reload as you change source files.

Deploy
======

Every smart contract in NEAR has its [own associated account][NEAR accounts]. When you run `yarn dev`, your smart contracts get deployed to the live NEAR TestNet with a throwaway account. When you're ready to make it permanent, here's how.

Step 0: Install near-cli
--------------------------

You need near-cli installed globally. Here's how:

    npm install --global near-cli

This will give you the `near` [CLI] tool. Ensure that it's installed with:

    near --version

Step 1: Create an account for the contract
------------------------------------------

Visit [NEAR Wallet] and make a new account. You'll be deploying these smart contracts to this new account.

Now authorize NEAR CLI for this new account, and follow the instructions it gives you:

    near login

Step 2: set contract name in code
---------------------------------

Modify the line in `src/config.js` that sets the account name of the contract. Set it to the account id you used above.

    const CONTRACT_NAME = process.env.CONTRACT_NAME || 'your-account-here!'
    const CONTRACT_NAME2 = process.env.CONTRACT_NAME2 || 'your-account2-here!'

    change ~/contracts/task/assembly/index.ts [TOKEN_CONTRACT_ACCOUNT] to your rating contract account
    
    code : const TOKEN_CONTRACT_ACCOUNT = 'rating.testnet';

Step 3: change remote URL if you cloned this repo 
-------------------------

Unless you forked this repository you will need to change the remote URL to a repo that you have commit access to. This will allow auto deployment to GitHub Pages from the command line.

1) go to GitHub and create a new repository for this project
2) open your terminal and in the root of this project enter the following:

    $ `git remote set-url origin https://github.com/YOUR_USERNAME/YOUR_REPOSITORY.git`

Step 4: deploy!
---------------

Two command:

    near deploy --accountId rating.testnet --wasmFile build/debug/rating.wasm

    near deploy --accountId task01.testnet --wasmFile build/debug/task.wasm

As you can see in `package.json`, this does two things:

1. builds & deploys smart contracts to NEAR TestNet
2. builds & deploys frontend code to GitHub using [gh-pages]. This will only work if the project already has a repository set up on GitHub. Feel free to modify the `deploy` script in `package.json` to deploy elsewhere.

Test:

near call task01.testnet addTask '{"text":"test","deadline":"1653633381505"}' --accountId test1.testnet

near call task01.testnet getTasks --accountId test1.testnet

near call task01.testnet apply '{"index":0}' --accountId test2.testnet

near call task01.testnet ratingAndTransfer '{"index":3,"receiver":"test2.testnet","rating":5,"comment":"good"}' --accountId test1.testnet 

near call rating.testnet  getUserRatingTokens '{"user":"test1.testnet"}' --accountId test2.testnet 

  [NEAR]: https://near.org/
  [yarn]: https://yarnpkg.com/
  [AssemblyScript]: https://www.assemblyscript.org/introduction.html
  [React]: https://reactjs.org
  [smart contract docs]: https://docs.near.org/docs/develop/contracts/overview
  [asp]: https://www.npmjs.com/package/@as-pect/cli
  [jest]: https://jestjs.io/
  [NEAR accounts]: https://docs.near.org/docs/concepts/account
  [NEAR Wallet]: https://wallet.near.org
  [near-cli]: https://github.com/near/near-cli
  [CLI]: https://www.w3schools.com/whatis/whatis_cli.asp
  [create-near-app]: https://github.com/near/create-near-app
  [gh-pages]: https://github.com/tschaub/gh-pages

 
'''
'''--- as-pect.config.js ---
module.exports = require('near-sdk-as/imports');
module.exports.include.push("**/*.unit.spec.ts");
'''
'''--- asconfig.json ---
{ 
  "workspaces": [
    "contracts/task",
    "contracts/rating"
  ]
} 

'''
'''--- babel.config.js ---
module.exports = {
  presets: ['@babel/preset-env', '@babel/preset-react'],
  plugins: [
    [
      "import",
      {
        "libraryName": "antd",
        "libraryDirectory": "es",
        "style": "css"
      }
    ]
  ]
}

'''
'''--- contracts/as_types.d.ts ---
/// <reference types="near-sdk-as/assembly/as_types" />
'''
'''--- contracts/rating/__tests__/as-pect.d.ts ---
/// <reference types="@as-pect/assembly/types/as-pect" />
'''
'''--- contracts/rating/__tests__/index.unit.spec.ts ---
import { Contract } from "../assembly";

let contract: Contract

beforeEach(() => {
  contract = new Contract()
})

describe("Contract", () => {
  // VIEW method tests

  it("says hello", () => {
    expect(contract.helloWorld()).toStrictEqual("hello world")
  })

  it("reads data", () => {
    expect(contract.read("some key")).toStrictEqual("🚫 Key [ some key ] not found in storage. ( storage [ 0 bytes ] )")
  })

  // CHANGE method tests

  it("saves data to contract storage", () => {
    expect(contract.write("some-key", "some value")).toStrictEqual("✅ Data saved. ( storage [ 18 bytes ] )")
  })
})

'''
'''--- contracts/rating/asconfig.json ---
{
  "extends": "near-sdk-as/asconfig.json"
}

'''
'''--- contracts/rating/assembly/index.ts ---
import { context, u128, logging, PersistentMap } from "near-sdk-as";
import { RatingToken } from './model';
import { AccountId } from "../../utils";

export class RatingContract {
  //private owner: AccountId;
  private tokens_per_owner: PersistentMap<AccountId, Array<string>> = new PersistentMap("tpo");
  private tokens_by_id: PersistentMap<string, RatingToken> = new PersistentMap("ti");
  
  mint(token_id: string, grantee: AccountId, text: string, rating: u8): void {
    const ratingToken = this.tokens_by_id.get(token_id);
    if (!!ratingToken) {
      throw new Error('token already exist');
    }
    
    const caller = context.sender;
    let token = new RatingToken(token_id, caller, grantee, text, rating);
    this.tokens_by_id.set(token_id, token);
    const granteeUser = this.tokens_per_owner.get(grantee);
    if (!granteeUser) {
      this.tokens_per_owner.set(grantee, new Array<string>());
    }
    
    let user = this.tokens_per_owner.get(grantee) as Array<string>;
    user.push(token_id);
	this.tokens_per_owner.set(grantee, user);
      logging.log(`RatingToken ${token_id} granted from ${caller} to ${grantee}`);
  }
  
  getUserRatingTokens(user: AccountId): Array<RatingToken> {
	  // this.tokens_per_owner.delete(user);
	   //this.tokens_by_id.delete("comment_jacky1688.testnet_jacky2021.testnet");
    const tokens = this.tokens_per_owner.get(user);
	
    
    let tokenArray = new Array<RatingToken>();
    if (!!tokens) {
     
      for (let i=0; i<tokens.length; i++) {
       
		// this.tokens_by_id.delete(tokens[i]);
        const  tk = this.tokens_by_id.get(tokens[i]) ;    
        if (!!tk) {         
          tokenArray.push(tk);
          
        }
      }
    }
    
    return tokenArray;
  }
}

'''
'''--- contracts/rating/assembly/model.ts ---
import { AccountId } from "../../utils";

@nearBindgen
export class RatingToken {
  constructor(
    public id: string,
    public grantor: AccountId,
    public grantee: AccountId,
    public comment: string,
    public rating: u8,
    // grantDate: i64
  ){}
}

'''
'''--- contracts/task/__tests__/as-pect.d.ts ---
/// <reference types="@as-pect/assembly/types/as-pect" />
'''
'''--- contracts/task/__tests__/index.unit.spec.ts ---
import * as contract from "../assembly";

describe("Contract", () => {
  // VIEW method tests

  it("says hello", () => {
    expect(contract.helloWorld()).toStrictEqual("hello world")
  })

  it("reads data", () => {
    expect(contract.read("some key")).toStrictEqual("🚫 Key [ some key ] not found in storage. ( storage [ 0 bytes ] )")
  })

  // CHANGE method tests

  it("saves data to contract storage", () => {
    expect(contract.write("some-key", "some value")).toStrictEqual("✅ Data saved. ( storage [ 18 bytes ] )")
  })
})

'''
'''--- contracts/task/asconfig.json ---
{
  "extends": "near-sdk-as/asconfig.json"
}

'''
'''--- contracts/task/assembly/index.ts ---
import { context, ContractPromiseBatch, ContractPromise } from "near-sdk-as";
import { PostedTask, postTasks, TokenArg } from './model';
import { AccountId } from "../../utils";

// --- contract code goes below

// The maximum number of latest tasks the contract returns.
const TASK_LIMIT = 10;

const TOKEN_CONTRACT_ACCOUNT = 'rating.testnet';

/**
 * Adds a new task under the name of the sender's account id.\
 * NOTE: This is a change method. Which means it will modify the state.\
 * But right now we don't distinguish them with annotations yet.
 */
export function addTask(text: string,deadline:string): void {
  // Creating a new task and populating fields with our data
  const task = new PostedTask(text,deadline);
  // Adding the message to end of the the persistent collection
  postTasks.push(task);
}

/**
 * Returns an array of last N tasks.\
 * NOTE: This is a view method. Which means it should NOT modify the state.
 */
export function getTasks(): PostedTask[] {
  const numTasks = min(TASK_LIMIT, postTasks.length);
  const startIndex = postTasks.length - numTasks;
  const result = new Array<PostedTask>(numTasks);
  for(let i = 0; i < numTasks; i++) {
    result[i] = postTasks[i + startIndex];
  }
 
  return result;
}

export function apply(index: i32): void {
  assert(index < postTasks.length , "Task not exists");
  assert(!postTasks[index].finalApplicant  , "Task is Finished");
  assert(context.sender != postTasks[index].sender, "Can not apply yourself's task");  
  assert(!postTasks[index].applicants.includes(context.sender), "Can not apply twice");

  const task = postTasks[index];
  task.applicants.push(context.sender);
  postTasks[index]=task;
}

export function ratingAndTransfer(index:i32, receiver:AccountId, rating:u8, comment:string): void {
  assert(context.sender == postTasks[index].sender, "Only proposer can send!");
  assert(postTasks[index].applicants.includes(receiver), "Invalid receiver!");
  const task = postTasks[index];
  task.finalApplicant = receiver;
  postTasks[index]=task;

  const token_id = "comment_" + context.sender + "_" + receiver + "_" +  index.toString();
  const tokenArgs: TokenArg = {  token_id, grantee: receiver, text: comment, rating};
  //TODO sending deposit to receiver
  ContractPromise.create(
    TOKEN_CONTRACT_ACCOUNT, 
    'mint', // target method name
    tokenArgs.encode(), // target method arguments
    2_500_000_000_000 // gas attached to the call 2 428 115 526 258
    // projectBudget             // deposit attached to the call
  ); 
  ContractPromiseBatch.create(receiver).transfer(postTasks[index].balance);  
}

'''
'''--- contracts/task/assembly/model.ts ---
import { context, u128, PersistentVector } from "near-sdk-as";
import { AccountId } from "../../utils";

/**
 * Exporting a new class PostedTask so it can be used outside of this file.
 */
@nearBindgen
export class PostedTask {
  balance: u128;
  sender: AccountId;
  finalApplicant: AccountId;
  applicants: Array<AccountId>;

  constructor(public task: string, public deadline: string) {
    this.balance = context.attachedDeposit;
    this.sender = context.sender;
    this.finalApplicant = "";
    this.applicants = new Array<AccountId>();
  }
}

@nearBindgen
export class TokenArg {
  token_id: string;
  grantee: AccountId;
  text: string;
  rating: u8;
}

/**
 * collections.vector is a persistent collection. Any changes to it will
 * be automatically saved in the storage.
 * The parameter to the constructor needs to be unique across a single contract.
 * It will be used as a prefix to all keys required to store data in the storage.
 */
export const postTasks = new PersistentVector<PostedTask>("t");

'''
'''--- contracts/tsconfig.json ---
{
  "extends": "../node_modules/assemblyscript/std/assembly.json",
  "include": ["./**/*.ts"]
}

'''
'''--- contracts/utils.ts ---
import { u128, Context, ContractPromise } from "near-sdk-as";

/**
 * == TYPES ====================================================================
 */

/**
 * Account IDs in NEAR are just strings.
 */
export type AccountId = string;

/**
 * Gas is u64
 */
export type Gas = u64;

/**
 * Amounts, Balances, and Money in NEAR is are u128.
 */

export type Amount = u128;

export type Balance = Amount;

export type Money = Amount;

/**
 * Timestamp in NEAR is a number.
 */
export type Timestamp = u64;

/**
 * == CONSTANTS ================================================================
 *
 * ONE_NEAR = unit of NEAR token in yocto Ⓝ (1e24)
 * XCC_GAS = gas for cross-contract calls, ~5 Tgas (teragas = 1e12) per "hop"
 * MIN_ACCOUNT_BALANCE = 3 NEAR min to keep account alive via storage staking
 *
 * TODO: revist MIN_ACCOUNT_BALANCE after some real data is included b/c this
 *  could end up being much higher
 */

export const ONE_NEAR = u128.from("1000000000000000000000000");
export const XCC_GAS: Gas = 20_000_000_000_000;
export const MIN_ACCOUNT_BALANCE: u128 = u128.mul(ONE_NEAR, u128.from(3));

/**
 * == FUNCTIONS ================================================================
 */

/**
 * @function asNEAR
 * @param amount {u128} - Yocto Ⓝ token quantity as an unsigned 128-bit integer
 * @returns {string}    - Amount in NEAR, as a string
 *
 * @example
 *
 *    asNEAR(7000000000000000000000000)
 *    // => '7'
 */
export function asNEAR(amount: u128): string {
  return u128.div(amount, ONE_NEAR).toString();
}

/**
 * @function toYocto
 * @param amount {number} - Integer to convert
 * @returns {u128}        - Amount in yocto Ⓝ as an unsigned 128-bit integer
 *
 * @example
 *
 *    toYocto(7)
 *    // => 7000000000000000000000000
 */
export function toYocto(amount: number): u128 {
  return u128.mul(ONE_NEAR, u128.from(amount))
}

/**
 * Function to assert that the contract has called itself
 */
export function assert_self(): void {
  const caller = Context.predecessor
  const self = Context.contractName
  assert(caller == self, "Only this contract may call itself");
}

export function assert_single_promise_success(): void {
  const x = ContractPromise.getResults()
  assert(x.length == 1, "Expected exactly one promise result")
  assert(x[0].succeeded, "Expected PromiseStatus to be successful")
}

'''
'''--- package.json ---
{
  "name": "decentralized-service-transaction-platform",
  "version": "0.1.0",
  "license": "(MIT AND Apache-2.0)",
  "scripts": {
    "build": "yarn build:contract && yarn build:web && cp vercel.json ./dist",
    "build:contract": "asb",
    "build:contract:debug": "asb --target debug",
    "build:web": "parcel build src/index.html --public-url ./",
    "dev": "yarn build:contract:debug && near dev-deploy && nodemon --watch assembly -e ts --exec yarn dev:start",
    "lint": "eslint \"./**/*.js\" \"./**/*.jsx\"",
    "start": "parcel src/index.html",
    "run": "parcel src/index.html",
    "dev:start": "env-cmd -f ./neardev/dev-account.env parcel src/index.html",
    "test": "npm run test:unit && npm run test:integration",
    "test:unit": "yarn build:contract:debug && asp && jest",
    "test:integration": "yarn build:contract:debug && npm run test:integration:ts && npm run test:integration:rs",
    "test:integration:ts": "ava --verbose",
    "test:integration:rs": "cd src/tests/integration-tests/rs && cargo run --example integration-tests"
  },
  "devDependencies": {
    "@babel/core": "^7.10.2",
    "@babel/preset-env": "^7.10.2",
    "@babel/preset-react": "^7.10.1",
    "@types/node": "^14.0.13",
    "@types/react": "^16.9.36",
    "@types/react-dom": "^16.9.8",
    "babel-plugin-import": "^1.13.0",   
    "@typescript-eslint/eslint-plugin": "^4.22.1",
    "@typescript-eslint/parser": "^4.33.0",
    "ava": "^4.2.0",
    "babel-jest": "^27.4.2",
    "eslint": "^7.32.0",
    "gh-pages": "^3.2.3",
    "jest": "^26.6.3",
    "jest-environment-node": "^26.6.2",
    "near-cli": "^3.0.0",
    "near-sdk-as": "^3.2.3",
    "near-workspaces": "^2.0.0",
    "nodemon": "^2.0.7",
    "parcel-bundler": "^1.12.5",
    "react-test-renderer": "^17.0.2",
    "sass": "^1.51.0",
    "ts-node": "^10.7.0",
    "typescript": "^4.6.4"    
  },
  "dependencies": {
    "antd": "^3.26.18",
    "less": "^3.11.3",
    "parcel-bundler": "^1.12.4",
    "react": "^16.13.1",
    "react-dom": "^16.13.1",
    "typescript": "^3.9.5",
    "big.js": "^6.1.1",
    "env-cmd": "^10.1.0",
    "near-api-js": "^0.44.2",
    "next": "^12.1.6",
    "prettier": "^2.6.2",
    "prop-types": "^15.7.2",
   
    "regenerator-runtime": "^0.13.9"
  },
  "resolutions": {
    "@babel/preset-env": "7.13.8"
  },
  "jest": {
    "projects": [
      {
        "displayName": "User interface tests",
        "testEnvironment": "jsdom",
        "testMatch": [
          "<rootDir>/src/tests/frontend/*.js"
        ]
      }
    ],
    "testPathIgnorePatterns": [
      "assembly/*"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

'''
'''--- src/config.js ---
const CONTRACT_NAME = process.env.CONTRACT_NAME || 'task01.testnet';
const CONTRACT_NAME2 = process.env.CONTRACT_NAME2 || 'rating.testnet';

function getConfig(env) {
  switch(env) {
    case 'mainnet':
      return {
        networkId: 'mainnet',
        nodeUrl: 'https://rpc.mainnet.near.org',
        contractName: CONTRACT_NAME,
        walletUrl: 'https://wallet.near.org',
        helperUrl: 'https://helper.mainnet.near.org'
      };
    // This is an example app so production is set to testnet.
    // You can move production to mainnet if that is applicable.
    case 'production':
    case 'development':
    case 'testnet':
      return {
        networkId: 'testnet',
        nodeUrl: 'https://public-rpc.blockpi.io/http/near-testnet',
        contractName: CONTRACT_NAME,
        contractName2:  CONTRACT_NAME2,
        walletUrl: 'https://wallet.testnet.near.org',
        helperUrl: 'https://helper.testnet.near.org'
      };
    case 'betanet':
      return {
        networkId: 'betanet',
        nodeUrl: 'https://rpc.betanet.near.org',
        contractName: CONTRACT_NAME,
        walletUrl: 'https://wallet.betanet.near.org',
        helperUrl: 'https://helper.betanet.near.org'
      };
    case 'local':
      return {
        networkId: 'local',
        nodeUrl: 'http://localhost:3030',
        keyPath: `${process.env.HOME}/.near/validator_key.json`,
        walletUrl: 'http://localhost:4000/wallet',
        contractName: CONTRACT_NAME
      };
    case 'test':
    case 'ci':
      return {
        networkId: 'shared-test',
        nodeUrl: 'https://rpc.ci-testnet.near.org',
        contractName: CONTRACT_NAME,
        masterAccount: 'test.near'
      };
    case 'ci-betanet':
      return {
        networkId: 'shared-test-staging',
        nodeUrl: 'https://rpc.ci-betanet.near.org',
        contractName: CONTRACT_NAME,
        masterAccount: 'test.near'
      };
    default:
      throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`);
  }
}

module.exports = getConfig;

'''
'''--- src/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="./favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <link rel="apple-touch-icon" href="./favicon.ico" />
    <link rel="stylesheet" href="global.scss">
    <title>Decentralized Service Transaction Platform</title>
    <meta property="og:title" content="Decentralized Service Transaction Platform">
    <meta property="og:description" content="A Decentralized Service Transaction Platform with comments stored on the NEAR blockchain">
    <!-- <meta property="og:image" content=""> -->
    <!-- <meta property="og:url" content=""> -->
    <!-- <meta name="twitter:card" content="summary_large_image"> -->
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `yarn dev`.
      To create a production bundle, use `yarn build`.
    -->
    <script src="./index.jsx"></script>
  </body>
</html>

'''
'''--- src/pages/about.js ---
function About() {
    return <div>About</div>
  }
  
  export default About
'''
'''--- src/tests/frontend/App-ui.test.js ---
import 'regenerator-runtime/runtime';
import React from 'react';
import TestRenderer from 'react-test-renderer';
import App from '../../App';
const { act } = TestRenderer;

// Declare stubs for contract, walletConnection, and nearConfig
const contract = {
  account: {
    connection: {},
    accountId: 'test.near'
  },
  contractId: 'test.near',
  getTasks: () => new Promise(() => {}),
  addTask: () => ''
};
const walletConnection = {
  account: () => ({ _state: { amount: '1' + '0'.repeat(25) } }),
  requestSignIn: () => null,
  signOut: () => null,
  isSignedIn: () => false,
  getAccountId: () => 'test.near'
};
const nearConfig = {
  networkId: 'testnet',
  nodeUrl: 'https://rpc.testnet.near.org',
  contractName: 'test.near',
  walletUrl: 'https://wallet.testnet.near.org',
  helperUrl: 'https://near-contract-helper.onrender.com'
};

// For UI tests, use pattern from: https://reactjs.org/docs/test-renderer.html
let container;

beforeEach(() => {
  container = document.createElement('div');
  document.body.appendChild(container);
});

afterEach(() => {
  document.body.removeChild(container);
  container = null;
});

it('renders with proper title', () => {
  let testRenderer;

  act(() => {
    testRenderer = TestRenderer.create(
      <App contract={contract} wallet={walletConnection} nearConfig={nearConfig} />
    );
  });

  const testInstance = testRenderer.root;

  expect(testInstance.findByType('h1').children).toEqual(['NEAR Decentralized Service Transaction Platform']);
});

'''
'''--- src/tests/integration-tests/rs/Cargo.toml ---
[package]
name = "guest-book-integration-tests"
version = "1.0.0"
publish = false
edition = "2018"

[dev-dependencies]
near-sdk = "4.0.0-pre.7"
anyhow = "1.0"
borsh = "0.9"
maplit = "1.0"
near-units = "0.2.0"
# arbitrary_precision enabled for u128 types that workspaces requires for Balance types
serde_json = { version = "1.0", features = ["arbitrary_precision"] }
tokio = { version = "1.18.1", features = ["full"] }
tracing = "0.1"
tracing-subscriber = { version = "0.3.11", features = ["env-filter"] }
workspaces = "0.2.1"
pkg-config = "0.3.1"

[[example]]
name = "integration-tests"
path = "src/tests.rs"

'''
'''--- src/tests/integration-tests/rs/src/tests.rs ---
use serde_json::json;
use near_units::parse_near;
use workspaces::prelude::*; 
use workspaces::{network::Sandbox, Account, Contract, Worker};

const WASM_FILEPATH: &str = "../../../../out/main.wasm";

#[tokio::main]
async fn main() -> anyhow::Result<()> {
    let worker = workspaces::sandbox().await?;
    let wasm = std::fs::read(WASM_FILEPATH)?;
    let contract = worker.dev_deploy(&wasm).await?;

    // create accounts
    let owner = worker.root_account();
    let alice = owner
    .create_subaccount(&worker, "alice")
    .initial_balance(parse_near!("30 N"))
    .transact()
    .await?
    .into_result()?;

    // begin tests  
    test_message(&alice, &contract, &worker).await?;
    test_messages(&alice, &owner, &contract, &worker).await?;
    Ok(())
}   

async fn test_message(
    user: &Account,
    contract: &Contract,
    worker: &Worker<Sandbox>,
) -> anyhow::Result<()> {
    user
    .call(&worker, contract.id(), "addTask")
    .args_json(json!({"text": "aloha"}))?
    .transact()
    .await?;

    let result: serde_json::Value = user
        .call(&worker, contract.id(), "getMessageTasks")
        .args_json(json!({}))?
        .transact()
        .await?
        .json()?;

    let expected = json!(
        [{
            "premium": false,
            "sender": user.id(),
            "text": "aloha",
        }]
    );    

    assert_eq!(result, expected);
    println!("      Passed ✅ send one message and retrieve it");
    Ok(())
}

async fn test_messages(
    alice: &Account,
    user: &Account,
    contract: &Contract,
    worker: &Worker<Sandbox>,
) -> anyhow::Result<()> {
    user
        .call(&worker, contract.id(), "addTask")
        .args_json(json!({"text": "hola"}))?
        .transact()
        .await?;

    let result: serde_json::Value = user
        .call(&worker, contract.id(), "getMessageTasks")
        .args_json(json!({}))?
        .transact()
        .await?
        .json()?;

    let expected = json!(
        [{
            "premium": false,
            "sender": alice.id(),
            "text": "aloha",
        },
        {
            "premium": false,
            "sender": user.id(),
            "text": "hola",
        }]
    );    

    assert_eq!(result, expected);
    println!("      Passed ✅ send two tasks and expect two total");
    Ok(())
}
'''
'''--- src/tests/integration-tests/ts/main.ava.ts ---
import { Worker, NEAR, NearAccount } from "near-workspaces";
import anyTest, { TestFn } from "ava";

const test = anyTest as TestFn<{
  worker: Worker;
  accounts: Record<string, NearAccount>;
}>;

test.beforeEach(async (t) => {
  // Init the worker and start a Sandbox server
  const worker = await Worker.init();

  // deploy contract
  const root = worker.rootAccount;
  const contract = await root.createAndDeploy(
    root.getSubAccount("guest-book").accountId,
    "./out/main.wasm",
    { initialBalance: NEAR.parse("30 N").toJSON() }
  );

  // some test accounts
  const alice = await root.createSubAccount("alice", {
    initialBalance: NEAR.parse("30 N").toJSON(),
  });
  const bob = await root.createSubAccount("bob", {
    initialBalance: NEAR.parse("30 N").toJSON(),
  });
  const charlie = await root.createSubAccount("charlie", {
    initialBalance: NEAR.parse("30 N").toJSON(),
  });

  // Save state for test runs, it is unique for each test
  t.context.worker = worker;
  t.context.accounts = { root, contract, alice, bob, charlie };
});

test.afterEach(async (t) => {
  // Stop Sandbox server
  await t.context.worker.tearDown().catch((error) => {
    console.log("Failed to stop the Sandbox:", error);
  });
});

test("send one message and retrieve it", async (t) => {
  const { root, contract, alice, bob, charlie } = t.context.accounts;
  await root.call(contract, "addTask", { text: "aloha" });
  const msgs = await contract.view("getMessageTasks");
  const expectedMessagesResult = [
    {
      premium: false,
      sender: root.accountId,
      text: "aloha",
    },
  ];
  t.deepEqual(msgs, expectedMessagesResult);
});

test("send two tasks and expect two total", async (t) => {
  const { root, contract, alice, bob, charlie } = t.context.accounts;
  await root.call(contract, "addTask", { text: "aloha" });
  await alice.call(contract, "addTask", { text: "hola" });
  const msgs = await contract.view("getMessageTasks");
  const expected = [
    {
      premium: false,
      sender: root.accountId,
      text: "aloha",
    },
    { premium: false, 
      sender: alice.accountId, 
      text: "hola" 
    },
  ];
  t.deepEqual(msgs, expected);
});

'''
'''--- utils/as_types.d.ts ---
/// <reference types="near-sdk-as/assembly/as_types" />
'''
'''--- utils/utils.ts ---
import { u128, Context, ContractPromise } from "near-sdk-as";

/**
 * == TYPES ====================================================================
 */

/**
 * Account IDs in NEAR are just strings.
 */
export type AccountId = string;

/**
 * Gas is u64
 */
export type Gas = u64;

/**
 * Amounts, Balances, and Money in NEAR is are u128.
 */

export type Amount = u128;

export type Balance = Amount;

export type Money = Amount;

/**
 * Timestamp in NEAR is a number.
 */
export type Timestamp = u64;

/**
 * == CONSTANTS ================================================================
 *
 * ONE_NEAR = unit of NEAR token in yocto Ⓝ (1e24)
 * XCC_GAS = gas for cross-contract calls, ~5 Tgas (teragas = 1e12) per "hop"
 * MIN_ACCOUNT_BALANCE = 3 NEAR min to keep account alive via storage staking
 *
 * TODO: revist MIN_ACCOUNT_BALANCE after some real data is included b/c this
 *  could end up being much higher
 */

export const ONE_NEAR = u128.from("1000000000000000000000000");
export const XCC_GAS: Gas = 20_000_000_000_000;
export const MIN_ACCOUNT_BALANCE: u128 = u128.mul(ONE_NEAR, u128.from(3));

/**
 * == FUNCTIONS ================================================================
 */

/**
 * @function asNEAR
 * @param amount {u128} - Yocto Ⓝ token quantity as an unsigned 128-bit integer
 * @returns {string}    - Amount in NEAR, as a string
 *
 * @example
 *
 *    asNEAR(7000000000000000000000000)
 *    // => '7'
 */
export function asNEAR(amount: u128): string {
  return u128.div(amount, ONE_NEAR).toString();
}

/**
 * @function toYocto
 * @param amount {number} - Integer to convert
 * @returns {u128}        - Amount in yocto Ⓝ as an unsigned 128-bit integer
 *
 * @example
 *
 *    toYocto(7)
 *    // => 7000000000000000000000000
 */
export function toYocto(amount: number): u128 {
  return u128.mul(ONE_NEAR, u128.from(amount))
}

/**
 * Function to assert that the contract has called itself
 */
export function assert_self(): void {
  const caller = Context.predecessor
  const self = Context.contractName
  assert(caller == self, "Only this contract may call itself");
}

export function assert_single_promise_success(): void {
  const x = ContractPromise.getResults()
  assert(x.length == 1, "Expected exactly one promise result")
  assert(x[0].succeeded, "Expected PromiseStatus to be successful")
}

'''
'''--- vercel.json ---
{
  "headers": [
    {
      "source": "/(.*)",
      "headers": [
        {
          "key": "X-Frame-Options",
          "value": ""
        }
      ]
    }
  ],
  "routes": [
    {
      "src": "/(.*)",
      "dest": "https://goerli.portal.zksync.io/$1"
    }
  ]
}

'''