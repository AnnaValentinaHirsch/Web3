*GitHub Repository "NEARBuilders/create"*

'''--- .github/workflows/deploy-prod-mainnet.yml ---
name: Deploy Widgets to Mainnet
on:
  push:
    branches: [main]
jobs:
  deploy-widgets:
    runs-on: ubuntu-latest
    name: Deploy widgets to social.near (mainnet)
    env:
      NEAR_DEPLOY_ID: ${{ vars.NEAR_ACCOUNT_ID }}
      NEAR_ACCOUNT_ID: ${{ vars.NEAR_ACCOUNT_ID }}
      NEAR_ACCOUNT_PUBLIC_KEY: ${{ vars.NEAR_ACCOUNT_PUBLIC_KEY }}
      NEAR_ACCOUNT_PRIVATE_KEY: ${{ secrets.NEAR_ACCOUNT_PRIVATE_KEY }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      
      - name: Install bos-workspace
        run: |
          npm install bos-workspace

      - name: Build
        run: |
          npm run build

      - name: Install bos CLI
        run: |
          curl --proto '=https' --tlsv1.2 -LsSf https://github.com/FroVolod/bos-cli-rs/releases/download/v0.3.2/bos-cli-installer.sh | sh

      - name: Deploy widgets
        working-directory: ./build/create
        run: |
          which bos
          echo $PATH
          bos components deploy "$NEAR_DEPLOY_ID" sign-as "$NEAR_ACCOUNT_ID" network-config mainnet sign-with-plaintext-private-key --signer-public-key "$NEAR_ACCOUNT_PUBLIC_KEY" --signer-private-key "$NEAR_ACCOUNT_PRIVATE_KEY" send

'''
'''--- .github/workflows/release-editor-mainnet.yml ---
name: Deploy Components to Mainnet
on:
  push:
    paths:
      - "apps/editor/**"
    branches: [main]
jobs:
  deploy-mainnet:
    uses: NEARBuilders/bos-workspace/.github/workflows/deploy.yml@main
    with:
      deploy-env: "mainnet"
      app-name: "editor"
      deploy-account-address:  devs.near
      signer-account-address: devs.near
      signer-public-key: ${{ vars.DEVS_SIGNER_PUBLIC_KEY }}
    secrets:
      SIGNER_PRIVATE_KEY:  ${{ secrets.DEVS_SIGNER_PRIVATE_KEY }}
'''
'''--- README.md ---
# Create App

Starter Kit for Builders

## Getting Started 

To run locally, first install.

Then, run the command:

```bash
yarn dev
```

This will serve the widgets from `http://127.0.0.1:4040/api/loader`. (or 8080)

Go to [everything.dev/flags](https://everything.dev) and paste this value there.

Once set, see the locally served app at [create.near/widget/app](https://everything.dev/create.near/widget/app).

## How To Contribute

Clone the repository, make some changes, open issues, and submit pull requests.

Updates to this repository's main branch automatically deploy to the create.near workspace.

'''
'''--- apps/create/bos.config.json ---
{
  "appAccount": "create.near",
  "aliases": {
    "nui": "nearui.near"
  }
}

'''
'''--- apps/editor/bos.config.json ---
{
  "appAccount": "devs.near"
}
'''
'''--- modules/QoL/Url.js ---
const Url = {
  construct: (url, params) => {
    let query = "";
    Object.keys(params || {}).forEach((key) => {
      if (params.hasOwnProperty(key)) {
        query += Url.encode(key) + "=" + Url.encode(params[key]);
        if (key !== Object.keys(params || {}).slice(-1)[0]) {
          query += "&";
        }
      }
    });
    return url + "?" + query;
  },
  // Alternative to encodeURIComponent
  encode: (str) => {
    return `${str}`
      .replace(/[!'()*]/g, (c) => {
        return "%" + c.charCodeAt(0).toString(16);
      })
      .replace(/[^!'\(\)~\*A-Za-z0-9\-_\.~]/g, (c) => {
        return "%" + c.charCodeAt(0).toString(16);
      });
  },
};

'''
'''--- modules/QoL/classNames.js ---
const classNames = (classes) =>
  classes.filter((className) => className).join(" ");

'''
'''--- modules/QoL/storage.js ---
const store = (k, v) => Storage.privateSet(k, v);
const retrieve = (k) => Storage.privateGet(k);

'''
'''--- modules/QoL/widget.js ---
const widget = (src, props, other) => (
  <Widget src={src} props={props} {...other} />
);

'''
'''--- modules/everything/sdk.js ---
/*__@import:everything/utils/UUID__*/

function filterByType(data, targetType) {
  return Object.keys(data || {}).reduce((result, key) => {
    if (data[key].metadata?.type === targetType) {
      result[key] = data[key];
    }
    return result;
  }, {});
}

function deepMerge(obj1, obj2) {
  return Object.keys({ ...obj1, ...obj2 }).reduce((acc, key) => {
    if (
      obj1[key] &&
      obj2[key] &&
      typeof obj1[key] === "object" &&
      typeof obj2[key] === "object"
    ) {
      acc[key] = deepMerge(obj1[key], obj2[key]);
    } else {
      acc[key] = obj2[key] !== undefined ? obj2[key] : obj1[key];
    }
    return acc;
  }, {});
}

/**
 * Gets all things of a given type, optionally filtered by accounts and blockHeight
 * @param {string} type - type of thing to filter by
 * @param {Array<string>} [accounts] - Optional list of accounts to filter by
 * @param {string|number} blockHeight - Optional blockHeight to use; defaults to "final"
 * @returns {object} - all things of the given type
 */
function getAllThings(type, accounts, blockHeight) {
  let paths;
  if (!blockHeight) {
    blockHeight = "final";
  }

  if (Array.isArray(accounts) && accounts.length) {
    // We could change this to get all metadata, metadata includes type
    // and then we have all we need in order to show on screens. Anything else can be fetched separately.
    paths = accounts.map((account) => `${account}/thing/*/metadata/*`);
  } else {
    paths = ["*/thing/*/metadata/*"];
  }
  const things = Social.get(paths, blockHeight);
  return filterByType(things, type) ?? {};
}

/**
 * Gets the thing matching id, optionally filtered by accounts and blockHeight
 * @param {string} id - thing id
 * @param {Array<string>} [accountIds] - Optional list of accounts to filter by. If not provided, defaults to any account.
 * @param {string|number} blockHeight - Optional blockHeight to use; defaults to "final"
 * @returns {object|null} - the thing, multiple things if matches id across accounts, or null if not found
 */
function getThing(id, accountIds, blockHeight) {
  let paths;
  if (!blockHeight) {
    blockHeight = "final";
  }

  if (Array.isArray(accountIds) && accountIds.length) {
    paths = accountIds.map((accountId) => `${accountId}/thing/${id}/**`);
  } else {
    paths = [`*/thing/${id}/**`];
  }

  const thing = Social.get(paths, blockHeight) || {};

  return thing;
}

function deleteThing(id) {
  Social.set({
    thing: {
      [id]: null,
    },
  });
}

/**
 * Creates a thing with the given type, data, and metadata
 * Subsequently calls onCommit or onCancel
 * @param {string} type - type of thing to create
 * @param {object} data - data to store
 * @param {object} metadata - metadata to store
 */
function createThing(type, data, metadata) {
  // Temporary small id
  const id = UUID.generate("xxxxxxx");
  return {
    [id]: {
      // I think there may be some value in stringify-ing the data and storing in empty key, but I'm not sure
      // Maybe it's for published data? Data that has no relations?
      // It's more space efficient for the social contract if we limit the number of keys
      "": JSON.stringify(data),
      data, // so I'm just gonna do both for right now :)
      metadata: { ...metadata, type },
    },
  };
}

'''
'''--- modules/everything/utils/UUID.js ---
const UUID = {
  generate: (template) => {
    if (typeof template !== "string") {
      template = "xxxxxxxx-xxxx-xxxx-yxxx-xxxxxxxxxxxx";
    }
    return template.replace(/[xy]/g, (c) => {
      var r = (Math.random() * 16) | 0;
      var v = c === "x" ? r : (r & 0x3) | 0x8;
      return v.toString(16);
    });
  },
};

'''
'''--- modules/everything/utils/debounce.js ---
let timeoutId;

const debounce = (func, delay) => {
  if (!delay) {
    delay = 300;
  }
  clearTimeout(timeoutId);
  timeoutId = setTimeout(func, delay);
};

'''
'''--- package.json ---
{
  "name": "create",
  "version": "0.0.8",
  "description": "starter kit for builders",
  "scripts": {
    "dev": "bos-workspace dev",
    "build": "bos-workspace build"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/NEARBuilders/create.git"
  },
  "author": "",
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/NEARBuilders/create/issues"
  },
  "homepage": "https://github.com/NEARBuilders/create#readme",
  "dependencies": {
    "bos-workspace": "^0.0.1-alpha.4"
  }
}

'''