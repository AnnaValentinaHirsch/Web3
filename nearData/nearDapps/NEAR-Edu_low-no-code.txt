*GitHub Repository "NEAR-Edu/low-no-code"*

'''--- .eslintrc.json ---
{
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "project": "./tsconfig.json"
  },
  "plugins": ["@typescript-eslint"],
  "extends": ["next/core-web-vitals", "plugin:@typescript-eslint/recommended"]
}

'''
'''--- README.md ---
# Create T3 App

This is an app bootstrapped according to the [init.tips](https://init.tips) stack, also known as the T3-Stack.

## What's next? How do I make an app with this?

We try to keep this project as simple as possible, so you can start with the most basic configuration and then move on to more advanced configuration.

If you are not familiar with the different technologies used in this project, please refer to the respective docs. If you still are in the wind, please join our [Discord](https://t3.gg/discord) and ask for help.

- [Next-Auth.js](https://next-auth.js.org)
- [Prisma](https://prisma.io)
- [TailwindCSS](https://tailwindcss.com)
- [tRPC](https://trpc.io)

We also [roll our own docs](https://beta.create.t3.gg) with some summary information and links to the respective documentation.

Also checkout these awesome tutorials on `create-t3-app`.

- [Build a Blog With the T3 Stack - tRPC, TypeScript, Next.js, Prisma & Zod](https://www.youtube.com/watch?v=syEWlxVFUrY)
- [Build a Live Chat Application with the T3 Stack - TypeScript, Tailwind, tRPC](https://www.youtube.com/watch?v=dXRRY37MPuk)
- [Build a full stack app with create-t3-app](https://www.nexxel.dev/blog/ct3a-guestbook)
- [A first look at create-t3-app](https://dev.to/ajcwebdev/a-first-look-at-create-t3-app-1i8f)

## How do I deploy this?

Follow our deployment guides for [Vercel](https://beta.create.t3.gg/en/deployment/vercel) and [Docker](https://beta.create.t3.gg/en/deployment/docker) for more information.

'''
'''--- next-env.d.ts ---
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/basic-features/typescript for more information.

'''
'''--- package.json ---
{
  "name": "low-no-code-nextjs",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "build": "next build && next export",
    "dev": "next dev",
    "lint": "next lint",
    "start": "next start"
  },
  "dependencies": {
    "airtable": "^0.11.5",
    "clsx": "^1.2.1",
    "next": "12.3.1",
    "react": "18.2.0",
    "react-dom": "18.2.0",
    "zod": "^3.18.0"
  },
  "devDependencies": {
    "@types/node": "18.0.0",
    "@types/react": "18.0.14",
    "@types/react-dom": "18.0.5",
    "@typescript-eslint/eslint-plugin": "^5.33.0",
    "@typescript-eslint/parser": "^5.33.0",
    "autoprefixer": "^10.4.7",
    "eslint": "8.22.0",
    "eslint-config-next": "12.3.1",
    "postcss": "^8.4.14",
    "prettier": "^2.7.1",
    "prettier-plugin-tailwindcss": "^0.1.13",
    "tailwindcss": "^3.1.6",
    "typescript": "^4.8.4"
  },
  "ct3aMetadata": {
    "initVersion": "6.5.1"
  }
}

'''
'''--- src/styles/globals.css ---
@tailwind base;
@tailwind components;
@tailwind utilities;

'''
'''--- src/utils/index.ts ---
import airtable from "airtable";
import { env } from "../env/server.mjs";

// eslint-disable-next-line @typescript-eslint/no-explicit-any
export type LowerCaseObjectKeys<T extends Record<string, any>> = {
  [K in keyof T as K extends string ? Lowercase<K> : K]: T[K];
};

/**
 * Copy the passed in object while converting the keys of the object to lower case.
 * Only shallowly (1 level deep) converts keys.
 *
 * @param objectToLowerCase - The object whose keys to convert to lower case.
 */
export function lowerCaseObjectKeys<
  ObjectValues extends Record<string, unknown> = Record<string, unknown>
>(objectToLowerCase: ObjectValues): LowerCaseObjectKeys<ObjectValues> {
  return Object.keys(objectToLowerCase).reduce(
    (fieldObject, currentKey) => ({
      ...fieldObject,
      [currentKey.toLowerCase()]: objectToLowerCase[currentKey],
    }),
    {}
  ) as LowerCaseObjectKeys<ObjectValues>;
}

export interface ImageField {
  url: string;
}

export interface LowNoCodeEntry {
  id: string;
  name?: string;
  description?: string;
  image?: ImageField;
  creator: LowNoCodeCreator;
  link: string;
  platform: string;
}

export interface LowNoCodeDetail extends LowNoCodeEntry {
  text?: string;
}

export interface LowNoCodeCreator {
  id: string;
  name: string;
  github?: string;
  image?: ImageField;
}

/**
 * Extract the first image from an image array;
 */
export function extractImageField<Input extends { image?: Array<ImageField> }>(
  input: Input
): Omit<Input, "image"> & { image?: ImageField } {
  if (input.image && input.image.length > 0 && input.image[0]) {
    return { ...input, image: input.image[0] };
  }

  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  const { image, ...rest } = input;

  return rest;
}

/**
 * Retrieve all the records from the Low/No code table in Airtable.
 */
export async function fetchAllRecords(): Promise<Array<LowNoCodeEntry>> {
  try {
    airtable.configure({
      apiKey: env.AIRTABLE_API_KEY,
    });

    const connection = airtable.base(env.AIRTABLE_BASE_ID);

    const records = new Promise<LowNoCodeEntry[]>((resolve, reject) => {
      connection(env.AIRTABLE_TABLE_ID)
        .select({
          fields: [
            "Name",
            "Description",
            "Image",
            "Creator",
            "Link",
            "Platform",
          ],
          sort: [{ field: "ID", direction: "asc" }],
        })
        .firstPage(async (error, records) => {
          if (error || !records) {
            reject(error);
            return;
          }

          const creators = new Map<string, boolean>();
          const creatorFetches: Array<Promise<LowNoCodeCreator>> = [];

          const entries = records.map(({ id, fields }) => {
            const entry = {
              id,
              ...lowerCaseObjectKeys(fields),
            } as Omit<LowNoCodeEntry, "creator"> & { creator: string[] };

            if (
              entry.creator &&
              entry.creator.length > 0 &&
              !creators.has(entry.creator[0] as string)
            ) {
              creatorFetches.push(
                new Promise((resolve, reject) => {
                  connection(env.AIRTABLE_CREATOR_TABLE_ID).find(
                    entry.creator[0] as string,
                    (error, record) => {
                      if (error || !record) {
                        reject(error);
                        return;
                      }

                      const creator = {
                        id: record.id,
                        ...lowerCaseObjectKeys(record.fields),
                      } as LowNoCodeCreator;

                      resolve(
                        extractImageField(
                          creator as { image?: Array<ImageField> }
                        ) as LowNoCodeCreator
                      );
                    }
                  );
                })
              );
              creators.set(entry.creator[0] as string, true);
            }

            return extractImageField(
              entry as { image?: Array<ImageField> }
            ) as Omit<LowNoCodeEntry, "creator"> & { creator?: Array<string> };
          });

          const fetchedCreators = await Promise.all(creatorFetches);

          const creatorsMap = new Map<string, LowNoCodeCreator>(
            fetchedCreators.map((creator) => [creator.id, creator])
          );

          resolve(
            entries.map((entry) => {
              if (
                entry.creator &&
                entry.creator.length > 0 &&
                creatorsMap.has(entry.creator[0] as string)
              ) {
                return {
                  ...entry,
                  creator: creatorsMap.get(
                    entry.creator[0] as string
                  ) as LowNoCodeCreator,
                };
              }

              // eslint-disable-next-line @typescript-eslint/no-unused-vars
              const { creator, ...rest } = entry;

              return rest as LowNoCodeEntry;
            })
          );
        });
    });

    return records;
  } catch (error) {
    console.error(error);
    return [];
  }
}

/**
 * Retrieve a single record from the Low/No code table in Airtable.
 */
export async function fetchRecordByName(
  name: string
): Promise<LowNoCodeDetail | null> {
  try {
    airtable.configure({
      apiKey: env.AIRTABLE_API_KEY,
    });

    const connection = airtable.base(env.AIRTABLE_BASE_ID);

    const [record] = await new Promise<LowNoCodeDetail[]>((resolve, reject) => {
      connection(env.AIRTABLE_TABLE_ID)
        .select({
          filterByFormula: `{Name} = '${name}'`,
          maxRecords: 1,
        })
        .firstPage((error, records) => {
          if (error || !records) {
            reject(error);
            return;
          }

          resolve(
            records.map(
              ({ id, fields }) =>
                ({
                  id,
                  ...lowerCaseObjectKeys(fields),
                } as LowNoCodeDetail)
            )
          );
        });
    });

    return record ?? null;
  } catch (error) {
    console.error(error);
    return null;
  }
}

'''
'''--- tsconfig.json ---
{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "noUncheckedIndexedAccess": true
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", "**/*.cjs", "**/*.mjs"],
  "exclude": ["node_modules"]
}

'''