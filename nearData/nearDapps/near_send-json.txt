*GitHub Repository "near/send-json"*

'''--- .eslintrc.yml ---
env:
  es6: true
  node: true
  mocha: true
extends: 'eslint:recommended'
parserOptions:
  ecmaVersion: 2018
rules:
  indent:
    - error
    - 4
  linebreak-style:
    - error
    - unix
  quotes:
    - error
    - single
  semi:
    - error
    - always
  no-console: off
globals:
  window: true
  fetch: true
  Headers: true

'''
'''--- .github/ISSUE_TEMPLATE/BOUNTY.yml ---
name: "Simple Bounty"
description: "Use this template to create a HEROES Simple Bounty via Github bot"
title: "Bounty: "
labels: ["bounty"]
assignees: heroes-bot-test
body:
  - type: markdown
    attributes:
      value: |
        Hi! Let's set up your bounty! Please don't change the template - @heroes-bot-test won't be able to help you.

  - type: dropdown
    id: type
    attributes:
      label: What talent are you looking for?
      options:
        - Marketing
        - Development
        - Design
        - Other
        - Content
        - Research
        - Audit

  - type: textarea
    id: description
    attributes:
      label: What you need to be done?

  - type: dropdown
    id: tags
    attributes:
      label: Tags
      description: Add tags that match the topic of the work
      multiple: true
      options:
        - API
        - Blockchain
        - Community
        - CSS
        - DAO
        - dApp
        - DeFi
        - Design
        - Documentation
        - HTML
        - Javascript
        - NFT
        - React
        - Rust
        - Smart contract
        - Typescript
        - UI/UX
        - web3
        - Translation
        - Illustration
        - Branding
        - Copywriting
        - Blogging
        - Editing
        - Video Creation
        - Social Media
        - Graphic Design
        - Transcription
        - Product Design
        - Artificial Intelligence
        - Quality Assurance
        - Risk Assessment
        - Security Audit
        - Bug Bounty
        - Code Review
        - Blockchain Security
        - Smart Contract Testing
        - Penetration Testing
        - Vulnerability Assessment
        - BOS
        - News
        - Hackathon
        - NEARCON2023
        - NEARWEEK

  - type: input
    id: deadline
    attributes:
      label: Deadline
      description: "Set a deadline for your bounty. Please enter the date in format: DD.MM.YYYY"
      placeholder: "19.05.2027"

  - type: dropdown
    id: currencyType
    attributes:
      label: Currency
      description: What is the currency you want to pay?
      options:
        - USDC.e
        - USDT.e
        - DAI
        - wNEAR
        - USDt
        - XP
        - marmaj
        - NEKO
        - JUMP
        - USDC
        - NEARVIDIA
      default: 0
    validations:
      required: true

  - type: input
    id: currencyAmount
    attributes:
      label: Amount
      description: How much it will be cost?

  - type: markdown
    attributes:
      value: "## Advanced settings"

  - type: checkboxes
    id: kyc
    attributes:
      label: KYC
      description: "Use HEROES' KYC Verification, only applicants who passed HEROES' KYC can apply and work on this bounty!"
      options:
        - label: Use KYC Verification

  - type: markdown
    attributes:
      value: |
        ### This cannot be changed once the bounty is live!

'''
'''--- .gitlab-ci.yml ---
image: node:latest

variables:
  NODE_ENV: ci

stages:
  - build
  - test

cache:
  paths:
    - node_modules/

install_dependencies:
  stage: build
  script:
    - npm install
  artifacts:
    paths:
      - node_modules/

test:
  stage: test
  script: npm test

lint:
  stage: test
  script: npm run lint

'''
'''--- .travis.yml ---
language: node_js
node_js:
  - 12

before_script:
  - "curl -H 'Cache-Control: no-cache' https://raw.githubusercontent.com/fossas/fossa-cli/master/install.sh | sudo bash"

script:
  - fossa init
  - fossa analyze --server-scan
  - fossa test

'''
'''--- index.js ---
let fetch = (typeof window === 'undefined' || window.name == 'nodejs') ? require('node-fetch') : window.fetch;

const createError = require('http-errors');

module.exports = async function sendJson(method, url, json) {
    const response = await fetch(url, {
        method: method,
        body: method != 'GET' ? JSON.stringify(json) : undefined,
        headers: { 'Content-type': 'application/json; charset=utf-8' }
    });
    if (!response.ok) {
        throw createError(response.status, await response.text());
    }
    if (response.status === 204) {
        // No Content
        return null;
    }
    return await response.json();
};

'''
'''--- package.json ---
{
  "name": "fetch-send-json",
  "version": "0.0.2",
  "description": "Minimal Fetch API wrapper compatible with Node.js and browser",
  "main": "index.js",
  "scripts": {
    "test": "mocha",
    "lint": "eslint .",
    "fix": "eslint . --fix"
  },
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/nearprotocol/send-json.git"
  },
  "keywords": [
    "json",
    "fetch"
  ],
  "author": "Vlad Grichina",
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/nearprotocol/send-json/issues"
  },
  "homepage": "https://github.com/nearprotocol/send-json#readme",
  "dependencies": {
    "eslint": "^5.16.0",
    "http-errors": "^1.7.2",
    "node-fetch": "^2.4.1"
  },
  "devDependencies": {
    "mocha": "^6.1.4",
    "mock-http-server": "^1.2.0"
  }
}

'''
'''--- test/test.js ---
const assert = require('assert');
const ServerMock = require('mock-http-server');

describe('send-json', function() {
    const server = new ServerMock({ host: 'localhost', port: 9000 });
    const sendJson = require('../');
 
    beforeEach(function(done) {
        server.start(done);

        server.on({
            method: 'GET',
            path: '/resource',
            reply: {
                status: 200,
                headers: { 'content-type': 'application/json' },
                body: JSON.stringify({ hello: 'world' })
            }
        });
    });
 
    afterEach(function(done) {
        server.stop(done);
    });

    it('can get resource', async function() {
        assert.deepEqual(await sendJson('GET', 'http://localhost:9000/resource'), { hello: 'world' });
    });
});

'''