*GitHub Repository "NEARBuilders/minterest"*

'''--- .eslintrc.json ---
{
  "extends": "next/core-web-vitals"
}

'''
'''--- README.md ---
# Minsta

This repository hosts the primary codebase for the [Minsta App](https://minsta.me), originally created and developed by [@microchipgnu](https://github.com/microchipgnu). 

All new Minsta instances should be derived from this repository.

## Demo

Check out the live demo here: [minsta demo](https://minsta-app.vercel.app/).

## One-Click Deploy

Deploy this project using [Vercel](https://vercel.com?utm_source=github&utm_medium=readme):

[![Deploy with Vercel](https://vercel.com/button)](https://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2FMintbase%2Fminsta)

## Getting Started

To start with this project:

1. Clone the repository.
2. If you don't have `pnpm` installed, run:

   ```bash
   npm install -g pnpm
   ```
   
3. Then, install the required dependencies:

     ```bash
     pnpm install
     ```

## Environment Variables

Refer to the **.env.example** file for the environment variables used in this project. 

If you don't set up a `.env` file or environment variables with your provider, the project will retrieve values from the following files:

1. For CSS generation during build: `generate-css.js`
2. For configuration variables: `src/constants.ts`
3. For fallback metadata and text values: `src/fallback.ts`

## Local Development

To run the project locally, use:

  ```bash
  pnpm dev
  ```

## Updating Environment Variables

### Running Locally

If you're running your project locally, follow these steps to update your environment variables:

1. Save your changes in the `.env` file.
2. Run `pnpm dev` again to apply the updated environment variables.
3. Reload the page to reflect the changes.

### Deployed on Vercel

If you have deployed your project on Vercel, follow these steps to update your environment variables:

1. Log in to your Vercel account.
2. Navigate to the project settings for your deployed app.
3. Update the environment variables in the Vercel dashboard.
4. Trigger a redeployment of your app to apply the changes.

By following these steps, you can ensure that your project uses the updated environment variables.
'''
'''--- generate-css.js ---
// generate-css.js
const fs = require("fs");
const path = require("path");
require("dotenv").config(); // Load environment variables from .env file

const colors = {
  primary: process.env.COLOR_PRIMARY || "F3F4F8",
  secondary: process.env.COLOR_SECONDARY || "000",
  mainBg: process.env.COLOR_MAIN_BACKGROUND || "FFFFFF",
  gradOne: process.env.COLOR_GRADONE || "4472ad",
  gradTwo: process.env.COLOR_GRADTWO || "009dea",
  cardOne: process.env.COLOR_CARDONE || "E8EAF0",
  cardTwo: process.env.COLOR_CARDTWO || "049BE8",
  linkColor: process.env.COLOR_LINKCOLOR || "4f58a3",
  icon: process.env.COLOR_ICON || "4B9CE3",
  camera: process.env.COLOR_CAMERA || "FFFFFF",
  modalText: process.env.COLOR_MODAL_TEXT || "000000",
  leaderboardText: process.env.COLOR_LEADERBOARD_TEXT || "000000",
  headerText: process.env.COLOR_HEADER_TEXT || "000000",
  mainText: process.env.COLOR_MAIN_TEXT || "000000",
  freeUseText: process.env.COLOR_FREE_USE_TEXT || "0A7D6C",
  primaryBtnText: process.env.COLOR_PRIMARY_BTN_TEXT || "FFFFFF",
  secondaryBtnText: process.env.COLOR_SECONDARY_BTN_TEXT || "000000",
};

const css = `

.nws-modal-wrapper .nws-modal {
  height: auto !important;
}

.nws-modal-wrapper .nws-modal .modal-right {
  display: none !important;
}

.nws-modal-wrapper .nws-modal .modal-left {
  width: 100%;
  border-right: 1px solid
    var(--wallet-selector-sidebar-border-color, var(--sidebar-border-color));
  padding: 32px 24px;
  height: 100%;
  overflow: auto;
  text-align: center;
}
.nws-modal-wrapper .nws-modal {
  height: 215px;
}
.wallet-options-wrapper {
  width: 100%;
  display: flex;
  justify-items: center;
  align-items: center;
  justify-content: center;
}
.nws-modal-wrapper .nws-modal > .modal-left > div:nth-child(2) {
  display: flex;
  justify-items: center;
  text-align: center;
  width: 100%;
}

.nws-modal-wrapper
  .modal-left
  .wallet-options-wrapper
  .options-list-section
  .options-list-section-header {
  display: none;
}

:root {
          --primary: #${colors.primary};
          --secondary: #${colors.secondary};
          --mainBg: #${colors.mainBg};
          --gradOne: #${colors.gradOne};
          --gradTwo: #${colors.gradTwo};
          --cardOne: #${colors.cardOne};
          --cardTwo: #${colors.cardTwo};
          --linkColor: #${colors.linkColor};
          --icon: #${colors.icon};
          --camera: #${colors.camera};
          --modalText: #${colors.modalText};
          --leaderboardText: #${colors.leaderboardText};
          --headerText: #${colors.headerText};
          --mainText: #${colors.mainText};
          --freeUseText: #${colors.freeUseText};
          --bgFreeUse: #${colors.freeUseText}1A;
          --primaryBtnText: #${colors.primaryBtnText};
          --secondaryBtnText: #${colors.secondaryBtnText};
        }`;

const outputPath = path.resolve(__dirname, "src/style/global.css");

fs.writeFileSync(outputPath, css);

console.log(`CSS file generated at: ${outputPath}`);

'''
'''--- next.config.js ---
/** @type {import('next').NextConfig} */
const nextConfig = {
  images: { domains: ["arweave.net", 'image-cache-service-z3w7d7dnea-ew.a.run.app'] },

};

module.exports = nextConfig;

'''
'''--- package.json ---
{
  "name": "minsta-main",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "build:css": "node generate-css.js",
    "build": "pnpm run build:css && next build",
    "dev:css": "node generate-css.js && next dev",
    "dev": "pnpm run dev:css",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@mintbase-js/react": "0.4.1-mintbase-wallet-02f6a84.0",
    "@mintbase-js/storage": "0.4.1-mintbase-wallet-02f6a84.0",
    "@mintbase-js/wallet": "0.4.1-mintbase-wallet-02f6a84.0",
    "@near-wallet-selector/modal-ui": "^8.2.1",
    "@tanstack/react-query": "^4.35.3",
    "@types/node": "20.4.9",
    "@types/react": "18.2.20",
    "@types/react-dom": "18.2.7",
    "autoprefixer": "10.4.14",
    "data-uri-to-buffer": "^5.0.1",
    "dotenv": "^16.3.1",
    "eslint": "8.46.0",
    "eslint-config-next": "13.4.13",
    "graphql": "^16.7.1",
    "graphql-request": "^6.1.0",
    "isomorphic-unfetch": "^3.1.0",
    "lodash": "^4.17.21",
    "next": "13.4.13",
    "postcss": "8.4.27",
    "react": "18.2.0",
    "react-dom": "18.2.0",
    "react-inlinesvg": "^4.0.4",
    "react-webcam": "^7.1.1",
    "tailwindcss": "3.3.3",
    "typescript": "5.1.6",
    "usehooks-ts": "^2.9.1"
  },
  "devDependencies": {
    "@types/lodash": "^4.14.197"
  }
}

'''
'''--- postcss.config.js ---
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

'''
'''--- public/images/MB_logo.svg ---
<svg width="75" height="20" viewBox="0 0 75 20" fill="none" xmlns="http://www.w3.org/2000/svg">
<g clip-path="url(#clip0_2322_1843)">
<path d="M30.1859 4.65405V15.3233H28.9356V6.42295L26.475 15.3233H23.3925L20.9287 6.42295V15.3233H19.6816V4.65405H21.6348L24.3243 14.1645H25.5432L28.2327 4.65405H30.1859Z" fill="currentColor"/>
<path d="M32.3193 4.65405H33.521V6.05712H32.3193V4.65405ZM32.3193 7.68691H33.521V15.3233H32.3193V7.68691Z" fill="currentColor"/>
<path d="M41.0627 9.7909V15.3232H39.861V10.1754C39.861 9.24545 39.4399 8.5598 38.4488 8.5598C37.4576 8.5598 36.7094 9.24216 36.7094 10.4054V15.3342H35.5034V7.68685H36.7094V8.63209C36.935 8.26743 37.2495 7.96791 37.6224 7.76243C37.9954 7.55696 38.4142 7.45246 38.8386 7.45903C40.0262 7.45903 41.0627 8.25093 41.0627 9.7909Z" fill="currentColor"/>
<path d="M43.4033 13.1283V8.78442H42.4121V7.68913H43.4184V5.78223H44.606V7.68694H46.2752V8.78223H44.6082V13.0955C44.6082 14.1163 45.0282 14.3452 45.7192 14.3452H46.3508V15.4405H45.703C44.457 15.4438 43.4033 15.17 43.4033 13.1283Z" fill="currentColor"/>
<path d="M53.3214 10.1261V12.8841C53.3214 14.4689 52.3151 15.5511 50.918 15.5511C50.0607 15.5511 49.3104 15.1699 48.9649 14.5916V15.3233H47.7632V4.65405H48.9649V8.41857C49.3104 7.84025 50.0607 7.45909 50.918 7.45909C52.3151 7.45909 53.3214 8.54343 53.3214 10.1261ZM52.1197 10.217C52.1197 9.10531 51.4589 8.55657 50.5423 8.55657C49.6256 8.55657 48.9649 9.10422 48.9649 10.217V12.7932C48.9649 13.9049 49.6256 14.4536 50.5423 14.4536C51.4589 14.4536 52.1197 13.906 52.1197 12.7932V10.217Z" fill="currentColor"/>
<path d="M60.5627 7.6868V15.3232H59.361V14.5915C59.0155 15.1698 58.2641 15.551 57.4079 15.551C56.0108 15.551 55.0034 14.4688 55.0034 12.884V10.126C55.0034 8.54113 56.0108 7.45898 57.4079 7.45898C58.2641 7.45898 59.0155 7.84015 59.361 8.41846V7.6868H60.5627ZM59.361 12.793V10.2169C59.361 9.10521 58.6992 8.55647 57.7836 8.55647C56.868 8.55647 56.2062 9.10411 56.2062 10.2169V12.793C56.2062 13.9048 56.8669 14.4535 57.7836 14.4535C58.7002 14.4535 59.361 13.9102 59.361 12.793Z" fill="currentColor"/>
<path d="M62.3203 12.8841V12.6409H63.522V12.9301C63.522 13.9355 64.1083 14.4536 65.189 14.4536C65.88 14.4536 66.6466 14.2411 66.6466 13.3879C66.6466 12.5796 66.0463 12.3507 64.8435 11.964C63.387 11.5073 62.425 11.0659 62.425 9.69348C62.425 7.97169 63.9431 7.45361 65.0994 7.45361C66.3767 7.45361 67.7587 8.11079 67.7587 9.86325V10.2137H66.557V9.89721C66.557 8.84573 65.7904 8.55657 65.0692 8.55657C64.2886 8.55657 63.657 8.89173 63.657 9.59272C63.657 10.3397 64.3933 10.5785 65.3844 10.8873C66.9619 11.3605 67.8785 11.9093 67.8785 13.3266C67.8785 15.0177 66.4663 15.5511 65.1448 15.5511C63.4464 15.5533 62.3203 14.6672 62.3203 12.8841Z" fill="currentColor"/>
<path d="M70.6426 11.8938V12.7317C70.6426 13.7679 71.2742 14.4535 72.22 14.4535C73.1971 14.4535 73.7974 13.9201 73.7974 12.884H75.0002C75.0002 14.6824 73.9486 15.551 72.22 15.551C70.553 15.551 69.4409 14.4842 69.4409 12.8686V10.1414C69.4409 8.5258 70.553 7.45898 72.22 7.45898C73.887 7.45898 75.0002 8.5258 75.0002 10.1414V11.8938H70.6426ZM70.6426 10.2783V10.953H73.7974V10.2783C73.7974 9.24212 73.1669 8.55647 72.22 8.55647C71.2731 8.55647 70.6426 9.24212 70.6426 10.2783Z" fill="currentColor"/>
<path d="M13.5112 7.65177H12.1444V2.32319C12.1458 1.79814 11.9725 1.28797 11.6524 0.875334C11.3324 0.462702 10.8844 0.171783 10.381 0.0497108C9.87758 -0.0723615 9.34831 -0.0184349 8.87891 0.202753C8.40951 0.423941 8.02747 0.799433 7.7947 1.26839C7.56194 1.73735 7.49207 2.2723 7.59643 2.78657C7.70078 3.30084 7.97325 3.7643 8.36967 4.10186C8.7661 4.43942 9.26327 4.63131 9.78062 4.64643C10.298 4.66155 10.8052 4.49902 11.2201 4.18518V7.65177H5.94698C5.33964 7.65177 4.75717 7.89653 4.32771 8.3322C3.89825 8.76786 3.65698 9.35876 3.65698 9.97488C3.65698 9.99241 3.65698 10.0088 3.65698 10.0253V15.3528H2.29011C1.83785 15.3526 1.39566 15.4882 1.01923 15.7425C0.642804 15.9968 0.348989 16.3584 0.1748 16.7818C0.000612063 17.2052 -0.0461562 17.6714 0.0403876 18.1217C0.126932 18.572 0.342916 18.9863 0.661129 19.3123C0.979343 19.6383 1.38555 19.8615 1.82857 19.9537C2.2716 20.046 2.73162 20.0031 3.15068 19.8306C3.56974 19.6581 3.92909 19.3636 4.18346 18.9842C4.43784 18.6049 4.57585 18.1576 4.58011 17.6989V16.2903H8.01889C7.71195 16.7098 7.55349 17.2221 7.56915 17.7442C7.5848 18.2664 7.77365 18.7679 8.10514 19.1677C8.43664 19.5675 8.89139 19.8421 9.39583 19.9472C9.90028 20.0522 10.4249 19.9816 10.8849 19.7466C11.3448 19.5117 11.7132 19.1262 11.9303 18.6525C12.1475 18.1789 12.2008 17.6447 12.0816 17.1365C11.9625 16.6283 11.6777 16.1757 11.2735 15.852C10.8693 15.5283 10.3693 15.3524 9.85435 15.3528H4.58119V11.8369C5.02186 12.1702 5.56611 12.3315 6.11438 12.2912C6.66264 12.2508 7.17826 12.0116 7.5669 11.6172C7.95553 11.2228 8.1912 10.6997 8.23078 10.1434C8.27036 9.58724 8.11121 9.03517 7.78244 8.58825H11.2201V9.99679C11.2244 10.4553 11.3623 10.9023 11.6165 11.2814C11.8707 11.6606 12.2299 11.9549 12.6487 12.1274C13.0675 12.2999 13.5272 12.3427 13.97 12.2507C14.4128 12.1586 14.8188 11.9356 15.1369 11.6098C15.455 11.2841 15.671 10.8701 15.7576 10.4201C15.8442 9.97007 15.7976 9.5041 15.6237 9.08088C15.4497 8.65766 15.1562 8.29613 14.7801 8.04182C14.404 7.78751 13.9621 7.65179 13.5101 7.65177H13.5112ZM9.85435 3.70873C9.58396 3.70895 9.31958 3.6278 9.09466 3.47557C8.86973 3.32334 8.69437 3.10685 8.59075 2.85349C8.48713 2.60014 8.45991 2.3213 8.51253 2.05224C8.56514 1.78319 8.69524 1.53601 8.88636 1.34198C9.07748 1.14794 9.32103 1.01577 9.58621 0.962178C9.85138 0.908586 10.1263 0.935982 10.3761 1.0409C10.6259 1.14582 10.8395 1.32355 10.9897 1.5516C11.1399 1.77966 11.2201 2.04779 11.2201 2.32209C11.2199 2.68967 11.0759 3.04215 10.8199 3.30227C10.5639 3.5624 10.2167 3.70895 9.85435 3.70982V3.70873ZM11.2201 17.6759C11.2201 17.9502 11.1399 18.2183 10.9897 18.4464C10.8395 18.6744 10.6259 18.8521 10.3761 18.9571C10.1263 19.062 9.85138 19.0894 9.58621 19.0358C9.32103 18.9822 9.07748 18.85 8.88636 18.656C8.69524 18.4619 8.56514 18.2148 8.51253 17.9457C8.45991 17.6767 8.48713 17.3978 8.59075 17.1445C8.69437 16.8911 8.86973 16.6746 9.09466 16.5224C9.31958 16.3702 9.58396 16.289 9.85435 16.2892C10.0338 16.2894 10.2116 16.3254 10.3773 16.3952C10.5431 16.465 10.6937 16.5673 10.8206 16.6961C10.9474 16.825 11.0479 16.9779 11.1165 17.1462C11.1851 17.3145 11.2203 17.4949 11.2201 17.677V17.6759ZM2.29011 19.0581C2.01972 19.0581 1.75541 18.9768 1.5306 18.8244C1.3058 18.6719 1.1306 18.4553 1.02718 18.2019C0.923753 17.9484 0.896747 17.6696 0.949576 17.4006C1.0024 17.1316 1.13269 16.8845 1.32396 16.6906C1.51523 16.4967 1.75889 16.3647 2.02411 16.3114C2.28932 16.258 2.56419 16.2856 2.81394 16.3907C3.06368 16.4958 3.27708 16.6737 3.42715 16.9019C3.57721 17.1301 3.6572 17.3983 3.65698 17.6726C3.6567 18.0402 3.51256 18.3926 3.25625 18.6524C2.99994 18.9122 2.65244 19.0581 2.29011 19.0581ZM5.94698 11.3571C5.67646 11.3571 5.41202 11.2757 5.18714 11.1231C4.96227 10.9706 4.78708 10.7538 4.68375 10.5001C4.58042 10.2465 4.55361 9.96747 4.6067 9.69837C4.65979 9.42927 4.7904 9.1822 4.982 8.98845C5.17359 8.7947 5.41755 8.66298 5.68298 8.60998C5.94841 8.55697 6.22338 8.58506 6.47306 8.69068C6.72275 8.7963 6.93593 8.97471 7.0856 9.20332C7.23528 9.43193 7.31471 9.70045 7.31386 9.97488C7.31357 10.3426 7.16947 10.6951 6.9132 10.9551C6.65692 11.215 6.30941 11.3612 5.94698 11.3615V11.3571ZM13.5112 11.3571C13.2408 11.3574 12.9765 11.2762 12.7515 11.124C12.5266 10.9717 12.3512 10.7553 12.2476 10.5019C12.144 10.2485 12.1168 9.96971 12.1694 9.70065C12.222 9.4316 12.3521 9.18442 12.5432 8.99039C12.7344 8.79636 12.9779 8.66418 13.2431 8.61059C13.5083 8.557 13.7831 8.58439 14.033 8.68931C14.2828 8.79423 14.4963 8.97196 14.6466 9.20001C14.7968 9.42807 14.877 9.6962 14.877 9.9705C14.8776 10.3387 14.7341 10.692 14.4779 10.9528C14.2218 11.2136 13.8741 11.3607 13.5112 11.3615V11.3571Z" fill="currentColor"/>
</g>
<defs>
<clipPath id="clip0_2322_1843">
<rect width="75" height="20" fill="currentColor"/>
</clipPath>
</defs>
</svg>

'''
'''--- public/images/arrow_back.svg ---
<svg width="35" height="35" viewBox="0 0 35 35" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
<mask id="mask0_2013_6892" style="mask-type:alpha" maskUnits="userSpaceOnUse" x="0" y="0" width="35" height="35">
<rect width="35" height="35" fill="currentColor"/>
</mask>
<g mask="url(#mask0_2013_6892)">
<path d="M17.5003 28.606L6.39453 17.5003L17.5003 6.39453L19.0595 7.93136L10.5843 16.4065H28.606V18.594H10.5843L19.0595 27.0691L17.5003 28.606Z" fill="currentColor"/>
</g>
</svg>

'''
'''--- public/images/cameraswitch.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<mask id="mask0_2368_2343" style="mask-type:alpha" maskUnits="userSpaceOnUse" x="0" y="0" width="24" height="24">
<rect width="24" height="24" fill="currentColor"/>
</mask>
<g mask="url(#mask0_2368_2343)">
<path d="M8.30767 16.5C7.80896 16.5 7.383 16.3233 7.0298 15.9701C6.67658 15.6169 6.49998 15.191 6.49998 14.6923V9.3077C6.49998 8.80898 6.67658 8.38302 7.0298 8.02982C7.383 7.67661 7.80896 7.5 8.30767 7.5H9.19228L10.1923 6.5H13.8076L14.8076 7.5H15.6922C16.1909 7.5 16.6169 7.67661 16.9701 8.02982C17.3233 8.38302 17.4999 8.80898 17.4999 9.3077V14.6923C17.4999 15.191 17.3233 15.6169 16.9701 15.9701C16.6169 16.3233 16.1909 16.5 15.6922 16.5H8.30767ZM8.30767 15H15.6922C15.782 15 15.8557 14.9711 15.9134 14.9134C15.9711 14.8557 15.9999 14.782 15.9999 14.6923V9.3077C15.9999 9.21795 15.9711 9.14423 15.9134 9.08652C15.8557 9.02882 15.782 8.99998 15.6922 8.99998H8.30767C8.21792 8.99998 8.1442 9.02882 8.0865 9.08652C8.0288 9.14423 7.99995 9.21795 7.99995 9.3077V14.6923C7.99995 14.782 8.0288 14.8557 8.0865 14.9134C8.1442 14.9711 8.21792 15 8.30767 15ZM11.9999 13.7115C12.473 13.7115 12.8765 13.5445 13.2105 13.2105C13.5445 12.8766 13.7115 12.473 13.7115 12C13.7115 11.5269 13.5445 11.1234 13.2105 10.7894C12.8765 10.4554 12.473 10.2885 11.9999 10.2885C11.5269 10.2885 11.1234 10.4554 10.7894 10.7894C10.4554 11.1234 10.2884 11.5269 10.2884 12C10.2884 12.473 10.4554 12.8766 10.7894 13.2105C11.1234 13.5445 11.5269 13.7115 11.9999 13.7115ZM9.2423 0.84615C9.69358 0.7141 10.1474 0.623401 10.6038 0.574051C11.0602 0.524684 11.5192 0.5 11.9807 0.5C13.4769 0.5 14.8919 0.766351 16.2259 1.29905C17.5599 1.83173 18.7435 2.56987 19.7768 3.51345C20.8102 4.45705 21.6557 5.56923 22.3134 6.85C22.9711 8.13075 23.3666 9.51408 23.4999 11H22C21.8769 9.76793 21.5458 8.61985 21.0067 7.55575C20.4676 6.49163 19.7762 5.56214 18.9326 4.76728C18.089 3.97241 17.1214 3.33298 16.0297 2.849C14.9381 2.36503 13.773 2.09228 12.5345 2.03075L14.2768 3.77308L13.2231 4.82688L9.2423 0.84615ZM14.7576 23.1538C14.3063 23.2859 13.8525 23.3766 13.3961 23.4259C12.9397 23.4753 12.4807 23.5 12.0192 23.5C10.523 23.5 9.10797 23.2336 7.774 22.7009C6.44003 22.1682 5.25638 21.4301 4.22305 20.4865C3.18972 19.5429 2.34421 18.4307 1.68652 17.15C1.02884 15.8692 0.633333 14.4859 0.5 13H1.99995C2.13328 14.232 2.46694 15.3801 3.00093 16.4442C3.53489 17.5083 4.22368 18.4378 5.06728 19.2327C5.91086 20.0275 6.87848 20.667 7.97015 21.151C9.06183 21.6349 10.2269 21.9077 11.4654 21.9692L9.72305 20.2269L10.7768 19.1731L14.7576 23.1538Z" fill="currentColor"/>
</g>
</svg>

'''
'''--- public/images/file_arrow_up.svg ---
<svg width="40" height="40" viewBox="0 0 40 40" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M33.3844 12.8656L24.6344 4.11563C24.5182 3.99958 24.3803 3.90756 24.2286 3.84483C24.0768 3.78209 23.9142 3.74987 23.75 3.75H8.75C8.08696 3.75 7.45107 4.01339 6.98223 4.48223C6.51339 4.95107 6.25 5.58696 6.25 6.25V33.75C6.25 34.413 6.51339 35.0489 6.98223 35.5178C7.45107 35.9866 8.08696 36.25 8.75 36.25H31.25C31.913 36.25 32.5489 35.9866 33.0178 35.5178C33.4866 35.0489 33.75 34.413 33.75 33.75V13.75C33.7501 13.5858 33.7179 13.4232 33.6552 13.2714C33.5924 13.1197 33.5004 12.9818 33.3844 12.8656ZM24.6344 23.3844C24.5183 23.5006 24.3804 23.5928 24.2287 23.6557C24.0769 23.7186 23.9143 23.751 23.75 23.751C23.5857 23.751 23.4231 23.7186 23.2713 23.6557C23.1196 23.5928 22.9817 23.5006 22.8656 23.3844L21.25 21.7672V28.75C21.25 29.0815 21.1183 29.3995 20.8839 29.6339C20.6495 29.8683 20.3315 30 20 30C19.6685 30 19.3505 29.8683 19.1161 29.6339C18.8817 29.3995 18.75 29.0815 18.75 28.75V21.7672L17.1344 23.3844C17.0182 23.5005 16.8804 23.5926 16.7286 23.6555C16.5769 23.7183 16.4142 23.7507 16.25 23.7507C16.0858 23.7507 15.9231 23.7183 15.7714 23.6555C15.6196 23.5926 15.4818 23.5005 15.3656 23.3844C15.2495 23.2682 15.1574 23.1304 15.0945 22.9786C15.0317 22.8269 14.9993 22.6642 14.9993 22.5C14.9993 22.3358 15.0317 22.1731 15.0945 22.0214C15.1574 21.8696 15.2495 21.7318 15.3656 21.6156L19.1156 17.8656C19.2317 17.7494 19.3696 17.6572 19.5213 17.5943C19.6731 17.5314 19.8357 17.499 20 17.499C20.1643 17.499 20.3269 17.5314 20.4787 17.5943C20.6304 17.6572 20.7683 17.7494 20.8844 17.8656L24.6344 21.6156C24.7506 21.7317 24.8428 21.8696 24.9057 22.0213C24.9686 22.1731 25.001 22.3357 25.001 22.5C25.001 22.6643 24.9686 22.8269 24.9057 22.9787C24.8428 23.1304 24.7506 23.2683 24.6344 23.3844ZM23.75 13.75V6.875L30.625 13.75H23.75Z" fill="currentColor"/>
</svg>

'''
'''--- public/images/gift.svg ---
<svg width="40" height="40" viewBox="0 0 40 40" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M33.75 11.25H28.2687C28.3297 11.1984 28.3922 11.1484 28.4516 11.0937C28.9261 10.6721 29.3086 10.1572 29.575 9.581C29.8414 9.00485 29.9861 8.37992 30 7.7453C30.0205 7.05104 29.8989 6.35991 29.6427 5.71434C29.3865 5.06877 29.001 4.48238 28.5099 3.99118C28.0189 3.49998 27.4326 3.11432 26.7871 2.85789C26.1416 2.60146 25.4505 2.47967 24.7563 2.49998C24.1214 2.51366 23.4961 2.65824 22.9197 2.92468C22.3433 3.19112 21.828 3.57369 21.4062 4.04842C20.8226 4.72482 20.3482 5.48817 20 6.31092C19.6518 5.48817 19.1774 4.72482 18.5938 4.04842C18.172 3.57369 17.6567 3.19112 17.0803 2.92468C16.5039 2.65824 15.8786 2.51366 15.2437 2.49998C14.5495 2.47967 13.8584 2.60146 13.2129 2.85789C12.5674 3.11432 11.9811 3.49998 11.4901 3.99118C10.999 4.48238 10.6135 5.06877 10.3573 5.71434C10.1011 6.35991 9.97948 7.05104 10 7.7453C10.0139 8.37992 10.1586 9.00485 10.425 9.581C10.6914 10.1572 11.0739 10.6721 11.5484 11.0937C11.6078 11.1453 11.6703 11.1953 11.7313 11.25H6.25C5.58696 11.25 4.95107 11.5134 4.48223 11.9822C4.01339 12.4511 3.75 13.0869 3.75 13.75V18.75C3.75 19.413 4.01339 20.0489 4.48223 20.5177C4.95107 20.9866 5.58696 21.25 6.25 21.25V31.25C6.25 31.913 6.51339 32.5489 6.98223 33.0177C7.45107 33.4866 8.08696 33.75 8.75 33.75H18.125C18.2908 33.75 18.4497 33.6841 18.5669 33.5669C18.6842 33.4497 18.75 33.2907 18.75 33.125V18.75H6.25V13.75H18.75V18.75H21.25V13.75H33.75V18.75H21.25V33.125C21.25 33.2907 21.3158 33.4497 21.4331 33.5669C21.5503 33.6841 21.7092 33.75 21.875 33.75H31.25C31.913 33.75 32.5489 33.4866 33.0178 33.0177C33.4866 32.5489 33.75 31.913 33.75 31.25V21.25C34.413 21.25 35.0489 20.9866 35.5178 20.5177C35.9866 20.0489 36.25 19.413 36.25 18.75V13.75C36.25 13.0869 35.9866 12.4511 35.5178 11.9822C35.0489 11.5134 34.413 11.25 33.75 11.25ZM13.2047 9.21873C12.9861 9.02082 12.8108 8.77985 12.6898 8.51096C12.5688 8.24207 12.5047 7.95107 12.5016 7.65623C12.4937 7.31077 12.5548 6.9672 12.6814 6.64566C12.8079 6.32412 12.9974 6.03108 13.2387 5.78369C13.4799 5.53631 13.7682 5.33957 14.0864 5.205C14.4047 5.07043 14.7466 5.00073 15.0922 4.99998H15.1688C15.4636 5.00316 15.7546 5.06727 16.0235 5.18827C16.2924 5.30926 16.5333 5.48455 16.7313 5.70311C18.0422 7.18436 18.5047 9.64061 18.6672 11.1594C17.1422 10.9984 14.6875 10.5359 13.2047 9.21873ZM26.7984 9.21873C25.3156 10.5312 22.8547 10.9937 21.3297 11.1562C21.5156 9.51405 22.0312 7.10936 23.2812 5.70467C23.4792 5.48611 23.7201 5.31083 23.989 5.18983C24.2579 5.06883 24.5489 5.00473 24.8438 5.00155H24.9203C25.2659 5.00371 25.6076 5.07482 25.9253 5.21072C26.243 5.34662 26.5305 5.54457 26.7707 5.79298C27.011 6.04138 27.1992 6.33524 27.3245 6.65733C27.4497 6.97943 27.5094 7.32328 27.5 7.66873C27.4949 7.96157 27.4297 8.25025 27.3085 8.51687C27.1873 8.78349 27.0126 9.02238 26.7953 9.21873H26.7984Z" fill="#4B9CE3"/>
</svg>

'''
'''--- public/images/link_arrow.svg ---
<svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
<mask id="mask0_2414_790" style="mask-type:alpha" maskUnits="userSpaceOnUse" x="0" y="0" width="18" height="18">
<rect width="18" height="18" fill="currentColor"/>
</mask>
<g mask="url(#mask0_2414_790)">
<path d="M4.16537 14.625L3.375 13.8346L11.9596 5.24998H6.74998V4.125H13.875V11.25H12.75V6.04035L4.16537 14.625Z" fill="currentColor"/>
</g>
</svg>

'''
'''--- public/images/near_logo.svg ---
<svg width="67" height="23" viewBox="0 0 67 23" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M28.4598 6.39795C27.3832 6.39795 26.6003 6.6531 25.9352 7.24169L24.7607 8.26188C24.6628 8.34058 24.4669 8.3994 24.3302 8.28135C24.193 8.16372 24.1736 8.00673 24.2909 7.84975L24.9173 6.90784C25.0152 6.77033 24.9371 6.59388 24.7607 6.59388H23.2536C23.0776 6.59388 22.9404 6.73139 22.9404 6.90784V16.0916C22.9404 16.2681 23.0776 16.4056 23.2536 16.4056H24.8193C24.9953 16.4056 25.1325 16.2681 25.1325 16.0916V10.9111C25.1325 8.53691 27.1093 8.16412 27.853 8.16412C29.4381 8.16412 30.0058 9.30236 30.0058 10.1656V16.0916C30.0058 16.2681 30.1429 16.4056 30.3189 16.4056H31.8847C32.0607 16.4056 32.1978 16.2681 32.1978 16.0916V9.96924C32.1978 7.77146 30.7688 6.39795 28.4594 6.39795H28.4598Z" fill="currentColor"/>
<path d="M38.5776 6.35864C35.544 6.35864 33.6064 8.22298 33.6064 10.7542V12.1476C33.6064 14.8163 35.544 16.6413 38.5776 16.6413C41.2588 16.6413 43.1378 15.2479 43.3336 13.3641C43.3534 13.1678 43.2163 13.0307 43.0204 13.0307H41.4939C41.3568 13.0307 41.2394 13.1094 41.2002 13.2465C41.0044 13.8744 40.0847 14.8163 38.5776 14.8163C37.0705 14.8163 35.6614 13.7174 35.6808 12.1476L35.7006 10.4013C35.72 9.0866 37.0904 8.18404 38.5776 8.18404C39.9282 8.18404 41.2394 8.94949 41.3762 10.2054C41.3875 10.3506 41.288 10.4816 41.1452 10.5092L36.757 11.3631C36.581 11.4024 36.4438 11.5594 36.4438 11.7553V11.7748C36.4438 11.9513 36.6198 12.1082 36.8743 12.1082H43.1766C43.3498 12.1082 43.4898 11.9675 43.4898 11.7943V10.5583C43.4898 8.22339 41.4737 6.35905 38.5772 6.35905L38.5776 6.35864Z" fill="currentColor"/>
<path d="M49.4984 6.35856C47.0519 6.35856 44.9383 7.79089 44.9383 9.6747C44.9383 9.83168 45.0755 9.94932 45.2515 9.94932H46.8366C46.9932 9.94932 47.1105 9.83168 47.1304 9.6747C47.2869 8.81149 48.3243 8.18355 49.4398 8.18355C50.7705 8.18355 51.6711 9.00782 51.6711 10.4207V12.128C51.6711 13.8743 50.3792 14.7574 48.7742 14.7574C47.5216 14.7574 46.7974 14.2865 46.7974 13.521C46.7974 12.8537 47.1498 12.2846 48.5978 11.9512L50.692 11.3821C50.9072 11.3232 50.9857 11.1464 50.9465 10.9504C50.927 10.7935 50.751 10.7148 50.5941 10.7148H48.4218C46.5822 10.7148 44.7227 11.8919 44.7227 13.6188V13.8934C44.7227 15.6596 46.3863 16.5816 48.2847 16.5816C49.498 16.5816 50.5354 16.1106 51.1811 15.5614L52.1404 14.7371C52.297 14.5996 52.4535 14.5996 52.5903 14.7371C52.7076 14.8548 52.6684 15.0316 52.5705 15.1687L51.9834 16.0912C51.8855 16.2287 51.9636 16.4051 52.14 16.4051H53.5492C53.7252 16.4051 53.8623 16.2676 53.8623 16.0912V10.1452C53.8623 7.86918 52.2379 6.35815 49.4976 6.35815L49.4984 6.35856Z" fill="currentColor"/>
<path d="M62.3173 6.59424H60.1252C59.3622 6.59424 58.6181 7.06519 58.0897 7.51667L57.2288 8.26225C57.1308 8.34094 56.9544 8.39976 56.8371 8.30159C56.7 8.20343 56.6413 8.0071 56.759 7.85011L57.3853 6.90821C57.4832 6.77069 57.4052 6.59424 57.2288 6.59424H55.7609C55.5849 6.59424 55.4478 6.73175 55.4478 6.90821V16.092C55.4478 16.2684 55.5849 16.4059 55.7609 16.4059H57.3659C57.5419 16.4059 57.6791 16.2684 57.6791 16.092V11.3825C57.6791 9.36113 58.5012 8.45858 60.2822 8.45858H62.3177C62.4937 8.45858 62.6308 8.32106 62.6308 8.14461V6.90821C62.6308 6.73175 62.4937 6.59424 62.3177 6.59424H62.3173Z" fill="currentColor"/>
<path d="M17.058 4.38086C16.532 4.38086 16.0437 4.65426 15.7681 5.10372L12.7997 9.52239C12.703 9.66802 12.7422 9.86435 12.8874 9.9613C13.0052 10.04 13.161 10.0303 13.2682 9.93777L16.1901 7.39682C16.2387 7.35301 16.3135 7.35747 16.3572 7.40615C16.377 7.42846 16.3876 7.45726 16.3876 7.48687V15.4424C16.3876 15.5081 16.3346 15.5608 16.269 15.5608C16.2338 15.5608 16.2006 15.5454 16.1784 15.5182L7.34579 4.91793C7.05813 4.5776 6.63573 4.38127 6.19109 4.38086H5.88239C5.04691 4.38086 4.36963 5.05991 4.36963 5.89756V17.1023C4.36963 17.9399 5.04691 18.619 5.88239 18.619C6.40835 18.619 6.89669 18.3456 7.17222 17.8961L10.1407 13.4774C10.2374 13.3318 10.1981 13.1355 10.0529 13.0385C9.93516 12.9598 9.77939 12.9696 9.67218 13.062L6.75023 15.603C6.70168 15.6468 6.62683 15.6423 6.58314 15.5937C6.56331 15.5714 6.55279 15.5426 6.5532 15.5129V7.55543C6.5532 7.48971 6.6062 7.43698 6.67174 7.43698C6.70654 7.43698 6.74012 7.45239 6.76237 7.47957L15.5937 18.0819C15.8814 18.4222 16.3038 18.6185 16.7484 18.619H17.0571C17.8926 18.6194 18.5703 17.9407 18.5711 17.1031V5.89756C18.5711 5.05991 17.8938 4.38086 17.0584 4.38086H17.058Z" fill="currentColor"/>
</svg>

'''
'''--- public/images/photo_camera-2.svg ---
<svg width="37" height="37" viewBox="0 0 37 37" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
<mask id="mask0_2013_6480" style="mask-type:alpha" maskUnits="userSpaceOnUse" x="0" y="0" width="37" height="37">
<rect x="0.853027" y="0.853027" width="35.2941" height="35.2941" fill="currentColor"/>
</mask>
<g mask="url(#mask0_2013_6480)">
<path d="M18.4998 26.0225C20.1873 26.0225 21.6178 25.4357 22.7914 24.2621C23.965 23.0885 24.5518 21.658 24.5518 19.9706C24.5518 18.2832 23.965 16.8526 22.7914 15.679C21.6178 14.5054 20.1873 13.9186 18.4998 13.9186C16.8124 13.9186 15.3819 14.5054 14.2083 15.679C13.0347 16.8526 12.4479 18.2832 12.4479 19.9706C12.4479 21.658 13.0347 23.0885 14.2083 24.2621C15.3819 25.4357 16.8124 26.0225 18.4998 26.0225ZM18.4998 23.8167C17.4139 23.8167 16.5013 23.4472 15.7623 22.7081C15.0232 21.9691 14.6537 21.0565 14.6537 19.9706C14.6537 18.8846 15.0232 17.972 15.7623 17.233C16.5013 16.4939 17.4139 16.1244 18.4998 16.1244C19.5858 16.1244 20.4984 16.4939 21.2374 17.233C21.9765 17.972 22.346 18.8846 22.346 19.9706C22.346 21.0565 21.9765 21.9691 21.2374 22.7081C20.4984 23.4472 19.5858 23.8167 18.4998 23.8167ZM7.18768 30.9999C6.44484 30.9999 5.81606 30.7426 5.30136 30.2279C4.78665 29.7132 4.5293 29.0844 4.5293 28.3415V11.5996C4.5293 10.8567 4.78665 10.2279 5.30136 9.71324C5.81606 9.19853 6.44484 8.94118 7.18768 8.94118H11.6786L14.3992 6H22.6005L25.3211 8.94118H29.812C30.5549 8.94118 31.1836 9.19853 31.6983 9.71324C32.2131 10.2279 32.4704 10.8567 32.4704 11.5996V28.3415C32.4704 29.0844 32.2131 29.7132 31.6983 30.2279C31.1836 30.7426 30.5549 30.9999 29.812 30.9999H7.18768Z" fill="currentColor"/>
</g>
</svg>

'''
'''--- public/images/photo_camera.svg ---
<svg width="37" height="37" viewBox="0 0 37 37" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
<mask id="mask0_2013_6480" style="mask-type:alpha" maskUnits="userSpaceOnUse" x="0" y="0" width="37" height="37">
<rect x="0.853027" y="0.853027" width="35.2941" height="35.2941" fill="currentColor"/>
</mask>
<g mask="url(#mask0_2013_6480)">
<path d="M18.4998 26.0225C20.1873 26.0225 21.6178 25.4357 22.7914 24.2621C23.965 23.0885 24.5518 21.658 24.5518 19.9706C24.5518 18.2832 23.965 16.8526 22.7914 15.679C21.6178 14.5054 20.1873 13.9186 18.4998 13.9186C16.8124 13.9186 15.3819 14.5054 14.2083 15.679C13.0347 16.8526 12.4479 18.2832 12.4479 19.9706C12.4479 21.658 13.0347 23.0885 14.2083 24.2621C15.3819 25.4357 16.8124 26.0225 18.4998 26.0225ZM18.4998 23.8167C17.4139 23.8167 16.5013 23.4472 15.7623 22.7081C15.0232 21.9691 14.6537 21.0565 14.6537 19.9706C14.6537 18.8846 15.0232 17.972 15.7623 17.233C16.5013 16.4939 17.4139 16.1244 18.4998 16.1244C19.5858 16.1244 20.4984 16.4939 21.2374 17.233C21.9765 17.972 22.346 18.8846 22.346 19.9706C22.346 21.0565 21.9765 21.9691 21.2374 22.7081C20.4984 23.4472 19.5858 23.8167 18.4998 23.8167ZM7.18768 30.9999C6.44484 30.9999 5.81606 30.7426 5.30136 30.2279C4.78665 29.7132 4.5293 29.0844 4.5293 28.3415V11.5996C4.5293 10.8567 4.78665 10.2279 5.30136 9.71324C5.81606 9.19853 6.44484 8.94118 7.18768 8.94118H11.6786L14.3992 6H22.6005L25.3211 8.94118H29.812C30.5549 8.94118 31.1836 9.19853 31.6983 9.71324C32.2131 10.2279 32.4704 10.8567 32.4704 11.5996V28.3415C32.4704 29.0844 32.2131 29.7132 31.6983 30.2279C31.1836 30.7426 30.5549 30.9999 29.812 30.9999H7.18768Z" fill="currentColor"/>
</g>
</svg>

'''
'''--- public/images/trophy.svg ---
<svg width="30" height="30" viewBox="0 0 30 30" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M7.8207 29.1665V26.6665H13.7502V20.955C12.3356 20.6708 11.0856 20.0757 10.0002 19.1697C8.91469 18.2637 8.14332 17.1344 7.68604 15.7819C5.76298 15.5532 4.14014 14.737 2.8175 13.3332C1.49483 11.9293 0.833496 10.2627 0.833496 8.33321V6.66654C0.833496 5.98493 1.07976 5.39788 1.57229 4.90538C2.06479 4.41285 2.65184 4.16659 3.33345 4.16659H7.2117V0.833252H22.7885V4.16659H26.6668C27.3484 4.16659 27.9355 4.41285 28.428 4.90538C28.9205 5.39788 29.1667 5.98493 29.1667 6.66654V8.33321C29.1667 10.2627 28.5054 11.9293 27.1827 13.3332C25.8601 14.737 24.2373 15.5532 22.3142 15.7819C21.8569 17.1344 21.0856 18.2637 20.0001 19.1697C18.9146 20.0757 17.6646 20.6708 16.2501 20.955V26.6665H22.1795V29.1665H7.8207ZM7.2117 13.096V6.66654H3.33345V8.33321C3.33345 9.4956 3.69777 10.5164 4.42641 11.3957C5.15505 12.275 6.08348 12.8418 7.2117 13.096ZM22.7885 13.096C23.9168 12.8418 24.8452 12.275 25.5738 11.3957C26.3025 10.5164 26.6668 9.4956 26.6668 8.33321V6.66654H22.7885V13.096Z" fill="currentColor"/>
</svg>

'''
'''--- public/styles.css ---

:root {
          --primary: #F3F4F8;
          --secondary: #000;
          --gradOne: #4472ad;
          --gradTwo: #009dea;
        }

'''
'''--- src/app/globals.css ---
@tailwind base;
@tailwind components;
@tailwind utilities;

.storeImg {
  height: 320px;
  width:100%;
  min-width: 320px;
}

@media (min-width: 768px) {
  .storeImg{
    width: 18rem!important;  
  }
}

.h-camera {
  height: calc(100vh - 120px);
}
.m-camera {
  margin: 30px;
}

.margin-mint {
  margin-top: 120px;
}

.lds-ellipsis {
  display: inline-block;
  position: relative;
  width: 80px;
  height: 80px;
}

.lds-ellipsis div {
  position: absolute;
  top: 33px;
  width: 13px;
  height: 13px;
  border-radius: 50%;
  background: #ff2424;
  animation-timing-function: cubic-bezier(0, 1, 1, 0);
}

.lds-ellipsis div:nth-child(1) {
  left: 8px;
  animation: lds-ellipsis1 0.6s infinite;
}

.lds-ellipsis div:nth-child(2) {
  left: 8px;
  animation: lds-ellipsis2 0.6s infinite;
}

.lds-ellipsis div:nth-child(3) {
  left: 32px;
  animation: lds-ellipsis2 0.6s infinite;
}

.lds-ellipsis div:nth-child(4) {
  left: 56px;
  animation: lds-ellipsis3 0.6s infinite;
}

@keyframes lds-ellipsis1 {
  0% {
    transform: scale(0);
  }

  100% {
    transform: scale(1);
  }
}

@keyframes lds-ellipsis3 {
  0% {
    transform: scale(1);
  }

  100% {
    transform: scale(0);
  }
}

@keyframes lds-ellipsis2 {
  0% {
    transform: translate(0, 0);
  }

  100% {
    transform: translate(24px, 0);
  }
}
.link-styles {
  color: #4f58a3;
}
header {
  z-index: 999;
}

.notify {
  top: 63px;
  width: 100vw;
  font-size: 14px;
}

.gradientButton {
  background: linear-gradient(to right, var(--gradOne), var(--gradTwo));
}

'''
'''--- src/constants.ts ---
require("dotenv").config();

const appName: string = process.env.NEXT_PUBLIC_APP_TITLE || "MINTBASE";
const network = process.env.NEXT_PUBLIC_NETWORK || "mainnet";
const proxyContractAddress =
  process.env.NEXT_PUBLIC_PROXY_MINTER_CONTRACT_ADDRESS ||
  "1.minsta.mintbus.near";
const tokenContractAddress =
  process.env.NEXT_PUBLIC_NFT_CONTRACT_ADDRESS || "moments.mintbase1.near";

const mintbaseBaseUrl =
  process.env.NEXT_PUBLIC_BASE_URL || "https://mintbase.xyz";

const mintbaseWalletUrl =
  process.env.NEXT_PUBLIC_MINTBASE_WALLET_URL ||
  "https://wallet.mintbase.xyz";

const twitterText =
  process.env.NEXT_PUBLIC_TWITTER ||
  "Exploring%20unforgettable%20moments%20at%20%23Mintbase%20%40Mintbase%20%40NEARProtocol%20%23BOS%20%23NEAR%0aMint%20yours%20here%3A%20https%3A%2F%2Fminsta.mintbase.xyz";

export const constants = {
  appName,
  proxyContractAddress,
  tokenContractAddress,
  network,
  mintbaseBaseUrl,
  mintbaseWalletUrl,
  twitterText,
  isClosed: process.env.NEXT_PUBLIC_MINTING_CLOSED === "true" || false,
  showRewards: process.env.NEXT_PUBLIC_SHOW_REWARDS === "true" || false,
};

'''
'''--- src/data/fallback.ts ---

export const MINSTA_META = {
  description: "Share your best moments with Mintbase and Minsta!",
  title: "Mint Moments on Mintbase",
  twitter:
    "Explore%20unforgettable%20moments%20at%20%2Mintbase%20%40Mintbase%20%40NEARProtocol%20%23BOS%20%23NEAR",
  image: "./images/thumbnail.png",
};

export const MINSTA_TEXTS = {
  prizes: {
    one: "10N",
    two: "5N",
    three: "5N",
    title_one: "Top 10 on the Leaderboard",
    title_two: "Top 11-20 on the Leaderboard",
    title_three: "Most liked tweet with the hashtag MINSTA",
  },
  about: {
    first: "Take a picture",
    sec: "Upload and it will mint as an NFT",
    third: "Climb up the Leaderboard by minting",
  },
};

'''
'''--- src/data/fetch.ts ---

export const REQUEST_HEADERS = {
  "Cache-Control": "public, max-age=31536000, immutable",
  "mb-api-key": "omni-site",
};

export enum REQUEST_METHODS {
  get = "GET",
  post = "POST",
}

export const REQUEST_OPTIONS = (method: REQUEST_METHODS) => {
  return { method: method, headers: REQUEST_HEADERS };
};

export const fetchApi = async <T>(
  url: string,
  method: REQUEST_METHODS
): Promise<T | any> => {
  try {
    const result = await fetch(url, REQUEST_OPTIONS(method));

    if (result) {
      return await result.json();
    }
  } catch (error) {
    console.error(error);
  }
};
'''
'''--- src/data/getBlockedNfts.ts ---
import { REQUEST_METHODS, fetchApi } from "./fetch";

export const getBlockedNfts = async (): Promise<any> => {
  const fetchUrl = `https://surface-api-z3w7d7dnea-ew.a.run.app/blocked-nfts`;

  return fetchApi(fetchUrl, REQUEST_METHODS.get);
};

'''
'''--- src/data/graphqlService.ts ---
import { nearEndpoints } from "./network";
import { constants } from "@/constants";
import request, { gql } from "graphql-request";

export type GqlFetchResult<T> = {
  data?: T;
  error?: string;
};

export const graphqlQLServiceNew = async ({
  query,
  variables,
  network,
}: {
  query: any;
  variables?: Record<string, unknown>;
  network?: "testnet" | "mainnet";
}) => {
  const net = network ?? constants.network;
  const isTestnet = net === "testnet";

  const baseUrl = isTestnet
    ? nearEndpoints.testnet.graph
    : nearEndpoints.mainnet.graph;

  const headers = {
    "content-type": "application/json",
    "mb-api-key": "anon",
    "Access-Control-Allow-Origin": "*"
  };

  const queryLoad = () => request(baseUrl, query, variables, headers);

  return await queryLoad();
};

export const graphQLService = async ({
  query,
  variables,
  network,
}: {
  query: any;
  variables?: Record<string, unknown>;
  network?: "testnet" | "mainnet";
}) => {
  try {
    const data = await graphQlFetch(query, variables, network).then(
      async (data: Response) => {
        const res = await data.json();
        return res.data;
      }
    );

    return { data };
  } catch (error) {
    console.log(error, "error");
    return { error: `Query Error: ${error}` };
  }
};

export const graphQlFetch = async (
  query: string,
  variables: any,
  network?: "testnet" | "mainnet"
): Promise<Response> => {
  const net = network ?? constants.network;
  const isTestnet = net === "testnet";

  const baseUrl = isTestnet
    ? nearEndpoints.testnet.graph
    : nearEndpoints.mainnet.graph;

  const res = fetch(baseUrl, {
    method: "POST",
    body: JSON.stringify({
      query: query,
      variables: variables,
    }),
    headers: {
      "content-type": "application/json",
      "mb-api-key": "omni-site",
    },
  });

  return await res;
};

'''
'''--- src/data/network.ts ---
export const nearEndpoints = {
  testnet: {
    graph: "https://graph.mintbase.xyz/testnet",
  },
  mainnet: {
    graph: "https://graph.mintbase.xyz/",
  },
};

'''
'''--- src/data/queries/feed.graphl.ts ---
import { gql } from 'graphql-request';

export const FETCH_FEED = gql`
  query minsta_fetch_feed_minted_tokens(
    $accountId: String!
    $contractAddress: String
    $limit: Int
    $offset: Int
  ) {
    token: mb_views_nft_tokens(
      where: {
        minter: { _eq: $accountId }
        nft_contract_id: { _eq: $contractAddress }
        burned_timestamp: { _is_null: true }
        metadata_content_flag: { _is_null: true }
        nft_contract_content_flag: { _is_null: true }
      }
      order_by: { minted_timestamp: desc },
       offset: $offset,
       limit: $limit
    ) {
      id: token_id
      createdAt: minted_timestamp
      media
      title
      description
      metadata_id
    }
    mb_views_nft_tokens_aggregate(where: {minter: {_eq: $accountId}, nft_contract_id: {_eq: $contractAddress}, burned_timestamp: {_is_null: true}}) {
      aggregate {
      count
      }
    }
  }
`;

export const FETCH_FIRST_TOKEN = gql`
query minsta_fetch_firstToken($accountId: String!, $contractAddress: String) {
  token: mb_views_nft_tokens(where: {minter: {_eq: $accountId}, nft_contract_id: {_eq: $contractAddress}, 
    burned_timestamp: {_is_null: true}, metadata_content_flag: {_is_null: true}, nft_contract_content_flag: {_is_null: true}}, order_by: {minted_timestamp: desc}, limit: 1, offset: 0) {
    id: token_id
    createdAt: minted_timestamp
    media
    title
    description
    metadata_id
  }
}
`
'''
'''--- src/data/useGraphQlQuery.ts ---
import type {
  QueryObserverResult,
  UseQueryOptions,
} from '@tanstack/react-query'
import { useQuery } from '@tanstack/react-query'
import { graphQLService, graphqlQLServiceNew } from './graphqlService'

interface UseGraphQlQueryResult {
  data: any
  error: any
  isLoading: boolean
  refetch: () => Promise<QueryObserverResult<unknown, unknown>>
  isFetching: boolean
  status: 'error' | 'success' | 'loading'
}

export interface GQLQueryOptions {
  queryName: string
  query: string
  variables: Record<string, any>
  queryOpts?: any
  queryParams?: any[]
}

export const useGraphQlQuery = ({
  queryName,
  query,
  variables,
  queryOpts = {},
  queryParams = [],
}: GQLQueryOptions): UseGraphQlQueryResult => {
  const queryObj =
    queryParams.length > 0 ? [queryName, ...queryParams] : [queryName]

  const { data, error, isLoading, refetch, isFetching, status } = useQuery(
    queryObj,
    () => graphqlQLServiceNew({ query, variables }),
    queryOpts
  )

  return { data, error, isLoading, refetch, isFetching, status }
}

'''
'''--- src/hooks/useBlockedNfts.ts ---
import { getBlockedNfts } from "@/data/getBlockedNfts";
import { useQuery } from "@tanstack/react-query";

export const useBlockedNfts = () => {
  const { data: blockedNfts } = useQuery(
    ["q_getBlockedNfts"],
    () => getBlockedNfts(),
    {
      initialData: null, // Set initial data as null
      refetchInterval: 30000, // Automatically refetch every 120000 (2mins)
    }
  );

  return { blockedNfts };
};
'''
'''--- src/hooks/useCamera.ts ---
import { useApp } from "@/providers/app";
import React, { useEffect, useLayoutEffect, useState } from "react";

export const useCamera = () => {
 const { setCameraRef } = useApp();
  const [facingMode, setFacingMode] = useState("environment");
  const [cameraLoaded, setCameraLoaded] = useState(false);
  const [permissionGranted, setPermission] = useState(false);
  const [pageLoaded, setPageLoaded] = useState(false);
  const [picture, setPicture] = useState(null);

  const webcamRef = React.useRef(null);

  useLayoutEffect(() => {
    if (!pageLoaded) {
      const timeout = setTimeout(() => {
        setPageLoaded(true);
      }, 500); // 2000 milliseconds = 2 seconds

      return () => {
        // Clear the timeout if the component unmounts or the effect re-runs
        clearTimeout(timeout);
      };
    }
  }, []); //

  async function requestCameraPermission() {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({
        video: true,
      });

      setPermission(true); // Update the permission state
      // Don't forget to close the stream
      stream.getTracks().forEach((track) => track.stop());
    } catch (error) {
      // User denied permission or some other error occurred
      console.error("Camera permission denied:", error);
    }
  }

  const askPermission = () => {
    navigator?.permissions
      .query({ name: "camera" as PermissionName })
      .then((permissionStatus) => {
        if (permissionStatus.state === "granted") {
          setPermission(true);
        } else if (permissionStatus.state === "prompt") {
          requestCameraPermission();
        } else {
          console.log("Camera permission denied.");
        }
      });
  };

  useEffect(() => {
    if (document) {
      document.body.classList.add("overflow-hidden");
    }
  }, []);

  useEffect(() => {
    // Check if camera permission is already granted
    askPermission();
  }, []);

  useEffect(() => {
    if (!webcamRef || !webcamRef.current) return;

    setCameraRef(webcamRef);
  }, [setCameraRef, webcamRef]);

  const toggleCamera = () => {
    const nextFacingMode =
      facingMode === "environment" ? "user" : "environment";

    setFacingMode(nextFacingMode);
  };

  const capture = React.useCallback(() => {
    const webcamScreen = webcamRef as any;
    const imageSrc = webcamScreen.current.getScreenshot();
    setPicture(imageSrc);
  }, [webcamRef]);

  const tryAgain = () => {
    setPicture(null);
  };

  const [initialLoad, setInitialLoad] = useState(true);

  useEffect(() => {
    if (permissionGranted && initialLoad) {
      // Initialize the camera after permission is granted on initial load
      setCameraLoaded(true);
      setInitialLoad(false);
    }
  }, [permissionGranted, initialLoad]);

  return {
    tryAgain,
    capture,
    toggleCamera,
    setCameraLoaded,
    picture,
    setPicture,
    permissionGranted,
    pageLoaded,
    cameraLoaded,
    webcamRef,
    requestCameraPermission,
    facingMode,
  };
};

'''
'''--- src/hooks/useFeed.ts ---
import { useMemo } from "react";
import { FETCH_FEED, FETCH_FIRST_TOKEN } from "../data/queries/feed.graphl";
import { useGraphQlQuery } from "@/data/useGraphQlQuery";

const useFeed = (props: any) => {
  const { accountId, contractAddress } = props;

  const queryObj = {
    queryName: "q_FETCH_FEED",
    query: FETCH_FEED,
    variables: { accountId, contractAddress, limit: 11, offset: 1 },
    queryOpts: { staleTime: Infinity },
  };

  const {
    data,
    isLoading,
    isFetching,
    refetch: refetchNfts,
  } = useGraphQlQuery(queryObj);

  const memoizedData = useMemo(() => {
    const uniqueMetadataIds = new Set<string>();

    const filteredData =  data?.data?.token?.filter((token: any) => {
      if (uniqueMetadataIds.has(token.metadata_id)) {
        return false;
      }

      uniqueMetadataIds.add(token.metadata_id);

      return true;
    });

    return filteredData;
  }, [data]);

  return {
    data: memoizedData,
    isLoading,
    isFetching,
    refetchNfts,
  };
};

export { useFeed };

'''
'''--- src/hooks/useFirstToken.ts ---
import { FETCH_FIRST_TOKEN } from "@/data/queries/feed.graphl";
import { useGraphQlQuery } from "@/data/useGraphQlQuery";
import { constants } from "@/constants";
import { useEffect, useState } from "react";

export const useFirstToken: any = () => {
  const [newToken, setNewToken] = useState<any>(null);
  const [tokensFetched, setTokensFetched] = useState<any>(null);

  const queryObj = {
    queryName: "q_FETCH_FIRST_TOKEN",
    query: FETCH_FIRST_TOKEN,
    variables: {
      accountId: constants.proxyContractAddress,
      contractAddress: constants.tokenContractAddress,
    },
    queryOpts: { staleTime: Infinity, refetchInterval: 30000 },
  };

  const { data, isLoading, refetch: refetchToken } = useGraphQlQuery(queryObj);

  useEffect(() => {
    // media delay

    if (tokensFetched && tokensFetched?.length > 1) {
      // window.location.reload();
    }
    // new media aint null
    if (data?.token[0]?.media !== null) {
      // but the newToken previous stored is somehow an async bug so it re-state the new media
      if (newToken?.media == null) {
        setNewToken(data?.token[0]);
      }

      // previous newToken is outdated like new coming media is id 301 and previous token 298
      if (newToken?.id) {
        if (data?.token[0]?.id !== newToken?.id) {

          // if isnt in direct order reload the page to organize the order.
          if (
            Number(data?.token[0]?.id) !== Number(newToken?.id) + 1 &&
            !isLoading
          ) {
            // window.location.reload();
          }
        }
      }
    }

    // first load

    if (
      (data?.token[0] && !newToken) ||
      (data?.token[0] && tokensFetched?.length < 1)
    ) {
      setNewToken(data?.token[0]);
    }

    // check if the newToken coming is the next id.

    if (
      newToken !== null &&
      Number(data?.token[0]?.id) === Number(newToken?.id) + 1 &&
      data?.token[0]?.media
    ) {
      let newTokensFetched = null;

      if (!tokensFetched) {
        newTokensFetched = [newToken];
      }

      if (tokensFetched?.length == 1) {
        newTokensFetched = [newToken, tokensFetched];
      }
      if (tokensFetched?.length > 1) {
        newTokensFetched = [newToken, ...tokensFetched];
      }

      setTokensFetched(newTokensFetched);
      setNewToken(data?.token[0]);
    }
  }, [data?.token, newToken, tokensFetched]);

  return {
    newToken: !isLoading ? newToken : null,
    tokensFetched,
    isLoading,
  };
};

'''
'''--- src/hooks/useInfiniteScroll.ts ---
import { constants } from "@/constants";
import { graphqlQLServiceNew } from "@/data/graphqlService";
import { useInfiniteQuery } from "@tanstack/react-query";
import { useEffect, useReducer } from "react";
import { useMediaQuery } from "usehooks-ts";

const initialState = {
  items: [],
  offset: 1,
  isLoading: false,
  calledOffsets: [0],
  total: null,
};

const reducer = (state: any, action: any) => {
  switch (action.type) {
    case "FETCH_START":
      return { ...state, isLoading: true };
    case "FETCH_SUCCESS":
      return {
        ...state,
        items: [...state.items, ...action.payload],
      };
    case "FETCH_RESET":
      return initialState;

    case "SET_TOTAL":
      return { ...state, total: action.payload };
    case "SET_CALLED_OFFSETS":
      return {
        ...state,
        calledOffsets: [...state.calledOffsets, action.payload],
      };

    case "SET_OFFSET":
      return { ...state, offset: action.payload };
    case "SET_LOADING":
      return { ...state, isLoading: action.payload };
    case "SET_ERROR":
      return { ...state, error: action.payload };
    default:
      return state;
  }
};

const useInfiniteScrollGQL = (
  queryKey: any,
  isVisible: any,
  graphQLObj?: any
) => {
  const [state, dispatch] = useReducer(reducer, initialState);

  const isDesktop = useMediaQuery("(min-width: 768px)");
  const fetchNum = isDesktop ? 11 : 3;

  const fetchItems = async () => {
    dispatch({ type: "FETCH_START" });

    const variables = {
      limit: fetchNum,
      accountId: constants.proxyContractAddress,
      contractAddress: constants.tokenContractAddress,
      offset: state.offset === 1 ? 1 : (Number(state.offset) - 1) * fetchNum,
    };

    const data = await graphqlQLServiceNew({
      query: graphQLObj.query,
      variables: variables,
    }) as any

    dispatch({ type: "SET_LOADING", payload: false });
    dispatch({ type: "SET_OFFSET", payload: state.offset + 1 });
    dispatch({ type: "SET_CALLED_OFFSETS", payload: state.offset + 1 });
    dispatch({
      type: "SET_TOTAL",
      payload: data?.mb_views_nft_tokens_aggregate?.aggregate?.count,
    });

    dispatch({
      type: "FETCH_SUCCESS",
      payload: data?.token,
    });

    return data?.token;
  };

  // useInfiniteQuery

  const { data, fetchNextPage, isFetchingNextPage, error } = useInfiniteQuery(
    [queryKey, state.offset],
    fetchItems,
    {
      getNextPageParam: () => state.offset >= 0,
      cacheTime: Infinity,
      refetchOnWindowFocus: false,
      enabled:
        !state.calledOffsets.includes(state.offset) || state.offset === 1,
    }
  );

  // need to do error treatment, for now will render an error message on screen

  useEffect(() => {
    if (error) {
      console.error(error);
      dispatch({ type: "SET_ERROR", payload: error });
    }
  }, [error]);

  const handleScroll = () => {
    const hasNewPage = state.items.length < state.total;

    if (!state.isLoading && isVisible && hasNewPage && !isFetchingNextPage) {
      const newOffset = state.offset + 1;
      if (!state.calledOffsets.includes(newOffset)) {
        fetchNextPage();
      }
    }
  };

  // scroll mechanism, detects if users reached bottom

  useEffect(() => {
    window.addEventListener("scroll", handleScroll);
    return () => window.removeEventListener("scroll", handleScroll);
  }, [state.offset, isVisible]);

  const resetItemList = () => {
    dispatch({ type: "FETCH_RESET" });
  };

  const isMinthenInfiniteScrollNum = state.items.length < fetchNum;

  return {
    items: state.items,
    resetItemList,
    loadingItems:
      state.items.length < state.total && !isMinthenInfiniteScrollNum
        ? Array.from({ length: 1 }, (_) => ({ id: "" }))
        : null,
    total: state.total,
    error: state.error,
  };
};

export default useInfiniteScrollGQL;

'''
'''--- src/hooks/useLeaderboard.ts ---
"use client";

import { isUndefined } from "lodash";
import { useMemo } from "react";
import { useWallet } from "@mintbase-js/react";
import { constants } from "@/constants";
import { useApp } from "@/providers/app";
import { MINSTA_TEXTS } from "@/data/fallback";
import { useGraphQlQuery } from "@/data/useGraphQlQuery";

const FetchLeaderboard = `
  query FetchLeaderboard($contractAddress: String) @cached {
    token: mb_views_nft_tokens(
      where: { nft_contract_id: { _eq: $contractAddress } }
    ) {
      ownerId: owner
    }
  }
`;

export const useLeaderBoardData = () => {
  const queryObj = {
    queryName: "q_FetchLeaderboard",
    query: FetchLeaderboard,
    variables: { contractAddress: constants.tokenContractAddress },
    queryOpts: { staleTime: Infinity },
  };

  const { data, isLoading: loading } = useGraphQlQuery(queryObj);

  const texts = {
    prizes: {
      one: process.env.NEXT_PUBLIC_TEXT_PRIZE_1ST_VAL || MINSTA_TEXTS.prizes.one,
      two: process.env.NEXT_PUBLIC_TEXT_PRIZE_2ND_VAL || MINSTA_TEXTS.prizes.two,
      three:process.env.NEXT_PUBLIC_TEXT_PRIZE_3RD_VAL || MINSTA_TEXTS.prizes.three,
      title_one: process.env.NEXT_PUBLIC_TEXT_PRIZE_1ST_TITLE || MINSTA_TEXTS.prizes.title_one,
      title_two: process.env.NEXT_PUBLIC_TEXT_PRIZE_2ND_TITLE || MINSTA_TEXTS.prizes.title_two,
      title_three:  process.env.NEXT_PUBLIC_TEXT_PRIZE_3RD_TITLE || MINSTA_TEXTS.prizes.title_three,
    },
  };

  const { activeAccountId } = useWallet();

  const { openModal } = useApp();

  const leaderboard = useMemo(() => {
    if (loading) return [];

    const accounts = data?.token;

    const leaderboardResult = accounts?.reduce(
      (acc: Record<string, number>, token: any) => {
        const { ownerId } = token;

        const notExist = isUndefined(acc[ownerId]) || isNaN(acc[ownerId]);

        if (notExist) {
          acc[ownerId] = 1;
        } else {
          acc[ownerId] = acc[ownerId] + 1;
        }

        return acc;
      },
      {}
    );

    const resultArray = Object.keys(leaderboardResult)
      .map((key) => {
        return {
          count: leaderboardResult[key],
          account: key,
        };
      })
      .sort((a, b) => {
        return b.count - a.count;
      });

    return resultArray;
  }, [data]);

  return { texts, leaderboard, openModal, activeAccountId };
};

'''
'''--- src/style/global.css ---
.nws-modal-wrapper .nws-modal {
  height: auto !important;
}

.nws-modal-wrapper .nws-modal .modal-right {
  display: none !important;
}

.nws-modal-wrapper .nws-modal .modal-left {
  width: 100%;
  border-right: 1px solid
    var(--wallet-selector-sidebar-border-color, var(--sidebar-border-color));
  padding: 32px 24px;
  height: 100%;
  overflow: auto;
  text-align: center;
}
.nws-modal-wrapper .nws-modal {
  height: 215px;
}
.wallet-options-wrapper {
  width: 100%;
  display: flex;
  justify-items: center;
  align-items: center;
  justify-content: center;
}
.nws-modal-wrapper .nws-modal > .modal-left > div:nth-child(2) {
  display: flex;
  justify-items: center;
  text-align: center;
  width: 100%;
}

.nws-modal-wrapper
  .modal-left
  .wallet-options-wrapper
  .options-list-section
  .options-list-section-header {
  display: none;
}

:root {
  --primary: #F3F4F8;
  --secondary: #000;
  --mainBg: #FFFFFF;
  --gradOne: #4472ad;
  --gradTwo: #009dea;
  --cardOne: #E8EAF0;
  --cardTwo: #049BE8;
  --linkColor: #4f58a3;
  --icon: #4B9CE3;
  --camera: #FFFFFF;
  --modalText: #000000;
  --leaderboardText: #000000;
  --headerText: #000000;
  --mainText: #000000;
  --freeUseText: #0A7D6C;
  --bgFreeUse: #0A7D6C1A;
  --primaryBtnText: #FFFFFF;
  --secondaryBtnText: #000000;
}
'''
'''--- src/utils/base64ToFile.ts ---
export const convertBase64ToFile = (
  base64Data: string,
  contentType: string = "image/jpeg",
  filename: string = "image.jpg"
): File => {
  // Convert the Base64 string to a Blob
  const byteCharacters = atob(base64Data.split(",")[1]);
  const byteArrays = [];

  for (let offset = 0; offset < byteCharacters.length; offset += 512) {
    const slice = byteCharacters.slice(offset, offset + 512);

    const byteNumbers = new Array(slice.length);
    for (let i = 0; i < slice.length; i++) {
      byteNumbers[i] = slice.charCodeAt(i);
    }

    const byteArray = new Uint8Array(byteNumbers);
    byteArrays.push(byteArray);
  }

  const blob = new Blob(byteArrays, { type: contentType });

  // Convert the Blob to a File object
  return new File([blob], filename, { type: contentType });
};

'''
'''--- src/utils/cachedImage.ts ---
export const getCachedImage = (
  image: string,
): string | null => {
  let url: string | null = null
  const checkCache =
   'https://image-cache-service-z3w7d7dnea-ew.a.run.app/media?url='

  // if image is passed as null, just return null
  if (!image) {
    return null
  }

  if (!checkCache) {
    console.error(
      'NEXT_PUBLIC_IMAGE_CACHE_MEDIA_URL and/or NEXT_PUBLIC_IMAGE_CACHE_THUMBNAIL_URL are not defined in process.env'
    )
    return image
  }

  url = `${checkCache}${image}`

  return url
}
'''
'''--- src/utils/generateRandomId.ts ---
export const generateRandomId = (length: number) => {
  let result = "";
  const characters =
    "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
  const charactersLength = characters.length;
  for (var i = 0; i < length; i++) {
    result += characters.charAt(Math.floor(Math.random() * charactersLength));
  }
  return result;
};

'''
'''--- tailwind.config.ts ---
import type { Config } from "tailwindcss";

const config: Config = {
  content: [
    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {
      backgroundImage: {
        "gradient-radial": "radial-gradient(var(--tw-gradient-stops))",
        "gradient-conic":
          "conic-gradient(from 180deg at 50% 50%, var(--tw-gradient-stops))",
      },
      colors: {
        primary: "var(--primary)",
        secondary: "var(--secondary)",
        mainBg: "var(--mainBg)",
        gradOne: "var(--gradOne)",
        gradTwo: "var(--gradTwo)",
        cardOne: "var(--cardOne)",
        cardTwo: "var(--cardTwo)",
        linkColor: "var(--linkColor)",
        icon: "var(--icon)",
        camera: "var(--camera)",
        modalText: "var(--modalText)",
        leaderboardText: "var(--leaderboardText)",
        headerText: "var(--headerText)",
        mainText: "var(--mainText)",
        freeUseText: "var(--freeUseText)",
        bgFreeUse: "var(--bgFreeUse)",
        primaryBtnText: "var(--primaryBtnText)",
        secondaryBtnText: "var(--secondaryBtnText)",
      },
      gradientColorStopPositions: {
        33: "33%",
      },
    },
  },
  plugins: [],
};
export default config;

'''
'''--- tsconfig.json ---
{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}

'''