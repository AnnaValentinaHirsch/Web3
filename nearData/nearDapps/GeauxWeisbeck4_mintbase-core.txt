*GitHub Repository "GeauxWeisbeck4/mintbase-core"*

'''--- .cargo/config.toml ---
[target.wasm32-unknown-unknown]
rustflags = ["-C", "link-arg=-s"]

# instead of creating a new profile, this might be helpful:
# https://doc.rust-lang.org/cargo/reference/profiles.html#overrides
[profile.wasm-release]
inherits = "release"   # base this on the default release profile
codegen-units = 1      # generate a single blob of machine/Wasm instructions
opt-level = "z"        # optimize for code size
lto = true             # compile at link time
debug = false          # no debug symbols/checks
panic = "abort"        # usually unwind, but that's extra overhead
overflow-checks = true # enable safety checks for arithmetic operations

[alias]
wasm = "rustc --target wasm32-unknown-unknown --profile wasm-release"
doc-all = "doc -p mintbase-deps --release --features store-wasm --features factory-wasm --lib --no-deps --target-dir mintbase-core-docs"
helper-wasm = "wasm -p helper -- --emit link=wasm/helper.wasm"
store-wasm = "wasm -p store -- --emit link=wasm/store.wasm"
factory-wasm = "wasm -p factory -- --emit link=wasm/factory.wasm"
market-wasm = "wasm -p simple-market-contract -- --emit link=wasm/market.wasm"
indexer = "rustc -p mintbase-near-indexer --release --bin mintbase-near-indexer -- --emit link=bin/indexer"
stats = "rustc -p mintbase-near-indexer --release --bin stats -- --emit link=bin/stats"
lint = "clippy -- -D warnings"

'''
'''--- Cargo.toml ---
[workspace]

members = [
	"mintbase-deps",
	"store",
	"factory",
	"helper",
	"simple-market-contract",
	"mintbase-near-indexer",
]

'''
'''--- factory/Cargo.toml ---
[package]
name = "factory"
version = "0.1.0"
edition = "2021"

[lib]
crate-type = ["cdylib"]

[dependencies]
mintbase-deps = { path = "../mintbase-deps", features = ["factory-wasm"] }

'''
'''--- factory/src/lib.rs ---
use std::convert::TryFrom;
use std::str::FromStr;

use mintbase_deps::common::{
    NFTContractMetadata,
    StoreInitArgs,
};
use mintbase_deps::constants::{
    gas,
    storage_bytes,
    storage_stake,
    NO_DEPOSIT,
    YOCTO_PER_BYTE,
};
use mintbase_deps::interfaces::factory_self;
use mintbase_deps::logging::{
    NearJsonEvent,
    NftStoreCreateLog,
};
use mintbase_deps::near_sdk::borsh::{
    self,
    BorshDeserialize,
    BorshSerialize,
};
use mintbase_deps::near_sdk::collections::LookupSet;
use mintbase_deps::near_sdk::json_types::U128;
use mintbase_deps::near_sdk::{
    self,
    assert_one_yocto,
    env,
    is_promise_success,
    near_bindgen,
    AccountId,
    Balance,
    Promise,
    PublicKey,
};
use mintbase_deps::serde_json;
// ------------------------------- constants -------------------------------- //

// ----------------------------- smart contract ----------------------------- //
#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct MintbaseStoreFactory {
    /// The `Store`s this `Factory` has produced.
    pub stores: LookupSet<String>,
    /// Fee taken by Mintbase for `Store` deployment.
    pub mintbase_fee: Balance,
    /// The owner may update the `mintbase_fee`.
    pub owner_id: AccountId,
    /// The Near-denominated price-per-byte of storage. As of April 2021, the
    /// price per bytes is set by default to 10^19, but this may change in the
    /// future, thus this future-proofing field.
    pub storage_price_per_byte: u128,
    /// Cost in yoctoNear to deploy a store. Changes if `storage_price_per_byte`
    /// changes.
    pub store_cost: u128,
    /// The public key to give a full access key to
    pub admin_public_key: PublicKey,
}

// ----------------------- contract interface modules ----------------------- //
impl Default for MintbaseStoreFactory {
    fn default() -> Self {
        env::panic_str("Not initialized yet.");
    }
}

#[near_bindgen]
impl MintbaseStoreFactory {
    pub fn assert_only_owner(&self) {
        assert_one_yocto();
        assert_eq!(
            env::predecessor_account_id(),
            self.owner_id,
            "Only contract owner can call this method"
        );
    }

    /// Sufficient attached deposit is defined as enough to deploy a `Store`,
    /// plus enough left over for the mintbase deployment cost.
    pub fn assert_sufficient_attached_deposit(&self) {
        let min = storage_bytes::STORE as u128 * self.storage_price_per_byte + self.mintbase_fee;
        assert!(
            env::attached_deposit() >= min,
            "Not enough attached deposit to complete store deployment. Need: {}, got: {}",
            min,
            env::attached_deposit()
        );
    }

    pub fn assert_no_store_with_id(
        &self,
        store_id: String,
    ) {
        assert!(
            !self.check_contains_store(store_id),
            "Store with that ID already exists"
        );
    }

    /// If a `Store` with `store_id` has been produced by this `Factory`, return `true`.
    pub fn check_contains_store(
        &self,
        store_id: String,
    ) -> bool {
        self.stores.contains(&store_id)
    }

    /// Get the `owner_id` of this `Factory`.
    pub fn get_owner(&self) -> &AccountId {
        &self.owner_id
    }

    /// Get the `mintbase_fee` of this `Factory`.
    pub fn get_mintbase_fee(&self) -> U128 {
        self.mintbase_fee.into()
    }

    /// The sum of `mintbase_fee` and `STORE_STORAGE`.
    pub fn get_minimum_attached_balance(&self) -> U128 {
        (storage_bytes::STORE as u128 * self.storage_price_per_byte + self.mintbase_fee).into()
    }

    /// The sum of `mintbase_fee` and `STORE_STORAGE`.
    pub fn get_admin_public_key(&self) -> &PublicKey {
        &self.admin_public_key
    }

    /// The Near Storage price per byte has changed in the past, and may change in
    /// the future. This method may never be used.
    #[payable]
    pub fn set_storage_price_per_byte(
        &mut self,
        new_price: U128,
    ) {
        self.assert_only_owner();
        self.storage_price_per_byte = new_price.into();
        self.store_cost = self.storage_price_per_byte * storage_bytes::STORE as u128;
    }

    /// Set amount of Near tokens taken by Mintbase for making `Store`s. Provide an
    /// amount denominated in units of yoctoNear, ie. 1 = 10^-24 Near.
    #[payable]
    pub fn set_mintbase_factory_fee(
        &mut self,
        amount: U128,
    ) {
        self.assert_only_owner();
        self.mintbase_fee = amount.into()
    }

    /// Set a new `owner_id` for `Factory`.
    #[payable]
    pub fn set_mintbase_factory_owner(
        &mut self,
        account_id: AccountId,
    ) {
        self.assert_only_owner();
        let account_id = account_id;
        assert_ne!(account_id, env::predecessor_account_id());
        self.owner_id = account_id;
    }

    /// Set the admin public key. If `public_key` is None, use the signer's
    /// public key.
    #[payable]
    pub fn set_admin_public_key(
        &mut self,
        public_key: Option<String>,
    ) {
        self.assert_only_owner();
        match public_key {
            None => {
                assert_ne!(env::signer_account_pk(), self.admin_public_key);
                self.admin_public_key = env::signer_account_pk();
            },
            Some(public_key) => {
                let public_key = public_key.as_bytes().to_vec();
                assert_ne!(public_key, self.admin_public_key.as_bytes());
                self.admin_public_key = PublicKey::try_from(public_key).unwrap();
            },
        }
    }

    /// Handle callback of store creation.
    #[private]
    pub fn on_create(
        &mut self,
        store_creator_id: AccountId,
        metadata: NFTContractMetadata,
        owner_id: AccountId,
        store_account_id: AccountId,
        attached_deposit: U128,
    ) {
        let attached_deposit: u128 = attached_deposit.into();
        if is_promise_success() {
            // pay out self and update contract state
            self.stores.insert(&metadata.name);
            let nscl = NftStoreCreateLog {
                contract_metadata: metadata,
                owner_id: owner_id.to_string(),
                id: store_account_id.to_string(),
            };
            let event = NearJsonEvent {
                standard: "nep171".to_string(),
                version: "1.0.0".to_string(),
                event: "nft_store_creation".to_string(),
                data: serde_json::to_string(&nscl).unwrap(),
            };
            env::log_str(event.near_json_event().as_str());
            Promise::new(self.owner_id.to_string().parse().unwrap())
                .transfer(attached_deposit - self.store_cost);
            #[cfg(feature = "panic-test")]
            env::panic_str("event.near_json_event().as_str()");
        } else {
            // Refunding store cost creation to the store creator
            Promise::new(store_creator_id).transfer(attached_deposit - self.store_cost);
            env::log_str("failed store deployment");
        }
    }

    #[init(ignore_state)]
    pub fn new() -> Self {
        assert!(!env::state_exists());
        let storage_price_per_byte = YOCTO_PER_BYTE; // 10^19
        Self {
            stores: LookupSet::new(b"t".to_vec()),
            mintbase_fee: 0, // 0 by default
            owner_id: env::predecessor_account_id(),
            storage_price_per_byte,
            store_cost: storage_stake::STORE,
            admin_public_key: env::signer_account_pk(),
        }
    }

    /// Contract metadata and methods in the API may be updated. All other
    /// elements of the state should be copied over. This method may only be
    /// called by the holder of the contract private key.
    #[private]
    #[init(ignore_state)]
    pub fn migrate() -> Self {
        let old = env::state_read().expect("ohno ohno state");
        Self { ..old }
    }

    /// `create_store` checks that the attached deposit is sufficient before
    /// parsing the given store_id, validating no such store subaccount exists yet
    /// and generates a new store from the store metadata.
    #[payable]
    pub fn create_store(
        &mut self,
        metadata: NFTContractMetadata,
        owner_id: AccountId,
    ) -> Promise {
        self.assert_sufficient_attached_deposit();
        self.assert_no_store_with_id(metadata.name.clone());
        assert_ne!(&metadata.name, "market"); // marketplace lives here
        assert_ne!(&metadata.name, "loan"); // loan lives here
        let metadata = NFTContractMetadata::new(metadata);
        let init_args = serde_json::to_vec(&StoreInitArgs {
            metadata: metadata.clone(),
            owner_id: owner_id.clone(),
        })
        .unwrap();
        // StoreId is only the subaccount. store_account_id is the full near qualified name.
        // Note, validity checked in `NFTContractMetadata::new;` above.

        let store_account_id =
            AccountId::from_str(&*format!("{}.{}", metadata.name, env::current_account_id()))
                .unwrap();
        Promise::new(store_account_id.clone())
            .create_account()
            .transfer(self.store_cost)
            .add_full_access_key(self.admin_public_key.clone())
            .deploy_contract(include_bytes!("../../wasm/store.wasm").to_vec())
            .function_call("new".to_string(), init_args, 0, gas::CREATE_STORE)
            .then(factory_self::on_create(
                env::predecessor_account_id(),
                metadata,
                owner_id,
                store_account_id,
                env::attached_deposit().into(),
                env::current_account_id(),
                NO_DEPOSIT,
                gas::ON_CREATE_CALLBACK,
            ))
    }
}

// ------------------------ impls on external types ------------------------- //
// TODO: Why the trait? -> to be able to impl it in this crate
pub trait New {
    fn new(arg: Self) -> Self;
}

impl New for NFTContractMetadata {
    fn new(args: NFTContractMetadata) -> Self {
        let store_account = format!("{}.{}", args.name, env::current_account_id());
        assert!(
            env::is_valid_account_id(store_account.as_bytes()),
            "Invalid character in store id"
        );
        assert!(args.symbol.len() <= 6);

        Self {
            spec: args.spec,
            name: args.name,
            symbol: args.symbol,
            icon: args.icon,
            base_uri: args.base_uri,
            reference: args.reference,
            reference_hash: args.reference_hash,
        }
    }
}

// --------------------------- logging functions ---------------------------- //
pub fn log_factory_new(
    store: &NFTContractMetadata,
    store_account_id: &str,
    owner_id: &str,
) {
    let nscl = NftStoreCreateLog {
        contract_metadata: store.clone(),
        owner_id: owner_id.to_string(),
        id: store_account_id.to_string(),
    };
    let event = NearJsonEvent {
        standard: "nep171".to_string(),
        version: "1.0.0".to_string(),
        event: "nft_store_creation".to_string(),
        data: serde_json::to_string(&nscl).unwrap(),
    };
    env::log_str(event.near_json_event().as_str());
}

// ---------------------------------- misc ---------------------------------- //

'''
'''--- helper/Cargo.toml ---
[package]
name = "helper"
version = "0.1.0"
edition = "2021"

[lib]
crate-type = ["cdylib"]

[dependencies]
mintbase-deps = { path = "../mintbase-deps", features = ["helper-wasm"] }

'''
'''--- helper/src/lib.rs ---
use mintbase_deps::near_sdk::borsh::{
    self,
    BorshDeserialize,
    BorshSerialize,
};
use mintbase_deps::near_sdk::{
    self,
    env,
    near_bindgen,
    AccountId,
    PromiseOrValue,
};

// ----------------------------- smart contract ----------------------------- //
#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct HelperWasm {
    pub count: u64,
}

/// default must be implemented for wasm compilation.
impl Default for HelperWasm {
    fn default() -> Self {
        Self { count: 0 }
    }
}

#[near_bindgen]
impl HelperWasm {
    #[init(ignore_state)]
    pub fn new() -> Self {
        Self { count: 0 }
    }

    pub fn nft_on_transfer(
        &mut self,
        sender_id: AccountId,
        previous_owner_id: AccountId,
        token_id: String,
        msg: String,
    ) -> PromiseOrValue<bool> {
        env::log_str(
            format!(
                "in nft_on_transfer; sender_id={}, previous_owner_id={}, token_id={}, msg={}",
                &sender_id, &previous_owner_id, &token_id, msg
            )
            .as_str(),
        );
        match msg.as_str() {
            "true" => PromiseOrValue::Value(true),
            "false" => PromiseOrValue::Value(false),
            _ => env::panic_str("unsupported msg"),
        }
    }
}

'''
'''--- mintbase-deps/Cargo.toml ---
[package]
name = "mintbase-deps"
version = "0.1.0"
edition = "2018"
authors = [
    "evergreen-trading-systems <4870868+evergreen-trading-systems@users.noreply.github.com>",
]

[lib]
crate-type = ["rlib", "cdylib"]

[dependencies]
clap = { version = "3.0.0-beta.2", optional = true }
near-sdk = { version = "4.0.0-pre.7", optional = true }
serde = { version = "1", features = ["derive"] }
serde_json = "1"

[features]
store-wasm = ["wasm"]
factory-wasm = ["wasm"]
market-wasm = ["wasm"]
helper-wasm = ["wasm"]
test = ["clap", "all"]
all = ["wasm"]
wasm = ["near-sdk"]

'''
'''--- mintbase-deps/src/common.rs ---
// pub mod loan;
// pub mod owner;
pub mod payouts;
pub mod safe_fraction;
pub mod sale_args;
// pub mod storage;
pub mod store_init_args;
pub mod store_metadata;
pub mod time;
// pub mod token;
pub mod token_key;
pub mod token_listing;
pub mod token_metadata;
pub mod token_offer;

// pub use loan::Loan;
// pub use owner::Owner;
pub use payouts::{
    NewSplitOwner,
    OwnershipFractions,
    Payout,
    Royalty,
    RoyaltyArgs,
    SplitBetween,
    SplitBetweenUnparsed,
    SplitOwners,
};
pub use safe_fraction::{
    MultipliedSafeFraction,
    SafeFraction,
};
pub use sale_args::SaleArgs;
// pub use storage::{
//     StorageCosts,
//     StorageCostsMarket,
// };
pub use store_init_args::StoreInitArgs;
pub use store_metadata::{
    NFTContractMetadata,
    NonFungibleContractMetadata,
};
pub use time::{
    NearTime,
    TimeUnit,
};
// pub use token::{
//     Token,
//     TokenCompliant,
// };
pub use token_key::TokenKey;
pub use token_listing::TokenListing;
pub use token_metadata::{
    TokenMetadata,
    TokenMetadataCompliant,
};
pub use token_offer::TokenOffer;
// pub use store_metadata::{};

'''
'''--- mintbase-deps/src/common/payouts/mod.rs ---
pub mod payout;
pub mod royalty;
pub mod splits;

pub use payout::{
    OwnershipFractions,
    Payout,
};
pub use royalty::{
    Royalty,
    RoyaltyArgs,
};
pub use splits::{
    NewSplitOwner,
    SplitBetween,
    SplitBetweenUnparsed,
    SplitOwners,
};

'''
'''--- mintbase-deps/src/common/payouts/payout.rs ---
use std::collections::HashMap;

use near_sdk::json_types::U128;
use near_sdk::serde::{
    Deserialize,
    Serialize,
};
use near_sdk::{
    AccountId,
    Balance,
};

use crate::common::{
    MultipliedSafeFraction,
    Royalty,
    SafeFraction,
    SplitOwners,
};
use crate::constants::MAX_LEN_PAYOUT;

/// Whom to pay. Generated from `OwnershipFractions`.
#[derive(Serialize, Deserialize)]
pub struct Payout {
    pub payout: HashMap<AccountId, U128>,
}

/// Take the Royalty and SplitOwner information for a token, and return a Vector
/// of proportional payouts.
#[derive(Serialize, Deserialize)]
pub struct OwnershipFractions {
    pub fractions: HashMap<AccountId, MultipliedSafeFraction>,
}

impl OwnershipFractions {
    /// Generate a mapping of who receives what from a token's Royalty,
    /// SplitOwners, and normal owner data.
    pub fn new(
        owner_id: &str,
        royalty: &Option<Royalty>,
        split_owners: &Option<SplitOwners>,
    ) -> Self {
        let roy_len = royalty.as_ref().map(|r| r.split_between.len()).unwrap_or(0);
        let split_len = split_owners
            .as_ref()
            .map(|r| r.split_between.len())
            .unwrap_or(1);
        assert!((roy_len + split_len) as u32 <= MAX_LEN_PAYOUT);

        let mut payout: HashMap<AccountId, MultipliedSafeFraction> = Default::default();
        let percentage_not_taken_by_royalty = match royalty {
            Some(royalty) => {
                let (split_between, percentage) =
                    (royalty.split_between.clone(), royalty.percentage);
                split_between.iter().for_each(|(receiver, &rel_perc)| {
                    let abs_perc: MultipliedSafeFraction = percentage * rel_perc;
                    payout.insert(receiver.to_string().parse().unwrap(), abs_perc);
                });
                SafeFraction::new(10_000 - percentage.numerator)
            },
            None => SafeFraction::new(10_000u32),
        };

        match split_owners {
            Some(ref split_owners) => {
                split_owners
                    .split_between
                    .iter()
                    .for_each(|(receiver, &rel_perc)| {
                        let abs_perc: MultipliedSafeFraction =
                            percentage_not_taken_by_royalty * rel_perc;
                        // If an account is already in the payout map, update their take.
                        if let Some(&roy_perc) = payout.get(receiver) {
                            payout.insert(receiver.clone(), abs_perc + roy_perc);
                        } else {
                            payout.insert(receiver.clone(), abs_perc);
                        }
                    });
            },
            None => {
                if let Some(&roy_perc) = payout.get(&AccountId::new_unchecked(owner_id.to_string()))
                {
                    payout.insert(
                        owner_id.to_string().parse().unwrap(),
                        MultipliedSafeFraction::from(percentage_not_taken_by_royalty) + roy_perc,
                    );
                } else {
                    payout.insert(
                        owner_id.to_string().parse().unwrap(),
                        MultipliedSafeFraction::from(percentage_not_taken_by_royalty),
                    );
                }
            },
        };
        Self { fractions: payout }
    }

    pub fn into_payout(
        self,
        balance: Balance,
    ) -> Payout {
        Payout {
            payout: self
                .fractions
                .into_iter()
                .map(|(k, v)| (k, v.multiply_balance(balance).into()))
                .collect(),
        }
    }
}

'''
'''--- mintbase-deps/src/common/payouts/royalty.rs ---
use std::collections::HashMap;
use std::convert::TryFrom;

use near_sdk::borsh::{
    self,
    BorshDeserialize,
    BorshSerialize,
};
use near_sdk::serde::{
    Deserialize,
    Serialize,
};
use near_sdk::AccountId;

use crate::common::{
    SafeFraction,
    SplitBetween,
    SplitBetweenUnparsed,
};
use crate::constants::ROYALTY_UPPER_LIMIT;

/// A representation of permanent partial ownership of a Token's revenues.
/// Percentages must add to 10,000. On purchase of the `Token`, a percentage of
/// the value of the transaction will be paid out to each account in the
/// `Royalty` mapping. `Royalty` field once set can NEVER change for this
/// `Token`, even if removed and re-added.
#[derive(PartialEq)]
#[cfg_attr(feature = "wasm", derive(BorshDeserialize, BorshSerialize))]
#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct Royalty {
    /// Mapping of addresses to relative percentages of the overall royalty percentage
    pub split_between: HashMap<near_sdk::AccountId, SafeFraction>,
    /// The overall royalty percentage taken
    pub percentage: SafeFraction,
}

/// Stable
impl Royalty {
    /// Validates all arguments. Addresses must be valid and percentages must be
    /// within accepted values. Hashmap percentages must add to 10000.
    pub fn new(royalty_args: RoyaltyArgs) -> Self {
        assert!(!royalty_args.split_between.is_empty());
        let percentage = royalty_args.percentage;
        let split_between = royalty_args.split_between;

        assert!(
            percentage <= ROYALTY_UPPER_LIMIT,
            "percentage: {} must be <= 5000",
            percentage
        );
        assert!(percentage > 0, "percentage cannot be zero");
        assert!(!split_between.is_empty(), "royalty mapping is empty");

        let mut sum: u32 = 0;
        let split_between: SplitBetween = split_between
            .into_iter()
            .map(|(addr, numerator)| {
                assert!(AccountId::try_from(addr.to_string()).is_ok());
                // assert!(env::is_valid_account_id(addr.as_bytes()));
                assert!(numerator > 0, "percentage cannot be zero");
                let sf = SafeFraction::new(numerator);
                sum += sf.numerator;
                (addr, sf)
            })
            .collect();
        assert_eq!(sum, 10_000, "fractions don't add to 10,000");

        Self {
            percentage: SafeFraction::new(percentage),
            split_between,
        }
    }
}

/// Unparsed pre-image of a Royalty struct. Used in `Store::mint_tokens`.
#[derive(Clone, Deserialize, Serialize)]
pub struct RoyaltyArgs {
    pub split_between: SplitBetweenUnparsed,
    pub percentage: u32,
}

'''
'''--- mintbase-deps/src/common/payouts/splits.rs ---
use std::collections::HashMap;

use near_sdk::borsh::{
    self,
    BorshDeserialize,
    BorshSerialize,
};
use near_sdk::{
    env,
    AccountId,
};
use serde::{
    Deserialize,
    Serialize,
};

use crate::common::SafeFraction;

pub type SplitBetweenUnparsed = HashMap<AccountId, u32>;
pub type SplitBetween = HashMap<near_sdk::AccountId, SafeFraction>;

/// A representation of the splitting of ownership of the Token. Percentages
/// must add to 1. On purchase of the `Token`, the value of the transaction
/// (minus royalty percentage) will be paid out to each account in `SplitOwners`
/// mapping. The `SplitOwner` field on the `Token` will be set to `None` after
/// each transfer of the token.
#[derive(Clone, Debug, Deserialize, Serialize)]
#[cfg_attr(feature = "wasm", derive(BorshDeserialize, BorshSerialize))]
pub struct SplitOwners {
    pub split_between: HashMap<AccountId, SafeFraction>,
}

// TODO: why defined here and then implemented inside store?
pub trait NewSplitOwner {
    fn new(arg: SplitBetweenUnparsed) -> Self;
}

impl NewSplitOwner for SplitOwners {
    fn new(split_between: HashMap<near_sdk::AccountId, u32>) -> Self {
        assert!(split_between.len() >= 2);
        // validate args
        let mut sum: u32 = 0;
        let split_between: HashMap<AccountId, SafeFraction> = split_between
            .into_iter()
            .map(|(addr, numerator)| {
                assert!(env::is_valid_account_id(addr.as_bytes()));
                let sf = SafeFraction::new(numerator);
                sum += sf.numerator;
                (addr, sf)
            })
            .collect();
        assert!(sum == 10_000, "sum not 10_000: {}", sum);

        Self { split_between }
    }
}

'''
'''--- mintbase-deps/src/common/safe_fraction.rs ---
use near_sdk::borsh::{
    self,
    BorshDeserialize,
    BorshSerialize,
};
use near_sdk::serde::{
    Deserialize,
    Serialize,
};
use near_sdk::Balance;

/// A provisional safe fraction type, borrowed and modified from:
/// https://github.com/near/core-contracts/blob/master/staking-pool/src/lib.rs#L127
/// The numerator is a value between 0 and 10,000. The denominator is
/// assumed to be 10,000.
#[derive(Debug, Clone, PartialEq, Copy)]
#[cfg_attr(feature = "wasm", derive(BorshDeserialize, BorshSerialize))]
#[derive(Deserialize, Serialize)]
pub struct SafeFraction {
    pub numerator: u32,
}

/// A SafeFraction that has been multiplied with another SafeFraction. Denominator is 10^8.
#[cfg_attr(feature = "wasm", derive(BorshDeserialize, BorshSerialize))]
#[derive(Clone, Debug, Deserialize, Serialize, Copy)]
pub struct MultipliedSafeFraction {
    pub numerator: u32,
}

impl SafeFraction {
    /// Take a u32 numerator to a 10^4 denominator.
    ///
    /// Upper limit is 10^4 so as to prevent multiplication with overflow.
    pub fn new(numerator: u32) -> Self {
        assert!(
            (0..=10000).contains(&numerator),
            "{} not between 0 and 10,000",
            numerator
        );
        SafeFraction { numerator }
    }

    /// Fractionalize a balance.
    pub fn multiply_balance(
        &self,
        value: Balance,
    ) -> Balance {
        value / 10_000u128 * self.numerator as u128
    }
}

impl std::ops::Sub for SafeFraction {
    type Output = SafeFraction;

    fn sub(
        self,
        rhs: Self,
    ) -> Self::Output {
        assert!(self.numerator >= rhs.numerator);
        Self {
            numerator: self.numerator - rhs.numerator,
        }
    }
}

impl std::ops::SubAssign for SafeFraction {
    fn sub_assign(
        &mut self,
        rhs: Self,
    ) {
        assert!(self.numerator >= rhs.numerator);
        self.numerator -= rhs.numerator;
    }
}

impl std::ops::Mul for SafeFraction {
    type Output = MultipliedSafeFraction;

    fn mul(
        self,
        rhs: Self,
    ) -> Self::Output {
        MultipliedSafeFraction {
            numerator: self.numerator * rhs.numerator,
        }
    }
}

impl From<SafeFraction> for MultipliedSafeFraction {
    fn from(f: SafeFraction) -> Self {
        MultipliedSafeFraction {
            numerator: f.numerator * 10_000,
        }
    }
}

impl std::ops::Add for MultipliedSafeFraction {
    type Output = Self;

    fn add(
        self,
        rhs: Self,
    ) -> Self::Output {
        MultipliedSafeFraction {
            numerator: self.numerator + rhs.numerator,
        }
    }
}

impl MultipliedSafeFraction {
    /// Fractionalize a balance.
    pub fn multiply_balance(
        &self,
        value: Balance,
    ) -> Balance {
        value / 100_000_000u128 * self.numerator as u128
    }
}

'''
'''--- mintbase-deps/src/common/sale_args.rs ---
use near_sdk::json_types::U128;
use near_sdk::serde::{
    Deserialize,
    Serialize,
};

/// ref: https://github.com/near-apps/nft-market/blob/main/contracts/market-simple/src/lib.rs#L54
#[derive(Serialize, Deserialize)]
pub struct SaleArgs {
    pub price: U128,
    pub autotransfer: bool,
}

'''
'''--- mintbase-deps/src/common/store_init_args.rs ---
use near_sdk::borsh::{
    self,
    BorshDeserialize,
    BorshSerialize,
};
use near_sdk::serde::{
    Deserialize,
    Serialize,
};
use near_sdk::AccountId;

use crate::common::NFTContractMetadata;

#[derive(Clone, Debug, Deserialize, Serialize)]
#[cfg_attr(feature = "wasm", derive(BorshDeserialize, BorshSerialize))]
pub struct StoreInitArgs {
    pub metadata: NFTContractMetadata,
    pub owner_id: AccountId,
}

'''
'''--- mintbase-deps/src/common/store_metadata.rs ---
use near_sdk::borsh::{
    self,
    BorshDeserialize,
    BorshSerialize,
};
use near_sdk::json_types::Base64VecU8;
use near_sdk::serde::{
    Deserialize,
    Serialize,
};

#[derive(Clone, Debug, Deserialize, Serialize)]
#[cfg_attr(feature = "wasm", derive(BorshDeserialize, BorshSerialize))]
pub struct NFTContractMetadata {
    /// a version like "nft-1.0.0"
    pub spec: String,
    /// Subaccount of this `Store`. `Factory` is the super-account.
    pub name: String,
    /// Symbol of the Store. Up to 6 chars.
    pub symbol: String,
    /// a small image associated with this `Store`.
    pub icon: Option<String>,
    /// Centralized gateway known to have reliable access to decentralized storage
    /// assets referenced by `reference` or `media` URLs
    pub base_uri: Option<String>,
    /// URL to a JSON file with more info
    pub reference: Option<String>,
    /// Base64-encoded sha256 hash of the JSON file pointed at by the reference
    /// field. Required if `reference` is included.
    pub reference_hash: Option<Base64VecU8>,
}

impl Default for NFTContractMetadata {
    fn default() -> Self {
        Self {
            spec: "".to_string(),
            name: "".to_string(),
            symbol: "".to_string(),
            icon: None,
            base_uri: None,
            reference: None,
            reference_hash: None,
        }
    }
}

/// ref:
/// https://github.com/near/NEPs/blob/master/specs/Standards/NonFungibleToken/Metadata.md
pub trait NonFungibleContractMetadata {
    /// Get the metadata for this `Store`.
    fn nft_metadata(&self) -> &NFTContractMetadata;
}

'''
'''--- mintbase-deps/src/common/time.rs ---
use near_sdk::borsh::{
    self,
    BorshDeserialize,
    BorshSerialize,
};
use near_sdk::env;
use serde::{
    Deserialize,
    Serialize,
};

/// This enum used to support other time denominations, which were dropped
/// for simplicity.
#[derive(Debug, Serialize, Deserialize, Clone)]
#[cfg_attr(feature = "wasm", derive(BorshSerialize, BorshDeserialize,))]
pub enum TimeUnit {
    Hours(u64),
}

#[derive(Debug, Serialize, Deserialize, Clone)]
#[cfg_attr(feature = "wasm", derive(BorshDeserialize, BorshSerialize))]
pub struct NearTime(pub u64);

impl NearTime {
    pub fn is_before_timeout(&self) -> bool {
        now().0 < self.0
    }

    pub fn new(span: TimeUnit) -> Self {
        match span {
            TimeUnit::Hours(n) => Self::now_plus_n_hours(n),
        }
    }

    fn now_plus_n_hours(n: u64) -> Self {
        assert!(n > 0);
        assert!(
            n < 70_000,
            "maximum argument for hours is 70,000 (~8 years)"
        );
        let now = env::block_timestamp();
        let hour_ns = 10u64.pow(9) * 3600;
        Self(now + n * hour_ns)
    }
}

/// An alias for env::block_timestamp. Note that block_timestamp returns
/// the number of **nanoseconds since Jan 1 1970 UTC**. Note that each day
/// is 8.64*10^14 nanoseconds.
pub fn now() -> NearTime {
    NearTime(env::block_timestamp())
}

'''
'''--- mintbase-deps/src/common/token_key.rs ---
use std::fmt;

use near_sdk::borsh::{
    self,
    BorshDeserialize,
    BorshSerialize,
};
use near_sdk::serde::{
    Deserialize,
    Serialize,
};
use near_sdk::AccountId;

use crate::utils::split_colon;

#[derive(Clone, Debug, Deserialize, Serialize)]
#[cfg_attr(feature = "wasm", derive(BorshDeserialize, BorshSerialize))]
pub struct TokenKey {
    pub token_id: u64,
    pub account_id: String,
}

impl TokenKey {
    pub fn new(
        n: u64,
        account_id: AccountId,
    ) -> Self {
        Self {
            token_id: n,
            account_id: account_id.into(),
        }
    }

    pub fn split(self) -> (u64, String) {
        (self.token_id, self.account_id)
    }
}

impl fmt::Display for TokenKey {
    fn fmt(
        &self,
        f: &mut fmt::Formatter,
    ) -> fmt::Result {
        write!(f, "{}:{}", self.token_id, self.account_id)
    }
}

impl From<String> for TokenKey {
    fn from(s: String) -> Self {
        let (id, account_id) = split_colon(&s);
        Self {
            token_id: id.parse::<u64>().unwrap(),
            account_id: account_id.to_string(),
        }
    }
}

'''
'''--- mintbase-deps/src/common/token_listing.rs ---
use std::convert::TryInto;

use near_sdk::borsh::{
    self,
    BorshDeserialize,
    BorshSerialize,
};
use near_sdk::json_types::U128;
use near_sdk::AccountId;
use serde::{
    Deserialize,
    Serialize,
};

use crate::common::{
    TokenKey,
    TokenOffer,
};

/// A Token for sale on the Marketplace.
#[derive(Deserialize, Serialize, Debug)]
#[cfg_attr(feature = "wasm", derive(BorshDeserialize, BorshSerialize))]
pub struct TokenListing {
    /// Id of this `Token`.
    pub id: u64,
    /// Owner of this `Token`.
    pub owner_id: AccountId,
    /// `Store` that originated this `Token`.
    pub store_id: AccountId,
    /// If `autotransfer` is enabled, the Token will automatically be
    /// transferred to an Offerer if their `Offer::price` is greater than the
    /// `asking_price`. Note that enabling `autotransfer` does not
    /// retroactively trigger on the presently held `current_offer`
    pub autotransfer: bool,
    /// The price set by the owner of this Token.
    pub asking_price: U128,
    /// The `approval_id` of the Token allows the Marketplace to transfer the
    /// Token, if purchased. The `approval_id` is also used to generate
    /// unique identifiers for Token-listings.
    pub approval_id: u64,
    /// The current `Offer` for this listing. This `Offer` may have timed
    /// out; if the `Marketplace::min_offer_hours` has transpired, the
    /// `Offer` may be withdrawn by the account in `Offer::from`.
    pub current_offer: Option<TokenOffer>,
    /// The number of `Offer`s that have been made on this listing. Used to
    /// generate Offer `id`s.
    pub num_offers: u64,
    /// When the transfer process is initiated, the token is locked, and no
    /// further changes may be made on the token.
    pub locked: bool,
}

impl TokenListing {
    /// Check that the given `account_id` is valid before instantiating a
    /// `Token`. Note that all input validation for `Token` functions should
    /// be performed at the `Marketplace` level.
    pub fn new(
        owner_id: AccountId,
        store_id: AccountId,
        id: u64,
        approval_id: u64,
        autotransfer: bool,
        asking_price: U128,
    ) -> Self {
        Self {
            id,
            owner_id,
            store_id,
            approval_id,
            autotransfer,
            asking_price,
            current_offer: None,
            num_offers: 0,
            locked: false,
        }
    }

    /// Unique identifier of the Token.
    pub fn get_token_key(&self) -> TokenKey {
        TokenKey::new(self.id, self.store_id.to_string().try_into().unwrap())
    }

    /// Unique identifier of the Token, which is also unique across
    /// relistings of the Token.
    pub fn get_list_id(&self) -> String {
        format!("{}:{}:{}", self.id, self.approval_id, self.store_id)
    }

    pub fn assert_not_locked(&self) {
        assert!(!self.locked);
    }
}

'''
'''--- mintbase-deps/src/common/token_metadata.rs ---
use near_sdk::borsh::{
    self,
    BorshDeserialize,
    BorshSerialize,
};
use near_sdk::json_types::Base64VecU8;
use near_sdk::serde::{
    Deserialize,
    Serialize,
};

// NON-COMPLIANT https://github.com/near/NEPs/blob/master/specs/Standards/NonFungibleToken/Metadata.md
/// ref:
/// https://github.com/near/NEPs/blob/master/specs/Standards/NonFungibleToken/Metadata.md
#[derive(Clone, Debug, Deserialize, Serialize)]
#[cfg_attr(feature = "wasm", derive(BorshDeserialize, BorshSerialize))]
pub struct TokenMetadata {
    /// the Title for this token. ex. "Arch Nemesis: Mail Carrier" or "Parcel 5055"
    pub title: Option<String>,
    /// free-form description of this token.
    pub description: Option<String>,
    /// URL to associated media, preferably to decentralized, content-addressed storage
    pub media: Option<String>,
    /// Base64-encoded sha256 hash of content referenced by the `media` field.
    /// Required if `media` is included.
    pub media_hash: Option<Base64VecU8>,
    /// number of copies of this set of metadata in existence when token was minted.
    pub copies: Option<u16>,
    /// ISO 8601 datetime when token expires.
    pub expires_at: Option<String>,
    /// ISO 8601 datetime when token starts being valid.
    pub starts_at: Option<String>,
    /// When token was last updated, Unix epoch in milliseconds
    pub extra: Option<String>,
    /// URL to an off-chain JSON file with more info. The Mintbase Indexer refers
    /// to this field as `thing_id` or sometimes, `meta_id`.
    pub reference: Option<String>,
    /// Base64-encoded sha256 hash of JSON from reference field. Required if
    /// `reference` is included.
    pub reference_hash: Option<Base64VecU8>,
}

impl TokenMetadata {
    /// Get the metadata and its size in bytes.
    pub fn from_with_size(
        args: TokenMetadata,
        copies: u64,
    ) -> (Self, u64) {
        if args.media_hash.is_some() {
            assert!(args.media.is_some());
        }

        if args.reference_hash.is_some() {
            assert!(args.reference.is_some());
        }

        let metadata = Self {
            title: args.title,
            description: args.description,
            media: args.media,
            media_hash: args.media_hash,
            copies: (copies as u16).into(),
            expires_at: args.expires_at,
            starts_at: args.starts_at,
            extra: args.extra,
            reference: args.reference,
            reference_hash: args.reference_hash,
        };

        let size = serde_json::to_vec(&metadata).unwrap().len();

        // let size = metadata.try_to_vec().unwrap().len();

        (metadata, size as u64)
    }
}

// NON-COMPLIANT https://github.com/near/NEPs/blob/master/specs/Standards/NonFungibleToken/Metadata.md
/// ref:
/// https://github.com/near/NEPs/blob/master/specs/Standards/NonFungibleToken/Metadata.md
#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct TokenMetadataCompliant {
    /// the Title for this token. ex. "Arch Nemesis: Mail Carrier" or "Parcel 5055"
    pub title: Option<String>,
    /// free-form description of this token.
    pub description: Option<String>,
    /// URL to associated media, preferably to decentralized, content-addressed storage
    pub media: Option<String>,
    /// Base64-encoded sha256 hash of content referenced by the `media` field.
    /// Required if `media` is included.
    pub media_hash: Option<Base64VecU8>,
    /// number of copies of this set of metadata in existence when token was minted.
    pub copies: Option<u16>,
    /// When token was issued or minted, Unix epoch in milliseconds
    pub issued_at: Option<String>,
    /// ISO 8601 datetime when token expires.
    pub expires_at: Option<String>,
    /// ISO 8601 datetime when token starts being valid.
    pub starts_at: Option<String>,
    /// When token was last updated, Unix epoch in milliseconds
    pub updated_at: Option<String>,
    /// Brief description of what this thing is. Used by the mintbase indexer as "memo".
    pub extra: Option<String>,
    /// URL to an off-chain JSON file with more info. The Mintbase Indexer refers
    /// to this field as `thing_id` or sometimes, `meta_id`.
    pub reference: Option<String>,
    /// Base64-encoded sha256 hash of JSON from reference field. Required if
    /// `reference` is included.
    pub reference_hash: Option<Base64VecU8>,
}

'''
'''--- mintbase-deps/src/common/token_offer.rs ---
use near_sdk::borsh::{
    self,
    BorshDeserialize,
    BorshSerialize,
};
use near_sdk::{
    env,
    AccountId,
};
use serde::{
    Deserialize,
    Serialize,
};

use crate::common::time::{
    now,
    NearTime,
    TimeUnit,
};

/// Type representing an offer for a `Token` the marketplace
#[derive(Serialize, Deserialize, Clone, Debug)]
#[cfg_attr(feature = "wasm", derive(BorshDeserialize, BorshSerialize))]
pub struct TokenOffer {
    /// The id of this `Offer` is the num of the previous `Offer` + 1. Generated
    /// from the field `Token::num_offers`.
    pub id: u64,
    /// The price the Offerer has posted.
    pub price: u128,
    /// The account who originated the `Offer`.
    pub from: AccountId,
    /// When the `Offer` was made.
    pub timestamp: NearTime,
    /// When the `Offer` will expire.
    pub timeout: NearTime,
}

impl TokenOffer {
    /// Timeout is in days.
    pub fn new(
        price: u128,
        timeout: TimeUnit,
        id: u64,
    ) -> Self {
        let timeout = NearTime::new(timeout);
        Self {
            id,
            price,
            from: env::predecessor_account_id(),
            timestamp: now(),
            timeout,
        }
    }

    /// An offer is active if it has yet to timeout.
    pub fn is_active(&self) -> bool {
        self.timeout.is_before_timeout()
    }
}

'''
'''--- mintbase-deps/src/constants.rs ---
#[cfg(any(feature = "store-wasm", feature = "market-wasm"))]
use near_sdk::borsh::{
    self,
    BorshDeserialize,
    BorshSerialize,
};
use near_sdk::Balance;

// #[cfg(feature = "all")]
// use near_sdk::serde::{
//     Deserialize,
//     Serialize,
// };

/// Current price for one byte of on-chain storage, denominated in yoctoNEAR.
pub const YOCTO_PER_BYTE: Balance = 10_000_000_000_000_000_000;

/// One yoctoNEAR, commonly required to verify that a method was called with a
/// full-access key.
pub const ONE_YOCTO: Balance = 1;

/// The argument for non-payable cross contract calls.
/// ref: https://github.com/near/core-contracts/blob/master/staking-pool/src/lib.rs#L26
pub const NO_DEPOSIT: Balance = 0;

/// This module holds gas costs for common operations
pub mod gas {
    use near_sdk::Gas;

    const fn tgas(n: u64) -> Gas {
        Gas(n * 10u64.pow(12))
    }

    /// Gas requirements for resolving a payout struct.
    pub const PAYOUT_RESOLVE: Gas = tgas(30);

    /// Gas requirements for transferring an NFT and obtaining the payout.
    pub const NFT_TRANSFER_PAYOUT: Gas = tgas(15);

    /// Gas requirements for creating a store.
    pub const CREATE_STORE: Gas = tgas(65 + 5);

    /// Gas requirements for
    pub const ON_CREATE_CALLBACK: Gas = tgas(10);

    /// Gas requirements for
    pub const NFT_BATCH_APPROVE: Gas = tgas(100);

    // ref: https://github.com/near-apps/nft-market/blob/main/contracts/nft-simple/src/nft_core.rs
    /// Gas requirements for resolving a `nft_transfer_call` XCC
    pub const RESOLVE_TRANSFER: Gas = tgas(10);

    /// Gas requirements for `nft_transfer_call`
    pub const NFT_TRANSFER_CALL: Gas = tgas(35);

    /// Gas requirements for `nft_transfer_call`
    pub const NFT_ON_APPROVE: Gas = tgas(25);
}

pub mod storage_bytes {
    use near_sdk::StorageUsage;
    /// Storage bytes that a raw store occupies, about 499 KB.
    pub const STORE: StorageUsage = 550_000;

    /// Storage bytes for a maximum size token without any metadata and without
    /// any royalties.
    pub const TOKEN: StorageUsage = 360;

    /// Storage bytes for some common components:
    ///
    /// - a single royalty
    /// - a single approval
    /// - an entry in the `tokens_per_account` map
    /// - an entry in the `composeables` map
    pub const COMMON: StorageUsage = 80;
}

pub mod storage_stake {
    use near_sdk::Balance;

    use super::YOCTO_PER_BYTE;

    const fn bytes_to_stake(bytes: u64) -> Balance {
        (bytes as Balance) * YOCTO_PER_BYTE
    }

    /// Storage stake required to deploy a store.
    pub const STORE: Balance = bytes_to_stake(super::storage_bytes::STORE);

    /// Storage stake required to hold a maximum size token without any metadata
    /// and without any royalties.
    pub const TOKEN: Balance = bytes_to_stake(super::storage_bytes::TOKEN);

    /// Storage stake required for some common components:
    ///
    /// - adding a single royalty
    /// - adding a single approval
    /// - adding a new entry to the `tokens_per_account` map
    /// - adding a new entry to the `composeables` map
    pub const COMMON: Balance = bytes_to_stake(super::storage_bytes::COMMON);

    /// Require 0.1 NEAR of storage stake to remain unused.
    pub const CUSHION: Balance = 10u128.pow(23);
}

// /// The amount of Storage in bytes consumed by a maximal sized Token with NO
// /// metadata and NO Royalty field. Rounded to 360 for extra cushion.
// pub const LIST_STORAGE: near_sdk::StorageUsage = 360;

// storage
// pub const STORE_STORAGE: u64 = 550_000; // 499kB

/// Royalty upper limit is 50%.
pub const ROYALTY_UPPER_LIMIT: u32 = 5000;

/// Maximum payout (royalties + splits) participants to process
pub const MAX_LEN_PAYOUT: u32 = 50;

// pub const MINIMUM_CUSHION: near_sdk::Balance = 5 * 10u128.pow(23);

//?

// /// The amount of Storage in bytes consumed by a maximal sized Token with NO
// /// metadata and NO Royalty field. Rounded to 360 for extra cushion.
// pub const TOKEN_STORAGE: near_sdk::StorageUsage = 360;

// /// The storage in bytes (with a little padding) for:
// /// - a single royalty
// /// - a single approval
// /// - adding a new entry to the `tokens_per_account` map
// /// - adding a new entry to the `composeables` map
// pub const COMMON_STORAGE: near_sdk::StorageUsage = 80;

// // ref: https://github.com/near-apps/nft-market/blob/main/contracts/nft-simple/src/nft_core.rs
// pub const GAS_RESOLVE_TRANSFER: u64 = 10_000_000_000_000;
// pub const GAS_NFT_TRANSFER_CALL: u64 = 25_000_000_000_000 + GAS_RESOLVE_TRANSFER;

// #[derive(Clone, Debug)]
// #[cfg_attr(feature = "all", derive(Deserialize, Serialize))]
#[cfg_attr(feature = "store-wasm", derive(BorshDeserialize, BorshSerialize))]
pub struct StorageCosts {
    /// The Near-denominated price-per-byte of storage. As of April 2021, the
    /// price per bytes is set by default to 10^19, but this may change in the
    /// future, thus this future-proofing field.
    pub storage_price_per_byte: u128,
    /// 80 bytes as a Near price. Used for:
    /// - a single royalty
    /// - a single approval
    /// - adding a new entry to the `tokens_per_account` map
    /// - adding a new entry to the `composeables` map
    pub common: u128,
    pub token: u128,
}

impl StorageCosts {
    pub fn new(storage_price_per_byte: u128) -> Self {
        Self {
            storage_price_per_byte,
            // common: storage_price_per_byte * 80_u64 as u128,
            common: storage_stake::COMMON,
            // token: storage_price_per_byte * 360_u64 as u128,
            token: storage_stake::TOKEN,
        }
    }
}

#[cfg_attr(feature = "market-wasm", derive(BorshDeserialize, BorshSerialize))]
pub struct StorageCostsMarket {
    /// The Near-denominated price-per-byte of storage. As of April 2021, the
    /// price per bytes is set by default to 10^19, but this may change in the
    /// future, thus this future-proofing field.
    pub storage_price_per_byte: u128,
    pub list: u128,
}

impl StorageCostsMarket {
    pub fn new(storage_price_per_byte: u128) -> Self {
        Self {
            storage_price_per_byte,
            // list: storage_price_per_byte * LIST_STORAGE as u128,
            list: storage_stake::TOKEN,
        }
    }
}

// TODO: StorageCosts for Factory?

'''
'''--- mintbase-deps/src/interfaces.rs ---
// this is required because of the `ext_contract` macro
#[cfg(feature = "market-wasm")]
pub use market_interfaces::*;

/// Interfaces that we need the market to be aware of
#[cfg(feature = "market-wasm")]
#[allow(clippy::too_many_arguments)]
mod market_interfaces {
    use near_sdk::json_types::{
        U128,
        U64,
    };
    use near_sdk::{
        self,
        ext_contract,
    };

    use crate::common::TokenListing;

    #[ext_contract(ext_self)]
    pub trait ExtSelf {
        fn resolve_nft_payout(
            &mut self,
            token_key: String,
            token: TokenListing,
            others_keep: U128,
        ) -> Promise;
    }

    #[ext_contract(nft_contract)]
    /// Impl of NEP-171. Note that the impl makes the assumption that `TokenId` has
    /// type `String`, where this contract internally uses `u64`, which is more
    /// efficient. ref:
    /// https://github.com/near/NEPs/blob/master/specs/Standards/NonFungibleToken/Core.md
    pub trait NFTContract {
        /// Transfer the token and get the payout data.
        fn nft_transfer_payout(
            &mut self,
            receiver_id: AccountId,
            token_id: U64,
            approval_id: u64,
            balance: U128,
            max_len_payout: u32,
        ) -> Promise;
    }
}

#[cfg(feature = "store-wasm")]
pub use store_interfaces::*;

/// Interfaces that we need the store to be aware of
#[cfg(feature = "store-wasm")]
#[allow(clippy::too_many_arguments)]
mod store_interfaces {
    use near_sdk::json_types::U64;
    use near_sdk::{
        self,
        ext_contract,
    };

    /// Non-Fungible Token Approval NEP 178. Ref:
    /// https://github.com/near/NEPs/blobß/master/specs/Standards/NonFungibleToken/ApprovalManagement.md
    #[ext_contract(ext_on_approve)]
    pub trait NonFungibleOnApprove {
        /// Approved Account Contract Interface If a contract that gets approved to
        /// transfer NFTs wants to, it can implement nft_on_approve to update its own
        /// state when granted approval for a token: Respond to notification that
        /// contract has been granted approval for a token.
        ///
        /// Notes
        /// * Contract knows the token contract ID from `predecessor_account_id`
        ///
        /// Arguments:
        /// * `token_id`: the token to which this contract has been granted approval
        /// * `owner_id`: the owner of the token
        /// * `approval_id`: the approval ID stored by NFT contract for this approval.
        ///   Expected to be a number within the 2^53 limit representable by JSON.
        /// * `msg`: specifies information needed by the approved contract in order to
        ///    handle the approval. Can indicate both a fn to call and the
        ///    parameters to pass to that fn.
        fn nft_on_approve(
            &mut self,
            token_id: U64,
            owner_id: AccountId,
            approval_id: u64,
            msg: String,
        );
        fn nft_on_batch_approve(
            &mut self,
            tokens: Vec<U64>,
            approvals: Vec<U64>,
            owner_id: AccountId,
            msg: String,
        );
    }

    /// Impl of NEP-171 resolve transfer. ref:
    /// https://github.com/near/NEPs/blob/master/specs/Standards/NonFungibleToken/Core.md
    #[ext_contract(ext_on_transfer)]
    pub trait NonFungibleOnTransfer {
        /// Take some action after receiving a non-fungible token.
        ///
        /// Requirements: * Contract MUST restrict calls to this function to a set of
        /// allow-listed NFT contracts.
        ///
        /// Arguments:
        /// * `sender_id`: the sender of `nft_transfer_call`.
        /// * `previous_owner_id`: the account that owned the NFT prior to it being
        ///   transfered to this contract, which can differ from `sender_id` if using
        ///   Approval Management extension.
        /// * `token_id`: the `token_id` argument given to `nft_transfer_call`
        /// * `msg`: information necessary for this contract to know how to process the
        ///   request. This may include method names and/or arguments.
        ///
        /// Returns true if token should be returned to `sender_id`.
        fn nft_on_transfer(
            &mut self,
            sender_id: AccountId,
            previous_owner_id: AccountId,
            token_id: U64,
            msg: String,
        ) -> Promise;
    }
}

#[cfg(feature = "factory-wasm")]
pub use factory_interfaces::*;

/// Interfaces that we need the factory to be aware of
#[cfg(feature = "factory-wasm")]
#[allow(clippy::too_many_arguments)]
mod factory_interfaces {
    use near_sdk::json_types::U128;
    use near_sdk::{
        self,
        ext_contract,
    };

    use crate::common::NFTContractMetadata;

    #[ext_contract(factory_self)]
    pub trait OnCreateCallback {
        fn on_create(
            &mut self,
            store_creator_id: AccountId,
            metadata: NFTContractMetadata,
            owner_id: AccountId,
            store_account_id: AccountId,
            attached_deposit: U128,
        );
    }
}

// TODO: Is this used anywhere? -> nope
// --------------------------- nft core interface --------------------------- //

/// Impl of NEP-171. Note that the impl makes the assumption that `TokenId` has
/// type `String`, where this contract internally uses `u64`, which is more
/// efficient. ref:
/// https://github.com/near/NEPs/blob/master/specs/Standards/NonFungibleToken/Core.md
pub trait NonFungibleContractCore {
    /// Simple transfer. Transfer a given `token_id` from current owner to
    /// `receiver_id`.
    ///
    /// Requirements
    /// * Caller of the method must attach a deposit of 1 yoctoⓃ for security purposes
    /// * Contract MUST panic if called by someone other than token owner or,
    ///   if using Approval Management, one of the approved accounts
    /// * `approval_id` is for use with Approval Management extension, see
    ///   that document for full explanation.
    /// * If using Approval Management, contract MUST nullify approved accounts on
    ///   successful transfer.
    ///
    /// Arguments:
    /// * `receiver_id`: the valid NEAR account receiving the token
    /// * `token_id`: the token to transfer
    /// * `approval_id`: expected approval ID. A number smaller than
    ///    2^53, and therefore representable as JSON. See Approval Management
    ///    standard for full explanation.
    /// * `memo` (optional): for use cases that may benefit from indexing or
    ///    providing information for a transfer
    //#[payable]
    fn nft_transfer(
        &mut self,
        receiver_id: near_sdk::AccountId,
        token_id: near_sdk::json_types::U64,
        approval_id: Option<near_sdk::json_types::U64>,
        memo: Option<String>,
    );

    /// Returns `true` if the token was transferred from the sender's account.
    ///
    /// Transfer token and call a method on a receiver contract. A successful
    /// workflow will end in a success execution outcome to the callback on the NFT
    /// contract at the method `nft_resolve_transfer`.
    ///
    /// You can think of this as being similar to attaching native NEAR tokens to a
    /// function call. It allows you to attach any Non-Fungible Token in a call to a
    /// receiver contract.
    ///
    /// Requirements:
    /// * Caller of the method must attach a deposit of 1 yoctoⓃ for security
    ///   purposes
    /// * Contract MUST panic if called by someone other than token owner or,
    ///   if using Approval Management, one of the approved accounts
    /// * The receiving contract must implement `ft_on_transfer` according to the
    ///   standard. If it does not, FT contract's `ft_resolve_transfer` MUST deal
    ///   with the resulting failed cross-contract call and roll back the transfer.
    /// * Contract MUST implement the behavior described in `ft_resolve_transfer`
    /// * `approval_id` is for use with Approval Management extension, see
    ///   that document for full explanation.
    /// * If using Approval Management, contract MUST nullify approved accounts on
    ///   successful transfer.
    ///
    /// Arguments:
    /// * `receiver_id`: the valid NEAR account receiving the token.
    /// * `token_id`: the token to send.
    /// * `approval_id`: expected approval ID. A number smaller than
    ///    2^53, and therefore representable as JSON. See Approval Management
    ///    standard for full explanation.
    /// * `memo` (optional): for use cases that may benefit from indexing or
    ///    providing information for a transfer.
    /// * `msg`: specifies information needed by the receiving contract in
    ///    order to properly handle the transfer. Can indicate both a function to
    ///    call and the parameters to pass to that function.
    //#[payable]
    fn nft_transfer_call(
        &mut self,
        receiver_id: near_sdk::AccountId,
        token_id: near_sdk::json_types::U64,
        approval_id: Option<near_sdk::json_types::U64>,
        memo: Option<String>,
        msg: String,
    ) -> near_sdk::Promise;

    /// Returns the token with the given `token_id` or `None` if no such token.
    fn nft_token(
        &self,
        token_id: near_sdk::json_types::U64,
    ) -> Option<crate::token::Token>;
}

'''
'''--- mintbase-deps/src/lib.rs ---
pub mod common;
pub mod constants;
pub mod interfaces;
pub mod logging;
pub mod token;
pub mod utils;

// ----------------- re-exports for consistent dependencies ----------------- //
pub use near_sdk::{
    self,
    serde,
    serde_json,
};

// TODO: move module resolution to indexer
#[cfg(feature = "all")]
pub use crate::logging::{
    NearJsonEvent,
    Nep171Event,
    Nep171EventLog,
    NftApproveLog,
    NftBurnLog,
    NftComposeLog,
    NftListLog,
    NftLoanSetLog,
    NftMarketLog,
    NftMintLog,
    NftMintLogMemo,
    NftOfferLog2,
    NftOptionStringLog,
    NftRevokeLog,
    NftSaleLog,
    NftSetSplitOwnerLog,
    NftStoreCreateLog,
    NftStringLog,
    NftTransferLog,
    NftUpdateListLog,
    NftUpdateOfferLog,
};

'''
'''--- mintbase-deps/src/logging.rs ---
use std::collections::HashMap;
use std::convert::TryFrom;
use std::str::FromStr;

use near_sdk::json_types::{
    U128,
    U64,
};
use near_sdk::serde::{
    Deserialize,
    Serialize,
};
use near_sdk::{
    env,
    AccountId,
};

use crate::common::{
    NFTContractMetadata,
    Royalty,
    SplitOwners,
    TokenOffer,
};

// ----------------------------- various types ------------------------------ //

#[derive(Serialize, Deserialize, Debug)]
#[serde(tag = "event", content = "data")]
#[serde(rename_all = "snake_case")]
pub enum Nep171EventLog {
    NftMint(Vec<NftMintLog>),
    NftBurn(Vec<NftBurnLog>),
    NftTransfer(Vec<NftTransferLog>),
}

#[derive(Serialize, Deserialize, Debug)]
pub struct Nep171Event {
    pub standard: String,
    pub version: String,
    #[serde(flatten)]
    pub event_kind: Nep171EventLog,
}

impl Nep171Event {
    pub fn near_json_event(&self) -> String {
        let json = serde_json::to_string(&self).unwrap();
        format!("EVENT_JSON: {}", &json)
    }
}

#[derive(Deserialize, Serialize, Clone, Debug)]
#[serde(untagged)]
pub enum NftEvent {
    NftCreateStore(NftStoreCreateLog),
    NftStringEvent(NftStringLog),
    NftCreate(Vec<NftMintLog>),
    NftDelete(Vec<NftBurnLog>),
    NftCreateApproval(Vec<NftApproveLog>),
    NftRevoke(NftRevokeLog),
    NftUpdate(Vec<NftTransferLog>),
    NftUpdateSplitOwner(NftSetSplitOwnerLog),
    NftUpdateLoan(NftLoanSetLog),
    NftCreateCompose(NftComposeLog),
    NftDeleteCompose(NftUncomposeLog),
    NftOnCreateCompose(NftOnComposeLog),
    NftOnDeleteCompose(NftOnUncomposeLog),
    NftOnMove(NftOnMoveLog),
    NftMoved(NftMovedLog),
    NftCreateList(Vec<NftListLog>),
    NftCreateOffer(NftOfferLog),
    NftUpdateOffer(NftUpdateOfferLog),
    NftCreateSale(NftSaleLog),
    NftUpdateMarket(NftMarketLog),
    NftUpdateIcon(NftOptionStringLog),
    NftUpdateList(NftUpdateListLog),
}

impl TryFrom<&str> for NftEvent {
    type Error = serde_json::error::Error;

    fn try_from(s: &str) -> Result<Self, Self::Error> {
        // ne.map_err(|x|NftEventError(x.to_string()))
        serde_json::from_str::<NftEvent>(s)
    }
}

// ------------------ general event according to standard ------------------- //
#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct NearJsonEvent {
    pub standard: String,
    pub version: String,
    pub event: String,
    pub data: String,
}

impl FromStr for NearJsonEvent {
    type Err = serde_json::error::Error;

    fn from_str(_s: &str) -> Result<Self, Self::Err> {
        todo!()
    }
}

impl From<NftEvent> for NearJsonEvent {
    fn from(ne: NftEvent) -> Self {
        let json = serde_json::to_string(&ne).unwrap();
        Self {
            standard: "nep171".to_string(),
            version: "1.0.0".to_string(),
            event: "".to_string(),
            data: json,
        }
    }
}

impl NearJsonEvent {
    pub fn near_json_event(&self) -> String {
        let json = serde_json::to_string(&self).unwrap();
        format!("EVENT_JSON: {}", &json)
    }
}

// ------------------------------- log types -------------------------------- //

#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct NftStoreCreateLog {
    pub contract_metadata: NFTContractMetadata,
    pub owner_id: String,
    pub id: String,
}

impl Default for NftStoreCreateLog {
    fn default() -> Self {
        Self {
            contract_metadata: Default::default(),
            owner_id: "".to_string(),
            id: "".to_string(),
        }
    }
}

#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct NftStringLog {
    pub data: String,
}

#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct NftOptionStringLog {
    pub data: Option<String>,
}

#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct NftMintLog {
    pub owner_id: String,
    pub token_ids: Vec<String>,
    pub memo: Option<String>,
}

#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct NftBurnLog {
    pub owner_id: String,
    pub authorized_id: Option<String>,
    pub token_ids: Vec<String>,
    pub memo: Option<String>,
}

#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct NftApproveLog {
    pub token_id: u64,
    pub approval_id: u64,
    pub account_id: String,
}

#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct NftRevokeLog {
    pub token_id: u64,
    pub account_id: String,
}

#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct NftTransferLog {
    pub authorized_id: Option<String>,
    pub old_owner_id: String,
    pub new_owner_id: String,
    pub token_ids: Vec<String>,
    pub memo: Option<String>,
}

#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct NftSetSplitOwnerLog {
    pub split_owners: SplitOwners,
    pub token_ids: Vec<String>,
}

#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct NftLoanSetLog {
    pub account_id: Option<String>,
    pub token_id: u64,
}

#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct NftComposeLog {
    pub token_ids: Vec<U64>,
    /// direct parent of token_ids
    pub parent: String,
    /// - "t": owned directly by a token on this contract
    /// - "k": owned directly by a token on another contract
    pub ttype: String,
    /// local root of chain of token_ids
    pub lroot: Option<u64>,
    /// holder of local root
    pub holder: String,
    pub depth: u8,
}

#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct NftUncomposeLog {
    pub token_ids: Vec<U64>,
    pub holder: String,
}

#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct NftOnComposeLog {
    pub predecessor: String,
    pub token_id: U64,
    /// direct parent of token_ids
    pub cross_child_id: U64,
    /// local root of chain of token_ids
    pub lroot: Option<u64>,
    /// holder of local root
    pub holder: String,
    pub depth: u8,
}

#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct NftOnUncomposeLog {
    pub token_id: U64,
    pub holder: String,
    pub child_key: String,
}

#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct NftMovedLog {
    pub token_id: U64,
    pub contract_id: String,
}

#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct NftOnMoveLog {
    pub token_id: U64,
    pub origin_key: String,
}

#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct NftListLog {
    pub list_id: String,
    pub price: String,
    pub token_key: String,
    pub owner_id: String,
    pub autotransfer: bool,
    pub approval_id: String,
    pub token_id: String,
    pub store_id: String,
}

#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct NftMintLogMemo {
    pub royalty: Option<Royalty>,
    pub split_owners: Option<SplitOwners>,
    pub meta_id: Option<String>,
    pub meta_extra: Option<String>,
    pub minter: String,
}

#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct NftUpdateListLog {
    pub auto_transfer: Option<bool>,
    pub price: Option<String>,
    pub list_id: Option<String>,
}

#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct NftOfferLog2 {
    pub offer: TokenOffer,
    pub list_id: String,
    pub token_key: String,
    pub offer_num: u64,
}

#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct NftOfferLog {
    pub price: String,
    pub from: String,
    pub timeout: String,
    pub list_id: String,
    pub token_key: String,
    pub offer_num: u64,
}

#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct NftUpdateOfferLog {
    pub list_id: String,
    pub offer_num: u64,
}

#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct NftSaleLog {
    pub list_id: String,
    pub offer_num: u64,
    pub token_key: String,
    pub payout: HashMap<AccountId, U128>,
}

#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct NftMarketLog {
    pub account_id: String,
    pub state: bool,
}

// --------------------------- logging functions ---------------------------- //

pub fn log_grant_minter(account_id: &AccountId) {
    let log = NftStringLog {
        data: account_id.to_string(),
    };
    let event = NearJsonEvent {
        standard: "nep171".to_string(),
        version: "1.0.0".to_string(),
        event: "nft_grant_minter".to_string(),
        data: serde_json::to_string(&log).unwrap(),
    };
    env::log_str(event.near_json_event().as_str());
}

pub fn log_revoke_minter(account_id: &AccountId) {
    let log = NftStringLog {
        data: account_id.to_string(),
    };
    let event = NearJsonEvent {
        standard: "nep171".to_string(),
        version: "1.0.0".to_string(),
        event: "nft_revoke_minter".to_string(),
        data: serde_json::to_string(&log).unwrap(),
    };
    env::log_str(event.near_json_event().as_str());
}

pub fn log_transfer_store(to: &AccountId) {
    let log = NftStringLog {
        data: to.to_string(),
    };
    let event = NearJsonEvent {
        standard: "nep171".to_string(),
        version: "1.0.0".to_string(),
        event: "nft_transfer_store".to_string(),
        data: serde_json::to_string(&log).unwrap(),
    };
    env::log_str(event.near_json_event().as_str());
}

pub fn log_set_icon_base64(base64: &Option<String>) {
    let log = NftOptionStringLog {
        data: base64.clone(),
    };
    let event = NearJsonEvent {
        standard: "nep171".to_string(),
        version: "1.0.0".to_string(),
        event: "nft_set_icon_base64".to_string(),
        data: serde_json::to_string(&log).unwrap(),
    };
    env::log_str(event.near_json_event().as_str());
}

pub fn log_set_base_uri(base_uri: &str) {
    let log = NftStringLog {
        data: base_uri.to_string(),
    };
    let event = NearJsonEvent {
        standard: "nep171".to_string(),
        version: "1.0.0".to_string(),
        event: "nft_set_base_uri".to_string(),
        data: serde_json::to_string(&log).unwrap(),
    };
    env::log_str(event.near_json_event().as_str());
}

#[allow(clippy::too_many_arguments)]
pub fn log_nft_batch_mint(
    first_token_id: u64,
    last_token_id: u64,
    minter: &str,
    owner: &str,
    royalty: &Option<Royalty>,
    split_owners: &Option<SplitOwners>,
    meta_ref: &Option<String>,
    meta_extra: &Option<String>,
) {
    let memo = serde_json::to_string(&NftMintLogMemo {
        royalty: royalty.clone(),
        split_owners: split_owners.clone(),
        meta_id: meta_ref.clone(),
        meta_extra: meta_extra.clone(),
        minter: minter.to_string(),
    })
    .unwrap();
    let token_ids = (first_token_id..=last_token_id)
        .map(|x| x.to_string())
        .collect::<Vec<_>>();
    let log = vec![NftMintLog {
        owner_id: owner.to_string(),
        token_ids,
        memo: Option::from(memo),
    }];
    let event = Nep171Event {
        standard: "nep171".to_string(),
        version: "1.0.0".to_string(),
        event_kind: Nep171EventLog::NftMint(log),
    };

    env::log_str(event.near_json_event().as_str());
}

pub fn log_nft_batch_burn(
    token_ids: &[U64],
    owner_id: String,
) {
    let token_ids = token_ids
        .iter()
        .map(|x| x.0.to_string())
        .collect::<Vec<_>>();
    let log = vec![NftBurnLog {
        owner_id,
        authorized_id: None,
        token_ids,
        memo: None,
    }];
    let event = Nep171Event {
        standard: "nep171".to_string(),
        version: "1.0.0".to_string(),
        event_kind: Nep171EventLog::NftBurn(log),
    };
    env::log_str(event.near_json_event().as_str());
}

// ---------------------------------- NEPs ---------------------------------- //

// Approval
pub fn log_approve(
    token_id: u64,
    approval_id: u64,
    account_id: &AccountId,
) {
    let log = vec![NftApproveLog {
        token_id,
        approval_id,
        account_id: account_id.to_string(),
    }];
    let event = NearJsonEvent {
        standard: "nep171".to_string(),
        version: "1.0.0".to_string(),
        event: "nft_approve".to_string(),
        data: serde_json::to_string(&log).unwrap(),
    };
    env::log_str(event.near_json_event().as_str());
}

pub fn log_batch_approve(
    tokens: &[U64],
    approvals: &[U64],
    account_id: &AccountId,
) {
    let log = approvals
        .iter()
        .enumerate()
        .map(|(u, x)| NftApproveLog {
            token_id: tokens[u].0,
            approval_id: x.0,
            account_id: account_id.to_string(),
        })
        .collect::<Vec<_>>();
    let event = NearJsonEvent {
        standard: "nep171".to_string(),
        version: "1.0.0".to_string(),
        event: "nft_approve".to_string(),
        data: serde_json::to_string(&log).unwrap(),
    };
    env::log_str(event.near_json_event().as_str());
}

pub fn log_revoke(
    token_id: u64,
    account_id: &AccountId,
) {
    let log = NftRevokeLog {
        token_id,
        account_id: account_id.to_string(),
    };
    let event = NearJsonEvent {
        standard: "nep171".to_string(),
        version: "1.0.0".to_string(),
        event: "nft_revoke".to_string(),
        data: serde_json::to_string(&log).unwrap(),
    };
    env::log_str(event.near_json_event().as_str());
}

pub fn log_revoke_all(token_id: u64) {
    let log = NftStringLog {
        data: token_id.to_string(),
    };
    let event = NearJsonEvent {
        standard: "nep171".to_string(),
        version: "1.0.0".to_string(),
        event: "nft_revoke_all".to_string(),
        data: serde_json::to_string(&log).unwrap(),
    };
    env::log_str(event.near_json_event().as_str());
}

// Core
pub fn log_nft_transfer(
    to: &AccountId,
    token_id: u64,
    memo: &Option<String>,
    old_owner: String,
) {
    let log = vec![NftTransferLog {
        authorized_id: None,
        old_owner_id: old_owner,
        new_owner_id: to.to_string(),
        token_ids: vec![token_id.to_string()],
        memo: memo.clone(),
    }];
    let event = Nep171Event {
        standard: "nep171".to_string(),
        version: "1.0.0".to_string(),
        event_kind: Nep171EventLog::NftTransfer(log),
    };
    env::log_str(event.near_json_event().as_str());
}

pub fn log_nft_batch_transfer(
    tokens: &[U64],
    accounts: &[AccountId],
    old_owners: Vec<String>,
) {
    let log = accounts
        .iter()
        .enumerate()
        .map(|(u, x)| NftTransferLog {
            authorized_id: None,
            old_owner_id: old_owners[u].clone(),
            new_owner_id: x.to_string(),
            token_ids: vec![tokens[u].0.to_string()],
            memo: None,
        })
        .collect::<Vec<_>>();
    let event = Nep171Event {
        standard: "nep171".to_string(),
        version: "1.0.0".to_string(),
        event_kind: Nep171EventLog::NftTransfer(log),
    };
    env::log_str(event.near_json_event().as_str());
}

// payout
pub fn log_set_split_owners(
    token_ids: &[U64],
    split_owners: &SplitOwners,
) {
    let token_ids = token_ids
        .iter()
        .map(|x| x.0.to_string())
        .collect::<Vec<_>>();

    let log = NftSetSplitOwnerLog {
        split_owners: split_owners.clone(),
        token_ids,
    };
    let event = NearJsonEvent {
        standard: "nep171".to_string(),
        version: "1.0.0".to_string(),
        event: "nft_set_split_owners".to_string(),
        data: serde_json::to_string(&log).unwrap(),
    };
    env::log_str(event.near_json_event().as_str());
    //         .to_string()
    //         .as_str(),
    // );
}

pub fn log_nft_loan_set(
    token_id: u64,
    account_id: &Option<AccountId>,
) {
    let log = NftLoanSetLog {
        account_id: account_id.as_ref().map(|x| x.to_string()),
        token_id,
    };
    let event = NearJsonEvent {
        standard: "nep171".to_string(),
        version: "1.0.0".to_string(),
        event: "nft_loan_set".to_string(),
        data: serde_json::to_string(&log).unwrap(),
    };
    env::log_str(event.near_json_event().as_str());
}

// compose
pub fn log_nfts_compose(
    token_ids: &[U64],
    // direct parent of token_ids
    parent: &str,
    // - "t": owned directly by a token on this contract
    // - "k": owned directly by a token on another contract
    ttype: String,
    // local root of chain of token_ids
    lroot: Option<u64>,
    // holder of local root
    holder: String,
    depth: u8,
) {
    let log = NftComposeLog {
        token_ids: token_ids.to_vec(),
        parent: parent.to_string(),
        ttype,
        lroot,
        holder,
        depth,
    };
    let event = NearJsonEvent {
        standard: "nep171".to_string(),
        version: "1.0.0".to_string(),
        event: "nft_compose".to_string(),
        data: serde_json::to_string(&log).unwrap(),
    };
    env::log_str(event.near_json_event().as_str());
}

pub fn log_nfts_uncompose(
    token_ids: &[U64],
    holder: AccountId,
) {
    let log = NftUncomposeLog {
        token_ids: token_ids.to_vec(),
        holder: holder.to_string(),
    };
    let event = NearJsonEvent {
        standard: "nep171".to_string(),
        version: "1.0.0".to_string(),
        event: "nft_uncompose".to_string(),
        data: serde_json::to_string(&log).unwrap(),
    };
    env::log_str(event.near_json_event().as_str());
}

pub fn log_on_compose(
    predecessor: AccountId,
    token_id: U64,
    // direct parent of token_ids
    cross_child_id: U64,
    // local root of chain of token_ids
    lroot: Option<u64>,
    // holder of local root
    holder: String,
    depth: u8,
) {
    let log = NftOnComposeLog {
        predecessor: predecessor.to_string(),
        token_id,
        cross_child_id,
        lroot,
        holder,
        depth,
    };
    let event = NearJsonEvent {
        standard: "nep171".to_string(),
        version: "1.0.0".to_string(),
        event: "nft_on_compose".to_string(),
        data: serde_json::to_string(&log).unwrap(),
    };
    env::log_str(event.near_json_event().as_str());
}

pub fn log_on_uncompose(
    token_id: U64,
    holder: &str,
    child_key: String,
) {
    let log = NftOnUncomposeLog {
        token_id,
        holder: holder.to_string(),
        child_key,
    };
    let event = NearJsonEvent {
        standard: "nep171".to_string(),
        version: "1.0.0".to_string(),
        event: "nft_on_uncompose".to_string(),
        data: serde_json::to_string(&log).unwrap(),
    };
    env::log_str(event.near_json_event().as_str());
}

pub fn log_on_move(
    token_id: U64,
    origin_key: &str,
) {
    let log = NftOnMoveLog {
        token_id,
        origin_key: origin_key.to_string(),
    };
    let event = NearJsonEvent {
        standard: "nep171".to_string(),
        version: "1.0.0".to_string(),
        event: "nft_on_move".to_string(),
        data: serde_json::to_string(&log).unwrap(),
    };
    env::log_str(event.near_json_event().as_str());
}

pub fn log_nft_moved(
    token_id: U64,
    contract_id: String,
) {
    let log = NftMovedLog {
        token_id,
        contract_id,
    };
    let event = NearJsonEvent {
        standard: "nep171".to_string(),
        version: "1.0.0".to_string(),
        event: "nft_moved".to_string(),
        data: serde_json::to_string(&log).unwrap(),
    };
    env::log_str(event.near_json_event().as_str());
}

// ----------------------------- market events ------------------------------ //

pub fn log_listing_created(
    list_id: &str,
    price: &U128,
    token_key: &str,
    owner_id: &AccountId,
    autotransfer: bool,
) {
    let mut iter = token_key.split(':');
    let mut iter2 = list_id.split(':');
    let token_id = iter.next();
    let store_id = iter.next();
    iter2.next();
    let approval_id = iter2.next().unwrap();
    let log = vec![NftListLog {
        list_id: list_id.to_string(),
        price: price.0.to_string(),
        token_key: token_key.to_string(),
        owner_id: owner_id.to_string(),
        autotransfer,
        approval_id: approval_id.to_string(),
        token_id: token_id.unwrap().to_string(),
        store_id: store_id.unwrap().to_string(),
    }];
    let event = NearJsonEvent {
        standard: "nep171".to_string(),
        version: "1.0.0".to_string(),
        event: "nft_1_list".to_string(),
        data: serde_json::to_string(&log).unwrap(),
    };
    env::log_str(event.near_json_event().as_str());
}

pub fn log_batch_listing_created(
    approval_ids: &[U64],
    price: &U128,
    token_ids: &[U64],
    owner_id: &AccountId,
    store_id: &AccountId,
    autotransfer: bool,
) {
    let log = approval_ids
        .iter()
        .enumerate()
        .map(|(u, x)| {
            let list_id = format!("{}:{}:{}", token_ids[u].0, x.0, store_id);
            let token_key = format!("{}:{}", token_ids[u].0, store_id);
            NftListLog {
                list_id,
                price: price.0.to_string(),
                token_key,
                owner_id: owner_id.to_string(),
                autotransfer,
                approval_id: x.0.to_string(),
                token_id: token_ids[u].0.to_string(),
                store_id: store_id.to_string(),
            }
        })
        .collect::<Vec<_>>();
    let event = NearJsonEvent {
        standard: "nep171".to_string(),
        version: "1.0.0".to_string(),
        event: "nft_batch_list".to_string(),
        data: serde_json::to_string(&log).unwrap(),
    };
    env::log_str(event.near_json_event().as_str());
}

pub fn log_set_token_autotransfer(
    auto_transfer: bool,
    list_id: &str,
) {
    let log = vec![NftUpdateListLog {
        auto_transfer: Option::from(auto_transfer),
        price: None,
        list_id: Option::from(list_id.to_string()),
    }];
    let event = NearJsonEvent {
        standard: "nep171".to_string(),
        version: "1.0.0".to_string(),
        event: "nft_set_autotransfer".to_string(),
        data: serde_json::to_string(&log).unwrap(),
    };
    env::log_str(event.near_json_event().as_str());
}

pub fn log_set_token_asking_price(
    price: &U128,
    list_id: &str,
) {
    let log = vec![NftUpdateListLog {
        auto_transfer: None,
        price: Option::from(price.0.to_string()),
        list_id: Option::from(list_id.to_string()),
    }];
    let event = NearJsonEvent {
        standard: "nep171".to_string(),
        version: "1.0.0".to_string(),
        event: "nft_set_price".to_string(),
        data: serde_json::to_string(&log).unwrap(),
    };
    env::log_str(event.near_json_event().as_str());
}

pub fn log_make_offer(
    offer: Vec<&TokenOffer>,
    token_key: Vec<&String>,
    list_id: Vec<String>,
    offer_num: Vec<u64>,
) {
    let log = offer
        .iter()
        .enumerate()
        .map(|(u, &x)| NftOfferLog2 {
            offer: x.clone(),
            list_id: list_id[u].clone(),
            token_key: token_key[u].clone(),
            offer_num: offer_num[u],
        })
        .collect::<Vec<_>>();
    let event = NearJsonEvent {
        standard: "nep171".to_string(),
        version: "1.0.0".to_string(),
        event: "nft_make_offer".to_string(),
        data: serde_json::to_string(&log).unwrap(),
    };
    env::log_str(event.near_json_event().as_str());
}

pub fn log_withdraw_token_offer(
    list_id: &str,
    offer_num: u64,
) {
    let log = NftUpdateOfferLog {
        offer_num,
        list_id: list_id.to_string(),
    };
    let event = NearJsonEvent {
        standard: "nep171".to_string(),
        version: "1.0.0".to_string(),
        event: "nft_withdraw_offer".to_string(),
        data: serde_json::to_string(&log).unwrap(),
    };
    env::log_str(event.near_json_event().as_str());
}

pub fn log_sale(
    list_id: &str,
    offer_num: u64,
    token_key: &str,
    payout: &HashMap<AccountId, U128>,
) {
    let log = NftSaleLog {
        list_id: list_id.to_string(),
        offer_num,
        token_key: token_key.to_string(),
        payout: payout.clone(),
    };
    let event = NearJsonEvent {
        standard: "nep171".to_string(),
        version: "1.0.0".to_string(),
        event: "nft_sold".to_string(),
        data: serde_json::to_string(&log).unwrap(),
    };
    env::log_str(event.near_json_event().as_str());
}

pub fn log_token_removed(list_id: &str) {
    let log = NftStringLog {
        data: list_id.to_string(),
    };
    let event = NearJsonEvent {
        standard: "nep171".to_string(),
        version: "1.0.0".to_string(),
        event: "nft_removed".to_string(),
        data: serde_json::to_string(&log).unwrap(),
    };
    env::log_str(event.near_json_event().as_str());
}

pub fn log_banlist_update(
    account_id: &AccountId,
    state: bool,
) {
    let log = vec![NftMarketLog {
        account_id: account_id.to_string(),
        state,
    }];
    let event = NearJsonEvent {
        standard: "nep171".to_string(),
        version: "1.0.0".to_string(),
        event: "nft_banlist".to_string(),
        data: serde_json::to_string(&log).unwrap(),
    };
    env::log_str(event.near_json_event().as_str());
}

pub fn log_allowlist_update(
    account_id: &AccountId,
    state: bool,
) {
    let log = vec![NftMarketLog {
        account_id: account_id.to_string(),
        state,
    }];
    let event = NearJsonEvent {
        standard: "nep171".to_string(),
        version: "1.0.0".to_string(),
        event: "nft_allowlist".to_string(),
        data: serde_json::to_string(&log).unwrap(),
    };
    env::log_str(event.near_json_event().as_str());
}

// --------------------- NFT event error (deprecated?) ---------------------- //
#[derive(Debug, Clone)]
pub struct NftEventError(pub String);

impl std::fmt::Display for NftEventError {
    fn fmt(
        &self,
        f: &mut std::fmt::Formatter,
    ) -> std::fmt::Result {
        write!(f, "{}", self.0)
    }
}

'''
'''--- mintbase-deps/src/token.rs ---
use std::collections::HashMap;

use near_sdk::borsh::{
    self,
    BorshDeserialize,
    BorshSerialize,
};
use near_sdk::serde::{
    Deserialize,
    Serialize,
};
use near_sdk::AccountId;

use crate::common::{
    Royalty,
    SplitOwners,
    TokenKey,
    TokenMetadataCompliant,
};

mod composeable_stats;
pub use composeable_stats::ComposeableStats;
mod loan;
pub use loan::Loan;
mod owner;
pub use owner::Owner;

/// Supports NEP-171, 177, 178, 181. Ref:
/// https://github.com/near/NEPs/blob/master/specs/Standards/NonFungibleToken/Core.md
#[derive(Clone)]
#[cfg_attr(feature = "wasm", derive(BorshDeserialize, BorshSerialize))]
#[derive(Deserialize, Serialize)]
pub struct Token {
    /// The id of this token on this `Store`. Not unique across `Store`s.
    /// `token_id`s count up from 0. Ref: https://github.com/near/NEPs/discussions/171
    pub id: u64,
    /// The current owner of this token. Either an account_id or a token_id (if composed).
    pub owner_id: Owner,
    /// Ref:
    /// https://github.com/near/NEPs/blob/master/specs/Standards/NonFungibleToken/ApprovalManagement.md
    /// Set of accounts that may transfer this token, other than the owner.
    pub approvals: HashMap<AccountId, u64>,
    /// The metadata content for this token is stored in the Contract
    /// `token_metadata` field, to avoid duplication of metadata across tokens.
    /// Use metadata_id to lookup the metadata. `Metadata`s is permanently set
    /// when the token is minted.
    pub metadata_id: u64,
    /// The Royalty for this token is stored in the Contract `token_royalty`
    /// field, to avoid duplication across tokens. Use royalty_id to lookup the
    /// royalty. `Royalty`s are permanently set when the token is minted.
    pub royalty_id: Option<u64>,
    /// Feature for owner of this token to split the token ownership accross
    /// several accounts.
    pub split_owners: Option<SplitOwners>,
    /// The account that minted this token.
    pub minter: AccountId,
    /// Non-nil if Token is loaned out. While token is loaned, disallow
    /// transfers, approvals, revokes, etc. for the token, except from the
    /// approved loan contract. Mark this field with the address of the loan
    /// contract. See neps::loan for more.
    pub loan: Option<Loan>,
    /// Composeablility metrics for this token
    pub composeable_stats: ComposeableStats,
    /// If the token originated on another contract and was `nft_move`d to
    /// this contract, this field will be non-nil.
    pub origin_key: Option<TokenKey>,
}

impl Token {
    /// - `metadata` validation performed in `TokenMetadataArgs::new`
    /// - `royalty` validation performed in `Royalty::new`
    pub fn new(
        owner_id: AccountId,
        token_id: u64,
        metadata_id: u64,
        royalty_id: Option<u64>,
        split_owners: Option<SplitOwners>,
        minter: AccountId,
    ) -> Self {
        Self {
            owner_id: Owner::Account(owner_id),
            id: token_id,
            metadata_id,
            royalty_id,
            split_owners,
            approvals: HashMap::new(),
            minter,
            loan: None,
            composeable_stats: ComposeableStats::new(),
            origin_key: None,
        }
    }

    /// If the token is loaned, return the loaner as the owner.
    pub fn get_owner_or_loaner(&self) -> Owner {
        self.loan
            .as_ref()
            .map(|l| Owner::Account(l.holder.clone()))
            .unwrap_or_else(|| self.owner_id.clone())
    }

    pub fn is_pred_owner(&self) -> bool {
        self.owner_id.to_string() == near_sdk::env::predecessor_account_id().to_string()
    }

    pub fn is_loaned(&self) -> bool {
        self.loan.is_some()
    }
}

// Supports NEP-171, 177, 178, 181. Ref:
/// https://github.com/near/NEPs/blob/master/specs/Standards/NonFungibleToken/Core.md
#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct TokenCompliant {
    /// The id of this token on this `Store`. Not unique across `Store`s.
    /// `token_id`s count up from 0. Ref: https://github.com/near/NEPs/discussions/171
    pub token_id: String,
    /// The current owner of this token. Either an account_id or a token_id (if composed).
    pub owner_id: Owner,
    /// Ref:
    /// https://github.com/near/NEPs/blob/master/specs/Standards/NonFungibleToken/ApprovalManagement.md
    /// Set of accounts that may transfer this token, other than the owner.
    pub approved_account_ids: HashMap<AccountId, u64>,
    /// The metadata content for this token is stored in the Contract
    /// `token_metadata` field, to avoid duplication of metadata across tokens.
    /// Use metadata_id to lookup the metadata. `Metadata`s is permanently set
    /// when the token is minted.
    pub metadata: TokenMetadataCompliant,
    /// The Royalty for this token is stored in the Contract `token_royalty`
    /// field, to avoid duplication across tokens. Use royalty_id to lookup the
    /// royalty. `Royalty`s are permanently set when the token is minted.
    pub royalty: Option<Royalty>,
    /// Feature for owner of this token to split the token ownership accross
    /// several accounts.
    pub split_owners: Option<SplitOwners>,
    /// The account that minted this token.
    pub minter: AccountId,
    /// Non-nil if Token is loaned out. While token is loaned, disallow
    /// transfers, approvals, revokes, etc. for the token, except from the
    /// approved loan contract. Mark this field with the address of the loan
    /// contract. See neps::loan for more.
    pub loan: Option<Loan>,
    /// Composeablility metrics for this token
    pub composeable_stats: ComposeableStats,
    /// If the token originated on another contract and was `nft_move`d to
    /// this contract, this field will be non-nil.
    pub origin_key: Option<TokenKey>,
}

'''
'''--- mintbase-deps/src/token/composeable_stats.rs ---
use near_sdk::borsh::{
    self,
    BorshDeserialize,
    BorshSerialize,
};
use near_sdk::serde::{
    Deserialize,
    Serialize,
};

/// To enable recursive composeability, need to track:
/// 1. How many levels deep a token is recursively composed
/// 2. Whether and how many cross-contract children a token has.
///
/// Tracking depth limits potential bugs around recursive ownership
/// consuming excessive amounts of gas.
///
/// Tracking the number of cross-contract children a token has prevents
/// breaking of the Only-One-Cross-Linkage Invariant.
#[derive(Clone, Debug, Deserialize, Serialize)]
#[cfg_attr(feature = "wasm", derive(BorshDeserialize, BorshSerialize))]
pub struct ComposeableStats {
    /// How deep this token is in a chain of composeability on THIS contract.
    /// If this token is cross-composed, it's depth will STILL be 0. `depth`
    /// equal to the parent's `depth`+1. If this is a top level token, this
    /// number is 0.
    pub local_depth: u8,
    /// How many cross contract children this token has, direct AND indirect.
    /// That is, any parent's `cross_contract_children` value equals the sum
    /// of of its children's values. If this number is non-zero, deny calls
    /// to `nft_cross_compose`.
    pub cross_contract_children: u8,
}

impl ComposeableStats {
    pub(super) fn new() -> Self {
        Self {
            local_depth: 0,
            cross_contract_children: 0,
        }
    }
}

'''
'''--- mintbase-deps/src/token/loan.rs ---
use near_sdk::borsh::{
    self,
    BorshDeserialize,
    BorshSerialize,
};
use near_sdk::serde::{
    Deserialize,
    Serialize,
};
use near_sdk::AccountId;

#[derive(Clone, Debug, Deserialize, Serialize)]
#[cfg_attr(feature = "wasm", derive(BorshDeserialize, BorshSerialize))]
pub struct Loan {
    pub holder: AccountId,
    pub loan_contract: AccountId,
}

impl Loan {
    pub fn new(
        holder: AccountId,
        loan_contract: AccountId,
    ) -> Self {
        Self {
            holder,
            loan_contract,
        }
    }
}

'''
'''--- mintbase-deps/src/token/owner.rs ---
use std::fmt;

use near_sdk::borsh::{
    self,
    BorshDeserialize,
    BorshSerialize,
};
use near_sdk::serde::ser::Serializer;
use near_sdk::serde::{
    Deserialize,
    Serialize,
};
use near_sdk::AccountId;

// TODO: rename to `TokenOwner`
#[cfg_attr(feature = "wasm", derive(BorshDeserialize, BorshSerialize))]
#[derive(Deserialize, Clone, Debug)]
pub enum Owner {
    /// Standard pattern: owned by a user.
    Account(AccountId),
    /// Compose pattern: owned by a token on this contract.
    TokenId(u64),
    /// Cross-compose pattern: owned by a token on another contract.
    CrossKey(crate::common::TokenKey),
    /// Lock: temporarily locked until some callback returns.
    Lock(AccountId),
}

impl Serialize for Owner {
    fn serialize<S: Serializer>(
        &self,
        serializer: S,
    ) -> Result<S::Ok, S::Error> {
        // TODO: create string and then clone?
        serializer.serialize_str(&format!("{}", self))
    }
}

impl fmt::Display for Owner {
    fn fmt(
        &self,
        f: &mut fmt::Formatter,
    ) -> fmt::Result {
        match self {
            Owner::Account(s) => write!(f, "{}", s),
            Owner::TokenId(n) => write!(f, "{}", n),
            Owner::CrossKey(key) => write!(f, "{}", key),
            Owner::Lock(_) => panic!("locked"),
        }
    }
}

'''
'''--- mintbase-deps/src/utils.rs ---
#[cfg(feature = "market-wasm")]
use near_sdk::Balance;
use near_sdk::Gas;

/// Split a &str on the first colon
pub fn split_colon(string: &str) -> (&str, &str) {
    let pos = string.find(':').expect("no colon");
    (&string[..pos], &string[(pos + 1)..])
}

/// Gas is in TerraUnits, default gas call is 100TGas.
pub const fn ntot(near_amount: Gas) -> Gas {
    Gas(near_amount.0 * 10u64.pow(12))
}

/// Near denominated units are in 10^24
#[cfg(feature = "market-wasm")]
pub const fn ntoy(near_amount: Balance) -> Balance {
    near_amount * 10u128.pow(24)
}

// // TODO: unused, deprecated?
// pub fn to_yocto(value: &str) -> u128 {
//     let vals: Vec<_> = value.split('.').collect();
//     let part1 = vals[0].parse::<u128>().unwrap() * 10u128.pow(24);
//     if vals.len() > 1 {
//         let power = vals[1].len() as u32;
//         let part2 = vals[1].parse::<u128>().unwrap() * 10u128.pow(24 - power);
//         part1 + part2
//     } else {
//         part1
//     }
// }

// // TODO: unused, deprecated?
// pub fn to_near(n: u128) -> u128 {
//     n * 10u128.pow(24)
// }

'''
'''--- run.sh ---
#!/bin/bash

# SETUP ENV #
# =====
# =====
# =====

mkdir -p bin
mkdir -p wasm
touch -a .postgres.sh

if [[ -z "${NETWORK}" ]]; then
  echo specify NETWORK variable - mainnet,testnet,local
  exit 1
else
  export NEAR_ENV=$NETWORK

fi

if [[ -z "${NEAR_DIR}" ]]; then
  eval NEAR_DIR="~/.near/$NETWORK"
else
  NEAR_DIR="${NEAR_DIR}"
fi
. .postgres.sh

if [[ -z "${POSTGRES}" ]]; then
  export POSTGRES="postgres://$postgres_user:$postgres_password@$postgres_host:5432/$postgres_database"
else
  export POSTGRES="$POSTGRES"
fi
# diesel cli
export DATABASE_URL=$POSTGRES

# rust log
if [[ -z "${RUST_LOG}" ]]; then
  export RUST_LOG="indexer=info,genesis=info,chain=info,client=info,stats=info,mintbase_near_indexer=info,near=error,mintbase_near_indexer=error"
else
  export RUST_LOG="${RUST_LOG}"
fi

# watch accounts
if [[ -z "${WATCH_ACCOUNTS}" ]]; then
  WATCH_ACCOUNTS="$root,tenk,nmkmint"
else
  WATCH_ACCOUNTS="${WATCH_ACCOUNTS}"
fi

# node_url, root, top_level_account
if [ "$NETWORK" = "testnet" ]; then
  node_url="https://rpc.testnet.near.org" #testnet
  top_level_account="testnet"
  root="mintspace2"
elif [ "$NETWORK" == "mainnet" ]; then
  node_url="https://rpc.mainnet.near.org" #mainnet
  top_level_account="near"
  root="mintbase1"
elif [ "$NETWORK" == "local" ]; then
  node_url="http://127.0.0.1:3030" #local
  top_level_account="near"
  root="test"
else
  echo "invalid network $NETWORK"
  exit 1
fi

# SETUP ENV END #
# =====
# =====
# =====

# ==================== #

# SETUP APPLICATION DATA #
# =====
# =====
# =====

root_account="$root.$top_level_account" # MUST ALREADY EXIST WITH LOCAL CRED
minter_account="minter02.$root_account"
market_account="market.$root_account"
helper_account="helper.$root_account"
store_account="store906.$root_account" #don't create store manually
store_owner_account="store-owner01.$root_account"
seller1_account="seller01.$root_account"
buyer1_account="buyer100.$root_account"
buyer2_account="buyer200.$root_account"
royalty1_account="royalty01.$root_account"
royalty2_account="royalty02.$root_account"
royalty3_account="royalty03.$root_account"
royalty4_account="royalty04.$root_account"
royalty5_account="royalty05.$root_account"
royalty6_account="royalty06.$root_account"
royalty7_account="royalty07.$root_account"
royalty8_account="royalty08.$root_account"
royalty9_account="royalty09.$root_account"
royalty10_account="royalty10.$root_account"
receiver_account="receiver01.$root_account"
receiver300_account="receiver01.$root_account"
receiver301_account="receiver01.$root_account"

# key path
if [ "$NETWORK" = "local" ]; then
  key_path="~/.near/local/validator_key.json"
else
  key_path="~/.near-credentials/$NETWORK/$root_account.json"
fi

# SETUP APPLICATION DATA END #
# =====
# =====
# =====

# ==================== #

# FUNCTIONS #
# =====
# =====
# =====

function tail_indexer_error_logs() {
  while read line; do
    case "$line" in
    *)
      gcloud logging write indexer-error-log "$line"
      ;;
    esac
  done < <(tail -f mintbase-core.error.log)
}

function build_contracts() {
  cd mintbase-deps && cargo market-wasm && cargo store-wasm && cargo factory-wasm && cargo helper-wasm && cd ../
}

function build_indexer() {
  cargo indexer
}

function run_indexer() {
  if [[ ! -d "$NEAR_DIR/data" ]]; then
    str='rm -rf _near_dir_'
    str="${str//_near_dir_/$NEAR_DIR}"
    echo $str
    eval $str

    if [ "$NETWORK" = "testnet" ]; then
      str='bin/indexer --home-dir _near_dir_ init --chain-id _NEAR_ENV_ --download-genesis;'
    elif [ "$NETWORK" = "mainnet" ]; then
      echo 22
    else
      str='bin/indexer --home-dir _near_dir_ init --chain-id _NEAR_ENV_;'
    fi
    str="${str//_near_dir_/$NEAR_DIR}"
    str="${str//_NEAR_ENV_/$NEAR_ENV}"
    echo $str
    eval $str

    sed -i 's/"tracked_shards": \[\],/"tracked_shards": [0],/g' $NEAR_DIR/config.json
  fi
  str='NETWORK=_network_ WATCH_ACCOUNTS=_WATCH_ACCOUNTS_ bin/indexer --home-dir _near_dir_ run'
  str="${str//_rust_log_/$RUST_LOG}"
  str="${str//_near_dir_/$NEAR_DIR}"
  str="${str//_WATCH_ACCOUNTS_/$WATCH_ACCOUNTS}"
  str="${str//_network_/$NETWORK}"
  str="${str//_postgres_/$POSTGRES}"
  if [ "$1" = "log" ]; then
    str="$str  >> out.log 2>> error.log"
  fi
  echo $str
  eval $str
}

function create_accounts() {
  N=3
  for i in $minter_account $market_account \
    $store_owner_account $seller1 \
    $buyer1_account $buyer2_account $royalty1_account \
    $royalty2_account $receiver_account $helper_account \
    $royalty3_account $royalty4_account $royalty5_account \
    $royalty6_account $royalty7_account $royalty8_account \
    $royalty9_account $royalty10_account; do
    #      ((z=z%N)); ((z++==0)) && wait
    str="near create-account $i --masterAccount $root_account --initialBalance 4 --nodeUrl $node_url --keyPath $key_path"
    echo running $str
    eval $str
  done
  #    wait
}

function deploy() {
  str='near deploy --wasmFile wasm/factory.wasm _root_account_ --initFunction new --initArgs null --masterAccount _root_account_ --nodeUrl _node_url_ --keyPath _key_path_'
  str="${str//_root_account_/$root_account}"
  str="${str//_node_url_/$node_url}"
  str="${str//_key_path_/$key_path}"
  echo running "$str"
  eval "$str"
  str='near deploy --wasmFile wasm/market.wasm _market_account_ --initFunction new --initArgs '\''{"init_allowlist": ["_root_account_"]}'\'' --masterAccount _root_account_ --nodeUrl _node_url_ --keyPath _key_path_'
  str="${str//_root_account_/$root_account}"
  str="${str//_market_account_/$market_account}"
  str="${str//_node_url_/$node_url}"
  str="${str//_key_path_/$key_path}"
  echo running "$str"
  eval "$str"
  str='near deploy --wasmFile wasm/helper.wasm _helper_account_ --initFunction new --initArgs null --masterAccount _root_account_ --nodeUrl _node_url_ --keyPath _key_path_'
  str="${str//_helper_account_/$helper_account}"
  str="${str//_node_url_/$node_url}"
  str="${str//_key_path_/$key_path}"
  echo running "$str"
  eval "$str"
}

function redeploy() {
  str='near deploy --wasmFile wasm/factory.wasm _root_account_ --masterAccount _root_account_ --nodeUrl _node_url_ --keyPath _key_path_'
  str="${str//_root_account_/$root_account}"
  str="${str//_node_url_/$node_url}"
  str="${str//_key_path_/$key_path}"
  echo running "$str"
  eval "$str"

  str='near deploy --wasmFile wasm/market.wasm _market_account_ --masterAccount _root_account_ --nodeUrl _node_url_ --keyPath _key_path_'
  str="${str//_root_account_/$root_account}"
  str="${str//_market_account_/$market_account}"
  str="${str//_node_url_/$node_url}"
  str="${str//_key_path_/$key_path}"
  echo running "$str"
  eval "$str"

  str='near deploy --wasmFile wasm/helper.wasm _helper_account_ --masterAccount _root_account_ --nodeUrl _node_url_ --keyPath _key_path_'
  str="${str//_root_account_/$root_account}"
  str="${str//_helper_account_/$helper_account}"
  str="${str//_node_url_/$node_url}"
  str="${str//_key_path_/$key_path}"
  echo running "$str"
  eval "$str"
}

function redeploy_single_store() {
  cred=$(cat ~/.near-credentials/$NETWORK/$root_account.json)
  echo "$cred" >~/.near-credentials/"$NETWORK"/"$1".json
  str='near deploy --wasmFile wasm/store.wasm _1_ --masterAccount _root_account_ --nodeUrl _node_url_ --keyPath _key_path_'
  str="${str//_root_account_/$root_account}"
  str="${str//_1_/$1}"
  str="${str//_node_url_/$node_url}"
  str="${str//_key_path_/$key_path}"
  echo running "$str"
  eval "$str"
}

function create_store() {
  store="${store_account/.$root_account/}"
  str='near call _root_account_ create_store '\''{"metadata":{"spec":"nft-1.0.0","name":"_store_account_","symbol":"A","icon":null,"base_uri":null,"reference":null,"reference_hash":null},"owner_id":"_root_account_"}'\'' --accountId _root_account_ --deposit 7 --gas 200000000000000 --nodeUrl _node_url_ --keyPath _key_path_'
  str="${str//_root_account_/$root_account}"
  str="${str//_store_account_/$store}"
  str="${str//_node_url_/$node_url}"
  str="${str//_key_path_/$key_path}"
  echo running "$str"
  eval "$str"
}

function grant_minter() {
  str='near call _store_account_ grant_minter '\''{"account_id":"_minter_"}'\'' --accountId _root_account_ --deposit 0.000000000000000000000001 --nodeUrl _node_url_ --keyPath _key_path_'
  str="${str//_minter_/$minter_account}"
  str="${str//_root_account_/$root_account}"
  str="${str//_store_account_/$store_account}"
  str="${str//_node_url_/$node_url}"
  str="${str//_key_path_/$key_path}"
  echo running "$str"
  eval "$str"
}

function send_to_store() {
  str='near send _root_account_ _store_account_ 10 --nodeUrl _node_url_ --keyPath _key_path_'
  str="${str//_root_account_/$root_account}"
  str="${str//_store_account_/$store_account}"
  str="${str//_node_url_/$node_url}"
  str="${str//_key_path_/$key_path}"
  echo running "$str"
  eval "$str"
}

function mint_tokens_nr() {
  str='near call _store_account_ nft_batch_mint '\''{"owner_id":"_minter_account_", "metadata":{"spec":"","name":"","symbol":"","icon":null,"base_uri":null,"reference":null,"reference_hash":null},"royalty_args":null,"num_to_mint":10,"split_owners":null}'\'' --accountId _minter_account_ --deposit 0.000000000000000000000001 --nodeUrl _node_url_ --keyPath _key_path_'
  str="${str//_root_account_/$root_account}"
  str="${str//_minter_account_/$minter_account}"
  str="${str//_store_account_/$store_account}"
  str="${str//_node_url_/$node_url}"
  str="${str//_key_path_/$key_path}"
  echo running "$str"
  eval "$str"
}

function mint_tokens_custom() {
  str='near call _store_account_ nft_batch_mint '\''_1_'\'' --accountId _minter_account_ --deposit 0.000000000000000000000001 --nodeUrl _node_url_ --keyPath _key_path_ --gas 300000000000000'
  str="${str//_1_/$1}"
  str="${str//_node_url_/$node_url}"
  str="${str//_key_path_/$key_path}"
  str="${str//_minter_account_/$minter_account}"
  str="${str//_store_owner_account_/$store_owner_account}"
  str="${str//_store_account_/$store_account}"
  str="${str//_royalty1_account_/$royalty1_account}"
  str="${str//_royalty2_account_/$royalty2_account}"
  echo running "$str"
  eval "$str"
}

function mint_tokens() {
  str='near call _store_account_ nft_batch_mint '\''{"owner_id":"_minter_account_", "metadata":{"spec":"","name":"","symbol":"","icon":null,"base_uri":null,"reference":null,"reference_hash":null},"royalty_args":{"split_between": {"_royalty1_account_": 8000,"_royalty2_account_": 2000}, "percentage": 1000},"num_to_mint":10,"split_owners":{"_minter_account_": 8000,"_store_owner_account_": 2000}}'\'' --accountId _minter_account_ --deposit 0.000000000000000000000001'
  str="${str//_minter_account_/$minter_account}"
  str="${str//_store_owner_account_/$store_owner_account}"
  str="${str//_store_account_/$store_account}"
  str="${str//_royalty1_account_/$royalty1_account}"
  str="${str//_royalty2_account_/$royalty2_account}"
  echo running "$str"
  eval "$str"
}

function mint_tokens2() {
  str='near call _store_account_ nft_batch_mint '\''{"owner_id":"_minter_account_", "metadata":{"spec":"","name":"","symbol":"","icon":null,"base_uri":null,"reference":null,"reference_hash":null},"royalty_args":{"split_between": {"_royalty1_account_": 1000,"_royalty2_account_": 1000, "_royalty3_account_": 1000,"_royalty4_account_": 1000,"_royalty5_account_": 1000,"_royalty6_account_": 1000,"_royalty7_account_": 1000,"_royalty8_account_": 1000,"_royalty9_account_": 1000,"_royalty10_account_": 1000}, "percentage": 1000},"num_to_mint":10,"split_owners":{"_minter_account_": 8000,"_store_owner_account_": 2000}}'\'' --accountId _minter_account_ --deposit 0.000000000000000000000001'
  str="${str//_minter_account_/$minter_account}"
  str="${str//_store_owner_account_/$store_owner_account}"
  str="${str//_store_account_/$store_account}"
  str="${str//_royalty1_account_/$royalty1_account}"
  str="${str//_royalty2_account_/$royalty2_account}"
  str="${str//_royalty3_account_/$royalty3_account}"
  str="${str//_royalty4_account_/$royalty4_account}"
  str="${str//_royalty5_account_/$royalty5_account}"
  str="${str//_royalty6_account_/$royalty6_account}"
  str="${str//_royalty7_account_/$royalty7_account}"
  str="${str//_royalty8_account_/$royalty8_account}"
  str="${str//_royalty9_account_/$royalty9_account}"
  str="${str//_royalty10_account_/$royalty10_account}"
  echo running "$str"
  eval "$str"
}

function nft_approve_autotransfer() {
  str='near call _store_account_ nft_approve '\''{"token_id":"_1_", "account_id":"_market_account_", "msg":"{\"price\":\"1000000000000000000000000\",\"autotransfer\":true}" }'\'' --accountId _minter_account_ --deposit 1 --gas 200000000000000 --nodeUrl _node_url_ --keyPath _key_path_'
  str="${str//_1_/$1}"
  str="${str//_market_account_/$market_account}"
  str="${str//_store_account_/$store_account}"
  str="${str//_minter_account_/$minter_account}"
  str="${str//_node_url_/$node_url}"
  str="${str//_key_path_/$key_path}"
  echo running "$str"
  eval "$str"
}

function nft_approve_manual_transfer() {
  str='near call _store_account_ nft_approve '\''{"token_id":"_1_", "account_id":"_market_account_", "msg":"{\"price\":\"1000000000000000000000000\",\"autotransfer\":false}" }'\'' --accountId _minter_account_ --deposit 1 --gas 200000000000000'
  str="${str//_1_/$1}"
  str="${str//_market_account_/$market_account}"
  str="${str//_store_account_/$store_account}"
  str="${str//_minter_account_/$minter_account}"
  echo running "$str"
  eval "$str"
}

function make_offer() {
  str='near call _market_account_ make_offer '\''{"token_key":["_1_:_store_account_"], "price":["1000000000000000000000000"], "timeout":[{"Hours":24}] }'\'' --accountId _buyer1_account_ --deposit 1 --gas 200000000000000 --nodeUrl _node_url_ --keyPath _key_path_'
  str="${str//_1_/$1}"
  str="${str//_market_account_/$market_account}"
  str="${str//_store_account_/$store_account}"
  str="${str//_buyer1_account_/$buyer1_account}"
  str="${str//_node_url_/$node_url}"
  str="${str//_key_path_/$key_path}"
  echo running "$str"
  eval "$str"

  str='near view _store_account_ nft_holder '\''{"token_id": "_1_"}'\''  --nodeUrl _node_url_ --keyPath _key_path_'
  str="${str//_1_/$1}"
  str="${str//_store_account_/$store_account}"
  str="${str//_node_url_/$node_url}"
  str="${str//_key_path_/$key_path}"
  echo running "$str"
  eval "$str"
}

function accept_offer_and_transfer() {
  str='near call _market_account_ accept_and_transfer '\''{"token_key":"_1_:_store_account_"}'\'' --accountId _minter_account_ --deposit 0.000000000000000000000001 --gas 200000000000000'
  str="${str//_1_/$1}"
  str="${str//_market_account_/$market_account}"
  str="${str//_store_account_/$store_account}"
  str="${str//_minter_account_/$minter_account}"
  echo running "$str"
  eval "$str"

  str='near view _store_account_ nft_holder '\''{"token_id": "_1_"}'\'' '
  str="${str//_1_/$1}"
  str="${str//_store_account_/$store_account}"
  echo running "$str"
  eval "$str"
}

function revoke_minter() {
  str='near call _store_account_ revoke_minter '\''{"account_id":"_minter_account_"}'\'' --accountId _root_account_ --deposit 0.000000000000000000000001 --gas 200000000000000'
  str="${str//_root_account_/$root_account}"
  str="${str//_store_account_/$store_account}"
  str="${str//_minter_account_/$minter_account}"
  echo running "$str"
  eval "$str"
}

function nft_batch_transfer() {
  str='near call _store_account_ nft_transfer '\''{"token_ids":[["_1_", "_receiver_account_"]]}'\'' --accountId _buyer1_account_ --deposit 0.000000000000000000000001 --gas 200000000000000'
  str="${str//_receiver_account_/$receiver_account}"
  str="${str//_store_account_/$store_account}"
  str="${str//_minter_account_/$minter_account}"
  str="${str//_buyer1_account_/$buyer1_account}"
  str="${str//_1_/$1}"
  echo running "$str"
  eval "$str"

  str='near view _store_account_ nft_holder '\''{"token_id": "_1_"}'\'' '
  str="${str//_1_/$1}"
  str="${str//_store_account_/$store_account}"
  echo running "$str"
  eval "$str"
}

function batch_upgrade_stores() {
  N=5
  for row in $(jq -r '.[]'); do
    ((i = i % N))
    ((i++ == 0)) && wait
    redeploy_single_store "$row" &
  done <scripts/testnet.json
}

function revoke_all_approvals() {
  str='near call _store_account_ nft_revoke_all '\''{"token_id":""}'\'' --accountId _buyer1_account_ --deposit 0.000000000000000000000001 --gas 200000000000000'
  str="${str//_receiver_account_/$receiver_account}"
  str="${str//_store_account_/$store_account}"
  str="${str//_minter_account_/$minter_account}"
  str="${str//_buyer1_account_/$buyer1_account}"
  str="${str//_1_/$1}"
  echo running "$str"
  eval "$str"

  str='near view _store_account_ nft_holder '\''{"token_id": "_1_"}'\'' '
  str="${str//_1_/$1}"
  str="${str//_store_account_/$store_account}"
  echo running "$str"
  eval "$str"
}

function update_list() {
  str='near call _market_account_ update_allowlist '\''{"account_id":"_1_", "state":true}'\'' --accountId _market_account_ --deposit 0.000000000000000000000001 --gas 200000000000000 --nodeUrl _node_url_ --keyPath _key_path_'
  str="${str//_1_/$1}"
  str="${str//_market_account_/$market_account}"
  str="${str//_root_account_/$root_account}"
  str="${str//_node_url_/$node_url}"
  str="${str//_key_path_/$key_path}"
  echo running "$str"
  eval "$str"
}

function get_allow_list() {
  str='near view _market_account_ get_allowlist'
  str="${str//_market_account_/$market_account}"
  echo running "$str"
  eval "$str"
}

function update_ban_list() {
  str='near call _market_account_ update_banlist '\''{"account_id":"_1_", "state":true}'\'' --accountId _market_account_ --deposit 0.000000000000000000000001 --gas 200000000000000 --nodeUrl _node_url_ --keyPath _key_path_'
  str="${str//_1_/$1}"
  str="${str//_market_account_/$market_account}"
  str="${str//_root_account_/$root_account}"
  str="${str//_node_url_/$node_url}"
  str="${str//_key_path_/$key_path}"
  echo running "$str"
  eval "$str"
}

function get_ban_list() {
  str='near view _market_account_ get_banlist'
  str="${str//_market_account_/$market_account}"
  echo running "$str"
  eval "$str"
}

function nft_transfer_call() {
  str='near call _store_account_ nft_transfer_call '\''{"receiver_id":"_helper_account_", "token_id":"_1_", "msg":"true"}'\'' --accountId _minter_account_ --deposit 0.000000000000000000000001 --gas 200000000000000 --keyPath _key_path_ --nodeUrl _node_url_'
  str="${str//_1_/$1}"
  str="${str//_store_account_/$store_account}"
  str="${str//_helper_account_/$helper_account}"
  str="${str//_minter_account_/$minter_account}"
  str="${str//_key_path_/$key_path}"
  str="${str//_node_url_/$node_url}"
  echo running "$str"
  eval "$str"
}

function nft_token() {
  str='near view _store_account_ nft_token '\''{"token_id":"_1_"}'\'' --keyPath _key_path_ --nodeUrl _node_url_'
  str="${str//_1_/$1}"
  str="${str//_store_account_/$store_account}"
  str="${str//_key_path_/$key_path}"
  str="${str//_node_url_/$node_url}"
  echo running "$str"
  eval "$str"
}

function top_stores() {
  str='./bin/stats --stat top-stores'
  echo running "$str"
  eval "$str"
}

. switch-cmd.sh

if [ -n "$1" ]; then
  programa2 $1 $2
else
  programa
fi

'''
'''--- rustfmt.toml ---
reorder_imports = true
brace_style = "PreferSameLine"
edition = "2021"
fn_args_layout = "Vertical"
imports_layout = "Vertical"
match_block_trailing_comma = true
imports_granularity = "Module"
reorder_impl_items = true
group_imports = "StdExternalCrate"

'''
'''--- store/Cargo.toml ---
[package]
name = "store"
version = "0.1.0"
edition = "2021"

[lib]
crate-type = ["cdylib"]

[dependencies]
mintbase-deps = { path = "../mintbase-deps", features = ["store-wasm"] }

'''
'''--- store/src/approvals.rs ---
use mintbase_deps::constants::gas;
use mintbase_deps::interfaces::ext_on_approve;
use mintbase_deps::logging::{
    log_approve,
    log_batch_approve,
    log_revoke,
    log_revoke_all,
};
use mintbase_deps::near_sdk::json_types::U64;
use mintbase_deps::near_sdk::{
    self,
    assert_one_yocto,
    env,
    near_bindgen,
    AccountId,
    Promise,
};
use mintbase_deps::token::Token;

use crate::*;

// --------------------- standardized approval methods ---------------------- //
#[near_bindgen]
impl MintbaseStore {
    // -------------------------- change methods ---------------------------
    #[payable]
    pub fn nft_approve(
        &mut self,
        token_id: U64,
        account_id: AccountId,
        msg: Option<String>,
    ) -> Option<Promise> {
        // Note: This method only guarantees that the store-storage is covered. The
        // market may still reject.
        assert!(env::attached_deposit() > self.storage_costs.common);
        let token_idu64 = token_id.into();
        // validates owner and loaned
        let approval_id = self.approve_internal(token_idu64, &account_id);
        log_approve(token_idu64, approval_id, &account_id);

        if let Some(msg) = msg {
            ext_on_approve::nft_on_approve(
                token_id,
                env::predecessor_account_id(),
                approval_id,
                msg,
                account_id,
                0,
                gas::NFT_ON_APPROVE,
            )
            .into()
        } else {
            None
        }
    }

    #[payable]
    pub fn nft_revoke(
        &mut self,
        token_id: U64,
        account_id: AccountId,
    ) {
        let token_idu64 = token_id.into();
        let mut token = self.nft_token_internal(token_idu64);
        assert!(!token.is_loaned());
        assert!(token.is_pred_owner());
        assert_one_yocto();

        if token.approvals.remove(&account_id).is_some() {
            self.tokens.insert(&token_idu64, &token);
            log_revoke(token_idu64, &account_id);
        }
    }

    #[payable]
    pub fn nft_revoke_all(
        &mut self,
        token_id: U64,
    ) {
        let token_idu64 = token_id.into();
        let mut token = self.nft_token_internal(token_idu64);
        assert!(!token.is_loaned());
        assert!(token.is_pred_owner());
        assert_one_yocto();

        if !token.approvals.is_empty() {
            token.approvals.clear();
            self.tokens.insert(&token_idu64, &token);
            log_revoke_all(token_idu64);
        }
    }

    // -------------------------- view methods -----------------------------
    pub fn nft_is_approved(
        &self,
        token_id: U64,
        approved_account_id: AccountId,
        approval_id: Option<u64>,
    ) -> bool {
        self.nft_is_approved_internal(
            &self.nft_token_internal(token_id.into()),
            approved_account_id,
            approval_id,
        )
    }
}

// ------------------- non-standardized approval methods -------------------- //
#[near_bindgen]
impl MintbaseStore {
    // -------------------------- change methods ---------------------------
    #[payable]
    pub fn nft_batch_approve(
        &mut self,
        token_ids: Vec<U64>,
        account_id: AccountId,
        msg: Option<String>,
    ) -> Option<Promise> {
        let tlen = token_ids.len() as u128;
        assert!(tlen > 0);
        assert!(tlen <= 70);
        let store_approval_storage = self.storage_costs.common * tlen;
        // Note: This method only guarantees that the store-storage is covered.
        // The financial contract may still reject.
        assert!(
            env::attached_deposit() > store_approval_storage,
            "deposit less than: {}",
            store_approval_storage
        );
        let approval_ids: Vec<U64> = token_ids
            .iter()
            // validates owner and loaned
            .map(|&token_id| self.approve_internal(token_id.into(), &account_id).into())
            .collect();
        log_batch_approve(&token_ids, &approval_ids, &account_id);

        if let Some(msg) = msg {
            ext_on_approve::nft_on_batch_approve(
                token_ids,
                approval_ids,
                env::predecessor_account_id(),
                msg,
                account_id,
                env::attached_deposit() - store_approval_storage,
                gas::NFT_BATCH_APPROVE,
            )
            .into()
        } else {
            None
        }
    }

    // -------------------------- view methods -----------------------------
    // -------------------------- private methods --------------------------
    // -------------------------- internal methods -------------------------

    /// Called from nft_approve and nft_batch_approve.
    fn approve_internal(
        &mut self,
        token_idu64: u64,
        account_id: &AccountId,
    ) -> u64 {
        let mut token = self.nft_token_internal(token_idu64);
        assert!(!token.is_loaned());
        assert!(token.is_pred_owner());
        let approval_id = self.num_approved;
        self.num_approved += 1;
        token.approvals.insert(account_id.clone(), approval_id);
        self.tokens.insert(&token_idu64, &token);
        approval_id
    }

    /// Same as `nft_is_approved`, but uses internal u64 (u64) typing for
    /// Copy-efficiency.
    pub(crate) fn nft_is_approved_internal(
        &self,
        token: &Token,
        approved_account_id: AccountId,
        approval_id: Option<u64>,
    ) -> bool {
        if approved_account_id.to_string() == token.owner_id.to_string() {
            true
        } else {
            let approval_id = approval_id.expect("approval_id required");
            let stored_approval = token.approvals.get(&approved_account_id);
            match stored_approval {
                None => false,
                Some(&stored_approval_id) => stored_approval_id == approval_id,
            }
        }
    }
}

'''
'''--- store/src/burning.rs ---
use mintbase_deps::logging::log_nft_batch_burn;
use mintbase_deps::near_sdk::json_types::U64;
use mintbase_deps::near_sdk::{
    self,
    env,
    near_bindgen,
    AccountId,
};

use crate::*;

#[near_bindgen]
impl MintbaseStore {
    // -------------------------- change methods ---------------------------

    /// The token will be permanently removed from this contract. Burn each
    /// token_id in `token_ids`.
    ///
    /// Only the tokens' owner may call this function.
    #[payable]
    pub fn nft_batch_burn(
        &mut self,
        token_ids: Vec<U64>,
    ) {
        near_sdk::assert_one_yocto();
        assert!(!token_ids.is_empty());
        self.burn_triaged(token_ids, env::predecessor_account_id());
    }

    /// A helper to burn tokens. Necessary to satisfy the `nft_move` method,
    /// where the callback prevents the use of
    /// `env::predecessor_account_id()` to determine whether the owner is the
    /// method caller.
    pub fn burn_triaged(
        &mut self,
        token_ids: Vec<U64>,
        account_id: AccountId,
    ) {
        let mut set_owned = self.tokens_per_owner.get(&account_id).expect("none owned");

        token_ids.iter().for_each(|&token_id| {
            let token_id: u64 = token_id.into();
            let token = self.nft_token_internal(token_id);
            assert!(!token.is_loaned());
            assert_eq!(token.owner_id.to_string(), account_id.to_string());

            // update the counts on token metadata and royalties stored
            let metadata_id = self.nft_token_internal(token_id).metadata_id;
            let (count, metadata) = self.token_metadata.get(&metadata_id).unwrap();
            if count > 1 {
                self.token_metadata
                    .insert(&metadata_id, &(count - 1, metadata));
            } else {
                self.token_metadata.remove(&metadata_id);
            }
            if let Some(royalty_id) = self.nft_token_internal(token_id).royalty_id {
                let (count, royalty) = self.token_royalty.get(&royalty_id).unwrap();
                if count > 1 {
                    self.token_royalty
                        .insert(&royalty_id, &(count - 1, royalty));
                } else {
                    self.token_royalty.remove(&royalty_id);
                }
            }

            set_owned.remove(&token_id);
            self.tokens.remove(&token_id);
        });

        if set_owned.is_empty() {
            self.tokens_per_owner.remove(&account_id);
        } else {
            self.tokens_per_owner.insert(&account_id, &set_owned);
        }
        self.tokens_burned += token_ids.len() as u64;
        log_nft_batch_burn(&token_ids, account_id.to_string());
    }

    /// Get info about the store.
    pub fn get_info(&self) {
        let s = format!("owner: {}", self.owner_id);
        env::log_str(s.as_str());
        let s = format!("minted: {}", self.tokens_minted);
        env::log_str(s.as_str());
        let s = format!("burned: {}", self.tokens_burned);
        env::log_str(s.as_str());
        let s = format!("approved: {}", self.num_approved);
        env::log_str(s.as_str());
        let s = format!("allow_moves: {}", self.allow_moves);
        env::log_str(s.as_str());
    }

    // -------------------------- view methods -----------------------------
    // -------------------------- private methods --------------------------
    // -------------------------- internal methods -------------------------
}

'''
'''--- store/src/core.rs ---
use std::collections::HashMap;
use std::convert::TryFrom;

use mintbase_deps::constants::{
    gas,
    NO_DEPOSIT,
};
// contract interface modules
use mintbase_deps::interfaces::ext_on_transfer;
// logging functions
use mintbase_deps::logging::{
    log_nft_batch_transfer,
    log_nft_transfer,
};
use mintbase_deps::near_sdk::json_types::U64;
use mintbase_deps::near_sdk::{
    self,
    assert_one_yocto,
    env,
    near_bindgen,
    AccountId,
    Promise,
    PromiseResult,
};
use mintbase_deps::token::{
    Owner,
    Token,
    TokenCompliant,
};

use crate::*;

// ----------------------- standardized core methods ------------------------ //
#[near_bindgen]
impl MintbaseStore {
    // -------------------------- change methods ---------------------------

    #[payable]
    pub fn nft_transfer(
        &mut self,
        receiver_id: AccountId,
        token_id: U64,
        approval_id: Option<u64>,
        memo: Option<String>,
    ) {
        assert_one_yocto();
        let token_idu64 = token_id.into();
        let mut token = self.nft_token_internal(token_idu64);
        let old_owner = token.owner_id.to_string();
        assert!(!token.is_loaned());
        if !token.is_pred_owner() {
            assert!(self.nft_is_approved_internal(
                &token,
                env::predecessor_account_id(),
                approval_id
            ));
        }

        self.transfer_internal(&mut token, receiver_id.clone(), true);
        log_nft_transfer(&receiver_id, token_idu64, &memo, old_owner);
    }

    #[payable]
    pub fn nft_transfer_call(
        &mut self,
        receiver_id: AccountId,
        token_id: U64,
        approval_id: Option<u64>,
        msg: String,
    ) -> Promise {
        assert_one_yocto();
        let token_idu64 = token_id.into();
        let mut token = self.nft_token_internal(token_idu64);
        assert!(!token.is_loaned());
        let pred = env::predecessor_account_id();
        if !token.is_pred_owner() {
            // check if pred has an approval
            let approval_id: Option<u64> = approval_id;
            assert!(self.nft_is_approved_internal(&token, pred.clone(), approval_id));
        }
        // prevent race condition, temporarily lock-replace owner
        let owner_id = AccountId::new_unchecked(token.owner_id.to_string());
        self.lock_token(&mut token);

        ext_on_transfer::nft_on_transfer(
            pred,
            owner_id.clone(),
            token_id,
            msg,
            receiver_id.clone(),
            NO_DEPOSIT,
            gas::NFT_TRANSFER_CALL,
        )
        .then(store_self::nft_resolve_transfer(
            owner_id,
            receiver_id,
            token_id.0.to_string(),
            None,
            env::current_account_id(),
            NO_DEPOSIT,
            gas::NFT_TRANSFER_CALL,
        ))
    }

    // -------------------------- view methods -----------------------------

    pub fn nft_token(
        &self,
        token_id: U64,
    ) -> Option<TokenCompliant> {
        Some(self.nft_token_compliant_internal(token_id.0))
    }

    // -------------------------- private methods --------------------------

    #[private]
    pub fn nft_resolve_transfer(
        &mut self,
        owner_id: AccountId,
        receiver_id: AccountId,
        token_id: String,
        // NOTE: might borsh::maybestd::collections::HashMap be more appropriate?
        approved_account_ids: Option<HashMap<AccountId, u64>>,
    ) -> bool {
        let l = format!(
            "owner_id={} receiver_id={} token_id={} approved_ids={:?} pred={}",
            owner_id,
            receiver_id,
            token_id,
            approved_account_ids,
            env::predecessor_account_id()
        );
        env::log_str(l.as_str());
        let token_id_u64 = token_id.parse::<u64>().unwrap();
        let mut token = self.nft_token_internal(token_id_u64);
        self.unlock_token(&mut token);
        assert_eq!(env::promise_results_count(), 1);
        // Get whether token should be returned
        let must_revert = match env::promise_result(0) {
            PromiseResult::NotReady => unreachable!(),
            PromiseResult::Successful(value) => {
                if let Ok(yes_or_no) = near_sdk::serde_json::from_slice::<bool>(&value) {
                    yes_or_no
                } else {
                    true
                }
            },
            PromiseResult::Failed => true,
        };
        if !must_revert {
            true
        } else {
            self.transfer_internal(&mut token, receiver_id.clone(), true);
            log_nft_transfer(&receiver_id, token_id_u64, &None, owner_id.to_string());
            false
        }
    }
}

// --------------------- non-standardized core methods ---------------------- //
#[near_bindgen]
impl MintbaseStore {
    // -------------------------- change methods ---------------------------

    #[payable]
    pub fn nft_batch_transfer(
        &mut self,
        token_ids: Vec<(U64, AccountId)>,
    ) {
        near_sdk::assert_one_yocto();
        assert!(!token_ids.is_empty());
        let pred = env::predecessor_account_id();
        let mut set_owned = self.tokens_per_owner.get(&pred).expect("none owned");
        let (tokens, accounts, old_owners) = token_ids
            .into_iter()
            .map(|(token_id, account_id)| {
                let token_idu64 = token_id.into();
                let mut token = self.nft_token_internal(token_idu64);
                let old_owner = token.owner_id.to_string();
                assert!(!token.is_loaned());
                assert!(token.is_pred_owner());
                assert_ne!(account_id.to_string(), token.owner_id.to_string()); // can't transfer to self
                self.transfer_internal(&mut token, account_id.clone(), false);
                set_owned.remove(&token_idu64);
                (token_id, account_id, old_owner)
            })
            .fold((vec![], vec![], vec![]), |mut acc, (tid, aid, oid)| {
                acc.0.push(tid);
                acc.1.push(aid);
                acc.2.push(oid);
                acc
            });
        self.tokens_per_owner.insert(&pred, &set_owned);
        log_nft_batch_transfer(&tokens, &accounts, old_owners);
    }

    // -------------------------- view methods -----------------------------

    // -------------------------- private methods --------------------------

    // -------------------------- internal methods -------------------------

    /// Set the owner of `token` to `to` and clear the approvals on the
    /// token. Update the `tokens_per_owner` sets. `remove_prior` is an
    /// optimization on batch removal, in particular useful for batch sending
    /// of tokens.
    ///
    /// If remove prior is true, expect that the token is not composed, and
    /// remove the token owner from self.tokens_per_owner.
    pub(crate) fn transfer_internal(
        &mut self,
        token: &mut Token,
        to: AccountId,
        remove_prior: bool,
    ) {
        let update_set = if remove_prior {
            Some(AccountId::try_from(token.owner_id.to_string()).unwrap())
        } else {
            None
        };
        token.split_owners = None;
        self.update_tokens_per_owner(token.id, update_set, Some(to.clone()));
        token.owner_id = Owner::Account(to);
        token.approvals.clear();
        self.tokens.insert(&token.id, token);
    }

    // TODO: documentation
    pub(crate) fn nft_token_internal(
        &self,
        token_id: u64,
    ) -> Token {
        self.tokens
            .get(&token_id)
            .unwrap_or_else(|| panic!("token: {} doesn't exist", token_id))
    }

    // TODO: fix this abomination
    pub(crate) fn nft_token_compliant_internal(
        &self,
        token_id: u64,
    ) -> TokenCompliant {
        self.tokens
            .get(&token_id)
            .map(|x| {
                let metadata = self.nft_token_metadata(U64(x.id));
                let royalty = self.get_token_royalty(U64(x.id));
                let metadata = TokenMetadataCompliant {
                    title: metadata.title,
                    description: metadata.description,
                    media: metadata.media,
                    media_hash: metadata.media_hash,
                    copies: metadata.copies,
                    issued_at: None,
                    expires_at: metadata.expires_at,
                    starts_at: metadata.starts_at,
                    updated_at: None,
                    extra: metadata.extra,
                    reference: metadata.reference,
                    reference_hash: metadata.reference_hash,
                };
                TokenCompliant {
                    token_id: format!("{}", x.id),
                    owner_id: x.owner_id,
                    approved_account_ids: x.approvals,
                    metadata,
                    royalty,
                    split_owners: x.split_owners,
                    minter: x.minter,
                    loan: x.loan,
                    composeable_stats: x.composeable_stats,
                    origin_key: x.origin_key,
                }
            })
            .unwrap_or_else(|| panic!("token: {} doesn't exist", token_id))
    }
}

'''
'''--- store/src/enumeration.rs ---
use mintbase_deps::near_sdk::json_types::U64;
use mintbase_deps::near_sdk::{
    self,
    near_bindgen,
    AccountId,
};
use mintbase_deps::token::TokenCompliant;

use crate::*;

// -------------------- standardized enumeration methods -------------------- //
#[near_bindgen]
impl MintbaseStore {
    pub fn nft_total_supply(&self) -> U64 {
        self.tokens_minted.into()
    }

    pub fn nft_tokens(
        &self,
        from_index: Option<String>, // default: "0"
        limit: Option<u64>,         // default: = self.nft_total_supply()
    ) -> Vec<TokenCompliant> {
        let from_index: u64 = from_index
            .unwrap_or_else(|| "0".to_string())
            .parse()
            .unwrap();
        let limit = limit.unwrap_or(self.nft_total_supply().0);
        (from_index..limit)
            .into_iter()
            .map(|token_id| self.nft_token_compliant_internal(token_id))
            .collect()
    }

    pub fn nft_supply_for_owner(
        &self,
        account_id: AccountId,
    ) -> U64 {
        self.tokens_per_owner
            .get(&account_id)
            .map(|v| v.len())
            .unwrap_or(0)
            .into()
    }

    pub fn nft_tokens_for_owner(
        &self,
        account_id: AccountId,
        from_index: Option<String>,
        limit: Option<usize>,
    ) -> Vec<TokenCompliant> {
        self.tokens_per_owner
            .get(&account_id)
            .expect("no tokens")
            .iter()
            .skip(
                from_index
                    .unwrap_or_else(|| "0".to_string())
                    .parse()
                    .unwrap(),
            )
            .take(limit.unwrap_or(10))
            .map(|x| self.nft_token_compliant_internal(x))
            .collect::<Vec<_>>()
    }
}

// ------------------ non-standardized enumeration methods ------------------ //
#[near_bindgen]
impl MintbaseStore {}

'''
'''--- store/src/lib.rs ---
use mintbase_deps::common::{
    NFTContractMetadata,
    Royalty,
    TokenMetadata,
    TokenMetadataCompliant,
};
use mintbase_deps::constants::{
    storage_stake,
    StorageCosts,
    YOCTO_PER_BYTE,
};
use mintbase_deps::near_sdk::borsh::{
    self,
    BorshDeserialize,
    BorshSerialize,
};
use mintbase_deps::near_sdk::collections::{
    LookupMap,
    UnorderedSet,
};
use mintbase_deps::near_sdk::json_types::{
    U128,
    U64,
};
use mintbase_deps::near_sdk::{
    self,
    assert_one_yocto,
    env,
    ext_contract,
    near_bindgen,
    AccountId,
    StorageUsage,
};
use mintbase_deps::token::{
    Owner,
    Token,
};

/// Implementing approval management as [described in the Nomicon](https://nomicon.io/Standards/NonFungibleToken/ApprovalManagement).
mod approvals;
/// Implementing any methods related to burning.
mod burning;
/// Implementing core functionality of an NFT contract as [described in the Nomicon](https://nomicon.io/Standards/NonFungibleToken/Core).
mod core;
/// Implementing enumeration as [described in the Nomicon](https://nomicon.io/Standards/NonFungibleToken/Enumeration).
mod enumeration;
/// Implementing metadata as [described in the Nomicon](https://nomicon.io/Standards/NonFungibleToken/Metadata).
mod metadata;
/// Implementing any methods related to minting.
mod minting;
/// Implementing any methods related to store ownership.
mod ownership;
/// Implementing payouts as [described in the Nomicon](https://nomicon.io/Standards/NonFungibleToken/Payout).
mod payout;

// ----------------------------- smart contract ----------------------------- //

// TODO: shouldn't this be PanicOnDefault?
#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct MintbaseStore {
    /// Accounts that are allowed to mint tokens on this Store.
    pub minters: UnorderedSet<AccountId>,
    /// Initial deployment data of this Store.
    pub metadata: NFTContractMetadata,
    /// If a Minter mints more than one token at a time, all tokens will
    /// share the same `TokenMetadata`. It's more storage-efficient to store
    /// that `TokenMetadata` once, rather than to copy the data on each
    /// Token. The key is generated from `tokens_minted`. The map keeps count
    /// of how many copies of this token remain, so that the element may be
    /// dropped when the number reaches zero (ie, when tokens are burnt).
    pub token_metadata: LookupMap<u64, (u16, TokenMetadata)>,
    /// If a Minter mints more than one token at a time, all tokens will
    /// share the same `Royalty`. It's more storage-efficient to store that
    /// `Royalty` once, rather than to copy the data on each Token. The key
    /// is generated from `tokens_minted`. The map keeps count of how many
    /// copies of this token remain, so that the element may be dropped when
    /// the number reaches zero (ie, when tokens are burnt).
    pub token_royalty: LookupMap<u64, (u16, Royalty)>,
    /// Tokens this Store has minted, excluding those that have been burned.
    pub tokens: LookupMap<u64, Token>,
    /// A mapping from each user to the tokens owned by that user. The owner
    /// of the token is also stored on the token itself.
    pub tokens_per_owner: LookupMap<AccountId, UnorderedSet<u64>>,
    /// A map from a token_id of a token on THIS contract to a set of tokens,
    /// that may be on ANY contract. If the owned-token is on this contract,
    /// the id will have format "<u64>". If the token is on another contract,
    /// the token will have format "<u64>:account_id"
    pub composeables: LookupMap<String, UnorderedSet<String>>,
    /// The number of tokens this `Store` has minted. Used to generate
    /// `TokenId`s.
    pub tokens_minted: u64,
    /// The number of tokens this `Store` has burned.
    pub tokens_burned: u64,
    /// The number of tokens approved (listed) by this `Store`. Used to index
    /// listings and approvals. List ID format: `list_nonce:token_key`
    pub num_approved: u64,
    /// The owner of the Contract.
    pub owner_id: AccountId,
    /// The Near-denominated price-per-byte of storage, and associated
    /// contract storage costs. As of April 2021, the price per bytes is set
    /// to 10^19, but this may change in the future, thus this
    /// future-proofing field.
    pub storage_costs: StorageCosts,
    /// If false, disallow users to call `nft_move`.
    pub allow_moves: bool,
}

impl Default for MintbaseStore {
    fn default() -> Self {
        env::panic_str("no default")
    }
}

#[near_bindgen]
impl MintbaseStore {
    /// Create a new `Store`. `new` validates the `store_description`.
    ///
    /// The `Store` is initialized with the owner as a `minter`.
    #[init]
    pub fn new(
        metadata: NFTContractMetadata,
        owner_id: AccountId,
    ) -> Self {
        assert!(!env::state_exists(), "Already, initialized");
        let mut minters = UnorderedSet::new(b"a".to_vec());
        minters.insert(&owner_id);

        Self {
            minters,
            metadata,
            token_metadata: LookupMap::new(b"b".to_vec()),
            token_royalty: LookupMap::new(b"c".to_vec()),
            tokens: LookupMap::new(b"d".to_vec()),
            tokens_per_owner: LookupMap::new(b"e".to_vec()),
            composeables: LookupMap::new(b"f".to_vec()),
            tokens_minted: 0,
            tokens_burned: 0,
            num_approved: 0,
            owner_id,
            storage_costs: StorageCosts::new(YOCTO_PER_BYTE), // 10^19
            allow_moves: true,
        }
    }

    // -------------------------- change methods ---------------------------
    // -------------------------- view methods -----------------------------

    /// Get the holder of the token. The token may be owned by:
    /// - a normal account: return that account.
    /// - a lent out account : in that case, return the loan holder.
    /// - a token on this contract: recursively search for the root token and
    /// return its owner
    /// - a token on another contract. Return: "PARENT_TOKEN_ID:CONTRACT_ID".
    pub fn nft_holder(
        &self,
        token_id: U64,
    ) -> String {
        let token = self.nft_token_internal(token_id.into());
        match token.get_owner_or_loaner() {
            Owner::Account(owner) => owner.to_string(),
            Owner::TokenId(id) => self.nft_holder(id.into()),
            Owner::CrossKey(key) => (key.to_string()),
            Owner::Lock(_) => (env::panic_str("token locked")),
        }
    }

    /// A non-indexed implementation. `from_index` and `limit are removed, so as
    /// to support the:
    ///
    /// `tokens_per_owner: LookupMap<AccountId, UnorderedSet<TokenId>>`
    ///
    /// type. They may be used in an implementation if the type is instead:
    ///
    /// `tokens_per_owner: LookupMap<AccountId, Vector<TokenId>>`
    pub fn nft_tokens_for_owner_set(
        &self,
        account_id: AccountId,
    ) -> Vec<u64> {
        self.tokens_per_owner
            .get(&account_id)
            .expect("no tokens")
            .iter()
            .collect()
    }

    /// Get the number of unburned copies of the token in existance.
    pub fn get_token_remaining_copies(
        &self,
        token_id: U64,
    ) -> u16 {
        self.token_metadata
            .get(&self.nft_token_internal(token_id.into()).metadata_id)
            .expect("bad metadata_id")
            .0
    }

    // -------------------------- private methods --------------------------

    /// Contract metadata and methods in the API may be updated. All other
    /// elements of the state should be copied over. This method may only be
    /// called by the holder of the Store public key, in this case the
    /// Factory.
    #[private]
    #[init(ignore_state)]
    pub fn migrate(metadata: NFTContractMetadata) -> Self {
        let old = env::state_read().expect("ohno ohno state");
        Self { metadata, ..old }
    }

    // -------------------------- internal methods -------------------------

    /// If allow_moves is false, disallow token owners from calling
    /// `nft_move` on this contract, AND on other contracts targetting this
    /// contract. `nft_move` allows the user to burn a token they own on one
    /// contract, and re-mint it on another contract.
    #[payable]
    pub fn set_allow_moves(
        &mut self,
        state: bool,
    ) {
        self.assert_store_owner();
        self.allow_moves = state;
    }

    /// Internal
    /// Transfer a token_id from one account's owned-token-set to another's.
    /// Callers of this method MUST validate that `from` owns the token before
    /// calling this method.
    ///
    /// If `to` is None, the tokens are either being burned or composed.
    ///
    /// If `from` is None, the tokens are being uncomposed.
    ///
    /// If neither are None, the tokens are being transferred.
    fn update_tokens_per_owner(
        &mut self,
        token_id: u64,
        from: Option<AccountId>,
        to: Option<AccountId>,
    ) {
        if let Some(from) = from {
            let mut old_owner_owned_set = self.tokens_per_owner.get(&from).unwrap();
            old_owner_owned_set.remove(&token_id);
            if old_owner_owned_set.is_empty() {
                self.tokens_per_owner.remove(&from);
            } else {
                self.tokens_per_owner.insert(&from, &old_owner_owned_set);
            }
        }
        if let Some(to) = to {
            let mut new_owner_owned_set = self.get_or_make_new_owner_set(&to);
            new_owner_owned_set.insert(&token_id);
            self.tokens_per_owner.insert(&to, &new_owner_owned_set);
        }
    }

    // TODO: unused, deprecated?
    // /// Internal
    // /// update the set of tokens composed underneath parent. If insert is
    // /// true, insert token_id; if false, try to remove it.
    // fn update_composed_sets(
    //     &mut self,
    //     child: String,
    //     parent: String,
    //     insert: bool,
    // ) {
    //     let mut set = self.get_or_new_composed(parent.to_string());
    //     if insert {
    //         set.insert(&child);
    //     } else {
    //         set.remove(&child);
    //     }
    //     if set.is_empty() {
    //         self.composeables.remove(&parent);
    //     } else {
    //         self.composeables.insert(&parent, &set);
    //     }
    // }

    // TODO: unused, deprecated?
    // /// Internal
    // /// update the set of tokens composed underneath parent. If insert is
    // /// true, insert token_id; if false, try to remove it.
    // pub(crate) fn get_or_new_composed(
    //     &mut self,
    //     parent: String,
    // ) -> UnorderedSet<String> {
    //     self.composeables.get(&parent).unwrap_or_else(|| {
    //         let mut prefix: Vec<u8> = vec![b'h'];
    //         prefix.extend_from_slice(parent.to_string().as_bytes());
    //         UnorderedSet::new(prefix)
    //     })
    // }

    /// If an account_id has never owned tokens on this store, we must
    /// construct an `UnorderedSet` for them. If they have owned tokens on
    /// this store, get that set.
    /// Internal
    pub(crate) fn get_or_make_new_owner_set(
        &self,
        account_id: &AccountId,
    ) -> UnorderedSet<u64> {
        self.tokens_per_owner.get(account_id).unwrap_or_else(|| {
            let mut prefix: Vec<u8> = vec![b'j'];
            prefix.extend_from_slice(account_id.as_bytes());
            UnorderedSet::new(prefix)
        })
    }

    /// Internal
    fn lock_token(
        &mut self,
        token: &mut Token,
    ) {
        if let Owner::Account(ref s) = token.owner_id {
            token.owner_id = Owner::Lock(s.clone());
            self.tokens.insert(&token.id, token);
        }
    }

    /// Internal
    fn unlock_token(
        &mut self,
        token: &mut Token,
    ) {
        if let Owner::Lock(ref s) = token.owner_id {
            token.owner_id = Owner::Account(s.clone());
            self.tokens.insert(&token.id, token);
        }
    }
}

// ----------------------- contract interface modules ----------------------- //

#[ext_contract(store_self)]
pub trait NonFungibleResolveTransfer {
    /// Finalize an `nft_transfer_call` chain of cross-contract calls.
    ///
    /// The `nft_transfer_call` process:
    ///
    /// 1. Sender calls `nft_transfer_call` on FT contract
    /// 2. NFT contract transfers token from sender to receiver
    /// 3. NFT contract calls `nft_on_transfer` on receiver contract
    /// 4+. [receiver contract may make other cross-contract calls]
    /// N. NFT contract resolves promise chain with `nft_resolve_transfer`, and may
    ///    transfer token back to sender
    ///
    /// Requirements:
    /// * Contract MUST forbid calls to this function by any account except self
    /// * If promise chain failed, contract MUST revert token transfer
    /// * If promise chain resolves with `true`, contract MUST return token to
    ///   `sender_id`
    ///
    /// Arguments:
    /// * `sender_id`: the sender of `ft_transfer_call`
    /// * `token_id`: the `token_id` argument given to `ft_transfer_call`
    /// * `approved_token_ids`: if using Approval Management, contract MUST provide
    ///   set of original approved accounts in this argument, and restore these
    ///   approved accounts in case of revert.
    ///
    /// Returns true if token was successfully transferred to `receiver_id`.
    ///
    /// Mild modifications from core standard, commented where applicable.
    #[private]
    fn nft_resolve_transfer(
        &mut self,
        owner_id: AccountId,
        receiver_id: AccountId,
        token_id: String,
        approved_account_ids: Option<Vec<String>>,
    );
}

'''
'''--- store/src/metadata.rs ---
use mintbase_deps::common::{
    NFTContractMetadata,
    NonFungibleContractMetadata,
    TokenMetadata,
};
use mintbase_deps::logging::{
    log_set_base_uri,
    log_set_icon_base64,
};
use mintbase_deps::near_sdk::json_types::U64;
use mintbase_deps::near_sdk::{
    self,
    env,
    near_bindgen,
};

use crate::*;

// --------------------- standardized metadata methods ---------------------- //
#[near_bindgen]
impl NonFungibleContractMetadata for MintbaseStore {
    fn nft_metadata(&self) -> &NFTContractMetadata {
        &self.metadata
    }
}

// ------------------- non-standardized metadata methods -------------------- //
#[near_bindgen]
impl MintbaseStore {
    // -------------------------- change methods ---------------------------

    /// The `base_uri` for the `Store` is the identifier used to look up the
    /// `Store` on Arweave. Changing the `base_uri` requires the `Store`
    /// owner to be responsible for making sure their `Store` location is
    /// maintained by their preferred storage provider.
    ///
    /// Only the `Store` owner may call this function.
    #[payable]
    pub fn set_base_uri(
        &mut self,
        base_uri: String,
    ) {
        self.assert_store_owner();
        assert!(base_uri.len() <= 100);
        log_set_base_uri(&base_uri);
        self.metadata.base_uri = Some(base_uri);
    }

    /// `icon_base64` is best understood as the `Store` logo/icon.
    ///
    /// Only the store owner may call this function.
    #[payable]
    pub fn set_icon_base64(
        &mut self,
        icon: Option<String>,
    ) {
        self.assert_store_owner();
        assert!(icon.as_ref().map(|b| b.len() <= 100).unwrap_or(true));
        log_set_icon_base64(&icon);
        self.metadata.icon = icon;
    }

    // -------------------------- view methods -----------------------------

    /// Get the on-contract metadata for a Token. Note that on-contract metadata
    /// is only a small subset of the metadata stored at the `token_uri`, which
    /// can be retrieved by calling `get_token_uri`. The metadata structure is not
    /// stored on the token, as this would lead to duplication of Metadata across
    /// tokens. Instead, the Metadata is stored in a Contract `LookupMap`.
    pub fn nft_token_metadata(
        &self,
        token_id: U64,
        // TODO: why not `TokenMetadataCompliant`?
    ) -> TokenMetadata {
        self.token_metadata
            .get(&self.nft_token_internal(token_id.into()).metadata_id)
            .expect("bad metadata_id")
            .1
    }

    /// The Token URI is generated to index the token on whatever distributed
    /// storage platform this `Store` uses. Mintbase publishes token data on
    /// Arweave. `Store` owners may opt to use their own storage platform.
    pub fn nft_token_uri(
        &self,
        token_id: U64,
    ) -> String {
        let base = &self.metadata.base_uri.as_ref().expect("no base_uri");
        let metadata_reference = self
            .nft_token_metadata(token_id)
            .reference
            .expect("no reference");
        format!("{}/{}", base, metadata_reference)
    }

    /// Get the `token_key` for `token_id`. The `token_key` is the
    /// combination of the token's `token_id` (unique within this `Store`),
    /// and the `Store` address (unique across all contracts). The String is
    /// unique across `Store`s. The String is used by other Mintbase
    /// contracts as a permanent unique identifier for tokens.
    pub fn nft_token_key(
        &self,
        token_id: U64,
    ) -> String {
        let id: u64 = token_id.into();
        format!("{}:{}", id, env::current_account_id())
    }
}

'''
'''--- store/src/minting.rs ---
use mintbase_deps::common::{
    NewSplitOwner,
    Royalty,
    RoyaltyArgs,
    SplitBetweenUnparsed,
    SplitOwners,
    TokenMetadata,
};
use mintbase_deps::constants::MAX_LEN_PAYOUT;
use mintbase_deps::logging::{
    log_grant_minter,
    log_nft_batch_mint,
    log_revoke_minter,
};
use mintbase_deps::near_sdk::{
    self,
    env,
    near_bindgen,
    AccountId,
    Balance,
};
use mintbase_deps::token::Token;

use crate::*;

#[near_bindgen]
impl MintbaseStore {
    // -------------------------- change methods ---------------------------

    /// The core `Store` function. `mint_token` mints `num_to_mint` copies of
    /// a token.
    ///
    /// Restrictions:
    /// - Only minters may call this function.
    /// - `owner_id` must be a valid Near address.
    /// - Because of logging limits, this method may mint at most 99 tokens per call.
    /// - 1.0 >= `royalty_f` >= 0.0. `royalty_f` is ignored if `royalty` is `None`.
    /// - If a `royalty` is provided, percentages **must** be non-negative and add to one.
    /// - The maximum length of the royalty mapping is 50.
    ///
    /// This method is the most significant increase of storage costs on this
    /// contract. Minters are expected to manage their own storage costs.
    #[payable]
    pub fn nft_batch_mint(
        &mut self,
        owner_id: AccountId,
        metadata: TokenMetadata,
        num_to_mint: u64,
        royalty_args: Option<RoyaltyArgs>,
        split_owners: Option<SplitBetweenUnparsed>,
    ) {
        assert!(num_to_mint > 0);
        assert!(num_to_mint <= 125); // upper gas limit
        assert!(env::attached_deposit() >= 1);
        let minter_id = env::predecessor_account_id();
        assert!(
            self.minters.contains(&minter_id),
            "{} not a minter",
            minter_id.as_ref()
        );

        // Calculating storage consuption upfront saves gas if the transaction
        // were to fail later.
        let covered_storage = env::account_balance()
            - (env::storage_usage() as u128 * self.storage_costs.storage_price_per_byte);
        let (metadata, md_size) = TokenMetadata::from_with_size(metadata, num_to_mint);
        let roy_len = royalty_args
            .as_ref()
            .map(|pre_roy| {
                let len = pre_roy.split_between.len();
                len as u32
            })
            .unwrap_or(0);
        let split_len = split_owners
            .as_ref()
            .map(|pre_split| {
                let len = pre_split.len();
                len as u32
            })
            // if there is no split map, there still is an owner, thus default to 1
            .unwrap_or(1);
        assert!(roy_len + split_len <= MAX_LEN_PAYOUT);
        let expected_storage_consumption: Balance =
            self.storage_cost_to_mint(num_to_mint, md_size, roy_len, split_len);
        assert!(
            covered_storage >= expected_storage_consumption,
            "covered: {}; need: {}",
            covered_storage,
            expected_storage_consumption
        );

        let checked_royalty = royalty_args.map(Royalty::new);
        let checked_split = split_owners.map(SplitOwners::new);

        let mut owned_set = self.get_or_make_new_owner_set(&owner_id);

        // Lookup Id is used by the token to lookup Royalty and Metadata fields on
        // the contract (to avoid unnecessary duplication)
        let lookup_id: u64 = self.tokens_minted;
        let royalty_id = checked_royalty.clone().map(|royalty| {
            self.token_royalty
                .insert(&lookup_id, &(num_to_mint as u16, royalty));
            lookup_id
        });

        let meta_ref = metadata.reference.as_ref().map(|s| s.to_string());
        let meta_extra = metadata.extra.as_ref().map(|s| s.to_string());
        self.token_metadata
            .insert(&lookup_id, &(num_to_mint as u16, metadata));

        // Mint em up hot n fresh with a side of vegan bacon
        (0..num_to_mint).for_each(|i| {
            let token_id = self.tokens_minted + i;
            let token = Token::new(
                owner_id.clone(),
                token_id,
                lookup_id,
                royalty_id,
                checked_split.clone(),
                minter_id.clone(),
            );
            owned_set.insert(&token_id);
            self.tokens.insert(&token_id, &token);
        });
        self.tokens_minted += num_to_mint;
        self.tokens_per_owner.insert(&owner_id, &owned_set);

        let minted = self.tokens_minted;
        log_nft_batch_mint(
            minted - num_to_mint,
            minted - 1,
            minter_id.as_ref(),
            owner_id.as_ref(),
            &checked_royalty,
            &checked_split,
            &meta_ref,
            &meta_extra,
        );
    }

    /// Modify the minting privileges of `account_id`. Minters are able to
    /// mint tokens on this `Store`.
    ///
    /// Only the store owner may call this function.
    ///
    /// This method increases storage costs of the contract.
    #[payable]
    pub fn grant_minter(
        &mut self,
        account_id: AccountId,
    ) {
        self.assert_store_owner();
        let account_id: AccountId = account_id;
        // does nothing if account_id is already a minter
        if self.minters.insert(&account_id) {
            log_grant_minter(&account_id);
        }
    }

    /// Modify the minting privileges of `account_id`. Minters are able to
    /// mint tokens on this `Store`. The current `Store` owner cannot revoke
    /// themselves.
    ///
    /// Only the store owner may call this function.
    #[payable]
    pub fn revoke_minter(
        &mut self,
        account_id: AccountId,
    ) {
        self.assert_store_owner();
        assert_ne!(account_id, self.owner_id, "can't revoke owner");
        if !self.minters.remove(&account_id) {
            env::panic_str("not a minter")
        } else {
            log_revoke_minter(&account_id);
        }
    }

    // -------------------------- view methods -----------------------------

    /// Check if `account_id` is a minter.
    pub fn check_is_minter(
        &self,
        account_id: AccountId,
    ) -> bool {
        self.minters.contains(&account_id)
    }

    /// Lists all account IDs that are currently allowed to mint on this
    /// contract.
    pub fn list_minters(&self) -> Vec<AccountId> {
        self.minters.iter().collect()
    }

    // -------------------------- private methods --------------------------
    // -------------------------- internal methods -------------------------

    /// Get the storage in bytes to mint `num_tokens` each with
    /// `metadata_storage` and `len_map` royalty receivers.
    /// Internal
    fn storage_cost_to_mint(
        &self,
        num_tokens: u64,
        metadata_storage: StorageUsage,
        num_royalties: u32,
        num_splits: u32,
    ) -> near_sdk::Balance {
        // create an entry in tokens_per_owner
        self.storage_costs.common
            // create a metadata record
            + metadata_storage as u128 * self.storage_costs.storage_price_per_byte
            // create a royalty record
            + num_royalties as u128 * self.storage_costs.common
            // create n tokens each with splits stored on-token
            + num_tokens as u128 * (self.storage_costs.token + num_splits as u128 * self.storage_costs.common)
    }
}

'''
'''--- store/src/ownership.rs ---
use mintbase_deps::logging::{
    log_grant_minter,
    log_revoke_minter,
    log_transfer_store,
};
use mintbase_deps::near_sdk::{
    self,
    near_bindgen,
    AccountId,
};

use crate::*;

#[near_bindgen]
impl MintbaseStore {
    // -------------------------- change methods ---------------------------
    /// Transfer ownership of `Store` to a new owner. Setting
    /// `keep_old_minters=true` allows all existing minters (including the
    /// prior owner) to keep their minter status.
    ///
    /// Only the store owner may call this function.
    #[payable]
    pub fn transfer_store_ownership(
        &mut self,
        new_owner: AccountId,
        keep_old_minters: bool,
    ) {
        self.assert_store_owner();
        let new_owner = new_owner;
        assert_ne!(new_owner, self.owner_id, "can't can't transfer to self");
        if !keep_old_minters {
            for minter in self.minters.iter() {
                log_revoke_minter(&minter);
            }
            self.minters.clear();
        }
        log_grant_minter(&new_owner);
        // add the new_owner to the minter set (insert does nothing if they already are a minter).
        self.minters.insert(&new_owner);
        log_transfer_store(&new_owner);
        self.owner_id = new_owner;
    }

    /// Owner of this `Store` may call to withdraw Near deposited onto
    /// contract for storage. Contract storage deposit must maintain a
    /// cushion of at least 50kB (0.5 Near) beyond that necessary for storage
    /// usage.
    ///
    /// Only the store owner may call this function.
    #[payable]
    pub fn withdraw_excess_storage_deposits(&mut self) {
        self.assert_store_owner();
        let unused_deposit: u128 = env::account_balance()
            - env::storage_usage() as u128 * self.storage_costs.storage_price_per_byte;
        if unused_deposit > storage_stake::CUSHION {
            near_sdk::Promise::new(self.owner_id.clone())
                .transfer(unused_deposit - storage_stake::CUSHION);
        } else {
            let s = format!(
                "Nothing withdrawn. Unused deposit is less than 0.5N: {}",
                unused_deposit
            );
            env::log_str(s.as_str());
        }
    }

    /// The Near Storage price per byte has changed in the past, and may
    /// change in the future. This method may never be used.
    ///
    /// Only the store owner may call this function.
    #[payable]
    pub fn set_storage_price_per_byte(
        &mut self,
        new_price: U128,
    ) {
        self.assert_store_owner();
        self.storage_costs = StorageCosts::new(new_price.into())
    }

    // -------------------------- view methods -----------------------------
    // TODO: get_owner
    // TODO: get_storage_price_per_byte
    // -------------------------- private methods --------------------------
    // -------------------------- internal methods -------------------------

    /// Validate the caller of this method matches the owner of this `Store`.
    pub(crate) fn assert_store_owner(&self) {
        assert_one_yocto();
        assert_eq!(
            self.owner_id,
            env::predecessor_account_id(),
            "caller not the owner"
        );
    }
}

'''
'''--- store/src/payout.rs ---
use mintbase_deps::common::{
    NewSplitOwner,
    OwnershipFractions,
    Payout,
    Royalty,
    SplitBetweenUnparsed,
    SplitOwners,
};
use mintbase_deps::constants::MAX_LEN_PAYOUT;
use mintbase_deps::logging::log_set_split_owners;
use mintbase_deps::near_sdk::json_types::{
    U128,
    U64,
};
use mintbase_deps::near_sdk::{
    self,
    assert_one_yocto,
    env,
    near_bindgen,
    AccountId,
};
use mintbase_deps::token::Owner;

use crate::*;

// ---------------------- standardized payout methods ----------------------- //
#[near_bindgen]
impl MintbaseStore {
    // -------------------------- change methods ---------------------------
    #[payable]
    pub fn nft_transfer_payout(
        &mut self,
        receiver_id: AccountId,
        token_id: U64,
        approval_id: u64,
        balance: near_sdk::json_types::U128,
        max_len_payout: u32,
    ) -> Payout {
        assert_one_yocto();
        let payout = self.nft_payout(token_id, balance, max_len_payout);
        self.nft_transfer(receiver_id, token_id, Some(approval_id), None);
        payout
    }

    // -------------------------- view methods -----------------------------
    pub fn nft_payout(
        &self,
        token_id: U64,
        balance: U128,
        max_len_payout: u32,
    ) -> Payout {
        let token = self.nft_token(token_id).expect("no token");
        match token.owner_id {
            Owner::Account(_) => {},
            _ => env::panic_str("token is composed"),
        }
        let payout = OwnershipFractions::new(
            &token.owner_id.to_string(),
            &self.get_token_royalty(token_id),
            &token.split_owners,
        )
        .into_payout(balance.into());
        let payout_len = payout.payout.len();
        if max_len_payout < payout_len as u32 {
            near_sdk::env::panic_str(format!("payout too long: {}", payout_len).as_str());
        }
        payout
    }
}

// -------------------- non-standardized payout methods --------------------- //
#[near_bindgen]
impl MintbaseStore {
    // -------------------------- change methods ---------------------------

    /// The `SplitOwners` of the token each receive some percentage of the _next_
    /// sale of the token. After the token is transferred, the SplitOwners field
    /// will be marked `None`, but may be set again by the next owner of the
    /// token. This method may only be called if the current `SplitOwners` field
    /// is `None`.
    ///
    /// Only the token owner may call this function.
    #[payable]
    pub fn set_split_owners(
        &mut self,
        token_ids: Vec<U64>,
        split_between: SplitBetweenUnparsed,
    ) {
        assert!(!token_ids.is_empty());
        assert!(split_between.len() >= 2, "split len must be >= 2");
        let storage_cost =
            (self.storage_costs.common * split_between.len() as u128) * token_ids.len() as u128;
        assert!(
            env::attached_deposit() >= storage_cost,
            "insuf. deposit. Need: {}",
            storage_cost
        );
        let splits = SplitOwners::new(split_between);

        token_ids.iter().for_each(|&token_id| {
            let mut token = self.nft_token_internal(token_id.into());
            assert!(!token.is_loaned());
            assert!(token.is_pred_owner());
            assert!(token.split_owners.is_none());
            let roy_len = match token.royalty_id {
                Some(royalty_id) => self
                    .token_royalty
                    .get(&royalty_id)
                    .unwrap()
                    .1
                    .split_between
                    .len(),
                None => 0,
            };
            assert!(splits.split_between.len() + roy_len <= MAX_LEN_PAYOUT as usize);

            token.split_owners = Some(splits.clone());
            self.tokens.insert(&token_id.into(), &token);
        });
        log_set_split_owners(&token_ids, &splits);
    }

    // -------------------------- view methods -----------------------------

    /// Get the Royalty for a Token. The `Royalty` structure is not stored on the
    /// token, as this would lead to duplication of `Royalty`s across tokens.
    /// Instead, the `Royalty` is stored in a Contract `LookupMap`.
    pub fn get_token_royalty(
        &self,
        token_id: U64,
    ) -> Option<Royalty> {
        let royalty_id = self.nft_token_internal(token_id.into()).royalty_id;
        match royalty_id {
            Some(id) => self.token_royalty.get(&id).map(|(_, r)| r),
            None => None,
        }
    }

    // -------------------------- private methods --------------------------
    // -------------------------- internal methods -------------------------
}

'''
'''--- switch-cmd.sh ---
question=$(
  cat <<EOF
Type number
(-4) run indexer (from scratch)
(-3) run indexer
(-2) build contracts
(-1) build indexer
(0) create required accounts
(1) redeploy contracts.
(2) deploy contracts
(3) create store
(4) grant minter permission
(5) mint 10 tokens with no royalty
(6) mint 10 tokens with royalty
(7) approve nft to be market listed with auto-transfer
(8) approve nft to be market listed without auto-transfer
(9) make offer to buy nft
(10) accept offer and transfer nft
(11) revoke minter permissions
(12) Batch transfer nft tokens
(12.1) Nft transfer call
(13) Batch upgrade stores
(14) Revoke all approvals
(15) Update market allow list
(16) Get allow list
(17) Update ban list
(18) Get ban list
EOF
)

function programa() {
  echo "$question"
  read -r response
  echo "you chose $response"
  case $response in
  -4)
    echo "are you sure? y/n"
    read -r answer
    if [ $answer = 'y' ]; then
      run_stateful_indexer
    fi
    programa
    ;;
  -3)
    run_indexer
    programa
    ;;
  -2)
    build_contracts
    programa
    ;;
  -1)
    build_indexer
    programa
    ;;
  0)
    create_accounts
    programa
    ;;
  1)
    redeploy
    programa
    ;;
  2)
    deploy
    programa
    ;;
  3)
    create_store
    programa
    ;;
  4)
    grant_minter
    programa
    ;;
  5)
    mint_tokens_nr
    echo "remember token_id to list in marketplace"
    programa
    ;;
  6)
    mint_tokens
    echo "remember token_id to list in marketplace"
    programa
    ;;
  7)
    echo "enter token_id:"
    read -r token_id
    nft_approve_autotransfer "$token_id"
    programa
    ;;
  8)
    echo "enter token_id:"
    read -r token_id
    nft_approve_manual_transfer "$token_id"
    programa
    ;;
  9)
    echo "token_id:"
    read -r token_id
    make_offer "$token_id"
    programa
    ;;
  10)
    echo "token_id:"
    read -r token_id
    accept_offer_and_transfer "$token_id"
    programa
    ;;
  11)
    revoke_minter
    programa
    ;;
  12)
    echo "token_id:"
    read -r token_id
    nft_batch_transfer "$token_id"
    programa
    ;;
  12.1)
    echo "token_id:"
    read -r token_id
    nft_transfer_call "$token_id"
    programa
    ;;
  13)
    batch_upgrade_stores
    programa
    ;;
  15)
    echo "account_id:"
    read -r account_id
    update_list $account_id
    programa
    ;;
  16)
    get_allow_list
    programa
    ;;
  17)
    echo "account_id:"
    read -r account_id
    update_ban_list $account_id
    programa
    ;;
  18)
    get_ban_list
    programa
    ;;
  *)
    echo not a command
    programa
    ;;
  esac
}

function programa2() {
  case $1 in
  "git-pull")
    git pull
    cd mintbase-near-indexer && git checkout localnet && git pull && cd ../
    cd simple-market-contract && git checkout localnet && git pull && cd ../
    ;;
  "e2e")
    if [ "$NETWORK" == "mainnet" ] || [ "$NETWORK" == "testnet" ]; then
      echo "prevented dangerous command"
      exit 1
    fi

    RUST_LOG="mintbase_near_indexer=info,error"
    #    rm -rf $NEAR_DIR/data

    #    build_indexer
    #    build_contracts

    echo "clearing database"
    PGPASSWORD=postgres psql -U $postgres_user -d $postgres_database -h $postgres_host -c "DROP SCHEMA public CASCADE; CREATE SCHEMA public;"
    echo "running indexer"
    run_indexer 2>mintbase-core.error.log 1>mintbase-core.log &
    #    tail_indexer_error_logs &
    echo "creating accounts"
    create_accounts &>>mintbase-core.e2e.log
    echo "deploying"
    deploy &>>mintbase-core.e2e.log
    echo "creating store"
    create_store >>mintbase-core.e2e.log
    echo "granting permission to mint"
    grant_minter >>mintbase-core.e2e.log
    echo "minting 50 tokens with 2 owners and royalty accounts"
    mint_tokens_custom '{"owner_id":"_minter_account_", "metadata":{"spec":"","name":"","symbol":"","icon":null,"base_uri":null,"reference":null,"reference_hash":null},"royalty_args":{"split_between": {"_royalty1_account_": 8000,"_royalty2_account_": 2000}, "percentage": 1000},"num_to_mint":50,"split_owners":{"_minter_account_": 8000,"_store_owner_account_": 2000}}' &>>mintbase-core.e2e.log
    echo "listing token-id 1 on market"
    nft_approve_autotransfer 1 &>>mintbase-core.e2e.log
    echo "buying token-id off market"
    make_offer 1 &>>mintbase-core.e2e.log
    pkill -f indexer
    pkill -f tail
    ;;
  "e2e-loop")
    while :; do
      e2e $2
    done
    ;;
  "run-indexer")
    run_indexer
    ;;
  "build-indexer")
    build_indexer
    ;;
  "build-contracts")
    build_contracts
    ;;
  "create-accounts")
    create_accounts
    ;;
  "redeploy")
    redeploy
    ;;
  "deploy")
    deploy
    ;;
  "create-store")
    create_store
    ;;
  "grant-minter")
    grant_minter
    ;;
  "send-store")
    send_to_store
    ;;
  "mint-tokens")
    mint_tokens_custom '{"owner_id":"_minter_account_", "metadata":{"spec":"","name":"","symbol":"","icon":null,"base_uri":null,"reference":null,"reference_hash":null},"royalty_args":{"split_between": {"_royalty1_account_": 8000,"_royalty2_account_": 2000}, "percentage": 1000},"num_to_mint":100,"split_owners":{"_minter_account_": 8000,"_store_owner_account_": 2000}}'
    echo "remember token_id to list in marketplace"
    ;;
  "top-stores")
    export -f top_stores
    watch -n60 -x bash -c top_stores
    ;;
  "nft-token")
    nft_token $2
    ;;
    #  6)
    #    mint_tokens;
    #    echo "remember token_id to list in marketplace";
    #    programa;
    #    ;;
    #  7)
    #    echo "enter token_id:";
    #    read -r token_id;
    #    nft_approve_autotransfer "$token_id";
    #    programa;
    #    ;;
    #  8)
    #    echo "enter token_id:";
    #    read -r token_id;
    #    nft_approve_manual_transfer "$token_id";
    #    programa;
    #    ;;
    #  9)
    #    echo "token_id:";
    #    read -r token_id;
    #    make_offer "$token_id";
    #    programa;
    #    ;;
    #  10)
    #    echo "token_id:";
    #    read -r token_id;
    #    accept_offer_and_transfer "$token_id";
    #    programa;
    #    ;;
    #  11)
    #    revoke_minter;
    #    programa;
    #    ;;
    #  12)
    #    echo "token_id:";
    #    read -r token_id;
    #    nft_batch_transfer "$token_id";
    #    programa;
    #    ;;
    #  12.1)
    #    echo "token_id:";
    #    read -r token_id;
    #    nft_transfer_call "$token_id";
    #    programa;
    #    ;;
    #  13)
    #    batch_upgrade_stores;
    #    programa;
    #    ;;
    #  15)
    #    echo "account_id:";
    #    read -r account_id;
    #    update_list $account_id;
    #    programa;
    #    ;;
    #  16)
    #    get_allow_list;
    #    programa;
    #    ;;
    #  17)
    #    echo "account_id:";
    #    read -r account_id;
    #    update_ban_list $account_id;
    #    programa;
    #    ;;
    #  18)
    #    get_ban_list;
    #    programa;
    #    ;;
  *)
    echo not a command
    ;;
  esac
}

'''
'''--- test.sh ---
#!/usr/bin/env bash

# Testing script for quick iteration on code:
# - does quick checks first
# - reproduces CI pipeline

fail() {
  echo "$1 failed with code: $?"
  exit 1
}

build_wasm() {
  cargo "$1-wasm" || fail "Compiling $1"
  # wasm-opt "wasm/$1.wasm" -Oz \
  #   -o "wasm/$1-opt.wasm" || fail "Minifying $1"
  # mv "wasm/$1-opt.wasm" "wasm/$1.wasm"
}

kill_the_damn_sandbox() {
  killall near-sandbox
  pkill near-sandbox
}

cargo +nightly fmt || fail "Formatting"
cargo lint || fail "Linting"

# prevent factory checking from failing
touch wasm/store.wasm

cargo check -p mintbase-deps --features store-wasm --message-format short || fail "Checking store"
cargo check -p mintbase-deps --features factory-wasm --message-format short || fail "Checking factory"
cargo check -p mintbase-deps --features helper-wasm --message-format short || fail "Checking helper"
cargo check -p simple-market-contract --message-format short || fail "Checking market"
cargo check -p mintbase-near-indexer || fail "Checking indexer"

build_wasm store
build_wasm factory
build_wasm helper
build_wasm market
cargo indexer || fail "Compiling indexer"

# Sandbox node is sometimes running in the background and causing problems
# -> kill sandbox in case I used it manually
kill_the_damn_sandbox

# (cd testing && npm test -- -m "approvals::core") || fail "Testing"
(cd testing && npm test) || {
  kill_the_damn_sandbox
  fail "Testing"
}

# Be a good scripty-boy and clean up!
kill_the_damn_sandbox

'''
'''--- testing/__tests__/market.auction.ava.ts ---
import { TransactionResult } from "near-workspaces-ava";
import {
  assertContractPanics,
  assertContractTokenOwner,
  assertEventLogs,
  assertMakeOfferEvent,
  failPromiseRejection,
  MARKET_WORKSPACE,
  mNEAR,
  NEAR,
  Tgas,
  hours,
  getBalance,
  assertBalanceChange,
  createPayout,
  prepareTokenListing,
} from "./test-utils";

MARKET_WORKSPACE.test(
  "market::auction",
  async (test, { root, factory, store, market, alice, bob, carol }) => {
    await prepareTokenListing(test, { root, alice, store, market, factory });

    await alice
      .call(
        store,
        "nft_approve",
        {
          token_id: "0",
          account_id: market.accountId,
          msg: JSON.stringify({ price: NEAR(1), autotransfer: false }),
        },
        { attachedDeposit: mNEAR(0.81), gas: Tgas(200) }
      )
      .catch(failPromiseRejection(test, "listing token"));
    const tokenKey = `0:${store.accountId}`;

    // -------------------------- create first offer ---------------------------
    const bobBalance0 = await getBalance(bob);
    const marketBalance0 = await getBalance(market);
    const makeOfferCall0 = await bob
      .call_raw(
        market,
        "make_offer",
        {
          token_key: [tokenKey],
          price: [NEAR(1)],
          timeout: [{ Hours: 24 }],
        },
        { attachedDeposit: NEAR(1), gas: Tgas(200) }
      )
      .catch(failPromiseRejection(test, "making first auction offer"));
    // check event logs
    assertMakeOfferEvent(
      { test, eventLog: (makeOfferCall0 as TransactionResult).logs[0] },
      {
        id: 1,
        store: store,
        maker: bob,
        specs: [
          {
            token_id: "0",
            approval_id: 0,
            price: NEAR(1).toString(),
            timeout: hours(24),
          },
        ],
      },
      "Making first auction offer"
    );
    test.is(
      (makeOfferCall0 as TransactionResult).logs.length,
      1,
      "Emitted too many events on making first auction offer"
    );

    // check chain state: token owner hasn't changed
    await assertContractTokenOwner(
      { test, store },
      { token_id: "0", owner_id: alice.accountId },
      "Token auto-transferred on making auction offer"
    );
    // check chain state: highest offer is 1N
    test.like(
      // FIXME::market::low: price should be a string
      await market.view("get_current_offer", { token_key: tokenKey }),
      { id: 1, price: parseInt(NEAR(1).toString()) },
      "Highest offer not set correctly"
    );
    // check chain state: bob has 1N less
    await Promise.all([
      assertBalanceChange(
        test,
        { account: bob, ref: bobBalance0, diff: NEAR(-1) },
        "Making first auction offer"
      ),
      // check chain state: market has 1N more
      assertBalanceChange(
        test, // FIXME::market::medium: where do the 10 mNEAR come from?
        { account: market, ref: marketBalance0, diff: NEAR(1.01) },
        "Making first auction offer"
      ),
    ]);
    // test.fail();
    // ---------------------- withdraw offer and recreate ----------------------
    // TODO::testing::medium: withdraw offer -> not feasible until `min_offer_hours`
    //  can be set to e.g. minutes or seconds
    //  when this is implemented, we need at least three offers:
    //  offer -> withdraw -> offer again -> offer (replaces current highest offer) -> accept
    // TODO: check event logs
    // TODO: check chain state -> token owner hasn't changed, no highest offer
    // TODO: try accepting withdrawn offer -> should fail

    // -------------------------- create second offer --------------------------
    const carolBalance1 = await getBalance(carol);
    const marketBalance1 = await getBalance(market);
    const bobBalance1 = await getBalance(bob);

    const makeOfferCall1 = await carol
      .call_raw(
        market,
        "make_offer",
        {
          token_key: [tokenKey],
          price: [NEAR(2)],
          timeout: [{ Hours: 24 }],
        },
        { attachedDeposit: NEAR(2), gas: Tgas(200) }
      )
      .catch(failPromiseRejection(test, "making second auction offer"));

    // check event logs
    assertMakeOfferEvent(
      { test, eventLog: (makeOfferCall1 as TransactionResult).logs[0] },
      {
        id: 2,
        store: store,
        maker: carol,
        specs: [
          {
            token_id: "0",
            approval_id: 0,
            price: NEAR(2).toString(),
            timeout: hours(24),
          },
        ],
      },
      "Making second auction offer"
    );
    test.is(
      (makeOfferCall0 as TransactionResult).logs.length,
      1,
      "Emitted too many events on making second auction offer"
    );

    // check chain state: token owner still hasn't changed
    await assertContractTokenOwner(
      { test, store },
      { token_id: "0", owner_id: alice.accountId },
      "Token auto-transferred on making auction offer"
    );
    // check chain state: highest offer is 2N
    test.like(
      await market.view("get_current_offer", { token_key: tokenKey }),
      { id: 2, price: parseInt(NEAR(2).toString()) },
      "Highest offer not replaced"
    );
    await Promise.all([
      // check chain state: carol has 2N less now
      assertBalanceChange(
        test,
        { account: carol, ref: carolBalance1, diff: NEAR(-2) },
        "outbidding on auction"
      ),
      // check chain state: market has 1N more now
      assertBalanceChange(
        test, // FIXME::market::medium: where do the 10 mNEAR come from?
        { account: market, ref: marketBalance1, diff: NEAR(1.01) },
        "outbidding on auction"
      ),
      // check chain state: bob got his 1N back
      assertBalanceChange(
        test,
        { account: bob, ref: bobBalance1, diff: NEAR(1) },
        "outbidding on auction"
      ),
    ]);
    // ----------------------------- accept offer ------------------------------
    const aliceBalance2 = await getBalance(alice);
    const marketBalance2 = await getBalance(market);
    await assertContractPanics(test, [
      // try accepting offer as non-owner
      [
        async () => {
          await bob.call(
            market,
            "accept_and_transfer",
            { token_key: tokenKey },
            { attachedDeposit: "1", gas: Tgas(200) }
          );
        },
        "panicked at 'assertion failed:",
        "Bob tried to accept an offer for Alice's token",
      ],
      // try accepting offer without yoctoNEAR deposit
      [
        async () => {
          await alice.call(
            market,
            "accept_and_transfer",
            { token_key: tokenKey },
            { gas: Tgas(200) }
          );
        },
        "Requires attached deposit of exactly 1 yoctoNEAR",
        "Alice tried to accept an offer without yoctoNEAR deposit",
      ],
    ]);

    const acceptOfferCall = await alice
      .call_raw(
        market,
        "accept_and_transfer",
        { token_key: tokenKey },
        { attachedDeposit: "1", gas: Tgas(200) }
      )
      .catch(failPromiseRejection(test, "accepting auction offer"));

    // check event logs
    assertEventLogs(
      test,
      (acceptOfferCall as TransactionResult).logs,
      [
        {
          standard: "nep171",
          version: "1.0.0",
          event: "nft_transfer",
          data: [
            {
              authorized_id: null, // FIXME::store::low,
              old_owner_id: alice.accountId,
              new_owner_id: carol.accountId,
              token_ids: ["0"],
              memo: null,
            },
          ],
        },
        {
          standard: "nep171",
          version: "1.0.0",
          event: "nft_sold",
          data: JSON.stringify({
            list_id: `0:0:${store.accountId}`,
            offer_num: 2,
            token_key: `0:${store.accountId}`,
            payout: createPayout([[alice, NEAR(1.95).toString()]]),
          }),
        },
      ],
      "accepting auction offer"
    );

    // check chain state: token is owned by carol now
    assertContractTokenOwner(
      { test, store },
      { token_id: "0", owner_id: carol.accountId },
      "accepting auction offer"
    );

    await Promise.all([
      // check chain state: alice has received her share
      assertBalanceChange(
        test,
        { account: alice, ref: aliceBalance2, diff: NEAR(1.95) },
        "accepting auction offer"
      ),
      // check chain state: market has transferred some funds but kept its fee
      assertBalanceChange(
        test,
        // FIXME::market::medium: why does the market retain more than it should?
        { account: market, ref: marketBalance2, diff: NEAR(-1.94) },
        "accepting auction offer"
      ),
    ]);
  }
);

'''
'''--- testing/__tests__/market.buynow.ava.ts ---
import { TransactionResult } from "near-workspaces-ava";
import {
  assertContractPanic,
  assertContractTokenOwner,
  assertEventLogs,
  assertMakeOfferEvent,
  assertBalanceChanges,
  failPromiseRejection,
  getBalance,
  MARKET_WORKSPACE,
  mNEAR,
  NEAR,
  Tgas,
  hours,
  prepareTokenListing,
  createPayout,
} from "./test-utils";
MARKET_WORKSPACE.test(
  "market::buynow",
  async (test, { root, factory, store, market, alice, bob }) => {
    await prepareTokenListing(test, { root, alice, store, market, factory });

    // TODO::testing::low: test this function
    await root.call(
      market,
      "set_min_offer_hours",
      { min_offer_hours: 0 },
      { attachedDeposit: "1" }
    );

    await alice
      .call(
        store,
        "nft_batch_approve",
        {
          token_ids: ["0", "1"],
          account_id: market.accountId,
          msg: JSON.stringify({ price: NEAR(1), autotransfer: true }),
        },
        { attachedDeposit: mNEAR(8.8), gas: Tgas(200) }
      )
      .catch(failPromiseRejection(test, "listing token"));

    const token0Key = `0:${store.accountId}`;
    const token1Key = `1:${store.accountId}`;

    // need to assert panics in series, so we don't get into race conditions
    //  regarding locked tokens
    // try to attach less than claimed
    await assertContractPanic(
      test,
      async () => {
        await bob.call(
          market,
          "make_offer",
          {
            token_key: [token0Key],
            price: [NEAR(1.1)],
            timeout: [{ Hours: 1 }],
          },
          { attachedDeposit: NEAR(1), gas: Tgas(200) }
        );
      },
      `price: ${NEAR(1.1)} > deposit: ${NEAR(1)}`,
      "Bob tried attaching less than claimed"
    );
    // try to set price below ask
    await assertContractPanic(
      test,
      //  ownership
      async () => {
        await bob.call(
          market,
          "make_offer",
          {
            token_key: [token0Key, token1Key],
            price: [NEAR(0.95), NEAR(1.05)],
            timeout: [{ Hours: 1 }, { Hours: 1 }],
          },
          { attachedDeposit: NEAR(2) }
        );
      },
      "panicked at 'Offer is below ask!'",
      "Bob tried setting the price below the asking price"
    );
    // try to set instant expiry
    await assertContractPanic(
      test,
      async () => {
        await bob.call(
          market,
          "make_offer",
          {
            token_key: [token0Key],
            price: [NEAR(1)],
            timeout: [{ Hours: 0 }],
          },
          { attachedDeposit: NEAR(1), gas: Tgas(200) }
        );
      },
      "panicked at 'assertion failed: n > 0',",
      "Bob tried to set instant expiry"
    );
    // fuzzing: to few arguments
    await assertContractPanic(
      test,
      async () => {
        await bob.call(
          market,
          "make_offer",
          {
            token_key: [token0Key, token1Key],
            price: [NEAR(1)],
            timeout: [{ Hours: 1 }],
          },
          { attachedDeposit: NEAR(1), gas: Tgas(200) }
        );
      },
      // TODO::testing::low: comment at the end of panic msg
      "panicked at 'assertion failed: `(left == right)`",
      "Bob tried fuzzing by omitting arguments"
    );
    // fuzzing: to many arguments
    await assertContractPanic(
      test,
      async () => {
        await bob.call(
          market,
          "make_offer",
          {
            token_key: [token0Key, token1Key],
            price: [NEAR(1), NEAR(1.5), NEAR(0.5)],
            timeout: [{ Hours: 1 }, { Hours: 1 }, { Hours: 1 }],
          },
          { attachedDeposit: NEAR(3), gas: Tgas(200) }
        );
      },
      // TODO::testing::low: comment at the end of panic msg
      "panicked at 'assertion failed: `(left == right)`",
      "Bob tried fuzzing by adding arguments"
    );

    const aliceBalance0 = await getBalance(alice);
    const bobBalance0 = await getBalance(bob);
    const marketBalance0 = await getBalance(market);

    // TODO::market::low: improve this interface
    const makeOfferCall = await bob
      .call_raw(
        market,
        "make_offer",
        {
          token_key: [token0Key, token1Key],
          price: [NEAR(1), NEAR(1.5)],
          timeout: [{ Hours: 1 }, { Hours: 1 }],
        },
        { attachedDeposit: NEAR(2.5), gas: Tgas(200) }
      )
      .catch(failPromiseRejection(test, 'making "buy now" offer'));

    // check event logs
    // this needs to be `test.like` because of the contained timestamps
    assertMakeOfferEvent(
      { test, eventLog: (makeOfferCall as TransactionResult).logs[0] },
      {
        id: 1, // TODO::market::low: why do we start counting at 1?
        store: store,
        maker: bob,
        specs: [
          {
            token_id: "0",
            approval_id: 0,
            price: NEAR(1).toString(),
            timeout: hours(1),
          },
          {
            token_id: "1",
            approval_id: 1,
            price: NEAR(1.5).toString(),
            timeout: hours(1),
          },
        ],
      },
      'Making "buy now" offer'
    );
    assertEventLogs(
      test,
      (makeOfferCall as TransactionResult).logs.slice(1),
      [
        {
          standard: "nep171",
          version: "1.0.0",
          event: "nft_transfer",
          data: [
            {
              authorized_id: null, // FIXME::store::low
              memo: null,
              new_owner_id: bob.accountId,
              old_owner_id: alice.accountId,
              token_ids: ["0"],
            },
          ],
        },
        {
          standard: "nep171",
          version: "1.0.0",
          event: "nft_sold",
          // TODO::contracts::low: no stringified data
          data: JSON.stringify({
            list_id: `0:0:${store.accountId}`,
            offer_num: 1,
            token_key: `0:${store.accountId}`,
            payout: createPayout([[alice, NEAR(0.975).toString()]]),
          }),
        },
        {
          standard: "nep171",
          version: "1.0.0",
          event: "nft_transfer",
          data: [
            {
              authorized_id: null, // FIXME::store::low
              memo: null,
              new_owner_id: bob.accountId,
              old_owner_id: alice.accountId,
              token_ids: ["1"],
            },
          ],
        },
        {
          standard: "nep171",
          version: "1.0.0",
          event: "nft_sold",
          // TODO::contracts::low: no stringified data
          data: JSON.stringify({
            list_id: `1:1:${store.accountId}`,
            offer_num: 1,
            token_key: `1:${store.accountId}`,
            payout: createPayout([[alice, mNEAR(1462.5).toString()]]),
          }),
        },
      ],
      'making "buy now" offer'
    );

    await assertContractTokenOwner(
      { test, store },
      { token_id: "0", owner_id: bob.accountId },
      "After transfers"
    ).catch(failPromiseRejection(test, "checking token ownership"));
    await assertContractTokenOwner(
      { test, store },
      { token_id: "1", owner_id: bob.accountId },
      "After transfers"
    ).catch(failPromiseRejection(test, "checking token ownership"));

    // check market state (tokens unlisted)
    await test.throwsAsync(async () => {
      await market.view("get_token", { token_key: `0:${store.accountId}` });
    });
    await test.throwsAsync(async () => {
      await market.view("get_token", { token_key: `1:${store.accountId}` });
    });

    // chain state: account balances
    await assertBalanceChanges(
      test,
      [
        // 30 mNEAR extra gas costs for bob
        { account: bob, ref: bobBalance0, diff: NEAR(-2.53) },
        { account: alice, ref: aliceBalance0, diff: mNEAR(975 * 2.5) },
        // FIXME::market::low: where do the 15 mNEAR come from?
        { account: market, ref: marketBalance0, diff: mNEAR(25 * 2.5 + 15) },
      ],
      "After accepting 'buy now' offer"
    );

    // TODO::testing::low what happens in the case where one offer is valid and the other is not?
  }
);

'''
'''--- testing/__tests__/market.core.ava.ts ---
import { TransactionResult } from "near-workspaces-ava";
import {
  assertEventLogs,
  batchMint,
  failPromiseRejection,
  MARKET_WORKSPACE,
  mNEAR,
  NEAR,
  Tgas,
} from "./test-utils";

MARKET_WORKSPACE.test(
  "market::core",
  async (test, { root, factory, store, market, alice }) => {
    await batchMint({ owner: alice, store, num_to_mint: 2 }).catch(
      failPromiseRejection(test, "minting")
    );

    // ----------- allow the store to list tokens to the marketplace -----------
    const updateAllowlistCall = await root
      .call_raw(
        market,
        "update_allowlist",
        { account_id: factory.accountId, state: true },
        { attachedDeposit: "1" }
      )
      .catch(failPromiseRejection(test, "buy now listing with auto transfer"));

    // check event logs
    assertEventLogs(
      test,
      (updateAllowlistCall as TransactionResult).logs,
      [
        {
          standard: "nep171",
          version: "1.0.0",
          event: "nft_allowlist",
          // TODO::market::medium: WTF, now we have a stringified array?
          //  -> the method can only update one account_id at a time
          data: JSON.stringify([
            { account_id: factory.accountId, state: true },
          ]),
        },
      ],
      "buy now listing with auto transfer"
    );

    // TODO: try allowing as non-owner
    // TODO: try allowing without yoctoNEAR deposit

    // check on-chain state
    test.deepEqual(await market.view("get_allowlist", {}), [factory.accountId]);

    // ---------------------------- list as auction ----------------------------
    const auctionApproveCall = await alice
      .call_raw(
        store,
        "nft_approve",
        {
          token_id: "0",
          account_id: market.accountId,
          // TODO::market::medium: doesn't make sense to list a price for an
          //  auction
          msg: JSON.stringify({
            price: NEAR(1).toString(),
            autotransfer: false,
          }),
        },
        { attachedDeposit: mNEAR(0.81), gas: Tgas(200) }
      )
      // TODO::market::low: Complained about `alice.factory.test.near` not
      //  being allowed, which was on the allowlist. The requirement however is
      //  for `factory.test.near` to be on the allowlist.
      //  => better error message
      .catch(failPromiseRejection(test, "auction listing"));

    // check event logs
    assertEventLogs(
      test,
      // we already tested the approval event on the store, so skip that
      (auctionApproveCall as TransactionResult).logs.slice(1),
      [
        {
          standard: "nep171",
          version: "1.0.0",
          event: "nft_1_list",
          data: JSON.stringify([
            {
              // TODO::market::low: why this duplication?
              list_id: `0:0:${store.accountId}`,
              price: NEAR(1).toString(),
              // TODO::market::low: why this duplication?
              token_key: `0:${store.accountId}`,
              owner_id: alice.accountId,
              autotransfer: false,
              approval_id: "0",
              token_id: "0",
              store_id: store.accountId,
              // meta_id: null,
            },
          ]),
        },
      ],
      "auction listing"
    );
    // TODO::testing::medium: what happens when I approve the same token twice?

    // checking market state
    // TODO::market::low: more descriptive method name
    test.deepEqual(
      await market.view("get_token", { token_key: `0:${store.accountId}` }),
      {
        id: 0, // TODO::market::low: rename to token_id, use string type
        owner_id: alice.accountId,
        store_id: store.accountId,
        autotransfer: false,
        asking_price: NEAR(1).toString(),
        approval_id: 0,
        current_offer: null,
        num_offers: 0,
        locked: false,
      }
    );

    // ------------------------ revoke auction approval ------------------------
    const auctionRevokeCall = await alice
      .call_raw(
        store,
        "nft_revoke",
        { token_id: "0", account_id: market.accountId },
        { attachedDeposit: "1" }
      )
      .catch(failPromiseRejection(test, "revoke auction listing"));

    // check event logs
    assertEventLogs(
      test,
      // we already tested the revoke event on the store, so skip that
      (auctionRevokeCall as TransactionResult).logs.slice(1),
      [],
      "revoke auction listing"
    );

    // TODO: check market state -> do we have the functionality for that?
    // TODO: find out if the indexer picks up on this revoke
    //   if so, we have divergent state between indexer and marketplace
    // marketplace::check_approvals method is unfeasible because we have about
    // half a million tokens on offer on a normal day

    // --------------------------- list as "buy now" ---------------------------
    const buynowApproveCall = await alice
      .call_raw(
        store,
        "nft_approve",
        {
          token_id: "0",
          account_id: market.accountId,
          msg: JSON.stringify({
            price: NEAR(1).toString(),
            autotransfer: true,
          }),
        },
        { attachedDeposit: mNEAR(0.81).toString(), gas: Tgas(200) }
      )
      .catch(failPromiseRejection(test, "buy now listing"));

    // check event logs
    assertEventLogs(
      test,
      // we already tested the approval event, so skip that
      (buynowApproveCall as TransactionResult).logs.slice(1),
      [
        {
          standard: "nep171",
          version: "1.0.0",
          event: "nft_removed",
          // TODO::market::medium: wtf is this format?
          data: JSON.stringify({ data: `0:0:${store.accountId}` }),
        },
        {
          standard: "nep171",
          version: "1.0.0",
          event: "nft_1_list",
          // TODO::market::medium: why stringified?
          data: JSON.stringify([
            {
              // TODO::market::low: why this duplication?
              list_id: `0:1:${store.accountId}`,
              price: NEAR(1).toString(),
              // TODO::market::low: why this duplication?
              token_key: `0:${store.accountId}`,
              owner_id: alice.accountId,
              autotransfer: true,
              approval_id: "1",
              token_id: "0",
              store_id: store.accountId,
              // thing_id: null,
            },
          ]),
        },
      ],
      "buy now listing"
    );

    // check market state
    test.deepEqual(
      await market.view("get_token", { token_key: `0:${store.accountId}` }),
      {
        id: 0, // FIXME::market::low: rename to token_id, use string type
        owner_id: alice.accountId,
        store_id: store.accountId,
        autotransfer: true,
        asking_price: NEAR(1).toString(),
        approval_id: 1,
        current_offer: null,
        num_offers: 0,
        locked: false,
      }
    );

    // ----------------------- revoke "buy now" approval -----------------------
    const buynowRevokeCall = await alice
      .call_raw(
        store,
        "nft_revoke",
        { token_id: "0", account_id: market.accountId },
        { attachedDeposit: "1" }
      )
      .catch(failPromiseRejection(test, "revoke auction listing"));

    // check event logs
    assertEventLogs(
      test,
      // we already tested the revoke event on the store, so skip that
      (buynowRevokeCall as TransactionResult).logs.slice(1),
      [],
      "revoke auction listing"
    );

    // TODO::testing::low check market state -> not possible because market is
    //  not updated -> might insert a XCC when revoking mintbase-market

    // ----------------------------- batch listing -----------------------------
    const batchApproveLogs = await alice.call_raw(
      store,
      "nft_batch_approve",
      {
        token_ids: ["0", "1"],
        account_id: market.accountId,
        msg: JSON.stringify({ price: NEAR(1).toString(), autotransfer: true }),
      },
      // TODO::store::medium: why does thir require more storage deposit than
      //  batch approving without tail call?
      //  -> we might and probably should require a deposit on the market for
      //     each token on offer
      { attachedDeposit: mNEAR(8.8).toString(), gas: Tgas(200) }
    );

    // check event logs
    assertEventLogs(
      test,
      (batchApproveLogs as TransactionResult).logs.slice(1),
      [
        {
          standard: "nep171",
          version: "1.0.0",
          event: "nft_removed",
          // TODO::market::medium: wtf is this format?
          data: JSON.stringify({ data: `0:1:${store.accountId}` }),
        },
        {
          standard: "nep171",
          version: "1.0.0",
          event: "nft_batch_list",
          // TODO::market::medium: why stringified?
          data: JSON.stringify([
            {
              list_id: `0:2:${store.accountId}`,
              price: NEAR(1).toString(),
              token_key: `0:${store.accountId}`,
              owner_id: alice.accountId,
              autotransfer: true,
              approval_id: "2",
              token_id: "0",
              store_id: store.accountId,
            },
            {
              list_id: `1:3:${store.accountId}`,
              price: NEAR(1).toString(),
              token_key: `1:${store.accountId}`,
              owner_id: alice.accountId,
              autotransfer: true,
              approval_id: "3",
              token_id: "1",
              store_id: store.accountId,
            },
          ]),
        },
      ],
      "batch approving"
    );

    // check market state
    test.like(
      await market.view("get_token", { token_key: `0:${store.accountId}` }),
      { autotransfer: true, asking_price: NEAR(1).toString() }
    );
    test.like(
      await market.view("get_token", { token_key: `1:${store.accountId}` }),
      { autotransfer: true, asking_price: NEAR(1).toString() }
    );

    // ---------------------------- batch revoking -----------------------------
    // doesn't make any sense at the moment
    // TODO::testing::medium: batch revoking of tokens
    // TODO: check event logs
    // TODO: check market state
  }
);

// TODO: market::allowlist/banlist

// // --------------------- FIXME: users should be refunded! ----------------------
// With this bug, a user may call `make_offer` with a deposit matching the
// claimed price, but the claimed price being below the ask of the owner.
// The contract should panic and refund the attached deposit, while it does
// neither.
// MARKET_WORKSPACE.test(
//   "market::transfer-bug",
//   async (test, { root, factory, store, market, alice, bob }) => {
//     await batchMint({ owner: alice, store, num_to_mint: 1 }).catch(
//       failPromiseRejection(test, "minting")
//     );

//     await root
//       .call(
//         market,
//         "update_allowlist",
//         { account_id: factory.accountId, state: true },
//         { attachedDeposit: "1" }
//       )
//       .catch(failPromiseRejection(test, "allowing store on market"));

//     await alice
//       .call(
//         store,
//         "nft_approve",
//         {
//           token_id: "0",
//           account_id: market.accountId,
//           msg: JSON.stringify({ price: NEAR(100), autotransfer: true }),
//         },
//         { attachedDeposit: mNEAR(20), gas: Tgas(200) }
//       )
//       .catch(failPromiseRejection(test, "listing token"));

//     const token_key = `0:${store.accountId}`;
//     const log_owner = async (msg?: string) => {
//       const token = await store.view("nft_token", { token_id: "0" });
//       test.log(msg, (token as MintbaseToken).owner_id.Account);
//     };

//     await log_owner("After approving");
//     test.log(await market.view("get_token", { token_key }));
//     test.log("market balance: ", (await market.balance()).total.toHuman());
//     test.log("bob balance: ", (await bob.balance()).total.toHuman());

//     await bob.call(
//       market,
//       "make_offer",
//       {
//         token_key: [token_key],
//         price: [NEAR(10)],
//         timeout: [{ Hours: 48 }],
//       },
//       { attachedDeposit: NEAR(10), gas: Tgas(200) }
//     );

//     await log_owner("After bob making offer");
//     test.log(await market.view("get_token", { token_key }));
//     test.log("market balance: ", (await market.balance()).total.toHuman());
//     test.log("bob balance: ", (await bob.balance()).total.toHuman());
//   }
// );

'''
'''--- testing/__tests__/market.royalties.ava.ts ---
import { TransactionResult } from "near-workspaces-ava";
import {
  assertEventLogs,
  failPromiseRejection,
  MARKET_WORKSPACE,
  createPayout,
  createPayoutNumerators,
  createPayoutPercentage,
  NEAR,
  mNEAR,
  Tgas,
  getBalance,
  assertBalanceChange,
} from "./test-utils";

MARKET_WORKSPACE.test(
  "market::royalties",
  async (test, { root, factory, store, market, alice, bob, carol }) => {
    // cannot use `prepareTokenListing`, because royalties need to be set
    // during minting
    await root
      .call(
        market,
        "update_allowlist",
        { account_id: factory.accountId, state: true },
        { attachedDeposit: "1" }
      )
      .catch(failPromiseRejection(test, "allowing store on market"));

    // --------------------------- setting royalties ---------------------------
    const mintCall = await alice
      .call_raw(
        store,
        "nft_batch_mint",
        {
          owner_id: alice.accountId,
          num_to_mint: 1,
          metadata: {},
          royalty_args: {
            split_between: createPayoutPercentage([
              [alice, 5000],
              [bob, 5000],
            ]),
            percentage: 5000, // this is 50 %
          },
        },
        { attachedDeposit: "1" }
      )
      .catch(failPromiseRejection(test, "minting with royalties"));

    // check event logs
    // TODO::store::low: format seems clunky
    const storeFormattedRoyalties = {
      split_between: createPayoutNumerators([
        [alice, 5000],
        [bob, 5000],
      ]),
      percentage: { numerator: 5000 },
    };

    assertEventLogs(
      test,
      (mintCall as TransactionResult).logs,
      [
        {
          standard: "nep171",
          version: "1.0.0",
          event: "nft_mint",
          data: [
            {
              owner_id: "alice.test.near",
              token_ids: ["0"],
              // memo should be a string, as it's standardized like that!
              memo: JSON.stringify({
                royalty: storeFormattedRoyalties,
                split_owners: null,
                meta_id: null,
                meta_extra: null,
                minter: alice.accountId,
              }),
            },
          ],
        },
      ],
      "minting"
    );

    // check chain state: royalties in token info
    test.deepEqual(
      ((await store.view("nft_token", { token_id: "0" })) as any).royalty,
      storeFormattedRoyalties,
      "Bad onchain royalties (querying `nft_token`)"
    );
    test.deepEqual(
      await store.view("get_token_royalty", { token_id: "0" }),
      storeFormattedRoyalties,
      "Bad onchain royalties (querying `nft_token_royalty`)"
    );
    test.log("royalties as known by store:", storeFormattedRoyalties);
    // // check chain state: royalties in payout info
    // // FIXME::store::medium: these shouldn't be zero
    // test.deepEqual(
    //   (
    //     (await store.view("nft_payout", {
    //       token_id: "0",
    //       balance: "1000",
    //       max_len_payout: 5,
    //     })) as any
    //   ).payout,
    //   createPayout([
    //     [alice, "750"],
    //     [bob, "250"],
    //   ]),
    //   "Bad onchain royalties (querying `nft_payout`)"
    // );

    // ------------------- executing transfer with royalties -------------------
    await alice
      .call(
        store,
        "nft_approve",
        {
          token_id: "0",
          account_id: market.accountId,
          msg: JSON.stringify({ price: NEAR(1), autotransfer: true }),
        },
        { attachedDeposit: mNEAR(0.81), gas: Tgas(200) }
      )
      .catch(failPromiseRejection(test, "listing token"));
    // events have been checked previously -> no need here
    const tokenKey = `0:${store.accountId}`;

    const aliceBalance0 = await getBalance(alice);
    const bobBalance0 = await getBalance(bob);
    await carol
      .call(
        market,
        "make_offer",
        {
          token_key: [tokenKey],
          price: [NEAR(1)],
          timeout: [{ Hours: 24 }],
        },
        { attachedDeposit: NEAR(1), gas: Tgas(200) }
      )
      .catch(failPromiseRejection(test, "making offer"));
    // events have been checked previously -> no need here

    // check chain state: alice received 0.75 * 0.975 NEAR
    await assertBalanceChange(
      test,
      { account: alice, ref: aliceBalance0, diff: mNEAR(0.75 * 975) },
      "Checking first royalties payout"
    );
    // check chain state: bob received 0.25 * 0.975 NEAR
    await assertBalanceChange(
      test,
      { account: bob, ref: bobBalance0, diff: mNEAR(0.25 * 975) },
      "Checking first royalties payout"
    );
    // -------------- executing again -> royalties are perpetual ---------------
    // // check chain state: royalties in payout info
    // // FIXME::store::medium: these shouldn't be zero
    // test.deepEqual(
    //   (
    //     (await store.view("nft_payout", {
    //       token_id: "0",
    //       balance: "1000",
    //       max_len_payout: 5,
    //     })) as any
    //   ).payout,
    //   createPayout([
    //     [alice, "250"],
    //     [bob, "250"],
    //     [carol, "500"],
    //   ]),
    //   "Bad onchain royalties (querying `nft_payout`)"
    // );
    await carol
      .call(
        store,
        "nft_approve",
        {
          token_id: "0",
          account_id: market.accountId,
          msg: JSON.stringify({ price: NEAR(1), autotransfer: true }),
        },
        { attachedDeposit: mNEAR(0.81), gas: Tgas(200) }
      )
      .catch(failPromiseRejection(test, "listing token"));
    // events have been checked previously -> no need here

    const aliceBalance1 = await getBalance(alice);
    const bobBalance1 = await getBalance(bob);
    const carolBalance1 = await getBalance(carol);

    const dave = await root.createAccount("dave", {
      initialBalance: NEAR(20).toString(),
    });
    await dave
      .call(
        market,
        "make_offer",
        {
          token_key: [tokenKey],
          price: [NEAR(1)],
          timeout: [{ Hours: 24 }],
        },
        { attachedDeposit: NEAR(1), gas: Tgas(200) }
      )
      .catch(failPromiseRejection(test, "making offer"));
    // events have been checked previously -> no need here

    // check chain state: alice received 0.75 * 0.975 NEAR
    await assertBalanceChange(
      test,
      { account: alice, ref: aliceBalance1, diff: mNEAR(0.25 * 975) },
      "Checking second royalties payout"
    );
    // check chain state: bob received 0.25 * 0.975 NEAR
    await assertBalanceChange(
      test,
      { account: bob, ref: bobBalance1, diff: mNEAR(0.25 * 975) },
      "Checking second royalties payout"
    );
    // check chain state: bob received 0.50 * 0.975 NEAR
    await assertBalanceChange(
      test,
      { account: carol, ref: carolBalance1, diff: mNEAR(0.5 * 975) },
      "Checking second royalties payout"
    );
  }
);

'''
'''--- testing/__tests__/market.splits.ava.ts ---
import { ava, TransactionResult } from "near-workspaces-ava";
import {
  batchMint,
  failPromiseRejection,
  MARKET_WORKSPACE,
  mNEAR,
  NEAR,
  Tgas,
  getBalance,
  assertBalanceChange,
  createPayoutPercentage,
  createPayoutNumerators,
  assertEventLogs,
  assertContractPanics,
} from "./test-utils";

MARKET_WORKSPACE.test(
  "market::splits",
  async (test, { root, factory, store, market, alice, bob, carol }) => {
    // cannot use `prepareTokenListing`, because royalties need to be set
    // during minting
    await root
      .call(
        market,
        "update_allowlist",
        { account_id: factory.accountId, state: true },
        { attachedDeposit: "1" }
      )
      .catch(failPromiseRejection(test, "allowing store on market"));

    const dave = await root.createAccount("dave", {
      initialBalance: NEAR(20).toString(),
    });

    await batchMint({ owner: alice, store, num_to_mint: 1 }).catch(
      failPromiseRejection(test, "minting")
    );

    // ---------------------------- setting splits -----------------------------
    await assertContractPanics(test, [
      // only token owner can set
      [
        async () => {
          await bob.call(
            store,
            "set_split_owners",
            {
              token_ids: ["0"],
              split_between: createPayoutPercentage([
                [alice, 6000],
                [bob, 4000],
              ]),
            },
            { attachedDeposit: mNEAR(1.6) }
          );
        },
        "panicked at 'assertion failed: token.is_pred_owner()',",
        "Bob tried setting splits on Alice's token",
      ],
      [
        // requires storage deposit
        async () => {
          await alice.call(
            store,
            "set_split_owners",
            {
              token_ids: ["0"],
              split_between: createPayoutPercentage([
                [alice, 6000],
                [bob, 4000],
              ]),
            },
            { attachedDeposit: mNEAR(1.59) }
          );
        },
        // TODO::store::low: better error messages
        `panicked at 'insuf. deposit. Need: ${mNEAR(1.6)}',`,
        "Alice tried setting splits with insufficient storage deposit",
      ],
    ]);
    const setSplitsCall = await alice
      .call_raw(
        store,
        "set_split_owners",
        {
          token_ids: ["0"],
          split_between: createPayoutPercentage([
            [alice, 6000],
            [bob, 4000],
          ]),
        },
        { attachedDeposit: mNEAR(1.6) }
      )
      .catch(failPromiseRejection(test, "setting splits"));

    const storeFormattedSplits = {
      // TODO::store::low: why the nesting?
      split_between: createPayoutNumerators([
        [alice, 6000],
        [bob, 4000],
      ]),
    };

    // check event logs
    assertEventLogs(
      test,
      (setSplitsCall as TransactionResult).logs,
      [
        {
          standard: "nep171",
          version: "1.0.0",
          event: "nft_set_split_owners",
          // TODO::store::low: unstringify
          data: JSON.stringify({
            split_owners: storeFormattedSplits,
            token_ids: ["0"],
          }),
        },
      ],
      "setting splits"
    );

    // check chain state: splits in `nft_token`
    test.deepEqual(
      ((await store.view("nft_token", { token_id: "0" })) as any).split_owners,
      storeFormattedSplits,
      "Bad onchain splits (querying `nft_token`)"
    );
    // so far, I cannot find a direct method to query the split owners

    // ------------------- executing transfer with royalties -------------------
    await alice
      .call(
        store,
        "nft_approve",
        {
          token_id: "0",
          account_id: market.accountId,
          msg: JSON.stringify({ price: NEAR(1), autotransfer: true }),
        },
        { attachedDeposit: mNEAR(0.81), gas: Tgas(200) }
      )
      .catch(failPromiseRejection(test, "listing token"));
    // events have been checked previously -> no need here
    const tokenKey = `0:${store.accountId}`;

    const aliceBalance0 = await getBalance(alice);
    const bobBalance0 = await getBalance(bob);
    await carol
      .call(
        market,
        "make_offer",
        {
          token_key: [tokenKey],
          price: [NEAR(1)],
          timeout: [{ Hours: 24 }],
        },
        { attachedDeposit: NEAR(1), gas: Tgas(200) }
      )
      .catch(failPromiseRejection(test, "making offer"));
    // events have been checked previously -> no need here

    // check chain state: alice received 0.75 * 0.975 NEAR
    await assertBalanceChange(
      test,
      { account: alice, ref: aliceBalance0, diff: mNEAR(0.6 * 975) },
      "Checking royalties (without splits)"
    );
    // check chain state: bob received 0.25 * 0.975 NEAR
    await assertBalanceChange(
      test,
      { account: bob, ref: bobBalance0, diff: mNEAR(0.4 * 975) },
      "Checking royalties (without splits)"
    );

    // --------------------- redo, splits should be reset ----------------------
    test.deepEqual(
      ((await store.view("nft_token", { token_id: "0" })) as any).split_owners,
      null,
      "Bad onchain splits after transfer (querying `nft_token`)"
    );

    await carol
      .call(
        store,
        "nft_approve",
        {
          token_id: "0",
          account_id: market.accountId,
          msg: JSON.stringify({ price: NEAR(1), autotransfer: true }),
        },
        { attachedDeposit: mNEAR(0.81), gas: Tgas(200) }
      )
      .catch(failPromiseRejection(test, "listing token again"));

    const aliceBalance1 = await getBalance(alice);
    const bobBalance1 = await getBalance(bob);
    const carolBalance1 = await getBalance(carol);

    await dave
      .call(
        market,
        "make_offer",
        {
          token_key: [tokenKey],
          price: [NEAR(1)],
          timeout: [{ Hours: 24 }],
        },
        { attachedDeposit: NEAR(1), gas: Tgas(200) }
      )
      .catch(failPromiseRejection(test, "making offer again"));

    // check chain state: alice received nothing
    await assertBalanceChange(
      test,
      { account: alice, ref: aliceBalance1, diff: NEAR(0) },
      "Checking royalties (without splits)"
    );
    // check chain state: bob received nothing
    await assertBalanceChange(
      test,
      { account: bob, ref: bobBalance1, diff: NEAR(0) },
      "Checking royalties (without splits)"
    );
    // check chain state: carol received 0.975 NEAR
    await assertBalanceChange(
      test,
      { account: carol, ref: carolBalance1, diff: mNEAR(975) },
      "Checking royalties (without splits)"
    );
  }
);

'''
'''--- testing/__tests__/misc.ava.ts ---
import { TransactionResult, Workspace } from "near-workspaces-ava";
import avaTest from "ava";
import {
  NEAR,
  mNEAR,
  uNEAR,
  nNEAR,
  STORE_WORKSPACE,
  assertEventLogs,
  failPromiseRejection,
  assertMinters,
  assertContractPanics,
} from "./test-utils";

// No need to fire up the chain for testing my utils
avaTest("util tests", (test) => {
  test.is(NEAR(1.5).toString(), "1500000000000000000000000");
  test.is(mNEAR(1.5).toString(), "1500000000000000000000");
  test.is(uNEAR(1.5).toString(), "1500000000000000000");
  test.is(nNEAR(1.5).toString(), "1500000000000000");

  // TODO::testing::low: assertTokenIs?
  // TODO::testing::low: assertTokensAre?
  // TODO::testing::low: assertEventLog?
  // TODO::testing::low: assertEventLogs?
});

// As this tests deployment, we do it in a clean-state environment
Workspace.init().test("deployment", async (test, { root }) => {
  // TODO::testing::low: edge cases of deployment
  const failDeploymentError = (name: string) => (e: any) => {
    test.log(`Failed to deploy ${name} contract`);
    test.log(e);
    test.fail();
  };

  await root
    .createAndDeploy(
      "factory", // subaccount name
      "../wasm/factory.wasm", // path to wasm
      { method: "new", args: {} }
    )
    .catch(failDeploymentError("factory"));

  await root
    .createAndDeploy("store", "../wasm/store.wasm", {
      method: "new",
      args: {
        owner_id: root.accountId,
        metadata: {
          spec: "nft-1.0.0",
          name: "store.root",
          symbol: "ROOT",
        },
      },
    })
    .catch(failDeploymentError("store"));

  await root
    .createAndDeploy("helper", "../wasm/helper.wasm", {
      method: "new",
      args: {},
    })
    .catch(failDeploymentError("helper"));

  await root
    .createAndDeploy("market", "../wasm/market.wasm", {
      method: "new",
      args: { init_allowlist: [] },
    })
    .catch(failDeploymentError("market"));
});

STORE_WORKSPACE.test(
  "ownership::transfer-store",
  async (test, { alice, bob, carol, store }) => {
    await alice
      .call(
        store,
        "grant_minter",
        { account_id: bob },
        { attachedDeposit: "1" }
      )
      .catch(failPromiseRejection(test, "granting minter rights"));

    // ---------------------------- remove minters -----------------------------
    const transferStoreClearMintersCall = await alice
      .call_raw(
        store,
        "transfer_store_ownership",
        { new_owner: carol.accountId, keep_old_minters: false },
        { attachedDeposit: "1" }
      )
      .catch(
        failPromiseRejection(
          test,
          "transferring store ownership (minters cleared)"
        )
      );

    // check logs
    assertEventLogs(
      test,
      (transferStoreClearMintersCall as TransactionResult).logs,
      [
        {
          standard: "nep171",
          version: "1.0.0",
          event: "nft_revoke_minter",
          // TODO::store::medium: wtf is this format?
          data: JSON.stringify({ data: alice.accountId }),
        },
        {
          standard: "nep171",
          version: "1.0.0",
          event: "nft_revoke_minter",
          data: JSON.stringify({ data: bob.accountId }),
        },
        {
          standard: "nep171",
          version: "1.0.0",
          event: "nft_grant_minter",
          data: JSON.stringify({ data: carol.accountId }),
        },
        {
          standard: "nep171",
          version: "1.0.0",
          event: "nft_transfer_store",
          data: JSON.stringify({ data: carol.accountId }),
        },
      ],
      "transferring store ownership (minters cleared)"
    );

    // TODO::store::medium query owner

    // query minters
    await assertMinters(
      { test, store },
      [
        [alice, false],
        [bob, false],
        [carol, true],
      ],
      "transferring store ownership (minters cleared)"
    );

    await assertContractPanics(test, [
      // require ownership
      [
        async () => {
          await alice.call(
            store,
            "transfer_store_ownership",
            { new_owner: alice.accountId, keep_old_minters: false },
            { attachedDeposit: "1" }
          );
        },
        "panicked at 'assertion failed: `(left == right)",
        "Non-owner tried to transfer store ownership",
      ],
      // require yoctoNEAR deposit
      [
        async () => {
          await carol.call(store, "transfer_store_ownership", {
            new_owner: alice.accountId,
            keep_old_minters: false,
          });
        },
        "Requires attached deposit of exactly 1 yoctoNEAR",
        "Tried to transfer store ownership without yoctoNEAR deposit",
      ],
    ]);

    // ----------------------------- keep minters ------------------------------
    const transferStoreKeepMintersCall = await carol
      .call_raw(
        store,
        "transfer_store_ownership",
        { new_owner: alice.accountId, keep_old_minters: true },
        { attachedDeposit: "1" }
      )
      .catch(
        failPromiseRejection(
          test,
          "transferring store ownership (keep minters)"
        )
      );

    // check logs
    assertEventLogs(
      test,
      (transferStoreKeepMintersCall as TransactionResult).logs,
      [
        {
          standard: "nep171",
          version: "1.0.0",
          event: "nft_grant_minter",
          // TODO::store::medium: wtf is this format?
          data: JSON.stringify({ data: alice.accountId }),
        },
        {
          standard: "nep171",
          version: "1.0.0",
          event: "nft_transfer_store",
          data: JSON.stringify({ data: alice.accountId }),
        },
      ],
      "transferring store ownership (keep minters)"
    );

    // TODO::store::medium query owner
    // query minters
    await assertMinters(
      { test, store },
      [
        [alice, true],
        [bob, false],
        [carol, true],
      ],
      "transferring store ownership (keep minters)"
    );
  }
);

// TODO::testing::low factory ownership transfer
// DEFAULT_WORKSPACE.test(
//   "ownership::transfer-factory",
//   async (test, { root, alice, bob, carol, store }) => {
//     await alice.call(store, "grant_minter", {});

//     const transferStoreCall = await alice.call_raw(
//       store,
//       "store_ownership",
//       {}
//     );

//     // TODO: check logs
//     // TODO: require ownership
//     // TODO: require yoctoNEAR deposit
//   }
// );

// TODO::testing::low market ownership transfer
// DEFAULT_WORKSPACE.test(
//   "ownership::transfer-market",
//   async (test, { root, alice, bob, carol, store }) => {
//     await alice.call(store, "grant_minter", {});

//     const transferStoreCall = await alice.call_raw(
//       store,
//       "store_ownership",
//       {}
//     );

//     // TODO: check logs
//     // TODO: require ownership
//     // TODO: require yoctoNEAR deposit
//   }
// );

// TODO:

// Things to address in tests
// - [x] Edge cases should be handled in a `Promise.all`
// - [x] break into modules and subfunctions
// - [x] Check logs method
// - [] subfunctions with the same signature as AvaTestingFn?
// - [] better test names + more granularity to allow descriptive selections?
// - [] wrapping the `test` object to do common things (high effort, not urgent)
//   - [] make the underlying methods available
//   - [] test.isNftOwner(token_id, owner_id)
//   - [] test.notIsNftOwner(contract, token_id, owner_id)
//   - [] test.isNftApproved(contract, token_id, owner_id, approval_id?)
//   - [] test.notIsNftApproved(contract, token_id, owner_id, approval_id?)
//   - [] test.isMinter(account_id)
//   - [] test.notIsMinter(account_id)
// - []
// - []
//

// Things to address in codebase
//
// high priority
// - [] Token doesn't comply with NEP171
// - [] Events don't comply with NEP297 -> Cannot use impls from
//      `near_contract_standards`, as we need a version bump for fixing that
// - [] `nft_tokens` and `nft_tokens_for_owner` are non-compliant
//   - [] ask frontend if changing them will break things
// - []
//
// low priority
// - [] decide whether empty fields should show up in the event logs
// - [] revise the signature of `batch_transfer`
// - []
//

'''
'''--- testing/__tests__/nft.approvals.ava.ts ---
import { BN, TransactionResult } from "near-workspaces-ava";
import {
  assertApprovals,
  assertNoApprovals,
  assertContractPanics,
  assertEventLogs,
  assertBalanceChange,
  batchMint,
  STORE_WORKSPACE,
  mNEAR,
  getBalance,
  assertContractTokenOwners,
  assertNoApproval,
} from "./test-utils";
// import * as ava from "near-workspaces-ava";

STORE_WORKSPACE.test(
  "approvals::core",
  async (test, { alice, bob, carol, store }) => {
    const failPromiseRejection = (msg: string) => (e: any) => {
      test.log(`Promise rejected while ${msg}:`);
      test.log(e);
      test.fail();
    };

    await batchMint({ owner: alice, store, num_to_mint: 4 }).catch(
      failPromiseRejection("minting")
    );
    // // assert correctness of current owners
    // await assertContractTokenOwners(
    //   test,
    //   store,
    //   [
    //     { id: "0", owner_id: alice.accountId },
    //     { id: "1", owner_id: alice.accountId },
    //     { id: "2", owner_id: alice.accountId },
    //     { id: "3", owner_id: alice.accountId },
    //   ],
    //   "minting"
    // );

    // assert correctness of current approvals
    await assertNoApprovals(
      { test, store },
      [
        { token_id: "0", approved_account_id: bob.accountId },
        { token_id: "1", approved_account_id: bob.accountId },
        { token_id: "2", approved_account_id: bob.accountId },
        { token_id: "3", approved_account_id: bob.accountId },
      ],
      "minting"
    );

    // -------------------------------- approve --------------------------------
    const approveCall = await alice
      .call_raw(
        store,
        "nft_approve",
        { token_id: "0", account_id: bob.accountId },
        { attachedDeposit: mNEAR(0.81) } // no value for this in mintbase-js
      )
      .catch(failPromiseRejection("approving"));
    // check event logs
    assertEventLogs(
      test,
      (approveCall as TransactionResult).logs,
      [
        {
          event: "nft_approve",
          standard: "nep171",
          version: "1.0.0",
          // TODO::store::low: unstringify
          data: JSON.stringify([
            { token_id: 0, approval_id: 0, account_id: bob.accountId },
          ]),
        },
      ],
      "approving"
    );

    await assertContractPanics(test, [
      // try approving when not owning token
      [
        async () =>
          bob.call(
            store,
            "nft_approve",
            { token_id: "1", account_id: bob.accountId },
            { attachedDeposit: mNEAR(0.81) }
          ),
        "panicked at 'assertion failed: token.is_pred_owner()',",
        "Bob tried approving on unowned token",
      ],
      // require at least one yoctoNEAR to approve
      [
        async () =>
          alice.call(
            store,
            "nft_approve",
            { token_id: "1", account_id: bob.accountId },
            { attachedDeposit: mNEAR(0.8) } // deposit > 0.8
          ),
        //TODO::store::low: panic message format
        "panicked at 'assertion failed: env::attached_deposit() > self.storage_costs.common',",
        "Alice tried approving with insufficient deposit",
      ],
    ]);

    // assert correctness of current approvals
    await assertApprovals(
      { test, store },
      [{ token_id: "0", approved_account_id: bob.accountId, approval_id: 0 }],
      "approving"
    );
    await assertNoApprovals(
      { test, store },
      [
        { token_id: "1", approved_account_id: bob.accountId },
        { token_id: "2", approved_account_id: bob.accountId },
        { token_id: "3", approved_account_id: bob.accountId },
      ],
      "approving"
    );

    // ----------------------------- batch approve -----------------------------
    const batchApproveCall = await alice
      .call_raw(
        store,
        "nft_batch_approve",
        { token_ids: ["1", "2"], account_id: bob.accountId },
        { attachedDeposit: mNEAR(1.61) } // no value for this in mintbase-js
      )
      .catch(failPromiseRejection("batch approving"));
    // check event logs
    assertEventLogs(
      test,
      (batchApproveCall as TransactionResult).logs,
      [
        {
          standard: "nep171",
          version: "1.0.0",
          event: "nft_approve",
          // TODO::store::low: unstringify
          data: JSON.stringify([
            // FIXME::store::medium: token_id should be a string
            { token_id: 1, approval_id: 1, account_id: bob.accountId },
            // FIXME::store::medium: token_id should be a string
            { token_id: 2, approval_id: 2, account_id: bob.accountId },
          ]),
        },
      ],
      "batch approving"
    );

    await assertContractPanics(test, [
      // try batch approving when not owning token
      [
        async () =>
          bob.call(
            store,
            "nft_batch_approve",
            { token_ids: ["2", "3"], account_id: bob.accountId },
            { attachedDeposit: mNEAR(1.61) }
          ),
        "panicked at 'assertion failed: token.is_pred_owner()',",
        "Bob tried batch approving on unowned tokens",
      ],
      // require at sufficient deposit to cover storage rent
      [
        async () =>
          alice.call(
            store,
            "nft_batch_approve",
            { token_ids: ["3"], account_id: bob.accountId },
            { attachedDeposit: mNEAR(0.8) }
          ),
        //TODO::store::low: consistent error messages
        "panicked at 'deposit less than: 800000000000000000000',",
        "Alice tried batch approving with insufficient deposit",
      ],
    ]);

    // assert correctness of current approvals
    await assertApprovals(
      { test, store },
      [
        { token_id: "0", approved_account_id: bob.accountId, approval_id: 0 },
        { token_id: "1", approved_account_id: bob.accountId, approval_id: 1 },
        { token_id: "2", approved_account_id: bob.accountId, approval_id: 2 },
      ],
      "batch approving"
    );
    await assertNoApprovals(
      { test, store },
      [{ token_id: "3", approved_account_id: bob.accountId }],
      "batch approving"
    );

    // -------------------------------- revoke ---------------------------------
    // get bob's balance to check the refunding
    const aliceBalance1 = await getBalance(alice);
    const revokeCall = await alice
      .call_raw(
        store,
        "nft_revoke",
        {
          token_id: "2",
          account_id: bob.accountId,
        },
        { attachedDeposit: "1" }
      )
      .catch(failPromiseRejection("revoking"));
    // const aliceBalance2 = await getBalance(alice);
    // const balanceDiff = aliceBalance1.sub(aliceBalance2);
    // const gas = (revokeCall as TransactionResult).gas_burnt;
    // const nearGasBN = new BN(gas.toString()).mul(new BN(100e6)).toString();
    // const nearGas = new ava.NEAR(nearGasBN);
    // test.log(`Alice's balance before revoking: ${aliceBalance1.toHuman()}`);
    // test.log(`Alice's balance after revoking:  ${aliceBalance2.toHuman()}`);
    // test.log(`Difference:                      ${balanceDiff.toHuman()}`);
    // test.log(`Gas costs (1 Tgas = 0.3 mNEAR):  ${nearGas.toHuman()}`);
    // test.log(`Gas costs (gas units):           ${gas.toHuman()}`);
    // test.fail();

    // check event logs
    assertEventLogs(
      test,
      (revokeCall as TransactionResult).logs,
      [
        {
          standard: "nep171",
          version: "1.0.0",
          event: "nft_revoke",
          // FIXME::store::medium: token_id should be a string
          // TODO::store::low: for `nft_approve`, data is an array, here
          //  it's an object -> should have the same predictable structure
          data: JSON.stringify({ token_id: 2, account_id: bob.accountId }),
        },
      ],
      "revoking"
    );
    // check if revoking refunds the storage deposit
    // TODO::idk::medium: 6 mNEAR gone missing -> create issue on github
    // await assertBalanceChange(
    //   test,
    //   {
    //     account: alice,
    //     // subtract the yoctoNEAR deposit
    //     ref: aliceBalance1.sub(new BN("1")),
    //     diff: mNEAR(0.8),
    //     gas: (revokeCall as TransactionResult).gas_burnt,
    //   },
    //   "Revoking"
    // );

    await assertContractPanics(test, [
      // try revoking when not owning token
      [
        async () =>
          bob.call(
            store,
            "nft_revoke",
            {
              token_id: "1",
              account_id: bob.accountId,
            },
            { attachedDeposit: "1" }
          ),
        "panicked at 'assertion failed: token.is_pred_owner()',",
        "Bob tried revoking on unowned token",
      ],
      // require at least one yoctoNEAR to revoke
      [
        async () =>
          alice.call(store, "nft_revoke", {
            token_id: "0",
            account_id: bob.accountId,
          }),
        "Requires attached deposit of exactly 1 yoctoNEAR",
        "Alice tried revoking without yoctoNEAR deposit",
      ],
    ]);

    // assert correctness of current approvals
    await assertApprovals(
      { test, store },
      [
        { token_id: "0", approved_account_id: bob.accountId, approval_id: 0 },
        { token_id: "1", approved_account_id: bob.accountId, approval_id: 1 },
      ],
      "revoking"
    );
    await assertNoApprovals(
      { test, store },
      [
        { token_id: "2", approved_account_id: bob.accountId },
        { token_id: "3", approved_account_id: bob.accountId },
      ],
      "revoking"
    );

    // ------------------------------ revoke_all -------------------------------
    // prior to revoking all, we need a token with two approvals
    await alice.call(
      store,
      "nft_batch_approve",
      { token_ids: ["0", "1"], account_id: carol.accountId },
      { attachedDeposit: mNEAR(1.61) } // no value for this in mintbase-js
    );
    await assertApprovals(
      { test, store },
      [
        { token_id: "0", approved_account_id: carol.accountId, approval_id: 3 },
        { token_id: "1", approved_account_id: carol.accountId, approval_id: 4 },
      ],
      "preparing revoke_all"
    );

    // actual call
    // const aliceBalance2 = await getBalance(alice);
    const revokeAllCall = await alice
      .call_raw(
        store,
        "nft_revoke_all",
        { token_id: "1" },
        { attachedDeposit: "1" }
      )
      .catch(failPromiseRejection("revoking all"));
    // check event logs
    assertEventLogs(
      test,
      (revokeAllCall as TransactionResult).logs,
      [
        {
          standard: "nep171",
          version: "1.0.0",
          event: "nft_revoke_all",
          // TODO::store::medium: wtf is this format?
          data: JSON.stringify({ data: "1" }),
        },
      ],
      "revoking all"
    );
    // // check if revoking all refunds the required security deposit
    // // FIXME::testing::low: this cannot test properly because the cost is so low
    // // -> use TransactionResult::gas_burnt()
    // await assertBalanceChange(
    //   test,
    //   { account: alice, ref: aliceBalance2, diff: mNEAR(1.6) },
    //   "Revoking all"
    // );

    await assertContractPanics(test, [
      // try revoking all when not owning token
      [
        async () =>
          bob.call(
            store,
            "nft_revoke_all",
            { token_id: "0" },
            { attachedDeposit: "1" }
          ),
        "panicked at 'assertion failed: token.is_pred_owner()',",
        "Bob tried revoking all on unowned token",
      ],
      // require at least one yoctoNEAR to revoke all
      [
        async () => alice.call(store, "nft_revoke_all", { token_id: "0" }),
        "Requires attached deposit of exactly 1 yoctoNEAR",
        "Alice tried revoking all without yoctoNEAR deposit",
      ],
    ]);

    // // assert correctness of current approvals
    await assertApprovals(
      { test, store },
      [
        { token_id: "0", approved_account_id: bob.accountId, approval_id: 0 },
        { token_id: "0", approved_account_id: carol.accountId, approval_id: 3 },
      ],
      "revoking all"
    );
    await assertNoApprovals(
      { test, store },
      [
        { token_id: "1", approved_account_id: carol.accountId },
        { token_id: "1", approved_account_id: bob.accountId },
        { token_id: "2", approved_account_id: bob.accountId },
        { token_id: "3", approved_account_id: bob.accountId },
      ],
      "revoking all"
    );
  }
);

STORE_WORKSPACE.test(
  "approvals::minting",
  async (test, { alice, bob, carol, store }) => {
    const failPromiseRejection = (msg: string) => (e: any) => {
      test.log(`Promise rejected while ${msg}:`);
      test.log(e);
      test.fail();
    };

    // ---------------------------- authorized mint ----------------------------
    // TODO::store::low: this increases storage, shouldn't it then require
    //  a sufficient deposit? -> this is not third party-territory, only the
    //  owner can call this
    const grantMinterCall = await alice
      .call_raw(
        store,
        "grant_minter",
        { account_id: bob.accountId },
        { attachedDeposit: "1" }
      )
      .catch(failPromiseRejection("grant minting rights"));

    // check logs
    assertEventLogs(
      test,
      (grantMinterCall as TransactionResult).logs,
      [
        {
          standard: "nep171",
          version: "1.0.0",
          event: "nft_grant_minter",
          // TODO::store::medium: wtf is this format?
          data: JSON.stringify({ data: bob.accountId }),
        },
      ],
      "grant minting rights"
    );

    await assertContractPanics(test, [
      // only owner can grant minting rights
      [
        async () =>
          bob.call(
            store,
            "grant_minter",
            { account_id: bob.accountId },
            { attachedDeposit: "1" }
          ),
        "panicked at 'assertion failed: `(left == right)`",
        "Bob tried granting himself minting rights",
      ],
      //  require deposit
      [
        async () =>
          alice.call(store, "grant_minter", { account_id: bob.accountId }),
        "Requires attached deposit of exactly 1 yoctoNEAR",
        "Alice tried to grant minting rights without yoctoNEAR deposit",
      ],
    ]);

    // check contract state (implicitly tests `check_is_minter`)
    test.true(
      await store.view("check_is_minter", { account_id: bob.accountId }),
      "Failed to grant minting rights to Bob"
    );
    test.false(
      await store.view("check_is_minter", { account_id: carol.accountId }),
      "How on earth did Carol get minting rights?"
    );
    // checking the list_minters method
    test.deepEqual(
      await store.view("list_minters"),
      [alice.accountId, bob.accountId],
      "Bad minters list after granting minting rigths to Bob"
    );

    // actual minting
    // TODO::store::low: shouldn't third party minting require deposits to
    //  cover storage costs? -> otherwise third-party minters might exhaust a
    //  contracts storage
    const batchMintCall = await bob
      .call_raw(
        store,
        "nft_batch_mint",
        { owner_id: bob.accountId, num_to_mint: 2, metadata: {} },
        { attachedDeposit: "1" }
      )
      .catch(failPromiseRejection("approved minting"));

    // check logs
    assertEventLogs(
      test,
      (batchMintCall as TransactionResult).logs,
      [
        {
          standard: "nep171",
          version: "1.0.0",
          event: "nft_mint",
          data: [
            {
              owner_id: bob.accountId,
              token_ids: ["0", "1"],
              memo: JSON.stringify({
                royalty: null,
                split_owners: null,
                meta_id: null,
                meta_extra: null,
                minter: bob.accountId,
              }),
            },
          ],
        },
      ],
      "approved minting"
    );

    // check contract state
    assertContractTokenOwners(
      { test, store },
      [
        { token_id: "0", owner_id: bob.accountId },
        { token_id: "1", owner_id: bob.accountId },
      ],
      "approved minting"
    );

    // revoke minting rights
    const revokeMinterCall = await alice
      .call_raw(
        store,
        "revoke_minter",
        { account_id: bob.accountId },
        { attachedDeposit: "1" }
      )
      .catch(failPromiseRejection("revoke minting rights"));

    // check logs
    assertEventLogs(
      test,
      (revokeMinterCall as TransactionResult).logs,
      [
        {
          standard: "nep171",
          version: "1.0.0",
          event: "nft_revoke_minter",
          // TODO::store::medium: wtf is this format?
          data: JSON.stringify({ data: bob.accountId }),
        },
      ],
      "approved minting"
    );

    await assertContractPanics(test, [
      // only owner can revoke minting rights
      [
        async () =>
          bob.call(
            store,
            "revoke_minter",
            { account_id: bob.accountId },
            { attachedDeposit: "1" }
          ),
        "panicked at 'assertion failed: `(left == right)`",
        "Bob tried to revoke his minting rights",
      ],
      // requires yoctoNEAR deposit
      [
        async () =>
          alice.call(store, "revoke_minter", { account_id: bob.accountId }),
        "Requires attached deposit of exactly 1 yoctoNEAR",
        "Alice tried to revoke minting rights without yoctoNEAR deposit",
      ],
      // owner cannot revoke their own minting rights
      [
        async () =>
          alice.call(
            store,
            "revoke_minter",
            { account_id: alice.accountId },
            { attachedDeposit: "1" }
          ),
        // TODO::testing::low: look for the comment AFTER the failed
        //  assertion message (in this case: "can't revoke owner")
        // TODO::testing::low: look for similar test cases where I might
        //  have missed this
        "panicked at 'assertion failed: `(left != right)`",
        "Alice tried to revoke her own minting rights",
      ],
    ]);

    // check contract state
    test.false(
      await store.view("check_is_minter", { account_id: bob.accountId }),
      "Failed to revoke Bob's minting rights"
    );
    // checking the list_minters method
    test.deepEqual(
      await store.view("list_minters"),
      [alice.accountId],
      "Bad minters list after granting minting rigths to Bob"
    );
  }
);

STORE_WORKSPACE.test(
  "approvals::token-actions",
  async (test, { alice, bob, carol, store }) => {
    const failPromiseRejection = (msg: string) => (e: any) => {
      test.log(`Promise rejected while ${msg}:`);
      test.log(e);
      test.fail();
    };

    await batchMint({ owner: alice, store, num_to_mint: 5 }).catch(
      failPromiseRejection("minting")
    );

    await alice
      .call(
        store,
        "nft_batch_approve",
        {
          token_ids: ["0", "1", "2", "3"],
          account_id: bob.accountId,
        },
        { attachedDeposit: mNEAR(3.21) } // no value for this in mintbase-js
      )
      .catch(failPromiseRejection("approving"));

    // -------------------------- authorized transfer --------------------------
    const transferCall = await bob
      .call_raw(
        store,
        "nft_transfer",
        { receiver_id: carol.accountId, token_id: "0", approval_id: 0 },
        { attachedDeposit: "1" }
      )
      .catch(failPromiseRejection("transferring (approved)"));
    assertEventLogs(
      test,
      (transferCall as TransactionResult).logs,
      [
        {
          standard: "nep171",
          version: "1.0.0",
          event: "nft_transfer",
          data: [
            {
              authorized_id: null, // FIXME::store::medium: why null?
              old_owner_id: alice.accountId,
              new_owner_id: carol.accountId,
              token_ids: ["0"],
              memo: null,
            },
          ],
        },
      ],
      "transferring (approved)"
    );

    await assertContractPanics(test, [
      // try transferring without approval ID
      [
        async () => {
          await bob.call(
            store,
            "nft_transfer",
            { receiver_id: carol.accountId, token_id: "1" },
            { attachedDeposit: "1" }
          );
        },
        "panicked at 'approval_id required'",
        "Bob tried transferring (approved) without approval_id",
      ],
      // require at least one yoctoNEAR to transfer
      [
        async () => {
          await bob.call(store, "nft_transfer", {
            receiver_id: carol.accountId,
            token_id: "1",
            approval_id: 1,
          });
        },
        "Requires attached deposit of exactly 1 yoctoNEAR",
        "Bob tried transferring (approved) without yoctoNEAR deposit",
      ],
      // TODO::testing::medium workaround until fixed for not being able to
      //  check absence of approval
      [
        async () => {
          await bob.call(
            store,
            "nft_transfer",
            { receiver_id: carol.accountId, token_id: "0", approval_id: 0 },
            { attachedDeposit: "1" }
          );
        },
        // TODO::store::low: better error messages
        "panicked at 'assertion failed: self.nft_is_approved_internal(&token, env::predecessor_account_id(),",
        "Bob tried transferring (approved) without yoctoNEAR deposit",
      ],
    ]);

    // token must now belong to carol
    await assertContractTokenOwners(
      { test, store },
      [
        { token_id: "0", owner_id: carol.accountId },
        { token_id: "1", owner_id: alice.accountId },
        { token_id: "2", owner_id: alice.accountId },
        { token_id: "3", owner_id: alice.accountId },
      ],
      "Bad ownership state after approved transfer"
    );
    // approval must have cleared -> FIXME: cannot check properly, because API is broken
    assertNoApproval(
      { test, store },
      { token_id: "1", approved_account_id: bob.accountId },
      "Bob didn't loose approval after transfer"
    );

    // // ----------------------- authorized batch_transfer -----------------------
    // // currently, only the owner of tokens may batch-transfer them
    // const batchTransferCall = await bob
    //   .call_raw(
    //     store,
    //     "nft_batch_transfer",
    //     {
    //       token_ids: [
    //         // ["1", bob.accountId],
    //         ["2", carol.accountId],
    //       ],
    //     },
    //     { attachedDeposit: "1" }
    //   )
    //   // FIXME::testing::medium: tokens loaned?!
    //   .catch(failPromiseRejection("batch transferring (approved)"));

    // assertEventLogs(
    //   test,
    //   (batchTransferCall as TransactionResult).logs,
    //   [
    //     {
    //       standard: "nep171",
    //       version: "1.0.0",
    //       event: "nft_transfer",
    //       data: [
    //         {
    //           authorized_id: null,
    //           old_owner_id: alice.accountId,
    //           new_owner_id: bob.accountId,
    //           token_ids: ["1"],
    //           memo: null,
    //         },
    //         {
    //           authorized_id: null,
    //           old_owner_id: alice.accountId,
    //           new_owner_id: carol.accountId,
    //           token_ids: ["2"],
    //           memo: null,
    //         },
    //       ],
    //     },
    //   ],
    //   "batch transferring (approved)"
    // );

    // // await assertContractPanics(test, [
    // //   // TODO::testing::low: try batch transferring without approval IDs
    // //   [async () => {}, " ".repeat(180), ""],
    // //   // TODO::testing::low: require at least one yoctoNEAR to approve
    // //   [async () => {}, " ".repeat(180), ""],
    // // ]);

    // await assertContractTokenOwners(
    //   test,
    //   store,
    //   [
    //     { id: "0", owner_id: carol.accountId },
    //     { id: "1", owner_id: bob.accountId },
    //     { id: "2", owner_id: carol.accountId },
    //     { id: "3", owner_id: alice.accountId },
    //   ],
    //   "Bad ownership state after approved batch transfer"
    // );

    // // ---------------------------- authorized burn ----------------------------
    // // currently, only the owner of a token may burn it
    // const burnCall = await bob
    //   .call_raw(
    //     store,
    //     "nft_batch_burn",
    //     { token_ids: ["3"] },
    //     { attachedDeposit: "1" }
    //   )
    //   .catch(failPromiseRejection("burning (approved)"));
    // assertEventLogs(
    //   test,
    //   (burnCall as TransactionResult).logs,
    //   [
    //     {
    //       standard: "nep171",
    //       version: "1.0.0",
    //       event: "nft_burn",
    //       data: [
    //         {
    //           owner_id: "alice.test.near",
    //           authorized_id: null,
    //           token_ids: ["4", "5"],
    //           memo: null,
    //         },
    //       ],
    //     },
    //   ],
    //   "burning (approved)"
    // );

    // await assertContractPanics(test, [
    //   // TODO::testing::low: try approving when not owning token
    //   [async () => {}, " ".repeat(180), ""],
    //   // TODO::testing::low: require at least one yoctoNEAR to approve
    //   [async () => {}, " ".repeat(180), ""],
    // ]);
  }
);

'''
'''--- testing/__tests__/nft.core.ava.ts ---
import { TransactionResult } from "near-workspaces-ava";
import {
  assertContractPanics,
  FACTORY_WORKSPACE,
  DEPLOY_STORE_RENT,
  DEPLOY_STORE_GAS,
  assertContractTokenOwners,
  assertEventLogs,
  failPromiseRejection,
} from "./test-utils";

FACTORY_WORKSPACE.test(
  "core",
  async (test, { root, factory, alice, bob, carol }) => {
    // const failPromiseRejection = (msg: string) => (e: any) => {
    //   test.log(`Promise rejected while ${msg}:`);
    //   test.log(e);
    //   test.fail();
    // };

    // store creation
    await alice
      .call(
        factory,
        "create_store",
        {
          owner_id: alice.accountId,
          metadata: {
            spec: "nft-1.0.0",
            name: "alice",
            symbol: "ALICE",
          },
        },
        { attachedDeposit: DEPLOY_STORE_RENT, gas: DEPLOY_STORE_GAS }
      )
      .catch(failPromiseRejection(test, "creating store"));
    const store = root.getFullAccount(`alice.${factory.accountId}`);
    // TODO::testing::medium: check event logs

    // TODO::testing::medium trying deployment with forbidden names
    //  - reserved names: "market", "loan"
    //  - taken names, in this case "alice"

    // minting
    const mintCall = await alice
      .call_raw(
        store,
        "nft_batch_mint",
        { owner_id: alice.accountId, metadata: {}, num_to_mint: 6 },
        { attachedDeposit: "1" }
      )
      .catch(failPromiseRejection(test, "minting"));

    // check minting logs
    assertEventLogs(
      test,
      (mintCall as TransactionResult).logs,
      [
        {
          standard: "nep171",
          version: "1.0.0",
          event: "nft_mint",
          data: [
            {
              owner_id: "alice.test.near",
              token_ids: ["0", "1", "2", "3", "4", "5"],
              // memo should be a string, as it's standardized like that!
              memo: JSON.stringify({
                royalty: null,
                split_owners: null,
                meta_id: null,
                meta_extra: null,
                minter: alice.accountId,
              }),
            },
          ],
        },
      ],
      "minting"
    );

    // inspecting minted tokens (implicitly tests `nft_token`)
    await assertContractTokenOwners(
      { test, store },
      [
        { token_id: "0", owner_id: alice.accountId },
        { token_id: "1", owner_id: alice.accountId },
        { token_id: "2", owner_id: alice.accountId },
        { token_id: "3", owner_id: alice.accountId },
        { token_id: "4", owner_id: alice.accountId },
        { token_id: "5", owner_id: alice.accountId },
      ],
      "After minting"
    ).catch(failPromiseRejection(test, "checking token format"));

    await assertContractPanics(test, [
      // try to mint while not being minter
      [
        async () => {
          await bob.call(
            store,
            "nft_batch_mint",
            { owner_id: bob.accountId, metadata: {}, num_to_mint: 1 },
            { attachedDeposit: "1" }
          );
        },
        `panicked at '${bob.accountId} not a minter'`,
        "Bob tried minting without minter permission",
      ],
      // try minting without yoctoNEAR deposit
      [
        async () => {
          await alice.call(store, "nft_batch_mint", {
            owner_id: alice.accountId,
            metadata: {},
            num_to_mint: 1,
          });
        },
        "panicked at 'assertion failed: env::attached_deposit() >= 1'",
        "Alice tried minting without yoctoNEAR deposit",
      ],
    ]);

    // transfering a single token
    const transferCall = await alice
      .call_raw(
        store,
        "nft_transfer",
        { receiver_id: bob.accountId, token_id: "0" },
        { attachedDeposit: "1" }
      )
      .catch(failPromiseRejection(test, "transferring"));

    // check transfer logs
    assertEventLogs(
      test,
      (transferCall as TransactionResult).logs,
      [
        {
          standard: "nep171",
          version: "1.0.0",
          event: "nft_transfer",
          data: [
            {
              authorized_id: null,
              old_owner_id: "alice.test.near",
              new_owner_id: "bob.test.near",
              token_ids: ["0"],
              memo: null,
            },
          ],
        },
      ],
      "transferring"
    );

    await assertContractPanics(test, [
      // try to transfer unowned token (random bob)
      [
        async () => {
          await bob.call(
            store,
            "nft_transfer",
            { receiver_id: bob.accountId, token_id: "1" },
            { attachedDeposit: "1" }
          );
        },
        "panicked at 'approval_id required'",
        "Bob tried to transfer an unowned token",
      ],
      // try to transfer unowned token (store owner)
      [
        async () => {
          await alice.call(
            store,
            "nft_transfer",
            { receiver_id: alice.accountId, token_id: "0" },
            { attachedDeposit: "1" }
          );
        },
        "panicked at 'approval_id required'",
        "Alice tried to transfer an unowned token",
      ],
    ]);

    // batch transfering tokens
    const batchTransferCall = await alice
      .call_raw(
        store,
        "nft_batch_transfer",
        // TODO::contracts::low: undescriptive param name
        // TODO::contracts::low: why is this a tuple whereas `nft_transfer` is
        //  a record?
        // TODO::contracts::low: missing memo parameter?
        {
          token_ids: [
            ["1", bob.accountId],
            ["2", carol.accountId],
          ],
        },
        { attachedDeposit: "1" }
      )
      .catch(failPromiseRejection(test, "batch transferring"));

    // check transfer logs
    // TODO::contracts::low: should empty fields be serialized as null or
    //  simply omitted? -> null might make sense for the indexer
    // TODO::testing::low: assert event when batch transferring two to the same
    // address
    assertEventLogs(
      test,
      (batchTransferCall as TransactionResult).logs,
      [
        {
          standard: "nep171",
          version: "1.0.0",
          event: "nft_transfer",
          data: [
            {
              authorized_id: null,
              old_owner_id: "alice.test.near",
              new_owner_id: "bob.test.near",
              token_ids: ["1"],
              memo: null,
            },
            {
              authorized_id: null,
              old_owner_id: "alice.test.near",
              new_owner_id: "carol.test.near",
              token_ids: ["2"],
              memo: null,
            },
          ],
        },
      ],
      "batch transferring"
    );

    await assertContractPanics(test, [
      // try to batch transfer unowned tokens (random bob)
      [
        async () => {
          await bob.call(
            store,
            "nft_batch_transfer",
            {
              token_ids: [
                ["1", carol.accountId],
                ["2", bob.accountId],
              ],
            },
            { attachedDeposit: "1" }
          );
        },
        "panicked at 'assertion failed: token.is_pred_owner()'",
        "Bob tried to batch transfer unowned tokens",
      ],
      // try to batch transfer unowned tokens (store owner)
      [
        async () => {
          await alice.call(
            store,
            "nft_batch_transfer",
            {
              token_ids: [
                ["0", alice.accountId],
                ["1", alice.accountId],
              ],
            },
            { attachedDeposit: "1" }
          );
        },
        "panicked at 'assertion failed: token.is_pred_owner()'",
        "Alice tried to batch transfer unowned tokens",
      ],
      // try to batch transfer without yoctoNEAR deposit
      [
        async () => {
          await alice.call(store, "nft_batch_transfer", {
            token_ids: [
              ["0", alice.accountId],
              ["1", alice.accountId],
            ],
          });
        },
        "Requires attached deposit of exactly 1 yoctoNEAR",
        "Alice tried to batch transfer tokens without yoctoNEAR deposit",
      ],
    ]);

    // checking token ownership
    await assertContractTokenOwners(
      { test, store },
      [
        { token_id: "0", owner_id: bob.accountId },
        { token_id: "1", owner_id: bob.accountId },
        { token_id: "2", owner_id: carol.accountId },
        { token_id: "3", owner_id: alice.accountId },
        { token_id: "4", owner_id: alice.accountId },
        { token_id: "5", owner_id: alice.accountId },
      ],
      "After transfers"
    ).catch(failPromiseRejection(test, "checking token ownership"));

    // burning tokens
    const burnCall = await alice
      .call_raw(
        store,
        "nft_batch_burn",
        { token_ids: ["4", "5"] },
        { attachedDeposit: "1" }
      )
      .catch(failPromiseRejection(test, "burning"));

    // check burn logs
    assertEventLogs(
      test,
      (burnCall as TransactionResult).logs,
      [
        {
          standard: "nep171",
          version: "1.0.0",
          event: "nft_burn",
          data: [
            {
              owner_id: "alice.test.near",
              authorized_id: null,
              token_ids: ["4", "5"],
              memo: null,
            },
          ],
        },
      ],
      "burning"
    );

    await assertContractPanics(test, [
      // try to burn unowned tokens (random bob)
      [
        async () => {
          await bob.call(
            store,
            "nft_batch_burn",
            { token_ids: ["1", "2"] },
            { attachedDeposit: "1" }
          );
        },
        // TODO::contracts::low: msg should be more descriptive
        "panicked at 'assertion failed: `(left == right)`",
        "Bob tried to burn unowned tokens",
      ],
      // try to burn unowned tokens (store owner)
      [
        async () => {
          await alice.call(
            store,
            "nft_batch_burn",
            { token_ids: ["0"] },
            { attachedDeposit: "1" }
          );
        },
        // TODO::contracts::low: msg should be more descriptive
        "panicked at 'assertion failed: `(left == right)`",
        "Alice tried to burn unowned tokens",
      ],
      // try to burn tokens without deposit
      [
        async () => {
          await alice.call(store, "nft_batch_burn", {
            token_ids: ["3"],
          });
        },
        "Requires attached deposit of exactly 1 yoctoNEAR",
        "Alice tried to burn tokens without yoctoNEAR deposit",
      ],
      // TODO: figure out if alice is still token owner
      // TODO::testing::medium: can no longer transfer burned token
      // TODO::testing::medium: cannot burn token twice
    ]);

    // TODO::testing::low: transfer store ownership
    // TODO::testing::low: try to transfer store ownership (random bob)
    // TODO::testing::low: try to transfer store ownership without yN deposit

    // TODO::testing::low: try to undeploy contract (random bob)
    // TODO::testing::low: undeploy contract (store owner)
  }
);

'''
'''--- testing/__tests__/nft.enumeration.ava.ts ---
import { STORE_WORKSPACE, assertTokensAre, batchMint } from "./test-utils";

STORE_WORKSPACE.test("enumeration", async (test, { alice, bob, store }) => {
  const failPromiseRejection = (msg: string) => (e: any) => {
    test.log(`Promise rejected while ${msg}:`);
    test.log(e);
    test.fail();
  };

  // seeding: mint 4 tokens (2 for Alice, 2 for Bob)
  await batchMint({ owner: alice, store, num_to_mint: 2 }).catch(
    failPromiseRejection("minting")
  );
  await batchMint({
    owner: alice,
    store,
    num_to_mint: 2,
    owner_id: bob.accountId,
  }).catch(failPromiseRejection("minting"));

  // testing `nft_total_supply` and `nft_supply_for_owner`
  test.is(await store.view("nft_total_supply", {}), "4");
  test.is(
    await store.view("nft_supply_for_owner", { account_id: alice.accountId }),
    "2"
  );
  test.is(
    await store.view("nft_supply_for_owner", { account_id: bob.accountId }),
    "2"
  );

  // call `nft_tokens` without params
  assertTokensAre(
    test,
    await store.view("nft_tokens", {}),
    [
      { token_id: "0", owner_id: alice.accountId },
      { token_id: "1", owner_id: alice.accountId },
      { token_id: "2", owner_id: bob.accountId },
      { token_id: "3", owner_id: bob.accountId },
    ],
    "`nft_tokens({})` output is wrong"
  );

  // call `nft_tokens` with starting index
  assertTokensAre(
    test,
    await store.view("nft_tokens", { from_index: "2" }),
    [
      { token_id: "2", owner_id: bob.accountId },
      { token_id: "3", owner_id: bob.accountId },
    ],
    "`nft_tokens({ from_index })` output is wrong"
  );

  // call `nft_tokens` with starting index and limit
  // FIXME::contracts::medium: according to standard, `limit` is not the
  //  index of the last token, but the maximum number of tokens to return
  assertTokensAre(
    test,
    // FIXME::contracts::medium: limit should be 2
    await store.view("nft_tokens", { from_index: "1", limit: 3 }),
    [
      { token_id: "1", owner_id: alice.accountId },
      { token_id: "2", owner_id: bob.accountId },
    ],
    "`nft_tokens({ from_index, limit })` output is wrong"
  );

  // call `nft_tokens_for_owner` for Bob without params
  assertTokensAre(
    test,
    await store.view("nft_tokens_for_owner", { account_id: bob.accountId }),
    [
      { token_id: "2", owner_id: bob.accountId },
      { token_id: "3", owner_id: bob.accountId },
    ],
    "`nft_tokens_for_owner({})` output is wrong"
  );

  // call `nft_tokens_for_owner` for Bob with starting index
  assertTokensAre(
    test,
    await store.view("nft_tokens_for_owner", {
      account_id: bob.accountId,
      // TODO::contracts::medium: should this index refer to token_id, or the
      //  index of token for this token owner? -> if token_id, then use "3"
      from_index: "1",
    }),
    [{ token_id: "3", owner_id: bob.accountId }],
    "`nft_tokens_for_owner({ from_index })` output is wrong"
  );

  // call `nft_tokens_for_owner` for Bob with starting index and limit
  assertTokensAre(
    test,
    await store.view("nft_tokens_for_owner", {
      account_id: bob.accountId,
      // TODO::contracts::medium: should this index refer to token_id, or the
      //  index of token for this token owner? -> if token_id, then use "2"
      from_index: "0",
      // Unlike `nft_tokens`, here the limit behaves according to spec
      // (see above)
      limit: 1,
    }),
    [{ token_id: "2", owner_id: bob.accountId }],
    "`nft_tokens_for_owner({ from_index, limit })` output is wrong"
  );
});

// TODO:
// - [] test `nft_tokens_for_owner_set`, but only after syncing back wether it
//      is used e.g. in mintbase-js, otherwise make it private

'''
'''--- testing/__tests__/nft.metadata.ava.ts ---
import { batchMint, failPromiseRejection, STORE_WORKSPACE } from "./test-utils";

STORE_WORKSPACE.test("metadata", async (test, { alice, store }) => {
  test.deepEqual(await store.view("nft_metadata"), {
    base_uri: null,
    icon: null,
    name: "alice",
    reference: null,
    reference_hash: null,
    spec: "nft-1.0.0",
    symbol: "ALICE",
  });

  await alice
    .call(
      store,
      "nft_batch_mint",
      {
        owner_id: alice.accountId,
        metadata: {
          title: "Yadda",
          description: "Yadda, yadda!",
          reference: "reference",
          reference_hash: "cmVmZXJlbmNl",
          media: "media",
          media_hash: "bWVkaWE=",
          starts_at: "2022-02-02T02:02:02Z+02",
          expires_at: "3033-03-03T03:03:03Z+03",
          extra: "No more extras for you!",
        },
        num_to_mint: 2,
      },
      { attachedDeposit: "1" }
    )
    .catch(failPromiseRejection(test, "minting"));

  test.deepEqual(await store.view("nft_token_metadata", { token_id: "0" }), {
    copies: 2, // this is automagically inserted because we minted 2 :)
    title: "Yadda",
    description: "Yadda, yadda!",
    reference: "reference",
    reference_hash: "cmVmZXJlbmNl",
    media: "media",
    media_hash: "bWVkaWE=",
    starts_at: "2022-02-02T02:02:02Z+02",
    expires_at: "3033-03-03T03:03:03Z+03",
    extra: "No more extras for you!",
  });

  // TODO::testing::low: deploying with icon/base URI
  // TODO::testing::low: changing icon/base URI
});

'''
'''--- testing/__tests__/test-utils/approvals.ts ---
import { NearAccount } from "near-workspaces-ava";
import { ExecutionContext } from "ava";

interface ApprovalSpec {
  token_id: string;
  approved_account_id: string;
  approval_id?: number;
}

export async function assertApprovals(
  { test, store }: { test: ExecutionContext; store: NearAccount },
  specs: ApprovalSpec[],
  msg: string
) {
  await Promise.all(
    specs.map((spec) => {
      assertApproval({ test, store }, spec, msg);
    })
  );
}

export async function assertApproval(
  { test, store }: { test: ExecutionContext; store: NearAccount },
  spec: ApprovalSpec,
  msg: string
) {
  test.true(await getApproval(store, spec), msg);
}

export async function assertNoApprovals(
  { test, store }: { test: ExecutionContext; store: NearAccount },
  specs: ApprovalSpec[],
  msg: string
) {
  await Promise.all(
    specs.map((spec) => {
      assertNoApproval({ test, store }, spec, msg);
    })
  );
}

export async function assertNoApproval(
  { test, store }: { test: ExecutionContext; store: NearAccount },
  spec: ApprovalSpec,
  msg: string
) {
  // FIXME::testing::medium: remove the early return. (currently blocked)
  // this is currently blocked by the contract requiring us to specify an
  // approval_id
  if (!spec.approval_id) return Promise.resolve(undefined);

  test.false(await getApproval(store, spec), msg);
}

async function getApproval(
  store: NearAccount,
  { token_id, approved_account_id, approval_id }: ApprovalSpec
): Promise<boolean> {
  return store.view("nft_is_approved", {
    token_id,
    approved_account_id,
    approval_id,
  });
}

// TODO::testing::low: use this function consistently
export async function assertMinters(
  { test, store }: { test: ExecutionContext; store: NearAccount },
  specs: [NearAccount, boolean][],
  msg: string
) {
  await Promise.all(
    specs.map((spec) => {
      assertMinter({ test, store }, spec, msg);
    })
  );
}

export async function assertMinter(
  { test, store }: { test: ExecutionContext; store: NearAccount },
  [account, expected]: [NearAccount, boolean],
  msg: string
) {
  test.is(
    await store.view("check_is_minter", { account_id: account.accountId }),
    expected,
    msg
  );
}

'''
'''--- testing/__tests__/test-utils/balances.ts ---
import { Gas, BN, NearAccount } from "near-workspaces-ava";
import * as ava from "near-workspaces-ava";
import { ExecutionContext } from "ava";

// TODO: move from this format to `ava.NEAR.parse`

/**
 * Interprets a float as NEAR and builds the corresponding string.
 * Rounded to closest milliNEAR.
 */
export function NEAR(x: number): ava.NEAR {
  return mNEAR(x).mul(new ava.NEAR(1e3));
}

/**
 * Interprets a float as milliNEAR and builds the corresponding string.
 * Rounded to closest microNEAR.
 */
export function mNEAR(x: number): ava.NEAR {
  return uNEAR(x).mul(new ava.NEAR(1e3));
}

/**
 * Interprets a float as microNEAR and builds the corresponding string.
 * Rounded to closest nanoNEAR.
 */
export function uNEAR(x: number): ava.NEAR {
  return nNEAR(x).mul(new ava.NEAR(1e3));
}

/**
 * Interprets a float as nanoNEAR and builds the corresponding string.
 * Rounded to closest picoNEAR.
 */
export function nNEAR(x: number): ava.NEAR {
  return new ava.NEAR((x * 1e3).toString() + "0".repeat(12));
}

/**
 * Interprets a float as Teragas and builds the corresponding string.
 * Rounded to closest Gigagas.
 */
export function Tgas(x: number): ava.Gas {
  return new ava.Gas((x * 1e3).toString() + "0".repeat(9));
}

/**
 * Interprets a float as NEAR and builds the corresponding `BN`.
 * Rounded to closest milliNEAR.
 */
export function NEARbn(x: number): BN {
  return new BN(NEAR(x));
}

/**
 * Interprets a float as milliNEAR and builds the corresponding `BN`.
 * Rounded to closest microNEAR.
 */
export function mNEARbn(x: number): BN {
  return new BN(mNEAR(x));
}

/**
 * Interprets a float as microNEAR and builds the corresponding `BN`.
 * Rounded to closest nanoNEAR.
 */
export function uNEARbn(x: number): BN {
  return new BN(uNEAR(x));
}

/**
 * Interprets a float as nanoNEAR and builds the corresponding `BN`.
 * Rounded to closest picoNEAR.
 */
export function nNEARbn(x: number): BN {
  return new BN(nNEAR(x));
}

/**
 * Interprets a float as Teragas and builds the corresponding `BN`.
 * Rounded to closest Gigagas.
 */
export function Tgasbn(x: number): BN {
  return new BN(Tgas(x));
}

/** Maximum possible gas (will be serialized to a u64) */
export const MAX_U64 = new BN("ffffffffffffffff", 16);
/** Gas cost for deploying a store (taken from mintbase-js) */
export const DEPLOY_STORE_GAS = Tgas(200);
/** Storage rent for deploying a store (taken from mintbase-js) */
export const DEPLOY_STORE_RENT = NEAR(7);

/**
 * Mostly a wrapper for getting total balance of an account, might change to
 * available balance in the future.
 */
export async function getBalance(account: NearAccount): Promise<ava.NEAR> {
  return (await account.balance()).total;
}

// TODO::testing::low: use this function consistently
/** Asserts balance changes for multiple accounts in parallel */
export async function assertBalanceChanges(
  test: ExecutionContext,
  specs: { account: NearAccount; ref: ava.NEAR; diff: ava.NEAR }[],
  msg: string
) {
  await Promise.all(specs.map((spec) => assertBalanceChange(test, spec, msg)));
}

/**
 * Asserts the change of an account balance w.r.t. an earlier reference amount.
 * The balance is allowed to be 0.05 NEAR below `ref - diff`, which accounts for
 * gas costs that might have been expended.
 */
export async function assertBalanceChange(
  test: ExecutionContext,
  params: { account: NearAccount; ref: ava.NEAR; diff: ava.NEAR; gas?: Gas },
  msg: string
) {
  const now = await getBalance(params.account);
  if (params.gas) {
    const { gas } = params;
    assertBalanceDiffExact(test, { ...params, now, gas }, msg);
  } else {
    const maxGas = NEAR(0.04).toString(); // allow 40 mNEAR of gas costs
    assertBalanceDiffRange(test, { ...params, now, maxGas }, msg);
  }
}

function assertBalanceDiffExact(
  test: ExecutionContext,
  {
    account,
    now,
    ref,
    diff,
    gas,
  }: {
    account: NearAccount;
    now: ava.NEAR;
    ref: ava.NEAR;
    diff: ava.NEAR;
    gas: Gas;
  },
  msg: string
) {
  const nearGas = new ava.NEAR(gas.mul(new BN(100e6)).toString());
  const expected = ref.add(diff).sub(nearGas);
  test.log({
    account: account.accountId,
    expected: expected.toString(),
    now: now.toString(),
    ref: ref.toString(),
    diff: diff.toString(),
    nearGas: nearGas.toString(),
  });

  test.true(
    now.eq(expected),
    [
      `${msg}: wrong balance for ${account.accountId}`,
      `\texpected: ${expected.toHuman()}`,
      `\tactual:   ${now.toHuman()}`,
    ].join("\n")
  );

  test.fail(
    [
      `${msg}: balance for ${account.accountId}`,
      `\texpected: ${expected.toHuman()}`,
      `\tactual:   ${now.toHuman()}`,
    ].join("\n")
  );
}

// TODO::testing::low: deprecate this (blocked until gas stuff becomes more sound)
function assertBalanceDiffRange(
  test: ExecutionContext,
  {
    account,
    now,
    ref,
    diff,
    maxGas,
  }: {
    account: NearAccount;
    now: ava.NEAR;
    ref: ava.NEAR;
    diff: ava.NEAR;
    maxGas: string;
  },
  msg: string
) {
  test.log("entering assertBalanceDiffRange");
  const max = ref.add(new BN(diff));
  const min = max.sub(new BN(maxGas));
  test.log({
    account: account.accountId,
    now: now.toString(),
    ref: ref.toString(),
    diff: diff.toString(), // cannot use toHuman on negative diff!
    min: min.toString(),
    max: max.toString(),
  });
  test.true(now.lte(max), `${msg}: balance too high for ${account}`);
  test.true(now.gte(min), `${msg}: balance too low for ${account}`);
}

'''
'''--- testing/__tests__/test-utils/events.ts ---
import { NearAccount } from "near-workspaces-ava";
import { ExecutionContext } from "ava";

export function assertEventLogs(
  test: ExecutionContext,
  actual: string[],
  expected: any[],
  msg: string
) {
  test.is(actual.length, expected.length, `${msg}: mismatched number of logs`);
  actual.forEach((log, i) => {
    assertEventLog(test, log, expected[i], msg);
  });
}

// TODO::testing::low: Use this function consistently
export function assertEventLog(
  test: ExecutionContext,
  actual: string,
  expected: any,
  msg: string
) {
  const baseMsg = `Bad event log for ${msg}`;
  const event = parseEvent(test, actual, baseMsg);
  // test.log("Expected:", expected);
  test.deepEqual(event, expected, baseMsg);
}

function parseEvent(test: ExecutionContext, log: string, msg: string) {
  // FIXME::contracts::medium: standard has no space between colon and JSON
  test.is(log.slice(0, 12), "EVENT_JSON: ", `${msg}: Not an event log`);
  // test.log("Sliced:", log.slice(12));
  const event = JSON.parse(log.slice(12));
  // test.log("Parsed:", event);
  return event;
}

export function assertMakeOfferEvent(
  { test, eventLog }: { test: ExecutionContext; eventLog: string },
  {
    id,
    maker,
    store,
    specs,
  }: {
    id: number;
    maker: NearAccount;
    store: NearAccount;
    specs: {
      token_id: string;
      approval_id: number;
      price: string;
      timeout?: number;
    }[];
  },
  msg: string
) {
  const event: any = parseEvent(test, eventLog, msg);
  test.true(event instanceof Object, `${msg}: Event is not even an object`);
  test.like(
    event,
    {
      standard: "nep171",
      version: "1.0.0",
      event: "nft_make_offer",
    },
    `${msg}: bad event metadata`
  );

  test.is(typeof event.data, "string", `${msg}: event.data is not a string`);
  const data: any[] = JSON.parse(event.data);
  test.is(
    data.length,
    specs.length,
    `${msg}: length of parsed event.data doesn't match expectation`
  );

  data.map((chunk, i) => {
    // TODO::testing::low: use the timeout
    const { token_id, approval_id, price, timeout } = specs[i];
    const list_id = `${token_id}:${approval_id}:${store.accountId}`;
    const token_key = `${token_id}:${store.accountId}`;
    test.like(
      chunk,
      {
        // TODO::testing::medium: additional fields (except timestamp)
        // FIXME::contracts::medium: price (u128) should always be stringified!
        offer: { id, from: maker.accountId, price: JSON.parse(price) },
        offer_num: id,
        list_id,
        token_key,
      },
      `${msg}: data chunk ${i} doesn't match expectation`
    );
    const chunkTimestamp = chunk.offer.timestamp;
    const chunkTimeout = chunk.offer.timeout;
    test.is(
      chunkTimeout - chunkTimestamp,
      timeout,
      `${msg}: data chunk ${i} has bad timeout`
    );
  });
}

'''
'''--- testing/__tests__/test-utils/index.ts ---
import { NearAccount } from "near-workspaces-ava";
import { ExecutionContext } from "ava";

// TODO::testing::low: commenting all my test utils

export * from "./balances";
export * from "./workspaces";
export * from "./panics";
export * from "./token";
export * from "./approvals";
export * from "./events";
export * from "./payouts";

// ---------------------------------- misc ---------------------------------- //
export async function batchMint({
  owner,
  store,
  owner_id,
  num_to_mint,
}: {
  owner: NearAccount;
  store: NearAccount;
  num_to_mint: number;
  owner_id?: string;
}) {
  if (!owner_id) owner_id = owner.accountId;
  await owner.call(
    store,
    "nft_batch_mint",
    {
      owner_id,
      num_to_mint,
      metadata: {},
    },
    { attachedDeposit: "1" }
  );
}

export async function prepareTokenListing(
  test: ExecutionContext,
  { root, alice, store, market, factory }
) {
  await batchMint({ owner: alice, store, num_to_mint: 2 }).catch(
    failPromiseRejection(test, "minting")
  );

  await root
    .call(
      market,
      "update_allowlist",
      { account_id: factory.accountId, state: true },
      { attachedDeposit: "1" }
    )
    .catch(failPromiseRejection(test, "allowing store on market"));
}

// TODO::testing::low: use this function consistently
export function failPromiseRejection(
  test: ExecutionContext,
  msg: string
): (e: any) => void {
  return (e: any) => {
    test.log(`Promise rejected while ${msg}:`);
    test.log(e);
    test.fail();
  };
}

export function hours(x: number): number {
  return Math.round(x * 3600 * 1e9);
}

// ---- xxxx ---- //

'''
'''--- testing/__tests__/test-utils/panics.ts ---
import { ExecutionContext } from "ava";

/** Asserts multiple panics in parallel to speed up tests */
export async function assertContractPanics(
  test: ExecutionContext,
  params: [() => Promise<void>, string, string][]
) {
  await Promise.all(params.map((p) => assertContractPanic(test, ...p)));
}

/** Asserts that a contract call panics with a given message */
export async function assertContractPanic(
  test: ExecutionContext,
  thrower: () => Promise<void>,
  panicMsg: string,
  assertMsg: string
) {
  // TODO::testing::medium ensure that no logging took place?
  await test
    .throwsAsync(thrower, undefined, `${assertMsg}: succeeded`)
    .then(assertContractPanicMsg(test, panicMsg, assertMsg));
}

/**
 * Asserts that an error returned from a contract call contains a given message
 */
export function assertContractPanicMsg(
  test: ExecutionContext,
  panicMsg: string,
  assertMsg?: string
): (error: any) => void {
  return (error: any) => {
    // The slicing assures we don't assert against source location, the comma at
    // the message end assures that we capture everything but source location
    const expectedPanicMsg = `Smart contract panicked: ${panicMsg}`;
    const actualPanicMsg = error.kind.ExecutionError.slice(
      0,
      expectedPanicMsg.length
    );
    // // log full error message in case anything goes wrong
    // test.log(error.kind.ExecutionError);

    test.is(
      error.type,
      "FunctionCallError",
      `Wrong error/panic type when ${assertMsg}`
    );
    test.is(
      actualPanicMsg,
      expectedPanicMsg,
      `Wrong error/panic type when ${assertMsg}`
    );
  };
}

'''
'''--- testing/__tests__/test-utils/payouts.ts ---
import { NearAccount } from "near-workspaces-ava";

export function createPayout(spec: [NearAccount, string][]) {
  const payout = {};
  spec.forEach(([account, amount]) => {
    payout[account.accountId] = amount;
  });
  return payout;
}

export function createPayoutPercentage(spec: [NearAccount, number][]) {
  const payout = {};
  spec.forEach(([account, amount]) => {
    payout[account.accountId] = amount;
  });
  return payout;
}

export function createPayoutNumerators(spec: [NearAccount, number][]) {
  const payout = {};
  spec.forEach(([account, amount]) => {
    payout[account.accountId] = { numerator: amount };
  });
  return payout;
}

'''
'''--- testing/__tests__/test-utils/token.ts ---
import { NearAccount } from "near-workspaces-ava";
import { ExecutionContext } from "ava";

/** The current interface of a token as described in NEP171 */
export interface Nep171Token {
  token_id: string;
  owner_id: string;
}

export function isNep171Token(x: any): x is Nep171Token {
  return typeof x.token_id === "string" && typeof x.owner_id === "string";
}

/**
 * Asserts that a token matches an expected token_id/owner_id pairing.
 */
export function assertTokenIs(
  test: ExecutionContext,
  token: Nep171Token,
  { token_id, owner_id }: Nep171Token,
  msg: string
) {
  test.is(`${token.token_id}`, token_id, `${msg}: Wrong token_id`);
  test.is(`${token.owner_id}`, owner_id, `${msg}: Wrong owner_id`);
}

/**
 * Asserts that a token matches an expected token_id/owner_id pairing.
 */
export function assertTokensAre(
  test: ExecutionContext,
  actual: Nep171Token[],
  expected: Nep171Token[],
  msg: string
) {
  test.log("Actual token list:", actual);
  test.log("Expected token list:", expected);
  test.is(
    actual.length,
    expected.length,
    `${msg}: token lists mismatched in length`
  );
  expected.forEach((token, i) => {
    assertTokenIs(test, actual[i], token, msg);
  });
}

/**
 * Asserts the contract state matches an expected token_id/owner_id pairing.
 */
export async function assertContractTokenOwner(
  { test, store }: { test: ExecutionContext; store: NearAccount },
  { token_id, owner_id }: Nep171Token,
  msg: string
) {
  const token: Nep171Token = await store.view("nft_token", {
    token_id,
  });
  test.true(
    isNep171Token(token),
    `${msg}: Not a MintbaseToken (token_id: ${token_id})`
  );
  assertTokenIs(test, token, { token_id, owner_id }, msg);
}

/**
 * Asserts that a list of token_id/owner_id pairs match the contract state.
 * Queries all tokens on their own, and thus doesn't suffer from the limitations
 * of the `nft_tokens` method.
 */
export async function assertContractTokenOwners(
  { test, store }: { test: ExecutionContext; store: NearAccount },
  tokens: { token_id: string; owner_id: string }[],
  msg: string
) {
  await Promise.all(
    tokens.map(async (token) => {
      await assertContractTokenOwner({ test, store }, token, msg);
    })
  );
}

'''
'''--- testing/__tests__/test-utils/workspaces.ts ---
import { NearAccount, Workspace } from "near-workspaces-ava";
import { NEAR, DEPLOY_STORE_RENT, DEPLOY_STORE_GAS } from "./balances";

async function createAccounts(root: NearAccount): Promise<NearAccount[]> {
  // const alice = await root.createAccount("alice", { initialBalance: NEAR(20) });
  // const bob = await root.createAccount("bob", { initialBalance: NEAR(20) });
  // const carol = await root.createAccount("carol", { initialBalance: NEAR(20) });
  // return [alice, bob, carol];
  return Promise.all([
    root.createAccount("alice", { initialBalance: NEAR(20).toString() }),
    root.createAccount("bob", { initialBalance: NEAR(20).toString() }),
    root.createAccount("carol", { initialBalance: NEAR(20).toString() }),
  ]);
}

/** deploys the factory to a subaccount `factory` of `root` */
export async function deployFactory(root: NearAccount): Promise<NearAccount> {
  return root.createAndDeploy(
    "factory", // subaccount name
    "../wasm/factory.wasm", // path to wasm
    { method: "new", args: {} }
  );
}

/** deploys the market to a subaccount `market` of `root` */
export async function deployMarket(root: NearAccount): Promise<NearAccount> {
  return root.createAndDeploy(
    "market", // subaccount name
    "../wasm/market.wasm", // path to wasm
    { method: "new", args: { init_allowlist: [] } }
  );
}

/**
 * deploys the store to a subaccount `name` of `factory`, setting the store
 * owner to `owner`
 */
export async function deployStore({
  factory,
  owner,
  name,
}: {
  factory: NearAccount;
  owner: NearAccount;
  name: string;
}): Promise<NearAccount> {
  await owner.call(
    factory,
    "create_store",
    {
      owner_id: owner.accountId,
      metadata: {
        spec: "nft-1.0.0",
        name,
        symbol: "ALICE",
      },
    },
    { attachedDeposit: DEPLOY_STORE_RENT, gas: DEPLOY_STORE_GAS }
  );
  return factory.getFullAccount(`alice.${factory.accountId}`);
}

/** A workspace with the factory deployed by root, no store deployed */
export const FACTORY_WORKSPACE = Workspace.init(async ({ root }) => {
  const [alice, bob, carol] = await createAccounts(root);

  const factory = await deployFactory(root);

  return { alice, bob, carol, factory };
});

/** A workspace with the factory deployed by root, store deployed by Alice */
export const STORE_WORKSPACE = Workspace.init(async ({ root }) => {
  const [alice, bob, carol] = await createAccounts(root);

  const factory = await deployFactory(root);
  const store = await deployStore({ factory, owner: alice, name: "alice" });

  return { alice, bob, carol, factory, store };
});

/**
 * A workspace with the factory and market deployed by root,
 * store deployed by Alice
 */
export const MARKET_WORKSPACE = Workspace.init(async ({ root }) => {
  const [alice, bob, carol] = await createAccounts(root);

  const factory = await deployFactory(root);
  const store = await deployStore({ factory, owner: alice, name: "alice" });
  const market = await deployMarket(root);

  return { alice, bob, carol, factory, store, market };
});

'''
'''--- testing/package-lock.json ---
{
  "name": "testing",
  "lockfileVersion": 2,
  "requires": true,
  "packages": {
    "": {
      "devDependencies": {
        "near-workspaces-ava": "1.0.0"
      }
    },
    "node_modules/@ava/typescript": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/@ava/typescript/-/typescript-2.0.0.tgz",
      "integrity": "sha512-sn+upcMk81AMrlnx/hb/9T7gCGuBfw7hi+p79NPSSQMvY2G64mOB7qRaDExiHiZfZ7FN9j7HwQeFhHZLGD/NWQ==",
      "dev": true,
      "dependencies": {
        "escape-string-regexp": "^4.0.0",
        "execa": "^5.0.0"
      },
      "engines": {
        "node": ">=12.22 <13 || >=14.16 <15 || >=15"
      }
    },
    "node_modules/@babel/code-frame": {
      "version": "7.16.7",
      "resolved": "https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.16.7.tgz",
      "integrity": "sha512-iAXqUn8IIeBTNd72xsFlgaXHkMBMt6y4HJp1tIaK465CWLT/fG1aqB7ykr95gHHmlBdGbFeWWfyB4NJJ0nmeIg==",
      "dev": true,
      "dependencies": {
        "@babel/highlight": "^7.16.7"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-identifier": {
      "version": "7.16.7",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-identifier/-/helper-validator-identifier-7.16.7.tgz",
      "integrity": "sha512-hsEnFemeiW4D08A5gUAZxLBTXpZ39P+a+DGDsHw1yxqyQ/jzFEnxf5uTEGp+3bzAbNOxU1paTgYS4ECU/IgfDw==",
      "dev": true,
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/highlight": {
      "version": "7.16.10",
      "resolved": "https://registry.npmjs.org/@babel/highlight/-/highlight-7.16.10.tgz",
      "integrity": "sha512-5FnTQLSLswEj6IkgVw5KusNUUFY9ZGqe/TRFnP/BKYHYgfh7tc+C7mwiy95/yNP7Dh9x580Vv8r7u7ZfTBFxdw==",
      "dev": true,
      "dependencies": {
        "@babel/helper-validator-identifier": "^7.16.7",
        "chalk": "^2.0.0",
        "js-tokens": "^4.0.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/highlight/node_modules/ansi-styles": {
      "version": "3.2.1",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-3.2.1.tgz",
      "integrity": "sha512-VT0ZI6kZRdTh8YyJw3SMbYm/u+NqfsAxEpWO0Pf9sq8/e94WxxOpPKx9FR1FlyCtOVDNOQ+8ntlqFxiRc+r5qA==",
      "dev": true,
      "dependencies": {
        "color-convert": "^1.9.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/@babel/highlight/node_modules/chalk": {
      "version": "2.4.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-2.4.2.tgz",
      "integrity": "sha512-Mti+f9lpJNcwF4tWV8/OrTTtF1gZi+f8FqlyAdouralcFWFQWF2+NgCHShjkCb+IFBLq9buZwE1xckQU4peSuQ==",
      "dev": true,
      "dependencies": {
        "ansi-styles": "^3.2.1",
        "escape-string-regexp": "^1.0.5",
        "supports-color": "^5.3.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/@babel/highlight/node_modules/color-convert": {
      "version": "1.9.3",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-1.9.3.tgz",
      "integrity": "sha512-QfAUtd+vFdAtFQcC8CCyYt1fYWxSqAiK2cSD6zDB8N3cpsEBAvRxp9zOGg6G/SHHJYAT88/az/IuDGALsNVbGg==",
      "dev": true,
      "dependencies": {
        "color-name": "1.1.3"
      }
    },
    "node_modules/@babel/highlight/node_modules/color-name": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.3.tgz",
      "integrity": "sha1-p9BVi9icQveV3UIyj3QIMcpTvCU=",
      "dev": true
    },
    "node_modules/@babel/highlight/node_modules/escape-string-regexp": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-1.0.5.tgz",
      "integrity": "sha1-G2HAViGQqN/2rjuyzwIAyhMLhtQ=",
      "dev": true,
      "engines": {
        "node": ">=0.8.0"
      }
    },
    "node_modules/@babel/highlight/node_modules/has-flag": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz",
      "integrity": "sha1-tdRU3CGZriJWmfNGfloH87lVuv0=",
      "dev": true,
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/@babel/highlight/node_modules/supports-color": {
      "version": "5.5.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-5.5.0.tgz",
      "integrity": "sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==",
      "dev": true,
      "dependencies": {
        "has-flag": "^3.0.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/@concordance/react": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/@concordance/react/-/react-2.0.0.tgz",
      "integrity": "sha512-huLSkUuM2/P+U0uy2WwlKuixMsTODD8p4JVQBI4VKeopkiN0C7M3N9XYVawb4M+4spN5RrO/eLhk7KoQX6nsfA==",
      "dev": true,
      "dependencies": {
        "arrify": "^1.0.1"
      },
      "engines": {
        "node": ">=6.12.3 <7 || >=8.9.4 <9 || >=10.0.0"
      }
    },
    "node_modules/@concordance/react/node_modules/arrify": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/arrify/-/arrify-1.0.1.tgz",
      "integrity": "sha1-iYUI2iIm84DfkEcoRWhJwVAaSw0=",
      "dev": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/@cspotcode/source-map-consumer": {
      "version": "0.8.0",
      "resolved": "https://registry.npmjs.org/@cspotcode/source-map-consumer/-/source-map-consumer-0.8.0.tgz",
      "integrity": "sha512-41qniHzTU8yAGbCp04ohlmSrZf8bkf/iJsl3V0dRGsQN/5GFfx+LbCSsCpp2gqrqjTVg/K6O8ycoV35JIwAzAg==",
      "dev": true,
      "engines": {
        "node": ">= 12"
      }
    },
    "node_modules/@cspotcode/source-map-support": {
      "version": "0.7.0",
      "resolved": "https://registry.npmjs.org/@cspotcode/source-map-support/-/source-map-support-0.7.0.tgz",
      "integrity": "sha512-X4xqRHqN8ACt2aHVe51OxeA2HjbcL4MqFqXkrmQszJ1NOUuUu5u6Vqx/0lZSVNku7velL5FC/s5uEAj1lsBMhA==",
      "dev": true,
      "dependencies": {
        "@cspotcode/source-map-consumer": "0.8.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@nodelib/fs.scandir": {
      "version": "2.1.5",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.scandir/-/fs.scandir-2.1.5.tgz",
      "integrity": "sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==",
      "dev": true,
      "dependencies": {
        "@nodelib/fs.stat": "2.0.5",
        "run-parallel": "^1.1.9"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/@nodelib/fs.stat": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.stat/-/fs.stat-2.0.5.tgz",
      "integrity": "sha512-RkhPPp2zrqDAQA/2jNhnztcPAlv64XdhIp7a7454A5ovI7Bukxgt7MX7udwAu3zg1DcpPU0rz3VV1SeaqvY4+A==",
      "dev": true,
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/@nodelib/fs.walk": {
      "version": "1.2.8",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.walk/-/fs.walk-1.2.8.tgz",
      "integrity": "sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg==",
      "dev": true,
      "dependencies": {
        "@nodelib/fs.scandir": "2.1.5",
        "fastq": "^1.6.0"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/@sindresorhus/is": {
      "version": "4.4.0",
      "resolved": "https://registry.npmjs.org/@sindresorhus/is/-/is-4.4.0.tgz",
      "integrity": "sha512-QppPM/8l3Mawvh4rn9CNEYIU9bxpXUCRMaX9yUpvBk1nMKusLKpfXGDEKExKaPhLzcn3lzil7pR6rnJ11HgeRQ==",
      "dev": true,
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sindresorhus/is?sponsor=1"
      }
    },
    "node_modules/@szmarczak/http-timer": {
      "version": "4.0.6",
      "resolved": "https://registry.npmjs.org/@szmarczak/http-timer/-/http-timer-4.0.6.tgz",
      "integrity": "sha512-4BAffykYOgO+5nzBWYwE3W90sBgLJoUPRWWcL8wlyiM8IB8ipJz3UMJ9KXQd1RKQXpKp8Tutn80HZtWsu2u76w==",
      "dev": true,
      "dependencies": {
        "defer-to-connect": "^2.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/@tsconfig/node10": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/@tsconfig/node10/-/node10-1.0.8.tgz",
      "integrity": "sha512-6XFfSQmMgq0CFLY1MslA/CPUfhIL919M1rMsa5lP2P097N2Wd1sSX0tx1u4olM16fLNhtHZpRhedZJphNJqmZg==",
      "dev": true
    },
    "node_modules/@tsconfig/node12": {
      "version": "1.0.9",
      "resolved": "https://registry.npmjs.org/@tsconfig/node12/-/node12-1.0.9.tgz",
      "integrity": "sha512-/yBMcem+fbvhSREH+s14YJi18sp7J9jpuhYByADT2rypfajMZZN4WQ6zBGgBKp53NKmqI36wFYDb3yaMPurITw==",
      "dev": true
    },
    "node_modules/@tsconfig/node14": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/@tsconfig/node14/-/node14-1.0.1.tgz",
      "integrity": "sha512-509r2+yARFfHHE7T6Puu2jjkoycftovhXRqW328PDXTVGKihlb1P8Z9mMZH04ebyajfRY7dedfGynlrFHJUQCg==",
      "dev": true
    },
    "node_modules/@tsconfig/node16": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/@tsconfig/node16/-/node16-1.0.2.tgz",
      "integrity": "sha512-eZxlbI8GZscaGS7kkc/trHTT5xgrjH3/1n2JDwusC9iahPKWMRvRjJSAN5mCXviuTGQ/lHnhvv8Q1YTpnfz9gA==",
      "dev": true
    },
    "node_modules/@types/bn.js": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/@types/bn.js/-/bn.js-5.1.0.tgz",
      "integrity": "sha512-QSSVYj7pYFN49kW77o2s9xTCwZ8F2xLbjLLSEVh8D2F4JUhZtPAGOFLTD+ffqksBx/u4cE/KImFjyhqCjn/LIA==",
      "dev": true,
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/cacheable-request": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/@types/cacheable-request/-/cacheable-request-6.0.2.tgz",
      "integrity": "sha512-B3xVo+dlKM6nnKTcmm5ZtY/OL8bOAOd2Olee9M1zft65ox50OzjEHW91sDiU9j6cvW8Ejg1/Qkf4xd2kugApUA==",
      "dev": true,
      "dependencies": {
        "@types/http-cache-semantics": "*",
        "@types/keyv": "*",
        "@types/node": "*",
        "@types/responselike": "*"
      }
    },
    "node_modules/@types/http-cache-semantics": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/@types/http-cache-semantics/-/http-cache-semantics-4.0.1.tgz",
      "integrity": "sha512-SZs7ekbP8CN0txVG2xVRH6EgKmEm31BOxA07vkFaETzZz1xh+cbt8BcI0slpymvwhx5dlFnQG2rTlPVQn+iRPQ==",
      "dev": true
    },
    "node_modules/@types/keyv": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/@types/keyv/-/keyv-3.1.3.tgz",
      "integrity": "sha512-FXCJgyyN3ivVgRoml4h94G/p3kY+u/B86La+QptcqJaWtBWtmc6TtkNfS40n9bIvyLteHh7zXOtgbobORKPbDg==",
      "dev": true,
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/node": {
      "version": "16.11.25",
      "resolved": "https://registry.npmjs.org/@types/node/-/node-16.11.25.tgz",
      "integrity": "sha512-NrTwfD7L1RTc2qrHQD4RTTy4p0CO2LatKBEKEds3CaVuhoM/+DJzmWZl5f+ikR8cm8F5mfJxK+9rQq07gRiSjQ==",
      "dev": true
    },
    "node_modules/@types/normalize-package-data": {
      "version": "2.4.1",
      "resolved": "https://registry.npmjs.org/@types/normalize-package-data/-/normalize-package-data-2.4.1.tgz",
      "integrity": "sha512-Gj7cI7z+98M282Tqmp2K5EIsoouUEzbBJhQQzDE3jSIRk6r9gsz0oUokqIUR4u1R3dMHo0pDHM7sNOHyhulypw==",
      "dev": true
    },
    "node_modules/@types/responselike": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/@types/responselike/-/responselike-1.0.0.tgz",
      "integrity": "sha512-85Y2BjiufFzaMIlvJDvTTB8Fxl2xfLo4HgmHzVBz08w4wDePCTjYw66PdrolO0kzli3yam/YCgRufyo1DdQVTA==",
      "dev": true,
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/acorn": {
      "version": "8.7.0",
      "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.7.0.tgz",
      "integrity": "sha512-V/LGr1APy+PXIwKebEWrkZPwoeoF+w1jiOBUmuxuiUIaOHtob8Qc9BTrYo7VuI5fR8tqsy+buA2WFooR5olqvQ==",
      "dev": true,
      "bin": {
        "acorn": "bin/acorn"
      },
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/acorn-walk": {
      "version": "8.2.0",
      "resolved": "https://registry.npmjs.org/acorn-walk/-/acorn-walk-8.2.0.tgz",
      "integrity": "sha512-k+iyHEuPgSw6SbuDpGQM+06HQUa04DZ3o+F6CSzXMvvI5KMvnaEqXe+YVe555R9nn6GPt404fos4wcgpw12SDA==",
      "dev": true,
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/aggregate-error": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/aggregate-error/-/aggregate-error-3.1.0.tgz",
      "integrity": "sha512-4I7Td01quW/RpocfNayFdFVk1qSuoh0E7JrbRJ16nH01HhKFQ88INq9Sd+nd72zqRySlr9BmDA8xlEJ6vJMrYA==",
      "dev": true,
      "dependencies": {
        "clean-stack": "^2.0.0",
        "indent-string": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/ansi-align": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/ansi-align/-/ansi-align-3.0.1.tgz",
      "integrity": "sha512-IOfwwBF5iczOjp/WeY4YxyjqAFMQoZufdQWDd19SEExbVLNXqvpzSJ/M7Za4/sCPmQ0+GRquoA7bGcINcxew6w==",
      "dev": true,
      "dependencies": {
        "string-width": "^4.1.0"
      }
    },
    "node_modules/ansi-regex": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
      "dev": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/ansi-styles": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-5.2.0.tgz",
      "integrity": "sha512-Cxwpt2SfTzTtXcfOlzGEee8O+c+MmUgGrNiBcXnuWxuFJHe6a5Hz7qwhwe5OgaSYI0IJvkLqWX1ASG+cJOkEiA==",
      "dev": true,
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/anymatch": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/anymatch/-/anymatch-3.1.2.tgz",
      "integrity": "sha512-P43ePfOAIupkguHUycrc4qJ9kz8ZiuOUijaETwX7THt0Y/GNK7v0aa8rY816xWjZ7rJdA5XdMcpVFTKMq+RvWg==",
      "dev": true,
      "dependencies": {
        "normalize-path": "^3.0.0",
        "picomatch": "^2.0.4"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/arg": {
      "version": "4.1.3",
      "resolved": "https://registry.npmjs.org/arg/-/arg-4.1.3.tgz",
      "integrity": "sha512-58S9QDqG0Xx27YwPSt9fJxivjYl432YCwfDMfZ+71RAqUrZef7LrKQZ3LHLOwCS4FLNBplP533Zx895SeOCHvA==",
      "dev": true
    },
    "node_modules/argparse": {
      "version": "1.0.10",
      "resolved": "https://registry.npmjs.org/argparse/-/argparse-1.0.10.tgz",
      "integrity": "sha512-o5Roy6tNG4SL/FOkCAN6RzjiakZS25RLYFrcMttJqbdd8BWrnA+fGz57iN5Pb06pvBGvl5gQ0B48dJlslXvoTg==",
      "dev": true,
      "dependencies": {
        "sprintf-js": "~1.0.2"
      }
    },
    "node_modules/array-find-index": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/array-find-index/-/array-find-index-1.0.2.tgz",
      "integrity": "sha1-3wEKoSh+Fku9pvlyOwqWoexBh6E=",
      "dev": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/array-union": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/array-union/-/array-union-2.1.0.tgz",
      "integrity": "sha512-HGyxoOTYUyCM6stUe6EJgnd4EoewAI7zMdfqO+kGjnlZmBDz/cR5pf8r/cR4Wq60sL/p0IkcjUEEPwS3GFrIyw==",
      "dev": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/arrgv": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/arrgv/-/arrgv-1.0.2.tgz",
      "integrity": "sha512-a4eg4yhp7mmruZDQFqVMlxNRFGi/i1r87pt8SDHy0/I8PqSXoUTlWZRdAZo0VXgvEARcujbtTk8kiZRi1uDGRw==",
      "dev": true,
      "engines": {
        "node": ">=8.0.0"
      }
    },
    "node_modules/arrify": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/arrify/-/arrify-2.0.1.tgz",
      "integrity": "sha512-3duEwti880xqi4eAMN8AyR4a0ByT90zoYdLlevfrvU43vb0YZwZVfxOgxWrLXXXpyugL0hNZc9G6BiB5B3nUug==",
      "dev": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/astral-regex": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/astral-regex/-/astral-regex-2.0.0.tgz",
      "integrity": "sha512-Z7tMw1ytTXt5jqMcOP+OQteU1VuNK9Y02uuJtKQ1Sv69jXQKKg5cibLwGJow8yzZP+eAc18EmLGPal0bp36rvQ==",
      "dev": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/ava": {
      "version": "3.15.0",
      "resolved": "https://registry.npmjs.org/ava/-/ava-3.15.0.tgz",
      "integrity": "sha512-HGAnk1SHPk4Sx6plFAUkzV/XC1j9+iQhOzt4vBly18/yo0AV8Oytx7mtJd/CR8igCJ5p160N/Oo/cNJi2uSeWA==",
      "dev": true,
      "dependencies": {
        "@concordance/react": "^2.0.0",
        "acorn": "^8.0.4",
        "acorn-walk": "^8.0.0",
        "ansi-styles": "^5.0.0",
        "arrgv": "^1.0.2",
        "arrify": "^2.0.1",
        "callsites": "^3.1.0",
        "chalk": "^4.1.0",
        "chokidar": "^3.4.3",
        "chunkd": "^2.0.1",
        "ci-info": "^2.0.0",
        "ci-parallel-vars": "^1.0.1",
        "clean-yaml-object": "^0.1.0",
        "cli-cursor": "^3.1.0",
        "cli-truncate": "^2.1.0",
        "code-excerpt": "^3.0.0",
        "common-path-prefix": "^3.0.0",
        "concordance": "^5.0.1",
        "convert-source-map": "^1.7.0",
        "currently-unhandled": "^0.4.1",
        "debug": "^4.3.1",
        "del": "^6.0.0",
        "emittery": "^0.8.0",
        "equal-length": "^1.0.0",
        "figures": "^3.2.0",
        "globby": "^11.0.1",
        "ignore-by-default": "^2.0.0",
        "import-local": "^3.0.2",
        "indent-string": "^4.0.0",
        "is-error": "^2.2.2",
        "is-plain-object": "^5.0.0",
        "is-promise": "^4.0.0",
        "lodash": "^4.17.20",
        "matcher": "^3.0.0",
        "md5-hex": "^3.0.1",
        "mem": "^8.0.0",
        "ms": "^2.1.3",
        "ora": "^5.2.0",
        "p-event": "^4.2.0",
        "p-map": "^4.0.0",
        "picomatch": "^2.2.2",
        "pkg-conf": "^3.1.0",
        "plur": "^4.0.0",
        "pretty-ms": "^7.0.1",
        "read-pkg": "^5.2.0",
        "resolve-cwd": "^3.0.0",
        "slash": "^3.0.0",
        "source-map-support": "^0.5.19",
        "stack-utils": "^2.0.3",
        "strip-ansi": "^6.0.0",
        "supertap": "^2.0.0",
        "temp-dir": "^2.0.0",
        "trim-off-newlines": "^1.0.1",
        "update-notifier": "^5.0.1",
        "write-file-atomic": "^3.0.3",
        "yargs": "^16.2.0"
      },
      "bin": {
        "ava": "cli.js"
      },
      "engines": {
        "node": ">=10.18.0 <11 || >=12.14.0 <12.17.0 || >=12.17.0 <13 || >=14.0.0 <15 || >=15"
      }
    },
    "node_modules/balanced-match": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
      "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==",
      "dev": true
    },
    "node_modules/base-x": {
      "version": "3.0.9",
      "resolved": "https://registry.npmjs.org/base-x/-/base-x-3.0.9.tgz",
      "integrity": "sha512-H7JU6iBHTal1gp56aKoaa//YUxEaAOUiydvrV/pILqIHXTtqxSkATOnDA2u+jZ/61sD+L/412+7kzXRtWukhpQ==",
      "dev": true,
      "dependencies": {
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/base64-js": {
      "version": "1.5.1",
      "resolved": "https://registry.npmjs.org/base64-js/-/base64-js-1.5.1.tgz",
      "integrity": "sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ]
    },
    "node_modules/base64url": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/base64url/-/base64url-3.0.1.tgz",
      "integrity": "sha512-ir1UPr3dkwexU7FdV8qBBbNDRUhMmIekYMFZfi+C/sLNnRESKPl23nB9b2pltqfOQNnGzsDdId90AEtG5tCx4A==",
      "dev": true,
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/binary-extensions": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/binary-extensions/-/binary-extensions-2.2.0.tgz",
      "integrity": "sha512-jDctJ/IVQbZoJykoeHbhXpOlNBqGNcwXJKJog42E5HDPUwQTSdjCHdihjj0DlnheQ7blbT6dHOafNAiS8ooQKA==",
      "dev": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/bl": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/bl/-/bl-4.1.0.tgz",
      "integrity": "sha512-1W07cM9gS6DcLperZfFSj+bWLtaPGSOHWhPiGzXmvVJbRLdG82sH/Kn8EtW1VqWVA54AKf2h5k5BbnIbwF3h6w==",
      "dev": true,
      "dependencies": {
        "buffer": "^5.5.0",
        "inherits": "^2.0.4",
        "readable-stream": "^3.4.0"
      }
    },
    "node_modules/blueimp-md5": {
      "version": "2.19.0",
      "resolved": "https://registry.npmjs.org/blueimp-md5/-/blueimp-md5-2.19.0.tgz",
      "integrity": "sha512-DRQrD6gJyy8FbiE4s+bDoXS9hiW3Vbx5uCdwvcCf3zLHL+Iv7LtGHLpr+GZV8rHG8tK766FGYBwRbu8pELTt+w==",
      "dev": true
    },
    "node_modules/bn.js": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/bn.js/-/bn.js-5.2.0.tgz",
      "integrity": "sha512-D7iWRBvnZE8ecXiLj/9wbxH7Tk79fAh8IHaTNq1RWRixsS02W+5qS+iE9yq6RYl0asXx5tw0bLhmT5pIfbSquw==",
      "dev": true
    },
    "node_modules/borsh": {
      "version": "0.5.0",
      "resolved": "https://registry.npmjs.org/borsh/-/borsh-0.5.0.tgz",
      "integrity": "sha512-p9w/qGBeeFdUf2GPBPHdX5JQyez8K5VtoFN7PqSfmR+cVUMSmcwAKhP9n2aXoDSKbtS7xZlZt3MVnrJL7GdYhg==",
      "dev": true,
      "dependencies": {
        "bn.js": "^5.2.0",
        "bs58": "^4.0.0",
        "text-encoding-utf-8": "^1.0.2"
      }
    },
    "node_modules/boxen": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/boxen/-/boxen-5.1.2.tgz",
      "integrity": "sha512-9gYgQKXx+1nP8mP7CzFyaUARhg7D3n1dF/FnErWmu9l6JvGpNUN278h0aSb+QjoiKSWG+iZ3uHrcqk0qrY9RQQ==",
      "dev": true,
      "dependencies": {
        "ansi-align": "^3.0.0",
        "camelcase": "^6.2.0",
        "chalk": "^4.1.0",
        "cli-boxes": "^2.2.1",
        "string-width": "^4.2.2",
        "type-fest": "^0.20.2",
        "widest-line": "^3.1.0",
        "wrap-ansi": "^7.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/boxen/node_modules/type-fest": {
      "version": "0.20.2",
      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.20.2.tgz",
      "integrity": "sha512-Ne+eE4r0/iWnpAxD852z3A+N0Bt5RN//NjJwRd2VFHEmrywxf5vsZlh4R6lixl6B+wz/8d+maTSAkN1FIkI3LQ==",
      "dev": true,
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/brace-expansion": {
      "version": "1.1.11",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
      "dev": true,
      "dependencies": {
        "balanced-match": "^1.0.0",
        "concat-map": "0.0.1"
      }
    },
    "node_modules/braces": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/braces/-/braces-3.0.2.tgz",
      "integrity": "sha512-b8um+L1RzM3WDSzvhm6gIz1yfTbBt6YTlcEKAvsmqCZZFw46z626lVj9j1yEPW33H5H+lBQpZMP1k8l+78Ha0A==",
      "dev": true,
      "dependencies": {
        "fill-range": "^7.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/bs58": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/bs58/-/bs58-4.0.1.tgz",
      "integrity": "sha1-vhYedsNU9veIrkBx9j806MTwpCo=",
      "dev": true,
      "dependencies": {
        "base-x": "^3.0.2"
      }
    },
    "node_modules/buffer": {
      "version": "5.7.1",
      "resolved": "https://registry.npmjs.org/buffer/-/buffer-5.7.1.tgz",
      "integrity": "sha512-EHcyIPBQ4BSGlvjB16k5KgAJ27CIsHY/2JBmCRReo48y9rQ3MaUzWX3KVlBa4U7MyX02HdVj0K7C3WaB3ju7FQ==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "dependencies": {
        "base64-js": "^1.3.1",
        "ieee754": "^1.1.13"
      }
    },
    "node_modules/buffer-from": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/buffer-from/-/buffer-from-1.1.2.tgz",
      "integrity": "sha512-E+XQCRwSbaaiChtv6k6Dwgc+bx+Bs6vuKJHHl5kox/BaKbhiXzqQOwK4cO22yElGp2OCmjwVhT3HmxgyPGnJfQ==",
      "dev": true
    },
    "node_modules/cacheable-lookup": {
      "version": "5.0.4",
      "resolved": "https://registry.npmjs.org/cacheable-lookup/-/cacheable-lookup-5.0.4.tgz",
      "integrity": "sha512-2/kNscPhpcxrOigMZzbiWF7dz8ilhb/nIHU3EyZiXWXpeq/au8qJ8VhdftMkty3n7Gj6HIGalQG8oiBNB3AJgA==",
      "dev": true,
      "engines": {
        "node": ">=10.6.0"
      }
    },
    "node_modules/cacheable-request": {
      "version": "7.0.2",
      "resolved": "https://registry.npmjs.org/cacheable-request/-/cacheable-request-7.0.2.tgz",
      "integrity": "sha512-pouW8/FmiPQbuGpkXQ9BAPv/Mo5xDGANgSNXzTzJ8DrKGuXOssM4wIQRjfanNRh3Yu5cfYPvcorqbhg2KIJtew==",
      "dev": true,
      "dependencies": {
        "clone-response": "^1.0.2",
        "get-stream": "^5.1.0",
        "http-cache-semantics": "^4.0.0",
        "keyv": "^4.0.0",
        "lowercase-keys": "^2.0.0",
        "normalize-url": "^6.0.1",
        "responselike": "^2.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/cacheable-request/node_modules/get-stream": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/get-stream/-/get-stream-5.2.0.tgz",
      "integrity": "sha512-nBF+F1rAZVCu/p7rjzgA+Yb4lfYXrpl7a6VmJrU8wF9I1CKvP/QwPNZHnOlwbTkY6dvtFIzFMSyQXbLoTQPRpA==",
      "dev": true,
      "dependencies": {
        "pump": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/callsites": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/callsites/-/callsites-3.1.0.tgz",
      "integrity": "sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==",
      "dev": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/camelcase": {
      "version": "6.3.0",
      "resolved": "https://registry.npmjs.org/camelcase/-/camelcase-6.3.0.tgz",
      "integrity": "sha512-Gmy6FhYlCY7uOElZUSbxo2UCDH8owEk996gkbrpsgGtrJLM3J7jGxl9Ic7Qwwj4ivOE5AWZWRMecDdF7hqGjFA==",
      "dev": true,
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/capability": {
      "version": "0.2.5",
      "resolved": "https://registry.npmjs.org/capability/-/capability-0.2.5.tgz",
      "integrity": "sha1-Ua2HNT8ZNv/Xfy8hx0YzpN6oiAE=",
      "dev": true
    },
    "node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "dev": true,
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/chalk/node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "dev": true,
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/chokidar": {
      "version": "3.5.3",
      "resolved": "https://registry.npmjs.org/chokidar/-/chokidar-3.5.3.tgz",
      "integrity": "sha512-Dr3sfKRP6oTcjf2JmUmFJfeVMvXBdegxB0iVQ5eb2V10uFJUCAS8OByZdVAyVb8xXNz3GjjTgj9kLWsZTqE6kw==",
      "dev": true,
      "funding": [
        {
          "type": "individual",
          "url": "https://paulmillr.com/funding/"
        }
      ],
      "dependencies": {
        "anymatch": "~3.1.2",
        "braces": "~3.0.2",
        "glob-parent": "~5.1.2",
        "is-binary-path": "~2.1.0",
        "is-glob": "~4.0.1",
        "normalize-path": "~3.0.0",
        "readdirp": "~3.6.0"
      },
      "engines": {
        "node": ">= 8.10.0"
      },
      "optionalDependencies": {
        "fsevents": "~2.3.2"
      }
    },
    "node_modules/chownr": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/chownr/-/chownr-2.0.0.tgz",
      "integrity": "sha512-bIomtDF5KGpdogkLd9VspvFzk9KfpyyGlS8YFVZl7TGPBHL5snIOnxeshwVgPteQ9b4Eydl+pVbIyE1DcvCWgQ==",
      "dev": true,
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/chunkd": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/chunkd/-/chunkd-2.0.1.tgz",
      "integrity": "sha512-7d58XsFmOq0j6el67Ug9mHf9ELUXsQXYJBkyxhH/k+6Ke0qXRnv0kbemx+Twc6fRJ07C49lcbdgm9FL1Ei/6SQ==",
      "dev": true
    },
    "node_modules/ci-info": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ci-info/-/ci-info-2.0.0.tgz",
      "integrity": "sha512-5tK7EtrZ0N+OLFMthtqOj4fI2Jeb88C4CAZPu25LDVUgXJ0A3Js4PMGqrn0JU1W0Mh1/Z8wZzYPxqUrXeBboCQ==",
      "dev": true
    },
    "node_modules/ci-parallel-vars": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/ci-parallel-vars/-/ci-parallel-vars-1.0.1.tgz",
      "integrity": "sha512-uvzpYrpmidaoxvIQHM+rKSrigjOe9feHYbw4uOI2gdfe1C3xIlxO+kVXq83WQWNniTf8bAxVpy+cQeFQsMERKg==",
      "dev": true
    },
    "node_modules/clean-stack": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/clean-stack/-/clean-stack-2.2.0.tgz",
      "integrity": "sha512-4diC9HaTE+KRAMWhDhrGOECgWZxoevMc5TlkObMqNSsVU62PYzXZ/SMTjzyGAFF1YusgxGcSWTEXBhp0CPwQ1A==",
      "dev": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/clean-yaml-object": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/clean-yaml-object/-/clean-yaml-object-0.1.0.tgz",
      "integrity": "sha1-Y/sRDcLOGoTcIfbZM0h20BCui2g=",
      "dev": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/cli-boxes": {
      "version": "2.2.1",
      "resolved": "https://registry.npmjs.org/cli-boxes/-/cli-boxes-2.2.1.tgz",
      "integrity": "sha512-y4coMcylgSCdVinjiDBuR8PCC2bLjyGTwEmPb9NHR/QaNU6EUOXcTY/s6VjGMD6ENSEaeQYHCY0GNGS5jfMwPw==",
      "dev": true,
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/cli-cursor": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/cli-cursor/-/cli-cursor-3.1.0.tgz",
      "integrity": "sha512-I/zHAwsKf9FqGoXM4WWRACob9+SNukZTd94DWF57E4toouRulbCxcUh6RKUEOQlYTHJnzkPMySvPNaaSLNfLZw==",
      "dev": true,
      "dependencies": {
        "restore-cursor": "^3.1.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/cli-spinners": {
      "version": "2.6.1",
      "resolved": "https://registry.npmjs.org/cli-spinners/-/cli-spinners-2.6.1.tgz",
      "integrity": "sha512-x/5fWmGMnbKQAaNwN+UZlV79qBLM9JFnJuJ03gIi5whrob0xV0ofNVHy9DhwGdsMJQc2OKv0oGmLzvaqvAVv+g==",
      "dev": true,
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/cli-truncate": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/cli-truncate/-/cli-truncate-2.1.0.tgz",
      "integrity": "sha512-n8fOixwDD6b/ObinzTrp1ZKFzbgvKZvuz/TvejnLn1aQfC6r52XEx85FmuC+3HI+JM7coBRXUvNqEU2PHVrHpg==",
      "dev": true,
      "dependencies": {
        "slice-ansi": "^3.0.0",
        "string-width": "^4.2.0"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/cliui": {
      "version": "7.0.4",
      "resolved": "https://registry.npmjs.org/cliui/-/cliui-7.0.4.tgz",
      "integrity": "sha512-OcRE68cOsVMXp1Yvonl/fzkQOyjLSu/8bhPDfQt0e0/Eb283TKP20Fs2MqoPsr9SwA595rRCA+QMzYc9nBP+JQ==",
      "dev": true,
      "dependencies": {
        "string-width": "^4.2.0",
        "strip-ansi": "^6.0.0",
        "wrap-ansi": "^7.0.0"
      }
    },
    "node_modules/clone": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/clone/-/clone-1.0.4.tgz",
      "integrity": "sha1-2jCcwmPfFZlMaIypAheco8fNfH4=",
      "dev": true,
      "engines": {
        "node": ">=0.8"
      }
    },
    "node_modules/clone-response": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/clone-response/-/clone-response-1.0.2.tgz",
      "integrity": "sha1-0dyXOSAxTfZ/vrlCI7TuNQI56Ws=",
      "dev": true,
      "dependencies": {
        "mimic-response": "^1.0.0"
      }
    },
    "node_modules/code-excerpt": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/code-excerpt/-/code-excerpt-3.0.0.tgz",
      "integrity": "sha512-VHNTVhd7KsLGOqfX3SyeO8RyYPMp1GJOg194VITk04WMYCv4plV68YWe6TJZxd9MhobjtpMRnVky01gqZsalaw==",
      "dev": true,
      "dependencies": {
        "convert-to-spaces": "^1.0.1"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "dev": true,
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "dev": true
    },
    "node_modules/common-path-prefix": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/common-path-prefix/-/common-path-prefix-3.0.0.tgz",
      "integrity": "sha512-QE33hToZseCH3jS0qN96O/bSh3kaw/h+Tq7ngyY9eWDUnTlTNUyqfqvCXioLe5Na5jFsL78ra/wuBU4iuEgd4w==",
      "dev": true
    },
    "node_modules/concat-map": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
      "integrity": "sha1-2Klr13/Wjfd5OnMDajug1UBdR3s=",
      "dev": true
    },
    "node_modules/concordance": {
      "version": "5.0.4",
      "resolved": "https://registry.npmjs.org/concordance/-/concordance-5.0.4.tgz",
      "integrity": "sha512-OAcsnTEYu1ARJqWVGwf4zh4JDfHZEaSNlNccFmt8YjB2l/n19/PF2viLINHc57vO4FKIAFl2FWASIGZZWZ2Kxw==",
      "dev": true,
      "dependencies": {
        "date-time": "^3.1.0",
        "esutils": "^2.0.3",
        "fast-diff": "^1.2.0",
        "js-string-escape": "^1.0.1",
        "lodash": "^4.17.15",
        "md5-hex": "^3.0.1",
        "semver": "^7.3.2",
        "well-known-symbols": "^2.0.0"
      },
      "engines": {
        "node": ">=10.18.0 <11 || >=12.14.0 <13 || >=14"
      }
    },
    "node_modules/configstore": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/configstore/-/configstore-5.0.1.tgz",
      "integrity": "sha512-aMKprgk5YhBNyH25hj8wGt2+D52Sw1DRRIzqBwLp2Ya9mFmY8KPvvtvmna8SxVR9JMZ4kzMD68N22vlaRpkeFA==",
      "dev": true,
      "dependencies": {
        "dot-prop": "^5.2.0",
        "graceful-fs": "^4.1.2",
        "make-dir": "^3.0.0",
        "unique-string": "^2.0.0",
        "write-file-atomic": "^3.0.0",
        "xdg-basedir": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/convert-source-map": {
      "version": "1.8.0",
      "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-1.8.0.tgz",
      "integrity": "sha512-+OQdjP49zViI/6i7nIJpA8rAl4sV/JdPfU9nZs3VqOwGIgizICvuN2ru6fMd+4llL0tar18UYJXfZ/TWtmhUjA==",
      "dev": true,
      "dependencies": {
        "safe-buffer": "~5.1.1"
      }
    },
    "node_modules/convert-to-spaces": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/convert-to-spaces/-/convert-to-spaces-1.0.2.tgz",
      "integrity": "sha1-fj5Iu+bZl7FBfdyihoIEtNPYVxU=",
      "dev": true,
      "engines": {
        "node": ">= 4"
      }
    },
    "node_modules/create-require": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/create-require/-/create-require-1.1.1.tgz",
      "integrity": "sha512-dcKFX3jn0MpIaXjisoRvexIJVEKzaq7z2rZKxf+MSr9TkdmHmsU4m2lcLojrj/FHl8mk5VxMmYA+ftRkP/3oKQ==",
      "dev": true
    },
    "node_modules/cross-spawn": {
      "version": "7.0.3",
      "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.3.tgz",
      "integrity": "sha512-iRDPJKUPVEND7dHPO8rkbOnPpyDygcDFtWjpeWNCgy8WP2rXcxXL8TskReQl6OrB2G7+UJrags1q15Fudc7G6w==",
      "dev": true,
      "dependencies": {
        "path-key": "^3.1.0",
        "shebang-command": "^2.0.0",
        "which": "^2.0.1"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/crypto-random-string": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/crypto-random-string/-/crypto-random-string-2.0.0.tgz",
      "integrity": "sha512-v1plID3y9r/lPhviJ1wrXpLeyUIGAZ2SHNYTEapm7/8A9nLPoyvVp3RK/EPFqn5kEznyWgYZNsRtYYIWbuG8KA==",
      "dev": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/currently-unhandled": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/currently-unhandled/-/currently-unhandled-0.4.1.tgz",
      "integrity": "sha1-mI3zP+qxke95mmE2nddsF635V+o=",
      "dev": true,
      "dependencies": {
        "array-find-index": "^1.0.1"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/date-time": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/date-time/-/date-time-3.1.0.tgz",
      "integrity": "sha512-uqCUKXE5q1PNBXjPqvwhwJf9SwMoAHBgWJ6DcrnS5o+W2JOiIILl0JEdVD8SGujrNS02GGxgwAg2PN2zONgtjg==",
      "dev": true,
      "dependencies": {
        "time-zone": "^1.0.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/debug": {
      "version": "4.3.3",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.3.tgz",
      "integrity": "sha512-/zxw5+vh1Tfv+4Qn7a5nsbcJKPaSvCDhojn6FEl9vupwK2VCSDtEiEtqr8DFtzYFOdz63LBkxec7DYuc2jon6Q==",
      "dev": true,
      "dependencies": {
        "ms": "2.1.2"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/debug/node_modules/ms": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
      "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==",
      "dev": true
    },
    "node_modules/decompress-response": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/decompress-response/-/decompress-response-6.0.0.tgz",
      "integrity": "sha512-aW35yZM6Bb/4oJlZncMH2LCoZtJXTRxES17vE3hoRiowU2kWHaJKFkSBDnDR+cm9J+9QhXmREyIfv0pji9ejCQ==",
      "dev": true,
      "dependencies": {
        "mimic-response": "^3.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/decompress-response/node_modules/mimic-response": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/mimic-response/-/mimic-response-3.1.0.tgz",
      "integrity": "sha512-z0yWI+4FDrrweS8Zmt4Ej5HdJmky15+L2e6Wgn3+iK5fWzb6T3fhNFq2+MeTRb064c6Wr4N/wv0DzQTjNzHNGQ==",
      "dev": true,
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/deep-extend": {
      "version": "0.6.0",
      "resolved": "https://registry.npmjs.org/deep-extend/-/deep-extend-0.6.0.tgz",
      "integrity": "sha512-LOHxIOaPYdHlJRtCQfDIVZtfw/ufM8+rVj649RIHzcm/vGwQRXFt6OPqIFWsm2XEMrNIEtWR64sY1LEKD2vAOA==",
      "dev": true,
      "engines": {
        "node": ">=4.0.0"
      }
    },
    "node_modules/defaults": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/defaults/-/defaults-1.0.3.tgz",
      "integrity": "sha1-xlYFHpgX2f8I7YgUd/P+QBnz730=",
      "dev": true,
      "dependencies": {
        "clone": "^1.0.2"
      }
    },
    "node_modules/defer-to-connect": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/defer-to-connect/-/defer-to-connect-2.0.1.tgz",
      "integrity": "sha512-4tvttepXG1VaYGrRibk5EwJd1t4udunSOVMdLSAL6mId1ix438oPwPZMALY41FCijukO1L0twNcGsdzS7dHgDg==",
      "dev": true,
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/del": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/del/-/del-6.0.0.tgz",
      "integrity": "sha512-1shh9DQ23L16oXSZKB2JxpL7iMy2E0S9d517ptA1P8iw0alkPtQcrKH7ru31rYtKwF499HkTu+DRzq3TCKDFRQ==",
      "dev": true,
      "dependencies": {
        "globby": "^11.0.1",
        "graceful-fs": "^4.2.4",
        "is-glob": "^4.0.1",
        "is-path-cwd": "^2.2.0",
        "is-path-inside": "^3.0.2",
        "p-map": "^4.0.0",
        "rimraf": "^3.0.2",
        "slash": "^3.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/depd": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/depd/-/depd-2.0.0.tgz",
      "integrity": "sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw==",
      "dev": true,
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/diff": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/diff/-/diff-4.0.2.tgz",
      "integrity": "sha512-58lmxKSA4BNyLz+HHMUzlOEpg09FV+ev6ZMe3vJihgdxzgcwZ8VoEEPmALCZG9LmqfVoNMMKpttIYTVG6uDY7A==",
      "dev": true,
      "engines": {
        "node": ">=0.3.1"
      }
    },
    "node_modules/dir-glob": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/dir-glob/-/dir-glob-3.0.1.tgz",
      "integrity": "sha512-WkrWp9GR4KXfKGYzOLmTuGVi1UWFfws377n9cc55/tb6DuqyF6pcQ5AbiHEshaDpY9v6oaSr2XCDidGmMwdzIA==",
      "dev": true,
      "dependencies": {
        "path-type": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/dot-prop": {
      "version": "5.3.0",
      "resolved": "https://registry.npmjs.org/dot-prop/-/dot-prop-5.3.0.tgz",
      "integrity": "sha512-QM8q3zDe58hqUqjraQOmzZ1LIH9SWQJTlEKCH4kJ2oQvLZk7RbQXvtDM2XEq3fwkV9CCvvH4LA0AV+ogFsBM2Q==",
      "dev": true,
      "dependencies": {
        "is-obj": "^2.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/duplexer3": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/duplexer3/-/duplexer3-0.1.4.tgz",
      "integrity": "sha1-7gHdHKwO08vH/b6jfcCo8c4ALOI=",
      "dev": true
    },
    "node_modules/emittery": {
      "version": "0.8.1",
      "resolved": "https://registry.npmjs.org/emittery/-/emittery-0.8.1.tgz",
      "integrity": "sha512-uDfvUjVrfGJJhymx/kz6prltenw1u7WrCg1oa94zYY8xxVpLLUu045LAT0dhDZdXG58/EpPL/5kA180fQ/qudg==",
      "dev": true,
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sindresorhus/emittery?sponsor=1"
      }
    },
    "node_modules/emoji-regex": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
      "dev": true
    },
    "node_modules/end-of-stream": {
      "version": "1.4.4",
      "resolved": "https://registry.npmjs.org/end-of-stream/-/end-of-stream-1.4.4.tgz",
      "integrity": "sha512-+uw1inIHVPQoaVuHzRyXd21icM+cnt4CzD5rW+NC1wjOUSTOs+Te7FOv7AhN7vS9x/oIyhLP5PR1H+phQAHu5Q==",
      "dev": true,
      "dependencies": {
        "once": "^1.4.0"
      }
    },
    "node_modules/equal-length": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/equal-length/-/equal-length-1.0.1.tgz",
      "integrity": "sha1-IcoRLUirJLTh5//A5TOdMf38J0w=",
      "dev": true,
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/error-ex": {
      "version": "1.3.2",
      "resolved": "https://registry.npmjs.org/error-ex/-/error-ex-1.3.2.tgz",
      "integrity": "sha512-7dFHNmqeFSEt2ZBsCriorKnn3Z2pj+fd9kmI6QoWw4//DL+icEBfc0U7qJCisqrTsKTjw4fNFy2pW9OqStD84g==",
      "dev": true,
      "dependencies": {
        "is-arrayish": "^0.2.1"
      }
    },
    "node_modules/error-polyfill": {
      "version": "0.1.3",
      "resolved": "https://registry.npmjs.org/error-polyfill/-/error-polyfill-0.1.3.tgz",
      "integrity": "sha512-XHJk60ufE+TG/ydwp4lilOog549iiQF2OAPhkk9DdiYWMrltz5yhDz/xnKuenNwP7gy3dsibssO5QpVhkrSzzg==",
      "dev": true,
      "dependencies": {
        "capability": "^0.2.5",
        "o3": "^1.0.3",
        "u3": "^0.1.1"
      }
    },
    "node_modules/escalade": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.1.1.tgz",
      "integrity": "sha512-k0er2gUkLf8O0zKJiAhmkTnJlTvINGv7ygDNPbeIsX/TJjGJZHuh9B2UxbsaEkmlEo9MfhrSzmhIlhRlI2GXnw==",
      "dev": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/escape-goat": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/escape-goat/-/escape-goat-2.1.1.tgz",
      "integrity": "sha512-8/uIhbG12Csjy2JEW7D9pHbreaVaS/OpN3ycnyvElTdwM5n6GY6W6e2IPemfvGZeUMqZ9A/3GqIZMgKnBhAw/Q==",
      "dev": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/escape-string-regexp": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-4.0.0.tgz",
      "integrity": "sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==",
      "dev": true,
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/esprima": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/esprima/-/esprima-4.0.1.tgz",
      "integrity": "sha512-eGuFFw7Upda+g4p+QHvnW0RyTX/SVeJBDM/gCtMARO0cLuT2HcEKnTPvhjV6aGeqrCB/sbNop0Kszm0jsaWU4A==",
      "dev": true,
      "bin": {
        "esparse": "bin/esparse.js",
        "esvalidate": "bin/esvalidate.js"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/esutils": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/esutils/-/esutils-2.0.3.tgz",
      "integrity": "sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==",
      "dev": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/execa": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/execa/-/execa-5.1.1.tgz",
      "integrity": "sha512-8uSpZZocAZRBAPIEINJj3Lo9HyGitllczc27Eh5YYojjMFMn8yHMDMaUHE2Jqfq05D/wucwI4JGURyXt1vchyg==",
      "dev": true,
      "dependencies": {
        "cross-spawn": "^7.0.3",
        "get-stream": "^6.0.0",
        "human-signals": "^2.1.0",
        "is-stream": "^2.0.0",
        "merge-stream": "^2.0.0",
        "npm-run-path": "^4.0.1",
        "onetime": "^5.1.2",
        "signal-exit": "^3.0.3",
        "strip-final-newline": "^2.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sindresorhus/execa?sponsor=1"
      }
    },
    "node_modules/fast-diff": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/fast-diff/-/fast-diff-1.2.0.tgz",
      "integrity": "sha512-xJuoT5+L99XlZ8twedaRf6Ax2TgQVxvgZOYoPKqZufmJib0tL2tegPBOZb1pVNgIhlqDlA0eO0c3wBvQcmzx4w==",
      "dev": true
    },
    "node_modules/fast-glob": {
      "version": "3.2.11",
      "resolved": "https://registry.npmjs.org/fast-glob/-/fast-glob-3.2.11.tgz",
      "integrity": "sha512-xrO3+1bxSo3ZVHAnqzyuewYT6aMFHRAd4Kcs92MAonjwQZLsK9d0SF1IyQ3k5PoirxTW0Oe/RqFgMQ6TcNE5Ew==",
      "dev": true,
      "dependencies": {
        "@nodelib/fs.stat": "^2.0.2",
        "@nodelib/fs.walk": "^1.2.3",
        "glob-parent": "^5.1.2",
        "merge2": "^1.3.0",
        "micromatch": "^4.0.4"
      },
      "engines": {
        "node": ">=8.6.0"
      }
    },
    "node_modules/fastq": {
      "version": "1.13.0",
      "resolved": "https://registry.npmjs.org/fastq/-/fastq-1.13.0.tgz",
      "integrity": "sha512-YpkpUnK8od0o1hmeSc7UUs/eB/vIPWJYjKck2QKIzAf71Vm1AAQ3EbuZB3g2JIy+pg+ERD0vqI79KyZiB2e2Nw==",
      "dev": true,
      "dependencies": {
        "reusify": "^1.0.4"
      }
    },
    "node_modules/figures": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/figures/-/figures-3.2.0.tgz",
      "integrity": "sha512-yaduQFRKLXYOGgEn6AZau90j3ggSOyiqXU0F9JZfeXYhNa+Jk4X+s45A2zg5jns87GAFa34BBm2kXw4XpNcbdg==",
      "dev": true,
      "dependencies": {
        "escape-string-regexp": "^1.0.5"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/figures/node_modules/escape-string-regexp": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-1.0.5.tgz",
      "integrity": "sha1-G2HAViGQqN/2rjuyzwIAyhMLhtQ=",
      "dev": true,
      "engines": {
        "node": ">=0.8.0"
      }
    },
    "node_modules/fill-range": {
      "version": "7.0.1",
      "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.0.1.tgz",
      "integrity": "sha512-qOo9F+dMUmC2Lcb4BbVvnKJxTPjCm+RRpe4gDuGrzkL7mEVl/djYSu2OdQ2Pa302N4oqkSg9ir6jaLWJ2USVpQ==",
      "dev": true,
      "dependencies": {
        "to-regex-range": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/find-up": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/find-up/-/find-up-3.0.0.tgz",
      "integrity": "sha512-1yD6RmLI1XBfxugvORwlck6f75tYL+iR0jqwsOrOxMZyGYqUuDhJ0l4AXdO1iX/FTs9cBAMEk1gWSEx1kSbylg==",
      "dev": true,
      "dependencies": {
        "locate-path": "^3.0.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/fs-extra": {
      "version": "10.0.0",
      "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-10.0.0.tgz",
      "integrity": "sha512-C5owb14u9eJwizKGdchcDUQeFtlSHHthBk8pbX9Vc1PFZrLombudjDnNns88aYslCyF6IY5SUw3Roz6xShcEIQ==",
      "dev": true,
      "dependencies": {
        "graceful-fs": "^4.2.0",
        "jsonfile": "^6.0.1",
        "universalify": "^2.0.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/fs-minipass": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/fs-minipass/-/fs-minipass-2.1.0.tgz",
      "integrity": "sha512-V/JgOLFCS+R6Vcq0slCuaeWEdNC3ouDlJMNIsacH2VtALiu9mV4LPrHc5cDl8k5aw6J8jwgWWpiTo5RYhmIzvg==",
      "dev": true,
      "dependencies": {
        "minipass": "^3.0.0"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/fs.realpath": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz",
      "integrity": "sha1-FQStJSMVjKpA20onh8sBQRmU6k8=",
      "dev": true
    },
    "node_modules/fsevents": {
      "version": "2.3.2",
      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.2.tgz",
      "integrity": "sha512-xiqMQR4xAeHTuB9uWm+fFRcIOgKBMiOBP+eXiyT7jsgVCq1bkVygt00oASowB7EdtpOHaaPgKt812P9ab+DDKA==",
      "dev": true,
      "hasInstallScript": true,
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": "^8.16.0 || ^10.6.0 || >=11.0.0"
      }
    },
    "node_modules/function-bind": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.1.tgz",
      "integrity": "sha512-yIovAzMX49sF8Yl58fSCWJ5svSLuaibPxXQJFLmBObTuCr0Mf1KiPopGM9NiFjiYBCbfaa2Fh6breQ6ANVTI0A==",
      "dev": true
    },
    "node_modules/get-caller-file": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/get-caller-file/-/get-caller-file-2.0.5.tgz",
      "integrity": "sha512-DyFP3BM/3YHTQOCUL/w0OZHR0lpKeGrxotcHWcqNEdnltqFwXVfhEBQ94eIo34AfQpo0rGki4cyIiftY06h2Fg==",
      "dev": true,
      "engines": {
        "node": "6.* || 8.* || >= 10.*"
      }
    },
    "node_modules/get-stream": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/get-stream/-/get-stream-6.0.1.tgz",
      "integrity": "sha512-ts6Wi+2j3jQjqi70w5AlN8DFnkSwC+MqmxEzdEALB2qXZYV3X/b1CTfgPLGJNMeAWxdPfU8FO1ms3NUfaHCPYg==",
      "dev": true,
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/glob": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/glob/-/glob-7.2.0.tgz",
      "integrity": "sha512-lmLf6gtyrPq8tTjSmrO94wBeQbFR3HbLHbuyD69wuyQkImp2hWqMGB47OX65FBkPffO641IP9jWa1z4ivqG26Q==",
      "dev": true,
      "dependencies": {
        "fs.realpath": "^1.0.0",
        "inflight": "^1.0.4",
        "inherits": "2",
        "minimatch": "^3.0.4",
        "once": "^1.3.0",
        "path-is-absolute": "^1.0.0"
      },
      "engines": {
        "node": "*"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/glob-parent": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
      "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
      "dev": true,
      "dependencies": {
        "is-glob": "^4.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/global-dirs": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/global-dirs/-/global-dirs-3.0.0.tgz",
      "integrity": "sha512-v8ho2DS5RiCjftj1nD9NmnfaOzTdud7RRnVd9kFNOjqZbISlx5DQ+OrTkywgd0dIt7oFCvKetZSHoHcP3sDdiA==",
      "dev": true,
      "dependencies": {
        "ini": "2.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/globby": {
      "version": "11.1.0",
      "resolved": "https://registry.npmjs.org/globby/-/globby-11.1.0.tgz",
      "integrity": "sha512-jhIXaOzy1sb8IyocaruWSn1TjmnBVs8Ayhcy83rmxNJ8q2uWKCAj3CnJY+KpGSXCueAPc0i05kVvVKtP1t9S3g==",
      "dev": true,
      "dependencies": {
        "array-union": "^2.1.0",
        "dir-glob": "^3.0.1",
        "fast-glob": "^3.2.9",
        "ignore": "^5.2.0",
        "merge2": "^1.4.1",
        "slash": "^3.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/got": {
      "version": "11.8.3",
      "resolved": "https://registry.npmjs.org/got/-/got-11.8.3.tgz",
      "integrity": "sha512-7gtQ5KiPh1RtGS9/Jbv1ofDpBFuq42gyfEib+ejaRBJuj/3tQFeR5+gw57e4ipaU8c/rCjvX6fkQz2lyDlGAOg==",
      "dev": true,
      "dependencies": {
        "@sindresorhus/is": "^4.0.0",
        "@szmarczak/http-timer": "^4.0.5",
        "@types/cacheable-request": "^6.0.1",
        "@types/responselike": "^1.0.0",
        "cacheable-lookup": "^5.0.3",
        "cacheable-request": "^7.0.2",
        "decompress-response": "^6.0.0",
        "http2-wrapper": "^1.0.0-beta.5.2",
        "lowercase-keys": "^2.0.0",
        "p-cancelable": "^2.0.0",
        "responselike": "^2.0.0"
      },
      "engines": {
        "node": ">=10.19.0"
      },
      "funding": {
        "url": "https://github.com/sindresorhus/got?sponsor=1"
      }
    },
    "node_modules/graceful-fs": {
      "version": "4.2.9",
      "resolved": "https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.2.9.tgz",
      "integrity": "sha512-NtNxqUcXgpW2iMrfqSfR73Glt39K+BLwWsPs94yR63v45T0Wbej7eRmL5cWfwEgqXnmjQp3zaJTshdRW/qC2ZQ==",
      "dev": true
    },
    "node_modules/has": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/has/-/has-1.0.3.tgz",
      "integrity": "sha512-f2dvO0VU6Oej7RkWJGrehjbzMAjFp5/VKPp5tTpWIV4JHHZK1/BxbFRtf/siA2SWTe09caDmVtYYzWEIbBS4zw==",
      "dev": true,
      "dependencies": {
        "function-bind": "^1.1.1"
      },
      "engines": {
        "node": ">= 0.4.0"
      }
    },
    "node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "dev": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/has-yarn": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/has-yarn/-/has-yarn-2.1.0.tgz",
      "integrity": "sha512-UqBRqi4ju7T+TqGNdqAO0PaSVGsDGJUBQvk9eUWNGRY1CFGDzYhLWoM7JQEemnlvVcv/YEmc2wNW8BC24EnUsw==",
      "dev": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/hosted-git-info": {
      "version": "2.8.9",
      "resolved": "https://registry.npmjs.org/hosted-git-info/-/hosted-git-info-2.8.9.tgz",
      "integrity": "sha512-mxIDAb9Lsm6DoOJ7xH+5+X4y1LU/4Hi50L9C5sIswK3JzULS4bwk1FvjdBgvYR4bzT4tuUQiC15FE2f5HbLvYw==",
      "dev": true
    },
    "node_modules/http-cache-semantics": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/http-cache-semantics/-/http-cache-semantics-4.1.0.tgz",
      "integrity": "sha512-carPklcUh7ROWRK7Cv27RPtdhYhUsela/ue5/jKzjegVvXDqM2ILE9Q2BGn9JZJh1g87cp56su/FgQSzcWS8cQ==",
      "dev": true
    },
    "node_modules/http-errors": {
      "version": "1.8.1",
      "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-1.8.1.tgz",
      "integrity": "sha512-Kpk9Sm7NmI+RHhnj6OIWDI1d6fIoFAtFt9RLaTMRlg/8w49juAStsrBgp0Dp4OdxdVbRIeKhtCUvoi/RuAhO4g==",
      "dev": true,
      "dependencies": {
        "depd": "~1.1.2",
        "inherits": "2.0.4",
        "setprototypeof": "1.2.0",
        "statuses": ">= 1.5.0 < 2",
        "toidentifier": "1.0.1"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/http-errors/node_modules/depd": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/depd/-/depd-1.1.2.tgz",
      "integrity": "sha1-m81S4UwJd2PnSbJ0xDRu0uVgtak=",
      "dev": true,
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/http2-wrapper": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/http2-wrapper/-/http2-wrapper-1.0.3.tgz",
      "integrity": "sha512-V+23sDMr12Wnz7iTcDeJr3O6AIxlnvT/bmaAAAP/Xda35C90p9599p0F1eHR/N1KILWSoWVAiOMFjBBXaXSMxg==",
      "dev": true,
      "dependencies": {
        "quick-lru": "^5.1.1",
        "resolve-alpn": "^1.0.0"
      },
      "engines": {
        "node": ">=10.19.0"
      }
    },
    "node_modules/human-signals": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/human-signals/-/human-signals-2.1.0.tgz",
      "integrity": "sha512-B4FFZ6q/T2jhhksgkbEW3HBvWIfDW85snkQgawt07S7J5QXTk6BkNV+0yAeZrM5QpMAdYlocGoljn0sJ/WQkFw==",
      "dev": true,
      "engines": {
        "node": ">=10.17.0"
      }
    },
    "node_modules/ieee754": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/ieee754/-/ieee754-1.2.1.tgz",
      "integrity": "sha512-dcyqhDvX1C46lXZcVqCpK+FtMRQVdIMN6/Df5js2zouUsqG7I6sFxitIC+7KYK29KdXOLHdu9zL4sFnoVQnqaA==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ]
    },
    "node_modules/ignore": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/ignore/-/ignore-5.2.0.tgz",
      "integrity": "sha512-CmxgYGiEPCLhfLnpPp1MoRmifwEIOgjcHXxOBjv7mY96c+eWScsOP9c112ZyLdWHi0FxHjI+4uVhKYp/gcdRmQ==",
      "dev": true,
      "engines": {
        "node": ">= 4"
      }
    },
    "node_modules/ignore-by-default": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ignore-by-default/-/ignore-by-default-2.0.0.tgz",
      "integrity": "sha512-+mQSgMRiFD3L3AOxLYOCxjIq4OnAmo5CIuC+lj5ehCJcPtV++QacEV7FdpzvYxH6DaOySWzQU6RR0lPLy37ckA==",
      "dev": true,
      "engines": {
        "node": ">=10 <11 || >=12 <13 || >=14"
      }
    },
    "node_modules/import-lazy": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/import-lazy/-/import-lazy-2.1.0.tgz",
      "integrity": "sha1-BWmOPUXIjo1+nZLLBYTnfwlvPkM=",
      "dev": true,
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/import-local": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/import-local/-/import-local-3.1.0.tgz",
      "integrity": "sha512-ASB07uLtnDs1o6EHjKpX34BKYDSqnFerfTOJL2HvMqF70LnxpjkzDB8J44oT9pu4AMPkQwf8jl6szgvNd2tRIg==",
      "dev": true,
      "dependencies": {
        "pkg-dir": "^4.2.0",
        "resolve-cwd": "^3.0.0"
      },
      "bin": {
        "import-local-fixture": "fixtures/cli.js"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/imurmurhash": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/imurmurhash/-/imurmurhash-0.1.4.tgz",
      "integrity": "sha1-khi5srkoojixPcT7a21XbyMUU+o=",
      "dev": true,
      "engines": {
        "node": ">=0.8.19"
      }
    },
    "node_modules/indent-string": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/indent-string/-/indent-string-4.0.0.tgz",
      "integrity": "sha512-EdDDZu4A2OyIK7Lr/2zG+w5jmbuk1DVBnEwREQvBzspBJkCEbRa8GxU1lghYcaGJCnRWibjDXlq779X1/y5xwg==",
      "dev": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/inflight": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz",
      "integrity": "sha1-Sb1jMdfQLQwJvJEKEHW6gWW1bfk=",
      "dev": true,
      "dependencies": {
        "once": "^1.3.0",
        "wrappy": "1"
      }
    },
    "node_modules/inherits": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==",
      "dev": true
    },
    "node_modules/ini": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ini/-/ini-2.0.0.tgz",
      "integrity": "sha512-7PnF4oN3CvZF23ADhA5wRaYEQpJ8qygSkbtTXWBeXWXmEVRXK+1ITciHWwHhsjv1TmW0MgacIv6hEi5pX5NQdA==",
      "dev": true,
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/irregular-plurals": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/irregular-plurals/-/irregular-plurals-3.3.0.tgz",
      "integrity": "sha512-MVBLKUTangM3EfRPFROhmWQQKRDsrgI83J8GS3jXy+OwYqiR2/aoWndYQ5416jLE3uaGgLH7ncme3X9y09gZ3g==",
      "dev": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-arrayish": {
      "version": "0.2.1",
      "resolved": "https://registry.npmjs.org/is-arrayish/-/is-arrayish-0.2.1.tgz",
      "integrity": "sha1-d8mYQFJ6qOyxqLppe4BkWnqSap0=",
      "dev": true
    },
    "node_modules/is-binary-path": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/is-binary-path/-/is-binary-path-2.1.0.tgz",
      "integrity": "sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==",
      "dev": true,
      "dependencies": {
        "binary-extensions": "^2.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-ci": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/is-ci/-/is-ci-2.0.0.tgz",
      "integrity": "sha512-YfJT7rkpQB0updsdHLGWrvhBJfcfzNNawYDNIyQXJz0IViGf75O8EBPKSdvw2rF+LGCsX4FZ8tcr3b19LcZq4w==",
      "dev": true,
      "dependencies": {
        "ci-info": "^2.0.0"
      },
      "bin": {
        "is-ci": "bin.js"
      }
    },
    "node_modules/is-core-module": {
      "version": "2.8.1",
      "resolved": "https://registry.npmjs.org/is-core-module/-/is-core-module-2.8.1.tgz",
      "integrity": "sha512-SdNCUs284hr40hFTFP6l0IfZ/RSrMXF3qgoRHd3/79unUTvrFO/JoXwkGm+5J/Oe3E/b5GsnG330uUNgRpu1PA==",
      "dev": true,
      "dependencies": {
        "has": "^1.0.3"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-error": {
      "version": "2.2.2",
      "resolved": "https://registry.npmjs.org/is-error/-/is-error-2.2.2.tgz",
      "integrity": "sha512-IOQqts/aHWbiisY5DuPJQ0gcbvaLFCa7fBa9xoLfxBZvQ+ZI/Zh9xoI7Gk+G64N0FdK4AbibytHht2tWgpJWLg==",
      "dev": true
    },
    "node_modules/is-extglob": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
      "integrity": "sha1-qIwCU1eR8C7TfHahueqXc8gz+MI=",
      "dev": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-fullwidth-code-point": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
      "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
      "dev": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-glob": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
      "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
      "dev": true,
      "dependencies": {
        "is-extglob": "^2.1.1"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-installed-globally": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/is-installed-globally/-/is-installed-globally-0.4.0.tgz",
      "integrity": "sha512-iwGqO3J21aaSkC7jWnHP/difazwS7SFeIqxv6wEtLU8Y5KlzFTjyqcSIT0d8s4+dDhKytsk9PJZ2BkS5eZwQRQ==",
      "dev": true,
      "dependencies": {
        "global-dirs": "^3.0.0",
        "is-path-inside": "^3.0.2"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/is-interactive": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/is-interactive/-/is-interactive-1.0.0.tgz",
      "integrity": "sha512-2HvIEKRoqS62guEC+qBjpvRubdX910WCMuJTZ+I9yvqKU2/12eSL549HMwtabb4oupdj2sMP50k+XJfB/8JE6w==",
      "dev": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-npm": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/is-npm/-/is-npm-5.0.0.tgz",
      "integrity": "sha512-WW/rQLOazUq+ST/bCAVBp/2oMERWLsR7OrKyt052dNDk4DHcDE0/7QSXITlmi+VBcV13DfIbysG3tZJm5RfdBA==",
      "dev": true,
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/is-number": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",
      "integrity": "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==",
      "dev": true,
      "engines": {
        "node": ">=0.12.0"
      }
    },
    "node_modules/is-obj": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/is-obj/-/is-obj-2.0.0.tgz",
      "integrity": "sha512-drqDG3cbczxxEJRoOXcOjtdp1J/lyp1mNn0xaznRs8+muBhgQcrnbspox5X5fOw0HnMnbfDzvnEMEtqDEJEo8w==",
      "dev": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-path-cwd": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/is-path-cwd/-/is-path-cwd-2.2.0.tgz",
      "integrity": "sha512-w942bTcih8fdJPJmQHFzkS76NEP8Kzzvmw92cXsazb8intwLqPibPPdXf4ANdKV3rYMuuQYGIWtvz9JilB3NFQ==",
      "dev": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/is-path-inside": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/is-path-inside/-/is-path-inside-3.0.3.tgz",
      "integrity": "sha512-Fd4gABb+ycGAmKou8eMftCupSir5lRxqf4aD/vd0cD2qc4HL07OjCeuHMr8Ro4CoMaeCKDB0/ECBOVWjTwUvPQ==",
      "dev": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-plain-object": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/is-plain-object/-/is-plain-object-5.0.0.tgz",
      "integrity": "sha512-VRSzKkbMm5jMDoKLbltAkFQ5Qr7VDiTFGXxYFXXowVj387GeGNOCsOH6Msy00SGZ3Fp84b1Naa1psqgcCIEP5Q==",
      "dev": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-promise": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/is-promise/-/is-promise-4.0.0.tgz",
      "integrity": "sha512-hvpoI6korhJMnej285dSg6nu1+e6uxs7zG3BYAm5byqDsgJNWwxzM6z6iZiAgQR4TJ30JmBTOwqZUw3WlyH3AQ==",
      "dev": true
    },
    "node_modules/is-stream": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/is-stream/-/is-stream-2.0.1.tgz",
      "integrity": "sha512-hFoiJiTl63nn+kstHGBtewWSKnQLpyb155KHheA1l39uvtO9nWIop1p3udqPcUd/xbF1VLMO4n7OI6p7RbngDg==",
      "dev": true,
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/is-typedarray": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/is-typedarray/-/is-typedarray-1.0.0.tgz",
      "integrity": "sha1-5HnICFjfDBsR3dppQPlgEfzaSpo=",
      "dev": true
    },
    "node_modules/is-unicode-supported": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/is-unicode-supported/-/is-unicode-supported-0.1.0.tgz",
      "integrity": "sha512-knxG2q4UC3u8stRGyAVJCOdxFmv5DZiRcdlIaAQXAbSfJya+OhopNotLQrstBhququ4ZpuKbDc/8S6mgXgPFPw==",
      "dev": true,
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/is-yarn-global": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/is-yarn-global/-/is-yarn-global-0.3.0.tgz",
      "integrity": "sha512-VjSeb/lHmkoyd8ryPVIKvOCn4D1koMqY+vqyjjUfc3xyKtP4dYOxM44sZrnqQSzSds3xyOrUTLTC9LVCVgLngw==",
      "dev": true
    },
    "node_modules/isexe": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
      "integrity": "sha1-6PvzdNxVb/iUehDcsFctYz8s+hA=",
      "dev": true
    },
    "node_modules/js-sha256": {
      "version": "0.9.0",
      "resolved": "https://registry.npmjs.org/js-sha256/-/js-sha256-0.9.0.tgz",
      "integrity": "sha512-sga3MHh9sgQN2+pJ9VYZ+1LPwXOxuBJBA5nrR5/ofPfuiJBE2hnjsaN8se8JznOmGLN2p49Pe5U/ttafcs/apA==",
      "dev": true
    },
    "node_modules/js-string-escape": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/js-string-escape/-/js-string-escape-1.0.1.tgz",
      "integrity": "sha1-4mJbrbwNZ8dTPp7cEGjFh65BN+8=",
      "dev": true,
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/js-tokens": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
      "integrity": "sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==",
      "dev": true
    },
    "node_modules/js-yaml": {
      "version": "3.14.1",
      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-3.14.1.tgz",
      "integrity": "sha512-okMH7OXXJ7YrN9Ok3/SXrnu4iX9yOk+25nqX4imS2npuvTYDmo/QEZoqwZkYaIDk3jVvBOTOIEgEhaLOynBS9g==",
      "dev": true,
      "dependencies": {
        "argparse": "^1.0.7",
        "esprima": "^4.0.0"
      },
      "bin": {
        "js-yaml": "bin/js-yaml.js"
      }
    },
    "node_modules/json-buffer": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/json-buffer/-/json-buffer-3.0.1.tgz",
      "integrity": "sha512-4bV5BfR2mqfQTJm+V5tPPdf+ZpuhiIvTuAB5g8kcrXOZpTT/QwwVRWBywX1ozr6lEuPdbHxwaJlm9G6mI2sfSQ==",
      "dev": true
    },
    "node_modules/json-parse-better-errors": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/json-parse-better-errors/-/json-parse-better-errors-1.0.2.tgz",
      "integrity": "sha512-mrqyZKfX5EhL7hvqcV6WG1yYjnjeuYDzDhhcAAUrq8Po85NBQBJP+ZDUT75qZQ98IkUoBqdkExkukOU7Ts2wrw==",
      "dev": true
    },
    "node_modules/json-parse-even-better-errors": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/json-parse-even-better-errors/-/json-parse-even-better-errors-2.3.1.tgz",
      "integrity": "sha512-xyFwyhro/JEof6Ghe2iz2NcXoj2sloNsWr/XsERDK/oiPCfaNhl5ONfp+jQdAZRQQ0IJWNzH9zIZF7li91kh2w==",
      "dev": true
    },
    "node_modules/jsonfile": {
      "version": "6.1.0",
      "resolved": "https://registry.npmjs.org/jsonfile/-/jsonfile-6.1.0.tgz",
      "integrity": "sha512-5dgndWOriYSm5cnYaJNhalLNDKOqFwyDB/rr1E9ZsGciGvKPs8R2xYGCacuf3z6K1YKDz182fd+fY3cn3pMqXQ==",
      "dev": true,
      "dependencies": {
        "universalify": "^2.0.0"
      },
      "optionalDependencies": {
        "graceful-fs": "^4.1.6"
      }
    },
    "node_modules/keyv": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/keyv/-/keyv-4.1.1.tgz",
      "integrity": "sha512-tGv1yP6snQVDSM4X6yxrv2zzq/EvpW+oYiUz6aueW1u9CtS8RzUQYxxmFwgZlO2jSgCxQbchhxaqXXp2hnKGpQ==",
      "dev": true,
      "dependencies": {
        "json-buffer": "3.0.1"
      }
    },
    "node_modules/latest-version": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/latest-version/-/latest-version-5.1.0.tgz",
      "integrity": "sha512-weT+r0kTkRQdCdYCNtkMwWXQTMEswKrFBkm4ckQOMVhhqhIMI1UT2hMj+1iigIhgSZm5gTmrRXBNoGUgaTY1xA==",
      "dev": true,
      "dependencies": {
        "package-json": "^6.3.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/lines-and-columns": {
      "version": "1.2.4",
      "resolved": "https://registry.npmjs.org/lines-and-columns/-/lines-and-columns-1.2.4.tgz",
      "integrity": "sha512-7ylylesZQ/PV29jhEDl3Ufjo6ZX7gCqJr5F7PKrqc93v7fzSymt1BpwEU8nAUXs8qzzvqhbjhK5QZg6Mt/HkBg==",
      "dev": true
    },
    "node_modules/load-json-file": {
      "version": "5.3.0",
      "resolved": "https://registry.npmjs.org/load-json-file/-/load-json-file-5.3.0.tgz",
      "integrity": "sha512-cJGP40Jc/VXUsp8/OrnyKyTZ1y6v/dphm3bioS+RrKXjK2BB6wHUd6JptZEFDGgGahMT+InnZO5i1Ei9mpC8Bw==",
      "dev": true,
      "dependencies": {
        "graceful-fs": "^4.1.15",
        "parse-json": "^4.0.0",
        "pify": "^4.0.1",
        "strip-bom": "^3.0.0",
        "type-fest": "^0.3.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/locate-path": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-3.0.0.tgz",
      "integrity": "sha512-7AO748wWnIhNqAuaty2ZWHkQHRSNfPVIsPIfwEOWO22AmaoVrWavlOcMR5nzTLNYvp36X220/maaRsrec1G65A==",
      "dev": true,
      "dependencies": {
        "p-locate": "^3.0.0",
        "path-exists": "^3.0.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/lodash": {
      "version": "4.17.21",
      "resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz",
      "integrity": "sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg==",
      "dev": true
    },
    "node_modules/log-symbols": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/log-symbols/-/log-symbols-4.1.0.tgz",
      "integrity": "sha512-8XPvpAA8uyhfteu8pIvQxpJZ7SYYdpUivZpGy6sFsBuKRY/7rQGavedeB8aK+Zkyq6upMFVL/9AW6vOYzfRyLg==",
      "dev": true,
      "dependencies": {
        "chalk": "^4.1.0",
        "is-unicode-supported": "^0.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/lowercase-keys": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/lowercase-keys/-/lowercase-keys-2.0.0.tgz",
      "integrity": "sha512-tqNXrS78oMOE73NMxK4EMLQsQowWf8jKooH9g7xPavRT706R6bkQJ6DY2Te7QukaZsulxa30wQ7bk0pm4XiHmA==",
      "dev": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/lru-cache": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-6.0.0.tgz",
      "integrity": "sha512-Jo6dJ04CmSjuznwJSS3pUeWmd/H0ffTlkXXgwZi+eq1UCmqQwCh+eLsYOYCwY991i2Fah4h1BEMCx4qThGbsiA==",
      "dev": true,
      "dependencies": {
        "yallist": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/make-dir": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/make-dir/-/make-dir-3.1.0.tgz",
      "integrity": "sha512-g3FeP20LNwhALb/6Cz6Dd4F2ngze0jz7tbzrD2wAV+o9FeNHe4rL+yK2md0J/fiSf1sa1ADhXqi5+oVwOM/eGw==",
      "dev": true,
      "dependencies": {
        "semver": "^6.0.0"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/make-dir/node_modules/semver": {
      "version": "6.3.0",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.0.tgz",
      "integrity": "sha512-b39TBaTSfV6yBrapU89p5fKekE2m/NwnDocOVruQFS1/veMgdzuPcnOM34M6CwxW8jH/lxEa5rBoDeUwu5HHTw==",
      "dev": true,
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/make-error": {
      "version": "1.3.6",
      "resolved": "https://registry.npmjs.org/make-error/-/make-error-1.3.6.tgz",
      "integrity": "sha512-s8UhlNe7vPKomQhC1qFelMokr/Sc3AgNbso3n74mVPA5LTZwkB9NlXf4XPamLxJE8h0gh73rM94xvwRT2CVInw==",
      "dev": true
    },
    "node_modules/map-age-cleaner": {
      "version": "0.1.3",
      "resolved": "https://registry.npmjs.org/map-age-cleaner/-/map-age-cleaner-0.1.3.tgz",
      "integrity": "sha512-bJzx6nMoP6PDLPBFmg7+xRKeFZvFboMrGlxmNj9ClvX53KrmvM5bXFXEWjbz4cz1AFn+jWJ9z/DJSz7hrs0w3w==",
      "dev": true,
      "dependencies": {
        "p-defer": "^1.0.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/matcher": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/matcher/-/matcher-3.0.0.tgz",
      "integrity": "sha512-OkeDaAZ/bQCxeFAozM55PKcKU0yJMPGifLwV4Qgjitu+5MoAfSQN4lsLJeXZ1b8w0x+/Emda6MZgXS1jvsapng==",
      "dev": true,
      "dependencies": {
        "escape-string-regexp": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/md5-hex": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/md5-hex/-/md5-hex-3.0.1.tgz",
      "integrity": "sha512-BUiRtTtV39LIJwinWBjqVsU9xhdnz7/i889V859IBFpuqGAj6LuOvHv5XLbgZ2R7ptJoJaEcxkv88/h25T7Ciw==",
      "dev": true,
      "dependencies": {
        "blueimp-md5": "^2.10.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/mem": {
      "version": "8.1.1",
      "resolved": "https://registry.npmjs.org/mem/-/mem-8.1.1.tgz",
      "integrity": "sha512-qFCFUDs7U3b8mBDPyz5EToEKoAkgCzqquIgi9nkkR9bixxOVOre+09lbuH7+9Kn2NFpm56M3GUWVbU2hQgdACA==",
      "dev": true,
      "dependencies": {
        "map-age-cleaner": "^0.1.3",
        "mimic-fn": "^3.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sindresorhus/mem?sponsor=1"
      }
    },
    "node_modules/merge-stream": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/merge-stream/-/merge-stream-2.0.0.tgz",
      "integrity": "sha512-abv/qOcuPfk3URPfDzmZU1LKmuw8kT+0nIHvKrKgFrwifol/doWcdA4ZqsWQ8ENrFKkd67Mfpo/LovbIUsbt3w==",
      "dev": true
    },
    "node_modules/merge2": {
      "version": "1.4.1",
      "resolved": "https://registry.npmjs.org/merge2/-/merge2-1.4.1.tgz",
      "integrity": "sha512-8q7VEgMJW4J8tcfVPy8g09NcQwZdbwFEqhe/WZkoIzjn/3TGDwtOCYtXGxA3O8tPzpczCCDgv+P2P5y00ZJOOg==",
      "dev": true,
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/micromatch": {
      "version": "4.0.4",
      "resolved": "https://registry.npmjs.org/micromatch/-/micromatch-4.0.4.tgz",
      "integrity": "sha512-pRmzw/XUcwXGpD9aI9q/0XOwLNygjETJ8y0ao0wdqprrzDa4YnxLcz7fQRZr8voh8V10kGhABbNcHVk5wHgWwg==",
      "dev": true,
      "dependencies": {
        "braces": "^3.0.1",
        "picomatch": "^2.2.3"
      },
      "engines": {
        "node": ">=8.6"
      }
    },
    "node_modules/mimic-fn": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/mimic-fn/-/mimic-fn-3.1.0.tgz",
      "integrity": "sha512-Ysbi9uYW9hFyfrThdDEQuykN4Ey6BuwPD2kpI5ES/nFTDn/98yxYNLZJcgUAKPT/mcrLLKaGzJR9YVxJrIdASQ==",
      "dev": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/mimic-response": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/mimic-response/-/mimic-response-1.0.1.tgz",
      "integrity": "sha512-j5EctnkH7amfV/q5Hgmoal1g2QHFJRraOtmx0JpIqkxhBhI/lJSl1nMpQ45hVarwNETOoWEimndZ4QK0RHxuxQ==",
      "dev": true,
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/minimatch": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
      "dev": true,
      "dependencies": {
        "brace-expansion": "^1.1.7"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/minimist": {
      "version": "1.2.5",
      "resolved": "https://registry.npmjs.org/minimist/-/minimist-1.2.5.tgz",
      "integrity": "sha512-FM9nNUYrRBAELZQT3xeZQ7fmMOBg6nWNmJKTcgsJeaLstP/UODVpGsr5OhXhhXg6f+qtJ8uiZ+PUxkDWcgIXLw==",
      "dev": true
    },
    "node_modules/minipass": {
      "version": "3.1.6",
      "resolved": "https://registry.npmjs.org/minipass/-/minipass-3.1.6.tgz",
      "integrity": "sha512-rty5kpw9/z8SX9dmxblFA6edItUmwJgMeYDZRrwlIVN27i8gysGbznJwUggw2V/FVqFSDdWy040ZPS811DYAqQ==",
      "dev": true,
      "dependencies": {
        "yallist": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/minizlib": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/minizlib/-/minizlib-2.1.2.tgz",
      "integrity": "sha512-bAxsR8BVfj60DWXHE3u30oHzfl4G7khkSuPW+qvpd7jFRHm7dLxOjUk1EHACJ/hxLY8phGJ0YhYHZo7jil7Qdg==",
      "dev": true,
      "dependencies": {
        "minipass": "^3.0.0",
        "yallist": "^4.0.0"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/mkdirp": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/mkdirp/-/mkdirp-1.0.4.tgz",
      "integrity": "sha512-vVqVZQyf3WLx2Shd0qJ9xuvqgAyKPLAiqITEtqW0oIUjzo3PePDd6fW9iFz30ef7Ysp/oiWqbhszeGWW2T6Gzw==",
      "dev": true,
      "bin": {
        "mkdirp": "bin/cmd.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "dev": true
    },
    "node_modules/mustache": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/mustache/-/mustache-4.2.0.tgz",
      "integrity": "sha512-71ippSywq5Yb7/tVYyGbkBggbU8H3u5Rz56fH60jGFgr8uHwxs+aSKeqmluIVzM0m0kB7xQjKS6qPfd0b2ZoqQ==",
      "dev": true,
      "bin": {
        "mustache": "bin/mustache"
      }
    },
    "node_modules/near-api-js": {
      "version": "0.43.1",
      "resolved": "https://registry.npmjs.org/near-api-js/-/near-api-js-0.43.1.tgz",
      "integrity": "sha512-bgFuboD/a3eintaWqWMN9oWcGHkxbrKiJhxkJwHmwJrYx49y9QvWwEtoxeHSjKskJHUVXGKvaYRsc9XirrJ5JQ==",
      "dev": true,
      "dependencies": {
        "bn.js": "5.2.0",
        "borsh": "^0.6.0",
        "bs58": "^4.0.0",
        "depd": "^2.0.0",
        "error-polyfill": "^0.1.3",
        "http-errors": "^1.7.2",
        "js-sha256": "^0.9.0",
        "mustache": "^4.0.0",
        "node-fetch": "^2.6.1",
        "text-encoding-utf-8": "^1.0.2",
        "tweetnacl": "^1.0.1"
      }
    },
    "node_modules/near-api-js/node_modules/borsh": {
      "version": "0.6.0",
      "resolved": "https://registry.npmjs.org/borsh/-/borsh-0.6.0.tgz",
      "integrity": "sha512-sl5k89ViqsThXQpYa9XDtz1sBl3l1lI313cFUY1HKr+wvMILnb+58xpkqTNrYbelh99dY7K8usxoCusQmqix9Q==",
      "dev": true,
      "dependencies": {
        "bn.js": "^5.2.0",
        "bs58": "^4.0.0",
        "text-encoding-utf-8": "^1.0.2"
      }
    },
    "node_modules/near-sandbox": {
      "version": "0.0.8",
      "resolved": "https://registry.npmjs.org/near-sandbox/-/near-sandbox-0.0.8.tgz",
      "integrity": "sha512-3JrDcA9rI+wA9lWqfOtSovGxBE/TDZL011TLk+jz5wGezVbm7m3tDh/zCfq+++eFyJ3ZbGkG0KF6+trMQJFPQQ==",
      "dev": true,
      "hasInstallScript": true,
      "dependencies": {
        "got": "^11.8.2",
        "tar": "^6.1.0"
      },
      "bin": {
        "near-sandbox": "run.js",
        "sandbox": "run.js"
      }
    },
    "node_modules/near-units": {
      "version": "0.1.9",
      "resolved": "https://registry.npmjs.org/near-units/-/near-units-0.1.9.tgz",
      "integrity": "sha512-xiuBjpNsi+ywiu7P6iWRZdgFm7iCr/cfWlVO6+e5uaAqH4mE1rrurElyrL91llNDSnMwogd9XmlZOw5KbbHNsA==",
      "dev": true,
      "dependencies": {
        "bn.js": "^5.2.0"
      },
      "bin": {
        "near-units": "dist/cli.js"
      }
    },
    "node_modules/near-workspaces": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/near-workspaces/-/near-workspaces-1.0.0.tgz",
      "integrity": "sha512-TiF3Qk7vpm6twqSxwR1UhVpXtXsUGLr2DrrlRu/DvIstMRI6GOnIWvx9FlvM+x/ERiivACi7s2IWd5hyNJ5YrA==",
      "dev": true,
      "hasInstallScript": true,
      "dependencies": {
        "base64url": "^3.0.1",
        "bn.js": "^5.2.0",
        "borsh": "^0.5.0",
        "bs58": "^4.0.1",
        "callsites": "^4.0.0",
        "fs-extra": "^10.0.0",
        "js-sha256": "^0.9.0",
        "near-api-js": "^0.43.1",
        "near-sandbox": "^0.0.8",
        "near-units": "^0.1.9",
        "node-port-check": "^2.0.1",
        "promisify-child-process": "^4.1.1",
        "pure-uuid": "^1.6.2",
        "rimraf": "^3.0.2",
        "temp-dir": "^2.0.0"
      },
      "engines": {
        "node": ">= 14.0.0",
        "npm": ">= 6.0.0"
      }
    },
    "node_modules/near-workspaces-ava": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/near-workspaces-ava/-/near-workspaces-ava-1.0.0.tgz",
      "integrity": "sha512-CFbQ0CLFEP8p7gKlYwVf9nVV8WvP5qaZDiNX6oHyHKng8wJ9uEw32wlv/z8tP0MgJVHeFq5jg8Jm+VG+q0O5Bw==",
      "dev": true,
      "hasInstallScript": true,
      "dependencies": {
        "@ava/typescript": "^2.0.0",
        "@types/bn.js": "^5.1.0",
        "@types/node": "^16.4.10",
        "ava": "3.15.0",
        "near-workspaces": "^1.0.0",
        "ts-node": "^10.1.0",
        "typescript": "^4.3.5"
      },
      "bin": {
        "near-workspaces-ava": "scripts/cli.js"
      },
      "engines": {
        "node": ">= 14.0.0",
        "npm": ">= 6.0.0"
      }
    },
    "node_modules/near-workspaces/node_modules/callsites": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/callsites/-/callsites-4.0.0.tgz",
      "integrity": "sha512-y3jRROutgpKdz5vzEhWM34TidDU8vkJppF8dszITeb1PQmSqV3DTxyV8G/lyO/DNvtE1YTedehmw9MPZsCBHxQ==",
      "dev": true,
      "engines": {
        "node": ">=12.20"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/node-fetch": {
      "version": "2.6.7",
      "resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-2.6.7.tgz",
      "integrity": "sha512-ZjMPFEfVx5j+y2yF35Kzx5sF7kDzxuDj6ziH4FFbOp87zKDZNx8yExJIb05OGF4Nlt9IHFIMBkRl41VdvcNdbQ==",
      "dev": true,
      "dependencies": {
        "whatwg-url": "^5.0.0"
      },
      "engines": {
        "node": "4.x || >=6.0.0"
      },
      "peerDependencies": {
        "encoding": "^0.1.0"
      },
      "peerDependenciesMeta": {
        "encoding": {
          "optional": true
        }
      }
    },
    "node_modules/node-port-check": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/node-port-check/-/node-port-check-2.0.1.tgz",
      "integrity": "sha512-PV1tj5OPbWwxvhPcChXxwCIKl/IfVEdPP4u/gQz2lao/VGoeIUXb/4U72KSHLZpTVBmgTnMm0me7yR0wUsIuPg==",
      "dev": true
    },
    "node_modules/normalize-package-data": {
      "version": "2.5.0",
      "resolved": "https://registry.npmjs.org/normalize-package-data/-/normalize-package-data-2.5.0.tgz",
      "integrity": "sha512-/5CMN3T0R4XTj4DcGaexo+roZSdSFW/0AOOTROrjxzCG1wrWXEsGbRKevjlIL+ZDE4sZlJr5ED4YW0yqmkK+eA==",
      "dev": true,
      "dependencies": {
        "hosted-git-info": "^2.1.4",
        "resolve": "^1.10.0",
        "semver": "2 || 3 || 4 || 5",
        "validate-npm-package-license": "^3.0.1"
      }
    },
    "node_modules/normalize-package-data/node_modules/semver": {
      "version": "5.7.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-5.7.1.tgz",
      "integrity": "sha512-sauaDf/PZdVgrLTNYHRtpXa1iRiKcaebiKQ1BJdpQlWH2lCvexQdX55snPFyK7QzpudqbCI0qXFfOasHdyNDGQ==",
      "dev": true,
      "bin": {
        "semver": "bin/semver"
      }
    },
    "node_modules/normalize-path": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/normalize-path/-/normalize-path-3.0.0.tgz",
      "integrity": "sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==",
      "dev": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/normalize-url": {
      "version": "6.1.0",
      "resolved": "https://registry.npmjs.org/normalize-url/-/normalize-url-6.1.0.tgz",
      "integrity": "sha512-DlL+XwOy3NxAQ8xuC0okPgK46iuVNAK01YN7RueYBqqFeGsBjV9XmCAzAdgt+667bCl5kPh9EqKKDwnaPG1I7A==",
      "dev": true,
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/npm-run-path": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/npm-run-path/-/npm-run-path-4.0.1.tgz",
      "integrity": "sha512-S48WzZW777zhNIrn7gxOlISNAqi9ZC/uQFnRdbeIHhZhCA6UqpkOT8T1G7BvfdgP4Er8gF4sUbaS0i7QvIfCWw==",
      "dev": true,
      "dependencies": {
        "path-key": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/o3": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/o3/-/o3-1.0.3.tgz",
      "integrity": "sha1-GSzod6iC36Z1HwQSqGX6+y2h2sA=",
      "dev": true,
      "dependencies": {
        "capability": "^0.2.5"
      }
    },
    "node_modules/once": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
      "integrity": "sha1-WDsap3WWHUsROsF9nFC6753Xa9E=",
      "dev": true,
      "dependencies": {
        "wrappy": "1"
      }
    },
    "node_modules/onetime": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/onetime/-/onetime-5.1.2.tgz",
      "integrity": "sha512-kbpaSSGJTWdAY5KPVeMOKXSrPtr8C8C7wodJbcsd51jRnmD+GZu8Y0VoU6Dm5Z4vWr0Ig/1NKuWRKf7j5aaYSg==",
      "dev": true,
      "dependencies": {
        "mimic-fn": "^2.1.0"
      },
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/onetime/node_modules/mimic-fn": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/mimic-fn/-/mimic-fn-2.1.0.tgz",
      "integrity": "sha512-OqbOk5oEQeAZ8WXWydlu9HJjz9WVdEIvamMCcXmuqUYjTknH/sqsWvhQ3vgwKFRR1HpjvNBKQ37nbJgYzGqGcg==",
      "dev": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/ora": {
      "version": "5.4.1",
      "resolved": "https://registry.npmjs.org/ora/-/ora-5.4.1.tgz",
      "integrity": "sha512-5b6Y85tPxZZ7QytO+BQzysW31HJku27cRIlkbAXaNx+BdcVi+LlRFmVXzeF6a7JCwJpyw5c4b+YSVImQIrBpuQ==",
      "dev": true,
      "dependencies": {
        "bl": "^4.1.0",
        "chalk": "^4.1.0",
        "cli-cursor": "^3.1.0",
        "cli-spinners": "^2.5.0",
        "is-interactive": "^1.0.0",
        "is-unicode-supported": "^0.1.0",
        "log-symbols": "^4.1.0",
        "strip-ansi": "^6.0.0",
        "wcwidth": "^1.0.1"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/p-cancelable": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/p-cancelable/-/p-cancelable-2.1.1.tgz",
      "integrity": "sha512-BZOr3nRQHOntUjTrH8+Lh54smKHoHyur8We1V8DSMVrl5A2malOOwuJRnKRDjSnkoeBh4at6BwEnb5I7Jl31wg==",
      "dev": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/p-defer": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/p-defer/-/p-defer-1.0.0.tgz",
      "integrity": "sha1-n26xgvbJqozXQwBKfU+WsZaw+ww=",
      "dev": true,
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/p-event": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/p-event/-/p-event-4.2.0.tgz",
      "integrity": "sha512-KXatOjCRXXkSePPb1Nbi0p0m+gQAwdlbhi4wQKJPI1HsMQS9g+Sqp2o+QHziPr7eYJyOZet836KoHEVM1mwOrQ==",
      "dev": true,
      "dependencies": {
        "p-timeout": "^3.1.0"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/p-finally": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/p-finally/-/p-finally-1.0.0.tgz",
      "integrity": "sha1-P7z7FbiZpEEjs0ttzBi3JDNqLK4=",
      "dev": true,
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/p-limit": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-2.3.0.tgz",
      "integrity": "sha512-//88mFWSJx8lxCzwdAABTJL2MyWB12+eIY7MDL2SqLmAkeKU9qxRvWuSyTjm3FUmpBEMuFfckAIqEaVGUDxb6w==",
      "dev": true,
      "dependencies": {
        "p-try": "^2.0.0"
      },
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/p-locate": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-3.0.0.tgz",
      "integrity": "sha512-x+12w/To+4GFfgJhBEpiDcLozRJGegY+Ei7/z0tSLkMmxGZNybVMSfWj9aJn8Z5Fc7dBUNJOOVgPv2H7IwulSQ==",
      "dev": true,
      "dependencies": {
        "p-limit": "^2.0.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/p-map": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/p-map/-/p-map-4.0.0.tgz",
      "integrity": "sha512-/bjOqmgETBYB5BoEeGVea8dmvHb2m9GLy1E9W43yeyfP6QQCZGFNa+XRceJEuDB6zqr+gKpIAmlLebMpykw/MQ==",
      "dev": true,
      "dependencies": {
        "aggregate-error": "^3.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/p-timeout": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/p-timeout/-/p-timeout-3.2.0.tgz",
      "integrity": "sha512-rhIwUycgwwKcP9yTOOFK/AKsAopjjCakVqLHePO3CC6Mir1Z99xT+R63jZxAT5lFZLa2inS5h+ZS2GvR99/FBg==",
      "dev": true,
      "dependencies": {
        "p-finally": "^1.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/p-try": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/p-try/-/p-try-2.2.0.tgz",
      "integrity": "sha512-R4nPAVTAU0B9D35/Gk3uJf/7XYbQcyohSKdvAxIRSNghFl4e71hVoGnBNQz9cWaXxO2I10KTC+3jMdvvoKw6dQ==",
      "dev": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/package-json": {
      "version": "6.5.0",
      "resolved": "https://registry.npmjs.org/package-json/-/package-json-6.5.0.tgz",
      "integrity": "sha512-k3bdm2n25tkyxcjSKzB5x8kfVxlMdgsbPr0GkZcwHsLpba6cBjqCt1KlcChKEvxHIcTB1FVMuwoijZ26xex5MQ==",
      "dev": true,
      "dependencies": {
        "got": "^9.6.0",
        "registry-auth-token": "^4.0.0",
        "registry-url": "^5.0.0",
        "semver": "^6.2.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/package-json/node_modules/@sindresorhus/is": {
      "version": "0.14.0",
      "resolved": "https://registry.npmjs.org/@sindresorhus/is/-/is-0.14.0.tgz",
      "integrity": "sha512-9NET910DNaIPngYnLLPeg+Ogzqsi9uM4mSboU5y6p8S5DzMTVEsJZrawi+BoDNUVBa2DhJqQYUFvMDfgU062LQ==",
      "dev": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/package-json/node_modules/@szmarczak/http-timer": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/@szmarczak/http-timer/-/http-timer-1.1.2.tgz",
      "integrity": "sha512-XIB2XbzHTN6ieIjfIMV9hlVcfPU26s2vafYWQcZHWXHOxiaRZYEDKEwdl129Zyg50+foYV2jCgtrqSA6qNuNSA==",
      "dev": true,
      "dependencies": {
        "defer-to-connect": "^1.0.1"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/package-json/node_modules/cacheable-request": {
      "version": "6.1.0",
      "resolved": "https://registry.npmjs.org/cacheable-request/-/cacheable-request-6.1.0.tgz",
      "integrity": "sha512-Oj3cAGPCqOZX7Rz64Uny2GYAZNliQSqfbePrgAQ1wKAihYmCUnraBtJtKcGR4xz7wF+LoJC+ssFZvv5BgF9Igg==",
      "dev": true,
      "dependencies": {
        "clone-response": "^1.0.2",
        "get-stream": "^5.1.0",
        "http-cache-semantics": "^4.0.0",
        "keyv": "^3.0.0",
        "lowercase-keys": "^2.0.0",
        "normalize-url": "^4.1.0",
        "responselike": "^1.0.2"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/package-json/node_modules/cacheable-request/node_modules/get-stream": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/get-stream/-/get-stream-5.2.0.tgz",
      "integrity": "sha512-nBF+F1rAZVCu/p7rjzgA+Yb4lfYXrpl7a6VmJrU8wF9I1CKvP/QwPNZHnOlwbTkY6dvtFIzFMSyQXbLoTQPRpA==",
      "dev": true,
      "dependencies": {
        "pump": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/package-json/node_modules/decompress-response": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/decompress-response/-/decompress-response-3.3.0.tgz",
      "integrity": "sha1-gKTdMjdIOEv6JICDYirt7Jgq3/M=",
      "dev": true,
      "dependencies": {
        "mimic-response": "^1.0.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/package-json/node_modules/defer-to-connect": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/defer-to-connect/-/defer-to-connect-1.1.3.tgz",
      "integrity": "sha512-0ISdNousHvZT2EiFlZeZAHBUvSxmKswVCEf8hW7KWgG4a8MVEu/3Vb6uWYozkjylyCxe0JBIiRB1jV45S70WVQ==",
      "dev": true
    },
    "node_modules/package-json/node_modules/get-stream": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/get-stream/-/get-stream-4.1.0.tgz",
      "integrity": "sha512-GMat4EJ5161kIy2HevLlr4luNjBgvmj413KaQA7jt4V8B4RDsfpHk7WQ9GVqfYyyx8OS/L66Kox+rJRNklLK7w==",
      "dev": true,
      "dependencies": {
        "pump": "^3.0.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/package-json/node_modules/got": {
      "version": "9.6.0",
      "resolved": "https://registry.npmjs.org/got/-/got-9.6.0.tgz",
      "integrity": "sha512-R7eWptXuGYxwijs0eV+v3o6+XH1IqVK8dJOEecQfTmkncw9AV4dcw/Dhxi8MdlqPthxxpZyizMzyg8RTmEsG+Q==",
      "dev": true,
      "dependencies": {
        "@sindresorhus/is": "^0.14.0",
        "@szmarczak/http-timer": "^1.1.2",
        "cacheable-request": "^6.0.0",
        "decompress-response": "^3.3.0",
        "duplexer3": "^0.1.4",
        "get-stream": "^4.1.0",
        "lowercase-keys": "^1.0.1",
        "mimic-response": "^1.0.1",
        "p-cancelable": "^1.0.0",
        "to-readable-stream": "^1.0.0",
        "url-parse-lax": "^3.0.0"
      },
      "engines": {
        "node": ">=8.6"
      }
    },
    "node_modules/package-json/node_modules/got/node_modules/lowercase-keys": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/lowercase-keys/-/lowercase-keys-1.0.1.tgz",
      "integrity": "sha512-G2Lj61tXDnVFFOi8VZds+SoQjtQC3dgokKdDG2mTm1tx4m50NUHBOZSBwQQHyy0V12A0JTG4icfZQH+xPyh8VA==",
      "dev": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/package-json/node_modules/json-buffer": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/json-buffer/-/json-buffer-3.0.0.tgz",
      "integrity": "sha1-Wx85evx11ne96Lz8Dkfh+aPZqJg=",
      "dev": true
    },
    "node_modules/package-json/node_modules/keyv": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/keyv/-/keyv-3.1.0.tgz",
      "integrity": "sha512-9ykJ/46SN/9KPM/sichzQ7OvXyGDYKGTaDlKMGCAlg2UK8KRy4jb0d8sFc+0Tt0YYnThq8X2RZgCg74RPxgcVA==",
      "dev": true,
      "dependencies": {
        "json-buffer": "3.0.0"
      }
    },
    "node_modules/package-json/node_modules/normalize-url": {
      "version": "4.5.1",
      "resolved": "https://registry.npmjs.org/normalize-url/-/normalize-url-4.5.1.tgz",
      "integrity": "sha512-9UZCFRHQdNrfTpGg8+1INIg93B6zE0aXMVFkw1WFwvO4SlZywU6aLg5Of0Ap/PgcbSw4LNxvMWXMeugwMCX0AA==",
      "dev": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/package-json/node_modules/p-cancelable": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/p-cancelable/-/p-cancelable-1.1.0.tgz",
      "integrity": "sha512-s73XxOZ4zpt1edZYZzvhqFa6uvQc1vwUa0K0BdtIZgQMAJj9IbebH+JkgKZc9h+B05PKHLOTl4ajG1BmNrVZlw==",
      "dev": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/package-json/node_modules/responselike": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/responselike/-/responselike-1.0.2.tgz",
      "integrity": "sha1-kYcg7ztjHFZCvgaPFa3lpG9Loec=",
      "dev": true,
      "dependencies": {
        "lowercase-keys": "^1.0.0"
      }
    },
    "node_modules/package-json/node_modules/responselike/node_modules/lowercase-keys": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/lowercase-keys/-/lowercase-keys-1.0.1.tgz",
      "integrity": "sha512-G2Lj61tXDnVFFOi8VZds+SoQjtQC3dgokKdDG2mTm1tx4m50NUHBOZSBwQQHyy0V12A0JTG4icfZQH+xPyh8VA==",
      "dev": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/package-json/node_modules/semver": {
      "version": "6.3.0",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.0.tgz",
      "integrity": "sha512-b39TBaTSfV6yBrapU89p5fKekE2m/NwnDocOVruQFS1/veMgdzuPcnOM34M6CwxW8jH/lxEa5rBoDeUwu5HHTw==",
      "dev": true,
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/parse-json": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/parse-json/-/parse-json-4.0.0.tgz",
      "integrity": "sha1-vjX1Qlvh9/bHRxhPmKeIy5lHfuA=",
      "dev": true,
      "dependencies": {
        "error-ex": "^1.3.1",
        "json-parse-better-errors": "^1.0.1"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/parse-ms": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/parse-ms/-/parse-ms-2.1.0.tgz",
      "integrity": "sha512-kHt7kzLoS9VBZfUsiKjv43mr91ea+U05EyKkEtqp7vNbHxmaVuEqN7XxeEVnGrMtYOAxGrDElSi96K7EgO1zCA==",
      "dev": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/path-exists": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-3.0.0.tgz",
      "integrity": "sha1-zg6+ql94yxiSXqfYENe1mwEP1RU=",
      "dev": true,
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/path-is-absolute": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz",
      "integrity": "sha1-F0uSaHNVNP+8es5r9TpanhtcX18=",
      "dev": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/path-key": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz",
      "integrity": "sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==",
      "dev": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/path-parse": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/path-parse/-/path-parse-1.0.7.tgz",
      "integrity": "sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==",
      "dev": true
    },
    "node_modules/path-type": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/path-type/-/path-type-4.0.0.tgz",
      "integrity": "sha512-gDKb8aZMDeD/tZWs9P6+q0J9Mwkdl6xMV8TjnGP3qJVJ06bdMgkbBlLU8IdfOsIsFz2BW1rNVT3XuNEl8zPAvw==",
      "dev": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/picomatch": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
      "integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==",
      "dev": true,
      "engines": {
        "node": ">=8.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/jonschlinkert"
      }
    },
    "node_modules/pify": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/pify/-/pify-4.0.1.tgz",
      "integrity": "sha512-uB80kBFb/tfd68bVleG9T5GGsGPjJrLAUpR5PZIrhBnIaRTQRjqdJSsIKkOP6OAIFbj7GOrcudc5pNjZ+geV2g==",
      "dev": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/pkg-conf": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/pkg-conf/-/pkg-conf-3.1.0.tgz",
      "integrity": "sha512-m0OTbR/5VPNPqO1ph6Fqbj7Hv6QU7gR/tQW40ZqrL1rjgCU85W6C1bJn0BItuJqnR98PWzw7Z8hHeChD1WrgdQ==",
      "dev": true,
      "dependencies": {
        "find-up": "^3.0.0",
        "load-json-file": "^5.2.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/pkg-dir": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/pkg-dir/-/pkg-dir-4.2.0.tgz",
      "integrity": "sha512-HRDzbaKjC+AOWVXxAU/x54COGeIv9eb+6CkDSQoNTt4XyWoIJvuPsXizxu/Fr23EiekbtZwmh1IcIG/l/a10GQ==",
      "dev": true,
      "dependencies": {
        "find-up": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/pkg-dir/node_modules/find-up": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/find-up/-/find-up-4.1.0.tgz",
      "integrity": "sha512-PpOwAdQ/YlXQ2vj8a3h8IipDuYRi3wceVQQGYWxNINccq40Anw7BlsEXCMbt1Zt+OLA6Fq9suIpIWD0OsnISlw==",
      "dev": true,
      "dependencies": {
        "locate-path": "^5.0.0",
        "path-exists": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/pkg-dir/node_modules/locate-path": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-5.0.0.tgz",
      "integrity": "sha512-t7hw9pI+WvuwNJXwk5zVHpyhIqzg2qTlklJOf0mVxGSbe3Fp2VieZcduNYjaLDoy6p9uGpQEGWG87WpMKlNq8g==",
      "dev": true,
      "dependencies": {
        "p-locate": "^4.1.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/pkg-dir/node_modules/p-locate": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-4.1.0.tgz",
      "integrity": "sha512-R79ZZ/0wAxKGu3oYMlz8jy/kbhsNrS7SKZ7PxEHBgJ5+F2mtFW2fK2cOtBh1cHYkQsbzFV7I+EoRKe6Yt0oK7A==",
      "dev": true,
      "dependencies": {
        "p-limit": "^2.2.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/pkg-dir/node_modules/path-exists": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-4.0.0.tgz",
      "integrity": "sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==",
      "dev": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/plur": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/plur/-/plur-4.0.0.tgz",
      "integrity": "sha512-4UGewrYgqDFw9vV6zNV+ADmPAUAfJPKtGvb/VdpQAx25X5f3xXdGdyOEVFwkl8Hl/tl7+xbeHqSEM+D5/TirUg==",
      "dev": true,
      "dependencies": {
        "irregular-plurals": "^3.2.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/prepend-http": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/prepend-http/-/prepend-http-2.0.0.tgz",
      "integrity": "sha1-6SQ0v6XqjBn0HN/UAddBo8gZ2Jc=",
      "dev": true,
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/pretty-ms": {
      "version": "7.0.1",
      "resolved": "https://registry.npmjs.org/pretty-ms/-/pretty-ms-7.0.1.tgz",
      "integrity": "sha512-973driJZvxiGOQ5ONsFhOF/DtzPMOMtgC11kCpUrPGMTgqp2q/1gwzCquocrN33is0VZ5GFHXZYMM9l6h67v2Q==",
      "dev": true,
      "dependencies": {
        "parse-ms": "^2.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/promisify-child-process": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/promisify-child-process/-/promisify-child-process-4.1.1.tgz",
      "integrity": "sha512-/sRjHZwoXf1rJ+8s4oWjYjGRVKNK1DUnqfRC1Zek18pl0cN6k3yJ1cCbqd0tWNe4h0Gr+SY4vR42N33+T82WkA==",
      "dev": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/pump": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/pump/-/pump-3.0.0.tgz",
      "integrity": "sha512-LwZy+p3SFs1Pytd/jYct4wpv49HiYCqd9Rlc5ZVdk0V+8Yzv6jR5Blk3TRmPL1ft69TxP0IMZGJ+WPFU2BFhww==",
      "dev": true,
      "dependencies": {
        "end-of-stream": "^1.1.0",
        "once": "^1.3.1"
      }
    },
    "node_modules/pupa": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/pupa/-/pupa-2.1.1.tgz",
      "integrity": "sha512-l1jNAspIBSFqbT+y+5FosojNpVpF94nlI+wDUpqP9enwOTfHx9f0gh5nB96vl+6yTpsJsypeNrwfzPrKuHB41A==",
      "dev": true,
      "dependencies": {
        "escape-goat": "^2.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/pure-uuid": {
      "version": "1.6.2",
      "resolved": "https://registry.npmjs.org/pure-uuid/-/pure-uuid-1.6.2.tgz",
      "integrity": "sha512-WQ4xz74ApW6s0BToRuuyuMo9g0VHx1HljY0H2gPng+mqqz/K1yLj7sHZonZZQ2++WfHl/ZzruilWvuz+WtmxjQ==",
      "dev": true,
      "engines": {
        "node": ">=8.0.0"
      }
    },
    "node_modules/queue-microtask": {
      "version": "1.2.3",
      "resolved": "https://registry.npmjs.org/queue-microtask/-/queue-microtask-1.2.3.tgz",
      "integrity": "sha512-NuaNSa6flKT5JaSYQzJok04JzTL1CA6aGhv5rfLW3PgqA+M2ChpZQnAC8h8i4ZFkBS8X5RqkDBHA7r4hej3K9A==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ]
    },
    "node_modules/quick-lru": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/quick-lru/-/quick-lru-5.1.1.tgz",
      "integrity": "sha512-WuyALRjWPDGtt/wzJiadO5AXY+8hZ80hVpe6MyivgraREW751X3SbhRvG3eLKOYN+8VEvqLcf3wdnt44Z4S4SA==",
      "dev": true,
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/rc": {
      "version": "1.2.8",
      "resolved": "https://registry.npmjs.org/rc/-/rc-1.2.8.tgz",
      "integrity": "sha512-y3bGgqKj3QBdxLbLkomlohkvsA8gdAiUQlSBJnBhfn+BPxg4bc62d8TcBW15wavDfgexCgccckhcZvywyQYPOw==",
      "dev": true,
      "dependencies": {
        "deep-extend": "^0.6.0",
        "ini": "~1.3.0",
        "minimist": "^1.2.0",
        "strip-json-comments": "~2.0.1"
      },
      "bin": {
        "rc": "cli.js"
      }
    },
    "node_modules/rc/node_modules/ini": {
      "version": "1.3.8",
      "resolved": "https://registry.npmjs.org/ini/-/ini-1.3.8.tgz",
      "integrity": "sha512-JV/yugV2uzW5iMRSiZAyDtQd+nxtUnjeLt0acNdw98kKLrvuRVyB80tsREOE7yvGVgalhZ6RNXCmEHkUKBKxew==",
      "dev": true
    },
    "node_modules/read-pkg": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/read-pkg/-/read-pkg-5.2.0.tgz",
      "integrity": "sha512-Ug69mNOpfvKDAc2Q8DRpMjjzdtrnv9HcSMX+4VsZxD1aZ6ZzrIE7rlzXBtWTyhULSMKg076AW6WR5iZpD0JiOg==",
      "dev": true,
      "dependencies": {
        "@types/normalize-package-data": "^2.4.0",
        "normalize-package-data": "^2.5.0",
        "parse-json": "^5.0.0",
        "type-fest": "^0.6.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/read-pkg/node_modules/parse-json": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/parse-json/-/parse-json-5.2.0.tgz",
      "integrity": "sha512-ayCKvm/phCGxOkYRSCM82iDwct8/EonSEgCSxWxD7ve6jHggsFl4fZVQBPRNgQoKiuV/odhFrGzQXZwbifC8Rg==",
      "dev": true,
      "dependencies": {
        "@babel/code-frame": "^7.0.0",
        "error-ex": "^1.3.1",
        "json-parse-even-better-errors": "^2.3.0",
        "lines-and-columns": "^1.1.6"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/read-pkg/node_modules/type-fest": {
      "version": "0.6.0",
      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.6.0.tgz",
      "integrity": "sha512-q+MB8nYR1KDLrgr4G5yemftpMC7/QLqVndBmEEdqzmNj5dcFOO4Oo8qlwZE3ULT3+Zim1F8Kq4cBnikNhlCMlg==",
      "dev": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/readable-stream": {
      "version": "3.6.0",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-3.6.0.tgz",
      "integrity": "sha512-BViHy7LKeTz4oNnkcLJ+lVSL6vpiFeX6/d3oSH8zCW7UxP2onchk+vTGB143xuFjHS3deTgkKoXXymXqymiIdA==",
      "dev": true,
      "dependencies": {
        "inherits": "^2.0.3",
        "string_decoder": "^1.1.1",
        "util-deprecate": "^1.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/readdirp": {
      "version": "3.6.0",
      "resolved": "https://registry.npmjs.org/readdirp/-/readdirp-3.6.0.tgz",
      "integrity": "sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==",
      "dev": true,
      "dependencies": {
        "picomatch": "^2.2.1"
      },
      "engines": {
        "node": ">=8.10.0"
      }
    },
    "node_modules/registry-auth-token": {
      "version": "4.2.1",
      "resolved": "https://registry.npmjs.org/registry-auth-token/-/registry-auth-token-4.2.1.tgz",
      "integrity": "sha512-6gkSb4U6aWJB4SF2ZvLb76yCBjcvufXBqvvEx1HbmKPkutswjW1xNVRY0+daljIYRbogN7O0etYSlbiaEQyMyw==",
      "dev": true,
      "dependencies": {
        "rc": "^1.2.8"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/registry-url": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/registry-url/-/registry-url-5.1.0.tgz",
      "integrity": "sha512-8acYXXTI0AkQv6RAOjE3vOaIXZkT9wo4LOFbBKYQEEnnMNBpKqdUrI6S4NT0KPIo/WVvJ5tE/X5LF/TQUf0ekw==",
      "dev": true,
      "dependencies": {
        "rc": "^1.2.8"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/require-directory": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/require-directory/-/require-directory-2.1.1.tgz",
      "integrity": "sha1-jGStX9MNqxyXbiNE/+f3kqam30I=",
      "dev": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/resolve": {
      "version": "1.22.0",
      "resolved": "https://registry.npmjs.org/resolve/-/resolve-1.22.0.tgz",
      "integrity": "sha512-Hhtrw0nLeSrFQ7phPp4OOcVjLPIeMnRlr5mcnVuMe7M/7eBn98A3hmFRLoFo3DLZkivSYwhRUJTyPyWAk56WLw==",
      "dev": true,
      "dependencies": {
        "is-core-module": "^2.8.1",
        "path-parse": "^1.0.7",
        "supports-preserve-symlinks-flag": "^1.0.0"
      },
      "bin": {
        "resolve": "bin/resolve"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/resolve-alpn": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/resolve-alpn/-/resolve-alpn-1.2.1.tgz",
      "integrity": "sha512-0a1F4l73/ZFZOakJnQ3FvkJ2+gSTQWz/r2KE5OdDY0TxPm5h4GkqkWWfM47T7HsbnOtcJVEF4epCVy6u7Q3K+g==",
      "dev": true
    },
    "node_modules/resolve-cwd": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/resolve-cwd/-/resolve-cwd-3.0.0.tgz",
      "integrity": "sha512-OrZaX2Mb+rJCpH/6CpSqt9xFVpN++x01XnN2ie9g6P5/3xelLAkXWVADpdz1IHD/KFfEXyE6V0U01OQ3UO2rEg==",
      "dev": true,
      "dependencies": {
        "resolve-from": "^5.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/resolve-from": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-5.0.0.tgz",
      "integrity": "sha512-qYg9KP24dD5qka9J47d0aVky0N+b4fTU89LN9iDnjB5waksiC49rvMB0PrUJQGoTmH50XPiqOvAjDfaijGxYZw==",
      "dev": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/responselike": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/responselike/-/responselike-2.0.0.tgz",
      "integrity": "sha512-xH48u3FTB9VsZw7R+vvgaKeLKzT6jOogbQhEe/jewwnZgzPcnyWui2Av6JpoYZF/91uueC+lqhWqeURw5/qhCw==",
      "dev": true,
      "dependencies": {
        "lowercase-keys": "^2.0.0"
      }
    },
    "node_modules/restore-cursor": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/restore-cursor/-/restore-cursor-3.1.0.tgz",
      "integrity": "sha512-l+sSefzHpj5qimhFSE5a8nufZYAM3sBSVMAPtYkmC+4EH2anSGaEMXSD0izRQbu9nfyQ9y5JrVmp7E8oZrUjvA==",
      "dev": true,
      "dependencies": {
        "onetime": "^5.1.0",
        "signal-exit": "^3.0.2"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/reusify": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/reusify/-/reusify-1.0.4.tgz",
      "integrity": "sha512-U9nH88a3fc/ekCF1l0/UP1IosiuIjyTh7hBvXVMHYgVcfGvt897Xguj2UOLDeI5BG2m7/uwyaLVT6fbtCwTyzw==",
      "dev": true,
      "engines": {
        "iojs": ">=1.0.0",
        "node": ">=0.10.0"
      }
    },
    "node_modules/rimraf": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/rimraf/-/rimraf-3.0.2.tgz",
      "integrity": "sha512-JZkJMZkAGFFPP2YqXZXPbMlMBgsxzE8ILs4lMIX/2o0L9UBw9O/Y3o6wFw/i9YLapcUJWwqbi3kdxIPdC62TIA==",
      "dev": true,
      "dependencies": {
        "glob": "^7.1.3"
      },
      "bin": {
        "rimraf": "bin.js"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/run-parallel": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/run-parallel/-/run-parallel-1.2.0.tgz",
      "integrity": "sha512-5l4VyZR86LZ/lDxZTR6jqL8AFE2S0IFLMP26AbjsLVADxHdhB/c0GUsH+y39UfCi3dzz8OlQuPmnaJOMoDHQBA==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "dependencies": {
        "queue-microtask": "^1.2.2"
      }
    },
    "node_modules/safe-buffer": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz",
      "integrity": "sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g==",
      "dev": true
    },
    "node_modules/semver": {
      "version": "7.3.5",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.3.5.tgz",
      "integrity": "sha512-PoeGJYh8HK4BTO/a9Tf6ZG3veo/A7ZVsYrSA6J8ny9nb3B1VrpkuN+z9OE5wfE5p6H4LchYZsegiQgbJD94ZFQ==",
      "dev": true,
      "dependencies": {
        "lru-cache": "^6.0.0"
      },
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/semver-diff": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/semver-diff/-/semver-diff-3.1.1.tgz",
      "integrity": "sha512-GX0Ix/CJcHyB8c4ykpHGIAvLyOwOobtM/8d+TQkAd81/bEjgPHrfba41Vpesr7jX/t8Uh+R3EX9eAS5be+jQYg==",
      "dev": true,
      "dependencies": {
        "semver": "^6.3.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/semver-diff/node_modules/semver": {
      "version": "6.3.0",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.0.tgz",
      "integrity": "sha512-b39TBaTSfV6yBrapU89p5fKekE2m/NwnDocOVruQFS1/veMgdzuPcnOM34M6CwxW8jH/lxEa5rBoDeUwu5HHTw==",
      "dev": true,
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/serialize-error": {
      "version": "7.0.1",
      "resolved": "https://registry.npmjs.org/serialize-error/-/serialize-error-7.0.1.tgz",
      "integrity": "sha512-8I8TjW5KMOKsZQTvoxjuSIa7foAwPWGOts+6o7sgjz41/qMD9VQHEDxi6PBvK2l0MXUmqZyNpUK+T2tQaaElvw==",
      "dev": true,
      "dependencies": {
        "type-fest": "^0.13.1"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/serialize-error/node_modules/type-fest": {
      "version": "0.13.1",
      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.13.1.tgz",
      "integrity": "sha512-34R7HTnG0XIJcBSn5XhDd7nNFPRcXYRZrBB2O2jdKqYODldSzBAqzsWoZYYvduky73toYS/ESqxPvkDf/F0XMg==",
      "dev": true,
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/setprototypeof": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz",
      "integrity": "sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw==",
      "dev": true
    },
    "node_modules/shebang-command": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz",
      "integrity": "sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==",
      "dev": true,
      "dependencies": {
        "shebang-regex": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/shebang-regex": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz",
      "integrity": "sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==",
      "dev": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/signal-exit": {
      "version": "3.0.7",
      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-3.0.7.tgz",
      "integrity": "sha512-wnD2ZE+l+SPC/uoS0vXeE9L1+0wuaMqKlfz9AMUo38JsyLSBWSFcHR1Rri62LZc12vLr1gb3jl7iwQhgwpAbGQ==",
      "dev": true
    },
    "node_modules/slash": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/slash/-/slash-3.0.0.tgz",
      "integrity": "sha512-g9Q1haeby36OSStwb4ntCGGGaKsaVSjQ68fBxoQcutl5fS1vuY18H3wSt3jFyFtrkx+Kz0V1G85A4MyAdDMi2Q==",
      "dev": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/slice-ansi": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/slice-ansi/-/slice-ansi-3.0.0.tgz",
      "integrity": "sha512-pSyv7bSTC7ig9Dcgbw9AuRNUb5k5V6oDudjZoMBSr13qpLBG7tB+zgCkARjq7xIUgdz5P1Qe8u+rSGdouOOIyQ==",
      "dev": true,
      "dependencies": {
        "ansi-styles": "^4.0.0",
        "astral-regex": "^2.0.0",
        "is-fullwidth-code-point": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/slice-ansi/node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "dev": true,
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/source-map": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
      "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
      "dev": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/source-map-support": {
      "version": "0.5.21",
      "resolved": "https://registry.npmjs.org/source-map-support/-/source-map-support-0.5.21.tgz",
      "integrity": "sha512-uBHU3L3czsIyYXKX88fdrGovxdSCoTGDRZ6SYXtSRxLZUzHg5P/66Ht6uoUlHu9EZod+inXhKo3qQgwXUT/y1w==",
      "dev": true,
      "dependencies": {
        "buffer-from": "^1.0.0",
        "source-map": "^0.6.0"
      }
    },
    "node_modules/spdx-correct": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/spdx-correct/-/spdx-correct-3.1.1.tgz",
      "integrity": "sha512-cOYcUWwhCuHCXi49RhFRCyJEK3iPj1Ziz9DpViV3tbZOwXD49QzIN3MpOLJNxh2qwq2lJJZaKMVw9qNi4jTC0w==",
      "dev": true,
      "dependencies": {
        "spdx-expression-parse": "^3.0.0",
        "spdx-license-ids": "^3.0.0"
      }
    },
    "node_modules/spdx-exceptions": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/spdx-exceptions/-/spdx-exceptions-2.3.0.tgz",
      "integrity": "sha512-/tTrYOC7PPI1nUAgx34hUpqXuyJG+DTHJTnIULG4rDygi4xu/tfgmq1e1cIRwRzwZgo4NLySi+ricLkZkw4i5A==",
      "dev": true
    },
    "node_modules/spdx-expression-parse": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/spdx-expression-parse/-/spdx-expression-parse-3.0.1.tgz",
      "integrity": "sha512-cbqHunsQWnJNE6KhVSMsMeH5H/L9EpymbzqTQ3uLwNCLZ1Q481oWaofqH7nO6V07xlXwY6PhQdQ2IedWx/ZK4Q==",
      "dev": true,
      "dependencies": {
        "spdx-exceptions": "^2.1.0",
        "spdx-license-ids": "^3.0.0"
      }
    },
    "node_modules/spdx-license-ids": {
      "version": "3.0.11",
      "resolved": "https://registry.npmjs.org/spdx-license-ids/-/spdx-license-ids-3.0.11.tgz",
      "integrity": "sha512-Ctl2BrFiM0X3MANYgj3CkygxhRmr9mi6xhejbdO960nF6EDJApTYpn0BQnDKlnNBULKiCN1n3w9EBkHK8ZWg+g==",
      "dev": true
    },
    "node_modules/sprintf-js": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/sprintf-js/-/sprintf-js-1.0.3.tgz",
      "integrity": "sha1-BOaSb2YolTVPPdAVIDYzuFcpfiw=",
      "dev": true
    },
    "node_modules/stack-utils": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/stack-utils/-/stack-utils-2.0.5.tgz",
      "integrity": "sha512-xrQcmYhOsn/1kX+Vraq+7j4oE2j/6BFscZ0etmYg81xuM8Gq0022Pxb8+IqgOFUIaxHs0KaSb7T1+OegiNrNFA==",
      "dev": true,
      "dependencies": {
        "escape-string-regexp": "^2.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/stack-utils/node_modules/escape-string-regexp": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-2.0.0.tgz",
      "integrity": "sha512-UpzcLCXolUWcNu5HtVMHYdXJjArjsF9C0aNnquZYY4uW/Vu0miy5YoWvbV345HauVvcAUnpRuhMMcqTcGOY2+w==",
      "dev": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/statuses": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/statuses/-/statuses-1.5.0.tgz",
      "integrity": "sha1-Fhx9rBd2Wf2YEfQ3cfqZOBR4Yow=",
      "dev": true,
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/string_decoder": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.3.0.tgz",
      "integrity": "sha512-hkRX8U1WjJFd8LsDJ2yQ/wWWxaopEsABU1XfkM8A+j0+85JAGppt16cr1Whg6KIbb4okU6Mql6BOj+uup/wKeA==",
      "dev": true,
      "dependencies": {
        "safe-buffer": "~5.2.0"
      }
    },
    "node_modules/string_decoder/node_modules/safe-buffer": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
      "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ]
    },
    "node_modules/string-width": {
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
      "dev": true,
      "dependencies": {
        "emoji-regex": "^8.0.0",
        "is-fullwidth-code-point": "^3.0.0",
        "strip-ansi": "^6.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/strip-ansi": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
      "dev": true,
      "dependencies": {
        "ansi-regex": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/strip-bom": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/strip-bom/-/strip-bom-3.0.0.tgz",
      "integrity": "sha1-IzTBjpx1n3vdVv3vfprj1YjmjtM=",
      "dev": true,
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/strip-final-newline": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/strip-final-newline/-/strip-final-newline-2.0.0.tgz",
      "integrity": "sha512-BrpvfNAE3dcvq7ll3xVumzjKjZQ5tI1sEUIKr3Uoks0XUl45St3FlatVqef9prk4jRDzhW6WZg+3bk93y6pLjA==",
      "dev": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/strip-json-comments": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-2.0.1.tgz",
      "integrity": "sha1-PFMZQukIwml8DsNEhYwobHygpgo=",
      "dev": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/supertap": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/supertap/-/supertap-2.0.0.tgz",
      "integrity": "sha512-jRzcXlCeDYvKoZGA5oRhYyR3jUIYu0enkSxtmAgHRlD7HwrovTpH4bDSi0py9FtuA8si9cW/fKommJHuaoDHJA==",
      "dev": true,
      "dependencies": {
        "arrify": "^2.0.1",
        "indent-string": "^4.0.0",
        "js-yaml": "^3.14.0",
        "serialize-error": "^7.0.1",
        "strip-ansi": "^6.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "dev": true,
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/supports-preserve-symlinks-flag": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/supports-preserve-symlinks-flag/-/supports-preserve-symlinks-flag-1.0.0.tgz",
      "integrity": "sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==",
      "dev": true,
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/tar": {
      "version": "6.1.11",
      "resolved": "https://registry.npmjs.org/tar/-/tar-6.1.11.tgz",
      "integrity": "sha512-an/KZQzQUkZCkuoAA64hM92X0Urb6VpRhAFllDzz44U2mcD5scmT3zBc4VgVpkugF580+DQn8eAFSyoQt0tznA==",
      "dev": true,
      "dependencies": {
        "chownr": "^2.0.0",
        "fs-minipass": "^2.0.0",
        "minipass": "^3.0.0",
        "minizlib": "^2.1.1",
        "mkdirp": "^1.0.3",
        "yallist": "^4.0.0"
      },
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/temp-dir": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/temp-dir/-/temp-dir-2.0.0.tgz",
      "integrity": "sha512-aoBAniQmmwtcKp/7BzsH8Cxzv8OL736p7v1ihGb5e9DJ9kTwGWHrQrVB5+lfVDzfGrdRzXch+ig7LHaY1JTOrg==",
      "dev": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/text-encoding-utf-8": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/text-encoding-utf-8/-/text-encoding-utf-8-1.0.2.tgz",
      "integrity": "sha512-8bw4MY9WjdsD2aMtO0OzOCY3pXGYNx2d2FfHRVUKkiCPDWjKuOlhLVASS+pD7VkLTVjW268LYJHwsnPFlBpbAg==",
      "dev": true
    },
    "node_modules/time-zone": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/time-zone/-/time-zone-1.0.0.tgz",
      "integrity": "sha1-mcW/VZWJZq9tBtg73zgA3IL67F0=",
      "dev": true,
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/to-readable-stream": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/to-readable-stream/-/to-readable-stream-1.0.0.tgz",
      "integrity": "sha512-Iq25XBt6zD5npPhlLVXGFN3/gyR2/qODcKNNyTMd4vbm39HUaOiAM4PMq0eMVC/Tkxz+Zjdsc55g9yyz+Yq00Q==",
      "dev": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/to-regex-range": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz",
      "integrity": "sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==",
      "dev": true,
      "dependencies": {
        "is-number": "^7.0.0"
      },
      "engines": {
        "node": ">=8.0"
      }
    },
    "node_modules/toidentifier": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/toidentifier/-/toidentifier-1.0.1.tgz",
      "integrity": "sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA==",
      "dev": true,
      "engines": {
        "node": ">=0.6"
      }
    },
    "node_modules/tr46": {
      "version": "0.0.3",
      "resolved": "https://registry.npmjs.org/tr46/-/tr46-0.0.3.tgz",
      "integrity": "sha1-gYT9NH2snNwYWZLzpmIuFLnZq2o=",
      "dev": true
    },
    "node_modules/trim-off-newlines": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/trim-off-newlines/-/trim-off-newlines-1.0.3.tgz",
      "integrity": "sha512-kh6Tu6GbeSNMGfrrZh6Bb/4ZEHV1QlB4xNDBeog8Y9/QwFlKTRyWvY3Fs9tRDAMZliVUwieMgEdIeL/FtqjkJg==",
      "dev": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/ts-node": {
      "version": "10.5.0",
      "resolved": "https://registry.npmjs.org/ts-node/-/ts-node-10.5.0.tgz",
      "integrity": "sha512-6kEJKwVxAJ35W4akuiysfKwKmjkbYxwQMTBaAxo9KKAx/Yd26mPUyhGz3ji+EsJoAgrLqVsYHNuuYwQe22lbtw==",
      "dev": true,
      "dependencies": {
        "@cspotcode/source-map-support": "0.7.0",
        "@tsconfig/node10": "^1.0.7",
        "@tsconfig/node12": "^1.0.7",
        "@tsconfig/node14": "^1.0.0",
        "@tsconfig/node16": "^1.0.2",
        "acorn": "^8.4.1",
        "acorn-walk": "^8.1.1",
        "arg": "^4.1.0",
        "create-require": "^1.1.0",
        "diff": "^4.0.1",
        "make-error": "^1.1.1",
        "v8-compile-cache-lib": "^3.0.0",
        "yn": "3.1.1"
      },
      "bin": {
        "ts-node": "dist/bin.js",
        "ts-node-cwd": "dist/bin-cwd.js",
        "ts-node-script": "dist/bin-script.js",
        "ts-node-transpile-only": "dist/bin-transpile.js",
        "ts-script": "dist/bin-script-deprecated.js"
      },
      "peerDependencies": {
        "@swc/core": ">=1.2.50",
        "@swc/wasm": ">=1.2.50",
        "@types/node": "*",
        "typescript": ">=2.7"
      },
      "peerDependenciesMeta": {
        "@swc/core": {
          "optional": true
        },
        "@swc/wasm": {
          "optional": true
        }
      }
    },
    "node_modules/tweetnacl": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/tweetnacl/-/tweetnacl-1.0.3.tgz",
      "integrity": "sha512-6rt+RN7aOi1nGMyC4Xa5DdYiukl2UWCbcJft7YhxReBGQD7OAM8Pbxw6YMo4r2diNEA8FEmu32YOn9rhaiE5yw==",
      "dev": true
    },
    "node_modules/type-fest": {
      "version": "0.3.1",
      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.3.1.tgz",
      "integrity": "sha512-cUGJnCdr4STbePCgqNFbpVNCepa+kAVohJs1sLhxzdH+gnEoOd8VhbYa7pD3zZYGiURWM2xzEII3fQcRizDkYQ==",
      "dev": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/typedarray-to-buffer": {
      "version": "3.1.5",
      "resolved": "https://registry.npmjs.org/typedarray-to-buffer/-/typedarray-to-buffer-3.1.5.tgz",
      "integrity": "sha512-zdu8XMNEDepKKR+XYOXAVPtWui0ly0NtohUscw+UmaHiAWT8hrV1rr//H6V+0DvJ3OQ19S979M0laLfX8rm82Q==",
      "dev": true,
      "dependencies": {
        "is-typedarray": "^1.0.0"
      }
    },
    "node_modules/typescript": {
      "version": "4.5.5",
      "resolved": "https://registry.npmjs.org/typescript/-/typescript-4.5.5.tgz",
      "integrity": "sha512-TCTIul70LyWe6IJWT8QSYeA54WQe8EjQFU4wY52Fasj5UKx88LNYKCgBEHcOMOrFF1rKGbD8v/xcNWVUq9SymA==",
      "dev": true,
      "bin": {
        "tsc": "bin/tsc",
        "tsserver": "bin/tsserver"
      },
      "engines": {
        "node": ">=4.2.0"
      }
    },
    "node_modules/u3": {
      "version": "0.1.1",
      "resolved": "https://registry.npmjs.org/u3/-/u3-0.1.1.tgz",
      "integrity": "sha512-+J5D5ir763y+Am/QY6hXNRlwljIeRMZMGs0cT6qqZVVzzT3X3nFPXVyPOFRMOR4kupB0T8JnCdpWdp6Q/iXn3w==",
      "dev": true
    },
    "node_modules/unique-string": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/unique-string/-/unique-string-2.0.0.tgz",
      "integrity": "sha512-uNaeirEPvpZWSgzwsPGtU2zVSTrn/8L5q/IexZmH0eH6SA73CmAA5U4GwORTxQAZs95TAXLNqeLoPPNO5gZfWg==",
      "dev": true,
      "dependencies": {
        "crypto-random-string": "^2.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/universalify": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/universalify/-/universalify-2.0.0.tgz",
      "integrity": "sha512-hAZsKq7Yy11Zu1DE0OzWjw7nnLZmJZYTDZZyEFHZdUhV8FkH5MCfoU1XMaxXovpyW5nq5scPqq0ZDP9Zyl04oQ==",
      "dev": true,
      "engines": {
        "node": ">= 10.0.0"
      }
    },
    "node_modules/update-notifier": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/update-notifier/-/update-notifier-5.1.0.tgz",
      "integrity": "sha512-ItnICHbeMh9GqUy31hFPrD1kcuZ3rpxDZbf4KUDavXwS0bW5m7SLbDQpGX3UYr072cbrF5hFUs3r5tUsPwjfHw==",
      "dev": true,
      "dependencies": {
        "boxen": "^5.0.0",
        "chalk": "^4.1.0",
        "configstore": "^5.0.1",
        "has-yarn": "^2.1.0",
        "import-lazy": "^2.1.0",
        "is-ci": "^2.0.0",
        "is-installed-globally": "^0.4.0",
        "is-npm": "^5.0.0",
        "is-yarn-global": "^0.3.0",
        "latest-version": "^5.1.0",
        "pupa": "^2.1.1",
        "semver": "^7.3.4",
        "semver-diff": "^3.1.1",
        "xdg-basedir": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/yeoman/update-notifier?sponsor=1"
      }
    },
    "node_modules/url-parse-lax": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/url-parse-lax/-/url-parse-lax-3.0.0.tgz",
      "integrity": "sha1-FrXK/Afb42dsGxmZF3gj1lA6yww=",
      "dev": true,
      "dependencies": {
        "prepend-http": "^2.0.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/util-deprecate": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz",
      "integrity": "sha1-RQ1Nyfpw3nMnYvvS1KKJgUGaDM8=",
      "dev": true
    },
    "node_modules/v8-compile-cache-lib": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/v8-compile-cache-lib/-/v8-compile-cache-lib-3.0.0.tgz",
      "integrity": "sha512-mpSYqfsFvASnSn5qMiwrr4VKfumbPyONLCOPmsR3A6pTY/r0+tSaVbgPWSAIuzbk3lCTa+FForeTiO+wBQGkjA==",
      "dev": true
    },
    "node_modules/validate-npm-package-license": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/validate-npm-package-license/-/validate-npm-package-license-3.0.4.tgz",
      "integrity": "sha512-DpKm2Ui/xN7/HQKCtpZxoRWBhZ9Z0kqtygG8XCgNQ8ZlDnxuQmWhj566j8fN4Cu3/JmbhsDo7fcAJq4s9h27Ew==",
      "dev": true,
      "dependencies": {
        "spdx-correct": "^3.0.0",
        "spdx-expression-parse": "^3.0.0"
      }
    },
    "node_modules/wcwidth": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/wcwidth/-/wcwidth-1.0.1.tgz",
      "integrity": "sha1-8LDc+RW8X/FSivrbLA4XtTLaL+g=",
      "dev": true,
      "dependencies": {
        "defaults": "^1.0.3"
      }
    },
    "node_modules/webidl-conversions": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-3.0.1.tgz",
      "integrity": "sha1-JFNCdeKnvGvnvIZhHMFq4KVlSHE=",
      "dev": true
    },
    "node_modules/well-known-symbols": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/well-known-symbols/-/well-known-symbols-2.0.0.tgz",
      "integrity": "sha512-ZMjC3ho+KXo0BfJb7JgtQ5IBuvnShdlACNkKkdsqBmYw3bPAaJfPeYUo6tLUaT5tG/Gkh7xkpBhKRQ9e7pyg9Q==",
      "dev": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/whatwg-url": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-5.0.0.tgz",
      "integrity": "sha1-lmRU6HZUYuN2RNNib2dCzotwll0=",
      "dev": true,
      "dependencies": {
        "tr46": "~0.0.3",
        "webidl-conversions": "^3.0.0"
      }
    },
    "node_modules/which": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/which/-/which-2.0.2.tgz",
      "integrity": "sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==",
      "dev": true,
      "dependencies": {
        "isexe": "^2.0.0"
      },
      "bin": {
        "node-which": "bin/node-which"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/widest-line": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/widest-line/-/widest-line-3.1.0.tgz",
      "integrity": "sha512-NsmoXalsWVDMGupxZ5R08ka9flZjjiLvHVAWYOKtiKM8ujtZWr9cRffak+uSE48+Ob8ObalXpwyeUiyDD6QFgg==",
      "dev": true,
      "dependencies": {
        "string-width": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/wrap-ansi": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz",
      "integrity": "sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==",
      "dev": true,
      "dependencies": {
        "ansi-styles": "^4.0.0",
        "string-width": "^4.1.0",
        "strip-ansi": "^6.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
      }
    },
    "node_modules/wrap-ansi/node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "dev": true,
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/wrappy": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
      "integrity": "sha1-tSQ9jz7BqjXxNkYFvA0QNuMKtp8=",
      "dev": true
    },
    "node_modules/write-file-atomic": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/write-file-atomic/-/write-file-atomic-3.0.3.tgz",
      "integrity": "sha512-AvHcyZ5JnSfq3ioSyjrBkH9yW4m7Ayk8/9My/DD9onKeu/94fwrMocemO2QAJFAlnnDN+ZDS+ZjAR5ua1/PV/Q==",
      "dev": true,
      "dependencies": {
        "imurmurhash": "^0.1.4",
        "is-typedarray": "^1.0.0",
        "signal-exit": "^3.0.2",
        "typedarray-to-buffer": "^3.1.5"
      }
    },
    "node_modules/xdg-basedir": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/xdg-basedir/-/xdg-basedir-4.0.0.tgz",
      "integrity": "sha512-PSNhEJDejZYV7h50BohL09Er9VaIefr2LMAf3OEmpCkjOi34eYyQYAXUTjEQtZJTKcF0E2UKTh+osDLsgNim9Q==",
      "dev": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/y18n": {
      "version": "5.0.8",
      "resolved": "https://registry.npmjs.org/y18n/-/y18n-5.0.8.tgz",
      "integrity": "sha512-0pfFzegeDWJHJIAmTLRP2DwHjdF5s7jo9tuztdQxAhINCdvS+3nGINqPd00AphqJR/0LhANUS6/+7SCb98YOfA==",
      "dev": true,
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/yallist": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-4.0.0.tgz",
      "integrity": "sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A==",
      "dev": true
    },
    "node_modules/yargs": {
      "version": "16.2.0",
      "resolved": "https://registry.npmjs.org/yargs/-/yargs-16.2.0.tgz",
      "integrity": "sha512-D1mvvtDG0L5ft/jGWkLpG1+m0eQxOfaBvTNELraWj22wSVUMWxZUvYgJYcKh6jGGIkJFhH4IZPQhR4TKpc8mBw==",
      "dev": true,
      "dependencies": {
        "cliui": "^7.0.2",
        "escalade": "^3.1.1",
        "get-caller-file": "^2.0.5",
        "require-directory": "^2.1.1",
        "string-width": "^4.2.0",
        "y18n": "^5.0.5",
        "yargs-parser": "^20.2.2"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/yargs-parser": {
      "version": "20.2.9",
      "resolved": "https://registry.npmjs.org/yargs-parser/-/yargs-parser-20.2.9.tgz",
      "integrity": "sha512-y11nGElTIV+CT3Zv9t7VKl+Q3hTQoT9a1Qzezhhl6Rp21gJ/IVTW7Z3y9EWXhuUBC2Shnf+DX0antecpAwSP8w==",
      "dev": true,
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/yn": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/yn/-/yn-3.1.1.tgz",
      "integrity": "sha512-Ux4ygGWsu2c7isFWe8Yu1YluJmqVhxqK2cLXNQA5AcC3QfbGNpM7fu0Y8b/z16pXLnFxZYvWhd3fhBY9DLmC6Q==",
      "dev": true,
      "engines": {
        "node": ">=6"
      }
    }
  },
  "dependencies": {
    "@ava/typescript": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/@ava/typescript/-/typescript-2.0.0.tgz",
      "integrity": "sha512-sn+upcMk81AMrlnx/hb/9T7gCGuBfw7hi+p79NPSSQMvY2G64mOB7qRaDExiHiZfZ7FN9j7HwQeFhHZLGD/NWQ==",
      "dev": true,
      "requires": {
        "escape-string-regexp": "^4.0.0",
        "execa": "^5.0.0"
      }
    },
    "@babel/code-frame": {
      "version": "7.16.7",
      "resolved": "https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.16.7.tgz",
      "integrity": "sha512-iAXqUn8IIeBTNd72xsFlgaXHkMBMt6y4HJp1tIaK465CWLT/fG1aqB7ykr95gHHmlBdGbFeWWfyB4NJJ0nmeIg==",
      "dev": true,
      "requires": {
        "@babel/highlight": "^7.16.7"
      }
    },
    "@babel/helper-validator-identifier": {
      "version": "7.16.7",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-identifier/-/helper-validator-identifier-7.16.7.tgz",
      "integrity": "sha512-hsEnFemeiW4D08A5gUAZxLBTXpZ39P+a+DGDsHw1yxqyQ/jzFEnxf5uTEGp+3bzAbNOxU1paTgYS4ECU/IgfDw==",
      "dev": true
    },
    "@babel/highlight": {
      "version": "7.16.10",
      "resolved": "https://registry.npmjs.org/@babel/highlight/-/highlight-7.16.10.tgz",
      "integrity": "sha512-5FnTQLSLswEj6IkgVw5KusNUUFY9ZGqe/TRFnP/BKYHYgfh7tc+C7mwiy95/yNP7Dh9x580Vv8r7u7ZfTBFxdw==",
      "dev": true,
      "requires": {
        "@babel/helper-validator-identifier": "^7.16.7",
        "chalk": "^2.0.0",
        "js-tokens": "^4.0.0"
      },
      "dependencies": {
        "ansi-styles": {
          "version": "3.2.1",
          "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-3.2.1.tgz",
          "integrity": "sha512-VT0ZI6kZRdTh8YyJw3SMbYm/u+NqfsAxEpWO0Pf9sq8/e94WxxOpPKx9FR1FlyCtOVDNOQ+8ntlqFxiRc+r5qA==",
          "dev": true,
          "requires": {
            "color-convert": "^1.9.0"
          }
        },
        "chalk": {
          "version": "2.4.2",
          "resolved": "https://registry.npmjs.org/chalk/-/chalk-2.4.2.tgz",
          "integrity": "sha512-Mti+f9lpJNcwF4tWV8/OrTTtF1gZi+f8FqlyAdouralcFWFQWF2+NgCHShjkCb+IFBLq9buZwE1xckQU4peSuQ==",
          "dev": true,
          "requires": {
            "ansi-styles": "^3.2.1",
            "escape-string-regexp": "^1.0.5",
            "supports-color": "^5.3.0"
          }
        },
        "color-convert": {
          "version": "1.9.3",
          "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-1.9.3.tgz",
          "integrity": "sha512-QfAUtd+vFdAtFQcC8CCyYt1fYWxSqAiK2cSD6zDB8N3cpsEBAvRxp9zOGg6G/SHHJYAT88/az/IuDGALsNVbGg==",
          "dev": true,
          "requires": {
            "color-name": "1.1.3"
          }
        },
        "color-name": {
          "version": "1.1.3",
          "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.3.tgz",
          "integrity": "sha1-p9BVi9icQveV3UIyj3QIMcpTvCU=",
          "dev": true
        },
        "escape-string-regexp": {
          "version": "1.0.5",
          "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-1.0.5.tgz",
          "integrity": "sha1-G2HAViGQqN/2rjuyzwIAyhMLhtQ=",
          "dev": true
        },
        "has-flag": {
          "version": "3.0.0",
          "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz",
          "integrity": "sha1-tdRU3CGZriJWmfNGfloH87lVuv0=",
          "dev": true
        },
        "supports-color": {
          "version": "5.5.0",
          "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-5.5.0.tgz",
          "integrity": "sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==",
          "dev": true,
          "requires": {
            "has-flag": "^3.0.0"
          }
        }
      }
    },
    "@concordance/react": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/@concordance/react/-/react-2.0.0.tgz",
      "integrity": "sha512-huLSkUuM2/P+U0uy2WwlKuixMsTODD8p4JVQBI4VKeopkiN0C7M3N9XYVawb4M+4spN5RrO/eLhk7KoQX6nsfA==",
      "dev": true,
      "requires": {
        "arrify": "^1.0.1"
      },
      "dependencies": {
        "arrify": {
          "version": "1.0.1",
          "resolved": "https://registry.npmjs.org/arrify/-/arrify-1.0.1.tgz",
          "integrity": "sha1-iYUI2iIm84DfkEcoRWhJwVAaSw0=",
          "dev": true
        }
      }
    },
    "@cspotcode/source-map-consumer": {
      "version": "0.8.0",
      "resolved": "https://registry.npmjs.org/@cspotcode/source-map-consumer/-/source-map-consumer-0.8.0.tgz",
      "integrity": "sha512-41qniHzTU8yAGbCp04ohlmSrZf8bkf/iJsl3V0dRGsQN/5GFfx+LbCSsCpp2gqrqjTVg/K6O8ycoV35JIwAzAg==",
      "dev": true
    },
    "@cspotcode/source-map-support": {
      "version": "0.7.0",
      "resolved": "https://registry.npmjs.org/@cspotcode/source-map-support/-/source-map-support-0.7.0.tgz",
      "integrity": "sha512-X4xqRHqN8ACt2aHVe51OxeA2HjbcL4MqFqXkrmQszJ1NOUuUu5u6Vqx/0lZSVNku7velL5FC/s5uEAj1lsBMhA==",
      "dev": true,
      "requires": {
        "@cspotcode/source-map-consumer": "0.8.0"
      }
    },
    "@nodelib/fs.scandir": {
      "version": "2.1.5",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.scandir/-/fs.scandir-2.1.5.tgz",
      "integrity": "sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==",
      "dev": true,
      "requires": {
        "@nodelib/fs.stat": "2.0.5",
        "run-parallel": "^1.1.9"
      }
    },
    "@nodelib/fs.stat": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.stat/-/fs.stat-2.0.5.tgz",
      "integrity": "sha512-RkhPPp2zrqDAQA/2jNhnztcPAlv64XdhIp7a7454A5ovI7Bukxgt7MX7udwAu3zg1DcpPU0rz3VV1SeaqvY4+A==",
      "dev": true
    },
    "@nodelib/fs.walk": {
      "version": "1.2.8",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.walk/-/fs.walk-1.2.8.tgz",
      "integrity": "sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg==",
      "dev": true,
      "requires": {
        "@nodelib/fs.scandir": "2.1.5",
        "fastq": "^1.6.0"
      }
    },
    "@sindresorhus/is": {
      "version": "4.4.0",
      "resolved": "https://registry.npmjs.org/@sindresorhus/is/-/is-4.4.0.tgz",
      "integrity": "sha512-QppPM/8l3Mawvh4rn9CNEYIU9bxpXUCRMaX9yUpvBk1nMKusLKpfXGDEKExKaPhLzcn3lzil7pR6rnJ11HgeRQ==",
      "dev": true
    },
    "@szmarczak/http-timer": {
      "version": "4.0.6",
      "resolved": "https://registry.npmjs.org/@szmarczak/http-timer/-/http-timer-4.0.6.tgz",
      "integrity": "sha512-4BAffykYOgO+5nzBWYwE3W90sBgLJoUPRWWcL8wlyiM8IB8ipJz3UMJ9KXQd1RKQXpKp8Tutn80HZtWsu2u76w==",
      "dev": true,
      "requires": {
        "defer-to-connect": "^2.0.0"
      }
    },
    "@tsconfig/node10": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/@tsconfig/node10/-/node10-1.0.8.tgz",
      "integrity": "sha512-6XFfSQmMgq0CFLY1MslA/CPUfhIL919M1rMsa5lP2P097N2Wd1sSX0tx1u4olM16fLNhtHZpRhedZJphNJqmZg==",
      "dev": true
    },
    "@tsconfig/node12": {
      "version": "1.0.9",
      "resolved": "https://registry.npmjs.org/@tsconfig/node12/-/node12-1.0.9.tgz",
      "integrity": "sha512-/yBMcem+fbvhSREH+s14YJi18sp7J9jpuhYByADT2rypfajMZZN4WQ6zBGgBKp53NKmqI36wFYDb3yaMPurITw==",
      "dev": true
    },
    "@tsconfig/node14": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/@tsconfig/node14/-/node14-1.0.1.tgz",
      "integrity": "sha512-509r2+yARFfHHE7T6Puu2jjkoycftovhXRqW328PDXTVGKihlb1P8Z9mMZH04ebyajfRY7dedfGynlrFHJUQCg==",
      "dev": true
    },
    "@tsconfig/node16": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/@tsconfig/node16/-/node16-1.0.2.tgz",
      "integrity": "sha512-eZxlbI8GZscaGS7kkc/trHTT5xgrjH3/1n2JDwusC9iahPKWMRvRjJSAN5mCXviuTGQ/lHnhvv8Q1YTpnfz9gA==",
      "dev": true
    },
    "@types/bn.js": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/@types/bn.js/-/bn.js-5.1.0.tgz",
      "integrity": "sha512-QSSVYj7pYFN49kW77o2s9xTCwZ8F2xLbjLLSEVh8D2F4JUhZtPAGOFLTD+ffqksBx/u4cE/KImFjyhqCjn/LIA==",
      "dev": true,
      "requires": {
        "@types/node": "*"
      }
    },
    "@types/cacheable-request": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/@types/cacheable-request/-/cacheable-request-6.0.2.tgz",
      "integrity": "sha512-B3xVo+dlKM6nnKTcmm5ZtY/OL8bOAOd2Olee9M1zft65ox50OzjEHW91sDiU9j6cvW8Ejg1/Qkf4xd2kugApUA==",
      "dev": true,
      "requires": {
        "@types/http-cache-semantics": "*",
        "@types/keyv": "*",
        "@types/node": "*",
        "@types/responselike": "*"
      }
    },
    "@types/http-cache-semantics": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/@types/http-cache-semantics/-/http-cache-semantics-4.0.1.tgz",
      "integrity": "sha512-SZs7ekbP8CN0txVG2xVRH6EgKmEm31BOxA07vkFaETzZz1xh+cbt8BcI0slpymvwhx5dlFnQG2rTlPVQn+iRPQ==",
      "dev": true
    },
    "@types/keyv": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/@types/keyv/-/keyv-3.1.3.tgz",
      "integrity": "sha512-FXCJgyyN3ivVgRoml4h94G/p3kY+u/B86La+QptcqJaWtBWtmc6TtkNfS40n9bIvyLteHh7zXOtgbobORKPbDg==",
      "dev": true,
      "requires": {
        "@types/node": "*"
      }
    },
    "@types/node": {
      "version": "16.11.25",
      "resolved": "https://registry.npmjs.org/@types/node/-/node-16.11.25.tgz",
      "integrity": "sha512-NrTwfD7L1RTc2qrHQD4RTTy4p0CO2LatKBEKEds3CaVuhoM/+DJzmWZl5f+ikR8cm8F5mfJxK+9rQq07gRiSjQ==",
      "dev": true
    },
    "@types/normalize-package-data": {
      "version": "2.4.1",
      "resolved": "https://registry.npmjs.org/@types/normalize-package-data/-/normalize-package-data-2.4.1.tgz",
      "integrity": "sha512-Gj7cI7z+98M282Tqmp2K5EIsoouUEzbBJhQQzDE3jSIRk6r9gsz0oUokqIUR4u1R3dMHo0pDHM7sNOHyhulypw==",
      "dev": true
    },
    "@types/responselike": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/@types/responselike/-/responselike-1.0.0.tgz",
      "integrity": "sha512-85Y2BjiufFzaMIlvJDvTTB8Fxl2xfLo4HgmHzVBz08w4wDePCTjYw66PdrolO0kzli3yam/YCgRufyo1DdQVTA==",
      "dev": true,
      "requires": {
        "@types/node": "*"
      }
    },
    "acorn": {
      "version": "8.7.0",
      "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.7.0.tgz",
      "integrity": "sha512-V/LGr1APy+PXIwKebEWrkZPwoeoF+w1jiOBUmuxuiUIaOHtob8Qc9BTrYo7VuI5fR8tqsy+buA2WFooR5olqvQ==",
      "dev": true
    },
    "acorn-walk": {
      "version": "8.2.0",
      "resolved": "https://registry.npmjs.org/acorn-walk/-/acorn-walk-8.2.0.tgz",
      "integrity": "sha512-k+iyHEuPgSw6SbuDpGQM+06HQUa04DZ3o+F6CSzXMvvI5KMvnaEqXe+YVe555R9nn6GPt404fos4wcgpw12SDA==",
      "dev": true
    },
    "aggregate-error": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/aggregate-error/-/aggregate-error-3.1.0.tgz",
      "integrity": "sha512-4I7Td01quW/RpocfNayFdFVk1qSuoh0E7JrbRJ16nH01HhKFQ88INq9Sd+nd72zqRySlr9BmDA8xlEJ6vJMrYA==",
      "dev": true,
      "requires": {
        "clean-stack": "^2.0.0",
        "indent-string": "^4.0.0"
      }
    },
    "ansi-align": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/ansi-align/-/ansi-align-3.0.1.tgz",
      "integrity": "sha512-IOfwwBF5iczOjp/WeY4YxyjqAFMQoZufdQWDd19SEExbVLNXqvpzSJ/M7Za4/sCPmQ0+GRquoA7bGcINcxew6w==",
      "dev": true,
      "requires": {
        "string-width": "^4.1.0"
      }
    },
    "ansi-regex": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
      "dev": true
    },
    "ansi-styles": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-5.2.0.tgz",
      "integrity": "sha512-Cxwpt2SfTzTtXcfOlzGEee8O+c+MmUgGrNiBcXnuWxuFJHe6a5Hz7qwhwe5OgaSYI0IJvkLqWX1ASG+cJOkEiA==",
      "dev": true
    },
    "anymatch": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/anymatch/-/anymatch-3.1.2.tgz",
      "integrity": "sha512-P43ePfOAIupkguHUycrc4qJ9kz8ZiuOUijaETwX7THt0Y/GNK7v0aa8rY816xWjZ7rJdA5XdMcpVFTKMq+RvWg==",
      "dev": true,
      "requires": {
        "normalize-path": "^3.0.0",
        "picomatch": "^2.0.4"
      }
    },
    "arg": {
      "version": "4.1.3",
      "resolved": "https://registry.npmjs.org/arg/-/arg-4.1.3.tgz",
      "integrity": "sha512-58S9QDqG0Xx27YwPSt9fJxivjYl432YCwfDMfZ+71RAqUrZef7LrKQZ3LHLOwCS4FLNBplP533Zx895SeOCHvA==",
      "dev": true
    },
    "argparse": {
      "version": "1.0.10",
      "resolved": "https://registry.npmjs.org/argparse/-/argparse-1.0.10.tgz",
      "integrity": "sha512-o5Roy6tNG4SL/FOkCAN6RzjiakZS25RLYFrcMttJqbdd8BWrnA+fGz57iN5Pb06pvBGvl5gQ0B48dJlslXvoTg==",
      "dev": true,
      "requires": {
        "sprintf-js": "~1.0.2"
      }
    },
    "array-find-index": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/array-find-index/-/array-find-index-1.0.2.tgz",
      "integrity": "sha1-3wEKoSh+Fku9pvlyOwqWoexBh6E=",
      "dev": true
    },
    "array-union": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/array-union/-/array-union-2.1.0.tgz",
      "integrity": "sha512-HGyxoOTYUyCM6stUe6EJgnd4EoewAI7zMdfqO+kGjnlZmBDz/cR5pf8r/cR4Wq60sL/p0IkcjUEEPwS3GFrIyw==",
      "dev": true
    },
    "arrgv": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/arrgv/-/arrgv-1.0.2.tgz",
      "integrity": "sha512-a4eg4yhp7mmruZDQFqVMlxNRFGi/i1r87pt8SDHy0/I8PqSXoUTlWZRdAZo0VXgvEARcujbtTk8kiZRi1uDGRw==",
      "dev": true
    },
    "arrify": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/arrify/-/arrify-2.0.1.tgz",
      "integrity": "sha512-3duEwti880xqi4eAMN8AyR4a0ByT90zoYdLlevfrvU43vb0YZwZVfxOgxWrLXXXpyugL0hNZc9G6BiB5B3nUug==",
      "dev": true
    },
    "astral-regex": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/astral-regex/-/astral-regex-2.0.0.tgz",
      "integrity": "sha512-Z7tMw1ytTXt5jqMcOP+OQteU1VuNK9Y02uuJtKQ1Sv69jXQKKg5cibLwGJow8yzZP+eAc18EmLGPal0bp36rvQ==",
      "dev": true
    },
    "ava": {
      "version": "3.15.0",
      "resolved": "https://registry.npmjs.org/ava/-/ava-3.15.0.tgz",
      "integrity": "sha512-HGAnk1SHPk4Sx6plFAUkzV/XC1j9+iQhOzt4vBly18/yo0AV8Oytx7mtJd/CR8igCJ5p160N/Oo/cNJi2uSeWA==",
      "dev": true,
      "requires": {
        "@concordance/react": "^2.0.0",
        "acorn": "^8.0.4",
        "acorn-walk": "^8.0.0",
        "ansi-styles": "^5.0.0",
        "arrgv": "^1.0.2",
        "arrify": "^2.0.1",
        "callsites": "^3.1.0",
        "chalk": "^4.1.0",
        "chokidar": "^3.4.3",
        "chunkd": "^2.0.1",
        "ci-info": "^2.0.0",
        "ci-parallel-vars": "^1.0.1",
        "clean-yaml-object": "^0.1.0",
        "cli-cursor": "^3.1.0",
        "cli-truncate": "^2.1.0",
        "code-excerpt": "^3.0.0",
        "common-path-prefix": "^3.0.0",
        "concordance": "^5.0.1",
        "convert-source-map": "^1.7.0",
        "currently-unhandled": "^0.4.1",
        "debug": "^4.3.1",
        "del": "^6.0.0",
        "emittery": "^0.8.0",
        "equal-length": "^1.0.0",
        "figures": "^3.2.0",
        "globby": "^11.0.1",
        "ignore-by-default": "^2.0.0",
        "import-local": "^3.0.2",
        "indent-string": "^4.0.0",
        "is-error": "^2.2.2",
        "is-plain-object": "^5.0.0",
        "is-promise": "^4.0.0",
        "lodash": "^4.17.20",
        "matcher": "^3.0.0",
        "md5-hex": "^3.0.1",
        "mem": "^8.0.0",
        "ms": "^2.1.3",
        "ora": "^5.2.0",
        "p-event": "^4.2.0",
        "p-map": "^4.0.0",
        "picomatch": "^2.2.2",
        "pkg-conf": "^3.1.0",
        "plur": "^4.0.0",
        "pretty-ms": "^7.0.1",
        "read-pkg": "^5.2.0",
        "resolve-cwd": "^3.0.0",
        "slash": "^3.0.0",
        "source-map-support": "^0.5.19",
        "stack-utils": "^2.0.3",
        "strip-ansi": "^6.0.0",
        "supertap": "^2.0.0",
        "temp-dir": "^2.0.0",
        "trim-off-newlines": "^1.0.1",
        "update-notifier": "^5.0.1",
        "write-file-atomic": "^3.0.3",
        "yargs": "^16.2.0"
      }
    },
    "balanced-match": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
      "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==",
      "dev": true
    },
    "base-x": {
      "version": "3.0.9",
      "resolved": "https://registry.npmjs.org/base-x/-/base-x-3.0.9.tgz",
      "integrity": "sha512-H7JU6iBHTal1gp56aKoaa//YUxEaAOUiydvrV/pILqIHXTtqxSkATOnDA2u+jZ/61sD+L/412+7kzXRtWukhpQ==",
      "dev": true,
      "requires": {
        "safe-buffer": "^5.0.1"
      }
    },
    "base64-js": {
      "version": "1.5.1",
      "resolved": "https://registry.npmjs.org/base64-js/-/base64-js-1.5.1.tgz",
      "integrity": "sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA==",
      "dev": true
    },
    "base64url": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/base64url/-/base64url-3.0.1.tgz",
      "integrity": "sha512-ir1UPr3dkwexU7FdV8qBBbNDRUhMmIekYMFZfi+C/sLNnRESKPl23nB9b2pltqfOQNnGzsDdId90AEtG5tCx4A==",
      "dev": true
    },
    "binary-extensions": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/binary-extensions/-/binary-extensions-2.2.0.tgz",
      "integrity": "sha512-jDctJ/IVQbZoJykoeHbhXpOlNBqGNcwXJKJog42E5HDPUwQTSdjCHdihjj0DlnheQ7blbT6dHOafNAiS8ooQKA==",
      "dev": true
    },
    "bl": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/bl/-/bl-4.1.0.tgz",
      "integrity": "sha512-1W07cM9gS6DcLperZfFSj+bWLtaPGSOHWhPiGzXmvVJbRLdG82sH/Kn8EtW1VqWVA54AKf2h5k5BbnIbwF3h6w==",
      "dev": true,
      "requires": {
        "buffer": "^5.5.0",
        "inherits": "^2.0.4",
        "readable-stream": "^3.4.0"
      }
    },
    "blueimp-md5": {
      "version": "2.19.0",
      "resolved": "https://registry.npmjs.org/blueimp-md5/-/blueimp-md5-2.19.0.tgz",
      "integrity": "sha512-DRQrD6gJyy8FbiE4s+bDoXS9hiW3Vbx5uCdwvcCf3zLHL+Iv7LtGHLpr+GZV8rHG8tK766FGYBwRbu8pELTt+w==",
      "dev": true
    },
    "bn.js": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/bn.js/-/bn.js-5.2.0.tgz",
      "integrity": "sha512-D7iWRBvnZE8ecXiLj/9wbxH7Tk79fAh8IHaTNq1RWRixsS02W+5qS+iE9yq6RYl0asXx5tw0bLhmT5pIfbSquw==",
      "dev": true
    },
    "borsh": {
      "version": "0.5.0",
      "resolved": "https://registry.npmjs.org/borsh/-/borsh-0.5.0.tgz",
      "integrity": "sha512-p9w/qGBeeFdUf2GPBPHdX5JQyez8K5VtoFN7PqSfmR+cVUMSmcwAKhP9n2aXoDSKbtS7xZlZt3MVnrJL7GdYhg==",
      "dev": true,
      "requires": {
        "bn.js": "^5.2.0",
        "bs58": "^4.0.0",
        "text-encoding-utf-8": "^1.0.2"
      }
    },
    "boxen": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/boxen/-/boxen-5.1.2.tgz",
      "integrity": "sha512-9gYgQKXx+1nP8mP7CzFyaUARhg7D3n1dF/FnErWmu9l6JvGpNUN278h0aSb+QjoiKSWG+iZ3uHrcqk0qrY9RQQ==",
      "dev": true,
      "requires": {
        "ansi-align": "^3.0.0",
        "camelcase": "^6.2.0",
        "chalk": "^4.1.0",
        "cli-boxes": "^2.2.1",
        "string-width": "^4.2.2",
        "type-fest": "^0.20.2",
        "widest-line": "^3.1.0",
        "wrap-ansi": "^7.0.0"
      },
      "dependencies": {
        "type-fest": {
          "version": "0.20.2",
          "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.20.2.tgz",
          "integrity": "sha512-Ne+eE4r0/iWnpAxD852z3A+N0Bt5RN//NjJwRd2VFHEmrywxf5vsZlh4R6lixl6B+wz/8d+maTSAkN1FIkI3LQ==",
          "dev": true
        }
      }
    },
    "brace-expansion": {
      "version": "1.1.11",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
      "dev": true,
      "requires": {
        "balanced-match": "^1.0.0",
        "concat-map": "0.0.1"
      }
    },
    "braces": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/braces/-/braces-3.0.2.tgz",
      "integrity": "sha512-b8um+L1RzM3WDSzvhm6gIz1yfTbBt6YTlcEKAvsmqCZZFw46z626lVj9j1yEPW33H5H+lBQpZMP1k8l+78Ha0A==",
      "dev": true,
      "requires": {
        "fill-range": "^7.0.1"
      }
    },
    "bs58": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/bs58/-/bs58-4.0.1.tgz",
      "integrity": "sha1-vhYedsNU9veIrkBx9j806MTwpCo=",
      "dev": true,
      "requires": {
        "base-x": "^3.0.2"
      }
    },
    "buffer": {
      "version": "5.7.1",
      "resolved": "https://registry.npmjs.org/buffer/-/buffer-5.7.1.tgz",
      "integrity": "sha512-EHcyIPBQ4BSGlvjB16k5KgAJ27CIsHY/2JBmCRReo48y9rQ3MaUzWX3KVlBa4U7MyX02HdVj0K7C3WaB3ju7FQ==",
      "dev": true,
      "requires": {
        "base64-js": "^1.3.1",
        "ieee754": "^1.1.13"
      }
    },
    "buffer-from": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/buffer-from/-/buffer-from-1.1.2.tgz",
      "integrity": "sha512-E+XQCRwSbaaiChtv6k6Dwgc+bx+Bs6vuKJHHl5kox/BaKbhiXzqQOwK4cO22yElGp2OCmjwVhT3HmxgyPGnJfQ==",
      "dev": true
    },
    "cacheable-lookup": {
      "version": "5.0.4",
      "resolved": "https://registry.npmjs.org/cacheable-lookup/-/cacheable-lookup-5.0.4.tgz",
      "integrity": "sha512-2/kNscPhpcxrOigMZzbiWF7dz8ilhb/nIHU3EyZiXWXpeq/au8qJ8VhdftMkty3n7Gj6HIGalQG8oiBNB3AJgA==",
      "dev": true
    },
    "cacheable-request": {
      "version": "7.0.2",
      "resolved": "https://registry.npmjs.org/cacheable-request/-/cacheable-request-7.0.2.tgz",
      "integrity": "sha512-pouW8/FmiPQbuGpkXQ9BAPv/Mo5xDGANgSNXzTzJ8DrKGuXOssM4wIQRjfanNRh3Yu5cfYPvcorqbhg2KIJtew==",
      "dev": true,
      "requires": {
        "clone-response": "^1.0.2",
        "get-stream": "^5.1.0",
        "http-cache-semantics": "^4.0.0",
        "keyv": "^4.0.0",
        "lowercase-keys": "^2.0.0",
        "normalize-url": "^6.0.1",
        "responselike": "^2.0.0"
      },
      "dependencies": {
        "get-stream": {
          "version": "5.2.0",
          "resolved": "https://registry.npmjs.org/get-stream/-/get-stream-5.2.0.tgz",
          "integrity": "sha512-nBF+F1rAZVCu/p7rjzgA+Yb4lfYXrpl7a6VmJrU8wF9I1CKvP/QwPNZHnOlwbTkY6dvtFIzFMSyQXbLoTQPRpA==",
          "dev": true,
          "requires": {
            "pump": "^3.0.0"
          }
        }
      }
    },
    "callsites": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/callsites/-/callsites-3.1.0.tgz",
      "integrity": "sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==",
      "dev": true
    },
    "camelcase": {
      "version": "6.3.0",
      "resolved": "https://registry.npmjs.org/camelcase/-/camelcase-6.3.0.tgz",
      "integrity": "sha512-Gmy6FhYlCY7uOElZUSbxo2UCDH8owEk996gkbrpsgGtrJLM3J7jGxl9Ic7Qwwj4ivOE5AWZWRMecDdF7hqGjFA==",
      "dev": true
    },
    "capability": {
      "version": "0.2.5",
      "resolved": "https://registry.npmjs.org/capability/-/capability-0.2.5.tgz",
      "integrity": "sha1-Ua2HNT8ZNv/Xfy8hx0YzpN6oiAE=",
      "dev": true
    },
    "chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "dev": true,
      "requires": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "dependencies": {
        "ansi-styles": {
          "version": "4.3.0",
          "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
          "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
          "dev": true,
          "requires": {
            "color-convert": "^2.0.1"
          }
        }
      }
    },
    "chokidar": {
      "version": "3.5.3",
      "resolved": "https://registry.npmjs.org/chokidar/-/chokidar-3.5.3.tgz",
      "integrity": "sha512-Dr3sfKRP6oTcjf2JmUmFJfeVMvXBdegxB0iVQ5eb2V10uFJUCAS8OByZdVAyVb8xXNz3GjjTgj9kLWsZTqE6kw==",
      "dev": true,
      "requires": {
        "anymatch": "~3.1.2",
        "braces": "~3.0.2",
        "fsevents": "~2.3.2",
        "glob-parent": "~5.1.2",
        "is-binary-path": "~2.1.0",
        "is-glob": "~4.0.1",
        "normalize-path": "~3.0.0",
        "readdirp": "~3.6.0"
      }
    },
    "chownr": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/chownr/-/chownr-2.0.0.tgz",
      "integrity": "sha512-bIomtDF5KGpdogkLd9VspvFzk9KfpyyGlS8YFVZl7TGPBHL5snIOnxeshwVgPteQ9b4Eydl+pVbIyE1DcvCWgQ==",
      "dev": true
    },
    "chunkd": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/chunkd/-/chunkd-2.0.1.tgz",
      "integrity": "sha512-7d58XsFmOq0j6el67Ug9mHf9ELUXsQXYJBkyxhH/k+6Ke0qXRnv0kbemx+Twc6fRJ07C49lcbdgm9FL1Ei/6SQ==",
      "dev": true
    },
    "ci-info": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ci-info/-/ci-info-2.0.0.tgz",
      "integrity": "sha512-5tK7EtrZ0N+OLFMthtqOj4fI2Jeb88C4CAZPu25LDVUgXJ0A3Js4PMGqrn0JU1W0Mh1/Z8wZzYPxqUrXeBboCQ==",
      "dev": true
    },
    "ci-parallel-vars": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/ci-parallel-vars/-/ci-parallel-vars-1.0.1.tgz",
      "integrity": "sha512-uvzpYrpmidaoxvIQHM+rKSrigjOe9feHYbw4uOI2gdfe1C3xIlxO+kVXq83WQWNniTf8bAxVpy+cQeFQsMERKg==",
      "dev": true
    },
    "clean-stack": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/clean-stack/-/clean-stack-2.2.0.tgz",
      "integrity": "sha512-4diC9HaTE+KRAMWhDhrGOECgWZxoevMc5TlkObMqNSsVU62PYzXZ/SMTjzyGAFF1YusgxGcSWTEXBhp0CPwQ1A==",
      "dev": true
    },
    "clean-yaml-object": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/clean-yaml-object/-/clean-yaml-object-0.1.0.tgz",
      "integrity": "sha1-Y/sRDcLOGoTcIfbZM0h20BCui2g=",
      "dev": true
    },
    "cli-boxes": {
      "version": "2.2.1",
      "resolved": "https://registry.npmjs.org/cli-boxes/-/cli-boxes-2.2.1.tgz",
      "integrity": "sha512-y4coMcylgSCdVinjiDBuR8PCC2bLjyGTwEmPb9NHR/QaNU6EUOXcTY/s6VjGMD6ENSEaeQYHCY0GNGS5jfMwPw==",
      "dev": true
    },
    "cli-cursor": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/cli-cursor/-/cli-cursor-3.1.0.tgz",
      "integrity": "sha512-I/zHAwsKf9FqGoXM4WWRACob9+SNukZTd94DWF57E4toouRulbCxcUh6RKUEOQlYTHJnzkPMySvPNaaSLNfLZw==",
      "dev": true,
      "requires": {
        "restore-cursor": "^3.1.0"
      }
    },
    "cli-spinners": {
      "version": "2.6.1",
      "resolved": "https://registry.npmjs.org/cli-spinners/-/cli-spinners-2.6.1.tgz",
      "integrity": "sha512-x/5fWmGMnbKQAaNwN+UZlV79qBLM9JFnJuJ03gIi5whrob0xV0ofNVHy9DhwGdsMJQc2OKv0oGmLzvaqvAVv+g==",
      "dev": true
    },
    "cli-truncate": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/cli-truncate/-/cli-truncate-2.1.0.tgz",
      "integrity": "sha512-n8fOixwDD6b/ObinzTrp1ZKFzbgvKZvuz/TvejnLn1aQfC6r52XEx85FmuC+3HI+JM7coBRXUvNqEU2PHVrHpg==",
      "dev": true,
      "requires": {
        "slice-ansi": "^3.0.0",
        "string-width": "^4.2.0"
      }
    },
    "cliui": {
      "version": "7.0.4",
      "resolved": "https://registry.npmjs.org/cliui/-/cliui-7.0.4.tgz",
      "integrity": "sha512-OcRE68cOsVMXp1Yvonl/fzkQOyjLSu/8bhPDfQt0e0/Eb283TKP20Fs2MqoPsr9SwA595rRCA+QMzYc9nBP+JQ==",
      "dev": true,
      "requires": {
        "string-width": "^4.2.0",
        "strip-ansi": "^6.0.0",
        "wrap-ansi": "^7.0.0"
      }
    },
    "clone": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/clone/-/clone-1.0.4.tgz",
      "integrity": "sha1-2jCcwmPfFZlMaIypAheco8fNfH4=",
      "dev": true
    },
    "clone-response": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/clone-response/-/clone-response-1.0.2.tgz",
      "integrity": "sha1-0dyXOSAxTfZ/vrlCI7TuNQI56Ws=",
      "dev": true,
      "requires": {
        "mimic-response": "^1.0.0"
      }
    },
    "code-excerpt": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/code-excerpt/-/code-excerpt-3.0.0.tgz",
      "integrity": "sha512-VHNTVhd7KsLGOqfX3SyeO8RyYPMp1GJOg194VITk04WMYCv4plV68YWe6TJZxd9MhobjtpMRnVky01gqZsalaw==",
      "dev": true,
      "requires": {
        "convert-to-spaces": "^1.0.1"
      }
    },
    "color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "dev": true,
      "requires": {
        "color-name": "~1.1.4"
      }
    },
    "color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "dev": true
    },
    "common-path-prefix": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/common-path-prefix/-/common-path-prefix-3.0.0.tgz",
      "integrity": "sha512-QE33hToZseCH3jS0qN96O/bSh3kaw/h+Tq7ngyY9eWDUnTlTNUyqfqvCXioLe5Na5jFsL78ra/wuBU4iuEgd4w==",
      "dev": true
    },
    "concat-map": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
      "integrity": "sha1-2Klr13/Wjfd5OnMDajug1UBdR3s=",
      "dev": true
    },
    "concordance": {
      "version": "5.0.4",
      "resolved": "https://registry.npmjs.org/concordance/-/concordance-5.0.4.tgz",
      "integrity": "sha512-OAcsnTEYu1ARJqWVGwf4zh4JDfHZEaSNlNccFmt8YjB2l/n19/PF2viLINHc57vO4FKIAFl2FWASIGZZWZ2Kxw==",
      "dev": true,
      "requires": {
        "date-time": "^3.1.0",
        "esutils": "^2.0.3",
        "fast-diff": "^1.2.0",
        "js-string-escape": "^1.0.1",
        "lodash": "^4.17.15",
        "md5-hex": "^3.0.1",
        "semver": "^7.3.2",
        "well-known-symbols": "^2.0.0"
      }
    },
    "configstore": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/configstore/-/configstore-5.0.1.tgz",
      "integrity": "sha512-aMKprgk5YhBNyH25hj8wGt2+D52Sw1DRRIzqBwLp2Ya9mFmY8KPvvtvmna8SxVR9JMZ4kzMD68N22vlaRpkeFA==",
      "dev": true,
      "requires": {
        "dot-prop": "^5.2.0",
        "graceful-fs": "^4.1.2",
        "make-dir": "^3.0.0",
        "unique-string": "^2.0.0",
        "write-file-atomic": "^3.0.0",
        "xdg-basedir": "^4.0.0"
      }
    },
    "convert-source-map": {
      "version": "1.8.0",
      "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-1.8.0.tgz",
      "integrity": "sha512-+OQdjP49zViI/6i7nIJpA8rAl4sV/JdPfU9nZs3VqOwGIgizICvuN2ru6fMd+4llL0tar18UYJXfZ/TWtmhUjA==",
      "dev": true,
      "requires": {
        "safe-buffer": "~5.1.1"
      }
    },
    "convert-to-spaces": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/convert-to-spaces/-/convert-to-spaces-1.0.2.tgz",
      "integrity": "sha1-fj5Iu+bZl7FBfdyihoIEtNPYVxU=",
      "dev": true
    },
    "create-require": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/create-require/-/create-require-1.1.1.tgz",
      "integrity": "sha512-dcKFX3jn0MpIaXjisoRvexIJVEKzaq7z2rZKxf+MSr9TkdmHmsU4m2lcLojrj/FHl8mk5VxMmYA+ftRkP/3oKQ==",
      "dev": true
    },
    "cross-spawn": {
      "version": "7.0.3",
      "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.3.tgz",
      "integrity": "sha512-iRDPJKUPVEND7dHPO8rkbOnPpyDygcDFtWjpeWNCgy8WP2rXcxXL8TskReQl6OrB2G7+UJrags1q15Fudc7G6w==",
      "dev": true,
      "requires": {
        "path-key": "^3.1.0",
        "shebang-command": "^2.0.0",
        "which": "^2.0.1"
      }
    },
    "crypto-random-string": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/crypto-random-string/-/crypto-random-string-2.0.0.tgz",
      "integrity": "sha512-v1plID3y9r/lPhviJ1wrXpLeyUIGAZ2SHNYTEapm7/8A9nLPoyvVp3RK/EPFqn5kEznyWgYZNsRtYYIWbuG8KA==",
      "dev": true
    },
    "currently-unhandled": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/currently-unhandled/-/currently-unhandled-0.4.1.tgz",
      "integrity": "sha1-mI3zP+qxke95mmE2nddsF635V+o=",
      "dev": true,
      "requires": {
        "array-find-index": "^1.0.1"
      }
    },
    "date-time": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/date-time/-/date-time-3.1.0.tgz",
      "integrity": "sha512-uqCUKXE5q1PNBXjPqvwhwJf9SwMoAHBgWJ6DcrnS5o+W2JOiIILl0JEdVD8SGujrNS02GGxgwAg2PN2zONgtjg==",
      "dev": true,
      "requires": {
        "time-zone": "^1.0.0"
      }
    },
    "debug": {
      "version": "4.3.3",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.3.tgz",
      "integrity": "sha512-/zxw5+vh1Tfv+4Qn7a5nsbcJKPaSvCDhojn6FEl9vupwK2VCSDtEiEtqr8DFtzYFOdz63LBkxec7DYuc2jon6Q==",
      "dev": true,
      "requires": {
        "ms": "2.1.2"
      },
      "dependencies": {
        "ms": {
          "version": "2.1.2",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
          "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==",
          "dev": true
        }
      }
    },
    "decompress-response": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/decompress-response/-/decompress-response-6.0.0.tgz",
      "integrity": "sha512-aW35yZM6Bb/4oJlZncMH2LCoZtJXTRxES17vE3hoRiowU2kWHaJKFkSBDnDR+cm9J+9QhXmREyIfv0pji9ejCQ==",
      "dev": true,
      "requires": {
        "mimic-response": "^3.1.0"
      },
      "dependencies": {
        "mimic-response": {
          "version": "3.1.0",
          "resolved": "https://registry.npmjs.org/mimic-response/-/mimic-response-3.1.0.tgz",
          "integrity": "sha512-z0yWI+4FDrrweS8Zmt4Ej5HdJmky15+L2e6Wgn3+iK5fWzb6T3fhNFq2+MeTRb064c6Wr4N/wv0DzQTjNzHNGQ==",
          "dev": true
        }
      }
    },
    "deep-extend": {
      "version": "0.6.0",
      "resolved": "https://registry.npmjs.org/deep-extend/-/deep-extend-0.6.0.tgz",
      "integrity": "sha512-LOHxIOaPYdHlJRtCQfDIVZtfw/ufM8+rVj649RIHzcm/vGwQRXFt6OPqIFWsm2XEMrNIEtWR64sY1LEKD2vAOA==",
      "dev": true
    },
    "defaults": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/defaults/-/defaults-1.0.3.tgz",
      "integrity": "sha1-xlYFHpgX2f8I7YgUd/P+QBnz730=",
      "dev": true,
      "requires": {
        "clone": "^1.0.2"
      }
    },
    "defer-to-connect": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/defer-to-connect/-/defer-to-connect-2.0.1.tgz",
      "integrity": "sha512-4tvttepXG1VaYGrRibk5EwJd1t4udunSOVMdLSAL6mId1ix438oPwPZMALY41FCijukO1L0twNcGsdzS7dHgDg==",
      "dev": true
    },
    "del": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/del/-/del-6.0.0.tgz",
      "integrity": "sha512-1shh9DQ23L16oXSZKB2JxpL7iMy2E0S9d517ptA1P8iw0alkPtQcrKH7ru31rYtKwF499HkTu+DRzq3TCKDFRQ==",
      "dev": true,
      "requires": {
        "globby": "^11.0.1",
        "graceful-fs": "^4.2.4",
        "is-glob": "^4.0.1",
        "is-path-cwd": "^2.2.0",
        "is-path-inside": "^3.0.2",
        "p-map": "^4.0.0",
        "rimraf": "^3.0.2",
        "slash": "^3.0.0"
      }
    },
    "depd": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/depd/-/depd-2.0.0.tgz",
      "integrity": "sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw==",
      "dev": true
    },
    "diff": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/diff/-/diff-4.0.2.tgz",
      "integrity": "sha512-58lmxKSA4BNyLz+HHMUzlOEpg09FV+ev6ZMe3vJihgdxzgcwZ8VoEEPmALCZG9LmqfVoNMMKpttIYTVG6uDY7A==",
      "dev": true
    },
    "dir-glob": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/dir-glob/-/dir-glob-3.0.1.tgz",
      "integrity": "sha512-WkrWp9GR4KXfKGYzOLmTuGVi1UWFfws377n9cc55/tb6DuqyF6pcQ5AbiHEshaDpY9v6oaSr2XCDidGmMwdzIA==",
      "dev": true,
      "requires": {
        "path-type": "^4.0.0"
      }
    },
    "dot-prop": {
      "version": "5.3.0",
      "resolved": "https://registry.npmjs.org/dot-prop/-/dot-prop-5.3.0.tgz",
      "integrity": "sha512-QM8q3zDe58hqUqjraQOmzZ1LIH9SWQJTlEKCH4kJ2oQvLZk7RbQXvtDM2XEq3fwkV9CCvvH4LA0AV+ogFsBM2Q==",
      "dev": true,
      "requires": {
        "is-obj": "^2.0.0"
      }
    },
    "duplexer3": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/duplexer3/-/duplexer3-0.1.4.tgz",
      "integrity": "sha1-7gHdHKwO08vH/b6jfcCo8c4ALOI=",
      "dev": true
    },
    "emittery": {
      "version": "0.8.1",
      "resolved": "https://registry.npmjs.org/emittery/-/emittery-0.8.1.tgz",
      "integrity": "sha512-uDfvUjVrfGJJhymx/kz6prltenw1u7WrCg1oa94zYY8xxVpLLUu045LAT0dhDZdXG58/EpPL/5kA180fQ/qudg==",
      "dev": true
    },
    "emoji-regex": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
      "dev": true
    },
    "end-of-stream": {
      "version": "1.4.4",
      "resolved": "https://registry.npmjs.org/end-of-stream/-/end-of-stream-1.4.4.tgz",
      "integrity": "sha512-+uw1inIHVPQoaVuHzRyXd21icM+cnt4CzD5rW+NC1wjOUSTOs+Te7FOv7AhN7vS9x/oIyhLP5PR1H+phQAHu5Q==",
      "dev": true,
      "requires": {
        "once": "^1.4.0"
      }
    },
    "equal-length": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/equal-length/-/equal-length-1.0.1.tgz",
      "integrity": "sha1-IcoRLUirJLTh5//A5TOdMf38J0w=",
      "dev": true
    },
    "error-ex": {
      "version": "1.3.2",
      "resolved": "https://registry.npmjs.org/error-ex/-/error-ex-1.3.2.tgz",
      "integrity": "sha512-7dFHNmqeFSEt2ZBsCriorKnn3Z2pj+fd9kmI6QoWw4//DL+icEBfc0U7qJCisqrTsKTjw4fNFy2pW9OqStD84g==",
      "dev": true,
      "requires": {
        "is-arrayish": "^0.2.1"
      }
    },
    "error-polyfill": {
      "version": "0.1.3",
      "resolved": "https://registry.npmjs.org/error-polyfill/-/error-polyfill-0.1.3.tgz",
      "integrity": "sha512-XHJk60ufE+TG/ydwp4lilOog549iiQF2OAPhkk9DdiYWMrltz5yhDz/xnKuenNwP7gy3dsibssO5QpVhkrSzzg==",
      "dev": true,
      "requires": {
        "capability": "^0.2.5",
        "o3": "^1.0.3",
        "u3": "^0.1.1"
      }
    },
    "escalade": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.1.1.tgz",
      "integrity": "sha512-k0er2gUkLf8O0zKJiAhmkTnJlTvINGv7ygDNPbeIsX/TJjGJZHuh9B2UxbsaEkmlEo9MfhrSzmhIlhRlI2GXnw==",
      "dev": true
    },
    "escape-goat": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/escape-goat/-/escape-goat-2.1.1.tgz",
      "integrity": "sha512-8/uIhbG12Csjy2JEW7D9pHbreaVaS/OpN3ycnyvElTdwM5n6GY6W6e2IPemfvGZeUMqZ9A/3GqIZMgKnBhAw/Q==",
      "dev": true
    },
    "escape-string-regexp": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-4.0.0.tgz",
      "integrity": "sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==",
      "dev": true
    },
    "esprima": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/esprima/-/esprima-4.0.1.tgz",
      "integrity": "sha512-eGuFFw7Upda+g4p+QHvnW0RyTX/SVeJBDM/gCtMARO0cLuT2HcEKnTPvhjV6aGeqrCB/sbNop0Kszm0jsaWU4A==",
      "dev": true
    },
    "esutils": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/esutils/-/esutils-2.0.3.tgz",
      "integrity": "sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==",
      "dev": true
    },
    "execa": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/execa/-/execa-5.1.1.tgz",
      "integrity": "sha512-8uSpZZocAZRBAPIEINJj3Lo9HyGitllczc27Eh5YYojjMFMn8yHMDMaUHE2Jqfq05D/wucwI4JGURyXt1vchyg==",
      "dev": true,
      "requires": {
        "cross-spawn": "^7.0.3",
        "get-stream": "^6.0.0",
        "human-signals": "^2.1.0",
        "is-stream": "^2.0.0",
        "merge-stream": "^2.0.0",
        "npm-run-path": "^4.0.1",
        "onetime": "^5.1.2",
        "signal-exit": "^3.0.3",
        "strip-final-newline": "^2.0.0"
      }
    },
    "fast-diff": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/fast-diff/-/fast-diff-1.2.0.tgz",
      "integrity": "sha512-xJuoT5+L99XlZ8twedaRf6Ax2TgQVxvgZOYoPKqZufmJib0tL2tegPBOZb1pVNgIhlqDlA0eO0c3wBvQcmzx4w==",
      "dev": true
    },
    "fast-glob": {
      "version": "3.2.11",
      "resolved": "https://registry.npmjs.org/fast-glob/-/fast-glob-3.2.11.tgz",
      "integrity": "sha512-xrO3+1bxSo3ZVHAnqzyuewYT6aMFHRAd4Kcs92MAonjwQZLsK9d0SF1IyQ3k5PoirxTW0Oe/RqFgMQ6TcNE5Ew==",
      "dev": true,
      "requires": {
        "@nodelib/fs.stat": "^2.0.2",
        "@nodelib/fs.walk": "^1.2.3",
        "glob-parent": "^5.1.2",
        "merge2": "^1.3.0",
        "micromatch": "^4.0.4"
      }
    },
    "fastq": {
      "version": "1.13.0",
      "resolved": "https://registry.npmjs.org/fastq/-/fastq-1.13.0.tgz",
      "integrity": "sha512-YpkpUnK8od0o1hmeSc7UUs/eB/vIPWJYjKck2QKIzAf71Vm1AAQ3EbuZB3g2JIy+pg+ERD0vqI79KyZiB2e2Nw==",
      "dev": true,
      "requires": {
        "reusify": "^1.0.4"
      }
    },
    "figures": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/figures/-/figures-3.2.0.tgz",
      "integrity": "sha512-yaduQFRKLXYOGgEn6AZau90j3ggSOyiqXU0F9JZfeXYhNa+Jk4X+s45A2zg5jns87GAFa34BBm2kXw4XpNcbdg==",
      "dev": true,
      "requires": {
        "escape-string-regexp": "^1.0.5"
      },
      "dependencies": {
        "escape-string-regexp": {
          "version": "1.0.5",
          "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-1.0.5.tgz",
          "integrity": "sha1-G2HAViGQqN/2rjuyzwIAyhMLhtQ=",
          "dev": true
        }
      }
    },
    "fill-range": {
      "version": "7.0.1",
      "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.0.1.tgz",
      "integrity": "sha512-qOo9F+dMUmC2Lcb4BbVvnKJxTPjCm+RRpe4gDuGrzkL7mEVl/djYSu2OdQ2Pa302N4oqkSg9ir6jaLWJ2USVpQ==",
      "dev": true,
      "requires": {
        "to-regex-range": "^5.0.1"
      }
    },
    "find-up": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/find-up/-/find-up-3.0.0.tgz",
      "integrity": "sha512-1yD6RmLI1XBfxugvORwlck6f75tYL+iR0jqwsOrOxMZyGYqUuDhJ0l4AXdO1iX/FTs9cBAMEk1gWSEx1kSbylg==",
      "dev": true,
      "requires": {
        "locate-path": "^3.0.0"
      }
    },
    "fs-extra": {
      "version": "10.0.0",
      "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-10.0.0.tgz",
      "integrity": "sha512-C5owb14u9eJwizKGdchcDUQeFtlSHHthBk8pbX9Vc1PFZrLombudjDnNns88aYslCyF6IY5SUw3Roz6xShcEIQ==",
      "dev": true,
      "requires": {
        "graceful-fs": "^4.2.0",
        "jsonfile": "^6.0.1",
        "universalify": "^2.0.0"
      }
    },
    "fs-minipass": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/fs-minipass/-/fs-minipass-2.1.0.tgz",
      "integrity": "sha512-V/JgOLFCS+R6Vcq0slCuaeWEdNC3ouDlJMNIsacH2VtALiu9mV4LPrHc5cDl8k5aw6J8jwgWWpiTo5RYhmIzvg==",
      "dev": true,
      "requires": {
        "minipass": "^3.0.0"
      }
    },
    "fs.realpath": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz",
      "integrity": "sha1-FQStJSMVjKpA20onh8sBQRmU6k8=",
      "dev": true
    },
    "fsevents": {
      "version": "2.3.2",
      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.2.tgz",
      "integrity": "sha512-xiqMQR4xAeHTuB9uWm+fFRcIOgKBMiOBP+eXiyT7jsgVCq1bkVygt00oASowB7EdtpOHaaPgKt812P9ab+DDKA==",
      "dev": true,
      "optional": true
    },
    "function-bind": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.1.tgz",
      "integrity": "sha512-yIovAzMX49sF8Yl58fSCWJ5svSLuaibPxXQJFLmBObTuCr0Mf1KiPopGM9NiFjiYBCbfaa2Fh6breQ6ANVTI0A==",
      "dev": true
    },
    "get-caller-file": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/get-caller-file/-/get-caller-file-2.0.5.tgz",
      "integrity": "sha512-DyFP3BM/3YHTQOCUL/w0OZHR0lpKeGrxotcHWcqNEdnltqFwXVfhEBQ94eIo34AfQpo0rGki4cyIiftY06h2Fg==",
      "dev": true
    },
    "get-stream": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/get-stream/-/get-stream-6.0.1.tgz",
      "integrity": "sha512-ts6Wi+2j3jQjqi70w5AlN8DFnkSwC+MqmxEzdEALB2qXZYV3X/b1CTfgPLGJNMeAWxdPfU8FO1ms3NUfaHCPYg==",
      "dev": true
    },
    "glob": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/glob/-/glob-7.2.0.tgz",
      "integrity": "sha512-lmLf6gtyrPq8tTjSmrO94wBeQbFR3HbLHbuyD69wuyQkImp2hWqMGB47OX65FBkPffO641IP9jWa1z4ivqG26Q==",
      "dev": true,
      "requires": {
        "fs.realpath": "^1.0.0",
        "inflight": "^1.0.4",
        "inherits": "2",
        "minimatch": "^3.0.4",
        "once": "^1.3.0",
        "path-is-absolute": "^1.0.0"
      }
    },
    "glob-parent": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
      "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
      "dev": true,
      "requires": {
        "is-glob": "^4.0.1"
      }
    },
    "global-dirs": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/global-dirs/-/global-dirs-3.0.0.tgz",
      "integrity": "sha512-v8ho2DS5RiCjftj1nD9NmnfaOzTdud7RRnVd9kFNOjqZbISlx5DQ+OrTkywgd0dIt7oFCvKetZSHoHcP3sDdiA==",
      "dev": true,
      "requires": {
        "ini": "2.0.0"
      }
    },
    "globby": {
      "version": "11.1.0",
      "resolved": "https://registry.npmjs.org/globby/-/globby-11.1.0.tgz",
      "integrity": "sha512-jhIXaOzy1sb8IyocaruWSn1TjmnBVs8Ayhcy83rmxNJ8q2uWKCAj3CnJY+KpGSXCueAPc0i05kVvVKtP1t9S3g==",
      "dev": true,
      "requires": {
        "array-union": "^2.1.0",
        "dir-glob": "^3.0.1",
        "fast-glob": "^3.2.9",
        "ignore": "^5.2.0",
        "merge2": "^1.4.1",
        "slash": "^3.0.0"
      }
    },
    "got": {
      "version": "11.8.3",
      "resolved": "https://registry.npmjs.org/got/-/got-11.8.3.tgz",
      "integrity": "sha512-7gtQ5KiPh1RtGS9/Jbv1ofDpBFuq42gyfEib+ejaRBJuj/3tQFeR5+gw57e4ipaU8c/rCjvX6fkQz2lyDlGAOg==",
      "dev": true,
      "requires": {
        "@sindresorhus/is": "^4.0.0",
        "@szmarczak/http-timer": "^4.0.5",
        "@types/cacheable-request": "^6.0.1",
        "@types/responselike": "^1.0.0",
        "cacheable-lookup": "^5.0.3",
        "cacheable-request": "^7.0.2",
        "decompress-response": "^6.0.0",
        "http2-wrapper": "^1.0.0-beta.5.2",
        "lowercase-keys": "^2.0.0",
        "p-cancelable": "^2.0.0",
        "responselike": "^2.0.0"
      }
    },
    "graceful-fs": {
      "version": "4.2.9",
      "resolved": "https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.2.9.tgz",
      "integrity": "sha512-NtNxqUcXgpW2iMrfqSfR73Glt39K+BLwWsPs94yR63v45T0Wbej7eRmL5cWfwEgqXnmjQp3zaJTshdRW/qC2ZQ==",
      "dev": true
    },
    "has": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/has/-/has-1.0.3.tgz",
      "integrity": "sha512-f2dvO0VU6Oej7RkWJGrehjbzMAjFp5/VKPp5tTpWIV4JHHZK1/BxbFRtf/siA2SWTe09caDmVtYYzWEIbBS4zw==",
      "dev": true,
      "requires": {
        "function-bind": "^1.1.1"
      }
    },
    "has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "dev": true
    },
    "has-yarn": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/has-yarn/-/has-yarn-2.1.0.tgz",
      "integrity": "sha512-UqBRqi4ju7T+TqGNdqAO0PaSVGsDGJUBQvk9eUWNGRY1CFGDzYhLWoM7JQEemnlvVcv/YEmc2wNW8BC24EnUsw==",
      "dev": true
    },
    "hosted-git-info": {
      "version": "2.8.9",
      "resolved": "https://registry.npmjs.org/hosted-git-info/-/hosted-git-info-2.8.9.tgz",
      "integrity": "sha512-mxIDAb9Lsm6DoOJ7xH+5+X4y1LU/4Hi50L9C5sIswK3JzULS4bwk1FvjdBgvYR4bzT4tuUQiC15FE2f5HbLvYw==",
      "dev": true
    },
    "http-cache-semantics": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/http-cache-semantics/-/http-cache-semantics-4.1.0.tgz",
      "integrity": "sha512-carPklcUh7ROWRK7Cv27RPtdhYhUsela/ue5/jKzjegVvXDqM2ILE9Q2BGn9JZJh1g87cp56su/FgQSzcWS8cQ==",
      "dev": true
    },
    "http-errors": {
      "version": "1.8.1",
      "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-1.8.1.tgz",
      "integrity": "sha512-Kpk9Sm7NmI+RHhnj6OIWDI1d6fIoFAtFt9RLaTMRlg/8w49juAStsrBgp0Dp4OdxdVbRIeKhtCUvoi/RuAhO4g==",
      "dev": true,
      "requires": {
        "depd": "~1.1.2",
        "inherits": "2.0.4",
        "setprototypeof": "1.2.0",
        "statuses": ">= 1.5.0 < 2",
        "toidentifier": "1.0.1"
      },
      "dependencies": {
        "depd": {
          "version": "1.1.2",
          "resolved": "https://registry.npmjs.org/depd/-/depd-1.1.2.tgz",
          "integrity": "sha1-m81S4UwJd2PnSbJ0xDRu0uVgtak=",
          "dev": true
        }
      }
    },
    "http2-wrapper": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/http2-wrapper/-/http2-wrapper-1.0.3.tgz",
      "integrity": "sha512-V+23sDMr12Wnz7iTcDeJr3O6AIxlnvT/bmaAAAP/Xda35C90p9599p0F1eHR/N1KILWSoWVAiOMFjBBXaXSMxg==",
      "dev": true,
      "requires": {
        "quick-lru": "^5.1.1",
        "resolve-alpn": "^1.0.0"
      }
    },
    "human-signals": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/human-signals/-/human-signals-2.1.0.tgz",
      "integrity": "sha512-B4FFZ6q/T2jhhksgkbEW3HBvWIfDW85snkQgawt07S7J5QXTk6BkNV+0yAeZrM5QpMAdYlocGoljn0sJ/WQkFw==",
      "dev": true
    },
    "ieee754": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/ieee754/-/ieee754-1.2.1.tgz",
      "integrity": "sha512-dcyqhDvX1C46lXZcVqCpK+FtMRQVdIMN6/Df5js2zouUsqG7I6sFxitIC+7KYK29KdXOLHdu9zL4sFnoVQnqaA==",
      "dev": true
    },
    "ignore": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/ignore/-/ignore-5.2.0.tgz",
      "integrity": "sha512-CmxgYGiEPCLhfLnpPp1MoRmifwEIOgjcHXxOBjv7mY96c+eWScsOP9c112ZyLdWHi0FxHjI+4uVhKYp/gcdRmQ==",
      "dev": true
    },
    "ignore-by-default": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ignore-by-default/-/ignore-by-default-2.0.0.tgz",
      "integrity": "sha512-+mQSgMRiFD3L3AOxLYOCxjIq4OnAmo5CIuC+lj5ehCJcPtV++QacEV7FdpzvYxH6DaOySWzQU6RR0lPLy37ckA==",
      "dev": true
    },
    "import-lazy": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/import-lazy/-/import-lazy-2.1.0.tgz",
      "integrity": "sha1-BWmOPUXIjo1+nZLLBYTnfwlvPkM=",
      "dev": true
    },
    "import-local": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/import-local/-/import-local-3.1.0.tgz",
      "integrity": "sha512-ASB07uLtnDs1o6EHjKpX34BKYDSqnFerfTOJL2HvMqF70LnxpjkzDB8J44oT9pu4AMPkQwf8jl6szgvNd2tRIg==",
      "dev": true,
      "requires": {
        "pkg-dir": "^4.2.0",
        "resolve-cwd": "^3.0.0"
      }
    },
    "imurmurhash": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/imurmurhash/-/imurmurhash-0.1.4.tgz",
      "integrity": "sha1-khi5srkoojixPcT7a21XbyMUU+o=",
      "dev": true
    },
    "indent-string": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/indent-string/-/indent-string-4.0.0.tgz",
      "integrity": "sha512-EdDDZu4A2OyIK7Lr/2zG+w5jmbuk1DVBnEwREQvBzspBJkCEbRa8GxU1lghYcaGJCnRWibjDXlq779X1/y5xwg==",
      "dev": true
    },
    "inflight": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz",
      "integrity": "sha1-Sb1jMdfQLQwJvJEKEHW6gWW1bfk=",
      "dev": true,
      "requires": {
        "once": "^1.3.0",
        "wrappy": "1"
      }
    },
    "inherits": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==",
      "dev": true
    },
    "ini": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ini/-/ini-2.0.0.tgz",
      "integrity": "sha512-7PnF4oN3CvZF23ADhA5wRaYEQpJ8qygSkbtTXWBeXWXmEVRXK+1ITciHWwHhsjv1TmW0MgacIv6hEi5pX5NQdA==",
      "dev": true
    },
    "irregular-plurals": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/irregular-plurals/-/irregular-plurals-3.3.0.tgz",
      "integrity": "sha512-MVBLKUTangM3EfRPFROhmWQQKRDsrgI83J8GS3jXy+OwYqiR2/aoWndYQ5416jLE3uaGgLH7ncme3X9y09gZ3g==",
      "dev": true
    },
    "is-arrayish": {
      "version": "0.2.1",
      "resolved": "https://registry.npmjs.org/is-arrayish/-/is-arrayish-0.2.1.tgz",
      "integrity": "sha1-d8mYQFJ6qOyxqLppe4BkWnqSap0=",
      "dev": true
    },
    "is-binary-path": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/is-binary-path/-/is-binary-path-2.1.0.tgz",
      "integrity": "sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==",
      "dev": true,
      "requires": {
        "binary-extensions": "^2.0.0"
      }
    },
    "is-ci": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/is-ci/-/is-ci-2.0.0.tgz",
      "integrity": "sha512-YfJT7rkpQB0updsdHLGWrvhBJfcfzNNawYDNIyQXJz0IViGf75O8EBPKSdvw2rF+LGCsX4FZ8tcr3b19LcZq4w==",
      "dev": true,
      "requires": {
        "ci-info": "^2.0.0"
      }
    },
    "is-core-module": {
      "version": "2.8.1",
      "resolved": "https://registry.npmjs.org/is-core-module/-/is-core-module-2.8.1.tgz",
      "integrity": "sha512-SdNCUs284hr40hFTFP6l0IfZ/RSrMXF3qgoRHd3/79unUTvrFO/JoXwkGm+5J/Oe3E/b5GsnG330uUNgRpu1PA==",
      "dev": true,
      "requires": {
        "has": "^1.0.3"
      }
    },
    "is-error": {
      "version": "2.2.2",
      "resolved": "https://registry.npmjs.org/is-error/-/is-error-2.2.2.tgz",
      "integrity": "sha512-IOQqts/aHWbiisY5DuPJQ0gcbvaLFCa7fBa9xoLfxBZvQ+ZI/Zh9xoI7Gk+G64N0FdK4AbibytHht2tWgpJWLg==",
      "dev": true
    },
    "is-extglob": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
      "integrity": "sha1-qIwCU1eR8C7TfHahueqXc8gz+MI=",
      "dev": true
    },
    "is-fullwidth-code-point": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
      "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
      "dev": true
    },
    "is-glob": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
      "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
      "dev": true,
      "requires": {
        "is-extglob": "^2.1.1"
      }
    },
    "is-installed-globally": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/is-installed-globally/-/is-installed-globally-0.4.0.tgz",
      "integrity": "sha512-iwGqO3J21aaSkC7jWnHP/difazwS7SFeIqxv6wEtLU8Y5KlzFTjyqcSIT0d8s4+dDhKytsk9PJZ2BkS5eZwQRQ==",
      "dev": true,
      "requires": {
        "global-dirs": "^3.0.0",
        "is-path-inside": "^3.0.2"
      }
    },
    "is-interactive": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/is-interactive/-/is-interactive-1.0.0.tgz",
      "integrity": "sha512-2HvIEKRoqS62guEC+qBjpvRubdX910WCMuJTZ+I9yvqKU2/12eSL549HMwtabb4oupdj2sMP50k+XJfB/8JE6w==",
      "dev": true
    },
    "is-npm": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/is-npm/-/is-npm-5.0.0.tgz",
      "integrity": "sha512-WW/rQLOazUq+ST/bCAVBp/2oMERWLsR7OrKyt052dNDk4DHcDE0/7QSXITlmi+VBcV13DfIbysG3tZJm5RfdBA==",
      "dev": true
    },
    "is-number": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",
      "integrity": "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==",
      "dev": true
    },
    "is-obj": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/is-obj/-/is-obj-2.0.0.tgz",
      "integrity": "sha512-drqDG3cbczxxEJRoOXcOjtdp1J/lyp1mNn0xaznRs8+muBhgQcrnbspox5X5fOw0HnMnbfDzvnEMEtqDEJEo8w==",
      "dev": true
    },
    "is-path-cwd": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/is-path-cwd/-/is-path-cwd-2.2.0.tgz",
      "integrity": "sha512-w942bTcih8fdJPJmQHFzkS76NEP8Kzzvmw92cXsazb8intwLqPibPPdXf4ANdKV3rYMuuQYGIWtvz9JilB3NFQ==",
      "dev": true
    },
    "is-path-inside": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/is-path-inside/-/is-path-inside-3.0.3.tgz",
      "integrity": "sha512-Fd4gABb+ycGAmKou8eMftCupSir5lRxqf4aD/vd0cD2qc4HL07OjCeuHMr8Ro4CoMaeCKDB0/ECBOVWjTwUvPQ==",
      "dev": true
    },
    "is-plain-object": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/is-plain-object/-/is-plain-object-5.0.0.tgz",
      "integrity": "sha512-VRSzKkbMm5jMDoKLbltAkFQ5Qr7VDiTFGXxYFXXowVj387GeGNOCsOH6Msy00SGZ3Fp84b1Naa1psqgcCIEP5Q==",
      "dev": true
    },
    "is-promise": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/is-promise/-/is-promise-4.0.0.tgz",
      "integrity": "sha512-hvpoI6korhJMnej285dSg6nu1+e6uxs7zG3BYAm5byqDsgJNWwxzM6z6iZiAgQR4TJ30JmBTOwqZUw3WlyH3AQ==",
      "dev": true
    },
    "is-stream": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/is-stream/-/is-stream-2.0.1.tgz",
      "integrity": "sha512-hFoiJiTl63nn+kstHGBtewWSKnQLpyb155KHheA1l39uvtO9nWIop1p3udqPcUd/xbF1VLMO4n7OI6p7RbngDg==",
      "dev": true
    },
    "is-typedarray": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/is-typedarray/-/is-typedarray-1.0.0.tgz",
      "integrity": "sha1-5HnICFjfDBsR3dppQPlgEfzaSpo=",
      "dev": true
    },
    "is-unicode-supported": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/is-unicode-supported/-/is-unicode-supported-0.1.0.tgz",
      "integrity": "sha512-knxG2q4UC3u8stRGyAVJCOdxFmv5DZiRcdlIaAQXAbSfJya+OhopNotLQrstBhququ4ZpuKbDc/8S6mgXgPFPw==",
      "dev": true
    },
    "is-yarn-global": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/is-yarn-global/-/is-yarn-global-0.3.0.tgz",
      "integrity": "sha512-VjSeb/lHmkoyd8ryPVIKvOCn4D1koMqY+vqyjjUfc3xyKtP4dYOxM44sZrnqQSzSds3xyOrUTLTC9LVCVgLngw==",
      "dev": true
    },
    "isexe": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
      "integrity": "sha1-6PvzdNxVb/iUehDcsFctYz8s+hA=",
      "dev": true
    },
    "js-sha256": {
      "version": "0.9.0",
      "resolved": "https://registry.npmjs.org/js-sha256/-/js-sha256-0.9.0.tgz",
      "integrity": "sha512-sga3MHh9sgQN2+pJ9VYZ+1LPwXOxuBJBA5nrR5/ofPfuiJBE2hnjsaN8se8JznOmGLN2p49Pe5U/ttafcs/apA==",
      "dev": true
    },
    "js-string-escape": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/js-string-escape/-/js-string-escape-1.0.1.tgz",
      "integrity": "sha1-4mJbrbwNZ8dTPp7cEGjFh65BN+8=",
      "dev": true
    },
    "js-tokens": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
      "integrity": "sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==",
      "dev": true
    },
    "js-yaml": {
      "version": "3.14.1",
      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-3.14.1.tgz",
      "integrity": "sha512-okMH7OXXJ7YrN9Ok3/SXrnu4iX9yOk+25nqX4imS2npuvTYDmo/QEZoqwZkYaIDk3jVvBOTOIEgEhaLOynBS9g==",
      "dev": true,
      "requires": {
        "argparse": "^1.0.7",
        "esprima": "^4.0.0"
      }
    },
    "json-buffer": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/json-buffer/-/json-buffer-3.0.1.tgz",
      "integrity": "sha512-4bV5BfR2mqfQTJm+V5tPPdf+ZpuhiIvTuAB5g8kcrXOZpTT/QwwVRWBywX1ozr6lEuPdbHxwaJlm9G6mI2sfSQ==",
      "dev": true
    },
    "json-parse-better-errors": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/json-parse-better-errors/-/json-parse-better-errors-1.0.2.tgz",
      "integrity": "sha512-mrqyZKfX5EhL7hvqcV6WG1yYjnjeuYDzDhhcAAUrq8Po85NBQBJP+ZDUT75qZQ98IkUoBqdkExkukOU7Ts2wrw==",
      "dev": true
    },
    "json-parse-even-better-errors": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/json-parse-even-better-errors/-/json-parse-even-better-errors-2.3.1.tgz",
      "integrity": "sha512-xyFwyhro/JEof6Ghe2iz2NcXoj2sloNsWr/XsERDK/oiPCfaNhl5ONfp+jQdAZRQQ0IJWNzH9zIZF7li91kh2w==",
      "dev": true
    },
    "jsonfile": {
      "version": "6.1.0",
      "resolved": "https://registry.npmjs.org/jsonfile/-/jsonfile-6.1.0.tgz",
      "integrity": "sha512-5dgndWOriYSm5cnYaJNhalLNDKOqFwyDB/rr1E9ZsGciGvKPs8R2xYGCacuf3z6K1YKDz182fd+fY3cn3pMqXQ==",
      "dev": true,
      "requires": {
        "graceful-fs": "^4.1.6",
        "universalify": "^2.0.0"
      }
    },
    "keyv": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/keyv/-/keyv-4.1.1.tgz",
      "integrity": "sha512-tGv1yP6snQVDSM4X6yxrv2zzq/EvpW+oYiUz6aueW1u9CtS8RzUQYxxmFwgZlO2jSgCxQbchhxaqXXp2hnKGpQ==",
      "dev": true,
      "requires": {
        "json-buffer": "3.0.1"
      }
    },
    "latest-version": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/latest-version/-/latest-version-5.1.0.tgz",
      "integrity": "sha512-weT+r0kTkRQdCdYCNtkMwWXQTMEswKrFBkm4ckQOMVhhqhIMI1UT2hMj+1iigIhgSZm5gTmrRXBNoGUgaTY1xA==",
      "dev": true,
      "requires": {
        "package-json": "^6.3.0"
      }
    },
    "lines-and-columns": {
      "version": "1.2.4",
      "resolved": "https://registry.npmjs.org/lines-and-columns/-/lines-and-columns-1.2.4.tgz",
      "integrity": "sha512-7ylylesZQ/PV29jhEDl3Ufjo6ZX7gCqJr5F7PKrqc93v7fzSymt1BpwEU8nAUXs8qzzvqhbjhK5QZg6Mt/HkBg==",
      "dev": true
    },
    "load-json-file": {
      "version": "5.3.0",
      "resolved": "https://registry.npmjs.org/load-json-file/-/load-json-file-5.3.0.tgz",
      "integrity": "sha512-cJGP40Jc/VXUsp8/OrnyKyTZ1y6v/dphm3bioS+RrKXjK2BB6wHUd6JptZEFDGgGahMT+InnZO5i1Ei9mpC8Bw==",
      "dev": true,
      "requires": {
        "graceful-fs": "^4.1.15",
        "parse-json": "^4.0.0",
        "pify": "^4.0.1",
        "strip-bom": "^3.0.0",
        "type-fest": "^0.3.0"
      }
    },
    "locate-path": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-3.0.0.tgz",
      "integrity": "sha512-7AO748wWnIhNqAuaty2ZWHkQHRSNfPVIsPIfwEOWO22AmaoVrWavlOcMR5nzTLNYvp36X220/maaRsrec1G65A==",
      "dev": true,
      "requires": {
        "p-locate": "^3.0.0",
        "path-exists": "^3.0.0"
      }
    },
    "lodash": {
      "version": "4.17.21",
      "resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz",
      "integrity": "sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg==",
      "dev": true
    },
    "log-symbols": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/log-symbols/-/log-symbols-4.1.0.tgz",
      "integrity": "sha512-8XPvpAA8uyhfteu8pIvQxpJZ7SYYdpUivZpGy6sFsBuKRY/7rQGavedeB8aK+Zkyq6upMFVL/9AW6vOYzfRyLg==",
      "dev": true,
      "requires": {
        "chalk": "^4.1.0",
        "is-unicode-supported": "^0.1.0"
      }
    },
    "lowercase-keys": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/lowercase-keys/-/lowercase-keys-2.0.0.tgz",
      "integrity": "sha512-tqNXrS78oMOE73NMxK4EMLQsQowWf8jKooH9g7xPavRT706R6bkQJ6DY2Te7QukaZsulxa30wQ7bk0pm4XiHmA==",
      "dev": true
    },
    "lru-cache": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-6.0.0.tgz",
      "integrity": "sha512-Jo6dJ04CmSjuznwJSS3pUeWmd/H0ffTlkXXgwZi+eq1UCmqQwCh+eLsYOYCwY991i2Fah4h1BEMCx4qThGbsiA==",
      "dev": true,
      "requires": {
        "yallist": "^4.0.0"
      }
    },
    "make-dir": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/make-dir/-/make-dir-3.1.0.tgz",
      "integrity": "sha512-g3FeP20LNwhALb/6Cz6Dd4F2ngze0jz7tbzrD2wAV+o9FeNHe4rL+yK2md0J/fiSf1sa1ADhXqi5+oVwOM/eGw==",
      "dev": true,
      "requires": {
        "semver": "^6.0.0"
      },
      "dependencies": {
        "semver": {
          "version": "6.3.0",
          "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.0.tgz",
          "integrity": "sha512-b39TBaTSfV6yBrapU89p5fKekE2m/NwnDocOVruQFS1/veMgdzuPcnOM34M6CwxW8jH/lxEa5rBoDeUwu5HHTw==",
          "dev": true
        }
      }
    },
    "make-error": {
      "version": "1.3.6",
      "resolved": "https://registry.npmjs.org/make-error/-/make-error-1.3.6.tgz",
      "integrity": "sha512-s8UhlNe7vPKomQhC1qFelMokr/Sc3AgNbso3n74mVPA5LTZwkB9NlXf4XPamLxJE8h0gh73rM94xvwRT2CVInw==",
      "dev": true
    },
    "map-age-cleaner": {
      "version": "0.1.3",
      "resolved": "https://registry.npmjs.org/map-age-cleaner/-/map-age-cleaner-0.1.3.tgz",
      "integrity": "sha512-bJzx6nMoP6PDLPBFmg7+xRKeFZvFboMrGlxmNj9ClvX53KrmvM5bXFXEWjbz4cz1AFn+jWJ9z/DJSz7hrs0w3w==",
      "dev": true,
      "requires": {
        "p-defer": "^1.0.0"
      }
    },
    "matcher": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/matcher/-/matcher-3.0.0.tgz",
      "integrity": "sha512-OkeDaAZ/bQCxeFAozM55PKcKU0yJMPGifLwV4Qgjitu+5MoAfSQN4lsLJeXZ1b8w0x+/Emda6MZgXS1jvsapng==",
      "dev": true,
      "requires": {
        "escape-string-regexp": "^4.0.0"
      }
    },
    "md5-hex": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/md5-hex/-/md5-hex-3.0.1.tgz",
      "integrity": "sha512-BUiRtTtV39LIJwinWBjqVsU9xhdnz7/i889V859IBFpuqGAj6LuOvHv5XLbgZ2R7ptJoJaEcxkv88/h25T7Ciw==",
      "dev": true,
      "requires": {
        "blueimp-md5": "^2.10.0"
      }
    },
    "mem": {
      "version": "8.1.1",
      "resolved": "https://registry.npmjs.org/mem/-/mem-8.1.1.tgz",
      "integrity": "sha512-qFCFUDs7U3b8mBDPyz5EToEKoAkgCzqquIgi9nkkR9bixxOVOre+09lbuH7+9Kn2NFpm56M3GUWVbU2hQgdACA==",
      "dev": true,
      "requires": {
        "map-age-cleaner": "^0.1.3",
        "mimic-fn": "^3.1.0"
      }
    },
    "merge-stream": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/merge-stream/-/merge-stream-2.0.0.tgz",
      "integrity": "sha512-abv/qOcuPfk3URPfDzmZU1LKmuw8kT+0nIHvKrKgFrwifol/doWcdA4ZqsWQ8ENrFKkd67Mfpo/LovbIUsbt3w==",
      "dev": true
    },
    "merge2": {
      "version": "1.4.1",
      "resolved": "https://registry.npmjs.org/merge2/-/merge2-1.4.1.tgz",
      "integrity": "sha512-8q7VEgMJW4J8tcfVPy8g09NcQwZdbwFEqhe/WZkoIzjn/3TGDwtOCYtXGxA3O8tPzpczCCDgv+P2P5y00ZJOOg==",
      "dev": true
    },
    "micromatch": {
      "version": "4.0.4",
      "resolved": "https://registry.npmjs.org/micromatch/-/micromatch-4.0.4.tgz",
      "integrity": "sha512-pRmzw/XUcwXGpD9aI9q/0XOwLNygjETJ8y0ao0wdqprrzDa4YnxLcz7fQRZr8voh8V10kGhABbNcHVk5wHgWwg==",
      "dev": true,
      "requires": {
        "braces": "^3.0.1",
        "picomatch": "^2.2.3"
      }
    },
    "mimic-fn": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/mimic-fn/-/mimic-fn-3.1.0.tgz",
      "integrity": "sha512-Ysbi9uYW9hFyfrThdDEQuykN4Ey6BuwPD2kpI5ES/nFTDn/98yxYNLZJcgUAKPT/mcrLLKaGzJR9YVxJrIdASQ==",
      "dev": true
    },
    "mimic-response": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/mimic-response/-/mimic-response-1.0.1.tgz",
      "integrity": "sha512-j5EctnkH7amfV/q5Hgmoal1g2QHFJRraOtmx0JpIqkxhBhI/lJSl1nMpQ45hVarwNETOoWEimndZ4QK0RHxuxQ==",
      "dev": true
    },
    "minimatch": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
      "dev": true,
      "requires": {
        "brace-expansion": "^1.1.7"
      }
    },
    "minimist": {
      "version": "1.2.5",
      "resolved": "https://registry.npmjs.org/minimist/-/minimist-1.2.5.tgz",
      "integrity": "sha512-FM9nNUYrRBAELZQT3xeZQ7fmMOBg6nWNmJKTcgsJeaLstP/UODVpGsr5OhXhhXg6f+qtJ8uiZ+PUxkDWcgIXLw==",
      "dev": true
    },
    "minipass": {
      "version": "3.1.6",
      "resolved": "https://registry.npmjs.org/minipass/-/minipass-3.1.6.tgz",
      "integrity": "sha512-rty5kpw9/z8SX9dmxblFA6edItUmwJgMeYDZRrwlIVN27i8gysGbznJwUggw2V/FVqFSDdWy040ZPS811DYAqQ==",
      "dev": true,
      "requires": {
        "yallist": "^4.0.0"
      }
    },
    "minizlib": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/minizlib/-/minizlib-2.1.2.tgz",
      "integrity": "sha512-bAxsR8BVfj60DWXHE3u30oHzfl4G7khkSuPW+qvpd7jFRHm7dLxOjUk1EHACJ/hxLY8phGJ0YhYHZo7jil7Qdg==",
      "dev": true,
      "requires": {
        "minipass": "^3.0.0",
        "yallist": "^4.0.0"
      }
    },
    "mkdirp": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/mkdirp/-/mkdirp-1.0.4.tgz",
      "integrity": "sha512-vVqVZQyf3WLx2Shd0qJ9xuvqgAyKPLAiqITEtqW0oIUjzo3PePDd6fW9iFz30ef7Ysp/oiWqbhszeGWW2T6Gzw==",
      "dev": true
    },
    "ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "dev": true
    },
    "mustache": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/mustache/-/mustache-4.2.0.tgz",
      "integrity": "sha512-71ippSywq5Yb7/tVYyGbkBggbU8H3u5Rz56fH60jGFgr8uHwxs+aSKeqmluIVzM0m0kB7xQjKS6qPfd0b2ZoqQ==",
      "dev": true
    },
    "near-api-js": {
      "version": "0.43.1",
      "resolved": "https://registry.npmjs.org/near-api-js/-/near-api-js-0.43.1.tgz",
      "integrity": "sha512-bgFuboD/a3eintaWqWMN9oWcGHkxbrKiJhxkJwHmwJrYx49y9QvWwEtoxeHSjKskJHUVXGKvaYRsc9XirrJ5JQ==",
      "dev": true,
      "requires": {
        "bn.js": "5.2.0",
        "borsh": "^0.6.0",
        "bs58": "^4.0.0",
        "depd": "^2.0.0",
        "error-polyfill": "^0.1.3",
        "http-errors": "^1.7.2",
        "js-sha256": "^0.9.0",
        "mustache": "^4.0.0",
        "node-fetch": "^2.6.1",
        "text-encoding-utf-8": "^1.0.2",
        "tweetnacl": "^1.0.1"
      },
      "dependencies": {
        "borsh": {
          "version": "0.6.0",
          "resolved": "https://registry.npmjs.org/borsh/-/borsh-0.6.0.tgz",
          "integrity": "sha512-sl5k89ViqsThXQpYa9XDtz1sBl3l1lI313cFUY1HKr+wvMILnb+58xpkqTNrYbelh99dY7K8usxoCusQmqix9Q==",
          "dev": true,
          "requires": {
            "bn.js": "^5.2.0",
            "bs58": "^4.0.0",
            "text-encoding-utf-8": "^1.0.2"
          }
        }
      }
    },
    "near-sandbox": {
      "version": "0.0.8",
      "resolved": "https://registry.npmjs.org/near-sandbox/-/near-sandbox-0.0.8.tgz",
      "integrity": "sha512-3JrDcA9rI+wA9lWqfOtSovGxBE/TDZL011TLk+jz5wGezVbm7m3tDh/zCfq+++eFyJ3ZbGkG0KF6+trMQJFPQQ==",
      "dev": true,
      "requires": {
        "got": "^11.8.2",
        "tar": "^6.1.0"
      }
    },
    "near-units": {
      "version": "0.1.9",
      "resolved": "https://registry.npmjs.org/near-units/-/near-units-0.1.9.tgz",
      "integrity": "sha512-xiuBjpNsi+ywiu7P6iWRZdgFm7iCr/cfWlVO6+e5uaAqH4mE1rrurElyrL91llNDSnMwogd9XmlZOw5KbbHNsA==",
      "dev": true,
      "requires": {
        "bn.js": "^5.2.0"
      }
    },
    "near-workspaces": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/near-workspaces/-/near-workspaces-1.0.0.tgz",
      "integrity": "sha512-TiF3Qk7vpm6twqSxwR1UhVpXtXsUGLr2DrrlRu/DvIstMRI6GOnIWvx9FlvM+x/ERiivACi7s2IWd5hyNJ5YrA==",
      "dev": true,
      "requires": {
        "base64url": "^3.0.1",
        "bn.js": "^5.2.0",
        "borsh": "^0.5.0",
        "bs58": "^4.0.1",
        "callsites": "^4.0.0",
        "fs-extra": "^10.0.0",
        "js-sha256": "^0.9.0",
        "near-api-js": "^0.43.1",
        "near-sandbox": "^0.0.8",
        "near-units": "^0.1.9",
        "node-port-check": "^2.0.1",
        "promisify-child-process": "^4.1.1",
        "pure-uuid": "^1.6.2",
        "rimraf": "^3.0.2",
        "temp-dir": "^2.0.0"
      },
      "dependencies": {
        "callsites": {
          "version": "4.0.0",
          "resolved": "https://registry.npmjs.org/callsites/-/callsites-4.0.0.tgz",
          "integrity": "sha512-y3jRROutgpKdz5vzEhWM34TidDU8vkJppF8dszITeb1PQmSqV3DTxyV8G/lyO/DNvtE1YTedehmw9MPZsCBHxQ==",
          "dev": true
        }
      }
    },
    "near-workspaces-ava": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/near-workspaces-ava/-/near-workspaces-ava-1.0.0.tgz",
      "integrity": "sha512-CFbQ0CLFEP8p7gKlYwVf9nVV8WvP5qaZDiNX6oHyHKng8wJ9uEw32wlv/z8tP0MgJVHeFq5jg8Jm+VG+q0O5Bw==",
      "dev": true,
      "requires": {
        "@ava/typescript": "^2.0.0",
        "@types/bn.js": "^5.1.0",
        "@types/node": "^16.4.10",
        "ava": "3.15.0",
        "near-workspaces": "^1.0.0",
        "ts-node": "^10.1.0",
        "typescript": "^4.3.5"
      }
    },
    "node-fetch": {
      "version": "2.6.7",
      "resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-2.6.7.tgz",
      "integrity": "sha512-ZjMPFEfVx5j+y2yF35Kzx5sF7kDzxuDj6ziH4FFbOp87zKDZNx8yExJIb05OGF4Nlt9IHFIMBkRl41VdvcNdbQ==",
      "dev": true,
      "requires": {
        "whatwg-url": "^5.0.0"
      }
    },
    "node-port-check": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/node-port-check/-/node-port-check-2.0.1.tgz",
      "integrity": "sha512-PV1tj5OPbWwxvhPcChXxwCIKl/IfVEdPP4u/gQz2lao/VGoeIUXb/4U72KSHLZpTVBmgTnMm0me7yR0wUsIuPg==",
      "dev": true
    },
    "normalize-package-data": {
      "version": "2.5.0",
      "resolved": "https://registry.npmjs.org/normalize-package-data/-/normalize-package-data-2.5.0.tgz",
      "integrity": "sha512-/5CMN3T0R4XTj4DcGaexo+roZSdSFW/0AOOTROrjxzCG1wrWXEsGbRKevjlIL+ZDE4sZlJr5ED4YW0yqmkK+eA==",
      "dev": true,
      "requires": {
        "hosted-git-info": "^2.1.4",
        "resolve": "^1.10.0",
        "semver": "2 || 3 || 4 || 5",
        "validate-npm-package-license": "^3.0.1"
      },
      "dependencies": {
        "semver": {
          "version": "5.7.1",
          "resolved": "https://registry.npmjs.org/semver/-/semver-5.7.1.tgz",
          "integrity": "sha512-sauaDf/PZdVgrLTNYHRtpXa1iRiKcaebiKQ1BJdpQlWH2lCvexQdX55snPFyK7QzpudqbCI0qXFfOasHdyNDGQ==",
          "dev": true
        }
      }
    },
    "normalize-path": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/normalize-path/-/normalize-path-3.0.0.tgz",
      "integrity": "sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==",
      "dev": true
    },
    "normalize-url": {
      "version": "6.1.0",
      "resolved": "https://registry.npmjs.org/normalize-url/-/normalize-url-6.1.0.tgz",
      "integrity": "sha512-DlL+XwOy3NxAQ8xuC0okPgK46iuVNAK01YN7RueYBqqFeGsBjV9XmCAzAdgt+667bCl5kPh9EqKKDwnaPG1I7A==",
      "dev": true
    },
    "npm-run-path": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/npm-run-path/-/npm-run-path-4.0.1.tgz",
      "integrity": "sha512-S48WzZW777zhNIrn7gxOlISNAqi9ZC/uQFnRdbeIHhZhCA6UqpkOT8T1G7BvfdgP4Er8gF4sUbaS0i7QvIfCWw==",
      "dev": true,
      "requires": {
        "path-key": "^3.0.0"
      }
    },
    "o3": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/o3/-/o3-1.0.3.tgz",
      "integrity": "sha1-GSzod6iC36Z1HwQSqGX6+y2h2sA=",
      "dev": true,
      "requires": {
        "capability": "^0.2.5"
      }
    },
    "once": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
      "integrity": "sha1-WDsap3WWHUsROsF9nFC6753Xa9E=",
      "dev": true,
      "requires": {
        "wrappy": "1"
      }
    },
    "onetime": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/onetime/-/onetime-5.1.2.tgz",
      "integrity": "sha512-kbpaSSGJTWdAY5KPVeMOKXSrPtr8C8C7wodJbcsd51jRnmD+GZu8Y0VoU6Dm5Z4vWr0Ig/1NKuWRKf7j5aaYSg==",
      "dev": true,
      "requires": {
        "mimic-fn": "^2.1.0"
      },
      "dependencies": {
        "mimic-fn": {
          "version": "2.1.0",
          "resolved": "https://registry.npmjs.org/mimic-fn/-/mimic-fn-2.1.0.tgz",
          "integrity": "sha512-OqbOk5oEQeAZ8WXWydlu9HJjz9WVdEIvamMCcXmuqUYjTknH/sqsWvhQ3vgwKFRR1HpjvNBKQ37nbJgYzGqGcg==",
          "dev": true
        }
      }
    },
    "ora": {
      "version": "5.4.1",
      "resolved": "https://registry.npmjs.org/ora/-/ora-5.4.1.tgz",
      "integrity": "sha512-5b6Y85tPxZZ7QytO+BQzysW31HJku27cRIlkbAXaNx+BdcVi+LlRFmVXzeF6a7JCwJpyw5c4b+YSVImQIrBpuQ==",
      "dev": true,
      "requires": {
        "bl": "^4.1.0",
        "chalk": "^4.1.0",
        "cli-cursor": "^3.1.0",
        "cli-spinners": "^2.5.0",
        "is-interactive": "^1.0.0",
        "is-unicode-supported": "^0.1.0",
        "log-symbols": "^4.1.0",
        "strip-ansi": "^6.0.0",
        "wcwidth": "^1.0.1"
      }
    },
    "p-cancelable": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/p-cancelable/-/p-cancelable-2.1.1.tgz",
      "integrity": "sha512-BZOr3nRQHOntUjTrH8+Lh54smKHoHyur8We1V8DSMVrl5A2malOOwuJRnKRDjSnkoeBh4at6BwEnb5I7Jl31wg==",
      "dev": true
    },
    "p-defer": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/p-defer/-/p-defer-1.0.0.tgz",
      "integrity": "sha1-n26xgvbJqozXQwBKfU+WsZaw+ww=",
      "dev": true
    },
    "p-event": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/p-event/-/p-event-4.2.0.tgz",
      "integrity": "sha512-KXatOjCRXXkSePPb1Nbi0p0m+gQAwdlbhi4wQKJPI1HsMQS9g+Sqp2o+QHziPr7eYJyOZet836KoHEVM1mwOrQ==",
      "dev": true,
      "requires": {
        "p-timeout": "^3.1.0"
      }
    },
    "p-finally": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/p-finally/-/p-finally-1.0.0.tgz",
      "integrity": "sha1-P7z7FbiZpEEjs0ttzBi3JDNqLK4=",
      "dev": true
    },
    "p-limit": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-2.3.0.tgz",
      "integrity": "sha512-//88mFWSJx8lxCzwdAABTJL2MyWB12+eIY7MDL2SqLmAkeKU9qxRvWuSyTjm3FUmpBEMuFfckAIqEaVGUDxb6w==",
      "dev": true,
      "requires": {
        "p-try": "^2.0.0"
      }
    },
    "p-locate": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-3.0.0.tgz",
      "integrity": "sha512-x+12w/To+4GFfgJhBEpiDcLozRJGegY+Ei7/z0tSLkMmxGZNybVMSfWj9aJn8Z5Fc7dBUNJOOVgPv2H7IwulSQ==",
      "dev": true,
      "requires": {
        "p-limit": "^2.0.0"
      }
    },
    "p-map": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/p-map/-/p-map-4.0.0.tgz",
      "integrity": "sha512-/bjOqmgETBYB5BoEeGVea8dmvHb2m9GLy1E9W43yeyfP6QQCZGFNa+XRceJEuDB6zqr+gKpIAmlLebMpykw/MQ==",
      "dev": true,
      "requires": {
        "aggregate-error": "^3.0.0"
      }
    },
    "p-timeout": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/p-timeout/-/p-timeout-3.2.0.tgz",
      "integrity": "sha512-rhIwUycgwwKcP9yTOOFK/AKsAopjjCakVqLHePO3CC6Mir1Z99xT+R63jZxAT5lFZLa2inS5h+ZS2GvR99/FBg==",
      "dev": true,
      "requires": {
        "p-finally": "^1.0.0"
      }
    },
    "p-try": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/p-try/-/p-try-2.2.0.tgz",
      "integrity": "sha512-R4nPAVTAU0B9D35/Gk3uJf/7XYbQcyohSKdvAxIRSNghFl4e71hVoGnBNQz9cWaXxO2I10KTC+3jMdvvoKw6dQ==",
      "dev": true
    },
    "package-json": {
      "version": "6.5.0",
      "resolved": "https://registry.npmjs.org/package-json/-/package-json-6.5.0.tgz",
      "integrity": "sha512-k3bdm2n25tkyxcjSKzB5x8kfVxlMdgsbPr0GkZcwHsLpba6cBjqCt1KlcChKEvxHIcTB1FVMuwoijZ26xex5MQ==",
      "dev": true,
      "requires": {
        "got": "^9.6.0",
        "registry-auth-token": "^4.0.0",
        "registry-url": "^5.0.0",
        "semver": "^6.2.0"
      },
      "dependencies": {
        "@sindresorhus/is": {
          "version": "0.14.0",
          "resolved": "https://registry.npmjs.org/@sindresorhus/is/-/is-0.14.0.tgz",
          "integrity": "sha512-9NET910DNaIPngYnLLPeg+Ogzqsi9uM4mSboU5y6p8S5DzMTVEsJZrawi+BoDNUVBa2DhJqQYUFvMDfgU062LQ==",
          "dev": true
        },
        "@szmarczak/http-timer": {
          "version": "1.1.2",
          "resolved": "https://registry.npmjs.org/@szmarczak/http-timer/-/http-timer-1.1.2.tgz",
          "integrity": "sha512-XIB2XbzHTN6ieIjfIMV9hlVcfPU26s2vafYWQcZHWXHOxiaRZYEDKEwdl129Zyg50+foYV2jCgtrqSA6qNuNSA==",
          "dev": true,
          "requires": {
            "defer-to-connect": "^1.0.1"
          }
        },
        "cacheable-request": {
          "version": "6.1.0",
          "resolved": "https://registry.npmjs.org/cacheable-request/-/cacheable-request-6.1.0.tgz",
          "integrity": "sha512-Oj3cAGPCqOZX7Rz64Uny2GYAZNliQSqfbePrgAQ1wKAihYmCUnraBtJtKcGR4xz7wF+LoJC+ssFZvv5BgF9Igg==",
          "dev": true,
          "requires": {
            "clone-response": "^1.0.2",
            "get-stream": "^5.1.0",
            "http-cache-semantics": "^4.0.0",
            "keyv": "^3.0.0",
            "lowercase-keys": "^2.0.0",
            "normalize-url": "^4.1.0",
            "responselike": "^1.0.2"
          },
          "dependencies": {
            "get-stream": {
              "version": "5.2.0",
              "resolved": "https://registry.npmjs.org/get-stream/-/get-stream-5.2.0.tgz",
              "integrity": "sha512-nBF+F1rAZVCu/p7rjzgA+Yb4lfYXrpl7a6VmJrU8wF9I1CKvP/QwPNZHnOlwbTkY6dvtFIzFMSyQXbLoTQPRpA==",
              "dev": true,
              "requires": {
                "pump": "^3.0.0"
              }
            }
          }
        },
        "decompress-response": {
          "version": "3.3.0",
          "resolved": "https://registry.npmjs.org/decompress-response/-/decompress-response-3.3.0.tgz",
          "integrity": "sha1-gKTdMjdIOEv6JICDYirt7Jgq3/M=",
          "dev": true,
          "requires": {
            "mimic-response": "^1.0.0"
          }
        },
        "defer-to-connect": {
          "version": "1.1.3",
          "resolved": "https://registry.npmjs.org/defer-to-connect/-/defer-to-connect-1.1.3.tgz",
          "integrity": "sha512-0ISdNousHvZT2EiFlZeZAHBUvSxmKswVCEf8hW7KWgG4a8MVEu/3Vb6uWYozkjylyCxe0JBIiRB1jV45S70WVQ==",
          "dev": true
        },
        "get-stream": {
          "version": "4.1.0",
          "resolved": "https://registry.npmjs.org/get-stream/-/get-stream-4.1.0.tgz",
          "integrity": "sha512-GMat4EJ5161kIy2HevLlr4luNjBgvmj413KaQA7jt4V8B4RDsfpHk7WQ9GVqfYyyx8OS/L66Kox+rJRNklLK7w==",
          "dev": true,
          "requires": {
            "pump": "^3.0.0"
          }
        },
        "got": {
          "version": "9.6.0",
          "resolved": "https://registry.npmjs.org/got/-/got-9.6.0.tgz",
          "integrity": "sha512-R7eWptXuGYxwijs0eV+v3o6+XH1IqVK8dJOEecQfTmkncw9AV4dcw/Dhxi8MdlqPthxxpZyizMzyg8RTmEsG+Q==",
          "dev": true,
          "requires": {
            "@sindresorhus/is": "^0.14.0",
            "@szmarczak/http-timer": "^1.1.2",
            "cacheable-request": "^6.0.0",
            "decompress-response": "^3.3.0",
            "duplexer3": "^0.1.4",
            "get-stream": "^4.1.0",
            "lowercase-keys": "^1.0.1",
            "mimic-response": "^1.0.1",
            "p-cancelable": "^1.0.0",
            "to-readable-stream": "^1.0.0",
            "url-parse-lax": "^3.0.0"
          },
          "dependencies": {
            "lowercase-keys": {
              "version": "1.0.1",
              "resolved": "https://registry.npmjs.org/lowercase-keys/-/lowercase-keys-1.0.1.tgz",
              "integrity": "sha512-G2Lj61tXDnVFFOi8VZds+SoQjtQC3dgokKdDG2mTm1tx4m50NUHBOZSBwQQHyy0V12A0JTG4icfZQH+xPyh8VA==",
              "dev": true
            }
          }
        },
        "json-buffer": {
          "version": "3.0.0",
          "resolved": "https://registry.npmjs.org/json-buffer/-/json-buffer-3.0.0.tgz",
          "integrity": "sha1-Wx85evx11ne96Lz8Dkfh+aPZqJg=",
          "dev": true
        },
        "keyv": {
          "version": "3.1.0",
          "resolved": "https://registry.npmjs.org/keyv/-/keyv-3.1.0.tgz",
          "integrity": "sha512-9ykJ/46SN/9KPM/sichzQ7OvXyGDYKGTaDlKMGCAlg2UK8KRy4jb0d8sFc+0Tt0YYnThq8X2RZgCg74RPxgcVA==",
          "dev": true,
          "requires": {
            "json-buffer": "3.0.0"
          }
        },
        "normalize-url": {
          "version": "4.5.1",
          "resolved": "https://registry.npmjs.org/normalize-url/-/normalize-url-4.5.1.tgz",
          "integrity": "sha512-9UZCFRHQdNrfTpGg8+1INIg93B6zE0aXMVFkw1WFwvO4SlZywU6aLg5Of0Ap/PgcbSw4LNxvMWXMeugwMCX0AA==",
          "dev": true
        },
        "p-cancelable": {
          "version": "1.1.0",
          "resolved": "https://registry.npmjs.org/p-cancelable/-/p-cancelable-1.1.0.tgz",
          "integrity": "sha512-s73XxOZ4zpt1edZYZzvhqFa6uvQc1vwUa0K0BdtIZgQMAJj9IbebH+JkgKZc9h+B05PKHLOTl4ajG1BmNrVZlw==",
          "dev": true
        },
        "responselike": {
          "version": "1.0.2",
          "resolved": "https://registry.npmjs.org/responselike/-/responselike-1.0.2.tgz",
          "integrity": "sha1-kYcg7ztjHFZCvgaPFa3lpG9Loec=",
          "dev": true,
          "requires": {
            "lowercase-keys": "^1.0.0"
          },
          "dependencies": {
            "lowercase-keys": {
              "version": "1.0.1",
              "resolved": "https://registry.npmjs.org/lowercase-keys/-/lowercase-keys-1.0.1.tgz",
              "integrity": "sha512-G2Lj61tXDnVFFOi8VZds+SoQjtQC3dgokKdDG2mTm1tx4m50NUHBOZSBwQQHyy0V12A0JTG4icfZQH+xPyh8VA==",
              "dev": true
            }
          }
        },
        "semver": {
          "version": "6.3.0",
          "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.0.tgz",
          "integrity": "sha512-b39TBaTSfV6yBrapU89p5fKekE2m/NwnDocOVruQFS1/veMgdzuPcnOM34M6CwxW8jH/lxEa5rBoDeUwu5HHTw==",
          "dev": true
        }
      }
    },
    "parse-json": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/parse-json/-/parse-json-4.0.0.tgz",
      "integrity": "sha1-vjX1Qlvh9/bHRxhPmKeIy5lHfuA=",
      "dev": true,
      "requires": {
        "error-ex": "^1.3.1",
        "json-parse-better-errors": "^1.0.1"
      }
    },
    "parse-ms": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/parse-ms/-/parse-ms-2.1.0.tgz",
      "integrity": "sha512-kHt7kzLoS9VBZfUsiKjv43mr91ea+U05EyKkEtqp7vNbHxmaVuEqN7XxeEVnGrMtYOAxGrDElSi96K7EgO1zCA==",
      "dev": true
    },
    "path-exists": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-3.0.0.tgz",
      "integrity": "sha1-zg6+ql94yxiSXqfYENe1mwEP1RU=",
      "dev": true
    },
    "path-is-absolute": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz",
      "integrity": "sha1-F0uSaHNVNP+8es5r9TpanhtcX18=",
      "dev": true
    },
    "path-key": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz",
      "integrity": "sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==",
      "dev": true
    },
    "path-parse": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/path-parse/-/path-parse-1.0.7.tgz",
      "integrity": "sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==",
      "dev": true
    },
    "path-type": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/path-type/-/path-type-4.0.0.tgz",
      "integrity": "sha512-gDKb8aZMDeD/tZWs9P6+q0J9Mwkdl6xMV8TjnGP3qJVJ06bdMgkbBlLU8IdfOsIsFz2BW1rNVT3XuNEl8zPAvw==",
      "dev": true
    },
    "picomatch": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
      "integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==",
      "dev": true
    },
    "pify": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/pify/-/pify-4.0.1.tgz",
      "integrity": "sha512-uB80kBFb/tfd68bVleG9T5GGsGPjJrLAUpR5PZIrhBnIaRTQRjqdJSsIKkOP6OAIFbj7GOrcudc5pNjZ+geV2g==",
      "dev": true
    },
    "pkg-conf": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/pkg-conf/-/pkg-conf-3.1.0.tgz",
      "integrity": "sha512-m0OTbR/5VPNPqO1ph6Fqbj7Hv6QU7gR/tQW40ZqrL1rjgCU85W6C1bJn0BItuJqnR98PWzw7Z8hHeChD1WrgdQ==",
      "dev": true,
      "requires": {
        "find-up": "^3.0.0",
        "load-json-file": "^5.2.0"
      }
    },
    "pkg-dir": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/pkg-dir/-/pkg-dir-4.2.0.tgz",
      "integrity": "sha512-HRDzbaKjC+AOWVXxAU/x54COGeIv9eb+6CkDSQoNTt4XyWoIJvuPsXizxu/Fr23EiekbtZwmh1IcIG/l/a10GQ==",
      "dev": true,
      "requires": {
        "find-up": "^4.0.0"
      },
      "dependencies": {
        "find-up": {
          "version": "4.1.0",
          "resolved": "https://registry.npmjs.org/find-up/-/find-up-4.1.0.tgz",
          "integrity": "sha512-PpOwAdQ/YlXQ2vj8a3h8IipDuYRi3wceVQQGYWxNINccq40Anw7BlsEXCMbt1Zt+OLA6Fq9suIpIWD0OsnISlw==",
          "dev": true,
          "requires": {
            "locate-path": "^5.0.0",
            "path-exists": "^4.0.0"
          }
        },
        "locate-path": {
          "version": "5.0.0",
          "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-5.0.0.tgz",
          "integrity": "sha512-t7hw9pI+WvuwNJXwk5zVHpyhIqzg2qTlklJOf0mVxGSbe3Fp2VieZcduNYjaLDoy6p9uGpQEGWG87WpMKlNq8g==",
          "dev": true,
          "requires": {
            "p-locate": "^4.1.0"
          }
        },
        "p-locate": {
          "version": "4.1.0",
          "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-4.1.0.tgz",
          "integrity": "sha512-R79ZZ/0wAxKGu3oYMlz8jy/kbhsNrS7SKZ7PxEHBgJ5+F2mtFW2fK2cOtBh1cHYkQsbzFV7I+EoRKe6Yt0oK7A==",
          "dev": true,
          "requires": {
            "p-limit": "^2.2.0"
          }
        },
        "path-exists": {
          "version": "4.0.0",
          "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-4.0.0.tgz",
          "integrity": "sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==",
          "dev": true
        }
      }
    },
    "plur": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/plur/-/plur-4.0.0.tgz",
      "integrity": "sha512-4UGewrYgqDFw9vV6zNV+ADmPAUAfJPKtGvb/VdpQAx25X5f3xXdGdyOEVFwkl8Hl/tl7+xbeHqSEM+D5/TirUg==",
      "dev": true,
      "requires": {
        "irregular-plurals": "^3.2.0"
      }
    },
    "prepend-http": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/prepend-http/-/prepend-http-2.0.0.tgz",
      "integrity": "sha1-6SQ0v6XqjBn0HN/UAddBo8gZ2Jc=",
      "dev": true
    },
    "pretty-ms": {
      "version": "7.0.1",
      "resolved": "https://registry.npmjs.org/pretty-ms/-/pretty-ms-7.0.1.tgz",
      "integrity": "sha512-973driJZvxiGOQ5ONsFhOF/DtzPMOMtgC11kCpUrPGMTgqp2q/1gwzCquocrN33is0VZ5GFHXZYMM9l6h67v2Q==",
      "dev": true,
      "requires": {
        "parse-ms": "^2.1.0"
      }
    },
    "promisify-child-process": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/promisify-child-process/-/promisify-child-process-4.1.1.tgz",
      "integrity": "sha512-/sRjHZwoXf1rJ+8s4oWjYjGRVKNK1DUnqfRC1Zek18pl0cN6k3yJ1cCbqd0tWNe4h0Gr+SY4vR42N33+T82WkA==",
      "dev": true
    },
    "pump": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/pump/-/pump-3.0.0.tgz",
      "integrity": "sha512-LwZy+p3SFs1Pytd/jYct4wpv49HiYCqd9Rlc5ZVdk0V+8Yzv6jR5Blk3TRmPL1ft69TxP0IMZGJ+WPFU2BFhww==",
      "dev": true,
      "requires": {
        "end-of-stream": "^1.1.0",
        "once": "^1.3.1"
      }
    },
    "pupa": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/pupa/-/pupa-2.1.1.tgz",
      "integrity": "sha512-l1jNAspIBSFqbT+y+5FosojNpVpF94nlI+wDUpqP9enwOTfHx9f0gh5nB96vl+6yTpsJsypeNrwfzPrKuHB41A==",
      "dev": true,
      "requires": {
        "escape-goat": "^2.0.0"
      }
    },
    "pure-uuid": {
      "version": "1.6.2",
      "resolved": "https://registry.npmjs.org/pure-uuid/-/pure-uuid-1.6.2.tgz",
      "integrity": "sha512-WQ4xz74ApW6s0BToRuuyuMo9g0VHx1HljY0H2gPng+mqqz/K1yLj7sHZonZZQ2++WfHl/ZzruilWvuz+WtmxjQ==",
      "dev": true
    },
    "queue-microtask": {
      "version": "1.2.3",
      "resolved": "https://registry.npmjs.org/queue-microtask/-/queue-microtask-1.2.3.tgz",
      "integrity": "sha512-NuaNSa6flKT5JaSYQzJok04JzTL1CA6aGhv5rfLW3PgqA+M2ChpZQnAC8h8i4ZFkBS8X5RqkDBHA7r4hej3K9A==",
      "dev": true
    },
    "quick-lru": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/quick-lru/-/quick-lru-5.1.1.tgz",
      "integrity": "sha512-WuyALRjWPDGtt/wzJiadO5AXY+8hZ80hVpe6MyivgraREW751X3SbhRvG3eLKOYN+8VEvqLcf3wdnt44Z4S4SA==",
      "dev": true
    },
    "rc": {
      "version": "1.2.8",
      "resolved": "https://registry.npmjs.org/rc/-/rc-1.2.8.tgz",
      "integrity": "sha512-y3bGgqKj3QBdxLbLkomlohkvsA8gdAiUQlSBJnBhfn+BPxg4bc62d8TcBW15wavDfgexCgccckhcZvywyQYPOw==",
      "dev": true,
      "requires": {
        "deep-extend": "^0.6.0",
        "ini": "~1.3.0",
        "minimist": "^1.2.0",
        "strip-json-comments": "~2.0.1"
      },
      "dependencies": {
        "ini": {
          "version": "1.3.8",
          "resolved": "https://registry.npmjs.org/ini/-/ini-1.3.8.tgz",
          "integrity": "sha512-JV/yugV2uzW5iMRSiZAyDtQd+nxtUnjeLt0acNdw98kKLrvuRVyB80tsREOE7yvGVgalhZ6RNXCmEHkUKBKxew==",
          "dev": true
        }
      }
    },
    "read-pkg": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/read-pkg/-/read-pkg-5.2.0.tgz",
      "integrity": "sha512-Ug69mNOpfvKDAc2Q8DRpMjjzdtrnv9HcSMX+4VsZxD1aZ6ZzrIE7rlzXBtWTyhULSMKg076AW6WR5iZpD0JiOg==",
      "dev": true,
      "requires": {
        "@types/normalize-package-data": "^2.4.0",
        "normalize-package-data": "^2.5.0",
        "parse-json": "^5.0.0",
        "type-fest": "^0.6.0"
      },
      "dependencies": {
        "parse-json": {
          "version": "5.2.0",
          "resolved": "https://registry.npmjs.org/parse-json/-/parse-json-5.2.0.tgz",
          "integrity": "sha512-ayCKvm/phCGxOkYRSCM82iDwct8/EonSEgCSxWxD7ve6jHggsFl4fZVQBPRNgQoKiuV/odhFrGzQXZwbifC8Rg==",
          "dev": true,
          "requires": {
            "@babel/code-frame": "^7.0.0",
            "error-ex": "^1.3.1",
            "json-parse-even-better-errors": "^2.3.0",
            "lines-and-columns": "^1.1.6"
          }
        },
        "type-fest": {
          "version": "0.6.0",
          "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.6.0.tgz",
          "integrity": "sha512-q+MB8nYR1KDLrgr4G5yemftpMC7/QLqVndBmEEdqzmNj5dcFOO4Oo8qlwZE3ULT3+Zim1F8Kq4cBnikNhlCMlg==",
          "dev": true
        }
      }
    },
    "readable-stream": {
      "version": "3.6.0",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-3.6.0.tgz",
      "integrity": "sha512-BViHy7LKeTz4oNnkcLJ+lVSL6vpiFeX6/d3oSH8zCW7UxP2onchk+vTGB143xuFjHS3deTgkKoXXymXqymiIdA==",
      "dev": true,
      "requires": {
        "inherits": "^2.0.3",
        "string_decoder": "^1.1.1",
        "util-deprecate": "^1.0.1"
      }
    },
    "readdirp": {
      "version": "3.6.0",
      "resolved": "https://registry.npmjs.org/readdirp/-/readdirp-3.6.0.tgz",
      "integrity": "sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==",
      "dev": true,
      "requires": {
        "picomatch": "^2.2.1"
      }
    },
    "registry-auth-token": {
      "version": "4.2.1",
      "resolved": "https://registry.npmjs.org/registry-auth-token/-/registry-auth-token-4.2.1.tgz",
      "integrity": "sha512-6gkSb4U6aWJB4SF2ZvLb76yCBjcvufXBqvvEx1HbmKPkutswjW1xNVRY0+daljIYRbogN7O0etYSlbiaEQyMyw==",
      "dev": true,
      "requires": {
        "rc": "^1.2.8"
      }
    },
    "registry-url": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/registry-url/-/registry-url-5.1.0.tgz",
      "integrity": "sha512-8acYXXTI0AkQv6RAOjE3vOaIXZkT9wo4LOFbBKYQEEnnMNBpKqdUrI6S4NT0KPIo/WVvJ5tE/X5LF/TQUf0ekw==",
      "dev": true,
      "requires": {
        "rc": "^1.2.8"
      }
    },
    "require-directory": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/require-directory/-/require-directory-2.1.1.tgz",
      "integrity": "sha1-jGStX9MNqxyXbiNE/+f3kqam30I=",
      "dev": true
    },
    "resolve": {
      "version": "1.22.0",
      "resolved": "https://registry.npmjs.org/resolve/-/resolve-1.22.0.tgz",
      "integrity": "sha512-Hhtrw0nLeSrFQ7phPp4OOcVjLPIeMnRlr5mcnVuMe7M/7eBn98A3hmFRLoFo3DLZkivSYwhRUJTyPyWAk56WLw==",
      "dev": true,
      "requires": {
        "is-core-module": "^2.8.1",
        "path-parse": "^1.0.7",
        "supports-preserve-symlinks-flag": "^1.0.0"
      }
    },
    "resolve-alpn": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/resolve-alpn/-/resolve-alpn-1.2.1.tgz",
      "integrity": "sha512-0a1F4l73/ZFZOakJnQ3FvkJ2+gSTQWz/r2KE5OdDY0TxPm5h4GkqkWWfM47T7HsbnOtcJVEF4epCVy6u7Q3K+g==",
      "dev": true
    },
    "resolve-cwd": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/resolve-cwd/-/resolve-cwd-3.0.0.tgz",
      "integrity": "sha512-OrZaX2Mb+rJCpH/6CpSqt9xFVpN++x01XnN2ie9g6P5/3xelLAkXWVADpdz1IHD/KFfEXyE6V0U01OQ3UO2rEg==",
      "dev": true,
      "requires": {
        "resolve-from": "^5.0.0"
      }
    },
    "resolve-from": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-5.0.0.tgz",
      "integrity": "sha512-qYg9KP24dD5qka9J47d0aVky0N+b4fTU89LN9iDnjB5waksiC49rvMB0PrUJQGoTmH50XPiqOvAjDfaijGxYZw==",
      "dev": true
    },
    "responselike": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/responselike/-/responselike-2.0.0.tgz",
      "integrity": "sha512-xH48u3FTB9VsZw7R+vvgaKeLKzT6jOogbQhEe/jewwnZgzPcnyWui2Av6JpoYZF/91uueC+lqhWqeURw5/qhCw==",
      "dev": true,
      "requires": {
        "lowercase-keys": "^2.0.0"
      }
    },
    "restore-cursor": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/restore-cursor/-/restore-cursor-3.1.0.tgz",
      "integrity": "sha512-l+sSefzHpj5qimhFSE5a8nufZYAM3sBSVMAPtYkmC+4EH2anSGaEMXSD0izRQbu9nfyQ9y5JrVmp7E8oZrUjvA==",
      "dev": true,
      "requires": {
        "onetime": "^5.1.0",
        "signal-exit": "^3.0.2"
      }
    },
    "reusify": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/reusify/-/reusify-1.0.4.tgz",
      "integrity": "sha512-U9nH88a3fc/ekCF1l0/UP1IosiuIjyTh7hBvXVMHYgVcfGvt897Xguj2UOLDeI5BG2m7/uwyaLVT6fbtCwTyzw==",
      "dev": true
    },
    "rimraf": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/rimraf/-/rimraf-3.0.2.tgz",
      "integrity": "sha512-JZkJMZkAGFFPP2YqXZXPbMlMBgsxzE8ILs4lMIX/2o0L9UBw9O/Y3o6wFw/i9YLapcUJWwqbi3kdxIPdC62TIA==",
      "dev": true,
      "requires": {
        "glob": "^7.1.3"
      }
    },
    "run-parallel": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/run-parallel/-/run-parallel-1.2.0.tgz",
      "integrity": "sha512-5l4VyZR86LZ/lDxZTR6jqL8AFE2S0IFLMP26AbjsLVADxHdhB/c0GUsH+y39UfCi3dzz8OlQuPmnaJOMoDHQBA==",
      "dev": true,
      "requires": {
        "queue-microtask": "^1.2.2"
      }
    },
    "safe-buffer": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz",
      "integrity": "sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g==",
      "dev": true
    },
    "semver": {
      "version": "7.3.5",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.3.5.tgz",
      "integrity": "sha512-PoeGJYh8HK4BTO/a9Tf6ZG3veo/A7ZVsYrSA6J8ny9nb3B1VrpkuN+z9OE5wfE5p6H4LchYZsegiQgbJD94ZFQ==",
      "dev": true,
      "requires": {
        "lru-cache": "^6.0.0"
      }
    },
    "semver-diff": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/semver-diff/-/semver-diff-3.1.1.tgz",
      "integrity": "sha512-GX0Ix/CJcHyB8c4ykpHGIAvLyOwOobtM/8d+TQkAd81/bEjgPHrfba41Vpesr7jX/t8Uh+R3EX9eAS5be+jQYg==",
      "dev": true,
      "requires": {
        "semver": "^6.3.0"
      },
      "dependencies": {
        "semver": {
          "version": "6.3.0",
          "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.0.tgz",
          "integrity": "sha512-b39TBaTSfV6yBrapU89p5fKekE2m/NwnDocOVruQFS1/veMgdzuPcnOM34M6CwxW8jH/lxEa5rBoDeUwu5HHTw==",
          "dev": true
        }
      }
    },
    "serialize-error": {
      "version": "7.0.1",
      "resolved": "https://registry.npmjs.org/serialize-error/-/serialize-error-7.0.1.tgz",
      "integrity": "sha512-8I8TjW5KMOKsZQTvoxjuSIa7foAwPWGOts+6o7sgjz41/qMD9VQHEDxi6PBvK2l0MXUmqZyNpUK+T2tQaaElvw==",
      "dev": true,
      "requires": {
        "type-fest": "^0.13.1"
      },
      "dependencies": {
        "type-fest": {
          "version": "0.13.1",
          "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.13.1.tgz",
          "integrity": "sha512-34R7HTnG0XIJcBSn5XhDd7nNFPRcXYRZrBB2O2jdKqYODldSzBAqzsWoZYYvduky73toYS/ESqxPvkDf/F0XMg==",
          "dev": true
        }
      }
    },
    "setprototypeof": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz",
      "integrity": "sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw==",
      "dev": true
    },
    "shebang-command": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz",
      "integrity": "sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==",
      "dev": true,
      "requires": {
        "shebang-regex": "^3.0.0"
      }
    },
    "shebang-regex": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz",
      "integrity": "sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==",
      "dev": true
    },
    "signal-exit": {
      "version": "3.0.7",
      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-3.0.7.tgz",
      "integrity": "sha512-wnD2ZE+l+SPC/uoS0vXeE9L1+0wuaMqKlfz9AMUo38JsyLSBWSFcHR1Rri62LZc12vLr1gb3jl7iwQhgwpAbGQ==",
      "dev": true
    },
    "slash": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/slash/-/slash-3.0.0.tgz",
      "integrity": "sha512-g9Q1haeby36OSStwb4ntCGGGaKsaVSjQ68fBxoQcutl5fS1vuY18H3wSt3jFyFtrkx+Kz0V1G85A4MyAdDMi2Q==",
      "dev": true
    },
    "slice-ansi": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/slice-ansi/-/slice-ansi-3.0.0.tgz",
      "integrity": "sha512-pSyv7bSTC7ig9Dcgbw9AuRNUb5k5V6oDudjZoMBSr13qpLBG7tB+zgCkARjq7xIUgdz5P1Qe8u+rSGdouOOIyQ==",
      "dev": true,
      "requires": {
        "ansi-styles": "^4.0.0",
        "astral-regex": "^2.0.0",
        "is-fullwidth-code-point": "^3.0.0"
      },
      "dependencies": {
        "ansi-styles": {
          "version": "4.3.0",
          "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
          "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
          "dev": true,
          "requires": {
            "color-convert": "^2.0.1"
          }
        }
      }
    },
    "source-map": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
      "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
      "dev": true
    },
    "source-map-support": {
      "version": "0.5.21",
      "resolved": "https://registry.npmjs.org/source-map-support/-/source-map-support-0.5.21.tgz",
      "integrity": "sha512-uBHU3L3czsIyYXKX88fdrGovxdSCoTGDRZ6SYXtSRxLZUzHg5P/66Ht6uoUlHu9EZod+inXhKo3qQgwXUT/y1w==",
      "dev": true,
      "requires": {
        "buffer-from": "^1.0.0",
        "source-map": "^0.6.0"
      }
    },
    "spdx-correct": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/spdx-correct/-/spdx-correct-3.1.1.tgz",
      "integrity": "sha512-cOYcUWwhCuHCXi49RhFRCyJEK3iPj1Ziz9DpViV3tbZOwXD49QzIN3MpOLJNxh2qwq2lJJZaKMVw9qNi4jTC0w==",
      "dev": true,
      "requires": {
        "spdx-expression-parse": "^3.0.0",
        "spdx-license-ids": "^3.0.0"
      }
    },
    "spdx-exceptions": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/spdx-exceptions/-/spdx-exceptions-2.3.0.tgz",
      "integrity": "sha512-/tTrYOC7PPI1nUAgx34hUpqXuyJG+DTHJTnIULG4rDygi4xu/tfgmq1e1cIRwRzwZgo4NLySi+ricLkZkw4i5A==",
      "dev": true
    },
    "spdx-expression-parse": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/spdx-expression-parse/-/spdx-expression-parse-3.0.1.tgz",
      "integrity": "sha512-cbqHunsQWnJNE6KhVSMsMeH5H/L9EpymbzqTQ3uLwNCLZ1Q481oWaofqH7nO6V07xlXwY6PhQdQ2IedWx/ZK4Q==",
      "dev": true,
      "requires": {
        "spdx-exceptions": "^2.1.0",
        "spdx-license-ids": "^3.0.0"
      }
    },
    "spdx-license-ids": {
      "version": "3.0.11",
      "resolved": "https://registry.npmjs.org/spdx-license-ids/-/spdx-license-ids-3.0.11.tgz",
      "integrity": "sha512-Ctl2BrFiM0X3MANYgj3CkygxhRmr9mi6xhejbdO960nF6EDJApTYpn0BQnDKlnNBULKiCN1n3w9EBkHK8ZWg+g==",
      "dev": true
    },
    "sprintf-js": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/sprintf-js/-/sprintf-js-1.0.3.tgz",
      "integrity": "sha1-BOaSb2YolTVPPdAVIDYzuFcpfiw=",
      "dev": true
    },
    "stack-utils": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/stack-utils/-/stack-utils-2.0.5.tgz",
      "integrity": "sha512-xrQcmYhOsn/1kX+Vraq+7j4oE2j/6BFscZ0etmYg81xuM8Gq0022Pxb8+IqgOFUIaxHs0KaSb7T1+OegiNrNFA==",
      "dev": true,
      "requires": {
        "escape-string-regexp": "^2.0.0"
      },
      "dependencies": {
        "escape-string-regexp": {
          "version": "2.0.0",
          "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-2.0.0.tgz",
          "integrity": "sha512-UpzcLCXolUWcNu5HtVMHYdXJjArjsF9C0aNnquZYY4uW/Vu0miy5YoWvbV345HauVvcAUnpRuhMMcqTcGOY2+w==",
          "dev": true
        }
      }
    },
    "statuses": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/statuses/-/statuses-1.5.0.tgz",
      "integrity": "sha1-Fhx9rBd2Wf2YEfQ3cfqZOBR4Yow=",
      "dev": true
    },
    "string_decoder": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.3.0.tgz",
      "integrity": "sha512-hkRX8U1WjJFd8LsDJ2yQ/wWWxaopEsABU1XfkM8A+j0+85JAGppt16cr1Whg6KIbb4okU6Mql6BOj+uup/wKeA==",
      "dev": true,
      "requires": {
        "safe-buffer": "~5.2.0"
      },
      "dependencies": {
        "safe-buffer": {
          "version": "5.2.1",
          "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
          "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==",
          "dev": true
        }
      }
    },
    "string-width": {
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
      "dev": true,
      "requires": {
        "emoji-regex": "^8.0.0",
        "is-fullwidth-code-point": "^3.0.0",
        "strip-ansi": "^6.0.1"
      }
    },
    "strip-ansi": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
      "dev": true,
      "requires": {
        "ansi-regex": "^5.0.1"
      }
    },
    "strip-bom": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/strip-bom/-/strip-bom-3.0.0.tgz",
      "integrity": "sha1-IzTBjpx1n3vdVv3vfprj1YjmjtM=",
      "dev": true
    },
    "strip-final-newline": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/strip-final-newline/-/strip-final-newline-2.0.0.tgz",
      "integrity": "sha512-BrpvfNAE3dcvq7ll3xVumzjKjZQ5tI1sEUIKr3Uoks0XUl45St3FlatVqef9prk4jRDzhW6WZg+3bk93y6pLjA==",
      "dev": true
    },
    "strip-json-comments": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-2.0.1.tgz",
      "integrity": "sha1-PFMZQukIwml8DsNEhYwobHygpgo=",
      "dev": true
    },
    "supertap": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/supertap/-/supertap-2.0.0.tgz",
      "integrity": "sha512-jRzcXlCeDYvKoZGA5oRhYyR3jUIYu0enkSxtmAgHRlD7HwrovTpH4bDSi0py9FtuA8si9cW/fKommJHuaoDHJA==",
      "dev": true,
      "requires": {
        "arrify": "^2.0.1",
        "indent-string": "^4.0.0",
        "js-yaml": "^3.14.0",
        "serialize-error": "^7.0.1",
        "strip-ansi": "^6.0.0"
      }
    },
    "supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "dev": true,
      "requires": {
        "has-flag": "^4.0.0"
      }
    },
    "supports-preserve-symlinks-flag": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/supports-preserve-symlinks-flag/-/supports-preserve-symlinks-flag-1.0.0.tgz",
      "integrity": "sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==",
      "dev": true
    },
    "tar": {
      "version": "6.1.11",
      "resolved": "https://registry.npmjs.org/tar/-/tar-6.1.11.tgz",
      "integrity": "sha512-an/KZQzQUkZCkuoAA64hM92X0Urb6VpRhAFllDzz44U2mcD5scmT3zBc4VgVpkugF580+DQn8eAFSyoQt0tznA==",
      "dev": true,
      "requires": {
        "chownr": "^2.0.0",
        "fs-minipass": "^2.0.0",
        "minipass": "^3.0.0",
        "minizlib": "^2.1.1",
        "mkdirp": "^1.0.3",
        "yallist": "^4.0.0"
      }
    },
    "temp-dir": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/temp-dir/-/temp-dir-2.0.0.tgz",
      "integrity": "sha512-aoBAniQmmwtcKp/7BzsH8Cxzv8OL736p7v1ihGb5e9DJ9kTwGWHrQrVB5+lfVDzfGrdRzXch+ig7LHaY1JTOrg==",
      "dev": true
    },
    "text-encoding-utf-8": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/text-encoding-utf-8/-/text-encoding-utf-8-1.0.2.tgz",
      "integrity": "sha512-8bw4MY9WjdsD2aMtO0OzOCY3pXGYNx2d2FfHRVUKkiCPDWjKuOlhLVASS+pD7VkLTVjW268LYJHwsnPFlBpbAg==",
      "dev": true
    },
    "time-zone": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/time-zone/-/time-zone-1.0.0.tgz",
      "integrity": "sha1-mcW/VZWJZq9tBtg73zgA3IL67F0=",
      "dev": true
    },
    "to-readable-stream": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/to-readable-stream/-/to-readable-stream-1.0.0.tgz",
      "integrity": "sha512-Iq25XBt6zD5npPhlLVXGFN3/gyR2/qODcKNNyTMd4vbm39HUaOiAM4PMq0eMVC/Tkxz+Zjdsc55g9yyz+Yq00Q==",
      "dev": true
    },
    "to-regex-range": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz",
      "integrity": "sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==",
      "dev": true,
      "requires": {
        "is-number": "^7.0.0"
      }
    },
    "toidentifier": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/toidentifier/-/toidentifier-1.0.1.tgz",
      "integrity": "sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA==",
      "dev": true
    },
    "tr46": {
      "version": "0.0.3",
      "resolved": "https://registry.npmjs.org/tr46/-/tr46-0.0.3.tgz",
      "integrity": "sha1-gYT9NH2snNwYWZLzpmIuFLnZq2o=",
      "dev": true
    },
    "trim-off-newlines": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/trim-off-newlines/-/trim-off-newlines-1.0.3.tgz",
      "integrity": "sha512-kh6Tu6GbeSNMGfrrZh6Bb/4ZEHV1QlB4xNDBeog8Y9/QwFlKTRyWvY3Fs9tRDAMZliVUwieMgEdIeL/FtqjkJg==",
      "dev": true
    },
    "ts-node": {
      "version": "10.5.0",
      "resolved": "https://registry.npmjs.org/ts-node/-/ts-node-10.5.0.tgz",
      "integrity": "sha512-6kEJKwVxAJ35W4akuiysfKwKmjkbYxwQMTBaAxo9KKAx/Yd26mPUyhGz3ji+EsJoAgrLqVsYHNuuYwQe22lbtw==",
      "dev": true,
      "requires": {
        "@cspotcode/source-map-support": "0.7.0",
        "@tsconfig/node10": "^1.0.7",
        "@tsconfig/node12": "^1.0.7",
        "@tsconfig/node14": "^1.0.0",
        "@tsconfig/node16": "^1.0.2",
        "acorn": "^8.4.1",
        "acorn-walk": "^8.1.1",
        "arg": "^4.1.0",
        "create-require": "^1.1.0",
        "diff": "^4.0.1",
        "make-error": "^1.1.1",
        "v8-compile-cache-lib": "^3.0.0",
        "yn": "3.1.1"
      }
    },
    "tweetnacl": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/tweetnacl/-/tweetnacl-1.0.3.tgz",
      "integrity": "sha512-6rt+RN7aOi1nGMyC4Xa5DdYiukl2UWCbcJft7YhxReBGQD7OAM8Pbxw6YMo4r2diNEA8FEmu32YOn9rhaiE5yw==",
      "dev": true
    },
    "type-fest": {
      "version": "0.3.1",
      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.3.1.tgz",
      "integrity": "sha512-cUGJnCdr4STbePCgqNFbpVNCepa+kAVohJs1sLhxzdH+gnEoOd8VhbYa7pD3zZYGiURWM2xzEII3fQcRizDkYQ==",
      "dev": true
    },
    "typedarray-to-buffer": {
      "version": "3.1.5",
      "resolved": "https://registry.npmjs.org/typedarray-to-buffer/-/typedarray-to-buffer-3.1.5.tgz",
      "integrity": "sha512-zdu8XMNEDepKKR+XYOXAVPtWui0ly0NtohUscw+UmaHiAWT8hrV1rr//H6V+0DvJ3OQ19S979M0laLfX8rm82Q==",
      "dev": true,
      "requires": {
        "is-typedarray": "^1.0.0"
      }
    },
    "typescript": {
      "version": "4.5.5",
      "resolved": "https://registry.npmjs.org/typescript/-/typescript-4.5.5.tgz",
      "integrity": "sha512-TCTIul70LyWe6IJWT8QSYeA54WQe8EjQFU4wY52Fasj5UKx88LNYKCgBEHcOMOrFF1rKGbD8v/xcNWVUq9SymA==",
      "dev": true
    },
    "u3": {
      "version": "0.1.1",
      "resolved": "https://registry.npmjs.org/u3/-/u3-0.1.1.tgz",
      "integrity": "sha512-+J5D5ir763y+Am/QY6hXNRlwljIeRMZMGs0cT6qqZVVzzT3X3nFPXVyPOFRMOR4kupB0T8JnCdpWdp6Q/iXn3w==",
      "dev": true
    },
    "unique-string": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/unique-string/-/unique-string-2.0.0.tgz",
      "integrity": "sha512-uNaeirEPvpZWSgzwsPGtU2zVSTrn/8L5q/IexZmH0eH6SA73CmAA5U4GwORTxQAZs95TAXLNqeLoPPNO5gZfWg==",
      "dev": true,
      "requires": {
        "crypto-random-string": "^2.0.0"
      }
    },
    "universalify": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/universalify/-/universalify-2.0.0.tgz",
      "integrity": "sha512-hAZsKq7Yy11Zu1DE0OzWjw7nnLZmJZYTDZZyEFHZdUhV8FkH5MCfoU1XMaxXovpyW5nq5scPqq0ZDP9Zyl04oQ==",
      "dev": true
    },
    "update-notifier": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/update-notifier/-/update-notifier-5.1.0.tgz",
      "integrity": "sha512-ItnICHbeMh9GqUy31hFPrD1kcuZ3rpxDZbf4KUDavXwS0bW5m7SLbDQpGX3UYr072cbrF5hFUs3r5tUsPwjfHw==",
      "dev": true,
      "requires": {
        "boxen": "^5.0.0",
        "chalk": "^4.1.0",
        "configstore": "^5.0.1",
        "has-yarn": "^2.1.0",
        "import-lazy": "^2.1.0",
        "is-ci": "^2.0.0",
        "is-installed-globally": "^0.4.0",
        "is-npm": "^5.0.0",
        "is-yarn-global": "^0.3.0",
        "latest-version": "^5.1.0",
        "pupa": "^2.1.1",
        "semver": "^7.3.4",
        "semver-diff": "^3.1.1",
        "xdg-basedir": "^4.0.0"
      }
    },
    "url-parse-lax": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/url-parse-lax/-/url-parse-lax-3.0.0.tgz",
      "integrity": "sha1-FrXK/Afb42dsGxmZF3gj1lA6yww=",
      "dev": true,
      "requires": {
        "prepend-http": "^2.0.0"
      }
    },
    "util-deprecate": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz",
      "integrity": "sha1-RQ1Nyfpw3nMnYvvS1KKJgUGaDM8=",
      "dev": true
    },
    "v8-compile-cache-lib": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/v8-compile-cache-lib/-/v8-compile-cache-lib-3.0.0.tgz",
      "integrity": "sha512-mpSYqfsFvASnSn5qMiwrr4VKfumbPyONLCOPmsR3A6pTY/r0+tSaVbgPWSAIuzbk3lCTa+FForeTiO+wBQGkjA==",
      "dev": true
    },
    "validate-npm-package-license": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/validate-npm-package-license/-/validate-npm-package-license-3.0.4.tgz",
      "integrity": "sha512-DpKm2Ui/xN7/HQKCtpZxoRWBhZ9Z0kqtygG8XCgNQ8ZlDnxuQmWhj566j8fN4Cu3/JmbhsDo7fcAJq4s9h27Ew==",
      "dev": true,
      "requires": {
        "spdx-correct": "^3.0.0",
        "spdx-expression-parse": "^3.0.0"
      }
    },
    "wcwidth": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/wcwidth/-/wcwidth-1.0.1.tgz",
      "integrity": "sha1-8LDc+RW8X/FSivrbLA4XtTLaL+g=",
      "dev": true,
      "requires": {
        "defaults": "^1.0.3"
      }
    },
    "webidl-conversions": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-3.0.1.tgz",
      "integrity": "sha1-JFNCdeKnvGvnvIZhHMFq4KVlSHE=",
      "dev": true
    },
    "well-known-symbols": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/well-known-symbols/-/well-known-symbols-2.0.0.tgz",
      "integrity": "sha512-ZMjC3ho+KXo0BfJb7JgtQ5IBuvnShdlACNkKkdsqBmYw3bPAaJfPeYUo6tLUaT5tG/Gkh7xkpBhKRQ9e7pyg9Q==",
      "dev": true
    },
    "whatwg-url": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-5.0.0.tgz",
      "integrity": "sha1-lmRU6HZUYuN2RNNib2dCzotwll0=",
      "dev": true,
      "requires": {
        "tr46": "~0.0.3",
        "webidl-conversions": "^3.0.0"
      }
    },
    "which": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/which/-/which-2.0.2.tgz",
      "integrity": "sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==",
      "dev": true,
      "requires": {
        "isexe": "^2.0.0"
      }
    },
    "widest-line": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/widest-line/-/widest-line-3.1.0.tgz",
      "integrity": "sha512-NsmoXalsWVDMGupxZ5R08ka9flZjjiLvHVAWYOKtiKM8ujtZWr9cRffak+uSE48+Ob8ObalXpwyeUiyDD6QFgg==",
      "dev": true,
      "requires": {
        "string-width": "^4.0.0"
      }
    },
    "wrap-ansi": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz",
      "integrity": "sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==",
      "dev": true,
      "requires": {
        "ansi-styles": "^4.0.0",
        "string-width": "^4.1.0",
        "strip-ansi": "^6.0.0"
      },
      "dependencies": {
        "ansi-styles": {
          "version": "4.3.0",
          "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
          "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
          "dev": true,
          "requires": {
            "color-convert": "^2.0.1"
          }
        }
      }
    },
    "wrappy": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
      "integrity": "sha1-tSQ9jz7BqjXxNkYFvA0QNuMKtp8=",
      "dev": true
    },
    "write-file-atomic": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/write-file-atomic/-/write-file-atomic-3.0.3.tgz",
      "integrity": "sha512-AvHcyZ5JnSfq3ioSyjrBkH9yW4m7Ayk8/9My/DD9onKeu/94fwrMocemO2QAJFAlnnDN+ZDS+ZjAR5ua1/PV/Q==",
      "dev": true,
      "requires": {
        "imurmurhash": "^0.1.4",
        "is-typedarray": "^1.0.0",
        "signal-exit": "^3.0.2",
        "typedarray-to-buffer": "^3.1.5"
      }
    },
    "xdg-basedir": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/xdg-basedir/-/xdg-basedir-4.0.0.tgz",
      "integrity": "sha512-PSNhEJDejZYV7h50BohL09Er9VaIefr2LMAf3OEmpCkjOi34eYyQYAXUTjEQtZJTKcF0E2UKTh+osDLsgNim9Q==",
      "dev": true
    },
    "y18n": {
      "version": "5.0.8",
      "resolved": "https://registry.npmjs.org/y18n/-/y18n-5.0.8.tgz",
      "integrity": "sha512-0pfFzegeDWJHJIAmTLRP2DwHjdF5s7jo9tuztdQxAhINCdvS+3nGINqPd00AphqJR/0LhANUS6/+7SCb98YOfA==",
      "dev": true
    },
    "yallist": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-4.0.0.tgz",
      "integrity": "sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A==",
      "dev": true
    },
    "yargs": {
      "version": "16.2.0",
      "resolved": "https://registry.npmjs.org/yargs/-/yargs-16.2.0.tgz",
      "integrity": "sha512-D1mvvtDG0L5ft/jGWkLpG1+m0eQxOfaBvTNELraWj22wSVUMWxZUvYgJYcKh6jGGIkJFhH4IZPQhR4TKpc8mBw==",
      "dev": true,
      "requires": {
        "cliui": "^7.0.2",
        "escalade": "^3.1.1",
        "get-caller-file": "^2.0.5",
        "require-directory": "^2.1.1",
        "string-width": "^4.2.0",
        "y18n": "^5.0.5",
        "yargs-parser": "^20.2.2"
      }
    },
    "yargs-parser": {
      "version": "20.2.9",
      "resolved": "https://registry.npmjs.org/yargs-parser/-/yargs-parser-20.2.9.tgz",
      "integrity": "sha512-y11nGElTIV+CT3Zv9t7VKl+Q3hTQoT9a1Qzezhhl6Rp21gJ/IVTW7Z3y9EWXhuUBC2Shnf+DX0antecpAwSP8w==",
      "dev": true
    },
    "yn": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/yn/-/yn-3.1.1.tgz",
      "integrity": "sha512-Ux4ygGWsu2c7isFWe8Yu1YluJmqVhxqK2cLXNQA5AcC3QfbGNpM7fu0Y8b/z16pXLnFxZYvWhd3fhBY9DLmC6Q==",
      "dev": true
    }
  }
}

'''
'''--- testing/package.json ---
{
  "private": true,
  "scripts": {
    "test": "near-workspaces-ava",
    "test:testnet": "near-workspaces-ava --config ./ava.testnet.config.cjs"
  },
  "devDependencies": {
    "near-workspaces-ava": "1.0.0"
  }
}

'''
'''--- testing/tsconfig.json ---
{
  "extends": "near-workspaces-ava/tsconfig.ava.json"
}
'''