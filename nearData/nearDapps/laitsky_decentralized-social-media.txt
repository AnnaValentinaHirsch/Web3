*GitHub Repository "laitsky/decentralized-social-media"*

'''--- README.md ---
This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Decentralized Social Media
Fully on-chain Twitter-like social media built with on NEAR Protocol and NEAR Rust SDK, deployed on mainnet.

**Click [here](sosmed-client.vercel.app/) to visit deployed app. (mainnet)**

**Smart contract repository could be visited through this [link](https://github.com/laitsky/near-sosmed-contracts/tree/main/main-contract)**

Available features of this application is written on the smart contract repo.

Some screenshots of the existing app:

Home:

[![home-ui.png](https://i.postimg.cc/fTCNpsJq/home-ui.png)](https://postimg.cc/GH4VTZPv)

Explore:

[![explore.png](https://i.postimg.cc/rFQBg9Pv/explore.png)](https://postimg.cc/GHTgmvrQ)

Post details:

[![post-detail.png](https://i.postimg.cc/rFHkMJN5/post-detail.png)](https://postimg.cc/F70qx0qK)

My profile:

[![my-profile.png](https://i.postimg.cc/RC8ffrM8/my-profile.png)](https://postimg.cc/grVnFTLq)

Account settings:

[![account.png](https://i.postimg.cc/yYcP86Fn/account.png)](https://postimg.cc/zVDWdr2R)

Following:

[![following.png](https://i.postimg.cc/k4yCCPT5/following.png)](https://postimg.cc/9RzKPK53)

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.<br />
Open [http://localhost:3000](http://localhost:3000) to view it in the browser.

The page will reload if you make edits.<br />
You will also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.<br />
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.<br />
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.<br />
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can’t go back!**

If you aren’t satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you’re on your own.

You don’t have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn’t feel obligated to use this feature. However we understand that this tool wouldn’t be useful if you couldn’t customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: https://facebook.github.io/create-react-app/docs/code-splitting

### Analyzing the Bundle Size

This section has moved here: https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size

### Making a Progressive Web App

This section has moved here: https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app

### Advanced Configuration

This section has moved here: https://facebook.github.io/create-react-app/docs/advanced-configuration

### Deployment

This section has moved here: https://facebook.github.io/create-react-app/docs/deployment

### `npm run build` fails to minify

This section has moved here: https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify

'''
'''--- package.json ---
{
  "name": "sosmed-client",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@chakra-ui/icons": "^1.1.7",
    "@chakra-ui/react": "^1.8.8",
    "@emotion/react": "^11.9.0",
    "@emotion/styled": "^11.8.1",
    "@testing-library/jest-dom": "^5.16.4",
    "@testing-library/react": "^10.4.9",
    "@testing-library/user-event": "^12.8.3",
    "assert": "^2.0.0",
    "buffer": "^6.0.3",
    "framer-motion": "^4.1.17",
    "near-api-js": "^0.44.2",
    "react": "^17.0.2",
    "react-dom": "^17.0.2",
    "react-hook-form": "^7.30.0",
    "react-icons": "^4.3.1",
    "react-router-dom": "^6.3.0",
    "react-scripts": "5.0.1",
    "uuid": "^8.3.2",
    "web-vitals": "^0.2.4",
    "web3.storage": "^4.2.0"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": "react-app"
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

'''
'''--- public/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>Social Media DAO</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

'''
'''--- public/manifest.json ---
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

'''
'''--- public/robots.txt ---
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

'''
'''--- src/App.js ---
import React, { useState, useEffect } from 'react';
import {
  ChakraProvider,
  theme,
  Box,
  Container,
  Avatar,
  AvatarBadge,
  Button,
  Menu,
  MenuButton,
  MenuList,
  MenuItem,
  Link,
  Text,
} from '@chakra-ui/react';
import { IoHomeSharp, IoCompassSharp } from 'react-icons/io5';
import { 
  Routes,
  Route,
  useLocation,
  useNavigate
} from "react-router-dom";

import Login from './pages/Login';
import Home from './pages/Home';
import Explore from './pages/Explore';
import Register from './pages/Register';
import Profile from './pages/Profile';
import Account from './pages/Account';
import FollowList from './pages/FollowList';
import PostDetail from './pages/PostDetail';

import { IPFSGateway, logout } from './utils';

function App() {
  const location = useLocation();
  const navigate = useNavigate();
  const [path, setPath] = useState('');
  const [avatar, setAvatar] = useState('');

  useEffect(() => {
    getLoggedProfileImage();
  }, []);

  const getLoggedProfileImage = async () => {
    const accountDetails = await window.contract.get_account_details({ address: window.accountID });
    const profileImageUrl = IPFSGateway(accountDetails.profile_image_url);
    setAvatar(profileImageUrl);
  }

  useEffect(() => {
    setPath(location.pathname);
  }, [location.pathname]);

  const showNavbar = () => {
    if (
      path === '/' ||
      path === '/register'
    ) {
      return;
    }

    return (
      <Box display="flex" flexDirection="row" justifyContent="space-between" alignItems="center" boxShadow="base" padding={4} borderRadius={6} mb={3}>
        <Link onClick={() => navigate('../home')}>
          <Box display="flex" flexDirection="row" alignItems="center">
            <IoHomeSharp />
            <Text ml={1}>Home</Text>
          </Box>
        </Link>
        <Link onClick={() => navigate('../explore')}>
          <Box display="flex" flexDirection="row" alignItems="center">
            <IoCompassSharp />
            <Text ml={1}>Explore</Text>
          </Box>
        </Link>
        <Menu>
          <MenuButton as={Button} backgroundColor="transparent">
            <Avatar size="md" mr={2} src={avatar.length !== 0 ? avatar : ''} showBorder="true">
            <AvatarBadge boxSize='0.85em' bg='green.500' />
            </Avatar> 
          </MenuButton>
          <MenuList>
            <MenuItem onClick={() => navigate('../profile/' + window.accountID)}>Profile</MenuItem>
            <MenuItem onClick={() => navigate('../account')}>Account</MenuItem>
            <MenuItem onClick={logout}>Logout</MenuItem>
          </MenuList>
        </Menu>
      </Box>
    )
  }

  return (
    <ChakraProvider theme={theme}>
      <Box>
        <Container mt={3}>
          {showNavbar()}
        <Routes>
          <Route path="/" element={<Login />} />
          <Route path="/home" element={<Home />} />
          <Route path="/explore" element={<Explore />} />
          <Route path="/register" element={<Register />} />
          <Route path="/profile/:accountId" element={<Profile />} />
          <Route path="/account" element={<Account />} />
          <Route path="/profile/:accountId/followers" element={<FollowList />} />
          <Route path="/profile/:accountId/following" element={<FollowList />} />
          <Route path="/post/:postId" element={<PostDetail />} />
        </Routes>
        </Container>
      </Box>
    </ChakraProvider>
  );
}

export default App;

'''
'''--- src/App.test.js ---
import React from 'react';
import { screen } from '@testing-library/react';
import { render } from './test-utils';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn chakra/i);
  expect(linkElement).toBeInTheDocument();
});

'''
'''--- src/components/posts.js ---
import { 
  Box, 
  Button, 
  Heading, 
  Text, 
  Textarea, 
  IconButton,
  Avatar,
  Link
} from "@chakra-ui/react";
import { CgHeart, CgComment } from 'react-icons/cg';
import { useNavigate } from "react-router-dom";

import '../index.css';

import { IPFSGateway } from "../utils";

export const PostContainer = ({
  handleLikeBtnClick,
  handleShowAllPostLikes,
  handleCommentBtnClick,
  postId,
  username,
  profileImageUrl,
  date,
  content,
  likeCount,
  commentCount,
  value,
  isLiked,
  handleInputChange,
  handleCommentSubmit,
}) => {
  const navigate = useNavigate();

  return (
    <Box backgroundColor="gray.100" display="flex" flexDirection="column" padding={4} borderRadius={6} mt={3} mb={3}>
      <Box className="click-box" onClick={() => navigate('../post/' + postId)}>
        <Box display="flex" flexDirection="row" justifyContent="space-between" alignItems="center" pb={4}>
          <Box display="flex" flexDirection="row" alignItems="center">
            <Avatar
              size="sm" 
              src={profileImageUrl.length !== 0 ? IPFSGateway(profileImageUrl) : ''}
            />
            <Heading ml={2} size="xs"><Link onClick={() => {navigate('../profile/' + username)}}>{username}</Link></Heading>
          </Box>
          <Text fontSize="xs">{date}</Text>
        </Box>
        <Text pb={6}>{content}</Text>
      </Box>
      <Box display="flex" flexDirection="row" justifyContent="flex-start" alignItems="center">
        <Text fontSize="xs">
          <IconButton size="sm" ml={-2} icon={<CgHeart color={isLiked ? "red" : ""} />} onClick={handleLikeBtnClick} />
            <button className="link" onClick={handleShowAllPostLikes}><span style={{fontWeight: "bold"}}>{likeCount} Likes</span></button>
        </Text>
        <Text mr={1}></Text>
          <Button size="sm" leftIcon={<CgComment />} onClick={handleCommentBtnClick}> 
            <Text fontSize="0.91em"><span style={{fontWeight: "bold"}}>{commentCount} </span>Comments</Text>
          </Button>
      </Box>
      <Box display="flex" flexDirection="column" alignItems="flex-end" mt={3}>
        <Textarea
          value={value}
          onChange={handleInputChange}
          backgroundColor="whiteAlpha.700"
          resize='none'
          placeholder="Give your reply"
        />
        {value ? (
          <Button size="md" mt={3} colorScheme='blue' onClick={handleCommentSubmit}>Comment</Button>
        ) : ''}
      </Box>
    </Box>
  );
}

export const CreatePostForm = ({
  value,
  handleInputChange,
  handleSubmit
}) => (
  <Box display="flex" flexDirection="column" borderRadius={6} mt={3} mb={3}>
    <Textarea
      value={value}
      onChange={handleInputChange}
      resize='none' 
      rows={4.5} 
      placeholder="What are you thinking?"
      mb={4}
    />
    <Button colorScheme='blue' onClick={handleSubmit} disabled={!value.length}>Post</Button>
  </Box>
);

'''
'''--- src/config.js ---
import * as nearAPI from 'near-api-js';

const CONTRACT_NAME_MAINNET = 'x.dao-sosmed.near';
const CONTRACT_NAME_TESTNET = 'x.dao-sosmed.testnet';

export function getConfig(env) {
  switch (env) {
    case 'production':
    case 'mainnet':
      return {
        networkId: 'mainnet',
        keyStore: new nearAPI.keyStores.BrowserLocalStorageKeyStore(),
        nodeUrl: 'https://rpc.mainnet.near.org',
        contractName: CONTRACT_NAME_MAINNET,
        walletUrl: 'https://wallet.near.org',
        helperUrl: 'https://helper.mainnet.near.org',
        explorerUrl: 'https://explorer.mainnet.near.org',
      }
    case 'development':
    case 'testnet':
      return {
        networkId: 'testnet',
        keyStore: new nearAPI.keyStores.BrowserLocalStorageKeyStore(),
        nodeUrl: 'https://rpc.testnet.near.org',
        contractName: CONTRACT_NAME_TESTNET,
        walletUrl: 'https://wallet.testnet.near.org',
        helperUrl: 'https://helper.testnet.near.org',
        explorerUrl: 'https://explorer.testnet.near.org',
      }
    default:
      throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`)
    }
}
'''
'''--- src/index.css ---
button.link {
  background: none;
  border: none;
}

.click-box:hover {
  cursor: pointer;
}
'''
'''--- src/index.js ---
import { ColorModeScript } from '@chakra-ui/react';
import React, { StrictMode } from 'react';
import ReactDOM from 'react-dom';
import { Buffer } from 'buffer';
import { BrowserRouter } from 'react-router-dom';
import App from './App';
import reportWebVitals from './reportWebVitals';
import * as serviceWorker from './serviceWorker';
import { initApp } from './utils';

window.nearInitPromise = initApp()
  .then(() => {
    global.Buffer = Buffer;
    ReactDOM.render(
      <StrictMode>
      <ColorModeScript />
      <BrowserRouter>
        <App />
      </BrowserRouter>
    </StrictMode>,
    document.getElementById('root')
    )
  })
  .catch(console.error);

// If you want your app to work offline and load faster, you can change
// unregister() to register() below. Note this comes with some pitfalls.
// Learn more about service workers: https://cra.link/PWA
serviceWorker.unregister();

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();

'''
'''--- src/pages/Account.js ---
import React, { useState, useEffect, useRef } from 'react';
import {
  Box,
  Heading,
  Center,
  Input,
  Avatar,
  Link,
  Button,
  Textarea,
  FormControl,
  FormLabel,
  VStack,
  Spinner,
  Text
} from '@chakra-ui/react';
import { useForm } from 'react-hook-form';

import { v4 as uuidv4 } from 'uuid';

import { IPFSGateway, makeStorageClient } from '../utils';

export default function Account() {
  const { register, handleSubmit, setValue } = useForm();
  const [imageCID, setImageCID] = useState('');
  const [isLoading, setIsLoading] = useState(false);

  const inputFileRef = useRef(null);

  useEffect(() => {
    populateForm();
  }, []);

  
  const populateForm = async () => {
    const accountDetails = await window.contract.get_account_details({ address: window.accountID });
    // Populate the form
    setValue('name', accountDetails.name);
    setValue('description', accountDetails.description);
    setValue('location', accountDetails.location);
    setValue('url', accountDetails.url);
    console.log(accountDetails.profile_image_url)
    setImageCID(accountDetails.profile_image_url);
  }

  const onSubmit = async (data) => {
    await window.contract.edit_account_details({
      name: data.name,
      location: data.location,
      url: data.url,
      description: data.description
    });
  }

  const onFileChange = async (e) => {
    if (e.target.files !== null) {
      setIsLoading(true);
      const client = makeStorageClient();

      // Changing the file name
      Object.defineProperty(e.target.files[0], 'name', {
        writable: true,
        value: uuidv4()
      });

      const cid = await client.put(e.target.files);
      const newImageUrl = `${cid}/${e.target.files[0].name}`;

      await window.contract.edit_profile_image({ profile_image_url: newImageUrl });

      setIsLoading(false);
    }
  }

  return (
    <Box>
      <Heading size="lg">Your Account</Heading>
      <Box pb={4} />
      <Center mb={4}>
        <Link>
          <input type="file" id="input" name="file" ref={inputFileRef} style={{display: 'none'}} onChange={onFileChange} />
          <Avatar size="2xl" src={IPFSGateway(imageCID)} onClick={() => inputFileRef.current.click()} />
        </Link>
      </Center>
      {isLoading && (
        <Center>
          <Spinner color="blue.500" />
          <Text>Changing profile picture, please wait...</Text>
        </Center>
      )}
      <form onSubmit={handleSubmit(onSubmit)}>
        <FormControl>
          <VStack align='left' spacing='0.8em'>
            <Box>
              <FormLabel htmlFor='displayName'>Display Name</FormLabel>
              <Input id='displayName' type='text' {...register('name')} />
            </Box>
            <Box>
              <FormLabel htmlFor='bio'>Bio</FormLabel>
              <Textarea id='bio' size='lg' resize='none' {...register('description')}/>
            </Box>
            <Box>
              <FormLabel htmlFor='location'>Location</FormLabel>
              <Input id='location' type='text' {...register('location')} />
            </Box>
            <Box>
              <FormLabel htmlFor='website'>Website</FormLabel>
              <Input id='website' type='text' {...register('url')} />
            </Box>
            {!isLoading && (
              <Button colorScheme='blue' type='submit'>Save</Button>
            )}
          </VStack>
        </FormControl>
      </form>
    </Box> 
  )
}
'''
'''--- src/pages/Explore.js ---
import React, { useState, useEffect } from 'react';
import {
  Box, 
  Button, 
  Heading,
  Modal,
  ModalOverlay,
  ModalContent,
  ModalHeader,
  ModalFooter,
  ModalBody,
  ModalCloseButton,
  useDisclosure,
  Avatar,
  Text,
} from '@chakra-ui/react';

import { PostContainer } from '../components/posts';

import { IPFSGateway } from '../utils';

export default function Explore() {
  const [posts, setPosts] = useState([]);
  const [modalContent, setModalContent] = useState([]);
  const [modalType, setModalType] = useState('');
  const [commentInputArr, setCommentInputArr] = useState([]);
  const { isOpen, onOpen, onClose } = useDisclosure();

  useEffect(() => {
    getAllPosts();
  }, []);
  
  const getAllPosts = async () => {
    const res = await window.contract.get_all_posts({ account_id: window.accountID });
    setPosts(res);
  }

  const handleLikeBtnClick = async (postId) => {
    await window.contract.like_post({ post_id: +postId });
  }
  
  const handleShowAllPostLikes = (postId) => async () => {
    setModalType('pl');
    const res = await window.contract.get_post_likes_details({ post_id: +postId });
    setModalContent(res);
    onOpen();
  }

  const handleCommentBtnClick = (postId) => async () => {
    setModalType('pc');
    const res = await window.contract.get_post_comment_details({ post_id: +postId });
    setModalContent(res);
    onOpen();
  }

  const handleCommentInputChange = (index) => (e) => {
    let prevCommentInputValue = [...commentInputArr];
    prevCommentInputValue[index] = e.target.value;
    setCommentInputArr(prevCommentInputValue);
  }

  const handleCommentSubmit = (postId, index) => async () => {
    if (!commentInputArr[index]) {
      return;
    }
    await window.contract.comment_on_post({
      post_id: +postId,
      comment: commentInputArr[index]
    });
  }

  const determineModalHeader = () => {
    if (modalType === 'pl') {
      return 'All Likes';
    } else if (modalType === 'pc') {
      return 'All Comments';
    }
  }

  const showModalContent = () => {
    if (modalType === 'pl') {
      return (
        modalContent.map(c => (
          <Box key={c.user_address} display="flex" flexDirection="row" alignItems="center" mb={3}>
            <Avatar
              size="sm"
              src={c.profile_image_url.length !== 0 ? IPFSGateway(c.profile_image_url) : ''}
            />
            <Heading ml={2} size="xs">{c.user_address}</Heading>
          </Box>
        ))
      )
    } else if (modalType === 'pc') {
      return (
        modalContent.map(c => (
          <Box key={c.comment_id} mb={3} backgroundColor="gray.100" borderRadius={6} padding={3}>
            <Box display="flex" flexDirection="row" justifyContent="space-between">
              <Box key={c.user_address} display="flex" flexDirection="row" alignItems="center">
                <Avatar
                  size="sm"
                  src={c.profile_image_url.length !== 0 ? IPFSGateway(c.profile_image_url) : ''}
                />
                <Heading ml={2} size="xs">{c.user_address}</Heading>
              </Box>
              <Text fontSize="xs">{new Date(c.created_at / 1_000_000).toLocaleString()}</Text>
            </Box>
            <Text pt={2}>{c.comment}</Text>
          </Box>
        ))
      )
    }
  }

  return (
    <Box>
      <Modal onClose={onClose} isOpen={isOpen} isCentered>
        <ModalOverlay />
        <ModalContent>
          <ModalHeader>{determineModalHeader()}</ModalHeader>
          <ModalCloseButton />
          <ModalBody>
            {showModalContent()}
          </ModalBody>
          <ModalFooter>
            <Button onClick={onClose}>Close</Button>
          </ModalFooter>
        </ModalContent>
      </Modal>
      <Heading size="lg" pb={4}>Explore</Heading>
      {posts.map((post, index) => (
        <PostContainer
          key={post.post.post_id}
          handleLikeBtnClick={() => handleLikeBtnClick(post.post.post_id)}
          handleShowAllPostLikes={handleShowAllPostLikes(post.post.post_id)}
          handleCommentBtnClick={handleCommentBtnClick(post.post.post_id)}
          postId={post.post.post_id}
          username={post.post.user_address}
          profileImageUrl={post.profile_image_url}
          date={new Date(post.post.created_at / 1_000_000).toLocaleString()}
          content={post.post.content}
          likeCount={post.like_count}
          commentCount={post.comment_count}
          isLiked={post.is_liked}
          value={commentInputArr[index]}
          handleInputChange={handleCommentInputChange(index)}
          handleCommentSubmit={handleCommentSubmit(post.post.post_id, index)}
        />
      ))}
    </Box>
  )
}
'''
'''--- src/pages/FollowList.js ---
import React, { useState, useEffect } from 'react';
import { useParams, useLocation } from 'react-router-dom';
import { 
  Box,
  Heading,
  Text,
  Avatar,
  Button,
  Link
} from '@chakra-ui/react';
import { Link as RRLink } from 'react-router-dom';
import { IPFSGateway } from '../utils';

const PATH_TYPE = {
  FOLLOWERS: 'followers',
  FOLLOWING: 'following',
}

export default function FollowList() {
  const [path, setPath] = useState('');
  const [followList, setFollowList] = useState([]);
  const { accountId } = useParams();
  const location = useLocation();

  useEffect(() => {
    const thirdPath = location.pathname.split('/')[3];
    setPath(thirdPath);
  }, []);

  useEffect(() => {
    if (path) {
      getFollowList();
    }
  }, [path])

  const getFollowList = async () => {
    let res;
    if (path === PATH_TYPE.FOLLOWERS) {
      res = await window.contract.get_user_followers_list({ user_account_id: accountId });
      console.log(res);
    } else if (path === PATH_TYPE.FOLLOWING) {
      res = await window.contract.get_user_following_list({ user_account_id: accountId });
      console.log(res);
    }

    setFollowList(res);
  }

  const followUser = (address) => async () => {
    await window.contract.follow_user({ address });
  }

  const returnHeader = () => {
    if (path === PATH_TYPE.FOLLOWERS) {
      return (
        <Box>
          <Heading size="lg">Followers</Heading>
          <Heading size="sm" color="gray.500">{accountId}</Heading>
        </Box>
      )
    } else if (path === PATH_TYPE.FOLLOWING) {
      return (
        <Box>
        <Heading size="lg">Following</Heading>
        <Heading size="sm" color="gray.500">{accountId}</Heading>
      </Box>
      )
    }
  }

  const renderFollowButton = (isFollowed, addressToFollow) => {
    if (window.accountID === addressToFollow) {
      return ;
    } else if (isFollowed) {
      return <Button colorScheme="blue" onClick={followUser(addressToFollow)} variant="outline">Unfollow</Button>
    } else {
      return <Button colorScheme="blue" onClick={followUser(addressToFollow)}>Follow</Button>
    }
  }

  return (
    <Box>
      {returnHeader()}
      {followList.map((user) => (
        <Box 
          bgColor="gray.200" 
          padding={3}
          my={3}
          borderRadius={10} 
          display="flex" 
          flexDirection="row" 
          alignItems="center"
          justifyContent="space-between"
          key={user.user_account_id}
        >
          <Box display="flex" flexDirection="row" alignItems="center">
            <Avatar size="sm" src={IPFSGateway(user.profile_image_url)} mr={3} />
            <Link as={RRLink} to={`/profile/${user.user_account_id}`}>
              <Text fontWeight="semibold">{user.user_account_id}</Text>
            </Link>
          </Box>
          {renderFollowButton(user.is_followed, user.user_account_id)}
        </Box>
      ))}
    </Box>
  )
}
'''
'''--- src/pages/Home.js ---
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { 
  Box, 
  Button, 
  Heading,
  Modal,
  ModalOverlay,
  ModalContent,
  ModalHeader,
  ModalFooter,
  ModalBody,
  ModalCloseButton,
  useDisclosure,
  Avatar,
  Text,
} from "@chakra-ui/react";
import { CreatePostForm, PostContainer } from '../components/posts';

import { IPFSGateway } from '../utils';

export default function Home() {
  const navigate = useNavigate();
  const [isExist, setIsExist] = useState();
  const [posts, setPosts] = useState([]);
  const [inputValue, setInputValue] = useState('');
  const [modalContent, setModalContent] = useState([]);
  const [modalType, setModalType] = useState('');
  const [commentInputArr, setCommentInputArr] = useState([]);
  const { isOpen, onOpen, onClose } = useDisclosure();

  useEffect(() => {
    isUserExist();
    if (!window.walletConnection.isSignedIn()) {
      navigate('../')
    }
    getAllPosts();
  }, []);

  useEffect(() => {
    if (isExist === false) {
      navigate('../')
    }
  }, [isExist]);

  const isUserExist = async () => {
    const isUserExist = await window.contract.is_user_exists({ address: window.accountID });
    setIsExist(isUserExist);
  }

  const getAllPosts = async () => {
    const res = await window.contract.get_all_posts_personalized({ account_id: window.accountID });
    setPosts(res);
  }

  const handleLikeBtnClick = async (postId) => {
    await window.contract.like_post({ post_id: +postId });
  }

  const handleShowAllPostLikes = (postId) => async () => {
    setModalType('pl');
    const res = await window.contract.get_post_likes_details({ post_id: +postId });
    setModalContent(res);
    onOpen();
  }

  const handleCommentBtnClick = (postId) => async () => {
    setModalType('pc');
    const res = await window.contract.get_post_comment_details({ post_id: +postId });
    setModalContent(res);
    onOpen();
  }

  const handlePostFormInputChange = (e) => {
    setInputValue(e.target.value);
  }

  const handlePostFormSubmit = async () => {
    setInputValue('');
    await window.contract.create_post({ content: inputValue });
  }

  const handleCommentInputChange = (index) => (e) => {
    let prevCommentInputValue = [...commentInputArr];
    prevCommentInputValue[index] = e.target.value;
    setCommentInputArr(prevCommentInputValue);
  }

  const handleCommentSubmit = (postId, index) => async () => {
    if (!commentInputArr[index]) {
      return;
    }
    await window.contract.comment_on_post({
      post_id: +postId,
      comment: commentInputArr[index]
    });
  }

  const determineModalHeader = () => {
    if (modalType === 'pl') {
      return 'All Likes';
    } else if (modalType === 'pc') {
      return 'All Comments';
    }
  }

  const showModalContent = () => {
    if (modalType === 'pl') {
      return (
        modalContent.map(c => (
          <Box key={c.user_address} display="flex" flexDirection="row" alignItems="center" mb={3}>
            <Avatar
              size="sm"
              src={c.profile_image_url.length !== 0 ? IPFSGateway(c.profile_image_url) : ''}
            />
            <Heading ml={2} size="xs">{c.user_address}</Heading>
          </Box>
        ))
      )
    } else if (modalType === 'pc') {
      return (
        modalContent.map(c => (
          <Box key={c.comment_id} mb={3} backgroundColor="gray.100" borderRadius={6} padding={3}>
            <Box display="flex" flexDirection="row" justifyContent="space-between">
              <Box key={c.user_address} display="flex" flexDirection="row" alignItems="center">
                <Avatar
                  size="sm"
                  src={c.profile_image_url.length !== 0 ? IPFSGateway(c.profile_image_url) : ''}
                />
                <Heading ml={2} size="xs">{c.user_address}</Heading>
              </Box>
              <Text fontSize="xs">{new Date(c.created_at / 1_000_000).toLocaleString()}</Text>
            </Box>
            <Text pt={2}>{c.comment}</Text>
          </Box>
        ))
      )
    }
  }

  return (
    <Box>
      <Modal onClose={onClose} isOpen={isOpen} isCentered>
        <ModalOverlay />
        <ModalContent>
          <ModalHeader>{determineModalHeader()}</ModalHeader>
          <ModalCloseButton />
          <ModalBody>
            {showModalContent()}
          </ModalBody>
          <ModalFooter>
            <Button onClick={onClose}>Close</Button>
          </ModalFooter>
        </ModalContent>
      </Modal>
      <Heading size="lg" pb={4}>Home</Heading>
      <CreatePostForm
        value={inputValue}
        handleInputChange={handlePostFormInputChange}
        handleSubmit={handlePostFormSubmit}
      />
      {posts.map((post, index) => (
        <PostContainer
          key={post.post.post_id}
          handleLikeBtnClick={() => handleLikeBtnClick(post.post.post_id)}
          handleShowAllPostLikes={handleShowAllPostLikes(post.post.post_id)}
          handleCommentBtnClick={handleCommentBtnClick(post.post.post_id)}
          postId={post.post.post_id}
          username={post.post.user_address}
          profileImageUrl={post.profile_image_url}
          date={new Date(post.post.created_at / 1_000_000).toLocaleString()}
          content={post.post.content}
          likeCount={post.like_count}
          commentCount={post.comment_count}
          isLiked={post.is_liked}
          value={commentInputArr[index]}
          handleInputChange={handleCommentInputChange(index)}
          handleCommentSubmit={handleCommentSubmit(post.post.post_id, index)}
        />
      ))}
    </Box>
  )
}
'''
'''--- src/pages/Login.js ---
import { useState, useEffect } from 'react';
import { Box, Button, Center, Container, Heading, VStack } from "@chakra-ui/react";
import { useNavigate } from 'react-router-dom';
import { login } from "../utils";

export default function Login() {
  const navigate = useNavigate();
  const [isExist, setIsExist] = useState();
  useEffect(() => {
    if (window.walletConnection.isSignedIn()) {
      isUserExist()
    }
  }, []);

  useEffect(() => {
    if (isExist) {
      navigate('../home');
    } else if (window.walletConnection.isSignedIn() && isExist === false){
      navigate('../register');
    }
  }, [isExist])

  const isUserExist = async () => {
    const isUserExist = await window.contract.is_user_exists({address: window.accountID});
    setIsExist(isUserExist);
  }

  const handleLogin = () => {
    login();
  }
  
  return (
    <Box>
      <Container>
        <Center>
          <VStack>
            <Heading pt={12}>Social Media DAO</Heading>
            <Button colorScheme='blue' onClick={handleLogin}>Login</Button>
          </VStack>
        </Center>
      </Container>
    </Box>
  )
}
'''
'''--- src/pages/PostDetail.js ---
import React, { useState, useEffect } from 'react';
import { 
  Box,
  Button, 
  Heading, 
  Text, 
  Textarea, 
  IconButton,
  Avatar,
  Link,
  Modal,
  ModalOverlay,
  ModalContent,
  ModalHeader,
  ModalFooter,
  ModalBody,
  ModalCloseButton,
  useDisclosure,
} from '@chakra-ui/react';
import { CgHeart, CgComment } from 'react-icons/cg';
import { useParams, Link as RRLink } from "react-router-dom";

import { IPFSGateway } from "../utils";

export default function PostDetail() {
  const { postId } = useParams();
  const [post, setPost] = useState({ post: {}, comment_details: [], like_details: [] });
  const [value, setValue] = useState('');
  const { isOpen, onOpen, onClose } = useDisclosure();

  useEffect(() => {
    if (postId) {
      getPostDetail();
    }
  }, [postId]);

  const getPostDetail = async () => {
    const res = await window.contract.get_single_post({ post_id: +postId, account_id: window.accountID });
    setPost(res);
    console.log(res)
  }

  const handleInputChange = (e) => {
    setValue(e.target.value)
  }

  const handleCommentBtnSubmit = async () => {
    await window.contract.comment_on_post({
      post_id: +postId,
      comment: value
    });
    setValue('');
  }

  const handleLikeBtnClick = async () => {
    await window.contract.like_post({ post_id: +postId });
  }

  const handleShowAllLikes = async () => {
    onOpen();
  }

  return (
    <Box
      bgColor="gray.100"
      display="flex"
      flexDirection="column"
      padding={4}
      borderRadius={6}
      mt={3}
      mb={3}
    >
      <Modal onClose={onClose} isOpen={isOpen} isCentered>
        <ModalOverlay />
        <ModalContent>
          <ModalHeader>All Likes</ModalHeader>
          <ModalCloseButton />
          <ModalBody>
            {post.like_details.map((pl) => (
              <Box key={pl.user_address} display="flex" flexDirection="row" alignItems="center" mb={3}>
                <Avatar
                  size="sm"
                  src={pl.profile_image_url.length !== 0 ? IPFSGateway(pl.profile_image_url) : ''}
                />
                <Heading ml={2} size="xs">{pl.user_address}</Heading>
              </Box>
            ))}
          </ModalBody>
          <ModalFooter>
            <Button onClick={onClose}>Close</Button>
          </ModalFooter>
        </ModalContent>
      </Modal>
      <Box
        display="flex"
        flexDirection="row"
        justifyContent="space-between"
        alignItems="center"
        pb={4}
      >
        <Box display="flex" flexDirection="row" alignItems="center">
          <Avatar
            size="sm"
            src={IPFSGateway(post.profile_image_url)}
          />
          <Heading ml={2} size="xs">
            <Link as={RRLink} to={`/profile/${post.post.user_address}`}>{post.post.user_address}</Link>
          </Heading>
        </Box>
        <Text fontSize="xs">{new Date(post.post.created_at / 1_000_000).toLocaleString()}</Text>
      </Box>
      <Text pb={6}>{post.post.content}</Text>
      <Box
        display="flex"
        flexDirection="row"
        justifyContent="flex-start"
        alignItems="center"
      >
        <Text fontSize="xs" mr={2}>
          <IconButton onClick={handleLikeBtnClick} size="sm" ml={-2} icon={<CgHeart color={post.is_liked ? 'red' : ''} />} />
          <button onClick={handleShowAllLikes}><span style={{fontWeight: "bold"}}>{post.like_count} Likes</span></button>
        </Text>
        <Text fontSize="xs">
          <IconButton size="sm" ml={-2} icon={<CgComment />} />
          <span style={{fontWeight: "bold"}}>{post.comment_count} Comments</span>
        </Text>
      </Box>
      <Box display="flex" flexDirection="column" alignItems="flex-end" mt={3}>
        <Textarea
          value={value}
          onChange={handleInputChange}
          bgColor="whiteAlpha.700"
          resize='none'
          placeholder="Give your reply"
        />
        <Button size="md" mt={3} colorScheme='blue' onClick={handleCommentBtnSubmit}>Comment</Button>
      </Box>
      <Box mb={4} />
      {post.comment_details.map((pc) => (
      <Box key={pc.comment_id} mb={3} backgroundColor="gray.100" borderRadius={6} padding={3}>
        <Box display="flex" flexDirection="row" justifyContent="space-between">
          <Box key={pc.user_address} display="flex" flexDirection="row" alignItems="center">
            <Avatar
              size="sm"
              src={IPFSGateway(pc.profile_image_url)}
            />
            <Heading ml={2} size="xs">{pc.user_address}</Heading>
          </Box>
          <Text fontSize="xs">{new Date(pc.created_at / 1_000_000).toLocaleString()}</Text>
        </Box>
        <Text pt={2}>{pc.comment}</Text>
      </Box>
      ))}
    </Box>
  )
}
'''
'''--- src/pages/Profile.js ---
import React, { useState, useEffect } from 'react';
import {
  Box,
  Avatar,
  Heading,
  Text,
  Link,
  Tabs,
  TabList,
  TabPanels,
  Tab,
  Modal,
  ModalOverlay,
  ModalContent,
  ModalHeader,
  ModalFooter,
  ModalBody,
  ModalCloseButton,
  useDisclosure,
  Button
} from '@chakra-ui/react';
import {
  IoLocationOutline,
  IoLinkOutline,
  IoCalendarOutline
} from 'react-icons/io5'
import { useParams, useNavigate, Link as RRLink } from 'react-router-dom';

import { PostContainer } from '../components/posts';

import { IPFSGateway } from '../utils';

export default function Profile() {
  const [account, setAccount] = useState({});
  const [following, setFollowing] = useState([]);
  const [followers, setFollowers] = useState([]);
  const [isFollowed, setIsFollowed] = useState();
  const [posts, setPosts] = useState([]);
  const [commentInputArr, setCommentInputArr] = useState([]);
  const [modalContent, setModalContent] = useState([]);
  const [modalType, setModalType] = useState('');
  const { accountId } = useParams();
  const navigate = useNavigate();
  const { isOpen, onOpen, onClose } = useDisclosure();

  useEffect(() => {
    getAccountDetails();
    getUserPosts();
    getUserFollowingList();
    getUserFollowersList();
    isUserFollowed();
  }, [accountId])

  const getAccountDetails = async () => {
    try {
      const accountDetails = await window.contract.get_account_details({ address: accountId });
      setAccount(accountDetails);
    } catch (err) {
      navigate('../home')
    }
  }

  const getUserPosts = async () => {
    const userPosts = await window.contract.get_user_posts({ account_id: accountId, perspective: window.accountID });
    setPosts(userPosts.reverse());
  }

  const followUser = async () => {
    await window.contract.follow_user({ address: accountId });
  }

  const getUserFollowingList = async () => {
    const res = await window.contract.get_user_following_list({ user_account_id: accountId });
    setFollowing(res);
  }

  const getUserFollowersList = async () => {
    const res = await window.contract.get_user_followers_list({ user_account_id: accountId });
    setFollowers(res);
  }

  const isUserFollowed = async () => {
    if (window.accountID === accountId) return;
    const res = await window.contract.is_user_followed({
      user_account_id: window.accountID,
      destination_account_id: accountId,
    });
    setIsFollowed(res);
  }

  const handleLikeBtnClick = async (postId) => {
    await window.contract.like_post({ post_id: +postId });
  }

  const handleShowAllPostLikes = (postId) => async () => {
    setModalType('pl');
    const res = await window.contract.get_post_likes_details({ post_id: +postId });
    setModalContent(res);
    onOpen();
  }

  const handleCommentBtnClick = (postId) => async () => {
    setModalType('pc');
    const res = await window.contract.get_post_comment_details({ post_id: +postId });
    setModalContent(res);
    onOpen();
  }

  const handleCommentInputChange = (index) => (e) => {
    let prevCommentInputValue = [...commentInputArr];
    prevCommentInputValue[index] = e.target.value;
    setCommentInputArr(prevCommentInputValue);
  }

  const handleCommentSubmit = (postId, index) => async () => {
    if (!commentInputArr[index]) {
      return;
    }
    await window.contract.comment_on_post({
      post_id: +postId,
      comment: commentInputArr[index]
    });
  }

  const determineModalHeader = () => {
    if (modalType === 'pl') {
      return 'All Likes';
    } else if (modalType === 'pc') {
      return 'All Comments';
    }
  }

  const showModalContent = () => {
    if (modalType === 'pl') {
      return (
        modalContent.map(c => (
          <Box key={c.user_address} display="flex" flexDirection="row" alignItems="center">
            <Avatar
              size="sm"
              src={c.profile_image_url.length !== 0 ? IPFSGateway(c.profile_image_url) : ''}
            />
            <Heading ml={2} size="xs">{c.user_address}</Heading>
          </Box>
        ))
      )
    } else if (modalType === 'pc') {
      return (
        modalContent.map(c => (
          <Box key={c.comment_id} mb={3} backgroundColor="gray.100" borderRadius={6} padding={3}>
            <Box display="flex" flexDirection="row" justifyContent="space-between">
              <Box key={c.user_address} display="flex" flexDirection="row" alignItems="center">
                <Avatar
                  size="sm"
                  src={c.profile_image_url.length !== 0 ? IPFSGateway(c.profile_image_url) : ''}
                />
                <Heading ml={2} size="xs">{c.user_address}</Heading>
              </Box>
              <Text fontSize="xs">{new Date(c.created_at / 1_000_000).toLocaleString()}</Text>
            </Box>
            <Text pt={2}>{c.comment}</Text>
          </Box>
        ))
      )
    }
  }

  const showProfileButton = () => {
    if (accountId === window.accountID) {
      return <Button colorScheme="blue" variant="outline" onClick={() => navigate('../account')}>Edit Profile</Button>
    } else if (typeof(isFollowed) == 'number') {
      return <Button colorScheme="blue" onClick={followUser} variant="outline">Unfollow</Button>
    } else if (isFollowed === null) {
      return <Button colorScheme="blue" onClick={followUser}>Follow</Button>
    }
  }
  return (
    <Box>
      <Modal onClose={onClose} isOpen={isOpen} isCentered>
        <ModalOverlay />
        <ModalContent>
          <ModalHeader>{determineModalHeader()}</ModalHeader>
          <ModalCloseButton />
          <ModalBody>
            {showModalContent()}
          </ModalBody>
          <ModalFooter>
            <Button onClick={onClose}>Close</Button>
          </ModalFooter>
        </ModalContent>
      </Modal>
      <Box display="flex" flexDirection="column">
        <Box display="flex" mt={4} flexDirection="row" justifyContent="space-between" alignItems="center">
          <Avatar src={IPFSGateway(account.profile_image_url)} size="xl" mb={4}/>
          {showProfileButton()}
        </Box>
        <Heading size="md">{account.name}</Heading>
        <Heading size="sm" color="gray.600">{account.address}</Heading>
        <Box mb={6} />
        <Text>{account.description}</Text>
        <Box mb={4} />
        <Box display="flex" flexDirection="row" alignItems="center">
          <IoLocationOutline /> 
          <Text ml={1}>{account.location}</Text>
        </Box>
        <Box display="flex" flexDirection="row" alignItems="center">
          <IoLinkOutline />
          <Text ml={1}>{account.url}</Text>
        </Box>
        <Box display="flex" flexDirection="row" alignItems="center">
          <IoCalendarOutline />
          <Text ml={1}>
            Join Date: {new Date(account.created_at / 1_000_000).toLocaleString('default', { month: 'long', year: 'numeric' })}
          </Text>
        </Box>
        <Box flexDirection="row"  mt={4}>
          <Link mr={3} as={RRLink} to={`/profile/${accountId}/following`} >{following.length} followings</Link>
          <Link as={RRLink} to={`/profile/${accountId}/followers`}  >{followers.length} followers</Link>
        </Box>
      </Box>
      <Tabs isFitted isLazy variant="soft-rounded" colorScheme="blue" mt={4}>
      <TabList>
        <Tab>Posts</Tab>
      </TabList>
      <TabPanels>
        {posts.map((post, index) => (
          <PostContainer
            key={post.post.post_id}
            handleLikeBtnClick={() => handleLikeBtnClick(post.post.post_id)}
            handleShowAllPostLikes={handleShowAllPostLikes(post.post.post_id)}
            handleCommentBtnClick={handleCommentBtnClick(post.post.post_id)}
            postId={post.post.post_id}
            username={post.post.user_address}
            profileImageUrl={post.profile_image_url}
            date={new Date(post.post.created_at / 1_000_000).toLocaleString()}
            content={post.post.content}
            likeCount={post.like_count}
            commentCount={post.comment_count}
            isLiked={post.is_liked}
            value={commentInputArr[index]}
            handleInputChange={handleCommentInputChange(index)}
            handleCommentSubmit={handleCommentSubmit(post.post.post_id, index)}
          />
        ))}
      </TabPanels>
    </Tabs>
    </Box>
  )
}
'''
'''--- src/pages/Register.js ---
import { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useForm } from 'react-hook-form';
import { Box, Button, Center, Container, Heading, Input, VStack } from "@chakra-ui/react";

import { v4 as uuidv4 } from 'uuid';

import { logout, makeStorageClient } from '../utils';

export default function Register() {
  const navigate = useNavigate();
  const { register, handleSubmit } = useForm();
  const [isExist, setIsExist] = useState(false);
  const [file, setFile] = useState('');
  const [isLoading, setIsLoading] = useState(false);

  const onSubmit = async (data) => {
    try {
      setIsLoading(true);
      let profileImageUrl;
      
      if (file.files[0]) {
        profileImageUrl = await handleUpload();
      }

      await window.contract.create_account({
        name: data.name,
        location: data.location,
        description: data.description,
        profile_image_url: file.files[0] ? profileImageUrl : null
      });
    } catch (err) {
      console.log(err);
    } finally {
      setIsLoading(false);
    }
  }

  useEffect(() => {
    if (window.walletConnection.isSignedIn()) {
      isUserExist();
    }
  }, []);

  useEffect(() => {
    if (isExist) {
      navigate('../home');
    }
  }, [isExist]);

  const isUserExist = async () => {
    const isUserExist = await window.contract.is_user_exists({address: window.accountID});
    setIsExist(isUserExist);
  }

  const handleUpload = async () => {
    const client = makeStorageClient();

    // Changing the file name
    Object.defineProperty(file.files[0], 'name', {
      writable: true,
      value: uuidv4()
    });

    const cid = await client.put(file.files);
    return `${cid}/${file.files[0].name}`;
  }

  return (
    <Box>
      <Container>
        <VStack spacing="6px">
          <Center>
            <Heading pt={12} pb={8}>Register</Heading>
          </Center>
          <form onSubmit={handleSubmit(onSubmit)}>
            <Input placeholder='Name (optional)' {...register("name")} />
            <Input placeholder='Location (optional)' {...register("location")} />
            <Input placeholder='Bio (optional)' {...register("description")} />
            <label htmlFor="file">Pick image for profile picture</label> <hr />
            <input type="file" id="input" name="file" ref={(ref) => setFile(ref)} />
            <Box mt={3} mb={2}/>
            <Button isLoading={isLoading} mr={3} type="submit" colorScheme="blue">Register</Button>
            <Button onClick={logout} colorScheme="blue" variant="outline">Cancel</Button>
          </form>
        </VStack>
      </Container>
    </Box>
  )
}
'''
'''--- src/reportWebVitals.js ---
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

'''
'''--- src/serviceWorker.js ---
// This optional code is used to register a service worker.
// register() is not called by default.

// This lets the app load faster on subsequent visits in production, and gives
// it offline capabilities. However, it also means that developers (and users)
// will only see deployed updates on subsequent visits to a page, after all the
// existing tabs open on the page have been closed, since previously cached
// resources are updated in the background.

// To learn more about the benefits of this model and instructions on how to
// opt-in, read https://cra.link/PWA

const isLocalhost = Boolean(
  window.location.hostname === 'localhost' ||
    // [::1] is the IPv6 localhost address.
    window.location.hostname === '[::1]' ||
    // 127.0.0.0/8 are considered localhost for IPv4.
    window.location.hostname.match(
      /^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/
    )
);

export function register(config) {
  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {
    // The URL constructor is available in all browsers that support SW.
    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);
    if (publicUrl.origin !== window.location.origin) {
      // Our service worker won't work if PUBLIC_URL is on a different origin
      // from what our page is served on. This might happen if a CDN is used to
      // serve assets; see https://github.com/facebook/create-react-app/issues/2374
      return;
    }

    window.addEventListener('load', () => {
      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;

      if (isLocalhost) {
        // This is running on localhost. Let's check if a service worker still exists or not.
        checkValidServiceWorker(swUrl, config);

        // Add some additional logging to localhost, pointing developers to the
        // service worker/PWA documentation.
        navigator.serviceWorker.ready.then(() => {
          console.log(
            'This web app is being served cache-first by a service ' +
              'worker. To learn more, visit https://cra.link/PWA'
          );
        });
      } else {
        // Is not localhost. Just register service worker
        registerValidSW(swUrl, config);
      }
    });
  }
}

function registerValidSW(swUrl, config) {
  navigator.serviceWorker
    .register(swUrl)
    .then(registration => {
      registration.onupdatefound = () => {
        const installingWorker = registration.installing;
        if (installingWorker == null) {
          return;
        }
        installingWorker.onstatechange = () => {
          if (installingWorker.state === 'installed') {
            if (navigator.serviceWorker.controller) {
              // At this point, the updated precached content has been fetched,
              // but the previous service worker will still serve the older
              // content until all client tabs are closed.
              console.log(
                'New content is available and will be used when all ' +
                  'tabs for this page are closed. See https://cra.link/PWA.'
              );

              // Execute callback
              if (config && config.onUpdate) {
                config.onUpdate(registration);
              }
            } else {
              // At this point, everything has been precached.
              // It is the perfect time to display a
              // "Content is cached for offline use." message.
              console.log('Content is cached for offline use.');

              // Execute callback
              if (config && config.onSuccess) {
                config.onSuccess(registration);
              }
            }
          }
        };
      };
    })
    .catch(error => {
      console.error('Error during service worker registration:', error);
    });
}

function checkValidServiceWorker(swUrl, config) {
  // Check if the service worker can be found. If it can't reload the page.
  fetch(swUrl, {
    headers: { 'Service-Worker': 'script' },
  })
    .then(response => {
      // Ensure service worker exists, and that we really are getting a JS file.
      const contentType = response.headers.get('content-type');
      if (
        response.status === 404 ||
        (contentType != null && contentType.indexOf('javascript') === -1)
      ) {
        // No service worker found. Probably a different app. Reload the page.
        navigator.serviceWorker.ready.then(registration => {
          registration.unregister().then(() => {
            window.location.reload();
          });
        });
      } else {
        // Service worker found. Proceed as normal.
        registerValidSW(swUrl, config);
      }
    })
    .catch(() => {
      console.log(
        'No internet connection found. App is running in offline mode.'
      );
    });
}

export function unregister() {
  if ('serviceWorker' in navigator) {
    navigator.serviceWorker.ready
      .then(registration => {
        registration.unregister();
      })
      .catch(error => {
        console.error(error.message);
      });
  }
}

'''
'''--- src/setupTests.js ---
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

'''
'''--- src/test-utils.js ---
import React from 'react';
import { render } from '@testing-library/react';
import { ChakraProvider, theme } from '@chakra-ui/react';

const AllProviders = ({ children }) => (
  <ChakraProvider theme={theme}>{children}</ChakraProvider>
);

const customRender = (ui, options) =>
  render(ui, { wrapper: AllProviders, ...options });

export { customRender as render };

'''
'''--- src/utils.js ---
import * as nearAPI from 'near-api-js';
import { getConfig } from './config';
import { Web3Storage } from 'web3.storage';

const nearConfig = getConfig('mainnet');

// Initialize connection to NEAR contract and set global variables
export async function initApp() {
  // Initialize connection to network
  const near = await nearAPI.connect(nearConfig);

  // Connect wallet so users can sign transactions
  window.walletConnection = new nearAPI.WalletConnection(near);

  // Getting accountID
  window.accountID = window.walletConnection.getAccountId();

  // Load contract for later user
  window.contract = await new nearAPI.Contract(
    window.walletConnection.account(),
    nearConfig.contractName,
    {
      viewMethods: [
        'is_user_exists',
        'get_account_details',
        'is_user_followed',
        'get_user_following_list',
        'get_user_followers_list',
        'get_all_posts',
        'get_all_posts_personalized',
        'get_single_post',
        'get_user_posts',
        'get_post_likes_details',
        'get_post_comment_details'
      ],
      changeMethods: [
        'create_account',
        'follow_user',
        'create_post',
        'like_post',
        'comment_on_post',
        'edit_account_details',
        'edit_profile_image',
      ]
    }
  );
}

export function login() {
  window.walletConnection.requestSignIn(nearConfig.contractName, "DAO Sosmed");
}

export function logout() {
  window.walletConnection.signOut();
  window.location.href = '/';
}

function getAccessToken() {
  return process.env.REACT_APP_WEB3STORAGE_TOKEN;
}

export function makeStorageClient() {
  return new Web3Storage({ token: getAccessToken() });
}

export function IPFSGateway(cid) {
  return `https://dweb.link/ipfs/${cid}`
}
'''