*GitHub Repository "longvubka98/near_stater"*

'''--- .gitpod.yml ---
tasks:
  - init: yarn
    command: yarn dev
ports:
  - port: 1234
    onOpen: open-browser

'''
'''--- README.md ---
white-list-ido-rs
==================

This [React] app was initialized with [create-near-app]

Quick Start
===========

To run this project locally:

1. Prerequisites: Make sure you've installed [Node.js] ≥ 12
2. Install dependencies: `yarn install`
3. Run the local development server: `yarn dev` (see `package.json` for a
   full list of `scripts` you can run with `yarn`)

Now you'll have a local development environment backed by the NEAR TestNet!

Go ahead and play with the app and the code. As you make code changes, the app will automatically reload.

Exploring The Code
==================

1. The "backend" code lives in the `/contract` folder. See the README there for
   more info.
2. The frontend code lives in the `/src` folder. `/src/index.html` is a great
   place to start exploring. Note that it loads in `/src/index.js`, where you
   can learn how the frontend connects to the NEAR blockchain.
3. Tests: there are different kinds of tests for the frontend and the smart
   contract. See `contract/README` for info about how it's tested. The frontend
   code gets tested with [jest]. You can run both of these at once with `yarn
   run test`.

Deploy
======

Every smart contract in NEAR has its [own associated account][NEAR accounts]. When you run `yarn dev`, your smart contract gets deployed to the live NEAR TestNet with a throwaway account. When you're ready to make it permanent, here's how.

Step 0: Install near-cli (optional)
-------------------------------------

[near-cli] is a command line interface (CLI) for interacting with the NEAR blockchain. It was installed to the local `node_modules` folder when you ran `yarn install`, but for best ergonomics you may want to install it globally:

    yarn install --global near-cli

Or, if you'd rather use the locally-installed version, you can prefix all `near` commands with `npx`

Ensure that it's installed with `near --version` (or `npx near --version`)

Step 1: Create an account for the contract
------------------------------------------

Each account on NEAR can have at most one contract deployed to it. If you've already created an account such as `your-name.testnet`, you can deploy your contract to `white-list-ido-rs.your-name.testnet`. Assuming you've already created an account on [NEAR Wallet], here's how to create `white-list-ido-rs.your-name.testnet`:

1. Authorize NEAR CLI, following the commands it gives you:

      near login

2. Create a subaccount (replace `YOUR-NAME` below with your actual account name):

      near create-account white-list-ido-rs.YOUR-NAME.testnet --masterAccount YOUR-NAME.testnet

Step 2: set contract name in code
---------------------------------

Modify the line in `src/config.js` that sets the account name of the contract. Set it to the account id you used above.

    const CONTRACT_NAME = process.env.CONTRACT_NAME || 'white-list-ido-rs.YOUR-NAME.testnet'

Step 3: deploy!
---------------

One command:

    yarn deploy

As you can see in `package.json`, this does two things:

1. builds & deploys smart contract to NEAR TestNet
2. builds & deploys frontend code to GitHub using [gh-pages]. This will only work if the project already has a repository set up on GitHub. Feel free to modify the `deploy` script in `package.json` to deploy elsewhere.

Troubleshooting
===============

On Windows, if you're seeing an error containing `EPERM` it may be related to spaces in your path. Please see [this issue](https://github.com/zkat/npx/issues/209) for more details.

  [React]: https://reactjs.org/
  [create-near-app]: https://github.com/near/create-near-app
  [Node.js]: https://nodejs.org/en/download/package-manager/
  [jest]: https://jestjs.io/
  [NEAR accounts]: https://docs.near.org/docs/concepts/account
  [NEAR Wallet]: https://wallet.testnet.near.org/
  [near-cli]: https://github.com/near/near-cli
  [gh-pages]: https://github.com/tschaub/gh-pages

'''
'''--- babel.config.js ---
module.exports = {
  presets: ['@babel/preset-env', '@babel/preset-react'],
}

'''
'''--- contract/Cargo.toml ---
[package]
name = "greeter"
version = "0.1.0"
authors = ["Near Inc <hello@near.org>"]
edition = "2018"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
near-sdk = "3.1.0"

[profile.release]
codegen-units = 1
# Tell `rustc` to optimize for small code size.
opt-level = "z"
lto = true
debug = false
panic = "abort"
# Opt into extra safety checks on arithmetic operations https://stackoverflow.com/a/64136471/249801
overflow-checks = true

[workspace]
members = []

'''
'''--- contract/README.md ---
white-list-ido-rs Smart Contract
==================

A [smart contract] written in [Rust] for an app initialized with [create-near-app]

Quick Start
===========

Before you compile this code, you will need to install Rust with [correct target]

Exploring The Code
==================

1. The main smart contract code lives in `src/lib.rs`. You can compile it with
   the `./compile` script.
2. Tests: You can run smart contract tests with the `./test` script. This runs
   standard Rust tests using [cargo] with a `--nocapture` flag so that you
   can see any debug info you print to the console.

  [smart contract]: https://docs.near.org/docs/develop/contracts/overview
  [Rust]: https://www.rust-lang.org/
  [create-near-app]: https://github.com/near/create-near-app
  [correct target]: https://github.com/near/near-sdk-rs#pre-requisites
  [cargo]: https://doc.rust-lang.org/book/ch01-03-hello-cargo.html

'''
'''--- contract/compile.js ---
// This file does two things:
//
// 1. Compile the Rust contract using cargo (see buildCmd below). This will
//    create a wasm file in the 'build' folder.
// 2. Create a symbolic link (symlink) to the generated wasm file in the root
//    project's `out` folder, for easy use with near-cli.
//
// First, import some helper libraries. `shelljs` is included in the
// devDependencies of the root project, which is why it's available here. It
// makes it easy to use *NIX-style scripting (which works on Linux distros,
// macOS, and Unix systems) on Windows as well.
const sh = require('shelljs')

// Figure out which directory the user called this script from, which we'll use
// later to set up the symlink.
const calledFromDir = sh.pwd().toString()

// For the duration of this script, we want to operate from within the
// Rust project's folder. Let's change into that directory.
sh.cd(__dirname)

// You can call this script with `node compile.js` or `node compile.js
// --debug`. Let's set a variable to track whether `--debug` was used.
const debug = process.argv.pop() === '--debug'

// You can call this script with `node compile.js` or `node compile.js --debug`.
// Let's set a variable to track whether `--debug` was used.
// Note: see other flags in ./cargo/config. Unfortunately, you cannot set the
// `--target option` in Cargo.toml.
const buildCmd = debug
  ? 'cargo build --target wasm32-unknown-unknown'
  : 'cargo build --target wasm32-unknown-unknown --release'

// Execute the build command, storing exit code for later use
const { code } = sh.exec(buildCmd)

// Assuming this is compiled from the root project directory, link the compiled
// contract to the `out` folder –
// When running commands like `near deploy`, near-cli looks for a contract at
// <CURRENT_DIRECTORY>/out/main.wasm
if (code === 0 && calledFromDir !== __dirname) {
  const linkDir = `${calledFromDir}/out`
  const link = `${calledFromDir}/out/main.wasm`
  const packageName = require('fs').readFileSync(`${__dirname}/Cargo.toml`).toString().match(/name = "([^"]+)"/)[1]
  const outFile = `./target/wasm32-unknown-unknown/${debug ? 'debug' : 'release'}/${packageName}.wasm`
  sh.mkdir('-p', linkDir)
  sh.rm('-f', link)
  //fixes #831: copy-update instead of linking .- sometimes sh.ln does not work on Windows
  sh.cp('-u',outFile,link)
}

// exit script with the same code as the build command
process.exit(code)

'''
'''--- contract/src/lib.rs ---
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::collections::UnorderedSet;
use near_sdk::{env, near_bindgen, AccountId};
use std::vec::Vec;

#[global_allocator]
static ALLOC: near_sdk::wee_alloc::WeeAlloc = near_sdk::wee_alloc::WeeAlloc::INIT;

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]

pub struct WhitelistIdoContract {
    /// The owner account ID. It allows to registration whitelist.
    /// It also allows to registration_whitelist to be whitelisted, which can join the ido sale.
    pub owner_account_id: AccountId,

    /// The whitelisted account IDs, which can join the ido sale.
    pub whitelist: UnorderedSet<AccountId>,

    /// The list of registration whitelist. Any account from this list can be whitelisted
    pub registration_whitelist: UnorderedSet<AccountId>,
}

impl Default for WhitelistIdoContract {
    fn default() -> Self {
        env::panic(b"The contract should be initialized before usage")
    }
}

#[near_bindgen]
impl WhitelistIdoContract {
    /// Initializes the contract with the given owner account ID.
    #[init]
    pub fn init(owner_account_id: AccountId) -> Self {
        assert!(!env::state_exists(), "Already initialized");
        assert!(
            env::is_valid_account_id(owner_account_id.as_bytes()),
            "The owner account ID is invalid"
        );
        Self {
            owner_account_id,
            whitelist: UnorderedSet::new(b"w".to_vec()),
            registration_whitelist: UnorderedSet::new(b"r".to_vec()),
        }
    }

    // Tranfer owner account ID to new owner account ID.
    // This method can only be called by the owner.
    pub fn tranfer_owner(&mut self, new_owner_account_id: AccountId) -> bool {
        self.assert_called_by_owner();
        assert!(
            env::is_valid_account_id(new_owner_account_id.as_bytes()),
            "The new owner account ID is invalid"
        );
        self.owner_account_id = new_owner_account_id;
        true
    }

    pub fn is_owner(&self, account_id: AccountId) -> bool {
        self.owner_account_id == account_id
    }

    // Return list account ID of registration whitelist
    pub fn get_list_registration_whitelist(&self) -> Vec<AccountId> {
        let mut list_registration_whitelists = Vec::new();
        for i in self.registration_whitelist.iter().enumerate() {
            list_registration_whitelists.push(i.1);
        }
        list_registration_whitelists
    }

    // Return list account ID of whitelisted
    pub fn get_list_whitelisted(&self) -> Vec<AccountId> {
        let mut list_whitelisted = Vec::new();
        for i in self.whitelist.iter().enumerate() {
            list_whitelisted.push(i.1);
        }
        list_whitelisted
    }

    /// Returns `true` if the given account ID is registration_whitelisted.
    pub fn is_registration_whitelisted(&self, registration_account_id: AccountId) -> bool {
        assert!(
            env::is_valid_account_id(registration_account_id.as_bytes()),
            "The given account ID is invalid"
        );
        self.registration_whitelist
            .contains(&registration_account_id)
    }

    /// Returns `true` if the given account ID is whitelisted.
    pub fn is_whitelisted(&self, account_id: AccountId) -> bool {
        assert!(
            env::is_valid_account_id(account_id.as_bytes()),
            "The given account ID is invalid"
        );
        self.whitelist.contains(&account_id)
    }

    /// Adds the given account ID to the registration whitelist.
    /// Returns list of registration_whitelist successfully added.
    /// This method can only be called by the owner.
    pub fn add_registration_whitelist(&mut self, account_ids: Vec<AccountId>) -> Vec<AccountId> {
        self.assert_called_by_owner();

        let mut add_registration_whitelist_account_ids = Vec::new();
        for account_id in account_ids {
            if env::is_valid_account_id(account_id.as_bytes())
                && !self.registration_whitelist.contains(&account_id)
            {
                self.registration_whitelist.insert(&account_id);
                add_registration_whitelist_account_ids.push(account_id);
            }
        }
        add_registration_whitelist_account_ids
    }

    /// Removes the given account ID from the registration whitelist.
    /// Returns list of registration_whitelist successfully removed.
    /// This method can only be called by the owner.
    pub fn remove_registration_whitelist(&mut self, account_ids: Vec<AccountId>) -> Vec<AccountId> {
        self.assert_called_by_owner();

        let mut remove_registration_whitelist_account_ids = Vec::new();
        for account_id in account_ids {
            if env::is_valid_account_id(account_id.as_bytes())
                && self.registration_whitelist.contains(&account_id)
            {
                self.registration_whitelist.remove(&account_id);
                remove_registration_whitelist_account_ids.push(account_id);
            }
        }
        remove_registration_whitelist_account_ids
    }

    /// Adds the given account ID to the whitelist.
    /// Returns list of whitelist successfully added.
    /// This method can only be called by the owner.
    pub fn add_whitelist(&mut self, account_ids: Vec<AccountId>) -> Vec<AccountId> {
        self.assert_called_by_owner();
        let mut add_whitelist_account_ids = Vec::new();
        for account_id in account_ids {
            if env::is_valid_account_id(account_id.as_bytes())
                && self.registration_whitelist.contains(&account_id)
                && !self.whitelist.contains(&account_id)
            {
                self.whitelist.insert(&account_id);
                add_whitelist_account_ids.push(account_id);
            }
        }
        add_whitelist_account_ids
    }

    /// Removes the given account ID from the whitelist.
    /// Returns list of whitelist successfully removed.
    /// This method can only be called by the owner.
    pub fn remove_whitelist(&mut self, account_ids: Vec<AccountId>) -> Vec<AccountId> {
        self.assert_called_by_owner();
        let mut remove_whitelist_account_ids = Vec::new();
        for account_id in account_ids {
            if env::is_valid_account_id(account_id.as_bytes())
                && self.whitelist.contains(&account_id)
            {
                self.whitelist.remove(&account_id);
                remove_whitelist_account_ids.push(account_id);
            }
        }
        remove_whitelist_account_ids
    }

    /// Internal method to verify the predecessor was the owner account ID.
    fn assert_called_by_owner(&self) {
        assert_eq!(
            &env::predecessor_account_id(),
            &self.owner_account_id,
            "Can only be called by owner"
        );
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use near_sdk::MockedBlockchain;
    use near_sdk::{testing_env, VMContext};

    // mock the context for testing, notice "signer_account_id" that was accessed above from env::
    fn get_context(input: Vec<u8>, is_view: bool) -> VMContext {
        VMContext {
            current_account_id: "dragonvu.testnet".to_string(),
            signer_account_id: "dragonvu.testnet".to_string(),
            signer_account_pk: vec![0, 1, 2],
            predecessor_account_id: "dragonvu.testnet".to_string(),
            input,
            block_index: 0,
            block_timestamp: 0,
            account_balance: 0,
            account_locked_balance: 0,
            storage_usage: 0,
            attached_deposit: 0,
            prepaid_gas: 10u64.pow(18),
            random_seed: vec![0, 1, 2],
            is_view,
            output_data_receivers: vec![],
            epoch_height: 19,
        }
    }

    #[test]
    // Test owner after init contract
    fn is_owner() {
        let context = get_context(vec![], false);
        testing_env!(context);
        let contract = WhitelistIdoContract::init("dragonvu.testnet".to_string());
        assert_eq!(true, contract.is_owner("dragonvu.testnet".to_string()));
    }

    #[test]
    // Test fake owner after init contract
    fn is_owner_fake() {
        let context = get_context(vec![], false);
        testing_env!(context);
        let contract = WhitelistIdoContract::init("dragonvu.testnet".to_string());
        assert_eq!(false, contract.is_owner("vuongnt.testnet".to_string()));
    }

    #[test]
    // Tranfer owner
    fn tranfer_owner() {
        let context = get_context(vec![], false);
        testing_env!(context);
        let mut contract = WhitelistIdoContract::init("dragonvu.testnet".to_string());
        assert_eq!(true, contract.tranfer_owner("vuongnt.testnet".to_string()));
    }

    #[test]
    // Tranfer and check old owner
    fn tranfer_and_check_old_owner() {
        let context = get_context(vec![], false);
        testing_env!(context);
        let mut contract = WhitelistIdoContract::init("dragonvu.testnet".to_string());
        contract.tranfer_owner("vuongnt.testnet".to_string());
        assert_eq!(false, contract.is_owner("dragonvu.testnet".to_string()));
    }

    #[test]
    // Tranfer and check old owner
    fn tranfer_and_check_new_owner() {
        let context = get_context(vec![], false);
        testing_env!(context);
        let mut contract = WhitelistIdoContract::init("dragonvu.testnet".to_string());
        contract.tranfer_owner("vuongnt.testnet".to_string());
        assert_eq!(true, contract.is_owner("vuongnt.testnet".to_string()));
    }

    #[test]
    // Check initial registration_whitelisted
    fn check_initial_registration_whitelisted() {
        let context = get_context(vec![], false);
        testing_env!(context);
        let contract = WhitelistIdoContract::init("dragonvu.testnet".to_string());
        assert_eq!(
            false,
            contract.is_registration_whitelisted("vuongnt.testnet".to_string())
        );
    }

    #[test]
    // Add registration_whitelisted and check
    fn add_and_check_registration_whitelisted() {
        let context = get_context(vec![], false);
        testing_env!(context);
        let mut contract = WhitelistIdoContract::init("dragonvu.testnet".to_string());
        contract.add_registration_whitelist(["vuongnt.testnet".to_string()].to_vec());
        assert_eq!(
            true,
            contract.is_registration_whitelisted("vuongnt.testnet".to_string())
        );
    }

    #[test]
    // Add remove and check registration_whitelisted
    fn add_remove_and_check_registration_whitelisted() {
        let context = get_context(vec![], false);
        testing_env!(context);
        let mut contract = WhitelistIdoContract::init("dragonvu.testnet".to_string());
        contract.add_registration_whitelist(["vuongnt.testnet".to_string()].to_vec());
        contract.remove_registration_whitelist(["vuongnt.testnet".to_string()].to_vec());
        assert_eq!(
            false,
            contract.is_registration_whitelisted("vuongnt.testnet".to_string())
        );
    }

    #[test]
    // Check initial whitelisted
    fn check_initial_whitelisted() {
        let context = get_context(vec![], false);
        testing_env!(context);
        let contract = WhitelistIdoContract::init("dragonvu.testnet".to_string());
        assert_eq!(
            false,
            contract.is_whitelisted("vuongnt.testnet".to_string())
        );
    }

    #[test]
    // Add whitelisted and check
    fn add_and_check_whitelisted() {
        let context = get_context(vec![], false);
        testing_env!(context);
        let mut contract = WhitelistIdoContract::init("dragonvu.testnet".to_string());
        contract.add_whitelist(["vuongnt.testnet".to_string()].to_vec());
        assert_eq!(true, contract.is_whitelisted("vuongnt.testnet".to_string()));
    }

    #[test]
    // Add remove and check whitelisted
    fn add_remove_and_check_whitelisted() {
        let context = get_context(vec![], false);
        testing_env!(context);
        let mut contract = WhitelistIdoContract::init("dragonvu.testnet".to_string());
        contract.add_whitelist(["vuongnt.testnet".to_string()].to_vec());
        contract.remove_whitelist(["vuongnt.testnet".to_string()].to_vec());
        assert_eq!(
            false,
            contract.is_whitelisted("vuongnt.testnet".to_string())
        );
    }
}

'''
'''--- package.json ---
{
  "name": "white-list-ido-rs",
  "version": "0.1.0",
  "license": "UNLICENSED",
  "scripts": {
    "build": "npm run build:contract && npm run build:web",
    "build:contract": "node contract/compile.js",
    "build:contract:debug": "node contract/compile.js --debug",
    "build:web": "parcel build src/index.html --public-url ./",
    "dev:deploy:contract": "near dev-deploy",
    "deploy:contract": "near deploy",
    "deploy:pages": "gh-pages -d dist/",
    "deploy": "npm run build && npm run deploy:contract && npm run deploy:pages",
    "prestart": "npm run build:contract:debug && npm run dev:deploy:contract",
    "start": "echo The app is starting! It will automatically open in your browser when ready && env-cmd -f ./neardev/dev-account.env parcel src/index.html --open",
    "dev": "nodemon --watch contract/src -e rs --exec \"npm run start\"",
    "init:contract":"near call dragonvu.testnet init '{\"owner_account_id\": \"dragonvu.testnet\"}' --accountId dragonvu.testnet",
    "test": "npm run build:contract:debug && cd contract && cargo test -- --nocapture && cd .. && jest test --runInBand"
  },
  "devDependencies": {
    "@babel/core": "~7.14.0",
    "@babel/preset-env": "~7.14.0",
    "@babel/preset-react": "~7.13.13",
    "babel-jest": "~26.6.2",
    "env-cmd": "~10.1.0",
    "gh-pages": "~3.1.0",
    "jest": "~26.6.2",
    "jest-environment-node": "~26.6.2",
    "near-cli": "~2.1.1",
    "nodemon": "~2.0.3",
    "parcel-bundler": "~1.12.4",
    "react-test-renderer": "~17.0.1",
    "sass": "^1.49.9",
    "shelljs": "~0.8.4"
  },
  "dependencies": {
    "big.js": "^6.1.1",
    "near-api-js": "~0.43.1",
    "prop-types": "^15.8.1",
    "react": "~17.0.1",
    "react-dom": "~17.0.1",
    "regenerator-runtime": "~0.13.5"
  },
  "resolutions": {
    "@babel/preset-env": "7.13.8"
  },
  "jest": {
    "moduleNameMapper": {
      "\\.(jpg|ico|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$": "<rootDir>/src/__mocks__/fileMock.js",
      "\\.(css|less)$": "<rootDir>/src/__mocks__/fileMock.js"
    },
    "setupFiles": [
      "<rootDir>/src/jest.init.js"
    ],
    "testEnvironment": "near-cli/test_environment",
    "testPathIgnorePatterns": [
      "<rootDir>/contract/",
      "<rootDir>/node_modules/"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

'''
'''--- src/App.js ---
import 'regenerator-runtime/runtime';
import React, { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import SignIn from './components/SignIn';
import WhiteList from './components/WhiteList';
import Owner from './components/Owner';

const App = ({ contract, currentUser, nearConfig, wallet }) => {
  const [isOwner, setIsOwner] = useState(false);

  useEffect(() => {
    if (currentUser?.accountId)
      contract.is_owner({ account_id: currentUser.accountId }).then(setIsOwner);
  }, [currentUser?.accountId]);

  const signIn = () => {
    wallet.requestSignIn(
      { contractId: nearConfig.contractName }, //contract requesting access
      'White list ido', //optional name
      null, //optional URL to redirect to if the sign in was successful
      null //optional URL to redirect to if the sign in was NOT successful
    );
  };

  const signOut = () => {
    wallet.signOut();
    window.location.replace(window.location.origin + window.location.pathname);
  };

  return (
    <main>
      <header>
        <h1>NEAR Starter</h1>
        {currentUser
          ? <button onClick={signOut}>Log out</button>
          : <button onClick={signIn}>Log in</button>
        }
      </header>
      {currentUser
        ? isOwner ? <Owner currentUser={currentUser} contract={contract} />
          : <WhiteList currentUser={currentUser} contract={contract} />
        : <SignIn />
      }
    </main>
  );
};

App.propTypes = {
  contract: PropTypes.shape({
    get_list_registration_whitelist: PropTypes.func.isRequired,
    get_list_whitelisted: PropTypes.func.isRequired,
    is_registration_whitelisted: PropTypes.func.isRequired,
    is_whitelisted: PropTypes.func.isRequired,
    is_owner: PropTypes.func.isRequired,
    add_registration_whitelist: PropTypes.func.isRequired,
    remove_registration_whitelist: PropTypes.func.isRequired,
    add_whitelist: PropTypes.func.isRequired,
    remove_whitelist: PropTypes.func.isRequired,
  }).isRequired,
  currentUser: PropTypes.shape({
    accountId: PropTypes.string.isRequired,
    balance: PropTypes.string.isRequired
  }),
  nearConfig: PropTypes.shape({
    contractName: PropTypes.string.isRequired
  }).isRequired,
  wallet: PropTypes.shape({
    requestSignIn: PropTypes.func.isRequired,
    signOut: PropTypes.func.isRequired
  }).isRequired
};

export default App;

'''
'''--- src/__mocks__/fileMock.js ---
// NOTE: This is used to mock resource imports in JSX for tests
module.exports = '' 

'''
'''--- src/assets/logo-black.svg ---
<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#24272a"/><stop offset=".42" stop-color="#24272a" stop-opacity="0"/><stop offset=".59" stop-color="#24272a" stop-opacity="0"/><stop offset=".81" stop-color="#24272a"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#24272a"/></svg>
'''
'''--- src/assets/logo-white.svg ---
<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#fff"/><stop offset=".42" stop-color="#fff" stop-opacity="0"/><stop offset=".59" stop-color="#fff" stop-opacity="0"/><stop offset=".81" stop-color="#fff"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#fff"/></svg>
'''
'''--- src/config.js ---
const CONTRACT_NAME = process.env.CONTRACT_NAME ||'white-list-ido-rs'

function getConfig(env) {
  switch (env) {

  case 'production':
  case 'mainnet':
    return {
      networkId: 'mainnet',
      nodeUrl: 'https://rpc.mainnet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.near.org',
      helperUrl: 'https://helper.mainnet.near.org',
      explorerUrl: 'https://explorer.mainnet.near.org',
    }
  case 'development':
  case 'testnet':
    return {
      networkId: 'testnet',
      nodeUrl: 'https://rpc.testnet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.testnet.near.org',
      helperUrl: 'https://helper.testnet.near.org',
      explorerUrl: 'https://explorer.testnet.near.org',
    }
  case 'betanet':
    return {
      networkId: 'betanet',
      nodeUrl: 'https://rpc.betanet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.betanet.near.org',
      helperUrl: 'https://helper.betanet.near.org',
      explorerUrl: 'https://explorer.betanet.near.org',
    }
  case 'local':
    return {
      networkId: 'local',
      nodeUrl: 'http://localhost:3030',
      keyPath: `${process.env.HOME}/.near/validator_key.json`,
      walletUrl: 'http://localhost:4000/wallet',
      contractName: CONTRACT_NAME,
    }
  case 'test':
  case 'ci':
    return {
      networkId: 'shared-test',
      nodeUrl: 'https://rpc.ci-testnet.near.org',
      contractName: CONTRACT_NAME,
      masterAccount: 'test.near',
    }
  case 'ci-betanet':
    return {
      networkId: 'shared-test-staging',
      nodeUrl: 'https://rpc.ci-betanet.near.org',
      contractName: CONTRACT_NAME,
      masterAccount: 'test.near',
    }
  default:
    throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`)
  }
}

module.exports = getConfig

'''
'''--- src/global.css ---
* {
  box-sizing: border-box;
}

html {
  --bg: #efefef;
  --fg: #1e1e1e;
  --gray: #555;
  --light-gray: #ccc;
  --shadow: #e6e6e6;
  --success: rgb(90, 206, 132);
  --primary: #FF585D;
  --secondary: #0072CE;

  background-color: var(--bg);
  color: var(--fg);
  font-family: -apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica,Arial,sans-serif;
  font-size: calc(0.9em + 0.5vw);
  line-height: 1.3;
}

body {
  margin: 0;
  padding: 1em;
}

main {
  margin: 0 auto;
  max-width: 25em;
}

h1 {
  background-image: url(assets/logo-black.svg);
  background-position: center 1em;
  background-repeat: no-repeat;
  background-size: auto 1.5em;
  margin-top: 0;
  padding: 3.5em 0 0.5em;
  text-align: center;
}

a,
.link {
  color: var(--primary);
  text-decoration: none;
}
a:hover,
a:focus,
.link:hover,
.link:focus {
  text-decoration: underline;
}
a:active,
.link:active {
  color: var(--secondary);
}

button, input {
  font: inherit;
  outline: none;
}

button {
  background-color: var(--secondary);
  border-radius: 5px;
  border: none;
  color: #efefef;
  cursor: pointer;
  padding: 0.3em 0.75em;
  transition: transform 30ms;
}
button:hover, button:focus {
  box-shadow: 0 0 10em rgba(255, 255, 255, 0.2) inset;
}
button:active {
  box-shadow: 0 0 10em rgba(0, 0, 0, 0.1) inset;
}
button.link {
  background: none;
  border: none;
  box-shadow: none;
  display: inline;
}
[disabled] button, button[disabled] {
  box-shadow: none;
  background-color: var(--light-gray);
  color: gray;
  cursor: not-allowed;
  transform: none;
}
[disabled] button {
  text-indent: -900em;
  width: 2em;
  position: relative;
}
[disabled] button:after {
  content: " ";
  display: block;
  width: 0.8em;
  height: 0.8em;
  border-radius: 50%;
  border: 2px solid #fff;
  border-color: var(--fg) transparent var(--fg) transparent;
  animation: loader 1.2s linear infinite;
  position: absolute;
  top: 0.45em;
  right: 0.5em;
}
@keyframes loader {
  0% { transform: rotate(0deg) }
  100% { transform: rotate(360deg) }
}

fieldset {
  border: none;
  padding: 2em 0;
}

input {
  background-color: var(--shadow);
  border: none;
  border-radius: 5px 0 0 5px;
  caret-color: var(--primary);
  color: inherit;
  padding: 0.25em 1em;
}
input::selection {
  background-color: var(--secondary);
  color: #efefef;
}
input:focus {
  box-shadow: 0 0 10em rgba(0, 0, 0, 0.02) inset;
}

code {
  color: var(--gray);
}

li {
  padding-bottom: 1em;
}

aside {
  animation: notify ease-in-out 10s;
  background-color: var(--shadow);
  border-radius: 5px;
  bottom: 0;
  font-size: 0.8em;
  margin: 1em;
  padding: 1em;
  position: fixed;
  transform: translateY(10em);
  right: 0;
}
aside footer {
  display: flex;
  font-size: 0.9em;
  justify-content: space-between;
  margin-top: 0.5em;
}
aside footer *:first-child {
  color: var(--success);
}
aside footer *:last-child {
  color: var(--gray);
}
@keyframes notify {
  0% { transform: translateY(10em) }
  5% { transform: translateY(0) }
  95% { transform: translateY(0) }
  100% { transform: translateY(10em) }
}

@media (prefers-color-scheme: dark) {
  html {
    --bg: #1e1e1e;
    --fg: #efefef;
    --gray: #aaa;
    --shadow: #2a2a2a;
    --light-gray: #444;
  }
  h1 {
    background-image: url(assets/logo-white.svg);
  }
  input:focus {
    box-shadow: 0 0 10em rgba(255, 255, 255, 0.02) inset;
  }
}

'''
'''--- src/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="./favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <link rel="apple-touch-icon" href="./favicon.ico" />
    <link rel="stylesheet" href="global.scss">
    <title>NEAR Guest Book</title>
    <meta property="og:title" content="NEAR Guest Book">
    <meta property="og:description" content="A guest book with comments stored on the NEAR blockchain">
    <!-- <meta property="og:image" content=""> -->
    <!-- <meta property="og:url" content=""> -->
    <!-- <meta name="twitter:card" content="summary_large_image"> -->
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `yarn dev`.
      To create a production bundle, use `yarn build`.
    -->
    <script src="./index.js"></script>
  </body>
</html>

'''
'''--- src/index.js ---
import React from 'react'
import ReactDOM from 'react-dom'
import App from './App'
import { initContract } from './utils'

window.nearInitPromise = initContract()
  .then(({ contract, currentUser, nearConfig, walletConnection }) => {
    ReactDOM.render(
      <App
        contract={contract}
        currentUser={currentUser}
        nearConfig={nearConfig}
        wallet={walletConnection}
      />,
      document.querySelector('#root')
    )
  })
  .catch(console.error)

'''
'''--- src/jest.init.js ---
import 'regenerator-runtime/runtime'

'''
'''--- src/main.test.js ---
beforeAll(async function () {
  // NOTE: nearlib and nearConfig are made available by near-cli/test_environment
  const near = await nearlib.connect(nearConfig)
  window.accountId = nearConfig.contractName
  window.contract = await near.loadContract(nearConfig.contractName, {
    viewMethods: ['is_owner', 'get_list_registration_whitelist', 'get_list_whitelisted', 'is_registration_whitelisted', 'is_whitelisted'],
    changeMethods: ['tranfer_owner', 'add_registration_whitelist', 'remove_registration_whitelist', 'add_whitelist', 'remove_whitelist'],
    sender: window.accountId
  })

  window.walletConnection = {
    requestSignIn() {
    },
    signOut() {
    },
    isSignedIn() {
      return true
    },
    getAccountId() {
      return window.accountId
    }
  }
})

test('test_owner', async () => {
  // const message = await window.contract.is_owner({ account_id: window.accountId })
  // expect(message).toEqual(true)
})

'''
'''--- src/utils.js ---
import * as nearAPI from 'near-api-js';
import getConfig from './config'

const nearConfig = getConfig(process.env.NODE_ENV || 'development')

// Initialize contract & set global variables
export async function initContract() {
  // get network configuration values from config.js
  // based on the network ID we pass to getConfig()
  const nearConfig = getConfig(process.env.NEAR_ENV || 'testnet');

  // create a keyStore for signing transactions using the user's key
  // which is located in the browser local storage after user logs in
  const keyStore = new nearAPI.keyStores.BrowserLocalStorageKeyStore();

  // Initializing connection to the NEAR testnet
  const near = await nearAPI.connect({ keyStore, ...nearConfig });

  // Initialize wallet connection
  const walletConnection = new nearAPI.WalletConnection(near);

  // Load in user's account data
  let currentUser;
  if (walletConnection.getAccountId()) {
    currentUser = {
      // Gets the accountId as a string
      accountId: walletConnection.getAccountId(),
      // Gets the user's token balance
      balance: (await walletConnection.account().state()).amount,
    };
  }

  // Initializing our contract APIs by contract name and configuration
  const contract = await new nearAPI.Contract(
    // User's accountId as a string
    walletConnection.account(),
    // accountId of the contract we will be loading
    // NOTE: All contracts on NEAR are deployed to an account and
    // accounts can only have one contract deployed to them.
    nearConfig.contractName,
    {
      // View methods are read-only – they don't modify the state, but usually return some value
      viewMethods: ['is_owner', 'get_list_registration_whitelist', 'get_list_whitelisted', 'is_registration_whitelisted', 'is_whitelisted'],
      // Change methods can modify the state, but you don't receive the returned value when called
      changeMethods: ['new', 'tranfer_owner', 'add_registration_whitelist', 'remove_registration_whitelist', 'add_whitelist', 'remove_whitelist'],
      // Sender is the account ID to initialize transactions.
      // getAccountId() will return empty string if user is still unauthorized
      sender: walletConnection.getAccountId(),
    }
  );

  return { contract, currentUser, nearConfig, walletConnection };
}

export function logout() {
  window.walletConnection.signOut()
  // reload page
  window.location.replace(window.location.origin + window.location.pathname)
}

export function login() {
  // Allow the current app to make calls to the specified contract on the
  // user's behalf.
  // This works by creating a new access key for the user's account and storing
  // the private key in localStorage.
  window.walletConnection.requestSignIn(nearConfig.contractName)
}

'''
'''--- src/wallet/login/index.html ---
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/css/bootstrap.min.css" integrity="sha384-GJzZqFGwb1QTTN6wy59ffF1BuGJpLSa9DkKMp0DgiMDm4iYMj70gZWKYbI706tWS" crossorigin="anonymous">
</head>
<body style="background: #fff; margin-top: 3em">
  <div>For local account login, Please run the following command in NEAR CLI, then enter account id here.
  </div>
  <div>
      <code id="shell-command"></code>
  </div>
  <input type="text" id="accountId" name="accountId" placeholder="Account id"></input>
  <button type="button" onClick="done()">done</button>
  <script>
    const currentUrl = new URL(window.location.href);
    const message = `NODE_ENV=local near create_account {newAccountId} --masterAccount {masterAccountId} --publicKey ${currentUrl.searchParams.get('public_key')} --initialAmount 10000000000000000000`;
    document.getElementById('shell-command').innerText = message;

    function done() {
      const successUrl = new URL(currentUrl.searchParams.get('success_url'));
      successUrl.searchParams.set('account_id', document.getElementById('accountId').value);
      successUrl.searchParams.set('public_key', currentUrl.searchParams.get('public_key'));
      window.location.assign(successUrl.toString());
    }
  </script>
</body>
</html>
'''