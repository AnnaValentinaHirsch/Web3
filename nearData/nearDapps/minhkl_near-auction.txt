*GitHub Repository "minhkl/near-auction"*

'''--- .gitpod.yml ---
tasks:
  - init: yarn
    command: yarn dev
ports:
  - port: 1234
    onOpen: open-browser

'''
'''--- README.md ---
near-auction
==================

This [React] app was initialized with [create-near-app]

Quick Start
===========

To run this project locally:

1. Prerequisites: Make sure you've installed [Node.js] ≥ 12
2. Install dependencies: `yarn install`
3. Run the local development server: `yarn dev` (see `package.json` for a
   full list of `scripts` you can run with `yarn`)

Now you'll have a local development environment backed by the NEAR TestNet!

Go ahead and play with the app and the code. As you make code changes, the app will automatically reload.

Exploring The Code
==================

1. The "backend" code lives in the `/contract` folder. See the README there for
   more info.
2. The frontend code lives in the `/src` folder. `/src/index.html` is a great
   place to start exploring. Note that it loads in `/src/index.js`, where you
   can learn how the frontend connects to the NEAR blockchain.
3. Tests: there are different kinds of tests for the frontend and the smart
   contract. See `contract/README` for info about how it's tested. The frontend
   code gets tested with [jest]. You can run both of these at once with `yarn
   run test`.

Deploy
======

Every smart contract in NEAR has its [own associated account][NEAR accounts]. When you run `yarn dev`, your smart contract gets deployed to the live NEAR TestNet with a throwaway account. When you're ready to make it permanent, here's how.

Step 0: Install near-cli (optional)
-------------------------------------

[near-cli] is a command line interface (CLI) for interacting with the NEAR blockchain. It was installed to the local `node_modules` folder when you ran `yarn install`, but for best ergonomics you may want to install it globally:

    yarn install --global near-cli

Or, if you'd rather use the locally-installed version, you can prefix all `near` commands with `npx`

Ensure that it's installed with `near --version` (or `npx near --version`)

Step 1: Create an account for the contract
------------------------------------------

Each account on NEAR can have at most one contract deployed to it. If you've already created an account such as `your-name.testnet`, you can deploy your contract to `near-auction.your-name.testnet`. Assuming you've already created an account on [NEAR Wallet], here's how to create `near-auction.your-name.testnet`:

1. Authorize NEAR CLI, following the commands it gives you:

      near login

2. Create a subaccount (replace `YOUR-NAME` below with your actual account name):

      near create-account near-auction.YOUR-NAME.testnet --masterAccount YOUR-NAME.testnet

Step 2: set contract name in code
---------------------------------

Modify the line in `src/config.js` that sets the account name of the contract. Set it to the account id you used above.

    const CONTRACT_NAME = process.env.CONTRACT_NAME || 'near-auction.YOUR-NAME.testnet'

Step 3: deploy!
---------------

One command:

    yarn deploy

As you can see in `package.json`, this does two things:

1. builds & deploys smart contract to NEAR TestNet
2. builds & deploys frontend code to GitHub using [gh-pages]. This will only work if the project already has a repository set up on GitHub. Feel free to modify the `deploy` script in `package.json` to deploy elsewhere.

Troubleshooting
===============

On Windows, if you're seeing an error containing `EPERM` it may be related to spaces in your path. Please see [this issue](https://github.com/zkat/npx/issues/209) for more details.

  [React]: https://reactjs.org/
  [create-near-app]: https://github.com/near/create-near-app
  [Node.js]: https://nodejs.org/en/download/package-manager/
  [jest]: https://jestjs.io/
  [NEAR accounts]: https://docs.near.org/docs/concepts/account
  [NEAR Wallet]: https://wallet.testnet.near.org/
  [near-cli]: https://github.com/near/near-cli
  [gh-pages]: https://github.com/tschaub/gh-pages

'''
'''--- babel.config.js ---
module.exports = {
  presets: ['@babel/preset-env', '@babel/preset-react'],
}

'''
'''--- contract/README.md ---
near-auction Smart Contract
==================

A [smart contract] written in [AssemblyScript] for an app initialized with [create-near-app]

Quick Start
===========

Before you compile this code, you will need to install [Node.js] ≥ 12

Exploring The Code
==================

1. The main smart contract code lives in `assembly/index.ts`. You can compile
   it with the `./compile` script.
2. Tests: You can run smart contract tests with the `./test` script. This runs
   standard AssemblyScript tests using [as-pect].

  [smart contract]: https://docs.near.org/docs/develop/contracts/overview
  [AssemblyScript]: https://www.assemblyscript.org/
  [create-near-app]: https://github.com/near/create-near-app
  [Node.js]: https://nodejs.org/en/download/package-manager/
  [as-pect]: https://www.npmjs.com/package/@as-pect/cli

'''
'''--- contract/as-pect.config.js ---
module.exports = require('near-sdk-as/imports')
'''
'''--- contract/asconfig.json ---
{
  "extends": "near-sdk-as/asconfig.json"
}

'''
'''--- contract/assembly/__tests__/as-pect.d.ts ---
/// <reference types="@as-pect/assembly/types/as-pect" />
'''
'''--- contract/assembly/__tests__/main.spec.ts ---
import { setGreeting } from '..'
import { storage, Context } from 'near-sdk-as'

describe('Greeting ', () => {
  it('should be set and read', () => {
    setGreeting('hello world')
    storage.get<string>(Context.sender)
  })
})

'''
'''--- contract/assembly/as_types.d.ts ---
/// <reference types="near-sdk-as/assembly/as_types" />
'''
'''--- contract/assembly/index.ts ---
import { Amount } from "./utils";
import { Auction, auctions } from "./models";

export function createAuction(item: string, minPrice: Amount): void {
  const id = auctions.length;
  const auction = new Auction(id, item, minPrice);
  auctions.push(auction);
}

export function getAuctionList(): Array<Auction> {
  const length = auctions.length;
  const result = new Array<Auction>(length);
  for (let i = 0; i < length; i++) {
    result[i] = auctions[length - i - 1];
  }
  return result;
}

export function getAuction(id: i32): Auction {
  assert(auctions.containsIndex(id), "Auction is not found");
  return auctions[id];
}

export function bid(id: i32): void {
  const auction = getAuction(id);
  auction.bid();
  auctions.replace(id, auction);
}

'''
'''--- contract/assembly/models.ts ---
import {
  PersistentVector,
  PersistentMap,
  Context,
  logging,
  ContractPromiseBatch,
  ContractPromise,
} from "near-sdk-as";
import { AccountId, Amount, asNear } from "./utils";

// 1 day, in nanoseconds
const EXPIRE_IN: u64 = 1 * 24 * 60 * 60 * 1000 * 1000 * 1000;

@nearBindgen
export class Auction {
  private id: i32;
  private item: string;
  private minPrice: Amount;
  private highestPrice: Amount;
  private highestPriceAccount: AccountId;
  private createdAt: u64;
  private expireAt: u64;

  constructor(id: i32, item: string, minPrice: Amount) {
    this.id = id;
    this.item = item;
    this.minPrice = minPrice;
    this.highestPrice = minPrice;
    this.highestPriceAccount = "";
    this.createdAt = Context.blockTimestamp;
    this.expireAt = Context.blockTimestamp + EXPIRE_IN;
  }

  bid(): void {
    assert(this.checkIsEnded() == false, "The auction has ended");
    assert(
      Context.attachedDeposit > this.highestPrice,
      "The price must be higher than " + asNear(this.highestPrice)
    );
    assert(
      Context.sender != this.highestPriceAccount,
      "Your are the leader already"
    );

    if (this.highestPriceAccount.length > 0) {
      const lastAccount = this.highestPriceAccount;
      const toReturn = this.highestPrice;
      const promise = ContractPromiseBatch.create(lastAccount);
      promise.transfer(toReturn);
    }

    this.highestPrice = Context.attachedDeposit;
    this.highestPriceAccount = Context.sender;
  }

  checkIsEnded(): boolean {
    return Context.blockTimestamp > this.expireAt;
  }
}

export const auctions = new PersistentVector<Auction>("a");

'''
'''--- contract/assembly/tsconfig.json ---
{
  "compilerOptions": {
    "experimentalDecorators": true
  },
  "extends": "assemblyscript/std/assembly.json",
  "include": ["./**/*.ts"]
}

'''
'''--- contract/assembly/utils.ts ---
import { u128 } from "near-sdk-as";

export type AccountId = string;

export type Amount = u128;

export const ONE_NEAR = u128.from("1000000000000000000000000");

export const asNear = (amount: Amount): string =>
  u128.div(amount, ONE_NEAR).toString();

'''
'''--- contract/compile.js ---
// This file does two things:
//
// 1. Compile the AssemblyScript contract using the scripts in package.json
//    (see buildCmd below). This will create a wasm file in the 'build' folder.
// 2. Create a symbolic link (symlink) to the generated wasm file in the root
//    project's `out` folder, for easy use with near-cli.
//
// First, import some helper libraries. `shelljs` is included in the
// devDependencies of the root project, which is why it's available here. It
// makes it easy to use *NIX-style scripting (which works on Linux distros,
// macOS, and Unix systems) on Windows as well.
const sh = require('shelljs')

// Figure out which directory the user called this script from, which we'll use
// later to set up the symlink.
const calledFromDir = sh.pwd().toString()

// For the duration of this script, we want to operate from within the
// AssemblyScript project's folder. Let's change into that directory.
sh.cd(__dirname)

// You can call this script with `node compile.js` or `node compile.js --debug`.
// Let's set a variable to track whether `--debug` was used.
const debug = process.argv.pop() === '--debug'

// Use the correct build command based on the `--debug` flag
const buildCmd = debug
  ? 'npm run build:debug'
  : 'npm run build'

// Execute the build command, storing exit code for later use
const { code } = sh.exec(buildCmd)

// Assuming this is compiled from the root project directory, link the compiled
// contract to the `out` folder –
// When running commands like `near deploy`, near-cli looks for a contract at
// <CURRENT_DIRECTORY>/out/main.wasm
if (code === 0 && calledFromDir !== __dirname) {
  const linkDir = `${calledFromDir}/out`
  const link = `${calledFromDir}/out/main.wasm`
  const packageName = require(`${__dirname}/package.json`).name
  const outFile = `./build/${debug ? 'debug' : 'release'}/${packageName}.wasm`
  sh.mkdir('-p', linkDir)
  sh.rm('-f', link)
  //fixes #831: copy-update instead of linking .- sometimes sh.ln does not work on Windows
  sh.cp('-u',outFile,link)
}

// exit script with the same code as the build command
process.exit(code)

'''
'''--- contract/package.json ---
{
  "name": "greeter",
  "version": "0.0.1",
  "license": "UNLICENSED",
  "private": true,
  "scripts": {
    "build": "asb",
    "build:debug": "asb --target debug",
    "test": "asp --nologo"
  },
  "dependencies": {
    "near-sdk-as": "3.1.0"
  },
  "devDependencies": {
    "shelljs": "^0.8.4"
  }
}

'''
'''--- package.json ---
{
  "name": "near-auction",
  "version": "0.1.0",
  "license": "UNLICENSED",
  "homepage": "http://minhkl.github.io/near-auction",
  "scripts": {
    "build": "npm run build:contract && npm run build:web",
    "build:contract": "node contract/compile.js",
    "build:contract:debug": "node contract/compile.js --debug",
    "build:web": "parcel build src/index.html --public-url ./",
    "dev:deploy:contract": "near dev-deploy",
    "deploy:contract": "near deploy",
    "deploy:pages": "gh-pages -d dist/",
    "deploy": "npm run build && npm run deploy:contract && npm run deploy:pages",
    "prestart": "npm run build:contract:debug && npm run dev:deploy:contract",
    "start": "echo The app is starting! It will automatically open in your browser when ready && env-cmd -f ./neardev/dev-account.env parcel src/index.html --open",
    "dev": "nodemon --watch contract -e ts --exec \"npm run start\"",
    "test": "npm run build:contract:debug && cd contract && npm run test && cd .. && jest test --runInBand"
  },
  "devDependencies": {
    "@babel/core": "~7.14.0",
    "@babel/preset-env": "~7.14.0",
    "@babel/preset-react": "~7.13.13",
    "babel-jest": "~26.6.2",
    "env-cmd": "~10.1.0",
    "gh-pages": "~3.1.0",
    "jest": "~26.6.2",
    "jest-environment-node": "~26.6.2",
    "near-cli": "~2.1.1",
    "near-sdk-as": "^3.2.3",
    "nodemon": "~2.0.3",
    "parcel-bundler": "~1.12.4",
    "react-test-renderer": "~17.0.1",
    "shelljs": "~0.8.4"
  },
  "dependencies": {
    "@emotion/react": "^11.9.0",
    "@emotion/styled": "^11.8.1",
    "@mui/material": "^5.8.3",
    "big.js": "^6.2.0",
    "near-api-js": "~0.43.1",
    "react": "~17.0.1",
    "react-countdown": "^2.3.2",
    "react-dom": "~17.0.1",
    "react-hook-form": "^7.32.0",
    "react-router-dom": "6",
    "regenerator-runtime": "~0.13.5",
    "swr": "^1.3.0"
  },
  "resolutions": {
    "@babel/preset-env": "7.13.8"
  },
  "jest": {
    "moduleNameMapper": {
      "\\.(jpg|ico|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$": "<rootDir>/src/__mocks__/fileMock.js",
      "\\.(css|less)$": "<rootDir>/src/__mocks__/fileMock.js"
    },
    "setupFiles": [
      "<rootDir>/src/jest.init.js"
    ],
    "testEnvironment": "near-cli/test_environment",
    "testPathIgnorePatterns": [
      "<rootDir>/contract/",
      "<rootDir>/node_modules/"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

'''
'''--- src/App.js ---
import "regenerator-runtime/runtime";
import { Container, Button, AppBar, Toolbar, Typography } from "@mui/material";
import React from "react";
import { login, logout } from "./utils";
import AuctionsPage from "./AuctionsPage";
import AuctionPage from "./AuctionPage";
import { Routes, Route } from "react-router-dom";

import getConfig from "./config";
const { networkId } = getConfig(process.env.NODE_ENV || "development");

export default function App() {
  // if not signed in, return early with sign-in prompt
  if (!window.walletConnection.isSignedIn()) {
    return (
      <main>
        <h1>Welcome to NEAR!</h1>
        <p>
          To make use of the NEAR blockchain, you need to sign in. The button
          below will sign you in using NEAR Wallet.
        </p>
        <p>
          By default, when your app runs in "development" mode, it connects to a
          test network ("testnet") wallet. This works just like the main network
          ("mainnet") wallet, but the NEAR Tokens on testnet aren't convertible
          to other currencies – they're just for testing!
        </p>
        <p>Go ahead and click the button below to try it out:</p>
        <p style={{ textAlign: "center", marginTop: "2.5em" }}>
          <Button variant="contained" color="primary" onClick={login}>
            Sign in
          </Button>
        </p>
      </main>
    );
  }

  return (
    // use React Fragment, <>, to avoid wrapping elements in unnecessary divs
    <div>
      <AppBar position="static">
        <Toolbar sx={{ justifyContent: "space-between" }}>
          <Typography variant="h6">NEAR Auction</Typography>
          <Button onClick={logout} color="secondary" variant="contained">
            Sign out
          </Button>
        </Toolbar>
      </AppBar>
      <Container sx={{ p: 4 }}>
        <Routes>
          <Route path="/" element={<AuctionsPage />} />
          <Route path="auctions" element={<AuctionsPage />}></Route>
          <Route path="auctions/:id" element={<AuctionPage />} />
          <Route
            path="*"
            element={
              <main style={{ padding: "1rem" }}>
                <p>There's nothing here!</p>
              </main>
            }
          />
        </Routes>
      </Container>
    </div>
  );
}

'''
'''--- src/AuctionPage.js ---
import React, { useState } from "react";
import { useParams } from "react-router-dom";
import useSWR, { mutate } from "swr";
import { useForm } from "react-hook-form";
import {
  Alert,
  Button,
  List,
  ListItem,
  ListItemText,
  Stack,
  Typography,
  TextField,
  InputAdornment,
} from "@mui/material";
import { Link } from "react-router-dom";
import ReactCountdown from "react-countdown";
import {
  asNear,
  toYocto,
  BOATLOAD_OF_GAS,
  isAuctionEnded,
  nsToMs,
} from "./utils";

const isValidId = (id) => {
  if (typeof id === "number") {
    return true;
  }
  if (typeof id === "string") {
    return !isNaN(id);
  }
  return false;
};

const AuctionPage = () => {
  const { id: auctionId } = useParams();

  const {
    data: auction,
    error,
    mutate,
  } = useSWR(
    isValidId(auctionId) ? [auctionId, "load-auctions-list"] : null,
    () => window.contract.getAuction({ id: parseInt(auctionId) })
  );

  if (error) {
    console.error("Failed to load auction ", auctionId, error);
  }

  return (
    <div>
      <Button variant="text" component={Link} to="/auctions" sx={{ mb: 2 }}>
        Back
      </Button>
      <Typography variant="h3" component="h1">
        Auction #{auctionId}
      </Typography>

      {!isValidId(auctionId) && <Alert severity="error">Invalid auction</Alert>}
      {error && <Alert severity="error">Failed to load the auction</Alert>}
      {!error && auction && (
        <AuctionDetails auction={auction} onBidSuccess={mutate} />
      )}
    </div>
  );
};

const AuctionDetails = ({ auction, onBidSuccess }) => {
  const [isEnded, setIsEnded] = useState(isAuctionEnded(auction));
  const isLeader =
    auction.highestPriceAccount === window.walletConnection.getAccountId();
  const [error, setError] = useState();
  const {
    handleSubmit,
    register,
    formState: { errors, isSubmitting },
    reset,
  } = useForm();

  const onSubmit = (values) => {
    setError(null);
    const yocto = toYocto(values.price);
    return window.contract
      .bid({ id: auction.id }, BOATLOAD_OF_GAS, yocto)
      .then(() => {
        onBidSuccess();
        reset();
      })
      .catch((err) => {
        console.error(err);
      });
  };

  return (
    <Stack spacing={2}>
      {!isEnded && (
        <Typography>
          Ends in{" "}
          <ReactCountdown
            daysInHours
            date={nsToMs(auction.expireAt)}
            onComplete={() => setIsEnded(true)}
          />
        </Typography>
      )}
      <Typography variant="h5" component="h2" sx={{ mt: 4 }}>
        Item: {auction.item}
      </Typography>

      {auction.highestPriceAccount.length > 0 ? (
        <Typography>
          Highest price: <b>{asNear(auction.highestPrice, true)}</b> -{" "}
          <i>by {auction.highestPriceAccount}</i>
        </Typography>
      ) : (
        <Typography>
          Mininum price: <b>{asNear(auction.highestPrice, true)}</b>
        </Typography>
      )}
      {error && <Alert severity="error">Failed to bid</Alert>}
      {isLeader && !isEnded && (
        <Alert severity="info">Your price is the highest price so far</Alert>
      )}
      {isLeader && isEnded && (
        <Alert severity="info">Congratulation! You are the winner.</Alert>
      )}
      {isEnded && !isLeader && auction.highestPriceAccount.length > 0 && (
        <Alert severity="info">
          <b>{auction.highestPriceAccount}</b> won the auction with{" "}
          {asNear(auction.highestPrice, true)}
        </Alert>
      )}
      {isEnded && auction.highestPriceAccount.length <= 0 && (
        <Alert severity="info">The auction ended</Alert>
      )}
      {!isLeader && !isEnded && (
        <form onSubmit={handleSubmit(onSubmit)}>
          <TextField
            label="Your Price"
            sx={{ mr: 2 }}
            size="small"
            error={!!errors.price}
            helperText={errors.price?.message}
            InputProps={{
              endAdornment: <InputAdornment position="end">Ⓝ</InputAdornment>,
              ...register("price"),
            }}
          />
          <Button
            type="submit"
            variant="contained"
            color="primary"
            disabled={isSubmitting}
          >
            Bid
          </Button>
        </form>
      )}
    </Stack>
  );
};

export default AuctionPage;

'''
'''--- src/AuctionsPage.js ---
import React, { useState } from "react";
import { Link } from "react-router-dom";
import useSWR, { mutate } from "swr";
import {
  Alert,
  Button,
  List,
  ListItem,
  ListItemText,
  Stack,
  Typography,
  Table,
  TableBody,
  TableHead,
  TableCell,
  TableRow,
} from "@mui/material";
import CreateAuctionDialog from "./components/CreateAuctionDialog";
import { asNear, isAuctionEnded } from "./utils";
import ReactCountdown from "react-countdown";

const AuctionsPage = () => {
  const [isOpenDialog, setIsOpenDialog] = useState(false);
  const {
    data: auctions,
    error,
    mutate,
  } = useSWR("load-auctions-list", () => window.contract.getAuctionList());
  const handleCreateAuctionSuccess = () => {
    setIsOpenDialog(false);
    mutate();
  };

  return (
    <>
      <div>
        <Stack
          direction="row"
          justifyContent="space-between"
          alignItems="center"
        >
          <Typography component="h1" variant="h3">
            Auction List
          </Typography>
          <Button
            color="primary"
            variant="contained"
            onClick={() => setIsOpenDialog(true)}
          >
            Create
          </Button>
        </Stack>

        {error && <Alert severity="error">Failed to load auctions</Alert>}
        {!error && auctions && auctions.length <= 0 && (
          <Alert severity="info">There are no auctions so far</Alert>
        )}
        {auctions?.length > 0 && (
          <Table>
            <TableHead>
              <TableRow>
                <TableCell>Item</TableCell>
                <TableCell>Minimum Price</TableCell>
                <TableCell>Highest Price</TableCell>
                <TableCell>Ends In</TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {auctions.map((auction) => (
                <TableRow hover key={auction.id}>
                  <TableCell>
                    <Link to={`/auctions/${auction.id}`}>{auction.item}</Link>
                  </TableCell>
                  <TableCell>{asNear(auction.minPrice, true)}</TableCell>
                  <TableCell>
                    {auction.highestPriceAccount ? (
                      <>
                        <Typography>
                          {asNear(auction.highestPrice, true)}
                        </Typography>
                        <Typography
                          variant="body2"
                          sx={{ fontStyle: "italic" }}
                        >
                          by {auction.highestPriceAccount}
                        </Typography>
                      </>
                    ) : (
                      "--"
                    )}
                  </TableCell>
                  <TableCell>
                    {isAuctionEnded(auction) ? (
                      "Ended"
                    ) : (
                      <ReactCountdown
                        daysInHours
                        date={auction.expireAt / 1000000}
                      />
                    )}
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        )}
      </div>
      <CreateAuctionDialog
        open={isOpenDialog}
        onClose={() => setIsOpenDialog(false)}
        onCreatedAuction={handleCreateAuctionSuccess}
      />
    </>
  );
};

export default AuctionsPage;

'''
'''--- src/__mocks__/fileMock.js ---
// NOTE: This is used to mock resource imports in JSX for tests
module.exports = '' 

'''
'''--- src/assets/logo-black.svg ---
<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#24272a"/><stop offset=".42" stop-color="#24272a" stop-opacity="0"/><stop offset=".59" stop-color="#24272a" stop-opacity="0"/><stop offset=".81" stop-color="#24272a"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#24272a"/></svg>
'''
'''--- src/assets/logo-white.svg ---
<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#fff"/><stop offset=".42" stop-color="#fff" stop-opacity="0"/><stop offset=".59" stop-color="#fff" stop-opacity="0"/><stop offset=".81" stop-color="#fff"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#fff"/></svg>
'''
'''--- src/components/CreateAuctionDialog/index.js ---
import React, { useState } from "react";
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  TextField,
  Alert,
  InputAdornment,
} from "@mui/material";
import { useForm } from "react-hook-form";
import Big from "big.js";

const CreateAuctionDialog = (props) => {
  const [formError, setFormError] = useState();
  const { onCreatedAuction, ...dialogProps } = props;
  const {
    handleSubmit,
    register,
    formState: { errors, isSubmitting },
  } = useForm();
  const onSubmit = (values) => {
    const params = {
      item: values.item,
      minPrice: Big(values.minPrice)
        .times(10 ** 24)
        .toFixed(),
    };

    console.log("values", params);
    setFormError(null);
    return window.contract
      .createAuction(params)
      .then(onCreatedAuction)
      .catch((error) => {
        console.error("Create auction failed: ", error);
        setFormError(error);
      });
  };
  return (
    <Dialog {...dialogProps}>
      <form onSubmit={handleSubmit(onSubmit)}>
        <DialogTitle>New Auction</DialogTitle>
        <DialogContent>
          {formError && (
            <Alert severity="error">Failed to create new auction</Alert>
          )}
          <TextField
            label="Name"
            sx={{ mt: 2 }}
            fullWidth
            size="small"
            error={!!errors.item}
            helperText={errors.item?.message}
            InputProps={{ ...register("item") }}
          />
          <TextField
            label="Min Price"
            sx={{ mt: 2 }}
            fullWidth
            size="small"
            error={!!errors.minPrice}
            helperText={errors.minPrice?.message}
            InputProps={{
              endAdornment: <InputAdornment position="end">Ⓝ</InputAdornment>,
              ...register("minPrice"),
            }}
          />
        </DialogContent>
        <DialogActions sx={{ px: 3, pb: 2 }}>
          <Button
            variant="outlined"
            type="button"
            onClick={() => dialogProps.onClose()}
          >
            Cancel
          </Button>
          <Button
            variant="contained"
            color="primary"
            type="submit"
            disabled={isSubmitting}
          >
            {isSubmitting ? "Creating..." : "Create"}
          </Button>
        </DialogActions>
      </form>
    </Dialog>
  );
};

export default CreateAuctionDialog;

'''
'''--- src/config.js ---
const CONTRACT_NAME =
  process.env.CONTRACT_NAME || "near-auction.lkminh.testnet";

function getConfig(env) {
  switch (env) {
    case "production":
    case "mainnet":
      return {
        networkId: "mainnet",
        nodeUrl: "https://rpc.mainnet.near.org",
        contractName: CONTRACT_NAME,
        walletUrl: "https://wallet.near.org",
        helperUrl: "https://helper.mainnet.near.org",
        explorerUrl: "https://explorer.mainnet.near.org",
      };
    case "development":
    case "testnet":
      return {
        networkId: "testnet",
        nodeUrl: "https://rpc.testnet.near.org",
        contractName: CONTRACT_NAME,
        walletUrl: "https://wallet.testnet.near.org",
        helperUrl: "https://helper.testnet.near.org",
        explorerUrl: "https://explorer.testnet.near.org",
      };
    case "betanet":
      return {
        networkId: "betanet",
        nodeUrl: "https://rpc.betanet.near.org",
        contractName: CONTRACT_NAME,
        walletUrl: "https://wallet.betanet.near.org",
        helperUrl: "https://helper.betanet.near.org",
        explorerUrl: "https://explorer.betanet.near.org",
      };
    case "local":
      return {
        networkId: "local",
        nodeUrl: "http://localhost:3030",
        keyPath: `${process.env.HOME}/.near/validator_key.json`,
        walletUrl: "http://localhost:4000/wallet",
        contractName: CONTRACT_NAME,
      };
    case "test":
    case "ci":
      return {
        networkId: "shared-test",
        nodeUrl: "https://rpc.ci-testnet.near.org",
        contractName: CONTRACT_NAME,
        masterAccount: "test.near",
      };
    case "ci-betanet":
      return {
        networkId: "shared-test-staging",
        nodeUrl: "https://rpc.ci-betanet.near.org",
        contractName: CONTRACT_NAME,
        masterAccount: "test.near",
      };
    default:
      throw Error(
        `Unconfigured environment '${env}'. Can be configured in src/config.js.`
      );
  }
}

module.exports = getConfig;

'''
'''--- src/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="./assets/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="apple-touch-icon" href="./assets/favicon.ico" />
    <title>NEAR Auction</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
    <script src="./index.js"></script>
  </body>
</html>

'''
'''--- src/index.js ---
import React from "react";
import ReactDOM from "react-dom";
import App from "./App";
import { initContract } from "./utils";
import { BrowserRouter } from "react-router-dom";
import { ThemeProvider, CssBaseline } from "@mui/material";

window.nearInitPromise = initContract()
  .then(() => {
    ReactDOM.render(
      <BrowserRouter>
        <CssBaseline />
        <App />
      </BrowserRouter>,
      document.querySelector("#root")
    );
  })
  .catch(console.error);

'''
'''--- src/jest.init.js ---
import 'regenerator-runtime/runtime'

'''
'''--- src/main.test.js ---
beforeAll(async function () {
  // NOTE: nearlib and nearConfig are made available by near-cli/test_environment
  const near = await nearlib.connect(nearConfig)
  window.accountId = nearConfig.contractName
  window.contract = await near.loadContract(nearConfig.contractName, {
    viewMethods: ['getGreeting'],
    changeMethods: [],
    sender: window.accountId
  })

  window.walletConnection = {
    requestSignIn() {
    },
    signOut() {
    },
    isSignedIn() {
      return true
    },
    getAccountId() {
      return window.accountId
    }
  }
})

test('getGreeting', async () => {
  const message = await window.contract.getGreeting({ accountId: window.accountId })
  expect(message).toEqual('Hello')
})

'''
'''--- src/utils.js ---
import Big from "big.js";
import { connect, Contract, keyStores, WalletConnection } from "near-api-js";
import getConfig from "./config";

const nearConfig = getConfig(process.env.NODE_ENV || "development");

// Initialize contract & set global variables
export async function initContract() {
  // Initialize connection to the NEAR testnet
  const near = await connect(
    Object.assign(
      { deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() } },
      nearConfig
    )
  );

  // Initializing Wallet based Account. It can work with NEAR testnet wallet that
  // is hosted at https://wallet.testnet.near.org
  window.walletConnection = new WalletConnection(near);

  // Getting the Account ID. If still unauthorized, it's just empty string
  window.accountId = window.walletConnection.getAccountId();

  // Initializing our contract APIs by contract name and configuration
  window.contract = await new Contract(
    window.walletConnection.account(),
    nearConfig.contractName,
    {
      // View methods are read only. They don't modify the state, but usually return some value.
      viewMethods: ["getAuctionList", "getAuction"],
      // Change methods can modify the state. But you don't receive the returned value when called.
      changeMethods: ["createAuction", "bid"],
    }
  );
}

export function logout() {
  window.walletConnection.signOut();
  // reload page
  window.location.replace(window.location.origin + window.location.pathname);
}

export function login() {
  // Allow the current app to make calls to the specified contract on the
  // user's behalf.
  // This works by creating a new access key for the user's account and storing
  // the private key in localStorage.
  window.walletConnection.requestSignIn(nearConfig.contractName);
}

export function asNear(yocto, withSymbol) {
  const converted = Big(yocto)
    .div(10 ** 24)
    .toNumber();

  if (withSymbol) {
    return `${converted} Ⓝ`;
  }
  return converted;
}

export function toYocto(near) {
  return Big(near)
    .times(10 ** 24)
    .toFixed();
}

export const BOATLOAD_OF_GAS = Big(3)
  .times(10 ** 14)
  .toFixed();

// Milliseconds to nanoseconds
export const msToNs = (ms) => ms * 1000000;

// Nanoseconds to illiseconds
export const nsToMs = (ns) => ns / 1000000;

export const isAuctionEnded = (auction) =>
  msToNs(Date.now()) > auction.expireAt;

'''
'''--- src/wallet/login/index.html ---
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/css/bootstrap.min.css" integrity="sha384-GJzZqFGwb1QTTN6wy59ffF1BuGJpLSa9DkKMp0DgiMDm4iYMj70gZWKYbI706tWS" crossorigin="anonymous">
</head>
<body style="background: #fff; margin-top: 3em">
  <div>For local account login, Please run the following command in NEAR CLI, then enter account id here.
  </div>
  <div>
      <code id="shell-command"></code>
  </div>
  <input type="text" id="accountId" name="accountId" placeholder="Account id"></input>
  <button type="button" onClick="done()">done</button>
  <script>
    const currentUrl = new URL(window.location.href);
    const message = `NODE_ENV=local near create_account {newAccountId} --masterAccount {masterAccountId} --publicKey ${currentUrl.searchParams.get('public_key')} --initialAmount 10000000000000000000`;
    document.getElementById('shell-command').innerText = message;

    function done() {
      const successUrl = new URL(currentUrl.searchParams.get('success_url'));
      successUrl.searchParams.set('account_id', document.getElementById('accountId').value);
      successUrl.searchParams.set('public_key', currentUrl.searchParams.get('public_key'));
      window.location.assign(successUrl.toString());
    }
  </script>
</body>
</html>
'''