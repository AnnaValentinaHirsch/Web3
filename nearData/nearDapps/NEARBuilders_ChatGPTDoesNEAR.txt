*GitHub Repository "NEARBuilders/ChatGPTDoesNEAR"*

'''--- GetNFTTokenHolders.js ---
const near = require('near-api-js');
const nearConfig = require('./nearConfig'); // Your NEAR configuration file
const contractId = 'bluntdao.snft.near'; // The contract ID for the NFT contract
const tokenId = 1; // The ID of the NFT for which you want to fetch token holders

async function getAllTokenHolders() {
  const nearInstance = await near.connect({
    deps: { keyStore: new near.KeyStore.KeyStore(nearConfig.keyPath) },
    ...nearConfig
  });

  const contract = await nearInstance.contract(contractId);

  // First, get the owner of the NFT with the given ID
  const owner = await contract.get_token_owner({ token_id: tokenId });

  // Next, get all tokens in the contract
  const tokens = await contract.nft_tokens({ from_index: 0, limit: 1000 });

  // Loop through the tokens and get their owners
  const tokenHolders = new Set([owner]);
  for (let i = 0; i < tokens.length; i++) {
    const token = tokens[i];
    const holder = await contract.get_token_owner({ token_id: token.token_id });
    tokenHolders.add(holder);
  }

  return Array.from(tokenHolders);
}

getAllTokenHolders().then((holders) => {
  console.log('Token holders:', holders);
}).catch(console.error);

'''
'''--- README.md ---
# ChatGPTContracts
ChatGPT Does NEAR

'''
'''--- RainbowBridgeNEARtoAurora.js ---
const fetch = require('node-fetch');

// Define the NEAR account and amount to bridge
const nearAccount = 'your_near_account';
const amount = '1000000000000000000'; // 1 NEAR

// Define the Aurora address to receive the bridged NEAR
const auroraAddress = 'your_aurora_address';

// Define the Rainbow Bridge API endpoint
const bridgeEndpoint = 'https://bridge-api.mainnet.near.org';

// Define the bridge method and parameters
const method = 'eth.near_bridge';
const params = {
  'near_sender': nearAccount,
  'near_amount': amount,
  'ethereum_receiver': auroraAddress
};

// Make the API request to the Rainbow Bridge endpoint
fetch(bridgeEndpoint, {
  method: 'POST',
  body: JSON.stringify({
    jsonrpc: '2.0',
    id: 0,
    method,
    params
  }),
  headers: {
    'Content-Type': 'application/json'
  }
})
.then(response => response.json())
.then(data => console.log(data.result))
.catch(error => console.error(error));

'''