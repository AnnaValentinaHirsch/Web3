*GitHub Repository "metaseed-project/metaseed-unity-toolkit"*

'''--- README.md ---
<p style="text-align: center;">
  
  # Metaseed-unity-toolkit
  
  Helps develop games on Unity3d &amp; NEAR blockchain in two clicks

  The plugin is zipped in a “.unitypackage” file in folder “releases/”, and if you need the sources of the package file, they can be found in “source/”.
  There are 2 demo scenes - one with code, and the second one with components.
  
  **Change your project's .NET version to 4.x if you have any errors after importing the plugin**
  (Edit -> Project Settings -> Player -> Api Compatibility Level)
  
  ### If you find any bugs or need some help feel free to contact us
  [<img src="https://img.shields.io/badge/Telegram-2CA5E0?style=for-the-badge&logo=telegram&logoColor=white" />](https://t.me/metaseed_near)
  
  ### Also, subscribe to receive our newest announcements and updates
  [<img src="https://img.shields.io/badge/Twitter-1DA1F2?style=for-the-badge&logo=twitter&logoColor=white" />](https://twitter.com/metaseed_near)
  
  # Tutorials
  
  [Tutorial Part 1 (Demo scenes overview) [RU]](https://www.youtube.com/watch?v=36YzP561ST8)
  
  [Tutorial Part 2 Deploying NFT contract [RU]](https://www.youtube.com/watch?v=Yo0zT2I28Sg)

  ## Example

  We have two types of connections or actors in ower Toolkit.
  They are “Player” and “Developer”.

  As you know, a standard NEAR NFT specification requires initializing the contract by the owner, who will have a monopolistic ability to mint tokens. The cost of     every token mintage is around 0.1 NEAR due to the storage [cost](https://docs.near.org/docs/tutorials/contracts/nfts/minting-nfts#).

  In our Toolkit, you can set up the process in the following way.

  For example, you want to give your player an NFT after successfully ending each level. To make it possible, you need to have an NFT contract with your Developer     account being an owner of this contract so that an unlimited amount of NFTs could be mint.

  After that, a player has to log in to his account on NEAR, the account where NFTs will be transferred.

  Then at the end of each level, you could transfer 0.1 Near (the cost of creating your NFT) from the player's account to the Developer account. And mint an NFT       with transferring it to the player using your Developer account.

  If you want to bear the cost of NFT creation you could just skip the steps and even don’t force your user to log in.

  The developer account is connected in the setting and used throughout the entire game. The credentials are saved safely inside the build.
   
  ## Components overview
  
  
  
  > Note that all toolkits components can be called via Unity scripting like regular components.
  
  
  
  Firstly you need to connect your NEAR wallet
  When the .unitypackage file is installed in your project, “Near” tab will appear at the top menu.
  Click on “Developer Account” and then on “Connect Wallet” 

  ![Alt text](/screenshots/7.jpg)

  ![Alt text](/screenshots/1.jpg)

  After login, you will receive a message - “Successfully, now please return to the editor you are connected!”

  Open Unity to see that your account is connected.

  Now, after connecting, you can create your first NFT via a Simple NFT publisher. Fill in the fields: Title, Description, TokenId, Link to the media. The receiver   id is a NEAR   wallet address.

  ![Alt text](/screenshots/2.jpeg)

  Then, in Contract Caller, you can do any logic for interaction between the game and NFT contract so that your game rewards players with NFT’s for certain in-game   actions, for example killing the boss.

  ![Alt text](/screenshots/3.jpeg)

  It could be both minting a new NFT or sending a pre-minted NFT to a player. 
  You also could send NEAR from the player account.
  In order to send the NEAR you just need to specify the receiver’s address and an amount to send.

  ![Alt text](/screenshots/5.jpeg)
</p>

'''
'''--- source/Assets/MetaseedUnityToolkit/Comonents/ContractCaller.cs ---
using System;
using System.Dynamic;
using System.Collections;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Linq;
using UnityEngine;
using UnityEngine.UI;
using Newtonsoft.Json;
using NearClient.Utilities;

namespace MetaseedUnityToolkit
{
    public class ContractCaller : MonoBehaviour
    {
        [SerializeField]
        public List<ContractArgument> arguments = new List<ContractArgument>();

        [HideInInspector]
        public string contractAddress = "testcounter.metaseed.testnet";

        public string contractMethod = "incrementCounter";

        public string gas = "10.0";
        public string deposit = "0";
        public EConnectionActor actor;

        //--- Editor Settings

        public ulong nearGas;
        public UInt128 yoctoNearDeposit;
        public bool showExtraSettings = false;
        public int selectedRole = 0;
        public int selectedAction = 0;

        public async Task<dynamic> CallContract(string _contractAddress, string _contractMethod, ExpandoObject _arguments, EConnectionActor _actor, ulong? _gas = null, Nullable<UInt128> _deposit = null)
        {
            if (!IsCallDataValid(_contractAddress, _contractMethod))
            {
                Debug.LogError("Warning: Call metadata is not valid, request will not be send.");
                return new ExpandoObject();
            }

            if (!ConnectionsManager.IsConnected(_actor))
            {
                Debug.LogError("Warning: Your near account is not connected.");
                return new ExpandoObject();
            }

            Connection connection = ConnectionsManager.GetConnectionInstance(_actor);
            return await connection.CallMethod(_contractAddress, _contractMethod, _arguments, _gas, _deposit);
        }

        public bool IsCallDataValid(string _contractAddress, string _contractMethod)
        {
            if (_contractAddress == "") return false;
            if (_contractMethod == "") return false;

            return true;
        }

        public bool IsComponentDataValid()
        {
            double _gas;
            if (!Double.TryParse(gas, out _gas)) return false;

            double _deposit;
            if (!Double.TryParse(deposit, out _deposit)) return false;

            foreach (ContractArgument p in arguments)
            {
                if (p.name == "") return false;
                if (p.value == "") return false;
                if (!allowedTypes.Contains(p.type)) return false;
            }
            return true;
        }

        public async Task<dynamic> CallContract()
        {
            if (!IsComponentDataValid())
            {
                throw new Exception("Warning: Component data is not valid. Change values or use CallContract(string _contractAddress, string _contractMethod, List<ContractArgument> _arguments, EConnectionActor _actor, ulong? _gas = null, Nullable<UInt128> _deposit = null) instead");
            }

            ulong nearGas = (ulong)UnitConverter.GetGasFormat(Convert.ToDouble(gas));
            UInt128 yoctoNearDeposit = (UInt128)UnitConverter.GetYoctoNearFormat(Convert.ToDouble(deposit));
            return await CallContract(contractAddress, contractMethod, ConstructArguments(arguments), actor, nearGas, yoctoNearDeposit);
        }

        public async Task<dynamic> ViewContract(string _contractAddress, string _contractMethod, ExpandoObject _arguments, EConnectionActor _actor)
        {
            if (!IsViewDataValid(_contractAddress, _contractMethod))
            {
                throw new Exception("Warning: Call metadata is not valid, request will not be send.");
            }

            if (!ConnectionsManager.IsConnected(_actor))
            {
                throw new Exception("Warning: Your near account is not connected.");
            }

            Connection connection = ConnectionsManager.GetConnectionInstance(_actor);
            return await connection.ViewMethod(_contractAddress, _contractMethod, _arguments);
        }

        public bool IsViewDataValid(string _contractAddress, string _contractMethod)
        {
            if (_contractAddress == "") return false;
            if (_contractMethod == "") return false;

            return true;
        }

        public async Task<dynamic> ViewContract()
        {
            return await ViewContract(contractAddress, contractMethod, ConstructArguments(arguments), actor);
        }

        public dynamic ConstructArguments(List<ContractArgument> _arguments)
        {
            dynamic args = new ExpandoObject();

            foreach (ContractArgument a in _arguments)
            {
                if (a.type == "i32") ((IDictionary<String, object>)args)[a.name] = Int32.Parse(a.value);
                else if (a.type == "i64") ((IDictionary<String, object>)args)[a.name] = Int64.Parse(a.value);
                else if (a.type == "ui32") ((IDictionary<String, object>)args)[a.name] = UInt32.Parse(a.value);
                else if (a.type == "ui64") ((IDictionary<String, object>)args)[a.name] = UInt64.Parse(a.value);
                else if (a.type == "ui128") ((IDictionary<String, object>)args)[a.name] = UInt128.Parse(a.value);
                else if (a.type == "string") ((IDictionary<String, object>)args)[a.name] = a.value.ToString();
                else ((IDictionary<String, object>)args)[a.name] = a.value.ToString();
            }
            return args;
        }

        string[] allowedTypes = { "i32", "i64", "ui32", "ui64", "ui128", "string" };
    }

    [System.Serializable]
    public class ContractArgument
    {
        public string name = "";
        public string value;

        public string type = "i32";
    }
}
'''
'''--- source/Assets/MetaseedUnityToolkit/Comonents/NearSender.cs ---
using System;
using System.Dynamic;
using System.Collections;
using System.Collections.Generic;
using System.Threading.Tasks;
using UnityEngine;
using UnityEngine.UI;
using Newtonsoft.Json;
using NearClient.Utilities;

namespace MetaseedUnityToolkit
{
    public class NearSender : MonoBehaviour
    {
        [HideInInspector]
        public string receiverId = "metaseed.testnet";

        public string deposit = "0";

        public EConnectionActor actor;

        public int selectedRole = 0;

        public bool IsCallDataValid(String _receiverId, Nullable<UInt128> _deposit)
        {
            if (_receiverId == "") return false;
            if (_deposit <= 0) return false;

            return true;
        }

        public async Task<dynamic> SendNear(String _receiverId, UInt128 _deposit, EConnectionActor _actor)
        {
            if (!IsCallDataValid(_receiverId, _deposit))
            {
                throw new Exception("Warning: Transaction metadata is not valid, request will not be send.");
            }

            if (!ConnectionsManager.IsConnected(_actor))
            {
                throw new Exception("Warning: Your near account is not connected.");
            }

            Connection connection = ConnectionsManager.GetConnectionInstance(_actor);
            return await connection.SendMoney(_receiverId, _deposit);
        }

        public bool IsComponentDataValid()
        {
            double _deposit;
            if (!Double.TryParse(deposit, out _deposit)) return false;
            return true;
        }

        public async Task<dynamic> SendNear()
        {
            if (!IsComponentDataValid())
            {
                throw new Exception("Warning: Component data is not valid. Change values or use SendNear(String _receiverId, UInt128 _deposit, EConnectionActor _actor) instead");
            }

            UInt128 yoctoNearDeposit = (UInt128)UnitConverter.GetYoctoNearFormat(Convert.ToDouble(deposit));
            return await SendNear(receiverId, yoctoNearDeposit, actor);
        }
    }
}
'''
'''--- source/Assets/MetaseedUnityToolkit/Comonents/PlayerConnector.cs ---
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System.Threading.Tasks;

namespace MetaseedUnityToolkit
{
    public class PlayerConnector : MonoBehaviour
    {
        public async Task ConnectWalletByBrowserAsync()
        {
            await WalletConnector.Connect("testnet", EConnectionActor.Player);
        }

        public void ConnectWalletByBrowser()
        {
            WalletConnector.Connect("testnet", EConnectionActor.Player);
        }

        public void DisconnectWallet()
        {
            ConnectionsManager.Disconnect(EConnectionActor.Player);
        }

        public bool IsPlayerConnected()
        {
            return ConnectionsManager.IsConnected(EConnectionActor.Player);
        }

        public string GetPlayerAccountId()
        {
            if (!IsPlayerConnected()) throw new System.Exception("Player is not connected");
            return PluginStorage.PlayerNearAccountId;
        }
    }
}
'''
'''--- source/Assets/MetaseedUnityToolkit/Comonents/SimpleNFTPublisher.cs ---
using System;
using System.Dynamic;
using System.Collections;
using System.Collections.Generic;
using System.Threading.Tasks;
using UnityEngine;
using UnityEngine.UI;
using Newtonsoft.Json;
using NearClient.Utilities;

namespace MetaseedUnityToolkit
{
    public class SimpleNFTPublisher : MonoBehaviour
    {
        [HideInInspector]
        public string contractAddress = "example-nft.testnet";

        public string title;
        public string description;
        public string media;
        public string tokenId = "0";
        public string receiverId;

        public string gas = "10.0";
        public string deposit = "0.1";

        public EConnectionActor actor;

        //--- Editor Settings

        public ulong nearGas;
        public UInt128 yoctoNearDeposit;
        public bool showExtraSettings = false;
        public int selectedRole = 0;
        public int selectedAction = 0;

        public async Task<dynamic> MintNft(string _contractAddress, string _tokenId, string _title, string _description, string _media, string _receiverId, EConnectionActor _actor, ulong? _gas = null, Nullable<UInt128> _deposit = null)
        {
            if (!IsNFTDataValid(_title, _media, _receiverId))
            {
                throw new Exception("Warning: Nft metadata is not valid, request will not be send.");
            }

            if (!ConnectionsManager.IsConnected(EConnectionActor.Player))
            {
                throw new Exception("Warning: Your near account is not connected.");
            }

            Connection connection = ConnectionsManager.GetConnectionInstance(_actor);

            dynamic args = new ExpandoObject();

            args.token_id = _tokenId;
            args.title = _title;
            args.receiver_id = _receiverId;

            args.token_metadata = new ExpandoObject();
            args.token_metadata.title = _title;
            args.token_metadata.description = _description;
            args.token_metadata.media = _media;
            args.token_metadata.copies = 1;

            _gas = _gas ?? UnitConverter.GetGasFormat(15.0);
            _deposit = _deposit ?? UnitConverter.GetYoctoNearFormat(0.1);

            return await connection.CallMethod(_contractAddress, "nft_mint", args, _gas, _deposit);
        }

        public bool IsNFTDataValid(string _title, string _media, string _receiverId)
        {
            if (_title == "") return false;
            if (_media == "") return false;
            if (_receiverId == "") return false;

            return true;
        }

        public bool IsComponentDataValid()
        {
            double _gas;
            if (!Double.TryParse(gas, out _gas)) return false;

            double _deposit;
            if (!Double.TryParse(deposit, out _deposit)) return false;

            return true;
        }

        public async Task<dynamic> MintNft()
        {
            if (!IsComponentDataValid())
            {
                throw new Exception("Warning: Component data is not valid. Change values or use CallContract(string _contractAddress, string _contractMethod, List<ContractArgument> _arguments, EConnectionActor _actor, ulong? _gas = null, Nullable<UInt128> _deposit = null) instead");
            }

            ulong nearGas = (ulong)UnitConverter.GetGasFormat(Convert.ToDouble(gas));
            UInt128 yoctoNearDeposit = (UInt128)UnitConverter.GetYoctoNearFormat(Convert.ToDouble(deposit));
            return await MintNft(contractAddress, tokenId, title, description, media, receiverId, actor, nearGas, yoctoNearDeposit);
        }
    }
}
'''
'''--- source/Assets/MetaseedUnityToolkit/Demo/DemoControllerScript.cs ---
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System.Dynamic;
using UnityEngine.UI;
using Newtonsoft.Json;
using NearClient.Utilities;
using MetaseedUnityToolkit;

public class DemoControllerScript : MonoBehaviour
{
    private string accountId;
    private EConnectionActor actor = EConnectionActor.Player;

    public PlayerConnector playerConnector;
    public SimpleNFTPublisher simpleNFTPublisher;
    public ContractCaller contractCaller;
    public NearSender nearSender;

    public Button connectButton;
    public Button sendButton;
    public Button mintButton;
    public Button callButton;
    public Button viewButton;

    void Awake()
    {
        // Finding Action Components if they are not drag'n'dropped on the script
        if (playerConnector == null) playerConnector = GameObject.Find("Actions/ConnectPlayer").GetComponent<PlayerConnector>();
        if (simpleNFTPublisher == null) simpleNFTPublisher = GameObject.Find("Actions/MintNFT").GetComponent<SimpleNFTPublisher>();
        if (contractCaller == null) contractCaller = GameObject.Find("Actions/CallContract").GetComponent<ContractCaller>();
        if (nearSender == null) nearSender = GameObject.Find("Actions/SendNear").GetComponent<NearSender>();

        if (playerConnector.IsPlayerConnected()) accountId = playerConnector.GetPlayerAccountId();
        ChangeUI(playerConnector.IsPlayerConnected());
    }
    void Start()
    {
        Debug.Log($@"ConnectPlayer is found ({playerConnector != null}) | MintNFT is found ({simpleNFTPublisher != null}) | CallContract is found ({contractCaller != null}) | SendNear is found ({nearSender != null})");

        connectButton.onClick.AddListener(OnConnectPlayer);
        sendButton.onClick.AddListener(OnSendNear);
        mintButton.onClick.AddListener(OnMintNFT);
        callButton.onClick.AddListener(OnContractCall);
        viewButton.onClick.AddListener(OnContractView);
    }

    async void OnConnectPlayer()
    {
        if (!playerConnector.IsPlayerConnected())
        {
            await playerConnector.ConnectWalletByBrowserAsync();
            accountId = playerConnector.GetPlayerAccountId();
        }
        else
        {
            playerConnector.DisconnectWallet();
            accountId = null;
        }
        ChangeUI(playerConnector.IsPlayerConnected());
    }

    async void OnSendNear()
    {
        Debug.Log(accountId + " is sending NEAR");

        dynamic result = await nearSender.SendNear(accountId, (UInt128)UnitConverter.GetYoctoNearFormat(0.01), actor);
        Debug.Log("Blockchain has returned the result of sending near: " + JsonConvert.SerializeObject(result));
    }

    async void OnMintNFT()
    {

        //
        // Remember, you need your own contract to create an NFT.
        //

        Debug.Log(accountId + " is minting an NFT");

        string contractAddress = "super_sword_collection.my_game_name.registry4.metaseed.testnet";
        string name = "Metaseed NFT";
        string tokenId = "88";
        string description = "Welcome to Metaseed ecosystem!";
        string media = "https://gateway.ipfs.io/ipfs/QmcniBv7UQ4gGPQQW2BwbD4ZZHzN3o3tPuNLZCbBchd1zh";
        ulong nearGas = (ulong)UnitConverter.GetGasFormat(30);

        dynamic result = await simpleNFTPublisher.MintNft(contractAddress, tokenId, name, description, media, accountId, actor, nearGas);
        Debug.Log("Blockchain has returned the result of NFT minting: " + JsonConvert.SerializeObject(result));
    }

    async void OnContractCall()
    {
        Debug.Log(accountId + " is calling a contract");

        //
        // To call an example contract we
        // Need to provide the following arguments
        // {
        //     "value": "4",
        // }
        //

        dynamic arguments = new ExpandoObject();
        arguments.value = 4;

        ulong nearGas = (ulong)UnitConverter.GetGasFormat(10);
        UInt128 yoctoNearDeposit = (UInt128)UnitConverter.GetYoctoNearFormat(0);

        dynamic result = await contractCaller.CallContract("testcounter.metaseed.testnet", "incrementCounter", arguments, actor, nearGas, yoctoNearDeposit);
        Debug.Log("Blockchain has returned the result of contract calling: " + JsonConvert.SerializeObject(result));
    }

    async void OnContractView()
    {
        Debug.Log(accountId + " is calling a contract");

        // To view an example contract we don't need an arguments
        dynamic arguments = new ExpandoObject();
        ulong nearGas = (ulong)UnitConverter.GetGasFormat(10);
        UInt128 yoctoNearDeposit = (UInt128)UnitConverter.GetYoctoNearFormat(0);

        dynamic result = await contractCaller.ViewContract("testcounter.metaseed.testnet", "getCounter", arguments, actor);
        Debug.Log("Blockchain has returned the result of contract calling: " + JsonConvert.SerializeObject(result));
    }

    private void ChangeUI(bool connected)
    {
        if (connected)
        {
            connectButton.GetComponentInChildren<Text>().text = "Disconnect: " + accountId;
            sendButton.gameObject.SetActive(true);
            mintButton.gameObject.SetActive(true);
            callButton.gameObject.SetActive(true);
            viewButton.gameObject.SetActive(true);
        }
        else
        {
            connectButton.GetComponentInChildren<Text>().text = "Connect Player";
            sendButton.gameObject.SetActive(false);
            mintButton.gameObject.SetActive(false);
            callButton.gameObject.SetActive(false);
            viewButton.gameObject.SetActive(false);
        }
    }

}

'''
'''--- source/Assets/MetaseedUnityToolkit/Demo/DemoControllerScriptVisual.cs ---
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using Newtonsoft.Json;
using NearClient.Utilities;
using MetaseedUnityToolkit;

public class DemoControllerScriptVisual : MonoBehaviour
{
    private string accountId;

    public PlayerConnector playerConnector;
    public SimpleNFTPublisher simpleNFTPublisher;
    public ContractCaller contractCaller;
    public NearSender nearSender;

    public Button connectButton;
    public Button sendButton;
    public Button mintButton;
    public Button callButton;
    public Button viewButton;

    void Awake()
    {
        // Finding Action Components if they are not drag'n'dropped on the script
        if (playerConnector == null) playerConnector = GameObject.Find("Actions/ConnectPlayer").GetComponent<PlayerConnector>();
        if (simpleNFTPublisher == null) simpleNFTPublisher = GameObject.Find("Actions/MintNFT").GetComponent<SimpleNFTPublisher>();
        if (contractCaller == null) contractCaller = GameObject.Find("Actions/CallContract").GetComponent<ContractCaller>();
        if (nearSender == null) nearSender = GameObject.Find("Actions/SendNear").GetComponent<NearSender>();

        if (playerConnector.IsPlayerConnected()) accountId = playerConnector.GetPlayerAccountId();
        ChangeUI(playerConnector.IsPlayerConnected());
    }
    void Start()
    {
        Debug.Log($@"ConnectPlayer is found ({playerConnector != null}) | MintNFT is found ({simpleNFTPublisher != null}) | CallContract is found ({contractCaller != null}) | SendNear is found ({nearSender != null})");

        connectButton.onClick.AddListener(OnConnectPlayer);
        sendButton.onClick.AddListener(OnSendNear);
        mintButton.onClick.AddListener(OnMintNFT);
        callButton.onClick.AddListener(OnContractCall);
        viewButton.onClick.AddListener(OnContractView);
    }

    async void OnConnectPlayer()
    {
        if (!playerConnector.IsPlayerConnected())
        {
            await playerConnector.ConnectWalletByBrowserAsync();
            accountId = playerConnector.GetPlayerAccountId();
        }
        else
        {
            playerConnector.DisconnectWallet();
            accountId = null;
        }
        ChangeUI(playerConnector.IsPlayerConnected());
    }

    async void OnSendNear()
    {
        Debug.Log(accountId + " is sending NEAR");
        dynamic result = await nearSender.SendNear();
        Debug.Log("Blockchain has returned the result of sending near: " + JsonConvert.SerializeObject(result));
    }

    async void OnMintNFT()
    {
        Debug.Log(accountId + " is minting an NFT");
        dynamic result = await simpleNFTPublisher.MintNft();
        Debug.Log("Blockchain has returned the result of NFT minting: " + JsonConvert.SerializeObject(result));
    }

    async void OnContractCall()
    {
        Debug.Log(accountId + " is calling a contract");
        dynamic result = await contractCaller.CallContract();
        Debug.Log("Blockchain has returned the result of contract calling: " + JsonConvert.SerializeObject(result));
    }

    async void OnContractView()
    {
        Debug.Log(accountId + " is calling a contract");
        dynamic result = await contractCaller.ViewContract();
        Debug.Log("Blockchain has returned the result of contract calling: " + JsonConvert.SerializeObject(result));
    }

    private void ChangeUI(bool connected)
    {
        if (connected)
        {
            connectButton.GetComponentInChildren<Text>().text = "Disconnect: " + accountId;
            sendButton.gameObject.SetActive(true);
            mintButton.gameObject.SetActive(true);
            callButton.gameObject.SetActive(true);
            viewButton.gameObject.SetActive(true);
        }
        else
        {
            connectButton.GetComponentInChildren<Text>().text = "Connect Player";
            sendButton.gameObject.SetActive(false);
            mintButton.gameObject.SetActive(false);
            callButton.gameObject.SetActive(false);
            viewButton.gameObject.SetActive(false);
        }
    }
}

'''
'''--- source/Assets/MetaseedUnityToolkit/Editor/Components/ContractCallerEditor.cs ---
using System.Collections;
using System.Collections.Generic;
using UnityEditor;
using UnityEditorInternal;
using UnityEngine;
using System.Linq;
using System;
using Newtonsoft.Json;
using System.Dynamic;
using UnityEngine.UI;
using NearClient.Utilities;
using MetaseedUnityToolkit;

[CustomEditor(typeof(ContractCaller))]
public class ContractCallerEditor : Editor
{
    private ContractCaller _target;

    private SerializedProperty listProperty;

    void OnEnable()
    {
        _target = ((ContractCaller)target);
        listProperty = serializedObject.FindProperty("arguments");
    }

    public override void OnInspectorGUI()
    {
        serializedObject.Update();

        bool isSelectedRoleConnected = IsSelectedRoleConnected();
        if (isSelectedRoleConnected)
        {
            EditorGUILayout.Space();

            SerializedProperty contractAddressProp = serializedObject.FindProperty("contractAddress");
            contractAddressProp.stringValue = EditorGUILayout.TextField("Contract address: ", contractAddressProp.stringValue);

            SerializedProperty contractMethodProp = serializedObject.FindProperty("contractMethod");
            contractMethodProp.stringValue = EditorGUILayout.TextField("Method: ", contractMethodProp.stringValue);

            EditorGUILayout.Space();
            EditorGUILayout.Space();

            string[] options = new string[] { "Call", "View" };
            SerializedProperty selectedActionProp = serializedObject.FindProperty("selectedAction");
            selectedActionProp.intValue = EditorGUILayout.Popup("Choose action type:", selectedActionProp.intValue, options);

            EditorGUILayout.Space();

            listProperty.arraySize = EditorGUILayout.IntField("Arguments", listProperty.arraySize);

            for (int i = 0; i < listProperty.arraySize; i++)
            {
                var dialogue = listProperty.GetArrayElementAtIndex(i);
                EditorGUILayout.PropertyField(dialogue, new GUIContent("Argument " + (i + 1)), true);
            }

            serializedObject.ApplyModifiedProperties();

            EditorGUILayout.Space();

            if (_target.selectedAction == 0)
            {
                if (!_target.IsComponentDataValid()) GUI.enabled = false;

                if (GUILayout.Button("Call contract"))
                {
                    GUI.enabled = true;
                    CallAndWaitForResult();
                }
            }
            else if (_target.selectedAction == 1)
            {
                if (GUILayout.Button("View contract"))
                {
                    GUI.enabled = true;
                    ViewAndWaitForResult();
                }

            }
            GUI.enabled = true;

            EditorGUILayout.Space();
            EditorGUILayout.Space();

            if (_target.selectedAction == 0)
            {
                DrawExtraSettings();
            }
        }
        else
        {
            EditorGUILayout.Space();

            if (_target.selectedRole == 0)
            {
                GUILayout.Label("You should connect player account first");
                GUILayout.Label("Drag the 'Player Connect' component somewhere in your scene and press connect.", EditorStyles.miniLabel);
            }
            else if (_target.selectedRole == 1)
            {
                GUILayout.Label("You should connect developer account first");
                GUILayout.Label("Open Near > Developer Account and press connect", EditorStyles.miniLabel);
            }

        }

        serializedObject.ApplyModifiedProperties();
    }

    public async void CallAndWaitForResult()
    {
        Debug.Log("Transaction is pending");
        dynamic result = await _target.CallContract();
        Debug.Log(JsonConvert.SerializeObject(result));
    }

    public async void ViewAndWaitForResult()
    {
        Debug.Log("Transaction is pending");
        dynamic result = await _target.ViewContract();
        Debug.Log(JsonConvert.SerializeObject(result));
    }

    private bool IsSelectedRoleConnected()
    {
        string[] options = new string[] { "Player", "Developer" };

        SerializedProperty selectedRoleProp = serializedObject.FindProperty("selectedRole");
        selectedRoleProp.intValue = EditorGUILayout.Popup("Choose your role:", selectedRoleProp.intValue, options);

        if (selectedRoleProp.intValue == 0) _target.actor = EConnectionActor.Player;
        else if (selectedRoleProp.intValue == 1) _target.actor = EConnectionActor.Developer;

        return ConnectionsManager.IsConnected(_target.actor);
    }

    void DrawExtraSettings()
    {
        _target.showExtraSettings = EditorGUILayout.Toggle("Settings", _target.showExtraSettings);
        if (_target.showExtraSettings)
        {
            SerializedProperty gasProp = serializedObject.FindProperty("gas");
            gasProp.stringValue = EditorGUILayout.TextField("TGas: ", gasProp.stringValue);

            SerializedProperty depositProp = serializedObject.FindProperty("deposit");
            depositProp.stringValue = EditorGUILayout.TextField("Deposit: ", depositProp.stringValue);
        }
    }
}

'''
'''--- source/Assets/MetaseedUnityToolkit/Editor/Components/NearSenderEditor.cs ---
using System.Collections;
using System.Collections.Generic;
using UnityEditor;
using UnityEditorInternal;
using UnityEngine;
using System.Linq;
using System;
using Newtonsoft.Json;
using System.Dynamic;
using UnityEngine.UI;
using NearClient.Utilities;
using MetaseedUnityToolkit;

[CustomEditor(typeof(NearSender))]
public class NearSenderEditor : Editor
{
    private NearSender _target;

    void OnEnable()
    {
        _target = ((NearSender)target);
    }

    int selectedAction = 0;
    public override void OnInspectorGUI()
    {
        serializedObject.Update();

        bool isSelectedRoleConnected = IsSelectedRoleConnected();
        if (isSelectedRoleConnected)
        {
            EditorGUILayout.Space();

            SerializedProperty receiverIdProp = serializedObject.FindProperty("receiverId");
            receiverIdProp.stringValue = EditorGUILayout.TextField("Receiver address: ", receiverIdProp.stringValue);

            SerializedProperty depositProp = serializedObject.FindProperty("deposit");
            depositProp.stringValue = EditorGUILayout.TextField("Amount: ", depositProp.stringValue);

            EditorGUILayout.Space();
            EditorGUILayout.Space();

            if (!_target.IsComponentDataValid()) GUI.enabled = false;

            if (GUILayout.Button("Send"))
            {
                GUI.enabled = true;
                SendAndWaitForResult();
            }

            GUI.enabled = true;

            EditorGUILayout.Space();
        }
        else
        {
            EditorGUILayout.Space();

            if (_target.selectedRole == 0)
            {
                GUILayout.Label("You should connect player account first");
                GUILayout.Label("Drag the 'Player Connect' component somewhere in your scene and press connect.", EditorStyles.miniLabel);
            }
            else if (_target.selectedRole == 1)
            {
                GUILayout.Label("You should connect developer account first");
                GUILayout.Label("Open Near > Developer Account and press connect", EditorStyles.miniLabel);
            }
        }

        serializedObject.ApplyModifiedProperties();
    }

    public async void SendAndWaitForResult()
    {
        Debug.Log("Transaction is pending");
        dynamic result = await _target.SendNear();
        Debug.Log(JsonConvert.SerializeObject(result));
    }

    private bool IsSelectedRoleConnected()
    {
        string[] options = new string[] { "Player", "Developer" };

        SerializedProperty selectedRoleProp = serializedObject.FindProperty("selectedRole");
        selectedRoleProp.intValue = EditorGUILayout.Popup("Choose your role:", selectedRoleProp.intValue, options);

        if (selectedRoleProp.intValue == 0) _target.actor = EConnectionActor.Player;
        else if (selectedRoleProp.intValue == 1) _target.actor = EConnectionActor.Developer;

        return ConnectionsManager.IsConnected(_target.actor);
    }
}

'''
'''--- source/Assets/MetaseedUnityToolkit/Editor/Components/PlayerConnectorEditor.cs ---
using System.Collections;
using System.Collections.Generic;
using UnityEditor;
using UnityEditorInternal;
using UnityEngine;
using System.Linq;
using System;
using MetaseedUnityToolkit;

[CustomEditor(typeof(PlayerConnector))]
public class PlayerConnectorEditor : Editor
{
    private PlayerConnector _target;

    void OnEnable()
    {
        _target = ((PlayerConnector)target);
    }

    public override void OnInspectorGUI()
    {
        EditorGUILayout.Space();

        if (!ConnectionsManager.IsConnected(EConnectionActor.Player))
        {

            EditorGUILayout.Space();

            if (GUILayout.Button("Connect Player Wallet"))
            {
                _target.ConnectWalletByBrowser();
            }
        }
        else
        {
            GUILayout.Label("Player wallet: " + PluginStorage.PlayerNearAccountId, EditorStyles.label);

            EditorGUILayout.Space();

            if (GUILayout.Button("Disconnect"))
            {
                _target.DisconnectWallet();
            }
        }
    }
}

'''
'''--- source/Assets/MetaseedUnityToolkit/Editor/Components/SimpleNFTPublisherEditor.cs ---
using System.Collections;
using System.Collections.Generic;
using UnityEditor;
using UnityEditorInternal;
using UnityEngine;
using System.Linq;
using System;
using Newtonsoft.Json;
using System.Dynamic;
using UnityEngine.UI;
using NearClient.Utilities;
using MetaseedUnityToolkit;

[CustomEditor(typeof(SimpleNFTPublisher))]
public class SimpleNFTPublisherEditor : Editor
{
    private SimpleNFTPublisher _target;

    void OnEnable()
    {
        _target = ((SimpleNFTPublisher)target);
    }

    public override void OnInspectorGUI()
    {
        serializedObject.Update();

        bool isSelectedRoleConnected = IsSelectedRoleConnected();
        if (isSelectedRoleConnected)
        {

            EditorGUILayout.Space();

            SerializedProperty contractAddressProp = serializedObject.FindProperty("contractAddress");
            contractAddressProp.stringValue = EditorGUILayout.TextField("Contract address: ", contractAddressProp.stringValue);

            SerializedProperty titleProp = serializedObject.FindProperty("title");
            titleProp.stringValue = EditorGUILayout.TextField("Title: ", titleProp.stringValue);

            SerializedProperty descriptionProp = serializedObject.FindProperty("description");
            descriptionProp.stringValue = EditorGUILayout.TextField("Description: ", descriptionProp.stringValue);

            SerializedProperty tokenIdProp = serializedObject.FindProperty("tokenId");
            tokenIdProp.stringValue = EditorGUILayout.TextField("TokenId: ", tokenIdProp.stringValue);

            SerializedProperty mediaProp = serializedObject.FindProperty("media");
            mediaProp.stringValue = EditorGUILayout.TextField("Media: ", mediaProp.stringValue);

            EditorGUILayout.Space();

            SerializedProperty receiverIdProp = serializedObject.FindProperty("receiverId");
            receiverIdProp.stringValue = EditorGUILayout.TextField("Receiver Id: ", receiverIdProp.stringValue);

            EditorGUILayout.Space();
            EditorGUILayout.Space();

            if (!_target.IsComponentDataValid()) GUI.enabled = false;

            if (GUILayout.Button("Mint NFT"))
            {
                GUI.enabled = true;
                MintAndWaitForResult();
            }
            GUI.enabled = true;

            EditorGUILayout.Space();
            EditorGUILayout.Space();

            DrawExtraSettings();
        }
        else
        {
            EditorGUILayout.Space();

            if (_target.selectedRole == 0)
            {
                GUILayout.Label("You should connect player account first");
                GUILayout.Label("Drag the 'Player Connect' component somewhere in your scene and press connect.", EditorStyles.miniLabel);
            }
            else if (_target.selectedRole == 1)
            {
                GUILayout.Label("You should connect developer account first");
                GUILayout.Label("Open Near > Developer Account and press connect", EditorStyles.miniLabel);
            }

        }

        serializedObject.ApplyModifiedProperties();
    }

    public async void MintAndWaitForResult()
    {
        Debug.Log("Transaction is pending");
        dynamic result = await _target.MintNft();
        Debug.Log(JsonConvert.SerializeObject(result));
    }

    private bool IsSelectedRoleConnected()
    {
        string[] options = new string[] { "Player", "Developer" };

        SerializedProperty selectedRoleProp = serializedObject.FindProperty("selectedRole");
        selectedRoleProp.intValue = EditorGUILayout.Popup("Choose your role:", selectedRoleProp.intValue, options);

        if (selectedRoleProp.intValue == 0) _target.actor = EConnectionActor.Player;
        else if (selectedRoleProp.intValue == 1) _target.actor = EConnectionActor.Developer;

        return ConnectionsManager.IsConnected(_target.actor);
    }

    void DrawExtraSettings()
    {
        _target.showExtraSettings = EditorGUILayout.Toggle("Settings", _target.showExtraSettings);
        if (_target.showExtraSettings)
        {
            SerializedProperty gasProp = serializedObject.FindProperty("gas");
            gasProp.stringValue = EditorGUILayout.TextField("TGas: ", gasProp.stringValue);

            SerializedProperty depositProp = serializedObject.FindProperty("deposit");
            depositProp.stringValue = EditorGUILayout.TextField("Deposit: ", depositProp.stringValue);
        }
    }
}

'''
'''--- source/Assets/MetaseedUnityToolkit/Editor/Windows/NearAccountWindow.cs ---
using UnityEngine;
using UnityEditor;
using System.Threading.Tasks;
using System.Collections;
using System.Linq;
using System;
using Newtonsoft.Json;
using System.Dynamic;
using System.IO;
using MetaseedUnityToolkit;

public class NearAccountWindow : EditorWindow
{
    [MenuItem("Near/Developer Account")]
    public static void ShowWindow()
    {
        EditorWindow.GetWindow(typeof(NearAccountWindow));
    }

    void OnGUI()
    {
        EditorGUILayout.Space();
        GUILayout.Label("Developer Wallet", EditorStyles.boldLabel);
        EditorGUILayout.Space();
        EditorGUILayout.Space();

        if (!ConnectionsManager.IsConnected(EConnectionActor.Developer))
        {

            EditorGUILayout.Space();

            if (GUILayout.Button("Connect Wallet"))
            {
                WalletConnector.Connect("testnet", EConnectionActor.Developer);
            }
        }
        else
        {
            GUILayout.Label("wallet: " + PluginStorage.GameDeveloperNearAccountId, EditorStyles.label);

            EditorGUILayout.Space();

            if (GUILayout.Button("Disconnect"))
            {
                ConnectionsManager.Disconnect(EConnectionActor.Developer);
            }
        }
    }
}

'''
'''--- source/Packages/manifest.json ---
{
  "dependencies": {
    "com.unity.collab-proxy": "1.15.4",
    "com.unity.ide.rider": "2.0.7",
    "com.unity.ide.visualstudio": "2.0.12",
    "com.unity.ide.vscode": "1.2.4",
    "com.unity.test-framework": "1.1.29",
    "com.unity.textmeshpro": "3.0.6",
    "com.unity.timeline": "1.4.8",
    "com.unity.ugui": "1.0.0",
    "com.unity.modules.ai": "1.0.0",
    "com.unity.modules.androidjni": "1.0.0",
    "com.unity.modules.animation": "1.0.0",
    "com.unity.modules.assetbundle": "1.0.0",
    "com.unity.modules.audio": "1.0.0",
    "com.unity.modules.cloth": "1.0.0",
    "com.unity.modules.director": "1.0.0",
    "com.unity.modules.imageconversion": "1.0.0",
    "com.unity.modules.imgui": "1.0.0",
    "com.unity.modules.jsonserialize": "1.0.0",
    "com.unity.modules.particlesystem": "1.0.0",
    "com.unity.modules.physics": "1.0.0",
    "com.unity.modules.physics2d": "1.0.0",
    "com.unity.modules.screencapture": "1.0.0",
    "com.unity.modules.terrain": "1.0.0",
    "com.unity.modules.terrainphysics": "1.0.0",
    "com.unity.modules.tilemap": "1.0.0",
    "com.unity.modules.ui": "1.0.0",
    "com.unity.modules.uielements": "1.0.0",
    "com.unity.modules.umbra": "1.0.0",
    "com.unity.modules.unityanalytics": "1.0.0",
    "com.unity.modules.unitywebrequest": "1.0.0",
    "com.unity.modules.unitywebrequestassetbundle": "1.0.0",
    "com.unity.modules.unitywebrequestaudio": "1.0.0",
    "com.unity.modules.unitywebrequesttexture": "1.0.0",
    "com.unity.modules.unitywebrequestwww": "1.0.0",
    "com.unity.modules.vehicles": "1.0.0",
    "com.unity.modules.video": "1.0.0",
    "com.unity.modules.vr": "1.0.0",
    "com.unity.modules.wind": "1.0.0",
    "com.unity.modules.xr": "1.0.0"
  }
}

'''
'''--- source/Packages/packages-lock.json ---
{
  "dependencies": {
    "com.unity.collab-proxy": {
      "version": "1.15.4",
      "depth": 0,
      "source": "registry",
      "dependencies": {
        "com.unity.nuget.newtonsoft-json": "2.0.0",
        "com.unity.services.core": "1.0.1"
      },
      "url": "https://packages.unity.com"
    },
    "com.unity.ext.nunit": {
      "version": "1.0.6",
      "depth": 1,
      "source": "registry",
      "dependencies": {},
      "url": "https://packages.unity.com"
    },
    "com.unity.ide.rider": {
      "version": "2.0.7",
      "depth": 0,
      "source": "registry",
      "dependencies": {
        "com.unity.test-framework": "1.1.1"
      },
      "url": "https://packages.unity.com"
    },
    "com.unity.ide.visualstudio": {
      "version": "2.0.12",
      "depth": 0,
      "source": "registry",
      "dependencies": {
        "com.unity.test-framework": "1.1.9"
      },
      "url": "https://packages.unity.com"
    },
    "com.unity.ide.vscode": {
      "version": "1.2.4",
      "depth": 0,
      "source": "registry",
      "dependencies": {},
      "url": "https://packages.unity.com"
    },
    "com.unity.nuget.newtonsoft-json": {
      "version": "2.0.0",
      "depth": 1,
      "source": "registry",
      "dependencies": {},
      "url": "https://packages.unity.com"
    },
    "com.unity.services.core": {
      "version": "1.0.1",
      "depth": 1,
      "source": "registry",
      "dependencies": {
        "com.unity.modules.unitywebrequest": "1.0.0"
      },
      "url": "https://packages.unity.com"
    },
    "com.unity.test-framework": {
      "version": "1.1.29",
      "depth": 0,
      "source": "registry",
      "dependencies": {
        "com.unity.ext.nunit": "1.0.6",
        "com.unity.modules.imgui": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0"
      },
      "url": "https://packages.unity.com"
    },
    "com.unity.textmeshpro": {
      "version": "3.0.6",
      "depth": 0,
      "source": "registry",
      "dependencies": {
        "com.unity.ugui": "1.0.0"
      },
      "url": "https://packages.unity.com"
    },
    "com.unity.timeline": {
      "version": "1.4.8",
      "depth": 0,
      "source": "registry",
      "dependencies": {
        "com.unity.modules.director": "1.0.0",
        "com.unity.modules.animation": "1.0.0",
        "com.unity.modules.audio": "1.0.0",
        "com.unity.modules.particlesystem": "1.0.0"
      },
      "url": "https://packages.unity.com"
    },
    "com.unity.ugui": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {
        "com.unity.modules.ui": "1.0.0",
        "com.unity.modules.imgui": "1.0.0"
      }
    },
    "com.unity.modules.ai": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {}
    },
    "com.unity.modules.androidjni": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {}
    },
    "com.unity.modules.animation": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {}
    },
    "com.unity.modules.assetbundle": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {}
    },
    "com.unity.modules.audio": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {}
    },
    "com.unity.modules.cloth": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {
        "com.unity.modules.physics": "1.0.0"
      }
    },
    "com.unity.modules.director": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {
        "com.unity.modules.audio": "1.0.0",
        "com.unity.modules.animation": "1.0.0"
      }
    },
    "com.unity.modules.imageconversion": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {}
    },
    "com.unity.modules.imgui": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {}
    },
    "com.unity.modules.jsonserialize": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {}
    },
    "com.unity.modules.particlesystem": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {}
    },
    "com.unity.modules.physics": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {}
    },
    "com.unity.modules.physics2d": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {}
    },
    "com.unity.modules.screencapture": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {
        "com.unity.modules.imageconversion": "1.0.0"
      }
    },
    "com.unity.modules.subsystems": {
      "version": "1.0.0",
      "depth": 1,
      "source": "builtin",
      "dependencies": {
        "com.unity.modules.jsonserialize": "1.0.0"
      }
    },
    "com.unity.modules.terrain": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {}
    },
    "com.unity.modules.terrainphysics": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {
        "com.unity.modules.physics": "1.0.0",
        "com.unity.modules.terrain": "1.0.0"
      }
    },
    "com.unity.modules.tilemap": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {
        "com.unity.modules.physics2d": "1.0.0"
      }
    },
    "com.unity.modules.ui": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {}
    },
    "com.unity.modules.uielements": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {
        "com.unity.modules.ui": "1.0.0",
        "com.unity.modules.imgui": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.uielementsnative": "1.0.0"
      }
    },
    "com.unity.modules.uielementsnative": {
      "version": "1.0.0",
      "depth": 1,
      "source": "builtin",
      "dependencies": {
        "com.unity.modules.ui": "1.0.0",
        "com.unity.modules.imgui": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0"
      }
    },
    "com.unity.modules.umbra": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {}
    },
    "com.unity.modules.unityanalytics": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0"
      }
    },
    "com.unity.modules.unitywebrequest": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {}
    },
    "com.unity.modules.unitywebrequestassetbundle": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {
        "com.unity.modules.assetbundle": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0"
      }
    },
    "com.unity.modules.unitywebrequestaudio": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.audio": "1.0.0"
      }
    },
    "com.unity.modules.unitywebrequesttexture": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.imageconversion": "1.0.0"
      }
    },
    "com.unity.modules.unitywebrequestwww": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.unitywebrequestassetbundle": "1.0.0",
        "com.unity.modules.unitywebrequestaudio": "1.0.0",
        "com.unity.modules.audio": "1.0.0",
        "com.unity.modules.assetbundle": "1.0.0",
        "com.unity.modules.imageconversion": "1.0.0"
      }
    },
    "com.unity.modules.vehicles": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {
        "com.unity.modules.physics": "1.0.0"
      }
    },
    "com.unity.modules.video": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {
        "com.unity.modules.audio": "1.0.0",
        "com.unity.modules.ui": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0"
      }
    },
    "com.unity.modules.vr": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.physics": "1.0.0",
        "com.unity.modules.xr": "1.0.0"
      }
    },
    "com.unity.modules.wind": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {}
    },
    "com.unity.modules.xr": {
      "version": "1.0.0",
      "depth": 0,
      "source": "builtin",
      "dependencies": {
        "com.unity.modules.physics": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.subsystems": "1.0.0"
      }
    }
  }
}

'''
'''--- source/ProjectSettings/ProjectVersion.txt ---
m_EditorVersion: 2020.3.25f1
m_EditorVersionWithRevision: 2020.3.25f1 (9b9180224418)

'''
'''--- source/ProjectSettings/SceneTemplateSettings.json ---
{
    "templatePinStates": [],
    "dependencyTypeInfos": [
        {
            "userAdded": false,
            "type": "UnityEngine.AnimationClip",
            "ignore": false,
            "defaultInstantiationMode": 0,
            "supportsModification": true
        },
        {
            "userAdded": false,
            "type": "UnityEditor.Animations.AnimatorController",
            "ignore": false,
            "defaultInstantiationMode": 0,
            "supportsModification": true
        },
        {
            "userAdded": false,
            "type": "UnityEngine.AnimatorOverrideController",
            "ignore": false,
            "defaultInstantiationMode": 0,
            "supportsModification": true
        },
        {
            "userAdded": false,
            "type": "UnityEditor.Audio.AudioMixerController",
            "ignore": false,
            "defaultInstantiationMode": 0,
            "supportsModification": true
        },
        {
            "userAdded": false,
            "type": "UnityEngine.ComputeShader",
            "ignore": true,
            "defaultInstantiationMode": 1,
            "supportsModification": true
        },
        {
            "userAdded": false,
            "type": "UnityEngine.Cubemap",
            "ignore": false,
            "defaultInstantiationMode": 0,
            "supportsModification": true
        },
        {
            "userAdded": false,
            "type": "UnityEngine.GameObject",
            "ignore": false,
            "defaultInstantiationMode": 0,
            "supportsModification": true
        },
        {
            "userAdded": false,
            "type": "UnityEditor.LightingDataAsset",
            "ignore": false,
            "defaultInstantiationMode": 0,
            "supportsModification": false
        },
        {
            "userAdded": false,
            "type": "UnityEngine.LightingSettings",
            "ignore": false,
            "defaultInstantiationMode": 0,
            "supportsModification": true
        },
        {
            "userAdded": false,
            "type": "UnityEngine.Material",
            "ignore": false,
            "defaultInstantiationMode": 0,
            "supportsModification": true
        },
        {
            "userAdded": false,
            "type": "UnityEditor.MonoScript",
            "ignore": true,
            "defaultInstantiationMode": 1,
            "supportsModification": true
        },
        {
            "userAdded": false,
            "type": "UnityEngine.PhysicMaterial",
            "ignore": false,
            "defaultInstantiationMode": 0,
            "supportsModification": true
        },
        {
            "userAdded": false,
            "type": "UnityEngine.PhysicsMaterial2D",
            "ignore": false,
            "defaultInstantiationMode": 0,
            "supportsModification": true
        },
        {
            "userAdded": false,
            "type": "UnityEngine.Rendering.PostProcessing.PostProcessProfile",
            "ignore": false,
            "defaultInstantiationMode": 0,
            "supportsModification": true
        },
        {
            "userAdded": false,
            "type": "UnityEngine.Rendering.PostProcessing.PostProcessResources",
            "ignore": false,
            "defaultInstantiationMode": 0,
            "supportsModification": true
        },
        {
            "userAdded": false,
            "type": "UnityEngine.Rendering.VolumeProfile",
            "ignore": false,
            "defaultInstantiationMode": 0,
            "supportsModification": true
        },
        {
            "userAdded": false,
            "type": "UnityEditor.SceneAsset",
            "ignore": false,
            "defaultInstantiationMode": 0,
            "supportsModification": false
        },
        {
            "userAdded": false,
            "type": "UnityEngine.Shader",
            "ignore": true,
            "defaultInstantiationMode": 1,
            "supportsModification": true
        },
        {
            "userAdded": false,
            "type": "UnityEngine.ShaderVariantCollection",
            "ignore": true,
            "defaultInstantiationMode": 1,
            "supportsModification": true
        },
        {
            "userAdded": false,
            "type": "UnityEngine.Texture",
            "ignore": false,
            "defaultInstantiationMode": 0,
            "supportsModification": true
        },
        {
            "userAdded": false,
            "type": "UnityEngine.Texture2D",
            "ignore": false,
            "defaultInstantiationMode": 0,
            "supportsModification": true
        },
        {
            "userAdded": false,
            "type": "UnityEngine.Timeline.TimelineAsset",
            "ignore": false,
            "defaultInstantiationMode": 0,
            "supportsModification": true
        }
    ],
    "defaultDependencyTypeInfo": {
        "userAdded": false,
        "type": "<default_scene_template_dependencies>",
        "ignore": false,
        "defaultInstantiationMode": 1,
        "supportsModification": true
    },
    "newSceneOverride": 0
}
'''