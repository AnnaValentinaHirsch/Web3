*GitHub Repository "karywjh/collaborative-art-near"*

'''--- .vscode/settings.json ---
{
  "editor.tabSize": 2
}

'''
'''--- contracts/.mocharc.json ---
{
  "extensions": ["ts"],
  "spec": ["tests/**/*.spec.*"],
  "node-option": [
    "experimental-specifier-resolution=node",
    "loader=ts-node/esm"
  ],
  "timeout": 10000000
}

'''
'''--- contracts/README.md ---
# NEAR NFT-Tutorial JavaScript Edition

Welcome to NEAR's NFT tutorial, where we will help you parse the details around NEAR's [NEP-171 standard](https://nomicon.io/Standards/NonFungibleToken/Core.html) (Non-Fungible Token Standard), and show you how to build your own NFT smart contract from the ground up, improving your understanding about the NFT standard along the way. 

## Prerequisites

* [Node.js](/develop/prerequisites#nodejs)
* [NEAR Wallet Account](wallet.testnet.near.org)
* [NEAR-CLI](https://docs.near.org/tools/near-cli#setup)
* [yarn](https://classic.yarnpkg.com/en/docs/install#mac-stable)

## Tutorial Stages 

Each branch you will find in this repo corresponds to various stages of this tutorial with a partially completed contract at each stage. You are welcome to start from any stage you want to learn the most about. 

| Branch        | Docs Tutorial                                                                                    | Description |
| ------------- | ------------------------------------------------------------------------------------------------ | ----------- |
| 1.skeleton    | [Contract Architecture](https://docs.near.org/docs/tutorials/contracts/nfts/js/skeleton) | You'll learn the basic architecture of the NFT smart contract.            |
| 2.minting     | [Minting](https://docs.near.org/docs/tutorials/contracts/nfts/js/minting)                |Here you'll flesh out the skeleton so the smart contract can mint a non-fungible token             |
| 3.enumeration | [Enumeration](https://docs.near.org/docs/tutorials/contracts/nfts/js/enumeration)        |    Here you'll find different enumeration methods that can be used to return the smart contract's states.          |
| 4.core        | [Core](https://docs.near.org/docs/tutorials/contracts/nfts/js/core)                      | In this tutorial you'll extend the NFT contract using the core standard, which will allow you to transfer non-fungible tokens.             |
| 5.approval    | [Approval](https://docs.near.org/docs/tutorials/contracts/nfts/js/approvals)             | Here you'll expand the contract allowing other accounts to transfer NFTs on your behalf.            |
| 6.royalty     | [Royalty](https://docs.near.org/docs/tutorials/contracts/nfts/js/royalty)                                                                                        |Here you'll add the ability for non-fungible tokens to have royalties. This will allow people to get a percentage of the purchase price when an NFT is purchased.             |
| 7.events      | -----------                                                                                        |   This allows indexers to know what functions are being called and make it easier and more reliable to keep track of information that can be used to populate the collectibles tab in the wallet for example. (tutorial docs have yet to be implemented )          |
| 8.marketplace | -----------                                                                                      | -----------             |

The tutorial series also contains a very helpful section on [**Upgrading Smart Contracts**](https://docs.near.org/docs/tutorials/contracts/nfts/js/upgrade-contract). Definitely go and check it out as this is a common pain point.

# Quick-Start 

If you want to see the full completed contract go ahead and clone and build this repo using 

```=bash
git clone https://github.com/near-examples/nft-tutorial-js.git 
cd nft-tutorial-js
yarn && yarn build
```

Now that you've cloned and built the contract we can try a few things. 

## Mint An NFT

Once you've created your near wallet go ahead and login to your wallet with your cli and follow the on-screen prompts

```=bash
near login
```

Once your logged in you have to deploy the contract. Make a subaccount with the name of your choosing 

```=bash 
near create-account nft-example.your-account.testnet --masterAccount your-account.testnet --initialBalance 10
```

After you've created your sub account deploy the contract to that sub account, set this variable to your sub account name

```=bash
NFT_CONTRACT_ID=nft-example.your-account.testnet

MAIN_ACCOUNT=your-account.testnet
```

Verify your new variable has the correct value
```=bash
echo $NFT_CONTRACT_ID

echo $MAIN_ACCOUNT
```

### Deploy Your Contract
```=bash
near deploy --accountId $NFT_CONTRACT_ID --wasmFile build/nft.wasm
```

### Initialize Your Contract 

```=bash
near call $NFT_CONTRACT_ID init '{"owner_id": "'$NFT_CONTRACT_ID'"}' --accountId $NFT_CONTRACT_ID
```

### View Contracts Meta Data

```=bash
near view $NFT_CONTRACT_ID nft_metadata
```
### Minting Token

```bash=
near call $NFT_CONTRACT_ID nft_mint '{"token_id": "token-1", "metadata": {"title": "My Non Fungible Team Token", "description": "The Team Most Certainly Goes :)", "media": "https://bafybeiftczwrtyr3k7a2k4vutd3amkwsmaqyhrdzlhvpt33dyjivufqusq.ipfs.dweb.link/goteam-gif.gif"}, "receiver_id": "'$MAIN_ACCOUNT'"}' --accountId $MAIN_ACCOUNT --amount 0.1
```

After you've minted the token go to wallet.testnet.near.org to `your-account.testnet` and look in the collections tab and check out your new sample NFT! 

## View NFT Information

After you've minted your NFT you can make a view call to get a response containing the `token_id` `owner_id` and the `metadata`

```bash=
near view $NFT_CONTRACT_ID nft_token '{"token_id": "token-1"}'
```

## Transfering NFTs

To transfer an NFT go ahead and make another [testnet wallet account](https://wallet.testnet.near.org).

Then run the following
```bash=
MAIN_ACCOUNT_2=your-second-wallet-account.testnet
```

Verify the correct variable names with this

```=bash
echo $NFT_CONTRACT_ID

echo $MAIN_ACCOUNT

echo $MAIN_ACCOUNT_2
```

To initiate the transfer..

```bash=
near call $NFT_CONTRACT_ID nft_transfer '{"receiver_id": "$MAIN_ACCOUNT_2", "token_id": "token-1", "memo": "Go Team :)"}' --accountId $MAIN_ACCOUNT --depositYocto 1
```

In this call you are depositing 1 yoctoNEAR for security and so that the user will be redirected to the NEAR wallet.
'''
'''--- contracts/babel.config.json ---
{
  "plugins": [
    "near-sdk-js/lib/build-tools/near-bindgen-exporter",
    ["@babel/plugin-proposal-decorators", {"version": "legacy"}]
  ],
  "presets": ["@babel/preset-typescript"]
}
'''
'''--- contracts/commands.txt ---
near dev-deploy build/contract.wasm -f && source ./neardev/dev-account.env && near call $CONTRACT_NAME init '{"owner_id": "'$CONTRACT_NAME'"}' --accountId $CONTRACT_NAME && near call $CONTRACT_NAME nft_mint '{"token_id": "token-1", "metadata": {"title": "My Non Fungible Team Token", "description": "The Team Most Certainly Goes :)", "media": "https://bafybeiftczwrtyr3k7a2k4vutd3amkwsmaqyhrdzlhvpt33dyjivufqusq.ipfs.dweb.link/goteam-gif.gif"}, "receiver_id": "'$CONTRACT_NAME'"}' --accountId $CONTRACT_NAME --amount 0.1 

near call $CONTRACT_NAME nft_transfer '{"receiver_id": "benji.fayyr.testnet", "token_id": "token-1"}' --accountId $CONTRACT_NAME --depositYocto 1
'''
'''--- contracts/jsconfig.json ---
{
    "compilerOptions": {
        "experimentalDecorators": true,
    },
    "exclude": [
        "node_modules"
    ],
}
'''
'''--- contracts/package.json ---
{
  "name": "collabrative-art-contracts",
  "private": true,
  "version": "1.0.0",
  "description": "Contract template with near-sdk-js",
  "main": "index.js",
  "type": "module",
  "scripts": {
    "build": "yarn build:nft && yarn build:market",
    "build:nft": "near-sdk-js build src/nft-contract/index.ts build/nft.wasm",
    "build:market": "near-sdk-js build src/market-contract/index.ts build/market.wasm",
    "test": "mocha"
  },
  "author": "Near Inc <hello@nearprotocol.com>",
  "license": "Apache-2.0",
  "devDependencies": {
    "@types/chai": "^4.3.4",
    "@types/mocha": "^10.0.0",
    "chai": "^4.3.7",
    "lodash-es": "^4.17.21",
    "mocha": "^10.1.0",
    "near-sdk-js": "^0.6.0",
    "near-workspaces": "^3.2.2",
    "ts-morph": "^17.0.0",
    "ts-node": "^10.9.1",
    "typescript": "^4.7.4"
  }
}

'''
'''--- contracts/src/market-contract/index.ts ---
import {
  NearBindgen,
  near,
  call,
  view,
  LookupMap,
  UnorderedMap,
  Vector,
  UnorderedSet,
  assert,
  initialize,
} from 'near-sdk-js'
import { assertOneYocto, restoreOwners } from './internal'
import { internalNftOnApprove } from './nft_callbacks'
import {
  internalOffer,
  internalRemoveSale,
  internalResolvePurchase,
  internalUpdatePrice,
  Sale,
} from './sale'
import {
  internalGetSale,
  internalSalesByNftContractId,
  internalSalesByOwnerId,
  internalSupplyByNftContractId,
  internalSupplyByOwnerId,
  internalSupplySales,
} from './sale_views'

/// This spec can be treated like a version of the standard.
export const NFT_METADATA_SPEC = 'nft-1.0.0'

/// This is the name of the NFT standard we're using
export const NFT_STANDARD_NAME = 'nep171'

//the minimum storage to have a sale on the contract.
export const STORAGE_PER_SALE: bigint =
  BigInt(1000) * near.storageByteCost().valueOf()

//every sale will have a unique ID which is `CONTRACT + DELIMITER + TOKEN_ID`
export const DELIMETER = '.'

@NearBindgen({})
export class Contract {
  //keep track of the owner of the contract
  owner_id: string = ''

  /*
        to keep track of the sales, we map the ContractAndTokenId to a Sale. 
        the ContractAndTokenId is the unique identifier for every sale. It is made
        up of the `contract ID + DELIMITER + token ID`
    */
  sales = new UnorderedMap<Sale>('sales')

  //keep track of all the Sale IDs for every account ID
  byOwnerId = new LookupMap<UnorderedSet<string>>('byOwnerId')

  //keep track of all the token IDs for sale for a given contract
  byNftContractId = new LookupMap<UnorderedSet<string>>('byNftContractId')

  //keep track of the storage that accounts have payed
  storageDeposits = new LookupMap<string>('storageDeposits')

  @initialize({ privateFunction: true })
  init({ owner_id }: { owner_id?: string }) {
    if (owner_id) {
      this.owner_id = owner_id
    }
  }

  /*
        STORAGE
    */
  @call({})
  //Allows users to deposit storage. This is to cover the cost of storing sale objects on the contract
  //Optional account ID is to users can pay for storage for other people.
  storage_deposit({ account_id }: { account_id?: string }) {
    //get the account ID to pay for storage for
    let storageAccountId = account_id || near.predecessorAccountId()

    //get the deposit value which is how much the user wants to add to their storage
    let deposit = near.attachedDeposit().valueOf()

    //make sure the deposit is greater than or equal to the minimum storage for a sale
    assert(
      deposit >= STORAGE_PER_SALE,
      `Requires minimum deposit of ${STORAGE_PER_SALE}`,
    )

    //get the balance of the account (if the account isn't in the map we default to a balance of 0)
    let balance: string =
      (this.storageDeposits.get(storageAccountId) as string) || '0'
    //add the deposit to their balance
    let newBalance = BigInt(balance) + deposit
    //insert the balance back into the map for that account ID
    this.storageDeposits.set(storageAccountId, newBalance.toString())
  }

  @call({})
  //Allows users to withdraw any excess storage that they're not using. Say Bob pays 0.01N for 1 sale
  //Alice then buys Bob's token. This means bob has paid 0.01N for a sale that's no longer on the marketplace
  //Bob could then withdraw this 0.01N back into his account.
  storage_withdraw() {
    //make sure the user attaches exactly 1 yoctoNEAR for security purposes.
    //this will redirect them to the NEAR wallet (or requires a full access key).
    assertOneYocto()

    //the account to withdraw storage to is always the function caller
    let ownerId = near.predecessorAccountId()
    //get the amount that the user has by removing them from the map. If they're not in the map, default to 0
    let amount: string = (this.storageDeposits.remove(ownerId) as string) || '0'

    //how many sales is that user taking up currently. This returns a set
    let sales = restoreOwners(this.byOwnerId.get(ownerId))
    //get the length of that set.
    let len = 0
    if (sales != null) {
      len = sales.length
    }

    //how much NEAR is being used up for all the current sales on the account
    let diff = BigInt(len) * STORAGE_PER_SALE
    //the excess to withdraw is the total storage paid - storage being used up.
    let amountLeft = BigInt(amount) - diff

    //if that excess to withdraw is > 0, we transfer the amount to the user.
    if (amountLeft > 0) {
      const promise = near.promiseBatchCreate(ownerId)
      near.promiseBatchActionTransfer(promise, amountLeft)
    }

    //we need to add back the storage being used up into the map if it's greater than 0.
    //this is so that if the user had 500 sales on the market, we insert that value here so
    //if those sales get taken down, the user can then go and withdraw 500 sales worth of storage.
    if (diff > 0) {
      this.storageDeposits.set(ownerId, diff.toString())
    }
  }

  @view({})
  //return the minimum storage for 1 sale
  storage_minimum_balance(): string {
    return STORAGE_PER_SALE.toString()
  }

  @view({})
  //return how much storage an account has paid for
  storage_balance_of({ account_id }: { account_id: string }): string {
    return (this.storageDeposits.get(account_id) as string) || '0'
  }

  /*
        SALES
    */
  @call({})
  //removes a sale from the market.
  remove_sale({
    nft_contract_id,
    token_id,
  }: {
    nft_contract_id: string
    token_id: string
  }) {
    return internalRemoveSale({
      contract: this,
      nftContractId: nft_contract_id,
      tokenId: token_id,
    })
  }

  @call({})
  //updates the price for a sale on the market
  update_price({
    nft_contract_id,
    token_id,
    price,
  }: {
    nft_contract_id: string
    token_id: string
    price: string
  }) {
    return internalUpdatePrice({
      contract: this,
      nftContractId: nft_contract_id,
      tokenId: token_id,
      price: price,
    })
  }

  @call({})
  //place an offer on a specific sale. The sale will go through as long as your deposit is greater than or equal to the list price
  offer({
    nft_contract_id,
    token_id,
  }: {
    nft_contract_id: string
    token_id: string
  }) {
    return internalOffer({
      contract: this,
      nftContractId: nft_contract_id,
      tokenId: token_id,
    })
  }

  @call({})
  //place an offer on a specific sale. The sale will go through as long as your deposit is greater than or equal to the list price
  resolve_purchase({ buyer_id, price }: { buyer_id: string; price: string }) {
    return internalResolvePurchase({ buyerId: buyer_id, price: price })
  }

  /*
        SALE VIEWS
    */
  @view({})
  //returns the number of sales the marketplace has up (as a string)
  get_supply_sales(): string {
    return internalSupplySales({ contract: this })
  }

  @view({})
  //returns the number of sales for a given account (result is a string)
  get_supply_by_owner_id({ account_id }: { account_id: string }): string {
    return internalSupplyByOwnerId({ contract: this, accountId: account_id })
  }

  @view({})
  //returns paginated sale objects for a given account. (result is a vector of sales)
  get_sales_by_owner_id({
    account_id,
    from_index,
    limit,
  }: {
    account_id: string
    from_index?: string
    limit?: number
  }): Sale[] {
    return internalSalesByOwnerId({
      contract: this,
      accountId: account_id,
      fromIndex: from_index,
      limit: limit,
    })
  }

  @view({})
  //returns paginated sale objects for a given account. (result is a vector of sales)
  get_supply_by_nft_contract_id({
    nft_contract_id,
  }: {
    nft_contract_id: string
  }): string {
    return internalSupplyByNftContractId({
      contract: this,
      nftContractId: nft_contract_id,
    })
  }

  @view({})
  //returns paginated sale objects associated with a given nft contract. (result is a vector of sales)
  get_sales_by_nft_contract_id({
    nft_contract_id,
    from_index,
    limit,
  }: {
    nft_contract_id: string
    from_index?: string
    limit?: number
  }): Sale[] {
    return internalSalesByNftContractId({
      contract: this,
      accountId: nft_contract_id,
      fromIndex: from_index,
      limit: limit,
    })
  }

  @view({})
  //get a sale information for a given unique sale ID (contract + DELIMITER + token ID)
  get_sale({ nft_contract_token }: { nft_contract_token: string }): Sale {
    return internalGetSale({
      contract: this,
      nftContractToken: nft_contract_token,
    })
  }

  /*
        APPROVALS
    */
  @call({})
  /// where we add the sale because we know nft owner can only call nft_approve
  nft_on_approve({
    token_id,
    owner_id,
    approval_id,
    msg,
  }: {
    token_id: string
    owner_id: string
    approval_id: number
    msg: string
  }) {
    return internalNftOnApprove({
      contract: this,
      tokenId: token_id,
      ownerId: owner_id,
      approvalId: approval_id,
      msg: msg,
    })
  }
}

'''
'''--- contracts/src/market-contract/internal.ts ---
import { assert, near, UnorderedSet } from 'near-sdk-js'
import { Contract, DELIMETER } from '.'
import { Sale } from './sale'

export function restoreOwners(collection: UnorderedSet<string>) {
  if (collection == null) {
    return null
  }
  return UnorderedSet.reconstruct(collection)
}

//used to make sure the user attached exactly 1 yoctoNEAR
export function assertOneYocto() {
  assert(
    near.attachedDeposit().toString() === '1',
    'Requires attached deposit of exactly 1 yoctoNEAR',
  )
}

//internal method for removing a sale from the market. This returns the previously removed sale object
export function internallyRemoveSale(
  contract: Contract,
  nftContractId: string,
  tokenId: string,
): Sale {
  //get the unique sale ID (contract + DELIMITER + token ID)
  let contractAndTokenId = `${nftContractId}${DELIMETER}${tokenId}`
  //get the sale object by removing the unique sale ID. If there was no sale, panic
  let sale = contract.sales.remove(contractAndTokenId) as Sale
  if (sale == null) {
    throw 'no sale'
  }

  //get the set of sales for the sale's owner. If there's no sale, panic.
  let byOwnerId = restoreOwners(contract.byOwnerId.get(sale.owner_id))
  if (byOwnerId == null) {
    throw 'no sales by owner'
  }
  //remove the unique sale ID from the set of sales
  byOwnerId.remove(contractAndTokenId)

  //if the set of sales is now empty after removing the unique sale ID, we simply remove that owner from the map
  if (byOwnerId.isEmpty()) {
    contract.byOwnerId.remove(sale.owner_id)
    //if the set of sales is not empty after removing, we insert the set back into the map for the owner
  } else {
    contract.byOwnerId.set(sale.owner_id, byOwnerId)
  }

  //get the set of token IDs for sale for the nft contract ID. If there's no sale, panic.
  let byNftContractId = restoreOwners(
    contract.byNftContractId.get(nftContractId),
  )
  if (byNftContractId == null) {
    throw 'no sales by nft contract'
  }

  //remove the token ID from the set
  byNftContractId.remove(tokenId)
  //if the set is now empty after removing the token ID, we remove that nft contract ID from the map
  if (byNftContractId.isEmpty()) {
    contract.byNftContractId.remove(nftContractId)
    //if the set is not empty after removing, we insert the set back into the map for the nft contract ID
  } else {
    contract.byNftContractId.set(nftContractId, byNftContractId)
  }

  //return the sale object
  return sale
}

'''
'''--- contracts/src/market-contract/nft_callbacks.ts ---
import { assert, near, UnorderedSet } from 'near-sdk-js'
import { Contract, DELIMETER } from '.'
import { Sale } from './sale'
import { internalSupplyByOwnerId } from './sale_views'

/// where we add the sale because we know nft owner can only call nft_approve
export function internalNftOnApprove({
  contract,
  tokenId,
  ownerId,
  approvalId,
  msg,
}: {
  contract: Contract
  tokenId: string
  ownerId: string
  approvalId: number
  msg: string
}) {
  // get the contract ID which is the predecessor
  let contractId = near.predecessorAccountId()
  //get the signer which is the person who initiated the transaction
  let signerId = near.signerAccountId()

  //make sure that the signer isn't the predecessor. This is so that we're sure
  //this was called via a cross-contract call
  assert(
    signerId != contractId,
    'this function can only be called via a cross-contract call',
  )
  //make sure the owner ID is the signer.
  assert(ownerId == signerId, 'only the owner of the token can approve it')

  //we need to enforce that the user has enough storage for 1 EXTRA sale.
  let storageAmount = contract.storage_minimum_balance()
  //get the total storage paid by the owner
  let ownerPaidStorage = contract.storageDeposits.get(signerId) || BigInt(0)
  //get the storage required which is simply the storage for the number of sales they have + 1
  let signerStorageRequired =
    (BigInt(internalSupplyByOwnerId({ contract, accountId: signerId })) +
      BigInt(1)) *
    BigInt(storageAmount)

  //make sure that the total paid is >= the required storage
  assert(
    ownerPaidStorage >= signerStorageRequired,
    'the owner does not have enough storage to approve this token',
  )

  //if all these checks pass we can create the sale conditions object.
  let saleConditions = JSON.parse(msg)
  if (
    !saleConditions.hasOwnProperty('sale_conditions') ||
    Object.keys(saleConditions).length != 1
  ) {
    throw 'invalid sale conditions'
  }
  //create the unique sale ID which is the contract + DELIMITER + token ID
  let contractAndTokenId = `${contractId}${DELIMETER}${tokenId}`

  //insert the key value pair into the sales map. Key is the unique ID. value is the sale object
  contract.sales.set(
    contractAndTokenId,
    new Sale({
      ownerId: ownerId, //owner of the sale / token
      approvalId: approvalId, //approval ID for that token that was given to the market
      nftContractId: contractId, //NFT contract the token was minted on
      tokenId: tokenId, //the actual token ID
      saleConditions: saleConditions.sale_conditions, //the sale conditions
    }),
  )

  //Extra functionality that populates collections necessary for the view calls
  //get the sales by owner ID for the given owner. If there are none, we create a new empty set
  let byOwnerId =
    (contract.byOwnerId.get(ownerId) as UnorderedSet<string>) ||
    new UnorderedSet(ownerId)
  //insert the unique sale ID into the set
  byOwnerId.set(contractAndTokenId)
  //insert that set back into the collection for the owner
  contract.byOwnerId.set(ownerId, byOwnerId)

  //get the token IDs for the given nft contract ID. If there are none, we create a new empty set
  let byNftContractId =
    (contract.byNftContractId.get(contractId) as UnorderedSet<string>) ||
    new UnorderedSet(contractId)
  //insert the token ID into the set
  byNftContractId.set(tokenId)
  //insert the set back into the collection for the given nft contract ID
  contract.byNftContractId.set(contractId, byNftContractId)
}

'''
'''--- contracts/src/market-contract/sale.ts ---
import { assert, bytes, near } from 'near-sdk-js'
import { Contract, DELIMETER } from '.'
import { assertOneYocto, internallyRemoveSale } from './internal'

//GAS constants to attach to calls
const GAS_FOR_ROYALTIES = 115_000_000_000_000
const GAS_FOR_NFT_TRANSFER = 15_000_000_000_000

//struct that holds important information about each sale on the market
export class Sale {
  //owner of the sale
  owner_id: string
  //market contract's approval ID to transfer the token on behalf of the owner
  approval_id: number
  //nft contract where the token was minted
  nft_contract_id: string
  //actual token ID for sale
  token_id: String
  //sale price in yoctoNEAR that the token is listed for
  sale_conditions: string

  constructor({
    ownerId,
    approvalId,
    nftContractId,
    tokenId,
    saleConditions,
  }: {
    ownerId: string
    approvalId: number
    nftContractId: string
    tokenId: String
    saleConditions: string
  }) {
    this.owner_id = ownerId
    this.approval_id = approvalId
    this.nft_contract_id = nftContractId
    this.token_id = tokenId
    this.sale_conditions = saleConditions
  }
}

//removes a sale from the market.
export function internalRemoveSale({
  contract,
  nftContractId,
  tokenId,
}: {
  contract: Contract
  nftContractId: string
  tokenId: string
}) {
  //assert that the user has attached exactly 1 yoctoNEAR (for security reasons)
  assertOneYocto()

  //get the sale object as the return value from removing the sale internally
  let sale = internallyRemoveSale(contract, nftContractId, tokenId)

  //get the predecessor of the call and make sure they're the owner of the sale
  let ownerId = near.predecessorAccountId()

  //assert that the owner of the sale is the same as the caller of the function
  assert(ownerId == sale.owner_id, 'only the owner of the sale can remove it')
}

//updates the price for a sale on the market
export function internalUpdatePrice({
  contract,
  nftContractId,
  tokenId,
  price,
}: {
  contract: Contract
  nftContractId: string
  tokenId: string
  price: string
}) {
  //assert that the user has attached exactly 1 yoctoNEAR (for security reasons)
  assertOneYocto()

  //create the unique sale ID from the nft contract and token
  let contractAndTokenId = `${nftContractId}${DELIMETER}${tokenId}`

  //get the sale object from the unique sale ID. If there is no token, panic.
  let sale = contract.sales.get(contractAndTokenId) as Sale
  if (sale == null) {
    throw 'no sale'
  }

  assert(
    near.predecessorAccountId() == sale.owner_id,
    'only the owner of the sale can update it',
  )
  //set the sale conditions equal to the passed in price
  sale.sale_conditions = price
  //insert the sale back into the map for the unique sale ID
  contract.sales.set(contractAndTokenId, sale)
}

//place an offer on a specific sale. The sale will go through as long as your deposit is greater than or equal to the list price
export function internalOffer({
  contract,
  nftContractId,
  tokenId,
}: {
  contract: Contract
  nftContractId: string
  tokenId: string
}) {
  //get the attached deposit and make sure it's greater than 0
  let deposit = near.attachedDeposit().valueOf()
  assert(deposit > 0, 'deposit must be greater than 0')

  //get the unique sale ID (contract + DELIMITER + token ID)
  let contractAndTokenId = `${nftContractId}${DELIMETER}${tokenId}`
  //get the sale object from the unique sale ID. If the sale doesn't exist, panic.
  let sale = contract.sales.get(contractAndTokenId) as Sale
  if (sale == null) {
    throw 'no sale'
  }

  //get the buyer ID which is the person who called the function and make sure they're not the owner of the sale
  let buyerId = near.predecessorAccountId()
  assert(buyerId != sale.owner_id, "you can't offer on your own sale")

  //get the u128 price of the token (dot 0 converts from U128 to u128)
  let price = BigInt(sale.sale_conditions)
  //make sure the deposit is greater than the price
  assert(deposit >= price, 'deposit must be greater than or equal to price')

  //process the purchase (which will remove the sale, transfer and get the payout from the nft contract, and then distribute royalties)
  processPurchase({
    contract,
    nftContractId,
    tokenId,
    price: deposit.toString(),
    buyerId,
  })
}

//private function used when a sale is purchased.
//this will remove the sale, transfer and get the payout from the nft contract, and then distribute royalties
export function processPurchase({
  contract,
  nftContractId,
  tokenId,
  price,
  buyerId,
}: {
  contract: Contract
  nftContractId: string
  tokenId: string
  price: string
  buyerId: string
}) {
  //get the sale object by removing the sale
  let sale = internallyRemoveSale(contract, nftContractId, tokenId)

  //initiate a cross contract call to the nft contract. This will transfer the token to the buyer and return
  //a payout object used for the market to distribute funds to the appropriate accounts.
  const promise = near.promiseBatchCreate(nftContractId)
  near.promiseBatchActionFunctionCall(
    promise,
    'nft_transfer_payout',
    bytes(
      JSON.stringify({
        receiver_id: buyerId, //purchaser (person to transfer the NFT to)
        token_id: tokenId, //token ID to transfer
        approval_id: sale.approval_id, //market contract's approval ID in order to transfer the token on behalf of the owner
        memo: 'payout from market', //memo (to include some context)
        /*
                    the price that the token was purchased for. This will be used in conjunction with the royalty percentages
                    for the token in order to determine how much money should go to which account. 
                */
        balance: price,
        max_len_payout: 10, //the maximum amount of accounts the market can payout at once (this is limited by GAS)
      }),
    ),
    1, // 1 yoctoNEAR
    GAS_FOR_NFT_TRANSFER,
  )

  //after the transfer payout has been initiated, we resolve the promise by calling our own resolve_purchase function.
  //resolve purchase will take the payout object returned from the nft_transfer_payout and actually pay the accounts
  near.promiseThen(
    promise,
    near.currentAccountId(),
    'resolve_purchase',
    bytes(
      JSON.stringify({
        buyer_id: buyerId, //the buyer and price are passed in incase something goes wrong and we need to refund the buyer
        price: price,
      }),
    ),
    0, // no deposit
    GAS_FOR_ROYALTIES,
  )
  return near.promiseReturn(promise)
}

/*
    private method used to resolve the promise when calling nft_transfer_payout. This will take the payout object and 
    check to see if it's authentic and there's no problems. If everything is fine, it will pay the accounts. If there's a problem,
    it will refund the buyer for the price. 
*/
export function internalResolvePurchase({
  buyerId,
  price,
}: {
  buyerId: string
  price: string
}) {
  assert(
    near.currentAccountId() === near.predecessorAccountId(),
    'Only the contract itself can call this method',
  )

  // checking for payout information returned from the nft_transfer_payout method
  let result = near.promiseResult(0)
  let payout = null
  if (typeof result === 'string') {
    //if we set the payout_option to None, that means something went wrong and we should refund the buyer

    try {
      let payoutOption = JSON.parse(result)
      if (
        Object.keys(payoutOption.payout).length > 10 ||
        Object.keys(payoutOption.payout).length < 1
      ) {
        //we'll check if length of the payout object is > 10 or it's empty. In either case, we return None
        throw 'Cannot have more than 10 royalties'
        //if the payout object is the correct length, we move forward
      } else {
        //we'll keep track of how much the nft contract wants us to payout. Starting at the full price payed by the buyer
        let remainder = BigInt(price)
        //loop through the payout and subtract the values from the remainder.
        Object.entries(payoutOption.payout).forEach(([key, value], index) => {
          remainder = remainder - BigInt(value as string)
        })

        //Check to see if the NFT contract sent back a faulty payout that requires us to pay more or too little.
        //The remainder will be 0 if the payout summed to the total price. The remainder will be 1 if the royalties
        //we something like 3333 + 3333 + 3333.
        if (remainder == BigInt(0) || remainder == BigInt(1)) {
          //set the payout because nothing went wrong
          payout = payoutOption.payout
        } else {
          //if the remainder was anything but 1 or 0, we return None
          throw 'Payout is not correct'
        }
      }
    } catch (e) {
      near.log(`error parsing payout object ${result}`)
      payout = null
    }
  }

  //if the payout was null, we refund the buyer for the price they payed and return
  if (payout == null) {
    const promise = near.promiseBatchCreate(buyerId)
    near.promiseBatchActionTransfer(promise, BigInt(price))
    return price
  }
  // NEAR payouts
  for (let [key, value] of Object.entries(payout)) {
    const promise = near.promiseBatchCreate(key)
    near.promiseBatchActionTransfer(promise, BigInt(value as string))
  }

  //return the price payout out
  return price
}

'''
'''--- contracts/src/market-contract/sale_views.ts ---
import { Contract } from '.'
import { restoreOwners } from './internal'
import { Sale } from './sale'

//returns the number of sales the marketplace has up (as a string)
export function internalSupplySales({
  contract,
}: {
  contract: Contract
}): string {
  //returns the sales object length wrapped as a string
  return contract.sales.length.toString()
}

//returns the number of sales for a given account (result is a string)
export function internalSupplyByOwnerId({
  contract,
  accountId,
}: {
  contract: Contract
  accountId: string
}): string {
  //get the set of sales for the given owner Id
  let byOwnerId = restoreOwners(contract.byOwnerId.get(accountId))
  //if there as some set, we return the length but if there wasn't a set, we return 0
  if (byOwnerId == null) {
    return '0'
  }

  return byOwnerId.length.toString()
}

//returns paginated sale objects for a given account. (result is a vector of sales)
export function internalSalesByOwnerId({
  contract,
  accountId,
  fromIndex,
  limit,
}: {
  contract: Contract
  accountId: string
  fromIndex?: string
  limit?: number
}): Sale[] {
  //get the set of token IDs for sale for the given account ID
  let tokenSet = restoreOwners(contract.byOwnerId.get(accountId))

  //if there was no set, we return an empty array
  if (tokenSet == null) {
    return []
  }

  //where to start pagination - if we have a fromIndex, we'll use that - otherwise start from 0 index
  let start = fromIndex ? parseInt(fromIndex) : 0
  //take the first "limit" elements in the array. If we didn't specify a limit, use 50
  let max = limit ? limit : 50

  let keys = tokenSet.toArray()
  let sales: Sale[] = []
  for (let i = start; i < max; i++) {
    if (i >= keys.length) {
      break
    }
    let sale = contract.sales.get(keys[i]) as Sale
    if (sale != null) {
      sales.push(sale)
    }
  }
  return sales
}

//get the number of sales for an nft contract. (returns a string)
export function internalSupplyByNftContractId({
  contract,
  nftContractId,
}: {
  contract: Contract
  nftContractId: string
}): string {
  //get the set of tokens for associated with the given nft contract
  let byNftContractId = restoreOwners(
    contract.byNftContractId.get(nftContractId),
  )
  //if there as some set, we return the length but if there wasn't a set, we return 0
  if (byNftContractId == null) {
    return '0'
  }

  return byNftContractId.length.toString()
}

//returns paginated sale objects associated with a given nft contract. (result is a vector of sales)
export function internalSalesByNftContractId({
  contract,
  accountId,
  fromIndex,
  limit,
}: {
  contract: Contract
  accountId: string
  fromIndex?: string
  limit?: number
}): Sale[] {
  //get the set of token IDs for sale for the given contract ID
  let tokenSet = restoreOwners(contract.byNftContractId.get(accountId))

  //if there was no set, we return an empty array
  if (tokenSet == null) {
    return []
  }

  //where to start pagination - if we have a fromIndex, we'll use that - otherwise start from 0 index
  let start = fromIndex ? parseInt(fromIndex) : 0
  //take the first "limit" elements in the array. If we didn't specify a limit, use 50
  let max = limit ? limit : 50

  let keys = tokenSet.toArray()
  let sales: Sale[] = []
  for (let i = start; i < max; i++) {
    if (i >= keys.length) {
      break
    }
    let sale = contract.sales.get(keys[i]) as Sale
    if (sale != null) {
      sales.push(sale)
    }
  }
  return sales
}

//get a sale information for a given unique sale ID (contract + DELIMITER + token ID)
export function internalGetSale({
  contract,
  nftContractToken,
}: {
  contract: Contract
  nftContractToken: string
}): Sale {
  //try and get the sale object for the given unique sale ID. Will return an option since
  //we're not guaranteed that the unique sale ID passed in will be valid.n);
  return contract.sales.get(nftContractToken) as Sale
}

'''
'''--- contracts/src/nft-contract/approval.ts ---
import { assert, bytes, near } from 'near-sdk-js'
import { Contract } from '.'
import {
  assertAtLeastOneYocto,
  assertOneYocto,
  bytesForApprovedAccountId,
  refundApprovedAccountIds,
  refundApprovedAccountIdsIter,
  refundDeposit,
} from './internal'
import { Token } from './metadata'

const GAS_FOR_NFT_ON_APPROVE = 35_000_000_000_000

//approve an account ID to transfer a token on your behalf
export function internalNftApprove({
  contract,
  tokenId,
  accountId,
  msg,
}: {
  contract: Contract
  tokenId: string
  accountId: string
  msg: string
}) {
  /*
        assert at least one yocto for security reasons - this will cause a redirect to the NEAR wallet.
        The user needs to attach enough to pay for storage on the contract
    */
  assertAtLeastOneYocto()

  //get the token object from the token ID
  let token = contract.tokensById.get(tokenId) as Token
  if (token == null) {
    throw 'no token'
  }
  //make sure that the person calling the function is the owner of the token
  assert(
    near.predecessorAccountId() === token.owner_id,
    'Predecessor must be the token owner',
  )

  //get the next approval ID if we need a new approval
  let approvalId = token.next_approval_id

  //check if the account has been approved already for this token
  let isNewApproval = token.approved_account_ids.hasOwnProperty(accountId)
  token.approved_account_ids[accountId] = approvalId

  //if it was a new approval, we need to calculate how much storage is being used to add the account.
  let storageUsed = isNewApproval ? bytesForApprovedAccountId(accountId) : 0

  //increment the token's next approval ID by 1
  token.next_approval_id += 1
  //insert the token back into the tokens_by_id collection
  contract.tokensById.set(tokenId, token)

  //refund any excess storage attached by the user. If the user didn't attach enough, panic.
  refundDeposit(BigInt(storageUsed))

  //if some message was passed into the function, we initiate a cross contract call on the
  //account we're giving access to.
  if (msg != null) {
    // Initiating receiver's call and the callback
    const promise = near.promiseBatchCreate(accountId)
    near.promiseBatchActionFunctionCall(
      promise,
      'nft_on_approve',
      bytes(
        JSON.stringify({
          token_id: tokenId,
          owner_id: token.owner_id,
          approval_id: approvalId,
          msg,
        }),
      ),
      0, // no deposit
      GAS_FOR_NFT_ON_APPROVE,
    )

    near.promiseReturn(promise)
  }
}

//check if the passed in account has access to approve the token ID
export function internalNftIsApproved({
  contract,
  tokenId,
  approvedAccountId,
  approvalId,
}: {
  contract: Contract
  tokenId: string
  approvedAccountId: string
  approvalId: number
}) {
  //get the token object from the token_id
  let token = contract.tokensById.get(tokenId) as Token
  if (token == null) {
    throw 'no token'
  }

  //get the approval number for the passed in account ID
  let approval = token.approved_account_ids[approvedAccountId]

  //if there was no approval ID found for the account ID, we simply return false
  if (approval == null) {
    return false
  }

  //if there was some approval ID found for the account ID
  //if there was no approval_id passed into the function, we simply return true
  if (approvalId == null) {
    return true
  }

  //if a specific approval_id was passed into the function
  //return if the approval ID passed in matches the actual approval ID for the account
  return approvalId == approval
}

//revoke a specific account from transferring the token on your behalf
export function internalNftRevoke({
  contract,
  tokenId,
  accountId,
}: {
  contract: Contract
  tokenId: string
  accountId: string
}) {
  //assert that the user attached exactly 1 yoctoNEAR for security reasons
  assertOneYocto()

  //get the token object using the passed in token_id
  let token = contract.tokensById.get(tokenId) as Token
  if (token == null) {
    throw 'no token'
  }

  //get the caller of the function and assert that they are the owner of the token
  let predecessorAccountId = near.predecessorAccountId()
  assert(predecessorAccountId == token.owner_id, 'only token owner can revoke')

  //if the account ID was in the token's approval, we remove it
  if (token.approved_account_ids.hasOwnProperty(accountId)) {
    delete token.approved_account_ids[accountId]

    //refund the funds released by removing the approved_account_id to the caller of the function
    refundApprovedAccountIdsIter(predecessorAccountId, [accountId])

    //insert the token back into the tokens_by_id collection with the account_id removed from the approval list
    contract.tokensById.set(tokenId, token)
  }
}

//revoke all accounts from transferring the token on your behalf
export function internalNftRevokeAll({
  contract,
  tokenId,
}: {
  contract: Contract
  tokenId: string
}) {
  //assert that the caller attached exactly 1 yoctoNEAR for security
  assertOneYocto()

  //get the token object from the passed in token ID
  let token = contract.tokensById.get(tokenId) as Token
  if (token == null) {
    throw 'no token'
  }

  //get the caller and make sure they are the owner of the tokens
  let predecessorAccountId = near.predecessorAccountId()
  assert(predecessorAccountId == token.owner_id, 'only token owner can revoke')

  //only revoke if the approved account IDs for the token is not empty
  if (
    token.approved_account_ids &&
    Object.keys(token.approved_account_ids).length === 0 &&
    Object.getPrototypeOf(token.approved_account_ids) === Object.prototype
  ) {
    //refund the approved account IDs to the caller of the function
    refundApprovedAccountIds(predecessorAccountId, token.approved_account_ids)
    //clear the approved account IDs
    token.approved_account_ids = {}
    //insert the token back into the tokens_by_id collection with the approved account IDs cleared
    contract.tokensById.set(tokenId, token)
  }
}

'''
'''--- contracts/src/nft-contract/enumeration.ts ---
import { Contract } from '.'
import { restoreOwners } from './internal'
import { JsonToken } from './metadata'
import { internalNftToken } from './nft_core'

//Query for the total supply of NFTs on the contract
export function internalTotalSupply({
  contract,
}: {
  contract: Contract
}): number {
  //return the length of the token metadata by ID
  return contract.tokenMetadataById.length
}

//Query for nft tokens on the contract regardless of the owner using pagination
export function internalNftTokens({
  contract,
  fromIndex,
  limit,
}: {
  contract: Contract
  fromIndex?: string
  limit?: number
}): JsonToken[] {
  let tokens = []

  //where to start pagination - if we have a fromIndex, we'll use that - otherwise start from 0 index
  let start = fromIndex ? parseInt(fromIndex) : 0
  //take the first "limit" elements in the array. If we didn't specify a limit, use 50
  let max = limit ? limit : 50

  let keys = contract.tokenMetadataById.toArray()
  // Paginate through the keys using the fromIndex and limit
  for (let i = start; i < keys.length && i < start + max; i++) {
    // get the token object from the keys
    let jsonToken = internalNftToken({ contract, tokenId: keys[i][0] })
    tokens.push(jsonToken)
  }
  return tokens
}

//get the total supply of NFTs for a given owner
export function internalSupplyForOwner({
  contract,
  accountId,
}: {
  contract: Contract
  accountId: string
}): number {
  //get the set of tokens for the passed in owner
  let tokens = restoreOwners(contract.tokensPerOwner.get(accountId))
  //if there isn't a set of tokens for the passed in account ID, we'll return 0
  if (tokens == null) {
    return 0
  }

  //if there is some set of tokens, we'll return the length
  return tokens.length
}

//Query for all the tokens for an owner
export function internalTokensForOwner({
  contract,
  accountId,
  fromIndex,
  limit,
}: {
  contract: Contract
  accountId: string
  fromIndex?: string
  limit?: number
}): JsonToken[] {
  //get the set of tokens for the passed in owner
  let tokenSet = restoreOwners(contract.tokensPerOwner.get(accountId))

  //if there isn't a set of tokens for the passed in account ID, we'll return 0
  if (tokenSet == null) {
    return []
  }

  //where to start pagination - if we have a fromIndex, we'll use that - otherwise start from 0 index
  let start = fromIndex ? parseInt(fromIndex) : 0
  //take the first "limit" elements in the array. If we didn't specify a limit, use 50
  let max = limit ? limit : 50

  let keys = tokenSet.toArray()
  let tokens: JsonToken[] = []
  for (let i = start; i < max; i++) {
    if (i >= keys.length) {
      break
    }
    let token = internalNftToken({ contract, tokenId: keys[i] })
    tokens.push(token)
  }
  return tokens
}

'''
'''--- contracts/src/nft-contract/index.ts ---
import {
  call,
  initialize,
  LookupMap,
  NearBindgen,
  UnorderedMap,
  UnorderedSet,
  view,
} from 'near-sdk-js'
import {
  internalNftApprove,
  internalNftIsApproved,
  internalNftRevoke,
  internalNftRevokeAll,
} from './approval'
import {
  internalNftTokens,
  internalSupplyForOwner,
  internalTokensForOwner,
  internalTotalSupply,
} from './enumeration'
import {
  internalNftMetadata,
  NFTContractMetadata,
  Token,
  TokenMetadata,
} from './metadata'
import { internalMint } from './mint'
import {
  internalNftToken,
  internalNftTransfer,
  internalNftTransferCall,
  internalResolveTransfer,
} from './nft_core'
import { internalNftPayout, internalNftTransferPayout } from './royalty'

/// This spec can be treated like a version of the standard.
export const NFT_METADATA_SPEC = 'nft-1.0.0'

/// This is the name of the NFT standard we're using
export const NFT_STANDARD_NAME = 'nep171'

@NearBindgen({})
export class Contract {
  owner_id: string = ''
  tokensPerOwner = new LookupMap<UnorderedSet<string>>('tokensPerOwner')
  tokensById = new LookupMap<Token>('tokensById')
  tokenMetadataById = new UnorderedMap<TokenMetadata>('tokenMetadataById')
  metadata: NFTContractMetadata = {
    spec: 'nft-1.0.0',
    name: 'NFT Tutorial Contract',
    symbol: 'GOTEAM',
  }

  @initialize({ privateFunction: true })
  init({ owner_id }: { owner_id?: string }) {
    if (owner_id) {
      this.owner_id = owner_id
    }
  }

  /*
        MINT
    */
  @call({ payableFunction: true })
  nft_mint({
    token_id,
    metadata,
    receiver_id,
    perpetual_royalties,
    perpetual_dependencies,
  }) {
    return internalMint({
      contract: this,
      tokenId: token_id,
      metadata: metadata,
      receiverId: receiver_id,
      perpetualRoyalties: perpetual_royalties,
      perpetualDependencies: perpetual_dependencies,
    })
  }

  /*
        CORE
    */
  @view({})
  //get the information for a specific token ID
  nft_token({ token_id }) {
    return internalNftToken({ contract: this, tokenId: token_id })
  }

  @call({})
  //implementation of the nft_transfer method. This transfers the NFT from the current owner to the receiver.
  nft_transfer({ receiver_id, token_id, approval_id, memo }) {
    return internalNftTransfer({
      contract: this,
      receiverId: receiver_id,
      tokenId: token_id,
      approvalId: approval_id,
      memo: memo,
    })
  }

  @call({})
  //implementation of the transfer call method. This will transfer the NFT and call a method on the receiver_id contract
  nft_transfer_call({ receiver_id, token_id, approval_id, memo, msg }) {
    return internalNftTransferCall({
      contract: this,
      receiverId: receiver_id,
      tokenId: token_id,
      approvalId: approval_id,
      memo: memo,
      msg: msg,
    })
  }

  @call({})
  //resolves the cross contract call when calling nft_on_transfer in the nft_transfer_call method
  //returns true if the token was successfully transferred to the receiver_id
  nft_resolve_transfer({
    authorized_id,
    owner_id,
    receiver_id,
    token_id,
    approved_account_ids,
    memo,
  }) {
    return internalResolveTransfer({
      contract: this,
      authorizedId: authorized_id,
      ownerId: owner_id,
      receiverId: receiver_id,
      tokenId: token_id,
      approvedAccountIds: approved_account_ids,
      memo: memo,
    })
  }

  /*
        APPROVALS
    */
  @view({})
  //check if the passed in account has access to approve the token ID
  nft_is_approved({ token_id, approved_account_id, approval_id }) {
    return internalNftIsApproved({
      contract: this,
      tokenId: token_id,
      approvedAccountId: approved_account_id,
      approvalId: approval_id,
    })
  }

  @call({})
  //approve an account ID to transfer a token on your behalf
  nft_approve({ token_id, account_id, msg }) {
    return internalNftApprove({
      contract: this,
      tokenId: token_id,
      accountId: account_id,
      msg: msg,
    })
  }

  /*
        ROYALTY
    */

  @view({})
  //calculates the payout for a token given the passed in balance. This is a view method
  nft_payout({ token_id, balance, max_len_payout }) {
    return internalNftPayout({
      contract: this,
      tokenId: token_id,
      balance: balance,
      maxLenPayout: max_len_payout,
    })
  }

  @call({})
  //transfers the token to the receiver ID and returns the payout object that should be payed given the passed in balance.
  nft_transfer_payout({
    receiver_id,
    token_id,
    approval_id,
    memo,
    balance,
    max_len_payout,
  }) {
    return internalNftTransferPayout({
      contract: this,
      receiverId: receiver_id,
      tokenId: token_id,
      approvalId: approval_id,
      memo: memo,
      balance: balance,
      maxLenPayout: max_len_payout,
    })
  }

  @call({})
  //approve an account ID to transfer a token on your behalf
  nft_revoke({ token_id, account_id }) {
    return internalNftRevoke({
      contract: this,
      tokenId: token_id,
      accountId: account_id,
    })
  }

  @call({})
  //approve an account ID to transfer a token on your behalf
  nft_revoke_all({ token_id }) {
    return internalNftRevokeAll({ contract: this, tokenId: token_id })
  }

  /*
        ENUMERATION
    */
  @view({})
  //Query for the total supply of NFTs on the contract
  nft_total_supply() {
    return internalTotalSupply({ contract: this })
  }

  @view({})
  //Query for nft tokens on the contract regardless of the owner using pagination
  nft_tokens({ from_index, limit }) {
    return internalNftTokens({
      contract: this,
      fromIndex: from_index,
      limit: limit,
    })
  }

  @view({})
  //get the total supply of NFTs for a given owner
  nft_tokens_for_owner({ account_id, from_index, limit }) {
    return internalTokensForOwner({
      contract: this,
      accountId: account_id,
      fromIndex: from_index,
      limit: limit,
    })
  }

  @view({})
  //Query for all the tokens for an owner
  nft_supply_for_owner({ account_id }) {
    return internalSupplyForOwner({ contract: this, accountId: account_id })
  }

  /*
        METADATA
    */
  @view({})
  //Query for all the tokens for an owner
  nft_metadata() {
    return internalNftMetadata({ contract: this })
  }
}

'''
'''--- contracts/src/nft-contract/internal.ts ---
import { assert, near, UnorderedSet } from 'near-sdk-js'
import { Contract, NFT_METADATA_SPEC, NFT_STANDARD_NAME } from '.'
import { Token } from './metadata'

// Gets a collection and deserializes it into a set that can be used.
export function restoreOwners(collection: UnorderedSet<string> | null) {
  if (collection == null) {
    return null
  }

  return UnorderedSet.reconstruct<string>(collection)
}

//convert the royalty percentage and amount to pay into a payout (U128)
export function royaltyToPayout(
  royaltyPercentage: number,
  amountToPay: bigint,
): string {
  return (
    (BigInt(royaltyPercentage) * BigInt(amountToPay)) /
    BigInt(10000)
  ).toString()
}

//refund the storage taken up by passed in approved account IDs and send the funds to the passed in account ID.
export function refundApprovedAccountIdsIter(
  accountId: string,
  approvedAccountIds: string[],
) {
  //get the storage total by going through and summing all the bytes for each approved account IDs
  let storageReleased = approvedAccountIds
    .map(e => bytesForApprovedAccountId(e))
    .reduce((partialSum, a) => partialSum + a, 0)
  let amountToTransfer =
    BigInt(storageReleased) * near.storageByteCost().valueOf()

  // Send the money to the beneficiary (TODO: don't use batch actions)
  const promise = near.promiseBatchCreate(accountId)
  near.promiseBatchActionTransfer(promise, amountToTransfer)
}

//refund a map of approved account IDs and send the funds to the passed in account ID
export function refundApprovedAccountIds(
  accountId: string,
  approvedAccountIds: { [key: string]: number },
) {
  //call the refundApprovedAccountIdsIter with the approved account IDs as keys
  refundApprovedAccountIdsIter(accountId, Object.keys(approvedAccountIds))
}

//refund the initial deposit based on the amount of storage that was used up
export function refundDeposit(storageUsed: bigint) {
  //get how much it would cost to store the information
  let requiredCost = storageUsed * near.storageByteCost().valueOf()
  //get the attached deposit
  let attachedDeposit = near.attachedDeposit().valueOf()

  //make sure that the attached deposit is greater than or equal to the required cost
  assert(
    requiredCost <= attachedDeposit,
    `Must attach ${requiredCost} yoctoNEAR to cover storage`,
  )

  //get the refund amount from the attached deposit - required cost
  let refund = attachedDeposit - requiredCost
  near.log(`Refunding ${refund} yoctoNEAR`)

  //if the refund is greater than 1 yocto NEAR, we refund the predecessor that amount
  if (refund > 1) {
    // Send the money to the beneficiary (TODO: don't use batch actions)
    const promise = near.promiseBatchCreate(near.predecessorAccountId())
    near.promiseBatchActionTransfer(promise, refund)
  }
}

//calculate how many bytes the account ID is taking up
export function bytesForApprovedAccountId(accountId: string): number {
  // The extra 4 bytes are coming from Borsh serialization to store the length of the string.
  return accountId.length + 4 + 8
}

//Assert that the user has attached at least 1 yoctoNEAR (for security reasons and to pay for storage)
export function assertAtLeastOneYocto() {
  assert(
    near.attachedDeposit().valueOf() >= BigInt(1),
    'Requires attached deposit of at least 1 yoctoNEAR',
  )
}

//used to make sure the user attached exactly 1 yoctoNEAR
export function assertOneYocto() {
  assert(
    near.attachedDeposit().toString() === '1',
    'Requires attached deposit of exactly 1 yoctoNEAR',
  )
}

//add a token to the set of tokens an owner has
export function internalAddTokenToOwner(
  contract: Contract,
  accountId: string,
  tokenId: string,
) {
  //get the set of tokens for the given account
  let tokenSet = restoreOwners(contract.tokensPerOwner.get(accountId))

  if (tokenSet == null) {
    //if the account doesn't have any tokens, we create a new unordered set
    tokenSet = new UnorderedSet('tokensPerOwner' + accountId.toString())
  }

  //we insert the token ID into the set
  tokenSet.set(tokenId)

  //we insert that set for the given account ID.
  contract.tokensPerOwner.set(accountId, tokenSet)
}

//remove a token from an owner (internal method and can't be called directly via CLI).
export function internalRemoveTokenFromOwner(
  contract: Contract,
  accountId: string,
  tokenId: string,
) {
  //we get the set of tokens that the owner has
  let tokenSet = restoreOwners(contract.tokensPerOwner.get(accountId))
  //if there is no set of tokens for the owner, we panic with the following message:
  if (tokenSet == null) {
    throw 'Token should be owned by the sender'
  }

  //we remove the the token_id from the set of tokens
  tokenSet.remove(tokenId)

  //if the token set is now empty, we remove the owner from the tokens_per_owner collection
  if (tokenSet.isEmpty()) {
    contract.tokensPerOwner.remove(accountId)
  } else {
    //if the token set is not empty, we simply insert it back for the account ID.
    contract.tokensPerOwner.set(accountId, tokenSet)
  }
}

//transfers the NFT to the receiver_id (internal method and can't be called directly via CLI).
export function internalTransfer(
  contract: Contract,
  senderId: string,
  receiverId: string,
  tokenId: string,
  approvalId: number,
  memo: string,
): Token {
  //get the token object by passing in the token_id
  let token = contract.tokensById.get(tokenId) as Token
  if (token == null) {
    throw 'no token found'
  }

  //if the sender doesn't equal the owner, we check if the sender is in the approval list
  if (senderId != token.owner_id) {
    //if the token's approved account IDs doesn't contain the sender, we panic
    if (!token.approved_account_ids.hasOwnProperty(senderId)) {
      throw 'Unauthorized'
    }

    // If they included an approval_id, check if the sender's actual approval_id is the same as the one included
    if (approvalId != null) {
      //get the actual approval ID
      let actualApprovalId = token.approved_account_ids[senderId]
      //if the sender isn't in the map, we panic
      if (actualApprovalId == null) {
        throw 'Sender is not approved account'
      }

      //make sure that the actual approval ID is the same as the one provided
      assert(
        actualApprovalId == approvalId,
        `The actual approval_id ${actualApprovalId} is different from the given approval_id ${approvalId}`,
      )
    }
  }

  //we make sure that the sender isn't sending the token to themselves
  assert(
    token.owner_id != receiverId,
    'The token owner and the receiver should be different',
  )

  //we remove the token from it's current owner's set
  internalRemoveTokenFromOwner(contract, token.owner_id, tokenId)
  //we then add the token to the receiver_id's set
  internalAddTokenToOwner(contract, receiverId, tokenId)

  //we create a new token struct
  let newToken = new Token({
    ownerId: receiverId,
    //reset the approval account IDs
    approvedAccountIds: {},
    nextApprovalId: token.next_approval_id,
    //we copy over the royalties from the previous token
    royalty: token.royalty,
    dependency: token.dependency,
  })

  //insert that new token into the tokens_by_id, replacing the old entry
  contract.tokensById.set(tokenId, newToken)

  //if there was some memo attached, we log it.
  if (memo != null) {
    near.log(`Memo: ${memo}`)
  }

  // Default the authorized ID to be None for the logs.
  let authorizedId

  //if the approval ID was provided, set the authorized ID equal to the sender
  if (approvalId != null) {
    authorizedId = senderId
  }

  // Construct the transfer log as per the events standard.
  let nftTransferLog = {
    // Standard name ("nep171").
    standard: NFT_STANDARD_NAME,
    // Version of the standard ("nft-1.0.0").
    version: NFT_METADATA_SPEC,
    // The data related with the event stored in a vector.
    event: 'nft_transfer',
    data: [
      {
        // The optional authorized account ID to transfer the token on behalf of the old owner.
        authorized_id: authorizedId,
        // The old owner's account ID.
        old_owner_id: token.owner_id,
        // The account ID of the new owner of the token.
        new_owner_id: receiverId,
        // A vector containing the token IDs as strings.
        token_ids: [tokenId],
        // An optional memo to include.
        memo,
      },
    ],
  }

  // Log the serialized json.
  near.log(JSON.stringify(nftTransferLog))

  //return the previous token object that was transferred.
  return token
}

'''
'''--- contracts/src/nft-contract/metadata.ts ---
import { Contract } from '.'

//defines the payout type we'll be returning as a part of the royalty standards.
export class Payout {
  payout: { [accountId: string]: bigint }
  constructor({ payout }: { payout: { [accountId: string]: bigint } }) {
    this.payout = payout
  }
}

export class NFTContractMetadata {
  spec: string
  name: string
  symbol: string
  icon?: string
  base_uri?: string
  reference?: string
  reference_hash?: string

  constructor({
    spec,
    name,
    symbol,
    icon,
    baseUri,
    reference,
    referenceHash,
  }: {
    spec: string
    name: string
    symbol: string
    icon?: string
    baseUri?: string
    reference?: string
    referenceHash?: string
  }) {
    this.spec = spec // required, essentially a version like "nft-1.0.0"
    this.name = name // required, ex. "Mosaics"
    this.symbol = symbol // required, ex. "MOSAIC"
    this.icon = icon // Data URL
    this.base_uri = baseUri // Centralized gateway known to have reliable access to decentralized storage assets referenced by `reference` or `media` URLs
    this.reference = reference // URL to a JSON file with more info
    this.reference_hash = referenceHash // Base64-encoded sha256 hash of JSON from reference field. Required if `reference` is included.
  }
}

export class TokenMetadata {
  title?: string
  description?: string
  media?: string
  media_hash?: string
  copies?: number
  issued_at?: string
  expires_at?: string
  starts_at?: string
  updated_at?: string
  extra?: string
  reference?: string
  reference_hash?: string

  constructor({
    title,
    description,
    media,
    mediaHash,
    copies,
    issuedAt,
    expiresAt,
    startsAt,
    updatedAt,
    extra,
    reference,
    referenceHash,
  }: {
    title?: string
    description?: string
    media?: string
    mediaHash?: string
    copies?: number
    issuedAt?: string
    expiresAt?: string
    startsAt?: string
    updatedAt?: string
    extra?: string
    reference?: string
    referenceHash?: string
  }) {
    this.title = title // ex. "Arch Nemesis: Mail Carrier" or "Parcel #5055"
    this.description = description // free-form description
    this.media = media // URL to associated media, preferably to decentralized, content-addressed storage
    this.media_hash = mediaHash // Base64-encoded sha256 hash of content referenced by the `media` field. Required if `media` is included.
    this.copies = copies // number of copies of this set of metadata in existence when token was minted.
    this.issued_at = issuedAt // ISO 8601 datetime when token was issued or minted
    this.expires_at = expiresAt // ISO 8601 datetime when token expires
    this.starts_at = startsAt // ISO 8601 datetime when token starts being valid
    this.updated_at = updatedAt // ISO 8601 datetime when token was last updated
    this.extra = extra // anything extra the NFT wants to store on-chain. Can be stringified JSON.
    this.reference = reference // URL to an off-chain JSON file with more info.
    this.reference_hash = referenceHash // Base64-encoded sha256 hash of JSON from reference field. Required if `reference` is included.
  }
}

export class Token {
  owner_id: string
  approved_account_ids: { [accountId: string]: number }
  next_approval_id: number
  royalty: { [accountId: string]: number }
  dependency: [string, number][]

  constructor({
    ownerId,
    approvedAccountIds,
    nextApprovalId,
    royalty,
    dependency,
  }: {
    ownerId: string
    approvedAccountIds: { [accountId: string]: number }
    nextApprovalId: number
    royalty: { [accountId: string]: number }
    dependency: [string, number][]
  }) {
    //owner of the token
    this.owner_id = ownerId
    //list of approved account IDs that have access to transfer the token. This maps an account ID to an approval ID
    this.approved_account_ids = approvedAccountIds
    //the next approval ID to give out.
    this.next_approval_id = nextApprovalId
    //keep track of the royalty percentages for the token in a hash map
    this.royalty = royalty
    //keep track of the dependency of the token in an array
    this.dependency = dependency
  }
}

//The Json token is what will be returned from view calls.
export class JsonToken {
  token_id: string
  owner_id: string
  metadata: TokenMetadata
  approved_account_ids: { [accountId: string]: number }
  royalty: { [accountId: string]: number }
  dependency: [string, number][]

  constructor({
    tokenId,
    ownerId,
    metadata,
    approvedAccountIds,
    royalty,
    dependency,
  }: {
    tokenId: string
    ownerId: string
    metadata: TokenMetadata
    approvedAccountIds: { [accountId: string]: number }
    royalty: { [accountId: string]: number }
    dependency: [string, number][]
  }) {
    //token ID
    this.token_id = tokenId
    //owner of the token
    this.owner_id = ownerId
    //token metadata
    this.metadata = metadata
    //list of approved account IDs that have access to transfer the token. This maps an account ID to an approval ID
    this.approved_account_ids = approvedAccountIds
    //keep track of the royalty percentages for the token in a hash map
    this.royalty = royalty
    //keep track of the dependency of the token in an array
    this.dependency = dependency
  }
}

//get the information for a specific token ID
export function internalNftMetadata({
  contract,
}: {
  contract: Contract
}): NFTContractMetadata {
  return contract.metadata
}

'''
'''--- contracts/src/nft-contract/mint.ts ---
import { assert, near } from 'near-sdk-js'
import { Contract, NFT_METADATA_SPEC, NFT_STANDARD_NAME } from '.'
import { internalAddTokenToOwner, refundDeposit } from './internal'
import { Token, TokenMetadata } from './metadata'

export function internalMint({
  contract,
  tokenId,
  metadata,
  receiverId,
  perpetualRoyalties,
  perpetualDependencies,
}: {
  contract: Contract
  tokenId: string
  metadata: TokenMetadata
  receiverId: string
  perpetualRoyalties: { [key: string]: number }
  perpetualDependencies: [string, number][]
}): void {
  //measure the initial storage being used on the contract TODO
  let initialStorageUsage = near.storageUsage()

  // create a royalty map to store in the token
  let royalty: { [accountId: string]: number } = {}

  // create a dependency array to store in the token
  let dependency: [string, number][] = []

  // if perpetual royalties were passed into the function: TODO: add isUndefined fn
  if (perpetualRoyalties != null) {
    //make sure that the length of the perpetual royalties is below 7 since we won't have enough GAS to pay out that many people
    assert(
      Object.keys(perpetualRoyalties).length < 7,
      'Cannot add more than 6 perpetual royalty amounts',
    )

    //iterate through the perpetual royalties and insert the account and amount in the royalty map
    Object.entries(perpetualRoyalties).forEach(([account, amount], index) => {
      royalty[account] = amount
    })
  }

  if (perpetualDependencies != null) {
    //iterate through the perpetual dependencies and insert the account and amount in the dependency array
    perpetualDependencies.forEach((item, index) => {
      dependency.push(item)
    })
  }

  //specify the token struct that contains the owner ID
  let token = new Token({
    //set the owner ID equal to the receiver ID passed into the function
    ownerId: receiverId,
    //we set the approved account IDs to the default value (an empty map)
    approvedAccountIds: {},
    //the next approval ID is set to 0
    nextApprovalId: 0,
    //the map of perpetual royalties for the token (The owner will get 100% - total perpetual royalties)
    royalty,
    //the array of perpetual dependencies for the token
    dependency,
  })

  //insert the token ID and token struct and make sure that the token doesn't exist
  assert(!contract.tokensById.containsKey(tokenId), 'Token already exists')
  contract.tokensById.set(tokenId, token)

  //insert the token ID and metadata
  contract.tokenMetadataById.set(tokenId, metadata)

  //call the internal method for adding the token to the owner
  internalAddTokenToOwner(contract, token.owner_id, tokenId)

  // Construct the mint log as per the events standard.
  let nftMintLog = {
    // Standard name ("nep171").
    standard: NFT_STANDARD_NAME,
    // Version of the standard ("nft-1.0.0").
    version: NFT_METADATA_SPEC,
    // The data related with the event stored in a vector.
    event: 'nft_mint',
    data: [
      {
        // Owner of the token.
        owner_id: token.owner_id,
        // Vector of token IDs that were minted.
        token_ids: [tokenId],
      },
    ],
  }

  // Log the json.
  near.log(`EVENT_JSON:${JSON.stringify(nftMintLog)}`)

  //calculate the required storage which was the used - initial TODO
  let requiredStorageInBytes =
    near.storageUsage().valueOf() - initialStorageUsage.valueOf()

  //refund any excess storage if the user attached too much. Panic if they didn't attach enough to cover the required.
  refundDeposit(requiredStorageInBytes)
}

'''
'''--- contracts/src/nft-contract/nft_core.ts ---
import { assert, bytes, near } from 'near-sdk-js'
import { Contract, NFT_METADATA_SPEC, NFT_STANDARD_NAME } from '.'
import {
  assertOneYocto,
  internalAddTokenToOwner,
  internalRemoveTokenFromOwner,
  internalTransfer,
  refundApprovedAccountIds,
} from './internal'
import { JsonToken, Token, TokenMetadata } from './metadata'

const GAS_FOR_RESOLVE_TRANSFER = 40_000_000_000_000
const GAS_FOR_NFT_ON_TRANSFER = 35_000_000_000_000

//get the information for a specific token ID
export function internalNftToken({
  contract,
  tokenId,
}: {
  contract: Contract
  tokenId: string
}) {
  let token = contract.tokensById.get(tokenId) as Token
  //if there wasn't a token ID in the tokens_by_id collection, we return None
  if (token == null) {
    return null
  }

  //if there is some token ID in the tokens_by_id collection
  //we'll get the metadata for that token
  let metadata = contract.tokenMetadataById.get(tokenId) as TokenMetadata

  //we return the JsonToken
  let jsonToken = new JsonToken({
    tokenId: tokenId,
    ownerId: token.owner_id,
    metadata,
    approvedAccountIds: token.approved_account_ids,
    royalty: token.royalty,
    dependency: token.dependency,
  })

  return jsonToken
}

//implementation of the nft_transfer method. This transfers the NFT from the current owner to the receiver.
export function internalNftTransfer({
  contract,
  receiverId,
  tokenId,
  approvalId,
  memo,
}: {
  contract: Contract
  receiverId: string
  tokenId: string
  approvalId: number
  memo: string
}) {
  //assert that the user attached exactly 1 yoctoNEAR. This is for security and so that the user will be redirected to the NEAR wallet.
  assertOneYocto()
  //get the sender to transfer the token from the sender to the receiver
  let senderId = near.predecessorAccountId()

  //call the internal transfer method and get back the previous token so we can refund the approved account IDs
  let previousToken = internalTransfer(
    contract,
    senderId,
    receiverId,
    tokenId,
    approvalId,
    memo,
  )

  //we refund the owner for releasing the storage used up by the approved account IDs
  refundApprovedAccountIds(
    previousToken.owner_id,
    previousToken.approved_account_ids,
  )
}

//implementation of the transfer call method. This will transfer the NFT and call a method on the receiver_id contract
export function internalNftTransferCall({
  contract,
  receiverId,
  tokenId,
  approvalId,
  memo,
  msg,
}: {
  contract: Contract
  receiverId: string
  tokenId: string
  approvalId: number
  memo: string
  msg: string
}) {
  //assert that the user attached exactly 1 yocto for security reasons.
  assertOneYocto()
  //get the sender to transfer the token from the sender to the receiver
  let senderId = near.predecessorAccountId()

  //call the internal transfer method and get back the previous token so we can refund the approved account IDs
  let previousToken = internalTransfer(
    contract,
    senderId,
    receiverId,
    tokenId,
    approvalId,
    memo,
  )

  // Initiating receiver's call and the callback
  const promise = near.promiseBatchCreate(receiverId)
  near.promiseBatchActionFunctionCall(
    promise,
    'nft_on_transfer',
    bytes(
      JSON.stringify({
        sender_id: senderId,
        previous_owner_id: previousToken.owner_id,
        token_id: tokenId,
        msg,
      }),
    ),
    0, // no deposit
    GAS_FOR_NFT_ON_TRANSFER,
  )

  // We then resolve the promise and call nft_resolve_transfer on our own contract
  near.promiseThen(
    promise,
    near.currentAccountId(),
    'nft_resolve_transfer',
    bytes(
      JSON.stringify({
        owner_id: previousToken.owner_id,
        receiver_id: receiverId,
        token_id: tokenId,
        approved_account_ids: previousToken.approved_account_ids,
      }),
    ),
    0, // no deposit
    GAS_FOR_RESOLVE_TRANSFER,
  )
  return near.promiseReturn(promise)
}

//resolves the cross contract call when calling nft_on_transfer in the nft_transfer_call method
//returns true if the token was successfully transferred to the receiver_id
export function internalResolveTransfer({
  contract,
  authorizedId,
  ownerId,
  receiverId,
  tokenId,
  approvedAccountIds,
  memo,
}: {
  contract: Contract
  authorizedId: string
  ownerId: string
  receiverId: string
  tokenId: string
  approvedAccountIds: { [key: string]: number }
  memo: string
}) {
  assert(
    near.currentAccountId() === near.predecessorAccountId(),
    'Only the contract itself can call this method',
  )
  // Whether receiver wants to return token back to the sender, based on `nft_on_transfer`
  // call result.
  let result = near.promiseResult(0)
  if (typeof result === 'string') {
    //As per the standard, the nft_on_transfer should return whether we should return the token to it's owner or not
    //if we need don't need to return the token, we simply return true meaning everything went fine
    if (result === 'false') {
      /* 
                since we've already transferred the token and nft_on_transfer returned false, we don't have to 
                revert the original transfer and thus we can just return true since nothing went wrong.
            */
      //we refund the owner for releasing the storage used up by the approved account IDs
      refundApprovedAccountIds(ownerId, approvedAccountIds)
      return true
    }
  }

  //get the token object if there is some token object
  let token = contract.tokensById.get(tokenId) as Token
  if (token != null) {
    if (token.owner_id != receiverId) {
      //we refund the owner for releasing the storage used up by the approved account IDs
      refundApprovedAccountIds(ownerId, approvedAccountIds)
      // The token is not owner by the receiver anymore. Can't return it.
      return true
    }
    //if there isn't a token object, it was burned and so we return true
  } else {
    //we refund the owner for releasing the storage used up by the approved account IDs
    refundApprovedAccountIds(ownerId, approvedAccountIds)
    return true
  }

  //we remove the token from the receiver
  internalRemoveTokenFromOwner(contract, receiverId, tokenId)
  //we add the token to the original owner
  internalAddTokenToOwner(contract, ownerId, tokenId)

  //we change the token struct's owner to be the original owner
  token.owner_id = ownerId

  //we refund the receiver any approved account IDs that they may have set on the token
  refundApprovedAccountIds(receiverId, token.approved_account_ids)
  //reset the approved account IDs to what they were before the transfer
  token.approved_account_ids = approvedAccountIds

  //we inset the token b  ack into the tokens_by_id collection
  contract.tokensById.set(tokenId, token)

  /*
        We need to log that the NFT was reverted back to the original owner.
        The old_owner_id will be the receiver and the new_owner_id will be the
        original owner of the token since we're reverting the transfer.
    */

  // Construct the transfer log as per the events standard.
  let nftTransferLog = {
    // Standard name ("nep171").
    standard: NFT_STANDARD_NAME,
    // Version of the standard ("nft-1.0.0").
    version: NFT_METADATA_SPEC,
    // The data related with the event stored in a vector.
    event: 'nft_transfer',
    data: [
      {
        // The optional authorized account ID to transfer the token on behalf of the old owner.
        authorized_id: authorizedId,
        // The old owner's account ID.
        old_owner_id: receiverId,
        // The account ID of the new owner of the token.
        new_owner_id: ownerId,
        // A vector containing the token IDs as strings.
        token_ids: [tokenId],
        // An optional memo to include.
        memo,
      },
    ],
  }

  // Log the serialized json.
  near.log(JSON.stringify(nftTransferLog))

  //return false
  return false
}

'''
'''--- contracts/src/nft-contract/royalty.ts ---
import { assert, bytes, near, NearPromise } from 'near-sdk-js'
import { Contract } from '.'
import {
  assertOneYocto,
  internalTransfer,
  refundApprovedAccountIds,
  royaltyToPayout,
} from './internal'
import { Token } from './metadata'

//calculates the payout for a token given the passed in balance. This is a view method
export function internalNftPayout({
  contract,
  tokenId,
  balance,
  maxLenPayout,
}: {
  contract: Contract
  tokenId: string
  balance: bigint
  maxLenPayout: number
}): { payout: { [key: string]: string } } {
  //get the token object
  let token = contract.tokensById.get(tokenId) as Token
  if (token == null) {
    throw 'no token'
  }

  //get the owner of the token
  let ownerId = token.owner_id
  //keep track of the total perpetual royalties
  let totalPerpetual = 0
  //keep track of the payout object to send back
  let payoutObj: { [key: string]: string } = {}
  //get the royalty object from token
  let royalty = token.royalty

  //make sure we're not paying out to too many people (GAS limits this)
  assert(
    Object.keys(royalty).length <= maxLenPayout,
    'Market cannot payout to that many receivers',
  )

  //go through each key and value in the royalty object
  Object.entries(royalty).forEach(([key, value], index) => {
    //only insert into the payout if the key isn't the token owner (we add their payout at the end)
    if (key != ownerId) {
      payoutObj[key] = royaltyToPayout(value, balance)
      totalPerpetual += value
    }
  })

  // payout to previous owner who gets 100% - total perpetual royalties
  payoutObj[ownerId] = royaltyToPayout(10000 - totalPerpetual, balance)

  //return the payout object
  return {
    payout: payoutObj,
  }
}

//transfers the token to the receiver ID and returns the payout object that should be payed given the passed in balance.
export function internalNftTransferPayout({
  contract,
  receiverId,
  tokenId,
  approvalId,
  memo,
  balance,
  maxLenPayout,
}: {
  contract: Contract
  receiverId: string
  tokenId: string
  approvalId: number
  memo: string
  balance: bigint
  maxLenPayout: number
}): { payout: { [key: string]: string } } {
  //assert that the user attached 1 yocto NEAR for security reasons
  assertOneYocto()
  //get the sender ID
  let senderId = near.predecessorAccountId()
  //transfer the token to the passed in receiver and get the previous token object back
  let previousToken: Token = internalTransfer(
    contract,
    senderId,
    receiverId,
    tokenId,
    approvalId,
    memo,
  )

  //refund the previous token owner for the storage used up by the previous approved account IDs
  refundApprovedAccountIds(
    previousToken.owner_id,
    previousToken.approved_account_ids,
  )

  //get the owner of the token
  let ownerId = previousToken.owner_id
  //keep track of the total perpetual royalties
  let totalPerpetual = 0
  //keep track of the payout object to send back
  let payoutObj: { [key: string]: string } = {}
  //get the royalty object from token
  let royalty = previousToken.royalty

  //make sure we're not paying out to too many people (GAS limits this)
  assert(
    Object.keys(royalty).length <= maxLenPayout,
    'Market cannot payout to that many receivers',
  )

  //go through each key and value in the royalty object
  Object.entries(royalty).forEach(([key, value], index) => {
    //only insert into the payout if the key isn't the token owner (we add their payout at the end)
    if (key != ownerId) {
      payoutObj[key] = royaltyToPayout(value, balance)
      totalPerpetual += value
    }
  })

  // payout to previous owner who gets 100% - total perpetual royalties
  payoutObj[ownerId] = royaltyToPayout(10000 - totalPerpetual, balance)

  //return the payout object
  return {
    payout: payoutObj,
  }
}

'''
'''--- contracts/tests/nft.spec.ts ---
import { NearAccount, Worker } from 'near-workspaces'
import { randomUUID } from 'crypto'
import { after, describe, it } from 'mocha'

describe('NFT', () => {
  let context = {} as {
    worker: Worker
    accounts: Record<string, NearAccount>
    token_ids: Record<string, string>
  }

  it('Initilaize and deploy contract', async () => {
    // Init the worker and start a Sandbox server
    const worker = await Worker.init()

    // Prepare sandbox for tests, create accounts, deploy contracts, etc.
    const root = worker.rootAccount

    // Deploy the contract.
    const contract = await root.devDeploy('./build/nft.wasm')

    await contract.call(contract, 'init', {
      owner_id: root.accountId,
    })

    // Test users
    const alice = await root.createSubAccount('ali')
    const bob = await root.createSubAccount('bob')

    // Save state for test runs
    context.worker = worker
    context.accounts = { root, contract, alice, bob }
    context.token_ids = {}
  })

  it('Mint Component NFT', async () => {
    const { contract, alice } = context.accounts
    const token_id = randomUUID()

    await alice.call(
      contract,
      'nft_mint',
      {
        token_id,
        metadata: {
          title: 'Component NFT',
          description: 'This is the Component NFT',
        },
        receiver_id: alice.accountId,
        perpetual_royalties: {},
        perpetual_dependencies: [],
      },
      {
        attachedDeposit: '0.1',
      },
    )

    const token = await contract.view('nft_token', { token_id })

    console.log(token)

    context.token_ids.head = token['token_id']
  })

  it('Mint Composed NFT', async () => {
    const { contract, bob } = context.accounts
    const { head: head_token_id } = context.token_ids

    const token_id = randomUUID()

    await bob.call(
      contract,
      'nft_mint',
      {
        token_id,
        metadata: {
          title: 'Composed NFT',
          description: 'This is the Composed NFT',
        },
        receiver_id: bob.accountId,
        perpetual_royalties: {},
        perpetual_dependencies: [[contract.accountId, head_token_id]],
      },
      {
        attachedDeposit: '0.1',
      },
    )

    const token = await contract.view('nft_token', { token_id })

    console.log(token)

    const payout = await contract.view('nft_payout', {
      token_id,
      balance: 1,
      max_len_payout: 10,
    })

    console.log(payout)

    context.token_ids.composed = token['token_id']
  })

  after(async () => {
    await context.worker.tearDown().catch(error => {
      console.log('Failed to tear down the worker:', error)
    })
  })
})

'''
'''--- contracts/tsconfig.json ---
{
  "compilerOptions": {
    "target": "es5",
    "experimentalDecorators": true,
    "esModuleInterop": true,
    "module": "es2020",
    "moduleResolution": "node",
    "noEmit": true
  },
  "exclude": ["node_modules"]
}

'''
'''--- web/assets/body1.svg ---
<svg width="115" height="130" viewBox="0 0 115 130" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M14.4575 24.8988C18.1506 16.9163 23.4599 14.75 23.4599 14.75L26.75 58.6147V124.75C-9.19033 113.677 -4.29268 65.4255 14.4575 24.8988Z" fill="#454B5E"/>
<path d="M100.042 24.8988C96.3495 16.9163 91.0403 14.75 91.0403 14.75L87.75 58.6147V124.75C123.69 113.677 118.793 65.4255 100.042 24.8988Z" fill="#454B5E"/>
<path d="M57.25 26.25C76.0278 26.25 91.25 20.3738 91.25 13.125C91.25 5.87625 76.0278 0 57.25 0C38.4722 0 23.25 5.87625 23.25 13.125C23.25 20.3738 38.4722 26.25 57.25 26.25Z" fill="#35383E"/>
<path d="M20.6554 33.943C20.0637 22.0475 27.946 11.3862 39.4923 8.46475L57.138 4L74.7838 8.46475C86.33 11.3862 94.2122 22.0475 93.6205 33.943L92.138 63.75L94.5235 118.141C94.586 119.563 93.4498 120.75 92.026 120.75H22.2501C20.8264 120.75 19.6901 119.563 19.7525 118.141L22.138 63.75L20.6554 33.943Z" fill="#DADADA"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M39.4999 41.4567L39.4998 41.625L39.4999 41.7933C39.5014 43.2445 39.5028 44.595 38.4703 45.6174C37.7268 46.3536 36.8689 46.75 35.625 46.75C34.3811 46.75 33.5232 46.3536 32.7797 45.6174C31.7472 44.595 31.7486 43.2445 31.7501 41.7933L31.7502 41.625L31.7501 41.4567C31.7486 40.0055 31.7472 38.655 32.7797 37.6326C33.5232 36.8964 34.3811 36.5 35.625 36.5C36.8689 36.5 37.7268 36.8964 38.4703 37.6326C39.5028 38.655 39.5014 40.0055 39.4999 41.4567ZM30.25 36.75V46.75H28.0486L24.768 41.7219V46.75H22.25V36.75H24.4514L27.732 41.7781V36.75H30.25ZM37 41.625C37 43.4393 36.8568 43.7603 36.6276 44.0534C36.4414 44.2907 36.0833 44.5 35.625 44.5C35.1667 44.5 34.8086 44.2907 34.6224 44.0534C34.3932 43.7603 34.25 43.4393 34.25 41.625C34.25 39.8107 34.3932 39.4757 34.6224 39.1826C34.8086 38.9454 35.1667 38.75 35.625 38.75C36.0833 38.75 36.4414 38.9454 36.6276 39.1826C36.8568 39.4757 37 39.8107 37 41.625ZM47.0617 42.5787L49.25 46.75H46.3655L44.575 43.0281H43.7367V46.75H41.25V36.75H45.2571C47.5022 36.75 48.71 38.323 48.71 39.9663C48.71 41.3287 47.8575 42.1854 47.0617 42.5787ZM46.25 39.75C46.25 40.2639 45.85 40.75 45.1643 40.75H43.75V38.75H45.1643C45.85 38.75 46.25 39.2361 46.25 39.75ZM57.25 44.559V46.75H50.5V36.75H52.9921V44.559H57.25ZM66.248 41.3306L66.248 41.3298C66.2583 39.9464 66.2669 38.7933 65.1994 37.7331C64.5063 37.0449 63.5304 36.75 62.4838 36.75H58.75V46.75H62.4838C63.5304 46.75 64.5063 46.4551 65.1994 45.7669C66.2669 44.7067 66.2583 43.5536 66.248 42.1702L66.248 42.1694C66.247 42.0319 66.246 41.8922 66.246 41.75C66.246 41.6078 66.247 41.4681 66.248 41.3306ZM63.4861 43.925C63.6806 43.6375 63.75 43.3644 63.75 41.625C63.75 39.9 63.6806 39.6125 63.4861 39.325C63.2639 38.98 62.9306 38.75 62.3194 38.75H61.25V44.5H62.3194C62.9306 44.5 63.2639 44.27 63.4861 43.925ZM74.5 38.941V36.75H67V38.941H69.5V46.75H72V38.941H74.5ZM82.9999 41.4567L82.9998 41.625L82.9999 41.7934C83.0014 43.2445 83.0028 44.595 81.9703 45.6174C81.2268 46.3536 80.3689 46.75 79.125 46.75C77.8811 46.75 77.0232 46.3536 76.2797 45.6174C75.2472 44.595 75.2486 43.2445 75.2501 41.7933L75.2502 41.625L75.2501 41.4566C75.2486 40.0055 75.2472 38.655 76.2797 37.6326C77.0232 36.8964 77.8811 36.5 79.125 36.5C80.3689 36.5 81.2268 36.8964 81.9703 37.6326C83.0028 38.655 83.0014 40.0055 82.9999 41.4567ZM80.5 41.625C80.5 43.4393 80.3568 43.7603 80.1276 44.0534C79.9414 44.2907 79.5833 44.5 79.125 44.5C78.6667 44.5 78.3086 44.2907 78.1224 44.0534C77.8932 43.7603 77.75 43.4393 77.75 41.625C77.75 39.8107 77.8932 39.4757 78.1224 39.1826C78.3086 38.9454 78.6667 38.75 79.125 38.75C79.5833 38.75 79.9414 38.9454 80.1276 39.1826C80.3568 39.4757 80.5 39.8107 80.5 41.625ZM89.4454 43.4655H92C91.6269 45.6882 90.0626 46.75 88.1251 46.75C86.934 46.75 86.0298 46.3536 85.2835 45.6174C84.2472 44.595 84.2486 43.2445 84.2501 41.7933C84.2502 41.7374 84.2502 41.6813 84.2502 41.625C84.2502 41.5687 84.2502 41.5126 84.2501 41.4567C84.2486 40.0055 84.2472 38.655 85.2835 37.6326C86.0298 36.8964 86.934 36.5 88.1251 36.5C90.0626 36.5 91.6269 37.5618 92 39.7845H89.4454C89.2876 39.2182 88.9719 38.7086 88.1395 38.7086C87.6802 38.7086 87.3358 38.8926 87.1492 39.1333C86.9196 39.4306 86.7617 39.7845 86.7617 41.625C86.7617 43.4655 86.9196 43.8194 87.1492 44.1167C87.3358 44.3574 87.6802 44.5414 88.1395 44.5414C88.9719 44.5414 89.2876 44.0318 89.4454 43.4655Z" fill="black"/>
<path d="M96.9977 61.5289C92.2315 46.8962 105.247 29.0117 90.7482 14.5039C90.7482 14.5039 77.6243 5.12395 66 6.87495C76.7493 12.5029 81.249 23.7589 77.0288 54.0249C75.6338 64.0302 82.3225 78.3269 77.0288 93.7959C69.6248 115.432 68.9998 125.106 77.0288 128.314C83.6238 130.95 85.6335 127.28 96.9977 119.059C102.974 114.736 103.027 80.0387 96.9977 61.5289Z" fill="#343844"/>
<path d="M89.9617 15.4157C90.1463 15.3218 90.372 15.3954 90.4659 15.5801C90.5597 15.7647 90.4861 15.9904 90.3014 16.0843C87.4785 17.5189 84.6414 21.2162 82.855 26.4155C80.6457 32.8457 80.1218 41.0903 81.703 50.8914L81.7515 51.1889C83.3927 61.1269 83.5946 72.1357 82.6365 83.3942L82.5845 83.992C81.833 92.4538 80.4459 100.589 78.9953 106.091C77.9245 110.374 77.2273 114.451 77.1439 118.109C77.0313 123.05 78.0982 126.477 80.5712 127.926C80.7499 128.031 80.8098 128.261 80.7051 128.44C80.6003 128.618 80.3706 128.678 80.1919 128.573C77.4183 126.948 76.2759 123.278 76.3941 118.091C76.479 114.368 77.1846 110.242 78.2689 105.904L78.3705 105.514C79.808 99.9273 81.1714 91.7653 81.8892 83.3306C82.8289 72.2877 82.647 61.4902 81.0796 51.7288L81.0116 51.3111C79.352 41.2618 79.8716 32.7904 82.1457 26.1718C83.991 20.801 86.9484 16.947 89.9617 15.4157Z" fill="#78819C"/>
<path d="M17.5022 61.5289C22.2685 46.8962 9.2527 29.0117 23.7517 14.5039C23.7517 14.5039 36.8757 5.12395 48.5 6.87495C37.7507 12.5029 33.251 23.7589 37.4713 54.0249C38.8663 64.0302 32.1775 78.3269 37.4713 93.7959C44.8753 115.432 45.5003 125.106 37.4713 128.314C30.8763 130.95 28.8665 127.28 17.5022 119.059C11.5257 114.736 11.4729 80.0387 17.5022 61.5289Z" fill="#343844"/>
<path d="M24.0342 15.5801C24.128 15.3954 24.3537 15.3218 24.5384 15.4156C27.5517 16.947 30.5091 20.801 32.3544 26.1718C34.6057 32.7242 35.1374 41.0925 33.5376 51.0101L33.4885 51.3111C31.8585 61.1817 31.6577 72.1299 32.6109 83.3306L32.6632 83.9324C33.4112 92.3505 34.7909 100.441 36.2323 105.909C37.3155 110.242 38.021 114.368 38.1059 118.091C38.2241 123.278 37.0818 126.948 34.3082 128.573C34.1295 128.678 33.8997 128.618 33.795 128.44C33.6903 128.261 33.7502 128.031 33.9289 127.926C36.4019 126.477 37.4687 123.05 37.3561 118.109C37.2728 114.451 36.5755 110.374 35.5059 106.096C34.02 100.46 32.6019 92.0695 31.8636 83.3942C30.919 72.2943 31.1019 61.437 32.68 51.6094L32.7485 51.1889C34.3886 41.2571 33.8767 32.9107 31.6451 26.4155C29.8587 21.2162 27.0216 17.5189 24.1986 16.0843C24.014 15.9904 23.9404 15.7647 24.0342 15.5801Z" fill="#78819C"/>
</svg>

'''
'''--- web/assets/body2.svg ---
<svg width="128" height="119" viewBox="0 0 128 119" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M34.8819 29.5576C23.882 49.0576 14.882 96.0576 18.882 107.058" stroke="#EBBAAA" stroke-width="18.5" stroke-linecap="round" stroke-linejoin="bevel"/>
<path d="M92.8819 29.5576C103.882 49.0576 112.882 96.0576 108.882 107.058" stroke="#EBBAAA" stroke-width="18.5" stroke-linecap="round" stroke-linejoin="bevel"/>
<rect x="25.8819" y="5.55762" width="42.5" height="100" rx="21.25" transform="rotate(15 25.8819 5.55762)" fill="#BA917A"/>
<rect width="42.5" height="100" rx="21.25" transform="matrix(-0.965926 0.258819 0.258819 0.965926 101.882 5.55762)" fill="#BA917A"/>
<path d="M25.6706 21.7244C26.0959 16.3866 29.8739 11.9124 35.0649 10.5989L63.8819 3.30762L92.6989 10.5989C97.8899 11.9124 101.668 16.3866 102.093 21.7244L106.382 75.5576L102.632 101.558L100.857 104.575C100.408 105.339 99.5879 105.808 98.7021 105.808H27.6319L25.1319 101.558L21.3819 75.5576L25.6706 21.7244Z" fill="#5F5F61"/>
<path d="M64.0494 25C70.9529 25 76.5494 19.4035 76.5494 12.5C76.5494 5.59625 70.9529 0 64.0494 0C57.1459 0 51.5494 5.59625 51.5494 12.5C51.5494 19.4035 57.1459 25 64.0494 25Z" fill="#BA917A"/>
<path d="M28.8819 105.808H98.8819L100.784 115.317C101.093 116.864 99.9099 118.308 98.3324 118.308H29.4314C27.8539 118.308 26.6706 116.864 26.9799 115.317L28.8819 105.808Z" fill="#BA917A"/>
</svg>

'''
'''--- web/assets/body3.svg ---
<svg width="132" height="123" viewBox="0 0 132 123" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M14.6144 45.2924C16.9382 40.7429 22.5102 38.9386 27.0597 41.2624C31.5637 43.5629 33.3771 49.047 31.1582 53.5708L31.0897 53.7076C27.8681 60.0149 24.4669 72.7283 22.6905 85.0357L22.6371 85.4085C21.7792 91.4606 21.3983 96.8739 21.5501 100.806L21.5632 101.112C21.6218 102.365 21.7344 103.383 21.8742 104.102L21.889 104.177L21.8968 104.186C24.5236 107.193 24.977 111.672 22.75 115.202L22.6674 115.331C19.8717 119.607 14.1391 120.806 9.86334 118.011C6.80775 116.013 5.13731 113.093 4.15627 109.529C3.52256 107.226 3.18156 104.567 3.06391 101.52C2.8673 96.4271 3.30433 90.0862 4.27148 83.1587L4.32028 82.8119C6.34374 68.538 10.2684 53.8011 14.6144 45.2924Z" fill="#EBBAAA"/>
<path d="M99.9729 34.9434C104.422 32.4334 110.064 34.0057 112.574 38.4552C118.498 48.9573 122.871 63.7957 125.129 79.3046C127.278 94.0727 127.234 107.428 124.53 114.864C122.784 119.665 117.477 122.142 112.676 120.396C107.923 118.668 105.448 113.449 107.093 108.686L107.144 108.542C108.527 104.738 108.563 93.9318 106.822 81.9692C104.866 68.5329 101.109 55.7836 96.4611 47.5447C93.9511 43.0952 95.5234 37.4534 99.9729 34.9434Z" fill="#EBBAAA"/>
<rect x="54" y="0.5" width="20" height="37" rx="9.74753" fill="#EBBAAA"/>
<path d="M53.7944 25.6708C54.5044 25.6708 55.0799 25.0952 55.0799 24.3852C55.0799 23.6752 54.5044 23.0996 53.7944 23.0996C53.0844 23.0996 52.5088 23.6752 52.5088 24.3852C52.5088 25.0952 53.0844 25.6708 53.7944 25.6708Z" fill="#E5EBF9"/>
<path d="M62.7676 21.5C61.8814 19.875 62.2676 15.375 62.2676 15.375L56.7364 14.9178L48.8926 4.5C41.1009 5.875 40.7676 6.375 35.1426 8.875C28.4324 11.8572 29.7676 21.875 28.7676 35.5L31.7676 112.625L47.1426 114.918L59.8614 115.168L63.3926 27.375C63.3926 27.375 63.6539 23.125 62.7676 21.5Z" fill="#DEDEE2"/>
<path d="M63.0176 25.25C63.2676 23.25 63.6426 20.875 65.2676 19.25C66.8926 17.625 68.6426 15.75 68.6426 15.75H74.0959L81.8459 5.25C81.8459 5.25 92.9706 6.75 96.7206 8.75C100.471 10.75 102.721 32.625 102.721 32.625L101.643 112.625L94.9706 115.25H60.8456C59.3459 88 62.5956 36.2925 62.5956 32.625C62.5956 31.0428 62.7676 27.25 63.0176 25.25Z" fill="#DEDEE2"/>
<mask id="mask0_21_495" style="mask-type:alpha" maskUnits="userSpaceOnUse" x="60" y="6" width="45" height="111">
<path fill-rule="evenodd" clip-rule="evenodd" d="M63.0646 21.7928C63.3146 19.7928 63.4396 18.9178 63.9396 17.7928L68.2206 17.25H74.0959L81.8459 6.75C81.8459 6.75 92.9706 8.25 96.7206 10.25C100.471 12.25 102.721 34.125 102.721 34.125L104.471 114.125L94.9706 116.75H60.8456C59.3459 89.5 62.5954 37.7925 62.5956 34.125C62.5956 32.5428 62.8146 23.7928 63.0646 21.7928Z" fill="white"/>
</mask>
<g mask="url(#mask0_21_495)">
<path d="M68.7676 67.125C68.8676 57.625 70.9601 22.625 68.5851 13.75C68.5851 13.75 66.9049 15.5605 65.2101 17.125C63.5151 18.6895 63.2101 21.375 63.2101 21.375V21.5L57.7676 115.125H68.7676C68.5176 102.958 68.6676 76.625 68.7676 67.125Z" fill="#CDCBD6"/>
<path d="M68.7676 67.125C68.8676 57.625 70.9601 22.625 68.5851 13.75C68.5851 13.75 66.9049 15.5605 65.2101 17.125C63.5151 18.6895 63.2101 21.375 63.2101 21.375V21.5L57.7676 115.125H68.7676C68.5176 102.958 68.6676 76.625 68.7676 67.125Z" fill="#CDCBD6"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M77.3539 18.5966L77.1039 18.5957L76.7524 116.951L77.0024 116.952L77.3539 18.5966ZM75.2301 18.6628L75.4801 18.6637L75.1284 117.018L74.8784 117.018L75.2301 18.6628ZM73.3566 18.7402L73.1066 18.7393L72.7549 117.094L73.0049 117.095L73.3566 18.7402ZM71.2329 18.8161L70.9829 18.8152L70.6311 117.17L70.8811 117.171L71.2329 18.8161Z" fill="black" fill-opacity="0.32"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M61.6634 119.824L62.0151 21.4688L62.2651 21.4698L61.9134 119.825L61.6634 119.824ZM63.7871 119.748L64.1389 21.3928L64.3889 21.3936L64.0371 119.749L63.7871 119.748ZM65.9106 119.671L66.2624 21.3164L66.5124 21.3174L66.1606 119.672L65.9106 119.671ZM67.7846 119.604L68.1361 21.2495L68.3861 21.2503L68.0346 119.605L67.7846 119.604Z" fill="black" fill-opacity="0.13"/>
</g>
<path d="M66.3926 26.25C67.152 26.25 67.7676 25.6344 67.7676 24.875C67.7676 24.1156 67.152 23.5 66.3926 23.5C65.6332 23.5 65.0176 24.1156 65.0176 24.875C65.0176 25.6344 65.6332 26.25 66.3926 26.25Z" fill="#BAB8C6"/>
<path d="M66.1426 33.75C66.902 33.75 67.5176 33.1344 67.5176 32.375C67.5176 31.6156 66.902 31 66.1426 31C65.3832 31 64.7676 31.6156 64.7676 32.375C64.7676 33.1344 65.3832 33.75 66.1426 33.75Z" fill="#BAB8C6"/>
<path d="M65.8926 45.75C66.652 45.75 67.2676 45.0784 67.2676 44.25C67.2676 43.4216 66.652 42.75 65.8926 42.75C65.1332 42.75 64.5176 43.4216 64.5176 44.25C64.5176 45.0784 65.1332 45.75 65.8926 45.75Z" fill="#BAB8C6"/>
<path d="M65.3926 58.75C66.152 58.75 66.7676 58.1344 66.7676 57.375C66.7676 56.6156 66.152 56 65.3926 56C64.6332 56 64.0176 56.6156 64.0176 57.375C64.0176 58.1344 64.6332 58.75 65.3926 58.75Z" fill="#BAB8C6"/>
<path d="M65.3926 72C66.152 72 66.7676 71.3844 66.7676 70.625C66.7676 69.8656 66.152 69.25 65.3926 69.25C64.6332 69.25 64.0176 69.8656 64.0176 70.625C64.0176 71.3844 64.6332 72 65.3926 72Z" fill="#BAB8C6"/>
<path d="M65.3926 86.5C66.152 86.5 66.7676 85.8844 66.7676 85.125C66.7676 84.3656 66.152 83.75 65.3926 83.75C64.6332 83.75 64.0176 84.3656 64.0176 85.125C64.0176 85.8844 64.6332 86.5 65.3926 86.5Z" fill="#BAB8C6"/>
<path d="M65.3926 99.75C66.152 99.75 66.7676 99.1344 66.7676 98.375C66.7676 97.6156 66.152 97 65.3926 97C64.6332 97 64.0176 97.6156 64.0176 98.375C64.0176 99.1344 64.6332 99.75 65.3926 99.75Z" fill="#BAB8C6"/>
<mask id="mask1_21_495" style="mask-type:alpha" maskUnits="userSpaceOnUse" x="28" y="4" width="36" height="112">
<path fill-rule="evenodd" clip-rule="evenodd" d="M62.7672 21.5C61.8809 19.875 62.2672 15.375 62.2672 15.375L56.7359 14.9178L48.8922 4.5C41.1004 5.875 40.7672 6.375 35.1422 8.875C28.4319 11.8572 29.7672 21.875 28.7672 35.5L31.7672 112.625L47.1422 114.918L59.8609 115.168L63.3922 27.375C63.3922 27.375 63.6534 23.125 62.7672 21.5Z" fill="white"/>
</mask>
<g mask="url(#mask1_21_495)">
<path fill-rule="evenodd" clip-rule="evenodd" d="M55.2673 18.0051L55.0175 17.9951L51.1425 115.37L51.3923 115.38L55.2673 18.0051ZM57.1424 17.9951L57.3922 18.0051L53.5172 115.38L53.2674 115.37L57.1424 17.9951ZM59.5172 18.0051L59.2674 17.9951L55.3924 115.37L55.6422 115.38L59.5172 18.0051ZM61.3922 18.0051L61.1424 17.9951L57.2674 115.37L57.5172 115.38L61.3922 18.0051Z" fill="black" fill-opacity="0.32"/>
</g>
<path d="M62.5531 20.125C62.1531 19.125 62.1424 16.7083 62.2674 15.375C60.6006 15.8332 57.6419 16.925 59.1419 17.625C60.6419 18.325 62.6369 22.0417 63.4286 23.875C63.2619 23.1668 62.9531 21.125 62.5531 20.125Z" fill="#CDCBD6"/>
<path d="M55.3929 9.125C53.8751 6.469 54.3929 3.75 54.1999 0.75L48.4811 3.58225C48.4811 3.58225 46.4816 6.58225 47.7311 13.8322C48.5929 18.8322 46.3929 22.75 52.8929 26.625C53.6429 20 61.0151 16.5375 62.2679 15.375C59.8929 14.125 57.3929 12.625 55.3929 9.125Z" fill="#CDCBD6"/>
<mask id="mask2_21_495" style="mask-type:alpha" maskUnits="userSpaceOnUse" x="47" y="0" width="16" height="27">
<path fill-rule="evenodd" clip-rule="evenodd" d="M55.3926 9.125C53.8749 6.469 54.3926 3.75 54.1999 0.75L48.4811 3.58225C48.4811 3.58225 46.4814 6.58225 47.7311 13.8322C48.5926 18.8322 46.3926 22.75 52.8926 26.625C53.6426 20 61.0149 16.5375 62.2676 15.375C59.8926 14.125 57.3926 12.625 55.3926 9.125Z" fill="white"/>
</mask>
<g mask="url(#mask2_21_495)">
<path d="M54.3217 0.75C51.9135 3.07775 50.5122 4.93975 51.6945 10.3193C52.8767 15.6988 55.8722 18.9797 56.7675 19.75" stroke="black" stroke-opacity="0.12" stroke-width="0.25"/>
<path d="M50.9912 2C48.6212 4.30975 48.6117 7.304 49.7752 12.642C50.9384 17.98 53.8864 21.2358 54.7674 22" stroke="black" stroke-opacity="0.12" stroke-width="0.25"/>
<path d="M56.7524 -0.25C54.3989 2.0165 53.0294 3.8295 54.1849 9.0675C55.3404 14.3055 58.2677 17.5 59.1427 18.25" stroke="black" stroke-opacity="0.12" stroke-width="0.25"/>
<path d="M59.2524 -0.5C56.8989 1.7665 55.5294 3.5795 56.6849 8.8175C57.8404 14.0555 60.7677 17.25 61.6427 18" stroke="black" stroke-opacity="0.12" stroke-width="0.25"/>
</g>
<path d="M67.5176 20.2503C70.2676 18.7503 72.6426 18.1253 74.1426 17.0003C73.6426 14.7003 70.0176 15.2503 68.6426 15.7503C68.2259 16.292 67.0426 17.6503 65.6426 18.7503C64.2426 19.8503 63.4344 22.292 63.2676 23.3753C63.8509 23.042 65.8311 21.1703 67.5176 20.2503Z" fill="#CDCBD6"/>
<path d="M73.2674 8.875C74.1271 6.031 74.0749 1.375 74.0749 0L81.3561 3.58225C81.3561 3.58225 82.8561 6.95725 81.3561 13.8322C79.7129 21.364 78.1066 18.5 76.3924 20.5C74.6424 17.5 72.1424 15.75 68.5174 15.75C72.0174 12.75 72.5116 11.375 73.2674 8.875Z" fill="#CDCBD6"/>
<mask id="mask3_21_495" style="mask-type:alpha" maskUnits="userSpaceOnUse" x="68" y="0" width="15" height="21">
<path fill-rule="evenodd" clip-rule="evenodd" d="M73.2672 8.875C74.1269 6.031 74.0747 1.375 74.0747 0L81.3559 3.58225C81.3559 3.58225 82.8559 6.95725 81.3559 13.8322C79.7127 21.364 78.1064 18.5 76.3922 20.5C74.6422 17.5 72.1422 15.75 68.5172 15.75C72.0172 12.75 72.5114 11.375 73.2672 8.875Z" fill="white"/>
</mask>
<g mask="url(#mask3_21_495)">
<path d="M74.8924 0.375C76.7256 2.625 77.7924 4.425 76.8924 9.625C75.9924 14.825 73.9341 17.5 73.5174 17.5" stroke="black" stroke-opacity="0.12" stroke-width="0.25"/>
<path d="M72.8922 -1.25C74.7254 1 75.7922 2.8 74.8922 8C73.9922 13.2 71.9339 15.875 71.5172 15.875" stroke="black" stroke-opacity="0.12" stroke-width="0.25"/>
<path d="M76.6424 1.75C78.4756 4 79.5424 5.8 78.6424 11C77.7424 16.2 75.6841 18.875 75.2674 18.875" stroke="black" stroke-opacity="0.12" stroke-width="0.25"/>
</g>
<path d="M72.8499 16.7576L72.935 16.9926L72.6529 17.0961C68.98 18.4605 65.112 20.5698 63.7944 22.3771L63.745 22.4465L63.5398 22.3037C64.8468 20.4248 68.7974 18.2615 72.5642 16.8623L72.8499 16.7576Z" fill="black" fill-opacity="0.12"/>
<path d="M72.3442 15.8848L72.4407 16.1154C69.6657 17.2769 66.3566 18.9739 64.6866 20.2758L64.5955 20.3477L64.4393 20.1525C66.0708 18.8473 69.3746 17.1397 72.1883 15.9503L72.3442 15.8848Z" fill="black" fill-opacity="0.12"/>
<path d="M71.2133 15.1372L71.3215 15.3626L71.1141 15.4656C70.8333 15.6103 70.5069 15.8008 69.7912 16.2336L68.6915 16.8996C67.9193 17.3634 67.4287 17.6394 67.0357 17.822L66.9431 17.8641L66.8416 17.6357L66.9317 17.5947C67.33 17.4095 67.8394 17.1212 68.6586 16.6277L70.1387 15.7328C70.5827 15.4678 70.8252 15.3311 71.0544 15.2154L71.2133 15.1372Z" fill="black" fill-opacity="0.12"/>
<path d="M57.9762 44.7458C56.4394 42.9465 53.3664 36.999 52.0859 34.5C50.8479 60.5312 50.1402 116.517 53.1112 116.717C56.8247 116.967 67.5802 118.216 68.3484 115.717C69.1167 113.218 67.0677 55.4915 66.2992 53.1175C65.5307 50.7435 59.8969 46.995 57.9762 44.7458Z" fill="#273447"/>
<path d="M70.5179 44.75C72.0179 42.95 75.0179 37 76.2679 34.5C77.4764 60.5417 78.1674 116.55 75.2671 116.75C71.6419 117 61.1424 118.25 60.3924 115.75C59.6424 113.25 61.6426 55.5 62.3929 53.125C63.1431 50.75 68.6429 47 70.5179 44.75Z" fill="#2B394D"/>
<path d="M77.0174 25.625C78.4146 17.7127 82.8924 2.82925 75.3249 0.375C75.3249 0.375 81.7591 2.233 91.9501 6.125C102.141 10.017 104.014 16.9575 104.014 16.9575C106.275 21.5873 108.879 43.0025 109.517 69.5C110.156 95.9975 108.268 105.375 105.267 117.75C99.8921 119.875 86.6424 121.375 73.1424 122.125C73.1424 119.041 72.6424 111.457 72.5174 107C72.3924 102.543 71.9896 94.847 72.1424 75.625C72.2771 58.6642 74.9641 37.2507 77.0174 25.625Z" fill="#5E82AE"/>
<path d="M12.3924 36.625C17.1737 16.3612 19.45 13.375 36.4499 7.125C36.4499 7.125 28.4811 33.9572 28.4811 45.9572C28.4811 57.9572 30.3561 76.7073 30.3561 76.7073C28.6061 87.2073 32.7321 105.75 30.3571 111.375C23.9822 113.375 5.73126 112.875 2.73224 109.25C-0.266785 105.625 -0.731629 96.625 1.01739 83.75C2.76641 70.875 9.76739 47.75 12.3924 36.625Z" fill="#5E82AE"/>
<path d="M54.2676 29.625C53.0053 21.7127 43.6426 8.375 53.4501 0.75C53.4501 0.75 50.2001 2.375 40.0751 5.625C29.9501 8.875 28.2738 17.2075 28.2738 17.2075C26.2313 21.8373 25.5943 43.7525 25.0176 70.25C24.4409 96.7475 22.9546 104 25.0171 115.5C29.8726 117.625 40.4991 119.957 52.5811 121.582C52.5811 118.499 53.5111 113.942 53.5973 110.457C53.8793 99.0797 56.9631 90.695 56.8251 71.4733C56.7033 54.5125 56.1221 41.2507 54.2676 29.625Z" fill="#5E82AE"/>
<path d="M42.0116 111.047C42.0116 102.725 42.5281 98.0655 43.5106 92.407C43.7649 90.9425 36.8211 87.3587 33.3174 85.75L23.1243 87.0815C21.8663 94.4037 21.4455 105.188 23.1243 106.386C25.2229 107.884 37.0646 113.044 42.0116 111.047Z" fill="#577BA6"/>
<path d="M21.2268 86.2396L22.808 81.7605L24.5001 82.3556C33.0764 85.3594 39.1047 87.2727 44.1194 88.3953L44.2809 88.4312L43.2539 93.0689L42.9152 92.9931C37.7588 91.827 31.7352 89.9182 23.2335 86.9448L21.2268 86.2396Z" fill="#4A6A90"/>
<path d="M130.517 82.25C128.642 71.875 126.267 61.25 123.142 51.5C117.52 33.9573 113.587 20.0087 109.575 13.75C106.311 8.65725 95.5749 7.375 92.9499 6.5L104.267 76.875C104.267 88.375 104.017 101.25 103.517 110.625C109.892 112.625 126.392 114.5 129.392 110.625C132.392 106.75 132.392 92.625 130.517 82.25Z" fill="#5E82AE"/>
<path d="M87.2117 114.402C87.2117 105.848 86.6289 101.058 85.5212 95.2417C85.2342 93.7362 102.026 87.1537 105.978 85.5L107.766 87.7167C107.766 97.5 107.87 109.92 105.977 111.151C103.61 112.691 92.7907 116.454 87.2117 114.402Z" fill="#577BA6"/>
<path d="M107.506 84.7505L109.029 89.2495L108.411 89.4573C102.143 91.5483 93.4001 94.0058 86.4938 95.6506L85.8095 95.8123L84.7253 91.1877L85.3963 91.0291C92.1691 89.416 100.775 86.997 106.901 84.9535L107.506 84.7505Z" fill="#4A6A90"/>
<path d="M127.574 107.318C128.228 107.1 128.564 106.339 128.324 105.618C128.084 104.898 127.358 104.491 126.703 104.71C126.048 104.928 125.712 105.689 125.953 106.41C126.193 107.13 126.919 107.537 127.574 107.318Z" fill="#4A6A90"/>
<path d="M127.809 103.287C128.464 103.068 128.8 102.307 128.559 101.587C128.319 100.866 127.593 100.459 126.938 100.678C126.284 100.897 125.948 101.658 126.188 102.378C126.428 103.098 127.154 103.505 127.809 103.287Z" fill="#4A6A90"/>
<path d="M128.045 99.2544C128.7 99.0358 129.036 98.2747 128.796 97.5544C128.555 96.8341 127.83 96.4273 127.175 96.6458C126.52 96.8643 126.184 97.6255 126.424 98.3458C126.665 99.0661 127.391 99.4729 128.045 99.2544Z" fill="#4A6A90"/>
<path d="M5.00337 105.299C5.61392 104.977 5.82152 104.171 5.46707 103.499C5.11263 102.828 4.33035 102.545 3.7198 102.867C3.10926 103.189 2.90166 103.995 3.2561 104.666C3.61055 105.338 4.39283 105.621 5.00337 105.299Z" fill="#4A6A90"/>
<path d="M4.57955 101.283C5.19009 100.96 5.39769 100.155 5.04325 99.4832C4.6888 98.8116 3.90652 98.5284 3.29598 98.8506C2.68543 99.1729 2.47783 99.9785 2.83228 100.65C3.18672 101.322 3.969 101.605 4.57955 101.283Z" fill="#4A6A90"/>
<path d="M4.15669 97.2656C4.76724 96.9434 4.97484 96.1377 4.62039 95.4661C4.26595 94.7945 3.48367 94.5113 2.87312 94.8336C2.26258 95.1558 2.05498 95.9614 2.40942 96.633C2.76387 97.3046 3.54615 97.5878 4.15669 97.2656Z" fill="#4A6A90"/>
<path d="M42.0189 6C42.8264 3 53.7009 0.625 53.7009 0.625C51.0184 3.375 49.8184 5.3 51.0184 12.5C52.2184 19.7 58.8934 39.375 56.8259 77.375C56.8259 77.375 36.3931 19.5 37.0181 18.375C37.2879 17.8898 39.4761 18.172 41.8774 18.6502C41.6891 14.94 41.4419 8.14275 42.0189 6Z" fill="#4A6A90"/>
<path d="M86.6189 5.625C85.8299 2.625 75.2061 0.25 75.2061 0.25C77.8269 3 78.9991 4.925 77.8269 12.125C76.6546 19.325 70.1334 39 72.1531 77C72.1531 77 92.1146 19.125 91.5041 18C91.2406 17.5148 89.1029 17.797 86.7569 18.2752C86.9409 14.565 87.1824 7.76775 86.6189 5.625Z" fill="#4A6A90"/>
<path d="M65.8926 59.25C66.7901 59.25 67.5176 58.3546 67.5176 57.25C67.5176 56.1454 66.7901 55.25 65.8926 55.25C64.9952 55.25 64.2676 56.1454 64.2676 57.25C64.2676 58.3546 64.9952 59.25 65.8926 59.25Z" fill="#263245"/>
<path d="M65.6426 73C66.5401 73 67.2676 72.1046 67.2676 71C67.2676 69.8954 66.5401 69 65.6426 69C64.7452 69 64.0176 69.8954 64.0176 71C64.0176 72.1046 64.7452 73 65.6426 73Z" fill="#263245"/>
<path d="M65.3926 86.75C66.2901 86.75 67.0176 85.8546 67.0176 84.75C67.0176 83.6454 66.2901 82.75 65.3926 82.75C64.4952 82.75 63.7676 83.6454 63.7676 84.75C63.7676 85.8546 64.4952 86.75 65.3926 86.75Z" fill="#263245"/>
<path d="M65.1426 100.5C66.0401 100.5 66.7676 99.6046 66.7676 98.5C66.7676 97.3954 66.0401 96.5 65.1426 96.5C64.2452 96.5 63.5176 97.3954 63.5176 98.5C63.5176 99.6046 64.2452 100.5 65.1426 100.5Z" fill="#263245"/>
</svg>

'''
'''--- web/assets/glasses1.svg ---
<svg width="66" height="29" viewBox="0 0 66 29" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M29.8298 14.4371C31.046 8.77514 27.6086 3.28396 22.0085 1.94169L17.5287 0.868055C16.8365 0.702252 16.1273 0.604855 15.412 0.577901L12.3325 0.461024C6.20797 0.228856 0.955005 5.06611 0.714836 11.1589L0.503614 16.5169C0.339205 20.6921 2.60656 24.5209 6.33054 26.3565L7.78851 27.0752C10.4292 28.3769 13.5227 28.5326 16.3482 27.5056L22.0566 25.4308C25.6967 24.108 28.4204 20.9994 29.226 17.2487L29.8298 14.4371Z" fill="#D2CFBB"/>
<path d="M36.6596 15.276C35.5456 9.61136 39.036 3.9315 44.604 2.34778L48.9811 1.10267C49.6733 0.905841 50.3814 0.778318 51.0946 0.722145L54.0762 0.486805C60.1451 0.00797217 65.2703 4.67422 65.4159 10.8105L65.5446 16.2299C65.6445 20.4349 63.343 24.3913 59.6292 26.3993L58.2459 27.1472C55.5977 28.5789 52.5139 28.8616 49.7187 27.9289L44.1725 26.0776C40.5953 24.8837 37.9543 21.859 37.2173 18.1119L36.6596 15.276Z" fill="#D2CFBB"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M0.00872778 16.5939L0.21995 11.2359C0.469991 4.89265 5.93354 -0.138393 12.3067 0.103199L15.386 0.220072C16.1303 0.248119 16.8691 0.349433 17.591 0.522343L22.0708 1.59598C27.9104 2.99566 31.4968 8.72518 30.229 14.6272L29.6252 17.4388C28.7868 21.3426 25.9539 24.5757 22.168 25.9515L16.4596 28.0263C13.5191 29.095 10.2978 28.9331 7.54584 27.5765L6.08788 26.8578C2.20324 24.943 -0.162718 20.9477 0.00872778 16.5939ZM15.3519 1.12588L12.2725 1.00901C6.39664 0.786267 1.35414 5.4296 1.12384 11.2721L0.912617 16.63C0.755241 20.6266 2.92405 24.289 6.48732 26.0454L7.9453 26.7641C10.475 28.011 13.4406 28.1602 16.151 27.175L21.8594 25.1002C25.3535 23.8305 27.9682 20.8465 28.7408 17.2488L29.3447 14.4371C30.5093 9.01553 27.2211 3.76248 21.8603 2.47756L17.3806 1.40394C16.7166 1.24491 16.0369 1.1517 15.3519 1.12588Z" fill="#715B4E"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M51.0591 0.270571L54.0406 0.03523C60.3689 -0.464067 65.7162 4.40424 65.868 10.7998L65.9967 16.2191C66.1007 20.5947 63.7074 24.7091 59.844 26.798L58.4607 27.5459C55.7033 29.0367 52.4901 29.3312 49.5757 28.3587L44.0295 26.5075C40.2973 25.2618 37.5419 22.106 36.7735 18.1995L36.2158 15.3636C35.0563 9.46731 38.6863 3.56008 44.4804 1.91204L48.8575 0.666921C49.5786 0.46188 50.3162 0.329077 51.0591 0.270571ZM65.0924 16.2406L64.9637 10.8212C64.8242 4.94397 59.921 0.480001 54.1117 0.938353L51.1301 1.1737C50.4468 1.22751 49.7682 1.34969 49.1046 1.53839L44.7275 2.78349C39.3855 4.30293 36.0349 9.75549 37.1034 15.1884L37.661 18.0243C38.3667 21.612 40.8932 24.5056 44.3154 25.6478L49.8617 27.499C52.5377 28.392 55.492 28.1212 58.031 26.7485L59.4143 26.0006C62.9788 24.0734 65.1883 20.275 65.0924 16.2406Z" fill="#715B4E"/>
<path d="M28.3322 6.86398C31.4697 5.29278 34.7906 5.27817 38.123 6.79029L38.2528 6.84997L37.2995 8.90392C34.5788 7.63709 31.9732 7.61357 29.4595 8.83276L29.3436 8.88991L28.3322 6.86398Z" fill="#715B4E"/>
<path d="M22.6882 1.92666L23.3195 1.98199C30.0678 2.55926 35.0855 2.52134 44.1197 1.92604C44.3067 1.91372 44.4682 2.05552 44.4805 2.24276C44.4928 2.43 44.3512 2.59177 44.1643 2.60409L43.3345 2.65791C34.5118 3.22062 29.5265 3.22225 22.6277 2.60347C22.4411 2.58673 22.3034 2.42166 22.3201 2.23476C22.3358 2.05886 22.4827 1.92632 22.6555 1.92529L22.6882 1.92666Z" fill="#715B4E"/>
</svg>

'''
'''--- web/assets/glasses2.svg ---
<svg width="57" height="19" viewBox="0 0 57 19" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M36.5752 0H52.3196C54.46 0 56.1951 1.7351 56.1951 3.87553V10.1733C56.1951 14.9893 52.2912 18.8932 47.4752 18.8932H41.4197C36.6036 18.8932 32.6997 14.9893 32.6997 10.1733V3.87553C32.6997 1.7351 34.4348 0 36.5752 0ZM52.3194 2.90723H36.5751C36.0399 2.90723 35.6062 3.34097 35.6062 3.87611V10.1738C35.6062 13.3846 38.2088 15.9871 41.4195 15.9871H47.475C50.6857 15.9871 53.2883 13.3846 53.2883 10.1738V3.87611C53.2883 3.34097 52.8546 2.90723 52.3194 2.90723Z" fill="#707070"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M3.87553 0H19.6199C21.7603 0 23.4954 1.7351 23.4954 3.87553V10.1733C23.4954 14.9893 19.5915 18.8932 14.7755 18.8932H8.71994C3.90411 18.8932 0 14.9892 0 10.1733V3.87553C0 1.73516 1.73528 0 3.87553 0ZM19.6202 2.90723H3.87586C3.34087 2.90723 2.90698 3.34108 2.90698 3.87611V10.1738C2.90698 13.3845 5.50972 15.9871 8.72028 15.9871H14.7758C17.9865 15.9871 20.5891 13.3846 20.5891 10.1738V3.87611C20.5891 3.34097 20.1553 2.90723 19.6202 2.90723Z" fill="#707070"/>
<rect x="22.042" y="3.87549" width="12.111" height="2.42221" fill="#A5A5A5"/>
</svg>

'''
'''--- web/assets/glasses3.svg ---
<svg width="63" height="24" viewBox="0 0 63 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M39.5 0H59.5C61.433 0 63 1.56697 63 3.5V16C63 20.004 59.754 23.25 55.75 23.25H49.5C42.0442 23.25 36 17.2058 36 9.75V3.5C36 1.56697 37.567 0 39.5 0ZM59.5 2H39.5C38.6715 2 38 2.67153 38 3.5V9.75C38 16.1012 43.1488 21.25 49.5 21.25H55.75C58.6495 21.25 61 18.8995 61 16V3.5C61 2.67153 60.3285 2 59.5 2Z" fill="#685454" fill-opacity="0.75"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M3.5 0H23.5C25.433 0 27 1.56697 27 3.5V9.75C27 17.2058 20.9558 23.25 13.5 23.25H7.25C3.24597 23.25 0 20.004 0 16V3.5C0 1.56697 1.56697 0 3.5 0ZM23.5 2H3.5C2.67153 2 2 2.67153 2 3.5V16C2 18.8995 4.35053 21.25 7.25 21.25H13.5C19.8512 21.25 25 16.1012 25 9.75V3.5C25 2.67153 24.3285 2 23.5 2Z" fill="#685454" fill-opacity="0.75"/>
<rect x="25.25" y="3.5" width="12.5" height="2" fill="#685454" fill-opacity="0.75"/>
</svg>

'''
'''--- web/assets/head.svg ---
<svg width="93" height="121" viewBox="0 0 93 121" fill="none" xmlns="http://www.w3.org/2000/svg">
<rect x="37" y="79" width="19" height="42" rx="9.5" fill="#EBBAAA"/>
<path opacity="0.5" d="M82.3551 75.0886C87.706 75.0886 92.0439 70.7507 92.0439 65.3998C92.0439 60.0489 87.706 55.7109 82.3551 55.7109C77.0042 55.7109 72.6663 60.0489 72.6663 65.3998C72.6663 70.7507 77.0042 75.0886 82.3551 75.0886Z" fill="#DE8E7C"/>
<path opacity="0.5" d="M9.68883 75.0886C4.33783 75.0886 0 70.7507 0 65.3998C0 60.0489 4.33783 55.7109 9.68883 55.7109C15.0397 55.7109 19.3777 60.0489 19.3777 65.3998C19.3777 70.7507 15.0397 75.0886 9.68883 75.0886Z" fill="#DE8E7C"/>
<path d="M10.1733 41.662C10.1733 21.5957 26.4402 5.32886 46.5064 5.32886C66.5727 5.32886 82.8395 21.5957 82.8395 41.662V70.7284C82.8395 90.7947 66.5727 107.062 46.5064 107.062C26.4402 107.062 10.1733 90.7947 10.1733 70.7284V41.662Z" fill="#F4D5CC"/>
<path d="M70.1079 42.9985C71.3096 42.9234 72.3446 43.8366 72.4197 45.0382C72.4934 46.218 71.6144 47.2371 70.4452 47.3449L70.3799 47.3499L56.8156 48.1977C55.6139 48.2728 54.5789 47.3596 54.5038 46.158C54.4301 44.9782 55.3091 43.959 56.4783 43.8513L56.5436 43.8462L70.1079 42.9985Z" fill="#393939"/>
<path d="M19.6242 45.0382C19.6979 43.8584 20.697 42.9567 21.8705 42.9953L21.9359 42.9985L35.5003 43.8462C36.7019 43.9213 37.6151 44.9563 37.54 46.158C37.4663 47.3377 36.4673 48.2395 35.2937 48.2008L35.2283 48.1977L21.6639 47.3499C20.4623 47.2748 19.5491 46.2398 19.6242 45.0382Z" fill="#393939"/>
<path d="M61.7663 54.9841C63.3469 54.9841 64.6328 56.2457 64.672 57.8169L64.6729 57.8908V60.7974C64.6729 62.4027 63.3716 63.7041 61.7663 63.7041C60.1857 63.7041 58.8997 62.4425 58.8605 60.8713L58.8596 60.7974V57.8908C58.8596 56.2855 60.161 54.9841 61.7663 54.9841Z" fill="black"/>
<path d="M30.3986 54.9841C31.9792 54.9841 33.2651 56.2457 33.3043 57.8169L33.3052 57.8908V60.7974C33.3052 62.4027 32.0039 63.7041 30.3986 63.7041C28.818 63.7041 27.5321 62.4425 27.4929 60.8713L27.4919 60.7974V57.8908C27.4919 56.2855 28.7933 54.9841 30.3986 54.9841Z" fill="black"/>
<path d="M54.7756 86.0703C55.6668 85.5538 56.8079 85.8576 57.3244 86.7488C57.8408 87.64 57.5371 88.7811 56.6459 89.2975L56.5264 89.3639C56.4897 89.3837 56.448 89.4057 56.4012 89.4298C56.2356 89.5153 56.0434 89.6081 55.8251 89.7064C55.2215 89.978 54.519 90.2462 53.7212 90.4943C51.4781 91.1918 48.9004 91.6078 46.0219 91.6078C43.1434 91.6078 40.5657 91.1918 38.3226 90.4943C37.5249 90.2462 36.8224 89.978 36.2187 89.7064C36.0368 89.6245 35.8731 89.5464 35.7277 89.4732L35.6427 89.4298C35.5335 89.3735 35.4518 89.3287 35.3979 89.2975C34.5068 88.7811 34.203 87.64 34.7195 86.7488C35.2252 85.8762 36.3298 85.5667 37.2122 86.0391L37.3193 86.0984C37.392 86.1369 37.5176 86.1994 37.6947 86.2801L37.7494 86.3049C38.2181 86.5158 38.7797 86.7302 39.4303 86.9325C41.3251 87.5217 43.5313 87.8778 46.0219 87.8778C48.5126 87.8778 50.7187 87.5217 52.6136 86.9325C53.2099 86.747 53.7315 86.5514 54.1753 86.3577L54.2944 86.3049C54.5006 86.2121 54.6446 86.1407 54.7245 86.0984L54.7756 86.0703Z" fill="#C99584"/>
<path d="M83.5639 33.06C83.6203 31.541 82.5204 30.2778 81.1438 30.2778C79.7157 30.2778 78.5976 31.6328 78.7328 33.2014L81.0133 69.4626C81.0515 69.9068 81.389 70.2442 81.7915 70.2442C82.2123 70.2442 82.5562 69.8795 82.5744 69.4178L83.5639 33.06Z" fill="#6E6C6C"/>
<path d="M13.32 33.06C13.3764 31.541 12.2765 30.2778 10.8999 30.2778C9.4718 30.2778 8.35371 31.6328 8.48887 33.2014L10.7694 69.4626C10.8076 69.9068 11.1451 70.2442 11.5476 70.2442C11.9684 70.2442 12.3123 69.8795 12.3305 69.4178L13.32 33.06Z" fill="#6E6C6C"/>
<path d="M46.6116 1.32623C53.0912 -1.60937 66.6524 0.0440998 71.1873 9.15938C79.0396 9.15938 86.5237 16.9882 84.5607 26.6237C88.3261 29.6049 89.5664 35.7732 86.2311 39.9333L86.1286 40.0587C82.6661 44.2196 83.0505 48.5687 79.8982 44.2087C78.1291 41.0509 76.3303 38.5162 74.4044 36.4829L74.3516 36.9755C74.2378 38.0568 74.1271 39.2293 74.0304 40.5076L73.7077 40.0744C68.5068 33.1244 66.7071 32.2901 59.5357 31.7505C57.1566 33.7198 57.9712 37.7608 62.9871 39.9807C57.636 39.9807 46.355 37.7608 46.6728 32.3011L46.5416 32.3704C44.3934 33.4779 42.0159 33.4654 42.0159 39.1245C37.7543 34.4012 29.7435 28.3776 21.1055 34.9016C15.57 39.0822 14.0368 42.5426 12.7554 50.5059L12.7166 50.7486L9.82958 44.868C9.18586 43.7456 8.42787 41.9549 6.98593 40.1823L6.88421 40.0587C3.42172 35.8981 4.64876 29.635 8.45211 26.6237C6.48915 16.9882 13.9733 9.15938 21.8256 9.15938C26.3853 -0.00579071 40.0704 -1.62724 46.507 1.37484L46.6116 1.32623Z" fill="#393939"/>
<path d="M44.3088 61.8354L47.7349 64.1196C46.5705 65.8663 45.6585 68.4881 45.6585 70.3955C45.6585 72.2343 46.3224 73.0075 48.3548 73.0292L48.4441 73.0297V77.1474C43.9525 77.1474 41.5408 74.4342 41.5408 70.3955C41.5408 67.6596 42.679 64.3385 44.2241 61.964L44.3088 61.8354Z" fill="#EBBAAA"/>
</svg>

'''
'''--- web/assets/pants1.svg ---
<svg width="70" height="128" viewBox="0 0 70 128" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M53.25 87.875L51 120.5" stroke="#EBBAAA" stroke-width="13.5" stroke-linecap="round" stroke-linejoin="bevel"/>
<path d="M16.75 87.875L19 120" stroke="#EBBAAA" stroke-width="13.5" stroke-linecap="round" stroke-linejoin="bevel"/>
<path d="M35 29.5C50.8783 29.5 63.75 22.8962 63.75 14.75C63.75 6.60375 50.8783 0 35 0C19.1217 0 6.25 6.60375 6.25 14.75C6.25 22.8962 19.1217 29.5 35 29.5Z" fill="#4D5457"/>
<path d="M36.25 11.25H70L65.0985 99.3725L61.8595 108.325L42.9237 110L41.1145 101.375L36.25 11.25Z" fill="#4D5457"/>
<path d="M41.25 108H62.5L61.4635 113.5H42.22L41.25 108Z" fill="#434A4C"/>
<path d="M33.75 11.25H0L4.9015 99.3725L8.1405 108.325L27.0763 110L28.8855 101.375L33.75 11.25Z" fill="#4D5457"/>
<path d="M28.75 108H7.5L8.5365 113.5H27.78L28.75 108Z" fill="#434A4C"/>
</svg>

'''
'''--- web/assets/pants2.svg ---
<svg width="71" height="114" viewBox="0 0 71 114" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M22.6926 55.0001C26.7113 55.0207 29.958 57.8953 29.9997 61.4429L30 61.5506L29 107.557C27.8002 111.532 26.3666 114.021 22.3074 114C18.2887 113.979 15.042 111.105 15.0003 107.557L15 107.449L15.3002 61.4753C15.3237 57.8783 18.6334 54.9793 22.6926 55.0001Z" fill="#EBBAAA"/>
<path d="M54.7675 46.5106C58.8371 46.5342 62.1249 49.8194 62.1672 53.8737L62.1675 53.9968L61.8634 106.535C61.8397 110.645 58.488 113.959 54.3773 113.935C50.3077 113.911 50.0224 110.463 48.5 106.535L47.2813 53.9106C47.3051 49.7999 50.6568 46.4868 54.7675 46.5106Z" fill="#EBBAAA"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M0 0H33.3635H34.4336H68.1878L70.3635 88.3326L66.0194 94.4925C64.7585 96.2804 62.7709 97.4184 60.5907 97.6006L43.849 99L42.6921 91.6038L36.3566 29.391C35.4502 29.4597 34.53 29.5088 33.598 29.5374L31.883 90.165L31.1178 98.9647L14.5061 98.0962C12.6374 97.9984 10.8692 97.2193 9.53602 95.9062L3.70735 90.165L0 0Z" fill="#FBCA81"/>
</svg>

'''
'''--- web/assets/pants3.svg ---
<svg width="79" height="125" viewBox="0 0 79 125" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M50.7872 84.7362C51.14 81.025 54.4345 78.3025 58.1457 78.6553C61.8198 79.0045 64.5249 82.2369 64.2363 85.9025L64.2266 86.0137L61.1016 118.889C60.7489 122.6 57.4544 125.322 53.7432 124.97C50.0691 124.62 47.364 121.388 47.6526 117.722L47.6622 117.611L50.7872 84.7362Z" fill="#EBBAAA"/>
<path d="M20.3682 78.6553C24.0423 78.306 27.3079 80.9709 27.7152 84.6252L27.7266 84.7362L30.8516 117.611C31.2044 121.322 28.4819 124.617 24.7707 124.97C21.0966 125.319 17.8309 122.654 17.4237 119L17.4122 118.889L14.2872 86.0137C13.9345 82.3025 16.657 79.008 20.3682 78.6553Z" fill="#EBBAAA"/>
<path d="M10.751 112.615C11.0923 112.462 11.4924 112.616 11.6447 112.957C12.1321 114.05 12.2411 115.082 12.2406 116.848C12.2405 117.322 11.768 117.644 11.3313 117.483L11.2917 117.467L8.02698 116.033L8.72154 118.539C8.86162 119.045 8.39987 119.505 7.90196 119.376L7.86258 119.364L4.57923 118.31L4.57937 121.263C4.57937 121.761 4.06223 122.083 3.61918 121.877L3.5814 121.858L1.35348 120.656L1.35342 122.87C1.35341 123.23 1.07245 123.524 0.717908 123.546L0.676685 123.547C0.31679 123.547 0.0225248 123.266 0.00123347 122.911L0 122.87L0.000125 119.523C0.000143597 119.024 0.517273 118.702 0.960315 118.908L0.998095 118.927L3.22573 120.129L3.22595 117.383C3.22595 116.938 3.64522 116.619 4.06852 116.726L4.10949 116.738L7.08248 117.692L6.34203 115.021C6.19323 114.484 6.71868 114.013 7.22986 114.206L7.26633 114.22L10.8672 115.802L10.8639 115.725C10.8189 114.833 10.7008 114.194 10.4418 113.584L10.4086 113.508C10.2564 113.167 10.4097 112.767 10.751 112.615Z" fill="white"/>
<path d="M66.8691 112.957C67.0214 112.616 67.4215 112.462 67.7628 112.615C68.1042 112.767 68.2574 113.167 68.1052 113.508C67.8229 114.141 67.6968 114.795 67.65 115.725L67.6462 115.802L71.2475 114.22C71.7576 113.996 72.2984 114.449 72.1813 114.983L72.1718 115.021L71.4312 117.692L74.4043 116.738C74.8275 116.602 75.26 116.904 75.2866 117.34L75.2879 117.383L75.2877 120.129L77.5156 118.927C77.954 118.691 78.4833 118.993 78.5124 119.48L78.5136 119.522L78.5139 122.87C78.5139 123.244 78.211 123.547 77.8372 123.547C77.4773 123.547 77.183 123.266 77.1617 122.911L77.1605 122.87L77.16 120.656L74.9324 121.858C74.4941 122.095 73.9648 121.793 73.9357 121.305L73.9345 121.263L73.9342 118.311L70.6512 119.364C70.1518 119.525 69.6737 119.082 69.7825 118.579L69.7923 118.539L70.4867 116.033L67.2221 117.467C66.7881 117.658 66.3028 117.355 66.2745 116.89L66.2732 116.848L66.2742 116.56C66.286 114.967 66.4088 113.989 66.8691 112.957Z" fill="white"/>
<path d="M39.2569 29.5C55.1351 29.5 68.0069 22.8962 68.0069 14.75C68.0069 6.60375 55.1351 0 39.2569 0C23.3786 0 10.5069 6.60375 10.5069 14.75C10.5069 22.8962 23.3786 29.5 39.2569 29.5Z" fill="#999999"/>
<path d="M40.5069 8.75H74.2569L69.3554 96.8725L66.1164 105.825L47.1806 107.5L45.3714 98.875L40.5069 8.75Z" fill="#999999"/>
<path d="M45.5069 105.5H66.7569L65.7204 111H46.4769L45.5069 105.5Z" fill="#E2E2E2"/>
<path d="M38.0069 8.75H4.2569L9.1584 96.8725L12.3974 105.825L31.3331 107.5L33.1424 98.875L38.0069 8.75Z" fill="#999999"/>
<path d="M33.0069 105.5H11.7569L12.7934 111H32.0369L33.0069 105.5Z" fill="#E2E2E2"/>
<path d="M67.9717 18.5419C69.5459 18.1419 73.1182 15.9176 73.7234 16.2924C75.3884 18.0419 74.3289 62.5251 73.4207 63.9001C72.5124 65.2751 64.7932 65.7751 64.7932 63.9001C64.7932 62.0251 64.6419 55.5276 64.7932 50.4051C64.9444 45.2826 62.3714 19.6664 63.5824 19.2916C64.7932 18.9166 66.0042 19.0416 67.9717 18.5419Z" fill="#777777"/>
<path d="M66.0042 20.4157C67.2149 20.291 72.2099 18.5415 73.7234 17.417C74.7829 18.5415 76.5992 26.2887 74.6317 27.2882C72.6639 28.288 67.5177 28.163 66.9122 27.2882C66.3067 26.4135 64.7932 20.5407 66.0042 20.4157Z" fill="#595A5B"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M66.3355 21.8157L66.5803 21.7649C66.6721 22.2071 66.7834 22.7232 66.8965 23.2292L66.6525 23.2837C66.5675 22.9034 66.4835 22.5172 66.4079 22.1609L66.3355 21.8157ZM66.9936 24.7477L67.2364 24.6882C67.3731 25.2463 67.493 25.6952 67.5904 26.0081L67.6282 26.1259L67.3909 26.2045C67.3034 25.9402 67.1966 25.5562 67.0743 25.0724L66.9936 24.7477ZM68.6996 26.9518C69.1471 27.0161 69.6718 27.0609 70.2081 27.0784L70.2162 26.8285C69.6889 26.8113 69.1734 26.7673 68.7352 26.7043L68.6996 26.9518ZM73.2293 26.8107C72.7932 26.9281 72.285 27.0072 71.7249 27.0498L71.7059 26.8005C72.2515 26.759 72.7447 26.6823 73.1643 26.5693L73.2293 26.8107Z" fill="#2B2B2B"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M73.363 16.9312L73.4783 17.153C73.2165 17.2891 72.9204 17.4402 72.6104 17.5959L72.1376 17.8314L72.0268 17.6073C72.3976 17.4241 72.7632 17.2398 73.0915 17.0713L73.363 16.9312ZM70.6777 18.2568L70.7835 18.4833C70.272 18.7223 69.8086 18.9295 69.4088 19.0964L69.3125 18.8657C69.6295 18.7333 69.9875 18.5752 70.3784 18.3955L70.6777 18.2568ZM67.963 19.5757L67.915 19.3303L67.7461 19.3627C67.3931 19.4292 66.9505 19.5058 66.4415 19.5891L66.4819 19.8358L66.8523 19.7744C67.289 19.701 67.665 19.6339 67.963 19.5757ZM64.2061 19.9339L64.9609 19.822L64.9984 20.0692L64.4721 20.1475L64.5252 20.8826L64.2759 20.9006L64.2061 19.9339ZM64.3837 22.3964L64.4912 23.8921L64.7406 23.8742L64.6331 22.3784L64.3837 22.3964ZM64.7057 26.8852L64.5986 25.389L64.848 25.3711L64.9551 26.8674L64.7057 26.8852ZM64.8125 28.3803L64.919 29.8762L65.1684 29.8585L65.0618 28.3625L64.8125 28.3803ZM65.1311 32.8688L65.0252 31.3727L65.2746 31.355L65.3805 32.8512L65.1311 32.8688ZM65.2365 34.3652L65.3414 35.8617L65.5908 35.8442L65.4859 34.3477L65.2365 34.3652ZM65.5487 38.855L65.4456 37.3586L65.695 37.3413L65.7981 38.8379L65.5487 38.855ZM65.6499 40.3506L65.7278 41.5401C65.734 41.6372 65.74 41.739 65.7457 41.8459L65.9954 41.8325L65.9835 41.6237L65.8993 40.334L65.6499 40.3506ZM65.8036 43.3414L66.0535 43.3345C66.0599 43.5624 66.0657 43.8017 66.0709 44.0521L66.0852 44.8362L65.8352 44.8401C65.8299 44.5003 65.8239 44.1775 65.8169 43.8721L65.8036 43.3414ZM66.1026 46.3376L65.8526 46.3397L65.8588 47.3241C65.8595 47.4934 65.8602 47.6651 65.8607 47.8394L66.1107 47.8387L66.1075 47.0708C66.1062 46.8206 66.1046 46.5762 66.1026 46.3376ZM65.8619 49.3384L66.1119 49.3386C66.1117 49.533 66.1114 49.7296 66.111 49.9286L66.108 50.8392L65.858 50.8382L65.8592 50.5314L65.8619 49.3384ZM65.8499 52.3376L65.8383 53.8376L66.0883 53.8398L66.0999 52.3393L65.8499 52.3376ZM65.8067 56.8371L65.8238 55.3372L66.0738 55.3398L66.0567 56.8401L65.8067 56.8371ZM65.7873 58.3357L65.7659 59.8355L66.0158 59.8392L66.0373 58.3391L65.7873 58.3357ZM65.7429 61.3354L65.9928 61.3394C65.9813 62.0779 65.978 62.298 65.9776 62.3839L65.9791 62.4303C65.987 62.5157 66.0263 62.6322 66.0949 62.7559L65.8762 62.877C65.7801 62.7036 65.7276 62.5337 65.7276 62.3998L65.7429 61.3354ZM67.0939 63.8782C67.5287 64.0504 68.039 64.138 68.6227 64.1273L68.6181 63.8774C68.0667 63.8874 67.5892 63.8055 67.186 63.6458L67.0939 63.8782ZM71.5676 63.4401C71.0598 63.6449 70.5795 63.8025 70.1263 63.9149L70.0661 63.6723C70.5076 63.5627 70.9769 63.4088 71.4741 63.2083L71.5676 63.4401Z" fill="#2B2B2B"/>
<path d="M10.5422 18.5419C8.96792 18.1419 5.39567 15.9176 4.79042 16.2924C3.12542 18.0419 4.18492 62.5251 5.09317 63.9001C6.00142 65.2751 13.7207 65.7751 13.7207 63.9001C13.7207 62.0251 13.8719 55.5276 13.7207 50.4051C13.5694 45.2826 16.1424 19.6664 14.9314 19.2916C13.7207 18.9166 12.5097 19.0416 10.5422 18.5419Z" fill="#777777"/>
<path d="M12.5097 20.4157C11.2989 20.291 6.3039 18.5415 4.7904 17.417C3.7309 18.5415 1.91465 26.2887 3.88215 27.2882C5.8499 28.288 10.9962 28.163 11.6017 27.2882C12.2072 26.4135 13.7207 20.5407 12.5097 20.4157Z" fill="#595A5B"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M11.9335 21.7651L12.1783 21.816C12.1207 22.0931 12.0556 22.3992 11.9871 22.7135L11.8613 23.284L11.6173 23.2294C11.7022 22.85 11.7859 22.4648 11.8613 22.1094L11.9335 21.7651ZM11.2774 24.688L11.5202 24.7475C11.3822 25.3108 11.2611 25.7644 11.1616 26.0837L11.1229 26.2042L10.8856 26.1257C10.9648 25.8863 11.0614 25.5422 11.1717 25.1107L11.2774 24.688ZM9.77861 26.7041C9.34044 26.7671 8.82488 26.8111 8.29764 26.8283L8.30577 27.0781C8.84199 27.0607 9.3667 27.0159 9.81418 26.9516L9.77861 26.7041ZM5.34952 26.5691C5.76909 26.682 6.26226 26.7588 6.8079 26.8002L6.78894 27.0495C6.22877 27.0069 5.72056 26.9279 5.28455 26.8105L5.34952 26.5691Z" fill="#2B2B2B"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M5.03552 17.1532L5.15081 16.9314C5.45508 17.0895 5.80599 17.2682 6.17119 17.4506L6.48696 17.6075L6.37622 17.8316C6.05744 17.6741 5.74238 17.5158 5.45139 17.3673L5.03552 17.1532ZM7.73029 18.4831L7.83613 18.2566C8.34468 18.4943 8.80506 18.7 9.20131 18.8655L9.10499 19.0962C8.78514 18.9626 8.42458 18.8033 8.03128 18.6226L7.73029 18.4831ZM10.5987 19.3301L10.5508 19.5754L10.906 19.6423C11.2264 19.7008 11.606 19.7658 12.0319 19.8356L12.0723 19.5889L11.5863 19.5079C11.2011 19.4425 10.8675 19.3826 10.5987 19.3301ZM14.0416 20.1472L13.5154 20.069L13.5529 19.8218L14.3077 19.9337L14.2379 20.9003L13.9885 20.8823L14.0416 20.1472ZM13.8807 22.3782L13.7732 23.874L14.0226 23.8919L14.1301 22.3961L13.8807 22.3782ZM13.5587 26.8672L13.6658 25.3708L13.9152 25.3887L13.8081 26.885L13.5587 26.8672ZM13.452 28.3623L13.3454 29.8582L13.5948 29.876L13.7013 28.3801L13.452 28.3623ZM13.1333 32.851L13.2392 31.3547L13.4885 31.3724L13.3827 32.8686L13.1333 32.851ZM13.0279 34.3474L12.923 35.844L13.1724 35.8614L13.2772 34.3649L13.0279 34.3474ZM12.7157 38.8377L12.8188 37.3411L13.0682 37.3583L12.9651 38.8547L12.7157 38.8377ZM12.6144 40.3337L12.5364 41.5239L12.5184 41.8323L12.768 41.8457L12.7859 41.5399L12.8639 40.3504L12.6144 40.3337ZM12.4602 43.3342L12.7102 43.3412C12.7023 43.6254 12.6952 43.9274 12.6889 44.2467L12.6785 44.8399L12.4286 44.836C12.4349 44.4275 12.4424 44.0435 12.4511 43.6846L12.4602 43.3342ZM12.6611 46.3394L12.4112 46.3374L12.4077 46.8223C12.4056 47.1508 12.4041 47.4896 12.4031 47.8385L12.6531 47.8392L12.6577 46.8239C12.6587 46.6598 12.6599 46.4983 12.6611 46.3394ZM12.4018 49.3384L12.6518 49.3381L12.6522 49.6312L12.6557 50.8379L12.4057 50.839L12.4046 50.532L12.4018 49.3384ZM12.4138 52.3391L12.4254 53.8395L12.6754 53.8373L12.6638 52.3374L12.4138 52.3391ZM12.4571 56.8399L12.44 55.3396L12.69 55.3369L12.7071 56.8368L12.4571 56.8399ZM12.4765 58.3389L12.4979 59.839L12.7479 59.8353L12.7265 58.3354L12.4765 58.3389ZM12.5209 61.3391L12.7709 61.3352C12.7817 62.0271 12.7853 62.2635 12.786 62.3632L12.7842 62.4455C12.774 62.5713 12.723 62.7226 12.6376 62.8768L12.4189 62.7556C12.496 62.6165 12.5362 62.4865 12.5362 62.3996L12.5209 61.3391ZM11.3278 63.6455C10.9246 63.8052 10.4471 63.8872 9.89564 63.8771L9.89108 64.1271C10.4748 64.1377 10.9851 64.0502 11.4199 63.8779L11.3278 63.6455ZM7.03964 63.208C7.53693 63.4086 8.00619 63.5625 8.44768 63.672L8.38748 63.9147C7.93433 63.8022 7.45399 63.6447 6.94614 63.4399L7.03964 63.208Z" fill="#2B2B2B"/>
</svg>

'''
'''--- web/assets/shoes1.svg ---
<svg width="102" height="27" viewBox="0 0 102 27" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M101.705 21.1126C102.176 19.9451 101.837 18.3451 101.573 17.9076C101.309 17.4726 69.2772 15.4701 69.2772 15.4701C63.9605 15.0351 53.422 13.2051 52.6937 16.3551C51.7927 20.2526 51.834 21.1326 52.448 24.1501C53.4305 25.1551 63.3695 26.0351 66.592 25.2801C66.592 23.5201 66.843 22.3901 66.843 22.3901C66.843 22.3901 68.6392 23.5301 70.7467 24.0251C75.045 25.0301 75.868 26.0351 89.1815 26.0351C99.8595 25.0301 100.65 23.7251 101.705 21.1126Z" fill="#272727"/>
<path d="M67.0622 4.16248C64.3917 4.19748 60.315 3.31748 58.0942 0.229982C57.8997 -0.0400185 57.5012 -0.0825185 57.2745 0.159982C55.2755 2.31498 56.5702 1.08998 55.7677 4.79248C54.9757 8.44748 54.3072 7.92498 53.5152 11.32C52.967 13.67 51.1912 19.1525 53.5152 19.1525H64.1147C66.6225 19.1525 70.0095 22.0725 78.3605 22.8925C92.223 24.255 95.6105 22.39 98.3785 21.51C104.676 19.5075 101.48 14.9275 98.3785 13.465C93.8345 11.32 87.3222 9.70998 84.0097 7.93248C81.4305 6.54998 80.5447 6.11998 79.2202 4.66498C77.5285 2.80498 76.812 1.61748 76.2755 0.692482C76.0532 0.309982 75.448 0.394982 75.2122 0.769982C73.75 3.09998 69.5287 4.12998 67.0622 4.16248Z" fill="#563D2A"/>
<path d="M75.41 1.77539C74.867 2.99789 72.6882 4.37039 72.6882 5.32289L78.044 3.40789L75.41 7.30539L80.4287 5.86789L78.044 9.19039L83.688 8.04539L80.4287 11.2029" stroke="#2C221B" stroke-width="1.35342" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M96.7747 17.6953C94.4342 18.4053 90.8635 19.4153 85.4917 18.2878" stroke="#7C593E" stroke-width="1.75" stroke-linecap="round"/>
<path d="M78.8982 11.0751C76.4422 8.81264 74.6157 7.68264 72.6507 5.16764C71.5865 5.16764 70.1812 5.29264 66.1287 5.29264C60.848 5.29264 59.448 3.03014 57.1147 0.390137C55.3422 1.52264 56.255 3.91014 55.027 7.18014C54.0445 9.79514 52.2022 13.7151 52.2022 18.4926C53.062 20.0001 61.5357 19.2476 64.2375 19.2476C64.8515 16.2301 69.6405 13.7151 71.7727 13.0876C73.6442 12.5351 75.828 12.3326 78.8982 11.0751Z" fill="#423023"/>
<path d="M0.294949 21.1126C-0.176151 19.9451 0.162849 18.3451 0.426674 17.9076C0.690499 17.4726 32.7227 15.4701 32.7227 15.4701C38.0395 15.0351 48.578 13.2051 49.3062 16.3551C50.2072 20.2526 50.166 21.1326 49.5518 24.1501C48.5695 25.1551 38.6305 26.0351 35.408 25.2801C35.408 23.5201 35.157 22.3901 35.157 22.3901C35.157 22.3901 33.3607 23.5301 31.2532 24.0251C26.955 25.0301 26.132 26.0351 12.8185 26.0351C2.14055 25.0301 1.34947 23.7251 0.294949 21.1126Z" fill="#272727"/>
<path d="M34.9377 4.16199C37.6082 4.19699 41.685 3.31699 43.9057 0.229493C44.1002 -0.0405068 44.4987 -0.0830068 44.7255 0.159493C46.7242 2.31449 45.4297 1.08949 46.2322 4.79199C47.0242 8.44699 47.6927 7.92449 48.4847 11.3195C49.033 13.6695 50.8087 19.152 48.4847 19.152H37.8852C35.3775 19.152 31.9905 22.072 23.6395 22.892C9.77695 24.2545 6.38942 22.3895 3.62152 21.5095C-2.67633 19.507 0.519697 14.927 3.62152 13.4645C8.16545 11.3195 14.6777 9.70949 17.9902 7.93199C20.5695 6.54949 21.4552 6.11949 22.7797 4.66449C24.4715 2.80449 25.188 1.61699 25.7245 0.691993C25.9467 0.309493 26.552 0.394493 26.7877 0.769493C28.25 3.09949 32.4712 4.12949 34.9377 4.16199Z" fill="#563D2A"/>
<path d="M26.59 1.77539C27.133 2.99789 29.3118 4.37039 29.3118 5.32289L23.956 3.40789L26.59 7.30539L21.571 5.86789L23.956 9.19039L18.312 8.04539L21.571 11.2029" stroke="#2C221B" stroke-width="1.35342" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M5.22522 17.6953C7.56564 18.4053 11.1366 19.4153 16.5082 18.2878" stroke="#7C593E" stroke-width="1.75" stroke-linecap="round"/>
<path d="M23.1017 11.0751C25.5577 8.81264 27.3842 7.68264 29.3492 5.16764C30.4135 5.16764 31.8185 5.29264 35.8712 5.29264C41.152 5.29264 42.552 3.03014 44.8852 0.390137C46.6577 1.52264 45.745 3.91014 46.973 7.18014C47.9555 9.79514 49.7977 13.7151 49.7977 18.4926C48.938 20.0001 40.4642 19.2476 37.7625 19.2476C37.1482 16.2301 32.3595 13.7151 30.2272 13.0876C28.3557 12.5351 26.172 12.3326 23.1017 11.0751Z" fill="#423023"/>
</svg>

'''
'''--- web/assets/shoes2.svg ---
<svg width="112" height="25" viewBox="0 0 112 25" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M65.491 11L65.0723 0H81.5723V11H65.491Z" fill="#C6C6C7"/>
<path d="M108.425 24.255C108.475 18.5175 107.694 15.0275 102.706 12.6825C97.719 10.3375 93.021 5.83004 84.3928 1.96504C84.3928 1.96504 83.257 1.75254 81.4083 2.75254C79.8305 3.60504 77.804 5.69754 74.7508 5.67254C71.435 5.64254 68.4803 4.94004 66.6445 3.97754C65.8515 1.80504 64.092 1.79004 64.092 1.79004C64.092 1.79004 61.6148 6.50504 61.5735 11.2425C61.532 15.9775 61.5363 23.845 61.5363 23.845L108.425 24.255Z" fill="#504D5A"/>
<path d="M88.2427 8.30004C88.0995 8.819 88.5903 9.28924 89.1027 9.12406L92.4138 8.05665V11.0525C92.4138 11.5653 92.962 11.8918 93.4129 11.6475L95.6621 10.4288V12.6775C95.6621 13.0512 95.9651 13.3542 96.3388 13.3542C96.7125 13.3542 97.0155 13.0512 97.0155 12.6775V9.29249C97.0155 8.77967 96.4673 8.4532 96.0164 8.69751L93.7673 9.91617V7.12749C93.7673 6.66842 93.3199 6.34257 92.8829 6.48342L89.8808 7.4512L90.6301 4.73495C90.7819 4.18495 90.2267 3.70557 89.7047 3.93585L86.0703 5.5391C86.09 5.09038 86.1292 4.72832 86.202 4.3325C86.2792 3.91303 86.3892 3.53724 86.5359 3.2075C86.6877 2.86601 86.534 2.46606 86.1926 2.31418C85.8511 2.1623 85.4511 2.31601 85.2992 2.65749C85.106 3.09203 84.9664 3.5689 84.871 4.08749C84.7303 4.8518 84.6993 5.47792 84.6993 6.58499C84.6993 7.07389 85.2019 7.40146 85.6492 7.20414L88.9462 5.74968L88.2427 8.30004Z" fill="white"/>
<path d="M65.2141 4.28516C66.1771 5.59266 69.6501 6.37516 70.9568 6.56766C72.2636 6.76016 73.6636 6.59016 73.1033 8.75266C72.7071 10.2802 68.8996 9.66266 67.4108 9.65016C66.2003 9.63766 64.5028 13.2977 63.8708 12.0552C63.8708 7.80516 64.6726 5.50266 65.2141 4.28516Z" fill="#29282D"/>
<path d="M106.539 13.1224C105.008 12.5674 103.388 12.1474 100.281 11.4424L101.601 15.2449L101.563 19.5749L110.407 19.6524C110.767 19.6549 111.412 19.1749 111.105 17.2224C110.72 14.7824 108.713 13.9099 106.539 13.1224Z" fill="#29282D"/>
<path d="M91.9092 12.344L87.7894 20.1965L91.6246 22.2086L95.7444 14.3561L91.9092 12.344Z" fill="white"/>
<path d="M86.2325 9.37109L81.2958 18.8061L85.1332 20.814L90.0699 11.379L86.2325 9.37109Z" fill="white"/>
<path d="M80.6663 6.10352L73.8403 19.401L77.6932 21.3789L84.5192 8.08135L80.6663 6.10352Z" fill="white"/>
<path d="M61.0018 23.1024L61.2603 18.5474L101.216 19.1674L111.179 18.4424L111.483 21.9324C111.589 23.1399 110.683 24.1974 109.474 24.2799L101.167 24.8499L62.066 24.2474C61.4508 24.2374 60.967 23.7174 61.0018 23.1024Z" fill="#DDDDDD"/>
<path d="M46.0006 11L46.4193 0H29.9193V11H46.0006Z" fill="#C6C6C7"/>
<path d="M3.06632 24.255C3.01632 18.5175 3.79782 15.0275 8.78532 12.6825C13.7726 10.3375 18.4706 5.83004 27.0988 1.96504C27.0988 1.96504 28.2346 1.75254 30.0833 2.75254C31.6611 3.60504 33.6876 5.69754 36.7408 5.67254C40.0566 5.64254 43.0113 4.94004 44.8471 3.97754C45.6401 1.80504 47.3996 1.79004 47.3996 1.79004C47.3996 1.79004 49.8768 6.50504 49.9181 11.2425C49.9596 15.9775 49.9553 23.845 49.9553 23.845L3.06632 24.255Z" fill="#504D5A"/>
<path d="M23.2489 8.30004C23.3921 8.819 22.9013 9.28924 22.389 9.12406L19.0778 8.05665V11.0525C19.0778 11.5653 18.5296 11.8918 18.0787 11.6475L15.8295 10.4288V12.6775C15.8295 13.0512 15.5266 13.3542 15.1528 13.3542C14.7791 13.3542 14.4761 13.0512 14.4761 12.6775V9.29249C14.4761 8.77967 15.0243 8.4532 15.4752 8.69751L17.7244 9.91617V7.12749C17.7244 6.66842 18.1718 6.34257 18.6087 6.48342L21.6108 7.4512L20.8615 4.73495C20.7098 4.18495 21.265 3.70557 21.787 3.93585L25.4213 5.5391C25.4017 5.09038 25.3625 4.72832 25.2896 4.3325C25.2124 3.91303 25.1024 3.53724 24.9558 3.2075C24.8039 2.86601 24.9576 2.46606 25.2991 2.31418C25.6406 2.1623 26.0405 2.31601 26.1924 2.65749C26.3857 3.09203 26.5252 3.5689 26.6207 4.08749C26.7614 4.8518 26.7923 5.47792 26.7923 6.58499C26.7923 7.07389 26.2898 7.40146 25.8425 7.20414L22.5454 5.74968L23.2489 8.30004Z" fill="white"/>
<path d="M48.4469 4.28516C47.4839 5.59266 44.0109 6.37516 42.7041 6.56766C41.3974 6.76016 39.9974 6.59016 40.5576 8.75266C40.9539 10.2802 44.7614 9.66266 46.2501 9.65016C47.4606 9.63766 49.1581 13.2977 49.7901 12.0552C49.7901 7.80516 48.9884 5.50266 48.4469 4.28516Z" fill="#29282D"/>
<path d="M4.95307 13.1224C6.48332 12.5674 8.10382 12.1474 11.2108 11.4424L9.89032 15.2449L9.92832 19.5749L1.08507 19.6524C0.724316 19.6549 0.0793159 19.1749 0.387066 17.2224C0.771816 14.7824 2.77882 13.9099 4.95307 13.1224Z" fill="#29282D"/>
<path d="M19.5824 12.344L23.7021 20.1965L19.867 22.2086L15.7472 14.3561L19.5824 12.344Z" fill="white"/>
<path d="M25.2591 9.37109L30.1958 18.8061L26.3584 20.814L21.4217 11.379L25.2591 9.37109Z" fill="white"/>
<path d="M30.8253 6.10352L37.6513 19.401L33.7983 21.3789L26.9723 8.08135L30.8253 6.10352Z" fill="white"/>
<path d="M50.4898 23.1024L50.2313 18.5474L10.2753 19.1674L0.312817 18.4424L0.00831604 21.9324C-0.096934 23.1399 0.808817 24.1974 2.01757 24.2799L10.3248 24.8499L49.4256 24.2474C50.0408 24.2374 50.5246 23.7174 50.4898 23.1024Z" fill="#DDDDDD"/>
</svg>

'''
'''--- web/assets/shoes3.svg ---
<svg width="104" height="21" viewBox="0 0 104 21" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M0 15.4519C0 7.62142 5.03131 6.66748 13.2317 3.98421C17.2482 2.67063 21.3471 1.52285 25.5064 0.834173C28.1201 0.400565 28.8223 2.69869 33.4134 2.69869C37.5077 2.69869 42.6156 0.670932 43.6731 0.232223C43.806 0.176109 43.9631 0.127646 44.0687 0.227121C44.0942 0.250077 44.1159 0.278134 44.1317 0.311292C44.6207 1.31624 47.1868 6.79501 47.1868 11.1796C47.1868 14.5311 47.474 17.8291 46.5492 19.5329C46.1316 20.3032 43.5262 20.7215 42.6513 20.7215H1.41879C0.635211 20.7215 0 16.2375 0 15.4519Z" fill="#D0D4DB"/>
<mask id="mask0_22_677" style="mask-type:alpha" maskUnits="userSpaceOnUse" x="0" y="0" width="48" height="21">
<path fill-rule="evenodd" clip-rule="evenodd" d="M0 15.4516C0 11.544 1.25433 9.34789 3.53115 7.79456C14.9019 0.0406175 30.107 0.147745 43.8702 0.147745C43.9814 0.147745 44.083 0.211511 44.1317 0.310985C44.6206 1.31594 47.1868 6.79471 47.1868 11.1793C47.1868 14.5308 47.474 17.8288 46.5492 19.5326C46.1319 20.3029 43.5264 20.7212 42.6513 20.7212H1.41879C0.635211 20.7212 0 16.2372 0 15.4516Z" fill="white"/>
</mask>
<g mask="url(#mask0_22_677)">
<path d="M5.13811 6.78443C1.83529 4.91736 3.13063 8.61834 0.16296 10.1895L-6.12158 22.2336H43.8924C45.1144 20.489 49.9251 16.5763 46.1953 16.5763C38.0333 16.5763 28.1812 16.839 23.4679 16.5763C18.7546 16.3136 5.26217 17.2573 6.05458 13.0692C6.97107 8.22554 8.14941 8.4857 5.13811 6.78443Z" fill="#E5E7EB"/>
</g>
<path d="M21.3071 0.31422C21.5578 -0.0199866 22.0237 -0.0975563 22.3678 0.129626L22.4239 0.169899L22.9352 0.546448C23.1453 0.701499 23.317 0.831364 23.4816 0.961219L23.5518 1.01694C24.9006 2.09423 25.6543 3.1069 25.6543 4.3565C25.6543 4.87485 25.163 5.24668 24.6697 5.11647L24.6262 5.10367L17.745 2.86968L19.6215 5.88788C20.0015 6.49913 19.4289 7.24881 18.7489 7.06095L18.7095 7.04907L12.9695 5.16643L15.0147 8.07781C15.2548 8.41968 15.1843 8.88668 14.8617 9.14348L14.8234 9.17216C14.4815 9.4123 14.0145 9.34178 13.7577 9.01921L13.729 8.98087L10.3249 4.13466C9.89859 3.52771 10.4725 2.73129 11.1728 2.92468L11.2126 2.93669L17.1467 4.88293L15.2759 1.87373C14.8966 1.26369 15.4663 0.515066 16.1455 0.699844L16.1856 0.711798L23.47 3.07643L23.4487 3.05193C23.2376 2.81722 22.9742 2.57234 22.6586 2.31505L22.5713 2.24457L22.443 2.14341C22.3558 2.07542 22.2641 2.0056 22.1626 1.92965L21.4641 1.41401C21.1171 1.15368 21.0468 0.661282 21.3071 0.31422Z" fill="white"/>
<path d="M103.598 15.4519C103.598 7.62142 98.5669 6.66748 90.3666 3.98421C86.3502 2.67063 82.251 1.52285 78.092 0.834173C75.4783 0.400565 74.7761 2.69869 70.185 2.69869C66.0907 2.69869 60.9828 0.670932 59.925 0.232223C59.7924 0.176109 59.635 0.127646 59.5297 0.227121C59.5039 0.250077 59.4825 0.278134 59.4667 0.311292C58.9775 1.31624 56.4115 6.79501 56.4115 11.1796C56.4115 14.5311 56.1243 17.8291 57.0492 19.5329C57.4665 20.3032 60.072 20.7215 60.9468 20.7215H102.179C102.963 20.7215 103.598 16.2375 103.598 15.4519Z" fill="#D0D4DB"/>
<mask id="mask1_22_677" style="mask-type:alpha" maskUnits="userSpaceOnUse" x="56" y="0" width="48" height="21">
<path fill-rule="evenodd" clip-rule="evenodd" d="M103.598 15.4516C103.598 11.544 102.344 9.34789 100.067 7.79456C88.6965 0.0406175 73.4911 0.147745 59.7281 0.147745C59.6167 0.147745 59.5154 0.211511 59.4667 0.310985C58.9775 1.31594 56.4115 6.79471 56.4115 11.1793C56.4115 14.5308 56.1243 17.8288 57.0492 19.5326C57.4665 20.3029 60.072 20.7212 60.9468 20.7212H102.179C102.963 20.7212 103.598 16.2372 103.598 15.4516Z" fill="white"/>
</mask>
<g mask="url(#mask1_22_677)">
<path d="M98.4599 6.78443C101.763 4.91736 100.467 8.61834 103.435 10.1895L109.72 22.2336H59.7057C58.4837 20.489 53.6727 16.5763 57.4025 16.5763C65.5646 16.5763 75.4169 16.839 80.1302 16.5763C84.8435 16.3136 98.3359 17.2573 97.5434 13.0692C96.627 8.22554 95.4486 8.4857 98.4599 6.78443Z" fill="#E5E7EB"/>
</g>
<path d="M82.2913 0.314294C82.5516 0.661386 82.4813 1.15377 82.1342 1.41407L81.5962 1.81046C81.371 1.97669 81.1957 2.10982 81.0274 2.24428C80.6728 2.52746 80.3801 2.79563 80.1498 3.05171L80.1278 3.07668L87.4128 0.711798C88.096 0.490004 88.6861 1.22263 88.3437 1.83769L88.3225 1.87373L86.4513 4.88293L92.3858 2.93669C93.0906 2.70553 93.6854 3.48643 93.2965 4.10011L93.2734 4.13466L89.8694 8.98087C89.62 9.33589 89.13 9.42154 88.775 9.17216C88.4331 8.93202 88.3411 8.46879 88.5574 8.11779L88.5837 8.07781L90.6286 5.16643L84.8889 7.04907C84.205 7.27338 83.6124 6.53947 83.9561 5.92329L83.9769 5.88788L85.8531 2.86968L78.9722 5.10367C78.4792 5.26372 77.9738 4.91127 77.9454 4.40184L77.9441 4.3565C77.9441 3.10674 78.6979 2.09394 80.0469 1.01661L80.1882 0.905185C80.2599 0.849325 80.3337 0.792804 80.412 0.733646L81.1916 0.15714C81.5387 -0.103158 82.0311 -0.0327976 82.2913 0.314294Z" fill="white"/>
</svg>

'''
'''--- web/package.json ---
{
  "name": "collabrative-art-web",
  "version": "1.0.0",
  "private": true,
  "source": "./src/index.html",
  "scripts": {
    "start": "parcel",
    "build": "parcel build"
  },
  "devDependencies": {
    "@parcel/transformer-sass": "2.8.0",
    "@parcel/transformer-typescript-tsc": "^2.8.0",
    "@types/react": "^18.0.24",
    "@types/react-dom": "^18.0.8",
    "buffer": "^5.5.0",
    "parcel": "^2.8.0",
    "process": "^0.11.10",
    "typescript": "^4.8.4"
  },
  "dependencies": {
    "@near-wallet-selector/coin98-wallet": "^7.2.0",
    "@near-wallet-selector/default-wallets": "^7.2.0",
    "@near-wallet-selector/here-wallet": "^7.2.0",
    "@near-wallet-selector/ledger": "^7.2.0",
    "@near-wallet-selector/math-wallet": "^7.2.0",
    "@near-wallet-selector/meteor-wallet": "^7.2.0",
    "@near-wallet-selector/modal-ui": "^7.2.0",
    "@near-wallet-selector/my-near-wallet": "^7.2.0",
    "@near-wallet-selector/near-wallet": "^7.2.0",
    "@near-wallet-selector/nearfi": "^7.2.0",
    "@near-wallet-selector/nightly": "^7.2.0",
    "@near-wallet-selector/nightly-connect": "^7.2.0",
    "@near-wallet-selector/sender": "^7.2.0",
    "@near-wallet-selector/wallet-connect": "^7.2.0",
    "classnames": "^2.3.2",
    "eventemitter3": "^4.0.7",
    "html-to-image": "^1.10.8",
    "near-api-js": "^1.1.0",
    "nft.storage": "^7.0.0",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-router-dom": "^6.4.2",
    "rxjs": "^7.5.7"
  },
  "alias": {
    "nft.storage": "nft.storage/dist/bundle.esm.min.js",
    "ipfs-car/pack": "ipfs-car/dist/esm/pack/index.js"
  }
}

'''
'''--- web/src/common/constants.ts ---
export const NFT_STORAGE_TOKEN =
  'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkaWQ6ZXRocjoweDVBRTdmRTcxNUM1MTliOWUxM2I5NGYwN0VCOWIzRkU3OTg1ZDkxYWIiLCJpc3MiOiJuZnQtc3RvcmFnZSIsImlhdCI6MTY2OTAxNzUxMzY2NywibmFtZSI6ImNvbGxhYnJhdGl2ZS1hcnQtbmVhciJ9._HwtMa99yxeC5lIlb3cCUJKX5HQalPZbylSIOKaB7t4'

'''
'''--- web/src/common/ipfs.ts ---
export const getIPFSURL = (uri: string) => {
  const replaced = uri.replace('ipfs://', '')

  return `https://nftstorage.link/ipfs/${replaced}`
}

export const getIPFSMetadataJSON = async (uri: string) => {
  const res = await fetch(getIPFSURL(uri))

  return res.json()
}

'''
'''--- web/src/common/nft-storage.ts ---
import { NFTStorage } from 'nft.storage'
import { NFT_STORAGE_TOKEN } from './constants'

const nftStorage = new NFTStorage({ token: NFT_STORAGE_TOKEN })

export default nftStorage

'''
'''--- web/src/common/utils.ts ---
export const dataURLtoFile = (dataUrl: string, filename: string) => {
  const arr = dataUrl.split(',')
  const mime = arr[0].match(/:(.*?);/)?.[1]
  const bstr = window.atob(arr[1])

  let n = bstr.length
  let u8arr = new Uint8Array(n)

  while (n--) {
    u8arr[n] = bstr.charCodeAt(n)
  }

  return new File([u8arr], filename, { type: mime })
}

'''
'''--- web/src/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title>Collabrative Art</title>
    <link href="./index.scss" rel="stylesheet" />
  </head>
  <body>
    <div id="app"></div>
    <script type="module" src="index.tsx"></script>
  </body>
</html>

'''
'''--- web/src/react-app.d.ts ---
/// <reference types="node" />
/// <reference types="react" />
/// <reference types="react-dom" />

declare namespace NodeJS {
  interface ProcessEnv {
    readonly NODE_ENV: 'development' | 'production' | 'test'
    readonly PUBLIC_URL: string
  }
}

declare module '*.avif' {
  const src: string
  export default src
}

declare module '*.bmp' {
  const src: string
  export default src
}

declare module '*.gif' {
  const src: string
  export default src
}

declare module '*.jpg' {
  const src: string
  export default src
}

declare module '*.jpeg' {
  const src: string
  export default src
}

declare module '*.png' {
  const src: string
  export default src
}

declare module '*.webp' {
  const src: string
  export default src
}

declare module '*.svg' {
  const src: string
  export default src
}

declare module '*.wasm' {
  const src: string
  export default src
}

declare module '*.module.css' {
  const classes: { readonly [key: string]: string }
  export default classes
}

declare module '*.module.scss' {
  const classes: { readonly [key: string]: string }
  export default classes
}

declare module '*.module.sass' {
  const classes: { readonly [key: string]: string }
  export default classes
}

'''
'''--- web/tsconfig.json ---
{
  "compilerOptions": {
    "target": "es6",
    "lib": ["dom", "dom.iterable", "esnext"],
    "experimentalDecorators": true,
    "skipLibCheck": true,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "isolatedModules": true,
    "module": "esnext",
    "moduleResolution": "node",
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noFallthroughCasesInSwitch": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "jsx": "react-jsx"
  },
  "include": ["src"]
}

'''