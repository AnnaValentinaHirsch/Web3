*GitHub Repository "mhassanist/sample-rust-vector-near"*

'''--- Cargo.toml ---
[package]
name = "friend"
version = "0.1.0"
authors = ["Mohammed Hassan <mhassanist@testnear.net>"]
edition = "2018"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
near-sdk = "3.1.0"
serde = { version = "*", features = ["derive"] }

[profile.release]
codegen-units = 1
# Tell `rustc` to optimize for small code size.
opt-level = "z"
lto = true
debug = false
panic = "abort"
# Opt into extra safety checks on arithmetic operations https://stackoverflow.com/a/64136471/249801
overflow-checks = true
'''
'''--- README.md ---

'''
'''--- rustfmt.toml ---
tab_spaces = 2

'''
'''--- src/lib.rs ---
use std::fmt::Write;

use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::collections::Vector;
use near_sdk::{near_bindgen, IntoStorageKey};
near_sdk::setup_alloc!();

#[derive(Default, BorshDeserialize, BorshSerialize)]
pub struct Writing {
  pub text: String,
  pub sender: String,
  pub receiver: String,
}

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct Contract {
  pub writing_list: Vector<Writing>, //This line gives err
}

impl Default for Contract {
  fn default() -> Self {
    return Default::default();
  }
}

#[near_bindgen]
impl Contract {
  pub fn add(&self) -> String {
    return "Added".to_string();
  }
  pub fn get_writings(&self) -> u64 {
    return self.writing_list.len();
  }
}

'''