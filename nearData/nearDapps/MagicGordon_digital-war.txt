*GitHub Repository "MagicGordon/digital-war"*

'''--- README.md ---
# digital-war

Digital-war is a digital dight game based on the NEAR protocol.

## concept

The contract provides digital capture, digital upgrade and digital challenge capabilities.

Use the first digital you get for free to get your favorite lucky number through the challenge.

## Getting Started

1、clone this repo
```shell
git clone https://github.com/MagicGordon/digital-war
```

2、run frontend

```shell
cd frontend
yarn install
yarn start
```
If all goes well, you'll be able to play by accessing address http://localhost:3000/digital-war in your browser.

> [Option]
> 
> If you want to deploy a new dev contract, you need to do the following steps before run frontend:
> 
> ```
>   cd digital-war/contract
>   ./build.sh
>   near dev-deploy res/digital_war.wasm
>   near $new-contract-id new --account-id $new-contract-id
> ```
> Then modify the variables  `ContractName` in file frontend/src/App.js.

## Example Story

1、first visit

![](pic/digital-war-login.png)

2、login

![](pic/digital-war-home.png)

3、Click the `Get first digital` button, wait for the `success` popup, and you will get your first digital.

![](pic/digital-war-first-digital.png)

4、Log in with another user in a different browser,and get first digital.

In the digital pool, you can see the information about the number obtained by the previous user

![](pic/digital-war-other-user-login.png)

5、You can spend 0.01 near to upgrade the numbers and then challenge them, or challenge them directly.

The higher the number level, the easier it is to win. the winner level +1, and the loser level -1.

When the level is 0, the number changes the owner to the winner.

6、When your last number is lost, you can take it for free again. The `Get first digital` button will reappear.

![](pic/digital-war-again.png)

7、A pop-up box will appear after `challenge` and `Get first digital` operation. Please wait patiently. Have a good time!

'''
'''--- contract/Cargo.toml ---
[package]
name = "digital-war"
version = "0.1.0"
authors = ["ZGD"]
edition = "2018"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
near-sdk = "3.1.0"
serde = { version = "1", features = ["derive"] }
serde_json = "1"
# rand = "0.8.4"
# rand_xorshift = "0.3"
# getrandom = { version = "0.2", features = ["js"] }

[profile.release]
codegen-units = 1
# Tell `rustc` to optimize for small code size.
opt-level = "s"
lto = true
debug = false
panic = "abort"
# Opt into extra safety checks on arithmetic operations https://stackoverflow.com/a/64136471/249801
overflow-checks = true

[workspace]
members = []

'''
'''--- contract/build.sh ---
#!/bin/bash
set -e

RUSTFLAGS='-C link-arg=-s' cargo build --target wasm32-unknown-unknown --release
cp target/wasm32-unknown-unknown/release/digital_war.wasm ./res/

'''
'''--- contract/src/lib.rs ---
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::collections::{Vector, UnorderedSet, LookupMap};
use near_sdk::{env, near_bindgen, AccountId, Balance, PanicOnDefault, Promise, PromiseResult};
use near_sdk::serde::Serialize;

// use rand::{Rng, SeedableRng};

#[derive(BorshDeserialize, BorshSerialize, Serialize)]
pub struct Digital {
    pub owner: AccountId,
    pub digital: u64,
    pub level: u32,
}

impl Digital {
    pub fn new(digital: u64, owner: AccountId) -> Self {
        Self {
            owner: owner,
            digital: digital,
            level: 1,
        }
    }
}

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize, PanicOnDefault)]
pub struct DigitalCenter {
    pub account_indices: LookupMap<AccountId, UnorderedSet<u64>>,
    pub digitals: Vector<Digital>,
    pub next: u64
}

#[near_bindgen]
impl DigitalCenter {
    #[init]
    pub fn new() -> Self {
        assert!(!env::state_exists(), "Already initialized");
        Self {
            account_indices: LookupMap::new(b"a".to_vec()),
            digitals: Vector::new(b"v".to_vec()),
            next: 0,
        }
    }

    pub fn next_digital(&self) -> u64{
        self.next
    }

    pub fn add_first(&mut self) -> String{
        let account_id= env::signer_account_id();
        let mut digital_set = self.account_indices.get(&account_id).unwrap_or(UnorderedSet::new(account_id.clone().into_bytes()));
        if digital_set.len() > 0 {
            return "You already have more than one digital".to_string();
        }
        digital_set.insert(&self.next);
        self.account_indices.insert(&account_id, &digital_set);
        self.digitals.push(&Digital::new(self.next, account_id));
        self.next += 1;
        "success".to_string()
    }

    pub fn pk(&mut self, own_digital: u64, target_digital: u64) -> String{
        let account_id= env::signer_account_id();
        if own_digital == target_digital {
            return "own_digital can not eq target_digital".to_string()
        }
        let mut own = match self.digitals.get(own_digital){
            Some(r) => r,
            None => return "Invalid own_digital".to_string()
        };
        let mut target = match self.digitals.get(target_digital){
            Some(r) => r,
            None => return "Invalid target_digital".to_string()
        };

        let mut own_digital_set = self.account_indices.get(&account_id).unwrap();
        if !own_digital_set.contains(&own_digital){
            return "you are not own_digital owner".to_string();
        }

        if own_digital_set.contains(&target_digital){
            return "can not pk your own digital".to_string();
        }

        let index = if env::random_seed().len() as u64 > env::block_timestamp() % 10  { env::block_timestamp() % 10 } else { env::random_seed().len() as u64 - 1};
        let rand_own = *env::random_seed().get(index as usize).unwrap() ;
        let rand_target  = *env::random_seed().get((if index - 1 > 0 {index - 1} else {index}) as usize).unwrap();

        let target_owner = target.owner.clone();
        let mut target_digital_set = self.account_indices.get(&target_owner).unwrap();

        let mut result = String::new();
        if (rand_own as u32 * (own.level + 100) / 100) > (rand_target as u32  * (target.level + 100) / 100){
            if 0 == target.level - 1 {
                target.owner = account_id.clone();
                
                result.push_str("you are win, get target digital!");
                target_digital_set.remove(&target_digital);
                own_digital_set.insert(&target_digital);
            } else {
                target.level -= 1;
                result.push_str("you are win, target digital level minus 1!");
            }
            own.level += 1;
            
        }else {
            if 0 == own.level - 1 {
                own.owner = target_owner.clone();
                result.push_str("you are lose, target get your digital!");
                own_digital_set.remove(&own_digital);
                target_digital_set.insert(&own_digital);
            } else {
                own.level -= 1;
                result.push_str("you are lose, your digital level minus 1!");
            }
            target.level += 1;
            
        }

        self.digitals.replace(own_digital, &own);
        self.digitals.replace(target_digital, &target);
            
        self.account_indices.insert(&account_id, &own_digital_set);
        self.account_indices.insert(&target_owner, &target_digital_set);
        result
    }

    pub fn get_digitals(&self, accountId: AccountId) -> Vec<u64> {
        let mut result = vec![];
        let set = match self.account_indices.get(&accountId){
            Some(r) => r,
            None => return result
        };

        set.iter().map(|item| {
            item
        }).for_each(|item|{
            result.push(item)
        }); 
        
        result
    }

    pub fn get_all_digitals(&self) -> Vec<Digital> {
        let mut result = vec![];
        self.digitals.iter().map(|item| {
            item
        }).for_each(|item|{
            result.push(item)
        }); 
        
        result
    }

    #[payable]
    pub fn levelup(&mut self, digital: u64) -> String {
        assert!(env::attached_deposit() >= 10, "Deposit is too low");
        let mut old = match self.digitals.get(digital){
            Some(r) => r,
            None => return "Invalid digital".to_string()
        };
        old.level += 1;
        self.digitals.replace(digital, &old);
        "levelup success".to_string()
    }
}

#[cfg(not(target_arch = "wasm32"))]
#[cfg(test)]
mod tests {
    use super::*;

    use near_sdk::{testing_env, MockedBlockchain, VMContext};

    pub fn get_context(accountId: AccountId, block_timestamp: u64) -> VMContext {
        VMContext {
            current_account_id: accountId.clone(),
            signer_account_id: accountId.clone(),
            signer_account_pk: vec![0, 1, 2],
            predecessor_account_id: accountId,
            input: vec![],
            block_index: 1,
            block_timestamp,
            epoch_height: 1,
            account_balance: 10u128,//.pow(26)
            account_locked_balance: 0,
            storage_usage: 10u64.pow(6),
            attached_deposit: 0,
            prepaid_gas: 300 * 10u64.pow(12),
            random_seed: vec![0, 2, 1, 3, 4, 5, 6, 7],
            is_view: false,
            output_data_receivers: vec![],
        }
    }

    #[test]
    fn test_add_first_work() {
        let mut context = get_context("digital.test".to_string(), 3_600_000_000_000);
        testing_env!(context.clone());
        let mut contract = DigitalCenter::new();

        assert_eq!(contract.add_first(), "success".to_string());

        assert_eq!(contract.next_digital(), 1);
    }

    #[test]
    fn test_repeat_add_first() {
        let mut context = get_context("digital.test".to_string(), 3_600_000_000_000);
        testing_env!(context.clone());
        let mut contract = DigitalCenter::new();

        assert_eq!(contract.add_first(), "success".to_string());
        assert_eq!(contract.add_first(), "You already have more than one digital".to_string());

        assert_eq!(contract.next_digital(), 1);
    }

    #[test]
    fn test_pk() {
        let mut context = get_context("digital1.test".to_string(), 3_600_000_000_002);
        testing_env!(context.clone());
        let mut contract = DigitalCenter::new();

        assert_eq!(contract.add_first(), "success");

        context.signer_account_id = "digital2.test".to_string();
        testing_env!(context.clone());
        assert_eq!(contract.add_first(), "success");
        
        context.signer_account_id = "digital1.test".to_string();
        testing_env!(context.clone());
        assert_eq!(contract.add_first(), "You already have more than one digital");

        assert_eq!(contract.pk(0, 1), "you are lose, target get your digital!");

        assert_eq!(contract.pk(0, 1), "you are not own_digital owner");

        assert_eq!(contract.add_first(), "success");

        context.random_seed = vec![0, 1, 2, 3, 4, 5, 6, 7];
        testing_env!(context.clone());

        assert_eq!(contract.pk(2, 1), "you are win, target digital level minus 1!");
        assert_eq!(contract.pk(2, 1), "you are win, get target digital!");
        context.signer_account_id = "digital2.test".to_string();
        testing_env!(context.clone());
        assert_eq!(contract.pk(1, 2), "you are not own_digital owner");
    }

    #[test]
    fn test_pk_not_own() {
        let mut context = get_context("digital1.test".to_string(), 3_600_000_000_000);
        testing_env!(context.clone());
        let mut contract = DigitalCenter::new();

        assert_eq!(contract.add_first(), "success".to_string());

        context.signer_account_id = "digital2.test".to_string();
        testing_env!(context.clone());
        assert_eq!(contract.add_first(), "success".to_string());
        
        context.signer_account_id = "digital1.test".to_string();
        testing_env!(context.clone());
        assert_eq!(contract.pk(1, 0), "you are not own_digital owner");
    }

    #[test]
    fn get_digitals_work(){
        let mut context = get_context("digital1.test".to_string(), 3_600_000_000_000);
        testing_env!(context.clone());
        let mut contract = DigitalCenter::new();

        let aa: Vec<u64> = Vec::new();
        assert_eq!(contract.get_digitals("digital1.test".to_string()), aa);
        assert_eq!(contract.add_first(), "success".to_string());
        assert_eq!(contract.get_digitals("digital1.test".to_string()), vec![0]);
    }

    #[test]
    fn levelup(){
        let mut context = get_context("digital1.test".to_string(), 3_600_000_000_000);
        testing_env!(context.clone());
        let mut contract = DigitalCenter::new();
        assert_eq!(contract.add_first(), "success".to_string());
        context.attached_deposit = 50;
        testing_env!(context.clone());
        assert_eq!(contract.levelup(0), "levelup success");

        
    }

    #[test]
    #[should_panic(expected = "Deposit is too low")]
    fn levelup_panic(){
        let mut context = get_context("digital1.test".to_string(), 3_600_000_000_000);
        testing_env!(context.clone());
        let mut contract = DigitalCenter::new();
        context.attached_deposit = 5;
        testing_env!(context.clone());
        contract.levelup(0);
    }
}
'''
'''--- frontend/package.json ---
{
  "name": "frontend",
  "version": "0.1.0",
  "homepage": "digital-war",
  "private": true,
  "dependencies": {
    "@testing-library/jest-dom": "^4.2.4",
    "@testing-library/react": "^9.3.2",
    "@testing-library/user-event": "^7.1.2",
    "bn.js": "^5.1.1",
    "near-api-js": "^0.27.0",
    "react": "^16.13.1",
    "react-bootstrap": "^1.0.0",
    "react-color": "^2.18.1",
    "react-dom": "^16.13.1",
    "react-scripts": "3.4.0",
    "big.js": "^6.0.3"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject",
    "deploy": "yarn build && gh-pages -d build"
  },
  "eslintConfig": {
    "extends": "react-app"
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "gh-pages": "^2.2.0"
  }
}

'''
'''--- frontend/public/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/css/bootstrap.min.css" integrity="sha384-GJzZqFGwb1QTTN6wy59ffF1BuGJpLSa9DkKMp0DgiMDm4iYMj70gZWKYbI706tWS" crossorigin="anonymous">
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Digital War - digital free competition"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>Digital War</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

'''
'''--- frontend/public/manifest.json ---
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

'''
'''--- frontend/public/robots.txt ---
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

'''
'''--- frontend/src/App.css ---
.pixel-board {
  display: inline-block;
  width: 100%;
  height: 100%;
  max-width: 800px;
  max-height: 800px;
  border: 1px solid #eeeeee;
}

.color-picker {
  max-width: 800px;
  display: inline-block;
  padding: 6px;
}

.circle-picker {
  margin-top: 5px;
}

@keyframes placeHolderShimmer {
  0% {
    background-position: 0px 0;
  }
  100% {
    background-position: 0 800px;
  }
}

.c-animated-background {
  animation-duration: 2s;
  animation-fill-mode: forwards;
  animation-iteration-count: infinite;
  animation-name: placeHolderShimmer;
  animation-timing-function: linear;
  background: #333;
  background: linear-gradient(to bottom, #333 0%, #116611 4%, #55ff55 8%, #116611 12%, #333 16%);
}

'''
'''--- frontend/src/App.js ---
import "./App.css";
import React from 'react';
// import BN from 'bn.js';
import * as nearAPI from 'near-api-js'
import Big from 'big.js';

const TGas = Big(10).pow(12);
const BoatOfGas = Big(200).mul(TGas);

// const ContractName = 'dev-1629962930296-20948195726082';
// const ContractName = 'dev-1630033758756-26263481745179';
const ContractName = 'dev-1630146349634-18193940589410';

class App extends React.Component {
  constructor(props) {
    super(props);

    this.state = {
      connected: false,
      signedIn: false,
      accountId: null,
      digitals: [],
      all_digitals: [],
      own_digital: "",
      target_digital: "",
      levelup_target:""
    };

    this._digitalRefreshTimer = null;

    this.handleLevelUpTargetChange = this.handleLevelUpTargetChange.bind(this);
    this.levelupSubmit = this.levelupSubmit.bind(this);

    this.handleOwnChange = this.handleOwnChange.bind(this);
    this.handleTargetChange = this.handleTargetChange.bind(this);
    this.handleSubmit = this.handleSubmit.bind(this);

    this._initNear().then(() => {
      this.setState({
        connected: true,
        signedIn: !!this._accountId,
        accountId: this._accountId,
      });
    });
  }

  componentDidMount() {
  }

  async query_digitals() {
    let digitals = await this._contract.get_digitals({ accountId: this._accountId })
    let all_digitals = await this._contract.get_all_digitals({ accountId: this._accountId })
    this.setState({
      digitals: digitals,
      all_digitals: all_digitals,
    })
  }

  async refreshAccountStats() {
    let digitals = await this._contract.get_digitals({ accountId: this._accountId });
    let all_digitals = await this._contract.get_all_digitals({ accountId: this._accountId })
    if (this._digitalRefreshTimer) {
      clearInterval(this._digitalRefreshTimer);
      this._digitalRefreshTimer = null;
    }

    this.setState({
      digitals: digitals,
      all_digitals: all_digitals,
    });

    // this._digitalRefreshTimer = setInterval(() => {
    //   this.query_digitals();
    // }, 100);
  }

  async _initNear() {
    const nearConfig = {
      networkId: 'default',
      nodeUrl: 'https://rpc.testnet.near.org',
      contractName: ContractName,
      walletUrl: 'https://wallet.testnet.near.org',
    };
    const keyStore = new nearAPI.keyStores.BrowserLocalStorageKeyStore();
    const near = await nearAPI.connect(Object.assign({ deps: { keyStore } }, nearConfig));
    this._keyStore = keyStore;
    this._nearConfig = nearConfig;
    this._near = near;

    this._walletConnection = new nearAPI.WalletConnection(near, ContractName);
    this._accountId = this._walletConnection.getAccountId();

    this._account = this._walletConnection.account();
    this._contract = new nearAPI.Contract(this._account, ContractName, {
      viewMethods: ['get_digitals', 'next_digital', 'get_all_digitals'],
      changeMethods: ['add_first', 'pk', 'levelup'],
    });
    if (this._accountId) {
      await this.refreshAccountStats();
    }
  }

  async requestSignIn() {
    const appTitle = 'Digital War';
    await this._walletConnection.requestSignIn(
      ContractName,
      appTitle
    )
  }

  async logOut() {
    this._walletConnection.signOut();
    this._accountId = null;
    this.setState({
      signedIn: !!this._accountId,
      accountId: this._accountId,
    })
  }

  async addFirst() {
    let res = await this._contract.add_first();
    alert(res);
    window.location.reload()
  }

  async pk_action(){
    let res = await this._contract.pk({own_digital: parseInt(this.state.own_digital, 10), target_digital: parseInt(this.state.target_digital, 10)})
    // alert('own_digital: ' + this.state.own_digital  + ',target_digital: ' + this.state.target_digital);
    alert(res)
    window.location.reload()
  }

  handleOwnChange(event) {    this.setState({own_digital: event.target.value});  }
  handleTargetChange(event) {    this.setState({target_digital: event.target.value});  }
  handleSubmit(event) {
    this.pk_action();
    event.preventDefault();
  }

  async action_levelup(){
    let res = await this._contract.levelup({digital: parseInt(this.state.levelup_target, 10)}, BoatOfGas.toFixed(0), Big(10000000000).mul(TGas).toFixed(0))
    // alert('own_digital: ' + this.state.own_digital  + ',target_digital: ' + this.state.target_digital);
    alert(res)
    window.location.reload()
  }

  handleLevelUpTargetChange(event) {    this.setState({levelup_target: event.target.value});  }

  levelupSubmit(event) {
    this.action_levelup();
    event.preventDefault();
  }

  render() {
    const content = !this.state.connected ? (
      <div>Connecting... <span className="spinner-grow spinner-grow-sm" role="status" aria-hidden="true"></span></div>
    ) : (this.state.signedIn ? (
      <div>
        <div className="float-right">
          <button
            className="btn btn-outline-secondary"
            onClick={() => this.logOut()}>Log out</button>
        </div>
        <h4>Hello, <span className="font-weight-bold">{this.state.accountId}</span>!</h4>

        <form onSubmit={this.levelupSubmit}>
          <label> digital: <input type="text" style={{marginLeft:"74px"}} value={this.state.levelup_target} onChange={(event) => {this.handleLevelUpTargetChange(event)}} /> </label><br/>
          <input type="submit" value="levelup" />
        </form>
        <hr></hr>
        <form onSubmit={this.handleSubmit}>
          <label> challenger: <input type="text" style={{marginLeft:"44px"}} value={this.state.own_digital} onChange={(event) => {this.handleOwnChange(event)}} /> </label><br/>
          <label> challenge target: <input type="text" value={this.state.target_digital} onChange={(event) => {this.handleTargetChange(event)}} /> </label><br/>
          <input type="submit" value="challenge" />
        </form>
        <hr></hr>
        <div>
          Your digitals:
          <ul>
            {this.state.digitals.length !== 0 ?
              (this.state.digitals.map(value => <li key={value}> {value}</li>)) :
              (<button className="btn btn-primary" onClick={() => this.addFirst()}>Get first digital</button>)}
          </ul>
        </div>
        <hr></hr>
        <div>
          Digital Pool:
          <ul>
            {this.state.all_digitals.length !== 0 ?
              (this.state.all_digitals.map(value => <li style={{whiteSpace: "pre"}} key={value.digital}> Digital：{value.digital}       Owner：{value.owner}       Level：{value.level}</li>)) :
              (<div>暂无</div>)}
          </ul>
        </div>
      </div>
    ) : (
      <div style={{ marginBottom: "10px" }}>
        <button
          className="btn btn-primary"
          onClick={() => this.requestSignIn()}>Log in with NEAR Wallet</button>
      </div>
    ));
    return (
      <div className="px-5">
        <h1>Digital War</h1>
        {content}
      </div>
    );
  }
}

export default App;

'''
'''--- frontend/src/index.css ---
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

'''
'''--- frontend/src/index.js ---
import React from 'react';
import ReactDOM from 'react-dom';
import './index.css';
import App from './App';

ReactDOM.render(<App />, document.getElementById('root'));

'''