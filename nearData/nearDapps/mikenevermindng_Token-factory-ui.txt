*GitHub Repository "mikenevermindng/Token-factory-ui"*

'''--- .gitpod.yml ---
tasks:
  - init: yarn
    command: yarn dev
ports:
  - port: 1234
    onOpen: open-browser

'''
'''--- README.md ---
connesus
==================

This [React] app was initialized with [create-near-app]

Quick Start
===========

To run this project locally:

1. Prerequisites: Make sure you've installed [Node.js] â‰¥ 12
2. Install dependencies: `yarn install`
3. Run the local development server: `yarn dev` (see `package.json` for a
   full list of `scripts` you can run with `yarn`)

Now you'll have a local development environment backed by the NEAR TestNet!

Go ahead and play with the app and the code. As you make code changes, the app will automatically reload.

Exploring The Code
==================

1. The "backend" code lives in the `/contract` folder. See the README there for
   more info.
2. The frontend code lives in the `/src` folder. `/src/index.html` is a great
   place to start exploring. Note that it loads in `/src/index.js`, where you
   can learn how the frontend connects to the NEAR blockchain.
3. Tests: there are different kinds of tests for the frontend and the smart
   contract. See `contract/README` for info about how it's tested. The frontend
   code gets tested with [jest]. You can run both of these at once with `yarn
   run test`.

Deploy
======

Every smart contract in NEAR has its [own associated account][NEAR accounts]. When you run `yarn dev`, your smart contract gets deployed to the live NEAR TestNet with a throwaway account. When you're ready to make it permanent, here's how.

Step 0: Install near-cli (optional)
-------------------------------------

[near-cli] is a command line interface (CLI) for interacting with the NEAR blockchain. It was installed to the local `node_modules` folder when you ran `yarn install`, but for best ergonomics you may want to install it globally:

    yarn install --global near-cli

Or, if you'd rather use the locally-installed version, you can prefix all `near` commands with `npx`

Ensure that it's installed with `near --version` (or `npx near --version`)

Step 1: Create an account for the contract
------------------------------------------

Each account on NEAR can have at most one contract deployed to it. If you've already created an account such as `your-name.testnet`, you can deploy your contract to `connesus.your-name.testnet`. Assuming you've already created an account on [NEAR Wallet], here's how to create `connesus.your-name.testnet`:

1. Authorize NEAR CLI, following the commands it gives you:

      near login

2. Create a subaccount (replace `YOUR-NAME` below with your actual account name):

      near create-account connesus.YOUR-NAME.testnet --masterAccount YOUR-NAME.testnet

Step 2: set contract name in code
---------------------------------

Modify the line in `src/config.js` that sets the account name of the contract. Set it to the account id you used above.

    const CONTRACT_NAME = process.env.CONTRACT_NAME || 'connesus.YOUR-NAME.testnet'

Step 3: deploy!
---------------

One command:

    yarn deploy

As you can see in `package.json`, this does two things:

1. builds & deploys smart contract to NEAR TestNet
2. builds & deploys frontend code to GitHub using [gh-pages]. This will only work if the project already has a repository set up on GitHub. Feel free to modify the `deploy` script in `package.json` to deploy elsewhere.

Troubleshooting
===============

On Windows, if you're seeing an error containing `EPERM` it may be related to spaces in your path. Please see [this issue](https://github.com/zkat/npx/issues/209) for more details.

  [React]: https://reactjs.org/
  [create-near-app]: https://github.com/near/create-near-app
  [Node.js]: https://nodejs.org/en/download/package-manager/
  [jest]: https://jestjs.io/
  [NEAR accounts]: https://docs.near.org/docs/concepts/account
  [NEAR Wallet]: https://wallet.testnet.near.org/
  [near-cli]: https://github.com/near/near-cli
  [gh-pages]: https://github.com/tschaub/gh-pages

'''
'''--- babel.config.js ---
module.exports = {
  presets: ['@babel/preset-env', '@babel/preset-react'],
}

'''
'''--- package.json ---
{
  "name": "connesus",
  "version": "0.1.0",
  "license": "UNLICENSED",
  "scripts": {
    "build:web": "parcel build src/index.html --public-url ./",
    "deploy:pages": "gh-pages -d dist/",
    "start": "parcel src/index.html --open",
    "dev": "npm run start",
    "test": "npm run build:contract:debug && cd contract && cargo test -- --nocapture && cd .. && jest test --runInBand"
  },
  "devDependencies": {
    "@babel/core": "~7.14.0",
    "@babel/preset-env": "~7.14.0",
    "@babel/preset-react": "~7.13.13",
    "babel-jest": "~26.6.2",
    "babel-plugin-module-resolver": "^4.1.0",
    "env-cmd": "~10.1.0",
    "gh-pages": "~3.1.0",
    "jest": "~26.6.2",
    "jest-environment-node": "~26.6.2",
    "near-cli": "~2.1.1",
    "nodemon": "~2.0.3",
    "parcel-bundler": "~1.12.4",
    "react-test-renderer": "~17.0.1",
    "shelljs": "~0.8.4"
  },
  "dependencies": {
    "near-api-js": "~0.43.1",
    "react": ">=16.x",
    "react-dom": "~17.0.1",
    "react-router-dom": "^6.2.2",
    "regenerator-runtime": "~0.13.5",
    "src": "^1.1.2",
    "web3.storage": "^3.5.6"
  },
  "resolutions": {
    "@babel/preset-env": "7.13.8"
  },
  "jest": {
    "moduleNameMapper": {
      "\\.(jpg|ico|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$": "<rootDir>/src/__mocks__/fileMock.js",
      "\\.(css|less)$": "<rootDir>/src/__mocks__/fileMock.js"
    },
    "setupFiles": [
      "<rootDir>/src/jest.init.js"
    ],
    "testEnvironment": "near-cli/test_environment",
    "testPathIgnorePatterns": [
      "<rootDir>/contract/",
      "<rootDir>/node_modules/"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

'''
'''--- src/App.js ---
import 'regenerator-runtime/runtime'
import React from 'react'
import { login, logout } from './utils'
import getConfig from './config'
import TokenPage from '@page/Tokens'
import TokenDetailPage from '@page/TokenDetail'
import {
  BrowserRouter,
  Routes,
  Route,
  Link
} from "react-router-dom";

const { networkId, contractName } = getConfig(process.env.NODE_ENV || 'development')

export default function App() {

  if (!window.walletConnection.isSignedIn()) {
    return (
      <main>
        <p style={{ textAlign: 'center', marginTop: '2.5em' }}>
          <button className="link btn btn-warning" onClick={login}>Sign in</button>
        </p>
      </main>
    )
  }

  return (
    <>
      <div className="d-flex justify-content-end">
        <div className="dropdown">
          <button className="btn btn-warning dropdown-toggle" type="button" id="dropdownMenuButton1" data-bs-toggle="dropdown" aria-expanded="false">
            {window.accountId}
          </button>
          <ul className="dropdown-menu" aria-labelledby="dropdownMenuButton1">
            <li onClick={logout}><a className="dropdown-item" href="#">Sign out</a></li>
          </ul>
        </div>
      </div>
      <BrowserRouter>
        <Routes>
          <Route path="/:tokenId" element={<TokenDetailPage />} />
        </Routes>
        <Routes>
          <Route path="/" element={<TokenPage />} />
        </Routes>
      </BrowserRouter>
    </>
  )
}

'''
'''--- src/__mocks__/fileMock.js ---
// NOTE: This is used to mock resource imports in JSX for tests
module.exports = '' 

'''
'''--- src/assets/logo-black.svg ---
<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#24272a"/><stop offset=".42" stop-color="#24272a" stop-opacity="0"/><stop offset=".59" stop-color="#24272a" stop-opacity="0"/><stop offset=".81" stop-color="#24272a"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#24272a"/></svg>
'''
'''--- src/assets/logo-white.svg ---
<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#fff"/><stop offset=".42" stop-color="#fff" stop-opacity="0"/><stop offset=".59" stop-color="#fff" stop-opacity="0"/><stop offset=".81" stop-color="#fff"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#fff"/></svg>
'''
'''--- src/components/TokenCard/index.js ---
import React, { useState, useEffect } from "react";
import './style.css'
import getConfig from '@config'
import {
    Link
} from "react-router-dom";
const { contractName } = getConfig(process.env.NODE_ENV || 'development')

export default function TokenCard({token}) {
    
    const {metadata, owner_id, total_supply} = token

    const {icon, name, symbol, spec} = metadata

    return (
        <>
        <Link to={`/${symbol.toLowerCase()}`}>
            <div className="token-card">
                <div className="token-icon-place">
                    <img src={icon} alt="token-icon" className="token-icon" />
                </div>
                <div className="token-name">
                    {name}
                </div>
                <div className="token-owner">
                    {owner_id}
                </div>
            </div>
        </Link>
        </>
    )
}
'''
'''--- src/components/TokenCard/style.css ---
.token-card {
    text-align: center;
    background-color: #2c3e50;
    padding: 15px 30px;
    border-radius: 20px;
    box-shadow: 0 3px 10px rgb(0 0 0 / 0.2);
    transition: 0.3s;
    cursor: pointer;
}

.token-card:hover {
    background-color: #192a56;
    transform: scale(1.2);
}

.token-card .token-icon {
    width: 80px;
    height: 80px;
    border-radius: 50%;
}

.token-card .token-name {
    font-size: 1.2rem;
    font-weight: bold;
}

.token-car .token-owner {
    margin-bottom: 0!important;
}
'''
'''--- src/components/TokenCreateForm/index.js ---
import React, {useState, useEffect} from 'react'
import './style.css'
import {tokenMetadataCreate} from '@utils/token.utils'
import {storeFiles} from '@utils/web3.storage'
import {DEFAULT_DECIMALS} from '@constants/standard.constant'

export default function TokenCreateForm() {
    const [tokenArgs, setTokenArgs] = useState({})
    const createTokens = async () => {
        const {name, symbol, logo, supply} = tokenArgs
        if (!name || !symbol || !logo || !supply) {
            alert('Please fill out the form')
        }
        const accountId = window.accountId
        try {
            const cid = await storeFiles([logo])
            const logoURL = `https://${cid}.ipfs.dweb.link/${logo.name}`
            const tokenMetadata = tokenMetadataCreate(name, symbol, logoURL)
            const argsList = {
                owner_id: accountId,
                total_supply: (supply * DEFAULT_DECIMALS).toString(),
                metadata: tokenMetadata
            }
            const minRequiredDeposit = await window.contract.get_required_deposit({args: argsList, account_id: accountId})
        
            await window.contract.create_token({
                args: argsList
            }, "300000000000000", minRequiredDeposit.toString())
        } catch(error) {
            console.log(error)
        }
    } 
    return (
        <>
        <div className="form form-create-token row">
            <h2>CREATE TOKEN</h2>
            <div className="form-group">
                <label className="form-label" htmlFor="name">Token's name </label>
                <input className="form-control" onChange={(event) => setTokenArgs({...tokenArgs, name: event.target.value})} type="text" name="token" id="name" placeholder="Token's name" />
            </div>
            
            <div className="form-group">
                <label className="form-label" htmlFor="logo">Token's logo </label>
                <input className="form-control" 
                onChange={(event) => setTokenArgs({...tokenArgs, logo: event.target.files[0]})} 
                type="file" 
                name="token" 
                id="logo" 
                placeholder="Token's logo" 
                accept="image/*"
                />
            </div>
            <div className="form-group col-6">
                <label className="form-label" htmlFor="symbol">Symbol </label>
                <input className="form-control" onChange={(event) => setTokenArgs({...tokenArgs, symbol: event.target.value})} type="text" name="token" id="symbol" placeholder="Token's symbol" />
            </div>
            <div className="form-group col-6">
                <label className="form-label" htmlFor="supply">Initial Supply </label>
                <input className="form-control" onChange={(event) => setTokenArgs({...tokenArgs, supply: event.target.value})} type="number" name="token" id="supply" placeholder="Token's initial supply" />
            </div>
            <button className="btn btn-warning form-create-submit" onClick={() => createTokens()}>Create</button>
        </div>
        </>
    )
}
'''
'''--- src/components/TokenCreateForm/style.css ---
.form-create-token {
    margin-left: auto;
    width: 400px;
    padding: 40px 10px;
    background-color: #0a3d62;
    box-shadow: 0 3px 10px rgb(0 0 0 / 0.2);
    border-radius: 5px;
}

.form-create-token h2 {
    text-align: center;
}

.form-group {
    margin-top: 10px
}

.form-create-submit {
    margin-top: 10px;
    width: 350px;
    margin-left: auto;
    margin-right: auto;
}
'''
'''--- src/config.js ---
const CONTRACT_NAME = 'develop.connesus.testnet'

function getConfig(env) {
  switch (env) {

  case 'production':
  case 'mainnet':
    return {
      networkId: 'mainnet',
      nodeUrl: 'https://rpc.mainnet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.near.org',
      helperUrl: 'https://helper.mainnet.near.org',
      explorerUrl: 'https://explorer.mainnet.near.org',
    }
  case 'development':
  case 'testnet':
    return {
      networkId: 'testnet',
      nodeUrl: 'https://rpc.testnet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.testnet.near.org',
      helperUrl: 'https://helper.testnet.near.org',
      explorerUrl: 'https://explorer.testnet.near.org',
    }
  case 'betanet':
    return {
      networkId: 'betanet',
      nodeUrl: 'https://rpc.betanet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.betanet.near.org',
      helperUrl: 'https://helper.betanet.near.org',
      explorerUrl: 'https://explorer.betanet.near.org',
    }
  case 'local':
    return {
      networkId: 'local',
      nodeUrl: 'http://localhost:3030',
      keyPath: `${process.env.HOME}/.near/validator_key.json`,
      walletUrl: 'http://localhost:4000/wallet',
      contractName: CONTRACT_NAME,
    }
  case 'test':
  case 'ci':
    return {
      networkId: 'shared-test',
      nodeUrl: 'https://rpc.ci-testnet.near.org',
      contractName: CONTRACT_NAME,
      masterAccount: 'test.near',
    }
  case 'ci-betanet':
    return {
      networkId: 'shared-test-staging',
      nodeUrl: 'https://rpc.ci-betanet.near.org',
      contractName: CONTRACT_NAME,
      masterAccount: 'test.near',
    }
  default:
    throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`)
  }
}

module.exports = getConfig

'''
'''--- src/constants/standard.constant.js ---
export const FT_METADATA_SPEC = "ft-1.0.0"
export const DEFAULT_DECIMALS = Math.pow(10, 8)
'''
'''--- src/global.css ---
@import url('https://fonts.googleapis.com/css2?family=League+Gothic&family=Merriweather&family=Roboto&family=Sigmar+One&display=swap');

* {
  box-sizing: border-box;
}

html {
  --bg: #efefef;
  --fg: #1e1e1e;
  --gray: #555;
  --light-gray: #ccc;
  --shadow: #e6e6e6;
  --success: rgb(90, 206, 132);
  --primary: #FF585D;
  --secondary: #0072CE;
  font-family: -apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica,Arial,sans-serif;
}

body {
  margin: 0;
  padding: 1em;
  color: #efefef!important;
  background: #2C3E50;  /* fallback for old browsers */
  background: -webkit-linear-gradient(to right, #FD746C, #2C3E50);  /* Chrome 10-25, Safari 5.1-6 */
  background: linear-gradient(to right, #FD746C, #2C3E50); /* W3C, IE 10+/ Edge, Firefox 16+, Chrome 26+, Opera 12+, Safari 7+ */
}
'''
'''--- src/hooks/useFtContract.js ---
import React, {useState, useEffect} from "react";
import getConfig from '@config'
const { contractName } = getConfig(process.env.NODE_ENV || 'development')
import { connect, Contract, keyStores, WalletConnection } from 'near-api-js'

export default function useFtContract(accountId) {
    const [contract, setContract] = useState(null)

    const initContract = async () => {
        const contract = await new Contract(window.walletConnection.account(), `${accountId}.${contractName}`, {
            viewMethods: [
                'ft_balance_of',
                'ft_total_supply',

            ],
            changeMethods: [
                'storage_deposit',
                'ft_transfer',
                'mint',
                'withdraw'
            ],
        })
        setContract(contract)
    }

    useEffect(() => {
        if (window.walletConnection.account()) {
            initContract()
        }
    }, [])

    return {
        contract,
    }
}
'''
'''--- src/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="./assets/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="apple-touch-icon" href="./assets/favicon.ico" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
    <title>Welcome to NEAR with React</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
    <script src="./index.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p" crossorigin="anonymous"></script>
  </body>
</html>

'''
'''--- src/index.js ---
import React from 'react'
import ReactDOM from 'react-dom'
import App from './App'
import { initContract } from './utils'
import './global.css'

window.nearInitPromise = initContract()
  .then(() => {
    ReactDOM.render(
      <App />,
      document.querySelector('#root')
    )
  })
  .catch(console.error)

'''
'''--- src/jest.init.js ---
import 'regenerator-runtime/runtime'

'''
'''--- src/main.test.js ---
beforeAll(async function () {
  // NOTE: nearlib and nearConfig are made available by near-cli/test_environment
  const near = await nearlib.connect(nearConfig)
  window.accountId = nearConfig.contractName
  window.contract = await near.loadContract(nearConfig.contractName, {
    viewMethods: ['get_greeting'],
    changeMethods: [],
    sender: window.accountId
  })

  window.walletConnection = {
    requestSignIn() {
    },
    signOut() {
    },
    isSignedIn() {
      return true
    },
    getAccountId() {
      return window.accountId
    }
  }
})

test('get_greeting', async () => {
  const message = await window.contract.get_greeting({ account_id: window.accountId })
  expect(message).toEqual('Hello')
})

'''
'''--- src/pages/TokenDetail.js ---
import React, { useState, useEffect } from 'react'
import TokenCreateForm from '@component/TokenCreateForm'
import './styles/tokenDetail.page.css'
import {
    useParams
} from "react-router-dom";
import useFtContract from "@hooks/useFtContract";
import getConfig from '@config'
const { contractName } = getConfig(process.env.NODE_ENV || 'development')
import shovel from '@assets/shovel.png'
import send from '@assets/send.png'
import withdraw from '@assets/money.png'
import receive from '@assets/receive.png'
import {yoktoNear} from '@utils/funcs' 
import { utils, transactions } from "near-api-js";
import {Decimal} from "decimal.js";

export default function Tokens() {

    let { tokenId } = useParams();
    const [tokenDetail, setTokenDetail] = useState({})
    const [balance, setBalance] = useState(0)
    const {contract, getFtBalance} = useFtContract(tokenId)
    const [currentAction, setAction] = useState('send')
    const [actionAddress, setActionAddress] = useState('')
    const [actionValue, setActionValue] = useState('')
    const [totalSupply, setTotalSupply] = useState(0)

    useEffect(() => {
        if (tokenId) {
            window.contract.get_token({token_id: `${tokenId.toLowerCase()}`}).then((tokenDetail) => {
                console.log(tokenDetail)
                setTokenDetail(tokenDetail)
            })
        }
    }, [tokenId])

    useEffect(() => {
        if (contract) {
            contract.ft_balance_of({account_id: window.accountId}).then((balance) => {
                setBalance(balance)
            })
            contract.ft_total_supply().then((balance) => {
                setTotalSupply(balance)
            })
        }
    }, [contract])

    const handleCancel = () => {
        setActionAddress('')
        setActionValue('')
    }

    const handleTransfer = async () => {
        if (!actionAddress || !actionValue || parseInt(actionValue) < 1) {
            alert('Please fill out the form')
        } else {
            console.log(contract)
            const result = await window.account.signAndSendTransaction({
                receiverId: contract.contractId,
                actions: [
                    transactions.functionCall(
                        'storage_deposit', 
                        {account_id: actionAddress},
                        10000000000000, 
                        utils.format.parseNearAmount("0.01")
                    ),
                    transactions.functionCall(
                        'ft_transfer', 
                        {
                            receiver_id: actionAddress, 
                            amount: (actionValue * Math.pow(10, tokenDetail?.metadata?.decimals || 0)).toString(), 
                            memo: null 
                        }, 
                        250000000000000,
                        1
                    )
                ]
            });
        }
    }

    const handleMint = async () => {
        if (!actionAddress || !actionValue || parseInt(actionValue) < 1) {
            alert('Please fill out the form')
        } else {
            const result = await window.account.signAndSendTransaction({
                receiverId: contract.contractId,
                actions: [
                    transactions.functionCall(
                        'storage_deposit', 
                        {account_id: actionAddress},
                        10000000000000, 
                        utils.format.parseNearAmount("0.01")
                    ),
                    transactions.functionCall(
                        'mint', 
                        {
                            account_id: actionAddress, 
                        }, 
                        250000000000000,
                        actionValue * Math.pow(10, tokenDetail?.metadata?.decimals || 0)
                    )
                ]
            });
        }
    }

    const handleWithdraw = async () => {
        const burnValue = parseInt(actionValue) * Math.pow(10, tokenDetail?.metadata?.decimals || 0)
        const burnValueJSON = JSON.stringify(burnValue)
        await contract.withdraw({amount: burnValueJSON});
    }

    return (
        <div className="container">
            <div className="d-flex justify-content-center p-5">
                <div className="token-detail">
                    <div className="token-detail-info d-flex justify-content-between">
                        <div className="d-flex">
                            <div className="token-logo d-flex flex-column justify-content-center">
                                <img src={tokenDetail?.metadata?.icon} alt="icon" />
                            </div>
                            <div className="token-metadata d-flex flex-column justify-content-center">
                                <div className="token-symbol">{tokenDetail?.metadata?.symbol.toUpperCase()}</div>
                                <div className="token-name">{tokenDetail?.metadata?.name}</div>
                            </div>
                        </div>
                        
                    </div>
                    <br />
                    <div>
                        <button 
                            className="token-spec btn-success btn btn-sm"
                            data-bs-toggle="tooltip" 
                            data-bs-placement="top" 
                            title="Contract address"
                        >{`${tokenDetail?.metadata?.symbol.toLowerCase()}.${contractName}`}</button>
                        <button 
                            className="token-owner btn-danger btn btn-sm"
                            data-bs-toggle="tooltip" 
                            data-bs-placement="top" 
                            title="Contract owner"
                        >{tokenDetail?.owner_id}</button>
                    </div>
                    <div className="token-supply d-flex flex-column justify-content-center mt-3">
                        <div className="token-balance">Your balance: {balance / Math.pow(10, tokenDetail?.metadata?.decimals || 0)}</div>
                        <div className="token-supply">Total supply: {totalSupply / Math.pow(10, tokenDetail?.metadata?.decimals || 0)}</div>
                    </div>
                    <br />
                    <div className="token-actions d-flex flex-wrap justify-content-around">
                        <div className={`action ${currentAction === 'send' ? 'active' : ''}`} onClick={() => setAction('send')}>
                            <div className="action-logo">
                                <img src={send} alt="send"/>
                            </div>
                            <div className="action-title">Send</div>
                        </div>
                        {/* <div className={`action ${currentAction === 'receive' ? 'active' : ''}`} onClick={() => setAction('receive')}>
                            <div className="action-logo">
                                <img src={receive} alt="send"/>
                            </div>
                            <div className="action-title">Receive</div>
                        </div> */}
                        <div className={`action ${currentAction === 'mint' ? 'active' : ''}`} onClick={() => setAction('mint')}>
                            <div className="action-logo">
                                <img src={shovel} alt="send"/>
                            </div>
                            <div className="action-title">Mint</div>
                        </div>
                        <div className={`action ${currentAction === 'burn' ? 'active' : ''}`} onClick={() => setAction('burn')}>
                            <div className="action-logo">
                                <img src={withdraw} alt="send"/>
                            </div>
                            <div className="action-title">Burn</div>
                        </div>
                    </div>
                    <br />
                    {currentAction === 'send' && <div className="send-token action-detail d-flex flex-column text-center mt-3">
                        <h1>Send {tokenDetail?.metadata?.symbol.toUpperCase()}</h1>
                        <div className="token-logo d-flex justify-content-center mt-5">
                            <img src={tokenDetail?.metadata?.icon} alt="icon" />
                        </div>
                        <div className="action-form mt-5">
                            <div className="input-group mb-3">
                                <input 
                                    type="text" 
                                    className="form-control" 
                                    placeholder="Receiver's address" 
                                    aria-label="Username" 
                                    aria-describedby="basic-addon1" 
                                    onChange={(event) => setActionAddress(event.target.value)}
                                    value={actionAddress}
                                />
                            </div>
                            <div className="input-group mb-3">
                                <input 
                                    type="number" 
                                    className="form-control" 
                                    placeholder="Amount" 
                                    aria-label="Username" 
                                    aria-describedby="basic-addon1" 
                                    onChange={(event) => setActionValue(event.target.value)}
                                    value={actionValue}
                                    min="0"
                                />
                            </div>
                            <div className="token-action-buttons row ">
                                <div className="col-6"><button onClick={handleTransfer} type="button" className="btn btn-success">Send</button></div>
                                <div className="col-6"><button onClick={handleCancel} type="button" className="btn btn-danger">Cancel</button></div>
                            </div>
                        </div>
                    </div>}

                    {currentAction === 'mint' && <div className="send-token action-detail d-flex flex-column text-center mt-3">
                        <h1>Mint {tokenDetail?.metadata?.symbol.toUpperCase()}</h1>
                        <div className="token-logo d-flex justify-content-center mt-5">
                            <img src={tokenDetail?.metadata?.icon} alt="icon" />
                        </div>
                        <div className="action-form mt-5">
                            <div className="input-group mb-3">
                                <input 
                                    type="text" 
                                    className="form-control" 
                                    placeholder="Receiver's address" 
                                    aria-label="Username" 
                                    aria-describedby="basic-addon1" 
                                    onChange={(event) => setActionAddress(event.target.value)}
                                    value={actionAddress}
                                />
                            </div>
                            <div className="input-group mb-3">
                                <input 
                                    type="number" 
                                    className="form-control" 
                                    placeholder="Amount" 
                                    aria-label="Username" 
                                    aria-describedby="basic-addon1" 
                                    onChange={(event) => setActionValue(event.target.value)}
                                    value={actionValue}
                                    min="0"
                                />
                            </div>
                            <div className="token-action-buttons row ">
                                <div className="col-6"><button onClick={handleMint} type="button" className="btn btn-success">Mint</button></div>
                                <div className="col-6"><button onClick={handleCancel} type="button" className="btn btn-danger">Cancel</button></div>
                            </div>
                        </div>
                    </div>}

                    {currentAction === 'burn' && <div className="send-token action-detail d-flex flex-column text-center mt-3">
                        <h1>Burn {tokenDetail?.metadata?.symbol.toUpperCase()}</h1>
                        <div className="token-logo d-flex justify-content-center mt-5">
                            <img src={tokenDetail?.metadata?.icon} alt="icon" />
                        </div>
                        <div className="action-form mt-5">
                            <div className="input-group mb-3">
                                <input 
                                    type="number" 
                                    className="form-control" 
                                    placeholder="Amount" 
                                    aria-label="Username" 
                                    aria-describedby="basic-addon1" 
                                    onChange={(event) => setActionValue(event.target.value)}
                                    value={actionValue}
                                    min="0"
                                />
                            </div>
                            <div className="token-action-buttons row ">
                                <div className="col-6"><button onClick={handleWithdraw} type="button" className="btn btn-success">Burn</button></div>
                                <div className="col-6"><button onClick={handleCancel} type="button" className="btn btn-danger">Cancel</button></div>
                            </div>
                        </div>
                    </div>}
                </div>
            </div>
        </div>
    )
}
'''
'''--- src/pages/Tokens.js ---
import React, { useState, useEffect } from 'react'
import TokenCreateForm from '@component/TokenCreateForm'
import './styles/tokens.page.css'
import TokenCard from '@component/TokenCard'

export default function Tokens() {

    const [tokens, setTokens] = React.useState([])

    useEffect(() => {
        if (window.walletConnection.isSignedIn()) {
            window.contract.get_tokens({from_index: 0, limit: 10}).then((result) => {
                setTokens(result)
            })
        }
    }, [])

    return (
        <main>
            <div className="d-flex justify-content-between p-5">
                <div className="d-flex flex-column justify-content-center project-introduction">
                    <h1>Connesus</h1>
                    <p>Connect influencer to fans by blockchain</p>
                </div>
                <div className="token-create-form"> 
                    
                    <TokenCreateForm />
                </div>
            </div>
            <div className="d-flex justify-content-evenly flex-wrap mt-5 container">
                {tokens.map(token => (
                    <TokenCard token={token} key={token?.metadata?.symbol} />
                ))}
            </div>
        </main>
    )
}
'''
'''--- src/pages/styles/tokenDetail.page.css ---
.token-detail {
    padding: 40px 50px;
    background-color: #192a56;
    width: 90%;
    border-radius: 30px;
}

.token-detail .token-detail-info .token-logo img {
    width: 60px;
    height: 60px;
    border-radius: 50%;
}

.token-detail .token-detail-info .token-logo {
    margin-right: 20px;
}

.token-symbol {
    font-size: 2rem;
    line-height: 2rem;
    font-weight: bold;
}

.token-name {
    font-size: 1rem;
    font-weight: bold;
    color: #7f8fa6
}

.token-spec {
    margin-right: 1rem;
}

.token-supply {
    font-size: 1.2rem;
    font-weight: bold;
}

.token-actions {

} 

.action {
    text-align: center;
    padding: 15px;
    transition: 0.2s;
    cursor: pointer;
}

.action:hover {
    transform: scale(1.2);
}

.action .action-logo {
    border-radius: 50%;
    background-color: #34495e;
}

.action .action-logo img {
    width: 70px;
    height: 70px;
    margin: 20px;
}

.action .action-title {
    font-size: 1.1rem;
    font-weight: bold;
}

.active {
    transform: scale(1.2);
}

.action-detail .token-logo img {
    width: 150px;
    height: 150px;
    border-radius:50%;
} 

.action-form {
    width: 300px;
    margin-left: auto;
    margin-right: auto;
}

.token-action-buttons button {
    width: 100%;
}
'''
'''--- src/pages/styles/tokens.page.css ---
.project-introduction {
    font-family: 'League Gothic', sans-serif;
    
}

.project-introduction h1 {
    font-size: 6rem;
}

.project-introduction p {
    font-size: 2.2rem;
}
'''
'''--- src/utils.js ---
import { connect, Contract, keyStores, WalletConnection } from 'near-api-js'
import getConfig from './config'

const nearConfig = getConfig(process.env.NODE_ENV || 'development')

// Initialize contract & set global variables
export async function initContract() {
  const near = await connect(Object.assign({ deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() } }, nearConfig))

  // is hosted at https://wallet.testnet.near.org
  window.walletConnection = new WalletConnection(near)

  window.accountId = window.walletConnection.getAccountId()
  window.account = window.walletConnection.account();

  window.contract = await new Contract(window.walletConnection.account(), nearConfig.contractName, {
    viewMethods: [
      'get_min_attached_balance',
      'get_required_deposit',
      'get_number_of_tokens',
      'get_tokens',
      'get_token',
  ],
  changeMethods: [
      'storage_deposit',
      'create_token'
  ],
  })
}

export function logout() {
  window.walletConnection.signOut()
  // reload page
  window.location.replace(window.location.origin + window.location.pathname)
}

export function login() {
  // Allow the current app to make calls to the specified contract on the
  // user's behalf.
  // This works by creating a new access key for the user's account and storing
  // the private key in localStorage.
  window.walletConnection.requestSignIn(nearConfig.contractName)
}

'''
'''--- src/utils/funcs.js ---
export const yoktoNear = 1000000000000000000000000;
export const proposalsReload = 60000;
export const updatesJsonUrl = 'https://raw.githubusercontent.com/zavodil/sputnik-dao-updates/master/updates.json?t=';

export const timestampToReadable = (timestamp) => {
  let seconds = Number(timestamp / 1e9);
  let d = Math.floor(seconds / (3600 * 24));
  let h = Math.floor(seconds % (3600 * 24) / 3600);
  let m = Math.floor(seconds % 3600 / 60);
  let s = Math.floor(seconds % 60);

  let dDisplay = d > 0 ? d + (d === 1 ? " day, " : " days, ") : "";
  let hDisplay = h > 0 ? h + (h === 1 ? " hour, " : " hours, ") : "";
  let mDisplay = m > 0 ? m + (m === 1 ? " minute, " : " minutes, ") : "";
  let sDisplay = s > 0 ? s + (s === 1 ? " second" : " seconds") : "";
  return (dDisplay + hDisplay + mDisplay + sDisplay).replace(/,\s*$/, "");
}

export const convertDuration = (duration) => {
  let utcSeconds = duration / 1e9;
  let epoch = new Date(0);
  epoch.setUTCSeconds(utcSeconds);
  return epoch;
}

export const parseForumUrl = (url) => {
  //let afterSlashChars = id.match(/\/([^\/]+)\/?$/)[1];
  let a = url.replace(/\/$/, "").split('/');
  let last = a[a.length - 1];
  let secondLast = a[a.length - 2];
  let category = null;
  let subCategory = null;
  if (/^\d+$/.test(secondLast)) {
    category = secondLast;
    subCategory = last
  } else {
    if (/^\d+$/.test(last)) {
      category = last;
    }
  }

  if (category === null) {
    return url;
  } else {
    return subCategory === null ? "/t/" + category : "/t/" + category + "/" + subCategory;
  }
}
'''
'''--- src/utils/token.utils.js ---
import {FT_METADATA_SPEC} from '@constants/standard.constant'

export const tokenMetadataCreate = (name, symbol, icon, reference, reference_hash, decimals) => {
    return {
        spec: FT_METADATA_SPEC,
        name: name,
        symbol: symbol,
        icon: icon,
        reference: reference || null,
        reference_hash: reference_hash || null,
        decimals: decimals || 8,
    }
}
'''
'''--- src/utils/web3.storage.js ---
import { Web3Storage } from 'web3.storage/dist/bundle.esm.min.js'

const TOKEN = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkaWQ6ZXRocjoweGRhMjM1MDYwZUVkNWZBOERFMjlFMjAwN2QwNDkzMEExNGE1ZEZhNjgiLCJpc3MiOiJ3ZWIzLXN0b3JhZ2UiLCJpYXQiOjE2MzMwNzcxOTU5NzYsIm5hbWUiOiJtYW5obnZfdGVzdCJ9.upuMLynlXF32CxbGpe2MG0DscV8ivvBGyxPPa3ehj50"

function makeStorageClient(TOKEN) {
    return new Web3Storage({ token: TOKEN })
}

async function storeFiles(files) {
    const client = makeStorageClient(TOKEN)
    const cid = await client.put(files)
    return cid
}

async function retrieveFiles(cid) {
    const client = makeStorageClient(TOKEN)
    const res = await client.get(cid)
    console.log(`Got a response! [${res.status}] ${res.statusText}`)
    if (!res.ok) {
        throw new Error(`failed to get ${cid} - [${res.status}] ${res.statusText}`)
    }

    // unpack File objects from the response
    const files = await res.files()
    return files
}

async function retrieve(cid) {
    const client = makeStorageClient(TOKEN)
    const res = await client.get(cid)
    console.log(`Got a response! [${res.status}] ${res.statusText}`)
    if (!res.ok) {
        throw new Error(`failed to get ${cid}`)
    }
}

async function checkFileStatus(TOKEN, cid) {
    const client = makeStorageClient(TOKEN)
    const status = await client.status(cid)
    if (status) {
        console.log(status)
    }
}

module.exports = {
    makeStorageClient,
    storeFiles,
    retrieve,
    retrieveFiles,
    checkFileStatus
}
'''
'''--- src/wallet/login/index.html ---
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/css/bootstrap.min.css" integrity="sha384-GJzZqFGwb1QTTN6wy59ffF1BuGJpLSa9DkKMp0DgiMDm4iYMj70gZWKYbI706tWS" crossorigin="anonymous">
</head>
<body style="background: #fff; margin-top: 3em">
  <div>For local account login, Please run the following command in NEAR CLI, then enter account id here.
  </div>
  <div>
      <code id="shell-command"></code>
  </div>
  <input type="text" id="accountId" name="accountId" placeholder="Account id"></input>
  <button type="button" onClick="done()">done</button>
  <script>
    const currentUrl = new URL(window.location.href);
    const message = `NODE_ENV=local near create_account {newAccountId} --masterAccount {masterAccountId} --publicKey ${currentUrl.searchParams.get('public_key')} --initialAmount 10000000000000000000`;
    document.getElementById('shell-command').innerText = message;

    function done() {
      const successUrl = new URL(currentUrl.searchParams.get('success_url'));
      successUrl.searchParams.set('account_id', document.getElementById('accountId').value);
      successUrl.searchParams.set('public_key', currentUrl.searchParams.get('public_key'));
      window.location.assign(successUrl.toString());
    }
  </script>
</body>
</html>
'''