*GitHub Repository "kiskesis/nftzoo"*

'''--- .idea/modules.xml ---
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ProjectModuleManager">
    <modules>
      <module fileurl="file://$PROJECT_DIR$/.idea/3challenge.iml" filepath="$PROJECT_DIR$/.idea/3challenge.iml" />
    </modules>
  </component>
</project>
'''
'''--- README.md ---
# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `yarn start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in the browser.

The page will reload if you make edits.\
You will also see any lint errors in the console.

### `yarn test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `yarn build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `yarn eject`

**Note: this is a one-way operation. Once you `eject`, you can’t go back!**

If you aren’t satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you’re on your own.

You don’t have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn’t feel obligated to use this feature. However we understand that this tool wouldn’t be useful if you couldn’t customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `yarn build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)

'''
'''--- craco.config.js ---
const path = require('path');
module.exports = {
  webpack: {
    alias: {
      'components': path.resolve(__dirname, 'src/components/'),
      'styles': path.resolve(__dirname, 'src/styles/'),
      'images': path.resolve(__dirname, 'src/images/'),
      'constants': path.resolve(__dirname, 'src/constants'),
    }
  }
}
'''
'''--- nft-zoo-contract/README.md ---
# NEAR NFT-Tutorial

Welcome to NEAR's NFT tutorial, where we will help you parse the details around NEAR's [NEP-171 standard](https://nomicon.io/Standards/NonFungibleToken/Core.html) (Non-Fungible Token Standard), and show you how to build your own NFT smart contract from the ground up, improving your understanding about the NFT standard along the way. 

## Prerequisites

* [NEAR Wallet Account](wallet.testnet.near.org)
* [Rust Toolchain](https://docs.near.org/docs/develop/contracts/rust/intro#installing-the-rust-toolchain)
* [NEAR-CLI](https://docs.near.org/docs/tools/near-cli#setup)
* [yarn](https://classic.yarnpkg.com/en/docs/install#mac-stable)

## Tutorial Stages 

Each branch you will find in this repo corresponds to various stages of this tutorial with a partially completed contract at each stage. You are welcome to start from any stage you want to learn the most about. 

| Branch        | Docs Tutorial                                                                                    | Description |
| ------------- | ------------------------------------------------------------------------------------------------ | ----------- |
| 1.skeleton    | [Contract Architecture](https://docs.near.org/docs/tutorials/contracts/nfts/skeleton) | You'll learn the basic architecture of the NFT smart contract, and you'll compile this skeleton code with the Rust toolchain.            |
| 2.minting     | [Minting](https://docs.near.org/docs/tutorials/contracts/nfts/minting)                |Here you'll flesh out the skeleton so the smart contract can mint a non-fungible token             |
| 3.enumeration | [Enumeration](https://docs.near.org/docs/tutorials/contracts/nfts/enumeration)        |    Here you'll find different enumeration methods that can be used to return the smart contract's states.          |
| 4.core        | [Core](https://docs.near.org/docs/tutorials/contracts/nfts/core)                      | In this tutorial you'll extend the NFT contract using the core standard, which will allow you to transfer non-fungible tokens.             |
| 5.approval    | [Approval](https://docs.near.org/docs/tutorials/contracts/nfts/approvals)             | Here you'll expand the contract allowing other accounts to transfer NFTs on your behalf.            |
| 6.royalty     | [Royalty](https://docs.near.org/docs/tutorials/contracts/nfts/royalty)                                                                                        |Here you'll add the ability for non-fungible tokens to have royalties. This will allow people to get a percentage of the purchase price when an NFT is purchased.             |
| 7.events      | -----------                                                                                        |   This allows indexers to know what functions are being called and make it easier and more reliable to keep track of information that can be used to populate the collectibles tab in the wallet for example. (tutorial docs have yet to be implemented )          |
| 8.marketplace | -----------                                                                                      | -----------             |

The tutorial series also contains a very helpful section on [**Upgrading Smart Contracts**](https://docs.near.org/docs/tutorials/contracts/nfts/upgrade-contract). Definitely go and check it out as this is a common pain point.

# Quick-Start 

If you want to see the full completed contract go ahead and clone and build this repo using 

```=bash
git clone https://github.com/near-examples/nft-tutorial.git 
cd nft-tutorial
git switch 6.royalty
yarn build
```

Now that you've cloned and built the contract we can try a few things. 

## Mint An NFT

Once you've created your near wallet go ahead and login to your wallet with your cli and follow the on-screen prompts

```=bash
near login
```

Once your logged in you have to deploy the contract. Make a subaccount with the name of your choosing 

```=bash 
near create-account nft-example.your-account.testnet --masterAccount your-account.testnet --initialBalance 10
```

After you've created your sub account deploy the contract to that sub account, set this variable to your sub account name

```=bash
NFT_CONTRACT_ID=nft-example.your-account.testnet

MAIN_ACCOUNT=your-account.testnet
```

Verify your new variable has the correct value
```=bash
echo $NFT_CONTRACT_ID

echo $MAIN_ACCOUNT
```

### Deploy Your Contract
```=bash
near deploy --accountId $NFT_CONTRACT_ID --wasmFile out/main.wasm
```

### Initialize Your Contract 

```=bash
near call $NFT_CONTRACT_ID new_default_meta '{"owner_id": "'$NFT_CONTRACT_ID'"}' --accountId $NFT_CONTRACT_ID
```

### View Contracts Meta Data

```=bash
near view $NFT_CONTRACT_ID nft_metadata
```
### Minting Token

```bash=
near call $NFT_CONTRACT_ID nft_mint '{"token_id": "token-1", "metadata": {"title": "My Non Fungible Team Token", "description": "The Team Most Certainly Goes :)", "media": "https://bafybeiftczwrtyr3k7a2k4vutd3amkwsmaqyhrdzlhvpt33dyjivufqusq.ipfs.dweb.link/goteam-gif.gif"}, "receiver_id": "'$MAIN_ACCOUNT'"}' --accountId $MAIN_ACCOUNT --amount 0.1
```

After you've minted the token go to wallet.testnet.near.org to `your-account.testnet` and look in the collections tab and check out your new sample NFT! 

## View NFT Information

After you've minted your NFT you can make a view call to get a response containing the `token_id` `owner_id` and the `metadata`

```bash=
near view $NFT_CONTRACT_ID nft_token '{"token_id": "token-1"}'
```

## Transfering NFTs

To transfer an NFT go ahead and make another [testnet wallet account](https://wallet.testnet.near.org).

Then run the following
```bash=
MAIN_ACCOUNT_2=your-second-wallet-account.testnet
```

Verify the correct variable names with this

```=bash
echo $NFT_CONTRACT_ID

echo $MAIN_ACCOUNT

echo $MAIN_ACCOUNT_2
```

To initiate the transfer..

```bash=
near call $NFT_CONTRACT_ID nft_transfer '{"receiver_id": "$MAIN_ACCOUNT_2", "token_id": "token-1", "memo": "Go Team :)"}' --accountId $MAIN_ACCOUNT --depositYocto 1
```

In this call you are depositing 1 yoctoNEAR for security and so that the user will be redirected to the NEAR wallet.

## Errata

Large Changes:
* **2022-02-12**: updated the enumeration methods `nft_tokens` and `nft_tokens_for_owner` to no longer use any `to_vector` operations to save GAS. In addition, the default limit was changed from 0 to 50. PR found [here](https://github.com/near-examples/nft-tutorial/pull/17). 

Small Changes:
* **2022-02-22**: changed `token_id` parameter type in nft_payout from `String` to `TokenId` for consistency as per pythonicode's suggestion

'''
'''--- nft-zoo-contract/market-contract/Cargo.toml ---
[package]
name = "nft_simple"
version = "0.1.0"
authors = ["Near Inc <hello@nearprotocol.com>"]
edition = "2021"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
near-sdk = "=4.0.0-pre.4"

[profile.release]
codegen-units=1
opt-level = "z"
lto = true
debug = false
panic = "abort"
overflow-checks = true

'''
'''--- nft-zoo-contract/market-contract/README.md ---
# TBD

'''
'''--- nft-zoo-contract/market-contract/build.sh ---
#!/bin/bash
set -e && RUSTFLAGS='-C link-arg=-s' cargo build --target wasm32-unknown-unknown --release && mkdir -p ../out && cp target/wasm32-unknown-unknown/release/*.wasm ../out/market.wasm
'''
'''--- nft-zoo-contract/market-contract/src/external.rs ---
use crate::*;

/// external contract calls

//initiate a cross contract call to the nft contract. This will transfer the token to the buyer and return
//a payout object used for the market to distribute funds to the appropriate accounts.
#[ext_contract(ext_contract)]
trait ExtContract {
    fn nft_transfer_payout(
        &mut self,
        receiver_id: AccountId, //purchaser (person to transfer the NFT to)
        token_id: TokenId, //token ID to transfer
        approval_id: u64, //market contract's approval ID in order to transfer the token on behalf of the owner
        memo: String, //memo (to include some context)
        /*
            the price that the token was purchased for. This will be used in conjunction with the royalty percentages
            for the token in order to determine how much money should go to which account. 
        */
        balance: U128,
        //the maximum amount of accounts the market can payout at once (this is limited by GAS)
		max_len_payout: u32,
    );
}
'''
'''--- nft-zoo-contract/market-contract/src/internal.rs ---
use crate::*;

//used to generate a unique prefix in our storage collections (this is to avoid data collisions)
pub(crate) fn hash_account_id(account_id: &AccountId) -> CryptoHash {
    //get the default hash
    let mut hash = CryptoHash::default();
    //we hash the account ID and return it
    hash.copy_from_slice(&env::sha256(account_id.as_bytes()));
    hash
}

impl Contract {
    //internal method for removing a sale from the market. This returns the previously removed sale object
    pub(crate) fn internal_remove_sale(
        &mut self,
        nft_contract_id: AccountId,
        token_id: TokenId,
    ) -> Sale {
        //get the unique sale ID (contract + DELIMITER + token ID)
        let contract_and_token_id = format!("{}{}{}", &nft_contract_id, DELIMETER, token_id);
        //get the sale object by removing the unique sale ID. If there was no sale, panic
        let sale = self.sales.remove(&contract_and_token_id).expect("No sale");

        //get the set of sales for the sale's owner. If there's no sale, panic. 
        let mut by_owner_id = self.by_owner_id.get(&sale.owner_id).expect("No sale by_owner_id");
        //remove the unique sale ID from the set of sales
        by_owner_id.remove(&contract_and_token_id);
        
        //if the set of sales is now empty after removing the unique sale ID, we simply remove that owner from the map
        if by_owner_id.is_empty() {
            self.by_owner_id.remove(&sale.owner_id);
        //if the set of sales is not empty after removing, we insert the set back into the map for the owner
        } else {
            self.by_owner_id.insert(&sale.owner_id, &by_owner_id);
        }

        //get the set of token IDs for sale for the nft contract ID. If there's no sale, panic. 
        let mut by_nft_contract_id = self
            .by_nft_contract_id
            .get(&nft_contract_id)
            .expect("No sale by nft_contract_id");
        
        //remove the token ID from the set 
        by_nft_contract_id.remove(&token_id);
        
        //if the set is now empty after removing the token ID, we remove that nft contract ID from the map
        if by_nft_contract_id.is_empty() {
            self.by_nft_contract_id.remove(&nft_contract_id);
        //if the set is not empty after removing, we insert the set back into the map for the nft contract ID
        } else {
            self.by_nft_contract_id
                .insert(&nft_contract_id, &by_nft_contract_id);
        }

        //return the sale object
        sale
    }
}

'''
'''--- nft-zoo-contract/market-contract/src/lib.rs ---
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::collections::{LookupMap, UnorderedMap, UnorderedSet};
use near_sdk::json_types::{U128, U64};
use near_sdk::serde::{Deserialize, Serialize};
use near_sdk::{
    assert_one_yocto, env, ext_contract, near_bindgen, AccountId, Balance, Gas, PanicOnDefault,
    Promise, CryptoHash, BorshStorageKey,
};
use std::collections::HashMap;

use crate::external::*;
use crate::internal::*;
use crate::sale::*;
use near_sdk::env::STORAGE_PRICE_PER_BYTE;

mod external;
mod internal;
mod nft_callbacks;
mod sale;
mod sale_views;

//GAS constants to attach to calls
const GAS_FOR_ROYALTIES: Gas = Gas(115_000_000_000_000);
const GAS_FOR_NFT_TRANSFER: Gas = Gas(15_000_000_000_000);

//constant used to attach 0 NEAR to a call
const NO_DEPOSIT: Balance = 0;

//the minimum storage to have a sale on the contract.
const STORAGE_PER_SALE: u128 = 1000 * STORAGE_PRICE_PER_BYTE;

//every sale will have a unique ID which is `CONTRACT + DELIMITER + TOKEN_ID`
static DELIMETER: &str = ".";

//Creating custom types to use within the contract. This makes things more readable. 
pub type SalePriceInYoctoNear = U128;
pub type TokenId = String;
pub type FungibleTokenId = AccountId;
pub type ContractAndTokenId = String;
//defines the payout type we'll be parsing from the NFT contract as a part of the royalty standard.
#[derive(Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct Payout {
    pub payout: HashMap<AccountId, U128>,
} 

//main contract struct to store all the information
#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize, PanicOnDefault)]
pub struct Contract {
    //keep track of the owner of the contract
    pub owner_id: AccountId,
    
    /*
        to keep track of the sales, we map the ContractAndTokenId to a Sale. 
        the ContractAndTokenId is the unique identifier for every sale. It is made
        up of the `contract ID + DELIMITER + token ID`
    */
    pub sales: UnorderedMap<ContractAndTokenId, Sale>,
    
    //keep track of all the Sale IDs for every account ID
    pub by_owner_id: LookupMap<AccountId, UnorderedSet<ContractAndTokenId>>,

    //keep track of all the token IDs for sale for a given contract
    pub by_nft_contract_id: LookupMap<AccountId, UnorderedSet<TokenId>>,

    //keep track of the storage that accounts have payed
    pub storage_deposits: LookupMap<AccountId, Balance>,
}

/// Helper structure to for keys of the persistent collections.
#[derive(BorshStorageKey, BorshSerialize)]
pub enum StorageKey {
    Sales,
    ByOwnerId,
    ByOwnerIdInner { account_id_hash: CryptoHash },
    ByNFTContractId,
    ByNFTContractIdInner { account_id_hash: CryptoHash },
    ByNFTTokenType,
    ByNFTTokenTypeInner { token_type_hash: CryptoHash },
    FTTokenIds,
    StorageDeposits,
}

#[near_bindgen]
impl Contract {
    /*
        initialization function (can only be called once).
        this initializes the contract with default data and the owner ID
        that's passed in
    */
    #[init]
    pub fn new(owner_id: AccountId) -> Self {
        let this = Self {
            //set the owner_id field equal to the passed in owner_id. 
            owner_id,

            //Storage keys are simply the prefixes used for the collections. This helps avoid data collision
            sales: UnorderedMap::new(StorageKey::Sales),
            by_owner_id: LookupMap::new(StorageKey::ByOwnerId),
            by_nft_contract_id: LookupMap::new(StorageKey::ByNFTContractId),
            storage_deposits: LookupMap::new(StorageKey::StorageDeposits),
        };

        //return the Contract object
        this
    }

    //Allows users to deposit storage. This is to cover the cost of storing sale objects on the contract
    //Optional account ID is to users can pay for storage for other people.
    #[payable]
    pub fn storage_deposit(&mut self, account_id: Option<AccountId>) {
        //get the account ID to pay for storage for
        let storage_account_id = account_id 
            //convert the valid account ID into an account ID
            .map(|a| a.into())
            //if we didn't specify an account ID, we simply use the caller of the function
            .unwrap_or_else(env::predecessor_account_id);

        //get the deposit value which is how much the user wants to add to their storage
        let deposit = env::attached_deposit();

        //make sure the deposit is greater than or equal to the minimum storage for a sale
        assert!(
            deposit >= STORAGE_PER_SALE,
            "Requires minimum deposit of {}",
            STORAGE_PER_SALE
        );

        //get the balance of the account (if the account isn't in the map we default to a balance of 0)
        let mut balance: u128 = self.storage_deposits.get(&storage_account_id).unwrap_or(0);
        //add the deposit to their balance
        balance += deposit;
        //insert the balance back into the map for that account ID
        self.storage_deposits.insert(&storage_account_id, &balance);
    }

    //Allows users to withdraw any excess storage that they're not using. Say Bob pays 0.01N for 1 sale
    //Alice then buys Bob's token. This means bob has paid 0.01N for a sale that's no longer on the marketplace
    //Bob could then withdraw this 0.01N back into his account. 
    #[payable]
    pub fn storage_withdraw(&mut self) {
        //make sure the user attaches exactly 1 yoctoNEAR for security purposes.
        //this will redirect them to the NEAR wallet (or requires a full access key). 
        assert_one_yocto();

        //the account to withdraw storage to is always the function caller
        let owner_id = env::predecessor_account_id();
        //get the amount that the user has by removing them from the map. If they're not in the map, default to 0
        let mut amount = self.storage_deposits.remove(&owner_id).unwrap_or(0);
        
        //how many sales is that user taking up currently. This returns a set
        let sales = self.by_owner_id.get(&owner_id);
        //get the length of that set. 
        let len = sales.map(|s| s.len()).unwrap_or_default();
        //how much NEAR is being used up for all the current sales on the account 
        let diff = u128::from(len) * STORAGE_PER_SALE;

        //the excess to withdraw is the total storage paid - storage being used up.
        amount -= diff;

        //if that excess to withdraw is > 0, we transfer the amount to the user.
        if amount > 0 {
            Promise::new(owner_id.clone()).transfer(amount);
        }
        //we need to add back the storage being used up into the map if it's greater than 0.
        //this is so that if the user had 500 sales on the market, we insert that value here so
        //if those sales get taken down, the user can then go and withdraw 500 sales worth of storage.
        if diff > 0 {
            self.storage_deposits.insert(&owner_id, &diff);
        }
    }

    /// views
    //return the minimum storage for 1 sale
    pub fn storage_minimum_balance(&self) -> U128 {
        U128(STORAGE_PER_SALE)
    }

    //return how much storage an account has paid for
    pub fn storage_balance_of(&self, account_id: AccountId) -> U128 {
        U128(self.storage_deposits.get(&account_id).unwrap_or(0))
    }
}

'''
'''--- nft-zoo-contract/market-contract/src/nft_callbacks.rs ---
use crate::*;

/// approval callbacks from NFT Contracts

//struct for keeping track of the sale conditions for a Sale
#[derive(Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct SaleArgs {
    pub sale_conditions: SalePriceInYoctoNear,
}

/*
    trait that will be used as the callback from the NFT contract. When nft_approve is
    called, it will fire a cross contract call to this marketplace and this is the function
    that is invoked. 
*/
trait NonFungibleTokenApprovalsReceiver {
    fn nft_on_approve(
        &mut self,
        token_id: TokenId,
        owner_id: AccountId,
        approval_id: u64,
        msg: String,
    );
}

//implementation of the trait
#[near_bindgen]
impl NonFungibleTokenApprovalsReceiver for Contract {
    /// where we add the sale because we know nft owner can only call nft_approve

    fn nft_on_approve(
        &mut self,
        token_id: TokenId,
        owner_id: AccountId,
        approval_id: u64,
        msg: String,
    ) {
        // get the contract ID which is the predecessor
        let nft_contract_id = env::predecessor_account_id();
        //get the signer which is the person who initiated the transaction
        let signer_id = env::signer_account_id();

        //make sure that the signer isn't the predecessor. This is so that we're sure
        //this was called via a cross-contract call
        assert_ne!(
            nft_contract_id,
            signer_id,
            "nft_on_approve should only be called via cross-contract call"
        );
        //make sure the owner ID is the signer. 
        assert_eq!(
            owner_id,
            signer_id,
            "owner_id should be signer_id"
        );

        //we need to enforce that the user has enough storage for 1 EXTRA sale.  

        //get the storage for a sale. dot 0 converts from U128 to u128
        let storage_amount = self.storage_minimum_balance().0;
        //get the total storage paid by the owner
        let owner_paid_storage = self.storage_deposits.get(&signer_id).unwrap_or(0);
        //get the storage required which is simply the storage for the number of sales they have + 1 
        let signer_storage_required = (self.get_supply_by_owner_id(signer_id).0 + 1) as u128 * storage_amount;
        
        //make sure that the total paid is >= the required storage
        assert!(
            owner_paid_storage >= signer_storage_required,
            "Insufficient storage paid: {}, for {} sales at {} rate of per sale",
            owner_paid_storage, signer_storage_required / STORAGE_PER_SALE, STORAGE_PER_SALE
        );

        //if all these checks pass we can create the sale conditions object.
        let SaleArgs { sale_conditions } =
            //the sale conditions come from the msg field. The market assumes that the user passed
            //in a proper msg. If they didn't, it panics. 
            near_sdk::serde_json::from_str(&msg).expect("Not valid SaleArgs");

        //create the unique sale ID which is the contract + DELIMITER + token ID
        let contract_and_token_id = format!("{}{}{}", nft_contract_id, DELIMETER, token_id);
        
        //insert the key value pair into the sales map. Key is the unique ID. value is the sale object
        self.sales.insert(
            &contract_and_token_id,
            &Sale {
                owner_id: owner_id.clone(), //owner of the sale / token
                approval_id, //approval ID for that token that was given to the market
                nft_contract_id: nft_contract_id.to_string(), //NFT contract the token was minted on
                token_id: token_id.clone(), //the actual token ID
                sale_conditions, //the sale conditions 
           },
        );

        //Extra functionality that populates collections necessary for the view calls 

        //get the sales by owner ID for the given owner. If there are none, we create a new empty set
        let mut by_owner_id = self.by_owner_id.get(&owner_id).unwrap_or_else(|| {
            UnorderedSet::new(
                StorageKey::ByOwnerIdInner {
                    //we get a new unique prefix for the collection by hashing the owner
                    account_id_hash: hash_account_id(&owner_id),
                }
                .try_to_vec()
                .unwrap(),
            )
        });
        
        //insert the unique sale ID into the set
        by_owner_id.insert(&contract_and_token_id);
        //insert that set back into the collection for the owner
        self.by_owner_id.insert(&owner_id, &by_owner_id);

        //get the token IDs for the given nft contract ID. If there are none, we create a new empty set
        let mut by_nft_contract_id = self
            .by_nft_contract_id
            .get(&nft_contract_id)
            .unwrap_or_else(|| {
                UnorderedSet::new(
                    StorageKey::ByNFTContractIdInner {
                        //we get a new unique prefix for the collection by hashing the owner
                        account_id_hash: hash_account_id(&nft_contract_id),
                    }
                    .try_to_vec()
                    .unwrap(),
                )
            });
        
        //insert the token ID into the set
        by_nft_contract_id.insert(&token_id);
        //insert the set back into the collection for the given nft contract ID
        self.by_nft_contract_id
            .insert(&nft_contract_id, &by_nft_contract_id);
    }
}

'''
'''--- nft-zoo-contract/market-contract/src/sale.rs ---
use crate::*;
use near_sdk::promise_result_as_success;

//struct that holds important information about each sale on the market
#[derive(BorshDeserialize, BorshSerialize, Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct Sale {
    //owner of the sale
    pub owner_id: AccountId,
    //market contract's approval ID to transfer the token on behalf of the owner
    pub approval_id: u64,
    //nft contract where the token was minted
    pub nft_contract_id: String,
    //actual token ID for sale
    pub token_id: String,
    //sale price in yoctoNEAR that the token is listed for
    pub sale_conditions: SalePriceInYoctoNear,
}

#[near_bindgen]
impl Contract {
    
    //removes a sale from the market. 
    #[payable]
    pub fn remove_sale(&mut self, nft_contract_id: AccountId, token_id: String) {
        //assert that the user has attached exactly 1 yoctoNEAR (for security reasons)
        assert_one_yocto();
        //get the sale object as the return value from removing the sale internally
        let sale = self.internal_remove_sale(nft_contract_id.into(), token_id);
        //get the predecessor of the call and make sure they're the owner of the sale
        let owner_id = env::predecessor_account_id();
        //if this fails, the remove sale will revert
        assert_eq!(owner_id, sale.owner_id, "Must be sale owner");
    }

    //updates the price for a sale on the market
    #[payable]
    pub fn update_price(
        &mut self,
        nft_contract_id: AccountId,
        token_id: String,
        price: U128,
    ) {
        //assert that the user has attached exactly 1 yoctoNEAR (for security reasons)
        assert_one_yocto();
        
        //create the unique sale ID from the nft contract and token
        let contract_id: AccountId = nft_contract_id.into();
        let contract_and_token_id = format!("{}{}{}", contract_id, DELIMETER, token_id);
        
        //get the sale object from the unique sale ID. If there is no token, panic. 
        let mut sale = self.sales.get(&contract_and_token_id).expect("No sale");

        //assert that the caller of the function is the sale owner
        assert_eq!(
            env::predecessor_account_id(),
            sale.owner_id,
            "Must be sale owner"
        );
        
        //set the sale conditions equal to the passed in price
        sale.sale_conditions = price;
        //insert the sale back into the map for the unique sale ID
        self.sales.insert(&contract_and_token_id, &sale);
    }

    //place an offer on a specific sale. The sale will go through as long as your deposit is greater than or equal to the list price
    #[payable]
    pub fn offer(&mut self, nft_contract_id: AccountId, token_id: String) {
        //get the attached deposit and make sure it's greater than 0
        let deposit = env::attached_deposit();
        assert!(deposit > 0, "Attached deposit must be greater than 0");

        //convert the nft_contract_id from a AccountId to an AccountId
        let contract_id: AccountId = nft_contract_id.into();
        //get the unique sale ID (contract + DELIMITER + token ID)
        let contract_and_token_id = format!("{}{}{}", contract_id, DELIMETER, token_id);
        
        //get the sale object from the unique sale ID. If the sale doesn't exist, panic.
        let sale = self.sales.get(&contract_and_token_id).expect("No sale");
        
        //get the buyer ID which is the person who called the function and make sure they're not the owner of the sale
        let buyer_id = env::predecessor_account_id();
        assert_ne!(sale.owner_id, buyer_id, "Cannot bid on your own sale.");
        
        //get the u128 price of the token (dot 0 converts from U128 to u128)
        let price = sale.sale_conditions.0;

        //make sure the deposit is greater than the price
        assert!(deposit >= price, "Attached deposit must be greater than or equal to the current price: {:?}", price);

        //process the purchase (which will remove the sale, transfer and get the payout from the nft contract, and then distribute royalties) 
        self.process_purchase(
            contract_id,
            token_id,
            U128(deposit),
            buyer_id,
        );
    }

    //private function used when a sale is purchased. 
    //this will remove the sale, transfer and get the payout from the nft contract, and then distribute royalties
    #[private]
    pub fn process_purchase(
        &mut self,
        nft_contract_id: AccountId,
        token_id: String,
        price: U128,
        buyer_id: AccountId,
    ) -> Promise {
        //get the sale object by removing the sale
        let sale = self.internal_remove_sale(nft_contract_id.clone(), token_id.clone());

        //initiate a cross contract call to the nft contract. This will transfer the token to the buyer and return
        //a payout object used for the market to distribute funds to the appropriate accounts.
        ext_contract::nft_transfer_payout(
            buyer_id.clone(), //purchaser (person to transfer the NFT to)
            token_id, //token ID to transfer
            sale.approval_id, //market contract's approval ID in order to transfer the token on behalf of the owner
            "payout from market".to_string(), //memo (to include some context)
            /*
                the price that the token was purchased for. This will be used in conjunction with the royalty percentages
                for the token in order to determine how much money should go to which account. 
            */
            price,
			10, //the maximum amount of accounts the market can payout at once (this is limited by GAS)
            nft_contract_id, //contract to initiate the cross contract call to
            1, //yoctoNEAR to attach to the call
            GAS_FOR_NFT_TRANSFER, //GAS to attach to the call
        )
        //after the transfer payout has been initiated, we resolve the promise by calling our own resolve_purchase function. 
        //resolve purchase will take the payout object returned from the nft_transfer_payout and actually pay the accounts
        .then(ext_self::resolve_purchase(
            buyer_id, //the buyer and price are passed in incase something goes wrong and we need to refund the buyer
            price,
            env::current_account_id(), //we are invoking this function on the current contract
            NO_DEPOSIT, //don't attach any deposit
            GAS_FOR_ROYALTIES, //GAS attached to the call to payout royalties
        ))
    }

    /*
        private method used to resolve the promise when calling nft_transfer_payout. This will take the payout object and 
        check to see if it's authentic and there's no problems. If everything is fine, it will pay the accounts. If there's a problem,
        it will refund the buyer for the price. 
    */
    #[private]
    pub fn resolve_purchase(
        &mut self,
        buyer_id: AccountId,
        price: U128,
    ) -> U128 {
        // checking for payout information returned from the nft_transfer_payout method
        let payout_option = promise_result_as_success().and_then(|value| {
            //if we set the payout_option to None, that means something went wrong and we should refund the buyer
            near_sdk::serde_json::from_slice::<Payout>(&value)
                //converts the result to an optional value
                .ok()
                //returns None if the none. Otherwise executes the following logic
                .and_then(|payout_object| {
                    //we'll check if length of the payout object is > 10 or it's empty. In either case, we return None
                    if payout_object.payout.len() > 10 || payout_object.payout.is_empty() {
                        env::log_str("Cannot have more than 10 royalties");
                        None
                    
                    //if the payout object is the correct length, we move forward
                    } else {
                        //we'll keep track of how much the nft contract wants us to payout. Starting at the full price payed by the buyer
                        let mut remainder = price.0;
                        
                        //loop through the payout and subtract the values from the remainder. 
                        for &value in payout_object.payout.values() {
                            //checked sub checks for overflow or any errors and returns None if there are problems
                            remainder = remainder.checked_sub(value.0)?;
                        }
                        //Check to see if the NFT contract sent back a faulty payout that requires us to pay more or too little. 
                        //The remainder will be 0 if the payout summed to the total price. The remainder will be 1 if the royalties
                        //we something like 3333 + 3333 + 3333. 
                        if remainder == 0 || remainder == 1 {
                            //set the payout_option to be the payout because nothing went wrong
                            Some(payout_object.payout)
                        } else {
                            //if the remainder was anything but 1 or 0, we return None
                            None
                        }
                    }
                })
        });

        // if the payout option was some payout, we set this payout variable equal to that some payout
        let payout = if let Some(payout_option) = payout_option {
            payout_option
        //if the payout option was None, we refund the buyer for the price they payed and return
        } else {
            Promise::new(buyer_id).transfer(u128::from(price));
            // leave function and return the price that was refunded
            return price;
        };

        // NEAR payouts
        for (receiver_id, amount) in payout {
            Promise::new(receiver_id).transfer(amount.0);
        }

        //return the price payout out
        price
    }
}

//this is the cross contract call that we call on our own contract. 
/*
    private method used to resolve the promise when calling nft_transfer_payout. This will take the payout object and 
    check to see if it's authentic and there's no problems. If everything is fine, it will pay the accounts. If there's a problem,
    it will refund the buyer for the price. 
*/
#[ext_contract(ext_self)]
trait ExtSelf {
    fn resolve_purchase(
        &mut self,
        buyer_id: AccountId,
        price: U128,
    ) -> Promise;
}

'''
'''--- nft-zoo-contract/market-contract/src/sale_views.rs ---
use crate::*;

#[near_bindgen]
impl Contract {
    /// views
    
    //returns the number of sales the marketplace has up (as a string)
    pub fn get_supply_sales(
        &self,
    ) -> U64 {
        //returns the sales object length wrapped as a U64
        U64(self.sales.len())
    }
    
    //returns the number of sales for a given account (result is a string)
    pub fn get_supply_by_owner_id(
        &self,
        account_id: AccountId,
    ) -> U64 {
        //get the set of sales for the given owner Id
        let by_owner_id = self.by_owner_id.get(&account_id);
        
        //if there as some set, we return the length but if there wasn't a set, we return 0
        if let Some(by_owner_id) = by_owner_id {
            U64(by_owner_id.len())
        } else {
            U64(0)
        }
    }

    //returns paginated sale objects for a given account. (result is a vector of sales)
    pub fn get_sales_by_owner_id(
        &self,
        account_id: AccountId,
        from_index: Option<U128>,
        limit: Option<u64>,
    ) -> Vec<Sale> {
        //get the set of token IDs for sale for the given account ID
        let by_owner_id = self.by_owner_id.get(&account_id);
        //if there was some set, we set the sales variable equal to that set. If there wasn't, sales is set to an empty vector
        let sales = if let Some(by_owner_id) = by_owner_id {
            by_owner_id
        } else {
            return vec![];
        };
        
        //we'll convert the UnorderedSet into a vector of strings
        let keys = sales.as_vector();

        //where to start pagination - if we have a from_index, we'll use that - otherwise start from 0 index
        let start = u128::from(from_index.unwrap_or(U128(0)));
        
        //iterate through the keys vector
        keys.iter()
            //skip to the index we specified in the start variable
            .skip(start as usize) 
            //take the first "limit" elements in the vector. If we didn't specify a limit, use 0
            .take(limit.unwrap_or(0) as usize) 
            //we'll map the token IDs which are strings into Sale objects
            .map(|token_id| self.sales.get(&token_id).unwrap())
            //since we turned the keys into an iterator, we need to turn it back into a vector to return
            .collect()
    }

    //get the number of sales for an nft contract. (returns a string)
    pub fn get_supply_by_nft_contract_id(
        &self,
        nft_contract_id: AccountId,
    ) -> U64 {
        //get the set of tokens for associated with the given nft contract
        let by_nft_contract_id = self.by_nft_contract_id.get(&nft_contract_id);
        
        //if there was some set, return it's length. Otherwise return 0
        if let Some(by_nft_contract_id) = by_nft_contract_id {
            U64(by_nft_contract_id.len())
        } else {
            U64(0)
        }
    }

    //returns paginated sale objects associated with a given nft contract. (result is a vector of sales)
    pub fn get_sales_by_nft_contract_id(
        &self,
        nft_contract_id: AccountId,
        from_index: Option<U128>,
        limit: Option<u64>,
    ) -> Vec<Sale> {
        //get the set of token IDs for sale for the given contract ID
        let by_nft_contract_id = self.by_nft_contract_id.get(&nft_contract_id);
        
        //if there was some set, we set the sales variable equal to that set. If there wasn't, sales is set to an empty vector
        let sales = if let Some(by_nft_contract_id) = by_nft_contract_id {
            by_nft_contract_id
        } else {
            return vec![];
        };

        //we'll convert the UnorderedSet into a vector of strings
        let keys = sales.as_vector();

        //where to start pagination - if we have a from_index, we'll use that - otherwise start from 0 index
        let start = u128::from(from_index.unwrap_or(U128(0)));
        
        //iterate through the keys vector
        keys.iter()
            //skip to the index we specified in the start variable
            .skip(start as usize) 
            //take the first "limit" elements in the vector. If we didn't specify a limit, use 0
            .take(limit.unwrap_or(0) as usize) 
            //we'll map the token IDs which are strings into Sale objects by passing in the unique sale ID (contract + DELIMITER + token ID)
            .map(|token_id| self.sales.get(&format!("{}{}{}", nft_contract_id, DELIMETER, token_id)).unwrap())
            //since we turned the keys into an iterator, we need to turn it back into a vector to return
            .collect()
    }

    //get a sale information for a given unique sale ID (contract + DELIMITER + token ID)
    pub fn get_sale(&self, nft_contract_token: ContractAndTokenId) -> Option<Sale> {
        //try and get the sale object for the given unique sale ID. Will return an option since
        //we're not guaranteed that the unique sale ID passed in will be valid.
        self.sales.get(&nft_contract_token)
    }
}

'''
'''--- nft-zoo-contract/nft-contract/Cargo.toml ---
[package]
name = "nft_simple"
version = "0.1.0"
authors = ["Near Inc <hello@nearprotocol.com>"]
edition = "2021"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
near-sdk = "=4.0.0-pre.4"
serde_json = "1.0"

[profile.release]
codegen-units=1
opt-level = "z"
lto = true
debug = false
panic = "abort"
overflow-checks = true

'''
'''--- nft-zoo-contract/nft-contract/README.md ---
# TBD

'''
'''--- nft-zoo-contract/nft-contract/build.sh ---
#!/bin/bash
set -e && RUSTFLAGS='-C link-arg=-s' cargo build --target wasm32-unknown-unknown --release && mkdir -p ../out && cp target/wasm32-unknown-unknown/release/*.wasm ../out/main.wasm
'''
'''--- nft-zoo-contract/nft-contract/src/approval.rs ---
use crate::*;
use near_sdk::{ext_contract, Gas};

const GAS_FOR_NFT_APPROVE: Gas = Gas(10_000_000_000_000);
const NO_DEPOSIT: Balance = 0;

pub trait NonFungibleTokenCore {
    //approve an account ID to transfer a token on your behalf
    fn nft_approve(&mut self, token_id: TokenId, account_id: AccountId, msg: Option<String>);

    //check if the passed in account has access to approve the token ID
	fn nft_is_approved(
        &self,
        token_id: TokenId,
        approved_account_id: AccountId,
        approval_id: Option<u64>,
    ) -> bool;

    //revoke a specific account from transferring the token on your behalf
    fn nft_revoke(&mut self, token_id: TokenId, account_id: AccountId);

    //revoke all accounts from transferring the token on your behalf
    fn nft_revoke_all(&mut self, token_id: TokenId);
}

#[ext_contract(ext_non_fungible_approval_receiver)]
trait NonFungibleTokenApprovalsReceiver {
    //cross contract call to an external contract that is initiated during nft_approve
    fn nft_on_approve(
        &mut self,
        token_id: TokenId,
        owner_id: AccountId,
        approval_id: u64,
        msg: String,
    );
}

#[near_bindgen]
impl NonFungibleTokenCore for Contract {

    //allow a specific account ID to approve a token on your behalf
    #[payable]
    fn nft_approve(&mut self, token_id: TokenId, account_id: AccountId, msg: Option<String>) {
        /*
            assert at least one yocto for security reasons - this will cause a redirect to the NEAR wallet.
            The user needs to attach enough to pay for storage on the contract
        */
        assert_at_least_one_yocto();

        //get the token object from the token ID
        let mut token = self.tokens_by_id.get(&token_id).expect("No token");

        //make sure that the person calling the function is the owner of the token
        assert_eq!(
            &env::predecessor_account_id(),
            &token.owner_id,
            "Predecessor must be the token owner."
        );

        //get the next approval ID if we need a new approval
        let approval_id: u64 = token.next_approval_id;

        //check if the account has been approved already for this token
        let is_new_approval = token
            .approved_account_ids
            //insert returns none if the key was not present.  
            .insert(account_id.clone(), approval_id)
            //if the key was not present, .is_none() will return true so it is a new approval.
            .is_none();

        //if it was a new approval, we need to calculate how much storage is being used to add the account.
        let storage_used = if is_new_approval {
            bytes_for_approved_account_id(&account_id)
        //if it was not a new approval, we used no storage.
        } else {
            0
        };

        //increment the token's next approval ID by 1
        token.next_approval_id += 1;
        //insert the token back into the tokens_by_id collection
        self.tokens_by_id.insert(&token_id, &token);

        //refund any excess storage attached by the user. If the user didn't attach enough, panic. 
        refund_deposit(storage_used);

        //if some message was passed into the function, we initiate a cross contract call on the
        //account we're giving access to. 
        if let Some(msg) = msg {
            ext_non_fungible_approval_receiver::nft_on_approve(
                token_id,
                token.owner_id,
                approval_id,
                msg,
                account_id, //contract account we're calling
                NO_DEPOSIT, //NEAR deposit we attach to the call
                env::prepaid_gas() - GAS_FOR_NFT_APPROVE, //GAS we're attaching
            )
            .as_return(); // Returning this promise
        }
    }

    //check if the passed in account has access to approve the token ID
	fn nft_is_approved(
        &self,
        token_id: TokenId,
        approved_account_id: AccountId,
        approval_id: Option<u64>,
    ) -> bool {
        //get the token object from the token_id
        let token = self.tokens_by_id.get(&token_id).expect("No token");

        //get the approval number for the passed in account ID
		let approval = token.approved_account_ids.get(&approved_account_id);

        //if there was some approval ID found for the account ID
        if let Some(approval) = approval {
            //if a specific approval_id was passed into the function
			if let Some(approval_id) = approval_id {
                //return if the approval ID passed in matches the actual approval ID for the account
				approval_id == *approval
            //if there was no approval_id passed into the function, we simply return true
			} else {
				true
			}
        //if there was no approval ID found for the account ID, we simply return false
		} else {
			false
		}
    }

    //revoke a specific account from transferring the token on your behalf 
    #[payable]
    fn nft_revoke(&mut self, token_id: TokenId, account_id: AccountId) {
        //assert that the user attached exactly 1 yoctoNEAR for security reasons
        assert_one_yocto();
        //get the token object using the passed in token_id
        let mut token = self.tokens_by_id.get(&token_id).expect("No token");

        //get the caller of the function and assert that they are the owner of the token
        let predecessor_account_id = env::predecessor_account_id();
        assert_eq!(&predecessor_account_id, &token.owner_id);

        //if the account ID was in the token's approval, we remove it and the if statement logic executes
        if token
            .approved_account_ids
            .remove(&account_id)
            .is_some()
        {
            //refund the funds released by removing the approved_account_id to the caller of the function
            refund_approved_account_ids_iter(predecessor_account_id, [account_id].iter());

            //insert the token back into the tokens_by_id collection with the account_id removed from the approval list
            self.tokens_by_id.insert(&token_id, &token);
        }
    }

    //revoke all accounts from transferring the token on your behalf
    #[payable]
    fn nft_revoke_all(&mut self, token_id: TokenId) {
        //assert that the caller attached exactly 1 yoctoNEAR for security
        assert_one_yocto();

        //get the token object from the passed in token ID
        let mut token = self.tokens_by_id.get(&token_id).expect("No token");
        //get the caller and make sure they are the owner of the tokens
        let predecessor_account_id = env::predecessor_account_id();
        assert_eq!(&predecessor_account_id, &token.owner_id);

        //only revoke if the approved account IDs for the token is not empty
        if !token.approved_account_ids.is_empty() {
            //refund the approved account IDs to the caller of the function
            refund_approved_account_ids(predecessor_account_id, &token.approved_account_ids);
            //clear the approved account IDs
            token.approved_account_ids.clear();
            //insert the token back into the tokens_by_id collection with the approved account IDs cleared
            self.tokens_by_id.insert(&token_id, &token);
        }
    }
}
'''
'''--- nft-zoo-contract/nft-contract/src/enumeration.rs ---
use crate::*;

#[near_bindgen]
impl Contract {
    //Query for the total supply of NFTs on the contract
    pub fn nft_total_supply(&self) -> U128 {
        //return the length of the token metadata by ID
        U128(self.token_metadata_by_id.len() as u128)
    }

    //Query for nft tokens on the contract regardless of the owner using pagination
    pub fn nft_tokens(&self, from_index: Option<U128>, limit: Option<u64>) -> Vec<JsonToken> {
        //where to start pagination - if we have a from_index, we'll use that - otherwise start from 0 index
        let start = u128::from(from_index.unwrap_or(U128(0)));

        //iterate through each token using an iterator
        self.token_metadata_by_id.keys()
            //skip to the index we specified in the start variable
            .skip(start as usize) 
            //take the first "limit" elements in the vector. If we didn't specify a limit, use 50
            .take(limit.unwrap_or(50) as usize) 
            //we'll map the token IDs which are strings into Json Tokens
            .map(|token_id| self.nft_token(token_id.clone()).unwrap())
            //since we turned the keys into an iterator, we need to turn it back into a vector to return
            .collect()
    }

    //get the total supply of NFTs for a given owner
    pub fn nft_supply_for_owner(
        &self,
        account_id: AccountId,
    ) -> U128 {
        //get the set of tokens for the passed in owner
        let tokens_for_owner_set = self.tokens_per_owner.get(&account_id);

        //if there is some set of tokens, we'll return the length as a U128
        if let Some(tokens_for_owner_set) = tokens_for_owner_set {
            U128(tokens_for_owner_set.len() as u128)
        } else {
            //if there isn't a set of tokens for the passed in account ID, we'll return 0
            U128(0)
        }
    }

    //Query for all the tokens for an owner
    pub fn nft_tokens_for_owner(
        &self,
        account_id: AccountId,
        from_index: Option<U128>,
        limit: Option<u64>,
    ) -> Vec<JsonToken> {
        //get the set of tokens for the passed in owner
        let tokens_for_owner_set = self.tokens_per_owner.get(&account_id);
        //if there is some set of tokens, we'll set the tokens variable equal to that set
        let tokens = if let Some(tokens_for_owner_set) = tokens_for_owner_set {
            tokens_for_owner_set
        } else {
            //if there is no set of tokens, we'll simply return an empty vector. 
            return vec![];
        };

        //where to start pagination - if we have a from_index, we'll use that - otherwise start from 0 index
        let start = u128::from(from_index.unwrap_or(U128(0)));

        //iterate through the keys vector
        tokens.iter()
            //skip to the index we specified in the start variable
            .skip(start as usize) 
            //take the first "limit" elements in the vector. If we didn't specify a limit, use 50
            .take(limit.unwrap_or(50) as usize) 
            //we'll map the token IDs which are strings into Json Tokens
            .map(|token_id| self.nft_token(token_id.clone()).unwrap())
            //since we turned the keys into an iterator, we need to turn it back into a vector to return
            .collect()
    }
}

'''
'''--- nft-zoo-contract/nft-contract/src/events.rs ---
use std::fmt;

use near_sdk::serde::{Deserialize, Serialize};

/// Enum that represents the data type of the EventLog.
/// The enum can either be an NftMint or an NftTransfer.
#[derive(Serialize, Deserialize, Debug)]
#[serde(tag = "event", content = "data")]
#[serde(rename_all = "snake_case")]
#[serde(crate = "near_sdk::serde")]
#[non_exhaustive]
pub enum EventLogVariant {
    NftMint(Vec<NftMintLog>),
    NftTransfer(Vec<NftTransferLog>),
}

/// Interface to capture data about an event
///
/// Arguments:
/// * `standard`: name of standard e.g. nep171
/// * `version`: e.g. 1.0.0
/// * `event`: associate event data
#[derive(Serialize, Deserialize, Debug)]
#[serde(crate = "near_sdk::serde")]
pub struct EventLog {
    pub standard: String,
    pub version: String,

    // `flatten` to not have "event": {<EventLogVariant>} in the JSON, just have the contents of {<EventLogVariant>}.
    #[serde(flatten)]
    pub event: EventLogVariant,
}

impl fmt::Display for EventLog {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        f.write_fmt(format_args!(
            "EVENT_JSON:{}",
            &serde_json::to_string(self).map_err(|_| fmt::Error)?
        ))
    }
}

/// An event log to capture token minting
///
/// Arguments
/// * `owner_id`: "account.near"
/// * `token_ids`: ["1", "abc"]
/// * `memo`: optional message
#[derive(Serialize, Deserialize, Debug)]
#[serde(crate = "near_sdk::serde")]
pub struct NftMintLog {
    pub owner_id: String,
    pub token_ids: Vec<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub memo: Option<String>,
}

/// An event log to capture token transfer
///
/// Arguments
/// * `authorized_id`: approved account to transfer
/// * `old_owner_id`: "owner.near"
/// * `new_owner_id`: "receiver.near"
/// * `token_ids`: ["1", "12345abc"]
/// * `memo`: optional message
#[derive(Serialize, Deserialize, Debug)]
#[serde(crate = "near_sdk::serde")]
pub struct NftTransferLog {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub authorized_id: Option<String>,

    pub old_owner_id: String,
    pub new_owner_id: String,
    pub token_ids: Vec<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub memo: Option<String>,
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn nep_format_vector() {
        let expected = r#"EVENT_JSON:{"standard":"nep171","version":"1.0.0","event":"nft_mint","data":[{"owner_id":"foundation.near","token_ids":["aurora","proximitylabs"]},{"owner_id":"user1.near","token_ids":["meme"]}]}"#;
        let log = EventLog {
            standard: "nep171".to_string(),
            version: "1.0.0".to_string(),
            event: EventLogVariant::NftMint(vec![
                NftMintLog {
                    owner_id: "foundation.near".to_owned(),
                    token_ids: vec!["aurora".to_string(), "proximitylabs".to_string()],
                    memo: None,
                },
                NftMintLog {
                    owner_id: "user1.near".to_owned(),
                    token_ids: vec!["meme".to_string()],
                    memo: None,
                },
            ]),
        };
        assert_eq!(expected, log.to_string());
    }

    #[test]
    fn nep_format_mint() {
        let expected = r#"EVENT_JSON:{"standard":"nep171","version":"1.0.0","event":"nft_mint","data":[{"owner_id":"foundation.near","token_ids":["aurora","proximitylabs"]}]}"#;
        let log = EventLog {
            standard: "nep171".to_string(),
            version: "1.0.0".to_string(),
            event: EventLogVariant::NftMint(vec![NftMintLog {
                owner_id: "foundation.near".to_owned(),
                token_ids: vec!["aurora".to_string(), "proximitylabs".to_string()],
                memo: None,
            }]),
        };
        assert_eq!(expected, log.to_string());
    }

    #[test]
    fn nep_format_transfer_all_fields() {
        let expected = r#"EVENT_JSON:{"standard":"nep171","version":"1.0.0","event":"nft_transfer","data":[{"authorized_id":"market.near","old_owner_id":"user1.near","new_owner_id":"user2.near","token_ids":["token"],"memo":"Go Team!"}]}"#;
        let log = EventLog {
            standard: "nep171".to_string(),
            version: "1.0.0".to_string(),
            event: EventLogVariant::NftTransfer(vec![NftTransferLog {
                authorized_id: Some("market.near".to_string()),
                old_owner_id: "user1.near".to_string(),
                new_owner_id: "user2.near".to_string(),
                token_ids: vec!["token".to_string()],
                memo: Some("Go Team!".to_owned()),
            }]),
        };
        assert_eq!(expected, log.to_string());
    }
} 
'''
'''--- nft-zoo-contract/nft-contract/src/game.rs ---
use crate::*;

#[near_bindgen]
impl Contract {
    #[payable]
    pub fn feed_lion(&mut self) -> CardAttr {
        let token_id: TokenId = self.get_token_id(&ZooAnimal::Lion);

        let card_attr = self.card_attr.get(&token_id).unwrap();
        assert!(
            card_attr.food != 0,
            "You have no enough food"
        );
        let new_card_attributes = CardAttr {
            animal_type: card_attr.animal_type,
            experience: card_attr.experience + 10,
            food: card_attr.food - 1,
        };

        self.card_attr.insert(&token_id, &new_card_attributes);
        return new_card_attributes
    }

    pub fn check_token(&self, token_type: &ZooAnimal) -> bool {
        let account_id = env::signer_account_id();
        let token_id: TokenId = self.get_token_id(&token_type);

        return match self.tokens_per_owner.get(&account_id) {
            Some(tokens_per_owner) => tokens_per_owner.contains(&token_id),
            None => false
        }
    }

    // pub fn get_lion_token_id(&self) -> TokenId {
    //     let account_id = env::signer_account_id();
    //     return [&account_id.to_string(), "-lion-animal"].concat();
    // }

    pub fn get_attributes(&self) -> Option<CardAttr> {
        let have_token = self.check_token(&ZooAnimal::Lion);
        let token_id: TokenId = self.get_token_id(&ZooAnimal::Lion);

        assert!(
            have_token,
            "You are not owner of this token"
        );

        return self.card_attr.get(&token_id);
    }

    #[payable]
    pub fn buy_food(
        &mut self
    ) {
        let token_id: TokenId = self.get_token_id(&ZooAnimal::Lion);
        let food_deposit = env::attached_deposit();
        let have_token = self.check_token(&ZooAnimal::Lion);

        assert!(
            have_token,
            "You are not owner of this token"
        );

        let food_count = food_deposit / 1000000000000000000000000;
        let card_attributes = self.card_attr.get(&token_id).unwrap();
        let new_card_attributes = CardAttr {
            animal_type: card_attributes.animal_type,
            experience: card_attributes.experience,
            food: card_attributes.food + food_count,
        };

        self.card_attr.insert(&token_id, &new_card_attributes);
    }
}

// near call $NFT_CONTRACT_ID buy_food '{"deposit": "50"}' --accountId $NFT_CONTRACT_ID
'''
'''--- nft-zoo-contract/nft-contract/src/internal.rs ---
use crate::*;
use near_sdk::{CryptoHash};
use std::mem::size_of;

//convert the royalty percentage and amount to pay into a payout (U128)
pub(crate) fn royalty_to_payout(royalty_percentage: u32, amount_to_pay: Balance) -> U128 {
    U128(royalty_percentage as u128 * amount_to_pay / 10_000u128)
}

//calculate how many bytes the account ID is taking up
pub(crate) fn bytes_for_approved_account_id(account_id: &AccountId) -> u64 {
    // The extra 4 bytes are coming from Borsh serialization to store the length of the string.
    account_id.as_str().len() as u64 + 4 + size_of::<u64>() as u64
}

//refund the storage taken up by passed in approved account IDs and send the funds to the passed in account ID. 
pub(crate) fn refund_approved_account_ids_iter<'a, I>(
    account_id: AccountId,
    approved_account_ids: I, //the approved account IDs must be passed in as an iterator
) -> Promise
where
    I: Iterator<Item = &'a AccountId>,
{
    //get the storage total by going through and summing all the bytes for each approved account IDs
    let storage_released: u64 = approved_account_ids.map(bytes_for_approved_account_id).sum();
    //transfer the account the storage that is released
    Promise::new(account_id).transfer(Balance::from(storage_released) * env::storage_byte_cost())
}

//refund a map of approved account IDs and send the funds to the passed in account ID
pub(crate) fn refund_approved_account_ids(
    account_id: AccountId,
    approved_account_ids: &HashMap<AccountId, u64>,
) -> Promise {
    //call the refund_approved_account_ids_iter with the approved account IDs as keys
    refund_approved_account_ids_iter(account_id, approved_account_ids.keys())
}

//used to generate a unique prefix in our storage collections (this is to avoid data collisions)
pub(crate) fn hash_account_id(account_id: &AccountId) -> CryptoHash {
    //get the default hash
    let mut hash = CryptoHash::default();
    //we hash the account ID and return it
    hash.copy_from_slice(&env::sha256(account_id.as_bytes()));
    hash
}

//used to make sure the user attached exactly 1 yoctoNEAR
pub(crate) fn assert_one_yocto() {
    assert_eq!(
        env::attached_deposit(),
        1,
        "Requires attached deposit of exactly 1 yoctoNEAR",
    )
}

//Assert that the user has attached at least 1 yoctoNEAR (for security reasons and to pay for storage)
pub(crate) fn assert_at_least_one_yocto() {
    assert!(
        env::attached_deposit() >= 1,
        "Requires attached deposit of at least 1 yoctoNEAR",
    )
}

//refund the initial deposit based on the amount of storage that was used up
pub(crate) fn refund_deposit(storage_used: u64) {
    //get how much it would cost to store the information
    let required_cost = env::storage_byte_cost() * Balance::from(storage_used);
    //get the attached deposit
    let attached_deposit = env::attached_deposit();

    //make sure that the attached deposit is greater than or equal to the required cost
    assert!(
        required_cost <= attached_deposit,
        "Must attach {} yoctoNEAR to cover storage",
        required_cost,
    );

    //get the refund amount from the attached deposit - required cost
    let refund = attached_deposit - required_cost;

    //if the refund is greater than 1 yocto NEAR, we refund the predecessor that amount
    if refund > 1 {
        Promise::new(env::predecessor_account_id()).transfer(refund);
    }
}

impl Contract {
    //add a token to the set of tokens an owner has
    pub(crate) fn internal_add_token_to_owner(
        &mut self,
        account_id: &AccountId,
        token_id: &TokenId,
    ) {
        //get the set of tokens for the given account
        let mut tokens_set = self.tokens_per_owner.get(account_id).unwrap_or_else(|| {
            //if the account doesn't have any tokens, we create a new unordered set
            UnorderedSet::new(
                StorageKey::TokenPerOwnerInner {
                    //we get a new unique prefix for the collection
                    account_id_hash: hash_account_id(&account_id),
                }
                .try_to_vec()
                .unwrap(),
            )
        });

        //we insert the token ID into the set
        tokens_set.insert(token_id);

        //we insert that set for the given account ID. 
        self.tokens_per_owner.insert(account_id, &tokens_set);
    }

    //remove a token from an owner (internal method and can't be called directly via CLI).
    pub(crate) fn internal_remove_token_from_owner(
        &mut self,
        account_id: &AccountId,
        token_id: &TokenId,
    ) {
        //we get the set of tokens that the owner has
        let mut tokens_set = self
            .tokens_per_owner
            .get(account_id)
            //if there is no set of tokens for the owner, we panic with the following message:
            .expect("Token should be owned by the sender");

        //we remove the the token_id from the set of tokens
        tokens_set.remove(token_id);

        //if the token set is now empty, we remove the owner from the tokens_per_owner collection
        if tokens_set.is_empty() {
            self.tokens_per_owner.remove(account_id);
        } else {
        //if the token set is not empty, we simply insert it back for the account ID. 
            self.tokens_per_owner.insert(account_id, &tokens_set);
        }
    }

    //transfers the NFT to the receiver_id (internal method and can't be called directly via CLI).
    pub(crate) fn internal_transfer(
        &mut self,
        sender_id: &AccountId,
        receiver_id: &AccountId,
        token_id: &TokenId,
        //we introduce an approval ID so that people with that approval ID can transfer the token
        approval_id: Option<u64>,
        memo: Option<String>,
    ) -> Token {
        //get the token object by passing in the token_id
        let token = self.tokens_by_id.get(token_id).expect("No token");

        //if the sender doesn't equal the owner, we check if the sender is in the approval list
		if sender_id != &token.owner_id {
			//if the token's approved account IDs doesn't contain the sender, we panic
			if !token.approved_account_ids.contains_key(sender_id) {
				env::panic_str("Unauthorized");
			}

			// If they included an approval_id, check if the sender's actual approval_id is the same as the one included
			if let Some(enforced_approval_id) = approval_id {
                //get the actual approval ID
				let actual_approval_id = token
					.approved_account_ids
					.get(sender_id)
                    //if the sender isn't in the map, we panic
					.expect("Sender is not approved account");

                //make sure that the actual approval ID is the same as the one provided
                assert_eq!(
					actual_approval_id, &enforced_approval_id,
					"The actual approval_id {} is different from the given approval_id {}",
					actual_approval_id, enforced_approval_id,
				);
			}
		}

        //we make sure that the sender isn't sending the token to themselves
        assert_ne!(
            &token.owner_id, receiver_id,
            "The token owner and the receiver should be different"
        );

        //we remove the token from it's current owner's set
        self.internal_remove_token_from_owner(&token.owner_id, token_id);
        //we then add the token to the receiver_id's set
        self.internal_add_token_to_owner(receiver_id, token_id);

        //we create a new token struct 
        let new_token = Token {
            owner_id: receiver_id.clone(),
            //reset the approval account IDs
            approved_account_ids: Default::default(),
            next_approval_id: token.next_approval_id,
            //we copy over the royalties from the previous token
            royalty: token.royalty.clone(),
        };
        //insert that new token into the tokens_by_id, replacing the old entry 
        self.tokens_by_id.insert(token_id, &new_token);

        //if there was some memo attached, we log it. 
        if let Some(memo) = memo.as_ref() {
            env::log_str(&format!("Memo: {}", memo).to_string());
        }

        // Default the authorized ID to be None for the logs.
        let mut authorized_id = None;
        //if the approval ID was provided, set the authorized ID equal to the sender
        if approval_id.is_some() {
            authorized_id = Some(sender_id.to_string());
        }

        // Construct the transfer log as per the events standard.
        let nft_transfer_log: EventLog = EventLog {
            // Standard name ("nep171").
            standard: NFT_STANDARD_NAME.to_string(),
            // Version of the standard ("nft-1.0.0").
            version: NFT_METADATA_SPEC.to_string(),
            // The data related with the event stored in a vector.
            event: EventLogVariant::NftTransfer(vec![NftTransferLog {
                // The optional authorized account ID to transfer the token on behalf of the old owner.
                authorized_id,
                // The old owner's account ID.
                old_owner_id: token.owner_id.to_string(),
                // The account ID of the new owner of the token.
                new_owner_id: receiver_id.to_string(),
                // A vector containing the token IDs as strings.
                token_ids: vec![token_id.to_string()],
                // An optional memo to include.
                memo,
            }]),
        };

        // Log the serialized json.
        env::log_str(&nft_transfer_log.to_string());
        
        //return the preivous token object that was transferred.
        token
    }
} 
'''
'''--- nft-zoo-contract/nft-contract/src/lib.rs ---
use std::collections::HashMap;
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::collections::{LazyOption, LookupMap, UnorderedMap, UnorderedSet};
use near_sdk::json_types::{Base64VecU8, U128};
use near_sdk::serde::{Deserialize, Serialize};
use near_sdk::{
    env, near_bindgen, AccountId, Balance, CryptoHash, PanicOnDefault, Promise, PromiseOrValue,
};

use crate::internal::*;
pub use crate::metadata::*;
pub use crate::mint::*;
pub use crate::nft_core::*;
pub use crate::approval::*;
pub use crate::royalty::*;
pub use crate::events::*;
pub use crate::game::*;

mod internal;
mod approval;
mod enumeration;
mod metadata;
mod mint;
mod nft_core;
mod royalty;
mod events;
mod game;

/// This spec can be treated like a version of the standard.
pub const NFT_METADATA_SPEC: &str = "nft-1.0.0";
/// This is the name of the NFT standard we're using
pub const NFT_STANDARD_NAME: &str = "nep171";

#[derive(BorshDeserialize, BorshSerialize, Serialize, Deserialize, Clone)]
#[serde(crate = "near_sdk::serde")]
pub enum ZooAnimal {
    Lion,
    LionGold,
}

#[derive(BorshDeserialize, BorshSerialize, Serialize, Deserialize, Clone)]
#[serde(crate = "near_sdk::serde")]
pub struct NewTokenData {
    pub token_id: TokenId,
    pub animal_type: ZooAnimal,
    pub media: String,
    pub title: String,
    pub description: String,
    pub copies: u64
}

#[derive(BorshDeserialize, BorshSerialize, Serialize, Deserialize, Clone)]
#[serde(crate = "near_sdk::serde")]
pub struct CardAttr {
    pub animal_type: ZooAnimal,
    pub experience: u16,
    pub food: u128,
}

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize, PanicOnDefault)]
pub struct Contract {
    //contract owner
    pub owner_id: AccountId,

    //keeps track of all the token IDs for a given account
    pub tokens_per_owner: LookupMap<AccountId, UnorderedSet<TokenId>>,

    //keeps track of the token struct for a given token ID
    pub tokens_by_id: LookupMap<TokenId, Token>,

    //keeps track of the token struct for a given token ID
    pub card_attr: LookupMap<TokenId, CardAttr>,

    //keeps track of the token metadata for a given token ID
    pub token_metadata_by_id: UnorderedMap<TokenId, TokenMetadata>,

    //keeps track of the metadata for the contract
    pub metadata: LazyOption<NFTContractMetadata>,
}

/// Helper structure for keys of the persistent collections.
#[derive(BorshSerialize)]
pub enum StorageKey {
    TokensPerOwner,
    TokenPerOwnerInner { account_id_hash: CryptoHash },
    TokensById,
    TokenMetadataById,
    CardAttr,
    NFTContractMetadata,
    TokensPerType,
    TokensPerTypeInner { token_type_hash: CryptoHash },
    TokenTypesLocked,
}

#[near_bindgen]
impl Contract {
    /*
        initialization function (can only be called once).
        this initializes the contract with default metadata so the
        user doesn't have to manually type metadata.
    */
    #[init]
    pub fn new_default_meta(owner_id: AccountId) -> Self {
        //calls the other function "new: with some default metadata and the owner_id passed in
        Self::new(
            owner_id,
            NFTContractMetadata {
                spec: "nftzoo-0.0.1".to_string(),
                name: "NFT Support Ukraine Zoos contract".to_string(),
                symbol: "KISKESIS".to_string(),
                icon: None,
                base_uri: None,
                reference: None,
                reference_hash: None,
            }
        )
    }

    // near call $NFT_CONTRACT_ID new '{"owner_id": "'$NFT_CONTRACT_ID'", "meatadata": { "title": "ZOO LION NFT", "description": "Lion character to support Ukrainian zoos", "media": "https://ipfs.io/ipfs/bafkreihdfouh6pulmzmx4nlb653q5vmkwgbqegzf37vavf6lyubdtavyom" } }' --accountId $NFT_CONTRACT_ID

/*
    initialization function (can only be called once).
    this initializes the contract with metadata that was passed in and
    the owner_id.
*/
    #[init]
    pub fn new(owner_id: AccountId, metadata: NFTContractMetadata) -> Self {
        //create a variable of type Self with all the fields initialized.
        let this = Self {
            //Storage keys are simply the prefixes used for the collections. This helps avoid data collision
            tokens_per_owner: LookupMap::new(StorageKey::TokensPerOwner.try_to_vec().unwrap()),
            tokens_by_id: LookupMap::new(StorageKey::TokensById.try_to_vec().unwrap()),
            token_metadata_by_id: UnorderedMap::new(
                StorageKey::TokenMetadataById.try_to_vec().unwrap(),
            ),
            card_attr: LookupMap::new(StorageKey::CardAttr.try_to_vec().unwrap()),
            //set the owner_id field equal to the passed in owner_id.
            owner_id,
            metadata: LazyOption::new(
                StorageKey::NFTContractMetadata.try_to_vec().unwrap(),
                Some(&metadata),
            ),
        };

        //return the Contract object
        this
    }
}
'''
'''--- nft-zoo-contract/nft-contract/src/metadata.rs ---
use crate::*;
pub type TokenId = String;
//defines the payout type we'll be returning as a part of the royalty standards.
#[derive(Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct Payout {
    pub payout: HashMap<AccountId, U128>,
} 

#[derive(BorshDeserialize, BorshSerialize, Serialize, Deserialize, Clone)]
#[serde(crate = "near_sdk::serde")]
pub struct NFTContractMetadata {
    pub spec: String,              // required, essentially a version like "nft-1.0.0"
    pub name: String,              // required, ex. "Mosaics"
    pub symbol: String,            // required, ex. "MOSIAC"
    pub icon: Option<String>,      // Data URL
    pub base_uri: Option<String>, // Centralized gateway known to have reliable access to decentralized storage assets referenced by `reference` or `media` URLs
    pub reference: Option<String>, // URL to a JSON file with more info
    pub reference_hash: Option<Base64VecU8>, // Base64-encoded sha256 hash of JSON from reference field. Required if `reference` is included.
}

#[derive(BorshDeserialize, BorshSerialize, Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct TokenMetadata {
    pub title: Option<String>, // ex. "Arch Nemesis: Mail Carrier" or "Parcel #5055"
    pub description: Option<String>, // free-form description
    pub media: Option<String>, // URL to associated media, preferably to decentralized, content-addressed storage
    pub media_hash: Option<Base64VecU8>, // Base64-encoded sha256 hash of content referenced by the `media` field. Required if `media` is included.
    pub copies: Option<u64>, // number of copies of this set of metadata in existence when token was minted.
    pub issued_at: Option<u64>, // When token was issued or minted, Unix epoch in milliseconds
    pub expires_at: Option<u64>, // When token expires, Unix epoch in milliseconds
    pub starts_at: Option<u64>, // When token starts being valid, Unix epoch in milliseconds
    pub updated_at: Option<u64>, // When token was last updated, Unix epoch in milliseconds
    pub extra: Option<String>, // anything extra the NFT wants to store on-chain. Can be stringified JSON.
    pub reference: Option<String>, // URL to an off-chain JSON file with more info.
    pub reference_hash: Option<Base64VecU8>, // Base64-encoded sha256 hash of JSON from reference field. Required if `reference` is included.
}

#[derive(BorshDeserialize, BorshSerialize)]
pub struct Token {
    //owner of the token
    pub owner_id: AccountId,
    //list of approved account IDs that have access to transfer the token. This maps an account ID to an approval ID
    pub approved_account_ids: HashMap<AccountId, u64>,
    //the next approval ID to give out. 
    pub next_approval_id: u64,
    //keep track of the royalty percentages for the token in a hash map
    pub royalty: HashMap<AccountId, u32>,
}

//The Json token is what will be returned from view calls. 
#[derive(Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct JsonToken {
    //token ID
    pub token_id: TokenId,
    //owner of the token
    pub owner_id: AccountId,
    //token metadata
    pub metadata: TokenMetadata,
    //list of approved account IDs that have access to transfer the token. This maps an account ID to an approval ID
    pub approved_account_ids: HashMap<AccountId, u64>,
    //keep track of the royalty percentages for the token in a hash map
    pub royalty: HashMap<AccountId, u32>,
}

pub trait NonFungibleTokenMetadata {
    //view call for returning the contract metadata
    fn nft_metadata(&self) -> NFTContractMetadata;
}

#[near_bindgen]
impl NonFungibleTokenMetadata for Contract {
    fn nft_metadata(&self) -> NFTContractMetadata {
        self.metadata.get().unwrap()
    }
}
'''
'''--- nft-zoo-contract/nft-contract/src/mint.rs ---
use crate::*;

#[near_bindgen]
impl Contract {
    #[private]
    pub fn get_token_id(
        &self,
        token_type: &ZooAnimal
    ) -> TokenId {
        let account_id = env::signer_account_id();
        match token_type {
            ZooAnimal::Lion => [&account_id.to_string(), "-lion-animal"].concat(),
            ZooAnimal::LionGold => [&account_id.to_string(), "-lion-animal-gold"].concat()
        }
    }

    #[private]
    pub fn is_token_owner(
        &mut self,
        token_id: &TokenId
    ) {
        let token_exist = self.tokens_by_id.contains_key(&token_id);

        assert!(
            !token_exist,
            "Token already exists"
        );
    }

    #[private]
    pub fn is_able_to_mint(
        &self,
        token_type: &ZooAnimal,
    ) {
        match token_type {
            ZooAnimal::Lion => true,
            ZooAnimal::LionGold => {
                let token_id: TokenId = self.get_token_id(&ZooAnimal::Lion);

                let card_attributes = self.card_attr.get(&token_id).unwrap();

                assert!(
                    card_attributes.experience >= 50,
                    "You can't mint that token"
                );

                true
            },
        };
    }

    #[private]
    pub fn get_token_data(
        &mut self,
        token_type: &ZooAnimal
    ) -> NewTokenData {
        let token_id: TokenId = self.get_token_id(&token_type);

        self.is_token_owner(&token_id);
        self.is_able_to_mint(token_type);

        return match token_type {
            ZooAnimal::Lion => NewTokenData {
                token_id,
                animal_type: ZooAnimal::Lion,
                media: "https://ipfs.io/ipfs/bafkreihdfouh6pulmzmx4nlb653q5vmkwgbqegzf37vavf6lyubdtavyom".to_string(),
                title: "Lion Character".to_string(),
                description: "Lion character".to_string(),
                copies: 100
            },
            ZooAnimal::LionGold => NewTokenData {
                token_id,
                animal_type: ZooAnimal::LionGold,
                media: "https://ipfs.io/ipfs/bafkreiebcaejfxzbufngzqzo5ox2e7i2lsxpbzrnc65hggzpkdeozyjhxi".to_string(),
                title: "Gold Lion Character".to_string(),
                description: "Gold lion character".to_string(),
                copies: 100
            }
        }
    }

    #[payable]
    pub fn nft_mint(
        &mut self,
        token_type: ZooAnimal,
        perpetual_royalties: Option<HashMap<AccountId, u32>>,
    ) {
        let account_id = env::signer_account_id();

        let token_data = self.get_token_data(&token_type);

        //measure the initial storage being used on the contract
        let initial_storage_usage = env::storage_usage();

        // create a royalty map to store in the token
        let mut royalty = HashMap::new();

        // if perpetual royalties were passed into the function:
        if let Some(perpetual_royalties) = perpetual_royalties {
            //make sure that the length of the perpetual royalties is below 7 since we won't have enough GAS to pay out that many people
            assert!(perpetual_royalties.len() < 7, "Cannot add more than 6 perpetual royalty amounts");

            //iterate through the perpetual royalties and insert the account and amount in the royalty map
            for (account, amount) in perpetual_royalties {
                royalty.insert(account, amount);
            }
        }

        //specify the token struct that contains the owner ID
        let token = Token {
            //set the owner ID equal to the receiver ID passed into the function
            owner_id: account_id,
            //we set the approved account IDs to the default value (an empty map)
            approved_account_ids: Default::default(),
            //the next approval ID is set to 0
            next_approval_id: 0,
            //the map of perpetual royalties for the token (The owner will get 100% - total perpetual royalties)
            royalty,
        };

        //insert the token ID and token struct
        self.tokens_by_id.insert(&token_data.token_id, &token);

        let card_attr = CardAttr {
            animal_type: token_data.animal_type,
            experience: 0,
            food: 0,
        };

        //insert the token ID and token struct and make sure that the token doesn't exist
        assert!(
            self.card_attr.insert(&token_data.token_id, &card_attr).is_none(),
            "Token already exists for card attribute"
        );

        let metadata = TokenMetadata {
            title: Some(token_data.title),
            description: Some(token_data.description),
            media: Some(token_data.media),
            copies: Some(token_data.copies),
            expires_at: None,
            extra: None,
            issued_at: None,
            media_hash: None,
            reference: None,
            reference_hash: None,
            updated_at: None,
            starts_at: None,
        };

        //insert the token ID and metadata
        self.token_metadata_by_id.insert(&token_data.token_id, &metadata);

        //call the internal method for adding the token to the owner
        self.internal_add_token_to_owner(&token.owner_id, &token_data.token_id);

        // Construct the mint log as per the events standard.
        let nft_mint_log: EventLog = EventLog {
            // Standard name ("nep171").
            standard: NFT_STANDARD_NAME.to_string(),
            // Version of the standard ("nft-1.0.0").
            version: NFT_METADATA_SPEC.to_string(),
            // The data related with the event stored in a vector.
            event: EventLogVariant::NftMint(vec![NftMintLog {
                // Owner of the token.
                owner_id: token.owner_id.to_string(),
                // Vector of token IDs that were minted.
                token_ids: vec![token_data.token_id.to_string()],
                // An optional memo to include.
                memo: None,
            }]),
        };

        // Log the serialized json.
        env::log_str(&nft_mint_log.to_string());

        //calculate the required storage which was the used - initial
        let required_storage_in_bytes = env::storage_usage() - initial_storage_usage;

        //refund any excess storage if the user attached too much. Panic if they didn't attach enough to cover the required.
        refund_deposit(required_storage_in_bytes);
    }
}
'''
'''--- nft-zoo-contract/nft-contract/src/nft_core.rs ---
use crate::*;
use near_sdk::{ext_contract, Gas, PromiseResult};

const GAS_FOR_RESOLVE_TRANSFER: Gas = Gas(10_000_000_000_000);
const GAS_FOR_NFT_TRANSFER_CALL: Gas = Gas(25_000_000_000_000 + GAS_FOR_RESOLVE_TRANSFER.0);
const MIN_GAS_FOR_NFT_TRANSFER_CALL: Gas = Gas(100_000_000_000_000);
const NO_DEPOSIT: Balance = 0;

pub trait NonFungibleTokenCore {
    //transfers an NFT to a receiver ID
    fn nft_transfer(
        &mut self,
        receiver_id: AccountId,
        token_id: TokenId,
        //we introduce an approval ID so that people with that approval ID can transfer the token
        approval_id: Option<u64>,
        memo: Option<String>,
    );

    //transfers an NFT to a receiver and calls a function on the receiver ID's contract
    /// Returns `true` if the token was transferred from the sender's account.
    fn nft_transfer_call(
        &mut self,
        receiver_id: AccountId,
        token_id: TokenId,
        //we introduce an approval ID so that people with that approval ID can transfer the token
        approval_id: Option<u64>,
        memo: Option<String>,
        msg: String,
    ) -> PromiseOrValue<bool>;

    //get information about the NFT token passed in
    fn nft_token(&self, token_id: TokenId) -> Option<JsonToken>;
}

#[ext_contract(ext_non_fungible_token_receiver)]
trait NonFungibleTokenReceiver {
    //Method stored on the receiver contract that is called via cross contract call when nft_transfer_call is called
    /// Returns `true` if the token should be returned back to the sender.
    fn nft_on_transfer(
        &mut self,
        sender_id: AccountId,
        previous_owner_id: AccountId,
        token_id: TokenId,
        msg: String,
    ) -> Promise;
}

#[ext_contract(ext_self)]
trait NonFungibleTokenResolver {
    /*
        resolves the promise of the cross contract call to the receiver contract
        this is stored on THIS contract and is meant to analyze what happened in the cross contract call when nft_on_transfer was called
        as part of the nft_transfer_call method
    */
    fn nft_resolve_transfer(
        &mut self,
        //we introduce an authorized ID for logging the transfer event
        authorized_id: Option<String>,
        owner_id: AccountId,
        receiver_id: AccountId,
        token_id: TokenId,
        //we introduce the approval map so we can keep track of what the approvals were before the transfer
        approved_account_ids: HashMap<AccountId, u64>,
        //we introduce a memo for logging the transfer event
        memo: Option<String>,
    ) -> bool;
}

/*
    resolves the promise of the cross contract call to the receiver contract
    this is stored on THIS contract and is meant to analyze what happened in the cross contract call when nft_on_transfer was called
    as part of the nft_transfer_call method
*/ 
trait NonFungibleTokenResolver {
    fn nft_resolve_transfer(
        &mut self,
        //we introduce an authorized ID for logging the transfer event
        authorized_id: Option<String>,
        owner_id: AccountId,
        receiver_id: AccountId,
        token_id: TokenId,
        //we introduce the approval map so we can keep track of what the approvals were before the transfer
        approved_account_ids: HashMap<AccountId, u64>,
        //we introduce a memo for logging the transfer event
        memo: Option<String>,
    ) -> bool;
}

#[near_bindgen]
impl NonFungibleTokenCore for Contract {

    //implementation of the nft_transfer method. This transfers the NFT from the current owner to the receiver. 
    #[payable]
    fn nft_transfer(
        &mut self,
        receiver_id: AccountId,
        token_id: TokenId,
        //we introduce an approval ID so that people with that approval ID can transfer the token
        approval_id: Option<u64>,
        memo: Option<String>,
    ) {
        //assert that the user attached exactly 1 yoctoNEAR. This is for security and so that the user will be redirected to the NEAR wallet. 
        assert_one_yocto();
        //get the sender to transfer the token from the sender to the receiver
        let sender_id = env::predecessor_account_id();

        //call the internal transfer method and get back the previous token so we can refund the approved account IDs
        let previous_token = self.internal_transfer(
            &sender_id,
            &receiver_id,
            &token_id,
            approval_id,
            memo,
        );

        //we refund the owner for releasing the storage used up by the approved account IDs
        refund_approved_account_ids(
            previous_token.owner_id.clone(),
            &previous_token.approved_account_ids,
        );
    }

    //implementation of the transfer call method. This will transfer the NFT and call a method on the reciver_id contract
    #[payable]
    fn nft_transfer_call(
        &mut self,
        receiver_id: AccountId,
        token_id: TokenId,
        //we introduce an approval ID so that people with that approval ID can transfer the token
        approval_id: Option<u64>,
        memo: Option<String>,
        msg: String,
    ) -> PromiseOrValue<bool> {
        //assert that the user attached exactly 1 yocto for security reasons. 
        assert_one_yocto();

        //get the GAS attached to the call
        let attached_gas = env::prepaid_gas();

        /*
            make sure that the attached gas is greater than the minimum GAS for NFT transfer call.
            This is to ensure that the cross contract call to nft_on_transfer won't cause a prepaid GAS error.
            If this happens, the event will be logged in internal_transfer but the actual transfer logic will be
            reverted due to the panic. This will result in the databases thinking the NFT belongs to the wrong person.
        */
        assert!(
            attached_gas >= MIN_GAS_FOR_NFT_TRANSFER_CALL,
            "You cannot attach less than {:?} Gas to nft_transfer_call",
            MIN_GAS_FOR_NFT_TRANSFER_CALL
        );

        //get the sender ID 
        let sender_id = env::predecessor_account_id();

        //transfer the token and get the previous token object
        let previous_token = self.internal_transfer(
            &sender_id,
            &receiver_id,
            &token_id,
            approval_id,
            memo.clone(),
        );

        //default the authorized_id to none
        let mut authorized_id = None; 
        //if the sender isn't the owner of the token, we set the authorized ID equal to the sender.
        if sender_id != previous_token.owner_id {
            authorized_id = Some(sender_id.to_string());
        }

        // Initiating receiver's call and the callback
        ext_non_fungible_token_receiver::nft_on_transfer(
            sender_id,
            previous_token.owner_id.clone(),
            token_id.clone(),
            msg,
            receiver_id.clone(), //contract account to make the call to
            NO_DEPOSIT, //attached deposit
            env::prepaid_gas() - GAS_FOR_NFT_TRANSFER_CALL, //attached GAS
        )
        //we then resolve the promise and call nft_resolve_transfer on our own contract
        .then(ext_self::nft_resolve_transfer(
            authorized_id, // we introduce an authorized ID so that we can log the transfer
            previous_token.owner_id,
            receiver_id,
            token_id,
            previous_token.approved_account_ids,
            memo, // we introduce a memo for logging in the events standard
            env::current_account_id(), //contract account to make the call to
            NO_DEPOSIT, //attached deposit
            GAS_FOR_RESOLVE_TRANSFER, //GAS attached to the call
        )).into()
    }

    //get the information for a specific token ID
    fn nft_token(&self, token_id: TokenId) -> Option<JsonToken> {
        //if there is some token ID in the tokens_by_id collection
        if let Some(token) = self.tokens_by_id.get(&token_id) {
            //we'll get the metadata for that token
            let metadata = self.token_metadata_by_id.get(&token_id).unwrap();
            //we return the JsonToken (wrapped by Some since we return an option)
            Some(JsonToken {
                token_id,
                owner_id: token.owner_id,
                metadata,
                approved_account_ids: token.approved_account_ids,
                royalty: token.royalty,
            })
        } else { //if there wasn't a token ID in the tokens_by_id collection, we return None
            None
        }
    }
}

#[near_bindgen]
impl NonFungibleTokenResolver for Contract {
    //resolves the cross contract call when calling nft_on_transfer in the nft_transfer_call method
    //returns true if the token was successfully transferred to the receiver_id
    #[private]
    fn nft_resolve_transfer(
        &mut self,
        //we introduce an authorized ID for logging the transfer event
        authorized_id: Option<String>,
        owner_id: AccountId,
        receiver_id: AccountId,
        token_id: TokenId,
        //we introduce the approval map so we can keep track of what the approvals were before the transfer
        approved_account_ids: HashMap<AccountId, u64>,
        //we introduce a memo for logging the transfer event
        memo: Option<String>,
    ) -> bool {
        // Whether receiver wants to return token back to the sender, based on `nft_on_transfer`
        // call result.
        if let PromiseResult::Successful(value) = env::promise_result(0) {
            //As per the standard, the nft_on_transfer should return whether we should return the token to it's owner or not
            if let Ok(return_token) = near_sdk::serde_json::from_slice::<bool>(&value) {
                //if we need don't need to return the token, we simply return true meaning everything went fine
                if !return_token {
                    /* 
                        since we've already transferred the token and nft_on_transfer returned false, we don't have to 
                        revert the original transfer and thus we can just return true since nothing went wrong.
                    */
                    //we refund the owner for releasing the storage used up by the approved account IDs
                    refund_approved_account_ids(owner_id, &approved_account_ids);
                    return true;
                }
            }
        }

        //get the token object if there is some token object
        let mut token = if let Some(token) = self.tokens_by_id.get(&token_id) {
            if token.owner_id != receiver_id {
                //we refund the owner for releasing the storage used up by the approved account IDs
                refund_approved_account_ids(owner_id, &approved_account_ids);
                // The token is not owner by the receiver anymore. Can't return it.
                return true;
            }
            token
        //if there isn't a token object, it was burned and so we return true
        } else {
            //we refund the owner for releasing the storage used up by the approved account IDs
            refund_approved_account_ids(owner_id, &approved_account_ids);
            return true;
        };

        //we remove the token from the receiver
        self.internal_remove_token_from_owner(&receiver_id.clone(), &token_id);
        //we add the token to the original owner
        self.internal_add_token_to_owner(&owner_id, &token_id);

        //we change the token struct's owner to be the original owner 
        token.owner_id = owner_id.clone();

        //we refund the receiver any approved account IDs that they may have set on the token
        refund_approved_account_ids(receiver_id.clone(), &token.approved_account_ids);
        //reset the approved account IDs to what they were before the transfer
        token.approved_account_ids = approved_account_ids;

        //we inset the token back into the tokens_by_id collection
        self.tokens_by_id.insert(&token_id, &token);

        /*
            We need to log that the NFT was reverted back to the original owner.
            The old_owner_id will be the receiver and the new_owner_id will be the
            original owner of the token since we're reverting the transfer.
        */
        let nft_transfer_log: EventLog = EventLog {
            // Standard name ("nep171").
            standard: NFT_STANDARD_NAME.to_string(),
            // Version of the standard ("nft-1.0.0").
            version: NFT_METADATA_SPEC.to_string(),
            // The data related with the event stored in a vector.
            event: EventLogVariant::NftTransfer(vec![NftTransferLog {
                // The optional authorized account ID to transfer the token on behalf of the old owner.
                authorized_id,
                // The old owner's account ID.
                old_owner_id: receiver_id.to_string(),
                // The account ID of the new owner of the token.
                new_owner_id: owner_id.to_string(),
                // A vector containing the token IDs as strings.
                token_ids: vec![token_id.to_string()],
                // An optional memo to include.
                memo,
            }]),
        };

        //we perform the actual logging
        env::log_str(&nft_transfer_log.to_string());

        //return false
        false
    }
}
'''
'''--- nft-zoo-contract/nft-contract/src/royalty.rs ---
use crate::*;

pub trait NonFungibleTokenCore {
    //calculates the payout for a token given the passed in balance. This is a view method
    fn nft_payout(&self, token_id: TokenId, balance: U128, max_len_payout: u32) -> Payout;
    
    //transfers the token to the receiver ID and returns the payout object that should be payed given the passed in balance. 
    fn nft_transfer_payout(
        &mut self,
        receiver_id: AccountId,
        token_id: TokenId,
        approval_id: u64,
        memo: Option<String>,
        balance: U128,
        max_len_payout: u32,
    ) -> Payout;
}

#[near_bindgen]
impl NonFungibleTokenCore for Contract {

    //calculates the payout for a token given the passed in balance. This is a view method
    fn nft_payout(&self, token_id: TokenId, balance: U128, max_len_payout: u32) -> Payout {
        //get the token object
		let token = self.tokens_by_id.get(&token_id).expect("No token");

        //get the owner of the token
        let owner_id = token.owner_id;
        //keep track of the total perpetual royalties
        let mut total_perpetual = 0;
        //get the u128 version of the passed in balance (which was U128 before)
        let balance_u128 = u128::from(balance);
		//keep track of the payout object to send back
        let mut payout_object = Payout {
            payout: HashMap::new()
        };
        //get the royalty object from token
		let royalty = token.royalty;

        //make sure we're not paying out to too many people (GAS limits this)
		assert!(royalty.len() as u32 <= max_len_payout, "Market cannot payout to that many receivers");

        //go through each key and value in the royalty object
		for (k, v) in royalty.iter() {
            //get the key
			let key = k.clone();
            //only insert into the payout if the key isn't the token owner (we add their payout at the end)
			if key != owner_id {
                //
				payout_object.payout.insert(key, royalty_to_payout(*v, balance_u128));
				total_perpetual += *v;
			}
		}

		// payout to previous owner who gets 100% - total perpetual royalties
		payout_object.payout.insert(owner_id, royalty_to_payout(10000 - total_perpetual, balance_u128));

        //return the payout object
		payout_object
	}

    //transfers the token to the receiver ID and returns the payout object that should be payed given the passed in balance. 
    #[payable]
    fn nft_transfer_payout(
        &mut self,
        receiver_id: AccountId,
        token_id: TokenId,
        approval_id: u64,
        memo: Option<String>,
        balance: U128,
        max_len_payout: u32,
    ) -> Payout { 
        //assert that the user attached 1 yocto NEAR for security reasons
        assert_one_yocto();
        //get the sender ID
        let sender_id = env::predecessor_account_id();
        //transfer the token to the passed in receiver and get the previous token object back
        let previous_token = self.internal_transfer(
            &sender_id,
            &receiver_id,
            &token_id,
            Some(approval_id),
            memo,
        );

        //refund the previous token owner for the storage used up by the previous approved account IDs
        refund_approved_account_ids(
            previous_token.owner_id.clone(),
            &previous_token.approved_account_ids,
        );

        //get the owner of the token
        let owner_id = previous_token.owner_id;
        //keep track of the total perpetual royalties
        let mut total_perpetual = 0;
        //get the u128 version of the passed in balance (which was U128 before)
        let balance_u128 = u128::from(balance);
		//keep track of the payout object to send back
        let mut payout_object = Payout {
            payout: HashMap::new()
        };
        //get the royalty object from token
		let royalty = previous_token.royalty;

        //make sure we're not paying out to too many people (GAS limits this)
		assert!(royalty.len() as u32 <= max_len_payout, "Market cannot payout to that many receivers");

        //go through each key and value in the royalty object
		for (k, v) in royalty.iter() {
            //get the key
			let key = k.clone();
            //only insert into the payout if the key isn't the token owner (we add their payout at the end)
			if key != owner_id {
                //
				payout_object.payout.insert(key, royalty_to_payout(*v, balance_u128));
				total_perpetual += *v;
			}
		}

		// payout to previous owner who gets 100% - total perpetual royalties
		payout_object.payout.insert(owner_id, royalty_to_payout(10000 - total_perpetual, balance_u128));

        //return the payout object
		payout_object
    }
}
'''
'''--- nft-zoo-contract/package.json ---
{
    "name": "nft-tutorial",
    "version": "1.0.0",
    "description": "Zero to Hero NFT Tutorial",
    "author": "Ben Kurrek",
    "license": "ISC",
    "scripts": {
        "build": "cd nft-contract && bash build.sh && cd .. && ls && cd market-contract && bash build.sh && cd .."
    }
}

'''
'''--- package.json ---
{
  "name": "nftzoo",
  "version": "0.1.0",
  "private": "false",
  "homepage": "https://kiskesis.github.io/nftzoo/",
  "dependencies": {
    "@craco/craco": "^6.4.3",
    "@testing-library/jest-dom": "^5.11.4",
    "@testing-library/react": "^11.1.0",
    "@testing-library/user-event": "^12.1.10",
    "axios": "^0.24.0",
    "bn.js": "^5.2.0",
    "borsh": "^0.7.0",
    "classnames": "^2.3.1",
    "crypto-js": "^4.1.1",
    "gh-pages": "^3.2.3",
    "near-api-js": "^0.44.1",
    "query-string": "^7.0.1",
    "react": "^17.0.2",
    "react-dom": "^17.0.2",
    "react-loader-spinner": "^4.0.0",
    "react-router-dom": "6",
    "react-scripts": "4.0.3",
    "web-vitals": "^1.0.1"
  },
  "scripts": {
    "start": "BROWSER=none craco start",
    "build": "craco build",
    "test": "craco test",
    "eject": "react-scripts eject",
    "deploy:pages": "gh-pages -d build"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

'''
'''--- public/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="NFT Zoo mini-game to help Ukrainian zoos"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>Ukraine Support NFT</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

'''
'''--- public/manifest.json ---
{
  "short_name": "Near Tips",
  "name": "Near Tips",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

'''
'''--- public/robots.txt ---
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

'''
'''--- src/assets/LoadingZone (1).svg ---
<svg width="377" height="58" viewBox="0 0 377 58" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M0.907761 11.9246C0.907761 16.2051 0.907761 20.4856 0.907761 24.7661C0.907761 27.2946 0.600129 30.0605 1.0756 32.546C1.29172 33.6758 1.13584 36.4713 2.08261 37.2327C2.94829 37.9289 3.04993 39.0778 3.27611 40.1009C3.73879 42.194 4.26447 48.6002 4.26447 46.4561C4.26447 40.4664 4.93581 34.4731 4.93581 28.478C4.93581 23.845 4.55963 18.7067 6.09201 14.3054C6.52561 13.06 6.94984 10.713 6.94984 13.4243C6.94984 16.3515 6.82946 19.2153 7.63983 22.0666C9.24198 27.7037 10.5142 33.5571 12.4884 39.0699C12.7145 39.7013 12.8741 41.0726 13.4022 41.5444C13.4577 41.594 14.0595 37.7845 14.1481 37.3264C15.2643 31.5556 16.3486 26.2062 16.3486 20.3606C16.3486 19.8193 16.3486 14.7213 16.3486 16.9862C16.3486 19.9038 16.2132 22.8507 16.4232 25.7597C16.7824 30.7348 17.1043 35.9682 18.1016 40.8696C18.4387 42.5264 18.6309 42.7165 19.4442 41.6944C20.0384 40.9478 20.2587 39.9011 20.7496 39.0511C22.7281 35.6258 24.4165 32.2803 25.7474 28.5342C27.1719 24.5247 28.5608 20.4832 29.589 16.3488C29.9381 14.9448 30.7825 13.0278 30.7825 11.5872C30.7825 10.8283 30.1813 11.8601 30.1298 12.0933C29.931 12.9926 30.1111 14.1343 30.1111 15.0366C30.1111 21.7968 29.6329 28.7328 30.1857 35.4705C30.2083 35.7462 30.8367 42.3182 31.3792 41.8819C33.0528 40.5359 34.45 36.9833 35.4819 35.1331C37.0379 32.3428 38.4734 29.458 39.7896 26.5471C40.1841 25.6745 40.4344 24.3429 41.1137 23.6601C41.294 23.4788 41.1883 24.3609 41.1883 24.5974C41.1883 25.9143 40.7466 27.2287 40.5915 28.5342C40.0334 33.2335 40.8898 37.5846 42.1953 42.0319C42.3279 42.4835 44.0748 46.7406 44.2839 46.3436C45.1772 44.6473 44.8364 42.1062 45.0671 40.2509C45.4169 37.438 45.8902 34.6596 46.1487 31.8336C46.3119 30.0502 46.2233 28.2266 46.2233 26.4346C46.2233 24.3624 46.559 22.2398 46.559 20.2294C46.559 19.431 46.6975 21.8214 46.8201 22.6102C47.3326 25.9076 48.5727 28.9175 49.7665 32.0211C52.1835 38.3049 55.6938 43.3564 59.128 49.0056C59.5475 49.6957 59.9409 50.5548 59.9858 49.1556C60.083 46.1274 60.3215 43.1391 60.3215 40.1009C60.3215 36.3724 60.6572 32.6597 60.6572 28.9654C60.6572 27.7174 60.2293 25.6565 60.825 24.5786C61.1615 23.9698 60.8279 23.6824 61.0674 24.4849C61.6533 26.4481 62.1156 28.3598 62.8204 30.2964C63.9395 33.3716 65.1281 37.9779 67.5384 40.4009C68.5157 41.3833 71.0188 32.9313 71.1935 32.1898C71.7723 29.733 72.4056 27.3652 72.4056 24.8411C72.4056 22.0826 73.1498 18.1702 72.387 15.4865C71.4868 12.319 71.7343 22.0531 71.7343 25.3473C71.7343 29.3238 71.3619 33.5692 72.7413 37.3827C73.2004 38.6517 74.0244 39.8218 74.4197 41.1133C75.4996 44.6415 76.6871 40.7635 77.6085 39.1074C80.8799 33.2277 84.2626 27.3704 88.1822 21.8979C88.5419 21.3955 90.6742 18.9664 89.7859 18.0735C88.2138 16.4931 88.8535 21.7629 88.8535 22.3478C88.8535 26.972 88.8535 31.5962 88.8535 36.2204C88.8535 37.265 89.0877 39.1719 90.5319 39.2573C93.8048 39.4509 96.8336 33.5031 98.1777 31.2337C100.378 27.5196 101.224 23.3229 103.026 19.4983C103.465 18.5675 103.287 17.3707 103.287 16.3113C103.287 15.8087 103.364 14.9965 103.269 16.0489C103.046 18.5141 102.412 20.9126 102.206 23.3976C101.868 27.4681 101.945 31.5376 101.945 35.6205C101.945 36.7786 102.841 37.357 102.952 38.245C103.015 38.7572 103.882 39.9675 104.22 40.3446C104.582 40.7489 104.491 41.282 105.134 41.282C106.538 41.282 107.905 39.5736 108.658 38.5825C112.189 33.9363 114.311 28.8526 116.379 23.4726C116.569 22.9775 116.714 21.3859 116.714 21.9166C116.714 23.1601 116.714 24.4037 116.714 25.6472C116.714 30.8588 116.714 36.0704 116.714 41.282C116.714 42.4126 116.669 43.1151 117.721 43.6441" stroke="black" stroke-linecap="round"/>
<path d="M117.721 43.6441C118.038 45.1306 118.895 47.6559 120.91 47.6559C121.564 47.6559 122.39 42.6438 122.588 41.807C123.498 37.9678 123.857 34.0078 124.845 30.1465C125.175 28.8562 125.106 27.6013 125.106 26.2659C125.106 24.9163 126.493 24.3515 127.12 23.2477C127.383 22.7849 127.745 22.7921 127.81 23.2852C128.055 25.1303 128.475 26.9646 128.798 28.7967C130.108 36.208 133.057 43.2763 135.773 50.243C136.274 51.5284 136.989 52.7258 137.6 53.9548C138.382 55.5259 138.511 51.2391 138.514 51.1241C138.815 39.4799 138.184 28.2411 136.034 16.8176C135.984 16.5506 135.847 13.9868 135.344 13.9868C134.811 13.9868 135.452 16.5235 135.512 16.7238C136.452 19.8565 138.762 22.7464 140.566 25.4223C143.203 29.336 146.116 33.1151 149.125 36.7453C150.085 37.9038 154.038 43.3861 156.156 42.913C157.848 42.535 157.892 35.7848 158.002 34.6457C158.444 30.0471 158.673 25.5034 158.673 20.8856C158.673 19.0336 158.775 17.1491 158.673 15.2991C158.661 15.0855 158.337 17.8341 158.337 18.411C158.337 25.9057 157.566 33.8402 158.841 41.2446C158.864 41.3794 160.324 47.0479 160.948 45.8563C163.002 41.9339 164.08 37.0851 165.312 32.846C165.661 31.6455 166.543 25.4065 167.065 29.8653C167.794 36.0926 170.292 42.4338 173.405 47.8247C174.111 49.0456 174.595 50.2018 175.606 51.2178C176.78 52.3986 177.859 48.8607 178.142 48.1434C179.731 44.1191 180.408 39.7956 181.48 35.6205C182.06 33.3595 182.454 30.8792 182.506 28.5343C182.527 27.5701 182.506 27.3944 182.506 28.4593C182.506 30.2705 182.639 31.9289 183.009 33.7084C183.497 36.0533 184.339 40.3269 186.366 41.9569C186.786 42.2949 186.948 40.5933 187.037 40.176C187.811 36.5475 188.463 32.796 189.07 29.1342C189.356 27.4115 189.744 25.7429 190.375 24.1101C190.501 23.7851 190.642 22.5431 190.972 23.4727C192.361 27.381 193.652 31.1592 195.597 34.8519C196.158 35.9166 196.729 37.0708 197.611 37.9076C198.649 38.8933 198.937 36.6645 199.14 36.0142C200.707 31.0039 201.303 26.0115 201.303 20.7731C201.303 18.6854 201.649 19.4054 202.497 21.1106C204.371 24.8779 206.313 28.6062 208.427 32.2461C210.2 35.2991 211.742 38.4771 213.387 41.6008C213.881 42.5376 214.361 43.8036 215.401 44.244C216.881 44.8701 218.836 42.891 219.765 41.9569" stroke="black" stroke-linecap="round"/>
<path d="M217.416 42.6318C218.144 39.0533 218.758 35.9667 218.758 32.3211C218.758 30.5437 218.603 28.6935 218.926 26.9408C219.113 25.9266 219.371 24.2867 219.075 23.2477C219.049 23.1554 219.468 25.6304 219.84 26.4346C221.517 30.0668 222.879 33.9718 224.297 37.7201C225.438 40.737 226.929 43.6174 228.157 46.6061C228.239 46.8053 229.457 49.0698 229.5 47.9558C229.802 40.0593 231.662 32.2316 232.707 24.4287C233.001 22.2322 233.779 19.9397 233.863 17.7361C233.92 16.2578 233.863 18.6481 233.863 19.0296C233.863 25.6478 234.139 32.2007 237.146 38.245C237.648 39.2548 238.183 40.779 239.066 41.4695C240.546 42.6268 240.427 39.547 240.577 38.5075C241.579 31.5639 243.217 24.7168 244.083 17.7549C244.525 14.1946 245.155 10.6093 245.929 7.10672C246.232 5.73418 245.948 9.91871 245.948 11.3247C245.948 16.2022 245.973 21.0119 246.451 25.8722C246.892 30.351 248.03 35.0868 249.64 39.2949C250.283 40.9754 251.019 43.3429 252.325 44.6564C253.872 46.2114 256.416 37.2741 256.652 36.5766C258.767 30.3037 260.298 23.8516 261.724 17.3987C261.919 16.5159 262.237 13.5521 262.078 15.8614C261.765 20.425 261.813 25.3573 262.246 29.9027C262.531 32.8891 262.716 36.694 263.738 39.5198C263.788 39.6588 264.027 40.8015 264.148 40.8696C264.52 41.077 265.126 37.2454 265.155 37.0827C266.106 31.8625 266.516 26.5602 266.74 21.2605C266.775 20.4516 266.611 14.3091 266.778 17.9236C267.097 24.8144 268.107 31.5467 269.37 38.32C270.394 43.8121 271.523 49.2769 273.79 54.4047C273.918 54.6955 275.132 57.8849 275.897 56.8418C277.243 55.0058 277.886 52.3081 278.508 50.168C279.476 46.8331 280.335 43.4649 281.268 40.1197C282.097 37.1463 282.892 34.157 283.711 31.1963C284.07 29.896 283.878 31.8427 283.878 32.2461C283.878 33.6429 285.087 40.4675 285.706 35.8455C286.639 28.8771 286.564 21.7124 286.564 14.6991C286.564 10.5757 287.069 5.91299 286.06 1.85763C284.538 -4.26145 285.557 14.4657 285.557 20.7731C285.557 22.7102 285.557 24.6474 285.557 26.5846C285.557 27.3151 285.576 23.8132 285.538 23.2289C285.364 20.5156 281.293 17.3532 278.843 19.6858C277.004 21.4373 277.697 25.6336 278.097 27.8968C278.323 29.1702 278.548 30.4134 278.825 31.6649C279.27 33.681 277.585 30.3039 277.463 30.0152C275.494 25.3358 273.815 20.4598 272.466 15.5615C272.25 14.7806 271.268 9.33952 270.284 8.9439C270.072 8.85867 270.045 10.7599 270.041 10.7998C269.795 13.8292 269.78 16.8341 269.78 19.8732C269.78 26.7143 269.785 33.3531 272.13 39.8573C274.465 46.3349 278.952 50.6706 285.967 50.7304C291.537 50.7778 296.777 50.5122 301.296 46.831C305.049 43.7739 308.183 40.2643 309.203 35.433C309.769 32.7483 309.928 29.809 306.704 29.809C305.873 29.809 305.578 29.8042 305.343 30.6339C305.075 31.5743 303.038 31.8523 302.322 32.0024C298.502 32.8024 295.006 29.4666 292.606 26.8845C290.179 24.2746 288.501 20.928 286.433 18.0361C283.935 14.542 286.334 20.0259 286.825 21.298C288.953 26.8126 291.019 32.5601 294.396 37.4577C294.675 37.8628 296.426 40.4277 297.175 39.5011C298.105 38.35 298.763 36.9478 299.468 35.658C301.35 32.2191 303.564 28.9761 305.436 25.5348C307.35 22.0159 309.208 18.2817 310.546 14.4929C311.286 12.3952 311.513 11.991 311.385 14.5117C311.151 19.0921 311.068 23.6428 311.068 28.2343C311.068 29.7761 311.841 25.2416 312.41 23.8101C312.613 23.3004 313.542 20.3296 314.424 20.7731C314.949 21.0367 315.258 22.026 315.469 22.4978C316.464 24.7219 317.36 27.0235 318.117 29.3403C319.364 33.1599 320.186 37.158 321.735 40.8696C322.741 43.2821 322.981 43.2202 323.338 40.5509C323.82 36.9552 323.989 33.1712 324.998 29.6778C325.107 29.3005 325.837 27.2094 325.837 27.4469C325.837 29.3824 326.321 31.3835 326.509 33.3146C326.677 35.0491 326.763 37.1788 327.254 38.8449C327.769 40.5917 328.474 34.2866 328.523 33.8583C329.109 28.6508 329.739 23.4234 330.201 18.2048C330.239 17.776 330.519 13.4325 330.798 15.1116C332.363 24.5538 334.252 34.0498 338.425 42.763C340.288 46.6538 340.899 44.0805 341.446 41.1133C341.767 39.3684 341.919 37.6053 342.36 35.8829C342.568 35.0703 342.515 33.6415 342.882 35.2081C342.961 35.5468 343.084 37.4042 343.814 36.6703C345.008 35.4699 345.591 33.4575 346.164 31.9274C347.249 29.0311 348.348 26.1431 349.483 23.2664C350.454 20.8064 352.159 17.7028 352.355 15.0366C352.415 14.2271 352.685 15.1194 352.691 15.449C352.724 17.2169 352.58 18.9457 352.355 20.6981C351.86 24.5542 351.684 28.4549 351.684 32.3398C351.684 34.238 351.333 36.3815 352.691 37.9076C352.875 38.1146 353.432 39.2196 353.717 38.695C355.013 36.3055 355.375 33.528 355.861 30.8776C356.173 29.1773 355.953 27.4719 356.048 25.7597C356.121 24.4323 357.155 28.3506 357.241 28.703C358.02 31.9083 359.147 35.008 360.076 38.17C360.377 39.1972 361.178 41.7596 361.754 39.4448C362.827 35.1299 363.356 30.5942 363.936 26.1909C364.176 24.3706 364.938 18.9827 365.111 20.8106C365.934 29.5013 365.569 38.2619 366.435 46.9623C366.568 48.3003 366.999 48.4549 367.796 47.206C369.549 44.4593 370.297 40.8494 371.563 37.8326C372.862 34.7385 373.167 31.4949 374.006 28.2905C374.082 27.9993 374.174 26.2863 374.174 26.847C374.174 30.2339 374.174 33.6208 374.174 37.0078C374.174 39.5323 374.174 42.0569 374.174 44.5814C374.174 45.1695 373.838 46.5478 373.838 45.1813C373.838 39.9985 375.852 35.0616 375.852 29.884C375.852 28.1718 375.852 26.4596 375.852 24.7474C375.852 22.717 374.778 21.1891 373.838 19.5358C373.235 18.4746 370.579 19.0109 369.549 19.0109C369.033 19.0109 367.485 19.0109 368.001 19.0109C369.063 19.0109 370.268 18.4148 371.302 18.1673C372.808 17.8069 373.997 17.1832 374.509 15.6365" stroke="black" stroke-linecap="round"/>
</svg>

'''
'''--- src/assets/logo-black.svg ---
<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#24272a"/><stop offset=".42" stop-color="#24272a" stop-opacity="0"/><stop offset=".59" stop-color="#24272a" stop-opacity="0"/><stop offset=".81" stop-color="#24272a"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#24272a"/></svg>
'''
'''--- src/assets/logo-white.svg ---
<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#fff"/><stop offset=".42" stop-color="#fff" stop-opacity="0"/><stop offset=".59" stop-color="#fff" stop-opacity="0"/><stop offset=".81" stop-color="#fff"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#fff"/></svg>
'''
'''--- src/components/NFT/index.css ---
.mint {
    display: flex;
    justify-content: center;
    margin-top: 15px;
}
'''
'''--- src/components/NFT/index.js ---
import React from "react";
import './index.css'

export default function NFT() {
    return (
        <div className="mint">
            <img
                src="https://ipfs.io/ipfs/bafkreihdfouh6pulmzmx4nlb653q5vmkwgbqegzf37vavf6lyubdtavyom"
                alt="NFT image"
            />
        </div>
    )
}
'''
'''--- src/components/loading/index.css ---
.loader-hover {
    position: absolute;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    background-color: #444444;
    opacity: 0.7;
    display: flex;
    justify-content: center;
    align-items: center;
}

.loader {
    max-width: 422px;
    position: relative;
}

.main-loader-bar {
    overflow: hidden;
    object-fit: cover;
    object-position: 100% 0;
    height: 73px;
    background-color: white;
    opacity: 1;
}
'''
'''--- src/components/loading/index.js ---
import LoadingZone from '../../assets/LoadingZone (1).svg'
import './index.css'
import {useInterval} from "../../utils/hooks";
import {useState} from "react";

export default function Loading() {
    const [width, setWidth] = useState(0)
    useInterval(() => {
        switch (width) {
            case 0:
                setWidth(25);
                break;
            case 25:
                setWidth(50);
                break;
            case 50:
                setWidth(75);
                break;
            case 75:
                setWidth(100);
                break;
            default:
                setWidth(0)
                break;
        }
    },500)

    return (
        <div className="loader-hover">
            <div className="loader">
                <img
                    style={{
                        width: width + '%'
                    }}
                    className="main-loader-bar"
                    src={LoadingZone}
                    alt=""
                />
            </div>
        </div>
    )
}
'''
'''--- src/components/pageWrapper/index.css ---
.page-wrapper {
    position: relative;
}
'''
'''--- src/components/pageWrapper/index.js ---
import 'regenerator-runtime/runtime'
import React, {useEffect} from 'react'

import './index.css'
import {logout} from "../../utils/utils";
import {useLocation, useNavigate} from "react-router-dom";
import Loading from "../loading";
import SupportUkraine from '../../assets/support-ukraine.png';

export default function PageWrapper({ children, isLoading }) {
    const navigate = useNavigate()
    const { pathname } = useLocation();
    useEffect(() => {
        const checkToken = async () => {
            const hasToken = await window.contract.check_token({
                token_type: "Lion"
            });
            if (!hasToken && pathname !== "/mint") {
                navigate("/mint")
            }

            if (hasToken && pathname === "/mint") {
                navigate("/select-animal")
            }
        }
        if (window.walletConnection.isSignedIn()) {
            checkToken()
        } else {
            navigate("/")
        }
    }, [])

    const handleLogout = () => {
        logout()
        navigate("/")
    }

    return (
        <div className="page-wrapper">
            <header className="header">
                <img
                    className="header-logo"
                    src={SupportUkraine}
                    alt=""
                />
                <div className="header-profile-div">
                    <div>{window.accountId}</div>
                    <button
                        className="link"
                        style={{float: 'right', height: '100%'}}
                        onClick={handleLogout}
                    >
                        Sign out
                    </button>
                </div>
            </header>
            {children}
            {isLoading && <Loading />}
        </div>
    )
}

'''
'''--- src/config.js ---
const CONTRACT_NAME = process.env.CONTRACT_NAME || 'nftzoo.testnet'

function getConfig(env) {
  switch (env) {

  case 'production':
  case 'mainnet':
    return {
      networkId: 'testnet',
      nodeUrl: 'https://rpc.testnet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.testnet.near.org',
      helperUrl: 'https://helper.testnet.near.org',
      explorerUrl: 'https://explorer.testnet.near.org',
    }
  case 'development':
  case 'testnet':
    return {
      networkId: 'testnet',
      nodeUrl: 'https://rpc.testnet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.testnet.near.org',
      helperUrl: 'https://helper.testnet.near.org',
      explorerUrl: 'https://explorer.testnet.near.org',
    }
  case 'betanet':
    return {
      networkId: 'betanet',
      nodeUrl: 'https://rpc.betanet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.betanet.near.org',
      helperUrl: 'https://helper.betanet.near.org',
      explorerUrl: 'https://explorer.betanet.near.org',
    }
  case 'local':
    return {
      networkId: 'local',
      nodeUrl: 'http://localhost:3030',
      keyPath: `${process.env.HOME}/.near/validator_key.json`,
      walletUrl: 'http://localhost:4000/wallet',
      contractName: CONTRACT_NAME,
    }
  case 'test':
  case 'ci':
    return {
      networkId: 'shared-test',
      nodeUrl: 'https://rpc.ci-testnet.near.org',
      contractName: CONTRACT_NAME,
      masterAccount: 'test.near',
    }
  case 'ci-betanet':
    return {
      networkId: 'shared-test-staging',
      nodeUrl: 'https://rpc.ci-betanet.near.org',
      contractName: CONTRACT_NAME,
      masterAccount: 'test.near',
    }
  default:
    throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`)
  }
}

module.exports = getConfig

'''
'''--- src/global.css ---
* {
  box-sizing: border-box;
}

html {
  --bg: #efefef;
  --fg: #1e1e1e;
  --gray: #555;
  --light-gray: #ccc;
  --shadow: #e6e6e6;
  --success: rgb(90, 206, 132);
  --primary: #FF585D;
  --secondary: #0072CE;

  background-color: var(--bg);
  color: var(--fg);
  font-family: -apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica,Arial,sans-serif;
  font-size: calc(0.9em + 0.5vw);
  line-height: 1.3;
}

body {
  margin: 0;
  padding: 0;
}

main {
  margin: 0 auto;
  max-width: 25em;
}

h1 {
  background-image: url(assets/logo-black.svg);
  background-position: center 1em;
  background-repeat: no-repeat;
  background-size: auto 1.5em;
  margin-top: 0;
  padding: 3.5em 0 0.5em;
  text-align: center;
}

a,
.link {
  color: var(--primary);
  text-decoration: none;
}
a:hover,
a:focus,
.link:hover,
.link:focus {
  text-decoration: underline;
}
a:active,
.link:active {
  color: var(--secondary);
}

button, input {
  font: inherit;
  outline: none;
}

button {
  background-color: var(--secondary);
  border-radius: 5px;
  border: none;
  color: #efefef;
  cursor: pointer;
  padding: 0.3em 0.75em;
  transition: transform 30ms;
}
button:hover, button:focus {
  box-shadow: 0 0 10em rgba(255, 255, 255, 0.2) inset;
}
button:active {
  box-shadow: 0 0 10em rgba(0, 0, 0, 0.1) inset;
}
button.link {
  background: none;
  border: none;
  box-shadow: none;
  display: inline;
}
[disabled] button, button[disabled] {
  box-shadow: none;
  background-color: var(--light-gray);
  color: gray;
  cursor: not-allowed;
  transform: none;
}
[disabled] button {
  text-indent: -900em;
  width: 2em;
  position: relative;
}
[disabled] button:after {
  content: " ";
  display: block;
  width: 0.8em;
  height: 0.8em;
  border-radius: 50%;
  border: 2px solid #fff;
  border-color: var(--fg) transparent var(--fg) transparent;
  animation: loader 1.2s linear infinite;
  position: absolute;
  top: 0.45em;
  right: 0.5em;
}
@keyframes loader {
  0% { transform: rotate(0deg) }
  100% { transform: rotate(360deg) }
}

fieldset {
  border: none;
  padding: 2em 0;
}

input {
  background-color: var(--shadow);
  border: none;
  border-radius: 5px 0 0 5px;
  caret-color: var(--primary);
  color: inherit;
  padding: 0.25em 1em;
}
input::selection {
  background-color: var(--secondary);
  color: #efefef;
}
input:focus {
  box-shadow: 0 0 10em rgba(0, 0, 0, 0.02) inset;
}

code {
  color: var(--gray);
}

li {
  padding-bottom: 1em;
}

aside {
  animation: notify ease-in-out 10s;
  background-color: var(--shadow);
  border-radius: 5px;
  bottom: 0;
  font-size: 0.8em;
  margin: 1em;
  padding: 1em;
  position: fixed;
  transform: translateY(10em);
  right: 0;
}
aside footer {
  display: flex;
  font-size: 0.9em;
  justify-content: space-between;
  margin-top: 0.5em;
}
aside footer *:first-child {
  color: var(--success);
}
aside footer *:last-child {
  color: var(--gray);
}
@keyframes notify {
  0% { transform: translateY(10em) }
  5% { transform: translateY(0) }
  95% { transform: translateY(0) }
  100% { transform: translateY(10em) }
}

@media (prefers-color-scheme: dark) {
  html {
    --bg: #1e1e1e;
    --fg: #efefef;
    --gray: #aaa;
    --shadow: #2a2a2a;
    --light-gray: #444;
  }
  h1 {
    background-image: url(assets/logo-white.svg);
  }
  input:focus {
    box-shadow: 0 0 10em rgba(255, 255, 255, 0.02) inset;
  }
}

'''
'''--- src/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="./assets/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="apple-touch-icon" href="./assets/favicon.ico" />
    <title>Welcome to NEAR with React</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
    <script src="./index.js"></script>
  </body>
</html>

'''
'''--- src/index.js ---
import React from 'react'
import './global.css'
import {initContract} from "./utils/utils";
import { render } from "react-dom";
import {
    Routes,
    Route, HashRouter,
} from "react-router-dom";
import SelectAnimalPage from "./pages/selectAnimalPage";
import Mint from "./pages/mint";
import Login from "./pages/login";
import GamePage from "./pages/gamePage";

window.nearInitPromise = initContract()
  .then(() => {
    render(
        <HashRouter>
            <Routes>
                <Route path="/" element={<Login />} />
                <Route path="/select-animal" element={<SelectAnimalPage />} />
                <Route path="/mint" element={<Mint />} />
                <Route path="/game/lion" element={<GamePage />} />
            </Routes>
        </HashRouter>,
      document.querySelector('#root')
    )
  })
  .catch(console.error)

'''
'''--- src/pages/gamePage/assets/Fifth.svg ---
<svg width="68" height="71" viewBox="0 0 68 71" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M20.0322 41.4586C18.412 45.2708 16.0498 47.0084 13.1376 49.3381C10.3709 51.5515 7.9598 50.173 4.9298 49.9948C2.90314 49.8756 0.930262 56.6847 2.66809 57.1812C4.07419 57.5829 6.09175 57.2177 7.55631 57.2177C10.2821 57.2177 8.26331 57.4591 7.0456 58.6768C5.31369 60.4088 6.3466 65.0972 9.19788 65.0972C11.1306 65.0972 16.7491 63.9601 16.7491 61.8141C16.7491 58.9676 14.3406 56.124 17.0774 53.9345C19.2762 52.1755 20.6366 48.0249 23.972 48.0249" stroke="black" stroke-width="3" stroke-linecap="round"/>
<path d="M6.89966 32.2659C12.7539 31.1236 17.4687 25.043 23.3153 25.043C29.0061 25.043 34.6969 25.043 40.3876 25.043C43.0659 25.043 45.0018 25.7306 47.2457 27.0128C48.1465 27.5276 49.226 31.987 50.0911 33.0684C50.928 34.1145 51.2801 37.7806 51.5868 39.1604C52.0712 41.3404 53.3983 43.983 53.5202 46.055C53.6671 48.5524 53.5202 51.104 53.5202 53.6062C53.5202 56.3795 51.3515 56.0635 49.7263 57.3636C46.3139 60.0936 42.953 61.5494 39.0744 63.2733C35.5857 64.8238 28.7405 65.5612 25.7959 62.6166C24.4023 61.223 23.4202 59.5974 21.6738 58.2391C20.8551 57.6024 19.6275 56.8962 18.7189 56.4151C17.1243 55.5709 17.6693 54.6584 16.7491 53.2779" stroke="black" stroke-width="3" stroke-linecap="round"/>
<path d="M6.24303 32.9225C6.24303 35.6906 5.10843 42.831 6.89966 45.0701C8.76738 47.4047 12.61 46.313 14.1226 49.3382" stroke="black" stroke-width="3" stroke-linecap="round"/>
<path d="M38.4178 23.0731C42.437 22.1688 42.4201 19.4772 45.3124 17.1635C46.0959 16.5367 46.9838 15.6488 47.6106 14.8653C48.0561 14.3083 50.0801 13.2237 49.5804 13.2237" stroke="black" stroke-width="3" stroke-linecap="round"/>
<path d="M44.3274 25.0429C48.6931 21.8679 50.6846 15.4878 56.4385 13.8438C57.9071 13.4242 55.2267 14.6024 57.1681 15.1571C58.7447 15.6075 60.389 14.9525 61.728 14.2086C63.0463 13.4762 64.5662 13.2673 65.6313 12.2022C66.4452 11.3883 66.3007 8.29369 65.0111 8.00712C63.5229 7.67641 62.2975 6.65739 60.7431 6.65739C58.0421 6.65739 59.1244 5.86703 60.5972 4.54159C64.1057 1.38389 60.6689 2.061 57.4599 2.061C54.9765 2.061 52.9704 3.59392 51.6962 6.00076C51.1296 7.07107 50.4321 8.54755 49.7263 9.42981C49.1407 10.1619 50.8937 11.6132 50.8937 12.567" stroke="black" stroke-width="3" stroke-linecap="round"/>
<path d="M34.3226 64.4922C34.3226 63.5057 34.3226 62.5192 34.3226 61.5327C34.3226 60.8595 34.4826 60.2728 34.4826 59.6131C34.4826 58.9496 34.5247 58.2156 34.5626 57.5334C34.5847 57.1349 34.6426 56.7192 34.6426 56.2981C34.6426 56.0206 34.7085 55.4654 34.8203 55.2139C34.9592 54.9014 34.9215 54.5038 35.0825 54.214C35.2484 53.9155 35.5666 54.0141 35.9223 54.0141C36.7305 54.0141 37.5742 54.174 38.4019 54.174C38.9485 54.174 39.495 54.174 40.0416 54.174C40.1632 54.174 40.396 54.2239 40.5171 54.2585C40.5526 54.2686 40.8194 53.82 40.8815 53.6764C41.0311 53.3298 41.3175 53.0151 41.4236 52.6543C41.4796 52.4638 41.5593 52.224 41.7213 52.0944C41.9458 51.9148 42.1612 51.7662 42.1612 51.4545" stroke="black" stroke-width="3" stroke-linecap="round"/>
<path d="M42.0813 51.3745C42.0813 50.9056 41.8847 49.6808 42.1213 49.2549C42.3761 48.7962 42.1879 48.1911 42.4412 47.7351C42.5888 47.4696 43.2026 47.7169 43.441 47.7574C44.1532 47.8783 44.8793 47.9478 45.5962 48.0195C46.2368 48.0836 46.8962 48.2424 47.4848 48.4106C48.6684 48.7488 49.7737 49.1089 51.0219 49.3926C51.6422 49.5336 52.2319 49.9047 52.7994 50.1569C53.0133 50.252 54.3308 50.7113 54.3991 50.5746" stroke="black" stroke-width="3" stroke-linecap="round"/>
<path d="M52.9593 54.5739C52.9593 55.2592 52.9902 55.7405 52.3194 56.0759C51.842 56.3146 51.2776 56.5311 50.8974 56.9113C50.6733 57.1354 49.95 57.6944 50.4797 57.1335C50.8175 56.7759 51.1312 56.402 51.4796 56.0537C51.8905 55.6427 52.451 55.1698 52.9593 54.8939C53.1031 54.8158 53.5934 54.6412 53.6792 54.5339C53.7464 54.4499 53.911 54.5526 53.9191 54.414C53.9268 54.2838 53.9268 54.1442 53.9191 54.014C53.9119 53.8919 53.5143 53.7955 53.4214 53.7119C53.09 53.4136 52.7365 53.2663 52.3194 53.2142C52.1091 53.1879 52.0726 52.9742 51.7995 52.9742C51.3279 52.9742 52.052 53.0542 52.1994 53.0542C52.5433 53.0542 52.8039 53.3566 53.1193 53.3742C53.3298 53.3858 53.6557 53.4089 53.8791 53.4586C54.0912 53.5057 54.4458 53.466 54.639 53.5519C54.9567 53.6931 55.0151 53.5532 55.2389 53.3742C55.8612 52.8763 56.4598 52.3177 57.0208 51.7567C57.2568 51.5206 57.2249 50.8476 57.0208 50.5924C56.865 50.3977 56.6386 50.4762 56.6386 50.2147C56.6386 50.0235 56.4787 49.4724 56.4787 49.6637C56.4787 49.8772 56.3987 50.2991 56.3987 50.2991C56.3987 50.2991 56.5382 50.1631 56.5542 50.2192C56.5871 50.3342 56.5586 50.4951 56.5586 50.6146C56.5586 50.8679 56.5586 51.1212 56.5586 51.3745C56.5586 51.6423 56.6131 52.1852 56.3187 51.6944" stroke="white" stroke-width="3" stroke-linecap="round"/>
<path d="M56.3987 55.3738C54.9251 56.7272 52.8717 57.5309 51.1463 58.511C50.2617 59.0135 49.3266 59.4234 48.4002 59.8352C48.2841 59.8868 48.3202 59.6626 48.3202 59.6086C48.3202 59.3352 48.4699 59.1031 48.6579 58.9109C49.0547 58.5051 49.6056 58.0917 50.1598 57.9333C51.0776 57.6711 49.9402 58.6836 49.6488 58.8132C49.2437 58.9932 49.762 57.538 49.6799 57.5334C49.279 57.5111 48.8602 57.7851 48.4979 57.9333C48.1177 58.0889 47.8827 58.1547 48.018 57.6134C48.0937 57.3106 48.3476 56.8176 48.6401 56.6713C48.7605 56.6111 49.04 56.514 49.04 56.698C49.04 57.1287 48.8644 57.4604 48.6357 57.8178C48.1338 58.602 47.3538 59.3172 46.6582 59.933C46.3658 60.1919 46.0151 60.6448 45.6806 60.8306C45.2845 61.0507 45.4407 59.8244 45.4407 59.6086C45.4407 58.8101 45.6834 58.0166 46.0406 57.3023C46.2711 56.8413 46.1606 57.487 46.1606 57.7023C46.1606 58.6123 45.6528 59.5535 45.2007 60.3285C44.9606 60.7401 44.7468 61.4316 44.3831 61.7549C44.3219 61.8092 44.3963 60.8965 44.4009 60.8128C44.4248 60.3705 44.6678 60.2288 44.3875 60.7017C44.0171 61.3268 43.4743 61.8194 42.9656 62.3281C42.9263 62.3674 42.6436 62.6598 42.579 62.5369C42.392 62.1817 42.5568 61.342 42.5612 60.955C42.5634 60.7576 42.801 60.1712 42.8012 60.1729C42.8223 60.511 42.8174 60.9331 42.6412 61.2305C42.5864 61.323 42.4812 61.8496 42.4812 61.5149C42.4812 61.112 42.5874 59.9188 42.4768 60.3062C42.1563 61.4279 41.5664 62.3373 40.8815 63.2746C40.6557 63.5836 40.7255 62.8564 40.7215 62.7502C40.7057 62.324 40.4907 63.1795 40.4771 63.2879C40.4656 63.38 40.3216 63.9232 40.3216 63.6034C40.3216 63.128 40.3216 62.6525 40.3216 62.177C40.3216 61.8818 40.1924 62.6738 40.1616 62.8125C40.084 63.1617 39.937 63.4124 39.9217 62.8924C39.8925 61.8993 39.5201 63.454 39.3618 63.6123C39.1278 63.8462 39.0503 63.7655 39.0418 63.4523C39.0299 63.0098 38.8818 62.5896 38.8818 62.1415C38.8818 61.6745 39.1377 63.4266 38.6819 63.5279C38.4386 63.5819 38.3468 62.9801 38.3264 62.8169C38.288 62.5097 38.3304 63.2294 38.3219 63.3724C38.3005 63.7378 38.1115 62.8711 38.0998 62.8036C38.0759 62.6655 38.002 61.7771 38.002 62.257C38.002 62.9986 37.9127 63.552 37.5843 64.1722C37.4052 64.5105 37.6311 64.9496 37.4599 65.292C37.3211 65.5695 37.6021 64.6824 37.6021 64.3722C37.6021 63.9338 37.6175 63.7315 37.3799 63.4346C37.3041 63.3399 37.3621 63.0126 37.3621 62.8924C37.3621 62.7638 37.2021 62.4128 37.2021 62.5414C37.2021 62.9641 37.2014 63.211 37.4021 63.5723C37.5905 63.9114 37.5947 64.2356 37.7443 64.5721C37.8861 64.8913 37.842 65.2906 37.842 65.6519C37.842 66.1118 37.5548 65.9956 37.2021 66.1719" stroke="white" stroke-width="3" stroke-linecap="round"/>
<path d="M8.15076 33.0347C10.6375 33.3638 12.8604 34.7654 15.3102 35.2553C15.8146 35.3562 16.3147 35.5565 16.8026 35.7011C17.2937 35.8466 17.7802 35.9686 18.2671 36.1309C18.5273 36.2176 18.8243 36.5321 18.8243 36.1508C18.8243 35.5896 18.8243 35.0285 18.8243 34.4674C18.8243 33.9164 18.7963 33.3638 18.88 32.8198C18.911 32.6183 18.8306 31.6994 19.1665 32.1194C19.6323 32.7016 20.3842 33.046 21.1165 33.3172C22.7525 33.9231 24.5008 34.2956 26.1906 34.7181C26.3594 34.7603 27.8121 35.2615 27.9059 35.1678C27.9782 35.0955 28.0032 34.7107 28.0292 34.6067C28.147 34.1357 28.2563 33.6546 28.3516 33.1779C28.68 31.5362 28.9247 29.9452 28.9247 28.275C28.9247 27.6005 28.853 26.8625 28.853 26.2294" stroke="black" stroke-width="3" stroke-linecap="round"/>
<path d="M11.3743 30.0976C12.7002 29.2397 14.1133 28.4646 15.4933 27.6979C15.876 27.4853 16.268 27.2858 16.6912 27.1447C17.1294 26.9987 17.5858 26.7653 18.0204 26.5876C18.3718 26.4438 18.7148 26.3272 19.071 26.2254C19.1861 26.1925 19.3314 26.0632 19.4531 26.0145C19.8189 25.8682 20.1961 25.8347 20.5793 25.7638C21.0085 25.6843 21.4681 25.728 21.9046 25.728C22.4192 25.728 21.627 25.6563 21.4748 25.6563C20.3411 25.6563 19.2122 25.8712 18.0761 25.8712C17.6622 25.8712 17.2483 25.8712 16.8344 25.8712C16.6988 25.8712 16.3222 25.94 16.2136 25.8314C15.9728 25.5906 16.4565 25.5174 16.6036 25.6563C17.1683 26.1897 17.6916 27.1672 17.4593 27.9805C17.4344 28.0674 16.8912 28.2341 16.7827 28.3426C16.2916 28.8337 15.909 29.4416 15.3699 29.8827C14.8618 30.2984 14.4318 30.6707 13.7741 30.6707C13.3211 30.6707 12.9066 30.7424 12.4488 30.7424C11.6055 30.7424 10.8778 30.1693 10.0849 30.1693C9.22261 30.1693 8.40404 30.1207 7.57772 30.1693C7.41399 30.1789 7.16447 30.2574 7.00464 30.3285C6.81818 30.4113 6.57482 30.3995 6.39177 30.4518C6.29546 30.4794 6.17306 30.45 6.0734 30.4558C5.98671 30.4609 5.91693 30.5742 5.82268 30.5951C5.66033 30.6312 5.50411 30.7405 5.35706 30.814" stroke="white" stroke-width="3" stroke-linecap="round"/>
<path d="M18.2512 24.0804C19.14 24.0804 20.0288 24.0804 20.9176 24.0804C21.806 24.0804 22.734 24.2751 23.6238 24.148C23.7381 24.1317 23.9953 24.0989 24.0695 24.0247C24.1594 23.9348 24.1969 23.8423 24.1969 24.0087C24.1969 24.2963 24.0536 24.5423 24.0536 24.8325C24.0536 25.131 24.0536 25.4295 24.0536 25.728C24.0536 25.8915 23.9984 26.5197 24.1809 26.0861C24.3952 25.5772 24.4182 25.0422 24.6983 24.542C25.0465 23.9203 25.1424 23.1954 25.4704 22.5761C25.6081 22.3159 25.6295 23.1628 25.6295 23.2566C25.6295 23.5431 25.6295 23.8297 25.6295 24.1162C25.6295 24.6426 25.7002 25.2195 25.3032 25.6165C25.1097 25.81 24.7799 25.6725 24.5391 25.7439C24.1337 25.864 23.6889 25.8712 23.2656 25.8712" stroke="white" stroke-width="3" stroke-linecap="round"/>
<path d="M25.5579 26.516C25.7966 26.516 26.0354 26.516 26.2742 26.516C26.5294 26.516 26.1809 26.5426 26.1309 26.4801C26.0472 26.3755 25.9694 25.7569 26.0951 25.6564C26.2441 25.5371 26.3963 25.0588 26.4175 24.8684C26.4364 24.6977 26.5607 24.5857 26.5607 24.4028C26.5607 24.2475 26.5607 24.0923 26.5607 23.9371" stroke="white" stroke-width="3" stroke-linecap="round"/>
<path d="M27.7069 23.5789C27.9825 23.5252 28.2189 23.4378 28.463 23.368C28.524 23.3506 28.6457 23.3963 28.6938 23.3481C28.757 23.285 28.583 23.3222 28.5506 23.3481C28.4842 23.4012 28.126 23.4102 28.0292 23.4317C27.8854 23.4636 27.7886 23.5789 27.6353 23.5789" stroke="white" stroke-width="3" stroke-linecap="round"/>
<path d="M3.13635 32.4616C3.50557 32.3895 3.91166 32.4237 4.12331 32.1591C4.19319 32.0718 4.20804 31.9458 4.2825 31.8527C4.3781 31.7332 4.55532 31.6273 4.67649 31.5303C4.77973 31.4477 4.89293 31.3259 4.99884 31.2597C5.10227 31.1951 5.27944 31.1617 5.35701 31.0647C5.50976 30.8738 5.95939 30.8986 6.07335 30.6707" stroke="white" stroke-width="3" stroke-linecap="round"/>
<path d="M11.3743 30.8856C11.5986 30.8124 11.9299 30.7642 12.0907 30.5633C12.1329 30.5105 12.3862 30.5274 12.3056 30.5274" stroke="white" stroke-width="3" stroke-linecap="round"/>
<path d="M10.0849 30.6707C10.5139 30.5033 10.982 30.4312 11.3743 30.2569C11.5529 30.1775 11.3062 30.1693 11.1594 30.1693C10.9408 30.1693 10.7585 30.0977 10.5505 30.0977C10.1322 30.0977 8.80951 30.2978 8.58057 29.9544" stroke="white" stroke-width="3" stroke-linecap="round"/>
<path d="M12.8107 31.3497C12.5305 31.343 12.2612 31.1864 12.0019 31.0938C11.8647 31.0448 11.7254 30.976 11.5939 30.9103C11.536 30.8813 11.4848 30.8318 11.4201 30.8282C11.2595 30.8193 11.1102 30.7109 10.9469 30.6979C10.807 30.6867 10.6555 30.5968 10.5184 30.5663C10.3798 30.5355 10.2676 30.4371 10.1273 30.4371C9.96259 30.4371 9.80184 30.3593 9.63845 30.3502C9.4709 30.3409 9.30926 30.3285 9.13871 30.3285C9.06867 30.3285 8.93001 30.391 8.87315 30.4323C8.83199 30.4622 8.70232 30.4589 8.64984 30.4589C8.4905 30.4589 8.33117 30.4589 8.17183 30.4589C8.09426 30.4589 8.02351 30.524 7.95456 30.524C7.9124 30.524 7.78782 30.5662 7.75297 30.5941C7.6476 30.6783 7.38491 30.6327 7.25323 30.6327C7.16508 30.6327 7.07569 30.628 6.98767 30.6327C6.94218 30.6351 6.77705 30.6515 6.74867 30.687C6.71142 30.7336 6.57731 30.7196 6.52173 30.7196C6.36964 30.7196 6.21755 30.7196 6.06545 30.7196C5.95681 30.7196 5.63764 30.667 5.55847 30.7461C5.51386 30.7908 5.4871 30.8464 5.44018 30.8886C5.42489 30.9023 5.34242 30.9369 5.41241 30.9369C5.43084 30.9369 5.51191 30.9445 5.48846 30.932C5.22755 30.7939 5.06727 30.611 4.76058 30.611C4.51938 30.611 4.4713 30.8944 4.33689 31.0672C4.28022 31.1401 4.21692 31.2895 4.13048 31.328C4.11948 31.3329 4.05842 31.3875 4.07616 31.4052C4.09977 31.4288 4.12585 31.3605 4.15221 31.34C4.21338 31.2925 4.277 31.2373 4.34655 31.1976C4.38776 31.174 4.48483 31.1105 4.51072 31.0781C4.52801 31.0565 4.56833 31.0651 4.5928 31.0407C4.61243 31.021 4.63024 30.9977 4.65195 30.9803C4.72301 30.9235 4.78357 30.8429 4.85353 30.7799C4.88437 30.7522 4.91791 30.7314 4.95372 30.7099C4.98444 30.6915 4.89637 30.7544 4.86319 30.7679C4.7351 30.8201 4.65133 30.9529 4.53244 31.0189C4.44877 31.0654 4.23406 31.237 4.20532 31.3376C4.16759 31.4697 4.02541 31.5762 3.98804 31.707C3.9773 31.7446 3.87581 31.8489 3.84802 31.8712C3.79957 31.9099 3.7776 31.9621 3.73335 32.0064C3.56531 32.1744 3.4026 32.4437 3.4026 32.6859C3.4026 32.7119 3.42734 32.9168 3.44485 32.838C3.46585 32.7435 3.43233 32.6418 3.50641 32.5592C3.56082 32.4985 3.57062 32.6065 3.56556 32.6328C3.53427 32.7955 3.45108 32.9643 3.37001 33.1084C3.32421 33.1899 3.27077 33.3098 3.21188 33.3752C3.15914 33.4338 3.14626 33.518 3.11531 33.5876C3.0845 33.657 2.9858 33.7967 3.07669 33.6577C3.13441 33.5694 3.17312 33.4731 3.22757 33.3812C3.29032 33.2753 3.36498 33.173 3.42433 33.0662C3.48282 32.9609 3.57823 32.7835 3.6742 32.7089C3.70139 32.6877 3.61709 32.8278 3.59815 32.861C3.54905 32.9469 3.50518 33.0336 3.45692 33.1205C3.42079 33.1855 3.3741 33.2651 3.35794 33.3378C3.34996 33.3737 3.27224 33.5279 3.27224 33.4356" stroke="white" stroke-width="3" stroke-linecap="round"/>
<path d="M29.4952 22.5354C29.64 22.5637 29.7906 22.5415 29.9306 22.5815C29.958 22.5893 29.9755 22.6332 30.0003 22.6474C30.0408 22.6705 30.0386 22.6182 30.0774 22.5976C30.1309 22.5693 30.3258 22.4907 30.1782 22.4907C30.1036 22.4907 29.9835 22.5264 29.9207 22.5578" stroke="white" stroke-width="3" stroke-linecap="round"/>
<path d="M30.9283 22.4682C31.0804 22.3494 31.2272 22.252 31.4159 22.1821C31.4301 22.1769 31.6161 22.0925 31.5328 22.0876C31.4695 22.0839 31.4048 22.0876 31.3413 22.0876C31.2221 22.0876 31.0628 22.1483 30.9507 22.1884C30.7748 22.2512 30.5507 22.3205 30.3635 22.3339C30.1351 22.3502 29.8947 22.4363 29.6794 22.508C29.5138 22.5632 29.3225 22.5966 29.1706 22.681C29.0416 22.7526 28.8716 22.785 28.734 22.8539C28.6355 22.9031 28.4543 23.0092 28.3981 23.1076C28.3267 23.2325 28.1694 23.2691 28.0846 23.3751C28.0506 23.4177 27.9434 23.4764 27.8943 23.4982C27.8278 23.5278 27.7512 23.6244 27.6816 23.6326C27.5758 23.645 27.3954 23.7569 27.3121 23.8217C27.2254 23.8891 27.1143 23.9187 27.0372 23.9958C26.9524 24.0806 26.8719 24.1647 26.8133 24.2819C26.7498 24.4088 26.6612 24.5289 26.6068 24.6514C26.488 24.9186 26.3605 25.1632 26.3605 25.4575C26.3605 25.5128 26.3157 25.5761 26.3157 25.6366C26.3157 25.6532 26.2933 25.7797 26.2933 25.7261C26.2933 25.6548 26.3651 25.5076 26.4103 25.4512C26.4746 25.3708 26.5614 25.2727 26.6118 25.1776C26.6652 25.0767 26.7596 24.9657 26.7847 24.8529C26.8312 24.6437 27.019 24.4667 27.1168 24.2819C27.2134 24.0996 27.3746 23.9072 27.5199 23.7619C27.7174 23.5644 27.846 23.3069 28.0734 23.13C28.2028 23.0294 28.3388 22.9106 28.4653 22.8041C28.5441 22.7377 28.54 22.8437 28.515 22.8937C28.492 22.9398 28.4489 23.0187 28.4093 23.0504C28.1601 23.2498 27.9133 23.478 27.6866 23.7047C27.6153 23.776 27.547 23.8388 27.4689 23.9013C27.2949 24.0405 27.3923 23.8126 27.3457 23.7893" stroke="white" stroke-width="3" stroke-linecap="round"/>
<path d="M17.1065 37.5163C16.3173 38.1552 15.5784 38.8283 14.8615 39.5452C14.6088 39.798 14.3414 39.9497 14.2972 40.3256C14.2683 40.5718 13.9951 40.8199 13.9731 41.106C13.944 41.4838 13.7358 41.8524 13.6549 42.2165C13.6367 42.2983 14.8967 43.1269 15.1076 43.291C15.2973 43.4385 15.5268 43.6174 15.7499 43.6812C15.8353 43.7056 16.3147 44.1557 15.918 43.8913" stroke="black" stroke-width="3" stroke-linecap="round"/>
<path d="M22.401 50.2663C23.0921 50.6709 23.8281 51.0138 24.562 51.3228C24.9027 51.4662 25.3732 51.3292 25.6965 51.5089C26.0244 51.691 26.8932 51.7684 27.2633 51.779C28.0121 51.8004 28.7422 51.8564 29.4723 51.9891C29.8781 52.0629 30.3608 51.9951 30.7749 51.9951C31.3522 51.9951 31.9097 52.1895 32.4737 52.2112C32.9283 52.2287 33.1864 52.4294 33.5783 52.5414C33.9339 52.643 34.2425 53.0315 33.7463 52.5354" stroke="black" stroke-width="3" stroke-linecap="round"/>
<path d="M22.7252 58.8023C22.7252 61.6106 22.8332 57.0873 22.8332 60.9393C22.8332 61.2347 22.8641 61.5807 23.2114 61.2334C23.6673 60.7775 23.5378 62.205 23.5656 62.476C23.6408 63.2121 23.7189 63.9976 24.0218 64.6791C24.1919 65.0618 24.6555 64.2406 24.7241 64.1568C24.906 63.9345 25.0089 63.7411 24.9942 63.4485C24.9529 62.622 24.8862 61.8016 24.8862 60.9633C24.8862 60.5671 24.8862 59.3786 24.8862 59.7748C24.8862 59.9079 24.9942 60.5454 24.9942 60.1529C24.9942 59.6302 25.1362 60.647 25.2583 60.9033C26.1264 62.7246 26.7761 64.645 27.5754 66.4979C27.7663 66.9404 27.9939 67.3663 28.1757 67.8125C28.2016 67.876 28.523 68.3667 28.4278 68.0706C28.2202 67.4245 27.8027 66.8243 27.5394 66.1978C27.1771 65.3357 26.9102 64.4246 26.723 63.5085C26.6826 63.3106 26.218 61.7781 26.573 62.2119C26.9575 62.6818 27.316 63.1668 27.8035 63.5325C28.1268 63.775 28.4073 63.9686 28.83 63.8747C29.0729 63.8207 28.9474 63.3404 29.2082 63.3404C29.4461 63.3404 29.6869 63.5539 29.8805 63.6646C30.5239 64.0322 31.1484 64.4323 31.7954 64.7931C32.5671 65.2235 33.4206 65.737 34.2626 66.0177C34.8591 66.2165 33.4307 65.9934 33.2541 65.9276C32.2917 65.5695 31.4778 65.1313 30.6249 64.583C30.3249 64.3902 30.9468 64.6032 31.0451 64.661C31.5449 64.955 29.8013 65.3161 29.7004 65.3394C29.4866 65.3887 27.8681 65.9004 28.5839 65.5014C29.1644 65.1779 29.8008 64.9675 30.3848 64.643C30.7413 64.445 31.0609 64.2286 31.4773 64.2048C31.5759 64.1992 31.8522 64.0968 31.7534 64.0968C31.478 64.0968 31.1405 64.2811 30.883 64.3669C30.606 64.4593 30.3454 64.5683 30.0786 64.6851C29.9489 64.7418 29.5883 64.753 29.6884 64.8531C29.7861 64.9508 30.4066 64.7652 30.5048 64.7451C31.3528 64.5716 32.1434 64.2217 32.978 64.0007C33.8743 63.7635 35.0143 63.2324 35.9494 63.2324C36.8065 63.2324 32.5969 63.4725 33.3802 63.1243C34.0223 62.8389 34.8441 62.7901 35.5352 62.6681C36.5382 62.4911 35.5842 62.328 35.103 62.2119C34.8515 62.1512 33.8738 62.0691 33.8544 61.7197C33.8329 61.3321 34.2371 61.2346 34.5567 61.1854C35.1515 61.0939 34.9305 61.1794 34.4187 61.1794C34.1529 61.1794 32.8819 61.3574 32.8819 60.9633C32.8819 60.6217 35.166 60.391 33.9864 60.1229C33.8818 60.0991 32.7249 59.9612 32.7919 59.7267C32.8504 59.522 34.6601 59.6667 34.9349 59.6667C35.3091 59.6667 36.4316 59.6667 36.0574 59.6667C35.5149 59.6667 34.8083 59.3301 34.3106 59.1264C33.1951 58.6701 34.8673 58.6436 34.7668 58.5862C34.5008 58.4342 34.2209 58.3825 34.7428 58.3701C35.0686 58.3623 35.7626 58.374 36.0574 58.256C36.4277 58.1079 35.2849 58.0524 34.9109 57.9139C34.5627 57.7849 34.554 57.5684 34.3406 57.3976C34.2007 57.2857 33.4342 56.6348 33.4342 56.4792C33.4342 56.456 34.5571 56.6413 34.7188 56.6413C34.9628 56.6413 35.1654 56.7493 35.4211 56.7493C35.7005 56.7493 35.7985 56.9654 35.4751 56.9654C35.0209 56.9654 34.6422 56.8592 34.3466 56.4792C33.935 55.95 32.7158 55.964 32.1256 55.6688" stroke="white" stroke-width="3" stroke-linecap="round"/>
<path d="M37.9603 64.7451C37.9603 65.9297 37.9603 67.1142 37.9603 68.2988C37.9603 68.782 37.7613 69.1407 37.5221 68.5029C37.086 67.3399 36.8407 63.6131 36.7718 64.8532C36.7505 65.2365 36.6637 65.593 36.6637 65.9817C36.6637 66.4379 36.4981 65.6783 36.4476 65.5015C36.2058 64.655 34.2068 65.0652 33.7463 65.5015C33.5954 65.6445 33.3612 65.9356 33.1461 65.7596C32.7288 65.4182 32.5161 64.7868 32.2096 64.3489C31.6847 63.5991 31.1232 62.8848 30.4448 62.266C29.1892 61.1205 27.558 60.394 25.8826 60.1229C25.6211 60.0806 24.5004 59.7763 24.2619 60.0149C24.1302 60.1466 24.2379 60.7594 24.2379 60.5732C24.2379 60.1398 24.1895 59.7277 24.1238 59.3006C23.9896 58.428 23.3645 59.6864 23.2714 59.1745C23.1877 58.714 23.0736 58.1599 23.0493 57.7218C23.0228 57.2448 22.4025 56.9621 22.1849 57.4517C22.0161 57.8315 21.8005 58.3119 21.7527 58.6943C21.7105 59.0317 21.3521 58.5588 21.3265 58.4181C21.2777 58.1496 21.3205 57.8337 21.3205 57.5597C21.3205 57.1522 21.3747 56.6355 21.0804 56.3412C20.9284 56.1892 20.8122 55.9924 20.6242 55.885C20.5028 55.8156 20.2132 55.7164 20.1319 55.6148C19.9084 55.3354 19.1595 57.2305 19.1595 57.5057" stroke="white" stroke-width="3" stroke-linecap="round"/>
<path d="M10.0833 47.457C10.413 47.2072 11.0382 46.9167 10.3534 46.9167C9.85209 46.9167 10.2188 46.6516 10.4674 46.5386C10.8724 46.3545 11.5069 46.2316 11.8361 45.9683C11.8979 45.9188 12.4028 45.6521 11.9741 45.8903C11.6217 46.086 10.8632 46.0234 10.4614 46.0583C9.54523 46.138 8.3591 46.3595 7.43602 46.1544C6.90194 46.0357 7.29421 44.8824 7.14188 44.5396C7.01024 44.2434 7.05784 44.0213 7.05784 44.4856C7.05784 44.7542 7.16459 45.1322 7.33397 45.35C7.56077 45.6416 7.25103 45.2094 7.1899 45.1279C6.84383 44.6665 6.52255 44.213 6.30148 43.6752C5.86276 42.6081 5.41844 41.404 5.32903 40.2416C5.29323 39.7763 5.13676 40.794 5.30501 40.6258C5.58262 40.3482 5.73759 39.7103 5.92931 39.3652C6.12941 39.005 6.33334 38.6412 6.51758 38.2727C6.54677 38.2143 6.72168 37.7122 6.72168 38.0446C6.72168 39.1648 5.9464 40.4268 5.46709 41.3941C4.8319 42.6761 4.13827 43.9658 3.60622 45.296C3.50917 45.5386 3.34562 46.3747 3.06596 46.5146C2.97109 46.562 3.05856 46.3025 3.05996 46.1964C3.06522 45.7966 3.09621 45.416 3.21603 45.0319C3.46531 44.2327 3.73868 43.3669 4.18849 42.6547C4.40626 42.3099 4.64103 41.3687 5.11292 41.6463C5.32628 41.7718 5.65318 42.1827 5.65318 42.4326C5.65318 42.7839 5.38341 43.0419 5.60516 42.7568C5.98289 42.2711 6.19343 42.5505 6.19343 43.0269C6.19343 43.5294 5.86928 44.005 5.86928 44.4856C5.86928 44.7214 5.93059 45.0303 5.78524 45.2119C5.70461 45.3127 5.76123 45.42 5.76123 45.1639C5.76123 44.4462 5.72673 43.7185 5.78524 43.0029C5.9833 40.5804 7.00806 38.2851 7.43602 35.9076C7.47071 35.7148 8.04764 33.7126 7.26794 34.3949C6.79173 34.8115 6.31315 35.4493 6.00134 36.0036C5.98994 36.0239 5.97733 35.4313 5.97733 35.2833C5.97733 34.8796 6.00854 34.4989 6.10939 34.1067C6.11848 34.0714 6.22325 33.6888 6.27747 33.7586C6.4291 33.9535 5.83407 35.0035 5.76123 35.1632C5.16868 36.4623 4.35329 37.6713 3.84033 39.005C3.29224 40.4301 5.11292 33.0782 5.11292 34.605C5.11292 34.7996 4.97378 35.7962 5.35304 35.5714C5.8098 35.3007 6.08652 34.9005 6.43354 34.5149C6.67123 34.2508 6.89975 33.9113 7.11787 33.6205C7.50054 33.1103 8.01507 31.9525 8.62457 31.6816C9.04425 31.4951 8.54242 32.9738 8.45649 33.1403C8.12441 33.7837 7.08354 35.682 7.34597 35.0071C7.81159 33.8098 8.62896 32.8727 9.30289 31.8136C9.65207 31.2649 9.75911 31.321 9.75911 31.9217C9.75911 32.3994 9.83754 32.7006 9.92118 33.1523C10.0932 34.081 9.97521 35.1068 9.97521 36.0516C9.97521 36.3421 9.97264 35.9143 9.97521 35.8475C9.99203 35.4101 10.2251 35.1797 10.4074 34.8151C10.6171 34.3957 10.7316 34.2765 10.7316 34.8151C10.7316 34.959 10.6235 35.5372 10.6235 35.1392C10.6235 34.8165 10.6781 34.457 10.8156 34.1668C11.0127 33.7507 11.596 31.8987 11.596 33.2483C11.596 33.7807 11.5221 34.2979 11.4039 34.8151C11.2546 35.4684 11.478 34.9137 11.7881 34.707C12.3193 34.3529 13.5736 34.1332 13.763 33.4704C13.8613 33.1264 14.0446 33.2235 13.9671 33.5725C13.8846 33.9435 13.4515 34.2196 13.2708 34.5449C12.9987 35.0346 12.6051 35.5257 12.5684 36.1117C12.5666 36.1408 12.6892 35.799 12.8386 35.6795C13.1704 35.414 13.549 35.2049 13.871 34.9231C14.176 34.6563 15.5928 33.6008 14.8615 34.5149C14.6092 34.8303 14.4899 35.259 14.0811 35.4634" stroke="white" stroke-width="3" stroke-linecap="round"/>
<path d="M8.46246 47.5651C8.76591 47.6835 8.95146 47.8068 9.21882 47.6731" stroke="white" stroke-width="3" stroke-linecap="round"/>
<path d="M16.6962 34.0648C16.5181 34.0995 16.3548 34.146 16.2119 34.2572C16.1446 34.3095 16.0834 34.3615 16.0211 34.417C15.9157 34.5107 16.0012 34.4195 16.0374 34.3729C16.0744 34.3254 16.1811 34.2702 16.2412 34.2702C16.3085 34.2702 16.345 34.2149 16.4027 34.2115C16.5024 34.2056 16.7158 34.2193 16.7907 34.1593C16.8582 34.1054 16.8445 34.2687 16.8136 34.2996C16.7898 34.3233 16.7114 34.4063 16.6799 34.4153C16.5797 34.444 16.4388 34.5749 16.388 34.6665C16.2779 34.8647 16.0264 35.066 15.964 35.2845C15.8917 35.5375 15.6796 35.7143 15.5449 35.9432C15.4846 36.0458 15.3635 36.1269 15.2873 36.2221C15.2614 36.2544 14.9712 36.4714 15.0688 36.4993C15.1629 36.5262 15.3048 36.42 15.3167 36.3248C15.3225 36.2783 15.5142 36.1609 15.558 36.1259C15.761 35.9635 15.8489 35.7886 15.9624 35.5617" stroke="white" stroke-linecap="round"/>
<path d="M19.5015 38.556C19.2844 38.398 19.2278 38.3427 19.2278 38.0769C19.2278 37.9534 19.2053 37.7971 19.2836 37.6992C19.4376 37.5067 19.4943 37.2076 19.6485 37.0149C19.7277 36.9159 19.7912 36.8012 19.8868 36.7056C19.9906 36.6019 20.1647 36.4892 20.2417 36.366C20.3069 36.2616 20.4419 36.1779 20.5053 36.0669C20.5521 35.985 20.5735 35.7183 20.6193 35.6816C20.6814 35.6319 20.6468 35.3503 20.6421 35.271C20.6307 35.0765 20.5573 35.3969 20.5484 35.4282C20.4803 35.6662 20.2756 35.8678 20.0718 36.0263C19.9951 36.0861 19.8938 36.2065 19.831 36.2849C19.6994 36.4494 19.7797 36.2759 19.8437 36.1607C19.8879 36.0812 19.9929 35.9024 20.0034 35.8185C20.0118 35.7513 20.0903 35.5241 20.1403 35.4991" stroke="white" stroke-linecap="round"/>
<path d="M10.3766 48.1371C10.5512 48.1371 10.6673 48.1827 10.8329 48.1827C10.9303 48.1827 11.0441 48.0703 11.1269 48.094C11.2777 48.1371 11.0239 48.2945 11.0053 48.3094C10.8796 48.41 10.848 48.1861 10.9039 48.1143C11.1228 47.8327 11.6131 47.8005 11.8366 47.5212C11.8884 47.4565 12.2095 47.2806 12.2929 47.2702C12.4471 47.2509 12.6126 47.013 12.7491 46.9407C13.0685 46.7716 13.3053 46.5131 13.616 46.3577" stroke="white" stroke-linecap="round"/>
<path d="M18.0872 57.8551C18.0366 57.5895 17.9246 57.3863 17.9934 57.1454C18.0301 57.0168 17.957 57.5677 17.8236 57.4343C17.7387 57.3495 18.1526 56.5618 18.2469 56.4864C18.5172 56.2701 18.5493 55.7608 18.84 55.5282C19.0789 55.3371 19.24 54.9168 19.4103 54.6614" stroke="white" stroke-linecap="round"/>
<path d="M19.1366 54.7982C19.0136 54.925 18.9097 55.0486 18.8197 55.1835C18.7529 55.2838 18.8875 54.9504 18.9439 54.8439C19.1288 54.4947 19.0803 55.0881 18.9997 55.2291C18.8826 55.4341 18.6831 55.6144 18.5663 55.8248C18.5063 55.9328 18.2446 56.3495 18.1785 56.3495" stroke="white" stroke-linecap="round"/>
<path d="M33.0064 55.1176C33.1903 55.1176 33.5035 55.1669 33.3055 54.9123C33.2618 54.8562 33.2301 54.7781 33.2345 54.707C33.2375 54.66 33.3162 54.7575 33.3486 54.7755C33.4593 54.837 33.5629 54.8054 33.668 54.8895C33.7602 54.9633 33.7795 55.0916 33.853 55.1861C33.9198 55.272 34.0878 55.4197 34.1014 55.5283C34.1145 55.633 34.2979 55.6428 34.3751 55.6753C34.6391 55.7864 34.9599 55.775 35.1964 55.8933" stroke="white" stroke-linecap="round"/>
<path d="M44.1844 50.7377C44.1844 51.1972 43.7738 51.5289 43.7738 51.9923C43.7738 52.4607 43.6682 52.8396 43.4646 53.247C43.3808 53.4144 43.3259 53.5779 43.2288 53.7235C43.1834 53.7917 43.3054 53.576 43.3201 53.4954C43.3522 53.3187 43.4607 53.1616 43.4975 52.9961C43.5718 52.6616 43.865 52.3032 43.865 51.9695" stroke="white" stroke-linecap="round"/>
<path d="M44.0475 50.7377C44.0475 51.2796 43.8846 51.7105 43.7712 52.2205C43.6931 52.5719 43.6617 52.94 43.5811 53.2926C43.5423 53.4627 43.5326 54.2508 43.3632 54.2508" stroke="white" stroke-linecap="round"/>
<path d="M40.3063 48.4108C40.3063 48.8367 40.3063 49.2625 40.3063 49.6883C40.3063 50.0559 40.3283 50.4486 40.1796 50.7833C40.0591 51.0544 39.8601 51.255 39.7233 51.5133C39.6067 51.7336 39.3283 52.0608 39.0745 52.0608" stroke="white" stroke-linecap="round"/>
<path d="M44.4259 27.3417C44.2398 27.7905 43.9223 28.6115 43.6217 28.9872C43.3872 29.2803 43.2955 30.0276 43.034 30.2368C42.7686 30.4491 42.5492 31.3591 42.533 31.6843C42.5024 32.2964 42.4373 33.4376 42.1432 33.967C41.9453 34.3232 41.8357 35.1018 41.7597 35.5197C41.6553 36.0937 41.199 36.5297 40.9493 37.0291C40.7352 37.4574 40.3117 37.8107 40.2008 38.3096C40.0712 38.8928 40.0047 39.7012 39.9719 40.2582C39.9432 40.7463 37.5597 40.8549 37.1758 40.9263C36.2164 41.1048 35.3211 41.2604 34.3488 41.2604C33.9127 41.2604 33.1796 41.0574 33.1796 41.5944C33.1796 43.9287 33.1796 46.2629 33.1796 48.5971C33.1796 48.7493 33.362 49.3782 33.1796 49.3889C32.8761 49.4068 32.7297 49.2333 32.4558 49.1724C31.4993 48.9599 30.468 49.0549 29.4803 49.0549C27.9297 49.0549 26.4805 49.2776 24.9397 49.2776" stroke="black" stroke-width="3" stroke-linecap="round"/>
<path d="M54.336 42.0398C54.4318 42.6384 54.4474 43.2179 54.4474 43.8214C54.4474 44.1731 54.4474 42.9127 54.4474 42.7327C54.4474 42.4329 54.5275 41.2725 54.4226 42.2254C54.2471 43.8212 53.6812 45.3825 53.1978 46.9021C52.541 48.9672 51.8012 50.9998 51.1069 53.0511C50.6725 54.3345 50.4024 55.7469 49.7954 56.9607C49.7171 57.1174 49.7707 56.682 49.7707 56.639C49.7707 55.5904 49.819 54.5672 50.0181 53.5336C50.3286 51.9221 50.7681 50.2578 51.4162 48.7456C51.8014 47.8467 51.775 48.6533 51.775 49.1662C51.775 49.8985 51.7479 50.6367 51.775 51.3685C51.798 51.9894 53.5839 50.0399 53.6927 49.8962C54.3855 48.981 54.9686 47.8656 55.7836 47.0506C56.2072 46.627 55.9228 48.6501 55.8702 48.8322C55.6767 49.502 55.4629 50.5025 54.9794 51.0344C54.6984 51.3435 54.7814 50.4271 54.7814 50.3168C54.7814 50.1492 54.6588 49.2085 54.8062 49.0796C54.875 49.0194 54.7865 50.1761 54.7814 50.2179C54.6001 51.7161 54.1159 53.0954 53.6308 54.5172C53.5464 54.7646 52.8253 57.27 52.505 57.27C52.3066 57.27 52.5814 55.1657 52.5854 55.1358C53.0195 51.9016 54.0534 48.772 54.9299 45.6401C56.1251 41.3697 57.328 37.0011 57.9487 32.5999C58.0487 31.891 58.6021 30.347 57.5528 31.542C56.1446 33.1458 54.9333 34.928 53.7917 36.726C53.4046 37.3356 52.9884 37.9145 52.6782 38.5694C52.5591 38.8207 52.4846 39.2022 52.2823 39.4046C52.1799 39.5069 52.342 38.6473 52.3503 38.6189C52.5614 37.8934 52.8898 37.1877 53.2782 36.5404C53.3728 36.3827 54.4068 34.6873 54.7134 34.9939C55.084 35.3645 54.8802 37.097 54.868 37.524C54.8159 39.3498 54.3707 41.0865 53.8473 42.8255C53.3511 44.4743 52.8319 46.2605 52.0596 47.8053C51.8392 48.246 51.8863 47.6105 51.8863 47.4527C51.8863 46.3596 52.0734 45.3383 52.3874 44.2916C52.637 43.4597 52.961 42.6532 53.2164 41.8233C53.3448 41.4059 53.3975 40.9364 53.6061 40.549C53.8756 40.0485 53.123 41.5892 53.0555 41.6996C52.5924 42.4574 52.1479 43.7605 51.3976 44.2606C51.202 44.3911 51.2584 41.3071 51.2801 40.9696C51.4093 38.9573 51.7725 36.9628 52.0224 34.9629C52.0255 34.9386 52.1513 34.2881 52.0843 34.2948C51.9096 34.3123 51.647 34.8925 51.577 35.0248C51.505 35.1612 50.8312 36.1732 50.7976 36.0641C50.6749 35.6652 50.7728 35.1104 50.7728 34.6908C50.7728 34.0946 50.6378 35.8857 50.4388 36.4476C50.1975 37.129 50.0391 37.8456 49.6841 38.4766C49.1069 39.5027 50.1333 36.1552 50.5378 35.0495C50.6504 34.7416 51.0604 33.1542 51.4409 33.1319C51.8529 33.1076 51.073 34.8057 51.0203 34.9135C50.7235 35.5209 50.5122 36.3648 50.08 36.893C50.0179 36.9689 50.3498 34.879 50.4388 34.5794C50.9049 33.0108 51.522 31.4666 51.9111 29.878C51.9427 29.7487 52.1646 29.33 52.0843 29.7048C52.0061 30.0695 51.7474 30.3596 51.577 30.6822C51.3954 31.0259 51.1549 31.505 50.8595 31.7709C50.6461 31.9629 50.5933 31.3466 50.5254 31.2637C50.1299 30.7803 49.6205 32.0572 49.381 32.2967C49.1068 32.5709 49.214 32.0348 49.214 31.8451C49.214 31.2905 49.214 30.7358 49.214 30.1811C49.214 29.888 49.3253 29.0157 49.3253 29.3088C49.3253 30.0012 49.0687 30.778 48.7686 31.3997C48.6784 31.5865 48.4345 32.5375 48.4345 32.1173C48.4345 31.535 48.547 30.9398 48.8242 30.4162C49.1257 29.8466 49.3253 29.2602 49.3253 28.6222C49.3253 27.8418 49.0492 26.9049 48.2613 26.6798C47.7001 26.5194 47.7703 26.7394 47.6489 27.286C47.5946 27.5302 47.3448 28.3 47.2097 28.2325" stroke="#FFFAFA" stroke-width="3" stroke-linecap="round"/>
<path d="M47.321 28.6779C47.321 30.5478 47.0851 32.7228 48.5211 34.1587C48.9591 34.5968 49.382 35.0694 49.8202 35.5197C50.5659 36.2861 51.8863 37.5289 51.8863 38.6993" stroke="#FFFAFA" stroke-width="3" stroke-linecap="round"/>
<path d="M50.4388 50.3911C50.4388 49.723 50.4388 49.0549 50.4388 48.3868C50.4388 47.6391 49.7339 48.6447 49.5232 48.8569C48.4279 49.9603 47.3401 51.0867 46.3188 52.2593C46.2758 52.3087 45.5849 53.0624 45.5641 53.0387C45.422 52.8763 46.0557 51.9324 46.1209 51.8139C46.5431 51.0463 46.8526 50.219 47.2962 49.4632C47.3215 49.4201 47.6553 48.8819 47.7416 48.9683C47.8902 49.1168 47.6243 49.5984 47.8901 49.0858C48.2856 48.3231 48.7112 47.588 49.2139 46.8897C49.4989 46.4939 50.2344 46.1195 49.6222 46.8464C48.591 48.071 47.1193 49.3653 45.7435 50.1746C45.2219 50.4814 44.3996 51.2695 43.764 51.2695C43.2321 51.2695 43.7995 50.2755 43.931 50.1189C44.2524 49.7363 44.7007 49.1912 45.1435 48.9497C45.4509 48.782 45.0323 48.9435 44.927 48.9435C44.3753 48.9435 45.0271 46.5521 45.1187 46.2959C45.3515 45.645 45.7094 45.0604 45.9786 44.4277C46.1676 43.9836 46.2859 43.505 46.5415 43.0915C46.9318 42.4601 46.7983 42.9254 46.4921 43.2894C45.7522 44.1689 45.0007 45.0397 44.2527 45.9123C44.1117 46.0768 43.4685 46.6718 43.5351 46.6052C43.804 46.3363 44.1568 46.0543 44.562 46.1845C45.8526 46.5993 46.9712 47.2733 48.3664 47.2733C48.574 47.2733 48.9912 47.2773 48.9912 47.5516C48.9912 48.0787 48.1577 48.2573 47.7726 48.3806C46.4834 48.7931 44.7934 49.2423 43.4237 49.1662C42.9359 49.1391 43.6635 48.2166 43.7331 48.1393C43.8879 47.9672 43.6968 48.105 43.6217 48.3002C43.5097 48.5914 43.2459 48.8309 43.0897 49.1044C42.9878 49.2827 42.9783 48.7335 42.9783 48.6651C42.9783 48.3269 42.945 48.5991 42.8175 48.3806C42.6488 48.0913 42.6279 47.522 42.5391 47.2114C42.5 47.0746 42.5329 46.6423 42.5329 46.7846C42.5329 46.9581 42.4236 47.2328 42.3597 47.397C42.0946 48.0788 41.7353 48.6695 41.4318 49.3271C41.1396 49.9603 40.9973 50.6555 40.7514 51.3066C40.4115 52.2061 40.4173 53.3343 40.4173 54.2883C40.4173 55.116 40.7281 52.6527 41.0297 51.8819C41.171 51.521 41.1611 51.1452 41.3019 50.7932C41.3908 50.5711 41.3081 51.2715 41.3081 51.5107C41.3081 51.8922 41.3081 52.2737 41.3081 52.6552C41.3081 52.8462 41.3947 52.283 41.4442 52.0984C41.6772 51.2292 41.8879 50.3526 42.137 49.4879C42.4504 48.4004 42.8907 47.3341 43.065 46.2093C43.1006 45.9791 43.3468 45.4572 43.0897 45.8505C42.7683 46.342 42.5329 46.4514 42.5329 47.0506C42.5329 48.7482 42.6991 50.4106 42.9783 52.0861C43.0149 52.3055 43.5245 55.8423 43.1392 55.9524C42.6916 56.0803 41.9552 55.7829 41.7102 55.4018C41.5749 55.1913 41.3754 53.9983 41.0854 54.2883C40.9059 54.4678 40.0833 55.595 40.0833 55.4637C40.0833 55.178 39.9986 54.7437 40.1946 54.511C40.4198 54.2435 40.4173 54.3467 40.4173 54.678C40.4173 54.7505 40.2462 55.0536 40.2008 54.8945C40.1235 54.6239 40.1946 54.2408 40.1946 53.9604C40.1946 53.4591 39.6758 53.3249 39.4152 53.781C39.3367 53.9183 39.1925 54.0133 39.1925 53.7872C39.1925 53.3968 38.9192 53.985 38.8584 54.0718C38.7198 54.2698 37.7635 56.1135 37.7449 55.6492C37.7298 55.2707 37.7659 54.8892 37.7449 54.511C37.7105 53.8925 37.0594 55.397 36.9655 55.5379C36.4943 56.2446 36.6314 55.6129 36.6314 55.0678C36.6314 54.678 36.6314 54.2883 36.6314 53.8986C36.6314 53.3594 36.8828 53.4802 36.4644 53.8986C36.1504 54.2126 35.8879 54.177 35.4622 54.177C34.8742 54.177 35.0319 53.7168 35.3014 53.3295C36.0795 52.211 37.0144 51.3386 38.1656 50.6138C38.9525 50.1183 39.7492 50.7186 39.7492 51.5602C39.7492 52.3693 37.9566 53.1952 37.3799 53.5522C36.7871 53.9192 36.0298 54.511 35.2952 54.511C34.8805 54.511 33.3559 54.3842 34.0951 53.645C34.3158 53.4242 34.4945 53.124 34.6519 52.8408C34.741 52.6803 34.9188 52.4996 35.0478 52.3706C35.2295 52.1889 35.186 52.5249 35.023 52.6181C34.8535 52.7149 34.7857 52.7294 34.5714 52.7294C34.3834 52.7294 34.382 52.9028 34.2312 52.9459C33.9691 53.0208 33.5405 53.2715 33.2909 53.2862C32.479 53.3339 31.6484 53.2862 30.835 53.2862C29.859 53.2862 28.8804 53.3975 27.8905 53.3975C27.377 53.3975 26.1949 53.3995 25.8057 53.0882C25.3277 52.7058 24.2981 53.3749 23.8262 52.7851C23.7226 52.6556 23.4746 52.7642 23.3313 52.7232C23.1783 52.6795 23.2002 52.4312 23.0962 52.4015C22.9088 52.348 22.5874 52.0334 22.49 51.8386" stroke="#FFFAFA" stroke-width="3" stroke-linecap="round"/>
<path d="M23.8262 52.3954C24.9694 52.1723 25.9988 52.6181 27.1667 52.6181C28.1986 52.6181 29.1838 52.7294 30.2288 52.7294C31.1274 52.7294 31.9937 52.1727 32.9012 52.1727C33.4143 52.1727 33.8385 52.1767 34.2931 51.9747C34.7641 51.7654 35.8309 52.0264 34.9611 51.5046" stroke="#FFFAFA" stroke-width="3" stroke-linecap="round"/>
<path d="M36.2974 49.2776C36.2801 49.2772 35.0802 49.1056 35.5736 49.5003C35.702 49.603 35.6293 50.013 35.6293 50.1684C35.6293 51.0753 35.313 50.7494 34.6024 51.1705C34.14 51.4445 33.7512 51.6333 33.2909 51.8634C32.809 52.1044 32.5017 52.5141 32.0661 52.8408" stroke="#FFFAFA" stroke-width="3" stroke-linecap="round"/>
<path d="M19.3722 30.2368C19.3064 30.3916 18.8937 31.0485 19.0444 30.5213C19.0715 30.4263 19.0849 30.6354 18.9268 30.7935C18.5199 31.2004 18.0241 31.4736 17.6154 31.8823C17.3255 32.1721 17.0798 32.4337 16.8978 32.7978C16.7129 33.1675 16.579 33.2644 16.7864 32.7978C17.4229 31.3658 19.2071 30.5708 20.7084 30.5708C21.0687 30.5708 21.3657 30.7529 21.7106 30.7935C22.2337 30.855 21.5592 31.0055 21.3765 31.0162C20.7891 31.0508 19.9998 31.5167 19.4836 31.8204C19.1806 31.9986 18.7632 32.2828 18.5062 32.4885C18.2906 32.661 17.867 32.5884 17.5906 32.7112C17.3206 32.8312 16.8838 32.9858 16.5885 33.0205C16.3387 33.0499 16.0652 33.3805 15.809 33.4659" stroke="#FFFAFA" stroke-width="3" stroke-linecap="round"/>
<path d="M33.5363 46.8199C33.5363 46.6143 33.7171 45.4363 33.3432 45.8798C32.3819 47.0198 31.5217 48.247 30.5228 49.3569C30.0089 49.9279 29.4762 50.7052 28.8486 51.1535C28.7771 51.2045 28.8819 49.8787 28.9259 49.7433C29.1491 49.0565 29.6032 48.4894 29.9433 47.863C30.3229 47.1636 30.2505 48.0411 30.1107 48.3782C29.9074 48.8685 29.6525 49.3589 29.4153 49.8334C29.3054 50.0532 29.2279 49.9931 29.2994 49.7562C29.5321 48.9844 29.9986 48.28 30.497 47.657C31.0283 46.9929 31.7189 46.1743 32.4932 45.7767C33.0844 45.4731 33.0727 45.7945 33.0727 46.2983C33.0727 46.7869 32.7483 48.0877 33.5621 47.8373C33.7601 47.7763 34.2173 47.5995 34.2318 47.9403C34.2863 49.2219 34.1479 50.3237 33.6523 51.5076C33.4293 52.0403 33.2435 52.6285 32.9568 53.1303C32.9321 53.1735 32.8409 51.7781 32.8409 51.5076C32.8409 51.3608 32.9419 50.656 32.8152 50.5546C32.6249 50.4024 32.0475 51.0763 31.9072 51.1728C31.7833 51.258 31.3568 51.6678 31.1667 51.5591C30.8754 51.3926 31.0943 49.3562 31.1281 49.0221C31.1805 48.5041 31.7415 47.0473 31.4887 47.5024C31.248 47.9356 30.8608 48.5338 30.4648 48.8418C30.0772 49.1433 30.3653 47.441 29.6213 48.185C29.2944 48.5119 29.0985 49.0016 28.81 49.3698C28.4765 49.7953 28.073 50.1969 27.6895 50.5804C27.0651 51.2048 26.9949 50.8795 26.7881 50.1554C26.7467 50.0107 26.7129 49.5201 26.6722 49.6016C26.6421 49.6616 26.3943 50.1951 26.3566 49.988C26.2642 49.4795 26.4118 48.816 26.582 48.3395C26.7184 47.9575 26.9297 47.4977 26.9297 48.185C26.9297 48.8539 26.4661 48.8261 26.4661 48.1528C26.4661 47.6661 25.445 49.1803 25.2813 49.344C24.7858 49.8396 24.4953 50.3669 23.8904 50.8508C23.7403 50.9709 23.5122 50.8364 23.3366 50.9925C23.252 51.0677 22.927 51.3581 22.9954 51.0504C23.107 50.5481 23.458 50.0559 23.7488 49.6274C24.4062 48.6585 25.1986 47.6219 25.9123 46.7297C26.8076 45.6106 27.7671 44.6222 28.9516 43.7806C30.1365 42.9387 31.5447 42.4596 32.7121 41.6106C33.1141 41.3183 34.4897 40.5625 34.6696 41.3723C34.9866 42.7987 33.9323 44.3137 33.4269 45.5771C33.3523 45.7637 33.516 45.1797 33.6136 45.004C33.9669 44.3682 34.4214 43.7829 34.8113 43.1688C35.5402 42.0209 36.3521 40.8884 36.9878 39.6852C37.3071 39.0807 37.3339 39.1723 36.7559 39.6852C35.6281 40.6862 34.4767 41.6685 33.3754 42.6988C33.1047 42.952 32.8489 43.2181 32.5447 43.4329C32.2471 43.6429 32.8924 42.6949 32.9182 42.6602C34.294 40.8088 35.8973 39.057 37.651 37.5539C38.255 37.0361 41.0179 34.6527 40.0013 37.1739C39.8297 37.5995 39.4805 38.0092 39.3574 38.4489C39.277 38.7361 40.4265 38.4747 40.613 38.4747C40.9008 38.4747 41.6098 38.297 41.3857 38.7451C41.0257 39.4652 40.4194 40.0492 39.8596 40.6125C38.7143 41.765 37.5333 42.8983 36.1893 43.8192C35.2672 44.451 34.224 45.1986 33.0985 45.4033C32.8114 45.4554 32.8251 45.2903 32.9633 45.0749C33.5524 44.1558 34.4353 43.4594 35.2363 42.7374C36.7372 41.3845 41.2419 37.3947 40.0013 38.9898C39.6525 39.4383 39.1829 39.7636 38.7392 40.1102C37.9384 40.7359 37.1926 41.4285 36.3825 42.042C35.1805 42.9521 33.9285 43.7947 32.7379 44.7207C30.8811 46.1649 35.8916 41.2297 37.4771 39.4921C37.8039 39.1339 38.1598 38.8222 38.501 38.4811C38.6221 38.3599 38.7117 38.1149 38.868 38.0368C39.6688 37.6364 37.7259 39.4215 37.0779 40.0394C36.5112 40.5797 35.9456 41.1531 35.3393 41.6492C35.1601 41.7959 35.1718 41.6176 35.2363 41.4753C35.6882 40.4781 36.5063 39.6337 37.2324 38.8353C39.3362 36.5223 41.5969 34.0918 44.161 32.2802C44.7058 31.8952 45.8404 30.606 46.5629 30.606C47.2357 30.606 45.5422 31.4829 45.0303 31.9196C44.5919 32.2935 44.1264 32.7231 43.7618 33.1688C43.5917 33.3767 43.7113 33.0165 43.7618 32.7695C43.7918 32.6227 44.0696 31.6491 44.2576 31.6491C44.5714 31.6491 43.7295 33.3316 43.6781 33.4135C43.2785 34.0499 42.6667 34.6204 42.3709 35.3195C42.2146 35.6889 42.1486 36.4761 41.8236 36.7361C41.5779 36.9326 41.6497 36.3197 41.6497 36.2016C41.6497 35.3924 41.6497 34.5832 41.6497 33.774C41.6497 33.4215 41.4853 31.4396 41.7141 31.398C42.1947 31.3106 42.7706 30.9126 43.1565 30.6446C43.9239 30.1117 44.7504 29.662 45.5648 29.2022C45.9508 28.9843 46.3543 28.7946 46.7496 28.5969C47.0992 28.4221 46.75 28.5942 46.6337 28.4488C46.5046 28.2874 45.9904 27.978 46.1958 27.7212C46.4287 27.4301 46.8046 27.142 46.9814 26.8326C47.0296 26.7483 47.1958 26.5836 47.2776 26.4784C47.432 26.2799 47.6883 25.9891 47.9086 25.8667C48.4912 25.543 48.2314 26.3028 47.9666 26.4205C47.5478 26.6066 47.0995 27.1508 46.7625 27.4572C46.3257 27.8542 45.943 28.2872 45.4746 28.6484C45.1062 28.9326 44.6079 29.0922 44.1417 29.1958C43.7629 29.28 43.4546 29.5743 43.0406 29.5499C42.5571 29.5215 43.3697 28.8908 43.5622 28.8481C44.0847 28.7319 44.5854 28.5436 45.1012 28.3651C45.7523 28.1397 44.9032 28.275 44.6053 28.275C43.7557 28.275 42.8259 28.3909 41.9395 28.3909C41.479 28.3909 41.5573 27.8979 41.7399 27.6697C41.783 27.6158 41.3269 27.083 41.302 26.8841C41.2468 26.4422 40.9357 25.1334 41.7656 25.0296C41.8596 25.0179 42.4236 24.4365 42.3387 24.7334C42.1927 25.2446 41.3382 25.7025 40.9543 25.9826C40.0167 26.6668 39.0746 27.8113 37.8249 27.8113C37.4389 27.8113 37.593 27.1286 37.593 26.8261C37.593 26.4169 37.2326 26.266 36.8976 26.0985C36.0384 25.6689 35.5717 25.2614 34.5795 25.2614C33.9095 25.2614 32.6438 25.0142 32.0296 25.2872C31.7742 25.4007 31.1328 25.8487 31.2247 25.4353C31.3392 24.92 32.5391 24.5063 32.9568 24.3084C33.2242 24.1818 33.157 24.0181 32.9568 24.2183C32.6642 24.5109 32.4837 24.7824 32.0746 24.9781C31.7305 25.1427 29.9944 25.9861 29.9433 26.4205C29.9154 26.6573 29.7115 27.5902 29.7115 27.3992C29.7115 26.6678 30.2702 25.571 30.7546 25.0296C31.0109 24.7431 30.8516 25.0252 30.7289 25.197C30.1709 25.9781 29.7339 26.8521 29.3058 27.7083C28.7583 28.8034 28.1932 29.945 27.8055 31.1082C27.7366 31.3147 27.3967 32.3863 27.3933 32.2802C27.3025 29.3743 27.102 32.1842 27.535 29.6401C27.6516 28.955 27.857 28.2051 27.857 27.5216C27.857 27.0507 27.7327 26.3856 27.9471 25.9569C28.015 25.821 27.9729 26.2191 27.9729 26.3046C27.9729 27.0086 27.9729 27.7126 27.9729 28.4166C27.9729 30.0865 27.9729 31.7564 27.9729 33.4263C27.9729 34.3407 27.7444 35.5889 27.9986 36.4785C28.1167 36.8917 28.1752 36.6301 28.2304 36.3884C28.3652 35.7986 28.4546 35.1774 28.6168 34.5983C28.6642 34.4288 29.2478 32.789 29.2478 33.3748C29.2478 33.6066 29.2478 33.8384 29.2478 34.0703C29.2478 35.0592 29.6192 32.1251 29.8853 31.1726C30.1168 30.3441 30.1612 29.3449 30.5743 28.5776C30.7662 28.2212 30.3187 29.1666 30.2652 29.2537C29.851 29.928 29.4058 30.4989 28.9259 31.1211C28.672 31.4501 28.4365 31.6832 28.4365 31.1082C28.4365 29.9881 28.4209 28.8669 28.4365 27.747C28.455 26.4126 28.8669 25.0596 29.1899 23.7675C29.2723 23.438 29.5665 22.4622 29.4732 22.7888C29.3768 23.1262 29.0881 23.5514 28.81 23.7546C28.4476 24.0195 28.1722 24.5316 27.9085 24.8879C27.0466 26.0527 26.4976 27.6881 25.951 29.0219C25.5089 30.1004 25.0089 31.2731 24.7468 32.4089C24.6684 32.7489 24.8432 32.7718 24.9851 33.0271C25.2958 33.5865 25.6068 34.37 26.0604 34.8236C26.1118 34.875 26.4532 35.2491 26.4532 35.2873C26.4532 35.4711 25.8054 35.2639 25.7449 35.2293C25.4744 35.0747 25.1317 35.0355 24.8434 34.9073C24.5336 34.7696 24.548 35.0811 24.6052 34.8236C24.8883 33.5495 23.9507 33.7225 22.9374 33.7225C21.9282 33.7225 20.9152 33.7225 19.9174 33.7225C19.6899 33.7225 19.4624 33.7225 19.2349 33.7225C18.7433 33.7225 20.2217 33.6866 20.7095 33.7483C21.8492 33.8926 22.5803 34.9256 23.3946 35.577C23.8624 35.9513 22.0667 35.9247 21.9458 35.9247C21.2801 35.9247 20.7147 35.8318 20.0848 35.635C19.8451 35.56 18.8497 35.2953 18.6103 35.4869C18.467 35.6015 18.3859 35.7803 18.3269 35.9505C18.1925 36.3389 17.9143 36.5081 17.7217 36.8584C17.5913 37.0955 16.8199 38.8868 16.524 38.8868C16.1641 38.8868 16.9534 37.2082 17.0198 37.0902C17.4728 36.2849 18.1655 35.5516 18.7004 34.7914C19.0723 34.2629 18.9812 34.2861 18.5266 34.6498C18.2298 34.8872 18.1572 35.3089 17.8891 35.577C17.1059 36.3602 16.1573 37.0769 15.5195 38.0046C15.0488 38.6893 14.8567 39.2994 14.5278 40.0394C14.1746 40.8342 13.7253 41.4955 13.3108 42.2416C13.2071 42.4283 13.7772 42.955 13.9225 43.1367C14.0302 43.2713 13.9038 43.3228 14.09 43.1367C14.2112 43.0154 14.3402 42.9828 14.4699 42.8791C14.7804 42.6307 16.2041 41.6773 15.9122 42.6988C15.8439 42.938 15.3752 43.157 15.1975 43.3169C14.927 43.5604 14.7271 43.7646 14.4119 43.9222" stroke="white" stroke-width="3" stroke-linecap="round"/>
<path d="M11.0507 38.9383C11.4672 39.0196 11.9807 38.9474 12.3771 39.0606C12.5679 39.1151 12.446 40.4729 12.4158 40.6769C12.3553 41.0848 12.3256 41.4694 12.3256 41.881C12.3256 42.0871 12.3954 41.4352 12.5574 41.3079C13.007 40.9547 13.6066 40.1292 14.1801 40.0973C14.7783 40.0641 15.4661 39.6874 16.0346 39.4663C16.5932 39.249 18.4305 39.389 17.8311 39.389C17.6756 39.389 17.808 37.4487 17.8247 37.3413C18.0193 36.0875 18.5811 34.8031 19.28 33.7483C20.373 32.0984 21.9762 30.6164 23.6393 29.5435C25.0792 28.6145 26.7948 28.3336 28.3206 27.5538C29.4393 26.982 30.369 26.1318 31.4436 25.4997C31.8025 25.2885 32.2993 24.7292 32.725 24.6819C33.1069 24.6394 33.1891 24.186 33.5943 24.0959C34.3944 23.9181 35.4008 23.6812 36.1378 24.1023C36.3658 24.2326 36.8336 24.8346 36.9041 25.0811C37.013 25.4623 37.3417 25.8858 37.6188 26.1629C37.9228 26.4668 38.5145 26.5291 38.7521 26.8261C38.7897 26.8731 39.285 26.9833 39.19 27.0901C38.991 27.314 38.7201 27.2518 38.6362 27" stroke="white" stroke-width="3" stroke-linecap="round"/>
<path d="M20.439 50.1811C21.5708 49.2969 22.4162 48.1464 23.4526 47.1676C24.4672 46.2094 25.4941 45.1662 26.3502 44.0961C26.6962 43.6636 27.1228 43.2541 27.4835 42.8533C27.6681 42.6483 27.7749 42.3172 27.9987 42.0935C28.1499 41.9423 28.4891 41.6228 28.546 41.4238C28.6788 40.959 29.3716 40.2479 29.7115 39.8655C30.2358 39.2756 30.7665 38.6947 31.3342 38.127" stroke="black" stroke-width="3" stroke-linecap="round"/>
<path d="M18.3527 44.0381C18.3527 42.0083 20.0054 40.2989 21.1989 38.7644C21.9536 37.794 22.5592 36.5254 23.5942 35.8088C24.5155 35.1711 25.3904 33.9652 26.4661 33.6066" stroke="black" stroke-width="3" stroke-linecap="round"/>
<path d="M27.1615 34.0703C27.1615 34.962 27.1832 35.4874 26.8138 36.2725C26.6505 36.6195 26.4391 36.8775 26.2601 37.1997C26.1326 37.4291 25.9613 37.6963 26.2923 37.4315C26.8306 37.0008 28.0084 37.1997 28.6683 37.1997C29.3638 37.1997 30.0592 37.1997 30.7546 37.1997" stroke="black" stroke-linecap="round"/>
<path d="M27.2775 33.8384C27.3667 34.2955 27.4775 34.7133 27.2775 35.1134" stroke="black" stroke-linecap="round"/>
<path d="M37.1295 23.0592C37.4801 23.8842 38.5221 25.1455 39.4476 25.1455" stroke="black" stroke-linecap="round"/>
<path d="M43.7361 24.2183C43.5714 24.6403 43.5043 25.5576 43.5043 25.5576C43.5043 25.5576 43.5123 25.2826 43.5043 25.1455C43.4904 24.909 43.3942 25.1627 43.3884 25.2614C43.3515 25.8878 42.1793 27.4359 42.3516 26.8326C42.4484 26.4938 43.0045 26.7682 42.635 26.7682C42.2997 26.7682 41.9564 26.8143 41.6498 26.678C41.1321 26.448 40.6131 26.3708 40.0915 26.0728C39.6277 25.8077 39.5548 25.2313 39.1578 24.9137C38.8411 24.6603 38.4244 24.3026 38.0825 23.9607C37.353 23.2312 37.7997 24.5384 37.9408 24.8557C38.1108 25.2383 39.1126 25.9318 39.5635 25.9568C40.7873 26.0248 41.8575 26.7682 43.0986 26.7682C43.3717 26.7682 43.7831 26.8451 44.0258 26.7102C44.3608 26.5241 44.8349 26.8766 44.4315 27.0901C44.0126 27.3119 42.9967 27.1159 42.5191 27.1159C41.4729 27.1159 40.2803 26.6372 39.3317 26.1629C38.7013 25.8477 38.1034 25.7843 37.709 25.094C37.3941 24.5429 37.0135 24.2361 37.0135 23.5228" stroke="black" stroke-linecap="round"/>
<path d="M44.4315 27C44.587 26.6016 44.8283 25.9323 45.2429 25.725" stroke="black" stroke-linecap="round"/>
</svg>

'''
'''--- src/pages/gamePage/assets/First.svg ---
<svg width="68" height="68" viewBox="0 0 68 68" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M20.0322 41.4586C18.412 45.2708 16.0498 47.0084 13.1376 49.3381C10.3709 51.5515 7.9598 50.173 4.9298 49.9948C2.90314 49.8756 0.930262 56.6847 2.66809 57.1812C4.07419 57.5829 6.09175 57.2177 7.55631 57.2177C10.2821 57.2177 8.26331 57.4591 7.0456 58.6768C5.31369 60.4088 6.3466 65.0972 9.19788 65.0972C11.1306 65.0972 16.7491 63.9601 16.7491 61.8141C16.7491 58.9676 14.3406 56.124 17.0774 53.9345C19.2762 52.1755 20.6366 48.0249 23.972 48.0249" stroke="black" stroke-width="3" stroke-linecap="round"/>
<path d="M6.89966 32.2659C12.7539 31.1236 17.4687 25.043 23.3153 25.043C29.0061 25.043 34.6969 25.043 40.3876 25.043C43.0659 25.043 45.0018 25.7306 47.2457 27.0128C48.1465 27.5276 49.226 31.987 50.0911 33.0684C50.928 34.1145 51.2801 37.7806 51.5868 39.1604C52.0712 41.3404 53.3983 43.983 53.5202 46.055C53.6671 48.5524 53.5202 51.104 53.5202 53.6062C53.5202 56.3795 51.3515 56.0635 49.7263 57.3636C46.3139 60.0936 42.953 61.5494 39.0744 63.2733C35.5857 64.8238 28.7405 65.5612 25.7959 62.6166C24.4023 61.223 23.4202 59.5974 21.6738 58.2391C20.8551 57.6024 19.6275 56.8962 18.7189 56.4151C17.1243 55.5709 17.6693 54.6584 16.7491 53.2779" stroke="black" stroke-width="3" stroke-linecap="round"/>
<path d="M6.24303 32.9225C6.24303 35.6906 5.10843 42.831 6.89966 45.0701C8.76738 47.4047 12.61 46.313 14.1226 49.3382" stroke="black" stroke-width="3" stroke-linecap="round"/>
<path d="M38.4178 23.0731C42.437 22.1688 42.4201 19.4772 45.3124 17.1635C46.0959 16.5367 46.9838 15.6488 47.6106 14.8653C48.0561 14.3083 50.0801 13.2237 49.5804 13.2237" stroke="black" stroke-width="3" stroke-linecap="round"/>
<path d="M44.3274 25.0429C48.6931 21.8679 50.6846 15.4878 56.4385 13.8438C57.9071 13.4242 55.2267 14.6024 57.1681 15.1571C58.7447 15.6075 60.389 14.9525 61.728 14.2086C63.0463 13.4762 64.5662 13.2673 65.6313 12.2022C66.4452 11.3883 66.3007 8.29369 65.0111 8.00712C63.5229 7.67641 62.2975 6.65739 60.7431 6.65739C58.0421 6.65739 59.1244 5.86703 60.5972 4.54159C64.1057 1.38389 60.6689 2.061 57.4599 2.061C54.9765 2.061 52.9704 3.59392 51.6962 6.00076C51.1296 7.07107 50.4321 8.54755 49.7263 9.42981C49.1407 10.1619 50.8937 11.6132 50.8937 12.567" stroke="black" stroke-width="3" stroke-linecap="round"/>
<path d="M34.3226 64.4922C34.3226 63.5057 34.3226 62.5192 34.3226 61.5327C34.3226 60.8595 34.4826 60.2728 34.4826 59.6131C34.4826 58.9496 34.5247 58.2156 34.5626 57.5334C34.5847 57.1349 34.6426 56.7192 34.6426 56.2981C34.6426 56.0206 34.7085 55.4654 34.8203 55.2139C34.9592 54.9014 34.9215 54.5038 35.0825 54.214C35.2484 53.9155 35.5666 54.0141 35.9223 54.0141C36.7305 54.0141 37.5742 54.174 38.4019 54.174C38.9485 54.174 39.495 54.174 40.0416 54.174C40.1632 54.174 40.396 54.2239 40.5171 54.2585C40.5526 54.2686 40.8194 53.82 40.8815 53.6764C41.0311 53.3298 41.3175 53.0151 41.4236 52.6543C41.4796 52.4638 41.5593 52.224 41.7213 52.0944C41.9458 51.9148 42.1612 51.7662 42.1612 51.4545" stroke="black" stroke-width="3" stroke-linecap="round"/>
<path d="M42.0813 51.3745C42.0813 50.9056 41.8847 49.6808 42.1213 49.2549C42.3761 48.7962 42.1879 48.1911 42.4412 47.7351C42.5888 47.4696 43.2026 47.7169 43.441 47.7574C44.1532 47.8783 44.8793 47.9478 45.5962 48.0195C46.2368 48.0836 46.8962 48.2424 47.4848 48.4106C48.6684 48.7488 49.7737 49.1089 51.0219 49.3926C51.6422 49.5336 52.2319 49.9047 52.7994 50.1569C53.0133 50.252 54.3308 50.7113 54.3991 50.5746" stroke="black" stroke-width="3" stroke-linecap="round"/>
<path d="M52.9593 54.5739C52.9593 55.2592 52.9902 55.7405 52.3194 56.0759C51.842 56.3146 51.2776 56.5311 50.8974 56.9113C50.6733 57.1354 49.95 57.6944 50.4797 57.1335C50.8175 56.7759 51.1312 56.402 51.4796 56.0537C51.8905 55.6427 52.451 55.1698 52.9593 54.8939C53.1031 54.8158 53.5934 54.6412 53.6792 54.5339C53.7464 54.4499 53.911 54.5526 53.9191 54.414C53.9268 54.2838 53.9268 54.1442 53.9191 54.014C53.9119 53.8919 53.5143 53.7955 53.4214 53.7119C53.09 53.4136 52.7365 53.2663 52.3194 53.2142C52.1091 53.1879 52.0726 52.9742 51.7995 52.9742C51.3279 52.9742 52.052 53.0542 52.1994 53.0542C52.5433 53.0542 52.8039 53.3566 53.1193 53.3742C53.3298 53.3858 53.6557 53.4089 53.8791 53.4586C54.0912 53.5057 54.4458 53.466 54.639 53.5519C54.9567 53.6931 55.0151 53.5532 55.2389 53.3742C55.8612 52.8763 56.4598 52.3177 57.0208 51.7567C57.2568 51.5206 57.2249 50.8476 57.0208 50.5924C56.865 50.3977 56.6386 50.4762 56.6386 50.2147C56.6386 50.0235 56.4787 49.4724 56.4787 49.6637C56.4787 49.8772 56.3987 50.2991 56.3987 50.2991C56.3987 50.2991 56.5382 50.1631 56.5542 50.2192C56.5871 50.3342 56.5586 50.4951 56.5586 50.6146C56.5586 50.8679 56.5586 51.1212 56.5586 51.3745C56.5586 51.6423 56.6131 52.1852 56.3187 51.6944" stroke="white" stroke-width="3" stroke-linecap="round"/>
<path d="M56.3987 55.3738C54.9251 56.7272 52.8717 57.5309 51.1463 58.511C50.2617 59.0135 49.3266 59.4234 48.4002 59.8352C48.2841 59.8868 48.3202 59.6626 48.3202 59.6086C48.3202 59.3352 48.4699 59.1031 48.6579 58.9109C49.0547 58.5051 49.6056 58.0917 50.1598 57.9333C51.0776 57.6711 49.9402 58.6836 49.6488 58.8132C49.2437 58.9932 49.762 57.538 49.6799 57.5334C49.279 57.5111 48.8602 57.7851 48.4979 57.9333C48.1177 58.0889 47.8827 58.1547 48.018 57.6134C48.0937 57.3106 48.3476 56.8176 48.6401 56.6713C48.7605 56.6111 49.04 56.514 49.04 56.698C49.04 57.1287 48.8644 57.4604 48.6357 57.8178C48.1338 58.602 47.3538 59.3172 46.6582 59.933C46.3658 60.1919 46.0151 60.6448 45.6806 60.8306C45.2845 61.0507 45.4407 59.8244 45.4407 59.6086C45.4407 58.8101 45.6834 58.0166 46.0406 57.3023C46.2711 56.8413 46.1606 57.487 46.1606 57.7023C46.1606 58.6123 45.6528 59.5535 45.2007 60.3285C44.9606 60.7401 44.7468 61.4316 44.3831 61.7549C44.3219 61.8092 44.3963 60.8965 44.4009 60.8128C44.4248 60.3705 44.6678 60.2288 44.3875 60.7017C44.0171 61.3268 43.4743 61.8194 42.9656 62.3281C42.9263 62.3674 42.6436 62.6598 42.579 62.5369C42.392 62.1817 42.5568 61.342 42.5612 60.955C42.5634 60.7576 42.801 60.1712 42.8012 60.1729C42.8223 60.511 42.8174 60.9331 42.6412 61.2305C42.5864 61.323 42.4812 61.8496 42.4812 61.5149C42.4812 61.112 42.5874 59.9188 42.4768 60.3062C42.1563 61.4279 41.5664 62.3373 40.8815 63.2746C40.6557 63.5836 40.7255 62.8564 40.7215 62.7502C40.7057 62.324 40.4907 63.1795 40.4771 63.2879C40.4656 63.38 40.3216 63.9232 40.3216 63.6034C40.3216 63.128 40.3216 62.6525 40.3216 62.177C40.3216 61.8818 40.1924 62.6738 40.1616 62.8125C40.084 63.1617 39.937 63.4124 39.9217 62.8924C39.8925 61.8993 39.5201 63.454 39.3618 63.6123C39.1278 63.8462 39.0503 63.7655 39.0418 63.4523C39.0299 63.0098 38.8818 62.5896 38.8818 62.1415C38.8818 61.6745 39.1377 63.4266 38.6819 63.5279C38.4386 63.5819 38.3468 62.9801 38.3264 62.8169C38.288 62.5097 38.3304 63.2294 38.3219 63.3724C38.3005 63.7378 38.1115 62.8711 38.0998 62.8036C38.0759 62.6655 38.002 61.7771 38.002 62.257C38.002 62.9986 37.9127 63.552 37.5843 64.1722C37.4052 64.5105 37.6311 64.9496 37.4599 65.292C37.3211 65.5695 37.6021 64.6824 37.6021 64.3722C37.6021 63.9338 37.6175 63.7315 37.3799 63.4346C37.3041 63.3399 37.3621 63.0126 37.3621 62.8924C37.3621 62.7638 37.2021 62.4128 37.2021 62.5414C37.2021 62.9641 37.2014 63.211 37.4021 63.5723C37.5905 63.9114 37.5947 64.2356 37.7443 64.5721C37.8861 64.8913 37.842 65.2906 37.842 65.6519C37.842 66.1118 37.5548 65.9956 37.2021 66.1719" stroke="white" stroke-width="3" stroke-linecap="round"/>
</svg>

'''
'''--- src/pages/gamePage/assets/Food.svg ---
<svg width="68" height="67" viewBox="0 0 68 67" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M20.0322 41.4586C18.412 45.2708 16.0498 47.0084 13.1376 49.3381C10.3709 51.5515 7.9598 50.173 4.9298 49.9948C2.90314 49.8756 0.930262 56.6847 2.66809 57.1812C4.07419 57.5829 6.09175 57.2177 7.55631 57.2177C10.2821 57.2177 8.26331 57.4591 7.0456 58.6768C5.31369 60.4088 6.3466 65.0972 9.19788 65.0972C11.1306 65.0972 16.7491 63.9601 16.7491 61.8141C16.7491 58.9676 14.3406 56.124 17.0774 53.9345C19.2762 52.1755 20.6366 48.0249 23.972 48.0249" stroke="black" stroke-width="3" stroke-linecap="round"/>
<path d="M6.89966 32.2659C12.7539 31.1236 17.4687 25.043 23.3153 25.043C29.0061 25.043 34.6969 25.043 40.3876 25.043C43.0659 25.043 45.0018 25.7306 47.2457 27.0128C48.1465 27.5276 49.226 31.987 50.0911 33.0684C50.928 34.1145 51.2801 37.7806 51.5868 39.1604C52.0712 41.3404 53.3983 43.983 53.5202 46.055C53.6671 48.5524 53.5202 51.104 53.5202 53.6062C53.5202 56.3795 51.3515 56.0635 49.7263 57.3636C46.3139 60.0936 42.953 61.5494 39.0744 63.2733C35.5857 64.8238 28.7405 65.5612 25.7959 62.6166C24.4023 61.223 23.4202 59.5974 21.6738 58.2391C20.8551 57.6024 19.6275 56.8962 18.7189 56.4151C17.1243 55.5709 17.6693 54.6584 16.7491 53.2779" stroke="black" stroke-width="3" stroke-linecap="round"/>
<path d="M6.24303 32.9225C6.24303 35.6906 5.10843 42.831 6.89966 45.0701C8.76738 47.4047 12.61 46.313 14.1226 49.3382" stroke="black" stroke-width="3" stroke-linecap="round"/>
<path d="M38.4178 23.073C42.437 22.1687 42.4201 19.4772 45.3124 17.1634C46.0959 16.5366 46.9838 15.6487 47.6106 14.8652C48.0561 14.3082 50.0801 13.2236 49.5804 13.2236" stroke="black" stroke-width="3" stroke-linecap="round"/>
<path d="M44.3274 25.0429C48.6931 21.8679 50.6846 15.4878 56.4385 13.8438C57.9071 13.4242 55.2267 14.6024 57.1681 15.1571C58.7447 15.6075 60.389 14.9525 61.728 14.2086C63.0463 13.4762 64.5662 13.2673 65.6313 12.2022C66.4452 11.3883 66.3007 8.29369 65.0111 8.00712C63.5229 7.67641 62.2975 6.65739 60.7431 6.65739C58.0421 6.65739 59.1244 5.86703 60.5972 4.54159C64.1057 1.38389 60.6689 2.061 57.4599 2.061C54.9765 2.061 52.9704 3.59392 51.6962 6.00076C51.1296 7.07107 50.4321 8.54755 49.7263 9.42981C49.1407 10.1619 50.8937 11.6132 50.8937 12.567" stroke="black" stroke-width="3" stroke-linecap="round"/>
</svg>

'''
'''--- src/pages/gamePage/assets/Fourth.svg ---
<svg width="68" height="71" viewBox="0 0 68 71" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M20.0322 41.4586C18.412 45.2708 16.0498 47.0084 13.1376 49.3381C10.3709 51.5515 7.9598 50.173 4.9298 49.9948C2.90314 49.8756 0.930262 56.6847 2.66809 57.1812C4.07419 57.5829 6.09175 57.2177 7.55631 57.2177C10.2821 57.2177 8.26331 57.4591 7.0456 58.6768C5.31369 60.4088 6.3466 65.0972 9.19788 65.0972C11.1306 65.0972 16.7491 63.9601 16.7491 61.8141C16.7491 58.9676 14.3406 56.124 17.0774 53.9345C19.2762 52.1755 20.6366 48.0249 23.972 48.0249" stroke="black" stroke-width="3" stroke-linecap="round"/>
<path d="M6.89966 32.2659C12.7539 31.1236 17.4687 25.043 23.3153 25.043C29.0061 25.043 34.6969 25.043 40.3876 25.043C43.0659 25.043 45.0018 25.7306 47.2457 27.0128C48.1465 27.5276 49.226 31.987 50.0911 33.0684C50.928 34.1145 51.2801 37.7806 51.5868 39.1604C52.0712 41.3404 53.3983 43.983 53.5202 46.055C53.6671 48.5524 53.5202 51.104 53.5202 53.6062C53.5202 56.3795 51.3515 56.0635 49.7263 57.3636C46.3139 60.0936 42.953 61.5494 39.0744 63.2733C35.5857 64.8238 28.7405 65.5612 25.7959 62.6166C24.4023 61.223 23.4202 59.5974 21.6738 58.2391C20.8551 57.6024 19.6275 56.8962 18.7189 56.4151C17.1243 55.5709 17.6693 54.6584 16.7491 53.2779" stroke="black" stroke-width="3" stroke-linecap="round"/>
<path d="M6.24303 32.9225C6.24303 35.6906 5.10843 42.831 6.89966 45.0701C8.76738 47.4047 12.61 46.313 14.1226 49.3382" stroke="black" stroke-width="3" stroke-linecap="round"/>
<path d="M38.4178 23.0731C42.437 22.1688 42.4201 19.4772 45.3124 17.1635C46.0959 16.5367 46.9838 15.6488 47.6106 14.8653C48.0561 14.3083 50.0801 13.2237 49.5804 13.2237" stroke="black" stroke-width="3" stroke-linecap="round"/>
<path d="M44.3274 25.0429C48.6931 21.8679 50.6846 15.4878 56.4385 13.8438C57.9071 13.4242 55.2267 14.6024 57.1681 15.1571C58.7447 15.6075 60.389 14.9525 61.728 14.2086C63.0463 13.4762 64.5662 13.2673 65.6313 12.2022C66.4452 11.3883 66.3007 8.29369 65.0111 8.00712C63.5229 7.67641 62.2975 6.65739 60.7431 6.65739C58.0421 6.65739 59.1244 5.86703 60.5972 4.54159C64.1057 1.38389 60.6689 2.061 57.4599 2.061C54.9765 2.061 52.9704 3.59392 51.6962 6.00076C51.1296 7.07107 50.4321 8.54755 49.7263 9.42981C49.1407 10.1619 50.8937 11.6132 50.8937 12.567" stroke="black" stroke-width="3" stroke-linecap="round"/>
<path d="M34.3226 64.4922C34.3226 63.5057 34.3226 62.5192 34.3226 61.5327C34.3226 60.8595 34.4826 60.2728 34.4826 59.6131C34.4826 58.9496 34.5247 58.2156 34.5626 57.5334C34.5847 57.1349 34.6426 56.7192 34.6426 56.2981C34.6426 56.0206 34.7085 55.4654 34.8203 55.2139C34.9592 54.9014 34.9215 54.5038 35.0825 54.214C35.2484 53.9155 35.5666 54.0141 35.9223 54.0141C36.7305 54.0141 37.5742 54.174 38.4019 54.174C38.9485 54.174 39.495 54.174 40.0416 54.174C40.1632 54.174 40.396 54.2239 40.5171 54.2585C40.5526 54.2686 40.8194 53.82 40.8815 53.6764C41.0311 53.3298 41.3175 53.0151 41.4236 52.6543C41.4796 52.4638 41.5593 52.224 41.7213 52.0944C41.9458 51.9148 42.1612 51.7662 42.1612 51.4545" stroke="black" stroke-width="3" stroke-linecap="round"/>
<path d="M42.0813 51.3745C42.0813 50.9056 41.8847 49.6808 42.1213 49.2549C42.3761 48.7962 42.1879 48.1911 42.4412 47.7351C42.5888 47.4696 43.2026 47.7169 43.441 47.7574C44.1532 47.8783 44.8793 47.9478 45.5962 48.0195C46.2368 48.0836 46.8962 48.2424 47.4848 48.4106C48.6684 48.7488 49.7737 49.1089 51.0219 49.3926C51.6422 49.5336 52.2319 49.9047 52.7994 50.1569C53.0133 50.252 54.3308 50.7113 54.3991 50.5746" stroke="black" stroke-width="3" stroke-linecap="round"/>
<path d="M52.9593 54.5739C52.9593 55.2592 52.9902 55.7405 52.3194 56.0759C51.842 56.3146 51.2776 56.5311 50.8974 56.9113C50.6733 57.1354 49.95 57.6944 50.4797 57.1335C50.8175 56.7759 51.1312 56.402 51.4796 56.0537C51.8905 55.6427 52.451 55.1698 52.9593 54.8939C53.1031 54.8158 53.5934 54.6412 53.6792 54.5339C53.7464 54.4499 53.911 54.5526 53.9191 54.414C53.9268 54.2838 53.9268 54.1442 53.9191 54.014C53.9119 53.8919 53.5143 53.7955 53.4214 53.7119C53.09 53.4136 52.7365 53.2663 52.3194 53.2142C52.1091 53.1879 52.0726 52.9742 51.7995 52.9742C51.3279 52.9742 52.052 53.0542 52.1994 53.0542C52.5433 53.0542 52.8039 53.3566 53.1193 53.3742C53.3298 53.3858 53.6557 53.4089 53.8791 53.4586C54.0912 53.5057 54.4458 53.466 54.639 53.5519C54.9567 53.6931 55.0151 53.5532 55.2389 53.3742C55.8612 52.8763 56.4598 52.3177 57.0208 51.7567C57.2568 51.5206 57.2249 50.8476 57.0208 50.5924C56.865 50.3977 56.6386 50.4762 56.6386 50.2147C56.6386 50.0235 56.4787 49.4724 56.4787 49.6637C56.4787 49.8772 56.3987 50.2991 56.3987 50.2991C56.3987 50.2991 56.5382 50.1631 56.5542 50.2192C56.5871 50.3342 56.5586 50.4951 56.5586 50.6146C56.5586 50.8679 56.5586 51.1212 56.5586 51.3745C56.5586 51.6423 56.6131 52.1852 56.3187 51.6944" stroke="white" stroke-width="3" stroke-linecap="round"/>
<path d="M56.3987 55.3738C54.9251 56.7272 52.8717 57.5309 51.1463 58.511C50.2617 59.0135 49.3266 59.4234 48.4002 59.8352C48.2841 59.8868 48.3202 59.6626 48.3202 59.6086C48.3202 59.3352 48.4699 59.1031 48.6579 58.9109C49.0547 58.5051 49.6056 58.0917 50.1598 57.9333C51.0776 57.6711 49.9402 58.6836 49.6488 58.8132C49.2437 58.9932 49.762 57.538 49.6799 57.5334C49.279 57.5111 48.8602 57.7851 48.4979 57.9333C48.1177 58.0889 47.8827 58.1547 48.018 57.6134C48.0937 57.3106 48.3476 56.8176 48.6401 56.6713C48.7605 56.6111 49.04 56.514 49.04 56.698C49.04 57.1287 48.8644 57.4604 48.6357 57.8178C48.1338 58.602 47.3538 59.3172 46.6582 59.933C46.3658 60.1919 46.0151 60.6448 45.6806 60.8306C45.2845 61.0507 45.4407 59.8244 45.4407 59.6086C45.4407 58.8101 45.6834 58.0166 46.0406 57.3023C46.2711 56.8413 46.1606 57.487 46.1606 57.7023C46.1606 58.6123 45.6528 59.5535 45.2007 60.3285C44.9606 60.7401 44.7468 61.4316 44.3831 61.7549C44.3219 61.8092 44.3963 60.8965 44.4009 60.8128C44.4248 60.3705 44.6678 60.2288 44.3875 60.7017C44.0171 61.3268 43.4743 61.8194 42.9656 62.3281C42.9263 62.3674 42.6436 62.6598 42.579 62.5369C42.392 62.1817 42.5568 61.342 42.5612 60.955C42.5634 60.7576 42.801 60.1712 42.8012 60.1729C42.8223 60.511 42.8174 60.9331 42.6412 61.2305C42.5864 61.323 42.4812 61.8496 42.4812 61.5149C42.4812 61.112 42.5874 59.9188 42.4768 60.3062C42.1563 61.4279 41.5664 62.3373 40.8815 63.2746C40.6557 63.5836 40.7255 62.8564 40.7215 62.7502C40.7057 62.324 40.4907 63.1795 40.4771 63.2879C40.4656 63.38 40.3216 63.9232 40.3216 63.6034C40.3216 63.128 40.3216 62.6525 40.3216 62.177C40.3216 61.8818 40.1924 62.6738 40.1616 62.8125C40.084 63.1617 39.937 63.4124 39.9217 62.8924C39.8925 61.8993 39.5201 63.454 39.3618 63.6123C39.1278 63.8462 39.0503 63.7655 39.0418 63.4523C39.0299 63.0098 38.8818 62.5896 38.8818 62.1415C38.8818 61.6745 39.1377 63.4266 38.6819 63.5279C38.4386 63.5819 38.3468 62.9801 38.3264 62.8169C38.288 62.5097 38.3304 63.2294 38.3219 63.3724C38.3005 63.7378 38.1115 62.8711 38.0998 62.8036C38.0759 62.6655 38.002 61.7771 38.002 62.257C38.002 62.9986 37.9127 63.552 37.5843 64.1722C37.4052 64.5105 37.6311 64.9496 37.4599 65.292C37.3211 65.5695 37.6021 64.6824 37.6021 64.3722C37.6021 63.9338 37.6175 63.7315 37.3799 63.4346C37.3041 63.3399 37.3621 63.0126 37.3621 62.8924C37.3621 62.7638 37.2021 62.4128 37.2021 62.5414C37.2021 62.9641 37.2014 63.211 37.4021 63.5723C37.5905 63.9114 37.5947 64.2356 37.7443 64.5721C37.8861 64.8913 37.842 65.2906 37.842 65.6519C37.842 66.1118 37.5548 65.9956 37.2021 66.1719" stroke="white" stroke-width="3" stroke-linecap="round"/>
<path d="M8.15076 33.0347C10.6375 33.3638 12.8604 34.7654 15.3102 35.2553C15.8146 35.3562 16.3147 35.5565 16.8026 35.7011C17.2937 35.8466 17.7802 35.9686 18.2671 36.1309C18.5273 36.2176 18.8243 36.5321 18.8243 36.1508C18.8243 35.5896 18.8243 35.0285 18.8243 34.4674C18.8243 33.9164 18.7963 33.3638 18.88 32.8198C18.911 32.6183 18.8306 31.6994 19.1665 32.1194C19.6323 32.7016 20.3842 33.046 21.1165 33.3172C22.7525 33.9231 24.5008 34.2956 26.1906 34.7181C26.3594 34.7603 27.8121 35.2615 27.9059 35.1678C27.9782 35.0955 28.0032 34.7107 28.0292 34.6067C28.147 34.1357 28.2563 33.6546 28.3516 33.1779C28.68 31.5362 28.9247 29.9452 28.9247 28.275C28.9247 27.6005 28.853 26.8625 28.853 26.2294" stroke="black" stroke-width="3" stroke-linecap="round"/>
<path d="M11.3743 30.0976C12.7002 29.2397 14.1133 28.4646 15.4933 27.6979C15.876 27.4853 16.268 27.2858 16.6912 27.1447C17.1294 26.9987 17.5858 26.7653 18.0204 26.5876C18.3718 26.4438 18.7148 26.3272 19.071 26.2254C19.1861 26.1925 19.3314 26.0632 19.4531 26.0145C19.8189 25.8682 20.1961 25.8347 20.5793 25.7638C21.0085 25.6843 21.4681 25.728 21.9046 25.728C22.4192 25.728 21.627 25.6563 21.4748 25.6563C20.3411 25.6563 19.2122 25.8712 18.0761 25.8712C17.6622 25.8712 17.2483 25.8712 16.8344 25.8712C16.6988 25.8712 16.3222 25.94 16.2136 25.8314C15.9728 25.5906 16.4565 25.5174 16.6036 25.6563C17.1683 26.1897 17.6916 27.1672 17.4593 27.9805C17.4344 28.0674 16.8912 28.2341 16.7827 28.3426C16.2916 28.8337 15.909 29.4416 15.3699 29.8827C14.8618 30.2984 14.4318 30.6707 13.7741 30.6707C13.3211 30.6707 12.9066 30.7424 12.4488 30.7424C11.6055 30.7424 10.8778 30.1693 10.0849 30.1693C9.22261 30.1693 8.40404 30.1207 7.57772 30.1693C7.41399 30.1789 7.16447 30.2574 7.00464 30.3285C6.81818 30.4113 6.57482 30.3995 6.39177 30.4518C6.29546 30.4794 6.17306 30.45 6.0734 30.4558C5.98671 30.4609 5.91693 30.5742 5.82268 30.5951C5.66033 30.6312 5.50411 30.7405 5.35706 30.814" stroke="white" stroke-width="3" stroke-linecap="round"/>
<path d="M18.2512 24.0804C19.14 24.0804 20.0288 24.0804 20.9176 24.0804C21.806 24.0804 22.734 24.2751 23.6238 24.148C23.7381 24.1317 23.9953 24.0989 24.0695 24.0247C24.1594 23.9348 24.1969 23.8423 24.1969 24.0087C24.1969 24.2963 24.0536 24.5423 24.0536 24.8325C24.0536 25.131 24.0536 25.4295 24.0536 25.728C24.0536 25.8915 23.9984 26.5197 24.1809 26.0861C24.3952 25.5772 24.4182 25.0422 24.6983 24.542C25.0465 23.9203 25.1424 23.1954 25.4704 22.5761C25.6081 22.3159 25.6295 23.1628 25.6295 23.2566C25.6295 23.5431 25.6295 23.8297 25.6295 24.1162C25.6295 24.6426 25.7002 25.2195 25.3032 25.6165C25.1097 25.81 24.7799 25.6725 24.5391 25.7439C24.1337 25.864 23.6889 25.8712 23.2656 25.8712" stroke="white" stroke-width="3" stroke-linecap="round"/>
<path d="M25.5579 26.516C25.7966 26.516 26.0354 26.516 26.2742 26.516C26.5294 26.516 26.1809 26.5426 26.1309 26.4801C26.0472 26.3755 25.9694 25.7569 26.0951 25.6564C26.2441 25.5371 26.3963 25.0588 26.4175 24.8684C26.4364 24.6977 26.5607 24.5857 26.5607 24.4028C26.5607 24.2475 26.5607 24.0923 26.5607 23.9371" stroke="white" stroke-width="3" stroke-linecap="round"/>
<path d="M27.7069 23.5789C27.9825 23.5252 28.2189 23.4378 28.463 23.368C28.524 23.3506 28.6457 23.3963 28.6938 23.3481C28.757 23.285 28.583 23.3222 28.5506 23.3481C28.4842 23.4012 28.126 23.4102 28.0292 23.4317C27.8854 23.4636 27.7886 23.5789 27.6353 23.5789" stroke="white" stroke-width="3" stroke-linecap="round"/>
<path d="M3.13635 32.4616C3.50557 32.3895 3.91166 32.4237 4.12331 32.1591C4.19319 32.0718 4.20804 31.9458 4.2825 31.8527C4.3781 31.7332 4.55532 31.6273 4.67649 31.5303C4.77973 31.4477 4.89293 31.3259 4.99884 31.2597C5.10227 31.1951 5.27944 31.1617 5.35701 31.0647C5.50976 30.8738 5.95939 30.8986 6.07335 30.6707" stroke="white" stroke-width="3" stroke-linecap="round"/>
<path d="M11.3743 30.8856C11.5986 30.8124 11.9299 30.7642 12.0907 30.5633C12.1329 30.5105 12.3862 30.5274 12.3056 30.5274" stroke="white" stroke-width="3" stroke-linecap="round"/>
<path d="M10.0849 30.6707C10.5139 30.5033 10.982 30.4312 11.3743 30.2569C11.5529 30.1775 11.3062 30.1693 11.1594 30.1693C10.9408 30.1693 10.7585 30.0977 10.5505 30.0977C10.1322 30.0977 8.80951 30.2978 8.58057 29.9544" stroke="white" stroke-width="3" stroke-linecap="round"/>
<path d="M12.8107 31.3497C12.5305 31.343 12.2612 31.1864 12.0019 31.0938C11.8647 31.0448 11.7254 30.976 11.5939 30.9103C11.536 30.8813 11.4848 30.8318 11.4201 30.8282C11.2595 30.8193 11.1102 30.7109 10.9469 30.6979C10.807 30.6867 10.6555 30.5968 10.5184 30.5663C10.3798 30.5355 10.2676 30.4371 10.1273 30.4371C9.96259 30.4371 9.80184 30.3593 9.63845 30.3502C9.4709 30.3409 9.30926 30.3285 9.13871 30.3285C9.06867 30.3285 8.93001 30.391 8.87315 30.4323C8.83199 30.4622 8.70232 30.4589 8.64984 30.4589C8.4905 30.4589 8.33117 30.4589 8.17183 30.4589C8.09426 30.4589 8.02351 30.524 7.95456 30.524C7.9124 30.524 7.78782 30.5662 7.75297 30.5941C7.6476 30.6783 7.38491 30.6327 7.25323 30.6327C7.16508 30.6327 7.07569 30.628 6.98767 30.6327C6.94218 30.6351 6.77705 30.6515 6.74867 30.687C6.71142 30.7336 6.57731 30.7196 6.52173 30.7196C6.36964 30.7196 6.21755 30.7196 6.06545 30.7196C5.95681 30.7196 5.63764 30.667 5.55847 30.7461C5.51386 30.7908 5.4871 30.8464 5.44018 30.8886C5.42489 30.9023 5.34242 30.9369 5.41241 30.9369C5.43084 30.9369 5.51191 30.9445 5.48846 30.932C5.22755 30.7939 5.06727 30.611 4.76058 30.611C4.51938 30.611 4.4713 30.8944 4.33689 31.0672C4.28022 31.1401 4.21692 31.2895 4.13048 31.328C4.11948 31.3329 4.05842 31.3875 4.07616 31.4052C4.09977 31.4288 4.12585 31.3605 4.15221 31.34C4.21338 31.2925 4.277 31.2373 4.34655 31.1976C4.38776 31.174 4.48483 31.1105 4.51072 31.0781C4.52801 31.0565 4.56833 31.0651 4.5928 31.0407C4.61243 31.021 4.63024 30.9977 4.65195 30.9803C4.72301 30.9235 4.78357 30.8429 4.85353 30.7799C4.88437 30.7522 4.91791 30.7314 4.95372 30.7099C4.98444 30.6915 4.89637 30.7544 4.86319 30.7679C4.7351 30.8201 4.65133 30.9529 4.53244 31.0189C4.44877 31.0654 4.23406 31.237 4.20532 31.3376C4.16759 31.4697 4.02541 31.5762 3.98804 31.707C3.9773 31.7446 3.87581 31.8489 3.84802 31.8712C3.79957 31.9099 3.7776 31.9621 3.73335 32.0064C3.56531 32.1744 3.4026 32.4437 3.4026 32.6859C3.4026 32.7119 3.42734 32.9168 3.44485 32.838C3.46585 32.7435 3.43233 32.6418 3.50641 32.5592C3.56082 32.4985 3.57062 32.6065 3.56556 32.6328C3.53427 32.7955 3.45108 32.9643 3.37001 33.1084C3.32421 33.1899 3.27077 33.3098 3.21188 33.3752C3.15914 33.4338 3.14626 33.518 3.11531 33.5876C3.0845 33.657 2.9858 33.7967 3.07669 33.6577C3.13441 33.5694 3.17312 33.4731 3.22757 33.3812C3.29032 33.2753 3.36498 33.173 3.42433 33.0662C3.48282 32.9609 3.57823 32.7835 3.6742 32.7089C3.70139 32.6877 3.61709 32.8278 3.59815 32.861C3.54905 32.9469 3.50518 33.0336 3.45692 33.1205C3.42079 33.1855 3.3741 33.2651 3.35794 33.3378C3.34996 33.3737 3.27224 33.5279 3.27224 33.4356" stroke="white" stroke-width="3" stroke-linecap="round"/>
<path d="M29.4952 22.5354C29.64 22.5637 29.7906 22.5415 29.9306 22.5815C29.958 22.5893 29.9755 22.6332 30.0003 22.6474C30.0408 22.6705 30.0386 22.6182 30.0774 22.5976C30.1309 22.5693 30.3258 22.4907 30.1782 22.4907C30.1036 22.4907 29.9835 22.5264 29.9207 22.5578" stroke="white" stroke-width="3" stroke-linecap="round"/>
<path d="M30.9283 22.4682C31.0804 22.3494 31.2272 22.252 31.4159 22.1821C31.4301 22.1769 31.6161 22.0925 31.5328 22.0876C31.4695 22.0839 31.4048 22.0876 31.3413 22.0876C31.2221 22.0876 31.0628 22.1483 30.9507 22.1884C30.7748 22.2512 30.5507 22.3205 30.3635 22.3339C30.1351 22.3502 29.8947 22.4363 29.6794 22.508C29.5138 22.5632 29.3225 22.5966 29.1706 22.681C29.0416 22.7526 28.8716 22.785 28.734 22.8539C28.6355 22.9031 28.4543 23.0092 28.3981 23.1076C28.3267 23.2325 28.1694 23.2691 28.0846 23.3751C28.0506 23.4177 27.9434 23.4764 27.8943 23.4982C27.8278 23.5278 27.7512 23.6244 27.6816 23.6326C27.5758 23.645 27.3954 23.7569 27.3121 23.8217C27.2254 23.8891 27.1143 23.9187 27.0372 23.9958C26.9524 24.0806 26.8719 24.1647 26.8133 24.2819C26.7498 24.4088 26.6612 24.5289 26.6068 24.6514C26.488 24.9186 26.3605 25.1632 26.3605 25.4575C26.3605 25.5128 26.3157 25.5761 26.3157 25.6366C26.3157 25.6532 26.2933 25.7797 26.2933 25.7261C26.2933 25.6548 26.3651 25.5076 26.4103 25.4512C26.4746 25.3708 26.5614 25.2727 26.6118 25.1776C26.6652 25.0767 26.7596 24.9657 26.7847 24.8529C26.8312 24.6437 27.019 24.4667 27.1168 24.2819C27.2134 24.0996 27.3746 23.9072 27.5199 23.7619C27.7174 23.5644 27.846 23.3069 28.0734 23.13C28.2028 23.0294 28.3388 22.9106 28.4653 22.8041C28.5441 22.7377 28.54 22.8437 28.515 22.8937C28.492 22.9398 28.4489 23.0187 28.4093 23.0504C28.1601 23.2498 27.9133 23.478 27.6866 23.7047C27.6153 23.776 27.547 23.8388 27.4689 23.9013C27.2949 24.0405 27.3923 23.8126 27.3457 23.7893" stroke="white" stroke-width="3" stroke-linecap="round"/>
<path d="M17.1065 37.5163C16.3173 38.1552 15.5784 38.8283 14.8615 39.5452C14.6088 39.798 14.3414 39.9497 14.2972 40.3256C14.2683 40.5718 13.9951 40.8199 13.9731 41.106C13.944 41.4838 13.7358 41.8524 13.6549 42.2165C13.6367 42.2983 14.8967 43.1269 15.1076 43.291C15.2973 43.4385 15.5268 43.6174 15.7499 43.6812C15.8353 43.7056 16.3147 44.1557 15.918 43.8913" stroke="black" stroke-width="3" stroke-linecap="round"/>
<path d="M22.401 50.2663C23.0921 50.6709 23.8281 51.0138 24.562 51.3228C24.9027 51.4662 25.3732 51.3292 25.6965 51.5089C26.0244 51.691 26.8932 51.7684 27.2633 51.779C28.0121 51.8004 28.7422 51.8564 29.4723 51.9891C29.8781 52.0629 30.3608 51.9951 30.7749 51.9951C31.3522 51.9951 31.9097 52.1895 32.4737 52.2112C32.9283 52.2287 33.1864 52.4294 33.5783 52.5414C33.9339 52.643 34.2425 53.0315 33.7463 52.5354" stroke="black" stroke-width="3" stroke-linecap="round"/>
<path d="M22.7252 58.8023C22.7252 61.6106 22.8332 57.0873 22.8332 60.9393C22.8332 61.2347 22.8641 61.5807 23.2114 61.2334C23.6673 60.7775 23.5378 62.205 23.5656 62.476C23.6408 63.2121 23.7189 63.9976 24.0218 64.6791C24.1919 65.0618 24.6555 64.2406 24.7241 64.1568C24.906 63.9345 25.0089 63.7411 24.9942 63.4485C24.9529 62.622 24.8862 61.8016 24.8862 60.9633C24.8862 60.5671 24.8862 59.3786 24.8862 59.7748C24.8862 59.9079 24.9942 60.5454 24.9942 60.1529C24.9942 59.6302 25.1362 60.647 25.2583 60.9033C26.1264 62.7246 26.7761 64.645 27.5754 66.4979C27.7663 66.9404 27.9939 67.3663 28.1757 67.8125C28.2016 67.876 28.523 68.3667 28.4278 68.0706C28.2202 67.4245 27.8027 66.8243 27.5394 66.1978C27.1771 65.3357 26.9102 64.4246 26.723 63.5085C26.6826 63.3106 26.218 61.7781 26.573 62.2119C26.9575 62.6818 27.316 63.1668 27.8035 63.5325C28.1268 63.775 28.4073 63.9686 28.83 63.8747C29.0729 63.8207 28.9474 63.3404 29.2082 63.3404C29.4461 63.3404 29.6869 63.5539 29.8805 63.6646C30.5239 64.0322 31.1484 64.4323 31.7954 64.7931C32.5671 65.2235 33.4206 65.737 34.2626 66.0177C34.8591 66.2165 33.4307 65.9934 33.2541 65.9276C32.2917 65.5695 31.4778 65.1313 30.6249 64.583C30.3249 64.3902 30.9468 64.6032 31.0451 64.661C31.5449 64.955 29.8013 65.3161 29.7004 65.3394C29.4866 65.3887 27.8681 65.9004 28.5839 65.5014C29.1644 65.1779 29.8008 64.9675 30.3848 64.643C30.7413 64.445 31.0609 64.2286 31.4773 64.2048C31.5759 64.1992 31.8522 64.0968 31.7534 64.0968C31.478 64.0968 31.1405 64.2811 30.883 64.3669C30.606 64.4593 30.3454 64.5683 30.0786 64.6851C29.9489 64.7418 29.5883 64.753 29.6884 64.8531C29.7861 64.9508 30.4066 64.7652 30.5048 64.7451C31.3528 64.5716 32.1434 64.2217 32.978 64.0007C33.8743 63.7635 35.0143 63.2324 35.9494 63.2324C36.8065 63.2324 32.5969 63.4725 33.3802 63.1243C34.0223 62.8389 34.8441 62.7901 35.5352 62.6681C36.5382 62.4911 35.5842 62.328 35.103 62.2119C34.8515 62.1512 33.8738 62.0691 33.8544 61.7197C33.8329 61.3321 34.2371 61.2346 34.5567 61.1854C35.1515 61.0939 34.9305 61.1794 34.4187 61.1794C34.1529 61.1794 32.8819 61.3574 32.8819 60.9633C32.8819 60.6217 35.166 60.391 33.9864 60.1229C33.8818 60.0991 32.7249 59.9612 32.7919 59.7267C32.8504 59.522 34.6601 59.6667 34.9349 59.6667C35.3091 59.6667 36.4316 59.6667 36.0574 59.6667C35.5149 59.6667 34.8083 59.3301 34.3106 59.1264C33.1951 58.6701 34.8673 58.6436 34.7668 58.5862C34.5008 58.4342 34.2209 58.3825 34.7428 58.3701C35.0686 58.3623 35.7626 58.374 36.0574 58.256C36.4277 58.1079 35.2849 58.0524 34.9109 57.9139C34.5627 57.7849 34.554 57.5684 34.3406 57.3976C34.2007 57.2857 33.4342 56.6348 33.4342 56.4792C33.4342 56.456 34.5571 56.6413 34.7188 56.6413C34.9628 56.6413 35.1654 56.7493 35.4211 56.7493C35.7005 56.7493 35.7985 56.9654 35.4751 56.9654C35.0209 56.9654 34.6422 56.8592 34.3466 56.4792C33.935 55.95 32.7158 55.964 32.1256 55.6688" stroke="white" stroke-width="3" stroke-linecap="round"/>
<path d="M37.9603 64.7451C37.9603 65.9297 37.9603 67.1142 37.9603 68.2988C37.9603 68.782 37.7613 69.1407 37.5221 68.5029C37.086 67.3399 36.8407 63.6131 36.7718 64.8532C36.7505 65.2365 36.6637 65.593 36.6637 65.9817C36.6637 66.4379 36.4981 65.6783 36.4476 65.5015C36.2058 64.655 34.2068 65.0652 33.7463 65.5015C33.5954 65.6445 33.3612 65.9356 33.1461 65.7596C32.7288 65.4182 32.5161 64.7868 32.2096 64.3489C31.6847 63.5991 31.1232 62.8848 30.4448 62.266C29.1892 61.1205 27.558 60.394 25.8826 60.1229C25.6211 60.0806 24.5004 59.7763 24.2619 60.0149C24.1302 60.1466 24.2379 60.7594 24.2379 60.5732C24.2379 60.1398 24.1895 59.7277 24.1238 59.3006C23.9896 58.428 23.3645 59.6864 23.2714 59.1745C23.1877 58.714 23.0736 58.1599 23.0493 57.7218C23.0228 57.2448 22.4025 56.9621 22.1849 57.4517C22.0161 57.8315 21.8005 58.3119 21.7527 58.6943C21.7105 59.0317 21.3521 58.5588 21.3265 58.4181C21.2777 58.1496 21.3205 57.8337 21.3205 57.5597C21.3205 57.1522 21.3747 56.6355 21.0804 56.3412C20.9284 56.1892 20.8122 55.9924 20.6242 55.885C20.5028 55.8156 20.2132 55.7164 20.1319 55.6148C19.9084 55.3354 19.1595 57.2305 19.1595 57.5057" stroke="white" stroke-width="3" stroke-linecap="round"/>
<path d="M10.0833 47.457C10.413 47.2072 11.0382 46.9167 10.3534 46.9167C9.85209 46.9167 10.2188 46.6516 10.4674 46.5386C10.8724 46.3545 11.5069 46.2316 11.8361 45.9683C11.8979 45.9188 12.4028 45.6521 11.9741 45.8903C11.6217 46.086 10.8632 46.0234 10.4614 46.0583C9.54523 46.138 8.3591 46.3595 7.43602 46.1544C6.90194 46.0357 7.29421 44.8824 7.14188 44.5396C7.01024 44.2434 7.05784 44.0213 7.05784 44.4856C7.05784 44.7542 7.16459 45.1322 7.33397 45.35C7.56077 45.6416 7.25103 45.2094 7.1899 45.1279C6.84383 44.6665 6.52255 44.213 6.30148 43.6752C5.86276 42.6081 5.41844 41.404 5.32903 40.2416C5.29323 39.7763 5.13676 40.794 5.30501 40.6258C5.58262 40.3482 5.73759 39.7103 5.92931 39.3652C6.12941 39.005 6.33334 38.6412 6.51758 38.2727C6.54677 38.2143 6.72168 37.7122 6.72168 38.0446C6.72168 39.1648 5.9464 40.4268 5.46709 41.3941C4.8319 42.6761 4.13827 43.9658 3.60622 45.296C3.50917 45.5386 3.34562 46.3747 3.06596 46.5146C2.97109 46.562 3.05856 46.3025 3.05996 46.1964C3.06522 45.7966 3.09621 45.416 3.21603 45.0319C3.46531 44.2327 3.73868 43.3669 4.18849 42.6547C4.40626 42.3099 4.64103 41.3687 5.11292 41.6463C5.32628 41.7718 5.65318 42.1827 5.65318 42.4326C5.65318 42.7839 5.38341 43.0419 5.60516 42.7568C5.98289 42.2711 6.19343 42.5505 6.19343 43.0269C6.19343 43.5294 5.86928 44.005 5.86928 44.4856C5.86928 44.7214 5.93059 45.0303 5.78524 45.2119C5.70461 45.3127 5.76123 45.42 5.76123 45.1639C5.76123 44.4462 5.72673 43.7185 5.78524 43.0029C5.9833 40.5804 7.00806 38.2851 7.43602 35.9076C7.47071 35.7148 8.04764 33.7126 7.26794 34.3949C6.79173 34.8115 6.31315 35.4493 6.00134 36.0036C5.98994 36.0239 5.97733 35.4313 5.97733 35.2833C5.97733 34.8796 6.00854 34.4989 6.10939 34.1067C6.11848 34.0714 6.22325 33.6888 6.27747 33.7586C6.4291 33.9535 5.83407 35.0035 5.76123 35.1632C5.16868 36.4623 4.35329 37.6713 3.84033 39.005C3.29224 40.4301 5.11292 33.0782 5.11292 34.605C5.11292 34.7996 4.97378 35.7962 5.35304 35.5714C5.8098 35.3007 6.08652 34.9005 6.43354 34.5149C6.67123 34.2508 6.89975 33.9113 7.11787 33.6205C7.50054 33.1103 8.01507 31.9525 8.62457 31.6816C9.04425 31.4951 8.54242 32.9738 8.45649 33.1403C8.12441 33.7837 7.08354 35.682 7.34597 35.0071C7.81159 33.8098 8.62896 32.8727 9.30289 31.8136C9.65207 31.2649 9.75911 31.321 9.75911 31.9217C9.75911 32.3994 9.83754 32.7006 9.92118 33.1523C10.0932 34.081 9.97521 35.1068 9.97521 36.0516C9.97521 36.3421 9.97264 35.9143 9.97521 35.8475C9.99203 35.4101 10.2251 35.1797 10.4074 34.8151C10.6171 34.3957 10.7316 34.2765 10.7316 34.8151C10.7316 34.959 10.6235 35.5372 10.6235 35.1392C10.6235 34.8165 10.6781 34.457 10.8156 34.1668C11.0127 33.7507 11.596 31.8987 11.596 33.2483C11.596 33.7807 11.5221 34.2979 11.4039 34.8151C11.2546 35.4684 11.478 34.9137 11.7881 34.707C12.3193 34.3529 13.5736 34.1332 13.763 33.4704C13.8613 33.1264 14.0446 33.2235 13.9671 33.5725C13.8846 33.9435 13.4515 34.2196 13.2708 34.5449C12.9987 35.0346 12.6051 35.5257 12.5684 36.1117C12.5666 36.1408 12.6892 35.799 12.8386 35.6795C13.1704 35.414 13.549 35.2049 13.871 34.9231C14.176 34.6563 15.5928 33.6008 14.8615 34.5149C14.6092 34.8303 14.4899 35.259 14.0811 35.4634" stroke="white" stroke-width="3" stroke-linecap="round"/>
<path d="M8.46246 47.5651C8.76591 47.6835 8.95146 47.8068 9.21882 47.6731" stroke="white" stroke-width="3" stroke-linecap="round"/>
<path d="M16.6962 34.0648C16.5181 34.0995 16.3548 34.146 16.2119 34.2572C16.1446 34.3095 16.0834 34.3615 16.0211 34.417C15.9157 34.5107 16.0012 34.4195 16.0374 34.3729C16.0744 34.3254 16.1811 34.2702 16.2412 34.2702C16.3085 34.2702 16.345 34.2149 16.4027 34.2115C16.5024 34.2056 16.7158 34.2193 16.7907 34.1593C16.8582 34.1054 16.8445 34.2687 16.8136 34.2996C16.7898 34.3233 16.7114 34.4063 16.6799 34.4153C16.5797 34.444 16.4388 34.5749 16.388 34.6665C16.2779 34.8647 16.0264 35.066 15.964 35.2845C15.8917 35.5375 15.6796 35.7143 15.5449 35.9432C15.4846 36.0458 15.3635 36.1269 15.2873 36.2221C15.2614 36.2544 14.9712 36.4714 15.0688 36.4993C15.1629 36.5262 15.3048 36.42 15.3167 36.3248C15.3225 36.2783 15.5142 36.1609 15.558 36.1259C15.761 35.9635 15.8489 35.7886 15.9624 35.5617" stroke="white" stroke-linecap="round"/>
<path d="M19.5015 38.556C19.2844 38.398 19.2278 38.3427 19.2278 38.0769C19.2278 37.9534 19.2053 37.7971 19.2836 37.6992C19.4376 37.5067 19.4943 37.2076 19.6485 37.0149C19.7277 36.9159 19.7912 36.8012 19.8868 36.7056C19.9906 36.6019 20.1647 36.4892 20.2417 36.366C20.3069 36.2616 20.4419 36.1779 20.5053 36.0669C20.5521 35.985 20.5735 35.7183 20.6193 35.6816C20.6814 35.6319 20.6468 35.3503 20.6421 35.271C20.6307 35.0765 20.5573 35.3969 20.5484 35.4282C20.4803 35.6662 20.2756 35.8678 20.0718 36.0263C19.9951 36.0861 19.8938 36.2065 19.831 36.2849C19.6994 36.4494 19.7797 36.2759 19.8437 36.1607C19.8879 36.0812 19.9929 35.9024 20.0034 35.8185C20.0118 35.7513 20.0903 35.5241 20.1403 35.4991" stroke="white" stroke-linecap="round"/>
<path d="M10.3766 48.1371C10.5512 48.1371 10.6673 48.1827 10.8329 48.1827C10.9303 48.1827 11.0441 48.0703 11.1269 48.094C11.2777 48.1371 11.0239 48.2945 11.0053 48.3094C10.8796 48.41 10.848 48.1861 10.9039 48.1143C11.1228 47.8327 11.6131 47.8005 11.8366 47.5212C11.8884 47.4565 12.2095 47.2806 12.2929 47.2702C12.4471 47.2509 12.6126 47.013 12.7491 46.9407C13.0685 46.7716 13.3053 46.5131 13.616 46.3577" stroke="white" stroke-linecap="round"/>
<path d="M18.0872 57.8551C18.0366 57.5895 17.9246 57.3863 17.9934 57.1454C18.0301 57.0168 17.957 57.5677 17.8236 57.4343C17.7387 57.3495 18.1526 56.5618 18.2469 56.4864C18.5172 56.2701 18.5493 55.7608 18.84 55.5282C19.0789 55.3371 19.24 54.9168 19.4103 54.6614" stroke="white" stroke-linecap="round"/>
<path d="M19.1366 54.7982C19.0136 54.925 18.9097 55.0486 18.8197 55.1835C18.7529 55.2838 18.8875 54.9504 18.9439 54.8439C19.1288 54.4947 19.0803 55.0881 18.9997 55.2291C18.8826 55.4341 18.6831 55.6144 18.5663 55.8248C18.5063 55.9328 18.2446 56.3495 18.1785 56.3495" stroke="white" stroke-linecap="round"/>
<path d="M33.0064 55.1176C33.1903 55.1176 33.5035 55.1669 33.3055 54.9123C33.2618 54.8562 33.2301 54.7781 33.2345 54.707C33.2375 54.66 33.3162 54.7575 33.3486 54.7755C33.4593 54.837 33.5629 54.8054 33.668 54.8895C33.7602 54.9633 33.7795 55.0916 33.853 55.1861C33.9198 55.272 34.0878 55.4197 34.1014 55.5283C34.1145 55.633 34.2979 55.6428 34.3751 55.6753C34.6391 55.7864 34.9599 55.775 35.1964 55.8933" stroke="white" stroke-linecap="round"/>
<path d="M44.1844 50.7377C44.1844 51.1972 43.7738 51.5289 43.7738 51.9923C43.7738 52.4607 43.6682 52.8396 43.4646 53.247C43.3808 53.4144 43.3259 53.5779 43.2288 53.7235C43.1834 53.7917 43.3054 53.576 43.3201 53.4954C43.3522 53.3187 43.4607 53.1616 43.4975 52.9961C43.5718 52.6616 43.865 52.3032 43.865 51.9695" stroke="white" stroke-linecap="round"/>
<path d="M44.0475 50.7377C44.0475 51.2796 43.8846 51.7105 43.7712 52.2205C43.6931 52.5719 43.6617 52.94 43.5811 53.2926C43.5423 53.4627 43.5326 54.2508 43.3632 54.2508" stroke="white" stroke-linecap="round"/>
<path d="M40.3063 48.4108C40.3063 48.8367 40.3063 49.2625 40.3063 49.6883C40.3063 50.0559 40.3283 50.4486 40.1796 50.7833C40.0591 51.0544 39.8601 51.255 39.7233 51.5133C39.6067 51.7336 39.3283 52.0608 39.0745 52.0608" stroke="white" stroke-linecap="round"/>
<path d="M44.4259 27.3417C44.2398 27.7905 43.9223 28.6115 43.6217 28.9872C43.3872 29.2803 43.2955 30.0276 43.034 30.2368C42.7686 30.4491 42.5492 31.3591 42.533 31.6843C42.5024 32.2964 42.4373 33.4376 42.1432 33.967C41.9453 34.3232 41.8357 35.1018 41.7597 35.5197C41.6553 36.0937 41.199 36.5297 40.9493 37.0291C40.7352 37.4574 40.3117 37.8107 40.2008 38.3096C40.0712 38.8928 40.0047 39.7012 39.9719 40.2582C39.9432 40.7463 37.5597 40.8549 37.1758 40.9263C36.2164 41.1048 35.3211 41.2604 34.3488 41.2604C33.9127 41.2604 33.1796 41.0574 33.1796 41.5944C33.1796 43.9287 33.1796 46.2629 33.1796 48.5971C33.1796 48.7493 33.362 49.3782 33.1796 49.3889C32.8761 49.4068 32.7297 49.2333 32.4558 49.1724C31.4993 48.9599 30.468 49.0549 29.4803 49.0549C27.9297 49.0549 26.4805 49.2776 24.9397 49.2776" stroke="black" stroke-width="3" stroke-linecap="round"/>
<path d="M54.336 42.0398C54.4318 42.6384 54.4474 43.2179 54.4474 43.8214C54.4474 44.1731 54.4474 42.9127 54.4474 42.7327C54.4474 42.4329 54.5275 41.2725 54.4226 42.2254C54.2471 43.8212 53.6812 45.3825 53.1978 46.9021C52.541 48.9672 51.8012 50.9998 51.1069 53.0511C50.6725 54.3345 50.4024 55.7469 49.7954 56.9607C49.7171 57.1174 49.7707 56.682 49.7707 56.639C49.7707 55.5904 49.819 54.5672 50.0181 53.5336C50.3286 51.9221 50.7681 50.2578 51.4162 48.7456C51.8014 47.8467 51.775 48.6533 51.775 49.1662C51.775 49.8985 51.7479 50.6367 51.775 51.3685C51.798 51.9894 53.5839 50.0399 53.6927 49.8962C54.3855 48.981 54.9686 47.8656 55.7836 47.0506C56.2072 46.627 55.9228 48.6501 55.8702 48.8322C55.6767 49.502 55.4629 50.5025 54.9794 51.0344C54.6984 51.3435 54.7814 50.4271 54.7814 50.3168C54.7814 50.1492 54.6588 49.2085 54.8062 49.0796C54.875 49.0194 54.7865 50.1761 54.7814 50.2179C54.6001 51.7161 54.1159 53.0954 53.6308 54.5172C53.5464 54.7646 52.8253 57.27 52.505 57.27C52.3066 57.27 52.5814 55.1657 52.5854 55.1358C53.0195 51.9016 54.0534 48.772 54.9299 45.6401C56.1251 41.3697 57.328 37.0011 57.9487 32.5999C58.0487 31.891 58.6021 30.347 57.5528 31.542C56.1446 33.1458 54.9333 34.928 53.7917 36.726C53.4046 37.3356 52.9884 37.9145 52.6782 38.5694C52.5591 38.8207 52.4846 39.2022 52.2823 39.4046C52.1799 39.5069 52.342 38.6473 52.3503 38.6189C52.5614 37.8934 52.8898 37.1877 53.2782 36.5404C53.3728 36.3827 54.4068 34.6873 54.7134 34.9939C55.084 35.3645 54.8802 37.097 54.868 37.524C54.8159 39.3498 54.3707 41.0865 53.8473 42.8255C53.3511 44.4743 52.8319 46.2605 52.0596 47.8053C51.8392 48.246 51.8863 47.6105 51.8863 47.4527C51.8863 46.3596 52.0734 45.3383 52.3874 44.2916C52.637 43.4597 52.961 42.6532 53.2164 41.8233C53.3448 41.4059 53.3975 40.9364 53.6061 40.549C53.8756 40.0485 53.123 41.5892 53.0555 41.6996C52.5924 42.4574 52.1479 43.7605 51.3976 44.2606C51.202 44.3911 51.2584 41.3071 51.2801 40.9696C51.4093 38.9573 51.7725 36.9628 52.0224 34.9629C52.0255 34.9386 52.1513 34.2881 52.0843 34.2948C51.9096 34.3123 51.647 34.8925 51.577 35.0248C51.505 35.1612 50.8312 36.1732 50.7976 36.0641C50.6749 35.6652 50.7728 35.1104 50.7728 34.6908C50.7728 34.0946 50.6378 35.8857 50.4388 36.4476C50.1975 37.129 50.0391 37.8456 49.6841 38.4766C49.1069 39.5027 50.1333 36.1552 50.5378 35.0495C50.6504 34.7416 51.0604 33.1542 51.4409 33.1319C51.8529 33.1076 51.073 34.8057 51.0203 34.9135C50.7235 35.5209 50.5122 36.3648 50.08 36.893C50.0179 36.9689 50.3498 34.879 50.4388 34.5794C50.9049 33.0108 51.522 31.4666 51.9111 29.878C51.9427 29.7487 52.1646 29.33 52.0843 29.7048C52.0061 30.0695 51.7474 30.3596 51.577 30.6822C51.3954 31.0259 51.1549 31.505 50.8595 31.7709C50.6461 31.9629 50.5933 31.3466 50.5254 31.2637C50.1299 30.7803 49.6205 32.0572 49.381 32.2967C49.1068 32.5709 49.214 32.0348 49.214 31.8451C49.214 31.2905 49.214 30.7358 49.214 30.1811C49.214 29.888 49.3253 29.0157 49.3253 29.3088C49.3253 30.0012 49.0687 30.778 48.7686 31.3997C48.6784 31.5865 48.4345 32.5375 48.4345 32.1173C48.4345 31.535 48.547 30.9398 48.8242 30.4162C49.1257 29.8466 49.3253 29.2602 49.3253 28.6222C49.3253 27.8418 49.0492 26.9049 48.2613 26.6798C47.7001 26.5194 47.7703 26.7394 47.6489 27.286C47.5946 27.5302 47.3448 28.3 47.2097 28.2325" stroke="#FFFAFA" stroke-width="3" stroke-linecap="round"/>
<path d="M47.321 28.6779C47.321 30.5478 47.0851 32.7228 48.5211 34.1587C48.9591 34.5968 49.382 35.0694 49.8202 35.5197C50.5659 36.2861 51.8863 37.5289 51.8863 38.6993" stroke="#FFFAFA" stroke-width="3" stroke-linecap="round"/>
<path d="M50.4388 50.3911C50.4388 49.723 50.4388 49.0549 50.4388 48.3868C50.4388 47.6391 49.7339 48.6447 49.5232 48.8569C48.4279 49.9603 47.3401 51.0867 46.3188 52.2593C46.2758 52.3087 45.5849 53.0624 45.5641 53.0387C45.422 52.8763 46.0557 51.9324 46.1209 51.8139C46.5431 51.0463 46.8526 50.219 47.2962 49.4632C47.3215 49.4201 47.6553 48.8819 47.7416 48.9683C47.8902 49.1168 47.6243 49.5984 47.8901 49.0858C48.2856 48.3231 48.7112 47.588 49.2139 46.8897C49.4989 46.4939 50.2344 46.1195 49.6222 46.8464C48.591 48.071 47.1193 49.3653 45.7435 50.1746C45.2219 50.4814 44.3996 51.2695 43.764 51.2695C43.2321 51.2695 43.7995 50.2755 43.931 50.1189C44.2524 49.7363 44.7007 49.1912 45.1435 48.9497C45.4509 48.782 45.0323 48.9435 44.927 48.9435C44.3753 48.9435 45.0271 46.5521 45.1187 46.2959C45.3515 45.645 45.7094 45.0604 45.9786 44.4277C46.1676 43.9836 46.2859 43.505 46.5415 43.0915C46.9318 42.4601 46.7983 42.9254 46.4921 43.2894C45.7522 44.1689 45.0007 45.0397 44.2527 45.9123C44.1117 46.0768 43.4685 46.6718 43.5351 46.6052C43.804 46.3363 44.1568 46.0543 44.562 46.1845C45.8526 46.5993 46.9712 47.2733 48.3664 47.2733C48.574 47.2733 48.9912 47.2773 48.9912 47.5516C48.9912 48.0787 48.1577 48.2573 47.7726 48.3806C46.4834 48.7931 44.7934 49.2423 43.4237 49.1662C42.9359 49.1391 43.6635 48.2166 43.7331 48.1393C43.8879 47.9672 43.6968 48.105 43.6217 48.3002C43.5097 48.5914 43.2459 48.8309 43.0897 49.1044C42.9878 49.2827 42.9783 48.7335 42.9783 48.6651C42.9783 48.3269 42.945 48.5991 42.8175 48.3806C42.6488 48.0913 42.6279 47.522 42.5391 47.2114C42.5 47.0746 42.5329 46.6423 42.5329 46.7846C42.5329 46.9581 42.4236 47.2328 42.3597 47.397C42.0946 48.0788 41.7353 48.6695 41.4318 49.3271C41.1396 49.9603 40.9973 50.6555 40.7514 51.3066C40.4115 52.2061 40.4173 53.3343 40.4173 54.2883C40.4173 55.116 40.7281 52.6527 41.0297 51.8819C41.171 51.521 41.1611 51.1452 41.3019 50.7932C41.3908 50.5711 41.3081 51.2715 41.3081 51.5107C41.3081 51.8922 41.3081 52.2737 41.3081 52.6552C41.3081 52.8462 41.3947 52.283 41.4442 52.0984C41.6772 51.2292 41.8879 50.3526 42.137 49.4879C42.4504 48.4004 42.8907 47.3341 43.065 46.2093C43.1006 45.9791 43.3468 45.4572 43.0897 45.8505C42.7683 46.342 42.5329 46.4514 42.5329 47.0506C42.5329 48.7482 42.6991 50.4106 42.9783 52.0861C43.0149 52.3055 43.5245 55.8423 43.1392 55.9524C42.6916 56.0803 41.9552 55.7829 41.7102 55.4018C41.5749 55.1913 41.3754 53.9983 41.0854 54.2883C40.9059 54.4678 40.0833 55.595 40.0833 55.4637C40.0833 55.178 39.9986 54.7437 40.1946 54.511C40.4198 54.2435 40.4173 54.3467 40.4173 54.678C40.4173 54.7505 40.2462 55.0536 40.2008 54.8945C40.1235 54.6239 40.1946 54.2408 40.1946 53.9604C40.1946 53.4591 39.6758 53.3249 39.4152 53.781C39.3367 53.9183 39.1925 54.0133 39.1925 53.7872C39.1925 53.3968 38.9192 53.985 38.8584 54.0718C38.7198 54.2698 37.7635 56.1135 37.7449 55.6492C37.7298 55.2707 37.7659 54.8892 37.7449 54.511C37.7105 53.8925 37.0594 55.397 36.9655 55.5379C36.4943 56.2446 36.6314 55.6129 36.6314 55.0678C36.6314 54.678 36.6314 54.2883 36.6314 53.8986C36.6314 53.3594 36.8828 53.4802 36.4644 53.8986C36.1504 54.2126 35.8879 54.177 35.4622 54.177C34.8742 54.177 35.0319 53.7168 35.3014 53.3295C36.0795 52.211 37.0144 51.3386 38.1656 50.6138C38.9525 50.1183 39.7492 50.7186 39.7492 51.5602C39.7492 52.3693 37.9566 53.1952 37.3799 53.5522C36.7871 53.9192 36.0298 54.511 35.2952 54.511C34.8805 54.511 33.3559 54.3842 34.0951 53.645C34.3158 53.4242 34.4945 53.124 34.6519 52.8408C34.741 52.6803 34.9188 52.4996 35.0478 52.3706C35.2295 52.1889 35.186 52.5249 35.023 52.6181C34.8535 52.7149 34.7857 52.7294 34.5714 52.7294C34.3834 52.7294 34.382 52.9028 34.2312 52.9459C33.9691 53.0208 33.5405 53.2715 33.2909 53.2862C32.479 53.3339 31.6484 53.2862 30.835 53.2862C29.859 53.2862 28.8804 53.3975 27.8905 53.3975C27.377 53.3975 26.1949 53.3995 25.8057 53.0882C25.3277 52.7058 24.2981 53.3749 23.8262 52.7851C23.7226 52.6556 23.4746 52.7642 23.3313 52.7232C23.1783 52.6795 23.2002 52.4312 23.0962 52.4015C22.9088 52.348 22.5874 52.0334 22.49 51.8386" stroke="#FFFAFA" stroke-width="3" stroke-linecap="round"/>
<path d="M23.8262 52.3954C24.9694 52.1723 25.9988 52.6181 27.1667 52.6181C28.1986 52.6181 29.1838 52.7294 30.2288 52.7294C31.1274 52.7294 31.9937 52.1727 32.9012 52.1727C33.4143 52.1727 33.8385 52.1767 34.2931 51.9747C34.7641 51.7654 35.8309 52.0264 34.9611 51.5046" stroke="#FFFAFA" stroke-width="3" stroke-linecap="round"/>
<path d="M36.2974 49.2776C36.2801 49.2772 35.0802 49.1056 35.5736 49.5003C35.702 49.603 35.6293 50.013 35.6293 50.1684C35.6293 51.0753 35.313 50.7494 34.6024 51.1705C34.14 51.4445 33.7512 51.6333 33.2909 51.8634C32.809 52.1044 32.5017 52.5141 32.0661 52.8408" stroke="#FFFAFA" stroke-width="3" stroke-linecap="round"/>
<path d="M19.3722 30.2368C19.3064 30.3916 18.8937 31.0485 19.0444 30.5213C19.0715 30.4263 19.0849 30.6354 18.9268 30.7935C18.5199 31.2004 18.0241 31.4736 17.6154 31.8823C17.3255 32.1721 17.0798 32.4337 16.8978 32.7978C16.7129 33.1675 16.579 33.2644 16.7864 32.7978C17.4229 31.3658 19.2071 30.5708 20.7084 30.5708C21.0687 30.5708 21.3657 30.7529 21.7106 30.7935C22.2337 30.855 21.5592 31.0055 21.3765 31.0162C20.7891 31.0508 19.9998 31.5167 19.4836 31.8204C19.1806 31.9986 18.7632 32.2828 18.5062 32.4885C18.2906 32.661 17.867 32.5884 17.5906 32.7112C17.3206 32.8312 16.8838 32.9858 16.5885 33.0205C16.3387 33.0499 16.0652 33.3805 15.809 33.4659" stroke="#FFFAFA" stroke-width="3" stroke-linecap="round"/>
</svg>

'''
'''--- src/pages/gamePage/assets/LoadingBorders (1).svg ---
<svg width="422" height="73" viewBox="0 0 422 73" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M7.66186 23.1765C9.86545 23.1765 16.4762 23.1765 14.2726 23.1765C11.2954 23.1765 8.39618 21.1421 5.47619 20.9072C4.71845 20.8463 4.71928 20.2285 5.08205 19.7726C5.43546 19.3285 7.14931 19.6105 7.66186 19.6105C8.55399 19.6105 12.8018 18.6133 12.1765 17.8276C11.4554 16.9213 12.0421 17.6219 12.8215 17.6655C14.2683 17.7463 13.0156 18.1521 12.1049 17.2692C11.5008 16.6836 6.63117 12.8028 8.46806 12.8028C10.4209 12.8028 11.7039 13.1338 13.0723 11.7582C13.2088 11.621 13.4608 12.1295 13.6277 12.3345C14.1553 12.9828 14.7316 13.4477 15.3296 14.0275C16.3558 15.0222 17.3031 16.0298 18.6261 16.6209C19.4875 17.0058 19.4498 12.0574 19.5756 11.362C19.82 10.0107 19.2846 11.3757 19.6652 11.7582C20.5214 12.619 22.85 11.0554 23.4632 10.6056C23.6229 10.4884 25.865 8.52953 26.0251 9.09277C26.3256 10.15 26.3093 11.1048 26.8313 12.1544C27.2048 12.9055 27.3058 13.6914 28.4616 13.4331C28.9595 13.3219 28.86 12.7436 29.2678 12.5507C29.5752 12.4052 30.0434 12.8028 30.3965 12.8028C31.8124 12.8028 32.9817 12.8679 34.1049 11.8303C34.4145 11.5443 37.1659 8.93836 37.5805 9.30889C38.0286 9.70925 37.3446 10.9574 37.7239 11.4341C38.3492 12.2198 38.9001 12.8028 39.9812 12.8028C42.1349 12.8028 43.4261 11.6454 44.8721 10.0653C45.0895 9.82772 47.3265 6.75366 47.3265 8.10223C47.3265 11.6455 49.673 8.84333 50.7125 6.98562C51.6806 5.25543 51.8412 6.17146 51.8412 7.61596C51.8412 10.3473 51.5588 13.2592 51.9128 15.9725C52.0943 17.3634 52.4087 18.6431 53.6148 17.1612C54.4325 16.1565 55.3545 15.0812 56.4992 14.4237C58.083 13.5139 59.2543 15.082 60.8705 14.6758C63.0028 14.1399 64.1957 11.785 65.636 10.2814C65.9684 9.93445 66.6751 8.16083 66.6751 9.56103C66.6751 11.2379 66.6624 13.099 68.1262 14.2436C68.9207 14.8648 69.1911 13.3804 69.2549 12.8028C69.4703 10.8543 70.9157 12.9109 71.5839 13.4512C74.0817 15.4709 77.0022 17.4461 79.2158 19.7726C79.4482 20.0168 81.6982 22.3317 81.8136 21.5196C82.0836 19.6195 81.8315 17.5139 81.8315 15.5943C81.8315 14.5788 81.2785 14.3695 81.9927 14.928C85.126 17.3778 86.3115 14.151 86.7403 10.8938C86.9017 9.6681 86.6746 8.00026 87.009 6.82353C87.0382 6.72085 88.6272 11.0259 88.9081 11.6142C89.6778 13.2261 90.3167 14.9495 90.9325 16.6209C91.5511 18.3 92.6171 15.994 93.0465 15.3962C94.9227 12.7847 95.6938 10.5991 98.6719 13.3791C99.3062 13.9712 100.775 14.8555 101.664 15.054C102.355 15.2084 102.536 13.8481 103.276 14.2616C106.003 15.7845 107.448 14.8024 107.648 11.6862C107.683 11.1282 107.952 9.21661 107.952 9.23685C107.952 10.348 108.19 11.7865 108.669 12.8028C109.421 14.4002 109.242 12.7562 109.242 11.8303C109.242 10.9658 109.242 8.37238 109.242 9.23685" stroke="black" stroke-linecap="round"/>
<path d="M108.919 13.7754C111.588 13.7754 112.877 13.8514 114.706 11.6682C115.63 10.565 116.247 9.22087 117.143 8.1203C117.479 7.70648 118.271 6.29465 118.271 7.61603C118.271 10.2076 118.1 13.2059 119.4 15.5584C120.443 17.4457 123.969 14.8018 125.043 14.2617C126.632 13.463 127.996 12.2653 129.558 11.4341C129.769 11.322 130.822 10.4419 130.848 10.8578C130.903 11.7493 130.707 12.7155 130.866 13.5953C131.428 16.7036 135.058 12.132 135.613 11.254C135.793 10.971 137.905 8.41368 137.924 8.46249C138.143 9.01265 137.91 9.94067 137.942 10.5336C137.992 11.4286 140.2 13.4754 140.2 11.6682C140.2 10.4551 146.981 14.4648 147.939 15.0001C149.124 15.6619 148.584 12.2147 148.584 11.2C148.584 10.7899 148.396 9.17047 148.727 9.63313C149.998 11.4069 152.29 12.7648 154.084 13.9375C154.692 14.335 156.228 15.0327 156.646 15.5584C157.033 16.0441 157.284 13.041 157.291 12.7308C157.316 11.5668 157.545 10.403 157.613 9.23691C157.676 8.16038 159.396 9.90855 159.566 10.0474C160.218 10.5796 165.031 14.5036 165.926 13.7034C166.905 12.8289 164.09 9.97394 166.07 11.182C168.001 12.3607 170.544 13.127 172.788 13.127C175.498 13.127 176.268 10.1144 177.858 8.51652C178.352 8.02005 178.543 9.37975 178.574 9.81323C178.652 10.8631 179.621 11.6212 179.846 12.6408C180.455 15.3942 180.169 18.5618 178.718 21.2135C178.195 22.1696 177.607 23.0638 177.607 21.5376C177.607 19.962 178.376 18.7327 179.219 17.4134C180.569 15.3034 182.72 13.9771 184.684 12.4967C185.654 11.7648 187.82 10.5133 188.965 11.4341C189.811 12.1146 190.184 11.1378 190.184 10.5156C190.184 9.62112 190.184 6.93765 190.184 7.83214C190.184 10.9511 190.447 14.2045 189.789 17.2693C189.441 18.8938 189.002 20.5266 188.571 22.132C188.442 22.6118 188.448 23.9127 188.088 24.2751C184.797 27.5834 192.926 16.1948 196.132 12.8029C197.24 11.6294 197.505 10.9508 197.941 9.41701C198.016 9.15436 198.896 9.52066 199.105 9.50706C201.366 9.36044 204.066 7.76405 206.164 6.96767C209.831 5.5756 213.252 3.68796 216.591 1.63675C222.796 -2.17527 206.479 12.1749 200.969 16.9451C199.239 18.4422 196.904 20.1332 200.682 17.8816C205.641 14.9261 210.701 11.4179 214.477 7.00369C215.544 5.7568 217.594 3.77694 217.594 1.94292C217.594 1.33402 217.594 4.4528 217.594 5.02261C217.594 5.979 215.712 11.182 217.272 11.182" stroke="black" stroke-linecap="round"/>
<path d="M217.272 11.5061C219.733 13.9803 222.499 16.2586 225.62 17.8275C226.582 18.311 227.591 19.2906 227.591 17.6654C227.591 17.0459 227.836 15.8225 228.075 15.1981C228.885 13.0812 228.904 10.4273 230.009 8.42639C230.469 7.59541 229.83 9.88541 229.848 10.2094C229.919 11.4847 232.499 12.6943 233.467 13.0549C237.812 14.6725 240.324 9.07942 242.908 6.48132C243.285 6.10235 243.302 5.57931 243.41 6.17516C243.548 6.93487 243.711 7.89404 244.037 8.58848C244.633 9.85737 245.591 11.7992 247.101 12.1364C249.13 12.5897 251.507 7.88699 252.744 6.64341C254.735 4.64233 255.507 10.2852 257.438 10.8397C257.811 10.9469 258.323 10.8577 258.71 10.8577C259.028 10.8577 259.194 9.70906 259.194 10.0293C259.194 11.0618 259.194 12.0944 259.194 13.127" stroke="black" stroke-linecap="round"/>
<path d="M258.549 13.127C259.85 13.6831 261.17 14.3213 262.168 15.3242C263 16.1612 263.472 13.7749 264.102 13.199C265.402 12.011 267.129 10.865 268.474 9.81316C268.636 9.68669 267.901 12.1169 267.901 12.4786C267.901 13.0548 267.539 16.0446 268.545 16.0446C269.252 16.0446 270.206 14.242 270.803 13.7753C272.276 12.6238 273.767 11.469 275.389 10.5336C276.139 10.1011 280.8 7.12804 280.8 8.58849C280.8 9.62624 280.157 10.785 280.495 11.9743C280.959 13.6085 287.275 13.7166 287.894 12.3165C288.471 11.0116 288.539 10.2439 288.539 8.75058C288.539 8.11665 288.217 5.05826 288.217 6.96761C288.217 9.73886 290.047 11.1554 291.764 13.199C292.364 13.9135 295.107 17.8022 295.884 16.0446C296.173 15.391 296.057 14.462 296.296 13.7393C296.908 11.8957 297.804 10.1346 298.536 8.33635C298.663 8.02403 299.503 5.61047 299.503 6.48134C299.503 7.19182 299.5 7.54707 299.826 8.12024C300.672 9.60944 301.874 11.2524 303.212 12.2985C304.148 13.0305 307.638 12.5926 308.353 11.6682C309.209 10.5629 308.6 9.33488 308.873 8.10223C308.991 7.56698 309.5 4.6083 309.5 6.15716C309.5 10.1905 316.066 12.9554 319.192 13.9374C321.544 14.6762 321.609 14.2644 322.865 12.6407C323.682 11.5847 324.151 10.398 324.728 9.23685C325.497 7.69107 324.979 9.98443 324.979 10.9298C324.979 11.9647 325.218 14.4212 326.914 13.7033C332.197 11.467 338.147 10.9237 343.038 7.61596C343.969 6.98612 345.161 5.99842 345.599 4.89647C345.795 4.40594 345.617 5.95302 345.617 6.48134C345.617 8.22268 344.972 9.923 344.972 11.6502C344.972 12.0478 344.483 13.1121 344.722 13.3791C345.115 13.8184 345.5 13.9735 345.635 14.5858C345.687 14.8207 346.262 15.9217 346.262 15.3242C346.262 14.1055 346.262 12.8868 346.262 11.6682C346.262 9.34491 346.262 7.02164 346.262 4.69836" stroke="black" stroke-linecap="round"/>
<path d="M346.585 15.0719C348.11 14.7509 352.712 13.6668 352.712 11.5059C352.712 10.8035 352.712 10.1011 352.712 9.39876C352.712 8.00144 353.116 9.5881 353.375 10.0651C354.22 11.6235 356.917 13.0234 358.445 13.7031C359.794 14.3036 361.591 15.8741 363.031 16.0444C364.119 16.1731 364.279 14.9849 365.109 13.7932C366.332 12.0375 367.666 11.0337 369.319 9.74094C370.605 8.73556 369.773 12.8751 369.803 13.451C369.897 15.2431 373.724 15.6484 374.837 14.8738C376.668 13.5998 378.319 11.9506 380.051 10.5334C380.078 10.5109 382.697 8.61001 382.308 9.56085C381.62 11.2391 379.938 12.6459 382.541 13.451C383.526 13.7559 387.187 13.7836 384.314 14.5856C383.321 14.8631 382.127 15.1414 381.09 15.0719C377.84 14.8541 387.393 13.4167 390.513 12.4784C393.305 11.639 396.681 11.4683 399.274 10.0651C400.393 9.45908 399.587 10.2655 398.987 10.5334C397.406 11.2397 396.133 12.1234 394.884 13.3789C394.404 13.8616 395.939 13.451 396.551 13.451C398.164 13.451 399.614 13.5887 401.101 14.2614C402.446 14.8697 403.97 14.8848 405.275 15.4681C407.065 16.2677 405.019 15.085 404.308 14.7477C403.183 14.2135 402.03 13.9078 400.922 13.2889C400.225 12.8997 400.399 12.1339 399.972 11.8481C399.307 11.4019 401.573 11.8301 402.373 11.8301C404.406 11.8301 405.97 12.1033 407.927 12.5505C408.692 12.7254 413.082 14.0542 411.259 15.4681C408.073 17.9388 404.227 19.6589 400.94 21.8616C399.877 22.5742 403.496 21.8796 404.774 21.8796C405.5 21.8796 407.822 21.464 408.429 21.9516C409.305 22.6564 407.882 22.7559 407.372 23.0322C406.145 23.6961 404.937 24.0592 403.842 24.9593C402.796 25.8195 403.532 26.5836 404.38 27.1385C405.902 28.1349 407.744 30.0484 408.823 31.5329C409.306 32.1982 409.702 32.8052 409.45 33.6941C409.275 34.3076 403.808 33.8741 403.036 33.8741C402.658 33.8741 399.961 33.6618 400.438 34.1983C402.079 36.042 403.733 37.8276 405.67 39.3852C407.5 40.857 409.018 41.4999 408.518 43.7616C408.216 45.1264 408.021 47.0353 406.547 47.1834C404.833 47.3558 403.215 47.4896 401.477 47.4896C400.282 47.4896 400.012 47.3936 401.334 47.8858C402.984 48.5001 407.059 51.0897 407.551 52.8205C408.166 54.9871 408.095 57.7534 406.959 59.8083C406.32 60.9659 406.424 60.5456 406.225 59.6463C406.091 59.0396 403.981 58.059 403.52 57.7192C403.101 57.4102 401.301 56.6009 401.334 56.6386C401.806 57.1728 401.927 57.9194 402.445 58.4396C403.595 59.5956 403.663 57.4364 403.663 56.4045C403.663 55.9039 402.701 55.3304 403.09 55.0177C403.803 54.4439 406.416 55.0338 407.21 55.1078C409.743 55.3435 412.21 55.9276 414.735 56.1704C416.212 56.3124 417.61 56.6055 419.07 56.8187C419.199 56.8375 421.094 56.8742 421.023 57.0528C420.828 57.5427 415.003 58.3581 414.376 58.5116C411.27 59.2733 407.537 60.7127 404.451 59.8264C403.75 59.6248 402.784 59.8083 402.051 59.8083C401.525 59.8083 401.559 59.8281 401.388 60.2586C401.346 60.3635 400.558 58.9572 400.438 58.7638C399.788 57.7106 399.432 56.5158 398.826 55.45C398.453 54.7937 396.568 59.1772 396.407 59.4662C395.643 60.8414 395.024 62.9105 394.06 64.0947C393.413 64.8902 393.655 63.4929 393.415 62.798C392.804 61.0229 391.448 60.1325 389.635 60.1325C388.476 60.1325 388.325 60.227 387.539 61.1051C386.289 62.5011 385.311 63.619 383.741 64.671C380.549 66.81 378.725 62.9427 376.736 60.943C375.704 59.9057 375.978 61.0277 375.285 61.1051C373.893 61.2605 372.519 61.6298 371.111 61.7714C370.185 61.8644 368.873 61.787 368.836 62.798C368.792 63.9765 367.823 66.175 367.223 67.1924C366.923 67.7016 366.457 68.6611 366.094 67.7147C365.164 65.2833 364.671 62.643 363.694 60.1865C363.285 59.1597 361.389 52.9106 360.129 55.594C358.681 58.6761 357.055 61.5518 355.238 64.4369C353.937 66.5014 352.619 68.5538 351.314 70.6143C350.905 71.2615 350.297 71.3958 349.827 71.947C349.243 72.6321 344.305 66.4611 343.682 65.5715C343.208 64.8942 342.364 64.0462 341.586 63.6985C341.359 63.5969 340.241 62.2007 340.153 62.5999C339.923 63.6416 339.813 64.8912 339.813 65.9677C339.813 67.312 338.965 63.2202 338.845 62.798C338.394 61.2111 337.872 59.4737 337.072 58.0254C336.421 56.8477 336.188 59.1928 336.015 59.7363C335.41 61.6258 335.09 62.7259 332.897 62.7259C331.474 62.7259 330.631 62.361 329.816 61.1771C329.578 60.8319 327.953 58.884 327.559 59.3041C327.019 59.8783 327.083 61.3481 326.914 62.0776C326.526 63.7514 326.262 65.4505 325.785 67.1023C325.554 67.9018 324.662 72.1517 324.011 69.3716C323.483 67.1128 322.792 64.9253 322.076 62.7259C321.75 61.721 321.507 60.3522 320.715 59.5562C318.579 57.4089 318.076 61.5072 317.418 62.5458C317.069 63.0977 316.751 63.8872 316.2 64.2748C315.829 64.536 313.931 61.9821 313.62 61.6814C312.878 60.9616 312.004 60.1325 310.951 60.1325C309.967 60.1325 310.847 61.3183 310.306 61.7534C308.846 62.9279 307.044 61.1051 305.487 61.1051C304.184 61.1051 305.19 61.8775 304.34 62.3297C303.642 62.7014 302.682 61.9823 302.083 61.6814C300.961 61.1175 300.095 60.7809 298.858 60.7809C297.399 60.7809 296.33 63.4641 295.813 64.653C295.668 64.9861 295.159 66.9961 294.738 65.8957C294.025 64.0327 293.401 62.24 292.48 60.4567C292.16 59.837 291.046 57.259 290.008 57.5571C289.511 57.7 289.829 60.569 289.829 61.1051C289.829 63.7303 288.115 60.4116 286.926 59.8804C285.208 59.1126 285.408 62.4018 283.863 62.4018C281.318 62.4018 278.502 61.2064 275.962 60.7809" stroke="black" stroke-linecap="round"/>
<path d="M274.672 60.7811C274.228 60.4529 268.812 56.1949 268.563 57.0711C268.082 58.7654 268.545 61.315 268.545 63.0504C268.545 63.7086 268.233 64.0229 267.578 64.0229C266.295 64.0229 266.032 62.6886 265.464 61.7537C263.948 59.2603 261.439 58.1877 258.71 58.1877C257.97 58.1877 257.068 60.2055 256.596 60.7991C255.215 62.5349 254.171 64.5261 252.816 66.2921C250.898 68.7908 251.238 67.2512 250.003 65.3196C249.637 64.7471 246.617 61.6967 246.617 63.6987C246.617 64.8217 245.759 62.5534 245.47 62.0778C244.693 60.7985 243.392 59.9611 242.174 59.1602C240.057 57.7689 241.888 61.5233 240.938 61.7356C238.277 62.3301 235.245 60.1465 233.145 58.8361C232.805 58.624 231.171 57.4269 231.138 58.2597C231.107 59.0431 231.138 59.8348 231.138 60.619C231.138 61.1232 231.566 62.5077 230.493 61.4295C229.795 60.7275 229.701 59.4778 229.024 58.674C223.961 52.6582 226.868 65.6067 224.366 64.275C223.819 63.984 223.419 62.8462 223.076 62.33C222.175 60.9713 220.842 59.6274 219.529 58.674C218.526 57.9461 217.945 57.1372 216.627 57.2152C215.958 57.2547 216.314 60.0433 216.286 60.493C216.155 62.5988 215.562 64.9375 214.871 66.9225C214.807 67.1059 214.65 69.6719 213.796 68.8135C213.47 68.4857 213.196 67.056 213.008 66.5443C212.383 64.8495 211.812 63.1246 211.145 61.4475C210.584 60.0391 209.521 58.2664 208.26 57.3953C207.72 57.022 206.427 56.3929 206.307 57.5394C205.972 60.7441 205.42 64.8593 203.728 67.6609C202.226 70.1479 201.7 67.263 200.664 65.6438C199.876 64.4113 197.985 62.303 196.311 62.402C195.428 62.4542 196.413 65.829 195.809 66.4362C195.167 67.0821 194.032 64.1548 193.802 63.7708C192.851 62.1773 192.143 61.442 190.506 60.619C188.087 59.4034 186.959 60.3459 186.959 62.7982C186.959 64.7044 186.139 67.7181 183.895 68.2192C183.147 68.3864 182.343 66.9295 181.943 66.4542C180.651 64.9202 179.374 63.8289 177.679 62.7982C177.25 62.5379 175.35 61.2078 175.35 62.2399C175.35 62.6536 175.583 63.99 175.027 64.0229C174.034 64.0817 173.94 63.4884 173.092 63.0504C171.032 61.9854 168.8 61.7537 166.499 61.7537C164.324 61.7537 162.106 62.1005 160.516 63.6987C160.214 64.0019 159.809 65.5921 159.692 65.6258C158.678 65.917 156.202 60.9712 155.105 60.2768C152.958 58.9179 152.776 60.7414 152.776 62.402" stroke="black" stroke-linecap="round"/>
<path d="M150.519 60.781C148.816 60.1871 147.627 59.3627 146.255 58.2597C145.986 58.0431 146.004 60.396 146.004 60.601C146.004 63.3702 145.954 66.3036 143.998 68.4893C142.514 70.1461 141.734 65.4545 141.167 64.5991C140.679 63.8631 137.208 59.6648 136.33 61.4294" stroke="black" stroke-linecap="round"/>
<path d="M148.262 60.4568C149.644 61.2507 151.838 62.4019 153.421 62.4019" stroke="black" stroke-linecap="round"/>
<path d="M136.653 62.0777C135.419 61.8358 132.251 61.1831 131.35 60.2767C129.623 58.5408 129.881 60.7142 129.881 62.2398C129.881 63.4575 130.348 65.9064 129.486 66.8683C128.668 67.7819 128.63 65.7463 128.573 65.1394C128.384 63.1437 127.266 60.6471 126.011 59.0881C125.377 58.3012 120.851 54.1222 120.851 57.3771C120.851 58.1876 120.851 58.998 120.851 59.8085C120.851 61.8253 118.968 63.5505 117.788 64.9953C116.695 66.3324 115.106 68.2115 113.291 68.5432C111.685 68.8367 111.556 64.8143 111.32 63.8067C111.275 63.615 110.384 60.0873 109.887 60.9611C109.427 61.7701 109.839 62.5923 109.493 63.3744C108.996 64.497 107.793 67.5186 106.483 67.8949C105.502 68.1767 105.222 62.5672 103.581 62.0957C101.551 61.5126 99.6809 63.3849 99.5677 65.3195C99.5481 65.6553 98.9522 62.3224 98.7436 61.5734C98.1475 59.4333 97.4161 58.1876 95.1247 58.1876C91.813 58.1876 91.1156 61.5405 89.5888 63.8427C88.9208 64.8501 89.1326 61.3129 88.281 60.4568C86.8795 59.0479 83.8587 59.7516 82.6377 60.9791C80.7393 62.8875 78.8907 66.0678 76.4927 67.3366C75.6217 67.7974 76.0269 64.152 76.0269 63.3924C76.0269 57.6802 68.4954 66.1466 67.5171 67.8949C66.64 69.4624 66.9976 65.9939 66.9976 65.3375C66.9976 63.1764 66.0672 62.3561 63.7728 63.4465C61.8007 64.3836 60.21 65.8169 58.4699 67.0664C57.5142 67.7526 59.7598 64.9512 59.7598 63.7706C59.7598 63.0717 57.6129 65.5514 57.3949 65.9678C56.2882 68.0817 57.3614 63.5076 57.4666 62.8882C57.5586 62.3464 58.5359 57.215 57.6457 57.215C56.5956 57.215 55.9233 59.4664 55.693 60.2767C55.4703 61.0601 54.1592 60.7452 53.5969 60.799C51.9314 60.9585 50.2678 61.9635 48.6881 62.4739C46.2243 63.27 44.9326 60.8828 42.7402 60.2047C41.5966 59.851 40.9119 60.3362 40.232 61.1052C39.8743 61.5097 39.9095 63.2248 39.9095 62.564C39.9095 61.6198 40.5047 60.7089 40.5545 59.8085C40.6727 57.6688 39.6542 60.6476 39.4258 61.2853C38.7553 63.1577 38.0785 65.0324 37.491 66.9224C37.2189 67.7976 37.0072 68.586 37.0072 67.1925C37.0072 65.8414 38.7095 61.7609 37.5805 60.853C36.6933 60.1395 36.2541 61.9584 36.0398 62.4019C35.4423 63.6386 34.7625 64.631 34.1049 65.7877C33.4741 66.8975 29.8855 66.292 28.802 66.292C27.2289 66.292 28.3832 61.2233 28.3004 59.8085C28.0782 56.0124 25.2764 66.8172 24.359 70.5063C24.0506 71.7464 23.8144 71.9197 23.302 70.9926C22.6464 69.8063 21.9228 68.6986 21.1342 67.5887C20.0852 66.1123 19.529 64.2223 18.7873 62.582C18.5713 62.1042 18.492 60.5114 18.9485 61.4294" stroke="black" stroke-linecap="round"/>
<path d="M19.5934 59.8086C17.9949 59.8086 15.9927 60.1542 15.1504 61.7536C14.9054 62.2188 14.5692 63.1735 13.9321 63.3565C12.5977 63.7398 9.33152 68.2185 8.14546 67.2646C7.5471 66.7834 7.30791 62.2504 7.85881 61.5735C9.25202 59.8617 10.6557 58.1805 12.1764 56.5668C12.5583 56.1615 12.5189 55.8835 13.1438 55.9184C13.8797 55.9595 13.5423 56.7507 13.968 56.8729C14.9241 57.1476 16.4928 56.891 14.2546 56.891C11.3212 56.891 8.62177 56.0682 5.9777 54.9459C4.32765 54.2455 2.9236 53.0451 1.37345 52.3525C0.0337639 51.7539 2.69471 51.4045 3.14707 51.3799C5.57629 51.2479 8.57001 50.3455 10.8865 49.597C12.1398 49.192 15.0047 49.041 15.9745 48.0661C16.3038 47.735 13.0291 47.0632 12.8393 47.0035C11.3119 46.5237 9.79866 45.9012 8.3067 45.4727C7.51093 45.2442 5.40441 44 5.40441 42.9513C5.40441 42.2426 9.41026 41.2243 9.937 41.0063C12.3198 40.0199 15.4091 38.0518 17.981 37.7645C19.4482 37.6006 15.6077 37.3558 15.222 37.2782C13.061 36.8437 10.8719 36.5284 8.70084 36.0716C7.92784 35.9089 5.15223 35.3578 4.75946 34.6668C3.95679 33.2547 5.63312 33.1111 6.69432 32.5777C8.29103 31.7751 10.2901 30.7118 12.0152 30.3264C12.9728 30.1125 13.4499 30.3216 14.2725 29.6601C14.6362 29.3676 16.3295 28.1224 14.7562 28.0392C12.284 27.9084 9.73803 27.849 7.33927 27.715C4.15339 27.5371 7.0761 25.6089 7.98422 24.7974C8.8457 24.0276 10.2877 24.0103 11.3702 23.8429C12.531 23.6634 13.936 23.1765 15.0787 23.1765" stroke="black" stroke-linecap="round"/>
</svg>

'''
'''--- src/pages/gamePage/assets/LoadingBorders.svg ---
<svg width="264" height="47" viewBox="0 0 264 47" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M4.73514 15.2301C6.10981 15.2301 10.2338 15.2301 8.85915 15.2301C7.00189 15.2301 5.19323 13.9676 3.37165 13.8219C2.89895 13.784 2.89946 13.4006 3.12577 13.1178C3.34624 12.8422 4.4154 13.0172 4.73514 13.0172C5.29168 13.0172 7.94162 12.3983 7.55154 11.9107C7.10165 11.3484 7.46767 11.7831 7.95388 11.8101C8.85645 11.8603 8.07498 12.1121 7.50684 11.5643C7.12997 11.2009 4.09216 8.79258 5.23807 8.79258C6.45631 8.79258 7.25672 8.99799 8.11035 8.14436C8.1955 8.05921 8.3527 8.37474 8.45681 8.502C8.78593 8.90426 9.14546 9.19279 9.51855 9.55256C10.1587 10.1698 10.7497 10.7951 11.575 11.1619C12.1124 11.4008 12.0888 8.33001 12.1673 7.89848C12.3198 7.0599 11.9858 7.90695 12.2232 8.14436C12.7573 8.6785 14.21 7.70823 14.5925 7.42908C14.6922 7.35638 16.0909 6.14076 16.1907 6.49028C16.3782 7.14633 16.368 7.73889 16.6937 8.39023C16.9267 8.85629 16.9896 9.34398 17.7107 9.18374C18.0213 9.11472 17.9592 8.75583 18.2136 8.63611C18.4054 8.54587 18.6975 8.79258 18.9177 8.79258C19.801 8.79258 20.5305 8.83298 21.2312 8.18906C21.4243 8.01162 23.1407 6.39446 23.3994 6.6244C23.6789 6.87285 23.2522 7.64742 23.4888 7.94319C23.8789 8.43081 24.2226 8.79258 24.897 8.79258C26.2405 8.79258 27.046 8.07432 27.9481 7.0938C28.0837 6.94637 29.4792 5.03873 29.4792 5.87559C29.4792 8.07438 30.943 6.33549 31.5915 5.18267C32.1954 4.10899 32.2956 4.67744 32.2956 5.57384C32.2956 7.26876 32.1195 9.07581 32.3403 10.7596C32.4535 11.6227 32.6496 12.4168 33.402 11.4972C33.9121 10.8737 34.4873 10.2065 35.2014 9.79843C36.1895 9.23383 36.9202 10.207 37.9284 9.9549C39.2586 9.62235 40.0028 8.16097 40.9013 7.22791C41.1086 7.0126 41.5495 5.91196 41.5495 6.78087C41.5495 7.82149 41.5416 8.97642 42.4547 9.68667C42.9504 10.0722 43.119 9.15104 43.1588 8.79258C43.2932 7.58339 44.1949 8.85965 44.6117 9.19492C46.17 10.4483 47.9918 11.674 49.3728 13.1178C49.5177 13.2693 50.9213 14.7058 50.9933 14.2018C51.1618 13.0227 51.0045 11.7161 51.0045 10.5249C51.0045 9.89468 50.6595 9.76481 51.1051 10.1114C53.0597 11.6316 53.7993 9.62919 54.0668 7.6079C54.1675 6.84731 54.0258 5.81232 54.2344 5.08209C54.2526 5.01837 55.2439 7.68989 55.4191 8.05495C55.8993 9.05529 56.2979 10.1247 56.682 11.1619C57.0679 12.2039 57.7329 10.7729 58.0008 10.4019C59.1712 8.78136 59.6523 7.42507 61.5101 9.15022C61.9058 9.51765 62.822 10.0664 63.3765 10.1896C63.8076 10.2854 63.9205 9.44126 64.3824 9.69785C66.0835 10.6429 66.9846 10.0334 67.1094 8.09965C67.1317 7.7534 67.2994 6.56714 67.2994 6.57969C67.2994 7.26921 67.4477 8.16192 67.7464 8.79258C68.216 9.78387 68.1041 8.76366 68.1041 8.18906C68.1041 7.65261 68.1041 6.04324 68.1041 6.57969" stroke="black" stroke-linecap="round"/>
<path d="M67.9029 9.39615C69.5677 9.39615 70.3719 9.4433 71.5128 8.08854C72.0893 7.4039 72.474 6.5698 73.0328 5.88683C73.2429 5.63003 73.7369 4.7539 73.7369 5.5739C73.7369 7.18213 73.6299 9.04274 74.441 10.5026C75.0916 11.6738 77.291 10.0331 77.9615 9.69791C78.9527 9.20227 79.8036 8.45903 80.7779 7.94325C80.9093 7.87364 81.5664 7.32749 81.5825 7.58561C81.6171 8.13886 81.4944 8.7384 81.5937 9.28439C81.9444 11.2133 84.2087 8.3763 84.5554 7.83148C84.6672 7.65583 85.985 6.06889 85.9971 6.09918C86.1337 6.44059 85.9879 7.01648 86.0083 7.38444C86.0392 7.93982 87.4165 9.20999 87.4165 8.08854C87.4165 7.33569 91.6467 9.82395 92.2446 10.1561C92.9839 10.5669 92.6469 8.42766 92.6469 7.79796C92.6469 7.54347 92.5296 6.53852 92.7364 6.82563C93.5289 7.92636 94.9585 8.76903 96.078 9.49673C96.4575 9.74341 97.4153 10.1764 97.6762 10.5026C97.9174 10.804 98.0745 8.94044 98.0786 8.74793C98.0939 8.02559 98.2372 7.30339 98.2797 6.57975C98.319 5.9117 99.3919 6.99655 99.4979 7.08268C99.9044 7.41294 102.907 9.84807 103.465 9.35144C104.076 8.80879 102.32 7.03712 103.555 7.78678C104.76 8.51826 106.346 8.99381 107.746 8.99381C109.436 8.99381 109.917 7.12431 110.909 6.13271C111.217 5.82462 111.336 6.66839 111.356 6.93739C111.404 7.58892 112.009 8.05937 112.149 8.69205C112.529 10.4007 112.35 12.3664 111.445 14.0119C111.119 14.6052 110.752 15.1601 110.752 14.2131C110.752 13.2353 111.232 12.4724 111.758 11.6537C112.6 10.3444 113.942 9.52129 115.167 8.60264C115.772 8.14848 117.124 7.37185 117.838 7.94325C118.366 8.36551 118.598 7.75937 118.598 7.37326C118.598 6.81818 118.598 5.15293 118.598 5.70801C118.598 7.64351 118.762 9.66245 118.352 11.5643C118.135 12.5724 117.861 13.5857 117.592 14.5819C117.512 14.8797 117.515 15.687 117.29 15.9119C115.237 17.9648 120.309 10.8976 122.309 8.79264C123 8.06444 123.165 7.64331 123.437 6.69151C123.484 6.52852 124.033 6.75584 124.164 6.7474C125.574 6.65641 127.258 5.66575 128.567 5.17155C130.855 4.30769 132.989 3.1363 135.072 1.86341C138.943 -0.502178 128.764 8.40295 125.326 11.3632C124.247 12.2922 122.79 13.3416 125.147 11.9443C128.241 10.1102 131.397 7.9332 133.753 5.19391C134.418 4.42014 135.698 3.19152 135.698 2.0534C135.698 1.67554 135.698 3.61093 135.698 3.96453C135.698 4.55803 134.523 7.78678 135.496 7.78678" stroke="black" stroke-linecap="round"/>
<path d="M135.496 7.98788C137.032 9.5233 138.757 10.9371 140.704 11.9107C141.305 12.2107 141.934 12.8187 141.934 11.8101C141.934 11.4257 142.087 10.6665 142.236 10.279C142.741 8.96532 142.753 7.31842 143.443 6.07675C143.729 5.56109 143.331 6.98216 143.342 7.1832C143.386 7.97463 144.995 8.72526 145.6 8.94903C148.31 9.95285 149.877 6.482 151.49 4.86973C151.725 4.63455 151.735 4.30997 151.802 4.67973C151.888 5.15118 151.99 5.7464 152.194 6.17734C152.565 6.96476 153.163 8.16979 154.105 8.37905C155.37 8.66031 156.854 5.74203 157.625 4.97031C158.867 3.72852 159.349 7.23025 160.553 7.57436C160.786 7.6409 161.105 7.58554 161.347 7.58554C161.546 7.58554 161.649 6.87273 161.649 7.07143C161.649 7.7122 161.649 8.35297 161.649 8.99374" stroke="black" stroke-linecap="round"/>
<path d="M161.246 8.99376C162.058 9.33889 162.882 9.73488 163.504 10.3573C164.023 10.8767 164.318 9.39585 164.711 9.03846C165.522 8.30123 166.599 7.59005 167.438 6.93734C167.539 6.85886 167.08 8.36692 167.08 8.59141C167.08 8.94895 166.855 10.8043 167.483 10.8043C167.923 10.8043 168.519 9.6857 168.891 9.3961C169.81 8.68149 170.74 7.96491 171.752 7.38439C172.22 7.11603 175.127 5.27106 175.127 6.17736C175.127 6.82135 174.726 7.5404 174.937 8.27848C175.227 9.29256 179.167 9.35967 179.553 8.49083C179.913 7.68102 179.955 7.20463 179.955 6.27795C179.955 5.88455 179.754 3.98664 179.754 5.1715C179.754 6.89123 180.896 7.77025 181.967 9.03846C182.341 9.48181 184.053 11.895 184.537 10.8043C184.718 10.3987 184.645 9.8222 184.795 9.37375C185.176 8.2297 185.735 7.1368 186.192 6.02089C186.271 5.82708 186.795 4.32932 186.795 4.86975C186.795 5.31064 186.793 5.53109 186.996 5.88678C187.524 6.81092 188.274 7.83048 189.109 8.47965C189.693 8.9339 191.87 8.66215 192.316 8.08849C192.85 7.40262 192.47 6.64054 192.64 5.8756C192.714 5.54345 193.031 3.70741 193.031 4.66858C193.031 7.17151 197.128 8.88727 199.078 9.49668C200.545 9.95514 200.585 9.69959 201.369 8.692C201.879 8.03666 202.171 7.30028 202.531 6.5797C203.011 5.62045 202.688 7.04362 202.688 7.63026C202.688 8.27247 202.837 9.79688 203.895 9.35139C207.191 7.96366 210.902 7.62647 213.953 5.57385C214.534 5.18299 215.278 4.57007 215.551 3.88624C215.673 3.58184 215.563 4.54189 215.563 4.86975C215.563 5.95035 215.16 7.0055 215.16 8.07731C215.16 8.32405 214.855 8.98451 215.004 9.15022C215.249 9.42282 215.489 9.51908 215.574 9.89903C215.606 10.0448 215.965 10.728 215.965 10.3573C215.965 9.601 215.965 8.84474 215.965 8.08849C215.965 6.64676 215.965 5.20503 215.965 3.76331" stroke="black" stroke-linecap="round"/>
<path d="M216.166 10.2007C217.118 10.0016 219.988 9.32879 219.988 7.98785C219.988 7.55198 219.988 7.11611 219.988 6.68024C219.988 5.81312 220.24 6.79774 220.402 7.09376C220.929 8.0608 222.612 8.92952 223.565 9.35135C224.407 9.72397 225.527 10.6986 226.426 10.8043C227.105 10.8841 227.205 10.1467 227.722 9.40723C228.485 8.31775 229.317 7.69483 230.349 6.89259C231.151 6.26869 230.632 8.8375 230.65 9.19488C230.709 10.307 233.097 10.5585 233.791 10.0778C234.933 9.28722 235.963 8.26382 237.043 7.38434C237.06 7.37037 238.694 6.19077 238.451 6.78083C238.023 7.82231 236.973 8.69527 238.597 9.19488C239.212 9.38408 241.495 9.40128 239.703 9.89898C239.083 10.0712 238.338 10.2439 237.691 10.2007C235.664 10.0656 241.624 9.17363 243.57 8.59137C245.311 8.07044 247.418 7.96453 249.035 7.09376C249.734 6.71767 249.23 7.21812 248.856 7.38434C247.87 7.82263 247.076 8.37103 246.297 9.15018C245.997 9.44972 246.955 9.19488 247.336 9.19488C248.343 9.19488 249.247 9.28032 250.175 9.69781C251.014 10.0753 251.965 10.0847 252.779 10.4466C253.896 10.9428 252.619 10.2089 252.176 9.99957C251.474 9.66805 250.755 9.47837 250.063 9.0943C249.629 8.85279 249.737 8.37754 249.471 8.2002C249.056 7.92329 250.469 8.18903 250.969 8.18903C252.237 8.18903 253.212 8.35857 254.433 8.63607C254.911 8.74462 257.649 9.56922 256.512 10.4466C254.525 11.9799 252.125 13.0473 250.075 14.4142C249.411 14.8564 251.669 14.4253 252.466 14.4253C252.92 14.4253 254.368 14.1674 254.746 14.47C255.293 14.9074 254.405 14.9691 254.087 15.1406C253.322 15.5526 252.568 15.7779 251.885 16.3365C251.233 16.8703 251.692 17.3445 252.22 17.6888C253.17 18.3071 254.319 19.4945 254.992 20.4158C255.294 20.8286 255.541 21.2053 255.383 21.7569C255.274 22.1376 251.864 21.8687 251.382 21.8687C251.146 21.8687 249.464 21.7369 249.762 22.0698C250.785 23.214 251.817 24.322 253.025 25.2886C254.167 26.2019 255.114 26.6009 254.802 28.0044C254.614 28.8514 254.492 30.0359 253.573 30.1279C252.503 30.2348 251.494 30.3179 250.41 30.3179C249.664 30.3179 249.496 30.2583 250.32 30.5637C251.35 30.9449 253.892 32.5519 254.199 33.626C254.583 34.9705 254.538 36.6872 253.83 37.9624C253.431 38.6807 253.496 38.4199 253.372 37.8618C253.288 37.4853 251.972 36.8768 251.684 36.6659C251.422 36.4742 250.3 35.9719 250.32 35.9954C250.615 36.3269 250.691 36.7901 251.013 37.113C251.731 37.8303 251.773 36.4904 251.773 35.8501C251.773 35.5394 251.173 35.1836 251.416 34.9895C251.861 34.6334 253.491 34.9995 253.986 35.0454C255.566 35.1917 257.105 35.5541 258.68 35.7048C259.602 35.7929 260.474 35.9748 261.385 36.1071C261.465 36.1188 262.647 36.1416 262.603 36.2524C262.481 36.5564 258.847 37.0624 258.457 37.1577C256.519 37.6304 254.19 38.5236 252.265 37.9735C251.827 37.8485 251.225 37.9624 250.767 37.9624C250.44 37.9624 250.461 37.9746 250.354 38.2418C250.328 38.3069 249.836 37.4342 249.762 37.3141C249.356 36.6606 249.134 35.9192 248.756 35.2577C248.523 34.8505 247.347 37.5707 247.247 37.75C246.77 38.6034 246.384 39.8874 245.783 40.6223C245.379 41.116 245.53 40.2489 245.381 39.8176C244.999 38.716 244.153 38.1635 243.022 38.1635C242.299 38.1635 242.205 38.2222 241.715 38.767C240.935 39.6334 240.325 40.3271 239.345 40.9799C237.354 42.3073 236.216 39.9074 234.976 38.6665C234.332 38.0228 234.502 38.719 234.07 38.767C233.202 38.8635 232.345 39.0927 231.466 39.1806C230.889 39.2383 230.07 39.1903 230.047 39.8176C230.02 40.5489 229.415 41.9132 229.041 42.5446C228.854 42.8606 228.563 43.456 228.337 42.8687C227.757 41.3599 227.449 39.7214 226.839 38.1971C226.584 37.5598 225.402 33.6819 224.615 35.3471C223.712 37.2597 222.698 39.0443 221.564 40.8346C220.753 42.1158 219.93 43.3895 219.117 44.6681C218.861 45.0697 218.482 45.1531 218.189 45.4951C217.825 45.9202 214.744 42.0908 214.356 41.5387C214.06 41.1184 213.533 40.5922 213.048 40.3764C212.906 40.3134 212.209 39.447 212.154 39.6947C212.01 40.3411 211.941 41.1166 211.941 41.7846C211.941 42.6188 211.413 40.0796 211.338 39.8176C211.057 38.8329 210.731 37.7547 210.231 36.8559C209.825 36.1251 209.681 37.5804 209.572 37.9177C209.195 39.0902 208.996 39.7729 207.627 39.7729C206.74 39.7729 206.214 39.5465 205.705 38.8118C205.557 38.5975 204.543 37.3887 204.297 37.6494C203.96 38.0058 204 38.9178 203.895 39.3706C203.653 40.4092 203.488 41.4636 203.191 42.4887C203.046 42.9848 202.49 45.6222 202.084 43.8969C201.754 42.4952 201.323 41.1377 200.877 39.7729C200.673 39.1493 200.522 38.2999 200.028 37.8059C198.695 36.4734 198.381 39.0166 197.971 39.6611C197.753 40.0036 197.555 40.4935 197.211 40.7341C196.98 40.8961 195.795 39.3113 195.602 39.1247C195.139 38.678 194.593 38.1635 193.937 38.1635C193.323 38.1635 193.872 38.8994 193.534 39.1694C192.623 39.8982 191.499 38.767 190.528 38.767C189.715 38.767 190.343 39.2464 189.813 39.527C189.377 39.7577 188.778 39.3114 188.404 39.1247C187.705 38.7748 187.164 38.5659 186.393 38.5659C185.482 38.5659 184.816 40.231 184.493 40.9688C184.402 41.1755 184.085 42.4228 183.822 41.7399C183.378 40.5838 182.989 39.4713 182.414 38.3647C182.214 37.9801 181.519 36.3803 180.872 36.5653C180.561 36.654 180.76 38.4344 180.76 38.767C180.76 40.3962 179.691 38.3367 178.949 38.0071C177.877 37.5306 178.002 39.5717 177.038 39.5717C175.451 39.5717 173.694 38.83 172.11 38.5659" stroke="black" stroke-linecap="round"/>
<path d="M171.305 38.566C171.028 38.3623 167.649 35.72 167.494 36.2637C167.193 37.3151 167.483 38.8973 167.483 39.9742C167.483 40.3827 167.288 40.5777 166.879 40.5777C166.078 40.5777 165.915 39.7497 165.56 39.1695C164.615 37.6222 163.049 36.9566 161.347 36.9566C160.885 36.9566 160.323 38.2088 160.028 38.5772C159.166 39.6543 158.515 40.89 157.67 41.9859C156.474 43.5365 156.686 42.5811 155.915 41.3824C155.687 41.0271 153.803 39.1341 153.803 40.3765C153.803 41.0734 153.268 39.6658 153.088 39.3707C152.603 38.5768 151.791 38.0571 151.031 37.5601C149.711 36.6967 150.853 39.0266 150.26 39.1583C148.6 39.5272 146.709 38.1722 145.398 37.359C145.186 37.2274 144.167 36.4845 144.147 37.0013C144.127 37.4874 144.147 37.9787 144.147 38.4654C144.147 38.7783 144.413 39.6374 143.744 38.9683C143.309 38.5327 143.25 37.7572 142.828 37.2584C139.669 33.5252 141.483 41.5606 139.922 40.7342C139.581 40.5536 139.331 39.8475 139.117 39.5271C138.555 38.684 137.724 37.85 136.905 37.2584C136.279 36.8067 135.917 36.3047 135.094 36.3531C134.677 36.3776 134.899 38.1081 134.882 38.3872C134.8 39.6939 134.43 41.1453 133.999 42.3771C133.959 42.4909 133.861 44.0833 133.328 43.5506C133.125 43.3471 132.954 42.4599 132.836 42.1424C132.447 41.0906 132.09 40.0203 131.674 38.9795C131.325 38.1055 130.661 37.0054 129.875 36.4649C129.538 36.2332 128.731 35.8428 128.657 36.5543C128.447 38.543 128.103 41.0967 127.047 42.8353C126.11 44.3786 125.782 42.5884 125.136 41.5836C124.644 40.8187 123.465 39.5104 122.42 39.5718C121.869 39.6042 122.484 41.6985 122.107 42.0753C121.707 42.4761 120.999 40.6596 120.856 40.4212C120.262 39.4324 119.821 38.9761 118.799 38.4654C117.29 37.711 116.586 38.2959 116.586 39.8177C116.586 41.0006 116.075 42.8708 114.675 43.1817C114.208 43.2855 113.707 42.3814 113.457 42.0865C112.651 41.1345 111.855 40.4573 110.797 39.8177C110.53 39.6562 109.344 38.8308 109.344 39.4713C109.344 39.7279 109.49 40.5573 109.143 40.5777C108.523 40.6142 108.464 40.246 107.936 39.9742C106.651 39.3133 105.258 39.1695 103.823 39.1695C102.466 39.1695 101.082 39.3847 100.09 40.3765C99.9021 40.5647 99.6493 41.5515 99.5762 41.5724C98.9437 41.7531 97.3994 38.6839 96.715 38.2531C95.3756 37.4097 95.2621 38.5413 95.2621 39.5718" stroke="black" stroke-linecap="round"/>
<path d="M93.854 38.5659C92.7916 38.1974 92.0496 37.6857 91.194 37.0013C91.0261 36.8669 91.0376 38.327 91.0376 38.4542C91.0376 40.1726 91.0065 41.993 89.7858 43.3493C88.8605 44.3775 88.3739 41.4661 88.02 40.9353C87.7155 40.4785 85.55 37.8732 85.0024 38.9683" stroke="black" stroke-linecap="round"/>
<path d="M92.4457 38.3647C93.3079 38.8574 94.6768 39.5718 95.6645 39.5718" stroke="black" stroke-linecap="round"/>
<path d="M85.2036 39.3706C84.4341 39.2205 82.4579 38.8154 81.8954 38.253C80.8182 37.1757 80.979 38.5244 80.979 39.4712C80.979 40.2268 81.2704 41.7465 80.7331 42.3435C80.2229 42.9104 80.199 41.6472 80.1631 41.2706C80.0452 40.0321 79.3482 38.4829 78.5649 37.5154C78.1696 37.027 75.3462 34.4337 75.3462 36.4536C75.3462 36.9565 75.3462 37.4595 75.3462 37.9624C75.3462 39.214 74.1716 40.2846 73.4351 41.1811C72.7535 42.0109 71.762 43.177 70.6299 43.3828C69.6282 43.565 69.5476 41.0688 69.4005 40.4435C69.3725 40.3246 68.8162 38.1355 68.5064 38.6777C68.2195 39.1797 68.4762 39.6899 68.2605 40.1753C67.9509 40.8719 67.2002 42.747 66.3829 42.9805C65.7708 43.1554 65.5965 39.6744 64.5724 39.3818C63.3059 39.0199 62.1395 40.1818 62.0689 41.3823C62.0566 41.5907 61.6849 39.5224 61.5548 39.0577C61.1829 37.7296 60.7267 36.9565 59.2972 36.9565C57.2313 36.9565 56.7962 39.0372 55.8438 40.4659C55.427 41.091 55.5592 38.896 55.0279 38.3647C54.1536 37.4905 52.2691 37.9271 51.5074 38.6889C50.3232 39.8731 49.1699 41.8467 47.674 42.634C47.1306 42.92 47.3834 40.6578 47.3834 40.1865C47.3834 36.6417 42.685 41.8956 42.0747 42.9805C41.5276 43.9532 41.7506 41.8008 41.7506 41.3935C41.7506 40.0524 41.1702 39.5434 39.7389 40.22C38.5087 40.8016 37.5163 41.691 36.4308 42.4664C35.8346 42.8922 37.2354 41.1538 37.2354 40.4212C37.2354 39.9875 35.8962 41.5263 35.7602 41.7847C35.0698 43.0965 35.7393 40.2579 35.8049 39.8735C35.8623 39.5374 36.4719 36.353 35.9166 36.353C35.2615 36.353 34.8421 37.7501 34.6984 38.253C34.5595 38.7391 33.7416 38.5437 33.3908 38.5771C32.3519 38.676 31.3141 39.2997 30.3286 39.6165C28.7916 40.1105 27.9858 38.6291 26.6181 38.2083C25.9047 37.9888 25.4776 38.2899 25.0534 38.7671C24.8302 39.0181 24.8522 40.0824 24.8522 39.6724C24.8522 39.0864 25.2235 38.5212 25.2546 37.9624C25.3283 36.6346 24.6929 38.4831 24.5505 38.8788C24.1322 40.0408 23.71 41.2041 23.3434 42.377C23.1737 42.9201 23.0417 43.4094 23.0417 42.5446C23.0417 41.7062 24.1036 39.174 23.3993 38.6106C22.8458 38.1678 22.5718 39.2966 22.4382 39.5718C22.0654 40.3392 21.6413 40.9551 21.2312 41.6729C20.8376 42.3616 18.5989 41.9858 17.923 41.9858C16.9417 41.9858 17.6617 38.8404 17.6101 37.9624C17.4715 35.6067 15.7236 42.3117 15.1513 44.6011C14.9589 45.3706 14.8116 45.4781 14.4919 44.9028C14.0829 44.1666 13.6315 43.4792 13.1396 42.7905C12.4852 41.8743 12.1382 40.7014 11.6755 39.6835C11.5407 39.387 11.4913 38.3986 11.7761 38.9683" stroke="black" stroke-linecap="round"/>
<path d="M12.1784 37.9624C11.1813 37.9624 9.93219 38.177 9.40674 39.1695C9.25392 39.4581 9.04419 40.0506 8.64676 40.1642C7.81432 40.402 5.77675 43.1813 5.03685 42.5894C4.66357 42.2908 4.51436 39.4778 4.85803 39.0577C5.72716 37.9954 6.60281 36.9521 7.55149 35.9507C7.78973 35.6993 7.76511 35.5267 8.155 35.5484C8.61405 35.5739 8.40359 36.0649 8.66911 36.1407C9.26559 36.3112 10.2442 36.1519 8.84793 36.1519C7.01797 36.1519 5.33399 35.6413 3.68453 34.9449C2.65518 34.5103 1.77929 33.7653 0.812255 33.3355C-0.0234841 32.9641 1.6365 32.7473 1.9187 32.732C3.43412 32.6501 5.3017 32.0901 6.74681 31.6256C7.52863 31.3743 9.31586 31.2806 9.92084 30.6756C10.1263 30.4701 8.08343 30.0532 7.96501 30.0162C7.01217 29.7184 6.06817 29.3321 5.13744 29.0662C4.64101 28.9244 3.32689 28.1523 3.32689 27.5015C3.32689 27.0617 5.82587 26.4298 6.15447 26.2945C7.64093 25.6824 9.56813 24.4611 11.1726 24.2828C12.0879 24.1811 9.69203 24.0292 9.45144 23.981C8.1033 23.7114 6.73766 23.5157 5.38331 23.2322C4.90109 23.1313 3.16958 22.7893 2.92455 22.3605C2.42382 21.4842 3.46957 21.3951 4.13158 21.0641C5.12766 20.566 6.37477 19.9062 7.4509 19.667C8.04829 19.5343 8.34593 19.6641 8.8591 19.2535C9.086 19.072 10.1423 18.2993 9.16086 18.2477C7.61861 18.1665 6.03035 18.1296 4.53392 18.0465C2.54647 17.9361 4.36975 16.7395 4.93626 16.236C5.47368 15.7583 6.37325 15.7475 7.04856 15.6436C7.77269 15.5322 8.6492 15.2301 9.36203 15.2301" stroke="black" stroke-linecap="round"/>
</svg>

'''
'''--- src/pages/gamePage/assets/LoadingZone.svg ---
<svg width="236" height="37" viewBox="0 0 236 37" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M0.622222 8.21214C0.622222 10.8684 0.622222 13.5247 0.622222 16.1811C0.622222 17.7501 0.43031 19.4666 0.726923 21.0089C0.861746 21.71 0.764507 23.4448 1.35513 23.9173C1.89517 24.3493 1.95858 25.0623 2.09967 25.6972C2.38831 26.9961 2.71624 30.9715 2.71624 29.641C2.71624 25.924 3.13505 22.2048 3.13505 18.4845C3.13505 15.6094 2.90038 12.4209 3.85632 9.68959C4.12682 8.91674 4.39146 7.46028 4.39146 9.14281C4.39146 10.9593 4.31637 12.7365 4.8219 14.5058C5.82137 18.004 6.61503 21.6364 7.8466 25.0574C7.98766 25.4492 8.08721 26.3002 8.41664 26.593C8.45126 26.6238 8.8267 24.2597 8.88197 23.9755C9.5783 20.3943 10.2547 17.0747 10.2547 13.4472C10.2547 13.1113 10.2547 9.94767 10.2547 11.3532C10.2547 13.1637 10.1702 14.9924 10.3013 16.7976C10.5253 19.885 10.7261 23.1326 11.3483 26.1742C11.5586 27.2024 11.6785 27.3203 12.1859 26.6861C12.5565 26.2227 12.694 25.5732 13.0002 25.0457C14.2345 22.9201 15.2877 20.844 16.118 18.5194C17.0066 16.0312 17.8731 13.5233 18.5145 10.9576C18.7323 10.0863 19.259 8.89675 19.259 8.00274C19.259 7.5318 18.884 8.1721 18.8518 8.31684C18.7278 8.87492 18.8402 9.58337 18.8402 10.1433C18.8402 14.3384 18.5419 18.6426 18.8867 22.8238C18.9009 22.9949 19.2928 27.0732 19.6313 26.8024C20.6753 25.9672 21.547 23.7626 22.1906 22.6144C23.1613 20.8828 24.0569 19.0927 24.878 17.2862C25.1241 16.7448 25.2802 15.9184 25.7039 15.4947C25.8164 15.3822 25.7505 15.9296 25.7505 16.0764C25.7505 16.8936 25.4749 17.7092 25.3782 18.5194C25.03 21.4355 25.5643 24.1357 26.3787 26.8955C26.4614 27.1757 27.5512 29.8175 27.6816 29.5712C28.2389 28.5185 28.0263 26.9416 28.1702 25.7903C28.3884 24.0447 28.6837 22.3205 28.845 20.5669C28.9467 19.4601 28.8915 18.3285 28.8915 17.2164C28.8915 15.9305 29.1009 14.6133 29.1009 13.3658C29.1009 12.8703 29.1873 14.3537 29.2638 14.8432C29.5835 16.8894 30.3572 18.7572 31.1019 20.6832C32.6097 24.5826 34.7995 27.7174 36.9419 31.2231C37.2036 31.6513 37.449 32.1845 37.477 31.3162C37.5376 29.437 37.6864 27.5826 37.6864 25.6972C37.6864 23.3834 37.8958 21.0795 37.8958 18.7869C37.8958 18.0125 37.6289 16.7336 38.0005 16.0647C38.2104 15.6869 38.0023 15.5085 38.1517 16.0066C38.5172 17.2248 38.8056 18.4112 39.2453 19.6129C39.9435 21.5213 40.6849 24.3797 42.1885 25.8834C42.7982 26.493 44.3597 21.2481 44.4687 20.7879C44.8298 19.2633 45.2249 17.7939 45.2249 16.2276C45.2249 14.5158 45.6891 12.0879 45.2132 10.4225C44.6517 8.45691 44.8061 14.4974 44.8061 16.5417C44.8061 19.0094 44.5738 21.6439 45.4343 24.0104C45.7206 24.7979 46.2347 25.524 46.4813 26.3254C47.155 28.5149 47.8958 26.1084 48.4706 25.0806C50.5114 21.432 52.6216 17.7972 55.0668 14.4011C55.2912 14.0894 56.6214 12.582 56.0673 12.0279C55.0865 11.0472 55.4856 14.3174 55.4856 14.6803C55.4856 17.5499 55.4856 20.4195 55.4856 23.2891C55.4856 23.9374 55.6317 25.1207 56.5326 25.1737C58.5744 25.2938 60.4638 21.6029 61.3023 20.1946C62.6747 17.8898 63.2028 15.2854 64.327 12.9121C64.6006 12.3345 64.4899 11.5918 64.4899 10.9344C64.4899 10.6225 64.5376 10.1184 64.4782 10.7715C64.3392 12.3013 63.9436 13.7897 63.8151 15.3318C63.6046 17.8578 63.6523 20.3832 63.6523 22.9168C63.6523 23.6355 64.2116 23.9944 64.2805 24.5455C64.3202 24.8633 64.8609 25.6144 65.0716 25.8485C65.2973 26.0993 65.2406 26.4301 65.6416 26.4301C66.5175 26.4301 67.3705 25.37 67.8403 24.7549C70.0428 21.8717 71.3666 18.7169 72.6566 15.3783C72.7753 15.0711 72.866 14.0834 72.866 14.4128C72.866 15.1845 72.866 15.9561 72.866 16.7278C72.866 19.9619 72.866 23.196 72.866 26.4301C72.866 27.1317 72.8377 27.5677 73.4942 27.8959" stroke="black" stroke-linecap="round"/>
<path d="M73.4942 27.8959C73.6919 28.8184 74.2263 30.3855 75.4835 30.3855C75.8913 30.3855 76.4069 27.2752 76.5305 26.7559C77.0978 24.3734 77.322 21.916 77.9382 19.5199C78.1441 18.7192 78.101 17.9404 78.101 17.1117C78.101 16.2742 78.966 15.9237 79.3575 15.2387C79.5216 14.9515 79.7471 14.956 79.7879 15.262C79.9406 16.407 80.2026 17.5453 80.4045 18.6822C81.2211 23.2814 83.0611 27.6677 84.7554 31.9909C85.068 32.7886 85.5141 33.5316 85.8955 34.2943C86.3829 35.2693 86.4636 32.6091 86.4655 32.5377C86.6532 25.3118 86.2594 18.3375 84.9183 11.2485C84.8869 11.0828 84.8016 9.49182 84.4878 9.49182C84.1552 9.49182 84.555 11.066 84.5925 11.1903C85.1788 13.1343 86.6203 14.9276 87.7452 16.5882C89.3904 19.0169 91.2076 21.362 93.0849 23.6148C93.684 24.3337 96.1496 27.7358 97.4707 27.4422C98.5265 27.2076 98.5541 23.0188 98.6225 22.3119C98.8986 19.4582 99.0413 16.6385 99.0413 13.7729C99.0413 12.6236 99.105 11.4542 99.0413 10.3062C99.0339 10.1736 98.8319 11.8793 98.8319 12.2373C98.8319 16.8882 98.3507 21.812 99.146 26.4069C99.1604 26.4905 100.071 30.0082 100.461 29.2687C101.742 26.8346 102.414 23.8257 103.183 21.1951C103.4 20.4501 103.951 16.5784 104.276 19.3454C104.731 23.2098 106.289 27.1448 108.232 30.4902C108.672 31.2479 108.974 31.9654 109.604 32.5959C110.337 33.3286 111.01 31.1331 111.187 30.688C112.178 28.1907 112.6 25.5077 113.269 22.9168C113.631 21.5137 113.876 19.9745 113.909 18.5194C113.922 17.9211 113.909 17.812 113.909 18.4728C113.909 19.5968 113.992 20.6259 114.223 21.7302C114.527 23.1854 115.053 25.8374 116.317 26.8489C116.579 27.0586 116.68 26.0027 116.736 25.7438C117.218 23.492 117.625 21.164 118.004 18.8917C118.182 17.8226 118.424 16.7872 118.818 15.7739C118.897 15.5722 118.984 14.8015 119.19 15.3783C120.057 17.8037 120.862 20.1483 122.076 22.4399C122.425 23.1005 122.782 23.8168 123.332 24.3361C123.98 24.9478 124.159 23.5647 124.286 23.1611C125.263 20.0519 125.635 16.9539 125.635 13.7031C125.635 12.4076 125.851 12.8544 126.38 13.9125C127.549 16.2504 128.76 18.564 130.079 20.8228C131.186 22.7174 132.148 24.6895 133.174 26.6279C133.482 27.2092 133.781 27.9949 134.43 28.2682C135.353 28.6567 136.573 27.4286 137.152 26.8489" stroke="black" stroke-linecap="round"/>
<path d="M135.687 27.2677C136.141 25.0471 136.524 23.1317 136.524 20.8693C136.524 19.7664 136.428 18.6182 136.629 17.5305C136.745 16.9012 136.906 15.8836 136.722 15.2387C136.706 15.1815 136.967 16.7174 137.199 17.2164C138.245 19.4704 139.095 21.8937 139.979 24.2198C140.691 26.0919 141.621 27.8794 142.388 29.734C142.439 29.8576 143.199 31.2629 143.225 30.5716C143.414 25.6714 144.574 20.8138 145.226 15.9717C145.41 14.6086 145.895 13.186 145.947 11.8185C145.983 10.9012 145.947 12.3844 145.947 12.6212C145.947 16.7282 146.119 20.7946 147.995 24.5455C148.308 25.1721 148.642 26.118 149.193 26.5465C150.116 27.2646 150.042 25.3535 150.135 24.7084C150.76 20.3995 151.782 16.1505 152.322 11.8301C152.599 9.62082 152.991 7.3959 153.474 5.22235C153.663 4.37061 153.486 6.96736 153.486 7.83987C153.486 10.8666 153.502 13.8514 153.8 16.8674C154.075 19.6468 154.785 22.5856 155.789 25.197C156.19 26.2399 156.649 27.7091 157.464 28.5242C158.429 29.4891 160.017 23.943 160.163 23.5101C161.483 19.6174 162.438 15.6136 163.328 11.6091C163.449 11.0613 163.648 9.2221 163.549 10.6552C163.353 13.4871 163.383 16.5479 163.653 19.3686C163.831 21.2219 163.946 23.583 164.584 25.3366C164.616 25.4228 164.764 26.132 164.84 26.1742C165.072 26.3029 165.45 23.9252 165.468 23.8242C166.061 20.5848 166.317 17.2944 166.457 14.0056C166.478 13.5036 166.376 9.69182 166.48 11.9348C166.679 16.211 167.309 20.3888 168.097 24.592C168.736 28.0002 169.44 31.3915 170.855 34.5735C170.935 34.754 171.692 36.7332 172.169 36.0859C173.009 34.9466 173.41 33.2725 173.798 31.9444C174.402 29.8749 174.938 27.7847 175.52 25.7089C176.037 23.8637 176.533 22.0087 177.044 20.1713C177.268 19.3645 177.148 20.5725 177.148 20.8228C177.148 21.6896 177.902 25.9247 178.288 23.0564C178.87 18.7321 178.823 14.286 178.823 9.93389C178.823 7.37507 179.139 4.48157 178.509 1.96498C177.56 -1.83227 178.195 9.78901 178.195 13.7031C178.195 14.9053 178.195 16.1074 178.195 17.3095C178.195 17.7629 178.207 15.5897 178.184 15.2271C178.075 13.5434 175.535 11.5809 174.007 13.0284C172.86 14.1153 173.292 16.7194 173.542 18.1238C173.682 18.9141 173.823 19.6855 173.996 20.4622C174.274 21.7133 173.222 19.6176 173.146 19.4384C171.918 16.5346 170.87 13.5087 170.029 10.469C169.894 9.98442 169.281 6.60793 168.667 6.36242C168.535 6.30954 168.518 7.48933 168.516 7.51414C168.363 9.39402 168.353 11.2587 168.353 13.1447C168.353 17.39 168.356 21.5098 169.819 25.546C171.276 29.5657 174.075 32.2563 178.451 32.2934C181.926 32.3228 185.195 32.158 188.014 29.8736C190.355 27.9765 192.311 25.7986 192.947 22.8005C193.3 21.1345 193.399 19.3105 191.388 19.3105C190.869 19.3105 190.685 19.3075 190.538 19.8223C190.372 20.4059 189.101 20.5785 188.654 20.6716C186.271 21.168 184.09 19.098 182.593 17.4956C181.079 15.876 180.032 13.7993 178.742 12.0046C177.184 9.83638 178.68 13.2395 178.986 14.0289C180.314 17.451 181.603 21.0176 183.71 24.0569C183.884 24.3083 184.976 25.9 185.443 25.325C186.023 24.6107 186.434 23.7405 186.874 22.9401C188.048 20.806 189.429 18.7936 190.597 16.658C191.791 14.4744 192.95 12.1571 193.784 9.80593C194.246 8.50414 194.388 8.25331 194.308 9.81756C194.162 12.66 194.11 15.484 194.11 18.3332C194.11 19.2901 194.592 16.4761 194.947 15.5878C195.074 15.2715 195.653 13.4279 196.204 13.7031C196.531 13.8667 196.724 14.4806 196.855 14.7734C197.476 16.1536 198.035 17.5819 198.507 19.0196C199.286 21.3899 199.798 23.8709 200.764 26.1742C201.392 27.6713 201.542 27.6329 201.765 25.9764C202.065 23.7451 202.171 21.3969 202.8 19.229C202.868 18.9949 203.324 17.6972 203.324 17.8446C203.324 19.0457 203.625 20.2875 203.742 21.4859C203.847 22.5622 203.901 23.8838 204.208 24.9178C204.529 26.0018 204.969 22.0891 204.999 21.8233C205.365 18.5917 205.758 15.3478 206.046 12.1094C206.069 11.8433 206.244 9.14785 206.418 10.1898C207.395 16.0493 208.573 21.9421 211.176 27.3492C212.339 29.7636 212.72 28.1667 213.061 26.3254C213.261 25.2426 213.356 24.1485 213.631 23.0797C213.76 22.5754 213.728 21.6887 213.957 22.6609C214.006 22.8711 214.083 24.0237 214.538 23.5683C215.283 22.8233 215.646 21.5746 216.004 20.625C216.681 18.8277 217.366 17.0356 218.075 15.2504C218.681 13.7238 219.744 11.7978 219.866 10.1433C219.904 9.64099 220.072 10.1947 220.076 10.3992C220.096 11.4963 220.007 12.5691 219.866 13.6566C219.558 16.0495 219.448 18.4701 219.448 20.881C219.448 22.0589 219.228 23.3891 220.076 24.3361C220.191 24.4646 220.538 25.1503 220.716 24.8247C221.524 23.3419 221.75 21.6183 222.053 19.9736C222.248 18.9184 222.111 17.8602 222.17 16.7976C222.216 15.9739 222.861 18.4054 222.914 18.6241C223.401 20.6132 224.104 22.5367 224.683 24.499C224.871 25.1364 225.37 26.7265 225.73 25.2901C226.399 22.6124 226.729 19.7977 227.091 17.0652C227.24 15.9356 227.716 12.5921 227.824 13.7264C228.337 19.1195 228.11 24.556 228.65 29.9551C228.733 30.7854 229.002 30.8814 229.499 30.1063C230.592 28.4018 231.059 26.1617 231.849 24.2896C232.659 22.3695 232.849 20.3567 233.373 18.3681C233.42 18.1874 233.477 17.1244 233.477 17.4724C233.477 19.5741 233.477 21.6759 233.477 23.7777C233.477 25.3443 233.477 26.911 233.477 28.4776C233.477 28.8426 233.268 29.6979 233.268 28.8499C233.268 25.6337 234.524 22.57 234.524 19.357C234.524 18.2945 234.524 17.2319 234.524 16.1694C234.524 14.9094 233.854 13.9613 233.268 12.9353C232.892 12.2768 231.235 12.6096 230.592 12.6096C230.27 12.6096 229.305 12.6096 229.627 12.6096C230.289 12.6096 231.041 12.2397 231.686 12.0861C232.625 11.8625 233.367 11.4754 233.687 10.5156" stroke="black" stroke-linecap="round"/>
</svg>

'''
'''--- src/pages/gamePage/assets/Second.svg ---
<svg width="68" height="68" viewBox="0 0 68 68" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M20.0322 41.4586C18.412 45.2708 16.0498 47.0084 13.1376 49.3381C10.3709 51.5515 7.9598 50.173 4.9298 49.9948C2.90314 49.8756 0.930262 56.6847 2.66809 57.1812C4.07419 57.5829 6.09175 57.2177 7.55631 57.2177C10.2821 57.2177 8.26331 57.4591 7.0456 58.6768C5.31369 60.4088 6.3466 65.0972 9.19788 65.0972C11.1306 65.0972 16.7491 63.9601 16.7491 61.8141C16.7491 58.9676 14.3406 56.124 17.0774 53.9345C19.2762 52.1755 20.6366 48.0249 23.972 48.0249" stroke="black" stroke-width="3" stroke-linecap="round"/>
<path d="M6.89966 32.2659C12.7539 31.1236 17.4687 25.043 23.3153 25.043C29.0061 25.043 34.6969 25.043 40.3876 25.043C43.0659 25.043 45.0018 25.7306 47.2457 27.0128C48.1465 27.5276 49.226 31.987 50.0911 33.0684C50.928 34.1145 51.2801 37.7806 51.5868 39.1604C52.0712 41.3404 53.3983 43.983 53.5202 46.055C53.6671 48.5524 53.5202 51.104 53.5202 53.6062C53.5202 56.3795 51.3515 56.0635 49.7263 57.3636C46.3139 60.0936 42.953 61.5494 39.0744 63.2733C35.5857 64.8238 28.7405 65.5612 25.7959 62.6166C24.4023 61.223 23.4202 59.5974 21.6738 58.2391C20.8551 57.6024 19.6275 56.8962 18.7189 56.4151C17.1243 55.5709 17.6693 54.6584 16.7491 53.2779" stroke="black" stroke-width="3" stroke-linecap="round"/>
<path d="M6.24303 32.9225C6.24303 35.6906 5.10843 42.831 6.89966 45.0701C8.76738 47.4047 12.61 46.313 14.1226 49.3382" stroke="black" stroke-width="3" stroke-linecap="round"/>
<path d="M38.4178 23.0731C42.437 22.1688 42.4201 19.4772 45.3124 17.1635C46.0959 16.5367 46.9838 15.6488 47.6106 14.8653C48.0561 14.3083 50.0801 13.2237 49.5804 13.2237" stroke="black" stroke-width="3" stroke-linecap="round"/>
<path d="M44.3274 25.0429C48.6931 21.8679 50.6846 15.4878 56.4385 13.8438C57.9071 13.4242 55.2267 14.6024 57.1681 15.1571C58.7447 15.6075 60.389 14.9525 61.728 14.2086C63.0463 13.4762 64.5662 13.2673 65.6313 12.2022C66.4452 11.3883 66.3007 8.29369 65.0111 8.00712C63.5229 7.67641 62.2975 6.65739 60.7431 6.65739C58.0421 6.65739 59.1244 5.86703 60.5972 4.54159C64.1057 1.38389 60.6689 2.061 57.4599 2.061C54.9765 2.061 52.9704 3.59392 51.6962 6.00076C51.1296 7.07107 50.4321 8.54755 49.7263 9.42981C49.1407 10.1619 50.8937 11.6132 50.8937 12.567" stroke="black" stroke-width="3" stroke-linecap="round"/>
<path d="M34.3226 64.4922C34.3226 63.5057 34.3226 62.5192 34.3226 61.5327C34.3226 60.8595 34.4826 60.2728 34.4826 59.6131C34.4826 58.9496 34.5247 58.2156 34.5626 57.5334C34.5847 57.1349 34.6426 56.7192 34.6426 56.2981C34.6426 56.0206 34.7085 55.4654 34.8203 55.2139C34.9592 54.9014 34.9215 54.5038 35.0825 54.214C35.2484 53.9155 35.5666 54.0141 35.9223 54.0141C36.7305 54.0141 37.5742 54.174 38.4019 54.174C38.9485 54.174 39.495 54.174 40.0416 54.174C40.1632 54.174 40.396 54.2239 40.5171 54.2585C40.5526 54.2686 40.8194 53.82 40.8815 53.6764C41.0311 53.3298 41.3175 53.0151 41.4236 52.6543C41.4796 52.4638 41.5593 52.224 41.7213 52.0944C41.9458 51.9148 42.1612 51.7662 42.1612 51.4545" stroke="black" stroke-width="3" stroke-linecap="round"/>
<path d="M42.0813 51.3745C42.0813 50.9056 41.8847 49.6808 42.1213 49.2549C42.3761 48.7962 42.1879 48.1911 42.4412 47.7351C42.5888 47.4696 43.2026 47.7169 43.441 47.7574C44.1532 47.8783 44.8793 47.9478 45.5962 48.0195C46.2368 48.0836 46.8962 48.2424 47.4848 48.4106C48.6684 48.7488 49.7737 49.1089 51.0219 49.3926C51.6422 49.5336 52.2319 49.9047 52.7994 50.1569C53.0133 50.252 54.3308 50.7113 54.3991 50.5746" stroke="black" stroke-width="3" stroke-linecap="round"/>
<path d="M52.9593 54.5739C52.9593 55.2592 52.9902 55.7405 52.3194 56.0759C51.842 56.3146 51.2776 56.5311 50.8974 56.9113C50.6733 57.1354 49.95 57.6944 50.4797 57.1335C50.8175 56.7759 51.1312 56.402 51.4796 56.0537C51.8905 55.6427 52.451 55.1698 52.9593 54.8939C53.1031 54.8158 53.5934 54.6412 53.6792 54.5339C53.7464 54.4499 53.911 54.5526 53.9191 54.414C53.9268 54.2838 53.9268 54.1442 53.9191 54.014C53.9119 53.8919 53.5143 53.7955 53.4214 53.7119C53.09 53.4136 52.7365 53.2663 52.3194 53.2142C52.1091 53.1879 52.0726 52.9742 51.7995 52.9742C51.3279 52.9742 52.052 53.0542 52.1994 53.0542C52.5433 53.0542 52.8039 53.3566 53.1193 53.3742C53.3298 53.3858 53.6557 53.4089 53.8791 53.4586C54.0912 53.5057 54.4458 53.466 54.639 53.5519C54.9567 53.6931 55.0151 53.5532 55.2389 53.3742C55.8612 52.8763 56.4598 52.3177 57.0208 51.7567C57.2568 51.5206 57.2249 50.8476 57.0208 50.5924C56.865 50.3977 56.6386 50.4762 56.6386 50.2147C56.6386 50.0235 56.4787 49.4724 56.4787 49.6637C56.4787 49.8772 56.3987 50.2991 56.3987 50.2991C56.3987 50.2991 56.5382 50.1631 56.5542 50.2192C56.5871 50.3342 56.5586 50.4951 56.5586 50.6146C56.5586 50.8679 56.5586 51.1212 56.5586 51.3745C56.5586 51.6423 56.6131 52.1852 56.3187 51.6944" stroke="white" stroke-width="3" stroke-linecap="round"/>
<path d="M56.3987 55.3738C54.9251 56.7272 52.8717 57.5309 51.1463 58.511C50.2617 59.0135 49.3266 59.4234 48.4002 59.8352C48.2841 59.8868 48.3202 59.6626 48.3202 59.6086C48.3202 59.3352 48.4699 59.1031 48.6579 58.9109C49.0547 58.5051 49.6056 58.0917 50.1598 57.9333C51.0776 57.6711 49.9402 58.6836 49.6488 58.8132C49.2437 58.9932 49.762 57.538 49.6799 57.5334C49.279 57.5111 48.8602 57.7851 48.4979 57.9333C48.1177 58.0889 47.8827 58.1547 48.018 57.6134C48.0937 57.3106 48.3476 56.8176 48.6401 56.6713C48.7605 56.6111 49.04 56.514 49.04 56.698C49.04 57.1287 48.8644 57.4604 48.6357 57.8178C48.1338 58.602 47.3538 59.3172 46.6582 59.933C46.3658 60.1919 46.0151 60.6448 45.6806 60.8306C45.2845 61.0507 45.4407 59.8244 45.4407 59.6086C45.4407 58.8101 45.6834 58.0166 46.0406 57.3023C46.2711 56.8413 46.1606 57.487 46.1606 57.7023C46.1606 58.6123 45.6528 59.5535 45.2007 60.3285C44.9606 60.7401 44.7468 61.4316 44.3831 61.7549C44.3219 61.8092 44.3963 60.8965 44.4009 60.8128C44.4248 60.3705 44.6678 60.2288 44.3875 60.7017C44.0171 61.3268 43.4743 61.8194 42.9656 62.3281C42.9263 62.3674 42.6436 62.6598 42.579 62.5369C42.392 62.1817 42.5568 61.342 42.5612 60.955C42.5634 60.7576 42.801 60.1712 42.8012 60.1729C42.8223 60.511 42.8174 60.9331 42.6412 61.2305C42.5864 61.323 42.4812 61.8496 42.4812 61.5149C42.4812 61.112 42.5874 59.9188 42.4768 60.3062C42.1563 61.4279 41.5664 62.3373 40.8815 63.2746C40.6557 63.5836 40.7255 62.8564 40.7215 62.7502C40.7057 62.324 40.4907 63.1795 40.4771 63.2879C40.4656 63.38 40.3216 63.9232 40.3216 63.6034C40.3216 63.128 40.3216 62.6525 40.3216 62.177C40.3216 61.8818 40.1924 62.6738 40.1616 62.8125C40.084 63.1617 39.937 63.4124 39.9217 62.8924C39.8925 61.8993 39.5201 63.454 39.3618 63.6123C39.1278 63.8462 39.0503 63.7655 39.0418 63.4523C39.0299 63.0098 38.8818 62.5896 38.8818 62.1415C38.8818 61.6745 39.1377 63.4266 38.6819 63.5279C38.4386 63.5819 38.3468 62.9801 38.3264 62.8169C38.288 62.5097 38.3304 63.2294 38.3219 63.3724C38.3005 63.7378 38.1115 62.8711 38.0998 62.8036C38.0759 62.6655 38.002 61.7771 38.002 62.257C38.002 62.9986 37.9127 63.552 37.5843 64.1722C37.4052 64.5105 37.6311 64.9496 37.4599 65.292C37.3211 65.5695 37.6021 64.6824 37.6021 64.3722C37.6021 63.9338 37.6175 63.7315 37.3799 63.4346C37.3041 63.3399 37.3621 63.0126 37.3621 62.8924C37.3621 62.7638 37.2021 62.4128 37.2021 62.5414C37.2021 62.9641 37.2014 63.211 37.4021 63.5723C37.5905 63.9114 37.5947 64.2356 37.7443 64.5721C37.8861 64.8913 37.842 65.2906 37.842 65.6519C37.842 66.1118 37.5548 65.9956 37.2021 66.1719" stroke="white" stroke-width="3" stroke-linecap="round"/>
<path d="M8.15076 33.0347C10.6375 33.3638 12.8604 34.7654 15.3102 35.2553C15.8146 35.3562 16.3147 35.5565 16.8026 35.7011C17.2937 35.8466 17.7802 35.9686 18.2671 36.1309C18.5273 36.2176 18.8243 36.5321 18.8243 36.1508C18.8243 35.5896 18.8243 35.0285 18.8243 34.4674C18.8243 33.9164 18.7963 33.3638 18.88 32.8198C18.911 32.6183 18.8306 31.6994 19.1665 32.1194C19.6323 32.7016 20.3842 33.046 21.1165 33.3172C22.7525 33.9231 24.5008 34.2956 26.1906 34.7181C26.3594 34.7603 27.8121 35.2615 27.9059 35.1678C27.9782 35.0955 28.0032 34.7107 28.0292 34.6067C28.147 34.1357 28.2563 33.6546 28.3516 33.1779C28.68 31.5362 28.9247 29.9452 28.9247 28.275C28.9247 27.6005 28.853 26.8625 28.853 26.2294" stroke="black" stroke-width="3" stroke-linecap="round"/>
<path d="M11.3743 30.0976C12.7002 29.2397 14.1133 28.4646 15.4933 27.6979C15.876 27.4853 16.268 27.2858 16.6912 27.1447C17.1294 26.9987 17.5858 26.7653 18.0204 26.5876C18.3718 26.4438 18.7148 26.3272 19.071 26.2254C19.1861 26.1925 19.3314 26.0632 19.4531 26.0145C19.8189 25.8682 20.1961 25.8347 20.5793 25.7638C21.0085 25.6843 21.4681 25.728 21.9046 25.728C22.4192 25.728 21.627 25.6563 21.4748 25.6563C20.3411 25.6563 19.2122 25.8712 18.0761 25.8712C17.6622 25.8712 17.2483 25.8712 16.8344 25.8712C16.6988 25.8712 16.3222 25.94 16.2136 25.8314C15.9728 25.5906 16.4565 25.5174 16.6036 25.6563C17.1683 26.1897 17.6916 27.1672 17.4593 27.9805C17.4344 28.0674 16.8912 28.2341 16.7827 28.3426C16.2916 28.8337 15.909 29.4416 15.3699 29.8827C14.8618 30.2984 14.4318 30.6707 13.7741 30.6707C13.3211 30.6707 12.9066 30.7424 12.4488 30.7424C11.6055 30.7424 10.8778 30.1693 10.0849 30.1693C9.22261 30.1693 8.40404 30.1207 7.57772 30.1693C7.41399 30.1789 7.16447 30.2574 7.00464 30.3285C6.81818 30.4113 6.57482 30.3995 6.39177 30.4518C6.29546 30.4794 6.17306 30.45 6.0734 30.4558C5.98671 30.4609 5.91693 30.5742 5.82268 30.5951C5.66033 30.6312 5.50411 30.7405 5.35706 30.814" stroke="white" stroke-width="3" stroke-linecap="round"/>
<path d="M18.2512 24.0804C19.14 24.0804 20.0288 24.0804 20.9176 24.0804C21.806 24.0804 22.734 24.2751 23.6238 24.148C23.7381 24.1317 23.9953 24.0989 24.0695 24.0247C24.1594 23.9348 24.1969 23.8423 24.1969 24.0087C24.1969 24.2963 24.0536 24.5423 24.0536 24.8325C24.0536 25.131 24.0536 25.4295 24.0536 25.728C24.0536 25.8915 23.9984 26.5197 24.1809 26.0861C24.3952 25.5772 24.4182 25.0422 24.6983 24.542C25.0465 23.9203 25.1424 23.1954 25.4704 22.5761C25.6081 22.3159 25.6295 23.1628 25.6295 23.2566C25.6295 23.5431 25.6295 23.8297 25.6295 24.1162C25.6295 24.6426 25.7002 25.2195 25.3032 25.6165C25.1097 25.81 24.7799 25.6725 24.5391 25.7439C24.1337 25.864 23.6889 25.8712 23.2656 25.8712" stroke="white" stroke-width="3" stroke-linecap="round"/>
<path d="M25.5579 26.516C25.7966 26.516 26.0354 26.516 26.2742 26.516C26.5294 26.516 26.1809 26.5426 26.1309 26.4801C26.0472 26.3755 25.9694 25.7569 26.0951 25.6564C26.2441 25.5371 26.3963 25.0588 26.4175 24.8684C26.4364 24.6977 26.5607 24.5857 26.5607 24.4028C26.5607 24.2475 26.5607 24.0923 26.5607 23.9371" stroke="white" stroke-width="3" stroke-linecap="round"/>
<path d="M27.7069 23.5789C27.9825 23.5252 28.2189 23.4378 28.463 23.368C28.524 23.3506 28.6457 23.3963 28.6938 23.3481C28.757 23.285 28.583 23.3222 28.5506 23.3481C28.4842 23.4012 28.126 23.4102 28.0292 23.4317C27.8854 23.4636 27.7886 23.5789 27.6353 23.5789" stroke="white" stroke-width="3" stroke-linecap="round"/>
<path d="M3.13635 32.4616C3.50557 32.3895 3.91166 32.4237 4.12331 32.1591C4.19319 32.0718 4.20804 31.9458 4.2825 31.8527C4.3781 31.7332 4.55532 31.6273 4.67649 31.5303C4.77973 31.4477 4.89293 31.3259 4.99884 31.2597C5.10227 31.1951 5.27944 31.1617 5.35701 31.0647C5.50976 30.8738 5.95939 30.8986 6.07335 30.6707" stroke="white" stroke-width="3" stroke-linecap="round"/>
<path d="M11.3743 30.8856C11.5986 30.8124 11.9299 30.7642 12.0907 30.5633C12.1329 30.5105 12.3862 30.5274 12.3056 30.5274" stroke="white" stroke-width="3" stroke-linecap="round"/>
<path d="M10.0849 30.6707C10.5139 30.5033 10.982 30.4312 11.3743 30.2569C11.5529 30.1775 11.3062 30.1693 11.1594 30.1693C10.9408 30.1693 10.7585 30.0977 10.5505 30.0977C10.1322 30.0977 8.80951 30.2978 8.58057 29.9544" stroke="white" stroke-width="3" stroke-linecap="round"/>
<path d="M12.8107 31.3497C12.5305 31.343 12.2612 31.1864 12.0019 31.0938C11.8647 31.0448 11.7254 30.976 11.5939 30.9103C11.536 30.8813 11.4848 30.8318 11.4201 30.8282C11.2595 30.8193 11.1102 30.7109 10.9469 30.6979C10.807 30.6867 10.6555 30.5968 10.5184 30.5663C10.3798 30.5355 10.2676 30.4371 10.1273 30.4371C9.96259 30.4371 9.80184 30.3593 9.63845 30.3502C9.4709 30.3409 9.30926 30.3285 9.13871 30.3285C9.06867 30.3285 8.93001 30.391 8.87315 30.4323C8.83199 30.4622 8.70232 30.4589 8.64984 30.4589C8.4905 30.4589 8.33117 30.4589 8.17183 30.4589C8.09426 30.4589 8.02351 30.524 7.95456 30.524C7.9124 30.524 7.78782 30.5662 7.75297 30.5941C7.6476 30.6783 7.38491 30.6327 7.25323 30.6327C7.16508 30.6327 7.07569 30.628 6.98767 30.6327C6.94218 30.6351 6.77705 30.6515 6.74867 30.687C6.71142 30.7336 6.57731 30.7196 6.52173 30.7196C6.36964 30.7196 6.21755 30.7196 6.06545 30.7196C5.95681 30.7196 5.63764 30.667 5.55847 30.7461C5.51386 30.7908 5.4871 30.8464 5.44018 30.8886C5.42489 30.9023 5.34242 30.9369 5.41241 30.9369C5.43084 30.9369 5.51191 30.9445 5.48846 30.932C5.22755 30.7939 5.06727 30.611 4.76058 30.611C4.51938 30.611 4.4713 30.8944 4.33689 31.0672C4.28022 31.1401 4.21692 31.2895 4.13048 31.328C4.11948 31.3329 4.05842 31.3875 4.07616 31.4052C4.09977 31.4288 4.12585 31.3605 4.15221 31.34C4.21338 31.2925 4.277 31.2373 4.34655 31.1976C4.38776 31.174 4.48483 31.1105 4.51072 31.0781C4.52801 31.0565 4.56833 31.0651 4.5928 31.0407C4.61243 31.021 4.63024 30.9977 4.65195 30.9803C4.72301 30.9235 4.78357 30.8429 4.85353 30.7799C4.88437 30.7522 4.91791 30.7314 4.95372 30.7099C4.98444 30.6915 4.89637 30.7544 4.86319 30.7679C4.7351 30.8201 4.65133 30.9529 4.53244 31.0189C4.44877 31.0654 4.23406 31.237 4.20532 31.3376C4.16759 31.4697 4.02541 31.5762 3.98804 31.707C3.9773 31.7446 3.87581 31.8489 3.84802 31.8712C3.79957 31.9099 3.7776 31.9621 3.73335 32.0064C3.56531 32.1744 3.4026 32.4437 3.4026 32.6859C3.4026 32.7119 3.42734 32.9168 3.44485 32.838C3.46585 32.7435 3.43233 32.6418 3.50641 32.5592C3.56082 32.4985 3.57062 32.6065 3.56556 32.6328C3.53427 32.7955 3.45108 32.9643 3.37001 33.1084C3.32421 33.1899 3.27077 33.3098 3.21188 33.3752C3.15914 33.4338 3.14626 33.518 3.11531 33.5876C3.0845 33.657 2.9858 33.7967 3.07669 33.6577C3.13441 33.5694 3.17312 33.4731 3.22757 33.3812C3.29032 33.2753 3.36498 33.173 3.42433 33.0662C3.48282 32.9609 3.57823 32.7835 3.6742 32.7089C3.70139 32.6877 3.61709 32.8278 3.59815 32.861C3.54905 32.9469 3.50518 33.0336 3.45692 33.1205C3.42079 33.1855 3.3741 33.2651 3.35794 33.3378C3.34996 33.3737 3.27224 33.5279 3.27224 33.4356" stroke="white" stroke-width="3" stroke-linecap="round"/>
<path d="M29.4952 22.5354C29.64 22.5637 29.7906 22.5415 29.9306 22.5815C29.958 22.5893 29.9755 22.6332 30.0003 22.6474C30.0408 22.6705 30.0386 22.6182 30.0774 22.5976C30.1309 22.5693 30.3258 22.4907 30.1782 22.4907C30.1036 22.4907 29.9835 22.5264 29.9207 22.5578" stroke="white" stroke-width="3" stroke-linecap="round"/>
<path d="M30.9283 22.4682C31.0804 22.3494 31.2272 22.252 31.4159 22.1821C31.4301 22.1769 31.6161 22.0925 31.5328 22.0876C31.4695 22.0839 31.4048 22.0876 31.3413 22.0876C31.2221 22.0876 31.0628 22.1483 30.9507 22.1884C30.7748 22.2512 30.5507 22.3205 30.3635 22.3339C30.1351 22.3502 29.8947 22.4363 29.6794 22.508C29.5138 22.5632 29.3225 22.5966 29.1706 22.681C29.0416 22.7526 28.8716 22.785 28.734 22.8539C28.6355 22.9031 28.4543 23.0092 28.3981 23.1076C28.3267 23.2325 28.1694 23.2691 28.0846 23.3751C28.0506 23.4177 27.9434 23.4764 27.8943 23.4982C27.8278 23.5278 27.7512 23.6244 27.6816 23.6326C27.5758 23.645 27.3954 23.7569 27.3121 23.8217C27.2254 23.8891 27.1143 23.9187 27.0372 23.9958C26.9524 24.0806 26.8719 24.1647 26.8133 24.2819C26.7498 24.4088 26.6612 24.5289 26.6068 24.6514C26.488 24.9186 26.3605 25.1632 26.3605 25.4575C26.3605 25.5128 26.3157 25.5761 26.3157 25.6366C26.3157 25.6532 26.2933 25.7797 26.2933 25.7261C26.2933 25.6548 26.3651 25.5076 26.4103 25.4512C26.4746 25.3708 26.5614 25.2727 26.6118 25.1776C26.6652 25.0767 26.7596 24.9657 26.7847 24.8529C26.8312 24.6437 27.019 24.4667 27.1168 24.2819C27.2134 24.0996 27.3746 23.9072 27.5199 23.7619C27.7174 23.5644 27.846 23.3069 28.0734 23.13C28.2028 23.0294 28.3388 22.9106 28.4653 22.8041C28.5441 22.7377 28.54 22.8437 28.515 22.8937C28.492 22.9398 28.4489 23.0187 28.4093 23.0504C28.1601 23.2498 27.9133 23.478 27.6866 23.7047C27.6153 23.776 27.547 23.8388 27.4689 23.9013C27.2949 24.0405 27.3923 23.8126 27.3457 23.7893" stroke="white" stroke-width="3" stroke-linecap="round"/>
</svg>

'''
'''--- src/pages/gamePage/assets/Third.svg ---
<svg width="68" height="71" viewBox="0 0 68 71" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M20.0322 41.4586C18.412 45.2708 16.0498 47.0084 13.1376 49.3381C10.3709 51.5515 7.9598 50.173 4.9298 49.9948C2.90314 49.8756 0.930262 56.6847 2.66809 57.1812C4.07419 57.5829 6.09175 57.2177 7.55631 57.2177C10.2821 57.2177 8.26331 57.4591 7.0456 58.6768C5.31369 60.4088 6.3466 65.0972 9.19788 65.0972C11.1306 65.0972 16.7491 63.9601 16.7491 61.8141C16.7491 58.9676 14.3406 56.124 17.0774 53.9345C19.2762 52.1755 20.6366 48.0249 23.972 48.0249" stroke="black" stroke-width="3" stroke-linecap="round"/>
<path d="M6.89966 32.2659C12.7539 31.1236 17.4687 25.043 23.3153 25.043C29.0061 25.043 34.6969 25.043 40.3876 25.043C43.0659 25.043 45.0018 25.7306 47.2457 27.0128C48.1465 27.5276 49.226 31.987 50.0911 33.0684C50.928 34.1145 51.2801 37.7806 51.5868 39.1604C52.0712 41.3404 53.3983 43.983 53.5202 46.055C53.6671 48.5524 53.5202 51.104 53.5202 53.6062C53.5202 56.3795 51.3515 56.0635 49.7263 57.3636C46.3139 60.0936 42.953 61.5494 39.0744 63.2733C35.5857 64.8238 28.7405 65.5612 25.7959 62.6166C24.4023 61.223 23.4202 59.5974 21.6738 58.2391C20.8551 57.6024 19.6275 56.8962 18.7189 56.4151C17.1243 55.5709 17.6693 54.6584 16.7491 53.2779" stroke="black" stroke-width="3" stroke-linecap="round"/>
<path d="M6.24303 32.9225C6.24303 35.6906 5.10843 42.831 6.89966 45.0701C8.76738 47.4047 12.61 46.313 14.1226 49.3382" stroke="black" stroke-width="3" stroke-linecap="round"/>
<path d="M38.4178 23.0731C42.437 22.1688 42.4201 19.4772 45.3124 17.1635C46.0959 16.5367 46.9838 15.6488 47.6106 14.8653C48.0561 14.3083 50.0801 13.2237 49.5804 13.2237" stroke="black" stroke-width="3" stroke-linecap="round"/>
<path d="M44.3274 25.0429C48.6931 21.8679 50.6846 15.4878 56.4385 13.8438C57.9071 13.4242 55.2267 14.6024 57.1681 15.1571C58.7447 15.6075 60.389 14.9525 61.728 14.2086C63.0463 13.4762 64.5662 13.2673 65.6313 12.2022C66.4452 11.3883 66.3007 8.29369 65.0111 8.00712C63.5229 7.67641 62.2975 6.65739 60.7431 6.65739C58.0421 6.65739 59.1244 5.86703 60.5972 4.54159C64.1057 1.38389 60.6689 2.061 57.4599 2.061C54.9765 2.061 52.9704 3.59392 51.6962 6.00076C51.1296 7.07107 50.4321 8.54755 49.7263 9.42981C49.1407 10.1619 50.8937 11.6132 50.8937 12.567" stroke="black" stroke-width="3" stroke-linecap="round"/>
<path d="M34.3226 64.4922C34.3226 63.5057 34.3226 62.5192 34.3226 61.5327C34.3226 60.8595 34.4826 60.2728 34.4826 59.6131C34.4826 58.9496 34.5247 58.2156 34.5626 57.5334C34.5847 57.1349 34.6426 56.7192 34.6426 56.2981C34.6426 56.0206 34.7085 55.4654 34.8203 55.2139C34.9592 54.9014 34.9215 54.5038 35.0825 54.214C35.2484 53.9155 35.5666 54.0141 35.9223 54.0141C36.7305 54.0141 37.5742 54.174 38.4019 54.174C38.9485 54.174 39.495 54.174 40.0416 54.174C40.1632 54.174 40.396 54.2239 40.5171 54.2585C40.5526 54.2686 40.8194 53.82 40.8815 53.6764C41.0311 53.3298 41.3175 53.0151 41.4236 52.6543C41.4796 52.4638 41.5593 52.224 41.7213 52.0944C41.9458 51.9148 42.1612 51.7662 42.1612 51.4545" stroke="black" stroke-width="3" stroke-linecap="round"/>
<path d="M42.0813 51.3745C42.0813 50.9056 41.8847 49.6808 42.1213 49.2549C42.3761 48.7962 42.1879 48.1911 42.4412 47.7351C42.5888 47.4696 43.2026 47.7169 43.441 47.7574C44.1532 47.8783 44.8793 47.9478 45.5962 48.0195C46.2368 48.0836 46.8962 48.2424 47.4848 48.4106C48.6684 48.7488 49.7737 49.1089 51.0219 49.3926C51.6422 49.5336 52.2319 49.9047 52.7994 50.1569C53.0133 50.252 54.3308 50.7113 54.3991 50.5746" stroke="black" stroke-width="3" stroke-linecap="round"/>
<path d="M52.9593 54.5739C52.9593 55.2592 52.9902 55.7405 52.3194 56.0759C51.842 56.3146 51.2776 56.5311 50.8974 56.9113C50.6733 57.1354 49.95 57.6944 50.4797 57.1335C50.8175 56.7759 51.1312 56.402 51.4796 56.0537C51.8905 55.6427 52.451 55.1698 52.9593 54.8939C53.1031 54.8158 53.5934 54.6412 53.6792 54.5339C53.7464 54.4499 53.911 54.5526 53.9191 54.414C53.9268 54.2838 53.9268 54.1442 53.9191 54.014C53.9119 53.8919 53.5143 53.7955 53.4214 53.7119C53.09 53.4136 52.7365 53.2663 52.3194 53.2142C52.1091 53.1879 52.0726 52.9742 51.7995 52.9742C51.3279 52.9742 52.052 53.0542 52.1994 53.0542C52.5433 53.0542 52.8039 53.3566 53.1193 53.3742C53.3298 53.3858 53.6557 53.4089 53.8791 53.4586C54.0912 53.5057 54.4458 53.466 54.639 53.5519C54.9567 53.6931 55.0151 53.5532 55.2389 53.3742C55.8612 52.8763 56.4598 52.3177 57.0208 51.7567C57.2568 51.5206 57.2249 50.8476 57.0208 50.5924C56.865 50.3977 56.6386 50.4762 56.6386 50.2147C56.6386 50.0235 56.4787 49.4724 56.4787 49.6637C56.4787 49.8772 56.3987 50.2991 56.3987 50.2991C56.3987 50.2991 56.5382 50.1631 56.5542 50.2192C56.5871 50.3342 56.5586 50.4951 56.5586 50.6146C56.5586 50.8679 56.5586 51.1212 56.5586 51.3745C56.5586 51.6423 56.6131 52.1852 56.3187 51.6944" stroke="white" stroke-width="3" stroke-linecap="round"/>
<path d="M56.3987 55.3738C54.9251 56.7272 52.8717 57.5309 51.1463 58.511C50.2617 59.0135 49.3266 59.4234 48.4002 59.8352C48.2841 59.8868 48.3202 59.6626 48.3202 59.6086C48.3202 59.3352 48.4699 59.1031 48.6579 58.9109C49.0547 58.5051 49.6056 58.0917 50.1598 57.9333C51.0776 57.6711 49.9402 58.6836 49.6488 58.8132C49.2437 58.9932 49.762 57.538 49.6799 57.5334C49.279 57.5111 48.8602 57.7851 48.4979 57.9333C48.1177 58.0889 47.8827 58.1547 48.018 57.6134C48.0937 57.3106 48.3476 56.8176 48.6401 56.6713C48.7605 56.6111 49.04 56.514 49.04 56.698C49.04 57.1287 48.8644 57.4604 48.6357 57.8178C48.1338 58.602 47.3538 59.3172 46.6582 59.933C46.3658 60.1919 46.0151 60.6448 45.6806 60.8306C45.2845 61.0507 45.4407 59.8244 45.4407 59.6086C45.4407 58.8101 45.6834 58.0166 46.0406 57.3023C46.2711 56.8413 46.1606 57.487 46.1606 57.7023C46.1606 58.6123 45.6528 59.5535 45.2007 60.3285C44.9606 60.7401 44.7468 61.4316 44.3831 61.7549C44.3219 61.8092 44.3963 60.8965 44.4009 60.8128C44.4248 60.3705 44.6678 60.2288 44.3875 60.7017C44.0171 61.3268 43.4743 61.8194 42.9656 62.3281C42.9263 62.3674 42.6436 62.6598 42.579 62.5369C42.392 62.1817 42.5568 61.342 42.5612 60.955C42.5634 60.7576 42.801 60.1712 42.8012 60.1729C42.8223 60.511 42.8174 60.9331 42.6412 61.2305C42.5864 61.323 42.4812 61.8496 42.4812 61.5149C42.4812 61.112 42.5874 59.9188 42.4768 60.3062C42.1563 61.4279 41.5664 62.3373 40.8815 63.2746C40.6557 63.5836 40.7255 62.8564 40.7215 62.7502C40.7057 62.324 40.4907 63.1795 40.4771 63.2879C40.4656 63.38 40.3216 63.9232 40.3216 63.6034C40.3216 63.128 40.3216 62.6525 40.3216 62.177C40.3216 61.8818 40.1924 62.6738 40.1616 62.8125C40.084 63.1617 39.937 63.4124 39.9217 62.8924C39.8925 61.8993 39.5201 63.454 39.3618 63.6123C39.1278 63.8462 39.0503 63.7655 39.0418 63.4523C39.0299 63.0098 38.8818 62.5896 38.8818 62.1415C38.8818 61.6745 39.1377 63.4266 38.6819 63.5279C38.4386 63.5819 38.3468 62.9801 38.3264 62.8169C38.288 62.5097 38.3304 63.2294 38.3219 63.3724C38.3005 63.7378 38.1115 62.8711 38.0998 62.8036C38.0759 62.6655 38.002 61.7771 38.002 62.257C38.002 62.9986 37.9127 63.552 37.5843 64.1722C37.4052 64.5105 37.6311 64.9496 37.4599 65.292C37.3211 65.5695 37.6021 64.6824 37.6021 64.3722C37.6021 63.9338 37.6175 63.7315 37.3799 63.4346C37.3041 63.3399 37.3621 63.0126 37.3621 62.8924C37.3621 62.7638 37.2021 62.4128 37.2021 62.5414C37.2021 62.9641 37.2014 63.211 37.4021 63.5723C37.5905 63.9114 37.5947 64.2356 37.7443 64.5721C37.8861 64.8913 37.842 65.2906 37.842 65.6519C37.842 66.1118 37.5548 65.9956 37.2021 66.1719" stroke="white" stroke-width="3" stroke-linecap="round"/>
<path d="M8.15076 33.0347C10.6375 33.3638 12.8604 34.7654 15.3102 35.2553C15.8146 35.3562 16.3147 35.5565 16.8026 35.7011C17.2937 35.8466 17.7802 35.9686 18.2671 36.1309C18.5273 36.2176 18.8243 36.5321 18.8243 36.1508C18.8243 35.5896 18.8243 35.0285 18.8243 34.4674C18.8243 33.9164 18.7963 33.3638 18.88 32.8198C18.911 32.6183 18.8306 31.6994 19.1665 32.1194C19.6323 32.7016 20.3842 33.046 21.1165 33.3172C22.7525 33.9231 24.5008 34.2956 26.1906 34.7181C26.3594 34.7603 27.8121 35.2615 27.9059 35.1678C27.9782 35.0955 28.0032 34.7107 28.0292 34.6067C28.147 34.1357 28.2563 33.6546 28.3516 33.1779C28.68 31.5362 28.9247 29.9452 28.9247 28.275C28.9247 27.6005 28.853 26.8625 28.853 26.2294" stroke="black" stroke-width="3" stroke-linecap="round"/>
<path d="M11.3743 30.0976C12.7002 29.2397 14.1133 28.4646 15.4933 27.6979C15.876 27.4853 16.268 27.2858 16.6912 27.1447C17.1294 26.9987 17.5858 26.7653 18.0204 26.5876C18.3718 26.4438 18.7148 26.3272 19.071 26.2254C19.1861 26.1925 19.3314 26.0632 19.4531 26.0145C19.8189 25.8682 20.1961 25.8347 20.5793 25.7638C21.0085 25.6843 21.4681 25.728 21.9046 25.728C22.4192 25.728 21.627 25.6563 21.4748 25.6563C20.3411 25.6563 19.2122 25.8712 18.0761 25.8712C17.6622 25.8712 17.2483 25.8712 16.8344 25.8712C16.6988 25.8712 16.3222 25.94 16.2136 25.8314C15.9728 25.5906 16.4565 25.5174 16.6036 25.6563C17.1683 26.1897 17.6916 27.1672 17.4593 27.9805C17.4344 28.0674 16.8912 28.2341 16.7827 28.3426C16.2916 28.8337 15.909 29.4416 15.3699 29.8827C14.8618 30.2984 14.4318 30.6707 13.7741 30.6707C13.3211 30.6707 12.9066 30.7424 12.4488 30.7424C11.6055 30.7424 10.8778 30.1693 10.0849 30.1693C9.22261 30.1693 8.40404 30.1207 7.57772 30.1693C7.41399 30.1789 7.16447 30.2574 7.00464 30.3285C6.81818 30.4113 6.57482 30.3995 6.39177 30.4518C6.29546 30.4794 6.17306 30.45 6.0734 30.4558C5.98671 30.4609 5.91693 30.5742 5.82268 30.5951C5.66033 30.6312 5.50411 30.7405 5.35706 30.814" stroke="white" stroke-width="3" stroke-linecap="round"/>
<path d="M18.2512 24.0804C19.14 24.0804 20.0288 24.0804 20.9176 24.0804C21.806 24.0804 22.734 24.2751 23.6238 24.148C23.7381 24.1317 23.9953 24.0989 24.0695 24.0247C24.1594 23.9348 24.1969 23.8423 24.1969 24.0087C24.1969 24.2963 24.0536 24.5423 24.0536 24.8325C24.0536 25.131 24.0536 25.4295 24.0536 25.728C24.0536 25.8915 23.9984 26.5197 24.1809 26.0861C24.3952 25.5772 24.4182 25.0422 24.6983 24.542C25.0465 23.9203 25.1424 23.1954 25.4704 22.5761C25.6081 22.3159 25.6295 23.1628 25.6295 23.2566C25.6295 23.5431 25.6295 23.8297 25.6295 24.1162C25.6295 24.6426 25.7002 25.2195 25.3032 25.6165C25.1097 25.81 24.7799 25.6725 24.5391 25.7439C24.1337 25.864 23.6889 25.8712 23.2656 25.8712" stroke="white" stroke-width="3" stroke-linecap="round"/>
<path d="M25.5579 26.516C25.7966 26.516 26.0354 26.516 26.2742 26.516C26.5294 26.516 26.1809 26.5426 26.1309 26.4801C26.0472 26.3755 25.9694 25.7569 26.0951 25.6564C26.2441 25.5371 26.3963 25.0588 26.4175 24.8684C26.4364 24.6977 26.5607 24.5857 26.5607 24.4028C26.5607 24.2475 26.5607 24.0923 26.5607 23.9371" stroke="white" stroke-width="3" stroke-linecap="round"/>
<path d="M27.7069 23.5789C27.9825 23.5252 28.2189 23.4378 28.463 23.368C28.524 23.3506 28.6457 23.3963 28.6938 23.3481C28.757 23.285 28.583 23.3222 28.5506 23.3481C28.4842 23.4012 28.126 23.4102 28.0292 23.4317C27.8854 23.4636 27.7886 23.5789 27.6353 23.5789" stroke="white" stroke-width="3" stroke-linecap="round"/>
<path d="M3.13635 32.4616C3.50557 32.3895 3.91166 32.4237 4.12331 32.1591C4.19319 32.0718 4.20804 31.9458 4.2825 31.8527C4.3781 31.7332 4.55532 31.6273 4.67649 31.5303C4.77973 31.4477 4.89293 31.3259 4.99884 31.2597C5.10227 31.1951 5.27944 31.1617 5.35701 31.0647C5.50976 30.8738 5.95939 30.8986 6.07335 30.6707" stroke="white" stroke-width="3" stroke-linecap="round"/>
<path d="M11.3743 30.8856C11.5986 30.8124 11.9299 30.7642 12.0907 30.5633C12.1329 30.5105 12.3862 30.5274 12.3056 30.5274" stroke="white" stroke-width="3" stroke-linecap="round"/>
<path d="M10.0849 30.6707C10.5139 30.5033 10.982 30.4312 11.3743 30.2569C11.5529 30.1775 11.3062 30.1693 11.1594 30.1693C10.9408 30.1693 10.7585 30.0977 10.5505 30.0977C10.1322 30.0977 8.80951 30.2978 8.58057 29.9544" stroke="white" stroke-width="3" stroke-linecap="round"/>
<path d="M12.8107 31.3497C12.5305 31.343 12.2612 31.1864 12.0019 31.0938C11.8647 31.0448 11.7254 30.976 11.5939 30.9103C11.536 30.8813 11.4848 30.8318 11.4201 30.8282C11.2595 30.8193 11.1102 30.7109 10.9469 30.6979C10.807 30.6867 10.6555 30.5968 10.5184 30.5663C10.3798 30.5355 10.2676 30.4371 10.1273 30.4371C9.96259 30.4371 9.80184 30.3593 9.63845 30.3502C9.4709 30.3409 9.30926 30.3285 9.13871 30.3285C9.06867 30.3285 8.93001 30.391 8.87315 30.4323C8.83199 30.4622 8.70232 30.4589 8.64984 30.4589C8.4905 30.4589 8.33117 30.4589 8.17183 30.4589C8.09426 30.4589 8.02351 30.524 7.95456 30.524C7.9124 30.524 7.78782 30.5662 7.75297 30.5941C7.6476 30.6783 7.38491 30.6327 7.25323 30.6327C7.16508 30.6327 7.07569 30.628 6.98767 30.6327C6.94218 30.6351 6.77705 30.6515 6.74867 30.687C6.71142 30.7336 6.57731 30.7196 6.52173 30.7196C6.36964 30.7196 6.21755 30.7196 6.06545 30.7196C5.95681 30.7196 5.63764 30.667 5.55847 30.7461C5.51386 30.7908 5.4871 30.8464 5.44018 30.8886C5.42489 30.9023 5.34242 30.9369 5.41241 30.9369C5.43084 30.9369 5.51191 30.9445 5.48846 30.932C5.22755 30.7939 5.06727 30.611 4.76058 30.611C4.51938 30.611 4.4713 30.8944 4.33689 31.0672C4.28022 31.1401 4.21692 31.2895 4.13048 31.328C4.11948 31.3329 4.05842 31.3875 4.07616 31.4052C4.09977 31.4288 4.12585 31.3605 4.15221 31.34C4.21338 31.2925 4.277 31.2373 4.34655 31.1976C4.38776 31.174 4.48483 31.1105 4.51072 31.0781C4.52801 31.0565 4.56833 31.0651 4.5928 31.0407C4.61243 31.021 4.63024 30.9977 4.65195 30.9803C4.72301 30.9235 4.78357 30.8429 4.85353 30.7799C4.88437 30.7522 4.91791 30.7314 4.95372 30.7099C4.98444 30.6915 4.89637 30.7544 4.86319 30.7679C4.7351 30.8201 4.65133 30.9529 4.53244 31.0189C4.44877 31.0654 4.23406 31.237 4.20532 31.3376C4.16759 31.4697 4.02541 31.5762 3.98804 31.707C3.9773 31.7446 3.87581 31.8489 3.84802 31.8712C3.79957 31.9099 3.7776 31.9621 3.73335 32.0064C3.56531 32.1744 3.4026 32.4437 3.4026 32.6859C3.4026 32.7119 3.42734 32.9168 3.44485 32.838C3.46585 32.7435 3.43233 32.6418 3.50641 32.5592C3.56082 32.4985 3.57062 32.6065 3.56556 32.6328C3.53427 32.7955 3.45108 32.9643 3.37001 33.1084C3.32421 33.1899 3.27077 33.3098 3.21188 33.3752C3.15914 33.4338 3.14626 33.518 3.11531 33.5876C3.0845 33.657 2.9858 33.7967 3.07669 33.6577C3.13441 33.5694 3.17312 33.4731 3.22757 33.3812C3.29032 33.2753 3.36498 33.173 3.42433 33.0662C3.48282 32.9609 3.57823 32.7835 3.6742 32.7089C3.70139 32.6877 3.61709 32.8278 3.59815 32.861C3.54905 32.9469 3.50518 33.0336 3.45692 33.1205C3.42079 33.1855 3.3741 33.2651 3.35794 33.3378C3.34996 33.3737 3.27224 33.5279 3.27224 33.4356" stroke="white" stroke-width="3" stroke-linecap="round"/>
<path d="M29.4952 22.5354C29.64 22.5637 29.7906 22.5415 29.9306 22.5815C29.958 22.5893 29.9755 22.6332 30.0003 22.6474C30.0408 22.6705 30.0386 22.6182 30.0774 22.5976C30.1309 22.5693 30.3258 22.4907 30.1782 22.4907C30.1036 22.4907 29.9835 22.5264 29.9207 22.5578" stroke="white" stroke-width="3" stroke-linecap="round"/>
<path d="M30.9283 22.4682C31.0804 22.3494 31.2272 22.252 31.4159 22.1821C31.4301 22.1769 31.6161 22.0925 31.5328 22.0876C31.4695 22.0839 31.4048 22.0876 31.3413 22.0876C31.2221 22.0876 31.0628 22.1483 30.9507 22.1884C30.7748 22.2512 30.5507 22.3205 30.3635 22.3339C30.1351 22.3502 29.8947 22.4363 29.6794 22.508C29.5138 22.5632 29.3225 22.5966 29.1706 22.681C29.0416 22.7526 28.8716 22.785 28.734 22.8539C28.6355 22.9031 28.4543 23.0092 28.3981 23.1076C28.3267 23.2325 28.1694 23.2691 28.0846 23.3751C28.0506 23.4177 27.9434 23.4764 27.8943 23.4982C27.8278 23.5278 27.7512 23.6244 27.6816 23.6326C27.5758 23.645 27.3954 23.7569 27.3121 23.8217C27.2254 23.8891 27.1143 23.9187 27.0372 23.9958C26.9524 24.0806 26.8719 24.1647 26.8133 24.2819C26.7498 24.4088 26.6612 24.5289 26.6068 24.6514C26.488 24.9186 26.3605 25.1632 26.3605 25.4575C26.3605 25.5128 26.3157 25.5761 26.3157 25.6366C26.3157 25.6532 26.2933 25.7797 26.2933 25.7261C26.2933 25.6548 26.3651 25.5076 26.4103 25.4512C26.4746 25.3708 26.5614 25.2727 26.6118 25.1776C26.6652 25.0767 26.7596 24.9657 26.7847 24.8529C26.8312 24.6437 27.019 24.4667 27.1168 24.2819C27.2134 24.0996 27.3746 23.9072 27.5199 23.7619C27.7174 23.5644 27.846 23.3069 28.0734 23.13C28.2028 23.0294 28.3388 22.9106 28.4653 22.8041C28.5441 22.7377 28.54 22.8437 28.515 22.8937C28.492 22.9398 28.4489 23.0187 28.4093 23.0504C28.1601 23.2498 27.9133 23.478 27.6866 23.7047C27.6153 23.776 27.547 23.8388 27.4689 23.9013C27.2949 24.0405 27.3923 23.8126 27.3457 23.7893" stroke="white" stroke-width="3" stroke-linecap="round"/>
<path d="M17.1065 37.5163C16.3173 38.1552 15.5784 38.8283 14.8615 39.5452C14.6088 39.798 14.3414 39.9497 14.2972 40.3256C14.2683 40.5718 13.9951 40.8199 13.9731 41.106C13.944 41.4838 13.7358 41.8524 13.6549 42.2165C13.6367 42.2983 14.8967 43.1269 15.1076 43.291C15.2973 43.4385 15.5268 43.6174 15.7499 43.6812C15.8353 43.7056 16.3147 44.1557 15.918 43.8913" stroke="black" stroke-width="3" stroke-linecap="round"/>
<path d="M22.401 50.2663C23.0921 50.6709 23.8281 51.0138 24.562 51.3228C24.9027 51.4662 25.3732 51.3292 25.6965 51.5089C26.0244 51.691 26.8932 51.7684 27.2633 51.779C28.0121 51.8004 28.7422 51.8564 29.4723 51.9891C29.8781 52.0629 30.3608 51.9951 30.7749 51.9951C31.3522 51.9951 31.9097 52.1895 32.4737 52.2112C32.9283 52.2287 33.1864 52.4294 33.5783 52.5414C33.9339 52.643 34.2425 53.0315 33.7463 52.5354" stroke="black" stroke-width="3" stroke-linecap="round"/>
<path d="M22.7252 58.8023C22.7252 61.6106 22.8332 57.0873 22.8332 60.9393C22.8332 61.2347 22.8641 61.5807 23.2114 61.2334C23.6673 60.7775 23.5378 62.205 23.5656 62.476C23.6408 63.2121 23.7189 63.9976 24.0218 64.6791C24.1919 65.0618 24.6555 64.2406 24.7241 64.1568C24.906 63.9345 25.0089 63.7411 24.9942 63.4485C24.9529 62.622 24.8862 61.8016 24.8862 60.9633C24.8862 60.5671 24.8862 59.3786 24.8862 59.7748C24.8862 59.9079 24.9942 60.5454 24.9942 60.1529C24.9942 59.6302 25.1362 60.647 25.2583 60.9033C26.1264 62.7246 26.7761 64.645 27.5754 66.4979C27.7663 66.9404 27.9939 67.3663 28.1757 67.8125C28.2016 67.876 28.523 68.3667 28.4278 68.0706C28.2202 67.4245 27.8027 66.8243 27.5394 66.1978C27.1771 65.3357 26.9102 64.4246 26.723 63.5085C26.6826 63.3106 26.218 61.7781 26.573 62.2119C26.9575 62.6818 27.316 63.1668 27.8035 63.5325C28.1268 63.775 28.4073 63.9686 28.83 63.8747C29.0729 63.8207 28.9474 63.3404 29.2082 63.3404C29.4461 63.3404 29.6869 63.5539 29.8805 63.6646C30.5239 64.0322 31.1484 64.4323 31.7954 64.7931C32.5671 65.2235 33.4206 65.737 34.2626 66.0177C34.8591 66.2165 33.4307 65.9934 33.2541 65.9276C32.2917 65.5695 31.4778 65.1313 30.6249 64.583C30.3249 64.3902 30.9468 64.6032 31.0451 64.661C31.5449 64.955 29.8013 65.3161 29.7004 65.3394C29.4866 65.3887 27.8681 65.9004 28.5839 65.5014C29.1644 65.1779 29.8008 64.9675 30.3848 64.643C30.7413 64.445 31.0609 64.2286 31.4773 64.2048C31.5759 64.1992 31.8522 64.0968 31.7534 64.0968C31.478 64.0968 31.1405 64.2811 30.883 64.3669C30.606 64.4593 30.3454 64.5683 30.0786 64.6851C29.9489 64.7418 29.5883 64.753 29.6884 64.8531C29.7861 64.9508 30.4066 64.7652 30.5048 64.7451C31.3528 64.5716 32.1434 64.2217 32.978 64.0007C33.8743 63.7635 35.0143 63.2324 35.9494 63.2324C36.8065 63.2324 32.5969 63.4725 33.3802 63.1243C34.0223 62.8389 34.8441 62.7901 35.5352 62.6681C36.5382 62.4911 35.5842 62.328 35.103 62.2119C34.8515 62.1512 33.8738 62.0691 33.8544 61.7197C33.8329 61.3321 34.2371 61.2346 34.5567 61.1854C35.1515 61.0939 34.9305 61.1794 34.4187 61.1794C34.1529 61.1794 32.8819 61.3574 32.8819 60.9633C32.8819 60.6217 35.166 60.391 33.9864 60.1229C33.8818 60.0991 32.7249 59.9612 32.7919 59.7267C32.8504 59.522 34.6601 59.6667 34.9349 59.6667C35.3091 59.6667 36.4316 59.6667 36.0574 59.6667C35.5149 59.6667 34.8083 59.3301 34.3106 59.1264C33.1951 58.6701 34.8673 58.6436 34.7668 58.5862C34.5008 58.4342 34.2209 58.3825 34.7428 58.3701C35.0686 58.3623 35.7626 58.374 36.0574 58.256C36.4277 58.1079 35.2849 58.0524 34.9109 57.9139C34.5627 57.7849 34.554 57.5684 34.3406 57.3976C34.2007 57.2857 33.4342 56.6348 33.4342 56.4792C33.4342 56.456 34.5571 56.6413 34.7188 56.6413C34.9628 56.6413 35.1654 56.7493 35.4211 56.7493C35.7005 56.7493 35.7985 56.9654 35.4751 56.9654C35.0209 56.9654 34.6422 56.8592 34.3466 56.4792C33.935 55.95 32.7158 55.964 32.1256 55.6688" stroke="white" stroke-width="3" stroke-linecap="round"/>
<path d="M37.9603 64.7451C37.9603 65.9297 37.9603 67.1142 37.9603 68.2988C37.9603 68.782 37.7613 69.1407 37.5221 68.5029C37.086 67.3399 36.8407 63.6131 36.7718 64.8532C36.7505 65.2365 36.6637 65.593 36.6637 65.9817C36.6637 66.4379 36.4981 65.6783 36.4476 65.5015C36.2058 64.655 34.2068 65.0652 33.7463 65.5015C33.5954 65.6445 33.3612 65.9356 33.1461 65.7596C32.7288 65.4182 32.5161 64.7868 32.2096 64.3489C31.6847 63.5991 31.1232 62.8848 30.4448 62.266C29.1892 61.1205 27.558 60.394 25.8826 60.1229C25.6211 60.0806 24.5004 59.7763 24.2619 60.0149C24.1302 60.1466 24.2379 60.7594 24.2379 60.5732C24.2379 60.1398 24.1895 59.7277 24.1238 59.3006C23.9896 58.428 23.3645 59.6864 23.2714 59.1745C23.1877 58.714 23.0736 58.1599 23.0493 57.7218C23.0228 57.2448 22.4025 56.9621 22.1849 57.4517C22.0161 57.8315 21.8005 58.3119 21.7527 58.6943C21.7105 59.0317 21.3521 58.5588 21.3265 58.4181C21.2777 58.1496 21.3205 57.8337 21.3205 57.5597C21.3205 57.1522 21.3747 56.6355 21.0804 56.3412C20.9284 56.1892 20.8122 55.9924 20.6242 55.885C20.5028 55.8156 20.2132 55.7164 20.1319 55.6148C19.9084 55.3354 19.1595 57.2305 19.1595 57.5057" stroke="white" stroke-width="3" stroke-linecap="round"/>
<path d="M10.0833 47.457C10.413 47.2072 11.0382 46.9167 10.3534 46.9167C9.85209 46.9167 10.2188 46.6516 10.4674 46.5386C10.8724 46.3545 11.5069 46.2316 11.8361 45.9683C11.8979 45.9188 12.4028 45.6521 11.9741 45.8903C11.6217 46.086 10.8632 46.0234 10.4614 46.0583C9.54523 46.138 8.3591 46.3595 7.43602 46.1544C6.90194 46.0357 7.29421 44.8824 7.14188 44.5396C7.01024 44.2434 7.05784 44.0213 7.05784 44.4856C7.05784 44.7542 7.16459 45.1322 7.33397 45.35C7.56077 45.6416 7.25103 45.2094 7.1899 45.1279C6.84383 44.6665 6.52255 44.213 6.30148 43.6752C5.86276 42.6081 5.41844 41.404 5.32903 40.2416C5.29323 39.7763 5.13676 40.794 5.30501 40.6258C5.58262 40.3482 5.73759 39.7103 5.92931 39.3652C6.12941 39.005 6.33334 38.6412 6.51758 38.2727C6.54677 38.2143 6.72168 37.7122 6.72168 38.0446C6.72168 39.1648 5.9464 40.4268 5.46709 41.3941C4.8319 42.6761 4.13827 43.9658 3.60622 45.296C3.50917 45.5386 3.34562 46.3747 3.06596 46.5146C2.97109 46.562 3.05856 46.3025 3.05996 46.1964C3.06522 45.7966 3.09621 45.416 3.21603 45.0319C3.46531 44.2327 3.73868 43.3669 4.18849 42.6547C4.40626 42.3099 4.64103 41.3687 5.11292 41.6463C5.32628 41.7718 5.65318 42.1827 5.65318 42.4326C5.65318 42.7839 5.38341 43.0419 5.60516 42.7568C5.98289 42.2711 6.19343 42.5505 6.19343 43.0269C6.19343 43.5294 5.86928 44.005 5.86928 44.4856C5.86928 44.7214 5.93059 45.0303 5.78524 45.2119C5.70461 45.3127 5.76123 45.42 5.76123 45.1639C5.76123 44.4462 5.72673 43.7185 5.78524 43.0029C5.9833 40.5804 7.00806 38.2851 7.43602 35.9076C7.47071 35.7148 8.04764 33.7126 7.26794 34.3949C6.79173 34.8115 6.31315 35.4493 6.00134 36.0036C5.98994 36.0239 5.97733 35.4313 5.97733 35.2833C5.97733 34.8796 6.00854 34.4989 6.10939 34.1067C6.11848 34.0714 6.22325 33.6888 6.27747 33.7586C6.4291 33.9535 5.83407 35.0035 5.76123 35.1632C5.16868 36.4623 4.35329 37.6713 3.84033 39.005C3.29224 40.4301 5.11292 33.0782 5.11292 34.605C5.11292 34.7996 4.97378 35.7962 5.35304 35.5714C5.8098 35.3007 6.08652 34.9005 6.43354 34.5149C6.67123 34.2508 6.89975 33.9113 7.11787 33.6205C7.50054 33.1103 8.01507 31.9525 8.62457 31.6816C9.04425 31.4951 8.54242 32.9738 8.45649 33.1403C8.12441 33.7837 7.08354 35.682 7.34597 35.0071C7.81159 33.8098 8.62896 32.8727 9.30289 31.8136C9.65207 31.2649 9.75911 31.321 9.75911 31.9217C9.75911 32.3994 9.83754 32.7006 9.92118 33.1523C10.0932 34.081 9.97521 35.1068 9.97521 36.0516C9.97521 36.3421 9.97264 35.9143 9.97521 35.8475C9.99203 35.4101 10.2251 35.1797 10.4074 34.8151C10.6171 34.3957 10.7316 34.2765 10.7316 34.8151C10.7316 34.959 10.6235 35.5372 10.6235 35.1392C10.6235 34.8165 10.6781 34.457 10.8156 34.1668C11.0127 33.7507 11.596 31.8987 11.596 33.2483C11.596 33.7807 11.5221 34.2979 11.4039 34.8151C11.2546 35.4684 11.478 34.9137 11.7881 34.707C12.3193 34.3529 13.5736 34.1332 13.763 33.4704C13.8613 33.1264 14.0446 33.2235 13.9671 33.5725C13.8846 33.9435 13.4515 34.2196 13.2708 34.5449C12.9987 35.0346 12.6051 35.5257 12.5684 36.1117C12.5666 36.1408 12.6892 35.799 12.8386 35.6795C13.1704 35.414 13.549 35.2049 13.871 34.9231C14.176 34.6563 15.5928 33.6008 14.8615 34.5149C14.6092 34.8303 14.4899 35.259 14.0811 35.4634" stroke="white" stroke-width="3" stroke-linecap="round"/>
<path d="M8.46246 47.5651C8.76591 47.6835 8.95146 47.8068 9.21882 47.6731" stroke="white" stroke-width="3" stroke-linecap="round"/>
<path d="M16.6962 34.0648C16.5181 34.0995 16.3548 34.146 16.2119 34.2572C16.1446 34.3095 16.0834 34.3615 16.0211 34.417C15.9157 34.5107 16.0012 34.4195 16.0374 34.3729C16.0744 34.3254 16.1811 34.2702 16.2412 34.2702C16.3085 34.2702 16.345 34.2149 16.4027 34.2115C16.5024 34.2056 16.7158 34.2193 16.7907 34.1593C16.8582 34.1054 16.8445 34.2687 16.8136 34.2996C16.7898 34.3233 16.7114 34.4063 16.6799 34.4153C16.5797 34.444 16.4388 34.5749 16.388 34.6665C16.2779 34.8647 16.0264 35.066 15.964 35.2845C15.8917 35.5375 15.6796 35.7143 15.5449 35.9432C15.4846 36.0458 15.3635 36.1269 15.2873 36.2221C15.2614 36.2544 14.9712 36.4714 15.0688 36.4993C15.1629 36.5262 15.3048 36.42 15.3167 36.3248C15.3225 36.2783 15.5142 36.1609 15.558 36.1259C15.761 35.9635 15.8489 35.7886 15.9624 35.5617" stroke="white" stroke-linecap="round"/>
<path d="M19.5015 38.556C19.2844 38.398 19.2278 38.3427 19.2278 38.0769C19.2278 37.9534 19.2053 37.7971 19.2836 37.6992C19.4376 37.5067 19.4943 37.2076 19.6485 37.0149C19.7277 36.9159 19.7912 36.8012 19.8868 36.7056C19.9906 36.6019 20.1647 36.4892 20.2417 36.366C20.3069 36.2616 20.4419 36.1779 20.5053 36.0669C20.5521 35.985 20.5735 35.7183 20.6193 35.6816C20.6814 35.6319 20.6468 35.3503 20.6421 35.271C20.6307 35.0765 20.5573 35.3969 20.5484 35.4282C20.4803 35.6662 20.2756 35.8678 20.0718 36.0263C19.9951 36.0861 19.8938 36.2065 19.831 36.2849C19.6994 36.4494 19.7797 36.2759 19.8437 36.1607C19.8879 36.0812 19.9929 35.9024 20.0034 35.8185C20.0118 35.7513 20.0903 35.5241 20.1403 35.4991" stroke="white" stroke-linecap="round"/>
<path d="M10.3766 48.1371C10.5512 48.1371 10.6673 48.1827 10.8329 48.1827C10.9303 48.1827 11.0441 48.0703 11.1269 48.094C11.2777 48.1371 11.0239 48.2945 11.0053 48.3094C10.8796 48.41 10.848 48.1861 10.9039 48.1143C11.1228 47.8327 11.6131 47.8005 11.8366 47.5212C11.8884 47.4565 12.2095 47.2806 12.2929 47.2702C12.4471 47.2509 12.6126 47.013 12.7491 46.9407C13.0685 46.7716 13.3053 46.5131 13.616 46.3577" stroke="white" stroke-linecap="round"/>
<path d="M18.0872 57.8551C18.0366 57.5895 17.9246 57.3863 17.9934 57.1454C18.0301 57.0168 17.957 57.5677 17.8236 57.4343C17.7387 57.3495 18.1526 56.5618 18.2469 56.4864C18.5172 56.2701 18.5493 55.7608 18.84 55.5282C19.0789 55.3371 19.24 54.9168 19.4103 54.6614" stroke="white" stroke-linecap="round"/>
<path d="M19.1366 54.7982C19.0136 54.925 18.9097 55.0486 18.8197 55.1835C18.7529 55.2838 18.8875 54.9504 18.9439 54.8439C19.1288 54.4947 19.0803 55.0881 18.9997 55.2291C18.8826 55.4341 18.6831 55.6144 18.5663 55.8248C18.5063 55.9328 18.2446 56.3495 18.1785 56.3495" stroke="white" stroke-linecap="round"/>
<path d="M33.0064 55.1176C33.1903 55.1176 33.5035 55.1669 33.3055 54.9123C33.2618 54.8562 33.2301 54.7781 33.2345 54.707C33.2375 54.66 33.3162 54.7575 33.3486 54.7755C33.4593 54.837 33.5629 54.8054 33.668 54.8895C33.7602 54.9633 33.7795 55.0916 33.853 55.1861C33.9198 55.272 34.0878 55.4197 34.1014 55.5283C34.1145 55.633 34.2979 55.6428 34.3751 55.6753C34.6391 55.7864 34.9599 55.775 35.1964 55.8933" stroke="white" stroke-linecap="round"/>
<path d="M44.1844 50.7377C44.1844 51.1972 43.7738 51.5289 43.7738 51.9923C43.7738 52.4607 43.6682 52.8396 43.4646 53.247C43.3808 53.4144 43.3259 53.5779 43.2288 53.7235C43.1834 53.7917 43.3054 53.576 43.3201 53.4954C43.3522 53.3187 43.4607 53.1616 43.4975 52.9961C43.5718 52.6616 43.865 52.3032 43.865 51.9695" stroke="white" stroke-linecap="round"/>
<path d="M44.0475 50.7377C44.0475 51.2796 43.8846 51.7105 43.7712 52.2205C43.6931 52.5719 43.6617 52.94 43.5811 53.2926C43.5423 53.4627 43.5326 54.2508 43.3632 54.2508" stroke="white" stroke-linecap="round"/>
<path d="M40.3063 48.4108C40.3063 48.8367 40.3063 49.2625 40.3063 49.6883C40.3063 50.0559 40.3283 50.4486 40.1796 50.7833C40.0591 51.0544 39.8601 51.255 39.7233 51.5133C39.6067 51.7336 39.3283 52.0608 39.0745 52.0608" stroke="white" stroke-linecap="round"/>
</svg>

'''
'''--- src/pages/gamePage/components/animalCharacter/index.css ---

'''
'''--- src/pages/gamePage/components/animalCharacter/index.js ---
import 'regenerator-runtime/runtime'
import React, {useEffect, useState} from 'react'

import './index.css'
import LionEats from '../../assets/LionEats.png'
import Lion from '../../assets/Lion.png'
import './index.css'

export default function AnimalCharacter({ eating }) {
    const [img, setImg] = useState(Lion)
    useEffect(() => {
        setImg(eating ? LionEats : Lion)
    }, [eating])
    return (
        <div className="animal-card">
            <img
                src={img}
                alt="animal image"
            />
        </div>
    )
}

'''
'''--- src/pages/gamePage/components/experience/index.css ---
.experience {
    /*background: content-box url("../../assets/LoadingBorders (1).svg") no-repeat;*/
    background-color: white;
    /*height: 45px;*/
    /*width: 263px;*/
    display: flex;
    position: relative;
    max-width: 422px;
}

.loading-bar {
    /*background: content-box url("../../assets/LoadingZone (1).svg") no-repeat;*/
    overflow: hidden;
    object-fit: cover;
    height: 52px;
    object-position: 100% 0;
    /*padding: 13px 15px 10px 15px;*/
    left: 20px;
    top: 9px;
    /*width: 246px;*/
    position: absolute;
    display: flex;
    justify-content: center;
    align-items: center;
}

.experience-numbers {
    position: absolute;
    left: 50%;
    transform: translate(-50%, 0);
    background-color: black;
    font-size: 12px;
}
'''
'''--- src/pages/gamePage/components/experience/index.js ---
import './index.css'
import LoadingBorders from '../../assets/LoadingBorders (1).svg'
import LoadingZone from '../../../../assets/LoadingZone (1).svg'
import {useInterval} from "../../../../utils/hooks";
import {useState} from "react";

export default function Experience({ exp }) {
    const maxPercentages = exp / (50 / 100)
    const [percentages, setPercentages] = useState(0)

    useInterval(() => {
        if (percentages < maxPercentages) {
            setPercentages(percentages + 2)
        }
    },percentages < maxPercentages ? 500 : null)
    return (
        <div className="experience">
            <img src={LoadingBorders} className="loading-borders" alt="loading borders" />
            <img
                src={LoadingZone}
                style={{
                    width: `calc((${percentages > 100 ? 100 : percentages}%) - 45px)`
                }}
                alt="loading zone"
                className="loading-bar"
            />
            <div className="experience-numbers">
                {exp}/50
            </div>
        </div>

    )
}
'''
'''--- src/pages/gamePage/components/food/index.css ---
.animal-food {
}

.animal-food-img {
    background-color: white;
    height: 75px;
    width: 75px;
}
'''
'''--- src/pages/gamePage/components/food/index.js ---
import 'regenerator-runtime/runtime'
import React, {useEffect, useState} from 'react'

import './index.css'
import FullFood from '../../assets/Food.svg'
import First from '../../assets/First.svg'
import Second from '../../assets/Second.svg'
import Third from '../../assets/Third.svg'
import Fourth from '../../assets/Fourth.svg'
import Fifth from '../../assets/Fifth.svg'

export default function Food({ eatingTimes }) {
    const [img, setImg] = useState(FullFood)

    useEffect(() => {
        switch (eatingTimes) {
            case 1:
                setImg(FullFood)
                break;
            case 2:
                setImg(First)
                break;
            case 4:
                setImg(Second)
                break;
            case 6:
                setImg(Third)
                break;
            case 8:
                setImg(Fourth)
                break;
            case 10:
                setImg(Fifth)
                break;
            default:
                break;
        }
    }, [eatingTimes])

    return (
        <div className="animal-food">
            <img
                src={img}
                className="animal-food-img"
                alt="animal food image"
            />
        </div>
    )
}

'''
'''--- src/pages/gamePage/components/mintModal/index.css ---
.mint-modal-background {
    height: 100vh;
    width: 100vw;
    position: absolute;
    top: 0;
    left: 0;
    background-color: black;
    background-color:rgba(0, 0, 0, 0.9);
    /*opacity: 0.7;*/
}

.mint-modal-wrapper {
    position: relative;
    height: 100%;
    width: 100%;
}

.mint-modal {
    position: absolute;
    top: 20%;
    left: 50%;
    transform: translate(-50%, 0);
    display: flex;
    flex-direction: column;
    align-items: center;
}

.mint-modal-nft {
    max-height: 465px;
    max-width: 315px;
}

.nft-description, .nft-name {
    text-align: center;
    margin: 0;
}

.nft-description {
    margin-top: 10px;
}

.nft-name {
    margin-top: 0;
    margin-bottom: 10px;
}
'''
'''--- src/pages/gamePage/components/mintModal/index.js ---
import './index.css'
import {utils} from "near-api-js";

export default function MintModal() {
    const mintNFT = async () => {
        await window.contract.nft_mint(
            {
                token_type: 'LionGold',
            },
            300000000000000, // attached GAS (optional)
            utils.format.parseNearAmount("1")
        );
    };

    return (
        <div className="mint-modal-background">
            <div className="mint-modal-wrapper">
                <div className="mint-modal">
                    <img
                        className="mint-modal-nft"
                        src="https://ipfs.io/ipfs/bafkreiebcaejfxzbufngzqzo5ox2e7i2lsxpbzrnc65hggzpkdeozyjhxi"
                        alt="Gold Lion NFT Image"
                    />
                    <p className="nft-description">
                        Congrats! You have upgraded Lion lvl 2 so you can mint your
                    </p>
                    <p className="nft-name">Top Support NFT</p>
                    <button onClick={mintNFT}>Mint</button>
                </div>
            </div>
        </div>
    )
}
'''
'''--- src/pages/gamePage/index.css ---
.game-page {
    display: flex;
    justify-content: space-between;
    padding: 15px;
}

.character-buttons {
    display: flex;
    flex-direction: column;
    margin-left: 10px;
    margin-top: 15px;
}

.character-buttons button {
    height: 45px;
    margin-bottom: 10px;
}

.character-panel {
    display: flex;
    width: 50%;
}

.food-row {
    display: flex;
    align-items: center;
    margin-top: 15px;
}

.food-count {
    margin-right: 10px;
}

.items-panel {
    width: 50%;
    display: flex;
    align-items: flex-end;
    flex-direction: column;
}

.donation-row {
    display: flex;
    align-items: center;
}

.donation-row input {
    margin: 0 10px 10px;
}

.animal-info {
    margin-left: 15px;
    display: flex;
    flex-direction: column;
}

.animal-info h2 {
    margin: 0 0 5px;
}

.instruction {
    display: flex;
    flex-direction: column;
    align-items: center;
}
'''
'''--- src/pages/gamePage/index.js ---
import React, {useEffect, useState} from 'react'

import './index.css'
import AnimalCharacter from "./components/animalCharacter";
import PageWrapper from "../../components/pageWrapper";
import {useInterval} from "../../utils/hooks";
import Food from "./components/food";
import { utils } from "near-api-js";
import Experience from "./components/experience";
import MintModal from "./components/mintModal";

export default function GamePage() {
    const [isLoading, setIsLoading] = useState(true)
    const [eating, setEating] = useState(false)
    const [eatingTimes, setEatingTimes] = useState(0)
    const [foodInput, setFoodInput] = useState(0)
    const [userBalance, setUserBalance] = useState(0)
    const [foodCount, setFoodCount] = useState(0)
    const [exp, setExp] = useState(0)
    const [hasVipToken, setHasVipToken] = useState(true)

    useEffect(() => {
        const getUserBalance = async () => {
            window.balance = await window.account.getAccountBalance()
            setUserBalance(utils.format.formatNearAmount(window.balance.available));
        }
        const getAttributes = async () => {
            const card_attr = await window.contract.get_attributes();
            setAttrs(card_attr)
            setIsLoading(false)
        }
        const checkVipToken = async () => {
            const hasToken = await window.contract.check_token({
                token_type: "LionGold"
            });
            console.log('hasToken', hasToken);
            setHasVipToken(hasToken)
        }
        getUserBalance()
        getAttributes()
        checkVipToken()
    }, [])

    useEffect(() => {
        if (eatingTimes === 11) {
            // setFoodCount(foodCount - 1)
        }
    }, [eatingTimes])

    useInterval(() => {
        setEating(!eating)
        setEatingTimes(eatingTimes + 1)
    }, eatingTimes && eatingTimes <= 10 ? 600 : null)

    const setAttrs = (attrs) => {
        setFoodCount(attrs.food)
        if (exp === 40 && attrs.experience === 50) {
            alert('Aha! Your Lion has been upgraded to LVL 2! Congrats!')
        }
        setExp(attrs.experience)
    }

    const feedLion = async () => {
        setIsLoading(true)
        const card_attr = await window.contract.feed_lion();
        console.log('card_attr', card_attr);
        setEatingTimes(1)
        setAttrs(card_attr)
        setIsLoading(false)
    }

    const handleFoodInputChange = (e) => {
        setFoodInput(e.target.value)
    }

    const buyFood = async () => {
        setIsLoading(true)
        const contractFoodCount = await window.contract.buy_food(
            {
                token_id: window.accountId + "-lion-animal",
            },
            300000000000000, // attached GAS (optional)
            utils.format.parseNearAmount(foodInput || "1")
        );
        setIsLoading(false)
        setFoodCount(contractFoodCount)
    }

    const level = exp >= 50 ? 2 : 1

    return (
        <PageWrapper isLoading={isLoading}>
            <div className="game-page">
                <div className="character-panel">
                    <AnimalCharacter eating={eating} />
                    <div className="animal-info">
                        <h2>{`LVL: ${level}`}</h2>
                        <h2>Name: Lion</h2>
                        <h2>Type: Chordates</h2>
                        <h2>Class: Mammals</h2>
                        <h2>Order: Predatory</h2>
                        <h2>City: Kharkiv</h2>
                        <a href="https://zoo.kharkov.ua/zhivotnye-en/lev">Read More</a>
                    </div>
                </div>
                <div className="items-panel">
                    <Experience exp={exp} />
                    <div className="food-row">
                        <div className="food-count">{foodCount} X</div>
                        <Food eatingTimes={eatingTimes} />
                    </div>
                    <div className="character-buttons">
                        <div className="donation-row">
                            <label htmlFor="donation">Donation:</label>
                            <input
                                autoComplete="off"
                                onChange={handleFoodInputChange}
                                defaultValue={foodInput}
                                id="donation"
                                max={userBalance}
                                min="0"
                                step="1"
                                type="number"
                            />
                            <span title="NEAR Tokens">Ⓝ</span>
                        </div>
                        <button onClick={buyFood}>Buy food</button>
                        <button disabled={foodCount === 0} onClick={feedLion}>Feed Lion</button>
                    </div>
                </div>
            </div>
            <div className="instruction">
                <p>1. Buy food (you can select the count of food in donation) all money goes to Ukraine, Kharkiv's zoo</p>
                <p>2. Feed your lion, get the experience of NFT</p>
                <p>3. When you will up 50 experience you will be able to claim Top Supporter NFT</p>
                <p>4. Buy more food just to support Ukrainian zoos</p>
            </div>
            {exp >= 50 && !hasVipToken && <MintModal />}
        </PageWrapper>
    )
}

'''
'''--- src/pages/home/index.css ---

'''
'''--- src/pages/home/index.js ---
import 'regenerator-runtime/runtime'
import React, {useEffect, useState} from 'react'

import './index.css'
import Login from "../login";
import SelectAnimalPage from "../selectAnimalPage";
import {utils} from "near-api-js";
import Mint from "../mint";

export default function Home() {
    const [isLoading, setIsLoading] = useState(true)
    const [hasToken, setHasToken] = useState(true)

    useEffect(() => {

    }, [])

    if (isLoading) {
        return (
            <div>...Loading</div>
        )
    }

    return hasToken ? <SelectAnimalPage /> : <Mint />
}

'''
'''--- src/pages/login/index.css ---

'''
'''--- src/pages/login/index.js ---
import 'regenerator-runtime/runtime'
import React, {useEffect, useState} from 'react'

import './index.css'
import {login} from "../../utils/utils";
import {useNavigate} from "react-router-dom";
import Loading from "../../components/loading";

export default function Login() {
    const [isLoading, setIsLoading] = useState(false)
    const navigate = useNavigate()
    useEffect(() => {
        if (window.walletConnection.isSignedIn()) {
            checkToken()
        }
    }, [])

    const handleLogin = async () => {
        await login()
        await checkToken()
    }

    const checkToken = async () => {
        setIsLoading(true)
        const hasToken = await window.contract.check_token({
            token_type: "Lion"
        });
        setIsLoading(false)
        navigate(hasToken ? "/select-animal" : "/mint")
    }

    return (
        <main>
            <h1>Welcome to NFT Zoo!</h1>
            <p style={{textAlign: 'center'}}>
                This is a volunteer project the main goal is to help Ukrainian zoos with donations and allow getting some fun and NFT to helpers
            </p>
            <p style={{textAlign: 'center'}}>
                <button onClick={handleLogin}>Sign in</button>
            </p>
            <p>
                An application contains that parts:
            </p>
            <ol>
                <li>Mint NFT if you don't have one. This NFT will be your character(animal) that has a link to the real-life animal from Ukrainian Zoo</li>
                <li>Select your NFT that you want to help and upgrade</li>
                <li>Buy food and feed your animal(all money from food going to zoos) and upgrade animal level!</li>
                <li>By updating your level you will have some buns.</li>
                <li>Have fun and help Ukrainian zoos!</li>
            </ol>
            <p>
                Go ahead and click the button below to try it out:
            </p>
            {isLoading && <Loading />}
        </main>
    )
}

'''
'''--- src/pages/mint/index.css ---
.main {

}

.header {
    display: flex;
    justify-content: space-between;
    height: 60px;
}

.header-logo {
    height: 80%;
    width: 10%;
    margin-left: 15px;
    margin-top: 10px;
}

.mint-button {
    margin-top: 15px;
    display: flex;
    justify-content: center;
}

.header-profile-div {
    display: flex;
    align-items: center;
}
'''
'''--- src/pages/mint/index.js ---
import React, {useEffect, useState} from 'react'

import getConfig from '../../config'
import NFT from "../../components/NFT";
import './index.css'
import PageWrapper from "../../components/pageWrapper";
import {utils} from "near-api-js";

const {networkId} = getConfig(process.env.NODE_ENV || 'development')

export default function Mint() {
    const [isLoading, setIsLoading] = useState(false)
    // when the user has not yet interacted with the form, disable the button
    const [buttonDisabled, setButtonDisabled] = React.useState(true)
    const [userHasNFT, setUserHasNFT] = React.useState(false)

    // after submitting the form, we want to show Notification
    const [showNotification, setShowNotification] = React.useState(false)

    useEffect(() => {
        const receivedNFT = async () => {
            setIsLoading(true)
            const hasToken = await window.contract.check_token({
                token_type: "Lion"
            })
            setIsLoading(false)
            if (window.accountId !== "") {
                setUserHasNFT(
                    hasToken
                );
            }
        };
        receivedNFT();
    }, []);

    const mintNFT = async () => {
        await window.contract.nft_mint(
            {
                receiver_id: window.accountId,
            },
            300000000000000, // attached GAS (optional)
            utils.format.parseNearAmount("1")
        );
    };

    return (
        <PageWrapper isLoading={isLoading}>
            <main className="main">
                <NFT />
                <div className="mint-button">
                    <button disabled={userHasNFT} onClick={mintNFT}>Mint</button>
                </div>
            </main>
            {showNotification && <Notification />}
        </PageWrapper>
    )
}

// this component gets rendered by App after the form is submitted
function Notification() {
    const urlPrefix = `https://explorer.${networkId}.near.org/accounts`
    return (
        <aside>
            <a
                target="_blank"
                rel="noreferrer"
                href={`${urlPrefix}/${window.accountId}`}
            >
                {window.accountId}
            </a>
            {' '/* React trims whitespace around tags; insert literal space character when needed */}
            called method: 'set_greeting' in contract:
            {' '}
            <a
                target="_blank"
                rel="noreferrer"
                href={`${urlPrefix}/${window.contract.contractId}`}
            >
                {window.contract.contractId}
            </a>
            <footer>
                <div>✔ Succeeded</div>
                <div>Just now</div>
            </footer>
        </aside>
    )
}

'''
'''--- src/pages/selectAnimalPage/components/AnimalCard/index.css ---
.animal-card {
    position: relative;
    width: 315px;
}

.card-hover {
    display: none;
    position: absolute;
    left: 50%;
    top: 0;
    width: 100%;
    transform: translate(-50%, 0);
    height: 100%;
    background-color: #444444;
    opacity: 0.7;
    cursor: pointer;
    justify-content: center;
    align-items: center;
}

.animal-card:hover .card-hover {
    display: flex;
}
'''
'''--- src/pages/selectAnimalPage/components/AnimalCard/index.js ---
import React from 'react'
import './index.css'
import {useNavigate} from "react-router-dom";

export default function AnimalCard({ img, name }) {
    const navigate = useNavigate()
    const onClick = () => {
        navigate('/game/lion')

    }
    return (
        <div className="animal-card" onClick={onClick}>
            <img
                src={img}
                alt="animal image"
            />
            <div className="card-hover">
                {name}
            </div>
        </div>
    )
}

'''
'''--- src/pages/selectAnimalPage/index.css ---
.select-animal-page {
    padding: 15px;
}
'''
'''--- src/pages/selectAnimalPage/index.js ---
import React from 'react'
import './index.css'
import AnimalCard from "./components/AnimalCard";
import PageWrapper from "../../components/pageWrapper";

export default function SelectAnimalPage() {
    return (
        <PageWrapper>
            <div className="select-animal-page">
                <h2>Your animals:</h2>
                <AnimalCard img="https://ipfs.io/ipfs/bafkreihdfouh6pulmzmx4nlb653q5vmkwgbqegzf37vavf6lyubdtavyom" name="Lion" />
            </div>
        </PageWrapper>
    )
}

'''
'''--- src/utils/hooks.js ---
import React, { useEffect, useRef } from 'react';

export function useDidMount() {
    const mountRef = useRef(false);

    useEffect(() => { mountRef.current = true }, []);

    return () => mountRef.current;
}

export function useInterval(callback, delay) {
    const savedCallback = useRef();

    // Remember the latest callback.
    useEffect(() => {
        savedCallback.current = callback;
    }, [callback]);

    // Set up the interval.
    useEffect(() => {
        function tick() {
            savedCallback.current();
        }
        if (delay !== null) {
            let id = setInterval(tick, delay);
            return () => clearInterval(id);
        }
    }, [delay]);
}
'''
'''--- src/utils/utils.js ---
import { connect, Contract, keyStores, WalletConnection } from 'near-api-js'
import getConfig from "../config";

const nearConfig = getConfig(process.env.NODE_ENV || 'development')

// Initialize contract & set global variables
export async function initContract() {
  // Initialize connection to the NEAR testnet
  const near = await connect(Object.assign({ deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() } }, nearConfig))

  // Initializing Wallet based Account. It can work with NEAR testnet wallet that
  // is hosted at https://wallet.testnet.near.org
  window.walletConnection = new WalletConnection(near)

  // Getting the Account ID. If still unauthorized, it's just empty string
  window.accountId = window.walletConnection.getAccountId()
  window.account = window.walletConnection.account()

  // Initializing our contract APIs by contract name and configuration
  window.contract = await new Contract(window.walletConnection.account(), nearConfig.contractName, {
    // View methods are read only. They don't modify the state, but usually return some value.
    viewMethods: ['nft_tokens'],
    // Change methods can modify the state. But you don't receive the returned value when called.
    changeMethods: ['nft_mint', 'buy_food', 'check_token', 'get_attributes', 'feed_lion'],
  })
}

export function logout() {
  window.walletConnection.signOut()
}

export async function login() {
  // Allow the current app to make calls to the specified contract on the
  // user's behalf.
  // This works by creating a new access key for the user's account and storing
  // the private key in localStorage.
  await window.walletConnection.requestSignIn(nearConfig.contractName)
}

'''