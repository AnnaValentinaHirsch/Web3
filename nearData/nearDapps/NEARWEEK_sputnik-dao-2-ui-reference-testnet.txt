*GitHub Repository "NEARWEEK/sputnik-dao-2-ui-reference-testnet"*

'''--- .eslintrc.js ---
z; // eslint-disable-next-line no-undef
module.exports = {
  env: {
    node: true,
    browser: true,
    es2021: true
  },
  extends: ['eslint:recommended', 'plugin:react/recommended', 'plugin:prettier/recommended'],
  parserOptions: {
    ecmaFeatures: {
      jsx: true
    },
    ecmaVersion: 'latest',
    sourceType: 'module'
  },
  plugins: ['react'],
  rules: {}
};

'''
'''--- .github/ISSUE_TEMPLATE/BOUNTY.yml ---
name: "Simple Bounty"
description: "Use this template to create a HEROES Simple Bounty via Github bot"
title: "Bounty: "
labels: ["bounty"]
assignees: heroes-bot-test
body:
  - type: markdown
    attributes:
      value: |
        Hi! Let's set up your bounty! Please don't change the template - @heroes-bot-test won't be able to help you.

  - type: dropdown
    id: type
    attributes:
      label: What talent are you looking for?
      options:
        - Marketing
        - Development
        - Design
        - Other
        - Content
        - Research
        - Audit

  - type: textarea
    id: description
    attributes:
      label: What you need to be done?

  - type: dropdown
    id: tags
    attributes:
      label: Tags
      description: Add tags that match the topic of the work
      multiple: true
      options:
        - API
        - Blockchain
        - Community
        - CSS
        - DAO
        - dApp
        - DeFi
        - Design
        - Documentation
        - HTML
        - Javascript
        - NFT
        - React
        - Rust
        - Smart contract
        - Typescript
        - UI/UX
        - web3
        - Translation
        - Illustration
        - Branding
        - Copywriting
        - Blogging
        - Editing
        - Video Creation
        - Social Media
        - Graphic Design
        - Transcription
        - Product Design
        - Artificial Intelligence
        - Quality Assurance
        - Risk Assessment
        - Security Audit
        - Bug Bounty
        - Code Review
        - Blockchain Security
        - Smart Contract Testing
        - Penetration Testing
        - Vulnerability Assessment
        - BOS
        - News
        - Hackathon
        - NEARCON2023
        - NEARWEEK

  - type: input
    id: deadline
    attributes:
      label: Deadline
      description: "Set a deadline for your bounty. Please enter the date in format: DD.MM.YYYY"
      placeholder: "19.05.2027"

  - type: dropdown
    id: currencyType
    attributes:
      label: Currency
      description: What is the currency you want to pay?
      options:
        - USDC.e
        - USDT.e
        - DAI
        - wNEAR
        - USDt
        - XP
        - marmaj
        - NEKO
        - JUMP
        - USDC
        - NEARVIDIA
      default: 0
    validations:
      required: true

  - type: input
    id: currencyAmount
    attributes:
      label: Amount
      description: How much it will be cost?

  - type: markdown
    attributes:
      value: "## Advanced settings"

  - type: checkboxes
    id: kyc
    attributes:
      label: KYC
      description: "Use HEROES' KYC Verification, only applicants who passed HEROES' KYC can apply and work on this bounty!"
      options:
        - label: Use KYC Verification

  - type: markdown
    attributes:
      value: |
        ### This cannot be changed once the bounty is live!

'''
'''--- .vscode/settings.json ---
{
    "javascript.format.insertSpaceAfterOpeningAndBeforeClosingEmptyBraces": false,
    "javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": false
}
'''
'''--- README.md ---
# sputnik-dao-2-ui-reference

> UI for the Reference implementation [Sputnik-DAO-2 smart contract](https://github.com/near-daos/sputnik-dao-contract)

## Guide

### Setup

```
yarn install
```

### Develop

```
yarn start
```

'''
'''--- babel.config.js ---
module.exports = {
  presets: ['@babel/preset-env', '@babel/preset-react']
};

'''
'''--- package.json ---
{
  "name": "near-sputnik-dao-2",
  "version": "2.0.0",
  "license": "UNLICENSED",
  "scripts": {
    "build": "npm run build:web",
    "build:no-contract": "npm run build:web",
    "build:web": "parcel build src/index.html --public-url ./",
    "deploy:pages": "gh-pages -d dist/",
    "deploy:no-contract": "npm run build:no-contract && npm run deploy:pages",
    "deploy": "npm run build && npm run deploy:pages",
    "prestart": "npm run build",
    "start": "parcel src/index.html --open",
    "start:web": "parcel src/index.html --open",
    "dev": "parcel src/index.html --open",
    "test": "jest test --runInBand",
    "lint": "eslint .",
    "lint:fix": "eslint --fix --ext .js,.jsx .",
    "format": "prettier --write './**/*.{js,jsx,ts,tsx,css,md,json}' --config ./.prettierrc"
  },
  "devDependencies": {
    "@babel/core": "~7.12.3",
    "@babel/preset-env": "^7.12.11",
    "@babel/preset-react": "~7.12.5",
    "babel-jest": "~26.6.2",
    "env-cmd": "^10.1.0",
    "eslint": "^8.14.0",
    "eslint-config-prettier": "^8.5.0",
    "eslint-plugin-prettier": "^4.0.0",
    "eslint-plugin-react": "^7.29.4",
    "gh-pages": "^3.1.0",
    "jest": "~26.6.2",
    "jest-environment-node": "~26.6.2",
    "near-cli": "^1.5.2",
    "nodemon": "~2.0.3",
    "parcel-bundler": "^1.12.5",
    "prettier": "^2.6.2",
    "react-test-renderer": "~17.0.1",
    "shelljs": "~0.8.4"
  },
  "dependencies": {
    "decimal.js": "^10.2.1",
    "markdown-it": "^13.0.1",
    "mdbreact": "^5.0.0",
    "near-api-js": "^0.44.2",
    "node-fetch": "^2.6.1",
    "node-libs-browser": "^2.2.1",
    "react": "^17.0.2",
    "react-dom": "^17.0.2",
    "react-json-view": "^1.21.3",
    "react-markdown-editor-lite": "^1.3.4",
    "react-router": "^5.2.0",
    "react-router-dom": "^5.2.0",
    "react-transition-group": "^4.4.5",
    "regenerator-runtime": "^0.13.11",
    "stringify-object": "^3.3.0",
    "utils": "^0.3.1"
  },
  "jest": {
    "moduleNameMapper": {
      "\\.(jpg|ico|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$": "<rootDir>/src/__mocks__/fileMock.js",
      "\\.(css|less)$": "<rootDir>/src/__mocks__/fileMock.js"
    },
    "setupFiles": [
      "<rootDir>/src/jest.init.js"
    ],
    "testEnvironment": "near-cli/test_environment",
    "testPathIgnorePatterns": [
      "<rootDir>/contract/",
      "<rootDir>/node_modules/"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

'''
'''--- src/__mocks__/fileMock.js ---
// NOTE: This is used to mock resource imports in JSX for tests
module.exports = '';

'''
'''--- src/assets/logo-black.svg ---
<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#24272a"/><stop offset=".42" stop-color="#24272a" stop-opacity="0"/><stop offset=".59" stop-color="#24272a" stop-opacity="0"/><stop offset=".81" stop-color="#24272a"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#24272a"/></svg>
'''
'''--- src/assets/logo-white.svg ---
<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#fff"/><stop offset=".42" stop-color="#fff" stop-opacity="0"/><stop offset=".59" stop-color="#fff" stop-opacity="0"/><stop offset=".81" stop-color="#fff"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#fff"/></svg>
'''
'''--- src/assets/near-social.svg ---
<svg width="331" height="203" viewBox="0 0 331 203" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M107.137 185L18 101.5L107.137 18" stroke="#3D7FFF" stroke-width="35" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M224.924 18L313 101.5L224.924 185" stroke="#3D7FFF" stroke-width="35" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

'''
'''--- src/assets/roketo-logo.svg ---
<svg width="67" height="30" viewBox="0 0 67 30" fill="none" xmlns="http://www.w3.org/2000/svg">

<path fill-rule="evenodd" clip-rule="evenodd" d="M31.9006 21.056V28.686C31.9006 28.9413 32.1075 29.1482 32.3628 29.1482H39.8916C40.1469 29.1482 40.3538 28.9413 40.3538 28.686V21.0573C40.3538 20.8021 40.5607 20.5951 40.816 20.5951L50.414 20.5951C50.5732 20.5951 50.7212 20.6771 50.8057 20.812L55.9217 28.9803C56.0062 29.1153 56.1542 29.1972 56.3134 29.1972H65.6559C66.0237 29.1972 66.2441 28.7885 66.0421 28.4811L59.6127 18.6998C59.611 18.6972 59.6101 18.6942 59.6101 18.6911C59.6101 18.6824 59.6172 18.6754 59.6258 18.6753C62.6895 18.6502 65.5576 15.8285 65.5576 10.8041C65.5576 5.22492 60.626 2.14636 56.8988 2.14602L56.8967 2.14542V2.1292C56.8967 2.12597 56.8941 2.12335 56.8909 2.12335H40.3538H32.3628C32.1741 2.12335 32.0118 2.23645 31.94 2.39856C32.2715 5.29024 34.962 8.42875 40.8433 8.42875V8.42929L52.9059 8.42929C54.2272 8.42929 55.9753 9.52084 55.9753 11.4988C55.9753 13.2874 54.9491 14.2886 53.8579 14.2892L40.8433 14.2892V14.2939C34.4607 14.2939 31.836 17.9902 31.9061 21.056H31.9006Z" fill="white"/>
<path d="M21.5101 17.3905L19.8994 21.0082C19.7909 21.252 20.0307 21.5056 20.2802 21.4108L26.1631 19.1754C29.416 17.9393 33.6391 13.6757 33.6391 11.2727C33.6391 9.11231 29.4524 4.49554 26.2674 3.44713L18.0527 0.743106C17.7825 0.65415 17.5517 0.956061 17.7084 1.19352L19.3764 3.72098C19.5631 4.00376 19.3822 4.38359 19.045 4.41697L9.39413 5.37234C9.11667 5.3998 9.02333 5.75775 9.25203 5.91721L11.8795 7.74918C12.1408 7.93136 12.1354 8.31986 11.8692 8.49475L7.92317 11.087C7.71246 11.2254 7.46351 11.294 7.21164 11.283L0.803998 11.0033C0.487502 10.9894 0.368256 11.4118 0.645241 11.5655L7.74963 15.5091C8.01509 15.6565 8.32652 15.6978 8.62121 15.6247L11.7668 14.8448C12.1753 14.7435 12.607 14.8636 12.9046 15.1612L15.3 17.5566C15.6121 17.8687 16.0704 17.9844 16.4933 17.8577L20.7895 16.5713C21.2811 16.4241 21.7188 16.9217 21.5101 17.3905Z" fill="url(#paint0_linear)"/>
<defs>
<linearGradient id="paint0_linear" x1="1.49051" y1="12.0811" x2="30.068" y2="11.7543" gradientUnits="userSpaceOnUse">
<stop offset="1.58702e-05" stop-color="#E61A11"/>
<stop offset="0.554808" stop-color="#E9712E"/>
<stop offset="1" stop-color="#FFD231"/>
</linearGradient>
</defs>

</svg>
'''
'''--- src/components/dao/dao.css ---
.dao-card__header {
  align-items: center;
}

.dao-details__col {
  height: 100%;
}

.proposal-card {
  height: calc(100% - 40px);
}

.proposal-list {
  display: grid;
  grid-template-columns: 1fr 1fr;
  grid-gap: 32px;
  margin-top: 16px;
}

.proposal-item,
.proposal-item__container,
.proposal-item__card {
  height: 100%;
}

.proposal-item__body {
  display: flex !important;
  flex-direction: column !important;
}

.proposal-item__text {
  flex-grow: 1;
}

.proposal-item__text-description {
  word-break: break-all;
}

@media only screen and (max-width: 992px) {
  .proposal-card {
    height: 100%;
  }

  .proposal-card .card-body {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
  }

  .proposal-list {
    grid-template-columns: 1fr;
  }
}

'''
'''--- src/components/shared/dao-search.css ---
.dao-search .md-form {
  margin-top: 0;
  margin-bottom: 0;
}

.dao-search input {
  color: #fff !important;
}

.dao-search {
  margin-right: 24px;
  position: relative;
}

.dao-search-results {
  position: absolute;
  background-color: #5b6577;
  padding: 0;
  z-index: 5;
  border-radius: 4px;
  width: 100%;
  box-shadow: 0 2px 5px 0 rgb(0 0 0 / 16%), 0 2px 10px 0 rgb(0 0 0 / 12%);
}

.dao-search-results-list {
  list-style: none;
  padding-left: 0;
}

.dao-search-results-list li {
  list-style: none;
  padding-left: 0;
}

.dao-search-results-list a {
  color: #fff;
  padding: 8px 16px;
  display: block;
  border-radius: 4px;
}

.dao-search-results-list a:hover {
  color: #f8e6ae;
  background-color: #656f81;
}

.dao-search-message {
  color: #fff;
  padding: 8px 16px;
  display: block;
}

'''
'''--- src/config.js ---
const CONTRACT_NAME = 'sputnikv2.testnet';

function getConfig(env) {
  switch (env) {
    case 'production':
    case 'mainnet':
      return {
        networkId: 'mainnet',
        nodeUrl: 'https://rpc.mainnet.near.org',
        contractName: 'sputnik-dao.near',
        walletUrl: 'https://wallet.near.org',
        helperUrl: 'https://helper.mainnet.near.org',
        explorerUrl: 'https://explorer.mainnet.near.org',
        pk: '2gtDEwdLuUBawzFLAnCS9gUso3Ph76bRzMpVrtb66f3J',
        tokenFactory: 'tkn.near',
        roketoContractAddress: 'roketodapp.near',
        nearSocialContractName: 'social.near'
      };
    case 'development':
    case 'testnet':
      return {
        networkId: 'testnet',
        nodeUrl: 'https://rpc.testnet.near.org',
        contractName: CONTRACT_NAME,
        walletUrl: 'https://wallet.testnet.near.org',
        helperUrl: 'https://helper.testnet.near.org',
        explorerUrl: 'https://explorer.testnet.near.org',
        pk: 'G8JpvUhKqfr89puEKgbBqUxQzCMfJfPSRvKw4EJoiZpZ',
        tokenFactory: 'tokenfactory.testnet',
        roketoContractAddress: 'dev-1635510732093-17387698050424',
        nearSocialContractName: 'v1.social08.testnet'
      };
    case 'betanet':
      return {
        networkId: 'betanet',
        nodeUrl: 'https://rpc.betanet.near.org',
        contractName: CONTRACT_NAME,
        walletUrl: 'https://wallet.betanet.near.org',
        helperUrl: 'https://helper.betanet.near.org',
        explorerUrl: 'https://explorer.betanet.near.org',
        pk: 'G8JpvUhKqfr89puEKgbBqUxQzCMfJfPSRvKw4EJoiZpZ',
        tokenFactory: 'tokenfactory.testnet',
        roketoContractAddress: 'dev-1635510732093-17387698050424',
        nearSocialContractName: 'v1.social08.testnet'
      };
    case 'local':
      return {
        networkId: 'local',
        nodeUrl: 'http://localhost:3030',
        keyPath: `${process.env.HOME}/.near/validator_key.json`,
        walletUrl: 'http://localhost:4000/wallet',
        contractName: CONTRACT_NAME,
        pk: null
      };
    case 'test':
    case 'ci':
      return {
        networkId: 'shared-test',
        nodeUrl: 'https://rpc.ci-testnet.near.org',
        contractName: CONTRACT_NAME,
        masterAccount: 'test.near'
      };
    case 'ci-betanet':
      return {
        networkId: 'shared-test-staging',
        nodeUrl: 'https://rpc.ci-betanet.near.org',
        contractName: CONTRACT_NAME,
        masterAccount: 'test.near'
      };
    default:
      throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`);
  }
}

module.exports = getConfig;

'''
'''--- src/constants/index.js ---
// ACTION TYPES
export const DAOS_LIST_START = 'DAOS_LIST_START';
export const DAOS_LIST_SUCCESS = 'DAOS_LIST_SUCCESS';
export const DAOS_LIST_FAILURE = 'DAOS_LIST_FAILURE';
export const DAOS_LIST_RESET = 'DAOS_LIST_RESET';
export const DAOS_LIST_FILTER = 'DAOS_LIST_FILTER';

// STATUS TYPES
export const DAOS_LIST_STATUS_PENDING = 'DAOS_LIST_STATUS_PENDING';
export const DAOS_LIST_STATUS_RESOLVED = 'DAOS_LIST_STATUS_RESOLVED';
export const DAOS_LIST_STATUS_REJECTED = 'DAOS_LIST_STATUS_REJECTED';

'''
'''--- src/contexts/DaosContext.js ---
import React, { createContext, useReducer } from 'react';

const DaosContext = createContext();

export default DaosContext;

'''
'''--- src/global.css ---
.modal-content {
  /*background: rgb(213, 211, 211) !important;*/
}

.modal-header .close {
  color: white;
}

.capitalize {
  text-transform: capitalize;
}

'''
'''--- src/hooks/useChangeDao.js ---
const useChangeDao = ({ mutationCtx, routerCtx }) => {
  const handleDaoChange = () => {
    mutationCtx.updateConfig({
      contract: ''
    });
    routerCtx.history.push('/');
  };

  return handleDaoChange;
};

export default useChangeDao;

'''
'''--- src/hooks/useDaoCount.js ---
import { useEffect, useState } from 'react';
import { useGlobalMutation } from '../utils/container';

export const useDaoCount = (props) => {
  const { setShowLoading } = props;
  const mutationCtx = useGlobalMutation();
  const [daoCount, setDaoCount] = useState(0);

  useEffect(() => {
    (async () => {
      try {
        const count = await window.factoryContract.get_number_daos();
        if (count) {
          setDaoCount(count);
          setShowLoading(false);
        }
      } catch (e) {
        setShowLoading(false);
        mutationCtx.toastError(e);
      }
    })();

    return setDaoCount(0);
  }, []);

  return { daoCount };
};

'''
'''--- src/hooks/useDaoList.js ---
import { useEffect, useState } from "react";
import { useGlobalMutation } from "../utils/container";

export const useDaoList = (props) => {
  const { setShowLoading } = props;
  const mutationCtx = useGlobalMutation();
  const [daoList, setDaoList] = useState();
  useEffect(() => {
    (async () => {
      try {
        const daos = await window.factoryContract.get_daos({
          from_index: Math.floor(props.fromIndex * props.limit),
          limit: props.limit,
        });
        if (daos) {
          setDaoList(daos);
          setShowLoading(false);
        }
      } catch (e) {
        setShowLoading(false);
        mutationCtx.toastError(e);
      }
    })();

    return setDaoList([]);
  }, [props?.fromIndex, props?.limit]);

  return { daoList };
};

'''
'''--- src/hooks/useDaoSearchFilters.js ---
import { useContext, useEffect } from 'react';
import DaosContext from '../contexts/DaosContext';
import {
  DAOS_LIST_START,
  DAOS_LIST_SUCCESS,
  DAOS_LIST_FAILURE,
  DAOS_LIST_FILTER,
  DAOS_LIST_RESET
} from '../constants/index';

const loadAllDaos = async () => {
  const daos = await window.factoryContract.get_dao_list();
  return daos;
};

const useDaoSearchFilters = () => {
  const context = useContext(DaosContext);

  if (context === undefined) {
    throw new Error(`useDaoSearchFilters must be used within a DaosContextProvider`);
  }

  const [{ status, error, daosFiltered, daos }, dispatch] = context;

  useEffect(() => {
    if (daos.length === 0) {
      dispatch({ type: DAOS_LIST_START });
      loadAllDaos()
        .then((daos) => {
          dispatch({ type: DAOS_LIST_SUCCESS, daos: daos });
        })
        .catch((error) => {
          dispatch({ type: DAOS_LIST_FAILURE, error: error });
        });
    }
  }, [dispatch, daos]);

  const filterDaosByName = (name) => {
    if (name === '') {
      return dispatch({ type: DAOS_LIST_RESET });
    }

    dispatch({ type: DAOS_LIST_FILTER, filter: name });
  };

  return { daosFiltered, status, error, filterDaosByName };
};

export default useDaoSearchFilters;

'''
'''--- src/hooks/useNumberProposals.js ---
import { useEffect, useState } from 'react';
import { useGlobalMutation } from '../utils/container';

export const useNumberProposals = (props) => {
  const { setShowLoading } = props;
  const mutationCtx = useGlobalMutation();
  const [numberProposals, setNumberProposals] = useState(0);

  const getLastProposalId = async () => {
    return window.contract ? await window.contract.get_last_proposal_id() : 0;
  };

  useEffect(() => {
    (async () => {
      try {
        const proposalId = await getLastProposalId();
        setNumberProposals(proposalId);
        setShowLoading(false);
      } catch (e) {
        setShowLoading(false);
        mutationCtx.toastError(e);
      }
    })();

    return () => {
      setNumberProposals(0);
    };
  }, []);

  return { numberProposals };
};

'''
'''--- src/hooks/useOuterClick.js ---
import { useRef, useEffect } from 'react';

const useOuterClick = (callback) => {
  const callbackRef = useRef(); // initialize mutable ref, which stores callback
  const innerRef = useRef(); // returned to client, who marks "border" element

  // update cb on each render, so second useEffect has access to current value
  useEffect(() => {
    callbackRef.current = callback;
  });

  useEffect(() => {
    document.addEventListener('click', handleClick);
    return () => document.removeEventListener('click', handleClick);
    function handleClick(e) {
      if (innerRef.current && callbackRef.current && !innerRef.current.contains(e.target))
        callbackRef.current(e);
    }
  }, []); // no dependencies -> stable click listener

  return innerRef; // convenience for client (doesn't need to init ref himself)
};

export default useOuterClick;

'''
'''--- src/hooks/usePagination.js ---
import React, { useMemo } from 'react';

export const DOTS = '...';

const range = (start, end) => {
  let length = end - start + 1;
  return Array.from({ length }, (_, idx) => idx + start);
};

export const usePagination = ({ totalCount, pageSize, siblingCount = 1, currentPage }) => {
  const paginationRange = useMemo(() => {
    const totalPageCount = Math.ceil(totalCount / pageSize);
    const totalPageNumbers = siblingCount + 5;

    if (totalPageNumbers >= totalPageCount) {
      return range(1, totalPageCount);
    }

    const leftSiblingIndex = Math.max(currentPage - siblingCount, 1);
    const rightSiblingIndex = Math.min(currentPage + siblingCount, totalPageCount);

    const shouldShowLeftDots = leftSiblingIndex > 2;
    const shouldShowRightDots = rightSiblingIndex < totalPageCount - 2;

    const firstPageIndex = 1;
    const lastPageIndex = totalPageCount;

    if (!shouldShowLeftDots && shouldShowRightDots) {
      let leftItemCount = 3 + 2 * siblingCount;
      let leftRange = range(1, leftItemCount);

      return [...leftRange, DOTS, totalPageCount];
    }

    if (shouldShowLeftDots && !shouldShowRightDots) {
      let rightItemCount = 3 + 2 * siblingCount;
      let rightRange = range(totalPageCount - rightItemCount + 1, totalPageCount);
      return [firstPageIndex, DOTS, ...rightRange];
    }

    if (shouldShowLeftDots && shouldShowRightDots) {
      let middleRange = range(leftSiblingIndex, rightSiblingIndex);
      return [firstPageIndex, DOTS, ...middleRange, DOTS, lastPageIndex];
    }
  }, [totalCount, pageSize, siblingCount, currentPage]);

  return paginationRange;
};

'''
'''--- src/hooks/useQuery.js ---
import { useMemo } from 'react';
import { useLocation } from 'react-router-dom';

const useQuery = () => {
  const { search } = useLocation();

  return useMemo(() => new URLSearchParams(search), [search]);
};

export default useQuery;

'''
'''--- src/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="./assets/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="apple-touch-icon" href="./assets/favicon.ico" />
    <title>SputnikDAO 2</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <script src="./index.js"></script>
  </body>
</html>

'''
'''--- src/index.js ---
import React from 'react';
import ReactDOM from 'react-dom';
import App from './App';
import { initContract } from './utils/utils';
import { ContainerProvider } from './utils/container';
import DaosContextProvider from './components/shared/DaosContextProvider';

import 'bootstrap-css-only/css/bootstrap.min.css';
import 'mdbreact/dist/css/mdb.css';
import '@fortawesome/fontawesome-free/css/all.min.css';
import './global.css';

window.nearInitPromise = initContract()
  .then(() => {
    ReactDOM.render(
      <ContainerProvider>
        <DaosContextProvider>
          <App />
        </DaosContextProvider>
      </ContainerProvider>,
      document.querySelector('#root')
    );
  })
  .catch(console.error);

'''
'''--- src/jest.init.js ---
import 'regenerator-runtime/runtime';

'''
'''--- src/main.test.js ---
beforeAll(async function () {
  // NOTE: nearlib and nearConfig are made available by near-cli/test_environment
  const near = await nearlib.connect(nearConfig);
  window.accountId = nearConfig.contractName;
  window.contract = await near.loadContract(nearConfig.contractName, {
    viewMethods: ['get_greeting'],
    changeMethods: [],
    sender: window.accountId
  });

  window.walletConnection = {
    requestSignIn() {},
    signOut() {},
    isSignedIn() {
      return true;
    },
    getAccountId() {
      return window.accountId;
    }
  };
});

test('get_greeting', async () => {
  const message = await window.contract.get_greeting({ account_id: window.accountId });
  expect(message).toEqual('Hello');
});

'''
'''--- src/utils/Loading.js ---
import React, { useEffect, useState } from 'react';
import { MDBCol, MDBContainer, MDBModal, MDBModalBody, MDBRow } from 'mdbreact';

const Loading = () => {
  const [show, setShow] = useState(false);

  useEffect(() => {
    const timer = setTimeout(() => {
      setShow(true);
    }, 500);
    return () => clearTimeout(timer);
  }, []);

  return (
    <>
      {show ? (
        <MDBContainer fluid>
          <MDBRow>
            <MDBCol size="10" sm="8" lg="6">
              <MDBModal isOpen={true} toggle={() => {}} position="top">
                <MDBModalBody className="text-center">
                  Loading from the chain, please wait...
                </MDBModalBody>
              </MDBModal>
            </MDBCol>
          </MDBRow>
        </MDBContainer>
      ) : null}
    </>
  );
};

export default Loading;

'''
'''--- src/utils/funcs.js ---
export const yoktoNear = 1000000000000000000000000;
export const proposalsReload = 60000;
export const updatesJsonUrl =
  'https://raw.githubusercontent.com/zavodil/sputnik-dao-updates/master/updates.json?t=';

export const timestampToReadable = (timestamp) => {
  let seconds = Number(timestamp / 1e9);
  let d = Math.floor(seconds / (3600 * 24));
  let h = Math.floor((seconds % (3600 * 24)) / 3600);
  let m = Math.floor((seconds % 3600) / 60);
  let s = Math.floor(seconds % 60);

  let dDisplay = d > 0 ? d + (d === 1 ? ' day, ' : ' days, ') : '';
  let hDisplay = h > 0 ? h + (h === 1 ? ' hour, ' : ' hours, ') : '';
  let mDisplay = m > 0 ? m + (m === 1 ? ' minute, ' : ' minutes, ') : '';
  let sDisplay = s > 0 ? s + (s === 1 ? ' second' : ' seconds') : '';
  return (dDisplay + hDisplay + mDisplay + sDisplay).replace(/,\s*$/, '');
};

export const convertDuration = (duration) => {
  let utcSeconds = duration / 1e9;
  let epoch = new Date(0);
  epoch.setUTCSeconds(utcSeconds);
  return epoch;
};

export const parseForumUrl = (url) => {
  //let afterSlashChars = id.match(/\/([^\/]+)\/?$/)[1];
  let a = url.replace(/\/$/, '').split('/');
  let last = a[a.length - 1];
  let secondLast = a[a.length - 2];
  let category = null;
  let subCategory = null;
  if (/^\d+$/.test(secondLast)) {
    category = secondLast;
    subCategory = last;
  } else {
    if (/^\d+$/.test(last)) {
      category = last;
    }
  }

  if (category === null) {
    return url;
  } else {
    return subCategory === null ? '/t/' + category : '/t/' + category + '/' + subCategory;
  }
};

'''
'''--- src/utils/store.js ---
import getConfig from '../config';

const readDefaultState = () => {
  try {
    return JSON.parse(window.localStorage.getItem('sputnik_v2_storage'));
  } catch (err) {
    return {};
  }
};

const defaultState = {
  loading: false,
  config: {
    factory: getConfig(process.env.NODE_ENV || 'development').contractName,
    contract: '',
    network: getConfig(process.env.NODE_ENV || 'development'),
    filter: {
      switchAll: true,
      switchInProgress: false,
      switchDone: false,
      switchNew: false,
      switchExpired: false
    },
    lastShownProposal: 0,
    lastJsonData: 0,
    ...readDefaultState()
  }
};

const reducer = (state, action) => {
  switch (action.type) {
    case 'config': {
      return { ...state, config: action.payload };
    }
    case 'loading': {
      return { ...state, loading: action.payload };
    }
    default:
      throw new Error('mutation type not defined');
  }
};

export { reducer, defaultState };

'''
'''--- src/utils/utils.js ---
import 'regenerator-runtime/runtime';
import { connect, Contract, keyStores, WalletConnection } from 'near-api-js';
import { useGlobalState, useGlobalMutation } from './container';
import getConfig from '../config';
import * as nearApi from 'near-api-js';
import Decimal from 'decimal.js';
import { yoktoNear } from './funcs';

export const nearConfig = getConfig(process.env.NODE_ENV || 'development');

export async function initContract() {
  const near = await connect(
    Object.assign({ deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() } }, nearConfig)
  );
  window.walletConnection = new WalletConnection(near);
  window.accountId = window.walletConnection.getAccountId();
  window.factoryContract = await new Contract(
    window.walletConnection.account(),
    nearConfig.contractName,
    {
      viewMethods: ['get_dao_list', 'get_number_daos', 'get_daos'],
      changeMethods: ['create']
    }
  );
}

export function logout() {
  window.walletConnection.signOut();
  window.location.replace(window.location.origin + window.location.pathname);
}

export function login({ redirectToCreateDao } = { redirectToCreateDao: false }) {
  const successUrl = redirectToCreateDao
    ? window.location.origin + '/?createdao=true'
    : window.location.origin + window.location.pathname;

  const signInConfig = {
    contractId: nearConfig.contractName,
    successUrl
  };

  window.walletConnection.requestSignIn(signInConfig);
}

export const provider = new nearApi.providers.JsonRpcProvider(nearConfig.nodeUrl);
export const connection = new nearApi.Connection(nearConfig.nodeUrl, provider, {});

export async function accountExists(accountId) {
  try {
    await new nearApi.Account(connection, accountId).state();
    return true;
  } catch (error) {
    console.log(error);
    return false;
  }
}

export async function getDaoState(dao) {
  try {
    const state = await new nearApi.Account(connection, dao).state();
    const amountYokto = new Decimal(state.amount);
    return amountYokto.div(yoktoNear).toFixed(2);
  } catch (error) {
    console.log(error);
    return 0;
  }
}

'''
'''--- src/wallet/login/index.html ---
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/css/bootstrap.min.css" integrity="sha384-GJzZqFGwb1QTTN6wy59ffF1BuGJpLSa9DkKMp0DgiMDm4iYMj70gZWKYbI706tWS" crossorigin="anonymous">
</head>
<body style="background: #fff; margin-top: 3em">
  <div>For local account login, Please run the following command in NEAR CLI, then enter account id here.
  </div>
  <div>
      <code id="shell-command"></code>
  </div>
  <input type="text" id="accountId" name="accountId" placeholder="Account id"></input>
  <button type="button" onClick="done()">done</button>
  <script>
    const currentUrl = new URL(window.location.href);
    const message = `NODE_ENV=local near create_account {newAccountId} --masterAccount {masterAccountId} --publicKey ${currentUrl.searchParams.get('public_key')} --initialAmount 10000000000000000000`;
    document.getElementById('shell-command').innerText = message;

    function done() {
      const successUrl = new URL(currentUrl.searchParams.get('success_url'));
      successUrl.searchParams.set('account_id', document.getElementById('accountId').value);
      successUrl.searchParams.set('public_key', currentUrl.searchParams.get('public_key'));
      window.location.assign(successUrl.toString());
    }
  </script>
</body>
</html>
'''