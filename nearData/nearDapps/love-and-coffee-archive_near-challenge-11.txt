*GitHub Repository "love-and-coffee-archive/near-challenge-11"*

'''--- .eslintrc.yml ---
env:
  es2021: true
  node: true
extends:
  - 'eslint:recommended'
  - 'plugin:@typescript-eslint/recommended'
parser: '@typescript-eslint/parser'
parserOptions:
  ecmaVersion: 12
  sourceType: module
plugins:
  - '@typescript-eslint'
rules: {}

'''
'''--- .travis.yml ---
language: node_js
node_js:
  - 12
os:
  - linux
  - osx
  - windows
env:
  - NODE_ENV=ci YARN_GPG=no
  - NODE_ENV=ci-betanet YARN_GPG=no
cache: yarn
script:
  - yarn lint && yarn test

'''
'''--- DETAILS.md ---
This is a full list of commands available.

Deployed here - https://explorer.testnet.near.org/transactions/EWHPpRBy7vRpzts73HvMsVdq6kvhJ1dWiHAoNaBuZoK6

# Add Candidate

Command

```
near call near-challenge-7.testnet addCandidate '{ "name": "Trump" }' --accountId martint.testnet --gas 300000000000000
```

Result

```
{
  success: true,
  messages: [ 'Trump successfully added to candidate list!' ]
}
```

# View Candidates

Command

```
near view near-challenge-7.testnet viewCandidates
```

Result

```
[
  {
    key: 0,
    value: { avatar: '72724247', voteCount: 0, alive: true, name: 'Trump' }
  },
  {
    key: 1,
    value: { avatar: '72724254', voteCount: 0, alive: true, name: 'Putin' }
  },
  {
    key: 2,
    value: { avatar: '72724267', voteCount: 0, alive: true, name: 'Cat from NEAR' }
  },
  {
    key: 3,
    value: { avatar: '72724285', voteCount: 0, alive: false, name: 'Nobody' }
  },
  {
    key: 4,
    value: { avatar: '72724317', voteCount: 3998, alive: true, name: 'Trump' }
  },
  {
    key: 5,
    value: { avatar: '72724326', voteCount: 2687, alive: true, name: 'Trump Junior' }
  },
  {
    key: 6,
    value: { avatar: '72724344', voteCount: 1, alive: true, name: 'Somebody' }
  }
]
```

# Vote

Command

```
near call near-challenge-7.testnet vote '{ "candidateId": "2" }' --accountId martint.testnet --gas 300000000000000
```

Result

```
{
  success: true,
  messages: [ 'Successfully voted for Cat from NEAR!' ]
}

or

{
  success: false,
  messages: [ 'You have already voted!' ]
}
```

# View Votes

Command

```
near view near-challenge-7.testnet viewVotes
```

Result

```
[
  { key: 'martint.testnet', value: { candidateId: 2 } },
  { key: 'spiritdungeons.testnet', value: { candidateId: 4 } }
]
```

# Remove Candidate

Command

```
near call near-challenge-7.testnet removeCandidate '{ "candidateId": "3" }' --accountId martint.testnet --gas 300000000000000
```

Result

```
{
  success: true,
  messages: [ 'Trump removed from election!' ]
}

or if candidate doesn't exist

{
  success: true,
  messages: [ "Candidate doesn't exist! I guess that's something you wanted in the first place!" ]
}
```

# Remove Your Vote

Removes a vote you previously casted

Command

```
near call near-challenge-7.testnet removeVote --accountId martint.testnet --gas 300000000000000
```

Result

```
{
  success: true,
  messages: [ 'Your vote for Cat from NEAR has been removed!' ]
}

or if you didn't vote

{
  success: true,
  messages: [ "Dodged a bullet there! You didn't vote for a candidate before!" ]
}
```

# Add Candidate - Trump Mode

It adds a candidate and gives them random amount of votes

Command

```
near call near-challenge-7.testnet addCandidateTrumpMode '{ "name": "Trump Junior" }' --accountId martint.testnet --gas 300000000000000
```

Result

```
{
  success: true,
  messages: [
    'Trump Junior successfully added to candidate list!',
    '...',
    'Crowd roars! Trump Junior gets 2687 votes!'
  ]
}
```

# Add Candidate - Hitler Mode

Adds and "kills" candidate

Command

```
near call near-challenge-7.testnet addCandidateHitlerMode '{ "name": "Hitler" }' --accountId martint.testnet --gas 300000000000000
```

Result

```
{
  success: true,
  messages: [
    'Hitler has joined the party!',
    '...',
    'Hitler has left the party!',
    '...',
    'Wait! Why is he not moving???'
  ]
}
```

# Ask Cat to Revive Candidate

If Cat is in the mood (50%) then he will revive a dead candidate

Command

```
near call near-challenge-7.testnet askCatToReviveCandidate '{ "candidateId": "5" }' --accountId martint.testnet --gas 300000000000000
```

Result

```
{
  success: true,
  messages: [
    "I'm a merciful god and your wish has been granted!",
    'Trump Junior lives again!'
  ]
}

or if he's not in mood

{
  success: false,
  messages: [
    "Not in a mood now!",
	'Try again later ;)',
  ]
}

or if candidate is already alive

{
  success: false,
  messages: [
    "Eh? He's already alive! What are you doing with your life?",
  ]
}

or if candidate never existed

{
  success: false,
  messages: [
    "Are you kidding me? Candidate has not been alive yet!",
  ]
}

```

# Vote - 360 No Scope Mode

Votes for a random candidate - dead or alive

Command

```
near call near-challenge-7.testnet vote360NoScopeMode --accountId spiritdungeons.testnet --gas 300000000000000
```

Result

```
{
  success: true,
  messages: [
    'You jump the system and your previous vote (Trump) has been removed!',
    'You spin!',
    'You vote!',
    '...',
    'Vote lands on Cat from NEAR'
  ]
}
```

# Get Leading Candidate

Gets candidate with the highest amount of votes

Command

```
near view near-challenge-7.testnet getLeadingCandidate
```

Result

```
{
  success: true,
  messages: [ 'Trump is currently in 1st place with 60.0% (3998.0) votes!' ]
}
```

# Start New Election

Clears all candidates and votes (keeps logs)

Command

```
near call near-challenge-7.testnet startNewElection --accountId martint.testnet --gas 300000000000000
```

Result

```
{
  success: true,
  messages: [
    'Trump won the election with 60.0% (3998) votes!',
    '...',
    'Starting a new election!'
  ]
}
```

# View Logs

System stores all actions users make and you can view them all using this command

Command

```
near view near-challenge-7.testnet viewLogs
```

Result

```
[
  {
    key: 0,
    value: { user: 'martint.testnet', action: 'Added candidate Trump' }
  },
  {
    key: 1,
    value: { user: 'martint.testnet', action: 'Added candidate Putin' }
  },
  {
    key: 2,
    value: {
      user: 'spiritdungeons.testnet',
      action: 'Added candidate Cat from NEAR'
    }
  },
  {
    key: 3,
    value: { user: 'spiritdungeons.testnet', action: 'Voted for Cat from NEAR' }
  },
  {
    key: 4,
    value: { user: 'spiritdungeons.testnet', action: 'Added candidate Nobody' }
  },
  {
    key: 5,
    value: { user: 'spiritdungeons.testnet', action: 'Removed candidate Nobody' }
  },
  {
    key: 6,
    value: {
      user: 'spiritdungeons.testnet',
      action: 'Removed his vote for Cat from NEAR'
    }
  },
  {
    key: 7,
    value: {
      user: 'martint.testnet',
      action: 'Added candidate Trump in Trump mode with 3998.0 votes'
    }
  },
  {
    key: 8,
    value: {
      user: 'martint.testnet',
      action: 'Added candidate Trump Junior in Trump mode with 2687.0 votes'
    }
  },
  {
    key: 9,
    value: {
      user: 'martint.testnet',
      action: 'Tried adding candidate Hitler in Hitler mode'
    }
  },
  {
    key: 10,
    value: { user: 'martint.testnet', action: 'Added candidate Somebody' }
  },
  {
    key: 11,
    value: {
      user: 'martint.testnet',
      action: 'Removed candidate Trump Junior'
    }
  },
  {
    key: 12,
    value: { user: 'martint.testnet', action: 'Made Cat revive Trump Junior' }
  },
  {
    key: 13,
    value: {
      user: 'spiritdungeons.testnet',
      action: 'Made a 360 No Scope vote for Trump'
    }
  },
  {
    key: 14,
    value: {
      user: 'spiritdungeons.testnet',
      action: 'Made a 360 No Scope vote for Somebody'
    }
  },
  {
    key: 15,
    value: { user: 'martint.testnet', action: 'Started new election!' }
  }
]
```

# Run through scenarious quickly

There are more variations of responses than what I provided in examples and you can run through many scenarious using these commands quickly - https://github.com/MartinTale/near-challenge-7/blob/main/commands.sh

'''
'''--- README.md ---
# Tic Tac Toe 
## Step by Step Guide on building a game on NEAR blockchain

This step-by-step guide will go through making Tic Tac Toe game on NEAR blockchain with a web interface!

You can try it out right now - https://martintale.github.io/near-challenge-11/

# Features

-   Playable Game
-   Storing, updating, and viewing game state from NEAR blockchain
-   Web <-> NEAR blockchain interactions

# Setup

1. Follow NEAR Hackaton guide to setup development environment - https://docs.near.org/docs/develop/basics/hackathon-startup-guide
2. Clone or download this repository
3. Update `CONTRACT_NAME` in `src\config.js` with your NEAR account
4. Install dependencies with the command below

```
yarn install
```

# Run your local version

Call method below
```
yarn dev
```
and open http://localhost:1234/ in your browser. You should see the whole game running on NEAR testnet with fronted being served from your local dev environment.

# Smart Contract

Essentially, this is a program (in our case - game server) that runs on blockchain. We will go through Tic Tac Toe contract step by step after which you should be able to make your own modifications and deploy your improved version of Tic Tac Toe or make a whole new game.

# Lets Dig In!

Open up `assembly\main.ts` file right at the beginning I set up few data structures required by our Voting System.

## Board class
We will use this class to create a new board for every player and store it on the NEAR blockchain.

```
@nearBindgen
class Board {
    cells: string[] = ['', '', '', '', '', '', '', '', ''];

    currentTurnMark: string = 'X';

    winner: string = '';
```

First-line `@nearBindgen` is special as it allows NEAR to serialize our Board objects to be serialized on the blockchain.

After that, we define a few properties (`cells`, `currentTurnMark`, `winner`) our game will use to manage the Board state.

In addition, we define several methods on our Board that will help manage its state. Let's go over them one by one.

### isFull

Checks if the board has been filled.

```
isFull(): boolean {
    for (let i = 0; i < this.cells.length; i += 1) {
        if (this.cells[i] == '') {
            return false;
        }
    }

    return true;
}
```

### cellIsMarked

Checks if a cell in the board has been marked by Player

```
cellIsMarked(x: number, y: number): boolean {
    const cellIndex = this.getCellIndex(x, y);

    if (this.cells[cellIndex] == '') {
        return false;
    }

    return true;
}
```

### getCellIndex

As we're using a one-dimensional array to store our Board cell data we need to convert x/y coordinates into cell index that we can use to access the correct cell.

```
getCellIndex(x: number, y: number): i32 {
    return i32(x + y * 3);
}
```

### markCell

When marking a cell we check who's turn it is to add the correct mark to the cell

```
markCell(x: number, y: number): void {
    const cellIndex = this.getCellIndex(x, y);

    this.cells[cellIndex] = this.currentTurnMark;

    if (this.currentTurnMark == 'X') {
        this.currentTurnMark = 'O';
    } else {
        this.currentTurnMark = 'X';
    }
}
```

### getWinner

Checks the board to see if a win condition has been reached. If yes, then it returns the Player mark that won, otherwise, it returns a TIE.

## CallResponse class

When creating backend systems you always want to have a robust and consistent way you can get data back to be manipulated or displayed on the frontend so we define this basic structure to be used in all our call functions.

```
@nearBindgen
class CallResponse {
    constructor(
        public success: boolean,
        public message: string,
    ) {

    }
}
```

`success` property indicates if the request was successful to know how and which response to display to the user in a user-friendly way.
`message` in our case explain what went wrong with our request to end-user or communicate other information :)

## Data Storage

For the system to work and not just forget what it knows after each command is executed we need to preserve that data somewhere. We store our boards for all Players in `PersistentUnorderedMap`. You can read more about and other storage options here - https://docs.near.org/docs/concepts/data-storage#persistentunorderedmap

```
const boards = new PersistentUnorderedMap<string, Board>("m");
```

An important thing to keep in mind in case you want to store multiple persistent objects is to specify a different name (`
m`, `n`, `b`) for each one of them. Otherwise, they all will point to the same data causing unexpected results.

## Helpers

To keep the rest of the code cleaner it's often useful to create some helper functions that handle repeated tasks for you.

These kinds of functions are very useful in a case where at some point you want to change how they work then you only have to do it in one place instead of digging through the whole code.

### Responses

Another common function I tend to use is `response` which makes it easy to return your function call responses in a predictable and consistent way.

```
function response(messages: string[], success: boolean): CallResponse {
    return new CallResponse(success, messages)
}
```

### Creating and Retrieving Player Board

Game-related functions that will help us create new or retrieve existing Player boards.

This helper creates and stores a fresh Player board in persistent storage for a user with `accountId`.
```
function createPlayerBoard(accountId: string): Board {
    const newPlayerBoard = new Board();
    boards.set(accountId, newPlayerBoard);

    return newPlayerBoard;
}
```

The Player board might not exist so it may return `null` instead of the Player board. In this case, we want to create a new board for that player before proceeding.
```
function getPlayerBoard(accountId: string): Board | null {
    return boards.get(accountId);
}
```

Often we just want to get a Board whether they have one or not yet. So we combine the two above functions into one where we return the existing board or create a new one for the user with `accountId`.
```
function getOrCreatePlayerBoard(accountId: string): Board {
    const existingPlayerBoard = getPlayerBoard(accountId);

    if (existingPlayerBoard) {
        return existingPlayerBoard;
    }

    return createPlayerBoard(accountId);
}
```

## External Functions

These are functions that anyone with NEAR account can call to view data about our game state or manipulate it in some way. It can be done through CLI or in our case from a website using Javascript.

### markCell

The main function lets the Player mark cell for the current turn mark.
```
export function markCell(x: string, y: string): CallResponse {
    const playerBoard = getOrCreatePlayerBoard(context.sender);
```

`context.sender` is available on all call requests that indicate which NEAR account is calling this function.

```
    if (playerBoard.cellIsMarked(parseInt(x), parseInt(y))) {
        return response('Cell is already marked!', false);
    }
```

We first need to double-check that cell is empty because we don't want Players cheating their way to victory :)

```
    const mark = playerBoard.currentTurnMark;

    playerBoard.markCell(parseInt(x), parseInt(y));
```

Now, we can safely mark the cell in the Player chosen location.

```
    if (playerBoard.isFull()) {
        const winner = playerBoard.getWinner();

        playerBoard.winner = winner;
        boards.set(context.sender, playerBoard);

        if (winner == 'TIE') {
            return response('Game ended in a tie!', true);
        } else {
            return response(winner + ' won the game!', true);
        }
```

In a case where the board becomes full - we want to end the game. So we check who the winner is (or if it's a tie) - update board state and respond to the user that the game is over.

```
    } else {
        const winner = playerBoard.getWinner();

        if (winner != 'TIE') {
            playerBoard.winner = winner;
            boards.set(context.sender, playerBoard);
    
            return response(winner + ' won the game!', true);
        }
    }
```

Otherwise, we check if there is a winner even if the board is not full. If there is then we mark the board as finished and respond to the client who won the game.

```
    boards.set(context.sender, playerBoard);

    return response('Cell ' + x.toString() + ',' + y.toString() + ' marked with ' + mark + '!', true);
}
```

Finally, we update the game board with the new mark if it hasn't been done before because the game is not finished yet and respond to the client with the location and mark that was placed.

### viewBoard

View functions are special because you don't need a NEAR account to access/call them but it's important to note that `context.sender` isn't available either so we need to pass in `accountId` for it to know which board to return.

```
export function viewBoard(accountId: string): Board | null {
    return getPlayerBoard(accountId);
}
```

### startNewGame

And finally, the ability to start a new game - because we want our Players to play through multiple games on a single account.

```
export function startNewGame(): CallResponse {
    createPlayerBoard(context.sender);

    return response('New game started!', true);
}
```

# Frontend

We have gone through our Smart Contract so let's check out some important parts of our frontend.

In `/src/index.html` you can see the structure of our website/game. It contains two blocks - one for logged-in users and one for logged-out ones. Logged-in users see basic information about the game and can sign in. Signed-in users can view the game board and UI, information about which NEAR account they used to log in as well messages received from blockchain, and the ability to sign out.

In `/src/global.css` you will find all the styling for our website/game.

Now, let's have a look at Javascript files that are important for our project and some snippets of core functionality.

In `/src/config.js` you will need to update your NEAR account id as it will be used to deploy your Smart Contract to the NEAR blockchain. The rest of the script is just configuration and common URLs NEAR SDK uses.

## Utility Functions

You can find some NEAR related utility functions in `/src/utils.js`.

`initContract()` function initializes a connection with NEAR wallet and stores information about currently logged-in user and their wallet in global variables (e.g. `window.accountId`).

In addition, it sets up necessary functionality for your contract as shown below.

```
// Initializing our contract APIs by contract name and configuration
window.contract = await new Contract(
    window.walletConnection.account(),
    nearConfig.contractName,
    {
        // View methods are read-only. They don't modify the state but usually return some value.
        viewMethods: [
            "viewBoard",
        ],
        // Change methods can modify the state. But you don't receive the returned value when called.
        changeMethods: [
            "markCell",
            "startNewGame",
        ],
        sender: window.walletConnection.account(), // account object to initialize and sign transactions.
    }
);
```

You will have to define your external function from you Smart Contract in `viewMethods` and `changeMethods` arrays for them to be usable with NEAR SDK.

Then there are two more common functions `logout` and `login` which are self-explanatory.

## Game Code

We will now have a look at important parts of the game code in `/src/index.js`.

### Gas

When making `call` (change) requests to the blockchain you need to provide gas aka small payment for action you're about to perform. In our case, start a new game or mark a cell.

For simplicity, we just define the maximum amount of gas you can use per request.

```
const BOATLOAD_OF_GAS = "300000000000000";
```

### Loading Indicator

When performing actions on servers or blockchain they don't complete instantly so for a better user experience we want to show a loading indicator. We simply replace the content of the cell or button with a loading SVG and prevent the user from clicking/tapping it twice until the request has been executed.

```
function startLoadingButton(button) {
    button.innerHTML = LOADING_SVG;
    button.style.pointerEvents = "none";
}

function stopLoadingButton(button) {
    button.style.pointerEvents = "inherit";
}
```

### Start New Game

This button is only visible when the user's game is over.

As you can see we're using one of the functions we defined in `/src/utils.js`. To start a new game we don't need to pass in any parameters so we provide an empty object `{}`. We make sure that we wait for the request to complete before proceeding by prefixing the function call with `await`. When the request has been executed we update the response for the user to see and update the board state.

```
startNewGameElement.onclick = async () => {
    try {
        startLoadingButton(startNewGameElement);
        const response = await window.contract.startNewGame(
            {},
            BOATLOAD_OF_GAS
        );

        updateResponse(response.message, response.success);
        updateBoard();
        stopLoadingButton(startNewGameElement);
    } catch (e) {
        console.log(e);
        alert(
            "Something went wrong! " +
            "Maybe you need to sign out and back in? " +
            "Check your browser console for more info."
        );
        throw e;
    }
}
```

### Update Board

We call this function as soon as the user is logged in. If he doesn't have a board yet then `viewBoard` call will return `null` meaning that we need to start a new game before proceeding.

```
async function updateBoard() {
    const board = await window.contract.viewBoard({
        accountId: window.accountId,
    });

    if (board == null) {
        try {
            const response = await window.contract.startNewGame(
                {},
                BOATLOAD_OF_GAS
            );
    
            updateResponse(response.message, response.success);
            updateBoard();
        } catch (e) {
            console.log(e);
            alert(
                "Something went wrong! " +
                "Maybe you need to sign out and back in? " +
                "Check your browser console for more info."
            );
            throw e;
        }
```

Otherwise, we update the board with its current state received from blockchain and add the ability to mark empty cells.

Have a look at `src/index.js` yourself to see how the game state is visualized.

# That's It, Folks!

That covers all the main functionality in our game!

Now that we have gone through the code - we want to build and deploy our game to NEAR.

Deploy
======

Every smart contract in NEAR has its [own associated account][NEAR accounts]. When you run `yarn dev`, your smart contracts get deployed to the live NEAR TestNet with a throwaway account. When you're ready to make it permanent, here's how.

Step 0: Install near-cli
--------------------------

You need near-cli installed globally. Here's how:

    npm install --global near-cli

This will give you the `near` [CLI] tool. Ensure that it's installed with:

    near --version

Step 1: Create an account for the contract
------------------------------------------

Visit [NEAR Wallet] and make a new account. You'll be deploying these smart contracts to this new account.

Now authorize NEAR CLI for this new account, and follow the instructions it gives you:

    near login

Step 2: set contract name in code
---------------------------------

Modify the line in `src/config.js` that sets the account name of the contract. Set it to the account id you used above.

    const CONTRACT_NAME = process.env.CONTRACT_NAME || 'your-account-here!'

Step 3: change remote URL if you cloned this repo 
-------------------------

Unless you forked this repository you will need to change the remote URL to a repo that you have commit access to. This will allow auto deployment to Github Pages from the command line.

1) go to GitHub and create a new repository for this project
2) open your terminal and in the root of this project enter the following:

    $ `git remote set-url origin https://github.com/YOUR_USERNAME/YOUR_REPOSITORY.git`

Step 4: deploy!
---------------

One command:

    yarn deploy

As you can see in `package.json`, this does two things:

1. builds & deploys smart contracts to NEAR TestNet
2. builds & deploys frontend code to GitHub using [gh-pages]. This will only work if the project already has a repository set up on GitHub. Feel free to modify the `deploy` script in `package.json` to deploy elsewhere.

  [NEAR]: https://nearprotocol.com/
  [yarn]: https://yarnpkg.com/
  [AssemblyScript]: https://docs.assemblyscript.org/
  [React]: https://reactjs.org
  [smart contract docs]: https://docs.nearprotocol.com/docs/roles/developer/contracts/assemblyscript
  [asp]: https://www.npmjs.com/package/@as-pect/cli
  [jest]: https://jestjs.io/
  [NEAR accounts]: https://docs.nearprotocol.com/docs/concepts/account
  [NEAR Wallet]: https://wallet.nearprotocol.com
  [near-cli]: https://github.com/nearprotocol/near-cli
  [CLI]: https://www.w3schools.com/whatis/whatis_cli.asp
  [create-near-app]: https://github.com/nearprotocol/create-near-app
  [gh-pages]: https://github.com/tschaub/gh-pages

'''
'''--- as-pect.config.js ---
module.exports = require('near-sdk-as/imports')

'''
'''--- asconfig.json ---
{
  "extends": "near-sdk-as/asconfig.json",
  "entry": "assembly/main.ts",
  "options": {
    "binaryFile": "out/main.wasm"
  }
} 

'''
'''--- assembly/as_types.d.ts ---
/// <reference types="near-sdk-as/assembly/as_types" />

'''
'''--- assembly/main.ts ---
import {
	context,
	PersistentUnorderedMap,
} from "near-sdk-as";

@nearBindgen
class Board {
	cells: string[] = ['', '', '', '', '', '', '', '', ''];
	// eslint-disable-next-line @typescript-eslint/no-inferrable-types
	currentTurnMark: string = 'X';
	// eslint-disable-next-line @typescript-eslint/no-inferrable-types
	winner: string = '';

	isFull(): boolean {
		for (let i = 0; i < this.cells.length; i += 1) {
			if (this.cells[i] == '') {
				return false;
			}
		}

		return true;
	}

	cellIsMarked(x: number, y: number): boolean {
		const cellIndex = this.getCellIndex(x, y);

		if (this.cells[cellIndex] == '') {
			return false;
		}

		return true;
	}

	getCellIndex(x: number, y: number): i32 {
		return i32(x + y * 3);
	}

	markCell(x: number, y: number): void {
		const cellIndex = this.getCellIndex(x, y);

		this.cells[cellIndex] = this.currentTurnMark;

		if (this.currentTurnMark == 'X') {
			this.currentTurnMark = 'O';
		} else {
			this.currentTurnMark = 'X';
		}
	}

	getWinner(): string {
		const players = ['X', 'O'];

		for (let i = 0; i < players.length; i += 1) {
			const playerMark = players[i];

			// 1st row
			if (this.cells[0] == playerMark && this.cells[1] == playerMark && this.cells[2] == playerMark) {
				return playerMark;
			}

			// 2nd row
			if (this.cells[3] == playerMark && this.cells[4] == playerMark && this.cells[5] == playerMark) {
				return playerMark;
			}

			// 3rd row
			if (this.cells[6] == playerMark && this.cells[7] == playerMark && this.cells[8] == playerMark) {
				return playerMark;
			}

			// 1st column
			if (this.cells[0] == playerMark && this.cells[3] == playerMark && this.cells[6] == playerMark) {
				return playerMark;
			}

			// 2nd column
			if (this.cells[1] == playerMark && this.cells[4] == playerMark && this.cells[7] == playerMark) {
				return playerMark;
			}

			// 3rd column
			if (this.cells[2] == playerMark && this.cells[5] == playerMark && this.cells[8] == playerMark) {
				return playerMark;
			}

			// diagonal top left to bottom right
			if (this.cells[0] == playerMark && this.cells[4] == playerMark && this.cells[8] == playerMark) {
				return playerMark;
			}

			// diagonal bottom left to top right
			if (this.cells[6] == playerMark && this.cells[4] == playerMark && this.cells[2] == playerMark) {
				return playerMark;
			}
		}

		return 'TIE';
	}
}

@nearBindgen
class CallResponse {
	constructor(
		public success: boolean,
		public message: string,
	) {

	}
}

const boards = new PersistentUnorderedMap<string, Board>("m");

function response(message: string, success: boolean): CallResponse {
	return new CallResponse(success, message)
}

function createPlayerBoard(accountId: string): Board {
	const newPlayerBoard = new Board();
	boards.set(accountId, newPlayerBoard);

	return newPlayerBoard;
}

function getPlayerBoard(accountId: string): Board | null {
	return boards.get(accountId);
}

function getOrCreatePlayerBoard(accountId: string): Board {
	const existingPlayerBoard = getPlayerBoard(accountId);

	if (existingPlayerBoard) {
		return existingPlayerBoard;
	}

	return createPlayerBoard(accountId);
}

export function markCell(x: string, y: string): CallResponse {
	const playerBoard = getOrCreatePlayerBoard(context.sender);
	
	if (playerBoard.cellIsMarked(parseInt(x), parseInt(y))) {
		return response('Cell is already marked!', false);
	}

	const mark = playerBoard.currentTurnMark;

	playerBoard.markCell(parseInt(x), parseInt(y));

	if (playerBoard.isFull()) {
		const winner = playerBoard.getWinner();

		playerBoard.winner = winner;
		boards.set(context.sender, playerBoard);

		if (winner == 'TIE') {
			return response('Game ended in a tie!', true);
		} else {
			return response(winner + ' won the game!', true);
		}
	} else {
		const winner = playerBoard.getWinner();

		if (winner != 'TIE') {
			playerBoard.winner = winner;
			boards.set(context.sender, playerBoard);
	
			return response(winner + ' won the game!', true);
		}
	}

	boards.set(context.sender, playerBoard);

	return response('Cell ' + x.toString() + ',' + y.toString() + ' marked with ' + mark + '!', true);
}

export function viewBoard(accountId: string): Board | null {
	return getPlayerBoard(accountId);
}

export function startNewGame(): CallResponse {
	createPlayerBoard(context.sender);

	return response('New game started!', true);
}

'''
'''--- assembly/tsconfig.json ---
{
  "extends": "../node_modules/assemblyscript/std/assembly.json",
  "include": [
    "./**/*.ts"
  ]
}

'''
'''--- babel.config.js ---
module.exports = {
  presets: ['@babel/preset-env', '@babel/preset-react']
}

'''
'''--- package.json ---
{
	"name": "guest-book",
	"version": "0.1.0",
	"license": "(MIT AND Apache-2.0)",
	"scripts": {
		"build": "yarn build:contract && yarn build:web",
		"build:contract": "asb",
		"build:contract:debug": "asb --target debug",
		"build:web": "parcel build src/index.html --public-url ./",
		"deploy": "yarn build && near deploy && gh-pages -d dist/",
		"dev": "yarn build:contract:debug && near dev-deploy && nodemon --watch assembly -e ts --exec yarn dev:start",
		"lint": "eslint \"./**/*.js\" \"./**/*.jsx\"",
		"start": "yarn deploy && parcel src/index.html",
		"dev:start": "env-cmd -f ./neardev/dev-account.env parcel src/index.html",
		"test": "yarn build:contract:debug && asp && jest"
	},
	"devDependencies": {
		"@babel/core": "^7.14.0",
		"@babel/preset-env": "^7.14.2",
		"@babel/preset-react": "^7.13.13",
		"@typescript-eslint/eslint-plugin": "^4.22.1",
		"@typescript-eslint/parser": "^4.22.1",
		"babel-jest": "^26.6.3",
		"eslint": "^7.26.0",
		"gh-pages": "^3.1.0",
		"jest": "^26.6.3",
		"jest-environment-node": "^26.6.2",
		"near-cli": "^2.0.0",
		"near-sdk-as": "3.2.3",
		"nodemon": "^2.0.7",
		"parcel-bundler": "^1.12.5",
		"react-test-renderer": "^17.0.2",
		"sass": "^1.32.13",
		"typescript": "^4.2.4"
	},
	"dependencies": {
		"big.js": "^6.1.1",
		"env-cmd": "^10.1.0",
		"near-api-js": "^0.41.0",
		"prop-types": "^15.7.2",
		"react": "^17.0.2",
		"react-dom": "^17.0.2",
		"regenerator-runtime": "^0.13.7"
	},
	"resolutions": {
		"@babel/preset-env": "7.13.8"
	},
	"jest": {
		"projects": [
			{
				"displayName": "User interface tests",
				"testEnvironment": "jsdom",
				"testMatch": [
					"<rootDir>/src/tests/ui/*.js"
				]
			},
			{
				"displayName": "Integration tests",
				"testEnvironment": "near-cli/test_environment",
				"testMatch": [
					"<rootDir>/src/tests/integration/*.js"
				]
			}
		],
		"testPathIgnorePatterns": [
			"assembly/*"
		]
	},
	"browserslist": {
		"production": [
			">0.2%",
			"not dead",
			"not op_mini all"
		],
		"development": [
			"last 1 chrome version",
			"last 1 firefox version",
			"last 1 safari version"
		]
	}
}

'''
'''--- src/assets/logo-black.svg ---
<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#24272a"/><stop offset=".42" stop-color="#24272a" stop-opacity="0"/><stop offset=".59" stop-color="#24272a" stop-opacity="0"/><stop offset=".81" stop-color="#24272a"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#24272a"/></svg>
'''
'''--- src/assets/logo-white.svg ---
<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#fff"/><stop offset=".42" stop-color="#fff" stop-opacity="0"/><stop offset=".59" stop-color="#fff" stop-opacity="0"/><stop offset=".81" stop-color="#fff"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#fff"/></svg>
'''
'''--- src/config.js ---
const CONTRACT_NAME = process.env.CONTRACT_NAME || "tic-tac-toe.testnet";

function getConfig(env) {
	switch (env) {
		case "mainnet":
			return {
				networkId: "mainnet",
				nodeUrl: "https://rpc.mainnet.near.org",
				contractName: CONTRACT_NAME,
				walletUrl: "https://wallet.near.org",
				helperUrl: "https://helper.mainnet.near.org",
			};
		// This is an example app so production is set to testnet.
		// You can move production to mainnet if that is applicable.
		case "production":
		case "development":
		case "testnet":
			return {
				networkId: "testnet",
				nodeUrl: "https://rpc.testnet.near.org",
				contractName: CONTRACT_NAME,
				walletUrl: "https://wallet.testnet.near.org",
				helperUrl: "https://helper.testnet.near.org",
			};
		case "betanet":
			return {
				networkId: "betanet",
				nodeUrl: "https://rpc.betanet.near.org",
				contractName: CONTRACT_NAME,
				walletUrl: "https://wallet.betanet.near.org",
				helperUrl: "https://helper.betanet.near.org",
			};
		case "local":
			return {
				networkId: "local",
				nodeUrl: "http://localhost:3030",
				keyPath: `${process.env.HOME}/.near/validator_key.json`,
				walletUrl: "http://localhost:4000/wallet",
				contractName: CONTRACT_NAME,
			};
		case "test":
		case "ci":
			return {
				networkId: "shared-test",
				nodeUrl: "https://rpc.ci-testnet.near.org",
				contractName: CONTRACT_NAME,
				masterAccount: "test.near",
			};
		case "ci-betanet":
			return {
				networkId: "shared-test-staging",
				nodeUrl: "https://rpc.ci-betanet.near.org",
				contractName: CONTRACT_NAME,
				masterAccount: "test.near",
			};
		default:
			throw Error(
				`Unconfigured environment '${env}'. Can be configured in src/config.js.`
			);
	}
}

module.exports = getConfig;

'''
'''--- src/global.css ---
@import url("https://fonts.googleapis.com/css2?family=Grandstander:wght@400;700&display=swap");

* {
	box-sizing: border-box;
}

html {
	--bg: #efefef;
	--fg: #1e1e1e;
	--gray: #555;
	--light-gray: #ccc;
	--shadow: #e6e6e6;
	--success: rgb(90, 206, 132);
	--primary: #ff585d;
	--secondary: #0072ce;

	background: #292929;
	color: var(--fg);
	font-family: "Grandstander", cursive;
	font-size: calc(0.9em + 0.5vw);
	line-height: 1.3;
}

body {
	margin: 0;
	padding: 1em;
}

body * {
	color: #fff;
	font-family: Grandstander, sans-serif;
	font-weight: 300;
	line-height: 1.5;
	letter-spacing: 1.5px;
	text-shadow: 1px 1px 2px #000;
	font-size: 1.15rem;
	text-align: center;
	transition: all 0.25s;
}

main {
	display: flex;
	justify-content: center;
	align-items: center;
	flex-direction: column;
}

.avatar-select {
	display: flex;
	flex-direction: row-reverse;
}

h1 {
	margin-top: 0;
	text-align: center;
	font-weight: normal;
	font-size: 2rem;
	text-shadow: 0 0 12px #4d84b9;
}

h1 * {
	margin-top: 0;
	text-align: center;
	font-weight: normal;
	font-size: 2rem;
	text-shadow: 0 0 12px #4d84b9;
}

h1 span {
	text-decoration: line-through;
}

.accountId {
	font-size: 0.5em;
	display: block;
}

hr {
	margin-bottom: 2rem;
}

ul.user-list {
	display: flex;
	flex-direction: column;
	margin: 0;
	padding: 0;
	justify-content: center;
	align-items: center;
}

ul.user-list li {
	display: flex;
	width: 100%;
	height: 140px;
	margin: 0 15px;
	justify-content: center;
	align-items: center;
	overflow: hidden;
	filter: drop-shadow(0px 0px 2px #000) drop-shadow(0px 0px 5px #000);
	padding: 0;
	position: relative;
	background-color: #191919;
	margin-bottom: 1rem;
}

ul.user-list li:hover {
	background-color: #111;
}

.vote span {
	font-size: 1.5rem;
}

.vote[disabled] * {
	opacity: 0;
}

.vote[disabled] {
	width: 40px;
	height: 40px;
	padding: 0;
	margin-right: 1.6rem;
	border-radius: 50%;
	animation: pulse-black 2s infinite;
}

@keyframes pulse-black {
	0% {
		transform: scale(0.95);
		box-shadow: 0 0 0 0 rgba(0, 0, 0, 0.7);
	}

	70% {
		transform: scale(1);
		box-shadow: 0 0 0 10px rgba(0, 0, 0, 0);
	}

	100% {
		transform: scale(0.95);
		box-shadow: 0 0 0 0 rgba(0, 0, 0, 0);
	}
}

.ribbon {
	display: none !important;
	position: absolute;
	top: 0;
	left: 0;
	width: 60px !important;
	border-bottom-right-radius: 10px;
}

ul.user-list li.premium {
	border-radius: 4px;
	filter: drop-shadow(0px 0px 5px #8f7b10);
}

.premium .ribbon {
	display: flex !important;
}

.ribbon span {
	padding: 0.5rem;
	display: flex;
	justify-content: center;
	align-items: center;
	width: 60px;
	color: #8f7b10;
	font-weight: bold;
}

ul.user-list li > div {
	width: 100%;
	overflow: hidden;
	margin-right: 1rem;
	display: flex;
	flex-direction: column;
}

ul.user-list li > div * {
	text-align: left !important;
}

ul.user-list li > div small {
	margin-bottom: 0.15rem;
	margin-top: 0.15rem;
}

ul.user-list li .rank {
	margin-top: 1rem;
	font-size: 1rem;
	font-weight: normal;
}

ul.user-list li .rank {
	font-size: 2rem;
	font-weight: bold;
	width: auto;
	margin-left: 1rem;
}

ul.user-list li img {
	width: 100px;
	height: 100px;
	margin: 10px;
	margin-right: 20px;
}

ul.user-list li button {
	margin-right: 1rem;
}

ul.user-list li strong {
	color: #ccc;
	font-size: 1.25em;
	white-space: nowrap;
	text-overflow: clip;
	width: 100%;
	text-align: center;
}

ul.user-list li small {
	color: #999;
	font-size: 0.75em;
	white-space: nowrap;
	text-overflow: clip;
	width: 100%;
	text-align: center;
}

.header {
	padding: 1rem;
	text-align: center;
	font-size: 4em;
}

p {
	color: #888;
	text-align: center;
}

a,
.link {
	color: var(--primary);
	text-decoration: none;
}
a:hover,
a:focus,
.link:hover,
.link:focus {
	text-decoration: underline;
}
a:active,
.link:active {
	color: var(--secondary);
}

#avatar-container {
	width: 150px;
	height: 150px;
	margin-bottom: 1rem;
	filter: drop-shadow(0px 0px 5px black) drop-shadow(0px 0px 10px black);
}

#refresh-avatar {
	fill: #fff;
	padding: 3px 20px;
	display: flex;
	justify-content: center;
	align-items: center;
}

#fieldset {
	display: flex;
	flex-direction: column;
	justify-content: center;
	align-items: center;
	padding: 0;
}

button,
input {
	font: inherit;
	outline: none;
}

button {
	background-color: #181818;
	border-radius: 5px;
	border: none;
	color: #efefef;
	cursor: pointer;
	padding: 0.3em 0.75em;
	transition: transform 30ms;
	justify-content: center;
	width: 100%;
}
button:hover,
button:focus {
	filter: drop-shadow(0px 0px 5px #444) drop-shadow(0px 0px 10px #444);
}
button:active {
	filter: drop-shadow(0px 0px 5px #444) drop-shadow(0px 0px 10px #444);
}
button.link {
	background: none;
	border: none;
	box-shadow: none;
	display: inline;
}
[disabled] button,
button[disabled] {
	box-shadow: none;
	background-color: var(--light-gray);
	color: gray;
	cursor: not-allowed;
	transform: none;
}
[disabled] button {
	text-indent: -900em;
	width: 2em;
	position: relative;
}
[disabled] button:after {
	content: " ";
	display: block;
	width: 0.8em;
	height: 0.8em;
	border-radius: 50%;
	border: 2px solid #fff;
	border-color: var(--fg) transparent var(--fg) transparent;
	animation: loader 1.2s linear infinite;
	position: absolute;
	top: 0.45em;
	right: 0.5em;
}
@keyframes loader {
	0% {
		transform: rotate(0deg);
	}
	100% {
		transform: rotate(360deg);
	}
}

fieldset {
	border: none;
	padding: 2em 0;
}

input {
	background-color: var(--shadow);
	border: none;
	border-radius: 5px 0 0 5px;
	caret-color: var(--primary);
	color: inherit;
	padding: 0.25em 1em;
	width: 100%;
	border-radius: 5px;
	background: #222;
	border: 3px dashed #333;
	padding-top: 10px;
}
input::selection {
	background-color: var(--secondary);
	color: #efefef;
}
input:focus {
	box-shadow: 0 0 10em rgba(0, 0, 0, 0.02) inset;
}

code {
	color: var(--gray);
}

li {
	padding-bottom: 1em;
}

.box {
	box-shadow: 0 0 5px #000;
	background: #222;
	max-width: 800px;
	padding: 1.5rem 1rem;
	margin: 1rem auto 0;
	border-radius: 3px;
	position: relative;
}

strong {
	color: #bbb;
	font-weight: 400;
}

.sections {
	display: flex;
	flex-wrap: wrap;
	justify-content: center;
	align-items: flex-start;
}

.sections > div {
	width: 500px;
	margin: 0 1rem 2rem 1rem;
}

#new-candidate-button {
	position: absolute;
	top: 1rem;
	right: 1rem;
	width: 50px;
	height: 50px;
	fill: #0c79cf;
	cursor: pointer;
}

#new-candidate-button:hover {
	filter: drop-shadow(0px 0px 5px #111) drop-shadow(0px 0px 10px #111);
}

#new-candidate-popup {
	display: flex;
	position: fixed;
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;
	background-color: rgb(0 0 0 / 50%);
	z-index: 1;
}

#new-candidate-popup > div {
	display: flex;
	position: fixed;
	top: 3rem;
	left: 50%;
	margin-left: -300px;
	width: 600px;
	z-index: 2;
	flex-direction: column;
}

#close-new-candidate-popup {
	position: absolute;
	top: 0.5rem;
	right: 0.5rem;
	width: 50px;
	height: 50px;
	fill: #555;
	cursor: pointer;
	background: #292929;
	padding: 0.25rem;
	border-radius: 50%;
}

#close-new-candidate-popup:hover {
	filter: drop-shadow(0px 0px 5px #111) drop-shadow(0px 0px 10px #111);
}

.loading {
	animation: spin 4s linear infinite;
	width: 35px;
	height: 35px;
	fill: #666;
}

@keyframes spin {
	100% {
		-webkit-transform: rotate(360deg);
		transform: rotate(360deg);
	}
}

.candidate {
	display: flex;
	border-bottom: 1px solid #333;
	margin-bottom: 1rem;
	padding-bottom: 1rem;
	justify-content: space-between;
	align-items: center;
}

.candidate:last-child {
	border-bottom: 0;
	margin-bottom: 0;
	padding-bottom: 0;
}

.candidate img {
	width: 80px;
	height: 80px;
}

.candidate .details {
	display: flex;
	flex-direction: column;
	justify-content: center;
	align-items: flex-start;
	width: 100%;
	padding-left: 0.5rem;
	padding-right: 0.5rem;
	overflow: hidden;
}

.candidate .details strong {
	color: #ddd;
}

.candidate .details span {
	color: #888;
}

.candidate button {
	display: flex;
	justify-content: center;
	align-items: center;
	width: 40px;
	height: 40px;
	margin-top: 0.25rem;
	padding: 0.35rem;
	fill: #999;
	margin-bottom: 0;
}

.candidate button.vote {
	fill: rgb(115, 171, 223);
}

.candidate button.kill {
	fill: #ff585d;
}

.candidate button.revive {
	fill: #fff;
}

#save-new-candidate {
	width: 100% !important;
}

.candidate.dead button.kill {
	display: none;
}

.candidate.alive button.revive {
	display: none;
}

.vote {
	display: flex;
	border-bottom: 1px solid #333;
	margin-bottom: 1rem;
	padding-bottom: 1rem;
	justify-content: space-between;
	align-items: center;
}

.vote:last-child {
	border-bottom: 0;
	margin-bottom: 0;
	padding-bottom: 0;
}

.vote .icon {
	width: 40px;
	fill: #73aadf;
	height: 40px;
}

.vote .details {
	justify-content: center;
	display: flex;
	flex-direction: column;
	align-items: flex-start;
}

.vote span {
	font-size: 1rem;
	color: #999999;
}

.vote strong {
	color: #ddd;
}

.log {
	border-bottom: 1px solid #333;
	margin-bottom: 0.75rem;
	padding-bottom: 0.25rem;
	font-size: 0.75rem;
	display: flex;
	flex-direction: column;
	align-items: flex-start;
}

.log:last-child {
	border-bottom: 0;
	margin-bottom: 0;
	padding-bottom: 0;
}

.log span {
	font-size: 0.75rem;
	color: #999999;
	text-align: left;
}

.log strong {
	font-size: 0.75rem;
	color: #ddd;
	text-align: left;
}

.modes {
	display: flex;
	margin-top: 1rem;
	justify-content: space-evenly;
}

.modes button {
	width: 150px;
	height: 150px;
	padding: 1rem;
	display: flex;
	justify-content: center;
	align-items: center;
}

.modes img {
	height: 100%;
	width: 100%;
}

#snowfall-element {
	position: fixed;
	z-index: 10;
	top: 0;
	left: 0;
	height: 100%;
	width: 100%;
	pointer-events: none;
}

#response {
	width: 100%;
	margin: 0;
	justify-content: flex-start;
	display: flex;
	align-items: flex-start;
	padding: 0.75rem 1rem;
	flex-direction: column;
}

#response span {
	color: #999;
	text-align: left;
	line-height: 1.25rem;
	margin-bottom: 0.75rem;
}

#response.error {
	box-shadow: 0 0 5px rgb(255 0 0);
	background: rgb(255 88 93 / 5%);
}

#response.error span {
	color: #ff8080;
}

#response.success {
	box-shadow: 0 0 5px green;
	background: rgb(88 255 124 / 5%);
}

#response.success span {
	color: #99ff80;
}

.shake {
	animation-name: shake;
	animation-duration: 500ms;
}

@-webkit-keyframes shake {
	0% {
		-webkit-transform: translate(2px, 1px) rotate(0deg);
	}
	10% {
		-webkit-transform: translate(-1px, -2px) rotate(-1deg);
	}
	20% {
		-webkit-transform: translate(-3px, 0px) rotate(1deg);
	}
	30% {
		-webkit-transform: translate(0px, 2px) rotate(0deg);
	}
	40% {
		-webkit-transform: translate(1px, -1px) rotate(1deg);
	}
	50% {
		-webkit-transform: translate(-1px, 2px) rotate(-1deg);
	}
	60% {
		-webkit-transform: translate(-3px, 1px) rotate(0deg);
	}
	70% {
		-webkit-transform: translate(2px, 1px) rotate(-1deg);
	}
	80% {
		-webkit-transform: translate(-1px, -1px) rotate(1deg);
	}
	90% {
		-webkit-transform: translate(2px, 2px) rotate(0deg);
	}
	100% {
		-webkit-transform: translate(1px, -2px) rotate(-1deg);
	}
}

#board {
	width: 300px;
	height: 300px;
	background-color: #111;
}

#board > div {
	width: 100px;
	height: 100px;
	display: flex;
	justify-content: center;
	align-items: center;
	float: left;
	border: 1px solid #555;
	font-size: 3rem;
	padding-top: 17px;
}

#board > .empty {
	cursor: pointer;
}

#board > .lost {
	opacity: 0.25;
}

#board > .won {
	animation: shake 1s infinite;
}

#message {
	margin-bottom: 1rem;
}

#start-new-game {
	margin-top: 1rem;
	padding-top: 0.5rem;
	width: 300px;
}

'''
'''--- src/index.html ---
<!DOCTYPE html>
<html>

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="icon" href="./assets/favicon.ico" />
  <link rel="apple-touch-icon" href="./assets/favicon.ico" />
  <title>Tic Tac Toe</title>
  <link rel="stylesheet" href="global.css">
</head>

<body id="snow">
  <canvas id="snowfall-element"></canvas>
  <main id="signed-out-flow" class="box" style="display: none">
    <div class="header">❌⭕</div>
    <h1><strong>Tic Tac Toe</strong>!</h1>
    <h1 data-behavior="greeting"></h1>
    <p>
      Sign in to play <strong>Tic Tac Toe</strong>! 😉
    </p>
    <p style="text-align: center; margin-top: 2.5em">
      <button id="sign-in-button">Sign in</button>
    </p>
  </main>

  <div id="signed-in-flow" style="display: none; margin-top: 3rem;">
    <button class="link" style="float: right; position: fixed; top: 1rem; right: 1rem; width: auto;"
      id="sign-out-button">
      Sign out
    </button>
    <main>
      <div style="display: flex; margin-bottom: 2rem; justify-content: center; width: 100%;">
        <div class="box" style="padding: 1rem 3rem; margin: 0; margin-right: 1rem">
          <strong style="font-size: 3.25rem">❌⭕</strong>
          <h1 style="margin-bottom: 0;">
            <strong data-behavior="account-id" class="accountId"></strong>
          </h1>
        </div>

        <div class="box" id="response">
          <span>You will see Smart Contract responses here!</span>
          <span>Have fun! 😉</span>
        </div>
      </div>

      <div id="message">LOADING GAME</div>
      <div id="board">
        <div id="cell-0"></div>
        <div id="cell-1"></div>
        <div id="cell-2"></div>
        <div id="cell-3"></div>
        <div id="cell-4"></div>
        <div id="cell-5"></div>
        <div id="cell-6"></div>
        <div id="cell-7"></div>
        <div id="cell-8"></div>
      </div>
      <button id="start-new-game" style="display: none;">Start New Game</button>
    </main>
  </div>

  <script src="./index.js"></script>
</body>

</html>

'''
'''--- src/index.js ---
import "regenerator-runtime/runtime";

import { initContract, login, logout } from "./utils";

const BOATLOAD_OF_GAS = "300000000000000";

const LOADING_SVG = `<svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" class="loading" viewBox="0 0 24 24"><path d="M13.75 22c0 .966-.783 1.75-1.75 1.75s-1.75-.784-1.75-1.75.783-1.75 1.75-1.75 1.75.784 1.75 1.75zm-1.75-22c-1.104 0-2 .896-2 2s.896 2 2 2 2-.896 2-2-.896-2-2-2zm10 10.75c.689 0 1.249.561 1.249 1.25 0 .69-.56 1.25-1.249 1.25-.69 0-1.249-.559-1.249-1.25 0-.689.559-1.25 1.249-1.25zm-22 1.25c0 1.105.896 2 2 2s2-.895 2-2c0-1.104-.896-2-2-2s-2 .896-2 2zm19-8c.551 0 1 .449 1 1 0 .553-.449 1.002-1 1-.551 0-1-.447-1-.998 0-.553.449-1.002 1-1.002zm0 13.5c.828 0 1.5.672 1.5 1.5s-.672 1.501-1.502 1.5c-.826 0-1.498-.671-1.498-1.499 0-.829.672-1.501 1.5-1.501zm-14-14.5c1.104 0 2 .896 2 2s-.896 2-2.001 2c-1.103 0-1.999-.895-1.999-2s.896-2 2-2zm0 14c1.104 0 2 .896 2 2s-.896 2-2.001 2c-1.103 0-1.999-.895-1.999-2s.896-2 2-2z"/></svg>`;

function startLoadingButton(button) {
	button.innerHTML = LOADING_SVG;
	button.style.pointerEvents = "none";
}

function stopLoadingButton(button) {
	button.style.pointerEvents = "inherit";
}

const cellElements = [];
const messageElement = document.getElementById('message');
const startNewGameElement = document.getElementById('start-new-game');

for (let i = 0; i < 9; i += 1) {
	const cellElement = document.getElementById('cell-' + i);
	
	cellElements.push(cellElement);
}

startNewGameElement.onclick = async () => {
	try {
		startLoadingButton(startNewGameElement);
		const response = await window.contract.startNewGame(
			{},
			BOATLOAD_OF_GAS
		);

		updateResponse(response.message, response.success);
		updateBoard();
		stopLoadingButton(startNewGameElement);
	} catch (e) {
		console.log(e);
		alert(
			"Something went wrong! " +
			"Maybe you need to sign out and back in? " +
			"Check your browser console for more info."
		);
		throw e;
	}
}

async function updateBoard() {
	const board = await window.contract.viewBoard({
		accountId: window.accountId,
	});

	if (board == null) {
		try {
			const response = await window.contract.startNewGame(
				{},
				BOATLOAD_OF_GAS
			);
	
			updateResponse(response.message, response.success);
			updateBoard();
		} catch (e) {
			console.log(e);
			alert(
				"Something went wrong! " +
				"Maybe you need to sign out and back in? " +
				"Check your browser console for more info."
			);
			throw e;
		}
	} else {
		for (let i = 0; i < board.cells.length; i += 1) {
			const cell = board.cells[i];

			if (cell == 'X') {
				cellElements[i].innerHTML = '❌';
				cellElements[i].classList.toggle('empty', false);
				
				if (board.winner == 'X') {
					cellElements[i].classList.toggle('won', true);
					cellElements[i].classList.toggle('lost', false);
				}
				if (board.winner == 'O') {
					cellElements[i].classList.toggle('won', false);
					cellElements[i].classList.toggle('lost', true);
				}
			} else if (cell == 'O') {
				cellElements[i].innerHTML = '⭕';
				cellElements[i].classList.toggle('empty', false);
				
				if (board.winner == 'X') {
					cellElements[i].classList.toggle('won', false);
					cellElements[i].classList.toggle('lost', true);
				}
				if (board.winner == 'O') {
					cellElements[i].classList.toggle('won', true);
					cellElements[i].classList.toggle('lost', false);
				}
			} else {
				cellElements[i].innerHTML = '';
				cellElements[i].classList.toggle('empty', true);
				cellElements[i].classList.toggle('won', false);
				cellElements[i].classList.toggle('lost', false);

				cellElements[i].onclick = async () => {
					try {
						startLoadingButton(cellElements[i]);
						const response = await window.contract.markCell(
							{
								x: (i % 3).toString(),
								y: Math.floor(i / 3).toString(),
							},
							BOATLOAD_OF_GAS
						);
				
						updateResponse(response.message, response.success);
						updateBoard();
						stopLoadingButton(startNewGameElement);
					} catch (e) {
						console.log(e);
						alert(
							"Something went wrong! " +
							"Maybe you need to sign out and back in? " +
							"Check your browser console for more info."
						);
						throw e;
					}
				}
			}
		}

		if (board.winner == 'X') {
			messageElement.innerHTML = "❌ won!";
		} else if (board.winner == 'O') {
			messageElement.innerHTML = "⭕ won!";
		} else if (board.winner == 'TIE') {
			messageElement.innerHTML = "It's a tie!";
		} else if (board.currentTurnMark == 'X') {
			messageElement.innerHTML = "It's ❌ turn";
		} else if (board.currentTurnMark == 'O') {
			messageElement.innerHTML = "It's ⭕ turn";
		}

		if (board.winner == '') {
			startNewGameElement.style.display = 'none';
		} else {
			startNewGameElement.style.display = 'inherit';
		}
	}
}

document.querySelector("#sign-in-button").onclick = login;
document.querySelector("#sign-out-button").onclick = logout;

// Display the signed-out-flow container
function signedOutFlow() {
	document.querySelector("#signed-out-flow").style.display = "block";
}

// Displaying the signed in flow container and fill in account-specific data
function signedInFlow() {
	document.querySelector("#signed-in-flow").style.display = "block";

	document.querySelectorAll("[data-behavior=account-id]").forEach((el) => {
		el.innerText = window.accountId;
	});

	updateBoard();
}

const responseContainer = document.getElementById("response");

function updateResponse(message, success) {
	responseContainer.classList.toggle("error", success === false);
	responseContainer.classList.toggle("success", success === true);
	responseContainer.classList.add("shake");
	responseContainer.innerHTML =
		"<span>" + message + "</span>";
	setTimeout(() => {
		responseContainer.classList.remove("shake");
	}, 600);
}

// `nearInitPromise` gets called on page load
window.nearInitPromise = initContract()
	.then(() => {
		if (window.walletConnection.isSignedIn()) signedInFlow();
		else signedOutFlow();
	})
	.catch(console.error);

let s = {};
s.a = document.getElementById("snowfall-element");
s.b = s.a.getContext("2d");
s.c = function () {
	this.a = Math.random() * 2 + 2;
	this.b = Math.random() * s.a.width - this.a - 1 + this.a + 1;
	this.c = this.b;
	this.d = Math.random() * 50 + 1;
	this.e = Math.random();
	this.f = Math.random() * Math.PI * 2;
	this.g = Math.random() * 1.5 + 0.5;
	this.i = Math.random() * s.a.height - this.a - 1 + this.a + 1;
	this.j = () => {
		if (this.i > s.a.height + this.a) {
			this.i = -this.a;
		} else {
			this.i += this.g;
		}
		this.f += 0.02;
		this.b = this.c + this.d * Math.sin(this.f);
		s.b.fillStyle = "rgba(255,255,255," + this.e + ")";
		s.b.fillRect(this.b, this.i, this.a, this.a);
	};
};
s.e = () => {
	s.a.width = window.innerWidth;
	s.a.height = window.innerHeight;
	s.d = [];
	for (let x = 0; x < Math.ceil((s.a.width * s.a.height) / 15000); x += 1) {
		s.d.push(new s.c());
	}
};
window.addEventListener("resize", s.e);
s.f = () => {
	requestAnimationFrame(s.f);
	s.b.clearRect(0, 0, s.a.width, s.a.height);
	for (let x in s.d) {
		s.d[x].j();
	}
};
s.e();
s.f();

'''
'''--- src/main.test.js ---
beforeAll(async function () {
  // NOTE: nearlib and nearConfig are made available by near-cli/test_environment
  const near = await nearlib.connect(nearConfig)
  window.accountId = nearConfig.contractName
  window.contract = await near.loadContract(nearConfig.contractName, {
    viewMethods: ['get_greeting'],
    changeMethods: [],
    sender: window.accountId
  })
})

test('get_greeting', async () => {
  const message = await window.contract.get_greeting({ account_id: window.accountId })
  expect(message).toEqual('Hello')
})

'''
'''--- src/utils.js ---
import { connect, Contract, keyStores, WalletConnection } from "near-api-js";
import getConfig from "./config";

const nearConfig = getConfig("development");

// Initialize contract & set global variables
export async function initContract() {
	// Initialize connection to the NEAR testnet
	const near = await connect(
		Object.assign(
			{ deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() } },
			nearConfig
		)
	);

	// Initializing Wallet based Account. It can work with NEAR testnet wallet that
	// is hosted at https://wallet.testnet.near.org
	window.walletConnection = new WalletConnection(near);

	// Getting the Account ID. If still unauthorized, it's just empty string
	window.accountId = window.walletConnection.getAccountId();

	// Initializing our contract APIs by contract name and configuration
	window.contract = await new Contract(
		window.walletConnection.account(),
		nearConfig.contractName,
		{
			// View methods are read only. They don't modify the state, but usually return some value.
			viewMethods: [
				"viewBoard",
			],
			// Change methods can modify the state. But you don't receive the returned value when called.
			changeMethods: [
				"markCell",
				"startNewGame",
			],
			sender: window.walletConnection.account(), // account object to initialize and sign transactions.
		}
	);
}

export function logout() {
	window.walletConnection.signOut();
	// reload page
	window.location.replace(window.location.origin + window.location.pathname);
}

export function login() {
	// Allow the current app to make calls to the specified contract on the
	// user's behalf.
	// This works by creating a new access key for the user's account and storing
	// the private key in localStorage.
	window.walletConnection.requestSignIn(nearConfig.contractName);
}

'''
'''--- src/wallet/login/index.html ---
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/css/bootstrap.min.css" integrity="sha384-GJzZqFGwb1QTTN6wy59ffF1BuGJpLSa9DkKMp0DgiMDm4iYMj70gZWKYbI706tWS" crossorigin="anonymous">
</head>
<body style="background: #fff; margin-top: 3em">
  <div>Please run the following command in NEAR CLI, then enter account id here. masterAccountId default: test.near
  </div>
  <div>
      <code id="shell-command"></code>
  </div>
  <input type="text" id="accountId" name="accountId" placeholder="Account id"></input>
  <button type="button" onClick="done()">done</button>
  <script>
    const currentUrl = new URL(window.location.href);
    const message = `NODE_ENV=local near create_account {newAccountId} --masterAccount {masterAccountId} --publicKey ${currentUrl.searchParams.get('public_key')} --initialAmount 10000000000000000000`;
    document.getElementById('shell-command').innerText = message;

    function done() {
      const successUrl = new URL(currentUrl.searchParams.get('success_url'));
      successUrl.searchParams.set('account_id', document.getElementById('accountId').value);
      successUrl.searchParams.set('public_key', currentUrl.searchParams.get('public_key'));
      window.location.assign(successUrl.toString());
    }
  </script>
</body>
</html>
'''