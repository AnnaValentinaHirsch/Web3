*GitHub Repository "jonathantcrawford/dynamic-nft-example"*

'''--- .github/ISSUE_TEMPLATE/issue-template.md ---
---
name: Issue template
about: Standard issue template.
title: "[Replace me with meaningful title]"
labels: ''
assignees: ''

---

# Description

Provide a 2-3 sentence overview of the work to be done.

# Technical Information

Provide an explanation of the technical work to be done.

'''
'''--- .github/pull_request_template.md ---
# [Replace Me With Meaningful Name] - #[Issue]

## Description

Include a summary of the change and which issue it addresses in the title of the PR. 

Include relevant motivation, context, brief description and impact of the change(s). List follow-up tasks here.

## How Has This Been Tested?

Describe the tests that you ran to verify your changes. Provide instructions for reproduction.

- [ ] Test A (e.g. Test A - New test that ... ran in local, docker, and dev unstable.)
- [ ] Test B

## Definition of Done

Before submitting this PR, please make sure:

- [ ] The work addresses the description and outcomes in the issue
- [ ] I have added relevant tests for new or updated functionality
- [ ] My code follows conventions, is well commented, and easy to understand
- [ ] My code builds and tests pass without any errors or warnings
- [ ] I have tagged the relevant reviewers
- [ ] I have updated the READMEs of affected packages
- [ ] I have made corresponding changes to the documentation
- [ ] The changes have been communicated to interested parties

## References:

Please list relevant documentation (e.g. tech specs, articles, related work etc.) relevant to this change, and note if the documentation has been updated.

'''
'''--- README.md ---
This is an example application that uses [Ceramic](https://ceramic.network), based on [Next.js](https://nextjs.org/).

Fork it freely.

## Getting Started

1. Install dependencies.

2. Create local ENV file with your [web3.storage](https://web3.storage) and [INFURA](https://infura.io) access tokens:

```
WEB3STORAGE_TOKEN=eyJhbGc...
NEXT_PUBLIC_INFURA_TOKEN=b40...
```

3. Run the development server:

```bash
npm run dev
# or
yarn dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `pages/index.js`. The page auto-updates as you edit the file.

Note: this app is not fully static. There is a backend part, that interacts with web3.storage. The backend parts runs automatically,
when you do `npm run dev` or `npm run start`.

## Learn More

To learn more about Ceramic, take a look at the following resources:

- [Ceramic Web Site](https://ceramic.network) - introduction to Ceramic Network,
- [Ceramic Developers Documentation](https://developers.ceramic.network/learn/welcome/) - dig deeper into Ceramic.

'''
'''--- components/mint/rarible-contract-artifact.ts ---
export const RaribleContractArtifact = {
  abi: [
    {
      anonymous: false,
      inputs: [
        {
          indexed: true,
          internalType: "address",
          name: "owner",
          type: "address",
        },
        {
          indexed: true,
          internalType: "address",
          name: "approved",
          type: "address",
        },
        {
          indexed: true,
          internalType: "uint256",
          name: "tokenId",
          type: "uint256",
        },
      ],
      name: "Approval",
      type: "event",
    },
    {
      anonymous: false,
      inputs: [
        {
          indexed: true,
          internalType: "address",
          name: "owner",
          type: "address",
        },
        {
          indexed: true,
          internalType: "address",
          name: "operator",
          type: "address",
        },
        {
          indexed: false,
          internalType: "bool",
          name: "approved",
          type: "bool",
        },
      ],
      name: "ApprovalForAll",
      type: "event",
    },
    {
      anonymous: false,
      inputs: [
        {
          indexed: false,
          internalType: "address",
          name: "owner",
          type: "address",
        },
        {
          indexed: false,
          internalType: "string",
          name: "name",
          type: "string",
        },
        {
          indexed: false,
          internalType: "string",
          name: "symbol",
          type: "string",
        },
      ],
      name: "CreateERC721Rarible",
      type: "event",
    },
    {
      anonymous: false,
      inputs: [
        {
          indexed: false,
          internalType: "uint256",
          name: "tokenId",
          type: "uint256",
        },
        {
          components: [
            {
              internalType: "address payable",
              name: "account",
              type: "address",
            },
            {
              internalType: "uint96",
              name: "value",
              type: "uint96",
            },
          ],
          indexed: false,
          internalType: "struct LibPart.Part[]",
          name: "creators",
          type: "tuple[]",
        },
      ],
      name: "Creators",
      type: "event",
    },
    {
      anonymous: false,
      inputs: [
        {
          indexed: true,
          internalType: "address",
          name: "operator",
          type: "address",
        },
        {
          indexed: false,
          internalType: "bool",
          name: "hasApproval",
          type: "bool",
        },
      ],
      name: "DefaultApproval",
      type: "event",
    },
    {
      anonymous: false,
      inputs: [
        {
          indexed: true,
          internalType: "address",
          name: "previousOwner",
          type: "address",
        },
        {
          indexed: true,
          internalType: "address",
          name: "newOwner",
          type: "address",
        },
      ],
      name: "OwnershipTransferred",
      type: "event",
    },
    {
      anonymous: false,
      inputs: [
        {
          indexed: false,
          internalType: "uint256",
          name: "tokenId",
          type: "uint256",
        },
        {
          components: [
            {
              internalType: "address payable",
              name: "account",
              type: "address",
            },
            {
              internalType: "uint96",
              name: "value",
              type: "uint96",
            },
          ],
          indexed: false,
          internalType: "struct LibPart.Part[]",
          name: "royalties",
          type: "tuple[]",
        },
      ],
      name: "RoyaltiesSet",
      type: "event",
    },
    {
      anonymous: false,
      inputs: [
        {
          indexed: true,
          internalType: "address",
          name: "from",
          type: "address",
        },
        {
          indexed: true,
          internalType: "address",
          name: "to",
          type: "address",
        },
        {
          indexed: true,
          internalType: "uint256",
          name: "tokenId",
          type: "uint256",
        },
      ],
      name: "Transfer",
      type: "event",
    },
    {
      inputs: [
        {
          internalType: "address",
          name: "to",
          type: "address",
        },
        {
          internalType: "uint256",
          name: "tokenId",
          type: "uint256",
        },
      ],
      name: "approve",
      outputs: [],
      stateMutability: "nonpayable",
      type: "function",
    },
    {
      inputs: [
        {
          internalType: "address",
          name: "owner",
          type: "address",
        },
      ],
      name: "balanceOf",
      outputs: [
        {
          internalType: "uint256",
          name: "",
          type: "uint256",
        },
      ],
      stateMutability: "view",
      type: "function",
      constant: true,
    },
    {
      inputs: [],
      name: "baseURI",
      outputs: [
        {
          internalType: "string",
          name: "",
          type: "string",
        },
      ],
      stateMutability: "view",
      type: "function",
      constant: true,
    },
    {
      inputs: [
        {
          internalType: "uint256",
          name: "tokenId",
          type: "uint256",
        },
      ],
      name: "burn",
      outputs: [],
      stateMutability: "nonpayable",
      type: "function",
    },
    {
      inputs: [],
      name: "contractURI",
      outputs: [
        {
          internalType: "string",
          name: "",
          type: "string",
        },
      ],
      stateMutability: "view",
      type: "function",
      constant: true,
    },
    {
      inputs: [
        {
          internalType: "uint256",
          name: "tokenId",
          type: "uint256",
        },
      ],
      name: "getApproved",
      outputs: [
        {
          internalType: "address",
          name: "",
          type: "address",
        },
      ],
      stateMutability: "view",
      type: "function",
      constant: true,
    },
    {
      inputs: [
        {
          internalType: "uint256",
          name: "_id",
          type: "uint256",
        },
      ],
      name: "getCreators",
      outputs: [
        {
          components: [
            {
              internalType: "address payable",
              name: "account",
              type: "address",
            },
            {
              internalType: "uint96",
              name: "value",
              type: "uint96",
            },
          ],
          internalType: "struct LibPart.Part[]",
          name: "",
          type: "tuple[]",
        },
      ],
      stateMutability: "view",
      type: "function",
      constant: true,
    },
    {
      inputs: [
        {
          internalType: "uint256",
          name: "id",
          type: "uint256",
        },
      ],
      name: "getRaribleV2Royalties",
      outputs: [
        {
          components: [
            {
              internalType: "address payable",
              name: "account",
              type: "address",
            },
            {
              internalType: "uint96",
              name: "value",
              type: "uint96",
            },
          ],
          internalType: "struct LibPart.Part[]",
          name: "",
          type: "tuple[]",
        },
      ],
      stateMutability: "view",
      type: "function",
      constant: true,
    },
    {
      inputs: [
        {
          internalType: "address",
          name: "owner",
          type: "address",
        },
        {
          internalType: "address",
          name: "operator",
          type: "address",
        },
      ],
      name: "isApprovedForAll",
      outputs: [
        {
          internalType: "bool",
          name: "",
          type: "bool",
        },
      ],
      stateMutability: "view",
      type: "function",
      constant: true,
    },
    {
      inputs: [
        {
          components: [
            {
              internalType: "uint256",
              name: "tokenId",
              type: "uint256",
            },
            {
              internalType: "string",
              name: "tokenURI",
              type: "string",
            },
            {
              components: [
                {
                  internalType: "address payable",
                  name: "account",
                  type: "address",
                },
                {
                  internalType: "uint96",
                  name: "value",
                  type: "uint96",
                },
              ],
              internalType: "struct LibPart.Part[]",
              name: "creators",
              type: "tuple[]",
            },
            {
              components: [
                {
                  internalType: "address payable",
                  name: "account",
                  type: "address",
                },
                {
                  internalType: "uint96",
                  name: "value",
                  type: "uint96",
                },
              ],
              internalType: "struct LibPart.Part[]",
              name: "royalties",
              type: "tuple[]",
            },
            {
              internalType: "bytes[]",
              name: "signatures",
              type: "bytes[]",
            },
          ],
          internalType: "struct LibERC721LazyMint.Mint721Data",
          name: "data",
          type: "tuple",
        },
        {
          internalType: "address",
          name: "to",
          type: "address",
        },
      ],
      name: "mintAndTransfer",
      outputs: [],
      stateMutability: "nonpayable",
      type: "function",
    },
    {
      inputs: [],
      name: "name",
      outputs: [
        {
          internalType: "string",
          name: "",
          type: "string",
        },
      ],
      stateMutability: "view",
      type: "function",
      constant: true,
    },
    {
      inputs: [],
      name: "owner",
      outputs: [
        {
          internalType: "address",
          name: "",
          type: "address",
        },
      ],
      stateMutability: "view",
      type: "function",
      constant: true,
    },
    {
      inputs: [
        {
          internalType: "uint256",
          name: "tokenId",
          type: "uint256",
        },
      ],
      name: "ownerOf",
      outputs: [
        {
          internalType: "address",
          name: "",
          type: "address",
        },
      ],
      stateMutability: "view",
      type: "function",
      constant: true,
    },
    {
      inputs: [],
      name: "renounceOwnership",
      outputs: [],
      stateMutability: "nonpayable",
      type: "function",
    },
    {
      inputs: [
        {
          internalType: "address",
          name: "from",
          type: "address",
        },
        {
          internalType: "address",
          name: "to",
          type: "address",
        },
        {
          internalType: "uint256",
          name: "tokenId",
          type: "uint256",
        },
      ],
      name: "safeTransferFrom",
      outputs: [],
      stateMutability: "nonpayable",
      type: "function",
    },
    {
      inputs: [
        {
          internalType: "address",
          name: "from",
          type: "address",
        },
        {
          internalType: "address",
          name: "to",
          type: "address",
        },
        {
          internalType: "uint256",
          name: "tokenId",
          type: "uint256",
        },
        {
          internalType: "bytes",
          name: "_data",
          type: "bytes",
        },
      ],
      name: "safeTransferFrom",
      outputs: [],
      stateMutability: "nonpayable",
      type: "function",
    },
    {
      inputs: [
        {
          internalType: "address",
          name: "operator",
          type: "address",
        },
        {
          internalType: "bool",
          name: "approved",
          type: "bool",
        },
      ],
      name: "setApprovalForAll",
      outputs: [],
      stateMutability: "nonpayable",
      type: "function",
    },
    {
      inputs: [
        {
          internalType: "address",
          name: "operator",
          type: "address",
        },
        {
          internalType: "bool",
          name: "hasApproval",
          type: "bool",
        },
      ],
      name: "setDefaultApproval",
      outputs: [],
      stateMutability: "nonpayable",
      type: "function",
    },
    {
      inputs: [
        {
          internalType: "bytes4",
          name: "interfaceId",
          type: "bytes4",
        },
      ],
      name: "supportsInterface",
      outputs: [
        {
          internalType: "bool",
          name: "",
          type: "bool",
        },
      ],
      stateMutability: "view",
      type: "function",
      constant: true,
    },
    {
      inputs: [],
      name: "symbol",
      outputs: [
        {
          internalType: "string",
          name: "",
          type: "string",
        },
      ],
      stateMutability: "view",
      type: "function",
      constant: true,
    },
    {
      inputs: [
        {
          internalType: "uint256",
          name: "index",
          type: "uint256",
        },
      ],
      name: "tokenByIndex",
      outputs: [
        {
          internalType: "uint256",
          name: "",
          type: "uint256",
        },
      ],
      stateMutability: "view",
      type: "function",
      constant: true,
    },
    {
      inputs: [
        {
          internalType: "address",
          name: "owner",
          type: "address",
        },
        {
          internalType: "uint256",
          name: "index",
          type: "uint256",
        },
      ],
      name: "tokenOfOwnerByIndex",
      outputs: [
        {
          internalType: "uint256",
          name: "",
          type: "uint256",
        },
      ],
      stateMutability: "view",
      type: "function",
      constant: true,
    },
    {
      inputs: [
        {
          internalType: "uint256",
          name: "tokenId",
          type: "uint256",
        },
      ],
      name: "tokenURI",
      outputs: [
        {
          internalType: "string",
          name: "",
          type: "string",
        },
      ],
      stateMutability: "view",
      type: "function",
      constant: true,
    },
    {
      inputs: [],
      name: "totalSupply",
      outputs: [
        {
          internalType: "uint256",
          name: "",
          type: "uint256",
        },
      ],
      stateMutability: "view",
      type: "function",
      constant: true,
    },
    {
      inputs: [
        {
          internalType: "address",
          name: "from",
          type: "address",
        },
        {
          internalType: "address",
          name: "to",
          type: "address",
        },
        {
          internalType: "uint256",
          name: "tokenId",
          type: "uint256",
        },
      ],
      name: "transferFrom",
      outputs: [],
      stateMutability: "nonpayable",
      type: "function",
    },
    {
      inputs: [
        {
          components: [
            {
              internalType: "uint256",
              name: "tokenId",
              type: "uint256",
            },
            {
              internalType: "string",
              name: "tokenURI",
              type: "string",
            },
            {
              components: [
                {
                  internalType: "address payable",
                  name: "account",
                  type: "address",
                },
                {
                  internalType: "uint96",
                  name: "value",
                  type: "uint96",
                },
              ],
              internalType: "struct LibPart.Part[]",
              name: "creators",
              type: "tuple[]",
            },
            {
              components: [
                {
                  internalType: "address payable",
                  name: "account",
                  type: "address",
                },
                {
                  internalType: "uint96",
                  name: "value",
                  type: "uint96",
                },
              ],
              internalType: "struct LibPart.Part[]",
              name: "royalties",
              type: "tuple[]",
            },
            {
              internalType: "bytes[]",
              name: "signatures",
              type: "bytes[]",
            },
          ],
          internalType: "struct LibERC721LazyMint.Mint721Data",
          name: "data",
          type: "tuple",
        },
        {
          internalType: "address",
          name: "from",
          type: "address",
        },
        {
          internalType: "address",
          name: "to",
          type: "address",
        },
      ],
      name: "transferFromOrMint",
      outputs: [],
      stateMutability: "nonpayable",
      type: "function",
    },
    {
      inputs: [
        {
          internalType: "address",
          name: "newOwner",
          type: "address",
        },
      ],
      name: "transferOwnership",
      outputs: [],
      stateMutability: "nonpayable",
      type: "function",
    },
    {
      inputs: [
        {
          internalType: "uint256",
          name: "_id",
          type: "uint256",
        },
        {
          internalType: "address",
          name: "_from",
          type: "address",
        },
        {
          internalType: "address",
          name: "_to",
          type: "address",
        },
      ],
      name: "updateAccount",
      outputs: [],
      stateMutability: "nonpayable",
      type: "function",
    },
    {
      inputs: [
        {
          internalType: "string",
          name: "_name",
          type: "string",
        },
        {
          internalType: "string",
          name: "_symbol",
          type: "string",
        },
        {
          internalType: "string",
          name: "baseURI",
          type: "string",
        },
        {
          internalType: "string",
          name: "contractURI",
          type: "string",
        },
      ],
      name: "__ERC721Rarible_init",
      outputs: [],
      stateMutability: "nonpayable",
      type: "function",
    },
  ],
  networks: {
    "1": {
      address: "0xF6793dA657495ffeFF9Ee6350824910Abc21356C",
    },
    "3": {
      address: "0xB0EA149212Eb707a1E5FC1D2d3fD318a8d94cf05",
    },
    "4": {
      address: "0x6ede7F3c26975AAd32a475e1021D8F6F39c89d82",
    },
    "18": {
      address: "0x22f8CE349A3338B15D7fEfc013FA7739F5ea2ff7",
    },
  },
};

'''
'''--- next-env.d.ts ---
/// <reference types="next" />
/// <reference types="next/types/global" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/basic-features/typescript for more information.

'''
'''--- package.json ---
{
  "name": "ceramic-starter",
  "description": "Boilerplate for Ceramic-based dApp",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "export": "next export",
    "clean": "rm -rf ./.next ./out"
  },
  "dependencies": {
    "@ceramicnetwork/blockchain-utils-linking": "^1.2.0",
    "@ceramicnetwork/stream-tile": "^1.3.1",
    "@rarible/protocol-ethereum-sdk": "^0.3.2",
    "@rarible/web3-ethereum": "^0.3.0",
    "@tailwindcss/forms": "^0.3.3",
    "@walletconnect/web3-provider": "^1.6.5",
    "@web-std/fetch": "^2.0.3",
    "@web-std/file": "^1.1.3",
    "bignumber.js": "^9.0.1",
    "ethers": "^5.4.7",
    "multiparty": "^4.2.2",
    "next": "11.1.2",
    "nft-did-resolver": "^0.2.1",
    "react": "17.0.2",
    "react-dom": "17.0.2",
    "react-file-input": "^0.2.5",
    "uint8arrays": "^3.0.0",
    "use-ceramic": "1.0.0",
    "web3": "^1.5.2",
    "web3.storage": "^3.3.2",
    "web3modal": "^1.9.4"
  },
  "devDependencies": {
    "@types/multiparty": "^0.0.33",
    "@types/react": "17.0.20",
    "@types/react-file-input": "^0.0.10",
    "autoprefixer": "^10.3.4",
    "postcss": "^8.3.6",
    "prettier": "^2.4.0",
    "tailwindcss": "^2.2.15",
    "typescript": "4.4.2"
  }
}

'''
'''--- pages/api/persist.ts ---
// Next.js API route support: https://nextjs.org/docs/api-routes/introduction
import type { NextApiRequest, NextApiResponse } from "next";
import multiparty from "multiparty";
import { Web3Storage } from "web3.storage";
import * as fs from "fs";
import { File, Blob } from "@web-std/file";

type CidResponse = {
  cid: string;
};

type Form = {
  fields: any;
  files: any;
};

function parseForm(req: NextApiRequest): Promise<Form> {
  const form = new multiparty.Form();
  return new Promise<Form>((resolve, reject) => {
    form.parse(req, (err, fields, files) => {
      if (err) {
        reject(err);
      } else {
        resolve({
          fields: fields,
          files: files,
        });
      }
    });
  });
}

function getWeb3Token(): string {
  const token = process.env.WEB3STORAGE_TOKEN;
  if (!token) throw new Error(`Misconfigured: web3.storage token`);
  return token;
}

const web3Storage = new Web3Storage({ token: getWeb3Token() });

async function handler(req: NextApiRequest, res: NextApiResponse<CidResponse>) {
  const form = await parseForm(req);
  const file = form.files.file[0];
  const name = file.originalFilename;

  const f = new File([fs.readFileSync(file.path)], name);
  const cid = await web3Storage.put([f], { wrapWithDirectory: false });
  res.status(200).json({ cid: cid.toString() });
}

// first we need to disable the default body parser
export const config = {
  api: {
    bodyParser: false,
  },
};
export default handler;

'''
'''--- postcss.config.js ---
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

'''
'''--- public/logo-ceramic.svg ---
<svg width="1161" height="300" viewBox="0 0 1161 300" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M435.167 200.485C410.089 200.485 394.031 179.587 394.031 150.769C394.031 121.951 410.089 101.492 434.728 101.492C452.986 101.492 466.405 112.932 471.245 130.97L505.562 124.811C498.963 92.9131 471.025 71.7947 434.068 71.7947C388.531 71.7947 358.613 103.912 358.613 150.989C358.613 198.065 388.751 230.183 434.728 230.183C471.685 230.183 499.183 209.504 506.442 177.167L472.125 171.007C467.065 189.046 453.426 200.485 435.167 200.485Z" fill="black"/>
<path d="M625.719 172.767C625.719 139.33 603.941 114.032 570.064 114.032C536.626 114.032 513.528 138.45 513.528 171.887C513.528 205.765 537.066 230.183 570.724 230.183C593.602 230.183 613.62 219.624 622.86 196.965L592.062 191.246C587.882 199.605 580.183 203.125 571.164 203.125C558.185 203.125 547.625 195.205 546.085 181.786H625.059C625.499 178.927 625.719 175.847 625.719 172.767ZM546.965 158.688C548.945 146.589 558.844 139.55 569.844 139.55C580.843 139.55 590.962 146.589 592.282 158.688H546.965Z" fill="black"/>
<path d="M708.737 114.032C690.259 114.032 679.48 117.551 669.14 134.27V116.231H635.043V227.983H669.14V175.627C669.14 151.209 684.099 143.509 699.498 143.509C702.578 143.509 705.658 143.729 708.737 144.389V114.032Z" fill="black"/>
<path d="M757.799 114.032C735.36 114.032 713.802 126.791 708.962 149.009L739.76 154.288C740.64 146.589 747.46 140.65 756.699 140.65C766.818 140.65 772.978 146.809 772.978 154.728V157.808C747.9 157.808 706.323 163.088 706.323 196.085C706.323 216.544 722.161 230.183 741.74 230.183C754.499 230.183 765.718 225.563 772.978 215.224V227.983H807.075V157.368C807.075 129.21 784.857 114.032 757.799 114.032ZM772.978 182.666C772.978 195.205 764.178 205.545 752.299 205.545C744.16 205.545 739.54 201.365 739.54 195.205C739.54 180.686 765.498 180.027 772.978 180.027V182.666Z" fill="black"/>
<path d="M951.68 114.032C937.161 114.032 923.962 119.971 916.702 133.17C910.763 120.851 899.324 114.032 885.685 114.032C873.366 114.032 861.706 119.751 854.887 130.75V116.231H820.79V227.983H854.887V169.907C854.887 157.588 858.187 144.389 872.926 144.389C884.585 144.389 888.544 152.529 888.544 163.528V227.983H922.642V169.907C922.642 157.588 925.282 144.389 939.801 144.389C951.46 144.389 955.639 152.529 955.639 163.528V227.983H989.737V156.488C989.737 132.07 976.978 114.032 951.68 114.032Z" fill="black"/>
<path d="M1020.85 102.152C1032.07 102.152 1040.87 93.3531 1040.87 82.1339C1040.87 70.9148 1032.07 62.1155 1020.85 62.1155C1009.63 62.1155 1000.83 70.9148 1000.83 82.1339C1000.83 93.3531 1009.63 102.152 1020.85 102.152ZM1038.01 227.983V116.231H1003.91V227.983H1038.01Z" fill="black"/>
<path d="M1106.17 201.585C1089.46 201.585 1082.64 186.846 1082.64 172.107C1082.64 157.148 1089.68 142.849 1106.17 142.849C1117.61 142.849 1125.97 150.549 1128.17 161.548L1160.51 155.828C1156.77 129.87 1131.47 114.032 1106.61 114.032C1072.96 114.032 1048.32 138.23 1048.32 172.107C1048.32 205.985 1072.74 230.183 1106.61 230.183C1131.47 230.183 1156.77 214.564 1160.51 188.386L1128.17 182.666C1125.97 193.885 1117.61 201.585 1106.17 201.585Z" fill="black"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M164.4 3.80101C169.071 6.42828 172.936 10.2778 175.578 14.935C190.462 41.1707 205.753 62.1229 221.45 77.7917C237.072 93.3853 258.003 108.643 284.242 123.565L285.039 124.017C299.198 132.032 304.166 149.988 296.136 164.121C293.499 168.762 289.647 172.599 284.993 175.223C259.059 189.844 238.202 204.926 222.421 220.469C206.469 236.18 190.902 257.425 175.72 284.203L175.26 285.016C169.907 294.502 160.07 299.882 149.895 300L149.895 0.0073948C154.815 -0.00337291 159.807 1.21768 164.4 3.80101Z" fill="#FF3600"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M185.14 113.288L185.735 113.872L185.969 114.104L186.204 114.337C205.815 133.635 206.041 165.147 186.708 184.723L186.465 184.967L186.22 185.21L185.914 185.513L185.608 185.819C175.783 195.682 162.872 200.619 149.957 200.619L149.957 99.1009C162.648 99.0878 175.341 103.818 185.14 113.288Z" fill="#FFB08A"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M135.577 3.79369C130.905 6.42095 127.041 10.2705 124.398 14.9277C109.514 41.1633 94.2236 62.1156 78.5264 77.7843C62.9045 93.3779 41.9739 108.636 15.7348 123.558L14.9381 124.01C0.779254 132.025 -4.18907 149.98 3.84099 164.113C6.47788 168.754 10.3295 172.592 14.9836 175.216C40.9175 189.837 61.7748 204.918 77.5555 220.461C93.5076 236.172 109.075 257.417 124.256 284.195L124.716 285.008C130.07 294.495 139.907 299.875 150.082 299.993L150.082 7.0582e-05C145.161 -0.0106971 140.17 1.21035 135.577 3.79369Z" fill="#FFB08A"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M114.844 113.282L114.25 113.866L114.016 114.099L113.78 114.332C94.1691 133.629 93.9435 165.142 113.276 184.718L113.519 184.962L113.764 185.205L114.07 185.508L114.376 185.813C124.201 195.677 137.113 200.614 150.027 200.614L150.027 99.0955C137.337 99.0824 124.643 103.813 114.844 113.282Z" fill="#FF3600"/>
</svg>

'''
'''--- public/vercel.svg ---
<svg width="283" height="64" viewBox="0 0 283 64" fill="none" 
    xmlns="http://www.w3.org/2000/svg">
    <path d="M141.04 16c-11.04 0-19 7.2-19 18s8.96 18 20 18c6.67 0 12.55-2.64 16.19-7.09l-7.65-4.42c-2.02 2.21-5.09 3.5-8.54 3.5-4.79 0-8.86-2.5-10.37-6.5h28.02c.22-1.12.35-2.28.35-3.5 0-10.79-7.96-17.99-19-17.99zm-9.46 14.5c1.25-3.99 4.67-6.5 9.45-6.5 4.79 0 8.21 2.51 9.45 6.5h-18.9zM248.72 16c-11.04 0-19 7.2-19 18s8.96 18 20 18c6.67 0 12.55-2.64 16.19-7.09l-7.65-4.42c-2.02 2.21-5.09 3.5-8.54 3.5-4.79 0-8.86-2.5-10.37-6.5h28.02c.22-1.12.35-2.28.35-3.5 0-10.79-7.96-17.99-19-17.99zm-9.45 14.5c1.25-3.99 4.67-6.5 9.45-6.5 4.79 0 8.21 2.51 9.45 6.5h-18.9zM200.24 34c0 6 3.92 10 10 10 4.12 0 7.21-1.87 8.8-4.92l7.68 4.43c-3.18 5.3-9.14 8.49-16.48 8.49-11.05 0-19-7.2-19-18s7.96-18 19-18c7.34 0 13.29 3.19 16.48 8.49l-7.68 4.43c-1.59-3.05-4.68-4.92-8.8-4.92-6.07 0-10 4-10 10zm82.48-29v46h-9V5h9zM36.95 0L73.9 64H0L36.95 0zm92.38 5l-27.71 48L73.91 5H84.3l17.32 30 17.32-30h10.39zm58.91 12v9.69c-1-.29-2.06-.49-3.2-.49-5.81 0-10 4-10 10V51h-9V17h9v9.2c0-5.08 5.91-9.2 13.2-9.2z" fill="#000"/>
</svg>
'''
'''--- styles/Home.module.css ---
.verbatim {
  font-style: italic;
}

.container {
  min-height: 100vh;
  padding: 0 0.5rem;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  height: 100vh;
}

.main {
  padding: 5rem 0;
  flex: 1;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}

.title a {
  color: #0070f3;
  text-decoration: none;
}

.title a:hover,
.title a:focus,
.title a:active {
  text-decoration: underline;
}

.title {
  margin: 0;
  line-height: 1.15;
  font-size: 4rem;
}

.title,
.description {
  text-align: center;
}

.description {
  line-height: 1.5;
  font-size: 1.5rem;
}

.code {
  background: #fafafa;
  border-radius: 5px;
  padding: 0.75rem;
  font-size: 1.1rem;
  font-family: Menlo, Monaco, Lucida Console, Liberation Mono, DejaVu Sans Mono,
    Bitstream Vera Sans Mono, Courier New, monospace;
}

.grid {
  display: flex;
  align-items: center;
  justify-content: center;
  flex-wrap: wrap;
  max-width: 800px;
  margin-top: 3rem;
}

.card {
  margin: 1rem;
  padding: 1.5rem;
  text-align: left;
  color: inherit;
  text-decoration: none;
  border: 1px solid #eaeaea;
  border-radius: 10px;
  transition: color 0.15s ease, border-color 0.15s ease;
  width: 45%;
}

.card:hover,
.card:focus,
.card:active {
  color: #0070f3;
  border-color: #0070f3;
}

.card h2 {
  margin: 0 0 1rem 0;
  font-size: 1.5rem;
}

.card p {
  margin: 0;
  font-size: 1.25rem;
  line-height: 1.5;
}

.logo {
  width: 30vw;
  margin-bottom: 2rem;
  @apply text-center text-6xl;
}

.main p {
  margin: 0 0 1rem;
}

.main a {
  color: #0070f3;
  text-decoration: underline;
}

.main button {
  border: none;
  color: rgba(0, 0, 0, 0.8);
  background: white;
  box-shadow: rgba(0, 0, 0, 0.05) 0 6px 24px 0, rgba(0, 0, 0, 0.08) 0 0 0 1px;
  padding: 0.5rem 1.5rem;
  font-size: inherit;
  border-radius: 0.5rem;
}

@keyframes pulse {
  0% {
    opacity: 0.2;
  }
  50% {
    opacity: 0.8;
  }
  100% {
    opacity: 0.2;
  }
}

.main button:disabled {
  animation: pulse 1.5s infinite ease-in-out;
}

.main button:hover {
  box-shadow: rgba(0, 0, 0, 0.16) 0 10px 36px 0, rgba(0, 0, 0, 0.06) 0 0 0 1px;
  cursor: inherit;
}

.main button:disabled:hover {
  /* Vanilla shadow*/
  box-shadow: rgba(0, 0, 0, 0.05) 0 6px 24px 0, rgba(0, 0, 0, 0.08) 0 0 0 1px;
}

.main button:active {
  box-shadow: none;
  margin-top: -2px;
  border: 1px solid rgba(0, 0, 0, 0.05);
}

'''
'''--- styles/globals.css ---
@tailwind base;
@tailwind components;
@tailwind utilities;

hr {
  width: 100%;
  border: none;
  border-top: 1px solid #f53825;
  margin-bottom: 1rem;
  margin-top: 0;
}

h1 {
  @apply text-2xl mt-3 font-bold;
}

input[type="text"] {
  @apply mt-1 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md;
}

textarea {
  @apply mt-1 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md;
}

button {
  border: none;
  color: rgba(0, 0, 0, 0.8);
  background: white;
  box-shadow: rgba(0, 0, 0, 0.05) 0 6px 24px 0, rgba(0, 0, 0, 0.08) 0 0 0 1px;
  padding: 0.5rem 1.5rem;
  font-size: inherit;
  border-radius: 0.5rem;
}

button:hover {
  box-shadow: rgba(0, 0, 0, 0.16) 0 10px 36px 0, rgba(0, 0, 0, 0.06) 0 0 0 1px;
}

button:disabled:hover {
  /* Vanilla shadow*/
  box-shadow: rgba(0, 0, 0, 0.05) 0 6px 24px 0, rgba(0, 0, 0, 0.08) 0 0 0 1px;
}

button:active {
  box-shadow: none;
  margin-top: -2px;
  border: 1px solid rgba(0, 0, 0, 0.05);
}

'''
'''--- styles/layout.module.css ---
.layoutContainer {
  @apply container mx-auto mt-2;
}

.topMenuLine {
  @apply flex;
  border-bottom: 1px solid #f53825;
  line-height: 2.5rem;
}

.topMenu {
  @apply flex ml-6;
  line-height: 2.5rem;
}

.topMenu li a {
  @apply block px-4;
}

.topMenu li a:hover {
  @apply bg-gray-100 rounded-t;
}

.topMenu li a.active {
  @apply font-bold -mb-3;
  border-bottom: 3px solid #f53825;
}

'''
'''--- styles/mint.module.css ---
.inputGroup {
  @apply col-span-6 sm:col-span-4 mt-3;
}

.inputTextLabel {
  @apply block text-sm font-medium text-gray-700 pl-0.5 mt-1;
}

.disabledForm input,
.disabledForm label,
.disabledForm textarea {
  @apply opacity-60;
}

@keyframes pulse {
  0% {
    opacity: 0.2;
  }
  50% {
    opacity: 0.8;
  }
  100% {
    opacity: 0.2;
  }
}

.disabledForm button:disabled {
  animation: pulse 1.5s infinite ease-in-out;
  cursor: inherit;
}

.pulsation {
  animation: pulse 1.5s infinite ease-in-out;
}

.disabledForm button:disabled:hover {
  /* Vanilla shadow*/
  box-shadow: rgba(0, 0, 0, 0.05) 0 6px 24px 0, rgba(0, 0, 0, 0.08) 0 0 0 1px;
}

.disabledForm button:active {
  box-shadow: none;
  margin-top: -2px;
  border: 1px solid rgba(0, 0, 0, 0.05);
}

'''
'''--- tailwind.config.js ---
module.exports = {
  purge: ["./pages/**/*.{js,ts,jsx,tsx}", "./components/**/*.{js,ts,jsx,tsx}"],
  darkMode: false, // or 'media' or 'class'
  theme: {
    extend: {},
  },
  variants: {
    extend: {},
  },
  plugins: [require("@tailwindcss/forms")],
};

'''
'''--- tsconfig.json ---
{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve"
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx"],
  "exclude": ["node_modules"]
}

'''