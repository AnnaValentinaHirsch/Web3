*GitHub Repository "Musti2735/NEAR-Poject-FootballPlayer"*

'''--- README.md ---
Footbal Player
==============

The project is about choosing a random football player from a football team entered by the user.
Firstly, users select a team and deposit minumum 2 near. 
When call the contract, the user is given a random player from the selected team.

## Get Started
==============

Install yarn (package manager) from terminal like this:
install -g yarn

INSTALL `NEAR CLI` first like this: `npm i -g near-cli`
npm i -g near-cli

clone this repo to a local folder:
git clone https://github.com/Musti2735/NEAR-Poject-FootballPlayer

Then install dependencies and node modules using yarn package manager :
yarn

run yarn build:release

run near dev-deploy ./build/release/simple.wasm

export CONTRACT=dev-####-####

or RUN

./scripts/1.dev-deploy.sh

## Usage
==============

There are 3 teams on the project. Manchester United, Paris Saint Germen and Liverpool.
There are 3 football palyers in each teams.(Teams and players could be more) 
 
Select a team. There are ony 3 teams you can chose.('PSG', 'MANU', 'LIVERPOOL')
You must write one of this teams on the value of 'team' parameter.
Add your testnet account.
Make sure to attach 2 NEAR. If near amount is less 2 near, assert code runs.

It must be like that : 
"near call $CONTRACT getPlayer '{"team":"####"}' --accountId ####.testnet --amount #"

For example : 
"near call $CONTRACT getPlayer '{"team":"PSG"}' --accountId mycodebag.testnet --amount 2"

or RUN

./scripts/2.getContract.sh

Finally, selected player adds the storage.

You can see your selected random player on terminal and storage using from https://github.com/near-examples/near-account-utils repostories.

'''
'''--- as-pect.config.js ---
module.exports = require("near-sdk-as/imports");
module.exports.include.push("**/*.unit.spec.ts");

'''
'''--- asconfig.json ---
{
  "workspaces": [
    "src/simple"
  ]
}

'''
'''--- package.json ---
{
  "name": "footballPlayer",
  "version": "0.0.1",
  "description": "Start with a basic project",
  "scripts": {
    "dev": "watch -d -n 1 'clear && yarn test'",
    "test": "yarn asp -f unit.spec",
    "clean": "rm -rf ./build && rm -rf ./neardev",
    "build": "asb --target debug",
    "build:release": "asb",
    "asp": "asp --verbose --nologo"
  },
  "keywords": [],
  "author": "av.mustafaturk@hotmail.com",
  "license": "ISC",
  "devDependencies": {
    "near-sdk-as": "^3.1.0"
  }
}

'''
'''--- scripts/1.dev-deploy.sh ---
#!/usr/bin/env bash

# exit on first error after this point to avoid redeploying with successful build
set -e

echo
echo ---------------------------------------------------------
echo "Step 1: Build the contract (may take a few seconds)"
echo ---------------------------------------------------------
echo
echo
yarn build:release

echo
echo
echo ---------------------------------------------------------
echo "Step 2: Deploy the contract"
echo
echo ---------------------------------------------------------
echo

# uncomment out the line below to deploy the other example contract
# near dev-deploy ./build/debug/simple.wasm

# comment the line below to deploy the other example contract
near dev-deploy ./build/release/simple.wasm

echo
echo
echo ---------------------------------------------------------
echo "Step 3: Prepare your environment for next steps"
echo 
echo 'export CONTRACT=<dev-123-456>'
echo 'export OWNER=your.testnet'
echo
echo "Next Step"
echo "./scripts/2.getContract.sh"
echo "It must be 2 parameters. First is team like Liverpool, Manu, Psg. Second is deposit"
echo "For example './scripts/2.getContract.sh Liverpool 2'"
echo
echo --------------------------------------------------------
echo
echo
exit 0
'''
'''--- scripts/2.getContract.sh ---
#!/usr/bin/env bash

# exit on first error after this point to avoid redeploying with successful build
set -e

echo
echo ---------------------------------------------------------
echo "Step 0: Check for environment variable with contract name"
echo ---------------------------------------------------------
echo

[ -z "$CONTRACT" ] && echo "Missing \$CONTRACT environment variable" && exit 1
[ -z "$CONTRACT" ] || echo "Found it! \$CONTRACT is set to [ $CONTRACT ]"
[ -z "$OWNER" ] || echo "Found it! \$OWNER is set to [ $OWNER ]"

echo "near call \$CONTRACT getPlayer '{\"team\":"\$1"}' --accountId \$OWNER --amount \$2"
echo 
echo 
echo \$CONTRACT is $CONTRACT
echo \$OWNER is $OWNER
echo \$1 = $1 '(Team)'
echo \$2 = $2 '(Minumum 2 Near)'
echo
echo ---------------------------------------------------------
near call $CONTRACT getPlayer '{"team":"'"$1"'"}' --accountId $OWNER --amount "'$2'"
echo ---------------------------------------------------------
echo 

exit 

'''
'''--- scripts/3.cleanup.sh ---
#!/usr/bin/env bash

# exit on first error after this point to avoid redeploying with successful build
set -e

echo
echo ---------------------------------------------------------
echo "Step 0: Check for required environment variables"
echo ---------------------------------------------------------
echo

[ -z "$CONTRACT" ] && echo "Missing \$CONTRACT environment variable" && exit 1
[ -z "$CONTRACT" ] || echo "Found it! \$CONTRACT is set to [ $CONTRACT ]"

echo
echo
echo ---------------------------------------------------------
echo "Step 1: Delete $CONTRACT"
echo ---------------------------------------------------------
echo
near delete $CONTRACT 

echo
echo ---------------------------------------------------------
echo "Step 2: Clean up project folders"
echo ---------------------------------------------------------
echo
yarn clean

exit 0

'''
'''--- src/as_types.d.ts ---
/// <reference types="near-sdk-as/assembly/as_types" />
'''
'''--- src/simple/asconfig.json ---
{
  "extends": "near-sdk-as/asconfig.json"
}

'''
'''--- src/simple/assembly/index.ts ---
import { context, logging, u128, RNG} from 'near-sdk-core';
import { GetPlayer, vec, Player} from './model';

export function getPlayer(team:string): void {
  const price = new GetPlayer(team); // Creating a new selection with our team parameter
  assert(
    context.attachedDeposit >= u128.from("2000000000000000000000000"), //Creating a warning for attached deposit
    "YOU HAVE TO ATTACH MINUMUM 2 NEAR"
  );
  assert(team.length>0, "You must enter a team !")
  // condition statements according to the selected team
  let enteredTeam = team.toUpperCase()
  if (enteredTeam=="LIVERPOOL"){
    let itemLiv = liverpool[rand] 
    logging.log("You have selected Liverpool ! ")
    vec.push(itemLiv);  // write the given value at the given key to account (contract) storage
    logging.log(`Seleceted item added storage : ${itemLiv.name} from ${itemLiv.club}`) //show the selected item to user
  }
  else if (enteredTeam=="PSG"){
    let itemPSG = paris[rand]
    logging.log("You have selected PSG")
    vec.push(itemPSG);  
    logging.log(`Seleceted item added storage : ${itemPSG.name} from ${itemPSG.club}`) 
  }
  else if (enteredTeam=="MANU"){ 
    let itemManu = manchester[rand]
    logging.log("You have selected Manchester United")
    vec.push(itemManu);  
    logging.log(`Seleceted item added storage : ${itemManu.name} from ${itemManu.club}`) 
  }
  else {
    logging.log("You must select only 'PSG','MANU','LIVERPOOL' !")
  }
}

// create player
 export let messi = new Player("Messi", "PSG", "Argentina")
 export let neymar = new Player("Neymar", "PSG", "Brasil")
 export let verrati = new Player("Verrati", "PSG", "France")
 export let ronaldo = new Player("Ronaldo", "MANU", "Portagal")
 export let pogba = new Player("Pogba","MANU","France")
 export let matic = new Player("Matic","MANU", "Srbia")
 export let salah = new Player("Salah", "LIVERPOOL", "Egypt")
 export let mane = new Player("Mane", "LIVERPOOL", "Senegal")
 export let firmino = new Player("Firmino", "LIVERPOOL", "Brasil")

 // create team
 export let liverpool = [salah, mane, firmino]
 export let manchester = [ronaldo, pogba, matic]
 export let paris = [messi, neymar, verrati]
 
  // using the randomNum() function for random number
 function randomNum(): u32 {
   const rng = new RNG<u32>(1, 3);
   const roll = rng.next();
   return roll
 }
 let rand = randomNum();

 // read the given key from account (contract) storage

 
 

'''
'''--- src/simple/assembly/model.ts ---
import { context, u128, PersistentVector} from "near-sdk-as";

//create contract 
@nearBindgen
export class GetPlayer {
  sender: string;
  team:string;
  premium:boolean;
  constructor(team:string) {
    this.sender = context.sender;
    this.premium = context.attachedDeposit >= u128.from('2000000000000000000000000');
    this.team=team;
  }
}
//creat player class. It has name, club and country propeties.
@nearBindgen
export class Player {
  name: string;
  club : string;
  country : string;
  constructor(name: string, club:string, country:string) {
    this.name = name;
    this.club = club;
    this.country = country;
  }
}

export const vec = new PersistentVector<Player>("s")

'''
'''--- src/tsconfig.json ---
{
  "extends": "../node_modules/assemblyscript/std/assembly.json",
  "include": ["./**/*.ts"]
}

'''
'''--- src/utils.ts ---
import { u128, Context, ContractPromise } from "near-sdk-as";

/**
 * == TYPES ====================================================================
 */

/**
 * Account IDs in NEAR are just strings.
 */
export type AccountId = string;

/**
 * Gas is u64
 */
export type Gas = u64;

/**
 * Amounts, Balances, and Money in NEAR is are u128.
 */

export type Amount = u128;

export type Balance = Amount;

export type Money = Amount;

/**
 * Timestamp in NEAR is a number.
 */
export type Timestamp = u64;

/**
 * == CONSTANTS ================================================================
 *
 * ONE_NEAR = unit of NEAR token in yocto â“ƒ (1e24)
 * XCC_GAS = gas for cross-contract calls, ~5 Tgas (teragas = 1e12) per "hop"
 * MIN_ACCOUNT_BALANCE = 3 NEAR min to keep account alive via storage staking
 *
 * TODO: revist MIN_ACCOUNT_BALANCE after some real data is included b/c this
 *  could end up being much higher
 */

export const ONE_NEAR = u128.from("1000000000000000000000000");
export const XCC_GAS: Gas = 20_000_000_000_000;
export const MIN_ACCOUNT_BALANCE: u128 = u128.mul(ONE_NEAR, u128.from(3));

/**
 * == FUNCTIONS ================================================================
 */

/**
 * @function asNEAR
 * @param amount {u128} - Yocto â“ƒ token quantity as an unsigned 128-bit integer
 * @returns {string}    - Amount in NEAR, as a string
 *
 * @example
 *
 *    asNEAR(7000000000000000000000000)
 *    // => '7'
 */
export function asNEAR(amount: u128): string {
  return u128.div(amount, ONE_NEAR).toString();
}

/**
 * @function toYocto
 * @param amount {number} - Integer to convert
 * @returns {u128}        - Amount in yocto â“ƒ as an unsigned 128-bit integer
 *
 * @example
 *
 *    toYocto(7)
 *    // => 7000000000000000000000000
 */
export function toYocto(amount: number): u128 {
  return u128.mul(ONE_NEAR, u128.from(amount))
}

/**
 * Function to assert that the contract has called itself
 */
export function assert_self(): void {
  const caller = Context.predecessor
  const self = Context.contractName
  assert(caller == self, "Only this contract may call itself");
}

export function assert_single_promise_success(): void {
  const x = ContractPromise.getResults()
  assert(x.length == 1, "Expected exactly one promise result")
  assert(x[0].succeeded, "Expected PromiseStatus to be successful")
}

'''