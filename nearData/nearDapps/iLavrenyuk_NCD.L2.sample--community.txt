*GitHub Repository "iLavrenyuk/NCD.L2.sample--community"*

'''--- .eslintrc.json ---
{
  "env": {
    "node": true,
    "browser": true,
    "es6": true
  },
  "extends": ["plugin:react/recommended", "eslint:recommended", "plugin:prettier/recommended"],
  "parser": "@babel/eslint-parser",
  "parserOptions": {
    "ecmaFeatures": {
      "jsx": true
    },
    "ecmaVersion": 2018,
    "sourceType": "module",
    "requireConfigFile": false
  },
  "plugins": ["react", "react-hooks", "pretty-imports", "prettier"],
  "rules": {
    "prettier/prettier": [
      "error",
      {
        "endOfLine": "auto"
      }
    ],
    "react-hooks/rules-of-hooks": "error",
    "react-hooks/exhaustive-deps": "warn",
    "react/prop-types": 0,
    "no-empty-pattern": 0,
    "no-unused-vars": 2,
    "pretty-imports/sorted": "error",
    "react/no-unescaped-entities": 0
  },
  "settings": {
    "react": {
      "version": "detect"
    }
  }
}

'''
'''--- README.md ---
#  üéì NCD.L2.sample--thanks dapp
This repository contains a complete frontend applications (React) to work with 
<a href="https://github.com/Learn-NEAR/NCD.L1.sample--Communite" target="_blank">NCD.L1.sample--community smart contract</a> targeting the NEAR platform:
1. React (master branch)

The goal of this repository is to make it as easy as possible to get started writing frontend with React for AssemblyScript contracts built to work with NEAR Protocol.

## DEMO:
<a href="https://near-community-react.onrender.com" target="_blank">Open demo</a>

## ‚ö†Ô∏è Warning
Any content produced by NEAR, or developer resources that NEAR provides, are for educational and inspiration purposes only. NEAR does not encourage, induce or sanction the deployment of any such applications in violation of applicable laws or regulations.

![image](https://user-images.githubusercontent.com/48129985/173186440-95a3077f-b494-46a7-9337-c5cbc441e920.png)

## ‚ö°  Usage
I recorded a short video in Loom, where I review "what is do" this project
<a href="https://www.loom.com/share/56e6e53c6ac54fcf8e98f9559dfaa89f" target="_blank">UI walkthrough</a>

To deploy sample--community to your account visit <a href="https://github.com/Learn-NEAR/NCD.L1.sample--Communite" target="_blank">this repo (smart contract deployment instructions are inside):</a> 

After you successfully deployed registry and thanks contracts and you have contract ids, you can input them on a deployed <a href="https://near-community-react.onrender.com" target="_blank">website </a> or you can clone the repo and put contract ids inside .env file :

```
REACT_APP_CONTRACT_ID = "put your smart-contract id here"
```
After you input your values inside .env file, you need to :
1. Install all dependencies 
```
yarn
```
2. Run the project locally
```
yarn start
```
Other commands:

Compiles and minifies for production
```
yarn build
```
Lints and fixes files
```
yarn lint
```

## üëÄ Code walkthrough for Near university students

I recorded a short video in Loom, where I review the code
<a href="https://www.loom.com/share/4ef3ae00c3664606a44f80ea2047fc29" target="_blank">Code walkthrough video</a>

We are using ```near-api-js``` to work with NEAR blockchain. In ``` /services/near.js ``` we are importing classes, functions and configs which we are going to use:
```
import { keyStores, Near, Contract, WalletConnection, utils } from "near-api-js";
```
Then we are connecting to NEAR:
```
// create config for connecting to NEAR
export const config = new Near({
  networkId: 'testnet',
  keyStore: new keyStores.BrowserLocalStorageKeyStore(),
  nodeUrl: 'https://rpc.testnet.near.org',
  walletUrl: 'https://wallet.testnet.near.org',
});
```
and creating wallet connection
```
const getContractID = () => localStorage.getItem('CONTRACT_ID');
const wallet = () => new WalletConnection(config, getContractID()));
```
After this by using API we can use ```wallet``` and call ```signIn()``` and ```signOut()``` functions of wallet object. By doing this, login functionality can now be used in any component. 

And also we in return statement we are returning wallet object, we are doing this to call ``` wallet.getAccountId()``` to show accountId in ``` /components/Dashboard.jsx ```

```wallet``` code :
```
export const signIn = (successUrl) => {
  return wallet().requestSignIn({ contractId: getContractID(), successUrl });
};

export const signOut = () => {
  return wallet().signOut(getContractID());
};
```

To work with smart thanks and registry smart contracts we are loading the contracts inside  ``` /services/near.js:```
```
export const contract = () =>
  new Contract(wallet().account(), getContractID(), {
    viewMethods: ['retrieveMessages'],
    changeMethods: ['deleteAllMessages', 'sendMessage'],
    sender: wallet().account(),
  });
```

and we are creating function to export for each contract function

example of a call with no params: 
```
//function to get all Complaints
export const getComplaints = () => {
  return contract().getComplaints();
};
```

example of call with params 
```
//function to add new complaint
export const addNewComplaint = ({ title, description, category, location }) => {
  return contract().addNewComplaint({ title, description, category, location }, gas);
};
```

Then in ```store/index.jsx``` we are just state all global data and functions from ```services/near.js```:
For example in Header component
```
import { useStore } from '../../store';

export const Header = () => {
  const { accountId } = useStore();
```

and using it to store some state of contracts and to call contracts functions: 
```
import React, { createContext, useContext, useState } from 'react';
import { wallet } from '../services/near';

const StoreContext = createContext();

export const StoreProvider = ({ children }) => {
  const defaultContractId = process.env.REACT_APP_CONTRACT_ID;
  const contractId = localStorage.getItem('CONTRACT_ID');
  !contractId && localStorage.setItem('CONTRACT_ID', defaultContractId);

  const [contractData, setContractData] = useState(contractId ?? defaultContractId);
  const [accountId, setAccountId] = useState(wallet().getAccountId());
  const [searchInput, setSearchInput] = useState('');
  const [apiError, setApiError] = useState();

  const setContractId = (contractId) => {
    localStorage.setItem('CONTRACT_ID', contractId);
    setContractData(contractId);
  };

  const store = {
    contractId: contractData,
    setContractId,
    accountId,
    setAccountId,
    apiError,
    setApiError,
    searchInput,
    setSearchInput,
  };

  return <StoreContext.Provider value={store}>{children}</StoreContext.Provider>;
};

export const useStore = () => useContext(StoreContext);
```

Inside ```/src/pages/CompliantList.jsx``` we have lifecycle hook ``` useEffect() ``` where we are getting all the data from the smart contract
```
const getData = useCallback(async () => {
  try {
    const complaintsData = await getComplaints();
    const ownerComplaints = isOwnerTicket
      ? complaintsData.filter((complaint) => complaint.ticketOwner.match(accountId))
      : complaintsData;
    setComplaints(ownerComplaints);
    setDisplayComplaints(ownerComplaints);
    setVotes(await alreadyVoted(accountId));
  } catch (e) {
    setApiError(e);
  }
  // eslint-disable-next-line react-hooks/exhaustive-deps
}, [accountId, isOwnerTicket, setApiError, contractId]);

useEffect(() => {
  getData();
}, [getData]);
```

And inside components we are using API request from ```services/near.js``` as an example :
```
const onSubmit = async (data) => {
  try {
    const args = { ...data, category: parseInt(data.category) };
    await addNewComplaint(args);
  } catch (error) {
    console.log(error);
  }
};
```

'''
'''--- package.json ---
{
  "name": "near-community",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@hookform/resolvers": "^2.8.5",
    "bn": "^1.0.5",
    "buffer": "^6.0.3",
    "near-api-js": "^0.44.2",
    "react": "^17.0.2",
    "react-dom": "^17.0.2",
    "react-hook-form": "^7.22.5",
    "react-router-dom": "^6.2.1",
    "react-router-hash-link": "^2.4.3",
    "react-scripts": "5.0.0",
    "web-vitals": "^2.1.2",
    "yup": "^0.32.11"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "@babel/core": "^7.16.5",
    "@babel/eslint-parser": "^7.16.5",
    "@babel/preset-react": "^7.16.5",
    "autoprefixer": "^10.4.0",
    "eslint": "^8.5.0",
    "eslint-config-prettier": "^8.3.0",
    "eslint-plugin-prettier": "^4.0.0",
    "eslint-plugin-pretty-imports": "^1.3.0",
    "eslint-plugin-react": "^7.27.1",
    "eslint-plugin-react-hooks": "^4.3.0",
    "postcss": "^8.4.5",
    "prettier": "^2.5.1",
    "tailwindcss": "^3.0.7"
  }
}

'''
'''--- postcss.config.js ---
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};

'''
'''--- public/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>NEAR Community</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

'''
'''--- public/manifest.json ---
{
  "short_name": "NEAR Community",
  "name": "NEAR Community",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

'''
'''--- public/robots.txt ---
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

'''
'''--- src/assets/svg/cross.svg ---
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
  <path d="M20.0303 5.03033C20.3232 4.73744 20.3232 4.26256 20.0303 3.96967C19.7374 3.67678 19.2626 3.67678 18.9697 3.96967L12 10.9393L5.03033 3.96967C4.73744 3.67678 4.26256 3.67678 3.96967 3.96967C3.67678 4.26256 3.67678 4.73744 3.96967 5.03033L10.9393 12L3.96967 18.9697C3.67678 19.2626 3.67678 19.7374 3.96967 20.0303C4.26256 20.3232 4.73744 20.3232 5.03033 20.0303L12 13.0607L18.9697 20.0303C19.2626 20.3232 19.7374 20.3232 20.0303 20.0303C20.3232 19.7374 20.3232 19.2626 20.0303 18.9697L13.0607 12L20.0303 5.03033Z" fill="currentColor" />
</svg>
'''
'''--- src/assets/svg/nearLogo.svg ---
<svg xmlns="http://www.w3.org/2000/svg" width="23" height="22" viewBox="0 0 23 22" fill="none">
  <path d="M18.1529 1.58732L13.6085 8.20587C13.2943 8.6566 13.8986 9.20222 14.3337 8.82266L18.8056 5.00335C18.9264 4.90846 19.0957 4.97963 19.0957 5.14568V17.0781C19.0957 17.2441 18.8781 17.3153 18.7814 17.1967L5.24485 1.30266C4.80975 0.780763 4.18127 0.496094 3.48027 0.496094H2.99682C1.73985 0.496094 0.700439 1.51616 0.700439 2.77344V19.5689C0.700439 20.8262 1.73985 21.8463 3.02099 21.8463C3.81868 21.8463 4.56803 21.443 5.00313 20.755L9.54755 14.1365C9.86179 13.6858 9.25748 13.1401 8.82237 13.5197L4.35048 17.3153C4.22961 17.4102 4.06041 17.339 4.06041 17.1729V5.2643C4.06041 5.09824 4.27796 5.02707 4.37465 5.14568L17.9112 21.0397C18.3463 21.5616 18.999 21.8463 19.6758 21.8463H20.1592C21.4404 21.8463 22.4798 20.8262 22.4798 19.5689V2.77344C22.4556 1.51616 21.4162 0.496094 20.1351 0.496094C19.3374 0.496094 18.588 0.899375 18.1529 1.58732Z" fill="white" />
</svg>
'''
'''--- src/assets/svg/nearName.svg ---
<svg xmlns="http://www.w3.org/2000/svg" width="153" height="40" viewBox="0 0 153 40" fill="none">
  <g clipPath="url(#clip0_12074_140)">
    <path d="M76.5914 8.3006V31.4804C76.5914 31.657 76.4583 31.8336 76.2363 31.8336H73.795C72.6853 31.8336 71.62 31.2597 70.9985 30.3325L59.9903 13.4222L60.3454 21.8553V31.5246C60.3454 31.7012 60.2122 31.8778 59.9903 31.8778H56.7943C56.6168 31.8778 56.4392 31.7453 56.4392 31.5246V8.3006C56.4392 8.124 56.5724 7.94739 56.7943 7.94739H59.1913C60.301 7.94739 61.3663 8.52136 61.9877 9.44856L72.996 26.3146L72.6409 17.8816V8.3006C72.6409 8.124 72.7741 7.94739 72.996 7.94739H76.1919C76.4583 7.94739 76.5914 8.07984 76.5914 8.3006Z" fill="black" />
    <path d="M109.35 31.7895H105.976C105.754 31.7895 105.577 31.5687 105.666 31.348L114.632 8.25645C114.721 8.07984 114.898 7.94739 115.076 7.94739H119.337C119.559 7.94739 119.737 8.07984 119.781 8.25645L128.792 31.348C128.881 31.5687 128.703 31.7895 128.481 31.7895H125.108C124.975 31.7895 124.841 31.7012 124.797 31.5687L117.562 12.5834C117.473 12.3184 117.029 12.3184 116.94 12.5834L109.705 31.5687C109.616 31.7012 109.483 31.7895 109.35 31.7895Z" fill="black" />
    <path d="M152.318 31.2597L145.571 22.6942C149.388 21.9877 151.607 19.4269 151.607 15.4974C151.607 10.9939 148.678 7.94739 143.44 7.94739H134.03C133.763 7.94739 133.541 8.16815 133.541 8.43306C133.541 10.1991 134.962 11.612 136.737 11.612H143.085C146.236 11.612 147.746 13.2015 147.746 15.5415C147.746 17.8816 146.281 19.4711 143.085 19.4711H134.118C133.852 19.4711 133.63 19.6918 133.63 19.9567V31.4363C133.63 31.6129 133.763 31.7895 133.985 31.7895H137.181C137.359 31.7895 137.536 31.657 137.536 31.4363V22.9149H141.221L147.08 30.5091C147.701 31.348 148.678 31.7895 149.743 31.7895H152.184C152.362 31.7895 152.495 31.4804 152.318 31.2597Z" fill="black" />
    <path d="M99.2293 7.94739H84.3593C84.093 7.94739 83.9154 8.124 83.9154 8.38891C83.9154 10.155 85.3802 11.612 87.1557 11.612H99.2293C99.4069 11.612 99.5844 11.4796 99.5844 11.2588V8.25645C99.54 8.07984 99.4069 7.94739 99.2293 7.94739ZM99.2293 28.1249H88.1323C87.9547 28.1249 87.7772 27.9924 87.7772 27.7717V21.8111C87.7772 21.6345 87.9103 21.4579 88.1323 21.4579H98.3859C98.5635 21.4579 98.741 21.3255 98.741 21.1047V18.1024C98.741 17.9258 98.6079 17.7491 98.3859 17.7491H84.4037C84.1373 17.7491 83.9154 17.9699 83.9154 18.2348V31.2597C83.9154 31.5246 84.1373 31.7453 84.4037 31.7453H99.2293C99.4069 31.7453 99.5844 31.6129 99.5844 31.3921V28.3898C99.54 28.2573 99.4069 28.1249 99.2293 28.1249Z" fill="black" />
    <path d="M32.6471 2.03099L24.3022 14.3494C23.7251 15.1883 24.8348 16.2038 25.6338 15.4974L33.8456 8.38889C34.0675 8.21228 34.3783 8.34474 34.3783 8.6538V30.8623C34.3783 31.1713 33.9788 31.3038 33.8012 31.083L8.94385 1.50117C8.14486 0.529825 6.99077 0 5.70351 0H4.81575C2.50757 0 0.598877 1.89854 0.598877 4.2386V35.4982C0.598877 37.8383 2.50757 39.7368 4.86014 39.7368C6.32495 39.7368 7.70098 38.9863 8.49997 37.7058L16.8449 25.3874C17.422 24.5485 16.3123 23.533 15.5133 24.2395L7.30149 31.3038C7.07955 31.4804 6.76883 31.348 6.76883 31.0389V8.87456C6.76883 8.5655 7.16832 8.43304 7.34588 8.6538L32.2032 38.2357C33.0022 39.207 34.2007 39.7368 35.4436 39.7368H36.3313C38.6839 39.7368 40.5926 37.8383 40.5926 35.4982V4.2386C40.5482 1.89854 38.6395 0 36.287 0C34.8221 0 33.4461 0.750585 32.6471 2.03099Z" fill="black" />
  </g>
  <defs>
    <clipPath id="clip0_12074_140">
      <rect width="151.807" height="39.7368" fill="white" transform="translate(0.598877)" />
    </clipPath>
  </defs>
</svg>
'''
'''--- src/constants/formData.js ---
export const formFields = [
  {
    label: 'Compliant title',
    id: 'title',
  },
  {
    label: 'Description',
    id: 'description',
  },
  {
    label: 'Location',
    id: 'location',
  },
];

export const defaultValues = {
  category: 0,
  title: '',
  description: '',
  location: '',
};

'''
'''--- src/index.css ---
@import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@400;500;600;700&display=swap');
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  body {
    font-family: 'Montserrat', sans-serif;
  }

  .page-bg {
    background: url('./assets/img/dashboard-bg-gradient.png') no-repeat center;
    background-size: cover;
    position: fixed;
    height: 100vh;
    width: 100vw;
    z-index: -1;
  }

  .container {
    width: 100%;
  }

  .input-shadow {
    box-shadow: 3px 4px 30px 3px rgba(0, 0, 0, 0.1);
  }
  .pulsing {
    animation: pulsing 1s infinite;
    animation-duration: 1s;
  }
  .pulsing-border {
    animation: pulsing-border 1s infinite;
    animation-duration: 1s;
  }
  @keyframes pulsing {
    from {
      width: 0px;
      height: 0px;
    }
    50% {
      width: 74px;
      height: 37px;
    }
    to {
      width: 0px;
      height: 0px;
    }
  }
  @keyframes pulsing-border {
    from {
      border-width: 0;
    }
    50% {
      border-width: 8px;
    }
    to {
      border-width: 0;
    }
  }
}

.feature-bg-1 {
  background: url(./assets/img/features-1-bg.png) no-repeat right;
  background-size: contain;
}

.feature-bg-2 {
  background: url(./assets/img/features-2-bg.png) no-repeat right;
  background-size: contain;
}

.feature-bg-3 {
  background: url(./assets/img/features-3-bg.png) no-repeat right;
  background-size: contain;
}

.feature-bg-4 {
  background: url(./assets/img/features-4-bg.png) no-repeat right;
  background-size: contain;
}

.card-img {
  background: url(./assets/img/card.png) center no-repeat;
  background-size: cover;
}

'''
'''--- src/index.js ---
import './index.css';
import React from 'react';
import ReactDOM from 'react-dom';
import { App } from './App';

ReactDOM.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
  document.getElementById('root')
);

'''
'''--- src/router/routes.js ---
export const routes = {
  Home: '/',
  Dashboard: '/dashboard',
  CreateCompliant: '/dashboard/create-compliant',
};

'''
'''--- src/services/near.js ---
import BN from 'bn.js';
import { keyStores, Near, WalletConnection, Contract } from 'near-api-js';

const gas = new BN('70000000000000');
const getContractID = () => localStorage.getItem('CONTRACT_ID');

export const config = new Near({
  networkId: 'testnet',
  keyStore: new keyStores.BrowserLocalStorageKeyStore(),
  nodeUrl: 'https://rpc.testnet.near.org',
  walletUrl: 'https://wallet.testnet.near.org',
});

export const wallet = () => new WalletConnection(config, getContractID());

export const signIn = (successUrl) => {
  return wallet().requestSignIn({ contractId: getContractID(), successUrl });
};

export const signOut = () => {
  return wallet().signOut(getContractID());
};

// use new Contract for improve wallet.account().functionCall()
export const contract = () =>
  new Contract(wallet().account(), getContractID(), {
    viewMethods: ['getComplaints', 'hasAlreadyVoted'],
    changeMethods: ['addNewComplaint', 'voteComplaint', 'removeVote'],
    sender: wallet().account(),
  });

export const getComplaints = () => {
  return contract().getComplaints();
};

export const alreadyVoted = (userId) => {
  return contract().hasAlreadyVoted({ accountId: userId });
};

//function to add new complaint
export const addNewComplaint = ({ title, description, category, location }) => {
  return contract().addNewComplaint({ title, description, category, location }, gas);
};

//function to vote
export const voteComplaint = (id) => {
  return contract().voteComplaint({ id });
};

//function to remove vote
export const removeVote = (id) => {
  return contract().removeVote({ id });
};

// export const takeComplaint = ({id}) => {
//   console.log(id)
//   return wallet.account().functionCall({
//       contractId: getContractID(),
//       methodName: "takeComplaint",
//       gas,
//       args: {id}
//   })
// }

// export const finishComplaint = ({id}) => {
//   console.log(id)
//   return wallet.account().functionCall({
//       contractId: getContractID(),
//       methodName: "finishComplaint",
//       gas,
//       args: {id}
//   })
// }

'''
'''--- src/validation/index.js ---
import * as Yup from 'yup';

const text = Yup.string()
  .required('Title is required')
  .min(2, 'Must be at least 2 characters')
  .max(100, 'Title can be up to 100 characters long');

export const createFormSchema = Yup.object({
  title: text,
  description: text,
  location: text,
  category: Yup.number().integer().required(),
});

'''
'''--- tailwind.config.js ---
module.exports = {
  content: ['./src/**/*.{js,jsx,ts,tsx}'],
  darkMode: false, // or 'media' or 'class'
  theme: {
    extend: {
      colors: {
        blue: {
          900: '#212353',
        },
        red: {
          500: '#DB2828',
        },
      },
      width: {
        50: '50px',
        61: '60px',
        64: '64px',
        376: '376px',
      },
      height: {
        30: '30px',
        50: '50px',
        64: '64px',
        140: '140px',
      },
    },
  },
  variants: {
    extend: {},
  },
  plugins: [],
};

'''