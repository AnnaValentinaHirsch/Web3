*GitHub Repository "ahmetkoprulu/Near-Dice-Demo"*

'''--- as-pect.config.js ---
module.exports = require("near-sdk-as/imports");
module.exports.include.push("**/*.unit.spec.ts");

'''
'''--- components/allRoomSkeleton.js ---
function AllRoomsSkeleton({ isMyRoom }) {
  return (
    <div className="w-full h-14 flex mt-5 justify-between items-center">
      <div>
        <div className="w-44 h-4 bg-gray-400 animate-pulse rounded-lg" />
        <div className="flex gap-x-1">
          <div className="w-44 h-4 bg-gray-400 animate-pulse rounded-lg mt-2" />
          <div className="w-10 h-4 bg-gray-400 animate-pulse rounded-lg mt-2" />
        </div>
      </div>
      <div className="flex gap-x-1">
        <div className="w-24 h-6 bg-gray-400 animate-pulse rounded-lg mt-2" />
        {isMyRoom ? (
          <div className="w-24 h-6 bg-gray-400 animate-pulse rounded-lg mt-2" />
        ) : null}
      </div>
    </div>
  );
}

export default AllRoomsSkeleton;

'''
'''--- components/modal.js ---
function Modal({ children, showModal, setShowModal }) {
  return (
    <div
      className={`w-screen h-screen bg-modal-bg absolute left-0 top-0  flex items-center justify-center ${
        !showModal && "hidden"
      }`}
    >
      <div className="w-1/2 h-1/2 bg-white shadow-2xl rounded-lg p-5 opacity-100">
        {children}
      </div>
    </div>
  );
}

export default Modal;

'''
'''--- components/myRoom.js ---
//Next JS import
import Image from "next/image";

//Dependencies import
import { useState } from "react";
import { toast } from "react-toastify";

//Components import
import Modal from "./modal";

//Assets import
import NearLogo from "../public/near.svg";
import { AiOutlineCloseCircle } from "react-icons/ai";

//Near imports
import { wallet, callFunction , viewFunction } from "../near/near-setup";

//Redux import
import { useDispatch } from "react-redux";
import { setAllGames } from "../redux/general/general.actions";

const MyRoom = ({ gameID, gameState, initialBet, gameOwner }) => {
  const [showModal, setShowModal] = useState(false);
  const [currentBet, setCurrentBet] = useState(null);
  const dispatch = useDispatch();

  const handleDelete = async () => {
    if (wallet.getAccountId() !== gameOwner) {
      toast.error("Only the owner can delete a game!", {
        position: "top-right",
        autoClose: 5000,
        hideProgressBar: false,
        closeOnClick: true,
        pauseOnHover: true,
        draggable: true,
        progress: undefined,
      });
      return;
    }
    if (gameState === "JOINED") {
      toast.error("It is not possible to delete this game!", {
        position: "top-right",
        autoClose: 5000,
        hideProgressBar: false,
        closeOnClick: true,
        pauseOnHover: true,
        draggable: true,
        progress: undefined,
      });
      return;
    }

    callFunction("deleteGame", { gameId: gameID })
      .then((res) => {
        viewFunction("viewAllGames", {}).then((newGames) => {
          dispatch(setAllGames(newGames));
          toast.success("Game has been deleted", {
            position: "top-right",
            autoClose: 5000,
            hideProgressBar: false,
            closeOnClick: true,
            pauseOnHover: true,
            draggable: true,
            progress: undefined,
          });
        });
      })
      .catch((err) => {
        console.log(err);
      });
  };

  return (
    <div className="w-full h-14 flex mt-5 justify-between items-center">
      <div>
        <div className="w-44 h-4 ">
          <span className="font-bold">Game ID : {gameID}</span>
        </div>
        <div className="flex gap-x-3 items-center justify-center mt-2 ">
          <div className="min-w-44 rounded-lg ">
            <span className="font-bold">Status : {gameState}</span>
          </div>
          <div className="min-w-10  rounded-lg  flex items-center gap-x-1">
            <span className="font-medium">{initialBet}</span>
            <Image src={NearLogo} alt="Near Tokens" width={10} height={10} />
          </div>
        </div>
      </div>
      <div className="flex gap-x-1">
        <div
          onClick={handleDelete}
          className="min-w-24 h-6 rounded-lg border-2 border-black text-black font-semibold cursor-pointer  mt-2 p-1 flex items-center justify-center transition-all duration-400 hover:border-transparent hover:bg-danger hover:text-white"
        >
          <span>Delete Game</span>
        </div>
        <div
          onClick={() => {
            if (gameState !== "FINISHED") {
              toast.error("Only finished games can be reactivated", {
                position: "top-right",
                autoClose: 5000,
                hideProgressBar: false,
                closeOnClick: true,
                pauseOnHover: true,
                draggable: true,
                progress: undefined,
              });
              return;
            }
            setShowModal(true);
          }}
          className="min-w-24 h-6 rounded-lg border-2 border-black text-black font-semibold cursor-pointer  mt-2 p-1 flex items-center justify-center transition-all duration-400 hover:border-transparent hover:bg-yellow-400  "
        >
          <span>Reactivate Game</span>
        </div>
      </div>
      <Modal setShowModal={setShowModal} showModal={showModal}>
        <div className="flex flex-col justify-between h-full w-full">
          <div className="flex items-center justify-between">
            <div></div>
            <span className="text-black font-bold text-xl opacity-100">
              Reactivate Room
            </span>
            <AiOutlineCloseCircle
              className="text-2xl cursor-pointer"
              onClick={() => {
                setShowModal(false);
              }}
            />
          </div>
          <div className="flex w-full flex-col justify-center items-center">
            <div
              className={`w-1/2 h-10  border-2 border-black rounded-lg flex self-center gap-x-1 transition-all duration-500 ${
                currentBet === null || parseFloat(currentBet) <= 0.0
                  ? "border-danger"
                  : "border-success"
              }`}
            >
              <input
                onChange={(e) => setCurrentBet(e.target.value)}
                type="number"
                placeholder="Enter the new bet"
                className="w-11/12 h-full px-2 focus:outline-none rounded-lg"
              />
              <Image src={NearLogo} alt="Near Tokens" width={15} height={15} />
            </div>
          </div>
          <div className="flex justify-center">
            <div
              onClick={() => {
                if (
                  currentBet == null ||
                  currentBet == "" ||
                  parseFloat(currentBet) <= 0.0
                )
                  return;
                callFunction(
                  "reactivateGame",
                  { gameId: gameID },
                  currentBet
                ).then(() => {
                  toast.success("Game has been created", {
                    position: "top-right",
                    autoClose: 5000,
                    hideProgressBar: false,
                    closeOnClick: true,
                    pauseOnHover: true,
                    draggable: true,
                    progress: undefined,
                  });
                });
              }}
              className={`w-1/2 h-10  bg-black text-white flex justify-center items-center rounded-lg transition-all duration-500  ${
                currentBet == null ||
                currentBet == "" ||
                parseFloat(currentBet) <= 0.0
                  ? "cursor-not-allowed bg-gray-300"
                  : " cursor-pointer"
              } `}
            >
              <span className="font-bold text-xl">Submit</span>
            </div>
          </div>
        </div>
      </Modal>
    </div>
  );
};

export default MyRoom;

'''
'''--- components/room.js ---
//Next JS import
import Image from "next/image";

//Dependencies import
import { useState, useEffect } from "react";

//Components import
import Modal from "./modal";

//Near imports
import { wallet, callFunction, viewFunction } from "../near/near-setup";

//Redux import
import { useDispatch } from "react-redux";
import { setAllGames } from "../redux/general/general.actions";

//Assets import
import NearLogo from "../public/near.svg";
import { AiOutlineCloseCircle } from "react-icons/ai";

function Room({ gameID, gameOwner, initialBet, gamePlayer }) {
  const [currentBet, setCurrentBet] = useState(null);
  const [guess, setGuess] = useState(null);
  const [showModal, setShowModal] = useState(false);
  const [showPlayModal, setShowPlayModal] = useState(false);
  const [result, setResult] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const dispatch = useDispatch();

  useEffect(() => {
    if (guess <= 0) {
      setGuess(1);
    } else if (guess > 6) {
      setGuess(6);
    }
  }, [guess]);

  return (
    <div className="w-full h-14 flex mt-5 justify-between items-center">
      <div>
        <div className="w-44 h-4 ">
          <span className="font-bold">Game ID : {gameID}</span>
        </div>
        <div className="flex gap-x-3 items-center justify-center mt-2 ">
          <div className="min-w-44 rounded-lg ">
            <span className="font-bold">Owner : {gameOwner}</span>
          </div>
          <div className="min-w-10  rounded-lg  flex items-center gap-x-1">
            <span className="font-medium">{initialBet}</span>
            <Image src={NearLogo} alt="Near Tokens" width={10} height={10} />
          </div>
        </div>
      </div>
      <div className="flex gap-x-1">
        <div className="w-24 h-6 rounded-lg border-2 border-black text-black font-semibold cursor-pointer   mt-2 p-1 flex items-center justify-center transition-all duration-300 hover:border-transparent hover:bg-success hover:text-white">
          <span
            onClick={() => {
              if (gamePlayer === wallet.getAccountId()) {
                setShowPlayModal(true);
              } else {
                setShowModal(true);
              }
            }}
          >
            {gamePlayer === wallet.getAccountId() ? "Play Game" : "Join Game"}
          </span>
        </div>
      </div>
      <Modal setShowModal={setShowModal} showModal={showModal}>
        <div className="flex flex-col justify-between h-full w-full">
          <div className="flex items-center justify-between">
            <div></div>
            <span className="text-black font-bold text-xl opacity-100">
              Join a Game
            </span>
            <AiOutlineCloseCircle
              className="text-2xl cursor-pointer"
              onClick={() => {
                setShowModal(false);
              }}
            />
          </div>
          <div className="flex w-full flex-col justify-center items-center">
            <div
              className={`w-1/2 h-10  border-2 border-black rounded-lg flex self-center gap-x-1 transition-all duration-500 ${
                !currentBet || parseFloat(currentBet) <= 0.0
                  ? "border-danger"
                  : "border-success"
              }`}
            >
              <input
                onChange={(e) => setCurrentBet(e.target.value)}
                type="number"
                placeholder="Enter the new bet"
                className="w-11/12 h-full px-2 focus:outline-none rounded-lg"
              />
              <Image src={NearLogo} alt="Near Tokens" width={15} height={15} />
            </div>
          </div>
          <div className="flex justify-center">
            <div
              onClick={() => {
                if (!currentBet || parseFloat(currentBet) <= 0.0) return;
                callFunction("joinGame", { gameId: gameID }, currentBet).then(
                  () => {
                    toast.success("Game has Joined", {
                      position: "top-right",
                      autoClose: 5000,
                      hideProgressBar: false,
                      closeOnClick: true,
                      pauseOnHover: true,
                      draggable: true,
                      progress: undefined,
                    });
                  }
                );
              }}
              className={`w-1/2 h-10  bg-black text-white flex justify-center items-center rounded-lg transition-all duration-500  ${
                !currentBet || parseFloat(currentBet) <= 0.0
                  ? "cursor-not-allowed bg-gray-300"
                  : " cursor-pointer"
              } `}
            >
              <span className="font-bold text-xl">Submit</span>
            </div>
          </div>
        </div>
      </Modal>

      <Modal setShowModal={setShowPlayModal} showModal={showPlayModal}>
        <div className="flex flex-col justify-between h-full w-full">
          <div className="flex items-center justify-between">
            <div></div>
            <span className="text-black font-bold text-xl opacity-100">
              Play Game
            </span>
            <AiOutlineCloseCircle
              className="text-2xl cursor-pointer"
              onClick={() => {
                viewFunction("viewAllGames", {}).then((newGames) => {
                  dispatch(setAllGames(newGames));
                });
                setShowPlayModal(false);
                setIsLoading(false);
                setGuess(null);
                setResult(null);
              }}
            />
          </div>
          <div className="flex w-full flex-col justify-center items-center">
            <div
              className={`w-1/2 h-10  border-2 border-black rounded-lg flex self-center gap-x-1 transition-all duration-500 `}
            >
              <input
                onChange={(e) => {
                  setGuess(parseInt(e.target.value));
                }}
                type="number"
                value={guess}
                placeholder="Enter the guess (1-6)"
                onKeyPress={(e) => {}}
                className="w-full h-full px-2 focus:outline-none rounded-lg"
              />
            </div>
          </div>
          <div className="flex w-full justify-center">
            <span
              className={
                !result
                  ? "hidden"
                  : `block font-bold ${
                      result.includes(wallet.getAccountId())
                        ? "text-success"
                        : "text-danger"
                    } `
              }
            >
              {result}
            </span>
          </div>
          <div className="flex justify-center">
            <div
              onClick={async () => {
                setIsLoading(true);
                if (!guess || guess > 6 || guess <= 0) return;
                callFunction("playGame", {
                  gameId: gameID,
                  guess,
                }).then(() => {
                  viewFunction("viewGame", {
                    gameId: gameID,
                  }).then((res) => {
                    setResult(
                      `The dice number was ${res.winningGuess} , Winner is ${res.winner}`
                    );
                  });
                });
                setIsLoading(false);
              }}
              className={`w-1/2 h-10  bg-black text-white flex justify-center items-center rounded-lg transition-all duration-500  ${
                !guess || guess > 6 || guess <= 0
                  ? "cursor-not-allowed bg-gray-300"
                  : " cursor-pointer"
              } `}
            >
              <span className="font-bold text-xl">
                {isLoading ? "Loading..." : "Submit"}
              </span>
            </div>
          </div>
        </div>
      </Modal>
    </div>
  );
}

export default Room;

'''
'''--- near/near-setup.js ---
import {
  keyStores,
  Near,
  WalletConnection,
  utils as nearUtils,
} from "near-api-js";

export const CONTRACT_ID = "dice.aimensh.testnet";

export const initNear = () => {
  //Testnet config
  const near = new Near({
    networkId: "testnet",
    keyStore: new keyStores.BrowserLocalStorageKeyStore(),
    nodeUrl: "https://rpc.testnet.near.org",
    walletUrl: "https://wallet.testnet.near.org",
  });

  //Wallet init
  wallet = new WalletConnection(near, "Near Dice Game");
};

//Loaded after the being server to the client
//Due to keystore needing access to the window object
export let wallet = null;
export let contract = null;
export const utils = nearUtils;

//Methods

export const signIn = () => {
  wallet.requestSignIn(CONTRACT_ID);
};

export const signOut = () => {
  wallet.signOut();
};

export const viewFunction = async (functionName, args = {}) => {
  const result = await wallet
    .account()
    .viewFunction(CONTRACT_ID, functionName, args);

  return result;
};

export const callFunction = async (functionName, args = {}, deposit = "0") => {
  const result = await wallet.account().functionCall({
    contractId: CONTRACT_ID,
    methodName: functionName,
    args: args,
    attachedDeposit: utils.format.parseNearAmount(deposit),
  });
  return result;
};

'''
'''--- next.config.js ---
module.exports = {
  reactStrictMode: true,
  images: {
    domains: ['miro.medium.com'],
},
}

'''
'''--- pages/_app.js ---
//Importing Css
import "../styles/globals.css";

//Dependencies imports
import { useEffect, useState } from "react";
import ClipLoader from "react-spinners/ClipLoader";

//Near imports
import { initNear, wallet } from "../near/near-setup";

//Redux import
import { wrapper } from "../redux/store";
import { setCurrentUser } from "../redux/general/general.actions";
import { useDispatch } from "react-redux";
import 'react-toastify/dist/ReactToastify.css'

function MyApp({ Component, pageProps }) {
  const [isLoading, setIsLoading] = useState(true);
  const dispatch = useDispatch();

  //Loading the NEAR API and setting up the wallet and contract
  //At the start of the app
  useEffect(() => {
    initNear();
    if (wallet) {
      let user = wallet.getAccountId();
      dispatch(setCurrentUser(user));
    }
    setIsLoading(false);
  }, []);

  return isLoading ? (
    <div className="w-screen h-screen flex justify-center items-center">
      <ClipLoader color={"#000"} loading={true} size={50} />
    </div>
  ) : (
    <Component {...pageProps} />
  );
}

export default wrapper.withRedux(MyApp);

'''
'''--- pages/api/hello.js ---
// Next.js API route support: https://nextjs.org/docs/api-routes/introduction

export default function handler(req, res) {
  res.status(200).json({ name: 'John Doe' })
}

'''
'''--- pages/dashboard.js ---
//Next import
import { useRouter } from "next/router";
import Head from "next/head";
import Image from "next/image";

//Dependencies import
import { useEffect, useState } from "react";

//Redux import
import { useSelector, useDispatch } from "react-redux";
import { setCurrentUser, setAllGames } from "../redux/general/general.actions";

//Near import
import { signOut, viewFunction, callFunction, utils } from "../near/near-setup";

//Component Import
import AllRoomsSkeleton from "../components/allRoomSkeleton";
import Room from "../components/room";
import MyRoom from "../components/myRoom";
import Modal from "../components/modal";

//Assets import
import AvatarImage from "../public/avatar.png";
import NearLogo from "../public/near.svg";
import { CgGames } from "react-icons/cg";
import { MdOutlineGames } from "react-icons/md";
import { BiLogOut } from "react-icons/bi";
import { ToastContainer } from "react-toastify";
import { AiOutlineCloseCircle } from "react-icons/ai";

function Dashboard() {
  const router = useRouter();
  const dispatch = useDispatch();
  const currentUser = useSelector((state) => state.general.currentUser);
  const allGames = useSelector((state) => state.general.allGames);
  const [currentTab, setCurrentTab] = useState(0);
  const [showModal, setShowModal] = useState(false);
  const [currentBet, setCurrentBet] = useState(null);

  useEffect(() => {
    if (!currentUser) {
      router.push("/");
    } else {
      viewFunction("viewAllGames", {}).then((res) => {
        dispatch(setAllGames(res));
      });
    }
  }, [currentUser]);

  return (
    <div className="w-screen h-screen flex">
      <Head>
        <title>Near Dice Game | Dashboard</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <nav className="w-3/12 h-full bg-black flex flex-col py-12 items-center">
        <span className="text-white font-bold text-2xl mb-8">
          Near Dice Game
        </span>
        <div className="rounded-lg w-20 h-20 bg-white relative mb-3">
          <Image
            src={AvatarImage}
            layout="fill"
            objectFit="contain"
            alt="profile-pic"
            width="100%"
            height="100%"
            className="rounded-lg"
          />
        </div>
        <span className="font-semibold text-white mb-10">{currentUser}</span>
        <div
          onClick={() => setCurrentTab(0)}
          className={`flex cursor-pointer justify-center items-center gap-x-2 mb-4 opacity-50 transition-all duration-400 hover:opacity-100 text-white ${
            currentTab === 0
              ? "text-yellow-400 opacity-100 font-bold text-xl"
              : ""
          }`}
        >
          <CgGames />
          <span>All Rooms</span>
        </div>
        <div
          onClick={() => setCurrentTab(1)}
          className={`flex cursor-pointer justify-center items-center gap-x-2 mb-4 opacity-50 transition-all duration-300 hover:opacity-100 text-white ${
            currentTab === 1
              ? "text-yellow-400 opacity-100 font-bold text-xl"
              : ""
          }`}
        >
          <MdOutlineGames />
          <span>My Rooms</span>
        </div>

        <div
          onClick={() => {
            signOut();
            dispatch(setCurrentUser(null));
          }}
          className={`flex font-bold text-xl mt-auto opacity-50 cursor-pointer justify-center items-center gap-x-2 mb-4  transition-all duration-300 hover:opacity-100  text-white 
          `}
        >
          <div className="bg-white  rounded-full p-1 flex justify-center items-center">
            <BiLogOut className="text-red-500 text-xl" />
          </div>
          <span>Sign Out</span>
        </div>
      </nav>

      <section className="w-9/12 py-12 px-8">
        <div className="flex w-full items-center justify-between">
          <span className="font-bold text-2xl ">
            {currentTab === 0 ? "All Rooms" : "My Rooms"}
          </span>
          {currentTab == 1 ? (
            <div
              onClick={() => {
                setShowModal(true);
              }}
              className="min-w-24 h-6 rounded-lg border-2 border-black text-black font-semibold cursor-pointer  mt-2 p-1 flex items-center justify-center  "
            >
              <span>Create Game</span>
            </div>
          ) : null}
        </div>
        {allGames.length > 0 && currentTab === 0 ? (
          allGames
            .filter(
              (game) => game.owner !== currentUser && game.state !== "FINISHED"
            )
            .map((game) => (
              <Room
                key={game.id}
                gameID={game.gameId}
                gameOwner={game.owner}
                gamePlayer={game.player}
                initialBet={utils.format.formatNearAmount(game.startingBet)}
              />
            ))
        ) : allGames.length > 0 && currentTab === 1 ? (
          allGames
            .filter((game) => game.owner === currentUser)
            .map((game) => (
              <MyRoom
                key={game.id}
                gameID={game.gameId}
                gameState={game.state}
                gameOwner={game.owner}
                initialBet={utils.format.formatNearAmount(game.startingBet)}
              />
            ))
        ) : (
          <>
            <AllRoomsSkeleton isMyRoom={currentTab === 1} />
            <AllRoomsSkeleton isMyRoom={currentTab === 1} />
            <AllRoomsSkeleton isMyRoom={currentTab === 1} />
            <AllRoomsSkeleton isMyRoom={currentTab === 1} />
            <AllRoomsSkeleton isMyRoom={currentTab === 1} />
          </>
        )}
        <ToastContainer />
      </section>
      <Modal setShowModal={setShowModal} showModal={showModal}>
        <div className="flex flex-col justify-between h-full w-full">
          <div className="flex items-center justify-between">
            <div></div>
            <span className="text-black font-bold text-xl opacity-100">
              Create a Game
            </span>
            <AiOutlineCloseCircle
              className="text-2xl cursor-pointer"
              onClick={() => {
                setShowModal(false);
              }}
            />
          </div>
          <div className="flex w-full flex-col justify-center items-center">
            <div
              className={`w-1/2 h-10  border-2 border-black rounded-lg flex self-center gap-x-1 transition-all duration-500 ${
                !currentBet || parseFloat(currentBet) <= 0.0
                  ? "border-danger"
                  : "border-success"
              }`}
            >
              <input
                onChange={(e) => setCurrentBet(e.target.value)}
                type="number"
                placeholder="Enter the new bet"
                className="w-11/12 h-full px-2 focus:outline-none rounded-lg"
              />
              <Image src={NearLogo} alt="Near Tokens" width={15} height={15} />
            </div>
          </div>
          <div className="flex justify-center">
            <div
              onClick={() => {
                if (!currentBet || parseFloat(currentBet) <= 0.0) return;
                callFunction("initGame", {}, currentBet).then(() => {
                  toast.success("Game has been created", {
                    position: "top-right",
                    autoClose: 5000,
                    hideProgressBar: false,
                    closeOnClick: true,
                    pauseOnHover: true,
                    draggable: true,
                    progress: undefined,
                  });
                });
              }}
              className={`w-1/2 h-10  bg-black text-white flex justify-center items-center rounded-lg transition-all duration-500  ${
                !currentBet || parseFloat(currentBet) <= 0.0
                  ? "cursor-not-allowed bg-gray-300"
                  : " cursor-pointer"
              } `}
            >
              <span className="font-bold text-xl">Submit</span>
            </div>
          </div>
        </div>
      </Modal>
    </div>
  );
}

export default Dashboard;

'''
'''--- pages/index.js ---
//Next JS imports
import Head from "next/head";
import Image from "next/image";
import { useRouter } from "next/router";

//Dependencies imports
import { useEffect, useState } from "react";
import { GoogleFonts } from "next-google-fonts";

//Assets import
import DiceIllustration from "../public/dice-illustration.svg";

//Redux import
import { useSelector, useDispatch } from "react-redux";
import { setCurrentUser } from "../redux/general/general.actions";

//Near imports
import { signIn, signOut, viewFunction } from "../near/near-setup";

export default function Home() {
  const currentUser = useSelector((state) => state.general.currentUser);
  const dispatch = useDispatch();
  const router = useRouter();

  useEffect(() => {
    const redirect = localStorage.getItem("redirect");

    if (currentUser && redirect) {
      localStorage.removeItem("redirect");
      router.push("/dashboard");
    }
  }, currentUser);

  return (
    <div className="w-screen h-screen">
      <GoogleFonts href="https://fonts.googleapis.com/css2?family=Manrope:wght@300;400;500;700&display=swap" />
      <Head>
        <title>Near Dice Game</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <nav className="w-full px-14 py-4 flex justify-between items-center">
        <div></div>
        <h1 className="font-bold ml-20 text-3xl">Near Dice Game</h1>
        <div
          onClick={() => {
            if (currentUser) {
              router.push("/dashboard");
            } else {
              localStorage.setItem("redirect", true);
              signIn();
            }
          }}
          className=" order-2 border-2 border-black text-black p-1 rounded-xl font-bold cursor-pointer transition-all duration-500  hover:bg-black hover:text-white"
        >
          <span>Get Started</span>
        </div>
      </nav>
      <div className="flex justify-center w-full -mb-32">
        <Image src={DiceIllustration} alt="dice-illustration" width={220} />
      </div>

      <section className="h-4/6 w-full flex flex-col justify-center items-center px-14">
        <span className="font-bold text-xl mb-8">How To Play</span>
        <div className="w-full flex justify-between items-center">
          <div className="flex flex-col gap-y-2 justify-center w-5/12">
            <span className="text-center font-semibold text-lg">Creator</span>
            <p className="text-center font-medium">
              Create a game with setting an initial bet.Share the room id with
              friends, or wait for people to join your room.
              <br />
              Winner takes it all.
            </p>
          </div>
          <div className="flex flex-col gap-y-2 justify-center w-1/2">
            <span className="text-center text-lg font-semibold">Player</span>
            <p className="text-center font-medium">
              Join any available room, or create your own. Try to guess the
              correct dice number to win.
              <br />
              May the odds be in your favor
            </p>
          </div>
        </div>
      </section>
    </div>
  );
}

'''
'''--- postcss.config.js ---
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

'''
'''--- redux/general/general.actions.js ---
export const setCurrentUser = (currentUser) => {
  return {
    type: "SET_CURRENT_USER",
    payload: currentUser,
  };
};

export const setAllGames = (allGames) => {
  return {
    type: "SET_ALL_GAMES",
    payload: allGames,
  };
};

'''
'''--- redux/general/general.js ---
const INITIAL_STATE = {
  currentUser: null,
  allGames: [],
};

const generalReducer = (state = INITIAL_STATE, action) => {
  switch (action.type) {
    case "SET_CURRENT_USER":
      return {
        ...state,
        currentUser: action.payload,
      };
    case "SET_ALL_GAMES":
      return {
        ...state,
        allGames: action.payload,
      };
    default:
      return state;
  }
};

export default generalReducer;

'''
'''--- redux/root-reducer.js ---
//Dependencies import
import { combineReducers } from "redux";

//Reducers import
import generalReducer from "./general/general";

const rootReducer = combineReducers({
  general: generalReducer,
});

export default rootReducer;

'''
'''--- redux/store.js ---
import { createStore, applyMiddleware } from "redux";
import { createWrapper } from "next-redux-wrapper"
import rootReducer from "./root-reducer";

const middleWares = [];

export const store = () =>  createStore(rootReducer, applyMiddleware(...middleWares));

export const wrapper = createWrapper(store);
'''
'''--- tailwind.config.js ---
module.exports = {
  content: [
    "./pages/**/*.{js,ts,jsx,tsx}",
    "./components/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {
      colors: {
        "near-blue": "#5F8AFA",
        success: "#218838",
        danger: "#DC3545",
        "modal-bg": "rgba(0,0,0,0.4)",
      },
    },
  },
  plugins: [],
};

'''