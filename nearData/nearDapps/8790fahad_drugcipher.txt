*GitHub Repository "8790fahad/drugcipher"*

'''--- public/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <link rel="stylesheet" href="https://unpkg.com/aos@next/dist/aos.css" />
    <meta charset="utf-8" />
    <!-- <link rel="icon" type="image/x-icon" href="DRUG CIPHER.png"> -->
    <link
      rel="icon"
      href="%PUBLIC_URL%/favicon.png"
      style="border-radius: 10px"
    />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>DrugCipher</title>
  </head>
  <body
    style="
      font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS',
        sans-serif;
      background-color: rgb(250, 250, 250);
    "
  >
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

'''
'''--- public/robots.txt ---
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

'''
'''--- src/App.js ---
import React, { useEffect } from "react";
import "./App.css";
import AppNavigation from "./Routes/AppNavigation";
import { useNavigate } from "react-router-dom";
import { useDispatch } from "react-redux";
import { useCallback } from "react";
import { _fetchApi } from "./utils/helper";
import { NotificationError } from "./utils/Notification";
import { toast } from "react-toastify";
const { useLocation } = require("react-router");
const App = function AppWrapper() {
  const navigate = useNavigate();
  const dispatch = useDispatch();
  const location = useLocation();
  const recover = useCallback(() => {
    const token = localStorage.getItem("@@cipher");
    const _token = token?.split(" ");
    console.log(token);
    if (token !== null) {
      _fetchApi(
        `/v1/load-with-token?token=${_token[1]}`,
        (resp) => {
          console.log(resp);
          console.log("resp");
          if (resp.success && Object.keys(resp.info)) {
            dispatch({ type: "RECOVER_ACCOUNT", payload: resp });
            // navigate("/registered-drugs");
            console.log(resp);
          } else {
            if (
              location.pathname === "/account/passphrass" ||
              location.pathname === "/KYCApproval" 
              
            ) {
            } else {
              navigate("/");
            }
          }
        },
        (err) => {
          if (
            location.pathname === "/account/passphrass" ||
            location.pathname === "/KYCApproval" 
          ) {
          } else {
            toast(<NotificationError text="Failed, try again" />);
            console.log(err);
          }

          // navigate("/");
        }
      );
    } else {
      if (token === null) {
        if (
          location.pathname === "/account/passphrass" ||
          location.pathname === "/KYCApproval"
        ) {
        } else {
          navigate("/");
        }
      }
    }
  }, []);
  useEffect(() => {
    recover();
  }, [dispatch, recover]);
  //..
  return (
    <div className="" style={{ margin: 0 }}>
      <AppNavigation />
    </div>
  );
};

export default App;

'''
'''--- src/App.test.js ---
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

'''
'''--- src/Claim/ClaimToken.js ---
import React, { useState } from "react";
import { Card, Col, Row } from "react-bootstrap";
import { useNavigate } from "react-router-dom";
import logo from "../image/DRUG CIPHER (2).png";
import wallet from "../image/wallet.png";
import checkedwallet from "../image/checkedwallet.png";
import connectwallet from "../image/connectwallet.png";
import useQuery from "../hooks/useQuery";
import { login, _fetchApi } from "../utils/helper";
import { NotificationError } from "../utils/Notification";
import { toast } from "react-toastify";
import { claimToken } from "../utils/contract";
import { Spinner } from "reactstrap";

export default function ClaimToken() {
  const query = useQuery();
  const id = query.get("id");
  const [loading, setLoading] = useState(false);
  const [_claim, setClaim] = useState(false);
  const goTo = useNavigate();
  const account = window.walletConnection.account();
  const _fun = async () => {
    try {
      await claimToken("0.01", account.accountId).then(() => {
        _fetchApi(
          `/v1/claim-api-verify?id=${id}&query_type=update`,
          (res) => {
            if (res.success) {
              setClaim(true);
            }
          },
          (err) => {
            console.log(err);
            setLoading(false);
            toast(<NotificationError text="Error Occured" />);
          }
        );
      });
    } catch (error) {
      setLoading(false);
      toast(<NotificationError text="Error Occured" />);
    } finally {
      setLoading(false);
      toast(<NotificationError text="Error Occured" />);
    }
  };

  const claim = () => {
    setLoading(true);
    _fetchApi(
      `/v1/claim-api-verify?id=${id}&query_type=verify`,
      (res) => {
        if (res.success && res.result.length) {
          _fun();
        } else {
          toast(<NotificationError text="Claimed Already" />);
        }
      },
      (err) => {
        console.log(err);
        setLoading(false);
      }
    );
  };

  return (
    <div className="container">
      <Card className="KYC_card shadow p-3">
        <Row>
          <Col md={6} sm={6} xs={6}>
            <div
              onClick={() => goTo("/")}
              style={{ width: "fit-content", cursor: "pointer" }}
              data-toggle="tooltip"
              data-placement="bottom"
              title="Goto Home"
            >
              <img
                src={logo}
                style={{ width: 70, borderRadius: 10 }}
                alt=""
                className="shadow"
              />{" "}
              <h4
                style={{
                  display: "inline-block",
                  color: "rgb(3, 66, 110)",
                  marginRight: 30,
                }}
                className="dc"
              >
                DrugCipher
              </h4>
            </div>
          </Col>
          <Col md={6} sm={6} xs={6}>
            <button
              className="man_button"
              style={{ float: "right", cursor: "pointer" }}
              onClick={() => goTo("/")}
            >
              Go To The App
            </button>
          </Col>
        </Row>
        {account.accountId ? (
          <div
            className="text-center"
            style={{
              display: "flex",
              justifyContent: "center",
              alignItems: "center",
              height: "70vh",
            }}
          >
            {!_claim ? (
              <div>
                <div className="text-center">
                  <img src={wallet} alt="wallet" className="wallet" />
                </div>
                <div>
                  <h1 className="connect">Congratulations!</h1>
                </div>
                <p>
                  Congratulations! You have successfully received token from
                  DrugCipher. Click the below button to continue.
                </p>
                <button
                  className="shadow claim_button"
                  onClick={claim}
                  disabled={loading}
                >
                  {!loading ? "Claim Token" : <Spinner size="sm" />}
                </button>
              </div>
            ) : (
              <div
                className="text-center"
                style={{
                  display: "flex",
                  justifyContent: "center",
                  alignItems: "center",
                  height: "70vh",
                }}
              >
                <div>
                  <div className="text-center">
                    <img
                      src={checkedwallet}
                      alt="wallet"
                      className="wallet connectwallet"
                    />
                  </div>
                  <div>
                    <h1 className="connect">Claimed</h1>
                  </div>
                  <p>You have already claimed your NEAR token.</p>
                </div>
              </div>
            )}
          </div>
        ) : (
          <div
            className="text-center"
            style={{
              display: "flex",
              justifyContent: "center",
              alignItems: "center",
              height: "70vh",
            }}
          >
            <div>
              <div className="text-center">
                <img
                  src={connectwallet}
                  alt="wallet"
                  className="wallet connectwallet"
                />
              </div>
              <div>
                <h1 className="connect">Connect Wallet</h1>
              </div>
              <p>Connect your wallet to claim your NEAR token.</p>
              <button className="shadow claim_button" onClick={login}>
                Connect Wallet
              </button>
            </div>
          </div>
        )}
      </Card>
      <div className="text-center text-secondary">
        <p>
          Copyright © {new Date().getFullYear()} DrugCipher. All rights
          reserved.
        </p>
      </div>
    </div>
  );
}

'''
'''--- src/CustomFiles/Button.js ---
import React from "react";
import { Spinner } from "reactstrap";

export default function Button({
  className,
  style,
  btnText,
  props,
  onClick,
  loading = false,
}) {
  return (
    <button disabled={loading} style={style} className={className} {...props} onClick={onClick}>
      {loading ? <Spinner size={"sm"} /> : null} {btnText}
    </button>
  );
}

'''
'''--- src/Manufacturer/Account.js ---
import React from 'react'
import { Card } from 'react-bootstrap'

export default function Account() {
    return (
        <div>
            <Card className='man_card shadow p-3'>
                <h3 className='man_card_title'>Account</h3>
            </Card>
        </div>
    )
}

'''
'''--- src/Manufacturer/BarChart.js ---
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend,
  ArcElement,
} from "chart.js";
import { Bar } from "react-chartjs-2";

ChartJS.register(
  ArcElement,
  Tooltip,
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend
);

export const options = {
  responsive: true,
  plugins: {
    legend: {
      // position: 'top',
    },
    title: {
      display: true,
      text: "Drug Statistics ",
    },
  },
  title: {
    display: true,
    text: "title ",
  },
};

const data = {
  labels: [
    "Jan",
    "Feb",
    "Mar",
    "Apr",
    "May",
    "Jun",
    "Jul",
    "Aug",
    "Sept",
    "Oct",
    "Nov",
    "Dec",
  ],
  datasets: [
    {
      label: "Valid Scans",
      data: [10],
      backgroundColor: ["rgba(3, 66, 110,1)"],
      borderColor: ["rgb(3, 66, 110)"],
    },
    {
      label: "Invalid Scans",
      data: [1],
      backgroundColor: ["rgb(191, 226, 205)"],
      borderColor: ["rgb(128, 209, 1)"],
    },
  ],
  borderColor: ["rgb(3, 66, 110)", "rgb(128, 209, 1)"],
  height: "100vh",
};

export default function BarChart({ star = [] }) {
  return (
    <>
      <div style={{}}>
        <Bar options={options} data={data} star={star}/>
      </div>
    </>
  );
}

'''
'''--- src/Manufacturer/ClaimEmail.html ---
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <title>DrugCipher - Congratulations</title>
    <style type="text/css">
      * { font-family: "Gill Sans", "Gill Sans MT", Calibri, "Trebuchet MS",
      sans-serif; font-weight: 300; box-sizing: border-box; }
    </style>
    <script
      src="https://kit.fontawesome.com/91b0e140e7.js"
      crossorigin="anonymous"
    ></script>
  </head>
  <body>
    <center>
      <div style="background-color: rgb(238, 238, 238); width: 100%;height:auto">
        <div
          style="
            background-image: linear-gradient(
              to left,
              rgb(128, 209, 1),
              rgb(3, 66, 110)
            );
          "
        >
          <div style="padding: 10px; display: flex; gap: 10px">
            <img
              src="https://res.cloudinary.com/drxkp1erj/image/upload/v1667145329/DRUG_CIPHER_2_augtu3.png"
              alt="DrugCipher Logo"
              style="
                width: 80px;
                border-radius: 10px;
                box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2),
                  0 6px 20px 0 rgba(0, 0, 0, 0.19);
              "
            />
            <div style="color: white; text-align: left; margin-top: 10px">
              <h1 style="margin: 0">DrugCipher</h1>
              <p style="margin: 0">
                ...trust is good, but encryption is better!
              </p>
            </div>
          </div>
        </div>
        <!-- <h2>Thank you for registering</h2> -->

        <div style="text-align: justify; font-size: 15px; padding: 20px">
          <div
            style="
              background-color: white;
              padding: 30px;
              box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2),
                0 6px 20px 0 rgba(0, 0, 0, 0.19);
              color: rgb(88, 88, 88);
            "
          >
            <h2 style="font-weight: bold; color: rgb(3, 66, 110)">
              Congratulations🎉!
            </h2>
            <h2 style="font-weight: bold; color: rgb(3, 66, 110)">
              Hi, thank for using DrugCipher.
            </h2>
            <p style="font-size: 17px">
              You have successfully received token from DrugCipher. Kindly click the link below to claim your token.
            </p>
            <a
              href={{link}}
              target="_blank"
            >{{link}}</a><br />
            <br />
            <button
              style="
                border: none;
                border-radius: 0;
                padding: 8px;
                color: white;
                background-image: linear-gradient(
                  to left,
                  rgb(128, 209, 1),
                  rgb(3, 66, 110)
                );
              "
            >
              Read our article
            </button>
            <p>DrugCipher ..trust is good, but encryption is better!</p>
            <hr />
            <div>
              <p>Follow us:</p>
              <a
                href="https://facebook.com/drugcipher"
                target="_blank"
                style="text-decoration: none; color: rgb(88, 88, 88)"
              >
                    <img src="https://res.cloudinary.com/dx5ilizca/image/upload/v1668115587/facebook_danewa.png" style="width: 20px;"/>
              </a>
              <a
                href="https://twitter.com/drugcipher"
                target="_blank"
                style="
                  text-decoration: none;
                  color: rgb(88, 88, 88);
                  margin-left: 10px;
                "
              >
                            <img src='https://res.cloudinary.com/dx5ilizca/image/upload/v1668115587/twitter_ur21mf.png' style="width: 20px;"/>
              </a>
              <a
                href="https://instagram.com/drugcipher"
                target="_blank"
                style="
                  text-decoration: none;
                  color: rgb(88, 88, 88);
                  margin-left: 10px;
                "
              >
                              <img src="https://res.cloudinary.com/dx5ilizca/image/upload/v1668115587/instagram_fwgtmc.png" style="width: 20px;"/>
              </a>
              <p>DrugCipher Team</p>
            </div>
          </div>
        </div>
      </div>
    </center>
  </body>
</html>
'''
'''--- src/Manufacturer/CreateMarketer.js ---
import React from "react";
import { useState } from "react";
import { Card, Col, Row } from "react-bootstrap";
import Form from "react-bootstrap/Form";
import { ArrowLeftCircle } from "react-feather";
import { useSelector } from "react-redux";
import { useNavigate } from "react-router-dom";
import { toast } from "react-toastify";
import { Spinner } from "reactstrap";
import { v4 as uuid } from "uuid";
import useQuery from "../hooks/useQuery";
import { contries } from "../utils/countries";
import { _postApi } from "../utils/helper";
import { NotificationError, NotificationSuccess } from "../utils/Notification";
export default function CreateMarketer() {
  const { info } = useSelector((state) => state.account.account);
  const query = useQuery();
  const type = query.get("type")
  const form = {
    fullName: "",
    email: "",
    phoneNumber: "",
    country: "",
    firstLine: "",
    secondLine: "",
    type: type,
    id: uuid(),
    companyId: info.id,
  };
  const navigate = useNavigate();
  const [loading, setLoading] = useState();

  const [marketerData, setMarketerData] = useState(form);

  const handleChange = ({ target: { name, value } }) => {
    setMarketerData((p) => ({
      ...p,
      [name]: value,
    }));
  };

  const onSubmit = (e) => {
    e.preventDefault();
    setLoading(true);
    _postApi(
      "/v1/add-marketer",
      marketerData,
      (reps) => {
        if (reps.success) {
          setLoading(false);
          toast(<NotificationSuccess text="Successfully" />);
          setMarketerData(form);
          navigate(-1);
        }
      },
      (err) => {
        console.error(err);
        toast(<NotificationError text="Failed, try again" />);
        setLoading(false);
      }
    );
  };

  return (
    <Form onSubmit={onSubmit}>
      <Card className="man_card shadow p-3">
        <Row>
          <Col md={6} sm={6} xs={6}>
            <h3 className="man_card_title">Register {type}</h3>
          </Col>
          <Col md={6} sm={6} xs={6}>
            <ArrowLeftCircle
              className="shadow p-3"
              size="4em"
              style={{
                color: "rgb(3, 66, 110)",
                float: "right",
                cursor: "pointer",
              }}
              onClick={() => navigate(-1)}
            />
          </Col>
        </Row>
        <Row>
          <Col md={12}>
            <Row className="">
              <Col md={6}>
                <label>
                  Full Name<b style={{ color: "red" }}>*</b>
                </label>
                <input
                  name="fullName"
                  value={marketerData.fullName}
                  onChange={handleChange}
                  className="man_input_fields"
                  type="text"
                  required
                />
              </Col>
              <Col md={6}>
                <label>
                  Email<b style={{ color: "red" }}>*</b>
                </label>
                <input
                  name="email"
                  value={marketerData.email}
                  onChange={handleChange}
                  className="man_input_fields"
                  type="email"
                  required
                />
              </Col>
              <Col md={6} className="mb-3">
                <label>
                  Phone Number<b style={{ color: "red" }}>*</b>
                </label>
                <input
                  name="phoneNumber"
                  value={marketerData.phoneNumber}
                  onChange={handleChange}
                  className="man_input_fields"
                  type="phone"
                  required
                />
              </Col>
              <Col md={6} className="mb-3" controlId="validationCustom03">
                <label>
                  Country<b style={{ color: "red" }}>*</b>
                </label>
                <select
                  className="man_input_fields"
                  name="country"
                  defaultValue={marketerData.country}
                  onChange={handleChange}
                  required
                >
                  <option>Select Country</option>
                  {contries &&
                    contries.map((item) => (
                      <option value={item.name}>{item.name}</option>
                    ))}
                </select>
                {/* </Col> */}
              </Col>
            </Row>
            <Row className="">
              <Col md={6} className="mb-3">
                <label>First Line Address<b style={{ color: "red" }}>*</b></label>
                <input
                  name="firstLine"
                  value={marketerData.firstLine}
                  onChange={handleChange}
                  className="man_input_fields"
                  type="text"
                  required
                />
              </Col>
              <Col md={6}>
                <label>Second Line Address</label>
                <input
                  name="secondLine"
                  value={marketerData.secondLine}
                  onChange={handleChange}
                  className="man_input_fields"
                  type="text"
                />
              </Col>
            </Row>
          </Col>
        </Row>

        <div className="mt-3">
          <button type="submit" className="man_button">
            {loading ? <Spinner size="sm" /> : null}Register
          </button>
        </div>
      </Card>
    </Form>
  );
}

'''
'''--- src/Manufacturer/CreateSoleAgent.js ---
import React from "react";
// import { useEffect } from "react";
import { useState } from "react";
import { Card, Col, Row } from "react-bootstrap";
import Form from "react-bootstrap/Form";
import { ArrowLeftCircle } from "react-feather";
import { useNavigate } from "react-router-dom";
export default function CreateSoleAgent() {
    const form = {
        soleAgentFullName: '',
        soleAgentPhone: '',
        soleAgentEmail: '',
        soleAgentAddress: '',
    };
    const navigate = useNavigate();

    const [soleAgentData, setSoleAgentData] = useState({ form });

    const handleChange = ({ target: { name, value } }) => {
        setSoleAgentData((p) => ({
            ...p,
            [name]: value,
        }));
    };
    const submitForm = () => {
        console.log(soleAgentData)
    };

    return (
        <Form>
            {/* {JSON.stringify({ drugData })} */}
            <Card className="man_card shadow p-3">
                <Row>
                    <Col md={6} sm={6} xs={6}>
                        <h3 className="man_card_title">Register Sole Agent</h3>
                    </Col>
                    <Col md={6} sm={6} xs={6}>
                        <ArrowLeftCircle
                            className="shadow p-3"
                            size="4em"
                            style={{
                                color: "rgb(3, 66, 110)",
                                float: "right",
                                cursor: "pointer",
                            }}
                            onClick={() => navigate(-1)}
                        />
                    </Col>
                </Row>

                <Row>
                    <Col md={12}>
                        <Row className="">
                            <Col md={6} className='mb-3' controlId="validationCustom03">
                                <label>Sole Agent Full Name</label>
                                <input
                                    name="soleAgentFullName"
                                    value={soleAgentData.soleAgentFullName}
                                    onChange={handleChange}
                                    className="man_input_fields"
                                    type="text"
                                    required
                                />
                            </Col>
                            <Col md={6} className='mb-3'>
                                <label>Sole Agent Phone</label>
                                <input
                                    name="soleAgentPhone"
                                    value={soleAgentData.soleAgentPhone}
                                    onChange={handleChange}
                                    className="man_input_fields"
                                    type="text"
                                    required
                                />
                            </Col>
                        </Row>
                        <Row className="">
                            <Col md={6} className="mb-3">
                                <label>Sole Agent Email</label>
                                <input
                                    name="soleAgentEmail"
                                    value={soleAgentData.soleAgentEmail}
                                    onChange={handleChange}
                                    className="man_input_fields"
                                    type="text"
                                    required
                                />

                            </Col>
                            <Col md={6} className='mb-3'>
                                <label>Sole Agent Address</label>
                                <input
                                    name="soleAgentAddress"
                                    value={soleAgentData.soleAgentAddress}
                                    onChange={handleChange}
                                    className="man_input_fields"
                                    type="text"
                                    required
                                />
                            </Col>
                        </Row>
                    </Col>
                </Row>

                <div className="">
                    {/* <button className='man_button' onClick={() => navigate('/QRCode')}>Register</button> */}
                    <button type="submit" className="man_button" onClick={submitForm}>
                        Register
                    </button>
                </div>
            </Card>
        </Form >
    );
}

'''
'''--- src/Manufacturer/DoughnutChart.js ---
import { Doughnut } from 'react-chartjs-2'
// import { Chart, ArcElement, Tooltip,  } from 'chart.js'
import { Chart as ChartJS, ArcElement, Tooltip, Legend } from 'chart.js';
ChartJS.register(ArcElement, Tooltip, Legend);

const data = {
  // labels: ["Male", "Female"],
  datasets: [{
    label: '# sdds',
    data: [245, 45],
    backgroundColor: [
      'rgba(3, 66, 110,0.1)',
      'rgba(128, 209, 1,0.1)',
    ],
    borderColor: [
      'rgb(3, 66, 110)',
      'rgb(128, 209, 1)',
    ],
    borderWidth: 1,
  }]
}
export default function DoughnutChart() {
  return (
    <>
      <div>
        <Doughnut data={data} />
      </div>
    </>
  )
}
'''
'''--- src/Manufacturer/DrugsLocation.js ---
import React from "react";
import ReactMapboxGl, { Marker } from "react-mapbox-gl";
import "mapbox-gl/dist/mapbox-gl.css";
import { MapPin } from "react-feather";
import { ZoomControl } from "react-mapbox-gl/lib";
// import { Marker } from 'react-mapbox-gl/lib';
export default function DrugsLocation({ location = [] }) {
  const Map = ReactMapboxGl({
    accessToken:
      "pk.eyJ1IjoieXNxdWFyZWltcGVyaWFsIiwiYSI6ImNsOThtemc0ZDA5cXgzcXF0ZTRtMTAzb3UifQ.q1j7HpXo902tSPv5LSAN1g",
  });
  return (
    <div>
      <Map
        style="mapbox://styles/mapbox/streets-v9"
        containerStyle={{
          height: "67.5vh",
          width: "100%",
        }}
        center={[12.011171324972095, 8.542933227726762]}
        zoom={[1]}
      >
        {location.length
          ? location.map((state) => (
              <Marker coordinates={[state?.latitude, state?.longitude]}>
                <MapPin />
              </Marker>
            ))
          : ""}

        <ZoomControl />
      </Map>
    </div>
  );
}

'''
'''--- src/Manufacturer/Gethelp.js ---
import React from "react";
import { useState } from "react";
import { Card, Col, Row } from "react-bootstrap";
import "./DrugTable.css";
import "./Manufacturer.css";
import Accordion from "react-bootstrap/Accordion";
import Modal from "react-bootstrap/Modal";
import { _postApi } from "../utils/helper";
import { v4 as uuid4 } from "uuid";
import { Form, Spinner } from "reactstrap";
import { toast } from "react-toastify";
import { NotificationError, NotificationSuccess } from "../utils/Notification";
import { Send, X } from "react-feather";

export default function Gethelp() {
  let _form = { email: "", message: "", id: uuid4() }
  const [form, setForm] = useState(_form);
  const [show, setShow] = useState(false);
  const handleClose = () => setShow(false);
  const handleShow = () => setShow(true);
  const [loading, setLoading] = useState(false);
  const onChange = ({ target: { name, value } }) => {
    setForm((p) => ({ ...p, [name]: value }));
  };
  const handleSubmit = (e) => {
    e.preventDefault()
    setLoading(true);
    _postApi(
      "/v1/add-message",
      form,
      (reps) => {
        if (reps.success) {
          setLoading(false);
          toast(<NotificationSuccess text="Message sent successfully" />);
          setForm(_form)
          handleClose()
        }
      },
      (err) => {
        console.error(err);
        toast(<NotificationError text="Failed, try again" />);
        setLoading(false);
      }
    );
  };

  // const [validated, setValidated] = useState(false);

  // const handleSubmit = (event) => {
  //     const form = event.currentTarget;{
  //         navigate("/GH")
  //     }
  // };

  return (
    <>
      <Card className="man_card shadow p-3">
        <Row className="m-0 p-0">
          <Col
            md={12}
            style={{ display: "flex", justifyContent: "space-between" }}
          >
            <h3 className="man_card_title">Frequently Asked Questions</h3>
            <button className="MT" onClick={handleShow}>
              Message
            </button>
          </Col>
          {/* <Col md={6}>
        <div style={{ float: 'right', display: 'flex' }}>```````````````````
            <div style={{ display: 'inline' }}>
                <Dropdown toggle={toggle1} isOpen={dropdown}>
                    <DropdownToggle
                        data-toggle="dropdown"
                        tag="span"
                    >
                        <button className='man_button' style={{ marginRight: 5 }} >Export As</button>
                    </DropdownToggle>
                    <DropdownMenu className='dropdown_menu shadow mt-3'>
                        <div className=''>
                            <div className='drop_down_item'>
                                <span className='p-3'>
                                    <CSVLink data={drugData} filename={'Drugs Data'} className='csv'>CSV</CSVLink>
                                </span>
                            </div>
                        </div>
                    </DropdownMenu>
                </Dropdown>
            </div>
            <div style={{ display: 'inline' }}>
                <button className='man_button' onClick={() => navigate('/register-new-drug')}>Create New</button>
            </div>
        </div>
    </Col> */}
        </Row>
        {/* <DrugTable /> */}
        <Accordion>
          <Accordion.Item eventKey="0">
            <Accordion.Header>
              How do I know if my account is approved?
            </Accordion.Header>
            <Accordion.Body className="GH">
              Once your account is approved by <b>drugcipher</b>, a link that contains your account passphrase will be sent to the email you registered with.
            </Accordion.Body>
          </Accordion.Item>
          <Accordion.Item eventKey="1">
            <Accordion.Header>
              I cant see where to connect my NEAR  wallet?
            </Accordion.Header>
            <Accordion.Body className="GH">
              After you log in, look to the top right corner of <b>DrugCipher</b>, you will see "Account" menu, click on it, it will drop down some menus. You will find connect to NEAR menu there.
            </Accordion.Body>
          </Accordion.Item>
          <Accordion.Item eventKey="2">
            <Accordion.Header>
              How do I see the full details of my registered drug?
            </Accordion.Header>
            <Accordion.Body className="GH">
             In the "Registered Drugs" table, there is an icon under "Actions" column. Click the icon, and it will open where you can see drug data.
            </Accordion.Body>
          </Accordion.Item>
          <Accordion.Item eventKey="3">
            <Accordion.Header>
              How do I get the DrugCipher mobile app?
            </Accordion.Header>
            <Accordion.Body className="GH">
              You can get DrugCipher mobile app on AppStore or Playstore.
            </Accordion.Body>
          </Accordion.Item>
          <Accordion.Item eventKey="4">
            <Accordion.Header>
              Can I export my drug data?
            </Accordion.Header>
            <Accordion.Body className="GH">
              Yes, you can. If you navigate to "Registered Drugs", you will see "Export As" button. Click on it, it will allow you to download your drug data.
            </Accordion.Body>
          </Accordion.Item>
        </Accordion>
      </Card>
      <Modal show={show} onHide={handleClose}>
        <Form onSubmit={handleSubmit}>
          <Modal.Header closeButton>
            <Modal.Title>Send a message </Modal.Title>
          </Modal.Header>
          <Modal.Body>
            <input
              type="email"
              placeholder="example@gmail.com"
              className="man_input_fields"
              onChange={onChange}
              name="email"
              required
            />
            <textarea
              placeholder="explain in details"
              style={{ height: 150 }}
              className="man_input_fields mt-4"
              onChange={onChange}
              name="message"
              required
            ></textarea>
          </Modal.Body>
          <Modal.Footer>
            <button className="man_button" onClick={handleClose}>
              <X />{' '}Close
            </button>
            <button type="submit" disabled={loading} className="man_button">
              {loading ? <Spinner size="sm" /> : <Send />} Send
            </button>
          </Modal.Footer>
          ``
        </Form>
      </Modal>
    </>
  );
}

'''
'''--- src/Manufacturer/KYC/CongratsEmail.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>DrugCipher - Congratulations</title>
    <style type="text/css">
      * {
        font-family: "Gill Sans", "Gill Sans MT", Calibri, "Trebuchet MS",
          sans-serif;
        font-weight: 300;
        box-sizing: border-box;
      }
    </style>
    <script
      src="https://kit.fontawesome.com/91b0e140e7.js"
      crossorigin="anonymous"
    ></script>
  </head>
  <body>
    <center>
      <div style="background-color: rgb(238, 238, 238); width: 50%">
        <div
          style="
            background-image: linear-gradient(
              to left,
              rgb(128, 209, 1),
              rgb(3, 66, 110)
            );
          "
        >
          <div style="padding: 10px; display: flex; gap: 10px">
            <img
              src="../../image/DRUG CIPHER (2).png"
              alt="DrugCipher Logo"
              style="
                width: 80px;
                border-radius: 10px;
                box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2),
                  0 6px 20px 0 rgba(0, 0, 0, 0.19);
              "
            />
            <div style="color: white; text-align: left; margin-top: 10px">
              <h1 style="margin: 0">DrugCipher</h1>
              <p style="margin: 0">
                ...trust is good, but encryption is better!
              </p>
            </div>
          </div>
        </div>
        <!-- <h2>Thank you for registering</h2> -->

        <div style="text-align: justify; font-size: 15px; padding: 20px">
          <div
            style="
              background-color: white;
              padding: 30px;
              box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2),
                0 6px 20px 0 rgba(0, 0, 0, 0.19);
              color: rgb(88, 88, 88);
            "
          >
            <h2 style="font-weight: bold; color: rgb(3, 66, 110)">
              Congratulations🎉!
            </h2>
            <h2 style="font-weight: bold; color: rgb(3, 66, 110)">
              Hi company name, thank you for registering with DrugCipher.
            </h2>
            <p style="font-size: 17px">
              Your account has been successfully approved. click on the link
              below to continue to your account.
            </p>
            <a
              href="https://www.drugcipher.com/account/approved/user"
              target="_blank"
              >https://www.drugcipher.com/account/approved/user</a
            ><br />
            <br />
            <butto 
              style="
                border: none;
                border-radius: 0;
                padding: 8px;
                color: white;
                background-image: linear-gradient(
                  to left,
                  rgb(128, 209, 1),
                  rgb(3, 66, 110)
                );
              "
            >
              Read our article
            </butto>
            <p>DrugCipher ..trust is good, but encryption is better!</p>
            <hr />
            <div>
              <p>Follow us:</p>
              <a
                href="https://facebook.com/drugcipher"
                target="_blank"
                style="text-decoration: none; color: rgb(88, 88, 88)"
              >
              <img src="https://res.cloudinary.com/dx5ilizca/image/upload/v1668115587/facebook_danewa.png" style="width: 20px;"/>
              </a>
              <a
                href="https://twitter.com/drugcipher"
                target="_blank"
                style="
                  text-decoration: none;
                  color: rgb(88, 88, 88);
                  margin-left: 10px;
                "
              >
              <img src='https://res.cloudinary.com/dx5ilizca/image/upload/v1668115587/twitter_ur21mf.png' style="width: 20px;"/>

              </a>
              <a
                href="https://instagram.com/drugcipher"
                target="_blank"
                style="
                  text-decoration: none;
                  color: rgb(88, 88, 88);
                  margin-left: 10px;
                "
              >
                <img src="https://res.cloudinary.com/dx5ilizca/image/upload/v1668115587/instagram_fwgtmc.png" style="width: 20px;"/>
              </a>
              
              <p>DrugCipher Team</p>
            </div>
          </div>
        </div>
      </div>
    </center>
  </body>
</html>

'''
'''--- src/Manufacturer/KYC/Email.html ---
<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <meta
      name="viewport"
      content="width=device-width; initial-scale=1.0; maximum-scale=1.0;"
    />
    <title>DrugCipher - The blochain base anti-counterfeit system</title>
    <link
      href="https://fonts.googleapis.com/css?family=Open+Sans:400,600"
      rel="stylesheet"
    />
    <style type="text/css">
      * {
        font-family: "Gill Sans", "Gill Sans MT", Calibri, "Trebuchet MS",
          sans-serif;
        font-weight: 300;
      }
    </style>
  </head>
  <body style="padding: 0; margin: 0; background: #f4f4f4">
    <table style="max-width: 700px; width: 100%; border: 0; margin: 20px auto">
      <tr>
        <td>
          <table
            style="
              border: 1px solid #d7d7d7;
              width: 100%;
              max-width: 700px;
              background: white;
              position: relative;
            "
          >
            <tr>
              <td
                style="
                  background: #03426e;
                  height: auto;
                  vertical-align: middle;
                "
              >
                <div style="padding: 10px 15px">
                  <img
                    style="width: 50px; border-radius: 10%"
                    src="https://res.cloudinary.com/drxkp1erj/image/upload/v1667145329/DRUG_CIPHER_2_augtu3.png"
                    alt="Logo"
                  />
                  <span
                    style="
                      display: inline-block;
                      padding-left: 15px;
                      vertical-align: top;
                      color: #f4f4f4;
                      font-size: 20px;
                    "
                    ><span
                      style="
                        font-size: 20px;
                        text-transform: uppercase;
                        font-weight: 600;
                        padding-top: 5px;
                        display: inline-block;
                      "
                      >DrugCipher</span
                    ><br />The blochain base anti-counterfeit system</span
                  >
                </div>
              </td>
            </tr>
            <tr>
              <td style="padding: 40px 20px 0px 20px">
                <h3 style="font-weight: 300; text-align: left">
                  Hi <%= data.fname %> <%= data.lname %>,<br />
                </h3>
                <h3
                  style="
                    text-align: center;
                    /* font-size: 21px; */
                    margin: 0;
                    color: rgb(128, 209, 1);
                  "
                >
                  <%= data.newpass %>
                </h3>
                <p style="margin: 40px 0 30px 0; font-size: 18px">
                  <br />
                  DrugCipher Team.
                </p>
                <h1
                  style="
                    text-align: center;
                    font-weight: 300;
                    font-size: 50px;
                    margin: 0;
                  "
                ></h1>
              </td>
            </tr>
            <tr>
              <td style="padding-top: 40px">
                <div
                  style="
                    background: #03426e;
                    /* height: 30px; */
                    width: 100%;
                    text-align: center;
                    padding-top: 10px;
                  "
                >
                  <button
                    style="
                      background-color: rgb(255, 255, 255);
                      padding: 10px;
                      margin: 5px;
                      border: none;
                    "
                  >
                    <a href="https://drugcipher.com " target="_blank" style="text-decoration:none; color:#03426e">Contact us</a>
                  </button>
                </div>
              </td>
            </tr>
          </table>
        </td>
      </tr>
    </table>
  </body>
</html>

'''
'''--- src/Manufacturer/KYC/Final.js ---
import React from 'react'
import { Card, Col, Row } from 'react-bootstrap';
import { useNavigate } from 'react-router-dom';
import logo from "../../image/DRUG CIPHER (2).png";
// import emoji from "../../image/emoji.png";
import emoji from "../../image/Bcgr6Xj7i.gif";

export default function Final() {
    const navigate = useNavigate()
    return (
        <div className='container'>
            <Card className="KYC_card shadow p-3">
                <div>
                    <Row>    
                        <Col md={6} sm={6} xs={6}>
                            <div onClick={() => navigate('/')} style={{ width: 'fit-content', cursor: 'pointer' }} data-toggle="tooltip"
                                data-placement="bottom"
                                title="Goto Home">
                                <img
                                    src={logo}
                                    style={{ width: 70, borderRadius: 10 }}
                                    alt=""
                                    className="shadow"

                                />{" "}
                                <h4
                                    style={{
                                        display: "inline-block",
                                        color: "rgb(3, 66, 110)",
                                        marginRight: 30,
                                    }}
                                    className='dc'
                                >
                                    DrugCipher
                                </h4>
                            </div>
                        </Col>
                        <Col md={6} sm={6} xs={6}>
                            {/* <ArrowLeftCircle className='shadow p-3' size='4em' style={{ color: 'rgb(3, 66, 110)', float: 'right', cursor: 'pointer' }} onClick={() => navigate(-1)} /> */}
                        </Col>
                    </Row>
                    <div className='text-center'>
                        <h1 className='thankyou'>Thank you for registering</h1>
                        <img src={emoji} alt='' className='emoji' />
                        <p className='mssg'>Your account is under review. when it is approved, a link will be sent to your email with credentials to login. Kindly check your spam if you don't see the mail.</p>
                    </div>
                </div>
            </Card>
            <div className='text-center text-secondary'>
                <p>Copyright © {new Date().getFullYear()} DrugCipher. All rights reserved.</p>
            </div>
        </div >
    )
}

'''
'''--- src/Manufacturer/KYC/KYC.js ---
import { useState } from "react";
import { toast } from "react-toastify";
import { apiURL, _postApi } from "../../utils/helper";
import {
  NotificationError,
  NotificationSuccess,
} from "../../utils/Notification";
import { v4 as uuid4 } from "uuid";
import Final from "./Final";
import Step1 from "./Step1";
import Step2 from "./Step2";
import Step3 from "./Step3";
function KYC() {
  const [formData, setFormData] = useState({
    companyName: "",
    companyAddress: "",
    companyCountry: "",
    companyEmail: "",
    companyPhone: "",
    companyWebsite: "",
    companyId: uuid4(),
  });
  const [selectedFilePL, setSelectedFilePL] = useState(null);
  const [selectedFileSP, setSelectedFileSP] = useState(null);
  const [loading, setLoading] = useState(false);
  const handleChange = ({ target: { name, value } }) => {
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const [step, setstep] = useState(1);

  const onFileChangePL = (event) => {
    setSelectedFilePL(event.target.files[0]);
  };
  const onFileChangeSP = (event) => {
    setSelectedFileSP(event.target.files[0]);
  };
  const nextStep = (e) => {
    e.preventDefault();
    setLoading(true);
    _postApi(
      "/v1/create-company",
      formData,
      (res) => {
        if (res.success) {
          setLoading(false);
          setstep(step + 1);
          toast(<NotificationSuccess text="Next" />);
        }
      },
      (err) => {
        console.log(err);
        setLoading(false);
        toast(<NotificationError text="Failed, try again" />);
      }
    );
  };

  const onFileUploadPL = (e) => {
    e.preventDefault();
    setLoading(true);
    // Create an object of formData
    let _formData = new FormData();
    // // Update the formData object
    _formData.append("image", selectedFilePL);
    fetch(
      `${apiURL}/v1/upload-pl-url?companyId=${formData.companyId}&companyEmail=${formData.companyEmail}&companyName=${formData.companyName}`,
      {
        method: "PUT",
        body: _formData,
        // headers: {
        //   'Content-Type': 'multipart/form-data',
        //   accept: 'application/json',
        // },
      }
    )
      .then((raw) => raw.json())
      .then((res) => {
        if (res.success) {
          setLoading(false);
          setstep(step + 1);
          toast(<NotificationSuccess text="Next" />);
        }
      })
      .catch((err) => {
        console.log(err);
        setLoading(false);
        toast(<NotificationError text="Failed, try again" />);
      });
  };

  const onFileUploadSP = (e) => {
    e.preventDefault();
    setLoading(true);
    // Create an object of formData
    let _formData = new FormData();
    // // Update the formData object
    _formData.append("image", selectedFileSP);
    fetch(
      `${apiURL}/v1/upload-sp-url?companyId=${formData.companyId}&companyEmail=${formData.companyEmail}&companyName=${formData.companyName}`,
      {
        method: "PUT",
        body: _formData,
        // headers: {
        //   'Content-Type': 'multipart/form-data',
        //   accept: 'application/json',
        // },
      }
    )
      .then((raw) => raw.json())
      .then((res) => {
        console.log(res)
        if (res.success) {
          setLoading(false);
          setstep(step + 1);
          toast(<NotificationSuccess text="Done" />);
        }
      })
      .catch((err) => {
        setLoading(false);
        toast(<NotificationError text="Failed, try again" />);
      });
  };

  switch (step) {
    case 1:
      return (
        <Step1
          nextStep={nextStep}
          handleChange={handleChange}
          values={formData}
          loading={loading}
        />
      );
    case 2:
      return (
        <>
          <Step2
            onFileChangePL={onFileChangePL}
            selectedFilePL={selectedFilePL}
            onFileUploadPL={onFileUploadPL}
            loading={loading}
          />
        </>
      );
    case 3:
      return (
        <Step3
          onFileUploadSP={onFileUploadSP}
          onFileChangeSP={onFileChangeSP}
          loading={loading}
          selectedFileSP={selectedFileSP}
        />
      );
    case 4:
      return <Final />;
    default:
      return <div className="App"></div>;
  }
}

export default KYC;

'''
'''--- src/Manufacturer/KYC/KYCApproval.js ---
import React, { useState } from "react";
import { useEffect } from "react";
import { useCallback } from "react";
import { Card, Col, Row, Table } from "react-bootstrap";
import { toast } from "react-toastify";
import { CardBody, Spinner } from "reactstrap";
import { _fetchApi } from "../../utils/helper";
import logo from "../../image/DRUG CIPHER (2).png";

import {
  NotificationError,
  // NotificationSuccess,
} from "../../utils/Notification";
import { ArrowLeftCircle, Eye } from "react-feather";
// import useQuery from "../../hooks/useQuery";
import { useNavigate } from "react-router-dom";

export default function KYCApproval() {
  // const query = useQuery()
  const navigate = useNavigate();

  const [result, setResult] = useState([]);
  const [loading, setLoading] = useState(false);
  const getPendingKYC = useCallback(() => {
    setLoading(true);
    _fetchApi(
      "/v1/get-pending-kyc",
      (reps) => {
        if (reps.success) {
          setResult(reps.result);
          setLoading(false);
        }
      },
      (err) => {
        console.error(err);
        toast(<NotificationError text="Failed, try again" />);
        setLoading(false);
      }
    );
  }, []);
 
  useEffect(() => {
    getPendingKYC();
  }, [getPendingKYC]);
  return (
    <div className="container">
      <Card className="KYC_card shadow p-3">
        <div>
          <Row>
            <Col md={6} sm={6} xs={6}>
              <div
                onClick={() => navigate("/")}
                style={{ width: "fit-content", cursor: "pointer" }}
                data-toggle="tooltip"
                data-placement="bottom"
                title="Goto Home"
              >
                <img
                  src={logo}
                  style={{ width: 70, borderRadius: 10 }}
                  alt=""
                  className="shadow"
                />{" "}
                <h4
                  style={{
                    display: "inline-block",
                    color: "rgb(3, 66, 110)",
                    marginRight: 30,
                  }}
                  className="dc"
                >
                  DrugCipher
                </h4>
              </div>
            </Col>
            <Col md={6} sm={6} xs={6}>
              <ArrowLeftCircle
                className="shadow p-3"
                size="4em"
                style={{
                  color: "rgb(3, 66, 110)",
                  float: "right",
                  cursor: "pointer",
                }}
                onClick={() => navigate(-1)}
              />
            </Col>
          </Row>
        </div>
        <h3 className="man_card_title mt-4">KYC Approval</h3>
        <CardBody>
          {loading ? (
            <center>
              <Spinner />
            </center>
          ) : null}
          <Table hover responsive className="table" size="">
            <thead className="">
              <tr>
                <th className="">Company Name</th>
                <th className="">Company Phone</th>
                <th className="">Company Email</th>
                <th className="">Company Country</th>
                {/* <th className="">Pharmacist License</th>
                <th className="">superintendent License</th> */}
                <th className="">View</th>
              </tr>
            </thead>
            <tbody>
              {result.length
                ? result.map((item, index) => (
                    <tr key={index}>
                      <td>{item.company_name}</td>
                      <td>{item.company_phone}</td>
                      <td>{item.company_email}</td>
                      <td>{item.company_country}</td>
                      {/* <td>{item.pl_url}</td>
                    <td>{item.sp_url}</td> */}
                      <td className="">
                        {/* <button
                        className="man_button"
                        onClick={() => {
                          approve(item);
                        }}
                        style={{ marginRight: 10 }}
                      >
                        Approve{' '}<CheckCircle />
                      </button>
                      <button
                        onClick={() => {
                          reject(item);
                        }}
                        className='man_button'
                      >
                        Reject{' '}<XCircle />
                      </button> */}
                        <button
                          className="man_button"
                          onClick={() =>
                            navigate(
                              `/view-KYC-approval?companyName=${item.company_name}&companyPhone=${item.company_phone}&companyEmail=${item.company_email}&companyCountry=${item.company_country}&pl_url=${item.pl_url}&sp_url=${item.sp_url}&id=${item.id}`
                            )
                          }
                        >
                          <Eye size="1em" /> View
                        </button>
                      </td>
                    </tr>
                  ))
                : null}
            </tbody>
          </Table>
        </CardBody>
      </Card>
      <div className="text-center text-secondary">
        <p>
          Copyright © {new Date().getFullYear()} DrugCipher. All rights
          reserved.
        </p>
      </div>
    </div>
  );
}

'''
'''--- src/Manufacturer/KYC/Login.js ---
import React from 'react'
import { Card, Col, Row } from 'react-bootstrap';
import { ArrowLeftCircle, AtSign, FileText } from 'react-feather';
import { useNavigate } from 'react-router-dom';
import logo from "../../image/DRUG CIPHER (2).png";

export default function Login() {
    const navigate = useNavigate()

    return (
        <div className='container'>
            <Card className="KYC_card shadow p-3">
                <div>
                    <Row>
                        <Col md={6} sm={6} xs={6}>
                            <img
                                src={logo}
                                style={{ width: 70, borderRadius: 10 }}
                                alt=""
                                className="shadow"
                                onClick={() => navigate('/')}

                            />{" "}
                            <h4
                                style={{
                                    display: "inline",
                                    color: "rgb(3, 66, 110)",
                                    marginRight: 30,
                                }}
                                className='dc'
                            >
                                DrugCipher
                            </h4>
                        </Col>
                        <Col md={6} sm={6} xs={6}>
                            <ArrowLeftCircle className='shadow p-3' size='4em' style={{ color: 'rgb(3, 66, 110)', float: 'right', cursor: 'pointer' }} onClick={() => navigate(-1)} />
                        </Col>
                    </Row>
                </div>
                <div>
                    <div className='text-center'>
                        <h3 className='register_heading mt-3'>
                            Import Existing Account
                        </h3>
                        <p className='m-0' style={{ color: '#029f41' }}>DrugCipher introduces a sophisticated solution to tackling the issues surrounding pharmaceutical products.</p>
                    </div>
                    <div style={{}} className='mt-5'>
                        <Row>
                            <Col md={6}>
                                <Card className='KYC_card shadow p-4'>
                                    <h5 className="man_card_title mt-4"><AtSign />{' '}Email Recovery</h5>
                                    <p className='login_text ' style={{ marginBottom: 78 }}>Use the link that was sent to your email from drugcipher.com when creating your account. Click the link for your account recovery.</p>
                                    {/* <p>When you click the 'Send Email' button, a recovery mail will be sent to your email that is been registered with your account.</p> */}

                                </Card>
                            </Col>
                            <Col md={6}>
                                <Card className='KYC_card shadow p-4'>
                                    <h5 className="man_card_title mt-4"><FileText />{' '}Passphrase Recovery</h5>
                                    <p className='login_text'>When you click the 'Recover Account' button, you will be asked to input your 15 words passphrase that was generated for your account when registering.</p>
                                    <button className='man_button' onClick={() => navigate('/recorver-passphrase')}>Recover Account</button>
                                </Card>
                            </Col>
                        </Row>
                    </div>
                </div>
            </Card>
            <div className='text-center text-secondary'>
                <p>Copyright © {new Date().getFullYear()} DrugCipher. All rights reserved.</p>
            </div>
        </div>
    )
}
'''
'''--- src/Manufacturer/KYC/Passphrase.js ---
import React, { useState } from "react";
import { Card, Col, Form, Row } from "react-bootstrap";
import { Check, Copy, RefreshCcw } from "react-feather";
import logo from "../../image/DRUG CIPHER (2).png";
import useQuery from "../../hooks/useQuery";
import { recoverAccount, _fetchApi } from "../../utils/helper";
import { toast } from "react-toastify";
import {
  NotificationError,
  NotificationSuccess,
} from "../../utils/Notification";
import { Spinner } from "reactstrap";
import { useNavigate } from "react-router-dom";
import { useDispatch, useSelector } from "react-redux";
export default function Passphrase({ nextStep }) {
  // const navigate = useNavigate()

  const query = useQuery();
  const passphrase = query.get("pass");
  const id = query.get("id");
  const load = useSelector((state) => state.account.loading);
  const [loading, setLoading] = useState(false);
  const dispatch = useDispatch();
  const navigate = useNavigate();
  const [copying, setCopying] = useState(false);
  const submitForm = (e) => {
    e.preventDefault();
    dispatch(
      recoverAccount(passphrase, () => {
        navigate("/registered-drugs");
      })
    );
  };
  const regenerate = () => {
    setLoading(true);
    _fetchApi(
      `/v1/regenerate-passphrase?id=${id}`,
      (reps) => {
        if (reps.success) {
          toast(<NotificationSuccess text="Regenerated Successfully" />);
          setLoading(false);
          navigate(`/account/passphrass?pass=${reps.pass}&id=${id}`);
        }
      },
      (err) => {
        console.error(err);
        toast(<NotificationError text="Failed, try again" />);
        setLoading(false);
      }
    );
  };
  const copy = () => {
    navigator.clipboard.writeText(passphrase ? passphrase : "");
    setCopying(true);
    setTimeout(() => {
      setCopying(false);
    }, 2000);
  };
  return (
    <Form className="container" onSubmit={submitForm}>
      <Card className="KYC_card shadow p-3">
        <div>
          <Row>
            <Col md={6} sm={6} xs={6}>
              <div
                onClick={() => navigate("/")}
                style={{ width: "fit-content", cursor: "pointer" }}
                data-toggle="tooltip"
                data-placement="bottom"
                title="Goto Home"
              >
                <img
                  src={logo}
                  style={{ width: 70, borderRadius: 10 }}
                  alt=""
                  className="shadow"
                />{" "}
                <h4
                  style={{
                    display: "inline-block",
                    color: "rgb(3, 66, 110)",
                    marginRight: 30,
                  }}
                  className="dc"
                >
                  DrugCipher
                </h4>
              </div>
            </Col>
            <Col md={6} sm={6} xs={6}>
              {/* <ArrowLeftCircle className='shadow p-3' size='4em' style={{ color: 'rgb(3, 66, 110)', float: 'right', cursor: 'pointer' }} onClick={() => navigate(-1)} /> */}
            </Col>
          </Row>
        </div>
        <div className="mt-3 ">
          <Row className="mt-3">
              <p className="thankyou" style={{textAlign:'justify'}}>Passphrase</p>
            <Col md={6} cl controlId="validationCustom03">
              <p style={{ textAlign: "justify" }}>
                Copy the following words 'Passphrase' and{" "}
                <b>
                  save them in a very secure place. Anyone who have access to
                  this words will have access to your account.
                </b>{" "}
                You will be asked to use the 'Passphrase' when login in to your
                account!
              </p>
              <Card className="pp_card p-2 shadow">
                <Row>
                  {passphrase && passphrase.split(" ").length
                    ? passphrase.split(" ").map((item, index) => (
                      <Col md={4}>
                        <p className="word p-2">
                          {index + 1}: {item}
                        </p>
                      </Col>
                    ))
                    : null}
                  <div
                    style={{ display: "flex", justifyContent: "space-between" }}
                  >
                    <span
                      className="man_button"
                      style={{ cursor: "pointer" }}
                      onClick={copy}
                    // disabled={copying}
                    >
                      {/* < ToastContainer /> */}
                      {copying ? <Check /> : <Copy />}
                    </span>
                    <span
                      onClick={regenerate}
                      className="man_button"
                      style={{ cursor: "pointer" }}
                    >
                      {loading ? <Spinner size="sm" /> : <RefreshCcw />}{" "}
                      Regenerate
                    </span>
                  </div>
                </Row>
              </Card>
            </Col>
          </Row>
        </div>
        <div className="mt-3">
          <button
            type="submit"
            className="man_button"
            style={{ float: "right" }}
          >
            {load ? <Spinner size="sm" /> : null} Go to the app
          </button>
        </div>
      </Card>
      <div className="text-center text-secondary">
        <p>
          Copyright © {new Date().getFullYear()} DrugCipher. All rights
          reserved.
        </p>
      </div>
    </Form>
  );
}

'''
'''--- src/Manufacturer/KYC/RecPassphrase.js ---
import React, { useState } from "react";
import { Card, Col, Row } from "react-bootstrap";
import { ArrowLeftCircle } from "react-feather";
import { useDispatch, useSelector } from "react-redux";
import { useNavigate } from "react-router-dom";
import { Spinner } from "reactstrap";
import logo from "../../image/DRUG CIPHER (2).png";
import { recoverAccount } from "../../utils/helper";

export default function RecPassphrase() {
  const navigate = useNavigate();
  const dispatch = useDispatch();
  const loading = useSelector((state) => state.account.loading);
  const [passPhrass, setPassPhrase] = useState("");
  const onChange = ({ target: { value } }) => {
    setPassPhrase(value);
  };

  const submitForm = () => {
    dispatch(
      recoverAccount(passPhrass, () => {
        navigate("/registered-drugs");
      })
    );
  };
  return (
    <div>
      <div className="container">
        <Card className="KYC_card shadow p-3">
          <div>
            <Row>
              <Col md={6} sm={6} xs={6}>
                <img
                  src={logo}
                  style={{ width: 70, borderRadius: 10 }}
                  alt=""
                  className="shadow"
                  onClick={() => navigate("/")}
                />{" "}
                <h4
                  style={{
                    display: "inline",
                    color: "rgb(3, 66, 110)",
                    marginRight: 30,
                  }}
                  className="dc"
                >
                  DrugCipher
                </h4>
              </Col>
              <Col md={6} sm={6} xs={6}>
                <ArrowLeftCircle
                  className="shadow p-3"
                  size="4em"
                  style={{
                    color: "rgb(3, 66, 110)",
                    float: "right",
                    cursor: "pointer",
                  }}
                  onClick={() => navigate(-1)}
                />
              </Col>
            </Row>
          </div>
          <div>
            <div className="text-center">
              <h3 className="register_heading mt-3">
                Recover Using Passphrase
              </h3>
              <p className="m-0" style={{ color: "#029f41" }}>
                DrugCipher introduces a sophisticated solution to tackling the
                issues surrounding pharmaceutical products.
              </p>
            </div>
            <div style={{}} className="mt-5">
              <Row>
                <Col md={4}></Col>
                <Col md={4}>
                  <p className="m-0">
                    <b>
                      Enter the passphrase that was generated for this account.
                    </b>
                  </p>
                  <label>
                    Passphrase(15 words)<b style={{ color: "red" }}>*</b>
                  </label>
                  <input
                    className="man_input_fields"
                    placeholder="cap shirt spoon..."
                    onChange={onChange}
                    value={passPhrass}
                  />
                  <button
                    className="man_button mt-3"
                    style={{ width: "100%" }}
                    onClick={submitForm}
                    disabled={loading}
                  >
                    {loading ? <Spinner size="sm" /> : null}Recover
                  </button>
                </Col>
                <Col md={4}></Col>
              </Row>
            </div>
          </div>
        </Card>
      </div>
      <div className="text-center text-secondary">
        <p>
          Copyright © {new Date().getFullYear()} DrugCipher. All rights
          reserved.
        </p>
      </div>
    </div>
  );
}

'''
'''--- src/Manufacturer/KYC/Register.js ---
import React from 'react'
import { Card, Col, Row } from 'react-bootstrap';
import { ArrowLeftCircle } from 'react-feather';
import { useNavigate } from 'react-router-dom';
import logo from "../../image/DRUG CIPHER (2).png";
import '../../Manufacturer/LandingPage.css';
export default function Register() {
    const navigate = useNavigate()

    return (
        <div className='container'>
            <Card className="KYC_card shadow p-3">
                <div>
                    <Row>
                        <Col md={6} sm={6} xs={6}>
                            <img
                                src={logo}
                                style={{ width: 70, borderRadius: 10 }}
                                alt=""
                                className="shadow"
                                onClick={() => navigate('/')}

                            />{" "}
                            <h4
                                style={{
                                    display: "inline",
                                    color: "rgb(3, 66, 110)",
                                    marginRight: 30,
                                }}
                                className='dc'
                            >
                                DrugCipher
                            </h4>
                        </Col>
                        <Col md={6} sm={6} xs={6}>
                            <ArrowLeftCircle className='shadow p-3' size='4em' style={{ color: 'rgb(3, 66, 110)', float: 'right', cursor: 'pointer' }} onClick={() => navigate(-1)} />
                        </Col>
                    </Row>

                </div>
                <div className='text-center'>
                    <h3 className='register_heading mt-3'>
                        ...trust is good, but encryption is better!
                    </h3>
                    <p className='m-0' style={{ color: '#029f41' }}>DrugCipher introduces a sophisticated solution to tackling the issues surrounding pharmaceutical products.</p>
                    <div style={{}} className='text-center mt-5'>
                        <button className='man_button register_btn' style={{ marginRight: 10 }} onClick={() => navigate('/KYC')}>Create Account</button>
                        <span style={{ marginRight: 10 }} className='or'>Or</span>
                        <button className='register_btn' style={{ border: '1px dashed #029f41', padding: '7px', backgroundColor: 'white', color: 'rgb(3, 66, 110)' }} onClick={() => navigate('/login')}>Import Existing Account</button>
                    </div>
                </div>
            </Card>
            <div className='text-center text-secondary'>
                <p>Copyright © {new Date().getFullYear()} DrugCipher. All rights reserved.</p>
            </div>
        </div>
    )
}
'''
'''--- src/Manufacturer/KYC/Step1.js ---
import React from "react";
import { Card, Col, Form, Row } from "react-bootstrap";
import logo from "../../image/DRUG CIPHER (2).png";
import { Spinner } from "reactstrap";
import { ArrowLeftCircle, ArrowRightCircle } from "react-feather";
import { useNavigate } from "react-router-dom";
import { contries } from "../../utils/countries";
export default function Step1({
  nextStep = (f) => f,
  handleChange,
  values,
  loading = false,
}) {
  const navigate = useNavigate();

  return (
    <Form className="container" onSubmit={nextStep}>
      <Card className="KYC_card shadow p-3">
        <div>
          <Row>
            <Col md={6} sm={6} xs={6}>
              <div
                onClick={() => navigate("/")}
                style={{ width: "fit-content", cursor: "pointer" }}
                data-toggle="tooltip"
                data-placement="bottom"
                title="Goto Home"
              >
                <img
                  src={logo}
                  style={{ width: 70, borderRadius: 10 }}
                  alt=""
                  className="shadow"
                />{" "}
                <h4
                  style={{
                    display: "inline-block",
                    color: "rgb(3, 66, 110)",
                    marginRight: 30,
                  }}
                  className="dc"
                >
                  DrugCipher
                </h4>
              </div>
            </Col>
            <Col md={6} sm={6} xs={6}>
              <ArrowLeftCircle
                className="shadow p-3"
                size="4em"
                style={{
                  color: "rgb(3, 66, 110)",
                  float: "right",
                  cursor: "pointer",
                }}
                onClick={() => navigate(-1)}
              />
            </Col>
          </Row>
        </div>
        <h3 className="man_card_title mt-4">KYC - Step 1 of 3</h3>
        <div className="mt-3">
          <Row className="">
            <Col md={6} className="mb-3" controlId="validationCustom03">
              <label>
                Company Name<b style={{ color: "red" }}>*</b>
              </label>
              <input
                className="man_input_fields"
                type="text"
                placeholder="Company Name"
                name="companyName"
                defaultValue={values.companyName}
                onChange={handleChange}
                required
              />
            </Col>
            <Col md={6} className="mb-3">
              <label>
                Company Address<b style={{ color: "red" }}>*</b>
              </label>
              <input
                className="man_input_fields"
                type="address"
                placeholder="Company Address"
                name="companyAddress"
                defaultValue={values.companyAddress}
                onChange={handleChange}
                required
              />
            </Col>
          </Row>
          <Row className="">
            <Col md={6} className="mb-3">
              <label>
                Email<b style={{ color: "red" }}>*</b>
              </label>
              <input
                className="man_input_fields"
                type="email"
                placeholder="Email"
                name="companyEmail"
                defaultValue={values.companyEmail}
                onChange={handleChange}
                required
              />
            </Col>
            <Col md={6} className="mb-3">
              <label>Company Phone<b style={{ color: "red" }}>*</b></label>
              <input
                className="man_input_fields"
                type="text"
                placeholder="Phone Number"
                name="companyPhone"
                defaultValue={values.companyPhone}
                onChange={handleChange}
                required
              />
            </Col>
          </Row>
          <Row className="">
            <Col md={6} className="mb-3">
              <label>
                Country<b style={{ color: "red" }}>*</b>
              </label>
              <select
                className="man_input_fields"
                name="companyCountry"
                defaultValue={values.companyCountry}
                onChange={handleChange}
                required
              >
                <option>Select Country</option>
                {contries &&
                  contries.map((item) => (
                    <option value={item.name}>{item.name}</option>
                  ))}
              </select>
            </Col>
            <Col md={6} className="mb-3">
              <label>Website</label>
              <input
                className="man_input_fields"
                type="text"
                placeholder="Company Website"
                name="companyWebsite"
                defaultValue={values.companyWebsite}
                onChange={handleChange}
              />
            </Col>
          </Row>
        </div>
        <div className="mt-3">
          <button
            type="submit"
            className="man_button"
            style={{ float: "right" }}
            disabled={loading}
          >
            {loading ? <Spinner size="sm" /> : null} Next <ArrowRightCircle />
          </button>
        </div>
      </Card>
      <div className="text-center text-secondary text-secondary">
        <p>
          Copyright © {new Date().getFullYear()} DrugCipher. All rights
          reserved.
        </p>
      </div>
    </Form>
  );
}

'''
'''--- src/Manufacturer/KYC/Step2.js ---
import React from "react";
import { Card, Col, Form, Row } from "react-bootstrap";
import { ArrowRightCircle } from "react-feather";
import { useNavigate } from "react-router-dom";
import { Spinner } from "reactstrap";
import logo from "../../image/DRUG CIPHER (2).png";
export default function Step2({
  onFileUploadPL = (f) => f,
  onFileChangePL = (f) => f,
  selectedFilePL = null,
  loading = false,
}) {
  const navigate = useNavigate()

  return (
    <Form className="container" onSubmit={onFileUploadPL}>
      <Card className="KYC_card shadow p-3">
        <div>
          <Row>
            <Col md={6} sm={6} xs={6}>
              <div onClick={() => navigate('/')} style={{ width: 'fit-content', cursor: 'pointer' }} data-toggle="tooltip"
                data-placement="bottom"
                title="Goto Home">
                <img
                  src={logo}
                  style={{ width: 70, borderRadius: 10 }}
                  alt=""
                  className="shadow"

                />{" "}
                <h4
                  style={{
                    display: "inline-block",
                    color: "rgb(3, 66, 110)",
                    marginRight: 30,
                  }}
                  className='dc'
                >
                  DrugCipher
                </h4>
              </div>
            </Col>
            <Col md={6} sm={6} xs={6}>
              {/* <ArrowLeftCircle className='shadow p-3' size='4em' style={{ color: 'rgb(3, 66, 110)', float: 'right', cursor: 'pointer' }} onClick={() => navigate(-1)} /> */}
            </Col>
          </Row>
        </div>
        <h3 className="man_card_title mt-4">KYC - Step 2 of 3</h3>
        <div className="mt-3">
          <Row className="mt-3">
            <Col md={6} controlId="validationCustom03">
              <label>Premises License by PCN<b style={{ color: "red" }}>*</b></label>
              <br />
              <label style={{ fontWeight:'bold' }}>Attach the image of your license</label>
              <input
                className=""
                type="file"
                placeholder="Premises License by PCN"
                onChange={onFileChangePL}
                defaultValue={selectedFilePL?.name}
                accept=".jpg, .png, .jpeg"
                required
              />
            </Col>
          </Row>
        </div>
        <div className="mt-3">
          <button
            type="submit"
            className="man_button"
            style={{ float: "right" }}
            disabled={loading}
          >
            {loading ? <Spinner size="sm" /> : null} Next {' '}<ArrowRightCircle />
          </button>
        </div>
      </Card>
      <div className='text-center text-secondary'>
        <p>Copyright © {new Date().getFullYear()} DrugCipher. All rights reserved.</p>
      </div>
    </Form>
  );
}

'''
'''--- src/Manufacturer/KYC/Step3.js ---
import React from "react";
import { Card, Col, Form, Row } from "react-bootstrap";
import { CheckCircle } from "react-feather";
import { useNavigate } from "react-router-dom";
import { Spinner } from "reactstrap";
import logo from "../../image/DRUG CIPHER (2).png";
export default function Step3({
  onFileUploadSP = (f) => f,
  onFileChangeSP = (f) => f,
  loading = false,
}) {
  const navigate = useNavigate()

  return (
    <Form className="container" onSubmit={onFileUploadSP}>
      <Card className="KYC_card shadow p-3">
        <div>
          <Row>
            <Col md={6} sm={6} xs={6}>
              <div onClick={() => navigate('/')} style={{ width: 'fit-content', cursor: 'pointer' }} data-toggle="tooltip"
                data-placement="bottom"
                title="Goto Home">
                <img
                  src={logo}
                  style={{ width: 70, borderRadius: 10 }}
                  alt=""
                  className="shadow"

                />{" "}
                <h4
                  style={{
                    display: "inline-block",
                    color: "rgb(3, 66, 110)",
                    marginRight: 30,
                  }}
                  className='dc'
                >
                  DrugCipher
                </h4>
              </div>
            </Col>
            <Col md={6} sm={6} xs={6}>
              {/* <ArrowLeftCircle className='shadow p-3' size='4em' style={{ color: 'rgb(3, 66, 110)', float: 'right', cursor: 'pointer' }} onClick={() => navigate(-1)} /> */}
            </Col>
          </Row>
        </div>
        <h3 className="man_card_title mt-4">KYC - Step 3 of 3</h3>
        <div className="mt-3">
          <Row className="mt-3">
            <Col md={6} controlId="validationCustom03">
              <label>Superintendent Pharmacist License<b style={{ color: "red" }}>*</b></label>
              <br />
              <label style={{fontWeight:'bold' }}>Attach the image of your license</label>
              <input
                className=""
                type="file"
                placeholder="Premises License by PCN"
                // name="superintendentLicense"
                // defaultValue={values.superintendentLicense}
                onChange={onFileChangeSP}
                required
              />
            </Col>
          </Row>
        </div>
        <div className="mt-3">
          <button
            type="submit"
            className="man_button"
            style={{ float: "right" }}
            disabled={loading}
          >
            {loading ? <Spinner size='sm' /> : null} Submit {' '}<CheckCircle />
          </button>
        </div>
      </Card>
      <div className='text-center text-secondary text-secondary'>
        <p>Copyright © {new Date().getFullYear()} DrugCipher. All rights reserved.</p>
      </div>
    </Form>
  );
}

'''
'''--- src/Manufacturer/KYC/ThanksEmail.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>DrugCipher - Thank You For Registering</title>
    <style type="text/css">
      * {
        font-family: "Gill Sans", "Gill Sans MT", Calibri, "Trebuchet MS",
          sans-serif;
        font-weight: 300;
        box-sizing: border-box;
      }
    </style>
    <script
      src="https://kit.fontawesome.com/91b0e140e7.js"
      crossorigin="anonymous"
    ></script>
  </head>
  <body>
    <center>
      <div style="background-color: rgb(238, 238, 238); width: 50%">
        <div
          style="
            background-image: linear-gradient(
              to left,
              rgb(128, 209, 1),
              rgb(3, 66, 110)
            );
          "
        >
          <div style="padding: 10px; display: flex; gap: 10px">
            <img
              src="../../image/DRUG CIPHER (2).png"
              alt="DrugCipher Logo"
              style="
                width: 80px;
                border-radius: 10px;
                box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2),
                  0 6px 20px 0 rgba(0, 0, 0, 0.19);
              "
            />
            <div style="color: white; text-align: left; margin-top: 10px">
              <h1 style="margin: 0">DrugCipher</h1>
              <p style="margin: 0">
                ...trust is good, but encryption is better!
              </p>
            </div>
          </div>
        </div>
        <!-- <h2>Thank you for registering</h2> -->

        <div style="text-align: justify; font-size: 15px; padding: 20px">
          <div
            style="
              background-color: white;
              padding: 30px;
              box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2),
                0 6px 20px 0 rgba(0, 0, 0, 0.19);
              color: rgb(88, 88, 88);
            "
          >
            <h2 style="font-weight: bold; color: rgb(3, 66, 110)">
              👋Hi company name,
            </h2>
            <h2 style="font-weight: bold; color: rgb(3, 66, 110)">
              thank you for registering with DrugCipher.
            </h2>
            <p style="font-size: 17px">
              Your registration is under review, we will send you an email with
              a link to login to your account when we are done reviewing your registration.
            </p>
            <button
              style="
                border: none;
                border-radius: 0;
                padding: 8px;
                color: white;
                background-image: linear-gradient(
                  to left,
                  rgb(128, 209, 1),
                  rgb(3, 66, 110)
                );
              "
            >
              Read our article
            </button>
            <p>DrugCipher ..trust is good, but encryption is better!</p>
            <hr />
            <div>
              <p>Follow us:</p>
              <a
                href="https://facebook.com/drugcipher"
                target="_blank"
                style="text-decoration: none; color: rgb(88, 88, 88)"
              >
                <i className="fa fa-facebook"></i>
              </a>
              <a
              href="https://twitter.com/drugcipher"
              target="_blank"
              style="
                  text-decoration: none;
                  color: rgb(88, 88, 88);
                  margin-left: 10px;
                "
              >
              <i className="fa fa-twitter"></i>
              </a>
              <a
                href="https://instagram.com/drugcipher"
                target="_blank"
                style="
                  text-decoration: none;
                  color: rgb(88, 88, 88);
                  margin-left: 10px;
                "
              >
                <i className="fa fa-instagram"></i>
              </a>
              <a
                href="https://linkedin.com/drugcipher"
                target="_blank"
                style="
                  text-decoration: none;
                  color: rgb(88, 88, 88);
                  margin-left: 10px;
                "
              >
                <i className="fa fa-linkedin"></i>
              </a>
              <p>DrugCipher Team</p>
            </div>
          </div>
        </div>
      </div>
    </center>
  </body>
  </html>

'''
'''--- src/Manufacturer/KYC/ViewKYCApproval.js ---
import React, { useState, useCallback } from "react";
import { Card, Col, Row } from "react-bootstrap";
import {
  ArrowLeftCircle,
  CheckCircle,
  File,
  Mail,
  MapPin,
  Phone,
  Pocket,
  XCircle,
} from "react-feather";
import { useNavigate } from "react-router-dom";
// import { toast } from 'react-toastify';
import ImageViewer from "react-simple-image-viewer";
import { toast } from "react-toastify";
import { Spinner } from "reactstrap";
import useQuery from "../../hooks/useQuery";
import logo from "../../image/DRUG CIPHER (2).png";
import { _updateApi } from "../../utils/helper";
import {
  NotificationError,
  NotificationSuccess,
} from "../../utils/Notification";
// import { _updateApi } from '../../utils/helper';
// import {
//     NotificationError,
//     NotificationSuccess,
// } from "../../utils/Notification";

export default function ViewKYCApproval() {
  const navigate = useNavigate();

  const query = useQuery();
  const company_name = query.get("companyName");
  const company_phone = query.get("companyPhone");
  const company_email = query.get("companyEmail");
  const company_country = query.get("companyCountry");
  const pl_url = query.get("pl_url");
  const sp_url = query.get("sp_url");
  const id = query.get("id");

  const [currentImage, setCurrentImage] = useState(0);
  const [isViewerOpen, setIsViewerOpen] = useState(false);
  const [appLoading, setAppLoading] = useState(false);
  const [rejLoading, setRejLoading] = useState(false);

  const openImageViewer = useCallback((index) => {
    setCurrentImage(index);
    setIsViewerOpen(true);
  }, []);

  const closeImageViewer = () => {
    setCurrentImage(0);
    setIsViewerOpen(false);
  };
  const images = [pl_url, sp_url];
  const approve = () => {
    setAppLoading(true);
    _updateApi(
      "/v1/approved-kyc",
      { id, company_name, company_email },
      (reps) => {
        if (reps.success) {
          toast(<NotificationSuccess text="Approved Successfully" />);
          setAppLoading(false);
          navigate(-1);
        }
      },
      (err) => {
        console.error(err);
        toast(<NotificationError text="Failed, try again" />);
        setAppLoading(false);
      }
    );
  };
  const reject = () => {
    setRejLoading(true);
    _updateApi(
      "/v1/reject-kyc",
      { id, company_name, company_email },
      (reps) => {
        if (reps.success) {
          toast(<NotificationSuccess text="Approved Successfully" />);
          setRejLoading(false);
          navigate(-1);
        }
      },
      (err) => {
        console.error(err);
        toast(<NotificationError text="Failed, try again" />);
        setRejLoading(false);
      }
    );
  };
  return (
    <div className="container">
      <Card className="KYC_card shadow p-3">
        <div>
          <Row>
            <Col md={6} sm={6} xs={6}>
              <div
                onClick={() => navigate("/")}
                style={{ width: "fit-content", cursor: "pointer" }}
                data-toggle="tooltip"
                data-placement="bottom"
                title="Goto Home"
              >
                <img
                  src={logo}
                  style={{ width: 70, borderRadius: 10 }}
                  alt=""
                  className="shadow"
                />{" "}
                <h4
                  style={{
                    display: "inline-block",
                    color: "rgb(3, 66, 110)",
                    marginRight: 30,
                  }}
                  className="dc"
                >
                  DrugCipher
                </h4>
              </div>
            </Col>
            <Col md={6} sm={6} xs={6}>
              <ArrowLeftCircle
                className="shadow p-3"
                size="4em"
                style={{
                  color: "rgb(3, 66, 110)",
                  float: "right",
                  cursor: "pointer",
                }}
                onClick={() => navigate(-1)}
              />
            </Col>
          </Row>
          <h3 className="man_card_title mt-4">KYC Approval</h3>
          <div className="mt-3">
            <h5 style={{ color: "rgb(3, 66, 110)" }}>Company Information</h5>
            <Row className="mt-3">
              <Col md={6} className="mb-3">
                <Card className="company_data shadow p-4">
                  <p className="company_data_title">
                    <span className="company_data_icon">
                      <Pocket />
                    </span>{" "}
                    Company Name
                  </p>
                  <p>{company_name}</p>
                </Card>
              </Col>
              <Col md={6} className="mb-3">
                <Card className="company_data shadow p-4">
                  <p className="company_data_title">
                    <span className="company_data_icon">
                      <Phone />
                    </span>{" "}
                    Company Phone
                  </p>
                  <p>{company_phone}</p>
                </Card>
              </Col>
              <Col md={6} className="mb-3">
                <Card className="company_data shadow p-4">
                  <p className="company_data_title">
                    <span className="company_data_icon">
                      <Mail />
                    </span>{" "}
                    Company Email
                  </p>
                  <p>{company_email}</p>
                </Card>
              </Col>
              <Col md={6} className="mb-3">
                <Card className="company_data shadow p-4">
                  <p className="company_data_title">
                    <span className="company_data_icon">
                      <MapPin />
                    </span>{" "}
                    Company Country
                  </p>
                  <p>{company_country}</p>
                </Card>
              </Col>
              <Col md={6} className="mb-3">
                <Card className="company_data shadow p-4">
                  <p className="company_data_title">
                    <span className="company_data_icon">
                      <File />
                    </span>{" "}
                    Premises License by PCN
                  </p>
                  <p>{pl_url}</p>
                  <button
                    className="man_button"
                    onClick={() => openImageViewer(0)}
                  >
                    View License
                  </button>
                  {isViewerOpen && (
                    <ImageViewer
                      src={images}
                      currentIndex={currentImage}
                      disableScroll={false}
                      closeOnClickOutside={true}
                      onClose={closeImageViewer}
                    />
                  )} 
                </Card>
              </Col>
              <Col md={6} className="mb-3">
                <Card className="company_data shadow p-4">
                  <p className="company_data_title">
                    <span className="company_data_icon">
                      <File />
                    </span>{" "}
                    Superintendent Pharmacist License
                  </p>
                  <p>{sp_url}</p>
                  <button
                    className="man_button"
                    onClick={() => openImageViewer(1)}
                  >
                    View License
                  </button>
                  {isViewerOpen && (
                    <ImageViewer
                      src={images}
                      currentIndex={currentImage}
                      disableScroll={false}
                      closeOnClickOutside={true}
                      onClose={closeImageViewer}
                    />
                  )}
                </Card>
              </Col>
              <div>
                <button
                  className="man_button"
                  style={{ marginRight: 10 }}
                  onClick={() => {
                    approve();
                  }}
                  disabled={appLoading}
                >
                  {appLoading ? <Spinner size="sm" /> : <CheckCircle />} Approve
                </button>
                <button
                  className="man_button"
                  onClick={() => {
                    reject();
                  }}
                  disabled={rejLoading}
                >
                  {rejLoading ? (
                    <Spinner size="sm" />
                  ) : (
                    <XCircle style={{ color: "rgb(255, 97, 97)" }} />
                  )}{" "}
                  Reject
                </button>
              </div>
            </Row>
          </div>
        </div>
      </Card>
    </div>
  );
}

'''
'''--- src/Manufacturer/Marketers.js ---
import React, { useEffect } from "react";
import { Card, Col, Row } from "react-bootstrap";
import { useNavigate } from "react-router-dom";
import { Dropdown, DropdownMenu, DropdownToggle } from "reactstrap";
import { useState } from "react";
import { Table } from "reactstrap";
import "./DrugTable.css";
// import { drugData } from './drugData'
import { Spinner } from "react-bootstrap";
import { CSVLink } from "react-csv";
import { useCallback } from "react";
import { getMarketer } from "../utils/helper";
import { NotificationError } from "../utils/Notification";
import { toast } from "react-toastify";
import { useSelector } from "react-redux";
export default function Marketers() {
  const { info } = useSelector((state) => state.account.account);
  const navigate = useNavigate();
  const [dropdown, setdropdown] = useState(false);
  const [loading, setLoading] = useState(false);
  const toggle1 = () => {
    setdropdown(!dropdown);
  };
  const [marketers, setMarketers] = useState([]);
  const getMarketers = useCallback(() => {
    setLoading(true);
    getMarketer(
      `/v1/get-marketer?type=Marketer&companyId=${info.id}`,
      (res) => {
        if (res.success) {
          setMarketers(res.result);
          setLoading(false);
        }
      },
      (err) => {
        console.error(err);
        toast(<NotificationError text="Failed, try again" />);
        setLoading(false);
      }
    );
  }, [info.id]);
  useEffect(() => {
    getMarketers();
  }, [getMarketers]);
  return (
    <div>
      <Card className="man_card shadow p-3">
        <Row>
          <Col xl={6} lg={6} md={6} sm={6} xs={6}>
            <h3 className="man_card_title">Marketers</h3>
          </Col>
          <Col xl={6} lg={6} md={6} sm={6} xs={6}>
            <div style={{ float: "right", display: "flex" }}>
              <div style={{ display: "inline" }}>
                <Dropdown toggle={toggle1} isOpen={dropdown}>
                  <DropdownToggle data-toggle="dropdown" tag="span">
                    <button className="man_button" style={{ marginRight: 5 }}>
                      Export As
                    </button>
                  </DropdownToggle>
                  <DropdownMenu className="dropdown_menu shadow mt-3">
                    <div className="">
                      <div className="drop_down_item">
                        <span className="p-3">
                          <CSVLink
                            data={marketers}
                            filename={"Marketers"}
                            className="csv"
                          >
                            CSV
                          </CSVLink>
                        </span>
                      </div>
                    </div>
                  </DropdownMenu>
                </Dropdown>
              </div>
              <div style={{ display: "inline" }}>
                <button
                  className="man_button"
                  onClick={() => navigate("/create-marketer?type=Marketer")}
                >
                  Create New
                </button>
              </div>
            </div>
          </Col>
        </Row>
        {/* <DrugTable /> */}

        <div className="mt-3">
          <center>
            {loading ? (
              <Spinner animation="border" size="lg" className="opacity-25" />
            ) : null}
          </center>
          <Table hover responsive className="table" size="">
            <thead className="">
              <tr>
                <th>S/N</th>
                <th>Full Name</th>
                <th>Email</th>
                <th>Phone Number</th>
                <th>Address</th>
              </tr>
            </thead>
            <tbody>
              {marketers &&
                marketers.map((item, index) => (
                  <tr>
                    <td>{index + 1}</td>
                    <td>{item.name}</td>
                    <td>{item.email}</td>
                    <td>{item.phone_number}</td>
                    <td>{item.address}</td>
                  </tr>
                ))}
            </tbody>
          </Table>
          {marketers.length === 0 ? <p className="text-center mt-5 text-secondary">You have not registered any marketer yet, click the "Create New" button to create one.</p> : null}
        </div>
      </Card>
    </div>
  );
}

'''
'''--- src/Manufacturer/Navbar.js ---
import React, { useCallback, useEffect, useState } from "react";
import { Col, Row } from "react-bootstrap";
import bell from "../image/bell.png";
import help from "../image/help.png";
import image_account from "../image/account.png";
import { useLocation, useNavigate } from "react-router-dom";
import { Dropdown, DropdownMenu, DropdownToggle } from "reactstrap";
import { clearToken, login, logout, _fetchApi } from "../utils/helper";
import logo from "../image/DRUG CIPHER (2).png";
import { Menu } from "react-feather";
import { useSelector } from "react-redux";

export default function Navbar() {
  const { info } = useSelector((state) => state.account.account);
  const navigate = useNavigate();
  const location = useLocation();
  const [count, setCount] = useState(0);
  const drugHistoryReportNotifyCount = useCallback(() => {
    _fetchApi(
      `/v1/drug-history-report?company_id=${info.id}&query_type=notify_count`,
      (res) => {
        if (res.success && res.result !== null) {
          setCount(res.result.number);
        }
      },
      (err) => {
        console.log(err);
      }
    );
  }, [info.id]);

  const drugHistoryReportNotifyUpdate = useCallback(() => {
    navigate("/notifications");
    setCount(0);
  }, [navigate]);

  const [dropdown, setdropdown] = useState(false);
  const toggle1 = () => {
    setdropdown(!dropdown);
  };

  const [dropdown2, setdropdown2] = useState(false);
  const toggle2 = () => {
    setdropdown2(!dropdown2);
  };
  const account = window.walletConnection.account();
  useEffect(() => {
    drugHistoryReportNotifyCount();
  }, [drugHistoryReportNotifyCount]);
  return (
    <div>
      <Row className="m-0 webnavbar">
        <Col xl={9} lg={9} md={9} sm={9} xs={9}>
          {/* <Typeahead
            id="basic-typeahead-single"
            labelKey="drugName"
            onChange={(a) => {
              if (a.length) {
                navigate(`/registered-drugs?searchTerm=${a[0].drugName}`);
              }
            }}
            options={drugData}
            placeholder="Search drugs by name"
            selected={singleSelections}
            inputProps={{
              className: "man_search_field",
              style: { outline: "none" },
            }}
          /> */}
          {/* <input type='text' placeholder='Search Drugs' className='man_search_field shadow' /> */}
        </Col>
        <Col xl={3} lg={3} md={3} sm={3} xs={3}>
          <div
            style={{
              display: "flex",
              justifyContent: "center",
              alignItems: "center",
              gap: "20px",
              height: "70px",
            }}
          >
            <div
              className={`icon_div p-1 ${
                location.pathname === "/notifications" && "active_nav_menu"
              }`}
              style={{ position: "relative" }}
              onClick={drugHistoryReportNotifyUpdate}
            >
              {count ? (
                <div className="absolute">
                  <span>{count}</span>
                </div>
              ) : null}
              <img alt="" src={bell} />
            </div>
            <div
              className={`icon_div p-1 ${
                location.pathname === "/GetHelp" && "active_nav_menu"
              }`}
              onClick={() => navigate("/GetHelp")}
            >
              <img alt="" src={help} />
            </div>

            <Dropdown toggle={toggle1} isOpen={dropdown}>
              <DropdownToggle data-toggle="dropdown" tag="span">
                <div className="icon_div p-1">
                  <span className="account">Account</span>{" "}
                  <img alt="" src={image_account} />
                </div>
              </DropdownToggle>
              <DropdownMenu className="dropdown_menu shadow">
                <div className="">
                  <div
                    className="drop_down_item"
                    onClick={() => navigate("/profile")}
                  >
                    <span className="p-3">
                      {" "}
                      <i className="bi bi-person me-2 fs-4" />
                      Profile
                    </span>
                  </div>
                  <div className="drop_down_item">
                    {account.accountId ? (
                      <span className="p-3" onClick={logout}>
                        {" "}
                        <i className="bi bi-box-arrow-right me-2 fs-4" />
                        Disconnect
                      </span>
                    ) : (
                      <span className="p-3" onClick={login}>
                        <i className="bi bi-chevron-bar-contract me-2 fs-4" />{" "}
                        Connect
                      </span>
                    )}
                  </div>
                </div>
              </DropdownMenu>
            </Dropdown>
          </div>
        </Col>
      </Row>
      <div>
        <Row className="m-0 p-0 mobilenavbar mb-3">
          <Col xl={6} lg={6} md={6} sm={6} xs={6}>
            <img
              alt="DrugCipher Logo"
              src={logo}
              style={{ borderRadius: 10, width: 50, margin: "15px 7px" }}
            />
          </Col>
          <Col xl={6} lg={6} md={6} sm={6} xs={6}>
            <div style={{ color: "white", float: "right" }} className="pt-3">
              <Dropdown toggle={toggle2} isOpen={dropdown2}>
                <DropdownToggle data-toggle="dropdown" tag="span">
                  <Menu className="menu_" size="2.5em" />
                </DropdownToggle>
                <DropdownMenu className="dropdown_menu shadow">
                  <div className="">
                    <div
                      className="drop_down_item"
                      onClick={() => {
                        navigate("/profile");
                      }}
                    >
                      <span className="p-3">Profile</span>
                    </div>
                    <div className="drop_down_item" onClick={login}>
                      <span className="p-3">Connect NEAR</span>
                    </div>
                    <div
                      className="drop_down_item"
                      onClick={() => navigate("/registered-drugs")}
                    >
                      <span className="p-3">Registered Drugs</span>
                    </div>
                    <div
                      className="drop_down_item"
                      onClick={() => navigate("/notifications")}
                    >
                      <span className="p-3">Notifications</span>
                    </div>
                    <div
                      className="drop_down_item"
                      onClick={() => navigate("/settings")}
                    >
                      <span className="p-3">Settings</span>
                    </div>
                    <div
                      className="drop_down_item"
                      onClick={() => navigate("/GetHelp")}
                    >
                      <span className="p-3">Get Help</span>
                    </div>
                    <div
                      className="drop_down_item"
                      onClick={() => clearToken(() => navigate("/"))}
                    >
                      <span className="p-3">Logout</span>
                    </div>
                  </div>
                </DropdownMenu>
              </Dropdown>
            </div>
          </Col>
        </Row>
      </div>
    </div>
  );
}

'''
'''--- src/Manufacturer/Notifications.js ---
import moment from "moment";
import React, { useCallback, useEffect, useState } from "react";
import { Card, Col, Row } from "react-bootstrap";
import { Trash } from "react-feather";
import { useSelector } from "react-redux";
import { toast } from "react-toastify";
import { Alert, Spinner } from "reactstrap";
import { deleteDrugInfo, getDrugs } from "../utils/contract";
import { _fetchApi } from "../utils/helper";
import { NotificationError, NotificationSuccess } from "../utils/Notification";
export default function Notifications() {
  const { info } = useSelector((state) => state.account.account);
  const [setLoadingDelete] = useState(false);
  const [loading, setLoading] = useState(false);
  const [loadingScanDel, setLoadingScanDel] = useState(false);
  const [drugData, setDrugData] = useState([]);
  const [drugData1, setDrugData1] = useState([]);
  const [drugHistory, setDrugHistory] = useState([]);
  const today = moment().format("YYYY-MM-DD");
  const [loadingScan, setLoadingScan] = useState(false);
  const drugHistoryReportNotify = useCallback(() => {
    setLoadingScan(true);
    _fetchApi(
      `/v1/drug-history-report?company_id=${info.id}&query_type=notify`,
      (res) => {
        if (res.success && res.result !== null && res.result[0] !== null) {
          setDrugHistory([res.result]);
        }
        setLoadingScan(false);
      },
      (err) => {
        console.log(err);
        setLoadingScan(false);
      }
    );
  }, [info.id]);
  const drugHistoryReportNotifyUpdate = useCallback(() => {
    _fetchApi(
      `/v1/drug-history-report?company_id=${info.id}&query_type=notify_update`,
      (res) => {
        if (res.success) {
        }
      },
      (err) => {
        console.log(err);
      }
    );
  }, [info.id]);
  const drugHistoryReportDelete = useCallback((id) => {
    setLoadingScanDel(true);
    _fetchApi(
      `/v1/drug-history-report?id=${id}&query_type=notify_delete`,
      (res) => {
        toast(
          <NotificationSuccess text="Scan drug history deleted successfully" />
        );
        setLoadingScanDel(false);
        window.location.reload();
      },
      (err) => {
        toast(
          <NotificationError text="Failed to delete scan  drug history info." />
        );
        setLoadingScanDel(false);
      }
    );
  }, []);
  const getDrugInfoList = useCallback(async () => {
    try {
      setLoading(true);
      let list = await getDrugs(info.id);
      let arr = [];
      let arr1 = [];
      list &&
        list
          .filter((state) => state.company_id === info.id)
          .forEach((item) => {
            let d = moment(item.expiry_date).diff(today, "days");
            console.log(d);
            if (d <= 60 || !d > 0) {
              arr.push(item);
            } else if (d < 1) {
              arr1.push(item);
            }
          });
      setDrugData(arr);
      setDrugData1(arr1);
    } catch (error) {
      console.log({ error });
      setLoading(false);
    } finally {
      setLoading(false);
    }
  }, [info.id, today]);

  const deleteDrugInfoApi = async (id) => {
    setLoadingDelete(true);
    try {
      await deleteDrugInfo(id).then((resp) => getDrugInfoList());
      toast(<NotificationSuccess text="Drug info deleted successfully" />);
      setLoadingDelete(false);
    } catch (error) {
      toast(<NotificationError text="Failed to delete drug info." />);
    } finally {
      setLoadingDelete(false);
    }
  };

  useEffect(() => {
    getDrugInfoList();
    drugHistoryReportNotify();
  }, [drugHistoryReportNotify, getDrugInfoList]);
  useEffect(() => {
    setTimeout(() => {
      drugHistoryReportNotifyUpdate();
    }, 200);
  }, [drugHistoryReportNotifyUpdate]);
  return (
    <div>
      <Card className="man_card shadow p-3">
        <h3 className="man_card_title">Notifications</h3>
        <center>{loadingScan ? <Spinner size="sm" /> : null}</center>
        <h5 className="man_card_title">New Scans</h5>
        {drugHistory.length ? (
          drugHistory.map((item) => (
            <Row>
              <Col xl={10} lg={10} md={10} sm={10} xs={10}>
                <Card className="not_card p-3 mb-3 shadow">
                  <div
                    style={{
                      display: "flex",
                      justifyContent: "space-between",
                    }}
                  >
                    <div>{item.drug_name}</div>
                    <div>{item.generic_name}</div>
                    <div>{item.country ? item.country : "Anon"}</div>
                    <div>{moment(item.date).format("YYYY-MM-DD")}</div>
                  </div>
                </Card>
              </Col>
              <Col xl={2} lg={2} md={2} sm={2} xs={2}>
                <Card className="not_card p-3 mb-3 shadow">
                  <div
                    style={{
                      display: "flex",
                      justifyContent: "space-between",
                    }}
                  >
                    <div>
                      <p className="m-0">
                        {!item.valid ? "Valid Scan" : "Invalid Scan"}
                      </p>
                    </div>
                    <div
                      onClick={() => drugHistoryReportDelete(item.id)}
                      style={{ cursor: "pointer" }}
                    >
                      {loadingScanDel ? (
                        <Spinner size="sm" />
                      ) : (
                        <Trash className="grid" />
                      )}
                    </div>
                  </div>
                </Card>
              </Col>
            </Row>
          ))
        ) : (
          <Alert>
            <center>No new drug scan</center>
          </Alert>
        )}
        <hr></hr>
        <center>{loading ? <Spinner size="sm" /> : null}</center>
        <h5 className="man_card_title">About to expire</h5>
        {drugData.length ? (
          drugData.map((item) => (
            <Row>
              <Col xl={10} lg={10} md={10} sm={10} xs={10}>
                <Card className="not_card p-3 mb-3 shadow">
                  <div
                    style={{
                      display: "flex",
                      justifyContent: "space-between",
                    }}
                  >
                    <div>{item.drug_brand_name}</div>
                    <div>{item.generic_name}</div>
                    <div>{item.nafdac_number}</div>
                    <div>{item.expiry_date}</div>
                  </div>
                </Card>
              </Col>
              <Col xl={2} lg={2} md={2} sm={2} xs={2}>
                <Card className="not_card p-3 mb-3 shadow">
                  <div
                    style={{
                      display: "flex",
                      justifyContent: "space-between",
                    }}
                  >
                    <div>
                      <p className="m-0">{item.formulation_type}</p>
                    </div>
                    <div
                      onClick={() => {
                        deleteDrugInfoApi(item.id);
                      }}
                      style={{ cursor: "pointer" }}
                    >
                      {loadingScanDel ? (
                        <Spinner size="sm" />
                      ) : (
                        <Trash className="grid" />
                      )}
                    </div>
                  </div>
                </Card>
              </Col>
            </Row>
          ))
        ) : (
          <Alert>
            <center>No new drug about to expire</center>
          </Alert>
        )}
        <hr></hr>
        <h5 className="man_card_title">Expired Drugs</h5>
        {drugData1.length ? (
          drugData1.map((item) => (
            <Row>
              <Col xl={10} lg={10} md={10} sm={10} xs={10}>
                <Card className="not_card p-3 mb-3 shadow">
                  <div
                    style={{ display: "flex", justifyContent: "space-between" }}
                  >
                    <div>{item.drug_brand_name}</div>
                    <div>{item.generic_name}</div>
                    <div>{item.nafdac_number}</div>
                    <div>{item.expiry_date}</div>
                  </div>
                </Card>
              </Col>
              <Col xl={2} lg={2} md={2} sm={2} xs={2}>
                <Card className="not_card p-3 mb-3 shadow">
                  <div
                    style={{ display: "flex", justifyContent: "space-between" }}
                  >
                    <div>
                      <p className="m-0">{item.formulation_type}</p>
                    </div>
                    <div
                      style={{ cursor: "pointer" }}
                      onClick={() => {
                        deleteDrugInfoApi(item.id);
                      }}
                    >
                      <Trash className="grid" />
                    </div>
                  </div>
                </Card>
              </Col>
            </Row>
          ))
        ) : (
          <Alert>
            <center>No new drug expired Drugs</center>
          </Alert>
        )}
      </Card>
    </div>
  );
}

'''
'''--- src/Manufacturer/Overview.js ---
import moment from "moment";
import React, { useEffect } from "react";
import { useCallback } from "react";
import { useState } from "react";
import { Card, Col, Row } from "react-bootstrap";
import { useSelector } from "react-redux";
import { ArrowLeftCircle } from "react-feather";
import useQuery from "../hooks/useQuery";
import { formatNumber, _fetchApi } from "../utils/helper";
import BarChart from "./BarChart";
import DrugsLocation from "./DrugsLocation";
import { useNavigate } from "react-router-dom";
export default function Overview() {
  const navigate = useNavigate();
  const { info } = useSelector((state) => state.account.account);
  const query = useQuery();
  const id = query.get("id");
  const drug_name = query.get("drug_name");
  const expiry_date = query.get("expiry_date");
  const [drugHistory, setDrugHistory] = useState({
    validScan: 0,
    invalidScan: 0,
    locationScan: 0,
    anonScan: 0,
    location: [],
    star: [],
  });

  const drugHistoryReportValid = useCallback(() => {
    _fetchApi(
      `/v1/drug-history-report?id=${id}&company_id=${info.id}&query_type=valid`,
      (res) => {
        if (res.success ) {
          setDrugHistory((p) => ({ ...p, validScan: res.result[0].number }));
        }
      },
      (err) => {
        console.log(err);
      }
    );
  }, [id, info.id]);
  const drugHistoryReportInValid = useCallback(() => {
    _fetchApi(
      `/v1/drug-history-report?id=${id}&company_id=${info.id}&query_type=invalid`,
      (res) => {
        if (res.success ) {
          setDrugHistory((p) => ({ ...p, invalidScan: res.result[0].number }));
        }
      },
      (err) => {
        console.log(err);
      }
    );
  }, [id, info.id]);
  const drugHistoryReportCon = useCallback(() => {
    _fetchApi(
      `/v1/drug-history-report?id=${id}&company_id=${info.id}&query_type=country`,
      (res) => {
        if (res.success ) {
          setDrugHistory((p) => ({ ...p, locationScan: res.result[0].number }));
        }
      },
      (err) => {
        console.log(err);
      }
    );
  }, [id, info.id]);
  const drugHistoryReportAnon = useCallback(() => {
    _fetchApi(
      `/v1/drug-history-report?id=${id}&company_id=${info.id}&query_type=anon`,
      (res) => {
        if (res.success ) {
          setDrugHistory((p) => ({ ...p, anonScan: res.result[0].number }));
        }
      },
      (err) => {
        console.log(err);
      }
    );
  }, [id, info.id]);
  const drugHistoryReportLocation = useCallback(() => {
    _fetchApi(
      `/v1/drug-history-report?id=${id}&company_id=${info.id}&query_type=location`,
      (res) => {
        if (res.success ) {
          setDrugHistory((p) => ({ ...p, location: res.result }));
        }
      },
      (err) => {
        console.log(err);
      }
    );
  }, [id, info.id]);

  const drugHistoryReportAll = useCallback(() => {
    _fetchApi(
      `/v1/drug-history-report?id=${id}&company_id=${info.id}&query_type=all`,
      (res) => {
        if (res.success ) {
          setDrugHistory((p) => ({ ...p, star: res.result }));
        }
      },
      (err) => {
        console.log(err);
      }
    );
  }, [id, info.id]);
  useEffect(() => {
    drugHistoryReportCon();
    drugHistoryReportAnon();
    drugHistoryReportInValid();
    drugHistoryReportValid();
    drugHistoryReportLocation();
    drugHistoryReportAll();
  }, [
    drugHistoryReportAnon,
    drugHistoryReportCon,
    drugHistoryReportInValid,
    drugHistoryReportValid,
    drugHistoryReportLocation,
    drugHistoryReportAll,
    info.company_id,
  ]);
  return (
    <div>
      <Card className="man_card shadow p-3">
        <Row>
          <Col md={6} sm={6} xs={6}>
            <h3 className="man_card_title">{drug_name}</h3>
          </Col>
          <Col md={6} sm={6} xs={6}>
            <ArrowLeftCircle
              className="shadow p-1"
              size="2em"
              style={{
                color: "rgb(3, 66, 110)",
                float: "right",
                cursor: "pointer",
              }}
              onClick={() => navigate(-1)}
            />
          </Col>
        </Row>
        <Row style={{ color: "rgb(3, 66, 110)" }}>
          <Col md={6}>
            <Row>
              <Col md={4}>
                <Card className="overview_card shadow p-2 mb-3">
                  <p className="m-0">Total Scans</p>
                  <h3>
                    {formatNumber(
                      drugHistory.invalidScan + drugHistory.validScan
                    )}
                  </h3>
                </Card>
              </Col>
              <Col md={4}>
                <Card className="overview_card shadow p-2 mb-2">
                  <p className="m-0">Valid Scans</p>
                  <h3>{formatNumber(drugHistory.validScan)}</h3>
                </Card>
              </Col>
              <Col md={4}>
                <Card className="overview_card shadow p-2 mb-2">
                  <p className="m-0">Invalid Scans</p>
                  <h3>{formatNumber(drugHistory.invalidScan)}</h3>
                </Card>
              </Col>
            </Row>
            <Row>
              <Col md={4}>
                <Card className="overview_card shadow p-2 mb-3">
                  <p className="m-0">Total Locations</p>
                  <h3>
                    {formatNumber(
                      drugHistory.locationScan + drugHistory.anonScan
                    )}
                  </h3>
                </Card>
              </Col>
              <Col md={4}>
                <Card className="overview_card shadow p-2 mb-2">
                  <p className="m-0">Countries</p>
                  <h3>{formatNumber(drugHistory.locationScan)}</h3>
                </Card>
              </Col>
              <Col md={4}>
                <Card className="overview_card shadow p-2 mb-2">
                  <p className="m-0">Anon. Locations</p>
                  <h3>{formatNumber(drugHistory.anonScan)}</h3>
                </Card>
              </Col>
            </Row>
            <Card className="overview_card shadow p-2 mb-2 mt-1">
              <div style={{ display: "flex", justifyContent: "space-between" }}>
                <h3>
                  Expiry Date: {moment(expiry_date).format("MMMM Do, YYYY")}
                </h3>
              </div>
            </Card>
            <Card className="overview_card shadow p-2 mt-2">
              <BarChart star={drugHistory.star} />
            </Card>
          </Col>
          <Col md={6}>
            <Card className="overview_card shadow p-2 mb-2">
              <p>Drug Locations</p>
              <DrugsLocation location={drugHistory.location} />
            </Card>
          </Col>
        </Row>
      </Card>
    </div>
  );
}

'''
'''--- src/Manufacturer/Page404.js ---
import React from 'react'
import { useNavigate } from 'react-router-dom'
import './Manufacturer.css'
export default function Page404() {
  const navigate = useNavigate()
  return (
    <div className='text-center'>
      <h1 className='four_head'>404</h1>
      <p className='four_p'>OOPS! PAGE NOT FOUND</p>
      <p className='four_m'>Sorry the page you are looking for does not exist.</p>
      <button onClick={() => navigate('/')} className='man_button'>Return home</button>
    </div>
  )
}

'''
'''--- src/Manufacturer/QRCodePage.js ---
import React from "react";

import { Card, Col, Row } from "react-bootstrap";
import drugcipherIcon from "../image/QRCodeLogo.png";
import { QRCode } from "react-qrcode-logo";
import useQuery from "../hooks/useQuery";

export default function QRCodePage() {
  const query =useQuery();
  const id = query.get('id')
  const downloadQRCode = () => {
    const canvas = document.getElementById("qr-gen");
    const pngUrl = canvas
      .toDataURL("image/png")
      .replace("image/png", "image/octet-stream");
    let downloadLink = document.createElement("a");
    downloadLink.href = pngUrl;
    downloadLink.download = `${id}.png`;
    document.body.appendChild(downloadLink);
    downloadLink.click();
    document.body.removeChild(downloadLink);
  };

  return (
    <div>
      <Card className="man_card shadow p-3">
        <h3 className="man_card_title">Drug QR Code</h3>
        <Row>
          <Col md={4}>
            <div className="qr_code_div1" style={{ marginTop: 40 }}>
              <QRCode
                id="qr-gen"
                value={id}
                includeMargin={true}
                logoImage={drugcipherIcon}
                removeQrCodeBehindLogo={true}
                logoWidth={50}
                // qrStyle={"dots"}
                size={300}
                logoOpacity={1}
                eyeRadius={[
                  [5, 0, 0, 0],
                  [0, 5, 0, 0],
                  [0, 0, 0, 5],
                ]}
                eyeColor={[
                  {
                    outer: "black",
                    inner: "rgb(3, 66, 110)",
                  },
                  {
                    outer: "black",
                    inner: "rgb(3, 66, 110)",
                  },
                  {
                    outer: "black",
                    inner: "rgb(3, 66, 110)",
                  },
                ]}
              />
            </div>
          </Col>
        </Row>
        <div className="mt-3">
          <button className="man_button" onClick={downloadQRCode}>
            Download
          </button>
        </div>
      </Card>
    </div>
  );
}

'''
'''--- src/Manufacturer/RegisterNewDrug.js ---
// import {
//   formatNearAmount,
//   parseNearAmount,
// } from "near-api-js/lib/utils/format";
import React, { useCallback, useEffect } from "react";
// import { useEffect } from "react";
import { useState } from "react";
import { Card, Col, Row } from "react-bootstrap";
import { Typeahead } from "react-bootstrap-typeahead";
import Form from "react-bootstrap/Form";
import { useNavigate } from "react-router-dom";
import { toast } from "react-toastify";
import { setDrugInfo } from "../utils/contract";
import { getMarketer } from "../utils/helper";

import { v4 as uuid4 } from "uuid";
import { NotificationError, NotificationSuccess } from "../utils/Notification";
import { useSelector } from "react-redux";
import { Spinner } from "reactstrap";
import useQuery from "../hooks/useQuery";
import { ArrowLeftCircle } from "react-feather";
// import { marketer } from "./drugData";
export default function RegisterNewDrug() {
  const account = window.walletConnection.account();
  const query = useQuery();
  const transactionHashes = query.get("transactionHashes");
  const id = query.get("id");
  const { info } = useSelector((state) => state.account.account);
  const [loading, setLoading] = useState(false);
  const form = {
    manufacturerName: "",
    soleAgentName: "",
    authorizedMarketers: "",
    drugBrandName: "",
    drugGenericName: "",
    drugStrength: "",
    formulationType: "",
    unitPackaging: "",
    NAFDACNumber: "",
    batch_lotNumer: "",
    dateOfManufacture: "",
    dateOfExpiry: "",
  };
  const navigate = useNavigate();

  const [drugData, setDrugData] = useState(form);

  const handleChange = ({ target: { name, value } }) => {
    setDrugData((p) => ({
      ...p,
      [name]: value,
    }));
  };

  const addDrugInfo = async (e) => {
    e.preventDefault();
    setLoading(true);
    let id = uuid4();
    if (account.accountId) {
      navigate(`/register-new-drug?id=${id}`);
      let data = {
        id: id,
        manufacturer_name: drugData.manufacturerName,
        sole_agent: drugData.soleAgentName,
        drug_brand_name: drugData.drugBrandName,
        generic_name: drugData.drugGenericName,
        drug_strength: drugData.drugStrength,
        formulation_type: drugData.formulationType,
        unit_packaging: drugData.unitPackaging,
        nafdac_number: drugData.NAFDACNumber,
        lot_number: drugData.batch_lotNumer,
        date_manufacture: drugData.dateOfManufacture,
        expiry_date: drugData.dateOfExpiry,
        company_id: info.id,
        status: 0,
        remark: "",
        authorize_marketers: drugData.authorizedMarketers,
      };

      try {
        setDrugInfo({
          beneficiary_id: "8790fahad.testnet",
          token: "0.1",
          data,
        }).then((resp) => {
          console.log(resp);
          toast(
            <NotificationSuccess text="Drug infomation successfully added" />
          );
        });
        setLoading(false);
      } catch (error) {
        console.log(error);
        toast(<NotificationError text="Failed to add drug information." />);
        setLoading(false);
      } finally {
        setLoading(false);
      }
    } else {
      toast(<NotificationError text="Connect your near wallect" />);
      setLoading(false);
    }
  };
  const [soleAgents, setSoleAgents] = useState([]);
  const [marketers, setMarketers] = useState([]);
  const getMarketers = useCallback(() => {
    getMarketer(
      `/v1/get-marketer?type=Marketer&companyId=${info.id}`,
      (res) => {
        if (res.success) {
          setMarketers(res.result);
        }
      },
      (err) => {
        console.error(err);
        toast(<NotificationError text="Failed, try again" />);
      }
    );
  }, [info.id]);
  const getSoleAgent = useCallback(() => {
    getMarketer(
      `/v1/get-marketer?type=Agent&companyId=${info.id}`,
      (res) => {
        if (res.success) {
          setSoleAgents(res.result);
        }
      },
      (err) => {
        console.error(err);
        toast(<NotificationError text="Failed, try again" />);
      }
    );
  }, [info.id]);

  useEffect(() => {
    getMarketers();
    getSoleAgent();
  }, [getMarketers, getSoleAgent]);
  useEffect(() => {
    if (transactionHashes) {
      navigate(`/QRCode?id=${id}`);
    }
  }, [id, navigate, transactionHashes]);
  return (
    <Form onSubmit={addDrugInfo}>
      <Card className="man_card shadow p-3">
        <Row>
          <Col md={6} sm={6} xs={6}>
            <h3 className="man_card_title">Register Drug Info</h3>
          </Col>
          <Col md={6} sm={6} xs={6}>
            <ArrowLeftCircle
              className="shadow p-3"
              size="4em"
              style={{
                color: "rgb(3, 66, 110)",
                float: "right",
                cursor: "pointer",
              }}
              onClick={() => navigate(-1)}
            />
          </Col>
        </Row>
        <Row>
          <Col md={12}>
            <Row className="">
              <Col md={6} className="mb-3" controlId="validationCustom03">
                <label>Manufacturer's Name<b style={{ color: "red" }}>*</b></label>
                <input
                  name="manufacturerName"
                  value={drugData.manufacturerName}
                  onChange={handleChange}
                  className="man_input_fields"
                  type="text"
                  required
                />
              </Col>
              <Col md={6} className="mb-3">
                <label>Sole Agent Name<b style={{ color: "red" }}>*</b></label>
                <Typeahead
                  id="basic-typeahead-single"
                  options={soleAgents}
                  labelKey={(item) => item.name}
                  inputProps={{
                    className: "man_input_fields",
                    style: { outline: "none" },
                  }}
                  onChange={(val) => {
                    if (val.length) {
                      let selected = val[0];
                      setDrugData((p) => ({
                        ...p,
                        soleAgentName: selected.id,
                      }));
                    }
                  }}
                />
              </Col>
            </Row>
            <Row className="">
              <Col md={6} className="mb-3">
                <label>Authorized Marketers/Presentatives<b style={{ color: "red" }}>*</b></label>
                <Typeahead
                  id="basic-typeahead-single"
                  labelKey={(item) => item.name}
                  options={marketers}
                  inputProps={{
                    className: "man_input_fields",
                    style: { outline: "none" },
                  }}
                  onChange={(val) => {
                    if (val.length) {
                      let selected = val[0];
                      setDrugData((p) => ({
                        ...p,
                        authorizedMarketers: selected.id,
                      }));
                    }
                  }}
                />
              </Col>
              <Col md={6} className="mb-3">
                <label>Drug Brand Name<b style={{ color: "red" }}>*</b></label>
                <input
                  name="drugBrandName"
                  value={drugData.drugBrandName}
                  onChange={handleChange}
                  className="man_input_fields"
                  type="text"
                  required
                />
              </Col>
            </Row>
            <Row className="">
              <Col md={6} className="mb-3">
                <label>Drug Generic/Chemical Name<b style={{ color: "red" }}>*</b></label>
                <input
                  name="drugGenericName"
                  value={drugData.drugGenericName}
                  onChange={handleChange}
                  className="man_input_fields"
                  type="text"
                  required
                />
              </Col>
              <Col md={6} className="mb-3">
                <label>Strength of Drug<b style={{ color: "red" }}>*</b></label>
                <input
                  name="drugStrength"
                  value={drugData.drugStrength}
                  onChange={handleChange}
                  className="man_input_fields"
                  type="text"
                  required
                />
              </Col>
            </Row>
            <Row className="">
              <Col md={6} className="mb-3">
                <label>Formulation Type<b style={{ color: "red" }}>*</b></label>
                <input
                  name="formulationType"
                  value={drugData.formulationType}
                  onChange={handleChange}
                  className="man_input_fields"
                  type="text"
                  required
                />
              </Col>
              <Col md={6} className="mb-3">
                <label>Unit Packaging<b style={{ color: "red" }}>*</b></label>
                <input
                  name="unitPackaging"
                  value={drugData.unitPackaging}
                  onChange={handleChange}
                  className="man_input_fields"
                  type="text"
                  required
                />
              </Col>
            </Row>
            <Row className="">
              <Col md={6} className="mb-3">
                <label>Drug Authorization Number<b style={{ color: "red" }}>*</b></label>
                <input
                  name="NAFDACNumber"
                  value={drugData.NAFDACNumber}
                  onChange={handleChange}
                  className="man_input_fields"
                  type="text"
                  required
                />
              </Col>
              <Col md={6} className="mb-3">
                <label>Batch/Lot Number<b style={{ color: "red" }}>*</b></label>
                <input
                  name="batch_lotNumer"
                  value={drugData.batch_lotNumer}
                  onChange={handleChange}
                  className="man_input_fields"
                  type="text"
                  required
                />
              </Col>
            </Row>
            <Row className="">
              <Col md={6} className="mb-3">
                <label>Date of Manufacture<b style={{ color: "red" }}>*</b></label>
                <input
                  name="dateOfManufacture"
                  value={drugData.dateOfManufacture}
                  onChange={handleChange}
                  className="man_input_fields"
                  type="date"     
                  required
                />
              </Col>
              <Col md={6} className="mb-3">
                <label>Date of Expiry<b style={{ color: "red" }}>*</b></label>
                <input
                  name="dateOfExpiry"
                  value={drugData.dateOfExpiry}
                  onChange={handleChange}
                  className="man_input_fields"
                  type="date"
                  required
                />
              </Col>
            </Row>
          </Col>
        </Row>

        <div className="mt-3">
          {/* <button className='man_button' onClick={() => navigate('/QRCode')}>Register</button> */}
          <button type="submit" className="man_button" disabled={loading}>
            {loading ? <Spinner size="sm" /> : null}Register
          </button>
        </div>
      </Card>
    </Form>
  );
}

'''
'''--- src/Manufacturer/Settings.js ---
import React from "react";
import { useState } from "react";
import { Card, Row, Col } from "react-bootstrap";
// import { useSelector } from "react-redux";
// import { useNavigate } from "react-router-dom";

export default function Settings() {
  // const { info } = useSelector((state) => state.account.account);
  const [settingsData, setSettingsData] = useState(
    {
      companyName: '',
      companyEmail: '',
      companyPhone: '',
      companyAddress: '',
      manufacturerLicense: '',
      pharmacistLicense: ''
    }
  )

  const handleChange = ({ target: { name, value } }) => {
    setSettingsData((p) => ({ ...p, [name]: value }))
  }
  return (
    <div>
      {/* ********************************************** */}
     
      <Card className="man_card shadow p-3">
        <h3 className="man_card_title">Settings</h3>
        <h4 className="mt-4">Update Profile</h4>

        <Row className="">
          <Col md={6} className='mb-3'>
            <label>Manufacturer License</label>
            <input
              name="manufacturerLicense"
              className="man_input_fields"
              type="file"
              onChange={handleChange}
              value={settingsData.manufacturerLicense}
            />
          </Col>
          <Col md={6} className='mb-3'>
            <label>Pharmacist License</label>
            <input
              name="pharmacistLicense"
              className="man_input_fields"
              type="file"
              onChange={handleChange}
              value={settingsData.pharmacistLicense}
            />
          </Col>
        </Row>
        <Row className="">
          <Col md={6} className='mb-3'>
            <label>Company Name</label>
            <input
              name="companyName"
              className="man_input_fields"
              onChange={handleChange} type="text"
              value={settingsData.companyName}
            />
          </Col>
          <Col md={6} className='mb-3'>
            <label>Company Address</label>
            <input
              name="companyAddress"
              className="man_input_fields"
              type="address"
              onChange={handleChange}
              value={settingsData.companyAddress}
            />
          </Col>
        </Row>

        <Row className="">
          <Col md={6} className='mb-3'>
            <label>Email</label>
            <input
              name="manufacturer_license"
              className="man_input_fields"
              type="email"
            />
          </Col>
          <Col md={6} className='mb-3'>
            <label>Phone</label>
            <input
              name="manufacturer_license"
              className="man_input_fields"
              type="number"
            />
          </Col>
        </Row>
        <div className="">
          <button className="man_button">Save</button>
        </div>
      </Card>
    </div>
  );
}

'''
'''--- src/Manufacturer/Sidebar.js ---
/* eslint-disable no-unused-vars */
import React from "react";
import "./Manufacturer.css";
import logo from "../image/DRUG CIPHER (2).png";
// import overview from '../image/overview.png'
// import overview1 from '../image/overview1.png'
// import kyc from '../image/kyc.png'
// import kyc1 from '../image/kyc1.png'
// import view1 from '../image/view1.png'
// import view from '../image/view.png'
// import get_help from '../image/get_help.png'
// import get_help1 from '../image/get_help1.png'
// import add from '../image/add.png'
// import add1 from '../image/add1.png'
import logout from "../image/logout.png";
import profilee from "../image/Profile.png";
import pills1 from "../image/pills1.png";
import pills from "../image/pills.png";
import sole from "../image/sole.png";
import sole1 from "../image/sole1.png";
import marketers from "../image/marketers.png";
import marketers1 from "../image/marketers1.png";
import image_account from "../image/account.png";

import { useLocation, useNavigate } from "react-router-dom";
import { clearToken } from "../utils/helper";
export default function Sidebar() {
  const navigate = useNavigate();
  const location = useLocation();
  return (
    <div className="man_sidebar m-0">
      <div className="">
        <div className="">
          <img
            src={logo}
            alt="DrugCipher Logo"
            style={{ borderRadius: 10, width: 50, margin: "30px 10px" }}
          />
        </div>
        <div className="sidemenu_div">
          {/* <p className={`sidemenu ${location.pathname === '/overview' && 'active_side_menu'}`}
                        onClick={() => navigate('/overview')}>
                        {location.pathname === '/overview' ?
                            <img src={overview1} style={{ width: '20px', marginRight: 10 }} />
                            : <img src={overview} style={{ width: '20px', marginRight: 10 }} />}
                        {' '}Overview</p> */}

          {/* <p className={`sidemenu ${location.pathname === '/KYC' && 'active_side_menu'}`}
                        onClick={() => navigate('/KYC')}>
                        {location.pathname === '/KYC' ?
                            <img src={kyc1} style={{ width: '20px', marginRight: 10 }} />
                            : <img src={kyc} style={{ width: '22px', marginRight: 10 }} />}
                        {' '}KYC</p> */}

          {/* <p className={`sidemenu ${location.pathname === '/register-new-drug' && 'active_side_menu'}`}
                        onClick={() => navigate('/register-new-drug')}>
                        {location.pathname === '/register-new-drug' ?
                            <img src={add1} style={{ width: '22px', marginRight: 10 }} />
                            : <img src={add} style={{ width: '20px', marginRight: 10 }} />}
                        {' '}Register New Drug</p> */}

          <p
            className={`sidemenu ${
              location.pathname === "/registered-drugs" && "active_side_menu"
            }`}
            onClick={() => navigate("/registered-drugs")}
          >
            {location.pathname === "/registered-drugs" ? (
              <img
                src={pills1}
                style={{ width: "22px", marginRight: 10 }}
                alt=""
              />
            ) : (
              <img
                src={pills}
                style={{ width: "22px", marginRight: 10 }}
                alt=""
              />
            )}{" "}
            Registered Drugs
          </p>

          <p
            className={`sidemenu ${
              location.pathname === "/marketers" && "active_side_menu"
            }`}
            onClick={() => navigate("/marketers")}
          >
            {location.pathname === "/marketers" ? (
              <img
                src={marketers}
                style={{ width: "22px", marginRight: 10 }}
                alt=""
              />
            ) : (
              <img
                src={marketers1}
                style={{ width: "20px", marginRight: 10 }}
                alt=""
              />
            )}{" "}
            Marketers
          </p>

          <p
            className={`sidemenu ${
              location.pathname === "/sole-agents" && "active_side_menu"
            }`}
            onClick={() => navigate("/sole-agents")}
          >
            {location.pathname === "/sole-agents" ? (
              <img
                src={sole}
                style={{ width: "22px", marginRight: 10 }}
                alt=""
              />
            ) : (
              <img
                src={sole1}
                style={{ width: "20px", marginRight: 10 }}
                alt=""
              />
            )}{" "}
            Sole Agents
          </p>

          <p
            className={`sidemenu ${
              location.pathname === "/profile" && "active_side_menu"
            }`}
            onClick={() => navigate("/profile")}
          >
            {location.pathname === "/profile" ? (
              <img
                src={image_account}
                style={{ width: "22px", marginRight: 10 }}
                alt=""
              />
            ) : (
              <img
                src={profilee}
                style={{ width: "20px", marginRight: 10 }}
                alt=""
              />
            )}{" "}
            Profile
          </p>

          <div className="sidemenu_bottom m-0 p-0">
            {/* <p className={`sidemenu_bottom_icon ${location.pathname === '/Gethelp' && 'active_side_menu'}`} onClick={() => navigate('/Gethelp')}><img src={get_help} style={{ width: '22px', marginRight: 10 }} alt="" />{' '}Get Help</p> */}
            <p
              className={`sidemenu_bottom_icon ${
                location.pathname === "/" && "active_side_menu"
              }`}
              onClick={() => {
                clearToken(() => navigate("/"));
              }}
            >
              <img
                src={logout}
                style={{ width: "22px", marginRight: 10 }}
                alt=""
              />{" "}
              Logout
            </p>
          </div>
        </div>
      </div>
    </div>
  );
}

'''
'''--- src/Manufacturer/SoleAgent.js ---
import React, { useCallback, useEffect } from "react";
import { Card, Col, Row, Spinner } from "react-bootstrap";
import { useNavigate } from "react-router-dom";
import { Dropdown, DropdownMenu, DropdownToggle } from "reactstrap";
import { useState } from "react";
import { Table } from "reactstrap";
import "./DrugTable.css";
// import { drugData } from './drugData'
import { CSVLink } from "react-csv";
import { useSelector } from "react-redux";
import { getMarketer } from "../utils/helper";
import { NotificationError } from "../utils/Notification";
import { toast } from "react-toastify";
export default function SoleAgent() {
  const { info } = useSelector((state) => state.account.account);
  const navigate = useNavigate();
  const [dropdown, setdropdown] = useState(false);
  const toggle1 = () => {
    setdropdown(!dropdown);
  };

  const [loading, setLoading] = useState(false);
  const [soleAgents, setSoleAgents] = useState([]);
  const getMarketers = useCallback(() => {
    setLoading(true);
    getMarketer(
      `/v1/get-marketer?type=Agent&companyId=${info.id}`,
      (res) => {
        if (res.success) {
          setSoleAgents(res.result);
          setLoading(false);
        }
      },
      (err) => {
        console.error(err);
        toast(<NotificationError text="Failed, try again" />);
        setLoading(false);
      }
    );
  }, [info.id]);
  useEffect(() => {
    getMarketers();
  }, [getMarketers]);
  return (
    <div>
      <Card className="man_card shadow p-3">
        <Row>
          <Col xl={6} lg={6} md={6} sm={6} xs={6}>
            <h3 className="man_card_title">Sole Agents</h3>
          </Col>
          <Col xl={6} lg={6} md={6} sm={6} xs={6}>
            <div style={{ float: "right", display: "flex" }}>
              <div style={{ display: "inline" }}>
                <Dropdown toggle={toggle1} isOpen={dropdown}>
                  <DropdownToggle data-toggle="dropdown" tag="span">
                    <button className="man_button" style={{ marginRight: 5 }}>
                      Export As
                    </button>
                  </DropdownToggle>
                  <DropdownMenu className="dropdown_menu shadow mt-3">
                    <div className="">
                      <div className="drop_down_item">
                        <span className="p-3">
                          <CSVLink
                            data={soleAgents}
                            filename={"Sole Agents"}
                            className="csv"
                          >
                            CSV
                          </CSVLink>
                        </span>
                      </div>
                    </div>
                  </DropdownMenu>
                </Dropdown>
              </div>
              <div style={{ display: "inline" }}>
                <button
                  className="man_button"
                  onClick={() => navigate("/create-sole-agent?type=Agent")}
                >
                  Create New
                </button>
              </div>
            </div>
          </Col>
        </Row>
        {/* <DrugTable /> */}

        <div className="mt-3">
          <center>
            {loading ? (
              <Spinner animation="border" size="lg" className="opacity-25" />
            ) : null}
          </center>
          <Table hover responsive className="table" size="">
            <thead className="">
              <tr>
                <th>S/N</th>
                <th>Full Name</th>
                <th>Email</th>
                <th>Phone Number</th>
                <th>Address</th>
              </tr>
            </thead>
            <tbody>
              {soleAgents &&
                soleAgents.map((item, index) => (
                  <tr>
                    <td>{index + 1}</td>
                    <td>{item.name}</td>
                    <td>{item.email}</td>
                    <td>{item.phone_number}</td>
                    <td>{item.address}</td>
                  </tr>
                ))}
            </tbody>
          </Table>
          {soleAgents.length === 0 ? <p className="text-center mt-5 text-secondary">You have not registered any sole agent yet, click the "Create New" button to create one.</p> : null}

        </div>
      </Card>
    </div>
  );
}

'''
'''--- src/Manufacturer/ViewRegisteredDrugs.js ---
import React, { useCallback } from "react";
import { Card, Col, Form, Row } from "react-bootstrap";
// import DrugTable from './DrugTable'
import { useNavigate } from "react-router-dom";
import { Dropdown, DropdownMenu, DropdownToggle, Spinner } from "reactstrap";
import { useState } from "react";
import { Table } from "reactstrap";
import "./DrugTable.css";
import Modal from "react-bootstrap/Modal";
import { Send, X } from "react-feather";
import { CSVLink } from "react-csv";
import { Grid } from "react-feather";
import { getDrugs, recallDrug } from "../utils/contract";
import { useSelector } from "react-redux";
import { useEffect } from "react";
import { NotificationError, NotificationSuccess } from "../utils/Notification";
import { toast } from "react-toastify";

export default function ViewRegisteredDrugs() {
  const navigate = useNavigate();
  const { info } = useSelector((state) => state.account.account);
  const [dropdown, setdropdown] = useState(false);
  const [loading, setLoading] = useState(false);
  const [drugData, setDrugData] = useState([]);
  const [modal, setModal] = useState(false);
  const [item, setItem] = useState(false);
  const [loadingRemark, setLoadingRemark] = useState(false);
  const [remark, setRemark] = useState("");
  const handleClose = () => {
    setModal(!modal);
  };
  const toggle1 = () => {
    setdropdown(!dropdown);
  };
  const toggle2 = (index) => {
    let arr = [];
    drugData &&
      drugData.forEach((item, ind) => {
        if (index === ind) {
          console.log(index, ind);
          arr.push({ ...item, toggle: !item.toggle });
        } else {
          arr.push({ ...item, toggle: false });
        }
      });
    setDrugData(arr);
  };

  const getDrugInfoList = useCallback(async () => {
    try {
      setLoading(true);
      let list = await getDrugs(info.id);
      let arr = [];
      list &&
        list
          .filter((state) => state.company_id === info.id)
          .forEach((item) => {
            arr.push({ ...item, toggle: false });
          });
      setDrugData(arr);
    } catch (error) {
      console.log({ error });
      setLoading(false);
    } finally {
      setLoading(false);
    }
  }, [info.id]);
  useEffect(() => {
    getDrugInfoList();
  }, [getDrugInfoList]);
  const onChange = ({ target: { value } }) => {
    setRemark(value);
  };
  const handleSubmit = (e) => {
    e.preventDefault();
    setLoadingRemark(true);
    recallDrug({
      drug_id: item.id,
      remark,
    })
      .then((resp) => {
        console.log(resp);
        toast(<NotificationSuccess text="Drug recall successfully." />);
        setLoadingRemark(false);
        getDrugInfoList();
        handleClose();
      })
      .catch((err) => {
        console.log(err);
        toast(<NotificationError text="Failed to recall drug." />);
        setLoadingRemark(false);
      });
  };
  return (
    <div>
      <Card className="man_card shadow p-3">
        <Row>
          <Col xl={6} lg={6} md={6} sm={6} xs={6}>
            <h3 className="man_card_title">Registered Drugs</h3>
          </Col>
          <Col xl={6} lg={6} md={6} sm={6} xs={6}>
            <div style={{ float: "right", display: "flex" }}>
              <div style={{ display: "inline" }}>
                <Dropdown toggle={toggle1} isOpen={dropdown}>
                  <DropdownToggle data-toggle="dropdown" tag="span">
                    <button className="man_button" style={{ marginRight: 5 }}>
                      Export As
                    </button>
                  </DropdownToggle>
                  <DropdownMenu className="dropdown_menu shadow mt-3">
                    <div className="">
                      <div className="drop_down_item">
                        <span className="p-3">
                          <CSVLink
                            data={drugData}
                            filename={"Drugs Data"}
                            className="text-dark"
                          >
                            CSV
                          </CSVLink>
                        </span>
                      </div>
                    </div>
                  </DropdownMenu>
                </Dropdown>
              </div>
              <div style={{ display: "inline" }}>
                <button
                  className="man_button"
                  onClick={() => navigate("/register-new-drug")}
                >
                  Create New
                </button>
              </div>
            </div>
          </Col>
        </Row>
        <div className="mt-3">
          <center>{loading ? <Spinner size="lg" /> : null}</center>
          <Table hover className="table" size="">
            <thead className="">
              <tr>
                <th>S/N</th>
                <th>Drug Name</th>
                <th>Drug Generic Name</th>
                <th>Manufactured Date</th>
                <th>Expiry date</th>
                <th>Dosages</th>
                <th className="text-center">Action</th>
              </tr>
            </thead>
            <tbody>
              {drugData &&
                drugData.map((item, index) => (
                  <tr
                    className={`${item.status ? "bg-danger text-white" : ""}`}
                  >
                    <td>{index + 1}</td>
                    <td>{item.drug_brand_name}</td>
                    <td>{item.generic_name}</td>
                    <td>{item.date_manufacture}</td>
                    <td className="text">{item.expiry_date}</td>
                    <td>{item.unit_packaging}</td>
                    <td className="text-center">
                      <Dropdown
                        toggle={() => toggle2(index)}
                        isOpen={item.toggle}
                      >
                        <DropdownToggle data-toggle="dropdown" tag="span">
                          <Grid className="grid" />
                        </DropdownToggle>
                        <DropdownMenu
                          className="dropdown_menu shadow"
                          style={{ zIndex: 1 }}
                        >
                          <div className="">
                            <div
                              className="drop_down_item"
                              onClick={() => {
                                setModal(true);
                                setItem(item);
                              }}
                            >
                              <span className="p-3">Recall Drug</span>
                            </div>
                            <div
                              className="drop_down_item"
                              onClick={() => {
                                navigate(
                                  `/overview?id=${item.id}&drug_name=${item.drug_brand_name} ${item.generic_name}&expiry_date=${item.expiry_date}`
                                );
                              }}
                            >
                              <span className="p-3">Overview</span>
                            </div>
                          </div>
                        </DropdownMenu>
                      </Dropdown>
                    </td>
                  </tr>
                ))}
            </tbody>
          </Table>
          {drugData.length === 0 ? (
            <p className="text-center mt-5 text-secondary">
              You have not registered any drug yet, click the "Create New"
              button to create one.
            </p>
          ) : null}
        </div>
      </Card>
      <Modal show={modal} onHide={handleClose}>
        <Form onSubmit={handleSubmit}>
          <Modal.Header closeButton>
            <Modal.Title>Recall Drug</Modal.Title>
          </Modal.Header>
          <Modal.Body>
            <textarea
              placeholder="Remark in details"
              style={{ height: 150 }}
              className="man_input_fields mt-4"
              onChange={onChange}
              name="message"
              required
            ></textarea>
          </Modal.Body>
          <Modal.Footer>
            <button className="man_button" onClick={handleClose}>
              <X /> Close
            </button>
            <button
              type="submit"
              disabled={loadingRemark}
              className="man_button"
            >
              {loadingRemark ? <Spinner size="sm" /> : <Send />} Send
            </button>
          </Modal.Footer>
          ``
        </Form>
      </Modal>
    </div>
  );
}

'''
'''--- src/Routes/AppIndex.js ---
import React from 'react'
import { Outlet } from 'react-router-dom'
import { Col, Row } from 'reactstrap'
import Sidebar from '../Manufacturer/Sidebar'

import '../Manufacturer/Manufacturer.css'
import Navbar from '../Manufacturer/Navbar'
export default function AppIndex() {
    return (
        <div>
            <Row className='m-0'>
                <Col md={2} className='p-0 m-0'>
                    <Sidebar />
                </Col>
                <Col md={10} className='p-0 m-0 _outlet'>
                    <Navbar/>
                    <Outlet/>
                </Col>
            </Row>
        </div>
    )
}

'''
'''--- src/Routes/AppNavigation.js ---
/* eslint-disable no-unused-vars */
import { useRoutes } from "react-router-dom";
import KYC from "../Manufacturer/KYC/KYC";
import Overview from "../Manufacturer/Overview";
// eslint-disable-next-line no-unused-vars
import AppIndex from "./AppIndex";
import Settings from "../Manufacturer/Settings";
import ViewRegisteredDrugs from "../Manufacturer/ViewRegisteredDrugs";
import RegisterNewDrug from "../Manufacturer/RegisterNewDrug";
import Notifications from "../Manufacturer/Notifications";
import Account from "../Manufacturer/Account";
import QRCodePage from "../Manufacturer/QRCodePage";
import Profile from "../component/Profile";
import Gethelp from "../Manufacturer/Gethelp";
import KYCApproval from "../Manufacturer/KYC/KYCApproval";
import Passphrase from "../Manufacturer/KYC/Passphrase";
import Register from "../Manufacturer/KYC/Register";
import Login from "../Manufacturer/KYC/Login";
import RecPassphrase from "../Manufacturer/KYC/RecPassphrase";
import ViewKYCApproval from "../Manufacturer/KYC/ViewKYCApproval";
import SoleAgent from "../Manufacturer/SoleAgent";
import Marketers from "../Manufacturer/Marketers";
import CreateMarketer from "../Manufacturer/CreateMarketer";
import CreateSoleAgent from "../Manufacturer/CreateSoleAgent";
import Page404 from "../Manufacturer/Page404";
import ClaimToken from "../Claim/ClaimToken";
 

function AppNavigation() {
  let element = useRoutes([
    {
      path: "/",
      element: <Register />,
      children: [{ index: true }],
    },
    {
      element: <AppIndex />,
      children: [
        { index: true, element: <Register /> },

        {
          path: "/overview",
          element: <Overview />,
        },
        {
          path: "/registered-drugs",
          element: <ViewRegisteredDrugs />,
        },
        {
          path: "/register-new-drug",
          element: <RegisterNewDrug />,
        },
        {
          path: "/notifications",
          element: <Notifications />,
        },
        {
          path: "/account",
          element: <Account />,
        },
        {
          path: "/profile",
          element: <Profile />,
        },
        {
          path: "/QRCode",
          element: <QRCodePage />,
        },
        {
          path: "/GetHelp",
          element: <Gethelp />,
        },
        {
          path: "/sole-agents",
          element: <SoleAgent />,
        },
        {
          path: "/create-sole-agent",
          element: <CreateMarketer/>,
        },
        {
          path: "/marketers",
          element: <Marketers />,
        },
        {
          path: "/create-marketer",
          element: <CreateMarketer />,
        }
      ],
    },
    {
      path: "/KYC",
      element: <KYC />,
    },
    {
      path: "/KYCApproval",
      element: <KYCApproval />,
    },
    {
      path: "/view-KYC-approval",
      element: <ViewKYCApproval />,
    },
    {
      path: "/register",
      element: <Register />,
    },
    {
      path: "/login",
      element: <Login />,
    },
    {
      path: "/account/passphrass",
      element: <Passphrase />,
    },
    
    {
      path: '/recorver-passphrase',
      element: <RecPassphrase />
    },
    {
      path: '/claim-token',
      element: <ClaimToken />
    },
    {
      path: '*',
      element: <Page404 />
    }
  ]);
  return element;
}
export default AppNavigation;

'''
'''--- src/component/Profile.js ---
import React, { useCallback, useEffect, useState } from "react";
import { Card, Row, CardBody, CardImg, Col, CardText } from "reactstrap";
import "bootstrap";
import { accountBalance } from "../utils/helper";
import { useSelector } from "react-redux";
import ImageViewer from "react-simple-image-viewer";
import { File, Mail, Phone, Copy, MapPin, FileText, CreditCard, Check } from "react-feather";
export default function Profile() {
  const { info } = useSelector((state) => state.account.account);
  const account = window.walletConnection.account();
  const [balance, setBalance] = useState(null);
  const getBalance = useCallback(async () => {
    if (account.accountId) {
      let bal = await accountBalance();
      setBalance(bal);
    }
  }, [account.accountId]);

  useEffect(() => {
    getBalance();
  }, [getBalance]);

  const [currentImage, setCurrentImage] = useState(0);
  const [isViewerOpen, setIsViewerOpen] = useState(false);
  const [copying, setCopying] = useState(false);

  const openImageViewer = useCallback((index) => {
    setCurrentImage(index);
    setIsViewerOpen(true);
  }, []);

  const closeImageViewer = () => {
    setCurrentImage(0);
    setIsViewerOpen(false);
  };
  const images = [info.pl_url, info.sp_url];

  const copy = () => {
    navigator.clipboard.writeText(info.id);
    setCopying(true);
    setTimeout(() => {
      setCopying(false);
    }, 2000);
  };
  return (
    <div>
      <Card className="man_card shadow p-3">
        <h3 className="man_card_title">Profile</h3>
        <Row className="m-0">
          <Col md={3} className="text-center">
            <CardBody className="">
              <CardImg
                src="https://mdbcdn.b-cdn.net/img/Photos/new-templates/bootstrap-chat/ava3.webp"
                alt="avatar"
                className="rounded-circle mb-3"
                style={{ width: "" }}
                fluid
              />
              <h5 className="">{info.company_name}</h5>
              <CardText
                className=" card-text"
                style={{ fontSize: 14, margin: 0 }}
              >
                {balance ? (
                  <>
                    {" "}
                    <span>
                      Wallet Balance{": "}
                      <b>
                        {balance} <span className="ms-1">NEAR</span>
                      </b>
                    </span>
                  </>
                ) : null}
              </CardText>
              <CardText
                className=" card-text"
                style={{ fontSize: 14, margin: 0 }}
              >
                {account.accountId ? (
                  <>
                    {" "}
                    <span>
                      Wallet ID{": "}
                      <b>{account.accountId}</b>
                    </span>
                  </>
                ) : null}
              </CardText>
              <CardText
                className=" card-text"
                style={{ fontSize: 15, margin: 0 }}
              >
                {info.company_email}
              </CardText>
            </CardBody>
          </Col>
          <Col md={9}>
            <Row>
              <Col md={6} className="mt-3">
                <h4>Company details</h4>
                <Col md={12} className="mb-3">
                  <Card className="company_data shadow p-3">
                    <p className="company_data_title">
                      <span className="company_data_icon">
                        <FileText />
                      </span>{" "}
                      Company Name
                    </p>
                    <p>{info.company_name}</p>
                  </Card>
                </Col>
                <Col md={12} className="mb-3">
                  <Card className="company_data shadow p-3 ">
                    <p className="company_data_title">
                      <span className="company_data_icon">
                        <MapPin />
                      </span>{" "}
                      Company Address
                    </p>
                    <p>{info.company_address}</p>
                  </Card>
                </Col>
                <Col md={12} className="mb-1">
                  <Card className="company_data shadow p-3 ">
                    <Row>
                      <Col md={6}>
                        <p className="company_data_title">
                          <span className="company_data_icon">
                            <CreditCard />
                          </span>{" "}
                          Company ID
                        </p>
                      </Col>
                      <Col md={6}>
                        <span
                          className="man_button"
                          style={{ cursor: "pointer", float: 'right', margin: 0 }}
                          onClick={copy}
                        >
                          {/* <Copy /> {copying ? "Copied" : "Copy"} */}
                          {copying ? <Check /> : <Copy />}
                        </span>
                      </Col>
                    </Row>
                    <p>{info.id}</p>
                  </Card>
                </Col>
              </Col>
              <Col md={6} className="mt-3 ">
                <h4> Contact details</h4>
                <Col md={12} className="mb-3">
                  <Card className="company_data shadow p-3">
                    <p className="company_data_title">
                      <span className="company_data_icon">
                        <Mail />
                      </span>{" "}
                      Company Email
                    </p>
                    <p>{info.company_email}</p>
                  </Card>
                </Col>
                <Col md={12} className="mb-3">
                  <Card className="company_data shadow p-3 ">
                    <p className="company_data_title">
                      <span className="company_data_icon">
                        <Phone />
                      </span>{" "}
                      Phone Number
                    </p>
                    <p>{info.company_phone}</p>
                  </Card>
                </Col>
                <Col md={12} className="mb-2">
                  <Card className="company_data shadow p-3 ">
                    <p className="company_data_title">
                      <span className="company_data_icon">Status</span>
                    </p>
                    <p>{info.status}</p>
                  </Card>
                </Col>
              </Col>
            </Row>

            <Row className="mt-3">
              <Col md={6} className="mb-3">
                <Card className="company_data shadow p-4">
                  <p className="company_data_title">
                    <span className="company_data_icon">
                      <File />
                    </span>{" "}
                    Premises License by PCN
                  </p>
                  {/* <p>{info.pl_url}</p> */}
                  <button
                    className="man_button"
                    onClick={() => openImageViewer(0)}
                  >
                    View License
                  </button>
                  {isViewerOpen && (
                    <ImageViewer
                      src={images}
                      currentIndex={currentImage}
                      disableScroll={false}
                      closeOnClickOutside={true}
                      onClose={closeImageViewer}
                    />
                  )}
                </Card>
              </Col>
              <Col md={6} className="mb-3">
                <Card className="company_data shadow p-4">
                  <p className="company_data_title">
                    <span className="company_data_icon">
                      <File />
                    </span>{" "}
                    Superintendent Pharmacist License
                  </p>
                  {/* <p>{info.sp_url}</p> */}
                  <button
                    className="man_button"
                    onClick={() => openImageViewer(1)}
                  >
                    View License
                  </button>
                  {isViewerOpen && (
                    <ImageViewer
                      src={images}
                      currentIndex={currentImage}
                      disableScroll={false}
                      closeOnClickOutside={true}
                      onClose={closeImageViewer}
                    />
                  )}
                </Card>
              </Col>
            </Row>
          </Col>
        </Row>
      </Card>
    </div>
  );
}

'''
'''--- src/component/Wallet.js ---
import React from "react";
import { Dropdown, Stack, Spinner } from "react-bootstrap";

const Wallet = ({ address, amount, symbol, destroy }) => {
  if (address) {
    return (
      <>
        <Dropdown>
          <Dropdown.Toggle
            variant="dark"
            align="end"
            id="dropdown-basic"
            className="d-flex align-items-center border rounded-pill py-1"
          >
            {amount ? (
              <>
                {amount} <span className="ms-1"> {symbol}</span>
              </>
            ) : (
              <Spinner animation="border" size="sm" className="opacity-25" />
            )}
          </Dropdown.Toggle>

          <Dropdown.Menu className="shadow-lg border-0">
            <Dropdown.Item
              href={`https://explorer.testnet.near.org/accounts/${address}`}
              target="_blank"
            >
              <Stack direction="horizontal" gap={2}>
                <i className="bi bi-person-circle fs-4" />
                <span className="font-monospace">{address}</span>
              </Stack>
            </Dropdown.Item>

            <Dropdown.Divider />
            <Dropdown.Item
              as="button"
              className="d-flex align-items-center"
              onClick={() => {
                destroy();
              }}
            >
              <i className="bi bi-box-arrow-right me-2 fs-4" />
              Disconnect
            </Dropdown.Item>
          </Dropdown.Menu>
        </Dropdown>
      </>
    );
  }

  return null;
};

export default Wallet;
'''
'''--- src/hooks/useQuery.js ---
const { useLocation } = require("react-router");

function useQuery() {
  return new URLSearchParams(useLocation().search);
}

export default useQuery;
'''
'''--- src/index.js ---
/* eslint-disable no-unused-vars */
import React from "react";
import ReactDOM from "react-dom";
import reportWebVitals from "./reportWebVitals";
import { initializeContract } from "./utils/near";

import "bootstrap";
import "bootstrap-icons/font/bootstrap-icons.css";
import "bootstrap/dist/css/bootstrap.min.css";
import { BrowserRouter } from "react-router-dom";
import { Notification } from "./utils/Notification";
import App from "./App";
import { Provider } from "react-redux";
import store from "./redux/store";

window.nearInitPromise = initializeContract()
  .then(() => {
    ReactDOM.render(
      <React.StrictMode>
        <Notification />
          <Provider store={store}>
        <BrowserRouter>
          <App />
        </BrowserRouter>
          </Provider>
      </React.StrictMode>,
      document.getElementById("root")
    );
  })
  .catch(console.error);

reportWebVitals();

'''
'''--- src/redux/action/actionType.js ---
// user Action Type 
export const CARTLIST = "CARTLIST" 
export const ADD_ITEM_TO_CART = "ADD_ITEM_TO_CART" 
export const REMOVECARTITEM = "REMOVECARTITEM" 
export const RECOVER_ACCOUNT = 'RECOVER_ACCOUNT'
export const LOADING = 'LOADING'
'''
'''--- src/redux/reducers/cart.js ---
import {ADD_ITEM_TO_CART, CARTLIST, REMOVECARTITEM} from '../action/actionType'

const initialState = {
 cartList: [],
 addItemToCart: {},
//  totalCart: 0
};

export default function cartReducer(state = initialState, action) {
  switch (action.type) {
    case CARTLIST:
      return {
        ...state,
        cartList: action.cartList,
      };
      case ADD_ITEM_TO_CART:
        return {
          ...state,
          cartList: [...state.cartList,action.payload]
        };
      case REMOVECARTITEM:
      return {
        ...state,
        // cartList: a
      };
    default:
      return state;
  }
}

'''
'''--- src/redux/reducers/index.js ---
import { combineReducers } from "redux";
import cartReducer from "./cart";
import accountReducer from "./recover";

const rootReducer = combineReducers({
  cart: cartReducer,
  account:accountReducer
});

export default rootReducer;

'''
'''--- src/redux/reducers/recover.js ---
import { LOADING, RECOVER_ACCOUNT } from "../action/actionType";

const initialState = {
  account: {
    success:false,
    token: "",
    info: {},
  },
  loading: false,
};

export default function accountReducer(state = initialState, action) {
  switch (action.type) {
    case RECOVER_ACCOUNT:
      return {
        ...state,
        account: action.payload,
      };
    case LOADING:
      return {
        ...state,
        loading: action.payload,
      };
    default:
      return state;
  }
}

'''
'''--- src/redux/store.js ---
import { createStore, applyMiddleware } from 'redux';
import thunk from 'redux-thunk';
import logger from 'redux-logger';

import reducers from './reducers';

const createStoreWithMiddleware =
  process.env.NODE_ENV === 'development'
    ? applyMiddleware(thunk, logger)(createStore)
    : applyMiddleware(thunk)(createStore);
const store = createStoreWithMiddleware(reducers);

export default store;
'''
'''--- src/reportWebVitals.js ---
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

'''
'''--- src/setupTests.js ---
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

'''
'''--- src/utils/Cover.js ---
import React from "react";
import PropTypes from "prop-types";
import { Button } from "react-bootstrap";

const Cover = ({ name, login, coverImg }) => {
  if ((name, login, coverImg)) {
    return (
      <div
        className="d-flex  flex-column  p-3"
        style={{ background: "#000", minHeight: "100vh" }}
      >
        <div
          className="d-flex m-4 text-center"
          style={{ justifyContent: "space-between" }}
        >
          <h4 className="text-start text-light">{name}</h4>
          <Button
            onClick={login}
            variant="outline-light"
            className="rounded-pill"
          >
            Connect Wallet
          </Button>
        </div>
        <div className=" row text-light mt-5">
          <div className="col-md-5  m-4">
            <h1 className="text-center mt-4">Welcome to Drug Tracker</h1>
            <div
              style={{ fontSize: "24px", opacity: 0.8, lineHeight: "5vh" }}
              className="mt-4"
            >
              Authentic stock is managed and tracked efficiently using
              blockchain technology. This is addressed by using the smart
              contract which helps to track the movement of drugs from supplier
              to pharmacies and finally pharmacies to patient. duplicate drugs,
              expired drugs and fake drugs are completely avoided by using the
              blockchain technology.
            </div>
          </div>
          <div className="col-md-1" />
          <div className="col-md-5 mt-4">
            <img
              src={coverImg}
              alt=""
              style={{ marginTop: "5vh", width: "80vh", height: "40vh" }}
            />
          </div>
        </div>
        <p className="mt-auto text-secondary text-center">
          Powered by DrugTracker
        </p>
      </div>
    );
  }
  return null;
};

Cover.propTypes = {
  name: PropTypes.string,
};

Cover.defaultProps = {
  name: "",
};

export default Cover;

'''
'''--- src/utils/Notification.js ---
import React from "react";
import { ToastContainer } from "react-toastify";
import PropTypes from "prop-types";
import "react-toastify/dist/ReactToastify.css";

const Notification = () => (
  <ToastContainer
    position="bottom-center"
    autoClose={5000}
    hideProgressBar
    newestOnTop
    closeOnClick
    rtl={false}
    pauseOnFocusLoss
    draggable={false}
    pauseOnHover
  />
);

const NotificationSuccess = ({ text }) => (
    <div>
      <i className="bi bi-check-circle-fill text-success mx-2" />
      <span className="text-secondary mx-1">{text}</span>
    </div>
  );
  
  const NotificationError = ({ text }) => (
    <div>
      <i className="bi bi-x-circle-fill text-danger mx-2" />
      <span className="text-secondary mx-1">{text}</span>
    </div>
  );
  
  const Props = {
    text: PropTypes.string,
  };
  
  const DefaultProps = {
    text: "",
  };
  
  NotificationSuccess.propTypes = Props;
  NotificationSuccess.defaultProps = DefaultProps;
  
  NotificationError.propTypes = Props;
  NotificationError.defaultProps = DefaultProps;
  
  export { Notification, NotificationSuccess, NotificationError };
'''
'''--- src/utils/config.js ---
const CONTRACT_NAME = process.env.CONTRACT_NAME || "contract.drugcipher.testnet"; // line 1

function environment(env) {
  switch (env) {
    case "mainnet": // line 5
      return {
        networkId: "mainnet",
        nodeUrl: "https://rpc.mainnet.near.org",
        contractName: CONTRACT_NAME,
        walletUrl: "https://wallet.near.org",
        helperUrl: "https://helper.mainnet.near.org",
        explorerUrl: "https://explorer.mainnet.near.org",
      };
    case "testnet": // line 14
      return {
        networkId: "testnet",
        nodeUrl: "https://rpc.testnet.near.org",
        contractName: CONTRACT_NAME,
        walletUrl: "https://wallet.testnet.near.org",
        helperUrl: "https://helper.testnet.near.org",
        explorerUrl: "https://explorer.testnet.near.org",
      };
    default:
      throw Error(`Unknown environment '${env}'.`);
  }
}

export default environment;
'''
'''--- src/utils/contract.js ---
import { parseNearAmount } from "near-api-js/lib/utils/format";
const GAS = 100000000000000;

// insert drug information
export async function setDrugInfo({
  beneficiary_id = "",
  token = "",
  data = {},
}) {
  return window.contract.set_drug_info(
    {
      payload: data,
      token: parseNearAmount(token + ""),
      beneficiary_id: beneficiary_id,
    },
    GAS,
    parseNearAmount(token + "")
  );
}

// recall Drug here
export async function recallDrug({ drug_id, remark }) {
  await window.contract.recall_drug_fun({
    remark: remark,
    drug_id: drug_id,
  });
}
// get drugs
export async function getDrugs() {
  let drug = await window.contract.get_drugs_info();
  return drug;
}

// view drug and get token
export async function viewDrug(id, owner, token) {
  await window.contract.view_drug_info({
    id,
    owner,
    token: parseNearAmount(token),
  });
}

// view drug and get token
export async function deleteDrugInfo(id) {
  await window.contract.delete_drug_info({
    id: id,
  });
}

export async function claimToken(amount, to) {
  await window.contract.claim_token({
    amount: parseNearAmount(amount + ""),
    to: to,
  });
}

'''
'''--- src/utils/countries.js ---
export const contries =[ 
  {name: 'Afghanistan', code: 'AF'}, 
  {name: 'Åland Islands', code: 'AX'}, 
  {name: 'Albania', code: 'AL'}, 
  {name: 'Algeria', code: 'DZ'}, 
  {name: 'American Samoa', code: 'AS'}, 
  {name: 'AndorrA', code: 'AD'}, 
  {name: 'Angola', code: 'AO'}, 
  {name: 'Anguilla', code: 'AI'}, 
  {name: 'Antarctica', code: 'AQ'}, 
  {name: 'Antigua and Barbuda', code: 'AG'}, 
  {name: 'Argentina', code: 'AR'}, 
  {name: 'Armenia', code: 'AM'}, 
  {name: 'Aruba', code: 'AW'}, 
  {name: 'Australia', code: 'AU'}, 
  {name: 'Austria', code: 'AT'}, 
  {name: 'Azerbaijan', code: 'AZ'}, 
  {name: 'Bahamas', code: 'BS'}, 
  {name: 'Bahrain', code: 'BH'}, 
  {name: 'Bangladesh', code: 'BD'},
  {name: 'Barbados', code: 'BB'}, 
  {name: 'Belarus', code: 'BY'}, 
  {name: 'Belgium', code: 'BE'}, 
  {name: 'Belize', code: 'BZ'}, 
  {name: 'Benin', code: 'BJ'}, 
  {name: 'Bermuda', code: 'BM'}, 
  {name: 'Bhutan', code: 'BT'}, 
  {name: 'Bolivia', code: 'BO'}, 
  {name: 'Bosnia and Herzegovina', code: 'BA'}, 
  {name: 'Botswana', code: 'BW'}, 
  {name: 'Bouvet Island', code: 'BV'}, 
  {name: 'Brazil', code: 'BR'}, 
  {name: 'British Indian Ocean Territory', code: 'IO'}, 
  {name: 'Brunei Darussalam', code: 'BN'}, 
  {name: 'Bulgaria', code: 'BG'}, 
  {name: 'Burkina Faso', code: 'BF'}, 
  {name: 'Burundi', code: 'BI'}, 
  {name: 'Cambodia', code: 'KH'}, 
  {name: 'Cameroon', code: 'CM'}, 
  {name: 'Canada', code: 'CA'}, 
  {name: 'Cape Verde', code: 'CV'}, 
  {name: 'Cayman Islands', code: 'KY'}, 
  {name: 'Central African Republic', code: 'CF'}, 
  {name: 'Chad', code: 'TD'}, 
  {name: 'Chile', code: 'CL'}, 
  {name: 'China', code: 'CN'}, 
  {name: 'Christmas Island', code: 'CX'}, 
  {name: 'Cocos (Keeling) Islands', code: 'CC'}, 
  {name: 'Colombia', code: 'CO'}, 
  {name: 'Comoros', code: 'KM'}, 
  {name: 'Congo', code: 'CG'}, 
  {name: 'Congo, The Democratic Republic of the', code: 'CD'}, 
  {name: 'Cook Islands', code: 'CK'}, 
  {name: 'Costa Rica', code: 'CR'}, 
  {name: 'Cote D\'Ivoire', code: 'CI'}, 
  {name: 'Croatia', code: 'HR'}, 
  {name: 'Cuba', code: 'CU'}, 
  {name: 'Cyprus', code: 'CY'}, 
  {name: 'Czech Republic', code: 'CZ'}, 
  {name: 'Denmark', code: 'DK'}, 
  {name: 'Djibouti', code: 'DJ'}, 
  {name: 'Dominica', code: 'DM'}, 
  {name: 'Dominican Republic', code: 'DO'}, 
  {name: 'Ecuador', code: 'EC'}, 
  {name: 'Egypt', code: 'EG'}, 
  {name: 'El Salvador', code: 'SV'}, 
  {name: 'Equatorial Guinea', code: 'GQ'}, 
  {name: 'Eritrea', code: 'ER'}, 
  {name: 'Estonia', code: 'EE'}, 
  {name: 'Ethiopia', code: 'ET'}, 
  {name: 'Falkland Islands (Malvinas)', code: 'FK'}, 
  {name: 'Faroe Islands', code: 'FO'}, 
  {name: 'Fiji', code: 'FJ'}, 
  {name: 'Finland', code: 'FI'}, 
  {name: 'France', code: 'FR'}, 
  {name: 'French Guiana', code: 'GF'}, 
  {name: 'French Polynesia', code: 'PF'}, 
  {name: 'French Southern Territories', code: 'TF'}, 
  {name: 'Gabon', code: 'GA'}, 
  {name: 'Gambia', code: 'GM'}, 
  {name: 'Georgia', code: 'GE'}, 
  {name: 'Germany', code: 'DE'}, 
  {name: 'Ghana', code: 'GH'}, 
  {name: 'Gibraltar', code: 'GI'}, 
  {name: 'Greece', code: 'GR'}, 
  {name: 'Greenland', code: 'GL'}, 
  {name: 'Grenada', code: 'GD'}, 
  {name: 'Guadeloupe', code: 'GP'}, 
  {name: 'Guam', code: 'GU'}, 
  {name: 'Guatemala', code: 'GT'}, 
  {name: 'Guernsey', code: 'GG'}, 
  {name: 'Guinea', code: 'GN'}, 
  {name: 'Guinea-Bissau', code: 'GW'}, 
  {name: 'Guyana', code: 'GY'}, 
  {name: 'Haiti', code: 'HT'}, 
  {name: 'Heard Island and Mcdonald Islands', code: 'HM'}, 
  {name: 'Holy See (Vatican City State)', code: 'VA'}, 
  {name: 'Honduras', code: 'HN'}, 
  {name: 'Hong Kong', code: 'HK'}, 
  {name: 'Hungary', code: 'HU'}, 
  {name: 'Iceland', code: 'IS'}, 
  {name: 'India', code: 'IN'}, 
  {name: 'Indonesia', code: 'ID'}, 
  {name: 'Iran, Islamic Republic Of', code: 'IR'}, 
  {name: 'Iraq', code: 'IQ'}, 
  {name: 'Ireland', code: 'IE'}, 
  {name: 'Isle of Man', code: 'IM'}, 
  {name: 'Israel', code: 'IL'}, 
  {name: 'Italy', code: 'IT'}, 
  {name: 'Jamaica', code: 'JM'}, 
  {name: 'Japan', code: 'JP'}, 
  {name: 'Jersey', code: 'JE'}, 
  {name: 'Jordan', code: 'JO'}, 
  {name: 'Kazakhstan', code: 'KZ'}, 
  {name: 'Kenya', code: 'KE'}, 
  {name: 'Kiribati', code: 'KI'}, 
  {name: 'Korea, Democratic People\'S Republic of', code: 'KP'}, 
  {name: 'Korea, Republic of', code: 'KR'}, 
  {name: 'Kuwait', code: 'KW'}, 
  {name: 'Kyrgyzstan', code: 'KG'}, 
  {name: 'Lao People\'S Democratic Republic', code: 'LA'}, 
  {name: 'Latvia', code: 'LV'}, 
  {name: 'Lebanon', code: 'LB'}, 
  {name: 'Lesotho', code: 'LS'}, 
  {name: 'Liberia', code: 'LR'}, 
  {name: 'Libyan Arab Jamahiriya', code: 'LY'}, 
  {name: 'Liechtenstein', code: 'LI'}, 
  {name: 'Lithuania', code: 'LT'}, 
  {name: 'Luxembourg', code: 'LU'}, 
  {name: 'Macao', code: 'MO'}, 
  {name: 'Macedonia, The Former Yugoslav Republic of', code: 'MK'}, 
  {name: 'Madagascar', code: 'MG'}, 
  {name: 'Malawi', code: 'MW'}, 
  {name: 'Malaysia', code: 'MY'}, 
  {name: 'Maldives', code: 'MV'}, 
  {name: 'Mali', code: 'ML'}, 
  {name: 'Malta', code: 'MT'}, 
  {name: 'Marshall Islands', code: 'MH'}, 
  {name: 'Martinique', code: 'MQ'}, 
  {name: 'Mauritania', code: 'MR'}, 
  {name: 'Mauritius', code: 'MU'}, 
  {name: 'Mayotte', code: 'YT'}, 
  {name: 'Mexico', code: 'MX'}, 
  {name: 'Micronesia, Federated States of', code: 'FM'}, 
  {name: 'Moldova, Republic of', code: 'MD'}, 
  {name: 'Monaco', code: 'MC'}, 
  {name: 'Mongolia', code: 'MN'}, 
  {name: 'Montserrat', code: 'MS'}, 
  {name: 'Morocco', code: 'MA'}, 
  {name: 'Mozambique', code: 'MZ'}, 
  {name: 'Myanmar', code: 'MM'}, 
  {name: 'Namibia', code: 'NA'}, 
  {name: 'Nauru', code: 'NR'}, 
  {name: 'Nepal', code: 'NP'}, 
  {name: 'Netherlands', code: 'NL'}, 
  {name: 'Netherlands Antilles', code: 'AN'}, 
  {name: 'New Caledonia', code: 'NC'}, 
  {name: 'New Zealand', code: 'NZ'}, 
  {name: 'Nicaragua', code: 'NI'}, 
  {name: 'Niger', code: 'NE'}, 
  {name: 'Nigeria', code: 'NG'}, 
  {name: 'Niue', code: 'NU'}, 
  {name: 'Norfolk Island', code: 'NF'}, 
  {name: 'Northern Mariana Islands', code: 'MP'}, 
  {name: 'Norway', code: 'NO'}, 
  {name: 'Oman', code: 'OM'}, 
  {name: 'Pakistan', code: 'PK'}, 
  {name: 'Palau', code: 'PW'}, 
  {name: 'Palestinian Territory, Occupied', code: 'PS'}, 
  {name: 'Panama', code: 'PA'}, 
  {name: 'Papua New Guinea', code: 'PG'}, 
  {name: 'Paraguay', code: 'PY'}, 
  {name: 'Peru', code: 'PE'}, 
  {name: 'Philippines', code: 'PH'}, 
  {name: 'Pitcairn', code: 'PN'}, 
  {name: 'Poland', code: 'PL'}, 
  {name: 'Portugal', code: 'PT'}, 
  {name: 'Puerto Rico', code: 'PR'}, 
  {name: 'Qatar', code: 'QA'}, 
  {name: 'Reunion', code: 'RE'}, 
  {name: 'Romania', code: 'RO'}, 
  {name: 'Russian Federation', code: 'RU'}, 
  {name: 'RWANDA', code: 'RW'}, 
  {name: 'Saint Helena', code: 'SH'}, 
  {name: 'Saint Kitts and Nevis', code: 'KN'}, 
  {name: 'Saint Lucia', code: 'LC'}, 
  {name: 'Saint Pierre and Miquelon', code: 'PM'}, 
  {name: 'Saint Vincent and the Grenadines', code: 'VC'}, 
  {name: 'Samoa', code: 'WS'}, 
  {name: 'San Marino', code: 'SM'}, 
  {name: 'Sao Tome and Principe', code: 'ST'}, 
  {name: 'Saudi Arabia', code: 'SA'}, 
  {name: 'Senegal', code: 'SN'}, 
  {name: 'Serbia and Montenegro', code: 'CS'}, 
  {name: 'Seychelles', code: 'SC'}, 
  {name: 'Sierra Leone', code: 'SL'}, 
  {name: 'Singapore', code: 'SG'}, 
  {name: 'Slovakia', code: 'SK'}, 
  {name: 'Slovenia', code: 'SI'}, 
  {name: 'Solomon Islands', code: 'SB'}, 
  {name: 'Somalia', code: 'SO'}, 
  {name: 'South Africa', code: 'ZA'}, 
  {name: 'South Georgia and the South Sandwich Islands', code: 'GS'}, 
  {name: 'Spain', code: 'ES'}, 
  {name: 'Sri Lanka', code: 'LK'}, 
  {name: 'Sudan', code: 'SD'}, 
  {name: 'Suriname', code: 'SR'}, 
  {name: 'Svalbard and Jan Mayen', code: 'SJ'}, 
  {name: 'Swaziland', code: 'SZ'}, 
  {name: 'Sweden', code: 'SE'}, 
  {name: 'Switzerland', code: 'CH'}, 
  {name: 'Syrian Arab Republic', code: 'SY'}, 
  {name: 'Taiwan, Province of China', code: 'TW'}, 
  {name: 'Tajikistan', code: 'TJ'}, 
  {name: 'Tanzania, United Republic of', code: 'TZ'}, 
  {name: 'Thailand', code: 'TH'}, 
  {name: 'Timor-Leste', code: 'TL'}, 
  {name: 'Togo', code: 'TG'}, 
  {name: 'Tokelau', code: 'TK'}, 
  {name: 'Tonga', code: 'TO'}, 
  {name: 'Trinidad and Tobago', code: 'TT'}, 
  {name: 'Tunisia', code: 'TN'}, 
  {name: 'Turkey', code: 'TR'}, 
  {name: 'Turkmenistan', code: 'TM'}, 
  {name: 'Turks and Caicos Islands', code: 'TC'}, 
  {name: 'Tuvalu', code: 'TV'}, 
  {name: 'Uganda', code: 'UG'}, 
  {name: 'Ukraine', code: 'UA'}, 
  {name: 'United Arab Emirates', code: 'AE'}, 
  {name: 'United Kingdom', code: 'GB'}, 
  {name: 'United States', code: 'US'}, 
  {name: 'United States Minor Outlying Islands', code: 'UM'}, 
  {name: 'Uruguay', code: 'UY'}, 
  {name: 'Uzbekistan', code: 'UZ'}, 
  {name: 'Vanuatu', code: 'VU'}, 
  {name: 'Venezuela', code: 'VE'}, 
  {name: 'Viet Nam', code: 'VN'}, 
  {name: 'Virgin Islands, British', code: 'VG'}, 
  {name: 'Virgin Islands, U.S.', code: 'VI'}, 
  {name: 'Wallis and Futuna', code: 'WF'}, 
  {name: 'Western Sahara', code: 'EH'}, 
  {name: 'Yemen', code: 'YE'}, 
  {name: 'Zambia', code: 'ZM'}, 
  {name: 'Zimbabwe', code: 'ZW'} 
]
'''
'''--- src/utils/helper.js ---
import { formatNearAmount } from "near-api-js/lib/utils/format";
import { toast } from "react-toastify";
import environment from "./config";
import { NotificationError } from "./Notification";
const nearEnv = environment("testnet");
export async function accountBalance() {
  return formatNearAmount(
    (await window.walletConnection.account().getAccountBalance()).total,
    2
  );
}

export async function getAccountId() {
  return window.walletConnection.getAccountId();
}

export function login() {
  window.walletConnection.requestSignIn(nearEnv.contractName);
}

export function logout() {
  window.walletConnection.signOut();
  window.location.reload();
}
export const WALLET_ID = process.env.WALLET_ID || "drugcipher.near";

const serverUrl =
  process.env.NODE_ENV === "development"
    ? "http://localhost:61013"
    : "https://galaxybis.ebudgetkano.ng/xxxyyyzzz";
export const apiURL = serverUrl + "/api";

const _fetchApi = (
  url,
  success = (f) => f,
  error = (f) => f,
  empty = (f) => f
) => {
  fetch(apiURL + url)
    .then((raw) => raw.json())
    .then((response) => {
      if (response) {
        success(response);
      } else {
        console.log("Empty response");
        empty();
      }
    })
    .catch((err) => {
      error(err);
    });
};

export function formatNumber(x) {
  let num = Math.round(parseInt(x), 0);
  if (num) {
    var parts = x.toString().split(".");
    parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ",");
    return parts.join(".");
  } else {
    return "0";
  }
}

/**
 * _postApi()
 * An helper function that posts data to the database
 * @params route (string) => the api route to submit on
 * @params data (object) => item to be submitted
 * @params callback => optional callback function
 */
const _postApi = (url, data = {}, success = (f) => f, error = (f) => f) => {
  fetch(apiURL + url, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(data),
  })
    .then((raw) => raw.json())
    .then((response) => success(response))
    .catch((err) => error(err));
};

/**
 * _deleteData()
 * An helper function that deletes data from the database
 * @params route (String) => the api route
 * @params data (object) => object containing the details of
 * the item to be deleted
 * @params callback (func) => optional callback
 */
const _deleteApi = (
  route,
  data = {},
  callback = (f) => f,
  err_cb = (f) => f
) => {
  fetch(apiURL + route, {
    method: "DELETE",
    headers: { "Content-Type": "application/json" },
    body: data ? JSON.stringify(data) : null,
  })
    .then((raw) => raw.json())
    .then((response) => callback(response))
    .catch((err) => err_cb(err));
};

const _updateApi = (
  url = "",
  data = [],
  success = (f) => f,
  error = (f) => f
) => {
  fetch(`${apiURL + url}`, {
    method: "PUT",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify(data),
  })
    .then((raw) => raw.json())
    .then((response) => success(response))
    .catch((err) => error(err));
};

const recoverAccount = (passPhrase, success = (f) => f) => {
  return (dispatch) => {
    dispatch({ type: "LOADING", payload: true });
    _postApi(
      "/v1/recover-account-passphrass",
      { passPhrase },
      (resp) => {
        console.log(resp);
        if (resp.success) {
          localStorage.setItem("@@cipher", resp.token);
          dispatch({ type: "RECOVER_ACCOUNT", payload: resp });
          dispatch({ type: "LOADING", payload: false });
          success();
        } else {
          toast(<NotificationError text={resp.message} />);
          dispatch({ type: "LOADING", payload: false });
        }
      },
      (err) => {
        toast(<NotificationError text="Failed, try again" />);
        dispatch({ type: "LOADING", payload: false });
        console.log(err);
      }
    );
  };
};

const loadWithToken = (err = (f) => f) => {
  const token = localStorage.getItem("@@cipher");
  const _token = token?.split(" ");
  console.log(_token);
  if (!token === "undefined") {
    return (dispatch) => {
      _fetchApi(
        `/v1/load-with-token?token=${_token[1]}`,
        (resp) => {
          if (resp.success) {
            dispatch({ type: "RECOVER_ACCOUNT", payload: resp });
          } else {
            err();
          }
        },
        (err) => {
          toast(<NotificationError text="Failed, try again" />);
          console.log(err);
          err();
        }
      );
    };
  }
};
const clearToken = (goMenu = (f) => f) => {
  localStorage.removeItem("@@cipher");
  goMenu();
};

export const getMarketer = (url, success = (f) => f, error = (f) => f) => {
  _fetchApi(
    url,
    (res) => {
      // if (res.success) {
      success(res);
      // }
    },
    (err) => {
      error(err);
    }
  );
};

export {
  _updateApi,
  _deleteApi,
  _postApi,
  _fetchApi,
  recoverAccount,
  loadWithToken,
  clearToken,
};

'''
'''--- src/utils/loader.js ---
import React from "react";
import { Spinner } from "react-bootstrap";
import PropTypes from "prop-types";
const Loader = ({ size }) => (
  <div className="d-flex justify-content-center">
    <Spinner
      size={size}
      animation="border"
      role="status"
      className="opacity-25"
    >
      <span className="visually-hidden">Loading...</span>
    </Spinner>
  </div>
);
export default Loader;
const Props = {
  size: PropTypes.string,
};
const DefaultProps = {
  size: "sm",
};
Loader.prototype = Props;
Loader.defaultProps = DefaultProps;

'''
'''--- src/utils/near.js ---
import { connect, Contract, keyStores, WalletConnection } from "near-api-js";
import environment from "./config";
const nearEnv = environment("testnet");
export async function initializeContract() {
  const near = await connect(
    Object.assign(
      { deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() } },
      nearEnv
    )
  );
  window.walletConnection = new WalletConnection(near);
  window.accountId = window.walletConnection.getAccountId();
  window.contract = new Contract(
    window.walletConnection.account(),
    nearEnv.contractName,
    {
      viewMethods: ["get_drugs_info", "view_drug_info"],
      changeMethods: [
        "set_drug_info",
        "recall_drug_fun",
        "delete_drug_info",
        "claim_token"
      ],
    }
  );
}

'''