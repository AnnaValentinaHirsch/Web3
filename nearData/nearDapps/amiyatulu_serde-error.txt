*GitHub Repository "amiyatulu/serde-error"*

'''--- Cargo.toml ---
[package]
name = "serde-error"
version = "0.1.0"
authors = ["Amiya Behera <amiyatulu@gmail.com>"]
edition = "2018"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
near-sdk = "2.0.0"
wee_alloc = "0.4.5"

[profile.release]
codegen-units = 1
# Tell `rustc` to optimize for small code size.
opt-level = "z"
lto = true
debug = false
panic = "abort"
overflow-checks = true

[workspace]
members = []

'''
'''--- README.md ---
# serde-error

```
cargo build --target wasm32-unknown-unknown --release
   Compiling serde-error v0.1.0 (/home/amiya/Documents/workspace/blockchain/test_serialize_error/contract)
error[E0277]: the trait bound `StatusMessage: near_sdk::serde::Serialize` is not satisfied
    --> src/lib.rs:14:1
     |
14   | #[near_bindgen]
     | ^^^^^^^^^^^^^^^ the trait `near_sdk::serde::Serialize` is not implemented for `StatusMessage`
     | 
    ::: /home/amiya/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.59/src/ser.rs:2189:17
     |
2189 |     T: ?Sized + Serialize,
     |                 --------- required by this bound in `near_sdk::serde_json::to_vec`
     |
     = note: this error originates in an attribute macro (in Nightly builds, run with -Z macro-backtrace for more info)

error: aborting due to previous error

For more information about this error, try `rustc --explain E0277`.
error: could not compile `serde-error`.

To learn more, run the command again with --verbose.
```
'''
'''--- src/lib.rs ---
use near_sdk::{env, near_bindgen};
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::collections::UnorderedMap;

#[global_allocator]
static ALLOC: wee_alloc::WeeAlloc = wee_alloc::WeeAlloc::INIT;

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct StatusMessage {
    records: UnorderedMap<String, String>,
}

#[near_bindgen]
impl StatusMessage {
    pub fn set_status(&mut self, message: String) {
        env::log(b"A");
        let account_id = env::signer_account_id();
        self.records.insert(&account_id, &message);
    }

    pub fn get_status(&self, account_id: String) -> Option<String> {
        env::log(b"A");
        return self.records.get(&account_id);
    }

    pub fn new() -> Self {
        let id = "68dbf390-0b13-4db1-bb7d-9bf6ac5d23ab".to_string().into_bytes();
        Self{
            records:UnorderedMap::new(id)
        }
    }
}

impl Default for StatusMessage {
    fn default() -> Self {
        panic!("StatusMessage should be initialized before usage")
    }
}

#[cfg(not(target_arch = "wasm32"))]
#[cfg(test)]
mod tests {
    use super::*;
    use near_sdk::MockedBlockchain;
    use near_sdk::{testing_env, VMContext};

    fn get_context(input: Vec<u8>, is_view: bool) -> VMContext {
        VMContext {
            current_account_id: "alice_near".to_string(),
            signer_account_id: "bob_near".to_string(),
            signer_account_pk: vec![0, 1, 2],
            predecessor_account_id: "carol_near".to_string(),
            input,
            block_index: 0,
            block_timestamp: 0,
            account_balance: 0,
            account_locked_balance: 0,
            storage_usage: 0,
            attached_deposit: 0,
            prepaid_gas: 10u64.pow(18),
            random_seed: vec![0, 1, 2],
            is_view,
            output_data_receivers: vec![],
            epoch_height: 0,
        }
    }

    #[test]
    fn set_get_message() {
        let context = get_context(vec![], false);
        testing_env!(context);
        let mut contract = StatusMessage::new();
        contract.set_status("hello".to_string());
        assert_eq!(
            "hello".to_string(),
            contract.get_status("bob_near".to_string()).unwrap()
        );
    }

    #[test]
    fn get_nonexistent_message() {
        let context = get_context(vec![], true);
        testing_env!(context);
        let contract = StatusMessage::new();
        assert_eq!(None, contract.get_status("francis.near".to_string()));
    }
}
'''