*GitHub Repository "omerfkaya/GUESS-ME"*

'''--- README.md ---
# Near Game

It is a game like well known game [Wordle](https://www.nytimes.com/games/wordle/index.html).

## Game Life Cycle

* Owner starts a round with calling startNewRound function with a word lenght is between 5 and 15.
* Users try to guess the word with calling makeGuess and try to find in 5 guess.
* Game will give hints to users with 3 state 
    * If a letter is in the word and in the correct spot returns 0
    * If a letter is in the word but in wrong spot returns 1
    * If a letter is not in the word returns 2
* When owner creates a new round guess limits are resetted.

## Example Game

Let assume word is WANTS.

* If user's guess is WEARY contract will return [0, 2, 1, 2, 2]. And user will know first letter is W and should move A to another spot.
* If user's guess is WAKEN contract will return [0, 0, 2, 2, 2]. And user will know A is in right spot now.
* If user's guess is PILLS contract will return [2, 2, 2, 2, 0]. And user will know any of the letter not in the word.

## Deploy

* Cloning the project and after cloning the project please run `yarn` in order to install all of the necessary packages for the project to run correctly. 
* Building and Deploying the contract. The contract is located in under the assembly folders, after editing the contract you can run `yarn build` in order to build the contract and get the .wasm file.
* If you want to build and deploy the contract for update, at the same time, you can run `yarn dev`
* If you create a new contract, you can run `yarn firstDev`
* After the contract is deployed, it is necessary to run the following command in the terminal in order to be able to run the contract `export CONTRACT=ACCOUNT_ID`

## Functions

* startNewRound(word: string)
    * This function only can called from owner and creates a new round with new word.
    * Example call `near call $CONTRACT startNewRound '{"word": "pinkpanter"}' --accountId $NEAR_ACCOUNT`
* getGuessLeft()
    * This function returns a users guess left
    * Example call `near call $CONTRACT getGuessLeft '' --accountId $NEAR_ACCOUNT`
* getWordLenght()
    * This function returns current round's word lenght
    * Example call `near call $CONTRACT getWordLenght '' --accountId $NEAR_ACCOUNT`
* makeGuess(guess: string)
    * This function called for making guesses by users
    * Example call `near call $CONTRACT makeGuess '{"guess": "petepanter"}' --accountId $NEAR_ACCOUNT`

## Scripts 

* You can simply run `scripts/deploy.sh` for deploying contract.

* After deploy you should call this with contract id, `export CONTRACT=ACCOUNT_ID` after that you can simply call `scripts/run.sh` to test.
## Near Features

* Saving users guess count on **PersistentUnorderedMap**.
* Saving every word in rounds on **storage**
* Make sure round starter is the owner with **Context**
* Checking limits with **assert** 

## Loom Video

* It exceeds file limit of git so https://www.loom.com/share/11a31e9e8ff64d199189ee59156f9a73 this is the link of loom.

'''
'''--- asconfig.json ---
{
  "extends": "near-sdk-as/asconfig.json"
}
'''
'''--- assembly/as_types.d.ts ---
/// <reference types="near-sdk-as/assembly/as_types" />
'''
'''--- assembly/index.ts ---
import { Context, PersistentUnorderedMap } from "near-sdk-as";
import { Game } from "./model";

@nearBindgen
export class Contract {
  private game: Game;
  private guesses: PersistentUnorderedMap<string, i32>  = new PersistentUnorderedMap<string, i32>("p2");

  constructor(owner: string) {
    this.game = new Game(owner);
    this.guesses.clear();
  }

  get_owner(): string {
    return this.game.owner;
  }

  @mutateState()
  makeGuess(guess: string): Array<i32> {
    assert(this.guesses.contains(Context.sender) ? this.guesses.getSome(Context.sender) < 5 : true, "You exceed your guess limit!");
    this.guesses.set(Context.sender, this.guesses.contains(Context.sender) ? this.guesses.getSome(Context.sender) + 1 : 1);
    return this.game.makeGuess(guess);
  }

  @mutateState()
  startNewRound(word: string): void {
    this.game.startNewRound(word);
    this.guesses.clear();
  }

  getGuessLeft() : i32 {
    return this.guesses.contains(Context.sender) ? 5 - this.guesses.getSome(Context.sender) : 5;
  }

  getWordLenght(): i32 {
    return this.game.getWordLenght();
  }
  
}

'''
'''--- assembly/model.ts ---
// contract/assembly/model.ts
import { Context, storage } from "near-sdk-as";

@nearBindgen
export class Game {
  round: u32;
  owner: string;
  constructor(_owner: string) {
    this.round = -1;
    this.owner = _owner;
  }

  startNewRound(word: string) : void {
    assert(this.owner == Context.sender, "You cant start a new round!");
    assert(word.length >= 5 && word.length <= 15, "Word lenght should be between 5 and 15!");
    this.round++;
    storage.set(this.round.toString(), word);
  }

  getWordLenght(): i32 {
    return storage.contains(this.round.toString()) ? storage.get<string>(this.round.toString())!.length : -1;
  }

  makeGuess(guess: string) : Array<i32> {
    assert(this.round != -1, "Game not started!");
    assert(guess.length == this.getWordLenght(), "You should check words lenght!");
    return this.checkWord(guess);
  }

  checkWord(guess: string) : Array<i32> {
    let vals : Array<i32> = new Array<i32>();
    const wordOfRound = storage.get<string>(this.round.toString())!;
    for(let i = 0; i < guess.length; i++){
      if(guess.at(i) == wordOfRound.at(i)){
        vals.push(0);
      } 
      else if(wordOfRound.indexOf(guess.at(i)) != -1){
        vals.push(1);
      }
      else {
        vals.push(2);
      }
    }
    return vals;
  }
}
'''
'''--- assembly/tsconfig.json ---
{
  "extends": "assemblyscript/std/assembly.json",
  "include": [
    "./**/*.ts"
  ]
}
'''
'''--- index.html ---
<!DOCTYPE html>
<html lang="en">
<head>
<script type="module">
import { add } from "./build/release.js";
document.body.innerText = add(1, 2);
</script>
</head>
<body></body>
</html>

'''
'''--- neardev/dev-account.env ---
CONTRACT_NAME=dev-1651879134161-58719482453164
'''
'''--- package.json ---
{
  "name": "near-hw",
  "version": "1.0.0",
  "main": "index.js",
  "license": "MIT",
  "dependencies": {
    "@assemblyscript/loader": "^0.20.6",
    "asbuild": "^0.2.0",
    "assemblyscript": "^0.20.6",
    "near-cli": "^3.2.0",
    "near-sdk-as": "^3.2.3"
  },
  "type": "module",
  "exports": {
    ".": {
      "import": "./build/release.js",
      "types": "./build/release.d.ts"
    }
  },
  "scripts": {
    "build:release": "asb",
    "deploywi": "near dev-deploy build/release/near-hw.wasm  --initFunction new --initArgs '{\"owner\" : \"bigs.testnet\"}'",
    "deploy": "near dev-deploy build/release/near-hw.wasm",
    "dev": "yarn build:release && yarn deploy",
    "test": "asp"
  },
  "devDependencies": {
    "assemblyscript": "^0.20.6"
  }
}
'''
'''--- scripts/deploy.sh ---
echo ---------------------------------------------------------
echo "Step 1: Build the contract (may take a few seconds)"
echo ---------------------------------------------------------
yarn build:release
echo ---------------------------------------------------------
echo "Step 2: Deploy the contract"
echo ---------------------------------------------------------
echo
yarn deploywi

exit 0
'''
'''--- scripts/run.sh ---
echo ---------------------------------------------------------
echo "Step 1: Create a game"
echo ---------------------------------------------------------

near call $CONTRACT startNewRound '{"word": "pinkpanter"}' --accountId $NEAR_ACCOUNT

echo ---------------------------------------------------------
echo "Step 2: Get Word Lenght Left"
echo ---------------------------------------------------------
echo

WORDLEN=$(near call $CONTRACT getWordLenght '' --accountId $NEAR_ACCOUNT | tail -c 3)

echo $WORDLEN
echo ---------------------------------------------------------
echo "Step 2: Guesses Left"
echo ---------------------------------------------------------
echo

GUESSLEFT=$(near call $CONTRACT getGuessLeft '' --accountId $NEAR_ACCOUNT | tail -c 2)

echo $GUESSLEFT
echo ---------------------------------------------------------
echo "Step 3: Make a guess"
echo ---------------------------------------------------------

HINT=$(near call $CONTRACT makeGuess '{"guess": "petepanter"}' --accountId $NEAR_ACCOUNT | tail -c 37)
echo $HINT

echo ---------------------------------------------------------
echo "Step 4: Guesses Left"
echo ---------------------------------------------------------
echo

GUESSLEFT=$(near call $CONTRACT getGuessLeft '' --accountId $NEAR_ACCOUNT | tail -c 2)

echo $GUESSLEFT
'''
'''--- tests/index.js ---
import assert from "assert";
import { add } from "../build/debug.js";
assert.strictEqual(add(1, 2), 3);
console.log("ok");

'''