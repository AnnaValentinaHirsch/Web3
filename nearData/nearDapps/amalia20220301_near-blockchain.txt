*GitHub Repository "amalia20220301/near-blockchain"*

'''--- .env ---
WORDS="kidney prosper snack glance stick piece chronic tape bachelor drama net cradle"
PASSPHASE="hurdle month axis rare define pledge correct spot dinosaur world company castle"
'''
'''--- .idea/inspectionProfiles/Project_Default.xml ---
<component name="InspectionProjectProfileManager">
  <profile version="1.0">
    <option name="myName" value="Project Default" />
    <inspection_tool class="Eslint" enabled="true" level="WARNING" enabled_by_default="true" />
  </profile>
</component>
'''
'''--- .idea/modules.xml ---
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ProjectModuleManager">
    <modules>
      <module fileurl="file://$PROJECT_DIR$/.idea/near-blockchain.iml" filepath="$PROJECT_DIR$/.idea/near-blockchain.iml" />
    </modules>
  </component>
</project>
'''
'''--- .idea/vcs.xml ---
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="VcsDirectoryMappings">
    <mapping directory="$PROJECT_DIR$" vcs="Git" />
  </component>
</project>
'''
'''--- README.md ---
# Near Blockchain

```shell
yarn global add near-cli
```

## Mint NFT

```shell
export NEARID=demo0617.testnet
# 该操作会在本地生成一个credentials文件
near login
near call example-nft.testnet nft_mint '{"token_id": "demo0617", "receiver_id": "'$NEARID'", "token_metadata": { "title": "GO TEAM", "description": "The Team Goes", "media": "https://bafybeidl4hjbpdr6u6xvlrizwxbrfcyqurzvcnn5xoilmcqbxfbdwrmp5m.ipfs.dweb.link/", "copies": 1}}' --accountId $NEARID --deposit 0.1
```
'''
'''--- package.json ---
{
  "name": "near-blockchain",
  "version": "1.0.0",
  "main": "index.js",
  "type": "module",
  "repository": "git@github.com:amalia20220301/near-blockchain.git",
  "author": "mrzhao <zhaomengru2018@gmail.com>",
  "license": "MIT",
  "dependencies": {
    "@keystonehq/bc-ur-registry-near": "^0.2.4-alpha.4",
    "bip39": "^3.0.4",
    "borsh": "^0.7.0",
    "bs58": "^5.0.0",
    "dotenv": "^16.0.1",
    "ed25519-hd-key": "^1.2.0",
    "js-sha256": "^0.9.0",
    "lodash": "^4.17.21",
    "near-api-js": "^0.45.1",
    "tweetnacl": "^1.0.3"
  }
}

'''
'''--- src/address.js ---
import 'dotenv/config'
import nacl from 'tweetnacl';
import { derivePath, getMasterKeyFromSeed, getPublicKey } from 'ed25519-hd-key'
import bip39 from 'bip39'
import bs58 from 'bs58';

function buf2hex(buffer) { // buffer is an ArrayBuffer
    return [...new Uint8Array(buffer)]
        .map(x => x.toString(16).padStart(2, '0'))
        .join('');
}

export const getAddress = (path, seed) => {
    const { key } = derivePath(path, seed.toString('hex'));
    const keyPair = nacl.sign.keyPair.fromSeed(key);
    console.log('------public key---------');
    console.log(Buffer.from(keyPair.publicKey).toString('hex'));
    console.log('---------------');
    const publicKey = 'ed25519:' + bs58.encode(Buffer.from(keyPair.publicKey))
    const secretKey = 'ed25519:' + bs58.encode(Buffer.from(keyPair.secretKey))
    console.log('-------getAddress--------');
    console.log(bs58.encode(Buffer.from(keyPair.secretKey)));
    console.log('---------------');
    return {publicKey, secretKey}
}

export const getPrivKey = (path) => {
    const seed = bip39.mnemonicToSeedSync(process.env.WORDS)
    const { key } = derivePath(path, seed.toString('hex'))
    console.log('-------getPrivKey--------');
    console.log(key);
    console.log('---------------');
    return nacl.sign.keyPair.fromSeed(key).secretKey
}

const path = "m/44'/397'/0'/0'/1'"

const passphase_path =  "m/44'/397'/0'"

// console.log(getAddress(path, bip39.mnemonicToSeedSync(process.env.WORDS)));
console.log('------naksh-mrzhao.testnet---------')
console.log(getAddress("m/44'/397'/0'", bip39.mnemonicToSeedSync(process.env.WORDS)))
console.log('---------------')

'''
'''--- src/sig.js ---
import nearAPI from "near-api-js";
import {utils, transactions} from 'near-api-js';
import {sha256} from "js-sha256";
const keyPair = new utils.KeyPairEd25519("4NvBi5Wf2iPwVbFKY6uHzHaa5zrdUMAAEQKy5QBcvg2ehsruo4qzRGBYvTXt3K5EwP28ibZsXiKft4Gr8hEUDKJr");
console.log('---------------');
console.log(keyPair);
console.log('---------------');
const msg = {
    "type": "Buffer",
    "data": [
        64,
        0,
        0,
        0,
        53,
        56,
        98,
        99,
        50,
        52,
        53,
        57,
        56,
        48,
        52,
        100,
        50,
        101,
        100,
        56,
        55,
        54,
        52,
        49,
        102,
        98,
        100,
        101,
        52,
        48,
        98,
        48,
        100,
        57,
        54,
        51,
        52,
        49,
        99,
        98,
        102,
        48,
        51,
        49,
        51,
        98,
        55,
        100,
        102,
        52,
        98,
        99,
        52,
        102,
        54,
        48,
        102,
        97,
        50,
        102,
        52,
        50,
        99,
        54,
        48,
        50,
        99,
        51,
        0,
        88,
        188,
        36,
        89,
        128,
        77,
        46,
        216,
        118,
        65,
        251,
        222,
        64,
        176,
        217,
        99,
        65,
        203,
        240,
        49,
        59,
        125,
        244,
        188,
        79,
        96,
        250,
        47,
        66,
        198,
        2,
        195,
        130,
        119,
        45,
        16,
        188,
        84,
        0,
        0,
        16,
        0,
        0,
        0,
        100,
        101,
        109,
        111,
        48,
        54,
        49,
        55,
        46,
        116,
        101,
        115,
        116,
        110,
        101,
        116,
        50,
        84,
        12,
        232,
        6,
        58,
        32,
        57,
        226,
        227,
        156,
        125,
        181,
        128,
        193,
        214,
        122,
        139,
        152,
        245,
        33,
        46,
        29,
        162,
        226,
        250,
        13,
        116,
        194,
        233,
        146,
        81,
        1,
        0,
        0,
        0,
        3,
        0,
        0,
        128,
        246,
        74,
        225,
        199,
        2,
        45,
        21,
        0,
        0,
        0,
        0,
        0,
        0
    ]
}
const hash = new Uint8Array(sha256.array("40000000353862633234353938303464326564383736343166626465343062306439363334316362663033313362376466346263346636306661326634326336303263330058bc2459804d2ed87641fbde40b0d96341cbf0313b7df4bc4f60fa2f42c602c382772d10bc5400001000000064656d6f303631372e746573746e65746c7dc492b2b935f45ad23ac76edd5eb33b942cb741b868e59421bd21de83b9b40100000003000080e3e0a35708873f000000000000"))
const sig = keyPair.sign(hash);
console.log('------sig---------');
console.log(sig);
console.log('---------------');

'''
'''--- src/tx.js ---
import {sha256} from "js-sha256";
import nacl from "tweetnacl";
import {getPrivKey} from "./address.js";
import _ from 'lodash';
import {derivePath} from "ed25519-hd-key";
import bip39 from "bip39";
export const signTx = (hdpath, message)=>{
    const privKey = getPrivKey(hdpath)
    const hash = new Uint8Array(sha256.array(message))
    console.log('------signTx---------');
    console.log(hash,nacl.sign.detached(hash, privKey), message);
    console.log('---------------');
    return nacl.sign.detached(hash, privKey);
}

export const verify = (hdPath, message, signature) =>{
    const seed = bip39.mnemonicToSeedSync(process.env.WORDS);
    const { key } = derivePath(hdPath, seed.toString('hex'));
    const keyPair = nacl.sign.keyPair.fromSeed(key);
    const hash = new Uint8Array(sha256.array(message))
    return nacl.sign.detached.verify(hash, signature, keyPair.publicKey)
}

const pubkey = {
    "type": "Buffer",
    "data": [
        88,
        188,
        36,
        89,
        128,
        77,
        46,
        216,
        118,
        65,
        251,
        222,
        64,
        176,
        217,
        99,
        65,
        203,
        240,
        49,
        59,
        125,
        244,
        188,
        79,
        96,
        250,
        47,
        66,
        198,
        2,
        195
    ]
};

console.log('---------------');
console.log(Buffer.from(pubkey.data).toString('hex'));
console.log('---------------');

const publicKey={
    "keyType": 0,
    "data": {
        "type": "Buffer",
        "data": [
            88,
            188,
            36,
            89,
            128,
            77,
            46,
            216,
            118,
            65,
            251,
            222,
            64,
            176,
            217,
            99,
            65,
            203,
            240,
            49,
            59,
            125,
            244,
            188,
            79,
            96,
            250,
            47,
            66,
            198,
            2,
            195
        ]
    }
}
const txData= {
        "signerId": "58bc2459804d2ed87641fbde40b0d96341cbf0313b7df4bc4f60fa2f42c602c3",
        "publicKey": {
            "keyType": 0,
            "data": {
                "type": "Buffer",
                "data": [
                    88,
                    188,
                    36,
                    89,
                    128,
                    77,
                    46,
                    216,
                    118,
                    65,
                    251,
                    222,
                    64,
                    176,
                    217,
                    99,
                    65,
                    203,
                    240,
                    49,
                    59,
                    125,
                    244,
                    188,
                    79,
                    96,
                    250,
                    47,
                    66,
                    198,
                    2,
                    195
                ]
            }
        },
        "nonce": 93166702000002,
        "receiverId": "demo0617.testnet",
        "actions": [
            {
                "transfer": {
                    "deposit": "100000000000000000000000"
                },
                "enum": "transfer"
            }
        ],
        "blockHash": {
            "type": "Buffer",
            "data": [
                217,
                42,
                174,
                212,
                71,
                55,
                126,
                89,
                209,
                148,
                207,
                78,
                178,
                32,
                31,
                162,
                94,
                80,
                19,
                30,
                196,
                17,
                123,
                152,
                71,
                49,
                170,
                190,
                56,
                9,
                72,
                187
            ]
        },
        "signature": {
        "keyType": 0,
        "data": {
            "type": "Buffer",
            "data": [
                86,
                34,
                161,
                62,
                59,
                80,
                122,
                32,
                146,
                99,
                233,
                178,
                189,
                43,
                25,
                237,
                183,
                89,
                49,
                93,
                183,
                191,
                141,
                186,
                113,
                204,
                177,
                242,
                26,
                162,
                213,
                178,
                142,
                99,
                243,
                247,
                2,
                14,
                179,
                169,
                153,
                133,
                32,
                76,
                112,
                108,
                51,
                60,
                156,
                162,
                98,
                15,
                231,
                189,
                123,
                41,
                28,
                98,
                228,
                131,
                114,
                55,
                236,
                1
            ]
        }
    }
}

import nearAPI from "near-api-js";
import borsh from 'borsh';
import {transactions} from 'near-api-js';
const { Connection } = nearAPI;
const connection = Connection.fromConfig({
    networkId: 'testnet',
    provider: { type: 'JsonRpcProvider', args: { url: 'https://rpc.testnet.near.org' } },
    signer:{}
})
// const tx = transactions.createTransaction(txData);
// console.log('---------------');
// console.log(tx);
// console.log('---------------');
// console.log('---------------');
// console.log(transactions.SCHEMA);
// console.log('---------------');
// const signedTx = borsh.serialize(transactions.SCHEMA, txData);
// connection.provider.sendTransaction(signedTx);

const bytes = {
    "type": "Buffer",
    "data": [
        64,
        0,
        0,
        0,
        53,
        56,
        98,
        99,
        50,
        52,
        53,
        57,
        56,
        48,
        52,
        100,
        50,
        101,
        100,
        56,
        55,
        54,
        52,
        49,
        102,
        98,
        100,
        101,
        52,
        48,
        98,
        48,
        100,
        57,
        54,
        51,
        52,
        49,
        99,
        98,
        102,
        48,
        51,
        49,
        51,
        98,
        55,
        100,
        102,
        52,
        98,
        99,
        52,
        102,
        54,
        48,
        102,
        97,
        50,
        102,
        52,
        50,
        99,
        54,
        48,
        50,
        99,
        51,
        0,
        88,
        188,
        36,
        89,
        128,
        77,
        46,
        216,
        118,
        65,
        251,
        222,
        64,
        176,
        217,
        99,
        65,
        203,
        240,
        49,
        59,
        125,
        244,
        188,
        79,
        96,
        250,
        47,
        66,
        198,
        2,
        195,
        130,
        119,
        45,
        16,
        188,
        84,
        0,
        0,
        16,
        0,
        0,
        0,
        100,
        101,
        109,
        111,
        48,
        54,
        49,
        55,
        46,
        116,
        101,
        115,
        116,
        110,
        101,
        116,
        125,
        207,
        50,
        194,
        156,
        42,
        55,
        159,
        147,
        14,
        164,
        243,
        118,
        138,
        122,
        153,
        216,
        180,
        110,
        239,
        251,
        151,
        92,
        73,
        71,
        250,
        191,
        152,
        20,
        147,
        201,
        201,
        1,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        227,
        200,
        102,
        108,
        83,
        70,
        123,
        2,
        0,
        0,
        0,
        0,
        0,
        0,
        36,
        94,
        22,
        66,
        169,
        182,
        145,
        149,
        55,
        19,
        10,
        61,
        221,
        139,
        8,
        16,
        109,
        239,
        126,
        6,
        70,
        214,
        178,
        202,
        1,
        187,
        222,
        243,
        166,
        25,
        146,
        98,
        176,
        156,
        169,
        17,
        4,
        20,
        198,
        125,
        3,
        122,
        171,
        198,
        71,
        156,
        155,
        32,
        37,
        179,
        36,
        226,
        48,
        16,
        208,
        109,
        233,
        181,
        170,
        175,
        105,
        143,
        186,
        13
    ]
}

// connection.provider.sendJsonRpc('broadcast_tx_commit', [Buffer.from(bytes.data).toString('base64')]).then(console.log)
'''
'''--- src/ur.js ---
import { NearSignRequest, NearSignature, CryptoMultiAccounts } from "@keystonehq/bc-ur-registry-near";
import { URDecoder, UREncoder } from "@ngraveio/bc-ur";
import nacl from 'tweetnacl';
import {signTx, verify} from './tx.js';
// signingMessage
const signMsgUR = "UR:NEAR-SIGN-REQUEST/OTADTPDAGDCNBBCYPEDWLNFETIMNFGTSDRWDZODKBAAOHDRPFZAEAEAEECETIDIAEYEEECESETDYEEIEEYIHIEETEMENEEEHIYIDIEIHEEDYIDDYIEESENEOEEEHIAIDIYDYEOEHEOIDEMIEIYEEIDIAEEIYENDYIYHSEYIYEEEYIAENDYEYIAEOAEHDRFDKHKLAGTDMTPKOFPZOUEFZPFTAIAFPSBWTEHFRKIWKRFGWHNZSDLFWSWAOSRLRKTDPBERFGHAEAEBEAEAEAEIEIHJNJLDYENEHEMDMJYIHJKJYJTIHJYGUVOVEHKMSATCWFMETVOFSIATAISKELBDKPFIAMTFZMDGMLOLRBEMWHGDNFGJTKPADAEAEAEAXAEAEAEOYWESFTOCWSATEAEAEAEAEAEAEAXTAADDYOEADLNCSDWYKCFADLGYKAEYKAOCYKSCNAYAAISOXEYZO";
const decodedSignMsgUR = URDecoder.decode(signMsgUR);
console.log('----decodedSignMsgUR-----------');
console.log(decodedSignMsgUR.cbor);
console.log('---------------');
const nearSignRequestDecoded = NearSignRequest.fromCBOR(decodedSignMsgUR.cbor);
const msg = nearSignRequestDecoded.getSignData()
// generate signature
const msgSig = signTx("m/44'/397'/0'", new Uint8Array(msg))
console.log('-------msgSig--------', new Uint8Array(msg), msgSig);

/*
console.log('-------verify--------');
console.log(verify("m/44'/397'/0'", msg, msgSig));
console.log('---------------');
*/

const nearMsgSignature = new NearSignature(Buffer.from(msgSig), nearSignRequestDecoded.getRequestId());
console.log('---------------');
console.log(nearSignRequestDecoded.getRequestId());
console.log('---------------');
const signatureUR = nearMsgSignature.toUREncoder(1000).nextPart();
console.log(signatureUR);
// 40000000353862633234353938303464326564383736343166626465343062306439363334316362663033313362376466346263346636306661326634326336303263330058bc2459804d2ed87641fbde40b0d96341cbf0313b7df4bc4f60fa2f42c602c382772d10bc5400001000000064656d6f303631372e746573746e65746c7dc492b2b935f45ad23ac76edd5eb33b942cb741b868e59421bd21de83b9b40100000003000080e3e0a35708873f000000000000

'''