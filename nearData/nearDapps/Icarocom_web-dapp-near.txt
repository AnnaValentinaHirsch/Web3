*GitHub Repository "Icarocom/web-dapp-near"*

'''--- .env ---
# Client side
NEXT_PUBLIC_API_URL="https://us-central1-catch-d1db1.cloudfunctions.net/api"
NEXT_PUBLIC_MEASUREMENT_ID="G-QLKHF7ZTGK"
NEXT_PUBLIC_APP_ID="1:853325490348:web:b6bd73a8e47c809de05709"
NEXT_PUBLIC_MESSAGING_SENDER_ID="853325490348"
NEXT_PUBLIC_STORAGE_BUCKET="catch-d1db1.appspot.com"
NEXT_PUBLIC_PROJECT_ID="catch-d1db1"
NEXT_PUBLIC_AUTH_DOMAIN="catch-d1db1.firebaseapp.com"
NEXT_PUBLIC_API_KEY="AIzaSyD8Bso2zdBSMBNp25T48S7kx6-BGO38vv0"
NEXT_PUBLIC_NEAR_NETWORK_ID="testnet"
NEXT_PUBLIC_NEAR_NODE_URL="https://rpc.testnet.near.org"
NEXT_PUBLIC_NEAR_WALLET_URL="https://wallet.testnet.near.org"
NEXT_PUBLIC_NEAR_HELPER_URL="https://helper.testnet.near.org"
NEXT_PUBLIC_NEAR_EXPLORER_URL="https://explorer.testnet.near.org"
'''
'''--- .eslintrc.js ---
module.exports = {
  env: {
    browser: true,
    es2021: true,
  },
  extends: [
    "next/core-web-vitals",
    "eslint:recommended",
    "plugin:react/recommended",
    "plugin:@typescript-eslint/recommended",
  ],
  parser: "@typescript-eslint/parser",
  parserOptions: {
    project: "./tsconfig.json",
    ecmaFeatures: {
      jsx: true,
    },
    ecmaVersion: 12,
    sourceType: "module",
  },
  plugins: ["react", "@typescript-eslint"],
  rules: {
    "default-case": "error",
    "default-case-last": "error",
    "no-multiple-empty-lines": [
      "error",
      {
        max: 1,
        maxBOF: 0,
        maxEOF: 1,
      },
    ],
    "no-var": "error",
    "padding-line-between-statements": [
      "error",
      {
        blankLine: "always",
        prev: ["const", "let", "if", "for", "function"],
        next: "*",
      },
      { blankLine: "any", prev: ["const", "let"], next: ["const", "let"] },
      { blankLine: "always", prev: "*", next: ["return"] },
    ],
    "react/react-in-jsx-scope": "off",
    "react-hooks/exhaustive-deps": "off",
    "@typescript-eslint/explicit-module-boundary-types": "off",
    "@typescript-eslint/naming-convention": [
      "error",
      {
        selector: "variable",
        types: ["boolean"],
        format: ["PascalCase"],
        prefix: ["can", "has", "is", "should"],
      },
    ],
    "import/extensions": [
      "error",
      "never",
      {
        css: "always",
        json: "always",
        scss: "always",
      },
    ],
    "import/no-extraneous-dependencies": "off",
    "import/order": [
      "error",
      {
        groups: [
          "builtin",
          "external",
          "internal",
          "sibling",
          "index",
          "parent",
        ],
        "newlines-between": "always",
      },
    ],
  },
};

'''
'''--- .github/workflows/chromatic.yml ---
# This workflow will do a clean installation of node dependencies, cache/restore them, build storybook and deploy to chromatic

name: chromatic

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  chromatic:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'yarn'
      - name: Install dependencies
        run: yarn
      - name: Publish to Chromatic
        uses: chromaui/action@v1
        with:
          projectToken: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}

'''
'''--- .github/workflows/lint.yml ---
# This workflow will do a clean installation of node dependencies, cache/restore them, and lint the code

name: lint

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'yarn'
      - run: yarn
      - run: yarn lint

'''
'''--- .storybook/main.js ---
const path = require('path');

module.exports = {
  stories: ['../**/*.stories.mdx', '../**/*.stories.@(js|jsx|ts|tsx)'],
  addons: [
    '@storybook/addon-links',
    '@storybook/addon-essentials',
    '@storybook/addon-interactions',
    {
      name: '@storybook/addon-postcss',
      options: {
        postcssLoaderOptions: {
          implementation: require('postcss'),
        },
      },
    },
  ],
  framework: '@storybook/react',
  webpackFinal: async (config, { configType }) => {
    // `configType` has a value of 'DEVELOPMENT' or 'PRODUCTION'
    // You can change the configuration based on that.
    // 'PRODUCTION' is used when building the static version of storybook.

    // allow for absolute paths set in tsconfig
    config.resolve.modules = [...(config.resolve.modules || []), path.resolve(__dirname, '../')];

    // fixes error thrown by using framer-motion
    config.module.rules.push({
      type: 'javascript/auto',
      test: /\.mjs$/,
      include: /node_modules/,
    });

    return config;
  },
};

'''
'''--- .storybook/preview.js ---
// tailwind
import 'tailwindcss/tailwind.css';

// fonts
import '@fontsource/anton/latin.css';
import '@fontsource/roboto/latin-400.css';
import '@fontsource/roboto/latin-500.css';
import '@fontsource/roboto/latin-700.css';

export const parameters = {
  actions: { argTypesRegex: '^on[A-Z].*' },
  controls: {
    matchers: {
      color: /(background|color)$/i,
      date: /Date$/,
    },
  },
};

'''
'''--- .vscode/settings.json ---
{
  "css.validate": false,
  "editor.codeActionsOnSave": {
    "source.fixAll.eslint": true
  },
  "editor.tabSize": 2,
  "tailwindCSS.experimental.classRegex": [["clsx\\(([^)]*)\\)", "(?:'|\"|`)([^']*)(?:'|\"|`)"]],
  // Set the default
  "editor.formatOnSave": false,
  // Enable per-language
  "[javascript]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode",
    "editor.formatOnSave": true
  },
  "[javascriptreact]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode",
    "editor.formatOnSave": true
  },
  "[jsx-tags]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode",
    "editor.formatOnSave": true
  },
  "[typescript]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode",
    "editor.formatOnSave": true
  },
  "[typescriptreact]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode",
    "editor.formatOnSave": true
  },
  "[markdown]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode",
    "editor.formatOnSave": true
  },
  "[mdx]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode",
    "editor.formatOnSave": true
  },
  "[json]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode",
    "editor.formatOnSave": true
  },
  "[yaml]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode",
    "editor.formatOnSave": true
  },
  "[css]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode",
    "editor.formatOnSave": true
  }
}

'''
'''--- CONTRIBUTING.md ---
# Contributing to Catch App

In this document, you will find guidelines to contribute to the Catch App. If you have improvements for this guidelines, feel free to propose changes to this document as a pull request.

## Development

### Technologies we use

We use the following technologies for the Catch App:

- [typescript](https://github.com/microsoft/TypeScript)
- [next.js](https://github.com/vercel/next.js)
- [tailwindcss](https://github.com/tailwindlabs/tailwindcss)
- [redux](https://github.com/reduxjs/redux)
- [firebase](https://github.com/firebase/firebase-js-sdk)
- [storybook](https://github.com/storybookjs/storybook/)
- [eslint](https://github.com/eslint/eslint)
- [prettier](https://github.com/prettier/prettier)

You may want to familiarize yourself with these technologies.

### Setting up your project

We create a [README.md](README.md) in every project with additional information for the setup to help other developers getting started. If you find yourself setting up a new project, never forget to document everything, that is important for other colleagues to know.

### General development workflow

1. Pull / Clone the current project into your working space
2. Create a branch
3. Setup the project if you haven't already & apply your changes
4. Test your code using jest, cypress, chromatic & storybook
5. Separate your changes in [well-formed commit messages](#commit-messages) and push them
6. Create a [well-formed pull request](#pull-requests)
7. Add your colleagues as reviewers for the pull request / ask one directly
8. You may have to apply changes and redo step 3-5 until the reviewer approves your request
9. Merge your changes in the branch

### Branch setup

The branch name can be split in 2 parts. First of all you [add a tag](#tag) for the type of task your are doing, second you add the title of the ticket you are currently working on. If you have to add a new feature for a ticket named `(redux) define global state` your branch would look like this:
`feature/redux_define-global-state`.

### Commit messages

We need well written commit messages in order to understand as fast as possible, what you did in this commit.

Example: `feat: add secondary color to button component`

The commit message can be split in 2 parts.

#### tag

It is useful to provide previously defined tags, to get a faster understanding of the type of task.

Tags we use:

- **feat**: The new feature youâ€™re adding to a particular application
- **fix**: A bug fix
- **docs**: Everything related to documentation
- **test**: Everything related to testing
- **ci**: Everything related to ci / pipeline changes
- **chore**: Regular code maintenance

#### message

The commit messages should describe in a precise and short way what was done.
We write our commit messages in the [imperative](https://www.grammarly.com/blog/imperative/).

Good: `Add secondary color to Button component`

Bad: `Added secondary..`

## Documentation

We document every component we code in Storybook with a practical implementation and a theoretical documentation.

If your implementation needs an extra setup in the project, you have to document the steps in the [README.md](README.md) file of the project.

As a rule of thumb you can remember to document everything that is important for other contributors to know.

## Style guides

Every technology has its own best practices. The following style guides may help you with providing the best results. Please take your time and familiarize yourself with them.

### Coding:

- [React style guide](/docs/contributing/style-guides/react.md)
- TBD: Javascript style guide

'''
'''--- README.md ---
# Catch App

using

- [typescript](https://github.com/microsoft/TypeScript)
- [next.js](https://github.com/vercel/next.js)
- [tailwindcss](https://github.com/tailwindlabs/tailwindcss)
- [redux](https://github.com/reduxjs/redux)
- [firebase](https://github.com/firebase/firebase-js-sdk)
- [storybook](https://github.com/storybookjs/storybook/)
- [eslint](https://github.com/eslint/eslint)
- [prettier](https://github.com/prettier/prettier)

## Install

```bash
yarn install
# or shortcut
yarn
```

## Getting Started

### Setting up Environment

Make a copy of `.env` file and name it `.env.local`.  
Fill in the values for all `NEXT_PUBLIC_*` variables.  
You may contact Andrius or Eric to get the correct values.

Do not commit either of those files.

### Development

Run the development server:

```bash
yarn dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

## Storybook

```bash
yarn storybook

# build
yarn build-storybook
```

## Contributing

See the [the contributing guide](CONTRIBUTING.md) for detailed instructions on how to get started with our project.

## Documenting Components

All Components should follow the same structure for a consistent documentation experience:

- `Overview`: MDX based documentation to give a complete overview about the component. This is the main documentation and includes some of the other stories.

- `Playground`: Is a Story that provides a control for almost any prop of the component, to make it easy to try the component.

- `Visual Guide`: Is a Story that provides a overview about the all the states of a component. This makes regression testing easier. And provides a quick overview. Visual Guide should include hover, focus, active, visited, disabled, etc. To statically use them in stories, we generate css classes for the pseudo classes using the PostCSS Pseudo Classes plugin.

- `Features`: A directory wich contains a dedicated story for each feature that the component implement. This gives a clear list of supported features with a demo.

- `Examples`: A directory with real life examples of how the component might be used.

The Overview documentation should be formatted to guide our users. We use a set of doc-components to format our overview documentation: https://intuit.github.io/doc-blocks/?path=/story/gallery--page
Any doc-block component need to installed on its own. Package names can be found in their repository: https://github.com/intuit/doc-blocks

```mdx
# <component-name>

<ShieldRow> ... </ShieldRow>

short description of the component

## Usage

short example, how to use the component

Show Import source code.
Use Preview Tag to include playground story.

<RelatedComponents components={[]} />

When to use this component?

Do's and Don't

## Accessibility Approach

document the list of aspects: https://testen.bitv-test.de/index.php?a=dl
See heading component as an example.

## SEO

## Features

## API Docs / Args Table
```

'''
'''--- components/Auth/authSlice.ts ---
import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { signInWithEmailAndPassword, signOut } from 'firebase/auth';

import { auth } from '../../lib/firebase';
import type { AppState } from '../../lib/store';

export interface AuthState {
  value: string | null;
  status: 'offline' | 'loading' | 'online';
}

interface LoginData {
  email: string;
  password: string;
}

const initialState: AuthState = {
  value: null,
  status: 'offline',
};

export const loginAsync = createAsyncThunk('auth/login', async (loginData: LoginData) => {
  const { email, password } = loginData;
  const response = await signInWithEmailAndPassword(auth, email, password);

  return response.user.uid;
});

export const logOutAsync = createAsyncThunk('auth/logout', async () => await signOut(auth));

export const authSlice = createSlice({
  name: 'auth',
  initialState,
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(loginAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(loginAsync.fulfilled, (state, action) => {
        state.status = 'online';
        state.value = action.payload;
      })
      .addCase(logOutAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(logOutAsync.fulfilled, (state, action) => {
        state.status = 'offline';
        state.value = null;
      });
  },
});

export const selectUser = (state: AppState) => state.auth.value;

export default authSlice.reducer;

'''
'''--- components/Projects/index.ts ---
export { AddNewProject } from './subslides/AddNewProject';
export { MyProjects } from './subslides/MyProjects';
export { ProjectDetails } from './subslides/ProjectDetails';
export { AddNewNFT } from './subslides/AddNewNFT';
export { List } from './List';

'''
'''--- components/Projects/projectSlice.ts ---
import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { HttpsCallableResult } from 'firebase/functions';

import type { AppState } from '../../lib/store';

export interface NFTProp {
  name: string;
  description: string;
  image: string;
  label: string;
  position: string;
  status: boolean;
}

export interface Project {
  name: string;
  description: string;
  image: string;
  nfts: Array<NFTProp>;
}

export interface Projects {
  status: string;
  data: Array<Project>;
}

export interface ProjectState {
  value: HttpsCallableResult<Projects> | null;
  projects: Projects | null;
  projectStatus: 'empty' | 'loading' | 'done';
  status: 'empty' | 'loading' | 'done';
}

const initialState: ProjectState = {
  value: null,
  projects: null,
  projectStatus: 'empty',
  status: 'empty',
};

export const postRequest = async (url: string, body: any) => {
  const requestOptions = {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(body),
  };

  let data = {};

  try {
    const response = await fetch(url, requestOptions);

    data = await response.json();
  } catch (err) {
    console.log(err);
  }

  return data;
};

export const projectsAsync = createAsyncThunk('projects/get', async () => {
  const response: any = await postRequest(`${process.env.NEXT_PUBLIC_API_URL}/projects`, {
    userUID: 'bacis.testnet',
  });

  let result: Project[] = [];

  if (response.data !== null) {
    result = response.data.map((item: any, index: any) => {
      return { ...item, nfts: [] };
    });

    return { data: result };
  } else {
    return [];
  }
});

export const createProjectAsync = createAsyncThunk(
  'projects/create',
  async ({ name, description, image, nfts }: Project) => {
    const response = await postRequest(`${process.env.NEXT_PUBLIC_API_URL}/projects/create`, {
      userUID: 'bacis.testnet',
      nfts,
      name,
      description,
      image,
    });

    return response;
  }
);

export const projectSlice = createSlice({
  name: 'projects',
  initialState,
  reducers: {
    addProjectAction: (state, action) => {
      if (state.projects?.data) state.projects.data = action.payload;
    },
    addNewNFTAction: (state, action) => {
      if (state.projects?.data) state.projects.data = action.payload;
    },
  },
  extraReducers: (builder) => {
    builder
      .addCase(projectsAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(projectsAsync.fulfilled, (state, action) => {
        state.status = 'done';
        state.projects = action.payload as any;
      })
      .addCase(createProjectAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(createProjectAsync.fulfilled, (state, action) => {
        state.status = 'done';
        state.value = action.payload as any;
      });
  },
});

export const { addProjectAction, addNewNFTAction } = projectSlice.actions;

export const selectProjects = (state: AppState) => state.projects.value;

export default projectSlice.reducer;

'''
'''--- components/icons/index.ts ---
export * from './AllIcon';
export * from './ArtIcon';
export * from './BackIcon';
export * from './CheckIcon';
export * from './CloseIcon';
export * from './CollectionIcon';
export * from './DashboardIcon';
export * from './DeleteIcon';
export * from './DropdownDownIcon';
export * from './DropdownUpIcon';
export * from './EditIcon';
export * from './LeftIcon';
export * from './LogoIcon';
export * from './LocationIcon';
export * from './LogoutIcon';
export * from './MapIcon';
export * from './MarketIcon';
export * from './MenuBarIcon';
export * from './MinusIcon';
export * from './NearIcon';
export * from './PlusIcon';
export * from './ProjectIcon';
export * from './RemoveIcon';
export * from './RightIcon';
export * from './SearchIcon';
export * from './SendIcon';
export * from './SettingsIcon';
export * from './ShareIcon';
export * from './StarIcon';
export * from './Targeticon';
export * from './UserIcon';
export * from './VoucherIcon';
export * from './WalletIcon';

'''
'''--- components/items/elements/index.ts ---
export * from './DropDown';
export * from './Input';
export * from './SwichBox';
export * from './TextEdit';

'''
'''--- components/items/index.ts ---
export * from './projects';

'''
'''--- components/items/projects/index.ts ---
export * from './AddProject';
export * from './ProjectCard';
export * from './ProjectFilter';
export * from './NFTCard';

'''
'''--- components/ui/Button/index.ts ---
export * from './Button';

'''
'''--- components/ui/Card/index.ts ---
export * from './Card';

'''
'''--- components/ui/Icon_Button/index.ts ---
export * from './IconButton';

'''
'''--- components/ui/Spinner/index.ts ---
export * from './Spinner';

'''
'''--- components/ui/index.ts ---
export * from './Button';
export * from './Spinner';
export * from './Icon_Button';

'''
'''--- config/config.ts ---
export const PUBLIC_URL = {
  base: '/',
  dashboard: '/dashboard',
  complete: '/complete',
  projects: '/projects',
};

'''
'''--- config/near.ts ---
export const CONTRACT_NAME = 'nft-frontend-simple-mint.blockhead.testnet';

export function getConfig(env: string) {
  switch (env) {
    case 'production':
    case 'mainnet':
      return {
        networkId: 'mainnet',
        nodeUrl: 'https://rpc.mainnet.near.org',
        contractName: CONTRACT_NAME,
        walletUrl: 'https://wallet.near.org',
        helperUrl: 'https://helper.mainnet.near.org',
        explorerUrl: 'https://explorer.mainnet.near.org',
      };
    case 'development':
    case 'testnet':
      return {
        networkId: 'testnet',
        nodeUrl: 'https://rpc.testnet.near.org',
        contractName: CONTRACT_NAME,
        walletUrl: 'https://wallet.testnet.near.org',
        helperUrl: 'https://helper.testnet.near.org',
        explorerUrl: 'https://explorer.testnet.near.org',
      };
    case 'betanet':
      return {
        networkId: 'betanet',
        nodeUrl: 'https://rpc.betanet.near.org',
        contractName: CONTRACT_NAME,
        walletUrl: 'https://wallet.betanet.near.org',
        helperUrl: 'https://helper.betanet.near.org',
        explorerUrl: 'https://explorer.betanet.near.org',
      };
    case 'local':
      return {
        networkId: 'local',
        nodeUrl: 'http://localhost:3030',
        keyPath: `${process.env.HOME}/.near/validator_key.json`,
        walletUrl: 'http://localhost:4000/wallet',
        contractName: CONTRACT_NAME,
      };
    case 'test':
    case 'ci':
      return {
        networkId: 'shared-test',
        nodeUrl: 'https://rpc.ci-testnet.near.org',
        contractName: CONTRACT_NAME,
        masterAccount: 'test.near',
      };
    case 'ci-betanet':
      return {
        networkId: 'shared-test-staging',
        nodeUrl: 'https://rpc.ci-betanet.near.org',
        contractName: CONTRACT_NAME,
        masterAccount: 'test.near',
      };
    default:
      throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`);
  }
}

'''
'''--- docs/adr/0001_record-architecture-decisions.md ---
# 1. Record architecture decisions

Date: 2022-03-06

## Status

Accepted

## Context

We need to record the architectural decisions made on this project.

## Decision

We will use Architecture Decision Records, as described by Michael Nygard in this article: http://thinkrelevance.com/blog/2011/11/15/documenting-architecture-decisions

## Consequences

See Michael Nygard's article, linked above.

'''
'''--- docs/adr/0002_component-and-storybook-structure.md ---
# 2. Component and Storybook structure

Date: 2022-03-06

## Status

Accepted

## Context

We need to structure our components and the storybook.

## Decision

We will use a structure inspired by the sidebar navigation of [Chakra UI](https://chakra-ui.com/docs/getting-started) docs.

## Considered Alternatives

[Atomic Design by Brad Frost](https://atomicdesign.bradfrost.com/)

## Consequences

- Components and stories are categorized and bundled by context rather than size.
- Component library stays easy to navigate while the project scales.

'''
'''--- docs/contributing/style-guides/react.md ---
# React best practices

In this document, you will find our best practices for React. We want to unify our code, use modern practices, make our code more readable and developer-friendly, performant and minimize our code reviews. Feel free to add improvements / new features to this document as a merge request.

## Functions & Hooks instead of classes

Instead of using React with class syntax, we use functions & hooks to write our code. You can learn more about the usage of hooks in the [official React documentation](https://reactjs.org/docs/hooks-intro.html).

## Avoid Mutation and Side effects

The first principle of functional programming is to avoid changing things. A function should not change anything such as a global variable. This is very important because changes often lead to bugs. If a function changes a global variable, for example, it might lead to unexpected behavior in all the places where that variable is used.

The second principle is that a function must be pure, meaning it has no side effects. In functional programming, changes that are made are called mutations, and the outcomes are called side effects. A pure function does neither of the two. A pure function will always have the same output for the same input.

If a function depends on a global variable, that variable should be passed to the function as an argument. This allows us to obtain the same output for the same input.

If you want to learn more about functional programming, have a look at [this article](https://www.freecodecamp.org/news/functional-programming-in-javascript-explained-in-plain-english/).

## Import react

```jsx
import * from React as "react";
```

The reason for this is that React wants to stop the support for the default import with Version 19 or 20.

Source: <https://twitter.com/dan_abramov/status/1308739731551858689?s=20>

<br>

## Default Props

```tsx
export type ComponentProps = {
  prop1: string;
  prop2?: number;
  prop3?: number;
  prop4?: boolean;
};

function Component(props: ComponentProps) {
  // You may add line breaks for this destructuring to keep the code more readable
  const { prop1, prop2 = null, prop3 = 1, prop4 = true } = props;

  return (
    <div>
      {prop1} {prop2} {prop3}
      {prop4 && <p>foo</p>}
    </div>
  );
}
```

Note that default values are only set for optional props, since you have to assume that non-optional props are set. If this is not the case, you should reconsider making it an optional prop.

According [to this tweet](https://twitter.com/hswolff/status/1133759319571345408), defaultProps will represent an obsolete notation in the future.

You can find a discussion on this topic here:

- <https://twitter.com/hswolff/status/1133759319571345408>

The consensus of the discussion is that you should use object default values like above.

'''
'''--- docs/design-system/Colors/includes/index.ts ---
export * from './Swatch';

'''
'''--- docs/design-system/Typography/includes/index.ts ---
export * from './FontFamilyOverview';
export * from './FontSizeOverview';
export * from './LineHeightOverview';
export * from './SemanticFontsOverview';

'''
'''--- lib/context.ts ---
import { createContext } from 'react';
export const UserContext = createContext({ user: '', username: '' });
'''
'''--- lib/firebase.ts ---
import { initializeApp, getApp } from 'firebase/app';
import { getAuth, GoogleAuthProvider } from 'firebase/auth';
import { getFunctions, connectFunctionsEmulator } from 'firebase/functions';
import {
  getFirestore,
  collection,
  where,
  getDocs,
  query,
  limit,
  DocumentData,
  connectFirestoreEmulator,
} from 'firebase/firestore';
import { getStorage } from 'firebase/storage';

interface FireBaseConfig {
  apiKey: string;
  authDomain: string;
  projectId: string;
  storageBucket?: string;
  messagingSenderId: string;
  appId: string;
  measurementId: string;
}

const firebaseConfig = {
  apiKey: process.env.NEXT_PUBLIC_API_KEY || '',
  authDomain: process.env.NEXT_PUBLIC_AUTH_DOMAIN || '',
  projectId: process.env.NEXT_PUBLIC_PROJECT_ID || '',
  storageBucket: process.env.NEXT_PUBLIC_STORAGE_BUCKET || '',
  messagingSenderId: process.env.NEXT_PUBLIC_MESSAGING_SENDER_ID || '',
  appId: process.env.NEXT_PUBLIC_APP_ID || '',
  measurementId: process.env.NEXT_PUBLIC_MEASUREMENT_ID || '',
};

function createFirebaseApp(config: FireBaseConfig) {
  try {
    return getApp();
  } catch {
    return initializeApp(config);
  }
}

const firebaseApp = createFirebaseApp(firebaseConfig);

export const auth = getAuth(firebaseApp);
export const googleAuthProvider = new GoogleAuthProvider();
export const functions = getFunctions(firebaseApp);

// Firestore exports
export const firestore = getFirestore(firebaseApp);
export const storage = getStorage(firebaseApp);
export const STATE_CHANGED = 'state_changed';

function connectLocalEmulator(env: string) {
  if (env === 'development') {
    connectFunctionsEmulator(functions, 'localhost', 5001);
    connectFirestoreEmulator(firestore, 'localhost', 8080);
  }
}

//connectLocalEmulator(process.env.NODE_ENV);

/**`
 * Gets a users/{uid} document with username
 * @param  {string} username
 */
export async function getUserWithUsername(username: string) {
  const q = query(collection(getFirestore(), 'users'), where('username', '==', username), limit(1));
  const userDoc = (await getDocs(q)).docs[0];

  return userDoc;
}

/**`
 * Converts a firestore document to JSON
 * @param  {DocumentSnapshot} doc
 */
export function postToJSON(doc: DocumentData) {
  const data = doc.data();

  return {
    ...data,
    // Gotcha! firestore timestamp NOT serializable to JSON. Must convert to milliseconds
    createdAt: data?.createdAt.toMillis() || 0,
    updatedAt: data?.updatedAt.toMillis() || 0,
  };
}

'''
'''--- lib/hooks.ts ---
import * as React from 'react';
import { useAuthState } from 'react-firebase-hooks/auth';
import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';

import { auth } from './firebase';
import type { AppDispatch, AppState } from './store';

export function useUserData() {
  const [user] = useAuthState(auth);
  const [username, setUsername] = React.useState(null);

  React.useEffect(() => {
    let unsubscribe;

    if (user) {
      // TODO: what is happening here??
    } else {
      setUsername(null);
    }

    return unsubscribe;
  }, [user]);

  return { user, username };
}

export const useAppDispatch = () => useDispatch<AppDispatch>();

export const useAppSelector: TypedUseSelectorHook<AppState> = useSelector;

'''
'''--- lib/near-api.ts ---
import { connect, Contract, keyStores, WalletConnection } from 'near-api-js';

import { getConfig } from '../config/near';

const nearConfig = getConfig(process.env.NODE_ENV || 'development');

// Initializing contract
export async function initContract() {
  // get network configuration values from config.js
  // based on the network ID we pass to getConfig()
  const nearConfig = getConfig(process.env.NEAR_ENV || 'testnet');

  // create a keyStore for signing transactions using the user's key
  // which is located in the browser local storage after user logs in
  const keyStore = new keyStores.BrowserLocalStorageKeyStore();

  // Initializing connection to the NEAR testnet
  const near = await connect({
    headers: {},
    keyStore,
    ...nearConfig,
  });

  // Initialize wallet connection
  const walletConnection = new WalletConnection(near, 'catch');

  // Load in user's account data
  let currentUser;

  if (walletConnection.getAccountId()) {
    currentUser = {
      // Gets the accountId as a string
      accountId: walletConnection.getAccountId(),
      // Gets the user's token balance
      balance: (await walletConnection.account().state()).amount,
    };
  }

  // Initializing our contract APIs by contract name and configuration
  const contract = await new Contract(walletConnection.account(), nearConfig.contractName, {
    // View methods are read only. They don't modify the state, but usually return some value.
    viewMethods: ['check_token'],
    // Change methods can modify the state. But you don't receive the returned value when called.
    changeMethods: ['nft_mint'],
  });

  return { contract, currentUser, nearConfig, walletConnection };
}

'''
'''--- lib/store.ts ---
import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';

import authReducer from '../components/Auth/authSlice';
import projectReducer from '../components/Projects/projectSlice';

export function makeStore() {
  return configureStore({
    reducer: {
      auth: authReducer,
      projects: projectReducer,
    },
  });
}

const store = makeStore();

export type AppState = ReturnType<typeof store.getState>;

export type AppDispatch = typeof store.dispatch;

export type AppThunk<ReturnType = void> = ThunkAction<ReturnType, AppState, unknown, Action<string>>;

export default store;

'''
'''--- next-env.d.ts ---
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/basic-features/typescript for more information.

'''
'''--- next.config.js ---
/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
  images: {
    domains: ['images.unsplash.com', 'purecatamphetamine.github.io'],
  },
};

module.exports = nextConfig;

'''
'''--- package.json ---
{
  "name": "polkadot-factory",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "storybook": "start-storybook -p 6006",
    "build-storybook": "build-storybook",
    "chromatic": "npx chromatic --project-token=74fc1b87d154"
  },
  "dependencies": {
    "@fontsource/anton": "^4.5.3",
    "@fontsource/roboto": "^4.5.3",
    "@reduxjs/toolkit": "^1.7.1",
    "clsx": "^1.1.1",
    "firebase": "^9.6.3",
    "framer-motion": "^6.2.8",
    "lodash.debounce": "^4.0.8",
    "near-api-js": "^0.44.2",
    "next": "12.0.8",
    "react": "17.0.2",
    "react-circular-progressbar": "^2.1.0",
    "react-dom": "17.0.2",
    "react-firebase-hooks": "^4.0.2",
    "react-hot-toast": "^2.2.0",
    "react-redux": "^7.2.6",
    "react-select-country-list": "^2.2.3",
    "react-vis": "^1.11.7",
    "swiper": "^8.3.1"
  },
  "devDependencies": {
    "@babel/core": "^7.17.5",
    "@storybook/addon-actions": "^6.4.19",
    "@storybook/addon-essentials": "^6.4.19",
    "@storybook/addon-interactions": "^6.4.19",
    "@storybook/addon-links": "^6.4.19",
    "@storybook/addon-postcss": "^2.0.0",
    "@storybook/react": "^6.4.19",
    "@storybook/testing-library": "^0.0.9",
    "@types/lodash": "^4.14.178",
    "@types/lodash.debounce": "^4.0.6",
    "@types/node": "17.0.9",
    "@types/react": "17.0.38",
    "@types/react-vis": "^1.11.11",
    "@typescript-eslint/eslint-plugin": "^5.13.0",
    "autoprefixer": "^10.4.7",
    "babel-loader": "^8.2.3",
    "chromatic": "^6.5.2",
    "eslint": "8.7.0",
    "eslint-config-next": "12.0.8",
    "eslint-plugin-import": "^2.25.4",
    "eslint-plugin-storybook": "^0.5.7",
    "postcss": "^8.4.14",
    "postcss-pseudo-classes": "^0.2.1",
    "tailwindcss": "^3.1.6",
    "typescript": "4.5.4"
  }
}

'''
'''--- pages/api/hello.ts ---
// Next.js API route support: https://nextjs.org/docs/api-routes/introduction
import type { NextApiRequest, NextApiResponse } from 'next';

type Data = {
  name: string;
};

export default function handler(req: NextApiRequest, res: NextApiResponse<Data>) {
  res.status(200).json({ name: 'John Doe' });
}

'''
'''--- postcss.config.js ---
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
    'postcss-pseudo-classes': {
      // default contains `:root`.
      blacklist: [],

      // (optional) create classes for a restricted list of selectors
      // N.B. the colon (:) is optional
      restrictTo: ['active', 'hover', 'focus', 'visited'],

      // default is `false`. If `true`, will output CSS
      // with all combinations of pseudo styles/pseudo classes.
      allCombinations: true,

      // default is `true`. If `false`, will generate
      // pseudo classes for `:before` and `:after`
      preserveBeforeAfter: false,
    },
  },
};

'''
'''--- public/vercel.svg ---
<svg width="283" height="64" viewBox="0 0 283 64" fill="none" 
    xmlns="http://www.w3.org/2000/svg">
    <path d="M141.04 16c-11.04 0-19 7.2-19 18s8.96 18 20 18c6.67 0 12.55-2.64 16.19-7.09l-7.65-4.42c-2.02 2.21-5.09 3.5-8.54 3.5-4.79 0-8.86-2.5-10.37-6.5h28.02c.22-1.12.35-2.28.35-3.5 0-10.79-7.96-17.99-19-17.99zm-9.46 14.5c1.25-3.99 4.67-6.5 9.45-6.5 4.79 0 8.21 2.51 9.45 6.5h-18.9zM248.72 16c-11.04 0-19 7.2-19 18s8.96 18 20 18c6.67 0 12.55-2.64 16.19-7.09l-7.65-4.42c-2.02 2.21-5.09 3.5-8.54 3.5-4.79 0-8.86-2.5-10.37-6.5h28.02c.22-1.12.35-2.28.35-3.5 0-10.79-7.96-17.99-19-17.99zm-9.45 14.5c1.25-3.99 4.67-6.5 9.45-6.5 4.79 0 8.21 2.51 9.45 6.5h-18.9zM200.24 34c0 6 3.92 10 10 10 4.12 0 7.21-1.87 8.8-4.92l7.68 4.43c-3.18 5.3-9.14 8.49-16.48 8.49-11.05 0-19-7.2-19-18s7.96-18 19-18c7.34 0 13.29 3.19 16.48 8.49l-7.68 4.43c-1.59-3.05-4.68-4.92-8.8-4.92-6.07 0-10 4-10 10zm82.48-29v46h-9V5h9zM36.95 0L73.9 64H0L36.95 0zm92.38 5l-27.71 48L73.91 5H84.3l17.32 30 17.32-30h10.39zm58.91 12v9.69c-1-.29-2.06-.49-3.2-.49-5.81 0-10 4-10 10V51h-9V17h9v9.2c0-5.08 5.91-9.2 13.2-9.2z" fill="#000"/>
</svg>
'''
'''--- styles/Home.module.css ---
.container {
  padding: 0 2rem;
}

.main {
  min-height: 100vh;
  padding: 4rem 0;
  flex: 1;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}

.footer {
  display: flex;
  flex: 1;
  padding: 2rem 0;
  border-top: 1px solid #eaeaea;
  justify-content: center;
  align-items: center;
}

.footer a {
  display: flex;
  justify-content: center;
  align-items: center;
  flex-grow: 1;
}

.title a {
  color: #0070f3;
  text-decoration: none;
}

.title a:hover,
.title a:focus,
.title a:active {
  text-decoration: underline;
}

.title {
  margin: 0;
  line-height: 1.15;
  font-size: 4rem;
}

.title,
.description {
  text-align: center;
}

.description {
  margin: 4rem 0;
  line-height: 1.5;
  font-size: 1.5rem;
}

.code {
  background: #fafafa;
  border-radius: 5px;
  padding: 0.75rem;
  font-size: 1.1rem;
  font-family: Menlo, Monaco, Lucida Console, Liberation Mono, DejaVu Sans Mono, Bitstream Vera Sans Mono, Courier New,
    monospace;
}

.grid {
  display: flex;
  align-items: center;
  justify-content: center;
  flex-wrap: wrap;
  max-width: 800px;
}

.card {
  margin: 1rem;
  padding: 1.5rem;
  text-align: left;
  color: inherit;
  text-decoration: none;
  border: 1px solid #eaeaea;
  border-radius: 10px;
  transition: color 0.15s ease, border-color 0.15s ease;
  max-width: 300px;
}

.card:hover,
.card:focus,
.card:active {
  color: #0070f3;
  border-color: #0070f3;
}

.card h2 {
  margin: 0 0 1rem 0;
  font-size: 1.5rem;
}

.card p {
  margin: 0;
  font-size: 1.25rem;
  line-height: 1.5;
}

.logo {
  height: 1em;
  margin-left: 0.5rem;
}

@media (max-width: 600px) {
  .grid {
    width: 100%;
    flex-direction: column;
  }
}

'''
'''--- styles/index.css ---
@tailwind base;
@tailwind components;
@tailwind utilities;

'''
'''--- styles/swiper.css ---
.swiper {
  /* width: 100%; */
  /* width: 100%; */
  height: 100%;
}

.swiper-slide {
  text-align: center;
  font-size: 18px;
  background: #ffffff;

  /* Center slide text vertically */
  display: -webkit-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  -webkit-box-pack: center;
  -ms-flex-pack: center;
  -webkit-justify-content: center;
  justify-content: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  -webkit-align-items: center;
  align-items: center;
}

'''
'''--- tailwind.config.js ---
const plugin = require('tailwindcss/plugin');
const theme = require('./theme');

module.exports = {
  content: ['./pages/**/*.{js,ts,jsx,tsx}', './components/**/*.{js,ts,jsx,tsx}', './stories/**/*.{js,ts,jsx,tsx}'],
  theme: {
    extend: {
      ...theme,
      width: {
        22: '90px',
        64: '264px',
        70: '80vw',
        '72p': '72px',
        '100p': '100px',
        80: '360px',
        312: '312px',
        308: '308px',
      },
      height: {
        13: '52px',
        22: '90px',
        60: '60px',
        72: '72px',
        '92p': '92px',
        '100p': '100px',
        80: '334px',
        210: '210px',
      },
    },
  },
  variants: {
    extend: {
      backgroundColor: ['active', 'disabled'],
      backgroundOpacity: ['disabled'],
      borderOpacity: ['disabled'],
      boxShadow: ['active', 'disabled'],
      cursor: ['disabled'],
      opacity: ['disabled'],
      textColor: ['active', 'disabled'],
      textOpacity: ['disabled'],
    },
  },
  plugins: [
    plugin(function ({ addComponents }) {
      addComponents({
        // body text semantic classes
        '.text-body-sm': {
          '@apply font-body text-xs leading-xs': {},
        },
        '.text-body-md': {
          '@apply font-body text-sm leading-sm': {},
        },
        '.text-body-lg': {
          '@apply font-body text-md leading-md': {},
        },

        // heading text semantic classes
        '.text-heading-sm': {
          '@apply font-heading text-lg leading-lg': {},
        },
        '.text-heading-md': {
          '@apply font-heading text-xl leading-xl': {},
        },
        '.text-heading-lg': {
          '@apply font-heading text-2xl leading-2xl': {},
        },
        '.text-heading-xl': {
          '@apply font-heading text-3xl leading-3xl': {},
        },
      });
    }),
  ],
};

'''
'''--- test/tsconfig.json ---
{
  "extends": "../tsconfig.json",
  "compilerOptions": {
    "isolatedModules": false
  },
}
'''
'''--- theme/defaultTheme.js ---
// default theme config copied from `node_modules/tailwindcss/stubs/defaultConfig.stub.js`
// just here for reference and easy lookups

// const colors = require('../colors')

module.exports = {
  purge: [],
  presets: [],
  darkMode: false, // or 'media' or 'class'
  theme: {
    screens: {
      sm: '640px',
      md: '768px',
      lg: '1024px',
      xl: '1280px',
      '2xl': '1536px',
    },
    colors: {
      transparent: 'transparent',
      current: 'currentColor',

      // black: colors.black,
      // white: colors.white,
      // gray: colors.coolGray,
      // red: colors.red,
      // yellow: colors.amber,
      // green: colors.emerald,
      // blue: colors.blue,
      // indigo: colors.indigo,
      // purple: colors.violet,
      // pink: colors.pink,
    },
    spacing: {
      px: '1px',
      0: '0px',
      0.5: '0.125rem',
      1: '0.25rem',
      1.5: '0.375rem',
      2: '0.5rem',
      2.5: '0.625rem',
      3: '0.75rem',
      3.5: '0.875rem',
      4: '1rem',
      5: '1.25rem',
      6: '1.5rem',
      7: '1.75rem',
      8: '2rem',
      9: '2.25rem',
      10: '2.5rem',
      11: '2.75rem',
      12: '3rem',
      14: '3.5rem',
      16: '4rem',
      20: '5rem',
      24: '6rem',
      28: '7rem',
      32: '8rem',
      36: '9rem',
      40: '10rem',
      44: '11rem',
      48: '12rem',
      52: '13rem',
      56: '14rem',
      60: '15rem',
      64: '16rem',
      72: '18rem',
      80: '20rem',
      96: '24rem',
    },
    animation: {
      none: 'none',
      spin: 'spin 1s linear infinite',
      ping: 'ping 1s cubic-bezier(0, 0, 0.2, 1) infinite',
      pulse: 'pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite',
      bounce: 'bounce 1s infinite',
    },
    backdropBlur: (theme) => theme('blur'),
    backdropBrightness: (theme) => theme('brightness'),
    backdropContrast: (theme) => theme('contrast'),
    backdropGrayscale: (theme) => theme('grayscale'),
    backdropHueRotate: (theme) => theme('hueRotate'),
    backdropInvert: (theme) => theme('invert'),
    backdropOpacity: (theme) => theme('opacity'),
    backdropSaturate: (theme) => theme('saturate'),
    backdropSepia: (theme) => theme('sepia'),
    backgroundColor: (theme) => theme('colors'),
    backgroundImage: {
      none: 'none',
      'gradient-to-t': 'linear-gradient(to top, var(--tw-gradient-stops))',
      'gradient-to-tr': 'linear-gradient(to top right, var(--tw-gradient-stops))',
      'gradient-to-r': 'linear-gradient(to right, var(--tw-gradient-stops))',
      'gradient-to-br': 'linear-gradient(to bottom right, var(--tw-gradient-stops))',
      'gradient-to-b': 'linear-gradient(to bottom, var(--tw-gradient-stops))',
      'gradient-to-bl': 'linear-gradient(to bottom left, var(--tw-gradient-stops))',
      'gradient-to-l': 'linear-gradient(to left, var(--tw-gradient-stops))',
      'gradient-to-tl': 'linear-gradient(to top left, var(--tw-gradient-stops))',
    },
    backgroundOpacity: (theme) => theme('opacity'),
    backgroundPosition: {
      bottom: 'bottom',
      center: 'center',
      left: 'left',
      'left-bottom': 'left bottom',
      'left-top': 'left top',
      right: 'right',
      'right-bottom': 'right bottom',
      'right-top': 'right top',
      top: 'top',
    },
    backgroundSize: {
      auto: 'auto',
      cover: 'cover',
      contain: 'contain',
    },
    blur: {
      0: '0',
      none: '0',
      sm: '4px',
      DEFAULT: '8px',
      md: '12px',
      lg: '16px',
      xl: '24px',
      '2xl': '40px',
      '3xl': '64px',
    },
    brightness: {
      0: '0',
      50: '.5',
      75: '.75',
      90: '.9',
      95: '.95',
      100: '1',
      105: '1.05',
      110: '1.1',
      125: '1.25',
      150: '1.5',
      200: '2',
    },
    borderColor: (theme) => ({
      ...theme('colors'),
      DEFAULT: theme('colors.gray.200', 'currentColor'),
    }),
    borderOpacity: (theme) => theme('opacity'),
    borderRadius: {
      none: '0px',
      sm: '0.125rem',
      DEFAULT: '0.25rem',
      md: '0.375rem',
      lg: '0.5rem',
      xl: '0.75rem',
      '2xl': '1rem',
      '3xl': '1.5rem',
      full: '9999px',
    },
    borderWidth: {
      DEFAULT: '1px',
      0: '0px',
      2: '2px',
      4: '4px',
      8: '8px',
    },
    boxShadow: {
      sm: '0 1px 2px 0 rgba(0, 0, 0, 0.05)',
      DEFAULT: '0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06)',
      md: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)',
      lg: '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)',
      xl: '0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)',
      '2xl': '0 25px 50px -12px rgba(0, 0, 0, 0.25)',
      inner: 'inset 0 2px 4px 0 rgba(0, 0, 0, 0.06)',
      none: 'none',
    },
    caretColor: (theme) => theme('colors'),
    contrast: {
      0: '0',
      50: '.5',
      75: '.75',
      100: '1',
      125: '1.25',
      150: '1.5',
      200: '2',
    },
    container: {},
    content: {
      none: 'none',
    },
    cursor: {
      auto: 'auto',
      default: 'default',
      pointer: 'pointer',
      wait: 'wait',
      text: 'text',
      move: 'move',
      help: 'help',
      'not-allowed': 'not-allowed',
    },
    divideColor: (theme) => theme('borderColor'),
    divideOpacity: (theme) => theme('borderOpacity'),
    divideWidth: (theme) => theme('borderWidth'),
    dropShadow: {
      sm: '0 1px 1px rgba(0,0,0,0.05)',
      DEFAULT: ['0 1px 2px rgba(0, 0, 0, 0.1)', '0 1px 1px rgba(0, 0, 0, 0.06)'],
      md: ['0 4px 3px rgba(0, 0, 0, 0.07)', '0 2px 2px rgba(0, 0, 0, 0.06)'],
      lg: ['0 10px 8px rgba(0, 0, 0, 0.04)', '0 4px 3px rgba(0, 0, 0, 0.1)'],
      xl: ['0 20px 13px rgba(0, 0, 0, 0.03)', '0 8px 5px rgba(0, 0, 0, 0.08)'],
      '2xl': '0 25px 25px rgba(0, 0, 0, 0.15)',
      none: '0 0 #0000',
    },
    fill: { current: 'currentColor' },
    grayscale: {
      0: '0',
      DEFAULT: '100%',
    },
    hueRotate: {
      '-180': '-180deg',
      '-90': '-90deg',
      '-60': '-60deg',
      '-30': '-30deg',
      '-15': '-15deg',
      0: '0deg',
      15: '15deg',
      30: '30deg',
      60: '60deg',
      90: '90deg',
      180: '180deg',
    },
    invert: {
      0: '0',
      DEFAULT: '100%',
    },
    flex: {
      1: '1 1 0%',
      auto: '1 1 auto',
      initial: '0 1 auto',
      none: 'none',
    },
    flexGrow: {
      0: '0',
      DEFAULT: '1',
    },
    flexShrink: {
      0: '0',
      DEFAULT: '1',
    },
    fontFamily: {
      sans: [
        'ui-sans-serif',
        'system-ui',
        '-apple-system',
        'BlinkMacSystemFont',
        '"Segoe UI"',
        'Roboto',
        '"Helvetica Neue"',
        'Arial',
        '"Noto Sans"',
        'sans-serif',
        '"Apple Color Emoji"',
        '"Segoe UI Emoji"',
        '"Segoe UI Symbol"',
        '"Noto Color Emoji"',
      ],
      serif: ['ui-serif', 'Georgia', 'Cambria', '"Times New Roman"', 'Times', 'serif'],
      mono: [
        'ui-monospace',
        'SFMono-Regular',
        'Menlo',
        'Monaco',
        'Consolas',
        '"Liberation Mono"',
        '"Courier New"',
        'monospace',
      ],
    },
    fontSize: {
      xs: ['0.75rem', { lineHeight: '1rem' }],
      sm: ['0.875rem', { lineHeight: '1.25rem' }],
      base: ['1rem', { lineHeight: '1.5rem' }],
      lg: ['1.125rem', { lineHeight: '1.75rem' }],
      xl: ['1.25rem', { lineHeight: '1.75rem' }],
      '2xl': ['1.5rem', { lineHeight: '2rem' }],
      '3xl': ['1.875rem', { lineHeight: '2.25rem' }],
      '4xl': ['2.25rem', { lineHeight: '2.5rem' }],
      '5xl': ['3rem', { lineHeight: '1' }],
      '6xl': ['3.75rem', { lineHeight: '1' }],
      '7xl': ['4.5rem', { lineHeight: '1' }],
      '8xl': ['6rem', { lineHeight: '1' }],
      '9xl': ['8rem', { lineHeight: '1' }],
    },
    fontWeight: {
      thin: '100',
      extralight: '200',
      light: '300',
      normal: '400',
      medium: '500',
      semibold: '600',
      bold: '700',
      extrabold: '800',
      black: '900',
    },
    gap: (theme) => theme('spacing'),
    gradientColorStops: (theme) => theme('colors'),
    gridAutoColumns: {
      auto: 'auto',
      min: 'min-content',
      max: 'max-content',
      fr: 'minmax(0, 1fr)',
    },
    gridAutoRows: {
      auto: 'auto',
      min: 'min-content',
      max: 'max-content',
      fr: 'minmax(0, 1fr)',
    },
    gridColumn: {
      auto: 'auto',
      'span-1': 'span 1 / span 1',
      'span-2': 'span 2 / span 2',
      'span-3': 'span 3 / span 3',
      'span-4': 'span 4 / span 4',
      'span-5': 'span 5 / span 5',
      'span-6': 'span 6 / span 6',
      'span-7': 'span 7 / span 7',
      'span-8': 'span 8 / span 8',
      'span-9': 'span 9 / span 9',
      'span-10': 'span 10 / span 10',
      'span-11': 'span 11 / span 11',
      'span-12': 'span 12 / span 12',
      'span-full': '1 / -1',
    },
    gridColumnEnd: {
      auto: 'auto',
      1: '1',
      2: '2',
      3: '3',
      4: '4',
      5: '5',
      6: '6',
      7: '7',
      8: '8',
      9: '9',
      10: '10',
      11: '11',
      12: '12',
      13: '13',
    },
    gridColumnStart: {
      auto: 'auto',
      1: '1',
      2: '2',
      3: '3',
      4: '4',
      5: '5',
      6: '6',
      7: '7',
      8: '8',
      9: '9',
      10: '10',
      11: '11',
      12: '12',
      13: '13',
    },
    gridRow: {
      auto: 'auto',
      'span-1': 'span 1 / span 1',
      'span-2': 'span 2 / span 2',
      'span-3': 'span 3 / span 3',
      'span-4': 'span 4 / span 4',
      'span-5': 'span 5 / span 5',
      'span-6': 'span 6 / span 6',
      'span-full': '1 / -1',
    },
    gridRowStart: {
      auto: 'auto',
      1: '1',
      2: '2',
      3: '3',
      4: '4',
      5: '5',
      6: '6',
      7: '7',
    },
    gridRowEnd: {
      auto: 'auto',
      1: '1',
      2: '2',
      3: '3',
      4: '4',
      5: '5',
      6: '6',
      7: '7',
    },
    gridTemplateColumns: {
      none: 'none',
      1: 'repeat(1, minmax(0, 1fr))',
      2: 'repeat(2, minmax(0, 1fr))',
      3: 'repeat(3, minmax(0, 1fr))',
      4: 'repeat(4, minmax(0, 1fr))',
      5: 'repeat(5, minmax(0, 1fr))',
      6: 'repeat(6, minmax(0, 1fr))',
      7: 'repeat(7, minmax(0, 1fr))',
      8: 'repeat(8, minmax(0, 1fr))',
      9: 'repeat(9, minmax(0, 1fr))',
      10: 'repeat(10, minmax(0, 1fr))',
      11: 'repeat(11, minmax(0, 1fr))',
      12: 'repeat(12, minmax(0, 1fr))',
    },
    gridTemplateRows: {
      none: 'none',
      1: 'repeat(1, minmax(0, 1fr))',
      2: 'repeat(2, minmax(0, 1fr))',
      3: 'repeat(3, minmax(0, 1fr))',
      4: 'repeat(4, minmax(0, 1fr))',
      5: 'repeat(5, minmax(0, 1fr))',
      6: 'repeat(6, minmax(0, 1fr))',
    },
    height: (theme) => ({
      auto: 'auto',
      ...theme('spacing'),
      '1/2': '50%',
      '1/3': '33.333333%',
      '2/3': '66.666667%',
      '1/4': '25%',
      '2/4': '50%',
      '3/4': '75%',
      '1/5': '20%',
      '2/5': '40%',
      '3/5': '60%',
      '4/5': '80%',
      '1/6': '16.666667%',
      '2/6': '33.333333%',
      '3/6': '50%',
      '4/6': '66.666667%',
      '5/6': '83.333333%',
      full: '100%',
      screen: '100vh',
    }),
    inset: (theme, { negative }) => ({
      auto: 'auto',
      ...theme('spacing'),
      ...negative(theme('spacing')),
      '1/2': '50%',
      '1/3': '33.333333%',
      '2/3': '66.666667%',
      '1/4': '25%',
      '2/4': '50%',
      '3/4': '75%',
      full: '100%',
      '-1/2': '-50%',
      '-1/3': '-33.333333%',
      '-2/3': '-66.666667%',
      '-1/4': '-25%',
      '-2/4': '-50%',
      '-3/4': '-75%',
      '-full': '-100%',
    }),
    keyframes: {
      spin: {
        to: {
          transform: 'rotate(360deg)',
        },
      },
      ping: {
        '75%, 100%': {
          transform: 'scale(2)',
          opacity: '0',
        },
      },
      pulse: {
        '50%': {
          opacity: '.5',
        },
      },
      bounce: {
        '0%, 100%': {
          transform: 'translateY(-25%)',
          animationTimingFunction: 'cubic-bezier(0.8,0,1,1)',
        },
        '50%': {
          transform: 'none',
          animationTimingFunction: 'cubic-bezier(0,0,0.2,1)',
        },
      },
    },
    letterSpacing: {
      tighter: '-0.05em',
      tight: '-0.025em',
      normal: '0em',
      wide: '0.025em',
      wider: '0.05em',
      widest: '0.1em',
    },
    lineHeight: {
      none: '1',
      tight: '1.25',
      snug: '1.375',
      normal: '1.5',
      relaxed: '1.625',
      loose: '2',
      3: '.75rem',
      4: '1rem',
      5: '1.25rem',
      6: '1.5rem',
      7: '1.75rem',
      8: '2rem',
      9: '2.25rem',
      10: '2.5rem',
    },
    listStyleType: {
      none: 'none',
      disc: 'disc',
      decimal: 'decimal',
    },
    margin: (theme, { negative }) => ({
      auto: 'auto',
      ...theme('spacing'),
      ...negative(theme('spacing')),
    }),
    maxHeight: (theme) => ({
      ...theme('spacing'),
      full: '100%',
      screen: '100vh',
    }),
    maxWidth: (theme, { breakpoints }) => ({
      none: 'none',
      0: '0rem',
      xs: '20rem',
      sm: '24rem',
      md: '28rem',
      lg: '32rem',
      xl: '36rem',
      '2xl': '42rem',
      '3xl': '48rem',
      '4xl': '56rem',
      '5xl': '64rem',
      '6xl': '72rem',
      '7xl': '80rem',
      full: '100%',
      min: 'min-content',
      max: 'max-content',
      prose: '65ch',
      ...breakpoints(theme('screens')),
    }),
    minHeight: {
      0: '0px',
      full: '100%',
      screen: '100vh',
    },
    minWidth: {
      0: '0px',
      full: '100%',
      min: 'min-content',
      max: 'max-content',
    },
    objectPosition: {
      bottom: 'bottom',
      center: 'center',
      left: 'left',
      'left-bottom': 'left bottom',
      'left-top': 'left top',
      right: 'right',
      'right-bottom': 'right bottom',
      'right-top': 'right top',
      top: 'top',
    },
    opacity: {
      0: '0',
      5: '0.05',
      10: '0.1',
      20: '0.2',
      25: '0.25',
      30: '0.3',
      40: '0.4',
      50: '0.5',
      60: '0.6',
      70: '0.7',
      75: '0.75',
      80: '0.8',
      90: '0.9',
      95: '0.95',
      100: '1',
    },
    order: {
      first: '-9999',
      last: '9999',
      none: '0',
      1: '1',
      2: '2',
      3: '3',
      4: '4',
      5: '5',
      6: '6',
      7: '7',
      8: '8',
      9: '9',
      10: '10',
      11: '11',
      12: '12',
    },
    outline: {
      none: ['2px solid transparent', '2px'],
      white: ['2px dotted white', '2px'],
      black: ['2px dotted black', '2px'],
    },
    padding: (theme) => theme('spacing'),
    placeholderColor: (theme) => theme('colors'),
    placeholderOpacity: (theme) => theme('opacity'),
    ringColor: (theme) => ({
      DEFAULT: theme('colors.blue.500', '#3b82f6'),
      ...theme('colors'),
    }),
    ringOffsetColor: (theme) => theme('colors'),
    ringOffsetWidth: {
      0: '0px',
      1: '1px',
      2: '2px',
      4: '4px',
      8: '8px',
    },
    ringOpacity: (theme) => ({
      DEFAULT: '0.5',
      ...theme('opacity'),
    }),
    ringWidth: {
      DEFAULT: '3px',
      0: '0px',
      1: '1px',
      2: '2px',
      4: '4px',
      8: '8px',
    },
    rotate: {
      '-180': '-180deg',
      '-90': '-90deg',
      '-45': '-45deg',
      '-12': '-12deg',
      '-6': '-6deg',
      '-3': '-3deg',
      '-2': '-2deg',
      '-1': '-1deg',
      0: '0deg',
      1: '1deg',
      2: '2deg',
      3: '3deg',
      6: '6deg',
      12: '12deg',
      45: '45deg',
      90: '90deg',
      180: '180deg',
    },
    saturate: {
      0: '0',
      50: '.5',
      100: '1',
      150: '1.5',
      200: '2',
    },
    scale: {
      0: '0',
      50: '.5',
      75: '.75',
      90: '.9',
      95: '.95',
      100: '1',
      105: '1.05',
      110: '1.1',
      125: '1.25',
      150: '1.5',
    },
    sepia: {
      0: '0',
      DEFAULT: '100%',
    },
    skew: {
      '-12': '-12deg',
      '-6': '-6deg',
      '-3': '-3deg',
      '-2': '-2deg',
      '-1': '-1deg',
      0: '0deg',
      1: '1deg',
      2: '2deg',
      3: '3deg',
      6: '6deg',
      12: '12deg',
    },
    space: (theme, { negative }) => ({
      ...theme('spacing'),
      ...negative(theme('spacing')),
    }),
    stroke: {
      current: 'currentColor',
    },
    strokeWidth: {
      0: '0',
      1: '1',
      2: '2',
    },
    textColor: (theme) => theme('colors'),
    textOpacity: (theme) => theme('opacity'),
    transformOrigin: {
      center: 'center',
      top: 'top',
      'top-right': 'top right',
      right: 'right',
      'bottom-right': 'bottom right',
      bottom: 'bottom',
      'bottom-left': 'bottom left',
      left: 'left',
      'top-left': 'top left',
    },
    transitionDelay: {
      75: '75ms',
      100: '100ms',
      150: '150ms',
      200: '200ms',
      300: '300ms',
      500: '500ms',
      700: '700ms',
      1000: '1000ms',
    },
    transitionDuration: {
      DEFAULT: '150ms',
      75: '75ms',
      100: '100ms',
      150: '150ms',
      200: '200ms',
      300: '300ms',
      500: '500ms',
      700: '700ms',
      1000: '1000ms',
    },
    transitionProperty: {
      none: 'none',
      all: 'all',
      DEFAULT:
        'background-color, border-color, color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter',
      colors: 'background-color, border-color, color, fill, stroke',
      opacity: 'opacity',
      shadow: 'box-shadow',
      transform: 'transform',
    },
    transitionTimingFunction: {
      DEFAULT: 'cubic-bezier(0.4, 0, 0.2, 1)',
      linear: 'linear',
      in: 'cubic-bezier(0.4, 0, 1, 1)',
      out: 'cubic-bezier(0, 0, 0.2, 1)',
      'in-out': 'cubic-bezier(0.4, 0, 0.2, 1)',
    },
    translate: (theme, { negative }) => ({
      ...theme('spacing'),
      ...negative(theme('spacing')),
      '1/2': '50%',
      '1/3': '33.333333%',
      '2/3': '66.666667%',
      '1/4': '25%',
      '2/4': '50%',
      '3/4': '75%',
      full: '100%',
      '-1/2': '-50%',
      '-1/3': '-33.333333%',
      '-2/3': '-66.666667%',
      '-1/4': '-25%',
      '-2/4': '-50%',
      '-3/4': '-75%',
      '-full': '-100%',
    }),
    width: (theme) => ({
      auto: 'auto',
      ...theme('spacing'),
      '1/2': '50%',
      '1/3': '33.333333%',
      '2/3': '66.666667%',
      '1/4': '25%',
      '2/4': '50%',
      '3/4': '75%',
      '1/5': '20%',
      '2/5': '40%',
      '3/5': '60%',
      '4/5': '80%',
      '1/6': '16.666667%',
      '2/6': '33.333333%',
      '3/6': '50%',
      '4/6': '66.666667%',
      '5/6': '83.333333%',
      '1/12': '8.333333%',
      '2/12': '16.666667%',
      '3/12': '25%',
      '4/12': '33.333333%',
      '5/12': '41.666667%',
      '6/12': '50%',
      '7/12': '58.333333%',
      '8/12': '66.666667%',
      '9/12': '75%',
      '10/12': '83.333333%',
      '11/12': '91.666667%',
      full: '100%',
      screen: '100vw',
      min: 'min-content',
      max: 'max-content',
    }),
    zIndex: {
      auto: 'auto',
      0: '0',
      10: '10',
      20: '20',
      30: '30',
      40: '40',
      50: '50',
    },
  },
  variantOrder: [
    'first',
    'last',
    'odd',
    'even',
    'visited',
    'checked',
    'empty',
    'read-only',
    'group-hover',
    'group-focus',
    'focus-within',
    'hover',
    'focus',
    'focus-visible',
    'active',
    'disabled',
  ],
  variants: {
    accessibility: ['responsive', 'focus-within', 'focus'],
    alignContent: ['responsive'],
    alignItems: ['responsive'],
    alignSelf: ['responsive'],
    animation: ['responsive'],
    appearance: ['responsive'],
    backdropBlur: ['responsive'],
    backdropBrightness: ['responsive'],
    backdropContrast: ['responsive'],
    backdropFilter: ['responsive'],
    backdropGrayscale: ['responsive'],
    backdropHueRotate: ['responsive'],
    backdropInvert: ['responsive'],
    backdropOpacity: ['responsive'],
    backdropSaturate: ['responsive'],
    backdropSepia: ['responsive'],
    backgroundAttachment: ['responsive'],
    backgroundBlendMode: ['responsive'],
    backgroundClip: ['responsive'],
    backgroundColor: ['responsive', 'dark', 'group-hover', 'focus-within', 'hover', 'focus'],
    backgroundImage: ['responsive'],
    backgroundOpacity: ['responsive', 'dark', 'group-hover', 'focus-within', 'hover', 'focus'],
    backgroundPosition: ['responsive'],
    backgroundRepeat: ['responsive'],
    backgroundSize: ['responsive'],
    backgroundOrigin: ['responsive'],
    blur: ['responsive'],
    borderCollapse: ['responsive'],
    borderColor: ['responsive', 'dark', 'group-hover', 'focus-within', 'hover', 'focus'],
    borderOpacity: ['responsive', 'dark', 'group-hover', 'focus-within', 'hover', 'focus'],
    borderRadius: ['responsive'],
    borderStyle: ['responsive'],
    borderWidth: ['responsive'],
    boxDecorationBreak: ['responsive'],
    boxShadow: ['responsive', 'group-hover', 'focus-within', 'hover', 'focus'],
    boxSizing: ['responsive'],
    brightness: ['responsive'],
    clear: ['responsive'],
    container: ['responsive'],
    contrast: ['responsive'],
    cursor: ['responsive'],
    display: ['responsive'],
    divideColor: ['responsive', 'dark'],
    divideOpacity: ['responsive', 'dark'],
    divideStyle: ['responsive'],
    divideWidth: ['responsive'],
    dropShadow: ['responsive'],
    fill: ['responsive'],
    filter: ['responsive'],
    flex: ['responsive'],
    flexDirection: ['responsive'],
    flexGrow: ['responsive'],
    flexShrink: ['responsive'],
    flexWrap: ['responsive'],
    float: ['responsive'],
    fontFamily: ['responsive'],
    fontSize: ['responsive'],
    fontSmoothing: ['responsive'],
    fontStyle: ['responsive'],
    fontVariantNumeric: ['responsive'],
    fontWeight: ['responsive'],
    gap: ['responsive'],
    gradientColorStops: ['responsive', 'dark', 'hover', 'focus'],
    grayscale: ['responsive'],
    gridAutoColumns: ['responsive'],
    gridAutoFlow: ['responsive'],
    gridAutoRows: ['responsive'],
    gridColumn: ['responsive'],
    gridColumnEnd: ['responsive'],
    gridColumnStart: ['responsive'],
    gridRow: ['responsive'],
    gridRowEnd: ['responsive'],
    gridRowStart: ['responsive'],
    gridTemplateColumns: ['responsive'],
    gridTemplateRows: ['responsive'],
    height: ['responsive'],
    hueRotate: ['responsive'],
    inset: ['responsive'],
    invert: ['responsive'],
    isolation: ['responsive'],
    justifyContent: ['responsive'],
    justifyItems: ['responsive'],
    justifySelf: ['responsive'],
    letterSpacing: ['responsive'],
    lineHeight: ['responsive'],
    listStylePosition: ['responsive'],
    listStyleType: ['responsive'],
    margin: ['responsive'],
    maxHeight: ['responsive'],
    maxWidth: ['responsive'],
    minHeight: ['responsive'],
    minWidth: ['responsive'],
    mixBlendMode: ['responsive'],
    objectFit: ['responsive'],
    objectPosition: ['responsive'],
    opacity: ['responsive', 'group-hover', 'focus-within', 'hover', 'focus'],
    order: ['responsive'],
    outline: ['responsive', 'focus-within', 'focus'],
    overflow: ['responsive'],
    overscrollBehavior: ['responsive'],
    padding: ['responsive'],
    placeContent: ['responsive'],
    placeItems: ['responsive'],
    placeSelf: ['responsive'],
    placeholderColor: ['responsive', 'dark', 'focus'],
    placeholderOpacity: ['responsive', 'dark', 'focus'],
    pointerEvents: ['responsive'],
    position: ['responsive'],
    resize: ['responsive'],
    ringColor: ['responsive', 'dark', 'focus-within', 'focus'],
    ringOffsetColor: ['responsive', 'dark', 'focus-within', 'focus'],
    ringOffsetWidth: ['responsive', 'focus-within', 'focus'],
    ringOpacity: ['responsive', 'dark', 'focus-within', 'focus'],
    ringWidth: ['responsive', 'focus-within', 'focus'],
    rotate: ['responsive', 'hover', 'focus'],
    saturate: ['responsive'],
    scale: ['responsive', 'hover', 'focus'],
    sepia: ['responsive'],
    skew: ['responsive', 'hover', 'focus'],
    space: ['responsive'],
    stroke: ['responsive'],
    strokeWidth: ['responsive'],
    tableLayout: ['responsive'],
    textAlign: ['responsive'],
    textColor: ['responsive', 'dark', 'group-hover', 'focus-within', 'hover', 'focus'],
    textDecoration: ['responsive', 'group-hover', 'focus-within', 'hover', 'focus'],
    textOpacity: ['responsive', 'dark', 'group-hover', 'focus-within', 'hover', 'focus'],
    textOverflow: ['responsive'],
    textTransform: ['responsive'],
    transform: ['responsive'],
    transformOrigin: ['responsive'],
    transitionDelay: ['responsive'],
    transitionDuration: ['responsive'],
    transitionProperty: ['responsive'],
    transitionTimingFunction: ['responsive'],
    translate: ['responsive', 'hover', 'focus'],
    userSelect: ['responsive'],
    verticalAlign: ['responsive'],
    visibility: ['responsive'],
    whitespace: ['responsive'],
    width: ['responsive'],
    wordBreak: ['responsive'],
    zIndex: ['responsive', 'focus-within', 'focus'],
  },
  plugins: [],
};

'''
'''--- theme/index.js ---
module.exports = require('./theme');

'''
'''--- theme/theme.js ---
const colors = {
  primary: '#7871FF',
  lightPrimary: '#F8F8FF',
  secondary: '#FFCE76',
  collection: '#719FF7',
  white: '#FFFFFF',
  lightGrey: '#F6F6F4',
  darkGrey: '#8383A5',
  black: '#000000',
  success: '#1BD022',
  error: '#F771A1',
  current: 'currentColor',
  transparent: 'transparent',
  inherit: 'inherit',
};

const fontFamily = {
  body: 'Roboto, ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", "Helvetica Neue", Arial, "Noto Sans", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji"',
  heading:
    'Anton, ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", "Helvetica Neue", Arial, "Noto Sans", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji"',
};

const fontSize = {
  xs: '0.75rem',
  sm: '0.875rem',
  md: '1rem',
  lg: '1.125rem',
  xl: '1.5rem',
  '2xl': '2rem',
  '3xl': '3rem',
};

const lineHeight = {
  xs: '1rem',
  sm: '1.25rem',
  md: '1.5rem',
  lg: '1.75rem',
  xl: '2.25rem',
  '2xl': '3rem',
  '3xl': '4rem',
};

const screens = {
  sm: '365px',
  // => @media (min-width: 640px) { ... }

  xs: '560px',
  // => @media (min-width: 560px) { ... }

  md: '750px',
  // => @media (min-width: 640px) { ... }

  lg: '1024px',
  // => @media (min-width: 1024px) { ... }

  xl: '1280px',
  // => @media (min-width: 1280px) { ... }
};

const boxShadow = {
  DEFAULT: '0 0 4.375rem 0 rgba(48,43,140, 0.36)',
  button: '0 0 2rem 0 rgba(119, 113, 247, 0.38)',
  'button-secondary': '0 0 2rem 0 rgba(246, 208, 130, 0.38)',
  none: 'none',
};

module.exports = {
  colors,
  fontFamily,
  fontSize,
  lineHeight,
  boxShadow,
  screens,
};

'''
'''--- tsconfig.json ---
{
  "compilerOptions": {
    "target": "es5",
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "baseUrl": ".",
    "paths": {
      "*": [
        "*"
      ]
    }
  },
  "include": [
    "next-env.d.ts",
    "**/*.ts",
    "theme/*.js",
    "**/*.tsx",
    ".eslintrc.js"
  ],
  "exclude": [
    "node_modules"
  ]
}

'''