*GitHub Repository "IkehAkinyemi/lottery-smart-contract"*

'''--- README.md ---
# Near - Lottery

This repository is inspired by the Lottery game on the Lear-Near repository. This is a game DApp built on Near blockchain. The smart contract for this game is written with AssemblyScript.

The goal of this repository is to make it as easy as possible to get started writing unit test for AssemblyScript contracts built to work with NEAR Protocol.

'''
'''--- as-pect.config.js ---
module.exports = require("near-sdk-as/imports");
module.exports.include.push("**/*.unit.spec.ts");

'''
'''--- asconfig.json ---
{
  "workspaces": [
    "src/lottery"
  ]
}

'''
'''--- package.json ---
{
  "name": "starterkit-assemblyscript",
  "version": "",
  "description": "Starter folder for writing AssemblyScript contracts on NEAR blockchain",
  "scripts": {
    "dev": "watch -d -n 1 'clear && yarn test:unit'",
    "asp": "asp --verbose --nologo",
    "test:unit": "yarn asp -f unit.spec",
    "build": "asb --target debug",
    "build:release": "asb",
    "test": "yarn build:release && yarn test:unit && yarn test:simulate",
    "test:simulate": "cargo test -- --nocapture",
    "clean": "rm -rf ./build && rm -rf ./neardev && rm -rf ./target",
    "test:debug": "node --inspect-brk ./node_modules/.bin/asp"
  },
  "keywords": ["Smart contract", "AssemblyScript", "Game development", "blockchain", "near"],
  "devDependencies": {
    "near-sdk-as": "^3.0.0"
  }
}

'''
'''--- scripts/1.init.sh ---
#!/usr/bin/env bash

[ -z "$CONTRACT" ] && echo "Missing \$CONTRACT environment variable"
[ -z "$OWNER" ] && echo "Missing \$OWNER environment variable"

echo "deleting $CONTRACT and setting $OWNER as beneficiary"
echo
near delete $CONTRACT $OWNER

echo --------------------------------------------
echo
echo "cleaning up the /neardev folder"
echo
rm -rf ./neardev

# exit on first error after this point to avoid redeploying with successful build
set -e

echo --------------------------------------------
echo
echo "rebuilding the contract (release build)"
echo
yarn build:release

echo --------------------------------------------
echo
echo "redeploying the contract"
echo
near dev-deploy ./build/release/lottery.wasm

echo --------------------------------------------
echo run the following commands
echo
echo 'export CONTRACT=__new_contract_account_id__'
echo "near call \$CONTRACT init '{\"owner\":\"'\$OWNER'\"}' --accountId \$CONTRACT"
echo
echo

exit 0

'''
'''--- scripts/README.md ---

'''
'''--- src/as-pect.d.ts ---
/// <reference types="@as-pect/assembly/types/as-pect" />
'''
'''--- src/as_types.d.ts ---
/// <reference types="near-sdk-as/assembly/as_types" />
'''
'''--- src/lottery/README.md ---

'''
'''--- src/lottery/__tests__/README.md ---
## Unit tests

Unit tests can be run from the top level folder using the following command:

```
yarn test:unit
```

### Tests for Contract in `index.unit.spec.ts`

You can run just these tests using

```
yarn asp -f index.unit
```

```
[Describe]: Contract

 [Success]: ✔ can be initialized with owner
 [Success]: ✔ is active when initialized

[Describe]: Contract interface for Lottery

 [Success]: ✔ provides an explanation of the lottery
 [Success]: ✔ provides a value for what a player may win
 [Success]: ✔ allows a player to play
 [Success]: ✔ provides access to most recent player
 [Success]: ✔ confirms whether a player has played
 [Success]: ✔ reports the winner of the lottery

[Describe]: Contract interface for Lottery Fees

 [Success]: ✔ reports the current fee to play the lottery
 [Success]: ✔ reports the fee strategy
 [Success]: ✔ explains possible fee strategies
 [Success]: ✔ adjusts the fee after 1 player

[Describe]: Contract interface for Lottery Management

 [Success]: ✔ allows ONLY the owner to change the terms of the lottery
 [Success]: ✔ adjusts the fee based on FeeStrategy
 [Success]: ✔ allows ONLY the owner to reset the lottery

    [File]: src/lottery/__tests__/index.unit.spec.ts
  [Groups]: 5 pass, 5 total
  [Result]: ✔ PASS
[Snapshot]: 0 total, 0 added, 0 removed, 0 different
 [Summary]: 15 pass,  0 fail, 15 total
    [Time]: 133.988ms
```

### Tests for Lottery in `lottery.unit.spec.ts`

You can run just these tests using

```
yarn asp -f lottery.unit
```

```
[Describe]: Lottery

 [Success]: ✔ can explain itself

[Describe]: Lottery#play

 [Success]: ✔ plays like a lottery

[Describe]: Lottery#configure

 [Success]: ✔ can be reconfigured
 [Success]: ✔ throws with invalid values for chance

    [File]: src/lottery/__tests__/lottery.unit.spec.ts
  [Groups]: 4 pass, 4 total
  [Result]: ✔ PASS
[Snapshot]: 0 total, 0 added, 0 removed, 0 different
 [Summary]: 4 pass,  0 fail, 4 total
    [Time]: 11.824ms
```

### Tests for FeeStrategy in `fee-strategies.unit.spec.ts`

You can run just these tests using

```
yarn asp -f strategies.unit
```

```
[Describe]: FeeStrategy

 [Success]: ✔ is instantiated with exponential strategy by default
 [Success]: ✔ can be instantiated with a different strategy
 [Success]: ✔ can explain itself

[Describe]: FeeStrategy#calculate_fee

 [Success]: ✔ handles StrategyType.Free
 [Success]: ✔ handles StrategyType.Constant
 [Success]: ✔ handles StrategyType.Linear
 [Success]: ✔ handles StrategyType.Exponential

    [File]: src/lottery/__tests__/fee-strategies.unit.spec.ts
  [Groups]: 3 pass, 3 total
  [Result]: ✔ PASS
[Snapshot]: 0 total, 0 added, 0 removed, 0 different
 [Summary]: 7 pass,  0 fail, 7 total
    [Time]: 6.896ms
```

'''
'''--- src/lottery/__tests__/index.unit.spec.ts ---
import { VMContext } from "near-mock-vm";
import { Context, u128 } from "near-sdk-core";
import { pickANum } from "../assembly";

import { Lottery, TxFee } from "../assembly/model";

const creator = "ikehakinyemi.testnet";

describe("Checks for creating account", () => {
  beforeEach(() => {
    VMContext.setAttached_deposit(TxFee);
    VMContext.setSigner_account_id(creator);
  });

  it("creates a new game", () => {
    const game = new Lottery();
    const id = game.id;
    expect(id).toBeTruthy("Confirmed that a game was created!");
  });

  it("create and reset the luckyNum of a new game", () => {
    const game = new Lottery();
    const resetValue = game.reset();

    expect(resetValue).toBeTruthy(
      "The luckyNum has been reset to another number"
    );
  });
});

'''
'''--- src/lottery/asconfig.json ---
{
  "extends": "near-sdk-as/asconfig.json"
}

'''
'''--- src/lottery/assembly/index.ts ---
import { TxFee, Lottery, players, Player, WinningPrize, GAS } from "./model";
import { u128, ContractPromiseBatch, Context, logging } from "near-sdk-as";

/**
 * @returns @GameID
 * creates a new game and return the id of the game.
 * To pick a new number require a deposit of 0.5 Near as transaction fee
 */
export function pickANum(): void {
  verifyDeposit(Context.attachedDeposit);
  const game = new Lottery();
  const guess = game.play();

  if (players.contains(Context.sender)) {
   let  player = players.get(Context.sender) as Player;
    player.guesses.push(guess);
    players.set(Context.sender, player);
  } else {
    new Player(guess);
  }
}

function on_payout_complete(): string {
  logging.log("This winner has successfully been paid");
  return new Lottery().reset();
}

/**
 * This handles the payout to a player who guesses a number eqaul to the luckyNum.
 * Transfers the winningPrize in Near token to a winner
 */
export function payout(): void {
  const player = players.get(Context.sender) as Player;

  for (let x = 0; x < player.guesses.length; x++) {
    if (player.guesses[x] === true) {
      const to_winner = ContractPromiseBatch.create(Context.sender);
      const self = Context.contractName;

      // transfer payout to winner
      to_winner.transfer(WinningPrize);

      // receive confirmation of payout before setting game to inactive
      to_winner
        .then(self)
        .function_call("on_payout_complete", "{}", u128.Zero, GAS);
    }
  }
}

/**
 * @param deposit
 * Verify the deposit is up to the threshold price of 0.5 Near tokens.
 */
function verifyDeposit(deposit: u128): void {
  assert(deposit >= TxFee, "You need 0.5 Near token to pick a number");
}

'''
'''--- src/lottery/assembly/model.ts ---
import { logging, RNG, u128, PersistentMap, PersistentVector, Context } from 'near-sdk-as';

export type AccountID = string;

export const TxFee = u128.from("500000000000000000000000");
export const WinningPrize = u128.from("100000000000000000000000");
export const GAS: u64 = 20_000_000_000_000;

@nearBindgen
export class Lottery {
  private luckyNum: u32 = 3;
  id: string;

  constructor() {
    const randg = new RNG<u32>(1, u32.MAX_VALUE);
    this.id = "LO-" + randg.next().toString();
  }

  play(): bool {
    const randg = new RNG<u32>(1, u32.MAX_VALUE);
    const pickedNum = randg.next();
    logging.log("You picked: " + pickedNum.toString());

    return pickedNum === this.luckyNum;
  }

   reset(): string {
    const randg = new RNG<u32>(1, u32.MAX_VALUE);
    const  randNum = randg.next();
    assert(randNum !== this.luckyNum, "Rerun function again to generate a new randNum")

    this.luckyNum = randNum;
    return "The luckyNum has been reset to another number";
  }
}

@nearBindgen
export class Player {
  id: AccountID;
  guesses: PersistentVector<bool>

  constructor(isRight: bool) {
    this.id = Context.sender;
    this.guesses = new PersistentVector<bool>("g");

    this.guesses.push(isRight);
  }

} 

export const players = new PersistentMap<AccountID, Player>("p");
'''
'''--- src/tsconfig.json ---
{
  "extends": "../node_modules/assemblyscript/std/assembly.json",
  "include": ["./**/*.ts"]
}

'''