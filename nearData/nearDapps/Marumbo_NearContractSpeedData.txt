*GitHub Repository "Marumbo/NearContractSpeedData"*

'''--- README.md ---
# OverSpeeding Vehicle Data Contract

This contract is designed to receive data from an IOT device
The goal is to prototype, how IOT can interface with blockchain
NEAR protocol provides an easy to use layer that allows for the two worlds to co-exist. I beleive both will have impact in our near futures.

## Setup

- Clone this repo
- Run `yarn`
- Run `yarn build`

## Test 

- Run `yarn test`

## Usage
Some variables are expected to be set to use contract. 
Variables for CONTRACT, OWNER, VEHICLEID and CAMERAID.

Scripts are available with hints on data to enter for variables.

- Environment
  ```sh
  export CONTRACT=        # depends on deployment
  export OWNER=           # any account you control
  export CAMERA=          #camera demo account, suggested sub-account of your account 
  export VEHICLE=         #vehicle owner demo account, suggested sub-account of your account 

  # for example
  # export CONTRACT=dev-1615190770786-2702449
  # export OWNER=<youraccount>.testnet
  ```

- Commands

Typically run script commands in order of numbers

  _Usage Scripts_

  ```sh

  ./scripts/1.dev-deploy.sh         # cleanup, compile and deploy contract
  
  ./scripts/2.call-set-speed-data.sh # enters inital speed,vehicle palte, datetime from IOT device 
  
  ./scripts/3.get-all-overspeeding-data.sh  # returns all speed data details associated with Contract details it is deployed to.
  
  ./scripts/4.register-camera.sh  # registers IOT device camera accounts to submit data to contract
  
  ./scripts/5.list-of-cameras.sh  # returns list of cameras
  
  ./scripts/6.camera-specific-overspeed-data.sh  # returns list of cameras
  
  ./scripts/7.register-vehicle.sh  # registers vehicles associated specific vehicle owner
  
  ./scripts/8.list-of-vehicles.sh  # returns list of vehicles
  
  ./scripts/9.list-my-vehicles.sh #returns list of vehicles associated with owner account id
  
   ./scripts/9.list-my-vehicles.sh #returns list of vehicles associated with owner account id

    
```
# File Structure

![file structure](./images/fileStructure.png)

# Contributors
 
 [Marumbo Sichinga](https://github.com/Marumbo)

'''
'''--- as-pect.config.js ---
module.exports = require("near-sdk-as/imports")
'''
'''--- asconfig.json ---
{
    "extends":"near-sdk-as/asconfig.json"
}
'''
'''--- assembly/__tests__/as-pect.d.ts ---
/// <reference types="@as-pect/assembly/types/as-pect" />

'''
'''--- assembly/__tests__/example.spec.ts ---
 
import { PersistentVector, VMContext, VM } from "near-sdk-as";
import { GetAllOverSpeedingTransactions, ListOfCameras, RegisterCamera, SubmitOverSpeedTransaction } from "..";
import { CameraData,Position,SpeedData, VehicleData } from "../model";

const contract = "speedData";
const alice = "alice";

let cameraData = new CameraData();
let vehicleData = new VehicleData();
let speedDataObject = new SpeedData(0,"", 0.0);

let speed= 0;
let vehiclePlate="";
let datetime:f32 = 0.0
let location = new Position("0.0","0.0")

let result = new Array<Map<string,string>>();

let overSpeedTransaction  : PersistentVector<Map<string,string>>;

let vehicles : PersistentVector<Map<string,string>>;

let cameras :PersistentVector<Map<string,string>>;

describe("Overspeeding Contract Test", ()=>{

  beforeEach(() => {
    VMContext.setCurrent_account_id(contract);
    VMContext.setSigner_account_id(alice);
   
 overSpeedTransaction = new PersistentVector<Map<string,string>>("OverSpeedTransaction");

vehicles = new PersistentVector<Map<string,string>>("Vehicles");

cameras = new PersistentVector<Map<string,string>>("Cameras");
  });

 
  it("should be able to add one set of data", () => {

    speed= 45;
    vehiclePlate="MA1234";
    datetime = 122344.12

   SubmitOverSpeedTransaction(speed,vehiclePlate,datetime);
    //let setSpeedResponse = speedDataObject.SubmitOverSpeedTransaction(speed,vehiclePlate,datetime);

    expect(VM.logs()).toContainEqual("Data added to overspeeding transactions");
  });

  
  it("Return all overSpeeding Transactions", () => {
  
    speed= 45;
    vehiclePlate="MA1234";
    datetime = 122344.12
    SubmitOverSpeedTransaction(speed,vehiclePlate,datetime);

    speed= 87;
    vehiclePlate="TEST1234";
    datetime = 1234785.92
    SubmitOverSpeedTransaction(speed,vehiclePlate,datetime);

    let allSpeedData = GetAllOverSpeedingTransactions();

    expect(allSpeedData.length).toBe(2,"Speed data stored should be 2");
    expect(VM.logs()).toContainEqual("Speed data returned");
 });

 
 it("Register Camera test", () => {
  
  location = new Position("12.34","-12.45")
  let result = RegisterCamera(location)

  expect(result).toBe("Camera data added to map");
  expect(VM.logs()).toContainEqual("camera registered");
});

 
it("Return Camera List", () => {
  
  location = new Position("12.34","-12.45")
  RegisterCamera(location)

  location = new Position("14.67","100.34")
  RegisterCamera(location)
  
  let result = ListOfCameras()

  expect(result).toHaveLength(2,"List of Cameras");
  expect(VM.logs()).toContainEqual("List of cameras returned.");
});

 
it("Camera Over speed transactions", () => {
  
  location = new Position("12.34","-12.45")
  RegisterCamera(location)

  location = new Position("14.67","100.34")
  RegisterCamera(location)
  
  let result = ListOfCameras()

  expect(result).toHaveLength(2,"List of Cameras");
  expect(VM.logs()).toContainEqual("List of cameras returned.");
});

});
'''
'''--- assembly/index.ts ---
import {logging} from "near-sdk-as"
import { CameraData, Position, SpeedData, VehicleData } from "./model";

let cameraData = new CameraData();
let vehicleData = new VehicleData();
let speedDataObject = new SpeedData(0,"", 0.0);

export function SubmitOverSpeedTransaction(speed:i32,vehiclePlate:string, datetime: f32):void{
    
    assert(speed > 40,"Speed must be above 40")
    speedDataObject.SubmitOverSpeedTransaction(speed,vehiclePlate, datetime);
    logging.log("Data added to overspeeding transactions")
    
}

export function GetAllOverSpeedingTransactions():Array<Map<string,string>>{

    let result = new Array<Map<string,string>>();
    result = speedDataObject.ReturnAllOverSpeedingTransactions();

    logging.log("Speed data returned");
    return result;
}

export function RegisterCamera(location: Position):string{

    logging.log(location);
    let result = cameraData.RegisterCamera(location);
    logging.log("camera registered");
    return result;
}

export function ListOfCameras():Array<Map<string,string>>{

    let result = new Array<Map<string,string>>();
    result = cameraData.ListOfCameras();
    logging.log("List of cameras returned.");
    return result;
}

export function CameraOverSpeedTransactions(cameraId:string):Array<Map<string,string>>{

    let result = new Array<Map<string,string>>();
    result = speedDataObject.GetCameraOverSpeedTransactions(cameraId);

    logging.log(" camera id specifc data returned");
    return result;

}

export function RegisterVehicle(vehiclePlate:string):string{
    
    let result = vehicleData.RegisterVehicle(vehiclePlate);
    logging.log("vehicle registered");
    return result;
}

export function ListOfVehicles():Array<Map<string,string>>{

    let result = new Array<Map<string,string>>();
    result = vehicleData.ListAllVehicles();
    logging.log("List of all registered vehicles");
    return result;
}

export function ListMyVehicles(ownderId:string):Array<Map<string,string>>{

    let result = vehicleData.ListMyVehicles(ownderId);
    logging.log("List of all registered vehicles");
    return result;
}

export function VehicleOverSpeedTransactions(vehiclePlate:string):Array<Map<string,string>>{

    let result = new Array<Map<string,string>>();
    result = speedDataObject.GetVehicleIdOverspeedTransactions(vehiclePlate);

    logging.log(" Vehicle specifc data returned");
    return result;

}

'''
'''--- assembly/model.ts ---
import { context, logging } from 'near-sdk-as';
import { cameras, overSpeedTransaction, vehicles } from './storage';

@nearBindgen
export class SpeedData {
    private speed: i32;
    private vehiclePlate: string;
    private cameraId : string;
    private cameraTime: f32;
    private signedTime: u64;

 constructor(

     speed: i32,
      vehiclePlate: string,
      cameraTime : f32
 ) 
 { 
     this.speed = speed;
     this.vehiclePlate = vehiclePlate;
     this.cameraTime = cameraTime;
 }

 SubmitOverSpeedTransaction(speed:i32, vehiclePlate: string, cameraTime: f32):string{
    overSpeedTransaction;
    
    this.speed = speed;
    this.vehiclePlate = vehiclePlate;
    this.cameraTime =cameraTime;
    this.signedTime = context.blockTimestamp;
   this.cameraId = context.sender;

    let map = new Map<string, string>();
    map.set("speed", `${speed}`);
    map.set("vehiclePlate", `${vehiclePlate}`);
    map.set("cameraId", `${this.cameraId}`);
    map.set("cameraTime", `${this.cameraTime}`);
    map.set("signedTime", `${this.signedTime}`);

    //add map data to vector
   overSpeedTransaction.push(map);

    logging.log("Data added to overspeeding transactions");

    return "Data added to overspeeding transactions";
}

ReturnAllOverSpeedingTransactions():Array<Map<string,string>>{

    overSpeedTransaction;

   
    let result = new Array<Map<string,string>>();

    for(let i:number = 0; i <overSpeedTransaction.length; i++){
        
        let map = new Map<string,string>();
        map.set("speed", `${overSpeedTransaction[<i32>i].get("speed")}`);
        map.set("vehiclePlate", `${overSpeedTransaction[<i32>i].get("vehiclePlate")}`);
        map.set("cameraId",`${overSpeedTransaction[<i32>i].get("cameraId")}`);
        map.set("cameraTime", `${overSpeedTransaction[<i32>i].get("cameraTime")}`);
        map.set("signedTime", `${overSpeedTransaction[<i32>i].get("signedTime")}`);
       
        
        result.push(map);  
    }

    return result;
}

GetVehicleIdOverspeedTransactions(vehiclePlate:string):Array<Map<string,string>>{

    overSpeedTransaction;

   
    let result = new Array<Map<string,string>>();

    for(let i:number = 0; i <overSpeedTransaction.length; i++){
        if(overSpeedTransaction[<i32>i].get("vehiclePlate") == vehiclePlate ){

            let map = new Map<string,string>();
            map.set("speed", `${overSpeedTransaction[<i32>i].get("speed")}`);
            map.set("vehiclePlate", `${overSpeedTransaction[<i32>i].get("vehiclePlate")}`);
            map.set("cameraId",`${overSpeedTransaction[<i32>i].get("cameraId")}`);
            map.set("cameraTime", `${overSpeedTransaction[<i32>i].get("cameraTime")}`);
            map.set("signedTime", `${overSpeedTransaction[<i32>i].get("signedTime")}`);
            
            
            result.push(map);  
        }
    }

    return result;

}

GetCameraOverSpeedTransactions(cameraId:string):Array<Map<string,string>>{

    overSpeedTransaction;

   
    let result = new Array<Map<string,string>>();

    for(let i:number = 0; i <overSpeedTransaction.length; i++){
        if(overSpeedTransaction[<i32>i].get("cameraId") == cameraId){

            let map = new Map<string,string>();
            map.set("speed", `${overSpeedTransaction[<i32>i].get("speed")}`);
            map.set("vehiclePlate", `${overSpeedTransaction[<i32>i].get("vehiclePlate")}`);
            map.set("cameraId",`${overSpeedTransaction[<i32>i].get("cameraId")}`);
            map.set("cameraTime", `${overSpeedTransaction[<i32>i].get("cameraTime")}`);
            map.set("signedTime", `${overSpeedTransaction[<i32>i].get("signedTime")}`);
            
            
            result.push(map);  
        }
    }

    return result;

}

}

@nearBindgen
export class CameraData {
    private cameraId: string
    private location: Position
constructor(
 
){}

RegisterCamera(location:Position): string{

   // this.location = location;
    this.cameraId = context.sender;

    let map = new Map<string,string>();

    map.set("cameraId",this.cameraId);
    map.set("latitude",location.lat);
    map.set("longitude",location.lng);

    cameras.push(map);

    logging.log("Camera data added to map");

    return "Camera data added to map";
}

ListOfCameras(): Array<Map<string,string>>{
    
    let result = new Array<Map<string,string>>();

    for(let i:number = 0; i <cameras.length; i++){
        
        let map = new Map<string,string>();
        map.set("cameraId", `${cameras[<i32>i].get("cameraId")}`);
        map.set("latitude", `${cameras[<i32>i].get("latitude")}`);
        map.set("longitude", `${cameras[<i32>i].get("longitude")}`);
    
        result.push(map);  
    }

    return result;
}
}

@nearBindgen
export class VehicleData {
    private ownderId: string;
    private plate: string
    constructor(
    
){

}

RegisterVehicle(vehiclePlate: string): string{
    this.ownderId = context.sender;
    this.plate = vehiclePlate;
    let map = new Map<string,string>();
    map.set("ownerId", this.ownderId);
    map.set("vehiclePlate",this.plate);

    vehicles.push(map);

    logging.log("Vehicle registered");

    return "Vehicle registered";
}

ListAllVehicles(): Array<Map<string,string>>{

    let result = new Array<Map<string,string>>();

    for(let i:number = 0; i <vehicles.length; i++){
        
        let map = new Map<string,string>();
        map.set("ownerId", `${vehicles[<i32>i].get("ownerId")}`);
        map.set("vehiclePlate", `${vehicles[<i32>i].get("vehiclePlate")}`);

        result.push(map);  
    }

    return result;
}

ListMyVehicles(ownderId:string):Array<Map<string,string>>{

    let result = new Array<Map<string,string>>();

    for(let i:number = 0; i <vehicles.length; i++){
        
        if( vehicles[<i32>i].get("ownerId") == ownderId){

            let map = new Map<string,string>();
            map.set("ownerId", `${vehicles[<i32>i].get("ownerId")}`);
            map.set("vehiclePlate", `${vehicles[<i32>i].get("vehiclePlate")}`);        
            result.push(map);  
        }
    }

    return result;
}

}

@nearBindgen
export class Position {
    
    constructor(
        public lat: string,
        public lng: string,
    ){
        
     }
}
'''
'''--- assembly/storage.ts ---
import { PersistentMap, PersistentVector } from "near-sdk-as";
import { Position } from "./model";

export const overSpeedTransaction = new PersistentVector<Map<string,string>>("OverSpeedTransaction");

export const vehicles = new PersistentVector<Map<string,string>>("Vehicles");

export const cameras = new PersistentVector<Map<string,string>>("Cameras");

'''
'''--- assembly/utils.ts ---

'''
'''--- package.json ---
{
  "name": "overspeedingdata",
  "version": "1.0.0",
  "description": "Contract to record and pull speeding data form IOT devices with speed cameras.",
  "main": "index.js",
  "scripts": {
    "test": "asp",
    "build": "asb"
  },
  "author": "Marumbo",
  "license": "MIT",
  "devDependencies": {
    "near-sdk-as": "^3.2.3"
  }
}

'''
'''--- scripts/1.dev-deploy.sh ---
#!/usr/bin/env bash

[ -z "$CONTRACT" ] && echo "Missing \$CONTRACT environment variable"
[ -z "$OWNER" ] && echo "Missing \$OWNER environment variable"

echo "deleting $CONTRACT and setting $OWNER as beneficiary"
echo
near delete $CONTRACT $OWNER

echo --------------------------------------------
echo
echo "cleaning up the /neardev folder"
echo
rm -rf ./neardev

# exit on first error after this point to avoid redeploying with successful build
set -e

echo --------------------------------------------
echo
echo "rebuilding the contract"
echo "Ensure  Near SDK is installed to run build"
echo
echo "if build fails, run 'yarn add -D near-sdk-as' "
echo
echo
yarn build

echo --------------------------------------------
echo
echo "redeploying the contract"
echo
near dev-deploy ./build/release/overspeedingdata.wasm

# Run near deploy <yourAccountName.testnet> ./build/release/overspeedingdata.wasm
#if you would like to deploy contact to your own account
echo --------------------------------------------
echo run the following commands
echo
echo 'export CONTRACT=<dev-123-456>'
echo 'export OWNER=<your own account>'
echo 'export CAMERA=<your account or sub-account for camera account>'
echo 'export VEHICLE=<your account or sub-account for vehicle account>'
echo
echo

exit 0
'''
'''--- scripts/10.vehicle-specific-overspeed-data.sh ---
#!/usr/bin/env bash

[ -z "$CONTRACT" ] && echo "Missing \$CONTRACT environment variable"
[ -z "$OWNER" ] && echo "Missing \$OWNER environment variable"
[ -z "$VEHICLE" ] && echo "Missing \$CAMERA environment variable"

echo "Vehicle specific speed transactions"
echo
echo 

echo --------------------------------------------
echo
echo near view \$CONTRACT VehicleOverSpeedTransactions '{"vehiclePlate":"MA1234"}'
echo 
echo --------------------------------------------

near view $CONTRACT VehicleOverSpeedTransactions '{"vehiclePlate":"MA1234"}'

echo "Change template data entries on subsequent runs to ensure data change"
echo
echo "Useful when testing getting Vehicle plate or Camera Id specific data"
echo "Change export owner with other accounts or dev details by using contract to sign call"
echo "To vary context sender details"
echo --------------------------------------------

exit 0
'''
'''--- scripts/2.call-set-speed-data.sh ---
#!/usr/bin/env bash

[ -z "$CONTRACT" ] && echo "Missing \$CONTRACT environment variable"
[ -z "$OWNER" ] && echo "Missing \$OWNER environment variable"

echo "Calling set speed data template"
echo
echo 

echo --------------------------------------------
echo
echo near call \$CONTRACT SubmitOverSpeedTransaction '{"speed": 78,"vehiclePlate":"LO456", "datetime":23344.1234}' --accountId \$CAMERA
echo 
echo --------------------------------------------

near call $CONTRACT SubmitOverSpeedTransaction '{"speed": 78,"vehiclePlate":"LO456", "datetime":23344.1234}' --accountId $CAMERA

echo "Change template data entries on subsequent runs to ensure data change"
echo
echo "Useful when testing getting Vehicle plate or Camera Id specific data"
echo "Change export owner with other accounts or dev details by using contract to sign call"
echo "To vary context sender details"
echo --------------------------------------------

exit 0

'''
'''--- scripts/3.get-all-overspeeding-data.sh ---
#!/usr/bin/env bash

[ -z "$CONTRACT" ] && echo "Missing \$CONTRACT environment variable"
[ -z "$OWNER" ] && echo "Missing \$OWNER environment variable"

echo "View all over speeding data on contract"
echo
echo 

echo --------------------------------------------
echo
echo near view \$CONTRACT GetAllOverSpeedingTransactions
echo 
echo --------------------------------------------

near view \$CONTRACT GetAllOverSpeedingTransactions

echo "Array of all data set from contract"
echo "if empty run script 2 to enter sample data"
echo --------------------------------------------

exit 0

'''
'''--- scripts/4.register-camera.sh ---
#!/usr/bin/env bash

[ -z "$CONTRACT" ] && echo "Missing \$CONTRACT environment variable"
[ -z "$OWNER" ] && echo "Missing \$OWNER environment variable"
[ -z "$CAMERA" ] && echo "Missing \$CAMERA environment variable"

echo "Register Camera"
echo
echo 

echo --------------------------------------------
echo
echo near call \$CONTRACT RegisterCamera '{"location": {"lat":"23.45","lng":"-28.98"}}' --accountId \$CAMERA
echo 
echo --------------------------------------------

near call $CONTRACT RegisterCamera '{"location": {"lat":"23.45","lng":"-28.98"}}' --accountId $CAMERA

echo "Change template data entries on subsequent runs to ensure data change"
echo
echo "Useful when testing getting Vehicle plate or Camera Id specific data"
echo "Change export owner with other accounts or dev details by using contract to sign call"
echo "To vary context sender details"
echo --------------------------------------------

exit 0
'''
'''--- scripts/5.list-of-cameras.sh ---
#!/usr/bin/env bash

[ -z "$CONTRACT" ] && echo "Missing \$CONTRACT environment variable"

echo "List of Cameras"
echo
echo 

echo --------------------------------------------
echo
echo near view \$CONTRACT ListOfCameras
echo --------------------------------------------

near view $CONTRACT ListOfCameras

echo "Change template data entries on subsequent runs to ensure data change"
echo
echo "Useful when testing getting Vehicle plate or Camera specific data"
echo "Change export owner with other accounts or dev details by using contract to sign call"
echo "To vary context sender details"
echo --------------------------------------------

exit 0
'''
'''--- scripts/6.camera-specific-overspeed-data.sh ---
#!/usr/bin/env bash

[ -z "$CONTRACT" ] && echo "Missing \$CONTRACT environment variable"
[ -z "$OWNER" ] && echo "Missing \$OWNER environment variable"
[ -z "$CAMERA" ] && echo "Missing \$CAMERA environment variable"

echo "Camera specific speed transactions"
echo
echo 

echo --------------------------------------------
echo
echo  near view \$CONTRACT CameraOverSpeedTransactions '{"cameraId": "'"\$CAMERA"'"}'
echo 
echo --------------------------------------------

 near view $CONTRACT CameraOverSpeedTransactions '{"cameraId": "'"$CAMERA"'"}'

echo "Change template data entries on subsequent runs to ensure data change"
echo
echo "Useful when testing getting Vehicle plate or Camera Id specific data"
echo "Change export owner with other accounts or dev details by using contract to sign call"
echo "To vary context sender details"
echo --------------------------------------------

exit 0
'''
'''--- scripts/7.register-vehicle.sh ---
#!/usr/bin/env bash

[ -z "$CONTRACT" ] && echo "Missing \$CONTRACT environment variable"
[ -z "$OWNER" ] && echo "Missing \$OWNER environment variable"
[ -z "$VEHICLE" ] && echo "Missing \$VEHICLE environment variable"

echo "Register Vehicle"
echo
echo 

echo --------------------------------------------
echo
echo near call \$CONTRACT RegisterVehicle '{"vehiclePlate":"LO234"}' --accountId \$VEHICLE
echo 
echo --------------------------------------------

near call $CONTRACT RegisterVehicle '{"vehiclePlate":"LO234"}' --accountId $VEHICLE

echo "Change template data entries on subsequent runs to ensure data change"
echo
echo "Useful when testing getting Vehicle plate or Camera Id specific data"
echo "Change export owner with other accounts or dev details by using contract to sign call"
echo "To vary context sender details"
echo --------------------------------------------

exit 0
'''
'''--- scripts/8.list-of-vehicles.sh ---
#!/usr/bin/env bash

[ -z "$CONTRACT" ] && echo "Missing \$CONTRACT environment variable"

echo "List of Vehicles"
echo
echo 

echo --------------------------------------------
echo
echo near view \$CONTRACT ListOfVehicles
echo --------------------------------------------

near view $CONTRACT ListOfVehicles

echo "Change template data entries on subsequent runs to ensure data change"
echo
echo "Useful when testing getting Vehicle plate or Camera specific data"
echo "Change export owner with other accounts or dev details by using contract to sign call"
echo "To vary context sender details"
echo --------------------------------------------

exit 0
'''
'''--- scripts/9.list-my-vehicles.sh ---
#!/usr/bin/env bash

[ -z "$CONTRACT" ] && echo "Missing \$CONTRACT environment variable"
[ -z "$VEHICLE" ] && echo "Missing \$OWNER environment variable"

echo "List of Vehicles to specific Vehicle Owner Account Id"
echo
echo 

echo --------------------------------------------
echo
echo  near view \$CONTRACT ListMyVehicles '{"ownderId":"'"\$VEHICLE"'"}'
echo 
echo --------------------------------------------

near view $CONTRACT ListMyVehicles '{"ownderId":"'"$VEHICLE"'"}'

echo "Change template data entries on subsequent runs to ensure data change"
echo
echo "Useful when testing getting Vehicle plate or Camera Id specific data"
echo "Change export owner with other accounts or dev details by using contract to sign call"
echo "To vary context sender details"
echo --------------------------------------------

exit 0
'''
'''--- scripts/README.md ---
# Introduction
These scripts help you get set up and use the contract as intended. 
Listed in order of sequence, from deploying setting data and calls to view data.

## Run Dev Deploy

  ```sh

  ./scripts/1.dev-deploy.sh         # cleanup, compile and deploy contract

   ``` 

This will ask you delete any CONTRACT and OWNER variables. 
Build the application and deploy contract to a dev account.
Once done save CONTRACT, CAMERA, VEHICLE and OWNER variables.

## Call Set Speed Data

  ```sh

  ./scripts/2.call-set-speed-data.sh # enters inital speed,vehicle palte, datetime from IOT device 
    
```
This bash script calls the SubmitOverSpeedTransaction function, to enter speed data with sample data.

Feel free to run multiple times and directly change the sample data to add varied information on to blockchain. 

This will come in handy when calling specifc vehicle and camera data. 

The contract will return alert when speed is below 40, as speed limit needs to be above 40 to be considered speeding.

## Get all speed data

  ```sh

  ./scripts/3.get-all-overspeeding-data.sh  # returns all speed data details associated with Contract details it is deployed to.
    
```
Returns all the speed data currently stored on blockchain.
Returns Empty array if no data has been included

## Register Camera

 ```sh

  ./scripts/4.register-camera.sh  # registers IOT device camera accounts to submit data to contract
 
```

Registers camera to contract. Returns a string with message confirmation of addition.

## Get List Of Cameras
 ```sh
  ./scripts/5.list-of-cameras.sh  # returns list of cameras
    
```
Returns an array of registered cameras. An empty array if no cameras are currently registered.

## Camera specific overspeeding data
 ```sh
  ./scripts/6.camera-specific-overspeed-data.sh  # returns list of cameras
    
```
Returns an array of camera specific overspeeding data related to contract.

## Register Vehicle

 ```sh

  ./scripts/7.register-vehicle.sh  # registers vehicles associated specific vehicle owner
 
```

Registers a vehicle plate with an owner id using the account id of vehicle owner.

## Get List Of Vehicles
 ```sh
  ./scripts/8.list-of-vehicles.sh  # returns list of vehicles
    
```
Returns an array of all registered vehcles.

## List My Vehicles
```sh
  ./scripts/9.list-my-vehicles.sh #returns list of vehicles associated with owner account id

```

Returns list of vehiles associated with specific vehicle owner id.

## Vehicle specific overspeeding data
```sh
  ./scripts/10.vehicle-specific-overspeed-data.sh #returns overpseeding transaction data related to specific vehicle.

```

Returns a list of vehicle speicific overspeeding transaction data. Useful when presenting data to specific vehicle owner end users.

'''
'''--- tsconfig.json ---
{
    "extends": "assemblyscript/std/assembly.json",
    "include": ["./**/*.ts"]
}
'''