*GitHub Repository "0xd3bs/NCD2"*

'''--- AssemblyScript/as-pect.config.js ---
module.exports = require("near-sdk-as/imports");
module.exports.include.push("**/*.unit.spec.ts");

'''
'''--- NEARAPIJs/contract.html ---
<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Call Contract Methods using NEAR</title>
  <script src="https://cdn.jsdelivr.net/npm/near-api-js@0.43.1/dist/near-api-js.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bn.js@5.2.0/lib/bn.min.js"></script>
</head>

<body>
  <nav>
    <div><a href="index.html">home</a></div>
    <div><a href="login.html">login</a></div>
    <div><a href="contract.html">contract</a></div>
  </nav>
  <hr />
  <button id="farmers">farmers</button>
  <br />
  <button id="read">read</button> <input type="text" id="read-key" placeholder="key" />
  <br />
  <button id="write">write</button> <input type="text" id="write-key" placeholder="key" /> <input type="text"
    id="write-value" placeholder="value" />

  <script>
    (async () => {
      const { connect, keyStores, WalletConnection } = nearApi;

      const CONTRACT_ID = 'team12.testnet';
      // const gas = new BN('1000'); // uncomment this line to see an error re: "Exceeded the prepaid gas"

      const near = await connect(config());
      const wallet = new WalletConnection(near);

      const dom = setupDOMBindings();

      const contract = {
        get_farmers: async () => await view(CONTRACT_ID, 'get_farmers'),
        readKey: async () => await view(CONTRACT_ID, 'read', { key: dom.txtReadKey.value }),
        writeKey: async () => await change(CONTRACT_ID, 'write', { key: dom.txtWriteKey.value, value: dom.txtWriteValue.value }, typeof gas !== 'undefined' ? gas : null)
      };

      console.log(wallet.isSignedIn());
      if (wallet.isSignedIn()) {
        const accountId = wallet.getAccountId();
        dom.btnHello.addEventListener('click', contract.get_farmers);
        dom.btnRead.addEventListener('click', contract.readKey);
        dom.btnWrite.addEventListener('click', contract.writeKey);
      } else {
        button.addEventListener('click', signIn);
      }

      async function change(contract, method, args, gas, amount) {
        console.log('attempting to send signed transaction ...');
        const response = await wallet.account().functionCall(contract, method, args, gas, amount);
        console.log('response received.');

        const { transaction_outcome: txo, status } = response;

        console.log(`gas burned: ${txo.outcome.gas_burnt}`);
        console.log(`tokens burned: ${txo.outcome.tokens_burnt}`);
        console.log(`logs: \n${txo.outcome.logs}`);

        const { SuccessValue: value } = status;
        console.log(b64DecodeUnicode(value)); // see helper functions below
      }

      async function view(contract, method, args) {
        const response = await wallet.account().viewFunction(contract, method, args);
        console.log(response);
      }

      function config() {
        return {
          networkId: 'testnet',
          keyStore: new keyStores.BrowserLocalStorageKeyStore(),
          nodeUrl: 'https://rpc.testnet.near.org',
          walletUrl: 'https://wallet.testnet.near.org',
          helperUrl: 'https://helper.testnet.near.org',
          explorerUrl: 'https://explorer.testnet.near.org'
        };
      }

      function setupDOMBindings() {
        return {
          btnHello: document.querySelector('#farmers'),
          btnRead: document.querySelector('#read'),
          txtReadKey: document.querySelector('#read-key'),
          btnWrite: document.querySelector('#write'),
          txtWriteKey: document.querySelector('#write-key'),
          txtWriteValue: document.querySelector('#write-value')
        };
      }

      // ------------------------
      // see here for decoding simple ASCII response https://stackoverflow.com/q/33854103/2836874
      // see here for decoding UTF-8 data in response (eg. if you want emoji support) https://stackoverflow.com/a/30106551/2836874
      // ------------------------
      // Encoding UTF8 ⇢ base64
      function b64EncodeUnicode(str) {
        return btoa(
          encodeURIComponent(str).replace(/%([0-9A-F]{2})/g, function (match, p1) {
            return String.fromCharCode(parseInt(p1, 16));
          })
        );
      }

      // Decoding base64 ⇢ UTF8
      function b64DecodeUnicode(str) {
        return decodeURIComponent(
          Array.prototype.map
            .call(atob(str), function (c) {
              return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
            })
            .join('')
        );
      }
    })();
  </script>
</body>

</html>
'''
'''--- NEARAPIJs/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>NEAR-powered Frontend</title>
  </head>
  <body>
    <nav>
      <div><a href="index.html">home</a></div>
      <div><a href="login.html">login</a></div>
      <div><a href="contract.html">contract</a></div>
    </nav>
  </body>
</html>

'''
'''--- NEARAPIJs/login.html ---
<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Login to NEAR</title>
  <script src="https://cdn.jsdelivr.net/npm/near-api-js@0.43.1/dist/near-api-js.min.js"></script>
</head>

<body>
  <nav>
    <div><a href="index.html">home</a></div>
    <div><a href="login.html">login</a></div>
    <div><a href="contract.html">contract</a></div>
  </nav>
  <hr />
  <button>Login</button>

  <script>
    (async () => {
      const NETWORK = 'testnet';

      const { connect, keyStores, WalletConnection } = nearApi;

      const button = document.querySelector('button');

      const near = await connect(config());
      const wallet = new WalletConnection(near, `${NETWORK}-custom-prefix`); // supports logging in with different keys on the same domain

      if (wallet.isSignedIn()) {
        const accountId = wallet.getAccountId();
        button.innerHTML = `Logout ${accountId}`;
        button.addEventListener('click', signOut);
      } else {
        button.addEventListener('click', signIn);
      }

      // ----------------
      // Helper functions
      // ----------------

      function signIn() {
        wallet.requestSignIn({
          contractId: NETWORK === 'testnet' ? 'unv.testnet' : 'unv.near',
          methodNames: []
        });
      }

      function signOut() {
        wallet.signOut();
        button.innerHTML = 'Login';
      }

      function config(network = NETWORK) {
        return {
          testnet: {
            networkId: 'testnet',
            keyStore: new keyStores.BrowserLocalStorageKeyStore(),
            nodeUrl: 'https://rpc.testnet.near.org',
            walletUrl: 'https://wallet.testnet.near.org',
            helperUrl: 'https://helper.testnet.near.org',
            explorerUrl: 'https://explorer.testnet.near.org'
          },
          mainnet: {
            networkId: 'mainnet',
            keyStore: new keyStores.BrowserLocalStorageKeyStore(),
            nodeUrl: 'https://rpc.mainnet.near.org',
            walletUrl: 'https://wallet.mainnet.near.org',
            helperUrl: 'https://helper.mainnet.near.org',
            explorerUrl: 'https://explorer.mainnet.near.org'
          }
        }[network];
      }
    })();
  </script>
</body>

</html>
'''