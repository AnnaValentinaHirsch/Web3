*GitHub Repository "near/rollup-data-availability"*

'''--- .github/ISSUE_TEMPLATE/bug_report.md ---
---
name: Bug report
about: Create a report to help us improve
title: ''
labels: ''
assignees: ''

---

**Describe the bug**
A clear and concise description of what the bug is.

**To Reproduce**
Steps to reproduce the behavior:
1. Go to '...'
2. Click on '....'
3. Scroll down to '....'
4. See error

**Expected behavior**
A clear and concise description of what you expected to happen.

**Screenshots**
If applicable, add screenshots to help explain your problem.

**Desktop (please complete the following information):**
 - OS: [e.g. iOS]
 - Browser [e.g. chrome, safari]
 - Version [e.g. 22]

**Smartphone (please complete the following information):**
 - Device: [e.g. iPhone6]
 - OS: [e.g. iOS8.1]
 - Browser [e.g. stock browser, safari]
 - Version [e.g. 22]

**Additional context**
Add any other context about the problem here.

'''
'''--- .github/ISSUE_TEMPLATE/feature_request.md ---
---
name: Feature request
about: Suggest an idea for this project
title: ''
labels: ''
assignees: ''

---

**Is your feature request related to a problem? Please describe.**
A clear and concise description of what the problem is. Ex. I'm always frustrated when [...]

**Describe the solution you'd like**
A clear and concise description of what you want to happen.

**Describe alternatives you've considered**
A clear and concise description of any alternative solutions or features you've considered.

**Additional context**
Add any other context or screenshots about the feature request here.

'''
'''--- .github/workflows/on_main.yml ---
name: "Deploying Rollup Data Availability"

on:
  push:
    branches:
      - main

env:
  REPOSITORY: "us-docker.pkg.dev/pagoda-solutions-dev/rollup-data-availability"

jobs:
  git-submodules-update:
    name: "Build and deploy Rollup Data Availability"
    runs-on:
      group: ubuntu-4cpu-16gb
    permissions:
      contents: read
      packages: write        
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build "da-rpc" Docker image and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          file: ./crates/da-rpc-sys/Dockerfile
          tags: |
            ghcr.io/near/rollup-data-availability/da-rpc:${{ github.sha }}
            ghcr.io/near/rollup-data-availability/da-rpc:latest

      - name: Build "sidecar" Docker image and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          file: ./bin/http-api/Dockerfile
          tags: |
            ghcr.io/near/rollup-data-availability/http-api:${{ github.sha }}
            ghcr.io/near/rollup-data-availability/http-api:latest

  changelog:
    name: Generate changelog
    runs-on: ubuntu-latest
    outputs:
      release_body: ${{ steps.git-cliff.outputs.content }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate a changelog
        uses: orhun/git-cliff-action@v3
        id: git-cliff
        with:
          config: cliff.toml
          args: -vv --latest --strip header
        env:
          OUTPUT: CHANGES.md
          GITHUB_REPO: ${{ github.repository }}

      # use release body in the same job
      - name: Upload the binary releases
        uses: svenstaro/upload-release-action@v2
        with:
          file: binary_release.zip
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref }}
          body: ${{ steps.git-cliff.outputs.content }}

'''
'''--- .github/workflows/on_pull_request.yml ---
name: "Check PR is ready for merge"

on:
  pull_request:
    branches:
      - main

jobs:
  changes:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    steps:
    # For pull requests it's not necessary to checkout the code
    - uses: dorny/paths-filter@v3
      id: filter
      with:
        filters: |
          rust:
            - '.github/**'
            - '**/*.rs'
            - '**/Cargo.toml'
            - '**/Cargo.lock'
            - '**/rust-toolchain**'
            - 'flake.nix'
            - 'flake.lock'
            - 'scripts/**'
            - 'justfile'
          go:
            - '.github/**'            
            - 'crates/da-rpc-sys/build.rs'
            - 'crates/da-rpc-sys/src/lib.rs'
            - '**/*.go'
            - '**/go.mod'
            - '**/go.sum'
            - '**/gopkg.lock'
            - 'scripts/**'
            - 'justfile'
          eth:  
            - '.github/**'
            - '**/*.sol'
            - 'eth/foundry.toml'
            - 'eth/justfile'
            - 'eth/package.json'
            - 'eth/package-lock.json'
            - 'scripts/**'
            - 'justfile'
    outputs:
      rust: ${{ steps.filter.outputs.rust }}
      go: ${{ steps.filter.outputs.go }}
      eth: ${{ steps.filter.outputs.eth }}

  rust:
    needs: changes
    if: ${{ needs.changes.outputs.rust == 'true' }}
    runs-on:
      group: ubuntu-22.04-16core
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: "recursive"

      - uses: actions-rust-lang/setup-rust-toolchain@v1

      - uses: Swatinem/rust-cache@v2

      - name: "Install cargo-nextest"
        uses: taiki-e/install-action@v2
        with:
          tool: nextest

      - name: ðŸ“œ Lint code format
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

      - name: "Build contracts"
        run: make build-contracts

      - name: "Ensure target dir exists"
        run: mkdir -p target/near/near_da_blob_store

      - name: "Run tests"
        run: TEST_NEAR_ACCOUNT=${{ secrets.TEST_NEAR_ACCOUNT }} TEST_NEAR_SECRET=${{ secrets.TEST_NEAR_SECRET }} cargo nextest run --workspace --locked
          # Nice to have, turned off for now
      # - name: "Check for bloat"
      #   uses: orf/cargo-bloat-action@v1
      #   with:
      #     token: ${{ secrets.CEJAS_PERSONAL_ACCESS_TOKEN }} 
  go:
    needs: changes
    if: ${{ needs.changes.outputs.go == 'true' }}
    runs-on:
      group: ubuntu-22.04-8core
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: "recursive"

      - uses: actions-rust-lang/setup-rust-toolchain@v1

      - uses: Swatinem/rust-cache@v2

      - name: Login to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $ --password-stdin

      - name: Enrich the test config
        run: |
          HTTP_API_TEST_SECRET_KEY=${{ secrets.HTTP_API_TEST_SECRET_KEY }} \
          HTTP_API_TEST_ACCOUNT_ID=${{ secrets.HTTP_API_TEST_ACCOUNT_ID }} \
          HTTP_API_TEST_NAMESPACE=${{ secrets.HTTP_API_TEST_NAMESPACE }} \
          scripts/enrich.sh

      - uses: hoverkraft-tech/compose-action@v2.0.0

      - name: "Ubuntu is missing libm :<"
        run: sudo apt-get update && sudo apt-get install -y build-essential

      - name: "Install FFI library"
        run: make da-rpc-sys

      - run: sudo cp ./gopkg/da-rpc/lib/* /usr/local/lib

      - name: "Test gopkg"
        working-directory: ./gopkg/da-rpc
        run: go test -v

      - name: "Test sidecar api"
        working-directory: ./gopkg/sidecar
        run: go test -v

  eth-contracts:
    needs: changes
    if: ${{ needs.changes.outputs.eth == 'true' }}
    runs-on:
      group: ubuntu-22.04-8core
    defaults:
      run:
        working-directory: ./eth       
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: "Install Foundry"
        uses: "foundry-rs/foundry-toolchain@v1"

      - name: "Install Bun"
        uses: "oven-sh/setup-bun@v1"

      - name: "Install the Node.js dependencies"
        run: "bun install"

      - name: "Lint the code"
        run: "bun run lint"

      - name: "Add lint summary"
        run: |
          echo "## Lint result" >> $GITHUB_STEP_SUMMARY
          echo "âœ… Passed" >> $GITHUB_STEP_SUMMARY

      - name: "Build the contracts and print their size"
        run: "forge build --sizes"

      - name: "Add build summary"
        run: |
          echo "## Build result" >> $GITHUB_STEP_SUMMARY
          echo "âœ… Passed" >> $GITHUB_STEP_SUMMARY

      - name: "Show the Foundry config"
        run: "forge config"

      - name: "Generate a fuzz seed that changes weekly to avoid burning through RPC allowance"
        run: >
          echo "FOUNDRY_FUZZ_SEED=$(
            echo $(($EPOCHSECONDS - $EPOCHSECONDS % 604800))
          )" >> $GITHUB_ENV
          
      - name: "Run the tests"
        run: "forge test --gas-report"

      - name: "Add test summary"
        run: |
          echo "## Tests result" >> $GITHUB_STEP_SUMMARY
          echo "âœ… Passed" >> $GITHUB_STEP_SUMMARY

'''
'''--- .vscode/bookmarks.json ---
{
	"files": [
		{
			"path": "op-stack/openrpc/types/blob/blob.go",
			"bookmarks": [
				{
					"line": 96,
					"column": 1,
					"label": "Blob DTO"
				}
			]
		},
		{
			"path": "op-stack/openrpc/types/blob/commitment.go",
			"bookmarks": [
				{
					"line": 17,
					"column": 20,
					"label": "Create Blob commitment"
				}
			]
		},
		{
			"path": "op-stack/optimism/op-node/rollup/derive/calldata_source.go",
			"bookmarks": [
				{
					"line": 125,
					"column": 17,
					"label": "Decode EVM data"
				}
			]
		},
		{
			"path": "op-stack/optimism/op-service/txmgr/txmgr.go",
			"bookmarks": [
				{
					"line": 214,
					"column": 26,
					"label": "Send blob"
				}
			]
		},
		{
			"path": "contracts/blob-store/src/lib.rs",
			"bookmarks": [
				{
					"line": 14,
					"column": 19,
					"label": "Blob store contract"
				}
			]
		},
		{
			"path": "op-stack/optimism-rs/src/driver/mod.rs",
			"bookmarks": [
				{
					"line": 262,
					"column": 20,
					"label": "Decode EVM tx state"
				},
				{
					"line": 270,
					"column": 19,
					"label": "From Decoded transactions"
				}
			]
		},
		{
			"path": "op-stack/optimism-rs/src/l1/mod.rs",
			"bookmarks": [
				{
					"line": 427,
					"column": 11,
					"label": "New L1Info from block"
				},
				{
					"line": 467,
					"column": 11,
					"label": "Filter tx data from evm"
				}
			]
		},
		{
			"path": "op-stack/optimism-rs/src/derive/stages/batcher_transactions.rs",
			"bookmarks": [
				{
					"line": 20,
					"column": 9,
					"label": "Batcher Tx iterator"
				},
				{
					"line": 46,
					"column": 49,
					"label": "Creating Batcher FrameData"
				},
				{
					"line": 59,
					"column": 30,
					"label": ""
				}
			]
		},
		{
			"path": "op-stack/optimism/op-node/rollup/derive/channel_bank.go",
			"bookmarks": [
				{
					"line": 141,
					"column": 26,
					"label": "Frame iterator"
				}
			]
		}
	]
}
'''
'''--- CHANGELOG.md ---
# Changelog

All notable changes to this project will be documented in this file.

## [0.4.0] - 2024-05-14

### Features

- [**breaking**] Migrate to new http api
- Race archival and base
- Update TGAS for max tx size to be 20
- Introduce settlement mode with pessimistic default for now
- Upgrade cli to use blob structure and mode
- Expose mode to the cli

### Miscellaneous Tasks

- Auto changelog
- Bump version and lints

### Testing

- Migrate to a different test blockhash

## [0.3.0] - 2024-05-08

### Bug Fixes

- Remove test for log
- Localnet url
- Removed hardcoded Testnet from NewConfig
- Clear error on GetDAError
- Import ffi_helpers Nullable trait
- Remove unnecessary unsafe block
- Ffi, ci for everything, mocks, tests

### Co-authored-by

- Don <37594653+dndll@users.noreply.github.com>

### Documentation

- Update readme
- Add notes on nitro

### Features

- Http server
- Added darwin support for gopkg
- Added api for new_client_file
- Add free_client implementation in go
- Localnet listening to an arbitrary loopback address (#91)
- Replace localnet with customnet
- Use urls instead of SocketAddr for custom
- Add clear_error to da-rpc-sys
- Add clear_error to header bindings
- Remove erasure-commit DAS
- [**breaking**] Remove namespace id in blob
- Initial eth DA tracking contract
- [**breaking**] Sidecar go module
- Bump version to 0.3.0

### Miscellaneous Tasks

- Remove bin directory from workspace
- Remove optimism submodule
- Remove cdk submodule
- Remove cdk contracts submodule
- Library linkage
- Remove deserialization & return value
- Use const slice ref for storage keys
- Bump MSRV
- CODEOWNERS
- Create LICENSE
- Move near-da-primitives out of blob store contract
- Slight reuse
- Actions and cleanup

### Refactor

- Remove unnecessary some check on clear_error
- Fix import order

### Testing

- Add error clearing to error handling test
- Remove unnecessary derefs
- Remove unneeded clear since we take the err already
- Add bypass flag for verification until LC is done

### Build

- Lockfile
- Http api docker image

## [0.2.3] - 2023-11-15

### Bug Fixes

- Make sure errors aren't causing segfaults
- Blobs are optional from the contract
- Import math libs in go
- Scripts were moved around
- Make the network lowercase
- Render in github
- Builds for macos
- Cargo build should be locked
- Borsh has been updated and the lockfile wasn't force locked
- This project builds binaries - lockfile committed
- Cdk image should be tagged on rebuild
- All the repos are public now - no need for access token
- Commit the header file for libnear_da_rpc_sys

### Co-authored-by

- Don <37594653+dndll@users.noreply.github.com>
- Don <37594653+dndll@users.noreply.github.com>
- Don <37594653+dndll@users.noreply.github.com>
- Jacob <encody@noreply.users.github.com>

### Documentation

- Readme and scripts
- Update docs for readme
- Arch class diagram for rpc
- Use mermaid code blocks
- Add system context
- Fix render styling
- Add note on fisherman actor
- Add container diagram for optimism
- Add architecture directory to the repository
- Add how-to-integrate comment in the readme
- Fix typo
- Update commitment proposals

### Features

- Update submodules to use DA over NEAR
- Op-rpc with exposed ffi
- Use shared primitives for client & contract
- Ffi client reads
- Generate bindings on build
- Sys crate for go
- Migrate ffi to a sys crate
- Introduce a naive merkleization of commitment blobs
- Use a number instead of unbounded bytes for namespaces
- Allow a user to provide sk instead of a file
- [**breaking**] Remove blobs from state
- Light client failover
- Expose module for near-op-rpc-sys
- Utilise go module for ffi client
- Near DA on polygon CDK
- [**breaking**] Migrate naming to da-rpc
- [**breaking**] Migrate go package to da-rpc-go
- Optimize contract
- Kzg commitments over rs encoded grids
- Kzg codeword proof verification
- Crate
- Commit to columns individually
- Commit to the root
- [**breaking**] Convert witness points to affine

### Miscellaneous Tasks

- Submodules
- Add nix compat
- Switch to near branch for openrpc
- Remove njs for now
- Move contract from near-openrpc to here
- Bookmarks
- Add op node to workspace
- Go workspace
- Submod update
- Combing through magi
- Don't override contracts release profile
- Submodules
- Submodules
- Submodules
- Bump rust version and use optimised resolver
- Update light client submodule
- Update LC
- Update submodules
- Scripts for deploying and building
- Set toolchain to stable
- Update submodule
- Add another node to devnet
- Use private repository from near for optimism
- Remove openrpc
- Remove CDK DA
- Remove optimism-rs for now
- Update submodule
- Add how to get validium contracts image
- Op-stack repository structure
- Cdk stack repository structure
- Submodules track main
- Add tests for rust and go
- Circumvent binstall
- Update submodule for lc
- Submodule
- Fix CDK sequencer spam
- Cdk submodule
- Add time unit to readme for epoch
- Unified dependencies
- Fmt toml and rust
- Remove point compression for now
- Lints and fmt
- Remove light-client submodule
- Use unpublished version until audit
- Publish images
- Mv gopkg so go can read it

### Refactor

- Get_all returns all blobs for a namespace

### Testing

- Compile the contract at test time
- Add kzg from g1 test
- Ignore integration tests

### Build

- Add makefile for building optimised contract
- Dockerfile for op-rpc
- Use light client in devnet docker
- Create makefile entry to push images to the artifact reg
- Update version

### Wip

- Contract flat storage

<!-- generated by git-cliff -->

'''
'''--- Cargo.toml ---
[profile.release]
codegen-units   = 1
debug           = false
lto             = true
opt-level       = "z"
overflow-checks = true
panic           = "abort"

# [profile.dev]
# debug = 0

[workspace.package]
authors = [ "Pagoda <hello@near.org>" ]
edition = "2021"
version = "0.4.0"

[workspace]
members  = [ "bin/*", "crates/*", "contracts/*" ]
resolver = "2"

[workspace.dependencies]
# Nostd
borsh      = { version = "1.4", default-features = false }
serde      = { version = "1.0", default-features = false, features = [ "derive" ] }
serde_with = { version = "3.4", default-features = false, features = [ "hex", "base64", "macros" ] }

# Std aware
async-trait        = "0.1"
eyre               = "0.6"
futures            = "0.3"
hex                = "0.4"
log                = "0.4"
rand               = "0.8"
serde_json         = "1.0"
tracing            = "0.1"
tracing-subscriber = { version = "0.3", features = [ "env-filter" ] }

# NEAR
near-crypto             = "0.21"
near-jsonrpc-client     = "0.9"
near-jsonrpc-primitives = "0.21"
near-primitives         = "0.21"
near-sdk                = "4.0.0"

[patch.crates-io]
parity-secp256k1 = { git = "https://github.com/paritytech/rust-secp256k1" }

'''
'''--- README.md ---
# Rollup Data Availability

<!-- [![Tests](https://github.com/near/rollup-data-availability/actions/workflows/on_pull_request.yml/badge.svg)](https://github.com/near/rollup-data-availability/actions/workflows/on_pull_request.yml) -->
<!-- [![Deploy](https://github.com/near/rollup-data-availability/actions/workflows/on_main.yml/badge.svg)](https://github.com/near/rollup-data-availability/actions/workflows/on_main.yml) -->

Utilising NEAR as storage data availability with a focus on lowering rollup DA fees.

## Components

Herein outlines the components of the project and their purposes.

### Blob store contract

This contract provides the store for arbitrary DA blobs. In practice, these "blobs" are sequencing data from rollups, but they can be any data.

NEAR blockchain state storage is pretty cheap. At the time of writing, 100KiB is a flat fee of 1NEAR.
To limit the costs of NEAR storage even more, we don't store the blob data in the blockchain state.

It works by taking advantage of NEAR consensus around receipts.
When a chunk producer processes a receipt, there is consensus around the receipt.
However, once the chunk has been processed and included in the block, the receipt is no longer required for consensus and can be pruned. The pruning time is at least 3 NEAR epochs, where each epoch is 12 Hours; in practice, this is around five epochs.
Once the receipt has been pruned, it is the responsibility of archival nodes to retain the transaction data, and we can even get the data from indexers.

We can validate that the blob was retrieved from ecosystem actors in the format submitted by checking the blob commitment.
The blob commitment currently needs to be more efficient and will be improved, but it benefits us because anybody can build this with limited expertise and tooling.
It is created by taking a blob, chunking it into 256-byte pieces, and creating a Merkle tree, where each leaf is a Sha-256 hash of the shard.
The root of the Merkle tree is the blob commitment, which is provided as `[transaction_id ++ commitment]` to the L1 contract, which is 64 bytes.

What this means:

- consensus is provided around the submission of a blob by NEAR validators
- the function input data is stored by full nodes for at least three days
- archival nodes can store the data for longer
- we don't occupy consensus with more data than needs to be
- indexers can also be used, and this Data is currently indexed by all significant explorers in NEAR
- the commitment is available for a long time, and the commitment is straightforward to create

### Light client

A trustless off-chain light client for NEAR with DA-enabled features, Such as KZG commitments, Reed-Solomon erasure coding & storage connectors.

The light client provides easy access to transaction and receipt inclusion proofs within a block or chunk.
This is useful for checking any dubious blobs which may not have been submitted or validating that a blob has been submitted to NEAR.

A blob submission can be verified by:

- taking the NEAR transaction ID from Ethereum for the blob commitment.
- Ask the light client for an inclusion proof for the transaction ID or the receipt ID if you're feeling specific; this will give you a Merkle inclusion proof for the transaction/receipt.
- once you have the inclusion proof, you can ask the light client to verify the proof for you, or advanced users can manually verify it themselves.
- armed with this knowledge, rollup providers can have advanced integration with light clients and build proving systems around it.

In the future, we will provide extensions to light clients such that non-interactive proofs can be supplied for blob commitments and other data availability features.

It's also possible that the light client may be on-chain for the header syncing and inclusion proof verification, but this is a low priority right now.

TODO: write and draw up extensions to the light client and draw an architecture diagram

### DA RPC Client

This client is the defacto client for submitting blobs to NEAR.
These crates allow a client to interact with the blob store.
It can be treated as a "black box", where blobs go in, and `[transaction_id ++ commitment]` emerges.

The `da-rpc` crate is the rust client, which anyone can use if they prefer rust in their application.
The responsibility of this client is to provide a simple interface for interacting with NEAR DA.

The `da-rpc-sys` crate is the FFI client binding for use by non-rust applications. This calls through to `da-rpc` to interact with the blob store, with some additional black box functionality for dealing with pointers wrangling and such.

The `da-rpc-go` crate is the go client bindings for use by non-rust applications, and this calls through to `da-rpc-sys`, which provides another application-level layer for easy interaction with the bindings.

## Integrations

We have some proof of concept works for integrating with other rollups.
We are working to prove the system's capabilities and provide a reference implementation for others to follow.
They are being actively developed, so they are in a state of flux.

We know that each rollup has different features and capabilities, even if they are built on the same SDK. The reference implementations are not necessarily
"production grade", they serve as inspiration to help integrators make use of NEAR DA in their system. Our ultimate goal is to make NEAR DA as pluggable as any other tool
you might use. This means our heavy focus is on proving, submission and making storage as fair as possible.

Architecture Diagrams can be viewed at [this directory](./docs/)

### OP Stack

https://github.com/near/optimism

We have integrated with the Optimism OP stack. Utilising the `Batcher` for submissions to NEAR and the `proposer` for submitting NEAR commitment data to Ethereum.

### CDK Stack

# TODO: move this
https://github.com/firatNEAR/cdk-validium-node/tree/near

We have integrated with the Polygon CDK stack. Utilising the Sequence Sender for submissions to NEAR.

### Arbitrum Nitro

https://github.com/near/nitro

We have integrated a small plugin into the DAC `daserver`. This is much like our http sidecar and provides a very modular integration into NEAR DA whilst supporting arbitrum 
DACs. In the future, this will likely be the easiest way to support NEAR DA as it acts as an independent sidecar which can be scaled as needed. This also means that the DAC
can opt-in and out of NEAR DA, lowering their infrastructure burden. With this approach, the DAC committee members just need to have a "dumb" signing service, with the store backed
by NEAR.

### ðŸ‘·ðŸš§ Intregrating your own rollup ðŸš§ðŸ‘·

The aim of NEAR DA is to be as modular as possible.

If implementing your own rollup, it should be fairly straightforward, assuming you can utilise `da-rpc` or `da-rpc-go`(with some complexity here).
All the implementations so far have been different, but the general rules have been:

- find where the sequencer normally posts batch data, for optimism it was the `batcher`, for CDK it's the `Sequence Sender` and plug the client in.
- find where the sequencer needs commitments posted, for optimism it was the `proposer`, and CDK the `synchronizer`. Hook the blob reads from the commitment there.

The complexity arises, depending on how pluggable the commitment data is in the contracts. If you can simply add a field, great! But these waters are unchartered mostly.

If your rollup does anything additional, feel free to hack, and we can try reach the goal of NEAR DA being as modular as possible.

## Getting started

Makefiles are floating around, but here's a rundown of how to start with NEAR DA.

**Prerequisites**

Rust, go, cmake & friends should be installed. Please look at `flake.nix#nativeBuildInputs` for a list of required installation items.
If you use Nix, you're in luck! Just do `direnv allow`, and you're good to go.

[Ensure you have setup](https://docs.near.org/tools/near-cli-rs) `near-cli`.
For the Makefiles to work correctly, you need to have the `near-cli-rs` version of NEAR-CLI.
Make sure you setup some keys for your contract, the documentation above should help.
You can write these down, or query these from `~/.near-credentials/**` later.

If you didn't clone with submodules, sync them:
`make submodules`

Note, there are some semantic differences between `near-cli-rs` and `near-cli-js`. Notably, the keys generated with `near-cli-js` used to have and `account_id` key in the json object. But this is omitted in `near-cli-rs` becuse it's already in the filename, but some applications require this object. So you may need to add it back in.

### If using your own contract

If you're using your own contract, you have to build the contract yourself. And make sure you set the keys.

To build the contract:

`make build-contracts`

The contract will now be in `./target/wasm32-unknown-unknown/release/near_da_blob_store.wasm`.

Now to deploy, once you've decided where you want to deploy to, and have permissions to deploy it.
Set `$NEAR_CONTRACT` to the address you want to deploy to, and sign with.
For advanced users, take a look at the command and adjust as fit.

Next up:
`make deploy-contracts`

Don't forget to update your `.env` file for `DA_KEY`, `DA_CONTRACT` and `DA_ACCOUNT` for use later.

### If deploying optimism

First clone the [repository](https://github.com/near/optimism)

Configure `./ops-bedrock/.env.example`.
This just needs copying the without `.example` suffix, adding the keys, contract address and signer from your NEAR wallet, and should work out of the box for you.

#### If deploying optimism on arm64

To standardize the builds for da-rpc-sys and genesis, you can use a docker image.

`da-rpc-sys-unix`
This will copy the contents of `da-rpc-sys-docker` generated libraries to the `gopkg/da-rpc` folder.

`op-devnet-genesis-docker`
This will create a docker image to generate the genesis files

`op-devnet-genesis`

This will generate the genesis files in a docker container and push the files in `.devnet` folder.

`make op-devnet-up`
This should build the docker images and deploy a local devnet for you

Once up, observe the logs

`make op-devnet-da-logs`

You should see `got data from NEAR` and `submitting to NEAR`

Of course, to stop

`make op-devnet-down`

If you just wanna get up and running and have already built the docker images using something like `make bedrock images`, there is a `docker-compose-testnet.yml` in `ops-bedrock` you can play with.

### If deploying polygon CDK

First clone the [repository](https://github.com/firatNEAR/cdk-validium-node)

Now we have to pull the docker image containing the contracts.

`make cdk-images`

**_why is this different to op-stack_**?

When building the contracts in `cdk-validium-contracts`, it does a little bit more than build contracts.
It creates a local eth devnet, deploys the various components (CDKValidiumDeployer & friends).
Then it generates genesis and posts it to L1 at some arbitrary block.
The block number that the L2 genesis gets posted to is **non-deterministic**.
This block is then fed into the `genesis` config in `cdk-validium-node/tests`.
Because of this reason, we want an out of the box deployment, so using a pre-built docker image for this is incredibly convenient.

It's fairly reasonable that, when scanning for the original genesis, we can just query a bunch of blocks between 0..N for the genesis data.
However, this feature doesn't exist yet.

Once the image is downloaded, or advanced users built the image and modified the genesis config for tests, we need to configure an env file again.
The envfile example is at `./cdk-stack/cdk-validium-node/.env.example`, and should be updated with the respective variables as above.

Now we can just do:

`cdk-devnet-up`

This wil spawn the devnet and an explorer for each network at `localhost:4000`(L1) and localhost:4001`(L2).

Run a transaction, and check out your contract on NEAR, verify the commitment with the last 64 bytes of the transaction made to L1.

You'll get some logs that look like:

```
time="2023-10-03T15:16:21Z" level=info msg="Submitting to NEARmaybeFrameData{0x7ff5b804adf0 64}candidate0xfF00000000000000000000000000000000000000namespace{0 99999}txLen1118"
2023-10-03T15:16:21.583Z	WARN	sequencesender/sequencesender.go:129	to 0x0DCd1Bf9A1b36cE34237eEaFef220932846BCD82, data: 438a53990000000000000000000000000000000000000000000000000000000000000060000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb922660000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000000233a121c7ad205b875b115c1af3bbbd8948e90afb83011435a7ae746212639654000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000651c2f3400000000000000000000000000000000000000000000000000000000000000005ee177aad2bb1f9862bf8585aafcc34ebe56de8997379cc7aa9dc8b9c68d7359000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000651c303600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040b5614110c679e3d124ca2b7fca6acdd6eb539c1c02899df54667af1ffc7123247f5aa2475d57f8a5b2b3d3368ee8760cffeb72b11783779a86abb83ac09c8d59	{"pid": 7, "version": ""}
github.com/0xPolygon/cdk-validium-node/sequencesender.(*SequenceSender).tryToSendSequence
	/src/sequencesender/sequencesender.go:129
github.com/0xPolygon/cdk-validium-node/sequencesender.(*SequenceSender).Start
	/src/sequencesender/sequencesender.go:69
2023-10-03T15:16:21.584Z	DEBUG	etherman/etherman.go:1136	Estimating gas for tx. From: 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266, To: 0x0DCd1Bf9A1b36cE34237eEaFef220932846BCD82, Value: <nil>, Data: 438a53990000000000000000000000000000000000000000000000000000000000000060000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb922660000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000000233a121c7ad205b875b115c1af3bbbd8948e90afb83011435a7ae746212639654000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000651c2f3400000000000000000000000000000000000000000000000000000000000000005ee177aad2bb1f9862bf8585aafcc34ebe56de8997379cc7aa9dc8b9c68d7359000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000651c303600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040b5614110c679e3d124ca2b7fca6acdd6eb539c1c02899df54667af1ffc7123247f5aa2475d57f8a5b2b3d3368ee8760cffeb72b11783779a86abb83ac09c8d59	{"pid": 7, "version": ""}
2023-10-03T15:16:21.586Z	DEBUG	ethtxmanager/ethtxmanager.go:89	Applying gasOffset: 80000. Final Gas: 246755, Owner: sequencer	{"pid": 7, "version": ""}
2023-10-03T15:16:21.587Z	DEBUG	etherman/etherman.go:1111	gasPrice chose: 8	{"pid": 7, "version": ""}
```

For this transaction, the blob commitment was `7f5aa2475d57f8a5b2b3d3368ee8760cffeb72b11783779a86abb83ac09c8d59`

And if I check the CDKValidium contract `0x0dcd1bf9a1b36ce34237eeafef220932846bcd82`, the root was at the end of the calldata.

`0x438a53990000000000000000000000000000000000000000000000000000000000000060000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb922660000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000000233a121c7ad205b875b115c1af3bbbd8948e90afb83011435a7ae746212639654000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000651c2f3400000000000000000000000000000000000000000000000000000000000000005ee177aad2bb1f9862bf8585aafcc34ebe56de8997379cc7aa9dc8b9c68d7359000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000651c303600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040b5614110c679e3d124ca2b7fca6acdd6eb539c1c02899df54667af1ffc7123247f5aa2475d57f8a5b2b3d3368ee8760cffeb72b11783779a86abb83ac09c8d59`

### If deploying arbitrum nitro

Build daserver/datool:
`make target/bin/daserver && make target/bin/datool`

Deploy your DA contract as above 

Update daserver config to introduce new configuration fields:

 "near-aggregator": {
      "enable": true,
      "key": "ed25519:insert_here",
      "account": "helloworld.testnet",
      "contract": "your_deployed_da_contract.testnet",
      "storage": {
        "enable": true,
        "data-dir": "config/near-storage"
      }
    },

`target/bin/datool client rpc store  --url http://localhost:7876 --message "Hello world" --signing-key config/daserverkeys/ecdsa`

Take the hash, check the output:

`target/bin/datool client rest getbyhash --url http://localhost:7877 --data-hash 0xea7c19deb86746af7e65c131e5040dbd5dcce8ecb3ca326ca467752e72915185`

'''
'''--- bin/cli/Cargo.toml ---
[package]
authors.workspace = true
edition.workspace = true
name              = "near-da-cli"
version.workspace = true

[dependencies]
anyhow                       = "1.0.75"
clap                         = { version = "4.4", features = [ "derive" ] }
hex                          = "0.4.3"
near-da-http-api-data        = { path = "../../crates/http-api-data" }
near-da-primitives           = { path = "../../crates/primitives" }
near-da-rpc                  = { path = "../../crates/da-rpc" }
serde                        = "1"
serde_json                   = "1.0.108"
tokio                        = { version = "1", features = [ "full" ] }
tower-http                   = { version = "0.4", features = [ "trace" ] }
tracing-subscriber.workspace = true
tracing.workspace            = true

'''
'''--- bin/cli/src/main.rs ---
use clap;
use clap::{command, Parser};
use near_da_http_api_data::ConfigureClientRequest;
use near_da_primitives::Mode;
use near_da_rpc::near::config::Config;
use near_da_rpc::near::Client;
use near_da_rpc::{CryptoHash, DataAvailability};
use serde::{Deserialize, Serialize};
use std::fmt::Display as FmtDisplay;
use std::str;
use tracing::debug;
#[derive(Parser, Debug)]
#[command(author, version, about, long_about = None)]
struct Args {
    #[clap(
        short = 'c',
        long = "config",
        help = "Path to the client configuration. If not specified, the client can be configured via PUT /config after starting the server.",
        default_value = "./bin/cli/da_config.json"
    )]
    config: Option<String>,
    #[command(subcommand)]
    command: Commands,
    #[clap(short, long)]
    mode: Option<Mode>,
}
struct AppState {
    client: Option<Client>,
}

fn config_request_to_config(request: ConfigureClientRequest) -> Result<Config, anyhow::Error> {
    Ok(Config {
        key: near_da_rpc::near::config::KeyType::SecretKey(request.account_id, request.secret_key),
        contract: request.contract_id,
        network: request
            .network
            .as_str()
            .try_into()
            .map_err(|e: String| anyhow::anyhow!(e))?,
        namespace: request
            .namespace
            .map(|ns| near_da_primitives::Namespace::new(ns.version, ns.id)),
        mode: request.mode.unwrap_or_default(),
    })
}

fn hex_to_bytes(hex: String) -> Result<Vec<u8>, anyhow::Error> {
    let bytes = hex::decode(hex)?;
    Ok(bytes)
}

#[derive(Parser, Debug)]
enum Commands {
    Submit(SubmitArgs),
    Get(GetArgs),
}

#[derive(Parser, Debug, Serialize, Deserialize)]
struct SubmitArgs {
    pub data: String,
}

#[derive(Parser, Debug)]
struct GetArgs {
    pub transaction_id: String,
}

struct AppError(anyhow::Error);

impl<E> From<E> for AppError
where
    E: Into<anyhow::Error>,
{
    fn from(err: E) -> Self {
        Self(err.into())
    }
}

impl FmtDisplay for AppError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{}", self.0)
    }
}

async fn submit_blob(
    state: AppState,
    submit_args: SubmitArgs,
) -> anyhow::Result<CryptoHash, AppError> {
    debug!("submitting blob: {:?}", submit_args);
    let client = state
        .client
        .as_ref()
        .ok_or(anyhow::anyhow!("client is not configured"))?;
    let data = hex_to_bytes(submit_args.data)?;
    let blob_ref = client
        .submit(near_da_primitives::Blob::new(data))
        .await
        .map_err(|e| anyhow::anyhow!("failed to submit blobs: {}", e))?
        .0;
    let transaction_id = CryptoHash(blob_ref.transaction_id);
    Ok(transaction_id)
}

async fn get_blob(
    state: AppState,
    get_args: GetArgs,
) -> anyhow::Result<near_da_http_api_data::Blob, AppError> {
    let client = state
        .client
        .as_ref()
        .ok_or(anyhow::anyhow!("client is not configured"))?;

    let blob = client
        .get(
            get_args
                .transaction_id
                .parse()
                .map_err(|e| anyhow::anyhow!("invalid transaction id: {}", e))?,
        )
        .await
        .map_err(|e| anyhow::anyhow!("failed to get blob: {}", e))?
        .0;

    let blob = near_da_http_api_data::Blob { data: blob.data };

    Ok(blob)
}

#[tokio::main]
async fn main() {
    tracing_subscriber::fmt()
        .with_target(false)
        .compact()
        .init();

    let args = Args::parse();
    let mut state = AppState { client: None };

    if let Some(path) = args.config {
        let file_contents = tokio::fs::read_to_string(path).await.unwrap();
        let config_parse = serde_json::from_str::<ConfigureClientRequest>(&file_contents)
            .unwrap_or_else(|e| panic!("failed to parse config: {}", e));
        state.client = Some(Client::new(
            &config_request_to_config(config_parse).unwrap(),
        ));
    }

    match args.command {
        Commands::Submit(submit) => match submit_blob(state, submit).await {
            Ok(result) => println!("{:?}", result),
            Err(e) => println!("{}", e),
        },
        Commands::Get(get) => match get_blob(state, get).await {
            Ok(blob) => println!("{:?}", blob),
            Err(e) => println!("{}", e),
        },
    };
}

'''
'''--- bin/http-api/Cargo.toml ---
[package]
authors.workspace = true
edition.workspace = true
name              = "near-da-http-api"
version.workspace = true

[dependencies]
anyhow                       = "1.0.75"
axum                         = "0.6"
clap                         = { version = "4.4", features = [ "derive" ] }
hex.workspace                = true
moka                         = { version = "*", features = [ "future" ] }
near-da-http-api-data        = { path = "../../crates/http-api-data" }
near-da-primitives           = { path = "../../crates/primitives" }
near-da-rpc                  = { path = "../../crates/da-rpc" }
serde                        = "1"
serde_json                   = "1.0.108"
tokio                        = { version = "1", features = [ "full" ] }
tower-http                   = { version = "0.4", features = [ "trace" ] }
tracing-subscriber.workspace = true
tracing.workspace            = true

'''
'''--- bin/http-api/src/main.rs ---
use std::{net::SocketAddr, path::PathBuf, sync::Arc};

use axum::{
    extract::{Query, State},
    http::StatusCode,
    response::{IntoResponse, Json, Response},
    routing, Router,
};
use clap::Parser;
use moka::future::Cache;
use near_da_http_api_data::ConfigureClientRequest;
use near_da_rpc::{
    near::{config::Config, Client},
    Blob, BlobRef, CryptoHash, DataAvailability,
};
use tokio::sync::RwLock;
use tower_http::{
    classify::ServerErrorsFailureClass,
    trace::{self, TraceLayer},
};
use tracing::{debug, Level};
use tracing_subscriber::EnvFilter;

#[derive(Parser, Debug)]
#[command(author, version, about, long_about = None)]
struct CliArgs {
    /// Run server on port.
    #[arg(short, long, default_value_t = 5888)]
    port: u16,

    /// Path to the client configuration. If not specified, the client can be
    /// configured via PUT /config after starting the server.
    #[arg(short, long)]
    config: Option<PathBuf>,
}

struct AppState {
    client: Option<Client>,
    // TODO: choose faster cache key
    cache: Cache<CryptoHash, BlobRef>,
}

fn config_request_to_config(request: ConfigureClientRequest) -> Result<Config, anyhow::Error> {
    Ok(Config {
        key: near_da_rpc::near::config::KeyType::SecretKey(request.account_id, request.secret_key),
        contract: request.contract_id,
        network: request
            .network
            .as_str()
            .try_into()
            .map_err(|e: String| anyhow::anyhow!(e))?,
        namespace: request
            .namespace
            .map(|ns| near_da_primitives::Namespace::new(ns.version, ns.id)),
        mode: request.mode.unwrap_or_default(),
    })
}

async fn configure_client(
    State(state): State<Arc<RwLock<AppState>>>,
    Json(request): Json<ConfigureClientRequest>,
) -> anyhow::Result<(), AppError> {
    debug!("client configuration request: {:?}", request);
    // TODO: puts are fine here
    match state.write().await.client {
        Some(_) => Err(anyhow::anyhow!("client has already been configured").into()),
        ref mut c @ None => {
            tracing::info!("client configuration set: {:?}", request);
            *c = Some(Client::new(&config_request_to_config(request)?));
            Ok(())
        }
    }
}

async fn get_blob(
    State(state): State<Arc<RwLock<AppState>>>,
    Query(request): Query<BlobRef>,
) -> anyhow::Result<Json<near_da_http_api_data::Blob>, AppError> {
    debug!("getting blob: {:?}", request);
    let app_state = state.read().await;
    let client = app_state
        .client
        .as_ref()
        .ok_or(anyhow::anyhow!("client is not configured"))?;

    let blob = client
        .get(CryptoHash(request.transaction_id))
        .await
        .map_err(|e| anyhow::anyhow!("failed to get blob: {}", e))?
        .0;

    let blob = near_da_http_api_data::Blob { data: blob.data };

    Ok(Json(blob))
}

async fn submit_blob(
    State(state): State<Arc<RwLock<AppState>>>,
    Json(request): Json<Blob>,
) -> anyhow::Result<Json<BlobRef>, AppError> {
    debug!("submitting blob: {:?}", request);
    let app_state = state.read().await;

    let blob_hash = CryptoHash::hash_bytes(request.data.as_slice());
    let blob_ref = if let Some(blob_ref) = app_state.cache.get(&blob_hash).await {
        debug!("blob is cached, returning: {:?}", blob_ref);
        blob_ref
    } else {
        let client = app_state
            .client
            .as_ref()
            .ok_or(anyhow::anyhow!("client is not configured"))?;

        let blob_ref = client
            .submit(near_da_primitives::Blob::new(request.data))
            .await
            .map_err(|e| anyhow::anyhow!("failed to submit blobs: {}", e))?
            .0;

        debug!(
            "submit_blob result: {:?}, caching hash {blob_hash}",
            blob_ref
        );
        app_state.cache.insert(blob_hash, blob_ref.clone()).await;
        blob_ref
    };
    Ok(blob_ref.into())
}

// https://github.com/tokio-rs/axum/blob/d7258bf009194cf2f242694e673759d1dbf8cfc0/examples/anyhow-error-response/src/main.rs#L34-L57
struct AppError(anyhow::Error);

impl IntoResponse for AppError {
    fn into_response(self) -> Response {
        tracing::error!("{}", self.0);
        (
            StatusCode::INTERNAL_SERVER_ERROR,
            format!("something went wrong: {}", self.0),
        )
            .into_response()
    }
}

impl<E> From<E> for AppError
where
    E: Into<anyhow::Error>,
{
    fn from(err: E) -> Self {
        Self(err.into())
    }
}

#[tokio::main]
async fn main() {
    let args = CliArgs::parse();

    tracing_subscriber::fmt()
        .with_target(false)
        .with_env_filter(EnvFilter::from_default_env())
        .compact()
        .init();

    let mut state = AppState {
        client: None,
        cache: Cache::new(2048), // (32 * 2) * 2048 = 128kb
    };

    if let Some(path) = args.config {
        let file_contents = tokio::fs::read_to_string(path).await.unwrap();
        let config_parse = serde_json::from_str::<ConfigureClientRequest>(&file_contents)
            .unwrap_or_else(|e| panic!("failed to parse config: {}", e));
        state.client = Some(Client::new(
            &config_request_to_config(config_parse).unwrap(),
        ));
    }

    let state = Arc::new(RwLock::new(state));

    let router = Router::new()
        .route("/health", routing::get(|| async { "" }))
        .route("/configure", routing::put(configure_client))
        .route("/blob", routing::get(get_blob))
        .route("/blob", routing::post(submit_blob))
        .with_state(state)
        .layer(
            TraceLayer::new_for_http()
                .on_failure(trace::DefaultOnFailure::new().level(Level::WARN))
                .on_failure(|_error: ServerErrorsFailureClass, _latency, _request: &_| {
                    tracing::warn!("request failed {:?}", _error);
                })
                .make_span_with(trace::DefaultMakeSpan::new().level(Level::INFO))
                .on_response(trace::DefaultOnResponse::new().level(Level::INFO)),
        );

    let addr = SocketAddr::from(([0; 4], args.port));
    tracing::info!("listening on {}", addr);

    axum::Server::bind(&addr)
        .serve(router.into_make_service())
        .await
        .unwrap();
}

'''
'''--- cliff.toml ---
# git-cliff ~ default configuration file
# https://git-cliff.org/docs/configuration
#
# Lines starting with "#" are comments.
# Configuration options are organized into tables and keys.
# See documentation for more information on available options.

[changelog]
# changelog header
header = """
# Changelog\n
All notable changes to this project will be documented in this file.\n
"""
# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
body = """
{% if version %}\
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}\
    ## [unreleased]
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | upper_first }}
    {% for commit in commits %}
        - {% if commit.breaking %}[**breaking**] {% endif %}{{ commit.message | upper_first }}\
    {% endfor %}
{% endfor %}\n
"""
# remove the leading and trailing whitespace from the template
trim = true
# changelog footer
footer = """
<!-- generated by git-cliff -->
"""
# postprocessors
postprocessors = [
  # { pattern = '<REPO>', replace = "https://github.com/orhun/git-cliff" }, # replace repository URL
]
[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = true
# process each line of a commit as an individual commit
split_commits = true
# regex for preprocessing the commit messages
commit_preprocessors = [
  # { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "([#${2}](<REPO>/issues/${2}))"}, # replace issue numbers
]
# regex for parsing and grouping commits
commit_parsers = [
  { message = "^feat", group = "Features" },
  { message = "^fix", group = "Bug Fixes" },
  { message = "^doc", group = "Documentation" },
  { message = "^perf", group = "Performance" },
  { message = "^refactor", group = "Refactor" },
  { message = "^style", group = "Styling" },
  { message = "^test", group = "Testing" },
  { message = "^chore\\(release\\): prepare for", skip = true },
  { message = "^chore\\(deps\\)", skip = true },
  { message = "^chore\\(pr\\)", skip = true },
  { message = "^chore\\(pull\\)", skip = true },
  { message = "^chore|ci", group = "Miscellaneous Tasks" },
  { body = ".*security", group = "Security" },
  { message = "^revert", group = "Revert" },
]
# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = true
# filter out the commits that are not matched by commit parsers
filter_commits = false
# regex for matching git tags
tag_pattern = "v[0-9].*"

# regex for skipping tags
skip_tags = "v0.1.0-beta.1"
# regex for ignoring tags
ignore_tags = ""
# sort the tags topologically
topo_order = true
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"
# limit the number of commits included in the changelog.
# limit_commits = 42

'''
'''--- contracts/blob-store/Cargo.toml ---
[package]
authors = { workspace = true }
edition = { workspace = true }
name    = "near-da-blob-store"
version = { workspace = true }

[lib]
crate-type = [ "cdylib" ]

[dependencies]
borsh    = { workspace = true }
near-sdk = { workspace = true }
uint     = { version = "0.9.3", default-features = false }

[dev-dependencies]
anyhow             = "1.0.75"
near-da-primitives = { path = "../../crates/primitives", default-features = false }
near-workspaces    = { version = "0.8.0", features = [ "unstable" ] }
tokio              = "1.28"

[features]
default = [ "std" ]
std     = [ "near-da-primitives/std", "borsh/std", "uint/std" ]

'''
'''--- contracts/blob-store/build.sh ---
#!/bin/sh

echo ">> Building contract"

rustup target add wasm32-unknown-unknown
cargo build --all --target wasm32-unknown-unknown --release
'''
'''--- contracts/blob-store/src/lib.rs ---
#![no_std]

use near_sdk::{assert_one_yocto, env, AccountId};

const ERR_CONTRACT_NOT_INITIALIZED: &str = "Contract is not initialized.";
const ERR_CONTRACT_ALREADY_INITIALIZED: &str = "Contract already initialized.";
const ERR_NOT_OWNER: &str = "Predecessor is not owner.";
const ERR_NO_PROPOSED_OWNER: &str = "No proposed owner.";
const ERR_NOT_PROPOSED_OWNER: &str = "Predecessor is not proposed owner.";
const ERR_MISSING_INVALID_INPUT: &str = "Missing or invalid input.";
const JSON_NULL: &[u8] = b"null";
const JSON_DOUBLE_QUOTE: &[u8] = b"\"";
// storage keys
const KEY_INITIALIZED: &[u8; 1] = &[0];
const KEY_OWNER: &[u8; 1] = &[1]; //            serialized with .as_bytes() NOT Borsh
const KEY_PROPOSED_OWNER: &[u8; 1] = &[2]; //   ditto. Not guaranteed to be a valid AccountId.

fn require_initialized() {
    if !env::storage_has_key(KEY_INITIALIZED) {
        env::panic_str(ERR_CONTRACT_NOT_INITIALIZED);
    }
}

fn require_owner(predecessor: &AccountId) {
    if env::storage_read(KEY_OWNER)
        .filter(|v| v == predecessor.as_bytes())
        .is_none()
    {
        env::panic_str(ERR_NOT_OWNER);
    }
}

#[no_mangle]
pub fn new() {
    if env::storage_has_key(KEY_INITIALIZED) {
        env::panic_str(ERR_CONTRACT_ALREADY_INITIALIZED);
    }

    env::storage_write(KEY_INITIALIZED, &[1]);

    let predecessor_account_id = env::predecessor_account_id();

    env::storage_write(KEY_OWNER, predecessor_account_id.as_bytes());
}

#[no_mangle]
pub fn submit() {
    require_initialized();
    require_owner(&env::predecessor_account_id());

    if env::input().is_none() {
        env::panic_str(ERR_MISSING_INVALID_INPUT);
    }
}

fn return_json_string(v: Option<&[u8]>) {
    let r = v.map_or_else(
        || JSON_NULL.to_vec(),
        |v| [JSON_DOUBLE_QUOTE, v, JSON_DOUBLE_QUOTE].concat(),
    );
    env::value_return(&r);
}

#[no_mangle]
pub fn own_get_owner() {
    require_initialized();

    let current_owner = env::storage_read(KEY_OWNER);

    return_json_string(current_owner.as_deref());
}

#[no_mangle]
pub fn own_get_proposed_owner() {
    require_initialized();

    let current_proposed_owner = env::storage_read(KEY_PROPOSED_OWNER);

    return_json_string(current_proposed_owner.as_deref());
}

#[no_mangle]
pub fn own_propose_owner() {
    require_initialized();
    assert_one_yocto();
    let predecessor = env::predecessor_account_id();
    require_owner(&predecessor);

    let payload = env::input().unwrap_or_else(|| env::panic_str(ERR_MISSING_INVALID_INPUT));

    let new_proposed_owner = if payload == b"{}" {
        None
    } else if let Some(account_id) = payload
        .strip_prefix(br#"{"account_id":""#) // jank JSON "parsing"
        .and_then(|s| s.strip_suffix(br#""}"#))
    {
        Some(account_id)
    } else {
        env::panic_str(ERR_MISSING_INVALID_INPUT);
    };

    match new_proposed_owner {
        Some(new_proposed_owner) => {
            env::storage_write(KEY_PROPOSED_OWNER, new_proposed_owner);
        }
        None => {
            env::storage_remove(KEY_PROPOSED_OWNER);
        }
    }
}

#[no_mangle]
pub fn own_accept_owner() {
    require_initialized();
    assert_one_yocto();
    let predecessor = env::predecessor_account_id();
    let current_proposed_owner = env::storage_read(KEY_PROPOSED_OWNER)
        .unwrap_or_else(|| env::panic_str(ERR_NO_PROPOSED_OWNER));

    if predecessor.as_bytes() != current_proposed_owner {
        env::panic_str(ERR_NOT_PROPOSED_OWNER);
    }

    env::storage_remove(KEY_PROPOSED_OWNER);
    env::storage_write(KEY_OWNER, &current_proposed_owner);
}

#[no_mangle]
pub fn own_renounce_owner() {
    require_initialized();
    assert_one_yocto();
    let predecessor = env::predecessor_account_id();
    require_owner(&predecessor);

    env::storage_remove(KEY_OWNER);
    env::storage_remove(KEY_PROPOSED_OWNER);
}

'''
'''--- contracts/blob-store/tests/tests.rs ---
use near_da_primitives::Blob;

#[tokio::test]
async fn test() -> anyhow::Result<()> {
    eprintln!("Initializing sandbox...");
    let worker = near_workspaces::sandbox().await?;

    eprintln!("Setting up accounts...");
    let wasm = near_workspaces::compile_project(".").await?;

    let contract = worker.dev_deploy(&wasm).await?;
    let alice = worker.dev_create_account().await?;

    eprintln!("Calling contract::new()...");

    alice
        .call(contract.id(), "new")
        .transact()
        .await?
        .into_result()?;

    eprintln!("Viewing contract::own_get_owner()...");

    // alice is implicitly set as owner

    let owner = contract.view("own_get_owner").await?.json::<String>()?;

    assert_eq!(owner, alice.id().as_str(), "alice should be the owner");

    let mut blobs = vec![];
    for _ in 0..100 {
        blobs.push(Blob::new(vec![3u8; 256]));
    }
    let blob_ser = borsh::to_vec(&blobs).unwrap();

    eprintln!("Submitting {} blobs...", blobs.len());

    let result = alice
        .call(contract.id(), "submit")
        .args(blob_ser)
        .transact()
        .await?
        .into_result()?;

    eprintln!("Gas burned: {}", result.total_gas_burnt);

    // test switching ownership
    eprintln!("Creating bob...");

    let bob = worker.dev_create_account().await?;

    eprintln!("Proposing bob as new owner...");

    alice
        .call(contract.id(), "own_propose_owner")
        .args_json(near_sdk::serde_json::json!({
            "account_id": bob.id(),
        }))
        .deposit(1)
        .transact()
        .await?
        .unwrap();

    eprintln!("Ownership acceptance by bob...");

    bob.call(contract.id(), "own_accept_owner")
        .deposit(1)
        .transact()
        .await?
        .unwrap();

    let owner = contract.view("own_get_owner").await?.json::<String>()?;

    assert_eq!(owner, bob.id().as_str(), "bob should be the owner");

    Ok(())
}

'''
'''--- crates/da-rpc-sys/Cargo.toml ---
[package]
authors.workspace = true
edition.workspace = true
name              = "near-da-rpc-sys"
version.workspace = true

[lib]
crate-type = [ "cdylib", "staticlib" ]

[dependencies]
libc      = "*"
once_cell = "*"
tokio     = { version = "1.0", features = [ "full" ] }
# TODO: move to eyre
anyhow      = "*"
da-rpc      = { path = "../da-rpc", package = "near-da-rpc" }
ffi-support = "*"
ffi_helpers = "*"
openssl     = { version = "0.10", features = [ "vendored" ] }

[dev-dependencies]
pretty_env_logger = "*"

[build-dependencies]
cbindgen = "*"
which    = "*"

'''
'''--- crates/da-rpc-sys/build.rs ---
use std::{env, path::PathBuf};

fn main() {
    let crate_dir = env::var("CARGO_MANIFEST_DIR").unwrap();
    let crate_name = env::var("CARGO_PKG_NAME").unwrap();
    #[allow(clippy::single_char_pattern)] // False positive
    let output_file = target_dir()
        .join(format!("lib{crate_name}.h").replace("-", "_"))
        .display()
        .to_string();

    // check if cbindgen is in path or panic
    let _cbindgen = match which::which("cbindgen") {
        Ok(path) => path,
        Err(_) => panic!("cbindgen not found in path"),
    };

    let mut config: cbindgen::Config = Default::default();
    config.language = cbindgen::Language::C;
    config.parse.parse_deps = true;
    config.parse.include = Some(vec![
        crate_name.clone(),
        "da-rpc".to_string(),
        "near-da-rpc".to_string(),
    ]);
    config.sys_includes = vec!["math.h".to_string(), "stdio.h".to_string()];
    cbindgen::generate_with_config(crate_dir, config)
        .expect("Unable to generate bindings")
        .write_to_file(output_file);
}

/// Find the location of the `target/` directory. Note that this may be
/// overridden by `cmake`, so we also need to check the `CARGO_TARGET_DIR`
/// variable.
fn target_dir() -> PathBuf {
    if let Ok(dir) = env::var("OUT_DIR") {
        PathBuf::from(dir).join("../../..")
    } else {
        PathBuf::from(env::var("CARGO_MANIFEST_DIR").unwrap()).join("target")
    }
}

'''
'''--- crates/da-rpc-sys/src/lib.rs ---
use anyhow::Context;
use da_rpc::near::config::{self, Network};
pub use da_rpc::near::{config::Config, Client};
use da_rpc::CryptoHash;
use da_rpc::DataAvailability;
pub use da_rpc::Namespace;
pub use da_rpc::{Blob, BlobRef};

use ffi_helpers::error_handling::update_last_error;
use ffi_helpers::null_pointer_check;
use ffi_helpers::Nullable;
use ffi_support::FfiStr;
use libc::size_t;
use once_cell::sync::Lazy;
use std::ptr::{null, null_mut};

use std::{
    ffi::{c_char, CStr, CString},
    mem, slice,
};
use tokio::runtime::{self, Runtime};

pub type BlockHeight = u64;

// Denote the version to make sure we don't break the API downstream
pub const VERSION: u8 = 4;

/// TODO: fix a lot of these panics since they arent handled well by ffi!

static RUNTIME: Lazy<Runtime> = Lazy::new(|| {
    runtime::Builder::new_multi_thread()
        .enable_io()
        .enable_time()
        .build()
        .expect("Failed to create runtime")
});

#[no_mangle]
pub extern "C" fn get_error() -> *mut c_char {
    let err = ffi_helpers::take_last_error();
    match err {
        None => std::ptr::null_mut(),
        Some(err) => {
            let msg = err.to_string();
            let mut buf = vec![0; msg.len() + 1];

            buf[..msg.len()].copy_from_slice(msg.as_bytes());
            // Make sure to add a trailing null in case people use this as a bare char*
            buf[msg.len()] = u8::NULL;

            let ptr = buf.as_mut_ptr();
            mem::forget(buf);
            ptr as *mut c_char
        }
    }
}

/// # Safety
/// We check if the pointers are null
/// This is only used in a test
#[no_mangle]
pub unsafe extern "C" fn set_error(err: *const c_char) {
    null_pointer_check!(err);
    let msg = FfiStr::from_raw(err).into_string();
    ffi_helpers::error_handling::update_last_error(anyhow::anyhow!(msg));
}

#[no_mangle]
pub extern "C" fn clear_error() {
    ffi_helpers::error_handling::clear_last_error();
}

/// # Safety
/// We check if the pointers are null
#[no_mangle]
pub unsafe extern "C" fn new_client_file(
    key_path: *const c_char,
    contract: *const c_char,
    network: *const c_char,
    namespace_version: u8,
    namespace: u32,
) -> *const Client {
    null_pointer_check!(key_path);

    let key_path = FfiStr::from_raw(key_path).into_string();
    let key_type = || config::KeyType::File(key_path.into());
    init_client(contract, network, namespace_version, namespace, key_type)
}

unsafe fn init_client<F: FnOnce() -> config::KeyType>(
    contract: *const c_char,
    network: *const c_char,
    namespace_version: u8,
    namespace: u32,
    f: F,
) -> *const Client {
    null_pointer_check!(contract);
    null_pointer_check!(network);

    let contract = FfiStr::from_raw(contract).into_string();
    let network = FfiStr::from_raw(network).as_str();

    let namespace = if namespace > 0 {
        Some(Namespace::new(namespace_version, namespace))
    } else {
        None
    };

    let network = Network::try_from(network);

    match network {
        Err(e) => {
            update_last_error(anyhow::anyhow!(e));
            null()
        }
        Ok(network) => {
            let config = Config {
                key: f(),
                contract,
                network,
                namespace,
                mode: Default::default(), // TODO: for now we don't expose mode to the client
            };

            Box::into_raw(Box::new(Client::new(&config)))
        }
    }
}

/// # Safety
/// We check if the pointers are null
#[no_mangle]
pub unsafe extern "C" fn new_client(
    account_id: *const c_char,
    secret_key: *const c_char,
    contract: *const c_char,
    network: *const c_char,
    // TODO: make option
    namespace_version: u8,
    namespace: u32,
) -> *const Client {
    null_pointer_check!(account_id);
    null_pointer_check!(secret_key);

    let account_id = FfiStr::from_raw(account_id).into_string();
    let secret_key = FfiStr::from_raw(secret_key).into_string();

    let key_type = || config::KeyType::SecretKey(account_id, secret_key);
    init_client(contract, network, namespace_version, namespace, key_type)
}

/// # Safety
/// We check if the client is null
#[no_mangle]
pub unsafe extern "C" fn free_client(client: *mut Client) {
    null_pointer_check!(client);
    let _ = Box::from_raw(client);
}

/// # Safety
/// We check if the slices are null
#[no_mangle]
pub unsafe extern "C" fn submit(client: *const Client, blob: *const BlobSafe) -> *mut c_char {
    null_pointer_check!(client);
    null_pointer_check!(blob);

    let client = &*client;
    let blob = &*blob;
    let blob = slice::from_raw_parts(blob.data, blob.len);

    RUNTIME
        .block_on(client.submit(Blob::new(blob.to_vec())))
        .map_err(|e| anyhow::anyhow!(e))
        .and_then(|x| {
            let ptr = CString::new(x.0.transaction_id)
                .with_context(|| "failed to convert transaction id to C string")?
                .into_raw();
            Ok(ptr as *mut c_char)
        })
        .unwrap_or(null_mut())
}

#[repr(C)]
#[derive(Debug, Clone)]
pub struct BlobSafe {
    pub data: *const u8,
    pub len: size_t,
}

impl From<BlobSafe> for Blob {
    fn from(blob: BlobSafe) -> Self {
        let data = unsafe { slice::from_raw_parts(blob.data, blob.len) };

        Self {
            data: data.to_vec(),
        }
    }
}
impl From<Blob> for BlobSafe {
    fn from(blob: Blob) -> Self {
        let (data, len) = vec_to_safe_ptr(blob.data);
        Self { data, len }
    }
}

pub fn vec_to_safe_ptr<T>(vec: Vec<T>) -> (*const T, size_t) {
    let mut vec = vec;
    vec.shrink_to_fit();

    let ptr = vec.as_ptr();
    let len = vec.len();
    mem::forget(vec);

    (ptr, len as size_t)
}

#[repr(C)]
pub struct RustSafeArray {
    pub data: *const u8,
    pub len: size_t,
}

impl RustSafeArray {
    pub fn new(vec: Vec<u8>) -> Self {
        let (data, len) = vec_to_safe_ptr(vec);

        Self { data, len }
    }
}

impl Nullable for RustSafeArray {
    const NULL: Self = RustSafeArray {
        data: null(),
        len: 0,
    };

    fn is_null(&self) -> bool {
        unsafe { *self.data == *Self::NULL.data && self.len == 0 }
    }
}

/// # Safety
/// We check if the slices are null and they should always be 32 bytes
#[no_mangle]
pub unsafe extern "C" fn get(client: *const Client, transaction_id: *const u8) -> *const BlobSafe {
    null_pointer_check!(client);
    null_pointer_check!(transaction_id);

    let client = &*client;

    let transaction_id = slice::from_raw_parts(transaction_id, 32);
    let transaction_id: Result<[u8; 32], _> = transaction_id.try_into();
    match transaction_id {
        Ok(transaction_id) => scoop_err(
            RUNTIME
                .block_on(client.get(CryptoHash(transaction_id)))
                .map_err(|e| anyhow::anyhow!(e))
                .map(|x| x.0.into()),
        ),
        Err(e) => {
            update_last_error(anyhow::anyhow!(e));
            std::ptr::null()
        }
    }
}

/// # Safety
/// We check if the slices are null
#[no_mangle]
pub unsafe extern "C" fn free_blob(blob: *mut BlobSafe) {
    null_pointer_check!(blob);

    unsafe {
        let _ = Box::from_raw(blob);
    }
}

/// # Safety
/// We check if the slices are null
#[no_mangle]
pub unsafe extern "C" fn submit_batch(
    client: *const Client,
    candidate_hex: *const c_char,
    tx_data: *const u8,
    tx_data_len: size_t,
) -> *const RustSafeArray {
    null_pointer_check!(client);
    null_pointer_check!(candidate_hex);
    null_pointer_check!(tx_data);

    let client = unsafe { &*client };
    let candidate_hex = unsafe { scoop_err(CStr::from_ptr(candidate_hex).to_str()) };
    null_pointer_check!(candidate_hex);
    let candidate_hex = *candidate_hex;
    let candidate_hex = candidate_hex.to_owned();
    let tx_data = { unsafe { slice::from_raw_parts(tx_data, tx_data_len) } };

    // TODO: this is too coupled to OP
    // If batcher inbox, submit the tx
    if candidate_hex == "0xfF00000000000000000000000000000000000000" {
        // Prepare the blob for submission
        // TODO: namespace versioning
        let blob = Blob::new(tx_data.to_vec());

        scoop_err(
            RUNTIME
                .block_on(client.submit(blob))
                .map(|result| result.0)
                .map(|r| RustSafeArray::new((*r).to_vec()))
                .map_err(|e| anyhow::anyhow!(e)),
        )
    } else {
        eprintln!("Not a batcher inbox");
        update_last_error(anyhow::anyhow!("Not a batcher inbox"));
        &RustSafeArray::NULL
    }
}

fn scoop_err<T, E: Into<anyhow::Error>>(result: Result<T, E>) -> *const T {
    match result {
        Err(e) => {
            let e = e.into();
            eprintln!("NEAR FFI: {:?}", e);
            update_last_error(e);
            std::ptr::null()
        }
        Ok(t) => Box::into_raw(Box::new(t)),
    }
}

#[cfg(test)]
pub mod test {
    use super::*;
    use da_rpc::near::config::Network;
    use ffi_helpers::take_last_error;
    use std::env;
    use std::ffi::CString;
    use std::str::FromStr;

    const PREVIOUSLY_SUBMITTED_TX: &str = "4YPsDMPsF35x6eWnBpFqrz1PC36tV3JdWwhTx6ZggEQo";

    #[test]
    fn test_error_handling() {
        update_last_error(anyhow::anyhow!("test"));
        let error = unsafe { &*get_error() };
        let err_str = unsafe { CStr::from_ptr(error).to_str().unwrap() };
        println!("{:?}", err_str);
        assert_eq!("test", err_str);
        assert!(take_last_error().is_none());
    }

    #[test]
    fn test_error_handling_manual_clear() {
        update_last_error(anyhow::anyhow!("test"));
        assert!(!get_error().is_null());
        clear_error();
        assert!(get_error().is_null());
    }

    fn test_get_client() -> (Client, Config) {
        pretty_env_logger::try_init().ok();
        let account = env::var("TEST_NEAR_ACCOUNT").unwrap();
        let secret = env::var("TEST_NEAR_SECRET").unwrap();
        let config = Config {
            key: config::KeyType::SecretKey(account.clone(), secret),
            contract: account.to_string(),
            network: Network::Testnet,
            namespace: None,
            mode: Default::default(),
        };
        let client = Client::new(&config);
        (client, config)
    }

    #[allow(temporary_cstring_as_ptr)] // JUSTIFICATION: it only lives in this scope, so it's fine
    #[test]
    fn test_init_client() {
        let (_, config) = test_get_client();
        assert!(unsafe {
            !new_client_file(
                CString::new("throwaway-key.json").unwrap().as_ptr(),
                CString::new(config.contract.to_string()).unwrap().as_ptr(),
                CString::new(config.network.to_string()).unwrap().as_ptr(),
                Namespace::default().version,
                Namespace::default().id,
            )
            .is_null()
        });
    }

    #[ignore = "This should be an integration test"]
    #[test]
    fn c_e2e() {
        unsafe {
            let (client, _) = test_get_client();
            let original_blob = Blob::new(vec![0x01, 0x02, 0x03]);

            let res = submit(&client, &original_blob.clone().into());
            assert!(!res.is_null());

            let tx_hash = CString::from_raw(res);
            println!("{:?}", tx_hash);

            let fetched = Blob::from((*get(&client, tx_hash.as_ptr() as *const u8)).clone());

            assert_eq!(original_blob.data, fetched.data);
        }
    }

    #[ignore = "This should be an integration test"]
    #[test]
    fn c_submit() {
        let blob: BlobSafe = Blob::new(vec![0x01, 0x02, 0x03]).into();
        let (client, _) = test_get_client();
        let res = unsafe { submit(&client, &blob) };
        assert!(!res.is_null());
        let binding = unsafe { CString::from_raw(res) };
        let str = binding;
        println!("{:?}", str);
    }

    #[ignore = "This should be an integration test"]
    #[test]
    fn c_submit_1point5mb() {
        let blob: BlobSafe = Blob::new(vec![99u8; 1536 * 1024]).into();
        let (client, _) = test_get_client();
        let res = unsafe { submit(&client, &blob) };

        if res.is_null() {
            let error = unsafe { &*get_error() };
            let err_str = unsafe { CStr::from_ptr(error).to_str().unwrap() };
            println!("{:?}", err_str);
            panic!("Should not be null");
        }
        let binding = unsafe { CString::from_raw(res) };
        let str = binding;
        println!("{:?}", str);
    }

    #[test]
    #[ignore = "Wait for integration tests"]
    fn c_get() {
        let (client, _) = test_get_client();

        let hash = CryptoHash::from_str(PREVIOUSLY_SUBMITTED_TX).unwrap();
        let ptr = hash.0.as_ptr();

        let res = unsafe { get(&client, ptr) };
        assert!(!res.is_null());
        let safe_blob: &BlobSafe = unsafe { &*res };
        let safe_blob = safe_blob.clone();
        println!("{:?}", safe_blob);
        assert_eq!(safe_blob.len, 706);
        let data = unsafe { slice::from_raw_parts(safe_blob.data, safe_blob.len as usize) };
        assert_eq!(data.len(), 706);
    }

    #[test]
    fn test_blob_to_blobsafe() {
        let blob = Blob::new(vec![0x01, 0x02, 0x03]);
        let blob_safe: BlobSafe = blob.into();
        assert_eq!(blob_safe.len, 3);
        let data = unsafe { slice::from_raw_parts(blob_safe.data, blob_safe.len) };
        assert_eq!(data, &vec![0x01, 0x02, 0x03]);
    }
}

'''
'''--- crates/da-rpc/Cargo.toml ---
[package]
authors.workspace = true
edition.workspace = true
name              = "near-da-rpc"
version.workspace = true

[dependencies]
async-trait = { workspace = true }
eyre        = { workspace = true }
futures     = { workspace = true }
tokio       = { version = "1.0", features = [ "full" ] }
tracing     = { workspace = true }
url         = "2.5"

# Serialization
serde      = { workspace = true, default-features = true }
serde_json = { workspace = true }
serde_with = { workspace = true, default-features = true }

borsh                   = { workspace = true }
near-crypto             = { workspace = true }
near-da-primitives      = { path = "../primitives" }
near-jsonrpc-client     = { workspace = true }
near-jsonrpc-primitives = { workspace = true }
near-primitives         = { workspace = true }

[dev-dependencies]
tracing-subscriber = "*"

[build-dependencies]
cbindgen = "*"
which    = "*"

'''
'''--- crates/da-rpc/src/lib.rs ---
use eyre::Result;
pub use near_da_primitives::{Blob, BlobRef, Commitment, Namespace};
pub use near_primitives::hash::CryptoHash;
use near_primitives::types::BlockHeight;
use serde::{Deserialize, Serialize};

pub mod near;

#[repr(C)]
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SubmitResult(pub BlobRef);

#[repr(C)]
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct Read(pub Blob);

#[repr(C)]
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ReadAll(pub Vec<(BlockHeight, Blob)>);

#[repr(C)]
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct IndexRead(pub Blob);

#[async_trait::async_trait]
pub trait DataAvailability {
    /// Submit blobs to the da layer
    async fn submit(&self, blob: Blob) -> Result<SubmitResult>;
    /// Read blob by namespace and height
    async fn get(&self, transaction_id: CryptoHash) -> Result<Read>;
}

'''
'''--- crates/da-rpc/src/near/config.rs ---
use near_da_primitives::{Mode, Namespace};
use serde::{Deserialize, Deserializer};
use std::{fmt::Display, path::PathBuf};
use url::Url;

#[derive(Debug, Clone, Deserialize)]
pub enum KeyType {
    File(PathBuf),
    Seed(String, String),
    SecretKey(String, String),
}

#[cfg(test)]
impl Default for KeyType {
    fn default() -> Self {
        Self::File(PathBuf::from("throwaway-key.json"))
    }
}

#[derive(Debug, Clone, Deserialize)]
#[cfg_attr(test, derive(Default))]
pub struct Config {
    pub key: KeyType,
    pub contract: String,
    pub network: Network,
    pub namespace: Option<Namespace>,
    pub mode: Mode,
}

// TODO: stole from near-light-client, create primitives to share this
#[derive(Debug, Clone, Default, PartialEq, Eq)]
pub enum Network {
    Mainnet,
    #[default]
    Testnet,
    // provide url
    Custom(String),
}

impl Network {
    fn parse_customnet(s: &str) -> Result<Network, String> {
        s.parse::<Url>()
            .map_err(|err| err.to_string())
            .map(|_| Network::Custom(s.into()))
    }
}

impl<'de> Deserialize<'de> for Network {
    fn deserialize<D>(deserializer: D) -> Result<Network, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s: &str = Deserialize::deserialize(deserializer)?;
        s.try_into().map_err(serde::de::Error::custom)
    }
}

impl Network {
    pub fn to_endpoint(&self) -> String {
        const MAINNET_RPC_ENDPOINT: &str = "https://rpc.mainnet.near.org";
        const TESTNET_RPC_ENDPOINT: &str = "https://rpc.testnet.near.org";
        match self {
            Self::Mainnet => MAINNET_RPC_ENDPOINT.into(),
            Self::Testnet => TESTNET_RPC_ENDPOINT.into(),
            Self::Custom(url) => url.clone(),
        }
    }
    pub fn archive_endpoint(&self) -> String {
        const MAINNET_RPC_ARCHIVE_ENDPOINT: &str = "https://archival-rpc.mainnet.near.org";
        const TESTNET_RPC_ARCHIVE_ENDPOINT: &str = "https://archival-rpc.testnet.near.org";
        match self {
            Self::Mainnet => MAINNET_RPC_ARCHIVE_ENDPOINT.into(),
            Self::Testnet => TESTNET_RPC_ARCHIVE_ENDPOINT.into(),
            Self::Custom(url) => url.clone(),
        }
    }
}

impl Display for Network {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let s = match self {
            Self::Mainnet => "mainnet",
            Self::Testnet => "testnet",
            Self::Custom(url) => url.as_str(),
        };
        write!(f, "{}", s)
    }
}

impl TryFrom<&str> for Network {
    type Error = String;
    fn try_from(s: &str) -> Result<Self, Self::Error> {
        match s.to_lowercase().as_str() {
            "mainnet" => Ok(Self::Mainnet),
            "testnet" => Ok(Self::Testnet),
            url => Self::parse_customnet(url),
        }
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_network_from_str() {
        let network = Network::try_from("mainnet").unwrap();
        assert_eq!(network, Network::Mainnet);

        let network = Network::try_from("MAINNET").unwrap();
        assert_eq!(network, Network::Mainnet);

        let network = Network::try_from("testnet").unwrap();
        assert_eq!(network, Network::Testnet);

        {
            let url = "http://127.0.0.1:3030";
            let network = Network::try_from(url).unwrap();
            assert_eq!(network, Network::Custom(url.into()));
        }

        {
            let url = "ws://someurl:2754";
            let network = Network::try_from(url).unwrap();
            assert_eq!(network, Network::Custom(url.into()));
        }
    }

    #[test]
    fn test_invalid_local_adress() {
        let network = Network::try_from("invalid").unwrap_err();
        assert_eq!(network, "relative URL without a base");
    }

    #[test]
    fn test_network_case_insensitive() {
        let network = Network::try_from("MAINNET").unwrap();
        assert_eq!(network, Network::Mainnet);
    }
}

'''
'''--- crates/da-rpc/src/near/mod.rs ---
use std::str::FromStr;

use super::{Blob, DataAvailability};
use crate::{Read, SubmitResult};
use config::Config;
use eyre::{eyre, Result};
use near_crypto::{InMemorySigner, Signer};
use near_da_primitives::{LegacyBlob, Mode, SubmitRequest};
use near_jsonrpc_client::{
    methods::{
        query::RpcQueryRequest, send_tx::RpcSendTransactionRequest, tx::RpcTransactionStatusRequest,
    },
    JsonRpcClient,
};
use near_jsonrpc_primitives::types::{query::QueryResponseKind, transactions::TransactionInfo};
use near_primitives::{
    borsh,
    views::{FinalExecutionOutcomeViewEnum, FinalExecutionStatus},
};
use near_primitives::{
    borsh::{BorshDeserialize, BorshSerialize},
    hash::CryptoHash,
    transaction::{Action, FunctionCallAction, Transaction},
    types::{AccountId, BlockReference, Nonce},
    views::{ActionView, TxExecutionStatus},
};
use serde::{Deserialize, Serialize};
use tokio::pin;
use tracing::{debug, error, trace};

pub mod config;

pub const GAS_LIMIT: u64 = 20_000_000_000_000; // usually 15tgas for 1.5mb

pub struct Client {
    pub config: Config,
    pub client: JsonRpcClient,
    pub archive: JsonRpcClient,
}

impl Client {
    pub fn new(config: &Config) -> Self {
        Self {
            config: config.clone(),
            client: JsonRpcClient::connect(config.network.to_endpoint()),
            archive: JsonRpcClient::connect(config.network.archive_endpoint()),
        }
    }

    async fn get_current_nonce(
        &self,
        account_id: &AccountId,
        public_key: &near_crypto::PublicKey,
    ) -> Result<Option<(CryptoHash, Nonce)>> {
        let query_response = self
            .client
            .call(RpcQueryRequest {
                block_reference: BlockReference::latest(),
                request: near_primitives::views::QueryRequest::ViewAccessKey {
                    account_id: account_id.clone(),
                    public_key: public_key.clone(),
                },
            })
            .await;

        match query_response {
            Ok(access_key_query_response) => match access_key_query_response.kind {
                QueryResponseKind::AccessKey(access_key) => Ok(Some((
                    access_key_query_response.block_hash,
                    access_key.nonce,
                ))),
                _ => Err(eyre!("failed to extract current nonce")),
            },
            Err(res) => Err(res)?,
        }
    }

    pub async fn get_nonce_signer(&self) -> Result<(InMemorySigner, CryptoHash, Nonce)> {
        let signer = get_signer(&self.config)?;
        if let Some((latest_hash, current_nonce)) = self
            .get_current_nonce(&signer.account_id, &signer.public_key)
            .await?
        {
            Ok((signer, latest_hash, current_nonce))
        } else {
            Err(eyre!("failed to get current nonce"))
        }
    }

    pub async fn no_signer(&self) -> Result<impl Signer> {
        Ok(near_crypto::EmptySigner {})
    }

    pub fn build_view_call(hash: CryptoHash, sender: AccountId) -> RpcTransactionStatusRequest {
        RpcTransactionStatusRequest {
            transaction_info: TransactionInfo::TransactionId {
                tx_hash: hash,
                sender_account_id: sender,
            },
            wait_until: TxExecutionStatus::IncludedFinal,
        }
    }

    pub fn build_function_call_transaction<S: Signer>(
        signer: &S,
        signer_account_id: &AccountId,
        contract: &AccountId,
        latest_hash: &CryptoHash,
        current_nonce: Nonce,
        action: FunctionCallAction,
        mode: &Mode,
    ) -> RpcSendTransactionRequest {
        let tx = Transaction {
            signer_id: signer_account_id.clone(),
            public_key: signer.public_key(),
            nonce: current_nonce + 1,
            receiver_id: contract.clone(),
            block_hash: *latest_hash,
            actions: vec![Action::FunctionCall(Box::new(action))],
        };
        RpcSendTransactionRequest {
            signed_transaction: tx.sign(signer),
            wait_until: wait_submit(mode),
        }
    }
}

pub fn get_signer(config: &Config) -> Result<InMemorySigner> {
    Ok(match config.key {
        config::KeyType::File(ref path) => InMemorySigner::from_file(path)?,
        config::KeyType::Seed(ref account_id, ref seed) => {
            InMemorySigner::from_seed(account_id.parse()?, near_crypto::KeyType::ED25519, seed)
        }
        config::KeyType::SecretKey(ref account_id, ref secret_key) => {
            InMemorySigner::from_secret_key(
                account_id.parse()?,
                near_crypto::SecretKey::from_str(secret_key)?,
            )
        }
    })
}

#[derive(BorshSerialize, BorshDeserialize, Serialize, Deserialize, Debug)]
struct LegacyRequest {
    blobs: Vec<LegacyBlob>,
}

// TODO: mock tests for these
#[async_trait::async_trait]
impl DataAvailability for Client {
    async fn submit(&self, blob: Blob) -> Result<SubmitResult> {
        let (signer, latest_hash, current_nonce) = self.get_nonce_signer().await?;

        let submit_req = SubmitRequest {
            namespace: self.config.namespace,
            data: blob.data,
        };
        let req = Client::build_function_call_transaction(
            &signer,
            &signer.account_id,
            &self.config.contract.parse()?,
            &latest_hash,
            current_nonce,
            FunctionCallAction {
                method_name: "submit".to_string(),
                args: borsh::to_vec(&submit_req)?,
                gas: GAS_LIMIT,
                deposit: 0,
            },
            &self.config.mode,
        );

        match self
            .client
            .call(&req)
            .await?
            .final_execution_outcome
            .map(FinalExecutionOutcomeViewEnum::into_outcome)
        {
            Some(v) => match v.status {
                FinalExecutionStatus::SuccessValue(r) => {
                    debug!("Transaction submitted, result: {:?}", r);
                    Ok(SubmitResult(v.transaction.hash.0.into()))
                }
                FinalExecutionStatus::Failure(e) => {
                    error!("Error submitting transaction: {:?}", e);
                    Err(eyre!("Error submitting transaction: {:?}", e))
                }
                _ => Err(eyre!(
                    "Transaction not ready yet, this should not be reachable"
                )),
            },
            None => Err(eyre!("Transaction not ready yet")),
        }
    }

    async fn get(&self, transaction_id: CryptoHash) -> Result<Read> {
        let (signer, _, _) = self.get_nonce_signer().await?;

        let req = Client::build_view_call(transaction_id, signer.account_id);

        let std = self.client.call(&req);
        pin!(std);
        let archive = self.archive.call(&req);
        pin!(archive);

        let (result, _rest) = futures::future::select_ok([std, archive])
            .await
            .map_err(|e| {
                eyre!(
                    "Error getting blob: {:?} - check the transaction was included, this usually happens if the transaction failed and didn't reach finality",
                    e
                )
            })?;
        trace!("blob status: {:?}", result.final_execution_status);

        match result
            .final_execution_outcome
            .map(FinalExecutionOutcomeViewEnum::into_outcome)
        {
            Some(v) => {
                let args: Vec<u8> = v
                    .transaction
                    .actions
                    .iter()
                    .filter(|x| matches!(x, ActionView::FunctionCall { .. }))
                    .collect::<Vec<_>>()
                    .first()
                    .and_then(|x| {
                        if let ActionView::FunctionCall { args, .. } = x {
                            let args: Vec<u8> = args.clone().into();
                            Some(args)
                        } else {
                            None
                        }
                    })
                    .ok_or_else(|| eyre!("Transaction had no actions: {:?}", v.transaction))?;

                let original_request: SubmitRequest = BorshDeserialize::try_from_slice(&args)
                    .or_else(|e| {
                        debug!("Error deserializing new blob: {:?}", e);
                        let legacy_request = BorshDeserialize::try_from_slice(&args);
                        legacy_request
                            .map(|lr: LegacyRequest| SubmitRequest {
                                namespace: None,
                                // TODO: unbork
                                data: lr
                                    .blobs
                                    .into_iter()
                                    .map(Blob::from)
                                    .collect::<Vec<_>>()
                                    .first()
                                    .cloned()
                                    .unwrap()
                                    .data,
                            })
                            .map_err(|e| eyre!("Error deserializing old blob: {:?}", e))
                    })?;
                debug!("Got blob: {:?}", original_request.data);
                Ok(Read(original_request.data.into()))
            }
            x => Err(eyre!("Transaction not ready yet: {:?}", x)),
        }
        .map_err(|e| {
            error!("error getting blob: {:?}", e);
            e
        })
    }
}

fn wait_submit(mode: &Mode) -> TxExecutionStatus {
    match mode {
        Mode::Optimistic => TxExecutionStatus::Included,
        Mode::Standard => TxExecutionStatus::ExecutedOptimistic,
        Mode::Pessimistic => TxExecutionStatus::Final,
    }
}

#[cfg(test)]
mod tests {

    use near_da_primitives::Namespace;
    use tracing_subscriber::EnvFilter;

    use self::config::Network;

    use super::*;

    #[test]
    fn test_get_signer() {
        let account_id = "throwawaykey.testnet";
        let signer = get_signer(&Config {
            key: config::KeyType::Seed(account_id.parse().unwrap(), "ed25519:test".to_string()),
            ..Default::default()
        })
        .unwrap();
        assert_eq!(signer.account_id.to_string(), account_id.to_string());
        assert_eq!(
            signer.public_key.to_string(),
            "ed25519:38FBJoAPGsefiNoTFoDr95zyGeMb6fx6MuQw9HaasxHH".to_string()
        );

        let signer = get_signer(&Config {
            key: config::KeyType::SecretKey(
                account_id.parse().unwrap(),
                "ed25519:2T3R1CBAsKQN1Xa9fN9aL1epRwnxgbvk5RAy3sNAdh1n4nfkD9gyGKDLECBMVkwg1zPeewPG9eoX8XVRC6tr6nDt".to_string(),
            ),
            ..Default::default()
        })
        .unwrap();
        assert_eq!(signer.account_id.to_string(), account_id.to_string());
        assert_eq!(
            signer.public_key.to_string(),
            "ed25519:63gNvWb5ESf9ECcHtVy8E853XrPaSfgT39QHXRo6Zomx".to_string()
        );
    }

    #[tokio::test]
    async fn test_live_failed() {
        tracing_subscriber::fmt()
            .with_target(false)
            .with_env_filter(EnvFilter::from_default_env())
            .compact()
            .init();

        let account = "devburnerkey3292389.testnet";
        let secret = "ed25519:2FPg5DHbr3oFLMKGiEhUsKUyf7vCy81qYHqdHNEHqTAaRzv2tJi2NWPLvbLoeTXzQP9jX6pNzfc83k3nSNNrpqQx";

        let config = Config {
            key: config::KeyType::SecretKey(account.to_string(), secret.to_string()),
            contract: "blarg233.testnet".to_string(),
            network: Network::Testnet,
            namespace: None,
            mode: Mode::Standard,
        };
        let client = Client::new(&config);

        client
            .get(CryptoHash::from_str("HdF2Bf2VvDVktxuRpBpbGsgFFZpfZuSfm7mHGa6TSqP9").unwrap())
            .await
            .unwrap();
    }

    #[tokio::test]
    async fn test_live_read() {
        tracing_subscriber::fmt()
            .with_target(false)
            .with_env_filter(EnvFilter::from_default_env())
            .compact()
            .init();

        let account = "devburnerkey3292389.testnet";
        let secret = "ed25519:2FPg5DHbr3oFLMKGiEhUsKUyf7vCy81qYHqdHNEHqTAaRzv2tJi2NWPLvbLoeTXzQP9jX6pNzfc83k3nSNNrpqQx";

        let config = Config {
            key: config::KeyType::SecretKey(account.to_string(), secret.to_string()),
            contract: "blarg233.testnet".to_string(),
            network: Network::Testnet,
            namespace: None,
            mode: Mode::Standard,
        };
        let client = Client::new(&config);

        client
            .get(CryptoHash::from_str("5h4KVQRmHd2P17Ri7g6vfYsg5SjiKARf4sJkAsgnrhEw").unwrap())
            .await
            .unwrap();
    }

    #[tokio::test]
    async fn test_live_read_old() {
        tracing_subscriber::fmt()
            .with_target(false)
            .with_env_filter(EnvFilter::from_default_env())
            .compact()
            .init();

        let account = "devburnerkey3292389.testnet";
        let secret = "ed25519:2FPg5DHbr3oFLMKGiEhUsKUyf7vCy81qYHqdHNEHqTAaRzv2tJi2NWPLvbLoeTXzQP9jX6pNzfc83k3nSNNrpqQx";

        let config = Config {
            key: config::KeyType::SecretKey(account.to_string(), secret.to_string()),
            contract: "throwawaykey.testnet".to_string(),
            network: Network::Testnet,
            namespace: None,
            mode: Mode::Standard,
        };
        let client = Client::new(&config);

        client
            .get(CryptoHash::from_str("D13iq7DWstN4GZ5JEXJe2SzWxxfzy6v6DF6zgPt8ZCct").unwrap())
            .await
            .unwrap();
    }

    #[tokio::test]
    async fn test_live_read_failed() {
        tracing_subscriber::fmt()
            .with_target(false)
            .with_env_filter(EnvFilter::from_default_env())
            .compact()
            .init();

        let account = "devburnerkey3292389.testnet";
        let secret = "ed25519:2FPg5DHbr3oFLMKGiEhUsKUyf7vCy81qYHqdHNEHqTAaRzv2tJi2NWPLvbLoeTXzQP9jX6pNzfc83k3nSNNrpqQx";

        let config = Config {
            key: config::KeyType::SecretKey(account.to_string(), secret.to_string()),
            contract: "throwawaykey.testnet".to_string(),
            network: Network::Testnet,
            namespace: None,
            mode: Mode::Standard,
        };
        let client = Client::new(&config);

        client
            .get(CryptoHash::from_str("5hAuW1utdpnA5o6GPjJYuGLUvFKsjGPKwuQtfpPZ54uR").unwrap())
            .await
            .unwrap();
    }

    #[test]
    fn test_build_fast_get() {}

    #[test]
    fn test_build_get_all() {}

    #[test]
    fn test_build_get() {}

    #[test]
    fn test_build_submit() {}

    #[test]
    fn test_serialise_submit_no_namespace() {
        let req = SubmitRequest {
            namespace: None,
            data: [5u8; 256].to_vec(),
        };
        let req_str = serde_json::to_string(&req).unwrap();
        let new_req: SubmitRequest = serde_json::from_str(&req_str).unwrap();
        assert_eq!(
            serde_json::to_vec(&new_req).unwrap(),
            serde_json::to_vec(&req).unwrap()
        );
        assert_eq!(
            serde_json::to_vec(&req).unwrap(),
            serde_json::to_string(&req).unwrap().as_bytes()
        );
    }

    #[test]
    fn test_serialise_submit_namespace() {
        let req = SubmitRequest {
            namespace: Some(Namespace {
                version: 1,
                id: 1337,
            }),
            data: [6u8; 256].to_vec(),
        };
        let req_str = serde_json::to_string(&req).unwrap();
        let new_req: SubmitRequest = serde_json::from_str(&req_str).unwrap();
        assert_eq!(
            serde_json::to_vec(&new_req).unwrap(),
            serde_json::to_vec(&req).unwrap()
        );
        assert_eq!(
            serde_json::to_vec(&req).unwrap(),
            serde_json::to_string(&req).unwrap().as_bytes()
        );
    }
}

'''
'''--- crates/http-api-data/Cargo.toml ---
# The intent of this crate is to not depend on any chain-specific crates, to
# avoid dependency problems and simplify the dependency graph as much as
# possible.

[package]
name = "near-da-http-api-data"
version.workspace = true
authors.workspace = true
edition.workspace = true

[dependencies]
serde_with = { version = "3", default-features = false, features = [
    "hex",
    "macros",
] }
serde = "1"
near-da-primitives = { path = "../primitives", default-features = false, features = [
    "std",
] }

'''
'''--- crates/http-api-data/src/lib.rs ---
#![no_std]
extern crate alloc;

use alloc::string::String;
use near_da_primitives::Mode;
pub use near_da_primitives::{Blob, BlobRef, Namespace};
use serde::{Deserialize, Serialize};

#[derive(Serialize, Deserialize, PartialEq, Clone, Debug)]
pub struct ConfigureClientRequest {
    pub account_id: String,
    pub secret_key: String,
    pub contract_id: String,
    pub network: String,
    pub namespace: Option<Namespace>,
    pub mode: Option<Mode>,
}

'''
'''--- crates/primitives/Cargo.toml ---
[package]
authors.workspace = true
edition.workspace = true
name              = "near-da-primitives"
version.workspace = true

[dependencies]
borsh      = { workspace = true }
serde      = { workspace = true }
serde_with = { workspace = true }

[dev-dependencies]
hex = { workspace = true }

[features]
default = [ "std" ]
std     = [ "serde_with/std", "serde/std", "borsh/std" ]

'''
'''--- crates/primitives/src/lib.rs ---
#![cfg_attr(not(feature = "std"), no_std)]

extern crate alloc;

use borsh::{BorshDeserialize, BorshSerialize};
use serde::{Deserialize, Serialize};
use serde_with::serde_as;

use core::ops::Deref;

pub type Data = alloc::vec::Vec<u8>;
pub type ShareVersion = u32;
pub type Commitment = [u8; 32];
pub type BlockHeight = u64;

/// The namespace is a reference to who is submitting blobs, it will be considered
/// important in the blob registry. This allows users not familiar with NEAR to use a shared
/// contract, with shared proving capabilities.
///
/// TODO: optional namespace for users who submit their own blobs to their own contract
#[derive(
    Clone,
    Copy,
    BorshSerialize,
    BorshDeserialize,
    Ord,
    PartialOrd,
    Eq,
    PartialEq,
    Default,
    Serialize,
    Deserialize,
    Debug,
)]
pub struct Namespace {
    pub version: u8,
    pub id: u32,
}

impl Namespace {
    pub fn new(version: u8, id: u32) -> Self {
        Self { version, id }
    }
}

#[serde_as]
#[derive(Deserialize, Serialize, BorshSerialize, BorshDeserialize, Clone, Debug)]
#[cfg_attr(test, derive(PartialEq, Eq))]
pub struct Blob {
    #[serde_as(as = "serde_with::hex::Hex")]
    pub data: Data,
}

impl Blob {
    pub fn new(data: Data) -> Self {
        Self { data }
    }
}

impl From<Data> for Blob {
    fn from(data: Data) -> Self {
        Self { data }
    }
}

impl From<LegacyBlob> for Blob {
    fn from(legacy_blob: LegacyBlob) -> Self {
        Self {
            data: legacy_blob.data,
        }
    }
}

#[serde_as]
#[derive(Deserialize, Serialize, BorshSerialize, BorshDeserialize, Clone, Debug)]
#[cfg_attr(test, derive(PartialEq, Eq))]
pub struct LegacyBlob {
    pub namespace: Namespace,
    pub share_version: u32,
    #[serde_as(as = "serde_with::hex::Hex")]
    pub commitment: [u8; 32],
    #[serde_as(as = "serde_with::hex::Hex")]
    pub data: Data,
}

#[serde_as]
#[cfg_attr(test, derive(PartialEq, Eq))]
#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct BlobRef {
    #[serde_as(as = "serde_with::hex::Hex")]
    pub transaction_id: [u8; 32],
}

impl From<[u8; 32]> for BlobRef {
    fn from(transaction_id: [u8; 32]) -> Self {
        Self { transaction_id }
    }
}

pub const BLOB_REF_SIZE: usize = 32;

impl BlobRef {
    pub fn new(transaction_id: [u8; BLOB_REF_SIZE]) -> Self {
        Self { transaction_id }
    }
}

impl Deref for BlobRef {
    type Target = [u8; BLOB_REF_SIZE];
    fn deref(&self) -> &Self::Target {
        &self.transaction_id
    }
}

#[serde_with::serde_as]
#[derive(Serialize, Deserialize, BorshSerialize, BorshDeserialize, PartialEq, Clone, Debug)]
pub struct SubmitRequest {
    pub namespace: Option<Namespace>,
    #[serde_as(as = "serde_with::hex::Hex")]
    pub data: Vec<u8>,
}

#[derive(Serialize, Deserialize, PartialEq, Clone, Debug, Default)]
#[serde(rename_all = "lowercase")]
pub enum Mode {
    /// Wait for
    /// - Inclusion in the block, but not finalized
    Optimistic,
    /// Wait for
    /// - Transaction execution, but additional receipts/refunds were not included
    Standard,
    /// Wait for
    /// - Inclusion in the block
    /// - Execution of the blob (even though theres no execution)
    /// - All other shards execute
    #[default]
    Pessimistic,
}

impl From<&str> for Mode {
    fn from(s: &str) -> Self {
        match s.to_lowercase().as_str() {
            "optimistic" => Mode::Optimistic,
            "standard" => Mode::Standard,
            "pessimistic" => Mode::Pessimistic,
            _ => Mode::Pessimistic,
        }
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_format() {
        let frame_ref = BlobRef::new([2u8; BLOB_REF_SIZE]);
        assert_eq!(
            *frame_ref,
            [
                2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
                2, 2, 2, 2
            ],
            "FrameRef::to_celestia_format() should return 40 bytes array"
        );
    }
}

'''
'''--- docker-compose.yml ---

networks:
  default:
    name: nearda 

services:
  near-da-sidecar:
    container_name: near-da-sidecar
    image: ghcr.io/near/rollup-data-availability/http-api:dev
    # build:
    #   context: .
    #   dockerfile: bin/http-api/Dockerfile
    restart: unless-stopped
    depends_on:
      - near-localnet
    environment:
      - RUST_LOG=debug
    volumes:
      - ./test/http-sidecar.json:/app/config.json
    command:
      - -c
      - /app/config.json
    ports:
      - 5888:5888

  near-localnet-set-key:
    container_name: near-localnet-set-key
    build:
      context: ./test
      dockerfile: sandbox.Dockerfile
    volumes:
      - near-sandbox-data:/root/.near
      - ./test/http-sidecar.json:/config.json
    entrypoint:
      - bash
      - -c
      - sed "s/HTTP_API_TEST_SECRET_KEY/`cat /root/.near/validator_key.json | jq -r '.secret_key'`/g" /config.json > /config2.json && cp /config2.json /config.json

  near-localnet:
    container_name: near-localnet
    build:
      context: ./test
      dockerfile: sandbox.Dockerfile
    volumes:
      - near-sandbox-data:/root/.near
    ports:
      - 3030:3030

volumes:
  near-sandbox-data:
 

'''
'''--- docs/README.md ---
# NEAR Data Availability architecture docs

For our architecture docs, we make use of [mermaid](https://mermaid.js.org/intro/).
It's a simple and easy to use architecture-as-code software, with an online editor and various plugins.
Gihub also supports this out of the box within mermaid code blocks.

'''
'''--- docs/da_rpc_client.md ---
# DA RPC Client 

The below diagrams outline how a rollup will interact with DA depending on their architecture.

## Rust

```mermaid 
classDiagram 
class DaRpcClient
class Blob {
    +Namespace namespace
    +bytes32 commitment
    +bytes data
}
class Namespace {
    +u8 version
    +u32 id
}
class FrameRef {
    +bytes32 tx_id
    +bytes32 commitment
}

class DaRpc {
    <<interface>>
    +submit(List~Blob~) FrameRef
    +get(tx_id)
}

DaRpc <|-- DaRpcClient : implements
DaRpc >-- Rollup : submit blobs
DaRpc >-- Rollup : get blobs

class L1 {
    postCommitment()
    verifySequence()
}
L1 >-- Rollup : post frameRef with commitments
```

## Golang, or anything CFFI compatible 

This diagram outlines how rollups written in golang would interact with the go rpc client.

```mermaid 
classDiagram 
class Blob{
    +Namespace namespace
    +bytes32 commitment
    +bytes data
}

class Namespace {
    +u8 version
    +u32 id
}

class FrameRef {
    +bytes32 tx_id
    +bytes32 commitment
}

class DaRpcClient

class DaRpc{
    <<interface>>
    +submit(List~Blob~) FrameRef
    +get(tx_id)
}

class DaRpcSys{
    +new_client(account, sk, contract, network, namespace)
    +submit(*client, blobs) frame
    +get(*client, tx_id)
}

class DaRpcGo {
    +newConfig(account, contract, key, namespaceId) Config
    +submit(*Config, candidate, data) FrameRef
    +force_submit(*Config, data) FrameRef
    +get(*Config, FrameRef frameRef, txIndex)
}

DaRpc <|-- DaRpcClient : implements
DaRpc >-- DaRpcSys : uses
DaRpcSys >-- DaRpcGo : uses

DaRpcGo >-- GoRollup : submit blobs
DaRpcGo >-- GoRollup : get blobs

class L1 {
    postCommitment()
    verifySequence()
}
L1 >-- GoRollup : post frameRef with commitments
```

'''
'''--- docs/optimisim_containers.md ---
# Container diagram for optimism

```mermaid 
C4Container
    title NEAR Data Availability System Containers for Optimism
    
    Enterprise_Boundary(b3, "NEAR") {
        System_Ext(SystemNear, "NEAR")     
    }

    Enterprise_Boundary(b1, "Ethereum") {
        Component(L2Output, "L2 Output Oracle")        
    }     

    
    Container_Boundary(b2, "Rollup") {
        Component(DaClient, "NEAR DA Client", "Submits/Gets blob data, creates commitments")

        Container(Proposer, "Proposer", "Propose L2 outputs and DA commitments")
        Container(Batcher, "Batcher", "Create frame channels and send batches")
        Container(Sequencer, "Sequencer", "Derives blocks, execute transactions")

    }
        
    Rel_U(DaClient, SystemNear, "Submit/Get blob data")
    Rel(Batcher, DaClient, "Post batches")
    Rel(Sequencer, DaClient, "Retrieve Blobs")
    BiRel(Batcher, Sequencer, "Write FrameRef")

    Rel(Proposer, Sequencer, "Reads L2 outputs and FrameRef")
    Rel_D(Proposer, L2Output, "FrameRef") 
    
    UpdateLayoutConfig($c4ShapeInRow="2", $c4BoundaryInRow="2")

    System_Ext(FraudProofs, "Fraud proving mechanism")
```

'''
'''--- docs/system_context.md ---
# System context

This outlines the system components that we build and how it interacts with external components.

Red lines denote external flow of commitments.
White lines denote flow of blob data.

Note: "fisherman" is just an example how a rollup can work with the light client in the initial stage of DA, until we implement a more non-interactive approach, such as KZG.

```mermaid 
C4Context
    title NEAR Data Availability System Context

    Enterprise_Boundary(b1, "Ethereum") {
        System_Ext(SystemEth, "Ethereum")

        System_Boundary(b2, "Rollup") {
            System_Ext(SystemRollup, "Rollup", "Derives blocks, execute transactions, posts commitments & sequence data")
            System(SystemNearDa, "NEAR DA Client", "Submits/Gets blob data, creates commitments")
        }
        BiRel(SystemRollup, SystemEth, "Posts sequences, proofs of execution, DA frame references")
        BiRel(SystemRollup, SystemNearDa, "Post batches, retrieves commitments")
        Rel(fisherman, SystemEth, "Looks for commitments, posts results")
    }      
    
    Enterprise_Boundary(b0, "NEAR") {
        
        System(SystemLc, "Light Client", "Syncs headers, provides inclusion proofs")
        System(SystemNear, "NEAR Protocol", "NEAR validators, archival nodes")
        
        Rel(SystemLc, SystemNear, "Syncs headers")    
        Rel(SystemNearDa, SystemNear, "Submits/Gets blob")

        %% This doesn't exist yet
        %% System(SystemDas, "Data Availability Sampling", "Data redundancy, retrieval, sample responses")
        %% BiRel(SystemDas, SystemLc, "Commitments")
    }
     
    Person_Ext(fisherman, "Fisherman")
    Rel(fisherman, SystemLc, "Requests inclusion proofs, validates inclusion proofs")
      

    UpdateRelStyle(fisherman, SystemEth, $offsetY="-10" $lineColor="red")
    UpdateRelStyle(fisherman, SystemLc, $offsetY="-10", $lineColor="red")
    UpdateRelStyle(SystemRollup, SystemEth, $offsetY="-30", $lineColor="white")
    UpdateElementStyle(fisherman, $bgColor="grey", $borderColor="red")

    UpdateRelStyle(SystemRollup, SystemNearDa, $offsetX="-200", $lineColor="white", $textColor="white")
    UpdateRelStyle(SystemNearDa, SystemNear, $textColor="white", $lineColor="white", $offsetY="10")
    UpdateRelStyle(SystemNearLc, SystemNear, $offsetX="30")
```

'''
'''--- docs/test.md ---
```mermaid
classDiagram
Class01 <|-- AveryLongClass : Cool
Class03 *-- Class04
Class05 o-- Class06
Class07 .. Class08
Class09 --> C2 : Where am i?
Class09 --* C3
Class09 --|> Class07
Class07 : equals()
Class07 : Object[] elementData
Class01 : size()
Class01 : int chimp
Class01 : int gorilla
Class08 <--> C2: Cool label
```

'''
'''--- eth/.prettierrc.yml ---
bracketSpacing: true
printWidth: 120
proseWrap: "always"
singleQuote: false
tabWidth: 2
trailingComma: "all"
useTabs: false

'''
'''--- eth/.solhint.json ---
{
  "extends": "solhint:recommended",
  "rules": {
    "code-complexity": ["error", 8],
    "compiler-version": ["error", ">=0.8.25"],
    "func-name-mixedcase": "off",
    "func-visibility": ["error", { "ignoreConstructors": true }],
    "max-line-length": ["error", 120],
    "named-parameters-mapping": "warn",
    "no-console": "off",
    "not-rely-on-time": "off",
    "one-contract-per-file": "off"
  }
}

'''
'''--- eth/README.md ---
If this is your first time with Foundry, check out the
[installation](https://github.com/foundry-rs/foundry#installation) instructions.

## Features

This template builds upon the frameworks and libraries mentioned above, so please consult their respective documentation
for details about their specific features.

For example, if you're interested in exploring Foundry in more detail, you should look at the
[Foundry Book](https://book.getfoundry.sh/). In particular, you may be interested in reading the
[Writing Tests](https://book.getfoundry.sh/forge/writing-tests.html) tutorial.

### Sensible Defaults

This template comes with a set of sensible default configurations for you to use. These defaults can be found in the
following files:

```text
â”œâ”€â”€ .editorconfig
â”œâ”€â”€ .gitignore
â”œâ”€â”€ .prettierignore
â”œâ”€â”€ .prettierrc.yml
â”œâ”€â”€ .solhint.json
â”œâ”€â”€ foundry.toml
â””â”€â”€ remappings.txt
```

### VSCode Integration

This template is IDE agnostic, but for the best user experience, you may want to use it in VSCode alongside Nomic
Foundation's [Solidity extension](https://marketplace.visualstudio.com/items?itemName=NomicFoundation.hardhat-solidity).

For guidance on how to integrate a Foundry project in VSCode, please refer to this
[guide](https://book.getfoundry.sh/config/vscode).

### GitHub Actions

This template comes with GitHub Actions pre-configured. Your contracts will be linted and tested on every push and pull
request made to the `main` branch.

You can edit the CI script in [.github/workflows/ci.yml](./.github/workflows/ci.yml).

## Installing Dependencies

Foundry typically uses git submodules to manage dependencies, but this template uses Node.js packages because
[submodules don't scale](https://twitter.com/PaulRBerg/status/1736695487057531328).

This is how to install dependencies:

1. Install the dependency using your preferred package manager, e.g. `bun install dependency-name`
   - Use this syntax to install from GitHub: `bun install github:username/repo-name`
2. Add a remapping for the dependency in [remappings.txt](./remappings.txt), e.g.
   `dependency-name=node_modules/dependency-name`

Note that OpenZeppelin Contracts is pre-installed, so you can follow that as an example.

## Writing Tests

To write a new test contract, you start by importing [PRBTest](https://github.com/PaulRBerg/prb-test) and inherit from
it in your test contract. PRBTest comes with a pre-instantiated [cheatcodes](https://book.getfoundry.sh/cheatcodes/)
environment accessible via the `vm` property. If you would like to view the logs in the terminal output you can add the
`-vvv` flag and use [console.log](https://book.getfoundry.sh/faq?highlight=console.log#how-do-i-use-consolelog).

This template comes with an example test contract [Foo.t.sol](./test/Foo.t.sol)

## Usage

This is a list of the most frequently needed commands.

### Build

Build the contracts:

```sh
$ forge build
```

### Clean

Delete the build artifacts and cache directories:

```sh
$ forge clean
```

### Compile

Compile the contracts:

```sh
$ forge build
```

### Coverage

Get a test coverage report:

```sh
$ forge coverage
```

### Deploy

Deploy to Anvil:

```sh
$ forge script script/Deploy.s.sol --broadcast --fork-url http://localhost:8545
```

For this script to work, you need to have a `MNEMONIC` environment variable set to a valid
[BIP39 mnemonic](https://iancoleman.io/bip39/).

For instructions on how to deploy to a testnet or mainnet, check out the
[Solidity Scripting](https://book.getfoundry.sh/tutorials/solidity-scripting.html) tutorial.

### Format

Format the contracts:

```sh
$ forge fmt
```

### Gas Usage

Get a gas report:

```sh
$ forge test --gas-report
```

### Lint

Lint the contracts:

```sh
$ bun run lint
```

### Test

Run the tests:

```sh
$ forge test
```

Generate test coverage and output result to the terminal:

```sh
$ bun run test:coverage
```

Generate test coverage with lcov report (you'll have to open the `./coverage/index.html` file in your browser, to do so
simply copy paste the path):

```sh
$ bun run test:coverage:report
```

## Related Efforts

- [abigger87/femplate](https://github.com/abigger87/femplate)
- [cleanunicorn/ethereum-smartcontract-template](https://github.com/cleanunicorn/ethereum-smartcontract-template)
- [foundry-rs/forge-template](https://github.com/foundry-rs/forge-template)
- [FrankieIsLost/forge-template](https://github.com/FrankieIsLost/forge-template)

## License

This project is licensed under MIT.

'''
'''--- eth/foundry.toml ---
# Full reference https://github.com/foundry-rs/foundry/tree/master/crates/config

[profile.default]
auto_detect_solc = false
block_timestamp  = 1_680_220_800 # March 31, 2023 at 00:00 GMT
bytecode_hash    = "none"
evm_version      = "paris" # See https://www.evmdiff.com/features?name=PUSH0&kind=opcode
fuzz             = { runs = 1_000 }
gas_reports      = [ "*" ]
libs             = [ "node_modules", "lib" ]
optimizer        = true
optimizer_runs   = 10_000
out              = "out"
script           = "script"
solc             = "0.8.25"
src              = "src"
test             = "test"

[profile.ci]
fuzz      = { runs = 10_000 }
verbosity = 4

# [etherscan]
# arbitrum        = { key = "${API_KEY_ARBISCAN}" }
# avalanche       = { key = "${API_KEY_SNOWTRACE}" }
# bnb_smart_chain = { key = "${API_KEY_BSCSCAN}" }
# gnosis_chain    = { key = "${API_KEY_GNOSISSCAN}" }
# goerli          = { key = "${API_KEY_ETHERSCAN}" }
# mainnet         = { key = "${API_KEY_ETHERSCAN}" }
# optimism        = { key = "${API_KEY_OPTIMISTIC_ETHERSCAN}" }
# polygon         = { key = "${API_KEY_POLYGONSCAN}" }
# sepolia         = { key = "${API_KEY_ETHERSCAN}" }

[fmt]
bracket_spacing       = true
int_types             = "long"
line_length           = 120
multiline_func_header = "all"
number_underscore     = "thousands"
quote_style           = "double"
tab_width             = 4
wrap_comments         = true

[rpc_endpoints]
arbitrum        = "https://arbitrum-mainnet.infura.io/v3/${API_KEY_INFURA}"
avalanche       = "https://avalanche-mainnet.infura.io/v3/${API_KEY_INFURA}"
bnb_smart_chain = "https://bsc-dataseed.binance.org"
gnosis_chain    = "https://rpc.gnosischain.com"
goerli          = "https://goerli.infura.io/v3/${API_KEY_INFURA}"
local           = "http://localhost:8545"
locall2         = "http://localhost:8125"
mainnet         = "https://eth-mainnet.g.alchemy.com/v2/${API_KEY_ALCHEMY}"
optimism        = "https://optimism-mainnet.infura.io/v3/${API_KEY_INFURA}"
polygon         = "https://polygon-mainnet.infura.io/v3/${API_KEY_INFURA}"
sepolia         = "https://sepolia.infura.io/v3/${API_KEY_INFURA}"

'''
'''--- eth/package.json ---
{
  "name": "@near/rollup-data-availability",
  "description": "",
  "version": "1.0.0",
  "author": {
    "name": "dndll",
    "url": "https://github.com/dndll"
  },
  "dependencies": {
    "@0xpolygonhermez/zkevm-contracts": "github.com:0xPolygonHermez/zkevm-contracts",
    "@openzeppelin/contracts": "^5.0.2",
    "@openzeppelin/contracts-upgradeable": "^5.0.1",
    "solady": "^0.0.191"
  },
  "devDependencies": {
    "@prb/test": "^0.6.4",
    "forge-std": "github:foundry-rs/forge-std#v1.7.5",
    "prettier": "^3.0.0",
    "solhint": "^3.6.2"
  },
  "keywords": [
    "blockchain",
    "ethereum",
    "forge",
    "foundry",
    "smart-contracts",
    "solidity",
    "template"
  ],
  "private": true,
  "scripts": {
    "clean": "rm -rf cache out",
    "build": "forge build",
    "lint": "bun run lint:sol && bun run prettier:check",
    "lint:sol": "forge fmt --check && bun solhint {script,src,test}/**/*.sol",
    "fix": "forge fmt . && bun run lint:sol --fix && bun run prettier:write",
    "prettier:check": "prettier --check \"**/*.{json,md,yml}\" --ignore-path \".prettierignore\"",
    "prettier:write": "prettier --write \"**/*.{json,md,yml}\" --ignore-path \".prettierignore\"",
    "test": "forge test",
    "test:coverage": "forge coverage",
    "test:coverage:report": "forge coverage --report lcov && genhtml lcov.info --branch-coverage --output-dir coverage"
  }
}

'''
'''--- eth/remappings.txt ---
@openzeppelin/contracts-upgradeable/=node_modules/@openzeppelin/contracts-upgradeable/
@openzeppelin/contracts/=node_modules/@openzeppelin/contracts/
@prb/test/=node_modules/@prb/test/
forge-std/=node_modules/forge-std/
@polygon/zkevm-contracts/=node_modules/@0xpolygonhermez/zkevm-contracts/contracts/v2
@solady/=node_modules/solady/src/

'''
'''--- gopkg/da-rpc/README.md ---
# go-near

This library exposes a thin go module around `near-op-sys`. This enables DA capabilities with minimal intrusion.

'''
'''--- gopkg/da-rpc/lib/libnear_da_rpc_sys.h ---
#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>
#include <math.h>
#include <stdio.h>

#define VERSION 3

typedef struct Client Client;

typedef struct BlobSafe {
  const uint8_t *data;
  size_t len;
} BlobSafe;

typedef struct RustSafeArray {
  const uint8_t *data;
  size_t len;
} RustSafeArray;

char *get_error(void);

void clear_error(void);

/**
 * # Safety
 * null check the ptr
 */
void set_error(char *err);

/**
 * # Safety
 * we check if the pointer is null before attempting to free it
 */
void free_error(char *error);

/**
 * # Safety
 * We check if the pointers are null
 */
const struct Client *new_client_file(const char *key_path,
                                     const char *contract,
                                     const char *network,
                                     uint8_t namespace_version,
                                     uint32_t namespace_);

/**
 * # Safety
 * We check if the pointers are null
 */
const struct Client *new_client(const char *account_id,
                                const char *secret_key,
                                const char *contract,
                                const char *network,
                                uint8_t namespace_version,
                                uint32_t namespace_);

/**
 * # Safety
 * We check if the client is null
 */
void free_client(struct Client *client);

/**
 * # Safety
 * We check if the slices are null
 */
char *submit(const struct Client *client, const struct BlobSafe *blobs, size_t len);

/**
 * # Safety
 * We check if the slices are null and they should always be 32 bytes
 */
const struct BlobSafe *get(const struct Client *client, const uint8_t *transaction_id);

/**
 * # Safety
 * We check if the slices are null
 */
void free_blob(struct BlobSafe *blob);

/**
 * # Safety
 * We check if the slices are null
 */
const struct RustSafeArray *submit_batch(const struct Client *client,
                                         const char *candidate_hex,
                                         const uint8_t *tx_data,
                                         size_t tx_data_len);

'''
'''--- gopkg/da-rpc/near.go ---
package near

/*
#include "./lib/libnear_da_rpc_sys.h"
#include <stdlib.h>
*/
import "C"

import (
	"encoding"
	"errors"
	"fmt"
	"unsafe"

	sidecar "github.com/near/rollup-data-availability/gopkg/sidecar"

	log "github.com/sirupsen/logrus"
)

type Namespace struct {
	Version uint8
	Id      uint32
}

type Config struct {
	Namespace Namespace
	Client    *C.Client
}

var (
	ErrInvalidSize    = errors.New("NEAR DA unmarshal blob: invalid size")
	ErrInvalidNetwork = errors.New("NEAR DA client relative URL without a base")
)

// Framer defines a way to encode/decode a FrameRef.
type Framer interface {
	encoding.BinaryMarshaler
	encoding.BinaryUnmarshaler
}

// BlobRef contains the reference to the specific blob on near and
// satisfies the Framer interface.
type BlobRef struct {
	TxId []byte
}

var _ Framer = &BlobRef{}

// MarshalBinary encodes the Ref into a format that can be
// serialized.
func (f *BlobRef) MarshalBinary() ([]byte, error) {
	ref := make([]byte, sidecar.EncodedBlobRefSize)

	copy(ref[:sidecar.EncodedBlobRefSize], f.TxId)

	return ref, nil
}

func (f *BlobRef) UnmarshalBinary(ref []byte) error {
	if len(ref) != sidecar.EncodedBlobRefSize {
		log.Warn("invalid size ", len(ref), " expected ", sidecar.EncodedBlobRefSize)
		return ErrInvalidSize
	}
	f.TxId = ref[:sidecar.EncodedBlobRefSize]
	return nil
}

// Note, networkN value can be either Mainnet, Testnet
// or loopback address in [ip]:[port] format.
func NewConfig(accountN, contractN, keyN, networkN string, ns uint32) (*Config, error) {
	log.Info("creating NEAR client ", "\ncontract: ", contractN, "\nnetwork: ", networkN, "\nnamespace ", ns, "\naccount ", accountN)

	account := C.CString(accountN)
	defer C.free(unsafe.Pointer(account))

	key := C.CString(keyN)
	defer C.free(unsafe.Pointer(key))

	contract := C.CString(contractN)
	defer C.free(unsafe.Pointer(contract))

	network := C.CString(networkN)
	defer C.free(unsafe.Pointer(network))

	// Numbers don't need to be dellocated
	namespaceId := C.uint(ns)
	namespaceVersion := C.uint8_t(0)

	daClient := C.new_client(account, key, contract, network, namespaceVersion, namespaceId)
	if daClient == nil {
		err := GetDAError()
		if err != nil {
			return nil, err
		}
		return nil, errors.New("unable to create NEAR DA client")
	}

	return &Config{
		Namespace: Namespace{Version: 0, Id: ns},
		Client:    daClient,
	}, nil
}

// Note, networkN value can be either Mainnet, Testnet
// or loopback address in [ip]:[port] format.
func NewConfigFile(keyPathN, contractN, networkN string, ns uint32) (*Config, error) {
	keyPath := C.CString(keyPathN)
	defer C.free(unsafe.Pointer(keyPath))

	contract := C.CString(contractN)
	defer C.free(unsafe.Pointer(contract))

	network := C.CString(networkN)
	defer C.free(unsafe.Pointer(network))

	namespaceId := C.uint(ns)
	namespaceVersion := C.uint8_t(0)

	daClient := C.new_client_file(keyPath, contract, network, namespaceVersion, namespaceId)
	if daClient == nil {
		err := GetDAError()
		if err != nil {
			return nil, err
		}
		return nil, errors.New("unable to create NEAR DA client")
	}

	return &Config{
		Namespace: Namespace{Version: 0, Id: ns},
		Client:    daClient,
	}, nil
}

// Note, candidateHex has to be "0xfF00000000000000000000000000000000000000" for the
// data to be submitted in the case of other Rollups. If concerned, use ForceSubmit
func (config *Config) Submit(candidateHex string, data []byte) ([]byte, error) {

	candidateHexPtr := C.CString(candidateHex)
	defer C.free(unsafe.Pointer(candidateHexPtr))

	txBytes := C.CBytes(data)
	defer C.free(unsafe.Pointer(txBytes))

	maybeFrameRef := C.submit_batch(config.Client, candidateHexPtr, (*C.uint8_t)(txBytes), C.size_t(len(data)))

	err := GetDAError()
	if err != nil {
		return nil, err
	}

	log.Info("Submitting to NEAR",
		"maybeFrameData", maybeFrameRef,
		"candidate", candidateHex,
		"namespace", config.Namespace,
		"txLen", C.size_t(len(data)),
	)

	if maybeFrameRef.len > 1 {
		// Set the tx data to a frame reference
		frameData := C.GoBytes(unsafe.Pointer(maybeFrameRef.data), C.int(maybeFrameRef.len))
		log.Debug("NEAR frame data", frameData)
		return frameData, nil
	} else {
		log.Warn("no frame reference returned from NEAR, falling back to ethereum")
		return data, nil
	}
}

// Used by other rollups without candidate semantics, if you know for sure you want to submit the
// data to NEAR
func (config *Config) ForceSubmit(data []byte) ([]byte, error) {
	candidateHex := "0xfF00000000000000000000000000000000000000"
	return config.Submit(candidateHex, data)
}

func (config *Config) Get(frameRefBytes []byte, txIndex uint32) ([]byte, error) {
	frameRef := BlobRef{}
	err := frameRef.UnmarshalBinary(frameRefBytes)
	if err != nil {
		log.Warn("unable to decode frame reference", "index", txIndex, "err", err)
		return nil, err
	}

	log.Info("NEAR frame ref request", "frameRef", frameRef)

	txId := C.CBytes(frameRef.TxId)
	defer C.free(unsafe.Pointer(txId))

	blob := C.get((*C.Client)(config.Client), (*C.uint8_t)(txId))
	defer C.free(unsafe.Pointer(blob))

	if blob == nil {
		err := GetDAError()
		if err != nil {
			log.Warn("no data returned from near", "namespace", config.Namespace, "height", frameRef.TxId)
			return nil, err
		}
	} else {
		log.Info("NEAR data retrieved", "namespace", config.Namespace, "height", frameRef.TxId)
	}

	return ToBytes(blob), nil
}

func (config *Config) FreeClient() {
	C.free_client((*C.Client)(config.Client))
	config.Client = nil
}

func NewBlobSafe(data []byte) *C.BlobSafe {
	blob := C.BlobSafe{
		data: (*C.uint8_t)(C.CBytes(data)),
		len:  C.size_t(len(data)),
	}
	return &blob
}

func ToBytes(b *C.BlobSafe) []byte {
	return C.GoBytes(unsafe.Pointer(b.data), C.int(b.len))
}

func To32Bytes(ptr unsafe.Pointer) []byte {
	bytes := make([]byte, 32)
	copy(bytes, C.GoBytes(ptr, 32))

	return bytes
}

func GetDAError() (err error) {
	defer func() {
		if rErr := recover(); rErr != nil {
			err = fmt.Errorf("critical error from NEAR DA GetDAError: %v", rErr)
		}
	}()

	errData := C.get_error()

	if errData != nil {
		defer C.free(unsafe.Pointer(errData))

		errStr := C.GoString(errData)
		return fmt.Errorf("NEAR DA client %s", errStr)
	} else {
		return nil
	}
}

func TestSetError(msg string) {
	cmsg := C.CString(msg)
	defer C.free(unsafe.Pointer(cmsg))
	C.set_error(cmsg)
}

'''
'''--- gopkg/da-rpc/near_darwin.go ---
//go:build darwin

package near

//#cgo LDFLAGS: -L/usr/local/lib -lnear_da_rpc_sys -lm -framework SystemConfiguration -framework Security
import "C"

'''
'''--- gopkg/da-rpc/near_test.go ---
package near_test

import (
	"testing"
	"unsafe"

	near "github.com/near/rollup-data-availability/gopkg/da-rpc"
	sidecar "github.com/near/rollup-data-availability/gopkg/sidecar"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

var (
	stubKey  string = "ed25519:4dagBsEqCv3Ao5wa4KKFa57xNAH4wuBjh9wdTNYeCqDSeA9zE7fCnHSvWpU8t68jUpcCGqgfYwcH68suPaqmdcgm"
	localNet string = "http://127.0.0.1:3030"
	account  string = "test.near"
	contract string = "test.near"
)

func TestFrameRefMarshalBinary(t *testing.T) {
	id := make([]byte, 32)
	copy(id, []byte("11111111111111111111111111111111"))
	frameRef := near.BlobRef{
		TxId: id,
	}
	binary, err := frameRef.MarshalBinary()
	if err != nil {
		t.Error(err)
	}
	if len(binary) != sidecar.EncodedBlobRefSize {
		t.Error("Expected binary length to be 64")
	}
	if string(binary[:sidecar.EncodedBlobRefSize]) != string(id) {
		t.Error("Expected id to be equal")
	}
}

func TestFrameRefUnmarshalBinary(t *testing.T) {
	bytes := make([]byte, sidecar.EncodedBlobRefSize)
	copy(bytes, []byte("1111111111111111111111111111111122222222222222222222222222222222"))
	blobRef := near.BlobRef{}
	err := blobRef.UnmarshalBinary(bytes)
	if err != nil {
		t.Error(err)
	}
	if string(blobRef.TxId) != "11111111111111111111111111111111" {
		t.Error("Expected id to be equal")
	}
}

func TestNewConfig(t *testing.T) {
	accountN := "testaccount"
	contractN := "testcontract"
	keyN := "testkey"
	networkN := "Testnet"
	ns := uint32(123)

	config, err := near.NewConfig(accountN, contractN, keyN, networkN, ns)

	assert.NoError(t, err)
	assert.NotNil(t, config)
	assert.Equal(t, near.Namespace{Version: 0, Id: ns}, config.Namespace)
	assert.NotNil(t, config.Client)

	println(config)
	if config.Namespace.Id != ns {
		t.Error("Expected namespace id to be equal")
	}
	if config.Namespace.Version != 0 {
		t.Error("Expected namespace version to be equal")
	}

	// Test error cases
	_, err = near.NewConfig(accountN, contractN, keyN, "InvalidNetwork", ns)
	assert.Error(t, err)
	assert.Equal(t, near.ErrInvalidNetwork, err)
}

func TestNewConfigFile(t *testing.T) {
	keyPathN := "testkey.json"
	contractN := "testcontract"
	networkN := "http://127.0.0.1:3030"
	ns := uint32(1)

	config, err := near.NewConfigFile(keyPathN, contractN, networkN, ns)
	assert.NoError(t, err)
	assert.NotNil(t, config)
	assert.Equal(t, near.Namespace{Version: 0, Id: ns}, config.Namespace)
	assert.NotNil(t, config.Client)

	// Test error cases
	_, err = near.NewConfigFile(keyPathN, contractN, "InvalidNetwork", ns)
	require.Error(t, err)
	require.Equal(t, near.ErrInvalidNetwork, err)

	println(config)
	if config.Namespace.Id != 1 {
		t.Error("Expected namespace id to be equal")
	}
	if config.Namespace.Version != 0 {
		t.Error("Expected namespace version to be equal")
	}
}

func liveConfig(t *testing.T) *near.Config {
	config, err := near.NewConfig(account, contract, stubKey, localNet, 0)
	require.NotNil(t, config)
	require.NoError(t, err)
	return config
}

func TestFreeClient(t *testing.T) {
	config, _ := near.NewConfig(account, contract, stubKey, "Testnet", 1)
	config.FreeClient()
	assert.Nil(t, config.Client)
}

func TestLiveSubmitRetrieve(t *testing.T) {
	candidateHex := "0xfF00000000000000000000000000000000000000"
	data := []byte("test data")

	config := liveConfig(t)

	blobRef, err := config.Submit(candidateHex, data)
	require.NoError(t, err)
	require.NotEmpty(t, blobRef)

	txIndex := uint32(0)

	data, err = config.Get(blobRef, txIndex)
	assert.NoError(t, err)
	assert.NotEmpty(t, data)
}

func TestLiveForceSubmit(t *testing.T) {
	data := []byte("test data")

	config := liveConfig(t)

	frameData, err := config.ForceSubmit(data)
	assert.NoError(t, err)
	assert.NotEmpty(t, frameData)

	// Test error cases
	// TODO: Add test cases for error scenarios
}

func TestToBytes(t *testing.T) {
	b := []byte{1, 2, 3}
	blob := near.NewBlobSafe(b)
	bytes := near.ToBytes(blob)
	assert.Equal(t, b, bytes)
}

func TestTo32Bytes(t *testing.T) {
	data := []byte{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32}
	ptr := unsafe.Pointer(&data[0])

	bytes := near.To32Bytes(ptr)
	assert.Equal(t, data, bytes)
}

func TestGetDAError(t *testing.T) {
	// Test error case
	near.TestSetError("test error")
	err := near.GetDAError()
	assert.Error(t, err)
	assert.Contains(t, err.Error(), "test error")

	// // Test no error case
	err = near.GetDAError()
	assert.NoError(t, err)
}

'''
'''--- gopkg/da-rpc/near_unix.go ---
//go:build linux

package near

//#cgo LDFLAGS: -L/usr/local/lib -lnear_da_rpc_sys -lm
import "C"

'''
'''--- gopkg/sidecar/near.go ---
// Package sidecar provides a client for interacting with the Near Protocol Sidecar service.
//
// The sidecar service is responsible for submitting and retrieving data blobs to and from the Near blockchain.
// It acts as an intermediary between the application and the Near blockchain, abstracting away the complexities
// of interacting with the blockchain directly.
//
// Security Considerations:
// - The sidecar service should be running on a trusted host and port.
// - The host and port should be configurable and not hardcoded.
// - The client should verify the identity of the sidecar service using TLS certificates.
// - The client should validate and sanitize all input parameters to prevent injection attacks.
// - The client should handle errors gracefully and not leak sensitive information in error messages.
// - The client should use secure communication channels (e.g., HTTPS) to prevent eavesdropping and tampering.
// - The client should have proper authentication and authorization mechanisms to prevent unauthorized access.
//
// Usage:
//
// 1. Create a new client instance using the `NewClient` function, providing the host and configuration.
//
//	client, err := sidecar.NewClient("http://localhost:5888", &sidecar.ConfigureClientRequest{...})
//	if err != nil {
//	    // Handle error
//	}
//
// 2. Use the client to interact with the sidecar service.
//
//	// Submit a blob
//	blob := sidecar.Blob{Data: []byte("test_data")}
//	blobRef, err := client.SubmitBlob(blob)
//	if err != nil {
//	    // Handle error
//	}
//
//	// Get a blob
//	retrievedBlob, err := client.GetBlob(*blobRef)
//	if err != nil {
//	    // Handle error
//	}
//
// 3. Close the client when done.
//
//	client.Close()
package sidecar

import (
	"bytes"
	"encoding/hex"
	"encoding/json"
	"errors"
	"fmt"
	log "github.com/sirupsen/logrus"
	"net/http"
)

// Client represents a client for interacting with the Near Protocol Sidecar service.
type Client struct {
	client *http.Client
	host   string
	config *ConfigureClientRequest
}

// NewClient creates a new instance of the Near Protocol Sidecar client.
// It takes the host and configuration as parameters and returns a pointer to the client.
// If the host is empty, it defaults to "http://localhost:5888".
// The configuration can be nil, assuming the sidecar is set up outside of this package.
func NewClient(host string, config *ConfigureClientRequest) (*Client, error) {
	if host == "" {
		host = "http://localhost:5888"
	}
	client := &Client{
		client: &http.Client{},
		host:   host,
		config: config,
	}
	return client, client.Health()
}

// ConfigureClient configures the Near Protocol Sidecar client with the provided configuration.
// It sends a PUT request to the "/configure" endpoint with the configuration as JSON payload.
func (c *Client) ConfigureClient(req *ConfigureClientRequest) error {
	if req == nil {
		req = c.config
	}
	jsonData, err := json.Marshal(req)
	if err != nil {
		return fmt.Errorf("failed to marshal configure client request: %v", err)
	}

	httpReq, err := http.NewRequest(http.MethodPut, c.host+"/configure", bytes.NewBuffer(jsonData))
	if err != nil {
		return fmt.Errorf("failed to create configure client request: %v", err)
	}
	httpReq.Header.Set("Content-Type", "application/json")

	resp, err := c.client.Do(httpReq)
	if err != nil {
		return fmt.Errorf("failed to send configure client request: %v", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return fmt.Errorf("failed to configure client, status code: %d", resp.StatusCode)
	}

	return nil
}

// GetBlob retrieves a blob from the Near blockchain using the provided BlobRef.
// It sends a GET request to the "/blob" endpoint with the transaction ID as a query parameter.
func (c *Client) GetBlob(b BlobRef) (*Blob, error) {
	resp, err := c.client.Get(c.host + "/blob?transaction_id=" + b.ID())
	if err != nil {
		return nil, fmt.Errorf("failed to send get blob request: %v", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("failed to get blob, status code: %d", resp.StatusCode)
	}

	var blob Blob
	err = json.NewDecoder(resp.Body).Decode(&blob)
	if err != nil {
		return nil, fmt.Errorf("failed to decode blob response: %v", err)
	}

	return &blob, nil
}

// SubmitBlob submits a blob to the Near blockchain.
// It sends a POST request to the "/blob" endpoint with the blob data as JSON payload.
// The response contains the transaction ID of the submitted blob.
func (c *Client) SubmitBlob(b Blob) (*BlobRef, error) {
	if b.Data == nil {
		return nil, errors.New("blob data cannot be nil")
	}

	jsonData, err := b.MarshalJSON()
	if err != nil {
		return nil, fmt.Errorf("failed to marshal blob: %v", err)
	}
	log.Debug("near-sidecar: SubmitBlob json: ", jsonData)

	resp, err := c.client.Post(c.host+"/blob", "application/json", bytes.NewBuffer(jsonData))
	if err != nil {
		return nil, fmt.Errorf("failed to send submit blob request: %v", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("failed to submit blob, status code: %d", resp.StatusCode)
	}

	var blobRef BlobRef
	err = json.NewDecoder(resp.Body).Decode(&blobRef)
	if err != nil {
		return nil, fmt.Errorf("failed to decode transaction ID: %v", err)
	}

	return &blobRef, nil
}

// Health checks the health of the Near Protocol Sidecar service.
// It sends a GET request to the "/health" endpoint and expects a successful response.
func (c *Client) Health() error {
	resp, err := c.client.Get(c.host + "/health")
	if err != nil {
		return fmt.Errorf("failed to send health check request: %v", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return fmt.Errorf("health check failed, status code: %d", resp.StatusCode)
	}

	return nil
}

// Close closes the Near Protocol Sidecar client.
// It should be called when the client is no longer needed.
func (c *Client) Close() {
	// Perform any necessary cleanup or resource release
}

// BlobRef represents a reference to a blob on the Near blockchain.
type BlobRef struct {
	transactionID [EncodedBlobRefSize]byte
}

// EncodedBlobRefSize is the size of an encoded BlobRef in bytes.
const EncodedBlobRefSize = 32

// NewBlobRef creates a new BlobRef from the provided transaction ID.
// It returns an error if the transaction ID is not exactly 32 bytes.
func NewBlobRef(transactionID []byte) (*BlobRef, error) {
	if len(transactionID) != EncodedBlobRefSize {
		return nil, errors.New("invalid transaction ID length")
	}
	var ref BlobRef
	copy(ref.transactionID[:], transactionID)
	return &ref, nil
}

// Deref returns the transaction ID of the BlobRef.
func (r *BlobRef) Deref() []byte {
	return r.transactionID[:]
}

// ID returns the transaction ID of the BlobRef as a hex-encoded string.
func (r *BlobRef) ID() string {
	return hex.EncodeToString(r.transactionID[:])
}

// MarshalJSON marshals the BlobRef to JSON format.
// It encodes the transaction ID as a hex string.
func (r *BlobRef) MarshalJSON() ([]byte, error) {
	json, err := json.Marshal(struct {
		TransactionID string `json:"transaction_id"`
	}{
		TransactionID: r.ID(),
	})
	return json, err
}

// UnmarshalJSON unmarshals the BlobRef from JSON format.
// It decodes the transaction ID from a hex string.
func (r *BlobRef) UnmarshalJSON(data []byte) error {
	var aux struct {
		TransactionID string `json:"transaction_id"`
	}
	if err := json.Unmarshal(data, &aux); err != nil {
		return err
	}
	transactionID, err := hex.DecodeString(aux.TransactionID)
	if err != nil {
		return err
	}
	copy(r.transactionID[:], transactionID)
	return nil
}

// Blob represents a blob of data stored on the Near blockchain.
type Blob struct {
	Data []byte `json:"data"`
}

// MarshalJSON marshals the Blob to JSON format.
// It encodes the data as a hex string.
func (b *Blob) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		Data string `json:"data"`
	}{
		Data: hex.EncodeToString(b.Data),
	})
}

// UnmarshalJSON unmarshals the Blob from JSON format.
// It decodes the data from a hex string.
func (b *Blob) UnmarshalJSON(data []byte) error {
	var aux struct {
		Data string `json:"data"`
	}
	if err := json.Unmarshal(data, &aux); err != nil {
		return err
	}
	decodedData, err := hex.DecodeString(aux.Data)
	if err != nil {
		return err
	}
	b.Data = decodedData
	return nil
}

// Network represents a Near network.
type Network string

const (
	Mainnet  Network = "mainnet"
	Testnet  Network = "testnet"
	Localnet Network = "localnet"
)

// ConfigureClientRequest represents a request to configure the Near Protocol Sidecar client.
type ConfigureClientRequest struct {
	AccountID  string     `json:"account_id"`
	SecretKey  string     `json:"secret_key"`
	ContractID string     `json:"contract_id"`
	Network    Network    `json:"network"`
	Namespace  *Namespace `json:"namespace"`
}

// Namespace represents a namespace on the Near blockchain.
type Namespace struct {
	ID      int `json:"id"`
	Version int `json:"version"`
}

'''
'''--- gopkg/sidecar/near_test.go ---
package sidecar

import (
	"bytes"
	"encoding/hex"
	"encoding/json"
	"fmt"
	log "github.com/sirupsen/logrus"
	"os"
	"testing"
)

// TODO: setup the sidecar in tests
func initClient(t *testing.T) *Client {
	// Read the configuration from the "http-config.json" file
	configData, err := os.ReadFile("../../http-config.json")

	log.Debug("initClient configData ", string(configData))
	if err != nil {
		log.Warn("failed to read config file, using default config: ", err)
	}

	// Unmarshal the JSON data into a ConfigureClientRequest struct
	var conf ConfigureClientRequest
	err = json.Unmarshal(configData, &conf)
	if err != nil {
		panic(fmt.Errorf("failed to unmarshal config: %v", err))
	}

	client, err := NewClient("http://localhost:5888", &conf)
	if err != nil {
		t.Fatalf("failed to create client: %v", err)
	}
	err = client.ConfigureClient(&conf)
	if err != nil {
		log.Warn("failed to configure client, likely already configured: ", err)
	}
	return client
}

func TestGetInvalidBlob(t *testing.T) {
	client := initClient(t)
	defer client.Close()

	invalidTransactionID := []byte("invalid_transaction_id")
	log.Info("TestGetBlob invalidTransactionID ", invalidTransactionID)
	invalidBlobRef := &BlobRef{}
	log.Info("TestGetBlob invalidBlobRef ", invalidBlobRef)
	copy(invalidBlobRef.transactionID[:], invalidTransactionID)
	blob, err := client.GetBlob(*invalidBlobRef)
	log.Info("TestGetBlob invalidBlob ", blob)
	if err == nil {
		t.Fatal("expected an error but got none")
	}
	if blob != nil {
		t.Fatalf("expected nil blob but got %v", blob)
	}
}

func TestSubmitGetBlob(t *testing.T) {
	client := initClient(t)
	defer client.Close()

	// Test submitting a blob
	data := []byte("test_data")
	blob := &Blob{Data: data}
	log.Info("TestSubmitBlob blob ", blob)
	blobRef, err := client.SubmitBlob(*blob)
	log.Info("TestSubmitBlob blobRef ", blobRef)
	if err != nil {
		t.Fatalf("failed to submit blob: %v", err)
	}
	if blobRef == nil {
		t.Fatal("got nil blob reference")
	}

	// Test getting the submitted blob
	blob, err = client.GetBlob(*blobRef)
	if err != nil {
		t.Fatalf("failed to get blob: %v", err)
	}
	log.Info("TestGetBlob blob ", blob)
	if !bytes.Equal(blob.Data, data) {
		t.Fatalf("expected blob data %v but got %v", data, blob.Data)
	}

	// Test submitting an empty blob
	emptyBlob := Blob{}
	blobRef, err = client.SubmitBlob(emptyBlob)
	log.Info("TestSubmitBlob emptyBlob ", emptyBlob)
	if err == nil {
		t.Fatal("expected an error but got none")
	}
	if blobRef != nil {
		t.Fatalf("expected nil blob reference but got %v", blobRef)
	}
}

func TestHealth(t *testing.T) {
	client := initClient(t)
	defer client.Close()

	// Test checking the health of the service
	err := client.Health()
	if err != nil {
		t.Fatalf("health check failed: %v", err)
	}
}

func TestBlobMarshalUnmarshal(t *testing.T) {
	data := []byte("test_data")
	blob := Blob{Data: data}

	// Test marshaling the blob
	jsonData, err := blob.MarshalJSON()
	if err != nil {
		t.Fatalf("failed to marshal blob: %v", err)
	}

	// Test unmarshaling the blob
	var unmarshaled Blob
	err = unmarshaled.UnmarshalJSON(jsonData)
	if err != nil {
		t.Fatalf("failed to unmarshal blob: %v", err)
	}

	if !bytes.Equal(unmarshaled.Data, data) {
		t.Fatalf("unmarshaled blob data does not match original data")
	}
}

func TestNewBlobRefInvalidTransactionID(t *testing.T) {
	invalidTransactionID := []byte("invalid_transaction_id")
	_, err := NewBlobRef(invalidTransactionID)
	if err == nil {
		t.Fatal("expected an error but got none")
	}
}

func generateTransactionID(t *testing.T) []byte {

	hex, err := hex.DecodeString("5d0472abe8eef76f9a44a3695d584af4de6e2ddde82dabfa5c8f29e5aec1270d")
	log.Info("generateTransactionID hex ", hex)
	if err != nil {
		t.Errorf("Failed to decode hex string: %v", err)
	}

	blobRef, err := NewBlobRef(hex)
	log.Info("generateTransactionID blobRef", blobRef)
	if err != nil {
		t.Fatalf("failed to create blob reference: %v", err)
	}
	return blobRef.transactionID[:]
}

'''
'''--- http-config.template.json ---
{
  "account_id": "HTTP_API_TEST_ACCOUNT_ID",
  "secret_key": "HTTP_API_TEST_SECRET_KEY",
  "contract_id": "HTTP_API_TEST_ACCOUNT_ID",
  "network": "testnet",
  "namespace": HTTP_API_TEST_NAMESPACE 
}

'''
'''--- recipe.json ---
{
  "skeleton": {
    "manifests": [
      {
        "relative_path": "Cargo.toml",
        "contents": "[workspace]\nmembers = [\"bin/*\", \"crates/*\", \"contracts/*\"]\nresolver = \"2\"\n\n[workspace.dependencies]\nasync-trait = \"0.1\"\neyre = \"0.6\"\nfutures = \"0.3\"\nhex = \"0.4\"\nlog = \"0.4\"\nnear-crypto = \"0.17.0\"\nnear-jsonrpc-client = \"0.6.0\"\nnear-jsonrpc-primitives = \"0.17.0\"\nnear-primitives = \"0.17.0\"\nnear-sdk = \"4.0.0\"\nnear-sdk-contract-tools = \"1.0.1\"\nrand = \"0.8\"\nserde_json = \"1.0\"\ntracing = \"0.1\"\n\n[workspace.dependencies.borsh]\nversion = \"0.10.3\"\ndefault-features = false\n\n[workspace.dependencies.serde]\nversion = \"1.0\"\nfeatures = [\"derive\"]\ndefault-features = false\n\n[workspace.dependencies.serde_with]\nversion = \"3.4\"\nfeatures = [\"hex\", \"base64\", \"macros\"]\ndefault-features = false\n\n[workspace.dependencies.tracing-subscriber]\nversion = \"0.3\"\nfeatures = [\"env-filter\"]\n\n[workspace.package]\nedition = \"2021\"\nversion = \"0.0.1\"\nauthors = [\"Pagoda <hello@near.org>\"]\n\n[profile.release]\nopt-level = \"z\"\ndebug = false\nlto = true\ncodegen-units = 1\npanic = \"abort\"\noverflow-checks = true\n\n[profile.release.package]\n",
        "targets": []
      },
      {
        "relative_path": "bin/http-api/Cargo.toml",
        "contents": "bench = []\ntest = []\nexample = []\n\n[[bin]]\npath = \"src/main.rs\"\nname = \"near-da-http-api\"\ntest = true\ndoctest = true\nbench = true\ndoc = true\nplugin = false\nproc-macro = false\nharness = true\nrequired-features = []\n\n[package]\nname = \"near-da-http-api\"\nautobins = true\nautoexamples = true\nautotests = true\nautobenches = true\n\n[package.edition]\nworkspace = true\n\n[package.version]\nworkspace = true\n\n[package.authors]\nworkspace = true\n\n[dependencies]\nanyhow = \"1.0.75\"\naxum = \"0.6\"\nserde = \"1\"\nserde_json = \"1.0.108\"\n\n[dependencies.clap]\nversion = \"4.4\"\nfeatures = [\"derive\"]\n\n[dependencies.hex]\nworkspace = true\n\n[dependencies.near-da-http-api-data]\npath = \"../../crates/http-api-data\"\n\n[dependencies.near-da-primitives]\npath = \"../../crates/primitives\"\n\n[dependencies.near-da-rpc]\npath = \"../../crates/da-rpc\"\n\n[dependencies.tokio]\nversion = \"1\"\nfeatures = [\"full\"]\n\n[dependencies.tower-http]\nversion = \"0.4\"\nfeatures = [\"trace\"]\n\n[dependencies.tracing]\nworkspace = true\n\n[dependencies.tracing-subscriber]\nworkspace = true\n",
        "targets": [
          {
            "path": "src/main.rs",
            "kind": "Bin",
            "name": "near-da-http-api"
          }
        ]
      },
      {
        "relative_path": "contracts/blob-store/Cargo.toml",
        "contents": "bin = []\nbench = []\nexample = []\n\n[[test]]\npath = \"tests/tests.rs\"\nname = \"tests\"\ntest = true\ndoctest = true\nbench = true\ndoc = true\nplugin = false\nproc-macro = false\nharness = true\nrequired-features = []\n\n[package]\nname = \"near-da-blob-store\"\nautobins = true\nautoexamples = true\nautotests = true\nautobenches = true\n\n[package.edition]\nworkspace = true\n\n[package.version]\nworkspace = true\n\n[package.authors]\nworkspace = true\n\n[dependencies.borsh]\nworkspace = true\n\n[dependencies.near-sdk]\nworkspace = true\n\n[dependencies.uint]\nversion = \"0.9.3\"\ndefault-features = false\n\n[dev-dependencies]\nanyhow = \"1.0.75\"\ntokio = \"1.28\"\n\n[dev-dependencies.near-da-primitives]\npath = \"../../crates/primitives\"\ndefault-features = false\n\n[dev-dependencies.near-workspaces]\nversion = \"0.8.0\"\nfeatures = [\"unstable\"]\n\n[features]\ndefault = [\"std\"]\nstd = [\"near-da-primitives/std\", \"borsh/std\", \"uint/std\"]\n\n[lib]\ntest = true\ndoctest = true\nbench = true\ndoc = true\nplugin = false\nproc-macro = false\nharness = true\nrequired-features = []\ncrate-type = [\"cdylib\"]\n",
        "targets": [
          {
            "path": "src/lib.rs",
            "kind": {
              "Lib": {
                "is_proc_macro": false
              }
            },
            "name": "near-da-blob-store"
          },
          {
            "path": "tests/tests.rs",
            "kind": "Test",
            "name": "tests"
          }
        ]
      },
      {
        "relative_path": "crates/da-rpc/Cargo.toml",
        "contents": "bin = []\nbench = []\ntest = []\nexample = []\n\n[package]\nname = \"near-da-rpc\"\nautobins = true\nautoexamples = true\nautotests = true\nautobenches = true\n\n[package.edition]\nworkspace = true\n\n[package.version]\nworkspace = true\n\n[package.authors]\nworkspace = true\n\n[dependencies.async-trait]\nworkspace = true\n\n[dependencies.eyre]\nworkspace = true\n\n[dependencies.futures]\nworkspace = true\n\n[dependencies.near-crypto]\nworkspace = true\n\n[dependencies.near-da-primitives]\npath = \"../primitives\"\n\n[dependencies.near-jsonrpc-client]\nworkspace = true\n\n[dependencies.near-jsonrpc-primitives]\nworkspace = true\n\n[dependencies.near-primitives]\nworkspace = true\n\n[dependencies.serde]\nworkspace = true\ndefault-features = true\n\n[dependencies.serde_json]\nworkspace = true\n\n[dependencies.serde_with]\nworkspace = true\ndefault-features = true\n\n[dependencies.tokio]\nversion = \"1.0\"\nfeatures = [\"full\"]\n\n[dependencies.tracing]\nworkspace = true\n\n[dev-dependencies]\npretty_env_logger = \"*\"\ntracing-subscriber = \"*\"\n\n[build-dependencies]\ncbindgen = \"*\"\nwhich = \"*\"\n\n[lib]\npath = \"src/lib.rs\"\nname = \"near_da_rpc\"\ntest = true\ndoctest = true\nbench = true\ndoc = true\nplugin = false\nproc-macro = false\nharness = true\nrequired-features = []\ncrate-type = [\"rlib\"]\n",
        "targets": [
          {
            "path": "src/lib.rs",
            "kind": {
              "Lib": {
                "is_proc_macro": false
              }
            },
            "name": "near-da-rpc"
          }
        ]
      },
      {
        "relative_path": "crates/da-rpc-sys/Cargo.toml",
        "contents": "bin = []\nbench = []\ntest = []\nexample = []\n\n[package]\nname = \"near-da-rpc-sys\"\nbuild = \"build.rs\"\nautobins = true\nautoexamples = true\nautotests = true\nautobenches = true\n\n[package.edition]\nworkspace = true\n\n[package.version]\nworkspace = true\n\n[package.authors]\nworkspace = true\n\n[dependencies]\nanyhow = \"*\"\nffi_helpers = \"*\"\nlibc = \"*\"\nonce_cell = \"*\"\n\n[dependencies.da-rpc]\npath = \"../da-rpc\"\npackage = \"near-da-rpc\"\n\n[dependencies.openssl]\nversion = \"0.10\"\nfeatures = [\"vendored\"]\n\n[dependencies.tokio]\nversion = \"1.0\"\nfeatures = [\"full\"]\n\n[dev-dependencies]\npretty_env_logger = \"*\"\n\n[build-dependencies]\ncbindgen = \"*\"\nwhich = \"*\"\n\n[lib]\ntest = true\ndoctest = true\nbench = true\ndoc = true\nplugin = false\nproc-macro = false\nharness = true\nrequired-features = []\ncrate-type = [\"cdylib\", \"staticlib\"]\n",
        "targets": [
          {
            "path": "build.rs",
            "kind": "BuildScript",
            "name": "build-script-build"
          },
          {
            "path": "src/lib.rs",
            "kind": {
              "Lib": {
                "is_proc_macro": false
              }
            },
            "name": "near-da-rpc-sys"
          }
        ]
      },
      {
        "relative_path": "crates/http-api-data/Cargo.toml",
        "contents": "bin = []\nbench = []\ntest = []\nexample = []\n\n[package]\nname = \"near-da-http-api-data\"\nautobins = true\nautoexamples = true\nautotests = true\nautobenches = true\n\n[package.edition]\nworkspace = true\n\n[package.version]\nworkspace = true\n\n[package.authors]\nworkspace = true\n\n[dependencies]\nserde = \"1\"\n\n[dependencies.near-da-primitives]\npath = \"../primitives\"\nfeatures = [\"std\"]\ndefault-features = false\n\n[dependencies.serde_with]\nversion = \"3\"\nfeatures = [\"hex\", \"macros\"]\ndefault-features = false\n\n[lib]\npath = \"src/lib.rs\"\nname = \"near_da_http_api_data\"\ntest = true\ndoctest = true\nbench = true\ndoc = true\nplugin = false\nproc-macro = false\nharness = true\nrequired-features = []\ncrate-type = [\"rlib\"]\n",
        "targets": [
          {
            "path": "src/lib.rs",
            "kind": {
              "Lib": {
                "is_proc_macro": false
              }
            },
            "name": "near-da-http-api-data"
          }
        ]
      },
      {
        "relative_path": "crates/primitives/Cargo.toml",
        "contents": "bin = []\nbench = []\ntest = []\nexample = []\n\n[package]\nname = \"near-da-primitives\"\nautobins = true\nautoexamples = true\nautotests = true\nautobenches = true\n\n[package.edition]\nworkspace = true\n\n[package.version]\nworkspace = true\n\n[package.authors]\nworkspace = true\n\n[dependencies.borsh]\nworkspace = true\n\n[dependencies.near-primitives]\noptional = true\nworkspace = true\n\n[dependencies.serde]\nworkspace = true\n\n[dependencies.serde_with]\nworkspace = true\n\n[dev-dependencies.hex]\nworkspace = true\n\n[features]\ncrypto = [\"near-primitives\"]\ndefault = [\"std\", \"crypto\"]\nstd = [\"serde_with/std\", \"serde/std\", \"borsh/std\"]\n\n[lib]\npath = \"src/lib.rs\"\nname = \"near_da_primitives\"\ntest = true\ndoctest = true\nbench = true\ndoc = true\nplugin = false\nproc-macro = false\nharness = true\nrequired-features = []\ncrate-type = [\"rlib\"]\n",
        "targets": [
          {
            "path": "src/lib.rs",
            "kind": {
              "Lib": {
                "is_proc_macro": false
              }
            },
            "name": "near-da-primitives"
          }
        ]
      }
    ],
    "config_file": "[build]\nrustflags = [\"-C\", \"link-args=-s\"]\n",
    "lock_file": "version = 3\n\n[[package]]\nname = \"Inflector\"\nversion = \"0.11.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fe438c63458706e03479442743baae6c88256498e6431708f6dfc520a26515d3\"\n\n[[package]]\nname = \"actix\"\nversion = \"0.13.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cba56612922b907719d4a01cf11c8d5b458e7d3dba946d0435f20f58d6795ed2\"\ndependencies = [\"actix-macros\", \"actix-rt\", \"actix_derive\", \"bitflags 2.4.1\", \"bytes\", \"crossbeam-channel\", \"futures-core\", \"futures-sink\", \"futures-task\", \"futures-util\", \"log\", \"once_cell\", \"parking_lot\", \"pin-project-lite\", \"smallvec\", \"tokio\", \"tokio-util 0.7.10\"]\n\n[[package]]\nname = \"actix-macros\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e01ed3140b2f8d422c68afa1ed2e85d996ea619c988ac834d255db32138655cb\"\ndependencies = [\"quote\", \"syn 2.0.39\"]\n\n[[package]]\nname = \"actix-rt\"\nversion = \"2.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"28f32d40287d3f402ae0028a9d54bef51af15c8769492826a69d28f81893151d\"\ndependencies = [\"futures-core\", \"tokio\"]\n\n[[package]]\nname = \"actix_derive\"\nversion = \"0.6.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7c7db3d5a9718568e4cf4a537cfd7070e6e6ff7481510d0237fb529ac850f6d3\"\ndependencies = [\"proc-macro2\", \"quote\", \"syn 2.0.39\"]\n\n[[package]]\nname = \"adler\"\nversion = \"1.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f26201604c87b1e01bd3d98f8d5d9a8fcbb815e8cedb41ffccbeb4bf593a35fe\"\n\n[[package]]\nname = \"aes\"\nversion = \"0.8.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ac1f845298e95f983ff1944b728ae08b8cebab80d684f0a832ed0fc74dfa27e2\"\ndependencies = [\"cfg-if 1.0.0\", \"cipher 0.4.4\", \"cpufeatures\"]\n\n[[package]]\nname = \"ahash\"\nversion = \"0.7.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5a824f2aa7e75a0c98c5a504fceb80649e9c35265d44525b5f94de4771a395cd\"\ndependencies = [\"getrandom 0.2.11\", \"once_cell\", \"version_check\"]\n\n[[package]]\nname = \"ahash\"\nversion = \"0.8.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"91429305e9f0a25f6205c5b8e0d2db09e0708a7a6df0f42212bb56c32c8ac97a\"\ndependencies = [\"cfg-if 1.0.0\", \"once_cell\", \"version_check\", \"zerocopy\"]\n\n[[package]]\nname = \"aho-corasick\"\nversion = \"1.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b2969dcb958b36655471fc61f7e416fa76033bdd4bfed0678d8fee1e2d07a1f0\"\ndependencies = [\"memchr\"]\n\n[[package]]\nname = \"android-tzdata\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e999941b234f3131b00bc13c22d06e8c5ff726d1b6318ac7eb276997bbb4fef0\"\n\n[[package]]\nname = \"android_system_properties\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"819e7219dbd41043ac279b19830f2efc897156490d7fd6ea916720117ee66311\"\ndependencies = [\"libc\"]\n\n[[package]]\nname = \"anstream\"\nversion = \"0.6.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2ab91ebe16eb252986481c5b62f6098f3b698a45e34b5b98200cf20dd2484a44\"\ndependencies = [\"anstyle\", \"anstyle-parse\", \"anstyle-query\", \"anstyle-wincon\", \"colorchoice\", \"utf8parse\"]\n\n[[package]]\nname = \"anstyle\"\nversion = \"1.0.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7079075b41f533b8c61d2a4d073c4676e1f8b249ff94a393b0595db304e0dd87\"\n\n[[package]]\nname = \"anstyle-parse\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"317b9a89c1868f5ea6ff1d9539a69f45dffc21ce321ac1fd1160dfa48c8e2140\"\ndependencies = [\"utf8parse\"]\n\n[[package]]\nname = \"anstyle-query\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5ca11d4be1bab0c8bc8734a9aa7bf4ee8316d462a08c6ac5052f888fef5b494b\"\ndependencies = [\"windows-sys\"]\n\n[[package]]\nname = \"anstyle-wincon\"\nversion = \"3.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f0699d10d2f4d628a98ee7b57b289abbc98ff3bad977cb3152709d4bf2330628\"\ndependencies = [\"anstyle\", \"windows-sys\"]\n\n[[package]]\nname = \"anyhow\"\nversion = \"1.0.75\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a4668cab20f66d8d020e1fbc0ebe47217433c1b6c8f2040faf858554e394ace6\"\n\n[[package]]\nname = \"arbitrary\"\nversion = \"1.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7d5a26814d8dcb93b0e5a0ff3c6d80a8843bafb21b39e8e18a6f05471870e110\"\ndependencies = [\"derive_arbitrary\"]\n\n[[package]]\nname = \"arrayref\"\nversion = \"0.3.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6b4930d2cb77ce62f89ee5d5289b4ac049559b1c45539271f5ed4fdc7db34545\"\n\n[[package]]\nname = \"arrayvec\"\nversion = \"0.5.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"23b62fc65de8e4e7f52534fb52b0f3ed04746ae267519eef2a83941e8085068b\"\n\n[[package]]\nname = \"arrayvec\"\nversion = \"0.7.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"96d30a06541fbafbc7f82ed10c06164cfbd2c401138f6addd8404629c4b16711\"\n\n[[package]]\nname = \"async-stream\"\nversion = \"0.3.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cd56dd203fef61ac097dd65721a419ddccb106b2d2b70ba60a6b529f03961a51\"\ndependencies = [\"async-stream-impl\", \"futures-core\", \"pin-project-lite\"]\n\n[[package]]\nname = \"async-stream-impl\"\nversion = \"0.3.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"16e62a023e7c117e27523144c5d2459f4397fcc3cab0085af8e2224f643a0193\"\ndependencies = [\"proc-macro2\", \"quote\", \"syn 2.0.39\"]\n\n[[package]]\nname = \"async-trait\"\nversion = \"0.1.74\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a66537f1bb974b254c98ed142ff995236e81b9d0fe4db0575f46612cb15eb0f9\"\ndependencies = [\"proc-macro2\", \"quote\", \"syn 2.0.39\"]\n\n[[package]]\nname = \"atty\"\nversion = \"0.2.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d9b39be18770d11421cdb1b9947a45dd3f37e93092cbf377614828a319d5fee8\"\ndependencies = [\"hermit-abi 0.1.19\", \"libc\", \"winapi\"]\n\n[[package]]\nname = \"autocfg\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d468802bab17cbc0cc575e9b053f41e72aa36bfa6b7f55e3529ffa43161b97fa\"\n\n[[package]]\nname = \"axum\"\nversion = \"0.6.20\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3b829e4e32b91e643de6eafe82b1d90675f5874230191a4ffbc1b336dec4d6bf\"\ndependencies = [\"async-trait\", \"axum-core\", \"bitflags 1.3.2\", \"bytes\", \"futures-util\", \"http\", \"http-body\", \"hyper\", \"itoa\", \"matchit\", \"memchr\", \"mime\", \"percent-encoding\", \"pin-project-lite\", \"rustversion\", \"serde\", \"serde_json\", \"serde_path_to_error\", \"serde_urlencoded\", \"sync_wrapper\", \"tokio\", \"tower\", \"tower-layer\", \"tower-service\"]\n\n[[package]]\nname = \"axum-core\"\nversion = \"0.3.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"759fa577a247914fd3f7f76d62972792636412fbfd634cd452f6a385a74d2d2c\"\ndependencies = [\"async-trait\", \"bytes\", \"futures-util\", \"http\", \"http-body\", \"mime\", \"rustversion\", \"tower-layer\", \"tower-service\"]\n\n[[package]]\nname = \"base64\"\nversion = \"0.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b41b7ea54a0c9d92199de89e20e58d49f02f8e699814ef3fdf266f6f748d15c7\"\n\n[[package]]\nname = \"base64\"\nversion = \"0.13.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9e1b586273c5702936fe7b7d6896644d8be71e6314cfe09d3167c95f712589e8\"\n\n[[package]]\nname = \"base64\"\nversion = \"0.21.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"35636a1494ede3b646cc98f74f8e62c773a38a659ebc777a2cf26b9b74171df9\"\n\n[[package]]\nname = \"base64ct\"\nversion = \"1.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8c3c1a368f70d6cf7302d78f8f7093da241fb8e8807c05cc9e51a125895a6d5b\"\n\n[[package]]\nname = \"binary-install\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"93bff426ff93f3610dd2b946f3eb8cb2d1285ca8682834d43be531a3f93db2ff\"\ndependencies = [\"anyhow\", \"dirs-next\", \"flate2\", \"fs2\", \"hex\", \"is_executable\", \"siphasher\", \"tar\", \"ureq\", \"zip 0.6.6\"]\n\n[[package]]\nname = \"bitflags\"\nversion = \"1.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a\"\n\n[[package]]\nname = \"bitflags\"\nversion = \"2.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"327762f6e5a765692301e5bb513e0d9fef63be86bbc14528052b1cd3e6f03e07\"\n\n[[package]]\nname = \"bitvec\"\nversion = \"0.20.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7774144344a4faa177370406a7ff5f1da24303817368584c6206c8303eb07848\"\ndependencies = [\"funty 1.1.0\", \"radium 0.6.2\", \"tap\", \"wyz 0.2.0\"]\n\n[[package]]\nname = \"bitvec\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1bc2832c24239b0141d5674bb9174f9d68a8b5b3f2753311927c172ca46f7e9c\"\ndependencies = [\"funty 2.0.0\", \"radium 0.7.0\", \"tap\", \"wyz 0.5.1\"]\n\n[[package]]\nname = \"blake2\"\nversion = \"0.9.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0a4e37d16930f5459780f5621038b6382b9bb37c19016f39fb6b5808d831f174\"\ndependencies = [\"crypto-mac\", \"digest 0.9.0\", \"opaque-debug\"]\n\n[[package]]\nname = \"block-buffer\"\nversion = \"0.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4152116fd6e9dadb291ae18fc1ec3575ed6d84c29642d97890f4b4a3417297e4\"\ndependencies = [\"generic-array\"]\n\n[[package]]\nname = \"block-buffer\"\nversion = \"0.10.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3078c7629b62d3f0439517fa394996acacc5cbc91c5a20d8c658e77abd503a71\"\ndependencies = [\"generic-array\"]\n\n[[package]]\nname = \"borsh\"\nversion = \"0.9.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"15bf3650200d8bffa99015595e10f1fbd17de07abbc25bb067da79e769939bfa\"\ndependencies = [\"borsh-derive 0.9.3\", \"hashbrown 0.11.2\"]\n\n[[package]]\nname = \"borsh\"\nversion = \"0.10.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4114279215a005bc675e386011e594e1d9b800918cea18fcadadcce864a2046b\"\ndependencies = [\"borsh-derive 0.10.3\", \"hashbrown 0.13.2\"]\n\n[[package]]\nname = \"borsh\"\nversion = \"1.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bf617fabf5cdbdc92f774bfe5062d870f228b80056d41180797abf48bed4056e\"\ndependencies = [\"borsh-derive 1.2.0\", \"cfg_aliases\"]\n\n[[package]]\nname = \"borsh-derive\"\nversion = \"0.9.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6441c552f230375d18e3cc377677914d2ca2b0d36e52129fe15450a2dce46775\"\ndependencies = [\"borsh-derive-internal 0.9.3\", \"borsh-schema-derive-internal 0.9.3\", \"proc-macro-crate 0.1.5\", \"proc-macro2\", \"syn 1.0.109\"]\n\n[[package]]\nname = \"borsh-derive\"\nversion = \"0.10.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0754613691538d51f329cce9af41d7b7ca150bc973056f1156611489475f54f7\"\ndependencies = [\"borsh-derive-internal 0.10.3\", \"borsh-schema-derive-internal 0.10.3\", \"proc-macro-crate 0.1.5\", \"proc-macro2\", \"syn 1.0.109\"]\n\n[[package]]\nname = \"borsh-derive\"\nversion = \"1.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f404657a7ea7b5249e36808dff544bc88a28f26e0ac40009f674b7a009d14be3\"\ndependencies = [\"once_cell\", \"proc-macro-crate 2.0.0\", \"proc-macro2\", \"quote\", \"syn 2.0.39\", \"syn_derive\"]\n\n[[package]]\nname = \"borsh-derive-internal\"\nversion = \"0.9.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5449c28a7b352f2d1e592a8a28bf139bc71afb0764a14f3c02500935d8c44065\"\ndependencies = [\"proc-macro2\", \"quote\", \"syn 1.0.109\"]\n\n[[package]]\nname = \"borsh-derive-internal\"\nversion = \"0.10.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"afb438156919598d2c7bad7e1c0adf3d26ed3840dbc010db1a882a65583ca2fb\"\ndependencies = [\"proc-macro2\", \"quote\", \"syn 1.0.109\"]\n\n[[package]]\nname = \"borsh-schema-derive-internal\"\nversion = \"0.9.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cdbd5696d8bfa21d53d9fe39a714a18538bad11492a42d066dbbc395fb1951c0\"\ndependencies = [\"proc-macro2\", \"quote\", \"syn 1.0.109\"]\n\n[[package]]\nname = \"borsh-schema-derive-internal\"\nversion = \"0.10.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"634205cc43f74a1b9046ef87c4540ebda95696ec0f315024860cad7c5b0f5ccd\"\ndependencies = [\"proc-macro2\", \"quote\", \"syn 1.0.109\"]\n\n[[package]]\nname = \"brownstone\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"030ea61398f34f1395ccbeb046fb68c87b631d1f34567fed0f0f11fa35d18d8d\"\ndependencies = [\"arrayvec 0.7.4\"]\n\n[[package]]\nname = \"bs58\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"771fe0050b883fcc3ea2359b1a96bcfbc090b7116eae7c3c512c7a083fdf23d3\"\n\n[[package]]\nname = \"bs58\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f5353f36341f7451062466f0b755b96ac3a9547e4d7f6b70d603fc721a7d7896\"\ndependencies = [\"tinyvec\"]\n\n[[package]]\nname = \"bumpalo\"\nversion = \"3.14.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7f30e7476521f6f8af1a1c4c0b8cc94f0bee37d91763d0ca2665f299b6cd8aec\"\n\n[[package]]\nname = \"byte-slice-cast\"\nversion = \"1.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c3ac9f8b63eca6fd385229b3675f6cc0dc5c8a5c8a54a59d4f52ffd670d87b0c\"\n\n[[package]]\nname = \"byteorder\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1fd0f2584146f6f2ef48085050886acf353beff7305ebd1ae69500e27c67f64b\"\n\n[[package]]\nname = \"bytes\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a2bd12c1caf447e69cd4528f47f94d203fd2582878ecb9e9465484c4148a8223\"\n\n[[package]]\nname = \"bytesize\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a3e368af43e418a04d52505cf3dbc23dda4e3407ae2fa99fd0e4f308ce546acc\"\ndependencies = [\"serde\"]\n\n[[package]]\nname = \"bzip2\"\nversion = \"0.4.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bdb116a6ef3f6c3698828873ad02c3014b3c85cadb88496095628e3ef1e347f8\"\ndependencies = [\"bzip2-sys\", \"libc\"]\n\n[[package]]\nname = \"bzip2-sys\"\nversion = \"0.1.11+1.0.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"736a955f3fa7875102d57c82b8cac37ec45224a07fd32d58f9f7a186b6cd4cdc\"\ndependencies = [\"cc\", \"libc\", \"pkg-config\"]\n\n[[package]]\nname = \"c2-chacha\"\nversion = \"0.3.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d27dae93fe7b1e0424dc57179ac396908c26b035a87234809f5c4dfd1b47dc80\"\ndependencies = [\"cipher 0.2.5\", \"ppv-lite86\"]\n\n[[package]]\nname = \"camino\"\nversion = \"1.1.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c59e92b5a388f549b863a7bea62612c09f24c8393560709a54558a9abdfb3b9c\"\ndependencies = [\"serde\"]\n\n[[package]]\nname = \"cargo-near\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7f73eb01da3b6737778d2006645533e75563d1080c64bf714bfb88d3fb0ac09b\"\ndependencies = [\"anyhow\", \"atty\", \"bs58 0.4.0\", \"camino\", \"cargo_metadata 0.14.2\", \"clap 3.2.25\", \"colored\", \"env_logger 0.9.3\", \"libloading\", \"log\", \"near-abi\", \"rustc_version\", \"schemars\", \"serde_json\", \"sha2 0.10.8\", \"symbolic-debuginfo\", \"zstd\"]\n\n[[package]]\nname = \"cargo-platform\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e34637b3140142bdf929fb439e8aa4ebad7651ebf7b1080b3930aa16ac1459ff\"\ndependencies = [\"serde\"]\n\n[[package]]\nname = \"cargo_metadata\"\nversion = \"0.14.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4acbb09d9ee8e23699b9634375c72795d095bf268439da88562cf9b501f181fa\"\ndependencies = [\"camino\", \"cargo-platform\", \"semver\", \"serde\", \"serde_json\"]\n\n[[package]]\nname = \"cargo_metadata\"\nversion = \"0.18.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2d886547e41f740c616ae73108f6eb70afe6d940c7bc697cb30f13daec073037\"\ndependencies = [\"camino\", \"cargo-platform\", \"semver\", \"serde\", \"serde_json\", \"thiserror\"]\n\n[[package]]\nname = \"cbindgen\"\nversion = \"0.26.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"da6bc11b07529f16944307272d5bd9b22530bc7d05751717c9d416586cedab49\"\ndependencies = [\"clap 3.2.25\", \"heck 0.4.1\", \"indexmap 1.9.3\", \"log\", \"proc-macro2\", \"quote\", \"serde\", \"serde_json\", \"syn 1.0.109\", \"tempfile\", \"toml\"]\n\n[[package]]\nname = \"cc\"\nversion = \"1.0.83\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f1174fb0b6ec23863f8b971027804a42614e347eafb0a95bf0b12cdae21fc4d0\"\ndependencies = [\"jobserver\", \"libc\"]\n\n[[package]]\nname = \"cfg-if\"\nversion = \"0.1.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4785bdd1c96b2a846b2bd7cc02e86b6b3dbf14e7e53446c4f54c92a361040822\"\n\n[[package]]\nname = \"cfg-if\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n\n[[package]]\nname = \"cfg_aliases\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fd16c4719339c4530435d38e511904438d07cce7950afa3718a84ac36c10e89e\"\n\n[[package]]\nname = \"chrono\"\nversion = \"0.4.31\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7f2c685bad3eb3d45a01354cedb7d5faa66194d1d58ba6e267a8de788f79db38\"\ndependencies = [\"android-tzdata\", \"iana-time-zone\", \"js-sys\", \"num-traits\", \"serde\", \"wasm-bindgen\", \"windows-targets\"]\n\n[[package]]\nname = \"cipher\"\nversion = \"0.2.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"12f8e7987cbd042a63249497f41aed09f8e65add917ea6566effbc56578d6801\"\ndependencies = [\"generic-array\"]\n\n[[package]]\nname = \"cipher\"\nversion = \"0.4.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"773f3b9af64447d2ce9850330c473515014aa235e6a783b02db81ff39e4a3dad\"\ndependencies = [\"crypto-common\", \"inout\"]\n\n[[package]]\nname = \"clap\"\nversion = \"3.2.25\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4ea181bf566f71cb9a5d17a59e1871af638180a18fb0035c92ae62b705207123\"\ndependencies = [\"atty\", \"bitflags 1.3.2\", \"clap_derive 3.2.25\", \"clap_lex 0.2.4\", \"indexmap 1.9.3\", \"once_cell\", \"strsim\", \"termcolor\", \"textwrap\"]\n\n[[package]]\nname = \"clap\"\nversion = \"4.4.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2275f18819641850fa26c89acc84d465c1bf91ce57bc2748b28c420473352f64\"\ndependencies = [\"clap_builder\", \"clap_derive 4.4.7\"]\n\n[[package]]\nname = \"clap_builder\"\nversion = \"4.4.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"07cdf1b148b25c1e1f7a42225e30a0d99a615cd4637eae7365548dd4529b95bc\"\ndependencies = [\"anstream\", \"anstyle\", \"clap_lex 0.6.0\", \"strsim\"]\n\n[[package]]\nname = \"clap_derive\"\nversion = \"3.2.25\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ae6371b8bdc8b7d3959e9cf7b22d4435ef3e79e138688421ec654acf8c81b008\"\ndependencies = [\"heck 0.4.1\", \"proc-macro-error\", \"proc-macro2\", \"quote\", \"syn 1.0.109\"]\n\n[[package]]\nname = \"clap_derive\"\nversion = \"4.4.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cf9804afaaf59a91e75b022a30fb7229a7901f60c755489cc61c9b423b836442\"\ndependencies = [\"heck 0.4.1\", \"proc-macro2\", \"quote\", \"syn 2.0.39\"]\n\n[[package]]\nname = \"clap_lex\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2850f2f5a82cbf437dd5af4d49848fbdfc27c157c3d010345776f952765261c5\"\ndependencies = [\"os_str_bytes\"]\n\n[[package]]\nname = \"clap_lex\"\nversion = \"0.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"702fc72eb24e5a1e48ce58027a675bc24edd52096d5397d4aea7c6dd9eca0bd1\"\n\n[[package]]\nname = \"colorchoice\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"acbf1af155f9b9ef647e42cdc158db4b64a1b61f743629225fde6f3e0be2a7c7\"\n\n[[package]]\nname = \"colored\"\nversion = \"2.0.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2674ec482fbc38012cf31e6c42ba0177b431a0cb6f15fe40efa5aab1bda516f6\"\ndependencies = [\"is-terminal\", \"lazy_static\", \"windows-sys\"]\n\n[[package]]\nname = \"constant_time_eq\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"245097e9a4535ee1e3e3931fcfcd55a796a44c643e8596ff6566d68f09b87bbc\"\n\n[[package]]\nname = \"convert_case\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6245d59a3e82a7fc217c5828a6692dbc6dfb63a0c8c90495621f7b9d79704a0e\"\n\n[[package]]\nname = \"core-foundation\"\nversion = \"0.9.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"194a7a9e6de53fa55116934067c844d9d749312f75c6f6d0980e8c252f8c2146\"\ndependencies = [\"core-foundation-sys\", \"libc\"]\n\n[[package]]\nname = \"core-foundation-sys\"\nversion = \"0.8.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e496a50fda8aacccc86d7529e2c1e0892dbd0f898a6b5645b5561b89c3210efa\"\n\n[[package]]\nname = \"cpufeatures\"\nversion = \"0.2.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ce420fe07aecd3e67c5f910618fe65e94158f6dcc0adf44e00d69ce2bdfe0fd0\"\ndependencies = [\"libc\"]\n\n[[package]]\nname = \"crc32fast\"\nversion = \"1.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b540bd8bc810d3885c6ea91e2018302f68baba2129ab3e88f32389ee9370880d\"\ndependencies = [\"cfg-if 1.0.0\"]\n\n[[package]]\nname = \"crossbeam-channel\"\nversion = \"0.5.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a33c2bf77f2df06183c3aa30d1e96c0695a313d4f9c453cc3762a6db39f99200\"\ndependencies = [\"cfg-if 1.0.0\", \"crossbeam-utils\"]\n\n[[package]]\nname = \"crossbeam-utils\"\nversion = \"0.8.16\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5a22b2d63d4d1dc0b7f1b6b2747dd0088008a9be28b6ddf0b1e7d335e3037294\"\ndependencies = [\"cfg-if 1.0.0\"]\n\n[[package]]\nname = \"crunchy\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7a81dae078cea95a014a339291cec439d2f232ebe854a9d672b796c6afafa9b7\"\n\n[[package]]\nname = \"crypto-common\"\nversion = \"0.1.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1bfb12502f3fc46cca1bb51ac28df9d618d813cdc3d2f25b9fe775a34af26bb3\"\ndependencies = [\"generic-array\", \"typenum\"]\n\n[[package]]\nname = \"crypto-mac\"\nversion = \"0.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b584a330336237c1eecd3e94266efb216c56ed91225d634cb2991c5f3fd1aeab\"\ndependencies = [\"generic-array\", \"subtle\"]\n\n[[package]]\nname = \"curve25519-dalek\"\nversion = \"3.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"90f9d052967f590a76e62eb387bd0bbb1b000182c3cefe5364db6b7211651bc0\"\ndependencies = [\"byteorder\", \"digest 0.9.0\", \"rand_core 0.5.1\", \"subtle\", \"zeroize\"]\n\n[[package]]\nname = \"darling\"\nversion = \"0.20.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0209d94da627ab5605dcccf08bb18afa5009cfbef48d8a8b7d7bdbc79be25c5e\"\ndependencies = [\"darling_core\", \"darling_macro\"]\n\n[[package]]\nname = \"darling_core\"\nversion = \"0.20.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"177e3443818124b357d8e76f53be906d60937f0d3a90773a664fa63fa253e621\"\ndependencies = [\"fnv\", \"ident_case\", \"proc-macro2\", \"quote\", \"strsim\", \"syn 2.0.39\"]\n\n[[package]]\nname = \"darling_macro\"\nversion = \"0.20.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"836a9bbc7ad63342d6d6e7b815ccab164bc77a2d95d84bc3117a8c0d5c98e2d5\"\ndependencies = [\"darling_core\", \"quote\", \"syn 2.0.39\"]\n\n[[package]]\nname = \"debugid\"\nversion = \"0.7.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d6ee87af31d84ef885378aebca32be3d682b0e0dc119d5b4860a2c5bb5046730\"\ndependencies = [\"uuid\"]\n\n[[package]]\nname = \"deranged\"\nversion = \"0.3.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0f32d04922c60427da6f9fef14d042d9edddef64cb9d4ce0d64d0685fbeb1fd3\"\ndependencies = [\"powerfmt\", \"serde\"]\n\n[[package]]\nname = \"derive_arbitrary\"\nversion = \"1.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"67e77553c4162a157adbf834ebae5b415acbecbeafc7a74b0e886657506a7611\"\ndependencies = [\"proc-macro2\", \"quote\", \"syn 2.0.39\"]\n\n[[package]]\nname = \"derive_more\"\nversion = \"0.99.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4fb810d30a7c1953f91334de7244731fc3f3c10d7fe163338a35b9f640960321\"\ndependencies = [\"convert_case\", \"proc-macro2\", \"quote\", \"rustc_version\", \"syn 1.0.109\"]\n\n[[package]]\nname = \"digest\"\nversion = \"0.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d3dd60d1080a57a05ab032377049e0591415d2b31afd7028356dbf3cc6dcb066\"\ndependencies = [\"generic-array\"]\n\n[[package]]\nname = \"digest\"\nversion = \"0.10.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9ed9a281f7bc9b7576e61468ba615a66a5c8cfdff42420a70aa82701a3b1e292\"\ndependencies = [\"block-buffer 0.10.4\", \"crypto-common\", \"subtle\"]\n\n[[package]]\nname = \"dirs-next\"\nversion = \"2.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b98cf8ebf19c3d1b223e151f99a4f9f0690dca41414773390fc824184ac833e1\"\ndependencies = [\"cfg-if 1.0.0\", \"dirs-sys-next\"]\n\n[[package]]\nname = \"dirs-sys-next\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4ebda144c4fe02d1f7ea1a7d9641b6fc6b580adcfa024ae48797ecdeb6825b4d\"\ndependencies = [\"libc\", \"redox_users\", \"winapi\"]\n\n[[package]]\nname = \"dmsort\"\nversion = \"1.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f0bc8fbe9441c17c9f46f75dfe27fa1ddb6c68a461ccaed0481419219d4f10d3\"\n\n[[package]]\nname = \"dyn-clone\"\nversion = \"1.0.16\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"545b22097d44f8a9581187cdf93de7a71e4722bf51200cfaba810865b49a495d\"\n\n[[package]]\nname = \"easy-ext\"\nversion = \"0.2.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"53aff6fdc1b181225acdcb5b14c47106726fd8e486707315b1b138baed68ee31\"\n\n[[package]]\nname = \"ed25519\"\nversion = \"1.5.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"91cff35c70bba8a626e3185d8cd48cc11b5437e1a5bcd15b9b5fa3c64b6dfee7\"\ndependencies = [\"signature\"]\n\n[[package]]\nname = \"ed25519-dalek\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c762bae6dcaf24c4c84667b8579785430908723d5c889f469d76a41d59cc7a9d\"\ndependencies = [\"curve25519-dalek\", \"ed25519\", \"rand 0.7.3\", \"serde\", \"sha2 0.9.9\", \"zeroize\"]\n\n[[package]]\nname = \"either\"\nversion = \"1.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a26ae43d7bcc3b814de94796a5e736d4029efb0ee900c12e2d54c993ad1a1e07\"\n\n[[package]]\nname = \"elementtree\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5f6319c9433cf1e95c60c8533978bccf0614f27f03bb4e514253468eeeaa7fe3\"\ndependencies = [\"string_cache\", \"xml-rs\"]\n\n[[package]]\nname = \"encoding_rs\"\nversion = \"0.8.33\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7268b386296a025e474d5140678f75d6de9493ae55a5d709eeb9dd08149945e1\"\ndependencies = [\"cfg-if 1.0.0\"]\n\n[[package]]\nname = \"enum-map\"\nversion = \"2.7.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"09e6b4f374c071b18172e23134e01026653dc980636ee139e0dfe59c538c61e5\"\ndependencies = [\"enum-map-derive\"]\n\n[[package]]\nname = \"enum-map-derive\"\nversion = \"0.16.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bfdb3d73d1beaf47c8593a1364e577fde072677cbfd103600345c0f547408cc0\"\ndependencies = [\"proc-macro2\", \"quote\", \"syn 2.0.39\"]\n\n[[package]]\nname = \"env_logger\"\nversion = \"0.9.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a12e6657c4c97ebab115a42dcee77225f7f482cdd841cf7088c657a42e9e00e7\"\ndependencies = [\"atty\", \"humantime\", \"log\", \"regex\", \"termcolor\"]\n\n[[package]]\nname = \"env_logger\"\nversion = \"0.10.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"95b3f3e67048839cb0d0781f445682a35113da7121f7c949db0e2be96a4fbece\"\ndependencies = [\"humantime\", \"is-terminal\", \"log\", \"regex\", \"termcolor\"]\n\n[[package]]\nname = \"equivalent\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5443807d6dff69373d433ab9ef5378ad8df50ca6298caf15de6e52e24aaf54d5\"\n\n[[package]]\nname = \"errno\"\nversion = \"0.3.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f258a7194e7f7c2a7837a8913aeab7fd8c383457034fa20ce4dd3dcb813e8eb8\"\ndependencies = [\"libc\", \"windows-sys\"]\n\n[[package]]\nname = \"eyre\"\nversion = \"0.6.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"80f656be11ddf91bd709454d15d5bd896fbaf4cc3314e69349e4d1569f5b46cd\"\ndependencies = [\"indenter\", \"once_cell\"]\n\n[[package]]\nname = \"fallible-iterator\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4443176a9f2c162692bd3d352d745ef9413eec5782a80d8fd6f8a1ac692a07f7\"\n\n[[package]]\nname = \"fastrand\"\nversion = \"2.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"25cbce373ec4653f1a01a31e8a5e5ec0c622dc27ff9c4e6606eefef5cbbed4a5\"\n\n[[package]]\nname = \"ffi_helpers\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c06bad5d1e3a9cfc3825643e055eb7f1fc1b1d52d1543c8ddb9107abd6497f2e\"\ndependencies = [\"anyhow\", \"libc\", \"thiserror\"]\n\n[[package]]\nname = \"filetime\"\nversion = \"0.2.22\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d4029edd3e734da6fe05b6cd7bd2960760a616bd2ddd0d59a0124746d6272af0\"\ndependencies = [\"cfg-if 1.0.0\", \"libc\", \"redox_syscall 0.3.5\", \"windows-sys\"]\n\n[[package]]\nname = \"fixed-hash\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cfcf0ed7fe52a17a03854ec54a9f76d6d84508d1c0e66bc1793301c73fc8493c\"\ndependencies = [\"byteorder\", \"rand 0.8.5\", \"rustc-hex\", \"static_assertions\"]\n\n[[package]]\nname = \"fixedbitset\"\nversion = \"0.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0ce7134b9999ecaf8bcd65542e436736ef32ddca1b3e06094cb6ec5755203b80\"\n\n[[package]]\nname = \"flate2\"\nversion = \"1.0.28\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"46303f565772937ffe1d394a4fac6f411c6013172fadde9dcdb1e147a086940e\"\ndependencies = [\"crc32fast\", \"miniz_oxide\"]\n\n[[package]]\nname = \"fnv\"\nversion = \"1.0.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3f9eec918d3f24069decb9af1554cad7c880e2da24a9afd88aca000531ab82c1\"\n\n[[package]]\nname = \"foreign-types\"\nversion = \"0.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f6f339eb8adc052cd2ca78910fda869aefa38d22d5cb648e6485e4d3fc06f3b1\"\ndependencies = [\"foreign-types-shared\"]\n\n[[package]]\nname = \"foreign-types-shared\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"00b0228411908ca8685dba7fc2cdd70ec9990a6e753e89b6ac91a84c40fbaf4b\"\n\n[[package]]\nname = \"form_urlencoded\"\nversion = \"1.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a62bc1cf6f830c2ec14a513a9fb124d0a213a629668a4186f329db21fe045652\"\ndependencies = [\"percent-encoding\"]\n\n[[package]]\nname = \"fs2\"\nversion = \"0.4.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9564fc758e15025b46aa6643b1b77d047d1a56a1aea6e01002ac0c7026876213\"\ndependencies = [\"libc\", \"winapi\"]\n\n[[package]]\nname = \"funty\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fed34cd105917e91daa4da6b3728c47b068749d6a62c59811f06ed2ac71d9da7\"\n\n[[package]]\nname = \"funty\"\nversion = \"2.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e6d5a32815ae3f33302d95fdcb2ce17862f8c65363dcfd29360480ba1001fc9c\"\n\n[[package]]\nname = \"futures\"\nversion = \"0.3.29\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"da0290714b38af9b4a7b094b8a37086d1b4e61f2df9122c3cad2577669145335\"\ndependencies = [\"futures-channel\", \"futures-core\", \"futures-executor\", \"futures-io\", \"futures-sink\", \"futures-task\", \"futures-util\"]\n\n[[package]]\nname = \"futures-channel\"\nversion = \"0.3.29\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ff4dd66668b557604244583e3e1e1eada8c5c2e96a6d0d6653ede395b78bbacb\"\ndependencies = [\"futures-core\", \"futures-sink\"]\n\n[[package]]\nname = \"futures-core\"\nversion = \"0.3.29\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"eb1d22c66e66d9d72e1758f0bd7d4fd0bee04cad842ee34587d68c07e45d088c\"\n\n[[package]]\nname = \"futures-executor\"\nversion = \"0.3.29\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0f4fb8693db0cf099eadcca0efe2a5a22e4550f98ed16aba6c48700da29597bc\"\ndependencies = [\"futures-core\", \"futures-task\", \"futures-util\"]\n\n[[package]]\nname = \"futures-io\"\nversion = \"0.3.29\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8bf34a163b5c4c52d0478a4d757da8fb65cabef42ba90515efee0f6f9fa45aaa\"\n\n[[package]]\nname = \"futures-macro\"\nversion = \"0.3.29\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"53b153fd91e4b0147f4aced87be237c98248656bb01050b96bf3ee89220a8ddb\"\ndependencies = [\"proc-macro2\", \"quote\", \"syn 2.0.39\"]\n\n[[package]]\nname = \"futures-sink\"\nversion = \"0.3.29\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e36d3378ee38c2a36ad710c5d30c2911d752cb941c00c72dbabfb786a7970817\"\n\n[[package]]\nname = \"futures-task\"\nversion = \"0.3.29\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"efd193069b0ddadc69c46389b740bbccdd97203899b48d09c5f7969591d6bae2\"\n\n[[package]]\nname = \"futures-util\"\nversion = \"0.3.29\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a19526d624e703a3179b3d322efec918b6246ea0fa51d41124525f00f1cc8104\"\ndependencies = [\"futures-channel\", \"futures-core\", \"futures-io\", \"futures-macro\", \"futures-sink\", \"futures-task\", \"memchr\", \"pin-project-lite\", \"pin-utils\", \"slab\"]\n\n[[package]]\nname = \"generic-array\"\nversion = \"0.14.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"85649ca51fd72272d7821adaf274ad91c288277713d9c18820d8499a7ff69e9a\"\ndependencies = [\"typenum\", \"version_check\"]\n\n[[package]]\nname = \"getrandom\"\nversion = \"0.1.16\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8fc3cb4d91f53b50155bdcfd23f6a4c39ae1969c2ae85982b135750cccaf5fce\"\ndependencies = [\"cfg-if 1.0.0\", \"libc\", \"wasi 0.9.0+wasi-snapshot-preview1\"]\n\n[[package]]\nname = \"getrandom\"\nversion = \"0.2.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fe9006bed769170c11f845cf00c7c1e9092aeb3f268e007c3e760ac68008070f\"\ndependencies = [\"cfg-if 1.0.0\", \"libc\", \"wasi 0.11.0+wasi-snapshot-preview1\"]\n\n[[package]]\nname = \"gimli\"\nversion = \"0.26.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"22030e2c5a68ec659fde1e949a745124b48e6fa8b045b7ed5bd1fe4ccc5c4e5d\"\ndependencies = [\"fallible-iterator\", \"stable_deref_trait\"]\n\n[[package]]\nname = \"goblin\"\nversion = \"0.5.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a7666983ed0dd8d21a6f6576ee00053ca0926fb281a5522577a4dbd0f1b54143\"\ndependencies = [\"log\", \"plain\", \"scroll 0.11.0\"]\n\n[[package]]\nname = \"h2\"\nversion = \"0.3.22\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4d6250322ef6e60f93f9a2162799302cd6f68f79f6e5d85c8c16f14d1d958178\"\ndependencies = [\"bytes\", \"fnv\", \"futures-core\", \"futures-sink\", \"futures-util\", \"http\", \"indexmap 2.1.0\", \"slab\", \"tokio\", \"tokio-util 0.7.10\", \"tracing\"]\n\n[[package]]\nname = \"hashbrown\"\nversion = \"0.11.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ab5ef0d4909ef3724cc8cce6ccc8572c5c817592e9285f5464f8e86f8bd3726e\"\ndependencies = [\"ahash 0.7.7\"]\n\n[[package]]\nname = \"hashbrown\"\nversion = \"0.12.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8a9ee70c43aaf417c914396645a0fa852624801b24ebb7ae78fe8272889ac888\"\n\n[[package]]\nname = \"hashbrown\"\nversion = \"0.13.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"43a3c133739dddd0d2990f9a4bdf8eb4b21ef50e4851ca85ab661199821d510e\"\ndependencies = [\"ahash 0.8.6\"]\n\n[[package]]\nname = \"hashbrown\"\nversion = \"0.14.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f93e7192158dbcda357bdec5fb5788eebf8bbac027f3f33e719d29135ae84156\"\n\n[[package]]\nname = \"heck\"\nversion = \"0.3.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6d621efb26863f0e9924c6ac577e8275e5e6b77455db64ffa6c65c904e9e132c\"\ndependencies = [\"unicode-segmentation\"]\n\n[[package]]\nname = \"heck\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"95505c38b4572b2d910cecb0281560f54b440a19336cbbcb27bf6ce6adc6f5a8\"\n\n[[package]]\nname = \"hermit-abi\"\nversion = \"0.1.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"62b467343b94ba476dcb2500d242dadbb39557df889310ac77c5d99100aaac33\"\ndependencies = [\"libc\"]\n\n[[package]]\nname = \"hermit-abi\"\nversion = \"0.3.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d77f7ec81a6d05a3abb01ab6eb7590f6083d08449fe5a1c8b1e620283546ccb7\"\n\n[[package]]\nname = \"hex\"\nversion = \"0.4.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7f24254aa9a54b5c858eaee2f5bccdb46aaf0e486a595ed5fd8f86ba55232a70\"\ndependencies = [\"serde\"]\n\n[[package]]\nname = \"hmac\"\nversion = \"0.12.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6c49c37c09c17a53d937dfbb742eb3a961d65a994e6bcdcf37e7399d0cc8ab5e\"\ndependencies = [\"digest 0.10.7\"]\n\n[[package]]\nname = \"home\"\nversion = \"0.5.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5444c27eef6923071f7ebcc33e3444508466a76f7a2b93da00ed6e19f30c1ddb\"\ndependencies = [\"windows-sys\"]\n\n[[package]]\nname = \"http\"\nversion = \"0.2.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8947b1a6fad4393052c7ba1f4cd97bed3e953a95c79c92ad9b051a04611d9fbb\"\ndependencies = [\"bytes\", \"fnv\", \"itoa\"]\n\n[[package]]\nname = \"http-body\"\nversion = \"0.4.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d5f38f16d184e36f2408a55281cd658ecbd3ca05cce6d6510a176eca393e26d1\"\ndependencies = [\"bytes\", \"http\", \"pin-project-lite\"]\n\n[[package]]\nname = \"http-range-header\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"add0ab9360ddbd88cfeb3bd9574a1d85cfdfa14db10b3e21d3700dbc4328758f\"\n\n[[package]]\nname = \"httparse\"\nversion = \"1.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d897f394bad6a705d5f4104762e116a75639e470d80901eed05a860a95cb1904\"\n\n[[package]]\nname = \"httpdate\"\nversion = \"1.0.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"df3b46402a9d5adb4c86a0cf463f42e19994e3ee891101b1841f30a545cb49a9\"\n\n[[package]]\nname = \"humantime\"\nversion = \"2.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9a3a5bfb195931eeb336b2a7b4d761daec841b97f947d34394601737a7bba5e4\"\n\n[[package]]\nname = \"hyper\"\nversion = \"0.14.27\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ffb1cfd654a8219eaef89881fdb3bb3b1cdc5fa75ded05d6933b2b382e395468\"\ndependencies = [\"bytes\", \"futures-channel\", \"futures-core\", \"futures-util\", \"h2\", \"http\", \"http-body\", \"httparse\", \"httpdate\", \"itoa\", \"pin-project-lite\", \"socket2\", \"tokio\", \"tower-service\", \"tracing\", \"want\"]\n\n[[package]]\nname = \"hyper-timeout\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bbb958482e8c7be4bc3cf272a766a2b0bf1a6755e7a6ae777f017a31d11b13b1\"\ndependencies = [\"hyper\", \"pin-project-lite\", \"tokio\", \"tokio-io-timeout\"]\n\n[[package]]\nname = \"hyper-tls\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d6183ddfa99b85da61a140bea0efc93fdf56ceaa041b37d553518030827f9905\"\ndependencies = [\"bytes\", \"hyper\", \"native-tls\", \"tokio\", \"tokio-native-tls\"]\n\n[[package]]\nname = \"iana-time-zone\"\nversion = \"0.1.58\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8326b86b6cff230b97d0d312a6c40a60726df3332e721f72a1b035f451663b20\"\ndependencies = [\"android_system_properties\", \"core-foundation-sys\", \"iana-time-zone-haiku\", \"js-sys\", \"wasm-bindgen\", \"windows-core\"]\n\n[[package]]\nname = \"iana-time-zone-haiku\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f31827a206f56af32e590ba56d5d2d085f558508192593743f16b2306495269f\"\ndependencies = [\"cc\"]\n\n[[package]]\nname = \"ident_case\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b9e0384b61958566e926dc50660321d12159025e767c18e043daf26b70104c39\"\n\n[[package]]\nname = \"idna\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7d20d6b07bfbc108882d88ed8e37d39636dcc260e15e30c45e6ba089610b917c\"\ndependencies = [\"unicode-bidi\", \"unicode-normalization\"]\n\n[[package]]\nname = \"impl-codec\"\nversion = \"0.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"161ebdfec3c8e3b52bf61c4f3550a1eea4f9579d10dc1b936f3171ebdcd6c443\"\ndependencies = [\"parity-scale-codec\"]\n\n[[package]]\nname = \"impl-trait-for-tuples\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"11d7a9f6330b71fea57921c9b61c47ee6e84f72d394754eff6163ae67e7395eb\"\ndependencies = [\"proc-macro2\", \"quote\", \"syn 1.0.109\"]\n\n[[package]]\nname = \"indent_write\"\nversion = \"2.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0cfe9645a18782869361d9c8732246be7b410ad4e919d3609ebabdac00ba12c3\"\n\n[[package]]\nname = \"indenter\"\nversion = \"0.3.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ce23b50ad8242c51a442f3ff322d56b02f08852c77e4c0b4d3fd684abc89c683\"\n\n[[package]]\nname = \"indexmap\"\nversion = \"1.9.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bd070e393353796e801d209ad339e89596eb4c8d430d18ede6a1cced8fafbd99\"\ndependencies = [\"autocfg\", \"hashbrown 0.12.3\", \"serde\"]\n\n[[package]]\nname = \"indexmap\"\nversion = \"2.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d530e1a18b1cb4c484e6e34556a0d948706958449fca0cab753d649f2bce3d1f\"\ndependencies = [\"equivalent\", \"hashbrown 0.14.2\", \"serde\"]\n\n[[package]]\nname = \"inout\"\nversion = \"0.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a0c10553d664a4d0bcff9f4215d0aac67a639cc68ef660840afe309b807bc9f5\"\ndependencies = [\"generic-array\"]\n\n[[package]]\nname = \"ipnet\"\nversion = \"2.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8f518f335dce6725a761382244631d86cf0ccb2863413590b31338feb467f9c3\"\n\n[[package]]\nname = \"is-terminal\"\nversion = \"0.4.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cb0889898416213fab133e1d33a0e5858a48177452750691bde3666d0fdbaf8b\"\ndependencies = [\"hermit-abi 0.3.3\", \"rustix\", \"windows-sys\"]\n\n[[package]]\nname = \"is_executable\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"302d553b8abc8187beb7d663e34c065ac4570b273bc9511a50e940e99409c577\"\ndependencies = [\"winapi\"]\n\n[[package]]\nname = \"itertools\"\nversion = \"0.10.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b0fd2260e829bddf4cb6ea802289de2f86d6a7a690192fbe91b3f46e0f2c8473\"\ndependencies = [\"either\"]\n\n[[package]]\nname = \"itoa\"\nversion = \"1.0.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"af150ab688ff2122fcef229be89cb50dd66af9e01a4ff320cc137eecc9bacc38\"\n\n[[package]]\nname = \"jobserver\"\nversion = \"0.1.27\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8c37f63953c4c63420ed5fd3d6d398c719489b9f872b9fa683262f8edd363c7d\"\ndependencies = [\"libc\"]\n\n[[package]]\nname = \"joinery\"\nversion = \"2.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"72167d68f5fce3b8655487b8038691a3c9984ee769590f93f2a631f4ad64e4f5\"\n\n[[package]]\nname = \"js-sys\"\nversion = \"0.3.65\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"54c0c35952f67de54bb584e9fd912b3023117cbafc0a77d8f3dee1fb5f572fe8\"\ndependencies = [\"wasm-bindgen\"]\n\n[[package]]\nname = \"json-patch\"\nversion = \"1.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"55ff1e1486799e3f64129f8ccad108b38290df9cd7015cd31bed17239f0789d6\"\ndependencies = [\"serde\", \"serde_json\", \"thiserror\", \"treediff\"]\n\n[[package]]\nname = \"json_comments\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9dbbfed4e59ba9750e15ba154fdfd9329cee16ff3df539c2666b70f58cc32105\"\n\n[[package]]\nname = \"keccak\"\nversion = \"0.1.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8f6d5ed8676d904364de097082f4e7d240b571b67989ced0240f08b7f966f940\"\ndependencies = [\"cpufeatures\"]\n\n[[package]]\nname = \"lazy_static\"\nversion = \"1.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e2abad23fbc42b3700f2f279844dc832adb2b2eb069b2df918f455c4e18cc646\"\ndependencies = [\"spin 0.5.2\"]\n\n[[package]]\nname = \"lazycell\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"830d08ce1d1d941e6b30645f1a0eb5643013d835ce3779a5fc208261dbe10f55\"\n\n[[package]]\nname = \"libc\"\nversion = \"0.2.150\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"89d92a4743f9a61002fae18374ed11e7973f530cb3a3255fb354818118b2203c\"\n\n[[package]]\nname = \"libloading\"\nversion = \"0.7.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b67380fd3b2fbe7527a606e18729d21c6f3951633d0500574c4dc22d2d638b9f\"\ndependencies = [\"cfg-if 1.0.0\", \"winapi\"]\n\n[[package]]\nname = \"libredox\"\nversion = \"0.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"85c833ca1e66078851dba29046874e38f08b2c883700aa29a03ddd3b23814ee8\"\ndependencies = [\"bitflags 2.4.1\", \"libc\", \"redox_syscall 0.4.1\"]\n\n[[package]]\nname = \"linux-raw-sys\"\nversion = \"0.4.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"969488b55f8ac402214f3f5fd243ebb7206cf82de60d3172994707a4bcc2b829\"\n\n[[package]]\nname = \"lock_api\"\nversion = \"0.4.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3c168f8615b12bc01f9c17e2eb0cc07dcae1940121185446edc3744920e8ef45\"\ndependencies = [\"autocfg\", \"scopeguard\"]\n\n[[package]]\nname = \"log\"\nversion = \"0.4.20\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b5e6163cb8c49088c2c36f57875e58ccd8c87c7427f7fbd50ea6710b2f3f2e8f\"\n\n[[package]]\nname = \"matchers\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8263075bb86c5a1b1427b5ae862e8889656f126e9f77c484496e8b47cf5c5558\"\ndependencies = [\"regex-automata 0.1.10\"]\n\n[[package]]\nname = \"matchit\"\nversion = \"0.7.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0e7465ac9959cc2b1404e8e2367b43684a6d13790fe23056cc8c6c5a6b7bcb94\"\n\n[[package]]\nname = \"memchr\"\nversion = \"2.6.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f665ee40bc4a3c5590afb1e9677db74a508659dfd71e126420da8274909a0167\"\n\n[[package]]\nname = \"memmap2\"\nversion = \"0.5.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"83faa42c0a078c393f6b29d5db232d8be22776a891f8f56e5284faee4a20b327\"\ndependencies = [\"libc\"]\n\n[[package]]\nname = \"memory_units\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8452105ba047068f40ff7093dd1d9da90898e63dd61736462e9cdda6a90ad3c3\"\n\n[[package]]\nname = \"mime\"\nversion = \"0.3.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6877bb514081ee2a7ff5ef9de3281f14a4dd4bceac4c09388074a6b5df8a139a\"\n\n[[package]]\nname = \"minimal-lexical\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"68354c5c6bd36d73ff3feceb05efa59b6acb7626617f4962be322a825e61f79a\"\n\n[[package]]\nname = \"miniz_oxide\"\nversion = \"0.7.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e7810e0be55b428ada41041c41f32c9f1a42817901b4ccf45fa3d4b6561e74c7\"\ndependencies = [\"adler\"]\n\n[[package]]\nname = \"mio\"\nversion = \"0.8.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3dce281c5e46beae905d4de1870d8b1509a9142b62eedf18b443b011ca8343d0\"\ndependencies = [\"libc\", \"wasi 0.11.0+wasi-snapshot-preview1\", \"windows-sys\"]\n\n[[package]]\nname = \"multimap\"\nversion = \"0.8.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e5ce46fe64a9d73be07dcbe690a38ce1b293be448fd8ce1e6c1b8062c9f72c6a\"\n\n[[package]]\nname = \"native-tls\"\nversion = \"0.2.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"07226173c32f2926027b63cce4bcd8076c3552846cbe7925f3aaffeac0a3b92e\"\ndependencies = [\"lazy_static\", \"libc\", \"log\", \"openssl\", \"openssl-probe\", \"openssl-sys\", \"schannel\", \"security-framework\", \"security-framework-sys\", \"tempfile\"]\n\n[[package]]\nname = \"near-abi\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"885db39b08518fa700b73fa2214e8adbbfba316ba82dd510f50519173eadaf73\"\ndependencies = [\"borsh 0.9.3\", \"schemars\", \"semver\", \"serde\"]\n\n[[package]]\nname = \"near-account-id\"\nversion = \"0.14.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"71d258582a1878e6db67400b0504a5099db85718d22c2e07f747fe1706ae7150\"\ndependencies = [\"borsh 0.9.3\", \"serde\"]\n\n[[package]]\nname = \"near-account-id\"\nversion = \"0.17.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dc0cb40869cab7f5232f934f45db35bffe0f2d2a7cb0cd0346202fbe4ebf2dd7\"\ndependencies = [\"borsh 0.10.3\", \"serde\"]\n\n[[package]]\nname = \"near-chain-configs\"\nversion = \"0.17.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c4f9a1c805846237d56f99b328ba6ab77e5d43ef59aaaf8d2a41d42fdc708a7b\"\ndependencies = [\"anyhow\", \"chrono\", \"derive_more\", \"near-config-utils\", \"near-crypto 0.17.0\", \"near-o11y\", \"near-primitives 0.17.0\", \"num-rational\", \"once_cell\", \"serde\", \"serde_json\", \"sha2 0.10.8\", \"smart-default\", \"tracing\"]\n\n[[package]]\nname = \"near-config-utils\"\nversion = \"0.17.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5523e7dce493c45bc3241eb3100d943ec471852f9b1f84b46a34789eadf17031\"\ndependencies = [\"anyhow\", \"json_comments\", \"thiserror\", \"tracing\"]\n\n[[package]]\nname = \"near-crypto\"\nversion = \"0.14.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1e75673d69fd7365508f3d32483669fe45b03bfb34e4d9363e90adae9dfb416c\"\ndependencies = [\"arrayref\", \"blake2\", \"borsh 0.9.3\", \"bs58 0.4.0\", \"c2-chacha\", \"curve25519-dalek\", \"derive_more\", \"ed25519-dalek\", \"near-account-id 0.14.0\", \"once_cell\", \"parity-secp256k1\", \"primitive-types\", \"rand 0.7.3\", \"rand_core 0.5.1\", \"serde\", \"serde_json\", \"subtle\", \"thiserror\"]\n\n[[package]]\nname = \"near-crypto\"\nversion = \"0.17.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ff6b382b626e7e0cd372d027c6672ac97b4b6ee6114288c9e58d8180b935d315\"\ndependencies = [\"blake2\", \"borsh 0.10.3\", \"bs58 0.4.0\", \"c2-chacha\", \"curve25519-dalek\", \"derive_more\", \"ed25519-dalek\", \"hex\", \"near-account-id 0.17.0\", \"near-config-utils\", \"near-stdx\", \"once_cell\", \"primitive-types\", \"rand 0.7.3\", \"secp256k1\", \"serde\", \"serde_json\", \"subtle\", \"thiserror\"]\n\n[[package]]\nname = \"near-da-blob-store\"\nversion = \"0.0.1\"\ndependencies = [\"anyhow\", \"borsh 0.10.3\", \"near-da-primitives\", \"near-sdk\", \"near-workspaces\", \"tokio\", \"uint\"]\n\n[[package]]\nname = \"near-da-http-api\"\nversion = \"0.0.1\"\ndependencies = [\"anyhow\", \"axum\", \"clap 4.4.8\", \"hex\", \"near-da-http-api-data\", \"near-da-primitives\", \"near-da-rpc\", \"serde\", \"serde_json\", \"tokio\", \"tower-http\", \"tracing\", \"tracing-subscriber\"]\n\n[[package]]\nname = \"near-da-http-api-data\"\nversion = \"0.0.1\"\ndependencies = [\"near-da-primitives\", \"serde\", \"serde_with\"]\n\n[[package]]\nname = \"near-da-primitives\"\nversion = \"0.0.1\"\ndependencies = [\"borsh 0.10.3\", \"hex\", \"near-primitives 0.17.0\", \"serde\", \"serde_with\"]\n\n[[package]]\nname = \"near-da-rpc\"\nversion = \"0.0.1\"\ndependencies = [\"async-trait\", \"cbindgen\", \"eyre\", \"futures\", \"near-crypto 0.17.0\", \"near-da-primitives\", \"near-jsonrpc-client\", \"near-jsonrpc-primitives\", \"near-primitives 0.17.0\", \"pretty_env_logger\", \"serde\", \"serde_json\", \"serde_with\", \"tokio\", \"tracing\", \"tracing-subscriber\", \"which 5.0.0\"]\n\n[[package]]\nname = \"near-da-rpc-sys\"\nversion = \"0.0.1\"\ndependencies = [\"anyhow\", \"cbindgen\", \"ffi_helpers\", \"libc\", \"near-da-rpc\", \"once_cell\", \"openssl\", \"pretty_env_logger\", \"tokio\", \"which 5.0.0\"]\n\n[[package]]\nname = \"near-fmt\"\nversion = \"0.17.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c44c842c6cfcd9b8c387cccd4cd0619a5f21920cde5d5c292af3cc5d40510672\"\ndependencies = [\"near-primitives-core 0.17.0\"]\n\n[[package]]\nname = \"near-gas\"\nversion = \"0.2.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"14e75c875026229902d065e4435804497337b631ec69ba746b102954273e9ad1\"\ndependencies = [\"borsh 1.2.0\", \"schemars\", \"serde\"]\n\n[[package]]\nname = \"near-jsonrpc-client\"\nversion = \"0.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"118f44c02ad211db805c1370ad3ff26576af6ff554093c9fece1b835d29d233a\"\ndependencies = [\"borsh 0.10.3\", \"lazy_static\", \"log\", \"near-chain-configs\", \"near-crypto 0.17.0\", \"near-jsonrpc-primitives\", \"near-primitives 0.17.0\", \"reqwest\", \"serde\", \"serde_json\", \"thiserror\"]\n\n[[package]]\nname = \"near-jsonrpc-primitives\"\nversion = \"0.17.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"97b2934b5ab243e25e951c984525ba0aff0e719ed915c988c5195405aa0f6987\"\ndependencies = [\"arbitrary\", \"near-chain-configs\", \"near-crypto 0.17.0\", \"near-primitives 0.17.0\", \"near-rpc-error-macro 0.17.0\", \"serde\", \"serde_json\", \"thiserror\"]\n\n[[package]]\nname = \"near-o11y\"\nversion = \"0.17.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"af7d35397b02b131c188c72f3885e97daeccab134ec2fc8cc0073a94cf1cfe19\"\ndependencies = [\"actix\", \"atty\", \"clap 4.4.8\", \"near-crypto 0.17.0\", \"near-primitives-core 0.17.0\", \"once_cell\", \"opentelemetry\", \"opentelemetry-otlp\", \"opentelemetry-semantic-conventions\", \"prometheus\", \"serde\", \"strum\", \"thiserror\", \"tokio\", \"tracing\", \"tracing-appender\", \"tracing-opentelemetry\", \"tracing-subscriber\"]\n\n[[package]]\nname = \"near-primitives\"\nversion = \"0.14.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8ad1a9a1640539c81f065425c31bffcfbf6b31ef1aeaade59ce905f5df6ac860\"\ndependencies = [\"borsh 0.9.3\", \"byteorder\", \"bytesize\", \"chrono\", \"derive_more\", \"easy-ext\", \"hex\", \"near-crypto 0.14.0\", \"near-primitives-core 0.14.0\", \"near-rpc-error-macro 0.14.0\", \"near-vm-errors 0.14.0\", \"num-rational\", \"once_cell\", \"primitive-types\", \"rand 0.7.3\", \"reed-solomon-erasure\", \"serde\", \"serde_json\", \"smart-default\", \"strum\", \"thiserror\"]\n\n[[package]]\nname = \"near-primitives\"\nversion = \"0.17.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"05f7051aaf199adc4d068620fca6d5f70f906a1540d03a8bb3701271f8881835\"\ndependencies = [\"arbitrary\", \"borsh 0.10.3\", \"bytesize\", \"cfg-if 1.0.0\", \"chrono\", \"derive_more\", \"easy-ext\", \"enum-map\", \"hex\", \"near-crypto 0.17.0\", \"near-fmt\", \"near-primitives-core 0.17.0\", \"near-rpc-error-macro 0.17.0\", \"near-stdx\", \"near-vm-errors 0.17.0\", \"num-rational\", \"once_cell\", \"primitive-types\", \"rand 0.8.5\", \"reed-solomon-erasure\", \"serde\", \"serde_json\", \"serde_with\", \"serde_yaml\", \"smart-default\", \"strum\", \"thiserror\", \"time\", \"tracing\"]\n\n[[package]]\nname = \"near-primitives-core\"\nversion = \"0.14.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"91d508f0fc340f6461e4e256417685720d3c4c00bb5a939b105160e49137caba\"\ndependencies = [\"base64 0.11.0\", \"borsh 0.9.3\", \"bs58 0.4.0\", \"derive_more\", \"near-account-id 0.14.0\", \"num-rational\", \"serde\", \"sha2 0.10.8\", \"strum\"]\n\n[[package]]\nname = \"near-primitives-core\"\nversion = \"0.17.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"775fec19ef51a341abdbf792a9dda5b4cb89f488f681b2fd689b9321d24db47b\"\ndependencies = [\"arbitrary\", \"base64 0.21.5\", \"borsh 0.10.3\", \"bs58 0.4.0\", \"derive_more\", \"enum-map\", \"near-account-id 0.17.0\", \"num-rational\", \"serde\", \"serde_repr\", \"serde_with\", \"sha2 0.10.8\", \"strum\", \"thiserror\"]\n\n[[package]]\nname = \"near-rpc-error-core\"\nversion = \"0.14.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"93ee0b41c75ef859c193a8ff1dadfa0c8207bc0ac447cc22259721ad769a1408\"\ndependencies = [\"quote\", \"serde\", \"syn 1.0.109\"]\n\n[[package]]\nname = \"near-rpc-error-core\"\nversion = \"0.17.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"84c1eda300e2e78f4f945ae58117d49e806899f4a51ee2faa09eda5ebc2e6571\"\ndependencies = [\"quote\", \"serde\", \"syn 2.0.39\"]\n\n[[package]]\nname = \"near-rpc-error-macro\"\nversion = \"0.14.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8e837bd4bacd807073ec5ceb85708da7f721b46a4c2a978de86027fb0034ce31\"\ndependencies = [\"near-rpc-error-core 0.14.0\", \"serde\", \"syn 1.0.109\"]\n\n[[package]]\nname = \"near-rpc-error-macro\"\nversion = \"0.17.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"31d2dadd765101c77e664029dd6fbec090e696877d4ae903c620d02ceda4969a\"\ndependencies = [\"fs2\", \"near-rpc-error-core 0.17.0\", \"serde\", \"syn 2.0.39\"]\n\n[[package]]\nname = \"near-sandbox-utils\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2de216bb0152bfb64f59016d9e6a5b1ac56dd85f729e5fde08461571e2182c8f\"\ndependencies = [\"anyhow\", \"binary-install\", \"chrono\", \"fs2\", \"home\", \"tokio\"]\n\n[[package]]\nname = \"near-sdk\"\nversion = \"4.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"15eb3de2defe3626260cc209a6cdb985c6b27b0bd4619fad97dcfae002c3c5bd\"\ndependencies = [\"base64 0.13.1\", \"borsh 0.9.3\", \"bs58 0.4.0\", \"near-abi\", \"near-crypto 0.14.0\", \"near-primitives 0.14.0\", \"near-primitives-core 0.14.0\", \"near-sdk-macros\", \"near-sys\", \"near-vm-logic\", \"once_cell\", \"schemars\", \"serde\", \"serde_json\", \"wee_alloc\"]\n\n[[package]]\nname = \"near-sdk-macros\"\nversion = \"4.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4907affc9f5ed559456509188ff0024f1f2099c0830e6bdb66eb61d5b75912c0\"\ndependencies = [\"Inflector\", \"proc-macro2\", \"quote\", \"syn 1.0.109\"]\n\n[[package]]\nname = \"near-stdx\"\nversion = \"0.17.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6540152fba5e96fe5d575b79e8cd244cf2add747bb01362426bdc069bc3a23bc\"\n\n[[package]]\nname = \"near-sys\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"397688591acf8d3ebf2c2485ba32d4b24fc10aad5334e3ad8ec0b7179bfdf06b\"\n\n[[package]]\nname = \"near-vm-errors\"\nversion = \"0.14.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d0da466a30f0446639cbd788c30865086fac3e8dcb07a79e51d2b0775ed4261e\"\ndependencies = [\"borsh 0.9.3\", \"near-account-id 0.14.0\", \"near-rpc-error-macro 0.14.0\", \"serde\"]\n\n[[package]]\nname = \"near-vm-errors\"\nversion = \"0.17.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ec545d1bede0579e7c15dd2dce9b998dc975c52f2165702ff40bec7ff69728bb\"\ndependencies = [\"borsh 0.10.3\", \"near-account-id 0.17.0\", \"near-rpc-error-macro 0.17.0\", \"serde\", \"strum\", \"thiserror\"]\n\n[[package]]\nname = \"near-vm-logic\"\nversion = \"0.14.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"81b534828419bacbf1f7b11ef7b00420f248c548c485d3f0cfda8bb6931152f2\"\ndependencies = [\"base64 0.13.1\", \"borsh 0.9.3\", \"bs58 0.4.0\", \"byteorder\", \"near-account-id 0.14.0\", \"near-crypto 0.14.0\", \"near-primitives 0.14.0\", \"near-primitives-core 0.14.0\", \"near-vm-errors 0.14.0\", \"ripemd\", \"serde\", \"sha2 0.10.8\", \"sha3\", \"zeropool-bn\"]\n\n[[package]]\nname = \"near-workspaces\"\nversion = \"0.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d1f43c3cac1cf61d0f20fbc49f2c3182caa6422c0d2acd92c926a3e3190b26a9\"\ndependencies = [\"async-trait\", \"base64 0.21.5\", \"borsh 0.10.3\", \"bs58 0.5.0\", \"cargo-near\", \"cargo_metadata 0.18.1\", \"chrono\", \"fs2\", \"json-patch\", \"libc\", \"near-account-id 0.17.0\", \"near-crypto 0.17.0\", \"near-gas\", \"near-jsonrpc-client\", \"near-jsonrpc-primitives\", \"near-primitives 0.17.0\", \"near-sandbox-utils\", \"near-sdk\", \"rand 0.8.5\", \"reqwest\", \"serde\", \"serde_json\", \"sha2 0.10.8\", \"tempfile\", \"thiserror\", \"tokio\", \"tokio-retry\", \"tracing\", \"url\"]\n\n[[package]]\nname = \"new_debug_unreachable\"\nversion = \"1.0.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e4a24736216ec316047a1fc4252e27dabb04218aa4a3f37c6e7ddbf1f9782b54\"\n\n[[package]]\nname = \"nom\"\nversion = \"7.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d273983c5a657a70a3e8f2a01329822f3b8c8172b73826411a55751e404a0a4a\"\ndependencies = [\"memchr\", \"minimal-lexical\"]\n\n[[package]]\nname = \"nom-supreme\"\nversion = \"0.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"aadc66631948f6b65da03be4c4cd8bd104d481697ecbb9bbd65719b1ec60bc9f\"\ndependencies = [\"brownstone\", \"indent_write\", \"joinery\", \"memchr\", \"nom\"]\n\n[[package]]\nname = \"nu-ansi-term\"\nversion = \"0.46.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"77a8165726e8236064dbb45459242600304b42a5ea24ee2948e18e023bf7ba84\"\ndependencies = [\"overload\", \"winapi\"]\n\n[[package]]\nname = \"num-bigint\"\nversion = \"0.3.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5f6f7833f2cbf2360a6cfd58cd41a53aa7a90bd4c202f5b1c7dd2ed73c57b2c3\"\ndependencies = [\"autocfg\", \"num-integer\", \"num-traits\"]\n\n[[package]]\nname = \"num-integer\"\nversion = \"0.1.45\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"225d3389fb3509a24c93f5c29eb6bde2586b98d9f016636dff58d7c6f7569cd9\"\ndependencies = [\"autocfg\", \"num-traits\"]\n\n[[package]]\nname = \"num-rational\"\nversion = \"0.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"12ac428b1cb17fce6f731001d307d351ec70a6d202fc2e60f7d4c5e42d8f4f07\"\ndependencies = [\"autocfg\", \"num-bigint\", \"num-integer\", \"num-traits\", \"serde\"]\n\n[[package]]\nname = \"num-traits\"\nversion = \"0.2.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"39e3200413f237f41ab11ad6d161bc7239c84dcb631773ccd7de3dfe4b5c267c\"\ndependencies = [\"autocfg\"]\n\n[[package]]\nname = \"num_cpus\"\nversion = \"1.16.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4161fcb6d602d4d2081af7c3a45852d875a03dd337a6bfdd6e06407b61342a43\"\ndependencies = [\"hermit-abi 0.3.3\", \"libc\"]\n\n[[package]]\nname = \"once_cell\"\nversion = \"1.18.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dd8b5dd2ae5ed71462c540258bedcb51965123ad7e7ccf4b9a8cafaa4a63576d\"\n\n[[package]]\nname = \"opaque-debug\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"624a8340c38c1b80fd549087862da4ba43e08858af025b236e509b6649fc13d5\"\n\n[[package]]\nname = \"openssl\"\nversion = \"0.10.59\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7a257ad03cd8fb16ad4172fedf8094451e1af1c4b70097636ef2eac9a5f0cc33\"\ndependencies = [\"bitflags 2.4.1\", \"cfg-if 1.0.0\", \"foreign-types\", \"libc\", \"once_cell\", \"openssl-macros\", \"openssl-sys\"]\n\n[[package]]\nname = \"openssl-macros\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a948666b637a0f465e8564c73e89d4dde00d72d4d473cc972f390fc3dcee7d9c\"\ndependencies = [\"proc-macro2\", \"quote\", \"syn 2.0.39\"]\n\n[[package]]\nname = \"openssl-probe\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ff011a302c396a5197692431fc1948019154afc178baf7d8e37367442a4601cf\"\n\n[[package]]\nname = \"openssl-src\"\nversion = \"300.1.6+3.1.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"439fac53e092cd7442a3660c85dde4643ab3b5bd39040912388dcdabf6b88085\"\ndependencies = [\"cc\"]\n\n[[package]]\nname = \"openssl-sys\"\nversion = \"0.9.95\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"40a4130519a360279579c2053038317e40eff64d13fd3f004f9e1b72b8a6aaf9\"\ndependencies = [\"cc\", \"libc\", \"openssl-src\", \"pkg-config\", \"vcpkg\"]\n\n[[package]]\nname = \"opentelemetry\"\nversion = \"0.17.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6105e89802af13fdf48c49d7646d3b533a70e536d818aae7e78ba0433d01acb8\"\ndependencies = [\"async-trait\", \"crossbeam-channel\", \"futures-channel\", \"futures-executor\", \"futures-util\", \"js-sys\", \"lazy_static\", \"percent-encoding\", \"pin-project\", \"rand 0.8.5\", \"thiserror\", \"tokio\", \"tokio-stream\"]\n\n[[package]]\nname = \"opentelemetry-otlp\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9d1a6ca9de4c8b00aa7f1a153bd76cb263287155cec642680d79d98706f3d28a\"\ndependencies = [\"async-trait\", \"futures\", \"futures-util\", \"http\", \"opentelemetry\", \"prost\", \"thiserror\", \"tokio\", \"tonic\", \"tonic-build\"]\n\n[[package]]\nname = \"opentelemetry-semantic-conventions\"\nversion = \"0.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"985cc35d832d412224b2cffe2f9194b1b89b6aa5d0bef76d080dce09d90e62bd\"\ndependencies = [\"opentelemetry\"]\n\n[[package]]\nname = \"os_str_bytes\"\nversion = \"6.6.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e2355d85b9a3786f481747ced0e0ff2ba35213a1f9bd406ed906554d7af805a1\"\n\n[[package]]\nname = \"overload\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b15813163c1d831bf4a13c3610c05c0d03b39feb07f7e09fa234dac9b15aaf39\"\n\n[[package]]\nname = \"parity-scale-codec\"\nversion = \"2.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"373b1a4c1338d9cd3d1fa53b3a11bdab5ab6bd80a20f7f7becd76953ae2be909\"\ndependencies = [\"arrayvec 0.7.4\", \"bitvec 0.20.4\", \"byte-slice-cast\", \"impl-trait-for-tuples\", \"parity-scale-codec-derive\", \"serde\"]\n\n[[package]]\nname = \"parity-scale-codec-derive\"\nversion = \"2.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1557010476e0595c9b568d16dcfb81b93cdeb157612726f5170d31aa707bed27\"\ndependencies = [\"proc-macro-crate 1.3.1\", \"proc-macro2\", \"quote\", \"syn 1.0.109\"]\n\n[[package]]\nname = \"parity-secp256k1\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4fca4f82fccae37e8bbdaeb949a4a218a1bbc485d11598f193d2a908042e5fc1\"\ndependencies = [\"arrayvec 0.5.2\", \"cc\", \"cfg-if 0.1.10\", \"rand 0.7.3\"]\n\n[[package]]\nname = \"parking_lot\"\nversion = \"0.12.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3742b2c103b9f06bc9fff0a37ff4912935851bee6d36f3c02bcc755bcfec228f\"\ndependencies = [\"lock_api\", \"parking_lot_core\"]\n\n[[package]]\nname = \"parking_lot_core\"\nversion = \"0.9.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4c42a9226546d68acdd9c0a280d17ce19bfe27a46bf68784e4066115788d008e\"\ndependencies = [\"cfg-if 1.0.0\", \"libc\", \"redox_syscall 0.4.1\", \"smallvec\", \"windows-targets\"]\n\n[[package]]\nname = \"password-hash\"\nversion = \"0.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7676374caaee8a325c9e7a2ae557f216c5563a171d6997b0ef8a65af35147700\"\ndependencies = [\"base64ct\", \"rand_core 0.6.4\", \"subtle\"]\n\n[[package]]\nname = \"pbkdf2\"\nversion = \"0.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"83a0692ec44e4cf1ef28ca317f14f8f07da2d95ec3fa01f86e4467b725e60917\"\ndependencies = [\"digest 0.10.7\", \"hmac\", \"password-hash\", \"sha2 0.10.8\"]\n\n[[package]]\nname = \"pdb\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"13f4d162ecaaa1467de5afbe62d597757b674b51da8bb4e587430c5fdb2af7aa\"\ndependencies = [\"fallible-iterator\", \"scroll 0.10.2\", \"uuid\"]\n\n[[package]]\nname = \"percent-encoding\"\nversion = \"2.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9b2a4787296e9989611394c33f193f676704af1686e70b8f8033ab5ba9a35a94\"\n\n[[package]]\nname = \"petgraph\"\nversion = \"0.6.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e1d3afd2628e69da2be385eb6f2fd57c8ac7977ceeff6dc166ff1657b0e386a9\"\ndependencies = [\"fixedbitset\", \"indexmap 2.1.0\"]\n\n[[package]]\nname = \"phf_shared\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b6796ad771acdc0123d2a88dc428b5e38ef24456743ddb1744ed628f9815c096\"\ndependencies = [\"siphasher\"]\n\n[[package]]\nname = \"pin-project\"\nversion = \"1.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fda4ed1c6c173e3fc7a83629421152e01d7b1f9b7f65fb301e490e8cfc656422\"\ndependencies = [\"pin-project-internal\"]\n\n[[package]]\nname = \"pin-project-internal\"\nversion = \"1.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4359fd9c9171ec6e8c62926d6faaf553a8dc3f64e1507e76da7911b4f6a04405\"\ndependencies = [\"proc-macro2\", \"quote\", \"syn 2.0.39\"]\n\n[[package]]\nname = \"pin-project-lite\"\nversion = \"0.2.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8afb450f006bf6385ca15ef45d71d2288452bc3683ce2e2cacc0d18e4be60b58\"\n\n[[package]]\nname = \"pin-utils\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8b870d8c151b6f2fb93e84a13146138f05d02ed11c7e7c54f8826aaaf7c9f184\"\n\n[[package]]\nname = \"pkg-config\"\nversion = \"0.3.27\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"26072860ba924cbfa98ea39c8c19b4dd6a4a25423dbdf219c1eca91aa0cf6964\"\n\n[[package]]\nname = \"plain\"\nversion = \"0.2.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b4596b6d070b27117e987119b4dac604f3c58cfb0b191112e24771b2faeac1a6\"\n\n[[package]]\nname = \"powerfmt\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"439ee305def115ba05938db6eb1644ff94165c5ab5e9420d1c1bcedbba909391\"\n\n[[package]]\nname = \"ppv-lite86\"\nversion = \"0.2.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5b40af805b3121feab8a3c29f04d8ad262fa8e0561883e7653e024ae4479e6de\"\n\n[[package]]\nname = \"precomputed-hash\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"925383efa346730478fb4838dbe9137d2a47675ad789c546d150a6e1dd4ab31c\"\n\n[[package]]\nname = \"pretty_env_logger\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"865724d4dbe39d9f3dd3b52b88d859d66bcb2d6a0acfd5ea68a65fb66d4bdc1c\"\ndependencies = [\"env_logger 0.10.1\", \"log\"]\n\n[[package]]\nname = \"primitive-types\"\nversion = \"0.10.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"05e4722c697a58a99d5d06a08c30821d7c082a4632198de1eaa5a6c22ef42373\"\ndependencies = [\"fixed-hash\", \"impl-codec\", \"uint\"]\n\n[[package]]\nname = \"proc-macro-crate\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1d6ea3c4595b96363c13943497db34af4460fb474a95c43f4446ad341b8c9785\"\ndependencies = [\"toml\"]\n\n[[package]]\nname = \"proc-macro-crate\"\nversion = \"1.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7f4c021e1093a56626774e81216a4ce732a735e5bad4868a03f3ed65ca0c3919\"\ndependencies = [\"once_cell\", \"toml_edit 0.19.15\"]\n\n[[package]]\nname = \"proc-macro-crate\"\nversion = \"2.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7e8366a6159044a37876a2b9817124296703c586a5c92e2c53751fa06d8d43e8\"\ndependencies = [\"toml_edit 0.20.7\"]\n\n[[package]]\nname = \"proc-macro-error\"\nversion = \"1.0.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"da25490ff9892aab3fcf7c36f08cfb902dd3e71ca0f9f9517bea02a73a5ce38c\"\ndependencies = [\"proc-macro-error-attr\", \"proc-macro2\", \"quote\", \"syn 1.0.109\", \"version_check\"]\n\n[[package]]\nname = \"proc-macro-error-attr\"\nversion = \"1.0.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a1be40180e52ecc98ad80b184934baf3d0d29f979574e439af5a55274b35f869\"\ndependencies = [\"proc-macro2\", \"quote\", \"version_check\"]\n\n[[package]]\nname = \"proc-macro2\"\nversion = \"1.0.69\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"134c189feb4956b20f6f547d2cf727d4c0fe06722b20a0eec87ed445a97f92da\"\ndependencies = [\"unicode-ident\"]\n\n[[package]]\nname = \"prometheus\"\nversion = \"0.13.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"449811d15fbdf5ceb5c1144416066429cf82316e2ec8ce0c1f6f8a02e7bbcf8c\"\ndependencies = [\"cfg-if 1.0.0\", \"fnv\", \"lazy_static\", \"memchr\", \"parking_lot\", \"protobuf\", \"thiserror\"]\n\n[[package]]\nname = \"prost\"\nversion = \"0.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"444879275cb4fd84958b1a1d5420d15e6fcf7c235fe47f053c9c2a80aceb6001\"\ndependencies = [\"bytes\", \"prost-derive\"]\n\n[[package]]\nname = \"prost-build\"\nversion = \"0.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"62941722fb675d463659e49c4f3fe1fe792ff24fe5bbaa9c08cd3b98a1c354f5\"\ndependencies = [\"bytes\", \"heck 0.3.3\", \"itertools\", \"lazy_static\", \"log\", \"multimap\", \"petgraph\", \"prost\", \"prost-types\", \"regex\", \"tempfile\", \"which 4.4.2\"]\n\n[[package]]\nname = \"prost-derive\"\nversion = \"0.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f9cc1a3263e07e0bf68e96268f37665207b49560d98739662cdfaae215c720fe\"\ndependencies = [\"anyhow\", \"itertools\", \"proc-macro2\", \"quote\", \"syn 1.0.109\"]\n\n[[package]]\nname = \"prost-types\"\nversion = \"0.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"534b7a0e836e3c482d2693070f982e39e7611da9695d4d1f5a4b186b51faef0a\"\ndependencies = [\"bytes\", \"prost\"]\n\n[[package]]\nname = \"protobuf\"\nversion = \"2.28.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"106dd99e98437432fed6519dedecfade6a06a73bb7b2a1e019fdd2bee5778d94\"\n\n[[package]]\nname = \"quote\"\nversion = \"1.0.33\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5267fca4496028628a95160fc423a33e8b2e6af8a5302579e322e4b520293cae\"\ndependencies = [\"proc-macro2\"]\n\n[[package]]\nname = \"radium\"\nversion = \"0.6.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"643f8f41a8ebc4c5dc4515c82bb8abd397b527fc20fd681b7c011c2aee5d44fb\"\n\n[[package]]\nname = \"radium\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dc33ff2d4973d518d823d61aa239014831e521c75da58e3df4840d3f47749d09\"\n\n[[package]]\nname = \"rand\"\nversion = \"0.7.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6a6b1679d49b24bbfe0c803429aa1874472f50d9b363131f0e89fc356b544d03\"\ndependencies = [\"getrandom 0.1.16\", \"libc\", \"rand_chacha 0.2.2\", \"rand_core 0.5.1\", \"rand_hc\"]\n\n[[package]]\nname = \"rand\"\nversion = \"0.8.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"34af8d1a0e25924bc5b7c43c079c942339d8f0a8b57c39049bef581b46327404\"\ndependencies = [\"libc\", \"rand_chacha 0.3.1\", \"rand_core 0.6.4\"]\n\n[[package]]\nname = \"rand_chacha\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f4c8ed856279c9737206bf725bf36935d8666ead7aa69b52be55af369d193402\"\ndependencies = [\"ppv-lite86\", \"rand_core 0.5.1\"]\n\n[[package]]\nname = \"rand_chacha\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e6c10a63a0fa32252be49d21e7709d4d4baf8d231c2dbce1eaa8141b9b127d88\"\ndependencies = [\"ppv-lite86\", \"rand_core 0.6.4\"]\n\n[[package]]\nname = \"rand_core\"\nversion = \"0.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"90bde5296fc891b0cef12a6d03ddccc162ce7b2aff54160af9338f8d40df6d19\"\ndependencies = [\"getrandom 0.1.16\"]\n\n[[package]]\nname = \"rand_core\"\nversion = \"0.6.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ec0be4795e2f6a28069bec0b5ff3e2ac9bafc99e6a9a7dc3547996c5c816922c\"\ndependencies = [\"getrandom 0.2.11\"]\n\n[[package]]\nname = \"rand_hc\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ca3129af7b92a17112d59ad498c6f81eaf463253766b90396d39ea7a39d6613c\"\ndependencies = [\"rand_core 0.5.1\"]\n\n[[package]]\nname = \"redox_syscall\"\nversion = \"0.3.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"567664f262709473930a4bf9e51bf2ebf3348f2e748ccc50dea20646858f8f29\"\ndependencies = [\"bitflags 1.3.2\"]\n\n[[package]]\nname = \"redox_syscall\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4722d768eff46b75989dd134e5c353f0d6296e5aaa3132e776cbdb56be7731aa\"\ndependencies = [\"bitflags 1.3.2\"]\n\n[[package]]\nname = \"redox_users\"\nversion = \"0.4.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a18479200779601e498ada4e8c1e1f50e3ee19deb0259c25825a98b5603b2cb4\"\ndependencies = [\"getrandom 0.2.11\", \"libredox\", \"thiserror\"]\n\n[[package]]\nname = \"reed-solomon-erasure\"\nversion = \"4.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a415a013dd7c5d4221382329a5a3482566da675737494935cbbbcdec04662f9d\"\ndependencies = [\"smallvec\"]\n\n[[package]]\nname = \"regex\"\nversion = \"1.10.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"380b951a9c5e80ddfd6136919eef32310721aa4aacd4889a8d39124b026ab343\"\ndependencies = [\"aho-corasick\", \"memchr\", \"regex-automata 0.4.3\", \"regex-syntax 0.8.2\"]\n\n[[package]]\nname = \"regex-automata\"\nversion = \"0.1.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6c230d73fb8d8c1b9c0b3135c5142a8acee3a0558fb8db5cf1cb65f8d7862132\"\ndependencies = [\"regex-syntax 0.6.29\"]\n\n[[package]]\nname = \"regex-automata\"\nversion = \"0.4.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5f804c7828047e88b2d32e2d7fe5a105da8ee3264f01902f796c8e067dc2483f\"\ndependencies = [\"aho-corasick\", \"memchr\", \"regex-syntax 0.8.2\"]\n\n[[package]]\nname = \"regex-syntax\"\nversion = \"0.6.29\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f162c6dd7b008981e4d40210aca20b4bd0f9b60ca9271061b07f78537722f2e1\"\n\n[[package]]\nname = \"regex-syntax\"\nversion = \"0.8.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c08c74e62047bb2de4ff487b251e4a92e24f48745648451635cec7d591162d9f\"\n\n[[package]]\nname = \"reqwest\"\nversion = \"0.11.22\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"046cd98826c46c2ac8ddecae268eb5c2e58628688a5fc7a2643704a73faba95b\"\ndependencies = [\"base64 0.21.5\", \"bytes\", \"encoding_rs\", \"futures-core\", \"futures-util\", \"h2\", \"http\", \"http-body\", \"hyper\", \"hyper-tls\", \"ipnet\", \"js-sys\", \"log\", \"mime\", \"native-tls\", \"once_cell\", \"percent-encoding\", \"pin-project-lite\", \"serde\", \"serde_json\", \"serde_urlencoded\", \"system-configuration\", \"tokio\", \"tokio-native-tls\", \"tower-service\", \"url\", \"wasm-bindgen\", \"wasm-bindgen-futures\", \"web-sys\", \"winreg\"]\n\n[[package]]\nname = \"ring\"\nversion = \"0.17.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fb0205304757e5d899b9c2e448b867ffd03ae7f988002e47cd24954391394d0b\"\ndependencies = [\"cc\", \"getrandom 0.2.11\", \"libc\", \"spin 0.9.8\", \"untrusted\", \"windows-sys\"]\n\n[[package]]\nname = \"ripemd\"\nversion = \"0.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bd124222d17ad93a644ed9d011a40f4fb64aa54275c08cc216524a9ea82fb09f\"\ndependencies = [\"digest 0.10.7\"]\n\n[[package]]\nname = \"rustc-hex\"\nversion = \"2.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3e75f6a532d0fd9f7f13144f392b6ad56a32696bfcd9c78f797f16bbb6f072d6\"\n\n[[package]]\nname = \"rustc_version\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bfa0f585226d2e68097d4f95d113b15b83a82e819ab25717ec0590d9584ef366\"\ndependencies = [\"semver\"]\n\n[[package]]\nname = \"rustix\"\nversion = \"0.38.25\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dc99bc2d4f1fed22595588a013687477aedf3cdcfb26558c559edb67b4d9b22e\"\ndependencies = [\"bitflags 2.4.1\", \"errno\", \"libc\", \"linux-raw-sys\", \"windows-sys\"]\n\n[[package]]\nname = \"rustls\"\nversion = \"0.21.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"629648aced5775d558af50b2b4c7b02983a04b312126d45eeead26e7caa498b9\"\ndependencies = [\"log\", \"ring\", \"rustls-webpki\", \"sct\"]\n\n[[package]]\nname = \"rustls-webpki\"\nversion = \"0.101.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8b6275d1ee7a1cd780b64aca7726599a1dbc893b1e64144529e55c3c2f745765\"\ndependencies = [\"ring\", \"untrusted\"]\n\n[[package]]\nname = \"rustversion\"\nversion = \"1.0.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7ffc183a10b4478d04cbbbfc96d0873219d962dd5accaff2ffbd4ceb7df837f4\"\n\n[[package]]\nname = \"ryu\"\nversion = \"1.0.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1ad4cc8da4ef723ed60bced201181d83791ad433213d8c24efffda1eec85d741\"\n\n[[package]]\nname = \"schannel\"\nversion = \"0.1.22\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0c3733bf4cf7ea0880754e19cb5a462007c4a8c1914bff372ccc95b464f1df88\"\ndependencies = [\"windows-sys\"]\n\n[[package]]\nname = \"schemars\"\nversion = \"0.8.16\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"45a28f4c49489add4ce10783f7911893516f15afe45d015608d41faca6bc4d29\"\ndependencies = [\"dyn-clone\", \"schemars_derive\", \"serde\", \"serde_json\"]\n\n[[package]]\nname = \"schemars_derive\"\nversion = \"0.8.16\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c767fd6fa65d9ccf9cf026122c1b555f2ef9a4f0cea69da4d7dbc3e258d30967\"\ndependencies = [\"proc-macro2\", \"quote\", \"serde_derive_internals\", \"syn 1.0.109\"]\n\n[[package]]\nname = \"scopeguard\"\nversion = \"1.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"94143f37725109f92c262ed2cf5e59bce7498c01bcc1502d7b9afe439a4e9f49\"\n\n[[package]]\nname = \"scroll\"\nversion = \"0.10.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fda28d4b4830b807a8b43f7b0e6b5df875311b3e7621d84577188c175b6ec1ec\"\n\n[[package]]\nname = \"scroll\"\nversion = \"0.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"04c565b551bafbef4157586fa379538366e4385d42082f255bfd96e4fe8519da\"\ndependencies = [\"scroll_derive\"]\n\n[[package]]\nname = \"scroll_derive\"\nversion = \"0.11.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1db149f81d46d2deba7cd3c50772474707729550221e69588478ebf9ada425ae\"\ndependencies = [\"proc-macro2\", \"quote\", \"syn 2.0.39\"]\n\n[[package]]\nname = \"sct\"\nversion = \"0.7.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"da046153aa2352493d6cb7da4b6e5c0c057d8a1d0a9aa8560baffdd945acd414\"\ndependencies = [\"ring\", \"untrusted\"]\n\n[[package]]\nname = \"secp256k1\"\nversion = \"0.27.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"25996b82292a7a57ed3508f052cfff8640d38d32018784acd714758b43da9c8f\"\ndependencies = [\"rand 0.8.5\", \"secp256k1-sys\"]\n\n[[package]]\nname = \"secp256k1-sys\"\nversion = \"0.8.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"70a129b9e9efbfb223753b9163c4ab3b13cff7fd9c7f010fbac25ab4099fa07e\"\ndependencies = [\"cc\"]\n\n[[package]]\nname = \"security-framework\"\nversion = \"2.9.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"05b64fb303737d99b81884b2c63433e9ae28abebe5eb5045dcdd175dc2ecf4de\"\ndependencies = [\"bitflags 1.3.2\", \"core-foundation\", \"core-foundation-sys\", \"libc\", \"security-framework-sys\"]\n\n[[package]]\nname = \"security-framework-sys\"\nversion = \"2.9.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e932934257d3b408ed8f30db49d85ea163bfe74961f017f405b025af298f0c7a\"\ndependencies = [\"core-foundation-sys\", \"libc\"]\n\n[[package]]\nname = \"semver\"\nversion = \"1.0.20\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"836fa6a3e1e547f9a2c4040802ec865b5d85f4014efe00555d7090a3dcaa1090\"\ndependencies = [\"serde\"]\n\n[[package]]\nname = \"serde\"\nversion = \"1.0.193\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"25dd9975e68d0cb5aa1120c288333fc98731bd1dd12f561e468ea4728c042b89\"\ndependencies = [\"serde_derive\"]\n\n[[package]]\nname = \"serde_derive\"\nversion = \"1.0.193\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"43576ca501357b9b071ac53cdc7da8ef0cbd9493d8df094cd821777ea6e894d3\"\ndependencies = [\"proc-macro2\", \"quote\", \"syn 2.0.39\"]\n\n[[package]]\nname = \"serde_derive_internals\"\nversion = \"0.26.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"85bf8229e7920a9f636479437026331ce11aa132b4dde37d121944a44d6e5f3c\"\ndependencies = [\"proc-macro2\", \"quote\", \"syn 1.0.109\"]\n\n[[package]]\nname = \"serde_json\"\nversion = \"1.0.108\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3d1c7e3eac408d115102c4c24ad393e0821bb3a5df4d506a80f85f7a742a526b\"\ndependencies = [\"itoa\", \"ryu\", \"serde\"]\n\n[[package]]\nname = \"serde_path_to_error\"\nversion = \"0.1.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4beec8bce849d58d06238cb50db2e1c417cfeafa4c63f692b15c82b7c80f8335\"\ndependencies = [\"itoa\", \"serde\"]\n\n[[package]]\nname = \"serde_repr\"\nversion = \"0.1.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3081f5ffbb02284dda55132aa26daecedd7372a42417bbbab6f14ab7d6bb9145\"\ndependencies = [\"proc-macro2\", \"quote\", \"syn 2.0.39\"]\n\n[[package]]\nname = \"serde_urlencoded\"\nversion = \"0.7.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d3491c14715ca2294c4d6a88f15e84739788c1d030eed8c110436aafdaa2f3fd\"\ndependencies = [\"form_urlencoded\", \"itoa\", \"ryu\", \"serde\"]\n\n[[package]]\nname = \"serde_with\"\nversion = \"3.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"64cd236ccc1b7a29e7e2739f27c0b2dd199804abc4290e32f59f3b68d6405c23\"\ndependencies = [\"base64 0.21.5\", \"chrono\", \"hex\", \"indexmap 1.9.3\", \"indexmap 2.1.0\", \"serde\", \"serde_json\", \"serde_with_macros\", \"time\"]\n\n[[package]]\nname = \"serde_with_macros\"\nversion = \"3.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"93634eb5f75a2323b16de4748022ac4297f9e76b6dced2be287a099f41b5e788\"\ndependencies = [\"darling\", \"proc-macro2\", \"quote\", \"syn 2.0.39\"]\n\n[[package]]\nname = \"serde_yaml\"\nversion = \"0.9.27\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3cc7a1570e38322cfe4154732e5110f887ea57e22b76f4bfd32b5bdd3368666c\"\ndependencies = [\"indexmap 2.1.0\", \"itoa\", \"ryu\", \"serde\", \"unsafe-libyaml\"]\n\n[[package]]\nname = \"sha1\"\nversion = \"0.10.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e3bf829a2d51ab4a5ddf1352d8470c140cadc8301b2ae1789db023f01cedd6ba\"\ndependencies = [\"cfg-if 1.0.0\", \"cpufeatures\", \"digest 0.10.7\"]\n\n[[package]]\nname = \"sha2\"\nversion = \"0.9.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4d58a1e1bf39749807d89cf2d98ac2dfa0ff1cb3faa38fbb64dd88ac8013d800\"\ndependencies = [\"block-buffer 0.9.0\", \"cfg-if 1.0.0\", \"cpufeatures\", \"digest 0.9.0\", \"opaque-debug\"]\n\n[[package]]\nname = \"sha2\"\nversion = \"0.10.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"793db75ad2bcafc3ffa7c68b215fee268f537982cd901d132f89c6343f3a3dc8\"\ndependencies = [\"cfg-if 1.0.0\", \"cpufeatures\", \"digest 0.10.7\"]\n\n[[package]]\nname = \"sha3\"\nversion = \"0.10.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"75872d278a8f37ef87fa0ddbda7802605cb18344497949862c0d4dcb291eba60\"\ndependencies = [\"digest 0.10.7\", \"keccak\"]\n\n[[package]]\nname = \"sharded-slab\"\nversion = \"0.1.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f40ca3c46823713e0d4209592e8d6e826aa57e928f09752619fc696c499637f6\"\ndependencies = [\"lazy_static\"]\n\n[[package]]\nname = \"signal-hook-registry\"\nversion = \"1.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d8229b473baa5980ac72ef434c4415e70c4b5e71b423043adb4ba059f89c99a1\"\ndependencies = [\"libc\"]\n\n[[package]]\nname = \"signature\"\nversion = \"1.6.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"74233d3b3b2f6d4b006dc19dee745e73e2a6bfb6f93607cd3b02bd5b00797d7c\"\n\n[[package]]\nname = \"siphasher\"\nversion = \"0.3.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"38b58827f4464d87d377d175e90bf58eb00fd8716ff0a62f80356b5e61555d0d\"\n\n[[package]]\nname = \"slab\"\nversion = \"0.4.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8f92a496fb766b417c996b9c5e57daf2f7ad3b0bebe1ccfca4856390e3d3bb67\"\ndependencies = [\"autocfg\"]\n\n[[package]]\nname = \"smallvec\"\nversion = \"1.13.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3c5e1a9a646d36c3599cd173a41282daf47c44583ad367b8e6837255952e5c67\"\n\n[[package]]\nname = \"smart-default\"\nversion = \"0.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"133659a15339456eeeb07572eb02a91c91e9815e9cbc89566944d2c8d3efdbf6\"\ndependencies = [\"proc-macro2\", \"quote\", \"syn 1.0.109\"]\n\n[[package]]\nname = \"socket2\"\nversion = \"0.4.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9f7916fc008ca5542385b89a3d3ce689953c143e9304a9bf8beec1de48994c0d\"\ndependencies = [\"libc\", \"winapi\"]\n\n[[package]]\nname = \"spin\"\nversion = \"0.5.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6e63cff320ae2c57904679ba7cb63280a3dc4613885beafb148ee7bf9aa9042d\"\n\n[[package]]\nname = \"spin\"\nversion = \"0.9.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6980e8d7511241f8acf4aebddbb1ff938df5eebe98691418c4468d0b72a96a67\"\n\n[[package]]\nname = \"stable_deref_trait\"\nversion = \"1.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a8f112729512f8e442d81f95a8a7ddf2b7c6b8a1a6f509a95864142b30cab2d3\"\n\n[[package]]\nname = \"static_assertions\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a2eb9349b6444b326872e140eb1cf5e7c522154d69e7a0ffb0fb81c06b37543f\"\n\n[[package]]\nname = \"string_cache\"\nversion = \"0.8.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f91138e76242f575eb1d3b38b4f1362f10d3a43f47d182a5b359af488a02293b\"\ndependencies = [\"new_debug_unreachable\", \"once_cell\", \"parking_lot\", \"phf_shared\", \"precomputed-hash\", \"serde\"]\n\n[[package]]\nname = \"strsim\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"73473c0e59e6d5812c5dfe2a064a6444949f089e20eec9a2e5506596494e4623\"\n\n[[package]]\nname = \"strum\"\nversion = \"0.24.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"063e6045c0e62079840579a7e47a355ae92f60eb74daaf156fb1e84ba164e63f\"\ndependencies = [\"strum_macros\"]\n\n[[package]]\nname = \"strum_macros\"\nversion = \"0.24.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1e385be0d24f186b4ce2f9982191e7101bb737312ad61c1f2f984f34bcf85d59\"\ndependencies = [\"heck 0.4.1\", \"proc-macro2\", \"quote\", \"rustversion\", \"syn 1.0.109\"]\n\n[[package]]\nname = \"subtle\"\nversion = \"2.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"81cdd64d312baedb58e21336b31bc043b77e01cc99033ce76ef539f78e965ebc\"\n\n[[package]]\nname = \"symbolic-common\"\nversion = \"8.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f551f902d5642e58039aee6a9021a61037926af96e071816361644983966f540\"\ndependencies = [\"debugid\", \"memmap2\", \"stable_deref_trait\", \"uuid\"]\n\n[[package]]\nname = \"symbolic-debuginfo\"\nversion = \"8.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1165dabf9fc1d6bb6819c2c0e27c8dd0e3068d2c53cf186d319788e96517f0d6\"\ndependencies = [\"bitvec 1.0.1\", \"dmsort\", \"elementtree\", \"fallible-iterator\", \"flate2\", \"gimli\", \"goblin\", \"lazy_static\", \"lazycell\", \"nom\", \"nom-supreme\", \"parking_lot\", \"pdb\", \"regex\", \"scroll 0.11.0\", \"serde\", \"serde_json\", \"smallvec\", \"symbolic-common\", \"thiserror\", \"wasmparser\", \"zip 0.5.13\"]\n\n[[package]]\nname = \"syn\"\nversion = \"1.0.109\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"72b64191b275b66ffe2469e8af2c1cfe3bafa67b529ead792a6d0160888b4237\"\ndependencies = [\"proc-macro2\", \"quote\", \"unicode-ident\"]\n\n[[package]]\nname = \"syn\"\nversion = \"2.0.39\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"23e78b90f2fcf45d3e842032ce32e3f2d1545ba6636271dcbf24fa306d87be7a\"\ndependencies = [\"proc-macro2\", \"quote\", \"unicode-ident\"]\n\n[[package]]\nname = \"syn_derive\"\nversion = \"0.1.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1329189c02ff984e9736652b1631330da25eaa6bc639089ed4915d25446cbe7b\"\ndependencies = [\"proc-macro-error\", \"proc-macro2\", \"quote\", \"syn 2.0.39\"]\n\n[[package]]\nname = \"sync_wrapper\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2047c6ded9c721764247e62cd3b03c09ffc529b2ba5b10ec482ae507a4a70160\"\n\n[[package]]\nname = \"system-configuration\"\nversion = \"0.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ba3a3adc5c275d719af8cb4272ea1c4a6d668a777f37e115f6d11ddbc1c8e0e7\"\ndependencies = [\"bitflags 1.3.2\", \"core-foundation\", \"system-configuration-sys\"]\n\n[[package]]\nname = \"system-configuration-sys\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a75fb188eb626b924683e3b95e3a48e63551fcfb51949de2f06a9d91dbee93c9\"\ndependencies = [\"core-foundation-sys\", \"libc\"]\n\n[[package]]\nname = \"tap\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"55937e1799185b12863d447f42597ed69d9928686b8d88a1df17376a097d8369\"\n\n[[package]]\nname = \"tar\"\nversion = \"0.4.40\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b16afcea1f22891c49a00c751c7b63b2233284064f11a200fc624137c51e2ddb\"\ndependencies = [\"filetime\", \"libc\", \"xattr\"]\n\n[[package]]\nname = \"tempfile\"\nversion = \"3.8.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7ef1adac450ad7f4b3c28589471ade84f25f731a7a0fe30d71dfa9f60fd808e5\"\ndependencies = [\"cfg-if 1.0.0\", \"fastrand\", \"redox_syscall 0.4.1\", \"rustix\", \"windows-sys\"]\n\n[[package]]\nname = \"termcolor\"\nversion = \"1.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ff1bc3d3f05aff0403e8ac0d92ced918ec05b666a43f83297ccef5bea8a3d449\"\ndependencies = [\"winapi-util\"]\n\n[[package]]\nname = \"textwrap\"\nversion = \"0.16.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"222a222a5bfe1bba4a77b45ec488a741b3cb8872e5e499451fd7d0129c9c7c3d\"\n\n[[package]]\nname = \"thiserror\"\nversion = \"1.0.50\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f9a7210f5c9a7156bb50aa36aed4c95afb51df0df00713949448cf9e97d382d2\"\ndependencies = [\"thiserror-impl\"]\n\n[[package]]\nname = \"thiserror-impl\"\nversion = \"1.0.50\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"266b2e40bc00e5a6c09c3584011e08b06f123c00362c92b975ba9843aaaa14b8\"\ndependencies = [\"proc-macro2\", \"quote\", \"syn 2.0.39\"]\n\n[[package]]\nname = \"thread_local\"\nversion = \"1.1.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3fdd6f064ccff2d6567adcb3873ca630700f00b5ad3f060c25b5dcfd9a4ce152\"\ndependencies = [\"cfg-if 1.0.0\", \"once_cell\"]\n\n[[package]]\nname = \"time\"\nversion = \"0.3.30\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c4a34ab300f2dee6e562c10a046fc05e358b29f9bf92277f30c3c8d82275f6f5\"\ndependencies = [\"deranged\", \"itoa\", \"powerfmt\", \"serde\", \"time-core\", \"time-macros\"]\n\n[[package]]\nname = \"time-core\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ef927ca75afb808a4d64dd374f00a2adf8d0fcff8e7b184af886c3c87ec4a3f3\"\n\n[[package]]\nname = \"time-macros\"\nversion = \"0.2.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4ad70d68dba9e1f8aceda7aa6711965dfec1cac869f311a51bd08b3a2ccbce20\"\ndependencies = [\"time-core\"]\n\n[[package]]\nname = \"tinyvec\"\nversion = \"1.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"87cc5ceb3875bb20c2890005a4e226a4651264a5c75edb2421b52861a0a0cb50\"\ndependencies = [\"tinyvec_macros\"]\n\n[[package]]\nname = \"tinyvec_macros\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1f3ccbac311fea05f86f61904b462b55fb3df8837a366dfc601a0161d0532f20\"\n\n[[package]]\nname = \"tokio\"\nversion = \"1.28.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"94d7b1cfd2aa4011f2de74c2c4c63665e27a71006b0a192dcd2710272e73dfa2\"\ndependencies = [\"autocfg\", \"bytes\", \"libc\", \"mio\", \"num_cpus\", \"parking_lot\", \"pin-project-lite\", \"signal-hook-registry\", \"socket2\", \"tokio-macros\", \"windows-sys\"]\n\n[[package]]\nname = \"tokio-io-timeout\"\nversion = \"1.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"30b74022ada614a1b4834de765f9bb43877f910cc8ce4be40e89042c9223a8bf\"\ndependencies = [\"pin-project-lite\", \"tokio\"]\n\n[[package]]\nname = \"tokio-macros\"\nversion = \"2.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"630bdcf245f78637c13ec01ffae6187cca34625e8c63150d424b59e55af2675e\"\ndependencies = [\"proc-macro2\", \"quote\", \"syn 2.0.39\"]\n\n[[package]]\nname = \"tokio-native-tls\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bbae76ab933c85776efabc971569dd6119c580d8f5d448769dec1764bf796ef2\"\ndependencies = [\"native-tls\", \"tokio\"]\n\n[[package]]\nname = \"tokio-retry\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7f57eb36ecbe0fc510036adff84824dd3c24bb781e21bfa67b69d556aa85214f\"\ndependencies = [\"pin-project\", \"rand 0.8.5\", \"tokio\"]\n\n[[package]]\nname = \"tokio-stream\"\nversion = \"0.1.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"397c988d37662c7dda6d2208364a706264bf3d6138b11d436cbac0ad38832842\"\ndependencies = [\"futures-core\", \"pin-project-lite\", \"tokio\"]\n\n[[package]]\nname = \"tokio-util\"\nversion = \"0.6.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"36943ee01a6d67977dd3f84a5a1d2efeb4ada3a1ae771cadfaa535d9d9fc6507\"\ndependencies = [\"bytes\", \"futures-core\", \"futures-sink\", \"log\", \"pin-project-lite\", \"tokio\"]\n\n[[package]]\nname = \"tokio-util\"\nversion = \"0.7.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5419f34732d9eb6ee4c3578b7989078579b7f039cbbb9ca2c4da015749371e15\"\ndependencies = [\"bytes\", \"futures-core\", \"futures-sink\", \"pin-project-lite\", \"tokio\", \"tracing\"]\n\n[[package]]\nname = \"toml\"\nversion = \"0.5.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f4f7f0dd8d50a853a531c426359045b1998f04219d88799810762cd4ad314234\"\ndependencies = [\"serde\"]\n\n[[package]]\nname = \"toml_datetime\"\nversion = \"0.6.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3550f4e9685620ac18a50ed434eb3aec30db8ba93b0287467bca5826ea25baf1\"\n\n[[package]]\nname = \"toml_edit\"\nversion = \"0.19.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1b5bb770da30e5cbfde35a2d7b9b8a2c4b8ef89548a7a6aeab5c9a576e3e7421\"\ndependencies = [\"indexmap 2.1.0\", \"toml_datetime\", \"winnow\"]\n\n[[package]]\nname = \"toml_edit\"\nversion = \"0.20.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"70f427fce4d84c72b5b732388bf4a9f4531b53f74e2887e3ecb2481f68f66d81\"\ndependencies = [\"indexmap 2.1.0\", \"toml_datetime\", \"winnow\"]\n\n[[package]]\nname = \"tonic\"\nversion = \"0.6.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ff08f4649d10a70ffa3522ca559031285d8e421d727ac85c60825761818f5d0a\"\ndependencies = [\"async-stream\", \"async-trait\", \"base64 0.13.1\", \"bytes\", \"futures-core\", \"futures-util\", \"h2\", \"http\", \"http-body\", \"hyper\", \"hyper-timeout\", \"percent-encoding\", \"pin-project\", \"prost\", \"prost-derive\", \"tokio\", \"tokio-stream\", \"tokio-util 0.6.10\", \"tower\", \"tower-layer\", \"tower-service\", \"tracing\", \"tracing-futures\"]\n\n[[package]]\nname = \"tonic-build\"\nversion = \"0.6.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9403f1bafde247186684b230dc6f38b5cd514584e8bec1dd32514be4745fa757\"\ndependencies = [\"proc-macro2\", \"prost-build\", \"quote\", \"syn 1.0.109\"]\n\n[[package]]\nname = \"tower\"\nversion = \"0.4.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b8fa9be0de6cf49e536ce1851f987bd21a43b771b09473c3549a6c853db37c1c\"\ndependencies = [\"futures-core\", \"futures-util\", \"indexmap 1.9.3\", \"pin-project\", \"pin-project-lite\", \"rand 0.8.5\", \"slab\", \"tokio\", \"tokio-util 0.7.10\", \"tower-layer\", \"tower-service\", \"tracing\"]\n\n[[package]]\nname = \"tower-http\"\nversion = \"0.4.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"61c5bb1d698276a2443e5ecfabc1008bf15a36c12e6a7176e7bf089ea9131140\"\ndependencies = [\"bitflags 2.4.1\", \"bytes\", \"futures-core\", \"futures-util\", \"http\", \"http-body\", \"http-range-header\", \"pin-project-lite\", \"tower-layer\", \"tower-service\", \"tracing\"]\n\n[[package]]\nname = \"tower-layer\"\nversion = \"0.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c20c8dbed6283a09604c3e69b4b7eeb54e298b8a600d4d5ecb5ad39de609f1d0\"\n\n[[package]]\nname = \"tower-service\"\nversion = \"0.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b6bc1c9ce2b5135ac7f93c72918fc37feb872bdc6a5533a8b85eb4b86bfdae52\"\n\n[[package]]\nname = \"tracing\"\nversion = \"0.1.40\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c3523ab5a71916ccf420eebdf5521fcef02141234bbc0b8a49f2fdc4544364ef\"\ndependencies = [\"log\", \"pin-project-lite\", \"tracing-attributes\", \"tracing-core\"]\n\n[[package]]\nname = \"tracing-appender\"\nversion = \"0.2.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3566e8ce28cc0a3fe42519fc80e6b4c943cc4c8cef275620eb8dac2d3d4e06cf\"\ndependencies = [\"crossbeam-channel\", \"thiserror\", \"time\", \"tracing-subscriber\"]\n\n[[package]]\nname = \"tracing-attributes\"\nversion = \"0.1.27\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"34704c8d6ebcbc939824180af020566b01a7c01f80641264eba0999f6c2b6be7\"\ndependencies = [\"proc-macro2\", \"quote\", \"syn 2.0.39\"]\n\n[[package]]\nname = \"tracing-core\"\nversion = \"0.1.32\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c06d3da6113f116aaee68e4d601191614c9053067f9ab7f6edbcb161237daa54\"\ndependencies = [\"once_cell\", \"valuable\"]\n\n[[package]]\nname = \"tracing-futures\"\nversion = \"0.2.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"97d095ae15e245a057c8e8451bab9b3ee1e1f68e9ba2b4fbc18d0ac5237835f2\"\ndependencies = [\"pin-project\", \"tracing\"]\n\n[[package]]\nname = \"tracing-log\"\nversion = \"0.1.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f751112709b4e791d8ce53e32c4ed2d353565a795ce84da2285393f41557bdf2\"\ndependencies = [\"log\", \"once_cell\", \"tracing-core\"]\n\n[[package]]\nname = \"tracing-log\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ee855f1f400bd0e5c02d150ae5de3840039a3f54b025156404e34c23c03f47c3\"\ndependencies = [\"log\", \"once_cell\", \"tracing-core\"]\n\n[[package]]\nname = \"tracing-opentelemetry\"\nversion = \"0.17.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fbbe89715c1dbbb790059e2565353978564924ee85017b5fff365c872ff6721f\"\ndependencies = [\"once_cell\", \"opentelemetry\", \"tracing\", \"tracing-core\", \"tracing-log 0.1.4\", \"tracing-subscriber\"]\n\n[[package]]\nname = \"tracing-subscriber\"\nversion = \"0.3.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ad0f048c97dbd9faa9b7df56362b8ebcaa52adb06b498c050d2f4e32f90a7a8b\"\ndependencies = [\"matchers\", \"nu-ansi-term\", \"once_cell\", \"regex\", \"sharded-slab\", \"smallvec\", \"thread_local\", \"tracing\", \"tracing-core\", \"tracing-log 0.2.0\"]\n\n[[package]]\nname = \"treediff\"\nversion = \"4.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"52984d277bdf2a751072b5df30ec0377febdb02f7696d64c2d7d54630bac4303\"\ndependencies = [\"serde_json\"]\n\n[[package]]\nname = \"try-lock\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3528ecfd12c466c6f163363caf2d02a71161dd5e1cc6ae7b34207ea2d42d81ed\"\n\n[[package]]\nname = \"typenum\"\nversion = \"1.17.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"42ff0bf0c66b8238c6f3b578df37d0b7848e55df8577b3f74f92a69acceeb825\"\n\n[[package]]\nname = \"uint\"\nversion = \"0.9.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"76f64bba2c53b04fcab63c01a7d7427eadc821e3bc48c34dc9ba29c501164b52\"\ndependencies = [\"byteorder\", \"crunchy\", \"hex\", \"static_assertions\"]\n\n[[package]]\nname = \"unicode-bidi\"\nversion = \"0.3.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"92888ba5573ff080736b3648696b70cafad7d250551175acbaa4e0385b3e1460\"\n\n[[package]]\nname = \"unicode-ident\"\nversion = \"1.0.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3354b9ac3fae1ff6755cb6db53683adb661634f67557942dea4facebec0fee4b\"\n\n[[package]]\nname = \"unicode-normalization\"\nversion = \"0.1.22\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5c5713f0fc4b5db668a2ac63cdb7bb4469d8c9fed047b1d0292cc7b0ce2ba921\"\ndependencies = [\"tinyvec\"]\n\n[[package]]\nname = \"unicode-segmentation\"\nversion = \"1.10.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1dd624098567895118886609431a7c3b8f516e41d30e0643f03d94592a147e36\"\n\n[[package]]\nname = \"unsafe-libyaml\"\nversion = \"0.2.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f28467d3e1d3c6586d8f25fa243f544f5800fec42d97032474e17222c2b75cfa\"\n\n[[package]]\nname = \"untrusted\"\nversion = \"0.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8ecb6da28b8a351d773b68d5825ac39017e680750f980f3a1a85cd8dd28a47c1\"\n\n[[package]]\nname = \"ureq\"\nversion = \"2.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7830e33f6e25723d41a63f77e434159dad02919f18f55a512b5f16f3b1d77138\"\ndependencies = [\"base64 0.21.5\", \"flate2\", \"log\", \"once_cell\", \"rustls\", \"rustls-webpki\", \"url\", \"webpki-roots\"]\n\n[[package]]\nname = \"url\"\nversion = \"2.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"143b538f18257fac9cad154828a57c6bf5157e1aa604d4816b5995bf6de87ae5\"\ndependencies = [\"form_urlencoded\", \"idna\", \"percent-encoding\", \"serde\"]\n\n[[package]]\nname = \"utf8parse\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"711b9620af191e0cdc7468a8d14e709c3dcdb115b36f838e601583af800a370a\"\n\n[[package]]\nname = \"uuid\"\nversion = \"0.8.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bc5cf98d8186244414c848017f0e2676b3fcb46807f6668a97dfe67359a3c4b7\"\n\n[[package]]\nname = \"valuable\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"830b7e5d4d90034032940e4ace0d9a9a057e7a45cd94e6c007832e39edb82f6d\"\n\n[[package]]\nname = \"vcpkg\"\nversion = \"0.2.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"accd4ea62f7bb7a82fe23066fb0957d48ef677f6eeb8215f372f52e48bb32426\"\n\n[[package]]\nname = \"version_check\"\nversion = \"0.9.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"49874b5167b65d7193b8aba1567f5c7d93d001cafc34600cee003eda787e483f\"\n\n[[package]]\nname = \"want\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bfa7760aed19e106de2c7c0b581b509f2f25d3dacaf737cb82ac61bc6d760b0e\"\ndependencies = [\"try-lock\"]\n\n[[package]]\nname = \"wasi\"\nversion = \"0.9.0+wasi-snapshot-preview1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cccddf32554fecc6acb585f82a32a72e28b48f8c4c1883ddfeeeaa96f7d8e519\"\n\n[[package]]\nname = \"wasi\"\nversion = \"0.11.0+wasi-snapshot-preview1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423\"\n\n[[package]]\nname = \"wasm-bindgen\"\nversion = \"0.2.88\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7daec296f25a1bae309c0cd5c29c4b260e510e6d813c286b19eaadf409d40fce\"\ndependencies = [\"cfg-if 1.0.0\", \"wasm-bindgen-macro\"]\n\n[[package]]\nname = \"wasm-bindgen-backend\"\nversion = \"0.2.88\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e397f4664c0e4e428e8313a469aaa58310d302159845980fd23b0f22a847f217\"\ndependencies = [\"bumpalo\", \"log\", \"once_cell\", \"proc-macro2\", \"quote\", \"syn 2.0.39\", \"wasm-bindgen-shared\"]\n\n[[package]]\nname = \"wasm-bindgen-futures\"\nversion = \"0.4.38\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9afec9963e3d0994cac82455b2b3502b81a7f40f9a0d32181f7528d9f4b43e02\"\ndependencies = [\"cfg-if 1.0.0\", \"js-sys\", \"wasm-bindgen\", \"web-sys\"]\n\n[[package]]\nname = \"wasm-bindgen-macro\"\nversion = \"0.2.88\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5961017b3b08ad5f3fe39f1e79877f8ee7c23c5e5fd5eb80de95abc41f1f16b2\"\ndependencies = [\"quote\", \"wasm-bindgen-macro-support\"]\n\n[[package]]\nname = \"wasm-bindgen-macro-support\"\nversion = \"0.2.88\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c5353b8dab669f5e10f5bd76df26a9360c748f054f862ff5f3f8aae0c7fb3907\"\ndependencies = [\"proc-macro2\", \"quote\", \"syn 2.0.39\", \"wasm-bindgen-backend\", \"wasm-bindgen-shared\"]\n\n[[package]]\nname = \"wasm-bindgen-shared\"\nversion = \"0.2.88\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0d046c5d029ba91a1ed14da14dca44b68bf2f124cfbaf741c54151fdb3e0750b\"\n\n[[package]]\nname = \"wasmparser\"\nversion = \"0.83.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"718ed7c55c2add6548cca3ddd6383d738cd73b892df400e96b9aa876f0141d7a\"\n\n[[package]]\nname = \"web-sys\"\nversion = \"0.3.65\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5db499c5f66323272151db0e666cd34f78617522fb0c1604d31a27c50c206a85\"\ndependencies = [\"js-sys\", \"wasm-bindgen\"]\n\n[[package]]\nname = \"webpki-roots\"\nversion = \"0.25.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"14247bb57be4f377dfb94c72830b8ce8fc6beac03cf4bf7b9732eadd414123fc\"\n\n[[package]]\nname = \"wee_alloc\"\nversion = \"0.4.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dbb3b5a6b2bb17cb6ad44a2e68a43e8d2722c997da10e928665c72ec6c0a0b8e\"\ndependencies = [\"cfg-if 0.1.10\", \"libc\", \"memory_units\", \"winapi\"]\n\n[[package]]\nname = \"which\"\nversion = \"4.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"87ba24419a2078cd2b0f2ede2691b6c66d8e47836da3b6db8265ebad47afbfc7\"\ndependencies = [\"either\", \"home\", \"once_cell\", \"rustix\"]\n\n[[package]]\nname = \"which\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9bf3ea8596f3a0dd5980b46430f2058dfe2c36a27ccfbb1845d6fbfcd9ba6e14\"\ndependencies = [\"either\", \"home\", \"once_cell\", \"rustix\", \"windows-sys\"]\n\n[[package]]\nname = \"winapi\"\nversion = \"0.3.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419\"\ndependencies = [\"winapi-i686-pc-windows-gnu\", \"winapi-x86_64-pc-windows-gnu\"]\n\n[[package]]\nname = \"winapi-i686-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6\"\n\n[[package]]\nname = \"winapi-util\"\nversion = \"0.1.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f29e6f9198ba0d26b4c9f07dbe6f9ed633e1f3d5b8b414090084349e46a52596\"\ndependencies = [\"winapi\"]\n\n[[package]]\nname = \"winapi-x86_64-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f\"\n\n[[package]]\nname = \"windows-core\"\nversion = \"0.51.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f1f8cf84f35d2db49a46868f947758c7a1138116f7fac3bc844f43ade1292e64\"\ndependencies = [\"windows-targets\"]\n\n[[package]]\nname = \"windows-sys\"\nversion = \"0.48.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"677d2418bec65e3338edb076e806bc1ec15693c5d0104683f2efe857f61056a9\"\ndependencies = [\"windows-targets\"]\n\n[[package]]\nname = \"windows-targets\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9a2fa6e2155d7247be68c096456083145c183cbbbc2764150dda45a87197940c\"\ndependencies = [\"windows_aarch64_gnullvm\", \"windows_aarch64_msvc\", \"windows_i686_gnu\", \"windows_i686_msvc\", \"windows_x86_64_gnu\", \"windows_x86_64_gnullvm\", \"windows_x86_64_msvc\"]\n\n[[package]]\nname = \"windows_aarch64_gnullvm\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2b38e32f0abccf9987a4e3079dfb67dcd799fb61361e53e2882c3cbaf0d905d8\"\n\n[[package]]\nname = \"windows_aarch64_msvc\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dc35310971f3b2dbbf3f0690a219f40e2d9afcf64f9ab7cc1be722937c26b4bc\"\n\n[[package]]\nname = \"windows_i686_gnu\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a75915e7def60c94dcef72200b9a8e58e5091744960da64ec734a6c6e9b3743e\"\n\n[[package]]\nname = \"windows_i686_msvc\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8f55c233f70c4b27f66c523580f78f1004e8b5a8b659e05a4eb49d4166cca406\"\n\n[[package]]\nname = \"windows_x86_64_gnu\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"53d40abd2583d23e4718fddf1ebec84dbff8381c07cae67ff7768bbf19c6718e\"\n\n[[package]]\nname = \"windows_x86_64_gnullvm\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0b7b52767868a23d5bab768e390dc5f5c55825b6d30b86c844ff2dc7414044cc\"\n\n[[package]]\nname = \"windows_x86_64_msvc\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ed94fce61571a4006852b7389a063ab983c02eb1bb37b47f8272ce92d06d9538\"\n\n[[package]]\nname = \"winnow\"\nversion = \"0.5.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"829846f3e3db426d4cee4510841b71a8e58aa2a76b1132579487ae430ccd9c7b\"\ndependencies = [\"memchr\"]\n\n[[package]]\nname = \"winreg\"\nversion = \"0.50.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"524e57b2c537c0f9b1e69f1965311ec12182b4122e45035b1508cd24d2adadb1\"\ndependencies = [\"cfg-if 1.0.0\", \"windows-sys\"]\n\n[[package]]\nname = \"wyz\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"85e60b0d1b5f99db2556934e21937020776a5d31520bf169e851ac44e6420214\"\n\n[[package]]\nname = \"wyz\"\nversion = \"0.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"05f360fc0b24296329c78fda852a1e9ae82de9cf7b27dae4b7f62f118f77b9ed\"\ndependencies = [\"tap\"]\n\n[[package]]\nname = \"xattr\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f4686009f71ff3e5c4dbcf1a282d0a44db3f021ba69350cd42086b3e5f1c6985\"\ndependencies = [\"libc\"]\n\n[[package]]\nname = \"xml-rs\"\nversion = \"0.8.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0fcb9cbac069e033553e8bb871be2fbdffcab578eb25bd0f7c508cedc6dcd75a\"\n\n[[package]]\nname = \"zerocopy\"\nversion = \"0.7.26\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e97e415490559a91254a2979b4829267a57d2fcd741a98eee8b722fb57289aa0\"\ndependencies = [\"zerocopy-derive\"]\n\n[[package]]\nname = \"zerocopy-derive\"\nversion = \"0.7.26\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dd7e48ccf166952882ca8bd778a43502c64f33bf94c12ebe2a7f08e5a0f6689f\"\ndependencies = [\"proc-macro2\", \"quote\", \"syn 2.0.39\"]\n\n[[package]]\nname = \"zeroize\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4756f7db3f7b5574938c3eb1c117038b8e07f95ee6718c0efad4ac21508f1efd\"\ndependencies = [\"zeroize_derive\"]\n\n[[package]]\nname = \"zeroize_derive\"\nversion = \"1.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ce36e65b0d2999d2aafac989fb249189a141aee1f53c612c1f37d72631959f69\"\ndependencies = [\"proc-macro2\", \"quote\", \"syn 2.0.39\"]\n\n[[package]]\nname = \"zeropool-bn\"\nversion = \"0.5.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"71e61de68ede9ffdd69c01664f65a178c5188b73f78faa21f0936016a888ff7c\"\ndependencies = [\"borsh 0.9.3\", \"byteorder\", \"crunchy\", \"lazy_static\", \"rand 0.8.5\", \"rustc-hex\"]\n\n[[package]]\nname = \"zip\"\nversion = \"0.5.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"93ab48844d61251bb3835145c521d88aa4031d7139e8485990f60ca911fa0815\"\ndependencies = [\"byteorder\", \"crc32fast\", \"flate2\", \"thiserror\"]\n\n[[package]]\nname = \"zip\"\nversion = \"0.6.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"760394e246e4c28189f19d488c058bf16f564016aefac5d32bb1f3b51d5e9261\"\ndependencies = [\"aes\", \"byteorder\", \"bzip2\", \"constant_time_eq\", \"crc32fast\", \"crossbeam-utils\", \"flate2\", \"hmac\", \"pbkdf2\", \"sha1\", \"time\", \"zstd\"]\n\n[[package]]\nname = \"zstd\"\nversion = \"0.11.2+zstd.1.5.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"20cc960326ece64f010d2d2107537f26dc589a6573a316bd5b1dba685fa5fde4\"\ndependencies = [\"zstd-safe\"]\n\n[[package]]\nname = \"zstd-safe\"\nversion = \"5.0.2+zstd.1.5.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1d2a5585e04f9eea4b2a3d1eca508c4dee9592a89ef6f450c11719da0726f4db\"\ndependencies = [\"libc\", \"zstd-sys\"]\n\n[[package]]\nname = \"zstd-sys\"\nversion = \"2.0.9+zstd.1.5.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9e16efa8a874a0481a574084d34cc26fdb3b99627480f785888deb6386506656\"\ndependencies = [\"cc\", \"pkg-config\"]\n",
    "rust_toolchain_file": [
      "Toml",
      "[toolchain]\n# This specifies the version of Rust we use to build.\n# Individual crates in the workspace may support a lower version, as indicated by `rust-version` field in each crate's `Cargo.toml`.\n# The version specified below, should be at least as high as the maximum `rust-version` within the workspace.\nchannel    = \"1.75.0\"\ncomponents = [ \"rustfmt\", \"rust-src\" ]\ntargets    = [ \"wasm32-unknown-unknown\" ]\n"
    ]
  }
}

'''
'''--- rust-toolchain.toml ---
[toolchain]
# This specifies the version of Rust we use to build.
# Individual crates in the workspace may support a lower version, as indicated by `rust-version` field in each crate's `Cargo.toml`.
# The version specified below, should be at least as high as the maximum `rust-version` within the workspace.
channel    = "1.75.0"
components = [ "rustfmt", "rust-src" ]
targets    = [ "wasm32-unknown-unknown" ]

'''
'''--- scripts/enrich.sh ---
#!/usr/bin/env bash
set -euo pipefail

JSON_FILE=${1:-"http-config.template.json"}
ENRICHED_JSON_FILE=${2:-"http-config.json"}

# Read the JSON file
JSON_CONTENT=$(cat "$JSON_FILE")

# Replace the placeholders with environment variable values
JSON_CONTENT=$(echo "$JSON_CONTENT" | sed "s/HTTP_API_TEST_ACCOUNT_ID/$HTTP_API_TEST_ACCOUNT_ID/g")
JSON_CONTENT=$(echo "$JSON_CONTENT" | sed "s/HTTP_API_TEST_SECRET_KEY/$HTTP_API_TEST_SECRET_KEY/g")
JSON_CONTENT=$(echo "$JSON_CONTENT" | sed "s/HTTP_API_TEST_NAMESPACE/$HTTP_API_TEST_NAMESPACE/g")

# Write the updated JSON content back to the file
echo "$JSON_CONTENT" > "$ENRICHED_JSON_FILE"

'''
'''--- taplo.toml ---
exclude = [ ".direnv/**", "**/node_modules/**", "cdk-stack/**", "op-stack/**", "bin/light-client/**" ]
include = [ "**/*.toml" ]

[formatting]
align_comments      = false
align_entries       = true
allowed_blank_lines = 1
array_auto_collapse = true
array_auto_expand   = true
column_width        = 170
compact_arrays      = false
reorder_keys        = true

'''
'''--- test/genesis.json ---
{
  "protocol_version": 65,
  "genesis_time": "2024-04-16T16:12:12.528118425Z",
  "chain_id": "test-chain-2ib9j",
  "genesis_height": 57200,
  "num_block_producer_seats": 50,
  "num_block_producer_seats_per_shard": [
    50
  ],
  "avg_hidden_validator_seats_per_shard": [
    0
  ],
  "dynamic_resharding": false,
  "protocol_upgrade_stake_threshold": [
    4,
    5
  ],
  "epoch_length": 500,
  "gas_limit": 1000000000000000,
  "min_gas_price": "100000000",
  "max_gas_price": "10000000000000000000000",
  "block_producer_kickout_threshold": 90,
  "chunk_producer_kickout_threshold": 90,
  "online_min_threshold": [
    9,
    10
  ],
  "online_max_threshold": [
    99,
    100
  ],
  "gas_price_adjustment_rate": [
    1,
    100
  ],
  "validators": [
    {
      "account_id": "test.near",
      "public_key": "ed25519:5qJULsTNSQT1R5FAacVKNk3R3sgh8rfpwnJcqLnC5u1F",
      "amount": "52068636728713882428230045954576"
    }
  ],
  "transaction_validity_period": 100,
  "protocol_reward_rate": [
    1,
    10
  ],
  "max_inflation_rate": [
    1,
    20
  ],
  "total_supply": "2052069523631687992558491787878153",
  "num_blocks_per_year": 31536000,
  "protocol_treasury_account": "test.near",
  "fishermen_threshold": "10000000000000000000000000",
  "minimum_stake_divisor": 10,
  "shard_layout": {
    "V0": {
      "num_shards": 1,
      "version": 0
    }
  },
  "num_chunk_only_producer_seats": 300,
  "minimum_validators_per_shard": 1,
  "max_kickout_stake_perc": 100,
  "minimum_stake_ratio": [
    1,
    6250
  ],
  "use_production_config": false,
  "records": [
    {
      "Account": {
        "account_id": "da.test.near",
        "account": {
          "amount": "15098813923077058800000000",
          "locked": "0",
          "code_hash": "DhvFqpsCzChWkrYeUrZJ6gWPjBU6Tth8i3BHsT8f7Vc8",
          "storage_usage": 8544,
          "version": "V1"
        }
      }
    },
    {
      "Account": {
        "account_id": "near",
        "account": {
          "amount": "1000000000000000000000000000000000",
          "locked": "0",
          "code_hash": "11111111111111111111111111111111",
          "storage_usage": 182,
          "version": "V1"
        }
      }
    },
    {
      "Account": {
        "account_id": "test.near",
        "account": {
          "amount": "1000000871804160187053202941923577",
          "locked": "52068636728713882428230045954576",
          "code_hash": "DhvFqpsCzChWkrYeUrZJ6gWPjBU6Tth8i3BHsT8f7Vc8",
          "storage_usage": 8718,
          "version": "V1"
        }
      }
    },
    {
      "Contract": {
        "account_id": "da.test.near",
        "code": ""
      }
    },
    {
      "Contract": {
        "account_id": "test.near",
        "code": ""
      }
    },
    {
      "AccessKey": {
        "account_id": "da.test.near",
        "public_key": "ed25519:HoYqPhyxiHsMARwuT5RvMZH3q9YoACMyvJWo3J8YqxYp",
        "access_key": {
          "nonce": 51698000003,
          "permission": "FullAccess"
        }
      }
    },
    {
      "AccessKey": {
        "account_id": "near",
        "public_key": "ed25519:546XB2oHhj7PzUKHiH9Xve3Ze5q1JiW2WTh6abXFED3c",
        "access_key": {
          "nonce": 0,
          "permission": "FullAccess"
        }
      }
    },
    {
      "AccessKey": {
        "account_id": "test.near",
        "public_key": "ed25519:rR32DunDCh9ArAFQW1xgJHxYEEbaCDCc88R3XwjD3j1",
        "access_key": {
          "nonce": 50240000014,
          "permission": "FullAccess"
        }
      }
    },
    {
      "AccessKey": {
        "account_id": "test.near",
        "public_key": "ed25519:5qJULsTNSQT1R5FAacVKNk3R3sgh8rfpwnJcqLnC5u1F",
        "access_key": {
          "nonce": 2414,
          "permission": "FullAccess"
        }
      }
    },
    {
      "Data": {
        "account_id": "test.near",
        "data_key": "AA==",
        "value": "AQ=="
      }
    },
    {
      "Data": {
        "account_id": "test.near",
        "data_key": "AQ==",
        "value": "dGVzdC5uZWFy"
      }
    }
  ]
}
'''
'''--- test/http-sidecar.json ---
{
  "account_id": "test.near",
  "secret_key": "ed25519:4dagBsEqCv3Ao5wa4KKFa57xNAH4wuBjh9wdTNYeCqDSeA9zE7fCnHSvWpU8t68jUpcCGqgfYwcH68suPaqmdcgm",
  "contract_id": "test.near",
  "network": "http://near-localnet:3030",
  "namespace": null
}

'''
'''--- test/node_key.json ---
{
  "account_id": "node",
  "public_key": "ed25519:7cPtaw4Q4Nn2d5SYZTz3JuHYojwxEPgRDeb5BRs5Buva",
  "secret_key": "ed25519:3iu8Pb1ogb7eNEeS2iJth5SZqnz7y35VQ7HBpzqa7LPdUEuXXjoeT5DyHmR5ygmhY4z8i9eYBotHZUBTZb2Viubx"
}

'''
'''--- test/validator_key.json ---
{
  "account_id": "test.near",
  "public_key": "ed25519:5qJULsTNSQT1R5FAacVKNk3R3sgh8rfpwnJcqLnC5u1F",
  "secret_key": "ed25519:4dagBsEqCv3Ao5wa4KKFa57xNAH4wuBjh9wdTNYeCqDSeA9zE7fCnHSvWpU8t68jUpcCGqgfYwcH68suPaqmdcgm"
}

'''