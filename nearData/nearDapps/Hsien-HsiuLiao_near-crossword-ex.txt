*GitHub Repository "Hsien-HsiuLiao/near-crossword-ex"*

'''--- .gitpod.yml ---
# This configuration file was automatically generated by Gitpod.
# Please adjust to your needs (see https://www.gitpod.io/docs/config-gitpod-file)
# and commit this file to your remote git repository to share the goodness with others.

tasks:
  - name: install wasm
    command: rustup target add wasm32-unknown-unknown

  - name: near-cli
    command: npm install -g near-cli
    command: near login
'''
'''--- Cargo.toml ---
[package]
name = "near-crossword-ex"
version = "0.1.0"
edition = "2021"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html
[lib]
crate-type = ["cdylib","rlib"]

[dependencies]
near-sdk = "4.0.0-pre.4"
hex = "0.4.3"
'''
'''--- README.md ---
https://www.near-sdk.io/zero-to-hero/basics/overview

https://stackoverflow.com/questions/56227766/why-must-a-wasm-library-in-rust-set-the-crate-type-to-cdylib

`chmod 744 build.sh`

Run the build script and expect to see the compiled Wasm file copied to the res folder, instead of buried in the default folder structure Rust sets up.

`./build.sh`

`npm install react-crossword-near` in front end folder
`npm install js-sha256`
`npm install near-api-js`

env CONTRACT_NAME=nearcrossword.hliao.testnet npm run start
'''
'''--- build.sh ---
#!/bin/bash
set -e

RUSTFLAGS='-C link-arg=-s' cargo build --target wasm32-unknown-unknown --release
cp target/wasm32-unknown-unknown/release/*.wasm ./res/
'''
'''--- frontend/README.md ---
# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in your browser.

The page will reload when you make changes.\
You may also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can't go back!**

If you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.

You don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `npm run build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)

'''
'''--- frontend/package.json ---
{
  "name": "frontend",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@testing-library/jest-dom": "^5.11.4",
    "@testing-library/react": "^11.1.0",
    "@testing-library/user-event": "^12.1.10",
    "js-sha256": "^0.9.0",
    "near-api-js": "^0.42.0",
    "react": "^16.13.1",
    "react-crossword-near": "^2.3.1",
    "react-dom": "^16.13.1",
    "react-scripts": "4.0.3",
    "styled-components": "^5.2.0",
    "web-vitals": "^1.0.1"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "parcel-bundler": "^1.12.5"
  }
}

'''
'''--- frontend/public/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>NEAR Crossword App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

'''
'''--- frontend/src/App.css ---
#page {
  padding: 2em;
}

h1 {
  margin-bottom: 1em;
}

#crossword-wrapper .clue.correct::before {
  content: "âœ“";
  display: inline-block;
  text-decoration: none;
  color: rgb(100, 200, 100);
  margin-right: 0.25em;
}

#crossword-wrapper {
  max-width: 66%;
  margin: 2em auto 0 auto;
}

#messages {
  background-color: rgb(230, 230, 230);
  margin: 1em 0;
  padding: 1em;
}
/*
@font-face {
  font-family: 'Inter';
  src:  url('./fonts/static/Inter-Regular.ttf') format('ttf'),
  url('./fonts/static/Inter-Medium.ttf') format('ttf');
}
*/
body {
  margin: 0;
  font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
  'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
  sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
  monospace;
}

span.important {
  font-size: 1.9rem;
  color: #FF585D;
}

.claim-inputs {
  margin-top: 30px
}

.claim-inputs label {
  font-size: 1.3em;
}

#claim-memo, #claim-account-id, .btn {
  border-radius: 5px;
  border: .1em solid #000;
  padding: .5em 1em;
  font-size: 1.66em;
  margin: .5em;
}

.claim-inputs .btn {
  margin: .5em;
}

#page h1, #page.no-puzzles {
  text-align: center;
}

#page.claim {
  margin: 0 auto;
  width: 576px;
}

'''
'''--- frontend/src/App.js ---
import './App.css';
import React, { useCallback, useRef, useState } from 'react';
import Crossword from 'react-crossword-near';
import { parseSolutionSeedPhrase } from './utils';
import { createGridData, loadGuesses } from "react-crossword-near/dist/es/util";
import sha256 from 'js-sha256';

const App = ({ data, solutionHash }) => {
  const crossword = useRef();
  const [solutionFound, setSolutionFound] = useState("Not correct yet");

  const onCrosswordComplete = useCallback(
    async (completeCount) => {
      if (completeCount !== false) {
        let gridData = createGridData(data).gridData;
        loadGuesses(gridData, 'guesses');
        await checkSolution(gridData);
      }
    },
    []
  );

  
  // This function is called when all entries are filled
  async function checkSolution(gridData) {
    let seedPhrase = parseSolutionSeedPhrase(data, gridData);
    let answerHash = sha256.sha256(seedPhrase);
    // Compare crossword solution's public key with the known public key for this puzzle
    // (It was given to us when we first fetched the puzzle in index.js)
    if (answerHash === solutionHash) {
      console.log("You're correct!");
      setSolutionFound("Correct!");
    } else {
      console.log("That's not the correct solution. :/");
      setSolutionFound("Not correct yet");
    }
  }
  

  return (
    <div id="page">
      <h1>NEAR Crossword Puzzle</h1>
      <div id="crossword-wrapper">
        
        <h3>Status: { solutionFound }</h3>
        <Crossword
          data={data}
          ref={crossword}
          onCrosswordComplete={onCrosswordComplete}
        />
  
      </div>
      <footer>
        <p>Thank you <a href="https://github.com/JaredReisinger/react-crossword" target="_blank" rel="noreferrer">@jaredreisinger/react-crossword</a>!</p>
      </footer>
    </div>
  );
}

export default App;
'''
'''--- frontend/src/config.js ---
const CONTRACT_NAME = process.env.CONTRACT_NAME || 'nearcrossword.hliao.testnet';

function getConfig(env) {
  switch(env) {
    case 'production':
    case 'mainnet':
      return {
        networkId: 'mainnet',
        nodeUrl: 'https://rpc.mainnet.near.org',
        contractName: CONTRACT_NAME,
        walletUrl: 'https://wallet.near.org',
        helperUrl: 'https://helper.mainnet.near.org'
      };
    case 'development':
    case 'testnet':
      return {
        networkId: 'testnet',
        nodeUrl: 'https://rpc.testnet.near.org',
        contractName: CONTRACT_NAME,
        walletUrl: 'https://wallet.testnet.near.org',
        helperUrl: 'https://helper.testnet.near.org'
      };
    case 'betanet':
      return {
        networkId: 'betanet',
        nodeUrl: 'https://rpc.betanet.near.org',
        contractName: CONTRACT_NAME,
        walletUrl: 'https://wallet.betanet.near.org',
        helperUrl: 'https://helper.betanet.near.org'
      };
    case 'local':
      return {
        networkId: 'local',
        nodeUrl: 'http://localhost:3030',
        keyPath: `${process.env.HOME}/.near/validator_key.json`,
        walletUrl: 'http://localhost:4000/wallet',
        contractName: CONTRACT_NAME
      };
    case 'test':
    case 'ci':
      return {
        networkId: 'shared-test',
        nodeUrl: 'https://rpc.ci-testnet.near.org',
        contractName: CONTRACT_NAME,
        masterAccount: 'test.near'
      };
    case 'ci-betanet':
      return {
        networkId: 'shared-test-staging',
        nodeUrl: 'https://rpc.ci-betanet.near.org',
        contractName: CONTRACT_NAME,
        masterAccount: 'test.near'
      };
    default:
      throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`);
  }
}

module.exports = getConfig;
'''
'''--- frontend/src/hardcoded-data.js ---
export const data = {
    across: {
      1: {
        clue: 'Native token',
        answer: '????',
        row: 1,
        col: 2,
      },
      3: {
        clue: 'DeFi decentralizes this',
        answer: '???????',
        row: 7,
        col: 0,
      },
    },
    down: {
      1: {
        clue: 'Name of the spec/standards site is _______.io',
        answer: '???????',
        row: 1,
        col: 2,
      },
      2: {
        clue: 'DeFi site on NEAR is ___.finance',
        answer: '???',
        row: 1,
        col: 5,
      },
    },
  };
'''
'''--- frontend/src/index.css ---
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

'''
'''--- frontend/src/index.js ---
import React from 'react';
import ReactDOM from 'react-dom';
import './index.css';
import App from './App';
import getConfig from './config.js';
import { viewMethodOnContract } from './utils';
import { data } from './hardcoded-data';

async function initCrossword() {
  const nearConfig = getConfig(process.env.NEAR_ENV || 'testnet');
  const solutionHash = await viewMethodOnContract(nearConfig, 'get_solution');
  return { data, solutionHash };
}

initCrossword()
  .then(({ data, solutionHash }) => {
    ReactDOM.render(
      <App
        data={data}
        solutionHash={solutionHash}
      />,
      document.getElementById('root'));
  });
'''
'''--- frontend/src/utils.js ---
import * as nearAPI from 'near-api-js';

export async function viewMethodOnContract(nearConfig, method) {
    const provider = new nearAPI.providers.JsonRpcProvider(nearConfig.nodeUrl);
    const rawResult = await provider.query(`call/${nearConfig.contractName}/${method}`, 'AQ4'); // Base 58 of '{}'
    return JSON.parse(rawResult.result.map((x) => String.fromCharCode(x)).join(''));
  }

 export function parseSolutionSeedPhrase(data, gridData) {
    // JavaScript determining what the highest clue number is
    // Example: 10 if there are ten clues, some which have both across and down clues
    let totalClues = Object.keys(data.across).concat(Object.keys(data.down))
      .map(n => parseInt(n))
      .reduce((n, m) => Math.max(n, m));
  
    let seedPhrase = [];
    // Assume that crossword starts at 1 and goes to totalClues
    for (let i = 1; i <= totalClues; i++) {
      let word = '';
      // If a number has both across and down clues, do across first.
      let iString = i.toString(); // not strictly necessary
      if (data.across.hasOwnProperty(iString)) {
        const answerLength = data.across[i].answer.length;
        for (let j = 0; j < answerLength; j++) {
          word += gridData[data['across'][i].row][data['across'][i].col + j].guess;
        }
        seedPhrase.push(word);
      }
      word = ''; // Clear for items where there's both across and down
      if (data.down.hasOwnProperty(iString)) {
        const answerLength = data.down[i].answer.length;
        for (let j = 0; j < answerLength; j++) {
          word += gridData[data['down'][i].row + j][data['down'][i].col].guess;
        }
        seedPhrase.push(word);
      }
    }
    const finalSeedPhrase = seedPhrase.map(w => w.toLowerCase()).join(' ');
  console.log(`Crossword solution as seed phrase: %c${finalSeedPhrase}`, "color: #00C1DE;");
  return finalSeedPhrase;
}

/*
module.exports = {
  viewMethodOnContract,
  parseSolutionSeedPhrase
};
*/
'''
'''--- src/lib.rs ---
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::{env, near_bindgen};

const PUZZLE_NUMBER: u8 = 1;

#[near_bindgen]
#[derive(Default, BorshDeserialize, BorshSerialize)]
pub struct Contract {
    // SETUP CONTRACT STATE
    crossword_solution: String,
}

#[near_bindgen]
impl Contract {
    #[init]
    pub fn new(solution: String) -> Self {
        Self {
            crossword_solution: solution,
        }
    }
    // ADD CONTRACT METHODS HERE
    pub fn get_puzzle_number(&self) -> u8 {
        PUZZLE_NUMBER
    }

    pub fn set_solution(&mut self, solution: String) {
        self.crossword_solution = solution;
    }

    pub fn get_solution(&self) -> String {
        self.crossword_solution.clone()
    }
    /*  
    Why does this need to be mutable?
    Well, logging is ultimately captured inside blocks added to the blockchain. 
    (More accurately, transactions are contained in chunks and chunks are contained in blocks. 
    More info in the Nomicon spec.) So while it is not changing the data in the fields of the struct, 
    it does cost some amount of gas to log, requiring a signed transaction by an account that pays for this gas.
    */
    pub fn guess_solution(&mut self, solution: String) -> bool {
        let hashed_input = env::sha256(solution.as_bytes());
        let hashed_input_hex = hex::encode(&hashed_input);

        if hashed_input_hex == self.crossword_solution {
            env::log_str("You guessed right");
            true
        } else {
            env::log_str("Try again");
            false
        }
    }
}

/*
 * the rest of this file sets up unit tests
 * to run these, the command will be:
 * cargo test --package rust-template -- --nocapture
 * Note: 'rust-template' comes from Cargo.toml's 'name' key
 */

// use the attribute below for unit tests
#[cfg(test)]
mod tests {
    use super::*;
    use near_sdk::test_utils::{get_logs, VMContextBuilder};
    use near_sdk::{testing_env, AccountId};

    // part of writing unit tests is setting up a mock context
    // provide a `predecessor` here, it'll modify the default context
    fn get_context(predecessor: AccountId) -> VMContextBuilder {
        let mut builder = VMContextBuilder::new();
        builder.predecessor_account_id(predecessor);
        builder
    }

    #[test]
    fn check_guess_solution() {
        //get alice as an account id
        let alice = AccountId::new_unchecked("alice.testnet".to_string());
        // setup the tessting context and unit test environment
        let context = get_context(alice);
        testing_env!(context.build());

        //set up contract object and call the new method
        let mut contract = Contract::new(
            "69c2feb084439956193f4c21936025f14a5a5a78979d67ae34762e18a7206a0f".to_string(),
        );
        let mut guess_result = contract.guess_solution("wrong answer here".to_string());
        assert!(!guess_result, "Expected a failure from the wrong guess");
        assert_eq!(get_logs(), ["Try again"], "Expected a failure log");
        guess_result = contract.guess_solution("near nomicon ref finance".to_string());
        assert!(guess_result, "Expected the correct answer to return true.");
        assert_eq!(
            get_logs(),
            ["Try again", "You guessed right"],
            "Expected a successful log after the previous failed log"
        );
    }

    #[test]
    fn debug_get_hash() {
        // basic setup for a unit test
        testing_env!(VMContextBuilder::new().build());

        let debug_solution = "near nomicon ref finance";
        let debug_hash_bytes = env::sha256(debug_solution.as_bytes());
        let debug_hash_string = hex::encode(debug_hash_bytes);
        println!("Let's debug: {:?}", debug_hash_string);
    }

    // TESTS HERE
}
'''