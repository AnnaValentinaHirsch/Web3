*GitHub Repository "nabeel-ahmed-troon/StoreFront-Admin"*

'''--- README.md ---
# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in your browser.

The page will reload when you make changes.\
You may also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can't go back!**

If you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.

You don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `npm run build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)

'''
'''--- package.json ---
{
  "name": "store-front",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@emotion/react": "^11.9.0",
    "@emotion/styled": "^11.8.1",
    "@material-ui/core": "^4.12.4",
    "@material-ui/icons": "^4.11.3",
    "@mui/icons-material": "^5.8.0",
    "@mui/joy": "^5.0.0-alpha.34",
    "@mui/material": "^5.8.6",
    "@testing-library/jest-dom": "^5.16.4",
    "@testing-library/react": "^13.3.0",
    "@testing-library/user-event": "^13.5.0",
    "assert": "^2.0.0",
    "bootstrap": "^5.1.3",
    "buffer": "^6.0.3",
    "ipfs-http-client": "^57.0.3",
    "near-api-js": "^0.45.1",
    "react": "^18.2.0",
    "react-bootstrap": "^2.4.0",
    "react-dom": "^18.2.0",
    "react-router-dom": "^6.3.0",
    "react-scripts": "5.0.1",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

'''
'''--- public/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

'''
'''--- public/manifest.json ---
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

'''
'''--- public/robots.txt ---
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

'''
'''--- src/App.css ---

'''
'''--- src/App.js ---
// import logo from './logo.svg';
// import './App.css';
import Header from "./components/Header";
function App() {
  return (
    // <div className="App">
    <>
      <Header />
    </>
    // {/* </div> */}
  );
}

export default App;

'''
'''--- src/App.test.js ---
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

'''
'''--- src/NearProvider/config.js ---
const CONTRACT_NAME =
  process.env.CONTRACT_NAME || "nearwhitelabelstorefront.testnet";

function getConfig(env) {
  switch (env) {
    case "production":
    case "mainnet":
      return {
        networkId: "mainnet",
        nodeUrl: "https://rpc.mainnet.near.org",
        contractName: CONTRACT_NAME,
        walletUrl: "https://wallet.near.org",
        helperUrl: "https://helper.mainnet.near.org",
        explorerUrl: "https://explorer.mainnet.near.org",
      };
    case "development":
    case "testnet":
      return {
        networkId: "testnet",
        nodeUrl: "https://rpc.testnet.near.org",
        contractName: CONTRACT_NAME,
        walletUrl: "https://wallet.testnet.near.org",
        helperUrl: "https://helper.testnet.near.org",
        explorerUrl: "https://explorer.testnet.near.org",
      };
    case "betanet":
      return {
        networkId: "betanet",
        nodeUrl: "https://rpc.betanet.near.org",
        contractName: CONTRACT_NAME,
        walletUrl: "https://wallet.betanet.near.org",
        helperUrl: "https://helper.betanet.near.org",
        explorerUrl: "https://explorer.betanet.near.org",
      };
    case "local":
      return {
        networkId: "local",
        nodeUrl: "http://localhost:3030",
        keyPath: `${process.env.HOME}/.near/validator_key.json`,
        walletUrl: "http://localhost:4000/wallet",
        contractName: CONTRACT_NAME,
      };
    case "test":
    case "ci":
      return {
        networkId: "shared-test",
        nodeUrl: "https://rpc.ci-testnet.near.org",
        contractName: CONTRACT_NAME,
        masterAccount: "test.near",
      };
    case "ci-betanet":
      return {
        networkId: "shared-test-staging",
        nodeUrl: "https://rpc.ci-betanet.near.org",
        contractName: CONTRACT_NAME,
        masterAccount: "test.near",
      };
    default:
      throw Error(
        `Unconfigured environment '${env}'. Can be configured in src/config.js.`
      );
  }
}

module.exports = getConfig;

'''
'''--- src/NearProvider/utils.js ---
import {
  connect,
  Contract,
  keyStores,
  utils,
  WalletConnection,
} from "near-api-js";
import * as nearAPI from "near-api-js";
import getConfig from "./config";
import { useState } from "react";

const config = {
  networkId: "testnet",
  keyStore: new keyStores.BrowserLocalStorageKeyStore(),
  // keyStore: new keyStores.,
  nodeUrl: "https://rpc.testnet.near.org",
  walletUrl: "https://wallet.testnet.near.org",
  helperUrl: "https://helper.testnet.near.org",
  explorerUrl: "https://explorer.testnet.near.org",
};

const nearConfig = getConfig(process.env.NODE_ENV || "development");
const GAS = "300000000000000";

export async function initContract() {
  const near = await connect(config);
  window.walletConnection = new WalletConnection(near);

  window.accountId = window.walletConnection.getAccountId();

  window.contract = await new Contract(
    window.walletConnection.account(),
    nearConfig.contractName,
    {
      viewMethods: ["get_nft_id"],

      changeMethods: ["mint"],
    }
  );
}

export function logout() {
  window.walletConnection.signOut();
  window.location.replace(window.location.origin + window.location.pathname);
}

export function logIn() {
  window.walletConnection.requestSignIn(nearConfig.contractName);
}

export async function InsertNftMetadata(props) {
  const contract = new nearAPI.Contract(
    window.walletConnection.account(),
    nearConfig.contractName,
    {
      viewMethods: ["get_nft_id"],

      changeMethods: ["insert_metadata"],
      sender: window.walletConnection.account(),
    }
  );
  let res = props.tokenName;
  var obj = {};
  obj = res;
  console.log(res);
  try {
    await contract.insert_metadata({
      args: {
        metadata: {
          res: {
            title: props.title,
            description: props.description,
            media: props.media,
            collection_name: props.collection_name,
            nft_contract: "nearwhitelabelnftcontract.testnet",
          },
        },
      },
    });
    alert("Successfully Inserted");
  } catch (error) {
    alert(error);
  }
}

export async function InsertPrice(props) {
  const contract = new nearAPI.Contract(
    window.walletConnection.account(),
    nearConfig.contractName,
    {
      changeMethods: ["insert_price"],
      sender: window.walletConnection.account(),
    }
  );
  const res = props.tokenName;
  try {
    await contract.insert_price({
      args: {
        price: {
          res: props.price,
        },
      },
    });
    alert("Successfully Inserted");
  } catch (error) {
    alert(error);
  }
}

export async function InsertSupplyCap(props) {
  const contract = new nearAPI.Contract(
    window.walletConnection.account(),
    nearConfig.contractName,
    {
      changeMethods: ["insert_supply_cap"],
      sender: window.walletConnection.account(),
    }
  );
  const res = props.tokenName;
  try {
    await contract.insert_supply_cap({
      args: {
        supply_caps: {
          res: props.supplyCap,
        },
      },
    });
    alert("Successfully Inserted");
  } catch (error) {
    alert(error);
  }
}

export async function InsertRoyality(props) {
  const contract = new nearAPI.Contract(
    window.walletConnection.account(),
    nearConfig.contractName,
    {
      changeMethods: ["insert_royalties"],
      sender: window.walletConnection.account(),
    }
  );
  const res = props.tokenName;
  try {
    await contract.insert_supply_cap({
      args: {
        royalties: {
          res: props.royality,
        },
      },
    });
    alert("Successfully Inserted");
  } catch (error) {
    alert(error);
  }
}

export async function InsertNft(props) {
  const contract = new nearAPI.Contract(
    window.walletConnection.account(),
    nearConfig.contractName,
    {
      changeMethods: ["add_nft_contract"],
      sender: window.walletConnection.account(),
    }
  );
  const res = props.tokenName;
  try {
    await contract.add_nft_contract({
      args: {
        nft_contract: ["nearwhitelabelnftcontract.testnet"],
      },
    });
    alert("Successfully Inserted");
  } catch (error) {
    alert(error);
  }
}

'''
'''--- src/components/Collections.js ---
import * as React from "react";
import AspectRatio from "@mui/joy/AspectRatio";
import Box from "@mui/joy/Box";
import Button from "@mui/joy/Button";
import Card from "@mui/joy/Card";
import IconButton from "@mui/joy/IconButton";
import Typography from "@mui/joy/Typography";
import BookmarkAdd from "@mui/icons-material/BookmarkAddOutlined";

function Collection() {
  return (
    <Card
      variant="outlined"
      style={{ maxWidth: 350, padding: "20px 5px", margin: "0 auto", my: 3 }}
    >
      <Box sx={{ display: "flex", flexDirection: "column", gap: 0.5 }}>
        <Typography level="h2" fontSize="md" sx={{ alignSelf: "flex-start" }}>
          Collection Name
        </Typography>
        <Typography level="body2">Date of Collection or other info</Typography>
      </Box>
      <IconButton
        aria-label="bookmark Bahamas Islands"
        variant="plain"
        color="neutral"
        size="sm"
        sx={{ position: "absolute", top: "0.5rem", right: "0.5rem" }}
      >
        <BookmarkAdd />
      </IconButton>

      <AspectRatio minHeight="120px" maxHeight="200px" sx={{ my: 2 }}>
        <img
          src="https://images.unsplash.com/photo-1527549993586-dff825b37782?crop=entropy&auto=format&fit=crop&w=370"
          alt=""
        />
      </AspectRatio>
      <Box sx={{ display: "flex" }}>
        <div>
          <Typography level="body3">Total price:</Typography>
          <Typography fontSize="lg" fontWeight="lg">
            Price show
          </Typography>
        </div>
        <Button
          variant="solid"
          size="sm"
          color="secondary"
          aria-label="Explore Bahamas Islands"
          sx={{ ml: "auto", fontWeight: 600 }}
        >
          Purchase
        </Button>
      </Box>
    </Card>
  );
}

export default Collection;

'''
'''--- src/components/CreateCollection.js ---
import React from "react";

import {
  Grid,
  TextField,
  Button,
  Card,
  CardContent,
  Typography,
} from "@material-ui/core";

function CreateCollection() {
  return (
    <>
      <Grid>
        <Card style={{ maxWidth: 450, padding: "20px 5px", margin: "0 auto" }}>
          <CardContent>
            <Typography gutterBottom variant="h5">
              Create Collection
            </Typography>
            <Typography
              variant="body2"
              color="textSecondary"
              component="p"
              gutterBottom
            >
              Create Collections of NFTs here
            </Typography>
            <form>
              <Grid container spacing={1}>
                <Grid xs={12} sm={6} item>
                  <TextField
                    placeholder="Enter Collection Name"
                    label="Collection Name"
                    variant="outlined"
                    fullWidth
                    required
                  />
                </Grid>

                <Grid item xs={12}>
                  <TextField
                    type="email"
                    placeholder="Enter Collection Cap"
                    label="Collection Cap"
                    variant="outlined"
                    fullWidth
                    required
                  />
                </Grid>

                <Grid item xs={12}>
                  <TextField
                    label="Description"
                    multiline
                    rows={4}
                    placeholder="Enter Description"
                    variant="outlined"
                    fullWidth
                    required
                  />
                </Grid>
                <Grid item xs={12}>
                  <Button
                    type="submit"
                    variant="contained"
                    color="primary"
                    fullWidth
                  >
                    Submit
                  </Button>
                </Grid>
              </Grid>
            </form>
          </CardContent>
        </Card>
      </Grid>
    </>
  );
}

export default CreateCollection;

'''
'''--- src/components/Header.js ---
// // import * as React from 'react';
// // import AppBar from '@mui/material/AppBar';
// // import Box from '@mui/material/Box';
// // import Toolbar from '@mui/material/Toolbar';
// // import Typography from '@mui/material/Typography';
// // import Button from '@mui/material/Button';
// //====================================
// import React from 'react';
// import { makeStyles } from '@material-ui/core/styles';
// import AppBar from '@material-ui/core/AppBar';
// import Toolbar from '@material-ui/core/Toolbar';
// import Typography from '@material-ui/core/Typography';
// import Button from '@material-ui/core/Button';
// import IconButton from '@material-ui/core/IconButton';
// import MenuIcon from '@material-ui/icons/Menu';
// import { useState,useEffect } from 'react';
// import {login as signIn,logout} from "../NearProvider/utils";

// const useStyles = makeStyles((theme) => ({
//     root: {
//       flexGrow: 1,
//     },
//     menuButton: {
//       marginRight: theme.spacing(2),
//     },
//     title: {
//       flexGrow: 1,
//     },
//   }));

// export default function ButtonAppBar() {
//     const [login, setLogin] = useState("Connect Wallet");
//     const [accountId, setAccountId] = useState("Not Connected");
//     const [connected, setConnected] = useState("Not Connected");
//     useEffect(() => {
//       if (window.walletConnection.isSignedIn()) {
//         let id = window.walletConnection.getAccountId();
//         setAccountId(id);
//         let res = accountId;
//         setConnected(res);
//       }
//     }, []);
//     useEffect(() => {
//       if (window.walletConnection.isSignedIn()) {
//         setLogin("Logout");
//       }
//     }, []);

//     const handleLogin = () => {
//       if (window.walletConnection.isSignedIn()) {
//         logout();
//         setLogin("Connect Wallet");
//       } else {
//         signIn();
//         setLogin("Logout");
//         let res = accountId;
//         setConnected(res);
//       }
//     };
//     const classes = useStyles();

//   return (
//       //================================================
//     // <Box sx={{ flexGrow: 1, width : '100%' }}>
//     //   <AppBar backgroundColor='#2C1775' position="static">
//     //     <Toolbar>
//     //       <Typography variant="h6" component="div" sx={{width : "210px"}}>
//     //         Drops Dapp
//     //       </Typography>
//     //       <Typography variant="p" component="div" sx={{width : "210px"}}>
//     //         Role: admin
//     //       </Typography>
//     //       <Box sx={{ display : 'flex' ,justifyContent : 'flex-end' ,width: '100%'}}>
//     //        <Typography component = "div" >{'Logged in as: '}{accountId}</Typography>: <Button color="inherit" sx={{display:"visible"}} onClick={signIn}>Connect Wallet</Button>

//     //       </Box>

//     //           <Button color="inherit" sx={{whiteSpace:'no-wrap',width:'10%'}} onClick={logout}>
//     //             Log Out
//     //           </Button>

//     //     </Toolbar>
//     //   </AppBar>
//     // </Box>
//     //=========================================================
//     <div className={classes.root}>
//     <AppBar position="static">
//       <Toolbar>
//         <IconButton edge="start" className={classes.menuButton} color="inherit" aria-label="menu">
//           <MenuIcon />
//         </IconButton>
//         <Typography variant="h6" className={classes.title}>
//           News
//         </Typography>
//         <Button color="inherit">Login</Button>
//       </Toolbar>
//     </AppBar>
//   </div>
//   );
// }

//=========
//belowwwwwwwwww
//=========
// import React from 'react';
// import { makeStyles } from '@material-ui/core/styles';
// import AppBar from '@material-ui/core/AppBar';
// import Toolbar from '@material-ui/core/Toolbar';
// import Typography from '@material-ui/core/Typography';
// import Button from '@material-ui/core/Button';
// import IconButton from '@material-ui/core/IconButton';
// import MenuIcon from '@material-ui/icons/Menu';
// import { useState,useEffect } from 'react';
// import {login as signIn,logout} from "../NearProvider/utils";

// const useStyles = makeStyles((theme) => ({
//   root: {
//     flexGrow: 1,
//   },
//   menuButton: {
//     marginRight: theme.spacing(2),
//   },
//   title: {
//     flexGrow: 1,
//   },
// }));

// export default function ButtonAppBar() {
//   const classes = useStyles();
//   const [login, setLogin] = useState("Connect Wallet");
//       const [accountId, setAccountId] = useState("Not Connected");
//       const [connected, setConnected] = useState("Not Connected");
//       useEffect(() => {
//         if (window.walletConnection.isSignedIn()) {
//           let id = window.walletConnection.getAccountId();
//           setAccountId(id);
//           let res = accountId;
//           setConnected(res);
//         }
//       }, []);
//       useEffect(() => {
//         if (window.walletConnection.isSignedIn()) {
//           setLogin("Logout");
//         }
//       }, []);

//       const handleLogin = () => {
//         if (window.walletConnection.isSignedIn()) {
//           logout();
//           setLogin("Connect Wallet");
//         } else {
//           signIn();
//           setLogin("Logout");
//           let res = accountId;
//           setConnected(res);
//         }
//       };

//   return (
//     <div className={classes.root}>
//       <AppBar position="static">
//         <Toolbar>
//           <IconButton edge="start" className={classes.menuButton} color="inherit" aria-label="menu">
//             <MenuIcon />
//           </IconButton>
//           <Typography variant="h6" className={classes.title}>
//             Store Front
//           </Typography>
//           <Button color="inherit" onClick={signIn}>{login}</Button>
//         </Toolbar>
//       </AppBar>
//     </div>
//   );
// }

import React, { useState, useEffect } from "react";
import { AppBar, Button, Tab, Tabs, Toolbar } from "@mui/material";
import AddBusinessRoundedIcon from "@mui/icons-material/AddBusinessRounded";
import CreateCollection from "./CreateCollection";
import { ImageUpload } from "./IpfsUpload";
import InsertMetadata from "./InsertMetadata";
import { logIn, logout } from "../NearProvider/utils";
import Collections from "./Collections";

const Header = () => {
  const [value, setValue] = useState(0);
  const [imageUrl, setImageUrl] = useState("");
  const [login, setLogin] = useState("Login");
  const [accountId, setAccountId] = useState(" ");
  const [connected, setConnected] = useState("Not Connected");
  useEffect(() => {
    if (window.walletConnection.isSignedIn()) {
      let id = window.walletConnection.getAccountId();
      setAccountId(id);
      let res = accountId;
      setConnected(res);
    }
  }, []);
  useEffect(() => {
    if (window.walletConnection.isSignedIn()) {
      setLogin("Logout");
    }
  }, []);

  const handleLogin = () => {
    if (window.walletConnection.isSignedIn()) {
      logout();
      setLogin("Connect Wallet");
    } else {
      logIn();
      setLogin("Logout");
      let res = accountId;
      setConnected(res);
    }
  };

  const handleChange = (event, newValue) => {
    setValue(newValue);
  };

  const imageUrlHandle = () => {
    return <h2>Image Url : {imageUrl}</h2>;
  };

  return (
    <React.Fragment>
      <AppBar sx={{ background: "#063970" }} position="sticky">
        <Toolbar>
          <AddBusinessRoundedIcon sx={{ transform: "scale(2)" }} />

          <Tabs
            sx={{ marginLeft: "auto" }}
            indicatorColor="secondary"
            textColor="inherit"
            value={value}
            onChange={handleChange}
          >
            <Tab label="Create Collection" />
            <Tab label="IPFS Upload" />
            <Tab label="Insert Metadata" />
            <Tab label="Collections" />
          </Tabs>

          <Button
            sx={{ marginLeft: "auto" }}
            variant="contained"
            onClick={handleLogin}
          >
            {login}
          </Button>
          {/* <Button sx={{ marginLeft: "10px" }} variant="contained">
            SignUp
          </Button> */}
        </Toolbar>
      </AppBar>
      {value === 0 && <CreateCollection />}
      {value === 1 && <ImageUpload setUrl={setImageUrl} />}
      {/* {value === 1 && <imageUrlHandle />} */}
      {value === 2 && <InsertMetadata />}
      {value === 3 && <Collections />}
    </React.Fragment>
  );
};

export default Header;

'''
'''--- src/components/InsertMetadata.js ---
import React from "react";
import {
  Grid,
  TextField,
  Button,
  Card,
  CardContent,
  Typography,
} from "@material-ui/core";
import { useState } from "react";
import {
  InsertNftMetadata,
  InsertPrice,
  InsertSupplyCap,
  InsertNft,
} from "../NearProvider/utils";

const InsertMetadata = () => {
  const [tokenName, setTokenName] = useState("");
  const [title, setTitle] = useState("");
  const [description, setDescription] = useState("");
  const [media, setMedia] = useState("");
  const [collection_name, setCollection_Name] = useState("");

  const [price, setPrice] = useState(0);
  const [supplyCap, setSupplyCap] = useState(0);
  const [royality, setRoyality] = useState(0);

  const handleInsertMetadata = async () => {
    try {
      await InsertNftMetadata({
        tokenName: tokenName,
        title: title,
        description: description,
        media: media,
        collection_name: collection_name,
      });
    } catch (err) {
      alert(err);
    }
  };

  const handleInsertSupplyCap = async () => {
    try {
      await InsertSupplyCap({
        supplyCap: +supplyCap,
      });
    } catch (err) {
      alert(err);
    }
  };

  const handleInsertRoyalities = async () => {
    try {
      await InsertSupplyCap({
        royality: +royality,
      });
    } catch (err) {
      alert(err);
    }
  };

  const handleInsertPrice = async () => {
    try {
      await InsertPrice({
        tokenName: tokenName,
        price: price,
      });
    } catch (error) {
      alert(error);
    }
  };

  const handleInsertNft = async () => {
    try {
      await InsertPrice({
        tokenName: tokenName,
        price: price,
      });
    } catch (error) {
      alert(error);
    }
  };

  return (
    <>
      <Grid>
        <Card style={{ maxWidth: 450, padding: "20px 5px", margin: "0 auto" }}>
          <CardContent>
            <Typography gutterBottom variant="h5">
              MetaData Insertion
            </Typography>
            <Typography
              variant="body2"
              color="textSecondary"
              component="p"
              gutterBottom
            >
              Insert nfts metadata here
            </Typography>
            <form>
              <Grid container spacing={1}>
                <Grid xs={12} sm={6} item>
                  <TextField
                    onChange={(e) => setTokenName(e.target.value)}
                    placeholder="Enter Token Name"
                    label="Token Name"
                    variant="outlined"
                    fullWidth
                    required
                  />
                </Grid>
                <Grid xs={12} sm={6} item>
                  <TextField
                    onChange={(e) => setTitle(e.target.value)}
                    placeholder="Enter Title"
                    label="Title"
                    variant="outlined"
                    fullWidth
                    required
                  />
                </Grid>
                <Grid item xs={12} sm={6}>
                  <TextField
                    onChange={(e) => setPrice(e.target.value)}
                    type=""
                    placeholder="Enter NFT Price"
                    label="NFT Price"
                    variant="outlined"
                    fullWidth
                    required
                  />
                </Grid>
                <Grid item xs={12} sm={6}>
                  <TextField
                    onChange={(e) => setSupplyCap(e.target.value)}
                    type=""
                    placeholder="Enter Nft Supply"
                    label="NFT Supply"
                    variant="outlined"
                    fullWidth
                    required
                  />
                </Grid>

                <Grid item xs={12}>
                  <TextField
                    onChange={(e) => setMedia(e.target.value)}
                    type=""
                    placeholder="Enter Media Url"
                    label="Media Url"
                    variant="outlined"
                    fullWidth
                    required
                  />
                </Grid>
                <Grid item xs={12}>
                  <TextField
                    onChange={(e) => setCollection_Name(e.target.value)}
                    type=""
                    placeholder="Enter Collection Name"
                    label="Collection Name"
                    variant="outlined"
                    fullWidth
                    required
                  />
                </Grid>

                <Grid item xs={12}>
                  <TextField
                    onChange={(e) => setRoyality(e.target.value)}
                    type=""
                    placeholder="Enter Nft Royality"
                    label="NFT Royality"
                    variant="outlined"
                    fullWidth
                    required
                  />
                </Grid>

                <Grid item xs={12}>
                  <TextField
                    onChange={(e) => setDescription(e.target.value)}
                    label="Description"
                    multiline
                    rows={4}
                    placeholder="Enter Description"
                    variant="outlined"
                    fullWidth
                    required
                  />
                </Grid>
                <Grid item xs={12}></Grid>
              </Grid>
            </form>
            <Button
              // onClick={handleInsertMetadata}
              onClick={async () => {
                try {
                  await handleInsertMetadata();
                  await handleInsertPrice();
                  await handleInsertRoyalities();
                  await handleInsertSupplyCap();
                  alert("Successfully Inserted");
                } catch (error) {
                  alert("error");
                }
              }}
              variant="contained"
              color="primary"
              fullWidth
            >
              Submit
            </Button>
          </CardContent>
        </Card>
      </Grid>

      <Grid>
        <Card style={{ maxWidth: 450, padding: "20px 5px", margin: "0 auto" }}>
          <CardContent>
            <Typography gutterBottom variant="h5">
              Nft Price Insertion
            </Typography>
            <Typography
              variant="body2"
              color="textSecondary"
              component="p"
              gutterBottom
            >
              Below you can insert Nft Price
            </Typography>
            <form>
              <Grid container spacing={1}>
                <Grid xs={12} sm={6} item>
                  <TextField
                    onChange={(e) => setTokenName(e.target.value)}
                    placeholder="Enter Token Name"
                    label="Token Name"
                    variant="outlined"
                    fullWidth
                    required
                  />
                </Grid>

                <Grid item xs={12}>
                  <TextField
                    onChange={(e) => setPrice(e.target.value)}
                    type=""
                    placeholder="Enter NFT Price"
                    label="NFT Price"
                    variant="outlined"
                    fullWidth
                    required
                  />
                </Grid>
                <Grid item xs={12}>
                  <TextField
                    onChange={(e) => setSupplyCap(e.target.value)}
                    type=""
                    placeholder="Enter Nft Supply"
                    label="NFT Supply"
                    variant="outlined"
                    fullWidth
                    required
                  />
                </Grid>
              </Grid>
            </form>
            <Button
              onClick={handleInsertPrice}
              variant="contained"
              color="primary"
              fullWidth
            >
              Submit
            </Button>
          </CardContent>
        </Card>
      </Grid>

      <Grid>
        <Card style={{ maxWidth: 450, padding: "20px 5px", margin: "0 auto" }}>
          <CardContent>
            <Typography gutterBottom variant="h5">
              Nft Supply Cap Insertion
            </Typography>
            <Typography
              variant="body2"
              color="textSecondary"
              component="p"
              gutterBottom
            >
              Below you can insert Nft Supply
            </Typography>
            <form>
              <Grid container spacing={1}>
                <Grid xs={12} sm={6} item>
                  <TextField
                    onChange={(e) => setTokenName(e.target.value)}
                    placeholder="Enter Token Name"
                    label="Token Name"
                    variant="outlined"
                    fullWidth
                    required
                  />
                </Grid>
                <Grid item xs={12}>
                  <TextField
                    onChange={(e) => setSupplyCap(e.target.value)}
                    type=""
                    placeholder="Enter Nft Supply"
                    label="NFT Supply"
                    variant="outlined"
                    fullWidth
                    required
                  />
                </Grid>
              </Grid>
            </form>
            <Button
              onClick={handleInsertSupplyCap}
              variant="contained"
              color="primary"
              fullWidth
            >
              Submit
            </Button>
          </CardContent>
        </Card>
      </Grid>

      <Grid>
        <Card style={{ maxWidth: 450, padding: "20px 5px", margin: "0 auto" }}>
          <CardContent>
            <Typography gutterBottom variant="h5">
              Nft Royality Insertion
            </Typography>
            <Typography
              variant="body2"
              color="textSecondary"
              component="p"
              gutterBottom
            >
              Below you can insert Nft Royality
            </Typography>
            <form>
              <Grid container spacing={1}>
                <Grid xs={12} sm={6} item>
                  <TextField
                    onChange={(e) => setTokenName(e.target.value)}
                    placeholder="Enter Token Name"
                    label="Token Name"
                    variant="outlined"
                    fullWidth
                    required
                  />
                </Grid>
                <Grid item xs={12}>
                  <TextField
                    onChange={(e) => setRoyality(e.target.value)}
                    type=""
                    placeholder="Enter Nft Royality"
                    label="NFT Royality"
                    variant="outlined"
                    fullWidth
                    required
                  />
                </Grid>
              </Grid>
            </form>
            <Button
              onClick={handleInsertSupplyCap}
              variant="contained"
              color="primary"
              fullWidth
            >
              Submit
            </Button>
          </CardContent>
        </Card>
      </Grid>

      <Grid>
        <Card style={{ maxWidth: 450, padding: "20px 5px", margin: "0 auto" }}>
          <CardContent>
            <Typography gutterBottom variant="h5">
              Nft Insertion
            </Typography>
            <Typography
              variant="body2"
              color="textSecondary"
              component="p"
              gutterBottom
            >
              Below you can insert Nft
            </Typography>
            <form>
              <Grid container spacing={1}>
                <Grid xs={12} sm={6} item>
                  <TextField
                    onChange={(e) => setTokenName(e.target.value)}
                    placeholder="Enter Token Name"
                    label="Token Name"
                    variant="outlined"
                    fullWidth
                    required
                  />
                </Grid>
                <Grid item xs={12}>
                  <TextField
                    onChange={(e) => setRoyality(e.target.value)}
                    type=""
                    placeholder="Enter Nft Royality"
                    label="NFT Royality"
                    variant="outlined"
                    fullWidth
                    required
                  />
                </Grid>
              </Grid>
            </form>
            <Button
              onClick={InsertNft}
              variant="contained"
              color="primary"
              fullWidth
            >
              Submit
            </Button>
          </CardContent>
        </Card>
      </Grid>
    </>
  );
};

export default InsertMetadata;

'''
'''--- src/components/IpfsUpload.js ---
import React, { useState } from "react";
import {
  Form,
  Image,
  Button,
  ProgressBar,
  Container,
  Badge,
} from "react-bootstrap";
import { create as ipfsHttpClient } from "ipfs-http-client";
const ipfs = ipfsHttpClient("https://ipfs.infura.io:5001/api/v0");

export const ImageUpload = ({ setUrl }) => {
  const [image, setImage] = useState({});
  const [imagePreview, setImagePreview] = useState("");
  const [loading, setLoading] = useState(false);
  const [uploaded, setUploaded] = useState(false);

  const createPreview = (e) => {
    if (e.target.value !== "") {
      setImage(e.target.files[0]);
      const src = URL.createObjectURL(e.target.files[0]);
      setImagePreview(src);
    } else {
      setImagePreview("");
    }
  };

  const uploadFile = async (e) => {
    setLoading(true);
    e.preventDefault();

    try {
      const added = await ipfs.add(image);
      const url = `https://ipfs.infura.io/ipfs/${added.path}`;
      setUrl(url);
      setImagePreview(url);
      setUploaded(true);
    } catch (err) {
      console.log("Error uploading the file : ", err);
    }
    setLoading(false);
  };

  const previewAndUploadButton = () => {
    if (imagePreview !== "") {
      if (!loading) {
        return (
          <div>
            {uploaded ? (
              <h5>
                ✅{" "}
                <a
                  href={imagePreview}
                  target="_blank"
                  rel="noopener noreferrer"
                >
                  {imagePreview}
                </a>{" "}
                Uploaded Successfully ✅{" "}
              </h5>
            ) : (
              <div>
                <Button type="submit" className="mb-3">
                  Upload Image
                </Button>
                <br />
                <h5>
                  {image.name} <Badge pill>{image.size} kb</Badge>
                </h5>

                <Image
                  style={{ height: "300px" }}
                  className="mb-3"
                  src={imagePreview}
                  thumbnail
                />
              </div>
            )}
          </div>
        );
      } else {
        return (
          <Container>
            <h4>Uploading Image</h4>
            <ProgressBar animated now={100} />
            <h4>Please Wait ...</h4>
          </Container>
        );
      }
    }
  };

  return (
    <div>
      <Form onSubmit={uploadFile}>
        <Form.Control
          required
          type="file"
          accept="image/*"
          onChange={(e) => createPreview(e)}
          className="mb-3"
        />

        {previewAndUploadButton()}
      </Form>
    </div>
  );
};

'''
'''--- src/index.css ---
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

'''
'''--- src/index.js ---
import React from "react";
import ReactDOM from "react-dom";
import App from "./App";
import { initContract } from "./NearProvider/utils";

import { createRoot } from "react-dom/client";
import { Buffer } from "buffer";

global.Buffer = Buffer;

const rootElement = document.getElementById("root");
const root = createRoot(rootElement);

window.nearInitPromise = initContract()
  .then(() => {
    root.render(
      
        <App />
      
    );
  })
  .catch(console.error);
'''
'''--- src/logo.svg ---
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>
'''
'''--- src/reportWebVitals.js ---
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

'''
'''--- src/setupTests.js ---
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

'''