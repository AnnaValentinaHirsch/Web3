*GitHub Repository "hiba-machfej/near-meme-museum-ui"*

'''--- .eslintrc.js ---
module.exports = {
  root: true,
  env: {
    es6: true,
    node: true,
    browser: true,
  },
  extends: ["plugin:vue/vue3-essential", "eslint:recommended", "@vue/prettier"],
  parserOptions: {
    parser: "babel-eslint",
  },
  rules: {
    "no-console": process.env.NODE_ENV === "production" ? "warn" : "off",
    "no-debugger": process.env.NODE_ENV === "production" ? "warn" : "off",
    'no-unused-vars': 'off'
  },
};

'''
'''--- README.md ---
# The Meme Museum

Sign in with <a href="https://near.org/">NEAR</a> and Share your favorite MEME. Comment, vote, and engage with all the cool memes!
<br>A starter app built with an AssemblyScript backend and a Vue frontend. This Frontend is created for learning purposes. 
 
### Check out the smart contract <a href="https://github.com/Learn-NEAR/sample--meme-museum">here</a>
The meme museum smart contract is developed by the NEAR Academy Team. <a href="https://near.academy/">NEAR Academy</a> is an interactive course for web developers looking to explore blockchain integration with their Apps. It is free and ends with a certificate of completion. So, if you are interested in learning more about NEAR, Blockchain, and Web3 apps NEAR Academy is the right place. You will enjoy the experience of building a Web3 App in a fun way!

### ⚠️ Warning
Any content produced by NEAR, or developer resources that NEAR provides, are for educational and inspirational purposes only. NEAR does not encourage, induce or sanction the deployment of any such applications in violation of applicable laws or regulations.

# Check out the project <a href="https://near-meme-museum.onrender.com/">here</a>.

![screenshot-near-meme-museum onrender com-2021 07 15-14_20_52](https://user-images.githubusercontent.com/58190902/125782790-f8d8a12c-8599-4a8d-ad12-9f5fb838e089.png)

## Project setup
```
yarn install
```

### Compiles and hot-reloads for development
```
yarn serve
```

### Compiles and minifies for production
```
yarn build
```

### Lints and fixes files
```
yarn lint
```

### Customize configuration
See [Configuration Reference](https://cli.vuejs.org/config/).

'''
'''--- babel.config.js ---
module.exports = {
  presets: ["@vue/cli-plugin-babel/preset"],
};

'''
'''--- package.json ---
{
  "name": "near-meme-museum",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "serve": "vue-cli-service serve",
    "build": "vue-cli-service build",
    "lint": "vue-cli-service lint"
  },
  "dependencies": {
    "@headlessui/vue": "^1.1.1",
    "@heroicons/vue": "^1.0.1",
    "big.js": "^6.1.1",
    "core-js": "^3.6.5",
    "date-fns": "^2.22.1",
    "near-api-js": "^0.41.0",
    "vee-validate": "^4.4.7",
    "vue": "^3.0.0",
    "yup": "^0.32.9"
  },
  "devDependencies": {
    "@vue/cli-plugin-babel": "~4.5.0",
    "@vue/cli-plugin-eslint": "~4.5.0",
    "@vue/cli-service": "~4.5.0",
    "@vue/compiler-sfc": "^3.0.0",
    "@vue/eslint-config-prettier": "^6.0.0",
    "autoprefixer": "^9",
    "babel-eslint": "^10.1.0",
    "eslint": "^6.7.2",
    "eslint-plugin-prettier": "^3.3.1",
    "eslint-plugin-vue": "^7.0.0",
    "postcss": "^7",
    "prettier": "^2.2.1",
    "tailwindcss": "npm:@tailwindcss/postcss7-compat"
  }
}

'''
'''--- postcss.config.js ---
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};

'''
'''--- public/index.html ---
<!DOCTYPE html>
<html lang="">
  <head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width,initial-scale=1.0" />
    <link rel="icon" href="<%= BASE_URL %>favicon.ico" />
    <title><%= htmlWebpackPlugin.options.title %></title>
  </head>
  <body>
    <noscript>
      <strong>
        We're sorry but <%= htmlWebpackPlugin.options.title %> doesn't work
        properly without JavaScript enabled. Please enable it to continue.
      </strong>
    </noscript>
    <div id="app"></div>
    <!-- built files will be auto injected -->
  </body>
</html>

'''
'''--- src/assets/logo.svg ---
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 288 288"><defs><style>.cls-1{fill:#fff;}</style></defs><g id="Layer_1" data-name="Layer 1"><path class="cls-1" d="M187.58,79.81l-30.1,44.69a3.2,3.2,0,0,0,4.75,4.2L191.86,103a1.2,1.2,0,0,1,2,.91v80.46a1.2,1.2,0,0,1-2.12.77L102.18,77.93A15.35,15.35,0,0,0,90.47,72.5H87.34A15.34,15.34,0,0,0,72,87.84V201.16A15.34,15.34,0,0,0,87.34,216.5h0a15.35,15.35,0,0,0,13.08-7.31l30.1-44.69a3.2,3.2,0,0,0-4.75-4.2L96.14,186a1.2,1.2,0,0,1-2-.91V104.61a1.2,1.2,0,0,1,2.12-.77l89.55,107.23a15.35,15.35,0,0,0,11.71,5.43h3.13A15.34,15.34,0,0,0,216,201.16V87.84A15.34,15.34,0,0,0,200.66,72.5h0A15.35,15.35,0,0,0,187.58,79.81Z"/></g></svg>
'''
'''--- src/composables/near.js ---
import { ref, onMounted } from "vue";
import {
  getMemes,
  addMeme,
  getMeme,
  getMemeComments,
  addComment,
  donate,
  vote,
} from "../services/near";

export const useMemes = () => {
  // memes starts as an empty array
  const memes = ref([]);
  const err = ref(null);

  onMounted(async () => {
    // when the component first mounts it get the memes from the blockchain

    try {
      const memeIds = await getMemes();

      memes.value = (
        await Promise.all(
          memeIds.map(async (id) => {
            const info = await getMeme(id);
            const comments = await getMemeComments(id);

            return {
              id,
              info,
              comments,
              // The coming data has a 9gag link, so to display the 9gag image in the website we are splitting the 9gag link to retrieve the meme's ID. We can display the image by adding the ID to the following url: http://img-9gag-fun.9cache.com/photo/ID_460s.jpg
              image: `https://img-9gag-fun.9cache.com/photo/${
                info.data.split("https://9gag.com/gag/")[1]
              }_460s.jpg`,
            };
          })
        )
      ).reverse();
    } catch (e) {
      err.value = e;
      console.log(err.value);
    }
  });

  // create a function that allows adding a message to the blockchain
  const handleAddMeme = async ({ meme, title, data, category }) => {
    addMeme({ meme, title, data, category });
  };

  const handleAddComment = async ({ memeId, text }) => {
    await addComment({ memeId, text });
  };

  const handleDonate = async ({ memeId, amount }) => {
    await donate({ memeId, amount });
  };

  const handleVote = async ({ memeId, value }) => {
    await vote({ memeId, value });
  };

  return {
    memes,
    addMeme: handleAddMeme,
    addComment: handleAddComment,
    donate: handleDonate,
    vote: handleVote,
  };
};

'''
'''--- src/main.js ---
import { createApp } from "vue";
import App from "./App.vue";
import "tailwindcss/tailwind.css";

createApp(App).mount("#app");

'''
'''--- src/services/near.js ---
import { keyStores, Near, WalletConnection, utils } from "near-api-js";
import BN from "bn.js";

export const CONTRACT_ID = "museum.testnet";
const gas = new BN("70000000000000");

// use new NEAR here to avoid needing async/await
export const near = new Near({
  networkId: "testnet",
  keyStore: new keyStores.BrowserLocalStorageKeyStore(),
  nodeUrl: "https://rpc.testnet.near.org",
  walletUrl: "https://wallet.testnet.near.org",
});

// can now create a new WalletConnection with the created Near object
export const wallet = new WalletConnection(near, "museum");

// a service to get memes from the blockchain
export const getMemes = () => {
  return wallet.account().viewFunction(CONTRACT_ID, "get_meme_list", {});
};

// a service to add a meme from the blockchain but this is not working for now
export const addMeme = ({ meme, title, data, category }) => {
  return wallet.account().functionCall({
    contractId: CONTRACT_ID,
    methodName: "add_meme",
    gas,
    args: { meme, title, data, category },
    attachedDeposit: utils.format.parseNearAmount("3"),
  });
};
// a service to get a single meme's info
export const getMeme = (meme) => {
  const memeContractId = meme + "." + CONTRACT_ID;
  return wallet.account().viewFunction(memeContractId, "get_meme", {});
};

// a service to get a single meme's comments
export const getMemeComments = (meme) => {
  const memeContractId = meme + "." + CONTRACT_ID;
  return wallet
    .account()
    .viewFunction(memeContractId, "get_recent_comments", {});
};

// a service to add a comment to a meme
export const addComment = ({ memeId, text }) => {
  const memeContractId = `${memeId}.${CONTRACT_ID}`;
  return wallet.account().functionCall({
    contractId: memeContractId,
    methodName: "add_comment",
    args: { text },
  });
};

export const donate = ({ memeId, amount }) => {
  const memeContractId = `${memeId}.${CONTRACT_ID}`;

  return wallet.account().functionCall({
    contractId: memeContractId,
    methodName: "donate",
    attachedDeposit: utils.format.parseNearAmount(amount),
  });
};

export const vote = ({ memeId, value }) => {
  const memeContractId = `${memeId}.${CONTRACT_ID}`;

  return wallet.account().functionCall({
    contractId: memeContractId,
    methodName: "vote",
    args: { value },
  });
};

'''
'''--- tailwind.config.js ---
module.exports = {
  purge: ["./index.html", "./src/**/*.{vue,js,ts,jsx,tsx}"],
  darkMode: false, // or 'media' or 'class'
  theme: {
    extend: {},
  },
  variants: {
    extend: {},
  },
  plugins: [],
};

'''