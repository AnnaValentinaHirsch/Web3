*GitHub Repository "amiyatulu/shivarthu"*

'''--- .github/ISSUE_TEMPLATE/config.yml ---
blank_issues_enabled: false
contact_links:
  - name: Support & Troubleshooting with the Substrate Stack Exchange Community
    url: https://substrate.stackexchange.com
    about: |
      For general problems with Substrate or related technologies, please search here first
      for solutions, by keyword and tags. If you discover no solution, please then ask and questions in our community! We highly encourage everyone also share their understanding by answering questions for others.
  - name: Feature Requests and PRs to be submitted upstream
    url: https://github.com/paritytech/substrate/tree/master/bin/node-template
    about: |
      This template is generated on tagged releases upstream, it is not independently updated and maintained.
      Please direct all suggestions for improvements and PRs upstream.

'''
'''--- .github/dependabot.yml ---
version: 2
updates:
  - package-ecosystem: "cargo"
    directory: "/"
    schedule:
      interval: "daily"

  - package-ecosystem: "github-actions"
    directory: "/"
    schedule:
      interval: "daily"

'''
'''--- .github/workflows/check.yml ---
name: Check Set-Up & Build

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [main]
  pull_request:
    branches: [main]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  check:
    # The type of runner that the job will run on
    runs-on: ubuntu-22.04

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - name: Install linux dependencies
        run: sudo apt-get install -y clang libssl-dev llvm libudev-dev protobuf-compiler

      - name: Install Rust
        run: |
          rustup update stable --no-self-update
          rustup target add wasm32-unknown-unknown

      # Rust cache
      - uses: Swatinem/rust-cache@v2

      - name: Check Build
        run: |
          SKIP_WASM_BUILD=1 cargo check --release

      - name: Check Build for Benchmarking
        run: >
          pushd node &&
          cargo check --features=runtime-benchmarks --release

'''
'''--- .github/workflows/release.yml ---
# This is an example GitHub action that will build and publish the binaries and a Docker image
# You need to add the following secrets to your GitHub Repository or Organization to make this work
# - DOCKERHUB_USERNAME: The username of the DockerHub account. E.g. parity
# - DOCKERHUB_TOKEN: Access token for DockerHub, see https://docs.docker.com/docker-hub/access-tokens/.
# The following is set up as an environment variable below
# - DOCKER_REPO: The unique name of the DockerHub repository. E.g. parity/polkadot

name: Release

permissions:
  contents: read

# Controls when the action will run.
on:
  push:
    # Triggers the workflow on tag push events
    tags:
      - v[0-9]+.*

env:
  RUST_BACKTRACE: 1
  CARGO_INCREMENTAL: 0
  CARGO_NET_GIT_FETCH_WITH_CLI: true
  CARGO_NET_RETRY: 10
  RUSTFLAGS: -D warnings
  RUSTUP_MAX_RETRIES: 10
  CARGO_TERM_COLOR: always
  # Set an environment variable (that can be overriden) for the Docker Repo
  DOCKER_REPO: tripleight/node-template

defaults:
  run:
    shell: bash

jobs:
  create-release:
    # The type of runner that the job will run on
    runs-on: ubuntu-22.04
    timeout-minutes: 60
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: false
      - uses: taiki-e/create-gh-release-action@v1
        with:
          title: $version
          branch: main
          token: ${{ secrets.GITHUB_TOKEN }}

  upload-assets:
    name: ${{ matrix.target }}
    needs:
      - create-release
    strategy:
      matrix:
        # The list of architechture and OS to build for
        # You can add or remove targets here if you want
        #
        # When updating this list, remember to update the target list in tests too
        include:
          # - target: aarch64-unknown-linux-gnu
          - target: x86_64-unknown-linux-gnu
          - target: aarch64-apple-darwin
            os: macos-11
          - target: x86_64-apple-darwin
            os: macos-11
          # - target: universal-apple-darwin
          #   os: macos-11

    # The type of runner that the job will run on
    # Runs on Ubuntu if other os is not specified above
    runs-on: ${{ matrix.os || 'ubuntu-22.04' }}
    timeout-minutes: 90
    permissions:
      contents: write
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        with:
          persist-credentials: false

      - name: Install Rust
        run: |
          rustup update stable --no-self-update
          rustup target add wasm32-unknown-unknown

      - name: Install linux dependencies
        if: (matrix.os == '' || startsWith(matrix.os, 'ubuntu'))
        run: |
          sudo apt-get -qq update
          sudo apt-get install -y protobuf-compiler

      - name: Install mac dependencies
        if: startsWith(matrix.os, 'macos')
        run: brew install protobuf
      - uses: taiki-e/setup-cross-toolchain-action@v1
        if: (matrix.os == '' || startsWith(matrix.os, 'ubuntu'))
        with:
          target: ${{ matrix.target }}

      # Build and upload the binary to the new release
      - uses: taiki-e/upload-rust-binary-action@v1
        with:
          bin: node-template
          target: ${{ matrix.target }}
          tar: all
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload x86_64 linux binary to workflow
        if: (matrix.target == 'x86_64-unknown-linux-gnu')
        uses: actions/upload-artifact@v3
        with:
          name: node-template
          path: ${{ github.workspace }}/target/x86_64-unknown-linux-gnu/release/node-template

  build-image:
    # The type of runner that the job will run on
    needs:
      - upload-assets
    runs-on: ubuntu-22.04
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Login to Docker hub using the credentials stored in the repository secrets
      - name: Log in to Docker Hub
        uses: docker/login-action@v2.1.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Check out the repo
        uses: actions/checkout@v3

      # Download the binary from the previous job
      - name: Download x86_64 linux binary
        uses: actions/download-artifact@v3
        with:
          name: node-template
          path: ${{ github.workspace }}

      # Build and push 2 images, One with the version tag and the other with latest tag
      - name: Build and push Docker images
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Containerfile
          push: true
          build-args: |
            DOCKER_REPO=${{ env.DOCKER_REPO }}
          tags: |
            ${{ env.DOCKER_REPO }}:${{ github.ref_name }}
            ${{ env.DOCKER_REPO }}:latest

'''
'''--- Cargo.toml ---
[workspace]
members = [
    "node",
    "pallets/template",
    "pallets/sortition-sum-game",
    "pallets/schelling-game-shared",
    "pallets/shared-storage",
    "pallets/spaces",
    "pallets/profile-validation",
    "pallets/positive-externality-validation",
    "pallets/support",
    "pallets/election",
    "pallets/department-funding",
    "pallets/project-tips",
    "pallets/posts",
    "pallets/ubi",
    "pallets/tags",
    "traits/sortition-sum-game-link",
    "traits/schelling-game-shared-link",
    "runtime/node-runtime",
]
[profile.release]
panic = "unwind"

'''
'''--- README.md ---
# Shivarthu

### Its now archived, latest development on https://github.com/reaudito/shivarthu
### Decentralized democracy with experts as leaders.
https://shivarthu.reaudito.com/#/
## Leptos Frontend
https://github.com/reaudito/shivarthu-client
## Frontend Tests
https://github.com/reaudito/shivarthu-client-tests

## Yew/Rust Frontend (archived)
https://github.com/amiyatulu/shivarthu_client
## React Frontend (archived)
https://github.com/amiyatulu/shivarthu_frontend

## Whitepaper
https://shivarthu.reaudito.com/paper/Shivarthu_whitepaper.pdf

## Technical Details
https://github.com/amiyatulu/shivarthu/blob/main/docs/Shivarthu.md

# Substrate Node Template

[![Try on playground](https://img.shields.io/badge/Playground-Node_Template-brightgreen?logo=Parity%20Substrate)](https://playground.substrate.dev/?deploy=node-template) [![Matrix](https://img.shields.io/matrix/substrate-technical:matrix.org)](https://matrix.to/#/#substrate-technical:matrix.org)

A fresh FRAME-based [Substrate](https://www.substrate.io/) node, ready for hacking :rocket:

## Getting Started

Follow the steps below to get started with the Node Template, or get it up and running right from your browser
in just a few clicks using [Playground](https://playground.substrate.dev/) :hammer_and_wrench:

### Using Nix

Install [nix](https://nixos.org/) and optionally [direnv](https://github.com/direnv/direnv) and [lorri](https://github.com/target/lorri) for a fully plug
and play experience for setting up the development environment. To get all the correct dependencies activate direnv `direnv allow` and lorri `lorri shell`.

### Rust Setup

First, complete the [basic Rust setup instructions](./docs/rust-setup.md).

### Run

Use Rust's native `cargo` command to build and launch the template node:

```sh
cargo run --release -- --dev --tmp
```

### Build

The `cargo run` command will perform an initial build. Use the following command to build the node
without launching it:

```sh
cargo build --release
```

### Test 

Use the following command to test the contract
```sh
cargo test
```

### Generate docs

To generate docs use command  
```sh
cargo doc --no-deps --open
```

To view in the python server, go to target folder  
```sh
cd target/doc
python3 -m http.server
```
View the docs at:  
http://localhost:8000/election/  

Schelling game shared docs:
http://localhost:8000/schelling_game_shared/pallet/struct.Pallet.html

### Embedded Docs

Once the project has been built, the following command can be used to explore all parameters and
subcommands:

```sh
./target/release/node-template -h
```

## Run

The provided `cargo run` command will launch a temporary node and its state will be discarded after
you terminate the process. After the project has been built, there are other ways to launch the
node.

### Single-Node Development Chain

This command will start the single-node development chain with persistent state:

```bash
./target/release/node-template --dev
```

Purge the development chain's state:

```bash
./target/release/node-template purge-chain --dev
```

Start the development chain with detailed logging:

```bash
RUST_BACKTRACE=1 ./target/release/node-template -ldebug --dev
```

### Connect with Yew Apps Front-end

The front end repository: https://github.com/amiyatulu/shivarthu_client

```bash
cd shivarthu_client
trunk serve
```

### Multi-Node Local Testnet

If you want to see the multi-node consensus algorithm in action, refer to
[our Start a Private Network tutorial](https://substrate.dev/docs/en/tutorials/start-a-private-network/).

## Template Structure

A Substrate project such as this consists of a number of components that are spread across a few
directories.

### Node

A blockchain node is an application that allows users to participate in a blockchain network.
Substrate-based blockchain nodes expose a number of capabilities:

- Networking: Substrate nodes use the [`libp2p`](https://libp2p.io/) networking stack to allow the
  nodes in the network to communicate with one another.
- Consensus: Blockchains must have a way to come to
  [consensus](https://substrate.dev/docs/en/knowledgebase/advanced/consensus) on the state of the
  network. Substrate makes it possible to supply custom consensus engines and also ships with
  several consensus mechanisms that have been built on top of
  [Web3 Foundation research](https://research.web3.foundation/en/latest/polkadot/NPoS/index.html).
- RPC Server: A remote procedure call (RPC) server is used to interact with Substrate nodes.

There are several files in the `node` directory - take special note of the following:

- [`chain_spec.rs`](./node/src/chain_spec.rs): A
  [chain specification](https://substrate.dev/docs/en/knowledgebase/integrate/chain-spec) is a
  source code file that defines a Substrate chain's initial (genesis) state. Chain specifications
  are useful for development and testing, and critical when architecting the launch of a
  production chain. Take note of the `development_config` and `testnet_genesis` functions, which
  are used to define the genesis state for the local development chain configuration. These
  functions identify some
  [well-known accounts](https://substrate.dev/docs/en/knowledgebase/integrate/subkey#well-known-keys)
  and use them to configure the blockchain's initial state.
- [`service.rs`](./node/src/service.rs): This file defines the node implementation. Take note of
  the libraries that this file imports and the names of the functions it invokes. In particular,
  there are references to consensus-related topics, such as the
  [longest chain rule](https://substrate.dev/docs/en/knowledgebase/advanced/consensus#longest-chain-rule),
  the [Aura](https://substrate.dev/docs/en/knowledgebase/advanced/consensus#aura) block authoring
  mechanism and the
  [GRANDPA](https://substrate.dev/docs/en/knowledgebase/advanced/consensus#grandpa) finality
  gadget.

After the node has been [built](#build), refer to the embedded documentation to learn more about the
capabilities and configuration parameters that it exposes:

```shell
./target/release/node-template --help
```

### Runtime

In Substrate, the terms
"[runtime](https://substrate.dev/docs/en/knowledgebase/getting-started/glossary#runtime)" and
"[state transition function](https://substrate.dev/docs/en/knowledgebase/getting-started/glossary#stf-state-transition-function)"
are analogous - they refer to the core logic of the blockchain that is responsible for validating
blocks and executing the state changes they define. The Substrate project in this repository uses
the [FRAME](https://substrate.dev/docs/en/knowledgebase/runtime/frame) framework to construct a
blockchain runtime. FRAME allows runtime developers to declare domain-specific logic in modules
called "pallets". At the heart of FRAME is a helpful
[macro language](https://substrate.dev/docs/en/knowledgebase/runtime/macros) that makes it easy to
create pallets and flexibly compose them to create blockchains that can address
[a variety of needs](https://www.substrate.io/substrate-users/).

Review the [FRAME runtime implementation](./runtime/src/lib.rs) included in this template and note
the following:

- This file configures several pallets to include in the runtime. Each pallet configuration is
  defined by a code block that begins with `impl $PALLET_NAME::Config for Runtime`.
- The pallets are composed into a single runtime by way of the
  [`construct_runtime!`](https://crates.parity.io/frame_support/macro.construct_runtime.html)
  macro, which is part of the core
  [FRAME Support](https://substrate.dev/docs/en/knowledgebase/runtime/frame#support-library)
  library.

### Pallets

The runtime in this project is constructed using many FRAME pallets that ship with the
[core Substrate repository](https://github.com/paritytech/substrate/tree/master/frame) and a
template pallet that is [defined in the `pallets`](./pallets/template/src/lib.rs) directory.

A FRAME pallet is compromised of a number of blockchain primitives:

- Storage: FRAME defines a rich set of powerful
  [storage abstractions](https://substrate.dev/docs/en/knowledgebase/runtime/storage) that makes
  it easy to use Substrate's efficient key-value database to manage the evolving state of a
  blockchain.
- Dispatchables: FRAME pallets define special types of functions that can be invoked (dispatched)
  from outside of the runtime in order to update its state.
- Events: Substrate uses [events](https://substrate.dev/docs/en/knowledgebase/runtime/events) to
  notify users of important changes in the runtime.
- Errors: When a dispatchable fails, it returns an error.
- Config: The `Config` configuration interface is used to define the types and parameters upon
  which a FRAME pallet depends.

### Run in Podman
Install [Podman](https://podman.io/docs/installation) 

```bash
podman build .
```

This command will firstly compile your code, and then start a local development network. You can
also replace the default command (`cargo build --release && ./target/release/node-template --dev --ws-external`)
by appending your own. A few useful ones are as follow.

# Purge the local dev chain
`cargo build --release && ./target/release/node-template purge-chain --dev`

# Check whether the code is compilable
`cargo check`

'''
'''--- docs/Leadership.svg ---
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<svg
   xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmlns:cc="http://creativecommons.org/ns#"
   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
   xmlns:svg="http://www.w3.org/2000/svg"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   width="210.7444mm"
   height="361.69547mm"
   viewBox="0 0 210.7444 361.69547"
   version="1.1"
   id="svg967"
   inkscape:version="1.0 (4035a4fb49, 2020-05-01)"
   sodipodi:docname="Leadership.svg">
  <defs
     id="defs961">
    <rect
       x="-40.491283"
       y="-21.036131"
       width="367.50644"
       height="386.45755"
       id="rect1661" />
  </defs>
  <sodipodi:namedview
     id="base"
     pagecolor="#ffffff"
     bordercolor="#666666"
     borderopacity="1.0"
     inkscape:pageopacity="0.0"
     inkscape:pageshadow="2"
     inkscape:zoom="0.49497475"
     inkscape:cx="267.76757"
     inkscape:cy="646.21707"
     inkscape:document-units="mm"
     inkscape:current-layer="layer1"
     inkscape:document-rotation="0"
     showgrid="false"
     fit-margin-top="10"
     fit-margin-left="10"
     fit-margin-right="10"
     fit-margin-bottom="10"
     inkscape:window-width="1880"
     inkscape:window-height="1016"
     inkscape:window-x="40"
     inkscape:window-y="27"
     inkscape:window-maximized="1" />
  <metadata
     id="metadata964">
    <rdf:RDF>
      <cc:Work
         rdf:about="">
        <dc:format>image/svg+xml</dc:format>
        <dc:type
           rdf:resource="http://purl.org/dc/dcmitype/StillImage" />
        <dc:title />
      </cc:Work>
    </rdf:RDF>
  </metadata>
  <g
     inkscape:label="Layer 1"
     inkscape:groupmode="layer"
     id="layer1"
     transform="translate(-0.24626064,4.6258172)">
    <rect
       style="fill:#ff9955;fill-rule:evenodd;stroke-width:0.196713"
       id="rect1623"
       width="164.18779"
       height="32.803913"
       x="13.984796"
       y="199.43643" />
    <text
       xml:space="preserve"
       style="font-size:7.05556px;line-height:1.25;font-family:sans-serif;-inkscape-font-specification:sans-serif;stroke-width:0.264583"
       x="14.513998"
       y="194.14484"
       id="text1629"><tspan
         sodipodi:role="line"
         id="tspan1627"
         x="14.513998"
         y="194.14484"
         style="stroke-width:0.264583">Applications to implement the plan</tspan></text>
    <text
       xml:space="preserve"
       style="font-size:7.86043px;line-height:1.25;font-family:sans-serif;-inkscape-font-specification:sans-serif;stroke-width:0.294769"
       x="19.941765"
       y="216.5164"
       id="text1633"><tspan
         sodipodi:role="line"
         id="tspan1631"
         x="19.941765"
         y="216.5164"
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:Adelon-Light;-inkscape-font-specification:Adelon-Light;stroke-width:0.294769">Project Leader 1</tspan></text>
    <rect
       y="237.71286"
       x="13.455665"
       height="32.803913"
       width="164.18779"
       id="rect1635"
       style="fill:#ff9955;fill-rule:evenodd;stroke-width:0.196713" />
    <rect
       style="fill:#ff9955;fill-rule:evenodd;stroke-width:0.196713"
       id="rect1641"
       width="164.18779"
       height="32.803913"
       x="13.632055"
       y="275.98932" />
    <rect
       y="314.26578"
       x="13.808417"
       height="32.803913"
       width="164.18779"
       id="rect1647"
       style="fill:#ff9955;fill-rule:evenodd;stroke-width:0.196713" />
    <text
       xml:space="preserve"
       style="font-size:7.05556px;line-height:1.25;font-family:sans-serif;-inkscape-font-specification:sans-serif;stroke-width:0.264583"
       x="79.976982"
       y="214.63527"
       id="text1655"><tspan
         sodipodi:role="line"
         id="tspan1653"
         x="79.976982"
         y="214.63527"
         style="stroke-width:0.264583">Delivery Time: ____</tspan><tspan
         sodipodi:role="line"
         x="79.976982"
         y="223.45471"
         style="stroke-width:0.264583"
         id="tspan1657">Stragey: ______</tspan></text>
    <text
       xml:space="preserve"
       id="text1659"
       style="font-size:7.05556px;line-height:1.25;font-family:sans-serif;-inkscape-font-specification:sans-serif;white-space:pre;shape-inside:url(#rect1661);" />
    <text
       id="text843"
       y="11.529265"
       x="89.74424"
       style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:7.7611px;line-height:1.25;font-family:Adelon-Bold;-inkscape-font-specification:Adelon-Bold;stroke-width:0.264583"
       xml:space="preserve"><tspan
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:7.7611px;font-family:Adelon-Bold;-inkscape-font-specification:Adelon-Bold;stroke-width:0.264583"
         y="11.529265"
         x="89.74424"
         id="tspan841"
         sodipodi:role="line">Locality</tspan><tspan
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:7.7611px;font-family:'Abyssinica SIL';-inkscape-font-specification:'Abyssinica SIL';stroke-width:0.264583"
         y="21.23064"
         x="89.74424"
         sodipodi:role="line"
         id="tspan910">Simulia</tspan><tspan
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:7.7611px;font-family:Adelon-Bold;-inkscape-font-specification:Adelon-Bold;stroke-width:0.264583"
         y="31.340542"
         x="89.74424"
         sodipodi:role="line"
         id="tspan894" /></text>
    <text
       id="text847"
       y="28.686363"
       x="7.6996264"
       style="font-size:7.05556px;line-height:1.25;font-family:sans-serif;-inkscape-font-specification:sans-serif;stroke-width:0.264583"
       xml:space="preserve"><tspan
         style="stroke-width:0.264583"
         y="28.686363"
         x="7.6996264"
         id="tspan845"
         sodipodi:role="line" /><tspan
         id="tspan849"
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:Adelon;-inkscape-font-specification:Adelon;stroke-width:0.264583"
         y="37.779846"
         x="7.6996264"
         sodipodi:role="line">Problem</tspan><tspan
         id="tspan851"
         style="stroke-width:0.264583"
         y="46.599297"
         x="7.6996264"
         sodipodi:role="line" /><tspan
         id="tspan853"
         style="stroke-width:0.264583"
         y="55.418747"
         x="7.6996264"
         sodipodi:role="line" /><tspan
         id="tspan855"
         style="stroke-width:0.264583"
         y="64.238197"
         x="7.6996264"
         sodipodi:role="line" /></text>
    <rect
       y="45.659569"
       x="7.4572315"
       height="51.329708"
       width="190.7444"
       id="rect863"
       style="fill:#00ff00;fill-opacity:1;fill-rule:nonzero;stroke-width:0.270999;stroke-miterlimit:4;stroke-dasharray:none"
       ry="14.805367" />
    <rect
       y="51.739155"
       x="76.434074"
       height="17.965048"
       width="52.79073"
       id="rect867"
       style="fill:#ff00ff;fill-rule:evenodd;stroke-width:0.264583"
       ry="6.7858191" />
    <text
       id="text871"
       y="62.983017"
       x="92.613014"
       style="font-size:7.05556px;line-height:1.25;font-family:sans-serif;-inkscape-font-specification:sans-serif;stroke-width:0.264583"
       xml:space="preserve"><tspan
         style="stroke-width:0.264583"
         y="62.983017"
         x="92.613014"
         id="tspan869"
         sodipodi:role="line">Photo</tspan></text>
    <text
       id="text879"
       y="83.098076"
       x="84.086395"
       style="font-size:7.05556px;line-height:1.25;font-family:sans-serif;-inkscape-font-specification:sans-serif;stroke-width:0.264583"
       xml:space="preserve"><tspan
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:Adelon-Regular;-inkscape-font-specification:Adelon-Regular;stroke-width:0.264583"
         y="83.098076"
         x="84.086395"
         id="tspan877"
         sodipodi:role="line">Water logging</tspan></text>
    <text
       xml:space="preserve"
       style="font-size:7.05556px;line-height:1.25;font-family:sans-serif;-inkscape-font-specification:sans-serif;stroke-width:0.264583"
       x="145.886"
       y="82.850746"
       id="text906"><tspan
         sodipodi:role="line"
         id="tspan904"
         x="145.886"
         y="82.850746"
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:Aachen-Light;-inkscape-font-specification:Aachen-Light;stroke-width:0.264583">Department:</tspan><tspan
         sodipodi:role="line"
         x="145.886"
         y="91.944229"
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:Adelon;-inkscape-font-specification:Adelon;stroke-width:0.264583"
         id="tspan908">City Planning</tspan></text>
    <text
       id="text859"
       y="114.40974"
       x="10.948159"
       style="font-size:7.05556px;line-height:1.25;font-family:sans-serif;-inkscape-font-specification:sans-serif;stroke-width:0.264583"
       xml:space="preserve"><tspan
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:Adelon;-inkscape-font-specification:Adelon;stroke-width:0.264583"
         y="114.40974"
         x="10.948159"
         id="tspan857"
         sodipodi:role="line">Solution</tspan></text>
    <rect
       y="121.05188"
       x="12.633968"
       height="54.618713"
       width="186.70129"
       id="rect865"
       style="fill:#00ffff;fill-rule:evenodd;stroke-width:0.264583"
       ry="5.9444971" />
    <text
       id="text883"
       y="138.75757"
       x="85.910202"
       style="font-size:7.05556px;line-height:1.25;font-family:sans-serif;-inkscape-font-specification:sans-serif;stroke-width:0.264583"
       xml:space="preserve"><tspan
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:Adelon-Regular;-inkscape-font-specification:Adelon-Regular;stroke-width:0.264583"
         y="138.75757"
         x="85.910202"
         id="tspan881"
         sodipodi:role="line">The Detail Plan</tspan></text>
    <text
       id="text887"
       y="155.68259"
       x="86.334747"
       style="font-size:7.05556px;line-height:1.25;font-family:sans-serif;-inkscape-font-specification:sans-serif;stroke-width:0.264583"
       xml:space="preserve"><tspan
         style="stroke-width:0.264583"
         y="155.68259"
         x="86.334747"
         id="tspan885"
         sodipodi:role="line">Percolation pit</tspan></text>
    <text
       id="text907"
       y="132.16887"
       x="16.377989"
       style="font-size:7.05556px;line-height:1.25;font-family:'Aachen BT';-inkscape-font-specification:'Aachen BT';stroke-width:0.264583;font-weight:normal;font-style:normal;font-stretch:normal;font-variant:normal;"
       xml:space="preserve"><tspan
         style="stroke-width:0.264583;-inkscape-font-specification:'Aachen BT';font-family:'Aachen BT';font-weight:normal;font-style:normal;font-stretch:normal;font-variant:normal;"
         y="132.16887"
         x="16.377989"
         id="tspan905"
         sodipodi:role="line">Optimal Solution</tspan></text>
    <text
       id="text942"
       y="216.28748"
       x="17.611223"
       style="font-size:7.05556px;line-height:1.25;font-family:sans-serif;-inkscape-font-specification:sans-serif;stroke-width:0.264583"
       xml:space="preserve"><tspan
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:AdelonLH;-inkscape-font-specification:AdelonLH;stroke-width:0.264583"
         y="216.28748"
         x="17.611223"
         id="tspan940"
         sodipodi:role="line" /></text>
    <text
       id="text946"
       y="327.64197"
       x="19.941765"
       style="font-size:7.86043px;line-height:1.25;font-family:sans-serif;-inkscape-font-specification:sans-serif;stroke-width:0.294769"
       xml:space="preserve"><tspan
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:Adelon-Light;-inkscape-font-specification:Adelon-Light;stroke-width:0.294769"
         y="327.64197"
         x="19.941765"
         id="tspan944"
         sodipodi:role="line">Project Leader 4</tspan></text>
    <text
       xml:space="preserve"
       style="font-size:7.86043px;line-height:1.25;font-family:sans-serif;-inkscape-font-specification:sans-serif;stroke-width:0.294769"
       x="19.941765"
       y="253.58447"
       id="text950"><tspan
         sodipodi:role="line"
         id="tspan948"
         x="19.941765"
         y="253.58447"
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:Adelon-Light;-inkscape-font-specification:Adelon-Light;stroke-width:0.294769">Project Leader 2</tspan></text>
    <text
       id="text954"
       y="290.61322"
       x="19.941765"
       style="font-size:7.86043px;line-height:1.25;font-family:sans-serif;-inkscape-font-specification:sans-serif;stroke-width:0.294769"
       xml:space="preserve"><tspan
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:Adelon-Light;-inkscape-font-specification:Adelon-Light;stroke-width:0.294769"
         y="290.61322"
         x="19.941765"
         id="tspan952"
         sodipodi:role="line">Project Leader 3</tspan></text>
  </g>
</svg>

'''
'''--- docs/Portfolio.svg ---
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<svg
   xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmlns:cc="http://creativecommons.org/ns#"
   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
   xmlns:svg="http://www.w3.org/2000/svg"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   sodipodi:docname="Portfolio.svg"
   inkscape:version="1.0 (4035a4fb49, 2020-05-01)"
   id="svg2079"
   version="1.1"
   viewBox="0 0 210 297"
   height="297mm"
   width="210mm">
  <defs
     id="defs2073" />
  <sodipodi:namedview
     inkscape:window-maximized="0"
     inkscape:window-y="251"
     inkscape:window-x="331"
     inkscape:window-height="752"
     inkscape:window-width="1514"
     showgrid="false"
     inkscape:document-rotation="0"
     inkscape:current-layer="layer1"
     inkscape:document-units="mm"
     inkscape:cy="468.84694"
     inkscape:cx="407.25124"
     inkscape:zoom="0.50334158"
     inkscape:pageshadow="2"
     inkscape:pageopacity="0.0"
     borderopacity="1.0"
     bordercolor="#666666"
     pagecolor="#ffffff"
     id="base" />
  <metadata
     id="metadata2076">
    <rdf:RDF>
      <cc:Work
         rdf:about="">
        <dc:format>image/svg+xml</dc:format>
        <dc:type
           rdf:resource="http://purl.org/dc/dcmitype/StillImage" />
        <dc:title></dc:title>
      </cc:Work>
    </rdf:RDF>
  </metadata>
  <g
     id="layer1"
     inkscape:groupmode="layer"
     inkscape:label="Layer 1">
    <text
       id="text2644"
       y="16.143112"
       x="69.332909"
       style="font-size:7.05556px;line-height:1.25;font-family:Aachen-Bold;-inkscape-font-specification:Aachen-Bold;letter-spacing:0px;stroke-width:0.264583"
       xml:space="preserve"><tspan
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:'Aachen BT';-inkscape-font-specification:'Aachen BT';stroke-width:0.264583"
         y="16.143112"
         x="69.332909"
         id="tspan2642"
         sodipodi:role="line">Representive Portfolio</tspan></text>
    <rect
       ry="6.2079453"
       y="29.075314"
       x="4.5914164"
       height="27.989868"
       width="200.75691"
       id="rect2646"
       style="fill:#ffd5d5;stroke:#faebd7;stroke-width:0.529;stroke-linecap:round;stroke-linejoin:bevel" />
    <text
       id="text2650"
       y="40.881828"
       x="16.494596"
       style="font-size:7.05556px;line-height:1.25;font-family:aakar;-inkscape-font-specification:aakar;letter-spacing:0px;stroke-width:0.264583;font-weight:normal;font-style:normal;font-stretch:normal;font-variant:normal;"
       xml:space="preserve"><tspan
         style="stroke-width:0.264583;-inkscape-font-specification:aakar;font-family:aakar;font-weight:normal;font-style:normal;font-stretch:normal;font-variant:normal;"
         y="40.881828"
         x="16.494596"
         id="tspan2648"
         sodipodi:role="line">Ruby Griffith</tspan></text>
    <rect
       ry="3.6602373"
       y="90.151909"
       x="6.8319306"
       height="68.832306"
       width="195.17036"
       id="rect2652"
       style="fill:#ffd5d5;stroke:#faebd7;stroke-width:0.406324;stroke-linecap:round;stroke-linejoin:bevel" />
    <text
       id="text2656"
       y="85.633179"
       x="12.858655"
       style="font-size:7.05556px;line-height:1.25;font-family:Aachen-Bold;-inkscape-font-specification:Aachen-Bold;letter-spacing:0px;stroke-width:0.264583"
       xml:space="preserve"><tspan
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:aakar;-inkscape-font-specification:aakar;stroke-width:0.264583"
         y="85.633179"
         x="12.858655"
         id="tspan2654"
         sodipodi:role="line">Experience</tspan></text>
    <rect
       style="fill:#ffd5d5;stroke:#faebd7;stroke-width:0.349851;stroke-linecap:round;stroke-linejoin:bevel"
       id="rect2658"
       width="195.04768"
       height="51.060555"
       x="6.8932686"
       y="179.7084"
       ry="2.715204" />
    <text
       xml:space="preserve"
       style="font-size:7.05556px;line-height:1.25;font-family:Aachen-Bold;-inkscape-font-specification:Aachen-Bold;letter-spacing:0px;stroke-width:0.264583"
       x="12.858655"
       y="176.12006"
       id="text2662"><tspan
         sodipodi:role="line"
         id="tspan2660"
         x="12.858655"
         y="176.12006"
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:aakar;-inkscape-font-specification:aakar;stroke-width:0.264583">Ideas</tspan></text>
    <rect
       ry="6.9829021"
       y="250.35997"
       x="134.09966"
       height="19.977068"
       width="69.708191"
       id="rect2664"
       style="fill:#fff6d5;stroke:#faebd7;stroke-width:0.636881;stroke-linecap:round;stroke-linejoin:bevel" />
    <text
       id="text2668"
       y="257.6763"
       x="148.81406"
       style="font-size:7.05556px;line-height:1.25;font-family:Aachen-Bold;-inkscape-font-specification:Aachen-Bold;letter-spacing:0px;stroke-width:0.264583"
       xml:space="preserve"><tspan
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:aakar;-inkscape-font-specification:aakar;stroke-width:0.264583"
         y="257.6763"
         x="148.81406"
         id="tspan2666"
         sodipodi:role="line">Schelling Game </tspan><tspan
         id="tspan2670"
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:aakar;-inkscape-font-specification:aakar;stroke-width:0.264583"
         y="267.21069"
         x="148.81406"
         sodipodi:role="line">Evaluation</tspan></text>
  </g>
</svg>

'''
'''--- docs/Problem_Solution.svg ---
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<svg
   xmlns:osb="http://www.openswatchbook.org/uri/2009/osb"
   xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmlns:cc="http://creativecommons.org/ns#"
   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
   xmlns:svg="http://www.w3.org/2000/svg"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   width="200.7444mm"
   height="354.92508mm"
   viewBox="0 0 200.7444 354.92508"
   version="1.1"
   id="svg8"
   inkscape:version="1.0 (4035a4fb49, 2020-05-01)"
   sodipodi:docname="Problem_Solution.svg">
  <defs
     id="defs2">
    <linearGradient
       osb:paint="solid"
       id="linearGradient890">
      <stop
         id="stop888"
         offset="0"
         style="stop-color:#00ff00;stop-opacity:1;" />
    </linearGradient>
  </defs>
  <sodipodi:namedview
     id="base"
     pagecolor="#ffffff"
     bordercolor="#666666"
     borderopacity="1.0"
     inkscape:pageopacity="0.0"
     inkscape:pageshadow="2"
     inkscape:zoom="0.7"
     inkscape:cx="304.11708"
     inkscape:cy="513.5149"
     inkscape:document-units="mm"
     inkscape:current-layer="layer1"
     inkscape:document-rotation="0"
     showgrid="false"
     fit-margin-top="5"
     fit-margin-left="5"
     fit-margin-right="5"
     fit-margin-bottom="5"
     inkscape:window-width="1880"
     inkscape:window-height="1016"
     inkscape:window-x="40"
     inkscape:window-y="27"
     inkscape:window-maximized="1" />
  <metadata
     id="metadata5">
    <rdf:RDF>
      <cc:Work
         rdf:about="">
        <dc:format>image/svg+xml</dc:format>
        <dc:type
           rdf:resource="http://purl.org/dc/dcmitype/StillImage" />
        <dc:title />
      </cc:Work>
    </rdf:RDF>
  </metadata>
  <g
     inkscape:label="Layer 1"
     inkscape:groupmode="layer"
     id="layer1"
     transform="translate(-0.94498158,1.6832932)">
    <text
       xml:space="preserve"
       style="font-size:10.5833px;line-height:1.25;font-family:Aachen-Bold;-inkscape-font-specification:Aachen-Bold;stroke-width:0.264583"
       x="10.377873"
       y="15.590883"
       id="text835"><tspan
         sodipodi:role="line"
         id="tspan833"
         x="10.377873"
         y="15.590883"
         style="stroke-width:0.264583" /></text>
    <text
       xml:space="preserve"
       style="font-size:4.93889px;line-height:1.25;font-family:sans-serif;-inkscape-font-specification:sans-serif;stroke-width:0.264583"
       x="8.2525883"
       y="14.764464"
       id="text839"><tspan
         sodipodi:role="line"
         id="tspan837"
         x="8.2525883"
         y="14.764464"
         style="font-size:4.93889px;stroke-width:0.264583" /></text>
    <text
       xml:space="preserve"
       style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:7.76111px;line-height:1.25;font-family:Adelon-Bold;-inkscape-font-specification:Adelon-Bold;stroke-width:0.264583"
       x="88.231987"
       y="9.2133312"
       id="text843"><tspan
         sodipodi:role="line"
         id="tspan841"
         x="88.231987"
         y="9.2133312"
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:7.76111px;font-family:Adelon-Bold;-inkscape-font-specification:Adelon-Bold;stroke-width:0.264583">Locality</tspan><tspan
         id="tspan910"
         sodipodi:role="line"
         x="88.231987"
         y="18.914719"
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:7.76111px;font-family:'Abyssinica SIL';-inkscape-font-specification:'Abyssinica SIL';stroke-width:0.264583">Simulia</tspan><tspan
         id="tspan894"
         sodipodi:role="line"
         x="88.231987"
         y="29.024633"
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:7.76111px;font-family:Adelon-Bold;-inkscape-font-specification:Adelon-Bold;stroke-width:0.264583" /></text>
    <text
       xml:space="preserve"
       style="font-size:7.05556px;line-height:1.25;font-family:sans-serif;-inkscape-font-specification:sans-serif;stroke-width:0.264583"
       x="6.1873298"
       y="26.370436"
       id="text847"><tspan
         sodipodi:role="line"
         id="tspan845"
         x="6.1873298"
         y="26.370436"
         style="stroke-width:0.264583" /><tspan
         sodipodi:role="line"
         x="6.1873298"
         y="35.463921"
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:Adelon;-inkscape-font-specification:Adelon;stroke-width:0.264583"
         id="tspan849">Problem</tspan><tspan
         sodipodi:role="line"
         x="6.1873298"
         y="44.283371"
         style="stroke-width:0.264583"
         id="tspan851" /><tspan
         sodipodi:role="line"
         x="6.1873298"
         y="53.102821"
         style="stroke-width:0.264583"
         id="tspan853" /><tspan
         sodipodi:role="line"
         x="6.1873298"
         y="61.922272"
         style="stroke-width:0.264583"
         id="tspan855" /></text>
    <text
       xml:space="preserve"
       style="font-size:7.05556px;line-height:1.25;font-family:sans-serif;-inkscape-font-specification:sans-serif;stroke-width:0.264583"
       x="5.7315164"
       y="122.53635"
       id="text859"><tspan
         sodipodi:role="line"
         id="tspan857"
         x="5.7315164"
         y="122.53635"
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:Adelon;-inkscape-font-specification:Adelon;stroke-width:0.264583">Solution</tspan></text>
    <rect
       ry="14.805367"
       style="fill:#00ff00;fill-opacity:1;fill-rule:nonzero;stroke-width:0.271;stroke-miterlimit:4;stroke-dasharray:none"
       id="rect863"
       width="190.7444"
       height="51.329708"
       x="5.9449816"
       y="43.343632" />
    <rect
       ry="5.9444971"
       style="fill:#00ffff;fill-rule:evenodd;stroke-width:0.264583"
       id="rect865"
       width="186.70129"
       height="54.618713"
       x="7.417275"
       y="129.17848" />
    <rect
       ry="6.7858191"
       style="fill:#ff00ff;fill-rule:evenodd;stroke-width:0.264583"
       id="rect867"
       width="52.79073"
       height="17.965048"
       x="74.921814"
       y="49.423214" />
    <text
       xml:space="preserve"
       style="font-size:7.05556px;line-height:1.25;font-family:sans-serif;-inkscape-font-specification:sans-serif;stroke-width:0.264583"
       x="91.100746"
       y="60.667065"
       id="text871"><tspan
         sodipodi:role="line"
         id="tspan869"
         x="91.100746"
         y="60.667065"
         style="stroke-width:0.264583">Photo</tspan></text>
    <text
       xml:space="preserve"
       style="font-size:7.05556px;line-height:1.25;font-family:sans-serif;-inkscape-font-specification:sans-serif;stroke-width:0.264583"
       x="68.129128"
       y="81.612137"
       id="text875"><tspan
         sodipodi:role="line"
         id="tspan873"
         x="68.129128"
         y="81.612137"
         style="stroke-width:0.264583" /></text>
    <text
       xml:space="preserve"
       style="font-size:7.05556px;line-height:1.25;font-family:sans-serif;-inkscape-font-specification:sans-serif;stroke-width:0.264583"
       x="82.574135"
       y="80.782104"
       id="text879"><tspan
         sodipodi:role="line"
         id="tspan877"
         x="82.574135"
         y="80.782104"
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:Adelon-Regular;-inkscape-font-specification:Adelon-Regular;stroke-width:0.264583">Water logging</tspan></text>
    <text
       xml:space="preserve"
       style="font-size:7.05556px;line-height:1.25;font-family:sans-serif;-inkscape-font-specification:sans-serif;stroke-width:0.264583"
       x="80.693825"
       y="146.88432"
       id="text883"><tspan
         sodipodi:role="line"
         id="tspan881"
         x="80.693825"
         y="146.88432"
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:Adelon-Regular;-inkscape-font-specification:Adelon-Regular;stroke-width:0.264583">The Detail Plan</tspan></text>
    <text
       xml:space="preserve"
       style="font-size:7.05556px;line-height:1.25;font-family:sans-serif;-inkscape-font-specification:sans-serif;stroke-width:0.264583"
       x="75.577133"
       y="163.76372"
       id="text887"><tspan
         sodipodi:role="line"
         id="tspan885"
         x="75.577133"
         y="163.76372"
         style="stroke-width:0.264583">Percolation pit</tspan></text>
    <rect
       ry="5.3731494"
       style="fill:#ff9955;fill-rule:evenodd;stroke-width:0.264583"
       id="rect889"
       width="184.06061"
       height="41.339275"
       x="9.8775578"
       y="195.35173" />
    <text
       xml:space="preserve"
       style="font-size:7.05556px;line-height:1.25;font-family:sans-serif;-inkscape-font-specification:sans-serif;text-align:center;text-anchor:middle;stroke-width:0.264583"
       x="101.27757"
       y="203.26172"
       id="text893"><tspan
         sodipodi:role="line"
         id="tspan891"
         x="101.27757"
         y="203.26172"
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:Adelon-Regular;-inkscape-font-specification:Adelon-Regular;text-align:center;text-anchor:middle;stroke-width:0.264583">Peer Review </tspan><tspan
         id="tspan896"
         sodipodi:role="line"
         x="101.27757"
         y="212.37227"
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:Adelon-Regular;-inkscape-font-specification:Adelon-Regular;text-align:center;text-anchor:middle;stroke-width:0.264583">as per scientific guidlines</tspan></text>
    <text
       xml:space="preserve"
       style="font-size:7.05556px;line-height:1.25;font-family:sans-serif;-inkscape-font-specification:sans-serif;stroke-width:0.264583"
       x="71.991035"
       y="222.80949"
       id="text897"><tspan
         sodipodi:role="line"
         id="tspan895"
         x="71.991035"
         y="222.80949"
         style="stroke-width:0.264583" /></text>
    <text
       xml:space="preserve"
       style="font-size:7.05556px;line-height:1.25;font-family:sans-serif;-inkscape-font-specification:sans-serif;stroke-width:0.264583"
       x="57.368073"
       y="224.51627"
       id="text901"><tspan
         sodipodi:role="line"
         id="tspan899"
         x="57.368073"
         y="224.51627"
         style="stroke-width:0.264583">Problems of the plan</tspan><tspan
         sodipodi:role="line"
         x="57.368073"
         y="233.33571"
         style="stroke-width:0.264583"
         id="tspan903">Improvement of the plan</tspan></text>
    <text
       xml:space="preserve"
       style="font-size:7.05556px;line-height:1.25;font-family:sans-serif;-inkscape-font-specification:sans-serif;stroke-width:0.264583"
       x="11.161256"
       y="140.29553"
       id="text907"><tspan
         sodipodi:role="line"
         id="tspan905"
         x="11.161256"
         y="140.29553"
         style="stroke-width:0.264583">Solution 1</tspan></text>
    <rect
       ry="7.089776"
       y="245.37364"
       x="7.8150682"
       height="54.618713"
       width="186.70129"
       id="rect909"
       style="fill:#00ffff;fill-rule:evenodd;stroke-width:0.264583" />
    <rect
       ry="5.8739591"
       y="308.71533"
       x="7.1499419"
       height="42.019604"
       width="186.02893"
       id="rect911"
       style="fill:#ff9955;fill-rule:evenodd;stroke-width:0.268174" />
    <text
       id="text921"
       y="337.79419"
       x="57.368073"
       style="font-size:7.05556px;line-height:1.25;font-family:sans-serif;-inkscape-font-specification:sans-serif;stroke-width:0.264583"
       xml:space="preserve"><tspan
         style="stroke-width:0.264583"
         y="337.79419"
         x="57.368073"
         id="tspan917"
         sodipodi:role="line">Problems of the plan</tspan><tspan
         id="tspan919"
         style="stroke-width:0.264583"
         y="346.61365"
         x="57.368073"
         sodipodi:role="line">Improvement of the plan</tspan></text>
    <text
       xml:space="preserve"
       style="font-size:7.05556px;line-height:1.25;font-family:sans-serif;-inkscape-font-specification:sans-serif;stroke-width:0.264583"
       x="13.740856"
       y="253.07707"
       id="text925"><tspan
         sodipodi:role="line"
         id="tspan923"
         x="13.740856"
         y="253.07707"
         style="stroke-width:0.264583">Solution 2</tspan></text>
    <text
       xml:space="preserve"
       style="font-size:7.05556px;line-height:1.25;font-family:sans-serif;-inkscape-font-specification:sans-serif;stroke-width:0.264583"
       x="74.92601"
       y="264.42932"
       id="text929"><tspan
         sodipodi:role="line"
         id="tspan927"
         x="74.92601"
         y="264.42932"
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:Adelon-Regular;-inkscape-font-specification:Adelon-Regular;stroke-width:0.264583">The Detail Plan</tspan></text>
    <text
       xml:space="preserve"
       style="font-size:7.05556px;line-height:1.25;font-family:sans-serif;-inkscape-font-specification:sans-serif;stroke-width:0.264583"
       x="42.381893"
       y="278.24774"
       id="text933"><tspan
         sodipodi:role="line"
         id="tspan931"
         x="42.381893"
         y="278.24774"
         style="stroke-width:0.264583">Improvement of drainage system</tspan></text>
    <text
       id="text902"
       y="316.5036"
       x="101.27757"
       style="font-size:7.05556px;line-height:1.25;font-family:sans-serif;-inkscape-font-specification:sans-serif;text-align:center;text-anchor:middle;stroke-width:0.264583"
       xml:space="preserve"><tspan
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:Adelon-Regular;-inkscape-font-specification:Adelon-Regular;text-align:center;text-anchor:middle;stroke-width:0.264583"
         y="316.5036"
         x="101.27757"
         id="tspan898"
         sodipodi:role="line">Peer Review </tspan><tspan
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:Adelon-Regular;-inkscape-font-specification:Adelon-Regular;text-align:center;text-anchor:middle;stroke-width:0.264583"
         y="325.61417"
         x="101.27757"
         sodipodi:role="line"
         id="tspan900">as per scientific guidlines</tspan></text>
    <text
       id="text906"
       y="80.534775"
       x="144.37398"
       style="font-size:7.05556px;line-height:1.25;font-family:sans-serif;-inkscape-font-specification:sans-serif;stroke-width:0.264583"
       xml:space="preserve"><tspan
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:Aachen-Light;-inkscape-font-specification:Aachen-Light;stroke-width:0.264583"
         y="80.534775"
         x="144.37398"
         id="tspan904"
         sodipodi:role="line">Department:</tspan><tspan
         id="tspan908"
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:Adelon;-inkscape-font-specification:Adelon;stroke-width:0.264583"
         y="89.628258"
         x="144.37398"
         sodipodi:role="line">City Planning</tspan></text>
  </g>
</svg>

'''
'''--- docs/Project_score_schelling_game.svg ---
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<svg
   xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmlns:cc="http://creativecommons.org/ns#"
   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
   xmlns:svg="http://www.w3.org/2000/svg"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   sodipodi:docname="Project score schelling game.svg"
   inkscape:version="1.0 (4035a4fb49, 2020-05-01)"
   id="svg2696"
   version="1.1"
   viewBox="0 0 210 297"
   height="297mm"
   width="210mm">
  <defs
     id="defs2690" />
  <sodipodi:namedview
     inkscape:window-maximized="1"
     inkscape:window-y="27"
     inkscape:window-x="40"
     inkscape:window-height="1016"
     inkscape:window-width="1880"
     showgrid="false"
     inkscape:document-rotation="0"
     inkscape:current-layer="layer1"
     inkscape:document-units="mm"
     inkscape:cy="567.04426"
     inkscape:cx="367.34086"
     inkscape:zoom="0.51764067"
     inkscape:pageshadow="2"
     inkscape:pageopacity="0.0"
     borderopacity="1.0"
     bordercolor="#666666"
     pagecolor="#ffffff"
     id="base" />
  <metadata
     id="metadata2693">
    <rdf:RDF>
      <cc:Work
         rdf:about="">
        <dc:format>image/svg+xml</dc:format>
        <dc:type
           rdf:resource="http://purl.org/dc/dcmitype/StillImage" />
        <dc:title></dc:title>
      </cc:Work>
    </rdf:RDF>
  </metadata>
  <g
     id="layer1"
     inkscape:groupmode="layer"
     inkscape:label="Layer 1">
    <text
       id="text3261"
       y="18.711344"
       x="79.23584"
       style="font-size:7.05556px;line-height:1.25;font-family:Aachen-Bold;-inkscape-font-specification:Aachen-Bold;letter-spacing:0px;stroke-width:0.264583"
       xml:space="preserve"><tspan
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:'Aachen BT';-inkscape-font-specification:'Aachen BT';stroke-width:0.264583"
         y="18.711344"
         x="79.23584"
         id="tspan3259"
         sodipodi:role="line">Project Funding</tspan></text>
    <text
       id="text3265"
       y="21.099482"
       x="78.192924"
       style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:7.05556px;line-height:1.25;font-family:aakar;-inkscape-font-specification:aakar;letter-spacing:0px;stroke-width:0.264583"
       xml:space="preserve"><tspan
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:aakar;-inkscape-font-specification:aakar;stroke-width:0.264583"
         y="21.099482"
         x="78.192924"
         id="tspan3263"
         sodipodi:role="line"></tspan><tspan
         id="tspan3267"
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:aakar;-inkscape-font-specification:aakar;stroke-width:0.264583"
         y="29.91893"
         x="78.192924"
         sodipodi:role="line">Approved Projects</tspan></text>
    <text
       id="text3271"
       y="40.516262"
       x="72.512749"
       style="font-size:7.05556px;line-height:1.25;font-family:Aachen-Bold;-inkscape-font-specification:Aachen-Bold;letter-spacing:0px;stroke-width:0.264583"
       xml:space="preserve"><tspan
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:aakar;-inkscape-font-specification:aakar;stroke-width:0.264583"
         y="40.516262"
         x="72.512749"
         id="tspan3269"
         sodipodi:role="line">Department: Education</tspan></text>
    <text
       id="text3275"
       y="55.904102"
       x="49.203197"
       style="font-size:7.05556px;line-height:1.25;font-family:Aachen-Bold;-inkscape-font-specification:Aachen-Bold;letter-spacing:0px;stroke-width:0.264583"
       xml:space="preserve"><tspan
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:'Acanthus Black SSi';-inkscape-font-specification:'Acanthus Black SSi';stroke-width:0.264583"
         y="55.904102"
         x="49.203197"
         id="tspan3273"
         sodipodi:role="line">Total Fund Collected: $1,000,000</tspan></text>
    <rect
       ry="7.9488344"
       y="69.903763"
       x="5.1165028"
       height="46.375244"
       width="198.48793"
       id="rect3277"
       style="fill:#fff6d5;stroke:#faebd7;stroke-width:0.598491;stroke-linecap:round;stroke-linejoin:bevel" />
    <text
       id="text3281"
       y="85.622826"
       x="16.159409"
       style="font-size:7.05556px;line-height:1.25;font-family:Aachen-Bold;-inkscape-font-specification:Aachen-Bold;letter-spacing:0px;stroke-width:0.264583"
       xml:space="preserve"><tspan
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:Aachen-Light;-inkscape-font-specification:Aachen-Light;stroke-width:0.264583"
         y="85.622826"
         x="16.159409"
         id="tspan3279"
         sodipodi:role="line">Project 1</tspan></text>
    <text
       transform="scale(1.0450837,0.95686115)"
       id="text3285"
       y="103.16081"
       x="71.777634"
       style="font-size:6.75119px;line-height:1.25;font-family:Aachen-Bold;-inkscape-font-specification:Aachen-Bold;letter-spacing:0px;stroke-width:0.253169"
       xml:space="preserve"><tspan
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:aakar;-inkscape-font-specification:aakar;stroke-width:0.253169"
         y="103.16081"
         x="71.777634"
         id="tspan3283"
         sodipodi:role="line">Work Details</tspan></text>
    <text
       id="text3289"
       y="104.39462"
       x="130.14998"
       style="font-size:7.05556px;line-height:1.25;font-family:Aachen-Bold;-inkscape-font-specification:Aachen-Bold;letter-spacing:0px;stroke-width:0.264583"
       xml:space="preserve"><tspan
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:aakar;-inkscape-font-specification:aakar;stroke-width:0.264583"
         y="104.39462"
         x="130.14998"
         id="tspan3287"
         sodipodi:role="line">Fee Needed: $10,000</tspan></text>
    <rect
       ry="6.7267227"
       y="128.32378"
       x="80.985466"
       height="28.214518"
       width="126.01856"
       id="rect3291"
       style="fill:#ffeeaa;stroke:#faebd7;stroke-width:0.641788;stroke-linecap:round;stroke-linejoin:bevel" />
    <text
       id="text3295"
       y="137.88646"
       x="101.48125"
       style="font-size:7.05556px;line-height:1.25;font-family:Aachen-Bold;-inkscape-font-specification:Aachen-Bold;letter-spacing:0px;stroke-width:0.264583"
       xml:space="preserve"><tspan
         style="stroke-width:0.264583"
         y="137.88646"
         x="101.48125"
         id="tspan3293"
         sodipodi:role="line">Score Schelling Game</tspan></text>
    <path
       id="path3297"
       d="M 89.912301,148.64953 H 192.43987"
       style="fill:#00ff00;stroke:#00ff00;stroke-width:2;stroke-linecap:round;stroke-linejoin:bevel;stroke-miterlimit:4;stroke-dasharray:none" />
    <text
       id="text3301"
       y="145.47458"
       x="88.853966"
       style="font-size:7.05556px;line-height:1.25;font-family:Aachen-Bold;-inkscape-font-specification:Aachen-Bold;letter-spacing:0px;stroke-width:0.264583"
       xml:space="preserve"><tspan
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:aakar;-inkscape-font-specification:aakar;stroke-width:0.264583"
         y="145.47458"
         x="88.853966"
         id="tspan3299"
         sodipodi:role="line">-10</tspan></text>
    <text
       id="text3305"
       y="146.00374"
       x="190.85239"
       style="font-size:7.05556px;line-height:1.25;font-family:Aachen-Bold;-inkscape-font-specification:Aachen-Bold;letter-spacing:0px;stroke-width:0.264583"
       xml:space="preserve"><tspan
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:aakar;-inkscape-font-specification:aakar;stroke-width:0.264583"
         y="146.00374"
         x="190.85239"
         id="tspan3303"
         sodipodi:role="line">+10</tspan></text>
    <rect
       style="fill:#fff6d5;stroke:#faebd7;stroke-width:0.598491;stroke-linecap:round;stroke-linejoin:bevel"
       id="rect3307"
       width="198.48793"
       height="46.375244"
       x="5.1165028"
       y="167.26994"
       ry="7.9488344" />
    <text
       xml:space="preserve"
       style="font-size:7.05556px;line-height:1.25;font-family:Aachen-Bold;-inkscape-font-specification:Aachen-Bold;letter-spacing:0px;stroke-width:0.264583"
       x="16.159409"
       y="182.98877"
       id="text3311"><tspan
         sodipodi:role="line"
         id="tspan3309"
         x="16.159409"
         y="182.98877"
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:Aachen-Light;-inkscape-font-specification:Aachen-Light;stroke-width:0.264583">Project 2</tspan></text>
    <text
       xml:space="preserve"
       style="font-size:6.75119px;line-height:1.25;font-family:Aachen-Bold;-inkscape-font-specification:Aachen-Bold;letter-spacing:0px;stroke-width:0.253169"
       x="71.777634"
       y="204.91731"
       id="text3315"
       transform="scale(1.0450837,0.95686115)"><tspan
         sodipodi:role="line"
         id="tspan3313"
         x="71.777634"
         y="204.91731"
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:aakar;-inkscape-font-specification:aakar;stroke-width:0.253169">Work Details</tspan></text>
    <text
       xml:space="preserve"
       style="font-size:7.05556px;line-height:1.25;font-family:Aachen-Bold;-inkscape-font-specification:Aachen-Bold;letter-spacing:0px;stroke-width:0.264583"
       x="130.14998"
       y="201.76027"
       id="text3319"><tspan
         sodipodi:role="line"
         id="tspan3317"
         x="130.14998"
         y="201.76027"
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:aakar;-inkscape-font-specification:aakar;stroke-width:0.264583">Fee Needed: $5,0000</tspan></text>
    <rect
       style="fill:#ffeeaa;stroke:#faebd7;stroke-width:0.647314;stroke-linecap:round;stroke-linejoin:bevel"
       id="rect3321"
       width="126.27556"
       height="28.644096"
       x="80.988228"
       y="225.69189"
       ry="6.8291402" />
    <text
       xml:space="preserve"
       style="font-size:7.05556px;line-height:1.25;font-family:Aachen-Bold;-inkscape-font-specification:Aachen-Bold;letter-spacing:0px;stroke-width:0.264583"
       x="101.48125"
       y="235.25182"
       id="text3325"><tspan
         sodipodi:role="line"
         id="tspan3323"
         x="101.48125"
         y="235.25182"
         style="stroke-width:0.264583">Score Schelling Game</tspan></text>
    <path
       style="fill:#00ff00;stroke:#00ff00;stroke-width:2;stroke-linecap:round;stroke-linejoin:bevel;stroke-miterlimit:4;stroke-dasharray:none"
       d="M 89.912301,246.01681 H 192.43987"
       id="path3327" />
    <text
       xml:space="preserve"
       style="font-size:7.05556px;line-height:1.25;font-family:Aachen-Bold;-inkscape-font-specification:Aachen-Bold;letter-spacing:0px;stroke-width:0.264583"
       x="88.853966"
       y="242.83994"
       id="text3331"><tspan
         sodipodi:role="line"
         id="tspan3329"
         x="88.853966"
         y="242.83994"
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:aakar;-inkscape-font-specification:aakar;stroke-width:0.264583">-10</tspan></text>
    <text
       xml:space="preserve"
       style="font-size:7.05556px;line-height:1.25;font-family:Aachen-Bold;-inkscape-font-specification:Aachen-Bold;letter-spacing:0px;stroke-width:0.264583"
       x="190.85239"
       y="243.36909"
       id="text3335"><tspan
         sodipodi:role="line"
         id="tspan3333"
         x="190.85239"
         y="243.36909"
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:aakar;-inkscape-font-specification:aakar;stroke-width:0.264583">+10</tspan></text>
  </g>
</svg>

'''
'''--- docs/Shivarthu.md ---

* **Project Name:** Shivarthu
* **Team Name:** Reaudito
* **Payment Address:** 0x7e30FB962f951ef78D901865F87DD036fc5aa946 (DAI)

### Overview

Shivarthu: The blockchain-based decentralized governance system. Democracy is about fair and equal treatment of everyone in a country. But it becomes unrealistic to achieve when political parties have their conflict of interest, and leaders don’t have the expertise to make evidence-based policies and neither have the skill and manpower for solving problems that surround our society and ecosystem. The new fair democracy provides an elegant way of governance that separates the representative responsibility according to their specialization and can grow into any complexity. The governance is divided into various departments, and each department is supervised by representatives with expertise in the field. Rational voters who have a sufficient understanding of the departments and their issues will be given more weight in the voting process than other voters. It results in a self-reinforcing feedback loop that eliminates frivolous actors and leaves utilitarian ones in charge.

https://shivarthu.reaudito.com/paper/Shivarthu_whitepaper.pdf 

Shivarthu will be build on Substrate.

Our democracy has many challenges, blockchain can provide a way to tackle those challenges by minimizing trust through game theory.  That made our team interested in creating this project.

### Project Details

Project Github link: https://github.com/amiyatulu/shivarthu

#### Departments:
The governance is divided into many departments like education, infrastructure, health, community service for every locality.
#### Expertise evaluation of representatives :
Voters and especially representatives need to have some experience or expertise in the department. Experience is required because education about the department leads to better decision making. 
Their kyc and experience is evaluated by schelling game.

#### Vouching
A family tree is constructed.
If they know each other, friends and relatives will become guarantors for each other.
Moderators chosen through approval voting have the ability to invalidate the fake vouching by down voting the guarantor.

Experience evaluation pallet:  
https://github.com/amiyatulu/shivarthu/tree/main/pallets/template  

<img src="Portfolio.svg" alt="portfolio" height="600"/>
 

#### Schelling Game:

[Schelling Game Effectiveness](./effectiveness_schelling_game.md)

In this project, the Schelling game is employed to perform Know Your Customer (KYC) checks on users. Furthermore, a modified version of the Schelling game called the score Schelling game is applied to funding departments, incorporating both funding allocation and rating of users based on the positive externality they generate.

In the Schelling game, individuals who wish to participate as jurors can apply to make decisions. The likelihood of being selected as a juror is directly proportional to the number of tokens a juror stakes. The more tokens a juror stakes, the greater their chances of being chosen. Additionally, jurors are randomly selected, which helps safeguard the system against sybil attacks.

We will use the substrate randomness trait for generating a random number.
https://docs.substrate.io/reference/how-to-guides/pallet-design/incorporate-randomness/

Then jurors will vote for their decision using the commit and reveal scheme. In the commit phase, they submit the hash of the vote string. Then, in the reveal phase, they submit the hash and the vote string. If the vote string matches with the hash, then the vote is accepted. 
If a juror's vote is coherent (more than 51% of other jurors agree) then they receive incentives, otherwise, incentives are deducted from the stake of the juror. 

Sortition Sum Game pallets:
https://github.com/amiyatulu/shivarthu/tree/main/pallets/sortition-sum-game

#### Voting for selection of department representatives:

The election will be conducted using a multi-winner approval system. To choose the representatives, we will employ the sequential Phragmén method on the substrate. In this approach, instead of using stake, we will consider the vote weight based on factors such as reputation, experience, and positive externality scores. These scores are determined by the level of participation in the network or the positive external effects they have generated. As mentioned earlier, the positive externality score is calculated using the score Schelling game.

https://paritytech.github.io/substrate/master/sp_npos_elections/phragmen/fn.seq_phragmen.html

Approval Voting:   
<img src="approval_voting.svg" alt="Approval Voting" height="600"/>   
Winners:   
<img src="Winners.svg" alt="Winner" height="600"/>

Seq phragmen voting:
https://github.com/amiyatulu/shivarthu/tree/main/pallets/election

#### Voting for selection of governors   
Governers will be selected again by seq phragmen, to form a fully decentralized governance they will have functions of setting different thresholds, like election timing, the number of elected representatives, and approving departments that can be formed.

#### Project application and acceptance:
The representatives are in charge of accepting the incoming projects for funding. 
People will submit their problems, for example, waterlogging in the locality.
Then experts all around the globe will submit the solution. The solution will be peer-reviewed to check its pros, cons, and suggest improvements that can be made. The review must meet the scientific guidelines. The solution can undergo revision through peer review feedback.
The solution provider and peer reviewer have to stake some money to receive incentives for their work. The solution and peer review will again be approved and disapproved through the shelling game after checking whether the content meets the quality as recommended in scientific guidelines. The solutions provider and reviewer will get the incentives if it gets approved, otherwise, some money will be cut from the stake. It creates pressure on the reviewer to maintain quality without noise.   
<img src="Problem_Solution.svg" alt="Problem Solution" height="600"/>   

The representatives of the department will select the most optimal solution.
After that persons wanting to take the lead to implement the solution will apply. Again representatives will select the best project leader from the application.   
  
<img src="Leadership.svg" alt="Leadership" height="600"/>      

## Money for department:   

Form a department with a location with some min members, say 3000, and get it approved by the main governance.    

### Department price discovery:   

Say we have 1,000,000 departments with 3000 population each.    

Department funding operates on a tipping system where each department is categorized as either a SmallTipper, BigTipper, SmallSpender, MediumSpender, or BigSpender, each corresponding to an increased funding value.

The funding categories are represented by an enumeration:

```rust
pub enum TippingName {
    SmallTipper,
    BigTipper,
    SmallSpender,
    MediumSpender,
    BigSpender,
}
```

Department-appointed governors are required to apply for the spending value, which can take any numerical value but must not exceed the specified limit associated with the tipping name. For example, if the allowed limit for SmallTipper is 10,000 tokens, applications for SmallTipper must be for an amount less than or equal to 10,000 tokens.

Applying for larger funds necessitates a greater stake in the form of increased responsibilities or commitments.

The amount is released after it is validated by the Yes or No Schilling game.

To utilize department funds, there is a process called Project Tips, wherein individuals or teams apply using a procedure similar to that of determining department funding

### Further improvements
Create guidelines for department formation, e.g. specifying which values are allowed and which are not. These guidelines will serve as the basis upon which the maximum tipping amount is decided by the juror. There can be logic for department approval based on meeting the guidelines. A department can only apply for funding if it is approved. Approval can be obtained through Seq phragmen governance.

## Price discovery of positive externality through Score Schelling Game:

1) When you submit a positive externality that you made, you need to provide details of your work.
2) Here is how the score Schelling game works to calculate score. For example, you can have a score between -10 and +10. The range of -10 to +10 poses a problem because the mean works best without extreme values. If someone gives -10, and others give 1, the mean result can be skewed due to the -10 outlier. The trick is to remove outliers by computing the standard deviation and eliminating all values more than one standard deviation away from the mean. Subsequently, we calculate the new mean of the remaining values, which consist of 68.27% of the dataset. This new mean becomes the score. If your given score is close to the new mean, you receive incentives. If it deviates from the new mean, a portion of your staking value is deducted. Commit and reveal scheme is used. 

Code to calculate new mean:

```python
import statistics

def calculate_new_mean(items):
    mean = statistics.mean(items)
    print(mean)
    sd = statistics.stdev(items) 
    print(sd)

    #The values less than one standard deviation away from the mean account for 68.27% of the set
    #So we calculate mean of this 68.27% of data removing outlier

    # New data
    new_items = []
    for x in items:
        if x >= mean - sd and x <= mean + sd:
            new_items.append(x)

    print(new_items)

    new_mean = statistics.mean(new_items)
    print(new_mean)
    print("********************")

items = [-10, 1, 1, 1, 5, 1, 1, 7]
calculate_new_mean(items)
# 0.875
# 4.969550137731641
# [1, 1, 1, 5, 1, 1]
# 1.6666666666666667
# ********************
items2 = [-10, -10, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0]
calculate_new_mean(items2)
# -1.5833333333333333
# 3.941811612428832
# [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]
# 0.1
# ********************
items3 = [-10, -10, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, -9, -8, -7, -6, -5, -4, -3, -2, -1]
calculate_new_mean(items3)
# -3.0476190476190474
# 3.8141341150540375
# [0, 0, 0, 0, 0, 0, 0, 0, 0, -6, -5, -4, -3, -2, -1]
# -1.4
# ********************
```

3) Then, we will do quality score voting Schelling game that checks the quality or impact of positive externality. The score range is 0-5
4) A fixed amount of tokens is released for each score. The highest amount of tokens will be released for a score of 5, fewer tokens for a score of 1, and no tokens for a score of 0. 

### Randomized Tax collection

Initial project funding comes from inflation, however as the inflation rate declines over time, the funds are collected by subtracting some amount of balance from different accounts so that there is no longer any inflation.

To avoid creating disincentives to invest in the coin, tax collection or deduction of balance is randomized for every transaction.

During a transaction, a random value is generated between 0 and 10. If the drawn number is 0, no tax will be deducted. If the number is 10, a 5% tax will be deducted from the transaction. In the case of the drawn number being 5, a 2.5% tax will be deducted.

In order to stop hoarding following tax collection can also be applied:

An account number is assigned to each account starting from 1000 in ascending order. A random number n between 1-1000 is drawn.

All account numbers with account_number % 1000 == drawn random number are taxed

If the drawn number is 1,000, one out of every 1,000 accounts will be taxed.

The primary governance determines the tax rate. The block number is stored during the draw. One draw is conducted each month at random time. Tax is deducted when the account interacts with the blockchain.

### Ecosystem Fit

The project will be built on the substrate as a parachain or parathread. 

Other projects similar to it is gitcoin, but its not in Substrate / Polkadot / Kusama ecosystem. Gitcoin uses quadratic funding, but we will use score schelling game for allocation of funds. Gitcoin is for mainly blockchain projects, but our projects includes local community problems. 

### References 
Schelling game whitepaper of Kleros:    
https://kleros.io/whitepaper.pdf  
Approval Voting:  
https://electionscience.org/   

## Team:

### Team members

* Amiya Behera (Developer)
* Soumya Ranjan Behera (Developer)
* Mahesh Sahoo (Advisor)

### Contact

* **Contact Name:**  Amiya Behera
* **Contact Email:** amiyatulu@gmail.com
* **Website:** https://shivarthu.reaudito.com/#/

### Legal Structure

* **Registered Address:** Charampa, Bhadrak, Odisha, India
* **Registered Legal Entity:** Reaudito

### Team's experience

Amiya Behera is a full-stack developer and has build many webapps and a few dapps. Has experience in substrate, rust, reactjs, python and also in building mobile apps in react native. 
Soumya Ranjan Behera is also a full stack developer with experience in reactjs, react native and python.

### Team Code Repos

* https://github.com/amiyatulu
* https://github.com/soumyababu
* https://github.com/amiyatulu/shivarthu

## Development Roadmap :

| Number | Deliverable | Specification |
| -----: | ----------- | ------------- |
| 0a. | License |  MIT  |
| 0b. | Documentation | We will provide both **inline documentation** of the code and a basic **tutorial** that explains how a user about the project |
| 0c. | Testing Guide | Core functions will be fully covered by unit tests to ensure functionality and robustness. In the guide, we will describe how to run these tests. |
| 0d. | Docker | We will provide a Dockerfile(s) that can be used to test all the functionality delivered with this milestone. |
| 0e. | Article | We will publish an **article**/workshop that explains our project (what was done/achieved as part of the grant.) |
| 1. | Substrate module: Experience Evaluation | Schelling game for experience evaluation |
| 2. | Substrate Module: Approval voting| Selection of representatives through multi winner approval |
|3.| Reactjs UI for Experience Evaluation| Uploading evidence of experience for the department using IPFS, UI for commit and reveal voting for schelling game and interaction of UI with substrate |
|4.| Reactjs Approval Voting UI| Userfriendly UI for voting the representatives where their profile is shown |

### Milestone 2 — Additional features

| Number | Deliverable | Specification |
| -----: | ----------- | ------------- |
| 0a. | License |  MIT  |
| 0b. | Documentation | We will provide both **inline documentation** of the code and a basic **tutorial** that explains how a user about the project |
| 0c. | Testing Guide | Core functions will be fully covered by unit tests to ensure functionality and robustness. In the guide, we will describe how to run these tests. |
| 0d. | Docker | We will provide a Dockerfile(s) that can be used to test all the functionality delivered with this milestone. |
| 0e. | Article | We will publish an **article**/workshop that explains our project (what was done/achieved as part of the grant.) |
| 1. | Substrate module: Peer review system | Reviewing the projects using schelling game | 
| 2. | Substrate module: Fund allocation | Allocating the fund using score schelling game | 
| 3.| Reactjs UI for peer review system and Fund allocation | User friendly UI for reviewing the projects, schelling game voting interface, and fund allocation |
| 4. | Search Engine| Offchain search engine for project discovery and finding representatives |

## Future Plans

Short-term:
 Improve the ideas with discussing with community   
 Increase social media reach   
 Write the source code   
 
Long-term:  
    Onboard people into the app, and improve it taking feedback from the community.  
    Enhance the app, provide upgrades when required.    

'''
'''--- docs/Shivarthu_old_copy.md ---

* **Project Name:** Shivarthu
* **Team Name:** Reaudito
* **Payment Address:** 0x7e30FB962f951ef78D901865F87DD036fc5aa946 (DAI)

### Overview

Shivarthu: The blockchain-based decentralized governance system. Democracy is about fair and equal treatment of everyone in a country. But it becomes unrealistic to achieve when political parties have their conflict of interest, and leaders don’t have the expertise to make evidence-based policies and neither have the skill and manpower for solving problems that surround our society and ecosystem. The new fair democracy provides an elegant way of governance that separates the representative responsibility according to their specialization and can grow into any complexity. The governance is divided into various departments, and each department is supervised by representatives with expertise in the field. Rational voters who have a sufficient understanding of the departments and their issues will be given more weight in the voting process than other voters. It results in a self-reinforcing feedback loop that eliminates frivolous actors and leaves utilitarian ones in charge.

https://shivarthu.reaudito.com/paper/Shivarthu_whitepaper.pdf 

Shivarthu will be build on Substrate.

Our democracy has many challenges, blockchain can provide a way to tackle those challenges by minimizing trust through game theory.  That made our team interested in creating this project.

### Project Details

Project Github link: https://github.com/amiyatulu/shivarthu

#### Departments:
The governance is divided into many departments like education, infrastructure, health, community service for every locality.
#### Expertise evaluation of representatives :
Voters and especially representatives need to have some experience or expertise in the department. Experience is required because education about the department leads to better decision making. 
Their kyc and experience is evaluated by schelling game.

#### Vouching
A family tree is constructed.
If they know each other, friends and relatives will become guarantors for each other.
Moderators chosen through approval voting have the ability to invalidate the fake vouching by down voting the guarantor.

Experience evaluation pallet:  
https://github.com/amiyatulu/shivarthu/tree/main/pallets/template  

<img src="Portfolio.svg" alt="portfolio" height="600"/>
 

#### Schelling Game:

[Schelling Game Effectiveness](./effectiveness_schelling_game.md)

In this project, the Schelling game is employed to perform Know Your Customer (KYC) checks on users. Furthermore, a modified version of the Schelling game called the score Schelling game is applied to funding departments, incorporating both funding allocation and rating of users based on the positive externality they generate.

In the Schelling game, individuals who wish to participate as jurors can apply to make decisions. The likelihood of being selected as a juror is directly proportional to the number of tokens a juror stakes. The more tokens a juror stakes, the greater their chances of being chosen. Additionally, jurors are randomly selected, which helps safeguard the system against sybil attacks.

We will use the substrate randomness trait for generating a random number.
https://docs.substrate.io/reference/how-to-guides/pallet-design/incorporate-randomness/

Then jurors will vote for their decision using the commit and reveal scheme. In the commit phase, they submit the hash of the vote string. Then, in the reveal phase, they submit the hash and the vote string. If the vote string matches with the hash, then the vote is accepted. 
If a juror's vote is coherent (more than 51% of other jurors agree) then they receive incentives, otherwise, incentives are deducted from the stake of the juror. 

Sortition Sum Game pallets:
https://github.com/amiyatulu/shivarthu/tree/main/pallets/sortition-sum-game

#### Voting for selection of department representatives:

The election will be conducted using a multi-winner approval system. To choose the representatives, we will employ the sequential Phragmén method on the substrate. In this approach, instead of using stake, we will consider the vote weight based on factors such as reputation, experience, and positive externality scores. These scores are determined by the level of participation in the network or the positive external effects they have generated. As mentioned earlier, the positive externality score is calculated using the score Schelling game.

https://paritytech.github.io/substrate/master/sp_npos_elections/phragmen/fn.seq_phragmen.html

Approval Voting:   
<img src="approval_voting.svg" alt="Approval Voting" height="600"/>   
Winners:   
<img src="Winners.svg" alt="Winner" height="600"/>

Seq phragmen voting:
https://github.com/amiyatulu/shivarthu/tree/main/pallets/election

#### Voting for selection of governors   
Governers will be selected again by seq phragmen, to form a fully decentralized governance they will have functions of setting different thresholds, like election timing, the number of elected representatives, and approving departments that can be formed.

#### Project application and acceptance:
The representatives are in charge of accepting the incoming projects for funding. 
People will submit their problems, for example, waterlogging in the locality.
Then experts all around the globe will submit the solution. The solution will be peer-reviewed to check its pros, cons, and suggest improvements that can be made. The review must meet the scientific guidelines. The solution can undergo revision through peer review feedback.
The solution provider and peer reviewer have to stake some money to receive incentives for their work. The solution and peer review will again be approved and disapproved through the shelling game after checking whether the content meets the quality as recommended in scientific guidelines. The solutions provider and reviewer will get the incentives if it gets approved, otherwise, some money will be cut from the stake. It creates pressure on the reviewer to maintain quality without noise.   
<img src="Problem_Solution.svg" alt="Problem Solution" height="600"/>   

The representatives of the department will select the most optimal solution.
After that persons wanting to take the lead to implement the solution will apply. Again representatives will select the best project leader from the application.   
  
<img src="Leadership.svg" alt="Leadership" height="600"/>      

## Money for department:   

Form a department with a location with some min members, say 3000, and get it approved by the main governance.    

### Department price discovery:   

Say we have 1,000,000 departments with 3000 population each.    

Mega department with 1,000,000 population, will get 300x more weightage funding.   

With score schelling game, we will get score between 0-10  
Score schelling game: 0-10 scores  
10 means 100% funding  
1 means 10% funding  
0 means no funding  

ax+ 0.1bx + 0.2cx + 0.3dx + ..... + 0.9jx = Total fund   

100% funding = x    
0.1 when you get 1 score, 0.3 when you get 3 score etc.   
a, b, c, etc. are a number of departments with particular scores. 

You have the option to assign a rating to the department on a scale of 0 to 5 or 0 to 10, without any knowledge of what ratings others are giving. If the "mean" rating of all the jurors closely matches your rating, you will receive incentives as a juror. However, if the "mean" rating deviates significantly from your assigned rating, your incentives will be deducted. Consequently, jurors will strive to align their ratings with what others are likely to assign based on the available information, rather than arbitrarily defecting from the consensus.

## Price discovery of projects through Score Schelling Game:

1) When you submit a project, you need to provide details of the funding needed for work to be done.
2) Then, we will have a percentage Schelling game to predict the price. That is, you can predict whether to increase or decrease the funding amount in percentage. Score values will remain from -10 to +10, -10 means 100% decrease, +10 means 100% increase
The range of -10 to +10 has a problem because the mean works best without extreme values. So, if someone gives -10, and others give 1, the mean result can get screwed due to the -10 outlier. So the trick is to remove outliers by computing the standard deviation. Remove all values more than one standard deviation away from the mean. Then, we calculate the new mean of the left values (it consists of 68.27% data of the set).

Code to calculate new mean:

```python
import statistics

def calculate_new_mean(items):
    mean = statistics.mean(items)
    print(mean)
    sd = statistics.stdev(items) 
    print(sd)

    #The values less than one standard deviation away from the mean account for 68.27% of the set
    #So we calculate mean of this 68.27% of data removing outlier

    # New data
    new_items = []
    for x in items:
        if x >= mean - sd and x <= mean + sd:
            new_items.append(x)

    print(new_items)

    new_mean = statistics.mean(new_items)
    print(new_mean)
    print("********************")

items = [-10, 1, 1, 1, 5, 1, 1, 7]
calculate_new_mean(items)
# 0.875
# 4.969550137731641
# [1, 1, 1, 5, 1, 1]
# 1.6666666666666667
# ********************
items2 = [-10, -10, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0]
calculate_new_mean(items2)
# -1.5833333333333333
# 3.941811612428832
# [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]
# 0.1
# ********************
items3 = [-10, -10, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, -9, -8, -7, -6, -5, -4, -3, -2, -1]
calculate_new_mean(items3)
# -3.0476190476190474
# 3.8141341150540375
# [0, 0, 0, 0, 0, 0, 0, 0, 0, -6, -5, -4, -3, -2, -1]
# -1.4
# ********************
```
<img src="Project_score_schelling_game.svg" alt="Score Schelling Game" height="600"/>  

3) Then, we will do quality score voting Schelling game that checks the project meets the quality guidelines. The score range is 0-5
4) The amount of funding will be directly proportional to (Predicted Price) * (Quality Score/5*2)
Code:
```python
total_fund = 200000

predictprice = [(17411)*(5/5*2), (411)*(5/5*2), (17411)*(5/5*2), (1741)*(2/5*2)]

total_predictprices = 0
for x in predictprice:
    total_predictprices = total_predictprices + x

predicted_price_percentage = []
for x in predictprice:
    percentage = x / total_predictprices * 100
    predicted_price_percentage.append(percentage)

money_distribution = []
for x in predicted_price_percentage:
    money = x * total_fund/100
    money_distribution.append(money)

print(money_distribution)
```

The algorithm tries to meet the values of teal organization through reduced compensation inequality.

### Randomized Tax collection

Initial project funding comes from inflation, however as the inflation rate declines over time, the funds are collected by subtracting some amount of balance from different accounts so that there is no longer any inflation.

To avoid creating disincentives to invest in the coin, tax collection or deduction of balance is randomized for every transaction.

During a transaction, a random value is generated between 0 and 10. If the drawn number is 0, no tax will be deducted. If the number is 10, a 5% tax will be deducted from the transaction. In the case of the drawn number being 5, a 2.5% tax will be deducted.

In order to stop hoarding following tax collection can also be applied:

An account number is assigned to each account starting from 1000 in ascending order. A random number n between 1-1000 is drawn.

All account numbers with account_number % 1000 == drawn random number are taxed

If the drawn number is 1,000, one out of every 1,000 accounts will be taxed.

The primary governance determines the tax rate. The block number is stored during the draw. One draw is conducted each month at random time. Tax is deducted when the account interacts with the blockchain.

### Ecosystem Fit

The project will be built on the substrate as a parachain or parathread. 

Other projects similar to it is gitcoin, but its not in Substrate / Polkadot / Kusama ecosystem. Gitcoin uses quadratic funding, but we will use score schelling game for allocation of funds. Gitcoin is for mainly blockchain projects, but our projects includes local community problems. 

### References 
Schelling game whitepaper of Kleros:    
https://kleros.io/whitepaper.pdf  
Approval Voting:  
https://electionscience.org/   

## Team:

### Team members

* Amiya Behera (Developer)
* Soumya Ranjan Behera (Developer)
* Mahesh Sahoo (Advisor)

### Contact

* **Contact Name:**  Amiya Behera
* **Contact Email:** amiyatulu@gmail.com
* **Website:** https://shivarthu.reaudito.com/#/

### Legal Structure

* **Registered Address:** Charampa, Bhadrak, Odisha, India
* **Registered Legal Entity:** Reaudito

### Team's experience

Amiya Behera is a full-stack developer and has build many webapps and a few dapps. Has experience in substrate, rust, reactjs, python and also in building mobile apps in react native. 
Soumya Ranjan Behera is also a full stack developer with experience in reactjs, react native and python.

### Team Code Repos

* https://github.com/amiyatulu
* https://github.com/soumyababu
* https://github.com/amiyatulu/shivarthu

## Development Roadmap :

| Number | Deliverable | Specification |
| -----: | ----------- | ------------- |
| 0a. | License |  MIT  |
| 0b. | Documentation | We will provide both **inline documentation** of the code and a basic **tutorial** that explains how a user about the project |
| 0c. | Testing Guide | Core functions will be fully covered by unit tests to ensure functionality and robustness. In the guide, we will describe how to run these tests. |
| 0d. | Docker | We will provide a Dockerfile(s) that can be used to test all the functionality delivered with this milestone. |
| 0e. | Article | We will publish an **article**/workshop that explains our project (what was done/achieved as part of the grant.) |
| 1. | Substrate module: Experience Evaluation | Schelling game for experience evaluation |
| 2. | Substrate Module: Approval voting| Selection of representatives through multi winner approval |
|3.| Reactjs UI for Experience Evaluation| Uploading evidence of experience for the department using IPFS, UI for commit and reveal voting for schelling game and interaction of UI with substrate |
|4.| Reactjs Approval Voting UI| Userfriendly UI for voting the representatives where their profile is shown |

### Milestone 2 — Additional features

| Number | Deliverable | Specification |
| -----: | ----------- | ------------- |
| 0a. | License |  MIT  |
| 0b. | Documentation | We will provide both **inline documentation** of the code and a basic **tutorial** that explains how a user about the project |
| 0c. | Testing Guide | Core functions will be fully covered by unit tests to ensure functionality and robustness. In the guide, we will describe how to run these tests. |
| 0d. | Docker | We will provide a Dockerfile(s) that can be used to test all the functionality delivered with this milestone. |
| 0e. | Article | We will publish an **article**/workshop that explains our project (what was done/achieved as part of the grant.) |
| 1. | Substrate module: Peer review system | Reviewing the projects using schelling game | 
| 2. | Substrate module: Fund allocation | Allocating the fund using score schelling game | 
| 3.| Reactjs UI for peer review system and Fund allocation | User friendly UI for reviewing the projects, schelling game voting interface, and fund allocation |
| 4. | Search Engine| Offchain search engine for project discovery and finding representatives |

## Future Plans

Short-term:
 Improve the ideas with discussing with community   
 Increase social media reach   
 Write the source code   
 
Long-term:  
    Onboard people into the app, and improve it taking feedback from the community.  
    Enhance the app, provide upgrades when required.    

'''
'''--- docs/Winners.svg ---
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<svg
   xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmlns:cc="http://creativecommons.org/ns#"
   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
   xmlns:svg="http://www.w3.org/2000/svg"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   sodipodi:docname="Winners.svg"
   inkscape:version="1.0 (4035a4fb49, 2020-05-01)"
   id="svg8"
   version="1.1"
   viewBox="0 0 210 297"
   height="297mm"
   width="210mm">
  <defs
     id="defs2" />
  <sodipodi:namedview
     inkscape:window-maximized="1"
     inkscape:window-y="27"
     inkscape:window-x="40"
     inkscape:window-height="1016"
     inkscape:window-width="1880"
     showgrid="false"
     inkscape:document-rotation="0"
     inkscape:current-layer="layer1"
     inkscape:document-units="mm"
     inkscape:cy="552.9037"
     inkscape:cx="378.38301"
     inkscape:zoom="0.51764067"
     inkscape:pageshadow="2"
     inkscape:pageopacity="0.0"
     borderopacity="1.0"
     bordercolor="#666666"
     pagecolor="#ffffff"
     id="base" />
  <metadata
     id="metadata5">
    <rdf:RDF>
      <cc:Work
         rdf:about="">
        <dc:format>image/svg+xml</dc:format>
        <dc:type
           rdf:resource="http://purl.org/dc/dcmitype/StillImage" />
        <dc:title></dc:title>
      </cc:Work>
    </rdf:RDF>
  </metadata>
  <g
     id="layer1"
     inkscape:groupmode="layer"
     inkscape:label="Layer 1">
    <text
       id="text835"
       y="20.485571"
       x="62.178776"
       style="font-size:7.05556px;line-height:1.25;font-family:sans-serif;-inkscape-font-specification:sans-serif;letter-spacing:0px;stroke-width:0.264583;font-weight:normal;font-style:normal;font-stretch:normal;font-variant:normal;"
       xml:space="preserve"><tspan
         style="stroke-width:0.264583;-inkscape-font-specification:sans-serif;font-family:sans-serif;font-weight:normal;font-style:normal;font-stretch:normal;font-variant:normal;"
         y="20.485571"
         x="62.178776"
         id="tspan833"
         sodipodi:role="line" /></text>
    <text
       id="text839"
       y="18.097466"
       x="59.200447"
       style="font-size:7.05556px;line-height:1.25;font-family:'Airmole Stripe';-inkscape-font-specification:'Airmole Stripe';letter-spacing:0px;stroke-width:0.264583"
       xml:space="preserve"><tspan
         style="stroke-width:0.264583"
         y="18.097466"
         x="59.200447"
         id="tspan837"
         sodipodi:role="line" /></text>
    <text
       id="text843"
       y="12.498664"
       x="66.752525"
       style="font-size:7.05556px;line-height:1.25;font-family:'Airmole Stripe';-inkscape-font-specification:'Airmole Stripe';letter-spacing:0px;stroke-width:0.264583"
       xml:space="preserve"><tspan
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:'Aachen BT';-inkscape-font-specification:'Aachen BT';stroke-width:0.264583"
         y="12.498664"
         x="66.752525"
         id="tspan841"
         sodipodi:role="line">Representatives Details</tspan></text>
    <text
       id="text856"
       y="46.226013"
       x="159.20009"
       style="font-size:7.05556px;line-height:1.25;font-family:'Airmole Stripe';-inkscape-font-specification:'Airmole Stripe';letter-spacing:0px;stroke-width:0.264583"
       xml:space="preserve"><tspan
         style="stroke-width:0.264583"
         y="46.226013"
         x="159.20009"
         id="tspan854"
         sodipodi:role="line" /></text>
    <text
       id="text860"
       y="41.88887"
       x="149.75372"
       style="font-size:7.05556px;line-height:1.25;font-family:'Airmole Stripe';-inkscape-font-specification:'Airmole Stripe';letter-spacing:0px;stroke-width:0.264583"
       xml:space="preserve"><tspan
         style="stroke-width:0.264583"
         y="41.88887"
         x="149.75372"
         id="tspan858"
         sodipodi:role="line" /><tspan
         id="tspan862"
         style="stroke-width:0.264583"
         y="50.708321"
         x="149.75372"
         sodipodi:role="line" /></text>
    <text
       id="text870"
       y="38.676285"
       x="124.01719"
       style="font-size:7.05556px;line-height:1.25;font-family:Aachen-Bold;-inkscape-font-specification:Aachen-Bold;letter-spacing:0px;stroke-width:0.264583"
       xml:space="preserve"><tspan
         style="stroke-width:0.264583"
         y="38.676285"
         x="124.01719"
         id="tspan868"
         sodipodi:role="line"></tspan></text>
    <text
       xml:space="preserve"
       style="font-size:7.05556px;line-height:1.25;font-family:'Airmole Stripe';-inkscape-font-specification:'Airmole Stripe';letter-spacing:0px;stroke-width:0.264583"
       x="17.777571"
       y="48.72123"
       id="text1076"><tspan
         sodipodi:role="line"
         id="tspan1074"
         x="17.777571"
         y="48.72123"
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:aakar;-inkscape-font-specification:aakar;stroke-width:0.264583">Sadie Jefferson</tspan></text>
    <text
       xml:space="preserve"
       style="font-size:7.50041px;line-height:1.25;font-family:'Airmole Stripe';-inkscape-font-specification:'Airmole Stripe';letter-spacing:0px;stroke-width:0.281265"
       x="48.275471"
       y="58.832306"
       id="text1080"
       transform="scale(0.94069041,1.063049)"><tspan
         sodipodi:role="line"
         id="tspan1078"
         x="48.275471"
         y="58.832306"
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:aakar;-inkscape-font-specification:aakar;stroke-width:0.281265">Profile Link</tspan></text>
    <path
       id="path1082"
       font-family="'Bitstream Vera Sans'"
       enable-background="accumulate"
       overflow="visible"
       d="m 145.45132,48.681887 c -0.31142,0 -0.61078,0.19256 -0.81029,0.50436 -0.007,0.0105 -0.0183,0.014 -0.0248,0.0248 l -2.95176,4.05143 c -0.29575,0.41406 -0.44648,0.89566 -0.44648,1.39734 v 2.48873 c 0,1.30849 1.07276,2.38125 2.38125,2.38125 h 5.02708 c 0.40129,0 0.7328,-0.16225 0.95912,-0.38034 0.22631,-0.21808 0.3638,-0.48693 0.3638,-0.76067 0,-0.22596 -0.0527,-0.41238 -0.10749,-0.55397 0.25768,-0.13854 0.63666,-0.40103 0.63666,-1.00046 0,-0.3775 -0.18273,-0.62379 -0.36381,-0.78548 0.18074,-0.1774 0.36381,-0.43893 0.36381,-0.83509 0,-0.59359 -0.37611,-0.83606 -0.59532,-0.95085 0.0231,-0.1363 0.0661,-0.33705 0.0661,-0.57878 0,-0.51823 -0.48838,-1.00481 -1.20716,-1.00872 -0.002,-6e-5 -0.006,6e-5 -0.008,0 -0.82119,-0.0238 -2.80619,-0.0246 -3.29902,-0.0248 0.088,-0.19697 0.15168,-0.33445 0.31419,-0.7028 0.2472,-0.56032 0.50609,-1.1472 0.58704,-1.37253 4.3e-4,-0.001 -3.9e-4,-0.007 0,-0.008 0.0716,-0.18903 0.17364,-0.3762 0.17364,-0.66972 0,-0.40841 -0.15934,-0.72634 -0.37207,-0.92605 -0.21274,-0.19971 -0.46057,-0.28938 -0.68627,-0.28938 z m 0,0.52916 c 0.0653,0 0.21108,0.0443 0.32245,0.14883 0.11138,0.10456 0.20671,0.25793 0.20671,0.53744 0,0.17932 -0.0535,0.25579 -0.14056,0.48782 a 0.26460979,0.26460979 0 0 0 0,0.008 c -0.0527,0.14762 -0.32287,0.77815 -0.5705,1.33945 -0.24764,0.56131 -0.47956,1.07487 -0.47956,1.07487 a 0.26460979,0.26460979 0 0 0 0.23978,0.37207 c 0,0 2.81246,-10e-4 3.69589,0.0248 a 0.26460979,0.26460979 0 0 0 0.008,0 c 0.49351,0 0.68627,0.31198 0.68627,0.47955 0,0.21167 -0.0744,0.66973 -0.0744,0.66973 a 0.26460979,0.26460979 0 0 0 0.17363,0.28939 c 0,0 0.42995,0.13835 0.42995,0.57051 0,0.38763 -0.38861,0.62011 -0.38861,0.62011 a 0.26460979,0.26460979 0 0 0 0.0248,0.47956 c 0,0 0.3638,0.13326 0.3638,0.5209 0,0.43656 -0.5457,0.64492 -0.5457,0.64492 a 0.26460979,0.26460979 0 0 0 -0.12403,0.40514 c 0,0 0.14056,0.18981 0.14056,0.50437 0,0.0702 -0.061,0.24785 -0.19843,0.38034 -0.13749,0.13248 -0.33514,0.23151 -0.59532,0.23151 h -5.02708 c -1.01984,0 -1.85208,-0.83224 -1.85208,-1.85209 v -2.48873 c 0,-0.39541 0.11682,-0.75795 0.34727,-1.08314 0.001,-0.002 -10e-4,-0.006 0,-0.008 l 2.96002,-4.06797 a 0.26460979,0.26460979 0 0 0 0.0165,-0.0248 c 0.11872,-0.19786 0.27892,-0.26459 0.38034,-0.26459 z"
       style="line-height:normal;-inkscape-font-specification:'Bitstream Vera Sans';text-indent:0;text-align:start;text-transform:none;fill:#00ffcc;stroke-width:0.264583" />
    <path
       id="path1084"
       font-family="'Bitstream Vera Sans'"
       enable-background="accumulate"
       overflow="visible"
       d="m 163.21978,49.935932 c -1.3085,0 -2.38127,1.07276 -2.38127,2.38125 v 2.48873 c 0,0.50168 0.15073,0.98328 0.44649,1.39734 l 2.95177,4.05143 c 0.007,0.0108 0.0181,0.0143 0.0248,0.0248 0.19951,0.3118 0.49888,0.50436 0.8103,0.50436 0.22569,0 0.47352,-0.0897 0.68626,-0.28939 0.21273,-0.19971 0.37207,-0.51763 0.37207,-0.92604 0,-0.29692 -0.10356,-0.45949 -0.17363,-0.66973 -0.0796,-0.22278 -0.33859,-0.81761 -0.58705,-1.38079 -0.16251,-0.36835 -0.22614,-0.50583 -0.31419,-0.7028 0.49283,-2.2e-4 2.47783,-9.7e-4 3.29902,-0.0248 0.003,0 0.005,2e-5 0.008,0 0.71878,-0.004 1.20716,-0.49049 1.20716,-1.00872 0,-0.24173 -0.0431,-0.44248 -0.0661,-0.57878 0.21921,-0.11479 0.59532,-0.35726 0.59532,-0.95085 0,-0.39616 -0.18308,-0.65769 -0.36381,-0.83509 0.18108,-0.16169 0.36381,-0.40798 0.36381,-0.78548 0,-0.59943 -0.37898,-0.86192 -0.63666,-1.00046 0.0548,-0.14159 0.10749,-0.32801 0.10749,-0.55397 0,-0.27374 -0.13749,-0.54259 -0.3638,-0.76067 -0.22632,-0.21809 -0.55783,-0.38034 -0.95912,-0.38034 z m 0,0.52916 h 5.02709 c 0.26018,0 0.45783,0.099 0.59532,0.23151 0.13748,0.13249 0.19843,0.31013 0.19843,0.38034 0,0.31456 -0.14056,0.50437 -0.14056,0.50437 a 0.26460979,0.26460979 0 0 0 0.12403,0.40514 c 0,0 0.5457,0.20836 0.5457,0.64492 0,0.38764 -0.3638,0.5209 -0.3638,0.5209 a 0.26460979,0.26460979 0 0 0 -0.0248,0.47956 c 0,0 0.38861,0.23248 0.38861,0.62011 0,0.43216 -0.42995,0.57051 -0.42995,0.57051 a 0.26460979,0.26460979 0 0 0 -0.17363,0.28939 c 0,0 0.0744,0.45806 0.0744,0.66973 0,0.16756 -0.19276,0.47955 -0.68627,0.47955 a 0.26460979,0.26460979 0 0 0 -0.008,0 c -0.88343,0.026 -3.6959,0.0248 -3.6959,0.0248 a 0.26460979,0.26460979 0 0 0 -0.23978,0.37207 c 0,0 0.23192,0.51356 0.47956,1.07487 0.24763,0.5613 0.51779,1.19182 0.57051,1.33945 h -0.008 c 0.0887,0.26601 0.14883,0.31677 0.14883,0.49609 0,0.27951 -0.0953,0.43288 -0.20671,0.53744 -0.11138,0.10456 -0.25712,0.14883 -0.32246,0.14883 -0.10142,0 -0.26163,-0.0667 -0.38034,-0.26459 a 0.26460979,0.26460979 0 0 0 -0.0165,-0.0248 l -2.96004,-4.06797 c -0.002,-0.002 0.001,-0.006 0,-0.008 -0.23045,-0.32519 -0.34727,-0.68773 -0.34727,-1.08314 v -2.48873 c 0,-1.01985 0.83224,-1.85209 1.85209,-1.85209 z"
       style="line-height:normal;-inkscape-font-specification:'Bitstream Vera Sans';text-indent:0;text-align:start;text-transform:none;fill:#00ffcc;stroke-width:0.264583" />
    <text
       xml:space="preserve"
       style="font-size:7.05556px;line-height:1.25;font-family:Aachen-Bold;-inkscape-font-specification:Aachen-Bold;letter-spacing:0px;stroke-width:0.264583"
       x="115.34406"
       y="57.681274"
       id="text1088"><tspan
         sodipodi:role="line"
         id="tspan1086"
         x="115.34406"
         y="57.681274"
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:'Abyssinica SIL';-inkscape-font-specification:'Abyssinica SIL';stroke-width:0.264583">Upvote</tspan></text>
    <text
       id="text1092"
       y="57.681274"
       x="172.49344"
       style="font-size:7.05556px;line-height:1.25;font-family:Aachen-Bold;-inkscape-font-specification:Aachen-Bold;letter-spacing:0px;stroke-width:0.264583"
       xml:space="preserve"><tspan
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:'Abyssinica SIL';-inkscape-font-specification:'Abyssinica SIL';stroke-width:0.264583"
         y="57.681274"
         x="172.49344"
         id="tspan1090"
         sodipodi:role="line">Downvote</tspan></text>
    <rect
       ry="6.2079501"
       y="35.543884"
       x="3.2391663"
       height="27.919027"
       width="203.52167"
       id="rect1094"
       style="fill:#ffd5d5;stroke:#faebd7;stroke-width:0.529;stroke-linecap:round;stroke-linejoin:bevel" />
    <text
       id="text1098"
       y="48.72123"
       x="17.777571"
       style="font-size:7.05556px;line-height:1.25;font-family:'Airmole Stripe';-inkscape-font-specification:'Airmole Stripe';letter-spacing:0px;stroke-width:0.264583"
       xml:space="preserve"><tspan
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:aakar;-inkscape-font-specification:aakar;stroke-width:0.264583"
         y="48.72123"
         x="17.777571"
         id="tspan1096"
         sodipodi:role="line">Ruby Griffith</tspan></text>
    <text
       transform="scale(0.94069041,1.063049)"
       id="text1102"
       y="58.832306"
       x="48.275471"
       style="font-size:7.50041px;line-height:1.25;font-family:'Airmole Stripe';-inkscape-font-specification:'Airmole Stripe';letter-spacing:0px;stroke-width:0.281265"
       xml:space="preserve"><tspan
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:aakar;-inkscape-font-specification:aakar;stroke-width:0.281265"
         y="58.832306"
         x="48.275471"
         id="tspan1100"
         sodipodi:role="line">Profile Link</tspan></text>
    <path
       style="line-height:normal;-inkscape-font-specification:'Bitstream Vera Sans';text-indent:0;text-align:start;text-transform:none;fill:#00ffcc;stroke-width:0.264583"
       d="m 193.07662,48.681887 c -0.31142,0 -0.61078,0.19256 -0.81029,0.50436 -0.007,0.0105 -0.0183,0.014 -0.0248,0.0248 l -2.95176,4.05143 c -0.29575,0.41406 -0.44648,0.89566 -0.44648,1.39734 v 2.48873 c 0,1.30849 1.07276,2.38125 2.38125,2.38125 h 5.02708 c 0.40129,0 0.7328,-0.16225 0.95912,-0.38034 0.22631,-0.21808 0.3638,-0.48693 0.3638,-0.76067 0,-0.22596 -0.0527,-0.41238 -0.10749,-0.55397 0.25768,-0.13854 0.63666,-0.40103 0.63666,-1.00046 0,-0.3775 -0.18273,-0.62379 -0.36381,-0.78548 0.18074,-0.1774 0.36381,-0.43893 0.36381,-0.83509 0,-0.59359 -0.37611,-0.83606 -0.59532,-0.95085 0.0231,-0.1363 0.0661,-0.33705 0.0661,-0.57878 0,-0.51823 -0.48838,-1.00481 -1.20716,-1.00872 -0.002,-6e-5 -0.006,6e-5 -0.008,0 -0.82119,-0.0238 -2.80619,-0.0246 -3.29902,-0.0248 0.088,-0.19697 0.15168,-0.33445 0.31419,-0.7028 0.2472,-0.56032 0.50609,-1.1472 0.58704,-1.37253 4.3e-4,-0.001 -3.9e-4,-0.007 0,-0.008 0.0716,-0.18903 0.17364,-0.3762 0.17364,-0.66972 0,-0.40841 -0.15934,-0.72634 -0.37207,-0.92605 -0.21274,-0.19971 -0.46057,-0.28938 -0.68627,-0.28938 z m 0,0.52916 c 0.0653,0 0.21108,0.0443 0.32245,0.14883 0.11138,0.10456 0.20671,0.25793 0.20671,0.53744 0,0.17932 -0.0535,0.25579 -0.14056,0.48782 a 0.26460979,0.26460979 0 0 0 0,0.008 c -0.0527,0.14762 -0.32287,0.77815 -0.5705,1.33945 -0.24764,0.56131 -0.47956,1.07487 -0.47956,1.07487 a 0.26460979,0.26460979 0 0 0 0.23978,0.37207 c 0,0 2.81246,-10e-4 3.69589,0.0248 a 0.26460979,0.26460979 0 0 0 0.008,0 c 0.49351,0 0.68627,0.31198 0.68627,0.47955 0,0.21167 -0.0744,0.66973 -0.0744,0.66973 a 0.26460979,0.26460979 0 0 0 0.17363,0.28939 c 0,0 0.42995,0.13835 0.42995,0.57051 0,0.38763 -0.38861,0.62011 -0.38861,0.62011 a 0.26460979,0.26460979 0 0 0 0.0248,0.47956 c 0,0 0.3638,0.13326 0.3638,0.5209 0,0.43656 -0.5457,0.64492 -0.5457,0.64492 a 0.26460979,0.26460979 0 0 0 -0.12403,0.40514 c 0,0 0.14056,0.18981 0.14056,0.50437 0,0.0702 -0.061,0.24785 -0.19843,0.38034 -0.13749,0.13248 -0.33514,0.23151 -0.59532,0.23151 h -5.02708 c -1.01984,0 -1.85208,-0.83224 -1.85208,-1.85209 v -2.48873 c 0,-0.39541 0.11682,-0.75795 0.34727,-1.08314 0.001,-0.002 -0.001,-0.006 0,-0.008 l 2.96002,-4.06797 a 0.26460979,0.26460979 0 0 0 0.0165,-0.0248 c 0.11872,-0.19786 0.27892,-0.26459 0.38034,-0.26459 z"
       overflow="visible"
       enable-background="accumulate"
       font-family="'Bitstream Vera Sans'"
       id="path1104" />
    <text
       id="text1108"
       y="57.681274"
       x="157.67697"
       style="font-size:7.05556px;line-height:1.25;font-family:Aachen-Bold;-inkscape-font-specification:Aachen-Bold;letter-spacing:0px;stroke-width:0.264583"
       xml:space="preserve"><tspan
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:'Abyssinica SIL';-inkscape-font-specification:'Abyssinica SIL';stroke-width:0.264583"
         y="57.681274"
         x="157.67697"
         id="tspan1106"
         sodipodi:role="line">Approve</tspan></text>
    <text
       xml:space="preserve"
       style="font-size:7.05556px;line-height:1.25;font-family:'Airmole Stripe';-inkscape-font-specification:'Airmole Stripe';letter-spacing:0px;stroke-width:0.264583"
       x="17.777571"
       y="82.587921"
       id="text1114"><tspan
         sodipodi:role="line"
         id="tspan1112"
         x="17.777571"
         y="82.587921"
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:aakar;-inkscape-font-specification:aakar;stroke-width:0.264583" /></text>
    <rect
       ry="6.2079453"
       y="20.144089"
       x="155.9821"
       height="12.488696"
       width="33.626507"
       id="rect1210"
       style="fill:#ffff00;stroke:#faebd7;stroke-width:0.529;stroke-linecap:round;stroke-linejoin:bevel" />
    <text
       id="text1208"
       y="29.479601"
       x="159.04788"
       style="font-size:7.05556px;line-height:1.25;font-family:Aachen-Bold;-inkscape-font-specification:Aachen-Bold;letter-spacing:0px;stroke-width:0.264583"
       xml:space="preserve"><tspan
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:aakar;-inkscape-font-specification:aakar;stroke-width:0.264583"
         y="29.479601"
         x="159.04788"
         id="tspan1206"
         sodipodi:role="line">Search</tspan></text>
    <text
       id="text1214"
       y="24.268919"
       x="104.92766"
       style="font-size:7.05556px;line-height:1.25;font-family:Aachen-Bold;-inkscape-font-specification:Aachen-Bold;letter-spacing:0px;stroke-width:0.264583;text-anchor:middle;text-align:center;"
       xml:space="preserve"><tspan
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:aakar;-inkscape-font-specification:aakar;stroke-width:0.264583;text-anchor:middle;text-align:center;"
         y="24.268919"
         x="72.106209"
         id="tspan1212"
         sodipodi:role="line">Department: Education</tspan><tspan
         id="tspan1825"
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:aakar;-inkscape-font-specification:aakar;stroke-width:0.264583;text-anchor:middle;text-align:center;"
         y="33.803307"
         x="72.106209"
         sodipodi:role="line">Winners</tspan></text>
    <text
       id="text1829"
       y="44.977718"
       x="193.07661"
       style="font-size:7.05556px;line-height:1.25;font-family:Aachen-Bold;-inkscape-font-specification:Aachen-Bold;letter-spacing:0px;stroke-width:0.264583"
       xml:space="preserve"><tspan
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:'Acanthus Black SSi';-inkscape-font-specification:'Acanthus Black SSi';stroke-width:0.264583"
         y="44.977718"
         x="193.07661"
         id="tspan1827"
         sodipodi:role="line">50</tspan></text>
    <text
       id="text1833"
       y="83.117096"
       x="17.777571"
       style="font-size:7.05556px;line-height:1.25;font-family:'Airmole Stripe';-inkscape-font-specification:'Airmole Stripe';letter-spacing:0px;stroke-width:0.264583"
       xml:space="preserve"><tspan
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:aakar;-inkscape-font-specification:aakar;stroke-width:0.264583"
         y="83.117096"
         x="17.777571"
         id="tspan1831"
         sodipodi:role="line">Sadie Jefferson</tspan></text>
    <text
       transform="scale(0.94069041,1.063049)"
       id="text1837"
       y="91.188034"
       x="48.275471"
       style="font-size:7.50041px;line-height:1.25;font-family:'Airmole Stripe';-inkscape-font-specification:'Airmole Stripe';letter-spacing:0px;stroke-width:0.281265"
       xml:space="preserve"><tspan
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:aakar;-inkscape-font-specification:aakar;stroke-width:0.281265"
         y="91.188034"
         x="48.275471"
         id="tspan1835"
         sodipodi:role="line">Profile Link</tspan></text>
    <path
       style="line-height:normal;-inkscape-font-specification:'Bitstream Vera Sans';text-indent:0;text-align:start;text-transform:none;fill:#00ffcc;stroke-width:0.264583"
       d="m 145.45132,83.077742 c -0.31142,0 -0.61078,0.19256 -0.81029,0.50436 -0.007,0.0105 -0.0183,0.014 -0.0248,0.0248 l -2.95176,4.05143 c -0.29575,0.41406 -0.44648,0.89566 -0.44648,1.39734 v 2.48873 c 0,1.30849 1.07276,2.38125 2.38125,2.38125 h 5.02708 c 0.40129,0 0.7328,-0.16225 0.95912,-0.38034 0.22631,-0.21808 0.3638,-0.48693 0.3638,-0.76067 0,-0.22596 -0.0527,-0.41238 -0.10749,-0.55397 0.25768,-0.13854 0.63666,-0.40103 0.63666,-1.00046 0,-0.3775 -0.18273,-0.62379 -0.36381,-0.78548 0.18074,-0.1774 0.36381,-0.43893 0.36381,-0.83509 0,-0.59359 -0.37611,-0.83606 -0.59532,-0.95085 0.0231,-0.1363 0.0661,-0.33705 0.0661,-0.57878 0,-0.51823 -0.48838,-1.00481 -1.20716,-1.00872 -0.002,-6e-5 -0.006,6e-5 -0.008,0 -0.82119,-0.0238 -2.80619,-0.0246 -3.29902,-0.0248 0.088,-0.19697 0.15168,-0.33445 0.31419,-0.7028 0.2472,-0.56032 0.50609,-1.1472 0.58704,-1.37253 4.3e-4,-0.001 -3.9e-4,-0.007 0,-0.008 0.0716,-0.18903 0.17364,-0.3762 0.17364,-0.66972 0,-0.40841 -0.15934,-0.72634 -0.37207,-0.92605 -0.21274,-0.19971 -0.46057,-0.28938 -0.68627,-0.28938 z m 0,0.52916 c 0.0653,0 0.21108,0.0443 0.32245,0.14883 0.11138,0.10456 0.20671,0.25793 0.20671,0.53744 0,0.17932 -0.0535,0.25579 -0.14056,0.48782 a 0.26460979,0.26460979 0 0 0 0,0.008 c -0.0527,0.14762 -0.32287,0.77815 -0.5705,1.33945 -0.24764,0.56131 -0.47956,1.07487 -0.47956,1.07487 a 0.26460979,0.26460979 0 0 0 0.23978,0.37207 c 0,0 2.81246,-0.001 3.69589,0.0248 a 0.26460979,0.26460979 0 0 0 0.008,0 c 0.49351,0 0.68627,0.31198 0.68627,0.47955 0,0.21167 -0.0744,0.66973 -0.0744,0.66973 a 0.26460979,0.26460979 0 0 0 0.17363,0.28939 c 0,0 0.42995,0.13835 0.42995,0.57051 0,0.38763 -0.38861,0.62011 -0.38861,0.62011 a 0.26460979,0.26460979 0 0 0 0.0248,0.47956 c 0,0 0.3638,0.13326 0.3638,0.5209 0,0.43656 -0.5457,0.64492 -0.5457,0.64492 a 0.26460979,0.26460979 0 0 0 -0.12403,0.40514 c 0,0 0.14056,0.18981 0.14056,0.50437 0,0.0702 -0.061,0.24785 -0.19843,0.38034 -0.13749,0.13248 -0.33514,0.23151 -0.59532,0.23151 h -5.02708 c -1.01984,0 -1.85208,-0.83224 -1.85208,-1.85209 v -2.48873 c 0,-0.39541 0.11682,-0.75795 0.34727,-1.08314 0.001,-0.002 -10e-4,-0.006 0,-0.008 l 2.96002,-4.06797 a 0.26460979,0.26460979 0 0 0 0.0165,-0.0248 c 0.11872,-0.19786 0.27892,-0.26459 0.38034,-0.26459 z"
       overflow="visible"
       enable-background="accumulate"
       font-family="'Bitstream Vera Sans'"
       id="path1839" />
    <path
       style="line-height:normal;-inkscape-font-specification:'Bitstream Vera Sans';text-indent:0;text-align:start;text-transform:none;fill:#00ffcc;stroke-width:0.264583"
       d="m 163.21978,84.331787 c -1.3085,0 -2.38127,1.07276 -2.38127,2.38125 v 2.48873 c 0,0.50168 0.15073,0.98328 0.44649,1.39734 l 2.95177,4.05143 c 0.007,0.0108 0.0181,0.0143 0.0248,0.0248 0.19951,0.3118 0.49888,0.50436 0.8103,0.50436 0.22569,0 0.47352,-0.0897 0.68626,-0.28939 0.21273,-0.19971 0.37207,-0.51763 0.37207,-0.92604 0,-0.29692 -0.10356,-0.45949 -0.17363,-0.66973 -0.0796,-0.22278 -0.33859,-0.81761 -0.58705,-1.38079 -0.16251,-0.36835 -0.22614,-0.50583 -0.31419,-0.7028 0.49283,-2.2e-4 2.47783,-9.7e-4 3.29902,-0.0248 0.003,0 0.005,2e-5 0.008,0 0.71878,-0.004 1.20716,-0.49049 1.20716,-1.00872 0,-0.24173 -0.0431,-0.44248 -0.0661,-0.57878 0.21921,-0.11479 0.59532,-0.35726 0.59532,-0.95085 0,-0.39616 -0.18308,-0.65769 -0.36381,-0.83509 0.18108,-0.16169 0.36381,-0.40798 0.36381,-0.78548 0,-0.59943 -0.37898,-0.86192 -0.63666,-1.00046 0.0548,-0.14159 0.10749,-0.32801 0.10749,-0.55397 0,-0.27374 -0.13749,-0.54259 -0.3638,-0.76067 -0.22632,-0.21809 -0.55783,-0.38034 -0.95912,-0.38034 z m 0,0.52916 h 5.02709 c 0.26018,0 0.45783,0.099 0.59532,0.23151 0.13748,0.13249 0.19843,0.31013 0.19843,0.38034 0,0.31456 -0.14056,0.50437 -0.14056,0.50437 a 0.26460979,0.26460979 0 0 0 0.12403,0.40514 c 0,0 0.5457,0.20836 0.5457,0.64492 0,0.38764 -0.3638,0.5209 -0.3638,0.5209 a 0.26460979,0.26460979 0 0 0 -0.0248,0.47956 c 0,0 0.38861,0.23248 0.38861,0.62011 0,0.43216 -0.42995,0.57051 -0.42995,0.57051 a 0.26460979,0.26460979 0 0 0 -0.17363,0.28939 c 0,0 0.0744,0.45806 0.0744,0.66973 0,0.16756 -0.19276,0.47955 -0.68627,0.47955 a 0.26460979,0.26460979 0 0 0 -0.008,0 c -0.88343,0.026 -3.6959,0.0248 -3.6959,0.0248 a 0.26460979,0.26460979 0 0 0 -0.23978,0.37207 c 0,0 0.23192,0.51356 0.47956,1.07487 0.24763,0.5613 0.51779,1.19182 0.57051,1.33945 h -0.008 c 0.0887,0.26601 0.14883,0.31677 0.14883,0.49609 0,0.27951 -0.0953,0.43288 -0.20671,0.53744 -0.11138,0.10456 -0.25712,0.14883 -0.32246,0.14883 -0.10142,0 -0.26163,-0.0667 -0.38034,-0.26459 a 0.26460979,0.26460979 0 0 0 -0.0165,-0.0248 l -2.96004,-4.06797 c -0.002,-0.002 0.001,-0.006 0,-0.008 -0.23045,-0.32519 -0.34727,-0.68773 -0.34727,-1.08314 v -2.48873 c 0,-1.01985 0.83224,-1.85209 1.85209,-1.85209 z"
       overflow="visible"
       enable-background="accumulate"
       font-family="'Bitstream Vera Sans'"
       id="path1841" />
    <text
       id="text1845"
       y="92.077141"
       x="115.34406"
       style="font-size:7.05556px;line-height:1.25;font-family:Aachen-Bold;-inkscape-font-specification:Aachen-Bold;letter-spacing:0px;stroke-width:0.264583"
       xml:space="preserve"><tspan
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:'Abyssinica SIL';-inkscape-font-specification:'Abyssinica SIL';stroke-width:0.264583"
         y="92.077141"
         x="115.34406"
         id="tspan1843"
         sodipodi:role="line">Upvote</tspan></text>
    <text
       xml:space="preserve"
       style="font-size:7.05556px;line-height:1.25;font-family:Aachen-Bold;-inkscape-font-specification:Aachen-Bold;letter-spacing:0px;stroke-width:0.264583"
       x="172.49344"
       y="92.077141"
       id="text1849"><tspan
         sodipodi:role="line"
         id="tspan1847"
         x="172.49344"
         y="92.077141"
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:'Abyssinica SIL';-inkscape-font-specification:'Abyssinica SIL';stroke-width:0.264583">Downvote</tspan></text>
    <rect
       style="fill:#ffd5d5;stroke:#faebd7;stroke-width:0.529;stroke-linecap:round;stroke-linejoin:bevel"
       id="rect1851"
       width="203.52167"
       height="27.919027"
       x="3.2391663"
       y="69.939751"
       ry="6.2079501" />
    <text
       xml:space="preserve"
       style="font-size:7.05556px;line-height:1.25;font-family:'Airmole Stripe';-inkscape-font-specification:'Airmole Stripe';letter-spacing:0px;stroke-width:0.264583"
       x="17.777571"
       y="83.117096"
       id="text1855"><tspan
         sodipodi:role="line"
         id="tspan1853"
         x="17.777571"
         y="83.117096"
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:aakar;-inkscape-font-specification:aakar;stroke-width:0.264583">Steve Reid</tspan></text>
    <text
       xml:space="preserve"
       style="font-size:7.50041px;line-height:1.25;font-family:'Airmole Stripe';-inkscape-font-specification:'Airmole Stripe';letter-spacing:0px;stroke-width:0.281265"
       x="48.275471"
       y="91.188034"
       id="text1859"
       transform="scale(0.94069041,1.063049)"><tspan
         sodipodi:role="line"
         id="tspan1857"
         x="48.275471"
         y="91.188034"
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:aakar;-inkscape-font-specification:aakar;stroke-width:0.281265">Profile Link</tspan></text>
    <path
       id="path1861"
       font-family="'Bitstream Vera Sans'"
       enable-background="accumulate"
       overflow="visible"
       d="m 193.07662,83.077742 c -0.31142,0 -0.61078,0.19256 -0.81029,0.50436 -0.007,0.0105 -0.0183,0.014 -0.0248,0.0248 l -2.95176,4.05143 c -0.29575,0.41406 -0.44648,0.89566 -0.44648,1.39734 v 2.48873 c 0,1.30849 1.07276,2.38125 2.38125,2.38125 h 5.02708 c 0.40129,0 0.7328,-0.16225 0.95912,-0.38034 0.22631,-0.21808 0.3638,-0.48693 0.3638,-0.76067 0,-0.22596 -0.0527,-0.41238 -0.10749,-0.55397 0.25768,-0.13854 0.63666,-0.40103 0.63666,-1.00046 0,-0.3775 -0.18273,-0.62379 -0.36381,-0.78548 0.18074,-0.1774 0.36381,-0.43893 0.36381,-0.83509 0,-0.59359 -0.37611,-0.83606 -0.59532,-0.95085 0.0231,-0.1363 0.0661,-0.33705 0.0661,-0.57878 0,-0.51823 -0.48838,-1.00481 -1.20716,-1.00872 -0.002,-6e-5 -0.006,6e-5 -0.008,0 -0.82119,-0.0238 -2.80619,-0.0246 -3.29902,-0.0248 0.088,-0.19697 0.15168,-0.33445 0.31419,-0.7028 0.2472,-0.56032 0.50609,-1.1472 0.58704,-1.37253 4.3e-4,-0.001 -3.9e-4,-0.007 0,-0.008 0.0716,-0.18903 0.17364,-0.3762 0.17364,-0.66972 0,-0.40841 -0.15934,-0.72634 -0.37207,-0.92605 -0.21274,-0.19971 -0.46057,-0.28938 -0.68627,-0.28938 z m 0,0.52916 c 0.0653,0 0.21108,0.0443 0.32245,0.14883 0.11138,0.10456 0.20671,0.25793 0.20671,0.53744 0,0.17932 -0.0535,0.25579 -0.14056,0.48782 a 0.26460979,0.26460979 0 0 0 0,0.008 c -0.0527,0.14762 -0.32287,0.77815 -0.5705,1.33945 -0.24764,0.56131 -0.47956,1.07487 -0.47956,1.07487 a 0.26460979,0.26460979 0 0 0 0.23978,0.37207 c 0,0 2.81246,-0.001 3.69589,0.0248 a 0.26460979,0.26460979 0 0 0 0.008,0 c 0.49351,0 0.68627,0.31198 0.68627,0.47955 0,0.21167 -0.0744,0.66973 -0.0744,0.66973 a 0.26460979,0.26460979 0 0 0 0.17363,0.28939 c 0,0 0.42995,0.13835 0.42995,0.57051 0,0.38763 -0.38861,0.62011 -0.38861,0.62011 a 0.26460979,0.26460979 0 0 0 0.0248,0.47956 c 0,0 0.3638,0.13326 0.3638,0.5209 0,0.43656 -0.5457,0.64492 -0.5457,0.64492 a 0.26460979,0.26460979 0 0 0 -0.12403,0.40514 c 0,0 0.14056,0.18981 0.14056,0.50437 0,0.0702 -0.061,0.24785 -0.19843,0.38034 -0.13749,0.13248 -0.33514,0.23151 -0.59532,0.23151 h -5.02708 c -1.01984,0 -1.85208,-0.83224 -1.85208,-1.85209 v -2.48873 c 0,-0.39541 0.11682,-0.75795 0.34727,-1.08314 0.001,-0.002 -0.001,-0.006 0,-0.008 l 2.96002,-4.06797 a 0.26460979,0.26460979 0 0 0 0.0165,-0.0248 c 0.11872,-0.19786 0.27892,-0.26459 0.38034,-0.26459 z"
       style="line-height:normal;-inkscape-font-specification:'Bitstream Vera Sans';text-indent:0;text-align:start;text-transform:none;fill:#00ffcc;stroke-width:0.264583" />
    <text
       xml:space="preserve"
       style="font-size:7.05556px;line-height:1.25;font-family:Aachen-Bold;-inkscape-font-specification:Aachen-Bold;letter-spacing:0px;stroke-width:0.264583"
       x="157.67697"
       y="92.077141"
       id="text1865"><tspan
         sodipodi:role="line"
         id="tspan1863"
         x="157.67697"
         y="92.077141"
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:'Abyssinica SIL';-inkscape-font-specification:'Abyssinica SIL';stroke-width:0.264583">Approve</tspan></text>
    <text
       xml:space="preserve"
       style="font-size:7.05556px;line-height:1.25;font-family:Aachen-Bold;-inkscape-font-specification:Aachen-Bold;letter-spacing:0px;stroke-width:0.264583"
       x="193.07661"
       y="79.373581"
       id="text1869"><tspan
         sodipodi:role="line"
         id="tspan1867"
         x="193.07661"
         y="79.373581"
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:'Acanthus Black SSi';-inkscape-font-specification:'Acanthus Black SSi';stroke-width:0.264583">49</tspan></text>
    <text
       xml:space="preserve"
       style="font-size:7.05556px;line-height:1.25;font-family:'Airmole Stripe';-inkscape-font-specification:'Airmole Stripe';letter-spacing:0px;stroke-width:0.264583"
       x="17.777571"
       y="116.45461"
       id="text1873"><tspan
         sodipodi:role="line"
         id="tspan1871"
         x="17.777571"
         y="116.45461"
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:aakar;-inkscape-font-specification:aakar;stroke-width:0.264583">Sadie Jefferson</tspan></text>
    <text
       xml:space="preserve"
       style="font-size:7.50041px;line-height:1.25;font-family:'Airmole Stripe';-inkscape-font-specification:'Airmole Stripe';letter-spacing:0px;stroke-width:0.281265"
       x="48.275471"
       y="122.54817"
       id="text1877"
       transform="scale(0.94069041,1.063049)"><tspan
         sodipodi:role="line"
         id="tspan1875"
         x="48.275471"
         y="122.54817"
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:aakar;-inkscape-font-specification:aakar;stroke-width:0.281265">Profile Link</tspan></text>
    <path
       id="path1879"
       font-family="'Bitstream Vera Sans'"
       enable-background="accumulate"
       overflow="visible"
       d="m 145.45132,116.41536 c -0.31142,0 -0.61078,0.19256 -0.81029,0.50436 -0.007,0.0105 -0.0183,0.014 -0.0248,0.0248 l -2.95176,4.05145 c -0.29575,0.41406 -0.44648,0.89567 -0.44648,1.39735 v 2.48874 c 0,1.3085 1.07276,2.38127 2.38125,2.38127 h 5.02708 c 0.40129,0 0.7328,-0.16225 0.95912,-0.38035 0.22631,-0.21808 0.3638,-0.48693 0.3638,-0.76067 0,-0.22596 -0.0527,-0.41238 -0.10749,-0.55397 0.25768,-0.13854 0.63666,-0.40104 0.63666,-1.00047 0,-0.3775 -0.18273,-0.62379 -0.36381,-0.78549 0.18074,-0.1774 0.36381,-0.43893 0.36381,-0.83509 0,-0.59359 -0.37611,-0.83606 -0.59532,-0.95085 0.0231,-0.1363 0.0661,-0.33706 0.0661,-0.57879 0,-0.51823 -0.48838,-1.00481 -1.20716,-1.00872 -0.002,-6e-5 -0.006,6e-5 -0.008,0 -0.82119,-0.0238 -2.80619,-0.0246 -3.29902,-0.0248 0.088,-0.19697 0.15168,-0.33446 0.31419,-0.70281 0.2472,-0.56032 0.50609,-1.1472 0.58704,-1.37254 4.3e-4,-0.001 -3.9e-4,-0.007 0,-0.008 0.0716,-0.18903 0.17364,-0.3762 0.17364,-0.66972 0,-0.40841 -0.15934,-0.72635 -0.37207,-0.92606 -0.21274,-0.19971 -0.46057,-0.28938 -0.68627,-0.28938 z m 0,0.52916 c 0.0653,0 0.21108,0.0443 0.32245,0.14883 0.11138,0.10456 0.20671,0.25793 0.20671,0.53744 0,0.17932 -0.0535,0.25579 -0.14056,0.48782 a 0.26460979,0.26460979 0 0 0 0,0.008 c -0.0527,0.14762 -0.32287,0.77816 -0.5705,1.33946 -0.24764,0.56131 -0.47956,1.07488 -0.47956,1.07488 a 0.26460979,0.26460979 0 0 0 0.23978,0.37207 c 0,0 2.81246,-0.001 3.69589,0.0248 a 0.26460979,0.26460979 0 0 0 0.008,0 c 0.49351,0 0.68627,0.31198 0.68627,0.47955 0,0.21167 -0.0744,0.66974 -0.0744,0.66974 a 0.26460979,0.26460979 0 0 0 0.17363,0.28939 c 0,0 0.42995,0.13835 0.42995,0.57051 0,0.38763 -0.38861,0.62011 -0.38861,0.62011 a 0.26460979,0.26460979 0 0 0 0.0248,0.47957 c 0,0 0.3638,0.13326 0.3638,0.5209 0,0.43656 -0.5457,0.64492 -0.5457,0.64492 a 0.26460979,0.26460979 0 0 0 -0.12403,0.40515 c 0,0 0.14056,0.18981 0.14056,0.50437 0,0.0702 -0.061,0.24785 -0.19843,0.38034 -0.13749,0.13248 -0.33514,0.23151 -0.59532,0.23151 h -5.02708 c -1.01984,0 -1.85208,-0.83224 -1.85208,-1.8521 v -2.48874 c 0,-0.39541 0.11682,-0.75796 0.34727,-1.08315 0.001,-0.002 -10e-4,-0.006 0,-0.008 l 2.96002,-4.06799 a 0.26460979,0.26460979 0 0 0 0.0165,-0.0248 c 0.11872,-0.19786 0.27892,-0.26459 0.38034,-0.26459 z"
       style="line-height:normal;-inkscape-font-specification:'Bitstream Vera Sans';text-indent:0;text-align:start;text-transform:none;fill:#00ffcc;stroke-width:0.264583" />
    <path
       id="path1881"
       font-family="'Bitstream Vera Sans'"
       enable-background="accumulate"
       overflow="visible"
       d="m 163.21978,117.66941 c -1.3085,0 -2.38127,1.07276 -2.38127,2.38126 v 2.48874 c 0,0.50169 0.15073,0.98329 0.44649,1.39735 l 2.95177,4.05145 c 0.007,0.0108 0.0181,0.0143 0.0248,0.0248 0.19951,0.31181 0.49888,0.50437 0.8103,0.50437 0.22569,0 0.47352,-0.0897 0.68626,-0.28939 0.21273,-0.19972 0.37207,-0.51764 0.37207,-0.92605 0,-0.29692 -0.10356,-0.45949 -0.17363,-0.66973 -0.0796,-0.22279 -0.33859,-0.81762 -0.58705,-1.3808 -0.16251,-0.36835 -0.22614,-0.50583 -0.31419,-0.7028 0.49283,-2.2e-4 2.47783,-9.7e-4 3.29902,-0.0248 0.003,0 0.005,2e-5 0.008,0 0.71878,-0.004 1.20716,-0.4905 1.20716,-1.00873 0,-0.24173 -0.0431,-0.44248 -0.0661,-0.57878 0.21921,-0.11479 0.59532,-0.35727 0.59532,-0.95086 0,-0.39616 -0.18308,-0.65769 -0.36381,-0.8351 0.18108,-0.16169 0.36381,-0.40798 0.36381,-0.78548 0,-0.59943 -0.37898,-0.86192 -0.63666,-1.00046 0.0548,-0.14159 0.10749,-0.32802 0.10749,-0.55398 0,-0.27374 -0.13749,-0.54259 -0.3638,-0.76067 -0.22632,-0.21809 -0.55783,-0.38034 -0.95912,-0.38034 z m 0,0.52916 h 5.02709 c 0.26018,0 0.45783,0.099 0.59532,0.23151 0.13748,0.13249 0.19843,0.31013 0.19843,0.38034 0,0.31457 -0.14056,0.50438 -0.14056,0.50438 a 0.26460979,0.26460979 0 0 0 0.12403,0.40514 c 0,0 0.5457,0.20836 0.5457,0.64492 0,0.38764 -0.3638,0.5209 -0.3638,0.5209 a 0.26460979,0.26460979 0 0 0 -0.0248,0.47957 c 0,0 0.38861,0.23248 0.38861,0.62011 0,0.43216 -0.42995,0.57051 -0.42995,0.57051 a 0.26460979,0.26460979 0 0 0 -0.17363,0.2894 c 0,0 0.0744,0.45806 0.0744,0.66973 0,0.16756 -0.19276,0.47955 -0.68627,0.47955 a 0.26460979,0.26460979 0 0 0 -0.008,0 c -0.88343,0.026 -3.6959,0.0248 -3.6959,0.0248 a 0.26460979,0.26460979 0 0 0 -0.23978,0.37208 c 0,0 0.23192,0.51356 0.47956,1.07487 0.24763,0.5613 0.51779,1.19183 0.57051,1.33946 h -0.008 c 0.0887,0.26601 0.14883,0.31677 0.14883,0.49609 0,0.27951 -0.0953,0.43288 -0.20671,0.53744 -0.11138,0.10456 -0.25712,0.14883 -0.32246,0.14883 -0.10142,0 -0.26163,-0.0667 -0.38034,-0.26459 a 0.26460979,0.26460979 0 0 0 -0.0165,-0.0248 l -2.96004,-4.06799 c -0.002,-0.002 0.001,-0.006 0,-0.008 -0.23045,-0.32519 -0.34727,-0.68773 -0.34727,-1.08315 v -2.48874 c 0,-1.01986 0.83224,-1.8521 1.85209,-1.8521 z"
       style="line-height:normal;-inkscape-font-specification:'Bitstream Vera Sans';text-indent:0;text-align:start;text-transform:none;fill:#00ffcc;stroke-width:0.264583" />
    <text
       xml:space="preserve"
       style="font-size:7.05556px;line-height:1.25;font-family:Aachen-Bold;-inkscape-font-specification:Aachen-Bold;letter-spacing:0px;stroke-width:0.264583"
       x="115.34406"
       y="125.41462"
       id="text1885"><tspan
         sodipodi:role="line"
         id="tspan1883"
         x="115.34406"
         y="125.41462"
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:'Abyssinica SIL';-inkscape-font-specification:'Abyssinica SIL';stroke-width:0.264583">Upvote</tspan></text>
    <text
       id="text1889"
       y="125.41462"
       x="172.49344"
       style="font-size:7.05556px;line-height:1.25;font-family:Aachen-Bold;-inkscape-font-specification:Aachen-Bold;letter-spacing:0px;stroke-width:0.264583"
       xml:space="preserve"><tspan
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:'Abyssinica SIL';-inkscape-font-specification:'Abyssinica SIL';stroke-width:0.264583"
         y="125.41462"
         x="172.49344"
         id="tspan1887"
         sodipodi:role="line">Downvote</tspan></text>
    <rect
       ry="6.2079501"
       y="103.27728"
       x="3.2391663"
       height="27.919027"
       width="203.52167"
       id="rect1891"
       style="fill:#ffd5d5;stroke:#faebd7;stroke-width:0.529;stroke-linecap:round;stroke-linejoin:bevel" />
    <text
       id="text1895"
       y="116.45461"
       x="17.777571"
       style="font-size:7.05556px;line-height:1.25;font-family:'Airmole Stripe';-inkscape-font-specification:'Airmole Stripe';letter-spacing:0px;stroke-width:0.264583"
       xml:space="preserve"><tspan
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:aakar;-inkscape-font-specification:aakar;stroke-width:0.264583"
         y="116.45461"
         x="17.777571"
         id="tspan1893"
         sodipodi:role="line">Daisy Andrews</tspan></text>
    <text
       transform="scale(0.94069041,1.063049)"
       id="text1899"
       y="122.54817"
       x="48.275471"
       style="font-size:7.50041px;line-height:1.25;font-family:'Airmole Stripe';-inkscape-font-specification:'Airmole Stripe';letter-spacing:0px;stroke-width:0.281265"
       xml:space="preserve"><tspan
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:aakar;-inkscape-font-specification:aakar;stroke-width:0.281265"
         y="122.54817"
         x="48.275471"
         id="tspan1897"
         sodipodi:role="line">Profile Link</tspan></text>
    <path
       style="line-height:normal;-inkscape-font-specification:'Bitstream Vera Sans';text-indent:0;text-align:start;text-transform:none;fill:#00ffcc;stroke-width:0.264583"
       d="m 193.07662,116.41536 c -0.31142,0 -0.61078,0.19256 -0.81029,0.50436 -0.007,0.0105 -0.0183,0.014 -0.0248,0.0248 l -2.95176,4.05145 c -0.29575,0.41406 -0.44648,0.89567 -0.44648,1.39735 v 2.48874 c 0,1.3085 1.07276,2.38127 2.38125,2.38127 h 5.02708 c 0.40129,0 0.7328,-0.16225 0.95912,-0.38035 0.22631,-0.21808 0.3638,-0.48693 0.3638,-0.76067 0,-0.22596 -0.0527,-0.41238 -0.10749,-0.55397 0.25768,-0.13854 0.63666,-0.40104 0.63666,-1.00047 0,-0.3775 -0.18273,-0.62379 -0.36381,-0.78549 0.18074,-0.1774 0.36381,-0.43893 0.36381,-0.83509 0,-0.59359 -0.37611,-0.83606 -0.59532,-0.95085 0.0231,-0.1363 0.0661,-0.33706 0.0661,-0.57879 0,-0.51823 -0.48838,-1.00481 -1.20716,-1.00872 -0.002,-6e-5 -0.006,6e-5 -0.008,0 -0.82119,-0.0238 -2.80619,-0.0246 -3.29902,-0.0248 0.088,-0.19697 0.15168,-0.33446 0.31419,-0.70281 0.2472,-0.56032 0.50609,-1.1472 0.58704,-1.37254 4.3e-4,-0.001 -3.9e-4,-0.007 0,-0.008 0.0716,-0.18903 0.17364,-0.3762 0.17364,-0.66972 0,-0.40841 -0.15934,-0.72635 -0.37207,-0.92606 -0.21274,-0.19971 -0.46057,-0.28938 -0.68627,-0.28938 z m 0,0.52916 c 0.0653,0 0.21108,0.0443 0.32245,0.14883 0.11138,0.10456 0.20671,0.25793 0.20671,0.53744 0,0.17932 -0.0535,0.25579 -0.14056,0.48782 a 0.26460979,0.26460979 0 0 0 0,0.008 c -0.0527,0.14762 -0.32287,0.77816 -0.5705,1.33946 -0.24764,0.56131 -0.47956,1.07488 -0.47956,1.07488 a 0.26460979,0.26460979 0 0 0 0.23978,0.37207 c 0,0 2.81246,-0.001 3.69589,0.0248 a 0.26460979,0.26460979 0 0 0 0.008,0 c 0.49351,0 0.68627,0.31198 0.68627,0.47955 0,0.21167 -0.0744,0.66974 -0.0744,0.66974 a 0.26460979,0.26460979 0 0 0 0.17363,0.28939 c 0,0 0.42995,0.13835 0.42995,0.57051 0,0.38763 -0.38861,0.62011 -0.38861,0.62011 a 0.26460979,0.26460979 0 0 0 0.0248,0.47957 c 0,0 0.3638,0.13326 0.3638,0.5209 0,0.43656 -0.5457,0.64492 -0.5457,0.64492 a 0.26460979,0.26460979 0 0 0 -0.12403,0.40515 c 0,0 0.14056,0.18981 0.14056,0.50437 0,0.0702 -0.061,0.24785 -0.19843,0.38034 -0.13749,0.13248 -0.33514,0.23151 -0.59532,0.23151 h -5.02708 c -1.01984,0 -1.85208,-0.83224 -1.85208,-1.8521 v -2.48874 c 0,-0.39541 0.11682,-0.75796 0.34727,-1.08315 0.001,-0.002 -0.001,-0.006 0,-0.008 l 2.96002,-4.06799 a 0.26460979,0.26460979 0 0 0 0.0165,-0.0248 c 0.11872,-0.19786 0.27892,-0.26459 0.38034,-0.26459 z"
       overflow="visible"
       enable-background="accumulate"
       font-family="'Bitstream Vera Sans'"
       id="path1901" />
    <text
       id="text1905"
       y="125.41462"
       x="157.67697"
       style="font-size:7.05556px;line-height:1.25;font-family:Aachen-Bold;-inkscape-font-specification:Aachen-Bold;letter-spacing:0px;stroke-width:0.264583"
       xml:space="preserve"><tspan
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:'Abyssinica SIL';-inkscape-font-specification:'Abyssinica SIL';stroke-width:0.264583"
         y="125.41462"
         x="157.67697"
         id="tspan1903"
         sodipodi:role="line">Approve</tspan></text>
    <text
       id="text1909"
       y="112.71109"
       x="193.07661"
       style="font-size:7.05556px;line-height:1.25;font-family:Aachen-Bold;-inkscape-font-specification:Aachen-Bold;letter-spacing:0px;stroke-width:0.264583"
       xml:space="preserve"><tspan
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:'Acanthus Black SSi';-inkscape-font-specification:'Acanthus Black SSi';stroke-width:0.264583"
         y="112.71109"
         x="193.07661"
         id="tspan1907"
         sodipodi:role="line">45</tspan></text>
    <text
       id="text1913"
       y="151.37929"
       x="17.777571"
       style="font-size:7.05556px;line-height:1.25;font-family:'Airmole Stripe';-inkscape-font-specification:'Airmole Stripe';letter-spacing:0px;stroke-width:0.264583"
       xml:space="preserve"><tspan
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:aakar;-inkscape-font-specification:aakar;stroke-width:0.264583"
         y="151.37929"
         x="17.777571"
         id="tspan1911"
         sodipodi:role="line">Sadie Jefferson</tspan></text>
    <text
       transform="scale(0.94069041,1.063049)"
       id="text1917"
       y="155.40207"
       x="48.275471"
       style="font-size:7.50041px;line-height:1.25;font-family:'Airmole Stripe';-inkscape-font-specification:'Airmole Stripe';letter-spacing:0px;stroke-width:0.281265"
       xml:space="preserve"><tspan
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:aakar;-inkscape-font-specification:aakar;stroke-width:0.281265"
         y="155.40207"
         x="48.275471"
         id="tspan1915"
         sodipodi:role="line">Profile Link</tspan></text>
    <path
       style="line-height:normal;-inkscape-font-specification:'Bitstream Vera Sans';text-indent:0;text-align:start;text-transform:none;fill:#00ffcc;stroke-width:0.264583"
       d="m 145.45132,151.34058 c -0.31142,0 -0.61078,0.19256 -0.81029,0.50436 -0.007,0.0105 -0.0183,0.014 -0.0248,0.0248 l -2.95176,4.05145 c -0.29575,0.41406 -0.44648,0.89567 -0.44648,1.39735 v 2.48874 c 0,1.3085 1.07276,2.38127 2.38125,2.38127 h 5.02708 c 0.40129,0 0.7328,-0.16225 0.95912,-0.38035 0.22631,-0.21808 0.3638,-0.48693 0.3638,-0.76067 0,-0.22596 -0.0527,-0.41238 -0.10749,-0.55397 0.25768,-0.13854 0.63666,-0.40104 0.63666,-1.00047 0,-0.3775 -0.18273,-0.62379 -0.36381,-0.78549 0.18074,-0.1774 0.36381,-0.43893 0.36381,-0.83509 0,-0.59359 -0.37611,-0.83606 -0.59532,-0.95085 0.0231,-0.1363 0.0661,-0.33706 0.0661,-0.57879 0,-0.51823 -0.48838,-1.00481 -1.20716,-1.00872 -0.002,-6e-5 -0.006,6e-5 -0.008,0 -0.82119,-0.0238 -2.80619,-0.0246 -3.29902,-0.0248 0.088,-0.19697 0.15168,-0.33446 0.31419,-0.70281 0.2472,-0.56032 0.50609,-1.1472 0.58704,-1.37254 4.3e-4,-0.001 -3.9e-4,-0.007 0,-0.008 0.0716,-0.18903 0.17364,-0.3762 0.17364,-0.66972 0,-0.40841 -0.15934,-0.72635 -0.37207,-0.92606 -0.21274,-0.19971 -0.46057,-0.28938 -0.68627,-0.28938 z m 0,0.52916 c 0.0653,0 0.21108,0.0443 0.32245,0.14883 0.11138,0.10456 0.20671,0.25793 0.20671,0.53744 0,0.17932 -0.0535,0.25579 -0.14056,0.48782 a 0.26460979,0.26460979 0 0 0 0,0.008 c -0.0527,0.14762 -0.32287,0.77816 -0.5705,1.33946 -0.24764,0.56131 -0.47956,1.07488 -0.47956,1.07488 a 0.26460979,0.26460979 0 0 0 0.23978,0.37207 c 0,0 2.81246,-0.001 3.69589,0.0248 a 0.26460979,0.26460979 0 0 0 0.008,0 c 0.49351,0 0.68627,0.31198 0.68627,0.47955 0,0.21167 -0.0744,0.66974 -0.0744,0.66974 a 0.26460979,0.26460979 0 0 0 0.17363,0.28939 c 0,0 0.42995,0.13835 0.42995,0.57051 0,0.38763 -0.38861,0.62011 -0.38861,0.62011 a 0.26460979,0.26460979 0 0 0 0.0248,0.47957 c 0,0 0.3638,0.13326 0.3638,0.5209 0,0.43656 -0.5457,0.64492 -0.5457,0.64492 a 0.26460979,0.26460979 0 0 0 -0.12403,0.40515 c 0,0 0.14056,0.18981 0.14056,0.50437 0,0.0702 -0.061,0.24785 -0.19843,0.38034 -0.13749,0.13248 -0.33514,0.23151 -0.59532,0.23151 h -5.02708 c -1.01984,0 -1.85208,-0.83224 -1.85208,-1.8521 v -2.48874 c 0,-0.39541 0.11682,-0.75796 0.34727,-1.08315 0.001,-0.002 -10e-4,-0.006 0,-0.008 l 2.96002,-4.06799 a 0.26460979,0.26460979 0 0 0 0.0165,-0.0248 c 0.11872,-0.19786 0.27892,-0.26459 0.38034,-0.26459 z"
       overflow="visible"
       enable-background="accumulate"
       font-family="'Bitstream Vera Sans'"
       id="path1919" />
    <path
       style="line-height:normal;-inkscape-font-specification:'Bitstream Vera Sans';text-indent:0;text-align:start;text-transform:none;fill:#00ffcc;stroke-width:0.264583"
       d="m 163.21978,152.59463 c -1.3085,0 -2.38127,1.07276 -2.38127,2.38126 v 2.48874 c 0,0.50169 0.15073,0.98329 0.44649,1.39735 l 2.95177,4.05145 c 0.007,0.0108 0.0181,0.0143 0.0248,0.0248 0.19951,0.31181 0.49888,0.50437 0.8103,0.50437 0.22569,0 0.47352,-0.0897 0.68626,-0.28939 0.21273,-0.19972 0.37207,-0.51764 0.37207,-0.92605 0,-0.29692 -0.10356,-0.45949 -0.17363,-0.66973 -0.0796,-0.22279 -0.33859,-0.81762 -0.58705,-1.3808 -0.16251,-0.36835 -0.22614,-0.50583 -0.31419,-0.7028 0.49283,-2.2e-4 2.47783,-9.7e-4 3.29902,-0.0248 0.003,0 0.005,2e-5 0.008,0 0.71878,-0.004 1.20716,-0.4905 1.20716,-1.00873 0,-0.24173 -0.0431,-0.44248 -0.0661,-0.57878 0.21921,-0.11479 0.59532,-0.35727 0.59532,-0.95086 0,-0.39616 -0.18308,-0.65769 -0.36381,-0.8351 0.18108,-0.16169 0.36381,-0.40798 0.36381,-0.78548 0,-0.59943 -0.37898,-0.86192 -0.63666,-1.00046 0.0548,-0.14159 0.10749,-0.32802 0.10749,-0.55398 0,-0.27374 -0.13749,-0.54259 -0.3638,-0.76067 -0.22632,-0.21809 -0.55783,-0.38034 -0.95912,-0.38034 z m 0,0.52916 h 5.02709 c 0.26018,0 0.45783,0.099 0.59532,0.23151 0.13748,0.13249 0.19843,0.31013 0.19843,0.38034 0,0.31457 -0.14056,0.50438 -0.14056,0.50438 a 0.26460979,0.26460979 0 0 0 0.12403,0.40514 c 0,0 0.5457,0.20836 0.5457,0.64492 0,0.38764 -0.3638,0.5209 -0.3638,0.5209 a 0.26460979,0.26460979 0 0 0 -0.0248,0.47957 c 0,0 0.38861,0.23248 0.38861,0.62011 0,0.43216 -0.42995,0.57051 -0.42995,0.57051 a 0.26460979,0.26460979 0 0 0 -0.17363,0.2894 c 0,0 0.0744,0.45806 0.0744,0.66973 0,0.16756 -0.19276,0.47955 -0.68627,0.47955 a 0.26460979,0.26460979 0 0 0 -0.008,0 c -0.88343,0.026 -3.6959,0.0248 -3.6959,0.0248 a 0.26460979,0.26460979 0 0 0 -0.23978,0.37208 c 0,0 0.23192,0.51356 0.47956,1.07487 0.24763,0.5613 0.51779,1.19183 0.57051,1.33946 h -0.008 c 0.0887,0.26601 0.14883,0.31677 0.14883,0.49609 0,0.27951 -0.0953,0.43288 -0.20671,0.53744 -0.11138,0.10456 -0.25712,0.14883 -0.32246,0.14883 -0.10142,0 -0.26163,-0.0667 -0.38034,-0.26459 a 0.26460979,0.26460979 0 0 0 -0.0165,-0.0248 l -2.96004,-4.06799 c -0.002,-0.002 0.001,-0.006 0,-0.008 -0.23045,-0.32519 -0.34727,-0.68773 -0.34727,-1.08315 v -2.48874 c 0,-1.01986 0.83224,-1.8521 1.85209,-1.8521 z"
       overflow="visible"
       enable-background="accumulate"
       font-family="'Bitstream Vera Sans'"
       id="path1921" />
    <text
       id="text1925"
       y="160.33919"
       x="115.34406"
       style="font-size:7.05556px;line-height:1.25;font-family:Aachen-Bold;-inkscape-font-specification:Aachen-Bold;letter-spacing:0px;stroke-width:0.264583"
       xml:space="preserve"><tspan
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:'Abyssinica SIL';-inkscape-font-specification:'Abyssinica SIL';stroke-width:0.264583"
         y="160.33919"
         x="115.34406"
         id="tspan1923"
         sodipodi:role="line">Upvote</tspan></text>
    <text
       xml:space="preserve"
       style="font-size:7.05556px;line-height:1.25;font-family:Aachen-Bold;-inkscape-font-specification:Aachen-Bold;letter-spacing:0px;stroke-width:0.264583"
       x="172.49344"
       y="160.33919"
       id="text1929"><tspan
         sodipodi:role="line"
         id="tspan1927"
         x="172.49344"
         y="160.33919"
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:'Abyssinica SIL';-inkscape-font-specification:'Abyssinica SIL';stroke-width:0.264583">Downvote</tspan></text>
    <rect
       style="fill:#ffd5d5;stroke:#faebd7;stroke-width:0.529;stroke-linecap:round;stroke-linejoin:bevel"
       id="rect1931"
       width="203.52167"
       height="27.919027"
       x="3.2391663"
       y="138.20215"
       ry="6.2079501" />
    <text
       xml:space="preserve"
       style="font-size:7.05556px;line-height:1.25;font-family:'Airmole Stripe';-inkscape-font-specification:'Airmole Stripe';letter-spacing:0px;stroke-width:0.264583"
       x="17.777571"
       y="151.37929"
       id="text1935"><tspan
         sodipodi:role="line"
         id="tspan1933"
         x="17.777571"
         y="151.37929"
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:aakar;-inkscape-font-specification:aakar;stroke-width:0.264583">Antoinette Bush</tspan></text>
    <text
       xml:space="preserve"
       style="font-size:7.50041px;line-height:1.25;font-family:'Airmole Stripe';-inkscape-font-specification:'Airmole Stripe';letter-spacing:0px;stroke-width:0.281265"
       x="48.275471"
       y="155.40207"
       id="text1939"
       transform="scale(0.94069041,1.063049)"><tspan
         sodipodi:role="line"
         id="tspan1937"
         x="48.275471"
         y="155.40207"
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:aakar;-inkscape-font-specification:aakar;stroke-width:0.281265">Profile Link</tspan></text>
    <path
       id="path1941"
       font-family="'Bitstream Vera Sans'"
       enable-background="accumulate"
       overflow="visible"
       d="m 193.07662,151.34058 c -0.31142,0 -0.61078,0.19256 -0.81029,0.50436 -0.007,0.0105 -0.0183,0.014 -0.0248,0.0248 l -2.95176,4.05145 c -0.29575,0.41406 -0.44648,0.89567 -0.44648,1.39735 v 2.48874 c 0,1.3085 1.07276,2.38127 2.38125,2.38127 h 5.02708 c 0.40129,0 0.7328,-0.16225 0.95912,-0.38035 0.22631,-0.21808 0.3638,-0.48693 0.3638,-0.76067 0,-0.22596 -0.0527,-0.41238 -0.10749,-0.55397 0.25768,-0.13854 0.63666,-0.40104 0.63666,-1.00047 0,-0.3775 -0.18273,-0.62379 -0.36381,-0.78549 0.18074,-0.1774 0.36381,-0.43893 0.36381,-0.83509 0,-0.59359 -0.37611,-0.83606 -0.59532,-0.95085 0.0231,-0.1363 0.0661,-0.33706 0.0661,-0.57879 0,-0.51823 -0.48838,-1.00481 -1.20716,-1.00872 -0.002,-6e-5 -0.006,6e-5 -0.008,0 -0.82119,-0.0238 -2.80619,-0.0246 -3.29902,-0.0248 0.088,-0.19697 0.15168,-0.33446 0.31419,-0.70281 0.2472,-0.56032 0.50609,-1.1472 0.58704,-1.37254 4.3e-4,-0.001 -3.9e-4,-0.007 0,-0.008 0.0716,-0.18903 0.17364,-0.3762 0.17364,-0.66972 0,-0.40841 -0.15934,-0.72635 -0.37207,-0.92606 -0.21274,-0.19971 -0.46057,-0.28938 -0.68627,-0.28938 z m 0,0.52916 c 0.0653,0 0.21108,0.0443 0.32245,0.14883 0.11138,0.10456 0.20671,0.25793 0.20671,0.53744 0,0.17932 -0.0535,0.25579 -0.14056,0.48782 a 0.26460979,0.26460979 0 0 0 0,0.008 c -0.0527,0.14762 -0.32287,0.77816 -0.5705,1.33946 -0.24764,0.56131 -0.47956,1.07488 -0.47956,1.07488 a 0.26460979,0.26460979 0 0 0 0.23978,0.37207 c 0,0 2.81246,-0.001 3.69589,0.0248 a 0.26460979,0.26460979 0 0 0 0.008,0 c 0.49351,0 0.68627,0.31198 0.68627,0.47955 0,0.21167 -0.0744,0.66974 -0.0744,0.66974 a 0.26460979,0.26460979 0 0 0 0.17363,0.28939 c 0,0 0.42995,0.13835 0.42995,0.57051 0,0.38763 -0.38861,0.62011 -0.38861,0.62011 a 0.26460979,0.26460979 0 0 0 0.0248,0.47957 c 0,0 0.3638,0.13326 0.3638,0.5209 0,0.43656 -0.5457,0.64492 -0.5457,0.64492 a 0.26460979,0.26460979 0 0 0 -0.12403,0.40515 c 0,0 0.14056,0.18981 0.14056,0.50437 0,0.0702 -0.061,0.24785 -0.19843,0.38034 -0.13749,0.13248 -0.33514,0.23151 -0.59532,0.23151 h -5.02708 c -1.01984,0 -1.85208,-0.83224 -1.85208,-1.8521 v -2.48874 c 0,-0.39541 0.11682,-0.75796 0.34727,-1.08315 0.001,-0.002 -0.001,-0.006 0,-0.008 l 2.96002,-4.06799 a 0.26460979,0.26460979 0 0 0 0.0165,-0.0248 c 0.11872,-0.19786 0.27892,-0.26459 0.38034,-0.26459 z"
       style="line-height:normal;-inkscape-font-specification:'Bitstream Vera Sans';text-indent:0;text-align:start;text-transform:none;fill:#00ffcc;stroke-width:0.264583" />
    <text
       xml:space="preserve"
       style="font-size:7.05556px;line-height:1.25;font-family:Aachen-Bold;-inkscape-font-specification:Aachen-Bold;letter-spacing:0px;stroke-width:0.264583"
       x="157.67697"
       y="160.33919"
       id="text1945"><tspan
         sodipodi:role="line"
         id="tspan1943"
         x="157.67697"
         y="160.33919"
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:'Abyssinica SIL';-inkscape-font-specification:'Abyssinica SIL';stroke-width:0.264583">Approve</tspan></text>
    <text
       xml:space="preserve"
       style="font-size:7.05556px;line-height:1.25;font-family:Aachen-Bold;-inkscape-font-specification:Aachen-Bold;letter-spacing:0px;stroke-width:0.264583"
       x="193.07661"
       y="147.63582"
       id="text1949"><tspan
         sodipodi:role="line"
         id="tspan1947"
         x="193.07661"
         y="147.63582"
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:'Acanthus Black SSi';-inkscape-font-specification:'Acanthus Black SSi';stroke-width:0.264583">40</tspan></text>
    <text
       xml:space="preserve"
       style="font-size:7.05556px;line-height:1.25;font-family:'Airmole Stripe';-inkscape-font-specification:'Airmole Stripe';letter-spacing:0px;stroke-width:0.264583"
       x="17.777571"
       y="187.8913"
       id="text1953"><tspan
         sodipodi:role="line"
         id="tspan1951"
         x="17.777571"
         y="187.8913"
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:aakar;-inkscape-font-specification:aakar;stroke-width:0.264583">Sadie Jefferson</tspan></text>
    <text
       xml:space="preserve"
       style="font-size:7.50041px;line-height:1.25;font-family:'Airmole Stripe';-inkscape-font-specification:'Airmole Stripe';letter-spacing:0px;stroke-width:0.281265"
       x="48.275471"
       y="189.7494"
       id="text1957"
       transform="scale(0.94069041,1.063049)"><tspan
         sodipodi:role="line"
         id="tspan1955"
         x="48.275471"
         y="189.7494"
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:aakar;-inkscape-font-specification:aakar;stroke-width:0.281265">Profile Link</tspan></text>
    <path
       id="path1959"
       font-family="'Bitstream Vera Sans'"
       enable-background="accumulate"
       overflow="visible"
       d="m 145.45132,187.85331 c -0.31142,0 -0.61078,0.19256 -0.81029,0.50436 -0.007,0.0105 -0.0183,0.014 -0.0248,0.0248 l -2.95176,4.05145 c -0.29575,0.41406 -0.44648,0.89567 -0.44648,1.39735 v 2.48874 c 0,1.3085 1.07276,2.38127 2.38125,2.38127 h 5.02708 c 0.40129,0 0.7328,-0.16225 0.95912,-0.38035 0.22631,-0.21808 0.3638,-0.48693 0.3638,-0.76067 0,-0.22596 -0.0527,-0.41238 -0.10749,-0.55397 0.25768,-0.13854 0.63666,-0.40104 0.63666,-1.00047 0,-0.3775 -0.18273,-0.62379 -0.36381,-0.78549 0.18074,-0.1774 0.36381,-0.43893 0.36381,-0.83509 0,-0.59359 -0.37611,-0.83606 -0.59532,-0.95085 0.0231,-0.1363 0.0661,-0.33706 0.0661,-0.57879 0,-0.51823 -0.48838,-1.00481 -1.20716,-1.00872 -0.002,-6e-5 -0.006,6e-5 -0.008,0 -0.82119,-0.0238 -2.80619,-0.0246 -3.29902,-0.0248 0.088,-0.19697 0.15168,-0.33446 0.31419,-0.70281 0.2472,-0.56032 0.50609,-1.1472 0.58704,-1.37254 4.3e-4,-0.001 -3.9e-4,-0.007 0,-0.008 0.0716,-0.18903 0.17364,-0.3762 0.17364,-0.66972 0,-0.40841 -0.15934,-0.72635 -0.37207,-0.92606 -0.21274,-0.19971 -0.46057,-0.28938 -0.68627,-0.28938 z m 0,0.52916 c 0.0653,0 0.21108,0.0443 0.32245,0.14883 0.11138,0.10456 0.20671,0.25793 0.20671,0.53744 0,0.17932 -0.0535,0.25579 -0.14056,0.48782 a 0.26460979,0.26460979 0 0 0 0,0.008 c -0.0527,0.14762 -0.32287,0.77816 -0.5705,1.33946 -0.24764,0.56131 -0.47956,1.07488 -0.47956,1.07488 a 0.26460979,0.26460979 0 0 0 0.23978,0.37207 c 0,0 2.81246,-10e-4 3.69589,0.0248 a 0.26460979,0.26460979 0 0 0 0.008,0 c 0.49351,0 0.68627,0.31198 0.68627,0.47955 0,0.21167 -0.0744,0.66974 -0.0744,0.66974 a 0.26460979,0.26460979 0 0 0 0.17363,0.28939 c 0,0 0.42995,0.13835 0.42995,0.57051 0,0.38763 -0.38861,0.62011 -0.38861,0.62011 a 0.26460979,0.26460979 0 0 0 0.0248,0.47957 c 0,0 0.3638,0.13326 0.3638,0.5209 0,0.43656 -0.5457,0.64492 -0.5457,0.64492 a 0.26460979,0.26460979 0 0 0 -0.12403,0.40515 c 0,0 0.14056,0.18981 0.14056,0.50437 0,0.0702 -0.061,0.24785 -0.19843,0.38034 -0.13749,0.13248 -0.33514,0.23151 -0.59532,0.23151 h -5.02708 c -1.01984,0 -1.85208,-0.83224 -1.85208,-1.8521 v -2.48874 c 0,-0.39541 0.11682,-0.75796 0.34727,-1.08315 0.001,-0.002 -10e-4,-0.006 0,-0.008 l 2.96002,-4.06799 a 0.26460979,0.26460979 0 0 0 0.0165,-0.0248 c 0.11872,-0.19786 0.27892,-0.26459 0.38034,-0.26459 z"
       style="line-height:normal;-inkscape-font-specification:'Bitstream Vera Sans';text-indent:0;text-align:start;text-transform:none;fill:#00ffcc;stroke-width:0.264583" />
    <path
       id="path1961"
       font-family="'Bitstream Vera Sans'"
       enable-background="accumulate"
       overflow="visible"
       d="m 163.21978,189.10736 c -1.3085,0 -2.38127,1.07276 -2.38127,2.38126 v 2.48874 c 0,0.50169 0.15073,0.98329 0.44649,1.39735 l 2.95177,4.05145 c 0.007,0.0108 0.0181,0.0143 0.0248,0.0248 0.19951,0.31181 0.49888,0.50437 0.8103,0.50437 0.22569,0 0.47352,-0.0897 0.68626,-0.28939 0.21273,-0.19972 0.37207,-0.51764 0.37207,-0.92605 0,-0.29692 -0.10356,-0.45949 -0.17363,-0.66973 -0.0796,-0.22279 -0.33859,-0.81762 -0.58705,-1.3808 -0.16251,-0.36835 -0.22614,-0.50583 -0.31419,-0.7028 0.49283,-2.2e-4 2.47783,-9.7e-4 3.29902,-0.0248 0.003,0 0.005,2e-5 0.008,0 0.71878,-0.004 1.20716,-0.4905 1.20716,-1.00873 0,-0.24173 -0.0431,-0.44248 -0.0661,-0.57878 0.21921,-0.11479 0.59532,-0.35727 0.59532,-0.95086 0,-0.39616 -0.18308,-0.65769 -0.36381,-0.8351 0.18108,-0.16169 0.36381,-0.40798 0.36381,-0.78548 0,-0.59943 -0.37898,-0.86192 -0.63666,-1.00046 0.0548,-0.14159 0.10749,-0.32802 0.10749,-0.55398 0,-0.27374 -0.13749,-0.54259 -0.3638,-0.76067 -0.22632,-0.21809 -0.55783,-0.38034 -0.95912,-0.38034 z m 0,0.52916 h 5.02709 c 0.26018,0 0.45783,0.099 0.59532,0.23151 0.13748,0.13249 0.19843,0.31013 0.19843,0.38034 0,0.31457 -0.14056,0.50438 -0.14056,0.50438 a 0.26460979,0.26460979 0 0 0 0.12403,0.40514 c 0,0 0.5457,0.20836 0.5457,0.64492 0,0.38764 -0.3638,0.5209 -0.3638,0.5209 a 0.26460979,0.26460979 0 0 0 -0.0248,0.47957 c 0,0 0.38861,0.23248 0.38861,0.62011 0,0.43216 -0.42995,0.57051 -0.42995,0.57051 a 0.26460979,0.26460979 0 0 0 -0.17363,0.2894 c 0,0 0.0744,0.45806 0.0744,0.66973 0,0.16756 -0.19276,0.47955 -0.68627,0.47955 a 0.26460979,0.26460979 0 0 0 -0.008,0 c -0.88343,0.026 -3.6959,0.0248 -3.6959,0.0248 a 0.26460979,0.26460979 0 0 0 -0.23978,0.37208 c 0,0 0.23192,0.51356 0.47956,1.07487 0.24763,0.5613 0.51779,1.19183 0.57051,1.33946 h -0.008 c 0.0887,0.26601 0.14883,0.31677 0.14883,0.49609 0,0.27951 -0.0953,0.43288 -0.20671,0.53744 -0.11138,0.10456 -0.25712,0.14883 -0.32246,0.14883 -0.10142,0 -0.26163,-0.0667 -0.38034,-0.26459 a 0.26460979,0.26460979 0 0 0 -0.0165,-0.0248 l -2.96004,-4.06799 c -0.002,-0.002 0.001,-0.006 0,-0.008 -0.23045,-0.32519 -0.34727,-0.68773 -0.34727,-1.08315 v -2.48874 c 0,-1.01986 0.83224,-1.8521 1.85209,-1.8521 z"
       style="line-height:normal;-inkscape-font-specification:'Bitstream Vera Sans';text-indent:0;text-align:start;text-transform:none;fill:#00ffcc;stroke-width:0.264583" />
    <text
       xml:space="preserve"
       style="font-size:7.05556px;line-height:1.25;font-family:Aachen-Bold;-inkscape-font-specification:Aachen-Bold;letter-spacing:0px;stroke-width:0.264583"
       x="115.34406"
       y="196.8512"
       id="text1965"><tspan
         sodipodi:role="line"
         id="tspan1963"
         x="115.34406"
         y="196.8512"
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:'Abyssinica SIL';-inkscape-font-specification:'Abyssinica SIL';stroke-width:0.264583">Upvote</tspan></text>
    <text
       id="text1969"
       y="196.8512"
       x="172.49344"
       style="font-size:7.05556px;line-height:1.25;font-family:Aachen-Bold;-inkscape-font-specification:Aachen-Bold;letter-spacing:0px;stroke-width:0.264583"
       xml:space="preserve"><tspan
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:'Abyssinica SIL';-inkscape-font-specification:'Abyssinica SIL';stroke-width:0.264583"
         y="196.8512"
         x="172.49344"
         id="tspan1967"
         sodipodi:role="line">Downvote</tspan></text>
    <rect
       ry="6.2079501"
       y="174.71416"
       x="3.2391663"
       height="27.919027"
       width="203.52167"
       id="rect1971"
       style="fill:#ffd5d5;stroke:#faebd7;stroke-width:0.529;stroke-linecap:round;stroke-linejoin:bevel" />
    <text
       id="text1975"
       y="187.8913"
       x="17.777571"
       style="font-size:7.05556px;line-height:1.25;font-family:'Airmole Stripe';-inkscape-font-specification:'Airmole Stripe';letter-spacing:0px;stroke-width:0.264583"
       xml:space="preserve"><tspan
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:aakar;-inkscape-font-specification:aakar;stroke-width:0.264583"
         y="187.8913"
         x="17.777571"
         id="tspan1973"
         sodipodi:role="line">Eleanor Rodgers</tspan></text>
    <text
       transform="scale(0.94069041,1.063049)"
       id="text1979"
       y="189.7494"
       x="48.275471"
       style="font-size:7.50041px;line-height:1.25;font-family:'Airmole Stripe';-inkscape-font-specification:'Airmole Stripe';letter-spacing:0px;stroke-width:0.281265"
       xml:space="preserve"><tspan
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:aakar;-inkscape-font-specification:aakar;stroke-width:0.281265"
         y="189.7494"
         x="48.275471"
         id="tspan1977"
         sodipodi:role="line">Profile Link</tspan></text>
    <path
       style="line-height:normal;-inkscape-font-specification:'Bitstream Vera Sans';text-indent:0;text-align:start;text-transform:none;fill:#00ffcc;stroke-width:0.264583"
       d="m 193.07662,187.85331 c -0.31142,0 -0.61078,0.19256 -0.81029,0.50436 -0.007,0.0105 -0.0183,0.014 -0.0248,0.0248 l -2.95176,4.05145 c -0.29575,0.41406 -0.44648,0.89567 -0.44648,1.39735 v 2.48874 c 0,1.3085 1.07276,2.38127 2.38125,2.38127 h 5.02708 c 0.40129,0 0.7328,-0.16225 0.95912,-0.38035 0.22631,-0.21808 0.3638,-0.48693 0.3638,-0.76067 0,-0.22596 -0.0527,-0.41238 -0.10749,-0.55397 0.25768,-0.13854 0.63666,-0.40104 0.63666,-1.00047 0,-0.3775 -0.18273,-0.62379 -0.36381,-0.78549 0.18074,-0.1774 0.36381,-0.43893 0.36381,-0.83509 0,-0.59359 -0.37611,-0.83606 -0.59532,-0.95085 0.0231,-0.1363 0.0661,-0.33706 0.0661,-0.57879 0,-0.51823 -0.48838,-1.00481 -1.20716,-1.00872 -0.002,-6e-5 -0.006,6e-5 -0.008,0 -0.82119,-0.0238 -2.80619,-0.0246 -3.29902,-0.0248 0.088,-0.19697 0.15168,-0.33446 0.31419,-0.70281 0.2472,-0.56032 0.50609,-1.1472 0.58704,-1.37254 4.3e-4,-0.001 -3.9e-4,-0.007 0,-0.008 0.0716,-0.18903 0.17364,-0.3762 0.17364,-0.66972 0,-0.40841 -0.15934,-0.72635 -0.37207,-0.92606 -0.21274,-0.19971 -0.46057,-0.28938 -0.68627,-0.28938 z m 0,0.52916 c 0.0653,0 0.21108,0.0443 0.32245,0.14883 0.11138,0.10456 0.20671,0.25793 0.20671,0.53744 0,0.17932 -0.0535,0.25579 -0.14056,0.48782 a 0.26460979,0.26460979 0 0 0 0,0.008 c -0.0527,0.14762 -0.32287,0.77816 -0.5705,1.33946 -0.24764,0.56131 -0.47956,1.07488 -0.47956,1.07488 a 0.26460979,0.26460979 0 0 0 0.23978,0.37207 c 0,0 2.81246,-10e-4 3.69589,0.0248 a 0.26460979,0.26460979 0 0 0 0.008,0 c 0.49351,0 0.68627,0.31198 0.68627,0.47955 0,0.21167 -0.0744,0.66974 -0.0744,0.66974 a 0.26460979,0.26460979 0 0 0 0.17363,0.28939 c 0,0 0.42995,0.13835 0.42995,0.57051 0,0.38763 -0.38861,0.62011 -0.38861,0.62011 a 0.26460979,0.26460979 0 0 0 0.0248,0.47957 c 0,0 0.3638,0.13326 0.3638,0.5209 0,0.43656 -0.5457,0.64492 -0.5457,0.64492 a 0.26460979,0.26460979 0 0 0 -0.12403,0.40515 c 0,0 0.14056,0.18981 0.14056,0.50437 0,0.0702 -0.061,0.24785 -0.19843,0.38034 -0.13749,0.13248 -0.33514,0.23151 -0.59532,0.23151 h -5.02708 c -1.01984,0 -1.85208,-0.83224 -1.85208,-1.8521 v -2.48874 c 0,-0.39541 0.11682,-0.75796 0.34727,-1.08315 0.001,-0.002 -0.001,-0.006 0,-0.008 l 2.96002,-4.06799 a 0.26460979,0.26460979 0 0 0 0.0165,-0.0248 c 0.11872,-0.19786 0.27892,-0.26459 0.38034,-0.26459 z"
       overflow="visible"
       enable-background="accumulate"
       font-family="'Bitstream Vera Sans'"
       id="path1981" />
    <text
       id="text1985"
       y="196.8512"
       x="157.67697"
       style="font-size:7.05556px;line-height:1.25;font-family:Aachen-Bold;-inkscape-font-specification:Aachen-Bold;letter-spacing:0px;stroke-width:0.264583"
       xml:space="preserve"><tspan
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:'Abyssinica SIL';-inkscape-font-specification:'Abyssinica SIL';stroke-width:0.264583"
         y="196.8512"
         x="157.67697"
         id="tspan1983"
         sodipodi:role="line">Approve</tspan></text>
    <text
       id="text1989"
       y="184.14783"
       x="193.07661"
       style="font-size:7.05556px;line-height:1.25;font-family:Aachen-Bold;-inkscape-font-specification:Aachen-Bold;letter-spacing:0px;stroke-width:0.264583"
       xml:space="preserve"><tspan
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:'Acanthus Black SSi';-inkscape-font-specification:'Acanthus Black SSi';stroke-width:0.264583"
         y="184.14783"
         x="193.07661"
         id="tspan1987"
         sodipodi:role="line">39</tspan></text>
    <text
       id="text1993"
       y="220.17003"
       x="17.777571"
       style="font-size:7.05556px;line-height:1.25;font-family:'Airmole Stripe';-inkscape-font-specification:'Airmole Stripe';letter-spacing:0px;stroke-width:0.264583"
       xml:space="preserve"><tspan
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:aakar;-inkscape-font-specification:aakar;stroke-width:0.264583"
         y="220.17003"
         x="17.777571"
         id="tspan1991"
         sodipodi:role="line">Sadie Jefferson</tspan></text>
    <text
       transform="scale(0.94069041,1.063049)"
       id="text1997"
       y="220.11444"
       x="48.275471"
       style="font-size:7.50041px;line-height:1.25;font-family:'Airmole Stripe';-inkscape-font-specification:'Airmole Stripe';letter-spacing:0px;stroke-width:0.281265"
       xml:space="preserve"><tspan
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:aakar;-inkscape-font-specification:aakar;stroke-width:0.281265"
         y="220.11444"
         x="48.275471"
         id="tspan1995"
         sodipodi:role="line">Profile Link</tspan></text>
    <path
       style="line-height:normal;-inkscape-font-specification:'Bitstream Vera Sans';text-indent:0;text-align:start;text-transform:none;fill:#00ffcc;stroke-width:0.264583"
       d="m 145.45132,220.13268 c -0.31142,0 -0.61078,0.19256 -0.81029,0.50436 -0.007,0.0105 -0.0183,0.014 -0.0248,0.0248 l -2.95176,4.05145 c -0.29575,0.41406 -0.44648,0.89567 -0.44648,1.39735 v 2.48874 c 0,1.3085 1.07276,2.38127 2.38125,2.38127 h 5.02708 c 0.40129,0 0.7328,-0.16225 0.95912,-0.38035 0.22631,-0.21808 0.3638,-0.48693 0.3638,-0.76067 0,-0.22596 -0.0527,-0.41238 -0.10749,-0.55397 0.25768,-0.13854 0.63666,-0.40104 0.63666,-1.00047 0,-0.3775 -0.18273,-0.62379 -0.36381,-0.78549 0.18074,-0.1774 0.36381,-0.43893 0.36381,-0.83509 0,-0.59359 -0.37611,-0.83606 -0.59532,-0.95085 0.0231,-0.1363 0.0661,-0.33706 0.0661,-0.57879 0,-0.51823 -0.48838,-1.00481 -1.20716,-1.00872 -0.002,-6e-5 -0.006,6e-5 -0.008,0 -0.82119,-0.0238 -2.80619,-0.0246 -3.29902,-0.0248 0.088,-0.19697 0.15168,-0.33446 0.31419,-0.70281 0.2472,-0.56032 0.50609,-1.1472 0.58704,-1.37254 4.3e-4,-0.001 -3.9e-4,-0.007 0,-0.008 0.0716,-0.18903 0.17364,-0.3762 0.17364,-0.66972 0,-0.40841 -0.15934,-0.72635 -0.37207,-0.92606 -0.21274,-0.19971 -0.46057,-0.28938 -0.68627,-0.28938 z m 0,0.52916 c 0.0653,0 0.21108,0.0443 0.32245,0.14883 0.11138,0.10456 0.20671,0.25793 0.20671,0.53744 0,0.17932 -0.0535,0.25579 -0.14056,0.48782 a 0.26460979,0.26460979 0 0 0 0,0.008 c -0.0527,0.14762 -0.32287,0.77816 -0.5705,1.33946 -0.24764,0.56131 -0.47956,1.07488 -0.47956,1.07488 a 0.26460979,0.26460979 0 0 0 0.23978,0.37207 c 0,0 2.81246,-10e-4 3.69589,0.0248 a 0.26460979,0.26460979 0 0 0 0.008,0 c 0.49351,0 0.68627,0.31198 0.68627,0.47955 0,0.21167 -0.0744,0.66974 -0.0744,0.66974 a 0.26460979,0.26460979 0 0 0 0.17363,0.28939 c 0,0 0.42995,0.13835 0.42995,0.57051 0,0.38763 -0.38861,0.62011 -0.38861,0.62011 a 0.26460979,0.26460979 0 0 0 0.0248,0.47957 c 0,0 0.3638,0.13326 0.3638,0.5209 0,0.43656 -0.5457,0.64492 -0.5457,0.64492 a 0.26460979,0.26460979 0 0 0 -0.12403,0.40515 c 0,0 0.14056,0.18981 0.14056,0.50437 0,0.0702 -0.061,0.24785 -0.19843,0.38034 -0.13749,0.13248 -0.33514,0.23151 -0.59532,0.23151 h -5.02708 c -1.01984,0 -1.85208,-0.83224 -1.85208,-1.8521 v -2.48874 c 0,-0.39541 0.11682,-0.75796 0.34727,-1.08315 0.001,-0.002 -10e-4,-0.006 0,-0.008 l 2.96002,-4.06799 a 0.26460979,0.26460979 0 0 0 0.0165,-0.0248 c 0.11872,-0.19786 0.27892,-0.26459 0.38034,-0.26459 z"
       overflow="visible"
       enable-background="accumulate"
       font-family="'Bitstream Vera Sans'"
       id="path1999" />
    <path
       style="line-height:normal;-inkscape-font-specification:'Bitstream Vera Sans';text-indent:0;text-align:start;text-transform:none;fill:#00ffcc;stroke-width:0.264583"
       d="m 163.21978,221.38673 c -1.3085,0 -2.38127,1.07276 -2.38127,2.38126 v 2.48874 c 0,0.50169 0.15073,0.98329 0.44649,1.39735 l 2.95177,4.05145 c 0.007,0.0108 0.0181,0.0143 0.0248,0.0248 0.19951,0.31181 0.49888,0.50437 0.8103,0.50437 0.22569,0 0.47352,-0.0897 0.68626,-0.28939 0.21273,-0.19972 0.37207,-0.51764 0.37207,-0.92605 0,-0.29692 -0.10356,-0.45949 -0.17363,-0.66973 -0.0796,-0.22279 -0.33859,-0.81762 -0.58705,-1.3808 -0.16251,-0.36835 -0.22614,-0.50583 -0.31419,-0.7028 0.49283,-2.2e-4 2.47783,-9.7e-4 3.29902,-0.0248 0.003,0 0.005,2e-5 0.008,0 0.71878,-0.004 1.20716,-0.4905 1.20716,-1.00873 0,-0.24173 -0.0431,-0.44248 -0.0661,-0.57878 0.21921,-0.11479 0.59532,-0.35727 0.59532,-0.95086 0,-0.39616 -0.18308,-0.65769 -0.36381,-0.8351 0.18108,-0.16169 0.36381,-0.40798 0.36381,-0.78548 0,-0.59943 -0.37898,-0.86192 -0.63666,-1.00046 0.0548,-0.14159 0.10749,-0.32802 0.10749,-0.55398 0,-0.27374 -0.13749,-0.54259 -0.3638,-0.76067 -0.22632,-0.21809 -0.55783,-0.38034 -0.95912,-0.38034 z m 0,0.52916 h 5.02709 c 0.26018,0 0.45783,0.099 0.59532,0.23151 0.13748,0.13249 0.19843,0.31013 0.19843,0.38034 0,0.31457 -0.14056,0.50438 -0.14056,0.50438 a 0.26460979,0.26460979 0 0 0 0.12403,0.40514 c 0,0 0.5457,0.20836 0.5457,0.64492 0,0.38764 -0.3638,0.5209 -0.3638,0.5209 a 0.26460979,0.26460979 0 0 0 -0.0248,0.47957 c 0,0 0.38861,0.23248 0.38861,0.62011 0,0.43216 -0.42995,0.57051 -0.42995,0.57051 a 0.26460979,0.26460979 0 0 0 -0.17363,0.2894 c 0,0 0.0744,0.45806 0.0744,0.66973 0,0.16756 -0.19276,0.47955 -0.68627,0.47955 a 0.26460979,0.26460979 0 0 0 -0.008,0 c -0.88343,0.026 -3.6959,0.0248 -3.6959,0.0248 a 0.26460979,0.26460979 0 0 0 -0.23978,0.37208 c 0,0 0.23192,0.51356 0.47956,1.07487 0.24763,0.5613 0.51779,1.19183 0.57051,1.33946 h -0.008 c 0.0887,0.26601 0.14883,0.31677 0.14883,0.49609 0,0.27951 -0.0953,0.43288 -0.20671,0.53744 -0.11138,0.10456 -0.25712,0.14883 -0.32246,0.14883 -0.10142,0 -0.26163,-0.0667 -0.38034,-0.26459 a 0.26460979,0.26460979 0 0 0 -0.0165,-0.0248 l -2.96004,-4.06799 c -0.002,-0.002 0.001,-0.006 0,-0.008 -0.23045,-0.32519 -0.34727,-0.68773 -0.34727,-1.08315 v -2.48874 c 0,-1.01986 0.83224,-1.8521 1.85209,-1.8521 z"
       overflow="visible"
       enable-background="accumulate"
       font-family="'Bitstream Vera Sans'"
       id="path2001" />
    <text
       id="text2005"
       y="229.12993"
       x="115.34406"
       style="font-size:7.05556px;line-height:1.25;font-family:Aachen-Bold;-inkscape-font-specification:Aachen-Bold;letter-spacing:0px;stroke-width:0.264583"
       xml:space="preserve"><tspan
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:'Abyssinica SIL';-inkscape-font-specification:'Abyssinica SIL';stroke-width:0.264583"
         y="229.12993"
         x="115.34406"
         id="tspan2003"
         sodipodi:role="line">Upvote</tspan></text>
    <text
       xml:space="preserve"
       style="font-size:7.05556px;line-height:1.25;font-family:Aachen-Bold;-inkscape-font-specification:Aachen-Bold;letter-spacing:0px;stroke-width:0.264583"
       x="172.49344"
       y="229.12993"
       id="text2009"><tspan
         sodipodi:role="line"
         id="tspan2007"
         x="172.49344"
         y="229.12993"
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:'Abyssinica SIL';-inkscape-font-specification:'Abyssinica SIL';stroke-width:0.264583">Downvote</tspan></text>
    <rect
       style="fill:#ffd5d5;stroke:#faebd7;stroke-width:0.529;stroke-linecap:round;stroke-linejoin:bevel"
       id="rect2011"
       width="203.52167"
       height="27.919027"
       x="3.2391663"
       y="206.99289"
       ry="6.2079501" />
    <text
       xml:space="preserve"
       style="font-size:7.05556px;line-height:1.25;font-family:'Airmole Stripe';-inkscape-font-specification:'Airmole Stripe';letter-spacing:0px;stroke-width:0.264583"
       x="17.777571"
       y="220.17003"
       id="text2015"><tspan
         sodipodi:role="line"
         id="tspan2013"
         x="17.777571"
         y="220.17003"
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:aakar;-inkscape-font-specification:aakar;stroke-width:0.264583">Pamela Walker</tspan><tspan
         id="tspan2071"
         sodipodi:role="line"
         x="17.777571"
         y="229.40007"
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:aakar;-inkscape-font-specification:aakar;stroke-width:0.264583" /></text>
    <text
       xml:space="preserve"
       style="font-size:7.50041px;line-height:1.25;font-family:'Airmole Stripe';-inkscape-font-specification:'Airmole Stripe';letter-spacing:0px;stroke-width:0.281265"
       x="48.275471"
       y="220.11444"
       id="text2019"
       transform="scale(0.94069041,1.063049)"><tspan
         sodipodi:role="line"
         id="tspan2017"
         x="48.275471"
         y="220.11444"
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:aakar;-inkscape-font-specification:aakar;stroke-width:0.281265">Profile Link</tspan></text>
    <path
       id="path2021"
       font-family="'Bitstream Vera Sans'"
       enable-background="accumulate"
       overflow="visible"
       d="m 193.07662,220.13268 c -0.31142,0 -0.61078,0.19256 -0.81029,0.50436 -0.007,0.0105 -0.0183,0.014 -0.0248,0.0248 l -2.95176,4.05145 c -0.29575,0.41406 -0.44648,0.89567 -0.44648,1.39735 v 2.48874 c 0,1.3085 1.07276,2.38127 2.38125,2.38127 h 5.02708 c 0.40129,0 0.7328,-0.16225 0.95912,-0.38035 0.22631,-0.21808 0.3638,-0.48693 0.3638,-0.76067 0,-0.22596 -0.0527,-0.41238 -0.10749,-0.55397 0.25768,-0.13854 0.63666,-0.40104 0.63666,-1.00047 0,-0.3775 -0.18273,-0.62379 -0.36381,-0.78549 0.18074,-0.1774 0.36381,-0.43893 0.36381,-0.83509 0,-0.59359 -0.37611,-0.83606 -0.59532,-0.95085 0.0231,-0.1363 0.0661,-0.33706 0.0661,-0.57879 0,-0.51823 -0.48838,-1.00481 -1.20716,-1.00872 -0.002,-6e-5 -0.006,6e-5 -0.008,0 -0.82119,-0.0238 -2.80619,-0.0246 -3.29902,-0.0248 0.088,-0.19697 0.15168,-0.33446 0.31419,-0.70281 0.2472,-0.56032 0.50609,-1.1472 0.58704,-1.37254 4.3e-4,-0.001 -3.9e-4,-0.007 0,-0.008 0.0716,-0.18903 0.17364,-0.3762 0.17364,-0.66972 0,-0.40841 -0.15934,-0.72635 -0.37207,-0.92606 -0.21274,-0.19971 -0.46057,-0.28938 -0.68627,-0.28938 z m 0,0.52916 c 0.0653,0 0.21108,0.0443 0.32245,0.14883 0.11138,0.10456 0.20671,0.25793 0.20671,0.53744 0,0.17932 -0.0535,0.25579 -0.14056,0.48782 a 0.26460979,0.26460979 0 0 0 0,0.008 c -0.0527,0.14762 -0.32287,0.77816 -0.5705,1.33946 -0.24764,0.56131 -0.47956,1.07488 -0.47956,1.07488 a 0.26460979,0.26460979 0 0 0 0.23978,0.37207 c 0,0 2.81246,-10e-4 3.69589,0.0248 a 0.26460979,0.26460979 0 0 0 0.008,0 c 0.49351,0 0.68627,0.31198 0.68627,0.47955 0,0.21167 -0.0744,0.66974 -0.0744,0.66974 a 0.26460979,0.26460979 0 0 0 0.17363,0.28939 c 0,0 0.42995,0.13835 0.42995,0.57051 0,0.38763 -0.38861,0.62011 -0.38861,0.62011 a 0.26460979,0.26460979 0 0 0 0.0248,0.47957 c 0,0 0.3638,0.13326 0.3638,0.5209 0,0.43656 -0.5457,0.64492 -0.5457,0.64492 a 0.26460979,0.26460979 0 0 0 -0.12403,0.40515 c 0,0 0.14056,0.18981 0.14056,0.50437 0,0.0702 -0.061,0.24785 -0.19843,0.38034 -0.13749,0.13248 -0.33514,0.23151 -0.59532,0.23151 h -5.02708 c -1.01984,0 -1.85208,-0.83224 -1.85208,-1.8521 v -2.48874 c 0,-0.39541 0.11682,-0.75796 0.34727,-1.08315 0.001,-0.002 -0.001,-0.006 0,-0.008 l 2.96002,-4.06799 a 0.26460979,0.26460979 0 0 0 0.0165,-0.0248 c 0.11872,-0.19786 0.27892,-0.26459 0.38034,-0.26459 z"
       style="line-height:normal;-inkscape-font-specification:'Bitstream Vera Sans';text-indent:0;text-align:start;text-transform:none;fill:#00ffcc;stroke-width:0.264583" />
    <text
       xml:space="preserve"
       style="font-size:7.05556px;line-height:1.25;font-family:Aachen-Bold;-inkscape-font-specification:Aachen-Bold;letter-spacing:0px;stroke-width:0.264583"
       x="157.67697"
       y="229.12993"
       id="text2025"><tspan
         sodipodi:role="line"
         id="tspan2023"
         x="157.67697"
         y="229.12993"
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:'Abyssinica SIL';-inkscape-font-specification:'Abyssinica SIL';stroke-width:0.264583">Approve</tspan></text>
    <text
       xml:space="preserve"
       style="font-size:7.05556px;line-height:1.25;font-family:Aachen-Bold;-inkscape-font-specification:Aachen-Bold;letter-spacing:0px;stroke-width:0.264583"
       x="193.07661"
       y="216.42656"
       id="text2029"><tspan
         sodipodi:role="line"
         id="tspan2027"
         x="193.07661"
         y="216.42656"
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:'Acanthus Black SSi';-inkscape-font-specification:'Acanthus Black SSi';stroke-width:0.264583">37</tspan></text>
  </g>
</svg>

'''
'''--- docs/approval_voting.svg ---
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<svg
   xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmlns:cc="http://creativecommons.org/ns#"
   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
   xmlns:svg="http://www.w3.org/2000/svg"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   sodipodi:docname="Approval Voting.svg"
   inkscape:version="1.0 (4035a4fb49, 2020-05-01)"
   id="svg8"
   version="1.1"
   viewBox="0 0 210 297"
   height="297mm"
   width="210mm">
  <defs
     id="defs2" />
  <sodipodi:namedview
     inkscape:window-maximized="1"
     inkscape:window-y="27"
     inkscape:window-x="40"
     inkscape:window-height="1016"
     inkscape:window-width="1880"
     showgrid="false"
     inkscape:document-rotation="0"
     inkscape:current-layer="layer1"
     inkscape:document-units="mm"
     inkscape:cy="552.9037"
     inkscape:cx="378.38301"
     inkscape:zoom="0.51764067"
     inkscape:pageshadow="2"
     inkscape:pageopacity="0.0"
     borderopacity="1.0"
     bordercolor="#666666"
     pagecolor="#ffffff"
     id="base" />
  <metadata
     id="metadata5">
    <rdf:RDF>
      <cc:Work
         rdf:about="">
        <dc:format>image/svg+xml</dc:format>
        <dc:type
           rdf:resource="http://purl.org/dc/dcmitype/StillImage" />
        <dc:title></dc:title>
      </cc:Work>
    </rdf:RDF>
  </metadata>
  <g
     id="layer1"
     inkscape:groupmode="layer"
     inkscape:label="Layer 1">
    <text
       id="text835"
       y="20.485571"
       x="62.178776"
       style="font-size:7.05556px;line-height:1.25;font-family:sans-serif;-inkscape-font-specification:sans-serif;letter-spacing:0px;stroke-width:0.264583;font-weight:normal;font-style:normal;font-stretch:normal;font-variant:normal;"
       xml:space="preserve"><tspan
         style="stroke-width:0.264583;-inkscape-font-specification:sans-serif;font-family:sans-serif;font-weight:normal;font-style:normal;font-stretch:normal;font-variant:normal;"
         y="20.485571"
         x="62.178776"
         id="tspan833"
         sodipodi:role="line" /></text>
    <text
       id="text839"
       y="18.097466"
       x="59.200447"
       style="font-size:7.05556px;line-height:1.25;font-family:'Airmole Stripe';-inkscape-font-specification:'Airmole Stripe';letter-spacing:0px;stroke-width:0.264583"
       xml:space="preserve"><tspan
         style="stroke-width:0.264583"
         y="18.097466"
         x="59.200447"
         id="tspan837"
         sodipodi:role="line" /></text>
    <text
       id="text843"
       y="12.498664"
       x="66.752525"
       style="font-size:7.05556px;line-height:1.25;font-family:'Airmole Stripe';-inkscape-font-specification:'Airmole Stripe';letter-spacing:0px;stroke-width:0.264583"
       xml:space="preserve"><tspan
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:'Aachen BT';-inkscape-font-specification:'Aachen BT';stroke-width:0.264583"
         y="12.498664"
         x="66.752525"
         id="tspan841"
         sodipodi:role="line">Representatives Details</tspan></text>
    <text
       id="text856"
       y="46.226013"
       x="159.20009"
       style="font-size:7.05556px;line-height:1.25;font-family:'Airmole Stripe';-inkscape-font-specification:'Airmole Stripe';letter-spacing:0px;stroke-width:0.264583"
       xml:space="preserve"><tspan
         style="stroke-width:0.264583"
         y="46.226013"
         x="159.20009"
         id="tspan854"
         sodipodi:role="line" /></text>
    <text
       id="text860"
       y="41.88887"
       x="149.75372"
       style="font-size:7.05556px;line-height:1.25;font-family:'Airmole Stripe';-inkscape-font-specification:'Airmole Stripe';letter-spacing:0px;stroke-width:0.264583"
       xml:space="preserve"><tspan
         style="stroke-width:0.264583"
         y="41.88887"
         x="149.75372"
         id="tspan858"
         sodipodi:role="line" /><tspan
         id="tspan862"
         style="stroke-width:0.264583"
         y="50.708321"
         x="149.75372"
         sodipodi:role="line" /></text>
    <text
       id="text870"
       y="38.676285"
       x="124.01719"
       style="font-size:7.05556px;line-height:1.25;font-family:Aachen-Bold;-inkscape-font-specification:Aachen-Bold;letter-spacing:0px;stroke-width:0.264583"
       xml:space="preserve"><tspan
         style="stroke-width:0.264583"
         y="38.676285"
         x="124.01719"
         id="tspan868"
         sodipodi:role="line"></tspan></text>
    <text
       xml:space="preserve"
       style="font-size:7.05556px;line-height:1.25;font-family:'Airmole Stripe';-inkscape-font-specification:'Airmole Stripe';letter-spacing:0px;stroke-width:0.264583"
       x="17.777571"
       y="48.72123"
       id="text1076"><tspan
         sodipodi:role="line"
         id="tspan1074"
         x="17.777571"
         y="48.72123"
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:aakar;-inkscape-font-specification:aakar;stroke-width:0.264583">Sadie Jefferson</tspan></text>
    <text
       xml:space="preserve"
       style="font-size:7.50041px;line-height:1.25;font-family:'Airmole Stripe';-inkscape-font-specification:'Airmole Stripe';letter-spacing:0px;stroke-width:0.281265"
       x="48.275471"
       y="58.832306"
       id="text1080"
       transform="scale(0.94069041,1.063049)"><tspan
         sodipodi:role="line"
         id="tspan1078"
         x="48.275471"
         y="58.832306"
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:aakar;-inkscape-font-specification:aakar;stroke-width:0.281265">Profile Link</tspan></text>
    <path
       id="path1082"
       font-family="'Bitstream Vera Sans'"
       enable-background="accumulate"
       overflow="visible"
       d="m 145.45132,48.681887 c -0.31142,0 -0.61078,0.19256 -0.81029,0.50436 -0.007,0.0105 -0.0183,0.014 -0.0248,0.0248 l -2.95176,4.05143 c -0.29575,0.41406 -0.44648,0.89566 -0.44648,1.39734 v 2.48873 c 0,1.30849 1.07276,2.38125 2.38125,2.38125 h 5.02708 c 0.40129,0 0.7328,-0.16225 0.95912,-0.38034 0.22631,-0.21808 0.3638,-0.48693 0.3638,-0.76067 0,-0.22596 -0.0527,-0.41238 -0.10749,-0.55397 0.25768,-0.13854 0.63666,-0.40103 0.63666,-1.00046 0,-0.3775 -0.18273,-0.62379 -0.36381,-0.78548 0.18074,-0.1774 0.36381,-0.43893 0.36381,-0.83509 0,-0.59359 -0.37611,-0.83606 -0.59532,-0.95085 0.0231,-0.1363 0.0661,-0.33705 0.0661,-0.57878 0,-0.51823 -0.48838,-1.00481 -1.20716,-1.00872 -0.002,-6e-5 -0.006,6e-5 -0.008,0 -0.82119,-0.0238 -2.80619,-0.0246 -3.29902,-0.0248 0.088,-0.19697 0.15168,-0.33445 0.31419,-0.7028 0.2472,-0.56032 0.50609,-1.1472 0.58704,-1.37253 4.3e-4,-0.001 -3.9e-4,-0.007 0,-0.008 0.0716,-0.18903 0.17364,-0.3762 0.17364,-0.66972 0,-0.40841 -0.15934,-0.72634 -0.37207,-0.92605 -0.21274,-0.19971 -0.46057,-0.28938 -0.68627,-0.28938 z m 0,0.52916 c 0.0653,0 0.21108,0.0443 0.32245,0.14883 0.11138,0.10456 0.20671,0.25793 0.20671,0.53744 0,0.17932 -0.0535,0.25579 -0.14056,0.48782 a 0.26460979,0.26460979 0 0 0 0,0.008 c -0.0527,0.14762 -0.32287,0.77815 -0.5705,1.33945 -0.24764,0.56131 -0.47956,1.07487 -0.47956,1.07487 a 0.26460979,0.26460979 0 0 0 0.23978,0.37207 c 0,0 2.81246,-10e-4 3.69589,0.0248 a 0.26460979,0.26460979 0 0 0 0.008,0 c 0.49351,0 0.68627,0.31198 0.68627,0.47955 0,0.21167 -0.0744,0.66973 -0.0744,0.66973 a 0.26460979,0.26460979 0 0 0 0.17363,0.28939 c 0,0 0.42995,0.13835 0.42995,0.57051 0,0.38763 -0.38861,0.62011 -0.38861,0.62011 a 0.26460979,0.26460979 0 0 0 0.0248,0.47956 c 0,0 0.3638,0.13326 0.3638,0.5209 0,0.43656 -0.5457,0.64492 -0.5457,0.64492 a 0.26460979,0.26460979 0 0 0 -0.12403,0.40514 c 0,0 0.14056,0.18981 0.14056,0.50437 0,0.0702 -0.061,0.24785 -0.19843,0.38034 -0.13749,0.13248 -0.33514,0.23151 -0.59532,0.23151 h -5.02708 c -1.01984,0 -1.85208,-0.83224 -1.85208,-1.85209 v -2.48873 c 0,-0.39541 0.11682,-0.75795 0.34727,-1.08314 0.001,-0.002 -10e-4,-0.006 0,-0.008 l 2.96002,-4.06797 a 0.26460979,0.26460979 0 0 0 0.0165,-0.0248 c 0.11872,-0.19786 0.27892,-0.26459 0.38034,-0.26459 z"
       style="line-height:normal;-inkscape-font-specification:'Bitstream Vera Sans';text-indent:0;text-align:start;text-transform:none;fill:#00ffcc;stroke-width:0.264583" />
    <path
       id="path1084"
       font-family="'Bitstream Vera Sans'"
       enable-background="accumulate"
       overflow="visible"
       d="m 163.21978,49.935932 c -1.3085,0 -2.38127,1.07276 -2.38127,2.38125 v 2.48873 c 0,0.50168 0.15073,0.98328 0.44649,1.39734 l 2.95177,4.05143 c 0.007,0.0108 0.0181,0.0143 0.0248,0.0248 0.19951,0.3118 0.49888,0.50436 0.8103,0.50436 0.22569,0 0.47352,-0.0897 0.68626,-0.28939 0.21273,-0.19971 0.37207,-0.51763 0.37207,-0.92604 0,-0.29692 -0.10356,-0.45949 -0.17363,-0.66973 -0.0796,-0.22278 -0.33859,-0.81761 -0.58705,-1.38079 -0.16251,-0.36835 -0.22614,-0.50583 -0.31419,-0.7028 0.49283,-2.2e-4 2.47783,-9.7e-4 3.29902,-0.0248 0.003,0 0.005,2e-5 0.008,0 0.71878,-0.004 1.20716,-0.49049 1.20716,-1.00872 0,-0.24173 -0.0431,-0.44248 -0.0661,-0.57878 0.21921,-0.11479 0.59532,-0.35726 0.59532,-0.95085 0,-0.39616 -0.18308,-0.65769 -0.36381,-0.83509 0.18108,-0.16169 0.36381,-0.40798 0.36381,-0.78548 0,-0.59943 -0.37898,-0.86192 -0.63666,-1.00046 0.0548,-0.14159 0.10749,-0.32801 0.10749,-0.55397 0,-0.27374 -0.13749,-0.54259 -0.3638,-0.76067 -0.22632,-0.21809 -0.55783,-0.38034 -0.95912,-0.38034 z m 0,0.52916 h 5.02709 c 0.26018,0 0.45783,0.099 0.59532,0.23151 0.13748,0.13249 0.19843,0.31013 0.19843,0.38034 0,0.31456 -0.14056,0.50437 -0.14056,0.50437 a 0.26460979,0.26460979 0 0 0 0.12403,0.40514 c 0,0 0.5457,0.20836 0.5457,0.64492 0,0.38764 -0.3638,0.5209 -0.3638,0.5209 a 0.26460979,0.26460979 0 0 0 -0.0248,0.47956 c 0,0 0.38861,0.23248 0.38861,0.62011 0,0.43216 -0.42995,0.57051 -0.42995,0.57051 a 0.26460979,0.26460979 0 0 0 -0.17363,0.28939 c 0,0 0.0744,0.45806 0.0744,0.66973 0,0.16756 -0.19276,0.47955 -0.68627,0.47955 a 0.26460979,0.26460979 0 0 0 -0.008,0 c -0.88343,0.026 -3.6959,0.0248 -3.6959,0.0248 a 0.26460979,0.26460979 0 0 0 -0.23978,0.37207 c 0,0 0.23192,0.51356 0.47956,1.07487 0.24763,0.5613 0.51779,1.19182 0.57051,1.33945 h -0.008 c 0.0887,0.26601 0.14883,0.31677 0.14883,0.49609 0,0.27951 -0.0953,0.43288 -0.20671,0.53744 -0.11138,0.10456 -0.25712,0.14883 -0.32246,0.14883 -0.10142,0 -0.26163,-0.0667 -0.38034,-0.26459 a 0.26460979,0.26460979 0 0 0 -0.0165,-0.0248 l -2.96004,-4.06797 c -0.002,-0.002 0.001,-0.006 0,-0.008 -0.23045,-0.32519 -0.34727,-0.68773 -0.34727,-1.08314 v -2.48873 c 0,-1.01985 0.83224,-1.85209 1.85209,-1.85209 z"
       style="line-height:normal;-inkscape-font-specification:'Bitstream Vera Sans';text-indent:0;text-align:start;text-transform:none;fill:#00ffcc;stroke-width:0.264583" />
    <text
       xml:space="preserve"
       style="font-size:7.05556px;line-height:1.25;font-family:Aachen-Bold;-inkscape-font-specification:Aachen-Bold;letter-spacing:0px;stroke-width:0.264583"
       x="115.34406"
       y="57.681274"
       id="text1088"><tspan
         sodipodi:role="line"
         id="tspan1086"
         x="115.34406"
         y="57.681274"
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:'Abyssinica SIL';-inkscape-font-specification:'Abyssinica SIL';stroke-width:0.264583">Upvote</tspan></text>
    <text
       id="text1092"
       y="57.681274"
       x="172.49344"
       style="font-size:7.05556px;line-height:1.25;font-family:Aachen-Bold;-inkscape-font-specification:Aachen-Bold;letter-spacing:0px;stroke-width:0.264583"
       xml:space="preserve"><tspan
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:'Abyssinica SIL';-inkscape-font-specification:'Abyssinica SIL';stroke-width:0.264583"
         y="57.681274"
         x="172.49344"
         id="tspan1090"
         sodipodi:role="line">Downvote</tspan></text>
    <rect
       ry="6.2079501"
       y="35.543884"
       x="3.2391663"
       height="27.919027"
       width="203.52167"
       id="rect1094"
       style="fill:#ffd5d5;stroke:#faebd7;stroke-width:0.529;stroke-linecap:round;stroke-linejoin:bevel" />
    <text
       id="text1098"
       y="48.72123"
       x="17.777571"
       style="font-size:7.05556px;line-height:1.25;font-family:'Airmole Stripe';-inkscape-font-specification:'Airmole Stripe';letter-spacing:0px;stroke-width:0.264583"
       xml:space="preserve"><tspan
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:aakar;-inkscape-font-specification:aakar;stroke-width:0.264583"
         y="48.72123"
         x="17.777571"
         id="tspan1096"
         sodipodi:role="line">Sadie Jefferson</tspan></text>
    <text
       transform="scale(0.94069041,1.063049)"
       id="text1102"
       y="58.832306"
       x="48.275471"
       style="font-size:7.50041px;line-height:1.25;font-family:'Airmole Stripe';-inkscape-font-specification:'Airmole Stripe';letter-spacing:0px;stroke-width:0.281265"
       xml:space="preserve"><tspan
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:aakar;-inkscape-font-specification:aakar;stroke-width:0.281265"
         y="58.832306"
         x="48.275471"
         id="tspan1100"
         sodipodi:role="line">Profile Link</tspan></text>
    <path
       style="line-height:normal;-inkscape-font-specification:'Bitstream Vera Sans';text-indent:0;text-align:start;text-transform:none;fill:#00ffcc;stroke-width:0.264583"
       d="m 193.07662,48.681887 c -0.31142,0 -0.61078,0.19256 -0.81029,0.50436 -0.007,0.0105 -0.0183,0.014 -0.0248,0.0248 l -2.95176,4.05143 c -0.29575,0.41406 -0.44648,0.89566 -0.44648,1.39734 v 2.48873 c 0,1.30849 1.07276,2.38125 2.38125,2.38125 h 5.02708 c 0.40129,0 0.7328,-0.16225 0.95912,-0.38034 0.22631,-0.21808 0.3638,-0.48693 0.3638,-0.76067 0,-0.22596 -0.0527,-0.41238 -0.10749,-0.55397 0.25768,-0.13854 0.63666,-0.40103 0.63666,-1.00046 0,-0.3775 -0.18273,-0.62379 -0.36381,-0.78548 0.18074,-0.1774 0.36381,-0.43893 0.36381,-0.83509 0,-0.59359 -0.37611,-0.83606 -0.59532,-0.95085 0.0231,-0.1363 0.0661,-0.33705 0.0661,-0.57878 0,-0.51823 -0.48838,-1.00481 -1.20716,-1.00872 -0.002,-6e-5 -0.006,6e-5 -0.008,0 -0.82119,-0.0238 -2.80619,-0.0246 -3.29902,-0.0248 0.088,-0.19697 0.15168,-0.33445 0.31419,-0.7028 0.2472,-0.56032 0.50609,-1.1472 0.58704,-1.37253 4.3e-4,-0.001 -3.9e-4,-0.007 0,-0.008 0.0716,-0.18903 0.17364,-0.3762 0.17364,-0.66972 0,-0.40841 -0.15934,-0.72634 -0.37207,-0.92605 -0.21274,-0.19971 -0.46057,-0.28938 -0.68627,-0.28938 z m 0,0.52916 c 0.0653,0 0.21108,0.0443 0.32245,0.14883 0.11138,0.10456 0.20671,0.25793 0.20671,0.53744 0,0.17932 -0.0535,0.25579 -0.14056,0.48782 a 0.26460979,0.26460979 0 0 0 0,0.008 c -0.0527,0.14762 -0.32287,0.77815 -0.5705,1.33945 -0.24764,0.56131 -0.47956,1.07487 -0.47956,1.07487 a 0.26460979,0.26460979 0 0 0 0.23978,0.37207 c 0,0 2.81246,-10e-4 3.69589,0.0248 a 0.26460979,0.26460979 0 0 0 0.008,0 c 0.49351,0 0.68627,0.31198 0.68627,0.47955 0,0.21167 -0.0744,0.66973 -0.0744,0.66973 a 0.26460979,0.26460979 0 0 0 0.17363,0.28939 c 0,0 0.42995,0.13835 0.42995,0.57051 0,0.38763 -0.38861,0.62011 -0.38861,0.62011 a 0.26460979,0.26460979 0 0 0 0.0248,0.47956 c 0,0 0.3638,0.13326 0.3638,0.5209 0,0.43656 -0.5457,0.64492 -0.5457,0.64492 a 0.26460979,0.26460979 0 0 0 -0.12403,0.40514 c 0,0 0.14056,0.18981 0.14056,0.50437 0,0.0702 -0.061,0.24785 -0.19843,0.38034 -0.13749,0.13248 -0.33514,0.23151 -0.59532,0.23151 h -5.02708 c -1.01984,0 -1.85208,-0.83224 -1.85208,-1.85209 v -2.48873 c 0,-0.39541 0.11682,-0.75795 0.34727,-1.08314 0.001,-0.002 -0.001,-0.006 0,-0.008 l 2.96002,-4.06797 a 0.26460979,0.26460979 0 0 0 0.0165,-0.0248 c 0.11872,-0.19786 0.27892,-0.26459 0.38034,-0.26459 z"
       overflow="visible"
       enable-background="accumulate"
       font-family="'Bitstream Vera Sans'"
       id="path1104" />
    <text
       id="text1108"
       y="57.681274"
       x="157.67697"
       style="font-size:7.05556px;line-height:1.25;font-family:Aachen-Bold;-inkscape-font-specification:Aachen-Bold;letter-spacing:0px;stroke-width:0.264583"
       xml:space="preserve"><tspan
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:'Abyssinica SIL';-inkscape-font-specification:'Abyssinica SIL';stroke-width:0.264583"
         y="57.681274"
         x="157.67697"
         id="tspan1106"
         sodipodi:role="line">Approve</tspan></text>
    <rect
       style="fill:#ffd5d5;stroke:#faebd7;stroke-width:0.529;stroke-linecap:round;stroke-linejoin:bevel"
       id="rect1110"
       width="203.52167"
       height="27.919027"
       x="3.2391663"
       y="69.410583"
       ry="6.2079501" />
    <text
       xml:space="preserve"
       style="font-size:7.05556px;line-height:1.25;font-family:'Airmole Stripe';-inkscape-font-specification:'Airmole Stripe';letter-spacing:0px;stroke-width:0.264583"
       x="17.777571"
       y="82.587921"
       id="text1114"><tspan
         sodipodi:role="line"
         id="tspan1112"
         x="17.777571"
         y="82.587921"
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:aakar;-inkscape-font-specification:aakar;stroke-width:0.264583">Ruby Griffith</tspan></text>
    <text
       xml:space="preserve"
       style="font-size:7.50041px;line-height:1.25;font-family:'Airmole Stripe';-inkscape-font-specification:'Airmole Stripe';letter-spacing:0px;stroke-width:0.281265"
       x="48.275471"
       y="90.690247"
       id="text1118"
       transform="scale(0.94069041,1.063049)"><tspan
         sodipodi:role="line"
         id="tspan1116"
         x="48.275471"
         y="90.690247"
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:aakar;-inkscape-font-specification:aakar;stroke-width:0.281265">Profile Link</tspan></text>
    <path
       id="path1120"
       font-family="'Bitstream Vera Sans'"
       enable-background="accumulate"
       overflow="visible"
       d="m 193.07662,82.54858 c -0.31142,0 -0.61078,0.19256 -0.81029,0.50436 -0.007,0.0105 -0.0183,0.014 -0.0248,0.0248 l -2.95176,4.051436 c -0.29575,0.414057 -0.44648,0.895654 -0.44648,1.397341 v 2.488725 c 0,1.308494 1.07276,2.381248 2.38125,2.381248 h 5.02708 c 0.40129,0 0.7328,-0.16225 0.95912,-0.380337 0.22631,-0.21808 0.3638,-0.486927 0.3638,-0.760667 0,-0.225967 -0.0527,-0.412387 -0.10749,-0.553977 0.25768,-0.13854 0.63666,-0.401027 0.63666,-1.000454 0,-0.377497 -0.18273,-0.623787 -0.36381,-0.785484 0.18074,-0.1774 0.36381,-0.43893 0.36381,-0.835087 0,-0.593587 -0.37611,-0.836064 -0.59532,-0.950854 0.0231,-0.1363 0.0661,-0.337047 0.0661,-0.578777 0,-0.518227 -0.48838,-1.004814 -1.20716,-1.008724 -0.002,-6e-5 -0.006,6e-5 -0.008,0 -0.82119,-0.0238 -2.80619,-0.0246 -3.29902,-0.0248 0.088,-0.19697 0.15168,-0.334447 0.31419,-0.702797 0.2472,-0.560317 0.50609,-1.147194 0.58704,-1.372531 4.3e-4,-0.001 -3.9e-4,-0.007 0,-0.008 0.0716,-0.18903 0.17364,-0.376197 0.17364,-0.669717 0,-0.408414 -0.15934,-0.726341 -0.37207,-0.926051 -0.21274,-0.19971 -0.46057,-0.28938 -0.68627,-0.28938 z m 0,0.529167 c 0.0653,0 0.21108,0.0443 0.32245,0.14883 0.11138,0.10456 0.20671,0.25793 0.20671,0.537437 0,0.17932 -0.0535,0.25579 -0.14056,0.487817 a 0.26460979,0.26460979 0 0 0 0,0.008 c -0.0527,0.14762 -0.32287,0.778157 -0.5705,1.339454 -0.24764,0.561307 -0.47956,1.074864 -0.47956,1.074864 a 0.26460979,0.26460979 0 0 0 0.23978,0.372077 c 0,0 2.81246,-0.001 3.69589,0.0248 a 0.26460979,0.26460979 0 0 0 0.008,0 c 0.49351,0 0.68627,0.311977 0.68627,0.479547 0,0.21167 -0.0744,0.669727 -0.0744,0.669727 a 0.26460979,0.26460979 0 0 0 0.17363,0.289397 c 0,0 0.42995,0.13835 0.42995,0.570507 0,0.387627 -0.38861,0.620107 -0.38861,0.620107 a 0.26460979,0.26460979 0 0 0 0.0248,0.479567 c 0,0 0.3638,0.13326 0.3638,0.520897 0,0.436557 -0.5457,0.644917 -0.5457,0.644917 a 0.26460979,0.26460979 0 0 0 -0.12403,0.405137 c 0,0 0.14056,0.18981 0.14056,0.504377 0,0.0702 -0.061,0.24785 -0.19843,0.380337 -0.13749,0.13248 -0.33514,0.23151 -0.59532,0.23151 h -5.02708 c -1.01984,0 -1.85208,-0.832244 -1.85208,-1.852091 v -2.488725 c 0,-0.395417 0.11682,-0.757954 0.34727,-1.083144 0.001,-0.002 -0.001,-0.006 0,-0.008 l 2.96002,-4.067966 a 0.26460979,0.26460979 0 0 0 0.0165,-0.0248 c 0.11872,-0.19786 0.27892,-0.26459 0.38034,-0.26459 z"
       style="line-height:normal;-inkscape-font-specification:'Bitstream Vera Sans';text-indent:0;text-align:start;text-transform:none;fill:#00ffcc;stroke-width:0.264583" />
    <text
       xml:space="preserve"
       style="font-size:7.05556px;line-height:1.25;font-family:Aachen-Bold;-inkscape-font-specification:Aachen-Bold;letter-spacing:0px;stroke-width:0.264583"
       x="157.67697"
       y="91.547958"
       id="text1124"><tspan
         sodipodi:role="line"
         id="tspan1122"
         x="157.67697"
         y="91.547958"
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:'Abyssinica SIL';-inkscape-font-specification:'Abyssinica SIL';stroke-width:0.264583">Approve</tspan></text>
    <rect
       ry="6.2079501"
       y="105.92313"
       x="3.2391663"
       height="27.919027"
       width="203.52167"
       id="rect1126"
       style="fill:#ffd5d5;stroke:#faebd7;stroke-width:0.529;stroke-linecap:round;stroke-linejoin:bevel" />
    <text
       id="text1130"
       y="119.10043"
       x="17.777571"
       style="font-size:7.05556px;line-height:1.25;font-family:'Airmole Stripe';-inkscape-font-specification:'Airmole Stripe';letter-spacing:0px;stroke-width:0.264583"
       xml:space="preserve"><tspan
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:aakar;-inkscape-font-specification:aakar;stroke-width:0.264583"
         y="119.10043"
         x="17.777571"
         id="tspan1128"
         sodipodi:role="line">Johnathan Morris</tspan><tspan
         id="tspan1216"
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:aakar;-inkscape-font-specification:aakar;stroke-width:0.264583"
         y="128.33047"
         x="17.777571"
         sodipodi:role="line" /></text>
    <text
       transform="scale(0.94069041,1.063049)"
       id="text1134"
       y="125.03711"
       x="48.275471"
       style="font-size:7.50041px;line-height:1.25;font-family:'Airmole Stripe';-inkscape-font-specification:'Airmole Stripe';letter-spacing:0px;stroke-width:0.281265"
       xml:space="preserve"><tspan
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:aakar;-inkscape-font-specification:aakar;stroke-width:0.281265"
         y="125.03711"
         x="48.275471"
         id="tspan1132"
         sodipodi:role="line">Profile Link</tspan></text>
    <path
       style="line-height:normal;-inkscape-font-specification:'Bitstream Vera Sans';text-indent:0;text-align:start;text-transform:none;fill:#00ffcc;stroke-width:0.264583"
       d="m 193.07662,119.06122 c -0.31142,0 -0.61078,0.19256 -0.81029,0.50436 -0.007,0.0105 -0.0183,0.014 -0.0248,0.0248 l -2.95176,4.05145 c -0.29575,0.41406 -0.44648,0.89566 -0.44648,1.39735 v 2.48874 c 0,1.3085 1.07276,2.38126 2.38125,2.38126 h 5.02708 c 0.40129,0 0.7328,-0.16225 0.95912,-0.38034 0.22631,-0.21808 0.3638,-0.48693 0.3638,-0.76067 0,-0.22597 -0.0527,-0.41239 -0.10749,-0.55398 0.25768,-0.13854 0.63666,-0.40103 0.63666,-1.00046 0,-0.3775 -0.18273,-0.62379 -0.36381,-0.78549 0.18074,-0.1774 0.36381,-0.43893 0.36381,-0.83509 0,-0.59359 -0.37611,-0.83607 -0.59532,-0.95086 0.0231,-0.1363 0.0661,-0.33705 0.0661,-0.57878 0,-0.51823 -0.48838,-1.00482 -1.20716,-1.00873 -0.002,-6e-5 -0.006,6e-5 -0.008,0 -0.82119,-0.0238 -2.80619,-0.0246 -3.29902,-0.0248 0.088,-0.19697 0.15168,-0.33445 0.31419,-0.7028 0.2472,-0.56032 0.50609,-1.1472 0.58704,-1.37254 4.3e-4,-0.001 -3.9e-4,-0.007 0,-0.008 0.0716,-0.18903 0.17364,-0.3762 0.17364,-0.66972 0,-0.40841 -0.15934,-0.72634 -0.37207,-0.92605 -0.21274,-0.19971 -0.46057,-0.28938 -0.68627,-0.28938 z m 0,0.52917 c 0.0653,0 0.21108,0.0443 0.32245,0.14883 0.11138,0.10456 0.20671,0.25793 0.20671,0.53744 0,0.17932 -0.0535,0.25579 -0.14056,0.48782 a 0.26460979,0.26460979 0 0 0 0,0.008 c -0.0527,0.14762 -0.32287,0.77816 -0.5705,1.33946 -0.24764,0.56131 -0.47956,1.07487 -0.47956,1.07487 a 0.26460979,0.26460979 0 0 0 0.23978,0.37208 c 0,0 2.81246,-0.001 3.69589,0.0248 a 0.26460979,0.26460979 0 0 0 0.008,0 c 0.49351,0 0.68627,0.31198 0.68627,0.47955 0,0.21167 -0.0744,0.66973 -0.0744,0.66973 a 0.26460979,0.26460979 0 0 0 0.17363,0.2894 c 0,0 0.42995,0.13835 0.42995,0.57051 0,0.38763 -0.38861,0.62011 -0.38861,0.62011 a 0.26460979,0.26460979 0 0 0 0.0248,0.47957 c 0,0 0.3638,0.13326 0.3638,0.5209 0,0.43656 -0.5457,0.64492 -0.5457,0.64492 a 0.26460979,0.26460979 0 0 0 -0.12403,0.40514 c 0,0 0.14056,0.18981 0.14056,0.50438 0,0.0702 -0.061,0.24785 -0.19843,0.38034 -0.13749,0.13248 -0.33514,0.23151 -0.59532,0.23151 h -5.02708 c -1.01984,0 -1.85208,-0.83225 -1.85208,-1.8521 v -2.48874 c 0,-0.39542 0.11682,-0.75796 0.34727,-1.08315 0.001,-0.002 -0.001,-0.006 0,-0.008 l 2.96002,-4.06799 a 0.26460979,0.26460979 0 0 0 0.0165,-0.0248 c 0.11872,-0.19786 0.27892,-0.26459 0.38034,-0.26459 z"
       overflow="visible"
       enable-background="accumulate"
       font-family="'Bitstream Vera Sans'"
       id="path1136" />
    <text
       id="text1140"
       y="128.06042"
       x="157.67697"
       style="font-size:7.05556px;line-height:1.25;font-family:Aachen-Bold;-inkscape-font-specification:Aachen-Bold;letter-spacing:0px;stroke-width:0.264583"
       xml:space="preserve"><tspan
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:'Abyssinica SIL';-inkscape-font-specification:'Abyssinica SIL';stroke-width:0.264583"
         y="128.06042"
         x="157.67697"
         id="tspan1138"
         sodipodi:role="line">Approve</tspan></text>
    <rect
       style="fill:#ffd5d5;stroke:#faebd7;stroke-width:0.529;stroke-linecap:round;stroke-linejoin:bevel"
       id="rect1142"
       width="203.52167"
       height="27.919027"
       x="3.2391663"
       y="138.73128"
       ry="6.2079501" />
    <text
       xml:space="preserve"
       style="font-size:7.05556px;line-height:1.25;font-family:'Airmole Stripe';-inkscape-font-specification:'Airmole Stripe';letter-spacing:0px;stroke-width:0.264583"
       x="17.777571"
       y="151.90842"
       id="text1146"><tspan
         sodipodi:role="line"
         id="tspan1144"
         x="17.777571"
         y="151.90842"
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:aakar;-inkscape-font-specification:aakar;stroke-width:0.264583">Ricky Spencer</tspan></text>
    <text
       xml:space="preserve"
       style="font-size:7.50041px;line-height:1.25;font-family:'Airmole Stripe';-inkscape-font-specification:'Airmole Stripe';letter-spacing:0px;stroke-width:0.281265"
       x="48.275471"
       y="155.89989"
       id="text1150"
       transform="scale(0.94069041,1.063049)"><tspan
         sodipodi:role="line"
         id="tspan1148"
         x="48.275471"
         y="155.89989"
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:aakar;-inkscape-font-specification:aakar;stroke-width:0.281265">Profile Link</tspan></text>
    <path
       id="path1152"
       font-family="'Bitstream Vera Sans'"
       enable-background="accumulate"
       overflow="visible"
       d="m 193.07662,151.86976 c -0.31142,0 -0.61078,0.19256 -0.81029,0.50436 -0.007,0.0105 -0.0183,0.014 -0.0248,0.0248 l -2.95176,4.05145 c -0.29575,0.41406 -0.44648,0.89566 -0.44648,1.39735 v 2.48874 c 0,1.3085 1.07276,2.38126 2.38125,2.38126 h 5.02708 c 0.40129,0 0.7328,-0.16225 0.95912,-0.38034 0.22631,-0.21808 0.3638,-0.48693 0.3638,-0.76067 0,-0.22597 -0.0527,-0.41239 -0.10749,-0.55398 0.25768,-0.13854 0.63666,-0.40103 0.63666,-1.00046 0,-0.3775 -0.18273,-0.62379 -0.36381,-0.78549 0.18074,-0.1774 0.36381,-0.43893 0.36381,-0.83509 0,-0.59359 -0.37611,-0.83607 -0.59532,-0.95086 0.0231,-0.1363 0.0661,-0.33705 0.0661,-0.57878 0,-0.51823 -0.48838,-1.00482 -1.20716,-1.00873 -0.002,-6e-5 -0.006,6e-5 -0.008,0 -0.82119,-0.0238 -2.80619,-0.0246 -3.29902,-0.0248 0.088,-0.19697 0.15168,-0.33445 0.31419,-0.7028 0.2472,-0.56032 0.50609,-1.1472 0.58704,-1.37254 4.3e-4,-0.001 -3.9e-4,-0.007 0,-0.008 0.0716,-0.18903 0.17364,-0.3762 0.17364,-0.66972 0,-0.40841 -0.15934,-0.72634 -0.37207,-0.92605 -0.21274,-0.19971 -0.46057,-0.28938 -0.68627,-0.28938 z m 0,0.52917 c 0.0653,0 0.21108,0.0443 0.32245,0.14883 0.11138,0.10456 0.20671,0.25793 0.20671,0.53744 0,0.17932 -0.0535,0.25579 -0.14056,0.48782 a 0.26460979,0.26460979 0 0 0 0,0.008 c -0.0527,0.14762 -0.32287,0.77816 -0.5705,1.33946 -0.24764,0.56131 -0.47956,1.07487 -0.47956,1.07487 a 0.26460979,0.26460979 0 0 0 0.23978,0.37208 c 0,0 2.81246,-0.001 3.69589,0.0248 a 0.26460979,0.26460979 0 0 0 0.008,0 c 0.49351,0 0.68627,0.31198 0.68627,0.47955 0,0.21167 -0.0744,0.66973 -0.0744,0.66973 a 0.26460979,0.26460979 0 0 0 0.17363,0.2894 c 0,0 0.42995,0.13835 0.42995,0.57051 0,0.38763 -0.38861,0.62011 -0.38861,0.62011 a 0.26460979,0.26460979 0 0 0 0.0248,0.47957 c 0,0 0.3638,0.13326 0.3638,0.5209 0,0.43656 -0.5457,0.64492 -0.5457,0.64492 a 0.26460979,0.26460979 0 0 0 -0.12403,0.40514 c 0,0 0.14056,0.18981 0.14056,0.50438 0,0.0702 -0.061,0.24785 -0.19843,0.38034 -0.13749,0.13248 -0.33514,0.23151 -0.59532,0.23151 h -5.02708 c -1.01984,0 -1.85208,-0.83225 -1.85208,-1.8521 v -2.48874 c 0,-0.39542 0.11682,-0.75796 0.34727,-1.08315 0.001,-0.002 -0.001,-0.006 0,-0.008 l 2.96002,-4.06799 a 0.26460979,0.26460979 0 0 0 0.0165,-0.0248 c 0.11872,-0.19786 0.27892,-0.26459 0.38034,-0.26459 z"
       style="line-height:normal;-inkscape-font-specification:'Bitstream Vera Sans';text-indent:0;text-align:start;text-transform:none;fill:#00ffcc;stroke-width:0.264583" />
    <text
       xml:space="preserve"
       style="font-size:7.05556px;line-height:1.25;font-family:Aachen-Bold;-inkscape-font-specification:Aachen-Bold;letter-spacing:0px;stroke-width:0.264583"
       x="157.67697"
       y="160.86832"
       id="text1156"><tspan
         sodipodi:role="line"
         id="tspan1154"
         x="157.67697"
         y="160.86832"
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:'Abyssinica SIL';-inkscape-font-specification:'Abyssinica SIL';stroke-width:0.264583">Approve</tspan></text>
    <rect
       ry="6.2079501"
       y="172.59749"
       x="3.2391663"
       height="27.919027"
       width="203.52167"
       id="rect1158"
       style="fill:#ffd5d5;stroke:#faebd7;stroke-width:0.529;stroke-linecap:round;stroke-linejoin:bevel" />
    <text
       id="text1162"
       y="185.77463"
       x="17.777571"
       style="font-size:7.05556px;line-height:1.25;font-family:'Airmole Stripe';-inkscape-font-specification:'Airmole Stripe';letter-spacing:0px;stroke-width:0.264583"
       xml:space="preserve"><tspan
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:aakar;-inkscape-font-specification:aakar;stroke-width:0.264583"
         y="185.77463"
         x="17.777571"
         id="tspan1160"
         sodipodi:role="line">Antoinette Bush</tspan><tspan
         id="tspan1218"
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:aakar;-inkscape-font-specification:aakar;stroke-width:0.264583"
         y="195.00467"
         x="17.777571"
         sodipodi:role="line" /></text>
    <text
       transform="scale(0.94069041,1.063049)"
       id="text1166"
       y="187.75829"
       x="48.275471"
       style="font-size:7.50041px;line-height:1.25;font-family:'Airmole Stripe';-inkscape-font-specification:'Airmole Stripe';letter-spacing:0px;stroke-width:0.281265"
       xml:space="preserve"><tspan
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:aakar;-inkscape-font-specification:aakar;stroke-width:0.281265"
         y="187.75829"
         x="48.275471"
         id="tspan1164"
         sodipodi:role="line">Profile Link</tspan></text>
    <path
       style="line-height:normal;-inkscape-font-specification:'Bitstream Vera Sans';text-indent:0;text-align:start;text-transform:none;fill:#00ffcc;stroke-width:0.264583"
       d="m 193.07662,185.73664 c -0.31142,0 -0.61078,0.19256 -0.81029,0.50436 -0.007,0.0105 -0.0183,0.014 -0.0248,0.0248 l -2.95176,4.05145 c -0.29575,0.41406 -0.44648,0.89566 -0.44648,1.39735 v 2.48874 c 0,1.3085 1.07276,2.38126 2.38125,2.38126 h 5.02708 c 0.40129,0 0.7328,-0.16225 0.95912,-0.38034 0.22631,-0.21808 0.3638,-0.48693 0.3638,-0.76067 0,-0.22597 -0.0527,-0.41239 -0.10749,-0.55398 0.25768,-0.13854 0.63666,-0.40103 0.63666,-1.00046 0,-0.3775 -0.18273,-0.62379 -0.36381,-0.78549 0.18074,-0.1774 0.36381,-0.43893 0.36381,-0.83509 0,-0.59359 -0.37611,-0.83607 -0.59532,-0.95086 0.0231,-0.1363 0.0661,-0.33705 0.0661,-0.57878 0,-0.51823 -0.48838,-1.00482 -1.20716,-1.00873 -0.002,-6e-5 -0.006,6e-5 -0.008,0 -0.82119,-0.0238 -2.80619,-0.0246 -3.29902,-0.0248 0.088,-0.19697 0.15168,-0.33445 0.31419,-0.7028 0.2472,-0.56032 0.50609,-1.1472 0.58704,-1.37254 4.3e-4,-10e-4 -3.9e-4,-0.007 0,-0.008 0.0716,-0.18903 0.17364,-0.3762 0.17364,-0.66972 0,-0.40841 -0.15934,-0.72634 -0.37207,-0.92605 -0.21274,-0.19971 -0.46057,-0.28938 -0.68627,-0.28938 z m 0,0.52917 c 0.0653,0 0.21108,0.0443 0.32245,0.14883 0.11138,0.10456 0.20671,0.25793 0.20671,0.53744 0,0.17932 -0.0535,0.25579 -0.14056,0.48782 a 0.26460979,0.26460979 0 0 0 0,0.008 c -0.0527,0.14762 -0.32287,0.77816 -0.5705,1.33946 -0.24764,0.56131 -0.47956,1.07487 -0.47956,1.07487 a 0.26460979,0.26460979 0 0 0 0.23978,0.37208 c 0,0 2.81246,-0.001 3.69589,0.0248 a 0.26460979,0.26460979 0 0 0 0.008,0 c 0.49351,0 0.68627,0.31198 0.68627,0.47955 0,0.21167 -0.0744,0.66973 -0.0744,0.66973 a 0.26460979,0.26460979 0 0 0 0.17363,0.2894 c 0,0 0.42995,0.13835 0.42995,0.57051 0,0.38763 -0.38861,0.62011 -0.38861,0.62011 a 0.26460979,0.26460979 0 0 0 0.0248,0.47957 c 0,0 0.3638,0.13326 0.3638,0.5209 0,0.43656 -0.5457,0.64492 -0.5457,0.64492 a 0.26460979,0.26460979 0 0 0 -0.12403,0.40514 c 0,0 0.14056,0.18981 0.14056,0.50438 0,0.0702 -0.061,0.24785 -0.19843,0.38034 -0.13749,0.13248 -0.33514,0.23151 -0.59532,0.23151 h -5.02708 c -1.01984,0 -1.85208,-0.83225 -1.85208,-1.8521 v -2.48874 c 0,-0.39542 0.11682,-0.75796 0.34727,-1.08315 0.001,-0.002 -0.001,-0.006 0,-0.008 l 2.96002,-4.06799 a 0.26460979,0.26460979 0 0 0 0.0165,-0.0248 c 0.11872,-0.19786 0.27892,-0.26459 0.38034,-0.26459 z"
       overflow="visible"
       enable-background="accumulate"
       font-family="'Bitstream Vera Sans'"
       id="path1168" />
    <text
       id="text1172"
       y="194.73453"
       x="157.67697"
       style="font-size:7.05556px;line-height:1.25;font-family:Aachen-Bold;-inkscape-font-specification:Aachen-Bold;letter-spacing:0px;stroke-width:0.264583"
       xml:space="preserve"><tspan
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:'Abyssinica SIL';-inkscape-font-specification:'Abyssinica SIL';stroke-width:0.264583"
         y="194.73453"
         x="157.67697"
         id="tspan1170"
         sodipodi:role="line">Approve</tspan></text>
    <rect
       style="fill:#ffd5d5;stroke:#faebd7;stroke-width:0.529;stroke-linecap:round;stroke-linejoin:bevel"
       id="rect1174"
       width="203.52167"
       height="27.919027"
       x="3.2391663"
       y="206.99286"
       ry="6.2079501" />
    <text
       xml:space="preserve"
       style="font-size:7.05556px;line-height:1.25;font-family:'Airmole Stripe';-inkscape-font-specification:'Airmole Stripe';letter-spacing:0px;stroke-width:0.264583"
       x="17.777571"
       y="220.17"
       id="text1178"><tspan
         sodipodi:role="line"
         id="tspan1176"
         x="17.777571"
         y="220.17"
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:aakar;-inkscape-font-specification:aakar;stroke-width:0.264583">Eleanor Rodgers</tspan></text>
    <text
       xml:space="preserve"
       style="font-size:7.50041px;line-height:1.25;font-family:'Airmole Stripe';-inkscape-font-specification:'Airmole Stripe';letter-spacing:0px;stroke-width:0.281265"
       x="48.275471"
       y="220.11447"
       id="text1182"
       transform="scale(0.94069041,1.063049)"><tspan
         sodipodi:role="line"
         id="tspan1180"
         x="48.275471"
         y="220.11447"
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:aakar;-inkscape-font-specification:aakar;stroke-width:0.281265">Profile Link</tspan></text>
    <path
       id="path1184"
       font-family="'Bitstream Vera Sans'"
       enable-background="accumulate"
       overflow="visible"
       d="m 193.07662,220.13269 c -0.31142,0 -0.61078,0.19256 -0.81029,0.50436 -0.007,0.0105 -0.0183,0.014 -0.0248,0.0248 l -2.95176,4.05145 c -0.29575,0.41406 -0.44648,0.89566 -0.44648,1.39735 v 2.48874 c 0,1.3085 1.07276,2.38126 2.38125,2.38126 h 5.02708 c 0.40129,0 0.7328,-0.16225 0.95912,-0.38034 0.22631,-0.21808 0.3638,-0.48693 0.3638,-0.76067 0,-0.22597 -0.0527,-0.41239 -0.10749,-0.55398 0.25768,-0.13854 0.63666,-0.40103 0.63666,-1.00046 0,-0.3775 -0.18273,-0.62379 -0.36381,-0.78549 0.18074,-0.1774 0.36381,-0.43893 0.36381,-0.83509 0,-0.59359 -0.37611,-0.83607 -0.59532,-0.95086 0.0231,-0.1363 0.0661,-0.33705 0.0661,-0.57878 0,-0.51823 -0.48838,-1.00482 -1.20716,-1.00873 -0.002,-6e-5 -0.006,6e-5 -0.008,0 -0.82119,-0.0238 -2.80619,-0.0246 -3.29902,-0.0248 0.088,-0.19697 0.15168,-0.33445 0.31419,-0.7028 0.2472,-0.56032 0.50609,-1.1472 0.58704,-1.37254 4.3e-4,-10e-4 -3.9e-4,-0.007 0,-0.008 0.0716,-0.18903 0.17364,-0.3762 0.17364,-0.66972 0,-0.40841 -0.15934,-0.72634 -0.37207,-0.92605 -0.21274,-0.19971 -0.46057,-0.28938 -0.68627,-0.28938 z m 0,0.52917 c 0.0653,0 0.21108,0.0443 0.32245,0.14883 0.11138,0.10456 0.20671,0.25793 0.20671,0.53744 0,0.17932 -0.0535,0.25579 -0.14056,0.48782 a 0.26460979,0.26460979 0 0 0 0,0.008 c -0.0527,0.14762 -0.32287,0.77816 -0.5705,1.33946 -0.24764,0.56131 -0.47956,1.07487 -0.47956,1.07487 a 0.26460979,0.26460979 0 0 0 0.23978,0.37208 c 0,0 2.81246,-0.001 3.69589,0.0248 a 0.26460979,0.26460979 0 0 0 0.008,0 c 0.49351,0 0.68627,0.31198 0.68627,0.47955 0,0.21167 -0.0744,0.66973 -0.0744,0.66973 a 0.26460979,0.26460979 0 0 0 0.17363,0.2894 c 0,0 0.42995,0.13835 0.42995,0.57051 0,0.38763 -0.38861,0.62011 -0.38861,0.62011 a 0.26460979,0.26460979 0 0 0 0.0248,0.47957 c 0,0 0.3638,0.13326 0.3638,0.5209 0,0.43656 -0.5457,0.64492 -0.5457,0.64492 a 0.26460979,0.26460979 0 0 0 -0.12403,0.40514 c 0,0 0.14056,0.18981 0.14056,0.50438 0,0.0702 -0.061,0.24785 -0.19843,0.38034 -0.13749,0.13248 -0.33514,0.23151 -0.59532,0.23151 h -5.02708 c -1.01984,0 -1.85208,-0.83225 -1.85208,-1.8521 v -2.48874 c 0,-0.39542 0.11682,-0.75796 0.34727,-1.08315 0.001,-0.002 -0.001,-0.006 0,-0.008 l 2.96002,-4.06799 a 0.26460979,0.26460979 0 0 0 0.0165,-0.0248 c 0.11872,-0.19786 0.27892,-0.26459 0.38034,-0.26459 z"
       style="line-height:normal;-inkscape-font-specification:'Bitstream Vera Sans';text-indent:0;text-align:start;text-transform:none;fill:#00ffcc;stroke-width:0.264583" />
    <text
       xml:space="preserve"
       style="font-size:7.05556px;line-height:1.25;font-family:Aachen-Bold;-inkscape-font-specification:Aachen-Bold;letter-spacing:0px;stroke-width:0.264583"
       x="157.67697"
       y="229.1299"
       id="text1188"><tspan
         sodipodi:role="line"
         id="tspan1186"
         x="157.67697"
         y="229.1299"
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:'Abyssinica SIL';-inkscape-font-specification:'Abyssinica SIL';stroke-width:0.264583">Approve</tspan></text>
    <rect
       ry="6.2079501"
       y="240.32997"
       x="3.2391663"
       height="27.919027"
       width="203.52167"
       id="rect1190"
       style="fill:#ffd5d5;stroke:#faebd7;stroke-width:0.529;stroke-linecap:round;stroke-linejoin:bevel" />
    <text
       id="text1194"
       y="253.50716"
       x="17.777571"
       style="font-size:7.05556px;line-height:1.25;font-family:'Airmole Stripe';-inkscape-font-specification:'Airmole Stripe';letter-spacing:0px;stroke-width:0.264583"
       xml:space="preserve"><tspan
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:aakar;-inkscape-font-specification:aakar;stroke-width:0.264583"
         y="253.50716"
         x="17.777571"
         id="tspan1192"
         sodipodi:role="line">Brent Walton</tspan></text>
    <text
       transform="scale(0.94069041,1.063049)"
       id="text1198"
       y="251.47501"
       x="48.275471"
       style="font-size:7.50041px;line-height:1.25;font-family:'Airmole Stripe';-inkscape-font-specification:'Airmole Stripe';letter-spacing:0px;stroke-width:0.281265"
       xml:space="preserve"><tspan
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:aakar;-inkscape-font-specification:aakar;stroke-width:0.281265"
         y="251.47501"
         x="48.275471"
         id="tspan1196"
         sodipodi:role="line">Profile Link</tspan></text>
    <path
       style="line-height:normal;-inkscape-font-specification:'Bitstream Vera Sans';text-indent:0;text-align:start;text-transform:none;fill:#00ffcc;stroke-width:0.264583"
       d="m 193.07662,253.4704 c -0.31142,0 -0.61078,0.19256 -0.81029,0.50436 -0.007,0.0105 -0.0183,0.014 -0.0248,0.0248 l -2.95176,4.05145 c -0.29575,0.41406 -0.44648,0.89566 -0.44648,1.39735 v 2.48874 c 0,1.3085 1.07276,2.38126 2.38125,2.38126 h 5.02708 c 0.40129,0 0.7328,-0.16225 0.95912,-0.38034 0.22631,-0.21808 0.3638,-0.48693 0.3638,-0.76067 0,-0.22597 -0.0527,-0.41239 -0.10749,-0.55398 0.25768,-0.13854 0.63666,-0.40103 0.63666,-1.00046 0,-0.3775 -0.18273,-0.62379 -0.36381,-0.78549 0.18074,-0.1774 0.36381,-0.43893 0.36381,-0.83509 0,-0.59359 -0.37611,-0.83607 -0.59532,-0.95086 0.0231,-0.1363 0.0661,-0.33705 0.0661,-0.57878 0,-0.51823 -0.48838,-1.00482 -1.20716,-1.00873 -0.002,-6e-5 -0.006,6e-5 -0.008,0 -0.82119,-0.0238 -2.80619,-0.0246 -3.29902,-0.0248 0.088,-0.19697 0.15168,-0.33445 0.31419,-0.7028 0.2472,-0.56032 0.50609,-1.1472 0.58704,-1.37254 4.3e-4,-0.001 -3.9e-4,-0.007 0,-0.008 0.0716,-0.18903 0.17364,-0.3762 0.17364,-0.66972 0,-0.40841 -0.15934,-0.72634 -0.37207,-0.92605 -0.21274,-0.19971 -0.46057,-0.28938 -0.68627,-0.28938 z m 0,0.52917 c 0.0653,0 0.21108,0.0443 0.32245,0.14883 0.11138,0.10456 0.20671,0.25793 0.20671,0.53744 0,0.17932 -0.0535,0.25579 -0.14056,0.48782 a 0.26460979,0.26460979 0 0 0 0,0.008 c -0.0527,0.14762 -0.32287,0.77816 -0.5705,1.33946 -0.24764,0.56131 -0.47956,1.07487 -0.47956,1.07487 a 0.26460979,0.26460979 0 0 0 0.23978,0.37208 c 0,0 2.81246,-0.001 3.69589,0.0248 a 0.26460979,0.26460979 0 0 0 0.008,0 c 0.49351,0 0.68627,0.31198 0.68627,0.47955 0,0.21167 -0.0744,0.66973 -0.0744,0.66973 a 0.26460979,0.26460979 0 0 0 0.17363,0.2894 c 0,0 0.42995,0.13835 0.42995,0.57051 0,0.38763 -0.38861,0.62011 -0.38861,0.62011 a 0.26460979,0.26460979 0 0 0 0.0248,0.47957 c 0,0 0.3638,0.13326 0.3638,0.5209 0,0.43656 -0.5457,0.64492 -0.5457,0.64492 a 0.26460979,0.26460979 0 0 0 -0.12403,0.40514 c 0,0 0.14056,0.18981 0.14056,0.50438 0,0.0702 -0.061,0.24785 -0.19843,0.38034 -0.13749,0.13248 -0.33514,0.23151 -0.59532,0.23151 h -5.02708 c -1.01984,0 -1.85208,-0.83225 -1.85208,-1.8521 v -2.48874 c 0,-0.39542 0.11682,-0.75796 0.34727,-1.08315 0.001,-0.002 -0.001,-0.006 0,-0.008 l 2.96002,-4.06799 a 0.26460979,0.26460979 0 0 0 0.0165,-0.0248 c 0.11872,-0.19786 0.27892,-0.26459 0.38034,-0.26459 z"
       overflow="visible"
       enable-background="accumulate"
       font-family="'Bitstream Vera Sans'"
       id="path1200" />
    <text
       id="text1204"
       y="262.46722"
       x="157.67697"
       style="font-size:7.05556px;line-height:1.25;font-family:Aachen-Bold;-inkscape-font-specification:Aachen-Bold;letter-spacing:0px;stroke-width:0.264583"
       xml:space="preserve"><tspan
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:'Abyssinica SIL';-inkscape-font-specification:'Abyssinica SIL';stroke-width:0.264583"
         y="262.46722"
         x="157.67697"
         id="tspan1202"
         sodipodi:role="line">Approve</tspan></text>
    <rect
       ry="6.2079453"
       y="20.144089"
       x="155.9821"
       height="12.488696"
       width="33.626507"
       id="rect1210"
       style="fill:#ffff00;stroke:#faebd7;stroke-width:0.529;stroke-linecap:round;stroke-linejoin:bevel" />
    <text
       id="text1208"
       y="29.479601"
       x="159.04788"
       style="font-size:7.05556px;line-height:1.25;font-family:Aachen-Bold;-inkscape-font-specification:Aachen-Bold;letter-spacing:0px;stroke-width:0.264583"
       xml:space="preserve"><tspan
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:aakar;-inkscape-font-specification:aakar;stroke-width:0.264583"
         y="29.479601"
         x="159.04788"
         id="tspan1206"
         sodipodi:role="line">Search</tspan></text>
    <text
       id="text1214"
       y="24.268919"
       x="72.106209"
       style="font-size:7.05556px;line-height:1.25;font-family:Aachen-Bold;-inkscape-font-specification:Aachen-Bold;letter-spacing:0px;stroke-width:0.264583"
       xml:space="preserve"><tspan
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:aakar;-inkscape-font-specification:aakar;stroke-width:0.264583"
         y="24.268919"
         x="72.106209"
         id="tspan1212"
         sodipodi:role="line">Department: Education</tspan></text>
  </g>
</svg>

'''
'''--- docs/effectiveness_schelling_game.md ---
## Effectiveness of Schelling Game

The Schelling game of Shivarthu is designed to incentivize participants to reveal truthful information by rewarding them based on the majority consensus.

In the Schelling game, participants are asked to vote on the outcome of a particular event or question. They are rewarded based on the accuracy of their vote and the overall consensus among the participants. The idea is that participants will have an incentive to vote honestly in order to maximize their potential rewards.

The effectiveness and accuracy of the Schelling game, like any decentralized system, depend on several factors:

    Participation: The accuracy of the results can improve with a larger number of participants. More participants increase the diversity of perspectives, reducing the potential for bias or manipulation.

    Token Staking: In the protocol, participants must stake tokens as collateral, which can be lost if they vote against the majority outcome. This mechanism provides an additional incentive for participants to vote honestly.

    Jury Selection: It utilizes a random selection process to form a jury panel from the pool of participants. This randomness helps prevent collusion and bias within the jury.

The accuracy of the Schelling game can vary depending on the specific context and the quality of information available. It is important to note that no system can guarantee 100% accuracy. Factors such as the complexity of the question, the availability of information, and potential manipulation attempts can influence the accuracy of the results.

However, decentralized systems like Schelling game aim to mitigate biases and provide a fair and transparent mechanism for dispute resolution. By incentivizing truthful voting and random jury selection, Schelling game aims to achieve a reasonable level of accuracy in determining the majority consensus. Nonetheless, it is advisable to consider the specific details and context of each use case when evaluating the accuracy of the system.
'''
'''--- docs/rust-setup.md ---
---
title: Installation
---

This guide is for reference only, please check the latest information on getting starting with Substrate 
[here](https://docs.substrate.io/main-docs/install/).

This page will guide you through the **2 steps** needed to prepare a computer for **Substrate** development.
Since Substrate is built with [the Rust programming language](https://www.rust-lang.org/), the first
thing you will need to do is prepare the computer for Rust development - these steps will vary based
on the computer's operating system. Once Rust is configured, you will use its toolchains to interact
with Rust projects; the commands for Rust's toolchains will be the same for all supported,
Unix-based operating systems.

## Build dependencies

Substrate development is easiest on Unix-based operating systems like macOS or Linux. The examples
in the [Substrate Docs](https://docs.substrate.io) use Unix-style terminals to demonstrate how to
interact with Substrate from the command line.

### Ubuntu/Debian

Use a terminal shell to execute the following commands:

```bash
sudo apt update
# May prompt for location information
sudo apt install -y git clang curl libssl-dev llvm libudev-dev
```

### Arch Linux

Run these commands from a terminal:

```bash
pacman -Syu --needed --noconfirm curl git clang
```

### Fedora

Run these commands from a terminal:

```bash
sudo dnf update
sudo dnf install clang curl git openssl-devel
```

### OpenSUSE

Run these commands from a terminal:

```bash
sudo zypper install clang curl git openssl-devel llvm-devel libudev-devel
```

### macOS

> **Apple M1 ARM**
> If you have an Apple M1 ARM system on a chip, make sure that you have Apple Rosetta 2
> installed through `softwareupdate --install-rosetta`. This is only needed to run the
> `protoc` tool during the build. The build itself and the target binaries would remain native.

Open the Terminal application and execute the following commands:

```bash
# Install Homebrew if necessary https://brew.sh/
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"

# Make sure Homebrew is up-to-date, install openssl
brew update
brew install openssl
```

### Windows

**_PLEASE NOTE:_** Native Windows development of Substrate is _not_ very well supported! It is _highly_
recommend to use [Windows Subsystem Linux](https://docs.microsoft.com/en-us/windows/wsl/install-win10)
(WSL) and follow the instructions for [Ubuntu/Debian](#ubuntudebian).
Please refer to the separate
[guide for native Windows development](https://docs.substrate.io/main-docs/install/windows/).

## Rust developer environment

This guide uses <https://rustup.rs> installer and the `rustup` tool to manage the Rust toolchain.
First install and configure `rustup`:

```bash
# Install
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
# Configure
source ~/.cargo/env
```

Configure the Rust toolchain to default to the latest stable version, add nightly and the nightly wasm target:

```bash
rustup default stable
rustup update
rustup update nightly
rustup target add wasm32-unknown-unknown --toolchain nightly
```

## Test your set-up

Now the best way to ensure that you have successfully prepared a computer for Substrate
development is to follow the steps in [our first Substrate tutorial](https://docs.substrate.io/tutorials/v3/create-your-first-substrate-chain/).

## Troubleshooting Substrate builds

Sometimes you can't get the Substrate node template
to compile out of the box. Here are some tips to help you work through that.

### Rust configuration check

To see what Rust toolchain you are presently using, run:

```bash
rustup show
```

This will show something like this (Ubuntu example) output:

```text
Default host: x86_64-unknown-linux-gnu
rustup home:  /home/user/.rustup

installed toolchains
--------------------

stable-x86_64-unknown-linux-gnu (default)
nightly-2020-10-06-x86_64-unknown-linux-gnu
nightly-x86_64-unknown-linux-gnu

installed targets for active toolchain
--------------------------------------

wasm32-unknown-unknown
x86_64-unknown-linux-gnu

active toolchain
----------------

stable-x86_64-unknown-linux-gnu (default)
rustc 1.50.0 (cb75ad5db 2021-02-10)
```

As you can see above, the default toolchain is stable, and the
`nightly-x86_64-unknown-linux-gnu` toolchain as well as its `wasm32-unknown-unknown` target is installed.
You also see that `nightly-2020-10-06-x86_64-unknown-linux-gnu` is installed, but is not used unless explicitly defined as illustrated in the [specify your nightly version](#specifying-nightly-version)
section.

### WebAssembly compilation

Substrate uses [WebAssembly](https://webassembly.org) (Wasm) to produce portable blockchain
runtimes. You will need to configure your Rust compiler to use
[`nightly` builds](https://doc.rust-lang.org/book/appendix-07-nightly-rust.html) to allow you to
compile Substrate runtime code to the Wasm target.

> There are upstream issues in Rust that need to be resolved before all of Substrate can use the stable Rust toolchain.
> [This is our tracking issue](https://github.com/paritytech/substrate/issues/1252) if you're curious as to why and how this will be resolved.

#### Latest nightly for Substrate `master`

Developers who are building Substrate _itself_ should always use the latest bug-free versions of
Rust stable and nightly. This is because the Substrate codebase follows the tip of Rust nightly,
which means that changes in Substrate often depend on upstream changes in the Rust nightly compiler.
To ensure your Rust compiler is always up to date, you should run:

```bash
rustup update
rustup update nightly
rustup target add wasm32-unknown-unknown --toolchain nightly
```

> NOTE: It may be necessary to occasionally rerun `rustup update` if a change in the upstream Substrate
> codebase depends on a new feature of the Rust compiler. When you do this, both your nightly
> and stable toolchains will be pulled to the most recent release, and for nightly, it is
> generally _not_ expected to compile WASM without error (although it very often does).
> Be sure to [specify your nightly version](#specifying-nightly-version) if you get WASM build errors
> from `rustup` and [downgrade nightly as needed](#downgrading-rust-nightly).

#### Rust nightly toolchain

If you want to guarantee that your build works on your computer as you update Rust and other
dependencies, you should use a specific Rust nightly version that is known to be
compatible with the version of Substrate they are using; this version will vary from project to
project and different projects may use different mechanisms to communicate this version to
developers. For instance, the Polkadot client specifies this information in its
[release notes](https://github.com/paritytech/polkadot/releases).

```bash
# Specify the specific nightly toolchain in the date below:
rustup install nightly-<yyyy-MM-dd>
```

#### Wasm toolchain

Now, configure the nightly version to work with the Wasm compilation target:

```bash
rustup target add wasm32-unknown-unknown --toolchain nightly-<yyyy-MM-dd>
```

### Specifying nightly version

Use the `WASM_BUILD_TOOLCHAIN` environment variable to specify the Rust nightly version a Substrate
project should use for Wasm compilation:

```bash
WASM_BUILD_TOOLCHAIN=nightly-<yyyy-MM-dd> cargo build --release
```

> Note that this only builds _the runtime_ with the specified nightly. The rest of project will be
> compiled with **your default toolchain**, i.e. the latest installed stable toolchain.

### Downgrading Rust nightly

If your computer is configured to use the latest Rust nightly and you would like to downgrade to a
specific nightly version, follow these steps:

```bash
rustup uninstall nightly
rustup install nightly-<yyyy-MM-dd>
rustup target add wasm32-unknown-unknown --toolchain nightly-<yyyy-MM-dd>
```

'''
'''--- docs/web3_foundation_grants.svg ---
<svg id="Layer_1" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 750 300"><title>web3 foundation grants</title><path d="M261,129.07v-8.8a7.86,7.86,0,0,0-4.88-7.28L201.48,90.46v4.88l48.67,20a2.05,2.05,0,0,1,1.08,2.66,1.91,1.91,0,0,1-1.08,1.08l-48.67,20.12v19.63l29.33-12.1,19.28,7.95a2,2,0,0,1,1.08,2.65,1.91,1.91,0,0,1-1.08,1.08l-48.61,20.06v31L256.05,187a7.86,7.86,0,0,0,4.88-7.28V159.55a7.87,7.87,0,0,0-4.88-7.29l-19.33-8,19.33-7.95A7.71,7.71,0,0,0,261,129.07Z"/><path d="M306,97.72a3,3,0,0,1,2.82-1.5c2,0,3.68,1.65,3.68,4.48s-1.71,4.48-3.68,4.48a3,3,0,0,1-2.82-1.5v4.1h-1.45V96.36H306Zm4.92,3c0-2-1-3.23-2.47-3.23-1.29,0-2.51,1-2.51,3.23s1.22,3.23,2.51,3.23C310,103.93,310.94,102.75,310.94,100.7Z"/><path d="M317.61,97.82c-1.34,0-2,.75-2,2.64V105h-1.46V96.36h1.42v1.51A2.61,2.61,0,0,1,318,96.32h.43v1.55C318.13,97.85,317.85,97.82,317.61,97.82Z"/><path d="M323.18,105.18c-2,0-4.12-1.36-4.12-4.48s2.12-4.48,4.12-4.48,4.13,1.36,4.13,4.48S325.19,105.18,323.18,105.18Zm2.58-4.48c0-2.29-1.26-3.2-2.58-3.2s-2.57.85-2.57,3.2,1.26,3.2,2.57,3.2S325.76,102.91,325.76,100.7Z"/><path d="M330.34,96.36v9c0,1.79-.37,2.37-2,2.37h-.74v-1.22H328c.75,0,.89-.22.89-1.12V96.36Zm0-1.23h-1.46V93.37h1.46Z"/><path d="M336.16,103.9a2.3,2.3,0,0,0,2.35-1.42H340a3.76,3.76,0,0,1-3.86,2.7c-2.72,0-4.22-2-4.22-4.49a4.14,4.14,0,0,1,4.17-4.47c2.63,0,4.21,2.21,4,4.93H333.5A2.65,2.65,0,0,0,336.16,103.9Zm2.43-4a2.54,2.54,0,0,0-5.07,0Z"/><path d="M347.52,99.24a2.21,2.21,0,0,0-2.23-1.74c-1.29,0-2.48,1-2.48,3.17s1.2,3.23,2.48,3.23a2.28,2.28,0,0,0,2.29-1.73h1.51a3.84,3.84,0,0,1-3.84,3c-2.47,0-4-1.87-4-4.49s1.62-4.47,4.16-4.47a3.58,3.58,0,0,1,3.6,3Z"/><path d="M352.47,94.2v2.16h1.63v1.17h-1.63v5.11c0,.89.07,1.12.9,1.12h.73V105h-1.05c-1.65,0-2-.36-2-2.16V97.53h-1.36V96.36H351V94.2Z"/><path d="M362.43,97.45c-.85,0-1.81.31-1.81,1.09s.48,1,1.31,1.17l1.22.24c1.56.3,2.94.89,2.94,2.56s-1.54,2.67-3.5,2.67a3.47,3.47,0,0,1-3.7-3h1.53a2,2,0,0,0,2.2,1.76c1.1,0,2-.48,2-1.28s-.82-1.23-1.75-1.42l-1.28-.26c-1.17-.24-2.45-.79-2.45-2.39s1.54-2.4,3.45-2.4A3.17,3.17,0,0,1,366,98.88h-1.52A1.84,1.84,0,0,0,362.43,97.45Z"/><path d="M370.4,105.18c-2,0-2.75-1.34-2.75-3.31V96.36h1.45v5.08c0,1.33.23,2.48,1.81,2.48,1.38,0,2.19-1,2.19-2.82V96.36h1.46V105H373.1v-1.23A2.88,2.88,0,0,1,370.4,105.18Z"/><path d="M378.13,97.72a3,3,0,0,1,2.82-1.5c2,0,3.68,1.65,3.68,4.48s-1.72,4.48-3.68,4.48a3,3,0,0,1-2.82-1.5v4.1h-1.46V96.36h1.46Zm4.91,3c0-2-1-3.23-2.46-3.23-1.3,0-2.52,1-2.52,3.23s1.22,3.23,2.52,3.23C382.07,103.93,383,102.75,383,100.7Z"/><path d="M387.7,97.72a3,3,0,0,1,2.82-1.5c2,0,3.68,1.65,3.68,4.48s-1.71,4.48-3.68,4.48a3,3,0,0,1-2.82-1.5v4.1h-1.46V96.36h1.46Zm4.91,3c0-2-1-3.23-2.46-3.23-1.3,0-2.51,1-2.51,3.23s1.21,3.23,2.51,3.23C391.64,103.93,392.61,102.75,392.61,100.7Z"/><path d="M399.45,105.18c-2,0-4.13-1.36-4.13-4.48s2.12-4.48,4.13-4.48a4.49,4.49,0,0,1,0,9ZM402,100.7c0-2.29-1.26-3.2-2.57-3.2s-2.58.85-2.58,3.2,1.26,3.2,2.58,3.2S402,102.91,402,100.7Z"/><path d="M408.67,97.82c-1.34,0-2,.75-2,2.64V105H405.2V96.36h1.43v1.51a2.58,2.58,0,0,1,2.43-1.55h.43v1.55C409.19,97.85,408.91,97.82,408.67,97.82Z"/><path d="M413.06,94.2v2.16h1.64v1.17h-1.64v5.11c0,.89.07,1.12.9,1.12h.74V105h-1.06c-1.65,0-2-.36-2-2.16V97.53h-1.36V96.36h1.36V94.2Z"/><path d="M419.6,103.9a2.32,2.32,0,0,0,2.36-1.42h1.5a3.76,3.76,0,0,1-3.86,2.7c-2.72,0-4.22-2-4.22-4.49a4.15,4.15,0,0,1,4.18-4.47c2.62,0,4.21,2.21,4,4.93H417A2.63,2.63,0,0,0,419.6,103.9Zm2.44-4a2.54,2.54,0,0,0-5.08,0Z"/><path d="M432.63,93.37V105h-1.46v-1.29a3,3,0,0,1-2.82,1.5c-2,0-3.68-1.63-3.68-4.48s1.71-4.48,3.68-4.48a3,3,0,0,1,2.82,1.5V93.37Zm-6.37,7.33c0,2,1,3.23,2.46,3.23,1.3,0,2.51-1,2.51-3.23s-1.21-3.23-2.51-3.23C427.23,97.47,426.26,98.65,426.26,100.7Z"/><path d="M440.11,97.72a3,3,0,0,1,2.82-1.5c2,0,3.68,1.65,3.68,4.48s-1.71,4.48-3.68,4.48a3,3,0,0,1-2.82-1.5V105h-1.46V93.37h1.46Zm4.92,3c0-2-1-3.23-2.47-3.23-1.3,0-2.51,1-2.51,3.23s1.21,3.23,2.51,3.23C444.05,103.93,445,102.75,445,100.7Z"/><path d="M451.26,105.34c-.62,1.88-1.07,2.44-3,2.44h-.76v-1.22h.6c1,0,1.42-.06,1.8-1.41L450,105l-3.11-8.61h1.62l2.19,6.65,2.13-6.65h1.52Z"/><path d="M316.85,125.72l3.53,13.13,3.4-13.13H327l-5.11,17.76h-2.74l-3.93-14.3-3.79,14.3H308.7l-5.12-17.76h3.23l3.4,13.13,3.54-13.13Z"/><path d="M336.43,141.26a4.77,4.77,0,0,0,4.85-2.93h3.1c-.82,3.07-3.63,5.57-7.95,5.57-5.61,0-8.71-4-8.71-9.27,0-5.61,3.76-9.21,8.61-9.21,5.41,0,8.68,4.56,8.28,10.17H331A5.45,5.45,0,0,0,336.43,141.26Zm5-8.25A5.24,5.24,0,0,0,331,133Z"/><path d="M350.72,128.52a6.26,6.26,0,0,1,5.81-3.1c4.06,0,7.59,3.4,7.59,9.24s-3.53,9.24-7.59,9.24a6.26,6.26,0,0,1-5.81-3.1v2.68h-3V119.55h3Zm10.13,6.14c0-4.22-2-6.66-5.08-6.66-2.67,0-5.18,2-5.18,6.66s2.51,6.67,5.18,6.67C358.84,141.33,360.85,138.89,360.85,134.66Z"/><path d="M373.24,132.22h-.5v-2.74h.4c4.16,0,6.37-1.15,6.37-4,0-2.57-2.11-3.89-4.66-3.89a4.83,4.83,0,0,0-5.21,4.65h-3.1c.36-4.22,3.36-7.16,8.38-7.16,4.16,0,7.76,1.65,7.76,6.07a5.89,5.89,0,0,1-3.9,5.55c3.57,1.12,4.56,3.49,4.56,6,0,4.82-4.1,7.16-8.65,7.16-5.61,0-8.19-3.49-8.52-7.49h3.11c.33,2.94,2.07,5,5.44,5,3.17,0,5.41-1.65,5.41-4.62C380.13,133.34,377.06,132.22,373.24,132.22Z"/><path d="M400.4,119.55H402v2.51h-1.49c-1.58,0-1.85.36-1.85,2.21v1.45H402v2.41h-3.34v15.35h-3V128.13h-2.48v-2.41h2.48v-1.29C395.61,120.74,396.37,119.55,400.4,119.55Z"/><path d="M411.53,143.9c-4.12,0-8.51-2.8-8.51-9.24s4.39-9.24,8.51-9.24,8.52,2.81,8.52,9.24S415.66,143.9,411.53,143.9Zm5.32-9.24c0-4.72-2.61-6.6-5.32-6.6s-5.31,1.75-5.31,6.6,2.61,6.6,5.31,6.6S416.85,139.22,416.85,134.66Z"/><path d="M428.73,143.9c-4.12,0-5.67-2.77-5.67-6.83V125.72h3v10.46c0,2.74.46,5.12,3.73,5.12,2.84,0,4.52-2,4.52-5.81v-9.77h3v17.76h-3v-2.55A6,6,0,0,1,428.73,143.9Z"/><path d="M450.24,125.42c4.3,0,5.85,2.77,5.85,6.83v11.23h-3V133.14c0-2.73-.46-5.11-3.89-5.11-2.91,0-4.69,2-4.69,5.81v9.64h-3V125.72h3v2.67A6.18,6.18,0,0,1,450.24,125.42Z"/><path d="M475.46,119.55v23.93h-3V140.8a6.26,6.26,0,0,1-5.81,3.1c-4.06,0-7.59-3.36-7.59-9.24s3.53-9.24,7.59-9.24a6.26,6.26,0,0,1,5.81,3.1v-9Zm-13.13,15.11c0,4.23,2,6.67,5.08,6.67,2.67,0,5.18-2,5.18-6.67s-2.51-6.66-5.18-6.66C464.34,128,462.33,130.44,462.33,134.66Z"/><path d="M490.6,132.55v-.43c0-3.23-1.82-4.32-4-4.32-2.47,0-3.92,1.35-4.06,3.53h-3.1c.3-3.83,3.66-6,7.13-6,4.89,0,7.1,2.34,7.06,7.32l0,4.1a33.07,33.07,0,0,0,.46,6.7h-3a18.6,18.6,0,0,1-.23-2.45c-1.09,1.82-2.94,2.87-6.08,2.87-3.33,0-6.1-1.84-6.1-5.11C478.59,134.6,483.31,133.38,490.6,132.55Zm-8.68,6.17c0,1.69,1.29,2.81,3.43,2.81,2.81,0,5.48-1.29,5.48-5.48v-1.12C485.39,135.49,481.92,136.28,481.92,138.72Z"/><path d="M501.28,121.26v4.46h3.37v2.41h-3.37v10.53c0,1.85.14,2.31,1.85,2.31h1.52v2.51h-2.18c-3.4,0-4.19-.76-4.19-4.46V128.13h-2.8v-2.41h2.8v-4.46Z"/><path d="M510.52,123.18h-3v-3.63h3Zm0,20.3h-3V125.72h3Z"/><path d="M522.23,143.9c-4.13,0-8.52-2.8-8.52-9.24s4.39-9.24,8.52-9.24,8.51,2.81,8.51,9.24S526.35,143.9,522.23,143.9Zm5.31-9.24c0-4.72-2.61-6.6-5.31-6.6s-5.32,1.75-5.32,6.6,2.61,6.6,5.32,6.6S527.54,139.22,527.54,134.66Z"/><path d="M542.68,125.42c4.29,0,5.84,2.77,5.84,6.83v11.23h-3V133.14c0-2.73-.46-5.11-3.9-5.11-2.9,0-4.68,2-4.68,5.81v9.64h-3V125.72h3v2.67A6.18,6.18,0,0,1,542.68,125.42Z"/><path d="M320.74,162.48v15.38c0,3.63-.66,5.12-1.68,6.24a8,8,0,0,1-6.14,2.34c-4,0-6.73-1.85-7.29-5.44h3.2c.39,1.58,1.35,2.8,4.12,2.8a4.72,4.72,0,0,0,3.63-1.32c.66-.69,1.16-1.52,1.16-3.93v-1.68a6,6,0,0,1-5.64,3.07c-3.93,0-7.53-3.17-7.53-8.88s3.6-8.88,7.53-8.88a6,6,0,0,1,5.64,3.11v-2.81Zm-12.9,8.58c0,4.06,2.08,6.34,5,6.34,2.68,0,5-1.82,5-6.34s-2.34-6.3-5-6.3C309.92,164.76,307.84,167,307.84,171.06Z"/><path d="M332.09,165.49c-2.77,0-4.16,1.55-4.16,5.44v9.31h-3V162.48h2.93v3.1a5.38,5.38,0,0,1,5-3.2,6.85,6.85,0,0,1,.89,0v3.2A15.79,15.79,0,0,0,332.09,165.49Z"/><path d="M347,169.31v-.43c0-3.23-1.82-4.32-4-4.32-2.47,0-3.92,1.35-4.06,3.53h-3.1c.3-3.83,3.66-6,7.13-6,4.88,0,7.1,2.34,7.06,7.33l0,4.09a33.07,33.07,0,0,0,.46,6.7h-3a20.21,20.21,0,0,1-.24-2.44c-1.08,1.81-2.93,2.87-6.07,2.87-3.33,0-6.1-1.85-6.1-5.12C335,171.36,339.68,170.14,347,169.31Zm-8.68,6.18c0,1.68,1.29,2.8,3.43,2.8,2.81,0,5.48-1.29,5.48-5.48v-1.12C341.75,172.25,338.29,173,338.29,175.49Z"/><path d="M362.71,162.18c4.29,0,5.84,2.78,5.84,6.84v11.22h-3V169.91c0-2.74-.46-5.12-3.9-5.12-2.9,0-4.68,2-4.68,5.81v9.64h-3V162.48h3v2.67A6.18,6.18,0,0,1,362.71,162.18Z"/><path d="M376.3,158v4.45h3.37v2.41H376.3v10.53c0,1.85.13,2.31,1.85,2.31h1.52v2.51h-2.18c-3.4,0-4.19-.76-4.19-4.46V164.89h-2.81v-2.41h2.81V158Z"/><path d="M388.56,164.73c-1.75,0-3.73.62-3.73,2.24,0,1.42,1,2.08,2.71,2.41l2.51.49c3.23.63,6.07,1.85,6.07,5.29s-3.17,5.51-7.23,5.51c-4.65,0-7.29-3.07-7.62-6.17h3.17a4.16,4.16,0,0,0,4.52,3.63c2.27,0,4.12-1,4.12-2.64s-1.68-2.55-3.6-2.94l-2.64-.53c-2.4-.5-5-1.62-5-4.92,0-3.13,3.17-4.95,7.1-4.95s6.44,2.15,7,5.51h-3.14C392.29,165.55,390.64,164.73,388.56,164.73Z"/><path d="M410.6,165.29a6.27,6.27,0,0,1,5.81-3.11c4.06,0,7.59,3.4,7.59,9.25s-3.53,9.24-7.59,9.24a6.25,6.25,0,0,1-5.81-3.11V186h-3V162.48h3Zm10.14,6.14c0-4.23-2-6.67-5.09-6.67-2.67,0-5.18,2-5.18,6.67s2.51,6.66,5.18,6.66C418.72,178.09,420.74,175.65,420.74,171.43Z"/><path d="M434.34,165.49c-2.77,0-4.16,1.55-4.16,5.44v9.31h-3V162.48h2.94v3.1a5.36,5.36,0,0,1,5-3.2,6.85,6.85,0,0,1,.89,0v3.2A15.6,15.6,0,0,0,434.34,165.49Z"/><path d="M445.66,180.67c-4.13,0-8.52-2.81-8.52-9.24s4.39-9.25,8.52-9.25,8.51,2.81,8.51,9.25S449.78,180.67,445.66,180.67Zm5.31-9.24c0-4.72-2.61-6.61-5.31-6.61s-5.32,1.75-5.32,6.61,2.61,6.6,5.32,6.6S451,176,451,171.43Z"/><path d="M472.48,162.48v15.38c0,3.63-.66,5.12-1.68,6.24a8,8,0,0,1-6.14,2.34c-4,0-6.73-1.85-7.3-5.44h3.21c.39,1.58,1.35,2.8,4.12,2.8a4.72,4.72,0,0,0,3.63-1.32c.66-.69,1.16-1.52,1.16-3.93v-1.68a6,6,0,0,1-5.65,3.07c-3.92,0-7.52-3.17-7.52-8.88s3.6-8.88,7.52-8.88a6,6,0,0,1,5.65,3.11v-2.81Zm-12.9,8.58c0,4.06,2.07,6.34,5,6.34,2.68,0,5-1.82,5-6.34s-2.34-6.3-5-6.3C461.65,164.76,459.58,167,459.58,171.06Z"/><path d="M483.83,165.49c-2.77,0-4.16,1.55-4.16,5.44v9.31h-3V162.48h2.93v3.1a5.37,5.37,0,0,1,5-3.2,6.85,6.85,0,0,1,.89,0v3.2A16,16,0,0,0,483.83,165.49Z"/><path d="M498.71,169.31v-.43c0-3.23-1.82-4.32-4-4.32-2.47,0-3.93,1.35-4.06,3.53h-3.1c.3-3.83,3.66-6,7.13-6,4.88,0,7.09,2.34,7.06,7.33l0,4.09a33.07,33.07,0,0,0,.46,6.7h-3a20.52,20.52,0,0,1-.23-2.44c-1.09,1.81-2.93,2.87-6.07,2.87-3.33,0-6.11-1.85-6.11-5.12C486.69,171.36,491.41,170.14,498.71,169.31ZM490,175.49c0,1.68,1.28,2.8,3.43,2.8,2.81,0,5.48-1.29,5.48-5.48v-1.12C493.49,172.25,490,173,490,175.49Z"/><path d="M505.7,180.24V162.48h3v2.67a5.88,5.88,0,0,1,5.34-3c2.71,0,4.33,1.19,5.12,3.14a6.72,6.72,0,0,1,6-3.14c4.13,0,5.74,2.78,5.74,6.84v11.22h-3V169.91c0-2.74-.53-5.12-3.79-5.12-2.58,0-4.3,2-4.3,5.81v9.64h-3V169.91c0-2.74-.53-5.12-3.79-5.12-2.58,0-4.29,2-4.29,5.81v9.64Z"/></svg>
'''
'''--- node/Cargo.toml ---
[package]
name = "node-template"
version = "4.0.0-dev"
description = "A fresh FRAME-based Substrate node, ready for hacking."
authors = ["Substrate DevHub <https://github.com/substrate-developer-hub>"]
homepage = "https://substrate.io/"
edition = "2021"
license = "MIT-0"
publish = false
repository = "https://github.com/substrate-developer-hub/substrate-node-template/"
build = "build.rs"

[package.metadata.docs.rs]
targets = ["x86_64-unknown-linux-gnu"]

[[bin]]
name = "node-template"

[dependencies]
clap = { version = "4.0.9", features = ["derive"] }
futures = { version = "0.3.21", features = ["thread-pool"]}

sc-cli = { version = "0.10.0-dev", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
sp-core = { version = "7.0.0", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
sc-executor = { version = "0.10.0-dev", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
sc-service = { version = "0.10.0-dev", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
sc-telemetry = { version = "4.0.0-dev", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
sc-keystore = { version = "4.0.0-dev", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
sc-transaction-pool = { version = "4.0.0-dev", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
sc-transaction-pool-api = { version = "4.0.0-dev", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
sc-consensus-aura = { version = "0.10.0-dev", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
sp-consensus-aura = { version = "0.10.0-dev", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
sp-consensus = { version = "0.10.0-dev", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
sc-consensus = { version = "0.10.0-dev", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
sc-consensus-grandpa = { version = "0.10.0-dev", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
sp-consensus-grandpa = { version = "4.0.0-dev", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
sc-client-api = { version = "4.0.0-dev", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
sp-runtime = { version = "7.0.0", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
sp-io = { version = "7.0.0", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
sp-timestamp = { version = "4.0.0-dev", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
sp-inherents = { version = "4.0.0-dev", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
sp-keyring = { version = "7.0.0", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
frame-system = { version = "4.0.0-dev", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
pallet-transaction-payment = { version = "4.0.0-dev", default-features = false, git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }

# These dependencies are used for the node template's RPCs
jsonrpsee = { version = "0.16.2", features = ["server"] }
sc-rpc = { version = "4.0.0-dev", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
sp-api = { version = "4.0.0-dev", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
sc-rpc-api = { version = "0.10.0-dev", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
sp-blockchain = { version = "4.0.0-dev", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
sp-block-builder = { version = "4.0.0-dev", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
sc-basic-authorship = { version = "0.10.0-dev", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
substrate-frame-rpc-system = { version = "4.0.0-dev", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
pallet-transaction-payment-rpc = { version = "4.0.0-dev", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }

# These dependencies are used for runtime benchmarking
frame-benchmarking = { version = "4.0.0-dev", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
frame-benchmarking-cli = { version = "4.0.0-dev", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }

# Local Dependencies
node-template-runtime = { version = "4.0.0-dev", path = "../runtime/node-runtime" }

# CLI-specific dependencies
try-runtime-cli = { version = "0.10.0-dev", optional = true, git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }

# New rpc
profile-validation-runtime-api = {path="../pallets/profile-validation/profile-validation-runtime-api", default-features = false}
profile-validation-rpc = { path="../pallets/profile-validation/profile-validation-rpc", default-features = false}

[build-dependencies]
substrate-build-script-utils = { version = "3.0.0", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }

[features]
default = []
# Dependencies that are only required if runtime benchmarking should be build.
runtime-benchmarks = [
	"node-template-runtime/runtime-benchmarks",
	"frame-benchmarking/runtime-benchmarks",
	"frame-benchmarking-cli/runtime-benchmarks",
]
# Enable features that allow the runtime to be tried and debugged. Name might be subject to change
# in the near future.
try-runtime = ["node-template-runtime/try-runtime", "try-runtime-cli/try-runtime"]

'''
'''--- node/build.rs ---
use substrate_build_script_utils::{generate_cargo_keys, rerun_if_git_head_changed};

fn main() {
	generate_cargo_keys();

	rerun_if_git_head_changed();
}

'''
'''--- node/src/benchmarking.rs ---
//! Setup code for [`super::command`] which would otherwise bloat that module.
//!
//! Should only be used for benchmarking as it may break in other contexts.

use crate::service::FullClient;

use node_template_runtime as runtime;
use runtime::{AccountId, Balance, BalancesCall, SystemCall};
use sc_cli::Result;
use sc_client_api::BlockBackend;
use sp_core::{Encode, Pair};
use sp_inherents::{InherentData, InherentDataProvider};
use sp_keyring::Sr25519Keyring;
use sp_runtime::{OpaqueExtrinsic, SaturatedConversion};

use std::{sync::Arc, time::Duration};

/// Generates extrinsics for the `benchmark overhead` command.
///
/// Note: Should only be used for benchmarking.
pub struct RemarkBuilder {
	client: Arc<FullClient>,
}

impl RemarkBuilder {
	/// Creates a new [`Self`] from the given client.
	pub fn new(client: Arc<FullClient>) -> Self {
		Self { client }
	}
}

impl frame_benchmarking_cli::ExtrinsicBuilder for RemarkBuilder {
	fn pallet(&self) -> &str {
		"system"
	}

	fn extrinsic(&self) -> &str {
		"remark"
	}

	fn build(&self, nonce: u32) -> std::result::Result<OpaqueExtrinsic, &'static str> {
		let acc = Sr25519Keyring::Bob.pair();
		let extrinsic: OpaqueExtrinsic = create_benchmark_extrinsic(
			self.client.as_ref(),
			acc,
			SystemCall::remark { remark: vec![] }.into(),
			nonce,
		)
		.into();

		Ok(extrinsic)
	}
}

/// Generates `Balances::TransferKeepAlive` extrinsics for the benchmarks.
///
/// Note: Should only be used for benchmarking.
pub struct TransferKeepAliveBuilder {
	client: Arc<FullClient>,
	dest: AccountId,
	value: Balance,
}

impl TransferKeepAliveBuilder {
	/// Creates a new [`Self`] from the given client.
	pub fn new(client: Arc<FullClient>, dest: AccountId, value: Balance) -> Self {
		Self { client, dest, value }
	}
}

impl frame_benchmarking_cli::ExtrinsicBuilder for TransferKeepAliveBuilder {
	fn pallet(&self) -> &str {
		"balances"
	}

	fn extrinsic(&self) -> &str {
		"transfer_keep_alive"
	}

	fn build(&self, nonce: u32) -> std::result::Result<OpaqueExtrinsic, &'static str> {
		let acc = Sr25519Keyring::Bob.pair();
		let extrinsic: OpaqueExtrinsic = create_benchmark_extrinsic(
			self.client.as_ref(),
			acc,
			BalancesCall::transfer_keep_alive {
				dest: self.dest.clone().into(),
				value: self.value.into(),
			}
			.into(),
			nonce,
		)
		.into();

		Ok(extrinsic)
	}
}

/// Create a transaction using the given `call`.
///
/// Note: Should only be used for benchmarking.
pub fn create_benchmark_extrinsic(
	client: &FullClient,
	sender: sp_core::sr25519::Pair,
	call: runtime::RuntimeCall,
	nonce: u32,
) -> runtime::UncheckedExtrinsic {
	let genesis_hash = client.block_hash(0).ok().flatten().expect("Genesis block exists; qed");
	let best_hash = client.chain_info().best_hash;
	let best_block = client.chain_info().best_number;

	let period = runtime::BlockHashCount::get()
		.checked_next_power_of_two()
		.map(|c| c / 2)
		.unwrap_or(2) as u64;
	let extra: runtime::SignedExtra = (
		frame_system::CheckNonZeroSender::<runtime::Runtime>::new(),
		frame_system::CheckSpecVersion::<runtime::Runtime>::new(),
		frame_system::CheckTxVersion::<runtime::Runtime>::new(),
		frame_system::CheckGenesis::<runtime::Runtime>::new(),
		frame_system::CheckEra::<runtime::Runtime>::from(sp_runtime::generic::Era::mortal(
			period,
			best_block.saturated_into(),
		)),
		frame_system::CheckNonce::<runtime::Runtime>::from(nonce),
		frame_system::CheckWeight::<runtime::Runtime>::new(),
		pallet_transaction_payment::ChargeTransactionPayment::<runtime::Runtime>::from(0),
	);

	let raw_payload = runtime::SignedPayload::from_raw(
		call.clone(),
		extra.clone(),
		(
			(),
			runtime::VERSION.spec_version,
			runtime::VERSION.transaction_version,
			genesis_hash,
			best_hash,
			(),
			(),
			(),
		),
	);
	let signature = raw_payload.using_encoded(|e| sender.sign(e));

	runtime::UncheckedExtrinsic::new_signed(
		call.clone(),
		sp_runtime::AccountId32::from(sender.public()).into(),
		runtime::Signature::Sr25519(signature.clone()),
		extra.clone(),
	)
}

/// Generates inherent data for the `benchmark overhead` command.
///
/// Note: Should only be used for benchmarking.
pub fn inherent_benchmark_data() -> Result<InherentData> {
	let mut inherent_data = InherentData::new();
	let d = Duration::from_millis(0);
	let timestamp = sp_timestamp::InherentDataProvider::new(d.into());

	futures::executor::block_on(timestamp.provide_inherent_data(&mut inherent_data))
		.map_err(|e| format!("creating inherent data: {:?}", e))?;
	Ok(inherent_data)
}

'''
'''--- node/src/chain_spec.rs ---
use node_template_runtime::{
	AccountId, AuraConfig, BalancesConfig, GenesisConfig, GrandpaConfig, Signature, SudoConfig,
	SystemConfig, WASM_BINARY, SharedStorageConfig,
};
use sc_service::ChainType;
use sp_consensus_aura::sr25519::AuthorityId as AuraId;
use sp_consensus_grandpa::AuthorityId as GrandpaId;
use sp_core::{sr25519, Pair, Public};
use sp_runtime::traits::{IdentifyAccount, Verify};

// The URL for the telemetry server.
// const STAGING_TELEMETRY_URL: &str = "wss://telemetry.polkadot.io/submit/";

/// Specialized `ChainSpec`. This is a specialization of the general Substrate ChainSpec type.
pub type ChainSpec = sc_service::GenericChainSpec<GenesisConfig>;

/// Generate a crypto pair from seed.
pub fn get_from_seed<TPublic: Public>(seed: &str) -> <TPublic::Pair as Pair>::Public {
	TPublic::Pair::from_string(&format!("//{}", seed), None)
		.expect("static values are valid; qed")
		.public()
}

type AccountPublic = <Signature as Verify>::Signer;

/// Generate an account ID from seed.
pub fn get_account_id_from_seed<TPublic: Public>(seed: &str) -> AccountId
where
	AccountPublic: From<<TPublic::Pair as Pair>::Public>,
{
	AccountPublic::from(get_from_seed::<TPublic>(seed)).into_account()
}

/// Generate an Aura authority key.
pub fn authority_keys_from_seed(s: &str) -> (AuraId, GrandpaId) {
	(get_from_seed::<AuraId>(s), get_from_seed::<GrandpaId>(s))
}

pub fn development_config() -> Result<ChainSpec, String> {
	let wasm_binary = WASM_BINARY.ok_or_else(|| "Development wasm not available".to_string())?;

	Ok(ChainSpec::from_genesis(
		// Name
		"Development",
		// ID
		"dev",
		ChainType::Development,
		move || {
			testnet_genesis(
				wasm_binary,
				// Initial PoA authorities
				vec![authority_keys_from_seed("Alice")],
				// Sudo account
				get_account_id_from_seed::<sr25519::Public>("Alice"),
				// Pre-funded accounts
				vec![
					get_account_id_from_seed::<sr25519::Public>("Alice"),
					get_account_id_from_seed::<sr25519::Public>("Bob"),
					get_account_id_from_seed::<sr25519::Public>("Alice//stash"),
					get_account_id_from_seed::<sr25519::Public>("Bob//stash"),
				],
				true,
			)
		},
		// Bootnodes
		vec![],
		// Telemetry
		None,
		// Protocol ID
		None,
		None,
		// Properties
		None,
		// Extensions
		None,
	))
}

pub fn local_testnet_config() -> Result<ChainSpec, String> {
	let wasm_binary = WASM_BINARY.ok_or_else(|| "Development wasm not available".to_string())?;

	Ok(ChainSpec::from_genesis(
		// Name
		"Local Testnet",
		// ID
		"local_testnet",
		ChainType::Local,
		move || {
			testnet_genesis(
				wasm_binary,
				// Initial PoA authorities
				vec![authority_keys_from_seed("Alice"), authority_keys_from_seed("Bob")],
				// Sudo account
				get_account_id_from_seed::<sr25519::Public>("Alice"),
				// Pre-funded accounts
				vec![
					get_account_id_from_seed::<sr25519::Public>("Alice"),
					get_account_id_from_seed::<sr25519::Public>("Bob"),
					get_account_id_from_seed::<sr25519::Public>("Charlie"),
					get_account_id_from_seed::<sr25519::Public>("Dave"),
					get_account_id_from_seed::<sr25519::Public>("Eve"),
					get_account_id_from_seed::<sr25519::Public>("Ferdie"),
					get_account_id_from_seed::<sr25519::Public>("Alice//stash"),
					get_account_id_from_seed::<sr25519::Public>("Bob//stash"),
					get_account_id_from_seed::<sr25519::Public>("Charlie//stash"),
					get_account_id_from_seed::<sr25519::Public>("Dave//stash"),
					get_account_id_from_seed::<sr25519::Public>("Eve//stash"),
					get_account_id_from_seed::<sr25519::Public>("Ferdie//stash"),
				],
				true,
			)
		},
		// Bootnodes
		vec![],
		// Telemetry
		None,
		// Protocol ID
		None,
		// Properties
		None,
		None,
		// Extensions
		None,
	))
}

/// Configure initial storage state for FRAME modules.
fn testnet_genesis(
	wasm_binary: &[u8],
	initial_authorities: Vec<(AuraId, GrandpaId)>,
	root_key: AccountId,
	endowed_accounts: Vec<AccountId>,
	_enable_println: bool,
) -> GenesisConfig {
	GenesisConfig {
		system: SystemConfig {
			// Add Wasm runtime to storage.
			code: wasm_binary.to_vec(),
		},
		balances: BalancesConfig {
			// Configure endowed accounts with initial balance of 1 << 60.
			balances: endowed_accounts.iter().cloned().map(|k| (k, 1 << 60)).collect(),
		},
		aura: AuraConfig {
			authorities: initial_authorities.iter().map(|x| (x.0.clone())).collect(),
		},
		grandpa: GrandpaConfig {
			authorities: initial_authorities.iter().map(|x| (x.1.clone(), 1)).collect(),
		},
		sudo: SudoConfig {
			// Assign network admin rights.
			key: Some(root_key),
		},
		transaction_payment: Default::default(),
		shared_storage: SharedStorageConfig {
			approved_citizen_address: endowed_accounts,
		},
	}
}

'''
'''--- node/src/cli.rs ---
use sc_cli::RunCmd;

#[derive(Debug, clap::Parser)]
pub struct Cli {
	#[command(subcommand)]
	pub subcommand: Option<Subcommand>,

	#[clap(flatten)]
	pub run: RunCmd,
}

#[derive(Debug, clap::Subcommand)]
pub enum Subcommand {
	/// Key management cli utilities
	#[command(subcommand)]
	Key(sc_cli::KeySubcommand),

	/// Build a chain specification.
	BuildSpec(sc_cli::BuildSpecCmd),

	/// Validate blocks.
	CheckBlock(sc_cli::CheckBlockCmd),

	/// Export blocks.
	ExportBlocks(sc_cli::ExportBlocksCmd),

	/// Export the state of a given block into a chain spec.
	ExportState(sc_cli::ExportStateCmd),

	/// Import blocks.
	ImportBlocks(sc_cli::ImportBlocksCmd),

	/// Remove the whole chain.
	PurgeChain(sc_cli::PurgeChainCmd),

	/// Revert the chain to a previous state.
	Revert(sc_cli::RevertCmd),

	/// Sub-commands concerned with benchmarking.
	#[command(subcommand)]
	Benchmark(frame_benchmarking_cli::BenchmarkCmd),

	/// Try some command against runtime state.
	#[cfg(feature = "try-runtime")]
	TryRuntime(try_runtime_cli::TryRuntimeCmd),

	/// Try some command against runtime state. Note: `try-runtime` feature must be enabled.
	#[cfg(not(feature = "try-runtime"))]
	TryRuntime,

	/// Db meta columns information.
	ChainInfo(sc_cli::ChainInfoCmd),
}

'''
'''--- node/src/command.rs ---
use crate::{
	benchmarking::{inherent_benchmark_data, RemarkBuilder, TransferKeepAliveBuilder},
	chain_spec,
	cli::{Cli, Subcommand},
	service,
};
use frame_benchmarking_cli::{BenchmarkCmd, ExtrinsicFactory, SUBSTRATE_REFERENCE_HARDWARE};
use node_template_runtime::{Block, EXISTENTIAL_DEPOSIT};
use sc_cli::{ChainSpec, RuntimeVersion, SubstrateCli};
use sc_service::PartialComponents;
use sp_keyring::Sr25519Keyring;

#[cfg(feature = "try-runtime")]
use try_runtime_cli::block_building_info::timestamp_with_aura_info;

impl SubstrateCli for Cli {
	fn impl_name() -> String {
		"Substrate Node".into()
	}

	fn impl_version() -> String {
		env!("SUBSTRATE_CLI_IMPL_VERSION").into()
	}

	fn description() -> String {
		env!("CARGO_PKG_DESCRIPTION").into()
	}

	fn author() -> String {
		env!("CARGO_PKG_AUTHORS").into()
	}

	fn support_url() -> String {
		"support.anonymous.an".into()
	}

	fn copyright_start_year() -> i32 {
		2017
	}

	fn load_spec(&self, id: &str) -> Result<Box<dyn sc_service::ChainSpec>, String> {
		Ok(match id {
			"dev" => Box::new(chain_spec::development_config()?),
			"" | "local" => Box::new(chain_spec::local_testnet_config()?),
			path =>
				Box::new(chain_spec::ChainSpec::from_json_file(std::path::PathBuf::from(path))?),
		})
	}

	fn native_runtime_version(_: &Box<dyn ChainSpec>) -> &'static RuntimeVersion {
		&node_template_runtime::VERSION
	}
}

/// Parse and run command line arguments
pub fn run() -> sc_cli::Result<()> {
	let cli = Cli::from_args();

	match &cli.subcommand {
		Some(Subcommand::Key(cmd)) => cmd.run(&cli),
		Some(Subcommand::BuildSpec(cmd)) => {
			let runner = cli.create_runner(cmd)?;
			runner.sync_run(|config| cmd.run(config.chain_spec, config.network))
		},
		Some(Subcommand::CheckBlock(cmd)) => {
			let runner = cli.create_runner(cmd)?;
			runner.async_run(|config| {
				let PartialComponents { client, task_manager, import_queue, .. } =
					service::new_partial(&config)?;
				Ok((cmd.run(client, import_queue), task_manager))
			})
		},
		Some(Subcommand::ExportBlocks(cmd)) => {
			let runner = cli.create_runner(cmd)?;
			runner.async_run(|config| {
				let PartialComponents { client, task_manager, .. } = service::new_partial(&config)?;
				Ok((cmd.run(client, config.database), task_manager))
			})
		},
		Some(Subcommand::ExportState(cmd)) => {
			let runner = cli.create_runner(cmd)?;
			runner.async_run(|config| {
				let PartialComponents { client, task_manager, .. } = service::new_partial(&config)?;
				Ok((cmd.run(client, config.chain_spec), task_manager))
			})
		},
		Some(Subcommand::ImportBlocks(cmd)) => {
			let runner = cli.create_runner(cmd)?;
			runner.async_run(|config| {
				let PartialComponents { client, task_manager, import_queue, .. } =
					service::new_partial(&config)?;
				Ok((cmd.run(client, import_queue), task_manager))
			})
		},
		Some(Subcommand::PurgeChain(cmd)) => {
			let runner = cli.create_runner(cmd)?;
			runner.sync_run(|config| cmd.run(config.database))
		},
		Some(Subcommand::Revert(cmd)) => {
			let runner = cli.create_runner(cmd)?;
			runner.async_run(|config| {
				let PartialComponents { client, task_manager, backend, .. } =
					service::new_partial(&config)?;
				let aux_revert = Box::new(|client, _, blocks| {
					sc_consensus_grandpa::revert(client, blocks)?;
					Ok(())
				});
				Ok((cmd.run(client, backend, Some(aux_revert)), task_manager))
			})
		},
		Some(Subcommand::Benchmark(cmd)) => {
			let runner = cli.create_runner(cmd)?;

			runner.sync_run(|config| {
				// This switch needs to be in the client, since the client decides
				// which sub-commands it wants to support.
				match cmd {
					BenchmarkCmd::Pallet(cmd) => {
						if !cfg!(feature = "runtime-benchmarks") {
							return Err(
								"Runtime benchmarking wasn't enabled when building the node. \
							You can enable it with `--features runtime-benchmarks`."
									.into(),
							)
						}

						cmd.run::<Block, service::ExecutorDispatch>(config)
					},
					BenchmarkCmd::Block(cmd) => {
						let PartialComponents { client, .. } = service::new_partial(&config)?;
						cmd.run(client)
					},
					#[cfg(not(feature = "runtime-benchmarks"))]
					BenchmarkCmd::Storage(_) => Err(
						"Storage benchmarking can be enabled with `--features runtime-benchmarks`."
							.into(),
					),
					#[cfg(feature = "runtime-benchmarks")]
					BenchmarkCmd::Storage(cmd) => {
						let PartialComponents { client, backend, .. } =
							service::new_partial(&config)?;
						let db = backend.expose_db();
						let storage = backend.expose_storage();

						cmd.run(config, client, db, storage)
					},
					BenchmarkCmd::Overhead(cmd) => {
						let PartialComponents { client, .. } = service::new_partial(&config)?;
						let ext_builder = RemarkBuilder::new(client.clone());

						cmd.run(
							config,
							client,
							inherent_benchmark_data()?,
							Vec::new(),
							&ext_builder,
						)
					},
					BenchmarkCmd::Extrinsic(cmd) => {
						let PartialComponents { client, .. } = service::new_partial(&config)?;
						// Register the *Remark* and *TKA* builders.
						let ext_factory = ExtrinsicFactory(vec![
							Box::new(RemarkBuilder::new(client.clone())),
							Box::new(TransferKeepAliveBuilder::new(
								client.clone(),
								Sr25519Keyring::Alice.to_account_id(),
								EXISTENTIAL_DEPOSIT,
							)),
						]);

						cmd.run(client, inherent_benchmark_data()?, Vec::new(), &ext_factory)
					},
					BenchmarkCmd::Machine(cmd) =>
						cmd.run(&config, SUBSTRATE_REFERENCE_HARDWARE.clone()),
				}
			})
		},
		#[cfg(feature = "try-runtime")]
		Some(Subcommand::TryRuntime(cmd)) => {
			use crate::service::ExecutorDispatch;
			use sc_executor::{sp_wasm_interface::ExtendedHostFunctions, NativeExecutionDispatch};
			let runner = cli.create_runner(cmd)?;
			runner.async_run(|config| {
				// we don't need any of the components of new_partial, just a runtime, or a task
				// manager to do `async_run`.
				let registry = config.prometheus_config.as_ref().map(|cfg| &cfg.registry);
				let task_manager =
					sc_service::TaskManager::new(config.tokio_handle.clone(), registry)
						.map_err(|e| sc_cli::Error::Service(sc_service::Error::Prometheus(e)))?;
				let info_provider = timestamp_with_aura_info(6000);

				Ok((
					cmd.run::<Block, ExtendedHostFunctions<
						sp_io::SubstrateHostFunctions,
						<ExecutorDispatch as NativeExecutionDispatch>::ExtendHostFunctions,
					>, _>(Some(info_provider)),
					task_manager,
				))
			})
		},
		#[cfg(not(feature = "try-runtime"))]
		Some(Subcommand::TryRuntime) => Err("TryRuntime wasn't enabled when building the node. \
				You can enable it with `--features try-runtime`."
			.into()),
		Some(Subcommand::ChainInfo(cmd)) => {
			let runner = cli.create_runner(cmd)?;
			runner.sync_run(|config| cmd.run::<Block>(&config))
		},
		None => {
			let runner = cli.create_runner(&cli.run)?;
			runner.run_node_until_exit(|config| async move {
				service::new_full(config).map_err(sc_cli::Error::Service)
			})
		},
	}
}

'''
'''--- node/src/lib.rs ---
pub mod chain_spec;
pub mod rpc;
pub mod service;

'''
'''--- node/src/main.rs ---
//! Substrate Node Template CLI library.
#![warn(missing_docs)]

mod chain_spec;
#[macro_use]
mod service;
mod benchmarking;
mod cli;
mod command;
mod rpc;

fn main() -> sc_cli::Result<()> {
	command::run()
}

'''
'''--- node/src/rpc.rs ---
//! A collection of node-specific RPC methods.
//! Substrate provides the `sc-rpc` crate, which defines the core RPC layer
//! used by Substrate nodes. This file extends those RPC definitions with
//! capabilities that are specific to this project's runtime configuration.

#![warn(missing_docs)]

use std::sync::Arc;

use jsonrpsee::RpcModule;
use node_template_runtime::{opaque::Block, AccountId, Balance, Index};
use sc_transaction_pool_api::TransactionPool;
use sp_api::ProvideRuntimeApi;
use sp_block_builder::BlockBuilder;
use sp_blockchain::{Error as BlockChainError, HeaderBackend, HeaderMetadata};

pub use sc_rpc_api::DenyUnsafe;

/// Full client dependencies.
pub struct FullDeps<C, P> {
	/// The client instance to use.
	pub client: Arc<C>,
	/// Transaction pool instance.
	pub pool: Arc<P>,
	/// Whether to deny unsafe calls
	pub deny_unsafe: DenyUnsafe,
}

/// Instantiate all full RPC extensions.
pub fn create_full<C, P>(
	deps: FullDeps<C, P>,
) -> Result<RpcModule<()>, Box<dyn std::error::Error + Send + Sync>>
where
	C: ProvideRuntimeApi<Block>,
	C: HeaderBackend<Block> + HeaderMetadata<Block, Error = BlockChainError> + 'static,
	C: Send + Sync + 'static,
	C::Api: substrate_frame_rpc_system::AccountNonceApi<Block, AccountId, Index>,
	C::Api: pallet_transaction_payment_rpc::TransactionPaymentRuntimeApi<Block, Balance>,
	C::Api: profile_validation_runtime_api::ProfileValidationApi<Block, AccountId>,
	C::Api: BlockBuilder<Block>,
	P: TransactionPool + 'static,

{
	use pallet_transaction_payment_rpc::{TransactionPayment, TransactionPaymentApiServer};
	use profile_validation_rpc::ProfileValidationApiServer;
	use substrate_frame_rpc_system::{System, SystemApiServer};

	let mut module = RpcModule::new(());
	let FullDeps { client, pool, deny_unsafe } = deps;

	module.merge(System::new(client.clone(), pool.clone(), deny_unsafe).into_rpc())?;
	module.merge(TransactionPayment::new(client.clone()).into_rpc())?;
	module.merge(profile_validation_rpc::ProfileValidation::new(client.clone()).into_rpc())?;

	// Extend this RPC with a custom API by using the following syntax.
	// `YourRpcStruct` should have a reference to a client, which is needed
	// to call into the runtime.
	// `module.merge(YourRpcTrait::into_rpc(YourRpcStruct::new(ReferenceToClient, ...)))?;`

	Ok(module)
}

'''
'''--- node/src/service.rs ---
//! Service and ServiceFactory implementation. Specialized wrapper over substrate service.

use node_template_runtime::{self, opaque::Block, RuntimeApi};
use sc_client_api::BlockBackend;
use sc_consensus_aura::{ImportQueueParams, SlotProportion, StartAuraParams};
use sc_consensus_grandpa::SharedVoterState;
pub use sc_executor::NativeElseWasmExecutor;
use sc_service::{error::Error as ServiceError, Configuration, TaskManager, WarpSyncParams};
use sc_telemetry::{Telemetry, TelemetryWorker};
use sp_consensus_aura::sr25519::AuthorityPair as AuraPair;
use std::{sync::Arc, time::Duration};

// Our native executor instance.
pub struct ExecutorDispatch;

impl sc_executor::NativeExecutionDispatch for ExecutorDispatch {
	/// Only enable the benchmarking host functions when we actually want to benchmark.
	#[cfg(feature = "runtime-benchmarks")]
	type ExtendHostFunctions = frame_benchmarking::benchmarking::HostFunctions;
	/// Otherwise we only use the default Substrate host functions.
	#[cfg(not(feature = "runtime-benchmarks"))]
	type ExtendHostFunctions = ();

	fn dispatch(method: &str, data: &[u8]) -> Option<Vec<u8>> {
		node_template_runtime::api::dispatch(method, data)
	}

	fn native_version() -> sc_executor::NativeVersion {
		node_template_runtime::native_version()
	}
}

pub(crate) type FullClient =
	sc_service::TFullClient<Block, RuntimeApi, NativeElseWasmExecutor<ExecutorDispatch>>;
type FullBackend = sc_service::TFullBackend<Block>;
type FullSelectChain = sc_consensus::LongestChain<FullBackend, Block>;

pub fn new_partial(
	config: &Configuration,
) -> Result<
	sc_service::PartialComponents<
		FullClient,
		FullBackend,
		FullSelectChain,
		sc_consensus::DefaultImportQueue<Block, FullClient>,
		sc_transaction_pool::FullPool<Block, FullClient>,
		(
			sc_consensus_grandpa::GrandpaBlockImport<
				FullBackend,
				Block,
				FullClient,
				FullSelectChain,
			>,
			sc_consensus_grandpa::LinkHalf<Block, FullClient, FullSelectChain>,
			Option<Telemetry>,
		),
	>,
	ServiceError,
> {
	let telemetry = config
		.telemetry_endpoints
		.clone()
		.filter(|x| !x.is_empty())
		.map(|endpoints| -> Result<_, sc_telemetry::Error> {
			let worker = TelemetryWorker::new(16)?;
			let telemetry = worker.handle().new_telemetry(endpoints);
			Ok((worker, telemetry))
		})
		.transpose()?;

	let executor = sc_service::new_native_or_wasm_executor(&config);

	let (client, backend, keystore_container, task_manager) =
		sc_service::new_full_parts::<Block, RuntimeApi, _>(
			config,
			telemetry.as_ref().map(|(_, telemetry)| telemetry.handle()),
			executor,
		)?;
	let client = Arc::new(client);

	let telemetry = telemetry.map(|(worker, telemetry)| {
		task_manager.spawn_handle().spawn("telemetry", None, worker.run());
		telemetry
	});

	let select_chain = sc_consensus::LongestChain::new(backend.clone());

	let transaction_pool = sc_transaction_pool::BasicPool::new_full(
		config.transaction_pool.clone(),
		config.role.is_authority().into(),
		config.prometheus_registry(),
		task_manager.spawn_essential_handle(),
		client.clone(),
	);

	let (grandpa_block_import, grandpa_link) = sc_consensus_grandpa::block_import(
		client.clone(),
		&(client.clone() as Arc<_>),
		select_chain.clone(),
		telemetry.as_ref().map(|x| x.handle()),
	)?;

	let slot_duration = sc_consensus_aura::slot_duration(&*client)?;

	let import_queue =
		sc_consensus_aura::import_queue::<AuraPair, _, _, _, _, _>(ImportQueueParams {
			block_import: grandpa_block_import.clone(),
			justification_import: Some(Box::new(grandpa_block_import.clone())),
			client: client.clone(),
			create_inherent_data_providers: move |_, ()| async move {
				let timestamp = sp_timestamp::InherentDataProvider::from_system_time();

				let slot =
					sp_consensus_aura::inherents::InherentDataProvider::from_timestamp_and_slot_duration(
						*timestamp,
						slot_duration,
					);

				Ok((slot, timestamp))
			},
			spawner: &task_manager.spawn_essential_handle(),
			registry: config.prometheus_registry(),
			check_for_equivocation: Default::default(),
			telemetry: telemetry.as_ref().map(|x| x.handle()),
			compatibility_mode: Default::default(),
		})?;

	Ok(sc_service::PartialComponents {
		client,
		backend,
		task_manager,
		import_queue,
		keystore_container,
		select_chain,
		transaction_pool,
		other: (grandpa_block_import, grandpa_link, telemetry),
	})
}

/// Builds a new service for a full client.
pub fn new_full(mut config: Configuration) -> Result<TaskManager, ServiceError> {
	let sc_service::PartialComponents {
		client,
		backend,
		mut task_manager,
		import_queue,
		keystore_container,
		select_chain,
		transaction_pool,
		other: (block_import, grandpa_link, mut telemetry),
	} = new_partial(&config)?;

	let grandpa_protocol_name = sc_consensus_grandpa::protocol_standard_name(
		&client.block_hash(0).ok().flatten().expect("Genesis block exists; qed"),
		&config.chain_spec,
	);

	config
		.network
		.extra_sets
		.push(sc_consensus_grandpa::grandpa_peers_set_config(grandpa_protocol_name.clone()));
	let warp_sync = Arc::new(sc_consensus_grandpa::warp_proof::NetworkProvider::new(
		backend.clone(),
		grandpa_link.shared_authority_set().clone(),
		Vec::default(),
	));

	let (network, system_rpc_tx, tx_handler_controller, network_starter, sync_service) =
		sc_service::build_network(sc_service::BuildNetworkParams {
			config: &config,
			client: client.clone(),
			transaction_pool: transaction_pool.clone(),
			spawn_handle: task_manager.spawn_handle(),
			import_queue,
			block_announce_validator_builder: None,
			warp_sync_params: Some(WarpSyncParams::WithProvider(warp_sync)),
		})?;

	if config.offchain_worker.enabled {
		sc_service::build_offchain_workers(
			&config,
			task_manager.spawn_handle(),
			client.clone(),
			network.clone(),
		);
	}

	let role = config.role.clone();
	let force_authoring = config.force_authoring;
	let backoff_authoring_blocks: Option<()> = None;
	let name = config.network.node_name.clone();
	let enable_grandpa = !config.disable_grandpa;
	let prometheus_registry = config.prometheus_registry().cloned();

	let rpc_extensions_builder = {
		let client = client.clone();
		let pool = transaction_pool.clone();

		Box::new(move |deny_unsafe, _| {
			let deps =
				crate::rpc::FullDeps { client: client.clone(), pool: pool.clone(), deny_unsafe };
			crate::rpc::create_full(deps).map_err(Into::into)
		})
	};

	let _rpc_handlers = sc_service::spawn_tasks(sc_service::SpawnTasksParams {
		network: network.clone(),
		client: client.clone(),
		keystore: keystore_container.keystore(),
		task_manager: &mut task_manager,
		transaction_pool: transaction_pool.clone(),
		rpc_builder: rpc_extensions_builder,
		backend,
		system_rpc_tx,
		tx_handler_controller,
		sync_service: sync_service.clone(),
		config,
		telemetry: telemetry.as_mut(),
	})?;

	if role.is_authority() {
		let proposer_factory = sc_basic_authorship::ProposerFactory::new(
			task_manager.spawn_handle(),
			client.clone(),
			transaction_pool,
			prometheus_registry.as_ref(),
			telemetry.as_ref().map(|x| x.handle()),
		);

		let slot_duration = sc_consensus_aura::slot_duration(&*client)?;

		let aura = sc_consensus_aura::start_aura::<AuraPair, _, _, _, _, _, _, _, _, _, _>(
			StartAuraParams {
				slot_duration,
				client,
				select_chain,
				block_import,
				proposer_factory,
				create_inherent_data_providers: move |_, ()| async move {
					let timestamp = sp_timestamp::InherentDataProvider::from_system_time();

					let slot =
						sp_consensus_aura::inherents::InherentDataProvider::from_timestamp_and_slot_duration(
							*timestamp,
							slot_duration,
						);

					Ok((slot, timestamp))
				},
				force_authoring,
				backoff_authoring_blocks,
				keystore: keystore_container.keystore(),
				sync_oracle: sync_service.clone(),
				justification_sync_link: sync_service.clone(),
				block_proposal_slot_portion: SlotProportion::new(2f32 / 3f32),
				max_block_proposal_slot_portion: None,
				telemetry: telemetry.as_ref().map(|x| x.handle()),
				compatibility_mode: Default::default(),
			},
		)?;

		// the AURA authoring task is considered essential, i.e. if it
		// fails we take down the service with it.
		task_manager
			.spawn_essential_handle()
			.spawn_blocking("aura", Some("block-authoring"), aura);
	}

	if enable_grandpa {
		// if the node isn't actively participating in consensus then it doesn't
		// need a keystore, regardless of which protocol we use below.
		let keystore = if role.is_authority() { Some(keystore_container.keystore()) } else { None };

		let grandpa_config = sc_consensus_grandpa::Config {
			// FIXME #1578 make this available through chainspec
			gossip_duration: Duration::from_millis(333),
			justification_period: 512,
			name: Some(name),
			observer_enabled: false,
			keystore,
			local_role: role,
			telemetry: telemetry.as_ref().map(|x| x.handle()),
			protocol_name: grandpa_protocol_name,
		};

		// start the full GRANDPA voter
		// NOTE: non-authorities could run the GRANDPA observer protocol, but at
		// this point the full voter should provide better guarantees of block
		// and vote data availability than the observer. The observer has not
		// been tested extensively yet and having most nodes in a network run it
		// could lead to finality stalls.
		let grandpa_config = sc_consensus_grandpa::GrandpaParams {
			config: grandpa_config,
			link: grandpa_link,
			network,
			sync: Arc::new(sync_service),
			voting_rule: sc_consensus_grandpa::VotingRulesBuilder::default().build(),
			prometheus_registry,
			shared_voter_state: SharedVoterState::empty(),
			telemetry: telemetry.as_ref().map(|x| x.handle()),
		};

		// the GRANDPA voter task is considered infallible, i.e.
		// if it fails we take down the service with it.
		task_manager.spawn_essential_handle().spawn_blocking(
			"grandpa-voter",
			None,
			sc_consensus_grandpa::run_grandpa_voter(grandpa_config)?,
		);
	}

	network_starter.start_network();
	Ok(task_manager)
}

'''
'''--- pallets/department-funding/Cargo.toml ---
[package]
name = "department-funding"
version = "4.0.0-dev"
description = "FRAME pallet template for defining custom runtime logic."
authors = ["Substrate DevHub <https://github.com/substrate-developer-hub>"]
homepage = "https://substrate.io"
edition = "2021"
license = "MIT-0"
publish = false
repository = "https://github.com/substrate-developer-hub/substrate-node-template/"

[package.metadata.docs.rs]
targets = ["x86_64-unknown-linux-gnu"]

[dependencies]
codec = { package = "parity-scale-codec", version = "3.2.2", default-features = false, features = [
	"derive",
] }
scale-info = { version = "2.5.0", default-features = false, features = ["derive"] }
frame-benchmarking = { version = "4.0.0-dev", default-features = false, optional = true, git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
frame-support = { version = "4.0.0-dev", default-features = false, git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
frame-system = { version = "4.0.0-dev", default-features = false, git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
pallet-timestamp = { git = 'https://github.com/paritytech/substrate', branch = "polkadot-v0.9.42", default-features = false }
pallet-balances = { default-features = false, version = "4.0.0-dev", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
pallet-support = { default-features = false, path = '../support' }
shared-storage = { default-features = false, path="../shared-storage"}
shared-storage-link = { default-features = false, path="../../traits/shared-storage-link"}
schelling-game-shared = {default-features = false, path = "../schelling-game-shared"}
schelling-game-shared-link = {default-features = false, path = "../../traits/schelling-game-shared-link"}
sortition-sum-game = {default-features = false, path="../sortition-sum-game"}

[dev-dependencies]
sp-core = { version = "7.0.0", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
sp-io = { version = "7.0.0", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
sp-runtime = { version = "7.0.0", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
frame-support-test = { version = "3.0.0", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }

[features]
default = ["std"]
std = [
	"codec/std",
	"frame-benchmarking?/std",
	"frame-support/std",
	"frame-system/std",
	"scale-info/std",
	"pallet-timestamp/std",
	"pallet-balances/std",
	"pallet-support/std",
	"shared-storage/std",
	"schelling-game-shared/std",
	"sortition-sum-game/std",
]
runtime-benchmarks = ["frame-benchmarking/runtime-benchmarks"]
try-runtime = ["frame-support/try-runtime"]

'''
'''--- pallets/department-funding/README.md ---
License: MIT-0
'''
'''--- pallets/department-funding/src/benchmarking.rs ---
//! Benchmarking setup for pallet-template
#![cfg(feature = "runtime-benchmarks")]
use super::*;

#[allow(unused)]
use crate::Pallet as Template;
use frame_benchmarking::v2::*;
use frame_system::RawOrigin;

#[benchmarks]
mod benchmarks {
	use super::*;

	#[benchmark]
	fn do_something() {
		let value = 100u32.into();
		let caller: T::AccountId = whitelisted_caller();
		#[extrinsic_call]
		do_something(RawOrigin::Signed(caller), value);

		assert_eq!(Something::<T>::get(), Some(value));
	}

	#[benchmark]
	fn cause_error() {
		Something::<T>::put(100u32);
		let caller: T::AccountId = whitelisted_caller();
		#[extrinsic_call]
		cause_error(RawOrigin::Signed(caller));

		assert_eq!(Something::<T>::get(), Some(101u32));
	}

	impl_benchmark_test_suite!(Template, crate::mock::new_test_ext(), crate::mock::Test);
}

'''
'''--- pallets/department-funding/src/extras.rs ---
use crate::*;
use types::{TIME_FOR_STAKING_FUNDING_STATUS_FAILED, TIME_FOR_STAKING_FUNDING_STATUS_PASSED};

impl<T: Config> DepartmentRequiredFund<T> {
	pub fn new(
		department_required_fund_id: DepartmentRequiredFundId,
		department_id: DepartmentId,
		tipping_name: TippingName,
		funding_needed: BalanceOf<T>,
		creator: T::AccountId,
	) -> Self {
		DepartmentRequiredFund {
			created: new_who_and_when::<T>(creator.clone()),
			department_required_fund_id,
			department_id,
			tipping_name,
			funding_needed,
			creator,
		}
	}
}

impl<T: Config> Pallet<T> {
	pub(super) fn get_phase_data() -> PhaseData<T> {
		T::SchellingGameSharedSource::create_phase_data(50, 5, 3, 100, (100, 100))
	}

	pub fn ensure_validation_to_do(
		department_required_fund_id: DepartmentRequiredFundId,
	) -> DispatchResult {
		let bool_data = ValidateDepartmentRequiredFund::<T>::get(department_required_fund_id);
		ensure!(bool_data == true, Error::<T>::ValidationForDepartmentRequiredFundIdIsOff);

		Ok(())
	}

	pub fn get_department_id_from_department_required_fund_id(
		department_required_fund_id: DepartmentRequiredFundId,
	) -> Result<DepartmentId, DispatchError> {
		let department_required_fund_option =
			DepartmentRequiredFunds::<T>::get(department_required_fund_id);

		match department_required_fund_option {
			Some(department_required_fund) => Ok(department_required_fund.department_id),
			None => Err(Error::<T>::DepartmentRequiredFundDontExits)?,
		}
	}

	pub fn ensure_can_stake_using_status(
		department_id: DepartmentId,
	) -> Result<DepartmentFundingStatus<BlockNumberOf<T>, FundingStatus>, DispatchError> {
		let now = <frame_system::Pallet<T>>::block_number();
		let department_funding_status =
			DepartmentFundingStatus { block_number: now, status: FundingStatus::Processing };
		let department_status_option =
			DepartmentFundingStatusForDepartmentId::<T>::get(department_id);
		match department_status_option {
			Some(department_status) => {
				let funding_status = department_status.status;
				if funding_status == FundingStatus::Processing {
					Err(Error::<T>::FundingStatusProcessing.into())
				} else if funding_status == FundingStatus::Failed {
					// else check 3 month if status faild or 6 months if status success to reapply for funding
					let status_failed_time = TIME_FOR_STAKING_FUNDING_STATUS_FAILED;
					let status_failed_time_block = Self::u64_to_block_saturated(status_failed_time);
					let funding_status_block = department_status.block_number;
					let time = now.checked_sub(&funding_status_block).expect("Overflow");
					if time >= status_failed_time_block {
						Ok(department_funding_status)
					} else {
						Err(Error::<T>::ReapplicationTimeNotReached.into())
					}
				} else if funding_status == FundingStatus::Success {
					let status_success_time = TIME_FOR_STAKING_FUNDING_STATUS_PASSED;
					let status_success_time_block =
						Self::u64_to_block_saturated(status_success_time);
					let funding_status_block = department_status.block_number;
					let time = now.checked_sub(&funding_status_block).expect("Overflow");
					if time >= status_success_time_block {
						Ok(department_funding_status)
					} else {
						Err(Error::<T>::ReapplicationTimeNotReached.into())
					}
				} else {
					Err(Error::<T>::ConditionDontMatch.into())
				}
			},
			None => Ok(department_funding_status),
		}
	}

	// pub fn ensure_user_is_project_creator_and_project_exists(
	// 	project_id: ProjectId,
	// 	user: T::AccountId,
	// ) -> DispatchResult {
	// 	let project_option: Option<Project<T>> = Projects::get(project_id);
	// 	match project_option {
	// 		Some(project) => {
	// 			let creator = project.creator;
	// 			ensure!(creator == user, Error::<T>::ProjectCreatorDontMatch);
	// 		},
	// 		None => Err(Error::<T>::ProjectDontExists)?,
	// 	}

	// 	Ok(())
	// }

	// pub fn ensure_staking_period_set_once_project_id(project_id: ProjectId) -> DispatchResult {
	// 	let block_number_option = <ValidationProjectBlock<T>>::get(project_id);
	// 	match block_number_option {
	// 		Some(_block) => Err(Error::<T>::ProjectIdStakingPeriodAlreadySet)?,
	// 		None => Ok(()),
	// 	}
	// }

	pub fn get_block_number_of_schelling_game(
		department_required_fund_id: DepartmentRequiredFundId,
	) -> Result<BlockNumberOf<T>, DispatchError> {
		let block_number_option =
			<ValidationDepartmentRequiredFundsBlock<T>>::get(department_required_fund_id);
		let block_number = match block_number_option {
			Some(block_number) => block_number,
			None => Err(Error::<T>::BlockDepartmentRequiredFundIdNotExists)?,
		};
		Ok(block_number)
	}

	pub(super) fn u64_to_balance_saturated(input: u64) -> BalanceOf<T> {
		input.saturated_into::<BalanceOf<T>>()
	}

	pub(super) fn u64_to_block_saturated(input: u64) -> BlockNumberOf<T> {
		input.saturated_into::<BlockNumberOf<T>>()
	}

	pub(super) fn value_of_tipping_name(tipping: TippingName) -> TippingValue<BalanceOf<T>> {
		match tipping {
			TippingName::SmallTipper => TippingValue {
				max_tipping_value: 10_000u64.saturated_into::<BalanceOf<T>>(),
				stake_required: 10u64.saturated_into::<BalanceOf<T>>(),
			},
			TippingName::BigTipper => TippingValue {
				max_tipping_value: 100_000u64.saturated_into::<BalanceOf<T>>(),
				stake_required: 50u64.saturated_into::<BalanceOf<T>>(),
			},
			TippingName::SmallSpender => TippingValue {
				max_tipping_value: 1_000_000u64.saturated_into::<BalanceOf<T>>(),
				stake_required: 100u64.saturated_into::<BalanceOf<T>>(),
			},
			TippingName::MediumSpender => TippingValue {
				max_tipping_value: 10_000_000u64.saturated_into::<BalanceOf<T>>(),
				stake_required: 200u64.saturated_into::<BalanceOf<T>>(),
			},
			TippingName::BigSpender => TippingValue {
				max_tipping_value: 100_000_000u64.saturated_into::<BalanceOf<T>>(),
				stake_required: 500u64.saturated_into::<BalanceOf<T>>(),
			},
		}
	}
}

'''
'''--- pallets/department-funding/src/lib.rs ---
#![cfg_attr(not(feature = "std"), no_std)]

/// Edit this file to define custom logic or remove it if it is not needed.
/// Learn more about FRAME and the core library of Substrate FRAME pallets:
/// <https://docs.substrate.io/reference/frame-pallets/>
// One can enhance validation measures by increasing staking power for local residents or individuals with positive externalities—those who contribute to the network for a good cause.
pub use pallet::*;

#[cfg(test)]
mod mock;

#[cfg(test)]
mod tests;

#[cfg(feature = "runtime-benchmarks")]
mod benchmarking;
pub mod weights;
pub use weights::*;

mod extras;
mod types;

use frame_support::sp_runtime::traits::{CheckedAdd, CheckedSub};
use frame_support::sp_runtime::SaturatedConversion;
use frame_support::sp_std::prelude::*;
use frame_support::{
	dispatch::{DispatchError, DispatchResult},
	ensure,
};
use frame_support::{
	traits::{Currency, ExistenceRequirement, Get, ReservableCurrency, WithdrawReasons},
	PalletId,
};
use pallet_support::{
	ensure_content_is_valid, new_who_and_when, remove_from_vec, Content, PositiveExternalityPostId,
	WhoAndWhen, WhoAndWhenOf,
};
use schelling_game_shared::types::{Period, PhaseData, RangePoint, SchellingGameType};
use schelling_game_shared_link::SchellingGameSharedLink;
use shared_storage_link::SharedStorageLink;
use sortition_sum_game::types::SumTreeName;
pub use types::DEPARTMENT_REQUIRED_FUND_ID;
use types::{
	DepartmentFundingStatus, DepartmentRequiredFund, FundingStatus, TippingName, TippingValue,
};

type AccountIdOf<T> = <T as frame_system::Config>::AccountId;
type BalanceOf<T> = <<T as Config>::Currency as Currency<AccountIdOf<T>>>::Balance;
pub type BlockNumberOf<T> = <T as frame_system::Config>::BlockNumber;
pub type SumTreeNameType<T> = SumTreeName<AccountIdOf<T>, BlockNumberOf<T>>;
type DepartmentId = u64;
type DepartmentRequiredFundId = u64;

#[frame_support::pallet(dev_mode)]
pub mod pallet {
	use super::*;
	use frame_support::pallet_prelude::*;
	use frame_system::pallet_prelude::*;

	#[pallet::pallet]
	#[pallet::without_storage_info]
	pub struct Pallet<T>(_);

	/// Configure the pallet by specifying the parameters and types on which it depends.
	#[pallet::config]
	pub trait Config:
		frame_system::Config + schelling_game_shared::Config + pallet_timestamp::Config
	{
		/// Because this pallet emits events, it depends on the runtime's definition of an event.
		type RuntimeEvent: From<Event<Self>> + IsType<<Self as frame_system::Config>::RuntimeEvent>;
		/// Type representing the weight of this pallet
		type WeightInfo: WeightInfo;

		type SharedStorageSource: SharedStorageLink<AccountId = AccountIdOf<Self>>;
		type SchellingGameSharedSource: SchellingGameSharedLink<
			SumTreeName = SumTreeName<Self::AccountId, Self::BlockNumber>,
			SchellingGameType = SchellingGameType,
			BlockNumber = Self::BlockNumber,
			AccountId = AccountIdOf<Self>,
			Balance = BalanceOf<Self>,
			RangePoint = RangePoint,
			Period = Period,
			PhaseData = PhaseData<Self>,
		>;
		type Currency: ReservableCurrency<Self::AccountId>;
	}

	// The pallet's runtime storage items.
	// https://docs.substrate.io/main-docs/build/runtime-storage/
	#[pallet::storage]
	#[pallet::getter(fn something)]
	// Learn more about declaring storage items:
	// https://docs.substrate.io/main-docs/build/runtime-storage/#declaring-storage-items
	pub type Something<T> = StorageValue<_, u32>;

	#[pallet::type_value]
	pub fn MinimumDepartmentStake<T: Config>() -> BalanceOf<T> {
		10000u128.saturated_into::<BalanceOf<T>>()
	}

	#[pallet::type_value]
	pub fn DefaultForNextDepartmentRequiredFundId() -> DepartmentRequiredFundId {
		DEPARTMENT_REQUIRED_FUND_ID
	}

	#[pallet::storage]
	#[pallet::getter(fn next_department_required_fund_id)]
	pub type NextDepartmentRequiredFundId<T: Config> = StorageValue<
		_,
		DepartmentRequiredFundId,
		ValueQuery,
		DefaultForNextDepartmentRequiredFundId,
	>;

	#[pallet::storage]
	#[pallet::getter(fn get_department_required_funds)]
	pub type DepartmentRequiredFunds<T: Config> =
		StorageMap<_, Blake2_128Concat, DepartmentRequiredFundId, DepartmentRequiredFund<T>>;

	#[pallet::storage]
	#[pallet::getter(fn validate_positive_externality)]
	pub type ValidateDepartmentRequiredFund<T: Config> =
		StorageMap<_, Twox64Concat, DepartmentRequiredFundId, bool, ValueQuery>;

	#[pallet::storage]
	#[pallet::getter(fn validation_department_required_funds_block_number)]
	pub type ValidationDepartmentRequiredFundsBlock<T: Config> =
		StorageMap<_, Blake2_128Concat, DepartmentRequiredFundId, BlockNumberOf<T>>;

	#[pallet::storage]
	#[pallet::getter(fn department_funding_status)]
	pub type DepartmentFundingStatusForDepartmentId<T: Config> = StorageMap<
		_,
		Blake2_128Concat,
		DepartmentId,
		DepartmentFundingStatus<BlockNumberOf<T>, FundingStatus>,
	>;

	// Pallets use events to inform users when important changes are made.
	// https://docs.substrate.io/main-docs/build/events-errors/
	#[pallet::event]
	#[pallet::generate_deposit(pub(super) fn deposit_event)]
	pub enum Event<T: Config> {
		/// Event documentation should end with an array that provides descriptive names for event
		/// parameters. [something, who]
		SomethingStored { something: u32, who: T::AccountId },
		DepartmentFundCreated {
			account: T::AccountId,
			department_required_fund_id: DepartmentRequiredFundId,
		},
		StakingPeriodStarted {
			department_required_fund_id: DepartmentRequiredFundId,
			block_number: BlockNumberOf<T>,
		},
		ApplyJurors {
			department_required_fund_id: DepartmentRequiredFundId,
			block_number: BlockNumberOf<T>,
			account: T::AccountId,
		},
	}

	// Errors inform users that something went wrong.
	#[pallet::error]
	pub enum Error<T> {
		/// Error names should be descriptive.
		NoneValue,
		/// Errors should have helpful documentation associated with them.
		StorageOverflow,
		LessThanMinStake,
		CannotStakeNow,
		ChoiceOutOfRange,
		FundingMoreThanTippingValue,
		DepartmentRequiredFundDontExits,
		BlockDepartmentRequiredFundIdNotExists,
		ValidationForDepartmentRequiredFundIdIsOff,
		FundingStatusProcessing,
		ReapplicationTimeNotReached,
		ConditionDontMatch,
	}

	// Check deparment exists, it will done using loose coupling
	#[pallet::call]
	impl<T: Config> Pallet<T> {
		#[pallet::call_index(0)]
		#[pallet::weight(0)]
		pub fn create_department_required_fund(
			origin: OriginFor<T>,
			department_id: DepartmentId,
			tipping_name: TippingName,
			funding_needed: BalanceOf<T>,
		) -> DispatchResult {
			let who = ensure_signed(origin)?;
			let tipping_value = Self::value_of_tipping_name(tipping_name);
			let max_tipping_value = tipping_value.max_tipping_value;
			let stake_required = tipping_value.stake_required;
			let new_department_fund_id = Self::next_department_required_fund_id();
			let new_department_fund: DepartmentRequiredFund<T> = DepartmentRequiredFund::new(
				new_department_fund_id,
				department_id,
				tipping_name,
				funding_needed,
				who.clone(),
			);
			ensure!(funding_needed <= max_tipping_value, Error::<T>::FundingMoreThanTippingValue);
			// Check user has done kyc
			let _ = <T as pallet::Config>::Currency::withdraw(
				&who,
				stake_required,
				WithdrawReasons::TRANSFER,
				ExistenceRequirement::AllowDeath,
			)?;
			DepartmentRequiredFunds::insert(new_department_fund_id, new_department_fund);
			NextDepartmentRequiredFundId::<T>::mutate(|n| {
				*n += 1;
			});

			Self::deposit_event(Event::DepartmentFundCreated {
				account: who,
				department_required_fund_id: new_department_fund_id,
			});
			Ok(())
		}

		// Check update and discussion time over, only project creator can apply staking period
		#[pallet::call_index(1)]
		#[pallet::weight(0)]
		pub fn apply_staking_period(
			origin: OriginFor<T>,
			department_required_fund_id: DepartmentRequiredFundId,
		) -> DispatchResult {
			let who = ensure_signed(origin)?;
			Self::ensure_validation_to_do(department_required_fund_id)?;
			let department_id = Self::get_department_id_from_department_required_fund_id(
				department_required_fund_id,
			)?;
			let department_funding_status = Self::ensure_can_stake_using_status(department_id)?;
			DepartmentFundingStatusForDepartmentId::<T>::insert(
				department_id,
				department_funding_status,
			);
			let now = <frame_system::Pallet<T>>::block_number();
			let key = SumTreeName::DepartmentRequiredFund {
				department_required_fund_id,
				block_number: now.clone(),
			};
			ValidationDepartmentRequiredFundsBlock::<T>::insert(
				department_required_fund_id,
				now.clone(),
			);
			T::SchellingGameSharedSource::set_to_staking_period_pe_link(key.clone(), now.clone())?;
			T::SchellingGameSharedSource::create_tree_helper_link(key, 3)?;

			Self::deposit_event(Event::StakingPeriodStarted {
				department_required_fund_id,
				block_number: now,
			});

			Ok(())
		}

		// // Check update and discussion time over, only project creator can apply staking period
		// #[pallet::call_index(1)]
		// #[pallet::weight(0)]
		// pub fn apply_staking_period(origin: OriginFor<T>, department_required_fund_id: DepartmentRequiredFundId) -> DispatchResult {
		// 	let who = ensure_signed(origin)?;

		// 	Self::ensure_user_is_project_creator_and_project_exists(project_id, who)?;
		// 	Self::ensure_staking_period_set_once_project_id(project_id)?;

		// 	let now = <frame_system::Pallet<T>>::block_number();

		// 	let key = SumTreeName::ProjectTips { project_id, block_number: now.clone() };

		// 	<ValidationProjectBlock<T>>::insert(project_id, now.clone());
		// 	// check what if called again, its done with `ensure_staking_period_set_once_project_id`
		// 	T::SchellingGameSharedSource::set_to_staking_period_pe_link(key.clone(), now.clone())?;
		// 	T::SchellingGameSharedSource::create_tree_helper_link(key, 3)?;

		// 	Self::deposit_event(Event::StakinPeriodStarted { project_id, block_number: now });

		// 	Ok(())
		// }

		#[pallet::call_index(2)]
		#[pallet::weight(0)]
		pub fn apply_jurors_project_tips(
			origin: OriginFor<T>,
			department_required_fund_id: DepartmentRequiredFundId,
			stake: BalanceOf<T>,
		) -> DispatchResult {
			let who = ensure_signed(origin)?;

			let block_number =
				Self::get_block_number_of_schelling_game(department_required_fund_id)?;

			let key = SumTreeName::DepartmentRequiredFund {
				department_required_fund_id,
				block_number: block_number.clone(),
			};

			let phase_data = Self::get_phase_data();

			T::SchellingGameSharedSource::apply_jurors_helper_link(
				key,
				phase_data,
				who.clone(),
				stake,
			)?;
			Self::deposit_event(Event::ApplyJurors {
				department_required_fund_id,
				block_number,
				account: who,
			});

			Ok(())
		}

		#[pallet::call_index(3)]
		#[pallet::weight(0)]
		pub fn pass_period(
			origin: OriginFor<T>,
			department_required_fund_id: DepartmentRequiredFundId,
		) -> DispatchResult {
			let _who = ensure_signed(origin)?;

			let block_number =
				Self::get_block_number_of_schelling_game(department_required_fund_id)?;

			let key = SumTreeName::DepartmentRequiredFund {
				department_required_fund_id,
				block_number: block_number.clone(),
			};

			let now = <frame_system::Pallet<T>>::block_number();
			let phase_data = Self::get_phase_data();
			T::SchellingGameSharedSource::change_period_link(key, phase_data, now)?;
			Ok(())
		}

		#[pallet::call_index(4)]
		#[pallet::weight(0)]
		pub fn draw_jurors(
			origin: OriginFor<T>,
			department_required_fund_id: DepartmentRequiredFundId,
			iterations: u64,
		) -> DispatchResult {
			let _who = ensure_signed(origin)?;

			let block_number =
				Self::get_block_number_of_schelling_game(department_required_fund_id)?;

			let key = SumTreeName::DepartmentRequiredFund {
				department_required_fund_id,
				block_number: block_number.clone(),
			};

			let phase_data = Self::get_phase_data();

			T::SchellingGameSharedSource::draw_jurors_helper_link(key, phase_data, iterations)?;

			Ok(())
		}

		// Unstaking
		// Stop drawn juror to unstake ✔️
		#[pallet::call_index(5)]
		#[pallet::weight(0)]
		pub fn unstaking(
			origin: OriginFor<T>,
			department_required_fund_id: DepartmentRequiredFundId,
		) -> DispatchResult {
			let who = ensure_signed(origin)?;
			let block_number =
				Self::get_block_number_of_schelling_game(department_required_fund_id)?;
			let key = SumTreeName::DepartmentRequiredFund {
				department_required_fund_id,
				block_number: block_number.clone(),
			};

			T::SchellingGameSharedSource::unstaking_helper_link(key, who)?;
			Ok(())
		}

		#[pallet::call_index(6)]
		#[pallet::weight(0)]
		pub fn commit_vote(
			origin: OriginFor<T>,
			department_required_fund_id: DepartmentRequiredFundId,
			vote_commit: [u8; 32],
		) -> DispatchResult {
			let who = ensure_signed(origin)?;
			let block_number =
				Self::get_block_number_of_schelling_game(department_required_fund_id)?;
			let key = SumTreeName::DepartmentRequiredFund {
				department_required_fund_id,
				block_number: block_number.clone(),
			};

			T::SchellingGameSharedSource::commit_vote_helper_link(key, who, vote_commit)?;
			Ok(())
		}

		#[pallet::call_index(7)]
		#[pallet::weight(0)]
		pub fn reveal_vote(
			origin: OriginFor<T>,
			department_required_fund_id: DepartmentRequiredFundId,
			choice: u128,
			salt: Vec<u8>,
		) -> DispatchResult {
			let who = ensure_signed(origin)?;

			let block_number =
				Self::get_block_number_of_schelling_game(department_required_fund_id)?;
			let key = SumTreeName::DepartmentRequiredFund {
				department_required_fund_id,
				block_number: block_number.clone(),
			};

			T::SchellingGameSharedSource::reveal_vote_two_choice_helper_link(
				key, who, choice, salt,
			)?;
			Ok(())
		}

		#[pallet::call_index(8)]
		#[pallet::weight(0)]
		pub fn get_incentives(
			origin: OriginFor<T>,
			department_required_fund_id: DepartmentRequiredFundId,
		) -> DispatchResult {
			let who = ensure_signed(origin)?;
			let block_number =
				Self::get_block_number_of_schelling_game(department_required_fund_id)?;
			let key = SumTreeName::DepartmentRequiredFund {
				department_required_fund_id,
				block_number: block_number.clone(),
			};

			let phase_data = Self::get_phase_data();
			T::SchellingGameSharedSource::get_incentives_two_choice_helper_link(
				key, phase_data, who,
			)?;
			Ok(())
		}
	}
}

'''
'''--- pallets/department-funding/src/mock.rs ---
use crate as pallet_template;
use frame_support::{parameter_types, traits::{ConstU16, ConstU64, GenesisBuild}};
use sp_core::H256;
use sp_runtime::{
	testing::Header,
	traits::{BlakeTwo256, IdentityLookup},
};

type UncheckedExtrinsic = frame_system::mocking::MockUncheckedExtrinsic<Test>;
type Block = frame_system::mocking::MockBlock<Test>;
use frame_support_test::TestRandomness;

// Configure a mock runtime to test the pallet.
frame_support::construct_runtime!(
	pub enum Test where
		Block = Block,
		NodeBlock = Block,
		UncheckedExtrinsic = UncheckedExtrinsic,
	{
		System: frame_system,
		DepartmentFunding: pallet_template,
		Balances: pallet_balances,
		SharedStorage:shared_storage,
		SchellingGameShared: schelling_game_shared,
		SortitionSumGame: sortition_sum_game,
	}
);

impl frame_system::Config for Test {
	type BaseCallFilter = frame_support::traits::Everything;
	type BlockWeights = ();
	type BlockLength = ();
	type DbWeight = ();
	type RuntimeOrigin = RuntimeOrigin;
	type RuntimeCall = RuntimeCall;
	type Index = u64;
	type BlockNumber = u64;
	type Hash = H256;
	type Hashing = BlakeTwo256;
	type AccountId = u64;
	type Lookup = IdentityLookup<Self::AccountId>;
	type Header = Header;
	type RuntimeEvent = RuntimeEvent;
	type BlockHashCount = ConstU64<250>;
	type Version = ();
	type PalletInfo = PalletInfo;
	type OnNewAccount = ();
	type OnKilledAccount = ();
	type SystemWeightInfo = ();
	type SS58Prefix = ConstU16<42>;
	type OnSetCode = ();
	type MaxConsumers = frame_support::traits::ConstU32<16>;
	type AccountData = pallet_balances::AccountData<u64>; // New code
}

parameter_types! {
    pub const MinimumPeriod: u64 = 5;
}

impl pallet_timestamp::Config for Test {
    type Moment = u64;
    type OnTimestampSet = ();
    type MinimumPeriod = MinimumPeriod;
    type WeightInfo = ();
}

impl shared_storage::Config for Test {
	type RuntimeEvent = RuntimeEvent;
	type WeightInfo = ();
}
impl pallet_template::Config for Test {
	type RuntimeEvent = RuntimeEvent;
	type WeightInfo = ();
	type SharedStorageSource = SharedStorage;
	type Currency = Balances; // New code
	type SchellingGameSharedSource = SchellingGameShared;
}

impl pallet_balances::Config for Test {
	type MaxLocks = ();
	type MaxReserves = ();
	type ReserveIdentifier = [u8; 8];
	type Balance = u64;
	type DustRemoval = ();
	type RuntimeEvent = RuntimeEvent;
	type ExistentialDeposit = ConstU64<1>;
	type WeightInfo = ();
	type FreezeIdentifier = ();
	type MaxFreezes = ();
	type MaxHolds = ();
	type HoldIdentifier = ();
	type AccountStore = System;
}

impl schelling_game_shared::Config for Test {
	type RuntimeEvent = RuntimeEvent;
	type WeightInfo = ();
	type Currency = Balances; // New code
	type RandomnessSource = TestRandomness<Self>;
	type Slash = ();
	type Reward = ();
	type SortitionSumGameSource = SortitionSumGame;
}

impl sortition_sum_game::Config for Test {
	type RuntimeEvent = RuntimeEvent;
	type WeightInfo = ();
}

// Build genesis storage according to the mock runtime.
pub fn new_test_ext() -> sp_io::TestExternalities {
	let mut t = frame_system::GenesisConfig::default().build_storage::<Test>().unwrap();
	pallet_balances::GenesisConfig::<Test> {
		balances: vec![
			(1, 100000),
			(2, 200000),
			(3, 300000),
			(4, 300000),
			(5, 300000),
			(6, 300000),
			(7, 300000),
			(8, 300000),
			(9, 300000),
			(10, 300000),
			(11, 300000),
			(12, 300000),
			(13, 300000),
			(14, 300000),
			(15, 300000),
			(16, 300000),
			(17, 300000),
			(18, 300000),
			(19, 300000),
			(20, 300000),
			(21, 300000),
			(22, 300000),
			(23, 300000),
			(24, 300000),
			(25, 300000),
			(26, 300000),
			(27, 300000),
			(28, 300000),
			(29, 300000),
			(30, 300000),
			(31, 300000),
			(32, 300000),
			(33, 300000),
			(34, 300000),
			(35, 300000),
		],
	} // new code
	.assimilate_storage(&mut t)
	.unwrap();
	shared_storage::GenesisConfig::<Test> { approved_citizen_address: vec![1, 2] }
		.assimilate_storage(&mut t)
		.unwrap();
	t.into()
}

'''
'''--- pallets/department-funding/src/tests.rs ---
use crate::{mock::*, Error, Event};
use frame_support::{assert_noop, assert_ok};

#[test]
fn it_works_for_default_value() {
	new_test_ext().execute_with(|| {
		// Go past genesis block so events get deposited
		System::set_block_number(1);
		// Dispatch a signed extrinsic.
	
	});
}

#[test]
fn correct_error_for_none_value() {
	new_test_ext().execute_with(|| {
		// Ensure the expected error is thrown when no value is present.
		
	});
}

'''
'''--- pallets/department-funding/src/types.rs ---
use super::*;
use codec::{Decode, Encode, EncodeLike, MaxEncodedLen};
use frame_support::pallet_prelude::*;
use scale_info::TypeInfo;

pub const DEPARTMENT_REQUIRED_FUND_ID: DepartmentRequiredFundId = 1;

pub const TIME_FOR_STAKING_FUNDING_STATUS_FAILED: u64 = (3 * 30 * 24 * 60 * 60) / 6; // 3 months time

pub const TIME_FOR_STAKING_FUNDING_STATUS_PASSED: u64 = (6 * 30 * 24 * 60 * 60) / 6; // 6 months time

#[derive(Encode, Decode, Clone, Copy, Eq, PartialEq, RuntimeDebug, TypeInfo)]
pub enum TippingName {
	SmallTipper,
	BigTipper,
	SmallSpender,
	MediumSpender,
	BigSpender,
}

#[derive(Encode, Decode, Clone, Copy, Eq, PartialEq, RuntimeDebug, TypeInfo)]
pub struct TippingValue<Balance> {
	pub max_tipping_value: Balance,
	pub stake_required: Balance,
}

#[derive(Encode, Decode, Clone, Eq, PartialEq, RuntimeDebug, TypeInfo)]
#[scale_info(skip_type_params(T))]
pub struct DepartmentRequiredFund<T: Config> {
	pub created: WhoAndWhenOf<T>,
    pub department_required_fund_id: DepartmentRequiredFundId,
	pub department_id: DepartmentId,
	pub tipping_name: TippingName,
	pub funding_needed: BalanceOf<T>,
	pub creator: T::AccountId,
}

#[derive(Encode, Decode, Clone, Copy, Eq, PartialEq, RuntimeDebug, TypeInfo)]
pub enum FundingStatus {
	Processing,
	Success,
	Failed,
}

#[derive(Encode, Decode, Clone, Eq, PartialEq, RuntimeDebug, TypeInfo)]
pub struct DepartmentFundingStatus<BlockNumber, FundingStatus> {
	pub block_number: BlockNumber,
	pub status: FundingStatus,
}

'''
'''--- pallets/department-funding/src/weights.rs ---

//! Autogenerated weights for pallet_template
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-04-06, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Alexs-MacBook-Pro-2.local`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ../../target/release/node-template
// benchmark
// pallet
// --chain
// dev
// --pallet
// pallet_template
// --extrinsic
// *
// --steps=50
// --repeat=20
// --execution=wasm
// --wasm-execution=compiled
// --output
// pallets/template/src/weights.rs
// --template
// ../../.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_template.
pub trait WeightInfo {
	fn do_something() -> Weight;
	fn cause_error() -> Weight;
}

/// Weights for pallet_template using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: TemplateModule Something (r:0 w:1)
	/// Proof: TemplateModule Something (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn do_something() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 8_000_000 picoseconds.
		Weight::from_parts(9_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: TemplateModule Something (r:1 w:1)
	/// Proof: TemplateModule Something (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn cause_error() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `32`
		//  Estimated: `1489`
		// Minimum execution time: 6_000_000 picoseconds.
		Weight::from_parts(6_000_000, 1489)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: TemplateModule Something (r:0 w:1)
	/// Proof: TemplateModule Something (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn do_something() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 8_000_000 picoseconds.
		Weight::from_parts(9_000_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: TemplateModule Something (r:1 w:1)
	/// Proof: TemplateModule Something (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn cause_error() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `32`
		//  Estimated: `1489`
		// Minimum execution time: 6_000_000 picoseconds.
		Weight::from_parts(6_000_000, 1489)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}

'''
'''--- pallets/election/Cargo.toml ---
[package]
name = "pallet-election"
version = "4.0.0-dev"
description = "FRAME pallet template for defining custom runtime logic."
authors = ["Substrate DevHub <https://github.com/substrate-developer-hub>"]
homepage = "https://substrate.io"
edition = "2021"
license = "MIT-0"
publish = false
repository = "https://github.com/substrate-developer-hub/substrate-node-template/"

[package.metadata.docs.rs]
targets = ["x86_64-unknown-linux-gnu"]

[dependencies]
codec = { package = "parity-scale-codec", version = "3.2.2", default-features = false, features = [
	"derive",
] }
scale-info = { version = "2.5.0", default-features = false, features = ["derive"] }
frame-benchmarking = { version = "4.0.0-dev", default-features = false, optional = true, git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
frame-support = { version = "4.0.0-dev", default-features = false, git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
frame-system = { version = "4.0.0-dev", default-features = false, git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
pallet-balances = { default-features = false, version = "4.0.0-dev", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
sp-npos-elections = { default-features = false, version = "4.0.0-dev", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
sp-runtime = {  default-features = false, version = "7.0.0", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
log = { default-features= false, version="0.4"}

[dev-dependencies]
sp-core = { version = "7.0.0", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
sp-io = { version = "7.0.0", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
sp-runtime = { version = "7.0.0", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
frame-support-test = { version = "3.0.0", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }

[features]
default = ["std"]
std = [
	"codec/std",
	"frame-benchmarking?/std",
	"frame-support/std",
	"frame-system/std",
	"scale-info/std",
	"pallet-balances/std",
	"sp-npos-elections/std",
	"sp-runtime/std",
	"log/std",
]
runtime-benchmarks = ["frame-benchmarking/runtime-benchmarks"]
try-runtime = ["frame-support/try-runtime"]

'''
'''--- pallets/election/README.md ---
License: MIT-0
'''
'''--- pallets/election/election-rpc/Cargo.toml ---
[package]
name = "election-rpc"
version = "0.1.0"
edition = "2021"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
codec = { package = "parity-scale-codec", version = "3.2.2", default-features = false, features = [
	"derive",
] }
jsonrpc-core = {version = "18.0.0", features = ["arbitrary_precision"]}
jsonrpc-core-client = "18.0"
jsonrpc-derive = "18.0"
sc-rpc = { version = "4.0.0-dev", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
sp-api = { default-features = false, version = "4.0.0-dev", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
sc-rpc-api = { version = "0.10.0-dev", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
sp-blockchain = { version = "4.0.0-dev", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
sp-runtime = { default-features = false, version = "6.0.0", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }

election-runtime-api ={ path="../election-runtime-api", default-features = false}

[features]
default = ["std"]
std = [
  "sp-api/std",
  "sp-runtime/std",
  "election-runtime-api/std"
]

'''
'''--- pallets/election/election-rpc/src/lib.rs ---
use jsonrpc_core::{Error as RpcError, ErrorCode, Result};
use jsonrpc_derive::rpc;
use election_runtime_api::ElectionApi as ElectionRuntimeApi;
use sp_api::codec::Codec;
use sp_api::ProvideRuntimeApi;
use sp_blockchain::HeaderBackend;
use sp_runtime::{generic::BlockId, traits::Block as BlockT};
use std::sync::Arc;

#[rpc]
pub trait ElectionApi<BlockHash, AccountId> {
	#[rpc(name = "election_candidateids")]
	fn candidate_ids(
		&self,
		departmentid: u128,
		at: Option<BlockHash>,
	) -> Result<Vec<AccountId>>;

	#[rpc(name = "election_membersids")]
	fn members_ids(
		&self,
		departmentid: u128,
		at: Option<BlockHash>,
	) -> Result<Vec<AccountId>>;

	#[rpc(name = "election_runnersupids")]
	fn runners_up_ids(
		&self,
		departmentid: u128,
		at: Option<BlockHash>,
	) -> Result<Vec<AccountId>>;
	
}

/// A struct that implements the `SumStorageApi`.
pub struct Election<C, M> {
	// If you have more generics, no need to SumStorage<C, M, N, P, ...>
	// just use a tuple like SumStorage<C, (M, N, P, ...)>
	client: Arc<C>,
	_marker: std::marker::PhantomData<M>,
}

impl<C, M> Election<C, M> {
	/// Create new `SumStorage` instance with the given reference to the client.
	pub fn new(client: Arc<C>) -> Self {
		Self { client, _marker: Default::default() }
	}
}

impl<C, Block, AccountId> ElectionApi<<Block as BlockT>::Hash, AccountId> for Election<C, Block>
where
	Block: BlockT,
	AccountId: Codec,
	C: Send + Sync + 'static,
	C: ProvideRuntimeApi<Block>,
	C: HeaderBackend<Block>,
	C::Api: ElectionRuntimeApi<Block, AccountId>,
{
	fn candidate_ids(
		&self,
		departmentid: u128,
		at: Option<<Block as BlockT>::Hash>,
	) -> Result<Vec<AccountId>> {
		let api = self.client.runtime_api();
		let at = BlockId::hash(at.unwrap_or_else(||
			// If the block hash is not supplied assume the best block.
			self.client.info().best_hash));

		let runtime_api_result = api.candidate_ids(&at, departmentid);
		runtime_api_result.map_err(|e| RpcError {
			code: ErrorCode::ServerError(9876), // No real reason for this value
			message: "Something wrong".into(),
			data: Some(format!("{:?}", e).into()),
		})
	}

	fn members_ids(
		&self,
		departmentid: u128,
		at: Option<<Block as BlockT>::Hash>,
	) -> Result<Vec<AccountId>> {
		let api = self.client.runtime_api();
		let at = BlockId::hash(at.unwrap_or_else(||
			// If the block hash is not supplied assume the best block.
			self.client.info().best_hash));

		let runtime_api_result = api.members_ids(&at, departmentid);
		runtime_api_result.map_err(|e| RpcError {
			code: ErrorCode::ServerError(9876), // No real reason for this value
			message: "Something wrong".into(),
			data: Some(format!("{:?}", e).into()),
		})
	}

	fn runners_up_ids(
		&self,
		departmentid: u128,
		at: Option<<Block as BlockT>::Hash>,
	) -> Result<Vec<AccountId>> {
		let api = self.client.runtime_api();
		let at = BlockId::hash(at.unwrap_or_else(||
			// If the block hash is not supplied assume the best block.
			self.client.info().best_hash));

		let runtime_api_result = api.runners_up_ids(&at, departmentid);
		runtime_api_result.map_err(|e| RpcError {
			code: ErrorCode::ServerError(9876), // No real reason for this value
			message: "Something wrong".into(),
			data: Some(format!("{:?}", e).into()),
		})
	}
}
'''
'''--- pallets/election/election-runtime-api/Cargo.toml ---
[package]
name = "election-runtime-api"
version = "0.1.0"
edition = "2021"
license = "GPL-3.0-or-later"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
sp-api = { default-features = false, version = "4.0.0-dev", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
frame-support = { default-features = false, version = "4.0.0-dev", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42"}

[features]
default = ["std"]
std = [
	"sp-api/std",
    "frame-support/std",
]

'''
'''--- pallets/election/election-runtime-api/src/lib.rs ---
#![cfg_attr(not(feature = "std"), no_std)]

use frame_support::sp_std::{prelude::*};
use sp_api::codec::Codec;

sp_api::decl_runtime_apis! {
	pub trait ElectionApi<AccountId> where AccountId: Codec{
		fn candidate_ids(departmentid: u128) -> Vec<AccountId>;
		fn members_ids(departmentid: u128) -> Vec<AccountId>;
		fn runners_up_ids(departmentid: u128) -> Vec<AccountId>;
	}
}
'''
'''--- pallets/election/src/benchmarking.rs ---
//! Benchmarking setup for pallet-template
#![cfg(feature = "runtime-benchmarks")]
use super::*;

#[allow(unused)]
use crate::Pallet as Template;
use frame_benchmarking::v2::*;
use frame_system::RawOrigin;

#[benchmarks]
mod benchmarks {
	use super::*;

	#[benchmark]
	fn do_something() {
		let value = 100u32.into();
		let caller: T::AccountId = whitelisted_caller();
		#[extrinsic_call]
		do_something(RawOrigin::Signed(caller), value);

		assert_eq!(Something::<T>::get(), Some(value));
	}

	#[benchmark]
	fn cause_error() {
		Something::<T>::put(100u32);
		let caller: T::AccountId = whitelisted_caller();
		#[extrinsic_call]
		cause_error(RawOrigin::Signed(caller));

		assert_eq!(Something::<T>::get(), Some(101u32));
	}

	impl_benchmark_test_suite!(Template, crate::mock::new_test_ext(), crate::mock::Test);
}

'''
'''--- pallets/election/src/extras.rs ---
use crate::*;

impl<T: Config> Pallet<T> {
	/// Get a concatenation of previous members and runners-up and their deposits.
	///
	/// These accounts are essentially treated as candidates.
	pub(super) fn implicit_candidates_with_deposit(
		departmentid: u128,
	) -> Vec<(T::AccountId, BalanceOf<T>)> {
		// invariant: these two are always without duplicates.
		Self::members(departmentid)
			.into_iter()
			.map(|m| (m.who, m.deposit))
			.chain(Self::runners_up(departmentid).into_iter().map(|r| (r.who, r.deposit)))
			.collect::<Vec<_>>()
	}

	/// Check if `who` is a candidate. It returns the insert index if the element does not exists as
	/// an error.
	pub(super) fn is_candidate(who: &T::AccountId, departmentid: u128) -> Result<(), usize> {
		Self::candidates(departmentid).binary_search_by(|c| c.0.cmp(who)).map(|_| ())
	}

	/// Check if `who` is a voter. It may or may not be a _current_ one.
	pub(super) fn _is_voter(who: &T::AccountId, departmentid: u128) -> bool {
		Voting::<T>::contains_key(departmentid, who)
	}

	/// Check if `who` is currently an active member.
	pub(super) fn is_member(who: &T::AccountId, departmentid: u128) -> bool {
		Self::members(departmentid).binary_search_by(|m| m.who.cmp(who)).is_ok()
	}

	/// Check if `who` is currently an active runner-up.
	pub(super) fn is_runner_up(who: &T::AccountId, departmentid: u128) -> bool {
		Self::runners_up(departmentid).iter().any(|r| &r.who == who)
	}

	pub fn candidate_ids(departmentid: u128) -> Vec<T::AccountId> {
		Self::candidates(departmentid)
			.into_iter()
			.map(|(c, _)| c)
			.collect::<Vec<T::AccountId>>()
	}

	/// Get the members' account ids.
	pub fn members_ids(departmentid: u128) -> Vec<T::AccountId> {
		Self::members(departmentid)
			.into_iter()
			.map(|m| m.who)
			.collect::<Vec<T::AccountId>>()
	}

	pub fn runners_up_ids(departmentid: u128) -> Vec<T::AccountId> {
		Self::runners_up(departmentid)
			.into_iter()
			.map(|r| r.who)
			.collect::<Vec<T::AccountId>>()
	}

	

	pub(super) fn remove_and_replace_member(
		who: &T::AccountId,
		slash: bool,
		departmentid: u128,
	) -> Result<bool, DispatchError> {
		// closure will return:
		// - `Ok(Option(replacement))` if member was removed and replacement was replaced.
		// - `Ok(None)` if member was removed but no replacement was found
		// - `Err(_)` if who is not a member.
		<Members<T>>::try_mutate::<_, _, Error<T>, _>(departmentid, |members| {
			let remove_index = members
				.binary_search_by(|m| m.who.cmp(who))
				.map_err(|_| Error::<T>::NotMember)?;
			// we remove the member anyhow, regardless of having a runner-up or not.
			let removed = members.remove(remove_index);

			// slash or unreserve
			if slash {
				let (imbalance, _remainder) = T::Currency::slash_reserved(who, removed.deposit);
				debug_assert!(_remainder.is_zero());
				T::LoserCandidate::on_unbalanced(imbalance);
				Self::deposit_event(Event::SeatHolderSlashed {
					seat_holder: who.clone(),
					amount: removed.deposit,
				});
			} else {
				T::Currency::unreserve(who, removed.deposit);
			}

			let maybe_next_best =
				<RunnersUp<T>>::mutate(departmentid, |r| r.pop()).map(|next_best| {
					// defensive-only: Members and runners-up are disjoint. This will always be err and
					// give us an index to insert.
					if let Err(index) = members.binary_search_by(|m| m.who.cmp(&next_best.who)) {
						members.insert(index, next_best.clone());
					} else {
						// overlap. This can never happen. If so, it seems like our intended replacement
						// is already a member, so not much more to do.
						log::error!(
							target: "runtime::elections-phragmen",
							"A member seems to also be a runner-up.",
						);
					}
					next_best
				});
			Ok(maybe_next_best)
		})?;

		Ok(true)
	}
}

'''
'''--- pallets/election/src/lib.rs ---
#![cfg_attr(not(feature = "std"), no_std)]

/// Edit this file to define custom logic or remove it if it is not needed.
/// Learn more about FRAME and the core library of Substrate FRAME pallets:
/// <https://docs.substrate.io/reference/frame-pallets/>
pub use pallet::*;

#[cfg(test)]
mod mock;

#[cfg(test)]
mod tests;

#[cfg(feature = "runtime-benchmarks")]
mod benchmarking;
pub mod weights;
pub use weights::*;

mod extras;
mod types;

/// The maximum votes allowed per voter.
pub const MAXIMUM_VOTE: usize = 16;

use crate::types::{DepartmentDetails, Renouncing, SeatHolder, Voter};

use frame_support::traits::{
	defensive_prelude::*, Currency, CurrencyToVote, Get, OnUnbalanced, ReservableCurrency,
};
use sp_npos_elections::{ElectionResult, ExtendedBalance};
use sp_runtime::{traits::Zero, DispatchError, Perbill};

pub type BlockNumberOf<T> = <T as frame_system::Config>::BlockNumber;
type PositiveImbalanceOf<T> = <<T as Config>::Currency as Currency<
	<T as frame_system::Config>::AccountId,
>>::PositiveImbalance;
type NegativeImbalanceOf<T> = <<T as Config>::Currency as Currency<
	<T as frame_system::Config>::AccountId,
>>::NegativeImbalance;

type AccountIdOf<T> = <T as frame_system::Config>::AccountId;
type BalanceOf<T> = <<T as Config>::Currency as Currency<AccountIdOf<T>>>::Balance;

#[frame_support::pallet]
pub mod pallet {
	use super::*;
	use frame_support::pallet_prelude::*;
	use frame_system::pallet_prelude::*;

	#[pallet::pallet]
	#[pallet::without_storage_info]
	pub struct Pallet<T>(_);

	/// Configure the pallet by specifying the parameters and types on which it depends.
	#[pallet::config]
	pub trait Config: frame_system::Config {
		/// Because this pallet emits events, it depends on the runtime's definition of an event.
		type RuntimeEvent: From<Event<Self>> + IsType<<Self as frame_system::Config>::RuntimeEvent>;
		/// Type representing the weight of this pallet
		type WeightInfo: WeightInfo;

		type Currency: ReservableCurrency<Self::AccountId>;
		/// Handler for the unbalanced increment when rewarding (minting rewards)
		type Reward: OnUnbalanced<PositiveImbalanceOf<Self>>;

		/// Handler for the unbalanced decrement when slashing (burning collateral)
		type Slash: OnUnbalanced<NegativeImbalanceOf<Self>>;

		/// Handler for the unbalanced reduction when a candidate has lost (and is not a runner-up)
		type LoserCandidate: OnUnbalanced<NegativeImbalanceOf<Self>>;

		/// Handler for the unbalanced reduction when a member has been kicked.
		type KickedMember: OnUnbalanced<NegativeImbalanceOf<Self>>;

		/// Convert a balance into a number used for election calculation.
		/// This must fit into a `u64` but is allowed to be sensibly lossy.
		type CurrencyToVote: CurrencyToVote<BalanceOf<Self>>;

		#[pallet::constant]
		type CandidacyBond: Get<BalanceOf<Self>>;
	}

	// The pallet's runtime storage items.
	// https://docs.substrate.io/main-docs/build/runtime-storage/
	#[pallet::storage]
	#[pallet::getter(fn something)]
	// Learn more about declaring storage items:
	// https://docs.substrate.io/main-docs/build/runtime-storage/#declaring-storage-items
	pub type Something<T> = StorageValue<_, u32>;

	#[pallet::storage]
	#[pallet::getter(fn candidates)]
	pub type Candidates<T: Config> =
		StorageMap<_, Blake2_128Concat, u128, Vec<(T::AccountId, BalanceOf<T>)>, ValueQuery>; // departmentid => Vec(Candidate Account Id and deposit)

	// Departments will remain in separate pallet
	#[pallet::storage]
	#[pallet::getter(fn department_count)]
	pub type DepartmentCount<T> = StorageValue<_, u128, ValueQuery>;

	#[pallet::storage]
	#[pallet::getter(fn location_count)]
	pub type LocationCount<T> = StorageValue<_, u128, ValueQuery>;

	#[pallet::storage]
	#[pallet::getter(fn department)]
	pub type Department<T> = StorageMap<_, Blake2_128Concat, u128, DepartmentDetails>;

	#[pallet::type_value]
	pub fn DefaultDesiredMembers<T: Config>() -> u128 {
		2
	}

	#[pallet::type_value]
	pub fn DefaultDesiredRunnersUp<T: Config>() -> u128 {
		2
	}

	#[pallet::storage]
	#[pallet::getter(fn desired_members)]
	pub type DesiredMembers<T> =
		StorageMap<_, Blake2_128Concat, u128, u128, ValueQuery, DefaultDesiredMembers<T>>; // Department id => desired seats

	#[pallet::storage]
	#[pallet::getter(fn desired_runnersup)]
	pub type DesiredRunnersup<T> =
		StorageMap<_, Blake2_128Concat, u128, u128, ValueQuery, DefaultDesiredRunnersUp<T>>; // department id => desired runnersup

	// The current elected members.
	///
	/// Invariant: Always sorted based on account id.
	#[pallet::storage]
	#[pallet::getter(fn members)]
	pub type Members<T: Config> = StorageMap<
		_,
		Blake2_128Concat,
		u128,
		Vec<SeatHolder<T::AccountId, BalanceOf<T>>>,
		ValueQuery,
	>; // department id => Vec <SeatHolder>

	/// The current reserved runners-up.
	///
	/// Invariant: Always sorted based on rank (worse to best). Upon removal of a member, the
	/// last (i.e. _best_) runner-up will be replaced.
	#[pallet::storage]
	#[pallet::getter(fn runners_up)]
	pub type RunnersUp<T: Config> = StorageMap<
		_,
		Blake2_128Concat,
		u128,
		Vec<SeatHolder<T::AccountId, BalanceOf<T>>>,
		ValueQuery,
	>; // department id => Vec<SeatHolder>

	/// Votes and experience score with score schelling game of a particular voter.
	///
	/// TWOX-NOTE: SAFE as `AccountId` is a crypto hash.
	#[pallet::storage]
	#[pallet::getter(fn voting)]
	pub type Voting<T: Config> = StorageDoubleMap<
		_,
		Twox64Concat,
		u128,
		Twox64Concat,
		T::AccountId,
		Voter<T::AccountId>,
		ValueQuery,
	>;

	// Pallets use events to inform users when important changes are made.
	// https://docs.substrate.io/main-docs/build/events-errors/
	#[pallet::event]
	#[pallet::generate_deposit(pub(super) fn deposit_event)]
	pub enum Event<T: Config> {
		/// Event documentation should end with an array that provides descriptive names for event
		/// parameters. [something, who]
		SomethingStored { something: u32, who: T::AccountId },
		EmptyTerm,
		/// Note that old members and runners-up are also candidates.
		CandidateSlashed {
			candidate: <T as frame_system::Config>::AccountId,
			amount: BalanceOf<T>,
		},
		ElectionError,
		/// A seat holder was slashed by amount by being forcefully removed from the set.
		SeatHolderSlashed {
			seat_holder: <T as frame_system::Config>::AccountId,
			amount: BalanceOf<T>,
		},
		/// Someone has renounced their candidacy.
		Renounced {
			candidate: <T as frame_system::Config>::AccountId,
		},
	}

	// Errors inform users that something went wrong.
	#[pallet::error]
	pub enum Error<T> {
		/// Error names should be descriptive.
		NoneValue,
		/// Errors should have helpful documentation associated with them.
		StorageOverflow,
		EmptyTermError,
		MaximumVotesExceeded,
		NoVotes,
		UnableToVote,
		TooManyVotes,
		InvalidWitnessData,
		DuplicatedCandidate,
		MemberSubmit,
		RunnerUpSubmit,
		InsufficientCandidateFunds,
		NotMember,
		InvalidRenouncing,
	}

	// Dispatchable functions allows users to interact with the pallet and invoke state changes.
	// These functions materialize as "extrinsics", which are often compared to transactions.
	// Dispatchable functions must be annotated with a weight and must return a DispatchResult.
	#[pallet::call]
	impl<T: Config> Pallet<T> {

		#[pallet::call_index(0)]
		#[pallet::weight(Weight::from_parts(10_000, u64::MAX) + T::DbWeight::get().writes(1))]
		// We get scores of the who for score schelling game pallet 🟩
		pub fn vote(
			origin: OriginFor<T>,
			departmentid: u128,
			votes: Vec<T::AccountId>,
			score: u64,
		) -> DispatchResultWithPostInfo {
			let who = ensure_signed(origin)?;

			// votes should not be empty and more than `MAXIMUM_VOTE` in any case.
			ensure!(votes.len() <= MAXIMUM_VOTE, Error::<T>::MaximumVotesExceeded);
			ensure!(!votes.is_empty(), Error::<T>::NoVotes);

			let candidates_count = <Candidates<T>>::decode_len(&departmentid).unwrap_or(0);
			let members_count = <Members<T>>::decode_len(&departmentid).unwrap_or(0);
			let runners_up_count = <RunnersUp<T>>::decode_len(&departmentid).unwrap_or(0);

			// can never submit a vote of there are no members, and cannot submit more votes than
			// all potential vote targets.
			// addition is valid: candidates, members and runners-up will never overlap.
			let allowed_votes =
				candidates_count.saturating_add(members_count).saturating_add(runners_up_count);
			ensure!(!allowed_votes.is_zero(), Error::<T>::UnableToVote);
			ensure!(votes.len() <= allowed_votes, Error::<T>::TooManyVotes);

			Voting::<T>::insert(&departmentid, &who, Voter { votes, score });

			Ok(None.into())
		}
        

		/// Submit oneself for candidacy. A fixed amount of deposit is recorded.
		///
		/// All candidates are wiped at the end of the term. They either become a member/runner-up,
		/// or leave the system while their deposit is slashed.
		///
		/// The dispatch origin of this call must be signed.
		///
		/// ### Warning
		///
		/// Even if a candidate ends up being a member, they must call [`Call::renounce_candidacy`]
		/// to get their deposit back. Losing the spot in an election will always lead to a slash.
		///
		/// # <weight>
		/// The number of current candidates must be provided as witness data.
		/// # </weight>
		/// 
		#[pallet::call_index(1)]
		#[pallet::weight(Weight::from_parts(10_000, u64::MAX) + T::DbWeight::get().writes(1))]
		pub fn submit_candidacy(
			origin: OriginFor<T>,
			departmentid: u128,
			#[pallet::compact] candidate_count: u32,
		) -> DispatchResultWithPostInfo {
			let who = ensure_signed(origin)?;

			let actual_count = <Candidates<T>>::decode_len(&departmentid).unwrap_or(0);
			ensure!(actual_count as u32 <= candidate_count, Error::<T>::InvalidWitnessData);

			let index = Self::is_candidate(&who, departmentid)
				.err()
				.ok_or(Error::<T>::DuplicatedCandidate)?;

			ensure!(!Self::is_member(&who, departmentid), Error::<T>::MemberSubmit);
			ensure!(!Self::is_runner_up(&who, departmentid), Error::<T>::RunnerUpSubmit);

			T::Currency::reserve(&who, T::CandidacyBond::get())
				.map_err(|_| Error::<T>::InsufficientCandidateFunds)?;

			<Candidates<T>>::mutate(departmentid, |c| {
				c.insert(index, (who, T::CandidacyBond::get()))
			});
			Ok(None.into())
		}

		#[pallet::call_index(2)]
		#[pallet::weight(Weight::from_parts(10_000, u64::MAX) + T::DbWeight::get().writes(1))]
		pub fn renounce_candidacy(
			origin: OriginFor<T>,
			renouncing: Renouncing,
			departmentid: u128,
		) -> DispatchResultWithPostInfo {
			let who = ensure_signed(origin)?;
			match renouncing {
				Renouncing::Member => {
					let _ = Self::remove_and_replace_member(&who, false, departmentid)
						.map_err(|_| Error::<T>::InvalidRenouncing)?;
					Self::deposit_event(Event::Renounced { candidate: who });
				},
				Renouncing::RunnerUp => {
					<RunnersUp<T>>::try_mutate::<_, _, Error<T>, _>(departmentid, |runners_up| {
						let index = runners_up
							.iter()
							.position(|SeatHolder { who: r, .. }| r == &who)
							.ok_or(Error::<T>::InvalidRenouncing)?;
						// can't fail anymore.
						let SeatHolder { deposit, .. } = runners_up.remove(index);
						let _remainder = T::Currency::unreserve(&who, deposit);
						debug_assert!(_remainder.is_zero());
						Self::deposit_event(Event::Renounced { candidate: who });
						Ok(())
					})?;
				},
				Renouncing::Candidate(count) => {
					<Candidates<T>>::try_mutate::<_, _, Error<T>, _>(departmentid, |candidates| {
						ensure!(count >= candidates.len() as u32, Error::<T>::InvalidWitnessData);
						let index = candidates
							.binary_search_by(|(c, _)| c.cmp(&who))
							.map_err(|_| Error::<T>::InvalidRenouncing)?;
						let (_removed, deposit) = candidates.remove(index);
						let _remainder = T::Currency::unreserve(&who, deposit);
						debug_assert!(_remainder.is_zero());
						Self::deposit_event(Event::Renounced { candidate: who });
						Ok(())
					})?;
				},
			};
			Ok(None.into())
		}

		#[pallet::call_index(3)]
		#[pallet::weight(Weight::from_parts(10_000, u64::MAX) + T::DbWeight::get().writes(1))]
		pub fn do_phragmen(origin: OriginFor<T>, departmentid: u128) -> DispatchResult {
			let _who = ensure_signed(origin)?;
			let desired_seats = <DesiredMembers<T>>::get(&departmentid) as usize;
			let desired_runners_up = <DesiredRunnersup<T>>::get(&departmentid) as usize;
			let num_to_elect = desired_runners_up + desired_seats;
			let mut candidates_and_deposit = Self::candidates(&departmentid);

			// add all the previous members and runners-up as candidates as well.
			candidates_and_deposit
				.append(&mut Self::implicit_candidates_with_deposit(departmentid));
			if candidates_and_deposit.len().is_zero() {
				Self::deposit_event(Event::EmptyTerm);
				Err(Error::<T>::EmptyTermError)?;
			}

			// All of the new winners that come out of phragmen will thus have a deposit recorded.
			let candidate_ids =
				candidates_and_deposit.iter().map(|(x, _)| x).cloned().collect::<Vec<_>>();

			// helper closures to deal with balance/stake.
			let total_issuance = T::Currency::total_issuance();
			let _to_votes = |b: BalanceOf<T>| T::CurrencyToVote::to_vote(b, total_issuance);
			let to_balance = |e: ExtendedBalance| T::CurrencyToVote::to_currency(e, total_issuance);
			let voters_and_score = <Voting<T>>::iter_prefix(&departmentid)
				.map(|(voter, Voter { score, votes, .. })| (voter, score, votes))
				.collect::<Vec<_>>();

			let _ = sp_npos_elections::seq_phragmen(
				num_to_elect,
				candidate_ids,
				voters_and_score,
				None,
			)
			.map(|ElectionResult::<T::AccountId, Perbill> { winners, assignments: _ }| {
				// this is already sorted by id.
				let _old_members_ids_sorted = <Members<T>>::take(departmentid)
					.into_iter()
					.map(|m| m.who)
					.collect::<Vec<T::AccountId>>();

				// this one needs a sort by id
				let mut old_runners_up_ids_sorted = <RunnersUp<T>>::take(departmentid)
					.into_iter()
					.map(|r| r.who)
					.collect::<Vec<T::AccountId>>();
				old_runners_up_ids_sorted.sort();

				// filter out those who end up with no backing stake.
				let mut new_set_with_stake = winners
					.into_iter()
					.filter_map(|(m, b)| if b.is_zero() { None } else { Some((m, to_balance(b))) })
					.collect::<Vec<(T::AccountId, BalanceOf<T>)>>();
				// split new set into winners and runners up.
				let split_point = desired_seats.min(new_set_with_stake.len());
				let mut new_members_sorted_by_id =
					new_set_with_stake.drain(..split_point).collect::<Vec<_>>();
				new_members_sorted_by_id.sort_by(|i, j| i.0.cmp(&j.0));

				// all the rest will be runners-up
				new_set_with_stake.reverse();
				let new_runners_up_sorted_by_rank = new_set_with_stake;
				let mut new_runners_up_ids_sorted = new_runners_up_sorted_by_rank
					.iter()
					.map(|(r, _)| r.clone())
					.collect::<Vec<_>>();
				new_runners_up_ids_sorted.sort();

				// new_members_sorted_by_id is sorted by account id.
				let new_members_ids_sorted = new_members_sorted_by_id
					.iter()
					.map(|(m, _)| m.clone())
					.collect::<Vec<T::AccountId>>();

				// All candidates/members/runners-up who are no longer retaining a position as a
				// seat holder will lose their bond.
				candidates_and_deposit.iter().for_each(|(c, d)| {
					if new_members_ids_sorted.binary_search(c).is_err()
						&& new_runners_up_ids_sorted.binary_search(c).is_err()
					{
						let (imbalance, _) = T::Currency::slash_reserved(c, *d);
						T::LoserCandidate::on_unbalanced(imbalance);
						Self::deposit_event(Event::CandidateSlashed {
							candidate: c.clone(),
							amount: *d,
						});
					}
				});
				// write final values to storage.
				let deposit_of_candidate = |x: &T::AccountId| -> BalanceOf<T> {
					// defensive-only. This closure is used against the new members and new
					// runners-up, both of which are phragmen winners and thus must have
					// deposit.
					candidates_and_deposit
						.iter()
						.find_map(|(c, d)| if c == x { Some(*d) } else { None })
						.defensive_unwrap_or_default()
				};

				// fetch deposits from the one recorded one. This will make sure that a
				// candidate who submitted candidacy before a change to candidacy deposit will
				// have the correct amount recorded.
				<Members<T>>::insert(
					departmentid,
					new_members_sorted_by_id
						.iter()
						.map(|(who, stake)| SeatHolder {
							deposit: deposit_of_candidate(who),
							who: who.clone(),
							stake: *stake,
						})
						.collect::<Vec<_>>(),
				);

				<RunnersUp<T>>::insert(
					departmentid,
					new_runners_up_sorted_by_rank
						.into_iter()
						.map(|(who, stake)| SeatHolder {
							deposit: deposit_of_candidate(&who),
							who,
							stake,
						})
						.collect::<Vec<_>>(),
				);

				// clean candidates.
				<Candidates<T>>::remove(&departmentid);
			})
			.map_err(|e| {
				log::error!(
					target: "runtime::elections-phragmen",
					"Failed to run election [{:?}].",
					e,
				);
				Self::deposit_event(Event::ElectionError);
			});

			Ok(())
		}

	}
}

'''
'''--- pallets/election/src/mock.rs ---
use crate as pallet_template;
use frame_support::{parameter_types,dispatch::DispatchResultWithPostInfo, traits::{ConstU16, ConstU64}};
use sp_core::H256;
use sp_runtime::{
	testing::Header,
	traits::{BlakeTwo256, IdentityLookup},
};

type UncheckedExtrinsic = frame_system::mocking::MockUncheckedExtrinsic<Test>;
type Block = frame_system::mocking::MockBlock<Test>;

// Configure a mock runtime to test the pallet.
frame_support::construct_runtime!(
	pub enum Test where
		Block = Block,
		NodeBlock = Block,
		UncheckedExtrinsic = UncheckedExtrinsic,
	{
		System: frame_system,
		Elections: pallet_template,
		Balances: pallet_balances,
	}
);

impl frame_system::Config for Test {
	type BaseCallFilter = frame_support::traits::Everything;
	type BlockWeights = ();
	type BlockLength = ();
	type DbWeight = ();
	type RuntimeOrigin = RuntimeOrigin;
	type RuntimeCall = RuntimeCall;
	type Index = u64;
	type BlockNumber = u64;
	type Hash = H256;
	type Hashing = BlakeTwo256;
	type AccountId = u64;
	type Lookup = IdentityLookup<Self::AccountId>;
	type Header = Header;
	type RuntimeEvent = RuntimeEvent;
	type BlockHashCount = ConstU64<250>;
	type Version = ();
	type PalletInfo = PalletInfo;
	type OnNewAccount = ();
	type OnKilledAccount = ();
	type SystemWeightInfo = ();
	type SS58Prefix = ConstU16<42>;
	type OnSetCode = ();
	type MaxConsumers = frame_support::traits::ConstU32<16>;
	type AccountData = pallet_balances::AccountData<u64>; // New code
}

parameter_types! {
	pub const ExistentialDeposit: u64 = 1;
	pub static CandidacyBond: u64 = 3;
}

impl pallet_template::Config for Test {
	type RuntimeEvent = RuntimeEvent;
	type WeightInfo = ();
	type Currency = Balances; // New code
	type Slash = ();
	type Reward = ();
	type LoserCandidate = ();
	type KickedMember = ();
	type CurrencyToVote = frame_support::traits::SaturatingCurrencyToVote;
	type CandidacyBond = CandidacyBond;
}

impl pallet_balances::Config for Test {
	type MaxLocks = ();
	type MaxReserves = ();
	type ReserveIdentifier = [u8; 8];
	type Balance = u64;
	type DustRemoval = ();
	type RuntimeEvent = RuntimeEvent;
	type ExistentialDeposit = ConstU64<1>;
	type WeightInfo = ();
	type FreezeIdentifier = ();
	type MaxFreezes = ();
	type MaxHolds = ();
	type HoldIdentifier = ();
	type AccountStore = System;
}

// Build genesis storage according to the mock runtime.
pub fn new_test_ext() -> sp_io::TestExternalities {
	let mut t = frame_system::GenesisConfig::default().build_storage::<Test>().unwrap();
	pallet_balances::GenesisConfig::<Test> {
		balances: vec![
			(1, 100000),
			(2, 200000),
			(3, 300000),
			(4, 300000),
			(5, 300000),
			(6, 300000),
			(7, 300000),
			(8, 300000),
			(9, 300000),
			(10, 300000),
			(11, 300000),
			(12, 300000),
			(13, 300000),
			(14, 300000),
			(15, 300000),
			(16, 300000),
			(17, 300000),
			(18, 300000),
			(19, 300000),
			(20, 300000),
			(21, 300000),
			(22, 300000),
			(23, 300000),
			(24, 300000),
			(25, 300000),
			(26, 300000),
			(27, 300000),
			(28, 300000),
			(29, 300000),
			(30, 300000),
			(31, 300000),
			(32, 300000),
			(33, 300000),
			(34, 300000),
			(35, 300000),
		],
	} // new code
	.assimilate_storage(&mut t)
	.unwrap();
	t.into()
}

pub(super) fn candidate_ids(departmentid: u128) -> Vec<u64> {
	Elections::candidates(departmentid)
		.into_iter()
		.map(|(c, _)| c)
		.collect::<Vec<_>>()
}

pub(super) fn balances(who: &u64) -> (u64, u64) {
	(Balances::free_balance(who), Balances::reserved_balance(who))
}

pub(super) fn submit_candidacy(origin: RuntimeOrigin, departmentid: u128) -> DispatchResultWithPostInfo {
	Elections::submit_candidacy(
		origin,
		departmentid,
		Elections::candidates(departmentid).len() as u32,
	)
}

pub(super) fn candidate_deposit(who: &u64, departmentid: u128) -> u64 {
	Elections::candidates(departmentid)
		.into_iter()
		.find_map(|(c, d)| if c == *who { Some(d) } else { None })
		.unwrap_or_default()
}

pub(super) fn vote(
	origin: RuntimeOrigin,
	departmentid: u128,
	votes: Vec<u64>,
	score: u64,
) -> DispatchResultWithPostInfo {
	Elections::vote(origin, departmentid, votes, score)
}

pub(super) fn runners_up_ids(departmentid: u128) -> Vec<u64> {
	Elections::runners_up(departmentid).into_iter().map(|r| r.who).collect::<Vec<_>>()
}

pub(super) fn members_ids(departmentid: u128) -> Vec<u64> {
	Elections::members_ids(departmentid)
}

'''
'''--- pallets/election/src/tests.rs ---
use crate::{mock::*, Error, Event};
use frame_support::{assert_noop, assert_ok};

#[test]
fn simple_candidate_submission_should_work() {
	new_test_ext().execute_with(|| {
		let departmentid = 1;
		assert_eq!(candidate_ids(departmentid), Vec::<u64>::new());
		assert!(Elections::is_candidate(&1, departmentid).is_err());
		assert!(Elections::is_candidate(&2, departmentid).is_err());
		assert_eq!(balances(&1), (100000, 0));
		assert_ok!(submit_candidacy(RuntimeOrigin::signed(1), departmentid));
		assert_eq!(balances(&1), (99997, 3));
		assert_eq!(candidate_ids(departmentid), vec![1]);

		assert!(Elections::is_candidate(&1, departmentid).is_ok());
		assert!(Elections::is_candidate(&2, departmentid).is_err());

		assert_eq!(balances(&2), (200000, 0));
		assert_ok!(submit_candidacy(RuntimeOrigin::signed(2), departmentid));
		assert_eq!(balances(&2), (199997, 3));

		assert_eq!(candidate_ids(departmentid), vec![1, 2]);

		assert!(Elections::is_candidate(&1, departmentid).is_ok());
		assert!(Elections::is_candidate(&2, departmentid).is_ok());

		assert_eq!(candidate_deposit(&1, departmentid), 3);
		assert_eq!(candidate_deposit(&2, departmentid), 3);
		assert_eq!(candidate_deposit(&3, departmentid), 0);
	});
}

#[test]
fn candidates_are_always_sorted() {
	new_test_ext().execute_with(|| {
		let departmentid = 1;
		assert_eq!(candidate_ids(departmentid), Vec::<u64>::new());
		assert_ok!(submit_candidacy(RuntimeOrigin::signed(3), departmentid));
		assert_eq!(candidate_ids(departmentid), vec![3]);
		assert_ok!(submit_candidacy(RuntimeOrigin::signed(1), departmentid));
		assert_eq!(candidate_ids(departmentid), vec![1, 3]);
		assert_ok!(submit_candidacy(RuntimeOrigin::signed(2), departmentid));
		assert_eq!(candidate_ids(departmentid), vec![1, 2, 3]);
		assert_ok!(submit_candidacy(RuntimeOrigin::signed(4), departmentid));
		assert_eq!(candidate_ids(departmentid), vec![1, 2, 3, 4]);
	});
}

#[test]
fn simple_voting_should_work() {
	new_test_ext().execute_with(|| {
		// Ensure the expected error is thrown when no value is present.
		let departmentid = 1;
		assert_eq!(candidate_ids(departmentid), Vec::<u64>::new());
		assert_ok!(submit_candidacy(RuntimeOrigin::signed(5), departmentid));
		assert_ok!(vote(RuntimeOrigin::signed(2), departmentid, vec![5], 20));
	});
}

#[test]
fn runners_up_should_be_kept() {
	new_test_ext().execute_with(|| {
		// Ensure the expected error is thrown when no value is present.
		let departmentid = 1;
		assert_ok!(submit_candidacy(RuntimeOrigin::signed(5), departmentid));
		assert_ok!(submit_candidacy(RuntimeOrigin::signed(4), departmentid));
		assert_ok!(submit_candidacy(RuntimeOrigin::signed(3), departmentid));
		assert_ok!(submit_candidacy(RuntimeOrigin::signed(2), departmentid));

		assert_ok!(vote(RuntimeOrigin::signed(2), departmentid, vec![3], 20));
		assert_ok!(vote(RuntimeOrigin::signed(3), departmentid, vec![2], 30));
		assert_ok!(vote(RuntimeOrigin::signed(4), departmentid, vec![5], 40));
		assert_ok!(vote(RuntimeOrigin::signed(5), departmentid, vec![4], 50));

		assert_ok!(Elections::do_phragmen(RuntimeOrigin::signed(2), departmentid));
		// sorted based on account id.
		assert_eq!(members_ids(departmentid), vec![4, 5]);
		// sorted based on merit (least -> most)
		assert_eq!(runners_up_ids(departmentid), vec![3, 2]);
	});
}

'''
'''--- pallets/election/src/types.rs ---
use frame_support::pallet_prelude::*;
use scale_info::TypeInfo;

#[derive(
	PartialEq, Eq, PartialOrd, Ord, Default, Clone, Encode, Decode, RuntimeDebug, TypeInfo,
)]
pub struct DepartmentDetails {
	pub name: Vec<u8>,
	pub locationid: u128,
	pub details: Vec<u8>,
	pub departmentid: u128,
}

/// A holder of a seat as either a member or a runner-up.
#[derive(Encode, Decode, Clone, Default, RuntimeDebug, PartialEq, TypeInfo)]
pub struct SeatHolder<AccountId, Balance> {
	/// The holder.
	pub who: AccountId,
	/// The total backing stake.
	pub stake: Balance,
	/// The amount of deposit held on-chain.
	///
	/// To be unreserved upon renouncing, or slashed upon being a loser.
	pub deposit: Balance,
}

/// An active voter.
#[derive(PartialEq, Eq, PartialOrd, Ord, Clone, Encode, Decode, TypeInfo)]
#[cfg_attr(feature = "std", derive(Debug))]
pub struct Voter<AccountId> {
	/// The members being backed.
	pub votes: Vec<AccountId>,
	/// The amount of stake placed on this vote.
	pub score: u64,
}

impl<AccountId> Default for Voter<AccountId> {
	fn default() -> Self {
		Self { votes: vec![], score: Default::default() }
	}
}

/// An indication that the renouncing account currently has which of the below roles.
#[derive(Encode, Decode, Clone, PartialEq, RuntimeDebug, TypeInfo)]
pub enum Renouncing {
	/// A member is renouncing.
	Member,
	/// A runner-up is renouncing.
	RunnerUp,
	/// A candidate is renouncing, while the given total number of candidates exists.
	Candidate(#[codec(compact)] u32),
}

'''
'''--- pallets/election/src/weights.rs ---

//! Autogenerated weights for pallet_template
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-04-06, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Alexs-MacBook-Pro-2.local`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ../../target/release/node-template
// benchmark
// pallet
// --chain
// dev
// --pallet
// pallet_template
// --extrinsic
// *
// --steps=50
// --repeat=20
// --execution=wasm
// --wasm-execution=compiled
// --output
// pallets/template/src/weights.rs
// --template
// ../../.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_template.
pub trait WeightInfo {
	fn do_something() -> Weight;
	fn cause_error() -> Weight;
}

/// Weights for pallet_template using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: TemplateModule Something (r:0 w:1)
	/// Proof: TemplateModule Something (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn do_something() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 8_000_000 picoseconds.
		Weight::from_parts(9_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: TemplateModule Something (r:1 w:1)
	/// Proof: TemplateModule Something (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn cause_error() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `32`
		//  Estimated: `1489`
		// Minimum execution time: 6_000_000 picoseconds.
		Weight::from_parts(6_000_000, 1489)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: TemplateModule Something (r:0 w:1)
	/// Proof: TemplateModule Something (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn do_something() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 8_000_000 picoseconds.
		Weight::from_parts(9_000_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: TemplateModule Something (r:1 w:1)
	/// Proof: TemplateModule Something (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn cause_error() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `32`
		//  Estimated: `1489`
		// Minimum execution time: 6_000_000 picoseconds.
		Weight::from_parts(6_000_000, 1489)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}

'''
'''--- pallets/positive-externality-validation/Cargo.toml ---
[package]
name = "positive-externality-validation"
version = "4.0.0-dev"
description = "FRAME pallet template for defining custom runtime logic."
authors = ["Substrate DevHub <https://github.com/substrate-developer-hub>"]
homepage = "https://substrate.io"
edition = "2021"
license = "MIT-0"
publish = false
repository = "https://github.com/substrate-developer-hub/substrate-node-template/"

[package.metadata.docs.rs]
targets = ["x86_64-unknown-linux-gnu"]

[dependencies]
codec = { package = "parity-scale-codec", version = "3.2.2", default-features = false, features = [
	"derive",
] }
scale-info = { version = "2.5.0", default-features = false, features = ["derive"] }
frame-benchmarking = { version = "4.0.0-dev", default-features = false, optional = true, git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
frame-support = { version = "4.0.0-dev", default-features = false, git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
frame-system = { version = "4.0.0-dev", default-features = false, git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
pallet-timestamp = { git = 'https://github.com/paritytech/substrate', branch = "polkadot-v0.9.42", default-features = false }
pallet-balances = { default-features = false, version = "4.0.0-dev", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
pallet-support = { default-features = false, path = '../support' }
shared-storage = { default-features = false, path="../shared-storage"}
shared-storage-link = { default-features = false, path="../../traits/shared-storage-link"}
schelling-game-shared = {default-features = false, path = "../schelling-game-shared"}
schelling-game-shared-link = {default-features = false, path = "../../traits/schelling-game-shared-link"}
sortition-sum-game = {default-features = false, path="../sortition-sum-game"}

[dev-dependencies]
sp-core = { version = "7.0.0", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
sp-io = { version = "7.0.0", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
sp-runtime = { version = "7.0.0", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
frame-support-test = { version = "3.0.0", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }

[features]
default = ["std"]
std = [
	"codec/std",
	"frame-benchmarking?/std",
	"frame-support/std",
	"frame-system/std",
	"scale-info/std",
	"pallet-timestamp/std",
	"pallet-balances/std",
	"pallet-support/std",
	"shared-storage/std",
	"schelling-game-shared/std",
	"sortition-sum-game/std",
]
runtime-benchmarks = ["frame-benchmarking/runtime-benchmarks"]
try-runtime = ["frame-support/try-runtime"]

'''
'''--- pallets/positive-externality-validation/README.md ---
License: MIT-0
'''
'''--- pallets/positive-externality-validation/src/benchmarking.rs ---
//! Benchmarking setup for pallet-template
#![cfg(feature = "runtime-benchmarks")]
use super::*;

#[allow(unused)]
use crate::Pallet as Template;
use frame_benchmarking::v2::*;
use frame_system::RawOrigin;

#[benchmarks]
mod benchmarks {
	use super::*;

	#[benchmark]
	fn do_something() {
		let value = 100u32.into();
		let caller: T::AccountId = whitelisted_caller();
		#[extrinsic_call]
		do_something(RawOrigin::Signed(caller), value);

		assert_eq!(Something::<T>::get(), Some(value));
	}

	#[benchmark]
	fn cause_error() {
		Something::<T>::put(100u32);
		let caller: T::AccountId = whitelisted_caller();
		#[extrinsic_call]
		cause_error(RawOrigin::Signed(caller));

		assert_eq!(Something::<T>::get(), Some(101u32));
	}

	impl_benchmark_test_suite!(Template, crate::mock::new_test_ext(), crate::mock::Test);
}

'''
'''--- pallets/positive-externality-validation/src/extras.rs ---
use frame_support::dispatch::DispatchResult;

use super::*;

impl<T: Config> PositiveExternalityPost<T> {
	pub fn new(id: PositiveExternalityPostId, created_by: T::AccountId, content: Content) -> Self {
		PositiveExternalityPost {
			id,
			created: new_who_and_when::<T>(created_by.clone()),
			edited: false,
			owner: created_by,
			content,
			hidden: false,
			upvotes_count: 0,
			downvotes_count: 0,
		}
	}

	pub fn ensure_owner(&self, account: &T::AccountId) -> DispatchResult {
		ensure!(self.is_owner(account), Error::<T>::NotAPostOwner);
		Ok(())
	}

	pub fn is_owner(&self, account: &T::AccountId) -> bool {
		self.owner == *account
	}
}

impl<T: Config> Pallet<T> {

	pub(super) fn get_phase_data() -> PhaseData<T> {
		T::SchellingGameSharedSource::create_phase_data(50, 5, 3, 100, (100, 100))
	}

	pub fn ensure_validation_on_positive_externality(account: T::AccountId) -> DispatchResult {
		let bool_data = ValidatePositiveExternality::<T>::get(account);
		ensure!(bool_data == true, Error::<T>::ValidationPositiveExternalityIsOff);

		Ok(())
	}

	pub fn ensure_min_stake_positive_externality(account: T::AccountId) -> DispatchResult {
		let stake = PositiveExternalityStakeBalance::<T>::get(account);
		let min_stake = MinimumPositiveExternalityStake::<T>::get();
		// println!("stake {:?}", stake);
		// println!("min stake {:?}", min_stake);
		ensure!(stake >= min_stake, Error::<T>::LessThanMinStake);

		Ok(())
	}

	pub(super) fn u64_to_balance_saturated(input: u64) -> BalanceOf<T> {
		input.saturated_into::<BalanceOf<T>>()
	}

	pub(super) fn u64_to_block_saturated(input: u64) -> BlockNumberOf<T> {
		input.saturated_into::<BlockNumberOf<T>>()
	}

	pub(super) fn get_drawn_jurors(user_to_calculate: T::AccountId) -> Vec<(T::AccountId, u64)> {
		let pe_block_number =
			<ValidationPositiveExternalityBlock<T>>::get(user_to_calculate.clone());

		let key = SumTreeName::PositiveExternality {
			user_address: user_to_calculate,
			block_number: pe_block_number.clone(),
		};

		T::SchellingGameSharedSource::get_drawn_jurors(key)
	}
}

'''
'''--- pallets/positive-externality-validation/src/lib.rs ---
#![cfg_attr(not(feature = "std"), no_std)]

/// Edit this file to define custom logic or remove it if it is not needed.
/// Learn more about FRAME and the core library of Substrate FRAME pallets:
/// <https://docs.substrate.io/reference/frame-pallets/>
pub use pallet::*;

#[cfg(test)]
mod mock;

#[cfg(test)]
mod tests;

#[cfg(feature = "runtime-benchmarks")]
mod benchmarking;
pub mod weights;
pub use weights::*;

mod extras;
pub mod types;
pub use types::{PositiveExternalityPost, FIRST_POST_ID};

use frame_support::sp_runtime::traits::Saturating;
use frame_support::sp_runtime::SaturatedConversion;
use frame_support::sp_std::prelude::*;
use frame_support::{
	dispatch::{DispatchError, DispatchResult},
	ensure, fail,
};
use frame_support::{
	traits::{Currency, ExistenceRequirement, Get, ReservableCurrency, WithdrawReasons},
	PalletId,
};
use pallet_support::{
	ensure_content_is_valid, new_who_and_when, remove_from_vec, Content, PositiveExternalityPostId,
	WhoAndWhen, WhoAndWhenOf,
};
use schelling_game_shared::types::{Period, RangePoint, SchellingGameType, PhaseData};
use schelling_game_shared_link::SchellingGameSharedLink;
use shared_storage_link::SharedStorageLink;
use sortition_sum_game::types::SumTreeName;
type AccountIdOf<T> = <T as frame_system::Config>::AccountId;
type BalanceOf<T> = <<T as Config>::Currency as Currency<AccountIdOf<T>>>::Balance;
pub type BlockNumberOf<T> = <T as frame_system::Config>::BlockNumber;
pub type SumTreeNameType<T> = SumTreeName<AccountIdOf<T>, BlockNumberOf<T>>;

#[frame_support::pallet(dev_mode)]
pub mod pallet {
	use super::*;
	use frame_support::pallet_prelude::*;
	use frame_system::pallet_prelude::*;

	#[pallet::pallet]
	#[pallet::without_storage_info]
	pub struct Pallet<T>(_);

	/// Configure the pallet by specifying the parameters and types on which it depends.
	#[pallet::config]
	pub trait Config: frame_system::Config + pallet_timestamp::Config + schelling_game_shared::Config {
		/// Because this pallet emits events, it depends on the runtime's definition of an event.
		type RuntimeEvent: From<Event<Self>> + IsType<<Self as frame_system::Config>::RuntimeEvent>;
		/// Type representing the weight of this pallet
		type WeightInfo: WeightInfo;

		type SharedStorageSource: SharedStorageLink<AccountId = AccountIdOf<Self>>;
		type SchellingGameSharedSource: SchellingGameSharedLink<
			SumTreeName = SumTreeName<Self::AccountId, Self::BlockNumber>,
			SchellingGameType = SchellingGameType,
			BlockNumber = Self::BlockNumber,
			AccountId = AccountIdOf<Self>,
			Balance = BalanceOf<Self>,
			RangePoint = RangePoint,
			Period = Period,
			PhaseData = PhaseData<Self>,
		>;
		type Currency: ReservableCurrency<Self::AccountId>;
	}

	// The pallet's runtime storage items.
	// https://docs.substrate.io/main-docs/build/runtime-storage/
	#[pallet::storage]
	#[pallet::getter(fn something)]
	// Learn more about declaring storage items:
	// https://docs.substrate.io/main-docs/build/runtime-storage/#declaring-storage-items
	pub type Something<T> = StorageValue<_, u32>;

	#[pallet::type_value]
	pub fn DefaultForNextPositiveExternalityPostId() -> PositiveExternalityPostId {
		FIRST_POST_ID
	}

	/// The next post id.
	#[pallet::storage]
	#[pallet::getter(fn next_positive_externality_post_id)]
	pub type NextPositiveExternalityPostId<T: Config> = StorageValue<
		_,
		PositiveExternalityPostId,
		ValueQuery,
		DefaultForNextPositiveExternalityPostId,
	>;

	/// Get the details of a post by its' id.
	#[pallet::storage]
	#[pallet::getter(fn positive_externality_post_by_id)]
	pub type PositiveExternalityPostById<T: Config> =
		StorageMap<_, Twox64Concat, PositiveExternalityPostId, PositiveExternalityPost<T>>;

	#[pallet::storage]
	#[pallet::getter(fn positive_externality_evidence)]
	pub type PositiveExternalityEvidence<T: Config> =
		StorageMap<_, Blake2_128Concat, T::AccountId, Vec<PositiveExternalityPostId>, ValueQuery>;

	#[pallet::type_value]
	pub fn MinimumPositiveExternalityStake<T: Config>() -> BalanceOf<T> {
		10000u128.saturated_into::<BalanceOf<T>>()
	}

	#[pallet::storage]
	#[pallet::getter(fn positive_externality_user_stake)]
	pub type PositiveExternalityStakeBalance<T: Config> =
		StorageMap<_, Twox64Concat, T::AccountId, BalanceOf<T>, ValueQuery>;

	#[pallet::storage]
	#[pallet::getter(fn validate_positive_externality)]
	pub type ValidatePositiveExternality<T: Config> =
		StorageMap<_, Twox64Concat, T::AccountId, bool, ValueQuery>;

	#[pallet::storage]
	#[pallet::getter(fn validation_positive_externality_block_number)]
	pub type ValidationPositiveExternalityBlock<T: Config> =
		StorageMap<_, Blake2_128Concat, T::AccountId, BlockNumberOf<T>, ValueQuery>;

	// Pallets use events to inform users when important changes are made.
	// https://docs.substrate.io/main-docs/build/events-errors/
	#[pallet::event]
	#[pallet::generate_deposit(pub(super) fn deposit_event)]
	pub enum Event<T: Config> {
		/// Event documentation should end with an array that provides descriptive names for event
		/// parameters. [something, who]
		SomethingStored { something: u32, who: T::AccountId },
	}

	// Errors inform users that something went wrong.
	#[pallet::error]
	pub enum Error<T> {
		/// Error names should be descriptive.
		NoneValue,
		/// Errors should have helpful documentation associated with them.
		StorageOverflow,
		NotAPostOwner,
		ValidationPositiveExternalityIsOff,
		LessThanMinStake,
		CannotStakeNow,
		ChoiceOutOfRange,
	}

	// Dispatchable functions allows users to interact with the pallet and invoke state changes.
	// These functions materialize as "extrinsics", which are often compared to transactions.
	// Dispatchable functions must be annotated with a weight and must return a DispatchResult.
	#[pallet::call]
	impl<T: Config> Pallet<T> {

		#[pallet::call_index(0)]
		#[pallet::weight(0)]
		pub fn create_positive_externality_post(
			origin: OriginFor<T>,
			content: Content,
		) -> DispatchResult {
			let creator = ensure_signed(origin)?;

			ensure_content_is_valid(content.clone())?;
			T::SharedStorageSource::check_citizen_is_approved_link(creator.clone())?;

			let new_post_id = Self::next_positive_externality_post_id();

			let new_post: PositiveExternalityPost<T> =
				PositiveExternalityPost::new(new_post_id, creator.clone(), content.clone());

			PositiveExternalityEvidence::<T>::mutate(creator, |ids| ids.push(new_post_id));

			PositiveExternalityPostById::insert(new_post_id, new_post);
			NextPositiveExternalityPostId::<T>::mutate(|n| {
				*n += 1;
			});

			// emit event

			Ok(())
		}

		#[pallet::call_index(1)]
		#[pallet::weight(0)]
		pub fn add_positive_externality_stake(
			origin: OriginFor<T>,
			deposit: BalanceOf<T>,
		) -> DispatchResult {
			let who = ensure_signed(origin)?;
			// Check user has done kyc
			let _ = <T as pallet::Config>::Currency::withdraw(
				&who,
				deposit,
				WithdrawReasons::TRANSFER,
				ExistenceRequirement::AllowDeath,
			)?;
			let stake = PositiveExternalityStakeBalance::<T>::get(&who);
			let total_balance = stake.saturating_add(deposit);
			PositiveExternalityStakeBalance::<T>::insert(&who, total_balance);

			// emit event
			Ok(())
		}

		#[pallet::call_index(2)]
		#[pallet::weight(0)]
		pub fn set_validate_positive_externality(
			origin: OriginFor<T>,
			value: bool,
		) -> DispatchResult {
			let who = ensure_signed(origin)?;
			// Check user has done kyc

			ValidatePositiveExternality::<T>::insert(&who, value);
			// emit event
			Ok(())
		}

		#[pallet::call_index(3)]
		#[pallet::weight(0)]
		pub fn apply_staking_period(
			origin: OriginFor<T>,
			user_to_calculate: T::AccountId,
		) -> DispatchResult {
			let who = ensure_signed(origin)?;

			Self::ensure_validation_on_positive_externality(user_to_calculate.clone())?;
			Self::ensure_min_stake_positive_externality(user_to_calculate.clone())?;

			let pe_block_number =
				<ValidationPositiveExternalityBlock<T>>::get(user_to_calculate.clone());
			let now = <frame_system::Pallet<T>>::block_number();
			let three_month_number = (3 * 30 * 24 * 60 * 60) / 6;
			let three_month_block = Self::u64_to_block_saturated(three_month_number);
			let modulus = now % three_month_block;
			let storage_main_block = now - modulus;
			// println!("{:?}", now);
			// println!("{:?}", three_month_number);
			// println!("{:?}", storage_main_block);
			// println!("{:?}", pe_block_number);

			let key = SumTreeName::PositiveExternality {
				user_address: user_to_calculate.clone(),
				block_number: storage_main_block.clone(),
			};

			// let game_type = SchellingGameType::PositiveExternality;

			if storage_main_block > pe_block_number {
				<ValidationPositiveExternalityBlock<T>>::insert(
					user_to_calculate.clone(),
					storage_main_block,
				);
				// check what if called again
				T::SchellingGameSharedSource::set_to_staking_period_pe_link(key.clone(), now)?;
				T::SchellingGameSharedSource::create_tree_helper_link(key, 3)?;

			//  println!("{:?}", data);
			} else {
				return Err(Error::<T>::CannotStakeNow.into());
			}

			Ok(())
		}

		#[pallet::call_index(4)]
		#[pallet::weight(0)]
		pub fn apply_jurors_positive_externality(
			origin: OriginFor<T>,
			user_to_calculate: T::AccountId,
			stake: BalanceOf<T>,
		) -> DispatchResult {
			let who = ensure_signed(origin)?;

			Self::ensure_validation_on_positive_externality(user_to_calculate.clone())?;
			Self::ensure_min_stake_positive_externality(user_to_calculate.clone())?;

			let pe_block_number =
				<ValidationPositiveExternalityBlock<T>>::get(user_to_calculate.clone());

			let key = SumTreeName::PositiveExternality {
				user_address: user_to_calculate,
				block_number: pe_block_number.clone(),
			};

			let phase_data = Self::get_phase_data();

			T::SchellingGameSharedSource::apply_jurors_helper_link(key, phase_data, who, stake)?;

			Ok(())
		}

		#[pallet::call_index(5)]
		#[pallet::weight(0)]
		pub fn pass_period(
			origin: OriginFor<T>,
			user_to_calculate: T::AccountId,
		) -> DispatchResult {
			let _who = ensure_signed(origin)?;

			let pe_block_number =
				<ValidationPositiveExternalityBlock<T>>::get(user_to_calculate.clone());

			let key = SumTreeName::PositiveExternality {
				user_address: user_to_calculate,
				block_number: pe_block_number.clone(),
			};

			let now = <frame_system::Pallet<T>>::block_number();
			let phase_data = Self::get_phase_data();
			T::SchellingGameSharedSource::change_period_link(key, phase_data, now)?;

			Ok(())
		}

		#[pallet::call_index(6)]
		#[pallet::weight(0)]
		pub fn draw_jurors_positive_externality(
			origin: OriginFor<T>,
			user_to_calculate: T::AccountId,
			iterations: u64,
		) -> DispatchResult {
			let _who = ensure_signed(origin)?;

			let pe_block_number =
				<ValidationPositiveExternalityBlock<T>>::get(user_to_calculate.clone());

			let key = SumTreeName::PositiveExternality {
				user_address: user_to_calculate,
				block_number: pe_block_number.clone(),
			};

			let phase_data = Self::get_phase_data();

			T::SchellingGameSharedSource::draw_jurors_helper_link(key, phase_data, iterations)?;

			Ok(())
		}

		// Unstaking
		// Stop drawn juror to unstake ✔️
		#[pallet::call_index(7)]
		#[pallet::weight(0)]
		pub fn unstaking(origin: OriginFor<T>, user_to_calculate: T::AccountId) -> DispatchResult {
			let who = ensure_signed(origin)?;
			let pe_block_number =
				<ValidationPositiveExternalityBlock<T>>::get(user_to_calculate.clone());

			let key = SumTreeName::PositiveExternality {
				user_address: user_to_calculate,
				block_number: pe_block_number.clone(),
			};

			T::SchellingGameSharedSource::unstaking_helper_link(key, who)?;
			Ok(())
		}

		#[pallet::call_index(8)]
		#[pallet::weight(0)]
		pub fn commit_vote(
			origin: OriginFor<T>,
			user_to_calculate: T::AccountId,
			vote_commit: [u8; 32],
		) -> DispatchResult {
			let who = ensure_signed(origin)?;
			let pe_block_number =
				<ValidationPositiveExternalityBlock<T>>::get(user_to_calculate.clone());

			let key = SumTreeName::PositiveExternality {
				user_address: user_to_calculate,
				block_number: pe_block_number.clone(),
			};

			T::SchellingGameSharedSource::commit_vote_for_score_helper_link(key, who, vote_commit)?;
			Ok(())
		}

		#[pallet::call_index(9)]
		#[pallet::weight(0)]
		pub fn reveal_vote(
			origin: OriginFor<T>,
			user_to_calculate: T::AccountId,
			choice: i64,
			salt: Vec<u8>,
		) -> DispatchResult {

			let who = ensure_signed(origin)?;

			ensure!(choice <= 5 && choice >= 1, Error::<T>::ChoiceOutOfRange);

			let pe_block_number =
				<ValidationPositiveExternalityBlock<T>>::get(user_to_calculate.clone());

			let key = SumTreeName::PositiveExternality {
				user_address: user_to_calculate,
				block_number: pe_block_number.clone(),
			};

			T::SchellingGameSharedSource::reveal_vote_score_helper_link(key, who, choice, salt)?;
			Ok(())
		}

		#[pallet::call_index(10)]
		#[pallet::weight(0)]
		pub fn get_incentives(
			origin: OriginFor<T>,
			user_to_calculate: T::AccountId,
		) -> DispatchResult {
			let _who = ensure_signed(origin)?;
			let pe_block_number =
				<ValidationPositiveExternalityBlock<T>>::get(user_to_calculate.clone());

			let key = SumTreeName::PositiveExternality {
				user_address: user_to_calculate.clone(),
				block_number: pe_block_number.clone(),
			};

			let phase_data = Self::get_phase_data();
			T::SchellingGameSharedSource::get_incentives_score_schelling_helper_link(
				key.clone(),
				phase_data,
				RangePoint::ZeroToFive,
			)?;

			let score = T::SchellingGameSharedSource::get_mean_value_link(key.clone());
			// println!("Score {:?}", score);
			T::SharedStorageSource::set_positive_externality_link(user_to_calculate, score)?;

			Ok(())
		}
	}
}

'''
'''--- pallets/positive-externality-validation/src/mock.rs ---
use crate as pallet_template;
use frame_support::{parameter_types, traits::{ConstU16, ConstU64, GenesisBuild}};
use sp_core::H256;
use sp_runtime::{
	testing::Header,
	traits::{BlakeTwo256, IdentityLookup},
};
use frame_support_test::TestRandomness;

type UncheckedExtrinsic = frame_system::mocking::MockUncheckedExtrinsic<Test>;
type Block = frame_system::mocking::MockBlock<Test>;

// Configure a mock runtime to test the pallet.
frame_support::construct_runtime!(
	pub enum Test where
		Block = Block,
		NodeBlock = Block,
		UncheckedExtrinsic = UncheckedExtrinsic,
	{
		System: frame_system,
		TemplateModule: pallet_template,
		Balances: pallet_balances,
		Timestamp: pallet_timestamp,
		SharedStorage:shared_storage,
		SchellingGameShared: schelling_game_shared,
		SortitionSumGame: sortition_sum_game,
	}
);

impl frame_system::Config for Test {
	type BaseCallFilter = frame_support::traits::Everything;
	type BlockWeights = ();
	type BlockLength = ();
	type DbWeight = ();
	type RuntimeOrigin = RuntimeOrigin;
	type RuntimeCall = RuntimeCall;
	type Index = u64;
	type BlockNumber = u64;
	type Hash = H256;
	type Hashing = BlakeTwo256;
	type AccountId = u64;
	type Lookup = IdentityLookup<Self::AccountId>;
	type Header = Header;
	type RuntimeEvent = RuntimeEvent;
	type BlockHashCount = ConstU64<250>;
	type Version = ();
	type PalletInfo = PalletInfo;
	type OnNewAccount = ();
	type OnKilledAccount = ();
	type SystemWeightInfo = ();
	type SS58Prefix = ConstU16<42>;
	type OnSetCode = ();
	type MaxConsumers = frame_support::traits::ConstU32<16>;
	type AccountData = pallet_balances::AccountData<u64>; // New code
}

impl shared_storage::Config for Test {
	type RuntimeEvent = RuntimeEvent;
	type WeightInfo = ();
}
parameter_types! {
    pub const MinimumPeriod: u64 = 5;
}

impl pallet_timestamp::Config for Test {
    type Moment = u64;
    type OnTimestampSet = ();
    type MinimumPeriod = MinimumPeriod;
    type WeightInfo = ();
}

impl pallet_balances::Config for Test {
	type MaxLocks = ();
	type MaxReserves = ();
	type ReserveIdentifier = [u8; 8];
	type Balance = u64;
	type DustRemoval = ();
	type RuntimeEvent = RuntimeEvent;
	type ExistentialDeposit = ConstU64<1>;
	type WeightInfo = ();
	type FreezeIdentifier = ();
	type MaxFreezes = ();
	type MaxHolds = ();
	type HoldIdentifier = ();
	type AccountStore = System;
}

impl schelling_game_shared::Config for Test {
	type RuntimeEvent = RuntimeEvent;
	type WeightInfo = ();
	type Currency = Balances; // New code
	type RandomnessSource = TestRandomness<Self>;
	type Slash = ();
	type Reward = ();
	type SortitionSumGameSource = SortitionSumGame;
}

impl sortition_sum_game::Config for Test {
	type RuntimeEvent = RuntimeEvent;
	type WeightInfo = ();
}

impl pallet_template::Config for Test {
	type RuntimeEvent = RuntimeEvent;
	type WeightInfo = ();
	type SharedStorageSource = SharedStorage;
	type Currency = Balances; // New code
	type SchellingGameSharedSource = SchellingGameShared;
}

// Build genesis storage according to the mock runtime.
pub fn new_test_ext() -> sp_io::TestExternalities {
	let mut t = frame_system::GenesisConfig::default().build_storage::<Test>().unwrap();
	pallet_balances::GenesisConfig::<Test> {
		balances: vec![
			(1, 100000),
			(2, 200000),
			(3, 300000),
			(4, 300000),
			(5, 300000),
			(6, 300000),
			(7, 300000),
			(8, 300000),
			(9, 300000),
			(10, 300000),
			(11, 300000),
			(12, 300000),
			(13, 300000),
			(14, 300000),
			(15, 300000),
			(16, 300000),
			(17, 300000),
			(18, 300000),
			(19, 300000),
			(20, 300000),
			(21, 300000),
			(22, 300000),
			(23, 300000),
			(24, 300000),
			(25, 300000),
			(26, 300000),
			(27, 300000),
			(28, 300000),
			(29, 300000),
			(30, 300000),
			(31, 300000),
			(32, 300000),
			(33, 300000),
			(34, 300000),
			(35, 300000),
		],
	} // new code
	.assimilate_storage(&mut t)
	.unwrap();
	shared_storage::GenesisConfig::<Test> { approved_citizen_address: vec![1, 2] }
		.assimilate_storage(&mut t)
		.unwrap();
	t.into()
}

'''
'''--- pallets/positive-externality-validation/src/tests.rs ---
use crate::{mock::*, Error, Event};
use frame_support::{assert_noop, assert_ok};
use pallet_support::{Content, WhoAndWhen};
use crate::types::PositiveExternalityPost;

#[test]
fn test_positive_externality_post() {
	new_test_ext().execute_with(|| {
		assert_ok!(TemplateModule::create_positive_externality_post(
			RuntimeOrigin::signed(1),
			Content::None
		));
		let post = TemplateModule::positive_externality_post_by_id(1);
		let post_compare = Some(PositiveExternalityPost {
			id: 1,
			created: WhoAndWhen { account: 1, block: 0, time: 0 },
			edited: false,
			owner: 1,
			content: Content::None,
			hidden: false,
			upvotes_count: 0,
			downvotes_count: 0,
		});
		assert_eq!(post, post_compare);
		//    assert_ok!(TemplateModule::apply_jurors_positive_externality(Origin::signed(1), 2, 60));
	});
}

#[test]
fn test_adding_positive_externality_stake() {
	new_test_ext().execute_with(|| {
		// 	assert_ok!(TemplateModule::create_positive_externality_post(Origin::signed(1), Content::None));
		//    let post = TemplateModule::positive_externality_post_by_id(1);
		//    let post_compare = Some(PositiveExternalityPost { id: 1, created: WhoAndWhen { account: 1, block: 0, time: 0 }, edited: false, owner: 1, content: Content::None, hidden: false, upvotes_count: 0, downvotes_count: 0 });
		//    assert_eq!(post, post_compare);

		assert_ok!(TemplateModule::add_positive_externality_stake(RuntimeOrigin::signed(1), 10000));
		let stake = TemplateModule::positive_externality_user_stake(1);
		assert_eq!(stake, 10000);
	});
}

#[test]
fn test_setting_positive_externality_validation() {
	new_test_ext().execute_with(|| {
		assert_ok!(TemplateModule::set_validate_positive_externality(RuntimeOrigin::signed(1), true));
		let value = TemplateModule::validate_positive_externality(1);
		assert_eq!(value, true);
	});
}

#[test]
fn test_applying_for_staking_period() {
	new_test_ext().execute_with(|| {
		assert_ok!(TemplateModule::set_validate_positive_externality(RuntimeOrigin::signed(1), true));
		assert_ok!(TemplateModule::add_positive_externality_stake(RuntimeOrigin::signed(1), 10000));
		System::set_block_number(1298000);
		assert_ok!(TemplateModule::apply_staking_period(RuntimeOrigin::signed(2), 1));
		System::set_block_number(1298000 + 1298000);
		assert_ok!(TemplateModule::apply_staking_period(RuntimeOrigin::signed(2), 1));
	});
}

#[test]
fn test_appying_jurors() {
	new_test_ext().execute_with(|| {
		assert_ok!(TemplateModule::set_validate_positive_externality(RuntimeOrigin::signed(1), true));
		assert_ok!(TemplateModule::add_positive_externality_stake(RuntimeOrigin::signed(1), 10000));
		System::set_block_number(1298000);
		assert_ok!(TemplateModule::apply_staking_period(RuntimeOrigin::signed(2), 1));
		assert_ok!(TemplateModule::apply_jurors_positive_externality(RuntimeOrigin::signed(4), 1, 1000));
	});
}

#[test]
fn test_change_period() {
	new_test_ext().execute_with(|| {
		assert_ok!(TemplateModule::set_validate_positive_externality(RuntimeOrigin::signed(1), true));
		assert_ok!(TemplateModule::add_positive_externality_stake(RuntimeOrigin::signed(1), 10000));
		System::set_block_number(1298000);
		assert_ok!(TemplateModule::apply_staking_period(RuntimeOrigin::signed(2), 1));
		assert_ok!(TemplateModule::apply_jurors_positive_externality(RuntimeOrigin::signed(4), 1, 1000));
		assert_ok!(TemplateModule::apply_jurors_positive_externality(RuntimeOrigin::signed(5), 1, 2000));
		assert_ok!(TemplateModule::apply_jurors_positive_externality(RuntimeOrigin::signed(6), 1, 3000));
		assert_ok!(TemplateModule::apply_jurors_positive_externality(RuntimeOrigin::signed(7), 1, 4000));
		assert_ok!(TemplateModule::apply_jurors_positive_externality(RuntimeOrigin::signed(8), 1, 5000));
		System::set_block_number(1298080);
		assert_ok!(TemplateModule::pass_period(RuntimeOrigin::signed(4), 1));
	})
}

#[test]
fn test_draw_jurors_period() {
	new_test_ext().execute_with(|| {
		assert_ok!(TemplateModule::set_validate_positive_externality(RuntimeOrigin::signed(1), true));
		assert_ok!(TemplateModule::add_positive_externality_stake(RuntimeOrigin::signed(1), 10000));
		System::set_block_number(1298000);
		assert_ok!(TemplateModule::apply_staking_period(RuntimeOrigin::signed(2), 1));
		assert_ok!(TemplateModule::apply_jurors_positive_externality(RuntimeOrigin::signed(4), 1, 1000));
		assert_ok!(TemplateModule::apply_jurors_positive_externality(RuntimeOrigin::signed(5), 1, 2000));
		assert_ok!(TemplateModule::apply_jurors_positive_externality(RuntimeOrigin::signed(6), 1, 3000));
		assert_ok!(TemplateModule::apply_jurors_positive_externality(RuntimeOrigin::signed(7), 1, 4000));
		assert_ok!(TemplateModule::apply_jurors_positive_externality(RuntimeOrigin::signed(8), 1, 5000));
		System::set_block_number(1298080);
		assert_ok!(TemplateModule::pass_period(RuntimeOrigin::signed(4), 1));
		assert_ok!(TemplateModule::draw_jurors_positive_externality(RuntimeOrigin::signed(8), 1, 5));
	})
}

#[test]
fn test_drawn_jurors() {
	new_test_ext().execute_with(|| {
		assert_ok!(TemplateModule::set_validate_positive_externality(RuntimeOrigin::signed(1), true));
		assert_ok!(TemplateModule::add_positive_externality_stake(RuntimeOrigin::signed(1), 10000));
		System::set_block_number(1298000);
		assert_ok!(TemplateModule::apply_staking_period(RuntimeOrigin::signed(2), 1));
		let balance = Balances::free_balance(4);
		assert_eq!(300000, balance);
		assert_ok!(TemplateModule::apply_jurors_positive_externality(RuntimeOrigin::signed(4), 1, 1000));
		let balance = Balances::free_balance(4);
		assert_eq!(299000, balance);
		assert_ok!(TemplateModule::apply_jurors_positive_externality(RuntimeOrigin::signed(5), 1, 2000));
		assert_ok!(TemplateModule::apply_jurors_positive_externality(RuntimeOrigin::signed(6), 1, 3000));
		assert_ok!(TemplateModule::apply_jurors_positive_externality(RuntimeOrigin::signed(7), 1, 4000));
		assert_ok!(TemplateModule::apply_jurors_positive_externality(RuntimeOrigin::signed(8), 1, 5000));
		System::set_block_number(1298080);
		assert_ok!(TemplateModule::pass_period(RuntimeOrigin::signed(4), 1));
		assert_ok!(TemplateModule::draw_jurors_positive_externality(RuntimeOrigin::signed(8), 1, 5));
		let data = TemplateModule::get_drawn_jurors(1);
		assert_eq!(data, [(4, 1000), (5, 2000), (6, 3000), (7, 4000), (8, 5000)]);
		// println!("drawn jurors {:?}",data);
	})
}

#[test]
fn test_commit_and_incentives_vote() {
	new_test_ext().execute_with(|| {
		assert_ok!(TemplateModule::set_validate_positive_externality(RuntimeOrigin::signed(1), true));
		assert_ok!(TemplateModule::add_positive_externality_stake(RuntimeOrigin::signed(1), 10000));
		System::set_block_number(1298000);
		assert_ok!(TemplateModule::apply_staking_period(RuntimeOrigin::signed(2), 1));
		let balance = Balances::free_balance(4);
		assert_eq!(300000, balance);
		assert_ok!(TemplateModule::apply_jurors_positive_externality(RuntimeOrigin::signed(4), 1, 1000));
		let balance = Balances::free_balance(4);
		assert_eq!(299000, balance);
		assert_ok!(TemplateModule::apply_jurors_positive_externality(RuntimeOrigin::signed(5), 1, 2000));
		assert_ok!(TemplateModule::apply_jurors_positive_externality(RuntimeOrigin::signed(6), 1, 3000));
		assert_ok!(TemplateModule::apply_jurors_positive_externality(RuntimeOrigin::signed(7), 1, 4000));
		assert_ok!(TemplateModule::apply_jurors_positive_externality(RuntimeOrigin::signed(8), 1, 5000));
		System::set_block_number(1298080);
		assert_ok!(TemplateModule::pass_period(RuntimeOrigin::signed(4), 1));
		assert_ok!(TemplateModule::draw_jurors_positive_externality(RuntimeOrigin::signed(8), 1, 5));

		let data = TemplateModule::get_drawn_jurors(1);
		assert_eq!(data, [(4, 1000), (5, 2000), (6, 3000), (7, 4000), (8, 5000)]);
		assert_ok!(TemplateModule::pass_period(RuntimeOrigin::signed(4), 1));

		let hash = sp_io::hashing::keccak_256("1salt".as_bytes());
		assert_ok!(TemplateModule::commit_vote(RuntimeOrigin::signed(4), 1, hash));

		let hash = sp_io::hashing::keccak_256("1salt2".as_bytes());
		assert_ok!(TemplateModule::commit_vote(RuntimeOrigin::signed(5), 1, hash));
		let hash = sp_io::hashing::keccak_256("5salt3".as_bytes());
		assert_ok!(TemplateModule::commit_vote(RuntimeOrigin::signed(6), 1, hash));
		let hash = sp_io::hashing::keccak_256("1salt4".as_bytes());
		assert_ok!(TemplateModule::commit_vote(RuntimeOrigin::signed(7), 1, hash));
		let hash = sp_io::hashing::keccak_256("5salt5".as_bytes());
		assert_ok!(TemplateModule::commit_vote(RuntimeOrigin::signed(8), 1, hash));
		System::set_block_number(12980160);
		assert_ok!(TemplateModule::pass_period(RuntimeOrigin::signed(4), 1));
		assert_ok!(TemplateModule::reveal_vote(
			RuntimeOrigin::signed(4),
			1,
			1,
			"salt".as_bytes().to_vec()
		));
		assert_ok!(TemplateModule::reveal_vote(
			RuntimeOrigin::signed(5),
			1,
			1,
			"salt2".as_bytes().to_vec()
		));
		assert_ok!(TemplateModule::reveal_vote(
			RuntimeOrigin::signed(6),
			1,
			5,
			"salt3".as_bytes().to_vec()
		));
		assert_ok!(TemplateModule::reveal_vote(
			RuntimeOrigin::signed(7),
			1,
			1,
			"salt4".as_bytes().to_vec()
		));
		assert_ok!(TemplateModule::reveal_vote(
			RuntimeOrigin::signed(8),
			1,
			5,
			"salt5".as_bytes().to_vec()
		));
		System::set_block_number(12980260);
		assert_ok!(TemplateModule::pass_period(RuntimeOrigin::signed(4), 1));

		assert_ok!(TemplateModule::get_incentives(RuntimeOrigin::signed(4), 1));
	})
}

'''
'''--- pallets/positive-externality-validation/src/types.rs ---
use codec::{Decode, Encode};
use scale_info::TypeInfo;

use frame_support::pallet_prelude::*;

use super::*;

pub const FIRST_POST_ID: u64 = 1;

/// Information about a post's owner, its' related space, content, and visibility.
#[derive(Encode, Decode, Clone, Eq, PartialEq, RuntimeDebug, TypeInfo)]
#[scale_info(skip_type_params(T))]
pub struct PositiveExternalityPost<T: Config> {
    pub id: PositiveExternalityPostId,

    pub created: WhoAndWhenOf<T>,

    pub edited: bool,

    pub owner: T::AccountId,

    pub content: Content,

    pub hidden: bool,

    pub upvotes_count: u32,

    pub downvotes_count: u32,
}

#[derive(Encode, Decode, Default, Clone, Eq, PartialEq, RuntimeDebug, TypeInfo)]
pub struct PositiveExternalityPostUpdate {
    
    pub content: Option<Content>,
    pub hidden: Option<bool>,
}

'''
'''--- pallets/positive-externality-validation/src/weights.rs ---

//! Autogenerated weights for pallet_template
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-04-06, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Alexs-MacBook-Pro-2.local`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ../../target/release/node-template
// benchmark
// pallet
// --chain
// dev
// --pallet
// pallet_template
// --extrinsic
// *
// --steps=50
// --repeat=20
// --execution=wasm
// --wasm-execution=compiled
// --output
// pallets/template/src/weights.rs
// --template
// ../../.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_template.
pub trait WeightInfo {
	fn do_something() -> Weight;
	fn cause_error() -> Weight;
}

/// Weights for pallet_template using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: TemplateModule Something (r:0 w:1)
	/// Proof: TemplateModule Something (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn do_something() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 8_000_000 picoseconds.
		Weight::from_parts(9_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: TemplateModule Something (r:1 w:1)
	/// Proof: TemplateModule Something (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn cause_error() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `32`
		//  Estimated: `1489`
		// Minimum execution time: 6_000_000 picoseconds.
		Weight::from_parts(6_000_000, 1489)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: TemplateModule Something (r:0 w:1)
	/// Proof: TemplateModule Something (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn do_something() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 8_000_000 picoseconds.
		Weight::from_parts(9_000_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: TemplateModule Something (r:1 w:1)
	/// Proof: TemplateModule Something (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn cause_error() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `32`
		//  Estimated: `1489`
		// Minimum execution time: 6_000_000 picoseconds.
		Weight::from_parts(6_000_000, 1489)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}

'''
'''--- pallets/posts/Cargo.toml ---
[package]
name = "pallet-posts"
version = "4.0.0-dev"
description = "FRAME pallet template for defining custom runtime logic."
authors = ["Substrate DevHub <https://github.com/substrate-developer-hub>"]
homepage = "https://substrate.io"
edition = "2021"
license = "MIT-0"
publish = false
repository = "https://github.com/substrate-developer-hub/substrate-node-template/"

[package.metadata.docs.rs]
targets = ["x86_64-unknown-linux-gnu"]

[dependencies]
codec = { package = "parity-scale-codec", version = "3.2.2", default-features = false, features = [
	"derive",
] }
scale-info = { version = "2.5.0", default-features = false, features = ["derive"] }
frame-benchmarking = { version = "4.0.0-dev", default-features = false, optional = true, git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
frame-support = { version = "4.0.0-dev", default-features = false, git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
frame-system = { version = "4.0.0-dev", default-features = false, git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
sp-runtime = { version = "7.0.0", default-features = false, git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
# polars = {version = "0.36.2", default-features = false}

# Substrate dependencies
pallet-support = { default-features = false, path = '../support' }
pallet-timestamp = {git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42", default-features = false }
pallet-spaces = {default-features = false, path = '../spaces' }

[dev-dependencies]
sp-core = { version = "7.0.0", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
sp-io = { version = "7.0.0", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
sp-runtime = { version = "7.0.0", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }

[features]
default = ["std"]
std = [
	"codec/std",
	"frame-benchmarking?/std",
	"frame-support/std",
	"frame-system/std",
	"scale-info/std",
	"pallet-timestamp/std",
	"pallet-support/std",
	"pallet-spaces/std",
]
runtime-benchmarks = ["frame-benchmarking/runtime-benchmarks"]
try-runtime = ["frame-support/try-runtime"]

'''
'''--- pallets/posts/README.md ---
License: MIT-0
'''
'''--- pallets/posts/src/benchmarking.rs ---
//! Benchmarking setup for pallet-template
#![cfg(feature = "runtime-benchmarks")]
use super::*;

#[allow(unused)]
use crate::Pallet as Template;
use frame_benchmarking::v2::*;
use frame_system::RawOrigin;

#[benchmarks]
mod benchmarks {
	use super::*;

	#[benchmark]
	fn do_something() {
		let value = 100u32.into();
		let caller: T::AccountId = whitelisted_caller();
		#[extrinsic_call]
		do_something(RawOrigin::Signed(caller), value);

		assert_eq!(Something::<T>::get(), Some(value));
	}

	#[benchmark]
	fn cause_error() {
		Something::<T>::put(100u32);
		let caller: T::AccountId = whitelisted_caller();
		#[extrinsic_call]
		cause_error(RawOrigin::Signed(caller));

		assert_eq!(Something::<T>::get(), Some(101u32));
	}

	impl_benchmark_test_suite!(Template, crate::mock::new_test_ext(), crate::mock::Test);
}

'''
'''--- pallets/posts/src/extras.rs ---
use crate::*;

impl<T: Config> Pallet<T> {
	
}

'''
'''--- pallets/posts/src/functions.rs ---
use frame_support::dispatch::DispatchResult;
use sp_runtime::traits::Saturating;

use pallet_support::{remove_from_vec, SpaceId};

use super::*;

impl<T: Config> Post<T> {
    pub fn new(
        id: PostId,
        created_by: T::AccountId,
        space_id_opt: Option<SpaceId>,
        extension: PostExtension,
        content: Content,
    ) -> Self {
        Post {
            id,
            created: new_who_and_when::<T>(created_by.clone()),
            edited: false,
            owner: created_by,
            extension,
            space_id: space_id_opt,
            content,
            hidden: false,
            upvotes_count: 0,
            downvotes_count: 0,
        }
    }

    pub fn ensure_owner(&self, account: &T::AccountId) -> DispatchResult {
        ensure!(self.is_owner(account), Error::<T>::NotAPostOwner);
        Ok(())
    }

    pub fn is_owner(&self, account: &T::AccountId) -> bool {
        self.owner == *account
    }

    pub fn is_root_post(&self) -> bool {
        !self.is_comment()
    }

    pub fn is_regular_post(&self) -> bool {
        matches!(self.extension, PostExtension::RegularPost)
    }

    pub fn is_comment(&self) -> bool {
        matches!(self.extension, PostExtension::Comment(_))
    }

    pub fn is_shared_post(&self) -> bool {
        matches!(self.extension, PostExtension::SharedPost(_))
    }

    pub fn get_comment_ext(&self) -> Result<Comment, DispatchError> {
        match self.extension {
            PostExtension::Comment(comment_ext) => Ok(comment_ext),
            _ => Err(Error::<T>::NotComment.into()),
        }
    }

    pub fn get_original_post_id(&self) -> Result<PostId, DispatchError> {
        match self.extension {
            PostExtension::SharedPost(original_post_id) => Ok(original_post_id),
            _ => Err(Error::<T>::NotASharedPost.into()),
        }
    }

    pub fn get_root_post(&self) -> Result<Post<T>, DispatchError> {
        match self.extension {
            PostExtension::RegularPost | PostExtension::SharedPost(_) => Ok(self.clone()),
            PostExtension::Comment(comment) => Pallet::<T>::require_post(comment.root_post_id),
        }
    }

    pub fn get_space_id(&self) -> Result<SpaceId, DispatchError> {
        Self::try_get_space_id(self).ok_or_else(|| Error::<T>::PostHasNoSpaceId.into())
    }

    pub fn try_get_space_id(&self) -> Option<SpaceId> {
        if let Ok(root_post) = self.get_root_post() {
            return root_post.space_id
        }

        None
    }

    pub fn get_space(&self) -> Result<Space<T>, DispatchError> {
        let root_post = self.get_root_post()?;
        let space_id = root_post.space_id.ok_or(Error::<T>::PostHasNoSpaceId)?;
        Spaces::require_space(space_id)
    }

    pub fn try_get_space(&self) -> Option<Space<T>> {
        if let Ok(root_post) = self.get_root_post() {
            return root_post.space_id.and_then(|space_id| Spaces::require_space(space_id).ok())
        }

        None
    }

    pub fn try_get_parent_id(&self) -> Option<PostId> {
        match self.extension {
            PostExtension::Comment(comment_ext) => comment_ext.parent_id,
            _ => None,
        }
    }

    pub fn inc_upvotes(&mut self) {
        self.upvotes_count.saturating_inc();
    }

    pub fn dec_upvotes(&mut self) {
        self.upvotes_count.saturating_dec();
    }

    pub fn inc_downvotes(&mut self) {
        self.downvotes_count.saturating_inc();
    }

    pub fn dec_downvotes(&mut self) {
        self.downvotes_count.saturating_dec();
    }

    pub fn is_public(&self) -> bool {
        !self.hidden && self.content.is_some()
    }

    pub fn is_unlisted(&self) -> bool {
        !self.is_public()
    }
}

impl<T: Config> Pallet<T> {
	   /// Get `Post` by id from the storage or return `PostNotFound` error.
       pub fn require_post(post_id: SpaceId) -> Result<Post<T>, DispatchError> {
        Ok(Self::post_by_id(post_id).ok_or(Error::<T>::PostNotFound)?)
    }
}

'''
'''--- pallets/posts/src/lib.rs ---
#![cfg_attr(not(feature = "std"), no_std)]

/// Edit this file to define custom logic or remove it if it is not needed.
/// Learn more about FRAME and the core library of Substrate FRAME pallets:
/// <https://docs.substrate.io/reference/frame-pallets/>
pub use pallet::*;

#[cfg(test)]
mod mock;

#[cfg(test)]
mod tests;

#[cfg(feature = "runtime-benchmarks")]
mod benchmarking;
pub mod weights;
pub use weights::*;

mod extras;
pub mod functions;
pub mod types;

pub use types::{Comment, Post, PostExtension, PostUpdate, FIRST_POST_ID};

use codec::{Decode, Encode};

use frame_support::pallet_prelude::*;
use frame_support::sp_std::prelude::*;
use frame_system::pallet_prelude::*;
use pallet_spaces::{types::Space, Pallet as Spaces};
use pallet_support::{
	ensure_content_is_valid, new_who_and_when, remove_from_vec, Content, PostId, SpaceId,
	WhoAndWhen, WhoAndWhenOf,
};

#[frame_support::pallet(dev_mode)]
pub mod pallet {
	use super::*;
	use frame_support::pallet_prelude::*;
	use frame_system::pallet_prelude::*;

	#[pallet::pallet]
	#[pallet::without_storage_info]
	pub struct Pallet<T>(_);

	/// Configure the pallet by specifying the parameters and types on which it depends.
	#[pallet::config]
	pub trait Config:
		frame_system::Config + pallet_timestamp::Config + pallet_spaces::Config
	{
		/// Because this pallet emits events, it depends on the runtime's definition of an event.
		type RuntimeEvent: From<Event<Self>> + IsType<<Self as frame_system::Config>::RuntimeEvent>;
		/// Type representing the weight of this pallet
		type WeightInfo: WeightInfo;
	}

	// The pallet's runtime storage items.
	// https://docs.substrate.io/main-docs/build/runtime-storage/
	#[pallet::storage]
	#[pallet::getter(fn something)]
	// Learn more about declaring storage items:
	// https://docs.substrate.io/main-docs/build/runtime-storage/#declaring-storage-items
	pub type Something<T> = StorageValue<_, u32>;

	#[pallet::type_value]
	pub fn DefaultForNextPostId() -> PostId {
		FIRST_POST_ID
	}

	/// The next post id.
	#[pallet::storage]
	#[pallet::getter(fn next_post_id)]
	pub type NextPostId<T: Config> = StorageValue<_, PostId, ValueQuery, DefaultForNextPostId>;

	/// Get the details of a post by its' id.
	#[pallet::storage]
	#[pallet::getter(fn post_by_id)]
	pub type PostById<T: Config> = StorageMap<_, Twox64Concat, PostId, Post<T>>;

	/// Get the ids of all direct replies by their parent's post id.
	#[pallet::storage]
	#[pallet::getter(fn reply_ids_by_post_id)]
	pub type ReplyIdsByPostId<T: Config> =
		StorageMap<_, Twox64Concat, PostId, Vec<PostId>, ValueQuery>;

	/// Get the ids of all posts in a given space, by the space's id.
	#[pallet::storage]
	#[pallet::getter(fn post_ids_by_space_id)]
	pub type PostIdsBySpaceId<T: Config> =
		StorageMap<_, Twox64Concat, SpaceId, Vec<PostId>, ValueQuery>;

	// Pallets use events to inform users when important changes are made.
	// https://docs.substrate.io/main-docs/build/events-errors/
	#[pallet::event]
	#[pallet::generate_deposit(pub(super) fn deposit_event)]
	pub enum Event<T: Config> {
		/// Event documentation should end with an array that provides descriptive names for event
		/// parameters. [something, who]
		SomethingStored {
			something: u32,
			who: T::AccountId,
		},
		PostCreated {
			account: T::AccountId,
			post_id: PostId,
		},
		PostUpdated {
			account: T::AccountId,
			post_id: PostId,
		},
		PostMoved {
			account: T::AccountId,
			post_id: PostId,
			from_space: Option<SpaceId>,
			to_space: Option<SpaceId>,
		},
	}

	// Errors inform users that something went wrong.
	#[pallet::error]
	pub enum Error<T> {
		/// Error names should be descriptive.
		NoneValue,
		/// Errors should have helpful documentation associated with them.
		StorageOverflow,
		// Post related errors:
		/// Post was not found by id.
		PostNotFound,
		/// An account is not a post owner.
		NotAPostOwner,
		/// Nothing to update in this post.
		NoUpdatesForPost,
		/// Root post should have a space id.
		PostHasNoSpaceId,
		/// Not allowed to create a post/comment when a scope (space or root post) is hidden.
		CannotCreateInHiddenScope,
		/// Post has no replies.
		NoRepliesOnPost,
		/// Cannot move a post to the same space.
		CannotMoveToSameSpace,

		// Share related errors:
		/// Cannot share, because the original post was not found.
		OriginalPostNotFound,
		/// Cannot share a post that is sharing another post.
		CannotShareSharedPost,
		/// This post's extension is not a `SharedPost`.
		NotASharedPost,

		// Comment related errors:
		/// Unknown parent comment id.
		UnknownParentComment,
		/// Post by `parent_id` is not of a `Comment` extension.
		NotACommentByParentId,
		/// Cannot update space id of a comment.
		CannotUpdateSpaceIdOnComment,
		/// Max comment depth reached.
		MaxCommentDepthReached,
		/// Only comment owner can update this comment.
		NotACommentAuthor,
		/// This post's extension is not a `Comment`.
		NotComment,

		// Permissions related errors:
		/// User has no permission to create root posts in this space.
		NoPermissionToCreatePosts,
		/// User has no permission to create comments (aka replies) in this space.
		NoPermissionToCreateComments,
		/// User has no permission to share posts/comments from this space to another space.
		NoPermissionToShare,
		/// User has no permission to update any posts in this space.
		NoPermissionToUpdateAnyPost,
		/// A post owner is not allowed to update their own posts in this space.
		NoPermissionToUpdateOwnPosts,
		/// A comment owner is not allowed to update their own comments in this space.
		NoPermissionToUpdateOwnComments,

		/// `force_create_post` failed, because this post already exists.
		/// Consider removing the post with `force_remove_post` first.
		PostAlreadyExists,
	}

	// Dispatchable functions allows users to interact with the pallet and invoke state changes.
	// These functions materialize as "extrinsics", which are often compared to transactions.
	// Dispatchable functions must be annotated with a weight and must return a DispatchResult.
	#[pallet::call]
	impl<T: Config> Pallet<T> {
		/// Create post
		///  Who can post, does kyc validation required??
		#[pallet::call_index(0)]
		#[pallet::weight(0)]
		pub fn create_post(
			origin: OriginFor<T>,
			space_id_opt: Option<SpaceId>,
			extension: PostExtension,
			content: Content,
		) -> DispatchResult {
			let creator = ensure_signed(origin)?;

			ensure_content_is_valid(content.clone())?;

			let new_post_id = Self::next_post_id();

			let new_post: Post<T> =
				Post::new(new_post_id, creator.clone(), space_id_opt, extension, content.clone());

			// Get space from either space_id_opt or Comment if a comment provided
			let space = &new_post.get_space()?;
			if new_post.is_root_post() {
				PostIdsBySpaceId::<T>::mutate(space.id, |ids| ids.push(new_post_id));
			}

			PostById::insert(new_post_id, new_post);
			NextPostId::<T>::mutate(|n| {
				*n += 1;
			});

			Self::deposit_event(Event::PostCreated { account: creator, post_id: new_post_id });

			Ok(())
		}

		#[pallet::call_index(1)]
		#[pallet::weight(0)]
		pub fn update_post(
			origin: OriginFor<T>,
			post_id: PostId,
			update: PostUpdate,
		) -> DispatchResult {
			let editor = ensure_signed(origin)?;

			let has_updates = update.content.is_some() || update.hidden.is_some();

			ensure!(has_updates, Error::<T>::NoUpdatesForPost);

			let mut post = Self::require_post(post_id)?;

			let space_opt = &post.try_get_space();

			let mut is_update_applied = false;

			if let Some(content) = update.content {
				if content != post.content {
					ensure_content_is_valid(content.clone())?;

					post.content = content;
					post.edited = true;
					is_update_applied = true;
				}
			}

			if let Some(hidden) = update.hidden {
				if hidden != post.hidden {
					post.hidden = hidden;
					is_update_applied = true;
				}
			}

			// Update this post only if at least one field should be updated:
			if is_update_applied {
				<PostById<T>>::insert(post.id, post);
				Self::deposit_event(Event::PostUpdated { account: editor, post_id });
			}

			Ok(())
		}
	}
}

'''
'''--- pallets/posts/src/mock.rs ---
use crate as pallet_template;
use frame_support::{parameter_types, traits::{ConstU16, ConstU64, GenesisBuild}};
use sp_core::H256;
use sp_runtime::{
	testing::Header,
	traits::{BlakeTwo256, IdentityLookup},
};

type UncheckedExtrinsic = frame_system::mocking::MockUncheckedExtrinsic<Test>;
type Block = frame_system::mocking::MockBlock<Test>;

// Configure a mock runtime to test the pallet.
frame_support::construct_runtime!(
	pub enum Test where
		Block = Block,
		NodeBlock = Block,
		UncheckedExtrinsic = UncheckedExtrinsic,
	{
		System: frame_system,
		TemplateModule: pallet_template,
		Spaces: pallet_spaces,
		Timestamp: pallet_timestamp,
	}
);

impl frame_system::Config for Test {
	type BaseCallFilter = frame_support::traits::Everything;
	type BlockWeights = ();
	type BlockLength = ();
	type DbWeight = ();
	type RuntimeOrigin = RuntimeOrigin;
	type RuntimeCall = RuntimeCall;
	type Index = u64;
	type BlockNumber = u64;
	type Hash = H256;
	type Hashing = BlakeTwo256;
	type AccountId = u64;
	type Lookup = IdentityLookup<Self::AccountId>;
	type Header = Header;
	type RuntimeEvent = RuntimeEvent;
	type BlockHashCount = ConstU64<250>;
	type Version = ();
	type PalletInfo = PalletInfo;
	type AccountData = ();
	type OnNewAccount = ();
	type OnKilledAccount = ();
	type SystemWeightInfo = ();
	type SS58Prefix = ConstU16<42>;
	type OnSetCode = ();
	type MaxConsumers = frame_support::traits::ConstU32<16>;
}

impl pallet_template::Config for Test {
	type RuntimeEvent = RuntimeEvent;
	type WeightInfo = ();
}

impl pallet_spaces::Config for Test {
	type RuntimeEvent = RuntimeEvent;
	type WeightInfo = ();
}

parameter_types! {
    pub const MinimumPeriod: u64 = 5;
}

impl pallet_timestamp::Config for Test {
    type Moment = u64;
    type OnTimestampSet = ();
    type MinimumPeriod = MinimumPeriod;
    type WeightInfo = ();
}

// Build genesis storage according to the mock runtime.
pub fn new_test_ext() -> sp_io::TestExternalities {
	frame_system::GenesisConfig::default().build_storage::<Test>().unwrap().into()
}

'''
'''--- pallets/posts/src/tests.rs ---
use crate::{mock::*, Error, Event};
use frame_support::{assert_noop, assert_ok};

#[test]
fn it_works_for_default_value() {
	new_test_ext().execute_with(|| {
		// Go past genesis block so events get deposited
		System::set_block_number(1);
		
	});
}

#[test]
fn correct_error_for_none_value() {
	new_test_ext().execute_with(|| {

	});
}

'''
'''--- pallets/posts/src/types.rs ---
use super::*;

pub const FIRST_POST_ID: u64 = 1;

/// Information about a post's owner, its' related space, content, and visibility.
#[derive(Encode, Decode, Clone, Eq, PartialEq, RuntimeDebug, TypeInfo)]
#[scale_info(skip_type_params(T))]
pub struct Post<T: Config> {
    /// Unique sequential identifier of a post. Examples of post ids: `1`, `2`, `3`, and so on.
    pub id: PostId,

    pub created: WhoAndWhenOf<T>,
    /// True, if the content of this post was edited.
    pub edited: bool,

    /// The current owner of a given post.
    pub owner: T::AccountId,

    /// Through post extension you can provide specific information necessary for different kinds
    /// of posts such as regular posts, comments, and shared posts.
    pub extension: PostExtension,

    /// An id of a space which contains a given post.
    pub space_id: Option<SpaceId>,

    pub content: Content,

    /// Hidden field is used to recommend to end clients (web and mobile apps) that a particular
    /// posts and its' comments should not be shown.
    pub hidden: bool,

    /// The number of times a given post has been upvoted.
    pub upvotes_count: u32,

    /// The number of times a given post has been downvoted.
    pub downvotes_count: u32,
}

#[derive(Encode, Decode, Default, Clone, Eq, PartialEq, RuntimeDebug, TypeInfo)]
pub struct PostUpdate {
    /// Deprecated: This field has no effect in `fn update_post()` extrinsic.
    /// See `fn move_post()` extrinsic if you want to move a post to another space.
    pub space_id: Option<SpaceId>,

    pub content: Option<Content>,
    pub hidden: Option<bool>,
}

/// Post extension provides specific information necessary for different kinds
/// of posts such as regular posts, comments, and shared posts.
#[derive(Encode, Decode, Clone, Copy, Eq, PartialEq, RuntimeDebug, TypeInfo)]
pub enum PostExtension {
    RegularPost,
    Comment(Comment),
    SharedPost(PostId),
}

#[derive(Encode, Decode, Clone, Copy, Eq, PartialEq, RuntimeDebug, TypeInfo)]
pub struct Comment {
    pub root_post_id: PostId,
    pub parent_id: Option<PostId>,
}

impl Default for PostExtension {
    fn default() -> Self {
        PostExtension::RegularPost
    }
}

'''
'''--- pallets/posts/src/weights.rs ---

//! Autogenerated weights for pallet_template
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-04-06, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Alexs-MacBook-Pro-2.local`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ../../target/release/node-template
// benchmark
// pallet
// --chain
// dev
// --pallet
// pallet_template
// --extrinsic
// *
// --steps=50
// --repeat=20
// --execution=wasm
// --wasm-execution=compiled
// --output
// pallets/template/src/weights.rs
// --template
// ../../.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_template.
pub trait WeightInfo {
	fn do_something() -> Weight;
	fn cause_error() -> Weight;
}

/// Weights for pallet_template using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: TemplateModule Something (r:0 w:1)
	/// Proof: TemplateModule Something (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn do_something() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 8_000_000 picoseconds.
		Weight::from_parts(9_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: TemplateModule Something (r:1 w:1)
	/// Proof: TemplateModule Something (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn cause_error() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `32`
		//  Estimated: `1489`
		// Minimum execution time: 6_000_000 picoseconds.
		Weight::from_parts(6_000_000, 1489)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: TemplateModule Something (r:0 w:1)
	/// Proof: TemplateModule Something (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn do_something() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 8_000_000 picoseconds.
		Weight::from_parts(9_000_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: TemplateModule Something (r:1 w:1)
	/// Proof: TemplateModule Something (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn cause_error() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `32`
		//  Estimated: `1489`
		// Minimum execution time: 6_000_000 picoseconds.
		Weight::from_parts(6_000_000, 1489)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}

'''
'''--- pallets/profile-validation/Cargo.toml ---
[package]
name = "profile-validation"
version = "4.0.0-dev"
description = "FRAME pallet template for defining custom runtime logic."
authors = ["Substrate DevHub <https://github.com/substrate-developer-hub>"]
homepage = "https://substrate.io"
edition = "2021"
license = "MIT-0"
publish = false
repository = "https://github.com/substrate-developer-hub/substrate-node-template/"

[package.metadata.docs.rs]
targets = ["x86_64-unknown-linux-gnu"]

[dependencies]
codec = { package = "parity-scale-codec", version = "3.2.2", default-features = false, features = [
	"derive",
] }
scale-info = { version = "2.5.0", default-features = false, features = ["derive"] }
frame-benchmarking = { version = "4.0.0-dev", default-features = false, optional = true, git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
frame-support = { version = "4.0.0-dev", default-features = false, git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
frame-system = { version = "4.0.0-dev", default-features = false, git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
pallet-timestamp = { git = 'https://github.com/paritytech/substrate', branch = "polkadot-v0.9.42", default-features = false }
pallet-balances = { default-features = false, version = "4.0.0-dev", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
pallet-support = { default-features = false, path = '../support' }
schelling-game-shared = {default-features = false, path = "../schelling-game-shared"}
schelling-game-shared-link = {default-features = false, path = "../../traits/schelling-game-shared-link"}
sortition-sum-game = {default-features = false, path="../sortition-sum-game"}

[dev-dependencies]
sp-core = { version = "7.0.0", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
sp-io = { version = "7.0.0", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
sp-runtime = { version = "7.0.0", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
frame-support-test = { version = "3.0.0", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }

[features]
default = ["std"]
std = [
	"codec/std",
	"frame-benchmarking?/std",
	"frame-support/std",
	"frame-system/std",
	"scale-info/std",
	"pallet-timestamp/std",
	"pallet-balances/std",
	"pallet-support/std",
	"schelling-game-shared/std",
	"sortition-sum-game/std",
]
runtime-benchmarks = ["frame-benchmarking/runtime-benchmarks"]
try-runtime = ["frame-support/try-runtime"]

'''
'''--- pallets/profile-validation/README.md ---
License: MIT-0
'''
'''--- pallets/profile-validation/profile-validation-rpc/Cargo.toml ---
[package]
name = "profile-validation-rpc"
version = "0.1.0"
edition = "2021"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
jsonrpsee = { version = "0.16.2", features = ["client-core", "server", "macros"] }
sc-rpc = { version = "4.0.0-dev", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
sp-api = { version = "4.0.0-dev", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
sc-rpc-api = { version = "0.10.0-dev", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
sp-blockchain = { version = "4.0.0-dev", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
sp-runtime = { default-features = false, version = "7.0.0", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
profile-validation-runtime-api = { default-features= false, path="../profile-validation-runtime-api"}

'''
'''--- pallets/profile-validation/profile-validation-rpc/src/lib.rs ---
use jsonrpsee::{
	core::{Error as JsonRpseeError, RpcResult},
	proc_macros::rpc,
	types::error::{CallError, ErrorCode, ErrorObject},
};
use profile_validation_runtime_api::ProfileValidationApi as ProfileValidationRuntimeApi;
use sp_api::codec::Codec;
use sp_api::ProvideRuntimeApi;
use sp_blockchain::HeaderBackend;
use sp_runtime::traits::Block as BlockT;
use std::sync::Arc;
type ChallengePostId = u64;

#[rpc(client, server)]
pub trait ProfileValidationApi<BlockHash, AccountId> {
	#[method(name = "profilevalidation_challengerevidence")]
	fn get_challengers_evidence(
		&self,
		profile_user_account: AccountId,
		offset: u64,
		limit: u16,
		at: Option<BlockHash>,
	) -> RpcResult<Vec<ChallengePostId>>;
	#[method(name = "profilevalidation_evidenceperiodendblock")]
	fn get_evidence_period_end_block(
		&self,
		profile_user_account: AccountId,
		at: Option<BlockHash>,
	) -> RpcResult<Option<u32>>;
	#[method(name = "profilevalidation_stakingperiodendblock")]
	fn get_staking_period_end_block(
		&self,
		profile_user_account: AccountId,
		at: Option<BlockHash>,
	) -> RpcResult<Option<u32>>;
	#[method(name = "profilevalidation_drawingperiodend")]
	fn get_drawing_period_end(
		&self,
		profile_user_account: AccountId,
		at: Option<BlockHash>,
	) -> RpcResult<(u64, u64, bool)>;
	#[method(name = "profilevalidation_commitendblock")]
	fn get_commit_period_end_block(
		&self,
		profile_user_account: AccountId,
		at: Option<BlockHash>,
	) -> RpcResult<Option<u32>>;
	#[method(name = "profilevalidation_voteendblock")]
	fn get_vote_period_end_block(
		&self,
		profile_user_account: AccountId,
		at: Option<BlockHash>,
	) -> RpcResult<Option<u32>>;
	#[method(name = "profilevalidation_selectedjuror")]
	fn selected_as_juror(
		&self,
		profile_user_account: AccountId,
		who: AccountId,
		at: Option<BlockHash>,
	) -> RpcResult<bool>;
}

/// A struct that implements the `SumStorageApi`.
pub struct ProfileValidation<C, M> {
	// If you have more generics, no need to SumStorage<C, M, N, P, ...>
	// just use a tuple like SumStorage<C, (M, N, P, ...)>
	client: Arc<C>,
	_marker: std::marker::PhantomData<M>,
}

impl<C, M> ProfileValidation<C, M> {
	/// Create new `SumStorage` instance with the given reference to the client.
	pub fn new(client: Arc<C>) -> Self {
		Self { client, _marker: Default::default() }
	}
}

/// Error type of this RPC api.
pub enum Error {
	/// The transaction was not decodable.
	DecodeError,
	/// The call to runtime failed.
	RuntimeError,
}

impl From<Error> for i32 {
	fn from(e: Error) -> i32 {
		match e {
			Error::RuntimeError => 1,
			Error::DecodeError => 2,
		}
	}
}

impl<C, Block, AccountId> ProfileValidationApiServer<<Block as BlockT>::Hash, AccountId> for ProfileValidation<C, Block>
where
	Block: BlockT,
	AccountId: Codec,
	C: Send + Sync + 'static,
	C: ProvideRuntimeApi<Block>,
	C: HeaderBackend<Block>,
	C::Api: ProfileValidationRuntimeApi<Block, AccountId>,
{
	fn get_challengers_evidence(
		&self,
		profile_user_account: AccountId,
		offset: u64,
		limit: u16,
		at: Option<Block::Hash>,
	) -> RpcResult<Vec<ChallengePostId>> {
		let api = self.client.runtime_api();
		let at = at.unwrap_or_else(||
			// If the block hash is not supplied assume the best block.
			self.client.info().best_hash);

		let runtime_api_result =
			api.get_challengers_evidence(at, profile_user_account, offset, limit);
			fn map_err(error: impl ToString, desc: &'static str) -> CallError {
				CallError::Custom(ErrorObject::owned(
					Error::RuntimeError.into(),
					desc,
					Some(error.to_string()),
				))
			}
			let res = runtime_api_result.map_err(|e| map_err(e, "Unable to query dispatch info."))?;
			Ok(res)
	}
	fn get_evidence_period_end_block(
		&self,
		profile_user_account: AccountId,
		at: Option<Block::Hash>,
	) -> RpcResult<Option<u32>> {
		let api = self.client.runtime_api();
		let at = at.unwrap_or_else(||
			// If the block hash is not supplied assume the best block.
			self.client.info().best_hash);

		let runtime_api_result = api.get_evidence_period_end_block(at, profile_user_account);
		fn map_err(error: impl ToString, desc: &'static str) -> CallError {
			CallError::Custom(ErrorObject::owned(
				Error::RuntimeError.into(),
				desc,
				Some(error.to_string()),
			))
		}
		let res = runtime_api_result.map_err(|e| map_err(e, "Unable to query dispatch info."))?;
			Ok(res)
	}
	fn get_staking_period_end_block(
		&self,
		profile_user_account: AccountId,
		at: Option<Block::Hash>,
	) -> RpcResult<Option<u32>> {
		let api = self.client.runtime_api();
		let at = at.unwrap_or_else(||
			// If the block hash is not supplied assume the best block.
			self.client.info().best_hash);

		let runtime_api_result = api.get_staking_period_end_block(at, profile_user_account);
		fn map_err(error: impl ToString, desc: &'static str) -> CallError {
			CallError::Custom(ErrorObject::owned(
				Error::RuntimeError.into(),
				desc,
				Some(error.to_string()),
			))
		}
		let res = runtime_api_result.map_err(|e| map_err(e, "Unable to query dispatch info."))?;
			Ok(res)
	}
	fn get_drawing_period_end(
		&self,
		profile_user_account: AccountId,
		at: Option<Block::Hash>,
	) -> RpcResult<(u64, u64, bool)> {
		let api = self.client.runtime_api();
		let at = at.unwrap_or_else(||
			// If the block hash is not supplied assume the best block.
			self.client.info().best_hash);

		let runtime_api_result = api.get_drawing_period_end(at, profile_user_account);
		fn map_err(error: impl ToString, desc: &'static str) -> CallError {
			CallError::Custom(ErrorObject::owned(
				Error::RuntimeError.into(),
				desc,
				Some(error.to_string()),
			))
		}
		let res = runtime_api_result.map_err(|e| map_err(e, "Unable to query dispatch info."))?;
			Ok(res)
	}

	fn get_commit_period_end_block(
		&self,
		profile_user_account: AccountId,
		at: Option<Block::Hash>,
	) -> RpcResult<Option<u32>> {
		let api = self.client.runtime_api();
		let at = at.unwrap_or_else(||
			// If the block hash is not supplied assume the best block.
			self.client.info().best_hash);

		let runtime_api_result = api.get_commit_period_end_block(at, profile_user_account);
		fn map_err(error: impl ToString, desc: &'static str) -> CallError {
			CallError::Custom(ErrorObject::owned(
				Error::RuntimeError.into(),
				desc,
				Some(error.to_string()),
			))
		}
		let res = runtime_api_result.map_err(|e| map_err(e, "Unable to query dispatch info."))?;
			Ok(res)
	}

	fn get_vote_period_end_block(
		&self,
		profile_user_account: AccountId,
		at: Option<Block::Hash>,
	) -> RpcResult<Option<u32>> {
		let api = self.client.runtime_api();
		let at = at.unwrap_or_else(||
			// If the block hash is not supplied assume the best block.
			self.client.info().best_hash);

		let runtime_api_result = api.get_vote_period_end_block(at, profile_user_account);
		fn map_err(error: impl ToString, desc: &'static str) -> CallError {
			CallError::Custom(ErrorObject::owned(
				Error::RuntimeError.into(),
				desc,
				Some(error.to_string()),
			))
		}
		let res = runtime_api_result.map_err(|e| map_err(e, "Unable to query dispatch info."))?;
			Ok(res)
	}

	fn selected_as_juror(
		&self,
		profile_user_account: AccountId,
		who: AccountId,
		at: Option<Block::Hash>,
	) -> RpcResult<bool> {
		let api = self.client.runtime_api();
		let at = at.unwrap_or_else(||
			// If the block hash is not supplied assume the best block.
			self.client.info().best_hash);

		let runtime_api_result = api.selected_as_juror(at, profile_user_account, who);
		fn map_err(error: impl ToString, desc: &'static str) -> CallError {
			CallError::Custom(ErrorObject::owned(
				Error::RuntimeError.into(),
				desc,
				Some(error.to_string()),
			))
		}
		let res = runtime_api_result.map_err(|e| map_err(e, "Unable to query dispatch info."))?;
			Ok(res)
	}
}

'''
'''--- pallets/profile-validation/profile-validation-runtime-api/Cargo.toml ---
[package]
name = "profile-validation-runtime-api"
version = "0.1.0"
edition = "2021"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
sp-api = { default-features = false, version = "4.0.0-dev", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
frame-support = { default-features = false, version = "4.0.0-dev", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42"}

[features]
default = ["std"]
std = [
	"sp-api/std",
	"frame-support/std",
]

'''
'''--- pallets/profile-validation/profile-validation-runtime-api/src/lib.rs ---
#![cfg_attr(not(feature = "std"), no_std)]

// use frame_support::sp_std::{vec::Vec};
//  or
use frame_support::sp_std::{prelude::*};
use sp_api::codec::Codec;
type ChallengePostId = u64;

sp_api::decl_runtime_apis! {
	pub trait ProfileValidationApi<AccountId> where AccountId: Codec {
		fn get_challengers_evidence(profile_user_account: AccountId, offset: u64, limit: u16) -> Vec<ChallengePostId>;
		fn get_evidence_period_end_block(profile_user_account: AccountId) -> Option<u32>;
		fn get_staking_period_end_block(profile_user_account: AccountId) -> Option<u32>;
		fn get_drawing_period_end(profile_user_account: AccountId) -> (u64, u64, bool);
		fn get_commit_period_end_block(profile_user_account: AccountId) -> Option<u32>;
		fn get_vote_period_end_block(profile_user_account: AccountId) -> Option<u32>;
		fn selected_as_juror(profile_user_account: AccountId, who: AccountId) -> bool;
	}
}
'''
'''--- pallets/profile-validation/src/benchmarking.rs ---
//! Benchmarking setup for pallet-template
#![cfg(feature = "runtime-benchmarks")]
use super::*;

#[allow(unused)]
use crate::Pallet as Template;
use frame_benchmarking::v2::*;
use frame_system::RawOrigin;

#[benchmarks]
mod benchmarks {
	use super::*;

	#[benchmark]
	fn do_something() {
		let value = 100u32.into();
		let caller: T::AccountId = whitelisted_caller();
		#[extrinsic_call]
		do_something(RawOrigin::Signed(caller), value);

		assert_eq!(Something::<T>::get(), Some(value));
	}

	#[benchmark]
	fn cause_error() {
		Something::<T>::put(100u32);
		let caller: T::AccountId = whitelisted_caller();
		#[extrinsic_call]
		cause_error(RawOrigin::Signed(caller));

		assert_eq!(Something::<T>::get(), Some(101u32));
	}

	impl_benchmark_test_suite!(Template, crate::mock::new_test_ext(), crate::mock::Test);
}

'''
'''--- pallets/profile-validation/src/docimages/change_period.svg ---
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<svg
   xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmlns:cc="http://creativecommons.org/ns#"
   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
   xmlns:svg="http://www.w3.org/2000/svg"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   width="225.2605mm"
   height="101.97312mm"
   viewBox="0 0 225.2605 101.97312"
   version="1.1"
   id="svg8"
   inkscape:version="1.0 (4035a4fb49, 2020-05-01)"
   sodipodi:docname="change_period.svg">
  <defs
     id="defs2">
    <marker
       inkscape:isstock="true"
       style="overflow:visible"
       id="Arrow2Mend"
       refX="0"
       refY="0"
       orient="auto"
       inkscape:stockid="Arrow2Mend">
      <path
         transform="scale(-0.6)"
         d="M 8.7185878,4.0337352 -2.2072895,0.01601326 8.7185884,-4.0017078 c -1.7454984,2.3720609 -1.7354408,5.6174519 -6e-7,8.035443 z"
         style="fill:#000000;fill-opacity:1;fill-rule:evenodd;stroke:#000000;stroke-width:0.625;stroke-linejoin:round;stroke-opacity:1"
         id="path945" />
    </marker>
    <marker
       inkscape:isstock="true"
       style="overflow:visible"
       id="marker880"
       refX="0"
       refY="0"
       orient="auto"
       inkscape:stockid="Arrow1Lend">
      <path
         transform="matrix(-0.8,0,0,-0.8,-10,0)"
         style="fill:#000000;fill-opacity:1;fill-rule:evenodd;stroke:#000000;stroke-width:1pt;stroke-opacity:1"
         d="M 0,0 5,-5 -12.5,0 5,5 Z"
         id="path878" />
    </marker>
    <marker
       inkscape:collect="always"
       inkscape:stockid="Arrow1Lend"
       orient="auto"
       refY="0"
       refX="0"
       id="marker1155"
       style="overflow:visible"
       inkscape:isstock="true">
      <path
         id="path1153"
         d="M 0,0 5,-5 -12.5,0 5,5 Z"
         style="fill:#000000;fill-opacity:1;fill-rule:evenodd;stroke:#000000;stroke-width:1pt;stroke-opacity:1"
         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
    </marker>
    <marker
       inkscape:stockid="Arrow1Lend"
       orient="auto"
       refY="0"
       refX="0"
       id="Arrow1Lend"
       style="overflow:visible"
       inkscape:isstock="true">
      <path
         id="path854"
         d="M 0,0 5,-5 -12.5,0 5,5 Z"
         style="fill:#000000;fill-opacity:1;fill-rule:evenodd;stroke:#000000;stroke-width:1pt;stroke-opacity:1"
         transform="matrix(-0.8,0,0,-0.8,-10,0)" />
    </marker>
    <marker
       inkscape:stockid="Arrow1Lstart"
       orient="auto"
       refY="0"
       refX="0"
       id="Arrow1Lstart"
       style="overflow:visible"
       inkscape:isstock="true">
      <path
         id="path851"
         d="M 0,0 5,-5 -12.5,0 5,5 Z"
         style="fill:#000000;fill-opacity:1;fill-rule:evenodd;stroke:#000000;stroke-width:1pt;stroke-opacity:1"
         transform="matrix(0.8,0,0,0.8,10,0)" />
    </marker>
  </defs>
  <sodipodi:namedview
     inkscape:pagecheckerboard="false"
     id="base"
     pagecolor="#ffffff"
     bordercolor="#666666"
     borderopacity="1.0"
     inkscape:pageopacity="1"
     inkscape:pageshadow="2"
     inkscape:zoom="0.46111111"
     inkscape:cx="594.73298"
     inkscape:cy="418.0645"
     inkscape:document-units="mm"
     inkscape:current-layer="layer1"
     inkscape:document-rotation="0"
     showgrid="false"
     fit-margin-top="10"
     fit-margin-left="10"
     fit-margin-right="10"
     fit-margin-bottom="10"
     inkscape:window-width="1514"
     inkscape:window-height="752"
     inkscape:window-x="477"
     inkscape:window-y="315"
     inkscape:window-maximized="0" />
  <g
     inkscape:label="Layer 1"
     inkscape:groupmode="layer"
     id="layer1"
     transform="translate(5.4259714,-9.5996916)">
    <path
       style="fill:#ffff00;stroke-width:2.1;stroke-linecap:round;stroke-linejoin:bevel;stroke-miterlimit:4;stroke-dasharray:none"
       d="M 12.897401,63.318873 H 194.99746"
       id="path833" />
    <path
       style="fill:#000000;stroke:#000000;stroke-width:1;stroke-linecap:round;stroke-linejoin:bevel;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"
       d="M 8.1726417,56.079524 H 195.4307"
       id="path835" />
    <path
       style="fill:#000000;stroke:#000000;stroke-width:1;stroke-linecap:round;stroke-linejoin:bevel;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"
       d="M 29.864068,44.591573 V 70.510666"
       id="path837" />
    <path
       id="path839"
       d="M 153.68945,44.591573 V 70.510666"
       style="fill:#000000;stroke:#000000;stroke-width:1;stroke-linecap:round;stroke-linejoin:bevel;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" />
    <text
       xml:space="preserve"
       style="font-size:7.05556px;line-height:1.25;font-family:Adelaide;-inkscape-font-specification:Adelaide;letter-spacing:0px;stroke-width:0.264583"
       x="10.549484"
       y="39.020523"
       id="text847"><tspan
         sodipodi:role="line"
         id="tspan845"
         x="10.549484"
         y="39.020523"
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:Ubuntu;-inkscape-font-specification:Ubuntu;stroke-width:0.264583">add profile fund</tspan></text>
    <path
       style="fill:#000000;stroke:#000000;stroke-width:0.677416;stroke-linecap:round;stroke-linejoin:bevel;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;marker-start:url(#Arrow1Lstart);marker-end:url(#marker1155)"
       d="M 34.710168,98.132732 H 144.23359"
       id="path849" />
    <text
       id="text874"
       y="79.044121"
       x="4.2918062"
       style="font-size:7.05556px;line-height:1.25;font-family:Adelaide;-inkscape-font-specification:Adelaide;letter-spacing:0px;stroke-width:0.264583"
       xml:space="preserve"><tspan
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:Ubuntu;-inkscape-font-specification:Ubuntu;stroke-width:0.264583"
         y="79.044121"
         x="4.2918062"
         id="tspan872"
         sodipodi:role="line">set evidence period</tspan></text>
    <path
       style="fill:#000000;stroke:#000000;stroke-width:0.801212;stroke-linecap:round;stroke-linejoin:bevel;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;marker-end:url(#Arrow2Mend)"
       d="M 88.842065,30.377522 V 47.016021"
       id="path1236" />
    <text
       id="text1240"
       y="41.214741"
       x="124.0885"
       style="font-size:7.05556px;line-height:1.25;font-family:Adelaide;-inkscape-font-specification:Adelaide;letter-spacing:0px;stroke-width:0.264583"
       xml:space="preserve"><tspan
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:Ubuntu;-inkscape-font-specification:Ubuntu;stroke-width:0.264583"
         y="41.214741"
         x="124.0885"
         id="tspan1238"
         sodipodi:role="line">challenge profile with fund</tspan></text>
    <text
       id="text1268"
       y="77.231537"
       x="166.60289"
       style="font-size:7.05556px;line-height:1.25;font-family:Adelaide;-inkscape-font-specification:Adelaide;letter-spacing:0px;stroke-width:0.264583"
       xml:space="preserve"><tspan
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:Ubuntu;-inkscape-font-specification:Ubuntu;text-align:center;text-anchor:middle;stroke-width:0.264583"
         y="77.231537"
         x="166.60289"
         id="tspan1266"
         sodipodi:role="line">set to staking period</tspan><tspan
         id="tspan1300"
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:Ubuntu;-inkscape-font-specification:Ubuntu;text-align:center;text-anchor:middle;stroke-width:0.264583"
         y="86.44162"
         x="166.60289"
         sodipodi:role="line">create tree</tspan><tspan
         id="tspan1298"
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:Ubuntu;-inkscape-font-specification:Ubuntu;stroke-width:0.264583"
         y="95.26107"
         x="166.60289"
         sodipodi:role="line" /></text>
    <text
       id="text1296"
       y="25.074806"
       x="62.78199"
       style="font-size:7.05556px;line-height:1.25;font-family:Adelaide;-inkscape-font-specification:Adelaide;letter-spacing:0px;stroke-width:0.264583"
       xml:space="preserve"><tspan
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:Ubuntu;-inkscape-font-specification:Ubuntu;stroke-width:0.264583"
         y="25.074806"
         x="62.78199"
         id="tspan1294"
         sodipodi:role="line">challenge evidence</tspan></text>
    <text
       id="text1402"
       y="94.419746"
       x="50.167404"
       style="font-size:7.05556px;line-height:1.25;font-family:Adelaide;-inkscape-font-specification:Adelaide;letter-spacing:0px;stroke-width:0.264583"
       xml:space="preserve"><tspan
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:Ubuntu;-inkscape-font-specification:Ubuntu;stroke-width:0.264583"
         y="94.419746"
         x="50.167404"
         id="tspan1400"
         sodipodi:role="line">min_short_block_length</tspan></text>
  </g>
</svg>

'''
'''--- pallets/profile-validation/src/extras.rs ---
use crate::*;

impl<T: Config> CitizenDetailsPost<T> {
	pub fn new(citizen_id: CitizenId, created_by: T::AccountId, content: Content) -> Self {
		CitizenDetailsPost {
			created: new_who_and_when::<T>(created_by.clone()),
			content,
			citizen_id,
			owner: created_by,
			edited: false,
			hidden: false,
			upvotes_count: 0,
			downvotes_count: 0,
		}
	}

	pub fn ensure_owner(&self, account: &T::AccountId) -> DispatchResult {
		ensure!(self.is_owner(account), Error::<T>::NotAPostOwner);
		Ok(())
	}

	pub fn is_owner(&self, account: &T::AccountId) -> bool {
		self.owner == *account
	}
}

impl<T: Config> ChallengeEvidencePost<T> {
	pub fn new(
		kyc_profile_id: T::AccountId,
		created_by: T::AccountId,
		content: Content,
		post_id_if_comment: Option<ChallengePostId>,
	) -> Self {
		ChallengeEvidencePost {
			created: new_who_and_when::<T>(created_by.clone()),
			owner: created_by,
			kyc_profile_id,
			content,
			post_id_if_comment,
			is_comment: false,
		}
	}

	pub fn ensure_owner(&self, account: &T::AccountId) -> DispatchResult {
		ensure!(self.is_owner(account), Error::<T>::NotAPostOwner);
		Ok(())
	}

	pub fn is_owner(&self, account: &T::AccountId) -> bool {
		self.owner == *account
	}
}

impl<T: Config> Pallet<T> {
	pub(super) fn get_phase_data() -> PhaseData<T> {
		T::SchellingGameSharedSource::create_phase_with_all_data(10, 100, 100, 100, 100, 100, 100, 5, 5, 100, (100, 100))
		// T::SchellingGameSharedSource::create_phase_data(100, 5, 3, 100, (100, 100))
	}

	// pub(super) fn get_citizen_accountid(
	// 	citizenid: CitizenId,
	// ) -> Result<T::AccountId, DispatchError> {
	// 	let profile = Self::citizen_profile(citizenid).ok_or(Error::<T>::CitizenDoNotExists)?;
	// 	Ok(profile.owner)
	// }

	pub(super) fn fund_profile_account() -> T::AccountId {
		PALLET_ID.into_sub_account_truncating(1)
	}

	pub(super) fn u64_to_balance_saturated(input: u64) -> BalanceOf<T> {
		input.saturated_into::<BalanceOf<T>>()
	}

	pub(super) fn balance_to_u64_saturated(input:  BalanceOf<T>) -> u64 {
		input.saturated_into::<u64>()
	}

	pub(super) fn u64_to_block_saturated(input: u64) -> BlockNumberOf<T> {
		input.saturated_into::<BlockNumberOf<T>>()
	}

	pub fn get_challengers_evidence(
		profile_user_account: T::AccountId,
		offset: u64,
		limit: u16,
	) -> Vec<ChallengePostId> {
		let mut data = <ChallengerEvidenceId<T>>::iter_prefix_values(&profile_user_account)
			.skip(offset as usize)
			.take(limit as usize)
			.collect::<Vec<_>>();
		data.sort();
		data.reverse();
		data
	}

	pub fn get_evidence_period_end_block(profile_user_account: T::AccountId) -> Option<u32> {
		let now = <frame_system::Pallet<T>>::block_number();
		let block_number = <ProfileValidationBlock<T>>::get(&profile_user_account);

		let key = SumTreeName::ProfileValidation {
			citizen_address: profile_user_account.clone(),
			block_number,
		};

		let phase_data = Self::get_phase_data();

		let result = T::SchellingGameSharedSource::get_evidence_period_end_block_helper_link(
			key, phase_data, now,
		);
		result

	}

	
	pub fn get_staking_period_end_block(profile_user_account: T::AccountId) -> Option<u32> {
		let now = <frame_system::Pallet<T>>::block_number();
		let block_number = <ProfileValidationBlock<T>>::get(&profile_user_account);

		let key = SumTreeName::ProfileValidation {
			citizen_address: profile_user_account.clone(),
			block_number,
		};

		let phase_data = Self::get_phase_data();

		let result = T::SchellingGameSharedSource::get_staking_period_end_block_helper_link(
			key, phase_data, now,
		);
		result
	}

	pub fn get_drawing_period_end(profile_user_account: T::AccountId) -> (u64, u64, bool) {
		let block_number = <ProfileValidationBlock<T>>::get(&profile_user_account);

		let key = SumTreeName::ProfileValidation {
			citizen_address: profile_user_account.clone(),
			block_number,
		};
		let phase_data = Self::get_phase_data();

		let result =
			T::SchellingGameSharedSource::get_drawing_period_end_helper_link(key, phase_data);
		result
	}

	pub fn get_commit_period_end_block(profile_user_account: T::AccountId) -> Option<u32> {
		let now = <frame_system::Pallet<T>>::block_number();
		let block_number = <ProfileValidationBlock<T>>::get(&profile_user_account);

		let key = SumTreeName::ProfileValidation {
			citizen_address: profile_user_account.clone(),
			block_number,
		};
		let phase_data = Self::get_phase_data();

		let result = T::SchellingGameSharedSource::get_commit_period_end_block_helper_link(
			key, phase_data, now,
		);
		result
	}

	pub fn get_vote_period_end_block(profile_user_account: T::AccountId) -> Option<u32> {
		let now = <frame_system::Pallet<T>>::block_number();
		let block_number = <ProfileValidationBlock<T>>::get(&profile_user_account);

		let key = SumTreeName::ProfileValidation {
			citizen_address: profile_user_account.clone(),
			block_number,
		};
		let phase_data = Self::get_phase_data();

		let result = T::SchellingGameSharedSource::get_vote_period_end_block_helper_link(
			key, phase_data, now,
		);
		result
	}

	pub fn selected_as_juror(profile_user_account: T::AccountId, who: T::AccountId) -> bool {
		let block_number = <ProfileValidationBlock<T>>::get(&profile_user_account);

		let key = SumTreeName::ProfileValidation {
			citizen_address: profile_user_account.clone(),
			block_number,
		};

		let result = T::SchellingGameSharedSource::selected_as_juror_helper_link(key, who);
		result
	}

	pub fn profile_fund_required(profile_user_account: T::AccountId) ->  Option<u64> {
		let registration_fee = Self::profile_registration_challenge_fees();
		let total_funded = Self::total_fund_for_profile_collected(profile_user_account);
		let registration_fee_u64 = Self::balance_to_u64_saturated(registration_fee);
		let total_fund_u64 = Self::balance_to_u64_saturated(total_funded);
		let fund_required = registration_fee_u64.checked_sub(total_fund_u64);
		fund_required
	}
}

'''
'''--- pallets/profile-validation/src/lib.rs ---
#![cfg_attr(not(feature = "std"), no_std)]

/// Edit this file to define custom logic or remove it if it is not needed.
/// Learn more about FRAME and the core library of Substrate FRAME pallets:
/// <https://docs.substrate.io/reference/frame-pallets/>
///
/// To Do:
/// Add profile ✅
/// Crowdfund for profile stake ✅
/// Add another account in case you loose account access
/// Appeal in case of fradulent account
/// Clean the storage after are incentives are given
pub use pallet::*;

#[cfg(test)]
mod mock;

#[cfg(test)]
mod tests;

#[cfg(feature = "runtime-benchmarks")]
mod benchmarking;
pub mod weights;
pub use weights::*;

mod extras;
mod permissions;
mod types;

use crate::types::{ChallengeEvidencePost, ChallengerFundInfo, ProfileFundInfo};
use frame_support::sp_runtime::traits::AccountIdConversion;
use frame_support::sp_runtime::traits::{CheckedAdd, CheckedSub};
use frame_support::sp_runtime::SaturatedConversion;
use frame_support::sp_std::prelude::*;
use frame_support::{dispatch::DispatchResult, pallet_prelude::*};
use frame_support::{
	traits::{
		Currency, ExistenceRequirement, Get, OnUnbalanced, ReservableCurrency, WithdrawReasons,
	},
	PalletId,
};

use pallet_support::{
	ensure_content_is_valid, new_who_and_when, remove_from_vec, Content, WhoAndWhen, WhoAndWhenOf,
};
use schelling_game_shared::types::{
	Period, PhaseData, RangePoint, SchellingGameType, WinningDecision,
};
use schelling_game_shared_link::SchellingGameSharedLink;
use sortition_sum_game::types::SumTreeName;
pub use types::{CitizenDetailsPost, FIRST_CHALLENGE_POST_ID, FIRST_CITIZEN_ID};
type AccountIdOf<T> = <T as frame_system::Config>::AccountId;
type BalanceOf<T> = <<T as Config>::Currency as Currency<AccountIdOf<T>>>::Balance;
type ProfileFundInfoOf<T> = ProfileFundInfo<BalanceOf<T>, AccountIdOf<T>>;
type ChallengerFundInfoOf<T> =
	ChallengerFundInfo<BalanceOf<T>, <T as frame_system::Config>::BlockNumber, AccountIdOf<T>>;
pub type BlockNumberOf<T> = <T as frame_system::Config>::BlockNumber;
type CitizenId = u64;
type ChallengePostId = u64;
type PositiveImbalanceOf<T> = <<T as Config>::Currency as Currency<
	<T as frame_system::Config>::AccountId,
>>::PositiveImbalance;
type NegativeImbalanceOf<T> = <<T as Config>::Currency as Currency<
	<T as frame_system::Config>::AccountId,
>>::NegativeImbalance;

const PALLET_ID: PalletId = PalletId(*b"ex/cfund");

#[frame_support::pallet(dev_mode)]
pub mod pallet {
	use super::*;
	use frame_support::pallet_prelude::*;
	use frame_system::pallet_prelude::*;

	#[pallet::pallet]
	#[pallet::without_storage_info]
	pub struct Pallet<T>(_);

	/// Configure the pallet by specifying the parameters and types on which it depends.
	#[pallet::config]
	pub trait Config:
		frame_system::Config + pallet_timestamp::Config + schelling_game_shared::Config
	{
		/// Because this pallet emits events, it depends on the runtime's definition of an event.
		type RuntimeEvent: From<Event<Self>> + IsType<<Self as frame_system::Config>::RuntimeEvent>;
		/// Type representing the weight of this pallet
		type WeightInfo: WeightInfo;

		type SchellingGameSharedSource: SchellingGameSharedLink<
			SumTreeName = SumTreeName<Self::AccountId, Self::BlockNumber>,
			SchellingGameType = SchellingGameType,
			BlockNumber = Self::BlockNumber,
			AccountId = AccountIdOf<Self>,
			Balance = BalanceOf<Self>,
			RangePoint = RangePoint,
			Period = Period,
			WinningDecision = WinningDecision,
			PhaseData = PhaseData<Self>,
		>;
		type Currency: ReservableCurrency<Self::AccountId>;
		/// Handler for the unbalanced increment when rewarding (minting rewards)
		type Reward: OnUnbalanced<PositiveImbalanceOf<Self>>;

		/// Handler for the unbalanced decrement when slashing (burning collateral)
		type Slash: OnUnbalanced<NegativeImbalanceOf<Self>>;
	}

	// The pallet's runtime storage items.
	// https://docs.substrate.io/main-docs/build/runtime-storage/
	#[pallet::storage]
	#[pallet::getter(fn something)]
	// Learn more about declaring storage items:
	// https://docs.substrate.io/main-docs/build/runtime-storage/#declaring-storage-items
	pub type Something<T> = StorageValue<_, u32>;

	#[pallet::type_value]
	pub fn DefaultForNextCitizenId() -> CitizenId {
		FIRST_CITIZEN_ID
	}

	#[pallet::storage]
	#[pallet::getter(fn next_citizen_id)]
	pub type NextCitizenId<T: Config> =
		StorageValue<_, CitizenId, ValueQuery, DefaultForNextCitizenId>;

	#[pallet::storage]
	#[pallet::getter(fn get_citizen_id)]
	pub type GetCitizenId<T: Config> = StorageMap<_, Blake2_128Concat, T::AccountId, CitizenId>;

	#[pallet::storage]
	#[pallet::getter(fn citizen_profile)]
	pub type CitizenProfile<T: Config> =
		StorageMap<_, Blake2_128Concat, T::AccountId, CitizenDetailsPost<T>>; // Peer account id => Peer Profile Hash

	// Registration Fees

	#[pallet::type_value]
	pub fn DefaultRegistrationFee<T: Config>() -> BalanceOf<T> {
		1000u128.saturated_into::<BalanceOf<T>>()
	}
	// Registration challenge fees
	#[pallet::type_value]
	pub fn DefaultRegistrationChallengeFee<T: Config>() -> BalanceOf<T> {
		100u128.saturated_into::<BalanceOf<T>>()
	}

	#[pallet::storage]
	#[pallet::getter(fn profile_registration_fees)]
	pub type RegistrationFee<T: Config> =
		StorageValue<_, BalanceOf<T>, ValueQuery, DefaultRegistrationFee<T>>;

	#[pallet::storage]
	#[pallet::getter(fn profile_registration_challenge_fees)]
	pub type RegistrationChallengeFee<T: Config> =
		StorageValue<_, BalanceOf<T>, ValueQuery, DefaultRegistrationChallengeFee<T>>;

	#[pallet::storage]
	#[pallet::getter(fn profile_fund_details)]
	pub type ProfileFundDetails<T: Config> = StorageDoubleMap<
		_,
		Blake2_128Concat,
		T::AccountId,
		Blake2_128Concat,
		T::AccountId,
		ProfileFundInfoOf<T>,
	>; // Profile account id and (funder accountid, profile fund info)

	#[pallet::storage]
	#[pallet::getter(fn total_fund_for_profile_collected)]
	pub type ProfileTotalFundCollected<T: Config> =
		StorageMap<_, Blake2_128Concat, T::AccountId, BalanceOf<T>, ValueQuery>;

	#[pallet::storage]
	#[pallet::getter(fn profile_validation_blocknumber)]
	pub type ProfileValidationBlock<T: Config> =
		StorageMap<_, Blake2_128Concat, T::AccountId, BlockNumberOf<T>, ValueQuery>;

	#[pallet::storage]
	#[pallet::getter(fn challenger_fund)]
	pub type ChallengerFundDetails<T: Config> =
		StorageMap<_, Blake2_128Concat, T::AccountId, ChallengerFundInfoOf<T>>; // Profile account id and challenger fund info

	/// There is a single challenger, but they can have multiple posts
	#[pallet::storage]
	#[pallet::getter(fn challenger_evidence_query)]
	pub type ChallengerEvidenceId<T: Config> = StorageDoubleMap<
		_,
		Blake2_128Concat,
		T::AccountId,
		Blake2_128Concat,
		T::AccountId,
		ChallengePostId,
	>; // profile accountid, challenger accountid => Challenge post id

	#[pallet::type_value]
	pub fn DefaultForNextChallengePostId() -> ChallengePostId {
		FIRST_CHALLENGE_POST_ID
	}

	#[pallet::storage]
	#[pallet::getter(fn next_challenge_post_count)]
	pub type NextChallengePostId<T: Config> =
		StorageValue<_, ChallengePostId, ValueQuery, DefaultForNextChallengePostId>;

	#[pallet::storage]
	#[pallet::getter(fn challenge_post_comment)]
	pub type ChallengePostCommentIds<T: Config> =
		StorageMap<_, Blake2_128Concat, ChallengePostId, Vec<ChallengePostId>, ValueQuery>; // challenge post id => Vec<Comment Post It>

	#[pallet::storage]
	#[pallet::getter(fn challenge_post)]
	pub type ChallengePost<T: Config> =
		StorageMap<_, Blake2_128Concat, ChallengePostId, ChallengeEvidencePost<T>>; // challenge post id => post

	// Pallets use events to inform users when important changes are made.
	// https://docs.substrate.io/main-docs/build/events-errors/
	#[pallet::event]
	#[pallet::generate_deposit(pub(super) fn deposit_event)]
	pub enum Event<T: Config> {
		/// Event documentation should end with an array that provides descriptive names for event
		/// parameters. [something, who]
		SomethingStored {
			something: u32,
			who: T::AccountId,
		},
		CreateCitizen(T::AccountId, CitizenId),
		ProfileFund {
			profile: T::AccountId,
			funder: T::AccountId,
		},
	}

	// Errors inform users that something went wrong.
	#[pallet::error]
	pub enum Error<T> {
		/// Error names should be descriptive.
		NoneValue,
		/// Errors should have helpful documentation associated with them.
		StorageOverflow,
		NoMoreUpdates,
		CitizenDoNotExists,
		ProfileFundExists,
		PostAlreadyExists,
		ProfileIsAlreadyValidated,
		ChallengeExits,
		ChallengeDoesNotExists,
		CommentExists,
		IsComment,
		ProfileFundNotExists,
		ChallengerFundInfoExists,
		NotProfileUser,
		NotEvidencePeriod,
		CitizenNotApproved,
		NotAPostOwner,
		AmountFundedGreaterThanRequired,
		ProfileFundAlreadyReturned,
	}

	// Dispatchable functions allows users to interact with the pallet and invoke state changes.
	// These functions materialize as "extrinsics", which are often compared to transactions.
	// Dispatchable functions must be annotated with a weight and must return a DispatchResult.
	#[pallet::call]
	impl<T: Config> Pallet<T> {
		/// Add citizen
		/// <pre>
		/// Get the count from NextCitizenId
		/// If CitizenId exists update the content, only if `ProfileTotalFundCollected` is zero
		/// If CitizenId doesn't exists insert the content, and increment the `NextCitizenId`
		/// </pre>
		/// #[pallet::weight(<T as pallet::Config>::WeightInfo::add_citizen())]
		#[pallet::call_index(0)]
		#[pallet::weight(0)]
		pub fn add_citizen(origin: OriginFor<T>, content: Content) -> DispatchResult {
			let who = ensure_signed(origin)?;
			let count = Self::next_citizen_id();
			match <GetCitizenId<T>>::get(&who) {
				Some(citizen_id) => {
					let total_funded = <ProfileTotalFundCollected<T>>::get(who.clone());
					if total_funded == 0u128.saturated_into::<BalanceOf<T>>() {
						let new_post: CitizenDetailsPost<T> =
							CitizenDetailsPost::new(citizen_id, who.clone(), content.clone());
						<CitizenProfile<T>>::insert(who.clone(), new_post);
						Ok(())
					} else {
						Err(Error::<T>::NoMoreUpdates)?
					}
				},
				None => {
					<GetCitizenId<T>>::insert(&who, count);

					let new_post: CitizenDetailsPost<T> =
						CitizenDetailsPost::new(count, who.clone(), content.clone());

					<CitizenProfile<T>>::insert(who.clone(), new_post);
					NextCitizenId::<T>::mutate(|n| {
						*n += 1;
					});
					Self::deposit_event(Event::CreateCitizen(who, count));
					Ok(())
				},
			}
		}

		/// # Crowdfunding of Profile
		///
		/// Allows users to contribute funds to a profile and manages the associated data for crowdfunding.
		///
		/// ## Parameters
		///
		/// - `origin`: The origin of the transaction.
		/// - `profile_user_account`: The account ID of the profile to fund.
		/// - `amount_to_fund`: The amount of funds to be added to the profile's crowdfunding.
		///
		/// ## Errors
		///
		/// This function can return an error if the amount to fund is greater than the required fund.
		///
		/// ## Storage
		///
		/// - `ProfileValidationBlock`:  Stores the block number to be used for the profile's validation when `amount_to_fund` equals `required_fund`.
		/// - `ProfileFundDetails`: Stores details of funds deposited by users for a specific profile.
		/// - `ProfileTotalFundCollected`: Keeps track of the total funds collected for each profile.
		/// - `RegistrationFee`: Retrieves the registration fee required for profile validation.
		/// - `GetCitizenId`: Storage map that associates a citizen's account address with their Citizen ID.
		///
		/// ## Usage
		///
		/// Call this function to contribute funds to a profile and update the associated storage items.
		/// Checks are performed to ensure the profile exists and that the funded amount is not greater
		/// than required. If the funded amount matches the required amount, the profile validation is marked
		/// as completed, and a link is set to the evidence period in the Schelling Game.
		///
		/// ```rust,ignore
		/// #[pallet::call]
		/// fn add_profile_stake(
		///     origin: OriginFor<T>,
		///     profile_user_account: T::AccountId,
		///     amount_to_fund: BalanceOf<T>,
		/// ) -> DispatchResult {
		///     // implementation
		/// }
		/// ```

		#[pallet::call_index(1)]
		#[pallet::weight(0)]
		pub fn add_profile_stake(
			origin: OriginFor<T>,
			profile_user_account: T::AccountId,
			amount_to_fund: BalanceOf<T>,
		) -> DispatchResult {
			let who = ensure_signed(origin)?;
			    
			// Ensure that the `profile_user_account`` exists in `GetCitizenId` storage.
			Self::ensure_account_id_has_profile(profile_user_account.clone())?;

			// Retrieve the registration fee required for profile validation.
			let registration_fee = <RegistrationFee<T>>::get();

			// Get the total funds already collected for the profile.
			let total_funded = <ProfileTotalFundCollected<T>>::get(profile_user_account.clone());

			// Calculate the required fund by subtracting the total funded from the registration fee.
			let required_fund = registration_fee.checked_sub(&total_funded).expect("Overflow");
			
			// Check if the amount_to_fund is less than or equal to the required fund.
			if amount_to_fund <= required_fund {
				if amount_to_fund == required_fund {

					// If the funded amount matches the required amount, update variables required for profile validation.
					let now = <frame_system::Pallet<T>>::block_number();
					let key = SumTreeName::ProfileValidation {
						citizen_address: profile_user_account.clone(),
						block_number: now.clone(),
					};
					<ProfileValidationBlock<T>>::insert(&profile_user_account, now);

					// Set a link to the evidence period in the Schelling Game.
					T::SchellingGameSharedSource::set_to_evidence_period_link(key, now)?;
				}

				// Withdraw funds from the funder's account.
				let _ = <T as pallet::Config>::Currency::withdraw(
					&who,
					amount_to_fund.clone(),
					WithdrawReasons::TRANSFER,
					ExistenceRequirement::AllowDeath,
				)?;

				// Update the profile fund details for the funder.
				match <ProfileFundDetails<T>>::get(profile_user_account.clone(), who.clone()) {
					Some(mut profile_fund_info) => {
						let deposit = profile_fund_info.deposit;
						let new_deposit = deposit.checked_add(&amount_to_fund).expect("Overflow");
						profile_fund_info.deposit = new_deposit;
						<ProfileFundDetails<T>>::insert(
							profile_user_account.clone(),
							who.clone(),
							profile_fund_info,
						);
					},
					None => {
						let profile_fund_info = ProfileFundInfo {
							funder_account_id: who.clone(),
							validation_account_id: profile_user_account.clone(),
							deposit: amount_to_fund.clone(),
							deposit_returned: false,
						};
						<ProfileFundDetails<T>>::insert(
							profile_user_account.clone(),
							who.clone(),
							profile_fund_info,
						);
					},
				}

				// Update the total funds collected for the profile.
				let next_total_fund = total_funded.checked_add(&amount_to_fund).expect("overflow");
				<ProfileTotalFundCollected<T>>::insert(
					profile_user_account.clone(),
					next_total_fund,
				);

				// Emit a ProfileFund event.
				Self::deposit_event(Event::ProfileFund {
					profile: profile_user_account,
					funder: who,
				});
			} else {
				// Return an error if the funded amount is greater than required.
				Err(Error::<T>::AmountFundedGreaterThanRequired)?
			}

			Ok(())
		}

		// Add fees for challenge profile ✔️
		#[pallet::call_index(2)]
		#[pallet::weight(0)]
		pub fn challenge_profile(
			origin: OriginFor<T>,
			profile_user_account: T::AccountId,
			content: Content,
		) -> DispatchResult {
			let who = ensure_signed(origin)?;
			Self::ensure_account_id_has_profile(profile_user_account.clone())?;
			let now = <frame_system::Pallet<T>>::block_number();

			let fees = Self::profile_registration_challenge_fees();

			let challenger_fund_info = ChallengerFundInfo {
				challengerid: who.clone(),
				deposit: fees,
				start: now.clone(),
				challenge_completed: false,
			};

			let challenger_fund_details = <ChallengerFundDetails<T>>::get(&profile_user_account);
			match challenger_fund_details {
				Some(_value) => Err(Error::<T>::ChallengeExits)?,
				None => {
					let _ = <T as pallet::Config>::Currency::withdraw(
						&who,
						fees.clone(),
						WithdrawReasons::TRANSFER,
						ExistenceRequirement::AllowDeath,
					)?;
					<ChallengerFundDetails<T>>::insert(&profile_user_account, challenger_fund_info);
				},
			}

			let block_number = <ProfileValidationBlock<T>>::get(&profile_user_account);

			let key = SumTreeName::ProfileValidation {
				citizen_address: profile_user_account.clone(),
				block_number,
			};

			let phase_data = Self::get_phase_data();

			T::SchellingGameSharedSource::set_to_staking_period_link(key.clone(), phase_data, now)?;
			T::SchellingGameSharedSource::create_tree_helper_link(key.clone(), 3)?;

			let count = Self::next_challenge_post_count();

			let challenge_evidence_post: ChallengeEvidencePost<T> = ChallengeEvidencePost::new(
				profile_user_account.clone(),
				who.clone(),
				content,
				None,
			);

			match <ChallengerEvidenceId<T>>::get(&profile_user_account, &who) {
				None => {
					<ChallengePost<T>>::insert(&count, challenge_evidence_post);
					NextChallengePostId::<T>::mutate(|n| {
						*n += 1;
					});

					<ChallengerEvidenceId<T>>::insert(&profile_user_account, &who, count);
				},
				Some(_hash) => Err(Error::<T>::PostAlreadyExists)?,
			}
			Ok(())
		}

		// #[pallet::call_index(2)]
		// #[pallet::weight(Weight::from_parts(10_000, u64::MAX) + T::DbWeight::get().reads_writes(2,2))]
		// pub fn challenge_evidence(
		// 	origin: OriginFor<T>,
		// 	profile_citizenid: CitizenId,
		// 	content: Content,
		// ) -> DispatchResult {
		// 	let who = ensure_signed(origin)?;
		// 	let citizen_account_id = Self::get_citizen_accountid(profile_citizenid)?;
		// 	let count = Self::next_challenge_post_count();
		// 	let challenge_evidence_post =
		// 		ChallengeEvidencePost::new(citizen_account_id, who.clone(), content, None);
		// 	match <ChallengerEvidenceId<T>>::get(&profile_citizenid, &who) {
		// 		None => {
		// 			<ChallengePost<T>>::insert(&count, challenge_evidence_post);
		// 			NextChallengePostId::<T>::mutate(|n| {
		// 				*n += 1;
		// 			});

		// 			<ChallengerEvidenceId<T>>::insert(&profile_citizenid, &who, count);
		// 		},
		// 		Some(_hash) => {
		// 			Err(Error::<T>::PostAlreadyExists)?
		// 			// match <ChallengerFundDetails<T>>::get(&profile_citizenid) {
		// 			// 	Some(_challengerfundinfo) => {
		// 			// 		Err(Error::<T>::ChallengerFundAddedCanNotUpdate)?
		// 			// 	},
		// 			// 	None => {
		// 			// 		// Update challenger profile
		// 			// 		<ChallengePost<T>>::insert(&count, challenge_evidence_post);
		// 			// 		let newcount =
		// 			// 			count.checked_add(1).ok_or(Error::<T>::StorageOverflow)?;
		// 			// 		<ChallengePostCount<T>>::put(newcount);
		// 			// 		<ChallengerEvidenceId<T>>::insert(&profile_citizenid, &who, count);
		// 			// 	},
		// 			// }
		// 		},
		// 	}
		// 	Ok(())
		// }

		#[pallet::call_index(3)]
		#[pallet::weight(0)]
		pub fn challenge_comment_create(
			origin: OriginFor<T>,
			post_id: ChallengePostId,
			content: Content,
		) -> DispatchResult {
			let who = ensure_signed(origin)?;
			let count = Self::next_challenge_post_count();
			let main_evidence_post = Self::challenge_post(post_id).unwrap();
			let challenge_evidence_post = ChallengeEvidencePost::new(
				main_evidence_post.kyc_profile_id,
				who,
				content,
				Some(post_id),
			);

			match <ChallengePost<T>>::get(&post_id) {
				None => Err(Error::<T>::ChallengeDoesNotExists)?,
				Some(challenge_evidence_post_c) => {
					if challenge_evidence_post_c.is_comment == false {
						<ChallengePost<T>>::insert(&count, challenge_evidence_post);
						NextChallengePostId::<T>::mutate(|n| {
							*n += 1;
						});
						let mut comment_ids = <ChallengePostCommentIds<T>>::get(&post_id);
						match comment_ids.binary_search(&count) {
							Ok(_) => Err(Error::<T>::CommentExists)?,
							Err(index) => {
								comment_ids.insert(index, count.clone());
								<ChallengePostCommentIds<T>>::insert(&post_id, &comment_ids);
							},
						}
					} else {
						Err(Error::<T>::IsComment)?
					}
				},
			}

			Ok(())
		}

		// // Does citizen exists ✔️
		// // Has the citizen added profile fund ✔️
		// // Create tree ✔️
		// // Check evidence has been submitted
		// #[pallet::call_index(4)]
		// #[pallet::weight(Weight::from_parts(10_000, u64::MAX) + T::DbWeight::get().reads_writes(2,2))]
		// pub fn challenge_profile(
		// 	origin: OriginFor<T>,
		// 	profile_citizenid: CitizenId,
		// ) -> DispatchResult {
		// 	let who = ensure_signed(origin)?;
		// 	let key = SumTreeName::UniqueIdenfier1 {
		// 		citizen_id: profile_citizenid,
		// 		name: "challengeprofile".as_bytes().to_vec(),
		// 	};
		// 	let phase_data = Self::get_phase_data();
		// 	let now = <frame_system::Pallet<T>>::block_number();
		// 	let _citizen_account_id = Self::get_citizen_accountid(profile_citizenid)?;
		// 	match <ProfileFundDetails<T>>::get(&profile_citizenid) {
		// 		Some(profilefundinfo) => {
		// 			if profilefundinfo.validated == true {
		// 				Err(Error::<T>::ProfileIsAlreadyValidated)?;
		// 			} else {
		// 				let _evidence_stake_block_number = profilefundinfo.start; // remove the profile fund info start

		// 				T::SchellingGameSharedSource::set_to_staking_period_link(
		// 					key.clone(),
		// 					phase_data,
		// 					now,
		// 				)?;
		// 			}
		// 		},
		// 		None => {
		// 			Err(Error::<T>::ProfileFundNotExists)?;
		// 		},
		// 	}
		// 	let deposit = <RegistrationChallengeFee<T>>::get();
		// 	let imb = <T as pallet::Config>::Currency::withdraw(
		// 		&who,
		// 		deposit,
		// 		WithdrawReasons::TRANSFER,
		// 		ExistenceRequirement::AllowDeath,
		// 	)?;

		// 	<T as pallet::Config>::Currency::resolve_creating(&Self::fund_profile_account(), imb);

		// 	match <ChallengerFundDetails<T>>::get(&profile_citizenid) {
		// 		// 📝 To write update stake for reapply
		// 		Some(_challengerfundinfo) => Err(Error::<T>::ChallengerFundInfoExists)?,
		// 		None => {
		// 			let challenger_fund_info = ChallengerFundInfo {
		// 				challengerid: who,
		// 				deposit,
		// 				start: now,
		// 				challenge_completed: false,
		// 			};
		// 			<ChallengerFundDetails<T>>::insert(&profile_citizenid, challenger_fund_info);
		// 		},
		// 	}
		//      T::SchellingGameSharedSource::create_tree_helper_link(key, 3)?;

		// 	 Ok(())
		// }

		// May be you need to check challeger fund details exists
		#[pallet::call_index(5)]
		#[pallet::weight(0)]
		pub fn pass_period(
			origin: OriginFor<T>,
			profile_user_account: T::AccountId,
		) -> DispatchResult {
			let _who = ensure_signed(origin)?;

			let block_number = <ProfileValidationBlock<T>>::get(&profile_user_account);

			let key = SumTreeName::ProfileValidation {
				citizen_address: profile_user_account.clone(),
				block_number,
			};

			let now = <frame_system::Pallet<T>>::block_number();
			let phase_data = Self::get_phase_data();

			T::SchellingGameSharedSource::change_period_link(key, phase_data, now)?;

			Ok(())
		}

		// To Do
		// Apply jurors or stake ✔️
		// Update stake
		// Draw jurors ✔️
		// Unstaking non selected jurors ✔️
		// Commit vote ✔️
		// Reveal vote ✔️
		// Get winning decision ✔️
		// Incentive distribution ✔️

		// Staking
		// 1. Check for minimum stake ✔️
		// 2. Check period is Staking ✔️
		// 3. Number of people staked

		#[pallet::call_index(6)]
		#[pallet::weight(0)]
		pub fn apply_jurors(
			origin: OriginFor<T>,
			profile_user_account: T::AccountId,
			stake: BalanceOf<T>,
		) -> DispatchResult {
			let who = ensure_signed(origin)?;

			let block_number = <ProfileValidationBlock<T>>::get(&profile_user_account);

			let key = SumTreeName::ProfileValidation {
				citizen_address: profile_user_account.clone(),
				block_number,
			};

			let phase_data = Self::get_phase_data();

			T::SchellingGameSharedSource::apply_jurors_helper_link(key, phase_data, who, stake)?;

			Ok(())
		}

		// Draw jurors
		// Check period is drawing ✔️
		// Check mininum number of juror staked ✔️
		// Improvements
		// Set stake to zero so that they are not drawn again
		// Store the drawn juror stake in hashmap storage
		// Add min draws along with max draws
		#[pallet::call_index(7)]
		#[pallet::weight(0)]
		pub fn draw_jurors(
			origin: OriginFor<T>,
			profile_user_account: T::AccountId,
			iterations: u64,
		) -> DispatchResult {
			let _who = ensure_signed(origin)?;
			let block_number = <ProfileValidationBlock<T>>::get(&profile_user_account);

			let key = SumTreeName::ProfileValidation {
				citizen_address: profile_user_account.clone(),
				block_number,
			};
			let phase_data = Self::get_phase_data();

			T::SchellingGameSharedSource::draw_jurors_helper_link(key, phase_data, iterations)?;

			Ok(())
		}

		// Unstaking
		// Stop drawn juror to unstake ✔️
		#[pallet::call_index(8)]
		#[pallet::weight(0)]
		pub fn unstaking(
			origin: OriginFor<T>,
			profile_user_account: T::AccountId,
		) -> DispatchResult {
			let who = ensure_signed(origin)?;
			let block_number = <ProfileValidationBlock<T>>::get(&profile_user_account);

			let key = SumTreeName::ProfileValidation {
				citizen_address: profile_user_account.clone(),
				block_number,
			};
			T::SchellingGameSharedSource::unstaking_helper_link(key, who)?;
			Ok(())
		}

		#[pallet::call_index(9)]
		#[pallet::weight(0)]
		pub fn commit_vote(
			origin: OriginFor<T>,
			profile_user_account: T::AccountId,
			vote_commit: [u8; 32],
		) -> DispatchResult {
			let who = ensure_signed(origin)?;
			let block_number = <ProfileValidationBlock<T>>::get(&profile_user_account);

			let key = SumTreeName::ProfileValidation {
				citizen_address: profile_user_account.clone(),
				block_number,
			};
			T::SchellingGameSharedSource::commit_vote_helper_link(key, who, vote_commit)?;
			Ok(())
		}

		#[pallet::call_index(10)]
		#[pallet::weight(0)]
		pub fn reveal_vote(
			origin: OriginFor<T>,
			profile_user_account: T::AccountId,
			choice: u128,
			salt: Vec<u8>,
		) -> DispatchResult {
			let who = ensure_signed(origin)?;
			let block_number = <ProfileValidationBlock<T>>::get(&profile_user_account);

			let key = SumTreeName::ProfileValidation {
				citizen_address: profile_user_account.clone(),
				block_number,
			};

			T::SchellingGameSharedSource::reveal_vote_two_choice_helper_link(
				key, who, choice, salt,
			)?;

			Ok(())
		}

		#[pallet::call_index(11)]
		#[pallet::weight(0)]
		pub fn get_incentives(
			origin: OriginFor<T>,
			profile_user_account: T::AccountId,
		) -> DispatchResult {
			let who = ensure_signed(origin)?;
			let block_number = <ProfileValidationBlock<T>>::get(&profile_user_account);

			let key = SumTreeName::ProfileValidation {
				citizen_address: profile_user_account.clone(),
				block_number,
			};
			let phase_data = Self::get_phase_data();
			T::SchellingGameSharedSource::get_incentives_two_choice_helper_link(
				key, phase_data, who,
			)?;
			Ok(())
		}

		#[pallet::call_index(12)]
		#[pallet::weight(0)]
		pub fn return_profile_stake(
			origin: OriginFor<T>,
			profile_user_account: T::AccountId,
		) -> DispatchResult {
			let who = ensure_signed(origin)?;
			let block_number = <ProfileValidationBlock<T>>::get(&profile_user_account);
			let key = SumTreeName::ProfileValidation {
				citizen_address: profile_user_account.clone(),
				block_number,
			};
			let now = <frame_system::Pallet<T>>::block_number();
			let phase_data = Self::get_phase_data();

			let period = T::SchellingGameSharedSource::get_period_link(key.clone()).unwrap();
			if period == Period::Execution {
				let decision: WinningDecision =
					T::SchellingGameSharedSource::get_winning_decision_value_link(key.clone());
				if decision == WinningDecision::WinnerNo {
					match <ProfileFundDetails<T>>::get(profile_user_account.clone(), who.clone()) {
						Some(mut profile_fund_info) => {
							if profile_fund_info.deposit_returned == false {
								let r = <T as pallet::Config>::Currency::deposit_into_existing(
									&who,
									profile_fund_info.deposit,
								)
								.ok()
								.unwrap();
								<T as pallet::Config>::Reward::on_unbalanced(r);
								profile_fund_info.deposit_returned = true;
								<ProfileFundDetails<T>>::insert(
									profile_user_account.clone(),
									who.clone(),
									profile_fund_info,
								);
							} else {
								Err(Error::<T>::ProfileFundAlreadyReturned)?;
							}
						},
						None => {
							Err(Error::<T>::ProfileFundNotExists)?;
						},
					}
				}
			} else if period == Period::Evidence {
				T::SchellingGameSharedSource::ensure_time_for_staking_over_link(
					key, phase_data, now,
				)?;
				match <ProfileFundDetails<T>>::get(profile_user_account.clone(), who.clone()) {
					Some(mut profile_fund_info) => {
						if profile_fund_info.deposit_returned == false {
							let r = <T as pallet::Config>::Currency::deposit_into_existing(
								&who,
								profile_fund_info.deposit,
							)
							.ok()
							.unwrap();
							<T as pallet::Config>::Reward::on_unbalanced(r);
							profile_fund_info.deposit_returned = true;
							<ProfileFundDetails<T>>::insert(
								profile_user_account.clone(),
								who.clone(),
								profile_fund_info,
							);
						} else {
							Err(Error::<T>::ProfileFundAlreadyReturned)?;
						}
					},
					None => {
						Err(Error::<T>::ProfileFundNotExists)?;
					},
				}
			}

			Ok(())
		}
	}
}

'''
'''--- pallets/profile-validation/src/mock.rs ---
use crate as pallet_template;
use frame_support::{parameter_types, traits::{ConstU16, ConstU64}};
use sp_core::H256;
use sp_runtime::{
	testing::Header,
	traits::{BlakeTwo256, IdentityLookup},
};
use frame_support_test::TestRandomness;

type UncheckedExtrinsic = frame_system::mocking::MockUncheckedExtrinsic<Test>;
type Block = frame_system::mocking::MockBlock<Test>;

// Configure a mock runtime to test the pallet.
frame_support::construct_runtime!(
	pub enum Test where
		Block = Block,
		NodeBlock = Block,
		UncheckedExtrinsic = UncheckedExtrinsic,
	{
		System: frame_system,
		ProfileValidation: pallet_template,
		Balances: pallet_balances,
		Timestamp: pallet_timestamp,
		SchellingGameShared: schelling_game_shared,
		SortitionSumGame: sortition_sum_game,
	}
);

impl frame_system::Config for Test {
	type BaseCallFilter = frame_support::traits::Everything;
	type BlockWeights = ();
	type BlockLength = ();
	type DbWeight = ();
	type RuntimeOrigin = RuntimeOrigin;
	type RuntimeCall = RuntimeCall;
	type Index = u64;
	type BlockNumber = u64;
	type Hash = H256;
	type Hashing = BlakeTwo256;
	type AccountId = u64;
	type Lookup = IdentityLookup<Self::AccountId>;
	type Header = Header;
	type RuntimeEvent = RuntimeEvent;
	type BlockHashCount = ConstU64<250>;
	type Version = ();
	type PalletInfo = PalletInfo;
	type OnNewAccount = ();
	type OnKilledAccount = ();
	type SystemWeightInfo = ();
	type SS58Prefix = ConstU16<42>;
	type OnSetCode = ();
	type MaxConsumers = frame_support::traits::ConstU32<16>;
	type AccountData = pallet_balances::AccountData<u64>; // New code

}

parameter_types! {
    pub const MinimumPeriod: u64 = 5;
}

impl pallet_timestamp::Config for Test {
    type Moment = u64;
    type OnTimestampSet = ();
    type MinimumPeriod = MinimumPeriod;
    type WeightInfo = ();
}

impl pallet_balances::Config for Test {
	type MaxLocks = ();
	type MaxReserves = ();
	type ReserveIdentifier = [u8; 8];
	type Balance = u64;
	type DustRemoval = ();
	type RuntimeEvent = RuntimeEvent;
	type ExistentialDeposit = ConstU64<1>;
	type WeightInfo = ();
	type FreezeIdentifier = ();
	type MaxFreezes = ();
	type MaxHolds = ();
	type HoldIdentifier = ();
	type AccountStore = System;
}

impl pallet_template::Config for Test {
	type RuntimeEvent = RuntimeEvent;
	type WeightInfo = ();
	type Currency = Balances; // New code
	type SchellingGameSharedSource = SchellingGameShared;
	type Slash = ();
	type Reward = ();
}

impl schelling_game_shared::Config for Test {
	type RuntimeEvent = RuntimeEvent;
	type WeightInfo = ();
	type Currency = Balances; // New code
	type RandomnessSource = TestRandomness<Self>;
	type Slash = ();
	type Reward = ();
	type SortitionSumGameSource = SortitionSumGame;
}

impl sortition_sum_game::Config for Test {
	type RuntimeEvent = RuntimeEvent;
	type WeightInfo = ();
}

// Build genesis storage according to the mock runtime.
pub fn new_test_ext() -> sp_io::TestExternalities {
	let mut t = frame_system::GenesisConfig::default().build_storage::<Test>().unwrap();
	pallet_balances::GenesisConfig::<Test> {
		balances: vec![
			(1, 100000),
			(2, 200000),
			(3, 300000),
			(4, 300000),
			(5, 300000),
			(6, 300000),
			(7, 300000),
			(8, 300000),
			(9, 300000),
			(10, 300000),
			(11, 300000),
			(12, 300000),
			(13, 300000),
			(14, 300000),
			(15, 300000),
			(16, 300000),
			(17, 300000),
			(18, 300000),
			(19, 300000),
			(20, 300000),
			(21, 300000),
			(22, 300000),
			(23, 300000),
			(24, 300000),
			(25, 300000),
			(26, 300000),
			(27, 300000),
			(28, 300000),
			(29, 300000),
			(30, 300000),
			(31, 300000),
			(32, 300000),
			(33, 300000),
			(34, 300000),
			(35, 300000),
		],
	} // new code
	.assimilate_storage(&mut t)
	.unwrap();
	t.into()
}

'''
'''--- pallets/profile-validation/src/permissions.rs ---
use crate::*;

impl<T: Config> Pallet<T> {
	pub(super) fn ensure_account_id_has_profile(account_id: T::AccountId) -> DispatchResult {
		match <GetCitizenId<T>>::get(&account_id) {
			Some(_) => Ok(()),
			None => Err(Error::<T>::CitizenDoNotExists)?,
		}
	}
}

'''
'''--- pallets/profile-validation/src/tests.rs ---
use crate::types::CitizenDetailsPost;
use crate::{mock::*, Error, Event};
use frame_support::{assert_noop, assert_ok};
use pallet_support::Content;
use pallet_support::WhoAndWhen;
use schelling_game_shared::types::Period;
use sortition_sum_game::types::SumTreeName;

#[test]
fn add_citizen_profile_check() {
	new_test_ext().execute_with(|| {
		// Go past genesis block so events get deposited
		System::set_block_number(1);
		let content: Content = Content::IPFS(
			"bafkreiaiq24be2iioasr6ftyaum3icmj7amtjkom2jeokov5k5ojwzhvqy"
				.as_bytes()
				.to_vec(),
		);
		assert_ok!(ProfileValidation::add_citizen(RuntimeOrigin::signed(1), content.clone()));
		let data = ProfileValidation::citizen_profile(1);
		let profile = Some(CitizenDetailsPost::<Test> {
			created: WhoAndWhen { account: 1, block: 1, time: 0 },
			content,
			citizen_id: 1,
			owner: 1,
			edited: false,
			hidden: false,
			upvotes_count: 0,
			downvotes_count: 0,
		});
		assert_eq!(data, profile);
		System::set_block_number(5);
		let content: Content = Content::IPFS(
			"bafkreiaiq24be2iioasr6ftyaum3icmj7amtjkom2jeokov5k5ojwzhvqz"
				.as_bytes()
				.to_vec(),
		);
		assert_ok!(ProfileValidation::add_citizen(RuntimeOrigin::signed(1), content.clone()));
		let data = ProfileValidation::citizen_profile(1);
		let profile = Some(CitizenDetailsPost::<Test> {
			created: WhoAndWhen { account: 1, block: 5, time: 0 },
			content,
			citizen_id: 1,
			owner: 1,
			edited: false,
			hidden: false,
			upvotes_count: 0,
			downvotes_count: 0,
		});
		assert_eq!(data, profile);
	});
}

#[test]
fn check_fund_addition() {
	new_test_ext().execute_with(|| {
		// Go past genesis block so events get deposited
		System::set_block_number(10);
		let content: Content = Content::IPFS(
			"bafkreiaiq24be2iioasr6ftyaum3icmj7amtjkom2jeokov5k5ojwzhvqy"
				.as_bytes()
				.to_vec(),
		);
		assert_ok!(ProfileValidation::add_citizen(RuntimeOrigin::signed(1), content.clone()));
		let data = ProfileValidation::citizen_profile(1);
		let profile = Some(CitizenDetailsPost::<Test> {
			created: WhoAndWhen { account: 1, block: 10, time: 0 },
			content,
			citizen_id: 1,
			owner: 1,
			edited: false,
			hidden: false,
			upvotes_count: 0,
			downvotes_count: 0,
		});
		assert_eq!(data, profile);
		let balance = Balances::free_balance(3);
		assert_eq!(300000, balance);
		assert_ok!(ProfileValidation::add_profile_stake(RuntimeOrigin::signed(3), 1, 100));
		let balance = Balances::free_balance(3);
		assert_eq!(300000 - 100, balance);
		let content: Content = Content::IPFS(
			"bafkreiaiq24be2iioasr6ftyaum3icmj7amtjkom2jeokov5k5ojwzhvqz"
				.as_bytes()
				.to_vec(),
		);
		assert_noop!(
			ProfileValidation::add_citizen(RuntimeOrigin::signed(1), content.clone()),
			Error::<Test>::NoMoreUpdates
		);
		let data = ProfileValidation::profile_fund_details(1, 3).unwrap();
		assert_eq!(100, data.deposit);
		let total_fund = ProfileValidation::total_fund_for_profile_collected(1);
		assert_eq!(100, total_fund);
		assert_ok!(ProfileValidation::add_profile_stake(RuntimeOrigin::signed(3), 1, 100));
		let balance = Balances::free_balance(3);
		assert_eq!(300000 - 200, balance);
		let data = ProfileValidation::profile_fund_details(1, 3).unwrap();
		assert_eq!(200, data.deposit);
		assert_ok!(ProfileValidation::add_profile_stake(RuntimeOrigin::signed(4), 1, 500));
		let balance = Balances::free_balance(4);
		assert_eq!(300000 - 500, balance);
		let data = ProfileValidation::profile_fund_details(1, 4).unwrap();
		assert_eq!(500, data.deposit);
		assert_noop!(
			ProfileValidation::add_profile_stake(RuntimeOrigin::signed(5), 1, 1000),
			Error::<Test>::AmountFundedGreaterThanRequired
		);
		assert_ok!(ProfileValidation::add_profile_stake(RuntimeOrigin::signed(5), 1, 300));
		System::assert_last_event(Event::ProfileFund { profile: 1, funder: 5 }.into());

		let key = SumTreeName::ProfileValidation { citizen_address: 1, block_number: 10 };
		let period = SchellingGameShared::get_period(key);
		assert_eq!(Some(Period::Evidence), period);
	})
}

#[test]
fn challenge_evidence() {
	new_test_ext().execute_with(|| {
		System::set_block_number(1);
		let content: Content = Content::IPFS(
			"bafkreiaiq24be2iioasr6ftyaum3icmj7amtjkom2jeokov5k5ojwzhvqy"
				.as_bytes()
				.to_vec(),
		);
		assert_ok!(ProfileValidation::add_citizen(RuntimeOrigin::signed(1), content.clone()));
		assert_ok!(ProfileValidation::add_profile_stake(RuntimeOrigin::signed(3), 1, 1000));
		let key = SumTreeName::ProfileValidation { citizen_address: 1, block_number: 1 };
		let period = SchellingGameShared::get_period(key.clone());
		assert_eq!(Some(Period::Evidence), period);

		let challenge_content: Content = Content::IPFS(
			"bafkreiaiq24be2iioasr6ftyaum3icmj7amtjkom2jeokov5k5ojwzhabc"
				.as_bytes()
				.to_vec(),
		);

		let phase_data = ProfileValidation::get_phase_data();

		assert_noop!(
			ProfileValidation::challenge_profile(
				RuntimeOrigin::signed(4),
				1,
				challenge_content.clone()
			),
			<schelling_game_shared::Error<Test>>::EvidencePeriodNotOver
		);

		System::set_block_number(phase_data.evidence_length + 1);
		let fees = ProfileValidation::profile_registration_challenge_fees();
		let balance = Balances::free_balance(4);
		assert_eq!(300000, balance);
		assert_ok!(ProfileValidation::challenge_profile(
			RuntimeOrigin::signed(4),
			1,
			challenge_content.clone()
		));
		let balance = Balances::free_balance(4);
		assert_eq!(300000 - fees, balance);
		let period = SchellingGameShared::get_period(key.clone());
		assert_eq!(Some(Period::Staking), period);

		assert_noop!(
			ProfileValidation::challenge_profile(
				RuntimeOrigin::signed(4),
				2,
				challenge_content.clone()
			),
			Error::<Test>::CitizenDoNotExists
		);
	})
}

#[test]
fn challenge_profile_after_time_for_staking_over_test() {
	new_test_ext().execute_with(|| {
		System::set_block_number(1);
		let content: Content = Content::IPFS(
			"bafkreiaiq24be2iioasr6ftyaum3icmj7amtjkom2jeokov5k5ojwzhvqy"
				.as_bytes()
				.to_vec(),
		);
		assert_ok!(ProfileValidation::add_citizen(RuntimeOrigin::signed(1), content.clone()));
		assert_ok!(ProfileValidation::add_profile_stake(RuntimeOrigin::signed(3), 1, 1000));
		let key = SumTreeName::ProfileValidation { citizen_address: 1, block_number: 1 };
		let period = SchellingGameShared::get_period(key.clone());
		assert_eq!(Some(Period::Evidence), period);

		let challenge_content: Content = Content::IPFS(
			"bafkreiaiq24be2iioasr6ftyaum3icmj7amtjkom2jeokov5k5ojwzhabc"
				.as_bytes()
				.to_vec(),
		);

		let phase_data = ProfileValidation::get_phase_data();

		assert_noop!(
			ProfileValidation::challenge_profile(
				RuntimeOrigin::signed(4),
				1,
				challenge_content.clone()
			),
			<schelling_game_shared::Error<Test>>::EvidencePeriodNotOver
		);

		System::set_block_number(phase_data.evidence_length + phase_data.end_of_staking_time + 1);
		assert_noop!(
			ProfileValidation::challenge_profile(
				RuntimeOrigin::signed(4),
				1,
				challenge_content.clone()
			),
			<schelling_game_shared::Error<Test>>::TimeForStakingOver
		);
	});
}

#[test]
fn return_profile_stake_test() {
	new_test_ext().execute_with(|| {
		System::set_block_number(1);
		let content: Content = Content::IPFS(
			"bafkreiaiq24be2iioasr6ftyaum3icmj7amtjkom2jeokov5k5ojwzhvqy"
				.as_bytes()
				.to_vec(),
		);
		assert_ok!(ProfileValidation::add_citizen(RuntimeOrigin::signed(1), content.clone()));
		let balance = Balances::free_balance(3);
		assert_eq!(300000, balance);
		assert_ok!(ProfileValidation::add_profile_stake(RuntimeOrigin::signed(3), 1, 400));
		let balance = Balances::free_balance(3);
		assert_eq!(300000 - 400, balance);
		assert_ok!(ProfileValidation::add_profile_stake(RuntimeOrigin::signed(4), 1, 600));
		let balance = Balances::free_balance(4);
		assert_eq!(300000 - 600, balance);
		let key = SumTreeName::ProfileValidation { citizen_address: 1, block_number: 1 };
		let period = SchellingGameShared::get_period(key.clone());
		assert_eq!(Some(Period::Evidence), period);
		let phase_data = ProfileValidation::get_phase_data();
		System::set_block_number(phase_data.evidence_length + phase_data.end_of_staking_time);
		assert_noop!(
			ProfileValidation::return_profile_stake(RuntimeOrigin::signed(3), 1),
			<schelling_game_shared::Error<Test>>::TimeForStakingNotOver
		);
		System::set_block_number(phase_data.evidence_length + phase_data.end_of_staking_time + 1);
		assert_ok!(ProfileValidation::return_profile_stake(RuntimeOrigin::signed(3), 1));
		let balance = Balances::free_balance(3);
		assert_eq!(300000, balance);
		assert_noop!(
			ProfileValidation::return_profile_stake(RuntimeOrigin::signed(3), 1),
			Error::<Test>::ProfileFundAlreadyReturned
		);

		assert_ok!(ProfileValidation::return_profile_stake(RuntimeOrigin::signed(4), 1));
		let balance = Balances::free_balance(4);
		assert_eq!(300000, balance);
		assert_noop!(
			ProfileValidation::return_profile_stake(RuntimeOrigin::signed(5), 1),
			Error::<Test>::ProfileFundNotExists
		);
	});
}

#[test]
fn schelling_game_test() {
	new_test_ext().execute_with(|| {
		System::set_block_number(1);
		let content: Content = Content::IPFS(
			"bafkreiaiq24be2iioasr6ftyaum3icmj7amtjkom2jeokov5k5ojwzhvqy"
				.as_bytes()
				.to_vec(),
		);
		assert_ok!(ProfileValidation::add_citizen(RuntimeOrigin::signed(1), content.clone()));
		assert_ok!(ProfileValidation::add_profile_stake(RuntimeOrigin::signed(3), 1, 1000));
		let challenge_content: Content = Content::IPFS(
			"bafkreiaiq24be2iioasr6ftyaum3icmj7amtjkom2jeokov5k5ojwzhabc"
				.as_bytes()
				.to_vec(),
		);
		let phase_data = ProfileValidation::get_phase_data();
		System::set_block_number(phase_data.evidence_length + 1);
		assert_ok!(ProfileValidation::challenge_profile(
			RuntimeOrigin::signed(4),
			1,
			challenge_content.clone()
		));

		let balance = Balances::free_balance(29);
		assert_eq!(300000, balance);
		for j in 4..30 {
			assert_ok!(ProfileValidation::apply_jurors(RuntimeOrigin::signed(j), 1, j * 100));
		}

		let balance = Balances::free_balance(29);
		assert_eq!(300000 - 29 * 100, balance);

		assert_noop!(
			ProfileValidation::draw_jurors(RuntimeOrigin::signed(5), 1, 5),
			<schelling_game_shared::Error<Test>>::PeriodDontMatch
		);

		assert_noop!(
			ProfileValidation::pass_period(RuntimeOrigin::signed(5), 1),
			<schelling_game_shared::Error<Test>>::StakingPeriodNotOver
		);

		System::set_block_number(phase_data.evidence_length + 1 + phase_data.staking_length);

		assert_ok!(ProfileValidation::pass_period(RuntimeOrigin::signed(5), 1));

		assert_ok!(ProfileValidation::draw_jurors(RuntimeOrigin::signed(5), 1, 5));

		let key = SumTreeName::ProfileValidation { citizen_address: 1, block_number: 1 };

		let draws_in_round = SchellingGameShared::draws_in_round(key.clone());
		assert_eq!(5, draws_in_round);

		let drawn_jurors = SchellingGameShared::drawn_jurors(key.clone());
		assert_eq!(vec![(4, 400), (7, 700), (13, 1300), (14, 1400), (15, 1500)], drawn_jurors);

		assert_ok!(ProfileValidation::pass_period(RuntimeOrigin::signed(5), 1));

		let period = SchellingGameShared::get_period(key.clone());

		assert_eq!(Some(Period::Commit), period);

		let balance: u64 = Balances::free_balance(5);
		assert_eq!(300000 - 5 * 100, balance);
		assert_ok!(ProfileValidation::unstaking(RuntimeOrigin::signed(5), 1));
		let balance = Balances::free_balance(5);
		assert_eq!(300000, balance);

		let hash = sp_io::hashing::keccak_256("1salt".as_bytes());
		assert_noop!(
			ProfileValidation::commit_vote(RuntimeOrigin::signed(6), 1, hash),
			<schelling_game_shared::Error<Test>>::JurorDoesNotExists
		);
		let hash = sp_io::hashing::keccak_256("1salt".as_bytes());
		assert_ok!(ProfileValidation::commit_vote(RuntimeOrigin::signed(4), 1, hash));

		// You can replace vote within the commit period.
		let hash = sp_io::hashing::keccak_256("1salt2".as_bytes());
		assert_ok!(ProfileValidation::commit_vote(RuntimeOrigin::signed(4), 1, hash));

		let hash = sp_io::hashing::keccak_256("1salt3".as_bytes());
		assert_ok!(ProfileValidation::commit_vote(RuntimeOrigin::signed(7), 1, hash));

		let hash = sp_io::hashing::keccak_256("1salt4".as_bytes());
		assert_ok!(ProfileValidation::commit_vote(RuntimeOrigin::signed(13), 1, hash));

		let hash = sp_io::hashing::keccak_256("1salt5".as_bytes());
		assert_ok!(ProfileValidation::commit_vote(RuntimeOrigin::signed(14), 1, hash));

		let hash = sp_io::hashing::keccak_256("0salt6".as_bytes());
		assert_ok!(ProfileValidation::commit_vote(RuntimeOrigin::signed(15), 1, hash));

		assert_noop!(
			ProfileValidation::pass_period(RuntimeOrigin::signed(5), 1),
			<schelling_game_shared::Error<Test>>::CommitPeriodNotOver
		);
		System::set_block_number(
			phase_data.evidence_length + 1 + phase_data.staking_length + phase_data.commit_length,
		);
		assert_ok!(ProfileValidation::pass_period(RuntimeOrigin::signed(5), 1));

		assert_noop!(
			ProfileValidation::reveal_vote(
				RuntimeOrigin::signed(4),
				1,
				2,
				"salt2".as_bytes().to_vec()
			),
			<schelling_game_shared::Error<Test>>::CommitDoesNotMatch
		);

		assert_ok!(ProfileValidation::reveal_vote(
			RuntimeOrigin::signed(4),
			1,
			1,
			"salt2".as_bytes().to_vec()
		));

		assert_ok!(ProfileValidation::reveal_vote(
			RuntimeOrigin::signed(7),
			1,
			1,
			"salt3".as_bytes().to_vec()
		));

		assert_ok!(ProfileValidation::reveal_vote(
			RuntimeOrigin::signed(13),
			1,
			1,
			"salt4".as_bytes().to_vec()
		));

		assert_ok!(ProfileValidation::reveal_vote(
			RuntimeOrigin::signed(14),
			1,
			1,
			"salt5".as_bytes().to_vec()
		));

		assert_noop!(
			ProfileValidation::pass_period(RuntimeOrigin::signed(5), 1),
			<schelling_game_shared::Error<Test>>::VotePeriodNotOver
		);
		System::set_block_number(
			phase_data.evidence_length
				+ 1 + phase_data.staking_length
				+ phase_data.commit_length
				+ phase_data.vote_length,
		);
		assert_ok!(ProfileValidation::pass_period(RuntimeOrigin::signed(5), 1));

		assert_noop!(
			ProfileValidation::get_incentives(RuntimeOrigin::signed(15), 1),
			<schelling_game_shared::Error<Test>>::VoteNotRevealed
		);
		let balance: u64 = Balances::free_balance(14);
		assert_eq!(300000 - 14 * 100, balance);
		assert_ok!(ProfileValidation::get_incentives(RuntimeOrigin::signed(14), 1));
		let balance: u64 = Balances::free_balance(14);
		assert_eq!(300025, balance);
	})
}

#[test]
fn test_draw_juror() {
	new_test_ext().execute_with(|| {
		System::set_block_number(1);
		let content: Content = Content::IPFS(
			"bafkreiaiq24be2iioasr6ftyaum3icmj7amtjkom2jeokov5k5ojwzhvqy"
				.as_bytes()
				.to_vec(),
		);
		assert_ok!(ProfileValidation::add_citizen(RuntimeOrigin::signed(1), content.clone()));

		assert_ok!(ProfileValidation::add_profile_stake(RuntimeOrigin::signed(3), 1, 1000));
		let challenge_content: Content = Content::IPFS(
			"bafkreiaiq24be2iioasr6ftyaum3icmj7amtjkom2jeokov5k5ojwzhabc"
				.as_bytes()
				.to_vec(),
		);
		let phase_data = ProfileValidation::get_phase_data();
		System::set_block_number(phase_data.evidence_length + 1);
		assert_ok!(ProfileValidation::challenge_profile(
			RuntimeOrigin::signed(4),
			1,
			challenge_content.clone()
		));

		assert_ok!(ProfileValidation::apply_jurors(RuntimeOrigin::signed(5), 1, 100));
		assert_ok!(ProfileValidation::apply_jurors(RuntimeOrigin::signed(6), 1, 500));
		assert_ok!(ProfileValidation::apply_jurors(RuntimeOrigin::signed(7), 1, 1000));
		assert_ok!(ProfileValidation::apply_jurors(RuntimeOrigin::signed(8), 1, 1500));
		assert_ok!(ProfileValidation::apply_jurors(RuntimeOrigin::signed(9), 1, 2000));

		System::set_block_number(phase_data.evidence_length + 1 + phase_data.staking_length);

		assert_ok!(ProfileValidation::pass_period(RuntimeOrigin::signed(5), 1));

		assert_ok!(ProfileValidation::draw_jurors(RuntimeOrigin::signed(5), 1, 6));

		// assert_ok!(ProfileValidation::draw_jurors(RuntimeOrigin::signed(5), 1, 5));

	})
}

'''
'''--- pallets/profile-validation/src/types.rs ---
use frame_support::{pallet_prelude::*};
use scale_info::TypeInfo;
// use frame_support::sp_std::{vec::Vec};

use super::*;

pub const FIRST_CITIZEN_ID: CitizenId  = 1;
pub const FIRST_CHALLENGE_POST_ID: ChallengePostId = 1;

#[derive(Encode, Decode, Clone, Eq, PartialEq, RuntimeDebug, TypeInfo)]
#[scale_info(skip_type_params(T))]
pub struct CitizenDetailsPost<T: Config> {
    pub created: WhoAndWhenOf<T>,
    pub content: Content,
    pub citizen_id: CitizenId,
    pub owner: T::AccountId,
    pub edited: bool,
    pub hidden: bool,
    pub upvotes_count: u32,
    pub downvotes_count: u32,
}

#[derive(PartialEq, Eq, PartialOrd, Ord, Default, Clone, Encode, Decode, MaxEncodedLen, TypeInfo)]
#[cfg_attr(feature = "std", derive(Debug))]
pub struct ProfileFundInfo<Balance, AccountId> {
    pub funder_account_id: AccountId,
    pub validation_account_id: AccountId,
    pub deposit: Balance,
    pub deposit_returned:bool,
}

#[derive(PartialEq, Eq, PartialOrd, Ord, Default, Clone, Encode, Decode, MaxEncodedLen, TypeInfo)]
#[cfg_attr(feature = "std", derive(Debug))]
pub struct ChallengerFundInfo<Balance, BlockNumber, AccountId> {
    pub challengerid: AccountId,
    pub deposit: Balance,
    pub start: BlockNumber,
    pub challenge_completed: bool,
}

#[derive(Encode, Decode, Clone, Eq, PartialEq, RuntimeDebug, TypeInfo)]
#[scale_info(skip_type_params(T))]
pub struct ChallengeEvidencePost<T: Config> {
    pub created: WhoAndWhenOf<T>,
    pub owner: T::AccountId,
    pub kyc_profile_id: T::AccountId,
    pub content:  Content,
    pub post_id_if_comment: Option<ChallengePostId>,
    pub is_comment: bool,
}
'''
'''--- pallets/profile-validation/src/weights.rs ---

//! Autogenerated weights for pallet_template
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-04-06, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Alexs-MacBook-Pro-2.local`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ../../target/release/node-template
// benchmark
// pallet
// --chain
// dev
// --pallet
// pallet_template
// --extrinsic
// *
// --steps=50
// --repeat=20
// --execution=wasm
// --wasm-execution=compiled
// --output
// pallets/template/src/weights.rs
// --template
// ../../.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_template.
pub trait WeightInfo {
	fn do_something() -> Weight;
	fn cause_error() -> Weight;
	fn add_citizen() -> Weight;
}

/// Weights for pallet_template using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: TemplateModule Something (r:0 w:1)
	/// Proof: TemplateModule Something (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn do_something() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 8_000_000 picoseconds.
		Weight::from_parts(9_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: TemplateModule Something (r:1 w:1)
	/// Proof: TemplateModule Something (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn cause_error() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `32`
		//  Estimated: `1489`
		// Minimum execution time: 6_000_000 picoseconds.
		Weight::from_parts(6_000_000, 1489)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}

	fn add_citizen() -> Weight {
		Weight::from_parts(38_209_000, 1489)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(4))
        
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: TemplateModule Something (r:0 w:1)
	/// Proof: TemplateModule Something (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn do_something() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 8_000_000 picoseconds.
		Weight::from_parts(9_000_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: TemplateModule Something (r:1 w:1)
	/// Proof: TemplateModule Something (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn cause_error() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `32`
		//  Estimated: `1489`
		// Minimum execution time: 6_000_000 picoseconds.
		Weight::from_parts(6_000_000, 1489)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}

	fn add_citizen() -> Weight {
		Weight::from_parts(38_209_000, 1489)
            .saturating_add(RocksDbWeight::get().reads(1))
            .saturating_add(RocksDbWeight::get().writes(4))
        
	}
}

'''
'''--- pallets/project-tips/Cargo.toml ---
[package]
name = "project-tips"
version = "4.0.0-dev"
description = "FRAME pallet template for defining custom runtime logic."
authors = ["Substrate DevHub <https://github.com/substrate-developer-hub>"]
homepage = "https://substrate.io"
edition = "2021"
license = "MIT-0"
publish = false
repository = "https://github.com/substrate-developer-hub/substrate-node-template/"

[package.metadata.docs.rs]
targets = ["x86_64-unknown-linux-gnu"]

[dependencies]
codec = { package = "parity-scale-codec", version = "3.2.2", default-features = false, features = [
	"derive",
] }
scale-info = { version = "2.5.0", default-features = false, features = ["derive"] }
frame-benchmarking = { version = "4.0.0-dev", default-features = false, optional = true, git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
frame-support = { version = "4.0.0-dev", default-features = false, git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
frame-system = { version = "4.0.0-dev", default-features = false, git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
pallet-timestamp = { git = 'https://github.com/paritytech/substrate', branch = "polkadot-v0.9.42", default-features = false }
pallet-balances = { default-features = false, version = "4.0.0-dev", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
pallet-support = { default-features = false, path = '../support' }
shared-storage = { default-features = false, path="../shared-storage"}
shared-storage-link = { default-features = false, path="../../traits/shared-storage-link"}
schelling-game-shared = {default-features = false, path = "../schelling-game-shared"}
schelling-game-shared-link = {default-features = false, path = "../../traits/schelling-game-shared-link"}
sortition-sum-game = {default-features = false, path="../sortition-sum-game"}

[dev-dependencies]
sp-core = { version = "7.0.0", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
sp-io = { version = "7.0.0", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
sp-runtime = { version = "7.0.0", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
frame-support-test = { version = "3.0.0", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }

[features]
default = ["std"]
std = [
	"codec/std",
	"frame-benchmarking?/std",
	"frame-support/std",
	"frame-system/std",
	"scale-info/std",
	"pallet-timestamp/std",
	"pallet-balances/std",
	"pallet-support/std",
	"shared-storage/std",
	"schelling-game-shared/std",
	"sortition-sum-game/std",
]
runtime-benchmarks = ["frame-benchmarking/runtime-benchmarks"]
try-runtime = ["frame-support/try-runtime"]

'''
'''--- pallets/project-tips/README.md ---
License: MIT-0
'''
'''--- pallets/project-tips/src/benchmarking.rs ---
//! Benchmarking setup for pallet-template
#![cfg(feature = "runtime-benchmarks")]
use super::*;

#[allow(unused)]
use crate::Pallet as Template;
use frame_benchmarking::v2::*;
use frame_system::RawOrigin;

#[benchmarks]
mod benchmarks {
	use super::*;

	#[benchmark]
	fn do_something() {
		let value = 100u32.into();
		let caller: T::AccountId = whitelisted_caller();
		#[extrinsic_call]
		do_something(RawOrigin::Signed(caller), value);

		assert_eq!(Something::<T>::get(), Some(value));
	}

	#[benchmark]
	fn cause_error() {
		Something::<T>::put(100u32);
		let caller: T::AccountId = whitelisted_caller();
		#[extrinsic_call]
		cause_error(RawOrigin::Signed(caller));

		assert_eq!(Something::<T>::get(), Some(101u32));
	}

	impl_benchmark_test_suite!(Template, crate::mock::new_test_ext(), crate::mock::Test);
}

'''
'''--- pallets/project-tips/src/extras.rs ---
use crate::*;

impl<T: Config> Project<T> {
	pub fn new(
		project_id: ProjectId,
		department_id: DepartmentId,
		tipping_name: TippingName,
		funding_needed: BalanceOf<T>,
		project_leader: T::AccountId,
	) -> Self {
		Project {
			created: new_who_and_when::<T>(project_leader.clone()),
			project_id,
			department_id,
			tipping_name,
			funding_needed,
			project_leader,
		}
	}
}

impl<T: Config> Pallet<T> {
	pub(super) fn get_phase_data() -> PhaseData<T> {
		T::SchellingGameSharedSource::create_phase_data(50, 5, 3, 100, (100, 100))
	}

	pub fn ensure_user_is_project_creator_and_project_exists(
		project_id: ProjectId,
		user: T::AccountId,
	) -> DispatchResult {
		let project_option: Option<Project<T>> = Projects::get(project_id);
		match project_option {
			Some(project) => {
				let project_leader = project.project_leader;
				ensure!(project_leader == user, Error::<T>::ProjectCreatorDontMatch);
			},
			None => Err(Error::<T>::ProjectDontExists)?,
		}

		Ok(())
	}

	pub fn ensure_staking_period_set_once_project_id(project_id: ProjectId) -> DispatchResult {
		let block_number_option = <ValidationProjectBlock<T>>::get(project_id);
		match block_number_option {
			Some(_block) => Err(Error::<T>::ProjectIdStakingPeriodAlreadySet)?,
			None => Ok(()),
		}
	}

	pub fn get_block_number_of_schelling_game(
		project_id: ProjectId,
	) -> Result<BlockNumberOf<T>, DispatchError> {
		let block_number_option = <ValidationProjectBlock<T>>::get(project_id);
		let block_number = match block_number_option {
			Some(block_number) => block_number,
			None => Err(Error::<T>::BlockNumberProjectIdNotExists)?,
		};
		Ok(block_number)
	}

	pub(super) fn u64_to_balance_saturated(input: u64) -> BalanceOf<T> {
		input.saturated_into::<BalanceOf<T>>()
	}

	pub(super) fn u64_to_block_saturated(input: u64) -> BlockNumberOf<T> {
		input.saturated_into::<BlockNumberOf<T>>()
	}

	pub(super) fn value_of_tipping_name(tipping: TippingName) -> TippingValue<BalanceOf<T>> {
		match tipping {
			TippingName::SmallTipper => TippingValue {
				max_tipping_value: 10_000u64.saturated_into::<BalanceOf<T>>(),
				stake_required: 10u64.saturated_into::<BalanceOf<T>>(),
			},
			TippingName::BigTipper => TippingValue {
				max_tipping_value: 100_000u64.saturated_into::<BalanceOf<T>>(),
				stake_required: 50u64.saturated_into::<BalanceOf<T>>(),
			},
			TippingName::SmallSpender => TippingValue {
				max_tipping_value: 1_000_000u64.saturated_into::<BalanceOf<T>>(),
				stake_required: 100u64.saturated_into::<BalanceOf<T>>(),
			},
			TippingName::MediumSpender => TippingValue {
				max_tipping_value: 10_000_000u64.saturated_into::<BalanceOf<T>>(),
				stake_required: 200u64.saturated_into::<BalanceOf<T>>(),
			},
			TippingName::BigSpender => TippingValue {
				max_tipping_value: 100_000_000u64.saturated_into::<BalanceOf<T>>(),
				stake_required: 500u64.saturated_into::<BalanceOf<T>>(),
			},
		}
	}
}

'''
'''--- pallets/project-tips/src/lib.rs ---
#![cfg_attr(not(feature = "std"), no_std)]

/// Edit this file to define custom logic or remove it if it is not needed.
/// Learn more about FRAME and the core library of Substrate FRAME pallets:
/// <https://docs.substrate.io/reference/frame-pallets/>
// One can enhance validation measures by increasing staking power for local residents or individuals with positive externalities—those who contribute to the network for a good cause.
pub use pallet::*;

#[cfg(test)]
mod mock;

#[cfg(test)]
mod tests;

#[cfg(feature = "runtime-benchmarks")]
mod benchmarking;
pub mod weights;
pub use weights::*;

mod extras;
mod types;

use frame_support::sp_runtime::traits::Saturating;
use frame_support::sp_runtime::SaturatedConversion;
use frame_support::sp_std::prelude::*;
use frame_support::{
	dispatch::{DispatchError, DispatchResult},
	ensure,
};
use frame_support::{
	traits::{Currency, ExistenceRequirement, Get, ReservableCurrency, WithdrawReasons},
	PalletId,
};
use pallet_support::{
	ensure_content_is_valid, new_who_and_when, remove_from_vec, Content, PositiveExternalityPostId,
	WhoAndWhen, WhoAndWhenOf,
};
use schelling_game_shared::types::{Period, PhaseData, RangePoint, SchellingGameType};
use schelling_game_shared_link::SchellingGameSharedLink;
use shared_storage_link::SharedStorageLink;
use sortition_sum_game::types::SumTreeName;
pub use types::PROJECT_ID;
use types::{Project, TippingName, TippingValue};

type AccountIdOf<T> = <T as frame_system::Config>::AccountId;
type BalanceOf<T> = <<T as Config>::Currency as Currency<AccountIdOf<T>>>::Balance;
pub type BlockNumberOf<T> = <T as frame_system::Config>::BlockNumber;
pub type SumTreeNameType<T> = SumTreeName<AccountIdOf<T>, BlockNumberOf<T>>;
type DepartmentId = u64;
type ProjectId = u64;

#[frame_support::pallet(dev_mode)]
pub mod pallet {
	use super::*;
	use frame_support::pallet_prelude::*;
	use frame_system::pallet_prelude::*;

	#[pallet::pallet]
	#[pallet::without_storage_info]
	pub struct Pallet<T>(_);

	/// Configure the pallet by specifying the parameters and types on which it depends.
	#[pallet::config]
	pub trait Config:
		frame_system::Config + schelling_game_shared::Config + pallet_timestamp::Config
	{
		/// Because this pallet emits events, it depends on the runtime's definition of an event.
		type RuntimeEvent: From<Event<Self>> + IsType<<Self as frame_system::Config>::RuntimeEvent>;
		/// Type representing the weight of this pallet
		type WeightInfo: WeightInfo;

		type SharedStorageSource: SharedStorageLink<AccountId = AccountIdOf<Self>>;
		type SchellingGameSharedSource: SchellingGameSharedLink<
			SumTreeName = SumTreeName<Self::AccountId, Self::BlockNumber>,
			SchellingGameType = SchellingGameType,
			BlockNumber = Self::BlockNumber,
			AccountId = AccountIdOf<Self>,
			Balance = BalanceOf<Self>,
			RangePoint = RangePoint,
			Period = Period,
			PhaseData = PhaseData<Self>,
		>;
		type Currency: ReservableCurrency<Self::AccountId>;
	}

	// The pallet's runtime storage items.
	// https://docs.substrate.io/main-docs/build/runtime-storage/
	#[pallet::storage]
	#[pallet::getter(fn something)]
	// Learn more about declaring storage items:
	// https://docs.substrate.io/main-docs/build/runtime-storage/#declaring-storage-items
	pub type Something<T> = StorageValue<_, u32>;

	#[pallet::type_value]
	pub fn MinimumDepartmentStake<T: Config>() -> BalanceOf<T> {
		10000u128.saturated_into::<BalanceOf<T>>()
	}

	#[pallet::type_value]
	pub fn DefaultForNextProjectId() -> ProjectId {
		PROJECT_ID
	}

	#[pallet::storage]
	#[pallet::getter(fn next_project_id)]
	pub type NextProjectId<T: Config> =
		StorageValue<_, ProjectId, ValueQuery, DefaultForNextProjectId>;

	#[pallet::storage]
	#[pallet::getter(fn get_project)]
	pub type Projects<T: Config> = StorageMap<_, Blake2_128Concat, ProjectId, Project<T>>;

	// #[pallet::storage]
	// #[pallet::getter(fn department_stake)]
	// pub type DepartmentStakeBalance<T: Config> =
	// 	StorageMap<_, Twox64Concat, DepartmentId, BalanceOf<T>, ValueQuery>;

	#[pallet::storage]
	#[pallet::getter(fn validation_project_block_number)]
	pub type ValidationProjectBlock<T: Config> =
		StorageMap<_, Blake2_128Concat, ProjectId, BlockNumberOf<T>>;

	// Pallets use events to inform users when important changes are made.
	// https://docs.substrate.io/main-docs/build/events-errors/
	#[pallet::event]
	#[pallet::generate_deposit(pub(super) fn deposit_event)]
	pub enum Event<T: Config> {
		/// Event documentation should end with an array that provides descriptive names for event
		/// parameters. [something, who]
		SomethingStored {
			something: u32,
			who: T::AccountId,
		},
		ProjectCreated {
			account: T::AccountId,
			project_id: ProjectId,
		},
		StakinPeriodStarted {
			project_id: ProjectId,
			block_number: BlockNumberOf<T>,
		},
		ApplyJurors {
			project_id: ProjectId,
			block_number: BlockNumberOf<T>,
			account: T::AccountId,
		},
	}

	// Errors inform users that something went wrong.
	#[pallet::error]
	pub enum Error<T> {
		/// Error names should be descriptive.
		NoneValue,
		/// Errors should have helpful documentation associated with them.
		StorageOverflow,
		LessThanMinStake,
		CannotStakeNow,
		ChoiceOutOfRange,
		FundingMoreThanTippingValue,
		ProjectDontExists,
		ProjectCreatorDontMatch,
		ProjectIdStakingPeriodAlreadySet,
		BlockNumberProjectIdNotExists,
	}

	// Check deparment exists, it will done using loose coupling
	#[pallet::call]
	impl<T: Config> Pallet<T> {
		#[pallet::call_index(0)]
		#[pallet::weight(0)]
		pub fn create_project(
			origin: OriginFor<T>,
			department_id: DepartmentId,
			tipping_name: TippingName,
			funding_needed: BalanceOf<T>,
		) -> DispatchResult {
			let who = ensure_signed(origin)?;
			let tipping_value = Self::value_of_tipping_name(tipping_name);
			let max_tipping_value = tipping_value.max_tipping_value;
			let stake_required = tipping_value.stake_required;
			let new_project_id = Self::next_project_id();
			let new_project: Project<T> = Project::new(
				new_project_id,
				department_id,
				tipping_name,
				funding_needed,
				who.clone(),
			);
			ensure!(funding_needed <= max_tipping_value, Error::<T>::FundingMoreThanTippingValue);
			// Check user has done kyc
			let _ = <T as pallet::Config>::Currency::withdraw(
				&who,
				stake_required,
				WithdrawReasons::TRANSFER,
				ExistenceRequirement::AllowDeath,
			)?;
			Projects::insert(new_project_id, new_project);
			NextProjectId::<T>::mutate(|n| {
				*n += 1;
			});

			Self::deposit_event(Event::ProjectCreated { account: who, project_id: new_project_id });
			Ok(())
		}

		// Check update and discussion time over, only project creator can apply staking period
		#[pallet::call_index(1)]
		#[pallet::weight(0)]
		pub fn apply_staking_period(origin: OriginFor<T>, project_id: ProjectId) -> DispatchResult {
			let who = ensure_signed(origin)?;

			Self::ensure_user_is_project_creator_and_project_exists(project_id, who)?;
			Self::ensure_staking_period_set_once_project_id(project_id)?;

			let now = <frame_system::Pallet<T>>::block_number();

			let key = SumTreeName::ProjectTips { project_id, block_number: now.clone() };

			<ValidationProjectBlock<T>>::insert(project_id, now.clone());
			// check what if called again, its done with `ensure_staking_period_set_once_project_id`
			T::SchellingGameSharedSource::set_to_staking_period_pe_link(key.clone(), now.clone())?;
			T::SchellingGameSharedSource::create_tree_helper_link(key, 3)?;

			Self::deposit_event(Event::StakinPeriodStarted { project_id, block_number: now });

			Ok(())
		}

		#[pallet::call_index(2)]
		#[pallet::weight(0)]
		pub fn apply_jurors_project_tips(
			origin: OriginFor<T>,
			project_id: ProjectId,
			stake: BalanceOf<T>,
		) -> DispatchResult {
			let who = ensure_signed(origin)?;

			let block_number = Self::get_block_number_of_schelling_game(project_id)?;

			let key = SumTreeName::ProjectTips { project_id, block_number: block_number.clone() };

			let phase_data = Self::get_phase_data();

			T::SchellingGameSharedSource::apply_jurors_helper_link(key, phase_data, who.clone(), stake)?;
			Self::deposit_event(Event::ApplyJurors { project_id, block_number, account: who });

			Ok(())
		}

		#[pallet::call_index(3)]
		#[pallet::weight(0)]
		pub fn pass_period(
			origin: OriginFor<T>,
			project_id: ProjectId,
		) -> DispatchResult {
			let _who = ensure_signed(origin)?;

			let block_number = Self::get_block_number_of_schelling_game(project_id)?;

			let key = SumTreeName::ProjectTips { project_id, block_number: block_number.clone() };

			let now = <frame_system::Pallet<T>>::block_number();
			let phase_data = Self::get_phase_data();
			T::SchellingGameSharedSource::change_period_link(key, phase_data, now)?;
			Ok(())
		}

		#[pallet::call_index(4)]
		#[pallet::weight(0)]
		pub fn draw_jurors(
			origin: OriginFor<T>,
			project_id: ProjectId,
			iterations: u64,
		) -> DispatchResult {
			let _who = ensure_signed(origin)?;

			let block_number = Self::get_block_number_of_schelling_game(project_id)?;

			let key = SumTreeName::ProjectTips { project_id, block_number: block_number.clone() };

			let phase_data = Self::get_phase_data();

			T::SchellingGameSharedSource::draw_jurors_helper_link(key, phase_data, iterations)?;

			Ok(())
		}

		// Unstaking
		// Stop drawn juror to unstake ✔️
		#[pallet::call_index(5)]
		#[pallet::weight(0)]
		pub fn unstaking(
			origin: OriginFor<T>,
			project_id: ProjectId,
		) -> DispatchResult {
			let who = ensure_signed(origin)?;
			let block_number = Self::get_block_number_of_schelling_game(project_id)?;
			let key = SumTreeName::ProjectTips { project_id, block_number: block_number.clone() };

			T::SchellingGameSharedSource::unstaking_helper_link(key, who)?;
			Ok(())
		}

		#[pallet::call_index(6)]
		#[pallet::weight(0)]
		pub fn commit_vote(
			origin: OriginFor<T>,
			project_id: ProjectId,
			vote_commit: [u8; 32],
		) -> DispatchResult {
			let who = ensure_signed(origin)?;
			let block_number = Self::get_block_number_of_schelling_game(project_id)?;
			let key = SumTreeName::ProjectTips { project_id, block_number: block_number.clone() };

			T::SchellingGameSharedSource::commit_vote_helper_link(key, who, vote_commit)?;
			Ok(())
		}

		#[pallet::call_index(7)]
		#[pallet::weight(0)]
		pub fn reveal_vote(
			origin: OriginFor<T>,
			project_id: ProjectId,
			choice: u128,
			salt: Vec<u8>,
		) -> DispatchResult {
			let who = ensure_signed(origin)?;

			let block_number = Self::get_block_number_of_schelling_game(project_id)?;
			let key = SumTreeName::ProjectTips { project_id, block_number: block_number.clone() };

			T::SchellingGameSharedSource::reveal_vote_two_choice_helper_link(
				key, who, choice, salt,
			)?;
			Ok(())
		}

		#[pallet::call_index(8)]
		#[pallet::weight(0)]
		pub fn get_incentives(origin: OriginFor<T>, project_id: ProjectId) -> DispatchResult {
			let who = ensure_signed(origin)?;
			let block_number = Self::get_block_number_of_schelling_game(project_id)?;
			let key = SumTreeName::ProjectTips { project_id, block_number: block_number.clone() };

			let phase_data = Self::get_phase_data();
			T::SchellingGameSharedSource::get_incentives_two_choice_helper_link(
				key, phase_data, who,
			)?;
			Ok(())
		}
	}
}

'''
'''--- pallets/project-tips/src/mock.rs ---
use crate as pallet_template;
use frame_support::{parameter_types, traits::{ConstU16, ConstU64, GenesisBuild}};
use sp_core::H256;
use sp_runtime::{
	testing::Header,
	traits::{BlakeTwo256, IdentityLookup},
};

type UncheckedExtrinsic = frame_system::mocking::MockUncheckedExtrinsic<Test>;
type Block = frame_system::mocking::MockBlock<Test>;
use frame_support_test::TestRandomness;

// Configure a mock runtime to test the pallet.
frame_support::construct_runtime!(
	pub enum Test where
		Block = Block,
		NodeBlock = Block,
		UncheckedExtrinsic = UncheckedExtrinsic,
	{
		System: frame_system,
		ProjectTips: pallet_template,
		Balances: pallet_balances,
		Timestamp: pallet_timestamp,
		SharedStorage:shared_storage,
		SchellingGameShared: schelling_game_shared,
		SortitionSumGame: sortition_sum_game,
	}
);

impl frame_system::Config for Test {
	type BaseCallFilter = frame_support::traits::Everything;
	type BlockWeights = ();
	type BlockLength = ();
	type DbWeight = ();
	type RuntimeOrigin = RuntimeOrigin;
	type RuntimeCall = RuntimeCall;
	type Index = u64;
	type BlockNumber = u64;
	type Hash = H256;
	type Hashing = BlakeTwo256;
	type AccountId = u64;
	type Lookup = IdentityLookup<Self::AccountId>;
	type Header = Header;
	type RuntimeEvent = RuntimeEvent;
	type BlockHashCount = ConstU64<250>;
	type Version = ();
	type PalletInfo = PalletInfo;
	type OnNewAccount = ();
	type OnKilledAccount = ();
	type SystemWeightInfo = ();
	type SS58Prefix = ConstU16<42>;
	type OnSetCode = ();
	type MaxConsumers = frame_support::traits::ConstU32<16>;
	type AccountData = pallet_balances::AccountData<u64>; // New code
}

parameter_types! {
    pub const MinimumPeriod: u64 = 5;
}

impl pallet_timestamp::Config for Test {
    type Moment = u64;
    type OnTimestampSet = ();
    type MinimumPeriod = MinimumPeriod;
    type WeightInfo = ();
}

impl shared_storage::Config for Test {
	type RuntimeEvent = RuntimeEvent;
	type WeightInfo = ();
}
impl pallet_template::Config for Test {
	type RuntimeEvent = RuntimeEvent;
	type WeightInfo = ();
	type SharedStorageSource = SharedStorage;
	type Currency = Balances; // New code
	type SchellingGameSharedSource = SchellingGameShared;
}

impl pallet_balances::Config for Test {
	type MaxLocks = ();
	type MaxReserves = ();
	type ReserveIdentifier = [u8; 8];
	type Balance = u64;
	type DustRemoval = ();
	type RuntimeEvent = RuntimeEvent;
	type ExistentialDeposit = ConstU64<1>;
	type WeightInfo = ();
	type FreezeIdentifier = ();
	type MaxFreezes = ();
	type MaxHolds = ();
	type HoldIdentifier = ();
	type AccountStore = System;
}

impl schelling_game_shared::Config for Test {
	type RuntimeEvent = RuntimeEvent;
	type WeightInfo = ();
	type Currency = Balances; // New code
	type RandomnessSource = TestRandomness<Self>;
	type Slash = ();
	type Reward = ();
	type SortitionSumGameSource = SortitionSumGame;
}

impl sortition_sum_game::Config for Test {
	type RuntimeEvent = RuntimeEvent;
	type WeightInfo = ();
}

// Build genesis storage according to the mock runtime.
pub fn new_test_ext() -> sp_io::TestExternalities {
	let mut t = frame_system::GenesisConfig::default().build_storage::<Test>().unwrap();
	pallet_balances::GenesisConfig::<Test> {
		balances: vec![
			(1, 100000),
			(2, 200000),
			(3, 300000),
			(4, 300000),
			(5, 300000),
			(6, 300000),
			(7, 300000),
			(8, 300000),
			(9, 300000),
			(10, 300000),
			(11, 300000),
			(12, 300000),
			(13, 300000),
			(14, 300000),
			(15, 300000),
			(16, 300000),
			(17, 300000),
			(18, 300000),
			(19, 300000),
			(20, 300000),
			(21, 300000),
			(22, 300000),
			(23, 300000),
			(24, 300000),
			(25, 300000),
			(26, 300000),
			(27, 300000),
			(28, 300000),
			(29, 300000),
			(30, 300000),
			(31, 300000),
			(32, 300000),
			(33, 300000),
			(34, 300000),
			(35, 300000),
		],
	} // new code
	.assimilate_storage(&mut t)
	.unwrap();
	shared_storage::GenesisConfig::<Test> { approved_citizen_address: vec![1, 2] }
		.assimilate_storage(&mut t)
		.unwrap();
	t.into()
}

'''
'''--- pallets/project-tips/src/tests.rs ---
use crate::types::TippingName;
use crate::{mock::*, Error, Event};
use frame_support::{assert_noop, assert_ok};
use sortition_sum_game::types::SumTreeName;
use schelling_game_shared::types::Period;

#[test]
fn check_create_project_function() {
	new_test_ext().execute_with(|| {
		// Go past genesis block so events get deposited
		System::set_block_number(1);
		let tipping_name = TippingName::SmallTipper;
		let tipping_value = ProjectTips::value_of_tipping_name(tipping_name);
		let max_tipping_value = tipping_value.max_tipping_value;
		let stake_required = tipping_value.stake_required;
		let funding_needed = max_tipping_value - 100;
		let balance = Balances::free_balance(1);
		assert_ok!(ProjectTips::create_project(
			RuntimeOrigin::signed(1),
			2,
			tipping_name,
			funding_needed
		));

		let after_balance = Balances::free_balance(1);

		assert_eq!(after_balance, balance - stake_required);

		System::assert_last_event(Event::ProjectCreated { account: 1, project_id: 1 }.into());

		let next_project_id = ProjectTips::next_project_id();

		assert_eq!(2, next_project_id);

		let funding_needed = max_tipping_value + 100;

		assert_noop!(
			ProjectTips::create_project(RuntimeOrigin::signed(1), 2, tipping_name, funding_needed),
			Error::<Test>::FundingMoreThanTippingValue
		);
	});
}

#[test]
fn check_apply_staking_period_function() {
	new_test_ext().execute_with(|| {
		System::set_block_number(1);
		assert_noop!(
			ProjectTips::apply_staking_period(RuntimeOrigin::signed(1), 2),
			Error::<Test>::ProjectDontExists
		);

		let tipping_name = TippingName::SmallTipper;
		let tipping_value = ProjectTips::value_of_tipping_name(tipping_name);
		let max_tipping_value = tipping_value.max_tipping_value;
		let funding_needed = max_tipping_value - 100;
		assert_ok!(ProjectTips::create_project(
			RuntimeOrigin::signed(1),
			2,
			tipping_name,
			funding_needed
		));

		assert_noop!(
			ProjectTips::apply_staking_period(RuntimeOrigin::signed(3), 1),
			Error::<Test>::ProjectCreatorDontMatch
		);

		assert_ok!(ProjectTips::apply_staking_period(RuntimeOrigin::signed(1), 1));

		System::assert_last_event(
			Event::StakinPeriodStarted { project_id: 1, block_number: 1 }.into(),
		);
		System::set_block_number(5);
		assert_noop!(
			ProjectTips::apply_staking_period(RuntimeOrigin::signed(1), 1),
			Error::<Test>::ProjectIdStakingPeriodAlreadySet
		);
	});
}

#[test]
fn schelling_game_test() {
	new_test_ext().execute_with(|| {
			System::set_block_number(1);
			let tipping_name = TippingName::SmallTipper;
			let tipping_value = ProjectTips::value_of_tipping_name(tipping_name);
			let max_tipping_value = tipping_value.max_tipping_value;
			let stake_required = tipping_value.stake_required;
			let funding_needed = max_tipping_value - 100;
			let balance = Balances::free_balance(1);
			assert_ok!(ProjectTips::create_project(
				RuntimeOrigin::signed(1),
				2,
				tipping_name,
				funding_needed
			));
	
			let after_balance = Balances::free_balance(1);
	
			assert_eq!(after_balance, balance - stake_required);

			assert_ok!(ProjectTips::apply_staking_period(RuntimeOrigin::signed(1), 1));

			let phase_data = ProjectTips::get_phase_data();
	
	
			let balance = Balances::free_balance(29);
			assert_eq!(300000, balance);
			for j in 4..30 {
				assert_ok!(ProjectTips::apply_jurors_project_tips(RuntimeOrigin::signed(j), 1, j * 100));
			}
	
			let balance = Balances::free_balance(29);
			assert_eq!(300000 - 29 * 100, balance);
	
			assert_noop!(
				ProjectTips::draw_jurors(RuntimeOrigin::signed(5), 1, 5),
				<schelling_game_shared::Error<Test>>::PeriodDontMatch
			);
	
			assert_noop!(
				ProjectTips::pass_period(RuntimeOrigin::signed(5), 1),
				<schelling_game_shared::Error<Test>>::StakingPeriodNotOver
			);
	
			System::set_block_number(1 + phase_data.staking_length);
	
			assert_ok!(ProjectTips::pass_period(RuntimeOrigin::signed(5), 1));
	
			assert_ok!(ProjectTips::draw_jurors(RuntimeOrigin::signed(5), 1, 5));
	
			let key = SumTreeName::ProjectTips { project_id: 1, block_number: 1 };
	
			let draws_in_round = SchellingGameShared::draws_in_round(key.clone());
			assert_eq!(5, draws_in_round);
	
			let drawn_jurors = SchellingGameShared::drawn_jurors(key.clone());
			assert_eq!(vec![(4, 400), (7, 700), (13, 1300), (14, 1400), (15, 1500)], drawn_jurors);
	
			assert_ok!(ProjectTips::pass_period(RuntimeOrigin::signed(5), 1));
	
			let period = SchellingGameShared::get_period(key.clone());
	
			assert_eq!(Some(Period::Commit), period);
	
			let balance: u64 = Balances::free_balance(5);
			assert_eq!(300000 - 5 * 100, balance);
			assert_ok!(ProjectTips::unstaking(RuntimeOrigin::signed(5), 1));
			let balance = Balances::free_balance(5);
			assert_eq!(300000, balance);
	
			let hash = sp_io::hashing::keccak_256("1salt".as_bytes());
			assert_noop!(
				ProjectTips::commit_vote(RuntimeOrigin::signed(6), 1, hash),
				<schelling_game_shared::Error<Test>>::JurorDoesNotExists
			);
			let hash = sp_io::hashing::keccak_256("1salt".as_bytes());
			assert_ok!(ProjectTips::commit_vote(RuntimeOrigin::signed(4), 1, hash));
	
			// You can replace vote within the commit period.
			let hash = sp_io::hashing::keccak_256("1salt2".as_bytes());
			assert_ok!(ProjectTips::commit_vote(RuntimeOrigin::signed(4), 1, hash));
	
			let hash = sp_io::hashing::keccak_256("1salt3".as_bytes());
			assert_ok!(ProjectTips::commit_vote(RuntimeOrigin::signed(7), 1, hash));
	
			let hash = sp_io::hashing::keccak_256("1salt4".as_bytes());
			assert_ok!(ProjectTips::commit_vote(RuntimeOrigin::signed(13), 1, hash));
	
			let hash = sp_io::hashing::keccak_256("1salt5".as_bytes());
			assert_ok!(ProjectTips::commit_vote(RuntimeOrigin::signed(14), 1, hash));
	
			let hash = sp_io::hashing::keccak_256("0salt6".as_bytes());
			assert_ok!(ProjectTips::commit_vote(RuntimeOrigin::signed(15), 1, hash));
	
			assert_noop!(
				ProjectTips::pass_period(RuntimeOrigin::signed(5), 1),
				<schelling_game_shared::Error<Test>>::CommitPeriodNotOver
			);
			System::set_block_number(
				phase_data.evidence_length + 1 + phase_data.staking_length + phase_data.commit_length,
			);
			assert_ok!(ProjectTips::pass_period(RuntimeOrigin::signed(5), 1));
	
			assert_noop!(
				ProjectTips::reveal_vote(
					RuntimeOrigin::signed(4),
					1,
					2,
					"salt2".as_bytes().to_vec()
				),
				<schelling_game_shared::Error<Test>>::CommitDoesNotMatch
			);
	
			assert_ok!(ProjectTips::reveal_vote(
				RuntimeOrigin::signed(4),
				1,
				1,
				"salt2".as_bytes().to_vec()
			));
	
			assert_ok!(ProjectTips::reveal_vote(
				RuntimeOrigin::signed(7),
				1,
				1,
				"salt3".as_bytes().to_vec()
			));
	
			assert_ok!(ProjectTips::reveal_vote(
				RuntimeOrigin::signed(13),
				1,
				1,
				"salt4".as_bytes().to_vec()
			));
	
			assert_ok!(ProjectTips::reveal_vote(
				RuntimeOrigin::signed(14),
				1,
				1,
				"salt5".as_bytes().to_vec()
			));
	
			assert_noop!(
				ProjectTips::pass_period(RuntimeOrigin::signed(5), 1),
				<schelling_game_shared::Error<Test>>::VotePeriodNotOver
			);
			System::set_block_number(
				phase_data.evidence_length
					+ 1 + phase_data.staking_length
					+ phase_data.commit_length
					+ phase_data.vote_length,
			);
			assert_ok!(ProjectTips::pass_period(RuntimeOrigin::signed(5), 1));
	
			assert_noop!(
				ProjectTips::get_incentives(RuntimeOrigin::signed(15), 1),
				<schelling_game_shared::Error<Test>>::VoteNotRevealed
			);
			let balance: u64 = Balances::free_balance(14);
			assert_eq!(300000 - 14 * 100, balance);
			assert_ok!(ProjectTips::get_incentives(RuntimeOrigin::signed(14), 1));
			let balance: u64 = Balances::free_balance(14);
			assert_eq!(300025, balance);
	})

}

'''
'''--- pallets/project-tips/src/types.rs ---
use super::*;
use codec::{Decode, Encode, EncodeLike, MaxEncodedLen};
use frame_support::pallet_prelude::*;
use scale_info::TypeInfo;

pub const PROJECT_ID: ProjectId = 1;

#[derive(Encode, Decode, Clone, Copy, Eq, PartialEq, RuntimeDebug, TypeInfo)]
pub enum TippingName {
	SmallTipper,
	BigTipper,
	SmallSpender,
	MediumSpender,
	BigSpender,
}

#[derive(Encode, Decode, Clone, Copy, Eq, PartialEq, RuntimeDebug, TypeInfo)]
pub struct TippingValue<Balance> {
	pub max_tipping_value: Balance,
	pub stake_required: Balance,
}

#[derive(Encode, Decode, Clone, Eq, PartialEq, RuntimeDebug, TypeInfo)]
#[scale_info(skip_type_params(T))]
pub struct Project<T: Config> {
	pub created: WhoAndWhenOf<T>,
	pub project_id: ProjectId,
	pub department_id: DepartmentId,
	pub tipping_name: TippingName,
	pub funding_needed: BalanceOf<T>,
	pub project_leader: T::AccountId,
}

'''
'''--- pallets/project-tips/src/weights.rs ---

//! Autogenerated weights for pallet_template
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-04-06, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Alexs-MacBook-Pro-2.local`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ../../target/release/node-template
// benchmark
// pallet
// --chain
// dev
// --pallet
// pallet_template
// --extrinsic
// *
// --steps=50
// --repeat=20
// --execution=wasm
// --wasm-execution=compiled
// --output
// pallets/template/src/weights.rs
// --template
// ../../.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_template.
pub trait WeightInfo {
	fn do_something() -> Weight;
	fn cause_error() -> Weight;
}

/// Weights for pallet_template using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: TemplateModule Something (r:0 w:1)
	/// Proof: TemplateModule Something (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn do_something() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 8_000_000 picoseconds.
		Weight::from_parts(9_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: TemplateModule Something (r:1 w:1)
	/// Proof: TemplateModule Something (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn cause_error() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `32`
		//  Estimated: `1489`
		// Minimum execution time: 6_000_000 picoseconds.
		Weight::from_parts(6_000_000, 1489)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: TemplateModule Something (r:0 w:1)
	/// Proof: TemplateModule Something (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn do_something() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 8_000_000 picoseconds.
		Weight::from_parts(9_000_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: TemplateModule Something (r:1 w:1)
	/// Proof: TemplateModule Something (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn cause_error() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `32`
		//  Estimated: `1489`
		// Minimum execution time: 6_000_000 picoseconds.
		Weight::from_parts(6_000_000, 1489)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}

'''
'''--- pallets/schelling-game-shared/Cargo.toml ---
[package]
name = "schelling-game-shared"
version = "4.0.0-dev"
description = "FRAME pallet template for defining custom runtime logic."
authors = ["Substrate DevHub <https://github.com/substrate-developer-hub>"]
homepage = "https://substrate.io"
edition = "2021"
license = "MIT-0"
publish = false
repository = "https://github.com/substrate-developer-hub/substrate-node-template/"

[package.metadata.docs.rs]
targets = ["x86_64-unknown-linux-gnu"]

[dependencies]
codec = { package = "parity-scale-codec", version = "3.2.2", default-features = false, features = [
	"derive",
] }
scale-info = { version = "2.5.0", default-features = false, features = ["derive"] }
frame-benchmarking = { version = "4.0.0-dev", default-features = false, optional = true, git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
frame-support = { version = "4.0.0-dev", default-features = false, git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
frame-system = { version = "4.0.0-dev", default-features = false, git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
pallet-balances = { default-features = false, version = "4.0.0-dev", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
sp-io = { version = "7.0.0", default-features = false, git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
num-integer = {default-features = false, version= "0.1.44"}
sortition-sum-game = {default-features = false, path="../sortition-sum-game"}
sortition-sum-game-link = {default-features = false, path="../../traits/sortition-sum-game-link"}
schelling-game-shared-link = {default-features=false, path="../../traits/schelling-game-shared-link"}

[dev-dependencies]
sp-core = { version = "7.0.0", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
sp-io = { version = "7.0.0", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
sp-runtime = { version = "7.0.0", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
frame-support-test = { version = "3.0.0", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }

[features]
default = ["std"]
std = [
	"codec/std",
	"frame-benchmarking?/std",
	"frame-support/std",
	"frame-system/std",
	"scale-info/std",
	"pallet-balances/std",
	"sp-io/std",
	"num-integer/std",
	"sortition-sum-game/std",
	"sortition-sum-game-link/std",
	"schelling-game-shared-link/std",

]
runtime-benchmarks = ["frame-benchmarking/runtime-benchmarks"]
try-runtime = ["frame-support/try-runtime"]

'''
'''--- pallets/schelling-game-shared/README.md ---
License: MIT-0
'''
'''--- pallets/schelling-game-shared/src/benchmarking.rs ---
//! Benchmarking setup for pallet-template
#![cfg(feature = "runtime-benchmarks")]
use super::*;

#[allow(unused)]
use crate::Pallet as Template;
use frame_benchmarking::v2::*;
use frame_system::RawOrigin;

#[benchmarks]
mod benchmarks {
	use super::*;

	#[benchmark]
	fn do_something() {
		let value = 100u32.into();
		let caller: T::AccountId = whitelisted_caller();
		#[extrinsic_call]
		do_something(RawOrigin::Signed(caller), value);

		assert_eq!(Something::<T>::get(), Some(value));
	}

	#[benchmark]
	fn cause_error() {
		Something::<T>::put(100u32);
		let caller: T::AccountId = whitelisted_caller();
		#[extrinsic_call]
		cause_error(RawOrigin::Signed(caller));

		assert_eq!(Something::<T>::get(), Some(101u32));
	}

	impl_benchmark_test_suite!(Template, crate::mock::new_test_ext(), crate::mock::Test);
}

'''
'''--- pallets/schelling-game-shared/src/docimage/change_period_link_1.svg ---
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<svg
   xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmlns:cc="http://creativecommons.org/ns#"
   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
   xmlns:svg="http://www.w3.org/2000/svg"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   sodipodi:docname="change_period_link_1.svg"
   inkscape:version="1.0 (4035a4fb49, 2020-05-01)"
   id="svg8"
   version="1.1"
   viewBox="0 0 208.25806 60.366711"
   height="60.366711mm"
   width="208.25806mm">
  <defs
     id="defs2">
    <marker
       inkscape:isstock="true"
       style="overflow:visible"
       id="marker1155"
       refX="0"
       refY="0"
       orient="auto"
       inkscape:stockid="Arrow1Lend">
      <path
         transform="matrix(-0.8,0,0,-0.8,-10,0)"
         style="fill:#000000;fill-opacity:1;fill-rule:evenodd;stroke:#000000;stroke-width:1pt;stroke-opacity:1"
         d="M 0,0 5,-5 -12.5,0 5,5 Z"
         id="path1153" />
    </marker>
    <marker
       inkscape:isstock="true"
       style="overflow:visible"
       id="Arrow1Lend"
       refX="0"
       refY="0"
       orient="auto"
       inkscape:stockid="Arrow1Lend">
      <path
         transform="matrix(-0.8,0,0,-0.8,-10,0)"
         style="fill:#000000;fill-opacity:1;fill-rule:evenodd;stroke:#000000;stroke-width:1pt;stroke-opacity:1"
         d="M 0,0 5,-5 -12.5,0 5,5 Z"
         id="path854" />
    </marker>
    <marker
       inkscape:isstock="true"
       style="overflow:visible"
       id="Arrow1Lstart"
       refX="0"
       refY="0"
       orient="auto"
       inkscape:stockid="Arrow1Lstart">
      <path
         transform="matrix(0.8,0,0,0.8,10,0)"
         style="fill:#000000;fill-opacity:1;fill-rule:evenodd;stroke:#000000;stroke-width:1pt;stroke-opacity:1"
         d="M 0,0 5,-5 -12.5,0 5,5 Z"
         id="path851" />
    </marker>
  </defs>
  <sodipodi:namedview
     inkscape:window-maximized="0"
     inkscape:window-y="108"
     inkscape:window-x="-207"
     inkscape:window-height="752"
     inkscape:window-width="1514"
     fit-margin-bottom="10"
     fit-margin-right="10"
     fit-margin-left="10"
     fit-margin-top="10"
     showgrid="false"
     inkscape:document-rotation="0"
     inkscape:current-layer="layer1"
     inkscape:document-units="mm"
     inkscape:cy="370.79722"
     inkscape:cx="610.60749"
     inkscape:zoom="0.46111111"
     inkscape:pageshadow="2"
     inkscape:pageopacity="0.0"
     borderopacity="1.0"
     bordercolor="#666666"
     pagecolor="#ffffff"
     id="base" />
  <g
     transform="translate(2.3273583,-23.545408)"
     id="layer1"
     inkscape:groupmode="layer"
     inkscape:label="Layer 1">
    <path
       id="path833"
       d="M 12.897401,63.318873 H 194.99746"
       style="fill:#ffff00;stroke-width:2.1;stroke-linecap:round;stroke-linejoin:bevel;stroke-miterlimit:4;stroke-dasharray:none" />
    <path
       id="path835"
       d="M 8.1726417,56.079524 H 195.4307"
       style="fill:#000000;stroke:#000000;stroke-width:1;stroke-linecap:round;stroke-linejoin:bevel;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" />
    <path
       id="path837"
       d="M 29.864068,44.591573 V 70.510666"
       style="fill:#000000;stroke:#000000;stroke-width:1;stroke-linecap:round;stroke-linejoin:bevel;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" />
    <path
       style="fill:#000000;stroke:#000000;stroke-width:1;stroke-linecap:round;stroke-linejoin:bevel;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"
       d="M 153.68945,44.591573 V 70.510666"
       id="path839" />
    <text
       id="text847"
       y="39.020523"
       x="10.549484"
       style="font-size:7.05556px;line-height:1.25;font-family:Adelaide;-inkscape-font-specification:Adelaide;letter-spacing:0px;stroke-width:0.264583"
       xml:space="preserve"><tspan
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:Ubuntu;-inkscape-font-specification:Ubuntu;stroke-width:0.264583"
         y="39.020523"
         x="10.549484"
         id="tspan845"
         sodipodi:role="line">staking_start_time</tspan></text>
    <path
       id="path849"
       d="M 34.710168,65.324375 H 144.23359"
       style="fill:#000000;stroke:#000000;stroke-width:0.677416;stroke-linecap:round;stroke-linejoin:bevel;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;marker-start:url(#Arrow1Lstart);marker-end:url(#marker1155)" />
    <text
       id="text3091"
       y="74.401245"
       x="56.523899"
       style="font-size:7.05556px;line-height:1.25;font-family:Adelaide;-inkscape-font-specification:Adelaide;letter-spacing:0px;stroke-width:0.264583"
       xml:space="preserve"><tspan
         id="tspan3093"
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:Ubuntu;-inkscape-font-specification:Ubuntu;stroke-width:0.264583"
         y="74.401245"
         x="56.523899"
         sodipodi:role="line">min_long_block_length</tspan></text>
  </g>
</svg>

'''
'''--- pallets/schelling-game-shared/src/docimage/set_to_staking_period_1.svg ---
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<svg
   xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmlns:cc="http://creativecommons.org/ns#"
   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
   xmlns:svg="http://www.w3.org/2000/svg"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   sodipodi:docname="set_to_staking_period_1.svg"
   inkscape:version="1.0 (4035a4fb49, 2020-05-01)"
   id="svg8"
   version="1.1"
   viewBox="0 0 208.25806 60.366711"
   height="60.366711mm"
   width="208.25806mm">
  <defs
     id="defs2">
    <marker
       inkscape:isstock="true"
       style="overflow:visible"
       id="marker1155"
       refX="0"
       refY="0"
       orient="auto"
       inkscape:stockid="Arrow1Lend">
      <path
         transform="matrix(-0.8,0,0,-0.8,-10,0)"
         style="fill:#000000;fill-opacity:1;fill-rule:evenodd;stroke:#000000;stroke-width:1pt;stroke-opacity:1"
         d="M 0,0 5,-5 -12.5,0 5,5 Z"
         id="path1153" />
    </marker>
    <marker
       inkscape:isstock="true"
       style="overflow:visible"
       id="Arrow1Lend"
       refX="0"
       refY="0"
       orient="auto"
       inkscape:stockid="Arrow1Lend">
      <path
         transform="matrix(-0.8,0,0,-0.8,-10,0)"
         style="fill:#000000;fill-opacity:1;fill-rule:evenodd;stroke:#000000;stroke-width:1pt;stroke-opacity:1"
         d="M 0,0 5,-5 -12.5,0 5,5 Z"
         id="path854" />
    </marker>
    <marker
       inkscape:isstock="true"
       style="overflow:visible"
       id="Arrow1Lstart"
       refX="0"
       refY="0"
       orient="auto"
       inkscape:stockid="Arrow1Lstart">
      <path
         transform="matrix(0.8,0,0,0.8,10,0)"
         style="fill:#000000;fill-opacity:1;fill-rule:evenodd;stroke:#000000;stroke-width:1pt;stroke-opacity:1"
         d="M 0,0 5,-5 -12.5,0 5,5 Z"
         id="path851" />
    </marker>
  </defs>
  <sodipodi:namedview
     inkscape:window-maximized="1"
     inkscape:window-y="27"
     inkscape:window-x="40"
     inkscape:window-height="1016"
     inkscape:window-width="1880"
     fit-margin-bottom="10"
     fit-margin-right="10"
     fit-margin-left="10"
     fit-margin-top="10"
     showgrid="false"
     inkscape:document-rotation="0"
     inkscape:current-layer="layer1"
     inkscape:document-units="mm"
     inkscape:cy="370.79722"
     inkscape:cx="610.60749"
     inkscape:zoom="0.67063492"
     inkscape:pageshadow="2"
     inkscape:pageopacity="0.0"
     borderopacity="1.0"
     bordercolor="#666666"
     pagecolor="#ffffff"
     id="base" />
  <g
     transform="translate(2.3273583,-23.545408)"
     id="layer1"
     inkscape:groupmode="layer"
     inkscape:label="Layer 1">
    <path
       id="path833"
       d="M 12.897401,63.318873 H 194.99746"
       style="fill:#ffff00;stroke-width:2.1;stroke-linecap:round;stroke-linejoin:bevel;stroke-miterlimit:4;stroke-dasharray:none" />
    <path
       id="path835"
       d="M 8.1726417,56.079524 H 195.4307"
       style="fill:#000000;stroke:#000000;stroke-width:1;stroke-linecap:round;stroke-linejoin:bevel;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" />
    <path
       id="path837"
       d="M 29.864068,44.591573 V 70.510666"
       style="fill:#000000;stroke:#000000;stroke-width:1;stroke-linecap:round;stroke-linejoin:bevel;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" />
    <path
       style="fill:#000000;stroke:#000000;stroke-width:1;stroke-linecap:round;stroke-linejoin:bevel;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"
       d="M 153.68945,44.591573 V 70.510666"
       id="path839" />
    <text
       id="text843"
       y="37.798183"
       x="146.17342"
       style="font-size:7.05556px;line-height:1.25;font-family:Adelaide;-inkscape-font-specification:Adelaide;letter-spacing:0px;stroke-width:0.264583"
       xml:space="preserve"><tspan
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:Ubuntu;-inkscape-font-specification:Ubuntu;stroke-width:0.264583"
         y="37.798183"
         x="146.17342"
         id="tspan841"
         sodipodi:role="line">now</tspan></text>
    <text
       id="text847"
       y="39.020523"
       x="10.549484"
       style="font-size:7.05556px;line-height:1.25;font-family:Adelaide;-inkscape-font-specification:Adelaide;letter-spacing:0px;stroke-width:0.264583"
       xml:space="preserve"><tspan
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:Ubuntu;-inkscape-font-specification:Ubuntu;stroke-width:0.264583"
         y="39.020523"
         x="10.549484"
         id="tspan845"
         sodipodi:role="line">evidence_stake_block_number</tspan></text>
    <path
       id="path849"
       d="M 34.710168,65.324375 H 144.23359"
       style="fill:#000000;stroke:#000000;stroke-width:0.677416;stroke-linecap:round;stroke-linejoin:bevel;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;marker-start:url(#Arrow1Lstart);marker-end:url(#marker1155)" />
    <text
       id="text3091"
       y="73.827454"
       x="74.565178"
       style="font-size:7.05556px;line-height:1.25;font-family:Adelaide;-inkscape-font-specification:Adelaide;letter-spacing:0px;stroke-width:0.264583"
       xml:space="preserve"><tspan
         id="tspan3093"
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:Ubuntu;-inkscape-font-specification:Ubuntu;stroke-width:0.264583"
         y="73.827454"
         x="74.565178"
         sodipodi:role="line">time</tspan></text>
  </g>
</svg>

'''
'''--- pallets/schelling-game-shared/src/extras.rs ---
use crate::*;

impl<T: Config> Pallet<T> {
	pub(super) fn create_phase_with_all_data(
		evidence_length: u64,
		end_of_staking_time: u64,
		staking_length: u64,
		drawing_length: u64,
		commit_length: u64,
		vote_length: u64,
		appeal_length: u64,
		max_draws: u64,
		min_number_juror_staked: u64,
		min_juror_stake: u64,
		juror_incentives: (u64, u64),
	) -> PhaseDataOf<T> {
		PhaseData::create_phase_with_all_data(
			evidence_length,
			end_of_staking_time,
			staking_length,
			drawing_length,
			commit_length,
			vote_length,
			appeal_length,
			max_draws,
			min_number_juror_staked,
			min_juror_stake,
			juror_incentives,
		)
	}
	pub(super) fn create_phase_data(
		block_length: u64,
		max_draws: u64,
		min_number_juror_staked: u64,
		min_juror_stake: u64,
		juror_incentives: (u64, u64),
	) -> PhaseDataOf<T> {
		PhaseData::create_with_data(
			block_length,
			max_draws,
			min_number_juror_staked,
			min_juror_stake,
			juror_incentives,
		)
	}
	/// Set to evidence period, when some one stakes for validation
	pub(super) fn set_to_evidence_period(
		key: SumTreeNameType<T>,
		now: BlockNumberOf<T>,
	) -> DispatchResult {
		match <PeriodName<T>>::get(&key) {
			Some(_period) => Err(Error::<T>::PeriodExists)?,
			None => {
				let period = Period::Evidence;
				<PeriodName<T>>::insert(&key, period);
				<EvidenceStartTime<T>>::insert(&key, now);
			},
		}
		Ok(())
	}

	/// Check `Period` is `Evidence`, and change it to `Staking`   
	/// It is called with function that submits challenge stake after `end_block` of evidence period  
	/// Checks evidence period is over
	#[doc=include_str!("docimage/set_to_staking_period_1.svg")]
	/// ```ignore
	/// if time >= block_time.min_short_block_length {
	///        // change `Period` to `Staking`
	///  }
	/// ```
	pub(super) fn set_to_staking_period(
		key: SumTreeNameType<T>,
		phase_data: PhaseDataOf<T>,
		now: BlockNumberOf<T>,
	) -> DispatchResult {
		if let Some(Period::Evidence) = <PeriodName<T>>::get(&key) {
			let evidence_stake_block_number = <EvidenceStartTime<T>>::get(&key);
			let time = now.checked_sub(&evidence_stake_block_number).expect("Overflow");
			let evidence_length = phase_data.evidence_length;
			let end_length_for_staking = phase_data.end_of_staking_time;
			let total_length =
				evidence_length.checked_add(&end_length_for_staking).expect("overflow");
			if time >= evidence_length && time < total_length {
				let new_period = Period::Staking;
				<PeriodName<T>>::insert(&key, new_period);
				<StakingStartTime<T>>::insert(&key, now);
			} else if time >= total_length {
				Err(Error::<T>::TimeForStakingOver)?
			} else {
				Err(Error::<T>::EvidencePeriodNotOver)?
			}
		} else {
			Err(Error::<T>::PeriodIsNotEvidence)?
		}

		Ok(())
	}

	/// Check time for staking over
	pub(super) fn ensure_time_for_staking_over(
		key: SumTreeNameType<T>,
		phase_data: PhaseDataOf<T>,
		now: BlockNumberOf<T>,
	) -> DispatchResult {
		let evidence_stake_block_number = <EvidenceStartTime<T>>::get(&key);
		let time = now.checked_sub(&evidence_stake_block_number).expect("Overflow");
		let evidence_length = phase_data.evidence_length;
		let end_length_for_staking = phase_data.end_of_staking_time;
		let total_length = evidence_length.checked_add(&end_length_for_staking).expect("overflow");
		ensure!(time >= total_length, Error::<T>::TimeForStakingNotOver);
		Ok(())
	}

	/// Set staking period when evidence period is not required
	pub(super) fn set_to_staking_period_pe(
		key: SumTreeNameType<T>,
		now: BlockNumberOf<T>,
	) -> DispatchResult {
		if let None = <PeriodName<T>>::get(&key) {
			let new_period = Period::Staking;
			<PeriodName<T>>::insert(&key, new_period);
			<StakingStartTime<T>>::insert(&key, now);
		} else {
			Err(Error::<T>::PeriodIsNotNone)?
		}

		Ok(())
	}

	pub(super) fn create_tree_link_helper(key: SumTreeNameType<T>, k: u64) -> DispatchResult {
		T::SortitionSumGameSource::create_tree_link(key.clone(), k)?;
		Ok(())
	}

	/// Change the `Period`
	///    
	/// `Period::Staking` to `Period::Drawing`
	#[doc=include_str!("docimage/change_period_link_1.svg")]
	/// ```ignore
	/// if now >= min_long_block_length + staking_start_time {
	///   // Change `Period::Staking` to `Period::Drawing`   
	/// }
	/// ```
	///
	///  `Period::Drawing` to `Period::Commit`   
	/// When maximum juror are drawn   
	///  
	/// `Period::Commit` to `Period::Vote`       
	/// ```ignore
	/// if now >= min_long_block_length + commit_start_time {
	///   // Change `Period::Commit` to `Period::Vote`  
	/// }
	/// ```
	///
	/// `Period::Vote` to `Period::Execution`   
	/// ```ignore
	/// if now >= min_long_block_length + vote_start_time {
	///   // Change `Period::Vote` to `Period::Execution`   
	/// }
	/// ```
	pub(super) fn change_period(
		key: SumTreeNameType<T>,
		phase_data: PhaseDataOf<T>,
		now: BlockNumberOf<T>,
	) -> DispatchResult {
		match <PeriodName<T>>::get(&key) {
			Some(period) => {
				match period {
					Period::Evidence => todo!(),
					Period::Staking => {
						// Also check has min number of jurors has staked
						let staking_start_time = <StakingStartTime<T>>::get(&key);
						let staking_length = phase_data.staking_length;
						if now >= staking_length + staking_start_time {
							let new_period = Period::Drawing;
							<PeriodName<T>>::insert(&key, new_period);
						} else {
							Err(Error::<T>::StakingPeriodNotOver)?
						}
					},
					Period::Drawing => {
						// Also give time
						let max_draws = phase_data.max_draws;
						let draws_in_round = <DrawsInRound<T>>::get(&key);
						if draws_in_round >= max_draws {
							<CommitStartTime<T>>::insert(&key, now);
							let new_period = Period::Commit;
							<PeriodName<T>>::insert(&key, new_period);
						} else {
							Err(Error::<T>::MaxJurorNotDrawn)?
						}
					},
					Period::Commit => {
						let commit_start_time = <CommitStartTime<T>>::get(&key);
						let commit_length = phase_data.commit_length;
						if now >= commit_length + commit_start_time {
							<VoteStartTime<T>>::insert(&key, now);
							let new_period = Period::Vote;
							<PeriodName<T>>::insert(&key, new_period);
						} else {
							Err(Error::<T>::CommitPeriodNotOver)?
						}
					},
					Period::Vote => {
						let vote_start_time = <VoteStartTime<T>>::get(&key);
						let vote_length = phase_data.vote_length;
						if now >= vote_length + vote_start_time {
							let new_period = Period::Execution;
							<PeriodName<T>>::insert(&key, new_period);
						} else {
							Err(Error::<T>::VotePeriodNotOver)?
						}
					},
					Period::Appeal => todo!(),
					Period::Execution => todo!(),
				}
			},
			None => Err(Error::<T>::PeriodDoesNotExists)?,
		}
		Ok(())
	}

	pub(super) fn apply_jurors_helper(
		key: SumTreeNameType<T>,
		phase_data: PhaseDataOf<T>,
		who: AccountIdOf<T>,
		stake: BalanceOf<T>,
	) -> DispatchResult {
		match <PeriodName<T>>::get(&key) {
			Some(period) => {
				ensure!(period == Period::Staking, Error::<T>::PeriodDontMatch);
			},
			None => Err(Error::<T>::PeriodDoesNotExists)?,
		}
		let min_stake = phase_data.min_juror_stake;

		ensure!(stake >= min_stake, Error::<T>::JurorStakeLessThanMin);

		// let imb = T::Currency::withdraw(
		// 	&who,
		// 	stake,
		// 	WithdrawReasons::TRANSFER,
		// 	ExistenceRequirement::AllowDeath,
		// )?;

		// T::Currency::resolve_creating(&Self::juror_stake_account(), imb);

		let imbalance = T::Currency::slash(&who, stake).0;
		T::Slash::on_unbalanced(imbalance);

		// let stake_of = Self::stake_of(key.clone(), profile_citizenid)?;

		let stake_u64 = Self::balance_to_u64_saturated(stake);

		let stake_of = T::SortitionSumGameSource::stake_of_link(key.clone(), who.clone())?;

		match stake_of {
			Some(_stake) => Err(Error::<T>::AlreadyStaked)?,
			None => {
				let result = T::SortitionSumGameSource::set_link(key, stake_u64, who);
				result
			},
		}
	}

	// Improvements: Set stake to zero after a juror is drawn, so that they are not drawn again. Store the stake in storage map in DrawnJurors, and use it in get_incentives_helper
	pub(super) fn draw_jurors_helper(
		key: SumTreeNameType<T>,
		phase_data: PhaseDataOf<T>,
		iterations: u64,
	) -> DispatchResult {
		match <PeriodName<T>>::get(&key) {
			Some(period) => {
				ensure!(period == Period::Drawing, Error::<T>::PeriodDontMatch);
			},
			None => Err(Error::<T>::PeriodDoesNotExists)?,
		}
		let max_draws = phase_data.max_draws;
		let draws_in_round = <DrawsInRound<T>>::get(&key);
		ensure!(draws_in_round < max_draws.into(), Error::<T>::MaxDrawExceeded);
		let mut end_index = draws_in_round + iterations;
		if draws_in_round + iterations >= max_draws {
			end_index = max_draws;
		}
		let mut draw_increment = draws_in_round.clone();

		for _ in draws_in_round..end_index {
			let nonce = Self::get_and_increment_nonce();
			let random_seed = T::RandomnessSource::random(&nonce).encode();
			let random_number = u64::decode(&mut random_seed.as_ref())
				.expect("secure hashes should always be bigger than u64; qed");
			// let mut rng = rand::thread_rng();
			// let random_number: u64 = rng.gen();
			// log::info!("Random number: {:?}", random_number);
			let accountid = T::SortitionSumGameSource::draw_link(key.clone(), random_number)?;
			let stake = T::SortitionSumGameSource::stake_of_link(key.clone(), accountid.clone())?;

			let mut drawn_juror = <DrawnJurors<T>>::get(&key);
			match drawn_juror.binary_search_by(|(c, _)| c.cmp(&accountid)) {
				Ok(_) => {},
				Err(index) => {
					drawn_juror.insert(index, (accountid.clone(), stake.unwrap()));
					<DrawnJurors<T>>::insert(&key, drawn_juror);
					draw_increment = draw_increment + 1;
					// println!("draw_increment, {:?}", draw_increment);
					T::SortitionSumGameSource::set_link(key.clone(), 0, accountid)?;
				},
			}
			<DrawsInRound<T>>::insert(&key, draw_increment);
		}
		Ok(())
	}

	// When DrawnJurors contains stake, use drawn_juror.binary_search_by(|(c, _)| c.cmp(&who));
	pub(super) fn unstaking_helper(key: SumTreeNameType<T>, who: AccountIdOf<T>) -> DispatchResult {
		match <PeriodName<T>>::get(&key) {
			Some(period) => {
				ensure!(
					period == Period::Commit
						|| period == Period::Vote
						|| period == Period::Execution,
					Error::<T>::PeriodDontMatch
				);
			},
			None => Err(Error::<T>::PeriodDoesNotExists)?,
		}

		let drawn_juror = <DrawnJurors<T>>::get(&key);
		match drawn_juror.binary_search_by(|(c, _)| c.cmp(&who.clone())) {
			Ok(_) => Err(Error::<T>::SelectedAsJuror)?,
			Err(_) => {},
		}

		let stake_of = T::SortitionSumGameSource::stake_of_link(key.clone(), who.clone())?;

		match stake_of {
			Some(stake) => {
				let balance = Self::u64_to_balance_saturated(stake);
				let mut unstaked_jurors = <UnstakedJurors<T>>::get(&key);
				match unstaked_jurors.binary_search(&who) {
					Ok(_) => Err(Error::<T>::AlreadyUnstaked)?,
					Err(index) => {
						unstaked_jurors.insert(index, who.clone());
						<UnstakedJurors<T>>::insert(&key, unstaked_jurors);
						// let _ = T::Currency::resolve_into_existing(
						// 	&who,
						// 	T::Currency::withdraw(
						// 		&Self::juror_stake_account(),
						// 		balance,
						// 		WithdrawReasons::TRANSFER,
						// 		ExistenceRequirement::AllowDeath,
						// 	)?,
						// );
						let r = T::Currency::deposit_into_existing(&who, balance).ok().unwrap();
						T::Reward::on_unbalanced(r);
					},
				}
			},
			None => Err(Error::<T>::StakeDoesNotExists)?,
		}

		// println!("stakeof {:?}", stake_of);

		Ok(())
	}

	pub(super) fn commit_vote_helper(
		key: SumTreeNameType<T>,
		who: AccountIdOf<T>,
		vote_commit: [u8; 32],
	) -> DispatchResult {
		match <PeriodName<T>>::get(&key) {
			Some(period) => {
				ensure!(period == Period::Commit, Error::<T>::PeriodDontMatch);
			},
			None => Err(Error::<T>::PeriodDoesNotExists)?,
		}
		let drawn_jurors = <DrawnJurors<T>>::get(&key);
		match drawn_jurors.binary_search_by(|(c, _)| c.cmp(&who.clone())) {
			Ok(_) => {
				let vote_commit_struct = CommitVote {
					commit: vote_commit,
					votestatus: VoteStatus::Commited,
					revealed_vote: None,
				};
				<VoteCommits<T>>::insert(&key, &who, vote_commit_struct);
			},
			Err(_) => Err(Error::<T>::JurorDoesNotExists)?,
		}
		Ok(())
	}

	pub(super) fn reveal_vote_two_choice_helper(
		key: SumTreeNameType<T>,
		who: AccountIdOf<T>,
		choice: u128,
		salt: Vec<u8>,
	) -> DispatchResult {
		match <PeriodName<T>>::get(&key) {
			Some(period) => {
				ensure!(period == Period::Vote, Error::<T>::PeriodDontMatch);
			},
			None => Err(Error::<T>::PeriodDoesNotExists)?,
		}
		let who_commit_vote = <VoteCommits<T>>::get(&key, &who);
		match who_commit_vote {
			Some(mut commit_struct) => {
				ensure!(
					commit_struct.votestatus == VoteStatus::Commited,
					Error::<T>::VoteStatusNotCommited
				);
				let mut vote = format!("{}", choice).as_bytes().to_vec();
				// let mut vote = choice.clone();
				let mut salt_a = salt.clone();
				vote.append(&mut salt_a);
				let vote_bytes: &[u8] = &vote;
				let hash = sp_io::hashing::keccak_256(vote_bytes);
				let commit: &[u8] = &commit_struct.commit;
				if hash == commit {
					let mut decision_tuple = <DecisionCount<T>>::get(&key);
					if choice == 1 {
						decision_tuple.1 = decision_tuple.1 + 1;
						<DecisionCount<T>>::insert(&key, decision_tuple);
						commit_struct.revealed_vote = Some(RevealedVote::Yes);
					} else if choice == 0 {
						decision_tuple.0 = decision_tuple.0 + 1;
						<DecisionCount<T>>::insert(&key, decision_tuple);
						commit_struct.revealed_vote = Some(RevealedVote::No);
					} else {
						Err(Error::<T>::NotValidChoice)?
					}
					commit_struct.votestatus = VoteStatus::Revealed;
					<VoteCommits<T>>::insert(&key, &who, commit_struct);
				} else {
					Err(Error::<T>::CommitDoesNotMatch)?
				}
			},
			None => Err(Error::<T>::CommitDoesNotExists)?,
		}

		Ok(())
	}

	/// Distribute incentives in a single go.
	pub(super) fn get_all_incentives_two_choice_helper(
		key: SumTreeNameType<T>,
		phase_data: PhaseDataOf<T>,
	) -> DispatchResult {
		match <PeriodName<T>>::get(&key) {
			Some(period) => {
				ensure!(period == Period::Execution, Error::<T>::PeriodDontMatch);
			},
			None => Err(Error::<T>::PeriodDoesNotExists)?,
		}

		let drawn_jurors = <DrawnJurors<T>>::get(&key);
		let reveal_votes_iterator = <VoteCommits<T>>::iter_prefix(&key);

		let mut reveal_votes = reveal_votes_iterator
			.map(|(account_id, commit_vote)| (account_id, commit_vote.revealed_vote))
			.collect::<Vec<(_, _)>>();
		reveal_votes.sort_by(|a, b| a.0.cmp(&b.0));
		let decision_count = <DecisionCount<T>>::get(&key);
		let incentives = phase_data.juror_incentives;
		let (winning_decision, winning_incentives) =
			Self::get_winning_incentives(decision_count, incentives);
		for juror in drawn_jurors {
			match reveal_votes.binary_search_by(|(c, _)| c.cmp(&juror.0)) {
				Ok(index) => {
					let account_n_vote = reveal_votes[index].clone();
					if let Some(vote) = account_n_vote.1 {
						match winning_decision {
							WinningDecision::WinnerYes => match vote {
								RevealedVote::Yes => {
									let result = Self::winner_getting_incentives2(
										juror.0.clone(),
										winning_incentives,
										juror.1,
									)?;
									result
								},
								RevealedVote::No => {
									let result =
										Self::looser_getting_incentives2(juror.0.clone(), juror.1)?;
									result
								},
							},
							WinningDecision::WinnerNo => match vote {
								RevealedVote::Yes => {
									let result =
										Self::looser_getting_incentives2(juror.0.clone(), juror.1)?;
									result
								},
								RevealedVote::No => {
									let result = Self::winner_getting_incentives2(
										juror.0.clone(),
										winning_incentives,
										juror.1,
									)?;
									result
								},
							},
							WinningDecision::Draw => {
								let result =
									Self::getting_incentives_draw2(juror.0.clone(), juror.1)?;
								result
							},
						}
					}
				},
				Err(_) => {},
			}
		}
		// Remove SorititionSumTrees in `sortition-sum-game` pallet
		let _result = T::SortitionSumGameSource::remove_tree_link(key.clone());

		// Remove DrawnJurors
		<DrawnJurors<T>>::remove(&key);

		// Remove VoteCommits
		<VoteCommits<T>>::remove_prefix(key.clone(), None); // Deprecated: Use clear_prefix instead
													// let reveal_votes_iterator2 = <VoteCommits<T>>::iter_prefix(&key);
													// reveal_votes_iterator2.for_each(|(account_id, _)|{
													// 	<VoteCommits<T>>::remove(key.clone(), account_id);
													// });

		Ok(())
	}

	// Improvements: Will it be better to distribute all jurors incentives in single call
	pub(super) fn get_incentives_two_choice_helper(
		key: SumTreeNameType<T>,
		phase_data: PhaseDataOf<T>,
		who: AccountIdOf<T>,
	) -> DispatchResult {
		match <PeriodName<T>>::get(&key) {
			Some(period) => {
				ensure!(period == Period::Execution, Error::<T>::PeriodDontMatch);
			},
			None => Err(Error::<T>::PeriodDoesNotExists)?,
		}

		let drawn_juror = <DrawnJurors<T>>::get(&key);

		let who_commit_vote = <VoteCommits<T>>::get(&key, &who);
		match who_commit_vote {
			Some(commit_struct) => {
				let vote_option = commit_struct.revealed_vote;
				match vote_option {
					Some(vote) => {
						let decision_count: (u64, u64) = <DecisionCount<T>>::get(&key);
						let incentives = phase_data.juror_incentives;
						let (winning_decision, winning_incentives) =
							Self::get_winning_incentives(decision_count, incentives);
						if let Ok(i) = drawn_juror.binary_search_by(|(c, _)| c.cmp(&who.clone())) {
							let stake = drawn_juror[i].1;
							match winning_decision {
								WinningDecision::WinnerYes => match vote {
									RevealedVote::Yes => {
										let result = Self::winner_getting_incentives(
											key.clone(),
											who.clone(),
											winning_incentives,
											stake,
										)?;
										result
									},
									RevealedVote::No => {
										let result = Self::looser_getting_incentives(
											key.clone(),
											who.clone(),
											stake,
										)?;
										result
									},
								},
								WinningDecision::WinnerNo => match vote {
									RevealedVote::Yes => {
										let result = Self::looser_getting_incentives(
											key.clone(),
											who.clone(),
											stake,
										)?;
										result
									},
									RevealedVote::No => {
										let result = Self::winner_getting_incentives(
											key.clone(),
											who.clone(),
											winning_incentives,
											stake,
										)?;
										result
									},
								},
								WinningDecision::Draw => {
									let result = Self::getting_incentives_draw(
										key.clone(),
										who.clone(),
										stake.clone(),
									)?;
									result
								},
							}
						} else {
							Err(Error::<T>::StakeDoesNotExists)?
						}
					},
					None => Err(Error::<T>::VoteNotRevealed)?,
				}
			},
			None => Err(Error::<T>::CommitDoesNotExists)?,
		}
		Ok(())
	}

	pub(super) fn getting_incentives_draw(
		key: SumTreeNameType<T>,
		who: AccountIdOf<T>,
		stake: u64,
	) -> DispatchResult {
		let balance = Self::u64_to_balance_saturated(stake);
		let mut juror_got_incentives = <JurorsIncentiveDistributedAccounts<T>>::get(&key);
		match juror_got_incentives.binary_search(&who) {
			Ok(_) => Err(Error::<T>::AlreadyGotIncentives)?,
			Err(index) => {
				juror_got_incentives.insert(index, who.clone());
				<JurorsIncentiveDistributedAccounts<T>>::insert(&key, juror_got_incentives);
				let r = T::Currency::deposit_into_existing(&who, balance).ok().unwrap();
				T::Reward::on_unbalanced(r);
			},
		}

		Ok(())
	}

	pub(super) fn getting_incentives_draw2(who: AccountIdOf<T>, stake: u64) -> DispatchResult {
		let balance = Self::u64_to_balance_saturated(stake);

		let r = T::Currency::deposit_into_existing(&who, balance).ok().unwrap();
		T::Reward::on_unbalanced(r);

		Ok(())
	}

	pub(super) fn looser_getting_incentives(
		key: SumTreeNameType<T>,
		who: AccountIdOf<T>,
		stake: u64,
	) -> DispatchResult {
		let balance = Self::u64_to_balance_saturated(stake * 3 / 4);
		let mut juror_got_incentives = <JurorsIncentiveDistributedAccounts<T>>::get(&key);
		match juror_got_incentives.binary_search(&who) {
			Ok(_) => Err(Error::<T>::AlreadyGotIncentives)?,
			Err(index) => {
				juror_got_incentives.insert(index, who.clone());
				<JurorsIncentiveDistributedAccounts<T>>::insert(&key, juror_got_incentives);
				let r = T::Currency::deposit_into_existing(&who, balance).ok().unwrap();
				T::Reward::on_unbalanced(r);
			},
		}
		Ok(())
	}

	pub(super) fn looser_getting_incentives2(who: AccountIdOf<T>, stake: u64) -> DispatchResult {
		let balance = Self::u64_to_balance_saturated(stake * 3 / 4);

		let r = T::Currency::deposit_into_existing(&who, balance).ok().unwrap();
		T::Reward::on_unbalanced(r);

		Ok(())
	}

	pub(super) fn winner_getting_incentives(
		key: SumTreeNameType<T>,
		who: AccountIdOf<T>,
		winning_incentives: u64,
		stake: u64,
	) -> DispatchResult {
		let mut juror_got_incentives = <JurorsIncentiveDistributedAccounts<T>>::get(&key);
		match juror_got_incentives.binary_search(&who) {
			Ok(_) => Err(Error::<T>::AlreadyGotIncentives)?,
			Err(index) => {
				juror_got_incentives.insert(index, who.clone());
				<JurorsIncentiveDistributedAccounts<T>>::insert(&key, juror_got_incentives);
				let total_incentives = stake.checked_add(winning_incentives).expect("overflow");
				let incentives = Self::u64_to_balance_saturated(total_incentives);
				let r = T::Currency::deposit_into_existing(&who, incentives).ok().unwrap();
				T::Reward::on_unbalanced(r);
			},
		};

		Ok(())
	}

	pub(super) fn winner_getting_incentives2(
		who: AccountIdOf<T>,
		winning_incentives: u64,
		stake: u64,
	) -> DispatchResult {
		let total_incentives = stake.checked_add(winning_incentives).expect("overflow");
		let incentives = Self::u64_to_balance_saturated(total_incentives);
		let r = T::Currency::deposit_into_existing(&who, incentives).ok().unwrap();
		T::Reward::on_unbalanced(r);

		Ok(())
	}

	pub(super) fn get_winning_decision(decision_tuple: (u64, u64)) -> WinningDecision {
		if decision_tuple.1 > decision_tuple.0 {
			WinningDecision::WinnerYes // Decision 1 won
		} else if decision_tuple.0 > decision_tuple.1 {
			WinningDecision::WinnerNo // Decision 0 won
		} else {
			WinningDecision::Draw // draw
		}
	}

	pub(super) fn get_winning_decision_value(key: SumTreeNameType<T>) -> WinningDecision {
		let decision_tuple: (u64, u64) = <DecisionCount<T>>::get(&key);
		Self::get_winning_decision(decision_tuple)
	}

	pub(super) fn get_winning_incentives(
		decision_tuple: (u64, u64),
		incentive_tuple: (u64, u64),
	) -> (WinningDecision, u64) {
		let winning_decision = Self::get_winning_decision(decision_tuple);
		match winning_decision {
			WinningDecision::WinnerYes => {
				let winning_incentives =
					(incentive_tuple.1).checked_div(decision_tuple.1).expect("Overflow");
				(WinningDecision::WinnerYes, winning_incentives)
			},
			WinningDecision::WinnerNo => {
				let winning_incentives =
					(incentive_tuple.1).checked_div(decision_tuple.0).expect("Overflow");
				(WinningDecision::WinnerNo, winning_incentives)
			},
			WinningDecision::Draw => (WinningDecision::Draw, 0),
		}
	}

	pub(super) fn balance_to_u64_saturated(input: BalanceOf<T>) -> u64 {
		input.saturated_into::<u64>()
	}

	pub(super) fn u64_to_balance_saturated(input: u64) -> BalanceOf<T> {
		input.saturated_into::<BalanceOf<T>>()
	}

	pub(super) fn block_number_to_u32_saturated(input: BlockNumberOf<T>) -> u32 {
		input.saturated_into::<u32>()
	}
	pub(super) fn get_and_increment_nonce() -> Vec<u8> {
		let nonce = <Nonce<T>>::get();
		<Nonce<T>>::put(nonce.wrapping_add(1));
		// let n = nonce * 1000 + 1000; // remove and uncomment in production
		// n.encode()

		nonce.encode()
	}
	pub(super) fn get_evidence_period_end_block_helper(
		key: SumTreeNameType<T>,
		phase_data: PhaseDataOf<T>,
		now: BlockNumberOf<T>,
	) -> Option<u32> {
		let start_block_number = <EvidenceStartTime<T>>::get(&key);
		let evidence_length = phase_data.evidence_length;
		let end_block = start_block_number.checked_add(&evidence_length).expect("Overflow");
		let left_block = end_block.checked_sub(&now);
		match left_block {
			Some(val) => {
				let left_block_u32 = Self::block_number_to_u32_saturated(val);
				Some(left_block_u32)
			},
			None => Some(0),
		}
	}

	pub(super) fn get_staking_period_end_block_helper(
		key: SumTreeNameType<T>,
		phase_data: PhaseDataOf<T>,
		now: BlockNumberOf<T>,
	) -> Option<u32> {
		let staking_start_time = <StakingStartTime<T>>::get(&key);
		let staking_length = phase_data.staking_length;
		let end_block = staking_start_time.checked_add(&staking_length).expect("Overflow");
		let left_block = end_block.checked_sub(&now);
		match left_block {
			Some(val) => {
				let left_block_u32 = Self::block_number_to_u32_saturated(val);
				Some(left_block_u32)
			},
			None => Some(0),
		}
	}

	pub(super) fn get_drawing_period_end_helper(
		key: SumTreeNameType<T>,
		phase_data: PhaseDataOf<T>,
	) -> (u64, u64, bool) {
		let max_draws = phase_data.max_draws;
		let draws_in_round = <DrawsInRound<T>>::get(&key);
		if draws_in_round >= max_draws.into() {
			(max_draws, draws_in_round, true)
		} else {
			(max_draws, draws_in_round, false)
		}
	}

	pub(super) fn get_commit_period_end_block_helper(
		key: SumTreeNameType<T>,
		phase_data: PhaseDataOf<T>,
		now: BlockNumberOf<T>,
	) -> Option<u32> {
		let commit_start_time = <CommitStartTime<T>>::get(&key);
		let commit_length = phase_data.commit_length;
		let end_block = commit_start_time.checked_add(&commit_length).expect("Overflow");
		let left_block = end_block.checked_sub(&now);
		match left_block {
			Some(val) => {
				let left_block_u32 = Self::block_number_to_u32_saturated(val);
				Some(left_block_u32)
			},
			None => Some(0),
		}
	}

	pub(super) fn get_vote_period_end_block_helper(
		key: SumTreeNameType<T>,
		phase_data: PhaseDataOf<T>,
		now: BlockNumberOf<T>,
	) -> Option<u32> {
		let vote_start_time = <VoteStartTime<T>>::get(&key);
		let vote_length = phase_data.vote_length;
		let end_block = vote_start_time.checked_add(&vote_length).expect("Overflow");
		let left_block = end_block.checked_sub(&now);
		match left_block {
			Some(val) => {
				let left_block_u32 = Self::block_number_to_u32_saturated(val);
				Some(left_block_u32)
			},
			None => Some(0),
		}
	}

	pub(super) fn selected_as_juror_helper(key: SumTreeNameType<T>, who: T::AccountId) -> bool {
		let drawn_juror = <DrawnJurors<T>>::get(&key);
		match drawn_juror.binary_search_by(|(c, _)| c.cmp(&who.clone())) {
			Ok(_) => true,
			Err(_) => false,
		}
	}
}

'''
'''--- pallets/schelling-game-shared/src/functions.rs ---
use super::*;

// 6 sec (1 block)
// 3 days (43200), 10 days (144000)
// 15 mins (150)
// 5 mins (50)
// 8 mins (80)

impl<T: Config> PhaseData<T> {
	pub fn new(
		evidence_length: T::BlockNumber,
		end_of_staking_time: T::BlockNumber,
		staking_length: T::BlockNumber,
		drawing_length: T::BlockNumber,
		commit_length: T::BlockNumber,
		vote_length: T::BlockNumber,
		appeal_length: T::BlockNumber,
		max_draws: u64,
		min_number_juror_staked: u64,
		min_juror_stake: BalanceOf<T>,
		juror_incentives: (u64, u64),
	) -> Self {
		PhaseData {
			evidence_length,
			end_of_staking_time,
			staking_length,
			drawing_length,
			commit_length,
			vote_length,
			appeal_length,
			max_draws,
			min_number_juror_staked,
			min_juror_stake,
			juror_incentives,
		}
	}

	pub fn default() -> Self {
		PhaseData {
			evidence_length: 144000u64.saturated_into::<BlockNumberOf<T>>(),
			end_of_staking_time: 144000u64.saturated_into::<BlockNumberOf<T>>(),
			staking_length: 144000u64.saturated_into::<BlockNumberOf<T>>(),
			drawing_length: 144000u64.saturated_into::<BlockNumberOf<T>>(),
			commit_length: 144000u64.saturated_into::<BlockNumberOf<T>>(),
			vote_length: 144000u64.saturated_into::<BlockNumberOf<T>>(),
			appeal_length: 144000u64.saturated_into::<BlockNumberOf<T>>(),
			max_draws: 30,
			min_number_juror_staked: 50,
			min_juror_stake: 1000u64.saturated_into::<BalanceOf<T>>(),
			juror_incentives: (1000, 1000),
		}
	}

	pub fn create_with_data(
		block_length: u64,
		max_draws: u64,
		min_number_juror_staked: u64,
		min_juror_stake: u64,
		juror_incentives: (u64, u64),
	) -> Self {
		let block_length = block_length.saturated_into::<BlockNumberOf<T>>();
		let min_juror_stake = min_juror_stake.saturated_into::<BalanceOf<T>>();
		PhaseData {
			evidence_length: block_length,
			end_of_staking_time: block_length,
			staking_length: block_length,
			drawing_length: block_length,
			commit_length: block_length,
			vote_length: block_length,
			appeal_length: block_length,
			max_draws,
			min_number_juror_staked,
			min_juror_stake,
			juror_incentives,
		}
	}

	pub fn create_phase_with_all_data(
		evidence_length: u64,
		end_of_staking_time: u64,
		staking_length: u64,
		drawing_length: u64,
		commit_length: u64,
		vote_length: u64,
		appeal_length: u64,
		max_draws: u64,
		min_number_juror_staked: u64,
		min_juror_stake: u64,
		juror_incentives: (u64, u64),
	) -> Self {
		let evidence_length = evidence_length.saturated_into::<BlockNumberOf<T>>();
		let end_of_staking_time = end_of_staking_time.saturated_into::<BlockNumberOf<T>>();
		let staking_length = staking_length.saturated_into::<BlockNumberOf<T>>();
		let drawing_length = drawing_length.saturated_into::<BlockNumberOf<T>>();
		let commit_length = commit_length.saturated_into::<BlockNumberOf<T>>();
		let vote_length = vote_length.saturated_into::<BlockNumberOf<T>>();
		let appeal_length = appeal_length.saturated_into::<BlockNumberOf<T>>();
	
		let min_juror_stake = min_juror_stake.saturated_into::<BalanceOf<T>>();
		PhaseData {
			evidence_length,
			end_of_staking_time,
			staking_length,
			drawing_length,
			commit_length,
			vote_length,
			appeal_length,
			max_draws,
			min_number_juror_staked,
			min_juror_stake,
			juror_incentives,
		}
	}
}

'''
'''--- pallets/schelling-game-shared/src/lib.rs ---
#![cfg_attr(not(feature = "std"), no_std)]

/// Edit this file to define custom logic or remove it if it is not needed.
/// Learn more about FRAME and the core library of Substrate FRAME pallets:
/// <https://docs.substrate.io/reference/frame-pallets/>
pub use pallet::*;

#[cfg(test)]
mod mock;

#[cfg(test)]
mod tests;

#[cfg(feature = "runtime-benchmarks")]
mod benchmarking;
pub mod weights;
pub use weights::*;

mod extras;
mod functions;
pub mod types;
mod score_game;
mod share_link;

use crate::types::{
	CommitVote, Period, PhaseData, RangePoint, RevealedVote, SchellingGameType, ScoreCommitVote,
	VoteStatus, WinningDecision,
};
use frame_support::pallet_prelude::*;
use frame_support::sp_runtime::traits::{CheckedAdd, CheckedSub};
use frame_support::sp_runtime::SaturatedConversion;
use frame_support::sp_std::prelude::*;
use frame_support::traits::Randomness;
use frame_support::traits::{Currency, OnUnbalanced, ReservableCurrency};
use num_integer::Roots;
use scale_info::prelude::format;
use sortition_sum_game::types::SumTreeName;
use sortition_sum_game_link::SortitionSumGameLink;

pub type BlockNumberOf<T> = <T as frame_system::Config>::BlockNumber;
type AccountIdOf<T> = <T as frame_system::Config>::AccountId;
type BalanceOf<T> = <<T as Config>::Currency as Currency<AccountIdOf<T>>>::Balance;
type PositiveImbalanceOf<T> = <<T as Config>::Currency as Currency<
	<T as frame_system::Config>::AccountId,
>>::PositiveImbalance;
type NegativeImbalanceOf<T> = <<T as Config>::Currency as Currency<
	<T as frame_system::Config>::AccountId,
>>::NegativeImbalance;
type SumTreeNameType<T> = SumTreeName<AccountIdOf<T>, BlockNumberOf<T>>;
type PhaseDataOf<T> = PhaseData<T>;

#[frame_support::pallet]
pub mod pallet {
	use super::*;
	use frame_support::pallet_prelude::*;
	use frame_system::pallet_prelude::*;

	#[pallet::pallet]
	#[pallet::without_storage_info]
	pub struct Pallet<T>(_);

	/// Configure the pallet by specifying the parameters and types on which it depends.
	#[pallet::config]
	pub trait Config: frame_system::Config {
		/// Because this pallet emits events, it depends on the runtime's definition of an event.
		type RuntimeEvent: From<Event<Self>> + IsType<<Self as frame_system::Config>::RuntimeEvent>;
		/// Type representing the weight of this pallet
		type WeightInfo: WeightInfo;

		type SortitionSumGameSource: SortitionSumGameLink<
			SumTreeName = SumTreeName<Self::AccountId, Self::BlockNumber>,
			AccountId = Self::AccountId,
		>;

		type Currency: ReservableCurrency<Self::AccountId>;

		type RandomnessSource: Randomness<Self::Hash, Self::BlockNumber>;

		/// Handler for the unbalanced increment when rewarding (minting rewards)
		type Reward: OnUnbalanced<PositiveImbalanceOf<Self>>;

		/// Handler for the unbalanced decrement when slashing (burning collateral)
		type Slash: OnUnbalanced<NegativeImbalanceOf<Self>>;
	}

	// The pallet's runtime storage items.
	// https://docs.substrate.io/main-docs/build/runtime-storage/
	#[pallet::storage]
	#[pallet::getter(fn something)]
	// Learn more about declaring storage items:
	// https://docs.substrate.io/main-docs/build/runtime-storage/#declaring-storage-items
	pub type Something<T> = StorageValue<_, u32>;

	#[pallet::storage]
	pub type Nonce<T> = StorageValue<_, u64, ValueQuery>;

	#[pallet::storage]
	#[pallet::getter(fn get_period)]
	pub type PeriodName<T> = StorageMap<_, Blake2_128Concat, SumTreeNameType<T>, Period>;

	#[pallet::storage]
	#[pallet::getter(fn draws_in_round)]
	pub type DrawsInRound<T> = StorageMap<_, Blake2_128Concat, SumTreeNameType<T>, u64, ValueQuery>; // A counter of draws made in the current round.

	#[pallet::storage]
	#[pallet::getter(fn evidence_start_time)]
	pub type EvidenceStartTime<T> =
		StorageMap<_, Blake2_128Concat, SumTreeNameType<T>, BlockNumberOf<T>, ValueQuery>;

	#[pallet::storage]
	#[pallet::getter(fn staking_start_time)]
	pub type StakingStartTime<T> =
		StorageMap<_, Blake2_128Concat, SumTreeNameType<T>, BlockNumberOf<T>, ValueQuery>;

	#[pallet::storage]
	#[pallet::getter(fn commit_start_time)]
	pub type CommitStartTime<T> =
		StorageMap<_, Blake2_128Concat, SumTreeNameType<T>, BlockNumberOf<T>, ValueQuery>;

	#[pallet::storage]
	#[pallet::getter(fn vote_start_time)]
	pub type VoteStartTime<T> =
		StorageMap<_, Blake2_128Concat, SumTreeNameType<T>, BlockNumberOf<T>, ValueQuery>;

	/// Drawn jurors containing account id and stake Vec<(AccountId, Stake)>
	/// Should be stored in sorted order by AccountId
	#[pallet::storage]
	#[pallet::getter(fn  drawn_jurors)]
	pub type DrawnJurors<T: Config> =
		StorageMap<_, Blake2_128Concat, SumTreeNameType<T>, Vec<(T::AccountId, u64)>, ValueQuery>;

	#[pallet::storage]
	#[pallet::getter(fn unstaked_jurors)]
	pub type UnstakedJurors<T: Config> =
		StorageMap<_, Blake2_128Concat, SumTreeNameType<T>, Vec<T::AccountId>, ValueQuery>;

	/// VoteCommits for Yes or No voting
	#[pallet::storage]
	#[pallet::getter(fn vote_commits)]
	pub type VoteCommits<T: Config> = StorageDoubleMap<
		_,
		Blake2_128Concat,
		SumTreeNameType<T>,
		Blake2_128Concat,
		T::AccountId,
		CommitVote,
	>;

	/// Vote Commits for Score Schelling  
	#[pallet::storage]
	#[pallet::getter(fn vote_commits_score)]
	pub type ScoreVoteCommits<T: Config> = StorageDoubleMap<
		_,
		Blake2_128Concat,
		SumTreeNameType<T>,
		Blake2_128Concat,
		T::AccountId,
		ScoreCommitVote,
	>;

	/// Reveal values of score schelling game as Vec<i64>
	#[pallet::storage]
	#[pallet::getter(fn reveal_score_values)]
	pub type RevealScoreValues<T: Config> =
		StorageMap<_, Blake2_128Concat, SumTreeNameType<T>, Vec<i64>, ValueQuery>;

	/// New mean from the reveal values in score schelling game
	/// Improvement: This step will not be required if all jurors incentives are distributed at one time
	#[pallet::storage]
	#[pallet::getter(fn new_mean_reveal_score)]
	pub type IncentiveMeanRevealScore<T: Config> =
		StorageMap<_, Blake2_128Concat, SumTreeNameType<T>, i64, ValueQuery>;

	/// Decision count for two choices after reveal vote:  (count for 0, count for 1)
	#[pallet::storage]
	#[pallet::getter(fn decision_count)]
	pub type DecisionCount<T> =
		StorageMap<_, Blake2_128Concat, SumTreeNameType<T>, (u64, u64), ValueQuery>; // Count for 0, Count for 1

	#[pallet::storage]
	#[pallet::getter(fn juror_incentive_distribution)]
	pub type JurorsIncentiveDistributedAccounts<T: Config> =
		StorageMap<_, Blake2_128Concat, SumTreeNameType<T>, Vec<T::AccountId>, ValueQuery>;

	// Pallets use events to inform users when important changes are made.
	// https://docs.substrate.io/main-docs/build/events-errors/
	#[pallet::event]
	#[pallet::generate_deposit(pub(super) fn deposit_event)]
	pub enum Event<T: Config> {
		/// Event documentation should end with an array that provides descriptive names for event
		/// parameters. [something, who]
		SomethingStored { something: u32, who: T::AccountId },
	}

	// Errors inform users that something went wrong.
	#[pallet::error]
	pub enum Error<T> {
		/// Error names should be descriptive.
		NoneValue,
		/// Errors should have helpful documentation associated with them.
		StorageOverflow,
		PeriodExists,
		EvidencePeriodNotOver,
		StakingPeriodNotOver,
		PeriodIsNotEvidence,
		PeriodIsNotNone,
		MaxJurorNotDrawn,
		CommitPeriodNotOver,
		VotePeriodNotOver,
		PeriodDoesNotExists,
		PeriodDontMatch,
		JurorStakeLessThanMin,
		AlreadyStaked,
		MaxDrawExceeded,
		SelectedAsJuror,
		AlreadyUnstaked,
		StakeDoesNotExists,
		JurorDoesNotExists,
		VoteStatusNotCommited,
		NotValidChoice,
		CommitDoesNotMatch,
		CommitDoesNotExists,
		AlreadyGotIncentives,
		VoteNotRevealed,
		TimeForStakingOver,
		TimeForStakingNotOver,
	}

	// Dispatchable functions allows users to interact with the pallet and invoke state changes.
	// These functions materialize as "extrinsics", which are often compared to transactions.
	// Dispatchable functions must be annotated with a weight and must return a DispatchResult.
	#[pallet::call]
	impl<T: Config> Pallet<T> {
		/// An example dispatchable that takes a singles value as a parameter, writes the value to
		/// storage and emits an event. This function must be dispatched by a signed extrinsic.
		#[pallet::call_index(0)]
		#[pallet::weight(T::WeightInfo::do_something())]
		pub fn do_something(origin: OriginFor<T>, something: u32) -> DispatchResult {
			// Check that the extrinsic was signed and get the signer.
			// This function will return an error if the extrinsic is not signed.
			// https://docs.substrate.io/main-docs/build/origins/
			let who = ensure_signed(origin)?;

			// Update storage.
			<Something<T>>::put(something);

			// Emit an event.
			Self::deposit_event(Event::SomethingStored { something, who });
			// Return a successful DispatchResultWithPostInfo
			Ok(())
		}

		/// An example dispatchable that may throw a custom error.
		#[pallet::call_index(1)]
		#[pallet::weight(T::WeightInfo::cause_error())]
		pub fn cause_error(origin: OriginFor<T>) -> DispatchResult {
			let _who = ensure_signed(origin)?;

			// Read a value from storage.
			match <Something<T>>::get() {
				// Return an error if the value has not been set.
				None => return Err(Error::<T>::NoneValue.into()),
				Some(old) => {
					// Increment the value read from storage; will error in the event of overflow.
					let new = old.checked_add(1).ok_or(Error::<T>::StorageOverflow)?;
					// Update the value in storage with the incremented result.
					<Something<T>>::put(new);
					Ok(())
				},
			}
		}
	}
}

'''
'''--- pallets/schelling-game-shared/src/mock.rs ---
use crate as pallet_template;
use frame_support::traits::{ConstU16, ConstU64};
use sp_core::H256;
use sp_runtime::{
	testing::Header,
	traits::{BlakeTwo256, IdentityLookup},
};

type UncheckedExtrinsic = frame_system::mocking::MockUncheckedExtrinsic<Test>;
type Block = frame_system::mocking::MockBlock<Test>;
use frame_support_test::TestRandomness;

// Configure a mock runtime to test the pallet.
frame_support::construct_runtime!(
	pub enum Test where
		Block = Block,
		NodeBlock = Block,
		UncheckedExtrinsic = UncheckedExtrinsic,
	{
		System: frame_system,
		TemplateModule: pallet_template,
		Balances: pallet_balances,
		SortitionSumGame: sortition_sum_game,
	}
);

impl frame_system::Config for Test {
	type BaseCallFilter = frame_support::traits::Everything;
	type BlockWeights = ();
	type BlockLength = ();
	type DbWeight = ();
	type RuntimeOrigin = RuntimeOrigin;
	type RuntimeCall = RuntimeCall;
	type Index = u64;
	type BlockNumber = u64;
	type Hash = H256;
	type Hashing = BlakeTwo256;
	type AccountId = u64;
	type Lookup = IdentityLookup<Self::AccountId>;
	type Header = Header;
	type RuntimeEvent = RuntimeEvent;
	type BlockHashCount = ConstU64<250>;
	type Version = ();
	type PalletInfo = PalletInfo;
	type OnNewAccount = ();
	type OnKilledAccount = ();
	type SystemWeightInfo = ();
	type SS58Prefix = ConstU16<42>;
	type OnSetCode = ();
	type MaxConsumers = frame_support::traits::ConstU32<16>;
	type AccountData = pallet_balances::AccountData<u64>; // New code
}

impl pallet_template::Config for Test {
	type RuntimeEvent = RuntimeEvent;
	type WeightInfo = ();
	type Currency = Balances; // New code
	type RandomnessSource = TestRandomness<Self>;
	type Slash = ();
	type Reward = ();
	type SortitionSumGameSource = SortitionSumGame;
}

impl sortition_sum_game::Config for Test {
	type RuntimeEvent = RuntimeEvent;
	type WeightInfo = ();
}

impl pallet_balances::Config for Test {
	type MaxLocks = ();
	type MaxReserves = ();
	type ReserveIdentifier = [u8; 8];
	type Balance = u64;
	type DustRemoval = ();
	type RuntimeEvent = RuntimeEvent;
	type ExistentialDeposit = ConstU64<1>;
	type WeightInfo = ();
	type FreezeIdentifier = ();
	type MaxFreezes = ();
	type MaxHolds = ();
	type HoldIdentifier = ();
	type AccountStore = System;
}

// Build genesis storage according to the mock runtime.
pub fn new_test_ext() -> sp_io::TestExternalities {
	let mut t = frame_system::GenesisConfig::default().build_storage::<Test>().unwrap();
	pallet_balances::GenesisConfig::<Test> {
		balances: vec![
			(1, 100000),
			(2, 200000),
			(3, 300000),
			(4, 300000),
			(5, 300000),
			(6, 300000),
			(7, 300000),
			(8, 300000),
			(9, 300000),
			(10, 300000),
			(11, 300000),
			(12, 300000),
			(13, 300000),
			(14, 300000),
			(15, 300000),
			(16, 300000),
			(17, 300000),
			(18, 300000),
			(19, 300000),
			(20, 300000),
			(21, 300000),
			(22, 300000),
			(23, 300000),
			(24, 300000),
			(25, 300000),
			(26, 300000),
			(27, 300000),
			(28, 300000),
			(29, 300000),
			(30, 300000),
			(31, 300000),
			(32, 300000),
			(33, 300000),
			(34, 300000),
			(35, 300000),
		],
	} // new code
	.assimilate_storage(&mut t)
	.unwrap();
	t.into()
}

'''
'''--- pallets/schelling-game-shared/src/score_game.rs ---
use crate::*;
use scale_info::prelude::vec;

impl<T: Config> Pallet<T> {
	/// Commit your score vote
	pub(super) fn commit_vote_for_score_helper(
		key: SumTreeNameType<T>,
		who: AccountIdOf<T>,
		vote_commit: [u8; 32],
	) -> DispatchResult {
		match <PeriodName<T>>::get(&key) {
			Some(period) => {
				ensure!(period == Period::Commit, Error::<T>::PeriodDontMatch);
			},
			None => Err(Error::<T>::PeriodDoesNotExists)?,
		}
		let drawn_jurors = <DrawnJurors<T>>::get(&key);
		match drawn_jurors.binary_search_by(|(c, _)| c.cmp(&who.clone())) {
			Ok(_) => {
				let vote_commit_struct = ScoreCommitVote {
					commit: vote_commit,
					votestatus: VoteStatus::Commited,
					revealed_vote: None,
				};
				<ScoreVoteCommits<T>>::insert(&key, &who, vote_commit_struct);
			},
			Err(_) => Err(Error::<T>::JurorDoesNotExists)?,
		}
		Ok(())
	}

	/// choice is i64. Validate the range of the choice while using the function
	pub(super) fn reveal_vote_score_helper(
		key: SumTreeNameType<T>,
		who: AccountIdOf<T>,
		choice: i64,
		salt: Vec<u8>,
	) -> DispatchResult {
		match <PeriodName<T>>::get(&key) {
			Some(period) => {
				ensure!(period == Period::Vote, Error::<T>::PeriodDontMatch);
			},
			None => Err(Error::<T>::PeriodDoesNotExists)?,
		}
		let who_commit_vote = <ScoreVoteCommits<T>>::get(&key, &who);
		match who_commit_vote {
			Some(mut commit_struct) => {
				ensure!(
					commit_struct.votestatus == VoteStatus::Commited,
					Error::<T>::VoteStatusNotCommited
				);
				let mut vote = format!("{}", choice).as_bytes().to_vec();
				// let mut vote = choice.clone();
				let mut salt_a = salt.clone();
				vote.append(&mut salt_a);
				let vote_bytes: &[u8] = &vote;
				let hash = sp_io::hashing::keccak_256(vote_bytes);
				let commit: &[u8] = &commit_struct.commit;
				if hash == commit {
					let mut reveal_score_values = <RevealScoreValues<T>>::get(&key);
					reveal_score_values.push(choice * 1000);
					<RevealScoreValues<T>>::insert(&key, reveal_score_values);
					commit_struct.revealed_vote = Some(choice);
					commit_struct.votestatus = VoteStatus::Revealed;
					<ScoreVoteCommits<T>>::insert(&key, &who, commit_struct);
				} else {
					Err(Error::<T>::CommitDoesNotMatch)?
				}
			},
			None => Err(Error::<T>::CommitDoesNotExists)?,
		}

		Ok(())
	}

	/// Distribute incentives to all jurors in execution period in score schelling game
	pub(super) fn get_incentives_score_schelling_helper(
		key: SumTreeNameType<T>,
		phase_data: PhaseDataOf<T>,
		range_point: RangePoint,
	) -> DispatchResult {
		match <PeriodName<T>>::get(&key) {
			Some(period) => {
				ensure!(period == Period::Execution, Error::<T>::PeriodDontMatch);
			},
			None => Err(Error::<T>::PeriodDoesNotExists)?,
		}

		let drawn_jurors = <DrawnJurors<T>>::get(&key);
		let reveal_votes_iterator = <ScoreVoteCommits<T>>::iter_prefix(&key);
		let reveal_values = <RevealScoreValues<T>>::get(&key);
		let sd_and_mean = Self::std_deviation_interger(&reveal_values);
		let new_mean = Self::calculate_new_mean(&reveal_values, sd_and_mean).unwrap();
		// println!("new mean: {:?}", new_mean);
		<IncentiveMeanRevealScore<T>>::insert(key.clone(), new_mean);
		let incentives_range = Self::get_incentives_range(range_point);
		let mut reveal_votes = reveal_votes_iterator
			.map(|(account_id, score_commit_vote)| (account_id, score_commit_vote.revealed_vote))
			.collect::<Vec<(_, _)>>();
		reveal_votes.sort_by(|a, b| a.0.cmp(&b.0));

		
		// println!("reveal votes, {:?}",reveal_votes);
		let mut winners = vec![];
		for juror in drawn_jurors {
			match reveal_votes.binary_search_by(|(c, _)| c.cmp(&juror.0)) {
				Ok(index) => {
					// println!("Ok index {:?}", index);
					let account_n_vote = &reveal_votes[index];
					if let Some(i) = account_n_vote.1 {
						// println!("vote {:?}", i);
						if i*1000 >= new_mean.checked_sub(incentives_range).unwrap()
							&&  i*1000  <= new_mean.checked_add(incentives_range).unwrap()
						{
							// get incentives
							winners.push((juror.0.clone(), juror.1.clone()));
						} else {
							// deduct incentives
							let stake = juror.1;
							let balance = Self::u64_to_balance_saturated(stake * 3 / 4);
							let r =
								T::Currency::deposit_into_existing(&juror.0, balance).ok().unwrap();
							T::Reward::on_unbalanced(r);
						}
					}
				},
				Err(_) => {
					// println!("Err index {:?}", index);
				},
			}
		}

		let winners_len = winners.len() as u64;
		// println!("winners_len {}", winners_len);
		let incentives_tuple = phase_data.juror_incentives;
		let winning_incentives = incentives_tuple.1.checked_div(winners_len).expect("oveflow");
		for winner in winners {
			let total_incentives = winner.1.checked_add(winning_incentives).expect("overflow");
			let incentives = Self::u64_to_balance_saturated(total_incentives);
			let r = T::Currency::deposit_into_existing(&winner.0, incentives).ok().unwrap();
			T::Reward::on_unbalanced(r);
		}

		// Remove all data

		// Remove SorititionSumTrees in `sortition-sum-game` pallet
		let _result = T::SortitionSumGameSource::remove_tree_link(key.clone());

		// Remove DrawnJurors
		<DrawnJurors<T>>::remove(&key);

		// Remove UnstakedJurors (all jurors can be returned their incentives at a time)
	

		// Remove ScoreVoteCommits
		<ScoreVoteCommits<T>>::remove_prefix(key.clone(), None); // Deprecated: Use clear_prefix instead
		// let reveal_votes_iterator2 = <ScoreVoteCommits<T>>::iter_prefix(&key);
		// reveal_votes_iterator2.for_each(|(account_id, _)|{
		// 	<ScoreVoteCommits<T>>::remove(key.clone(), account_id);
		// });

		// Remove RevealScoreValues
		<RevealScoreValues<T>>::remove(&key);

		Ok(())
	}

   
   pub(super) fn get_mean_value(key: SumTreeNameType<T>) -> i64 {
	  let value = 	<IncentiveMeanRevealScore<T>>::get(key.clone());
	  value
   }

	/// Calculate the mean of integer
	pub(super) fn mean_integer(data: &Vec<i64>) -> Option<i64> {
		let data_mul_sum = data.iter().sum::<i64>();
		let count = data.len();

		match count {
			positive if positive > 0 => Some(data_mul_sum / count as i64),
			_ => None,
		}
	}

	pub(super) fn std_deviation_interger(data: &Vec<i64>) -> Option<(i64, i64)> {
		let mean = Self::mean_integer(data);
		match (mean, data.len()) {
			(Some(data_mean), count) if count > 0 => {
				let variance = data
					.iter()
					.map(|value| {
						let diff = data_mean.checked_sub(*value as i64).unwrap();
						diff * diff
					})
					.sum::<i64>() / count as i64;

				Some((variance.sqrt(), mean.unwrap()))
			},
			_ => None,
		}
	}

	pub(super) fn calculate_new_mean(
		data: &Vec<i64>,
		sd_and_mean: Option<(i64, i64)>,
	) -> Option<i64> {
		let mut new_items = vec![];
		let mean = sd_and_mean.unwrap().1;
		let sd = sd_and_mean.unwrap().0;
		for x in data {
			if *x >= mean.checked_sub(sd).unwrap() && *x <= mean.checked_add(sd).unwrap() {
				new_items.push(*x);
			}
		}
		let new_mean = Self::mean_integer(&new_items);
		new_mean
	}

	pub(super) fn get_incentives_range(range_point: RangePoint) -> i64 {
		match range_point {
			RangePoint::ZeroToTen => 1500, //3 points,  1.5 ± mean, multiply by 1000 to make it integer
			RangePoint::MinusTenToPlusTen => 3000, //6 points, 3 ± mean
			RangePoint::ZeroToFive => 750, //1.5 points, 0.75 ± mean
		}
	}
}

'''
'''--- pallets/schelling-game-shared/src/share_link.rs ---
use crate::*;

use schelling_game_shared_link::SchellingGameSharedLink;

impl<T: Config> SchellingGameSharedLink for Pallet<T> {
	type SumTreeName = SumTreeNameType<T>;
	type SchellingGameType = SchellingGameType;
	type BlockNumber = BlockNumberOf<T>;
	type AccountId = AccountIdOf<T>;
	type Balance = BalanceOf<T>;
	type RangePoint = RangePoint;
	type Period = Period;
	type PhaseData = PhaseDataOf<T>;
	type WinningDecision = WinningDecision;

	fn create_phase_data(
		block_length: u64,
		max_draws: u64,
		min_number_juror_staked: u64,
		min_juror_stake: u64,
		juror_incentives: (u64, u64),
	) -> Self::PhaseData {
		Self::create_phase_data(
			block_length,
			max_draws,
			min_number_juror_staked,
			min_juror_stake,
			juror_incentives,
		)
	}

	fn create_phase_with_all_data(
		evidence_length: u64,
		end_of_staking_time: u64,
		staking_length: u64,
		drawing_length: u64,
		commit_length: u64,
		vote_length: u64,
		appeal_length: u64,
		max_draws: u64,
		min_number_juror_staked: u64,
		min_juror_stake: u64,
		juror_incentives: (u64, u64),
	) -> Self::PhaseData {
		Self::create_phase_with_all_data(
			evidence_length,
			end_of_staking_time,
			staking_length,
			drawing_length,
			commit_length,
			vote_length,
			appeal_length,
			max_draws,
			min_number_juror_staked,
			min_juror_stake,
			juror_incentives,
		)
	}

	/// Get the Period
	fn get_period_link(key: Self::SumTreeName) -> Option<Period> {
		Self::get_period(key)
	}

	/// Set `PeriodName` to `Period::Evidence`
	/// Called with submission of `Evidence` stake e.g. Profile stake
	/// Also set `EvidenceStartTime`    
	fn set_to_evidence_period_link(
		key: Self::SumTreeName,
		now: Self::BlockNumber,
	) -> DispatchResult {
		Self::set_to_evidence_period(key, now)
	}

	/// Create a sortition sum tree   
	fn create_tree_helper_link(key: Self::SumTreeName, k: u64) -> DispatchResult {
		Self::create_tree_link_helper(key, k)
	}

	/// Check `Period` is `Evidence`, and change it to `Staking`   
	/// It is called with function that submits challenge stake after `end_block` of evidence period  
	/// Checks evidence period is over
	#[doc=include_str!("docimage/set_to_staking_period_1.svg")]
	/// ```ignore
	/// if time >= block_time.min_short_block_length {
	///        // change `Period` to `Staking`
	///  }
	/// ```
	fn set_to_staking_period_link(
		key: Self::SumTreeName,
		phase_data: Self::PhaseData,
		now: Self::BlockNumber,
	) -> DispatchResult {
		Self::set_to_staking_period(key, phase_data, now)
	}

	fn ensure_time_for_staking_over_link(
		key: Self::SumTreeName,
		phase_data: Self::PhaseData,
		now: Self::BlockNumber,
	) -> DispatchResult {
		Self::ensure_time_for_staking_over(key, phase_data, now)
	}

	fn set_to_staking_period_pe_link(
		key: Self::SumTreeName,
		now: Self::BlockNumber,
	) -> DispatchResult {
		Self::set_to_staking_period_pe(key, now)
	}

	/// Change the `Period`
	///    
	/// `Period::Staking` to `Period::Drawing`
	#[doc=include_str!("docimage/change_period_link_1.svg")]
	/// ```ignore
	/// if now >= min_long_block_length + staking_start_time {
	///   // Change `Period::Staking` to `Period::Drawing`   
	/// }
	/// ```
	///
	///  `Period::Drawing` to `Period::Commit`   
	/// When maximum juror are drawn   
	///  
	/// `Period::Commit` to `Period::Vote`       
	/// ```ignore
	/// if now >= min_long_block_length + commit_start_time {
	///   // Change `Period::Commit` to `Period::Vote`  
	/// }
	/// ```
	///
	/// `Period::Vote` to `Period::Execution`   
	/// ```ignore
	/// if now >= min_long_block_length + vote_start_time {
	///   // Change `Period::Vote` to `Period::Execution`   
	/// }
	/// ```   
	fn change_period_link(
		key: Self::SumTreeName,
		phase_data: Self::PhaseData,
		now: Self::BlockNumber,
	) -> DispatchResult {
		Self::change_period(key, phase_data, now)
	}

	/// Apply Jurors      
	/// Ensure `Period` is `Staking`      
	/// Slash the stake.   
	/// Store the stake on sortition sum tree if doesn't exists.   
	fn apply_jurors_helper_link(
		key: Self::SumTreeName,
		phase_data: Self::PhaseData,
		who: Self::AccountId,
		stake: Self::Balance,
	) -> DispatchResult {
		Self::apply_jurors_helper(key, phase_data, who, stake)
	}

	/// Draw Jurors  
	/// Ensure `Period` is `Drawing`  
	/// `iterations` is number of jurors drawn per call  
	/// Ensure total draws `draws_in_round` is less than `max_draws`
	fn draw_jurors_helper_link(
		key: Self::SumTreeName,
		phase_data: Self::PhaseData,
		iterations: u64,
	) -> DispatchResult {
		Self::draw_jurors_helper(key, phase_data, iterations)
	}

	/// Unstake those who are not drawn as jurors   
	/// They can withdraw their stake   
	fn unstaking_helper_link(key: Self::SumTreeName, who: Self::AccountId) -> DispatchResult {
		Self::unstaking_helper(key, who)
	}

	/// Commit vote   
	fn commit_vote_helper_link(
		key: Self::SumTreeName,
		who: Self::AccountId,
		vote_commit: [u8; 32],
	) -> DispatchResult {
		Self::commit_vote_helper(key, who, vote_commit)
	}

	/// Reveal vote   
	/// There are two vote choices 0 or 1  
	fn reveal_vote_two_choice_helper_link(
		key: Self::SumTreeName,
		who: Self::AccountId,
		choice: u128,
		salt: Vec<u8>,
	) -> DispatchResult {
		Self::reveal_vote_two_choice_helper(key, who, choice, salt)
	}
	/// Distribute incentives for two choices        
	/// Winner gets `stake` + `winning_incentives`      
	/// If decision is draw, jurors receive their `stake`    
	/// Lost jurors gets `stake * 3/4`   
	/// When they receive their incentives, their accountid is stored in `JurorsIncentiveDistributedAccounts`        
	fn get_incentives_two_choice_helper_link(
		key: Self::SumTreeName,
		phase_data: Self::PhaseData,
		who: Self::AccountId,
	) -> DispatchResult {
		Self::get_incentives_two_choice_helper(key, phase_data, who)
	}

	/// Blocks left for ending evidence period
	/// When evidence time ends, you can submit the challenge stake    
	/// `start_block_number` evidence start time which you will get from `EvidenceStartTime`    
	fn get_evidence_period_end_block_helper_link(
		key: Self::SumTreeName,
		phase_data: Self::PhaseData,
		now: Self::BlockNumber,
	) -> Option<u32> {
		Self::get_evidence_period_end_block_helper(key, phase_data, now)
	}

	/// Blocks left for ending staking period  
	fn get_staking_period_end_block_helper_link(
		key: Self::SumTreeName,
		phase_data: Self::PhaseData,
		now: Self::BlockNumber,
	) -> Option<u32> {
		Self::get_staking_period_end_block_helper(key, phase_data, now)
	}

	/// Return true when drawing period is over, otherwise false   
	fn get_drawing_period_end_helper_link(
		key: Self::SumTreeName,
		phase_data: Self::PhaseData,
	) -> (u64, u64, bool) {
		Self::get_drawing_period_end_helper(key, phase_data)
	}

	/// Blocks left for ending drawing period
	fn get_commit_period_end_block_helper_link(
		key: Self::SumTreeName,
		phase_data: Self::PhaseData,
		now: Self::BlockNumber,
	) -> Option<u32> {
		Self::get_commit_period_end_block_helper(key, phase_data, now)
	}

	/// Blocks left for ending vote period
	fn get_vote_period_end_block_helper_link(
		key: Self::SumTreeName,
		phase_data: Self::PhaseData,
		now: Self::BlockNumber,
	) -> Option<u32> {
		Self::get_vote_period_end_block_helper(key, phase_data, now)
	}

	/// Check if `AccountId` is selected as juror
	fn selected_as_juror_helper_link(key: Self::SumTreeName, who: Self::AccountId) -> bool {
		Self::selected_as_juror_helper(key, who)
	}

	/// Commit vote for score schelling game
	fn commit_vote_for_score_helper_link(
		key: Self::SumTreeName,
		who: Self::AccountId,
		vote_commit: [u8; 32],
	) -> DispatchResult {
		Self::commit_vote_for_score_helper(key, who, vote_commit)
	}

	/// Reveal vote for score schelling game
	fn reveal_vote_score_helper_link(
		key: Self::SumTreeName,
		who: Self::AccountId,
		choice: i64,
		salt: Vec<u8>,
	) -> DispatchResult {
		Self::reveal_vote_score_helper(key, who, choice, salt)
	}

	/// Distribute incentives to all score schelling game jurors
	fn get_incentives_score_schelling_helper_link(
		key: Self::SumTreeName,
		phase_data: Self::PhaseData,
		range_point: Self::RangePoint,
	) -> DispatchResult {
		Self::get_incentives_score_schelling_helper(key, phase_data, range_point)
	}

	/// Get new mean in score schelling game
	fn get_mean_value_link(key: Self::SumTreeName) -> i64 {
		Self::get_mean_value(key)
	}

	/// Distribute incentives to all two choice shelling game jurors
	fn get_all_incentives_two_choice_helper(
		key: Self::SumTreeName,
		phase_data: Self::PhaseData,
	) -> DispatchResult {
		Self::get_all_incentives_two_choice_helper(key, phase_data)
	}

	fn get_drawn_jurors(key: Self::SumTreeName) -> Vec<(Self::AccountId, u64)> {
		Self::drawn_jurors(key)
	}

	fn get_winning_decision_value_link(key: Self::SumTreeName) -> WinningDecision {
		Self::get_winning_decision_value(key)
	}
}

'''
'''--- pallets/schelling-game-shared/src/tests.rs ---
use crate::{
	mock::*,
	types::{Period, PhaseData, RangePoint, SchellingGameType},
	Error, Event,
};
use frame_support::{assert_noop, assert_ok};

use sortition_sum_game::types::SumTreeName;

type CitizenId = u64;

fn return_key_profile(citizen_id: CitizenId) -> SumTreeName<u64, u64> {
	let key = SumTreeName::ProfileValidation { citizen_address: citizen_id, block_number: 10 };
	key
}

fn return_game_type_profile_approval() -> SchellingGameType {
	SchellingGameType::ProfileApproval
}

fn get_the_phase_data() -> PhaseData<Test> {
	let data = PhaseData::create_with_data(50, 5, 3, 100, (100, 100));
	data
}

#[test]
fn it_works_for_default_value() {
	new_test_ext().execute_with(|| {
		// Go past genesis block so events get deposited
		System::set_block_number(1);
		// Dispatch a signed extrinsic.
		assert_ok!(TemplateModule::do_something(RuntimeOrigin::signed(1), 42));
		// Read pallet storage and assert an expected result.
		assert_eq!(TemplateModule::something(), Some(42));
		// Assert that the correct event was deposited
		System::assert_last_event(Event::SomethingStored { something: 42, who: 1 }.into());
	});
}

#[test]
fn correct_error_for_none_value() {
	new_test_ext().execute_with(|| {
		// Ensure the expected error is thrown when no value is present.
		assert_noop!(
			TemplateModule::cause_error(RuntimeOrigin::signed(1)),
			Error::<Test>::NoneValue
		);
	});
}

#[test]
fn evidence_period_not_over_test() {
	new_test_ext().execute_with(|| {
		let key = return_key_profile(0);
		let now = 10;
		assert_ok!(TemplateModule::set_to_evidence_period(key.clone(), now));
		assert_eq!(TemplateModule::get_period(&key).unwrap(), Period::Evidence);
		let phase_data = get_the_phase_data();
		let now2 = now + phase_data.evidence_length - 1;
		assert_noop!(
			TemplateModule::set_to_staking_period(key.clone(), phase_data, now2),
			Error::<Test>::EvidencePeriodNotOver
		);
	});
}

/// 1) Set evidence period  
/// 2) Set staking period
/// 3) Create tree
#[test]
fn evidence_period_test() {
	new_test_ext().execute_with(|| {
		let key = return_key_profile(0);
		let now = 10;
		assert_ok!(TemplateModule::set_to_evidence_period(key.clone(), now));
		assert_eq!(TemplateModule::get_period(&key).unwrap(), Period::Evidence);
		let phase_data = get_the_phase_data();
		let now2 = now + phase_data.evidence_length;
		assert_ok!(TemplateModule::set_to_staking_period(key.clone(), phase_data, now2));
		// Create tree
		assert_ok!(TemplateModule::create_tree_link_helper(key.clone(), 3));
	});
}

/// End of staking period

#[test]
fn end_of_time_staking_period() {
	new_test_ext().execute_with(|| {
		let key = return_key_profile(0);
		let now = 10;
		assert_ok!(TemplateModule::set_to_evidence_period(key.clone(), now));
		assert_eq!(TemplateModule::get_period(&key).unwrap(), Period::Evidence);
		let phase_data = get_the_phase_data();
		let now2 = now + phase_data.evidence_length + phase_data.end_of_staking_time - 1;
		assert_ok!(TemplateModule::set_to_staking_period(key.clone(), phase_data, now2));
		let phase_data = get_the_phase_data();
		let now2 = now + phase_data.evidence_length + phase_data.end_of_staking_time;
		assert_noop!(
			TemplateModule::set_to_staking_period(key.clone(), phase_data, now2),
			Error::<Test>::PeriodIsNotEvidence
		);
	});
}

/// Check time for staking over
#[test]
fn check_time_for_staking_not_over_test() {
	new_test_ext().execute_with(|| {
		let key = return_key_profile(0);
		let now = 10;
		assert_ok!(TemplateModule::set_to_evidence_period(key.clone(), now));
		assert_eq!(TemplateModule::get_period(&key).unwrap(), Period::Evidence);
		let phase_data = get_the_phase_data();
		let now2 = now + phase_data.evidence_length + phase_data.end_of_staking_time - 1;
		assert_noop!(
			TemplateModule::ensure_time_for_staking_over(key.clone(), phase_data, now2),
			Error::<Test>::TimeForStakingNotOver
		);
		let phase_data = get_the_phase_data();
		let now = now + phase_data.evidence_length + phase_data.end_of_staking_time;
		assert_ok!(TemplateModule::ensure_time_for_staking_over(key.clone(), phase_data, now));
	});
}

#[test]
fn apply_juror() {
	new_test_ext().execute_with(|| {
		let key = return_key_profile(0);
		let now = 10;
		assert_ok!(TemplateModule::set_to_evidence_period(key.clone(), now));
		assert_eq!(TemplateModule::get_period(&key).unwrap(), Period::Evidence);
		let phase_data = get_the_phase_data();
		let now2 = now + phase_data.evidence_length;
		assert_ok!(TemplateModule::set_to_staking_period(key.clone(), phase_data.clone(), now2));
		// Create tree
		assert_ok!(TemplateModule::create_tree_link_helper(key.clone(), 3));
		// Check the period is staking
		let period = TemplateModule::get_period(key.clone());
		// println!("{:?}", period);
		assert_eq!(Some(Period::Staking), period);
		// Applyjuror
		for j in 4..30 {
			assert_ok!(TemplateModule::apply_jurors_helper(
				key.clone(),
				phase_data.clone(),
				j,
				j * 100
			));
		}
	});
}

#[test]
fn challenger_win_test() {
	new_test_ext().execute_with(|| {
		let key = return_key_profile(0);
		let now = 10;
		assert_ok!(TemplateModule::set_to_evidence_period(key.clone(), now));
		assert_eq!(TemplateModule::get_period(&key).unwrap(), Period::Evidence);
		let phase_data = get_the_phase_data();

		let staking_start_time = now + phase_data.evidence_length;
		assert_ok!(TemplateModule::set_to_staking_period(
			key.clone(),
			phase_data.clone(),
			staking_start_time
		));
		// Create tree
		assert_ok!(TemplateModule::create_tree_link_helper(key.clone(), 3));
		// Check the period is staking
		let period = TemplateModule::get_period(key.clone());
		// println!("{:?}", period);
		assert_eq!(Some(Period::Staking), period);
		// Applyjuror
		for j in 4..30 {
			assert_ok!(TemplateModule::apply_jurors_helper(
				key.clone(),
				phase_data.clone(),
				j,
				j * 100
			));
		}
		let new_now = staking_start_time + phase_data.staking_length;
		assert_ok!(TemplateModule::change_period(key.clone(), phase_data.clone(), new_now.clone()));
		let period = TemplateModule::get_period(key.clone());
		assert_eq!(Some(Period::Drawing), period);
		assert_ok!(TemplateModule::draw_jurors_helper(key.clone(), phase_data.clone(), 5));
		let draws_in_round = TemplateModule::draws_in_round(key.clone());
		assert_eq!(5, draws_in_round);
		let drawn_jurors = TemplateModule::drawn_jurors(key.clone());
		assert_eq!(vec![(4, 400), (7, 700), (13, 1300), (14, 1400), (15, 1500)], drawn_jurors);
		assert_ok!(TemplateModule::change_period(key.clone(), phase_data.clone(), new_now.clone()));
		let balance = Balances::free_balance(5);
		assert_eq!(299500, balance);
		assert_ok!(TemplateModule::unstaking_helper(key.clone(), 5));
		let balance = Balances::free_balance(5);
		assert_eq!(300000, balance);
		let hash = sp_io::hashing::keccak_256("1salt".as_bytes());
		assert_ok!(TemplateModule::commit_vote_helper(key.clone(), 4, hash));
		let hash = sp_io::hashing::keccak_256("1salt2".as_bytes());
		assert_ok!(TemplateModule::commit_vote_helper(key.clone(), 7, hash));
		let hash = sp_io::hashing::keccak_256("1salt3".as_bytes());
		assert_ok!(TemplateModule::commit_vote_helper(key.clone(), 13, hash));
		let hash = sp_io::hashing::keccak_256("1salt4".as_bytes());
		assert_ok!(TemplateModule::commit_vote_helper(key.clone(), 14, hash));
		let hash = sp_io::hashing::keccak_256("0salt5".as_bytes());
		assert_ok!(TemplateModule::commit_vote_helper(key.clone(), 15, hash));
		let commit_start_time = TemplateModule::commit_start_time(key.clone());
		let new_now = commit_start_time + phase_data.commit_length;
		assert_ok!(TemplateModule::change_period(key.clone(), phase_data.clone(), new_now.clone()));
		let period = TemplateModule::get_period(key.clone());
		assert_eq!(Some(Period::Vote), period);
		assert_ok!(TemplateModule::reveal_vote_two_choice_helper(
			key.clone(),
			4,
			1,
			"salt".as_bytes().to_vec()
		));
		assert_ok!(TemplateModule::reveal_vote_two_choice_helper(
			key.clone(),
			7,
			1,
			"salt2".as_bytes().to_vec()
		));
		assert_ok!(TemplateModule::reveal_vote_two_choice_helper(
			key.clone(),
			13,
			1,
			"salt3".as_bytes().to_vec()
		));
		assert_ok!(TemplateModule::reveal_vote_two_choice_helper(
			key.clone(),
			14,
			1,
			"salt4".as_bytes().to_vec()
		));
		assert_ok!(TemplateModule::reveal_vote_two_choice_helper(
			key.clone(),
			15,
			0,
			"salt5".as_bytes().to_vec()
		));
		let decision = TemplateModule::decision_count(key.clone());
		assert_eq!((1, 4), decision);
		let vote_start_time = TemplateModule::vote_start_time(key.clone());
		let new_now = vote_start_time + phase_data.vote_length;
		assert_ok!(TemplateModule::change_period(key.clone(), phase_data.clone(), new_now.clone()));
		let period = TemplateModule::get_period(key.clone());
		assert_eq!(Some(Period::Execution), period);

		let balance = Balances::free_balance(4);
		assert_eq!(299600, balance);
		assert_ok!(TemplateModule::get_incentives_two_choice_helper(
			key.clone(),
			phase_data.clone(),
			4
		));
		let balance = Balances::free_balance(4);
		assert_eq!(300025, balance);
		let balance = Balances::free_balance(7);
		// println!("{:?}", balance);
		assert_eq!(299300, balance);
		assert_ok!(TemplateModule::get_incentives_two_choice_helper(
			key.clone(),
			phase_data.clone(),
			7
		));
		let balance = Balances::free_balance(7);
		assert_eq!(300025, balance);
		let balance = Balances::free_balance(13);
		assert_eq!(298700, balance);
		assert_ok!(TemplateModule::get_incentives_two_choice_helper(
			key.clone(),
			phase_data.clone(),
			13
		));
		let balance = Balances::free_balance(13);
		assert_eq!(300025, balance);
		let balance = Balances::free_balance(14);
		assert_eq!(298600, balance);
		assert_ok!(TemplateModule::get_incentives_two_choice_helper(
			key.clone(),
			phase_data.clone(),
			14
		));
		let balance = Balances::free_balance(14);
		assert_eq!(300025, balance);
		let balance = Balances::free_balance(15);
		assert_eq!(298500, balance);
		assert_ok!(TemplateModule::get_incentives_two_choice_helper(
			key.clone(),
			phase_data.clone(),
			15
		));
		let balance = Balances::free_balance(15);
		assert_eq!(299625, balance);
	});
}

#[test]
fn challenger_win_test_jurors_incentive_in_one_go() {
	new_test_ext().execute_with(|| {
		let key = return_key_profile(0);
		let now = 10;
		assert_ok!(TemplateModule::set_to_evidence_period(key.clone(), now));
		assert_eq!(TemplateModule::get_period(&key).unwrap(), Period::Evidence);
		let game_type = return_game_type_profile_approval();

		// let min_short_block_length = return_min_short_block_length();
		// let min_long_block_length = return_min_long_block_length();

		let phase_data = get_the_phase_data();

		let staking_start_time = now + phase_data.staking_length;
		assert_ok!(TemplateModule::set_to_staking_period(
			key.clone(),
			phase_data.clone(),
			staking_start_time
		));
		// Create tree
		assert_ok!(TemplateModule::create_tree_link_helper(key.clone(), 3));
		// Check the period is staking
		let period = TemplateModule::get_period(key.clone());
		// println!("{:?}", period);
		assert_eq!(Some(Period::Staking), period);
		// Applyjuror
		for j in 4..30 {
			assert_ok!(TemplateModule::apply_jurors_helper(
				key.clone(),
				phase_data.clone(),
				j,
				j * 100
			));
		}
		let new_now = staking_start_time + phase_data.staking_length;
		assert_ok!(TemplateModule::change_period(key.clone(), phase_data.clone(), new_now.clone()));
		let period = TemplateModule::get_period(key.clone());
		assert_eq!(Some(Period::Drawing), period);
		assert_ok!(TemplateModule::draw_jurors_helper(key.clone(), phase_data.clone(), 5));
		let draws_in_round = TemplateModule::draws_in_round(key.clone());
		assert_eq!(5, draws_in_round);
		let drawn_jurors = TemplateModule::drawn_jurors(key.clone());
		assert_eq!(vec![(4, 400), (7, 700), (13, 1300), (14, 1400), (15, 1500)], drawn_jurors);
		assert_ok!(TemplateModule::change_period(key.clone(), phase_data.clone(), new_now.clone()));
		let balance = Balances::free_balance(5);
		assert_eq!(299500, balance);
		assert_ok!(TemplateModule::unstaking_helper(key.clone(), 5));
		let balance = Balances::free_balance(5);
		assert_eq!(300000, balance);
		let hash = sp_io::hashing::keccak_256("1salt".as_bytes());
		assert_ok!(TemplateModule::commit_vote_helper(key.clone(), 4, hash));
		let hash = sp_io::hashing::keccak_256("1salt2".as_bytes());
		assert_ok!(TemplateModule::commit_vote_helper(key.clone(), 7, hash));
		let hash = sp_io::hashing::keccak_256("1salt3".as_bytes());
		assert_ok!(TemplateModule::commit_vote_helper(key.clone(), 13, hash));
		let hash = sp_io::hashing::keccak_256("1salt4".as_bytes());
		assert_ok!(TemplateModule::commit_vote_helper(key.clone(), 14, hash));
		let hash = sp_io::hashing::keccak_256("0salt5".as_bytes());
		assert_ok!(TemplateModule::commit_vote_helper(key.clone(), 15, hash));
		let commit_start_time = TemplateModule::commit_start_time(key.clone());
		let new_now = commit_start_time + phase_data.commit_length;
		assert_ok!(TemplateModule::change_period(key.clone(), phase_data.clone(), new_now.clone()));
		let period = TemplateModule::get_period(key.clone());
		assert_eq!(Some(Period::Vote), period);
		assert_ok!(TemplateModule::reveal_vote_two_choice_helper(
			key.clone(),
			4,
			1,
			"salt".as_bytes().to_vec()
		));
		assert_ok!(TemplateModule::reveal_vote_two_choice_helper(
			key.clone(),
			7,
			1,
			"salt2".as_bytes().to_vec()
		));
		assert_ok!(TemplateModule::reveal_vote_two_choice_helper(
			key.clone(),
			13,
			1,
			"salt3".as_bytes().to_vec()
		));
		assert_ok!(TemplateModule::reveal_vote_two_choice_helper(
			key.clone(),
			14,
			1,
			"salt4".as_bytes().to_vec()
		));
		assert_ok!(TemplateModule::reveal_vote_two_choice_helper(
			key.clone(),
			15,
			0,
			"salt5".as_bytes().to_vec()
		));
		let decision = TemplateModule::decision_count(key.clone());
		assert_eq!((1, 4), decision);
		let vote_start_time = TemplateModule::vote_start_time(key.clone());
		let new_now = vote_start_time + phase_data.vote_length;
		assert_ok!(TemplateModule::change_period(key.clone(), phase_data.clone(), new_now.clone()));
		let period = TemplateModule::get_period(key.clone());
		assert_eq!(Some(Period::Execution), period);
		let balance = Balances::free_balance(4);
		assert_eq!(299600, balance);
		let balance = Balances::free_balance(7);
		// println!("{:?}", balance);
		assert_eq!(299300, balance);
		let balance = Balances::free_balance(13);
		assert_eq!(298700, balance);
		let balance = Balances::free_balance(14);
		assert_eq!(298600, balance);
		let balance = Balances::free_balance(15);
		assert_eq!(298500, balance);
		assert_ok!(TemplateModule::get_all_incentives_two_choice_helper(
			key.clone(),
			phase_data.clone()
		));
		let balance = Balances::free_balance(4);
		assert_eq!(300025, balance);
		let balance = Balances::free_balance(7);
		assert_eq!(300025, balance);
		let balance = Balances::free_balance(13);
		assert_eq!(300025, balance);
		let balance = Balances::free_balance(14);
		assert_eq!(300025, balance);
		let balance = Balances::free_balance(15);
		assert_eq!(299625, balance);
	});
}

#[test]
fn challenger_lost_test() {
	new_test_ext().execute_with(|| {
		let key = return_key_profile(0);
		let now = 10;
		assert_ok!(TemplateModule::set_to_evidence_period(key.clone(), now));
		assert_eq!(TemplateModule::get_period(&key).unwrap(), Period::Evidence);
		// let game_type = return_game_type_profile_approval();
		let phase_data = get_the_phase_data();

		// let min_short_block_length = return_min_short_block_length();
		// let min_long_block_length = return_min_long_block_length();
		let staking_start_time = now + phase_data.staking_length;
		assert_ok!(TemplateModule::set_to_staking_period(
			key.clone(),
			phase_data.clone(),
			staking_start_time
		));
		// Create tree
		assert_ok!(TemplateModule::create_tree_link_helper(key.clone(), 3));
		// Check the period is staking
		let period = TemplateModule::get_period(key.clone());
		// println!("{:?}", period);
		assert_eq!(Some(Period::Staking), period);
		// Applyjuror
		for j in 4..30 {
			assert_ok!(TemplateModule::apply_jurors_helper(
				key.clone(),
				phase_data.clone(),
				j,
				j * 100
			));
		}
		let new_now = staking_start_time + phase_data.staking_length;
		assert_ok!(TemplateModule::change_period(key.clone(), phase_data.clone(), new_now.clone()));
		let period = TemplateModule::get_period(key.clone());
		assert_eq!(Some(Period::Drawing), period);
		assert_ok!(TemplateModule::draw_jurors_helper(key.clone(), phase_data.clone(), 5));
		let draws_in_round = TemplateModule::draws_in_round(key.clone());
		assert_eq!(5, draws_in_round);
		let drawn_jurors = TemplateModule::drawn_jurors(key.clone());
		assert_eq!(vec![(4, 400), (7, 700), (13, 1300), (14, 1400), (15, 1500)], drawn_jurors);
		assert_ok!(TemplateModule::change_period(key.clone(), phase_data.clone(), new_now.clone()));
		let balance = Balances::free_balance(5);
		assert_eq!(299500, balance);
		assert_ok!(TemplateModule::unstaking_helper(key.clone(), 5));
		let balance = Balances::free_balance(5);
		assert_eq!(300000, balance);
		let hash = sp_io::hashing::keccak_256("0salt".as_bytes());
		assert_ok!(TemplateModule::commit_vote_helper(key.clone(), 4, hash));
		let hash = sp_io::hashing::keccak_256("0salt2".as_bytes());
		assert_ok!(TemplateModule::commit_vote_helper(key.clone(), 7, hash));
		let hash = sp_io::hashing::keccak_256("0salt3".as_bytes());
		assert_ok!(TemplateModule::commit_vote_helper(key.clone(), 13, hash));
		let hash = sp_io::hashing::keccak_256("0salt4".as_bytes());
		assert_ok!(TemplateModule::commit_vote_helper(key.clone(), 14, hash));
		let hash = sp_io::hashing::keccak_256("1salt5".as_bytes());
		assert_ok!(TemplateModule::commit_vote_helper(key.clone(), 15, hash));
		let commit_start_time = TemplateModule::commit_start_time(key.clone());
		let new_now = commit_start_time + phase_data.commit_length;
		assert_ok!(TemplateModule::change_period(key.clone(), phase_data.clone(), new_now.clone()));
		let period = TemplateModule::get_period(key.clone());
		assert_eq!(Some(Period::Vote), period);
		assert_ok!(TemplateModule::reveal_vote_two_choice_helper(
			key.clone(),
			4,
			0,
			"salt".as_bytes().to_vec()
		));
		assert_ok!(TemplateModule::reveal_vote_two_choice_helper(
			key.clone(),
			7,
			0,
			"salt2".as_bytes().to_vec()
		));
		assert_ok!(TemplateModule::reveal_vote_two_choice_helper(
			key.clone(),
			13,
			0,
			"salt3".as_bytes().to_vec()
		));
		assert_ok!(TemplateModule::reveal_vote_two_choice_helper(
			key.clone(),
			14,
			0,
			"salt4".as_bytes().to_vec()
		));
		assert_ok!(TemplateModule::reveal_vote_two_choice_helper(
			key.clone(),
			15,
			1,
			"salt5".as_bytes().to_vec()
		));
		let decision = TemplateModule::decision_count(key.clone());
		assert_eq!((4, 1), decision);
		let vote_start_time = TemplateModule::vote_start_time(key.clone());
		let new_now = vote_start_time + phase_data.vote_length;
		assert_ok!(TemplateModule::change_period(key.clone(), phase_data.clone(), new_now.clone()));
		let period = TemplateModule::get_period(key.clone());
		assert_eq!(Some(Period::Execution), period);

		let balance = Balances::free_balance(4);
		assert_eq!(299600, balance);
		assert_ok!(TemplateModule::get_incentives_two_choice_helper(
			key.clone(),
			phase_data.clone(),
			4
		));
		let balance = Balances::free_balance(4);
		assert_eq!(300025, balance);
		let balance = Balances::free_balance(7);
		// println!("{:?}", balance);
		assert_eq!(299300, balance);
		assert_ok!(TemplateModule::get_incentives_two_choice_helper(
			key.clone(),
			phase_data.clone(),
			7
		));
		let balance = Balances::free_balance(7);
		assert_eq!(300025, balance);
		let balance = Balances::free_balance(13);
		assert_eq!(298700, balance);
		assert_ok!(TemplateModule::get_incentives_two_choice_helper(
			key.clone(),
			phase_data.clone(),
			13
		));
		let balance = Balances::free_balance(13);
		assert_eq!(300025, balance);
		let balance = Balances::free_balance(14);
		assert_eq!(298600, balance);
		assert_ok!(TemplateModule::get_incentives_two_choice_helper(
			key.clone(),
			phase_data.clone(),
			14
		));
		let balance = Balances::free_balance(14);
		assert_eq!(300025, balance);
		let balance = Balances::free_balance(15);
		assert_eq!(298500, balance);
		assert_ok!(TemplateModule::get_incentives_two_choice_helper(
			key.clone(),
			phase_data.clone(),
			15
		));
		let balance = Balances::free_balance(15);
		assert_eq!(299625, balance);
	});
}

#[test]
fn score_schelling_game_test() {
	new_test_ext().execute_with(|| {
		let key = return_key_profile(0);
		let now = 10;
		assert_ok!(TemplateModule::set_to_evidence_period(key.clone(), now));
		assert_eq!(TemplateModule::get_period(&key).unwrap(), Period::Evidence);
		let game_type = return_game_type_profile_approval();
		// let min_short_block_length = return_min_short_block_length();
		// let min_long_block_length = return_min_long_block_length();
		let phase_data = get_the_phase_data();

		let staking_start_time = now + phase_data.staking_length;
		assert_ok!(TemplateModule::set_to_staking_period(
			key.clone(),
			phase_data.clone(),
			staking_start_time
		));
		// Create tree
		assert_ok!(TemplateModule::create_tree_link_helper(key.clone(), 3));
		// Check the period is staking
		let period = TemplateModule::get_period(key.clone());
		// println!("{:?}", period);
		assert_eq!(Some(Period::Staking), period);
		// Applyjuror
		for j in 4..30 {
			assert_ok!(TemplateModule::apply_jurors_helper(
				key.clone(),
				phase_data.clone(),
				j,
				j * 100
			));
		}
		let new_now = staking_start_time + phase_data.staking_length;
		assert_ok!(TemplateModule::change_period(key.clone(), phase_data.clone(), new_now.clone()));
		let period = TemplateModule::get_period(key.clone());
		assert_eq!(Some(Period::Drawing), period);
		assert_ok!(TemplateModule::draw_jurors_helper(key.clone(), phase_data.clone(), 5));
		let draws_in_round = TemplateModule::draws_in_round(key.clone());
		assert_eq!(5, draws_in_round);
		let drawn_jurors = TemplateModule::drawn_jurors(key.clone());
		assert_eq!(vec![(4, 400), (7, 700), (13, 1300), (14, 1400), (15, 1500)], drawn_jurors);
		assert_ok!(TemplateModule::change_period(key.clone(), phase_data.clone(), new_now.clone()));
		let balance = Balances::free_balance(5);
		assert_eq!(299500, balance);
		assert_ok!(TemplateModule::unstaking_helper(key.clone(), 5));
		let balance = Balances::free_balance(5);
		assert_eq!(300000, balance);
		let hash = sp_io::hashing::keccak_256("1salt".as_bytes());
		assert_ok!(TemplateModule::commit_vote_for_score_helper(key.clone(), 4, hash));
		let hash = sp_io::hashing::keccak_256("1salt2".as_bytes());
		assert_ok!(TemplateModule::commit_vote_for_score_helper(key.clone(), 7, hash));
		let hash = sp_io::hashing::keccak_256("5salt3".as_bytes());
		assert_ok!(TemplateModule::commit_vote_for_score_helper(key.clone(), 13, hash));
		let hash = sp_io::hashing::keccak_256("1salt4".as_bytes());
		assert_ok!(TemplateModule::commit_vote_for_score_helper(key.clone(), 14, hash));
		let hash = sp_io::hashing::keccak_256("7salt5".as_bytes());
		assert_ok!(TemplateModule::commit_vote_for_score_helper(key.clone(), 15, hash));
		let commit_start_time = TemplateModule::commit_start_time(key.clone());
		let new_now = commit_start_time + phase_data.commit_length;
		assert_ok!(TemplateModule::change_period(key.clone(), phase_data.clone(), new_now.clone()));
		let period = TemplateModule::get_period(key.clone());
		assert_eq!(Some(Period::Vote), period);
		assert_ok!(TemplateModule::reveal_vote_score_helper(
			key.clone(),
			4,
			1,
			"salt".as_bytes().to_vec()
		));
		assert_ok!(TemplateModule::reveal_vote_score_helper(
			key.clone(),
			7,
			1,
			"salt2".as_bytes().to_vec()
		));
		assert_ok!(TemplateModule::reveal_vote_score_helper(
			key.clone(),
			13,
			5,
			"salt3".as_bytes().to_vec()
		));
		assert_ok!(TemplateModule::reveal_vote_score_helper(
			key.clone(),
			14,
			1,
			"salt4".as_bytes().to_vec()
		));
		assert_noop!(
			TemplateModule::reveal_vote_score_helper(
				key.clone(),
				15,
				8,
				"salt5".as_bytes().to_vec()
			),
			Error::<Test>::CommitDoesNotMatch
		);
		assert_ok!(TemplateModule::reveal_vote_score_helper(
			key.clone(),
			15,
			7,
			"salt5".as_bytes().to_vec()
		));
		let vote_start_time = TemplateModule::vote_start_time(key.clone());
		let new_now = vote_start_time + phase_data.commit_length;
		assert_ok!(TemplateModule::change_period(key.clone(), phase_data.clone(), new_now.clone()));
		let period = TemplateModule::get_period(key.clone());
		assert_eq!(Some(Period::Execution), period);
		let reveal_score = TemplateModule::reveal_score_values(key.clone());
		assert_eq!(vec![1000, 1000, 5000, 1000, 7000], reveal_score);
		let balance = Balances::free_balance(4);
		assert_eq!(299600, balance);
		let balance = Balances::free_balance(7);
		// println!("{:?}", balance);
		assert_eq!(299300, balance);
		let balance = Balances::free_balance(13);
		assert_eq!(298700, balance);
		let balance = Balances::free_balance(14);
		assert_eq!(298600, balance);
		let balance = Balances::free_balance(15);
		assert_eq!(298500, balance);
		assert_ok!(TemplateModule::get_incentives_score_schelling_helper(
			key.clone(),
			phase_data.clone(),
			RangePoint::ZeroToTen
		));
		let mean_values = TemplateModule::new_mean_reveal_score(key.clone());
		assert_eq!(2000, mean_values);
		let balance = Balances::free_balance(4);
		// println!("{:?}", balance);
		assert_eq!(300033, balance);
		let balance = Balances::free_balance(7);
		assert_eq!(300033, balance);
		let balance = Balances::free_balance(13); // Balance deducted as voted 5
		assert_eq!(299675, balance);
		let balance = Balances::free_balance(14);
		assert_eq!(300033, balance);
		let balance = Balances::free_balance(15); // Balance deducted as voted 7
		assert_eq!(299625, balance);
	});
}

'''
'''--- pallets/schelling-game-shared/src/types.rs ---
use frame_support::pallet_prelude::*;
use frame_support::sp_std::prelude::*;
use scale_info::TypeInfo;
use super::*;

#[derive(PartialEq, Eq, PartialOrd, Ord, Clone, Encode, Decode, MaxEncodedLen, TypeInfo)]
#[cfg_attr(feature = "std", derive(Debug))]
pub enum Period {
	Evidence,  // Evidence can be submitted. This is also when drawing has to take place.
	Staking, // Stake sum trees can be updated. Pass after `minStakingTime` passes and there is at least one dispute without jurors.
	Drawing, // Jurors can be drawn. Pass after all disputes have jurors or `maxDrawingTime` passes.
	Commit,  // Jurors commit a hashed vote. This is skipped for courts without hidden votes.
	Vote,    // Jurors reveal/cast their vote depending on whether the court has hidden votes or not.
	Appeal,  // The dispute can be appealed.	
	Execution, // Tokens are redistributed and the ruling is executed.
}

#[derive(PartialEq, Eq, PartialOrd, Ord, Clone, Encode, Decode, MaxEncodedLen, TypeInfo)]
#[cfg_attr(feature = "std", derive(Debug))]
pub enum SchellingGameType {
	ProfileApproval,
	ProfileScore,
	ProjectReview,
	PriceDiscovery,
	PositiveExternality,
	DepartmentScore,
}

#[derive(Encode, Decode, Clone, Eq, PartialEq, RuntimeDebug, TypeInfo)]
#[scale_info(skip_type_params(T))]
pub struct PhaseData<T: Config> {
	pub evidence_length: T::BlockNumber,
	pub end_of_staking_time: T::BlockNumber,
	pub staking_length: T::BlockNumber,
	pub drawing_length: T::BlockNumber,
	pub commit_length: T::BlockNumber,
	pub vote_length: T::BlockNumber,
	pub appeal_length: T::BlockNumber,
	pub max_draws: u64,
	pub min_number_juror_staked: u64,
	pub min_juror_stake: BalanceOf<T>,
	pub juror_incentives: (u64, u64), // (looser burn, winner mint)
}

// #[derive(PartialEq, Eq, PartialOrd, Ord, Clone, Encode, Decode, MaxEncodedLen, TypeInfo)]
// #[cfg_attr(feature = "std", derive(Debug))]
// pub struct StakingTime<BlockNumber> {
// 	pub min_short_block_length: BlockNumber,
// 	pub min_long_block_length: BlockNumber,
// }

// #[derive(PartialEq, Eq, PartialOrd, Ord, Clone, Encode, Decode, MaxEncodedLen, TypeInfo)]
// #[cfg_attr(feature = "std", derive(Debug))]
// pub struct DrawJurorsLimit {
// 	pub max_draws: u64,
// 	pub max_draws_appeal: u64,
// }

#[derive(PartialEq, Eq, PartialOrd, Ord, Clone, Encode, Decode, MaxEncodedLen, TypeInfo)]
#[cfg_attr(feature = "std", derive(Debug))]
pub enum VoteStatus {
	Commited,
	Revealed,
}

#[derive(PartialEq, Eq, PartialOrd, Ord, Clone, Encode, Decode, MaxEncodedLen, TypeInfo)]
#[cfg_attr(feature = "std", derive(Debug))]
pub struct CommitVote {
	pub commit: [u8; 32],
	pub votestatus: VoteStatus,
	pub revealed_vote: Option<RevealedVote>,
}

#[derive(PartialEq, Eq, PartialOrd, Ord, Clone, Encode, Decode, MaxEncodedLen, TypeInfo)]
#[cfg_attr(feature = "std", derive(Debug))]
pub enum RevealedVote {
	Yes,
	No,
}

#[derive(PartialEq, Eq, PartialOrd, Ord, Clone, Encode, Decode, MaxEncodedLen, TypeInfo)]
#[cfg_attr(feature = "std", derive(Debug))]
pub enum WinningDecision {
	WinnerYes,
	WinnerNo,
	Draw
}

#[derive(PartialEq, Eq, PartialOrd, Ord, Clone, Encode, Decode, MaxEncodedLen, TypeInfo)]
#[cfg_attr(feature = "std", derive(Debug))]
pub struct ScoreCommitVote {
	pub commit: [u8; 32],
	pub votestatus: VoteStatus,
	pub revealed_vote: Option<i64>,
}

/// RangePoint enum to determine whether score values are from
/// 1) ZeroToTen: 0 to 10 
/// 2) MinusTenToPlusTen: -10 to +10
/// 3) ZeroToFive: 0 to 5
#[derive(PartialEq, Eq, PartialOrd, Ord, Clone, Encode, Decode, MaxEncodedLen, TypeInfo)]
#[cfg_attr(feature = "std", derive(Debug))]
pub enum RangePoint {
	ZeroToTen,
	MinusTenToPlusTen,
	ZeroToFive,
}
'''
'''--- pallets/schelling-game-shared/src/weights.rs ---

//! Autogenerated weights for pallet_template
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-04-06, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Alexs-MacBook-Pro-2.local`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ../../target/release/node-template
// benchmark
// pallet
// --chain
// dev
// --pallet
// pallet_template
// --extrinsic
// *
// --steps=50
// --repeat=20
// --execution=wasm
// --wasm-execution=compiled
// --output
// pallets/template/src/weights.rs
// --template
// ../../.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_template.
pub trait WeightInfo {
	fn do_something() -> Weight;
	fn cause_error() -> Weight;
}

/// Weights for pallet_template using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: TemplateModule Something (r:0 w:1)
	/// Proof: TemplateModule Something (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn do_something() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 8_000_000 picoseconds.
		Weight::from_parts(9_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: TemplateModule Something (r:1 w:1)
	/// Proof: TemplateModule Something (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn cause_error() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `32`
		//  Estimated: `1489`
		// Minimum execution time: 6_000_000 picoseconds.
		Weight::from_parts(6_000_000, 1489)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: TemplateModule Something (r:0 w:1)
	/// Proof: TemplateModule Something (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn do_something() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 8_000_000 picoseconds.
		Weight::from_parts(9_000_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: TemplateModule Something (r:1 w:1)
	/// Proof: TemplateModule Something (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn cause_error() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `32`
		//  Estimated: `1489`
		// Minimum execution time: 6_000_000 picoseconds.
		Weight::from_parts(6_000_000, 1489)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}

'''
'''--- pallets/shared-storage/Cargo.toml ---
[package]
name = "shared-storage"
version = "4.0.0-dev"
description = "FRAME pallet template for defining custom runtime logic."
authors = ["Substrate DevHub <https://github.com/substrate-developer-hub>"]
homepage = "https://substrate.io"
edition = "2021"
license = "MIT-0"
publish = false
repository = "https://github.com/substrate-developer-hub/substrate-node-template/"

[package.metadata.docs.rs]
targets = ["x86_64-unknown-linux-gnu"]

[dependencies]
codec = { package = "parity-scale-codec", version = "3.2.2", default-features = false, features = [
	"derive",
] }
scale-info = { version = "2.5.0", default-features = false, features = ["derive"] }
frame-benchmarking = { version = "4.0.0-dev", default-features = false, optional = true, git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
frame-support = { version = "4.0.0-dev", default-features = false, git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
frame-system = { version = "4.0.0-dev", default-features = false, git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
shared-storage-link = {default-features=false, path="../../traits/shared-storage-link"}

[dev-dependencies]
sp-core = { version = "7.0.0", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
sp-io = { version = "7.0.0", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
sp-runtime = { version = "7.0.0", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }

[features]
default = ["std"]
std = [
	"codec/std",
	"frame-benchmarking?/std",
	"frame-support/std",
	"frame-system/std",
	"scale-info/std",
]
runtime-benchmarks = ["frame-benchmarking/runtime-benchmarks"]
try-runtime = ["frame-support/try-runtime"]

'''
'''--- pallets/shared-storage/README.md ---
License: MIT-0
'''
'''--- pallets/shared-storage/src/benchmarking.rs ---
//! Benchmarking setup for pallet-template
#![cfg(feature = "runtime-benchmarks")]
use super::*;

#[allow(unused)]
use crate::Pallet as Template;
use frame_benchmarking::v2::*;
use frame_system::RawOrigin;

#[benchmarks]
mod benchmarks {
	use super::*;

	#[benchmark]
	fn do_something() {
		let value = 100u32.into();
		let caller: T::AccountId = whitelisted_caller();
		#[extrinsic_call]
		do_something(RawOrigin::Signed(caller), value);

		assert_eq!(Something::<T>::get(), Some(value));
	}

	#[benchmark]
	fn cause_error() {
		Something::<T>::put(100u32);
		let caller: T::AccountId = whitelisted_caller();
		#[extrinsic_call]
		cause_error(RawOrigin::Signed(caller));

		assert_eq!(Something::<T>::get(), Some(101u32));
	}

	impl_benchmark_test_suite!(Template, crate::mock::new_test_ext(), crate::mock::Test);
}

'''
'''--- pallets/shared-storage/src/extras.rs ---
use crate::*;

use shared_storage_link::SharedStorageLink;

impl<T: Config> SharedStorageLink for Pallet<T> {
	type AccountId = AccountIdOf<T>;

	fn check_citizen_is_approved_link(address: Self::AccountId) -> DispatchResult {
		Self::check_citizen_is_approved(address)
	}
	fn get_approved_citizen_count_link() -> u64 {
		Self::get_approved_citizen_count()
	}

	fn set_positive_externality_link(address: Self::AccountId, score: i64)-> DispatchResult {
		Self::set_positive_externality(address, score)
	}
}

impl<T: Config> Pallet<T> {
	pub(super) fn check_citizen_is_approved(address: T::AccountId) -> DispatchResult {
		let members = ApprovedCitizenAddress::<T>::get();

		match members.binary_search(&address) {
			Ok(_index) => Ok(()),
			Err(_) => Err(Error::<T>::CitizenNotApproved.into()),
		}
	}

	pub(super) fn get_approved_citizen_count() -> u64 {
		let members = ApprovedCitizenAddress::<T>::get();
		members.len() as u64
	}

	pub(super) fn set_positive_externality(address: T::AccountId, score: Score) -> DispatchResult {
		PositiveExternalityScore::<T>::insert(address,score);
		Ok(())
	}
}

'''
'''--- pallets/shared-storage/src/lib.rs ---
#![cfg_attr(not(feature = "std"), no_std)]

/// Edit this file to define custom logic or remove it if it is not needed.
/// Learn more about FRAME and the core library of Substrate FRAME pallets:
/// <https://docs.substrate.io/reference/frame-pallets/>
pub use pallet::*;

#[cfg(test)]
mod mock;

#[cfg(test)]
mod tests;

#[cfg(feature = "runtime-benchmarks")]
mod benchmarking;
pub mod weights;
pub use weights::*;
mod extras;

use frame_support::sp_std::{prelude::*};
use frame_support::{dispatch::DispatchResult, pallet_prelude::*};

type AccountIdOf<T> = <T as frame_system::Config>::AccountId;
type Score = i64;

#[frame_support::pallet]
pub mod pallet {
	use super::*;
	use frame_support::pallet_prelude::*;
	use frame_system::pallet_prelude::*;

	#[pallet::pallet]
	#[pallet::without_storage_info]
	pub struct Pallet<T>(_);

	/// Configure the pallet by specifying the parameters and types on which it depends.
	#[pallet::config]
	pub trait Config: frame_system::Config {
		/// Because this pallet emits events, it depends on the runtime's definition of an event.
		type RuntimeEvent: From<Event<Self>> + IsType<<Self as frame_system::Config>::RuntimeEvent>;
		/// Type representing the weight of this pallet
		type WeightInfo: WeightInfo;
	}

	// The pallet's runtime storage items.
	// https://docs.substrate.io/main-docs/build/runtime-storage/
	#[pallet::storage]
	#[pallet::getter(fn something)]
	// Learn more about declaring storage items:
	// https://docs.substrate.io/main-docs/build/runtime-storage/#declaring-storage-items
	pub type Something<T> = StorageValue<_, u32>;

	#[pallet::storage]
	#[pallet::getter(fn approved_citizen_address)]
	pub type ApprovedCitizenAddress<T: Config> = StorageValue<_, Vec<T::AccountId>, ValueQuery>; // Its set, add element through binary_search

	#[pallet::storage]
	#[pallet::getter(fn positive_externality_score)]
	pub type PositiveExternalityScore<T: Config> = StorageMap<_, Blake2_128Concat, T::AccountId, Score, ValueQuery>;

	// Keep winning representatives of department in shared storage

	#[pallet::genesis_config]
	pub struct GenesisConfig<T: Config> {
		pub approved_citizen_address: Vec<T::AccountId>,
	}

	#[cfg(feature = "std")]
	impl<T: Config> Default for GenesisConfig<T> {
		fn default() -> Self {
			Self { approved_citizen_address: Default::default() }
		}
	}

	#[pallet::genesis_build]
	impl<T: Config> GenesisBuild<T> for GenesisConfig<T> {
		fn build(&self) {
			<ApprovedCitizenAddress<T>>::put(self.approved_citizen_address.clone());
		}
	}

	// Pallets use events to inform users when important changes are made.
	// https://docs.substrate.io/main-docs/build/events-errors/
	#[pallet::event]
	#[pallet::generate_deposit(pub(super) fn deposit_event)]
	pub enum Event<T: Config> {
		/// Event documentation should end with an array that provides descriptive names for event
		/// parameters. [something, who]
		SomethingStored { something: u32, who: T::AccountId },
	}

	// Errors inform users that something went wrong.
	#[pallet::error]
	pub enum Error<T> {
		/// Error names should be descriptive.
		NoneValue,
		/// Errors should have helpful documentation associated with them.
		StorageOverflow,
		CitizenNotApproved,
	}

	// Dispatchable functions allows users to interact with the pallet and invoke state changes.
	// These functions materialize as "extrinsics", which are often compared to transactions.
	// Dispatchable functions must be annotated with a weight and must return a DispatchResult.
	#[pallet::call]
	impl<T: Config> Pallet<T> {
		/// An example dispatchable that takes a singles value as a parameter, writes the value to
		/// storage and emits an event. This function must be dispatched by a signed extrinsic.
		#[pallet::call_index(0)]
		#[pallet::weight(T::WeightInfo::do_something())]
		pub fn do_something(origin: OriginFor<T>, something: u32) -> DispatchResult {
			// Check that the extrinsic was signed and get the signer.
			// This function will return an error if the extrinsic is not signed.
			// https://docs.substrate.io/main-docs/build/origins/
			let who = ensure_signed(origin)?;

			// Update storage.
			<Something<T>>::put(something);

			// Emit an event.
			Self::deposit_event(Event::SomethingStored { something, who });
			// Return a successful DispatchResultWithPostInfo
			Ok(())
		}

		/// An example dispatchable that may throw a custom error.
		#[pallet::call_index(1)]
		#[pallet::weight(T::WeightInfo::cause_error())]
		pub fn cause_error(origin: OriginFor<T>) -> DispatchResult {
			let _who = ensure_signed(origin)?;

			// Read a value from storage.
			match <Something<T>>::get() {
				// Return an error if the value has not been set.
				None => return Err(Error::<T>::NoneValue.into()),
				Some(old) => {
					// Increment the value read from storage; will error in the event of overflow.
					let new = old.checked_add(1).ok_or(Error::<T>::StorageOverflow)?;
					// Update the value in storage with the incremented result.
					<Something<T>>::put(new);
					Ok(())
				},
			}
		}
	}
}

'''
'''--- pallets/shared-storage/src/mock.rs ---
use crate as pallet_template;
use frame_support::traits::{ConstU16, ConstU64};
use sp_core::H256;
use sp_runtime::{
	testing::Header,
	traits::{BlakeTwo256, IdentityLookup},
};

type UncheckedExtrinsic = frame_system::mocking::MockUncheckedExtrinsic<Test>;
type Block = frame_system::mocking::MockBlock<Test>;

// Configure a mock runtime to test the pallet.
frame_support::construct_runtime!(
	pub enum Test where
		Block = Block,
		NodeBlock = Block,
		UncheckedExtrinsic = UncheckedExtrinsic,
	{
		System: frame_system,
		TemplateModule: pallet_template,
	}
);

impl frame_system::Config for Test {
	type BaseCallFilter = frame_support::traits::Everything;
	type BlockWeights = ();
	type BlockLength = ();
	type DbWeight = ();
	type RuntimeOrigin = RuntimeOrigin;
	type RuntimeCall = RuntimeCall;
	type Index = u64;
	type BlockNumber = u64;
	type Hash = H256;
	type Hashing = BlakeTwo256;
	type AccountId = u64;
	type Lookup = IdentityLookup<Self::AccountId>;
	type Header = Header;
	type RuntimeEvent = RuntimeEvent;
	type BlockHashCount = ConstU64<250>;
	type Version = ();
	type PalletInfo = PalletInfo;
	type AccountData = ();
	type OnNewAccount = ();
	type OnKilledAccount = ();
	type SystemWeightInfo = ();
	type SS58Prefix = ConstU16<42>;
	type OnSetCode = ();
	type MaxConsumers = frame_support::traits::ConstU32<16>;
}

impl pallet_template::Config for Test {
	type RuntimeEvent = RuntimeEvent;
	type WeightInfo = ();
}

// Build genesis storage according to the mock runtime.
pub fn new_test_ext() -> sp_io::TestExternalities {
	frame_system::GenesisConfig::default().build_storage::<Test>().unwrap().into()
}

'''
'''--- pallets/shared-storage/src/tests.rs ---
use crate::{mock::*, Error, Event};
use frame_support::{assert_noop, assert_ok};

#[test]
fn it_works_for_default_value() {
	new_test_ext().execute_with(|| {
		// Go past genesis block so events get deposited
		System::set_block_number(1);
		// Dispatch a signed extrinsic.
		assert_ok!(TemplateModule::do_something(RuntimeOrigin::signed(1), 42));
		// Read pallet storage and assert an expected result.
		assert_eq!(TemplateModule::something(), Some(42));
		// Assert that the correct event was deposited
		System::assert_last_event(Event::SomethingStored { something: 42, who: 1 }.into());
	});
}

#[test]
fn correct_error_for_none_value() {
	new_test_ext().execute_with(|| {
		// Ensure the expected error is thrown when no value is present.
		assert_noop!(
			TemplateModule::cause_error(RuntimeOrigin::signed(1)),
			Error::<Test>::NoneValue
		);
	});
}

'''
'''--- pallets/shared-storage/src/types.rs ---

'''
'''--- pallets/shared-storage/src/weights.rs ---

//! Autogenerated weights for pallet_template
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-04-06, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Alexs-MacBook-Pro-2.local`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ../../target/release/node-template
// benchmark
// pallet
// --chain
// dev
// --pallet
// pallet_template
// --extrinsic
// *
// --steps=50
// --repeat=20
// --execution=wasm
// --wasm-execution=compiled
// --output
// pallets/template/src/weights.rs
// --template
// ../../.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_template.
pub trait WeightInfo {
	fn do_something() -> Weight;
	fn cause_error() -> Weight;
}

/// Weights for pallet_template using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: TemplateModule Something (r:0 w:1)
	/// Proof: TemplateModule Something (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn do_something() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 8_000_000 picoseconds.
		Weight::from_parts(9_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: TemplateModule Something (r:1 w:1)
	/// Proof: TemplateModule Something (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn cause_error() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `32`
		//  Estimated: `1489`
		// Minimum execution time: 6_000_000 picoseconds.
		Weight::from_parts(6_000_000, 1489)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: TemplateModule Something (r:0 w:1)
	/// Proof: TemplateModule Something (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn do_something() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 8_000_000 picoseconds.
		Weight::from_parts(9_000_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: TemplateModule Something (r:1 w:1)
	/// Proof: TemplateModule Something (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn cause_error() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `32`
		//  Estimated: `1489`
		// Minimum execution time: 6_000_000 picoseconds.
		Weight::from_parts(6_000_000, 1489)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}

'''
'''--- pallets/sortition-sum-game/Cargo.toml ---
[package]
name = "sortition-sum-game"
version = "4.0.0-dev"
description = "FRAME pallet template for defining custom runtime logic."
authors = ["Substrate DevHub <https://github.com/substrate-developer-hub>"]
homepage = "https://substrate.io"
edition = "2021"
license = "MIT-0"
publish = false
repository = "https://github.com/substrate-developer-hub/substrate-node-template/"

[package.metadata.docs.rs]
targets = ["x86_64-unknown-linux-gnu"]

[dependencies]
codec = { package = "parity-scale-codec", version = "3.2.2", default-features = false, features = [
	"derive",
] }
scale-info = { version = "2.5.0", default-features = false, features = ["derive"] }
frame-benchmarking = { version = "4.0.0-dev", default-features = false, optional = true, git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
frame-support = { version = "4.0.0-dev", default-features = false, git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
frame-system = { version = "4.0.0-dev", default-features = false, git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
sortition-sum-game-link = {default-features = false, path="../../traits/sortition-sum-game-link"}

[dev-dependencies]
sp-core = { version = "7.0.0", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
sp-io = { version = "7.0.0", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
sp-runtime = { version = "7.0.0", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }

[features]
default = ["std"]
std = [
	"codec/std",
	"frame-benchmarking?/std",
	"frame-support/std",
	"frame-system/std",
	"scale-info/std",
]
runtime-benchmarks = ["frame-benchmarking/runtime-benchmarks"]
try-runtime = ["frame-support/try-runtime"]

'''
'''--- pallets/sortition-sum-game/README.md ---
License: MIT-0
'''
'''--- pallets/sortition-sum-game/src/benchmarking.rs ---
//! Benchmarking setup for pallet-template
#![cfg(feature = "runtime-benchmarks")]
use super::*;

#[allow(unused)]
use crate::Pallet as Template;
use frame_benchmarking::v2::*;
use frame_system::RawOrigin;

#[benchmarks]
mod benchmarks {
	use super::*;

	#[benchmark]
	fn do_something() {
		let value = 100u32.into();
		let caller: T::AccountId = whitelisted_caller();
		#[extrinsic_call]
		do_something(RawOrigin::Signed(caller), value);

		assert_eq!(Something::<T>::get(), Some(value));
	}

	#[benchmark]
	fn cause_error() {
		Something::<T>::put(100u32);
		let caller: T::AccountId = whitelisted_caller();
		#[extrinsic_call]
		cause_error(RawOrigin::Signed(caller));

		assert_eq!(Something::<T>::get(), Some(101u32));
	}

	impl_benchmark_test_suite!(Template, crate::mock::new_test_ext(), crate::mock::Test);
}

'''
'''--- pallets/sortition-sum-game/src/extras.rs ---
use crate::*;

impl<T: Config> SortitionSumGameLink for Pallet<T> {
	type SumTreeName = SumTreeNameType<T>;
	type AccountId = AccountIdOf<T>;
	fn create_tree_link(key: Self::SumTreeName, k: u64) -> DispatchResult {
		Self::create_tree(key, k)
	}

	fn set_link(key: Self::SumTreeName, value: u64, citizen_id: Self::AccountId) -> DispatchResult {
		Self::set(key, value, citizen_id)
	}
	fn stake_of_link(
		key: Self::SumTreeName,
		citizen_id: Self::AccountId,
	) -> Result<Option<u64>, DispatchError> {
		Self::stake_of(key, citizen_id)
	}
    fn draw_link(key: Self::SumTreeName, draw_number: u64) -> Result<Self::AccountId, DispatchError> {
        Self::draw(key, draw_number)
    }
	fn remove_tree_link(key: Self::SumTreeName) -> DispatchResult {
		Self::remove_tree(key)
	}
}

impl<T: Config> Pallet<T> {
	// SortitionSumTree
	pub fn create_tree(key: SumTreeNameType<T>, k: u64) -> DispatchResult {
		if k < 1 {
			Err(Error::<T>::KMustGreaterThanOne)?
		}
		let tree_option = <SortitionSumTrees<T>>::get(&key);
		match tree_option {
			Some(_tree) => Err(Error::<T>::TreeAlreadyExists)?,
			None => {
				let mut sum_tree = SortitionSumTree {
					k,
					stack: Vec::new(),
					nodes: Vec::new(),
					ids_to_node_indexes: BTreeMap::new(),
					node_indexes_to_ids: BTreeMap::new(),
				};

				sum_tree.nodes.push(0);

				<SortitionSumTrees<T>>::insert(&key, &sum_tree);
			},
		}
		Ok(())
	}

	pub fn set(key: SumTreeNameType<T>, value: u64, citizen_id: AccountIdOf<T>) -> DispatchResult {
		let tree_option = <SortitionSumTrees<T>>::get(&key);

		match tree_option {
			None => Err(Error::<T>::TreeDoesnotExist)?,
			Some(mut tree) => match tree.ids_to_node_indexes.get(&citizen_id) {
				Some(tree_index_data) => {
					let tree_index = *tree_index_data;
					if tree_index == 0 {
						Self::if_tree_index_zero(value, citizen_id, tree, tree_index, key);
					} else {
						// Existing node
						if value == 0 {
							let value = tree.nodes[tree_index as usize];
							tree.nodes[tree_index as usize] = 0;
							tree.stack.push(tree_index);
							tree.ids_to_node_indexes.remove(&citizen_id);
							tree.node_indexes_to_ids.remove(&tree_index);

							// UpdateParents 🟥
							Self::update_parents(tree, tree_index, false, value, key);
						} else if value != tree.nodes[tree_index as usize] {
							let plus_or_minus = tree.nodes[tree_index as usize] <= value;
							let plus_or_minus_value = if plus_or_minus {
								value
									.checked_sub(tree.nodes[tree_index as usize])
									.ok_or("StorageOverflow")?
							} else {
								(tree.nodes[tree_index as usize])
									.checked_sub(value)
									.ok_or("StorageOverflow")?
							};
							tree.nodes[tree_index as usize] = value;

							// update parents 🟥
							Self::update_parents(
								tree,
								tree_index,
								plus_or_minus,
								plus_or_minus_value,
								key,
							);
						}
					}
				},

				None => {
					Self::if_tree_index_zero(value, citizen_id, tree, 0, key);
				},
			},
		}

		Ok(())
	}

	fn update_parents(
		mut tree: SortitionSumTree<AccountIdOf<T>>,
		tree_index: u64,
		plus_or_minus: bool,
		value: u64,
		key: SumTreeNameType<T>,
	) {
		let mut parent_index = tree_index;
		while parent_index != 0 {
			parent_index = (parent_index - 1) / tree.k;
			tree.nodes[parent_index as usize] = if plus_or_minus {
				(tree.nodes[parent_index as usize]).checked_add(value).expect("StorageOverflow")
			} else {
				(tree.nodes[parent_index as usize]).checked_sub(value).expect("StorageOverflow")
			};

			<SortitionSumTrees<T>>::insert(&key, &tree);
		}
	}
	fn if_tree_index_zero(
		value: u64,
		citizen_id: AccountIdOf<T>,
		mut tree: SortitionSumTree<AccountIdOf<T>>,
		mut tree_index: u64,
		key: SumTreeNameType<T>,
	) {
		// No existing node.
		if value != 0 {
			// Non zero value.
			// Append.
			// Add node.
			if tree.stack.len() == 0 {
				// No vacant spots.
				// Get the index and append the value.
				tree_index = tree.nodes.len() as u64;
				tree.nodes.push(value);

				// println!("{}", tree_index);

				// Potentially append a new node and make the parent a sum node.
				if tree_index != 1 && (tree_index - 1) % tree.k == 0 {
					// Is first child.
					let parent_index = tree_index / tree.k;
					let parent_id = tree.node_indexes_to_ids.get(&parent_index).unwrap().clone();
					let new_index = tree_index + 1;
					tree.nodes.push(*tree.nodes.get(parent_index as usize).unwrap());
					tree.node_indexes_to_ids.remove(&parent_index);
					tree.ids_to_node_indexes.insert(parent_id.clone(), new_index);
					tree.node_indexes_to_ids.insert(new_index, parent_id);
				}
			} else {
				let tree_index = tree.stack.get(tree.stack.len() - 1);
				tree.nodes[*tree_index.unwrap() as usize] = value;
				tree.stack.pop();
			}

			tree.ids_to_node_indexes.insert(citizen_id.clone(), tree_index);
			tree.node_indexes_to_ids.insert(tree_index, citizen_id);

			// update_parents 🟥

			Self::update_parents(tree, tree_index, true, value, key);
		}
	}

	pub fn stake_of(
		key: SumTreeNameType<T>,
		citizen_id: AccountIdOf<T>,
	) -> Result<Option<u64>, DispatchError> {
		let tree_option = <SortitionSumTrees<T>>::get(&key);
		match tree_option {
			None => Err(Error::<T>::TreeDoesnotExist)?,
			Some(tree) => {
				let tree_index_data;
				match tree.ids_to_node_indexes.get(&citizen_id) {
					Some(v) => tree_index_data = v,
					None => return Ok(None),
				}

				let value: u64;
				let tree_index = *tree_index_data;
				if tree_index == 0 {
					value = 0;
				} else {
					value = tree.nodes[tree_index as usize];
				}
				Ok(Some(value))
			},
		}
	}

	pub fn draw(key: SumTreeNameType<T>, draw_number: u64) -> Result<AccountIdOf<T>, DispatchError> {
		let tree_option = <SortitionSumTrees<T>>::get(&key);

		match tree_option {
			None => Err(Error::<T>::TreeDoesnotExist)?,
			Some(tree) => {
				let mut tree_index = 0;
				let mut current_draw_number = draw_number % tree.nodes[0];

				while (tree.k * tree_index) + 1 < (tree.nodes.len() as u64) {
					for i in 1..tree.k + 1 {
						let node_index = (tree.k * tree_index) + i;
						let node_value = tree.nodes[node_index as usize];

						if current_draw_number >= node_value {
							current_draw_number -= node_value;
						} else {
							tree_index = node_index;
							break;
						}
					}
				}
				let account_id = tree.node_indexes_to_ids.get(&tree_index).unwrap().clone();
				Ok(account_id)
			},
		}
	}

	/**
	 *  @dev Query the leaves of a tree. Note that if `startIndex == 0`, the tree is empty and the root node will be returned.
	 *  @param key The key of the tree to get the leaves from.
	 *  @param cursor The pagination cursor.
	 *  @param count The number of items to return.
	 *  @return The index at which leaves start, the values of the returned leaves, and whether there are more for pagination.
	 *  `O(n)` where
	 *  `n` is the maximum number of nodes ever appended.
	 */
	pub fn query_leafs(
		key: SumTreeNameType<T>,
		cursor: u64,
		count: u64,
	) -> Result<(u64, Vec<u64>, bool), DispatchError> {
		let tree_option = <SortitionSumTrees<T>>::get(&key);

		match tree_option {
			None => Err(Error::<T>::TreeDoesnotExist)?,
			Some(tree) => {
				let mut start_index = 0;
				for i in 0..tree.nodes.len() {
					if (tree.k * i as u64) + 1 >= tree.nodes.len() as u64 {
						start_index = i as u64;
						break;
					}
				}
				let loop_start_index = start_index + cursor;

				// let value = if loop_start_index + count > tree.nodes.len() as u64 {
				// 	tree.nodes.len() as u64 - loop_start_index
				// } else {
				// 	count
				// };

				let mut values = Vec::new();
				let mut values_index = 0;
				let mut has_more = false;
				for j in loop_start_index..tree.nodes.len() as u64 {
					if values_index < count {
						values.push(tree.nodes[j as usize]);
						values_index = values_index + 1;
					} else {
						has_more = true;
						break;
					}
				}

				Ok((start_index, values, has_more))
			},
		}
	}

	pub fn remove_tree(key: SumTreeNameType<T>)-> DispatchResult {
		<SortitionSumTrees<T>>::remove(&key);
		Ok(())
	}
}

'''
'''--- pallets/sortition-sum-game/src/lib.rs ---
#![cfg_attr(not(feature = "std"), no_std)]

/// Edit this file to define custom logic or remove it if it is not needed.
/// Learn more about FRAME and the core library of Substrate FRAME pallets:
/// <https://docs.substrate.io/reference/frame-pallets/>
pub use pallet::*;

#[cfg(test)]
mod mock;

#[cfg(test)]
mod tests;

#[cfg(feature = "runtime-benchmarks")]
mod benchmarking;
pub mod weights;
pub use weights::*;

pub mod types;
mod extras;

use crate::types::{SortitionSumTree, SumTreeName};
use frame_support::sp_std::{collections::btree_map::BTreeMap, vec::Vec};
use frame_support::{dispatch::DispatchResult, pallet_prelude::*};
use sortition_sum_game_link::SortitionSumGameLink;
type AccountIdOf<T> = <T as frame_system::Config>::AccountId;
pub type BlockNumberOf<T> = <T as frame_system::Config>::BlockNumber;
type SumTreeNameType<T> = SumTreeName<AccountIdOf<T>, BlockNumberOf<T>>;

#[frame_support::pallet]
pub mod pallet {
	use super::*;
	use frame_support::pallet_prelude::*;
	use frame_system::pallet_prelude::*;

	#[pallet::pallet]
	#[pallet::without_storage_info]
	pub struct Pallet<T>(_);

	/// Configure the pallet by specifying the parameters and types on which it depends.
	#[pallet::config]
	pub trait Config: frame_system::Config {
		/// Because this pallet emits events, it depends on the runtime's definition of an event.
		type RuntimeEvent: From<Event<Self>> + IsType<<Self as frame_system::Config>::RuntimeEvent>;
		/// Type representing the weight of this pallet
		type WeightInfo: WeightInfo;
	}

	// The pallet's runtime storage items.
	// https://docs.substrate.io/main-docs/build/runtime-storage/
	#[pallet::storage]
	#[pallet::getter(fn something)]
	// Learn more about declaring storage items:
	// https://docs.substrate.io/main-docs/build/runtime-storage/#declaring-storage-items
	pub type Something<T> = StorageValue<_, u32>;

	// Pallets use events to inform users when important changes are made.
	// https://docs.substrate.io/main-docs/build/events-errors/
	#[pallet::event]
	#[pallet::generate_deposit(pub(super) fn deposit_event)]
	pub enum Event<T: Config> {
		/// Event documentation should end with an array that provides descriptive names for event
		/// parameters. [something, who]
		SomethingStored { something: u32, who: T::AccountId },
	}

	#[pallet::storage]
	#[pallet::getter(fn sortition_sum_trees)]
	pub type SortitionSumTrees<T> =
		StorageMap<_, Blake2_128Concat, SumTreeNameType<T>, SortitionSumTree<AccountIdOf<T>>>;

	#[pallet::error]
	pub enum Error<T> {
		NoneValue,
		StorageOverflow,
		KMustGreaterThanOne,
		TreeAlreadyExists,
		TreeDoesnotExist,
	}

	// Dispatchable functions allows users to interact with the pallet and invoke state changes.
	// These functions materialize as "extrinsics", which are often compared to transactions.
	// Dispatchable functions must be annotated with a weight and must return a DispatchResult.
	#[pallet::call]
	impl<T: Config> Pallet<T> {
		/// An example dispatchable that takes a singles value as a parameter, writes the value to
		/// storage and emits an event. This function must be dispatched by a signed extrinsic.
		
		/// An example dispatchable that may throw a custom error.
		#[pallet::call_index(1)]
		#[pallet::weight(T::WeightInfo::cause_error())]
		pub fn cause_error(origin: OriginFor<T>) -> DispatchResult {
			let _who = ensure_signed(origin)?;

			// Read a value from storage.
			match <Something<T>>::get() {
				// Return an error if the value has not been set.
				None => return Err(Error::<T>::NoneValue.into()),
				Some(old) => {
					// Increment the value read from storage; will error in the event of overflow.
					let new = old.checked_add(1).ok_or(Error::<T>::StorageOverflow)?;
					// Update the value in storage with the incremented result.
					<Something<T>>::put(new);
					Ok(())
				},
			}
		}
	}
}

'''
'''--- pallets/sortition-sum-game/src/mock.rs ---
use crate as pallet_template;
use frame_support::traits::{ConstU16, ConstU64};
use sp_core::H256;
use sp_runtime::{
	testing::Header,
	traits::{BlakeTwo256, IdentityLookup},
};

type UncheckedExtrinsic = frame_system::mocking::MockUncheckedExtrinsic<Test>;
type Block = frame_system::mocking::MockBlock<Test>;

// Configure a mock runtime to test the pallet.
frame_support::construct_runtime!(
	pub enum Test where
		Block = Block,
		NodeBlock = Block,
		UncheckedExtrinsic = UncheckedExtrinsic,
	{
		System: frame_system,
		TemplateModule: pallet_template,
	}
);

impl frame_system::Config for Test {
	type BaseCallFilter = frame_support::traits::Everything;
	type BlockWeights = ();
	type BlockLength = ();
	type DbWeight = ();
	type RuntimeOrigin = RuntimeOrigin;
	type RuntimeCall = RuntimeCall;
	type Index = u64;
	type BlockNumber = u64;
	type Hash = H256;
	type Hashing = BlakeTwo256;
	type AccountId = u64;
	type Lookup = IdentityLookup<Self::AccountId>;
	type Header = Header;
	type RuntimeEvent = RuntimeEvent;
	type BlockHashCount = ConstU64<250>;
	type Version = ();
	type PalletInfo = PalletInfo;
	type AccountData = ();
	type OnNewAccount = ();
	type OnKilledAccount = ();
	type SystemWeightInfo = ();
	type SS58Prefix = ConstU16<42>;
	type OnSetCode = ();
	type MaxConsumers = frame_support::traits::ConstU32<16>;
}

impl pallet_template::Config for Test {
	type RuntimeEvent = RuntimeEvent;
	type WeightInfo = ();
}

// Build genesis storage according to the mock runtime.
pub fn new_test_ext() -> sp_io::TestExternalities {
	frame_system::GenesisConfig::default().build_storage::<Test>().unwrap().into()
}

'''
'''--- pallets/sortition-sum-game/src/tests.rs ---
use crate::{mock::*, types::SumTreeName, Error, Event};
use frame_support::{assert_noop, assert_ok};

#[test]
fn it_works_for_default_value() {
	new_test_ext().execute_with(|| {
		System::set_block_number(1);

		let key = SumTreeName::ProfileValidation { citizen_address: 1, block_number: 10 };
		assert_ok!(TemplateModule::create_tree(key.clone(), 5));
		assert_ok!(TemplateModule::set(key.clone(), 10, 1));
		assert_ok!(TemplateModule::set(key.clone(), 20, 1));
		assert_ok!(TemplateModule::set(key.clone(), 30, 2));
		assert_ok!(TemplateModule::set(key.clone(), 40, 3));
		assert_ok!(TemplateModule::set(key.clone(), 50, 4));
		assert_eq!(TemplateModule::stake_of(key.clone(), 1), Ok(Some(20)));
		assert_eq!(TemplateModule::draw(key.clone(), 90), Ok(4));
	});
}

#[test]
fn correct_error_for_none_value() {
	new_test_ext().execute_with(|| {
		System::set_block_number(1);
		let key = SumTreeName::ProfileValidation { citizen_address: 1, block_number: 10 };
		assert_ok!(TemplateModule::create_tree(key.clone(), 2));
		assert_ok!(TemplateModule::set(key.clone(), 10, 1));
		assert_ok!(TemplateModule::set(key.clone(), 20, 1));
		assert_ok!(TemplateModule::set(key.clone(), 30, 2));
		assert_ok!(TemplateModule::set(key.clone(), 40, 3));
		let data2 = TemplateModule::query_leafs(key.clone(), 0, 5);
		println!("{:?}", data2);
		assert_ok!(TemplateModule::set(key.clone(), 50, 4));
		assert_ok!(TemplateModule::set(key.clone(), 0, 3));

		let data2 = TemplateModule::query_leafs(key.clone(), 0, 5);
		println!("{:?}", data2);

		let data = TemplateModule::draw(key.clone(), 98);
		println!("{:?}", data);
	});
}

'''
'''--- pallets/sortition-sum-game/src/types.rs ---
use frame_support::{pallet_prelude::*};
use frame_support::sp_std::{vec::Vec, collections::btree_map::BTreeMap};
use scale_info::TypeInfo;

type CitizenId = u64;

#[derive(PartialEq, Eq, PartialOrd, Ord, Clone, Encode, Decode, TypeInfo)]
#[cfg_attr(feature = "std", derive(Debug))]
pub enum SumTreeName<AccountId, BlockNumber> {
    ProfileValidation { citizen_address: AccountId, block_number: BlockNumber},
    PositiveExternality {user_address: AccountId, block_number: BlockNumber },
    DepartmentRequiredFund {department_required_fund_id: u64, block_number: BlockNumber},
    ProjectTips { project_id: u64,  block_number: BlockNumber },
}

#[derive(PartialEq, Eq, PartialOrd, Ord, Clone, Encode, Decode, TypeInfo)]
#[cfg_attr(feature = "std", derive(Debug))]
pub struct SortitionSumTree<AccountId> {
    pub k: u64,
    pub stack: Vec<u64>,
    pub nodes: Vec<u64>,
    pub ids_to_node_indexes: BTreeMap<AccountId, u64>, // citizen id, node index
    pub node_indexes_to_ids: BTreeMap<u64, AccountId>, // node index, citizen id
}

'''
'''--- pallets/sortition-sum-game/src/weights.rs ---

//! Autogenerated weights for pallet_template
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-04-06, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Alexs-MacBook-Pro-2.local`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ../../target/release/node-template
// benchmark
// pallet
// --chain
// dev
// --pallet
// pallet_template
// --extrinsic
// *
// --steps=50
// --repeat=20
// --execution=wasm
// --wasm-execution=compiled
// --output
// pallets/template/src/weights.rs
// --template
// ../../.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_template.
pub trait WeightInfo {
	fn do_something() -> Weight;
	fn cause_error() -> Weight;
}

/// Weights for pallet_template using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: TemplateModule Something (r:0 w:1)
	/// Proof: TemplateModule Something (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn do_something() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 8_000_000 picoseconds.
		Weight::from_parts(9_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: TemplateModule Something (r:1 w:1)
	/// Proof: TemplateModule Something (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn cause_error() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `32`
		//  Estimated: `1489`
		// Minimum execution time: 6_000_000 picoseconds.
		Weight::from_parts(6_000_000, 1489)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: TemplateModule Something (r:0 w:1)
	/// Proof: TemplateModule Something (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn do_something() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 8_000_000 picoseconds.
		Weight::from_parts(9_000_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: TemplateModule Something (r:1 w:1)
	/// Proof: TemplateModule Something (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn cause_error() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `32`
		//  Estimated: `1489`
		// Minimum execution time: 6_000_000 picoseconds.
		Weight::from_parts(6_000_000, 1489)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}

'''
'''--- pallets/spaces/Cargo.toml ---
[package]
name = "pallet-spaces"
version = "4.0.0-dev"
description = "FRAME pallet template for defining custom runtime logic."
authors = ["Substrate DevHub <https://github.com/substrate-developer-hub>"]
homepage = "https://substrate.io"
edition = "2021"
license = "MIT-0"
publish = false
repository = "https://github.com/substrate-developer-hub/substrate-node-template/"

[package.metadata.docs.rs]
targets = ["x86_64-unknown-linux-gnu"]

[dependencies]
codec = { package = "parity-scale-codec", version = "3.2.2", default-features = false, features = [
	"derive",
] }
scale-info = { version = "2.5.0", default-features = false, features = ["derive"] }
frame-benchmarking = { version = "4.0.0-dev", default-features = false, optional = true, git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
frame-support = { version = "4.0.0-dev", default-features = false, git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
frame-system = { version = "4.0.0-dev", default-features = false, git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
pallet-timestamp = { git = 'https://github.com/paritytech/substrate', branch = "polkadot-v0.9.42", default-features = false }

pallet-support = { default-features = false, path = '../support' }

[dev-dependencies]
sp-core = { version = "7.0.0", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
sp-io = { version = "7.0.0", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
sp-runtime = { version = "7.0.0", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }

[features]
default = ["std"]
std = [
	"codec/std",
	"frame-benchmarking?/std",
	"frame-support/std",
	"frame-system/std",
	"scale-info/std",
]
runtime-benchmarks = ["frame-benchmarking/runtime-benchmarks"]
try-runtime = ["frame-support/try-runtime"]

'''
'''--- pallets/spaces/README.md ---
License: MIT-0
'''
'''--- pallets/spaces/src/benchmarking.rs ---
//! Benchmarking setup for pallet-template
#![cfg(feature = "runtime-benchmarks")]
use super::*;

#[allow(unused)]
use crate::Pallet as Template;
use frame_benchmarking::v2::*;
use frame_system::RawOrigin;

#[benchmarks]
mod benchmarks {
	use super::*;

	#[benchmark]
	fn do_something() {
		let value = 100u32.into();
		let caller: T::AccountId = whitelisted_caller();
		#[extrinsic_call]
		do_something(RawOrigin::Signed(caller), value);

		assert_eq!(Something::<T>::get(), Some(value));
	}

	#[benchmark]
	fn cause_error() {
		Something::<T>::put(100u32);
		let caller: T::AccountId = whitelisted_caller();
		#[extrinsic_call]
		cause_error(RawOrigin::Signed(caller));

		assert_eq!(Something::<T>::get(), Some(101u32));
	}

	impl_benchmark_test_suite!(Template, crate::mock::new_test_ext(), crate::mock::Test);
}

'''
'''--- pallets/spaces/src/extras.rs ---
use crate::*;

impl<T: Config> Pallet<T> {
	       /// Get `Space` by id from the storage or return `SpaceNotFound` error.
           pub fn require_space(space_id: SpaceId) -> Result<Space<T>, DispatchError> {
            Ok(Self::space_by_id(space_id).ok_or(Error::<T>::SpaceNotFound)?)
        }
}

'''
'''--- pallets/spaces/src/lib.rs ---
#![cfg_attr(not(feature = "std"), no_std)]

/// Edit this file to define custom logic or remove it if it is not needed.
/// Learn more about FRAME and the core library of Substrate FRAME pallets:
/// <https://docs.substrate.io/reference/frame-pallets/>
pub use pallet::*;

#[cfg(test)]
mod mock;

#[cfg(test)]
mod tests;

#[cfg(feature = "runtime-benchmarks")]
mod benchmarking;
pub mod weights;
pub use weights::*;

pub mod extras;
pub mod types;

use frame_support::sp_std::prelude::*;
// use scale_info::prelude::format;
use crate::types::RESERVED_SPACE_COUNT;

use frame_support::pallet_prelude::{DispatchResult, *};
use frame_system::pallet_prelude::*;
use pallet_support::{Content, SpaceId};
use types::Space;

#[frame_support::pallet]
pub mod pallet {
	use super::*;
	use frame_support::pallet_prelude::*;
	use frame_system::pallet_prelude::*;

	#[pallet::pallet]
	#[pallet::without_storage_info]
	pub struct Pallet<T>(_);

	/// Configure the pallet by specifying the parameters and types on which it depends.
	#[pallet::config]
	pub trait Config: frame_system::Config + pallet_timestamp::Config{
		/// Because this pallet emits events, it depends on the runtime's definition of an event.
		type RuntimeEvent: From<Event<Self>> + IsType<<Self as frame_system::Config>::RuntimeEvent>;
		/// Type representing the weight of this pallet
		type WeightInfo: WeightInfo;
	}

	// The pallet's runtime storage items.
	// https://docs.substrate.io/main-docs/build/runtime-storage/
	#[pallet::storage]
	#[pallet::getter(fn something)]
	// Learn more about declaring storage items:
	// https://docs.substrate.io/main-docs/build/runtime-storage/#declaring-storage-items
	pub type Something<T> = StorageValue<_, u32>;

	#[pallet::type_value]
    pub fn DefaultForNextSpaceId() -> SpaceId {
        RESERVED_SPACE_COUNT + 1
    }

	/// The next space id.
    #[pallet::storage]
    #[pallet::getter(fn next_space_id)]
    pub type NextSpaceId<T: Config> = StorageValue<_, SpaceId, ValueQuery, DefaultForNextSpaceId>;

	/// Get the details of a space by its' id.
    #[pallet::storage]
    #[pallet::getter(fn space_by_id)]
    pub type SpaceById<T: Config> = StorageMap<_, Twox64Concat, SpaceId, Space<T>>;

	// Pallets use events to inform users when important changes are made.
	// https://docs.substrate.io/main-docs/build/events-errors/
	#[pallet::event]
	#[pallet::generate_deposit(pub(super) fn deposit_event)]
	pub enum Event<T: Config> {
		/// Event documentation should end with an array that provides descriptive names for event
		/// parameters. [something, who]
		SomethingStored { something: u32, who: T::AccountId },
	}

	// Errors inform users that something went wrong.
	#[pallet::error]
	pub enum Error<T> {
		/// Error names should be descriptive.
		NoneValue,
		/// Errors should have helpful documentation associated with them.
		StorageOverflow,

		SpaceNotFound,
	}

	// Dispatchable functions allows users to interact with the pallet and invoke state changes.
	// These functions materialize as "extrinsics", which are often compared to transactions.
	// Dispatchable functions must be annotated with a weight and must return a DispatchResult.
	#[pallet::call]
	impl<T: Config> Pallet<T> {
		/// An example dispatchable that takes a singles value as a parameter, writes the value to
		/// storage and emits an event. This function must be dispatched by a signed extrinsic.
		#[pallet::call_index(0)]
		#[pallet::weight(<T as pallet::Config>::WeightInfo::do_something())]
		pub fn do_something(origin: OriginFor<T>, something: u32) -> DispatchResult {
			// Check that the extrinsic was signed and get the signer.
			// This function will return an error if the extrinsic is not signed.
			// https://docs.substrate.io/main-docs/build/origins/
			let who = ensure_signed(origin)?;

			// Update storage.
			<Something<T>>::put(something);

			// Emit an event.
			Self::deposit_event(Event::SomethingStored { something, who });
			// Return a successful DispatchResultWithPostInfo
			Ok(())
		}

		/// An example dispatchable that may throw a custom error.
		#[pallet::call_index(1)]
		#[pallet::weight(<T as pallet::Config>::WeightInfo::cause_error())]
		pub fn cause_error(origin: OriginFor<T>) -> DispatchResult {
			let _who = ensure_signed(origin)?;

			// Read a value from storage.
			match <Something<T>>::get() {
				// Return an error if the value has not been set.
				None => return Err(Error::<T>::NoneValue.into()),
				Some(old) => {
					// Increment the value read from storage; will error in the event of overflow.
					let new = old.checked_add(1).ok_or(Error::<T>::StorageOverflow)?;
					// Update the value in storage with the incremented result.
					<Something<T>>::put(new);
					Ok(())
				},
			}
		}
	}
}

'''
'''--- pallets/spaces/src/mock.rs ---
use crate as pallet_template;
use frame_support::{parameter_types, traits::{ConstU16, ConstU64}};
use sp_core::H256;
use sp_runtime::{
	testing::Header,
	traits::{BlakeTwo256, IdentityLookup},
};

type UncheckedExtrinsic = frame_system::mocking::MockUncheckedExtrinsic<Test>;
type Block = frame_system::mocking::MockBlock<Test>;

// Configure a mock runtime to test the pallet.
frame_support::construct_runtime!(
	pub enum Test where
		Block = Block,
		NodeBlock = Block,
		UncheckedExtrinsic = UncheckedExtrinsic,
	{
		System: frame_system,
		TemplateModule: pallet_template,
		Timestamp: pallet_timestamp,
	}
);

impl frame_system::Config for Test {
	type BaseCallFilter = frame_support::traits::Everything;
	type BlockWeights = ();
	type BlockLength = ();
	type DbWeight = ();
	type RuntimeOrigin = RuntimeOrigin;
	type RuntimeCall = RuntimeCall;
	type Index = u64;
	type BlockNumber = u64;
	type Hash = H256;
	type Hashing = BlakeTwo256;
	type AccountId = u64;
	type Lookup = IdentityLookup<Self::AccountId>;
	type Header = Header;
	type RuntimeEvent = RuntimeEvent;
	type BlockHashCount = ConstU64<250>;
	type Version = ();
	type PalletInfo = PalletInfo;
	type AccountData = ();
	type OnNewAccount = ();
	type OnKilledAccount = ();
	type SystemWeightInfo = ();
	type SS58Prefix = ConstU16<42>;
	type OnSetCode = ();
	type MaxConsumers = frame_support::traits::ConstU32<16>;
}

impl pallet_template::Config for Test {
	type RuntimeEvent = RuntimeEvent;
	type WeightInfo = ();
}

parameter_types! {
    pub const MinimumPeriod: u64 = 5;
}

impl pallet_timestamp::Config for Test {
    type Moment = u64;
    type OnTimestampSet = ();
    type MinimumPeriod = MinimumPeriod;
    type WeightInfo = ();
}

// Build genesis storage according to the mock runtime.
pub fn new_test_ext() -> sp_io::TestExternalities {
	frame_system::GenesisConfig::default().build_storage::<Test>().unwrap().into()
}

'''
'''--- pallets/spaces/src/tests.rs ---
use crate::{mock::*, Error, Event};
use frame_support::{assert_noop, assert_ok};

#[test]
fn it_works_for_default_value() {
	new_test_ext().execute_with(|| {
		// Go past genesis block so events get deposited
		System::set_block_number(1);
		// Dispatch a signed extrinsic.
		assert_ok!(TemplateModule::do_something(RuntimeOrigin::signed(1), 42));
		// Read pallet storage and assert an expected result.
		assert_eq!(TemplateModule::something(), Some(42));
		// Assert that the correct event was deposited
		System::assert_last_event(Event::SomethingStored { something: 42, who: 1 }.into());
	});
}

#[test]
fn correct_error_for_none_value() {
	new_test_ext().execute_with(|| {
		// Ensure the expected error is thrown when no value is present.
		assert_noop!(
			TemplateModule::cause_error(RuntimeOrigin::signed(1)),
			Error::<Test>::NoneValue
		);
	});
}

'''
'''--- pallets/spaces/src/types.rs ---
use frame_support::{pallet_prelude::*};
use frame_support::sp_std::{vec::Vec};
use scale_info::TypeInfo;

use super::*;

use pallet_support::{new_who_and_when, WhoAndWhenOf};

pub const FIRST_SPACE_ID: u64 = 1;
pub const RESERVED_SPACE_COUNT: u64 = 1000;

/// Information about a space's owner, its' content, visibility and custom permissions.
#[derive(Encode, Decode, Clone, Eq, PartialEq, RuntimeDebug, TypeInfo)]
#[scale_info(skip_type_params(T))]
pub struct Space<T: Config> {
    /// Unique sequential identifier of a space. Examples of space ids: `1`, `2`, `3`, and so on.
    pub id: SpaceId,

    pub created: WhoAndWhenOf<T>,
    /// True, if the content of this space was edited.
    pub edited: bool,

    /// The current owner of a given space.
    pub owner: T::AccountId,

    // The next fields can be updated by the owner:
    pub content: Content,

    /// Hidden field is used to recommend to end clients (web and mobile apps) that a particular
    /// space and its' posts should not be shown.
    pub hidden: bool,

}

#[derive(Encode, Decode, Clone, Eq, PartialEq, Default, RuntimeDebug, TypeInfo)]
pub struct SpaceUpdate {
    pub content: Option<Content>,
    pub hidden: Option<bool>,
}

impl<T: Config> Space<T> {
    pub fn new(
        id: SpaceId,
        created_by: T::AccountId,
        content: Content,
    ) -> Self {
        Space {
            id,
            created: new_who_and_when::<T>(created_by.clone()),
            edited: false,
            owner: created_by,
            content,
            hidden: false,
        }
    }

    pub fn is_owner(&self, account: &T::AccountId) -> bool {
        self.owner == *account
    }

}

'''
'''--- pallets/spaces/src/weights.rs ---

//! Autogenerated weights for pallet_template
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-04-06, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Alexs-MacBook-Pro-2.local`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ../../target/release/node-template
// benchmark
// pallet
// --chain
// dev
// --pallet
// pallet_template
// --extrinsic
// *
// --steps=50
// --repeat=20
// --execution=wasm
// --wasm-execution=compiled
// --output
// pallets/template/src/weights.rs
// --template
// ../../.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_template.
pub trait WeightInfo {
	fn do_something() -> Weight;
	fn cause_error() -> Weight;
}

/// Weights for pallet_template using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: TemplateModule Something (r:0 w:1)
	/// Proof: TemplateModule Something (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn do_something() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 8_000_000 picoseconds.
		Weight::from_parts(9_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: TemplateModule Something (r:1 w:1)
	/// Proof: TemplateModule Something (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn cause_error() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `32`
		//  Estimated: `1489`
		// Minimum execution time: 6_000_000 picoseconds.
		Weight::from_parts(6_000_000, 1489)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: TemplateModule Something (r:0 w:1)
	/// Proof: TemplateModule Something (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn do_something() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 8_000_000 picoseconds.
		Weight::from_parts(9_000_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: TemplateModule Something (r:1 w:1)
	/// Proof: TemplateModule Something (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn cause_error() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `32`
		//  Estimated: `1489`
		// Minimum execution time: 6_000_000 picoseconds.
		Weight::from_parts(6_000_000, 1489)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}

'''
'''--- pallets/support/Cargo.toml ---
[package]
name = "pallet-support"
version = "0.1.0"
edition = "2021"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[package.metadata.docs.rs]
targets = ["x86_64-unknown-linux-gnu"]

[dependencies]
codec = { package = "parity-scale-codec", version = "3.0.0", default-features = false, features = [
	"derive",
] }
scale-info = { version = "2.0.1", default-features = false, features = ["derive"] }
frame-support = { default-features = false, version = "4.0.0-dev", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42"}
frame-system = { default-features = false, version = "4.0.0-dev", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
frame-benchmarking = { default-features = false, version = "4.0.0-dev", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42", optional = true }
pallet-balances = { default-features = false, version = "4.0.0-dev", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
sp-io = { default-features = false, version = "7.0.0", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
log = { default-features= false, version="0.4"}
sp-runtime = { default-features = false, version = "7.0.0", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
sp-std = { default-features = false, version = "5.0.0", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
sp-arithmetic = { default-features = false, version = "6.0.0", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
pallet-timestamp = {git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42", default-features = false }
strum = { version = "0.24", default-features = false, features = ["derive"] }

[dev-dependencies]
sp-core = { default-features = false, version = "7.0.0", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
sp-io = { default-features = false, version = "7.0.0", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
sp-runtime = { default-features = false, version = "7.0.0", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
frame-support-test = {version = "3.0.0-dev", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }

[features]
default = ["std"]
std = [
	"codec/std",
	"scale-info/std",
	"frame-support/std",
	"frame-system/std",
	"frame-benchmarking/std",
	"pallet-balances/std",
	"log/std",
    "sp-runtime/std",
	"sp-std/std",
    "sp-arithmetic/std",
    "strum/std", 
]

runtime-benchmarks = ["frame-benchmarking/runtime-benchmarks"]
try-runtime = ["frame-support/try-runtime"]

'''
'''--- pallets/support/src/lib.rs ---
#![cfg_attr(not(feature = "std"), no_std)]

use codec::{Decode, Encode};
use scale_info::TypeInfo;

use frame_support::pallet_prelude::*;
// use frame_support::sp_std::{vec::Vec};
use sp_std::{collections::btree_set::BTreeSet, vec, vec::Vec};

pub type SpaceId = u64;
pub type PostId = u64;
pub type PositiveExternalityPostId = u64;

#[derive(Encode, Decode, Clone, Eq, PartialEq, RuntimeDebug, TypeInfo)]
pub struct WhoAndWhen<AccountId, BlockNumber, Moment> {
    pub account: AccountId,
    pub block: BlockNumber,
    pub time: Moment,
}

pub type WhoAndWhenOf<T> = WhoAndWhen<
    <T as frame_system::Config>::AccountId,
    <T as frame_system::Config>::BlockNumber,
    <T as pallet_timestamp::Config>::Moment,
>;

pub fn new_who_and_when<T>(
    account: T::AccountId,
) -> WhoAndWhen<T::AccountId, T::BlockNumber, T::Moment>
where
    T: frame_system::Config + pallet_timestamp::Config,
{
    WhoAndWhen {
        account,
        block: frame_system::Pallet::<T>::block_number(),
        time: pallet_timestamp::Pallet::<T>::now(),
    }
}

#[derive(Encode, Decode, Clone, Eq, PartialEq, RuntimeDebug, TypeInfo)]
pub enum Content {
    /// No content.
    None,
    /// A raw vector of bytes.
    Other(Vec<u8>),
    /// IPFS CID v0 of content.
    IPFS(Vec<u8>),
}

impl From<Content> for Vec<u8> {
    fn from(content: Content) -> Vec<u8> {
        match content {
            Content::None => vec![],
            Content::Other(vec_u8) => vec_u8,
            Content::IPFS(vec_u8) => vec_u8,
        }
    }
}

impl Default for Content {
    fn default() -> Self {
        Self::None
    }
}

impl Content {
    pub fn is_none(&self) -> bool {
        self == &Self::None
    }

    pub fn is_some(&self) -> bool {
        !self.is_none()
    }

    pub fn is_ipfs(&self) -> bool {
        matches!(self, Self::IPFS(_))
    }
}

#[derive(Encode, Decode, RuntimeDebug, strum::IntoStaticStr)]
pub enum ContentError {
    /// IPFS CID is invalid.
    InvalidIpfsCid,
    /// `Other` content type is not yet supported.
    OtherContentTypeNotSupported,
    /// Content type is `None`.
    ContentIsEmpty,
}

impl From<ContentError> for DispatchError {
    fn from(err: ContentError) -> DispatchError {
        Self::Other(err.into())
    }
}

pub fn ensure_content_is_valid(content: Content) -> DispatchResult {
    match content {
        Content::None => Ok(()),
        Content::Other(_) => Err(ContentError::OtherContentTypeNotSupported.into()),
        Content::IPFS(ipfs_cid) => {
            let len = ipfs_cid.len();
            // IPFS CID v0 is 46 bytes.
            // IPFS CID v1 is 59 bytes.
            ensure!(len == 46 || len == 59, ContentError::InvalidIpfsCid);
            Ok(())
        },
    }
}

/// Ensure that a given content is not `None`.
pub fn ensure_content_is_some(content: &Content) -> DispatchResult {
    ensure!(content.is_some(), ContentError::ContentIsEmpty);
    Ok(())
}

pub fn remove_from_vec<F: PartialEq>(vector: &mut Vec<F>, element: F) {
    if let Some(index) = vector.iter().position(|x| *x == element) {
        vector.swap_remove(index);
    }
}

pub fn remove_from_bounded_vec<F: PartialEq, S>(vector: &mut BoundedVec<F, S>, element: F) {
    if let Some(index) = vector.iter().position(|x| *x == element) {
        vector.swap_remove(index);
    }
}

pub fn bool_to_option(value: bool) -> Option<bool> {
    if value {
        Some(value)
    } else {
        None
    }
}

'''
'''--- pallets/tags/Cargo.toml ---
[package]
name = "pallet-tags"
version = "4.0.0-dev"
description = "FRAME pallet template for defining custom runtime logic."
authors = ["Substrate DevHub <https://github.com/substrate-developer-hub>"]
homepage = "https://substrate.io"
edition = "2021"
license = "MIT-0"
publish = false
repository = "https://github.com/substrate-developer-hub/substrate-node-template/"

[package.metadata.docs.rs]
targets = ["x86_64-unknown-linux-gnu"]

[dependencies]
codec = { package = "parity-scale-codec", version = "3.2.2", default-features = false, features = [
	"derive",
] }
scale-info = { version = "2.5.0", default-features = false, features = ["derive"] }
frame-benchmarking = { version = "4.0.0-dev", default-features = false, optional = true, git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
frame-support = { version = "4.0.0-dev", default-features = false, git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
frame-system = { version = "4.0.0-dev", default-features = false, git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }

[dev-dependencies]
sp-core = { version = "7.0.0", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
sp-io = { version = "7.0.0", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
sp-runtime = { version = "7.0.0", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }

[features]
default = ["std"]
std = [
	"codec/std",
	"frame-benchmarking?/std",
	"frame-support/std",
	"frame-system/std",
	"scale-info/std",
]
runtime-benchmarks = ["frame-benchmarking/runtime-benchmarks"]
try-runtime = ["frame-support/try-runtime"]

'''
'''--- pallets/tags/README.md ---
License: MIT-0
'''
'''--- pallets/tags/src/benchmarking.rs ---
//! Benchmarking setup for pallet-template
#![cfg(feature = "runtime-benchmarks")]
use super::*;

#[allow(unused)]
use crate::Pallet as Template;
use frame_benchmarking::v2::*;
use frame_system::RawOrigin;

#[benchmarks]
mod benchmarks {
	use super::*;

	#[benchmark]
	fn do_something() {
		let value = 100u32.into();
		let caller: T::AccountId = whitelisted_caller();
		#[extrinsic_call]
		do_something(RawOrigin::Signed(caller), value);

		assert_eq!(Something::<T>::get(), Some(value));
	}

	#[benchmark]
	fn cause_error() {
		Something::<T>::put(100u32);
		let caller: T::AccountId = whitelisted_caller();
		#[extrinsic_call]
		cause_error(RawOrigin::Signed(caller));

		assert_eq!(Something::<T>::get(), Some(101u32));
	}

	impl_benchmark_test_suite!(Template, crate::mock::new_test_ext(), crate::mock::Test);
}

'''
'''--- pallets/tags/src/extras.rs ---
use crate::*;

impl<T: Config> Pallet<T> {
	/// Remove tags and remove DownVoteTags
	pub(super) fn remove_tags(departmentid: DepartmentId, tag: Vec<u8>) -> DispatchResult {
		let mut tags = Tags::<T>::get(&departmentid);

		match tags.binary_search(&tag) {
			Ok(index) => {
				tags.remove(index);
				Tags::<T>::insert(&departmentid, tags);
				DownVoteDetailsTags::<T>::remove(&departmentid, &tag);
				Self::deposit_event(Event::TagRemoved(departmentid, tag));
				Ok(())
			},
			Err(_) => Err(Error::<T>::TagDoesnotExists.into()),
		}
	}

	// Ensure tag exists
	pub(super) fn ensure_tag_exists(departmentid: DepartmentId, tag: Vec<u8>) -> DispatchResult {
		let tags = Tags::<T>::get(&departmentid);

		match tags.binary_search(&tag) {
			Ok(_) => Ok(()),
			Err(_) => Err(Error::<T>::TagDoesnotExists.into()),
		}
	}

	/// Ensure user has not downvoted. If downvoted add the AccountId
	pub(super) fn ensure_user_not_downvoted_then_downvote(
		departmentid: DepartmentId,
		who: T::AccountId,
		tag: Vec<u8>,
	) -> Result<DownVoteNum, DispatchError> {
		let mut down_vote_details = DownVoteDetailsTags::<T>::get(&departmentid, &tag);
		let mut users_that_downvoted = down_vote_details.downvote_users;
		let dv = down_vote_details.downvote.checked_add(1).ok_or("overflow")?;

		match users_that_downvoted.binary_search(&who) {
			Ok(_) => Err(Error::<T>::UserAlreadyDownVoted.into()),
			Err(index) => {
				users_that_downvoted.insert(index, who);
				down_vote_details.downvote_users = users_that_downvoted;
				down_vote_details.downvote = dv;
				DownVoteDetailsTags::<T>::insert(&departmentid, &tag, down_vote_details);
				Ok(dv)
			},
		}
	}
}

'''
'''--- pallets/tags/src/lib.rs ---
#![cfg_attr(not(feature = "std"), no_std)]

/// Edit this file to define custom logic or remove it if it is not needed.
/// Learn more about FRAME and the core library of Substrate FRAME pallets:
/// <https://docs.substrate.io/reference/frame-pallets/>
pub use pallet::*;

#[cfg(test)]
mod mock;

#[cfg(test)]
mod tests;

#[cfg(feature = "runtime-benchmarks")]
mod benchmarking;
pub mod weights;
pub use weights::*;

mod extras;
mod types;

use frame_support::sp_std::prelude::*;

type DepartmentId = u128;
type DownVoteNum = u8;
use frame_support::pallet_prelude::{DispatchResult, *};
use frame_system::pallet_prelude::*;
use types::{DownVoteDetails};

#[frame_support::pallet]
pub mod pallet {
	use super::*;
	use frame_support::pallet_prelude::*;
	use frame_system::pallet_prelude::*;

	#[pallet::pallet]
	#[pallet::without_storage_info]
	pub struct Pallet<T>(_);

	/// Configure the pallet by specifying the parameters and types on which it depends.
	#[pallet::config]
	pub trait Config: frame_system::Config {
		/// Because this pallet emits events, it depends on the runtime's definition of an event.
		type RuntimeEvent: From<Event<Self>> + IsType<<Self as frame_system::Config>::RuntimeEvent>;
		/// Type representing the weight of this pallet
		type WeightInfo: WeightInfo;
	}

	// The pallet's runtime storage items.
	// https://docs.substrate.io/main-docs/build/runtime-storage/
	#[pallet::storage]
	#[pallet::getter(fn something)]
	// Learn more about declaring storage items:
	// https://docs.substrate.io/main-docs/build/runtime-storage/#declaring-storage-items
	pub type Something<T> = StorageValue<_, u32>;

	/// Department tags
	#[pallet::storage]
	#[pallet::getter(fn department_tags)]
	pub(super) type Tags<T> =
		StorageMap<_, Blake2_128Concat, DepartmentId, Vec<Vec<u8>>, ValueQuery>;

	/// Down vote a tag
	#[pallet::storage]
	#[pallet::getter(fn downvote_details_of_tag)]
	pub(super) type DownVoteDetailsTags<T:Config> = StorageDoubleMap<
		_,
		Blake2_128Concat,
		DepartmentId,
		Blake2_128Concat,
		Vec<u8>,
		DownVoteDetails<T::AccountId>,
		ValueQuery,
	>;

	/// Default Threshold down vote for tag
	#[pallet::type_value]
	pub fn DefaultDownVoteThreshold() -> DownVoteNum {
		5
	}

	/// Threshold for down vote
	#[pallet::storage]
	#[pallet::getter(fn downvote_threshold)]
	pub type DownVoteThreshold<T> =
		StorageValue<_, DownVoteNum, ValueQuery, DefaultDownVoteThreshold>;

	// Pallets use events to inform users when important changes are made.
	// https://docs.substrate.io/main-docs/build/events-errors/
	#[pallet::event]
	#[pallet::generate_deposit(pub(super) fn deposit_event)]
	pub enum Event<T: Config> {
		/// Event documentation should end with an array that provides descriptive names for event
		/// parameters. [something, who]
		SomethingStored { something: u32, who: T::AccountId },

		TagInserted(DepartmentId, Vec<u8>), // Tag inserted
		TagRemoved(DepartmentId, Vec<u8>),
	}

	// Errors inform users that something went wrong.
	#[pallet::error]
	pub enum Error<T> {
		/// Error names should be descriptive.
		NoneValue,
		/// Errors should have helpful documentation associated with them.
		StorageOverflow,
		TagExists,
		TagDoesnotExists,
		UserAlreadyDownVoted,
	}

	// Dispatchable functions allows users to interact with the pallet and invoke state changes.
	// These functions materialize as "extrinsics", which are often compared to transactions.
	// Dispatchable functions must be annotated with a weight and must return a DispatchResult.
	#[pallet::call]
	impl<T: Config> Pallet<T> {
				/// Create tag
		/// [] Check who belongs to department representative
		/// [] Limit the length of tag
		#[pallet::call_index(0)]
		#[pallet::weight(Weight::from_parts(10_000, u64::MAX) + T::DbWeight::get().writes(1))]
		pub fn add_tag(
			origin: OriginFor<T>,
			departmentid: DepartmentId,
			tag: Vec<u8>,
		) -> DispatchResult {
			let who = ensure_signed(origin)?;

			let mut tags = Tags::<T>::get(&departmentid);

			match tags.binary_search(&tag) {
				Ok(_) => Err(Error::<T>::TagExists.into()),
				Err(index) => {
					tags.insert(index, tag.clone());
					Tags::<T>::insert(&departmentid, tags);
					Self::deposit_event(Event::TagInserted(departmentid, tag));
					Ok(())
				},
			}
		}
		/// Downvote tag
		/// [] Check who belongs to department representive
		/// [] Check tags exsts in Tags
		/// [✓] Check user has not downvoted again
		/// [✓] Delete tag if it reaches maximum downvote
		
		#[pallet::call_index(1)]
		#[pallet::weight(Weight::from_parts(10_000, u64::MAX) + T::DbWeight::get().writes(1))]
		pub fn donwvote_tag(
			origin: OriginFor<T>,
			departmentid: DepartmentId,
			tag: Vec<u8>,
		) -> DispatchResult {
			let who = ensure_signed(origin)?;
			Self::ensure_tag_exists(departmentid,tag.clone())?;
			let dv = Self::ensure_user_not_downvoted_then_downvote(departmentid, who, tag.clone())?;
			let threshold = DownVoteThreshold::<T>::get();

			if dv >= threshold {
				Self::remove_tags(departmentid, tag)?;
			}

			Ok(())
		}
        // Remove down vote

		
		
	}
}

'''
'''--- pallets/tags/src/mock.rs ---
use crate as pallet_template;
use frame_support::traits::{ConstU16, ConstU64};
use sp_core::H256;
use sp_runtime::{
	testing::Header,
	traits::{BlakeTwo256, IdentityLookup},
};

type UncheckedExtrinsic = frame_system::mocking::MockUncheckedExtrinsic<Test>;
type Block = frame_system::mocking::MockBlock<Test>;

// Configure a mock runtime to test the pallet.
frame_support::construct_runtime!(
	pub enum Test where
		Block = Block,
		NodeBlock = Block,
		UncheckedExtrinsic = UncheckedExtrinsic,
	{
		System: frame_system,
		TemplateModule: pallet_template,
	}
);

impl frame_system::Config for Test {
	type BaseCallFilter = frame_support::traits::Everything;
	type BlockWeights = ();
	type BlockLength = ();
	type DbWeight = ();
	type RuntimeOrigin = RuntimeOrigin;
	type RuntimeCall = RuntimeCall;
	type Index = u64;
	type BlockNumber = u64;
	type Hash = H256;
	type Hashing = BlakeTwo256;
	type AccountId = u64;
	type Lookup = IdentityLookup<Self::AccountId>;
	type Header = Header;
	type RuntimeEvent = RuntimeEvent;
	type BlockHashCount = ConstU64<250>;
	type Version = ();
	type PalletInfo = PalletInfo;
	type AccountData = ();
	type OnNewAccount = ();
	type OnKilledAccount = ();
	type SystemWeightInfo = ();
	type SS58Prefix = ConstU16<42>;
	type OnSetCode = ();
	type MaxConsumers = frame_support::traits::ConstU32<16>;
}

impl pallet_template::Config for Test {
	type RuntimeEvent = RuntimeEvent;
	type WeightInfo = ();
}

// Build genesis storage according to the mock runtime.
pub fn new_test_ext() -> sp_io::TestExternalities {
	frame_system::GenesisConfig::default().build_storage::<Test>().unwrap().into()
}

'''
'''--- pallets/tags/src/tests.rs ---
use crate::{mock::*, Error, Event, types::DownVoteDetails};
use frame_support::{assert_noop, assert_ok};

#[test]
fn add_tag_works() {
	new_test_ext().execute_with(|| {
		let tag = "Municipality".as_bytes().to_vec();
		assert_ok!(TemplateModule::add_tag(RuntimeOrigin::signed(1), 1, tag.clone()));
		let tags = TemplateModule::department_tags(1);
		let mut value_tags: Vec<Vec<u8>> = vec![];
		value_tags.push(tag);
		assert_eq!(tags, value_tags);
	});
}

#[test]
fn downvote_works() {
	new_test_ext().execute_with(|| {
		let tag = "Municipality".as_bytes().to_vec();
		assert_ok!(TemplateModule::add_tag(RuntimeOrigin::signed(1), 1, tag.clone()));
		assert_ok!(TemplateModule::donwvote_tag(RuntimeOrigin::signed(1), 1, tag.clone()));
		let downvote_details = TemplateModule::downvote_details_of_tag(1, tag.clone());
		assert_eq!(downvote_details.downvote, 1);
	});
}

#[test]
fn downvote_again_error() {
	new_test_ext().execute_with(|| {
		let tag = "Municipality".as_bytes().to_vec();
		assert_ok!(TemplateModule::add_tag(RuntimeOrigin::signed(1), 1, tag.clone()));
		assert_ok!(TemplateModule::donwvote_tag(RuntimeOrigin::signed(1), 1, tag.clone()));
		let downvote_details = TemplateModule::downvote_details_of_tag(1, tag.clone());
		assert_eq!(downvote_details.downvote, 1);
		let tag2 = "Education".as_bytes().to_vec();
		assert_ok!(TemplateModule::add_tag(RuntimeOrigin::signed(1), 1, tag2.clone()));
		assert_ok!(TemplateModule::donwvote_tag(RuntimeOrigin::signed(1), 1, tag2.clone()));
		let downvote_details = TemplateModule::downvote_details_of_tag(1, tag2.clone());
		assert_eq!(downvote_details.downvote, 1);
		assert_noop!(
			TemplateModule::donwvote_tag(RuntimeOrigin::signed(1), 1, tag.clone()),
			Error::<Test>::UserAlreadyDownVoted
		);
		assert_ok!(TemplateModule::donwvote_tag(RuntimeOrigin::signed(2), 1, tag.clone()));
		let downvote_details = TemplateModule::downvote_details_of_tag(1, tag.clone());
		assert_eq!(downvote_details.downvote, 2);
	});
}

#[test]
fn downvote_remove_tag() {
	new_test_ext().execute_with(|| {
		let tag = "Municipality".as_bytes().to_vec();
		let down_vote_threshold = TemplateModule::downvote_threshold();
		assert_ok!(TemplateModule::add_tag(RuntimeOrigin::signed(1), 1, tag.clone()));
		for x in 1..down_vote_threshold {
			assert_ok!(TemplateModule::donwvote_tag(RuntimeOrigin::signed(x.into()), 1, tag.clone()));
			let downvote_details = TemplateModule::downvote_details_of_tag(1, tag.clone());
			assert_eq!(downvote_details.downvote, x);
			// println!("x={}", x);
		}
		assert_ok!(TemplateModule::donwvote_tag(RuntimeOrigin::signed(5), 1, tag.clone()));
		assert_noop!(
			TemplateModule::donwvote_tag(RuntimeOrigin::signed(6), 1, tag.clone()),
			Error::<Test>::TagDoesnotExists
		);
		let value_tags: Vec<Vec<u8>> = vec![];
		assert_eq!(TemplateModule::department_tags(1), value_tags);
		let downvote_details = DownVoteDetails::default();
		assert_eq!(TemplateModule::downvote_details_of_tag(1, tag.clone()), downvote_details);
	});
}

'''
'''--- pallets/tags/src/types.rs ---
use frame_support::{pallet_prelude::*};
use frame_support::sp_std::{vec::Vec};
use scale_info::TypeInfo;
use crate::DownVoteNum;

#[derive(PartialEq, Eq, PartialOrd, Ord, Clone, Encode, Decode, RuntimeDebug, TypeInfo)]
pub struct DownVoteDetails<AccountId> {
    pub downvote: DownVoteNum,
    pub downvote_users: Vec<AccountId>,
}

impl<AccountId> Default for DownVoteDetails<AccountId> {
    fn default() -> Self {
        Self {downvote: Default::default(), downvote_users: vec![]}
    }
}
'''
'''--- pallets/tags/src/weights.rs ---

//! Autogenerated weights for pallet_template
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-04-06, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Alexs-MacBook-Pro-2.local`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ../../target/release/node-template
// benchmark
// pallet
// --chain
// dev
// --pallet
// pallet_template
// --extrinsic
// *
// --steps=50
// --repeat=20
// --execution=wasm
// --wasm-execution=compiled
// --output
// pallets/template/src/weights.rs
// --template
// ../../.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_template.
pub trait WeightInfo {
	fn do_something() -> Weight;
	fn cause_error() -> Weight;
}

/// Weights for pallet_template using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: TemplateModule Something (r:0 w:1)
	/// Proof: TemplateModule Something (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn do_something() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 8_000_000 picoseconds.
		Weight::from_parts(9_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: TemplateModule Something (r:1 w:1)
	/// Proof: TemplateModule Something (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn cause_error() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `32`
		//  Estimated: `1489`
		// Minimum execution time: 6_000_000 picoseconds.
		Weight::from_parts(6_000_000, 1489)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: TemplateModule Something (r:0 w:1)
	/// Proof: TemplateModule Something (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn do_something() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 8_000_000 picoseconds.
		Weight::from_parts(9_000_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: TemplateModule Something (r:1 w:1)
	/// Proof: TemplateModule Something (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn cause_error() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `32`
		//  Estimated: `1489`
		// Minimum execution time: 6_000_000 picoseconds.
		Weight::from_parts(6_000_000, 1489)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}

'''
'''--- pallets/template/Cargo.toml ---
[package]
name = "pallet-template"
version = "4.0.0-dev"
description = "FRAME pallet template for defining custom runtime logic."
authors = ["Substrate DevHub <https://github.com/substrate-developer-hub>"]
homepage = "https://substrate.io"
edition = "2021"
license = "MIT-0"
publish = false
repository = "https://github.com/substrate-developer-hub/substrate-node-template/"

[package.metadata.docs.rs]
targets = ["x86_64-unknown-linux-gnu"]

[dependencies]
codec = { package = "parity-scale-codec", version = "3.2.2", default-features = false, features = [
	"derive",
] }
scale-info = { version = "2.5.0", default-features = false, features = ["derive"] }
frame-benchmarking = { version = "4.0.0-dev", default-features = false, optional = true, git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
frame-support = { version = "4.0.0-dev", default-features = false, git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
frame-system = { version = "4.0.0-dev", default-features = false, git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }

[dev-dependencies]
sp-core = { version = "7.0.0", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
sp-io = { version = "7.0.0", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
sp-runtime = { version = "7.0.0", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }

[features]
default = ["std"]
std = [
	"codec/std",
	"frame-benchmarking?/std",
	"frame-support/std",
	"frame-system/std",
	"scale-info/std",
]
runtime-benchmarks = ["frame-benchmarking/runtime-benchmarks"]
try-runtime = ["frame-support/try-runtime"]

'''
'''--- pallets/template/README.md ---
License: MIT-0
'''
'''--- pallets/template/src/benchmarking.rs ---
//! Benchmarking setup for pallet-template
#![cfg(feature = "runtime-benchmarks")]
use super::*;

#[allow(unused)]
use crate::Pallet as Template;
use frame_benchmarking::v2::*;
use frame_system::RawOrigin;

#[benchmarks]
mod benchmarks {
	use super::*;

	#[benchmark]
	fn do_something() {
		let value = 100u32.into();
		let caller: T::AccountId = whitelisted_caller();
		#[extrinsic_call]
		do_something(RawOrigin::Signed(caller), value);

		assert_eq!(Something::<T>::get(), Some(value));
	}

	#[benchmark]
	fn cause_error() {
		Something::<T>::put(100u32);
		let caller: T::AccountId = whitelisted_caller();
		#[extrinsic_call]
		cause_error(RawOrigin::Signed(caller));

		assert_eq!(Something::<T>::get(), Some(101u32));
	}

	impl_benchmark_test_suite!(Template, crate::mock::new_test_ext(), crate::mock::Test);
}

'''
'''--- pallets/template/src/lib.rs ---
#![cfg_attr(not(feature = "std"), no_std)]

/// Edit this file to define custom logic or remove it if it is not needed.
/// Learn more about FRAME and the core library of Substrate FRAME pallets:
/// <https://docs.substrate.io/reference/frame-pallets/>
pub use pallet::*;

#[cfg(test)]
mod mock;

#[cfg(test)]
mod tests;

#[cfg(feature = "runtime-benchmarks")]
mod benchmarking;
pub mod weights;
pub use weights::*;

#[frame_support::pallet]
pub mod pallet {
	use super::*;
	use frame_support::pallet_prelude::*;
	use frame_system::pallet_prelude::*;

	#[pallet::pallet]
	pub struct Pallet<T>(_);

	/// Configure the pallet by specifying the parameters and types on which it depends.
	#[pallet::config]
	pub trait Config: frame_system::Config {
		/// Because this pallet emits events, it depends on the runtime's definition of an event.
		type RuntimeEvent: From<Event<Self>> + IsType<<Self as frame_system::Config>::RuntimeEvent>;
		/// Type representing the weight of this pallet
		type WeightInfo: WeightInfo;
	}

	// The pallet's runtime storage items.
	// https://docs.substrate.io/main-docs/build/runtime-storage/
	#[pallet::storage]
	#[pallet::getter(fn something)]
	// Learn more about declaring storage items:
	// https://docs.substrate.io/main-docs/build/runtime-storage/#declaring-storage-items
	pub type Something<T> = StorageValue<_, u32>;

	// Pallets use events to inform users when important changes are made.
	// https://docs.substrate.io/main-docs/build/events-errors/
	#[pallet::event]
	#[pallet::generate_deposit(pub(super) fn deposit_event)]
	pub enum Event<T: Config> {
		/// Event documentation should end with an array that provides descriptive names for event
		/// parameters. [something, who]
		SomethingStored { something: u32, who: T::AccountId },
	}

	// Errors inform users that something went wrong.
	#[pallet::error]
	pub enum Error<T> {
		/// Error names should be descriptive.
		NoneValue,
		/// Errors should have helpful documentation associated with them.
		StorageOverflow,
	}

	// Dispatchable functions allows users to interact with the pallet and invoke state changes.
	// These functions materialize as "extrinsics", which are often compared to transactions.
	// Dispatchable functions must be annotated with a weight and must return a DispatchResult.
	#[pallet::call]
	impl<T: Config> Pallet<T> {
		/// An example dispatchable that takes a singles value as a parameter, writes the value to
		/// storage and emits an event. This function must be dispatched by a signed extrinsic.
		#[pallet::call_index(0)]
		#[pallet::weight(T::WeightInfo::do_something())]
		pub fn do_something(origin: OriginFor<T>, something: u32) -> DispatchResult {
			// Check that the extrinsic was signed and get the signer.
			// This function will return an error if the extrinsic is not signed.
			// https://docs.substrate.io/main-docs/build/origins/
			let who = ensure_signed(origin)?;

			// Update storage.
			<Something<T>>::put(something);

			// Emit an event.
			Self::deposit_event(Event::SomethingStored { something, who });
			// Return a successful DispatchResultWithPostInfo
			Ok(())
		}

		/// An example dispatchable that may throw a custom error.
		#[pallet::call_index(1)]
		#[pallet::weight(T::WeightInfo::cause_error())]
		pub fn cause_error(origin: OriginFor<T>) -> DispatchResult {
			let _who = ensure_signed(origin)?;

			// Read a value from storage.
			match <Something<T>>::get() {
				// Return an error if the value has not been set.
				None => return Err(Error::<T>::NoneValue.into()),
				Some(old) => {
					// Increment the value read from storage; will error in the event of overflow.
					let new = old.checked_add(1).ok_or(Error::<T>::StorageOverflow)?;
					// Update the value in storage with the incremented result.
					<Something<T>>::put(new);
					Ok(())
				},
			}
		}
	}
}

'''
'''--- pallets/template/src/mock.rs ---
use crate as pallet_template;
use frame_support::traits::{ConstU16, ConstU64};
use sp_core::H256;
use sp_runtime::{
	testing::Header,
	traits::{BlakeTwo256, IdentityLookup},
};

type UncheckedExtrinsic = frame_system::mocking::MockUncheckedExtrinsic<Test>;
type Block = frame_system::mocking::MockBlock<Test>;

// Configure a mock runtime to test the pallet.
frame_support::construct_runtime!(
	pub enum Test where
		Block = Block,
		NodeBlock = Block,
		UncheckedExtrinsic = UncheckedExtrinsic,
	{
		System: frame_system,
		TemplateModule: pallet_template,
	}
);

impl frame_system::Config for Test {
	type BaseCallFilter = frame_support::traits::Everything;
	type BlockWeights = ();
	type BlockLength = ();
	type DbWeight = ();
	type RuntimeOrigin = RuntimeOrigin;
	type RuntimeCall = RuntimeCall;
	type Index = u64;
	type BlockNumber = u64;
	type Hash = H256;
	type Hashing = BlakeTwo256;
	type AccountId = u64;
	type Lookup = IdentityLookup<Self::AccountId>;
	type Header = Header;
	type RuntimeEvent = RuntimeEvent;
	type BlockHashCount = ConstU64<250>;
	type Version = ();
	type PalletInfo = PalletInfo;
	type AccountData = ();
	type OnNewAccount = ();
	type OnKilledAccount = ();
	type SystemWeightInfo = ();
	type SS58Prefix = ConstU16<42>;
	type OnSetCode = ();
	type MaxConsumers = frame_support::traits::ConstU32<16>;
}

impl pallet_template::Config for Test {
	type RuntimeEvent = RuntimeEvent;
	type WeightInfo = ();
}

// Build genesis storage according to the mock runtime.
pub fn new_test_ext() -> sp_io::TestExternalities {
	frame_system::GenesisConfig::default().build_storage::<Test>().unwrap().into()
}

'''
'''--- pallets/template/src/tests.rs ---
use crate::{mock::*, Error, Event};
use frame_support::{assert_noop, assert_ok};

#[test]
fn it_works_for_default_value() {
	new_test_ext().execute_with(|| {
		// Go past genesis block so events get deposited
		System::set_block_number(1);
		// Dispatch a signed extrinsic.
		assert_ok!(TemplateModule::do_something(RuntimeOrigin::signed(1), 42));
		// Read pallet storage and assert an expected result.
		assert_eq!(TemplateModule::something(), Some(42));
		// Assert that the correct event was deposited
		System::assert_last_event(Event::SomethingStored { something: 42, who: 1 }.into());
	});
}

#[test]
fn correct_error_for_none_value() {
	new_test_ext().execute_with(|| {
		// Ensure the expected error is thrown when no value is present.
		assert_noop!(
			TemplateModule::cause_error(RuntimeOrigin::signed(1)),
			Error::<Test>::NoneValue
		);
	});
}

'''
'''--- pallets/template/src/weights.rs ---

//! Autogenerated weights for pallet_template
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-04-06, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Alexs-MacBook-Pro-2.local`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ../../target/release/node-template
// benchmark
// pallet
// --chain
// dev
// --pallet
// pallet_template
// --extrinsic
// *
// --steps=50
// --repeat=20
// --execution=wasm
// --wasm-execution=compiled
// --output
// pallets/template/src/weights.rs
// --template
// ../../.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_template.
pub trait WeightInfo {
	fn do_something() -> Weight;
	fn cause_error() -> Weight;
}

/// Weights for pallet_template using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: TemplateModule Something (r:0 w:1)
	/// Proof: TemplateModule Something (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn do_something() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 8_000_000 picoseconds.
		Weight::from_parts(9_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: TemplateModule Something (r:1 w:1)
	/// Proof: TemplateModule Something (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn cause_error() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `32`
		//  Estimated: `1489`
		// Minimum execution time: 6_000_000 picoseconds.
		Weight::from_parts(6_000_000, 1489)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: TemplateModule Something (r:0 w:1)
	/// Proof: TemplateModule Something (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn do_something() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 8_000_000 picoseconds.
		Weight::from_parts(9_000_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: TemplateModule Something (r:1 w:1)
	/// Proof: TemplateModule Something (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn cause_error() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `32`
		//  Estimated: `1489`
		// Minimum execution time: 6_000_000 picoseconds.
		Weight::from_parts(6_000_000, 1489)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}

'''
'''--- pallets/ubi/Cargo.toml ---
[package]
name = "pallet-ubi"
version = "4.0.0-dev"
description = "FRAME pallet template for defining custom runtime logic."
authors = ["Substrate DevHub <https://github.com/substrate-developer-hub>"]
homepage = "https://substrate.io"
edition = "2021"
license = "MIT-0"
publish = false
repository = "https://github.com/substrate-developer-hub/substrate-node-template/"

[package.metadata.docs.rs]
targets = ["x86_64-unknown-linux-gnu"]

[dependencies]
codec = { package = "parity-scale-codec", version = "3.2.2", default-features = false, features = [
	"derive",
] }
scale-info = { version = "2.5.0", default-features = false, features = ["derive"] }
frame-benchmarking = { version = "4.0.0-dev", default-features = false, optional = true, git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
frame-support = { version = "4.0.0-dev", default-features = false, git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
frame-system = { version = "4.0.0-dev", default-features = false, git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
pallet-balances = { default-features = false, version = "4.0.0-dev", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
shared-storage = { default-features = false, path="../shared-storage"}
shared-storage-link = { default-features = false, path="../../traits/shared-storage-link"}

[dev-dependencies]
sp-core = { version = "7.0.0", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
sp-io = { version = "7.0.0", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
sp-runtime = { version = "7.0.0", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
frame-support-test = { version = "3.0.0", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }

[features]
default = ["std"]
std = [
	"codec/std",
	"frame-benchmarking?/std",
	"frame-support/std",
	"frame-system/std",
	"scale-info/std",
]
runtime-benchmarks = ["frame-benchmarking/runtime-benchmarks"]
try-runtime = ["frame-support/try-runtime"]

'''
'''--- pallets/ubi/README.md ---
License: MIT-0
'''
'''--- pallets/ubi/src/benchmarking.rs ---
//! Benchmarking setup for pallet-template
#![cfg(feature = "runtime-benchmarks")]
use super::*;

#[allow(unused)]
use crate::Pallet as Template;
use frame_benchmarking::v2::*;
use frame_system::RawOrigin;

#[benchmarks]
mod benchmarks {
	use super::*;

	#[benchmark]
	fn do_something() {
		let value = 100u32.into();
		let caller: T::AccountId = whitelisted_caller();
		#[extrinsic_call]
		do_something(RawOrigin::Signed(caller), value);

		assert_eq!(Something::<T>::get(), Some(value));
	}

	#[benchmark]
	fn cause_error() {
		Something::<T>::put(100u32);
		let caller: T::AccountId = whitelisted_caller();
		#[extrinsic_call]
		cause_error(RawOrigin::Signed(caller));

		assert_eq!(Something::<T>::get(), Some(101u32));
	}

	impl_benchmark_test_suite!(Template, crate::mock::new_test_ext(), crate::mock::Test);
}

'''
'''--- pallets/ubi/src/extras.rs ---
use crate::*;

impl<T: Config> Pallet<T> {
    pub(super) fn u64_to_balance_saturated(input: u64) -> BalanceOf<T> {
		input.saturated_into::<BalanceOf<T>>()
	}

	pub(super) fn u64_to_block_saturated(input: u64) -> BlockNumberOf<T> {
		input.saturated_into::<BlockNumberOf<T>>()
	}
}

'''
'''--- pallets/ubi/src/lib.rs ---
#![cfg_attr(not(feature = "std"), no_std)]

/// Edit this file to define custom logic or remove it if it is not needed.
/// Learn more about FRAME and the core library of Substrate FRAME pallets:
/// <https://docs.substrate.io/reference/frame-pallets/>
pub use pallet::*;

#[cfg(test)]
mod mock;

#[cfg(test)]
mod tests;

#[cfg(feature = "runtime-benchmarks")]
mod benchmarking;
pub mod weights;
pub use weights::*;

mod extras;

use frame_support::sp_runtime::SaturatedConversion;
use frame_support::sp_std::prelude::*;
use frame_support::traits::{Currency, OnUnbalanced, ReservableCurrency};

use shared_storage_link::SharedStorageLink;
// use scale_info::prelude::format;
pub type BlockNumberOf<T> = <T as frame_system::Config>::BlockNumber;
type AccountIdOf<T> = <T as frame_system::Config>::AccountId;

type BalanceOf<T> = <<T as Config>::Currency as Currency<AccountIdOf<T>>>::Balance;
type PositiveImbalanceOf<T> = <<T as Config>::Currency as Currency<
	<T as frame_system::Config>::AccountId,
>>::PositiveImbalance;
type NegativeImbalanceOf<T> = <<T as Config>::Currency as Currency<
	<T as frame_system::Config>::AccountId,
>>::NegativeImbalance;

#[frame_support::pallet]
pub mod pallet {
	use super::*;
	use frame_support::pallet_prelude::*;
	use frame_system::pallet_prelude::*;

	#[pallet::pallet]
	pub struct Pallet<T>(_);

	/// Configure the pallet by specifying the parameters and types on which it depends.
	#[pallet::config]
	pub trait Config: frame_system::Config {
		/// Because this pallet emits events, it depends on the runtime's definition of an event.
		type RuntimeEvent: From<Event<Self>> + IsType<<Self as frame_system::Config>::RuntimeEvent>;
		/// Type representing the weight of this pallet
		type WeightInfo: WeightInfo;

		type SharedStorageSource: SharedStorageLink<AccountId = AccountIdOf<Self>>;
		type Currency: ReservableCurrency<Self::AccountId>;
		/// Handler for the unbalanced increment when rewarding (minting rewards)
		type Reward: OnUnbalanced<PositiveImbalanceOf<Self>>;

		/// Handler for the unbalanced decrement when slashing (burning collateral)
		type Slash: OnUnbalanced<NegativeImbalanceOf<Self>>;
	}

	// The pallet's runtime storage items.
	// https://docs.substrate.io/main-docs/build/runtime-storage/
	#[pallet::storage]
	#[pallet::getter(fn something)]
	// Learn more about declaring storage items:
	// https://docs.substrate.io/main-docs/build/runtime-storage/#declaring-storage-items
	pub type Something<T> = StorageValue<_, u32>;

	#[pallet::storage]
	#[pallet::getter(fn citizen_got_ubi_block_number)]
	pub type CitizenUbiBlock<T: Config> =
		StorageMap<_, Blake2_128Concat, T::AccountId, BlockNumberOf<T>, ValueQuery>;
	// Pallets use events to inform users when important changes are made.
	// https://docs.substrate.io/main-docs/build/events-errors/
	#[pallet::event]
	#[pallet::generate_deposit(pub(super) fn deposit_event)]
	pub enum Event<T: Config> {
		/// Event documentation should end with an array that provides descriptive names for event
		/// parameters. [something, who]
		SomethingStored { something: u32, who: T::AccountId },
	}

	// Errors inform users that something went wrong.
	#[pallet::error]
	pub enum Error<T> {
		/// Error names should be descriptive.
		NoneValue,
		/// Errors should have helpful documentation associated with them.
		StorageOverflow,
	}

	// Dispatchable functions allows users to interact with the pallet and invoke state changes.
	// These functions materialize as "extrinsics", which are often compared to transactions.
	// Dispatchable functions must be annotated with a weight and must return a DispatchResult.
	#[pallet::call]
	impl<T: Config> Pallet<T> {
		
		#[pallet::call_index(0)]
		#[pallet::weight(Weight::from_parts(10_000, u64::MAX) + T::DbWeight::get().writes(1))]
		pub fn fun_ubi(origin: OriginFor<T>) -> DispatchResult {
			let who = ensure_signed(origin)?;
			T::SharedStorageSource::check_citizen_is_approved_link(who.clone())?;
			let number_of_validated_accounts =
				T::SharedStorageSource::get_approved_citizen_count_link();
			let ubi_block_number = <CitizenUbiBlock<T>>::get(who.clone());
			let now = <frame_system::Pallet<T>>::block_number();
			let three_month_number = (3 * 30 * 24 * 60 * 60) / 6;
			let three_month_block = Self::u64_to_block_saturated(three_month_number);
			let modulus = now % three_month_block;
			let storage_main_block = now - modulus;
			// println!("storage main block {:?}", storage_main_block);

			if storage_main_block > ubi_block_number {
				<CitizenUbiBlock<T>>::insert(who.clone(), storage_main_block);
				let total_issuance = T::Currency::total_issuance();
				let balance_hundred = Self::u64_to_balance_saturated(100);
				let one_percentage_issuance = total_issuance / balance_hundred;
				let balance_three_month = Self::u64_to_balance_saturated(4);
				let total_ubi_per_three_month = one_percentage_issuance / balance_three_month;
				let balance_number_of_validated_accounts =
					Self::u64_to_balance_saturated(number_of_validated_accounts);
				let ubi_per_person =
					total_ubi_per_three_month / balance_number_of_validated_accounts;
				let r = T::Currency::deposit_into_existing(&who, ubi_per_person).ok().unwrap();
				T::Reward::on_unbalanced(r);
			}

			// println!("test {:?}", total_issuance);
			// println!("10 percentage {:?}", one_percentage_issuance);
			// println!("Length {:}", number_of_validated_accounts);
			Ok(())
		}
	}
}

'''
'''--- pallets/ubi/src/mock.rs ---
use crate as pallet_template;
use frame_support::traits::{ConstU16, ConstU64, GenesisBuild};
use sp_core::H256;
use sp_runtime::{
	testing::Header,
	traits::{BlakeTwo256, IdentityLookup},
};

type UncheckedExtrinsic = frame_system::mocking::MockUncheckedExtrinsic<Test>;
type Block = frame_system::mocking::MockBlock<Test>;

// Configure a mock runtime to test the pallet.
frame_support::construct_runtime!(
	pub enum Test where
		Block = Block,
		NodeBlock = Block,
		UncheckedExtrinsic = UncheckedExtrinsic,
	{
		System: frame_system,
		TemplateModule: pallet_template,
		Balances: pallet_balances,
		SharedStorage:shared_storage,
	}
);

impl frame_system::Config for Test {
	type BaseCallFilter = frame_support::traits::Everything;
	type BlockWeights = ();
	type BlockLength = ();
	type DbWeight = ();
	type RuntimeOrigin = RuntimeOrigin;
	type RuntimeCall = RuntimeCall;
	type Index = u64;
	type BlockNumber = u64;
	type Hash = H256;
	type Hashing = BlakeTwo256;
	type AccountId = u64;
	type Lookup = IdentityLookup<Self::AccountId>;
	type Header = Header;
	type RuntimeEvent = RuntimeEvent;
	type BlockHashCount = ConstU64<250>;
	type Version = ();
	type PalletInfo = PalletInfo;
	type OnNewAccount = ();
	type OnKilledAccount = ();
	type SystemWeightInfo = ();
	type SS58Prefix = ConstU16<42>;
	type OnSetCode = ();
	type MaxConsumers = frame_support::traits::ConstU32<16>;
	type AccountData = pallet_balances::AccountData<u64>; // New code
}

impl shared_storage::Config for Test {
	type RuntimeEvent = RuntimeEvent;
	type WeightInfo = ();
}

impl pallet_template::Config for Test {
	type RuntimeEvent = RuntimeEvent;
	type WeightInfo = ();
	type SharedStorageSource = SharedStorage;
	type Currency = Balances; // New code
	type Slash = ();
	type Reward = ();
}

impl pallet_balances::Config for Test {
	type MaxLocks = ();
	type MaxReserves = ();
	type ReserveIdentifier = [u8; 8];
	type Balance = u64;
	type DustRemoval = ();
	type RuntimeEvent = RuntimeEvent;
	type ExistentialDeposit = ConstU64<1>;
	type WeightInfo = ();
	type FreezeIdentifier = ();
	type MaxFreezes = ();
	type MaxHolds = ();
	type HoldIdentifier = ();
	type AccountStore = System;
}

// Build genesis storage according to the mock runtime.
pub fn new_test_ext() -> sp_io::TestExternalities {
	let mut t = frame_system::GenesisConfig::default().build_storage::<Test>().unwrap();
	pallet_balances::GenesisConfig::<Test> {
		balances: vec![
			(1, 100000),
			(2, 200000),
			(3, 300000),
			(4, 300000),
			(5, 300000),
			(6, 300000),
			(7, 300000),
			(8, 300000),
			(9, 300000),
			(10, 300000),
			(11, 300000),
			(12, 300000),
			(13, 300000),
			(14, 300000),
			(15, 300000),
			(16, 300000),
			(17, 300000),
			(18, 300000),
			(19, 300000),
			(20, 300000),
			(21, 300000),
			(22, 300000),
			(23, 300000),
			(24, 300000),
			(25, 300000),
			(26, 300000),
			(27, 300000),
			(28, 300000),
			(29, 300000),
			(30, 300000),
			(31, 300000),
			(32, 300000),
			(33, 300000),
			(34, 300000),
			(35, 300000),
		],
	} // new code
	.assimilate_storage(&mut t)
	.unwrap();
	shared_storage::GenesisConfig::<Test> { approved_citizen_address: vec![1, 2] }
		.assimilate_storage(&mut t)
		.unwrap();
	t.into()
}

'''
'''--- pallets/ubi/src/tests.rs ---
use crate::{mock::*, Error, Event};
use frame_support::{assert_noop, assert_ok};

#[test]
fn it_works_for_default_value() {
	new_test_ext().execute_with(|| {
		// Go past genesis block so events get deposited
		System::set_block_number(1);
		assert_ok!(TemplateModule::fun_ubi(RuntimeOrigin::signed(1)));
	});
}

#[test]
fn correct_error_for_none_value() {
	new_test_ext().execute_with(|| {
		
	});
}

'''
'''--- pallets/ubi/src/weights.rs ---

//! Autogenerated weights for pallet_template
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-04-06, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Alexs-MacBook-Pro-2.local`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ../../target/release/node-template
// benchmark
// pallet
// --chain
// dev
// --pallet
// pallet_template
// --extrinsic
// *
// --steps=50
// --repeat=20
// --execution=wasm
// --wasm-execution=compiled
// --output
// pallets/template/src/weights.rs
// --template
// ../../.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_template.
pub trait WeightInfo {
	fn do_something() -> Weight;
	fn cause_error() -> Weight;
}

/// Weights for pallet_template using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: TemplateModule Something (r:0 w:1)
	/// Proof: TemplateModule Something (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn do_something() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 8_000_000 picoseconds.
		Weight::from_parts(9_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: TemplateModule Something (r:1 w:1)
	/// Proof: TemplateModule Something (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn cause_error() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `32`
		//  Estimated: `1489`
		// Minimum execution time: 6_000_000 picoseconds.
		Weight::from_parts(6_000_000, 1489)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: TemplateModule Something (r:0 w:1)
	/// Proof: TemplateModule Something (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn do_something() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 8_000_000 picoseconds.
		Weight::from_parts(9_000_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: TemplateModule Something (r:1 w:1)
	/// Proof: TemplateModule Something (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn cause_error() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `32`
		//  Estimated: `1489`
		// Minimum execution time: 6_000_000 picoseconds.
		Weight::from_parts(6_000_000, 1489)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}

'''
'''--- runtime/node-runtime/Cargo.toml ---
[package]
name = "node-template-runtime"
version = "4.0.0-dev"
description = "A fresh FRAME-based Substrate node, ready for hacking."
authors = ["Substrate DevHub <https://github.com/substrate-developer-hub>"]
homepage = "https://substrate.io/"
edition = "2021"
license = "MIT-0"
publish = false
repository = "https://github.com/substrate-developer-hub/substrate-node-template/"

[package.metadata.docs.rs]
targets = ["x86_64-unknown-linux-gnu"]

[dependencies]
codec = { package = "parity-scale-codec", version = "3.2.2", default-features = false, features = ["derive"] }
scale-info = { version = "2.5.0", default-features = false, features = ["derive"] }

pallet-aura = { version = "4.0.0-dev", default-features = false, git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
pallet-balances = { version = "4.0.0-dev", default-features = false, git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
frame-support = { version = "4.0.0-dev", default-features = false, git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
pallet-grandpa = { version = "4.0.0-dev", default-features = false, git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
pallet-sudo = { version = "4.0.0-dev", default-features = false, git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
frame-system = { version = "4.0.0-dev", default-features = false, git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
frame-try-runtime = { version = "0.10.0-dev", default-features = false, git = "https://github.com/paritytech/substrate.git", optional = true , branch = "polkadot-v0.9.42" }
pallet-timestamp = { version = "4.0.0-dev", default-features = false, git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
pallet-transaction-payment = { version = "4.0.0-dev", default-features = false, git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
frame-executive = { version = "4.0.0-dev", default-features = false, git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
sp-api = { version = "4.0.0-dev", default-features = false, git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
sp-block-builder = { version = "4.0.0-dev", default-features = false, git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
sp-consensus-aura = { version = "0.10.0-dev", default-features = false, git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
sp-consensus-grandpa = { version = "4.0.0-dev", default-features = false, git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
sp-core = { version = "7.0.0", default-features = false, git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
sp-inherents = { version = "4.0.0-dev", default-features = false, git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
sp-offchain = { version = "4.0.0-dev", default-features = false, git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
sp-runtime = { version = "7.0.0", default-features = false, git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
sp-session = { version = "4.0.0-dev", default-features = false, git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
sp-std = { version = "5.0.0", default-features = false, git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
sp-transaction-pool = { version = "4.0.0-dev", default-features = false, git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
sp-version = { version = "5.0.0", default-features = false, git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
pallet-insecure-randomness-collective-flip = { version = "4.0.0-dev", default-features = false, git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }

# Used for the node template's RPCs
frame-system-rpc-runtime-api = { version = "4.0.0-dev", default-features = false, git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }
pallet-transaction-payment-rpc-runtime-api = { version = "4.0.0-dev", default-features = false, git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }

# Used for runtime benchmarking
frame-benchmarking = { version = "4.0.0-dev", default-features = false, git = "https://github.com/paritytech/substrate.git", optional = true , branch = "polkadot-v0.9.42" }
frame-system-benchmarking = { version = "4.0.0-dev", default-features = false, git = "https://github.com/paritytech/substrate.git", optional = true , branch = "polkadot-v0.9.42" }

# Local Dependencies
pallet-template = { version = "4.0.0-dev", default-features = false, path = "../../pallets/template" }

sortition-sum-game = {default-features = false, path ="../../pallets/sortition-sum-game"}
# pallet-election={ default-features = false, path="../pallets/election"}
# # election-runtime-api={default-features=false, path="../pallets/election/election-runtime-api"}
# pallet-posts = {default-features=false, path="../pallets/posts"}
# pallet-spaces = {default-features=false, path="../pallets/spaces"}
schelling-game-shared = {default-features=false, path="../../pallets/schelling-game-shared"}
profile-validation = {default-features=false, path="../../pallets/profile-validation"}
# profile-validation-runtime-api = {default-features=false, path="../pallets/profile-validation/profile-validation-runtime-api"}
shared-storage = {default-features=false, path="../../pallets/shared-storage"}
profile-validation-runtime-api = {default-features=false, path="../../pallets/profile-validation/profile-validation-runtime-api"}
positive-externality-validation = {default-features = false, path="../../pallets/positive-externality-validation"}
department-funding = {default-features = false, path="../../pallets/department-funding"}
project-tips = {default-features = false, path="../../pallets/project-tips"}

[build-dependencies]
substrate-wasm-builder = { version = "5.0.0-dev", git = "https://github.com/paritytech/substrate.git", optional = true , branch = "polkadot-v0.9.42" }

[features]
default = ["std"]
std = [
	"frame-try-runtime?/std",
	"frame-system-benchmarking?/std",
	"frame-benchmarking?/std",
	"codec/std",
	"scale-info/std",
	"frame-executive/std",
	"frame-support/std",
	"frame-system-rpc-runtime-api/std",
	"frame-system/std",
	"frame-try-runtime/std",
	"pallet-aura/std",
	"pallet-balances/std",
	"pallet-grandpa/std",
	"pallet-sudo/std",
	"pallet-template/std",
	"pallet-timestamp/std",
	"pallet-transaction-payment-rpc-runtime-api/std",
	"pallet-transaction-payment/std",
	"sp-api/std",
	"sp-block-builder/std",
	"sp-consensus-aura/std",
	"sp-consensus-grandpa/std",
	"sp-core/std",
	"sp-inherents/std",
	"sp-offchain/std",
	"sp-runtime/std",
	"sp-session/std",
	"sp-std/std",
	"sp-transaction-pool/std",
	"sp-version/std",
	"substrate-wasm-builder",
	#Local dependencies
	"sortition-sum-game/std",
	# "pallet-election/std",
	# "pallet-posts/std",
	# "pallet-spaces/std",
	"schelling-game-shared/std",
	"profile-validation/std",
	# "shared-storage/std",
	"profile-validation-runtime-api/std",
	"positive-externality-validation/std",
	"shared-storage/std",
]
runtime-benchmarks = [
	"frame-benchmarking/runtime-benchmarks",
	"frame-support/runtime-benchmarks",
	"frame-system-benchmarking/runtime-benchmarks",
	"frame-system/runtime-benchmarks",
	"pallet-balances/runtime-benchmarks",
	"pallet-grandpa/runtime-benchmarks",
	"pallet-template/runtime-benchmarks",
	"pallet-timestamp/runtime-benchmarks",
	"sp-runtime/runtime-benchmarks",
]
try-runtime = [
	"frame-try-runtime/try-runtime",
	"frame-executive/try-runtime",
	"frame-system/try-runtime",
	"frame-support/try-runtime",
	"pallet-aura/try-runtime",
	"pallet-balances/try-runtime",
	"pallet-grandpa/try-runtime",
	"pallet-sudo/try-runtime",
	"pallet-template/try-runtime",
	"pallet-timestamp/try-runtime",
	"pallet-transaction-payment/try-runtime",
]

'''
'''--- runtime/node-runtime/build.rs ---
fn main() {
	#[cfg(feature = "std")]
	{
		substrate_wasm_builder::WasmBuilder::new()
			.with_current_project()
			.export_heap_base()
			.import_memory()
			.build();
	}
}

'''
'''--- runtime/node-runtime/src/lib.rs ---
#![cfg_attr(not(feature = "std"), no_std)]
// `construct_runtime!` does a lot of recursion and requires us to increase the limit to 256.
#![recursion_limit = "256"]

// Make the WASM binary available.
#[cfg(feature = "std")]
include!(concat!(env!("OUT_DIR"), "/wasm_binary.rs"));

use pallet_grandpa::AuthorityId as GrandpaId;
use sp_api::impl_runtime_apis;
use sp_consensus_aura::sr25519::AuthorityId as AuraId;
use sp_core::{crypto::KeyTypeId, OpaqueMetadata};
use sp_runtime::{
	create_runtime_str, generic, impl_opaque_keys,
	traits::{
		AccountIdLookup, BlakeTwo256, Block as BlockT, IdentifyAccount, NumberFor, One, Verify,
	},
	transaction_validity::{TransactionSource, TransactionValidity},
	ApplyExtrinsicResult, MultiSignature,
};
use sp_std::prelude::*;
#[cfg(feature = "std")]
use sp_version::NativeVersion;
use sp_version::RuntimeVersion;

// A few exports that help ease life for downstream crates.
pub use frame_support::{
	construct_runtime, parameter_types,
	traits::{
		ConstU128, ConstU32, ConstU64, ConstU8, KeyOwnerProofSystem, Randomness, StorageInfo,
	},
	weights::{
		constants::{
			BlockExecutionWeight, ExtrinsicBaseWeight, RocksDbWeight, WEIGHT_REF_TIME_PER_SECOND,
		},
		IdentityFee, Weight,
	},
	StorageValue,
};
pub use frame_system::Call as SystemCall;
pub use pallet_balances::Call as BalancesCall;
pub use pallet_timestamp::Call as TimestampCall;
use pallet_transaction_payment::{ConstFeeMultiplier, CurrencyAdapter, Multiplier};
#[cfg(any(feature = "std", test))]
pub use sp_runtime::BuildStorage;
pub use sp_runtime::{Perbill, Permill};

/// Import the template pallet.
pub use pallet_template;

/// An index to a block.
pub type BlockNumber = u32;

/// Alias to 512-bit hash when used in the context of a transaction signature on the chain.
pub type Signature = MultiSignature;

/// Some way of identifying an account on the chain. We intentionally make it equivalent
/// to the public key of our transaction signing scheme.
pub type AccountId = <<Signature as Verify>::Signer as IdentifyAccount>::AccountId;

/// Balance of an account.
pub type Balance = u128;

/// Index of a transaction in the chain.
pub type Index = u32;

/// A hash of some data used by the chain.
pub type Hash = sp_core::H256;

pub type ChallengePostId = u64;

/// Opaque types. These are used by the CLI to instantiate machinery that don't need to know
/// the specifics of the runtime. They can then be made to be agnostic over specific formats
/// of data like extrinsics, allowing for them to continue syncing the network through upgrades
/// to even the core data structures.
pub mod opaque {
	use super::*;

	pub use sp_runtime::OpaqueExtrinsic as UncheckedExtrinsic;

	/// Opaque block header type.
	pub type Header = generic::Header<BlockNumber, BlakeTwo256>;
	/// Opaque block type.
	pub type Block = generic::Block<Header, UncheckedExtrinsic>;
	/// Opaque block identifier type.
	pub type BlockId = generic::BlockId<Block>;

	impl_opaque_keys! {
		pub struct SessionKeys {
			pub aura: Aura,
			pub grandpa: Grandpa,
		}
	}
}

// To learn more about runtime versioning, see:
// https://docs.substrate.io/main-docs/build/upgrade#runtime-versioning
#[sp_version::runtime_version]
pub const VERSION: RuntimeVersion = RuntimeVersion {
	spec_name: create_runtime_str!("node-template"),
	impl_name: create_runtime_str!("node-template"),
	authoring_version: 1,
	// The version of the runtime specification. A full node will not attempt to use its native
	//   runtime in substitute for the on-chain Wasm runtime unless all of `spec_name`,
	//   `spec_version`, and `authoring_version` are the same between Wasm and native.
	// This value is set to 100 to notify Polkadot-JS App (https://polkadot.js.org/apps) to use
	//   the compatible custom types.
	spec_version: 100,
	impl_version: 1,
	apis: RUNTIME_API_VERSIONS,
	transaction_version: 1,
	state_version: 1,
};

/// This determines the average expected block time that we are targeting.
/// Blocks will be produced at a minimum duration defined by `SLOT_DURATION`.
/// `SLOT_DURATION` is picked up by `pallet_timestamp` which is in turn picked
/// up by `pallet_aura` to implement `fn slot_duration()`.
///
/// Change this to adjust the block time.
pub const MILLISECS_PER_BLOCK: u64 = 6000;

// NOTE: Currently it is not possible to change the slot duration after the chain has started.
//       Attempting to do so will brick block production.
pub const SLOT_DURATION: u64 = MILLISECS_PER_BLOCK;

// Time is measured by number of blocks.
pub const MINUTES: BlockNumber = 60_000 / (MILLISECS_PER_BLOCK as BlockNumber);
pub const HOURS: BlockNumber = MINUTES * 60;
pub const DAYS: BlockNumber = HOURS * 24;

/// The version information used to identify this runtime when compiled natively.
#[cfg(feature = "std")]
pub fn native_version() -> NativeVersion {
	NativeVersion { runtime_version: VERSION, can_author_with: Default::default() }
}

const NORMAL_DISPATCH_RATIO: Perbill = Perbill::from_percent(75);

parameter_types! {
	pub const BlockHashCount: BlockNumber = 2400;
	pub const Version: RuntimeVersion = VERSION;
	/// We allow for 2 seconds of compute with a 6 second average block time.
	pub BlockWeights: frame_system::limits::BlockWeights =
		frame_system::limits::BlockWeights::with_sensible_defaults(
			Weight::from_parts(2u64 * WEIGHT_REF_TIME_PER_SECOND, u64::MAX),
			NORMAL_DISPATCH_RATIO,
		);
	pub BlockLength: frame_system::limits::BlockLength = frame_system::limits::BlockLength
		::max_with_normal_ratio(5 * 1024 * 1024, NORMAL_DISPATCH_RATIO);
	pub const SS58Prefix: u8 = 42;
}

// Configure FRAME pallets to include in runtime.

impl frame_system::Config for Runtime {
	/// The basic call filter to use in dispatchable.
	type BaseCallFilter = frame_support::traits::Everything;
	/// Block & extrinsics weights: base values and limits.
	type BlockWeights = BlockWeights;
	/// The maximum length of a block (in bytes).
	type BlockLength = BlockLength;
	/// The identifier used to distinguish between accounts.
	type AccountId = AccountId;
	/// The aggregated dispatch type that is available for extrinsics.
	type RuntimeCall = RuntimeCall;
	/// The lookup mechanism to get account ID from whatever is passed in dispatchers.
	type Lookup = AccountIdLookup<AccountId, ()>;
	/// The index type for storing how many extrinsics an account has signed.
	type Index = Index;
	/// The index type for blocks.
	type BlockNumber = BlockNumber;
	/// The type for hashing blocks and tries.
	type Hash = Hash;
	/// The hashing algorithm used.
	type Hashing = BlakeTwo256;
	/// The header type.
	type Header = generic::Header<BlockNumber, BlakeTwo256>;
	/// The ubiquitous event type.
	type RuntimeEvent = RuntimeEvent;
	/// The ubiquitous origin type.
	type RuntimeOrigin = RuntimeOrigin;
	/// Maximum number of block number to block hash mappings to keep (oldest pruned first).
	type BlockHashCount = BlockHashCount;
	/// The weight of database operations that the runtime can invoke.
	type DbWeight = RocksDbWeight;
	/// Version of the runtime.
	type Version = Version;
	/// Converts a module to the index of the module in `construct_runtime!`.
	///
	/// This type is being generated by `construct_runtime!`.
	type PalletInfo = PalletInfo;
	/// What to do if a new account is created.
	type OnNewAccount = ();
	/// What to do if an account is fully reaped from the system.
	type OnKilledAccount = ();
	/// The data to be stored in an account.
	type AccountData = pallet_balances::AccountData<Balance>;
	/// Weight information for the extrinsics of this pallet.
	type SystemWeightInfo = ();
	/// This is used as an identifier of the chain. 42 is the generic substrate prefix.
	type SS58Prefix = SS58Prefix;
	/// The set code logic, just the default since we're not a parachain.
	type OnSetCode = ();
	type MaxConsumers = frame_support::traits::ConstU32<16>;
}

impl pallet_aura::Config for Runtime {
	type AuthorityId = AuraId;
	type DisabledValidators = ();
	type MaxAuthorities = ConstU32<32>;
}

impl pallet_grandpa::Config for Runtime {
	type RuntimeEvent = RuntimeEvent;

	type WeightInfo = ();
	type MaxAuthorities = ConstU32<32>;
	type MaxSetIdSessionEntries = ConstU64<0>;

	type KeyOwnerProof = sp_core::Void;
	type EquivocationReportSystem = ();
}

impl pallet_timestamp::Config for Runtime {
	/// A timestamp: milliseconds since the unix epoch.
	type Moment = u64;
	type OnTimestampSet = Aura;
	type MinimumPeriod = ConstU64<{ SLOT_DURATION / 2 }>;
	type WeightInfo = ();
}

/// Existential deposit.
pub const EXISTENTIAL_DEPOSIT: u128 = 500;

impl pallet_balances::Config for Runtime {
	type MaxLocks = ConstU32<50>;
	type MaxReserves = ();
	type ReserveIdentifier = [u8; 8];
	/// The type for recording an account's balance.
	type Balance = Balance;
	/// The ubiquitous event type.
	type RuntimeEvent = RuntimeEvent;
	type DustRemoval = ();
	type ExistentialDeposit = ConstU128<EXISTENTIAL_DEPOSIT>;
	type AccountStore = System;
	type WeightInfo = pallet_balances::weights::SubstrateWeight<Runtime>;
	type FreezeIdentifier = ();
	type MaxFreezes = ();
	type HoldIdentifier = ();
	type MaxHolds = ();
}

parameter_types! {
	pub FeeMultiplier: Multiplier = Multiplier::one();
}

impl pallet_transaction_payment::Config for Runtime {
	type RuntimeEvent = RuntimeEvent;
	type OnChargeTransaction = CurrencyAdapter<Balances, ()>;
	type OperationalFeeMultiplier = ConstU8<5>;
	type WeightToFee = IdentityFee<Balance>;
	type LengthToFee = IdentityFee<Balance>;
	type FeeMultiplierUpdate = ConstFeeMultiplier<FeeMultiplier>;
}

impl pallet_sudo::Config for Runtime {
	type RuntimeEvent = RuntimeEvent;
	type RuntimeCall = RuntimeCall;
}

/// Configure the pallet-template in pallets/template.
impl pallet_template::Config for Runtime {
	type RuntimeEvent = RuntimeEvent;
	type WeightInfo = pallet_template::weights::SubstrateWeight<Runtime>;
}

impl pallet_insecure_randomness_collective_flip::Config for Runtime {}

impl sortition_sum_game::Config for Runtime {
	type RuntimeEvent = RuntimeEvent;
	type WeightInfo = sortition_sum_game::weights::SubstrateWeight<Runtime>;
}

impl schelling_game_shared::Config for Runtime {
	type RuntimeEvent = RuntimeEvent;
	type WeightInfo = schelling_game_shared::weights::SubstrateWeight<Runtime>;
	type Currency = Balances;
	type RandomnessSource = RandomnessCollectiveFlip;
	type Slash = ();
	type Reward = ();
	type SortitionSumGameSource = SortitionSumGame;
}

impl profile_validation::Config for Runtime {
	type RuntimeEvent = RuntimeEvent;
	type WeightInfo = profile_validation::weights::SubstrateWeight<Runtime>;
	type Currency = Balances;
	type SchellingGameSharedSource = SchellingGameShared;
	type Slash = ();
	type Reward = ();
}

impl shared_storage::Config for Runtime {
	type RuntimeEvent = RuntimeEvent;
	type WeightInfo = shared_storage::weights::SubstrateWeight<Runtime>;
}

impl positive_externality_validation::Config for Runtime {
	type RuntimeEvent = RuntimeEvent;
	type WeightInfo = positive_externality_validation::weights::SubstrateWeight<Runtime>;
	type SharedStorageSource = SharedStorage;
	type Currency = Balances;
	type SchellingGameSharedSource = SchellingGameShared;
}

impl department_funding::Config for Runtime {
	type RuntimeEvent = RuntimeEvent;
	type WeightInfo = department_funding::weights::SubstrateWeight<Runtime>;
	type SharedStorageSource = SharedStorage;
	type Currency = Balances;
	type SchellingGameSharedSource = SchellingGameShared;
}

impl project_tips::Config for Runtime {
	type RuntimeEvent = RuntimeEvent;
	type WeightInfo = project_tips::weights::SubstrateWeight<Runtime>;
	type SharedStorageSource = SharedStorage;
	type Currency = Balances;
	type SchellingGameSharedSource = SchellingGameShared;
}

// Create the runtime by composing the FRAME pallets that were previously configured.
construct_runtime!(
	pub struct Runtime
	where
		Block = Block,
		NodeBlock = opaque::Block,
		UncheckedExtrinsic = UncheckedExtrinsic,
	{
		System: frame_system,
		RandomnessCollectiveFlip: pallet_insecure_randomness_collective_flip,
		Timestamp: pallet_timestamp,
		Aura: pallet_aura,
		Grandpa: pallet_grandpa,
		Balances: pallet_balances,
		TransactionPayment: pallet_transaction_payment,
		Sudo: pallet_sudo,
		// Include the custom logic from the pallet-template in the runtime.
		TemplateModule: pallet_template,
		SortitionSumGame: sortition_sum_game,
		SchellingGameShared: schelling_game_shared,
		ProfileValidation: profile_validation,
		SharedStorage: shared_storage,
		PositiveExternalityValidation: positive_externality_validation,
		DepartmentFunding: department_funding,
		ProjectTips: project_tips,
	}
);

/// The address format for describing accounts.
pub type Address = sp_runtime::MultiAddress<AccountId, ()>;
/// Block header type as expected by this runtime.
pub type Header = generic::Header<BlockNumber, BlakeTwo256>;
/// Block type as expected by this runtime.
pub type Block = generic::Block<Header, UncheckedExtrinsic>;
/// The SignedExtension to the basic transaction logic.
pub type SignedExtra = (
	frame_system::CheckNonZeroSender<Runtime>,
	frame_system::CheckSpecVersion<Runtime>,
	frame_system::CheckTxVersion<Runtime>,
	frame_system::CheckGenesis<Runtime>,
	frame_system::CheckEra<Runtime>,
	frame_system::CheckNonce<Runtime>,
	frame_system::CheckWeight<Runtime>,
	pallet_transaction_payment::ChargeTransactionPayment<Runtime>,
);

/// Unchecked extrinsic type as expected by this runtime.
pub type UncheckedExtrinsic =
	generic::UncheckedExtrinsic<Address, RuntimeCall, Signature, SignedExtra>;
/// The payload being signed in transactions.
pub type SignedPayload = generic::SignedPayload<RuntimeCall, SignedExtra>;
/// Executive: handles dispatch to the various modules.
pub type Executive = frame_executive::Executive<
	Runtime,
	Block,
	frame_system::ChainContext<Runtime>,
	Runtime,
	AllPalletsWithSystem,
>;

#[cfg(feature = "runtime-benchmarks")]
#[macro_use]
extern crate frame_benchmarking;

#[cfg(feature = "runtime-benchmarks")]
mod benches {
	define_benchmarks!(
		[frame_benchmarking, BaselineBench::<Runtime>]
		[frame_system, SystemBench::<Runtime>]
		[pallet_balances, Balances]
		[pallet_timestamp, Timestamp]
		[pallet_template, TemplateModule]
	);
}

impl_runtime_apis! {
	impl sp_api::Core<Block> for Runtime {
		fn version() -> RuntimeVersion {
			VERSION
		}

		fn execute_block(block: Block) {
			Executive::execute_block(block);
		}

		fn initialize_block(header: &<Block as BlockT>::Header) {
			Executive::initialize_block(header)
		}
	}

	impl sp_api::Metadata<Block> for Runtime {
		fn metadata() -> OpaqueMetadata {
			OpaqueMetadata::new(Runtime::metadata().into())
		}

		fn metadata_at_version(version: u32) -> Option<OpaqueMetadata> {
			Runtime::metadata_at_version(version)
		}

		fn metadata_versions() -> sp_std::vec::Vec<u32> {
			Runtime::metadata_versions()
		}
	}

	impl sp_block_builder::BlockBuilder<Block> for Runtime {
		fn apply_extrinsic(extrinsic: <Block as BlockT>::Extrinsic) -> ApplyExtrinsicResult {
			Executive::apply_extrinsic(extrinsic)
		}

		fn finalize_block() -> <Block as BlockT>::Header {
			Executive::finalize_block()
		}

		fn inherent_extrinsics(data: sp_inherents::InherentData) -> Vec<<Block as BlockT>::Extrinsic> {
			data.create_extrinsics()
		}

		fn check_inherents(
			block: Block,
			data: sp_inherents::InherentData,
		) -> sp_inherents::CheckInherentsResult {
			data.check_extrinsics(&block)
		}
	}

	impl sp_transaction_pool::runtime_api::TaggedTransactionQueue<Block> for Runtime {
		fn validate_transaction(
			source: TransactionSource,
			tx: <Block as BlockT>::Extrinsic,
			block_hash: <Block as BlockT>::Hash,
		) -> TransactionValidity {
			Executive::validate_transaction(source, tx, block_hash)
		}
	}

	impl sp_offchain::OffchainWorkerApi<Block> for Runtime {
		fn offchain_worker(header: &<Block as BlockT>::Header) {
			Executive::offchain_worker(header)
		}
	}

	impl sp_consensus_aura::AuraApi<Block, AuraId> for Runtime {
		fn slot_duration() -> sp_consensus_aura::SlotDuration {
			sp_consensus_aura::SlotDuration::from_millis(Aura::slot_duration())
		}

		fn authorities() -> Vec<AuraId> {
			Aura::authorities().into_inner()
		}
	}

	impl sp_session::SessionKeys<Block> for Runtime {
		fn generate_session_keys(seed: Option<Vec<u8>>) -> Vec<u8> {
			opaque::SessionKeys::generate(seed)
		}

		fn decode_session_keys(
			encoded: Vec<u8>,
		) -> Option<Vec<(Vec<u8>, KeyTypeId)>> {
			opaque::SessionKeys::decode_into_raw_public_keys(&encoded)
		}
	}

	impl sp_consensus_grandpa::GrandpaApi<Block> for Runtime {
		fn grandpa_authorities() -> sp_consensus_grandpa::AuthorityList {
			Grandpa::grandpa_authorities()
		}

		fn current_set_id() -> sp_consensus_grandpa::SetId {
			Grandpa::current_set_id()
		}

		fn submit_report_equivocation_unsigned_extrinsic(
			_equivocation_proof: sp_consensus_grandpa::EquivocationProof<
				<Block as BlockT>::Hash,
				NumberFor<Block>,
			>,
			_key_owner_proof: sp_consensus_grandpa::OpaqueKeyOwnershipProof,
		) -> Option<()> {
			None
		}

		fn generate_key_ownership_proof(
			_set_id: sp_consensus_grandpa::SetId,
			_authority_id: GrandpaId,
		) -> Option<sp_consensus_grandpa::OpaqueKeyOwnershipProof> {
			// NOTE: this is the only implementation possible since we've
			// defined our key owner proof type as a bottom type (i.e. a type
			// with no values).
			None
		}
	}

	impl frame_system_rpc_runtime_api::AccountNonceApi<Block, AccountId, Index> for Runtime {
		fn account_nonce(account: AccountId) -> Index {
			System::account_nonce(account)
		}
	}

	impl pallet_transaction_payment_rpc_runtime_api::TransactionPaymentApi<Block, Balance> for Runtime {
		fn query_info(
			uxt: <Block as BlockT>::Extrinsic,
			len: u32,
		) -> pallet_transaction_payment_rpc_runtime_api::RuntimeDispatchInfo<Balance> {
			TransactionPayment::query_info(uxt, len)
		}
		fn query_fee_details(
			uxt: <Block as BlockT>::Extrinsic,
			len: u32,
		) -> pallet_transaction_payment::FeeDetails<Balance> {
			TransactionPayment::query_fee_details(uxt, len)
		}
		fn query_weight_to_fee(weight: Weight) -> Balance {
			TransactionPayment::weight_to_fee(weight)
		}
		fn query_length_to_fee(length: u32) -> Balance {
			TransactionPayment::length_to_fee(length)
		}
	}

	impl pallet_transaction_payment_rpc_runtime_api::TransactionPaymentCallApi<Block, Balance, RuntimeCall>
		for Runtime
	{
		fn query_call_info(
			call: RuntimeCall,
			len: u32,
		) -> pallet_transaction_payment::RuntimeDispatchInfo<Balance> {
			TransactionPayment::query_call_info(call, len)
		}
		fn query_call_fee_details(
			call: RuntimeCall,
			len: u32,
		) -> pallet_transaction_payment::FeeDetails<Balance> {
			TransactionPayment::query_call_fee_details(call, len)
		}
		fn query_weight_to_fee(weight: Weight) -> Balance {
			TransactionPayment::weight_to_fee(weight)
		}
		fn query_length_to_fee(length: u32) -> Balance {
			TransactionPayment::length_to_fee(length)
		}
	}

	#[cfg(feature = "runtime-benchmarks")]
	impl frame_benchmarking::Benchmark<Block> for Runtime {
		fn benchmark_metadata(extra: bool) -> (
			Vec<frame_benchmarking::BenchmarkList>,
			Vec<frame_support::traits::StorageInfo>,
		) {
			use frame_benchmarking::{baseline, Benchmarking, BenchmarkList};
			use frame_support::traits::StorageInfoTrait;
			use frame_system_benchmarking::Pallet as SystemBench;
			use baseline::Pallet as BaselineBench;

			let mut list = Vec::<BenchmarkList>::new();
			list_benchmarks!(list, extra);

			let storage_info = AllPalletsWithSystem::storage_info();

			(list, storage_info)
		}

		fn dispatch_benchmark(
			config: frame_benchmarking::BenchmarkConfig
		) -> Result<Vec<frame_benchmarking::BenchmarkBatch>, sp_runtime::RuntimeString> {
			use frame_benchmarking::{baseline, Benchmarking, BenchmarkBatch, TrackedStorageKey};

			use frame_system_benchmarking::Pallet as SystemBench;
			use baseline::Pallet as BaselineBench;

			impl frame_system_benchmarking::Config for Runtime {}
			impl baseline::Config for Runtime {}

			use frame_support::traits::WhitelistedStorageKeys;
			let whitelist: Vec<TrackedStorageKey> = AllPalletsWithSystem::whitelisted_storage_keys();

			let mut batches = Vec::<BenchmarkBatch>::new();
			let params = (&config, &whitelist);
			add_benchmarks!(params, batches);

			Ok(batches)
		}
	}

	#[cfg(feature = "try-runtime")]
	impl frame_try_runtime::TryRuntime<Block> for Runtime {
		fn on_runtime_upgrade(checks: frame_try_runtime::UpgradeCheckSelect) -> (Weight, Weight) {
			// NOTE: intentional unwrap: we don't want to propagate the error backwards, and want to
			// have a backtrace here. If any of the pre/post migration checks fail, we shall stop
			// right here and right now.
			let weight = Executive::try_runtime_upgrade(checks).unwrap();
			(weight, BlockWeights::get().max_block)
		}

		fn execute_block(
			block: Block,
			state_root_check: bool,
			signature_check: bool,
			select: frame_try_runtime::TryStateSelect
		) -> Weight {
			// NOTE: intentional unwrap: we don't want to propagate the error backwards, and want to
			// have a backtrace here.
			Executive::try_execute_block(block, state_root_check, signature_check, select).expect("execute-block failed")
		}
	}

	impl profile_validation_runtime_api::ProfileValidationApi<Block, AccountId> for Runtime {

		fn get_challengers_evidence(profile_user_account: AccountId, offset: u64, limit: u16) -> Vec<ChallengePostId> {
			ProfileValidation::get_challengers_evidence(profile_user_account, offset, limit)
		}

		fn get_evidence_period_end_block(profile_user_account: AccountId) -> Option<u32> {
			ProfileValidation::get_evidence_period_end_block(profile_user_account)
		}

		fn get_staking_period_end_block(profile_user_account: AccountId) -> Option<u32> {
			ProfileValidation::get_staking_period_end_block(profile_user_account)
		}
		fn get_drawing_period_end(profile_user_account: AccountId) -> (u64, u64, bool) {
			ProfileValidation::get_drawing_period_end(profile_user_account)
		}
		fn get_commit_period_end_block(profile_user_account: AccountId) -> Option<u32> {
			ProfileValidation::get_commit_period_end_block(profile_user_account)
		}

		fn get_vote_period_end_block(profile_user_account: AccountId) -> Option<u32> {
			ProfileValidation::get_vote_period_end_block(profile_user_account)
		}
		fn selected_as_juror(profile_user_account: AccountId, who: AccountId) -> bool {
			ProfileValidation::selected_as_juror(profile_user_account, who)
		}
	}

}

#[cfg(test)]
mod tests {
	use super::*;
	use frame_support::traits::WhitelistedStorageKeys;
	use sp_core::hexdisplay::HexDisplay;
	use std::collections::HashSet;

	#[test]
	fn check_whitelist() {
		let whitelist: HashSet<String> = AllPalletsWithSystem::whitelisted_storage_keys()
			.iter()
			.map(|e| HexDisplay::from(&e.key).to_string())
			.collect();

		// Block Number
		assert!(
			whitelist.contains("26aa394eea5630e07c48ae0c9558cef702a5c1b19ab7a04f536c519aca4983ac")
		);
		// Total Issuance
		assert!(
			whitelist.contains("c2261276cc9d1f8598ea4b6a74b15c2f57c875e4cff74148e4628f264b974c80")
		);
		// Execution Phase
		assert!(
			whitelist.contains("26aa394eea5630e07c48ae0c9558cef7ff553b5a9862a516939d82b3d3d8661a")
		);
		// Event Count
		assert!(
			whitelist.contains("26aa394eea5630e07c48ae0c9558cef70a98fdbe9ce6c55837576c60c7af3850")
		);
		// System Events
		assert!(
			whitelist.contains("26aa394eea5630e07c48ae0c9558cef780d41e5e16056765bc8461851072c9d7")
		);
	}
}

'''
'''--- rustfmt.toml ---
# Basic
hard_tabs = true
max_width = 100
use_small_heuristics = "Max"
# Imports
imports_granularity = "Crate"
reorder_imports = true
# Consistency
newline_style = "Unix"
# Format comments
comment_width = 100
wrap_comments = true
# Misc
chain_width = 80
spaces_around_ranges = false
binop_separator = "Back"
reorder_impl_items = false
match_arm_leading_pipes = "Preserve"
match_arm_blocks = false
match_block_trailing_comma = true
trailing_comma = "Vertical"
trailing_semicolon = false
use_field_init_shorthand = true

'''
'''--- scripts/init.sh ---
#!/usr/bin/env bash
# This script is meant to be run on Unix/Linux based systems
set -e

echo "*** Initializing WASM build environment"

if [ -z $CI_PROJECT_NAME ] ; then
   rustup update nightly
   rustup update stable
fi

rustup target add wasm32-unknown-unknown --toolchain nightly

'''
'''--- traits/schelling-game-shared-link/Cargo.toml ---
[package]
name = "schelling-game-shared-link"
version = "0.1.0"
edition = "2021"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
codec = { package = "parity-scale-codec", version = "3.2.2", default-features = false, features = [
	"derive",
] }
frame-support = { version = "4.0.0-dev", default-features = false, git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }

[features]
default = ["std"]
std = [
	"codec/std",
	"frame-support/std",
]

'''
'''--- traits/schelling-game-shared-link/src/lib.rs ---
#![cfg_attr(not(feature = "std"), no_std)]
use frame_support::dispatch::DispatchResult;
use frame_support::sp_std::prelude::*;

pub trait SchellingGameSharedLink {
	type SumTreeName;
	type SchellingGameType;
	type BlockNumber;
	type AccountId;
	type Balance;
	type RangePoint;
	type Period;
	type PhaseData;
	type WinningDecision;

	fn create_phase_data(
		block_length: u64,
		max_draws: u64,
		min_number_juror_staked: u64,
		min_juror_stake: u64,
		juror_incentives: (u64, u64),
	) -> Self::PhaseData;

	fn create_phase_with_all_data(
		evidence_length: u64,
		end_of_staking_time: u64,
		staking_length: u64,
		drawing_length: u64,
		commit_length: u64,
		vote_length: u64,
		appeal_length: u64,
		max_draws: u64,
		min_number_juror_staked: u64,
		min_juror_stake: u64,
		juror_incentives: (u64, u64),
	) -> Self::PhaseData;
	fn get_period_link(key: Self::SumTreeName) -> Option<Self::Period>;

	fn set_to_evidence_period_link(
		key: Self::SumTreeName,
		now: Self::BlockNumber,
	) -> DispatchResult;
	fn create_tree_helper_link(key: Self::SumTreeName, k: u64) -> DispatchResult;

	fn set_to_staking_period_link(
		key: Self::SumTreeName,
		phase_data: Self::PhaseData,
		now: Self::BlockNumber,
	) -> DispatchResult;

	fn ensure_time_for_staking_over_link(
		key: Self::SumTreeName,
		phase_data: Self::PhaseData,
		now: Self::BlockNumber,
	) -> DispatchResult;

	fn set_to_staking_period_pe_link(
		key: Self::SumTreeName,
		now: Self::BlockNumber,
	) -> DispatchResult;
	fn change_period_link(
		key: Self::SumTreeName,
		phase_data: Self::PhaseData,
		now: Self::BlockNumber,
	) -> DispatchResult;
	fn apply_jurors_helper_link(
		key: Self::SumTreeName,
		phase_data: Self::PhaseData,
		who: Self::AccountId,
		stake: Self::Balance,
	) -> DispatchResult;
	fn draw_jurors_helper_link(
		key: Self::SumTreeName,
		phase_data: Self::PhaseData,
		interations: u64,
	) -> DispatchResult;
	fn unstaking_helper_link(key: Self::SumTreeName, who: Self::AccountId) -> DispatchResult;
	fn commit_vote_helper_link(
		key: Self::SumTreeName,
		who: Self::AccountId,
		vote_commit: [u8; 32],
	) -> DispatchResult;
	fn reveal_vote_two_choice_helper_link(
		key: Self::SumTreeName,
		who: Self::AccountId,
		choice: u128,
		salt: Vec<u8>,
	) -> DispatchResult;
	fn get_incentives_two_choice_helper_link(
		key: Self::SumTreeName,
		phase_data: Self::PhaseData,
		who: Self::AccountId,
	) -> DispatchResult;
	fn get_evidence_period_end_block_helper_link(
		key: Self::SumTreeName,
		phase_data: Self::PhaseData,
		now: Self::BlockNumber,
	) -> Option<u32>;
	fn get_staking_period_end_block_helper_link(
		key: Self::SumTreeName,
		phase_data: Self::PhaseData,
		now: Self::BlockNumber,
	) -> Option<u32>;
	fn get_drawing_period_end_helper_link(
		key: Self::SumTreeName,
		phase_data: Self::PhaseData,
	) -> (u64, u64, bool);
	fn get_commit_period_end_block_helper_link(
		key: Self::SumTreeName,
		phase_data: Self::PhaseData,
		now: Self::BlockNumber,
	) -> Option<u32>;
	fn get_vote_period_end_block_helper_link(
		key: Self::SumTreeName,
		phase_data: Self::PhaseData,
		now: Self::BlockNumber,
	) -> Option<u32>;
	fn selected_as_juror_helper_link(key: Self::SumTreeName, who: Self::AccountId) -> bool;
	fn commit_vote_for_score_helper_link(
		key: Self::SumTreeName,
		who: Self::AccountId,
		vote_commit: [u8; 32],
	) -> DispatchResult;
	fn reveal_vote_score_helper_link(
		key: Self::SumTreeName,
		who: Self::AccountId,
		choice: i64,
		salt: Vec<u8>,
	) -> DispatchResult;

	fn get_incentives_score_schelling_helper_link(
		key: Self::SumTreeName,
		phase_data: Self::PhaseData,
		range_point: Self::RangePoint,
	) -> DispatchResult;

	fn get_mean_value_link(key: Self::SumTreeName) -> i64;

	fn get_all_incentives_two_choice_helper(
		key: Self::SumTreeName,
		phase_data: Self::PhaseData,
	) -> DispatchResult;

	fn get_drawn_jurors(key: Self::SumTreeName) -> Vec<(Self::AccountId, u64)>;

	fn get_winning_decision_value_link(key: Self::SumTreeName) -> Self::WinningDecision;
}

'''
'''--- traits/shared-storage-link/Cargo.toml ---
[package]
name = "shared-storage-link"
version = "0.1.0"
edition = "2021"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
codec = { package = "parity-scale-codec", version = "3.2.2", default-features = false, features = [
	"derive",
] }
frame-support = { default-features = false, version = "4.0.0-dev", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42"}

[features]
default = ["std"]
std = [
	"codec/std",
	"frame-support/std",
]

'''
'''--- traits/shared-storage-link/src/lib.rs ---
#![cfg_attr(not(feature = "std"), no_std)]
use frame_support::{dispatch::DispatchResult, pallet_prelude::*};

pub trait SharedStorageLink {
	
	type AccountId;

	fn check_citizen_is_approved_link(address: Self::AccountId) -> DispatchResult;

	fn get_approved_citizen_count_link() -> u64;
	fn set_positive_externality_link(address: Self::AccountId, score: i64)-> DispatchResult;
	
}

'''
'''--- traits/sortition-sum-game-link/Cargo.toml ---
[package]
name = "sortition-sum-game-link"
version = "0.1.0"
edition = "2021"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
codec = { package = "parity-scale-codec", version = "3.2.2", default-features = false, features = [
	"derive",
] }
frame-support = {default-features = false, version = "4.0.0-dev", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42"}

[features]
default = ["std"]
std = [
	"codec/std",
	"frame-support/std",
]
'''
'''--- traits/sortition-sum-game-link/src/lib.rs ---
#![cfg_attr(not(feature = "std"), no_std)]
use frame_support::{dispatch::DispatchResult, pallet_prelude::*};

pub trait SortitionSumGameLink {
	type SumTreeName;
	type AccountId;
	fn create_tree_link(key: Self::SumTreeName, k: u64) -> DispatchResult;
	fn set_link(key: Self::SumTreeName, value: u64, citizen_id: Self::AccountId) -> DispatchResult;
	fn stake_of_link(
		key: Self::SumTreeName,
		citizen_id: Self::AccountId,
	) -> Result<Option<u64>, DispatchError>;
	fn draw_link(key: Self::SumTreeName, draw_number: u64) -> Result<Self::AccountId, DispatchError>;
	fn remove_tree_link(key: Self::SumTreeName) -> DispatchResult;
}

'''