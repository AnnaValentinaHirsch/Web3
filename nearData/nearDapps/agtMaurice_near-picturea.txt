*GitHub Repository "agtMaurice/near-picturea"*

'''--- public/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>NEAR marketplace DApp</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

'''
'''--- public/robots.txt ---
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

'''
'''--- src/App.js ---
import React, { useEffect, useCallback, useState } from "react";
import { Container, Nav } from "react-bootstrap";
import { login, logout as destroy, accountBalance } from "./utils/near";
import Wallet from "./components/Wallet";
import { Notification } from "./components/utils/Notifications";
import Pictures from "./components/marketplace/Pictures";
import Cover from "./components/utils/Cover";
import "./App.css";

const App = function AppWrapper() {
  const account = window.walletConnection.account();

  const [balance, setBalance] = useState("0");

  const getBalance = useCallback(async () => {
    if (account.accountId) {
      setBalance(await accountBalance());
    }
  });

  useEffect(() => {
    getBalance();
  }, [getBalance]);

  return (
    <>
      <Notification />
      {account.accountId ? (
        <Container fluid="md">
          <Nav className="justify-content-end pt-3 pb-5">
            <Nav.Item>
              <Wallet
                address={account.accountId}
                amount={balance}
                symbol="NEAR"
                destroy={destroy}
              />
            </Nav.Item>
          </Nav>
          <main>
            <Pictures />
          </main>
        </Container>
      ) : (
        <Cover name="Picturea" login={login} coverImg="https://www.drupal.org/files/project-images/grid-1_0.png" />
      )}
    </>
  );
};

export default App;

'''
'''--- src/App.test.js ---
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

'''
'''--- src/components/Wallet.js ---
import React from "react";
import { Dropdown, Stack, Spinner } from "react-bootstrap";

const Wallet = ({ address, amount, symbol, destroy }) => {
  if (address) {
    return (
      <>
        <Dropdown>
          <Dropdown.Toggle
            variant="light"
            align="end"
            id="dropdown-basic"
            className="d-flex align-items-center border rounded-pill py-1"
          >
            {amount ? (
              <>
                {amount} <span className="ms-1"> {symbol}</span>
              </>
            ) : (
              <Spinner animation="border" size="sm" className="opacity-25" />
            )}
          </Dropdown.Toggle>

          <Dropdown.Menu className="shadow-lg border-0">
            <Dropdown.Item
              href={`https://explorer.testnet.near.org/accounts/${address}`}
              target="_blank"
            >
              <Stack direction="horizontal" gap={2}>
                <i className="bi bi-person-circle fs-4" />
                <span className="font-monospace">{address}</span>
              </Stack>
            </Dropdown.Item>

            <Dropdown.Divider />
            <Dropdown.Item
              as="button"
              className="d-flex align-items-center"
              onClick={() => {
                destroy();
              }}
            >
              <i className="bi bi-box-arrow-right me-2 fs-4" />
              Disconnect
            </Dropdown.Item>
          </Dropdown.Menu>
        </Dropdown>
      </>
    );
  }

  return null;
};

export default Wallet;

'''
'''--- src/components/marketplace/AddPicture.js ---
import React, { useState } from "react";
import PropTypes from "prop-types";
import { Button, Modal, Form, FloatingLabel } from "react-bootstrap";

const AddPicture = ({ save }) => {
  
  const [image, setImage] = useState("");
  const [description, setDescription] = useState("");
  const [price, setPrice] = useState(0);
  const isFormFilled = () => image && description && price;

  const [show, setShow] = useState(false);

  const handleClose = () => setShow(false);
  const handleShow = () => setShow(true);

  return (
    <>
      <Button
        onClick={handleShow}
        variant="dark"
        className="rounded-pill px-0"
        style={{ width: "38px" }}
      >
        <i className="bi bi-plus"></i>
      </Button>
      <Modal show={show} onHide={handleClose} centered>
        <Modal.Header closeButton>
          <Modal.Title>Add New Picture</Modal.Title>
        </Modal.Header>
        <Form>
          <Modal.Body>
          
            <FloatingLabel
              controlId="inputUrl"
              label="Image URL"
              className="mb-3"
            >
              <Form.Control
                type="text"
                placeholder="Image URL"
                onChange={(e) => {
                  setImage(e.target.value);
                }}
              />
            </FloatingLabel>

           
            <FloatingLabel
              controlId="inputDescription"
              label="Description"
              className="mb-3"
            >
              <Form.Control
                as="textarea"
                placeholder="description"
                style={{ height: "80px" }}
                onChange={(e) => {
                  setDescription(e.target.value);
                }}
              />
            </FloatingLabel>
            
            <FloatingLabel
              controlId="inputPrice"
              label="Price"
              className="mb-3"
            >
              <Form.Control
                type="text"
                placeholder="Price"
                onChange={(e) => {
                  setPrice(e.target.value);
                }}
              />
            </FloatingLabel>

           
          </Modal.Body>
        </Form>
        <Modal.Footer>
          <Button variant="outline-secondary" onClick={handleClose}>
            Close
          </Button>
          <Button
            variant="dark"
            disabled={!isFormFilled()}
            onClick={() => {
              save({
                image,
                description,
                price,
              });
              handleClose();
            }}
          >
            Save picture
          </Button>
        </Modal.Footer>
      </Modal>
    </>
  );
};

AddPicture.propTypes = {
  save: PropTypes.func.isRequired,
};

export default AddPicture;

'''
'''--- src/components/marketplace/Picture.js ---
import React from "react";
import PropTypes from "prop-types";
import { utils } from "near-api-js";
import { Card, Button, Col, Badge, Stack, Form } from "react-bootstrap";
import { useState } from "react";

const Picture = ({
	picture,
	buy,
	editPrice,
	LikePicture,
	stopForsale,
	isOwner,
}) => {
	const {
		id,
		image,
		description,
		price,
		owner,
		sold,
		likes,
		forSale

	} = picture;

	const [newprice, setNewPrice] = useState("");

	const triggerBuy = () => {
		buy(id, price);
	};

	
	const triggereditPrice = () => {
		editPrice(id, newprice);
	};
	const triggerLike = () => {
		LikePicture(id);
	};

	const triggereStopforSale = () => {
		stopForsale(id);
	};

	return (
		<Col>
			<Card className=" h-100">
				<Card.Header>
					<Stack direction="horizontal" gap={3}>
						<span className="font-monospace text-secondary">
							{owner}
						</span>
						<Badge bg="secondary" className="ms-auto">
							{sold} Sold
						</Badge>
						<Badge bg="secondary" className="ms-auto">
							{likes} Likes
						</Badge>
					</Stack>
				</Card.Header>
				<div className=" ratio ratio-4x3">
					<img
						src={image}
						alt={description}
						style={{ objectFit: "cover" }}
					/>
				</div>
				<Card.Body className="d-flex  flex-column text-center">
					<Card.Title>Description: {description}</Card.Title>

					{isOwner === true && forSale !== false && (
						<>
							<Form.Control
								className={"pt-2 mb-1"}
								type="number"
								placeholder="Enter new price"
								onChange={(e) => {
									setNewPrice(e.target.value);
								}}
							/>

							<Button
								variant="dark"
								className={"mb-4"}
								onClick={() => triggereditPrice()}
							>
								Change price
							</Button>
						</>
					)}

				
					{isOwner === true && forSale !== false && (
						<>
							

							<Button
								variant="dark"
								className={"mb-4"}
								onClick={() => triggereStopforSale()}
							>
								Stop sale
							</Button>
						</>
					)}

					{isOwner !== true && (
						<>
							<Button
								variant="primary"
								className={"mb-4"}
								onClick={() => triggerLike()}
							>
								Like Picture
							</Button>
						</>
					)}

					{isOwner !== true && forSale === true && (
						<Button
							variant="outline-dark"
							onClick={triggerBuy}
							className="w-100 py-3"
						>
							Buy for {utils.format.formatNearAmount(price)} NEAR
						</Button>
					
					)}
				</Card.Body>
			</Card>
		</Col>
	);
};

Picture.propTypes = {
	picture: PropTypes.instanceOf(Object).isRequired,
	buy: PropTypes.func.isRequired,
};

export default Picture;

'''
'''--- src/components/marketplace/Pictures.js ---
import React, { useEffect, useState, useCallback } from "react";
import { toast } from "react-toastify";
import AddPicture from "./AddPicture";
import Picture from "./Picture";
import Loader from "../utils/Loader";
import { Row } from "react-bootstrap";

import { NotificationSuccess, NotificationError } from "../utils/Notifications";
import {
  getPictures as getPictureList,
  buyPicture,
  stopSale,
  likePicture,
  changePrice,
  createPicture,
} from "../../utils/marketplace";

const Pictures = () => {
  const [pictures, setPictures] = useState([]);
  const [loading, setLoading] = useState(false);

  const account = window.walletConnection.account();

 
  const getPictures = useCallback(async () => {
    try {
      setLoading(true);
      setPictures(await getPictureList());
    } catch (error) {
      console.log({ error });
    } finally {
      setLoading(false);
    }
  });

  const addPicture = async (data) => {
    setLoading(true);
    try {
      await createPicture(data).then((resp) => {
        toast(<NotificationSuccess text="Picture added successfully." />);
        getPictures();
      });
    } catch (error) {
      console.log({ error });
      toast(<NotificationError text="Failed to add a picture." />);
    } finally {
      setLoading(false);
    }
  };

  const stopForsale = async (id) => {
    setLoading(true);

    try {
      await stopSale(id).then((resp) => {
        toast(<NotificationSuccess text="Sale succesfully stoped." />);
        getPictures();
      });
    } catch (error) {
      console.log({ error });
      toast(<NotificationError text="Failed to stop sale." />);
    } finally {
      setLoading(false);
    }
  };

  const LikePicture = async (id) => {
    setLoading(true);

    try {
      await likePicture(id).then((resp) => {
        toast(<NotificationSuccess text="you successfully liked this picture" />);
        getPictures();
      });
    } catch (error) {
      console.log({ error });
      toast(<NotificationError text="Failed to like picture" />);
    } finally {
      setLoading(false);
    }
  };

  const editPrice = async (_Id, _price) => {
    setLoading(true);

    try {
      await changePrice(_Id, _price).then((resp) => {
        toast(<NotificationSuccess text="price changed successfully." />);
        getPictures();
      });
    } catch (error) {
      console.log({ error });
      toast(<NotificationError text="Failed to change the price." />);
    } finally {
      setLoading(false);
    }
  };

  

  //  function to initiate transaction
  const buy = async (id, price) => {
    try {
      await buyPicture({
        id,
        price,
      }).then((resp) =>{
        toast(<NotificationSuccess text="Picture bought successfully" />);
        getPictures()
      });
    } catch (error) {
      toast(<NotificationError text="Failed to purchase picture." />);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    getPictures();
  }, []);

  return (
    <>
      {!loading ? (
        <>
          <div className="d-flex justify-content-between align-items-center mb-4">
            <h1 className="fs-4 fw-bold mb-0">Picturea</h1>
            <AddPicture save={addPicture} />
          </div>
          <Row xs={1} sm={2} lg={3} className="g-3  mb-5 g-xl-4 g-xxl-5">
            {pictures.map((_picture) => (
              <Picture
                picture={{
                  ..._picture,
                }}
                key={_picture.id}
                buy={buy}
                editPrice={editPrice}
                stopForsale={stopForsale}
                LikePicture={LikePicture}
                isOwner = {account.accountId === _picture.owner}
              />
            ))}
          </Row>
        </>
      ) : (
        <Loader />
      )}
    </>
  );
};

export default Pictures;

'''
'''--- src/components/utils/Cover.js ---
import React from "react";
import PropTypes from "prop-types";
import { Button } from "react-bootstrap";

const Cover = ({ name, login, coverImg }) => {
  if ((name, login, coverImg)) {
    return (
      <div
        className="d-flex justify-content-center flex-column text-center "
        style={{ background: "#000", minHeight: "100vh" }}
      >
        <div className="mt-auto text-light mb-5">
          <div
            className=" ratio ratio-1x1 mx-auto mb-2"
            style={{ maxWidth: "320px" }}
          >
            <img src={coverImg} alt="" />
          </div>
          <h1>{name}</h1>
          <p>Please connect your wallet to continue.</p>
          <Button
            onClick={login}
            variant="outline-light"
            className="rounded-pill px-3 mt-3"
          >
            Connect Wallet
          </Button>
        </div>
        <p className="mt-auto text-secondary">Powered by NEAR</p>
      </div>
    );
  }
  return null;
};

Cover.propTypes = {
  name: PropTypes.string,
};

Cover.defaultProps = {
  name: "",
};

export default Cover;

'''
'''--- src/components/utils/Loader.js ---
import React from "react";
import { Spinner } from "react-bootstrap";

const Loader = () => (
  <div className="d-flex justify-content-center">
    <Spinner animation="border" role="status" className="opacity-25">
      <span className="visually-hidden">Loading...</span>
    </Spinner>
  </div>
);
export default Loader;

'''
'''--- src/components/utils/Notifications.js ---
import React from "react";
import { ToastContainer } from "react-toastify";
import PropTypes from "prop-types";
import "react-toastify/dist/ReactToastify.css";

const Notification = () => (
  <ToastContainer
    position="bottom-center"
    autoClose={5000}
    hideProgressBar
    newestOnTop
    closeOnClick
    rtl={false}
    pauseOnFocusLoss
    draggable={false}
    pauseOnHover
  />
);

const NotificationSuccess = ({ text }) => (
  <div>
    <i className="bi bi-check-circle-fill text-success mx-2" />
    <span className="text-secondary mx-1">{text}</span>
  </div>
);

const NotificationError = ({ text }) => (
  <div>
    <i className="bi bi-x-circle-fill text-danger mx-2" />
    <span className="text-secondary mx-1">{text}</span>
  </div>
);

const Props = {
  text: PropTypes.string,
};

const DefaultProps = {
  text: "",
};

NotificationSuccess.propTypes = Props;
NotificationSuccess.defaultProps = DefaultProps;

NotificationError.propTypes = Props;
NotificationError.defaultProps = DefaultProps;

export { Notification, NotificationSuccess, NotificationError };

'''
'''--- src/index.js ---
import React from "react";
import ReactDOM from "react-dom";
import App from "./App";
import reportWebVitals from "./reportWebVitals";
import { initializeContract } from "./utils/near";
import "bootstrap-icons/font/bootstrap-icons.css";
import "bootstrap/dist/css/bootstrap.min.css";

window.nearInitPromise = initializeContract()
  .then(() => {
    ReactDOM.render(
      <React.StrictMode>
        <App />
      </React.StrictMode>,
      document.getElementById("root")
    );
  })
  .catch(console.error);

reportWebVitals();

'''
'''--- src/reportWebVitals.js ---
const reportWebVitals = (onPerfEntry) => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({
      getCLS, getFID, getFCP, getLCP, getTTFB,
    }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

'''
'''--- src/setupTests.js ---
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

'''
'''--- src/utils/config.js ---
const CONTRACT_NAME = process.env.CONTRACT_NAME || "picturea.mauricetest.testnet"; // put here a smart contracts' name

function environment(env) {
  switch (env) {
    case "mainnet":
      return {
        networkId: "mainnet",
        nodeUrl: "https://rpc.mainnet.near.org",
        contractName: CONTRACT_NAME,
        walletUrl: "https://wallet.near.org",
        helperUrl: "https://helper.mainnet.near.org",
        explorerUrl: "https://explorer.mainnet.near.org",
      };
    case "testnet":
      return {
        networkId: "testnet",
        nodeUrl: "https://rpc.testnet.near.org",
        contractName: CONTRACT_NAME,
        walletUrl: "https://wallet.testnet.near.org",
        helperUrl: "https://helper.testnet.near.org",
        explorerUrl: "https://explorer.testnet.near.org",
      };
    default:
      throw Error(`Unknown environment '${env}'.`);
  }
}

export default environment;

'''
'''--- src/utils/marketplace.js ---
import { v4 as uuid4 } from "uuid";
import { parseNearAmount } from "near-api-js/lib/utils/format";

const GAS = 100000000000000;

export function createPicture(picture) {
  picture.id = uuid4();
  picture.price = parseNearAmount(picture.price + "");
  return window.contract.setPicture({ picture });
}

export function changePrice( Id, _price ) {
  const price = parseNearAmount(_price + "");
  return window.contract.changePrice( { pictureId: Id, price: price }, GAS );
}

export function likePicture( Id ) {
  return window.contract.likePicture( { pictureId: Id }, GAS );
}

export function stopSale( id ) {
  return window.contract.stopSale( { id: id }, GAS );
}

export function getPictures() {
  return window.contract.getPictures();
}

export async function buyPicture({ id, price }) {
  await window.contract.buyPicture({ pictureId: id }, GAS, price);
}

'''
'''--- src/utils/near.js ---
import environment from "./config";
import { connect, Contract, keyStores, WalletConnection } from "near-api-js";
import { formatNearAmount } from "near-api-js/lib/utils/format";

const nearEnv = environment("testnet");

export async function initializeContract() {
  const near = await connect(
    Object.assign(
      { deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() } },
      nearEnv
    )
  );
  window.walletConnection = new WalletConnection(near);
  window.accountId = window.walletConnection.getAccountId();
  window.contract = new Contract(
    window.walletConnection.account(),
    nearEnv.contractName,
    {
      // List here all view methods
      viewMethods: ["getPicture", "getPictures", "getLiked"],
      // List call methods that change state
      changeMethods: ["setPicture", "buyPicture", "changePrice", "likePicture", "stopSale"],
    }
  );
}

export async function accountBalance() {
  return formatNearAmount(
    (await window.walletConnection.account().getAccountBalance()).total,
    2
  );
}

export async function getAccountId() {
  return window.walletConnection.getAccountId();
}

export function login() {
  window.walletConnection.requestSignIn(nearEnv.contractName);
}

export function logout() {
  window.walletConnection.signOut();
  window.location.reload();
}

'''