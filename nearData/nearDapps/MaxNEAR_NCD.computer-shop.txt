*GitHub Repository "MaxNEAR/NCD.computer-shop"*

'''--- README.md ---
# NCD.computer-shop
This is project was created for NCD qualification.

## Overview

This repository includes a complete project structure for AssemblyScript contracts targeting the NEAR platform.

The project contains:
- a single contract with name ComputerShopContract
- unit tests for contract
- basic scripts to deploy and use contract

## Project requirements

This project required:
- NodeJS version 14.*
- installed yarn (npm i -g yarn)
- installed near-cli (npm i -g near-cli)

## Getting started
(see below for video recordings of each of the following steps)

1) clone this repo to a local folder
2) run "yarn"
3) run "yarn build"
4) run tests "yarn test". Check that all tests are passed.

Next steps should be run only in bash

5) run "./scripts/1.dev-deploy.sh"
6) run "./scripts/2.use-contract.sh"
7) run "./scripts/3.cleanup.sh"

### Project structure

Project contains main folders:
- scripts:
    Contain scripts for deploying and running smart contracts.
    Additionally contain README.md file which describe how to work with scripts.
- src:
    Contain source files of contracts and related logic.

ComputerShopContract located in src/project/assembly/index.ts

### Videos

**`1.dev-deploy.sh`**

This video shows the build and deployment of the contract.
https://www.loom.com/share/657a3b11a7f14d58ab6243aa75349f7a

**`2.use-contract.sh`**

This video shows contract methods being called.
https://www.loom.com/share/12d49bd09a41435cbb600daacd544d4b

**`3.cleanup.sh`**

This video shows the cleanup script running.  Make sure you add the `BENEFICIARY` environment variable. The script will remind you if you forget.
https://www.loom.com/share/4daf307c024c4040ac458a05764899da

```sh
export BENEFICIARY=<your-account-here>   # this account receives contract account balance
```

'''
'''--- as-pect.config.js ---
module.exports = require("near-sdk-as/imports");
module.exports.include.push("**/*.unit.spec.ts");

'''
'''--- asconfig.json ---
{
  "workspaces": [
    "src/project"
  ]
}

'''
'''--- package.json ---
{
  "type": "commonjs",
  "name": "computer-shop-contract-application",
  "version": "0.0.1",
  "description": "Start with a basic project",
  "scripts": {
    "dev": "watch -d -n 1 'clear && yarn test'",
    "test": "yarn asp -f unit.spec",
    "clean": "rm -rf ./build && rm -rf ./neardev",
    "build": "asb --target debug",
    "build:release": "asb",
    "asp": "asp --verbose --nologo"
  },
  "keywords": [],
  "author": "maksym.syzrantsev@megadevllc.com",
  "license": "GNUv3",
  "devDependencies": {
    "near-sdk-as": "^2.1.0"
  }
}

'''
'''--- scripts/1.dev-deploy.sh ---
#!/usr/bin/env bash

# exit on first error after this point to avoid redeploying with successful build
set -e

echo
echo ---------------------------------------------------------
echo "Step 1: Build the contract (may take a few seconds)"
echo ---------------------------------------------------------
echo

yarn build

echo
echo
echo ---------------------------------------------------------
echo "Step 2: Deploy the contract"
echo
echo "(edit scripts/1.dev-deploy.sh to deploy other contract)"
echo ---------------------------------------------------------
echo

# comment the line below to deploy the other example contract
near dev-deploy ./build/debug/project.wasm

echo
echo
echo ---------------------------------------------------------
echo "Step 3: Prepare your environment for next steps"
echo
echo "(a) find the contract (account) name in the message above"
echo "    it will look like this: [ Account id: dev-###-### ]"
echo
echo "(b) set an environment variable using this account name"
echo "    see example below (this may not work on Windows)"
echo
echo ---------------------------------------------------------
echo 'export CONTRACT=<dev-123-456>'
echo "near call \$CONTRACT init --accountId \$CONTRACT"
echo ---------------------------------------------------------
echo

exit 0

'''
'''--- scripts/2.use-contract.sh ---
#!/usr/bin/env bash

# exit on first error after this point to avoid redeploying with successful build
set -e

echo
echo ---------------------------------------------------------
echo "Step 0: Check for environment variable with contract name"
echo ---------------------------------------------------------
echo

[ -z "$CONTRACT" ] && echo "Missing \$CONTRACT environment variable" && exit 1
[ -z "$CONTRACT" ] || echo "Found it! \$CONTRACT is set to [ $CONTRACT ]"

echo
echo
echo ---------------------------------------------------------
echo "Step 1: Call 'view' functions on the contract"
echo
echo "(run this script again to see changes made by this file)"
echo ---------------------------------------------------------
echo
echo "Called function to show current state"
near view $CONTRACT showCurrentShopState --accountId $CONTRACT
echo
echo ---------------------------------------------------------
echo "Step 2: Call 'change' functions on the contract"
echo ---------------------------------------------------------
echo
echo "Called function to buy 2 laptops and 3 desktops"
near call $CONTRACT buyComputers '{"laptopCount": 2, "desktopCount": 3}' --accountId $CONTRACT
echo
echo "Called function to sell 1 laptop"
near call $CONTRACT sellLaptops '{"count": 1}' --accountId $CONTRACT
echo
echo "Called function to sell 2 desktops"
near call $CONTRACT sellDesktops '{"count": 2}' --accountId $CONTRACT
echo
echo "Called function to show current state"
near view $CONTRACT showCurrentShopState --accountId $CONTRACT

echo
echo "now run this script again to see changes made by this file"
exit 0

'''
'''--- scripts/3.cleanup.sh ---
#!/usr/bin/env bash

# exit on first error after this point to avoid redeploying with successful build
set -e

echo
echo ---------------------------------------------------------
echo "Step 0: Check for required environment variables"
echo ---------------------------------------------------------
echo

[ -z "$CONTRACT" ] && echo "Missing \$CONTRACT environment variable" && exit 1
[ -z "$BENEFICIARY" ] && echo "Missing \$BENEFICIARY environment variable" && exit 1
[ -z "$CONTRACT" ] || echo "Found it! \$CONTRACT is set to [ $CONTRACT ]"
[ -z "$BENEFICIARY" ] || echo "Found it! \$BENEFICIARY is set to [ $BENEFICIARY ]"

echo
echo
echo ---------------------------------------------------------
echo "Step 1: Delete $CONTRACT, setting $BENEFICIARY as beneficiary"
echo ---------------------------------------------------------
echo
near delete $CONTRACT $BENEFICIARY

echo
echo ---------------------------------------------------------
echo "Step 2: Clean up project folders"
echo ---------------------------------------------------------
echo
yarn clean

exit 0

'''
'''--- scripts/README.md ---
## Setting up your terminal

The scripts in this folder are designed to help you demonstrate the behavior of the contract(s) in this project.

It uses the following setup:

```sh
# set your terminal up to have 2 windows, A and B like this:
┌─────────────────────────────────┬─────────────────────────────────┐
│                                 │                                 │
│                                 │                                 │
│                A                │                B                │
│                                 │                                 │
│                                 │                                 │
└─────────────────────────────────┴─────────────────────────────────┘
```

### Terminal **A**

*This window is used to compile, deploy and control the contract*
- Environment
  ```sh
  export CONTRACT=        # depends on deployment
  export OWNER=           # any account you control

  # for example
  # export CONTRACT=dev-1644945903363-79757305293203
  # export OWNER=maxnear.testnet
  ```

- Commands

  _helper scripts_
  ```sh
  1.dev-deploy.sh                # helper: build and deploy contracts
  2.use-contract.sh              # helper: call methods on ContractPromise
  3.cleanup.sh                   # helper: delete build and deploy artifacts
  ```

### Terminal **B**

*This window is used to render the contract account storage*
- Environment
  ```sh
  export CONTRACT=               # depends on deployment

  # for example
  # export CONTRACT=dev-1644945903363-79757305293203
  ```

- Commands
  ```sh
  # monitor contract storage using near-account-utils
  # https://github.com/near-examples/near-account-utils
  watch -d -n 1 yarn storage $CONTRACT
  ```
---

## OS Support

### Linux

- The `watch` command is supported natively on Linux
- To learn more about any of these shell commands take a look at [explainshell.com](https://explainshell.com)

### MacOS

- Consider `brew info visionmedia-watch` (or `brew install watch`)

### Windows

- Consider this article: [What is the Windows analog of the Linux watch command?](https://superuser.com/questions/191063/what-is-the-windows-analog-of-the-linuo-watch-command#191068)

'''
'''--- src/as_types.d.ts ---
/// <reference types="near-sdk-as/assembly/as_types" />
'''
'''--- src/project/__tests__/as-pect.d.ts ---
/// <reference types="@as-pect/assembly/types/as-pect" />
'''
'''--- src/project/__tests__/index.unit.spec.ts ---
import { ComputerShopContract } from "../assembly";
import { storage } from 'near-sdk-as';

const laptopCounterName: string = "laptop"
const desktopCounterName: string = "desktop"

let contract: ComputerShopContract

beforeEach(() => {
  contract = new ComputerShopContract()
})

describe("ComputerShopContract", () => {
  // buyComputers
  it("buy laptops with no computers in inventory", () => {
    contract.buyComputers(3);
    expect(storage.getPrimitive<i32>(laptopCounterName, 0)).toBe(3, "Count of laptops should be: 3");
  })

  it("buy desktops with no computers in inventory", () => {
    contract.buyComputers(0, 5);
    expect(storage.getPrimitive<i32>(desktopCounterName, 0)).toBe(5, "Count of desktop should be: 5");
  })

  // sellLaptops
  it("sell laptops with no computers in inventory", () => {
    contract.sellLaptops(1)
    expect(storage.getPrimitive<i32>(laptopCounterName, 0)).toBe(0, "Count of laptops should be: 0");
  })

  it("sell laptops with computers in inventory", () => {
    contract.buyComputers(5, 5)
    contract.sellLaptops(2)
    expect(storage.getPrimitive<i32>(laptopCounterName, 0)).toBe(3, "Count of laptops should be: 3");
  })

  // sellDesktops
  it("sell desktops with no computers in inventory", () => {
    contract.sellLaptops(1)
    expect(storage.getPrimitive<i32>(laptopCounterName, 0)).toBe(0, "Count of laptops should be: 0");
  })

  it("sell desktops with computers in inventory", () => {
    contract.buyComputers(5, 5)
    contract.sellDesktops(3)
    expect(storage.getPrimitive<i32>(desktopCounterName, 0)).toBe(2, "Count of desktops should be: 2");
  })
})

'''
'''--- src/project/asconfig.json ---
{
  "extends": "near-sdk-as/asconfig.json"
}

'''
'''--- src/project/assembly/index.ts ---
import { storage, Context, logging } from "near-sdk-core"

@nearBindgen
export class ComputerShopContract {
  private laptopCounterName: string = "laptop"
  private desktopCounterName: string = "desktop"

  /**
  * Sells laptop computers to customer and remove them from inventory. 
  * @param {i32} count - Count of laptops which customer want to buy
  */
  sellLaptops(count: i32): void {
    const currentCount = storage.getPrimitive<i32>(this.laptopCounterName, 0);
    let diff = currentCount - count;
    if (diff >= 0) {
      storage.set<i32>(this.laptopCounterName, diff);
      logging.log("Computer shop sell: "+ count.toString() + " laptops.");
    } else {
      logging.log("Computer shop cannot sell: "+ count.toString() + " laptops.");
    }
  }

  /** 
  * Sells desktop computers to customer and remove them from inventory.
  * @param {i32} count - Count of desktop computers which customer want to buy
  */
  sellDesktops(count: i32): void {
    const currentCount = storage.getPrimitive<i32>(this.desktopCounterName, 0);
    let diff = currentCount - count;
    if (diff >= 0) {
      storage.set<i32>(this.desktopCounterName, diff);
      logging.log("Computer shop sell: "+ count.toString() + " desktops.");
    } else {
      logging.log("Computer shop cannot sell: "+ count.toString() + " desktops.");
    }
  }

  /**  
  * Show current state of inventory
  */
  showCurrentShopState(): void {
    const laptopCount = storage.getPrimitive<i32>(this.laptopCounterName, 0);
    const desktopCount = storage.getPrimitive<i32>(this.desktopCounterName, 0);

    this._storageReport();

    logging.log("Computer shop inventory.");
    logging.log("Laptop computers: "+ laptopCount.toString());
    logging.log("Desktop computers: "+ desktopCount.toString());
  }

  /**  
  * Show current state of inventory
  * @param {i32} laptopCount - Count of laptop computers which shop buyed at suppliers
  * @param {i32} desktopCount - Count of desktop computers which shop buyed at suppliers
  * @returns State message
  */
  buyComputers(laptopCount: i32 = 0, desktopCount: i32 = 0): void {
    let currentCount = storage.getPrimitive<i32>(this.laptopCounterName, 0);
    let newValue = currentCount + laptopCount;
    storage.set<i32>(this.laptopCounterName, newValue);

    currentCount = storage.getPrimitive<i32>(this.desktopCounterName, 0);
    newValue = currentCount + desktopCount;
    storage.set<i32>(this.desktopCounterName, newValue);

    this._storageReport();
  }

  /**
  * Summarize data about contract and transaction
  */
  private _storageReport(): void {
    logging.log("Contract: " + Context.contractName);
    logging.log("Storage: " + Context.storageUsage.toString() + " bytes");
  }
}
'''
'''--- src/tsconfig.json ---
{
  "extends": "../node_modules/assemblyscript/std/assembly.json",
  "include": ["./**/*.ts"]
}

'''
'''--- src/utils.ts ---
import { u128, Context, ContractPromise } from "near-sdk-as";

/**
 * == TYPES ====================================================================
 */

/**
 * Account IDs in NEAR are just strings.
 */
export type AccountId = string;

/**
 * Gas is u64
 */
export type Gas = u64;

/**
 * Amounts, Balances, and Money in NEAR is are u128.
 */

export type Amount = u128;

export type Balance = Amount;

export type Money = Amount;

/**
 * Timestamp in NEAR is a number.
 */
export type Timestamp = u64;

/**
 * == CONSTANTS ================================================================
 *
 * ONE_NEAR = unit of NEAR token in yocto Ⓝ (1e24)
 * XCC_GAS = gas for cross-contract calls, ~5 Tgas (teragas = 1e12) per "hop"
 * MIN_ACCOUNT_BALANCE = 3 NEAR min to keep account alive via storage staking
 *
 * TODO: revist MIN_ACCOUNT_BALANCE after some real data is included b/c this
 *  could end up being much higher
 */

export const ONE_NEAR = u128.from("1000000000000000000000000");
export const XCC_GAS: Gas = 20_000_000_000_000;
export const MIN_ACCOUNT_BALANCE: u128 = u128.mul(ONE_NEAR, u128.from(3));

/**
 * == FUNCTIONS ================================================================
 */

/**
 * @function asNEAR
 * @param amount {u128} - Yocto Ⓝ token quantity as an unsigned 128-bit integer
 * @returns {string}    - Amount in NEAR, as a string
 *
 * @example
 *
 *    asNEAR(7000000000000000000000000)
 *    // => '7'
 */
export function asNEAR(amount: u128): string {
  return u128.div(amount, ONE_NEAR).toString();
}

/**
 * @function toYocto
 * @param amount {number} - Integer to convert
 * @returns {u128}        - Amount in yocto Ⓝ as an unsigned 128-bit integer
 *
 * @example
 *
 *    toYocto(7)
 *    // => 7000000000000000000000000
 */
export function toYocto(amount: number): u128 {
  return u128.mul(ONE_NEAR, u128.from(amount))
}

/**
 * Function to assert that the contract has called itself
 */
export function assert_self(): void {
  const caller = Context.predecessor
  const self = Context.contractName
  assert(caller == self, "Only this contract may call itself");
}

export function assert_single_promise_success(): void {
  const x = ContractPromise.getResults()
  assert(x.length == 1, "Expected exactly one promise result")
  assert(x[0].succeeded, "Expected PromiseStatus to be successful")
}

'''