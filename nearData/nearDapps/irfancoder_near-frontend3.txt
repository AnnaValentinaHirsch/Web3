*GitHub Repository "irfancoder/near-frontend3"*

'''--- .eslintrc.js ---
/** @format */

module.exports = {
    root: true,
    env: {
        node: true,
        browser: true
    },
    extends: ['plugin:vue/vue3-essential', 'eslint:recommended'],
    parserOptions: {
        parser: '@babel/eslint-parser'
    },

    rules: {
        'vue/multi-word-component-names': 'off'
    }
}

'''
'''--- README.md ---
# near-frontend3

## Project setup
```
yarn install
```

### Compiles and hot-reloads for development
```
yarn serve
```

### Compiles and minifies for production
```
yarn build
```

### Lints and fixes files
```
yarn lint
```

### Customize configuration
See [Configuration Reference](https://cli.vuejs.org/config/).

'''
'''--- babel.config.js ---
/** @format */

module.exports = {
    presets: ['@vue/cli-plugin-babel/preset']
}

'''
'''--- jsconfig.json ---
{
  "compilerOptions": {
    "target": "es5",
    "module": "esnext",
    "baseUrl": "./",
    "moduleResolution": "node",
    "paths": {
      "@/*": [
        "src/*"
      ]
    },
    "lib": [
      "esnext",
      "dom",
      "dom.iterable",
      "scripthost"
    ]
  }
}

'''
'''--- package.json ---
{
  "name": "near-frontend3",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "lint": "vue-cli-service lint",
    "dev": "vue-cli-service serve",
    "prod": "vue-cli-service build"
  },
  "dependencies": {
    "core-js": "^3.8.3",
    "near-api-js": "^0.44.2",
    "vue": "^3.2.13",
    "vuex": "^4.0.2"
  },
  "devDependencies": {
    "@babel/core": "^7.12.16",
    "@babel/eslint-parser": "^7.12.16",
    "@vue/cli-plugin-babel": "~5.0.0",
    "@vue/cli-plugin-eslint": "~5.0.0",
    "@vue/cli-service": "~5.0.0",
    "autoprefixer": "^10.4.2",
    "buffer": "^6.0.3",
    "eslint": "^7.32.0",
    "eslint-plugin-vue": "^8.0.3",
    "node-sass": "^7.0.1",
    "postcss": "^8.4.7",
    "sass-loader": "^12.6.0",
    "tailwindcss": "^3.0.23",
    "vue-cli-plugin-tailwind": "~2.2.18",
    "vue-router": "4"
  },
  "browserslist": [
    "> 1%",
    "last 2 versions",
    "not dead",
    "not ie 11"
  ]
}

'''
'''--- postcss.config.js ---
/** @format */

module.exports = {
    plugins: {
        tailwindcss: {},
        autoprefixer: {}
    }
}

'''
'''--- public/index.html ---
<!DOCTYPE html>
<html lang="">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">
    <link rel="icon" href="<%= BASE_URL %>favicon.ico">
    <title><%= htmlWebpackPlugin.options.title %></title>
  </head>
  <body>
    <noscript>
      <strong>We're sorry but <%= htmlWebpackPlugin.options.title %> doesn't work properly without JavaScript enabled. Please enable it to continue.</strong>
    </noscript>
    <div id="app"></div>
    <!-- built files will be auto injected -->
  </body>
</html>

'''
'''--- src/layouts/index.js ---
/** @format */

export { default as Authenticated } from './authenticated'
export { default as Guest } from './guest'

'''
'''--- src/main.js ---
/** @format */

import { createApp } from 'vue'
import { createStore } from './store'
import { instance } from './utils/near'
import At from './components/At'
import App from './app'
import routes from '@/routes'
import './sass/app.scss'

void (async function main() {
    const app = createApp(App)
    const store = createStore(app)

    /* Global Properties */
    app.config.globalProperties.$near = await instance()

    /* Global Components */
    app.component('at', At)

    /* Plugins */
    app.use(routes)
    app.use(store)

    /* Initializes State */
    store.dispatch('init')

    /* Vue Mount */
    app.mount('#app')
})()

'''
'''--- src/pages/index.js ---
/** @format */

export { default as Home } from './home'
export { default as Login } from './auth/login'

'''
'''--- src/routes/index.js ---
/** @format */

import { createRouter, createWebHistory } from 'vue-router'
import * as Layout from '@/layouts'
import * as Pages from '@/pages'

const { Authenticated, Guest } = Layout
const { Home, Login } = Pages

const routes = [
    {
        path: '/',
        component: Home,
        name: 'home:index',
        meta: {
            layout: [Authenticated, Guest]
        }
    },
    {
        path: '/login',
        component: Login,
        name: 'auth:login:index',
        meta: {
            layout: [Guest]
        }
    }
]

const router = createRouter({
    history: createWebHistory(),
    routes: routes,
    scrollBehavior(to, from, savedPosition) {
        if (savedPosition) {
            return savedPosition
        } else {
            return { top: 0, behavior: 'smooth' }
        }
    }
})

export default router

'''
'''--- src/store/index.js ---
/** @format */

import { createStore as createVuexStore } from 'vuex'
import user from './modules/user'
import contract from './modules/contract'

export const createStore = (app) => {
    return createVuexStore({
        modules: {
            user: user(app),
            contract: contract()
        },
        actions: {
            init({ commit }) {
                commit('user/init')
                commit('contract/init')
            }
        }
    })
}

'''
'''--- src/store/modules/contract.js ---
/** @format */
import { contract } from '@/utils/near'

export default () => {
    return {
        namespaced: true,

        state() {
            return {
                contract: null,
                stash: {
                    count: 0
                }
            }
        },

        getters: {
            count(state) {
                return state.stash.count
            }
        },

        mutations: {
            init(state) {
                state.contract = contract(this.getters['user/account'])

                // Only load contract state if user is authenticated
                if (this.state.user.wallet) this.dispatch('contract/getCount')
            },
            setCount(state, payload) {
                state.stash.count = payload
            }
        },
        /**
         * Contract View & Change Methods
         */
        actions: {
            async getCount({ state, commit }) {
                commit('setCount', await state.contract.get_count())
            },

            async increment({ state, getters, commit }, payload) {
                await state.contract.increment({ to_add: payload })
                commit('setCount', getters['count'] + payload)
            },

            async decrement({ state, getters, commit }, payload) {
                await state.contract.decrement({ to_sub: payload })
                commit('setCount', getters['count'] - payload)
            }
        }
    }
}

'''
'''--- src/store/modules/user.js ---
/** @format */
import { wallet } from '@/utils/near'

export default (app) => {
    return {
        namespaced: true,

        state() {
            return {
                wallet: null
            }
        },

        getters: {
            walletAddress(state) {
                return state.wallet.getAccountId()
            },

            isAuthed(state) {
                return state.wallet.isSignedIn()
            },

            account(state) {
                return state.wallet.account()
            }
        },

        mutations: {
            init(state) {
                state.wallet = wallet(app.config.globalProperties.$near)
                console.log(state.wallet)
            },
            reset(state) {
                state.wallet = null
            }
        },

        actions: {
            signIn({ state }) {
                state.wallet.requestSignIn('irfanismail.testnet', 'MyFirstContract', 'http://localhost:8080/', 'http://localhost:8080/')
            },

            signOut({ state, commit }) {
                state.wallet.signOut()
                commit('reset')
                app.config.globalProperties.$router.go()
            }
        }
    }
}

'''
'''--- src/utils/index.js ---
/** @format */

export const route = (path, component, name, layout) => {
    if (!path || !component || !name) throw new Error('Path, component and name are required')
    return {
        path: path,
        component: component,
        name: name,
        meta: {
            layout: layout
        }
    }
}

'''
'''--- src/utils/near.js ---
/** @format */

import { connect, keyStores, WalletAccount, WalletConnection, Contract } from 'near-api-js'
import * as buffer from 'buffer'
window.Buffer = buffer.Buffer

const config = {
    networkId: 'testnet',
    keyStore: new keyStores.BrowserLocalStorageKeyStore(),
    nodeUrl: 'https://rpc.testnet.near.org',
    walletUrl: 'https://wallet.testnet.near.org',
    helperUrl: 'https://helper.testnet.near.org',
    explorerUrl: 'https://explorer.testnet.near.org'
}

export const instance = async () => {
    const near = await connect(config)
    return near
}

export const wallet = (instance) => {
    return new WalletConnection(instance)
}

export const account = (instance) => {
    return new WalletAccount(instance)
}

export const contract = (account) => {
    return new Contract(account, 'irfanismail.testnet', {
        viewMethods: ['get_count'],
        changeMethods: ['increment', 'decrement'],
        sender: account
    })
}

'''
'''--- tailwind.config.js ---
/** @format */

module.exports = {
    content: ['./src/**/*.{vue,js}'],
    theme: {
        extend: {}
    },
    plugins: []
}

'''
'''--- vue.config.js ---
/** @format */

const { defineConfig } = require('@vue/cli-service')
const { resolve } = require('path')

module.exports = defineConfig({
    transpileDependencies: true,
    runtimeCompiler: true,
    configureWebpack: {
        resolve: {
            alias: {
                '@': resolve(__dirname, './src'),
                vue: 'vue/dist/vue.esm-bundler.js'
            },
            extensions: ['.js', '.vue', '.json']
        }
    }
})

'''