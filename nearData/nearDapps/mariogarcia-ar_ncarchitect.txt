*GitHub Repository "mariogarcia-ar/ncarchitect"*

'''--- .gitpod.yml ---
tasks:
  - init: yarn
    command: yarn dev
ports:
  - port: 1234
    onOpen: open-browser

'''
'''--- README.md ---
tcograph
==================

This [React] app was initialized with [create-near-app]

Notes
=====
 

![Img 1](https://github.com/mariogarcia-ar/ncarchitect/blob/603c7ebc5462b0b53c1ebdd701ab97ee682d4c29/src/assets/WhatsApp%20Image%202022-05-13%20at%206.19.11%20PM.jpeg)

![Img 1](https://github.com/mariogarcia-ar/ncarchitect/blob/603c7ebc5462b0b53c1ebdd701ab97ee682d4c29/src/assets/WhatsApp%20Image%202022-05-13%20at%206.19.12%20PM%20(1).jpeg)

![Img 1](https://github.com/mariogarcia-ar/ncarchitect/blob/603c7ebc5462b0b53c1ebdd701ab97ee682d4c29/src/assets/WhatsApp%20Image%202022-05-13%20at%206.19.12%20PM.jpeg)
Quick Start
===========

To run this project locally:

1. Prerequisites: Make sure you've installed [Node.js] ≥ 12
2. Install dependencies: `yarn install`
3. Run the local development server: `yarn dev` (see `package.json` for a
   full list of `scripts` you can run with `yarn`)

Now you'll have a local development environment backed by the NEAR TestNet!

Go ahead and play with the app and the code. As you make code changes, the app will automatically reload.

Exploring The Code
==================

1. The "backend" code lives in the `/contract` folder. See the README there for
   more info.
2. The frontend code lives in the `/src` folder. `/src/index.html` is a great
   place to start exploring. Note that it loads in `/src/index.js`, where you
   can learn how the frontend connects to the NEAR blockchain.
3. Tests: there are different kinds of tests for the frontend and the smart
   contract. See `contract/README` for info about how it's tested. The frontend
   code gets tested with [jest]. You can run both of these at once with `yarn
   run test`.

Deploy
======

Every smart contract in NEAR has its [own associated account][NEAR accounts]. When you run `yarn dev`, your smart contract gets deployed to the live NEAR TestNet with a throwaway account. When you're ready to make it permanent, here's how.

Step 0: Install near-cli (optional)
-------------------------------------

[near-cli] is a command line interface (CLI) for interacting with the NEAR blockchain. It was installed to the local `node_modules` folder when you ran `yarn install`, but for best ergonomics you may want to install it globally:

    yarn install --global near-cli

Or, if you'd rather use the locally-installed version, you can prefix all `near` commands with `npx`

Ensure that it's installed with `near --version` (or `npx near --version`)

Step 1: Create an account for the contract
------------------------------------------

Each account on NEAR can have at most one contract deployed to it. If you've already created an account such as `your-name.testnet`, you can deploy your contract to `tcograph.your-name.testnet`. Assuming you've already created an account on [NEAR Wallet], here's how to create `tcograph.your-name.testnet`:

1. Authorize NEAR CLI, following the commands it gives you:

      near login

2. Create a subaccount (replace `YOUR-NAME` below with your actual account name):

      near create-account tcograph.YOUR-NAME.testnet --masterAccount YOUR-NAME.testnet

Step 2: set contract name in code
---------------------------------

Modify the line in `src/config.js` that sets the account name of the contract. Set it to the account id you used above.

    const CONTRACT_NAME = process.env.CONTRACT_NAME || 'tcograph.YOUR-NAME.testnet'

Step 3: deploy!
---------------

One command:

    yarn deploy

As you can see in `package.json`, this does two things:

1. builds & deploys smart contract to NEAR TestNet
2. builds & deploys frontend code to GitHub using [gh-pages]. This will only work if the project already has a repository set up on GitHub. Feel free to modify the `deploy` script in `package.json` to deploy elsewhere.

Troubleshooting
===============

On Windows, if you're seeing an error containing `EPERM` it may be related to spaces in your path. Please see [this issue](https://github.com/zkat/npx/issues/209) for more details.

  [React]: https://reactjs.org/
  [create-near-app]: https://github.com/near/create-near-app
  [Node.js]: https://nodejs.org/en/download/package-manager/
  [jest]: https://jestjs.io/
  [NEAR accounts]: https://docs.near.org/docs/concepts/account
  [NEAR Wallet]: https://wallet.testnet.near.org/
  [near-cli]: https://github.com/near/near-cli
  [gh-pages]: https://github.com/tschaub/gh-pages

'''
'''--- babel.config.js ---
module.exports = {
  presets: ['@babel/preset-env', '@babel/preset-react'],
}

'''
'''--- contract/Cargo.toml ---
[package]
name = "greeter"
version = "0.1.0"
authors = ["Near Inc <hello@near.org>"]
edition = "2018"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
near-sdk = "=4.0.0-pre.5"
serde_json = "1.0"
near-sys = "0.1.0"

[profile.release]
codegen-units = 1
# Tell `rustc` to optimize for small code size.
opt-level = "z"
lto = true
debug = false
panic = "abort"
# Opt into extra safety checks on arithmetic operations https://stackoverflow.com/a/64136471/249801
overflow-checks = true

[workspace]
members = []

'''
'''--- contract/README.md ---
tcograph Smart Contract
==================

A [smart contract] written in [Rust] for an app initialized with [create-near-app]

Quick Start
===========

Before you compile this code, you will need to install Rust with [correct target]

Exploring The Code
==================

1. The main smart contract code lives in `src/lib.rs`. You can compile it with
   the `./compile` script.
2. Tests: You can run smart contract tests with the `./test` script. This runs
   standard Rust tests using [cargo] with a `--nocapture` flag so that you
   can see any debug info you print to the console.

  [smart contract]: https://docs.near.org/docs/develop/contracts/overview
  [Rust]: https://www.rust-lang.org/
  [create-near-app]: https://github.com/near/create-near-app
  [correct target]: https://github.com/near/near-sdk-rs#pre-requisites
  [cargo]: https://doc.rust-lang.org/book/ch01-03-hello-cargo.html

'''
'''--- contract/compile.js ---
// This file does two things:
//
// 1. Compile the Rust contract using cargo (see buildCmd below). This will
//    create a wasm file in the 'build' folder.
// 2. Create a symbolic link (symlink) to the generated wasm file in the root
//    project's `out` folder, for easy use with near-cli.
//
// First, import some helper libraries. `shelljs` is included in the
// devDependencies of the root project, which is why it's available here. It
// makes it easy to use *NIX-style scripting (which works on Linux distros,
// macOS, and Unix systems) on Windows as well.
const sh = require('shelljs')

// Figure out which directory the user called this script from, which we'll use
// later to set up the symlink.
const calledFromDir = sh.pwd().toString()

// For the duration of this script, we want to operate from within the
// Rust project's folder. Let's change into that directory.
sh.cd(__dirname)

// You can call this script with `node compile.js` or `node compile.js
// --debug`. Let's set a variable to track whether `--debug` was used.
const debug = process.argv.pop() === '--debug'

// You can call this script with `node compile.js` or `node compile.js --debug`.
// Let's set a variable to track whether `--debug` was used.
// Note: see other flags in ./cargo/config. Unfortunately, you cannot set the
// `--target option` in Cargo.toml.
const buildCmd = debug
  ? 'cargo build --target wasm32-unknown-unknown'
  : 'cargo build --target wasm32-unknown-unknown --release'

// Execute the build command, storing exit code for later use
const { code } = sh.exec(buildCmd)

// Assuming this is compiled from the root project directory, link the compiled
// contract to the `out` folder –
// When running commands like `near deploy`, near-cli looks for a contract at
// <CURRENT_DIRECTORY>/out/main.wasm
if (code === 0 && calledFromDir !== __dirname) {
  const linkDir = `${calledFromDir}/out`
  const link = `${calledFromDir}/out/main.wasm`
  const packageName = require('fs').readFileSync(`${__dirname}/Cargo.toml`).toString().match(/name = "([^"]+)"/)[1]
  const outFile = `./target/wasm32-unknown-unknown/${debug ? 'debug' : 'release'}/${packageName}.wasm`
  sh.mkdir('-p', linkDir)
  sh.rm('-f', link)
  //fixes #831: copy-update instead of linking .- sometimes sh.ln does not work on Windows
  sh.cp('-u',outFile,link)
}

// exit script with the same code as the build command
process.exit(code)

'''
'''--- contract/src/lib.rs ---
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::{
    env, near_bindgen, serde_json::json,
    AccountId
} ; // , setup_alloc};
use near_sdk::collections::LookupMap;
// use near_sdk::json_types::{Base64VecU8, U128};

// use std::collections::HashMap;
// use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
// use near_sdk::collections::{LazyOption, LookupMap, UnorderedMap, UnorderedSet};
// use near_sdk::json_types::{Base64VecU8, U128};
// use near_sdk::serde::{Deserialize, Serialize};
// use near_sdk::{
//     env, log, near_bindgen, AccountId, Balance, CryptoHash, PanicOnDefault, Promise, PromiseOrValue,
//     PromiseResult, Gas, require, serde_json::json
// };

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct Welcome {
    records: LookupMap<String, String>,
    ipfs: LookupMap<String, String>,
}

impl Default for Welcome {
  fn default() -> Self {
    Self {
        records: LookupMap::new(b"records".to_vec()),
        ipfs: LookupMap::new(b"ipfs".to_vec()),
    }
  }
}

#[near_bindgen]
impl Welcome {
    // Greeting 
    pub fn set_greeting(&mut self, message: String) {
        let signer_account_id = env::signer_account_id();   // initial
        let current_account_id = env::current_account_id(); // contract id
        let predecessor_account_id = env::predecessor_account_id(); // contract id

        self.records.insert(&signer_account_id.to_string(), &message);

        // Logs
        env::log_str(
            &json!({
                "method": "set_greeting",
                "message": message,
                "signer_account_id": signer_account_id.to_string(),
                "current_account_id": current_account_id.to_string(),
                "predecessor_account_id": predecessor_account_id.to_string(), 

            })
            .to_string(),
        );
        // TODO: conflicto con los test de frontend  [prepaid_gas]
        // env::log_str(
        //     &json!({
        //         "method": "gas",
        //         "prepaid_gas": env::prepaid_gas(),
        //         "used_gas": env::used_gas(), 
        //     })
        //     .to_string(),
        // ); 
    }

 
    pub fn get_greeting(&self, account_id: AccountId) -> String {
        // env::log_str(
        //     &json!({
        //         "method": "set_greeting",
        //         "prepaid_gas": env::prepaid_gas(),
        //         "used_gas": env::used_gas(), 
        //     })
        //     .to_string(),
        // ); 

        match self.records.get(&account_id.to_string()) {
            Some(greeting) => greeting,
            None => "Hello".to_string(),
        }        
    }

    // #[payable]
    // pub fn get_greeting_payable(&mut self, account_id: AccountId) -> String { 
    //     match self.records.get(&account_id.to_string()) {
    //         Some(greeting) => greeting,
    //         None => "Hello".to_string(),
    //     }        
    // }

    // IPFS 
    pub fn set_ipfs(&mut self, cid: String) {
        let signer_account_id = env::signer_account_id();   // initial
        let current_account_id = env::current_account_id(); // contract id
        let predecessor_account_id = env::predecessor_account_id(); // contract id

        self.ipfs.insert(&signer_account_id.to_string(), &cid);

        // Logs
        env::log_str(
            &json!({
                "method": "set_ipfs",
                "cid": cid,
                "signer_account_id": signer_account_id.to_string(),
                "current_account_id": current_account_id.to_string(),
                "predecessor_account_id": predecessor_account_id.to_string(), 

            })
            .to_string(),
        );

        // env::log_str(
        //     &json!({
        //         "method": "gas",
        //         "prepaid_gas": env::prepaid_gas(),
        //         "used_gas": env::used_gas(), 
        //     })
        //     .to_string(),
        // ); 
    }

    pub fn get_ipfs(&self, account_id: AccountId) -> String {
        // env::log_str(
        //     &json!({
        //         "method": "set_ipfs",
        //         "prepaid_gas": env::prepaid_gas(),
        //         "used_gas": env::used_gas(), 
        //     })
        //     .to_string(),
        // ); 

        match self.ipfs.get(&account_id.to_string()) {
            Some(ipfs) => ipfs,
            None => "QmX6AxffLDNuXgej7UbheXDxhHPyHjUjDRMGbDLwhipRF2".to_string(),
        }        
    }

}

#[cfg(all(test, not(target_arch = "wasm32")))]
mod tests {
    use super::*;
    use near_sdk::test_utils::{accounts, VMContextBuilder}; 
    use near_sdk::{testing_env, VMContext};
    // use std::convert::TryInto;    

    // mock the context for testing, notice "signer_account_id" that was accessed above from env::
    // fn get_context(input: Vec<u8>, is_view: bool) -> VMContext {
    //     VMContext {
    //         current_account_id: "alice_near".try_into().unwrap(),
    //         signer_account_id: "bob_near".try_into().unwrap(),
    //         signer_account_pk: vec![0, 1, 2],
    //         predecessor_account_id: "carol_near".try_into().unwrap(),
    //         input,
    //         block_index: 0,
    //         block_timestamp: 0,
    //         account_balance: 0,
    //         account_locked_balance: 0,
    //         storage_usage: 0,
    //         attached_deposit: 0,
    //         prepaid_gas: 10u64.pow(18),
    //         random_seed: vec![0, 1, 2],
    //         is_view,
    //         output_data_receivers: vec![],
    //         epoch_height: 19,
    //     }
    // }
    fn get_context(is_view: bool) -> VMContext {
        VMContextBuilder::new()
            .signer_account_id(accounts(0))
            .is_view(is_view)
            .build()
    }

    #[test]
    fn set_then_get_greeting() {
        // let context = get_context(vec![], false);
        let context = get_context(false);
        testing_env!(context);
        let mut contract = Welcome::default();
        contract.set_greeting("howdy".to_string());
        assert_eq!(
            "howdy".to_string(),
            contract.get_greeting(accounts(0))
        );
    }

    // #[test]
    // fn set_then_get_greeting_payable() {
    //     // let context = get_context(vec![], false);
    //     let context = get_context(false);
    //     testing_env!(context);
    //     let mut contract = Welcome::default();
    //     contract.set_greeting("howdy".to_string());
    //     assert_eq!(
    //         "howdy".to_string(),
    //         contract.get_greeting_payable(accounts(0))
    //     );
    // }
    

    #[test]
    fn get_default_greeting() {
        // let context = get_context(vec![], true);
        let context = get_context(false);
        testing_env!(context);
        let contract = Welcome::default();
        // this test did not call set_greeting so should return the default "Hello" greeting
        assert_eq!(
            "Hello".to_string(),
            contract.get_greeting(accounts(1))
        );
    }

    // IPFS
    #[test]
    fn set_then_get_ipfs() {
        let context = get_context(false);
        testing_env!(context);
        let mut contract = Welcome::default();
        contract.set_ipfs("QmQjDs2ix3CJKc6kjRT56L4krhsSGUurASvfTJkCuZedf3".to_string());
        assert_eq!(
            "QmQjDs2ix3CJKc6kjRT56L4krhsSGUurASvfTJkCuZedf3".to_string(),
            contract.get_ipfs(accounts(0))
        );
    }

    #[test]
    fn get_default_ipfs() {
        // let context = get_context(vec![], true);
        let context = get_context(false);
        testing_env!(context);
        let contract = Welcome::default();
        // this test did not call set_ipfs so should return the default "Hello" ipfs
        assert_eq!(
            "QmX6AxffLDNuXgej7UbheXDxhHPyHjUjDRMGbDLwhipRF2".to_string(),
            contract.get_ipfs(accounts(1))
        );
    }    

    #[test]
    fn get_both_greeting() {
        // let context = get_context(vec![], true);
        let context = get_context(false);
        testing_env!(context);
        let mut contract = Welcome::default();
        
        contract.set_greeting("howdy".to_string());
        contract.set_ipfs("cadena".to_string());

        assert_eq!(
            "howdy".to_string(),
            contract.get_greeting(accounts(0))
        ); 
        

    }    

    #[test]
    fn get_both_ipfs() {
        // let context = get_context(vec![], true);
        let context = get_context(false);
        testing_env!(context);
        let mut contract = Welcome::default();
        
        contract.set_greeting("howdy".to_string());
        contract.set_ipfs("cadena".to_string());

        assert_eq!(
            "cadena".to_string(),
            contract.get_ipfs(accounts(0))
        );

    }        
}

'''
'''--- contract_call_external/Cargo.toml ---
[package]
name = "greeter"
version = "0.1.1"
authors = ["Near Inc <hello@near.org>"]
edition = "2018"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
near-sdk = "=4.0.0-pre.5"
serde_json = "1.0"
near-sys = "0.1.0"

[profile.release]
codegen-units = 1
# Tell `rustc` to optimize for small code size.
opt-level = "z"
lto = true
debug = false
panic = "abort"
# Opt into extra safety checks on arithmetic operations https://stackoverflow.com/a/64136471/249801
overflow-checks = true

[workspace]
members = []

'''
'''--- contract_call_external/README.md ---
tcoipfs Smart Contract
==================

A [smart contract] written in [Rust] for an app initialized with [create-near-app]

Quick Start
===========

Before you compile this code, you will need to install Rust with [correct target]

Exploring The Code
==================

1. The main smart contract code lives in `src/lib.rs`. You can compile it with
   the `./compile` script.
2. Tests: You can run smart contract tests with the `./test` script. This runs
   standard Rust tests using [cargo] with a `--nocapture` flag so that you
   can see any debug info you print to the console.

  [smart contract]: https://docs.near.org/docs/develop/contracts/overview
  [Rust]: https://www.rust-lang.org/
  [create-near-app]: https://github.com/near/create-near-app
  [correct target]: https://github.com/near/near-sdk-rs#pre-requisites
  [cargo]: https://doc.rust-lang.org/book/ch01-03-hello-cargo.html

'''
'''--- contract_call_external/compile.js ---
// This file does two things:
//
// 1. Compile the Rust contract using cargo (see buildCmd below). This will
//    create a wasm file in the 'build' folder.
// 2. Create a symbolic link (symlink) to the generated wasm file in the root
//    project's `out` folder, for easy use with near-cli.
//
// First, import some helper libraries. `shelljs` is included in the
// devDependencies of the root project, which is why it's available here. It
// makes it easy to use *NIX-style scripting (which works on Linux distros,
// macOS, and Unix systems) on Windows as well.
const sh = require('shelljs')

// Figure out which directory the user called this script from, which we'll use
// later to set up the symlink.
const calledFromDir = sh.pwd().toString()

// For the duration of this script, we want to operate from within the
// Rust project's folder. Let's change into that directory.
sh.cd(__dirname)

// You can call this script with `node compile.js` or `node compile.js
// --debug`. Let's set a variable to track whether `--debug` was used.
const debug = process.argv.pop() === '--debug'

// You can call this script with `node compile.js` or `node compile.js --debug`.
// Let's set a variable to track whether `--debug` was used.
// Note: see other flags in ./cargo/config. Unfortunately, you cannot set the
// `--target option` in Cargo.toml.
const buildCmd = debug
  ? 'cargo build --target wasm32-unknown-unknown'
  : 'cargo build --target wasm32-unknown-unknown --release'

// Execute the build command, storing exit code for later use
const { code } = sh.exec(buildCmd)

// Assuming this is compiled from the root project directory, link the compiled
// contract to the `out` folder –
// When running commands like `near deploy`, near-cli looks for a contract at
// <CURRENT_DIRECTORY>/out/main.wasm
if (code === 0 && calledFromDir !== __dirname) {
  const linkDir = `${calledFromDir}/out`
  const link = `${calledFromDir}/out/main.wasm`
  const packageName = require('fs').readFileSync(`${__dirname}/Cargo.toml`).toString().match(/name = "([^"]+)"/)[1]
  const outFile = `./target/wasm32-unknown-unknown/${debug ? 'debug' : 'release'}/${packageName}.wasm`
  sh.mkdir('-p', linkDir)
  sh.rm('-f', link)
  //fixes #831: copy-update instead of linking .- sometimes sh.ln does not work on Windows
  sh.cp('-u',outFile,link)
}

// exit script with the same code as the build command
process.exit(code)

'''
'''--- contract_call_external/src/external.rs ---
// use crate::*;
use near_sdk::{ext_contract}; // used to handle remote contract invocation

// External
#[ext_contract(ext_self)]
pub trait ExtSelf {
    fn on_get_greeting();
}
#[ext_contract(ext_contract_secondary)]
trait ExtContract {
    fn get_greeting(&self, account_id: AccountId);
}

// ----------------------------------------------
'''
'''--- contract_call_external/src/lib.rs ---
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::{
    env, near_bindgen, serde_json::json, Gas, promise_result_as_success,
    AccountId, Promise , PromiseResult //, PromiseOrValue, PanicOnDefault
} ;  
use near_sdk::collections::LookupMap;

// use near_sdk::{env, near_bindgen, AccountId, Balance, PanicOnDefault, Promise, 
//     ext_contract, Gas, PromiseResult, PromiseOrValue};
// use near_sdk::{ext_contract}; // used to handle remote contract invocation
// use near_sdk::{ Promise}; 

use crate::external::*;
mod external;

pub const CALLBACK_GAS: Gas = Gas(5_000_000_000_000);

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct Welcome {
    records: LookupMap<String, String>,
    ipfs: LookupMap<String, String>,
}

impl Default for Welcome {
  fn default() -> Self {
    Self {
        records: LookupMap::new(b"records".to_vec()),
        ipfs: LookupMap::new(b"ipfs".to_vec()),
    }
  }
}

#[near_bindgen]
impl Welcome {
    // bye 
    pub fn set_bye(&mut self, message: String) {
        let signer_account_id = env::signer_account_id();   // initial
        let current_account_id = env::current_account_id(); // contract id
        let predecessor_account_id = env::predecessor_account_id(); // contract id

        self.records.insert(&signer_account_id.to_string(), &message);

        // Logs
        env::log_str(
            &json!({
                "method": "set_bye",
                "message": message,
                "signer_account_id": signer_account_id.to_string(),
                "current_account_id": current_account_id.to_string(),
                "predecessor_account_id": predecessor_account_id.to_string(), 

            })
            .to_string(),
        );
    }

 
    pub fn get_bye(&self, account_id: AccountId) -> String { 
        match self.records.get(&account_id.to_string()) {
            Some(bye) => bye,
            None => "Bye Bye".to_string(),
        }        
    }

    #[payable]
    pub fn get_external_greeting(&mut self, account_id: AccountId) -> Promise {
        // let signer_account_id = env::signer_account_id();   // initial
        env::log_str("incio la llamada");

        ext_contract_secondary::get_greeting( 
            account_id,
            AccountId::new_unchecked("dev-1652472334005-76834385663034".to_string()),
            0,
            CALLBACK_GAS
        ).then(
            
        
            ext_self::on_get_greeting(
                env::current_account_id(), //local 
                0,
                CALLBACK_GAS
            )
        ) 
    }

    #[private]
    pub fn on_get_greeting(&mut self)-> String{
        env::log_str("incio la on_get_greeting");

        assert_eq!(env::promise_results_count(), 1, "ERR_TOO_MANY_RESULTS");
        match env::promise_result(0) {
            PromiseResult::NotReady => unreachable!(),
            PromiseResult::Successful(_val) => { 
                let result = promise_result_as_success(); 
                let res: String = near_sdk::serde_json::from_slice::<String>(&result.unwrap())
                                .expect("Unable to unwrap the result into a Pet");
                res

            },
            PromiseResult::Failed => env::panic_str("ERR_CALL_FAILED"),
        }
    }
}

#[cfg(all(test, not(target_arch = "wasm32")))]
mod tests {
    use super::*;
    use near_sdk::test_utils::{accounts, VMContextBuilder}; 
    use near_sdk::{testing_env, VMContext};
    // use std::convert::TryInto;    

 
    fn get_context(is_view: bool) -> VMContext {
        VMContextBuilder::new()
            .signer_account_id(accounts(0))
            .is_view(is_view)
            .build()
    }

    #[test]
    fn set_then_get_bye() {
        // let context = get_context(vec![], false);
        let context = get_context(false);
        testing_env!(context);
        let mut contract = Welcome::default();
        contract.set_bye("howdy".to_string());
        assert_eq!(
            "howdy".to_string(),
            contract.get_bye(accounts(0))
        );
    }

    #[test]
    fn get_default_bye() {
        // let context = get_context(vec![], true);
        let context = get_context(false);
        testing_env!(context);
        let contract = Welcome::default();
        // this test did not call set_bye so should return the default "Hello" bye
        assert_eq!(
            "Bye Bye".to_string(),
            contract.get_bye(accounts(1))
        );
    }
 

    // #[test]
    // fn set_then_get_external_greeting() {
    //     // let context = get_context(vec![], false);
    //     let context = get_context(false);
    //     testing_env!(context);
    //     let mut contract = Welcome::default();
    //     contract.set_bye("howdy".to_string());

    //     assert_eq!(
    //         "Hola Mundo".to_string(),
    //         contract.get_external_greeting(accounts(0))
    //     );
    // }

    

}

'''
'''--- package.json ---
{
  "name": "tcograph",
  "version": "0.1.0",
  "license": "UNLICENSED",
  "scripts": {
    "build": "npm run build:contract && npm run build:web",
    "build:contract": "node contract/compile.js",
    "build:contract:debug": "node contract/compile.js --debug",
    "build:web": "parcel build src/index.html --public-url ./",
    "dev:deploy:contract": "near dev-deploy",
    "deploy:contract": "near deploy",
    "deploy:pages": "gh-pages -d dist/",
    "deploy": "npm run build && npm run deploy:contract && npm run deploy:pages",
    "prestart": "npm run build:contract:debug && npm run dev:deploy:contract",
    "start": "echo The app is starting! It will automatically open in your browser when ready && env-cmd -f ./neardev/dev-account.env parcel src/index.html --open",
    "dev": "nodemon --watch contract/src -e rs --exec \"npm run start\"",
    "test": "npm run build:contract:debug && cd contract && cargo test -- --nocapture && cd .. && jest test --runInBand",
    "test:front": "jest test --runInBand"
  },
  "devDependencies": {
    "@babel/core": "~7.14.0",
    "@babel/preset-env": "~7.14.0",
    "@babel/preset-react": "~7.13.13",
    "babel-jest": "~26.6.2",
    "env-cmd": "~10.1.0",
    "gh-pages": "~3.1.0",
    "jest": "~26.6.2",
    "jest-environment-node": "~26.6.2",
    "near-cli": "~2.1.1",
    "nodemon": "~2.0.3",
    "parcel-bundler": "~1.12.4",
    "react-test-renderer": "~17.0.1",
    "shelljs": "~0.8.4"
  },
  "dependencies": {
    "near-api-js": "~0.43.1",
    "react": "~17.0.1",
    "react-dom": "~17.0.1",
    "regenerator-runtime": "~0.13.5"
  },
  "resolutions": {
    "@babel/preset-env": "7.13.8"
  },
  "jest": {
    "moduleNameMapper": {
      "\\.(jpg|ico|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$": "<rootDir>/src/__mocks__/fileMock.js",
      "\\.(css|less)$": "<rootDir>/src/__mocks__/fileMock.js"
    },
    "setupFiles": [
      "<rootDir>/src/jest.init.js"
    ],
    "testEnvironment": "near-cli/test_environment",
    "testPathIgnorePatterns": [
      "<rootDir>/contract/",
      "<rootDir>/node_modules/"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

'''
'''--- readme.txt ---
yarn dev:deploy:contract 
yarn run v1.22.18
$ 

near dev-deploy
Starting deployment. 
Account id: dev-1652385931022-92387187648267, 
node: https://rpc.testnet.near.org, 
helper: https://helper.testnet.near.org,

Transaction Id 939gdyepf2ZNRCKUBQBeJoV36UyPuCyvp4wQ4L6Tdxru
https://explorer.testnet.near.org/transactions/939gdyepf2ZNRCKUBQBeJoV36UyPuCyvp4wQ4L6Tdxru

nuevo dev 
dev-1652457081622-60835668121812

# neardev/dev-account.env
# export CONTRACT_NAME=dev-1652385931022-92387187648267
# export CONTRACT_NAME=dev-1652457081622-60835668121812
# export CONTRACT_NAME=dev-1652460782376-79683009532007
export CONTRACT_NAME=dev-1652472334005-76834385663034
echo $CONTRACT_NAME

export ID=mariogarcia_ar.testnet
#export ID=dev01_tco.testnet
echo $ID

echo $CONTRACT_NAME
echo $ID

near call $CONTRACT_NAME set_greeting '{"message": "Hola mario garcia"}' --accountId $ID
near view $CONTRACT_NAME get_greeting "{\"account_id\": \"$ID\"}"
near view $CONTRACT_NAME get_greeting_payable "{\"account_id\": \"$ID\"}"

near call $CONTRACT_NAME set_ipfs '{"cid": "fasdfasdfasd garcia"}' --accountId $ID
near view $CONTRACT_NAME get_ipfs "{\"account_id\": \"$ID\"}"

near view $CONTRACT_NAME get_greeting "{\"account_id\": \"$ID\"}"
near view $CONTRACT_NAME get_ipfs "{\"account_id\": \"$ID\"}"

export ID=dev01_tco.testnet
near view $CONTRACT_NAME get_greeting "{\"account_id\": \"$ID\"}"
near view $CONTRACT_NAME get_ipfs "{\"account_id\": \"$ID\"}"

 
export ID=mariogarcia_ar.testnet
near view $CONTRACT_NAME get_greeting "{\"account_id\": \"$ID\"}"
near view $CONTRACT_NAME get_ipfs "{\"account_id\": \"$ID\"}"

export CONTRACT_NAME=dev-1652385931022-92387187648267
echo $CONTRACT_NAME

export ID=mariogarcia_ar.testnet
echo $ID

Starting deployment. Account id: dev-1652385931022-92387187648267, node: https://rpc.testnet.near.org, helper: https://helper.testnet.near.org, file: ./out/main.wasm
Transaction Id 28jXDDNCjqbnZn769RUnd9fVdVHsPCg1A7aJK8SAimtK
To see the transaction in the transaction explorer, please open this url in your browser
https://explorer.testnet.near.org/transactions/28jXDDNCjqbnZn769RUnd9fVdVHsPCg1A7aJK8SAimtK
Done deploying to dev-1652385931022-92387187648267

graph init --product hosted-service mariogarcia-ar/tco-exa 

Subgraph mariogarcia-ar/tco-exa created in subgraph

Next steps:

  1. Run `graph auth` to authenticate with your deploy key.

  2. Type `cd subgraph` to enter the subgraph.

  3. Run `yarn deploy` to deploy the subgraph.

yarn codegen

graph auth --product hosted-service 2138ee84d4cb4a67981fcf63905744d4

Deploy key set for https://api.thegraph.com/deploy/

graph deploy --product hosted-service mariogarcia-ar/tco-exa

Subgraph endpoints:
Queries (HTTP):     https://api.thegraph.com/subgraphs/name/mariogarcia-ar/tco-exa
Subscriptions (WS): wss://api.thegraph.com/subgraphs/name/mariogarcia-ar/tco-exa

ID
QmYwsSB1oKaVmhR48Fwt95dbc5fCXYiqANzK69wjGEJ5CD
Queries (HTTP)
https://api.thegraph.com/subgraphs/name/mariogarcia-ar/tco-exa

https://github.com/graphprotocol/example-subgraph/blob/near-receipts-example/subgraph.yaml

 near dev-deploy
Starting deployment. Account id: dev-1652472334005-76834385663034, node: https://rpc.testnet.near.org, helper: https://helper.testnet.near.org, file: ./out/main.wasm
Transaction Id Hvxz25zAm85H1bKzFYyPMKSGDsotb6cpNFJA7G63J84s
To see the transaction in the transaction explorer, please open this url in your browser
https://explorer.testnet.near.org/transactions/Hvxz25zAm85H1bKzFYyPMKSGDsotb6cpNFJA7G63J84s
Done deploying to dev-1652472334005-76834385663034
Done in 4.17s.

'''
'''--- src/App.js ---
import 'regenerator-runtime/runtime'
import React from 'react'
import { login, logout } from './utils'
import './global.css'

import getConfig from './config'
const { networkId } = getConfig(process.env.NODE_ENV || 'development')

export default function App() {
  // use React Hooks to store greeting in component state
  const [greeting, set_greeting] = React.useState()
  const [ipfs, set_ipfs] = React.useState()
 
  // when the user has not yet interacted with the form, disable the button
  const [buttonDisabled, setButtonDisabled] = React.useState(true)

  // after submitting the form, we want to show Notification
  const [showNotification, setShowNotification] = React.useState(false)

  // The useEffect hook can be used to fire side-effects during render
  // Learn more: https://reactjs.org/docs/hooks-intro.html
  React.useEffect(
    () => {
      // in this case, we only care to query the contract when signed in
      if (window.walletConnection.isSignedIn()) {

        // window.contract is set by initContract in index.js
        window.contract.get_greeting({ account_id: window.accountId })
          .then(greetingFromContract => {
            set_greeting(greetingFromContract)
          })
        window.contract.get_ipfs({ account_id: window.accountId })
        .then(ipfsFromContract => {
          console.log(ipfsFromContract);
          set_ipfs(ipfsFromContract)
        })          
      }
    },

    // The second argument to useEffect tells React when to re-run the effect
    // Use an empty array to specify "only run on first render"
    // This works because signing into NEAR Wallet reloads the page
    []
  )

  // if not signed in, return early with sign-in prompt
  if (!window.walletConnection.isSignedIn()) {
    return (
      <main>
        <h1>Welcome to NEAR!</h1>
        <p>
          To make use of the NEAR blockchain, you need to sign in. The button
          below will sign you in using NEAR Wallet.
        </p>
        <p>
          By default, when your app runs in "development" mode, it connects
          to a test network ("testnet") wallet. This works just like the main
          network ("mainnet") wallet, but the NEAR Tokens on testnet aren't
          convertible to other currencies – they're just for testing!
        </p>
        <p>
          Go ahead and click the button below to try it out:
        </p>
        <p style={{ textAlign: 'center', marginTop: '2.5em' }}>
          <button onClick={login}>Sign in</button>
        </p>
      </main>
    )
  }

  return (
    // use React Fragment, <>, to avoid wrapping elements in unnecessary divs
    <>
      <button className="link" style={{ float: 'right' }} onClick={logout}>
        Sign out
      </button>
      <main>
        <h1>
          <label
            htmlFor="greeting"
            style={{
              color: 'var(--secondary)',
              borderBottom: '2px solid var(--secondary)'
            }}
          >
            {greeting} - {ipfs}
          </label>
          {' '/* React trims whitespace around tags; insert literal space character when needed */}
          {window.accountId}!
        </h1>

        <form onSubmit={async event => {
          event.preventDefault()

          // get elements from the form using their id attribute
          const { fieldset, greeting } = event.target.elements
          
          // hold onto new user-entered value from React's SynthenticEvent for use after `await` call
          const newGreeting = greeting.value 

          // disable the form while the value gets updated on-chain
          fieldset.disabled = true

          try {
            // make an update call to the smart contract
            await window.contract.set_greeting({
              // pass the value that the user entered in the greeting field
              message: newGreeting
            })
           
          } catch (e) {
            alert(
              'Something went wrong! ' +
              'Maybe you need to sign out and back in? ' +
              'Check your browser console for more info.'
            )
            throw e
          } finally {
            // re-enable the form, whether the call succeeded or failed
            fieldset.disabled = false
          }

          // update local `greeting` variable to match persisted value
          set_greeting(newGreeting) 

          // show Notification
          setShowNotification(true)

          // remove Notification again after css animation completes
          // this allows it to be shown again next time the form is submitted
          setTimeout(() => {
            setShowNotification(false)
          }, 11000)
        }}>
          <fieldset id="fieldset">
            <label
              htmlFor="greeting"
              style={{
                display: 'block',
                color: 'var(--gray)',
                marginBottom: '0.5em'
              }}
            >
              Change greeting
            </label>
            <div style={{ display: 'flex' }}>
              <input
                autoComplete="off"
                defaultValue={greeting}
                id="greeting"
                onChange={e => setButtonDisabled(e.target.value === greeting)}
                style={{ flex: 1 }}
              /> 
              <button
                disabled={buttonDisabled}
                style={{ borderRadius: '0 5px 5px 0' }}
              >
                Save
              </button>
            </div>
          </fieldset>
        </form>
 
        <form onSubmit={async event => {
          event.preventDefault()

          // get elements from the form using their id attribute
          const { fieldset,  ipfs  } = event.target.elements
          
          // hold onto new user-entered value from React's SynthenticEvent for use after `await` call
 
          const newIPFS = ipfs.value

          // disable the form while the value gets updated on-chain
          fieldset.disabled = true

          try {
 
            await window.contract.set_ipfs({
              // pass the value that the user entered in the greeting field
              cid: newIPFS
            })            
          } catch (e) {
            alert(
              'Something went wrong! ' +
              'Maybe you need to sign out and back in? ' +
              'Check your browser console for more info.'
            )
            throw e
          } finally {
            // re-enable the form, whether the call succeeded or failed
            fieldset.disabled = false
          }

          // update local `greeting` variable to match persisted value
 
          set_ipfs(newIPFS)

          // show Notification
          setShowNotification(true)

          // remove Notification again after css animation completes
          // this allows it to be shown again next time the form is submitted
          setTimeout(() => {
            setShowNotification(false)
          }, 11000)
        }}>
          <fieldset id="fieldset">
            <label
              htmlFor="ipfs"
              style={{
                display: 'block',
                color: 'var(--gray)',
                marginBottom: '0.5em'
              }}
            >
              Change ipfs [<a href="https://app.pinata.cloud/pinmanager">https://app.pinata.cloud/pinmanager</a>]
              <img width="50" src={`https://gateway.pinata.cloud/ipfs/${ipfs}`}/>
            </label>
            <div style={{ display: 'flex' }}>
               
              <input
                autoComplete="off"
                defaultValue={ipfs}
                id="ipfs"
                onChange={e => setButtonDisabled(e.target.value === ipfs)}
                style={{ flex: 1 }}
              /> 
              <button
                disabled={buttonDisabled}
                style={{ borderRadius: '0 5px 5px 0' }}
              >
                Save
              </button>
            </div>
          </fieldset>
        </form>
 
 
        <hr />
 
      </main>
      {showNotification && <Notification />}
    </>
  )
}

// this component gets rendered by App after the form is submitted
function Notification() {
  const urlPrefix = `https://explorer.${networkId}.near.org/accounts`
  return (
    <aside>
      <a target="_blank" rel="noreferrer" href={`${urlPrefix}/${window.accountId}`}>
        {window.accountId}
      </a>
      {' '/* React trims whitespace around tags; insert literal space character when needed */}
      called method: 'set_greeting' in contract:
      {' '}
      <a target="_blank" rel="noreferrer" href={`${urlPrefix}/${window.contract.contractId}`}>
        {window.contract.contractId}
      </a>
      <footer>
        <div>✔ Succeeded</div>
        <div>Just now</div>
      </footer>
    </aside>
  )
}

'''
'''--- src/__mocks__/fileMock.js ---
// NOTE: This is used to mock resource imports in JSX for tests
module.exports = '' 

'''
'''--- src/assets/logo-black.svg ---
<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#24272a"/><stop offset=".42" stop-color="#24272a" stop-opacity="0"/><stop offset=".59" stop-color="#24272a" stop-opacity="0"/><stop offset=".81" stop-color="#24272a"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#24272a"/></svg>
'''
'''--- src/assets/logo-white.svg ---
<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#fff"/><stop offset=".42" stop-color="#fff" stop-opacity="0"/><stop offset=".59" stop-color="#fff" stop-opacity="0"/><stop offset=".81" stop-color="#fff"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#fff"/></svg>
'''
'''--- src/config.js ---
const CONTRACT_NAME = process.env.CONTRACT_NAME ||'tcograph'

function getConfig(env) {
  switch (env) {

  case 'production':
  case 'mainnet':
    return {
      networkId: 'mainnet',
      nodeUrl: 'https://rpc.mainnet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.near.org',
      helperUrl: 'https://helper.mainnet.near.org',
      explorerUrl: 'https://explorer.mainnet.near.org',
    }
  case 'development':
  case 'testnet':
    return {
      networkId: 'testnet',
      nodeUrl: 'https://rpc.testnet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.testnet.near.org',
      helperUrl: 'https://helper.testnet.near.org',
      explorerUrl: 'https://explorer.testnet.near.org',
    }
  case 'betanet':
    return {
      networkId: 'betanet',
      nodeUrl: 'https://rpc.betanet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.betanet.near.org',
      helperUrl: 'https://helper.betanet.near.org',
      explorerUrl: 'https://explorer.betanet.near.org',
    }
  case 'local':
    return {
      networkId: 'local',
      nodeUrl: 'http://localhost:3030',
      keyPath: `${process.env.HOME}/.near/validator_key.json`,
      walletUrl: 'http://localhost:4000/wallet',
      contractName: CONTRACT_NAME,
    }
  case 'test':
  case 'ci':
    return {
      networkId: 'shared-test',
      nodeUrl: 'https://rpc.ci-testnet.near.org',
      contractName: CONTRACT_NAME,
      masterAccount: 'test.near',
    }
  case 'ci-betanet':
    return {
      networkId: 'shared-test-staging',
      nodeUrl: 'https://rpc.ci-betanet.near.org',
      contractName: CONTRACT_NAME,
      masterAccount: 'test.near',
    }
  default:
    throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`)
  }
}

module.exports = getConfig

'''
'''--- src/global.css ---
* {
  box-sizing: border-box;
}

html {
  --bg: #efefef;
  --fg: #1e1e1e;
  --gray: #555;
  --light-gray: #ccc;
  --shadow: #e6e6e6;
  --success: rgb(90, 206, 132);
  --primary: #FF585D;
  --secondary: #0072CE;

  background-color: var(--bg);
  color: var(--fg);
  font-family: -apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica,Arial,sans-serif;
  font-size: calc(0.9em + 0.5vw);
  line-height: 1.3;
}

body {
  margin: 0;
  padding: 1em;
}

main {
  margin: 0 auto;
  max-width: 25em;
}

h1 {
  background-image: url(assets/logo-black.svg);
  background-position: center 1em;
  background-repeat: no-repeat;
  background-size: auto 1.5em;
  margin-top: 0;
  padding: 3.5em 0 0.5em;
  text-align: center;
}

a,
.link {
  color: var(--primary);
  text-decoration: none;
}
a:hover,
a:focus,
.link:hover,
.link:focus {
  text-decoration: underline;
}
a:active,
.link:active {
  color: var(--secondary);
}

button, input {
  font: inherit;
  outline: none;
}

button {
  background-color: var(--secondary);
  border-radius: 5px;
  border: none;
  color: #efefef;
  cursor: pointer;
  padding: 0.3em 0.75em;
  transition: transform 30ms;
}
button:hover, button:focus {
  box-shadow: 0 0 10em rgba(255, 255, 255, 0.2) inset;
}
button:active {
  box-shadow: 0 0 10em rgba(0, 0, 0, 0.1) inset;
}
button.link {
  background: none;
  border: none;
  box-shadow: none;
  display: inline;
}
[disabled] button, button[disabled] {
  box-shadow: none;
  background-color: var(--light-gray);
  color: gray;
  cursor: not-allowed;
  transform: none;
}
[disabled] button {
  text-indent: -900em;
  width: 2em;
  position: relative;
}
[disabled] button:after {
  content: " ";
  display: block;
  width: 0.8em;
  height: 0.8em;
  border-radius: 50%;
  border: 2px solid #fff;
  border-color: var(--fg) transparent var(--fg) transparent;
  animation: loader 1.2s linear infinite;
  position: absolute;
  top: 0.45em;
  right: 0.5em;
}
@keyframes loader {
  0% { transform: rotate(0deg) }
  100% { transform: rotate(360deg) }
}

fieldset {
  border: none;
  padding: 2em 0;
}

input {
  background-color: var(--shadow);
  border: none;
  border-radius: 5px 0 0 5px;
  caret-color: var(--primary);
  color: inherit;
  padding: 0.25em 1em;
}
input::selection {
  background-color: var(--secondary);
  color: #efefef;
}
input:focus {
  box-shadow: 0 0 10em rgba(0, 0, 0, 0.02) inset;
}

code {
  color: var(--gray);
}

li {
  padding-bottom: 1em;
}

aside {
  animation: notify ease-in-out 10s;
  background-color: var(--shadow);
  border-radius: 5px;
  bottom: 0;
  font-size: 0.8em;
  margin: 1em;
  padding: 1em;
  position: fixed;
  transform: translateY(10em);
  right: 0;
}
aside footer {
  display: flex;
  font-size: 0.9em;
  justify-content: space-between;
  margin-top: 0.5em;
}
aside footer *:first-child {
  color: var(--success);
}
aside footer *:last-child {
  color: var(--gray);
}
@keyframes notify {
  0% { transform: translateY(10em) }
  5% { transform: translateY(0) }
  95% { transform: translateY(0) }
  100% { transform: translateY(10em) }
}

@media (prefers-color-scheme: dark) {
  html {
    --bg: #1e1e1e;
    --fg: #efefef;
    --gray: #aaa;
    --shadow: #2a2a2a;
    --light-gray: #444;
  }
  h1 {
    background-image: url(assets/logo-white.svg);
  }
  input:focus {
    box-shadow: 0 0 10em rgba(255, 255, 255, 0.02) inset;
  }
}

'''
'''--- src/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="./assets/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="apple-touch-icon" href="./assets/favicon.ico" />
    <title>Welcome to NEAR with React</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
    <script src="./index.js"></script>
  </body>
</html>

'''
'''--- src/index.js ---
import React from 'react'
import ReactDOM from 'react-dom'
import App from './App'
import { initContract } from './utils'

window.nearInitPromise = initContract()
  .then(() => {
    ReactDOM.render(
      <App />,
      document.querySelector('#root')
    )
  })
  .catch(console.error)

'''
'''--- src/jest.init.js ---
import 'regenerator-runtime/runtime'

'''
'''--- src/main.test.js ---
beforeAll(async function () {
  // NOTE: nearlib and nearConfig are made available by near-cli/test_environment
  const near = await nearlib.connect(nearConfig)
  window.accountId = nearConfig.contractName
  window.contract = await near.loadContract(nearConfig.contractName, {
    viewMethods: ['get_greeting', 'get_ipfs'],
    changeMethods: [],
    sender: window.accountId
  })

  window.walletConnection = {
    requestSignIn() {
    },
    signOut() {
    },
    isSignedIn() {
      return true
    },
    getAccountId() {
      return window.accountId
    }
  }
})

test('get_greeting', async () => {
  const message = await window.contract.get_greeting({ account_id: window.accountId })
  expect(message).toEqual('Hello')
})
test('get_ipfs', async () => {
  const message = await window.contract.get_ipfs({ account_id: window.accountId })
  expect(message).toEqual('QmX6AxffLDNuXgej7UbheXDxhHPyHjUjDRMGbDLwhipRF2')
})

'''
'''--- src/utils.js ---
import { connect, Contract, keyStores, WalletConnection } from 'near-api-js'
import getConfig from './config'

const nearConfig = getConfig(process.env.NODE_ENV || 'development')

// Initialize contract & set global variables
export async function initContract() {
  // Initialize connection to the NEAR testnet
  const near = await connect(Object.assign({ deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() } }, nearConfig))

  // Initializing Wallet based Account. It can work with NEAR testnet wallet that
  // is hosted at https://wallet.testnet.near.org
  window.walletConnection = new WalletConnection(near)

  // Getting the Account ID. If still unauthorized, it's just empty string
  window.accountId = window.walletConnection.getAccountId()

  // Initializing our contract APIs by contract name and configuration
  window.contract = await new Contract(window.walletConnection.account(), nearConfig.contractName, {
    // View methods are read only. They don't modify the state, but usually return some value.
    viewMethods: ['get_greeting', 'get_ipfs'],
    // Change methods can modify the state. But you don't receive the returned value when called.
    changeMethods: ['set_greeting', 'set_ipfs'],
  })
}

export function logout() {
  window.walletConnection.signOut()
  // reload page
  window.location.replace(window.location.origin + window.location.pathname)
}

export function login() {
  // Allow the current app to make calls to the specified contract on the
  // user's behalf.
  // This works by creating a new access key for the user's account and storing
  // the private key in localStorage.
  window.walletConnection.requestSignIn(nearConfig.contractName)
}

'''
'''--- src/wallet/login/index.html ---
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/css/bootstrap.min.css" integrity="sha384-GJzZqFGwb1QTTN6wy59ffF1BuGJpLSa9DkKMp0DgiMDm4iYMj70gZWKYbI706tWS" crossorigin="anonymous">
</head>
<body style="background: #fff; margin-top: 3em">
  <div>For local account login, Please run the following command in NEAR CLI, then enter account id here.
  </div>
  <div>
      <code id="shell-command"></code>
  </div>
  <input type="text" id="accountId" name="accountId" placeholder="Account id"></input>
  <button type="button" onClick="done()">done</button>
  <script>
    const currentUrl = new URL(window.location.href);
    const message = `NODE_ENV=local near create_account {newAccountId} --masterAccount {masterAccountId} --publicKey ${currentUrl.searchParams.get('public_key')} --initialAmount 10000000000000000000`;
    document.getElementById('shell-command').innerText = message;

    function done() {
      const successUrl = new URL(currentUrl.searchParams.get('success_url'));
      successUrl.searchParams.set('account_id', document.getElementById('accountId').value);
      successUrl.searchParams.set('public_key', currentUrl.searchParams.get('public_key'));
      window.location.assign(successUrl.toString());
    }
  </script>
</body>
</html>
'''
'''--- subgraph/generated/schema.ts ---
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Saludo extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Saludo entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Saludo must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Saludo", id.toString(), this);
    }
  }

  static load(id: string): Saludo | null {
    return changetype<Saludo | null>(store.get("Saludo", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get signer_account_id(): string {
    let value = this.get("signer_account_id");
    return value!.toString();
  }

  set signer_account_id(value: string) {
    this.set("signer_account_id", Value.fromString(value));
  }

  get message(): string {
    let value = this.get("message");
    return value!.toString();
  }

  set message(value: string) {
    this.set("message", Value.fromString(value));
  }
}

'''
'''--- subgraph/networks.json ---
{
  "near-testnet": {
    "Welcome": {}
  }
}
'''
'''--- subgraph/package.json ---
{
  "name": "greeting",
  "license": "UNLICENSED",
  "scripts": {
    "codegen": "graph codegen",
    "build": "graph build",
    "deploy": "graph deploy --node https://api.thegraph.com/deploy/ mariogarcia-ar/tco-exa",
    "create-local": "graph create --node http://localhost:8020/ mariogarcia-ar/tco-exa",
    "remove-local": "graph remove --node http://localhost:8020/ mariogarcia-ar/tco-exa",
    "deploy-local": "graph deploy --node http://localhost:8020/ --ipfs http://localhost:5001 mariogarcia-ar/tco-exa"
  },
  "dependencies": {
    "@graphprotocol/graph-cli": "0.29.2",
    "@graphprotocol/graph-ts": "0.26.0"
  }
}

'''
'''--- subgraph/src/mapping.ts ---
import { near, BigInt, log, json , JSONValueKind } from "@graphprotocol/graph-ts";
import { Saludo } from "../generated/schema";

export function handleReceipt(receipt: near.ReceiptWithOutcome): void {
  const actions = receipt.receipt.actions;
  for (let i = 0; i < actions.length; i++) {
    handleAction(
      actions[i], 
      receipt.receipt, 
      receipt.block.header,
      receipt.outcome,
      receipt.receipt.signerPublicKey);
  }
}

function handleAction(
  action: near.ActionValue,
  receipt: near.ActionReceipt,
  blockHeader: near.BlockHeader,
  outcome: near.ExecutionOutcome,
  publicKey: near.PublicKey,
): void {
  if (action.kind != near.ActionKind.FUNCTION_CALL) {
    log.info("Early return: {}", ["Not a function call"]);
    return;
  }

  const functionCall = action.toFunctionCall();
  if (functionCall.methodName == "set_greeting") {
    log.info("estoy en set_greeting  A_A_A", []);
    // https://nomicon.io/RuntimeSpec/FunctionCall
    let jsonData = outcome.logs[0];
    let parsedJSON = json.fromString(jsonData);

    log.info("jsonData: {}", [jsonData]);

    if(parsedJSON.kind == JSONValueKind.OBJECT){
      log.info("procesando", []);
      let entry = parsedJSON.toObject();
      let message : string;
      let signer_account_id : string;
      
      for(let i = 0; i < entry.entries.length; i++){
        log.info("i:{}", [i.toString()]);
        let _entry = entry.entries[i]; 
        let key = _entry.key;
        switch (true) {
          case key == 'message':
            message = _entry.value.toString();
            break;
          case key == 'signer_account_id':
            signer_account_id = _entry.value.toString();
            // greeting.id = _entry.value.toString();
            break;
        }
      }

      log.info("message:{}, signer_account_id:{}", [message, signer_account_id]);
      let greeting = new Saludo(signer_account_id);
      greeting.message = message;
      greeting.signer_account_id = signer_account_id;
      greeting.save();
      log.info("se guardoooooooooooooooooooo", []);

    }else{
      log.info('Error no es un json',[]);
    }
 
  } else {
    log.info("Not processed - FunctionCall is: {}", [functionCall.methodName]);
  }
}
'''
'''--- subgraph/tsconfig.json ---
{
  "extends": "@graphprotocol/graph-ts/types/tsconfig.base.json",
  "include": ["src"]
}

'''