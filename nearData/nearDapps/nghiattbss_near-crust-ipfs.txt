*GitHub Repository "nghiattbss/near-crust-ipfs"*

'''--- README.md ---
## Near Crust IPFS Implementation
A node JS package to upload file using Crust dStorage Solution (IPFS, pinning service) for NFT marketplace on NEAR.

## Install Package
`npm i near-crust-ipfs`

## Functions
- `upload(authHeader, content)`: to upload a file using Crust IPFS gateway
- `pin(authHeader, cid, fileName)`: to pin a file using Crust IPFS pinning service
- `uploadToCrust(file)`:  to upload & pin a file using Crust IPFS.

For NEAR, authHeader can be created by this code block:
```
    // 1. get authheader

    const keyPair = KeyPair.fromRandom('ed25519');

    // get address
    const addressRaw = keyPair.getPublicKey().toString();
    const address = addressRaw.substring(8);

    // get singature
    const {signature} = keyPair.sign(Buffer.from(address));
    const sig = u8aToHex(signature).substring(2);

    // Authorization: Bear <base64(ChainType-PubKey:SignedMsg)>
    // compile a authHeader

    const authHeaderRaw = `near-${address}:${sig}`;
    const authHeader = Buffer.from(authHeaderRaw).toString('base64');
```
## How to use

### Using React Dropzone Component
- [React Dropzone](https://react-dropzone.js.org/)
- [Sample Code](https://github.com/BSSCommerce/picasarts.io---Near/blob/master/src/components/common/ImageUpload.jsx)

### Using html file upload
Import library to your js file.
- `import { uploadToCrust } from "near-crust-ipfs"`

Create a html file upload

- `<input type="file" onChange={(e) => handleInputChange("file", e.target.files[0])} />`

Create a function handleInputChange to handle state, and use uploadToCrustFunction to upload
- `await uploadToCrust(file)`
'''
'''--- index.js ---
const {uploadToCrust} = require("./src/crust");
const {upload} = require("./src/upload");
const {pin} = require("./src/pin");
module.exports = {
    uploadToCrust,
    upload,
    pin
};
'''
'''--- package.json ---
{
  "name": "near-crust-ipfs",
  "version": "1.0.6",
  "description": "Using Crust dStorage Solution to store and distribute NFT file on Near Blockchain",
  "main": "index.js",
  "scripts": {
    "test": "test"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/nghiattbss/near-crust-ipfs.git"
  },
  "dependencies": {
    "@polkadot/util": "^8.3.2",
    "bn": "^1.0.5",
    "ipfs-http-client": "^55.0.0",
    "isomorphic-fetch": "^3.0.0",
    "near-api-js": "^0.41.0",
    "near-seed-phrase": "^0.1.0"
  },
  "keywords": [
    "NFT",
    "Crust",
    "Near",
    "Protocol",
    "IPFS"
  ],
  "author": "nghiatt@bsscommerce.com",
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/nghiattbss/near-crust-ipfs/issues"
  },
  "homepage": "https://github.com/nghiattbss/near-crust-ipfs#readme"
}

'''
'''--- src/crust.js ---
const { KeyPair } = require('near-api-js');
const { u8aToHex } = require('@polkadot/util');
const { upload } = require('./upload');
const { pin } =  require('./pin');
async function uploadToCrust(file) {

    // 1. get authheader

    const keyPair = KeyPair.fromRandom('ed25519');

    // get address
    const addressRaw = keyPair.getPublicKey().toString();
    const address = addressRaw.substring(8);

    // get singature
    const {signature} = keyPair.sign(Buffer.from(address));
    const sig = u8aToHex(signature).substring(2);

    // Authorization: Bear <base64(ChainType-PubKey:SignedMsg)>
    // compile a authHeader

    const authHeaderRaw = `near-${address}:${sig}`;
    const authHeader = Buffer.from(authHeaderRaw).toString('base64');

    // 2. post files onto IPFS/Cru
    let buffer =  Buffer.from(await file.arrayBuffer());
    const { cid, size, path } = await upload(authHeader, buffer);
    await pin(authHeader, cid, file.name);
    return { cid, path, size };
}

module.exports = {
    uploadToCrust
};
'''
'''--- src/pin.js ---
// import got from 'got';
require('isomorphic-fetch');
const ipfsPinningService = 'https://pin.crustcode.com/psa';

async function pin(authHeader, cid, fileName) {
    if (cid.length !== 46) {
        throw new Error('CID len err');
    }
    try {
        const request = await fetch(ipfsPinningService + "/pins", {
            method: "POST",
            headers: {
                authorization: 'Bearer ' + authHeader,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({cid: cid, name: fileName})
        })
        const response = await request.json();
        return response;
    } catch (e) {
        console.log(e);
    }

}
module.exports = {
    pin
};
'''
'''--- src/upload.js ---
const { create } = require('ipfs-http-client');

const ipfsGateway = 'https://crustwebsites.net';

async function upload(authHeader, content) {

    const ipfs = create({
        url: ipfsGateway + '/api/v0',
        headers: {
            authorization: 'Basic ' + authHeader
        }
    });
    const { cid } = await ipfs.add(content);

    const fileStat = await ipfs.files.stat("/ipfs/" + cid.toString());

    return {
        cid: cid.toString(),
        size: fileStat.cumulativeSize,
        path: `${ipfsGateway}/ipfs/${cid.toString()}`
    };
}
module.exports = {
    upload
};
'''