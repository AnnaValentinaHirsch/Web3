*GitHub Repository "Learn-NEAR/NCD--PostComm"*

'''--- Readme.md ---
# Introducción

PostComm es un smart contract escrito bajo el protocolo NEAR que permite:

* Crear un perfil de empresa o usuario. 
* Navegar entre las diferentes campañas.
* Seleccionar y compartir una de ellas en redes sociales o página web.
* Obtener ganancias en NEAR compartiendo el contenido.
* Verificar a la empresa como confiable.
* Editar u eliminar una publicación o campaña publicitaria completa (solo los   creadores de esta podrán hacerlo).

# Requisitos

- Tener instalado en su dispositio Node.js

- Instalar yarn:

  > npm install -g yarn

- Instalar dependencias: yarn install

- Crear un test near account [WALLET.TESTNET](https://wallet.testnet.near.org/)

- Instalar el NEAR CLI global para interactuar directamente con los comandos correspondientes a NEAR blo

  > ```
  > npm install -g near-cli
  > ```

# Instalación Local 

## Paso 1

Ya que hayas creado tu cuenta en NEAR testnet, te iras a la near cli y comprueba que haya sido creada correctamente:

> ```
> near login
> ```

### Paso 2

Clonar repositorio, en tu Bash de GIT pega el siguiente código para que permita tener el proyecto en tu dispositivo:

> git clone https://github.com/WConanSantacruz/NEAR-PostComm.git 

Enseguida utiliza el siguiente comando para que se ejecuten todos los comandos dentro del repositorio:

> cd postcomm

Los comandos que requerirás para poder desplegarla serán los siguientes:

> * npm init //crea un package.json 
>
> * yarn install //instalar dependencia yarn
>
> - yarn add -O near-sdk-as //coleccion de paquetes de near para desarrollo
>
> - mkdir assembly    //crear un directorio de lenguaje assemblyscript
>
> - touch asconfig.json   //se agrega asconfig al cliente
>
> * yarn asb // create a release build and place it
>
> * yarn asb --wat //herramienta de yarn asb
>
> * yarn asp --init //creacion de pruebas de asp
>
> * yarn install --global near-cli //intalar el cliente de near de forma global
>
> * yarn global ad near-cli //agregar un cliente de near al proyecto
>
> * yarn asp --verbose // test de pruebas
>
> * yarn --frozen-lockfile 
>
> * near login //log de una cuenta near

# Mockup de la aplicación

Para ver como quedaría el diseño de la aplicación da click en el siguiente enlace:

https://drive.google.com/drive/folders/1nskJvZ2Vhd6tEnB_Xa8ltLyesgO3A2_i?usp=sharing

'''
'''--- postcomm/as-pect.config.js ---
module.exports = require("near-sdk-as/imports")
  
'''
'''--- postcomm/asconfig.json ---
{
    "extends": "near-sdk-as/asconfig.json"
}
'''
'''--- postcomm/assembly/__tests__/as-pect.d.ts ---
/// <reference types="@as-pect/assembly/types/as-pect" />

'''
'''--- postcomm/assembly/__tests__/example.spec.ts ---
import { hello_word } from "..";

describe("example", () => {
  it("should return 'hello word'", () => {
    expect (hello_word()).toStrictEqual ("hello word");
  })
});

import { makeCampaña, getCampañas, vote, makeExtendedCampaña } from '../../assembly';
import { storage, Context, runtime_api, VMContext, logging } from "near-sdk-as";

const someContract = "somecontract.testnet"

const allcharmian = "allcharmian.testnet"
const bravio = "bravio.testnet"
const lazio = "lazio.testnet"
const smartio = "smartio.testnet"

describe("Campaña", () => {

    beforeEach(() => {
        VMContext.setSigner_account_id(allcharmian)
        VMContext.setPredecessor_account_id(allcharmian)
    });

    itThrows("disallow make Campaña on behalf", () => {
        VMContext.setSigner_account_id(allcharmian)
        VMContext.setPredecessor_account_id(someContract)
        makeCampaña("test Campaña")
    });

    it("should create Campaña", () => {
        var Campaña = makeCampaña("test Campaña");
        expect(Campaña.id).toStrictEqual(0)
        expect(getCampañas('me').length).toStrictEqual(1);    
        expect(getCampañas('').length).toStrictEqual(0);
        expect(getCampañas('me')[0].Campaña.who).toStrictEqual(allcharmian);
        log("Campaña created by: " + getCampañas('me')[0].Campaña.who);    
    });

    it("should create two Campañas by the same creator", () => {
        var Campaña1 = makeCampaña("test Campaña");
        expect(Campaña1.id).toStrictEqual(0)
        var Campaña2 = makeCampaña("test Campaña 2");
        expect(Campaña2.id).toStrictEqual(1)
        expect(getCampañas('me').length).toStrictEqual(2);    
        expect(getCampañas('').length).toStrictEqual(0);
        log("total Campañas created: " + "by " + allcharmian + ": " + getCampañas('me').length.toString());
        log("total Campañas created: " + "by others " + ": " + getCampañas('').length.toString());
    });

    it("should create two Campañas by different creators", () => {
        VMContext.setSigner_account_id(allcharmian)
        VMContext.setPredecessor_account_id(allcharmian)

        var Campaña1 = makeCampaña("allcharmian's Campaña");
        expect(Campaña1.Campaña.who).toStrictEqual(allcharmian);
        expect(getCampañas('me').length).toStrictEqual(1);    
        expect(getCampañas('').length).toStrictEqual(0);    

        VMContext.setSigner_account_id(bravio)
        VMContext.setPredecessor_account_id(bravio)

        var Campaña2 = makeCampaña("bravio's Campaña");
        expect(Campaña2.Campaña.who).toStrictEqual(bravio);
        expect(getCampañas('me').length).toStrictEqual(1);    
        expect(getCampañas('').length).toStrictEqual(1);    

        VMContext.setSigner_account_id(lazio)
        VMContext.setPredecessor_account_id(lazio)

        expect(getCampañas('me').length).toStrictEqual(0);    
        expect(getCampañas('').length).toStrictEqual(2);    
    });

    itThrows("should disallow to vote for own public Campaña", () => {
        VMContext.setSigner_account_id(allcharmian)
        VMContext.setPredecessor_account_id(allcharmian)

        var Campaña1 = makeCampaña("allcharmian's Campaña");
        vote(Campaña1.id, true);
    });

    it("should allow to vote for other's public Campaña", () => {
        VMContext.setSigner_account_id(allcharmian)
        VMContext.setPredecessor_account_id(allcharmian)

        var Campaña1 = makeCampaña("allcharmian's Campaña");

        VMContext.setSigner_account_id(bravio)
        VMContext.setPredecessor_account_id(bravio)

        Campaña1 = vote(Campaña1.id, true);
        expect(Campaña1.Campaña.vote_yes).toStrictEqual(1);
        expect(Campaña1.Campaña.vote_no).toStrictEqual(0);

        Campaña1 = vote(Campaña1.id, true);
        expect(Campaña1.Campaña.vote_yes).toStrictEqual(1);
        expect(Campaña1.Campaña.vote_no).toStrictEqual(0);

        Campaña1 = vote(Campaña1.id, false);
        expect(Campaña1.Campaña.vote_yes).toStrictEqual(0);
        expect(Campaña1.Campaña.vote_no).toStrictEqual(1);

        VMContext.setSigner_account_id(lazio)
        VMContext.setPredecessor_account_id(lazio)

        Campaña1 = vote(Campaña1.id, false);
        expect(Campaña1.Campaña.vote_yes).toStrictEqual(0);
        expect(Campaña1.Campaña.vote_no).toStrictEqual(2);

        Campaña1 = vote(Campaña1.id, false);
        expect(Campaña1.Campaña.vote_yes).toStrictEqual(0);
        expect(Campaña1.Campaña.vote_no).toStrictEqual(2);
    });

    itThrows("should disallow Campaña creation with invalid viewers", () => {
        VMContext.setSigner_account_id(allcharmian)
        VMContext.setPredecessor_account_id(allcharmian)

        var Campaña1 = makeExtendedCampaña("allcharmian's Campaña", ["blablabla"], []);
        vote(Campaña1.id, true);
    });

    itThrows("should disallow Campaña creation with invalid voters", () => {
        VMContext.setSigner_account_id(allcharmian)
        VMContext.setPredecessor_account_id(allcharmian)

        var Campaña1 = makeExtendedCampaña("allcharmian's Campaña", [], ["blablabla"]);
        vote(Campaña1.id, true);
    });

    itThrows("should create private Campaña with no voters", () => {
        VMContext.setSigner_account_id(allcharmian)
        VMContext.setPredecessor_account_id(allcharmian)

        var Campaña1 = makeExtendedCampaña("allcharmian's Campaña", [bravio], []);
        vote(Campaña1.id, true);
    });

    itThrows("should disallow to vote for own private Campaña if not in voters list", () => {
        VMContext.setSigner_account_id(allcharmian)
        VMContext.setPredecessor_account_id(allcharmian)

        var Campaña1 = makeExtendedCampaña("allcharmian's Campaña", [bravio], []);
        vote(Campaña1.id, true);
    });

    it("should allow to vote for own private Campaña if in voters list", () => {
        VMContext.setSigner_account_id(allcharmian)
        VMContext.setPredecessor_account_id(allcharmian)

        var Campaña1 = makeExtendedCampaña("allcharmian's Campaña", [bravio, allcharmian], [allcharmian]);
        vote(Campaña1.id, true);
    });

    itThrows("should disallow to vote for other's private Campaña if not in voters list", () => {
        VMContext.setSigner_account_id(allcharmian)
        VMContext.setPredecessor_account_id(allcharmian)

        var Campaña1 = makeExtendedCampaña("allcharmian's Campaña", [bravio, allcharmian], [bravio]);

        VMContext.setSigner_account_id(lazio)
        VMContext.setPredecessor_account_id(lazio)

        vote(Campaña1.id, true);
    });

    it("should allow to vote for other's private Campaña if in voters list", () => {
        VMContext.setSigner_account_id(allcharmian)
        VMContext.setPredecessor_account_id(allcharmian)

        var Campaña1 = makeExtendedCampaña("allcharmian's Campaña", [bravio, allcharmian], [bravio]);

        VMContext.setSigner_account_id(bravio)
        VMContext.setPredecessor_account_id(bravio)

        vote(Campaña1.id, true);
    });

    it("should return only private Campañas where in viewers list", () => {
        VMContext.setSigner_account_id(allcharmian)
        VMContext.setPredecessor_account_id(allcharmian)

        var Campaña1 = makeExtendedCampaña("allcharmian's Campaña", [bravio], [bravio, allcharmian, smartio]);
        expect(Campaña1.Campaña.canView.has(bravio)).toStrictEqual(true);
        expect(Campaña1.Campaña.canView.has(allcharmian)).toStrictEqual(true);
        expect(Campaña1.Campaña.canVote.has(bravio)).toStrictEqual(true);
        expect(Campaña1.Campaña.canVote.has(allcharmian)).toStrictEqual(true);

        VMContext.setSigner_account_id(lazio)
        VMContext.setPredecessor_account_id(lazio)

        var laziosCampañas = getCampañas("others");
        expect(laziosCampañas.length).toStrictEqual(0)

        VMContext.setSigner_account_id(bravio)
        VMContext.setPredecessor_account_id(bravio)

        var braviosCampañas = getCampañas("others");
        expect(braviosCampañas.length).toStrictEqual(1)

        VMContext.setSigner_account_id(allcharmian)
        VMContext.setPredecessor_account_id(allcharmian)

        var allcharmiansCampañas = getCampañas("others");
        expect(allcharmiansCampañas.length).toStrictEqual(1)

        VMContext.setSigner_account_id(smartio)
        VMContext.setPredecessor_account_id(smartio)

        var smartiosCampañas = getCampañas("others");
        expect(smartiosCampañas.length).toStrictEqual(1)
    });

});
'''
'''--- postcomm/assembly/index.ts ---
export function hello_word(): string{
    return "hello word";
}
export enum Vote {
    Yes,
    No
}
export class campaña {
    who: string;
    vote_yes: u64 = 0;
    vote_no: u64 = 0;
    timestamp: u64 = 0;
    votes: Map<string, Vote> = new Map<string, Vote>();
    canView: Set<string> = new Set<string>();
    canVote: Set<string> = new Set<string>();
  
    constructor(public what: string) {
      this.who = Context.sender;
      this.timestamp = Context.blockTimestamp;
    }
  }

export class Returnedcampaña {
    constructor(public id: i32, public campaña: campaña) {
    }    
}
export const campaña = new PersistentVector<Campaña>("p");
'''
'''--- postcomm/assembly/tsconfig.json ---
{
    "extends": "assemblyscript/std/assembly.json"
}
'''
'''--- postcomm/package.json ---
{
  "name": "postcomm",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "asp",
    "build": "asb"
  },
  "author": "",
  "license": "ISC",
  "optionalDependencies": {
    "near-sdk-as": "^3.2.3"
  }
}

'''