*GitHub Repository "neararabic/verified-profile"*

'''--- contract/__tests__/as-pect.d.ts ---
/// <reference types="@as-pect/assembly/types/as-pect" />
'''
'''--- contract/__tests__/index.unit.spec.ts ---
import { Contract } from "../assembly";
import { VMContext } from "near-mock-vm";
import { u128 } from "near-sdk-as";

let contractt: Contract;
const CREATOR_ACCOUNT_ID = "someone.NEAR";
const CURRENT_ACCOUNT_ID = "someone.NEAR";
const PREDECESSOR_ACCOUNT_ID = "Owner.testnet";

beforeAll(() => {
    contractt = new Contract();
    VMContext.setSigner_account_id(CREATOR_ACCOUNT_ID);
    VMContext.setCurrent_account_id(CURRENT_ACCOUNT_ID);
    VMContext.setPredecessor_account_id(PREDECESSOR_ACCOUNT_ID);
});

describe("isAccountVerified function", () => {
    test("Check if the function isAccountVerified works probably", () => {
        VMContext.setSigner_account_id("someone.NEAR")
        contractt.createProfile()
        expect(contractt.profilesList.contains(CURRENT_ACCOUNT_ID)).toBeTruthy()
    });
});

describe("isAccountVerified function", () => {
    test("2", () => {
        VMContext.setSigner_account_id("someone.NEAR")
        contractt.createProfile()
        VMContext.setAttached_deposit(u128.from(1))
        VMContext.setPredecessor_account_id("Owner.testnet")
        contractt.verifyAccount("someone.NEAR", 2)
        expect(contractt.isAccountVerified("someone.NEAR")).toBe("2")
    });
});
'''
'''--- contract/as-pect.config.js ---
module.exports = require("near-sdk-as/imports");
module.exports.include.push("**/*.unit.spec.ts");

'''
'''--- contract/asconfig.json ---
{
  "extends": "near-sdk-as/asconfig.json"
}

'''
'''--- contract/assembly/as_types.d.ts ---
/// <reference types="near-sdk-as/assembly/as_types" />

'''
'''--- contract/assembly/index.ts ---
import { context, PersistentMap, PersistentVector, u128 } from "near-sdk-as";
export const enum verificationType {
  New = 0,
  Pending = 1,
  Rejected = 2,
  Verified = 3,
  Spam = 4,
}
@nearBindgen
export class Contract {
  // A List that contains all the registered profiles
  profilesList: PersistentMap<string, verificationType> = new PersistentMap<
    string,
    verificationType
  >("P");
  // A List contains all accounts ID
  usersAccountsId: PersistentVector<string> = new PersistentVector<string>("U");
  adminList: Array<string> = [
    "kareemayman.testnet",
    "aliabdallah9.testnet",
    "mhassanist.testnet",
    "hamzatest.tesnet",
  ];

  accountExist(accountID: string): bool {
    if (this.profilesList.contains(accountID)) {
      return true
    }
    return false
  }

  adminExist(accountID: string): bool {
    for (let i: i32 = 0; i < this.adminList.length; i++) {
      if (accountID == this.adminList[i])
        return true
    }
    return false
  }

  // This functions checks if the profile is already linked to this near account or not, if it isn't then it creates as new profile
  @mutateState()
  createProfile(): string {
    let accountID = context.sender;
    assert(
      !this.profilesList.contains(accountID),
      "This NEAR ID is already linked to another account"
    );
    this.profilesList.set(accountID, 0);
    this.usersAccountsId.push(accountID); // Storage Users' Accounts IDs
    return accountID;
  }

  // assuming that the admin id is Owner.testnet
  @mutateState()
  verifyAccount(accountID: string, verification: verificationType): string {
    assert(this.adminExist(context.predecessor), "Access Denied");
    assert(this.profilesList.contains(accountID), "This NEAR ID is missing");
    this.profilesList.set(accountID, verification);
    return accountID;
  }

  changeToPending(accountID: string): string {
    assert(
      context.predecessor == accountID ||
      this.adminList.includes(context.predecessor),
      "Access Denied"
    );
    assert(this.profilesList.contains(accountID), "This NEAR ID is missing");
    this.profilesList.set(accountID, 1);
    return accountID;
  }
  verificationPerUser(accountID: string): string {
    assert(
      context.predecessor == accountID ||
      this.adminList.includes(context.predecessor),
      "Access Denied"
    );
    let verificationType = this.profilesList.getSome(accountID);
    if (verificationType == 0) {
      return "New";
    } else if (verificationType == 1) {
      return "Pending";
    } else if (verificationType == 2) {
      return "Rejected";
    } else if (verificationType == 3) {
      return "Verified";
    } else if (verificationType == 4) {
      return "Spam";
    }
    return "Not Defined";
  }
  // This function acts as API to know if the account is Verified or not
  isAccountVerified(accountID: string): string {
    assert(context.attachedDeposit >= u128.from(1), "1 NEAR is required");
    let verification = this.verificationPerUser(accountID);
    return verification;
  }

  // This function returns users' accounts ID
  getUsers(): Array<string> {
    assert(this.adminList.includes(context.predecessor), "Access Denied");
    let users = new Array<string>(this.usersAccountsId.length);
    for (let i = 0; i < this.usersAccountsId.length; i++) {
      users[i] =
        this.usersAccountsId[i] +
        "," +
        this.verificationPerUser(this.usersAccountsId[i]);
    }
    return users;
  }
}

'''
'''--- contract/assembly/tsconfig.json ---
{
  "extends": "../node_modules/assemblyscript/std/assembly.json",
  "include": ["./**/*.ts"]
}

'''
'''--- contract/package.json ---
{
  "name": "verifiedprofile",
  "version": "0.0.1",
  "description": "Start with a basic project",
  "scripts": {
    "dev": "watch -d -n 1 'clear && yarn test'",
    "test": "yarn asp -f unit.spec",
    "clean": "rm -rf ./build && rm -rf ./neardev",
    "build": "asb --target debug",
    "build:release": "asb",
    "asp": "asp --verbose --nologo"
  },
  "keywords": [],
  "author": "hello@world-near.org",
  "license": "ISC",
  "devDependencies": {
    "@types/jest": "^27.4.0",
    "near-sdk-as": "^3.1.0"
  }
}

'''
'''--- package.json ---
{
  "name": "verified-profile",
  "homepage": "https://Kariimayman.github.io/VerifiedProfileV2",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@popperjs/core": "^2.10.2",
    "@testing-library/jest-dom": "^5.11.4",
    "@testing-library/react": "^11.1.0",
    "@testing-library/user-event": "^12.1.10",
    "big-number": "^2.0.0",
    "bootstrap": "^5.1.3",
    "bootstrap-icons": "^1.7.1",
    "firebase": "^9.9.4",
    "near-api-js": "^0.43.1",
    "prop-types": "^15.7.2",
    "react": "^17.0.2",
    "react-bootstrap": "^2.5.0",
    "react-checkmark": "^1.4.0",
    "react-confirm-alert": "^2.7.0",
    "react-dom": "^17.0.2",
    "react-hooks-identicons": "^1.0.3",
    "react-scripts": "^4.0.3",
    "react-toastify": "^8.1.0",
    "uuid": "^8.3.2",
    "web-vitals": "^1.0.1"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts  --openssl-legacy-provider build",
    "predeploy": "npm run build",
    "deploy": "gh-pages -d build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "gh-pages": "^3.2.3"
  }
}

'''
'''--- public/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>Verified Profile</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

'''
'''--- public/manifest.json ---
{
  "short_name": "NEAR marketplace DApp",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

'''
'''--- public/robots.txt ---
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

'''
'''--- src/App.css ---
.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

'''
'''--- src/App.js ---
import React, { useEffect, useCallback, useState } from "react";
import { Container, Nav } from "react-bootstrap";
import { login, logout as destroy, accountBalance } from "./components/utils/near";
import Cover from "./components/utils/Cover";
import Wallet from "./components/Wallet";
import coverImg from "./cover.png";
import "./App.css";
import Functions from "./components/Functions"
import Admin from "./components/admin"

const App = function AppWrapper() {
  const account = window.walletConnection.account();
  const [balance, setBalance] = useState("0");
  const [adminList] = useState(["aliabdallah9.testnet", "mhassanist.testnet","kareemayman.testnet","hamzatest.testnet"]);

  

  function isAdmin(){
    for(let i = 0; i<adminList.length;i++){
      console.log("ID : " + account.accountId)
      console.log("Admin : " + adminList[i])
      if(account.accountId === adminList[i]){
        console.log("IS ADMIN")
        return true
      }
    }
    return false
  }

  const getBalance = useCallback(async () => {
    if (account.accountId) {
      setBalance(await accountBalance());
    }
  });

  useEffect(() => {
    getBalance();
  }, [getBalance]);

  return (
    <>
    <div style={{       
      background: "#000",
      backgroundPosition: 'center',
      backgroundSize: 'cover',
      width: '100vw',
      height: '100vh',
      color:"white" }}>
      {account.accountId ? (
        <Container fluid="md">
          <Nav className="justify-content-end pt-3 pb-3">
            <Nav.Item>
              <Wallet
                address={account.accountId}
                amount={balance}
                symbol="NEAR"
                destroy={destroy}
              />
            </Nav.Item>
          </Nav>
          <div> <h1>VProfile</h1></div>
          <main>
          {isAdmin()? (
            <Admin/>
          ): 
            (
              <Functions/>
            )
          }
          </main>
        </Container> 
      ) : (
        <Cover name="Verified Accounts" login={login} coverImg={coverImg}/>
      )}
      </div>
    </>
    
  );
}

export default App;
'''
'''--- src/App.test.js ---
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

'''
'''--- src/components/Direct.js ---
import React, {useState, useEffect} from "react";
import Loader from "./utils/loader";
import Form from "./form"
import { Checkmark } from "react-checkmark";
import {
  verificationType,
} from "./utils/functions";

const Direct = ({ID}) => {
  const [vType, SetVerificationType] = useState(" Verification Type Not Found");
  const [loading, setLoading] = useState(false);

  const Verification = async (userId) => {
    try {
      setLoading(true);
      SetVerificationType(await verificationType(userId));
    } catch (error) {
      console.log(error);
    }finally{
      setLoading(false);
    }
  };
  useEffect(async() => {
    await Verification(ID)
  }, []);
  if(!loading){
    if(vType === "New" )
  {
    return (
        <>
        <Form userID = {ID}/>
        </>
      );
  }
  else if(vType === "Spam")
  {
    return (
      <>
      <h1 align="middle"> {ID} is marked as a spam account</h1>
      </>
    );
  }
  else if(vType === "Pending")
  {
    return (
      <>
      <h1 align="middle"> {ID} is Pending Verification</h1>
      </>
    );
  }
  else if(vType === "Verified")
  {
    return (
      <>
      <h1 align="middle"> {ID} is verified successfully</h1> <Checkmark size={'large'} />
      </>
    );
  }
  else if(vType === "Rejected")
  {
    return (
      <>
      <h1 align="middle"> {ID} Verification Rejected</h1>
      <Form userID = {ID}/>
      </>
    );
  }
  }
  else{
    <Loader/>
  }
  return <Loader/>
};
export default Direct;
'''
'''--- src/components/Functions.js ---
import React, {useState, useEffect} from "react";
import Loader from "./utils/loader";
import Direct from "./Direct"
import {
  createProfile,
} from "./utils/functions";

const Functions = () => {
  const [userId, setUserId] = useState("ID");
  const [loading, setLoading] = useState(false);

  const createNewProfile = async()=> {
    try {
      setLoading(true);
      setUserId(window.walletConnection.account().accountId)
      await (createProfile());
    } catch (error) {
      console.log(error);
    } finally {
      setLoading(false);
    }  
};
  useEffect(async() => {
    await createNewProfile()
  }, []);

return (
  <>
    {!loading ? (
      <>
      <Direct ID = {userId}/>
      </>

    ) : (
      <Loader />
    )}
  </>
);
};

export default Functions;
'''
'''--- src/components/Splitusers.js ---
import React, { useState, useEffect } from "react";
import Loader from "./utils/loader";
import Admin from "./admin";
import { verifyAccount } from "./utils/functions";
const Splitusers = ({ usersList }) => {
  var [pendingList] = useState([]);
  var [newList] = useState([]);
  var [rejectedList] = useState([]);
  var [verifiedList] = useState([]);
  var [spamList] = useState([]);
  const [List, setList] = useState(false);
  const [refresh, setRefresh] = useState(false);

  const splitUsers = async () => {
    console.log(usersList);
    if (usersList.length !== 0) {
      for (let i = 0; i < usersList.length; i++) {
        var user = usersList[i].split(",");
        if (user[1] === "Verified") {
          verifiedList.push(user[0]);
        } else if (user[1] === "Pending") {
          pendingList.push(user[0]);
        } else if (user[1] === "New") {
          newList.push(user[0]);
        } else if (user[1] === "Rejected") {
          rejectedList.push(user[0]);
        } else if (user[1] === "Spam") {
          spamList.push(user[0]);
        }
      }
      setList(true);
    }
  };

  const verifyUser = async (ID, type) => {
    try {
      setList(false);
      await verifyAccount(ID, type);
    } catch (error) {
      console.log(error);
    } finally {
      setList(true);
      setRefresh(true);
    }
  };

  useEffect(() => {
    splitUsers();
  }, []);
  if (List === false) {
    return (
      <>
        <Loader />
      </>
    );
  }
  if (refresh === true) {
    return (
      <>
        <Admin />
      </>
    );
  }

  return (
    <>
      <div style={{ background: "#000" }}>
        <h1>New</h1>
        {/* New Users Part*/}
        {newList.length === 0 ? (
          <p>No User Found</p>
        ) : (
          <div>
            <ol>
              {newList.map((newList) => (
                <li>{newList}</li>
              ))}
            </ol>
          </div>
        )}

        {/* Verified Users Part*/}
        <h1>Verified</h1>
        {verifiedList.length === 0 ? (
          <p>No User Found</p>
        ) : (
          <div>
            <ol>
              {verifiedList.map((verifiedList) => (
                <li>
                  {verifiedList}{" "}
                  <button
                    style={{
                      width: 150,
                      height: 30,
                      backgroundColor: "#fff",
                      borderRadius: 50,
                    }}
                    onClick={() => verifyUser(verifiedList, 0)}
                  >
                    Change to New
                  </button>
                </li>
              ))}
            </ol>
          </div>
        )}

        {/* Spam Users Part*/}
        <h1>Spam</h1>
        {spamList.length === 0 ? (
          <p>No User Found</p>
        ) : (
          <div>
            <ol>
              {spamList.map((spamList) => (
                <li>
                  {spamList}{" "}
                  <button
                    style={{
                      width: 150,
                      height: 30,
                      backgroundColor: "#fff",
                      borderRadius: 50,
                    }}
                    onClick={() => verifyUser(verifiedList, 0)}
                  >
                    Change to New
                  </button>
                </li>
              ))}
            </ol>
          </div>
        )}

        {/* Pending Users Part*/}
        <h1>Pending</h1>
        {pendingList.length === 0 ? (
          <p>No User Found</p>
        ) : (
          <div>
            <ol>
              {pendingList.map((pendingList) => (
                <li>
                  {pendingList}{" "}
                  <button
                    style={{
                      width: 150,
                      height: 30,
                      backgroundColor: "#fff",
                      borderRadius: 50,
                    }}
                    onClick={() => verifyUser(pendingList, 3)}
                  >
                    Verify
                  </button>
                  <button
                    style={{
                      width: 150,
                      height: 30,
                      backgroundColor: "#fff",
                      borderRadius: 50,
                    }}
                    onClick={() => verifyUser(verifiedList, 2)}
                  >
                    Reject
                  </button>
                  <button
                    style={{
                      width: 150,
                      height: 30,
                      backgroundColor: "#fff",
                      borderRadius: 50,
                    }}
                    onClick={() => verifyUser(verifiedList, 4)}
                  >
                    Spam
                  </button>
                </li>
              ))}
            </ol>
          </div>
        )}

        {/* Rejected Users Part*/}
        <h1>Rejected</h1>
        {rejectedList.length === 0 ? (
          <p>No User Found</p>
        ) : (
          <div>
            <ol>
              {rejectedList.map((rejectedList) => (
                <li>
                  {rejectedList}{" "}
                  <button
                    style={{
                      width: 150,
                      height: 30,
                      backgroundColor: "#fff",
                      borderRadius: 50,
                    }}
                    onClick={() => verifyUser(rejectedList, 3)}
                  >
                    verify
                  </button>
                </li>
              ))}
            </ol>
          </div>
        )}
      </div>
    </>
  );
};
export default Splitusers;

'''
'''--- src/components/Wallet.js ---
import { Badge, Dropdown, Spinner, Stack } from 'react-bootstrap';

import React from 'react';

const Wallet = ({ address, amount, symbol, destroy }) => {
  if (address) {
    return (
      <>
        <Badge className='me-3' bg='info' text='dark'>
          {address}
        </Badge>
        <Dropdown>
          <Dropdown.Toggle
            variant='light'
            align='end'
            id='dropdown-basic'
            className='d-flex align-items-center border rounded-pill py-1'>
            {amount ? (
              <>
                {amount} <span className='ms-1'> {symbol}</span>
              </>
            ) : (
              <Spinner animation='border' size='sm' className='opacity-25' />
            )}
          </Dropdown.Toggle>

          <Dropdown.Menu className='shadow-lg border-0'>
            <Dropdown.Item
              href={`https://explorer.testnet.near.org/accounts/${address}`}
              target='_blank'>
              <Stack direction='horizontal' gap={1}>
                <i className='bi bi-person-circle fs-4' />
                <span className='font-monospace'>{address}</span>
              </Stack>
            </Dropdown.Item>

            <Dropdown.Divider />
            <Dropdown.Item
              as='button'
              className='d-flex align-items-center'
              onClick={() => {
                destroy();
              }}>
              <i className='bi bi-box-arrow-right me-2 fs-4' />
              Disconnect
            </Dropdown.Item>
          </Dropdown.Menu>
        </Dropdown>
      </>
    );
  }

  return null;
};

export default Wallet;
'''
'''--- src/components/admin.js ---
import React, { useState, useEffect } from "react";
import Loader from "./utils/loader";
import { getusersList, verifyAccount } from "./utils/functions";
import Splitusers from "./Splitusers"
const Admin = () => {

  var [userList, setUsers] = useState([]);
  
  const getUsers = async () => {
    try {
      console.log("setting users");
      setUsers(await getusersList());
      console.log(" done");
    } catch (error) {
      console.log(error);
    } finally {
    }
  };

  useEffect(async() => {
    await getUsers();    
  }, []);

  if(userList.length === 0)
  {
    return(<Loader/>)
  }

  return (
    <>
       <Splitusers usersList={userList}  />
    </>
  );
};
export default Admin;

'''
'''--- src/components/form.js ---
import React, {useState } from "react";
import Direct from "./Direct";
import Loader from "./utils/loader";
import { colRef } from "./storageconfig";
import storage from "./storageconfig";
import { doc, setDoc } from "firebase/firestore";
import { ref, uploadBytesResumable, getDownloadURL } from "firebase/storage";
import { changeToPending } from "./utils/functions";

const Form = ({ userID }) => {
  const [ID] = useState(userID);
  const [loading, setLoading] = useState(false);
  const [showform, setForm] = useState(true);
  var [urls] = useState([]);

  const addVerification = async (userId) => {
    try {
      setLoading(true);
      await changeToPending(userId);
      setForm(false);
    } catch (error) {
      console.log(error);
    } finally {
      setLoading(false);
    }
  };
  function handleFrontID(e) {
    const Newfile = e.target.files[0];
    if(Newfile.size / 1024 > 5000 )
    {
      alert("File size is too big\nPlease Choose Another File")
      e.target.value = null;
    }
    else 
    {
    const storageRef = ref(storage, `/files/${userID} frontID`);
    const uploadTask = uploadBytesResumable(storageRef, Newfile);
    uploadTask.on(
      "state_changed",
      (snapshot) => {},
      (err) => console.log(err),
      () => {
        getDownloadURL(uploadTask.snapshot.ref).then((url) => {
          console.log(url);
          urls[0] = url;
        });
      }
    );
  }
}
  function handleBackID(e) {
    const Newfile = e.target.files[0];
    if(Newfile.size / 1024 > 10240 )
    {
      alert("File size is too big\nPlease Choose Another File")
      e.target.value = null;
    }
    else 
    {
    const storageRef = ref(storage, `/files/${userID} BackID`);
    const uploadTask = uploadBytesResumable(storageRef, Newfile);
    uploadTask.on(
      "state_changed",
      (snapshot) => {},
      (err) => console.log(err),
      () => {
        getDownloadURL(uploadTask.snapshot.ref).then((url) => {
          console.log(url);
          urls[1] = url;
        });
      }
    );
  }
}
  function handlePicWithID(e) {
    const Newfile = e.target.files[0];
    if(Newfile.size / 1024 > 10240 )
    {
      alert("File size is too big\nPlease Choose Another File")
      e.target.value = null;
    }
    else 
    {
    const storageRef = ref(storage, `/files/${userID} PicWithID`);
    const uploadTask = uploadBytesResumable(storageRef, Newfile);
    uploadTask.on(
      "state_changed",
      (snapshot) => {},
      (err) => console.log(err),
      () => {
        getDownloadURL(uploadTask.snapshot.ref).then((url) => {
          console.log(url);
          urls[2] = url;
        });
      }
    );
    }
  }

  const submit = async () => {
    console.log(urls);
    if(urls.length === 3)
    {
      await setDoc(doc(colRef, ID), {
        FrontID: urls[0],
        BackID: urls[1],
        PicWithID: urls[2],
      });
      addVerification(ID);
    }
  };
  const style = {
    padding: "10px",
    fontSize: "24px",
  };
  return (
    <>
      {!loading ? (
        <div
          style={{
            padding: "10px",
            fontSize: "30px",
          }}
        >
          {showform ? (
            <div  align="middle" >
              <div style={{fontSize: "35px"}}>
                <p>To be verified successfully Please upload 3 Pictures</p>
              </div>
              <div style={style}>1 - Picture of the ID front :</div>
              <input
                type="file"
                name="FrontID"
                onChange={handleFrontID}
                style={{
                  fontSize: "15px",
                  paddingBottom: 25,
                }}
              />
              <div style={style}>2 - Picture of the ID back :</div>
              <input
                type="file"
                onChange={handleBackID}
                style={{
                  fontSize: "15px",
                  paddingBottom: 25,
                }}
              />
              <div style={style} >3 - Picture of you with the ID :</div>
              <input
                type="file"
                onChange={handlePicWithID}
                  style={{
                  fontSize: "15px",
                  paddingBottom: 35,
                }}
              />
              <div>
                <button
                  onClick={submit}
                  style={{
                    borderWidth: 2,
                    borderColor: "rgba(0,0,0,0.2)",
                    alignItems: "center",
                    justifyContent: "center",
                    width: 500,
                    height: 100,
                    backgroundColor: "#fff",
                    borderRadius: 50,
                  }}
                >
                  Submit Form
                </button>
              </div>
            </div>
          ) : (
            <Direct ID={ID} />
          )}
        </div>
      ) : (
        <Loader />
      )}
    </>
  );
};
export default Form;

'''
'''--- src/components/storageconfig.js ---
import { initializeApp } from "firebase/app";
import { getStorage } from "firebase/storage";
import { getFirestore } from 'firebase/firestore';
import { collection } from "firebase/firestore";
// Initialize Firebase
const firebaseConfig = {

    apiKey: "AIzaSyBvcOeJbT0Sn6a40Aj2xTfzJRhDt5GnWek",
  
    authDomain: "verified-profile.firebaseapp.com",
  
    projectId: "verified-profile",

    databaseURL:"gs://verified-profile.appspot.com",
  
    storageBucket: "verified-profile.appspot.com",
  
    messagingSenderId: "811507154375",
  
    appId: "1:811507154375:web:a99a1d71c063273cc96de2",
  
    measurementId: "G-MKT1969NCS"
  
  };
 

const app = initializeApp(firebaseConfig);

// Firebase storage reference
const storage = getStorage(app);
const db = getFirestore(app);
export const colRef = collection(db, "Profiles");

export default storage;
'''
'''--- src/components/utils/Cover.js ---
import React from "react";
import PropTypes from "prop-types";
import { Button } from "react-bootstrap";

const Cover = ({ name, login, coverImg }) => {
  if ((name, login, coverImg)) {
    return (
      <div
        className="d-flex justify-content-center flex-column text-center "
        style={{ background: "#000", minHeight: "100vh" }}
      >
        <div className="mt-auto text-light mb-5">
          <div
            className=" ratio ratio-1x1 mx-auto mb-2"
            style={{ maxWidth: "320px" }}
          >
            <img src={coverImg} alt="" />
          </div>
          <h1>{name}</h1>
          <p>Please connect your wallet to create a profile.</p>
          <Button
            onClick={login}
            variant="outline-light"
            className="rounded-pill px-3 mt-3"
          >
            Connect Wallet
          </Button>
        </div>
        <p className="mt-auto text-secondary">internship project</p>
      </div>
    );
  }
  return null;
};

Cover.propTypes = {
  name: PropTypes.string,
};

Cover.defaultProps = {
  name: "",
};

export default Cover;
'''
'''--- src/components/utils/config.js ---
const CONTRACT_NAME = process.env.CONTRACT_NAME || 'verify.kareemayman.testnet'; // line 1

function environment(env) {
  switch (env) {
    case 'mainnet': // line 5
      return {
        networkId: 'mainnet',
        nodeUrl: 'https://rpc.mainnet.near.org',
        contractName: CONTRACT_NAME,
        walletUrl: 'https://wallet.near.org',
        helperUrl: 'https://helper.mainnet.near.org',
        explorerUrl: 'https://explorer.mainnet.near.org',
      };
    case 'testnet': // line 14
      return {
        networkId: 'testnet',
        nodeUrl: 'https://rpc.testnet.near.org',
        contractName: CONTRACT_NAME,
        walletUrl: 'https://wallet.testnet.near.org',
        helperUrl: 'https://helper.testnet.near.org',
        explorerUrl: 'https://explorer.testnet.near.org',
      };
    default:
      throw Error(`Unknown environment '${env}'.`);
  }
}

export default environment;

'''
'''--- src/components/utils/functions.js ---
import {parseNearAmount} from "near-api-js/lib/utils/format";
const GAS = 100000000000000;

export function isAccountVerified(ID) {
  return window.contract.isAccountVerified({ accountID :  ID} ,GAS , parseNearAmount("1"));
}

export  function createProfile() {
  return window.contract.createProfile();
}

export  function verificationType(ID) {
  return window.contract.verificationPerUser({ accountID :  ID});
}

export async function changeToPending(ID){
  await window.contract.changeToPending({accountID : ID} ,GAS); 
}

export async function verifyAccount(ID,Type){
  await window.contract.verifyAccount({accountID : ID, verification : Type } ,GAS); 
}

export async function getusersList(){
  return window.contract.getUsers(); 
}
'''
'''--- src/components/utils/loader.js ---
import React from "react";
import { Spinner } from "react-bootstrap";

const Loader = () => (
  <div className="d-flex justify-content-center">
    <Spinner animation="border" role="status" className="opacity-25">
      <span className="visually-hidden">Loading...</span>
    </Spinner>
  </div>
);
export default Loader;
'''
'''--- src/components/utils/near.js ---
import { Contract, WalletConnection, connect, keyStores } from 'near-api-js';

import environment from './config';
import { formatNearAmount } from 'near-api-js/lib/utils/format';

const nearEnv = environment('testnet');

export async function initializeContract() {
  const near = await connect(
    Object.assign(
      { deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() } },
      nearEnv
    )
  );
  window.walletConnection = new WalletConnection(near);
  window.accountId = window.walletConnection.getAccountId();
  window.contract = new Contract(
    window.walletConnection.account(),
    nearEnv.contractName,
    {
      viewMethods: [ ],
      changeMethods: ["verifyAccount", "createProfile","getUsers","changeToPending","verificationPerUser"]
    }
  );
}

export async function accountBalance() {
  return formatNearAmount(
    (await window.walletConnection.account().getAccountBalance()).total,
    2
  );
}

export async function getAccountId() {
  return window.walletConnection.getAccountId();
}

export function login() {
  window.walletConnection.requestSignIn(nearEnv.contractName);
}

export function logout() {
  window.walletConnection.signOut();
  window.location.reload();
}
'''
'''--- src/index.css ---
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

'''
'''--- src/index.js ---
import React from "react";
import ReactDOM from "react-dom";
import App from "./App";
import reportWebVitals from "./reportWebVitals";
import { initializeContract } from "./components/utils/near";

import "bootstrap";
import "bootstrap-icons/font/bootstrap-icons.css";
import "bootstrap/dist/css/bootstrap.min.css";

window.nearInitPromise = initializeContract()
  .then(() => {
    ReactDOM.render(
      <React.StrictMode>
        <App />
      </React.StrictMode>,
      document.getElementById("root")
    );
  })
  .catch(console.error);

reportWebVitals();
'''
'''--- src/logo.svg ---
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>
'''
'''--- src/reportWebVitals.js ---
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

'''
'''--- src/setupTests.js ---
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

'''