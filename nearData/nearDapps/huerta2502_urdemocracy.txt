*GitHub Repository "huerta2502/urdemocracy"*

'''--- README.md ---
# urdemocracy
====================
> Project developed for GSC ESCOM IPN NEAR Protocol blockchain course.
## urdemocracy is a software tool to help decision making process in political societies focused on a participatory democracy paradigm using near protocol blockchain.

# urdemocracy lets you:
1. Create user account
2. Create collectives
3. Register Deliberations for collectives
4. Register Resources and Results for registered Delliberations.
5. Register Followups for Deliberation Results

## Pre-requisites:
1. node.js >=12 installed (https://nodejs.org)
2. yarn installed
    ```bash
    npm install --global yarn
    ```
3. install dependencias
    ```bash
    yarn install --frozen-lockfile
    ```
4. create a new account in NEAR testnet [testnet](https://docs.near.org/docs/develop/basics/create-account#creating-a-testnet-account)   
5. install NEAR CLI
    ```bash
    yarn install --global near-cli
    ```
6. authorize NEAR CLI to access your NEAR Account
    ```bash
    near login
    ```

### Clone this repository
```bash
    git clone https://github.com/huerta2502/urdemocracy
    cd urdemocracy
```

### Install project dependecies and compile the smart contract
```bash
    yarn install
    yarn build:contract:debug
```

### Deploy the contract to the NEAR testnet
```bash
    yarn dev:deploy:contract
```

### Install frontend dependeices
```bash
    yarn install
```

### Execute frontend
```bash
    yarn start
```

'''
'''--- as-pect.config.js ---
module.exports = require('near-sdk-as/imports')
'''
'''--- asconfig.json ---
{
    "extends": "near-sdk-as/asconfig.json"
}
'''
'''--- assembly/__tests__/main.spec.ts ---
import { Contract } from "..";
import {userRegistry, collectiveRegistry, deliberationRegistry, resultRegistry, resourceRegistry, followupRegistry,
    User, Collective, Deliberation, Resource, Result, FollowUp, Timestamp } from "../model"
import { context, Context } from 'near-sdk-as';

const CONTRACT: Contract = new Contract();

describe("signin", () => {
    it('should return true', () => {
        const signin: bool = CONTRACT.signin("Carlos Huerta Garcia", "huerta2502@hotmail.com", "1234root");
        expect(signin).toBe(true);
    });
})

describe("correct login", () => {
    it('should return true', () => {
        const signin: bool = CONTRACT.signin("Carlos Huerta Garcia", "huerta2502@hotmail.com", "1234root");
        expect(signin).toBe(true);
        const login: bool = CONTRACT.login("huerta2502@hotmail.com", "1234root");
        expect(login).toBe(true);
    });
})

describe("incorrect login", () => {
    it('should return false', () => {
        const signin: bool = CONTRACT.signin("Carlos Huerta Garcia", "huerta2502@hotmail.com", "1234root");
        expect(signin).toBe(true);
        const login: bool = CONTRACT.login("huerta2502@hotmail.com", "1234admin");
        expect(login).toBe(false);
    });
})

describe("new collective", () => {
    it('should return false', () => {
        const collectiveId: string = new Collective("Proyecto TT", "Proyecto", "https://www.google.com").collectiveId;
        const newCollectiveId: string = CONTRACT.newCollective("Proyecto TT", "Proyecto", "https://www.google.com");
        expect(newCollectiveId).toBe(collectiveId);
    });
})

describe("new collective duplicated", () => {
    it('should return false', () => {
        const collectiveId: string = new Collective("Proyecto TT", "Proyecto", "https://www.google.com").collectiveId;
        const newCollectiveId: string = CONTRACT.newCollective("Proyecto TT", "Proyecto", "https://www.google.com");
        expect(newCollectiveId).toBe(collectiveId);
        const newCollectiveDuplicateId: string = CONTRACT.newCollective("Proyecto TT", "Proyecto", "https://www.google.com");
        expect(newCollectiveDuplicateId).toBe("");
    });
})

describe("add user to collective", () => {
    it('should return true', () => {
        const signin: bool = CONTRACT.signin("Carlos Huerta Garcia", "huerta2502@hotmail.com", "1234root");
        expect(signin).toBe(true);
        const collectiveId: string = new Collective("Proyecto TT", "Proyecto", "https://www.google.com").collectiveId;
        const newCollectiveId: string = CONTRACT.newCollective("Proyecto TT", "Proyecto", "https://www.google.com");
        expect(newCollectiveId).toBe(collectiveId);
        const result: bool = CONTRACT.addUser2Collective(newCollectiveId, context.sender);
        expect(result).toBe(true);
    });
})

describe("add incorrect user to collective", () => {
    it('should return false', () => {
        const signin: bool = CONTRACT.signin("Carlos Huerta Garcia", "huerta2502@hotmail.com", "1234root");
        expect(signin).toBe(true);
        const collectiveId: string = new Collective("Proyecto TT", "Proyecto", "https://www.google.com").collectiveId;
        const newCollectiveId: string = CONTRACT.newCollective("Proyecto TT", "Proyecto", "https://www.google.com");
        expect(newCollectiveId).toBe(collectiveId);
        const result: bool = CONTRACT.addUser2Collective(newCollectiveId, context.sender + "1");
        expect(result).toBe(false);
    });
})

describe("add user to incorrect collective", () => {
    it('should return false', () => {
        const signin: bool = CONTRACT.signin("Carlos Huerta Garcia", "huerta2502@hotmail.com", "1234root");
        expect(signin).toBe(true);
        const collectiveId: string = new Collective("Proyecto TT", "Proyecto", "https://www.google.com").collectiveId;
        const newCollectiveId: string = CONTRACT.newCollective("Proyecto TT", "Proyecto", "https://www.google.com");
        expect(newCollectiveId).toBe(collectiveId);
        const result: bool = CONTRACT.addUser2Collective(newCollectiveId+"1", context.sender);
        expect(result).toBe(false);
    });
})

describe("user collectives", () => {
    it('should return collectives', () => {
        const signin: bool = CONTRACT.signin("Carlos Huerta Garcia", "huerta2502@hotmail.com", "1234root");
        expect(signin).toBe(true);
        const collective : Collective = new Collective("Proyecto TT", "Proyecto", "https://www.google.com");
        const collectiveId: string = collective.collectiveId;
        const newCollectiveId: string = CONTRACT.newCollective("Proyecto TT", "Proyecto", "https://www.google.com");
        expect(newCollectiveId).toBe(collectiveId);
        const result: bool = CONTRACT.addUser2Collective(newCollectiveId, context.sender);
        expect(result).toBe(true);
        const collectives: string[] = CONTRACT.getUserCollectives(context.sender);
        const expected: Collective[] = [];
        expected.push(collective);
        expect(collectives.toString()).toBe(expected.toString());
    });
})

describe('new collective deliberation', () => {
    it('should return deliiberation', () => {
        const signin: bool = CONTRACT.signin("Carlos Huerta Garcia", "huerta2502@hotmail.com", "1234root");
        expect(signin).toBe(true);
        const collective : Collective = new Collective("Proyecto TT", "Proyecto", "https://www.google.com");
        const collectiveId: string = collective.collectiveId;
        const newCollectiveId: string = CONTRACT.newCollective("Proyecto TT", "Proyecto", "https://www.google.com");
        expect(newCollectiveId).toBe(collectiveId);
        const result: bool = CONTRACT.addUser2Collective(newCollectiveId, context.sender);
        expect(result).toBe(true);
        const collectives: string[] = CONTRACT.getUserCollectives(context.sender);
        const expcollectives: Collective[] = [];
        expcollectives.push(collective);
        expect(collectives.toString()).toBe(expcollectives.toString());
        const expDeliberation: Deliberation = new Deliberation('deliberation 1', 'number 1 deliberation', 'stream',
        collective.collectiveId, 'today', context.sender);
        const deliberation: string = CONTRACT.newCollectiveDeliberation('deliberation 1', 'number 1 deliberation',
        'stream', collective.collectiveId, 'today');
        expect(deliberation).toBe(expDeliberation.toString());
    })
})

describe('collective deliberations', () => {
    it('should return deliberations', () => {

    })
})

'''
'''--- assembly/as_types.d.ts ---
/// <reference types="near-sdk-as/assembly/as_types" />
'''
'''--- assembly/index.ts ---
/**
 * 
 */
import {
    context, // visibility into account, contract and blockchain details
    logging, // append to the execution environment log (appears in JS Developer Console when using near-api-js)
} from "near-sdk-as";
import {userRegistry, collectiveRegistry, deliberationRegistry, resultRegistry, resourceRegistry, followupRegistry,
    User, Collective, Deliberation, Resource, Result, FollowUp, Timestamp } from "./model"

@nearBindgen
export class Contract {
    signin(name: string, mail: string, password: string): bool {
        const exists: bool = userRegistry.contains(context.sender);
        if(exists) {
            logging.log("User already in network");
            return false;
        }
        userRegistry.set(context.sender, new User(context.sender, name, mail, password));
        return true;
    }

    login(mail: string, password: string): bool {
        const user: User | null = userRegistry.get(context.sender);
        if(!user) {
            logging.log("User not registered in the network");
            return false;
        }
        if(user.mail != mail || user.password != password) {
            logging.log("Wrong credentials");
            return false;
        }
        return true;
    }

    getUser(userId: string): string {
        const user: User | null = userRegistry.get(userId);
        if(!user) {
            logging.log('User not registered in the network');
            return '';
        }
        return user.toString();
    }

    newCollective(name: string, type: string, infoUrl: string): string {
        if(name == "" || type == "" || infoUrl == "") {
            logging.log("Invalid parameters");
            return "";
        }
        let collective: Collective = new Collective(name, type, infoUrl);
        const exists: bool = collectiveRegistry.contains(collective.collectiveId);
        if(exists) {
            logging.log("Collective already in network");
            return "";
        }
        collectiveRegistry.set(collective.collectiveId, collective);
        return collective.collectiveId;
    }

    addUser2Collective(collectiveId: string, userId: string): bool {
        const user: User | null = userRegistry.get(userId);
        const collective: Collective | null = collectiveRegistry.get(collectiveId);
        if(!user || !collective) {
            logging.log("Collective or user not registered in the network");
            return false;
        }
        collective.addUser(userId);
        user.addCollective(collectiveId);
        return true;
    }

    getUserCollectives(userId: string): string[] {
        const user: User | null = userRegistry.get(userId);
        if(!user) {
            logging.log("User not registered in the network");
            return [];
        }
        let collectiveIds: string[] = user.collectives;
        let collectives: string[] = [];
        let collective: Collective | null;
        for(let i = 0; i < collectiveIds.length; i++) {
            collective = collectiveRegistry.get(collectiveIds[i]);
            if(collective) collectives.push(collective.toString());
        }
        return collectives;
    }

    getCollectiveDeliberations(collectiveId: string): string[] {
        const collective: Collective | null = collectiveRegistry.get(collectiveId);
        if(!collective) {
            logging.log("Collective not registered in the network");
            return [];
        }
        let deliberationIds: string[] = collective.deliberations;
        let deliberations: string[] = [];
        let deliberation: Deliberation | null;
        for(let i = 0; i < deliberationIds.length; i++) {
            deliberation = deliberationRegistry.get(deliberationIds[i]);
            if(deliberation) deliberations.push(deliberation.toString());
        }
        return deliberations;
    }

    newCollectiveDeliberation(name: string, description: string, tool: string, collectiveId: string,
        deliberationDate: string): string {
        const collective: Collective | null = collectiveRegistry.get(collectiveId);
        if(!collective) {
            logging.log("Collective not registered in the network");
            return '';
        }
        const deliberation: Deliberation = new Deliberation(
            name, description, tool, collectiveId, deliberationDate, context.sender);
        deliberationRegistry.set(deliberation.deliberationId, deliberation);
        collective.addDeliberation(deliberation.deliberationId);
        return deliberation.toString();
    }

    newDeliberationResource(name: string, type: string, description: string, url: string, deliberationId: string,
        timestamp: Timestamp): string {
        const deliberation: Deliberation | null = deliberationRegistry.get(deliberationId);
        if(!deliberation) {
            logging.log("Deliberation not registered in the network");
            return '';
        }
        const resource: Resource = new Resource(name, type, description, url, deliberationId, timestamp, context.sender);
        resourceRegistry.set(resource.resourceId, resource);
        deliberation.addResource(resource.resourceId);
        return resource.toString();
    }

    newDeliberationResult(name: string, description: string, deliberationId: string, checkoutUrl: string,
        timestamp: Timestamp, checkerAccountId: string): string {
        const deliberation: Deliberation | null = deliberationRegistry.get(deliberationId);
        if(!deliberation) {
            logging.log("Deliberation not registered in the network");
            return '';
        }
        const result: Result = new Result(name, description, deliberationId, "", checkoutUrl, timestamp, checkerAccountId);
        resultRegistry.set(result.resultId, result);
        deliberation.addResult(result.resultId);
        return result.toString();
    }

    newResultFollopUp(status: string, monitoringUrl: string, evaluationDate: string, deliberationId: string,
        resultId: string): string {
        const result: Result | null = resultRegistry.get(resultId);
        if(!result) {
            logging.log("Result not registered in the network");
            return '';
        }
        const followup: FollowUp = new FollowUp(
            status, monitoringUrl, evaluationDate, deliberationId, resultId, context.sender);
        followupRegistry.set(followup.followUpId, followup);
        result.followUpId = followup.followUpId;
        return followup.toString();
    }

    getDeliberationResources(deliberationId: string): string[] {
        const deliberation: Deliberation | null = deliberationRegistry.get(deliberationId);
        if(!deliberation) {
            logging.log("Deliberation not registered in the network");
            return [];
        }
        let resourceIds: string[] = deliberation.resources;
        let resources: string[] = [];
        let resource: Resource | null;
        for(let i = 0; i < resourceIds.length; i++) {
            resource = resourceRegistry.get(resourceIds[i]);
            if(resource) resources.push(resource.toString());
        }
        return resources;
    }

    getDeliberationResults(deliberationId: string): string[] {
        const deliberation: Deliberation | null = deliberationRegistry.get(deliberationId);
        if(!deliberation) {
            logging.log("Deliberation not registered in the network");
            return [];
        }
        let resultIds: string[] = deliberation.results;
        let results: string[] = [];
        let result: Result | null;
        for(let i = 0; i < resultIds.length; i++) {
            result = resultRegistry.get(resultIds[i]);
            if(result) results.push(result.toString());
        }
        return results;
    }

    getFollowUp(resultId: string) : string {
        const result: Result | null = resultRegistry.get(resultId);
        if(!result) {
            logging.log("Result not registered in the network");
            return '';
        }
        let followUpId :string = result.followUpId;
        let followUp: FollowUp | null = followupRegistry.get(followUpId);
        if(!followUp) {
            logging.log("FollowUp not registered in the network");
            return '';
        }
        return followUp.toString();
    }

    setFollowUp(followUpId: string, status: string, monitoringUrl: string): string {
        const followUp: FollowUp | null = followupRegistry.get(followUpId);
        if(!followUp) {
            logging.log("FollowUp not registered in the network");
            return '';
        }
        followUp.status = status;
        followUp.monitoringUrl = monitoringUrl;
        followupRegistry.set(followUpId, followUp);
        return followUp.toString();
    }

}
'''
'''--- assembly/model.ts ---
export type Timestamp = u64;
/**
 * 
 */
import {
    PersistentUnorderedMap, // data structure that wraps storage to appear like an unordered Map
    PersistentSet, // data structure that wraps storage to appear like a Set
    math, // utility math functions for hashing using SHA and Keccak as well as pseudo-random data
} from "near-sdk-as";

/**
 * 
 */
@nearBindgen
export class User {
    privateaccountId: string;
    privatename: string;
    privatemail: string;
    privatepassword: string;
    privatecollectives: PersistentSet<string>;

    constructor( accountId: string, name: string, mail: string, password: string) {
        this.privateaccountId = accountId;
        this.privatename = name;
        this.privatemail = mail;
        this.privatepassword = password;
        this.privatecollectives = new PersistentSet<string>(accountId + "_collectives");
    }

    get accountId(): string {
        return this.privateaccountId;
    }

    set accountId(accountId: string) {
        this.privateaccountId = accountId;
    }

    get name(): string {
        return this.privatename;
    }

    set name(name: string) {
        this.privatename = name;
    }

    get mail(): string {
        return this.privatemail;
    }

    set mail(mail: string) {
        this.privatemail = mail;
    }

    get password(): string {
        return this.privatepassword;
    }

    set password(password: string) {
        this.privatepassword = password;
    }

    addCollective(collectiveId: string): void {
        this.privatecollectives.add(collectiveId);
    }

    get collectives(): Array<string> {
        return this.privatecollectives.values();
    }

    toString(): string {
        let JSONString: string = '{ "accountId": " '+ this.privateaccountId + '", "name": "' +
        this.privatename + '", "mail": \"' + this.privatemail + '", "password": "' +
        this.privatepassword + '", "collectives": [';
        let arr: string[] = this.privatecollectives.values();
        if(arr.length == 0) return JSONString + '] }'; 
        let lastIndex : i32 = arr.length - 1;
        for(let i = 0; i < arr.length; i++) JSONString += (i == lastIndex) ?
                '"' + arr[i] + '"]}' : '"' + arr[i] + '",';
        return JSONString;
    }
}

/**
 * 
 */
@nearBindgen
export class Collective {
    privatecollectiveId: string;
    privatename: string;
    privatetype: string;
    privateinfoUrl: string;
    privateusers: PersistentSet<string>;
    privatedeliberations: PersistentSet<string>;

    constructor(name: string, type: string, infoUrl: string) {
        this.privatecollectiveId = "0x";
        let tmp: Uint8Array = math.sha256(math.hash(name + type + infoUrl));
        for(let i = 0; i < tmp.length; i++) this.privatecollectiveId += tmp[i].toString(16);
        this.privatename = name;
        this.privatetype = type;
        this.privateinfoUrl = infoUrl;
        this.privateusers = new PersistentSet<string>(this.privatecollectiveId + "_users");
        this.privatedeliberations = new PersistentSet<string>(this.privatecollectiveId + "_deliberations");
    }

    get collectiveId(): string {
        return this.privatecollectiveId;
    }

    get name(): string {
        return this.privatename;
    }

    set name(name: string) {
        this.privatename = name;
    }

    get infoUrl(): string {
        return this.privateinfoUrl;
    }

    set type(type: string) {
        this.privatetype = type;
    }

    get type(): string {
        return this.privatetype;
    }

    set infoUrl(infoUrl: string) {
        this.privateinfoUrl = infoUrl;
    }

    addUser(userId: string): void {
        this.privateusers.add(userId);
    }

    get users(): Array<string> {
        return this.privateusers.values();
    }

    addDeliberation(deliberationId: string): void {
        this.privatedeliberations.add(deliberationId);
    }

    get deliberations(): Array<string> {
        return this.privatedeliberations.values();
    }

    toString(): string {
        let JSONString: string = '{"collectiveId": "'+ this.privatecollectiveId + '", "name": "' +
        this.privatename + '", "type": "' + this.privatetype + '", "infoUrl": "' +
        this.privateinfoUrl + '", "users": [';
        let arr: string[] = this.privateusers.values();
        let lastIndex : i32 = arr.length - 1;
        if(lastIndex == -1) JSONString += '], ';
        else for(let i = 0; i < arr.length; i++) JSONString += (i == lastIndex) ?
                '"' + arr[i] + '"], ' : '"' + arr[i] + '",';
        JSONString += '"deliberations": [';
        arr = this.privatedeliberations.values();
        lastIndex = arr.length - 1;
        if(lastIndex == -1) return JSONString + '] }';
        for(let i = 0; i < arr.length; i++) JSONString += (i == lastIndex) ?
                '"' + arr[i] + '"]}': '"' + arr[i] + '",';
        return JSONString;
    }
}

/**
 * 
 */
@nearBindgen
export class Deliberation {
    privatedeliberationId: string;
    privatename: string;
    privatetopics: PersistentSet<string>;
    privatedescription: string;
    privatetool: string;
    privatecollectiveId: string;
    privateresources: PersistentSet<string>;
    privateresults: PersistentSet<string>;
    privatedeliberationDate: string;
    privatehostAccountId: string;

    constructor(name: string, description: string, tool: string, collectiveId: string,
            deliberationDate: string, hostAccountId: string) {
        this.privatedeliberationId = "0x";
        let tmp: Uint8Array = math.sha256(math.hash(collectiveId + deliberationDate + hostAccountId));
        for(let i = 0; i < tmp.length; i++) this.privatedeliberationId += tmp[i].toString(16);
        this.privatename = name;
        this.privatetopics = new PersistentSet<string>(this.privatedeliberationId + "_topics");
        this.privatedescription = description;
        this.privatetool = tool;
        this.privatecollectiveId = collectiveId;
        this.privateresources = new PersistentSet<string>(this.privatedeliberationId + "_resources");
        this.privateresults = new PersistentSet<string>(this.privatedeliberationId + "_results");
        this.privatedeliberationDate = deliberationDate;
        this.privatehostAccountId = hostAccountId;
    }

    get deliberationId(): string {
        return this.privatedeliberationId;
    }

    get name(): string {
        return this.privatename;
    }

    set name(name: string) {
        this.privatename = name;
    }

    get topics(): Array<string> {
        return this.privatetopics.values();
    }

    addTopic(topic: string): void {
        this.privatetopics.add(topic);
    }

    get description(): string {
        return this.privatedescription;
    }

    set description(description: string) {
        this.privatedescription = description;
    }

    get tool(): string {
        return this.privatetool;
    }

    set tool(tool: string) {
        this.privatetool = tool;
    }

    get collectiveId(): string {
        return this.privatecollectiveId;
    }

    set collectiveId(collectiveId: string) {
        this.privatecollectiveId = collectiveId;
    }

    get resources(): Array<string> {
        return this.privateresources.values();
    }

    addResource(resource: string): void {
        this.privateresources.add(resource);
    }

    get results(): Array<string> {
        return this.privateresults.values();
    }

    addResult(result: string): void {
        this.privateresults.add(result);
    }

    get deliberationDate(): string {
        return this.privatedeliberationDate;
    }

    set deliberationDate(deliberationDate: string) {
        this.privatedeliberationDate = deliberationDate;
    }

    get hostAccountId(): string {
        return this.privatehostAccountId;
    }

    set hostAccountId(hostAccountId: string) {
        this.privatehostAccountId = hostAccountId;
    }

    toString(): string {
        let JSONString: string = '{"deliberatioinId":'+ this.privatedeliberationId + ', "name": "' +
        this.privatename + '", "topics": [';
        let arr: string[] = this.privatetopics.values();
        let lastIndex : i32 = arr.length - 1;
        if(lastIndex == -1) JSONString += '], ';
        else for(let i = 0; i < arr.length; i++) JSONString += (i == lastIndex) ?
                '"' + arr[i] + '"], ' : '"' + arr[i] + '",';
        JSONString += '"description": "' + this.privatedescription + '", "tool": "' + this.privatetool +
        '", "collectiveId": "' + this.privatecollectiveId + '", "resources": [';
        arr = this.privateresources.values();
        lastIndex = arr.length - 1;
        if(lastIndex == -1) JSONString += '], ';
        else for(let i = 0; i < arr.length; i++) JSONString += (i == lastIndex) ?
                '"' + arr[i] + '"], ' : '"' + arr[i] + '",';
        JSONString += '"results": [';
        arr = this.privateresults.values();
        lastIndex = arr.length - 1;
        if(lastIndex == -1) JSONString += '], ';
        else for(let i = 0; i < arr.length; i++) JSONString += (i == lastIndex) ?
                '"' + arr[i] + '"], ' : '"' + arr[i] + '",';
        JSONString += '"deliberationDate": "' + this.privatedeliberationDate + '", "hostAccountId": "' +
        this.privatehostAccountId + '"}';
        return JSONString;
    }
}

/**
 * 
 */
@nearBindgen
export class Resource {
    privateresourceId: string;
    privatename: string;
    privatetype: string;
    privatedescription: string;
    privateurl: string;
    privatedeliberationId: string;
    privatetopics: PersistentSet<string>;
    privatetimestamp: Timestamp;
    privateuploaderAccountId: string;

    constructor(name: string, type: string, description: string, url: string, deliberationId: string, timestamp: Timestamp, uploaderAccountId: string) {
        this.privateresourceId = "0x";
        let tmp: Uint8Array = math.sha256(math.hash(url + deliberationId + timestamp.toString() + uploaderAccountId));
        for(let i = 0; i < tmp.length; i++) this.privateresourceId += tmp[i].toString(16);
        this.privatename = name;
        this.privatetype = type;
        this.privatedescription = description;
        this.privateurl = url;
        this.privatedeliberationId = deliberationId;
        this.privatetopics = new PersistentSet<string>(this.privateresourceId + "_topics");
        this.privatetimestamp = timestamp;
        this.privateuploaderAccountId = uploaderAccountId;
    }

    get resourceId(): string {
        return this.privateresourceId;
    }

    get name(): string {
        return this.privatename;
    }

    set name(name: string) {
        this.privatename = name;
    }

    get type(): string {
        return this.privatetype;
    }

    set type(type: string) {
        this.privatetype = type;
    }

    get description(): string {
        return this.privatedescription;
    }

    set description(description: string) {
        this.privatedescription = description;
    }

    get url(): string {
        return this.privateurl;
    }

    set url(url: string) {
        this.privateurl = url;
    }

    get deliberationId(): string {
        return this.privatedeliberationId;
    }

    set deliberationId(deliberationId: string) {
        this.privatedeliberationId = deliberationId;
    }

    get topics(): Array<string> {
        return this.privatetopics.values();
    }

    addTopic(topic: string): void {
        this.privatetopics.add(topic);
    }

    get timestamp(): Timestamp {
        return this.privatetimestamp;
    }

    set timestamp(timestamp: Timestamp) {
        this.privatetimestamp = timestamp;
    }

    get uploaderAccountId(): string {
        return this.privateuploaderAccountId;
    }

    set uploaderAccountId(uploaderAccountId: string) {
        this.privateuploaderAccountId = uploaderAccountId;
    }

    toString(): string {
        let JSONString = '{"resourceId": "'+ this.privateresourceId + '", "name": "' + this.privatename +
        '", "type": "' + this.privatetype + '", "description": "' + this.privatedescription + '", "url": "' +
        this.privateurl + '", "deliberationId": "' + this.privatedeliberationId + '", "topics": [';
        let arr: string[] = this.privatetopics.values();
        let lastIndex : i32 = arr.length - 1;
        if(lastIndex == -1) JSONString += '], ';
        else for(let i = 0; i < arr.length; i++) JSONString += (i == lastIndex) ?
                '"' + arr[i] + '"], ' : '"' + arr[i] + '",';
        JSONString += '"timestamp": "' + this.privatetimestamp.toString() + '", "uploaderAccountId": "' +
        this.privateuploaderAccountId + '"}';
        return JSONString;
    }
}

/**
 * 
 */
@nearBindgen
export class Result {
    privateresultId: string;
    privatename: string;
    privatedescription: string;
    privatedeliberationId: string;
    privatecheckoutUrl: string;
    privatetimestamp: Timestamp;
    privatefollowUpId: string;
    privatecheckerAccountId: string;
    
    constructor(name: string, description: string, deliberationId: string, followUpId: string, checkoutUrl: string, timestamp: Timestamp, checkerAccountId: string) {
        this.privateresultId = "0x";
        let tmp: Uint8Array = math.sha256(math.hash(deliberationId + followUpId + timestamp.toString() + checkerAccountId));
        for(let i = 0; i < tmp.length; i++) this.privateresultId += tmp[i].toString(16);
        this.privatename = name;
        this.privatedescription = description;
        this.privatedeliberationId = deliberationId;
        this.privatefollowUpId = followUpId;
        this.privatecheckoutUrl = checkoutUrl;
        this.privatetimestamp = timestamp;
        this.privatecheckerAccountId = checkerAccountId;
    }

    get resultId(): string {
        return this.privateresultId;
    }

    get name(): string {
        return this.privatename;
    }

    set name(name: string) {
        this.privatename = name;
    }

    get description(): string {
        return this.privatedescription;
    }

    set description(description: string) {
        this.privatedescription = description;
    }

    get deliberationId(): string {
        return this.privatedeliberationId;
    }

    set deliberationId(deliberationId: string) {
        this.privatedeliberationId = deliberationId;
    }

    get followUpId(): string {
        return this.privatefollowUpId;
    }

    set followUpId(followUpId: string) {
        this.privatefollowUpId = followUpId;
    }

    get checkoutUrl(): string {
        return this.privatecheckoutUrl;
    }

    set checkoutUrl(checkoutUrl: string) {
        this.privatecheckoutUrl = checkoutUrl;
    }

    get timestamp(): Timestamp {
        return this.privatetimestamp;
    }

    set timestamp(timestamp: Timestamp) {
        this.privatetimestamp = timestamp;
    }

    get checkerAccountId(): string {
        return this.privatecheckerAccountId;
    }

    set checkerAccountId(checkerAccountId: string) {
        this.privatecheckerAccountId = checkerAccountId;
    }

    toString(): string {
        let JSONString = '{"resultId": "'+ this.privateresultId + '", "name": "' + this.privatename +
        '", "description": "' + this.privatedescription + '", "deliberationId": "' + this.privatedeliberationId +
        '", "followUpId": "' + this.privatefollowUpId + '", "checkoutUrl": "' + this.privatecheckoutUrl +
        '", "timestamp": "' + this.privatetimestamp.toString() + '", "checkerAccountId": "' + this.privatecheckerAccountId + '"}';
        return JSONString;
    }
}

/**
 * 
 */
@nearBindgen
export class FollowUp {
    privatefollowUpId: string;
    privatestatus: string;
    privatemonitoringUrl: string;
    privateevaluationDate: string;
    privatedeliberationId: string;
    privateresultId: string;
    privatemonitorAccountId: string;

    constructor(status: string, monitoringUrl: string, evaluationDate: string, deliberationId: string, resultId: string, monitorAccountId: string) {
        this.privatefollowUpId = "0x";
        let tmp: Uint8Array = math.sha256(math.hash(deliberationId + resultId + evaluationDate + monitorAccountId));
        for(let i = 0; i < tmp.length; i++) this.privatefollowUpId += tmp[i].toString(16);
        this.privatestatus = status;
        this.privatemonitoringUrl = monitoringUrl;
        this.privateevaluationDate = evaluationDate;
        this.privatedeliberationId = deliberationId;
        this.privateresultId = resultId;
        this.privatemonitorAccountId = monitorAccountId;
    }

    get followUpId(): string {
        return this.privatefollowUpId;
    }

    get status(): string {
        return this.privatestatus;
    }

    set status(status: string) {
        this.privatestatus = status;
    }

    get monitoringUrl(): string {
        return this.privatemonitoringUrl;
    }

    set monitoringUrl(monitoringUrl: string) {
        this.privatemonitoringUrl = monitoringUrl;
    }

    get evaluationDate(): string {
        return this.privateevaluationDate;
    }

    set evaluationDate(evaluationDate: string) {
        this.privateevaluationDate = evaluationDate;
    }

    get deliberationId(): string {
        return this.privatedeliberationId;
    }

    set deliberationId(deliberationId: string) {
        this.privatedeliberationId = deliberationId;
    }

    get resultId(): string {
        return this.privateresultId;
    }

    set resultId(resultId: string) {
        this.privateresultId = resultId;
    }

    get monitorAccountId(): string {
        return this.privatemonitorAccountId;
    }

    set monitorAccountId(monitorAccountId: string) {
        this.privatemonitorAccountId = monitorAccountId;
    }

    toString(): string {
        let JSONString = '{"followUpId": "'+ this.privatefollowUpId + '", "status": "' + this.privatestatus +
        '", "monitoringUrl": "' + this.privatemonitoringUrl + '", "evaluationDate": "' + this.privateevaluationDate +
        '", "deliberationId": "' + this.privatedeliberationId + '", "resultId": "' + this.privateresultId +
        '", "monitorAccountId": "' + this.privatemonitorAccountId + '"}';
        return JSONString;
    }
}

export let userRegistry = new PersistentUnorderedMap<string, User>("user_registry");
export let collectiveRegistry = new PersistentUnorderedMap<string, Collective>("collective_registry");
export let deliberationRegistry = new PersistentUnorderedMap<string, Deliberation>("deliberation_registry");
export let resultRegistry = new PersistentUnorderedMap<string, Result>("result_registry");
export let followupRegistry = new PersistentUnorderedMap<string, FollowUp>("followup_registry");
export let resourceRegistry = new PersistentUnorderedMap<string, Resource>("resource_registry");

'''
'''--- assembly/tsconfig.json ---
{
    "extends": "assemblyscript/std/assembly.json",
    "include": [
        "./**/*.ts"
    ]
}
'''
'''--- compile.js ---
// This file does two things:
//
// 1. Compile the AssemblyScript contract using the scripts in package.json
//    (see buildCmd below). This will create a wasm file in the 'build' folder.
// 2. Create a symbolic link (symlink) to the generated wasm file in the root
//    project's `out` folder, for easy use with near-cli.
//
// First, import some helper libraries. `shelljs` is included in the
// devDependencies of the root project, which is why it's available here. It
// makes it easy to use *NIX-style scripting (which works on Linux distros,
// macOS, and Unix systems) on Windows as well.
const sh = require('shelljs')

// Figure out which directory the user called this script from, which we'll use
// later to set up the symlink.
const calledFromDir = sh.pwd().toString()

// For the duration of this script, we want to operate from within the
// AssemblyScript project's folder. Let's change into that directory.
sh.cd(__dirname)

// You can call this script with `node compile.js` or `node compile.js --debug`.
// Let's set a variable to track whether `--debug` was used.
const debug = process.argv.pop() === '--debug'

// Use the correct build command based on the `--debug` flag
const buildCmd = debug ?
    'npm run build:debug' :
    'npm run build'

// Execute the build command, storing exit code for later use
const { code } = sh.exec(buildCmd)

// Assuming this is compiled from the root project directory, link the compiled
// contract to the `out` folder –
// When running commands like `near deploy`, near-cli looks for a contract at
// <CURRENT_DIRECTORY>/out/main.wasm
if (code === 0 && calledFromDir !== __dirname) {
    const linkDir = `${calledFromDir}/out`
    const link = `${calledFromDir}/out/main.wasm`
    const packageName = require(`${__dirname}/package.json`).name
    const outFile = `./build/${debug ? 'debug' : 'release'}/${packageName}.wasm`
    sh.mkdir('-p', linkDir)
    sh.rm('-f', link)
        //fixes #831: copy-update instead of linking .- sometimes sh.ln does not work on Windows
    sh.cp('-u', outFile, link)
}

// exit script with the same code as the build command
process.exit(code)
'''
'''--- concept.txt ---
Carlos Huerta García
A software tool to help decision making process in political societies focused on a participatory democracy paradigm
using near protocol blockchain.

Introduction:
    Democratic axes -> informative, deliberative y participatory
    Inform -> Organizational, financial, regulatory, scheduling an contact information.
    Deliberate -> Discussion, debates, forums, propositions
    Participate -> consulations, votes
    Extra: Evaluate -> decision's evaluation

urdemocracy:
    informative axis: Information resource
    Resource
        resource name: string
        resource type: string
        topics: collection<string>
        description: string
        resource link:  string
        resource timestamp: timestamp
        deliberation: Deliberation
        who is uploading: user
    deliberative axis: Deliberation planning
    Deliberation
        deliberation name: string
        topics: collection<string>
        description: string
        tool: string
        resources: collection<resource>
        results: collection<result>
        deliberation date: date
        who is hosting: user
    participatory axis: Deliberaton results
    Result
        result: string
        description:  string
        result checkout link: string
        deliberation: deliberation
        agreed result: result
        result timestamp: timestamp
        who is reporting: user
    Evaluation extra:  Deliberation results follow up
    Followup
        status: string
        monitoring/evaluation link: string
        evaluation date: date
        deliberation: Deliberation
        result: Result
        who is following up: user
    User
        user name:  string
        colectives: collection<colective>
        mail: string
    Collective
        collective name: string
        collective info link: string
        users: collection<users>

Constraints:
    User can be a part of multiple collectives
    Resource, Followup and Results depend on a existing Deliberation
    Multiple  Resources, and  Results can depend on a existing Deliberation.
    Only one followup can depend on  a existing result.

'''
'''--- neardev/dev-account.env ---
CONTRACT_NAME=dev-1649010639406-39669096907820
'''
'''--- package.json ---
{
    "name": "urdemocracy",
    "version": "1.0.0",
    "description": "urdemocracy is a software tool to help decision making process in political societies focused on a participatory democracy paradigm",
    "main": "compile.js",
    "scripts": {
        "build": "asb",
        "build:debug": "asb --target debug",
        "test": "asp --nologo",
        "start": "env-cmd -f ./neardev/dev-account.env parcel src/*.html"
    },
    "repository": {
        "type": "git",
        "url": "git+https://github.com/huerta2502/urdemocracy.git"
    },
    "keywords": [
        "participatory",
        "democracy",
        "blockchain",
        "near",
        "protocol"
    ],
    "author": "huerta2502",
    "license": "MIT",
    "bugs": {
        "url": "https://github.com/huerta2502/urdemocracy/issues"
    },
    "homepage": "https://github.com/huerta2502/urdemocracy#readme",
    "dependencies": {
        "near-api-js": "^0.43.1",
        "regenerator-runtime": "^0.13.9"
    },
    "devDependencies": {
        "parcel-bundler": "~1.12.5",
        "near-sdk-as": "^3.2.3",
        "env-cmd": "^10.1.0",
        "@types/jest": "^27.4.1",
        "shelljs": "^0.8.5"
    }
}
'''
'''--- src/index.html ---
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
    <title>urdemocracy</title>
</head>

<body>
    <header class="container d-flex flex-wrap align-items-center justify-content-center justify-content-md-between py-3 mb-4">
        <a href="/" class="d-flex align-items-center col-md-3 mb-2 mb-md-0 text-dark text-decoration-none">
            <span class="fs-4">urdemocracy</span>
        </a>

        <ul class="nav col-12 col-md-auto mb-2 justify-content-center mb-md-0">
            <li>
                <a href="https://www.github.com/huerta2502/urdemocracy" class="nav-link px-2 link-dark">
                    <svg class="bi me-2" xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-github" viewBox="0 0 16 16">
                    <path d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.012 8.012 0 0 0 16 8c0-4.42-3.58-8-8-8z"/>
                </svg> Github
                </a>
            </li>
            <li>
                <a href="https://www.github.com/huerta2502" class="nav-link px-2 link-dark">
                    <svg class="bi me-2" xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-file-person" viewBox="0 0 16 16">
                        <path d="M12 1a1 1 0 0 1 1 1v10.755S12 11 8 11s-5 1.755-5 1.755V2a1 1 0 0 1 1-1h8zM4 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H4z"/>
                        <path d="M8 10a3 3 0 1 0 0-6 3 3 0 0 0 0 6z"/>
                    </svg> Author
                </a>
            </li>
            <li>
                <a href="https://www.near.org" class="nav-link px-2 link-dark">
                    <svg class="bi me-2" height="20" viewBox="0 0 76 20" width="76" xmlns="http://www.w3.org/2000/svg" fill="currentColor">
                    <path d="m38.0449 4.17778v11.66662c0 .0889-.0666.1778-.1777.1778h-1.2223c-.5555 0-1.0888-.2889-1.4-.7555l-5.5111-8.51114.1778 4.24444v4.8667c0 .0889-.0667.1777-.1778.1777h-1.6c-.0889 0-.1777-.0666-.1777-.1777v-11.68892c0-.08889.0666-.17778.1777-.17778h1.2c.5556 0 1.0889.28889 1.4.75556l5.5111 8.48884-.1777-4.2444v-4.82222c0-.08889.0666-.17778.1777-.17778h1.6c.1334 0 .2.06667.2.17778z"></path>
                    <path d="m54.444 16h-1.6889c-.1111 0-.2-.1111-.1555-.2222l4.4889-11.62224c.0444-.08889.1333-.15556.2222-.15556h2.1333c.1111 0 .2.06667.2223.15556l4.5111 11.62224c.0444.1111-.0445.2222-.1556.2222h-1.6889c-.0666 0-.1333-.0444-.1555-.1111l-3.6223-9.55557c-.0444-.13333-.2666-.13333-.3111 0l-3.6222 9.55557c-.0444.0667-.1111.1111-.1778.1111z"></path>
                    <path d="m75.9557 15.7333-3.3778-4.3111c1.9111-.3555 3.0222-1.64442 3.0222-3.6222 0-2.26667-1.4667-3.8-4.0889-3.8h-4.7111c-.1333 0-.2444.11111-.2444.24444 0 .88889.7111 1.6 1.6 1.6h3.1777c1.5778 0 2.3334.8 2.3334 1.97778s-.7334 1.97778-2.3334 1.97778h-4.4889c-.1333 0-.2444.11111-.2444.2444v5.7778c0 .0889.0667.1778.1778.1778h1.6c.0889 0 .1778-.0667.1778-.1778v-4.2889h1.8444l2.9333 3.8223c.3111.4222.8.6444 1.3334.6444h1.2222c.0889 0 .1555-.1556.0667-.2667z"></path>
                    <path d="m49.3776 4h-7.4444c-.1334 0-.2223.08889-.2223.22222 0 .88889.7334 1.62222 1.6223 1.62222h6.0444c.0889 0 .1778-.06666.1778-.17777v-1.51111c-.0222-.08889-.0889-.15556-.1778-.15556zm0 10.1556h-5.5555c-.0889 0-.1778-.0667-.1778-.1778v-3c0-.0889.0666-.1778.1778-.1778h5.1333c.0889 0 .1778-.0667.1778-.1778v-1.51109c0-.08889-.0667-.17778-.1778-.17778h-7c-.1333 0-.2445.11111-.2445.24445v6.55552c0 .1334.1112.2445.2445.2445h7.4222c.0889 0 .1778-.0667.1778-.1778v-1.5111c-.0222-.0667-.0889-.1333-.1778-.1333z"></path>
                    <path d="m16.0444 1.02222-4.1777 6.2c-.2889.42222.2666.93334.6666.57778l4.1111-3.57778c.1112-.08889.2667-.02222.2667.13334v11.17774c0 .1556-.2.2223-.2889.1111l-12.44442-14.888844c-.4-.488889-.97778-.755556-1.62222-.755556h-.44445c-1.155554 0-2.11111.955556-2.11111 2.13333v15.73337c0 1.1777.955556 2.1333 2.13333 2.1333.73334 0 1.42223-.3778 1.82223-1.0222l4.17777-6.2c.28889-.4222-.26666-.9334-.66666-.5778l-4.11111 3.5556c-.11112.0888-.26667.0222-.26667-.1334v-11.15553c0-.15556.2-.22223.28889-.11111l12.44442 14.88884c.4.4889 1 .7556 1.6222.7556h.4445c1.1778 0 2.1333-.9556 2.1333-2.1333v-15.73337c-.0222-1.177774-.9778-2.13333-2.1555-2.13333-.7334 0-1.4223.377778-1.8223 1.02222z"></path>
                </svg>
                </a>
            </li>
        </ul>

        <div class="col-md-3 text-end">
            <button id="signout" type="button" class="btn btn-secondary">Sign out your NEAR Wallet</button>
            <button type="button" class="btn btn-outline-primary me-2" data-bs-toggle="modal" data-bs-target="#signinModal">Sign in</button>
            <!-- Modal -->
            <div class="modal fade" id="signinModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content rounded-5 shadow">
                        <div class="modal-header p-5 pb-4 border-bottom-0">
                            <h2 class="fw-bold mb-0">Sign in to your account</h2>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body p-5 pt-0">
                            <form class="">
                                <div id="signinNEAR">
                                    <h2 class="fs-5 fw-bold mb-3">Create or import existing NEAR Account</h2>
                                    <button id="signinNEARbtn" class="w-100 py-2 mb-2 btn btn-outline-secondary rounded-4" type="button">
                                        <svg class="bi me-2" height="20" viewBox="0 0 76 20" width="76" xmlns="http://www.w3.org/2000/svg" fill="currentColor">
                                            <path d="m38.0449 4.17778v11.66662c0 .0889-.0666.1778-.1777.1778h-1.2223c-.5555 0-1.0888-.2889-1.4-.7555l-5.5111-8.51114.1778 4.24444v4.8667c0 .0889-.0667.1777-.1778.1777h-1.6c-.0889 0-.1777-.0666-.1777-.1777v-11.68892c0-.08889.0666-.17778.1777-.17778h1.2c.5556 0 1.0889.28889 1.4.75556l5.5111 8.48884-.1777-4.2444v-4.82222c0-.08889.0666-.17778.1777-.17778h1.6c.1334 0 .2.06667.2.17778z"></path>
                                            <path d="m54.444 16h-1.6889c-.1111 0-.2-.1111-.1555-.2222l4.4889-11.62224c.0444-.08889.1333-.15556.2222-.15556h2.1333c.1111 0 .2.06667.2223.15556l4.5111 11.62224c.0444.1111-.0445.2222-.1556.2222h-1.6889c-.0666 0-.1333-.0444-.1555-.1111l-3.6223-9.55557c-.0444-.13333-.2666-.13333-.3111 0l-3.6222 9.55557c-.0444.0667-.1111.1111-.1778.1111z"></path>
                                            <path d="m75.9557 15.7333-3.3778-4.3111c1.9111-.3555 3.0222-1.64442 3.0222-3.6222 0-2.26667-1.4667-3.8-4.0889-3.8h-4.7111c-.1333 0-.2444.11111-.2444.24444 0 .88889.7111 1.6 1.6 1.6h3.1777c1.5778 0 2.3334.8 2.3334 1.97778s-.7334 1.97778-2.3334 1.97778h-4.4889c-.1333 0-.2444.11111-.2444.2444v5.7778c0 .0889.0667.1778.1778.1778h1.6c.0889 0 .1778-.0667.1778-.1778v-4.2889h1.8444l2.9333 3.8223c.3111.4222.8.6444 1.3334.6444h1.2222c.0889 0 .1555-.1556.0667-.2667z"></path>
                                            <path d="m49.3776 4h-7.4444c-.1334 0-.2223.08889-.2223.22222 0 .88889.7334 1.62222 1.6223 1.62222h6.0444c.0889 0 .1778-.06666.1778-.17777v-1.51111c-.0222-.08889-.0889-.15556-.1778-.15556zm0 10.1556h-5.5555c-.0889 0-.1778-.0667-.1778-.1778v-3c0-.0889.0666-.1778.1778-.1778h5.1333c.0889 0 .1778-.0667.1778-.1778v-1.51109c0-.08889-.0667-.17778-.1778-.17778h-7c-.1333 0-.2445.11111-.2445.24445v6.55552c0 .1334.1112.2445.2445.2445h7.4222c.0889 0 .1778-.0667.1778-.1778v-1.5111c-.0222-.0667-.0889-.1333-.1778-.1333z"></path>
                                            <path d="m16.0444 1.02222-4.1777 6.2c-.2889.42222.2666.93334.6666.57778l4.1111-3.57778c.1112-.08889.2667-.02222.2667.13334v11.17774c0 .1556-.2.2223-.2889.1111l-12.44442-14.888844c-.4-.488889-.97778-.755556-1.62222-.755556h-.44445c-1.155554 0-2.11111.955556-2.11111 2.13333v15.73337c0 1.1777.955556 2.1333 2.13333 2.1333.73334 0 1.42223-.3778 1.82223-1.0222l4.17777-6.2c.28889-.4222-.26666-.9334-.66666-.5778l-4.11111 3.5556c-.11112.0888-.26667.0222-.26667-.1334v-11.15553c0-.15556.2-.22223.28889-.11111l12.44442 14.88884c.4.4889 1 .7556 1.6222.7556h.4445c1.1778 0 2.1333-.9556 2.1333-2.1333v-15.73337c-.0222-1.177774-.9778-2.13333-2.1555-2.13333-.7334 0-1.4223.377778-1.8223 1.02222z"></path>
                                        </svg>Account
                                    </button>
                                    <hr class="my-4">
                                </div>
                                <div class="form-floating mb-3">
                                    <input type="email" class="form-control rounded-4" id="signinEmail" placeholder="name@example.com">
                                    <label for="signinEmail">Email address</label>
                                </div>
                                <div class="form-floating mb-3">
                                    <input type="password" class="form-control rounded-4" id="signinPassword" placeholder="Password" minlength="8">
                                    <label for="signinPassword">Password</label>
                                </div>
                                <button id="signinBtn" class="w-100 mb-2 btn btn-lg rounded-4 btn-primary" type="submit">
                                    Sign in
                                    <span id="signinSpinner" class="spinner-border spinner-border-sm" style="width: 1em;height: 1em;display: none;" role="status" aria-hidden="true"></span>
                                </button>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
            <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#signupModal">Sign up</button>
            <!-- Modal -->
            <div class="modal fade" id="signupModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content rounded-5 shadow">
                        <div class="modal-header p-5 pb-4 border-bottom-0">
                            <!-- <h5 class="modal-title">Modal title</h5> -->
                            <h2 class="fw-bold mb-0">Sign up for free</h2>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body p-5 pt-0">
                            <form class="">
                                <div id="signupNEAR">
                                    <h2 class="fs-5 fw-bold mb-3">Create or import existing NEAR Account</h2>
                                    <button id="signupNEARbtn" class="w-100 py-2 mb-2 btn btn-outline-secondary rounded-4" type="button">
                                        <svg class="bi me-2" height="20" viewBox="0 0 76 20" width="76" xmlns="http://www.w3.org/2000/svg" fill="currentColor">
                                            <path d="m38.0449 4.17778v11.66662c0 .0889-.0666.1778-.1777.1778h-1.2223c-.5555 0-1.0888-.2889-1.4-.7555l-5.5111-8.51114.1778 4.24444v4.8667c0 .0889-.0667.1777-.1778.1777h-1.6c-.0889 0-.1777-.0666-.1777-.1777v-11.68892c0-.08889.0666-.17778.1777-.17778h1.2c.5556 0 1.0889.28889 1.4.75556l5.5111 8.48884-.1777-4.2444v-4.82222c0-.08889.0666-.17778.1777-.17778h1.6c.1334 0 .2.06667.2.17778z"></path>
                                            <path d="m54.444 16h-1.6889c-.1111 0-.2-.1111-.1555-.2222l4.4889-11.62224c.0444-.08889.1333-.15556.2222-.15556h2.1333c.1111 0 .2.06667.2223.15556l4.5111 11.62224c.0444.1111-.0445.2222-.1556.2222h-1.6889c-.0666 0-.1333-.0444-.1555-.1111l-3.6223-9.55557c-.0444-.13333-.2666-.13333-.3111 0l-3.6222 9.55557c-.0444.0667-.1111.1111-.1778.1111z"></path>
                                            <path d="m75.9557 15.7333-3.3778-4.3111c1.9111-.3555 3.0222-1.64442 3.0222-3.6222 0-2.26667-1.4667-3.8-4.0889-3.8h-4.7111c-.1333 0-.2444.11111-.2444.24444 0 .88889.7111 1.6 1.6 1.6h3.1777c1.5778 0 2.3334.8 2.3334 1.97778s-.7334 1.97778-2.3334 1.97778h-4.4889c-.1333 0-.2444.11111-.2444.2444v5.7778c0 .0889.0667.1778.1778.1778h1.6c.0889 0 .1778-.0667.1778-.1778v-4.2889h1.8444l2.9333 3.8223c.3111.4222.8.6444 1.3334.6444h1.2222c.0889 0 .1555-.1556.0667-.2667z"></path>
                                            <path d="m49.3776 4h-7.4444c-.1334 0-.2223.08889-.2223.22222 0 .88889.7334 1.62222 1.6223 1.62222h6.0444c.0889 0 .1778-.06666.1778-.17777v-1.51111c-.0222-.08889-.0889-.15556-.1778-.15556zm0 10.1556h-5.5555c-.0889 0-.1778-.0667-.1778-.1778v-3c0-.0889.0666-.1778.1778-.1778h5.1333c.0889 0 .1778-.0667.1778-.1778v-1.51109c0-.08889-.0667-.17778-.1778-.17778h-7c-.1333 0-.2445.11111-.2445.24445v6.55552c0 .1334.1112.2445.2445.2445h7.4222c.0889 0 .1778-.0667.1778-.1778v-1.5111c-.0222-.0667-.0889-.1333-.1778-.1333z"></path>
                                            <path d="m16.0444 1.02222-4.1777 6.2c-.2889.42222.2666.93334.6666.57778l4.1111-3.57778c.1112-.08889.2667-.02222.2667.13334v11.17774c0 .1556-.2.2223-.2889.1111l-12.44442-14.888844c-.4-.488889-.97778-.755556-1.62222-.755556h-.44445c-1.155554 0-2.11111.955556-2.11111 2.13333v15.73337c0 1.1777.955556 2.1333 2.13333 2.1333.73334 0 1.42223-.3778 1.82223-1.0222l4.17777-6.2c.28889-.4222-.26666-.9334-.66666-.5778l-4.11111 3.5556c-.11112.0888-.26667.0222-.26667-.1334v-11.15553c0-.15556.2-.22223.28889-.11111l12.44442 14.88884c.4.4889 1 .7556 1.6222.7556h.4445c1.1778 0 2.1333-.9556 2.1333-2.1333v-15.73337c-.0222-1.177774-.9778-2.13333-2.1555-2.13333-.7334 0-1.4223.377778-1.8223 1.02222z"></path>
                                        </svg>Account
                                    </button>
                                    <hr class="my-4">
                                </div>
                                <div class="form-floating mb-3">
                                    <input type="text" class="form-control rounded-4" id="signupName" placeholder="Name">
                                    <label for="signupName">Name</label>
                                </div>
                                <div class="form-floating mb-3">
                                    <input type="email" class="form-control rounded-4" id="signupEmail" placeholder="name@example.com">
                                    <label for="signupEmail">Email address</label>
                                </div>
                                <div class="form-floating mb-3">
                                    <input type="password" class="form-control rounded-4" id="signupPassword" placeholder="Password" minlength="8">
                                    <label for="signupPassword">Password</label>
                                </div>
                                <button id="signupBtn" class="w-100 mb-2 btn btn-lg rounded-4 btn-primary" type="submit">
                                    Sign up
                                    <span id="signupSpinner" class="spinner-border spinner-border-sm" style="width: 1em;height: 1em;display: none;" role="status" aria-hidden="true"></span>
                                </button>
                                <small class="text-muted">By clicking Sign up, you agree to the terms of use.</small>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </header>
    <main>
        <div class="px-4 py-5 my-5 text-center">
            <h1 class="display-5 fw-bold">urdemocracy</h1>
            <div class="col-lg-6 mx-auto">
                <p class="lead mb-4">
                    urdemocracy is a software tool to help decision making process in political societies focused on a participatory democracy paradigm using near protocol blockchain.
                </p>
            </div>
        </div>
        <div class="container px-4">
            <h1 class="pb-2">Participatory democracy axes</h1>
            <div class="row g-4 py-5 row-cols-1 row-cols-lg-3">
                <div class="col d-flex align-items-start">
                    <div class="icon-square bg-light text-dark flex-shrink-0 me-3">
                        <svg class="bi" xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" fill="currentColor" class="bi bi-info-square" viewBox="0 0 16 16">
                        <path d="M14 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h12zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2z"/>
                        <path d="m8.93 6.588-2.29.287-.082.38.45.083c.294.07.352.176.288.469l-.738 3.468c-.194.897.105 1.319.808 1.319.545 0 1.178-.252 1.465-.598l.088-.416c-.2.176-.492.246-.686.246-.275 0-.375-.193-.304-.533L8.93 6.588zM9 4.5a1 1 0 1 1-2 0 1 1 0 0 1 2 0z"/>
                    </svg>
                    </div>
                    <div>
                        <h2>Informative axis</h2>
                        <p>Organizational, financial, regulatory, scheduling an contact information.</p>
                    </div>
                </div>
                <div class="col d-flex align-items-start">
                    <div class="icon-square bg-light text-dark flex-shrink-0 me-3">
                        <svg xmlns="http://www.w3.org/2000/svg" class="bi" width="1em" height="1em" fill="currentColor" class="bi bi-chat-dots" viewBox="0 0 16 16">
                        <path d="M5 8a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm4 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm3 1a1 1 0 1 0 0-2 1 1 0 0 0 0 2z"/>
                        <path d="m2.165 15.803.02-.004c1.83-.363 2.948-.842 3.468-1.105A9.06 9.06 0 0 0 8 15c4.418 0 8-3.134 8-7s-3.582-7-8-7-8 3.134-8 7c0 1.76.743 3.37 1.97 4.6a10.437 10.437 0 0 1-.524 2.318l-.003.011a10.722 10.722 0 0 1-.244.637c-.079.186.074.394.273.362a21.673 21.673 0 0 0 .693-.125zm.8-3.108a1 1 0 0 0-.287-.801C1.618 10.83 1 9.468 1 8c0-3.192 3.004-6 7-6s7 2.808 7 6c0 3.193-3.004 6-7 6a8.06 8.06 0 0 1-2.088-.272 1 1 0 0 0-.711.074c-.387.196-1.24.57-2.634.893a10.97 10.97 0 0 0 .398-2z"/>
                    </svg>
                    </div>
                    <div>
                        <h2>Deliberative axis</h2>
                        <p>Discussion, debates, forums, propositions</p>
                    </div>
                </div>
                <div class="col d-flex align-items-start">
                    <div class="icon-square bg-light text-dark flex-shrink-0 me-3">
                        <svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" fill="currentColor" class="bi bi-ui-radios" viewBox="0 0 16 16">
                            <path d="M7 2.5a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-7a.5.5 0 0 1-.5-.5v-1zM0 12a3 3 0 1 1 6 0 3 3 0 0 1-6 0zm7-1.5a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-7a.5.5 0 0 1-.5-.5v-1zm0-5a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5zm0 8a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5zM3 1a3 3 0 1 0 0 6 3 3 0 0 0 0-6zm0 4.5a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3z"/>
                        </svg>
                    </div>
                    <div>
                        <h2>Participatory axis</h2>
                        <p>Consulations, Polls, Survays.</p>
                    </div>
                </div>
            </div>
            <div class="container">
                <h2 class="pb-2">
                    <div class="icon-square text-dark flex-shrink-0 me-3">
                        <svg class="bi" xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" fill="currentColor" class="bi bi-list-check" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M5 11.5a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5zm0-4a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5zm0-4a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5zM3.854 2.146a.5.5 0 0 1 0 .708l-1.5 1.5a.5.5 0 0 1-.708 0l-.5-.5a.5.5 0 1 1 .708-.708L2 3.293l1.146-1.147a.5.5 0 0 1 .708 0zm0 4a.5.5 0 0 1 0 .708l-1.5 1.5a.5.5 0 0 1-.708 0l-.5-.5a.5.5 0 1 1 .708-.708L2 7.293l1.146-1.147a.5.5 0 0 1 .708 0zm0 4a.5.5 0 0 1 0 .708l-1.5 1.5a.5.5 0 0 1-.708 0l-.5-.5a.5.5 0 0 1 .708-.708l.146.147 1.146-1.147a.5.5 0 0 1 .708 0z"/>
                </svg> Evaluation extra feature</h2>
                </div>
                <p>Validate the actions on participation results.</p>
            </div>
        </div>
    </main>
    <footer class="container py-3 my-4">
        <ul class="nav justify-content-center border-bottom pb-3 mb-3">
            <li class="nav-item">
                <a href="https://github.com/huerta2502" class="nav-link px-2 text-muted">
                    <svg class="bi me-2" xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-github" viewBox="0 0 16 16">
                    <path d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.012 8.012 0 0 0 16 8c0-4.42-3.58-8-8-8z"/>
                </svg> Author
                </a>
            </li>
            <li class="nav-item">
                <a href="https://gdsc.community.dev/national-polytechnic-institute-of-mexico-escom/" class="nav-link px-2 text-muted">
                    <img src="https://res.cloudinary.com/startup-grind/image/upload/dpr_2.0,fl_sanitize/v1/gcs/platform-data-dsc/contentbuilder/logo_dark_horizontal_097s7oa.svg" class="svg" alt="Google Developer Student Clubs logo" style="height: 1em;">                    DSC ESCOM IPN
                </a>
            </li>
        </ul>
        <p class="text-center text-muted">&copy; 2022 urdemocracy</p>
    </footer>
    <!-- Option 1: Bootstrap Bundle with Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p" crossorigin="anonymous"></script>

    <script src="./main.js"></script>
</body>

</html>
'''
'''--- src/main.js ---
import "regenerator-runtime/runtime";
import * as nearAPI from "near-api-js";

window.addEventListener("load", () => {
    document.getElementById("signout").addEventListener("click", signOut);
    document.getElementById("signinBtn").addEventListener("click", udsignin);
    document.getElementById("signupBtn").addEventListener("click", udsignup);
});

function udsignin(e) {
    e.preventDefault();
    const email = document.getElementById("signinEmail").value;
    const psswd = document.getElementById("signinPassword").value;
    if (email == "" || psswd == "") {
        alert("Please enter your email and password");
        return;
    }
    if (!window.walletAccount.getAccountId()) {
        alert("Please sign in to your NEAR account.");
        return;
    }
    document.getElementById("signinSpinner").style.display = "inline-block";
    document.getElementById("signinBtn").disabled = true;
    document.getElementById("signinBtn").classList.add("disabled");
    window.walletAccount.account().functionCall({
        contractId: window.nearConfig.contractName,
        methodName: 'login',
        args: {
            mail: email,
            password: psswd
        }
    }).then(function(response) {
        document.getElementById("signinSpinner").style.display = "none";
        const {
            status: { SuccessValue },
        } = response;
        const result = atob(SuccessValue) === 'true';
        if (result == true) {
            alert('Account logged in successfully');
            window.location.href = './profile.html';
        } else alert(response.receipts_outcome[0].outcome.logs[0]);
        document.getElementById("signinBtn").disabled = false;
        document.getElementById("signinBtn").classList.remove("disabled");
    });
}

function udsignup(e) {
    e.preventDefault();
    const username = document.getElementById("signupName").value;
    const email = document.getElementById("signupEmail").value;
    const psswd = document.getElementById("signupPassword").value;
    if (username == "" || email == "" || psswd == "") {
        alert("Please enter your name, email and password");
        return;
    }
    if (!window.walletAccount.getAccountId()) {
        alert("Please sign in to your NEAR account.");
        return;
    }
    document.getElementById("signupSpinner").style.display = "inline-block";
    document.getElementById("signupBtn").disabled = true;
    document.getElementById("signupBtn").classList.add("disabled");
    window.walletAccount.account().functionCall({
        contractId: window.nearConfig.contractName,
        methodName: 'signin',
        args: {
            name: username,
            mail: email,
            password: psswd
        }
    }).then(function(response) {
        document.getElementById("signupSpinner").style.display = "none";
        const {
            status: { SuccessValue },
        } = response;
        const result = atob(SuccessValue) === 'true';
        if (result == true) {
            alert("Account created successfully");
            window.location.href = './profile.html';
        } else alert(response.receipts_outcome[0].outcome.logs[0]);
        document.getElementById("signupBtn").disabled = false;
        document.getElementById("signupBtn").classList.remove("disabled");
    });
}

// creates keyStore using private key in local storage
// *** REQUIRES SignIn using walletConnection.requestSignIn() ***
const keyStore = new nearAPI.keyStores.BrowserLocalStorageKeyStore();

const config = {
    networkId: "testnet",
    keyStore,
    nodeUrl: "https://rpc.testnet.near.org",
    contractName: process.env.CONTRACT_NAME,
    walletUrl: "https://wallet.testnet.near.org",
    helperUrl: "https://helper.testnet.near.org",
    explorerUrl: "https://explorer.testnet.near.org",
};
window.nearConfig = config;

// Connects to NEAR and provides `near`, `walletAccount` and `contract` objects in `window` scope
async function connect() {
    // Initializing connection to the NEAR node.
    window.near = await nearAPI.connect(Object.assign(nearConfig, { deps: { keyStore: new nearAPI.keyStores.BrowserLocalStorageKeyStore() } }));

    // Needed to access wallet login
    window.walletAccount = new nearAPI.WalletConnection(window.near);

    // Initializing our contract APIs by contract name and configuration.
    window.contract = new nearAPI.Contract(
        window.walletAccount, // the account object that is connecting
        process.env.CONTRACT_NAME, {
            // name of contract you're connecting to
            viewMethods: [], // view methods do not change state but usually return a value
            changeMethods: ["login", "signin"], // change methods modify state
            sender: window.walletAccount, // account object to initialize and sign transactions.
        });
}

window.nearInitPromise = connect()
    .then(updateUI)
    .catch(console.error);

function updateUI() {
    if (!window.walletAccount.getAccountId()) {
        document.getElementById("signinNEAR").style.display = "block";
        document.getElementById("signinNEARbtn").addEventListener("click", signIn);
        document.getElementById("signupNEAR").style.display = "block";
        document.getElementById("signupNEARbtn").addEventListener("click", signIn);
        document.getElementById("signout").style.display = "none";
        document.getElementById("signout").removeEventListener("click", signOut);
    } else {
        document.getElementById("signinNEAR").style.display = "none";
        document.getElementById("signinNEARbtn").removeEventListener("click", signIn);
        document.getElementById("signupNEAR").style.display = "none";
        document.getElementById("signupNEARbtn").removeEventListener("click", signIn);
    }
}

// redirects user to wallet to authorize your dApp
// this creates an access key that will be stored in the browser's local storage
// access key can then be used to connect to NEAR and sign transactions via keyStore
const signIn = () => {
    window.walletAccount.requestSignIn(
        process.env.CONTRACT_NAME, // contract requesting access
        "urdemocracy", // optional
        window.location.href, // optional
        window.location.href // optional
    );
};

const signOut = () => {
    window.walletAccount.signOut();
    updateUI();
};
'''
'''--- src/profile.html ---
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
    <title>urdemocracy | Profile</title>
    <style>
        body {
            font-size: .875rem;
        }
        
        .feather {
            width: 16px;
            height: 16px;
            vertical-align: text-bottom;
        }
        
        .sidebar {
            position: fixed;
            top: 0;
            /* rtl:raw:
    right: 0;
    */
            bottom: 0;
            /* rtl:remove */
            left: 0;
            z-index: 100;
            /* Behind the navbar */
            padding: 48px 0 0;
            /* Height of navbar */
            box-shadow: inset -1px 0 0 rgba(0, 0, 0, .1);
        }
        
        @media (max-width: 767.98px) {
            .sidebar {
                top: 5rem;
            }
        }
        
        .sidebar-sticky {
            position: relative;
            top: 0;
            height: calc(100vh - 48px);
            padding-top: .5rem;
            overflow-x: hidden;
            overflow-y: auto;
            /* Scrollable contents if viewport is shorter than content. */
        }
        
        .sidebar .nav-link {
            font-weight: 500;
            color: #333;
        }
        
        .sidebar .nav-link .feather {
            margin-right: 4px;
            color: #727272;
        }
        
        .sidebar .nav-link.active {
            color: #007bff;
        }
        
        .sidebar .nav-link:hover .feather,
        .sidebar .nav-link.active .feather {
            color: inherit;
        }
        
        .sidebar-heading {
            font-size: .75rem;
            text-transform: uppercase;
        }
        
        .navbar-brand {
            padding-top: .75rem;
            padding-bottom: .75rem;
            font-size: 1rem;
            background-color: rgba(0, 0, 0, .25);
            box-shadow: inset -1px 0 0 rgba(0, 0, 0, .25);
        }
        
        .navbar .navbar-toggler {
            top: .25rem;
            right: 1rem;
        }
        
        .navbar .form-control {
            padding: .75rem 1rem;
            border-width: 0;
            border-radius: 0;
        }
        
        .form-control-dark {
            color: #fff;
            background-color: rgba(255, 255, 255, .1);
            border-color: rgba(255, 255, 255, .1);
        }
        
        .form-control-dark:focus {
            border-color: transparent;
            box-shadow: 0 0 0 3px rgba(255, 255, 255, .25);
        }
        
        .bd-placeholder-img {
            font-size: 1.125rem;
            text-anchor: middle;
            -webkit-user-select: none;
            -moz-user-select: none;
            user-select: none;
        }
        
        @media (min-width: 768px) {
            .bd-placeholder-img-lg {
                font-size: 3.5rem;
            }
        }
        
        .fInput,
        input[type="file"],
        input[type="file"]::-webkit-file-upload-button {
            height: calc(3.5rem + 2px);
        }
        
        .fInput {
            padding: 1rem .75rem;
        }
        
        #dashboard,
        #dashboardLinks,
        #orders,
        #products,
        #clients,
        #deliveryMen {
            display: none;
            transition: display 2.5s ease-in 1s;
        }
    </style>
</head>
</main>

<body>
    <!-- Button trigger modal -->
    <button id="spinnerbtn" style="display: none;" type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#loadingSpinnerModal">
        Launch static backdrop modal
    </button>

    <!-- Modal -->
    <div class="modal bg-secondary" id="loadingSpinnerModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content rounded-4 shadow">
                <div class="modal-body text-center">
                    <h5 class="mb-0">Loading, please wait</h5>
                    <div class="spinner-border m-5" style="width: 5rem; height: 5rem;" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <button id="closespinnerbtn" style="display: none;" type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
    <header class="navbar navbar-dark sticky-top bg-dark flex-md-nowrap p-0 shadow">
        <a class="navbar-brand col-md-3 col-lg-2 me-0 px-3" id="nameDisplay">uwu</a>
        <button class="navbar-toggler position-absolute d-md-none collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#sidebarMenu" aria-controls="sidebarMenu" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <input class="form-control form-control-dark w-100" type="text" placeholder="Buscar" aria-label="Buscar">
        <ul class="navbar-nav px-3">
            <li class="nav-item text-nowrap">
                <a class="nav-link">Sign out</a>
            </li>
        </ul>
    </header>
    <div class="container-fluid">
        <div class="row">
            <nav id="sidebarMenu" class="col-md-3 col-lg-2 d-md-block bg-light sidebar collapse">
                <div class="position-sticky pt-3">
                    <ul class="nav flex-column">
                        <li class="nav-item">
                            <a id="dashboardLink" class="nav-link active" aria-current="page">
                                Collectives
                            </a>
                        </li>
                        <li class="nav-item">
                            <a id="ordersLink" class="nav-link">
                                Resources
                            </a>
                        </li>
                        <li class="nav-item">
                            <a id="productsLink" class="nav-link">
                                Deliberations
                            </a>
                        </li>
                        <li class="nav-item">
                            <a id="clientsLink" class="nav-link">
                                Results
                            </a>
                        </li>
                        <li class="nav-item">
                            <a id="deliveryMenLink" class="nav-link">
                                Followups
                            </a>
                        </li>
                    </ul>
                </div>
            </nav>
            <main id="dashboard" class="col-md-9 ms-sm-auto col-lg-10 px-md-4">
                <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
                    <h1 class="h2">Summary</h1>
                </div>
                <div id="usercollectives">
                    <p id="collectivesDisplay"></p>
                </div>
                <div class="accordion" id="accordionPanelsStayOpenExample">
                    <div class="accordion-item">
                        <h2 class="accordion-header" id="panelsStayOpen-headingOne">
                            <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#panelsStayOpen-collapseOne" aria-expanded="false" aria-controls="panelsStayOpen-collapseOne">
                            Create new collective
                        </button>
                        </h2>
                        <div id="panelsStayOpen-collapseOne" class="accordion-collapse collapse show" aria-labelledby="panelsStayOpen-headingOne">
                            <div class="accordion-body">
                                <br/>
                                <h1 class="h3 mb-3 fw-normal">Create a new collective in urdemocracy</h1>
                                <h7 class="h7 mb-3 fw-normal">Please enter the information requested below.</h7><br/><br/>
                                <form id="cproduct">
                                    <div class="row g-3">
                                        <div class="col-sm-6">
                                            <div class="form-floating">
                                                <input type="text" name="name" class="form-control" id="cnName" placeholder="Name" required>
                                                <label for="cnName">Name</label>
                                            </div>
                                        </div>
                                        <div class="col-sm-6">
                                            <div class="form-floating">
                                                <input type="text" name="name" class="form-control" id="cnType" placeholder="Type" required>
                                                <label for="cnType">Type</label>
                                            </div>
                                        </div>
                                        <div class="col-sm-12">
                                            <div class="form-floating">
                                                <textarea class="form-control" name="desc" placeholder="URL for more informarion" id="cnUrl" style="height: 5em"></textarea>
                                                <label for="cnUrl">URL for more information</label>
                                            </div>
                                        </div>
                                    </div>
                                    <br/>
                                    <button id="createCol" class="w-100 btn btn-lg btn-primary" type="submit">
                                        Create Collective
                                        <span id="createColSpinner" class="spinner-border spinner-border-sm" style="width: 1em;height: 1em;display: none;" role="status" aria-hidden="true"></span>
                                    </button>
                                </form>
                            </div>
                        </div>
                    </div>
                    <div class="accordion-item">
                        <h2 class="accordion-header" id="panelsStayOpen-headingTwo">
                            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#panelsStayOpen-collapseTwo" aria-expanded="false" aria-controls="panelsStayOpen-collapseTwo">
                                Add Users to Collective
                            </button>
                        </h2>
                        <div id="panelsStayOpen-collapseTwo" class="accordion-collapse collapse" aria-labelledby="panelsStayOpen-headingTwo">
                            <div class="accordion-body">
                                <br/>
                                <h1 class="h3 mb-3 fw-normal">Add users to collective by ids.</h1>
                                <h7 class="h7 mb-3 fw-normal">Please enter the information requested below</h7><br/><br/>
                                <form id="sproduct">
                                    <div class="row g-3">
                                        <div class="col-sm-12">
                                            <div class="form-floating">
                                                <input type="text" name="qntt" class="form-control" id="colId" placeholder="Cantidad" required>
                                                <label for="colId">Collective ID</label>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row g-3">
                                        <div class="col-sm-12">
                                            <div class="form-floating">
                                                <input type="text" name="name" class="form-control" id="uId" placeholder="Nombre" required>
                                                <label for="uId">User ID</label>
                                            </div>
                                        </div>
                                    </div>
                                    <br/>
                                    <button id="addU2C" class="w-100 btn btn-lg btn-primary" type="submit">Add User
                                        <span id="u2cSpinner" class="spinner-border spinner-border-sm" style="width: 1em;height: 1em;display: none;" role="status" aria-hidden="true"></span>
                                    </button>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>

            </main>
            <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4 orders" id="orders">

            </main>
            <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4 products" id="products">
                <br/><br/>
                <div class="accordion" id="accordionPanelsStayOpenExample">
                    <div class="accordion-item">
                        <h2 class="accordion-header" id="panelsStayOpen-headingOne">
                            <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#panelsStayOpen-collapseOne" aria-expanded="true" aria-controls="panelsStayOpen-collapseOne">
                            Añadir un producto al catálogo
                        </button>
                        </h2>
                        <div id="panelsStayOpen-collapseOne" class="accordion-collapse collapse show" aria-labelledby="panelsStayOpen-headingOne">
                            <div class="accordion-body">
                                <br/>
                                <h1 class="h3 mb-3 fw-normal">Añadir un producto al catálogo de tu tienda en Aki</h1>
                                <h7 class="h7 mb-3 fw-normal">Introduce la información del producto que se solicta a continuación.</h7><br/><br/>
                                <form id="cproduct" method="POST" action="cproduct">
                                    <div class="row g-3">
                                        <div class="col-sm-6">
                                            <div class="form-floating">
                                                <input type="text" name="name" class="form-control" id="floatingInputn" placeholder="Nombre" required>
                                                <label for="floatingInputn">Nombre</label>
                                            </div>
                                        </div>
                                        <div class="col-sm-6">
                                            <div class="input-group mb-3">
                                                <label class="input-group-text fInput" for="inputGroupFile">Imagen</label>
                                                <input type="file" class="form-control" name="image" id="inputGroupFile" placeholder="Seleccionar Archivo" required>
                                            </div>
                                        </div>
                                        <div class="col-sm-4">
                                            <div class="input-group mb-3">
                                                <span class="input-group-text fInput">$</span>
                                                <span class="input-group-text fInput">0.00</span>
                                                <input type="number" name="price" class="form-control" aria-label="Cantiadad (con punto y dos decimales)" placeholder="Precio" required>
                                            </div>
                                        </div>
                                        <div class="col-sm-4">
                                            <div class="form-floating">
                                                <input type="text" name="brand" class="form-control" id="floatingInputb" placeholder="Marca" required>
                                                <label for="floatingInputb">Marca</label>
                                            </div>
                                        </div>
                                        <div class="col-sm-4">
                                            <div class="form-floating">
                                                <input type="text" name="cat" class="form-control" id="floatingInputr" placeholder="Categoría" required>
                                                <label for="floatingInputr">Categoría</label>
                                            </div>
                                        </div>
                                        <div class="col-sm-12">
                                            <div class="form-floating">
                                                <textarea class="form-control" name="desc" placeholder="Describe las características más relevantes del producto" id="floatingTextarea2" style="height: 100px"></textarea>
                                                <label for="floatingTextarea2">Descripción</label>
                                            </div>
                                        </div>
                                    </div>
                                    <br/>
                                    <button class="w-100 btn btn-lg btn-primary" type="submit">Añadir producto</button>
                                </form>
                            </div>
                        </div>
                    </div>
                    <div class="accordion-item">
                        <h2 class="accordion-header" id="panelsStayOpen-headingTwo">
                            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#panelsStayOpen-collapseTwo" aria-expanded="false" aria-controls="panelsStayOpen-collapseTwo">
                                Agregar existencias
                            </button>
                        </h2>
                        <div id="panelsStayOpen-collapseTwo" class="accordion-collapse collapse" aria-labelledby="panelsStayOpen-headingTwo">
                            <div class="accordion-body">
                                <br/>
                                <h1 class="h3 mb-3 fw-normal">Agregar existencias de un producto en el catálogo de tu tienda en Aki</h1>
                                <h7 class="h7 mb-3 fw-normal">Busca el producto a actualizar en el catálogo</h7><br/><br/>
                                <form id="sproduct" method="POST" action="sproduct">
                                    <div class="row g-3">
                                        <div class="col-sm-12">
                                            <div class="form-floating">
                                                <input type="text" name="name" class="form-control" id="floatingInputns" placeholder="Nombre" required>
                                                <label for="floatingInputns">Nombre</label>
                                            </div>
                                        </div>
                                    </div>
                                    <br/>
                                    <button class="w-100 btn btn-lg btn-primary" type="submit">Buscar producto</button>
                                </form>
                                <br/><br/>
                                <form id="uproduct" method="POST" action="uproduct">
                                    <h7 class="h7 mb-3 fw-normal">Introduce la nueva cantidad de existencias del producto.</h7><br/><br/>
                                    <div class="row g-3">
                                        <div class="col-sm-12">
                                            <div class="form-floating">
                                                <input type="number" name="qntt" class="form-control" id="floatingInputq" placeholder="Cantidad" required>
                                                <label for="floatingInputq">Cantidad</label>
                                            </div>
                                        </div>
                                    </div>
                                    <br/>
                                    <button class="w-100 btn btn-lg btn-primary" type="submit">Actualizar existencias</button>
                                </form>
                            </div>
                        </div>
                    </div>
                    <div class="accordion-item">
                        <h2 class="accordion-header" id="panelsStayOpen-headingThree">
                            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#panelsStayOpen-collapseThree" aria-expanded="false" aria-controls="panelsStayOpen-collapseThree">
                                Retirar un producto del catálogo
                            </button>
                        </h2>
                        <div id="panelsStayOpen-collapseThree" class="accordion-collapse collapse" aria-labelledby="panelsStayOpen-headingThree">
                            <div class="accordion-body">
                                <br/>
                                <h1 class="h3 mb-3 fw-normal">Retirar un producto del catálogo de tu tienda en Aki</h1>
                                <h7 class="h7 mb-3 fw-normal">Busca el producto a eliminar del catálogo.</h7><br/><br/>
                                <form id="sproduct2" method="POST" action="sproduct">
                                    <div class="row g-3">
                                        <div class="col-sm-12">
                                            <div class="form-floating">
                                                <input type="text" name="name" class="form-control" id="floatingInputn" placeholder="Nombre" required>
                                                <label for="floatingInputn">Nombre</label>
                                            </div>
                                        </div>
                                    </div>
                                    <br/>
                                    <button class="w-100 btn btn-lg btn-primary" type="submit">Buscar producto</button>
                                </form>
                                <br/><br/>
                                <form id="dproduct" method="POST" action="dproduct">
                                    <button class="w-100 btn btn-lg btn-primary" type="submit">Eliminar producto</button>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
            </main>
            <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4 clients" id="clients">

            </main>
            <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4 deliveryMen" id="deliveryMen">

            </main>
        </div>
    </div>
    <footer class="container py-3 my-4">
        <ul class="nav justify-content-center border-bottom pb-3 mb-3">
            <li class="nav-item">
                <a href="https://github.com/huerta2502" class="nav-link px-2 text-muted">
                    <svg class="bi me-2" xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-github" viewBox="0 0 16 16">
                    <path d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.012 8.012 0 0 0 16 8c0-4.42-3.58-8-8-8z"/>
                </svg> Author
                </a>
            </li>
            <li class="nav-item">
                <a href="https://gdsc.community.dev/national-polytechnic-institute-of-mexico-escom/" class="nav-link px-2 text-muted">
                    <img src="https://res.cloudinary.com/startup-grind/image/upload/dpr_2.0,fl_sanitize/v1/gcs/platform-data-dsc/contentbuilder/logo_dark_horizontal_097s7oa.svg" class="svg" alt="Google Developer Student Clubs logo" style="height: 1em;">                    DSC ESCOM IPN
                </a>
            </li>
        </ul>
        <p class="text-center text-muted">&copy; 2022 urdemocracy</p>
    </footer>
    <!-- Option 1: Bootstrap Bundle with Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p" crossorigin="anonymous"></script>

    <script src="./profile.js"></script>
</body>

</html>
'''
'''--- src/profile.js ---
import "regenerator-runtime/runtime";
import * as nearAPI from "near-api-js";

const dynamicTableHeader = "<div class='table-responsive'><table class='table table-primary table-striped table-sm'><thead><tr><th>Collective ID</th><th>Name</th><th>Type</th><th>Info URL</th></tr></thead><tbody>";
const dynamicTableItemStart = "<tr>";
const dynamicTableEntryStart = "<td>";
const dynamicTableEntryEnd = "</td>";
const dynamicTableItemEnd = "</tr>";
const dynamicTableFooter = "</tbody></table></div>";

// creates keyStore using private key in local storage
// *** REQUIRES SignIn using walletConnection.requestSignIn() ***
const keyStore = new nearAPI.keyStores.BrowserLocalStorageKeyStore();

const config = {
    networkId: "testnet",
    keyStore,
    nodeUrl: "https://rpc.testnet.near.org",
    contractName: "dev-1649010639406-39669096907820",
    walletUrl: "https://wallet.testnet.near.org",
    helperUrl: "https://helper.testnet.near.org",
    explorerUrl: "https://explorer.testnet.near.org",
};
window.nearConfig = config;

// Connects to NEAR and provides `near`, `walletAccount` and `contract` objects in `window` scope
async function connect() {
    // Initializing connection to the NEAR node.
    window.near = await nearAPI.connect(Object.assign(nearConfig, { deps: { keyStore: new nearAPI.keyStores.BrowserLocalStorageKeyStore() } }));

    // Needed to access wallet login
    window.walletAccount = new nearAPI.WalletConnection(window.near);

    // Initializing our contract APIs by contract name and configuration.
    window.contract = new nearAPI.Contract(
        window.walletAccount, // the account object that is connecting
        "dev-1649010639406-39669096907820", {
            // name of contract you're connecting to
            viewMethods: [], // view methods do not change state but usually return a value
            changeMethods: ["login", "signin"], // change methods modify state
            sender: window.walletAccount, // account object to initialize and sign transactions.
        });
}

window.addEventListener('load', function() {
    document.getElementById("spinnerbtn").click();
    document.getElementById("dashboardLink").addEventListener("click", function() { showTabs(0); });
    document.getElementById("ordersLink").addEventListener("click", function() { showTabs(1); });
    document.getElementById("productsLink").addEventListener("click", function() { showTabs(2); });
    document.getElementById("clientsLink").addEventListener("click", function() { showTabs(3); });
    document.getElementById("deliveryMenLink").addEventListener("click", function() { showTabs(4); });
    document.getElementById("createCol").addEventListener("click", createCollective);
    document.getElementById("addU2C").addEventListener("click", addUserToCollective);
    showTabs(0);
});

window.nearInitPromise = connect()
    .then(updateUI)
    .catch(console.error);

function updateUI() {
    window.walletAccount.account().functionCall({
        contractId: window.nearConfig.contractName,
        methodName: 'getUser',
        args: {
            userId: window.walletAccount.getAccountId()
        }
    }).then(function(response) {
        document.getElementById("closespinnerbtn").click();
        const {
            status: { SuccessValue },
        } = response;
        const result = atob(SuccessValue);
        const user = JSON.parse(JSON.parse(result));
        document.getElementById('nameDisplay').innerText = user.name.substring(0, user.name.indexOf(' '));
        document.getElementById("spinnerbtn").click();
        window.walletAccount.account().functionCall({
            contractId: window.nearConfig.contractName,
            methodName: 'getUserCollectives',
            args: {
                userId: window.walletAccount.getAccountId()
            }
        }).then(function(response) {
            document.getElementById("closespinnerbtn").click();
            const {
                status: { SuccessValue },
            } = response;
            const result = atob(SuccessValue);
            const collectives = JSON.parse(result);
            if (collectives.length == 0) document.getElementById('collectivesDisplay').innerText = "User not a member of any collectives";
            else {
                let col;
                let dynamicTable = dynamicTableHeader;
                collectives.forEach(collective => {
                    col = JSON.parse(collective);
                    dynamicTable += dynamicTableItemStart;
                    dynamicTable += dynamicTableEntryStart + col.collectiveId + dynamicTableEntryEnd;
                    dynamicTable += dynamicTableEntryStart + col.name + dynamicTableEntryEnd;
                    dynamicTable += dynamicTableEntryStart + col.type + dynamicTableEntryEnd;
                    dynamicTable += dynamicTableEntryStart + col.infoUrl + dynamicTableEntryEnd;
                    dynamicTable += dynamicTableItemEnd;
                });
                dynamicTable += dynamicTableFooter;
                document.getElementById('collectivesDisplay').innerHTML = dynamicTable;
            }
        });
    });
}

function createCollective(e) {
    e.preventDefault();
    const collectiveName = document.getElementById('cnName').value;
    const collectiveType = document.getElementById('cnType').value;
    const collectiveInfoUrl = document.getElementById('cnUrl').value;
    if (collectiveName == "" || collectiveType == "" || collectiveInfoUrl == "") {
        alert("Please fill in all fields");
        return;
    }
    if (!window.walletAccount.getAccountId()) {
        alert("Please sign in to your NEAR account.");
        return;
    }
    document.getElementById("createColSpinner").style.display = "inline-block";
    window.walletAccount.account().functionCall({
        contractId: window.nearConfig.contractName,
        methodName: 'newCollective',
        args: {
            name: collectiveName,
            type: collectiveType,
            infoUrl: collectiveInfoUrl
        }
    }).then(function(response) {
        document.getElementById("createColSpinner").style.display = "none";
        const {
            status: { SuccessValue },
        } = response;
        const result = atob(SuccessValue);
        if (result != '') {
            alert('Collective created successfully with id: ' + result);
        } else alert(response.receipts_outcome[0].outcome.logs[0]);
    });
}
//"0xa1801637ad7c66adb3f6d66469e176eb27d64a58ae291d8a1164e5b8fb5018"
function addUserToCollective(e) {
    e.preventDefault();
    const uId = document.getElementById('uId').value;
    const colId = document.getElementById('colId').value;
    if (uId == "" || colId == "") {
        alert("Please fill in all fields");
        return;
    }
    if (!window.walletAccount.getAccountId()) {
        alert("Please sign in to your NEAR account.");
        return;
    }
    document.getElementById("u2cSpinner").style.display = "inline-block";
    window.walletAccount.account().functionCall({
        contractId: window.nearConfig.contractName,
        methodName: 'addUser2Collective',
        args: {
            collectiveId: colId,
            userId: uId
        }
    }).then(function(response) {
        document.getElementById("u2cSpinner").style.display = "none";
        const {
            status: { SuccessValue },
        } = response;
        const result = atob(SuccessValue) === 'true';
        if (result == true) {
            alert('User added to collective successfully');
            updateUI();
        } else alert(response.receipts_outcome[0].outcome.logs[0]);
    });
}

function showTabs(i) {
    switch (i) {
        case 1:
            document.getElementById("dashboardLink").className = "nav-link";
            document.getElementById("ordersLink").className = "nav-link active";
            document.getElementById("productsLink").className = "nav-link";
            document.getElementById("clientsLink").className = "nav-link";
            document.getElementById("deliveryMenLink").className = "nav-link";
            document.getElementById("dashboard").style.display = "none";
            document.getElementById("orders").style.display = "block";
            document.getElementById("products").style.display = "none";
            document.getElementById("clients").style.display = "none";
            document.getElementById("deliveryMen").style.display = "none";
            break;
        case 2:
            document.getElementById("dashboardLink").className = "nav-link";
            document.getElementById("ordersLink").className = "nav-link";
            document.getElementById("productsLink").className = "nav-link active";
            document.getElementById("clientsLink").className = "nav-link";
            document.getElementById("deliveryMenLink").className = "nav-link";
            document.getElementById("dashboard").style.display = "none";
            document.getElementById("orders").style.display = "none";
            document.getElementById("products").style.display = "block";
            document.getElementById("clients").style.display = "none";
            document.getElementById("deliveryMen").style.display = "none";
            break;
        case 3:
            document.getElementById("dashboardLink").className = "nav-link";
            document.getElementById("ordersLink").className = "nav-link";
            document.getElementById("productsLink").className = "nav-link";
            document.getElementById("clientsLink").className = "nav-link active";
            document.getElementById("deliveryMenLink").className = "nav-link";
            document.getElementById("dashboard").style.display = "none";
            document.getElementById("orders").style.display = "none";
            document.getElementById("products").style.display = "none";
            document.getElementById("clients").style.display = "block";
            document.getElementById("deliveryMen").style.display = "none";
            break;
        case 4:
            document.getElementById("dashboardLink").className = "nav-link";
            document.getElementById("ordersLink").className = "nav-link";
            document.getElementById("productsLink").className = "nav-link";
            document.getElementById("clientsLink").className = "nav-link";
            document.getElementById("deliveryMenLink").className = "nav-link active";
            document.getElementById("dashboard").style.display = "none";
            document.getElementById("orders").style.display = "none";
            document.getElementById("products").style.display = "none";
            document.getElementById("clients").style.display = "none";
            document.getElementById("deliveryMen").style.display = "block";
            break;
        default:
            document.getElementById("dashboardLink").className = "nav-link active";
            document.getElementById("ordersLink").className = "nav-link";
            document.getElementById("productsLink").className = "nav-link";
            document.getElementById("clientsLink").className = "nav-link";
            document.getElementById("deliveryMenLink").className = "nav-link";
            document.getElementById("dashboard").style.display = "block";
            document.getElementById("orders").style.display = "none";
            document.getElementById("products").style.display = "none";
            document.getElementById("clients").style.display = "none";
            document.getElementById("deliveryMen").style.display = "none";
            break;
    }
    document.getElementById("sidebarMenu").classList.remove("show");
}
'''