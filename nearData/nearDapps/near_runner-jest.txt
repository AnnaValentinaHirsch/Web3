*GitHub Repository "near/runner-jest"*

'''--- .github/workflows/lint.yml ---
name: Lint
on: push
jobs:
  eslint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - run: yarn install
    - run: yarn lint
'''
'''--- .github/workflows/test.yml ---
name: Test
on: push
jobs:
  test:
    strategy:
      matrix:
        platform: [ubuntu-latest, macos-latest]
        node-version: [14, 16]
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - name: Run tests
        run: yarn && yarn test:ci
'''
'''--- .vscode/extensions.json ---
{
	// See https://go.microsoft.com/fwlink/?LinkId=827846 to learn about workspace recommendations.
	// Extension identifier format: ${publisher}.${name}. Example: vscode.csharp
	// List of extensions which should be recommended for users of this workspace.
	"recommendations": [
		"spence-s.linter-xo"
	],
	// List of extensions recommended by VS Code that should not be recommended for users of this workspace.
	"unwantedRecommendations": []
}
'''
'''--- .vscode/settings.json ---
{
  "xo.format.enable": true,
  "xo.overrideSeverity": "info",
  "[javascript]": {
    "editor.defaultFormatter": "spence-s.linter-xo"
  },
  "[typescript]": {
    "editor.defaultFormatter": "spence-s.linter-xo"
  },
  "editor.codeActionsOnSave": {
    "spence-s.linter-xo": true
  }
}
'''
'''--- README.md ---
near-runner + Jest
==================

A thin wrapper around [near-runner] to make it easier to use with [Jest] and [TypeScript]. If you don't want Jest, use near-runner directly.

Write tests once, run them both on [NEAR TestNet](https://docs.near.org/docs/concepts/networks) and a controlled [NEAR Sandbox](https://github.com/near/sandbox) local environment.

  [near-runner]: https://github.com/near/runner-js
  [Jest]: https://jestjs.io/
  [TypeScript]: https://www.typescriptlang.org/

Quick Start
===========

`near-runner-jest --bootstrap` is a one-time command to quickly initialize a project with near-runner-jest. You will need [NodeJS] installed. Then:

    npx near-runner-jest --bootstrap

It will:

* Add a `near-runner` directory to the folder where you ran the command. This directory contains all the configuration needed to get you started with near-runner-jest, and a `__tests__` subfolder with a well-commented example test file.
* Create `test.sh` and `test.bat` scripts in the folder where you ran the command. These can be used to quickly run the tests in `near-runner`. Feel free to integrate test-running into your project in a way that makes more sense for you, and then remove these scripts.
* Install `near-runner-jest` as a dependency using `npm install --save-dev` (most of the output you see when running the command comes from this step).

  [NodeJS]: https://nodejs.dev/

Manual Install
==============

1. Install.

   ```bash
   npm install --save-dev near-runner-jest # npm
   yarn add --dev near-runner-jest         # yarn
   ```

2. Configure.

   You can use the `near-runner-jest` script to run `jest` using a [custom configuration file](./jest.config.js). You can add this to your `test` script in your `package.json`:

       "test": "near-runner-jest"

   Now you can run tests with `npm run test` or `yarn test`.

   If you want to write tests with TypeScript (recommended), you can add a `tsconfig.json` to your project root with the following contents:

       {"extends": "near-runner-jest/tsconfig.jest.json"}

   If you already have TypeScript set up and you don't want to extend the config from `near-runner-jest`, feel free to just copy the settings you want from [tsconfig.jest.json](./tsconfig.jest.json).

2. Initialize.

   Make a `__tests__` folder, make your first test file. Call your first test file `main.spec.ts` if you're not sure what else to call it.

   (near-runner-jest uses [Jest's default test matcher](https://jestjs.io/docs/configuration#testmatch-arraystring), which will find any `*.ts` or `*.js` files in the `__tests__` directory and any files project-wide with a `*.(spec|test).(ts|js)` suffix. "Project-wide" here means "the directory in which you run `near-runner-jest`.")

   In `main.spec.ts`, set up a `runner` with NEAR accounts, contracts, and state that will be used in all of your tests.

   ```ts
   import path from 'path';
   import {Runner} from 'near-runner-jest';

   const runner = Runner.create(async ({root}) => {
      const alice = await root.createAccount('alice');
      const contract = await root.createAndDeploy(
        'contract-account-name',
        path.join(__dirname, '..', 'path', 'to', 'compiled.wasm'),
      );

      // make other contract calls that you want as a starting point for all tests

      return {alice, contract};
   });

   describe('my contract', () => {
     // tests go here
   });
   ```

   `describe` is [from Jest](https://jestjs.io/docs/setup-teardown) and is optional.

4. Write tests.

   ```ts
   describe('my contract', () => {
     runner.test('does something', async ({alice, contract}) => {
       await alice.call(
         contract,
         'some_update_function',
         {some_string_argument: 'cool', some_number_argument: 42}
       );
       const result = await contract.view(
         'some_view_function',
         {account_id: alice}
       );
       expect(result).toBe('whatever');
     });

     runner.test('does something else', async ({alice, contract}) => {
       const result = await contract.view(
         'some_view_function',
         {account_id: alice}
       );
       expect(result).toBe('some default');
     });
   });
   ```

   `runner.test` is added to `near-runner` by `near-runner-jest`, and is shorthand for:

   ```ts
   test.concurrent('does something', async () => {
     await runner.run(async ({…}) => {
       // tests go here
     });
   });
   ```

   Where `test.concurrent` comes [from Jest](https://jestjs.io/docs/api#testconcurrentname-fn-timeout) and `runner.run` comes [from near-runner](https://github.com/near/runner-js#how-it-works).

See the [`__tests__`](https://github.com/near/runner-js/tree/main/__tests__) directory in near-runner-js for more examples. Remember that you can replace the nested `test.concurrent`…`await runner.run` sequences with `runner.test`.

'''
'''--- __tests__/01.basic-transactions.spec.ts ---
/**
 * This test demonstrates basic behavior of near-runner, making simple
 * function calls and view calls to the contract from
 * https://github.com/near-examples/rust-status-message
 *
 * Note that the same tests will be run on both a local sandbox environment and
 * on testnet by using the `test:sandbox` and `test:testnet` scripts in
 * package.json.
 */
import path from 'path';
import {Runner} from '../src';

const runner = Runner.create(async ({root}) => ({
  contract: await root.createAndDeploy(
    'status-message',
    path.join(__dirname, 'build', 'debug', 'status_message.wasm'),
  ),
  ali: await root.createAccount('ali'),
}));

describe(`Running on ${Runner.getNetworkFromEnv()}`, () => {
  runner.test('Root gets null status', async ({contract, root}) => {
    const result = await contract.view('get_status', {
      account_id: root,
    });
    expect(result).toBeNull();
  });

  runner.test('Ali sets then gets status', async ({contract, ali}) => {
    await ali.call(contract, 'set_status', {message: 'hello'});
    const result: string = await contract.view('get_status', {
      account_id: ali,
    });
    expect(result).toBe('hello');
  });

  runner.test('Root and Ali have different statuses', async ({contract, root, ali}) => {
    await root.call(contract, 'set_status', {message: 'world'});
    const rootStatus: string = await contract.view('get_status', {
      account_id: root,
    });
    expect(rootStatus).toBe('world');

    const aliStatus = await contract.view('get_status', {
      account_id: ali,
    });
    expect(aliStatus).toBeNull();
  });
});

'''
'''--- bootstrap-starter/near-runner/README.md ---
These tests use [near-runner-jest](https://github.com/near/runner-jest): delightful, deterministic local testing for NEAR smart contracts.

You will need to install [NodeJS](https://nodejs.dev/). Then you can use the `scripts` defined in [package.json](./package.json):

    npm run test

If you want to run `near-runner-jest` or `jest` directly, you can use [npx](https://nodejs.dev/learn/the-npx-nodejs-package-runner):

    npx near-runner-jest --help
    npx jest --help

'''
'''--- bootstrap-starter/near-runner/__tests__/main.spec.ts ---
import path from 'path';
import {Runner} from 'near-runner-jest';

// 'describe' is a global injected by Jest, and is optional.
describe('some set of behaviors', () => {
  const runner = Runner.create(async ({root}) => {
    const alice = await root.createAccount('alice');
    const contract = await root.createAndDeploy(
      'contract-account-name',
      path.join(__dirname, '..', '..', 'res', 'compiled.wasm'),
      {
        method: 'init_method',
        args: {owner_id: root},
      },
    );

    return {alice, contract};
  });

  runner.test('behavior 1', async ({alice, contract}) => {
    // Don't forget to `await` your calls!
    await alice.call(
      contract,
      'some_update_function',
      {some_string_argument: 'cool', some_number_argument: 42},
    );

    // `await contract.view` returns an `any` type;
    // you can tell TypeScript that it's some other type, like `string`
    const result: string = await contract.view(
      'some_view_function',
      {account_id: alice},
    );

    // 'expect' is also injected by Jest
    expect(result).toBe('whatever');
  });

  // All calls to `runner.test` run in parallel using `test.concurrent` from Jest
  runner.test('behavior 2', async ({alice, contract}) => {
    const result: string = await contract.view(
      'some_view_function',
      {account_id: alice},
    );
    expect(result).toBe('some default');
  });
});

describe('some other set of behaviors', () => {
  const runner = Runner.create(async ({root}) => {
    // 'alice' and 'contract' are defined the same way as above...
    const alice = await root.createAccount('alice');
    const contract = await root.createAndDeploy(
      'contract-account-name',
      path.join(__dirname, '..', '..', 'res', 'compiled.wasm'),
      {
        method: 'init_method',
        args: {owner_id: root},
      },
    );

    // ...but this step is extra.
    await alice.call(contract, 'some_setup_function', {arg1: 'some value'});

    return {alice, contract};
  });

  // You can also use 'root' in your tests
  runner.test('behavior 3', async ({root, alice, contract}) => {
    console.log(root, alice, contract);
  });
});

'''
'''--- bootstrap-starter/near-runner/package.json ---
{
  "private": true,
  "scripts": {
    "test": "near-runner-jest"
  }
}
'''
'''--- bootstrap-starter/near-runner/tsconfig.json ---
{
  "extends": "near-runner-jest/tsconfig.jest.json"
}
'''
'''--- bootstrap-starter/test.bat ---
:: This script is for Windows.
:: It was auto-generated by near-runner-jest,
:: and only runs the tests in the `near-runner` folder.
cd near-runner
npm run install
npm run test
'''
'''--- bootstrap-starter/test.sh ---
# This script is for use with Linux/macOS/Unix.
# It was auto-generated by near-runner-jest,
# and only runs the tests in the `near-runner` folder.
cd near-runner
npm install
npm run test
'''
'''--- dist/index.d.ts ---
import { CreateRunnerFn, Config, RunnerFn, Runner as RawRunner } from 'near-runner';
export * from 'near-runner';
export declare interface Runner extends RawRunner {
    test(description: string, fn: RunnerFn): void;
}
export declare class Runner extends RawRunner {
    static create(configOrFunction: CreateRunnerFn | Partial<Config>, f?: CreateRunnerFn): Runner;
}

'''
'''--- dist/index.js ---
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Runner = void 0;
const near_runner_1 = require("near-runner");
__exportStar(require("near-runner"), exports);
class Runner extends near_runner_1.Runner {
    static create(configOrFunction, f) {
        const runner = near_runner_1.Runner.create(configOrFunction, f);
        runner.test = (description, fn) => {
            test.concurrent(description, async () => {
                await runner.run(fn);
            });
        };
        return runner;
    }
}
exports.Runner = Runner;
//# sourceMappingURL=index.js.map
'''
'''--- jest.config.js ---
const process = require('process');
const path = require('path');

module.exports = {
  preset: 'ts-jest',
  testEnvironment: 'node',
  rootDir: process.cwd(),
  setupFilesAfterEnv: [
    path.join(__dirname, 'scripts', 'setup.js'),
  ],
  testPathIgnorePatterns: [
    '/assembly/',
    '/node_modules/',
  ],
};

'''
'''--- package.json ---
{
  "name": "near-runner-jest",
  "version": "0.1.11",
  "description": "Thin wrapper around near-runner to make it easier to use with Jest and TypeScript",
  "repository": "https://github.com/near/runner-jest",
  "author": "Near Inc (team@near.org)",
  "license": "(MIT AND Apache-2.0)",
  "main": "dist/index.js",
  "bin": {
    "near-runner-jest": "scripts/cli.js"
  },
  "types": "dist/index.d.ts",
  "files": [
    "dist/",
    "tsconfig.jest.json",
    "jest.config.js",
    "scripts/cli.js",
    "scripts/bootstrap.js",
    "scripts/jest.js",
    "scripts/setup.js",
    "bootstrap-starter"
  ],
  "scripts": {
    "build": "tsc",
    "lint": "xo",
    "lint:fix": "xo --fix",
    "prepublishOnly": "yarn build",
    "test": "node scripts/jest.js --verbose --testPathIgnorePatterns=bootstrap-starter",
    "test:ci": "(yarn test && yarn jest --testPathIgnorePatterns=bootstrap-starter) || NEAR_RUNNER_DEBUG=true yarn test",
    "prepare": "husky install"
  },
  "dependencies": {
    "@types/bn.js": "^5.1.0",
    "@types/jest": "^27.0.1",
    "@types/node": "^16.4.10",
    "fs-extra": "^10.0.0",
    "jest": "^27.0.6",
    "near-runner": "0.6.1",
    "ts-jest": "^27.0.4",
    "ts-node": "^10.1.0",
    "typescript": "^4.3.5"
  },
  "devDependencies": {
    "husky": "^7.0.1",
    "xo": "^0.44.0"
  },
  "engines": {
    "node": "^14.17.0 || >=16.0.0",
    "npm": ">= 6.0.0"
  },
  "xo": {
    "space": true,
    "ignores": [
      "bootstrap-starter"
    ],
    "rules": {
      "unicorn/prefer-node-protocol": 0,
      "unicorn/prefer-module": 0,
      "unicorn/no-array-callback-reference": 0,
      "node/prefer-global/url": 0,
      "@typescript-eslint/triple-slash-reference": 0
    },
    "overrides": [
      {
        "files": "__tests__/**/*.spec.ts",
        "rules": {
          "@typescript-eslint/no-unsafe-assignment": 0,
          "unicorn/prefer-module": 0,
          "@typescript-eslint/no-unsafe-call": 0,
          "@typescript-eslint/no-empty-function": 0
        }
      }
    ]
  },
  "jest": {
    "projects": [
      "./scripts"
    ]
  }
}

'''
'''--- scripts/bootstrap.js ---
#!/usr/bin/env node

const {join} =  require('path');
const {existsSync} = require('fs');
const {spawnSync} = require('child_process');
const {copySync} = require('fs-extra');

if (existsSync(join(process.cwd(), 'near-runner'))) {
  console.log(
    'near-runner directory exists; perhaps you already bootstrapped?'
  );
  process.exit(1);
}

try {
  copySync(
    join(__dirname, '..', 'bootstrap-starter', 'near-runner'),
    join(process.cwd(), 'near-runner')
  );
  copySync(
    join(__dirname, '..', 'bootstrap-starter', 'test.sh'),
    join(process.cwd(), 'test.sh')
  );
  copySync(
    join(__dirname, '..', 'bootstrap-starter', 'test.bat'),
    join(process.cwd(), 'test.bat')
  );
} catch (error) {
  if (error instanceof Error) {
    console.error(error.message);
  } else {
    console.error(error);
  }
  process.exit(1);
}

const install = spawnSync('npm', [
  'install',
  '--save-dev',
  'near-runner-jest'
], {
  cwd: join(process.cwd(), 'near-runner'),
  stdio: 'inherit',
});

if (install.error) {
  if (install.error instanceof Error) {
    console.error(install.error.message);
  } else {
    console.error(install.error);
  }
  process.exit(1);
}
'''
'''--- scripts/cli.js ---
#!/usr/bin/env node

const HELP = `Run near-runner-jest tests, or bootstrap a project. Examples:

    near-runner-jest --bootstrap # Bootstrap a project with near-runner-jest.
    near-runner-jest             # Run tests using 'jest', using custom config.
    near-runner-jest --verbose   # All other flags get passed to the 'jest' CLI.
    near-runner-jest -h, --help  # Print this. For Jest's help, use 'jest -h'.`;

if (process.argv.includes('-h') || process.argv.includes('--help')) {
  console.log(HELP);
} else if (process.argv.includes('--bootstrap')) {
  require('./bootstrap');
} else {
  require('./jest');
}
'''
'''--- scripts/jest.js ---
#!/usr/bin/env node

const {join} =  require('path');

if (!process.argv.includes('--config')) {
  process.argv.push('--config', join(__dirname, '..', 'jest.config.js'));
}

require('jest-cli/bin/jest');

'''
'''--- scripts/setup.js ---
jest.setTimeout(60_000); // eslint-disable-line no-undef

'''
'''--- src/index.ts ---
import {CreateRunnerFn, Config, RunnerFn, Runner as RawRunner} from 'near-runner';

export * from 'near-runner';

export declare interface Runner extends RawRunner {
  test(description: string, fn: RunnerFn): void;
}

export class Runner extends RawRunner {
  static create(
    configOrFunction: CreateRunnerFn | Partial<Config>,
    f?: CreateRunnerFn,
  ): Runner {
    const runner = RawRunner.create(configOrFunction, f);

    (runner as Runner).test = (description: string, fn: RunnerFn): void => {
      test.concurrent(description, async () => {
        await runner.run(fn);
      });
    };

    return runner as Runner;
  }
}

'''
'''--- tsconfig.jest.json ---
{
  "compilerOptions": {
    "target": "ES2019",
    "module": "commonjs",
    "lib": [
      "es2020",
      "ESNext"
    ],
    "allowJs": true,
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true
  }
}
'''
'''--- tsconfig.json ---
{
  "extends": "./tsconfig.jest.json",
  "include": [
    "src/*.ts",
  ],
  "compilerOptions": {
    "incremental": true,
    "declaration": true,
    "sourceMap": true,
    "outDir": "./dist",
    /* Strict Type-Checking Options */
    "strict": true, /* Enable all strict type-checking options. */
    "noImplicitAny": true, /* Raise error on expressions and declarations with an implied 'any' type. */
    "strictNullChecks": true, /* Enable strict null checks. */
    "noImplicitThis": true, /* Raise error on 'this' expressions with an implied 'any' type. */
  }
}
'''