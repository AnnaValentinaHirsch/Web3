*GitHub Repository "love-and-coffee-archive/near-challenge-10"*

'''--- .eslintrc.yml ---
env:
  es2021: true
  node: true
extends:
  - 'eslint:recommended'
  - 'plugin:@typescript-eslint/recommended'
parser: '@typescript-eslint/parser'
parserOptions:
  ecmaVersion: 12
  sourceType: module
plugins:
  - '@typescript-eslint'
rules: {}

'''
'''--- .gitpod.yml ---
image:
  file: .gitpod.Dockerfile
# Options to prebuild the image after github events and set notifications/badges
github:
  prebuilds:
    # enable for the master/default branch (defaults to true)
    master: true
    # enable for pull requests coming from this repo (defaults to true)
    pullRequests: true
    # enable for pull requests coming from forks (defaults to false)
    pullRequestsFromForks: true
    # add a check to pull requests (defaults to true)
    addCheck: true
    # add a "Review in Gitpod" button as a comment to pull requests (defaults to false)
    addComment: true
    # add a "Review in Gitpod" button to the pull request's description (defaults to false)
    addBadge: false
    # add a label once the prebuild is ready to pull requests (defaults to false)
    addLabel: false

# List the start up tasks. You can start them in parallel in multiple terminals. See https://www.gitpod.io/docs/config-start-tasks/
tasks:
  - before: echo "nvm use default" >> ~/.bashrc && nvm use default
    command: source ~/.bashrc; gp open README-Gitpod.md && yarn && alias near=./node_modules/near-cli/bin/near && yarn dev

ports:
  - port: 1234
    onOpen: open-browser

'''
'''--- .travis.yml ---
language: node_js
node_js:
  - 12
os:
  - linux
  - osx
  - windows
env:
  - NODE_ENV=ci YARN_GPG=no
  - NODE_ENV=ci-betanet YARN_GPG=no
cache: yarn
script:
  - yarn lint && yarn test

'''
'''--- DETAILS.md ---
This is a full list of commands available.

Deployed here - https://explorer.testnet.near.org/transactions/EWHPpRBy7vRpzts73HvMsVdq6kvhJ1dWiHAoNaBuZoK6

# Add Candidate

Command

```
near call near-challenge-7.testnet addCandidate '{ "name": "Trump" }' --accountId martint.testnet --gas 300000000000000
```

Result

```
{
  success: true,
  messages: [ 'Trump successfully added to candidate list!' ]
}
```

# View Candidates

Command

```
near view near-challenge-7.testnet viewCandidates
```

Result

```
[
  {
    key: 0,
    value: { avatar: '72724247', voteCount: 0, alive: true, name: 'Trump' }
  },
  {
    key: 1,
    value: { avatar: '72724254', voteCount: 0, alive: true, name: 'Putin' }
  },
  {
    key: 2,
    value: { avatar: '72724267', voteCount: 0, alive: true, name: 'Cat from NEAR' }
  },
  {
    key: 3,
    value: { avatar: '72724285', voteCount: 0, alive: false, name: 'Nobody' }
  },
  {
    key: 4,
    value: { avatar: '72724317', voteCount: 3998, alive: true, name: 'Trump' }
  },
  {
    key: 5,
    value: { avatar: '72724326', voteCount: 2687, alive: true, name: 'Trump Junior' }
  },
  {
    key: 6,
    value: { avatar: '72724344', voteCount: 1, alive: true, name: 'Somebody' }
  }
]
```

# Vote

Command

```
near call near-challenge-7.testnet vote '{ "candidateId": "2" }' --accountId martint.testnet --gas 300000000000000
```

Result

```
{
  success: true,
  messages: [ 'Successfully voted for Cat from NEAR!' ]
}

or

{
  success: false,
  messages: [ 'You have already voted!' ]
}
```

# View Votes

Command

```
near view near-challenge-7.testnet viewVotes
```

Result

```
[
  { key: 'martint.testnet', value: { candidateId: 2 } },
  { key: 'spiritdungeons.testnet', value: { candidateId: 4 } }
]
```

# Remove Candidate

Command

```
near call near-challenge-7.testnet removeCandidate '{ "candidateId": "3" }' --accountId martint.testnet --gas 300000000000000
```

Result

```
{
  success: true,
  messages: [ 'Trump removed from election!' ]
}

or if candidate doesn't exist

{
  success: true,
  messages: [ "Candidate doesn't exist! I guess that's something you wanted in the first place!" ]
}
```

# Remove Your Vote

Removes a vote you previously casted

Command

```
near call near-challenge-7.testnet removeVote --accountId martint.testnet --gas 300000000000000
```

Result

```
{
  success: true,
  messages: [ 'Your vote for Cat from NEAR has been removed!' ]
}

or if you didn't vote

{
  success: true,
  messages: [ "Dodged a bullet there! You didn't vote for a candidate before!" ]
}
```

# Add Candidate - Trump Mode

It adds a candidate and gives them random amount of votes

Command

```
near call near-challenge-7.testnet addCandidateTrumpMode '{ "name": "Trump Junior" }' --accountId martint.testnet --gas 300000000000000
```

Result

```
{
  success: true,
  messages: [
    'Trump Junior successfully added to candidate list!',
    '...',
    'Crowd roars! Trump Junior gets 2687 votes!'
  ]
}
```

# Add Candidate - Hitler Mode

Adds and "kills" candidate

Command

```
near call near-challenge-7.testnet addCandidateHitlerMode '{ "name": "Hitler" }' --accountId martint.testnet --gas 300000000000000
```

Result

```
{
  success: true,
  messages: [
    'Hitler has joined the party!',
    '...',
    'Hitler has left the party!',
    '...',
    'Wait! Why is he not moving???'
  ]
}
```

# Ask Cat to Revive Candidate

If Cat is in the mood (50%) then he will revive a dead candidate

Command

```
near call near-challenge-7.testnet askCatToReviveCandidate '{ "candidateId": "5" }' --accountId martint.testnet --gas 300000000000000
```

Result

```
{
  success: true,
  messages: [
    "I'm a merciful god and your wish has been granted!",
    'Trump Junior lives again!'
  ]
}

or if he's not in mood

{
  success: false,
  messages: [
    "Not in a mood now!",
	'Try again later ;)',
  ]
}

or if candidate is already alive

{
  success: false,
  messages: [
    "Eh? He's already alive! What are you doing with your life?",
  ]
}

or if candidate never existed

{
  success: false,
  messages: [
    "Are you kidding me? Candidate has not been alive yet!",
  ]
}

```

# Vote - 360 No Scope Mode

Votes for a random candidate - dead or alive

Command

```
near call near-challenge-7.testnet vote360NoScopeMode --accountId spiritdungeons.testnet --gas 300000000000000
```

Result

```
{
  success: true,
  messages: [
    'You jump the system and your previous vote (Trump) has been removed!',
    'You spin!',
    'You vote!',
    '...',
    'Vote lands on Cat from NEAR'
  ]
}
```

# Get Leading Candidate

Gets candidate with the highest amount of votes

Command

```
near view near-challenge-7.testnet getLeadingCandidate
```

Result

```
{
  success: true,
  messages: [ 'Trump is currently in 1st place with 60.0% (3998.0) votes!' ]
}
```

# Start New Election

Clears all candidates and votes (keeps logs)

Command

```
near call near-challenge-7.testnet startNewElection --accountId martint.testnet --gas 300000000000000
```

Result

```
{
  success: true,
  messages: [
    'Trump won the election with 60.0% (3998) votes!',
    '...',
    'Starting a new election!'
  ]
}
```

# View Logs

System stores all actions users make and you can view them all using this command

Command

```
near view near-challenge-7.testnet viewLogs
```

Result

```
[
  {
    key: 0,
    value: { user: 'martint.testnet', action: 'Added candidate Trump' }
  },
  {
    key: 1,
    value: { user: 'martint.testnet', action: 'Added candidate Putin' }
  },
  {
    key: 2,
    value: {
      user: 'spiritdungeons.testnet',
      action: 'Added candidate Cat from NEAR'
    }
  },
  {
    key: 3,
    value: { user: 'spiritdungeons.testnet', action: 'Voted for Cat from NEAR' }
  },
  {
    key: 4,
    value: { user: 'spiritdungeons.testnet', action: 'Added candidate Nobody' }
  },
  {
    key: 5,
    value: { user: 'spiritdungeons.testnet', action: 'Removed candidate Nobody' }
  },
  {
    key: 6,
    value: {
      user: 'spiritdungeons.testnet',
      action: 'Removed his vote for Cat from NEAR'
    }
  },
  {
    key: 7,
    value: {
      user: 'martint.testnet',
      action: 'Added candidate Trump in Trump mode with 3998.0 votes'
    }
  },
  {
    key: 8,
    value: {
      user: 'martint.testnet',
      action: 'Added candidate Trump Junior in Trump mode with 2687.0 votes'
    }
  },
  {
    key: 9,
    value: {
      user: 'martint.testnet',
      action: 'Tried adding candidate Hitler in Hitler mode'
    }
  },
  {
    key: 10,
    value: { user: 'martint.testnet', action: 'Added candidate Somebody' }
  },
  {
    key: 11,
    value: {
      user: 'martint.testnet',
      action: 'Removed candidate Trump Junior'
    }
  },
  {
    key: 12,
    value: { user: 'martint.testnet', action: 'Made Cat revive Trump Junior' }
  },
  {
    key: 13,
    value: {
      user: 'spiritdungeons.testnet',
      action: 'Made a 360 No Scope vote for Trump'
    }
  },
  {
    key: 14,
    value: {
      user: 'spiritdungeons.testnet',
      action: 'Made a 360 No Scope vote for Somebody'
    }
  },
  {
    key: 15,
    value: { user: 'martint.testnet', action: 'Started new election!' }
  }
]
```

# Run through scenarious quickly

There are more variations of responses than what I provided in examples and you can run through many scenarious using these commands quickly - https://github.com/MartinTale/near-challenge-7/blob/main/commands.sh

'''
'''--- README-Gitpod.md ---
Guest Book - Gitpod version
===========================

Sign in with [NEAR] and add a message to the guest book! A starter app built with an [AssemblyScript] backend and a [React] frontend.

This README is specific to Gitpod and this example. For local development, please see [README.md](README.md).

Exploring The Code
==================

1. The backend code lives in the `/assembly` folder. This code gets deployed to
   the NEAR blockchain when you run `yarn deploy:contract`. This sort of
   code-that-runs-on-a-blockchain is called a "smart contract" – [learn more
   about NEAR smart contracts][smart contract docs].
2. The frontend code lives in the `/src` folder.
   [/src/index.html](/src/index.html) is a great place to start exploring. Note
   that it loads in `/src/index.js`, where you can learn how the frontend
   connects to the NEAR blockchain.
3. Tests: there are different kinds of tests for the frontend and backend. The
   backend code gets tested with the [asp] command for running the backend
   AssemblyScript tests, and [jest] for running frontend tests. You can run
   both of these at once with `yarn test`.

Both contract and client-side code will auto-reload as you change source files.

Using
======

Gitpod has taken care of installing all the necessary tools and dependencies. At the bottom of Gitpod is a terminal which will display a link to follow:

    Server running at http://localhost:1234

A small dialog appears showing options similar to this:

![A Gitpod dialog box saying 'A service is available on port 1234' and giving options to 'Open Preview' or 'Open Browser'](assets/gitpod-port-1234.jpg)

The "Open Preview" option will open the site in a tab within the IDE. Note that Gitpod may need a little time to spin up the website. It's possible this step might require reloading after a brief pause.

The "Open Browser" option will open a new tab in your browser. Either option will work and is up to your preference.

Once you've opened the web app in your browser, log in and experiment with the simple "guest book" smart contract.

The "Save" button sends the text input to the blockchain, storing it as a string. The web app will reload with the new guest book messages automatically.

The "Save & Donate" button demonstrates attaching NEAR and a gas price when calling the smart contract's method `addMessage`. When the web app refreshes with "paid" messages, the user interface highlights them.

Data collection
===============
By using Gitpod in this project, you agree to opt-in to basic, anonymous analytics. No personal information is transmitted. Instead, these usage statistics aid in discovering potential bugs and user flow information.

  [smart contract docs]: https://docs.nearprotocol.com/docs/roles/developer/contracts/assemblyscript
  [asp]: https://www.npmjs.com/package/@as-pect/cli
  [jest]: https://jestjs.io/
  [NEAR]: https://nearprotocol.com/
  [AssemblyScript]: https://docs.assemblyscript.org/
  [React]: https://reactjs.org

'''
'''--- README.md ---
Guest Book
==========

[![Build Status](https://travis-ci.com/near-examples/guest-book.svg?branch=master)](https://travis-ci.com/near-examples/guest-book)

[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/near-examples/guest-book)

<!-- MAGIC COMMENT: DO NOT DELETE! Everything above this line is hidden on NEAR Examples page -->

Sign in with [NEAR] and add a message to the guest book! A starter app built with an [AssemblyScript] backend and a [React] frontend.

Quick Start
===========

To run this project locally:

1. Prerequisites: Make sure you have Node.js ≥ 12 installed (https://nodejs.org), then use it to install [yarn]: `npm install --global yarn` (or just `npm i -g yarn`)
2. Run the local development server: `yarn && yarn dev` (see `package.json` for a
   full list of `scripts` you can run with `yarn`)

Now you'll have a local development environment backed by the NEAR TestNet! Running `yarn dev` will tell you the URL you can visit in your browser to see the app.

Exploring The Code
==================

1. The backend code lives in the `/assembly` folder. This code gets deployed to
   the NEAR blockchain when you run `yarn deploy:contract`. This sort of
   code-that-runs-on-a-blockchain is called a "smart contract" – [learn more
   about NEAR smart contracts][smart contract docs].
2. The frontend code lives in the `/src` folder.
   [/src/index.html](/src/index.html) is a great place to start exploring. Note
   that it loads in `/src/index.js`, where you can learn how the frontend
   connects to the NEAR blockchain.
3. Tests: there are different kinds of tests for the frontend and backend. The
   backend code gets tested with the [asp] command for running the backend
   AssemblyScript tests, and [jest] for running frontend tests. You can run
   both of these at once with `yarn test`.

Both contract and client-side code will auto-reload as you change source files.

Deploy
======

Every smart contract in NEAR has its [own associated account][NEAR accounts]. When you run `yarn dev`, your smart contracts get deployed to the live NEAR TestNet with a throwaway account. When you're ready to make it permanent, here's how.

Step 0: Install near-cli
--------------------------

You need near-cli installed globally. Here's how:

    npm install --global near-cli

This will give you the `near` [CLI] tool. Ensure that it's installed with:

    near --version

Step 1: Create an account for the contract
------------------------------------------

Visit [NEAR Wallet] and make a new account. You'll be deploying these smart contracts to this new account.

Now authorize NEAR CLI for this new account, and follow the instructions it gives you:

    near login

Step 2: set contract name in code
---------------------------------

Modify the line in `src/config.js` that sets the account name of the contract. Set it to the account id you used above.

    const CONTRACT_NAME = process.env.CONTRACT_NAME || 'your-account-here!'

Step 3: change remote URL if you cloned this repo 
-------------------------

Unless you forked this repository you will need to change the remote URL to a repo that you have commit access to. This will allow auto deployment to Github Pages from the command line.

1) go to GitHub and create a new repository for this project
2) open your terminal and in the root of this project enter the following:

    $ `git remote set-url origin https://github.com/YOUR_USERNAME/YOUR_REPOSITORY.git`

Step 4: deploy!
---------------

One command:

    yarn deploy

As you can see in `package.json`, this does two things:

1. builds & deploys smart contracts to NEAR TestNet
2. builds & deploys frontend code to GitHub using [gh-pages]. This will only work if the project already has a repository set up on GitHub. Feel free to modify the `deploy` script in `package.json` to deploy elsewhere.

  [NEAR]: https://nearprotocol.com/
  [yarn]: https://yarnpkg.com/
  [AssemblyScript]: https://docs.assemblyscript.org/
  [React]: https://reactjs.org
  [smart contract docs]: https://docs.nearprotocol.com/docs/roles/developer/contracts/assemblyscript
  [asp]: https://www.npmjs.com/package/@as-pect/cli
  [jest]: https://jestjs.io/
  [NEAR accounts]: https://docs.nearprotocol.com/docs/concepts/account
  [NEAR Wallet]: https://wallet.nearprotocol.com
  [near-cli]: https://github.com/nearprotocol/near-cli
  [CLI]: https://www.w3schools.com/whatis/whatis_cli.asp
  [create-near-app]: https://github.com/nearprotocol/create-near-app
  [gh-pages]: https://github.com/tschaub/gh-pages

'''
'''--- TUTORIAL.md ---
This tutorial goes through Smart Contract I made for NEAR Challenge #7. See list below of features we will be going through.

# Features

**Candidates**

-   Add Candidate
-   Add Candidate - Trump Mode
-   Add Candidate - Hitler Mode
-   Ask Cat to Revive Candidate
-   Remove Candidate
-   View Candidates

**Votes**

-   Vote
-   Vote - 360 No Scope Mode
-   Remove Your Vote
-   View Votes

**Election**

-   Get Leading Candidate
-   Start New Election

**Utility**

-   View Logs

# Setup

1. Follow NEAR Hackaton guide to setup environment - https://docs.near.org/docs/develop/basics/hackathon-startup-guide
2. Clone or download this repository
3. Update `CONTRACT_NAME` in `src\config.js` with your NEAR account
4. Install dependencies with the command below

```
yarn install
```

# Smart Contract

Essentially, this is a program that runs on blockchain. We will go through my contract step by step after which you should be able to make your own modifications and deploy your version of Voting system.

# Lets Dig In!

Open up `assembly\main.ts` file right at the beginning I setup few data structures required by our Voting System.

## Candidate class

```
@nearBindgen
class Candidate {
	avatar: u64;
	voteCount: number;
	alive: boolean;

	constructor(public name: string) {
		this.avatar = context.blockIndex;
		this.voteCount = 0;
		this.alive = true;
	}
}
```

First line `@nearBindgen` is a special as it allows NEAR serialize our Candidate objects to be serialized on blockchain.

After that we define few properties (`avatar`, `voteCount`, `alive`) our voting system will use to manage Candidate state. In the constructor we set our default for whenever new Candidate is created.

In addition, we have declared one class property inside the constructor argument list. This is a shorthand to allow that argument to be passed in when object is created, set that properties value.

There is a basic Vote class there as well but nothing different nor important is there but it could be extended with additional information, e.g. when vote was made.

## CallResponse class

When creating backend systems you always want to have a robust and consistent way you can get data back to be manipulated or displayed on frontend so we define this basic structure to be used in all out call functions.

```
@nearBindgen
class CallResponse {
	constructor(
		public success: boolean,
		public messages: string[],
	) {

	}
}
```

`success` property indicates if request was successful to know how and which response to display to user in a user friendly way.
`messages` in our case explain what went wrong with out request to end user or communicate other information - in our case for entertainment :)

## ActionLog class

All important system should have an ability to track down who changed what in the system. In our case it's who (which user) interacted with our system in what way (voted, added candidate, started a new election).

```
@nearBindgen
class ActionLog {
	constructor(
		public user: string,
		public action: string,
	) {

	}
}
```

`user` contains their username and `action` explains what they did.

## Data Storage

In order for system to work and not just forget what it knows after each command is executed we need to preserve that data somewhere. You can read more about `PersistentUnorderedMap` and other storage options here - https://docs.near.org/docs/concepts/data-storage#persistentunorderedmap

```
const candidates = new PersistentUnorderedMap<number, Candidate>("m");
const votes = new PersistentUnorderedMap<string, Vote>("n");
const logs = new PersistentUnorderedMap<number, ActionLog>("b");
```

Important thing to keep in mind is that you need to specify different name (`m`, `n`, `b`) for each one of them. Otherwise, they all will point to the same data causing unexpected results.

## Helpers

In order to keep the rest of the code cleaner it's often useful to create some helper functions that handle repeated tasks for you.

### Random Number & Boolean Generation

In NEAR to work with randomness we need to user `math.randomBuffer` that comes from `near-sdk-core` - https://near.github.io/near-sdk-as/globals.html that returns X amount of random numbers for you to work with.

```
function randomNumber(min: number = 0, max: number = 100): i32 {
	const buf = math.randomBuffer(4);
	return i32(min + (((((0xff & buf[0]) << 24) |
	((0xff & buf[1]) << 16) |
	((0xff & buf[2]) << 8) |
	((0xff & buf[3]) << 0)) as number) % (max - min)
	));
}

function randomBoolean(): boolean {
	return randomNumber(0, 100) >= 50;
}
```

To get random boolean value we reuse our existing helper function `randomNumber` for simplicity.

### Responses & Logs

Other common functions I tend to use is `response` and `log`. These wrappers are very useful in a case where at some point you want to change how they work then you only have to do it in one place instead of digging through the whole code.

```
function response(messages: string[], success: boolean): CallResponse {
	return new CallResponse(success, messages)
}

function log(message: string): void {
	const logEntries = logs.keys();
	logs.set(logEntries.length, new ActionLog(
		context.sender,
		message,
	));
}
```

# Add Candidate

First, we need ability to add new candidates to the election.

```
export function addCandidate(name: string): CallResponse {
	const candidate = new Candidate(name);

	candidates.set(candidates.length, candidate);

	log('Added candidate ' + candidate.name);

	return response([candidate.name + ' successfully added to candidate list!'], true);
}
```

There is only one argument `name` that we require and that's used to initialize a new Candidate. After that we store this candidate in our storage using `candidates.set(candidates.length, candidate)`. First parameter for set method is the key on how we want to identify and later retrieve our candidate. I simply use `candidates.length` which returns number of already existing candidates giving us a unique identifier for our Candidate.

After that we log user action and respond with user friendly message.

# View Candidate

Users will want to know all available candidates and their votes. Thanks to `PersistentUnorderedMap` we can very easily return all our candidates using `candidates.entries()` that creates an array of key/value pairs of our candidates.

```
export function viewCandidates(): MapEntry<number, Candidate>[] {
	return candidates.entries();
}
```

# Vote

And now, the most important function - ability to vote! This one is a bit more complex so I'll split it in parts.

```
export function vote(candidateId: string): CallResponse {
	const candidateIntId = parseInt(candidateId);

	if (votes.contains(context.sen
	der)) {
		return response(['You have already voted!'], false);
	}
```

First, we check if user has already made a vote in the past in current election. If that's the case we respond with error message and mark request as unsuccessful.

```
	const candidate = candidates.get(candidateIntId);

	if (candidate == null) {
		return response(["Candidate doesn't exist!"], false);
	}
```

Then we check if candidate user is voting for exists in the system. If it doesn't then we again respond with error message.

```
	if (candidate.alive) {
		candidate.voteCount += 1;

		candidates.set(candidateIntId, candidate);

		votes.set(context.sender, new Vote(candidateIntId));

		log('Voted for ' + candidate.name);

		return response(["Successfully voted for " + candidate.name + "!"], true);
```

Now, that we know user can vote for a valid candidate, we check if candidate is alive. If he is then we increase candidates `voteCount`, save the updated candidate and store information that this user voted for this participant.

After that we log their action and respond with successful request and message.

```
	} else {
		return response([
			"You can't vote for the dead!",
			"Or can you?",
			"No, no, you can't :p",
		], false);
	}
}
```

Finally, if candidate is indeed dead (can happen through other commands in the system) we return a small entertaining joke message and mark request as failed.

# That's It Folks!

This covers the basic functionallity of our voting system. If you keep scrolling down in `assembly\main.ts` you will find additional commands to explore and experiment with.

Now that we have gone through the code - we want to build and deploy our voting system to NEAR.

# Build & Deploy

Before you build and deploy your Smart Contract (our Voting System) make sure that you have logged in using NEAR by typing `near login` in console and updating `CONTRACT_NAME` in `src\config.js` with your username as that's where the contract will be deployed.

Now, build the contract by executing command below in root directory of the project.

```
yarn run build:contract
```

Then deploy it using command below

```
near deploy
```

# Commands

Now, that your Smart Contract is deployed you can call these methods to interact with it.

**IMPORTANT** - replace `near-challenge-7.testnet` and `martint.testnet` with your own username.

## Add Candidate

**Command**

```
near call near-challenge-7.testnet addCandidate '{ "name": "Trump" }' --accountId martint.testnet --gas 300000000000000
```

**Result**

```
{
  success: true,
  messages: [ 'Trump successfully added to candidate list!' ]
}
```

## View Candidates

**Command**

```
near view near-challenge-7.testnet viewCandidates
```

**Result**

```
[
  {
    key: 0,
    value: { avatar: '72724247', voteCount: 0, alive: true, name: 'Trump' }
  },
  {
    key: 1,
    value: { avatar: '72724317', voteCount: 3998, alive: true, name: 'Trump Junior' }
  },
  {
    key: 2,
    value: { avatar: '72724344', voteCount: 1, alive: true, name: 'Martin' }
  }
]
```

## Vote

**Command**

```
near call near-challenge-7.testnet vote '{ "candidateId": "2" }' --accountId martint.testnet --gas 300000000000000
```

**Result**

```
{
  success: true,
  messages: [ 'Successfully voted for Martin!' ]
}

or

{
  success: false,
  messages: [ 'You have already voted!' ]
}
```

Feel free to go through the rest of the commands/functions in `assembly\main.ts` and see exactly what they do and how they respond here - https://github.com/MartinTale/near-challenge-7/blob/main/DETAILS.md

'''
'''--- as-pect.config.js ---
module.exports = require('near-sdk-as/imports')

'''
'''--- asconfig.json ---
{
  "extends": "near-sdk-as/asconfig.json",
  "entry": "assembly/main.ts",
  "options": {
    "binaryFile": "out/main.wasm"
  }
} 

'''
'''--- assembly/as_types.d.ts ---
/// <reference types="near-sdk-as/assembly/as_types" />

'''
'''--- assembly/main.ts ---
import {
	context,
	PersistentUnorderedMap,
	MapEntry,
} from "near-sdk-as";

@nearBindgen
class Pet {
	donations: number;
	
	constructor() {
		this.donations = 0;
	}
}

@nearBindgen
class CallResponse {
	constructor(
		public success: boolean,
		public messages: string[],
	) {

	}
}

@nearBindgen
class ActionLog {
	constructor(
		public user: string,
		public action: string,
	) {

	}
}

// const petList = ['Cat', 'Dog', 'Human', 'Pig', 'Sheep', 'Cow', 'Chicken', 'Guinea Pig', 'Duck', 'Bee', 'Horse', 'Bird', 'Fish', 'Rabbit'];
const petList = ['Cat', 'Dog', 'Human'];
const pets = new PersistentUnorderedMap<string, Pet>("m");
const logs = new PersistentUnorderedMap<number, ActionLog>("b");

function response(messages: string[], success: boolean): CallResponse {
	return new CallResponse(success, messages)
}

function log(message: string): void {
	const logEntries = logs.keys();
	logs.set(logEntries.length, new ActionLog(
		context.sender,
		message,
	));
}

export function donate(fund: string): CallResponse {
	const donation = parseFloat(context.attachedDeposit.toString()) / (10 ** 24);
	if (donation == 0) {
		return response(['Try attaching deposit!'], false);
	}

	if (petList.includes(fund) == false) {
		return response([fund + " fund doesn't exist!"], false);
	}

	if (pets.contains(fund)) {
		const pet = pets.get(fund);

		if (pet) {
			pet.donations += donation;
			pets.set(fund, pet);

			log('Donated ' + donation.toString() + ' NEAR to ' + fund + ' fund!')

			return response([
				'Thank you for ' + donation.toString() + ' NEAR donation!',
			], true);
		} else {
			return response(["This shouldn't happen!"], false);
		}
	} else {
		const pet = new Pet();

		pet.donations += donation;
		pets.set(fund, pet);

		log('Donated ' + donation.toString() + ' NEAR to ' + fund + ' fund!')

		return response([
			'Thank you for ' + donation.toString() + ' NEAR donation!',
		], true);
	}
}

export function viewPets(): MapEntry<string, Pet>[] {
	return pets.entries();
}

export function viewLogs(): MapEntry<number, ActionLog>[] {
	return logs.entries().slice(-20);
}

'''
'''--- assembly/model.ts ---
import { context, u128, PersistentUnorderedMap } from "near-sdk-as";

@nearBindgen
export class User {
  premium: boolean;
  // deposits: Deposit[];
  timestamp: u64;
  votes: number;
  constructor(
    public name: string,
    public avatar: string
  ) {
    this.premium = context.attachedDeposit >= u128.from("10000000000000000000000");
    // this.deposits.push(new Deposit());
    this.timestamp = context.blockTimestamp / 1e6;
    this.votes = 0;
  }
}

export const users = new PersistentUnorderedMap<string, User>("m");

'''
'''--- assembly/tsconfig.json ---
{
  "extends": "../node_modules/assemblyscript/std/assembly.json",
  "include": [
    "./**/*.ts"
  ]
}

'''
'''--- babel.config.js ---
module.exports = {
  presets: ['@babel/preset-env', '@babel/preset-react']
}

'''
'''--- commands.sh ---
near call dev-1638315332876-16501550419841 donate '{ "fund": "Cat" }' --accountId martint.testnet --gas 300000000000000 --deposit 0.00001
near call dev-1638315332876-16501550419841 donate '{ "fund": "Cat" }' --accountId martint.testnet --gas 300000000000000 --deposit 1.2

near view dev-1638315332876-16501550419841 viewPets
near view dev-1638315332876-16501550419841 viewLogs

'''
'''--- package.json ---
{
	"name": "guest-book",
	"version": "0.1.0",
	"license": "(MIT AND Apache-2.0)",
	"scripts": {
		"build": "yarn build:contract && yarn build:web",
		"build:contract": "asb",
		"build:contract:debug": "asb --target debug",
		"build:web": "parcel build src/index.html --public-url ./",
		"deploy": "yarn build && near deploy && gh-pages -d dist/",
		"dev": "yarn build:contract:debug && near dev-deploy && nodemon --watch assembly -e ts --exec yarn dev:start",
		"lint": "eslint \"./**/*.js\" \"./**/*.jsx\"",
		"start": "yarn deploy && parcel src/index.html",
		"dev:start": "env-cmd -f ./neardev/dev-account.env parcel src/index.html",
		"test": "yarn build:contract:debug && asp && jest"
	},
	"devDependencies": {
		"@babel/core": "^7.14.0",
		"@babel/preset-env": "^7.14.2",
		"@babel/preset-react": "^7.13.13",
		"@typescript-eslint/eslint-plugin": "^4.22.1",
		"@typescript-eslint/parser": "^4.22.1",
		"babel-jest": "^26.6.3",
		"eslint": "^7.26.0",
		"gh-pages": "^3.1.0",
		"jest": "^26.6.3",
		"jest-environment-node": "^26.6.2",
		"near-cli": "^2.0.0",
		"near-sdk-as": "3.2.3",
		"nodemon": "^2.0.7",
		"parcel-bundler": "^1.12.5",
		"react-test-renderer": "^17.0.2",
		"sass": "^1.32.13",
		"typescript": "^4.2.4"
	},
	"dependencies": {
		"big.js": "^6.1.1",
		"env-cmd": "^10.1.0",
		"near-api-js": "^0.41.0",
		"prop-types": "^15.7.2",
		"react": "^17.0.2",
		"react-dom": "^17.0.2",
		"regenerator-runtime": "^0.13.7"
	},
	"resolutions": {
		"@babel/preset-env": "7.13.8"
	},
	"jest": {
		"projects": [
			{
				"displayName": "User interface tests",
				"testEnvironment": "jsdom",
				"testMatch": [
					"<rootDir>/src/tests/ui/*.js"
				]
			},
			{
				"displayName": "Integration tests",
				"testEnvironment": "near-cli/test_environment",
				"testMatch": [
					"<rootDir>/src/tests/integration/*.js"
				]
			}
		],
		"testPathIgnorePatterns": [
			"assembly/*"
		]
	},
	"browserslist": {
		"production": [
			">0.2%",
			"not dead",
			"not op_mini all"
		],
		"development": [
			"last 1 chrome version",
			"last 1 firefox version",
			"last 1 safari version"
		]
	}
}

'''
'''--- src/assets/logo-black.svg ---
<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#24272a"/><stop offset=".42" stop-color="#24272a" stop-opacity="0"/><stop offset=".59" stop-color="#24272a" stop-opacity="0"/><stop offset=".81" stop-color="#24272a"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#24272a"/></svg>
'''
'''--- src/assets/logo-white.svg ---
<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#fff"/><stop offset=".42" stop-color="#fff" stop-opacity="0"/><stop offset=".59" stop-color="#fff" stop-opacity="0"/><stop offset=".81" stop-color="#fff"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#fff"/></svg>
'''
'''--- src/config.js ---
const CONTRACT_NAME = process.env.CONTRACT_NAME || "near-challenge-10.testnet";

function getConfig(env) {
	switch (env) {
		case "mainnet":
			return {
				networkId: "mainnet",
				nodeUrl: "https://rpc.mainnet.near.org",
				contractName: CONTRACT_NAME,
				walletUrl: "https://wallet.near.org",
				helperUrl: "https://helper.mainnet.near.org",
			};
		// This is an example app so production is set to testnet.
		// You can move production to mainnet if that is applicable.
		case "production":
		case "development":
		case "testnet":
			return {
				networkId: "testnet",
				nodeUrl: "https://rpc.testnet.near.org",
				contractName: CONTRACT_NAME,
				walletUrl: "https://wallet.testnet.near.org",
				helperUrl: "https://helper.testnet.near.org",
			};
		case "betanet":
			return {
				networkId: "betanet",
				nodeUrl: "https://rpc.betanet.near.org",
				contractName: CONTRACT_NAME,
				walletUrl: "https://wallet.betanet.near.org",
				helperUrl: "https://helper.betanet.near.org",
			};
		case "local":
			return {
				networkId: "local",
				nodeUrl: "http://localhost:3030",
				keyPath: `${process.env.HOME}/.near/validator_key.json`,
				walletUrl: "http://localhost:4000/wallet",
				contractName: CONTRACT_NAME,
			};
		case "test":
		case "ci":
			return {
				networkId: "shared-test",
				nodeUrl: "https://rpc.ci-testnet.near.org",
				contractName: CONTRACT_NAME,
				masterAccount: "test.near",
			};
		case "ci-betanet":
			return {
				networkId: "shared-test-staging",
				nodeUrl: "https://rpc.ci-betanet.near.org",
				contractName: CONTRACT_NAME,
				masterAccount: "test.near",
			};
		default:
			throw Error(
				`Unconfigured environment '${env}'. Can be configured in src/config.js.`
			);
	}
}

module.exports = getConfig;

'''
'''--- src/global.css ---
@import url("https://fonts.googleapis.com/css2?family=Grandstander:wght@400;700&display=swap");

* {
	box-sizing: border-box;
}

html {
	--bg: #efefef;
	--fg: #1e1e1e;
	--gray: #555;
	--light-gray: #ccc;
	--shadow: #e6e6e6;
	--success: rgb(90, 206, 132);
	--primary: #ff585d;
	--secondary: #0072ce;

	background: #292929;
	color: var(--fg);
	font-family: "Grandstander", cursive;
	font-size: calc(0.9em + 0.5vw);
	line-height: 1.3;
}

body {
	margin: 0;
	padding: 1em;
}

body * {
	color: #fff;
	font-family: Grandstander, sans-serif;
	font-weight: 300;
	line-height: 1.5;
	letter-spacing: 1.5px;
	text-shadow: 1px 1px 2px #000;
	font-size: 1.15rem;
	text-align: center;
	transition: all 0.25s;
}

main {
	display: flex;
	justify-content: center;
	align-items: center;
	flex-direction: column;
}

.avatar-select {
	display: flex;
	flex-direction: row-reverse;
}

h1 {
	margin-top: 0;
	text-align: center;
	font-weight: normal;
	font-size: 2rem;
	text-shadow: 0 0 12px #4d84b9;
}

h1 * {
	margin-top: 0;
	text-align: center;
	font-weight: normal;
	font-size: 2rem;
	text-shadow: 0 0 12px #4d84b9;
}

.accountId {
	font-size: 0.5em;
	display: block;
}

hr {
	margin-bottom: 2rem;
}

ul.user-list {
	display: flex;
	flex-direction: column;
	margin: 0;
	padding: 0;
	justify-content: center;
	align-items: center;
}

ul.user-list li {
	display: flex;
	width: 100%;
	height: 140px;
	margin: 0 15px;
	justify-content: center;
	align-items: center;
	overflow: hidden;
	filter: drop-shadow(0px 0px 2px #000) drop-shadow(0px 0px 5px #000);
	padding: 0;
	position: relative;
	background-color: #191919;
	margin-bottom: 1rem;
}

ul.user-list li:hover {
	background-color: #111;
}

.vote span {
	font-size: 1.5rem;
}

.vote[disabled] * {
	opacity: 0;
}

.vote[disabled] {
	width: 40px;
	height: 40px;
	padding: 0;
	margin-right: 1.6rem;
	border-radius: 50%;
	animation: pulse-black 2s infinite;
}

@keyframes pulse-black {
	0% {
		transform: scale(0.95);
		box-shadow: 0 0 0 0 rgba(0, 0, 0, 0.7);
	}

	70% {
		transform: scale(1);
		box-shadow: 0 0 0 10px rgba(0, 0, 0, 0);
	}

	100% {
		transform: scale(0.95);
		box-shadow: 0 0 0 0 rgba(0, 0, 0, 0);
	}
}

.ribbon {
	display: none !important;
	position: absolute;
	top: 0;
	left: 0;
	width: 60px !important;
	border-bottom-right-radius: 10px;
}

ul.user-list li.premium {
	border-radius: 4px;
	filter: drop-shadow(0px 0px 5px #8f7b10);
}

.premium .ribbon {
	display: flex !important;
}

.ribbon span {
	padding: 0.5rem;
	display: flex;
	justify-content: center;
	align-items: center;
	width: 60px;
	color: #8f7b10;
	font-weight: bold;
}

ul.user-list li > div {
	width: 100%;
	overflow: hidden;
	margin-right: 1rem;
	display: flex;
	flex-direction: column;
}

ul.user-list li > div * {
	text-align: left !important;
}

ul.user-list li > div small {
	margin-bottom: 0.15rem;
	margin-top: 0.15rem;
}

ul.user-list li .rank {
	margin-top: 1rem;
	font-size: 1rem;
	font-weight: normal;
}

ul.user-list li .rank {
	font-size: 2rem;
	font-weight: bold;
	width: auto;
	margin-left: 1rem;
}

ul.user-list li img {
	width: 100px;
	height: 100px;
	margin: 10px;
	margin-right: 20px;
}

ul.user-list li button {
	margin-right: 1rem;
}

ul.user-list li strong {
	color: #ccc;
	font-size: 1.25em;
	white-space: nowrap;
	text-overflow: clip;
	width: 100%;
	text-align: center;
}

ul.user-list li small {
	color: #999;
	font-size: 0.75em;
	white-space: nowrap;
	text-overflow: clip;
	width: 100%;
	text-align: center;
}

.header {
	padding: 1rem;
	text-align: center;
	font-size: 4em;
}

p {
	color: #888;
	text-align: center;
}

a,
.link {
	color: var(--primary);
	text-decoration: none;
}
a:hover,
a:focus,
.link:hover,
.link:focus {
	text-decoration: underline;
}
a:active,
.link:active {
	color: var(--secondary);
}

#avatar-container {
	width: 150px;
	height: 150px;
	margin-bottom: 1rem;
	filter: drop-shadow(0px 0px 5px black) drop-shadow(0px 0px 10px black);
}

#refresh-avatar {
	fill: #fff;
	padding: 3px 20px;
	display: flex;
	justify-content: center;
	align-items: center;
}

#fieldset {
	display: flex;
	flex-direction: column;
	justify-content: center;
	align-items: center;
	padding: 0;
}

button,
input {
	font: inherit;
	outline: none;
}

button {
	background-color: #181818;
	border-radius: 5px;
	border: none;
	color: #efefef;
	cursor: pointer;
	padding: 0.3em 0.75em;
	transition: transform 30ms;
	justify-content: center;
	width: 100%;
}
button:hover,
button:focus {
	filter: drop-shadow(0px 0px 5px #444) drop-shadow(0px 0px 10px #444);
}
button:active {
	filter: drop-shadow(0px 0px 5px #444) drop-shadow(0px 0px 10px #444);
}
button.link {
	background: none;
	border: none;
	box-shadow: none;
	display: inline;
}
[disabled] button,
button[disabled] {
	box-shadow: none;
	background-color: var(--light-gray);
	color: gray;
	cursor: not-allowed;
	transform: none;
}
[disabled] button {
	text-indent: -900em;
	width: 2em;
	position: relative;
}
[disabled] button:after {
	content: " ";
	display: block;
	width: 0.8em;
	height: 0.8em;
	border-radius: 50%;
	border: 2px solid #fff;
	border-color: var(--fg) transparent var(--fg) transparent;
	animation: loader 1.2s linear infinite;
	position: absolute;
	top: 0.45em;
	right: 0.5em;
}
@keyframes loader {
	0% {
		transform: rotate(0deg);
	}
	100% {
		transform: rotate(360deg);
	}
}

fieldset {
	border: none;
	padding: 2em 0;
}

input {
	background-color: var(--shadow);
	border: none;
	border-radius: 5px 0 0 5px;
	caret-color: var(--primary);
	color: inherit;
	padding: 0.25em 1em;
	width: 100%;
	border-radius: 5px;
	background: #222;
	border: 3px dashed #333;
	padding-top: 10px;
}
input::selection {
	background-color: var(--secondary);
	color: #efefef;
}
input:focus {
	box-shadow: 0 0 10em rgba(0, 0, 0, 0.02) inset;
}

code {
	color: var(--gray);
}

li {
	padding-bottom: 1em;
}

.box {
	box-shadow: 0 0 5px #000;
	background: #222;
	max-width: 800px;
	padding: 1.5rem 1rem;
	margin: 1rem auto 0;
	border-radius: 3px;
	position: relative;
}

strong {
	color: #bbb;
	font-weight: 400;
}

.sections {
	display: flex;
	flex-wrap: wrap;
	justify-content: center;
	align-items: flex-start;
}

.sections > div {
	width: 600px;
	margin: 0 1rem 2rem 1rem;
}

.icon {
	font-size: 3rem;
}

#new-candidate-button {
	position: absolute;
	top: 1rem;
	right: 1rem;
	width: 50px;
	height: 50px;
	fill: #0c79cf;
	cursor: pointer;
}

#new-candidate-button:hover {
	filter: drop-shadow(0px 0px 5px #111) drop-shadow(0px 0px 10px #111);
}

#new-candidate-popup {
	display: flex;
	position: fixed;
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;
	background-color: rgb(0 0 0 / 50%);
	z-index: 1;
}

#new-candidate-popup > div {
	display: flex;
	position: fixed;
	top: 3rem;
	left: 50%;
	margin-left: -300px;
	width: 600px;
	z-index: 2;
	flex-direction: column;
}

#close-new-candidate-popup {
	position: absolute;
	top: 0.5rem;
	right: 0.5rem;
	width: 50px;
	height: 50px;
	fill: #555;
	cursor: pointer;
	background: #292929;
	padding: 0.25rem;
	border-radius: 50%;
}

#close-new-candidate-popup:hover {
	filter: drop-shadow(0px 0px 5px #111) drop-shadow(0px 0px 10px #111);
}

.loading {
	animation: spin 4s linear infinite;
	width: 35px;
	height: 35px;
	fill: #666;
}

@keyframes spin {
	100% {
		-webkit-transform: rotate(360deg);
		transform: rotate(360deg);
	}
}

.candidate {
	display: flex;
	border-bottom: 1px solid #333;
	margin-bottom: 1rem;
	padding-bottom: 1rem;
	justify-content: space-between;
	align-items: flex-end;
}

.candidate:last-child {
	border-bottom: 0;
	margin-bottom: 0;
	padding-bottom: 0;
}

.candidate img {
	width: 80px;
	height: 80px;
}

.candidate .details {
	display: flex;
	flex-direction: column;
	justify-content: center;
	align-items: flex-start;
	width: 100%;
	padding-left: 0.5rem;
	padding-right: 0.5rem;
	overflow: hidden;
}

.candidate .details strong {
	color: #ddd;
}

.candidate button {
	display: flex;
	justify-content: center;
	align-items: center;
	width: 60px;
	height: 60px;
	margin-top: 0.25rem;
	padding: 0.35rem;
	fill: #999;
	margin-bottom: 0;
	font-size: 2rem;
	padding-top: 18px;
}

.candidate button.vote {
	fill: rgb(115, 171, 223);
}

.candidate button.kill {
	fill: #ff585d;
}

.candidate button.revive {
	fill: #fff;
}

#save-new-candidate {
	width: 100% !important;
}

.candidate.dead button.kill {
	display: none;
}

.candidate.alive button.revive {
	display: none;
}

.vote {
	display: flex;
	border-bottom: 1px solid #333;
	margin-bottom: 1rem;
	padding-bottom: 1rem;
	justify-content: space-between;
	align-items: center;
}

.vote:last-child {
	border-bottom: 0;
	margin-bottom: 0;
	padding-bottom: 0;
}

.vote .icon {
	width: 40px;
	fill: #73aadf;
	height: 40px;
}

.vote .details {
	justify-content: center;
	display: flex;
	flex-direction: column;
	align-items: flex-start;
}

.vote span {
	font-size: 1rem;
	color: #999999;
}

.vote strong {
	color: #ddd;
}

.log {
	border-bottom: 1px solid #333;
	margin-bottom: 0.75rem;
	padding-bottom: 0.25rem;
	font-size: 0.75rem;
	display: flex;
	flex-direction: column;
	align-items: flex-start;
}

.log:last-child {
	border-bottom: 0;
	margin-bottom: 0;
	padding-bottom: 0;
}

.log span {
	font-size: 0.75rem;
	color: #999999;
	text-align: left;
}

.log strong {
	font-size: 0.75rem;
	color: #ddd;
	text-align: left;
}

.modes {
	display: flex;
	margin-top: 1rem;
	justify-content: space-evenly;
}

.modes button {
	width: 150px;
	height: 150px;
	padding: 1rem;
	display: flex;
	justify-content: center;
	align-items: center;
}

.modes img {
	height: 100%;
	width: 100%;
}

#snowfall-element {
	position: fixed;
	z-index: 10;
	top: 0;
	left: 0;
	height: 100%;
	width: 100%;
	pointer-events: none;
}

#response {
	width: 100%;
	margin: 0;
	justify-content: flex-start;
	display: flex;
	align-items: flex-start;
	padding: 0.75rem 1rem;
	flex-direction: column;
}

#response span {
	color: #999;
	text-align: left;
	line-height: 1.25rem;
	margin-bottom: 0.75rem;
}

#response.error {
	box-shadow: 0 0 5px rgb(255 0 0);
	background: rgb(255 88 93 / 5%);
}

#response.error span {
	color: #ff8080;
}

#response.success {
	box-shadow: 0 0 5px green;
	background: rgb(88 255 124 / 5%);
}

#response.success span {
	color: #99ff80;
}

.shake {
	animation-name: shake;
	animation-duration: 500ms;
}

@-webkit-keyframes shake {
	0% {
		-webkit-transform: translate(2px, 1px) rotate(0deg);
	}
	10% {
		-webkit-transform: translate(-1px, -2px) rotate(-1deg);
	}
	20% {
		-webkit-transform: translate(-3px, 0px) rotate(1deg);
	}
	30% {
		-webkit-transform: translate(0px, 2px) rotate(0deg);
	}
	40% {
		-webkit-transform: translate(1px, -1px) rotate(1deg);
	}
	50% {
		-webkit-transform: translate(-1px, 2px) rotate(-1deg);
	}
	60% {
		-webkit-transform: translate(-3px, 1px) rotate(0deg);
	}
	70% {
		-webkit-transform: translate(2px, 1px) rotate(-1deg);
	}
	80% {
		-webkit-transform: translate(-1px, -1px) rotate(1deg);
	}
	90% {
		-webkit-transform: translate(2px, 2px) rotate(0deg);
	}
	100% {
		-webkit-transform: translate(1px, -2px) rotate(-1deg);
	}
}

.logged-in-display {
	display: none;
}

'''
'''--- src/index.html ---
<!DOCTYPE html>
<html>

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="icon" href="./assets/favicon.ico" />
  <link rel="apple-touch-icon" href="./assets/favicon.ico" />
  <title>Pet Fund</title>
  <link rel="stylesheet" href="global.css">
</head>

<body id="snow">
  <canvas id="snowfall-element"></canvas>
  <main id="signed-out-flow" class="box" style="display: none; max-width: 1250px">
    <div class="header">🐾</div>
    <h1><strong>Pet Fund</strong>!</h1>
    <h1 data-behavior="greeting"></h1>
    <p>Sign in to <strong>donate</strong> for your <strong>favorite pet</strong>! 🥰</p>
    <p><strong>100% of donations</strong> will be delivered to <strong>pet charity</strong>! 🏠</p>
    <p>Yes, you can keep humans as pets too...</p>
    <p>Right? Right??? 😅</p>
    <p style="text-align: center;     margin: 0;margin-bottom: -0.5rem;">
      <button id="sign-in-button">Sign in</button>
    </p>
  </main>

  <div id="signed-in-flow" style="display: none">
    <button class="link" style="float: right; position: fixed; top: 1rem; right: 1rem; width: auto;"
      id="sign-out-button">
      Sign out
    </button>
    <div>
      <div style="display: flex; margin-bottom: 2rem; justify-content: center; width: 100%;">
        <div class="box" style="padding: 1rem 3rem; margin: 0; margin-right: 1rem">
          <strong style="font-size: 3.25rem">🐾</strong>
          <h1 style="margin-bottom: 0;">
            <strong data-behavior="account-id" class="accountId"></strong>
            <span id="balance"></span>
          </h1>
        </div>
      </div>
    </div>
  </div>
  <div>
    <div>
      <div class="sections">
        <div>
          <div class="box logged-in-display" style="padding: 0.75rem 0.25rem 0.25rem 0.25rem;justify-content: center;">
            <h1 style="margin-bottom: 0;">Pick Your Favorite</h1>
          </div>
          <div id="candidate-list" class="box">
            <div class="candidate alive">
              <div class="icon">🐱</div>
              <div class="details">
                <strong>Cat Fund (<span id="cat-donation-amount">0.0000</span> NEAR)</strong>
                <input class="logged-in-display" type="number" id="cat-donation" value="3.14"
                  placeholder="Enter donation amount!" />
              </div>
              <div class="actions logged-in-display">
                <button id="cat-donate">💸</button>
              </div>
            </div>
            <div class="candidate alive">
              <div class="icon">🐶</div>
              <div class="details">
                <strong>Dog Fund (<span id="dog-donation-amount">0.0000</span> NEAR)</strong>
                <input class="logged-in-display" type="number" id="dog-donation" value="3.14"
                  placeholder="Enter donation amount!" />
              </div>
              <div class="actions logged-in-display">
                <button id="dog-donate">💸</button>
              </div>
            </div>
            <div class="candidate alive">
              <div class="icon">🧑</div>
              <div class="details">
                <strong>Human Fund (<span id="human-donation-amount">0.0000</span> NEAR)</strong>
                <input class="logged-in-display" type="number" id="human-donation" value="3.14"
                  placeholder="Enter donation amount!" />
              </div>
              <div class="actions logged-in-display">
                <button id="human-donate">💸</button>
              </div>
            </div>
          </div>
        </div>
        <div>
          <div class="box" style="padding: 0.75rem 0.25rem 0.25rem 0.25rem">
            <h1 style="margin-bottom: 0;">Donations</h1>
            <strong>Total: <span id="total-donations">1.21321</span> NEAR</strong>
          </div>
          <div class="box" id="log-list"></div>
        </div>
      </div>
    </div>
  </div>

  <script src="./index.js"></script>
</body>

</html>

'''
'''--- src/index.js ---
import Big from "big.js";
import "regenerator-runtime/runtime";

import { initContract, login, logout } from "./utils";

const BOATLOAD_OF_GAS = "300000000000000";

window.addEventListener("DOMContentLoaded", (event) => {
	const catDonationAmount = document.getElementById("cat-donation-amount");
	const dogDonationAmount = document.getElementById("dog-donation-amount");
	const humanDonationAmount = document.getElementById(
		"human-donation-amount"
	);

	const catnewDonationAmount = document.getElementById("cat-donation");
	const dognewDonationAmount = document.getElementById("dog-donation");
	const humannewDonationAmount = document.getElementById("human-donation");

	const donateToCat = document.getElementById("cat-donate");
	const donateToDog = document.getElementById("dog-donate");
	const donateToHuman = document.getElementById("human-donate");

	donateToCat.onclick = async () => {
		try {
			console.log(
				{
					fund: "Cat",
				},
				BOATLOAD_OF_GAS,
				Big(catnewDonationAmount.value || "0")
					.times(10 ** 24)
					.toFixed()
			);
			await window.contract.donate(
				{
					fund: "Cat",
				},
				BOATLOAD_OF_GAS,
				Big(catnewDonationAmount.value || "0")
					.times(10 ** 24)
					.toFixed()
			);

			updateCandidates();
		} catch (e) {
			console.log(e);
			alert(
				"Something went wrong! " +
					"Maybe you need to sign out and back in? " +
					"Check your browser console for more info."
			);
			throw e;
		}
	};
	donateToDog.onclick = async () => {
		try {
			console.log(
				{
					fund: "Dog",
				},
				BOATLOAD_OF_GAS,
				Big(dognewDonationAmount.value || "0")
					.times(10 ** 24)
					.toFixed()
			);
			await window.contract.donate(
				{
					fund: "Dog",
				},
				BOATLOAD_OF_GAS,
				Big(dognewDonationAmount.value || "0")
					.times(10 ** 24)
					.toFixed()
			);

			updateCandidates();
		} catch (e) {
			console.log(e);
			alert(
				"Something went wrong! " +
					"Maybe you need to sign out and back in? " +
					"Check your browser console for more info."
			);
			throw e;
		}
	};
	donateToHuman.onclick = async () => {
		try {
			console.log(
				{
					fund: "Human",
				},
				BOATLOAD_OF_GAS,
				Big(humannewDonationAmount.value || "0")
					.times(10 ** 24)
					.toFixed()
			);
			await window.contract.donate(
				{
					fund: "Human",
				},
				BOATLOAD_OF_GAS,
				Big(humannewDonationAmount.value || "0")
					.times(10 ** 24)
					.toFixed()
			);

			updateCandidates();
		} catch (e) {
			console.log(e);
			alert(
				"Something went wrong! " +
					"Maybe you need to sign out and back in? " +
					"Check your browser console for more info."
			);
			throw e;
		}
	};

	document.querySelector("#sign-in-button").onclick = login;
	document.querySelector("#sign-out-button").onclick = logout;

	// Display the signed-out-flow container
	function signedOutFlow() {
		document.querySelector("#signed-out-flow").style.display = "block";
		document.querySelectorAll(".logged-in-display").forEach((el) => {
			el.style.display = "none";
		});
		document.querySelectorAll(".candidate").forEach((el) => {
			el.style.alignItems = "center";
		});
	}

	// Displaying the signed in flow container and fill in account-specific data
	function signedInFlow() {
		document.querySelector("#signed-in-flow").style.display = "block";

		document
			.querySelectorAll("[data-behavior=account-id]")
			.forEach((el) => {
				el.innerText = window.accountId;
			});

		document.querySelectorAll(".candidate").forEach((el) => {
			el.style.alignItems = "flex-end";
		});
		document.getElementById("balance").innerText =
			(window.accountBalance.available / 10 ** 24).toFixed(5) + " NEAR";

		document.querySelectorAll(".logged-in-display").forEach((el) => {
			el.style.display = "flex";
		});

		updateCandidates();
	}

	async function updateCandidates() {
		try {
			// make an update call to the smart contract
			const pets = await window.contract.viewPets();

			let total = 0;
			for (let i = 0; i < pets.length; i += 1) {
				if (pets[i].key == "Cat") {
					catDonationAmount.innerText = (
						Math.round(pets[i].value.donations * 10000) / 10000
					).toString();
					total += pets[i].value.donations;
				}
				if (pets[i].key == "Dog") {
					dogDonationAmount.innerText = (
						Math.round(pets[i].value.donations * 10000) / 10000
					).toString();
					total += pets[i].value.donations;
				}
				if (pets[i].key == "Human") {
					humanDonationAmount.innerText = (
						Math.round(pets[i].value.donations * 10000) / 10000
					).toString();
					total += pets[i].value.donations;
				}
			}

			document.getElementById("total-donations").innerText = (
				Math.round(total * 10000) / 10000
			).toString();

			updateLogs();
		} catch (e) {
			console.log(e);
			alert(
				"Something went wrong! " +
					"Maybe you need to sign out and back in? " +
					"Check your browser console for more info."
			);
			throw e;
		}
	}

	const logListContainer = document.getElementById("log-list");
	async function updateLogs() {
		try {
			// make an update call to the smart contract
			let logs = await window.contract.viewLogs();

			logs = logs.reverse();

			logListContainer.innerHTML = "";

			for (let i = 0; i < logs.length; i += 1) {
				logListContainer.innerHTML += `<div class="log">
          <span>${logs[i].value.user}</span>
          <strong>${logs[i].value.action}</strong>
		  </div>`;
			}
		} catch (e) {
			console.log(e);
			alert(
				"Something went wrong! " +
					"Maybe you need to sign out and back in? " +
					"Check your browser console for more info."
			);
			throw e;
		}
	}

	// `nearInitPromise` gets called on page load
	window.nearInitPromise = initContract()
		.then(() => {
			if (window.walletConnection.isSignedIn()) signedInFlow();
			else signedOutFlow();

			updateCandidates();
		})
		.catch(console.error);

	let s = {};
	s.a = document.getElementById("snowfall-element");
	s.b = s.a.getContext("2d");
	s.c = function () {
		this.a = Math.random() * 2 + 2;
		this.b = Math.random() * s.a.width - this.a - 1 + this.a + 1;
		this.c = this.b;
		this.d = Math.random() * 50 + 1;
		this.e = Math.random();
		this.f = Math.random() * Math.PI * 2;
		this.g = Math.random() * 1.5 + 0.5;
		this.i = Math.random() * s.a.height - this.a - 1 + this.a + 1;
		this.j = () => {
			if (this.i > s.a.height + this.a) {
				this.i = -this.a;
			} else {
				this.i += this.g;
			}
			this.f += 0.02;
			this.b = this.c + this.d * Math.sin(this.f);
			s.b.fillStyle = "rgba(255,255,255," + this.e + ")";
			s.b.fillRect(this.b, this.i, this.a, this.a);
		};
	};
	s.e = () => {
		s.a.width = window.innerWidth;
		s.a.height = window.innerHeight;
		s.d = [];
		for (
			let x = 0;
			x < Math.ceil((s.a.width * s.a.height) / 15000);
			x += 1
		) {
			s.d.push(new s.c());
		}
	};
	window.addEventListener("resize", s.e);
	s.f = () => {
		requestAnimationFrame(s.f);
		s.b.clearRect(0, 0, s.a.width, s.a.height);
		for (let x in s.d) {
			s.d[x].j();
		}
	};
	s.e();
	s.f();
});

'''
'''--- src/main.test.js ---
beforeAll(async function () {
  // NOTE: nearlib and nearConfig are made available by near-cli/test_environment
  const near = await nearlib.connect(nearConfig)
  window.accountId = nearConfig.contractName
  window.contract = await near.loadContract(nearConfig.contractName, {
    viewMethods: ['get_greeting'],
    changeMethods: [],
    sender: window.accountId
  })
})

test('get_greeting', async () => {
  const message = await window.contract.get_greeting({ account_id: window.accountId })
  expect(message).toEqual('Hello')
})

'''
'''--- src/utils.js ---
import { connect, Contract, keyStores, WalletConnection } from "near-api-js";
import getConfig from "./config";

const nearConfig = getConfig("development");

// Initialize contract & set global variables
export async function initContract() {
	// Initialize connection to the NEAR testnet
	const near = await connect(
		Object.assign(
			{ deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() } },
			nearConfig
		)
	);

	// Initializing Wallet based Account. It can work with NEAR testnet wallet that
	// is hosted at https://wallet.testnet.near.org
	window.walletConnection = new WalletConnection(near);

	// Getting the Account ID. If still unauthorized, it's just empty string
	window.accountId = window.walletConnection.getAccountId();

	if (window.accountId) {
		const account = await near.account(window.accountId);
		window.accountBalance = await account.getAccountBalance();
	}

	// Initializing our contract APIs by contract name and configuration
	window.contract = await new Contract(
		window.walletConnection.account(),
		nearConfig.contractName,
		{
			// View methods are read only. They don't modify the state, but usually return some value.
			viewMethods: ["viewPets", "viewLogs"],
			// Change methods can modify the state. But you don't receive the returned value when called.
			changeMethods: ["donate"],
			sender: window.walletConnection.account(), // account object to initialize and sign transactions.
		}
	);
}

export function logout() {
	window.walletConnection.signOut();
	// reload page
	window.location.replace(window.location.origin + window.location.pathname);
}

export function login() {
	// Allow the current app to make calls to the specified contract on the
	// user's behalf.
	// This works by creating a new access key for the user's account and storing
	// the private key in localStorage.
	window.walletConnection.requestSignIn(nearConfig.contractName);
}

'''
'''--- src/wallet/login/index.html ---
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/css/bootstrap.min.css" integrity="sha384-GJzZqFGwb1QTTN6wy59ffF1BuGJpLSa9DkKMp0DgiMDm4iYMj70gZWKYbI706tWS" crossorigin="anonymous">
</head>
<body style="background: #fff; margin-top: 3em">
  <div>Please run the following command in NEAR CLI, then enter account id here. masterAccountId default: test.near
  </div>
  <div>
      <code id="shell-command"></code>
  </div>
  <input type="text" id="accountId" name="accountId" placeholder="Account id"></input>
  <button type="button" onClick="done()">done</button>
  <script>
    const currentUrl = new URL(window.location.href);
    const message = `NODE_ENV=local near create_account {newAccountId} --masterAccount {masterAccountId} --publicKey ${currentUrl.searchParams.get('public_key')} --initialAmount 10000000000000000000`;
    document.getElementById('shell-command').innerText = message;

    function done() {
      const successUrl = new URL(currentUrl.searchParams.get('success_url'));
      successUrl.searchParams.set('account_id', document.getElementById('accountId').value);
      successUrl.searchParams.set('public_key', currentUrl.searchParams.get('public_key'));
      window.location.assign(successUrl.toString());
    }
  </script>
</body>
</html>
'''