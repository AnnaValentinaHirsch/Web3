*GitHub Repository "0xterrytjw/near-coin-flip-js"*

'''--- frontend/App.js ---
import 'regenerator-runtime/runtime'
import React from 'react'
import './assets/css/global.css'
import { callSmartContractFunction, viewBlockchainState } from './near-api'
import { EducationalText, NearInformation, SignInPrompt, SignOutButton } from './ui-components';

export default function App() {
  // Will store data returned from the blockchain in component state
  const [valueFromBlockchain, setValueFromBlockchain] = React.useState();

  const [uiPleaseWait, setUiPleaseWait] = React.useState(false);

  // If user not signed-in with wallet - show prompt
  if (!window.walletConnection.isSignedIn()) {
    // Sign-in flow will reload the page later
    return SignInPrompt();
  } else {
    // Get blockchian state once on component load
    React.useEffect(() => {
      viewBlockchainState()
        .then(val => setValueFromBlockchain(val));
    }, []);
  }

  const updateMessage = (message) => {
    setUiPleaseWait(true);
    callSmartContractFunction(message).then(() =>
      {
        viewBlockchainState()
          .then(val => {
            setValueFromBlockchain(val);
            setUiPleaseWait(false);
          });
      });
  }

  return (
    <>
      <SignOutButton/>
      <main className={uiPleaseWait && 'please-wait'}>
        <h1>{valueFromBlockchain}</h1>

        <div className='change'>
          <button onClick={() => updateMessage('Top of the Mornin!')}>
            Change greeting to<br/> <span>'Top of the Mornin!'</span>
          </button>
          <button onClick={() => updateMessage('Go Team!')}>
            Change greeting to<br/> <span>'Go Team!'</span>
          </button>
        </div>

        <NearInformation message={valueFromBlockchain}/>

        <EducationalText/>
      </main>
    </>
  )
}

'''
'''--- frontend/config.js ---
const CONTRACT_NAME = process.env.CONTRACT_NAME ||'new-awesome-project'

export function getConfig(env) {
  switch (env) {

  case 'production':
  case 'mainnet':
    return {
      networkId: 'mainnet',
      nodeUrl: 'https://rpc.mainnet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.near.org',
      helperUrl: 'https://helper.mainnet.near.org',
      explorerUrl: 'https://explorer.mainnet.near.org',
      jsvmAccountId: 'jsvm.near'
    }
  case 'development':
  case 'testnet':
    return {
      networkId: 'testnet',
      nodeUrl: 'https://rpc.testnet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.testnet.near.org',
      helperUrl: 'https://helper.testnet.near.org',
      explorerUrl: 'https://explorer.testnet.near.org',
      jsvmAccountId: 'jsvm.testnet'
    }
  case 'betanet':
    return {
      networkId: 'betanet',
      nodeUrl: 'https://rpc.betanet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.betanet.near.org',
      helperUrl: 'https://helper.betanet.near.org',
      explorerUrl: 'https://explorer.betanet.near.org',
    }
  case 'local':
    return {
      networkId: 'local',
      nodeUrl: 'http://localhost:3030',
      keyPath: `${process.env.HOME}/.near/validator_key.json`,
      walletUrl: 'http://localhost:4000/wallet',
      contractName: CONTRACT_NAME,
    }
  case 'test':
  case 'ci':
    return {
      networkId: 'shared-test',
      nodeUrl: 'https://rpc.ci-testnet.near.org',
      contractName: CONTRACT_NAME,
      masterAccount: 'test.near',
    }
  case 'ci-betanet':
    return {
      networkId: 'shared-test-staging',
      nodeUrl: 'https://rpc.ci-betanet.near.org',
      contractName: CONTRACT_NAME,
      masterAccount: 'test.near',
    }
  default:
    throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`)
  }
}

'''
'''--- frontend/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="./assets/img/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="apple-touch-icon" href="./assets/img/favicon.ico" />
    <title>Welcome to NEAR with React</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>

    <div id="root"><span style="font-size: small; opacity: 0.5;">Loading quickly...</span></div>

    <script src="./index.js" type="module"></script>
  </body>
</html>

'''
'''--- frontend/index.js ---
import React from 'react'
import { createRoot } from 'react-dom/client'
import App from './App'
import { initContract } from './near-api'

const reactRoot = createRoot(document.querySelector('#root'));

window.nearInitPromise = initContract()
  .then(() => {
    reactRoot.render(<App />);
  })
  .catch(e => {
    reactRoot.render(<div style={{color: 'red'}}>Error: <code>{e.message}</code></div>);
    console.error(e);
  });

'''
'''--- frontend/near-api.js ---
import { connect, keyStores, WalletConnection } from 'near-api-js'
import { parseNearAmount } from 'near-api-js/lib/utils/format'
import { getConfig } from './config'

const nearConfig = getConfig(process.env.NODE_ENV || 'development')

// Initialize contract and set global variables
export async function initContract() {
  // Initialize connection to the NEAR blockchain
  const near = await connect(Object.assign({ deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() } }, nearConfig));

  // Initializing Wallet based Account. It can work with NEAR testnet wallet that
  // is hosted at https://wallet.testnet.near.org
  window.walletConnection = new WalletConnection(near);

  // Getting the Account ID. If signed-out, it's empty string
  window.accountId = window.walletConnection.getAccountId();
}

export function signInWithNearWallet() {
  // Allow the current app to make calls to the specified contract on the
  // user's behalf.
  // This works by creating a new access key for the user's account and storing
  // the private key in localStorage.
  window.walletConnection.requestSignIn(nearConfig.contractName);
}

export function signOutNearWallet() {
  window.walletConnection.signOut();
  // reload page
  window.location.replace(window.location.origin + window.location.pathname);
}

/*
  Performs a view call to contract's `viewGreeting` method, to get data from the blockchain
*/
export async function viewBlockchainState() {
  let account = window.walletConnection.account();

  const currentState = await account.viewFunction(
    nearConfig.contractName,
    'viewGreeting',
    {},
  );

  return currentState;
}

/*
  Calls a contract method which will manipulate blockchain state.
*/
export async function callSmartContractFunction(messageArg) {
  let account = window.walletConnection.account();

  // Use near-api-js to perform a smart contract function call
  const result = await account.functionCall({
    contractId: nearConfig.contractName,
    methodName: 'setGreeting',
    args: {
      'message': messageArg
    },
    gas: '300000000000000',
  });

  return result;
}

'''
'''--- frontend/ui-components.js ---
import { signInWithNearWallet, signOutNearWallet } from './near-api';
import { getConfig } from './config';

export function SignInPrompt() {
  return (
    <main>
      <h1>
        Welcome to NEAR!
      </h1>
      <p>
        Your contract stores information on the NEAR blockchain. To
        start you need to sign in using the NEAR Wallet. It is very simple,
        just use the button below.
      </p>
      <p>
        Do not worry, this app runs in the test network ("testnet"). It works
        just like the main network ("mainnet"), but using NEAR Tokens that are
        only for testing!
      </p>
      <br/>
      <p style={{ textAlign: 'center' }}>
        <button onClick={signInWithNearWallet}>Sign in with NEAR Wallet</button>
      </p>
    </main>
  );
}

export function SignOutButton() {
  return (
    <button className="link" style={{ float: 'right' }} onClick={signOutNearWallet}>
      Sign out
    </button>
  );
}

export function NearInformation({ message }) {
  const { networkId, contractName } = getConfig(process.env.NODE_ENV || 'testnet')
  const urlPrefix = `https://explorer.${networkId}.near.org/accounts`

  return (
    <ul className='information'>
      <li>Your account ID:&nbsp;
        <a target="_blank" rel="noreferrer" href={`${urlPrefix}/${window.accountId}`}>
          <code>{window.accountId}</code>
        </a>
      </li>
      <li>Network ID: <code>{networkId}</code></li>
      <li>Contract name:&nbsp;
        <a target="_blank" rel="noreferrer" href={`${urlPrefix}/${contractName}`}>
          <code>{contractName}</code>
        </a>
      </li>
      <li>Current state on the blockchain: <br/>
        <code>
          &#123; myGreeting: '{message}' &#125;
        </code>
      </li>
    </ul>
  )
}

export function EducationalText() {
  return (
    <>
      <p>
        Look at that! A Simple JavaScript Smart Contract WebApp! Your message is stored on the blockchain. Check it out:
      </p>
      <ol>
        <li>
          Look in <code>src/App.js</code> and <code>src/near-api.js</code> – you'll
          see <code>viewFunction</code> and <code>functionCall</code> being called on the <code>account</code>. What's
          this?
        </li>
        <li>
          Ultimately, this <code>contract</code> code is defined in <code>src/index.js</code> – this is the source code
          for your <a target="_blank" rel="noreferrer" href="https://docs.near.org/docs/develop/contracts/overview">smart
          contract</a>.
        </li>
        <li>
          When you run <code>yarn start</code>, the code in <code>src/index.js</code> gets deployed to the NEAR testnet.
          You can see how this happens by looking in <code>package.json</code> at the <code>scripts</code> section to
          find the <code>deploy</code> command.
        </li>
      </ol>
      <hr/>
      <p>
        To keep learning, check out <a target="_blank" rel="noreferrer" href="https://docs.near.org">the NEAR
        docs</a> or look through some <a target="_blank" rel="noreferrer" href="https://examples.near.org">example
        apps</a>.
      </p>
    </>
  );
}
'''