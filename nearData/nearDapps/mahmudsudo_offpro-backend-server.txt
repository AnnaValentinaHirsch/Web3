*GitHub Repository "mahmudsudo/offpro-backend-server"*

'''--- docker-compose.yml ---
version: '3'
services:
  app:
    container_name: offpro
    restart: always
    build: 
      context: .
    ports:
      - '80:5000'
    depends_on:
      - mongo
    environment:
      - NODE_ENV=development
      -  JWT_SECRET=BeBNuHjmsXNoUGjekeLIztJi2ykAIR8aefOv7FIyURUb4m6I2dRUQ53uT71ohGk1
      -  TWILIO_ACCOUNT_SID=ACcda791381d569747b33c5568bedfd11a
      -  TWILIO_AUTH_TOKEN=2b07209d80c907243263a46a722d33ba
      -  TWILIO_SERVICE_ID=VAd5df8e634ec0fe9c775db69c99e45563
    volumes:
      - ./:/usr/app/src
      
  mongo:
    container_name: mongo
    volumes:
      - offproDb:/data/db
    image: mongo
    ports:
      - '27017:27017'
volumes:
  offproDb:
'''
'''--- fly.toml ---
# fly.toml file generated for old-waterfall-2183 on 2023-03-13T13:43:43+01:00

app = "old-waterfall-2183"
kill_signal = "SIGINT"
kill_timeout = 5
primary_region = "lhr"
processes = []

[env]

[experimental]
  auto_rollback = true

[[services]]
  http_checks = []
  internal_port = 5000
  processes = ["app"]
  protocol = "tcp"
  script_checks = []
  [services.concurrency]
    hard_limit = 25
    soft_limit = 20
    type = "connections"

  [[services.ports]]
    force_https = true
    handlers = ["http"]
    port = 80

  [[services.ports]]
    handlers = ["tls", "http"]
    port = 443

  [[services.tcp_checks]]
    grace_period = "1s"
    interval = "15s"
    restart_limit = 0
    timeout = "2s"

'''
'''--- package-lock.json ---
{
  "name": "offpro-backend",
  "version": "1.0.0",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "name": "offpro-backend",
      "version": "1.0.0",
      "license": "ISC",
      "dependencies": {
        "bcrypt": "^5.1.0",
        "cors": "^2.8.5",
        "dotenv": "^16.0.3",
        "express": "^4.18.2",
        "express-fileupload": "^1.4.0",
        "helmet": "^6.0.1",
        "jsonwebtoken": "^9.0.0",
        "lodash": "^4.17.21",
        "moment": "^2.29.4",
        "mongoose": "^6.8.1",
        "near-api-js": "^1.1.0",
        "node-fetch": "^3.3.0",
        "nodemailer": "^6.8.0",
        "otp-generator": "^4.0.0",
        "push.js": "^1.0.12",
        "request": "^2.88.2",
        "stripe": "^11.5.0",
        "swagger-ui-express": "^4.6.0",
        "twilio": "^3.84.0",
        "validator": "^13.7.0"
      },
      "devDependencies": {
        "morgan": "^1.10.0",
        "nodemon": "^2.0.20"
      }
    },
    "node_modules/@aws-crypto/ie11-detection": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/@aws-crypto/ie11-detection/-/ie11-detection-3.0.0.tgz",
      "integrity": "sha512-341lBBkiY1DfDNKai/wXM3aujNBkXR7tq1URPQDL9wi3AUbI80NR74uF1TXHMm7po1AcnFk8iu2S2IeU/+/A+Q==",
      "optional": true,
      "dependencies": {
        "tslib": "^1.11.1"
      }
    },
    "node_modules/@aws-crypto/ie11-detection/node_modules/tslib": {
      "version": "1.14.1",
      "resolved": "https://registry.npmjs.org/tslib/-/tslib-1.14.1.tgz",
      "integrity": "sha512-Xni35NKzjgMrwevysHTCArtLDpPvye8zV/0E4EyYn43P7/7qvQwPh9BGkHewbMulVntbigmcT7rdX3BNo9wRJg==",
      "optional": true
    },
    "node_modules/@aws-crypto/sha256-browser": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/@aws-crypto/sha256-browser/-/sha256-browser-3.0.0.tgz",
      "integrity": "sha512-8VLmW2B+gjFbU5uMeqtQM6Nj0/F1bro80xQXCW6CQBWgosFWXTx77aeOF5CAIAmbOK64SdMBJdNr6J41yP5mvQ==",
      "optional": true,
      "dependencies": {
        "@aws-crypto/ie11-detection": "^3.0.0",
        "@aws-crypto/sha256-js": "^3.0.0",
        "@aws-crypto/supports-web-crypto": "^3.0.0",
        "@aws-crypto/util": "^3.0.0",
        "@aws-sdk/types": "^3.222.0",
        "@aws-sdk/util-locate-window": "^3.0.0",
        "@aws-sdk/util-utf8-browser": "^3.0.0",
        "tslib": "^1.11.1"
      }
    },
    "node_modules/@aws-crypto/sha256-browser/node_modules/tslib": {
      "version": "1.14.1",
      "resolved": "https://registry.npmjs.org/tslib/-/tslib-1.14.1.tgz",
      "integrity": "sha512-Xni35NKzjgMrwevysHTCArtLDpPvye8zV/0E4EyYn43P7/7qvQwPh9BGkHewbMulVntbigmcT7rdX3BNo9wRJg==",
      "optional": true
    },
    "node_modules/@aws-crypto/sha256-js": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/@aws-crypto/sha256-js/-/sha256-js-3.0.0.tgz",
      "integrity": "sha512-PnNN7os0+yd1XvXAy23CFOmTbMaDxgxXtTKHybrJ39Y8kGzBATgBFibWJKH6BhytLI/Zyszs87xCOBNyBig6vQ==",
      "optional": true,
      "dependencies": {
        "@aws-crypto/util": "^3.0.0",
        "@aws-sdk/types": "^3.222.0",
        "tslib": "^1.11.1"
      }
    },
    "node_modules/@aws-crypto/sha256-js/node_modules/tslib": {
      "version": "1.14.1",
      "resolved": "https://registry.npmjs.org/tslib/-/tslib-1.14.1.tgz",
      "integrity": "sha512-Xni35NKzjgMrwevysHTCArtLDpPvye8zV/0E4EyYn43P7/7qvQwPh9BGkHewbMulVntbigmcT7rdX3BNo9wRJg==",
      "optional": true
    },
    "node_modules/@aws-crypto/supports-web-crypto": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/@aws-crypto/supports-web-crypto/-/supports-web-crypto-3.0.0.tgz",
      "integrity": "sha512-06hBdMwUAb2WFTuGG73LSC0wfPu93xWwo5vL2et9eymgmu3Id5vFAHBbajVWiGhPO37qcsdCap/FqXvJGJWPIg==",
      "optional": true,
      "dependencies": {
        "tslib": "^1.11.1"
      }
    },
    "node_modules/@aws-crypto/supports-web-crypto/node_modules/tslib": {
      "version": "1.14.1",
      "resolved": "https://registry.npmjs.org/tslib/-/tslib-1.14.1.tgz",
      "integrity": "sha512-Xni35NKzjgMrwevysHTCArtLDpPvye8zV/0E4EyYn43P7/7qvQwPh9BGkHewbMulVntbigmcT7rdX3BNo9wRJg==",
      "optional": true
    },
    "node_modules/@aws-crypto/util": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/@aws-crypto/util/-/util-3.0.0.tgz",
      "integrity": "sha512-2OJlpeJpCR48CC8r+uKVChzs9Iungj9wkZrl8Z041DWEWvyIHILYKCPNzJghKsivj+S3mLo6BVc7mBNzdxA46w==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/types": "^3.222.0",
        "@aws-sdk/util-utf8-browser": "^3.0.0",
        "tslib": "^1.11.1"
      }
    },
    "node_modules/@aws-crypto/util/node_modules/tslib": {
      "version": "1.14.1",
      "resolved": "https://registry.npmjs.org/tslib/-/tslib-1.14.1.tgz",
      "integrity": "sha512-Xni35NKzjgMrwevysHTCArtLDpPvye8zV/0E4EyYn43P7/7qvQwPh9BGkHewbMulVntbigmcT7rdX3BNo9wRJg==",
      "optional": true
    },
    "node_modules/@aws-sdk/abort-controller": {
      "version": "3.272.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/abort-controller/-/abort-controller-3.272.0.tgz",
      "integrity": "sha512-s2TV3phapcTwZNr4qLxbfuQuE9ZMP4RoJdkvRRCkKdm6jslsWLJf2Zlcxti/23hOlINUMYv2iXE2pftIgWGdpg==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/types": "3.272.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/client-cognito-identity": {
      "version": "3.282.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/client-cognito-identity/-/client-cognito-identity-3.282.0.tgz",
      "integrity": "sha512-OU9Wy50u31Mog4xmj9o+lLOb/y+yuQBTFwEVYApJtCkPsI2e3DtZFt36IcAy04fcjNUaSD3u6SGgfYo2vDQ2zA==",
      "optional": true,
      "dependencies": {
        "@aws-crypto/sha256-browser": "3.0.0",
        "@aws-crypto/sha256-js": "3.0.0",
        "@aws-sdk/client-sts": "3.282.0",
        "@aws-sdk/config-resolver": "3.282.0",
        "@aws-sdk/credential-provider-node": "3.282.0",
        "@aws-sdk/fetch-http-handler": "3.282.0",
        "@aws-sdk/hash-node": "3.272.0",
        "@aws-sdk/invalid-dependency": "3.272.0",
        "@aws-sdk/middleware-content-length": "3.282.0",
        "@aws-sdk/middleware-endpoint": "3.282.0",
        "@aws-sdk/middleware-host-header": "3.282.0",
        "@aws-sdk/middleware-logger": "3.272.0",
        "@aws-sdk/middleware-recursion-detection": "3.282.0",
        "@aws-sdk/middleware-retry": "3.282.0",
        "@aws-sdk/middleware-serde": "3.272.0",
        "@aws-sdk/middleware-signing": "3.282.0",
        "@aws-sdk/middleware-stack": "3.272.0",
        "@aws-sdk/middleware-user-agent": "3.282.0",
        "@aws-sdk/node-config-provider": "3.272.0",
        "@aws-sdk/node-http-handler": "3.282.0",
        "@aws-sdk/protocol-http": "3.282.0",
        "@aws-sdk/smithy-client": "3.279.0",
        "@aws-sdk/types": "3.272.0",
        "@aws-sdk/url-parser": "3.272.0",
        "@aws-sdk/util-base64": "3.208.0",
        "@aws-sdk/util-body-length-browser": "3.188.0",
        "@aws-sdk/util-body-length-node": "3.208.0",
        "@aws-sdk/util-defaults-mode-browser": "3.279.0",
        "@aws-sdk/util-defaults-mode-node": "3.282.0",
        "@aws-sdk/util-endpoints": "3.272.0",
        "@aws-sdk/util-retry": "3.272.0",
        "@aws-sdk/util-user-agent-browser": "3.282.0",
        "@aws-sdk/util-user-agent-node": "3.282.0",
        "@aws-sdk/util-utf8": "3.254.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/client-sso": {
      "version": "3.282.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/client-sso/-/client-sso-3.282.0.tgz",
      "integrity": "sha512-VzdCCaxlDyU+7wvLDWh+uACQ6RPfaKLQ3yJ2UY0B0SkH4R0E4GLDJ2OJzqS5eyyOsnq1rxfY75S4WYzj8E2cvg==",
      "optional": true,
      "dependencies": {
        "@aws-crypto/sha256-browser": "3.0.0",
        "@aws-crypto/sha256-js": "3.0.0",
        "@aws-sdk/config-resolver": "3.282.0",
        "@aws-sdk/fetch-http-handler": "3.282.0",
        "@aws-sdk/hash-node": "3.272.0",
        "@aws-sdk/invalid-dependency": "3.272.0",
        "@aws-sdk/middleware-content-length": "3.282.0",
        "@aws-sdk/middleware-endpoint": "3.282.0",
        "@aws-sdk/middleware-host-header": "3.282.0",
        "@aws-sdk/middleware-logger": "3.272.0",
        "@aws-sdk/middleware-recursion-detection": "3.282.0",
        "@aws-sdk/middleware-retry": "3.282.0",
        "@aws-sdk/middleware-serde": "3.272.0",
        "@aws-sdk/middleware-stack": "3.272.0",
        "@aws-sdk/middleware-user-agent": "3.282.0",
        "@aws-sdk/node-config-provider": "3.272.0",
        "@aws-sdk/node-http-handler": "3.282.0",
        "@aws-sdk/protocol-http": "3.282.0",
        "@aws-sdk/smithy-client": "3.279.0",
        "@aws-sdk/types": "3.272.0",
        "@aws-sdk/url-parser": "3.272.0",
        "@aws-sdk/util-base64": "3.208.0",
        "@aws-sdk/util-body-length-browser": "3.188.0",
        "@aws-sdk/util-body-length-node": "3.208.0",
        "@aws-sdk/util-defaults-mode-browser": "3.279.0",
        "@aws-sdk/util-defaults-mode-node": "3.282.0",
        "@aws-sdk/util-endpoints": "3.272.0",
        "@aws-sdk/util-retry": "3.272.0",
        "@aws-sdk/util-user-agent-browser": "3.282.0",
        "@aws-sdk/util-user-agent-node": "3.282.0",
        "@aws-sdk/util-utf8": "3.254.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/client-sso-oidc": {
      "version": "3.282.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/client-sso-oidc/-/client-sso-oidc-3.282.0.tgz",
      "integrity": "sha512-upC4yBZllAXg5OVIuS8Lu9MI1aqfAObl2BBixj9fIYbDanQ02s0b1IwfZqlOqNNkGzMko1AWyiOSyOdVgyJ+xg==",
      "optional": true,
      "dependencies": {
        "@aws-crypto/sha256-browser": "3.0.0",
        "@aws-crypto/sha256-js": "3.0.0",
        "@aws-sdk/config-resolver": "3.282.0",
        "@aws-sdk/fetch-http-handler": "3.282.0",
        "@aws-sdk/hash-node": "3.272.0",
        "@aws-sdk/invalid-dependency": "3.272.0",
        "@aws-sdk/middleware-content-length": "3.282.0",
        "@aws-sdk/middleware-endpoint": "3.282.0",
        "@aws-sdk/middleware-host-header": "3.282.0",
        "@aws-sdk/middleware-logger": "3.272.0",
        "@aws-sdk/middleware-recursion-detection": "3.282.0",
        "@aws-sdk/middleware-retry": "3.282.0",
        "@aws-sdk/middleware-serde": "3.272.0",
        "@aws-sdk/middleware-stack": "3.272.0",
        "@aws-sdk/middleware-user-agent": "3.282.0",
        "@aws-sdk/node-config-provider": "3.272.0",
        "@aws-sdk/node-http-handler": "3.282.0",
        "@aws-sdk/protocol-http": "3.282.0",
        "@aws-sdk/smithy-client": "3.279.0",
        "@aws-sdk/types": "3.272.0",
        "@aws-sdk/url-parser": "3.272.0",
        "@aws-sdk/util-base64": "3.208.0",
        "@aws-sdk/util-body-length-browser": "3.188.0",
        "@aws-sdk/util-body-length-node": "3.208.0",
        "@aws-sdk/util-defaults-mode-browser": "3.279.0",
        "@aws-sdk/util-defaults-mode-node": "3.282.0",
        "@aws-sdk/util-endpoints": "3.272.0",
        "@aws-sdk/util-retry": "3.272.0",
        "@aws-sdk/util-user-agent-browser": "3.282.0",
        "@aws-sdk/util-user-agent-node": "3.282.0",
        "@aws-sdk/util-utf8": "3.254.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/client-sts": {
      "version": "3.282.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/client-sts/-/client-sts-3.282.0.tgz",
      "integrity": "sha512-JZybEaST0rloS9drlX/0yJAnKHuV7DlS1n1WZxgaM2DY704ydlGiviiPQvC/q/dItsX4017gscC0blGJcUjK1g==",
      "optional": true,
      "dependencies": {
        "@aws-crypto/sha256-browser": "3.0.0",
        "@aws-crypto/sha256-js": "3.0.0",
        "@aws-sdk/config-resolver": "3.282.0",
        "@aws-sdk/credential-provider-node": "3.282.0",
        "@aws-sdk/fetch-http-handler": "3.282.0",
        "@aws-sdk/hash-node": "3.272.0",
        "@aws-sdk/invalid-dependency": "3.272.0",
        "@aws-sdk/middleware-content-length": "3.282.0",
        "@aws-sdk/middleware-endpoint": "3.282.0",
        "@aws-sdk/middleware-host-header": "3.282.0",
        "@aws-sdk/middleware-logger": "3.272.0",
        "@aws-sdk/middleware-recursion-detection": "3.282.0",
        "@aws-sdk/middleware-retry": "3.282.0",
        "@aws-sdk/middleware-sdk-sts": "3.282.0",
        "@aws-sdk/middleware-serde": "3.272.0",
        "@aws-sdk/middleware-signing": "3.282.0",
        "@aws-sdk/middleware-stack": "3.272.0",
        "@aws-sdk/middleware-user-agent": "3.282.0",
        "@aws-sdk/node-config-provider": "3.272.0",
        "@aws-sdk/node-http-handler": "3.282.0",
        "@aws-sdk/protocol-http": "3.282.0",
        "@aws-sdk/smithy-client": "3.279.0",
        "@aws-sdk/types": "3.272.0",
        "@aws-sdk/url-parser": "3.272.0",
        "@aws-sdk/util-base64": "3.208.0",
        "@aws-sdk/util-body-length-browser": "3.188.0",
        "@aws-sdk/util-body-length-node": "3.208.0",
        "@aws-sdk/util-defaults-mode-browser": "3.279.0",
        "@aws-sdk/util-defaults-mode-node": "3.282.0",
        "@aws-sdk/util-endpoints": "3.272.0",
        "@aws-sdk/util-retry": "3.272.0",
        "@aws-sdk/util-user-agent-browser": "3.282.0",
        "@aws-sdk/util-user-agent-node": "3.282.0",
        "@aws-sdk/util-utf8": "3.254.0",
        "fast-xml-parser": "4.1.2",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/config-resolver": {
      "version": "3.282.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/config-resolver/-/config-resolver-3.282.0.tgz",
      "integrity": "sha512-30qFLh2N4NXQ2EAook7NIFeu1K/nlrRLrdVb2BtGFi/F3cZnz+sy9o0XmL6x+sO9TznWjdNxD1RKQdqoAwGnCQ==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/signature-v4": "3.282.0",
        "@aws-sdk/types": "3.272.0",
        "@aws-sdk/util-config-provider": "3.208.0",
        "@aws-sdk/util-middleware": "3.272.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/credential-provider-cognito-identity": {
      "version": "3.282.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/credential-provider-cognito-identity/-/credential-provider-cognito-identity-3.282.0.tgz",
      "integrity": "sha512-GsLOt6GzckLQbMzgXOblKcRtXyMu3NcP0vFkYpy4r9oEzoxqPhy1yUpRNLeDv7r2qoa8naN81F5FwPwd17PrKg==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/client-cognito-identity": "3.282.0",
        "@aws-sdk/property-provider": "3.272.0",
        "@aws-sdk/types": "3.272.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/credential-provider-env": {
      "version": "3.272.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/credential-provider-env/-/credential-provider-env-3.272.0.tgz",
      "integrity": "sha512-QI65NbLnKLYHyTYhXaaUrq6eVsCCrMUb05WDA7+TJkWkjXesovpjc8vUKgFiLSxmgKmb2uOhHNcDyObKMrYQFw==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/property-provider": "3.272.0",
        "@aws-sdk/types": "3.272.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/credential-provider-imds": {
      "version": "3.272.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/credential-provider-imds/-/credential-provider-imds-3.272.0.tgz",
      "integrity": "sha512-wwAfVY1jTFQEfxVfdYD5r5ieYGl+0g4nhekVxNMqE8E1JeRDd18OqiwAflzpgBIqxfqvCUkf+vl5JYyacMkNAQ==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/node-config-provider": "3.272.0",
        "@aws-sdk/property-provider": "3.272.0",
        "@aws-sdk/types": "3.272.0",
        "@aws-sdk/url-parser": "3.272.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/credential-provider-ini": {
      "version": "3.282.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/credential-provider-ini/-/credential-provider-ini-3.282.0.tgz",
      "integrity": "sha512-2GKduXORcUgOigF1jZF7A1Wh4W/aJt3ynh7xb1vfx020nHx6YDljrEGpzgH6pOVzl7ZhgthpojicCuy2UumkMA==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/credential-provider-env": "3.272.0",
        "@aws-sdk/credential-provider-imds": "3.272.0",
        "@aws-sdk/credential-provider-process": "3.272.0",
        "@aws-sdk/credential-provider-sso": "3.282.0",
        "@aws-sdk/credential-provider-web-identity": "3.272.0",
        "@aws-sdk/property-provider": "3.272.0",
        "@aws-sdk/shared-ini-file-loader": "3.272.0",
        "@aws-sdk/types": "3.272.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/credential-provider-node": {
      "version": "3.282.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/credential-provider-node/-/credential-provider-node-3.282.0.tgz",
      "integrity": "sha512-qyHipZW0ep8STY+SO+Me8ObQ1Ee/aaZTmAK0Os/gB+EsiZhIE+mi6zRcScwdnpgJPLRYMEe4p/Cr6DOrA0G0GQ==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/credential-provider-env": "3.272.0",
        "@aws-sdk/credential-provider-imds": "3.272.0",
        "@aws-sdk/credential-provider-ini": "3.282.0",
        "@aws-sdk/credential-provider-process": "3.272.0",
        "@aws-sdk/credential-provider-sso": "3.282.0",
        "@aws-sdk/credential-provider-web-identity": "3.272.0",
        "@aws-sdk/property-provider": "3.272.0",
        "@aws-sdk/shared-ini-file-loader": "3.272.0",
        "@aws-sdk/types": "3.272.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/credential-provider-process": {
      "version": "3.272.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/credential-provider-process/-/credential-provider-process-3.272.0.tgz",
      "integrity": "sha512-hiCAjWWm2PeBFp5cjkxqyam/XADjiS+e7GzwC34TbZn3LisS0uoweLojj9tD11NnnUhyhbLteUvu5+rotOLwrg==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/property-provider": "3.272.0",
        "@aws-sdk/shared-ini-file-loader": "3.272.0",
        "@aws-sdk/types": "3.272.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/credential-provider-sso": {
      "version": "3.282.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/credential-provider-sso/-/credential-provider-sso-3.282.0.tgz",
      "integrity": "sha512-c4nibry7u0hkYRMi7+cWzdwYXfDDG+j3VYFxk2oOvU1VIJRyE6oeJqVaz3jgYLX9brHyrLJjuFCIJCUV/WXgIA==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/client-sso": "3.282.0",
        "@aws-sdk/property-provider": "3.272.0",
        "@aws-sdk/shared-ini-file-loader": "3.272.0",
        "@aws-sdk/token-providers": "3.282.0",
        "@aws-sdk/types": "3.272.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/credential-provider-web-identity": {
      "version": "3.272.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/credential-provider-web-identity/-/credential-provider-web-identity-3.272.0.tgz",
      "integrity": "sha512-ImrHMkcgneGa/HadHAQXPwOrX26sAKuB8qlMxZF/ZCM2B55u8deY+ZVkVuraeKb7YsahMGehPFOfRAF6mvFI5Q==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/property-provider": "3.272.0",
        "@aws-sdk/types": "3.272.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/credential-providers": {
      "version": "3.282.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/credential-providers/-/credential-providers-3.282.0.tgz",
      "integrity": "sha512-/Pau2Ht15j26ibTSTaJHbx6wA3suNT0Qgu+++6ZUoVCeHL5ZN/otcoebsR/lOZTw8Fji7K5kl8TW41UNAE8s2w==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/client-cognito-identity": "3.282.0",
        "@aws-sdk/client-sso": "3.282.0",
        "@aws-sdk/client-sts": "3.282.0",
        "@aws-sdk/credential-provider-cognito-identity": "3.282.0",
        "@aws-sdk/credential-provider-env": "3.272.0",
        "@aws-sdk/credential-provider-imds": "3.272.0",
        "@aws-sdk/credential-provider-ini": "3.282.0",
        "@aws-sdk/credential-provider-node": "3.282.0",
        "@aws-sdk/credential-provider-process": "3.272.0",
        "@aws-sdk/credential-provider-sso": "3.282.0",
        "@aws-sdk/credential-provider-web-identity": "3.272.0",
        "@aws-sdk/property-provider": "3.272.0",
        "@aws-sdk/shared-ini-file-loader": "3.272.0",
        "@aws-sdk/types": "3.272.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/fetch-http-handler": {
      "version": "3.282.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/fetch-http-handler/-/fetch-http-handler-3.282.0.tgz",
      "integrity": "sha512-RTd53UzKtUucIEdVLGGgtlbVwp0QkOt3ZfHuA/A1lOH7meChSh1kz7B5z3p4HQDpXO+MQ1Y6Ble9Vg2fh1zwJQ==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/protocol-http": "3.282.0",
        "@aws-sdk/querystring-builder": "3.272.0",
        "@aws-sdk/types": "3.272.0",
        "@aws-sdk/util-base64": "3.208.0",
        "tslib": "^2.3.1"
      }
    },
    "node_modules/@aws-sdk/hash-node": {
      "version": "3.272.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/hash-node/-/hash-node-3.272.0.tgz",
      "integrity": "sha512-40dwND+iAm3VtPHPZu7/+CIdVJFk2s0cWZt1lOiMPMSXycSYJ45wMk7Lly3uoqRx0uWfFK5iT2OCv+fJi5jTng==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/types": "3.272.0",
        "@aws-sdk/util-buffer-from": "3.208.0",
        "@aws-sdk/util-utf8": "3.254.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/invalid-dependency": {
      "version": "3.272.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/invalid-dependency/-/invalid-dependency-3.272.0.tgz",
      "integrity": "sha512-ysW6wbjl1Y78txHUQ/Tldj2Rg1BI7rpMO9B9xAF6yAX3mQ7t6SUPQG/ewOGvH2208NBIl3qP5e/hDf0Q6r/1iw==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/types": "3.272.0",
        "tslib": "^2.3.1"
      }
    },
    "node_modules/@aws-sdk/is-array-buffer": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/is-array-buffer/-/is-array-buffer-3.201.0.tgz",
      "integrity": "sha512-UPez5qLh3dNgt0DYnPD/q0mVJY84rA17QE26hVNOW3fAji8W2wrwrxdacWOxyXvlxWsVRcKmr+lay1MDqpAMfg==",
      "optional": true,
      "dependencies": {
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/middleware-content-length": {
      "version": "3.282.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-content-length/-/middleware-content-length-3.282.0.tgz",
      "integrity": "sha512-SDgMLRRTMr9LlHSNk4bXUXynYnkT4oNMqE+FxhjsdbT8hK36eS4AadM58R7nPwgjR3EuWRW4ZRRawLWatpWspA==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/protocol-http": "3.282.0",
        "@aws-sdk/types": "3.272.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/middleware-endpoint": {
      "version": "3.282.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-endpoint/-/middleware-endpoint-3.282.0.tgz",
      "integrity": "sha512-8U9Mv/Sbdo1KI6/ip7IIUdBl5pgmalFbfkYAyO+AtmkEvawI9ipdWFs5HB0Dwd1BGVup5choY72Ik/7sCAAFTQ==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/middleware-serde": "3.272.0",
        "@aws-sdk/protocol-http": "3.282.0",
        "@aws-sdk/signature-v4": "3.282.0",
        "@aws-sdk/types": "3.272.0",
        "@aws-sdk/url-parser": "3.272.0",
        "@aws-sdk/util-config-provider": "3.208.0",
        "@aws-sdk/util-middleware": "3.272.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/middleware-host-header": {
      "version": "3.282.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-host-header/-/middleware-host-header-3.282.0.tgz",
      "integrity": "sha512-90dfYow4zh4tCatTOnqB3nE/dIAucQLZnMqwN/WBPu0fUqjymzpsNkPchqWBPnSWdNE8w3PiKMqqD9rjYwqw4Q==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/protocol-http": "3.282.0",
        "@aws-sdk/types": "3.272.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/middleware-logger": {
      "version": "3.272.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-logger/-/middleware-logger-3.272.0.tgz",
      "integrity": "sha512-u2SQ0hWrFwxbxxYMG5uMEgf01pQY5jauK/LYWgGIvuCmFgiyRQQP3oN7kkmsxnS9MWmNmhbyQguX2NY02s5e9w==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/types": "3.272.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/middleware-recursion-detection": {
      "version": "3.282.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-recursion-detection/-/middleware-recursion-detection-3.282.0.tgz",
      "integrity": "sha512-cSLq/daEaTEucbP/TgAXIOcpwLu7Bfw3VGzH1U56ngDjI4KWvUheF16JiB6OqKQXduPBPsdZ9dVmkDVKddmCRw==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/protocol-http": "3.282.0",
        "@aws-sdk/types": "3.272.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/middleware-retry": {
      "version": "3.282.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-retry/-/middleware-retry-3.282.0.tgz",
      "integrity": "sha512-3+0M1GP9o480IdqHVZbkhTgge63uKhDFlS6cQznpNGj0eIuQPhXRnlEz2/rma0INUqFm6+7qJ5yzHR4WQbfHpw==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/protocol-http": "3.282.0",
        "@aws-sdk/service-error-classification": "3.272.0",
        "@aws-sdk/types": "3.272.0",
        "@aws-sdk/util-middleware": "3.272.0",
        "@aws-sdk/util-retry": "3.272.0",
        "tslib": "^2.3.1",
        "uuid": "^8.3.2"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/middleware-sdk-sts": {
      "version": "3.282.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-sdk-sts/-/middleware-sdk-sts-3.282.0.tgz",
      "integrity": "sha512-Qe20mtJcF6lxt7280FhTFD2IpBDn39MEXmbm/zIkXR2/cAmvji8YhcxhNrq1l7XiuMM6SokBDC/f3dlF1oOC6g==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/middleware-signing": "3.282.0",
        "@aws-sdk/property-provider": "3.272.0",
        "@aws-sdk/protocol-http": "3.282.0",
        "@aws-sdk/signature-v4": "3.282.0",
        "@aws-sdk/types": "3.272.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/middleware-serde": {
      "version": "3.272.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-serde/-/middleware-serde-3.272.0.tgz",
      "integrity": "sha512-kW1uOxgPSwtXPB5rm3QLdWomu42lkYpQL94tM1BjyFOWmBLO2lQhk5a7Dw6HkTozT9a+vxtscLChRa6KZe61Hw==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/types": "3.272.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/middleware-signing": {
      "version": "3.282.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-signing/-/middleware-signing-3.282.0.tgz",
      "integrity": "sha512-eE5qMDcqqxZPdSwybUEph/knrA2j2cHjW+B2ddROw3Ojg0XLjep5hOhithAudgBREQhYF9pdsBr6mUMynUIrKw==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/property-provider": "3.272.0",
        "@aws-sdk/protocol-http": "3.282.0",
        "@aws-sdk/signature-v4": "3.282.0",
        "@aws-sdk/types": "3.272.0",
        "@aws-sdk/util-middleware": "3.272.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/middleware-stack": {
      "version": "3.272.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-stack/-/middleware-stack-3.272.0.tgz",
      "integrity": "sha512-jhwhknnPBGhfXAGV5GXUWfEhDFoP/DN8MPCO2yC5OAxyp6oVJ8lTPLkZYMTW5VL0c0eG44dXpF4Ib01V+PlDrQ==",
      "optional": true,
      "dependencies": {
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/middleware-user-agent": {
      "version": "3.282.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-user-agent/-/middleware-user-agent-3.282.0.tgz",
      "integrity": "sha512-P1ealsSrUALo0w0Qu5nBKsNQwsmqIfsoNtFWpaznjIcXE5rRMlZL69zb0KnGbQCBfEXsgaMOWjeGT8I3/XbOHQ==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/protocol-http": "3.282.0",
        "@aws-sdk/types": "3.272.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/node-config-provider": {
      "version": "3.272.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/node-config-provider/-/node-config-provider-3.272.0.tgz",
      "integrity": "sha512-YYCIBh9g1EQo7hm2l22HX5Yr9RoPQ2RCvhzKvF1n1e8t1QH4iObQrYUtqHG4khcm64Cft8C5MwZmgzHbya5Z6Q==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/property-provider": "3.272.0",
        "@aws-sdk/shared-ini-file-loader": "3.272.0",
        "@aws-sdk/types": "3.272.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/node-http-handler": {
      "version": "3.282.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/node-http-handler/-/node-http-handler-3.282.0.tgz",
      "integrity": "sha512-LIA4lsSKA/l1kTR5ERkJG2gARveB7Y40MR6yDwtIuhXeVu7Xo9m4BJFanCYIbyc093W0T53x438bwoBR+R+/fw==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/abort-controller": "3.272.0",
        "@aws-sdk/protocol-http": "3.282.0",
        "@aws-sdk/querystring-builder": "3.272.0",
        "@aws-sdk/types": "3.272.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/property-provider": {
      "version": "3.272.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/property-provider/-/property-provider-3.272.0.tgz",
      "integrity": "sha512-V1pZTaH5eqpAt8O8CzbItHhOtzIfFuWymvwZFkAtwKuaHpnl7jjrTouV482zoq8AD/fF+VVSshwBKYA7bhidIw==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/types": "3.272.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/protocol-http": {
      "version": "3.282.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/protocol-http/-/protocol-http-3.282.0.tgz",
      "integrity": "sha512-aOPv5DhsbG06WKfeh2g0H8RGnaeI8pLhaA+Mq1BvzXcghhlDu+FM9K/GjC/f1lWk1UNryfevOR7SdQm95ciHQg==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/types": "3.272.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/querystring-builder": {
      "version": "3.272.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/querystring-builder/-/querystring-builder-3.272.0.tgz",
      "integrity": "sha512-ndo++7GkdCj5tBXE6rGcITpSpZS4PfyV38wntGYAlj9liL1omk3bLZRY6uzqqkJpVHqbg2fD7O2qHNItzZgqhw==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/types": "3.272.0",
        "@aws-sdk/util-uri-escape": "3.201.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/querystring-parser": {
      "version": "3.272.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/querystring-parser/-/querystring-parser-3.272.0.tgz",
      "integrity": "sha512-5oS4/9n6N1LZW9tI3qq/0GnCuWoOXRgcHVB+AJLRBvDbEe+GI+C/xK1tKLsfpDNgsQJHc4IPQoIt4megyZ/1+A==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/types": "3.272.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/service-error-classification": {
      "version": "3.272.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/service-error-classification/-/service-error-classification-3.272.0.tgz",
      "integrity": "sha512-REoltM1LK9byyIufLqx9znhSolPcHQgVHIA2S0zu5sdt5qER4OubkLAXuo4MBbisUTmh8VOOvIyUb5ijZCXq1w==",
      "optional": true,
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/shared-ini-file-loader": {
      "version": "3.272.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/shared-ini-file-loader/-/shared-ini-file-loader-3.272.0.tgz",
      "integrity": "sha512-lzFPohp5sy2XvwFjZIzLVCRpC0i5cwBiaXmFzXYQZJm6FSCszHO4ax+m9yrtlyVFF/2YPWl+/bzNthy4aJtseA==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/types": "3.272.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/signature-v4": {
      "version": "3.282.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/signature-v4/-/signature-v4-3.282.0.tgz",
      "integrity": "sha512-rnSL3UyF/No7+O2EMtN1sTCiqL1a+odbfnfo3wCSl8DH5PEYINt2kZgVEvT1Fgaffk1pUggBBOZoR+arPIIDJA==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/is-array-buffer": "3.201.0",
        "@aws-sdk/types": "3.272.0",
        "@aws-sdk/util-hex-encoding": "3.201.0",
        "@aws-sdk/util-middleware": "3.272.0",
        "@aws-sdk/util-uri-escape": "3.201.0",
        "@aws-sdk/util-utf8": "3.254.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/smithy-client": {
      "version": "3.279.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/smithy-client/-/smithy-client-3.279.0.tgz",
      "integrity": "sha512-ZcYWUQDGAYN6NXRpJuSn46PetrpPCA6TrDVwP9+3pERzTXZ66npXoG2XhHjNrOXy/Ted5A3OxKrM4/zLu9tK3A==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/middleware-stack": "3.272.0",
        "@aws-sdk/types": "3.272.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/token-providers": {
      "version": "3.282.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/token-providers/-/token-providers-3.282.0.tgz",
      "integrity": "sha512-Qk/D6i+Hpc0fp/2SRHbfJeKPgUIugzsmye3NL0OV1bqd1Y40dW5LT4u67VcZHwqxzYDKe6Eo+7NHJu7qfvwhog==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/client-sso-oidc": "3.282.0",
        "@aws-sdk/property-provider": "3.272.0",
        "@aws-sdk/shared-ini-file-loader": "3.272.0",
        "@aws-sdk/types": "3.272.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/types": {
      "version": "3.272.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/types/-/types-3.272.0.tgz",
      "integrity": "sha512-MmmL6vxMGP5Bsi+4wRx4mxYlU/LX6M0noOXrDh/x5FfG7/4ZOar/nDxqDadhJtNM88cuWVHZWY59P54JzkGWmA==",
      "optional": true,
      "dependencies": {
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/url-parser": {
      "version": "3.272.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/url-parser/-/url-parser-3.272.0.tgz",
      "integrity": "sha512-vX/Tx02PlnQ/Kgtf5TnrNDHPNbY+amLZjW0Z1d9vzAvSZhQ4i9Y18yxoRDIaDTCNVRDjdhV8iuctW+05PB5JtQ==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/querystring-parser": "3.272.0",
        "@aws-sdk/types": "3.272.0",
        "tslib": "^2.3.1"
      }
    },
    "node_modules/@aws-sdk/util-base64": {
      "version": "3.208.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-base64/-/util-base64-3.208.0.tgz",
      "integrity": "sha512-PQniZph5A6N7uuEOQi+1hnMz/FSOK/8kMFyFO+4DgA1dZ5pcKcn5wiFwHkcTb/BsgVqQa3Jx0VHNnvhlS8JyTg==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/util-buffer-from": "3.208.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/util-body-length-browser": {
      "version": "3.188.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-body-length-browser/-/util-body-length-browser-3.188.0.tgz",
      "integrity": "sha512-8VpnwFWXhnZ/iRSl9mTf+VKOX9wDE8QtN4bj9pBfxwf90H1X7E8T6NkiZD3k+HubYf2J94e7DbeHs7fuCPW5Qg==",
      "optional": true,
      "dependencies": {
        "tslib": "^2.3.1"
      }
    },
    "node_modules/@aws-sdk/util-body-length-node": {
      "version": "3.208.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-body-length-node/-/util-body-length-node-3.208.0.tgz",
      "integrity": "sha512-3zj50e5g7t/MQf53SsuuSf0hEELzMtD8RX8C76f12OSRo2Bca4FLLYHe0TZbxcfQHom8/hOaeZEyTyMogMglqg==",
      "optional": true,
      "dependencies": {
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/util-buffer-from": {
      "version": "3.208.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-buffer-from/-/util-buffer-from-3.208.0.tgz",
      "integrity": "sha512-7L0XUixNEFcLUGPeBF35enCvB9Xl+K6SQsmbrPk1P3mlV9mguWSDQqbOBwY1Ir0OVbD6H/ZOQU7hI/9RtRI0Zw==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/is-array-buffer": "3.201.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/util-config-provider": {
      "version": "3.208.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-config-provider/-/util-config-provider-3.208.0.tgz",
      "integrity": "sha512-DSRqwrERUsT34ug+anlMBIFooBEGwM8GejC7q00Y/9IPrQy50KnG5PW2NiTjuLKNi7pdEOlwTSEocJE15eDZIg==",
      "optional": true,
      "dependencies": {
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/util-defaults-mode-browser": {
      "version": "3.279.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-defaults-mode-browser/-/util-defaults-mode-browser-3.279.0.tgz",
      "integrity": "sha512-RnchYRrpapTT5Hu23LOfk6e8RMVq0kUzho6xA6TJj1a4uGxkcRMvgzPipCq1P5uHu0mrkQBg9pGPEVNOUs38/Q==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/property-provider": "3.272.0",
        "@aws-sdk/types": "3.272.0",
        "bowser": "^2.11.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">= 10.0.0"
      }
    },
    "node_modules/@aws-sdk/util-defaults-mode-node": {
      "version": "3.282.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-defaults-mode-node/-/util-defaults-mode-node-3.282.0.tgz",
      "integrity": "sha512-D1BlFoA7ZMeK2diDUWFx1xBFrSaJuBZMRBuWbnbT9AnRYNCsASZ8DRU1KkZ8LuFQIwmZz94P9q683emYnZBhiw==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/config-resolver": "3.282.0",
        "@aws-sdk/credential-provider-imds": "3.272.0",
        "@aws-sdk/node-config-provider": "3.272.0",
        "@aws-sdk/property-provider": "3.272.0",
        "@aws-sdk/types": "3.272.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">= 10.0.0"
      }
    },
    "node_modules/@aws-sdk/util-endpoints": {
      "version": "3.272.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-endpoints/-/util-endpoints-3.272.0.tgz",
      "integrity": "sha512-c4MPUaJt2G6gGpoiwIOqDfUa98c1J63RpYvf/spQEKOtC/tF5Gfqlxuq8FnAl5lHnrqj1B9ZXLLxFhHtDR0IiQ==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/types": "3.272.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/util-hex-encoding": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-hex-encoding/-/util-hex-encoding-3.201.0.tgz",
      "integrity": "sha512-7t1vR1pVxKx0motd3X9rI3m/xNp78p3sHtP5yo4NP4ARpxyJ0fokBomY8ScaH2D/B+U5o9ARxldJUdMqyBlJcA==",
      "optional": true,
      "dependencies": {
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/util-locate-window": {
      "version": "3.208.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-locate-window/-/util-locate-window-3.208.0.tgz",
      "integrity": "sha512-iua1A2+P7JJEDHVgvXrRJSvsnzG7stYSGQnBVphIUlemwl6nN5D+QrgbjECtrbxRz8asYFHSzhdhECqN+tFiBg==",
      "optional": true,
      "dependencies": {
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/util-middleware": {
      "version": "3.272.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-middleware/-/util-middleware-3.272.0.tgz",
      "integrity": "sha512-Abw8m30arbwxqmeMMha5J11ESpHUNmCeSqSzE8/C4B8jZQtHY4kq7f+upzcNIQ11lsd+uzBEzNG3+dDRi0XOJQ==",
      "optional": true,
      "dependencies": {
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/util-retry": {
      "version": "3.272.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-retry/-/util-retry-3.272.0.tgz",
      "integrity": "sha512-Ngha5414LR4gRHURVKC9ZYXsEJhMkm+SJ+44wlzOhavglfdcKKPUsibz5cKY1jpUV7oKECwaxHWpBB8r6h+hOg==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/service-error-classification": "3.272.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">= 14.0.0"
      }
    },
    "node_modules/@aws-sdk/util-uri-escape": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-uri-escape/-/util-uri-escape-3.201.0.tgz",
      "integrity": "sha512-TeTWbGx4LU2c5rx0obHeDFeO9HvwYwQtMh1yniBz00pQb6Qt6YVOETVQikRZ+XRQwEyCg/dA375UplIpiy54mA==",
      "optional": true,
      "dependencies": {
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/util-user-agent-browser": {
      "version": "3.282.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-user-agent-browser/-/util-user-agent-browser-3.282.0.tgz",
      "integrity": "sha512-Z639oyTa5fZfyi4Xr64+eiAwBCxfpe9Op4Vhnr1z/RwonQM/qywydv6Ttpeq1q5uQ0nG4wTkOMpfh39g+VqIgw==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/types": "3.272.0",
        "bowser": "^2.11.0",
        "tslib": "^2.3.1"
      }
    },
    "node_modules/@aws-sdk/util-user-agent-node": {
      "version": "3.282.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-user-agent-node/-/util-user-agent-node-3.282.0.tgz",
      "integrity": "sha512-GSOdWNmzEd554wR9HBrgeYptKBOybveVwUkd6ws+YTdCOz4xD5Gga+I5JomKkcMEUVdBrJnYVUtq7ZsJy2f11w==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/node-config-provider": "3.272.0",
        "@aws-sdk/types": "3.272.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      },
      "peerDependencies": {
        "aws-crt": ">=1.0.0"
      },
      "peerDependenciesMeta": {
        "aws-crt": {
          "optional": true
        }
      }
    },
    "node_modules/@aws-sdk/util-utf8": {
      "version": "3.254.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-utf8/-/util-utf8-3.254.0.tgz",
      "integrity": "sha512-14Kso/eIt5/qfIBmhEL9L1IfyUqswjSTqO2mY7KOzUZ9SZbwn3rpxmtkhmATkRjD7XIlLKaxBkI7tU9Zjzj8Kw==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/util-buffer-from": "3.208.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/util-utf8-browser": {
      "version": "3.259.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-utf8-browser/-/util-utf8-browser-3.259.0.tgz",
      "integrity": "sha512-UvFa/vR+e19XookZF8RzFZBrw2EUkQWxiBW0yYQAhvk3C+QVGl0H3ouca8LDBlBfQKXwmW3huo/59H8rwb1wJw==",
      "optional": true,
      "dependencies": {
        "tslib": "^2.3.1"
      }
    },
    "node_modules/@mapbox/node-pre-gyp": {
      "version": "1.0.10",
      "resolved": "https://registry.npmjs.org/@mapbox/node-pre-gyp/-/node-pre-gyp-1.0.10.tgz",
      "integrity": "sha512-4ySo4CjzStuprMwk35H5pPbkymjv1SF3jGLj6rAHp/xT/RF7TL7bd9CTm1xDY49K2qF7jmR/g7k+SkLETP6opA==",
      "dependencies": {
        "detect-libc": "^2.0.0",
        "https-proxy-agent": "^5.0.0",
        "make-dir": "^3.1.0",
        "node-fetch": "^2.6.7",
        "nopt": "^5.0.0",
        "npmlog": "^5.0.1",
        "rimraf": "^3.0.2",
        "semver": "^7.3.5",
        "tar": "^6.1.11"
      },
      "bin": {
        "node-pre-gyp": "bin/node-pre-gyp"
      }
    },
    "node_modules/@mapbox/node-pre-gyp/node_modules/node-fetch": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-2.6.9.tgz",
      "integrity": "sha512-DJm/CJkZkRjKKj4Zi4BsKVZh3ValV5IR5s7LVZnW+6YMh0W1BfNA8XSs6DLMGYlId5F3KnA70uu2qepcR08Qqg==",
      "dependencies": {
        "whatwg-url": "^5.0.0"
      },
      "engines": {
        "node": "4.x || >=6.0.0"
      },
      "peerDependencies": {
        "encoding": "^0.1.0"
      },
      "peerDependenciesMeta": {
        "encoding": {
          "optional": true
        }
      }
    },
    "node_modules/@mapbox/node-pre-gyp/node_modules/tr46": {
      "version": "0.0.3",
      "resolved": "https://registry.npmjs.org/tr46/-/tr46-0.0.3.tgz",
      "integrity": "sha512-N3WMsuqV66lT30CrXNbEjx4GEwlow3v6rr4mCcv6prnfwhS01rkgyFdjPNBYd9br7LpXV1+Emh01fHnq2Gdgrw=="
    },
    "node_modules/@mapbox/node-pre-gyp/node_modules/webidl-conversions": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-3.0.1.tgz",
      "integrity": "sha512-2JAn3z8AR6rjK8Sm8orRC0h/bcl/DqL7tRPdGZ4I1CjdF+EaMLmYxBHyXuKL849eucPFhvBoxMsflfOb8kxaeQ=="
    },
    "node_modules/@mapbox/node-pre-gyp/node_modules/whatwg-url": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-5.0.0.tgz",
      "integrity": "sha512-saE57nupxk6v3HY35+jzBwYa0rKSy0XR8JSxZPwgLr7ys0IBzhGviA1/TUGJLmSVqs8pb9AnvICXEuOHLprYTw==",
      "dependencies": {
        "tr46": "~0.0.3",
        "webidl-conversions": "^3.0.0"
      }
    },
    "node_modules/@types/node": {
      "version": "18.14.6",
      "resolved": "https://registry.npmjs.org/@types/node/-/node-18.14.6.tgz",
      "integrity": "sha512-93+VvleD3mXwlLI/xASjw0FzKcwzl3OdTCzm1LaRfqgS21gfFtK3zDXM5Op9TeeMsJVOaJ2VRDpT9q4Y3d0AvA=="
    },
    "node_modules/@types/webidl-conversions": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/@types/webidl-conversions/-/webidl-conversions-7.0.0.tgz",
      "integrity": "sha512-xTE1E+YF4aWPJJeUzaZI5DRntlkY3+BCVJi0axFptnjGmAoWxkyREIh/XMrfxVLejwQxMCfDXdICo0VLxThrog=="
    },
    "node_modules/@types/whatwg-url": {
      "version": "8.2.2",
      "resolved": "https://registry.npmjs.org/@types/whatwg-url/-/whatwg-url-8.2.2.tgz",
      "integrity": "sha512-FtQu10RWgn3D9U4aazdwIE2yzphmTJREDqNdODHrbrZmmMqI0vMheC/6NE/J1Yveaj8H+ela+YwWTjq5PGmuhA==",
      "dependencies": {
        "@types/node": "*",
        "@types/webidl-conversions": "*"
      }
    },
    "node_modules/abbrev": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/abbrev/-/abbrev-1.1.1.tgz",
      "integrity": "sha512-nne9/IiQ/hzIhY6pdDnbBtz7DjPTKrY00P/zvPSm5pOFkl6xuGrGnXn/VtTNNfNtAfZ9/1RtehkszU9qcTii0Q=="
    },
    "node_modules/accepts": {
      "version": "1.3.8",
      "resolved": "https://registry.npmjs.org/accepts/-/accepts-1.3.8.tgz",
      "integrity": "sha512-PYAthTa2m2VKxuvSD3DPC/Gy+U+sOA1LAuT8mkmRuvw+NACSaeXEQ+NHcVF7rONl6qcaxV3Uuemwawk+7+SJLw==",
      "dependencies": {
        "mime-types": "~2.1.34",
        "negotiator": "0.6.3"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/agent-base": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/agent-base/-/agent-base-6.0.2.tgz",
      "integrity": "sha512-RZNwNclF7+MS/8bDg70amg32dyeZGZxiDuQmZxKLAlQjr3jGyLx+4Kkk58UO7D2QdgFIQCovuSuZESne6RG6XQ==",
      "dependencies": {
        "debug": "4"
      },
      "engines": {
        "node": ">= 6.0.0"
      }
    },
    "node_modules/agent-base/node_modules/debug": {
      "version": "4.3.4",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
      "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
      "dependencies": {
        "ms": "2.1.2"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/agent-base/node_modules/ms": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
      "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w=="
    },
    "node_modules/ajv": {
      "version": "6.12.6",
      "resolved": "https://registry.npmjs.org/ajv/-/ajv-6.12.6.tgz",
      "integrity": "sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==",
      "dependencies": {
        "fast-deep-equal": "^3.1.1",
        "fast-json-stable-stringify": "^2.0.0",
        "json-schema-traverse": "^0.4.1",
        "uri-js": "^4.2.2"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/epoberezkin"
      }
    },
    "node_modules/ansi-regex": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/anymatch": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/anymatch/-/anymatch-3.1.3.tgz",
      "integrity": "sha512-KMReFUr0B4t+D+OBkjR3KYqvocp2XaSzO55UcB6mgQMd3KbcE+mWTyvVV7D/zsdEbNnV6acZUutkiHQXvTr1Rw==",
      "dev": true,
      "dependencies": {
        "normalize-path": "^3.0.0",
        "picomatch": "^2.0.4"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/aproba": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/aproba/-/aproba-2.0.0.tgz",
      "integrity": "sha512-lYe4Gx7QT+MKGbDsA+Z+he/Wtef0BiwDOlK/XkBrdfsh9J/jPPXbX0tE9x9cl27Tmu5gg3QUbUrQYa/y+KOHPQ=="
    },
    "node_modules/are-we-there-yet": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/are-we-there-yet/-/are-we-there-yet-2.0.0.tgz",
      "integrity": "sha512-Ci/qENmwHnsYo9xKIcUJN5LeDKdJ6R1Z1j9V/J5wyq8nh/mYPEpIKJbBZXtZjG04HiK7zV/p6Vs9952MrMeUIw==",
      "dependencies": {
        "delegates": "^1.0.0",
        "readable-stream": "^3.6.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/array-flatten": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/array-flatten/-/array-flatten-1.1.1.tgz",
      "integrity": "sha512-PCVAQswWemu6UdxsDFFX/+gVeYqKAod3D3UVm91jHwynguOwAvYPhx8nNlM++NqRcK6CxxpUafjmhIdKiHibqg=="
    },
    "node_modules/asap": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/asap/-/asap-2.0.6.tgz",
      "integrity": "sha512-BSHWgDSAiKs50o2Re8ppvp3seVHXSRM44cdSsT9FfNEUUZLOGWVCsiWaRPWM1Znn+mqZ1OfVZ3z3DWEzSp7hRA=="
    },
    "node_modules/asn1": {
      "version": "0.2.6",
      "resolved": "https://registry.npmjs.org/asn1/-/asn1-0.2.6.tgz",
      "integrity": "sha512-ix/FxPn0MDjeyJ7i/yoHGFt/EX6LyNbxSEhPPXODPL+KB0VPk86UYfL0lMdy+KCnv+fmvIzySwaK5COwqVbWTQ==",
      "dependencies": {
        "safer-buffer": "~2.1.0"
      }
    },
    "node_modules/assert-plus": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/assert-plus/-/assert-plus-1.0.0.tgz",
      "integrity": "sha512-NfJ4UzBCcQGLDlQq7nHxH+tv3kyZ0hHQqF5BO6J7tNJeP5do1llPr8dZ8zHonfhAu0PHAdMkSo+8o0wxg9lZWw==",
      "engines": {
        "node": ">=0.8"
      }
    },
    "node_modules/asynckit": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz",
      "integrity": "sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q=="
    },
    "node_modules/aws-sign2": {
      "version": "0.7.0",
      "resolved": "https://registry.npmjs.org/aws-sign2/-/aws-sign2-0.7.0.tgz",
      "integrity": "sha512-08kcGqnYf/YmjoRhfxyu+CLxBjUtHLXLXX/vUfx9l2LYzG3c1m61nrpyFUZI6zeS+Li/wWMMidD9KgrqtGq3mA==",
      "engines": {
        "node": "*"
      }
    },
    "node_modules/aws4": {
      "version": "1.12.0",
      "resolved": "https://registry.npmjs.org/aws4/-/aws4-1.12.0.tgz",
      "integrity": "sha512-NmWvPnx0F1SfrQbYwOi7OeaNGokp9XhzNioJ/CSBs8Qa4vxug81mhJEAVZwxXuBmYB5KDRfMq/F3RR0BIU7sWg=="
    },
    "node_modules/axios": {
      "version": "0.26.1",
      "resolved": "https://registry.npmjs.org/axios/-/axios-0.26.1.tgz",
      "integrity": "sha512-fPwcX4EvnSHuInCMItEhAGnaSEXRBjtzh9fOtsE6E1G6p7vl7edEeZe11QHf18+6+9gR5PbKV/sGKNaD8YaMeA==",
      "dependencies": {
        "follow-redirects": "^1.14.8"
      }
    },
    "node_modules/balanced-match": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
      "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw=="
    },
    "node_modules/base-x": {
      "version": "3.0.9",
      "resolved": "https://registry.npmjs.org/base-x/-/base-x-3.0.9.tgz",
      "integrity": "sha512-H7JU6iBHTal1gp56aKoaa//YUxEaAOUiydvrV/pILqIHXTtqxSkATOnDA2u+jZ/61sD+L/412+7kzXRtWukhpQ==",
      "dependencies": {
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/base64-js": {
      "version": "1.5.1",
      "resolved": "https://registry.npmjs.org/base64-js/-/base64-js-1.5.1.tgz",
      "integrity": "sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ]
    },
    "node_modules/basic-auth": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/basic-auth/-/basic-auth-2.0.1.tgz",
      "integrity": "sha512-NF+epuEdnUYVlGuhaxbbq+dvJttwLnGY+YixlXlME5KpQ5W3CnXA5cVTneY3SPbPDRkcjMbifrwmFYcClgOZeg==",
      "dev": true,
      "dependencies": {
        "safe-buffer": "5.1.2"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/basic-auth/node_modules/safe-buffer": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz",
      "integrity": "sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g==",
      "dev": true
    },
    "node_modules/bcrypt": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/bcrypt/-/bcrypt-5.1.0.tgz",
      "integrity": "sha512-RHBS7HI5N5tEnGTmtR/pppX0mmDSBpQ4aCBsj7CEQfYXDcO74A8sIBYcJMuCsis2E81zDxeENYhv66oZwLiA+Q==",
      "hasInstallScript": true,
      "dependencies": {
        "@mapbox/node-pre-gyp": "^1.0.10",
        "node-addon-api": "^5.0.0"
      },
      "engines": {
        "node": ">= 10.0.0"
      }
    },
    "node_modules/bcrypt-pbkdf": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/bcrypt-pbkdf/-/bcrypt-pbkdf-1.0.2.tgz",
      "integrity": "sha512-qeFIXtP4MSoi6NLqO12WfqARWWuCKi2Rn/9hJLEmtB5yTNr9DqFWkJRCf2qShWzPeAMRnOgCrq0sg/KLv5ES9w==",
      "dependencies": {
        "tweetnacl": "^0.14.3"
      }
    },
    "node_modules/bcrypt-pbkdf/node_modules/tweetnacl": {
      "version": "0.14.5",
      "resolved": "https://registry.npmjs.org/tweetnacl/-/tweetnacl-0.14.5.tgz",
      "integrity": "sha512-KXXFFdAbFXY4geFIwoyNK+f5Z1b7swfXABfL7HXCmoIWMKU3dmS26672A4EeQtDzLKy7SXmfBu51JolvEKwtGA=="
    },
    "node_modules/binary-extensions": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/binary-extensions/-/binary-extensions-2.2.0.tgz",
      "integrity": "sha512-jDctJ/IVQbZoJykoeHbhXpOlNBqGNcwXJKJog42E5HDPUwQTSdjCHdihjj0DlnheQ7blbT6dHOafNAiS8ooQKA==",
      "dev": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/bn.js": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/bn.js/-/bn.js-5.2.1.tgz",
      "integrity": "sha512-eXRvHzWyYPBuB4NBy0cmYQjGitUrtqwbvlzP3G6VFnNRbsZQIxQ10PbKKHt8gZ/HW/D/747aDl+QkDqg3KQLMQ=="
    },
    "node_modules/body-parser": {
      "version": "1.20.1",
      "resolved": "https://registry.npmjs.org/body-parser/-/body-parser-1.20.1.tgz",
      "integrity": "sha512-jWi7abTbYwajOytWCQc37VulmWiRae5RyTpaCyDcS5/lMdtwSz5lOpDE67srw/HYe35f1z3fDQw+3txg7gNtWw==",
      "dependencies": {
        "bytes": "3.1.2",
        "content-type": "~1.0.4",
        "debug": "2.6.9",
        "depd": "2.0.0",
        "destroy": "1.2.0",
        "http-errors": "2.0.0",
        "iconv-lite": "0.4.24",
        "on-finished": "2.4.1",
        "qs": "6.11.0",
        "raw-body": "2.5.1",
        "type-is": "~1.6.18",
        "unpipe": "1.0.0"
      },
      "engines": {
        "node": ">= 0.8",
        "npm": "1.2.8000 || >= 1.4.16"
      }
    },
    "node_modules/borsh": {
      "version": "0.7.0",
      "resolved": "https://registry.npmjs.org/borsh/-/borsh-0.7.0.tgz",
      "integrity": "sha512-CLCsZGIBCFnPtkNnieW/a8wmreDmfUtjU2m9yHrzPXIlNbqVs0AQrSatSG6vdNYUqdc83tkQi2eHfF98ubzQLA==",
      "dependencies": {
        "bn.js": "^5.2.0",
        "bs58": "^4.0.0",
        "text-encoding-utf-8": "^1.0.2"
      }
    },
    "node_modules/bowser": {
      "version": "2.11.0",
      "resolved": "https://registry.npmjs.org/bowser/-/bowser-2.11.0.tgz",
      "integrity": "sha512-AlcaJBi/pqqJBIQ8U9Mcpc9i8Aqxn88Skv5d+xBX006BY5u8N3mGLHa5Lgppa7L/HfwgwLgZ6NYs+Ag6uUmJRA==",
      "optional": true
    },
    "node_modules/brace-expansion": {
      "version": "1.1.11",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
      "dependencies": {
        "balanced-match": "^1.0.0",
        "concat-map": "0.0.1"
      }
    },
    "node_modules/braces": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/braces/-/braces-3.0.2.tgz",
      "integrity": "sha512-b8um+L1RzM3WDSzvhm6gIz1yfTbBt6YTlcEKAvsmqCZZFw46z626lVj9j1yEPW33H5H+lBQpZMP1k8l+78Ha0A==",
      "dev": true,
      "dependencies": {
        "fill-range": "^7.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/bs58": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/bs58/-/bs58-4.0.1.tgz",
      "integrity": "sha512-Ok3Wdf5vOIlBrgCvTq96gBkJw+JUEzdBgyaza5HLtPm7yTHkjRy8+JzNyHF7BHa0bNWOQIp3m5YF0nnFcOIKLw==",
      "dependencies": {
        "base-x": "^3.0.2"
      }
    },
    "node_modules/bson": {
      "version": "4.7.2",
      "resolved": "https://registry.npmjs.org/bson/-/bson-4.7.2.tgz",
      "integrity": "sha512-Ry9wCtIZ5kGqkJoi6aD8KjxFZEx78guTQDnpXWiNthsxzrxAK/i8E6pCHAIZTbaEFWcOCvbecMukfK7XUvyLpQ==",
      "dependencies": {
        "buffer": "^5.6.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/buffer": {
      "version": "5.7.1",
      "resolved": "https://registry.npmjs.org/buffer/-/buffer-5.7.1.tgz",
      "integrity": "sha512-EHcyIPBQ4BSGlvjB16k5KgAJ27CIsHY/2JBmCRReo48y9rQ3MaUzWX3KVlBa4U7MyX02HdVj0K7C3WaB3ju7FQ==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "dependencies": {
        "base64-js": "^1.3.1",
        "ieee754": "^1.1.13"
      }
    },
    "node_modules/buffer-equal-constant-time": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/buffer-equal-constant-time/-/buffer-equal-constant-time-1.0.1.tgz",
      "integrity": "sha512-zRpUiDwd/xk6ADqPMATG8vc9VPrkck7T07OIx0gnjmJAnHnTVXNQG3vfvWNuiZIkwu9KrKdA1iJKfsfTVxE6NA=="
    },
    "node_modules/busboy": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/busboy/-/busboy-1.6.0.tgz",
      "integrity": "sha512-8SFQbg/0hQ9xy3UNTB0YEnsNBbWfhf7RtnzpL7TkBiTBRfrQ9Fxcnz7VJsleJpyp6rVLvXiuORqjlHi5q+PYuA==",
      "dependencies": {
        "streamsearch": "^1.1.0"
      },
      "engines": {
        "node": ">=10.16.0"
      }
    },
    "node_modules/bytes": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/bytes/-/bytes-3.1.2.tgz",
      "integrity": "sha512-/Nf7TyzTx6S3yRJObOAV7956r8cr2+Oj8AC5dt8wSP3BQAoeX58NoHyCU8P8zGkNXStjTSi6fzO6F0pBdcYbEg==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/call-bind": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/call-bind/-/call-bind-1.0.2.tgz",
      "integrity": "sha512-7O+FbCihrB5WGbFYesctwmTKae6rOiIzmz1icreWJ+0aA7LJfuqhEso2T9ncpcFtzMQtzXf2QGGueWJGTYsqrA==",
      "dependencies": {
        "function-bind": "^1.1.1",
        "get-intrinsic": "^1.0.2"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/capability": {
      "version": "0.2.5",
      "resolved": "https://registry.npmjs.org/capability/-/capability-0.2.5.tgz",
      "integrity": "sha512-rsJZYVCgXd08sPqwmaIqjAd5SUTfonV0z/gDJ8D6cN8wQphky1kkAYEqQ+hmDxTw7UihvBfjUVUSY+DBEe44jg=="
    },
    "node_modules/caseless": {
      "version": "0.12.0",
      "resolved": "https://registry.npmjs.org/caseless/-/caseless-0.12.0.tgz",
      "integrity": "sha512-4tYFyifaFfGacoiObjJegolkwSU4xQNGbVgUiNYVUxbQ2x2lUsFvY4hVgVzGiIe6WLOPqycWXA40l+PWsxthUw=="
    },
    "node_modules/chokidar": {
      "version": "3.5.3",
      "resolved": "https://registry.npmjs.org/chokidar/-/chokidar-3.5.3.tgz",
      "integrity": "sha512-Dr3sfKRP6oTcjf2JmUmFJfeVMvXBdegxB0iVQ5eb2V10uFJUCAS8OByZdVAyVb8xXNz3GjjTgj9kLWsZTqE6kw==",
      "dev": true,
      "funding": [
        {
          "type": "individual",
          "url": "https://paulmillr.com/funding/"
        }
      ],
      "dependencies": {
        "anymatch": "~3.1.2",
        "braces": "~3.0.2",
        "glob-parent": "~5.1.2",
        "is-binary-path": "~2.1.0",
        "is-glob": "~4.0.1",
        "normalize-path": "~3.0.0",
        "readdirp": "~3.6.0"
      },
      "engines": {
        "node": ">= 8.10.0"
      },
      "optionalDependencies": {
        "fsevents": "~2.3.2"
      }
    },
    "node_modules/chownr": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/chownr/-/chownr-2.0.0.tgz",
      "integrity": "sha512-bIomtDF5KGpdogkLd9VspvFzk9KfpyyGlS8YFVZl7TGPBHL5snIOnxeshwVgPteQ9b4Eydl+pVbIyE1DcvCWgQ==",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/color-support": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/color-support/-/color-support-1.1.3.tgz",
      "integrity": "sha512-qiBjkpbMLO/HL68y+lh4q0/O1MZFj2RX6X/KmMa3+gJD3z+WwI1ZzDHysvqHGS3mP6mznPckpXmw1nI9cJjyRg==",
      "bin": {
        "color-support": "bin.js"
      }
    },
    "node_modules/combined-stream": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.8.tgz",
      "integrity": "sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==",
      "dependencies": {
        "delayed-stream": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/concat-map": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
      "integrity": "sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg=="
    },
    "node_modules/console-control-strings": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/console-control-strings/-/console-control-strings-1.1.0.tgz",
      "integrity": "sha512-ty/fTekppD2fIwRvnZAVdeOiGd1c7YXEixbgJTNzqcxJWKQnjJ/V1bNEEE6hygpM3WjwHFUVK6HTjWSzV4a8sQ=="
    },
    "node_modules/content-disposition": {
      "version": "0.5.4",
      "resolved": "https://registry.npmjs.org/content-disposition/-/content-disposition-0.5.4.tgz",
      "integrity": "sha512-FveZTNuGw04cxlAiWbzi6zTAL/lhehaWbTtgluJh4/E95DqMwTmha3KZN1aAWA8cFIhHzMZUvLevkw5Rqk+tSQ==",
      "dependencies": {
        "safe-buffer": "5.2.1"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/content-type": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/content-type/-/content-type-1.0.5.tgz",
      "integrity": "sha512-nTjqfcBFEipKdXCv4YDQWCfmcLZKm81ldF0pAopTvyrFGVbcR6P/VAAd5G7N+0tTr8QqiU0tFadD6FK4NtJwOA==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/cookie": {
      "version": "0.5.0",
      "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.5.0.tgz",
      "integrity": "sha512-YZ3GUyn/o8gfKJlnlX7g7xq4gyO6OSuhGPKaaGssGB2qgDUS0gPgtTvoyZLTt9Ab6dC4hfc9dV5arkvc/OCmrw==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/cookie-signature": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.6.tgz",
      "integrity": "sha512-QADzlaHc8icV8I7vbaJXJwod9HWYp8uCqf1xa4OfNu1T7JVxQIrUgOWtHdNDtPiywmFbiS12VjotIXLrKM3orQ=="
    },
    "node_modules/core-util-is": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/core-util-is/-/core-util-is-1.0.2.tgz",
      "integrity": "sha512-3lqz5YjWTYnW6dlDa5TLaTCcShfar1e40rmcJVwCBJC6mWlFuj0eCHIElmG1g5kyuJ/GD+8Wn4FFCcz4gJPfaQ=="
    },
    "node_modules/cors": {
      "version": "2.8.5",
      "resolved": "https://registry.npmjs.org/cors/-/cors-2.8.5.tgz",
      "integrity": "sha512-KIHbLJqu73RGr/hnbrO9uBeixNGuvSQjul/jdFvS/KFSIH1hWVd1ng7zOHx+YrEfInLG7q4n6GHQ9cDtxv/P6g==",
      "dependencies": {
        "object-assign": "^4",
        "vary": "^1"
      },
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/dashdash": {
      "version": "1.14.1",
      "resolved": "https://registry.npmjs.org/dashdash/-/dashdash-1.14.1.tgz",
      "integrity": "sha512-jRFi8UDGo6j+odZiEpjazZaWqEal3w/basFjQHQEwVtZJGDpxbH1MeYluwCS8Xq5wmLJooDlMgvVarmWfGM44g==",
      "dependencies": {
        "assert-plus": "^1.0.0"
      },
      "engines": {
        "node": ">=0.10"
      }
    },
    "node_modules/data-uri-to-buffer": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/data-uri-to-buffer/-/data-uri-to-buffer-4.0.1.tgz",
      "integrity": "sha512-0R9ikRb668HB7QDxT1vkpuUBtqc53YyAwMwGeUFKRojY/NWKvdZ+9UYtRfGmhqNbRkTSVpMbmyhXipFFv2cb/A==",
      "engines": {
        "node": ">= 12"
      }
    },
    "node_modules/dayjs": {
      "version": "1.11.7",
      "resolved": "https://registry.npmjs.org/dayjs/-/dayjs-1.11.7.tgz",
      "integrity": "sha512-+Yw9U6YO5TQohxLcIkrXBeY73WP3ejHWVvx8XCk3gxvQDCTEmS48ZrSZCKciI7Bhl/uCMyxYtE9UqRILmFphkQ=="
    },
    "node_modules/debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/delayed-stream": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz",
      "integrity": "sha512-ZySD7Nf91aLB0RxL4KGrKHBXl7Eds1DAmEdcoVawXnLD7SDhpNgtuII2aAkg7a7QS41jxPSZ17p4VdGnMHk3MQ==",
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/delegates": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/delegates/-/delegates-1.0.0.tgz",
      "integrity": "sha512-bd2L678uiWATM6m5Z1VzNCErI3jiGzt6HGY8OVICs40JQq/HALfbyNJmp0UDakEY4pMMaN0Ly5om/B1VI/+xfQ=="
    },
    "node_modules/depd": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/depd/-/depd-2.0.0.tgz",
      "integrity": "sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/destroy": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/destroy/-/destroy-1.2.0.tgz",
      "integrity": "sha512-2sJGJTaXIIaR1w4iJSNoN0hnMY7Gpc/n8D4qSCJw8QqFWXf7cuAgnEHxBpweaVcPevC2l3KpjYCx3NypQQgaJg==",
      "engines": {
        "node": ">= 0.8",
        "npm": "1.2.8000 || >= 1.4.16"
      }
    },
    "node_modules/detect-libc": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/detect-libc/-/detect-libc-2.0.1.tgz",
      "integrity": "sha512-463v3ZeIrcWtdgIg6vI6XUncguvr2TnGl4SzDXinkt9mSLpBJKXT3mW6xT3VQdDN11+WVs29pgvivTc4Lp8v+w==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/dotenv": {
      "version": "16.0.3",
      "resolved": "https://registry.npmjs.org/dotenv/-/dotenv-16.0.3.tgz",
      "integrity": "sha512-7GO6HghkA5fYG9TYnNxi14/7K9f5occMlp3zXAuSxn7CKCxt9xbNWG7yF8hTCSUchlfWSe3uLmlPfigevRItzQ==",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/ecc-jsbn": {
      "version": "0.1.2",
      "resolved": "https://registry.npmjs.org/ecc-jsbn/-/ecc-jsbn-0.1.2.tgz",
      "integrity": "sha512-eh9O+hwRHNbG4BLTjEl3nw044CkGm5X6LoaCf7LPp7UU8Qrt47JYNi6nPX8xjW97TKGKm1ouctg0QSpZe9qrnw==",
      "dependencies": {
        "jsbn": "~0.1.0",
        "safer-buffer": "^2.1.0"
      }
    },
    "node_modules/ecdsa-sig-formatter": {
      "version": "1.0.11",
      "resolved": "https://registry.npmjs.org/ecdsa-sig-formatter/-/ecdsa-sig-formatter-1.0.11.tgz",
      "integrity": "sha512-nagl3RYrbNv6kQkeJIpt6NJZy8twLB/2vtz6yN9Z4vRKHN4/QZJIEbqohALSgwKdnksuY3k5Addp5lg8sVoVcQ==",
      "dependencies": {
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/ee-first": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/ee-first/-/ee-first-1.1.1.tgz",
      "integrity": "sha512-WMwm9LhRUo+WUaRN+vRuETqG89IgZphVSNkdFgeb6sS/E4OrDIN7t48CAewSHXc6C8lefD8KKfr5vY61brQlow=="
    },
    "node_modules/emoji-regex": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A=="
    },
    "node_modules/encodeurl": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-1.0.2.tgz",
      "integrity": "sha512-TPJXq8JqFaVYm2CWmPvnP2Iyo4ZSM7/QKcSmuMLDObfpH5fi7RUGmd/rTDf+rut/saiDiQEeVTNgAmJEdAOx0w==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/error-polyfill": {
      "version": "0.1.3",
      "resolved": "https://registry.npmjs.org/error-polyfill/-/error-polyfill-0.1.3.tgz",
      "integrity": "sha512-XHJk60ufE+TG/ydwp4lilOog549iiQF2OAPhkk9DdiYWMrltz5yhDz/xnKuenNwP7gy3dsibssO5QpVhkrSzzg==",
      "dependencies": {
        "capability": "^0.2.5",
        "o3": "^1.0.3",
        "u3": "^0.1.1"
      }
    },
    "node_modules/escape-html": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz",
      "integrity": "sha512-NiSupZ4OeuGwr68lGIeym/ksIZMJodUGOSCZ/FSnTxcrekbvqrgdUxlJOMpijaKZVjAJrWrGs/6Jy8OMuyj9ow=="
    },
    "node_modules/etag": {
      "version": "1.8.1",
      "resolved": "https://registry.npmjs.org/etag/-/etag-1.8.1.tgz",
      "integrity": "sha512-aIL5Fx7mawVa300al2BnEE4iNvo1qETxLrPI/o05L7z6go7fCw1J6EQmbK4FmJ2AS7kgVF/KEZWufBfdClMcPg==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/express": {
      "version": "4.18.2",
      "resolved": "https://registry.npmjs.org/express/-/express-4.18.2.tgz",
      "integrity": "sha512-5/PsL6iGPdfQ/lKM1UuielYgv3BUoJfz1aUwU9vHZ+J7gyvwdQXFEBIEIaxeGf0GIcreATNyBExtalisDbuMqQ==",
      "dependencies": {
        "accepts": "~1.3.8",
        "array-flatten": "1.1.1",
        "body-parser": "1.20.1",
        "content-disposition": "0.5.4",
        "content-type": "~1.0.4",
        "cookie": "0.5.0",
        "cookie-signature": "1.0.6",
        "debug": "2.6.9",
        "depd": "2.0.0",
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "etag": "~1.8.1",
        "finalhandler": "1.2.0",
        "fresh": "0.5.2",
        "http-errors": "2.0.0",
        "merge-descriptors": "1.0.1",
        "methods": "~1.1.2",
        "on-finished": "2.4.1",
        "parseurl": "~1.3.3",
        "path-to-regexp": "0.1.7",
        "proxy-addr": "~2.0.7",
        "qs": "6.11.0",
        "range-parser": "~1.2.1",
        "safe-buffer": "5.2.1",
        "send": "0.18.0",
        "serve-static": "1.15.0",
        "setprototypeof": "1.2.0",
        "statuses": "2.0.1",
        "type-is": "~1.6.18",
        "utils-merge": "1.0.1",
        "vary": "~1.1.2"
      },
      "engines": {
        "node": ">= 0.10.0"
      }
    },
    "node_modules/express-fileupload": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/express-fileupload/-/express-fileupload-1.4.0.tgz",
      "integrity": "sha512-RjzLCHxkv3umDeZKeFeMg8w7qe0V09w3B7oGZprr/oO2H/ISCgNzuqzn7gV3HRWb37GjRk429CCpSLS2KNTqMQ==",
      "dependencies": {
        "busboy": "^1.6.0"
      },
      "engines": {
        "node": ">=12.0.0"
      }
    },
    "node_modules/extend": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/extend/-/extend-3.0.2.tgz",
      "integrity": "sha512-fjquC59cD7CyW6urNXK0FBufkZcoiGG80wTuPujX590cB5Ttln20E2UB4S/WARVqhXffZl2LNgS+gQdPIIim/g=="
    },
    "node_modules/extsprintf": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/extsprintf/-/extsprintf-1.3.0.tgz",
      "integrity": "sha512-11Ndz7Nv+mvAC1j0ktTa7fAb0vLyGGX+rMHNBYQviQDGU0Hw7lhctJANqbPhu9nV9/izT/IntTgZ7Im/9LJs9g==",
      "engines": [
        "node >=0.6.0"
      ]
    },
    "node_modules/fast-deep-equal": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz",
      "integrity": "sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q=="
    },
    "node_modules/fast-json-stable-stringify": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz",
      "integrity": "sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw=="
    },
    "node_modules/fast-xml-parser": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/fast-xml-parser/-/fast-xml-parser-4.1.2.tgz",
      "integrity": "sha512-CDYeykkle1LiA/uqQyNwYpFbyF6Axec6YapmpUP+/RHWIoR1zKjocdvNaTsxCxZzQ6v9MLXaSYm9Qq0thv0DHg==",
      "optional": true,
      "dependencies": {
        "strnum": "^1.0.5"
      },
      "bin": {
        "fxparser": "src/cli/cli.js"
      },
      "funding": {
        "type": "paypal",
        "url": "https://paypal.me/naturalintelligence"
      }
    },
    "node_modules/fetch-blob": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/fetch-blob/-/fetch-blob-3.2.0.tgz",
      "integrity": "sha512-7yAQpD2UMJzLi1Dqv7qFYnPbaPx7ZfFK6PiIxQ4PfkGPyNyl2Ugx+a/umUonmKqjhM4DnfbMvdX6otXq83soQQ==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/jimmywarting"
        },
        {
          "type": "paypal",
          "url": "https://paypal.me/jimmywarting"
        }
      ],
      "dependencies": {
        "node-domexception": "^1.0.0",
        "web-streams-polyfill": "^3.0.3"
      },
      "engines": {
        "node": "^12.20 || >= 14.13"
      }
    },
    "node_modules/fill-range": {
      "version": "7.0.1",
      "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.0.1.tgz",
      "integrity": "sha512-qOo9F+dMUmC2Lcb4BbVvnKJxTPjCm+RRpe4gDuGrzkL7mEVl/djYSu2OdQ2Pa302N4oqkSg9ir6jaLWJ2USVpQ==",
      "dev": true,
      "dependencies": {
        "to-regex-range": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/finalhandler": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/finalhandler/-/finalhandler-1.2.0.tgz",
      "integrity": "sha512-5uXcUVftlQMFnWC9qu/svkWv3GTd2PfUhK/3PLkYNAe7FbqJMt3515HaxE6eRL74GdsriiwujiawdaB1BpEISg==",
      "dependencies": {
        "debug": "2.6.9",
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "on-finished": "2.4.1",
        "parseurl": "~1.3.3",
        "statuses": "2.0.1",
        "unpipe": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/follow-redirects": {
      "version": "1.15.2",
      "resolved": "https://registry.npmjs.org/follow-redirects/-/follow-redirects-1.15.2.tgz",
      "integrity": "sha512-VQLG33o04KaQ8uYi2tVNbdrWp1QWxNNea+nmIB4EVM28v0hmP17z7aG1+wAkNzVq4KeXTq3221ye5qTJP91JwA==",
      "funding": [
        {
          "type": "individual",
          "url": "https://github.com/sponsors/RubenVerborgh"
        }
      ],
      "engines": {
        "node": ">=4.0"
      },
      "peerDependenciesMeta": {
        "debug": {
          "optional": true
        }
      }
    },
    "node_modules/forever-agent": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/forever-agent/-/forever-agent-0.6.1.tgz",
      "integrity": "sha512-j0KLYPhm6zeac4lz3oJ3o65qvgQCcPubiyotZrXqEaG4hNagNYO8qdlUrX5vwqv9ohqeT/Z3j6+yW067yWWdUw==",
      "engines": {
        "node": "*"
      }
    },
    "node_modules/form-data": {
      "version": "2.3.3",
      "resolved": "https://registry.npmjs.org/form-data/-/form-data-2.3.3.tgz",
      "integrity": "sha512-1lLKB2Mu3aGP1Q/2eCOx0fNbRMe7XdwktwOruhfqqd0rIJWwN4Dh+E3hrPSlDCXnSR7UtZ1N38rVXm+6+MEhJQ==",
      "dependencies": {
        "asynckit": "^0.4.0",
        "combined-stream": "^1.0.6",
        "mime-types": "^2.1.12"
      },
      "engines": {
        "node": ">= 0.12"
      }
    },
    "node_modules/formdata-polyfill": {
      "version": "4.0.10",
      "resolved": "https://registry.npmjs.org/formdata-polyfill/-/formdata-polyfill-4.0.10.tgz",
      "integrity": "sha512-buewHzMvYL29jdeQTVILecSaZKnt/RJWjoZCF5OW60Z67/GmSLBkOFM7qh1PI3zFNtJbaZL5eQu1vLfazOwj4g==",
      "dependencies": {
        "fetch-blob": "^3.1.2"
      },
      "engines": {
        "node": ">=12.20.0"
      }
    },
    "node_modules/forwarded": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/forwarded/-/forwarded-0.2.0.tgz",
      "integrity": "sha512-buRG0fpBtRHSTCOASe6hD258tEubFoRLb4ZNA6NxMVHNw2gOcwHo9wyablzMzOA5z9xA9L1KNjk/Nt6MT9aYow==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/fresh": {
      "version": "0.5.2",
      "resolved": "https://registry.npmjs.org/fresh/-/fresh-0.5.2.tgz",
      "integrity": "sha512-zJ2mQYM18rEFOudeV4GShTGIQ7RbzA7ozbU9I/XBpm7kqgMywgmylMwXHxZJmkVoYkna9d2pVXVXPdYTP9ej8Q==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/fs-minipass": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/fs-minipass/-/fs-minipass-2.1.0.tgz",
      "integrity": "sha512-V/JgOLFCS+R6Vcq0slCuaeWEdNC3ouDlJMNIsacH2VtALiu9mV4LPrHc5cDl8k5aw6J8jwgWWpiTo5RYhmIzvg==",
      "dependencies": {
        "minipass": "^3.0.0"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/fs-minipass/node_modules/minipass": {
      "version": "3.3.6",
      "resolved": "https://registry.npmjs.org/minipass/-/minipass-3.3.6.tgz",
      "integrity": "sha512-DxiNidxSEK+tHG6zOIklvNOwm3hvCrbUrdtzY74U6HKTJxvIDfOUL5W5P2Ghd3DTkhhKPYGqeNUIh5qcM4YBfw==",
      "dependencies": {
        "yallist": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/fs.realpath": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz",
      "integrity": "sha512-OO0pH2lK6a0hZnAdau5ItzHPI6pUlvI7jMVnxUQRtw4owF2wk8lOSabtGDCTP4Ggrg2MbGnWO9X8K1t4+fGMDw=="
    },
    "node_modules/fsevents": {
      "version": "2.3.2",
      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.2.tgz",
      "integrity": "sha512-xiqMQR4xAeHTuB9uWm+fFRcIOgKBMiOBP+eXiyT7jsgVCq1bkVygt00oASowB7EdtpOHaaPgKt812P9ab+DDKA==",
      "dev": true,
      "hasInstallScript": true,
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": "^8.16.0 || ^10.6.0 || >=11.0.0"
      }
    },
    "node_modules/function-bind": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.1.tgz",
      "integrity": "sha512-yIovAzMX49sF8Yl58fSCWJ5svSLuaibPxXQJFLmBObTuCr0Mf1KiPopGM9NiFjiYBCbfaa2Fh6breQ6ANVTI0A=="
    },
    "node_modules/gauge": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/gauge/-/gauge-3.0.2.tgz",
      "integrity": "sha512-+5J6MS/5XksCuXq++uFRsnUd7Ovu1XenbeuIuNRJxYWjgQbPuFhT14lAvsWfqfAmnwluf1OwMjz39HjfLPci0Q==",
      "dependencies": {
        "aproba": "^1.0.3 || ^2.0.0",
        "color-support": "^1.1.2",
        "console-control-strings": "^1.0.0",
        "has-unicode": "^2.0.1",
        "object-assign": "^4.1.1",
        "signal-exit": "^3.0.0",
        "string-width": "^4.2.3",
        "strip-ansi": "^6.0.1",
        "wide-align": "^1.1.2"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/get-intrinsic": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.2.0.tgz",
      "integrity": "sha512-L049y6nFOuom5wGyRc3/gdTLO94dySVKRACj1RmJZBQXlbTMhtNIgkWkUHq+jYmZvKf14EW1EoJnnjbmoHij0Q==",
      "dependencies": {
        "function-bind": "^1.1.1",
        "has": "^1.0.3",
        "has-symbols": "^1.0.3"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/getpass": {
      "version": "0.1.7",
      "resolved": "https://registry.npmjs.org/getpass/-/getpass-0.1.7.tgz",
      "integrity": "sha512-0fzj9JxOLfJ+XGLhR8ze3unN0KZCgZwiSSDz168VERjK8Wl8kVSdcu2kspd4s4wtAa1y/qrVRiAA0WclVsu0ng==",
      "dependencies": {
        "assert-plus": "^1.0.0"
      }
    },
    "node_modules/glob": {
      "version": "7.2.3",
      "resolved": "https://registry.npmjs.org/glob/-/glob-7.2.3.tgz",
      "integrity": "sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==",
      "dependencies": {
        "fs.realpath": "^1.0.0",
        "inflight": "^1.0.4",
        "inherits": "2",
        "minimatch": "^3.1.1",
        "once": "^1.3.0",
        "path-is-absolute": "^1.0.0"
      },
      "engines": {
        "node": "*"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/glob-parent": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
      "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
      "dev": true,
      "dependencies": {
        "is-glob": "^4.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/har-schema": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/har-schema/-/har-schema-2.0.0.tgz",
      "integrity": "sha512-Oqluz6zhGX8cyRaTQlFMPw80bSJVG2x/cFb8ZPhUILGgHka9SsokCCOQgpveePerqidZOrT14ipqfJb7ILcW5Q==",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/har-validator": {
      "version": "5.1.5",
      "resolved": "https://registry.npmjs.org/har-validator/-/har-validator-5.1.5.tgz",
      "integrity": "sha512-nmT2T0lljbxdQZfspsno9hgrG3Uir6Ks5afism62poxqBM6sDnMEuPmzTq8XN0OEwqKLLdh1jQI3qyE66Nzb3w==",
      "deprecated": "this library is no longer supported",
      "dependencies": {
        "ajv": "^6.12.3",
        "har-schema": "^2.0.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/has": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/has/-/has-1.0.3.tgz",
      "integrity": "sha512-f2dvO0VU6Oej7RkWJGrehjbzMAjFp5/VKPp5tTpWIV4JHHZK1/BxbFRtf/siA2SWTe09caDmVtYYzWEIbBS4zw==",
      "dependencies": {
        "function-bind": "^1.1.1"
      },
      "engines": {
        "node": ">= 0.4.0"
      }
    },
    "node_modules/has-flag": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz",
      "integrity": "sha512-sKJf1+ceQBr4SMkvQnBDNDtf4TXpVhVGateu0t918bl30FnbE2m4vNLX+VWe/dpjlb+HugGYzW7uQXH98HPEYw==",
      "dev": true,
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/has-symbols": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.0.3.tgz",
      "integrity": "sha512-l3LCuF6MgDNwTDKkdYGEihYjt5pRPbEg46rtlmnSPlUbgmB8LOIrKJbYYFBSbnPaJexMKtiPO8hmeRjRz2Td+A==",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-unicode": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/has-unicode/-/has-unicode-2.0.1.tgz",
      "integrity": "sha512-8Rf9Y83NBReMnx0gFzA8JImQACstCYWUplepDa9xprwwtmgEZUF0h/i5xSA625zB/I37EtrswSST6OXxwaaIJQ=="
    },
    "node_modules/helmet": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/helmet/-/helmet-6.0.1.tgz",
      "integrity": "sha512-8wo+VdQhTMVBMCITYZaGTbE4lvlthelPYSvoyNvk4RECTmrVjMerp9RfUOQXZWLvCcAn1pKj7ZRxK4lI9Alrcw==",
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/http-errors": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-2.0.0.tgz",
      "integrity": "sha512-FtwrG/euBzaEjYeRqOgly7G0qviiXoJWnvEH2Z1plBdXgbyjv34pHTSb9zoeHMyDy33+DWy5Wt9Wo+TURtOYSQ==",
      "dependencies": {
        "depd": "2.0.0",
        "inherits": "2.0.4",
        "setprototypeof": "1.2.0",
        "statuses": "2.0.1",
        "toidentifier": "1.0.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/http-signature": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/http-signature/-/http-signature-1.2.0.tgz",
      "integrity": "sha512-CAbnr6Rz4CYQkLYUtSNXxQPUH2gK8f3iWexVlsnMeD+GjlsQ0Xsy1cOX+mN3dtxYomRy21CiOzU8Uhw6OwncEQ==",
      "dependencies": {
        "assert-plus": "^1.0.0",
        "jsprim": "^1.2.2",
        "sshpk": "^1.7.0"
      },
      "engines": {
        "node": ">=0.8",
        "npm": ">=1.3.7"
      }
    },
    "node_modules/https-proxy-agent": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/https-proxy-agent/-/https-proxy-agent-5.0.1.tgz",
      "integrity": "sha512-dFcAjpTQFgoLMzC2VwU+C/CbS7uRL0lWmxDITmqm7C+7F0Odmj6s9l6alZc6AELXhrnggM2CeWSXHGOdX2YtwA==",
      "dependencies": {
        "agent-base": "6",
        "debug": "4"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/https-proxy-agent/node_modules/debug": {
      "version": "4.3.4",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
      "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
      "dependencies": {
        "ms": "2.1.2"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/https-proxy-agent/node_modules/ms": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
      "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w=="
    },
    "node_modules/iconv-lite": {
      "version": "0.4.24",
      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.24.tgz",
      "integrity": "sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==",
      "dependencies": {
        "safer-buffer": ">= 2.1.2 < 3"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/ieee754": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/ieee754/-/ieee754-1.2.1.tgz",
      "integrity": "sha512-dcyqhDvX1C46lXZcVqCpK+FtMRQVdIMN6/Df5js2zouUsqG7I6sFxitIC+7KYK29KdXOLHdu9zL4sFnoVQnqaA==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ]
    },
    "node_modules/ignore-by-default": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/ignore-by-default/-/ignore-by-default-1.0.1.tgz",
      "integrity": "sha512-Ius2VYcGNk7T90CppJqcIkS5ooHUZyIQK+ClZfMfMNFEF9VSE73Fq+906u/CWu92x4gzZMWOwfFYckPObzdEbA==",
      "dev": true
    },
    "node_modules/inflight": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz",
      "integrity": "sha512-k92I/b08q4wvFscXCLvqfsHCrjrF7yiXsQuIVvVE7N82W3+aqpzuUdBbfhWcy/FZR3/4IgflMgKLOsvPDrGCJA==",
      "dependencies": {
        "once": "^1.3.0",
        "wrappy": "1"
      }
    },
    "node_modules/inherits": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ=="
    },
    "node_modules/ip": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ip/-/ip-2.0.0.tgz",
      "integrity": "sha512-WKa+XuLG1A1R0UWhl2+1XQSi+fZWMsYKffMZTTYsiZaUD8k2yDAj5atimTUD2TZkyCkNEeYE5NhFZmupOGtjYQ=="
    },
    "node_modules/ipaddr.js": {
      "version": "1.9.1",
      "resolved": "https://registry.npmjs.org/ipaddr.js/-/ipaddr.js-1.9.1.tgz",
      "integrity": "sha512-0KI/607xoxSToH7GjN1FfSbLoU0+btTicjsQSWQlh/hZykN8KpmMf7uYwPW3R+akZ6R/w18ZlXSHBYXiYUPO3g==",
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/is-binary-path": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/is-binary-path/-/is-binary-path-2.1.0.tgz",
      "integrity": "sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==",
      "dev": true,
      "dependencies": {
        "binary-extensions": "^2.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-extglob": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
      "integrity": "sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==",
      "dev": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-fullwidth-code-point": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
      "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-glob": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
      "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
      "dev": true,
      "dependencies": {
        "is-extglob": "^2.1.1"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-number": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",
      "integrity": "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==",
      "dev": true,
      "engines": {
        "node": ">=0.12.0"
      }
    },
    "node_modules/is-typedarray": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/is-typedarray/-/is-typedarray-1.0.0.tgz",
      "integrity": "sha512-cyA56iCMHAh5CdzjJIa4aohJyeO1YbwLi3Jc35MmRU6poroFjIGZzUzupGiRPOjgHg9TLu43xbpwXk523fMxKA=="
    },
    "node_modules/isstream": {
      "version": "0.1.2",
      "resolved": "https://registry.npmjs.org/isstream/-/isstream-0.1.2.tgz",
      "integrity": "sha512-Yljz7ffyPbrLpLngrMtZ7NduUgVvi6wG9RJ9IUcyCd59YQ911PBJphODUcbOVbqYfxe1wuYf/LJ8PauMRwsM/g=="
    },
    "node_modules/js-sha256": {
      "version": "0.9.0",
      "resolved": "https://registry.npmjs.org/js-sha256/-/js-sha256-0.9.0.tgz",
      "integrity": "sha512-sga3MHh9sgQN2+pJ9VYZ+1LPwXOxuBJBA5nrR5/ofPfuiJBE2hnjsaN8se8JznOmGLN2p49Pe5U/ttafcs/apA=="
    },
    "node_modules/jsbn": {
      "version": "0.1.1",
      "resolved": "https://registry.npmjs.org/jsbn/-/jsbn-0.1.1.tgz",
      "integrity": "sha512-UVU9dibq2JcFWxQPA6KCqj5O42VOmAY3zQUfEKxU0KpTGXwNoCjkX1e13eHNvw/xPynt6pU0rZ1htjWTNTSXsg=="
    },
    "node_modules/json-schema": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/json-schema/-/json-schema-0.4.0.tgz",
      "integrity": "sha512-es94M3nTIfsEPisRafak+HDLfHXnKBhV3vU5eqPcS3flIWqcxJWgXHXiey3YrpaNsanY5ei1VoYEbOzijuq9BA=="
    },
    "node_modules/json-schema-traverse": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz",
      "integrity": "sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg=="
    },
    "node_modules/json-stringify-safe": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/json-stringify-safe/-/json-stringify-safe-5.0.1.tgz",
      "integrity": "sha512-ZClg6AaYvamvYEE82d3Iyd3vSSIjQ+odgjaTzRuO3s7toCdFKczob2i0zCh7JE8kWn17yvAWhUVxvqGwUalsRA=="
    },
    "node_modules/jsonwebtoken": {
      "version": "9.0.0",
      "resolved": "https://registry.npmjs.org/jsonwebtoken/-/jsonwebtoken-9.0.0.tgz",
      "integrity": "sha512-tuGfYXxkQGDPnLJ7SibiQgVgeDgfbPq2k2ICcbgqW8WxWLBAxKQM/ZCu/IT8SOSwmaYl4dpTFCW5xZv7YbbWUw==",
      "dependencies": {
        "jws": "^3.2.2",
        "lodash": "^4.17.21",
        "ms": "^2.1.1",
        "semver": "^7.3.8"
      },
      "engines": {
        "node": ">=12",
        "npm": ">=6"
      }
    },
    "node_modules/jsonwebtoken/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA=="
    },
    "node_modules/jsprim": {
      "version": "1.4.2",
      "resolved": "https://registry.npmjs.org/jsprim/-/jsprim-1.4.2.tgz",
      "integrity": "sha512-P2bSOMAc/ciLz6DzgjVlGJP9+BrJWu5UDGK70C2iweC5QBIeFf0ZXRvGjEj2uYgrY2MkAAhsSWHDWlFtEroZWw==",
      "dependencies": {
        "assert-plus": "1.0.0",
        "extsprintf": "1.3.0",
        "json-schema": "0.4.0",
        "verror": "1.10.0"
      },
      "engines": {
        "node": ">=0.6.0"
      }
    },
    "node_modules/jwa": {
      "version": "1.4.1",
      "resolved": "https://registry.npmjs.org/jwa/-/jwa-1.4.1.tgz",
      "integrity": "sha512-qiLX/xhEEFKUAJ6FiBMbes3w9ATzyk5W7Hvzpa/SLYdxNtng+gcurvrI7TbACjIXlsJyr05/S1oUhZrc63evQA==",
      "dependencies": {
        "buffer-equal-constant-time": "1.0.1",
        "ecdsa-sig-formatter": "1.0.11",
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/jws": {
      "version": "3.2.2",
      "resolved": "https://registry.npmjs.org/jws/-/jws-3.2.2.tgz",
      "integrity": "sha512-YHlZCB6lMTllWDtSPHz/ZXTsi8S00usEV6v1tjq8tOUZzw7DpSDWVXjXDre6ed1w/pd495ODpHZYSdkRTsa0HA==",
      "dependencies": {
        "jwa": "^1.4.1",
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/kareem": {
      "version": "2.5.1",
      "resolved": "https://registry.npmjs.org/kareem/-/kareem-2.5.1.tgz",
      "integrity": "sha512-7jFxRVm+jD+rkq3kY0iZDJfsO2/t4BBPeEb2qKn2lR/9KhuksYk5hxzfRYWMPV8P/x2d0kHD306YyWLzjjH+uA==",
      "engines": {
        "node": ">=12.0.0"
      }
    },
    "node_modules/lodash": {
      "version": "4.17.21",
      "resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz",
      "integrity": "sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg=="
    },
    "node_modules/lodash.includes": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/lodash.includes/-/lodash.includes-4.3.0.tgz",
      "integrity": "sha512-W3Bx6mdkRTGtlJISOvVD/lbqjTlPPUDTMnlXZFnVwi9NKJ6tiAk6LVdlhZMm17VZisqhKcgzpO5Wz91PCt5b0w=="
    },
    "node_modules/lodash.isboolean": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/lodash.isboolean/-/lodash.isboolean-3.0.3.tgz",
      "integrity": "sha512-Bz5mupy2SVbPHURB98VAcw+aHh4vRV5IPNhILUCsOzRmsTmSQ17jIuqopAentWoehktxGd9e/hbIXq980/1QJg=="
    },
    "node_modules/lodash.isinteger": {
      "version": "4.0.4",
      "resolved": "https://registry.npmjs.org/lodash.isinteger/-/lodash.isinteger-4.0.4.tgz",
      "integrity": "sha512-DBwtEWN2caHQ9/imiNeEA5ys1JoRtRfY3d7V9wkqtbycnAmTvRRmbHKDV4a0EYc678/dia0jrte4tjYwVBaZUA=="
    },
    "node_modules/lodash.isnumber": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/lodash.isnumber/-/lodash.isnumber-3.0.3.tgz",
      "integrity": "sha512-QYqzpfwO3/CWf3XP+Z+tkQsfaLL/EnUlXWVkIk5FUPc4sBdTehEqZONuyRt2P67PXAk+NXmTBcc97zw9t1FQrw=="
    },
    "node_modules/lodash.isplainobject": {
      "version": "4.0.6",
      "resolved": "https://registry.npmjs.org/lodash.isplainobject/-/lodash.isplainobject-4.0.6.tgz",
      "integrity": "sha512-oSXzaWypCMHkPC3NvBEaPHf0KsA5mvPrOPgQWDsbg8n7orZ290M0BmC/jgRZ4vcJ6DTAhjrsSYgdsW/F+MFOBA=="
    },
    "node_modules/lodash.isstring": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/lodash.isstring/-/lodash.isstring-4.0.1.tgz",
      "integrity": "sha512-0wJxfxH1wgO3GrbuP+dTTk7op+6L41QCXbGINEmD+ny/G/eCqGzxyCsh7159S+mgDDcoarnBw6PC1PS5+wUGgw=="
    },
    "node_modules/lodash.once": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/lodash.once/-/lodash.once-4.1.1.tgz",
      "integrity": "sha512-Sb487aTOCr9drQVL8pIxOzVhafOjZN9UU54hiN8PU3uAiSV7lx1yYNpbNmex2PK6dSJoNTSJUUswT651yww3Mg=="
    },
    "node_modules/lru-cache": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-6.0.0.tgz",
      "integrity": "sha512-Jo6dJ04CmSjuznwJSS3pUeWmd/H0ffTlkXXgwZi+eq1UCmqQwCh+eLsYOYCwY991i2Fah4h1BEMCx4qThGbsiA==",
      "dependencies": {
        "yallist": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/make-dir": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/make-dir/-/make-dir-3.1.0.tgz",
      "integrity": "sha512-g3FeP20LNwhALb/6Cz6Dd4F2ngze0jz7tbzrD2wAV+o9FeNHe4rL+yK2md0J/fiSf1sa1ADhXqi5+oVwOM/eGw==",
      "dependencies": {
        "semver": "^6.0.0"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/make-dir/node_modules/semver": {
      "version": "6.3.0",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.0.tgz",
      "integrity": "sha512-b39TBaTSfV6yBrapU89p5fKekE2m/NwnDocOVruQFS1/veMgdzuPcnOM34M6CwxW8jH/lxEa5rBoDeUwu5HHTw==",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/media-typer": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/media-typer/-/media-typer-0.3.0.tgz",
      "integrity": "sha512-dq+qelQ9akHpcOl/gUVRTxVIOkAJ1wR3QAvb4RsVjS8oVoFjDGTc679wJYmUmknUF5HwMLOgb5O+a3KxfWapPQ==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/memory-pager": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/memory-pager/-/memory-pager-1.5.0.tgz",
      "integrity": "sha512-ZS4Bp4r/Zoeq6+NLJpP+0Zzm0pR8whtGPf1XExKLJBAczGMnSi3It14OiNCStjQjM6NU1okjQGSxgEZN8eBYKg==",
      "optional": true
    },
    "node_modules/merge-descriptors": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/merge-descriptors/-/merge-descriptors-1.0.1.tgz",
      "integrity": "sha512-cCi6g3/Zr1iqQi6ySbseM1Xvooa98N0w31jzUYrXPX2xqObmFGHJ0tQ5u74H3mVh7wLouTseZyYIq39g8cNp1w=="
    },
    "node_modules/methods": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/methods/-/methods-1.1.2.tgz",
      "integrity": "sha512-iclAHeNqNm68zFtnZ0e+1L2yUIdvzNoauKU4WBA3VvH/vPFieF7qfRlwUZU+DA9P9bPXIS90ulxoUoCH23sV2w==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mime": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/mime/-/mime-1.6.0.tgz",
      "integrity": "sha512-x0Vn8spI+wuJ1O6S7gnbaQg8Pxh4NNHb7KSINmEWKiPE4RKOplvijn+NkmYmmRgP68mc70j2EbeTFRsrswaQeg==",
      "bin": {
        "mime": "cli.js"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/mime-db": {
      "version": "1.52.0",
      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
      "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mime-types": {
      "version": "2.1.35",
      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
      "integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
      "dependencies": {
        "mime-db": "1.52.0"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/minimatch": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
      "dependencies": {
        "brace-expansion": "^1.1.7"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/minipass": {
      "version": "4.2.4",
      "resolved": "https://registry.npmjs.org/minipass/-/minipass-4.2.4.tgz",
      "integrity": "sha512-lwycX3cBMTvcejsHITUgYj6Gy6A7Nh4Q6h9NP4sTHY1ccJlC7yKzDmiShEHsJ16Jf1nKGDEaiHxiltsJEvk0nQ==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/minizlib": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/minizlib/-/minizlib-2.1.2.tgz",
      "integrity": "sha512-bAxsR8BVfj60DWXHE3u30oHzfl4G7khkSuPW+qvpd7jFRHm7dLxOjUk1EHACJ/hxLY8phGJ0YhYHZo7jil7Qdg==",
      "dependencies": {
        "minipass": "^3.0.0",
        "yallist": "^4.0.0"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/minizlib/node_modules/minipass": {
      "version": "3.3.6",
      "resolved": "https://registry.npmjs.org/minipass/-/minipass-3.3.6.tgz",
      "integrity": "sha512-DxiNidxSEK+tHG6zOIklvNOwm3hvCrbUrdtzY74U6HKTJxvIDfOUL5W5P2Ghd3DTkhhKPYGqeNUIh5qcM4YBfw==",
      "dependencies": {
        "yallist": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/mkdirp": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/mkdirp/-/mkdirp-1.0.4.tgz",
      "integrity": "sha512-vVqVZQyf3WLx2Shd0qJ9xuvqgAyKPLAiqITEtqW0oIUjzo3PePDd6fW9iFz30ef7Ysp/oiWqbhszeGWW2T6Gzw==",
      "bin": {
        "mkdirp": "bin/cmd.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/moment": {
      "version": "2.29.4",
      "resolved": "https://registry.npmjs.org/moment/-/moment-2.29.4.tgz",
      "integrity": "sha512-5LC9SOxjSc2HF6vO2CyuTDNivEdoz2IvyJJGj6X8DJ0eFyfszE0QiEd+iXmBvUP3WHxSjFH/vIsA0EN00cgr8w==",
      "engines": {
        "node": "*"
      }
    },
    "node_modules/mongodb": {
      "version": "4.14.0",
      "resolved": "https://registry.npmjs.org/mongodb/-/mongodb-4.14.0.tgz",
      "integrity": "sha512-coGKkWXIBczZPr284tYKFLg+KbGPPLlSbdgfKAb6QqCFt5bo5VFZ50O3FFzsw4rnkqjwT6D8Qcoo9nshYKM7Mg==",
      "dependencies": {
        "bson": "^4.7.0",
        "mongodb-connection-string-url": "^2.5.4",
        "socks": "^2.7.1"
      },
      "engines": {
        "node": ">=12.9.0"
      },
      "optionalDependencies": {
        "@aws-sdk/credential-providers": "^3.186.0",
        "saslprep": "^1.0.3"
      }
    },
    "node_modules/mongodb-connection-string-url": {
      "version": "2.6.0",
      "resolved": "https://registry.npmjs.org/mongodb-connection-string-url/-/mongodb-connection-string-url-2.6.0.tgz",
      "integrity": "sha512-WvTZlI9ab0QYtTYnuMLgobULWhokRjtC7db9LtcVfJ+Hsnyr5eo6ZtNAt3Ly24XZScGMelOcGtm7lSn0332tPQ==",
      "dependencies": {
        "@types/whatwg-url": "^8.2.1",
        "whatwg-url": "^11.0.0"
      }
    },
    "node_modules/mongoose": {
      "version": "6.10.2",
      "resolved": "https://registry.npmjs.org/mongoose/-/mongoose-6.10.2.tgz",
      "integrity": "sha512-9/AbheG2PiVVBWLx3S6LgCIEQNdMppjdnp/WH9nLGjFzjJeb9LiHNPEtsOGOm8qXmuICHMdbn5iUFAsLWWvpEw==",
      "dependencies": {
        "bson": "^4.7.0",
        "kareem": "2.5.1",
        "mongodb": "4.14.0",
        "mpath": "0.9.0",
        "mquery": "4.0.3",
        "ms": "2.1.3",
        "sift": "16.0.1"
      },
      "engines": {
        "node": ">=12.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/mongoose"
      }
    },
    "node_modules/mongoose/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA=="
    },
    "node_modules/morgan": {
      "version": "1.10.0",
      "resolved": "https://registry.npmjs.org/morgan/-/morgan-1.10.0.tgz",
      "integrity": "sha512-AbegBVI4sh6El+1gNwvD5YIck7nSA36weD7xvIxG4in80j/UoK8AEGaWnnz8v1GxonMCltmlNs5ZKbGvl9b1XQ==",
      "dev": true,
      "dependencies": {
        "basic-auth": "~2.0.1",
        "debug": "2.6.9",
        "depd": "~2.0.0",
        "on-finished": "~2.3.0",
        "on-headers": "~1.0.2"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/morgan/node_modules/on-finished": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/on-finished/-/on-finished-2.3.0.tgz",
      "integrity": "sha512-ikqdkGAAyf/X/gPhXGvfgAytDZtDbr+bkNUJ0N9h5MI/dmdgCs3l6hoHrcUv41sRKew3jIwrp4qQDXiK99Utww==",
      "dev": true,
      "dependencies": {
        "ee-first": "1.1.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/mpath": {
      "version": "0.9.0",
      "resolved": "https://registry.npmjs.org/mpath/-/mpath-0.9.0.tgz",
      "integrity": "sha512-ikJRQTk8hw5DEoFVxHG1Gn9T/xcjtdnOKIU1JTmGjZZlg9LST2mBLmcX3/ICIbgJydT2GOc15RnNy5mHmzfSew==",
      "engines": {
        "node": ">=4.0.0"
      }
    },
    "node_modules/mquery": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/mquery/-/mquery-4.0.3.tgz",
      "integrity": "sha512-J5heI+P08I6VJ2Ky3+33IpCdAvlYGTSUjwTPxkAr8i8EoduPMBX2OY/wa3IKZIQl7MU4SbFk8ndgSKyB/cl1zA==",
      "dependencies": {
        "debug": "4.x"
      },
      "engines": {
        "node": ">=12.0.0"
      }
    },
    "node_modules/mquery/node_modules/debug": {
      "version": "4.3.4",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
      "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
      "dependencies": {
        "ms": "2.1.2"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/mquery/node_modules/ms": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
      "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w=="
    },
    "node_modules/ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A=="
    },
    "node_modules/mustache": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/mustache/-/mustache-4.2.0.tgz",
      "integrity": "sha512-71ippSywq5Yb7/tVYyGbkBggbU8H3u5Rz56fH60jGFgr8uHwxs+aSKeqmluIVzM0m0kB7xQjKS6qPfd0b2ZoqQ==",
      "bin": {
        "mustache": "bin/mustache"
      }
    },
    "node_modules/near-api-js": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/near-api-js/-/near-api-js-1.1.0.tgz",
      "integrity": "sha512-qYKv1mYsaDZc2uYndhS+ttDhR9+60qFc+ZjD6lWsAxr3ZskMjRwPffDGQZYhC7BRDQMe1HEbk6d5mf+TVm0Lqg==",
      "dependencies": {
        "bn.js": "5.2.1",
        "borsh": "^0.7.0",
        "bs58": "^4.0.0",
        "depd": "^2.0.0",
        "error-polyfill": "^0.1.3",
        "http-errors": "^1.7.2",
        "js-sha256": "^0.9.0",
        "mustache": "^4.0.0",
        "node-fetch": "^2.6.1",
        "text-encoding-utf-8": "^1.0.2",
        "tweetnacl": "^1.0.1"
      }
    },
    "node_modules/near-api-js/node_modules/http-errors": {
      "version": "1.8.1",
      "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-1.8.1.tgz",
      "integrity": "sha512-Kpk9Sm7NmI+RHhnj6OIWDI1d6fIoFAtFt9RLaTMRlg/8w49juAStsrBgp0Dp4OdxdVbRIeKhtCUvoi/RuAhO4g==",
      "dependencies": {
        "depd": "~1.1.2",
        "inherits": "2.0.4",
        "setprototypeof": "1.2.0",
        "statuses": ">= 1.5.0 < 2",
        "toidentifier": "1.0.1"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/near-api-js/node_modules/http-errors/node_modules/depd": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/depd/-/depd-1.1.2.tgz",
      "integrity": "sha512-7emPTl6Dpo6JRXOXjLRxck+FlLRX5847cLKEn00PLAgc3g2hTZZgr+e4c2v6QpSmLeFP3n5yUo7ft6avBK/5jQ==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/near-api-js/node_modules/node-fetch": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-2.6.9.tgz",
      "integrity": "sha512-DJm/CJkZkRjKKj4Zi4BsKVZh3ValV5IR5s7LVZnW+6YMh0W1BfNA8XSs6DLMGYlId5F3KnA70uu2qepcR08Qqg==",
      "dependencies": {
        "whatwg-url": "^5.0.0"
      },
      "engines": {
        "node": "4.x || >=6.0.0"
      },
      "peerDependencies": {
        "encoding": "^0.1.0"
      },
      "peerDependenciesMeta": {
        "encoding": {
          "optional": true
        }
      }
    },
    "node_modules/near-api-js/node_modules/statuses": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/statuses/-/statuses-1.5.0.tgz",
      "integrity": "sha512-OpZ3zP+jT1PI7I8nemJX4AKmAX070ZkYPVWV/AaKTJl+tXCTGyVdC1a4SL8RUQYEwk/f34ZX8UTykN68FwrqAA==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/near-api-js/node_modules/tr46": {
      "version": "0.0.3",
      "resolved": "https://registry.npmjs.org/tr46/-/tr46-0.0.3.tgz",
      "integrity": "sha512-N3WMsuqV66lT30CrXNbEjx4GEwlow3v6rr4mCcv6prnfwhS01rkgyFdjPNBYd9br7LpXV1+Emh01fHnq2Gdgrw=="
    },
    "node_modules/near-api-js/node_modules/webidl-conversions": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-3.0.1.tgz",
      "integrity": "sha512-2JAn3z8AR6rjK8Sm8orRC0h/bcl/DqL7tRPdGZ4I1CjdF+EaMLmYxBHyXuKL849eucPFhvBoxMsflfOb8kxaeQ=="
    },
    "node_modules/near-api-js/node_modules/whatwg-url": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-5.0.0.tgz",
      "integrity": "sha512-saE57nupxk6v3HY35+jzBwYa0rKSy0XR8JSxZPwgLr7ys0IBzhGviA1/TUGJLmSVqs8pb9AnvICXEuOHLprYTw==",
      "dependencies": {
        "tr46": "~0.0.3",
        "webidl-conversions": "^3.0.0"
      }
    },
    "node_modules/negotiator": {
      "version": "0.6.3",
      "resolved": "https://registry.npmjs.org/negotiator/-/negotiator-0.6.3.tgz",
      "integrity": "sha512-+EUsqGPLsM+j/zdChZjsnX51g4XrHFOIXwfnCVPGlQk/k5giakcKsuxCObBRu6DSm9opw/O6slWbJdghQM4bBg==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/node-addon-api": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/node-addon-api/-/node-addon-api-5.1.0.tgz",
      "integrity": "sha512-eh0GgfEkpnoWDq+VY8OyvYhFEzBk6jIYbRKdIlyTiAXIVJ8PyBaKb0rp7oDtoddbdoHWhq8wwr+XZ81F1rpNdA=="
    },
    "node_modules/node-domexception": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/node-domexception/-/node-domexception-1.0.0.tgz",
      "integrity": "sha512-/jKZoMpw0F8GRwl4/eLROPA3cfcXtLApP0QzLmUT/HuPCZWyB7IY9ZrMeKw2O/nFIqPQB3PVM9aYm0F312AXDQ==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/jimmywarting"
        },
        {
          "type": "github",
          "url": "https://paypal.me/jimmywarting"
        }
      ],
      "engines": {
        "node": ">=10.5.0"
      }
    },
    "node_modules/node-fetch": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-3.3.0.tgz",
      "integrity": "sha512-BKwRP/O0UvoMKp7GNdwPlObhYGB5DQqwhEDQlNKuoqwVYSxkSZCSbHjnFFmUEtwSKRPU4kNK8PbDYYitwaE3QA==",
      "dependencies": {
        "data-uri-to-buffer": "^4.0.0",
        "fetch-blob": "^3.1.4",
        "formdata-polyfill": "^4.0.10"
      },
      "engines": {
        "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/node-fetch"
      }
    },
    "node_modules/nodemailer": {
      "version": "6.9.1",
      "resolved": "https://registry.npmjs.org/nodemailer/-/nodemailer-6.9.1.tgz",
      "integrity": "sha512-qHw7dOiU5UKNnQpXktdgQ1d3OFgRAekuvbJLcdG5dnEo/GtcTHRYM7+UfJARdOFU9WUQO8OiIamgWPmiSFHYAA==",
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/nodemon": {
      "version": "2.0.21",
      "resolved": "https://registry.npmjs.org/nodemon/-/nodemon-2.0.21.tgz",
      "integrity": "sha512-djN/n2549DUtY33S7o1djRCd7dEm0kBnj9c7S9XVXqRUbuggN1MZH/Nqa+5RFQr63Fbefq37nFXAE9VU86yL1A==",
      "dev": true,
      "dependencies": {
        "chokidar": "^3.5.2",
        "debug": "^3.2.7",
        "ignore-by-default": "^1.0.1",
        "minimatch": "^3.1.2",
        "pstree.remy": "^1.1.8",
        "semver": "^5.7.1",
        "simple-update-notifier": "^1.0.7",
        "supports-color": "^5.5.0",
        "touch": "^3.1.0",
        "undefsafe": "^2.0.5"
      },
      "bin": {
        "nodemon": "bin/nodemon.js"
      },
      "engines": {
        "node": ">=8.10.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/nodemon"
      }
    },
    "node_modules/nodemon/node_modules/debug": {
      "version": "3.2.7",
      "resolved": "https://registry.npmjs.org/debug/-/debug-3.2.7.tgz",
      "integrity": "sha512-CFjzYYAi4ThfiQvizrFQevTTXHtnCqWfe7x1AhgEscTz6ZbLbfoLRLPugTQyBth6f8ZERVUSyWHFD/7Wu4t1XQ==",
      "dev": true,
      "dependencies": {
        "ms": "^2.1.1"
      }
    },
    "node_modules/nodemon/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "dev": true
    },
    "node_modules/nodemon/node_modules/semver": {
      "version": "5.7.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-5.7.1.tgz",
      "integrity": "sha512-sauaDf/PZdVgrLTNYHRtpXa1iRiKcaebiKQ1BJdpQlWH2lCvexQdX55snPFyK7QzpudqbCI0qXFfOasHdyNDGQ==",
      "dev": true,
      "bin": {
        "semver": "bin/semver"
      }
    },
    "node_modules/nopt": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/nopt/-/nopt-5.0.0.tgz",
      "integrity": "sha512-Tbj67rffqceeLpcRXrT7vKAN8CwfPeIBgM7E6iBkmKLV7bEMwpGgYLGv0jACUsECaa/vuxP0IjEont6umdMgtQ==",
      "dependencies": {
        "abbrev": "1"
      },
      "bin": {
        "nopt": "bin/nopt.js"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/normalize-path": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/normalize-path/-/normalize-path-3.0.0.tgz",
      "integrity": "sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==",
      "dev": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/npmlog": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/npmlog/-/npmlog-5.0.1.tgz",
      "integrity": "sha512-AqZtDUWOMKs1G/8lwylVjrdYgqA4d9nu8hc+0gzRxlDb1I10+FHBGMXs6aiQHFdCUUlqH99MUMuLfzWDNDtfxw==",
      "dependencies": {
        "are-we-there-yet": "^2.0.0",
        "console-control-strings": "^1.1.0",
        "gauge": "^3.0.0",
        "set-blocking": "^2.0.0"
      }
    },
    "node_modules/o3": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/o3/-/o3-1.0.3.tgz",
      "integrity": "sha512-f+4n+vC6s4ysy7YO7O2gslWZBUu8Qj2i2OUJOvjRxQva7jVjYjB29jrr9NCjmxZQR0gzrOcv1RnqoYOeMs5VRQ==",
      "dependencies": {
        "capability": "^0.2.5"
      }
    },
    "node_modules/oauth-sign": {
      "version": "0.9.0",
      "resolved": "https://registry.npmjs.org/oauth-sign/-/oauth-sign-0.9.0.tgz",
      "integrity": "sha512-fexhUFFPTGV8ybAtSIGbV6gOkSv8UtRbDBnAyLQw4QPKkgNlsH2ByPGtMUqdWkos6YCRmAqViwgZrJc/mRDzZQ==",
      "engines": {
        "node": "*"
      }
    },
    "node_modules/object-assign": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
      "integrity": "sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/object-inspect": {
      "version": "1.12.3",
      "resolved": "https://registry.npmjs.org/object-inspect/-/object-inspect-1.12.3.tgz",
      "integrity": "sha512-geUvdk7c+eizMNUDkRpW1wJwgfOiOeHbxBR/hLXK1aT6zmVSO0jsQcs7fj6MGw89jC/cjGfLcNOrtMYtGqm81g==",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/on-finished": {
      "version": "2.4.1",
      "resolved": "https://registry.npmjs.org/on-finished/-/on-finished-2.4.1.tgz",
      "integrity": "sha512-oVlzkg3ENAhCk2zdv7IJwd/QUD4z2RxRwpkcGY8psCVcCYZNq4wYnVWALHM+brtuJjePWiYF/ClmuDr8Ch5+kg==",
      "dependencies": {
        "ee-first": "1.1.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/on-headers": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/on-headers/-/on-headers-1.0.2.tgz",
      "integrity": "sha512-pZAE+FJLoyITytdqK0U5s+FIpjN0JP3OzFi/u8Rx+EV5/W+JTWGXG8xFzevE7AjBfDqHv/8vL8qQsIhHnqRkrA==",
      "dev": true,
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/once": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
      "integrity": "sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==",
      "dependencies": {
        "wrappy": "1"
      }
    },
    "node_modules/otp-generator": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/otp-generator/-/otp-generator-4.0.1.tgz",
      "integrity": "sha512-2TJ52vUftA0+J3eque4wwVtpaL4/NdIXDL0gFWFJFVUAZwAN7+9tltMhL7GCNYaHJtuONoier8Hayyj4HLbSag==",
      "engines": {
        "node": ">=14.10.0"
      }
    },
    "node_modules/parseurl": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/parseurl/-/parseurl-1.3.3.tgz",
      "integrity": "sha512-CiyeOxFT/JZyN5m0z9PfXw4SCBJ6Sygz1Dpl0wqjlhDEGGBP1GnsUVEL0p63hoG1fcj3fHynXi9NYO4nWOL+qQ==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/path-is-absolute": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz",
      "integrity": "sha512-AVbw3UJ2e9bq64vSaS9Am0fje1Pa8pbGqTTsmXfaIiMpnr5DlDhfJOuLj9Sf95ZPVDAUerDfEk88MPmPe7UCQg==",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/path-to-regexp": {
      "version": "0.1.7",
      "resolved": "https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-0.1.7.tgz",
      "integrity": "sha512-5DFkuoqlv1uYQKxy8omFBeJPQcdoE07Kv2sferDCrAq1ohOU+MSDswDIbnx3YAM60qIOnYa53wBhXW0EbMonrQ=="
    },
    "node_modules/performance-now": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/performance-now/-/performance-now-2.1.0.tgz",
      "integrity": "sha512-7EAHlyLHI56VEIdK57uwHdHKIaAGbnXPiw0yWbarQZOKaKpvUIgW0jWRVLiatnM+XXlSwsanIBH/hzGMJulMow=="
    },
    "node_modules/picomatch": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
      "integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==",
      "dev": true,
      "engines": {
        "node": ">=8.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/jonschlinkert"
      }
    },
    "node_modules/pop-iterate": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/pop-iterate/-/pop-iterate-1.0.1.tgz",
      "integrity": "sha512-HRCx4+KJE30JhX84wBN4+vja9bNfysxg1y28l0DuJmkoaICiv2ZSilKddbS48pq50P8d2erAhqDLbp47yv3MbQ=="
    },
    "node_modules/proxy-addr": {
      "version": "2.0.7",
      "resolved": "https://registry.npmjs.org/proxy-addr/-/proxy-addr-2.0.7.tgz",
      "integrity": "sha512-llQsMLSUDUPT44jdrU/O37qlnifitDP+ZwrmmZcoSKyLKvtZxpyV0n2/bD/N4tBAAZ/gJEdZU7KMraoK1+XYAg==",
      "dependencies": {
        "forwarded": "0.2.0",
        "ipaddr.js": "1.9.1"
      },
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/psl": {
      "version": "1.9.0",
      "resolved": "https://registry.npmjs.org/psl/-/psl-1.9.0.tgz",
      "integrity": "sha512-E/ZsdU4HLs/68gYzgGTkMicWTLPdAftJLfJFlLUAAKZGkStNU72sZjT66SnMDVOfOWY/YAoiD7Jxa9iHvngcag=="
    },
    "node_modules/pstree.remy": {
      "version": "1.1.8",
      "resolved": "https://registry.npmjs.org/pstree.remy/-/pstree.remy-1.1.8.tgz",
      "integrity": "sha512-77DZwxQmxKnu3aR542U+X8FypNzbfJ+C5XQDk3uWjWxn6151aIMGthWYRXTqT1E5oJvg+ljaa2OJi+VfvCOQ8w==",
      "dev": true
    },
    "node_modules/punycode": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.3.0.tgz",
      "integrity": "sha512-rRV+zQD8tVFys26lAGR9WUuS4iUAngJScM+ZRSKtvl5tKeZ2t5bvdNFdNHBW9FWR4guGHlgmsZ1G7BSm2wTbuA==",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/push.js": {
      "version": "1.0.12",
      "resolved": "https://registry.npmjs.org/push.js/-/push.js-1.0.12.tgz",
      "integrity": "sha512-Mo/zkrPD58hcbMvC/9WveUPGz0PJ4T5UwQJP6DnMYbyxe7b1xM/9qqmJTMmDcprbZjCtLzf9wWtek7gA8O9QBw=="
    },
    "node_modules/q": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/q/-/q-2.0.3.tgz",
      "integrity": "sha512-gv6vLGcmAOg96/fgo3d9tvA4dJNZL3fMyBqVRrGxQ+Q/o4k9QzbJ3NQF9cOO/71wRodoXhaPgphvMFU68qVAJQ==",
      "dependencies": {
        "asap": "^2.0.0",
        "pop-iterate": "^1.0.1",
        "weak-map": "^1.0.5"
      }
    },
    "node_modules/qs": {
      "version": "6.11.0",
      "resolved": "https://registry.npmjs.org/qs/-/qs-6.11.0.tgz",
      "integrity": "sha512-MvjoMCJwEarSbUYk5O+nmoSzSutSsTwF85zcHPQ9OrlFoZOYIjaqBAJIqIXjptyD5vThxGq52Xu/MaJzRkIk4Q==",
      "dependencies": {
        "side-channel": "^1.0.4"
      },
      "engines": {
        "node": ">=0.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/querystringify": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/querystringify/-/querystringify-2.2.0.tgz",
      "integrity": "sha512-FIqgj2EUvTa7R50u0rGsyTftzjYmv/a3hO345bZNrqabNqjtgiDMgmo4mkUjd+nzU5oF3dClKqFIPUKybUyqoQ=="
    },
    "node_modules/range-parser": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/range-parser/-/range-parser-1.2.1.tgz",
      "integrity": "sha512-Hrgsx+orqoygnmhFbKaHE6c296J+HTAQXoxEF6gNupROmmGJRoyzfG3ccAveqCBrwr/2yxQ5BVd/GTl5agOwSg==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/raw-body": {
      "version": "2.5.1",
      "resolved": "https://registry.npmjs.org/raw-body/-/raw-body-2.5.1.tgz",
      "integrity": "sha512-qqJBtEyVgS0ZmPGdCFPWJ3FreoqvG4MVQln/kCgF7Olq95IbOp0/BWyMwbdtn4VTvkM8Y7khCQ2Xgk/tcrCXig==",
      "dependencies": {
        "bytes": "3.1.2",
        "http-errors": "2.0.0",
        "iconv-lite": "0.4.24",
        "unpipe": "1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/readable-stream": {
      "version": "3.6.1",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-3.6.1.tgz",
      "integrity": "sha512-+rQmrWMYGA90yenhTYsLWAsLsqVC8osOw6PKE1HDYiO0gdPeKe/xDHNzIAIn4C91YQ6oenEhfYqqc1883qHbjQ==",
      "dependencies": {
        "inherits": "^2.0.3",
        "string_decoder": "^1.1.1",
        "util-deprecate": "^1.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/readdirp": {
      "version": "3.6.0",
      "resolved": "https://registry.npmjs.org/readdirp/-/readdirp-3.6.0.tgz",
      "integrity": "sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==",
      "dev": true,
      "dependencies": {
        "picomatch": "^2.2.1"
      },
      "engines": {
        "node": ">=8.10.0"
      }
    },
    "node_modules/request": {
      "version": "2.88.2",
      "resolved": "https://registry.npmjs.org/request/-/request-2.88.2.tgz",
      "integrity": "sha512-MsvtOrfG9ZcrOwAW+Qi+F6HbD0CWXEh9ou77uOb7FM2WPhwT7smM833PzanhJLsgXjN89Ir6V2PczXNnMpwKhw==",
      "deprecated": "request has been deprecated, see https://github.com/request/request/issues/3142",
      "dependencies": {
        "aws-sign2": "~0.7.0",
        "aws4": "^1.8.0",
        "caseless": "~0.12.0",
        "combined-stream": "~1.0.6",
        "extend": "~3.0.2",
        "forever-agent": "~0.6.1",
        "form-data": "~2.3.2",
        "har-validator": "~5.1.3",
        "http-signature": "~1.2.0",
        "is-typedarray": "~1.0.0",
        "isstream": "~0.1.2",
        "json-stringify-safe": "~5.0.1",
        "mime-types": "~2.1.19",
        "oauth-sign": "~0.9.0",
        "performance-now": "^2.1.0",
        "qs": "~6.5.2",
        "safe-buffer": "^5.1.2",
        "tough-cookie": "~2.5.0",
        "tunnel-agent": "^0.6.0",
        "uuid": "^3.3.2"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/request/node_modules/qs": {
      "version": "6.5.3",
      "resolved": "https://registry.npmjs.org/qs/-/qs-6.5.3.tgz",
      "integrity": "sha512-qxXIEh4pCGfHICj1mAJQ2/2XVZkjCDTcEgfoSQxc/fYivUZxTkk7L3bDBJSoNrEzXI17oUO5Dp07ktqE5KzczA==",
      "engines": {
        "node": ">=0.6"
      }
    },
    "node_modules/request/node_modules/uuid": {
      "version": "3.4.0",
      "resolved": "https://registry.npmjs.org/uuid/-/uuid-3.4.0.tgz",
      "integrity": "sha512-HjSDRw6gZE5JMggctHBcjVak08+KEVhSIiDzFnT9S9aegmp85S/bReBVTb4QTFaRNptJ9kuYaNhnbNEOkbKb/A==",
      "deprecated": "Please upgrade  to version 7 or higher.  Older versions may use Math.random() in certain circumstances, which is known to be problematic.  See https://v8.dev/blog/math-random for details.",
      "bin": {
        "uuid": "bin/uuid"
      }
    },
    "node_modules/requires-port": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/requires-port/-/requires-port-1.0.0.tgz",
      "integrity": "sha512-KigOCHcocU3XODJxsu8i/j8T9tzT4adHiecwORRQ0ZZFcp7ahwXuRU1m+yuO90C5ZUyGeGfocHDI14M3L3yDAQ=="
    },
    "node_modules/rimraf": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/rimraf/-/rimraf-3.0.2.tgz",
      "integrity": "sha512-JZkJMZkAGFFPP2YqXZXPbMlMBgsxzE8ILs4lMIX/2o0L9UBw9O/Y3o6wFw/i9YLapcUJWwqbi3kdxIPdC62TIA==",
      "dependencies": {
        "glob": "^7.1.3"
      },
      "bin": {
        "rimraf": "bin.js"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/rootpath": {
      "version": "0.1.2",
      "resolved": "https://registry.npmjs.org/rootpath/-/rootpath-0.1.2.tgz",
      "integrity": "sha512-R3wLbuAYejpxQjL/SjXo1Cjv4wcJECnMRT/FlcCfTwCBhaji9rWaRCoVEQ1SPiTJ4kKK+yh+bZLAV7SCafoDDw=="
    },
    "node_modules/safe-buffer": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
      "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ]
    },
    "node_modules/safer-buffer": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz",
      "integrity": "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg=="
    },
    "node_modules/saslprep": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/saslprep/-/saslprep-1.0.3.tgz",
      "integrity": "sha512-/MY/PEMbk2SuY5sScONwhUDsV2p77Znkb/q3nSVstq/yQzYJOH/Azh29p9oJLsl3LnQwSvZDKagDGBsBwSooag==",
      "optional": true,
      "dependencies": {
        "sparse-bitfield": "^3.0.3"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/scmp": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/scmp/-/scmp-2.1.0.tgz",
      "integrity": "sha512-o/mRQGk9Rcer/jEEw/yw4mwo3EU/NvYvp577/Btqrym9Qy5/MdWGBqipbALgd2lrdWTJ5/gqDusxfnQBxOxT2Q=="
    },
    "node_modules/semver": {
      "version": "7.3.8",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.3.8.tgz",
      "integrity": "sha512-NB1ctGL5rlHrPJtFDVIVzTyQylMLu9N9VICA6HSFJo8MCGVTMW6gfpicwKmmK/dAjTOrqu5l63JJOpDSrAis3A==",
      "dependencies": {
        "lru-cache": "^6.0.0"
      },
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/send": {
      "version": "0.18.0",
      "resolved": "https://registry.npmjs.org/send/-/send-0.18.0.tgz",
      "integrity": "sha512-qqWzuOjSFOuqPjFe4NOsMLafToQQwBSOEpS+FwEt3A2V3vKubTquT3vmLTQpFgMXp8AlFWFuP1qKaJZOtPpVXg==",
      "dependencies": {
        "debug": "2.6.9",
        "depd": "2.0.0",
        "destroy": "1.2.0",
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "etag": "~1.8.1",
        "fresh": "0.5.2",
        "http-errors": "2.0.0",
        "mime": "1.6.0",
        "ms": "2.1.3",
        "on-finished": "2.4.1",
        "range-parser": "~1.2.1",
        "statuses": "2.0.1"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/send/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA=="
    },
    "node_modules/serve-static": {
      "version": "1.15.0",
      "resolved": "https://registry.npmjs.org/serve-static/-/serve-static-1.15.0.tgz",
      "integrity": "sha512-XGuRDNjXUijsUL0vl6nSD7cwURuzEgglbOaFuZM9g3kwDXOWVTck0jLzjPzGD+TazWbboZYu52/9/XPdUgne9g==",
      "dependencies": {
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "parseurl": "~1.3.3",
        "send": "0.18.0"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/set-blocking": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/set-blocking/-/set-blocking-2.0.0.tgz",
      "integrity": "sha512-KiKBS8AnWGEyLzofFfmvKwpdPzqiy16LvQfK3yv/fVH7Bj13/wl3JSR1J+rfgRE9q7xUJK4qvgS8raSOeLUehw=="
    },
    "node_modules/setprototypeof": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz",
      "integrity": "sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw=="
    },
    "node_modules/side-channel": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/side-channel/-/side-channel-1.0.4.tgz",
      "integrity": "sha512-q5XPytqFEIKHkGdiMIrY10mvLRvnQh42/+GoBlFW3b2LXLE2xxJpZFdm94we0BaoV3RwJyGqg5wS7epxTv0Zvw==",
      "dependencies": {
        "call-bind": "^1.0.0",
        "get-intrinsic": "^1.0.2",
        "object-inspect": "^1.9.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/sift": {
      "version": "16.0.1",
      "resolved": "https://registry.npmjs.org/sift/-/sift-16.0.1.tgz",
      "integrity": "sha512-Wv6BjQ5zbhW7VFefWusVP33T/EM0vYikCaQ2qR8yULbsilAT8/wQaXvuQ3ptGLpoKx+lihJE3y2UTgKDyyNHZQ=="
    },
    "node_modules/signal-exit": {
      "version": "3.0.7",
      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-3.0.7.tgz",
      "integrity": "sha512-wnD2ZE+l+SPC/uoS0vXeE9L1+0wuaMqKlfz9AMUo38JsyLSBWSFcHR1Rri62LZc12vLr1gb3jl7iwQhgwpAbGQ=="
    },
    "node_modules/simple-update-notifier": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/simple-update-notifier/-/simple-update-notifier-1.1.0.tgz",
      "integrity": "sha512-VpsrsJSUcJEseSbMHkrsrAVSdvVS5I96Qo1QAQ4FxQ9wXFcB+pjj7FB7/us9+GcgfW4ziHtYMc1J0PLczb55mg==",
      "dev": true,
      "dependencies": {
        "semver": "~7.0.0"
      },
      "engines": {
        "node": ">=8.10.0"
      }
    },
    "node_modules/simple-update-notifier/node_modules/semver": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.0.0.tgz",
      "integrity": "sha512-+GB6zVA9LWh6zovYQLALHwv5rb2PHGlJi3lfiqIHxR0uuwCgefcOJc59v9fv1w8GbStwxuuqqAjI9NMAOOgq1A==",
      "dev": true,
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/smart-buffer": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/smart-buffer/-/smart-buffer-4.2.0.tgz",
      "integrity": "sha512-94hK0Hh8rPqQl2xXc3HsaBoOXKV20MToPkcXvwbISWLEs+64sBq5kFgn2kJDHb1Pry9yrP0dxrCI9RRci7RXKg==",
      "engines": {
        "node": ">= 6.0.0",
        "npm": ">= 3.0.0"
      }
    },
    "node_modules/socks": {
      "version": "2.7.1",
      "resolved": "https://registry.npmjs.org/socks/-/socks-2.7.1.tgz",
      "integrity": "sha512-7maUZy1N7uo6+WVEX6psASxtNlKaNVMlGQKkG/63nEDdLOWNbiUMoLK7X4uYoLhQstau72mLgfEWcXcwsaHbYQ==",
      "dependencies": {
        "ip": "^2.0.0",
        "smart-buffer": "^4.2.0"
      },
      "engines": {
        "node": ">= 10.13.0",
        "npm": ">= 3.0.0"
      }
    },
    "node_modules/sparse-bitfield": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/sparse-bitfield/-/sparse-bitfield-3.0.3.tgz",
      "integrity": "sha512-kvzhi7vqKTfkh0PZU+2D2PIllw2ymqJKujUcyPMd9Y75Nv4nPbGJZXNhxsgdQab2BmlDct1YnfQCguEvHr7VsQ==",
      "optional": true,
      "dependencies": {
        "memory-pager": "^1.0.2"
      }
    },
    "node_modules/sshpk": {
      "version": "1.17.0",
      "resolved": "https://registry.npmjs.org/sshpk/-/sshpk-1.17.0.tgz",
      "integrity": "sha512-/9HIEs1ZXGhSPE8X6Ccm7Nam1z8KcoCqPdI7ecm1N33EzAetWahvQWVqLZtaZQ+IDKX4IyA2o0gBzqIMkAagHQ==",
      "dependencies": {
        "asn1": "~0.2.3",
        "assert-plus": "^1.0.0",
        "bcrypt-pbkdf": "^1.0.0",
        "dashdash": "^1.12.0",
        "ecc-jsbn": "~0.1.1",
        "getpass": "^0.1.1",
        "jsbn": "~0.1.0",
        "safer-buffer": "^2.0.2",
        "tweetnacl": "~0.14.0"
      },
      "bin": {
        "sshpk-conv": "bin/sshpk-conv",
        "sshpk-sign": "bin/sshpk-sign",
        "sshpk-verify": "bin/sshpk-verify"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/sshpk/node_modules/tweetnacl": {
      "version": "0.14.5",
      "resolved": "https://registry.npmjs.org/tweetnacl/-/tweetnacl-0.14.5.tgz",
      "integrity": "sha512-KXXFFdAbFXY4geFIwoyNK+f5Z1b7swfXABfL7HXCmoIWMKU3dmS26672A4EeQtDzLKy7SXmfBu51JolvEKwtGA=="
    },
    "node_modules/statuses": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/statuses/-/statuses-2.0.1.tgz",
      "integrity": "sha512-RwNA9Z/7PrK06rYLIzFMlaF+l73iwpzsqRIFgbMLbTcLD6cOao82TaWefPXQvB2fOC4AjuYSEndS7N/mTCbkdQ==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/streamsearch": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/streamsearch/-/streamsearch-1.1.0.tgz",
      "integrity": "sha512-Mcc5wHehp9aXz1ax6bZUyY5afg9u2rv5cqQI3mRrYkGC8rW2hM02jWuwjtL++LS5qinSyhj2QfLyNsuc+VsExg==",
      "engines": {
        "node": ">=10.0.0"
      }
    },
    "node_modules/string_decoder": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.3.0.tgz",
      "integrity": "sha512-hkRX8U1WjJFd8LsDJ2yQ/wWWxaopEsABU1XfkM8A+j0+85JAGppt16cr1Whg6KIbb4okU6Mql6BOj+uup/wKeA==",
      "dependencies": {
        "safe-buffer": "~5.2.0"
      }
    },
    "node_modules/string-width": {
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
      "dependencies": {
        "emoji-regex": "^8.0.0",
        "is-fullwidth-code-point": "^3.0.0",
        "strip-ansi": "^6.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/strip-ansi": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
      "dependencies": {
        "ansi-regex": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/stripe": {
      "version": "11.13.0",
      "resolved": "https://registry.npmjs.org/stripe/-/stripe-11.13.0.tgz",
      "integrity": "sha512-Jx0nDbdvRsTtDSX5OFQ+4rLmYIftoiOE9HAXWIgyhAz1QjRFI3UIiJ/kCyhkdJBoHu019O5Ya6EmQ5Zf635XDw==",
      "dependencies": {
        "@types/node": ">=8.1.0",
        "qs": "^6.11.0"
      },
      "engines": {
        "node": ">=12.*"
      }
    },
    "node_modules/strnum": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/strnum/-/strnum-1.0.5.tgz",
      "integrity": "sha512-J8bbNyKKXl5qYcR36TIO8W3mVGVHrmmxsd5PAItGkmyzwJvybiw2IVq5nqd0i4LSNSkB/sx9VHllbfFdr9k1JA==",
      "optional": true
    },
    "node_modules/supports-color": {
      "version": "5.5.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-5.5.0.tgz",
      "integrity": "sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==",
      "dev": true,
      "dependencies": {
        "has-flag": "^3.0.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/swagger-ui-dist": {
      "version": "4.18.0",
      "resolved": "https://registry.npmjs.org/swagger-ui-dist/-/swagger-ui-dist-4.18.0.tgz",
      "integrity": "sha512-PZeF7r+JsAXC8tEGatOARSEeC0n3ChGqTDcbZUzrV+mGnlW2ZEystlpiEyMWfAY4FAT+uxibfMuRahEvnoG3CQ=="
    },
    "node_modules/swagger-ui-express": {
      "version": "4.6.2",
      "resolved": "https://registry.npmjs.org/swagger-ui-express/-/swagger-ui-express-4.6.2.tgz",
      "integrity": "sha512-MHIOaq9JrTTB3ygUJD+08PbjM5Tt/q7x80yz9VTFIatw8j5uIWKcr90S0h5NLMzFEDC6+eVprtoeA5MDZXCUKQ==",
      "dependencies": {
        "swagger-ui-dist": ">=4.11.0"
      },
      "engines": {
        "node": ">= v0.10.32"
      },
      "peerDependencies": {
        "express": ">=4.0.0"
      }
    },
    "node_modules/tar": {
      "version": "6.1.13",
      "resolved": "https://registry.npmjs.org/tar/-/tar-6.1.13.tgz",
      "integrity": "sha512-jdIBIN6LTIe2jqzay/2vtYLlBHa3JF42ot3h1dW8Q0PaAG4v8rm0cvpVePtau5C6OKXGGcgO9q2AMNSWxiLqKw==",
      "dependencies": {
        "chownr": "^2.0.0",
        "fs-minipass": "^2.0.0",
        "minipass": "^4.0.0",
        "minizlib": "^2.1.1",
        "mkdirp": "^1.0.3",
        "yallist": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/text-encoding-utf-8": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/text-encoding-utf-8/-/text-encoding-utf-8-1.0.2.tgz",
      "integrity": "sha512-8bw4MY9WjdsD2aMtO0OzOCY3pXGYNx2d2FfHRVUKkiCPDWjKuOlhLVASS+pD7VkLTVjW268LYJHwsnPFlBpbAg=="
    },
    "node_modules/to-regex-range": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz",
      "integrity": "sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==",
      "dev": true,
      "dependencies": {
        "is-number": "^7.0.0"
      },
      "engines": {
        "node": ">=8.0"
      }
    },
    "node_modules/toidentifier": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/toidentifier/-/toidentifier-1.0.1.tgz",
      "integrity": "sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA==",
      "engines": {
        "node": ">=0.6"
      }
    },
    "node_modules/touch": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/touch/-/touch-3.1.0.tgz",
      "integrity": "sha512-WBx8Uy5TLtOSRtIq+M03/sKDrXCLHxwDcquSP2c43Le03/9serjQBIztjRz6FkJez9D/hleyAXTBGLwwZUw9lA==",
      "dev": true,
      "dependencies": {
        "nopt": "~1.0.10"
      },
      "bin": {
        "nodetouch": "bin/nodetouch.js"
      }
    },
    "node_modules/touch/node_modules/nopt": {
      "version": "1.0.10",
      "resolved": "https://registry.npmjs.org/nopt/-/nopt-1.0.10.tgz",
      "integrity": "sha512-NWmpvLSqUrgrAC9HCuxEvb+PSloHpqVu+FqcO4eeF2h5qYRhA7ev6KvelyQAKtegUbC6RypJnlEOhd8vloNKYg==",
      "dev": true,
      "dependencies": {
        "abbrev": "1"
      },
      "bin": {
        "nopt": "bin/nopt.js"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/tough-cookie": {
      "version": "2.5.0",
      "resolved": "https://registry.npmjs.org/tough-cookie/-/tough-cookie-2.5.0.tgz",
      "integrity": "sha512-nlLsUzgm1kfLXSXfRZMc1KLAugd4hqJHDTvc2hDIwS3mZAfMEuMbc03SujMF+GEcpaX/qboeycw6iO8JwVv2+g==",
      "dependencies": {
        "psl": "^1.1.28",
        "punycode": "^2.1.1"
      },
      "engines": {
        "node": ">=0.8"
      }
    },
    "node_modules/tr46": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/tr46/-/tr46-3.0.0.tgz",
      "integrity": "sha512-l7FvfAHlcmulp8kr+flpQZmVwtu7nfRV7NZujtN0OqES8EL4O4e0qqzL0DC5gAvx/ZC/9lk6rhcUwYvkBnBnYA==",
      "dependencies": {
        "punycode": "^2.1.1"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/tslib": {
      "version": "2.5.0",
      "resolved": "https://registry.npmjs.org/tslib/-/tslib-2.5.0.tgz",
      "integrity": "sha512-336iVw3rtn2BUK7ORdIAHTyxHGRIHVReokCR3XjbckJMK7ms8FysBfhLR8IXnAgy7T0PTPNBWKiH514FOW/WSg==",
      "optional": true
    },
    "node_modules/tunnel-agent": {
      "version": "0.6.0",
      "resolved": "https://registry.npmjs.org/tunnel-agent/-/tunnel-agent-0.6.0.tgz",
      "integrity": "sha512-McnNiV1l8RYeY8tBgEpuodCC1mLUdbSN+CYBL7kJsJNInOP8UjDDEwdk6Mw60vdLLrr5NHKZhMAOSrR2NZuQ+w==",
      "dependencies": {
        "safe-buffer": "^5.0.1"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/tweetnacl": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/tweetnacl/-/tweetnacl-1.0.3.tgz",
      "integrity": "sha512-6rt+RN7aOi1nGMyC4Xa5DdYiukl2UWCbcJft7YhxReBGQD7OAM8Pbxw6YMo4r2diNEA8FEmu32YOn9rhaiE5yw=="
    },
    "node_modules/twilio": {
      "version": "3.84.1",
      "resolved": "https://registry.npmjs.org/twilio/-/twilio-3.84.1.tgz",
      "integrity": "sha512-Q/xaPoayTj+bgJdnUgpE+EiB/VoNOG+byDFdlDej0FgxiHLgXKliZfVv6boqHPWvC1k7Dt0AK96OBFZ0P55QQg==",
      "dependencies": {
        "axios": "^0.26.1",
        "dayjs": "^1.8.29",
        "https-proxy-agent": "^5.0.0",
        "jsonwebtoken": "^8.5.1",
        "lodash": "^4.17.21",
        "q": "2.0.x",
        "qs": "^6.9.4",
        "rootpath": "^0.1.2",
        "scmp": "^2.1.0",
        "url-parse": "^1.5.9",
        "xmlbuilder": "^13.0.2"
      },
      "engines": {
        "node": ">=6.0"
      }
    },
    "node_modules/twilio/node_modules/jsonwebtoken": {
      "version": "8.5.1",
      "resolved": "https://registry.npmjs.org/jsonwebtoken/-/jsonwebtoken-8.5.1.tgz",
      "integrity": "sha512-XjwVfRS6jTMsqYs0EsuJ4LGxXV14zQybNd4L2r0UvbVnSF9Af8x7p5MzbJ90Ioz/9TI41/hTCvznF/loiSzn8w==",
      "dependencies": {
        "jws": "^3.2.2",
        "lodash.includes": "^4.3.0",
        "lodash.isboolean": "^3.0.3",
        "lodash.isinteger": "^4.0.4",
        "lodash.isnumber": "^3.0.3",
        "lodash.isplainobject": "^4.0.6",
        "lodash.isstring": "^4.0.1",
        "lodash.once": "^4.0.0",
        "ms": "^2.1.1",
        "semver": "^5.6.0"
      },
      "engines": {
        "node": ">=4",
        "npm": ">=1.4.28"
      }
    },
    "node_modules/twilio/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA=="
    },
    "node_modules/twilio/node_modules/semver": {
      "version": "5.7.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-5.7.1.tgz",
      "integrity": "sha512-sauaDf/PZdVgrLTNYHRtpXa1iRiKcaebiKQ1BJdpQlWH2lCvexQdX55snPFyK7QzpudqbCI0qXFfOasHdyNDGQ==",
      "bin": {
        "semver": "bin/semver"
      }
    },
    "node_modules/type-is": {
      "version": "1.6.18",
      "resolved": "https://registry.npmjs.org/type-is/-/type-is-1.6.18.tgz",
      "integrity": "sha512-TkRKr9sUTxEH8MdfuCSP7VizJyzRNMjj2J2do2Jr3Kym598JVdEksuzPQCnlFPW4ky9Q+iA+ma9BGm06XQBy8g==",
      "dependencies": {
        "media-typer": "0.3.0",
        "mime-types": "~2.1.24"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/u3": {
      "version": "0.1.1",
      "resolved": "https://registry.npmjs.org/u3/-/u3-0.1.1.tgz",
      "integrity": "sha512-+J5D5ir763y+Am/QY6hXNRlwljIeRMZMGs0cT6qqZVVzzT3X3nFPXVyPOFRMOR4kupB0T8JnCdpWdp6Q/iXn3w=="
    },
    "node_modules/undefsafe": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/undefsafe/-/undefsafe-2.0.5.tgz",
      "integrity": "sha512-WxONCrssBM8TSPRqN5EmsjVrsv4A8X12J4ArBiiayv3DyyG3ZlIg6yysuuSYdZsVz3TKcTg2fd//Ujd4CHV1iA==",
      "dev": true
    },
    "node_modules/unpipe": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/unpipe/-/unpipe-1.0.0.tgz",
      "integrity": "sha512-pjy2bYhSsufwWlKwPc+l3cN7+wuJlK6uz0YdJEOlQDbl6jo/YlPi4mb8agUkVC8BF7V8NuzeyPNqRksA3hztKQ==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/uri-js": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/uri-js/-/uri-js-4.4.1.tgz",
      "integrity": "sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==",
      "dependencies": {
        "punycode": "^2.1.0"
      }
    },
    "node_modules/url-parse": {
      "version": "1.5.10",
      "resolved": "https://registry.npmjs.org/url-parse/-/url-parse-1.5.10.tgz",
      "integrity": "sha512-WypcfiRhfeUP9vvF0j6rw0J3hrWrw6iZv3+22h6iRMJ/8z1Tj6XfLP4DsUix5MhMPnXpiHDoKyoZ/bdCkwBCiQ==",
      "dependencies": {
        "querystringify": "^2.1.1",
        "requires-port": "^1.0.0"
      }
    },
    "node_modules/util-deprecate": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz",
      "integrity": "sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw=="
    },
    "node_modules/utils-merge": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/utils-merge/-/utils-merge-1.0.1.tgz",
      "integrity": "sha512-pMZTvIkT1d+TFGvDOqodOclx0QWkkgi6Tdoa8gC8ffGAAqz9pzPTZWAybbsHHoED/ztMtkv/VoYTYyShUn81hA==",
      "engines": {
        "node": ">= 0.4.0"
      }
    },
    "node_modules/uuid": {
      "version": "8.3.2",
      "resolved": "https://registry.npmjs.org/uuid/-/uuid-8.3.2.tgz",
      "integrity": "sha512-+NYs2QeMWy+GWFOEm9xnn6HCDp0l7QBD7ml8zLUmJ+93Q5NF0NocErnwkTkXVFNiX3/fpC6afS8Dhb/gz7R7eg==",
      "optional": true,
      "bin": {
        "uuid": "dist/bin/uuid"
      }
    },
    "node_modules/validator": {
      "version": "13.9.0",
      "resolved": "https://registry.npmjs.org/validator/-/validator-13.9.0.tgz",
      "integrity": "sha512-B+dGG8U3fdtM0/aNK4/X8CXq/EcxU2WPrPEkJGslb47qyHsxmbggTWK0yEA4qnYVNF+nxNlN88o14hIcPmSIEA==",
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/vary": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/vary/-/vary-1.1.2.tgz",
      "integrity": "sha512-BNGbWLfd0eUPabhkXUVm0j8uuvREyTh5ovRa/dyow/BqAbZJyC+5fU+IzQOzmAKzYqYRAISoRhdQr3eIZ/PXqg==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/verror": {
      "version": "1.10.0",
      "resolved": "https://registry.npmjs.org/verror/-/verror-1.10.0.tgz",
      "integrity": "sha512-ZZKSmDAEFOijERBLkmYfJ+vmk3w+7hOLYDNkRCuRuMJGEmqYNCNLyBBFwWKVMhfwaEF3WOd0Zlw86U/WC/+nYw==",
      "engines": [
        "node >=0.6.0"
      ],
      "dependencies": {
        "assert-plus": "^1.0.0",
        "core-util-is": "1.0.2",
        "extsprintf": "^1.2.0"
      }
    },
    "node_modules/weak-map": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/weak-map/-/weak-map-1.0.8.tgz",
      "integrity": "sha512-lNR9aAefbGPpHO7AEnY0hCFjz1eTkWCXYvkTRrTHs9qv8zJp+SkVYpzfLIFXQQiG3tVvbNFQgVg2bQS8YGgxyw=="
    },
    "node_modules/web-streams-polyfill": {
      "version": "3.2.1",
      "resolved": "https://registry.npmjs.org/web-streams-polyfill/-/web-streams-polyfill-3.2.1.tgz",
      "integrity": "sha512-e0MO3wdXWKrLbL0DgGnUV7WHVuw9OUvL4hjgnPkIeEvESk74gAITi5G606JtZPp39cd8HA9VQzCIvA49LpPN5Q==",
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/webidl-conversions": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-7.0.0.tgz",
      "integrity": "sha512-VwddBukDzu71offAQR975unBIGqfKZpM+8ZX6ySk8nYhVoo5CYaZyzt3YBvYtRtO+aoGlqxPg/B87NGVZ/fu6g==",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/whatwg-url": {
      "version": "11.0.0",
      "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-11.0.0.tgz",
      "integrity": "sha512-RKT8HExMpoYx4igMiVMY83lN6UeITKJlBQ+vR/8ZJ8OCdSiN3RwCq+9gH0+Xzj0+5IrM6i4j/6LuvzbZIQgEcQ==",
      "dependencies": {
        "tr46": "^3.0.0",
        "webidl-conversions": "^7.0.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/wide-align": {
      "version": "1.1.5",
      "resolved": "https://registry.npmjs.org/wide-align/-/wide-align-1.1.5.tgz",
      "integrity": "sha512-eDMORYaPNZ4sQIuuYPDHdQvf4gyCF9rEEV/yPxGfwPkRodwEgiMUUXTx/dex+Me0wxx53S+NgUHaP7y3MGlDmg==",
      "dependencies": {
        "string-width": "^1.0.2 || 2 || 3 || 4"
      }
    },
    "node_modules/wrappy": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
      "integrity": "sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ=="
    },
    "node_modules/xmlbuilder": {
      "version": "13.0.2",
      "resolved": "https://registry.npmjs.org/xmlbuilder/-/xmlbuilder-13.0.2.tgz",
      "integrity": "sha512-Eux0i2QdDYKbdbA6AM6xE4m6ZTZr4G4xF9kahI2ukSEMCzwce2eX9WlTI5J3s+NU7hpasFsr8hWIONae7LluAQ==",
      "engines": {
        "node": ">=6.0"
      }
    },
    "node_modules/yallist": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-4.0.0.tgz",
      "integrity": "sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A=="
    }
  }
}

'''
'''--- package.json ---
{
  "name": "offpro-backend",
  "version": "1.0.0",
  "description": "",
  "main": "server.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "dependencies": {
    "bcrypt": "^5.1.0",
    "cors": "^2.8.5",
    "dotenv": "^16.0.3",
    "express": "^4.18.2",
    "express-fileupload": "^1.4.0",
    "helmet": "^6.0.1",
    "jsonwebtoken": "^9.0.0",
    "lodash": "^4.17.21",
    "moment": "^2.29.4",
    "mongoose": "^6.8.1",
    "near-api-js": "^1.1.0",
    "node-fetch": "^3.3.0",
    "nodemailer": "^6.8.0",
    "otp-generator": "^4.0.0",
    "push.js": "^1.0.12",
    "request": "^2.88.2",
    "stripe": "^11.5.0",
    "swagger-ui-express": "^4.6.0",
    "twilio": "^3.84.0",
    "validator": "^13.7.0"
  },
  "devDependencies": {
    "morgan": "^1.10.0",
    "nodemon": "^2.0.20"
  },
  "keywords": [],
  "author": "",
  "license": "ISC"
}

'''
'''--- src/app.js ---
require("dotenv").config();

const express = require("express");
const cors = require("cors");
const morgan = require("morgan");
const fileUpload = require("express-fileupload");
const helmet = require("helmet");
const swaggerUi = require("swagger-ui-express");

const swaggerDoc = require("./swagger.json");

const app = express();

global.__basedir = __dirname;

//origins to be allowed{cl}
const originsWhitelist = [
  "http://localhost:5000",
  "http://localhost:3000",
  "http://192.168.0.100",
  "http://192.168.0.101",
  "http://192.168.0.102",
  "*",
];

let corsOptions = {
  origin: function (origin, callback) {
    var isWhitelisted = originsWhitelist.indexOf(origin) !== -1;
    callback(null, isWhitelisted);
  },
  credentials: true,
};

// Middlewares
app.disable("x-powered-by");
app.use(fileUpload({ createParentPath: true }));
app.use(helmet());
app.use(cors(corsOptions));
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(morgan("dev"));

app.use(express.static("uploads"));

// swagger config
app.use("/docs", swaggerUi.serve, swaggerUi.setup(swaggerDoc, { customSiteTitle: "E-Fama API" }));

// redirect main route to docs
app.get("/", function rootHandler(req, res, next) {
  res.redirect("/docs");
});

// load all routes
const routes = require("./routes/index")(app);
app.use("/api/v1", routes);

module.exports = app;

'''
'''--- src/config/constants.js ---
const USER = process.env.DB_USER;
const PASS = process.env.DB_PASSWORD;
const CLUSTER = process.env.DB_CLUSTER;
const NAME = process.env.DB_NAME;

module.exports = {
  roles: {
    BUYER: "buyer",
    ADMIN: "admin",
    FARMER: "farmer",
    LOGISTICS: "logistics",
  },
  db: {
    URL: `mongodb+srv://${USER}:${PASS}@${CLUSTER}/${NAME}?retryWrites=true&authSource=admin&w=majority`,
  },
  stripe: {
    KEY: "",
  },
};

'''
'''--- src/config/contract.js ---
const nearAPI = require("near-api-js");

const connectionConfig = {
  networkId: "testnet",
  // keyStore: new keyStores.BrowserLocalStorageKeyStore(),
  nodeUrl: "https://rpc.testnet.near.org",
  walletUrl: "https://wallet.testnet.near.org",
  helperUrl: "https://helper.testnet.near.org",
  explorerUrl: "https://explorer.testnet.near.org",
};

// connect to NEAR
const nearConnection = async () =>
  await nearAPI.connect({
    networkId: "testnet",
    nodeUrl: "https://rpc.testnet.near.org",
    walletUrl: "https://wallet.testnet.near.org",
    helperUrl: "https://helper.testnet.near.org",
  });
// const nearConnection = async () => await connect(connectionConfig);

// create wallet connection
// ? this function requires three arguments including a public key and amount
const account = async () => await nearConnection("efarma_marketplace.testnet");
// console.log("🚀 ~ account", account);

// const walletConnection = () => new WalletConnection(nearConnection);

module.exports = {
  nearConnection,
  account,
};

'''
'''--- src/config/crypto-helper.js ---
const bcrypt = require("bcrypt");
const otpGenerator = require("otp-generator");

class CryptoHelper {
  static async encryptPassword(password, saltRounds = 10) {
    const hashedPassword = await bcrypt.hash(password, saltRounds);

    return hashedPassword ? hashedPassword : false;
  }

  static async comparePassword(input, passwordFromDatabase) {
    const validPassword = await bcrypt.compare(input, passwordFromDatabase);

    return validPassword ? true : false;
  }

  static async generateOtp(numberOfDigits = 4) {
    const code = otpGenerator.generate(numberOfDigits, {
      digits: true,
      alphabets: false,
      specialChars: false,
      upperCase: false,
      lowerCaseAlphabets: false,
      upperCaseAlphabets: false,
    });

    return code;
  }

  static async generatePassword(numberOfCharacters = 10) {
    const password = otpGenerator.generate(numberOfCharacters, {
      digits: false,
      alphabets: true,
      specialChars: true,
      upperCase: true,
      lowerCaseAlphabets: true,
      upperCaseAlphabets: true,
    });

    return password;
  }

  static async generatePromoCode(numberOfCharacters = 10) {
    const promoCode = otpGenerator.generate(numberOfCharacters, {
      digits: true,
      alphabets: true,
      specialChars: false,
      upperCase: true,
      lowerCaseAlphabets: false,
      upperCaseAlphabets: true,
    });

    return promoCode;
  }

  static async generateCouponCode(numberOfCharacters = 10) {
    const couponCode = otpGenerator.generate(numberOfCharacters, {
      digits: true,
      alphabets: true,
      specialChars: false,
      upperCase: true,
      lowerCaseAlphabets: true,
      upperCaseAlphabets: true,
    });

    return couponCode;
  }
}

module.exports = CryptoHelper;

'''
'''--- src/config/database.js ---
require("dotenv").config();
const mongoose = require("mongoose");
const { db } = require("./constants");

mongoose.Promise = Promise;

exports.connectDatabase = async () => {
  try {
    const dbUrl = process.env.NODE_ENV === "development" ? "mongodb://mongo:27017/offproDev" : db.URL;

    mongoose.set("strictQuery", false);

    if (process.env.NODE_ENV === "development") {
      mongoose.set("debug", true);
    }

    await mongoose.connect(dbUrl, { autoCreate: true });

    mongoose.connection.on("error", (error) => {
      console.log("MongoDB connection error:", error);
      process.exit(-1);
    });

    return mongoose.connection;
  } catch (error) {
    console.log("Error connecting to database:> ", error);
  }
};

'''
'''--- src/config/near.js ---
const { InMemorySigner } = require("near-api-js");
const nearAPI = require("near-api-js");

const { connect, keyStores, WalletConnection } = nearAPI;

let connectionConfig = {
  networkId: "testnet",
  // keyStore: new keyStores.BrowserLocalStorageKeyStore(),
  nodeUrl: "https://rpc.testnet.near.org",
  walletUrl: "https://wallet.testnet.near.org",
  helperUrl: "https://helper.testnet.near.org",
  explorerUrl: "https://explorer.testnet.near.org",
  contractName: "efarma_marketplace.testnet",
};

class NearApi {
  config;
  nearApi;
  isInitialized = false;
  keyStore;
  currentNetwork;
  inMemorySigner;
  walletConnection;

  constructor(nearNetwork) {
    this.keyStore = new keyStores.InMemoryKeyStore();
    this.inMemorySigner = new InMemorySigner(this.keyStore);
    this.currentNetwork = nearNetwork;
    this.config = {
      ...connectionConfig,
      // keyStore: this.keyStore,
    };
  }

  get keystore() {
    return this.keyStore;
  }

  async initialize() {
    this.nearApi = await connect(this.config, "my-app");
    this.walletConnection = new WalletConnection(this.nearApi);
    this.isInitialized = true;
    // console.log("🚀 ~ this.walletConnection", this.walletConnection);
  }

  get nativeApi() {
    if (this.nearApi == null) {
      throw new Error("Near API class needs to be initialized first.");
    }

    return this.nearApi;
  }

  printLogs(contractId, logs, prefix = "") {
    for (const log of logs) {
      console.log(`${prefix}BlockLog [${contractId}]: ${log}`);
    }
  }

  /**
   * Invoke a contract view function using the RPC API.
   * @see {@link https://docs.near.org/docs/develop/front-end/rpc#call-a-contract-function}
   *
   * @param contractId NEAR account where the contract is deployed
   * @param methodName The view-only method (no state mutations) name on the contract as it is written in the contract code
   * @param args Any arguments to the view contract method, wrapped in JSON
   * @param options.parse Parse the result of the call. Receives a Buffer (bytes array) and converts it to any object. By default result will be treated as json.
   * @param options.stringify Convert input arguments into a bytes array. By default the input is treated as a JSON.
   * @returns {Promise<any>}
   */
  async viewFunction(
    contractId,
    methodName,
    args = {},
    { parse = parseJsonFromRawResponse, stringify = bytesJsonStringify } = {},
  ) {
    const serializedArgs = stringify(args).toString("base64");

    const result = await this.nativeApi.connection.provider.query({
      request_type: "call_function",
      account_id: contractId,
      method_name: methodName,
      args_base64: serializedArgs,
      finality: "optimistic",
    });
    if (result.logs) {
      this.printLogs(contractId, result.logs);
    }

    return result.result && result.result.length > 0 && parse(Buffer.from(result.result));
  }
}

module.exports = { NearApi };

'''
'''--- src/config/notify.js ---
const nodemailer = require("nodemailer");
    // create reusable transporter object using the default SMTP transport
    let transporter = nodemailer.createTransport({
      service: 'gmail',
      auth: {
        type: 'OAuth2',
        user: process.env.MAIL_USERNAME,
        pass: process.env.MAIL_PASSWORD,
        clientId: process.env.OAUTH_CLIENTID,
        clientSecret: process.env.OAUTH_CLIENT_SECRET,
        refreshToken: process.env.OAUTH_REFRESH_TOKEN
      }
    });

  
async function sendMail(to,subject,text, ){
  let mailOptions = {
    from: "efama@coronet.com",
    to: `${to}`,
    subject: `${subject}`,
    text: `${text}`
  };
  let info =await transporter.sendMail(mailOptions,(err,data) => {
    if (err){
      console.log("Error " + err);
      return;
    }
    console.log("Email sent successfully");
  });
  console.log("Message sent: %s", info.messageId);
  console.log("Preview URL: %s", nodemailer.getTestMessageUrl(info));
}

module.exports={
  sendMail
}

'''
'''--- src/config/payment-helper.js ---
const crypto = require("crypto");

// Signature generation
const generateAPISignature = (data, passPhrase = null) => {
    // Arrange the array by key alphabetically for API calls
    let ordered_data = {};
    Object.keys(data).sort().forEach(key => {
        ordered_data[key] = data[key];
    });
    data = ordered_data;

    // Create the get string
    let getString = '';
    for (let key in data) {
        getString += key + '=' + encodeURIComponent(data[key]).replace(/%20/g,'+') + '&';
    }

    // Remove the last '&'
    getString = getString.substring(0, getString.length - 1);
    if (passPhrase !== null) {getString +=`&passphrase=${encodeURIComponent(passPhrase.trim()).replace(/%20/g, "+")}`;}

    // Hash the data and create the signature
    return crypto.createHash("md5").update(getString).digest("hex");
}

module.exports= generateAPISignature
'''
'''--- src/config/token-helper.js ---
const jwt = require("jsonwebtoken");

class TokenHelper {
  static async verifyToken(token) {
    try {
      if (!token) {
        throw new Error("No token provided");
      }

      const verifiedToken = await jwt.verify(token, process.env.JWT_SECRET, {
        maxAge: "12h", // or 3600 * 5 = 12 hours
      });

      return verifiedToken;
    } catch (error) {
      return false;
    }
  }

  static async createToken(payload) {
    try {
      if (!payload) {
        throw new Error("No payload provided");
      }

      const signedToken = await jwt.sign(payload, process.env.JWT_SECRET, {
        expiresIn: "12h", // or 3600 * 5 = 12 hours
      });

      return signedToken;
    } catch (error) {
      return false;
    }
  }
}

module.exports = TokenHelper;

'''
'''--- src/config/twilio-helper.js ---
require("dotenv").config();
const accountSid = process.env.TWILIO_ACCOUNT_SID;
const authToken = process.env.TWILIO_AUTH_TOKEN;
const serviceId = process.env.TWILIO_SERVICE_ID;

const client = require("twilio")(accountSid, authToken);

class TwilioHelper {
  static async sendVerificationSms(phoneNumber) {
    try {
      const response = await client.verify.v2
        .services(serviceId)
        .verifications.create({ to: phoneNumber, channel: "sms" });
      console.log("🚀 ~ response", response);

      return response;
    } catch (error) {
      console.log("🚀 ~ error", error);
    }
  }

  static async verifyCode(phoneNumber, code) {
    try {
      const response = await client.verify.v2.services(serviceId).verificationChecks.create({ to: phoneNumber, code });
      console.log("🚀 ~ response", response);

      return response;
    } catch (error) {
      console.log("🚀 ~ error", error);
    }
  }
}

module.exports = TwilioHelper;

'''
'''--- src/controllers/auth.controller.js ---
const CryptoHelper = require("../config/crypto-helper");
const User = require("../models/user.model");
const AuthRepo = require("../repositories/auth.repo");
const TwilioHelper = require("../config/twilio-helper")

class AuthController {
  /**
   * @param {import("express").Request} req
   * @param {import("express").Response} res
   *  */
  static async signup(req, res) {
    try {
      const { email,  password,  confirmPassword ,username} = req.body;

      if (!email ||!password) {
        return res.status(400).json({ msg: "Please provide all required fields", status: 400 });
      }

     
      if (password != confirmPassword) {
        return res.status(400).json({ msg: "Passwords do not match", status: 400 });
      }

      //   check if user exists
      const existingEmail = await User.findOne({ email });
      // const existingUsername = await User.findOne({ username });

      if (existingEmail) {
        return res.status(400).json({ msg: "Email already exists" });
      }
      // if (existingUsername) {
      //   return res.status(400).json({ msg: "Username already exists" });
      // }

      //   go ahead and create the user
      const response = await AuthRepo.signupUser({ email,  password, phone,username});

      if (response.status === 201) {
        // generate otp and send to user phone
        const otp = await CryptoHelper.generateOtp();
        TwilioHelper.sendVerificationSms(phone);
        await User.findOneAndUpdate({ email }, { otp });

        return res.status(201).json({ msg: "User created", status: 200 });
      }
      return res.status(400).json(response);
    } catch (error) {
      console.log("🚀 ~ error", error);
      return res.status(500).json({ msg: "Server error", error });
    }
  }

  /**
   *
   * @param {import("express").Request} req
   * @param {import("express").Response} res
   *  */
  static async adminLogin(req, res) {
    try {
      const { email, password } = req.body;

      if (!email || !password) {
        return res.status(400).json({ msg: "Please provide email and password" });
      }

      const response = await AuthRepo.adminLogin({ email, password });

      if (response.status === 404) {
        return res.status(404).json(response);
      }

      if (response.status === 200) {
        return res.status(200).json(response);
      }

      return res.status(400).json(response);
    } catch (error) {
      return res.status(500).json({ msg: "Server error", error });
    }
  }

  /**
   *
   * @param {import("express").Request} req
   * @param {import("express").Response} res
   *  */
  static async generalLogin(req, res) {
    try {
      const { email, password } = req.body;

      if (!email || !password) {
        return res.status(400).json({ msg: "Email and password are required" });
      }

      const checkLogin = await AuthRepo.login({ email, password });

      if (checkLogin.status === 200) {
        return res.status(200).json(checkLogin);
      }

      if (checkLogin.status === 404) {
        return res.status(404).json(checkLogin);
      }

      return res.status(400).json(checkLogin);
    } catch (error) {
      return res.status(500).json({ msg: "Server error", error });
    }
  }

  /**
   *
   * @param {import("express").Request} req
   * @param {import("express").Response} res
   *  */
  static async verifyOtp(req, res) {
    try {
      const { otp, email } = req.body;

      if (!otp || !email) {
        return res.status(400).json({ msg: "OTP and email are required" });
      }

      const response = await AuthRepo.verifyOtp({ otp, email });

      if (response.status === 200) {
        return res.status(200).json(response);
      }

      return res.status(400).json(response);
    } catch (error) {
      return res.status(500).json({ msg: "Server error", error });
    }
  }

  /**
   *
   * @param {import("express").Request} req
   * @param {import("express").Response} res
   *  */
  static async updatePassword(req, res) {
    try {
      const { id: user_id } = req.user;
      const { oldPassword, newPassword, confirmNewPassword } = req.body;

      const result = await AuthRepo.updatePassword({ user_id, oldPassword, newPassword, confirmNewPassword });

      if (result.status === 200) {
        return res.status(200).json(result);
      }
      return res.status(400).json(result);
    } catch (error) {
      return res.status(500).json({ msg: "Server error", error });
    }
  }

  /**
   *
   * @param {import("express").Request} req
   * @param {import("express").Response} res
   *  */
  static async logout(req, res) {
    try {
      const result = await AuthRepo.logout({ req });

      if (result.status === 200) {
        return res.status(200).json(result);
      }
      return res.status(400).json(result);
    } catch (error) {
      return res.status(500).json({ msg: "Server error", error });
    }
  }
}

module.exports = AuthController;

'''
'''--- src/controllers/category.controller.js ---
const CategoryRepo = require("../repositories/category.repo");

class CategoryController {
  /**
   * @param {import("express").Request} req
   * @param {import("express").Response} res
   *  */
  static async createCategory(req, res) {
    try {
      const { name } = req.body;
      const response = await CategoryRepo.createCategory({ name });

      if (response.status === 201) {
        return res.status(201).json(response);
      }

      return res.status(400).json(response);
    } catch (error) {
      return res.status(500).json({ msg: error.message });
    }
  }

  /**
   * @param {import("express").Request} req
   * @param {import("express").Response} res
   *  */
  static async getSingleCategory(req, res) {
    try {
      const { category_id } = req.params;

      if (!category_id) {
        return res.status(400).json({ msg: "Category ID is required" });
      }

      const response = await CategoryRepo.getSingleCategory({ category_id });

      if (response.status === 404) {
        return res.status(404).json(response);
      }

      if (response.status === 200) {
        return res.status(200).json(response);
      }

      return res.status(400).json(response);
    } catch (error) {
      return res.status(500).json({ msg: error.message });
    }
  }

  /**
   * @param {import("express").Request} req
   * @param {import("express").Response} res
   *  */
  static async getAllCategories(req, res) {
    try {
      const response = await CategoryRepo.listAllCategories();

      return res.status(200).json(response);
    } catch (error) {
      return res.status(500).json({ msg: error.message });
    }
  }

  /**
   * @param {import("express").Request} req
   * @param {import("express").Response} res
   *  */
  static async editCategory(req, res) {
    try {
      const { category_id } = req.params;
      const { name } = req.body;

      if (!category_id) {
        return res.status(400).json({ msg: "Category ID is required" });
      }

      const response = await CategoryRepo.editCategory({ category_id, name });

      if (response.status === 404) {
        return res.status(404).json(response);
      }

      if (response.status === 200) {
        return res.status(200).json(response);
      }

      return res.status(400).json(response);
    } catch (error) {
      return res.status(500).json({ msg: error.message });
    }
  }

  /**
   * @param {import("express").Request} req
   * @param {import("express").Response} res
   *  */
  static async removeCategory(req, res) {
    try {
      const { category_id } = req.params;

      if (!category_id) {
        return res.status(400).json({ msg: "Category ID is required" });
      }

      const response = await CategoryRepo.removeCategory({ category_id });

      if (response.status === 404) {
        return res.status(404).json(response);
      }

      if (response.status === 200) {
        return res.status(200).json(response);
      }

      return res.status(400).json(response);
    } catch (error) {
      return res.status(500).json({ msg: error.message });
    }
  }
}

module.exports = CategoryController;

'''
'''--- src/controllers/delivery.controller.js ---
const DeliveryRepo = require("./../repositories/delivery.repo");

class DeliveryController {
  /**
   * @param {import("express").Request} req
   * @param {import("express").Response} res
   *  */
  static async getAllDelivery(req, res) {
    try {
      const response = await DeliveryRepo.getAllDelivery();

      return res.status(200).json(response);
    } catch (error) {
      return res.status(500).json({ msg: error.message });
    }
  }
  /**
   * @param {import("express").Request} req
   * @param {import("express").Response} res
   *  */
  static async createDelivery(req, res) {
    try {
        const {destination,
            source,
            buyer_id,
            order_id,
            logistic,}= req.body
      const response = await DeliveryRepo.createDelivery({
        destination,
        source,
        buyer_id,
        order_id,
        logistic,
      });
      if (response.status === 201) {
        return res.status(201).json(response);
      }
      return res.status(200).json(response);
    } catch (error) {
      console.error("🚀 ~ error", error);
      return res
        .status(500)
        .json({ msg: "Server error", error: error.message });
    }
  }

  /**
   * @param {import("express").Request} req
   * @param {import("express").Response} res
   *  */
  static async deleteDelivery(req,res){
    try{
        let {id}= req.params;
        const response = await DeliveryRepo.deleteDelivery(
            id
          );
    
          if (response.status === 404) {
            return res.status(404).json(response);
          }
    
          if (response.status === 200) {
            return res.status(200).json(response);
          }
    
          return res.status(200).json(response);
        } catch (error) {
          console.log("🚀 ~ error", error);
          return res.status(500).json({ msg: "Server error", error });
        }
      }
  }

module.exports = DeliveryController;

'''
'''--- src/controllers/kyc.controller.js ---
const KycRepo = require("../repositories/kyc.repo");

class KycController {
  /**
   * @param {import("express").Request} req
   * @param {import("express").Response} res
   *  */
  static async getFarmerProfile(req, res) {
    try {
      const { id } = req.params;
      const response = KycRepo.getFarmerProfile(id);
      return res.status(200).json(response);
    } catch (error) {
      return res.status(500).json({ msg: error.message });
    }
  }

  /**
   * @param {import("express").Request} req
   * @param {import("express").Response} res
   *  */
  static async getLogisticsProfile(req, res) {
    try {
      const { id } = req.params;
      const response = KycRepo.getLogisticsProfile(id);
      return res.status(200).json(response);
    } catch (error) {
      return res.status(500).json({ msg: error.message });
    }
  }

  /**
   * @param {import("express").Request} req
   * @param {import("express").Response} res
   *  */
  static async getBuyerProfile(req, res) {
    try {
      const { id } = req.params;
      const response = await KycRepo.getBuyerProfile(id);
      return res.status(200).json(response);
    } catch (error) {
      return res.status(500).json({ msg: error.message });
    }
  }
  /**
   * @param {import("express").Request} req
   * @param {import("express").Response} res
   *  */
  static async updateFarmerProfile(req, res) {
    try {
      const { id } = req.params;
      const { query } = req.body;
      if (!id) {
        return res.status(400).json({ msg: "Farmer ID is required" });
      }
      const response = await KycRepo.updateFarmerProfile({ id, query });

      if (response.status === 404) {
        return res.status(404).json(response);
      }

      if (response.status === 200) {
        return res.status(200).json(response);
      }

      return res.status(400).json(response);
    } catch (error) {
      return res.status(500).json({ msg: error.message });
    }
  }

  /**
   * @param {import("express").Request} req
   * @param {import("express").Response} res
   *  */
  static async updateBuyerProfile(req, res) {
    try {
      const { id } = req.params;
      const { query } = req.body;
      if (!id) {
        return res.status(400).json({ msg: "Buyer ID is required" });
      }
      const response = await KycRepo.updateBuyerProfile({ id, query });

      if (response.status === 404) {
        return res.status(404).json(response);
      }

      if (response.status === 200) {
        return res.status(200).json(response);
      }
      return res.status(400).json(response);
    } catch (error) {
      return res.status(500).json({ msg: error.message });
    }
  }

  /**
   * @param {import("express").Request} req
   * @param {import("express").Response} res
   *  */
  static async updateLogisticsProfile(req, res) {
    try {
      const { id } = req.params;
      const { query } = req.body;
      if (!id) {
        return res.status(400).json({ msg: "Logistics ID is required" });
      }
      const response = await KycRepo.updateLogisticsProfile({ id, query });

      if (response.status === 404) {
        return res.status(404).json(response);
      }

      if (response.status === 200) {
        return res.status(200).json(response);
      }
      return res.status(400).json(response);
    } catch (error) {
      return res.status(500).json({ msg: error.message });
    }
  }
}

module.exports = KycController;

'''
'''--- src/controllers/orders.controller.js ---
const OrdersRepo = require("../repositories/order.repo");
const sendMail = require("../config/notify");

class OrdersController {
  /**
   * @param {import("express").Request} req
   * @param {import("express").Response} res
   *  */
  static async getAllOrders(req, res) {
    try {
      const response = await OrdersRepo.getAllOrders();

      return res.status(200).json(response);
    } catch (error) {
      return res.status(500).json({ msg: error.message });
    }
  }

  /**
   * @param {import("express").Request} req
   * @param {import("express").Response} res
   *  */
  static async editOrder(req, res) {
    try {
      const { order_id } = req.params;
      const { status } = req.query;

      if (!["pending", "paid", "cancelled"].includes(status)) {
        return res.status(400).json({ msg: "Status must be either 'pending', 'paid' or 'cancelled'" });
      }

      if (!order_id) {
        return res.status(400).json({ msg: "Order ID is required" });
      }

      const response = await OrdersRepo.editOrder({ order_id, status });

      if (response.status === 404) {
        return res.status(404).json(response);
      }

      if (response.status === 200) {
        return res.status(200).json(response);
      }

      return res.status(200).json(response);
    } catch (error) {
      return res.status(500).json({ msg: error.message });
    }
  }

  /**
   * @param {import("express").Request} req
   * @param {import("express").Response} res
   *  */
  static async deleteOrder(req, res) {
    try {
      const { order_id } = req.params;

      if (!order_id) {
        return res.status(400).json({ msg: "Order ID is required" });
      }

      const response = await OrdersRepo.deleteOrder({ order_id });

      if (response.status === 404) {
        return res.status(404).json(response);
      }

      if (response.status === 200) {
        return res.status(200).json(response);
      }

      return res.status(200).json(response);
    } catch (error) {
      return res.status(500).json({ msg: error.message });
    }
  }

  /**
   * @param {import("express").Request} req
   * @param {import("express").Response} res
   *  */
  static async getSingleBuyerOrder(req, res) {
    try {
      const { id } = req.user;
      const { order_id } = req.params;

      if (!order_id) {
        return res.status(400).json({ msg: "Order ID is required" });
      }

      const response = await OrdersRepo.getSingleBuyerOrder({ buyer_id: id, order_id });

      return res.status(200).json(response);
    } catch (error) {
      return res.status(500).json({ msg: error.message });
    }
  }

  /**
   * @param {import("express").Request} req
   * @param {import("express").Response} res
   *  */
  static async getSingleOrder(req, res) {
    try {
      const { order_id } = req.params;
      if (!order_id) {
        return res.status(400).json({ msg: "Order ID is required" });
      }
      const response = await OrdersRepo.getSingleOrder({ order_id });

      return res.status(200).json(response);
    } catch (error) {
      return res.status(500).json({ msg: error.message });
    }
  }

  /**
   * @param {import("express").Request} req
   * @param {import("express").Response} res
   *  */
  static async getBuyerOrders(req, res) {
    try {
      const { id } = req.user;

      const response = await OrdersRepo.listBuyerOrders({ buyer_id: id });

      return res.status(200).json(response);
    } catch (error) {
      return res.status(500).json({ msg: error.message });
    }
  }

  /**
   * @param {import("express").Request} req
   * @param {import("express").Response} res
   *  */
  static async placeBuyerOrder(req, res) {
    try {
      const { id: buyer_id, location: buyer_location } = req.user; // this will be the buyer_id and location
      const { farmer_id, products, amount } = req.body;

      if (!farmer_id) {
        return res.status(400).json({ msg: "Farmer ID is required" });
      }

      if (products.length === 0) {
        return res.status(400).json({ msg: "Products are required to place an order" });
      }

      const response = await OrdersRepo.placeBuyerOrder({
        farmer_id,
        products,
        amount,
        buyer_id,
        buyer_location,
      });

      if (response.status === 201) {
        let to = "blinkztyler@gmail.com";
        let subject = " an order has been made";
        let textBody = " an order has been made successfully";
        // when order is completed , farmer receives an email notification
        sendMail(to, subject, textBody);
        return res.status(201).json(response);
      }

      return res.status(400).json(response);
    } catch (error) {
      return res.status(500).json({ msg: error.message });
    }
  }
}

module.exports = OrdersController;

'''
'''--- src/controllers/payment.controller.js ---
const PaymentRepo = require("../repositories/payment.repo");
const generateAPISignature = require("./../config/payment-helper")
class PaymentController {
  /**
   * @param {import("express").Request} req
   * @param {import("express").Response} res
   *  */
  static async createProductPaymentLink(req, res) {
    try {
      let body = req.body;
      let url = "https://sandbox.payfast.co.za​/eng/process";
      const data = { merchant_id: "21837196",
                  merchant_key: "dty3fwajpbrsq",
                  amount: body.amount,
                  item_name: body.item_name,
                  email_address:body.email,
                  item_description:body.item_description,
                  email_confirmation:"1",
                  confirmation_address:"shadrack@coronet.africa",
                  payment_method:"cc"

    };
    data["signature"] = generateAPISignature(data);
      fetch(url, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(data),
      })
        .then((response) =>  res.status(200).json(response))
       

      return res.status(200).json(url);
    } catch (error) {
      return res.status(500).json({ msg: error.message });
    }
  }
  /**
   * @param {import("express").Request} req
   * @param {import("express").Response} res
   *  */
  static async deleteProductPriceLink(req, res) {
    try {
      const { id } = req.body;
      return PaymentRepo.deleteProduct(id);
    } catch (error) {
      return res.status(500).json({ msg: error.message });
    }
  }
}
module.exports = PaymentController;

'''
'''--- src/controllers/product.controller.js ---
const ProductRepo = require("../repositories/product.repo");

class ProductController {
  /**
   *
   * @param {import("express").Request} req
   * @param {import("express").Response} res
   *  */
  static async getAllProducts(req, res) {
    try {
      const response = await ProductRepo.getAllProducts();

      return res.status(200).json(response);
    } catch (error) {
      console.log("🚀 ~ error", error);
      return res.status(500).json({ msg: "Server error", error });
    }
  }

  /**
   *
   * @param {import("express").Request} req
   * @param {import("express").Response} res
   *  */
  static async getFarmerInventory(req, res) {
    try {
      const { id: user_id } = req.user;

      const response = await ProductRepo.getFarmerInventory({ user_id });

      return res.status(200).json(response);
    } catch (error) {
      return res.status(500).json({ msg: "Server error", error });
    }
  }

  /**
   *
   * @param {import("express").Request} req
   * @param {import("express").Response} res
   *  */
  static async editProduct(req, res) {
    try {
      const { product_id } = req.params;
      const { category, name, description, price, isApproved } = req.body;

      if (!product_id) {
        return res.status(400).json({ msg: "Product ID is required" });
      }

      const response = await ProductRepo.editProduct({ product_id, isApproved, category, name, price, description });

      if (response.status === 404) {
        return res.status(404).json(response);
      }

      if (response.status === 200) {
        return res.status(200).json(response);
      }

      return res.status(400).json(response);
    } catch (error) {
      return res.status(500).json({ msg: "Server error", error });
    }
  }

  /**
   *
   * @param {import("express").Request} req
   * @param {import("express").Response} res
   *  */
  static async editFarmerProduct(req, res) {
    try {
      const { id: user_id } = req.user;
      const { product_id } = req.params;
      const { category, name, description, price } = req.body;
      // TODO? handle upload of photos

      if (!product_id) {
        return res.status(400).json({ msg: "Product ID is required" });
      }

      const response = await ProductRepo.editFarmerProduct({ user_id, product_id, category, name, price, description });

      if (response.status === 404) {
        return res.status(404).json(response);
      }

      if (response.status === 200) {
        return res.status(200).json(response);
      }

      return res.status(400).json(response);
    } catch (error) {
      return res.status(500).json({ msg: "Server error", error });
    }
  }

  /**
   *
   * @param {import("express").Request} req
   * @param {import("express").Response} res
   *  */
  static async deleteProduct(req, res) {
    try {
      const { product_id } = req.params;
      const { user_id } = req.query; // this will be user id of the farmer

      if (!product_id) {
        return res.status(400).json({ msg: "Product ID is required" });
      }

      const response = await ProductRepo.deleteProduct({ user_id, product_id });

      if (response.status === 404) {
        return res.status(404).json(response);
      }

      if (response.status === 200) {
        return res.status(200).json(response);
      }

      return res.status(400).json(response);
    } catch (error) {
      return res.status(500).json({ msg: "Server error", error });
    }
  }

  /**
   *
   * @param {import("express").Request} req
   * @param {import("express").Response} res
   *  */
  static async deleteFarmerProduct(req, res) {
    try {
      const { id: user_id } = req.user;
      const { product_id } = req.params;

      if (!product_id) {
        return res.status(400).json({ msg: "Product ID is required" });
      }

      const response = await ProductRepo.deleteFarmerProduct({
        user_id,
        product_id,
      });

      if (response.status === 404) {
        return res.status(404).json(response);
      }

      if (response.status === 200) {
        return res.status(200).json(response);
      }

      return res.status(400).json(response);
    } catch (error) {
      return res.status(500).json({ msg: "Server error", error });
    }
  }

  /**
   *
   * @param {import("express").Request} req
   * @param {import("express").Response} res
   *  */
  static async createProductForFarmer(req, res) {
    try {
      const { name, category, description, price, owner } = req.body; // owner has to be the user id, not farmer id
      const photos = req.files.photos;

      if (!req.files) {
        return res.status(400).json({ msg: "Please upload photos of the product" });
      }

      if (!category || !name || !description || !price) {
        return res.status(400).json({ msg: "Please provide all required fields" });
      }

      const response = await ProductRepo.createProductForFarmer({ owner, category, photos, name, price, description });
      if (response.status === 201) {
        return res.status(201).json(response);
      }
      return res.status(400).json(response);
    } catch (error) {
      return res.status(500).json({ msg: "Server error", error: error.message });
    }
  }

  /**
   *
   * @param {import("express").Request} req
   * @param {import("express").Response} res
   *  */
  static async createFarmerProduct(req, res) {
    try {
      const { id: user_id } = req.user;
      const { category, name, description, price } = req.body;
      const photos = req.files.photos;

      if (!req.files) {
        return res.status(400).json({ msg: "Please upload photos of the product" });
      }

      if (!category || !name || !description || !price) {
        return res.status(400).json({ msg: "Please provide all required fields" });
      }

      const response = await ProductRepo.createFarmerProduct({ user_id, category, photos, name, price, description });
      if (response.status === 201) {
        return res.status(201).json(response);
      }
      return res.status(400).json(response);
    } catch (error) {
      return res.status(500).json({ msg: "Server error", error: error.message });
    }
  }

  /**
   *
   * @param {import("express").Request} req
   * @param {import("express").Response} res
   *  */
  static async getSingleProduct(req, res) {
    try {
      const { product_id } = req.params;

      if (!product_id) {
        return res.status(400).json({ msg: "Product ID is required" });
      }

      const response = await ProductRepo.getSingleProduct({ product_id });

      if (response.status === 404) {
        return res.status(404).json(response);
      }

      if (response.status === 200) {
        return res.status(200).json(response);
      }

      return res.status(400).json(response);
    } catch (error) {
      return res.status(500).json({ msg: "Server error", error });
    }
  }
}

module.exports = ProductController;

'''
'''--- src/controllers/promotion.controller.js ---
const PromotionsRepo = require("../repositories/promotion.repo");

class PromotionController {
  /**
   * @param {import("express").Request} req
   * @param {import("express").Response} res
   *  */
  static async createSpecialEvent(req, res) {
    try {
      const { name, product, farmer, coupon, quantity, promoCode, startDate, endDate } = req.body;

      if (!name || !farmer || !quantity || !startDate || !endDate) {
        return res.status(400).json({ msg: "All fields are required" });
      }

      const response = await PromotionsRepo.createSpecialEvent({
        product,
        name,
        startDate,
        endDate,
        farmer,
        quantity,
        coupon,
        promoCode,
      });

      if (response.status === 201) {
        return res.status(201).json(response);
      }

      return res.status(400).json(response);
    } catch (error) {
      console.log("🚀 ~ error", error);
      return res.status(500).json({ msg: error.message });
    }
  }

  /**
   * @param {import("express").Request} req
   * @param {import("express").Response} res
   *  */
  static async getSpecialEvents(req, res) {
    try {
      const response = await PromotionsRepo.getSpecialEvents();

      return res.status(200).json(response);
    } catch (error) {
      return res.status(500).json({ msg: error.message });
    }
  }

  /**
   * @param {import("express").Request} req
   * @param {import("express").Response} res
   *  */
  static async getSingleEvent(req, res) {
    try {
      const { event_id } = req.params;

      if (!event_id) {
        return res.status(400).json({ msg: "Event ID is required" });
      }

      const response = await PromotionsRepo.getSingleEvent({ event_id });

      if (response.status === 404) {
        return res.status(404).json(response);
      }

      if (response.status === 200) {
        return res.status(200).json(response);
      }

      return res.status(400).json(response);
    } catch (error) {
      return res.status(500).json({ msg: error.message });
    }
  }

  /**
   * @param {import("express").Request} req
   * @param {import("express").Response} res
   *  */
  static async updateSpecialEvent(req, res) {
    try {
      const { event_id } = req.params;
      const { product, farmer, quantity, name, startDate, endDate, coupon, promoCode } = req.body;

      if (!event_id) {
        return res.status(400).json({ msg: "Event ID is required" });
      }

      const response = await PromotionsRepo.updateSpecialEvent({
        event_id,
        product,
        farmer,
        quantity,
        name,
        startDate,
        endDate,
        coupon,
        promoCode,
      });

      if (response.status === 404) {
        return res.status(404).json(response);
      }

      if (response.status === 200) {
        return res.status(200).json(response);
      }

      return res.status(400).json(response);
    } catch (error) {
      return res.status(500).json({ msg: error.message });
    }
  }

  /**
   * @param {import("express").Request} req
   * @param {import("express").Response} res
   *  */
  static async deleteSpecialEvent(req, res) {
    try {
      const { event_id } = req.params;

      if (!event_id) {
        return res.status(400).json({ msg: "Event ID is required" });
      }

      const response = await PromotionsRepo.deleteSpecialEvent({ event_id });

      if (response.status === 404) {
        return res.status(404).json(response);
      }

      if (response.status === 200) {
        return res.status(200).json(response);
      }

      return res.status(400).json(response);
    } catch (error) {
      return res.status(500).json({ msg: error.message });
    }
  }

  /**
   * @param {import("express").Request} req
   * @param {import("express").Response} res
   *  */
  static async createCoupon(req, res) {
    try {
      const { product_id, numberOfCouponsAvailable, couponPrice, startDate, endDate } = req.body;

      if (!product_id || !numberOfCouponsAvailable || !couponPrice || !startDate || !endDate) {
        return res.status(400).json({ msg: "All fields are required" });
      }

      const response = await PromotionsRepo.createCoupon({
        product_id,
        numberOfCouponsAvailable,
        couponPrice,
        startDate,
        endDate,
      });

      if (response.status === 201) {
        return res.status(201).json(response);
      }

      return res.status(400).json(response);
    } catch (error) {
      return res.status(500).json({ msg: error.message });
    }
  }

  /**
   * @param {import("express").Request} req
   * @param {import("express").Response} res
   *  */
  static async getSingleCoupon(req, res) {
    try {
      const { coupon_id } = req.params;

      if (!coupon_id) {
        return res.status(400).json({ msg: "Coupon ID is required" });
      }

      const response = await PromotionsRepo.getSingleCoupon({ coupon_id });

      if (response.status === 404) {
        return res.status(404).json(response);
      }

      if (response.status === 200) {
        return res.status(200).json(response);
      }

      return res.status(400).json(response);
    } catch (error) {
      return res.status(500).json({ msg: error.message });
    }
  }

  /**
   * @param {import("express").Request} req
   * @param {import("express").Response} res
   *  */
  static async deleteCoupon(req, res) {
    try {
      const { coupon_id } = req.params;

      if (!coupon_id) {
        return res.status(400).json({ msg: "Coupon ID is required" });
      }

      const response = await PromotionsRepo.deleteCoupon({ coupon_id });

      if (response.status === 404) {
        return res.status(404).json(response);
      }

      if (response.status === 200) {
        return res.status(200).json(response);
      }

      return res.status(400).json(response);
    } catch (error) {
      return res.status(500).json({ msg: error.message });
    }
  }

  /**
   * @param {import("express").Request} req
   * @param {import("express").Response} res
   *  */
  static async editCoupon(req, res) {
    try {
      const { coupon_id } = req.params;
      const { couponPrice, numberOfCouponsAvailable, startDate, endDate } = req.body;

      if (!coupon_id) {
        return res.status(400).json({ msg: "Coupon ID is required" });
      }

      const response = await PromotionsRepo.editCoupon({
        coupon_id,
        couponPrice,
        numberOfCouponsAvailable,
        startDate,
        endDate,
      });

      if (response.status === 404) {
        return res.status(404).json(response);
      }

      if (response.status === 200) {
        return res.status(200).json(response);
      }

      return res.status(400).json(response);
    } catch (error) {
      return res.status(500).json({ msg: error.message });
    }
  }

  /**
   * @param {import("express").Request} req
   * @param {import("express").Response} res
   *  */
  static async getAllCoupons(req, res) {
    try {
      const response = await PromotionsRepo.getAllCoupons();

      return res.status(200).json(response);
    } catch (error) {
      return res.status(500).json({ msg: error.message });
    }
  }

  /**
   * @param {import("express").Request} req
   * @param {import("express").Response} res
   *  */
  static async getAllPromoCodes(req, res) {
    try {
      const response = await PromotionsRepo.getAllPromoCodes();

      return res.status(200).json(response);
    } catch (error) {
      return res.status(500).json({ msg: error.message });
    }
  }

  /**
   * @param {import("express").Request} req
   * @param {import("express").Response} res
   *  */
  static async getSinglePromoCode(req, res) {
    try {
      const { promo_id } = req.params;

      if (!promo_id) {
        return res.status(400).json({ msg: "Promo ID is required" });
      }

      const response = await PromotionsRepo.getSinglePromoCode({ promo_id });

      if (response.status === 404) {
        return res.status(404).json(response);
      }

      if (response.status === 200) {
        return res.status(200).json(response);
      }

      return res.status(400).json(response);
    } catch (error) {
      return res.status(500).json({ msg: error.message });
    }
  }

  /**
   * @param {import("express").Request} req
   * @param {import("express").Response} res
   *  */
  static async deletePromoCode(req, res) {
    try {
      const { promo_id } = req.params;

      if (!promo_id) {
        return res.status(400).json({ msg: "Promo ID is required" });
      }

      const response = await PromotionsRepo.deletePromoCode({ promo_id });

      if (response.status === 404) {
        return res.status(404).json(response);
      }

      if (response.status === 200) {
        return res.status(200).json(response);
      }

      return res.status(400).json(response);
    } catch (error) {
      return res.status(500).json({ msg: error.message });
    }
  }

  /**
   * @param {import("express").Request} req
   * @param {import("express").Response} res
   *  */
  static async editPromoCode(req, res) {
    try {
      const { promo_id } = req.params;
      const { discount, expiresAt, isValid } = req.body;

      if (!promo_id) {
        return res.status(400).json({ msg: "Promo ID is required" });
      }

      const response = await PromotionsRepo.editPromoCode({ promo_id, discount, expiresAt, isValid });

      if (response.status === 404) {
        return res.status(404).json(response);
      }

      if (response.status === 200) {
        return res.status(200).json(response);
      }

      return res.status(400).json(response);
    } catch (error) {
      return res.status(500).json({ msg: error.message });
    }
  }

  /**
   * @param {import("express").Request} req
   * @param {import("express").Response} res
   *  */
  static async createPromoCode(req, res) {
    try {
      const { discount, expiresAt } = req.body;

      if (!discount) {
        return res.status(400).json({ message: "Discount value is required" });
      }

      const response = await PromotionsRepo.createPromoCode({ discount, expiresAt });

      if (response.status === 201) {
        return res.status(201).json(response);
      }

      return res.status(400).json(response);
    } catch (error) {
      return res.status(500).json({ msg: error.message });
    }
  }
}

module.exports = PromotionController;

'''
'''--- src/controllers/rating.controller.js ---
const RatingRepo = require("../repositories/rating.repo");

class RatingController {
  /**
   * @param {import("express").Request} req
   * @param {import("express").Response} res
   *  */
  static async reviewOrder(req, res) {
    try {
      const { id } = req.user;
      const { farmer_id, order_id, rating, comment } = req.body;

      if (!farmer_id || !order_id || !rating) {
        return res.status(400).json({ msg: "Order ID, Farmer ID and rating are required" });
      }

      const response = await RatingRepo.rateOrder({ buyer_id: id, farmer_id, order_id, rating, comment });

      if (response.status === 404) {
        return res.status(404).json(response);
      }

      if (response.status === 201) {
        return res.status(201).json(response);
      }

      return res.status(400).json(response);
    } catch (error) {
      return res.status(500).json({ msg: error.message });
    }
  }

  /**
   * @param {import("express").Request} req
   * @param {import("express").Response} res
   *  */
  static async deleteReview(req, res) {
    try {
      const { id: user_id } = req.user;
      const { review_id } = req.params;

      if (!review_id) {
        return res.status(400).json({ msg: "Review ID is required" });
      }

      const response = await RatingRepo.deleteReview({ user_id, review_id });

      if (response.status === 404) {
        return res.status(404).json(response);
      }

      if (response.status === 200) {
        return res.status(200).json(response);
      }

      return res.status(400).json(response);
    } catch (error) {
      return res.status(500).json({ msg: error.message });
    }
  }

  /**
   * @param {import("express").Request} req
   * @param {import("express").Response} res
   *  */
  static async editReview(req, res) {
    try {
      const { id: user_id } = req.user;
      const { review_id } = req.params;
      const { rating, comment } = req.body;

      if (!review_id) {
        return res.status(400).json({ msg: "Review ID is required" });
      }

      const response = await RatingRepo.editReview({ user_id, review_id, rating, comment });

      if (response.status === 404) {
        return res.status(404).json(response);
      }

      if (response.status === 200) {
        return res.status(200).json(response);
      }

      return res.status(400).json(response);
    } catch (error) {
      return res.status(500).json({ msg: error.message });
    }
  }
}

module.exports = RatingController;

'''
'''--- src/controllers/users.controller.js ---
const UserRepo = require("../repositories/user.repo");

class UserController {
  /**
   * @param {import("express").Request} req
   * @param {import("express").Response} res
   *  */
  static async getUserProfile(req, res) {
    try {
      const { id: user_id, role } = req.user;

      const response = await UserRepo.getUserProfile({ user_id, role });

      if (response.status === 404) {
        return res.status(404).json(response);
      }

      if (response.status === 200) {
        return res.status(200).json(response);
      }

      return res.status(400).json(response);
    } catch (error) {
      return res.status(500).json({ msg: error.message });
    }
  }

  /**
   * @param {import("express").Request} req
   * @param {import("express").Response} res
   *  */
  static async getAllUsers(req, res) {
    try {
      const response = await UserRepo.getAllUsers();

      return res.status(200).json(response);
    } catch (error) {
      return res.status(500).json({ msg: error.message });
    }
  }

  /**
   * @param {import("express").Request} req
   * @param {import("express").Response} res
   *  */
  static async createUser(req, res) {
    try {
      const { firstname, lastname, username, email, role, phone, location, buyerType } = req.body;

      if (!firstname || !lastname || !username || !email || !role || !phone || !location) {
        return res.status(400).json({ msg: "All fields are required" });
      }

      if (!["commercial", "consumer"].includes(buyerType)) {
        return res.status(400).json({ msg: "Buyer type must be either 'commercial' or 'consumer'" });
      }

      const response = await UserRepo.createUser({
        firstname,
        lastname,
        location,
        username,
        email,
        role,
        phone,
        buyerType,
      });

      if (response.status === 201) {
        return res.status(201).json(response);
      }
      return res.status(400).json(response);
    } catch (error) {
      return res.status(500).json({ msg: error.message });
    }
  }

  /**
   * @param {import("express").Request} req
   * @param {import("express").Response} res
   *  */
  static async verifyUser(req, res) {
    try {
      const { user_id } = req.params;
      const { firstname, lastname, role, phone, location } = req.body;

      if (!user_id) {
        return res.status(400).json({ msg: "User ID is required" });
      }

      const response = await UserRepo.editUser({
        user_id,
        firstname,
        lastname,
        location,
        role,
        phone,
      });

      if (response.status === 404) {
        return res.status(404).json(response);
      }

      if (response.status === 200) {
        return res.status(200).json(response);
      }

      return res.status(400).json(response);
    } catch (error) {
      return res.status(500).json({ msg: error.message });
    }
  }

  /**
   * @param {import("express").Request} req
   * @param {import("express").Response} res
   *  */
  static async editUser(req, res) {
    try {
      const { user_id } = req.params;
      const { firstname, lastname, phone, isVerified } = req.body;

      if (!user_id) {
        return res.status(400).json({ msg: "User ID is required" });
      }

      const response = await UserRepo.editUser({
        user_id,
        firstname,
        lastname,
        phone,
        isVerified,
      });

      if (response.status === 404) {
        return res.status(404).json(response);
      }

      if (response.status === 200) {
        return res.status(200).json(response);
      }

      return res.status(400).json(response);
    } catch (error) {
      return res.status(500).json({ msg: error.message });
    }
  }

  /**
   * @param {import("express").Request} req
   * @param {import("express").Response} res
   *  */
  static async deleteUser(req, res) {
    try {
      const { user_id } = req.params;

      if (!user_id) {
        return res.status(400).json({ msg: "User ID is required" });
      }

      const response = await UserRepo.deleteUser({ user_id });

      if (response.status === 404) {
        return res.status(404).json(response);
      }

      if (response.status === 200) {
        return res.status(200).json(response);
      }
      return res.status(400).json(response);
    } catch (error) {
      return res.status(500).json({ msg: error.message });
    }
  }
}

module.exports = UserController;

'''
'''--- src/middlewares/allowRoles.js ---
const _ = require("lodash");

const allowRoles = (...roles) => {
  return (req, res, next) => {
    if (_.includes(...roles, req.user.role)) {
      return next();
    }

    return res.status(403).json({ msg: "Access Denied" });
  };
};

module.exports = allowRoles;

'''
'''--- src/middlewares/requireToken.js ---
const TokenHelper = require("../config/token-helper");

const requireToken = async (req, res, next) => {
  try {
    const authHeader = req.headers["authorization"];

    if (authHeader && authHeader.startsWith("Bearer")) {
      const token = authHeader.split(" ")[1];

      if (!token) {
        return res.status(403).json({ msg: "Token is required" });
      }

      const decoded = await TokenHelper.verifyToken(token);

      if (decoded && decoded?.exp) {
        req.user = decoded;
        return next();
      }

      return res.status(401).json({ msg: "Token expired" });
    }

    return res.status(401).json({ msg: "Unauthorized" });
  } catch (error) {
    return res.status(500).json(error);
  }
};

module.exports = requireToken;

'''
'''--- src/models/Inventory.model.js ---
const { Schema, model } = require("mongoose");

const inventoryModel = new Schema({
   products :[String],
    farmer_id:Number
});

const inventory = model("inventory",inventoryModel);
module.exports=inventory
'''
'''--- src/models/admin.model.js ---
const { Schema, model } = require("mongoose");

const adminModel = new Schema({
  user: {
    type: Schema.Types.ObjectId,
    ref: "User",
    required: true,
  },
});

const Admin = model("Admin", adminModel);
module.exports = Admin;

'''
'''--- src/models/buyer.model.js ---
const { Schema, model } = require("mongoose");

const buyerModel = new Schema({
  user: {
    type: Schema.Types.ObjectId,
    ref: "User",
    required: true,
  },
  type: {
    type: String,
    enum: ["commercial", "consumer"],
    default: "commercial",
  },
  businessName: {
    type: String,
    default: null,
  },
  businessType: {
    type: String,
    default: null,
  },
  companySize: {
    type: String,
    default: null,
  },
  revenueSize: {
    type: String,
    default: null,
  },
});

const Buyer = model("Buyer", buyerModel);
module.exports = Buyer;

'''
'''--- src/models/category.model.js ---
const { Schema, model } = require("mongoose");

const categoryModel = new Schema({
  name: {
    type: String,
    required: true,
  },
});

const Category = model("Category", categoryModel);

module.exports = Category;

'''
'''--- src/models/coupon.model.js ---
const { Schema, model } = require("mongoose");

const couponSchema = new Schema(
  {
    code: {
      type: String,
      maxlength: 10,
      unique: true,
      index: true,
      required: [true, "Coupon must have a code"],
    },
    product: {
      type: Schema.Types.ObjectId,
      ref: "Product",
      required: [true, "Coupon must belong to a product"],
    },
    numberOfCouponsAvailable: {
      type: Number,
      required: [true, "Specify the number of coupons available"],
    },
    couponPrice: {
      type: Number,
      required: [true, "Coupon must have a coupon price"],
    },
    startDate: {
      type: Date,
      required: true,
    },
    endDate: {
      type: Date,
      required: true,
      // default: moment().format("DD/MM/YYYY") + ";" + moment().format("hh:mm:ss"),
    },
  },
  { timestamps: true },
);

// Mongoose hooks here - if any

const Coupon = model("Coupon", couponSchema);

module.exports = Coupon;

'''
'''--- src/models/delivery.model.js ---

const { Schema, model } = require("mongoose");

const deliveryModel = new Schema({
  Destination: String,
  Source: String,
  buyer_id: Number,
  order_id: Number,
  logistics_id: Number,
});
const delivery = model("delivery",deliveryModel);
module.exports=delivery

'''
'''--- src/models/farmer.model.js ---
const { Schema, model } = require("mongoose");

const farmerSchema = new Schema({
  user: {
    type: Schema.Types.ObjectId,
    ref: "User",
    required: true,
  },
  land: {
    size: { type: String, default: null },
    isPloughed: { type: Boolean, default: false },
    ownership: { type: String, default: null },
  },
  funding: {
    source: { type: String, default: null },
    hasCropInsurance: { type: Boolean, default: false },
    bank: { type: String, default: null },
  },
  certifications: [
    {
      name: { type: String },
      description: { type: String },
    },
  ],
  businessName: {
    type: String,
    default: null,
  },
  registrationNumber: {
    type: String,
    default: null,
  },
  hasPackHouse: {
    type: Boolean,
    default: false,
  },
  isLookingForFunding: {
    type: Boolean,
    default: false,
  },
  businessType: {
    type: String,
    default: null,
  },
  companySize: {
    type: String,
    default: null,
  },
  revenueSize: {
    type: String,
    default: null,
  },
  farmType: {
    type: String,
    enum: ["fruits", "vegetables", "legumes"],
  },
  products: [
    {
      type: Schema.Types.ObjectId,
      ref: "Product",
    },
  ],
});

const Farmer = model("Farmer", farmerSchema);

module.exports = Farmer;

'''
'''--- src/models/logistic.model.js ---
const { Schema, model } = require("mongoose");

const logisticsModel = new Schema({
  user: {
    type: Schema.Types.ObjectId,
    ref: "User",
    required: true,
  },
  address: {
    line1: { type: String, default: null },
    city: { type: String, default: null },
    town: { type: String, default: null },
    country: { type: String, default: null },
  },
  position: {
    type: String,
    enum: ["driver", "owner"],
  },
  location: { type: String, default: null },
  accountType: { type: String, default: null },
  companySize: { type: String, default: null },
  revenueSize: { type: String, default: null },
  numberOfVehicles: { type: Number, default: null },
  vehicleType: {
    type: String,
    enum: ["motorcycle", "van", "truck", "heavy duty truck"],
  },
  licenseCode: {
    type: String,
    enum: [
      "Code A - motorcycle",
      "Code B [08] - Light motor vehicle",
      "Code C [10] - Heavy motor vehicle",
      "Code D [14] - Combination & Articulated vehicle",
    ],
  },
});

const Logistics = model("Logistics", logisticsModel);

module.exports = Logistics;

'''
'''--- src/models/order.model.js ---
const { Schema, model } = require("mongoose");

const orderModel = new Schema({
  buyer_id: {
    type: Schema.Types.ObjectId,
    ref: "Buyer",
    required: true,
  },
  farmer_id: {
    type: Schema.Types.ObjectId,
    ref: "Farmer",
    required: true,
  },
  amount: {
    type: Number,
    default: 0,
  },
  products: [
    {
      type: Schema.Types.ObjectId,
      ref: "Product",
      required: true,
    },
  ],
  status: {
    type: String,
    enum: ["pending", "paid", "cancelled"],
    default: "pending",
  },
  datePurchased: {
    type: Date,
    default: new Date(),
  },
  region: {
    type: String,
    required: true,
  },
});

const Order = model("Order", orderModel);
module.exports = Order;

'''
'''--- src/models/payment.model.js ---
const { Schema, model } = require("mongoose");

const paymentModel = new Schema({
  buyer: {
    type: Schema.Types.ObjectId,
    ref: "Buyer",
    required: [true, "Payment must belong to a buyer"],
  },
  order: {
    type: Schema.Types.ObjectId,
    ref: "Order",
    required: [true, "Payment must belong to an order"],
  },
  farmer: { type: Schema.Types.ObjectId, ref: "Farmer", required: [true, "Payment must belong to a farmer"] },
  transactionId: {
    type: String,
    default: null,
    // required?
  },
  amount: {
    type: Number,
    default: 0,
  },
});

const Payment = model("Payment", paymentModel);

module.exports = Payment;

'''
'''--- src/models/product.model.js ---
const { Schema, model } = require("mongoose");

const productModel = new Schema({
  owner: {
    type: Schema.Types.ObjectId,
    ref: "Farmer",
    required: [true, "Product must belong to a farmer"],
  },
  category: {
    type: Schema.Types.ObjectId,
    ref: "Category",
    required: [true, "Product must belong to a category"],
  },
  name: {
    type: String,
    required: [true, "Product name is required"],
  },
  description: {
    type: String,
    default: null,
  },
  isApproved: {
    type: Boolean,
    default: false,
  },
  price: {
    type: Number,
    required: true,
    min: [0, "Product price cannot be less than 0"],
  },
  photos: [
    {
      name: { type: String },
      size: { type: String },
      mimetype: { type: String },
    },
  ],
});

const Product = model("Product", productModel);

module.exports = Product;

'''
'''--- src/models/promo-code.model.js ---
const { Schema, model } = require("mongoose");

const promoCodeSchema = new Schema(
  {
    code: {
      type: String,
      maxlength: 10,
      unique: true,
      required: true,
    },
    discount: {
      type: Number,
      required: true,
    },
    isValid: {
      type: Boolean,
      default: false,
    },
    expiresAt: {
      type: Date,
      default: null,
    },
  },
  { timestamps: true },
);

// Mongoose hooks here - if any

const PromoCode = model("PromoCode", promoCodeSchema);

module.exports = PromoCode;

'''
'''--- src/models/review.model.js ---
const { Schema, model } = require("mongoose");

const reviewModel = new Schema({
  farmer: {
    type: Schema.Types.ObjectId,
    ref: "Farmer",
    required: [true, "A review must belong to a farmer"],
  },
  buyer: {
    type: Schema.Types.ObjectId,
    ref: "Buyer",
    required: [true, "A review must be made by a buyer"],
  },
  order: {
    type: Schema.Types.ObjectId,
    ref: "Order",
    required: [true, "A review must belong to an order"],
  },
  rating: {
    type: Number,
    min: 1,
    max: 5,
    required: [true, "A rating is required for every review"],
  },
  comment: {
    type: String,
  },
});

const Review = model("Review", reviewModel);
module.exports = Review;

'''
'''--- src/models/special-event.model.js ---
const { Schema, model } = require("mongoose");

const specialEventSchema = new Schema(
  {
    name: {
      type: String,
      required: [true, "Special event must have a name"],
    },
    farmer: {
      type: Schema.Types.ObjectId,
      ref: "Farmer",
      required: [true, "Special event must include a farmer"],
    },
    product: {
      type: Schema.Types.ObjectId,
      ref: "Product",
    },
    coupon: {
      type: Schema.Types.ObjectId,
      ref: "Coupon",
    },
    promoCode: {
      type: Schema.Types.ObjectId,
      ref: "PromoCode",
    },
    quantityAvailable: {
      type: Number,
      required: true,
    },
    startDate: {
      type: Date,
      default: null,
    },
    endDate: {
      type: Date,
      default: null,
    },
  },
  { timestamps: true },
);

// Mongoose hooks here - if any

const SpecialEvent = model("SpecialEvent", specialEventSchema);

module.exports = SpecialEvent;

'''
'''--- src/models/user.model.js ---
const { Schema, model } = require("mongoose");

const userSchema = new Schema(
  {
    firstname: {
      type: String,
      maxlength: 50,
    },
    lastname: {
      type: String,
      maxlength: 50,
    },
    username: {
      type: String,
      unique: true,
      trim: true,
      index: true,
      maxlength: 50,
      required:[true ,"Username is required"]
    },
    email: {
      type: String,
      required: [true, "Email is required"],
      unique: true,
      index: true,
      trim: true,
    },
    password: {
      type: String,
      required: [true, "Password is required"],
      min: [6, "Password must be at least 6 characters long"],
    },
   
    phone: {
      type: String
    },
    pin: {
      type: String,
      min: [4, "Pin must be at least 4 characters long"],
    },
    isVerified: {
      type: Boolean,
      default: false,
    },
    location: {
      type: String,
      default: "N/A",
    },
    bvn:{
      type: String,

    }
  },
  { timestamps: true },
);

// Mongoose hooks here - if any

const User = model("User", userSchema);

module.exports = User;

'''
'''--- src/repositories/auth.repo.js ---
const CryptoHelper = require("../config/crypto-helper");
const TokenHelper = require("../config/token-helper");
const TwilioHelper = require("../config/twilio-helper");
const User = require("../models/user.model");
const UserRepo = require("./user.repo");

class AuthRepo {
  static async signupUser({ email,  password, phone,username }) {
    try {
      let response = { msg: "", status: null, data: null };

      //   encrypt password
      const hashedPassword = await CryptoHelper.encryptPassword(password);

      const user = await User.create({ email, password: hashedPassword ,phone,username});

      if (user ) {
        return { ...response, msg: "User created successfully", status: 201, data: user };
      }

      return { ...response, msg: "Could not signup user", status: 400 };
    } catch (error) {
      console.log("🚀 ~ error", error);
    }
  }

  static async login({ email, password }) {
    try {
      let response = { msg: "", status: null, data: null };

      const userExists = await User.findOne({ email });

      if (!userExists) {
        return { ...response, msg: "User does not exist", status: 404 };
      }

      const validPassword = await CryptoHelper.comparePassword(password, userExists.password);
      if (!validPassword) {
        return { ...response, msg: "Invalid password", status: 400 };
      }
      return { ...response, msg: "user login successfully", status: 200 };
      // const otp = await CryptoHelper.generateOtp();
      // // get user info and send otp to user phone
      // if (otp) {
      //   await User.findOneAndUpdate({ email }, { otp });

      //   return { ...response, msg: "OTP generated", status: 200, data: otp };
      // }
      // return { ...response, msg: "Could not geneate OTP", status: 400 };

      // const verificationSent = await TwilioHelper.sendVerificationSms(userExists.phone);

      // if (verificationSent?.status === "pending" || verificationSent?.status === "approved") {
      //   return { ...response, msg: "OTP sent to your phone", status: 200 };
      // }

      // return { ...response, msg: "Could not send OTP", status: 400 };
    } catch (error) {
      console.log("🚀 ~ error", error);
    }
  }

  static async adminLogin({ email, password }) {
    try {
      let response = { msg: "", status: null, data: null };

      const existingAdmin = await User.findOne({ email });
      if (!existingAdmin) {
        return { ...response, msg: "Admin does not exist", status: 404 };
      }

      const validPassword = await CryptoHelper.comparePassword(password, existingAdmin.password);

      if (!validPassword) {
        return { ...response, msg: "Password incorrect", status: 400 };
      }

      // create token for admin
      const payload = {
        id: existingAdmin._id,
        firstname: existingAdmin.firstname,
        lastname: existingAdmin.lastname,
        email: existingAdmin.email,
        role: existingAdmin.role,
        phone: existingAdmin.phone,
        location: existingAdmin.location,
      };
      const token = await TokenHelper.createToken(payload);

      if (!token) {
        return { ...response, msg: "Could not create token", status: 400 };
      }

      return { ...response, msg: "Login successful", status: 200, data: token };
    } catch (error) {
      console.log("🚀 ~ error", error);
    }
  }

  static async verifyOtp({ email, otp }) {
    try {
      let response = { msg: "", status: null, data: null };

      const userWithOtp = await User.findOne({ otp, email }).select("-password");

      if (!userWithOtp) {
        return { ...response, msg: "Otp incorrect", status: 400 };
      }

      // sign the token and set req.user to decoded token
      const payload = {
        id: userWithOtp._id,
        firstname: userWithOtp.firstname,
        lastname: userWithOtp.lastname,
        email: userWithOtp.email,
        role: userWithOtp.role,
        phone: userWithOtp.phone,
        location: userWithOtp.location,
      };
      const token = await TokenHelper.createToken(payload);

      if (!token) {
        return { ...response, msg: "Could not create token", status: 400 };
      }

      return { ...response, msg: "Log in successful", status: 200, data: token };

      // const user = await User.findOne({ email }).select("-password");

      // if (!user) {
      //   return { ...response, msg: "User does not exist", status: 404 };
      // }

      // const verifiedCode = await TwilioHelper.verifyCode(user.phone, otp);

      // if (verifiedCode.status === "approved") {
      //   // sign the token and set req.user to decoded token
      //   const payload = {
      //     id: user._id,
      //     firstname: user.firstname,
      //     lastname: user.lastname,
      //     email: user.email,
      //     role: user.role,
      //     phone: user.phone,
      //     location: user.location,
      //   };
      //   const token = await TokenHelper.createToken(payload);

      //   if (!token) {
      //     return { ...response, msg: "Could not create token", status: 400 };
      //   }

      //   return { ...response, msg: "Log in successful", status: 200, data: token };
      // }

      // return { ...response, msg: "Could not log in user", status: 400 };
    } catch (error) {
      console.log("🚀 ~ error", error);
    }
  }

  static async updatePassword({ user_id, oldPassword, newPassword, confirmNewPassword }) {
    try {
      let response = { msg: "", status: null, data: null };

      if (newPassword !== confirmNewPassword) {
        return { ...response, msg: "New passwords do not match", status: 400 };
      }

      const existingUser = await User.findById(user_id);
      const validPassword = await CryptoHelper.comparePassword(oldPassword, existingUser.password);

      if (!validPassword) {
        return { ...response, msg: "Password is incorrect", status: 400 };
      }

      // go ahead and update the password, but hash it first
      const newHashedPassword = await CryptoHelper.encryptPassword(newPassword);
      const updatedUserWithPassword = await User.findOne(
        { _id: user_id },
        { password: newHashedPassword },
        { new: true },
      );

      if (updatedUserWithPassword) {
        return { ...response, msg: "Password updated successfully", status: 200 };
      }

      return { ...response, msg: "Could not update password", status: 400 };
    } catch (error) {
      console.log("🚀 ~ error", error);
    }
  }

  static async logout({ req }) {
    try {
      let response = { msg: "", status: null, data: null };

      const decoded = req.user ? req.user : null;
      const authHeader = req.headers.authorization ? req.headers.authorization : null;

      if (authHeader && decoded) {
        delete req.user;
        delete req.headers.authorization;

        return { ...response, msg: "Logout success", status: 200 };
      }
      return { ...response, msg: "You are not logged in", status: 400 };
    } catch (error) {
      console.log("🚀 ~ error", error);
    }
  }
}

module.exports = AuthRepo;

'''
'''--- src/repositories/category.repo.js ---
const Category = require("../models/category.model");

class CategoryRepo {
  static async getSingleCategory({ category_id }) {
    try {
      let response = { msg: "", status: null, data: null };

      const category = await Category.findOne({ _id: category_id });

      if (!category) {
        return { ...response, msg: "Category not found", status: 404 };
      }

      return { ...response, msg: "Category retrieved successfully", status: 200, data: category };
    } catch (error) {
      console.log("🚀 ~ error", error);
    }
  }

  static async listAllCategories() {
    try {
      let response = { msg: "", status: null, data: null };

      const categories = await Category.find();

      if (categories.length === 0) {
        return { ...response, msg: "There are no categories", status: 200, data: categories };
      }

      return { ...response, msg: "Categories retrieved successfully", status: 200, data: categories };
    } catch (error) {
      console.log("🚀 ~ error", error);
    }
  }

  static async createCategory({ name }) {
    try {
      let response = { msg: "", status: null, data: null };

      const category = await Category.create({ name });

      if (!category) {
        return { ...response, msg: "Could not create a category", status: 400 };
      }

      return { ...response, msg: "Category created", status: 201, data: category };
    } catch (error) {
      console.log("🚀 ~ error", error);
    }
  }

  static async editCategory({ category_id, name }) {
    try {
      let response = { msg: "", status: null, data: null };

      const existingCategory = await Category.findOne({ _id: category_id });

      if (!existingCategory) {
        return { ...response, msg: "Category does not exist", status: 404 };
      }

      const updatedCategory = await Category.findOneAndUpdate({ _id: category_id }, { name }, { new: true });

      if (!updatedCategory) {
        return { ...response, msg: "Could not update category", status: 400 };
      }

      return { ...response, msg: "Category updated", status: 200, data: updatedCategory };
    } catch (error) {
      console.log("🚀 ~ error", error);
    }
  }

  static async removeCategory({ category_id }) {
    try {
      let response = { msg: "", status: null, data: null };

      const existingCategory = await Category.findOne({ _id: category_id });

      if (!existingCategory) {
        return { ...response, msg: "Category does not exist", status: 404 };
      }

      const deletedCategory = await Category.findOneAndDelete({
        _id: { $eq: product_id },
      });

      if (!deletedCategory) {
        return { ...response, msg: "Could not delete category", status: 400 };
      }

      return { ...response, msg: "Category deleted", status: 200, data: deletedCategory };
    } catch (error) {
      console.log("🚀 ~ error", error);
    }
  }
}

module.exports = CategoryRepo;

'''
'''--- src/repositories/delivery.repo.js ---
const deliveryModel = require("./../models/delivery.model");

class DeliveryRepo {

  static async createDelivery({
    destination,
    source,
    buyer_id,
    order_id,
    logistic,
  }) {
    try {
      const delivery = await deliveryModel.create({
        buyer_id: buyer_id,
        Destination: destination,
        Source: source,
        order_id: order_id,
        logistics_id: logistic,
      });
      return delivery;
    } catch (error) {
        console.log("🚀 ~ error", error);
    }
  }

  static async getAllDelivery(){
     try {
      let response = { msg: "", status: null, data: null };

      const orders = await deliveryModel.find({});

      if (orders.length === 0) {
        return { ...response, msg: "No orders available", status: 200, data: orders };
      }

      return { ...response, msg: "Orders retrieved successfully", status: 200, data: orders };
    } catch (error) {
      console.log("🚀 ~ error", error);
    }
  }
  static async deleteDelivery(id){
    try {
        return await deliveryModel.findOneAndDelete({_id: id});
    } catch (error) {
        console.log("🚀 ~ error", error);
        
    }
  }
}
module.exports=DeliveryRepo
'''
'''--- src/repositories/kyc.repo.js ---
const farmer = require("./../models/farmer.model");
const buyer = require("../models/buyer.model");
const logistic = require("../models/logistic.model");

class KycRepo {
  static async getFarmerProfile(id) {
    let response = { msg: "", status: null, data: null };

    const farmerProfile = await farmer.findOne({ user: id });

    if (!farmerProfile) {
      return { ...response, msg: " profile doesnt exist", status: 200, data: farmerProfile };
    }

    return { ...response, msg: " profile retrieved successfully", status: 200, data: farmerProfile };
  }

  static async getBuyerProfile(id) {
    let response = { msg: "", status: null, data: null };

    const buyerProfile = await buyer.findOne({ user: id });

    if (!buyerProfile) {
      return { ...response, msg: "profile doesnt exist", status: 200, data: buyerProfile };
    }

    return { ...response, msg: " profile retrieved successfully", status: 200, data: buyerProfile };
  }

  static async getLogisticsProfile(id) {
    let response = { msg: "", status: null, data: null };

    const logisticProfile = await logistic.findOne({ user: id });

    if (!logisticProfile) {
      return { ...response, msg: " profile doesnt exist", status: 200, data: logisticProfile };
    }

    return { ...response, msg: " profile retrieved successfully", status: 200, data: logisticProfile };
  }

  static async updateFarmerProfile({ farmer_id, query }) {
    let response = { msg: "", status: null, data: null };

    const existingProfile = await farmer.findOne({ user: farmer_id });

    if (!existingProfile) {
      return { ...response, msg: "Profile does not exist", status: 404 };
    }

    const updatedProfile = await farmer.findOneAndUpdate(query);

    if (updatedProfile) {
      return {
        ...response,
        msg: "Profile updated successfully",
        status: 200,
        data: updatedProfile,
      };
    }

    return { ...response, msg: "Could not update profile", status: 400 };
  }

  static async updateBuyerProfile({ buyer_id, query }) {
    let response = { msg: "", status: null, data: null };

    const existingProfile = await buyer.findOne({ user: buyer_id });

    if (!existingProfile) {
      return { ...response, msg: "Profile does not exist", status: 404 };
    }

    const updatedProfile = await buyer.findOneAndUpdate(query);

    if (updatedProfile) {
      return {
        ...response,
        msg: "Profile updated successfully",
        status: 200,
        data: updatedProfile,
      };
    }

    return { ...response, msg: "Could not update profile", status: 400 };
  }

  static async updateLogisticsProfile({ farmer_id, query }) {
    let response = { msg: "", status: null, data: null };

    const existingProfile = await logistic.findOne({ user: farmer_id });

    if (!existingProfile) {
      return { ...response, msg: "Profile does not exist", status: 404 };
    }

    const updatedProfile = await logistic.findOneAndUpdate(query);

    if (updatedProfile) {
      return {
        ...response,
        msg: "Profile updated successfully",
        status: 200,
        data: updatedProfile,
      };
    }

    return { ...response, msg: "Could not update profile", status: 400 };
  }
}

module.exports = KycRepo;

'''
'''--- src/repositories/order.repo.js ---
const Order = require("../models/order.model");

class OrdersRepo {
  static async getAllOrders() {
    try {
      let response = { msg: "", status: null, data: null };

      const orders = await Order.find({});

      if (orders.length === 0) {
        return { ...response, msg: "No orders available", status: 200, data: orders };
      }

      return { ...response, msg: "Orders retrieved successfully", status: 200, data: orders };
    } catch (error) {
      console.log("🚀 ~ error", error);
    }
  }

  static async editOrder({ order_id, status }) {
    try {
      let response = { msg: "", status: null, data: null };

      const existingOrder = await Order.findOne({ _id: order_id });

      if (!existingOrder) {
        return { ...response, msg: "Order not found", status: 404 };
      }

      const updatedOrder = await Order.findOneAndUpdate({ _id: order_id }, { status }, { new: true });

      if (updatedOrder) {
        return { ...response, msg: "Order updated successfully", status: 200, data: updatedOrder };
      }
      return { ...response, msg: "Could not update order", status: 400 };
    } catch (error) {
      console.log("🚀 ~ error", error);
    }
  }

  static async deleteOrder({ order_id }) {
    try {
      let response = { msg: "", status: null, data: null };

      const existingOrder = await Order.findOne({ _id: order_id });

      if (!existingOrder) {
        return { ...response, msg: "Order not found", status: 404 };
      }

      const deleteOrder = await Order.findOneAndDelete({ _id: order_id });

      if (deleteOrder) {
        return { ...response, msg: "Order deleted successfully", status: 200, data: deleteOrder };
      }
      return { ...response, msg: "Could not delete order", status: 400 };
    } catch (error) {
      console.log("🚀 ~ error", error);
    }
  }

  static async getSingleOrder({ order_id }) {
    try {
      let response = { msg: "", status: null, data: null };

      const order = await Order.findOne({ _id: order_id });

      if (!order) {
        return { ...response, msg: "Order not found", status: 404 };
      }

      return { ...response, msg: "Order retrieved successfully", status: 200, data: order };
    } catch (error) {
      console.log("🚀 ~ error", error);
    }
  }

  static async getSingleBuyerOrder({ buyer_id, order_id }) {
    try {
      let response = { msg: "", status: null, data: null };

      const buyerOrder = await Order.findOne({
        _id: { $eq: order_id },
        $and: [{ buyer_id: { $eq: buyer_id } }],
      });

      if (!buyerOrder) {
        return { ...response, msg: "Order not found", status: 404 };
      }

      return { ...response, msg: "Order retrieved successfully", status: 200, data: buyerOrder };
    } catch (error) {
      console.log("🚀 ~ error", error);
    }
  }

  static async listBuyerOrders({ buyer_id }) {
    try {
      let response = { msg: "", status: null, data: null };

      const buyerOrders = await Order.find({
        buyer_id: { $eq: buyer_id },
      });

      if (buyerOrders.length === 0) {
        return { ...response, msg: "Buyer has no orders", status: 200, data: buyerOrders };
      }

      return { ...response, msg: "Buyer orders retrieved successfully", status: 200, data: buyerOrders };
    } catch (error) {
      console.log("🚀 ~ error", error);
    }
  }

  static async placeBuyerOrder({ buyer_id, amount, products, farmer_id, buyer_location }) {
    try {
      let response = { msg: "", status: null, data: null };

      const order = await Order.create({ buyer_id, farmer_id, amount, products, region: buyer_location });

      if (order) {
        // here, we can send a notification to the delivery/logistics company...
        // should we use the data to create a delivery model instance ?
        return { ...response, msg: "Order placed successfully", status: 201, data: order };
      }

      return { ...response, msg: "Could not place order", status: 400 };
    } catch (error) {
      console.log("🚀 ~ error", error);
    }
  }
}

module.exports = OrdersRepo;

'''
'''--- src/repositories/payment.repo.js ---
const stripe = require('stripe')('sk_test_51MJJLuFHE9pQA6NWxCONP5A9mOhhLDxIelaAd4JHV2ZLmkE7pOFp9DJYDu15PwrZSvGs3U1s0jxjUlN9akCWInsu00vEDZiTP2');

class PaymentRepo{
    static async createProduct({ product_name }) {
        const product = await stripe.products.create({
  name: product_name,
});
return product
    }
    static async createPrice({ product_name , price }){
        return await stripe.prices.create({
            unit_amount: price,
            currency: 'usd',
            product_data: {
                name:product_name
            },
          });
}
static async createPaymentLInk(price_id,quantity){
    return await stripe.paymentLinks.create({
        line_items: [
          {
            price: price_id,
            quantity,
          },
        ],
      });
}
static async deleteProduct(id){
    return await stripe.products.del(
        id
      );
}
}
module.exports=PaymentRepo
'''
'''--- src/repositories/product.repo.js ---
const _ = require("lodash");
const fs = require("fs");
const Farmer = require("../models/farmer.model");
const Product = require("../models/product.model");

class ProductRepo {
  static async getAllProducts() {
    try {
      let response = { msg: "", status: null, data: null };

      const products = await Product.find();

      if (products.length === 0) {
        return { ...response, msg: "No products found", status: 200, data: products };
      }

      return { ...response, msg: "Products retrieved successfully", status: 200, data: products };
    } catch (error) {
      console.log("🚀 ~ error", error);
    }
  }

  static async getFarmerInventory({ user_id }) {
    try {
      let response = { msg: "", status: null, data: null };

      const products = await Product.find({ owner: { $eq: user_id } });

      if (products.length === 0) {
        return { ...response, msg: "Farmer has no listed products", status: 200, data: products };
      }

      return { ...response, msg: "Farmer inventory retrieved successfully", status: 200, data: products };
    } catch (error) {
      console.log("🚀 ~ error", error);
    }
  }

  static async editProduct({ product_id, isApproved, category, name, price, description }) {
    try {
      let response = { msg: "", status: null, data: null };

      const existingProduct = await Product.findOne({ _id: product_id });

      if (!existingProduct) {
        return { ...response, msg: "Product does not exist", status: 404 };
      }

      const updatedProduct = await Product.findOneAndUpdate(
        { _id: product_id },
        { name, description, price, category, isApproved: isApproved ? true : false },
        { new: true },
      );

      if (updatedProduct) {
        return {
          ...response,
          msg: isApproved ? "Product verified successfully" : "Product updated successfully",
          status: 200,
          data: updatedProduct,
        };
      }

      return { ...response, msg: "Could not update product", status: 400 };
    } catch (error) {
      console.log("🚀 ~ error", error);
    }
  }

  static async editFarmerProduct({ user_id, product_id, category, name, price, description }) {
    try {
      let response = { msg: "", status: null, data: null };

      const existingProduct = await Product.findOne({ _id: product_id });

      if (!existingProduct) {
        return { ...response, msg: "Product does not exist", status: 404 };
      }

      const updatedProduct = await Product.findOneAndUpdate(
        { _id: { $eq: product_id }, $and: [{ owner: { $eq: user_id } }] },
        { name, description, price, category },
        { new: true },
      );

      if (updatedProduct) {
        return { ...response, msg: "Product updated successfully", status: 200, data: updatedProduct };
      }

      return { ...response, msg: "Could not update product", status: 400 };
    } catch (error) {
      console.log("🚀 ~ error", error);
    }
  }

  static async deleteFarmerProduct({ user_id, product_id }) {
    try {
      let response = { msg: "", status: null, data: null };

      const existingProduct = await Product.findOne({ _id: product_id });

      if (!existingProduct) {
        return { ...response, msg: "Product does not exist", status: 404 };
      }

      const productPhotos = [...existingProduct.photos];
      const deletedProduct = await Product.findOneAndDelete({
        _id: { $eq: product_id },
        $and: [{ owner: { $eq: user_id } }],
      });

      if (deletedProduct) {
        // Remove their images from the file system
        _.forEach(productPhotos, (photo) => {
          fs.unlink("./uploads/" + `${user_id}-${photo.name}`, (err) => {
            if (err) {
              console.log("Could not delete file");
            } else {
              console.log("File deleted successfully");
            }
          });
        });

        await Farmer.findOneAndUpdate({ user: user_id }, { $pull: { products: product_id } });
        return { ...response, msg: "Product deleted successfully", status: 200, data: deletedProduct };
      }

      return { ...response, msg: "Could not delete product", status: 400 };
    } catch (error) {
      console.log("🚀 ~ error", error);
    }
  }

  static async deleteProduct({ product_id, user_id }) {
    try {
      let response = { msg: "", status: null, data: null };

      const existingProduct = await Product.findOne({ _id: product_id });

      if (!existingProduct) {
        return { ...response, msg: "Product does not exist", status: 404 };
      }

      const productPhotos = [...existingProduct.photos];
      const deletedProduct = await Product.findOneAndDelete({
        _id: { $eq: product_id },
        $and: [{ owner: { $eq: user_id } }],
      });

      if (deletedProduct) {
        // remove their images from the file system
        _.forEach(productPhotos, (photo) => {
          fs.unlink("./uploads/" + `${user_id}-${photo.name}`, (err) => {
            if (err) {
              console.log("Could not delete file");
            } else {
              console.log("File deleted successfully");
            }
          });
        });

        await Farmer.findOneAndUpdate({ user: user_id }, { $pull: { products: product_id } });
        return { ...response, msg: "Product deleted successfully", status: 200, data: deletedProduct };
      }

      return { ...response, msg: "Could not delete product", status: 400 };
    } catch (error) {
      console.log("🚀 ~ error", error);
    }
  }

  static async createFarmerProduct({ user_id, photos, category, name, price, description }) {
    try {
      let response = { msg: "", status: null, data: null };
      let images = [];

      // handle file uploads
      if (!_.isArray(photos)) {
        // move to uploads folder
        photos.mv("./uploads/" + `${user_id}-${photos.name}`);
        images.push({
          name: photos.name,
          mimetype: photos.mimetype,
          size: photos.size,
        });
      } else {
        _.forEach(_.keysIn(photos), (key) => {
          let photo = photos[key];

          // move to uploads folder
          photo.mv("./uploads/" + `${user_id}-${photo.name}`);
          images.push({
            name: photo.name,
            mimetype: photo.mimetype,
            size: photo.size,
          });
        });
      }

      // create product and update farmer's products in their model by pushing the product id to the array
      const product = await Product.create({ owner: user_id, name, category, price, description, photos: images });
      if (product) {
        // update farmer's products
        await Farmer.findOneAndUpdate({ user: user_id }, { $push: { products: product._id } });

        return { ...response, msg: "Product created successfully", status: 201, data: product };
      }

      return { ...response, msg: "Could not create product", status: 400 };
    } catch (error) {
      console.log("🚀 ~ error", error);
    }
  }

  static async createProductForFarmer({ owner, photos, category, name, price, description }) {
    try {
      let response = { msg: "", status: null, data: null };
      let images = [];

      // handle file uploads
      if (!_.isArray(photos)) {
        // move to uploads folder
        photos.mv("./uploads/" + `${owner}-${photos.name}`);
        images.push({
          name: photos.name,
          mimetype: photos.mimetype,
          size: photos.size,
        });
      } else {
        // if photos are more than 1
        _.forEach(_.keysIn(photos), (key) => {
          let photo = photos[key];

          // move to uploads folder
          photo.mv("./uploads/" + `${owner}-${photo.name}`);
          images.push({
            name: photo.name,
            mimetype: photo.mimetype,
            size: photo.size,
          });
        });
      }

      // create product and update farmer's products in their model by pushing the product id to the array
      const product = await Product.create({ owner, name, category, price, description, photos: images });
      if (product) {
        // update farmer's products
        await Farmer.findOneAndUpdate({ user: owner }, { $push: { products: product._id } });

        return { ...response, msg: "Product created successfully", status: 201, data: product };
      }

      return { ...response, msg: "Could not create product", status: 400 };
    } catch (error) {
      console.log("🚀 ~ error", error);
    }
  }

  static async getSingleProduct({ product_id }) {
    try {
      let response = { msg: "", status: null, data: null };

      const existingProduct = await Product.findOne({ _id: product_id });

      if (!existingProduct) {
        return { ...response, msg: "Product not found", status: 404 };
      }

      return { ...response, msg: "Product found", status: 200, data: existingProduct };
    } catch (error) {
      console.log("🚀 ~ error", error);
    }
  }
}

module.exports = ProductRepo;

'''
'''--- src/repositories/promotion.repo.js ---
const CryptoHelper = require("../config/crypto-helper");
const Coupon = require("../models/coupon.model");
const PromoCode = require("../models/promo-code.model");
const Farmer = require("../models/farmer.model");
const SpecialEvent = require("../models/special-event.model");

class PromotionsRepo {
  static async createSpecialEvent({ product, farmer, quantity, name, startDate, endDate, coupon, promoCode }) {
    try {
      let response = { msg: "", status: null, data: null };

      const farmerProfile = await Farmer.findOne({ user: farmer });

      const specialEvent = await SpecialEvent.create({
        product,
        name,
        startDate,
        endDate,
        farmer: farmerProfile._id,
        quantityAvailable: quantity,
        coupon,
        promoCode,
      });

      if (specialEvent) {
        return { ...response, msg: "Special event created successfully", status: 201, data: specialEvent };
      }

      return { ...response, msg: "Could not create special event", status: 400 };
    } catch (error) {
      console.log("🚀 ~ error", error);
    }
  }

  static async getSpecialEvents() {
    try {
      let response = { msg: "", status: null, data: null };

      const specialEvents = await SpecialEvent.find();

      if (specialEvents.length === 0) {
        return { ...response, msg: "There are no special events", status: 200, data: specialEvents };
      }

      return { ...response, msg: "Special events retrieved successfully", status: 200, data: specialEvents };
    } catch (error) {
      console.log("🚀 ~ error", error);
    }
  }

  static async getSingleEvent({ event_id }) {
    try {
      let response = { msg: "", status: null, data: null };

      const existingEvent = await SpecialEvent.findOne({ _id: event_id });

      if (!existingEvent) {
        return { ...response, msg: "Special event does not exist", status: 404 };
      }

      return { ...response, msg: "Special event retrieved successfully", status: 200, data: existingEvent };
    } catch (error) {
      console.log("🚀 ~ error", error);
    }
  }

  static async updateSpecialEvent({
    event_id,
    product,
    farmer,
    quantity,
    name,
    startDate,
    endDate,
    coupon,
    promoCode,
  }) {
    try {
      let response = { msg: "", status: null, data: null };

      const existingEvent = await SpecialEvent.findOne({ _id: event_id });
      if (!existingEvent) {
        return { ...response, msg: "Special event does not exist", status: 404 };
      }

      const updatedEvent = await SpecialEvent.findOneAndUpdate(
        { _id: event_id },
        {
          product,
          farmer,
          quantityAvailable: quantity,
          name,
          startDate,
          endDate,
          coupon,
          promoCode,
        },
        { new: true },
      );

      if (updatedEvent) {
        return { ...response, msg: "Special event updated successfully", status: 200, data: updatedEvent };
      }

      return { ...response, msg: "Could not update special event", status: 400 };
    } catch (error) {
      console.log("🚀 ~ error", error);
    }
  }

  static async deleteSpecialEvent({ event_id }) {
    try {
      let response = { msg: "", status: null, data: null };

      const existingEvent = await SpecialEvent.findOne({ _id: event_id });

      if (!existingEvent) {
        return { ...response, msg: "Special event does not exist", status: 404 };
      }

      const deletedEvent = await SpecialEvent.findOneAndDelete({ _id: event_id });

      if (deletedEvent) {
        return { ...response, msg: "Special event deleted successfully", status: 200, data: deletedEvent };
      }

      return { ...response, msg: "Could not delete special event", status: 400 };
    } catch (error) {
      console.log("🚀 ~ error", error);
    }
  }

  static async createPromoCode({ discount, expiresAt }) {
    try {
      let response = { msg: "", status: null, data: null };

      // generate a random code as promo code
      const generatedCode = await CryptoHelper.generatePromoCode();

      const promoCode = await PromoCode.create({ code: generatedCode, discount, expiresAt });

      if (promoCode) {
        return { ...response, msg: "Promo code created successfully", status: 201, data: promoCode };
      }

      return { ...response, msg: "Could not generate promo code", status: 400 };
    } catch (error) {
      console.log("🚀 ~ error", error);
    }
  }

  static async deletePromoCode({ promo_id }) {
    try {
      let response = { msg: "", status: null, data: null };

      const existingPromoCode = await PromoCode.findOne({ _id: promo_id });

      if (!existingPromoCode) {
        return { ...response, msg: "Promo code does not exist", status: 404 };
      }

      const deletedPromoCode = await PromoCode.findOneAndDelete({ _id: promo_id });

      if (deletedPromoCode) {
        return { ...response, msg: "Promo code deleted successfully", status: 200, data: deletedPromoCode };
      }

      return { ...response, msg: "Could not delete promo code", status: 400 };
    } catch (error) {
      console.log("🚀 ~ error", error);
    }
  }

  static async editPromoCode({ promo_id, discount, isValid, expiresAt }) {
    try {
      let response = { msg: "", status: null, data: null };

      const existingPromoCode = await PromoCode.findOne({ _id: promo_id });

      if (!existingPromoCode) {
        return { ...response, msg: "Promo code does not exist", status: 404 };
      }

      const updatedPromoCode = await PromoCode.findOneAndUpdate(
        { _id: promo_id },
        {
          discount,
          isValid: isValid ? isValid : existingPromoCode.isValid,
          expiresAt: expiresAt ? expiresAt : existingPromoCode.expiresAt,
        },
        { new: true },
      );

      if (updatedPromoCode) {
        return { ...response, msg: "Promo code updated successfully", status: 200, data: updatedPromoCode };
      }

      return { ...response, msg: "Could not update promo code", status: 400 };
    } catch (error) {
      console.log("🚀 ~ error", error);
    }
  }

  static async getSinglePromoCode({ promo_id }) {
    try {
      let response = { msg: "", status: null, data: null };

      const existingCode = await PromoCode.findOne({ _id: promo_id });

      if (!existingCode) {
        return { ...response, msg: "Promo code does not exist", status: 404 };
      }

      return { ...response, msg: "Promo code retrieved successfully", status: 200, data: existingCode };
    } catch (error) {
      console.log("🚀 ~ error", error);
    }
  }

  static async getAllPromoCodes() {
    try {
      let response = { msg: "", status: null, data: null };

      const codes = await PromoCode.find();

      if (codes.length === 0) {
        return { ...response, msg: "There are no promo codes", status: 200, data: codes };
      }

      return { ...response, msg: "Promo codes retrieved successfully", status: 200, data: codes };
    } catch (error) {
      console.log("🚀 ~ error", error);
    }
  }

  static async getAllCoupons() {
    try {
      let response = { msg: "", status: null, data: null };

      const coupons = await Coupon.find();

      if (coupons.length === 0) {
        return { ...response, msg: "There are no coupons", status: 200, data: coupons };
      }

      return { ...response, msg: "Coupons retrieved successfully", status: 200, data: coupons };
    } catch (error) {
      console.log("🚀 ~ error", error);
    }
  }

  static async createCoupon({ product_id, numberOfCouponsAvailable, couponPrice, startDate, endDate }) {
    try {
      let response = { msg: "", status: null, data: null };

      // generate a random code as coupon code
      const generatedCode = await CryptoHelper.generateCouponCode();

      const coupon = await Coupon.create({
        code: generatedCode,
        product: product_id,
        couponPrice,
        numberOfCouponsAvailable,
        startDate,
        endDate,
      });

      if (coupon) {
        return { ...response, msg: "Coupon created successfully", status: 201, data: coupon };
      }

      return { ...response, msg: "Could not generate coupon", status: 400 };
    } catch (error) {
      console.log("🚀 ~ error", error.message);
    }
  }

  static async getSingleCoupon({ coupon_id }) {
    try {
      let response = { msg: "", status: null, data: null };

      const existingCoupon = await Coupon.findOne({ _id: coupon_id });

      if (!existingCoupon) {
        return { ...response, msg: "Coupon does not exist", status: 404 };
      }

      return { ...response, msg: "Coupon retrieved successfully", status: 200, data: existingCoupon };
    } catch (error) {
      console.log("🚀 ~ error", error);
    }
  }

  static async deleteCoupon({ coupon_id }) {
    try {
      let response = { msg: "", status: null, data: null };

      const existingCoupon = await Coupon.findOne({ _id: coupon_id });

      if (!existingCoupon) {
        return { ...response, msg: "Promo code does not exist", status: 404 };
      }

      const deletedCoupon = await Coupon.findOneAndDelete({ _id: coupon_id });

      if (deletedCoupon) {
        return { ...response, msg: "Coupon deleted successfully", status: 200, data: deletedCoupon };
      }

      return { ...response, msg: "Could not delete coupon", status: 400 };
    } catch (error) {
      console.log("🚀 ~ error", error);
    }
  }

  static async editCoupon({ coupon_id, couponPrice, numberOfCouponsAvailable, startDate, endDate }) {
    try {
      let response = { msg: "", status: null, data: null };

      const existingCoupon = await Coupon.findOne({ _id: coupon_id });

      if (!existingCoupon) {
        return { ...response, msg: "Coupon does not exist", status: 404 };
      }

      const updatedCoupon = await Coupon.findOneAndUpdate(
        { _id: coupon_id },
        { couponPrice, numberOfCouponsAvailable, startDate, endDate },
        { new: true },
      );

      if (updatedCoupon) {
        return { ...response, msg: "Coupon updated successfully", status: 200, data: updatedCoupon };
      }

      return { ...response, msg: "Could not update coupon", status: 400 };
    } catch (error) {
      console.log("🚀 ~ error", error);
    }
  }
}

module.exports = PromotionsRepo;

'''
'''--- src/repositories/rating.repo.js ---
const Buyer = require("../models/buyer.model");
const Order = require("../models/order.model");
const Review = require("../models/review.model");

class RatingRepo {
  static async rateOrder({ buyer_id, farmer_id, order_id, comment, rating }) {
    try {
      let response = { msg: "", status: null, data: null };

      const existingOrder = await Order.findOne({ _id: order_id });

      if (!existingOrder) {
        return { ...response, msg: "Order not found", status: 404 };
      }

      // using the buyer_id(user-id), search through the buyer table and return the user with that related user_id
      const buyer = await Buyer.findOne({ user: buyer_id });
      const createdReview = await Review.create({
        buyer: buyer._id,
        farmer: farmer_id,
        order: order_id,
        rating,
        comment,
      });

      if (createdReview) {
        return { ...response, msg: "Order rated successfully", status: 201, data: createdReview };
      }

      return { ...response, msg: "Could not rate order", status: 400 };
    } catch (error) {
      console.log("🚀 ~ error", error);
    }
  }

  static async editReview({ user_id, review_id, comment, rating }) {
    try {
      let response = { msg: "", status: null, data: null };

      const existingReview = await Review.findOne({ _id: review_id });

      if (!existingReview) {
        return { ...response, msg: "Review not found", status: 404 };
      }

      // use the buyerid above to search for the buyer profile through the buyer model
      const buyerProfile = await Buyer.findOne({ user: user_id });
      if (!buyerProfile) {
        return { ...response, msg: "You cannot edit this review", status: 400 };
      }

      const updatedReview = await Review.findOneAndUpdate(
        { _id: { $eq: review_id }, $and: [{ buyer: { $eq: buyerProfile._id } }] },
        { rating, comment },
        { new: true },
      );
      console.log("🚀 ~ updatedReview", updatedReview);

      if (updatedReview) {
        return { ...response, msg: "Review updated successfully", status: 200, data: updatedReview };
      }

      return { ...response, msg: "Could not update review", status: 400 };
    } catch (error) {
      console.log("🚀 ~ error", error);
    }
  }

  static async deleteReview({ user_id, review_id }) {
    try {
      let response = { msg: "", status: null, data: null };

      const existingReview = await Review.findOne({ _id: review_id });

      if (!existingReview) {
        return { ...response, msg: "Review not found", status: 404 };
      }

      // use the buyerid above to search for the buyer profile through the buyer model
      const buyerProfile = await Buyer.findOne({ user: user_id });
      if (!buyerProfile) {
        return { ...response, msg: "You cannot delete this review", status: 400 };
      }

      const deletedReview = await Review.findOneAndDelete({
        _id: { $eq: review_id },
        $and: [{ buyer: { $eq: buyerProfile._id } }],
      });
      console.log("🚀 ~ deletedReview", deletedReview);

      if (deletedReview) {
        return { ...response, msg: "Review deleted successfully", status: 200, data: deletedReview };
      }

      return { ...response, msg: "Could not deleted review", status: 400 };
    } catch (error) {
      console.log("🚀 ~ error", error);
    }
  }
}

module.exports = RatingRepo;

'''
'''--- src/repositories/user.repo.js ---
const { roles } = require("../config/constants");
const CryptoHelper = require("../config/crypto-helper");
const { sendMail } = require("../config/notify");
const Admin = require("../models/admin.model");
const Buyer = require("../models/buyer.model");
const Farmer = require("../models/farmer.model");
const Logistics = require("../models/logistic.model");
const User = require("../models/user.model");

class UserRepo {
  static async deleteProfile({ user_id, role }) {
    try {
      if (role === roles.FARMER) {
        // TODO delete associated models - like products?
        return await Farmer.findOneAndRemove({ user: user_id });
      }

      if (role === roles.BUYER) {
        // TODO delete associated models - like orders?
        return await Buyer.findOneAndRemove({ user: user_id });
      }

      if (role === roles.LOGISTICS) {
        // TODO delete associated models - like deliveries?
        return await Logistics.findOneAndRemove({ user: user_id });
      }

      return null;
    } catch (error) {
      console.log("🚀 ~ error", error);
    }
  }

  static async createProfile({ user_id, role, buyerType }) {
    try {
      if (role === roles.ADMIN) {
        const admin = await Admin.create({ user: user_id });
        return admin;
      }

      if (role === roles.FARMER) {
        const farmer = await Farmer.create({ user: user_id });
        return farmer;
      }

      if (role === roles.BUYER) {
        const buyer = await Buyer.create({ user: user_id, type: buyerType });
        return buyer;
      }

      if (role === roles.LOGISTICS) {
        const logistics = await Logistics.create({ user: user_id });
        return logistics;
      }

      return null;
    } catch (error) {
      console.log("🚀 ~ error", error);
    }
  }

  static async getUserProfile({ user_id, role }) {
    try {
      let response = { msg: "", status: null, data: null };
      switch (role) {
        case roles.BUYER:
          const buyerProfile = await Buyer.findOne({ user: user_id });
          if (!buyerProfile) {
            return { ...response, msg: "Buyer profile not found", status: 404 };
          }

          return { ...response, msg: "Buyer profile retrieved successfully", status: 200, data: buyerProfile };

        case roles.FARMER:
          const farmerProfile = await Farmer.findOne({ user: user_id });
          if (!farmerProfile) {
            return { ...response, msg: "Farmer profile not found", status: 404 };
          }

          return { ...response, msg: "Farmer profile retrieved successfully", status: 200, data: farmerProfile };

        case roles.LOGISTICS:
          const logisticsProfile = await Logistics.findOne({ user: user_id });
          if (!logisticsProfile) {
            return { ...response, msg: "Logistics profile not found", status: 404 };
          }

          return { ...response, msg: "Logistics profile retrieved successfully", status: 200, data: logisticsProfile };

        case roles.ADMIN:
          const adminProfile = await Admin.findOne({ user: user_id });
          if (!adminProfile) {
            return { ...response, msg: "Admin profile not found", status: 404 };
          }

          return { ...response, msg: "Admin profile retrieved successfully", status: 200, data: adminProfile };

        default:
          return response;
      }
    } catch (error) {
      console.log("🚀 ~ error", error);
    }
  }

  static async getAllUsers() {
    try {
      let response = { msg: "", status: null, data: null };

      const users = await User.find().select("-password  -otp");

      if (users.length === 0) {
        return { ...response, msg: "No users found", status: 200 };
      }

      return { ...response, msg: "Users retrieved successfully", status: 200, data: users };
    } catch (error) {
      console.log("🚀 ~ error", error);
    }
  }

  static async createUser({ location, firstname, lastname, username, email, role, phone, buyerType }) {
    try {
      let response = { msg: "", status: null, data: null };

      const existingEmail = await User.findOne({ email });
      const existingUsername = await User.findOne({ username });

      if (existingEmail) {
        return { ...response, msg: "Email already exists", status: 400 };
      }

      if (existingUsername) {
        return { ...response, msg: "Username already exists", status: 400 };
      }

      //  generate password and save in their model
      const generatedPassword = await CryptoHelper.generatePassword();
      console.log("🚀 ~ generatedPassword", generatedPassword);
      const hashedPassword = await CryptoHelper.encryptPassword(generatedPassword);

      const user = await User.create({
        firstname,
        lastname,
        username,
        email,
        role,
        phone,
        password: hashedPassword,
        location,
      });
      console.log("🚀 ~ user", user);

      if (user) {
        await this.createProfile({ user_id: user._id, role: user.role, buyerType });
        const createdUser = await User.findOne({ email: user.email }).select("-token -otp -password");
        // TODO send generated password to the user email/phone
        await sendMail(
          createdUser.email,
          "Account Created",
          `Your account has been set up, your password is ${generatedPassword}. Please log in and update your password.`,
        );
        return { ...response, msg: "User created", status: 201, data: createdUser };
      }
      return { ...response, msg: "Could not create user", status: 400 };
    } catch (error) {
      console.log("🚀 ~ error", error);
    }
  }

  static async editUser({ user_id, location, isVerified, firstname, lastname, role, phone }) {
    try {
      let response = { msg: "", status: null, data: null };

      const existingUser = await User.findOne({ _id: user_id });

      if (!existingUser) {
        return { ...response, msg: "User does not exist", status: 404 };
      }

      const updatedUser = await User.findOneAndUpdate(
        { _id: user_id },
        {
          firstname,
          lastname,
          location,
          phone,
          role,
          isVerified: isVerified ? true : false,
        },
        { new: true },
      ).select("-token -password -otp");

      if (updatedUser) {
        // TODO Update user's profile  IF ONLY the role is also updated
        return {
          ...response,
          msg: isVerified ? "User verified successfully" : "User updated successfully",
          status: 200,
          data: updatedUser,
        };
      }

      return { ...response, msg: "Could not delete user", status: 400 };
    } catch (error) {
      console.log("🚀 ~ error", error);
    }
  }

  static async deleteUser({ user_id }) {
    try {
      let response = { msg: "", status: null, data: null };

      const existingUser = await User.findOne({ _id: user_id });

      if (!existingUser) {
        return { ...response, msg: "User does not exist", status: 404 };
      }

      // const activeUser = { ...existingUser };
      const deletedUser = await User.findOneAndDelete({ _id: user_id });

      if (deletedUser) {
        // delete user's profile
        await this.deleteProfile({ user_id: existingUser._id, role: existingUser.role });

        return { ...response, msg: "User deleted successfully", status: 200, data: deletedUser };
      }

      return { ...response, msg: "Could not delete user", status: 400 };
    } catch (error) {
      console.log("🚀 ~ error", error);
    }
  }
}

module.exports = UserRepo;

'''
'''--- src/routes/auth.routes.js ---
const express = require("express");
const { roles } = require("../config/constants");
const { nearConnection, walletConnection, account } = require("../config/contract");
const AuthController = require("../controllers/auth.controller");
const allowRoles = require("../middlewares/allowRoles");
const requireToken = require("../middlewares/requireToken");

module.exports = (app) => {
  let router = express.Router();

  // router.post("/admin/login", AuthController.adminLogin);
  router.post("/signup", AuthController.signup);
  router.post("/verify-otp", AuthController.verifyOtp);
  router.post("/login", AuthController.generalLogin);
  router.patch(
    "/password",
    AuthController.updatePassword,
  );
  router.get(
    "/logout",
    AuthController.logout,
  );

  return router;
};

'''
'''--- src/routes/category.routes.js ---
const express = require("express");
const { roles } = require("../config/constants");
const CategoryController = require("../controllers/category.controller");
const allowRoles = require("../middlewares/allowRoles");
const requireToken = require("../middlewares/requireToken");

module.exports = (app) => {
  let router = express.Router();

  router.get("/category", CategoryController.getAllCategories);

  router.get("/category/:category_id", CategoryController.getSingleCategory);

  router.post("/category", requireToken, allowRoles([roles.ADMIN]), CategoryController.createCategory);

  router.patch("/category/:category_id", requireToken, allowRoles([roles.ADMIN]), CategoryController.editCategory);

  router.delete("/category/:category_id", requireToken, allowRoles([roles.ADMIN]), CategoryController.removeCategory);

  return router;
};

'''
'''--- src/routes/delivery.routes.js ---
const express = require("express");
const DeliveryController = require("../controllers/delivery.controller");

module.exports = (app) => {
let router = express.Router();
  router.get("/delivery", DeliveryController.getAllDelivery);
  router.post("/delivery", DeliveryController.createDelivery);
  router.delete("/delivery/:id", DeliveryController.deleteDelivery);
  return router;
};

'''
'''--- src/routes/index.js ---
const express = require("express");

module.exports = (app) => {
  let router = express.Router();

  let authRoutes = require("./auth.routes")(app);
  router.use(authRoutes);

  let productsRoutes = require("./products.routes")(app);
  router.use(productsRoutes);

  let promotionRoutes = require("./promotion.routes")(app);
  router.use(promotionRoutes);

  let categoryRoutes = require("./category.routes")(app);
  router.use(categoryRoutes);

  let kycRoutes = require("./kyc.routes")(app);
  router.use(kycRoutes);

  let orderRoutes = require("./order.routes")(app);
  router.use(orderRoutes);

  let ratingRoutes = require("./rating.routes")(app);
  router.use(ratingRoutes);

  let paymentRoutes = require("./payment.routes")(app);
  router.use(paymentRoutes);

  let usersRoutes = require("./users.routes")(app);
  router.use(usersRoutes);

  let deliveryRoutes = require("./delivery.routes")(app);
  router.use(deliveryRoutes);

  let locationRoutes = require("./location.routes")(app);
  router.use(locationRoutes);

  return router;
};

'''
'''--- src/routes/kyc.routes.js ---
const express = require("express");
const { roles } = require("../config/constants");
const KycController = require("../controllers/kyc.controller");
const allowRoles = require("../middlewares/allowRoles");
const requireToken = require("../middlewares/requireToken");

module.exports = (app) => {
  let router = express.Router();

  router.get("/kyc/farmer/:email", allowRoles([roles.FARMER]), KycController.getFarmerProfile);

  router.get("/kyc/buyer/:id", allowRoles([roles.BUYER]), KycController.getBuyerProfile);

  router.get("/kyc/logistics/:id", allowRoles([roles.LOGISTICS]), KycController.getLogisticsProfile);

  router.patch("/kyc/farmer/:id", allowRoles([roles.FARMER]), KycController.updateFarmerProfile);

  router.patch("/kyc/buyer/:id", requireToken, allowRoles([roles.BUYER]), KycController.updateBuyerProfile);

  router.patch("/kyc/logistics/:id", requireToken, allowRoles([roles.LOGISTICS]), KycController.updateLogisticsProfile);

  return router;
};

'''
'''--- src/routes/location.routes.js ---
const express = require("express");
const axios = require("axios");

module.exports = (app) => {
  let router = express.Router();
  router.get("/location", getLocation);
  return router;
};
/**
 * @param {import("express").Request} req
 * @param {import("express").Response} res
 *  */
function getLocation(req, res) {
  fetch("https://api.db-ip.com/v2/free/self")
    .then(
      ((response) => res.status(200).json(response.data))
    );
}

'''
'''--- src/routes/order.routes.js ---
const express = require("express");
const OrdersController = require("../controllers/orders.controller");
const requireToken = require("../middlewares/requireToken");
const allowRoles = require("../middlewares/allowRoles");
const { roles } = require("../config/constants");

module.exports = (app) => {
  let router = express.Router();

  router.get("/admin/orders/:order_id", requireToken, allowRoles([roles.ADMIN]), OrdersController.getSingleOrder);

  router.patch("/admin/orders/:order_id", requireToken, allowRoles([roles.ADMIN]), OrdersController.editOrder);

  router.delete("/admin/orders/:order_id", requireToken, allowRoles([roles.ADMIN]), OrdersController.deleteOrder);

  router.post("/orders", requireToken, allowRoles([roles.BUYER]), OrdersController.placeBuyerOrder);

  router.get("/buyer/orders", requireToken, allowRoles([roles.BUYER]), OrdersController.getBuyerOrders);

  router.get("/buyer/orders/:order_id", requireToken, allowRoles([roles.BUYER]), OrdersController.getSingleBuyerOrder);

  return router;
};

'''
'''--- src/routes/payment.routes.js ---
const express = require("express");
const { roles } = require("../config/constants");
const PaymentController= require("../controllers/payment.controller");
const allowRoles = require("../middlewares/allowRoles");
const requireToken = require("../middlewares/requireToken");

module.exports = (app) => {
    let router = express.Router();
  
    router.post("/payment/product", PaymentController.createProductPaymentLink);
  
  
    return router;
  };
  
'''
'''--- src/routes/products.routes.js ---
const express = require("express");
const { roles } = require("../config/constants");
const ProductController = require("../controllers/product.controller");
const allowRoles = require("../middlewares/allowRoles");
const requireToken = require("../middlewares/requireToken");

module.exports = (app) => {
  let router = express.Router();

  // General
  router.get("/products", ProductController.getAllProducts);

  router.get("/products/:product_id", ProductController.getSingleProduct);

  // Admin
  router.post("/admin/products", requireToken, allowRoles([roles.ADMIN]), ProductController.createProductForFarmer);

  router.patch("/admin/products/:product_id", requireToken, allowRoles([roles.ADMIN]), ProductController.editProduct);

  router.delete(
    "/admin/products/:product_id",
    requireToken,
    allowRoles([roles.ADMIN]),
    ProductController.deleteProduct,
  );

  // Farmer
  router.get("/farmer/inventory", requireToken, allowRoles([roles.FARMER]), ProductController.getFarmerInventory);

  router.post("/farmer/products", requireToken, allowRoles([roles.FARMER]), ProductController.createFarmerProduct);

  router.patch(
    "/farmer/products/:product_id",
    requireToken,
    allowRoles([roles.FARMER]),
    ProductController.editFarmerProduct,
  );

  router.delete(
    "/farmer/products/:product_id",
    requireToken,
    allowRoles([roles.FARMER]),
    ProductController.deleteFarmerProduct,
  );

  return router;
};

'''
'''--- src/routes/promotion.routes.js ---
const express = require("express");
const PromotionController = require("../controllers/promotion.controller");
const requireToken = require("../middlewares/requireToken");
const allowRoles = require("../middlewares/allowRoles");
const { roles } = require("../config/constants");

module.exports = (app) => {
  let router = express.Router();

  // PROMO CODES
  router.get("/promo-codes", requireToken, allowRoles([roles.ADMIN]), PromotionController.getAllPromoCodes);

  router.get("/promo-codes/:promo_id", PromotionController.getSinglePromoCode);

  router.post("/promo-codes", requireToken, allowRoles([roles.ADMIN]), PromotionController.createPromoCode);

  router.patch("/promo-codes/:promo_id", requireToken, allowRoles([roles.ADMIN]), PromotionController.editPromoCode);

  router.delete("/promo-codes/:promo_id", requireToken, allowRoles([roles.ADMIN]), PromotionController.deletePromoCode);

  // COUPONS
  router.get("/coupons", requireToken, allowRoles([roles.ADMIN, roles.FARMER]), PromotionController.getAllCoupons);

  router.get(
    "/coupons/:coupon_id",
    requireToken,
    allowRoles([roles.ADMIN, roles.BUYER]),
    PromotionController.getSingleCoupon,
  );

  router.delete("/coupons/:coupon_id", requireToken, allowRoles([roles.ADMIN]), PromotionController.deleteCoupon);

  router.patch("/coupons/:coupon_id", requireToken, allowRoles([roles.ADMIN]), PromotionController.editCoupon);

  router.post("/coupons", requireToken, allowRoles([roles.ADMIN]), PromotionController.createCoupon);

  // SPECIAL EVENTS
  router.get("/special-events", PromotionController.getSpecialEvents);

  router.get("/special-events/:event_id", PromotionController.getSingleEvent);

  router.patch(
    "/special-events/:event_id",
    requireToken,
    allowRoles([roles.ADMIN, roles.FARMER]),
    PromotionController.updateSpecialEvent,
  );

  router.delete(
    "/special-events/:event_id",
    requireToken,
    allowRoles([roles.ADMIN, roles.FARMER]),
    PromotionController.deleteSpecialEvent,
  );

  return router;
};

'''
'''--- src/routes/rating.routes.js ---
const express = require("express");
const { roles } = require("../config/constants");
const RatingController = require("../controllers/rating.controller");
const allowRoles = require("../middlewares/allowRoles");
const requireToken = require("../middlewares/requireToken");

module.exports = (app) => {
  let router = express.Router();

  router.post("/reviews", requireToken, allowRoles([roles.BUYER]), RatingController.reviewOrder);

  router.patch("/reviews/:review_id", requireToken, allowRoles([roles.BUYER]), RatingController.editReview);

  router.delete("/reviews/:review_id", requireToken, allowRoles([roles.BUYER]), RatingController.deleteReview);

  return router;
};

'''
'''--- src/routes/users.routes.js ---
const express = require("express");
const { roles } = require("../config/constants");
const UserController = require("../controllers/users.controller");
const allowRoles = require("../middlewares/allowRoles");
const requireToken = require("../middlewares/requireToken");

module.exports = (app) => {
  let router = express.Router();

  router.get(
    "/user/profile",
    requireToken,
    allowRoles([roles.ADMIN, roles.BUYER, roles.FARMER, roles.LOGISTICS]),
    UserController.getUserProfile,
  );

  router.get("/users", requireToken, allowRoles([roles.ADMIN]), UserController.getAllUsers);

  router.post("/users", requireToken, allowRoles([roles.ADMIN]), UserController.createUser);

  router.patch("/users/:user_id", requireToken, allowRoles([roles.ADMIN]), UserController.editUser);

  router.delete("/users/:user_id", requireToken, allowRoles([roles.ADMIN]), UserController.deleteUser);

  return router;
};

'''
'''--- src/server.js ---
require("dotenv").config();

const http = require("http");
const app = require("./app");
const { connectDatabase } = require("./config/database");
const { NearApi } = require("./config/near");

const HOST = process.env.HOST || "0.0.0.0";
const PORT = process.env.PORT || 5000;

const server = http.createServer(app);

server.listen(PORT, HOST, async () => {
  try {
    // connect to database
    const db = await connectDatabase();
    // const near = new NearApi("testnet");

    // const nearConnection = await near.initialize();

    if (db) {
      // console.log("Near connection initialised");
      console.log(`Database connected to ${db.host}`);
      console.log(`Server running at ${HOST}:${PORT}`);
    }
  } catch (error) {
    console.log("error connecting to server", error);
  }
});

'''
'''--- src/swagger.json ---
{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "E-Fama API",
    "description": "This is the API for e-fama smart contract d'app",
    "contact": {
      "email": "legal@coronet.africa"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "host": "river-engine-375015.rj.r.appspot.com",
  "basePath": "/api/v1",
  "tags": [
    { "name": "Admin", "description": "Endpoints for admins" },
    { "name": "Farmer", "description": "Endpoints for farmers" },
    { "name": "Buyer", "description": "Endpoints for buyers" },
    { "name": "Logistics", "description": "Endpoints for logistics companies" }
  ],
  "schemes": ["https"],
  "consumes": ["application/json", "multipart/form-data"],
  "produces": ["application/json", "multipart/form-data"],
  "responses": {
    "400": {
      "description": "Bad Request",
      "schema": {
        "type": "object",
        "properties": {
          "msg": {
            "type": "string"
          },
          "status": {
            "type": "integer"
          },
          "data": {
            "type": "object"
          }
        }
      }
    },
    "200": {
      "description": "Success",
      "schema": {
        "type": "object",
        "properties": {
          "msg": {
            "type": "string"
          },
          "status": {
            "type": "integer"
          },
          "data": {
            "type": "object"
          }
        }
      }
    },
    "201": {
      "description": "Created",
      "schema": {
        "type": "object",
        "properties": {
          "msg": {
            "type": "string"
          },
          "status": {
            "type": "integer"
          },
          "data": {
            "type": "object"
          }
        }
      }
    },
    "404": {
      "description": "Resource not found",
      "schema": {
        "type": "object",
        "properties": {
          "msg": {
            "type": "string"
          },
          "status": {
            "type": "integer"
          },
          "data": {
            "type": "object"
          }
        }
      }
    },
    "204": {
      "description": "No Content - Resource deleted successfully",
      "schema": {
        "type": "object",
        "properties": {
          "msg": {
            "type": "string"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "BearerAuth": {
      "name": "Authorization",
      "in": "header",
      "type": "apiKey",
      "description": "Authorization header"
    }
  },
  "definitions": {
    "Coupon": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "integer",
          "readOnly": true
        },
        "code": {
          "type": "string"
        },
        "product": {
          "type": "string"
        },
        "numberOfCouponsAvailable": {
          "type": "integer"
        },
        "couponPrice": {
          "type": "string"
        },
        "startDate": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "endDate": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "PromoCode": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "integer",
          "readOnly": true
        },
        "code": {
          "type": "string"
        },
        "discount": {
          "type": "string"
        },
        "expiresAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "SpecialEvent": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "integer",
          "readOnly": true
        },
        "name": {
          "type": "string"
        },
        "farmer": {
          "type": "string"
        },
        "product": {
          "type": "string"
        },
        "coupon": {
          "type": "string"
        },
        "promoCode": {
          "type": "string"
        },
        "startDate": {
          "type": "string",
          "format": "date-time"
        },
        "endDate": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "Product": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "integer",
          "readOnly": true
        },
        "owner": {
          "type": "string"
        },
        "category": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "price": {
          "type": "integer"
        },
        "photos": {
          "type": "array",
          "items": {}
        }
      }
    },
    "Order": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "integer",
          "readOnly": true
        },
        "buyer_id": {
          "type": "string"
        },
        "farmer_id": {
          "type": "string"
        },
        "amount": {
          "type": "integer"
        },
        "region": {
          "type": "string"
        },
        "products": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Product"
          }
        },
        "status": {
          "type": "string",
          "enum": ["pending", "paid", "cancelled"]
        },
        "datePurchased": {
          "type": "string",
          "format": "date-time"
        },
        "expiresAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "Buyer": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "integer",
          "readOnly": true
        },
        "user": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": ["commercial", "consumer"]
        },
        "businessName": {
          "type": "string"
        },
        "businessType": {
          "type": "string"
        },
        "companySize": {
          "type": "string"
        },
        "revenueSize": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "integer",
          "readOnly": true
        },
        "firstname": {
          "type": "string"
        },
        "lastname": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "role": {
          "type": "string",
          "enum": ["admin", "farmer", "buyer", "logistics"]
        },
        "phone": {
          "type": "string"
        },
        "location": {
          "type": "string"
        },
        "otp": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "Farmer": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "integer",
          "readOnly": true
        },
        "user": {
          "type": "string"
        },
        "land": {
          "type": "object",
          "properties": {
            "size": {
              "type": "string"
            },
            "isPloughed": {
              "type": "boolean"
            },
            "ownership": {
              "type": "string"
            }
          }
        },
        "funding": {
          "type": "object",
          "properties": {
            "source": {
              "type": "string"
            },
            "hasCropInsurance": {
              "type": "boolean"
            },
            "bank": {
              "type": "string"
            }
          }
        },
        "certifications": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "description": {
                "type": "string"
              }
            }
          }
        },
        "farmType": {
          "type": "string",
          "enum": ["fruits", "vegetables", "legumes"]
        },
        "businessName": {
          "type": "string"
        },
        "registrationNumber": {
          "type": "string"
        },
        "hasPackHouse": {
          "type": "boolean"
        },
        "isLookingForFunding": {
          "type": "boolean"
        },
        "businessType": {
          "type": "string"
        },
        "companySize": {
          "type": "string"
        },
        "revenueSize": {
          "type": "string"
        },
        "products": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Product"
          }
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "Logistics": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "integer",
          "readOnly": true
        },
        "user": {
          "type": "string"
        },
        "address": {
          "type": "object",
          "properties": {
            "line1": {
              "type": "string"
            },
            "city": {
              "type": "string"
            },
            "town": {
              "type": "string"
            },
            "country": {
              "type": "string"
            }
          }
        },
        "position": {
          "type": "string",
          "enum": ["driver", "owner"]
        },
        "location": {
          "type": "string"
        },
        "accountType": {
          "type": "string"
        },
        "companySize": {
          "type": "string"
        },
        "revenueSize": {
          "type": "string"
        },
        "numberOfVehicles": {
          "type": "string"
        },
        "vehicleType": {
          "type": "string",
          "enum": ["motorcycle", "van", "truck", "heavy duty truck"]
        },
        "licenseCode": {
          "type": "string",
          "enum": [
            "Code A - motorcycle",
            "Code B [08] - Light motor vehicle",
            "Code C [10] - Heavy motor vehicle",
            "Code D [14] - Combination & Articulated vehicle"
          ]
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    }
  },
  "paths": {
    "/signup": {
      "post": {
        "tags": ["Farmer", "Buyer", "Logistics"],
        "description": "Sign up a new user",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": ["email", "firstname", "lastname", "username", "password", "confirmPassword", "role"],
              "properties": {
                "email": {
                  "type": "string",
                  "format": "email"
                },
                "firstname": {
                  "type": "string"
                },
                "lastname": {
                  "type": "string"
                },
                "role": {
                  "type": "string",
                  "enum": ["admin", "buyer", "farmer", "logistics"],
                  "default": "buyer"
                },
                "username": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                },
                "confirmPassword": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "summary": "OTP is sent to the email. Verify OTP with the '/verify-otp' endpoint",
            "schema": {
              "type": "object",
              "properties": {
                "msg": {
                  "type": "string"
                },
                "status": {
                  "type": "integer"
                },

                "data": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          }
        }
      }
    },

    "/admin/login": {
      "post": {
        "tags": ["Admin"],
        "description": "Log in admin",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": ["email", "password"],
              "properties": {
                "email": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "msg": {
                  "type": "string"
                },
                "status": {
                  "type": "integer"
                },
                "token": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "404": {
            "$ref": "#/responses/404"
          }
        }
      }
    },

    "/login": {
      "post": {
        "tags": ["Farmer", "Buyer", "Logistics"],
        "description": "Log in a registered user",
        "parameters": [
          {
            "name": "body",
            "in": "body",

            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "msg": {
                  "type": "string"
                },
                "status": {
                  "type": "integer"
                },
                "token": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "404": {
            "$ref": "#/responses/404"
          }
        }
      }
    },

    "/logout": {
      "get": {
        "description": "Logs out current user",
        "tags": ["Admin", "Buyer", "Farmer", "Logistics"],
        "security": [{ "BearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "msg": {
                  "type": "string"
                },
                "status": {
                  "type": "integer"
                },
                "data": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          }
        }
      }
    },

    "/verify-otp": {
      "post": {
        "tags": ["Farmer", "Buyer", "Logistics"],
        "description": "Verify OTP sent to phone number",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": ["email", "otp"],
              "properties": {
                "email": {
                  "type": "string"
                },
                "otp": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "400": {
            "$ref": "#/responses/400"
          }
        }
      }
    },

    "/password": {
      "patch": {
        "description": "Update user password",
        "tags": ["Admin", "Buyer", "Farmer", "Logistics"],
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "oldPassword": {
                  "type": "string"
                },
                "newPassword": {
                  "type": "string"
                },
                "confirmNewPassword": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "400": {
            "$ref": "#/responses/400"
          }
        }
      }
    },

    "/kyc/buyer": {
      "patch": {
        "description": "Upload KYC for buyer - update their profile",
        "tags": ["Buyer"],
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": ["commercial", "consumer"]
                },
                "businessName": {
                  "type": "string"
                },
                "businessType": {
                  "type": "string"
                },
                "companySize": {
                  "type": "string"
                },
                "revenueSize": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "400": {
            "$ref": "#/responses/400"
          }
        }
      }
    },

    "/kyc/logistics": {
      "patch": {
        "description": "Upload KYC for buyer - update their profile",
        "tags": ["Logistics"],
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "address": {
                  "type": "object",
                  "properties": {
                    "line1": {
                      "type": "string"
                    },
                    "city": {
                      "type": "string"
                    },
                    "town": {
                      "type": "string"
                    },
                    "country": {
                      "type": "string"
                    }
                  }
                },
                "position": {
                  "type": "string",
                  "enum": ["driver", "owner"]
                },
                "location": {
                  "type": "string"
                },
                "accountType": {
                  "type": "string"
                },
                "companySize": {
                  "type": "string"
                },
                "revenueSize": {
                  "type": "string"
                },
                "numberOfVehicles": {
                  "type": "string"
                },
                "vehicleType": {
                  "type": "string",
                  "enum": ["motorcycle", "van", "truck", "heavy duty truck"]
                },
                "licenseCode": {
                  "type": "string",
                  "enum": [
                    "Code A - motorcycle",
                    "Code B [08] - Light motor vehicle",
                    "Code C [10] - Heavy motor vehicle",
                    "Code D [14] - Combination & Articulated vehicle"
                  ]
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "400": {
            "$ref": "#/responses/400"
          }
        }
      }
    },

    "/kyc/farmer": {
      "patch": {
        "description": "Upload KYC for farmer - update their profile",
        "tags": ["Farmer"],
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "land": {
                  "type": "object",
                  "properties": {
                    "size": {
                      "type": "string"
                    },
                    "isPloughed": {
                      "type": "boolean"
                    },
                    "ownership": {
                      "type": "string"
                    }
                  }
                },
                "funding": {
                  "type": "object",
                  "properties": {
                    "source": {
                      "type": "string"
                    },
                    "hasCropInsurance": {
                      "type": "boolean"
                    },
                    "bank": {
                      "type": "string"
                    }
                  }
                },
                "certifications": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "description": {
                        "type": "string"
                      }
                    }
                  }
                },
                "farmType": {
                  "type": "string",
                  "enum": ["fruits", "vegetables", "legumes"]
                },
                "businessName": {
                  "type": "string"
                },
                "registrationNumber": {
                  "type": "string"
                },
                "hasPackHouse": {
                  "type": "boolean"
                },
                "isLookingForFunding": {
                  "type": "boolean"
                },
                "businessType": {
                  "type": "string"
                },
                "companySize": {
                  "type": "string"
                },
                "revenueSize": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "400": {
            "$ref": "#/responses/400"
          }
        }
      }
    },

    "/promo-codes": {
      "get": {
        "description": "Get all promo codes",
        "tags": ["Admin"],
        "security": [{ "BearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "msg": {
                  "type": "string"
                },
                "status": {
                  "type": "integer"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/PromoCode"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          }
        }
      },
      "post": {
        "description": "Create a new promo code",
        "tags": ["Farmer"],
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": ["code", "discount", "expiryDate"],
              "properties": {
                "code": {
                  "type": "string"
                },
                "discount": {
                  "type": "number"
                },
                "expiryDate": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "msg": {
                  "type": "string"
                },
                "status": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/PromoCode"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          }
        }
      }
    },

    "/special-events": {
      "get": {
        "description": "Get all special events",
        "tags": ["Admin", "Buyer", "Farmer", "Logistics"],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "msg": {
                  "type": "string"
                },
                "status": {
                  "type": "integer"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/SpecialEvent"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          }
        }
      },
      "post": {
        "description": "Create a new special event",
        "tags": ["Admin"],
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": ["name", "farmer", "quantity", "startDate", "endDate"],
              "properties": {
                "name": {
                  "type": "string"
                },
                "product": {
                  "type": "string"
                },
                "farmer": {
                  "type": "string"
                },
                "coupon": {
                  "type": "string"
                },
                "quantity": {
                  "type": "string"
                },
                "promoCode": {
                  "type": "string"
                },
                "startDate": {
                  "type": "string",
                  "format": "date-time"
                },
                "endDate": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "msg": {
                  "type": "string"
                },
                "status": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/SpecialEvent"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          }
        }
      }
    },
    "/special-events/{event_id}": {
      "get": {
        "description": "Get a special event",
        "tags": ["Admin", "Buyer", "Farmer", "Logistics"],
        "parameters": [
          {
            "name": "event_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "msg": {
                  "type": "string"
                },
                "status": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/SpecialEvent"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          }
        }
      },
      "patch": {
        "description": "Update a special event",
        "tags": ["Admin"],
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "event_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": ["name", "farmer", "quantity", "startDate", "endDate"],
              "properties": {
                "name": {
                  "type": "string"
                },
                "product": {
                  "type": "string"
                },
                "farmer": {
                  "type": "string"
                },
                "coupon": {
                  "type": "string"
                },
                "quantity": {
                  "type": "string"
                },
                "promoCode": {
                  "type": "string"
                },
                "startDate": {
                  "type": "string",
                  "format": "date-time"
                },
                "endDate": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "msg": {
                  "type": "string"
                },
                "status": {
                  "type": "integer"
                }
              }
            }
          }
        }
      }
    },

    "/payment/product": {
      "post": {
        "description": "Create a new payment link for a product",
        "tags": ["Farmer"],
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": ["product_name", "price", "quantity"],
              "properties": {
                "product_name": {
                  "type": "string"
                },
                "price": {
                  "type": "number"
                },
                "quantity": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/promo-codes/{promo_id}": {
      "get": {
        "description": "Get a single promo code",
        "tags": ["Admin", "Buyer", "Farmer", "Logistics"],
        "parameters": [
          {
            "name": "promo_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "400": {
            "$ref": "#/responses/400"
          }
        }
      },
      "patch": {
        "description": "Update a promo code",
        "tags": ["Admin"],
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "promo_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "isValid": {
                  "type": "boolean"
                },
                "discount": {
                  "type": "number"
                },
                "expiresAt": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "400": {
            "$ref": "#/responses/400"
          }
        }
      },
      "delete": {
        "description": "Delete a promo code",
        "tags": ["Admin"],
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "promo_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "400": {
            "$ref": "#/responses/400"
          }
        }
      }
    },

    "/coupons": {
      "get": {
        "description": "Get all coupons",
        "tags": ["Admin", "Farmer"],
        "security": [{ "BearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "msg": {
                  "type": "string"
                },
                "status": {
                  "type": "integer"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Coupon"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          }
        }
      },
      "post": {
        "description": "Create a new coupon",
        "tags": ["Farmer"],
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": ["product_id", "numberOfCouponsAvailable", "couponPrice", "startDate", "endDate"],
              "properties": {
                "product_id": {
                  "type": "string"
                },
                "numberOfCouponsAvailable": {
                  "type": "number"
                },
                "couponPrice": {
                  "type": "number"
                },
                "startDate": {
                  "type": "string",
                  "format": "date-time"
                },
                "endDate": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "msg": {
                  "type": "string"
                },
                "status": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/Coupon"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          }
        }
      }
    },
    "/coupons/{coupon_id}": {
      "get": {
        "description": "Get a single coupon",
        "tags": ["Admin", "Buyer"],
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "coupon_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "400": {
            "$ref": "#/responses/400"
          }
        }
      },
      "patch": {
        "description": "Update a coupon",
        "tags": ["Farmer", "Admin"],
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "coupon_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "product_id": {
                  "type": "string"
                },
                "numberOfCouponsAvailable": {
                  "type": "number"
                },
                "couponPrice": {
                  "type": "number"
                },
                "startDate": {
                  "type": "string",
                  "format": "date-time"
                },
                "endDate": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "400": {
            "$ref": "#/responses/400"
          }
        }
      },
      "delete": {
        "description": "Delete a coupon",
        "tags": ["Admin"],
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "coupon_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "400": {
            "$ref": "#/responses/400"
          }
        }
      }
    },

    "/user/profile": {
      "get": {
        "description": "Get user profile",
        "tags": ["Farmer", "Buyer", "Logistics", "Admin"],
        "security": [{ "BearerAuth": [] }],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "400": {
            "$ref": "#/responses/400"
          }
        }
      }
    },
    "/users": {
      "get": {
        "description": "Get all users",
        "tags": ["Admin"],
        "security": [{ "BearerAuth": [] }],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "400": {
            "$ref": "#/responses/400"
          }
        }
      },
      "post": {
        "description": "Create a new user",
        "tags": ["Admin"],
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": ["email", "firstname", "lastname", "username", "role", "phone", "location"],
              "properties": {
                "email": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                },
                "role": {
                  "type": "string",
                  "enum": ["farmer", "buyer", "logistics", "admin"]
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "msg": {
                  "type": "string"
                },
                "status": {
                  "type": "integer"
                },
                "data": {
                  "$ref": "#/definitions/User"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          }
        }
      }
    },
    "/users/{user_id}": {
      "get": {
        "description": "Get user details",
        "tags": ["Admin"],
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "404": {
            "$ref": "#/responses/404"
          }
        }
      },
      "patch": {
        "description": "Update user details",
        "tags": ["Admin"],
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "firstname": {
                  "type": "string"
                },
                "lastname": {
                  "type": "string"
                },
                "isVerified": {
                  "type": "boolean"
                },
                "location": {
                  "type": "string"
                },
                "phone": {
                  "type": "string"
                },
                "role": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "404": {
            "$ref": "#/responses/404"
          }
        }
      },
      "delete": {
        "description": "Delete a user",
        "tags": ["Admin"],
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "404": {
            "$ref": "#/responses/404"
          }
        }
      }
    },

    "/category": {
      "get": {
        "description": "Get all categories",
        "tags": ["Admin", "Buyer", "Farmer", "Logistics"],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "400": {
            "$ref": "#/responses/400"
          }
        }
      },
      "post": {
        "description": "Create a new category",
        "tags": ["Admin"],
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": ["name"],
              "properties": {
                "name": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/201"
          }
        },
        "400": {
          "$ref": "#/responses/400"
        }
      }
    },
    "/category/{category_id}": {
      "get": {
        "description": "Get a category",
        "tags": ["Admin", "Buyer", "Farmer", "Logistics"],
        "parameters": [
          {
            "name": "category_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "404": {
            "$ref": "#/responses/404"
          }
        }
      },
      "patch": {
        "description": "Update a category",
        "tags": ["Admin"],
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "category_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": ["name"],
              "properties": {
                "name": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "404": {
            "$ref": "#/responses/404"
          }
        }
      },
      "delete": {
        "description": "Delete a category",
        "tags": ["Admin"],
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "category_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "404": {
            "$ref": "#/responses/404"
          }
        }
      }
    },

    "/reviews": {
      "post": {
        "description": "Create a new review",
        "tags": ["Buyer"],
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": ["farmer_id", "order_id", "rating"],
              "properties": {
                "farmer_id": {
                  "type": "string"
                },
                "order_id": {
                  "type": "string"
                },
                "rating": {
                  "type": "integer"
                },
                "comment": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/201"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "400": {
            "$ref": "#/responses/400"
          }
        }
      }
    },
    "/reviews/{review_id}": {
      "patch": {
        "description": "Update a review",
        "tags": ["Buyer"],
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "review_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": ["rating"],
              "properties": {
                "rating": {
                  "type": "integer"
                },
                "comment": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "400": {
            "$ref": "#/responses/400"
          }
        }
      },
      "delete": {
        "description": "Delete a review",
        "tags": ["Buyer"],
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "review_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "400": {
            "$ref": "#/responses/400"
          }
        }
      }
    },

    "/admin/orders": {
      "get": {
        "description": "Get all orders",
        "tags": ["Admin"],
        "security": [{ "BearerAuth": [] }],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "400": {
            "$ref": "#/responses/400"
          }
        }
      }
    },
    "/admin/orders/{order_id}": {
      "get": {
        "description": "Get a single order",
        "tags": ["Admin"],
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "400": {
            "$ref": "#/responses/400"
          }
        }
      },

      "patch": {
        "description": "Update an order",
        "tags": ["Admin"],
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "400": {
            "$ref": "#/responses/400"
          }
        }
      },
      "delete": {
        "description": "Delete an order",
        "tags": ["Admin"],
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "400": {
            "$ref": "#/responses/400"
          }
        }
      }
    },
    "/orders": {
      "post": {
        "description": "Create a new order",
        "tags": ["Buyer"],
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": ["farmer_id", "product_id", "quantity"],
              "properties": {
                "farmer_id": {
                  "type": "string"
                },
                "products": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "quantity": {
                  "type": "integer"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/201"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "400": {
            "$ref": "#/responses/400"
          }
        }
      }
    },
    "/buyer/orders": {
      "get": {
        "description": "Get all buyer orders",
        "tags": ["Buyer"],
        "security": [{ "BearerAuth": [] }],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "400": {
            "$ref": "#/responses/400"
          }
        }
      }
    },
    "/buyer/orders/{order_id}": {
      "get": {
        "description": "Get single buyer order",
        "tags": ["Buyer"],
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "400": {
            "$ref": "#/responses/400"
          }
        }
      }
    },

    "/products": {
      "get": {
        "description": "Get all products",
        "tags": ["Buyer", "Admin", "Farmer", "Logistics"],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "400": {
            "$ref": "#/responses/400"
          }
        }
      }
    },

    "/products/{product_id}": {
      "get": {
        "description": "Get a product",
        "tags": ["Buyer", "Admin", "Farmer", "Logistics"],
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "400": {
            "$ref": "#/responses/400"
          }
        }
      }
    },
    "/admin/products": {
      "post": {
        "description": "Create a new product for a farmer",
        "tags": ["Admin"],
        "security": [{ "BearerAuth": [] }],
        "consumes": "multipart/form-data",
        "parameters": [
          {
            "name": "photos",
            "in": "formData",
            "type": "file",
            "schema": {
              "type": "object",
              "properties": {
                "photos": {
                  "type": "file",
                  "format": "base64"
                }
              }
            }
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": ["name", "description", "price", "photos", "category", "image"],
              "properties": {
                "owner": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "price": {
                  "type": "integer"
                },
                "category": {
                  "type": "string"
                },
                "image": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/201"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "400": {
            "$ref": "#/responses/400"
          }
        }
      }
    },
    "/admin/products/{product_id}": {
      "patch": {
        "description": "Update a product",
        "tags": ["Admin"],
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "price": {
                  "type": "integer"
                },
                "category": {
                  "type": "string"
                },
                "isApproved": {
                  "type": "boolean"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "400": {
            "$ref": "#/responses/400"
          }
        }
      },
      "delete": {
        "description": "Delete a product",
        "tags": ["Admin"],
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "400": {
            "$ref": "#/responses/400"
          }
        }
      }
    },

    "/farmer/inventory": {
      "get": {
        "description": "Get all products for a farmer",
        "tags": ["Farmer"],
        "security": [{ "BearerAuth": [] }],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "400": {
            "$ref": "#/responses/400"
          }
        }
      }
    },
    "/farmer/products": {
      "post": {
        "description": "Create a new product as a farmer",
        "tags": ["Farmer"],
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": ["name", "description", "price", "photos", "category", "image"],
              "properties": {
                "owner": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "price": {
                  "type": "integer"
                },
                "category": {
                  "type": "string"
                },
                "image": {
                  "type": "string"
                },
                "photos": {
                  "type": "array",
                  "items": {}
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/201"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "400": {
            "$ref": "#/responses/400"
          }
        }
      }
    },
    "/farmer/products/{product_id}": {
      "patch": {
        "description": "Update a product as a farmer",
        "tags": ["Farmer"],
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "price": {
                  "type": "integer"
                },
                "category": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "400": {
            "$ref": "#/responses/400"
          }
        }
      },
      "delete": {
        "description": "Delete a product as a farmer",
        "tags": ["Farmer"],
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "400": {
            "$ref": "#/responses/400"
          }
        }
      }
    }

  }
}

'''