*GitHub Repository "kiskesis/pay-on-use"*

'''--- README.md ---
# Pay on use

<p>
    An application contains that parts:
</p>
<ol>
    <li>Login</li>
    <li>Wrap Near</li>
    <li>Add minutes</li>
    <li>Start stream</li>
    <li>Dont want to pay? Pause stream</li>
</ol>
<p>
    But the idea is deeper, so:
    <ol>
        <li>
            Create NPM module for React for pay on use, with connection to rocketo
        </li>
        <li>
            NPM module that will automatically handle when you on use page and when not and pause stream when you off and start when you want
        </li>
        <li>
            It will open to us new world of pay on use schema
        </li>
    </ol>
</p>
'''
'''--- craco.config.js ---
const path = require('path');
module.exports = {
  webpack: {
    alias: {
      'components': path.resolve(__dirname, 'src/components/'),
      'styles': path.resolve(__dirname, 'src/styles/'),
      'images': path.resolve(__dirname, 'src/images/'),
      'constants': path.resolve(__dirname, 'src/constants'),
    }
  }
}
'''
'''--- package.json ---
{
  "name": "pay-on-use",
  "version": "0.1.0",
  "private": "false",
  "homepage": "https://kiskesis.github.io/pay-on-use/",
  "dependencies": {
    "@craco/craco": "^6.4.3",
    "@testing-library/jest-dom": "^5.11.4",
    "@testing-library/react": "^11.1.0",
    "@testing-library/user-event": "^12.1.10",
    "assert": "^2.0.0",
    "axios": "^0.24.0",
    "bn.js": "^5.2.0",
    "borsh": "^0.7.0",
    "browserify-zlib": "^0.2.0",
    "buffer": "^6.0.3",
    "classnames": "^2.3.1",
    "crypto-js": "^4.1.1",
    "gh-pages": "^3.2.3",
    "near-api-js": "^0.44.2",
    "process": "^0.11.10",
    "query-string": "^7.0.1",
    "react": "^18.1.0",
    "react-dom": "^18.1.0",
    "react-loader-spinner": "^4.0.0",
    "react-router-dom": "6",
    "react-scripts": "5.0.1",
    "stream-browserify": "^3.0.0",
    "util": "^0.12.4",
    "web-vitals": "^1.0.1",
    "workbox-background-sync": "^6.5.3",
    "workbox-broadcast-update": "^6.5.3",
    "workbox-cacheable-response": "^6.5.3",
    "workbox-core": "^6.5.3",
    "workbox-expiration": "^6.5.3",
    "workbox-google-analytics": "^6.5.3",
    "workbox-navigation-preload": "^6.5.3",
    "workbox-precaching": "^6.5.3",
    "workbox-range-requests": "^6.5.3",
    "workbox-routing": "^6.5.3",
    "workbox-strategies": "^6.5.3",
    "workbox-streams": "^6.5.3"
  },
  "scripts": {
    "start": "BROWSER=none craco start",
    "build": "craco build",
    "test": "craco test",
    "eject": "react-scripts eject",
    "deploy:pages": "gh-pages -d build"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

'''
'''--- pay-on-use-contract/.github/dependabot.yml ---
version: 2
updates:
- package-ecosystem: cargo
  directory: "/"
  schedule:
    interval: daily
  open-pull-requests-limit: 10

'''
'''--- pay-on-use-contract/.github/workflows/tests.yml ---
name: Tests
on: 
  repository_dispatch:
    types: [tests-report]
  push:
jobs:
  tests:
    strategy:
      matrix:
        platform: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout branch
        uses: actions/checkout@v2
      - name: Install Node
        uses: actions/setup-node@v2
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: wasm32-unknown-unknown
      - name: Install modules
        run: yarn
      - name: Run unit tests
        run: yarn test:unit
      - name: Run integration tests
        run: yarn test:integration

'''
'''--- pay-on-use-contract/.gitpod.yml ---
image:
  file: .gitpod.Dockerfile
# Options to prebuild the image after github events and set notifications/badges
github:
  prebuilds:
    # enable for the master/default branch (defaults to true)
    master: true
    # enable for all branches in this repo (defaults to false)
    branches: true
    # enable for pull requests coming from this repo (defaults to true)
    pullRequests: true
    # enable for pull requests coming from forks (defaults to false)
    pullRequestsFromForks: true
    # add a check to pull requests (defaults to true)
    addCheck: true
    # add a "Review in Gitpod" button as a comment to pull requests (defaults to false)
    addComment: true
    # add a "Review in Gitpod" button to the pull request's description (defaults to false)
    addBadge: false
    # add a label once the prebuild is ready to pull requests (defaults to false)
    addLabel: false

# List the start up tasks. You can start them in parallel in multiple terminals. See https://www.gitpod.io/docs/config-start-tasks/
tasks:
  - before: echo "nvm use default" >> ~/.bashrc && npm install -g near-cli && nvm use default
    init: yarn && yarn dev
    command: source ~/.bashrc; gp open README-Gitpod.md && yarn dev

vscode:
  extensions:
    - hbenl.vscode-test-explorer@2.15.0:koqDUMWDPJzELp/hdS/lWw==
    - Swellaby.vscode-rust-test-adapter@0.11.0:Xg+YeZZQiVpVUsIkH+uiiw==
    - bungcip.better-toml@0.3.2:3QfgGxxYtGHfJKQU7H0nEw==

'''
'''--- pay-on-use-contract/.travis.yml ---
language: node_js
node_js:
  - 12.0
os:
  - linux
  - osx
  - windows
before_install:
  - curl https://sh.rustup.rs -sSf -m 60 | sh -s -- -y -v --default-toolchain stable
  - if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then HOME="/c/Users/travis"; fi
  - export PATH="$HOME/.cargo/bin:$PATH"
  - rustup target add wasm32-unknown-unknown
script:
  - npm run build
  - cargo test --package status-message -- --nocapture
'''
'''--- pay-on-use-contract/Cargo.toml ---
[package]
name = "status-message"
version = "0.1.0"
authors = ["Near Inc <hello@nearprotocol.com>"]
edition = "2018"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
serde = { version = "*", features = ["derive"] }
serde_json = "*"
near-sdk = "3.1.0"

[profile.release]
codegen-units = 1
# Tell `rustc` to optimize for small code size.
opt-level = "z"
lto = true
debug = false
panic = "abort"
# Opt into extra safety checks on arithmetic operations https://stackoverflow.com/a/64136471/249801
overflow-checks = true

'''
'''--- pay-on-use-contract/README-Gitpod.md ---
Status Message in Rust - Gitpod version
=======================================

This smart contract saves and records the status messages of NEAR accounts that call it.

**Note**: this README is specific to Gitpod and this example. For local development, please see [README.md](README.md).

## Using this contract

### Web app

Deploy the smart contract to a specific account created with the NEAR Wallet. Then interact with the smart contract using near-api-js on the frontend.

In the project root, login with `near-cli` by following the instructions after this command:

```
near login
```

Deploy the contract to your NEAR account:

```bash
near deploy --wasmFile res/status_message.wasm --accountId YOUR_ACCOUNT_NAME
```

Build the frontend:

```bash
npm start
```

If all is successful the app should be live at `localhost:1234`!

### CLI

In Gitpod, a process has automatically created a new NEAR account that's useful for a quick (and likely temporary) usage.
We've set an environment variable in Gitpod with the account name. At the bottom of this screen there's a Terminal.

You may see the NEAR account by running this command:
```bash
echo $CONTRACT_NAME
```

The next command will call the contract's `set_status` method:

```bash
near call $CONTRACT_NAME set_status '{"message": "aloha!"}' --accountId $CONTRACT_NAME
```

To retrieve the message from the contract, call `get_status` with the following:

```bash
near view $CONTRACT_NAME get_status '{"account_id": "'$CONTRACT_NAME'"}' --accountId $CONTRACT_NAME
```

Note that these status messages are stored per account in a `HashMap`. See `src/lib.rs` for the code. We can try the same steps with another account to verify.
**Note**: we're adding `NEW_ACCOUNT_NAME` for the next couple steps.

There are two ways to create a new account:
 - the NEAR Wallet (as we did before)
 - `near create_account NEW_ACCOUNT_NAME --masterAccount $CONTRACT_NAME`

Now call the contract on the first account (where it's deployed):

```bash
near call $CONTRACT_NAME set_status '{"message": "bonjour"}' --accountId NEW_ACCOUNT_NAME
```

```bash
near view $CONTRACT_NAME get_status '{"account_id": "NEW_ACCOUNT_NAME"}'
```

Returns `bonjour`.

Make sure the original status remains:

```bash
near view $CONTRACT_NAME get_status '{"account_id": "$CONTRACT_NAME"}'
```

Now that you've seen this working in Gitpod, feel free to clone this repository and use it as a starting point for your own project.

## Testing
To test run:
```bash
cargo test --package status-message -- --nocapture
```

## Data collection
By using Gitpod in this project, you agree to opt-in to basic, anonymous analytics. No personal information is transmitted. Instead, these usage statistics aid in discovering potential bugs and user flow information.

'''
'''--- pay-on-use-contract/README-Windows.md ---
Status Message
==============

This smart contract saves and records the status messages of NEAR accounts that call it.

**Note**: this README is specific to Windows and this example. For development on OS X or Linux, please see [README.md](README.md).

## Prerequisites
Ensure `near-cli` is installed by running:

```
near --version
```

If needed, install `near-cli`:

```
npm install near-cli -g
```

Ensure `Rust` is installed by running:

```
rustc --version
```

If needed, install `Rust`:

```
curl https://sh.rustup.rs -sSf | sh
```

Install dependencies

```
npm install
```

## Building this contract
To make the build process compatible with multiple operating systems, the build process exists as a script in `package.json`.
There are a number of special flags used to compile the smart contract into the wasm file.
Run this command to build and place the wasm file in the `res` directory:
```bash
npm run build
```

**Note**: Instead of `npm`, users of [yarn](https://yarnpkg.com) may run:
```bash
yarn build
```

### Important
If you encounter an error similar to:
>note: the `wasm32-unknown-unknown` target may not be installed

Then run:

```bash
rustup target add wasm32-unknown-unknown
```

## Using this contract

### Web app

Deploy the smart contract to a specific account created with the NEAR Wallet. Then interact with the smart contract using near-api-js on the frontend.

If you do not have a NEAR account, please create one with [NEAR Wallet](https://wallet.testnet.near.org).

Make sure you have credentials saved locally for the account you want to deploy the contract to. To perform this run the following `near-cli` command:

```
near login
```

Deploy the contract to your NEAR account:

```bash
near deploy --wasmFile res/status_message.wasm --accountId YOUR_ACCOUNT_NAME
```

Build the frontend:

```bash
npm start
```

If all is successful the app should be live at `localhost:1234`!

### Quickest deploy
Build and deploy this smart contract to an development account. This development account will be created automatically and is not intended to be permanent. Please see the "Standard deploy" section for creating a more personalized account to deploy to.

```bash
near dev-deploy --wasmFile res/status_message.wasm --helperUrl https://near-contract-helper.onrender.com
```

Behind the scenes, this is creating an account and deploying a contract to it. On the console, notice a message like:

>Done deploying to dev-1234567890123

In this instance, the account is `dev-1234567890123`. A file has been created containing the key to the account, located at `neardev/dev-account.env`. To make the next few steps easier, we're going to set an environment variable containing this development account id and use that when copy/pasting commands.

If the account name is not immediately visible on the Command Prompt, you may find it by running:

```bash
type neardev\dev-account.env
```

It will display something similar to `CONTRACT_NAME=dev-12345678901234`.
Please set the Windows environment variable by copying that value and running `set` like so:

```bash
set CONTRACT_NAME=dev-12345678901234
```

You can tell if the environment variable is set correctly if your command line prints the account name after this command:
```bash
echo %CONTRACT_NAME%
```

The next command will call the contract's `set_status` method:

```bash
near call %CONTRACT_NAME% set_status "{\"message\": \"aloha!\"}" --accountId %CONTRACT_NAME%
```

**Note**: at the time of this writing, Windows does not handle single quotes `'` well, so these commands must use escaped double-quotes `\"` which, as you may know, equates to a regular double quote `"` when parsed. Apologies for some of the unsightly commands, but it's out of necessity.

To retrieve the message from the contract, call `get_status` with the following:

```bash
near view %CONTRACT_NAME% get_status "{\"account_id\": \""%CONTRACT_NAME%"\"}" --accountId %CONTRACT_NAME%
```

### Standard deploy
In this option, the smart contract will get deployed to a specific account created with the NEAR Wallet.

If you do not have a NEAR account, please create one with [NEAR Wallet](https://wallet.testnet.near.org).

Make sure you have credentials saved locally for the account you want to deploy the contract to. To perform this run the following `near-cli` command:

```
near login
```

Deploy the contract:

```bash
near deploy --wasmFile res/status_message.wasm --accountId YOUR_ACCOUNT_NAME
```

Set a status for your account:

```bash
near call YOUR_ACCOUNT_NAME set_status "{\"message\": \"aloha friend\"}" --accountId YOUR_ACCOUNT_NAME
```

Get the status:

```bash
near view YOUR_ACCOUNT_NAME get_status "{\"account_id\": \"YOUR_ACCOUNT_NAME\"}"
```

Note that these status messages are stored per account in a `HashMap`. See `src/lib.rs` for the code. We can try the same steps with another account to verify.
**Note**: we're adding `NEW_ACCOUNT_NAME` for the next couple steps.

There are two ways to create a new account:
 - the NEAR Wallet (as we did before)
 - `near create_account NEW_ACCOUNT_NAME --masterAccount YOUR_ACCOUNT_NAME`

Now call the contract on the first account (where it's deployed):

```bash
near call YOUR_ACCOUNT_NAME set_status "{\"message\": \"bonjour\"}" --accountId NEW_ACCOUNT_NAME
```

```bash
near view YOUR_ACCOUNT_NAME get_status "{\"account_id\": \"NEW_ACCOUNT_NAME\"}"
```

Returns `bonjour`.

Make sure the original status remains:

```bash
near view YOUR_ACCOUNT_NAME get_status "{\"account_id\": \"YOUR_ACCOUNT_NAME\"}"
```

## Testing
To test run:
```bash
cargo test --package status-message -- --nocapture
```

'''
'''--- pay-on-use-contract/README.md ---
Status Message
==============

[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/near-examples/rust-status-message)

<!-- MAGIC COMMENT: DO NOT DELETE! Everything above this line is hidden on NEAR Examples page -->

This smart contract saves and records the status messages of NEAR accounts that call it.

Windows users: please visit the [Windows-specific README file](README-Windows.md).

## Prerequisites
Ensure `near-cli` is installed by running:

```
near --version
```

If needed, install `near-cli`:

```
npm install near-cli -g
```

Ensure `Rust` is installed by running:

```
rustc --version
```

If needed, install `Rust`:

```
curl https://sh.rustup.rs -sSf | sh
```

Install dependencies

```
npm install
```

## Quick Start
To run this project locally:

1. Prerequisites: Make sure you have Node.js ≥ 12 installed (https://nodejs.org), then use it to install yarn: `npm install --global yarn` (or just `npm i -g yarn`)
2. Run the local development server: `yarn && yarn dev` (see package.json for a full list of scripts you can run with yarn)
Now you'll have a local development environment backed by the NEAR TestNet! Running yarn dev will tell you the URL you can visit in your browser to see the app.

## Building this contract
To make the build process compatible with multiple operating systems, the build process exists as a script in `package.json`.
There are a number of special flags used to compile the smart contract into the wasm file.
Run this command to build and place the wasm file in the `res` directory:
```bash
npm run build
```

**Note**: Instead of `npm`, users of [yarn](https://yarnpkg.com) may run:
```bash
yarn build
```

### Important
If you encounter an error similar to:
>note: the `wasm32-unknown-unknown` target may not be installed

Then run:

```bash
rustup target add wasm32-unknown-unknown
```

## Using this contract

### Web app

Deploy the smart contract to a specific account created with the NEAR Wallet. Then interact with the smart contract using near-api-js on the frontend.

If you do not have a NEAR account, please create one with [NEAR Wallet](https://wallet.testnet.near.org).

Make sure you have credentials saved locally for the account you want to deploy the contract to. To perform this run the following `near-cli` command:

```
near login
```

Deploy the contract to your NEAR account:

```bash
near deploy --wasmFile res/status_message.wasm --accountId YOUR_ACCOUNT_NAME
```

Build the frontend:

```bash
npm start
```

If all is successful the app should be live at `localhost:1234`!

### Quickest deploy
Build and deploy this smart contract to an development account. This development account will be created automatically and is not intended to be permanent. Please see the "Standard deploy" section for creating a more personalized account to deploy to.

```bash
near dev-deploy --wasmFile res/status_message.wasm --helperUrl https://near-contract-helper.onrender.com
```

Behind the scenes, this is creating an account and deploying a contract to it. On the console, notice a message like:

>Done deploying to dev-1234567890123

In this instance, the account is `dev-1234567890123`. A file has been created containing the key to the account, located at `neardev/dev-account`. To make the next few steps easier, we're going to set an environment variable containing this development account id and use that when copy/pasting commands.
Run this command to the environment variable:

```bash
source neardev/dev-account.env
```

You can tell if the environment variable is set correctly if your command line prints the account name after this command:
```bash
echo $CONTRACT_NAME
```

The next command will call the contract's `set_status` method:

```bash
near call $CONTRACT_NAME set_status '{"message": "aloha!"}' --accountId $CONTRACT_NAME
```

To retrieve the message from the contract, call `get_status` with the following:

```bash
near view $CONTRACT_NAME get_status '{"account_id": "'$CONTRACT_NAME'"}'
```

### Standard deploy
In this option, the smart contract will get deployed to a specific account created with the NEAR Wallet.

If you do not have a NEAR account, please create one with [NEAR Wallet](https://wallet.testnet.near.org).

Make sure you have credentials saved locally for the account you want to deploy the contract to. To perform this run the following `near-cli` command:

```
near login
```

Deploy the contract:

```bash
near deploy --wasmFile res/status_message.wasm --accountId YOUR_ACCOUNT_NAME
```

Set a status for your account:

```bash
near call YOUR_ACCOUNT_NAME set_status '{"message": "aloha friend"}' --accountId YOUR_ACCOUNT_NAME
```

Get the status:

```bash
near view YOUR_ACCOUNT_NAME get_status '{"account_id": "YOUR_ACCOUNT_NAME"}'
```

Note that these status messages are stored per account in a `HashMap`. See `src/lib.rs` for the code. We can try the same steps with another account to verify.
**Note**: we're adding `NEW_ACCOUNT_NAME` for the next couple steps.

There are two ways to create a new account:
 - the NEAR Wallet (as we did before)
 - `near create_account NEW_ACCOUNT_NAME --masterAccount YOUR_ACCOUNT_NAME`

Now call the contract on the first account (where it's deployed):

```bash
near call YOUR_ACCOUNT_NAME set_status '{"message": "bonjour"}' --accountId NEW_ACCOUNT_NAME
```

```bash
near view YOUR_ACCOUNT_NAME get_status '{"account_id": "NEW_ACCOUNT_NAME"}'
```

Returns `bonjour`.

Make sure the original status remains:

```bash
near view YOUR_ACCOUNT_NAME get_status '{"account_id": "YOUR_ACCOUNT_NAME"}'
```

## Testing
To test run:
```bash
cargo test --package status-message -- --nocapture
```

'''
'''--- pay-on-use-contract/borsh.js ---
const borsh = require("borsh");

class Assignable {
  constructor(properties) {
    Object.keys(properties).map((key) => {
      this[key] = properties[key];
    });
  }
}

class StatusMessage extends Assignable {}

class Record extends Assignable {}

const schema = new Map([
  [StatusMessage, { kind: "struct", fields: [["records", [Record]]] }],
  [
    Record,
    {
      kind: "struct",
      fields: [
        ["k", "string"],
        ["v", "string"],
      ],
    },
  ],
]);

const stateKey = "U1RBVEU=";
console.log(Buffer.from(stateKey, "base64"));
console.log(Buffer.from(stateKey, "base64").toString());
const stateValue =
  "AgAAAA8AAABhbGljZS50ZXN0Lm5lYXIFAAAAaGVsbG8NAAAAYm9iLnRlc3QubmVhcgUAAAB3b3JsZA==";
const stateValueBuffer = Buffer.from(stateValue, "base64");
let statusMessage = borsh.deserialize(schema, StatusMessage, stateValueBuffer);
console.log(statusMessage);

console.log(
  Buffer.from(borsh.serialize(schema, statusMessage)).toString("base64")
);
statusMessage.records.push(new Record({ k: "alice.near", v: "hello world" }));
console.log(statusMessage);

console.log(
  Buffer.from(borsh.serialize(schema, statusMessage)).toString("base64")
);

'''
'''--- pay-on-use-contract/integration-tests/rs/Cargo.toml ---
[package]
name = "rust-status-message-integration-tests"
version = "1.0.0"
publish = false
edition = "2018"

[dev-dependencies]
anyhow = "1.0"
borsh = "0.9"
maplit = "1.0"
near-units = "0.2.0"
# arbitrary_precision enabled for u128 types that workspaces requires for Balance types
serde_json = { version = "1.0", features = ["arbitrary_precision"] }
tokio = { version = "1.18.1", features = ["full"] }
tracing = "0.1"
tracing-subscriber = { version = "0.3.11", features = ["env-filter"] }
workspaces = "0.2.1"
pkg-config = "0.3.1"

[[example]]
name = "integration-tests"
path = "src/tests.rs"

'''
'''--- pay-on-use-contract/integration-tests/rs/src/tests.rs ---
use serde_json::json;
use near_units::parse_near;
use workspaces::prelude::*; 
use workspaces::{network::Sandbox, Account, Contract, Worker};

const WASM_FILEPATH: &str = "../../res/status_message.wasm";

#[tokio::main]
async fn main() -> anyhow::Result<()> {
    let worker = workspaces::sandbox().await?;
    let wasm = std::fs::read(WASM_FILEPATH)?;
    let contract = worker.dev_deploy(&wasm).await?;

    // create accounts
    let owner = worker.root_account();
    let alice = owner
    .create_subaccount(&worker, "alice")
    .initial_balance(parse_near!("30 N"))
    .transact()
    .await?
    .into_result()?;

    // begin tests  
    test_set_message(&owner, &alice, &contract, &worker).await?;
    test_null_messages(&owner, &alice, &contract, &worker).await?;
    test_differing_statuses(&owner, &alice, &contract, &worker).await?;
    Ok(())
}   

async fn test_set_message(
    owner: &Account,
    user: &Account,
    contract: &Contract,
    worker: &Worker<Sandbox>,
) -> anyhow::Result<()> {
    user
        .call(&worker, contract.id(), "set_status")
        .args_json(json!({ "message": "hello" }))?
        .transact()
        .await?;

    let alice_status: String = owner
        .call(&worker, contract.id(), "get_status")
        .args_json(json!({ "account_id": user.id() }))?
        .transact()
        .await?
        .json()?;

    assert_eq!(alice_status, "hello");
    println!("      Passed ✅ set get message");
    Ok(())
}

async fn test_null_messages(
    owner: &Account,
    user: &Account,
    contract: &Contract,
    worker: &Worker<Sandbox>,
) -> anyhow::Result<()> {
    let owner_status: Option<String> = user
        .call(&worker, contract.id(), "get_status")
        .args_json(json!({ "account_id": owner.id() }))?
        .transact()
        .await?
        .json()?;

    assert_eq!(owner_status, None);
    println!("      Passed ✅ get nonexistent message");
    Ok(())
}

async fn test_differing_statuses(
    owner: &Account,
    user: &Account,
    contract: &Contract,
    worker: &Worker<Sandbox>,
) -> anyhow::Result<()> {
    owner
        .call(&worker, contract.id(), "set_status")
        .args_json(json!({ "message": "world" }))?
        .transact()
        .await?;

    let alice_status: String = owner
        .call(&worker, contract.id(), "get_status")
        .args_json(json!({ "account_id": user.id() }))?
        .transact()
        .await?
        .json()?;

    assert_eq!(alice_status, "hello");

    let owner_status: String = owner
        .call(&worker, contract.id(), "get_status")
        .args_json(json!({ "account_id": owner.id() }))?
        .transact()
        .await?
        .json()?;

    assert_eq!(owner_status, "world");
    println!("      Passed ✅ root and alice have different statuses");
    Ok(())
}
'''
'''--- pay-on-use-contract/integration-tests/ts/main.ava.ts ---
import { Worker, NEAR, NearAccount } from "near-workspaces";
import anyTest, { TestFn } from "ava";

const test = anyTest as TestFn<{
  worker: Worker;
  accounts: Record<string, NearAccount>;
}>;

test.beforeEach(async (t) => {
  // Init the worker and start a Sandbox server
  const worker = await Worker.init();

  // deploy contract
  const root = worker.rootAccount;
  const contract = await root.createAndDeploy(
    root.getSubAccount("rust-counter").accountId,
    "./res/status_message.wasm",
    { initialBalance: NEAR.parse("30 N").toJSON() }
  );

  // some test accounts
  const alice = await root.createSubAccount("alice", {
    initialBalance: NEAR.parse("30 N").toJSON(),
  });
  const bob = await root.createSubAccount("bob", {
    initialBalance: NEAR.parse("30 N").toJSON(),
  });
  const charlie = await root.createSubAccount("charlie", {
    initialBalance: NEAR.parse("30 N").toJSON(),
  });

  // Save state for test runs, it is unique for each test
  t.context.worker = worker;
  t.context.accounts = { root, contract, alice, bob, charlie };
});

test.afterEach(async (t) => {
  // Stop Sandbox server
  await t.context.worker.tearDown().catch((error) => {
    console.log("Failed to stop the Sandbox:", error);
  });
});

test("set get message", async (t) => {
  const { root, contract, alice, bob, charlie } = t.context.accounts;
  await alice.call(contract, "set_status", { message: "hello" });
  const aliceStatus = await contract.view("get_status", { account_id: alice });
  t.is(aliceStatus, "hello");
});

test("get nonexistent message", async (t) => {
  const { root, contract, alice, bob, charlie } = t.context.accounts;
  const message: null = await contract.view("get_status", {
    account_id: root,
  });
  t.is(message, null);
});

test("root and alice have different statuses", async (t) => {
  const { root, contract, alice } = t.context.accounts;
  await root.call(contract, "set_status", { message: "world" });
  const rootStatus = await contract.view("get_status", { account_id: root });
  t.is(rootStatus, "world");
  const aliceStatus = await contract.view("get_status", { account_id: alice });
  t.is(aliceStatus, null);
});

'''
'''--- pay-on-use-contract/package.json ---
{
  "name": "rust-status-message-builder",
  "version": "1.0.0",
  "description": "Compiles NEAR Protocol example of setting and retrieving a status message per NEAR account",
  "scripts": {
    "build": "rustup target add wasm32-unknown-unknown && cargo build --target wasm32-unknown-unknown --release",
    "build:web": "parcel build ./frontend/index.html --public-url ./ --no-minify",
    "postbuild": "cp ./target/wasm32-unknown-unknown/release/status_message.wasm ./res/",
    "deploy:dev": "npm run build && near dev-deploy res/status_message.wasm",
    "dev": "npm run deploy:dev && npm start",
    "start": "npm run build && npm run build:web && env-cmd -f ./neardev/dev-account.env parcel ./frontend/index.html",
    "test": "npm run test:unit && npm run test:integration",
    "test:unit": "cargo test -- --nocapture",
    "test:integration": "npm run test:integration:rs && npm run test:integration:ts",
    "test:integration:rs": "npm run build && npm run postbuild && cd integration-tests/rs && cargo run --example integration-tests",
    "test:integration:ts": "npm run build && npm run postbuild && ava --verbose"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/near-examples/rust-status-message.git"
  },
  "keywords": [
    "near-protocol",
    "blockchain",
    "rust",
    "smart-contract"
  ],
  "author": "Mike Purvis",
  "license": "(MIT AND Apache-2.0)",
  "bugs": {
    "url": "https://github.com/near-examples/rust-status-message/issues"
  },
  "homepage": "https://github.com/near-examples/rust-status-message#readme",
  "dependencies": {
    "big.js": "^5.2.2",
    "borsh": "^0.4.0",
    "env-cmd": "^10.1.0",
    "near-api-js": "^0.43.1",
    "prop-types": "^15.7.2",
    "react": "^17.0.2",
    "react-dom": "^17.0.2",
    "regenerator-runtime": "^0.13.9"
  },
  "devDependencies": {
    "@babel/core": "^7.14.0",
    "@babel/preset-env": "^7.14.2",
    "@babel/preset-react": "^7.13.13",
    "cssnano": "^5.0.7",
    "gh-pages": "^3.1.0",
    "parcel-bundler": "^1.12.5",
    "postcss": "^8.3.6",
    "sass": "^1.37.0",
    "near-workspaces": "^2.0.0",
    "ava": "^4.2.0",
    "typescript": "^4.6.4",
    "ts-node": "^10.7.0"
  },
  "resolutions": {
    "@babel/preset-env": "7.13.8"
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

'''
'''--- pay-on-use-contract/src/lib.rs ---
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::collections::LookupMap;
use near_sdk::{env, near_bindgen, AccountId, ext_contract, PromiseResult};
near_sdk::setup_alloc!();

const ROCKETO_CONTRACT: &str = "streaming-r-v2.dcversus.testnet";

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct PayOnUse {
    deposits: LookupMap<AccountId, u128>,
}

/// Helper structure for keys of the persistent collections.
#[derive(BorshSerialize)]
pub enum StorageKey {
    Deposits,
}

impl Default for PayOnUse {
    fn default() -> Self {
        Self {
            deposits: LookupMap::new(StorageKey::Deposits.try_to_vec().unwrap()),
        }
    }
}

// define the methods we'll use on the other contract
#[ext_contract(ext_ft)]
pub trait RocketoContract {
    fn pause_stream(&mut self, stream_id: String);
    fn start_stream(&mut self, stream_id: String);
}

// define methods we'll use as callbacks on our contract
#[ext_contract(ext_self)]
pub trait MyContract {
    fn my_callback(&self) -> String;
}

#[near_bindgen]
impl PayOnUse {
    #[payable]
    pub fn deposit(&mut self) {
        let account_id = env::signer_account_id();
        let deposit = env::attached_deposit();

        self.deposits.insert(&account_id, &deposit);
    }

    pub fn pause_stream(&self, stream_id: String) {
        ext_ft::pause_stream(
            stream_id,
            &ROCKETO_CONTRACT,
            5,
            100000000000000,
        ).then(ext_self::my_callback(
            &env::current_account_id(), // this contract's account id
            1, // yocto NEAR to attach to the callback
            1_000_000_000_000 // gas to attach to the callback
        ));
    }

    pub fn my_callback(&self) -> String {
        assert_eq!(
            env::promise_results_count(),
            1,
            "This is a callback method"
        );

        // handle the result from the cross contract call this method is a callback for
        match env::promise_result(0) {
            PromiseResult::NotReady => unreachable!(),
            PromiseResult::Failed => "oops!".to_string(),
            PromiseResult::Successful(result) => {
                "Wow!".to_string()
            },
        }
    }
}

#[cfg(not(target_arch = "wasm32"))]
#[cfg(test)]
mod tests {
    use super::*;
    use near_sdk::MockedBlockchain;
    use near_sdk::{testing_env, VMContext};

    // fn get_context(input: Vec<u8>, is_view: bool) -> VMContext {
    //     VMContext {
    //         current_account_id: "alice_near".to_string(),
    //         signer_account_id: "bob_near".to_string(),
    //         signer_account_pk: vec![0, 1, 2],
    //         predecessor_account_id: "carol_near".to_string(),
    //         input,
    //         block_index: 0,
    //         block_timestamp: 0,
    //         account_balance: 0,
    //         account_locked_balance: 0,
    //         storage_usage: 0,
    //         attached_deposit: 0,
    //         prepaid_gas: 10u64.pow(18),
    //         random_seed: vec![0, 1, 2],
    //         is_view,
    //         output_data_receivers: vec![],
    //         epoch_height: 0,
    //     }
    // }
    //
    // #[test]
    // fn set_get_message() {
    //     let context = get_context(vec![], false);
    //     testing_env!(context);
    //     let mut contract = StatusMessage::default();
    //     contract.set_status("hello".to_string());
    //     assert_eq!(
    //         "hello".to_string(),
    //         contract.get_status("bob_near".to_string()).unwrap()
    //     );
    // }
    //
    // #[test]
    // fn get_nonexistent_message() {
    //     let context = get_context(vec![], true);
    //     testing_env!(context);
    //     let contract = StatusMessage::default();
    //     assert_eq!(None, contract.get_status("francis.near".to_string()));
    // }
}

'''
'''--- public/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

'''
'''--- public/manifest.json ---
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

'''
'''--- public/robots.txt ---
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

'''
'''--- src/assets/logo-black.svg ---
<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#24272a"/><stop offset=".42" stop-color="#24272a" stop-opacity="0"/><stop offset=".59" stop-color="#24272a" stop-opacity="0"/><stop offset=".81" stop-color="#24272a"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#24272a"/></svg>
'''
'''--- src/assets/logo-white.svg ---
<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#fff"/><stop offset=".42" stop-color="#fff" stop-opacity="0"/><stop offset=".59" stop-color="#fff" stop-opacity="0"/><stop offset=".81" stop-color="#fff"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#fff"/></svg>
'''
'''--- src/components/ActionPage/index.css ---

'''
'''--- src/components/ActionPage/index.js ---
import React, {useEffect} from 'react'
import './index.css'
import {useNavigate} from "react-router-dom";
import PageWrapper from "../PageWrapper";

export function ActionPage() {
    const navigate = useNavigate()

    useEffect(() => {
        if (window.walletConnection.isSignedIn()) {
            navigate("/")
        }
    }, [navigate])

    return (
        <PageWrapper>
            <div>
                Page with your functionality
            </div>
        </PageWrapper>
    )
}

'''
'''--- src/components/Loading/assets/CarLoader.svg ---
<svg width="394" height="29" viewBox="0 0 394 29" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M323.196 16.7293C323.196 15.5317 323.196 14.3342 323.196 13.1366C323.196 12.8933 322.855 12.3509 323.072 12.1341C323.316 11.89 324.905 12.0987 325.13 12.0987C328.337 12.0987 331.516 11.939 334.729 11.939C335.606 11.939 336.495 11.7793 337.328 11.7793C338.03 11.7793 338.682 10.9836 339.164 10.5019C340.415 9.25113 341.576 7.93065 342.828 6.67844C343.84 5.66599 344.685 4.20121 345.791 3.31631C346.109 3.0615 346.669 3.3518 347.148 3.28083C348.543 3.07421 350.014 2.88275 351.424 2.83727C352.534 2.80148 353.618 2.51792 354.733 2.51792C355.617 2.51792 356.641 2.44783 357.527 2.34937C358.366 2.25612 359.202 2.07015 360.047 2.03888C360.935 2.00599 360.577 1.84485 361.235 2.5534C362.057 3.43785 362.774 4.34558 363.666 5.15262C364.193 5.62977 364.784 6.10173 365.281 6.5986C365.736 7.05375 366.151 7.53973 366.593 7.98248C366.812 8.20086 366.92 8.73066 367.303 8.74539C368.667 8.79785 369.986 9.28931 371.348 9.46395C372.555 9.61865 373.924 9.61862 375.092 9.94299C375.662 10.1014 376.325 10.0741 376.848 10.3067C377.451 10.5744 377.487 10.0685 377.487 10.8212C377.487 12.6309 377.487 14.4406 377.487 16.2503" stroke="black" stroke-linecap="round"/>
<path d="M323.037 17.0488C324.58 17.0488 326.124 17.0488 327.667 17.0488C327.964 17.0488 329.821 17.2141 329.894 16.96C329.957 16.7393 329.743 16.2841 329.743 16.0108C329.743 15.4954 329.856 15.4785 330.222 15.1326C331.11 14.2945 332.53 13.4123 333.735 14.0503C334.993 14.7162 334.938 15.63 335.013 16.8891C335.035 17.2715 346.212 17.0488 347.184 17.0488C350.351 17.0488 353.602 16.8891 356.729 16.8891C357.53 16.8891 358.332 16.8891 359.133 16.8891C359.782 16.8891 360.328 16.9264 360.951 17.0399C361.536 17.1461 361.445 17.0327 361.04 16.7294" stroke="black" stroke-linecap="round"/>
<path d="M360.88 16.5697C361.223 15.0076 363.026 13.3761 364.713 13.3761C366.412 13.3761 364.676 16.41 366.558 16.41C367.787 16.41 368.976 16.889 370.222 16.889C371.073 16.889 371.925 16.889 372.777 16.889C373.522 16.889 374.267 16.889 375.012 16.889C375.537 16.889 377.292 17.1728 376.529 16.41" stroke="black" stroke-linecap="round"/>
<path d="M363.914 15.7712C362.881 17.1922 362.057 20.8869 364.872 20.7213C365.573 20.6801 365.802 18.0723 365.831 17.5277C365.904 16.1312 364.982 16.2869 363.914 15.9309" stroke="black" stroke-linecap="round"/>
<path d="M333.096 16.5696C332.073 16.5696 331.715 16.5115 331.056 17.2438C330.371 18.0049 330.235 19.3085 329.584 20.0825C329.103 20.6533 329.264 21.6532 329.264 22.3535C329.264 23.4227 329.961 23.4358 330.861 23.4358C333.746 23.4358 335.64 16.0906 333.096 16.0906" stroke="black" stroke-linecap="round"/>
<path d="M361.04 3.79543C360.259 3.79543 358.898 3.51898 358.246 4.02608C357.968 4.24184 357.66 4.37283 357.403 4.62931C357.195 4.83719 357.543 4.89144 357.687 5.14383C357.983 5.6611 358.411 6.13056 358.681 6.66965C358.918 7.14446 359.395 7.50196 359.568 7.98257C359.722 8.41194 360.113 8.73301 360.233 9.15354C360.452 9.91999 360.9 9.86323 361.617 9.86323C362.583 9.86323 364.442 9.8881 365.227 9.26C365.551 9.00075 366.528 8.90515 366.948 8.90515" stroke="black" stroke-linecap="round"/>
<path d="M321.652 15.6701C317.91 14.4227 315.156 12.7873 311.863 10.6626C309.392 9.06805 306.324 7.58908 304.238 5.504C303.391 4.6566 302.312 3.6406 301.269 3.08829C299.928 2.37819 300.848 2.12316 300.263 3.44058C297.921 8.70817 294.842 14.3596 293.594 19.9731C292.695 24.0216 291.776 21.8004 289.845 19.646C288.023 17.6141 286.921 14.9107 284.963 12.9525C283.068 11.0575 280.998 9.38507 279.075 7.5171C278.611 7.0664 273.186 1.84394 273.186 4.14516C273.186 6.6491 272 9.53233 271.123 11.8452C270.22 14.2254 268.226 17.0193 267.776 19.495C267.344 21.8725 267.56 23.8325 266.745 26.1886C266.304 27.4626 266.505 28.1729 265.235 27.4467C263.915 26.6925 262.216 25.3879 261.183 24.2761C258.964 21.8859 256.525 19.2669 254.163 17.029C251.811 14.8013 248.806 13.3539 246.463 11.1407C244.949 9.71094 242.869 8.35608 241.254 7.06415C239.991 6.05364 238.239 3.36365 236.297 3.91869C235.812 4.05709 236.105 5.80108 235.693 6.25891C234.497 7.58774 233.719 9.35146 232.421 10.6877C230.836 12.3199 228.8 13.779 227.439 15.5695C227.052 16.0791 225.839 17.4428 225.174 17.4819C221.947 17.6718 220.802 15.8271 218.606 13.6319C216.784 11.8093 216.473 8.75897 214.857 6.96349C213.419 5.36614 213.11 3.0611 210.906 2.08174C209.814 1.59616 208.93 1.62879 207.736 1.62879C206.022 1.62879 206.298 2.41896 205.018 2.98763C204.406 3.25969 203.335 4.96726 203.08 5.60466C202.594 6.82084 201.178 7.05382 200.262 7.97004C196.718 11.5146 193.773 15.5252 191.405 19.9983C190.058 22.5426 187.363 22.0114 184.862 22.0114C180.068 22.0114 176.436 21.7386 172.859 18.1613C169.532 14.8344 164.746 13.778 162.668 9.10241C161.596 6.69183 160.414 5.05716 158.138 3.79287C155.961 2.5834 155.464 0.7229 152.703 0.7229C147.493 0.7229 147.43 8.74917 145.204 12.2479C143.767 14.5061 134.288 22.7763 133.679 21.5584" stroke="black" stroke-linecap="round"/>
<path d="M134.585 21.5585C132.06 21.5585 128.317 22.1796 125.979 21.1055C123.802 20.1055 121.649 19.0016 119.638 17.7084C117.476 16.3186 115.196 15.376 113.85 12.9525C113.136 11.668 111.761 7.34094 111.007 9.9832C110.733 10.9404 108.588 11.8539 107.861 12.2983C105.07 14.0037 102.019 16.5295 99.708 18.8408C99.2795 19.2693 97.21 22.2631 96.5374 22.2631C96.0677 22.2631 96.5374 21.3236 96.5374 20.8539C96.5374 20.1074 96.5374 19.3609 96.5374 18.6143C96.5374 16.4508 94.9834 13.6031 92.8132 12.8519C88.4904 11.3555 84.581 13.6021 81.3637 16.3244C79.8355 17.6176 76.0564 22.4644 74.1166 22.4644C72.7641 22.4644 70.387 15.6292 69.9142 14.2107C69.0168 11.5183 67.5605 7.98181 65.5106 5.93184C63.3185 3.73973 63.3055 2.55154 60.7546 5.25242C57.7665 8.41633 55.4421 11.7273 53.0797 15.4186C51.622 17.6963 48.8639 19.0811 47.9715 21.6591C47.267 23.6944 47.4823 28.6688 44.675 25.8615C41.3044 22.4909 38.4118 18.6924 35.0373 15.3179C33.779 14.0595 32.7995 12.6271 31.5396 11.3672C31.2838 11.1114 29.9543 9.28461 29.9543 9.78189" stroke="black" stroke-linecap="round"/>
<path d="M29.9196 9.51255C29.2035 7.82742 28.3052 6.66961 26.4543 7.19845C25.7643 7.39558 24.7753 7.37725 24.0588 7.41939C23.3317 7.46216 22.9512 8.09615 22.4889 8.46597C21.8976 8.93906 21.5578 10.0779 21.1284 10.7219C20.1554 12.1814 19.2968 13.8037 18.5119 15.3734C17.7226 16.9522 17.0242 18.4716 16.57 20.1876C16.3337 21.0803 15.8353 22.5503 15.1629 23.2227C14.5187 23.8669 13.7635 24.4416 12.9535 24.8972C11.3717 25.787 9.10109 27.472 7.26705 27.5137C5.25591 27.5594 2.91542 26.5629 2.29 24.3739C1.97361 23.2666 1.03411 22.1939 1.03411 20.9784C1.03411 18.6632 0.502666 15.6355 1.40622 13.4895C2.09772 11.8472 2.49931 6.47471 2.49931 8.25665" stroke="black" stroke-linecap="round"/>
<path d="M377.564 13.4884C378.598 13.513 384.968 15.4368 384.968 13.4884C384.968 11.7394 386.366 10.6456 387.282 9.27202C387.708 8.63319 388.108 8.0023 388.555 7.35665C388.996 6.71907 389.139 5.77502 389.647 5.20989C390.303 4.48186 391.678 5.2293 391.678 6.08402C391.678 7.81426 391.853 9.51512 391.91 11.226C391.948 12.3673 391.526 14.2524 391.961 15.3395C392.369 16.359 392.604 18.1934 392.604 19.2731" stroke="black" stroke-linecap="round"/>
</svg>

'''
'''--- src/components/Loading/index.css ---
.loader-hover {
    position: absolute;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    background-color: #444444;
    opacity: 0.7;
    display: flex;
    justify-content: center;
    align-items: center;
}

.loader {
    max-width: 422px;
    position: relative;
}

.main-loader-bar {
    overflow: hidden;
    object-fit: cover;
    object-position: 100% 0;
    height: 73px;
    background-color: white;
    opacity: 1;
}
'''
'''--- src/components/Loading/index.js ---
import CarLoader from './assets/CarLoader.svg'
import './index.css'
import {useInterval} from "../../utils/hooks";
import {useState} from "react";

export default function Loading() {
    const [width, setWidth] = useState(0)
    useInterval(() => {
        switch (width) {
            case 0:
                setWidth(25);
                break;
            case 25:
                setWidth(50);
                break;
            case 50:
                setWidth(75);
                break;
            case 75:
                setWidth(100);
                break;
            default:
                setWidth(0)
                break;
        }
    },500)

    return (
        <div className="loader-hover">
            <div className="loader">
                <img
                    style={{
                        width: width + '%'
                    }}
                    className="main-loader-bar"
                    src={CarLoader}
                    alt=""
                />
            </div>
        </div>
    )
}
'''
'''--- src/components/Login/index.css ---
.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

'''
'''--- src/components/Login/index.js ---
import 'regenerator-runtime/runtime'
import React, {useEffect} from 'react'

import './index.css'
import {login} from "../../near-connection/utils";
import {useNavigate} from "react-router-dom";

export function Login() {
    // const [isLoading, setIsLoading] = useState(false)
    const navigate = useNavigate()

    useEffect(() => {
        if (window.walletConnection.isSignedIn()) {
            console.log('true');
            navigate("/validate")
        }
    }, [navigate])

    const handleLogin = async () => {
        await login()
    }

    return (
        <main>
            <h1>Pay on use demo</h1>
            <p style={{textAlign: 'center'}}>
                Idea: pay_on_use, so you pay only when you use service
            </p>
            <p style={{textAlign: 'center'}}>
                <button onClick={handleLogin}>Sign in</button>
            </p>
            <p>
                An application contains that parts:
            </p>
            <ol>
                <li>Login</li>
                <li>Wrap Near</li>
                <li>Add minutes</li>
                <li>Start stream</li>
                <li>Dont want to pay? Pause stream</li>
            </ol>
            <p>
                But the idea is deeper, so:
                <ol>
                    <li>
                        Create NPM module for React for pay on use, with connection to rocketo
                    </li>
                    <li>
                        NPM module that will automatically handle when you on use page and when not and pause stream when you off and start when you want
                    </li>
                    <li>
                        It will open to us new world of pay on use schema
                    </li>
                </ol>
            </p>
            {/*{isLoading && <Loading />}*/}
        </main>
    )
}

'''
'''--- src/components/MainPage/index.css ---
.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

.manipulate-stream, .money-inputs {
  display: flex;
  flex-direction: column;
  align-items: center;
}

.manipulate-stream > button {
  margin-top: 10px;
}

.wnear > input, .minutes > input {
  margin-right: 5px;
}
'''
'''--- src/components/MainPage/index.js ---
import './index.css';
import PageWrapper from "../PageWrapper";
import {useEffect, useState} from "react";
import {utils} from "near-api-js";
import {useNavigate} from "react-router-dom";

export function MainPage() {
    const [balance, setBalance] = useState(0);
    const [loading, setLoading] = useState(true);
    const [value, setValue] = useState(0);
    const [wrappedNear, setWrappedNear] = useState(0);
    const [stream, setStream] = useState(null);
    const [activeStream, setActiveStream] = useState(false);

    const navigate = useNavigate()

    useEffect(() => {
        const getStream = async () => {
            const streams = await window.contract.get_account_outgoing_streams({
                "account_id": window.accountId,
                "from": 0,
                "limit": 5,
            });
            console.log('streams', streams);
            const currentStream = streams.find((strm) => strm.receiver_id === "pay-on-use.testnet" && typeof strm.status === "string")
            if (currentStream) {
                setStream(currentStream)
                setActiveStream(currentStream.status === 'Active')
            }
        }
        const getBalance = async () => {
            const returnedBalanced = await window.ftContract.ft_balance_of({
                "account_id": window.accountId
            });
            setBalance(returnedBalanced)
        }
        Promise.all([getBalance(), getStream()]).then(() => setLoading(false))
        window.onclose = pauseStream;
    }, [])

    const depositStream = async () => {
        setLoading(true);
        const msg = stream ? {
            Deposit: {
                request: {
                    stream_id: stream.id
                }
            }
        } : {
            Create: {
                request: {
                    owner_id: window.accountId,
                    receiver_id: "pay-on-use.testnet",
                    tokens_per_sec: 6 * 385802469135802469, // 1 month for 6 NEAR
                },
            },
        }
        await window.ftContract.ft_transfer_call(
            {
                receiver_id: "streaming-r-v2.dcversus.testnet",
                amount: (value * 385802469135802469 * 60).toString(),
                memo: "Roketo transfer",
                msg: JSON.stringify(msg),
            },
            200000000000000,
            1
        );
        setLoading(false);
    }

    const startStream = async () => {
        if (!activeStream) {
            setLoading(true)
            await window.contract.start_stream({
                "stream_id": stream.id,
            }, 200000000000000, 1);
            setLoading(false)
        }
    }

    const pauseStream = async () => {
        if (activeStream) {
            setLoading(true)
            await window.payOnUseContract.pause_stream({
                "stream_id": stream.id,
            }, 300000000000000);
            stream.status = "Pause"
            setStream(stream)
            setActiveStream(false)
            setLoading(false)
        }
    }

    const openAction = () => {
        navigate('/action')
    }

    const wrapNear = async () => {
        await window.ftContract.near_deposit({}, 200000000000000, utils.format.parseNearAmount(wrappedNear.toString()));
    }

    console.log('currentStream', stream);
    console.log('activeStream', activeStream);

    return (
        <PageWrapper isLoading={loading}>
            <div className="App">
                <p>MainPage</p>
                <div className="">
                    <p>
                        Stream Status: {stream?.status}
                    </p>
                    <p>
                        You have minutes left: {stream?.balance ? stream?.balance / 385802469135802469 / 60 : 0}
                    </p>
                    <p>
                        wNear: {Math.floor(utils.format.formatNearAmount(balance.toString()))}
                    </p>
                    <div className="money-inputs">
                        <div className="wnear">
                            <p>
                                Add wnear
                            </p>
                            <input
                                type="number"
                                step={1}
                                min={0}
                                value={wrappedNear}
                                onChange={(e) => setWrappedNear(e.target.value)}
                            />
                            <button onClick={wrapNear}>
                                Wrap near
                            </button>
                        </div>
                        <div className="minutes">
                            <p>
                                Add minutes
                            </p>
                            <input
                                type="number"
                                step={1}
                                min={0}
                                value={value}
                                onChange={(e) => setValue(e.target.value)}
                            />
                            <button onClick={depositStream}>
                                Add minutes
                            </button>
                        </div>
                    </div>
                </div>
                <div className="manipulate-stream">
                    <button onClick={startStream} disabled={!stream || activeStream}>
                        Start pay
                    </button>
                    <button onClick={pauseStream} disabled={!stream || !activeStream}>
                        Pause pay
                    </button>
                    <button onClick={openAction} disabled={!stream || !activeStream}>
                        Start using application
                    </button>
                </div>
            </div>
        </PageWrapper>
    );
}

'''
'''--- src/components/PageWrapper/index.css ---
.page-wrapper {
    position: relative;
}

.header-logo {
    height: 80%;
    width: 10%;
    margin-left: 15px;
    margin-top: 10px;
}

.header {
    display: flex;
    justify-content: space-between;
    height: 60px;
    border-bottom: 1px dotted black;
}

.header-profile-div {
    display: flex;
    align-items: center;
}
'''
'''--- src/components/PageWrapper/index.js ---
import 'regenerator-runtime/runtime'
import React, {useEffect} from 'react'

import './index.css'
import {logout} from "../../near-connection/utils";
import {useNavigate} from "react-router-dom";
import Loading from "../Loading";
import SupportUkraine from './assets/support-ukraine.png';

export default function PageWrapper({ children, isLoading }) {
    const navigate = useNavigate()
    useEffect(() => {
        if (window.walletConnection.isSignedIn()) {
        } else {
            navigate("/")
        }
    }, [navigate])

    const handleLogout = () => {
        logout()
        navigate("/")
    }

    return (
        <div className="page-wrapper">
            <header className="header">
                <img
                    className="header-logo"
                    src={SupportUkraine}
                    alt=""
                />
                <div className="header-profile-div">
                    <div>{window.accountId}</div>
                    <button
                        className="link"
                        style={{float: 'right', height: '100%'}}
                        onClick={handleLogout}
                    >
                        Sign out
                    </button>
                </div>
            </header>
            {children}
            {isLoading && <Loading />}
        </div>
    )
}

'''
'''--- src/index.css ---
* {
  box-sizing: border-box;
}

html {
  --bg: #efefef;
  --fg: #1e1e1e;
  --gray: #555;
  --light-gray: #ccc;
  --shadow: #e6e6e6;
  --success: rgb(90, 206, 132);
  --primary: #FF585D;
  --secondary: #0072CE;

  /*background-color: var(--bg);*/
  background-color: #E5E5E5;
  /*color: var(--fg);*/
  font-family: -apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica,Arial,sans-serif;
  font-size: calc(0.9em + 0.5vw);
  line-height: 1.3;
}

body {
  margin: 0;
  padding: 0;
}

main {
  margin: 0 auto;
  max-width: 25em;
}

h1 {
  background-image: url(assets/logo-black.svg);
  background-position: center 1em;
  background-repeat: no-repeat;
  background-size: auto 1.5em;
  margin-top: 0;
  padding: 3.5em 0 0.5em;
  text-align: center;
}

h2, h3 {
  margin: 0;
}

a,
.link {
  color: var(--primary);
  text-decoration: none;
}
a:hover,
a:focus,
.link:hover,
.link:focus {
  text-decoration: underline;
}
a:active,
.link:active {
  color: var(--secondary);
}

button, input {
  font: inherit;
  outline: none;
}

button {
  /*background-color: var(--secondary);*/
  background-color: white;
  border-radius: 5px;
  border: 1px solid black;
  color: black;
  cursor: pointer;
  padding: 0.3em 0.75em;
  transition: transform 30ms;
}

button:hover, button:focus {
  box-shadow: 0 0 10em rgba(255, 255, 255, 0.2) inset;
  background-color: rgba(0, 0, 0, 0.3);
}
button:active {
  box-shadow: 0 0 10em rgba(0, 0, 0, 0.1) inset;
}
button.link {
  background: none;
  border: none;
  box-shadow: none;
  display: inline;
}
[disabled] button, button[disabled] {
  box-shadow: none;
  background-color: rgba(0, 0, 0, 0.1);
  color: gray;
  cursor: not-allowed;
  transform: none;
}
[disabled] button {
  text-indent: -900em;
  width: 2em;
  position: relative;
}
[disabled] button:after {
  content: " ";
  display: block;
  width: 0.8em;
  height: 0.8em;
  border-radius: 50%;
  border: 2px solid #fff;
  border-color: var(--fg) transparent var(--fg) transparent;
  animation: loader 1.2s linear infinite;
  position: absolute;
  top: 0.45em;
  right: 0.5em;
}
@keyframes loader {
  0% { transform: rotate(0deg) }
  100% { transform: rotate(360deg) }
}

fieldset {
  border: none;
  padding: 2em 0;
}

input {
  /*background-color: var(--shadow);*/
  border: 1px dotted black;
  border-radius: 5px 0 0 5px;
  caret-color: var(--primary);
  color: inherit;
  padding: 0.25em 1em;
}
input::selection {
  background-color: var(--secondary);
  color: #efefef;
}
input:focus {
  box-shadow: 0 0 10em rgba(0, 0, 0, 0.02) inset;
}

code {
  color: var(--gray);
}

li {
  padding-bottom: 1em;
}

aside {
  animation: notify ease-in-out 10s;
  background-color: var(--shadow);
  border-radius: 5px;
  bottom: 0;
  font-size: 0.8em;
  margin: 1em;
  padding: 1em;
  position: fixed;
  transform: translateY(10em);
  right: 0;
}
aside footer {
  display: flex;
  font-size: 0.9em;
  justify-content: space-between;
  margin-top: 0.5em;
}
aside footer *:first-child {
  color: var(--success);
}
aside footer *:last-child {
  color: var(--gray);
}
@keyframes notify {
  0% { transform: translateY(10em) }
  5% { transform: translateY(0) }
  95% { transform: translateY(0) }
  100% { transform: translateY(10em) }
}

@media (prefers-color-scheme: dark) {
  html {
    --bg: #1e1e1e;
    --fg: #efefef;
    --gray: #aaa;
    --shadow: #2a2a2a;
    --light-gray: #444;
  }
  h1 {
    background-image: url(assets/logo-white.svg);
  }
  input:focus {
    box-shadow: 0 0 10em rgba(255, 255, 255, 0.02) inset;
  }
}

'''
'''--- src/index.js ---
import React from 'react';
import './index.css';
import {initContract} from "./near-connection/utils";
import ReactDOM from "react-dom/client";
import {
    Routes,
    Route, HashRouter,
} from "react-router-dom";
import {Login} from "./components/Login";
import {MainPage} from "./components/MainPage";
import {ActionPage} from "./components/ActionPage";
import * as serviceWorkerRegistration from './serviceWorkerRegistration';

const root = ReactDOM.createRoot(document.getElementById('root'));

window.nearInitPromise = initContract()
    .then(() => {
        root.render(
            <React.StrictMode>
                <HashRouter>
                    <Routes>
                        <Route path="/" element={<Login />} />
                        <Route path="/validate" element={<MainPage />} />
                        <Route path="/action" element={<ActionPage />} />
                    </Routes>
                </HashRouter>
            </React.StrictMode>
        )
    })
    .catch((error) => {
        console.error(error)
    })

serviceWorkerRegistration.unregister();

'''
'''--- src/near-connection/config.js ---
const CONTRACT_NAME = process.env.CONTRACT_NAME ||'streaming-r-v2.dcversus.testnet'

function getConfig(env) {
  switch (env) {

  // case 'mainnet':
  //   return {
  //     networkId: 'mainnet',
  //     nodeUrl: 'https://rpc.mainnet.near.org',
  //     contractName: CONTRACT_NAME,
  //     walletUrl: 'https://wallet.near.org',
  //     helperUrl: 'https://helper.mainnet.near.org',
  //     explorerUrl: 'https://explorer.mainnet.near.org',
  //   }
  case 'production':
  case 'development':
  case 'testnet':
    return {
      networkId: 'testnet',
      nodeUrl: 'https://rpc.testnet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.testnet.near.org',
      helperUrl: 'https://helper.testnet.near.org',
      explorerUrl: 'https://explorer.testnet.near.org',
    }
  case 'betanet':
    return {
      networkId: 'betanet',
      nodeUrl: 'https://rpc.betanet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.betanet.near.org',
      helperUrl: 'https://helper.betanet.near.org',
      explorerUrl: 'https://explorer.betanet.near.org',
    }
  case 'local':
    return {
      networkId: 'local',
      nodeUrl: 'http://localhost:3030',
      keyPath: `${process.env.HOME}/.near/validator_key.json`,
      walletUrl: 'http://localhost:4000/wallet',
      contractName: CONTRACT_NAME,
    }
  case 'test':
  case 'ci':
    return {
      networkId: 'shared-test',
      nodeUrl: 'https://rpc.ci-testnet.near.org',
      contractName: CONTRACT_NAME,
      masterAccount: 'test.near',
    }
  case 'ci-betanet':
    return {
      networkId: 'shared-test-staging',
      nodeUrl: 'https://rpc.ci-betanet.near.org',
      contractName: CONTRACT_NAME,
      masterAccount: 'test.near',
    }
  default:
    throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`)
  }
}

module.exports = getConfig

'''
'''--- src/near-connection/utils.js ---
import { connect, Contract, keyStores, WalletConnection } from 'near-api-js'
import getConfig from './config'

const nearConfig = getConfig(process.env.NODE_ENV || 'development')

// Initialize contract & set global variables
export async function initContract() {
  window.Buffer = window.Buffer || require("buffer").Buffer;
  // Initialize connection to the NEAR testnet
  const near = await connect(Object.assign({ deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() } }, nearConfig))

  // Initializing Wallet based Account. It can work with NEAR testnet wallet that
  // is hosted at https://wallet.testnet.near.org
  window.walletConnection = new WalletConnection(near)

  // Getting the Account ID. If still unauthorized, it's just empty string
  window.accountId = window.walletConnection.getAccountId()

  window.contract = await new Contract(
      window.walletConnection.account(),
      nearConfig.contractName,
      {
        // View methods are read only. They don't modify the state, but usually return some value.
        viewMethods: [
          "get_stream",
          "get_account",
          "get_account_incoming_streams",
          "get_account_outgoing_streams",
        ],
        // Change methods can modify the state. But you don't receive the returned value when called.
        changeMethods: [
          "start_stream",
          "pause_stream",
          "stop_stream",
          "withdraw",
        ],
      }
  );

  window.ftContract = await new Contract(
      window.walletConnection.account(),
      "wrap.testnet",
      {
        viewMethods: ["ft_balance_of"],
        changeMethods: ["ft_transfer_call", "near_deposit"],
      }
  );

  window.payOnUseContract = await new Contract(
      window.walletConnection.account(),
      "pay-on-use.testnet",
      {
        viewMethods: [],
        changeMethods: ["deposit", "pause_stream"],
      }
  );

  // // Initializing our contract APIs by contract name and configuration
  // window.contract = await new Contract(window.walletConnection.account(), nearConfig.contractName, {
  //   // View methods are read only. They don't modify the state, but usually return some value.
  //   viewMethods: [],
  //   // Change methods can modify the state. But you don't receive the returned value when called.
  //   changeMethods: [],
  // })
}

export function logout() {
  window.walletConnection.signOut()
  // reload page
  // window.location.replace(window.location.origin + window.location.pathname)
}

export function login() {
  // Allow the current app to make calls to the specified contract on the
  // user's behalf.
  // This works by creating a new access key for the user's account and storing
  // the private key in localStorage.
  window.walletConnection.requestSignIn("pay-on-use.testnet")
}

'''
'''--- src/service-worker.js ---
/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate } from 'workbox-strategies';

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false;
    } // If this is a URL that starts with /_, skip.

    if (url.pathname.startsWith('/_')) {
      return false;
    } // If this looks like a URL for a resource, because it contains // a file extension, skip.

    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    } // Return true to signal that we want to use the handler.

    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png'), // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: 'images',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

// Any other custom service worker logic can go here.

'''
'''--- src/serviceWorkerRegistration.js ---
// This optional code is used to register a service worker.
// register() is not called by default.

// This lets the app load faster on subsequent visits in production, and gives
// it offline capabilities. However, it also means that developers (and users)
// will only see deployed updates on subsequent visits to a page, after all the
// existing tabs open on the page have been closed, since previously cached
// resources are updated in the background.

// To learn more about the benefits of this model and instructions on how to
// opt-in, read https://cra.link/PWA

const isLocalhost = Boolean(
  window.location.hostname === 'localhost' ||
    // [::1] is the IPv6 localhost address.
    window.location.hostname === '[::1]' ||
    // 127.0.0.0/8 are considered localhost for IPv4.
    window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)
);

export function register(config) {
  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {
    // The URL constructor is available in all browsers that support SW.
    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);
    if (publicUrl.origin !== window.location.origin) {
      // Our service worker won't work if PUBLIC_URL is on a different origin
      // from what our page is served on. This might happen if a CDN is used to
      // serve assets; see https://github.com/facebook/create-react-app/issues/2374
      return;
    }

    window.addEventListener('load', () => {
      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;

      if (isLocalhost) {
        // This is running on localhost. Let's check if a service worker still exists or not.
        checkValidServiceWorker(swUrl, config);

        // Add some additional logging to localhost, pointing developers to the
        // service worker/PWA documentation.
        navigator.serviceWorker.ready.then(() => {
          console.log(
            'This web app is being served cache-first by a service ' +
              'worker. To learn more, visit https://cra.link/PWA'
          );
        });
      } else {
        // Is not localhost. Just register service worker
        registerValidSW(swUrl, config);
      }
    });
  }
}

function registerValidSW(swUrl, config) {
  navigator.serviceWorker
    .register(swUrl)
    .then((registration) => {
      registration.onupdatefound = () => {
        const installingWorker = registration.installing;
        if (installingWorker == null) {
          return;
        }
        installingWorker.onstatechange = () => {
          if (installingWorker.state === 'installed') {
            if (navigator.serviceWorker.controller) {
              // At this point, the updated precached content has been fetched,
              // but the previous service worker will still serve the older
              // content until all client tabs are closed.
              console.log(
                'New content is available and will be used when all ' +
                  'tabs for this page are closed. See https://cra.link/PWA.'
              );

              // Execute callback
              if (config && config.onUpdate) {
                config.onUpdate(registration);
              }
            } else {
              // At this point, everything has been precached.
              // It's the perfect time to display a
              // "Content is cached for offline use." message.
              console.log('Content is cached for offline use.');

              // Execute callback
              if (config && config.onSuccess) {
                config.onSuccess(registration);
              }
            }
          }
        };
      };
    })
    .catch((error) => {
      console.error('Error during service worker registration:', error);
    });
}

function checkValidServiceWorker(swUrl, config) {
  // Check if the service worker can be found. If it can't reload the page.
  fetch(swUrl, {
    headers: { 'Service-Worker': 'script' },
  })
    .then((response) => {
      // Ensure service worker exists, and that we really are getting a JS file.
      const contentType = response.headers.get('content-type');
      if (
        response.status === 404 ||
        (contentType != null && contentType.indexOf('javascript') === -1)
      ) {
        // No service worker found. Probably a different app. Reload the page.
        navigator.serviceWorker.ready.then((registration) => {
          registration.unregister().then(() => {
            window.location.reload();
          });
        });
      } else {
        // Service worker found. Proceed as normal.
        registerValidSW(swUrl, config);
      }
    })
    .catch(() => {
      console.log('No internet connection found. App is running in offline mode.');
    });
}

export function unregister() {
  if ('serviceWorker' in navigator) {
    navigator.serviceWorker.ready
      .then((registration) => {
        registration.unregister();
      })
      .catch((error) => {
        console.error(error.message);
      });
  }
}

'''
'''--- src/utils/hooks.js ---
import { useEffect, useRef } from 'react';

export function useDidMount() {
    const mountRef = useRef(false);

    useEffect(() => { mountRef.current = true }, []);

    return () => mountRef.current;
}

export function useInterval(callback, delay) {
    const savedCallback = useRef();

    // Remember the latest callback.
    useEffect(() => {
        savedCallback.current = callback;
    }, [callback]);

    // Set up the interval.
    useEffect(() => {
        function tick() {
            savedCallback.current();
        }
        if (delay !== null) {
            let id = setInterval(tick, delay);
            return () => clearInterval(id);
        }
    }, [delay]);
}
'''