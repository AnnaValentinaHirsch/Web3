*GitHub Repository "NotEternal/nearContracts"*

'''--- .gitpod.yml ---
tasks:
  - init: npm dev
    command: npm run dev
ports:
  - port: 1234
    onOpen: open-browser

'''
'''--- .prettierrc.json ---
{
  "semi": false,
  "singleQuote": true,
  "tabWidth": 2,
  "printWidth": 100,
  "useTabs": false,
  "trailingComma": "none"
}

'''
'''--- README.md ---
# Smart contracts for NEAR

'''
'''--- contract/babel.config.json ---
{
  "plugins": [
    "near-sdk-js/lib/build-tools/near-bindgen-exporter",
    [
      "@babel/plugin-proposal-decorators",
      {
        "version": "legacy"
      }
    ]
  ],
  "presets": [
    "@babel/preset-typescript"
  ]
}
'''
'''--- contract/package.json ---
{
  "name": "contracts",
  "version": "1.0.0",
  "license": "(MIT AND Apache-2.0)",
  "type": "module",
  "scripts": {
    "build": "near-sdk-js build src/index.ts build/index.wasm",
    "deploy": "export $(cat .env.account) && npm run build && near deploy $CONTRACT_NAME build/index.wasm && near call $CONTRACT_NAME init --accountId $CONTRACT_NAME --deposit 1",
    "test": "echo use integration-tests"
  },
  "dependencies": {
    "near-cli": "^3.4.0",
    "near-sdk-js": "0.4.0-5"
  },
  "devDependencies": {
    "typescript": "^4.7.4"
  }
}

'''
'''--- contract/src/index.ts ---
import { NearBindgen, NearContract, near, call, view } from 'near-sdk-js'

interface Data {
  [k: string]: string | number | Data
}

@NearBindgen
class Ash extends NearContract {
  private data: Data

  constructor({ initData = {} }: { initData: Data }) {
    super()
    this.data = initData
  }

  default() {
    return new Ash({ initData: {} })
  }

  @view
  get_data(): Data {
    near.log(`The current data is:`, this.data)
    return this.data
  }

  @call
  set_data({ data }: { data: Data }): void {
    near.log(`Set new data:`, data)
    this.data = data
  }

  @call
  set_data_by_key({ key, value }: { key: string; value: string | number | Data }) {
    near.log(`Set a value for key(${key}):`, value)
    this.data[key] = value
  }
}

'''
'''--- contract/tsconfig.json ---
{
  "compilerOptions": {
    "experimentalDecorators": true,
    "target": "es5",
    "noEmit": true
  },
  "exclude": [
    "node_modules"
  ],
}
'''
'''--- integration-tests/package.json ---
{
  "name": "ava-testing",
  "version": "1.0.0",
  "license": "(MIT AND Apache-2.0)",
  "scripts": {
    "test": "ava"
  },
  "devDependencies": {
    "@types/bn.js": "^5.1.0",
    "@types/node": "^18.6.2",
    "ava": "^4.2.0",
    "near-workspaces": "^3.1.0",
    "ts-node": "^10.8.0",
    "typescript": "^4.7.2"
  },
  "dependencies": {}
}

'''
'''--- integration-tests/src/main.ava.ts ---
import { Worker, NEAR, NearAccount } from 'near-workspaces';
import anyTest, { TestFn } from 'ava';

const test = anyTest as TestFn<{
  worker: Worker;
  accounts: Record<string, NearAccount>;
}>;

test.beforeEach(async (t) => {
  // Init the worker and start a Sandbox server
  const worker = await Worker.init();

  // Deploy contract
  const root = worker.rootAccount;
  const contract = await root.createSubAccount('test-account');
  // Get wasm file path from package.json test script in folder above
  await contract.deploy(
    process.argv[2],
  );
  // JavaScript contracts require calling 'init' function upon deployment
  await contract.call(contract, 'init', {});

  // Save state for test runs, it is unique for each test
  t.context.worker = worker;
  t.context.accounts = { root, contract };
});

test.afterEach(async (t) => {
  // Stop Sandbox server
  await t.context.worker.tearDown().catch((error) => {
    console.log('Failed to stop the Sandbox:', error);
  });
});

test('returns the default greeting', async (t) => {
  const { contract } = t.context.accounts;
  const message: string = await contract.view('get_greeting', {});
  t.is(message, 'Hello');
});

test('changes the message', async (t) => {
  const { root, contract } = t.context.accounts;
  await root.call(contract, 'set_greeting', { message: 'Howdy' });
  const message: string = await contract.view('get_greeting', {});
  t.is(message, 'Howdy');
});
'''
'''--- package.json ---
{
  "name": "near-contracts",
  "version": "1.0.0",
  "license": "(MIT AND Apache-2.0)",
  "private": true,
  "scripts": {
    "deploy": "cd contract && npm run deploy",
    "build": "npm run build:contract",
    "build:contract": "cd contract && npm run build",
    "test": "npm run test:unit && npm run test:integration",
    "test:unit": "cd contract && npm test",
    "test:integration": "npm run build:contract && cd integration-tests && npm test  -- -- \"./contract/build/hello_near.wasm\"",
    "deps-install": "npm install && cd contract && npm install && cd ../integration-tests && npm install && cd .."
  },
  "devDependencies": {
    "near-cli": "^3.3.0"
  },
  "dependencies": {}
}
'''