*GitHub Repository "adrianosingolani/near-roketo"*

'''--- config-overrides.js ---
const webpack = require("webpack")

module.exports = function override(config, env) {
  //do stuff with the webpack config...
  config.resolve.fallback = {
    ...config.resolve.fallback,
    stream: require.resolve("stream-browserify"),
    buffer: require.resolve("buffer"),
  }
  config.resolve.extensions = [...config.resolve.extensions, ".ts", ".js"]
  config.plugins = [
    ...config.plugins,
    new webpack.ProvidePlugin({
      process: "process/browser",
      Buffer: ["buffer", "Buffer"],
    }),
  ]
  // console.log(config.resolve)
  // console.log(config.plugins)

  return config
}
'''
'''--- public/index.html ---
<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="utf-8" />
  <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <meta name="theme-color" content="#000000" />
  <meta name="description" content="Web site created using create-react-app" />
  <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
  <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
  <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
  <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" />
  <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons" />
  <title>NNap</title>
</head>

<body>
  <noscript>You need to enable JavaScript to run this app.</noscript>
  <div id="root"></div>
  <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
</body>

</html>
'''
'''--- public/robots.txt ---
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

'''
'''--- src/App.js ---
import React from "react";

import Header from './components/Header';
import Info from "./components/Info";
import Rooms from "./components/Rooms";

import { Box } from "@mui/material";

function App() {
  return (
    <div className="App">
      <Header />
      <Box style={{margin: '0 1em'}}>
        <Info />
        <Rooms />
      </Box>
    </div>
  );
}

export default App;

'''
'''--- src/components/Collection.js ---
import React, { useState, useEffect } from 'react'

import {
  Typography,
  Box,
  Card,
  CardMedia,
} from '@mui/material'

import { nfts } from '../utils/nfts';

function Collection() {
  const [tokens, setTokens] = useState([])

  // useEffect(() => {
  //   console.log(tokens);
  //   console.log(tokens.some((t) => t.metadata.title === 'Lion'));
  // }, [tokens])

  useEffect(() => {
    getTokens()
  }, [])

  const getTokens = async () => {
    window.contract.nft_tokens_for_owner({
      account_id: window.accountId,
    })
      .then(res => {
        setTokens(res);
      })
      .catch(err => {
        console.log(err);
      })
  };

  return (
    <>
      <Typography variant='h4' sx={{marginBottom: 2}}>Collection</Typography>

      <Box sx={{ marginBottom: 4 }}>
        <Typography variant='overline'>Amphibians</Typography>
        <Box sx={{ display: 'flex', flexDirection: 'row', flexWrap: 'wrap' }}>
          {
            nfts.filter(nft => (nft.class === 'amphibians')).map((amphibian, i) => (
              <Card sx={{ width: '250px', padding: 1, border: '2px solid #777', marginRight: 2, marginBottom: 2 }} key={`amphibian_${i}`}>
                <CardMedia
                  component="img"
                  image={`https://adrianosingolani.github.io/near-zoo-nft/assets/${amphibian.title}.jpg`}
                  alt={amphibian.title}
                  sx={
                    tokens.some((t) => t.metadata.title === amphibian.title) ? null : { filter: 'grayscale(100%)', opacity: 0.35 }
                  }
                />
              </Card>
            ))
          }
        </Box>
      </Box>

      <Box sx={{ marginBottom: 4 }}>
        <Typography variant='overline'>Birds</Typography>
        <Box sx={{ display: 'flex', flexDirection: 'row', flexWrap: 'wrap' }}>
          {
            nfts.filter(nft => (nft.class === 'birds')).map((bird, i) => (
              <Card sx={{ width: '250px', padding: 1, border: '2px solid #777', marginRight: 2, marginBottom: 2 }} key={`bird_${i}`}>
                <CardMedia
                  component="img"
                  image={`https://adrianosingolani.github.io/near-zoo-nft/assets/${bird.title}.jpg`}
                  alt={bird.title}
                  sx={
                    tokens.some((t) => t.metadata.title === bird.title) ? null : { filter: 'grayscale(100%)', opacity: 0.35 }
                  }
                />
              </Card>
            ))
          }
        </Box>
      </Box>

      <Box sx={{ marginBottom: 4 }}>
        <Typography variant='overline'>Mammals</Typography>
        <Box sx={{ display: 'flex', flexDirection: 'row', flexWrap: 'wrap' }}>
          {
            nfts.filter(nft => (nft.class === 'mammals')).map((mammal, i) => (
              <Card sx={{ width: '250px', padding: 1, border: '2px solid #777', marginRight: 2, marginBottom: 2 }} key={`mammal_${i}`}>
                <CardMedia
                  component="img"
                  image={`https://adrianosingolani.github.io/near-zoo-nft/assets/${mammal.title}.jpg`}
                  alt={mammal.title}
                  sx={
                    tokens.some((t) => t.metadata.title === mammal.title) ? null : { filter: 'grayscale(100%)', opacity: 0.35 }
                  }
                />
              </Card>
            ))
          }
        </Box>
      </Box>

      <Box sx={{ marginBottom: 4 }}>
        <Typography variant='overline'>Reptiles</Typography>
        <Box sx={{ display: 'flex', flexDirection: 'row', flexWrap: 'wrap' }}>
          {
            nfts.filter(nft => (nft.class === 'reptiles')).map((reptile, i) => (
              <Card sx={{ width: '250px', padding: 1, border: '2px solid #777', marginRight: 2, marginBottom: 2 }} key={`reptile_${i}`}>
                <CardMedia
                  component="img"
                  image={`https://adrianosingolani.github.io/near-zoo-nft/assets/${reptile.title}.jpg`}
                  alt={reptile.title}
                  sx={
                    tokens.some((t) => t.metadata.title === reptile.title) ? null : { filter: 'grayscale(100%)', opacity: 0.35 }
                  }
                />
              </Card>
            ))
          }
        </Box>
      </Box>
    </>
  )
}

export default Collection
'''
'''--- src/components/Header.js ---
import React, { useEffect, useState } from 'react';
import { formatNearAmount } from 'near-api-js/lib/utils/format';

import { login, logout } from "../utils";

import {
  AppBar,
  Box,
  Toolbar,
  Typography,
  Button
} from '@mui/material/';

export default function ButtonAppBar() {
  const account = window.walletConnection.account();

  const [balance, setBalance] = useState(0)

  useEffect(() => {
    if (window.accountId && window.wrapContract) {
      window.wrapContract.ft_balance_of({
        account_id: `${window.accountId}`,
      })
        .then(balance => {
          setBalance(balance);
        })
        .catch(err => {
          console.log(err);
        });
    }
  }, []);

  return (
    <Box sx={{ flexGrow: 1 }}>
      <AppBar position="static">
        <Toolbar>
          <Typography variant="h6" component="div" sx={{ flexGrow: 1 }}>
            NNap
          </Typography>
          {account.accountId ? (
            <>
              <Box style={{display: 'flex', flexDirection: 'column', textAlign: 'right'}}>
                <Typography variant="caption">
                  {account.accountId}
                </Typography>
                <Typography variant="caption">
                  {formatNearAmount(balance, 4)} wNEAR
                </Typography>
              </Box>
              <Button sx={{ marginLeft: 2 }} variant="outlined" color="inherit" onClick={() => logout()}>Logout</Button>
            </>
          ) : (
            <Button color="inherit" onClick={() => login()}>Login</Button>
          )}
        </Toolbar>
      </AppBar>
    </Box>
  );
}
'''
'''--- src/components/Info.js ---
import React from 'react';

import {
  Box,
  Typography,
  List,
  ListItem,
  ListItemText,
  ListItemIcon,
  ImageList,
  ImageListItem
} from '@mui/material';

import WifiIcon from '@mui/icons-material/Wifi';
import ScheduleIcon from '@mui/icons-material/Schedule';
import LockIcon from '@mui/icons-material/Lock';
import ShowerIcon from '@mui/icons-material/Shower';
import SingleBedIcon from '@mui/icons-material/SingleBed';
import DoNotTouchIcon from '@mui/icons-material/DoNotTouch';

import FreeDrinksImage from '../assets/freedrinks.jpg';
import InsideSleepStationImage from '../assets/insidesleepstation.jpg';
import lobbyImage from '../assets/lobby.jpg';
import lockersImage from '../assets/lockers.jpg';
import sleepStationDetailImage from '../assets/sleepstationdetail.jpg';
import sleepStationsImage from '../assets/sleepstations.jpg';
import stairsImage from '../assets/stairs.jpg';
import storageImage from '../assets/storage.jpg';

const images = [
  {
    img: lobbyImage,
    title: 'Lobby',
  },
  {
    img: stairsImage,
    title: 'Stairs',
  },
  {
    img: lockersImage,
    title: 'Lockers',
  },
  {
    img: sleepStationsImage,
    title: 'Sleep stations',
  },
  {
    img: sleepStationDetailImage,
    title: 'Sleep station detail',
  },
  {
    img: InsideSleepStationImage,
    title: 'Inside station',
  },
  {
    img: storageImage,
    title: 'Storage inside sleep stations',
  },
  // {
  //   img: chargersImage,
  //   title: 'Phone charges',
  // },
  {
    img: FreeDrinksImage,
    title: 'Free drinks',
  },
];

function Info() {
  return (
    <Box style={{
      display: 'flex',
      flexDirection: 'row',
      // alignItems: 'center'
    }}>
      <Box style={{
        display: 'flex',
        flexDirection: 'column',
        // alignItems: 'center',
        // backgroundImage: `url('${mainImage}')`,
        // backgroundSize: '100%',
        // backgroundRepeat: 'no-repeat',
        // height: 475,
        // width: 675,
        // paddingTop: 42,
        marginTop: '1em',
        paddingRight: '1em',
        flex: 1
      }}>
        <Typography variant='h5'>Pay per minute bed and all day breakfast</Typography>

        <List style={{ marginTop: 16 }}>
          <ListItem disablePadding>
            <ListItemIcon><ScheduleIcon /></ListItemIcon>
            <ListItemText primary='Open 24/7' />
          </ListItem>
          <ListItem disablePadding>
            <ListItemIcon><DoNotTouchIcon /></ListItemIcon>
            <ListItemText primary='Contactless check in' />
          </ListItem>
          <ListItem disablePadding>
            <ListItemIcon><SingleBedIcon /></ListItemIcon>
            <ListItemText primary='Comfortable beds' />
          </ListItem>
          <ListItem disablePadding>
            <ListItemIcon><WifiIcon /></ListItemIcon>
            <ListItemText primary='Wi-fi' />
          </ListItem>
          <ListItem disablePadding>
            <ListItemIcon><LockIcon /></ListItemIcon>
            <ListItemText primary='Free locker' />
          </ListItem>
          <ListItem disablePadding>
            <ListItemIcon><ShowerIcon /></ListItemIcon>
            <ListItemText primary='Shared bathroom' />
          </ListItem>
        </List>
      </Box>

      <ImageList style={{flex: 2}} cols={4} rowHeight={180}>
        {images.map((item, index) => (
          <ImageListItem key={index}>
            <img
              src={`${item.img}?w=130&h=86&fit=crop&auto=format`}
              srcSet={`${item.img}?w=130&h=86&fit=crop&auto=format&dpr=2 2x`}
              alt={item.title}
              loading="lazy"
            />
          </ImageListItem>
        ))}
      </ImageList>
    </Box>
  )
}

export default Info
'''
'''--- src/components/Mint.js ---
import React, { useEffect, useState } from 'react';

import {
  Box,
  Button,
  Typography,
} from '@mui/material';

import { nfts } from '../utils/nfts';

const BN = require("bn.js")

function Mint() {
  const account = window.walletConnection.account();

  const mintNFT = async () => {
    const index = Math.floor(Math.random() * nfts.length);

    const { title, description } = nfts[index];

    const params = {
      token_id: `${window.accountId}-${title}-${Date.now()}`,
      metadata: {
        title: title,
        description: description,
        media: `https://adrianosingolani.github.io/near-zoo-nft/assets/${title}.jpg`,
      },
      receiver_id: window.accountId,
    }

    await window.contract.nft_mint(
      params,
      300000000000000,
      new BN("1000000000000000000000000")
    );
  };

  return (
    <Box sx={{ display: 'flex', flexDirection: 'column', justifyContent: 'center', marginY: 12 }}>
      <Typography variant='h6' align='center'>Collect NFTs to help the Kharkiv Zoo</Typography>
      <Box sx={{ width: '100%', display: 'flex', justifyContent: 'center' }}>
        <Button
          onClick={() => mintNFT()}
          disabled={account.accountId ? false : true}
          variant='contained'
          sx={{margin: 6}}
        >
          Mint NFT
        </Button>
      </Box>
    </Box>
  )
}

export default Mint
'''
'''--- src/components/Rooms.js ---
import React, { useEffect, useState } from 'react';
import getNearEnv from '../nearEnv';
import { parseNearAmount } from 'near-api-js/lib/utils/format';
import Big from 'big.js';
import moment from 'moment';

import {
  Box,
  Button,
  Typography,
  Card,
  CardMedia,
  CardContent,
  CardActions,
} from '@mui/material';

import sleepStationImage from '../assets/sleepstation.jpg';
import relaxationImage from '../assets/relaxation.jpg';
import restaurantImage from '../assets/restaurant.jpg';

const nearEnv = getNearEnv('testnet');

function Rooms() {
  const [disableButtons, setDisableButtons] = useState(true);
  const [outgoingStreams, setOutgoingStreams] = useState([]);

  useEffect(() => {
    if (window.accountId) setDisableButtons(false);
    else setDisableButtons(true);

    getAccountOutgoingStreams();
  }, []);

  const checkBooking = (room) => {
    // if (outgoingStreams.length > 0) {
    //   outgoingStreams.map(stream => {

    //     if (stream.description) {
    //       console.log(JSON.parse(stream.description));

    //       // if (stream.description.room === room) return true;
    //       // else return false;
    //     }
    //   })
    // }

    return false;
  }
  

  const createStream = (settings) => {
    const pricePerHour = parseNearAmount(settings.price.toString());
    const pricePerMinute = Big(pricePerHour).div(60).toFixed(0);
    const pricePerSecond = Big(pricePerHour).div(3600).toFixed(0);

    const amountToPay = Big(pricePerMinute).times(settings.minutes).toFixed(0);

    const args = {
      receiver_id: nearEnv.roketoAccount,
      amount: amountToPay,
      memo: 'memo',
      msg: JSON.stringify({
        Create: {
          request: {
            owner_id: window.accountId,
            receiver_id: nearEnv.dappAccount,
            tokens_per_sec: parseInt(pricePerSecond),
            description: JSON.stringify(settings)
          },
        },
      })
    }

    // console.log(settings);

    window.wrapContract.ft_transfer_call(
      args,
      300000000000000,
      1
    )
      .then(res => {
        console.log(res);
      })
      .catch(err => {
        console.log(err);
      })
  }

  const nearDeposit = () => {
    // console.log('nearDeposit');

    window.wrapContract.near_deposit(
      {},
      300000000000000,
      1
    )
  }

  const getAccountIncomingStreams = () => {
    window.roketoContract.get_account_incoming_streams({
      account_id: nearEnv.dappAccount,
      from: 0,
      limit: 10,
    })
      .then(res => {
        console.log(res);
      })
      .catch(err => {
        console.log(err);
      })
  }

  const getAccountOutgoingStreams = () => {
    window.roketoContract.get_account_outgoing_streams({
      account_id: window.accountId,
      from: 0,
      limit: 10,
    })
      .then(res => {
        // console.log(res);

        setOutgoingStreams(res);
      })
      .catch(err => {
        console.log(err);
      })
  }

  return (
    <Box>
      <Box style={{ display: 'flex', marginBottom: '1em' }}>
        <Card style={{ marginRight: '1em', flex: 1 }}>
          <CardMedia
            component='img'
            height='300'
            image={sleepStationImage}
            alt='Sleep station'
          />
          <CardContent>
            <Typography gutterBottom variant='h5' component='div'>
              Sleep station
            </Typography>
            <Typography variant='body1' color='text.secondary'>
              Absolute silence station with comfortable bed and pillow under artificial twinkling stars and live plants.
            </Typography>
            <Typography variant='subtitle2' color='text.secondary'>
              <ul style={{ paddingInlineStart: '1em' }}>
                <li>2 NEAR per hour</li>
                <li>Minimum of 15 minutes</li>
                <li>5 spaces left</li>
              </ul>
            </Typography>
          </CardContent>
          <CardActions>
          <Button 
              size='small' 
              variant='contained'
              onClick={() => createStream({
                room: 'sleepstation',
                price: 2,
                minutes: 15
              })}
              // disabled={() => {return false}}
            >
              Book
            </Button>
          </CardActions>
        </Card>

        <Card style={{ marginRight: '1em', flex: 1 }}>
          <CardMedia
            component='img'
            height='300'
            image={relaxationImage}
            alt='Relaxation room'
          />
          <CardContent>
            <Typography gutterBottom variant='h5' component='div'>
              Relaxation room
            </Typography>
            <Typography variant='body1' color='text.secondary'>
              Casual relaxation space filled with cozy moon pods and yoga mats for meditation classes.
            </Typography>
            <Typography variant='subtitle2' color='text.secondary'>
              <ul style={{ paddingInlineStart: '1em' }}>
                <li>1 NEAR per hour</li>
                <li>Minimum of 15 minutes</li>
                <li>5 spaces left</li>
              </ul>
            </Typography>
          </CardContent>
          <CardActions>
            <Button 
              size='small' 
              variant='contained'
              onClick={() => createStream({
                room: 'relaxation',
                price: 1,
                minutes: 15
              })}
              // disabled={() => {checkBooking('relaxation')}}
            >
              Book
            </Button>
          </CardActions>
        </Card>

        <Card style={{ flex: 1 }}>
          <CardMedia
            component='img'
            height='300'
            image={restaurantImage}
            alt='Restaurant'
          />
          <CardContent>
            <Typography gutterBottom variant='h5' component='div'>
              Restaurant
            </Typography>
            <Typography variant='body1' color='text.secondary'>
              All you can eat restaurant serving healthy meals, juices, coffee and tea.
            </Typography>
            <Typography variant='subtitle2' color='text.secondary'>
              <ul style={{ paddingInlineStart: '1em' }}>
                <li>3 NEAR per hour</li>
                <li>Minimum of 30 minutes</li>
                <li>5 spaces left</li>
              </ul>
            </Typography>
          </CardContent>
          <CardActions>
            <Button
              size='small'
              variant='contained'
              onClick={() => createStream({
                room: 'restaurant',
                price: 3,
                minutes: 30
              })}
              // disabled={() => checkBooking('restaurant')}
            >Book</Button>
          </CardActions>
        </Card>
      </Box>

      {/* <Box style={{ marginBottom: '1em' }}>
        <Button disabled={disableButtons} variant='contained' onClick={() => nearDeposit()}>{`Wrap (1 NEAR -> 1 wNEAR)`}</Button>
        <Button disabled={disableButtons} variant='contained' onClick={() => createStream()}>Create stream</Button>
        <Button disabled={disableButtons} variant='contained' onClick={() => getAccountIncomingStreams()}>Get incoming streams (dApp)</Button>
        <Button disabled={disableButtons} variant='contained' onClick={() => getAccountOutgoingStreams()}>Get outgoing streams (User)</Button>
      </Box> */}
    </Box>
  )
}

export default Rooms;
'''
'''--- src/index.js ---
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

import { CssBaseline } from "@mui/material";
import { ThemeProvider, createTheme } from '@mui/material/styles';

import { initializeContract } from "./utils";

const darkTheme = createTheme({
  palette: {
    mode: 'dark',
  },
  components: {
    // Name of the component
    MuiButton: {
      styleOverrides: {
        // Name of the slot
        root: {
          // Some CSS
          margin: '8px',
        },
      },
    },
  },
});

window.nearInitPromise = initializeContract()
  .then(() => {
    const root = ReactDOM.createRoot(document.getElementById('root'));
    root.render(
      <React.StrictMode>
        <ThemeProvider theme={darkTheme}>
          <CssBaseline />
          <App />
        </ThemeProvider>
      </React.StrictMode>
    );
  })
  .catch(console.error);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();

'''
'''--- src/nearEnv.js ---
const ROKETO_CONTRACT = 'streaming-r-v2.dcversus.testnet';
const WRAP_CONTRACT = 'wrap.testnet'
const DAPP_ACCOUNT = 'adriano.testnet';

function getNearEnv(env) {
  switch (env) {
    case 'mainnet': 
      return {
        networkId: 'mainnet',
        nodeUrl: 'https://rpc.mainnet.near.org',
        roketoAccount: ROKETO_CONTRACT,
        wrapAccount: WRAP_CONTRACT,
        dappAccount: DAPP_ACCOUNT,
        walletUrl: 'https://wallet.near.org',
        helperUrl: 'https://helper.mainnet.near.org',
        explorerUrl: 'https://explorer.mainnet.near.org',
      };
    case 'testnet': 
      return {
        networkId: 'testnet',
        nodeUrl: 'https://rpc.testnet.near.org',
        roketoAccount: ROKETO_CONTRACT,
        wrapAccount: WRAP_CONTRACT,
        dappAccount: DAPP_ACCOUNT,
        walletUrl: 'https://wallet.testnet.near.org',
        helperUrl: 'https://helper.testnet.near.org',
        explorerUrl: 'https://explorer.testnet.near.org',
      };
    default:
      throw Error(`Unknown environment "${env}".`);
  }
}

export default getNearEnv;
'''
'''--- src/reportWebVitals.js ---
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

'''
'''--- src/utils.js ---
import { connect, Contract, keyStores, WalletConnection } from 'near-api-js';
// import { formatNearAmount } from 'near-api-js/lib/utils/format';
import getNearEnv from './nearEnv';

const nearEnv = getNearEnv('testnet');

export async function initializeContract() {
  const near = await connect(Object.assign({ deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() } }, nearEnv));
  window.walletConnection = new WalletConnection(near);
  window.accountId = window.walletConnection.getAccountId();
  window.roketoContract = new Contract(
    window.walletConnection.account(),
    nearEnv.roketoAccount,
    {
      viewMethods: ['get_stream', 'get_account', 'get_account_incoming_streams', 'get_account_outgoing_streams', 'get_stats'],
      changeMethods: ['start_stream', 'pause_stream', 'stop_stream', 'withdraw'],
    }
  );

  window.wrapContract = new Contract(
    window.walletConnection.account(),
    nearEnv.wrapAccount,
    {
      viewMethods: ['ft_balance_of'],
      changeMethods: ['near_deposit', 'ft_transfer_call', 'ft_transfer'],
    }
  );
}

// export async function accountBalance() {
//   return formatNearAmount(
//     (await window.walletConnection.account().getAccountBalance()).total,
//     2
//   );
// }

export async function getAccountId() {
  return window.walletConnection.getAccountId();
}

export function login() {
  window.walletConnection.requestSignIn(nearEnv.dappAccount);
}

export function logout() {
  window.walletConnection.signOut();
  window.location.reload();
}
'''