*GitHub Repository "g1ts/dApp-demo-on-NEAR"*

'''--- contract/README.md ---

'''
'''--- contract/as-pect.config.js ---
module.exports = require('near-sdk-as/imports')

'''
'''--- contract/asconfig.json ---
{
  "extends": "near-sdk-as/asconfig.json"
}

'''
'''--- contract/assembly/__tests__/as-pect.d.ts ---
/// <reference types="@as-pect/assembly/types/as-pect" />
'''
'''--- contract/assembly/__tests__/main.spec.ts ---
import { get_value, set_value } from '../index';
import { context, storage } from 'near-sdk-as';

describe("tic-tac-toe ", () => {
    it("should set and get value", () => {
        set_value(10)
        expect(get_value()).toBe(10, "value mismatch");
    });
});
'''
'''--- contract/assembly/as_types.d.ts ---
/// <reference types="near-sdk-as/assembly/as_types" />
'''
'''--- contract/assembly/index.ts ---
import { context, logging, PersistentUnorderedMap } from "near-sdk-as";
import { Game, GameState, GameInfo } from "./models";
import { AccountId, GameInfoBoard } from "./types";

const games = new PersistentUnorderedMap<u32, Game>('games')

export function createGame(): u32 {
  const activeGame = getActiveGame(context.sender)
  assert(activeGame.id === 0, `already joined in game ${activeGame.id}`)
  const game = new Game()
  games.set(game.id, game)
  return game.id
}

export function joinGame(id: u32): AccountId {
  const activeGame = getActiveGame(context.sender)
  assert(activeGame.id === 0, `already joined in game ${activeGame.id}`)
  const game = games.getSome(id)
  game.join()
  games.set(game.id, game)
  return game.activePlayer
}

export function surrender(): void {
  const activeGames = _getActiveGames(context.sender)
  assert(activeGames.length > 0, `has no active games`)
  const activeGame = activeGames[0]
  activeGame.surrender()
  games.set(activeGame.id, activeGame)
}

export function getNewGames(): Array<GameInfo> {
  const contractGames = games.values()

  const newGames: Array<GameInfo> = []
  for (let i = 0; i < contractGames.length; i++) {
    const game = contractGames[i];
    if (game.state === GameState.NewGame) {
      newGames.push(game2gameInfo(game))
    }
  }
  return newGames
}

function _getActiveGames(accountId: AccountId): Array<Game> {
  const contractGames = games.values()
  const activeGames: Array<Game> = []
  for (let i = 0; i < contractGames.length; i++) {
    const game = contractGames[i];
    if ((game.state === GameState.NewGame || game.state === GameState.Active)
      && (game.creator == accountId || game.opponent == accountId)) {
        activeGames.push(game)
    }
  }
  return activeGames
}

export function getActiveGame(accountId: AccountId): GameInfo {
  const activeGames = _getActiveGames(accountId)
  if(activeGames.length>0) return game2gameInfo(activeGames[0])
  return new GameInfo()
}
export function getGame(id: u32): GameInfo {
  return game2gameInfo(games.getSome(id))
}

function game2gameInfo(game: Game): GameInfo {
  return {
    id: game.id,
    creator: game.creator,
    opponent: game.opponent,
    state: game.state,
    activePlayer: game.activePlayer,
    board: getGameBoard(game.id),
    winner: game.winner
  }
}

export function getGameBoard(id: u32): GameInfoBoard {
  const board: GameInfoBoard = []
  const gameBoard = games.getSome(id).board
  for (let i = 0; i < gameBoard.length; i++) {
    const line: Array<AccountId> = []
    for (let j = 0; j < gameBoard[i].length; j++) {
      line.push(gameBoard[i][j])
    }
    board.push(line)
  }
  return board
}

export function turn(id: u32, x: u8, y: u8): bool {
  logging.log(`turn x:${x} y:${y}`)
  const game = games.getSome(id)
  const isGameOver = game.turn(x, y)
  games.set(game.id, game);
  return isGameOver
}

'''
'''--- contract/assembly/models.ts ---
import { PersistentVector, context, RNG, logging } from "near-sdk-as";
import { AccountId, GameInfoBoard } from "./types";

export enum GameState {
    NewGame,
    Active,
    GameOver
}

type BoardLine = PersistentVector<AccountId>
type Board = PersistentVector<BoardLine>

const EmptyCellValue: AccountId = ''

@nearBindgen
export class GameInfo {
    id: u32;
    creator: AccountId = '';
    opponent: AccountId = '';
    activePlayer: AccountId = '';
    winner: AccountId = '';
    state: GameState;
    board: GameInfoBoard;
}

@nearBindgen
export class Game {
    id: u32 = 0;
    creator: AccountId = '';
    opponent: AccountId = '';
    activePlayer: AccountId;
    winner: AccountId = '';
    state: GameState;
    board: Board;
    constructor() {
        this.creator = context.sender
        const rng = new RNG<u32>(1, u32.MAX_VALUE);
        this.id = rng.next();
        this.state = GameState.NewGame;
        this.board = new PersistentVector<BoardLine>(`b_${this.id}`)
        for (let i = 0; i < 3; i++) {
            const line = new PersistentVector<AccountId>(`l_${this.id}_${i}`)
            for (let j = 0; j < 3; j++) {
                line.push(EmptyCellValue)
            }
            this.board.push(line)
        }
        logging.log(`created new game '${this.id}'`)
    }

    join(): void {
        assert(this.state === GameState.NewGame, 'game has already started')
        assert((context.predecessor != this.creator), 'already joined')
        this.opponent = context.sender
        this.state = GameState.Active
        logging.log(`'${this.opponent}' join to game '${this.id}'`)

        const rng = new RNG<u32>(0, 1);
        const rnd = rng.next()
        this.activePlayer = (rnd === 0) ? this.creator : this.opponent
        logging.log(`turn '${this.activePlayer}'`)
    }

    // return true if game over
    turn(x: u8, y: u8): bool {
        assert(this.state === GameState.Active, 'game not active')
        assert((x < 3 && y < 3), 'out of range')
        const sender = context.sender
        logging.log(sender)
        assert((sender == this.activePlayer), `now it's '${this.activePlayer}' turn`)
        this.board[y].replace(x, sender)
        const winner = this.findWinner()
        if (winner != '' || !this.boardHasEmptyCells()) {
            this.winner = winner
            this.state = GameState.GameOver
            logging.log(`GameOver. Winner: '${this.winner}'`)
            return true
        }
        this.activePlayer = (this.activePlayer == this.opponent) ? this.creator : this.opponent
        return false
    }

    surrender(): void {
        assert(this.state == GameState.Active || this.state == GameState.NewGame, 'game is already over')
        const sender = context.sender
        if (sender == this.creator) {
            this.winner = this.opponent
        } else if (sender == this.opponent) {
            this.winner = this.creator
        }
        this.state = GameState.GameOver
    }

    boardHasEmptyCells(): bool {
        let c = 0
        const board = this.board
        for (let i = 0; i < board.length; i++) {
            const row = board[i];
            for (let j = 0; j < row.length; j++) {
                if (row[j] != '') c++
            }
        }
        return c < 9
    }

    findWinner(): AccountId {
        const board = this.board
        // check rows
        for (let y = 0; y < board.length; y++) {
            const line = board[y];
            if (line[0] != EmptyCellValue && line[0] == line[1] && line[1] == line[2]) {
                return line[0]
            }
        }

        // check columns
        for (let x = 0; x < 3; x++) {
            if (board[0][x] != EmptyCellValue && board[0][x] == board[1][x] && board[1][x] == board[2][x]) {
                return board[0][x]
            }
        }

        // check diagonals
        if (board[0][0] != EmptyCellValue && board[0][0] == board[1][1] && board[1][1] == board[2][2]) {
            return board[0][0]
        }
        if (board[2][0] != EmptyCellValue && board[2][0] == board[1][1] && board[1][1] == board[0][2]) {
            return board[2][0]
        }
        return ''
    }
}

'''
'''--- contract/assembly/tsconfig.json ---
{
  "extends": "assemblyscript/std/assembly.json",
  "include": [
    "./**/*.ts"
  ]
}
'''
'''--- contract/assembly/types.ts ---
import { u128 } from 'near-sdk-as'

// export type Balance = u128
// export type Duration = u128

export type AccountId = string
export type GameInfoBoard = Array<Array<AccountId>>
'''
'''--- contract/package.json ---
{
  "name": "tic-tac-toe_contract",
  "version": "1.0.0",
  "license": "ISC",
  "private": true,
  "scripts": {
    "build": "asb",
    "test": "asp --nologo"
  },
  "dependencies": {
    "near-sdk-as": "^3.2.3"
  }
}

'''
'''--- frontend/src/assets/css/milligram.css ---
/*!
  * Milligram v1.4.1
  * https://milligram.io
  *
  * Copyright (c) 2020 CJ Patoilo
  * Licensed under the MIT license
 */

 *,
 *:after,
 *:before {
   box-sizing: inherit;
 }
 
 html {
   box-sizing: border-box;
   font-size: 62.5%;
 }
 
 body {
   color: #606c76;
   font-family: 'Roboto', 'Helvetica Neue', 'Helvetica', 'Arial', sans-serif;
   font-size: 1.6em;
   font-weight: 300;
   letter-spacing: .01em;
   line-height: 1.6;
 }
 
 blockquote {
   border-left: 0.3rem solid #d1d1d1;
   margin-left: 0;
   margin-right: 0;
   padding: 1rem 1.5rem;
 }
 
 blockquote *:last-child {
   margin-bottom: 0;
 }
 
 .button,
 button,
 input[type='button'],
 input[type='reset'],
 input[type='submit'] {
   background-color: #9b4dca;
   border: 0.1rem solid #9b4dca;
   border-radius: .4rem;
   color: #fff;
   cursor: pointer;
   display: inline-block;
   font-size: 1.1rem;
   font-weight: 700;
   height: 3.8rem;
   letter-spacing: .1rem;
   line-height: 3.8rem;
   padding: 0 3.0rem;
   text-align: center;
   text-decoration: none;
   text-transform: uppercase;
   white-space: nowrap;
 }
 
 .button:focus, .button:hover,
 button:focus,
 button:hover,
 input[type='button']:focus,
 input[type='button']:hover,
 input[type='reset']:focus,
 input[type='reset']:hover,
 input[type='submit']:focus,
 input[type='submit']:hover {
   background-color: #606c76;
   border-color: #606c76;
   color: #fff;
   outline: 0;
 }
 
 .button[disabled],
 button[disabled],
 input[type='button'][disabled],
 input[type='reset'][disabled],
 input[type='submit'][disabled] {
   cursor: default;
   opacity: .5;
 }
 
 .button[disabled]:focus, .button[disabled]:hover,
 button[disabled]:focus,
 button[disabled]:hover,
 input[type='button'][disabled]:focus,
 input[type='button'][disabled]:hover,
 input[type='reset'][disabled]:focus,
 input[type='reset'][disabled]:hover,
 input[type='submit'][disabled]:focus,
 input[type='submit'][disabled]:hover {
   background-color: #9b4dca;
   border-color: #9b4dca;
 }
 
 .button.button-outline,
 button.button-outline,
 input[type='button'].button-outline,
 input[type='reset'].button-outline,
 input[type='submit'].button-outline {
   background-color: transparent;
   color: #9b4dca;
 }
 
 .button.button-outline:focus, .button.button-outline:hover,
 button.button-outline:focus,
 button.button-outline:hover,
 input[type='button'].button-outline:focus,
 input[type='button'].button-outline:hover,
 input[type='reset'].button-outline:focus,
 input[type='reset'].button-outline:hover,
 input[type='submit'].button-outline:focus,
 input[type='submit'].button-outline:hover {
   background-color: transparent;
   border-color: #606c76;
   color: #606c76;
 }
 
 .button.button-outline[disabled]:focus, .button.button-outline[disabled]:hover,
 button.button-outline[disabled]:focus,
 button.button-outline[disabled]:hover,
 input[type='button'].button-outline[disabled]:focus,
 input[type='button'].button-outline[disabled]:hover,
 input[type='reset'].button-outline[disabled]:focus,
 input[type='reset'].button-outline[disabled]:hover,
 input[type='submit'].button-outline[disabled]:focus,
 input[type='submit'].button-outline[disabled]:hover {
   border-color: inherit;
   color: #9b4dca;
 }
 
 .button.button-clear,
 button.button-clear,
 input[type='button'].button-clear,
 input[type='reset'].button-clear,
 input[type='submit'].button-clear {
   background-color: transparent;
   border-color: transparent;
   color: #9b4dca;
 }
 
 .button.button-clear:focus, .button.button-clear:hover,
 button.button-clear:focus,
 button.button-clear:hover,
 input[type='button'].button-clear:focus,
 input[type='button'].button-clear:hover,
 input[type='reset'].button-clear:focus,
 input[type='reset'].button-clear:hover,
 input[type='submit'].button-clear:focus,
 input[type='submit'].button-clear:hover {
   background-color: transparent;
   border-color: transparent;
   color: #606c76;
 }
 
 .button.button-clear[disabled]:focus, .button.button-clear[disabled]:hover,
 button.button-clear[disabled]:focus,
 button.button-clear[disabled]:hover,
 input[type='button'].button-clear[disabled]:focus,
 input[type='button'].button-clear[disabled]:hover,
 input[type='reset'].button-clear[disabled]:focus,
 input[type='reset'].button-clear[disabled]:hover,
 input[type='submit'].button-clear[disabled]:focus,
 input[type='submit'].button-clear[disabled]:hover {
   color: #9b4dca;
 }
 
 code {
   background: #f4f5f6;
   border-radius: .4rem;
   font-size: 86%;
   margin: 0 .2rem;
   padding: .2rem .5rem;
   white-space: nowrap;
 }
 
 pre {
   background: #f4f5f6;
   border-left: 0.3rem solid #9b4dca;
   overflow-y: hidden;
 }
 
 pre > code {
   border-radius: 0;
   display: block;
   padding: 1rem 1.5rem;
   white-space: pre;
 }
 
 hr {
   border: 0;
   border-top: 0.1rem solid #f4f5f6;
   margin: 3.0rem 0;
 }
 
 input[type='color'],
 input[type='date'],
 input[type='datetime'],
 input[type='datetime-local'],
 input[type='email'],
 input[type='month'],
 input[type='number'],
 input[type='password'],
 input[type='search'],
 input[type='tel'],
 input[type='text'],
 input[type='url'],
 input[type='week'],
 input:not([type]),
 textarea,
 select {
   -webkit-appearance: none;
   background-color: transparent;
   border: 0.1rem solid #d1d1d1;
   border-radius: .4rem;
   box-shadow: none;
   box-sizing: inherit;
   height: 3.8rem;
   padding: .6rem 1.0rem .7rem;
   width: 100%;
 }
 
 input[type='color']:focus,
 input[type='date']:focus,
 input[type='datetime']:focus,
 input[type='datetime-local']:focus,
 input[type='email']:focus,
 input[type='month']:focus,
 input[type='number']:focus,
 input[type='password']:focus,
 input[type='search']:focus,
 input[type='tel']:focus,
 input[type='text']:focus,
 input[type='url']:focus,
 input[type='week']:focus,
 input:not([type]):focus,
 textarea:focus,
 select:focus {
   border-color: #9b4dca;
   outline: 0;
 }
 
 select {
   background: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 30 8" width="30"><path fill="%23d1d1d1" d="M0,0l6,8l6-8"/></svg>') center right no-repeat;
   padding-right: 3.0rem;
 }
 
 select:focus {
   background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 30 8" width="30"><path fill="%239b4dca" d="M0,0l6,8l6-8"/></svg>');
 }
 
 select[multiple] {
   background: none;
   height: auto;
 }
 
 textarea {
   min-height: 6.5rem;
 }
 
 label,
 legend {
   display: block;
   font-size: 1.6rem;
   font-weight: 700;
   margin-bottom: .5rem;
 }
 
 fieldset {
   border-width: 0;
   padding: 0;
 }
 
 input[type='checkbox'],
 input[type='radio'] {
   display: inline;
 }
 
 .label-inline {
   display: inline-block;
   font-weight: normal;
   margin-left: .5rem;
 }
 
 .container {
   margin: 0 auto;
   max-width: 112.0rem;
   padding: 0 2.0rem;
   position: relative;
   width: 100%;
 }
 
 .row {
   display: flex;
   flex-direction: column;
   padding: 0;
   width: 100%;
 }
 
 .row.row-no-padding {
   padding: 0;
 }
 
 .row.row-no-padding > .column {
   padding: 0;
 }
 
 .row.row-wrap {
   flex-wrap: wrap;
 }
 
 .row.row-top {
   align-items: flex-start;
 }
 
 .row.row-bottom {
   align-items: flex-end;
 }
 
 .row.row-center {
   align-items: center;
 }
 
 .row.row-stretch {
   align-items: stretch;
 }
 
 .row.row-baseline {
   align-items: baseline;
 }
 
 .row .column {
   display: block;
   flex: 1 1 auto;
   margin-left: 0;
   max-width: 100%;
   width: 100%;
 }
 
 .row .column.column-offset-10 {
   margin-left: 10%;
 }
 
 .row .column.column-offset-20 {
   margin-left: 20%;
 }
 
 .row .column.column-offset-25 {
   margin-left: 25%;
 }
 
 .row .column.column-offset-33, .row .column.column-offset-34 {
   margin-left: 33.3333%;
 }
 
 .row .column.column-offset-40 {
   margin-left: 40%;
 }
 
 .row .column.column-offset-50 {
   margin-left: 50%;
 }
 
 .row .column.column-offset-60 {
   margin-left: 60%;
 }
 
 .row .column.column-offset-66, .row .column.column-offset-67 {
   margin-left: 66.6666%;
 }
 
 .row .column.column-offset-75 {
   margin-left: 75%;
 }
 
 .row .column.column-offset-80 {
   margin-left: 80%;
 }
 
 .row .column.column-offset-90 {
   margin-left: 90%;
 }
 
 .row .column.column-10 {
   flex: 0 0 10%;
   max-width: 10%;
 }
 
 .row .column.column-20 {
   flex: 0 0 20%;
   max-width: 20%;
 }
 
 .row .column.column-25 {
   flex: 0 0 25%;
   max-width: 25%;
 }
 
 .row .column.column-33, .row .column.column-34 {
   flex: 0 0 33.3333%;
   max-width: 33.3333%;
 }
 
 .row .column.column-40 {
   flex: 0 0 40%;
   max-width: 40%;
 }
 
 .row .column.column-50 {
   flex: 0 0 50%;
   max-width: 50%;
 }
 
 .row .column.column-60 {
   flex: 0 0 60%;
   max-width: 60%;
 }
 
 .row .column.column-66, .row .column.column-67 {
   flex: 0 0 66.6666%;
   max-width: 66.6666%;
 }
 
 .row .column.column-75 {
   flex: 0 0 75%;
   max-width: 75%;
 }
 
 .row .column.column-80 {
   flex: 0 0 80%;
   max-width: 80%;
 }
 
 .row .column.column-90 {
   flex: 0 0 90%;
   max-width: 90%;
 }
 
 .row .column .column-top {
   align-self: flex-start;
 }
 
 .row .column .column-bottom {
   align-self: flex-end;
 }
 
 .row .column .column-center {
   align-self: center;
 }
 
 @media (min-width: 40rem) {
   .row {
     flex-direction: row;
     margin-left: -1.0rem;
     width: calc(100% + 2.0rem);
   }
   .row .column {
     margin-bottom: inherit;
     padding: 0 1.0rem;
   }
 }
 
 a {
   color: #9b4dca;
   text-decoration: none;
 }
 
 a:focus, a:hover {
   color: #606c76;
 }
 
 dl,
 ol,
 ul {
   list-style: none;
   margin-top: 0;
   padding-left: 0;
 }
 
 dl dl,
 dl ol,
 dl ul,
 ol dl,
 ol ol,
 ol ul,
 ul dl,
 ul ol,
 ul ul {
   font-size: 90%;
   margin: 1.5rem 0 1.5rem 3.0rem;
 }
 
 ol {
   list-style: decimal inside;
 }
 
 ul {
   list-style: circle inside;
 }
 
 .button,
 button,
 dd,
 dt,
 li {
   margin-bottom: 1.0rem;
 }
 
 fieldset,
 input,
 select,
 textarea {
   margin-bottom: 1.5rem;
 }
 
 blockquote,
 dl,
 figure,
 form,
 ol,
 p,
 pre,
 table,
 ul {
   margin-bottom: 2.5rem;
 }
 
 table {
   border-spacing: 0;
   display: block;
   overflow-x: auto;
   text-align: left;
   width: 100%;
 }
 
 td,
 th {
   border-bottom: 0.1rem solid #e1e1e1;
   padding: 1.2rem 1.5rem;
 }
 
 td:first-child,
 th:first-child {
   padding-left: 0;
 }
 
 td:last-child,
 th:last-child {
   padding-right: 0;
 }
 
 @media (min-width: 40rem) {
   table {
     display: table;
     overflow-x: initial;
   }
 }
 
 b,
 strong {
   font-weight: bold;
 }
 
 p {
   margin-top: 0;
 }
 
 h1,
 h2,
 h3,
 h4,
 h5,
 h6 {
   font-weight: 300;
   letter-spacing: -.1rem;
   margin-bottom: 2.0rem;
   margin-top: 0;
 }
 
 h1 {
   font-size: 4.6rem;
   line-height: 1.2;
 }
 
 h2 {
   font-size: 3.6rem;
   line-height: 1.25;
 }
 
 h3 {
   font-size: 2.8rem;
   line-height: 1.3;
 }
 
 h4 {
   font-size: 2.2rem;
   letter-spacing: -.08rem;
   line-height: 1.35;
 }
 
 h5 {
   font-size: 1.8rem;
   letter-spacing: -.05rem;
   line-height: 1.5;
 }
 
 h6 {
   font-size: 1.6rem;
   letter-spacing: 0;
   line-height: 1.4;
 }
 
 img {
   max-width: 100%;
 }
 
 .clearfix:after {
   clear: both;
   content: ' ';
   display: table;
 }
 
 .float-left {
   float: left;
 }
 
 .float-right {
   float: right;
 }
 
 /*# sourceMappingURL=milligram.css.map */
'''
'''--- frontend/src/assets/css/styles.css ---
#board {
    width: 300px;
    height: 300px;
    margin: 40px auto;
    display: flex;
    flex-direction: column;
    justify-content: space-around;
    pointer-events: none;
    background: #ddd;
}

#board.my-turn {
    pointer-events: inherit;
    background: #fff;
}

.board-row {
    display: flex;
    justify-content: space-around;
    height: 33%;
}

.board-cell {
    border: 1px solid black;
    width: 33%;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 2%;
    background-size: contain;
    background-repeat: no-repeat;
    background-origin: content-box;
    padding: 4%;
}

.board-cell.empty:hover {
    cursor: pointer;
    box-shadow: 0px 0px 14px -6px rgba(34, 60, 80, 0.7) inset;
    background-image: url('../img/cross.svg');
    opacity: 0.3;
}

.board-cell.cross {
    background-image: url('../img/cross.svg');
}

.board-cell.circle {
    background-image: url('../img/circle.svg');
}

#game-ui-title {
    text-align: center;
}
'''
'''--- frontend/src/assets/img/circle.svg ---
<?xml version="1.0" encoding="iso-8859-1"?>
<!-- Generator: Adobe Illustrator 16.0.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 width="553.289px" height="553.289px" viewBox="0 0 553.289 553.289" style="enable-background:new 0 0 553.289 553.289;"
	 xml:space="preserve">
<g>
	<path d="M293.522,2.039c165.24-15.3,279.072,178.092,257.04,325.583C528.53,472.666,379.202,570.587,237.83,549.167
		C88.502,527.135-16.762,385.763,2.21,237.659C20.57,96.899,144.806-14.485,286.179,6.323
		C288.015,3.875,289.851,2.039,293.522,2.039z M444.687,333.742c8.568-97.307-39.168-230.111-150.552-239.903
		c-2.448,0-4.284-1.224-5.509-1.836c-5.508-0.612-11.016-1.224-15.912-1.836c-43.452,5.508-82.62,16.524-113.832,51.408
		c-29.988,32.436-48.348,81.396-51.408,124.848c-6.12,85.68,39.78,168.3,121.176,198.899
		C326.57,502.654,434.895,439.618,444.687,333.742z"/>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
</svg>

'''
'''--- frontend/src/assets/img/cross.svg ---
<?xml version="1.0" encoding="iso-8859-1"?>
<!-- Generator: Adobe Illustrator 19.0.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<svg version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 viewBox="0 0 415.188 415.188" style="enable-background:new 0 0 415.188 415.188;" xml:space="preserve">
<path d="M412.861,78.976c3.404-6.636,2.831-14.159-0.15-20.404c0.84-7.106-1.02-14.321-7.746-19.855
	c-6.262-5.151-12.523-10.305-18.781-15.457c-11.005-9.055-28.237-11.913-38.941,0c-48.619,54.103-99.461,105.856-152.167,155.725
	c-39.185-36.605-78.846-72.713-118.223-108.868c-13.82-12.693-33.824-8.71-42.519,6.411c-12.665,6.286-22.931,14.481-31.42,28.468
	c-4.042,6.664-3.727,15.076,0,21.764c25.421,45.578,74.557,85.651,114.957,122.529c-5.406,4.839-10.772,9.724-16.287,14.461
	c-54.43,46.742-91.144,76.399-23.029,124.325c0.919,0.647,1.856,0.504,2.789,0.882c1.305,0.602,2.557,1.026,4.004,1.264
	c0.45,0.017,0.87,0.093,1.313,0.058c1.402,0.114,2.774,0.471,4.195,0.192c36.621-7.18,70.677-35.878,101.576-67.48
	c30.1,29.669,62.151,58.013,97.395,74.831c8.391,4.005,18.395,1.671,24.855-3.931c10.832,0.818,20.708-5.913,25.665-15.586
	c0.734-0.454,1.207-0.713,2.002-1.21c15.748-9.838,17.187-29.431,5.534-42.936c-26.313-30.492-54.284-59.478-82.798-87.95
	C316.426,196.043,380.533,141.939,412.861,78.976z"/>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
</svg>

'''
'''--- frontend/src/assets/js/app.js ---
import { initContract, login, logout, getNewGames, createGame, joinGame, getMyActiveGame, turn, getGame, surrender } from './near/utils'

const boardUI = document.querySelector('#board')
const boardInfoUI = document.querySelector('#board-info')

const gameUITitle = document.querySelector('#game-ui-title')
const gameUI = document.querySelector('#game-ui')
const joinGameUI = document.querySelector('#join-game-ui')
const gamesList = document.querySelector('#games-list')

let activeGame = null
let hasTurnRequest = false

// `nearInitPromise` gets called on page load
window.nearInitPromise = initContract()
    .then(flow)
    .catch(console.error)

function flow() {
    if (window.walletConnection.isSignedIn()) {
        signedInFlow()
    } else {
        signedOutFlow()
    }
}

function signedOutFlow() {
    document.querySelector('.sign-in').style.display = 'block';
}

async function signedInFlow() {
    addEventListener('load', init);
}

// games list
gamesList.onclick = async (e) => {
    if (e.target.dataset.gameId) {
        console.log(e.target.dataset.gameId);
        const activePlayer = await joinGame(e.target.dataset.gameId)
        loadActiveGame()
    }
};

async function loadNewGames() {
    console.log('loading new games...');
    const newGames = await getNewGames()
    console.log(newGames);
    let html = newGames.map(game => `<li>game #${game.id} (${game.creator}) <button data-game-id="${game.id}" class="button button-clear">join</button></li>`).join('')
    if(html == ''){
        html = 'No games available, create a new one.'
    }
    gamesList.innerHTML = html
}
async function createNewGame() {
    const gameId = await createGame()
    console.log(gameId);
    loadActiveGame()
}

function isGameMode(){
    return activeGame?.id !== undefined && activeGame?.id !== 0
}

// --------- board ------------

function rendBoard(boardData) {
    boardUI.innerHTML = boardData.map(rendBoardRow).join('')
}
function rendBoardRow(row) {
    return `<div class="board-row">${row.map(cell => {
        let c = 'empty'
        if (cell != '') c = (cell == window.accountId) ? 'cross' : 'circle'
        return `<div class="board-cell ${c}"></div>`
    }).join('')}</div>`
}

boardUI.onclick = async function onClickOnCell(e) {

    if (!isGameMode()) return

    let { target } = e
    if (!target.classList.contains('board-cell')) return;

    const row = target.parentElement

    const x = [...row.children].indexOf(target);
    const y = [...row.parentElement.children].indexOf(row);

    boardUI.classList.remove('my-turn')
    hasTurnRequest = true
    const isGameOver = await turn({ x, y, id: activeGame.id })

    await loadActiveGame()
    hasTurnRequest = false
}

async function onGameOver() {
    const game = await getGame(activeGame.id)
    let msg = 'Game Over! '
    switch (game.winner) {
        case '':
            msg += 'Nobody won.'
            break
        case window.accountId:
            msg += 'You Win!!!'
            break
        default:
            msg += 'You lose.'
            break
    }
    boardInfoUI.textContent = msg
    alert(msg)
    activeGame = null
    updateGameUI()
}

async function loadActiveGame() {
    const myActiveGame = await getMyActiveGame()
    if (myActiveGame?.id) {
        if (hasTurnRequest) return
        activeGame = myActiveGame
        rendBoard(activeGame.board)
        switch (activeGame.state) {
            case 0: // new game
                boardInfoUI.textContent = 'New Game. Waiting for opponent.'
                break;
            case 1: // active game
                if (isMyTurn()) {
                    boardUI.classList.add('my-turn')
                    boardInfoUI.textContent = 'You turn!'
                } else {
                    boardUI.classList.remove('my-turn')
                    boardInfoUI.textContent = "Waiting for opponent's turn..."
                }
                break;
            default:
                break;
        }

    } else {
        if (myActiveGame?.id !== activeGame?.id) {
            if (!myActiveGame?.id && activeGame?.id) {
                onGameOver()
            }
            activeGame = myActiveGame
        }
    }
    updateGameUI()
}
async function updateGameUI() {
    if (isGameMode()) {
        joinGameUI.style.display = 'none';
        gameUI.style.display = 'block';
        gameUITitle.textContent = `Game: '${activeGame.creator}' vs '${activeGame.opponent}'`
    } else {
        joinGameUI.style.display = 'block';
        gameUI.style.display = 'none';
    }
}

function isMyTurn() {
    return activeGame && activeGame.activePlayer == window.accountId
}

/// ====================

document.querySelector('.sign-in-btn').onclick = login;
document.querySelector('.sign-out-btn').onclick = logout;
document.querySelector('.create-new-game-btn').onclick = createNewGame
document.querySelector('#surrender').onclick = e => {
    surrender()
};

async function init() {
    console.log('init');

    document.querySelector('#main').style.display = 'block';
    document.querySelector("#account-id").textContent = window.accountId

    loadNewGames()
    loadActiveGame()

    setInterval(() => {
        // if (boardUpdateLock || isMyTurn()) return
        if (isGameMode()) {
            loadActiveGame()
        } else {
            loadNewGames()
        }
    }, 2000);
}

'''
'''--- frontend/src/assets/js/game_engine.js ---

'''
'''--- frontend/src/assets/js/near/config.js ---
// Once you deploy the contract to its final account, make sure to specify it here
const CONTRACT_NAME = process.env.CONTRACT_NAME || 'change_this_account'; /* TODO: Change this to the deployed account */

function getConfig (env) {
  switch (env) {
    case 'mainnet':
      return {
        networkId: 'mainnet',
        nodeUrl: 'https://rpc.mainnet.near.org',
        contractName: CONTRACT_NAME,
        walletUrl: 'https://wallet.near.org',
        helperUrl: 'https://helper.mainnet.near.org'
      }
    case 'production':
    case 'development':
    case 'testnet':
      return {
        networkId: 'testnet',
        nodeUrl: 'https://rpc.testnet.near.org',
        contractName: CONTRACT_NAME,
        walletUrl: 'https://wallet.testnet.near.org',
        helperUrl: 'https://helper.testnet.near.org'
      }
    case 'betanet':
      return {
        networkId: 'betanet',
        nodeUrl: 'https://rpc.betanet.near.org',
        contractName: CONTRACT_NAME,
        walletUrl: 'https://wallet.betanet.near.org',
        helperUrl: 'https://helper.betanet.near.org'
      }
    case 'local':
      return {
        networkId: 'local',
        nodeUrl: 'http://localhost:3030',
        keyPath: `${process.env.HOME}/.near/validator_key.json`,
        walletUrl: 'http://localhost:4000/wallet',
        contractName: CONTRACT_NAME
      }
    case 'test':
    case 'ci':
      return {
        networkId: 'shared-test',
        nodeUrl: 'https://rpc.ci-testnet.near.org',
        contractName: CONTRACT_NAME,
        masterAccount: 'test.near'
      }
    case 'ci-betanet':
      return {
        networkId: 'shared-test-staging',
        nodeUrl: 'https://rpc.ci-betanet.near.org',
        contractName: CONTRACT_NAME,
        masterAccount: 'test.near'
      }
    default:
      throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`)
  }
}

module.exports = getConfig

'''
'''--- frontend/src/assets/js/near/utils.js ---
import { connect, Contract, keyStores, WalletConnection } from 'near-api-js'
import getConfig from './config'

const nearConfig = getConfig(process.env.NODE_ENV || 'development')
console.log(nearConfig);

// Initialize contract & set global variables
export async function initContract() {
  // Initialize connection to the NEAR testnet
  const near = await connect(Object.assign({ keyStore: new keyStores.BrowserLocalStorageKeyStore() }, nearConfig))

  // Initializing Wallet based Account. It can work with NEAR testnet wallet that
  // is hosted at https://wallet.testnet.near.org
  window.walletConnection = new WalletConnection(near)

  // Getting the Account ID. If still unauthorized, it's just empty string
  window.accountId = window.walletConnection.getAccountId()

  // Initializing our contract APIs by contract name and configuration
  window.contract = await new Contract(window.walletConnection.account(), nearConfig.contractName, {
    // View methods are read only. They don't modify the state, but usually return some value.
    viewMethods: ['getNewGames', 'getGame', 'getGameBoard', 'getActiveGame'],
    // Change methods can modify the state. But you don't receive the returned value when called.
    changeMethods: ['createGame', 'joinGame', 'turn', 'surrender'],
  })
}

export function logout() {
  window.walletConnection.signOut()
  // reload page
  window.location.replace(window.location.origin + window.location.pathname)
}

export async function login() {
  // Allow the current app to make calls to the specified contract on the
  // user's behalf.
  // This works by creating a new access key for the user's account and storing
  // the private key in localStorage.
  // await window.walletConnection.requestSignIn(nearConfig.contractName, "Example App")
  await window.walletConnection.requestSignIn({ contractId: nearConfig.contractName })
}

export async function getNewGames() {
  let games = await window.contract.getNewGames({})
    .catch(err => errorHelper(err))
  return games;
}
export async function getMyActiveGame() {
  let games = await window.contract.getActiveGame({ accountId: window.accountId })
    .catch(err => errorHelper(err))
  return games;
}
export async function getGame(id) {
  let game = await window.contract.getGame({ id })
    .catch(err => errorHelper(err))
  return game;
}

export async function createGame() {
  let gameId = await window.contract.createGame({})
    .catch(err => errorHelper(err))
  return gameId;
}
export async function joinGame(id) {
  let activePlayer = await window.contract.joinGame({ id: parseInt(id) })
    .catch(err => errorHelper(err))
  return activePlayer;
}
export async function turn({ x, y, id }) {
  let win = await window.contract.turn({ id: parseInt(id), x, y })
    .catch(err => errorHelper(err))
  return win;
}
export async function surrender() {
  return await window.contract.surrender()
    .catch(err => errorHelper(err))
}

function errorHelper(err) {
  // if there's a cryptic error, provide more helpful feedback and instructions here
  // TODO: as soon as we get the error codes propagating back, use those
  if (err.message.includes('Cannot deserialize the contract state')) {
    console.warn('NEAR Warning: the contract/account seems to have state that is not (or no longer) compatible.\n' +
      'This may require deleting and recreating the NEAR account as shown here:\n' +
      'https://stackoverflow.com/a/60767144/711863');
  }
  if (err.message.includes('Cannot deserialize the contract state')) {
    console.warn('NEAR Warning: the contract/account seems to have state that is not (or no longer) compatible.\n' +
      'This may require deleting and recreating the NEAR account as shown here:\n' +
      'https://stackoverflow.com/a/60767144/711863');
  }
  console.error(err);
}

'''
'''--- frontend/src/index.html ---
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <link rel="stylesheet" href="./assets/css/milligram.css">
    <link rel="stylesheet" href="./assets/css/styles.css">
    <title>dApp demo</title>
</head>

<body>
    <div class="container">
        <h1 style="text-align: center; margin-top: 20vh;">dApp under construction</h1>
    </div>
    <div class="container sign-in" style="display: none;">
        <p>You'll need to <a class="button button-outline sign-in-btn">Sign In</a> to interact with the app.</p>
    </div>
    <div class="container" id="main" style="display: none;">
        <div class="row">
            <div class="column column-25">
                <div class="sign-out">
                    <h4>Account: <span id="account-id"></span></h4>
                    <button class="btn button-outline sign-out-btn">Sign Out</button>
                </div>
            </div>
            <div id="join-game-ui" class="column" style="display: none;">
                <h4>Games:</h4>
                <button class="btn btn-primary create-new-game-btn">create game</button>
                <span>or join</span>
                <ul id="games-list"></ul>
            </div>
            <div id="game-ui" class="column" style="display: none;">
                <h4 id="game-ui-title"></h4>
                <span id="board-info"></span>
                <div id="board"></div>
                <button id="surrender" class="button button-clear">surrender</button>
            </div>
        </div>
    </div>

    <script src="./assets/js/app.js" type="module"></script>
</body>

</html>
'''
'''--- neardev/dev-account.env ---
CONTRACT_NAME=dev-1666908006313-20442788725973
'''
'''--- package.json ---
{
  "name": "dapp-demo-on-near",
  "version": "1.0.0",
  "description": "",
  "scripts": {
    "dev": "nodemon --watch contract -e ts --exec \"npm run start\"",
    "start": "npm run deploy:dev && echo The app is starting! && npm run start:frontend",
    "start:frontend": "env-cmd -f ./neardev/dev-account.env parcel frontend/src/index.html --open --dist-dir frontend/dist/",
    "deploy:dev": "npm run build:contract && npm run deploy:dev:contract",
    "deploy:dev:contract": "near dev-deploy",
    "deploy:frontend": "gh-pages -d frontend/build",
    "deploy:contract": "",
    "build": "npm run build:contract && npm run build:frontend",
    "build:frontend": "rm -rf frontend/build/ && env-cmd -f ./neardev/dev-account.env parcel build frontend/src/index.html --public-url ./ --dist-dir frontend/build/",
    "build:contract": "cd contract && npm run build && mkdir -p ../out && rm -f ../out/main.wasm && cp ./build/release/tic-tac-toe_contract.wasm ../out/main.wasm",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/g1ts/dApp-demo-on-NEAR.git"
  },
  "author": "g1ts",
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/g1ts/dApp-demo-on-NEAR/issues"
  },
  "homepage": "https://github.com/g1ts/dApp-demo-on-NEAR#readme",
  "devDependencies": {
    "buffer": "^6.0.3",
    "env-cmd": "^10.1.0",
    "gh-pages": "^4.0.0",
    "parcel": "^2.7.0",
    "process": "^0.11.10"
  },
  "dependencies": {
    "near-api-js": "^1.1.0"
  }
}

'''