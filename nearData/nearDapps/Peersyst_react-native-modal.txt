*GitHub Repository "Peersyst/react-native-modal"*

'''--- .eslintrc.js ---
module.exports = {
  root: true,
  extends: '@react-native-community',
  parser: '@typescript-eslint/parser',
  plugins: ['@typescript-eslint'],
  rules: {
    'react-native/no-inline-styles': 0,
  },
};

'''
'''--- .github/CONTRIBUTING.md ---
# Contributing to React Native Modal

## Development Process

All work on React Native Modal happens directly on GitHub. Contributors send pull requests which go through a review process.

> **Working on your first pull request?** You can learn how from this _free_ series: [How to Contribute to an Open Source Project on GitHub](https://egghead.io/series/how-to-contribute-to-an-open-source-project-on-github).

1. Fork the repo and create your branch from `master` (a guide on [how to fork a repository](https://help.github.com/articles/fork-a-repo/)).
2. Run `yarn` or `npm install` to install all required dependencies.
3. Now you are ready to make your changes!

### Development flow

- Head into the `example` folder and do the same.
- Head into `ios` and run `pod install` if you wish to compile under iOS
- Get back into the root folder and launch `yarn run dev`. This will launch `ts` in watch mode.
- Get into the `example` folder again and type `yarn run start`.
- You can now open Android Studio or XCode directly from `example/android` or `example/ios` respectively, build
  and run the app.

## Tests & Verifications

Currently we use `eslint` with `prettier` for linting and formatting the code.  
We still don't have a test suite (it's a WIP).
All of these are run on CircleCI for all opened pull requests, but you should use them locally when making changes.

- `yarn test`: Run all tests and validations.
- `yarn lint`: Run `eslint`.
- `yarn test:ts`: Checks TypeScript
- `yarn lint --fix`: Run `eslint` and automatically fix issues. This is useful for correcting code formatting.

## Sending a pull request

When you're sending a pull request:

- Prefer small pull requests focused on one change.
- Verify that all tests and validations are passing.
- Follow the pull request template when opening a pull request.

## Commit message convention

We prefix our commit messages with one of the following to signify the kind of change:

- **build**: Changes that affect the build system or external dependencies.
- **ci**, **chore**: Changes to our CI configuration files and scripts.
- **docs**: Documentation only changes.
- **feat**: A new feature.
- **fix**: A bug fix.
- **perf**: A code change that improves performance.
- **refactor**: A code change that neither fixes a bug nor adds a feature.
- **style**: Changes that do not affect the meaning of the code.
- **test**: Adding missing tests or correcting existing tests.

## Release process

We use [Semantic Release](http://semantic-release.org) to automatically release new versions of the library when changes are merged into master. Using the commit message convention described above, it will detect if we need to release a patch, minor, or major version of the library.

## Reporting issues

You can report issues on our [bug tracker](https://github.com/react-native-community/react-native-modal/issues). Please search for existing issues and follow the issue template when opening an issue.

## License

By contributing to React Native Modal, you agree that your contributions will be licensed under the **MIT** license.

'''
'''--- .github/ISSUE_TEMPLATE/BUG_REPORT.md ---
---
name: üêõ Report a bug
about: Report a reproducible or regression bug.
labels: "bug"
---

<!-- NOTE:
- Under the hood react-native-modal uses react-native's built-in Modal.
- Before reporting a bug, try swapping react-native-modal with react-native's built-in Modal to check if the problem persists. If it does please report the issue in the react-native repo instead.
- Please notice that WE WON'T SUPPORT ISSUE IF YOU HAVEN'T TRIED USING THE BUILT-IN MODAL COMPONENT ALONE. 
- For QUESTIONS and FEEDBACK, please use the [discussions](https://github.com/react-native-modal/react-native-modal/discussions) section.  
-->

## Environment

<!-- Run `react-native info` in your terminal and paste its contents here. -->

## Platforms

<!-- Is this issue related to Android, iOS, or both? -->

## Versions

<!-- Please add the used versions/branches -->

- Android:
- iOS:
- react-native-modal:
- react-native:
- react:

## Description

<!-- Describe your issue in detail. Include screenshots if needed. If this is a regression, let us know. -->

## Reproducible Demo

<!-- Let us know how to reproduce the issue. Include a code sample or share a project that reproduces the issue. -->
<!-- Please follow the guidelines for providing a minimal example: https://stackoverflow.com/help/mcve -->
<!-- Please notice that WE WON'T SUPPORT ISSUE REPORTS THAT DON'T HAVE A MINIMAL REPRODUCIBLE EXAMPLE. -->

'''
'''--- .github/PULL_REQUEST_TEMPLATE.md ---
# Overview

<!-- Thank you for sending the PR! We appreciate you spending the time to work on these changes. -->
<!-- Help us understand your motivation by explaining why you decided to make this change -->

# Test Plan

<!-- Write your test plan here. If you changed any code, please provide us with clear instructions on how you verified your changes work. Bonus points for screenshots and videos! -->

'''
'''--- .github/workflows/release.yml ---
name: Release
on:
  push:
    branches:
      - master
jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '13.x'
      - name: Install dependencies
        run: yarn --pure-lockfile
      - name: Build the project
        run: yarn build
      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npx semantic-release

'''
'''--- .github/workflows/test.yml ---
name: Lint & Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  install:
    runs-on: ubuntu-latest
    name: Install
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: '13.x'
      - run: yarn --pure-lockfile
      - uses: actions/cache@v1
        id: cache-build
        with:
          path: '.'
          key: ${{ github.sha }}

  test:
    runs-on: ubuntu-latest
    name: Test
    needs: install
    steps:
      - uses: actions/cache@v1
        id: restore-build
        with:
          path: '.'
          key: ${{ github.sha }}
      - run: yarn test

'''
'''--- .prettierrc.js ---
module.exports = {
  bracketSpacing: false,
  jsxBracketSameLine: true,
  singleQuote: true,
  trailingComma: 'all',
};

'''
'''--- ISSUE_TEMPLATE.md ---
### When reporting a bug, please be sure to check if the issue still persists with react-native original modal:

Under the hood `react-native-modal` uses react-native original [Modal component](https://reactnative.dev/docs/modal.html).  
Before reporting a bug, try swapping `react-native-modal` with react-native original Modal component to check if the problem persists.

### When reporting a bug, please be sure to include the following:

- [ ] The outcome of the `react-native-modal` swap described above
- [ ] A descriptive title
- [ ] What version of `react-native-modal` you're using, and the platform(s) you're running it on (iOS, Android, device)
- [ ] What packages or other dependencies you're using
- [ ] The behavior you expect to see, and the actual behavior
- [ ] **Most important of all:** An _isolated_ way to reproduce the behavior (example: GitHub repository with code isolated to the issue that anyone can clone to observe the problem)

### When you open an issue for a feature request, please add as much detail as possible:

- [ ] A descriptive title
- [ ] A description of the problem you're trying to solve, including _why_ you think this is a problem
- [ ] An overview of the suggested solution
- [ ] If the feature changes current behavior, reasons why your solution is better

### Please note by far the quickest way to get a new feature is to file a Pull Request.

'''
'''--- LICENSE.md ---
MIT License

Copyright (c) 2017 React Native Community

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

'''
'''--- README.md ---
### Announcements 
- üì£ We're looking for maintainers and contributors! See [#598](https://github.com/react-native-modal/react-native-modal/discussions/598)
- üí° We're brainstorming if/how we can make a JavaScript-only version of `react-native-modal`. See [#597](https://github.com/react-native-modal/react-native-modal/discussions/597)
- üôè If you have a question, please [start a new discussion](https://github.com/react-native-modal/react-native-modal/discussions) instead of opening a new issue.

# react-native-modal

[![npm version](https://badge.fury.io/js/react-native-modal.svg)](https://badge.fury.io/js/react-native-modal)
[![styled with prettier](https://img.shields.io/badge/styled_with-prettier-ff69b4.svg)](https://github.com/prettier/prettier)

> If you're new to the React Native world, please notice that React Native itself offers a [<Modal /> component that works out-of-the-box](https://reactnative.dev/docs/modal).

An enhanced, animated, customizable React Native modal.

The goal of `react-native-modal` is expanding the original React Native `<Modal>` component by adding animations, style customization options, and new features, while still providing a simple API.

<p align="center">
<img src="/.github/images/example-modal.gif" height="500" />
</p>

## Features

- Smooth enter/exit animations
- Plain simple and flexible APIs
- Customizable backdrop opacity, color and timing
- Listeners for the modal animations ending
- Resize itself correctly on device rotation
- Swipeable
- Scrollable

## Setup

This library is available on npm, install it with: `npm i react-native-modal` or `yarn add react-native-modal`.

## Usage

Since `react-native-modal` is an extension of the [original React Native modal](https://reactnative.dev/docs/modal.html), it works in a similar fashion.

1.  Import `react-native-modal`:

```javascript
import Modal from "react-native-modal";
```

2.  Create a `<Modal>` component and nest its content inside of it:

```javascript
function WrapperComponent() {
  return (
    <View>
      <Modal>
        <View style={{ flex: 1 }}>
          <Text>I am the modal content!</Text>
        </View>
      </Modal>
    </View>
  );
}
```

3.  Then, show the modal by setting the `isVisible` prop to `true`:

```javascript
function WrapperComponent() {
  return (
    <View>
      <Modal isVisible={true}>
        <View style={{ flex: 1 }}>
          <Text>I am the modal content!</Text>
        </View>
      </Modal>
    </View>
  );
}
```

The `isVisible` prop is the only prop you'll really need to make the modal work: you should control this prop value by saving it in your wrapper component state and setting it to `true` or `false` when needed.

## A complete example

The following example consists in a component (`ModalTester`) with a button and a modal.
The modal is controlled by the `isModalVisible` state variable and it is initially hidden, since its value is `false`.  
Pressing the button sets `isModalVisible` to true, making the modal visible.  
Inside the modal there is another button that, when pressed, sets `isModalVisible` to false, hiding the modal.

```javascript
import React, { useState } from "react";
import { Button, Text, View } from "react-native";
import Modal from "react-native-modal";

function ModalTester() {
  const [isModalVisible, setModalVisible] = useState(false);

  const toggleModal = () => {
    setModalVisible(!isModalVisible);
  };

  return (
    <View style={{ flex: 1 }}>
      <Button title="Show modal" onPress={toggleModal} />

      <Modal isVisible={isModalVisible}>
        <View style={{ flex: 1 }}>
          <Text>Hello!</Text>

          <Button title="Hide modal" onPress={toggleModal} />
        </View>
      </Modal>
    </View>
  );
}

export default ModalTester;
```

For a more complex example take a look at the `/example` directory.

## Available props

| Name                             | Type                 | Default                        | Description                                                                                                                                |
| -------------------------------- | -------------------- | ------------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------ |
| `animationIn`                    | `string` or `object` | `"slideInUp"`                    | Modal show animation                                                                                                                       |
| `animationInTiming`              | `number`             | `300`                            | Timing for the modal show animation (in ms)                                                                                                |
| `animationOut`                   | `string` or `object` | `"slideOutDown"`                 | Modal hide animation                                                                                                                       |
| `animationOutTiming`             | `number`             | `300`                            | Timing for the modal hide animation (in ms)                                                                                                |
| `avoidKeyboard`                  | `bool`               | `false`                          | Move the modal up if the keyboard is open                                                                                                  |
| `coverScreen`                    | `bool`               | `true`                           | Will use RN `Modal` component to cover the entire screen wherever the modal is mounted in the component hierarchy                          |
| `hasBackdrop`                    | `bool`               | `true`                           | Render the backdrop                                                                                                                        |
| `backdropColor`                  | `string`             | `"black"`                        | The backdrop background color                                                                                                              |
| `backdropOpacity`                | `number`             | `0.70`                           | The backdrop opacity when the modal is visible                                                                                             |
| `backdropTransitionInTiming`     | `number`             | `300`                            | The backdrop show timing (in ms)                                                                                                           |
| `backdropTransitionOutTiming`    | `number`             | `300`                            | The backdrop hide timing (in ms)                                                                                                           |
| `customBackdrop`                 | `node`               | `null`                           | The custom backdrop element                                                                                                                |
| `children`                       | `node`               | **REQUIRED**                   | The modal content                                                                                                                          |
| `deviceHeight`                   | `number`             | `null`                           | Device height (useful on devices that can hide the navigation bar)                                                                         |
| `deviceWidth`                    | `number`             | `null`                           | Device width (useful on devices that can hide the navigation bar)                                                                          |
| `isVisible`                      | `bool`               | **REQUIRED**                   | Show the modal?                                                                                                                            |
| `onBackButtonPress`              | `func`               | `() => null`                     | Called when the Android back button is pressed                                                                                             |
| `onBackdropPress`                | `func`               | `() => null`                     | Called when the backdrop is pressed                                                                                                        |
| `onModalWillHide`                | `func`               | `() => null`                     | Called before the modal hide animation begins                                                                                              |
| `onModalHide`                    | `func`               | `() => null`                     | Called when the modal is completely hidden                                                                                                 |
| `onModalWillShow`                | `func`               | `() => null`                     | Called before the modal show animation begins                                                                                              |
| `onModalShow`                    | `func`               | `() => null`                     | Called when the modal is completely visible                                                                                                |
| `onSwipeStart`                   | `func`               | `() => null`                     | Called when the swipe action started                                                                                                       |
| `onSwipeMove`                    | `func`               | `(percentageShown) => null`      | Called on each swipe event                                                                                                                 |
| `onSwipeComplete`                | `func`               | `({ swipingDirection }) => null` | Called when the `swipeThreshold` has been reached                                                                                          |
| `onSwipeCancel`                  | `func`               | `() => null`                     | Called when the `swipeThreshold` has not been reached                                                                                      |
| `panResponderThreshold`          | `number`             | `4`                              | The threshold for when the panResponder should pick up swipe events                                                                        |
| `scrollOffset`                   | `number`             | `0`                              | When > 0, disables swipe-to-close, in order to implement scrollable content                                                                |
| `scrollOffsetMax`                | `number`             | `0`                              | Used to implement overscroll feel when content is scrollable. See `/example` directory                                                     |
| `scrollTo`                       | `func`               | `null`                           | Used to implement scrollable modal. See `/example` directory for reference on how to use it                                                |
| `scrollHorizontal`               | `bool`               | `false`                          | Set to true if your scrollView is horizontal (for a correct scroll handling)                                                               |
| `swipeThreshold`                 | `number`             | `100`                            | Swiping threshold that when reached calls `onSwipeComplete`                                                                                |
| `swipeDirection`                 | `string` or `array`  | `null`                           | Defines the direction where the modal can be swiped. Can be 'up', 'down', 'left, or 'right', or a combination of them like `['up','down']` |
| `useNativeDriver`                | `bool`               | `false`                          | Defines if animations should use native driver                                                                                             |
| `useNativeDriverForBackdrop`     | `bool`               | `null`                           | Defines if animations for backdrop should use native driver (to avoid flashing on android)                                                 |
| `hideModalContentWhileAnimating` | `bool`               | `false`                          | Enhances the performance by hiding the modal content until the animations complete                                                         |
| `propagateSwipe`                 | `bool` or `func`     | `false`                          | Allows swipe events to propagate to children components (eg a ScrollView inside a modal)                                                   |
| `style`                          | `any`                | `null`                           | Style applied to the modal                                                                                                                 |

## Frequently Asked Questions

### The component is not working as expected

Under the hood `react-native-modal` uses react-native original [Modal component](https://reactnative.dev/docs/modal).  
Before reporting a bug, try swapping `react-native-modal` with react-native original Modal component and, if the issue persists, check if it has already been reported as a [react-native issue](https://github.com/facebook/react-native/issues).

### The backdrop is not completely filled/covered on some Android devices (Galaxy, for one)

React-Native has a few issues detecting the correct device width/height of some devices.  
If you're experiencing this issue, you'll need to install [`react-native-extra-dimensions-android`](https://github.com/Sunhat/react-native-extra-dimensions-android).  
Then, provide the real window height (obtained from `react-native-extra-dimensions-android`) to the modal:

```javascript
const deviceWidth = Dimensions.get("window").width;
const deviceHeight =
  Platform.OS === "ios"
    ? Dimensions.get("window").height
    : require("react-native-extra-dimensions-android").get(
        "REAL_WINDOW_HEIGHT"
      );

function WrapperComponent() {
  const [isModalVisible, setModalVisible] = useState(true);

  return (
    <Modal
      isVisible={isModalVisible}
      deviceWidth={deviceWidth}
      deviceHeight={deviceHeight}
    >
      <View style={{ flex: 1 }}>
        <Text>I am the modal content!</Text>
      </View>
    </Modal>
  );
}
```

### How can I hide the modal by pressing outside of its content?

The prop `onBackdropPress` allows you to handle this situation:

```javascript
<Modal
  isVisible={isModalVisible}
  onBackdropPress={() => setModalVisible(false)}
>
  <View style={{ flex: 1 }}>
    <Text>I am the modal content!</Text>
  </View>
</Modal>
```

### How can I hide the modal by swiping it?

The prop `onSwipeComplete` allows you to handle this situation (remember to set `swipeDirection` too!):

```javascript
<Modal
  isVisible={isModalVisible}
  onSwipeComplete={() => setModalVisible(false)}
  swipeDirection="left"
>
  <View style={{ flex: 1 }}>
    <Text>I am the modal content!</Text>
  </View>
</Modal>
```

Note that when using `useNativeDriver={true}` the modal won't drag correctly. This is a [known issue](https://github.com/react-native-community/react-native-modal/issues/163#issuecomment-409760695).

### The modal flashes in a weird way when animating

Unfortunately this is a [known issue](https://github.com/react-native-community/react-native-modal/issues/92) that happens when `useNativeDriver=true` and must still be solved.  
In the meanwhile as a workaround you can set the `hideModalContentWhileAnimating` prop to `true`: this seems to solve the issue.
Also, do not assign a `backgroundColor` property directly to the Modal. Prefer to set it on the child container.

### The modal background doesn't animate properly

Are you sure you named the `isVisible` prop correctly? Make sure it is spelled correctly: `isVisible`, not `visible`.

### The modal doesn't change orientation

Add a `supportedOrientations={['portrait', 'landscape']}` prop to the component, as described [in the React Native documentation](https://reactnative.dev/docs/modal.html#supportedorientations).

Also, if you're providing the `deviceHeight` and `deviceWidth` props you'll have to manually update them when the layout changes.

### I can't show multiple modals one after another

Unfortunately right now react-native doesn't allow multiple modals to be displayed at the same time.
This means that, in `react-native-modal`, if you want to immediately show a new modal after closing one you must first make sure that the modal that your closing has completed its hiding animation by using the `onModalHide` prop.

### I can't show multiple modals at the same time

See the question above.
Showing multiple modals (or even alerts/dialogs) at the same time is not doable because of a react-native bug.
That said, I would strongly advice against using multiple modals at the same time because, most often than not, this leads to a bad UX, especially on mobile (just my opinion).

### The StatusBar style changes when the modal shows up

This issue has been discussed [here](https://github.com/react-native-community/react-native-modal/issues/50).  
The TLDR is: it's a know React-Native issue with the Modal component üòû

### The modal is not covering the entire screen

The modal style applied by default has a small margin.  
If you want the modal to cover the entire screen you can easily override it this way:

```js
<Modal style={{ margin: 0 }}>...</Modal>
```

### I can't scroll my ScrollView inside of the modal

Enable propagateSwipe to allow your child components to receive swipe events:

```js
<Modal propagateSwipe>...</Modal>
```

Please notice that this is still a WIP fix and might not fix your issue yet, see [issue #236](https://github.com/react-native-community/react-native-modal/issues/236).

### The modal enter/exit animation flickers

Make sure your `animationIn` and `animationOut` are set correctly.  
We noticed that, for example, using `fadeIn` as an exit animation makes the modal flicker (it should be `fadeOut`!).
Also, some users have noticed that setting backdropTransitionOutTiming={0} can fix the flicker without affecting the animation.

### The custom backdrop doesn't fill the entire screen

You need to specify the size of your custom backdrop component. You can also make it expand to fill the entire screen by adding a `flex: 1` to its style:

```javascript
<Modal isVisible={isModalVisible} customBackdrop={<View style={{ flex: 1 }} />}>
  <View style={{ flex: 1 }}>
    <Text>I am the modal content!</Text>
  </View>
</Modal>
```

### The custom backdrop doesn't dismiss the modal on press

You can provide an event handler to the custom backdrop element to dismiss the modal. The prop `onBackdropPress` is not supported for a custom backdrop.

```javascript
<Modal
  isVisible={isModalVisible}
  customBackdrop={
    <TouchableWithoutFeedback onPress={dismissModalHandler}>
      <View style={{ flex: 1 }} />
    </TouchableWithoutFeedback>
  }
/>
```

## Available animations

Take a look at [react-native-animatable](https://github.com/oblador/react-native-animatable) to see the dozens of animations available out-of-the-box. You can also pass in custom animation definitions and have them automatically register with react-native-animatable. For more information on creating custom animations, see the react-native-animatable [animation definition schema](https://github.com/oblador/react-native-animatable#animation-definition-schema).

## Alternatives

- [React Native's built-in `<Modal>` component](https://reactnative.dev/docs/modal.html)
- [React Native Paper `<Modal>` component](https://callstack.github.io/react-native-paper/modal.html)
- [React Native Modalfy](https://github.com/colorfy-software/react-native-modalfy)

## Acknowledgements

Thanks [@oblador](https://github.com/oblador) for react-native-animatable, [@brentvatne](https://github.com/brentvatne) for the npm namespace and to anyone who contributed to this library!

Pull requests, feedbacks and suggestions are welcome!

'''
'''--- example/android/app/src/androidTest/java/com/modalexample/DetoxTest.java ---
package com.modalexample;

import com.wix.detox.Detox;

import org.junit.Rule;
import org.junit.Test;
import org.junit.runner.RunWith;

import androidx.test.ext.junit.runners.AndroidJUnit4;
import androidx.test.filters.LargeTest;
import androidx.test.rule.ActivityTestRule;

@RunWith(AndroidJUnit4.class)
@LargeTest
public class DetoxTest {

  @Rule
  public ActivityTestRule<MainActivity> mActivityRule = new ActivityTestRule<>(MainActivity.class, false, false);

  @Test
  public void runDetoxTests() {
    Detox.runTests(mActivityRule);
  }
}

'''
'''--- example/android/app/src/debug/AndroidManifest.xml ---
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <uses-permission android:name="android.permission.SYSTEM_ALERT_WINDOW"/>

    <application android:usesCleartextTraffic="true" tools:targetApi="28" tools:ignore="GoogleAppIndexingWarning" />
</manifest>

'''
'''--- example/android/app/src/main/AndroidManifest.xml ---
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
  package="com.modalexample">

    <uses-permission android:name="android.permission.INTERNET" />

    <application
      android:name=".MainApplication"
      android:label="@string/app_name"
      android:icon="@mipmap/ic_launcher"
      android:roundIcon="@mipmap/ic_launcher_round"
      android:allowBackup="false"
      android:theme="@style/AppTheme">
      <activity
        android:name=".MainActivity"
        android:label="@string/app_name"
        android:configChanges="keyboard|keyboardHidden|orientation|screenSize"
        android:windowSoftInputMode="adjustResize">
        <intent-filter>
            <action android:name="android.intent.action.MAIN" />
            <category android:name="android.intent.category.LAUNCHER" />
        </intent-filter>
      </activity>
      <activity android:name="com.facebook.react.devsupport.DevSettingsActivity" />
    </application>

</manifest>

'''
'''--- example/android/app/src/main/java/com/modalexample/MainActivity.java ---
package com.modalexample;

import com.facebook.react.ReactActivity;

import com.facebook.react.ReactActivityDelegate;
import com.facebook.react.ReactRootView;
import com.swmansion.gesturehandler.react.RNGestureHandlerEnabledRootView;

public class MainActivity extends ReactActivity {
    /**
     * Returns the name of the main component registered from JavaScript.
     * This is used to schedule rendering of the component.
     */
    @Override
    protected String getMainComponentName() {
        return "ModalExample";
    }

    @Override
    protected ReactActivityDelegate createReactActivityDelegate() {
        return new ReactActivityDelegate(this, getMainComponentName()) {
            @Override
            protected ReactRootView createRootView() {
                return new RNGestureHandlerEnabledRootView(MainActivity.this);
            }
        };
    }
}

'''
'''--- example/android/app/src/main/java/com/modalexample/MainApplication.java ---
package com.modalexample;

import android.app.Application;
import android.util.Log;

import com.facebook.react.PackageList;
import com.facebook.hermes.reactexecutor.HermesExecutorFactory;
import com.facebook.react.bridge.JavaScriptExecutorFactory;
import com.facebook.react.ReactApplication;
import com.facebook.react.ReactNativeHost;
import com.facebook.react.ReactPackage;
import com.facebook.soloader.SoLoader;

import java.util.List;

public class MainApplication extends Application implements ReactApplication {

  private final ReactNativeHost mReactNativeHost = new ReactNativeHost(this) {
    @Override
    public boolean getUseDeveloperSupport() {
      return BuildConfig.DEBUG;
    }

    @Override
    protected List<ReactPackage> getPackages() {
      @SuppressWarnings("UnnecessaryLocalVariable")
      List<ReactPackage> packages = new PackageList(this).getPackages();
      // Packages that cannot be autolinked yet can be added manually here, for example:
      // packages.add(new MyReactNativePackage());
      return packages;
    }

    @Override
    protected String getJSMainModuleName() {
      return "index";
    }
  };

  @Override
  public ReactNativeHost getReactNativeHost() {
    return mReactNativeHost;
  }

  @Override
  public void onCreate() {
    super.onCreate();
    SoLoader.init(this, /* native exopackage */ false);
  }
}

'''
'''--- example/android/app/src/main/res/values/strings.xml ---
<resources>
    <string name="app_name">ModalExample</string>
</resources>

'''
'''--- example/android/app/src/main/res/values/styles.xml ---
<resources>

    <!-- Base application theme. -->
    <style name="AppTheme" parent="Theme.AppCompat.Light.NoActionBar">
        <!-- Customize your theme here. -->
        <item name="android:textColor">#000000</item>
    </style>

</resources>

'''
'''--- example/android/gradlew.bat ---
@rem
@rem Copyright 2015 the original author or authors.
@rem
@rem Licensed under the Apache License, Version 2.0 (the "License");
@rem you may not use this file except in compliance with the License.
@rem You may obtain a copy of the License at
@rem
@rem      http://www.apache.org/licenses/LICENSE-2.0
@rem
@rem Unless required by applicable law or agreed to in writing, software
@rem distributed under the License is distributed on an "AS IS" BASIS,
@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@rem See the License for the specific language governing permissions and
@rem limitations under the License.
@rem

@if "%DEBUG%" == "" @echo off
@rem ##########################################################################
@rem
@rem  Gradle startup script for Windows
@rem
@rem ##########################################################################

@rem Set local scope for the variables with windows NT shell
if "%OS%"=="Windows_NT" setlocal

set DIRNAME=%~dp0
if "%DIRNAME%" == "" set DIRNAME=.
set APP_BASE_NAME=%~n0
set APP_HOME=%DIRNAME%

@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
set DEFAULT_JVM_OPTS="-Xmx64m" "-Xms64m"

@rem Find java.exe
if defined JAVA_HOME goto findJavaFromJavaHome

set JAVA_EXE=java.exe
%JAVA_EXE% -version >NUL 2>&1
if "%ERRORLEVEL%" == "0" goto init

echo.
echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
echo.
echo Please set the JAVA_HOME variable in your environment to match the
echo location of your Java installation.

goto fail

:findJavaFromJavaHome
set JAVA_HOME=%JAVA_HOME:"=%
set JAVA_EXE=%JAVA_HOME%/bin/java.exe

if exist "%JAVA_EXE%" goto init

echo.
echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
echo.
echo Please set the JAVA_HOME variable in your environment to match the
echo location of your Java installation.

goto fail

:init
@rem Get command-line arguments, handling Windows variants

if not "%OS%" == "Windows_NT" goto win9xME_args

:win9xME_args
@rem Slurp the command line arguments.
set CMD_LINE_ARGS=
set _SKIP=2

:win9xME_args_slurp
if "x%~1" == "x" goto execute

set CMD_LINE_ARGS=%*

:execute
@rem Setup the command line

set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar

@rem Execute Gradle
"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%

:end
@rem End local scope for the variables with windows NT shell
if "%ERRORLEVEL%"=="0" goto mainEnd

:fail
rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
rem the _cmd.exe /c_ return code!
if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
exit /b 1

:mainEnd
if "%OS%"=="Windows_NT" endlocal

:omega

'''
'''--- example/app.json ---
{
  "name": "ModalExample",
  "displayName": "ModalExample"
}

'''
'''--- example/babel.config.js ---
module.exports = {
  presets: ['module:metro-react-native-babel-preset'],
};

'''
'''--- example/e2e/allTests.spec.js ---
describe('Example', () => {
  const waitFor = delay => new Promise(accept => setTimeout(accept, delay));

  beforeEach(async () => {
    await device.reloadReactNative();
  });

  it('should open and close all the modals', async () => {
    const modals = [
      'default',
      'slide',
      'slow',
      'fancy',
      'bottom-half',
      'backdrop-close',
      'swipeable',
      'custom-backdrop',
    ];
    for (let modalName of modals) {
      await element(by.id(`${modalName}-modal-open-button`)).tap();

      const modal = element(by.id(`modal`));
      await expect(modal).toBeNotVisible();
      await element(by.id(`modal-open-button`)).tap();
      await expect(modal).toBeVisible();
      await element(by.id('close-button')).tap();
      await expect(modal).toBeNotVisible();
      element(by.id('header-back')).tap();
      await waitFor(500);
    }
  });

  describe('swipeable modal', () => {
    it('should close the bottom-half modal by swiping down', async () => {
      await element(by.id(`swipeable-modal-open-button`)).tap();

      const modal = element(by.id('modal'));
      await expect(modal).toBeNotVisible();
      await element(by.id('modal-open-button')).tap();
      await expect(modal).toBeVisible();
      await modal.swipe('down', 'fast', 0.5);
      await expect(modal).toBeNotVisible();
    });

    it('should NOT close the bottom-half modal by swiping up', async () => {
      await element(by.id(`swipeable-modal-open-button`)).tap();

      const modal = element(by.id('modal'));
      await expect(modal).toBeNotVisible();
      await element(by.id('modal-open-button')).tap();
      await expect(modal).toBeVisible();
      await modal.swipe('up', 'fast', 0.5);
      await expect(modal).toBeVisible();
    });
    it('should NOT close the bottom-half modal by swiping right', async () => {
      await element(by.id(`swipeable-modal-open-button`)).tap();

      const modal = element(by.id('modal'));
      await expect(modal).toBeNotVisible();
      await element(by.id('modal-open-button')).tap();
      await expect(modal).toBeVisible();
      await modal.swipe('right', 'fast', 0.5);
      await expect(modal).toBeVisible();
    });
    it('should NOT close the bottom-half modal by swiping left', async () => {
      await element(by.id(`swipeable-modal-open-button`)).tap();

      const modal = element(by.id('modal'));
      await expect(modal).toBeNotVisible();
      await element(by.id('modal-open-button')).tap();
      await expect(modal).toBeVisible();
      await modal.swipe('left', 'fast', 0.5);
      await expect(modal).toBeVisible();
    });
  });
});

'''
'''--- example/e2e/config.json ---
{
    "setupFilesAfterEnv": ["./init.js"],
    "testEnvironment": "node",
    "reporters": ["detox/runners/jest/streamlineReporter"],
    "verbose": true
}

'''
'''--- example/e2e/init.js ---
const detox = require('detox');
const config = require('../../package.json').detox;
const adapter = require('detox/runners/jest/adapter');
const specReporter = require('detox/runners/jest/specReporter');

// Set the default timeout
jest.setTimeout(120000);
jasmine.getEnv().addReporter(adapter);

// This takes care of generating status logs on a per-spec basis. By default, jest only reports at file-level.
// This is strictly optional.
jasmine.getEnv().addReporter(specReporter);

beforeAll(async () => {
  await detox.init(config);
});

beforeEach(async () => {
  await adapter.beforeEach();
});

afterAll(async () => {
  await adapter.afterAll();
  await detox.cleanup();
});

'''
'''--- example/index.js ---
/**
 * @format
 */

import {AppRegistry} from 'react-native';
import App from './App';
import {name as appName} from './app.json';

AppRegistry.registerComponent(appName, () => App);

'''
'''--- example/ios/ModalExample/AppDelegate.h ---
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

#import <React/RCTBridgeDelegate.h>
#import <UIKit/UIKit.h>

@interface AppDelegate : UIResponder <UIApplicationDelegate, RCTBridgeDelegate>

@property (nonatomic, strong) UIWindow *window;

@end

'''
'''--- example/ios/ModalExample/Images.xcassets/AppIcon.appiconset/Contents.json ---
{
  "images": [
    {
      "idiom": "iphone",
      "size": "29x29",
      "scale": "2x"
    },
    {
      "idiom": "iphone",
      "size": "29x29",
      "scale": "3x"
    },
    {
      "idiom": "iphone",
      "size": "40x40",
      "scale": "2x"
    },
    {
      "idiom": "iphone",
      "size": "40x40",
      "scale": "3x"
    },
    {
      "idiom": "iphone",
      "size": "60x60",
      "scale": "2x"
    },
    {
      "idiom": "iphone",
      "size": "60x60",
      "scale": "3x"
    }
  ],
  "info": {
    "version": 1,
    "author": "xcode"
  }
}

'''
'''--- example/ios/ModalExample/Images.xcassets/Contents.json ---
{
  "info": {
    "version": 1,
    "author": "xcode"
  }
}

'''
'''--- example/metro.config.js ---
/**
 * Metro configuration for React Native
 * https://github.com/facebook/react-native
 *
 * @format
 */
const path = require('path');
const blacklist = require('metro-config/src/defaults/blacklist');

const reactNativeModalRoot = path.resolve(__dirname, '..');

module.exports = {
  transformer: {
    getTransformOptions: async () => ({
      transform: {
        experimentalImportSupport: false,
        inlineRequires: false,
      },
    }),
  },
  watchFolders: [reactNativeModalRoot],
  resolver: {
    extraNodeModules: {
      'react-native': path.resolve(__dirname, 'node_modules/react-native'),
    },
    blacklistRE: blacklist([
      new RegExp(`${reactNativeModalRoot}/node_modules/react-native/.*`),
    ]),
  },
};

'''
'''--- example/package.json ---
{
  "name": "ModalExample",
  "version": "0.0.1",
  "private": true,
  "scripts": {
    "start": "react-native start",
    "test": "jest",
    "lint": "eslint ."
  },
  "dependencies": {
    "@babel/runtime": "^7.6.3",
    "babel": "^6.23.0",
    "react": "^16.9.0",
    "react-native": "0.61.5",
    "react-native-gesture-handler": "^1.5.0",
    "react-native-reanimated": "^1.4.0",
    "react-native-screens": "^1.0.0-alpha.23",
    "react-navigation": "^4.0.10",
    "react-navigation-stack": "^1.10.3"
  },
  "devDependencies": {
    "@babel/core": "^7.5.5",
    "@react-native-community/eslint-config": "^0.0.5",
    "babel-jest": "^24.9.0",
    "eslint": "^6.2.1",
    "jest": "^24.9.0",
    "metro-react-native-babel-preset": "^0.56.0",
    "react-test-renderer": "16.8.6",
    "typescript": "^3.6.4"
  },
  "jest": {
    "preset": "react-native"
  }
}

'''
'''--- example/tsconfig.json ---
{
  "compilerOptions": {
    "allowJs": true,
    "allowSyntheticDefaultImports": true,
    "esModuleInterop": true,
    "isolatedModules": false,
    "jsx": "react",
    "lib": ["es6"],
    "moduleResolution": "node",
    "noEmit": true,
    "strict": false,
    "target": "esnext",
    "resolveJsonModule": true
  }
}

'''
'''--- package.json ---
{
  "name": "@peersyst/react-native-modal",
  "version": "1.0.4",
  "description": "An enhanced React Native modal",
  "main": "dist/index.js",
  "types": "dist/index.d.ts",
  "files": [
    "dist/"
  ],
  "scripts": {
    "lint": "eslint \"src/**/*.{ts, tsx}\"",
    "test": "yarn run test:ts && yarn run lint",
    "release": "yarn semantic-release",
    "build": "tsc",
    "dev": "tsc --watch",
    "test:ts": "tsc --noEmit"
  },
  "husky": {
    "hooks": {
      "pre-commit": "pretty-quick --staged"
    }
  },
  "keywords": [
    "react-native",
    "react",
    "native",
    "modal",
    "android",
    "ios",
    "backdrop",
    "simple",
    "animated"
  ],
  "author": "Mazzarolo Matteo",
  "license": "MIT",
  "homepage": "https://github.com/react-native-community/react-native-modal",
  "repository": {
    "type": "git",
    "url": "https://github.com/react-native-community/react-native-modal"
  },
  "dependencies": {
    "prop-types": "^15.6.2",
    "react-native-animatable": "1.3.3",
    "react-native-keyboard-aware-scroll-view": "^0.9.5"
  },
  "devDependencies": {
    "@babel/core": "^7.5.5",
    "@babel/runtime": "^7.6.3",
    "@react-native-community/eslint-config": "^0.0.5",
    "@semantic-release/git": "^9.0.0",
    "@types/react": "^16.9.9",
    "@types/react-native": "^0.60.21",
    "@typescript-eslint/eslint-plugin": "^2.4.0",
    "@typescript-eslint/parser": "^2.4.0",
    "babel-core": "7.0.0-bridge.0",
    "babel-jest": "^24.9.0",
    "babel-plugin-module-resolver": "3.1.3",
    "eslint": "^6.5.1",
    "eslint-plugin-prettier": "^3.1.1",
    "husky": "^3.0.9",
    "jest": "^24.9.0",
    "metro-react-native-babel-preset": "0.56.0",
    "postinstall": "^0.5.1",
    "prettier": "^1.18.2",
    "pretty-quick": "^2.0.0",
    "react": "16.9.0",
    "react-native": "0.61.0",
    "react-test-renderer": "16.8.6",
    "semantic-release": "17.3.0",
    "typescript": "3.7.2"
  },
  "peerDependencies": {
    "react": "*",
    "react-native": ">=0.65.0"
  },
  "jest": {
    "preset": "react-native"
  },
  "test-runner": "jest",
  "publishConfig": {
    "access": "public"
  }
}

'''
'''--- src/index.ts ---
import {ReactNativeModal} from './modal';

export {ModalProps, ReactNativeModal, OnSwipeCompleteParams} from './modal';
export {
  AnimationEvent,
  Animations,
  SupportedAnimation,
  Orientation,
  Direction,
  PresentationStyle,
  OnOrientationChange,
  GestureResponderEvent,
} from './types';

export default ReactNativeModal;

'''
'''--- src/modal.style.ts ---
import {StyleSheet} from 'react-native';

export default StyleSheet.create({
  backdrop: {
    position: 'absolute',
    top: 0,
    bottom: 0,
    left: 0,
    right: 0,
    opacity: 0,
    backgroundColor: 'black',
  },
  content: {
    flex: 1,
    justifyContent: 'center',
  },
  containerBox: {
    opacity: 1,
    backgroundColor: 'transparent',
  },
});

'''
'''--- src/types.ts ---
import {Animation, CustomAnimation} from 'react-native-animatable';
import {NativeSyntheticEvent, NativeTouchEvent} from 'react-native';

export type OrNull<T> = null | T;

export type SupportedAnimation = Animation | CustomAnimation;
export type Animations = {
  animationIn: string;
  animationOut: string;
};

export type Orientation =
  | 'portrait'
  | 'portrait-upside-down'
  | 'landscape'
  | 'landscape-left'
  | 'landscape-right';

export type Direction = 'up' | 'down' | 'left' | 'right';
export type AnimationEvent = (...args: any[]) => void;
export type PresentationStyle =
  | 'fullScreen'
  | 'pageSheet'
  | 'formSheet'
  | 'overFullScreen';
export type OnOrientationChange = (
  orientation: NativeSyntheticEvent<any>,
) => void;

export interface GestureResponderEvent
  extends NativeSyntheticEvent<NativeTouchEvent> {}

'''
'''--- src/utils.ts ---
import {Dimensions} from 'react-native';
import * as animatable from 'react-native-animatable';
import {CustomAnimation, Animation} from 'react-native-animatable';
import {Animations} from './types';

const {height, width} = Dimensions.get('window');

export const initializeAnimations = () => {
  // Since react-native-animatable applies by default a margin of 100 to its
  // sliding animation, we reset them here overriding the margin to 0.
  const animationDefinitions: Record<string, CustomAnimation> = {
    slideInDown: makeSlideTranslation('translateY', -height, 0),
    slideInUp: makeSlideTranslation('translateY', height, 0),
    slideInLeft: makeSlideTranslation('translateX', -width, 0),
    slideInRight: makeSlideTranslation('translateX', width, 0),
    slideOutDown: makeSlideTranslation('translateY', 0, height),
    slideOutUp: makeSlideTranslation('translateY', 0, -height),
    slideOutLeft: makeSlideTranslation('translateX', 0, -width),
    slideOutRight: makeSlideTranslation('translateX', 0, width),
  };

  animatable.initializeRegistryWithDefinitions(animationDefinitions);
};

export const makeSlideTranslation = (
  translationType: string,
  fromValue: number,
  toValue: number,
) => ({
  from: {
    [translationType]: fromValue,
  },
  to: {
    [translationType]: toValue,
  },
});

// User can define custom react-native-animatable animations, see PR #72
// Utility for creating our own custom react-native-animatable animations
export const buildAnimations = ({
  animationIn,
  animationOut,
}: {
  animationIn: Animation | CustomAnimation;
  animationOut: Animation | CustomAnimation;
}): Animations => {
  let updatedAnimationIn: string;
  let updatedAnimationOut: string;

  if (isObject(animationIn)) {
    const animationName = JSON.stringify(animationIn);
    makeAnimation(animationName, animationIn as CustomAnimation);
    updatedAnimationIn = animationName;
  } else {
    updatedAnimationIn = animationIn;
  }

  if (isObject(animationOut)) {
    const animationName = JSON.stringify(animationOut);
    makeAnimation(animationName, animationOut as CustomAnimation);
    updatedAnimationOut = animationName;
  } else {
    updatedAnimationOut = animationOut;
  }

  return {
    animationIn: updatedAnimationIn,
    animationOut: updatedAnimationOut,
  };
};

export const reversePercentage = (x: number) => -(x - 1);

const makeAnimation = (name: string, obj: CustomAnimation): void => {
  animatable.registerAnimation(
    name,
    animatable.createAnimation(obj) as CustomAnimation,
  );
};

const isObject = (obj: any): obj is Object => {
  return obj !== null && typeof obj === 'object';
};

'''
'''--- tsconfig.json ---
{
  "include": ["src/**/*"],
  "exclude": [
    "node_modules",
    "babel.config.js",
    "metro.config.js",
    "jest.config.js"
  ],
  "compilerOptions": {
    "lib": ["es5", "es6", "esnext.asynciterable"],
    "allowSyntheticDefaultImports": false,
    "esModuleInterop": false,
    "jsx": "react",
    "moduleResolution": "node",
    "strict": true,
    "target": "esnext",
    "resolveJsonModule": true,
    "outDir": "./dist",
    "declaration": true
  }
}

'''