*GitHub Repository "klyvechen/near-hack-fe"*

'''--- README.md ---
# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in your browser.

The page will reload when you make changes.\
You may also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can't go back!**

If you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.

You don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `npm run build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)

'''
'''--- package.json ---
{
  "name": "my-app",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@testing-library/jest-dom": "^5.16.4",
    "@testing-library/react": "^13.1.1",
    "@testing-library/user-event": "^13.5.0",
    "bootstrap": "^5.1.3",
    "buffer": "^6.0.3",
    "near-api-js": "^0.44.2",
    "react": "^18.0.0",
    "react-bootstrap": "^2.2.3",
    "react-dom": "^18.0.0",
    "react-router-dom": "^6.3.0",
    "react-scripts": "5.0.1",
    "safe-buffer": "^5.2.1",
    "stream-browserify": "^3.0.0",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "PORT=8080 react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

'''
'''--- public/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <script src="https://unpkg.com/react/umd/react.production.min.js" crossorigin></script>
    <script src="https://unpkg.com/react-dom/umd/react-dom.production.min.js" crossorigin></script>
    <script src="https://unpkg.com/react-bootstrap@next/dist/react-bootstrap.min.js" crossorigin></script>
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

'''
'''--- public/manifest.json ---
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

'''
'''--- public/robots.txt ---
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

'''
'''--- src/App.css ---
.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

'''
'''--- src/App.js ---
import Hello from './Hello';
import Home from './Home';
import SignIn from './SignIn';
import ShowNFTs from './ShowNFTs';

import './App.css';
import {
  BrowserRouter,
  Routes,
  Switch,
  Route,
  Link
} from "react-router-dom";
import {Buffer} from 'buffer';
Buffer.from('anything','base64');
window.Buffer = window.Buffer || require("buffer").Buffer;

function App() {
  return (
    <div>
      <BrowserRouter>
        <Routes>
          <Route path="/" element={<Home/>}></Route>
          <Route path="/hello" element={<Hello/>}></Route>
          <Route path="/signIn" element={<SignIn/>}></Route>
          <Route path="/showNfts" element={<ShowNFTs/>}></Route>
        </Routes>
      </BrowserRouter>
    </div>
  );
}

export default App;

'''
'''--- src/App.test.js ---
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

'''
'''--- src/Hello.js ---
import './App.css';
import React, { useState } from 'react';
import * as nearApi from "near-api-js";
import {Buffer} from 'buffer';
import { Button } from 'react-bootstrap';
import 'bootstrap/dist/css/bootstrap.min.css';
Buffer.from('anything','base64');
window.Buffer = window.Buffer || require("buffer").Buffer;

const { keyStores, KeyPair, connect, WalletConnection } = nearApi;
const keyStore = new keyStores.BrowserLocalStorageKeyStore();
const testnetConfig = {
  networkId: "testnet",
  keyStore, 
  nodeUrl: "https://rpc.testnet.near.org",
  walletUrl: "https://wallet.testnet.near.org",
  helperUrl: "https://helper.testnet.near.org",
  explorerUrl: "https://explorer.testnet.near.org",
}

async function callContract(account, nameArg) {
  console.log(account)
  const contract = await new nearApi.Contract(
      account, // the account object that is connecting
      "klyve-hack.testnet",
      {
          // name of contract you're connecting to
          viewMethods: ["hello"], // view methods do not change state but usually return a value
          changeMethods: [""], // change methods modify state
          sender: account, // account object to initialize and sign transactions.
      }
  );
  return await contract.hello({"name": nameArg})
}

async function nearSayHello(name) {
  const near = await connect(testnetConfig)
  const wallet  = new WalletConnection(near);
  console.log(wallet.account())
  const msg = await callContract(wallet.account(), name);
  alert(msg)
}

function Hello() {
  const [name, setName] = useState("John");
  return (
    <div className="App">
      <header className="App-header">
        {/* <img src={logo} className="App-logo" alt="logo" /> */}
        <h2>Near Hack Klyve</h2>
        <input type="text" value={name} onChange={(e)=>{setName(e.target.value)}}/>
        <br/>
        <Button variant="primary" id="btn" onClick={()=> {
          console.log("name: " + name)
          nearSayHello(name);
        }}>Say Hello</Button>
        <div className="container">
          <small className="text-muted">
            It calls the view function on klyve-hack.testnet to get the result. 
          </small>
          <br/>
          <small className="text-muted">
            The action is done at the browser.
          </small>
        </div>
      </header>
    </div>
  );
}

export default Hello;

'''
'''--- src/Home.js ---
import Hello from './Hello';

import './App.css';
import {
  BrowserRouter,
  Routes,
  Switch,
  Route,
  Link,
  NavLink
} from "react-router-dom";
import {Buffer} from 'buffer';
Buffer.from('anything','base64');
window.Buffer = window.Buffer || require("buffer").Buffer;

function Home() {
  return (
    <div className="App">
      <header className="App-header">

        <NavLink exact activeClassName="active" to="/hello"> Hello </NavLink>

        <NavLink exact activeClassName="active" to="/signIn"> SignIn </NavLink>

        <NavLink exact activeClassName="active" to="/showNfts"> Show NFTs </NavLink>
      </header>
    </div>
  );
}

export default Home;

'''
'''--- src/ShowNFTs.js ---
import { util } from './utils/util';
import './App.css';
import React, { useEffect, useState } from 'react';
import { Buffer } from 'buffer';
import { Button } from 'react-bootstrap';
import 'bootstrap/dist/css/bootstrap.min.css';
import { utils } from 'near-api-js';
Buffer.from('anything','base64');
window.Buffer = window.Buffer || require("buffer").Buffer;

let nfts = {}
let ft_contract;
let ftContractName = 'klyve-hack-ft.klyve-hack.testnet';
let nftContractName = 'klyve-hack-nft.klyve-hack.testnet';

const ONE_NEAR = 1000000000000000000000000;

async function mintByNear(amount) {
  const walletId = util.getWallet().getAccountId()
  const yoctoAmount = (amount * 1000000000000000000000000).toLocaleString('fullwide', { useGrouping: false }) 
  await util.call(nftContractName, 'nft_mint_pay', [{ account_id: walletId }, "300000000000000", yoctoAmount])
}

async function mintByFt() {
  const yoctoAmount = (0.01 * 1000000000000000000000000).toLocaleString('fullwide', { useGrouping: false }) 
  await util.call(nftContractName, 'nft_mint_by_ft', [{ ft_amount: "200" }, "300000000000000", yoctoAmount])

}

async function showFtBalance(setFtBalance) {
  const walletId = util.getWallet().getAccountId()
  const result = await util.call(ftContractName, 'ft_balance_of', [{ account_id: walletId }])
  console.log(result)
  setFtBalance(result)
}

async function ftFaucet() {
  const walletId = util.getWallet().getAccountId()
  const yoctoAmount = await util.call(ftContractName, 'storage_balance_of', [{ account_id: walletId}]) != null ? 1 : 0.01 * ONE_NEAR
  const yoctoString = yoctoAmount.toLocaleString('fullwide', { useGrouping: false })
  await util.call(ftContractName, 'faucet', [{}, "300000000000000", yoctoString])
}

async function connectNFtContract() {
  const viewMethods = ['nft_total_supply', 'nft_tokens', 'nft_supply_for_owner', 'nft_tokens_for_owner']
  const changeMethods = ['nft_mint_pay', 'nft_mint_by_ft']
  await util.connectContract(nftContractName, viewMethods, changeMethods)
}

async function connectFtContract() {
  const viewMethods = ['ft_balance_of', 'storage_balance_of']
  const changeMethods = ['ft_transfer', 'ft_transfer_from', 'faucet']
  await util.connectContract(ftContractName, viewMethods, changeMethods)
}

async function handleLikelyNFTs(setShowNfts) {
  const nftContracts = await util.getLikelyNFTs()
  var filtered = nftContracts.filter(function(value, index, arr){ 
    return value !== nftContractName;
  });
  filtered = [nftContractName, ...filtered]
  const viewNftMethods = ['nft_total_supply', 'nft_tokens', 'nft_supply_for_owner', 'nft_tokens_for_owner']
  const changeNftMethods = []
  const walletId = util.getWallet().getAccountId()
  for (var c of filtered) {
    await util.connectContract(c, viewNftMethods, changeNftMethods)
    nfts[c] = await util.call(c, 'nft_tokens_for_owner', [{ account_id: walletId }])
  }
  let show = []
  for (var prop in nfts) {
    show = [...show, ...nfts[prop]]
  }
  setShowNfts(show)
}

async function initPage(setShowNfts, setFtBalance, setConnected) {
  setConnected(util.isConnected())
  handleLikelyNFTs(setShowNfts)
  await connectFtContract()
  showFtBalance(setFtBalance)
  await connectNFtContract()
}

export default function ShowNFTs() {

  const [connected, setConnected] = useState(false);
  const [showNfts, setShowNfts] = useState([]);
  const [ftBalance, setFtBalance] = useState(0);
  const [amountToMint, setAmountToMint] = useState(1);

  useEffect(() => {
    console.log(util.getWallet())
    console.log(util.isConnected())
    if (util.getWallet().isSignedIn()) {
      initPage(setShowNfts, setFtBalance, setConnected)
    }
  }, [connected])
  return (
    <div className="App">
      <header className="App-header">
        {/* <img src={logo} className="App-logo" alt="logo" /> */}
        <h2 style={{color: "teal"}}>Near Hack klyve</h2>
        <h3>mint & show NFTs</h3>
        {!connected ? 
          <>
            <Button variant="primary" id="btn" onClick={()=> {
              util.signIn();
            }}>Sign In</Button> 
            <div className="container">
              <small className="text-muted">
                Try to sign in 
              </small>
            </div>
          </>:
          <>
            <p>Welcome <strong style={{color: "silver"}}>{util.getWallet().getAccountId()}</strong> ! You are connected!</p>
            <p>Your <strong>$Big Nana</strong>  Balance: {ftBalance / 100}</p>
            <Button variant="primary" id="btn" onClick={()=> {
              util.signOut()
              setConnected(false)
              setShowNfts([])
            }}>Disconnect</Button>
          </>
        }
        {connected &&
          <div style={{width:"60%"}} >
            <div className="border border-secondary">
              <div className="border border-secondary">
                <div className="row">
                  <div className="col-12">
                    Mint nft by NEAR
                  </div>
                  <div className="col-4">
                    <Button variant="primary" id="mint" onClick={()=> {
                      mintByNear(amountToMint)
                    }}>Mint By Near</Button>
                  </div>
                  <div className="col-8">
                    <small style={{fontSize:"20px"}} >
                      use
                      <input style={{width: "50px", textAlign: "center"}} type="text" value={amountToMint} onChange={(e)=>{setAmountToMint(e.target.value)}}/>
                      N to mint 
                    </small> 
                  </div>
                  <div className="col-12">
                    <small style={{fontSize:"16px"}} >
                      Mint the nft by the $Near 
                      You need 1 $Near to mint<br/> 
                      If you enter a number over than 1, 
                      we will refund the extra amount back to you. <br/>
                    </small>
                  </div>
                  <br/>
                </div>
              </div>
              <div className="border border-secondary">
                <div className="row">
                  <div className="col-12">
                    Mint nft by Fungible-Token
                  </div>
                  <div className="col-4">
                    <Button variant="primary" id="mint" onClick={()=> {
                      mintByFt()
                    }}>Mint By Big Nana</Button>
                  </div>
                  <div className="col-8">
                    <Button variant="primary" id="mint" onClick={()=> {
                      ftFaucet()
                    }}>Big Nana Faucet</Button>
                  </div>
                  <div className="col-12">
                    <small style={{fontSize:"16px"}}>
                      Mint the nft by the fungible token $Big Nana. 
                      If you want to use the $Big Nana to mint,<br/> 
                      please use the faucet to get the $Big Nana first, 
                      and you have enough $Big Nana to mint. <br/> 
                      You will get 10 $Big Nana for every faucet. <br/> 
                    </small>
                  </div>
                </div>
              </div>
            </div>
            <div className="border border-secondary">
              <div>
                Your currnet NFTs
              </div>
              <div className="row">      
                { showNfts.length > 0 && showNfts.map((n, i) => {
                  return ( 
                    <div className="col-lg-6 col-md-6 col-sm-12">
                      <div className="card d-flex justify-content-around" key={'nft-card' + i}>
                        <img className="card-img-top" alt="Card image cap" src={n.metadata.media} key={'nft' + i}></img>
                        <div className="card-body">
                          <h5 className="card-title text-primary">{n.metadata.title}</h5>
                          <p className="card-text text-secondary">{n.metadata.description}</p>
                          {/* <a href="#" className="btn btn-primary">Go somewhere</a> */}
                        </div>
                      </div>
                    </div>)
                })}
              </div>
            </div>
          </div>
        }

      </header>
    </div>
  );
}
'''
'''--- src/SignIn.js ---
import './App.css';
import React, { useEffect, useState } from 'react';
import * as nearApi from "near-api-js";
import {Buffer} from 'buffer';
import { Button } from 'react-bootstrap';
import 'bootstrap/dist/css/bootstrap.min.css';
Buffer.from('anything','base64');
window.Buffer = window.Buffer || require("buffer").Buffer;

const { keyStores, KeyPair, connect, WalletConnection } = nearApi;
const keyStore = new keyStores.BrowserLocalStorageKeyStore();
const testnetConfig = {
  networkId: "testnet",
  keyStore, 
  nodeUrl: "https://rpc.testnet.near.org",
  walletUrl: "https://wallet.testnet.near.org",
  helperUrl: "https://helper.testnet.near.org",
  explorerUrl: "https://explorer.testnet.near.org",
}

let near;
let wallet;

async function signOut() {
  await wallet.signOut();
}

async function signIn() {
  wallet.requestSignIn()
}

async function initPage(setConnected) {
  near = await connect(testnetConfig)
  wallet = new WalletConnection(near)
  setConnected(wallet.isSignedIn())
}

function SignIn() {

  const [connected, setConnected] = useState(false);

  useEffect(()=> {
    initPage(setConnected)
  })
  return (
    <div className="App">
      <header className="App-header">
        {/* <img src={logo} className="App-logo" alt="logo" /> */}
        <h2>Near Hack Klyve</h2>
        {!connected ? 
          <>
            <Button variant="primary" id="btn" onClick={()=> {
              const signed = signIn();
              setConnected(signed)
            }}>Sign In</Button> 
            <div className="container">
            <small className="text-muted">
              Try to sign in 
            </small>
          </div>
          </>:
          <>Welcome! You are connected!
          <Button variant="primary" id="btn" onClick={()=> {
            signOut()
            setConnected(false)
          }}>Disconnect</Button>
          </>
        }
      </header>
    </div>
  );
}

export default SignIn;

'''
'''--- src/index.css ---
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

'''
'''--- src/index.js ---
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';
import { util } from './utils/util';

const root = ReactDOM.createRoot(document.getElementById('root'));

util.init()
.then(() => {
  root.render(
    <React.StrictMode>
      <App />
    </React.StrictMode>
  )
})
.catch(console.error)

// root.render(
//   <React.StrictMode>
//     <App />
//   </React.StrictMode>
// );

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();

'''
'''--- src/logo.svg ---
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>
'''
'''--- src/reportWebVitals.js ---
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

'''
'''--- src/setupTests.js ---
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

'''
'''--- src/utils/nftUtil.js ---
import * as nearApi from "near-api-js";
import { Buffer } from 'buffer';
import 'bootstrap/dist/css/bootstrap.min.css';
Buffer.from('anything','base64');
window.Buffer = window.Buffer || require("buffer").Buffer;

const { keyStores, KeyPair, connect, WalletConnection } = nearApi;
const keyStore = new keyStores.BrowserLocalStorageKeyStore();
const testnetConfig = {
  networkId: "testnet",
  keyStore, 
  nodeUrl: "https://rpc.testnet.near.org",
  walletUrl: "https://wallet.testnet.near.org",
  helperUrl: "https://helper.testnet.near.org",
  explorerUrl: "https://explorer.testnet.near.org",
}

let near;
let wallet;
let status;
let likelyNFTsContracts;

export const utils = {

    getLikelyNFTs() {
        return likelyNFTsContracts
    },

    getWallet() {
        return wallet
    },

    getWalletStatus() {
        return status
    },

    async signOut() {
        await wallet.signOut()
    },

    async signIn() {
        wallet.requestSignIn()
    },

    async connectLikelyNFTs() {
        const url = 'https://helper.testnet.near.org/account/{0}/likelyNFTs'.replace('{0}', wallet.getAccountId())
        const res = await fetch(url)
        console.log(res)
        likelyNFTsContracts = await res.json();
    },

    async init() {
        near = await connect(testnetConfig)
        wallet = new WalletConnection(near)
        status = wallet.isSignedIn()
        if (wallet.isSignedIn()) {
            this.connectLikelyNFTs();
        }
    }

}
'''
'''--- src/utils/util.js ---
import * as nearApi from "near-api-js";
import { Buffer } from 'buffer';
import 'bootstrap/dist/css/bootstrap.min.css';
Buffer.from('anything','base64');
window.Buffer = window.Buffer || require("buffer").Buffer;

const { keyStores, KeyPair, connect, WalletConnection } = nearApi;
const keyStore = new keyStores.BrowserLocalStorageKeyStore();
const testnetConfig = {
  networkId: "testnet",
  keyStore, 
  nodeUrl: "https://rpc.testnet.near.org",
  walletUrl: "https://wallet.testnet.near.org",
  helperUrl: "https://helper.testnet.near.org",
  explorerUrl: "https://explorer.testnet.near.org",
}

let near;
let wallet;
let status;
let likelyNFTsContracts;
let contracts = {};

export const util = {

    async getLikelyNFTs() {
        if (!wallet.isSignedIn()) {
            return
        }
        return likelyNFTsContracts
    },

    getWallet() {
        return wallet
    },

    isConnected() {
        return status
    },

    async signOut() {
        return await wallet.signOut()
    },

    async signIn() {
        wallet.requestSignIn()
    },

    async connectLikelyNFTs() {
        const url = 'https://helper.testnet.near.org/account/{0}/likelyNFTs'.replace('{0}', wallet.getAccountId())
        const res = await fetch(url)
        console.log(res)
        return await res.json();
    },

    async init() {
        near = await connect(testnetConfig)
        wallet = new WalletConnection(near)
        status = wallet.isSignedIn()
        if (wallet.isSignedIn()) {
            likelyNFTsContracts = await this.connectLikelyNFTs()
        }
    },

    async connectContract(contractName, viewMethods, changeMethods) {
        contracts[contractName] = await new nearApi.Contract(
            wallet.account(), // the account object that is connecting
            contractName,
            {
                // name of contract you're connecting to
                viewMethods: viewMethods, // view methods do not change state but usually return a value
                changeMethods: changeMethods, // change methods modify state
                sender: wallet.account(), // account object to initialize and sign transactions.
            }
        );
    },

    async call(contractName, method, args) {
        return await contracts[contractName][method](...args)
    }

}
'''