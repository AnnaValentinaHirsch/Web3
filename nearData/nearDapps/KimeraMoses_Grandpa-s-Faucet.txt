*GitHub Repository "KimeraMoses/Grandpa-s-Faucet"*

'''--- .env ---
REACT_APP_APIKEY = 371687a8-8006-4987-bbcf-29d41c56695b
REACT_APP_BASEURL = https://grandpas-faucet.herokuapp.com
'''
'''--- .github/workflows/firebase-hosting-merge.yml ---
# This file was auto-generated by the Firebase CLI
# https://github.com/firebase/firebase-tools

name: Deploy to Firebase Hosting on merge
'on':
  push:
    branches:
      - master
env:
  CI: false
jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: npm ci && npm run build
      - uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT_GP_FAUCET }}'
          channelId: live
          projectId: gp-faucet

'''
'''--- .github/workflows/firebase-hosting-pull-request.yml ---
# This file was auto-generated by the Firebase CLI
# https://github.com/firebase/firebase-tools

name: Deploy to Firebase Hosting on PR
'on': pull_request
jobs:
  build_and_preview:
    if: '${{ github.event.pull_request.head.repo.full_name == github.repository }}'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: npm ci && npm run build
      - uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT_GP_FAUCET }}'
          projectId: gp-faucet

'''
'''--- README.md ---
# Grandpa's Faucet UI/UX
## _The fully functional web application of grandpa's faucet_

# Project Details
Grandpa's Faucet is project that was assigned to me by [Isaac Mubiru](https://github.com/zac-09), my role was to implement the UI from the Xd mockup. 
The application is built in Reactjs,Redux, React Router v6 and material icons

## Client's Requirements
The tasks are as follows:

1. Responsive and cross-browser page background and footer
2. Login by Button to connect to Metamask Wallet via Polygon(matic.js) library
3. OTP form and verification if member
4. Redirection link to https://whiteboardcrypto.com/ after login if not a member
5. FAQs accordion
6. Localization (English only)
7. Form
 - Amount Input field + Captcha
 - "Select with dummy data (will be loaded from DB)
  Options: MATIC, FTM, ETH, AVAX, ONE, ETH, NEAR, CELO, BNB, FTM"
 - Request button disabled till wallet address/IP is AJAX-verified from backend as not blacklisted with valid amount
8. Transaction Status / Blacklisted user components
9. Display last 5 successful transactions below input section just before FAQ accordion(updated every second).
10. Connect frontend to backend
10. Testing and Debugging
11. Documentation (Readme)

After the first design, other requirements recieved were
Also please rename the routes:
- otp-confirm to confirm-otp
- whiteboard to sign-up 
- meta-mask to connect-metamask
Also remove the Captcha from the confirm page as it is only accessible to logged in users so they must have verified the OTP.
Lastly, please redirect all unknown pages to the sign-in page.
Remember to create a base module for API connections to the backend that will get credentials from a .env file.
It could be of the form
apiRequest(method, url, payload) {
try {
// adios, request, fetch or anything you use here.
}
catch(error){
// format general errors from API here for localization 
}
}

# Features
> Mobie Responsiveness: 
 We had a task of making sure that the web pages are made responsive on different device widths

> Semantic tags:
 Use of the know semantic tags was also a checkpoint during the project, making sure that we used only tags that were neccessary.

> Beautiful UI and UX ✨:
 Bringing out the webpages as they appear in the mockup was the major goal of this task.

> Adding Logic and Making API Calls: 
After the UI implementation, i had to add logic to the UIs making different calls and storing data in redux and passing it on to the different components where it had to be displayed. It was such an awesome experience getting to learn how to connect to metamask extension and capturing the account address to use it when making calls for different transactions.

##### DEMO:    
![](src/assets/UI/Web1920–2.png?raw=true "Sign In")
![](src/assets/UI/Web1920–3.png?raw=true "Confirm Otp")
![](src/assets/UI/Web1920–4.png?raw=true "Connect to WhiteBoard Crypto")
![](src/assets/UI/Web1920–5.png?raw=true "Connect to MetaMask")
![](src/assets/UI/Web1920–6.png?raw=true "Transactions")
![](src/assets/UI/Web1920–7.png?raw=true "Transaction Success")
![](src/assets/UI/Web1920–8.png?raw=true "Transaction Failed")
![](src/assets/UI/Web1920–9.png?raw=true "Transaction Black List")

'''
'''--- config.json ---
{
  "posRootERC20": "0x655F2166b0709cd575202630952D71E2bB0d61Af",
  "posChildERC20": "0xfe4F5145f6e09952a5ba9e956ED0C25e3Fa4c7F1",
  "posWETH": "0x714550C2C1Ea08688607D86ed8EeF4f5E4F22323",
  "rootChainWETH": "0x60D4dB9b534EF9260a88b0BED6c486fe13E604Fc",
  "plasmaWETH": "0x4DfAe612aaCB5b448C12A591cD0879bFa2e51d62",
  "plasmaRootERC20": "0x3f152B63Ec5CA5831061B2DccFb29a874C317502",
  "plasmaChildERC20": "0x2d7882beDcbfDDce29Ba99965dd3cdF7fcB10A1e",
  "MATIC_RPC": "https://rpc-mumbai.matic.today",
  "ETHEREUM_RPC": "https://goerli.infura.io/v3/541999c8adbc4c3594d03a6b7b71eda6",
  "VERSION": "mumbai",
  "NETWORK": "testnet",
  "MATIC_CHAINID": 80001,
  "ETHEREUM_CHAINID": 5
}

'''
'''--- firebase.json ---
{
  "hosting": {
    "public": "build",
    "ignore": [
      "firebase.json",
      "**/.*",
      "**/node_modules/**"
    ],
    "rewrites": [
      {
        "source": "**",
        "destination": "/index.html"
      }
    ]
  }
}

'''
'''--- package.json ---
{
  "name": "pos",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@material-ui/core": "^4.12.3",
    "@material-ui/icons": "^4.11.2",
    "@material-ui/lab": "^4.0.0-alpha.60",
    "@maticnetwork/maticjs": "^2.0.12",
    "@maticnetwork/walletconnect-provider": "0.0.1-beta.1",
    "@reduxjs/toolkit": "^1.7.1",
    "@testing-library/jest-dom": "^4.2.4",
    "@testing-library/react": "^9.5.0",
    "@testing-library/user-event": "^7.2.1",
    "@truffle/hdwallet-provider": "^1.0.43",
    "bootstrap": "^4.5.2",
    "react": "^17.0.2",
    "react-dom": "^16.13.1",
    "react-redux": "^7.2.6",
    "react-router-dom": "^6.2.1",
    "react-scripts": "3.4.3",
    "web3": "^1.2.11"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": "react-app"
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

'''
'''--- public/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Grandpa's Faucet website"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/favicon.png" />
    <title>GrandPa's Faucet</title>
    <link
      rel="stylesheet"
      href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap"
    />
    <link
      rel="stylesheet"
      href="https://fonts.googleapis.com/icon?family=Material+Icons"
    />
    <link
      href="https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700&display=swap"
      rel="stylesheet"
    />
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
  </body>
</html>

'''
'''--- public/manifest.json ---
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

'''
'''--- public/robots.txt ---
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

'''
'''--- src/App.js ---
import { useEffect } from "react";
import { Routes, Route, Link, Navigate } from "react-router-dom";
import Confirmation from "./components/Confirmation/Confirmation";
import Home from "./components/Home/Home";
import MainTemplate from "./components/MainTemplate/MainTemplate";
import SignIn from "./components/SignIn/SignIn";
import Transactions from "./components/Transactions/Transactions";
import Login from "./components/Home/Login";
import React, { Component } from "react";
import { useDispatch, useSelector } from "react-redux";
import { AutoAuthenticate } from "./store/Actions/AuthActions";
function App() {
  const dispatch = useDispatch();

  const isLoggedIn = useSelector((state) => state.auth.isLoggedIn);
  const isVerified = useSelector((state) => state.auth.isAuth);
  const hasAddress = useSelector((state) => state.auth.hasAddress);
  const hasWallet = useSelector(state=>state.auth.hasWallet);

  const isAuthenticated = isLoggedIn && isVerified && hasAddress && hasWallet;
  // console.log("isLoggedIn", isLoggedIn)
  // console.log("isVerified", isVerified)
  // console.log("hasAddress", hasAddress)
  // console.log("hasWallet", hasWallet)
  // console.log(isAuthenticated)
  
  useEffect(() => {
    AutoAuthenticate(dispatch);
  }, []);

  return (
    <div className="App">
      <Routes>
        <Route path="*" element={isAuthenticated?<Navigate to="/transactions"/>:(isLoggedIn && !isVerified)? <Navigate to="/confirm-otp"/>:(isLoggedIn && isVerified && !hasAddress)?<Navigate to="/connect-metamask"/>: <Login />} />
        <Route path="/*" element={<Home />}>
          <Route
            path="confirm-otp"
            element={!isLoggedIn?<Navigate to="/sign-in"/>: (isLoggedIn && isVerified)? <Navigate to="/connect-metamask"/>:
              <MainTemplate
                type="otp"
                title="OTP"
                description="Please enter the OTP received at your email addresses to continue."
              />
            }
          />
          <Route
            path="sign-up"
            element={(!isLoggedIn && !isVerified) &&
              <MainTemplate
                type="whiteBoard"
                title="WhiteBoard Crypto"
                description="Please click the button below to setup your account on WhiteBoard Crypto."
              />
            }
          />
          <Route
            path="connect-metamask"
            element={isAuthenticated? <Navigate to="/transactions"/>:!isLoggedIn?<Navigate to="/sign-in"/>:!isVerified?<Navigate to="/confirm-otp"/>:
              <MainTemplate
                type="metaMask"
                title="MetaMask Wallet"
                description="Please click the button below to connect your MetaMask Wallet account."
              />
            }
          />
          <Route
            path="transaction-success"
            element={
              <MainTemplate
                type="transactionSuccess"
                title="Transaction Status"
                description="Congratulations! Your transaction has been completed successfully."
              />
            }
          />
          <Route
            path="transaction-fail"
            element={
              <MainTemplate
                type="transactionFail"
                title="Transaction Status"
                description="Oh no! Something went wrong and your transaction could not be completed."
              />
            }
          />
          <Route path="confirm" element={<Confirmation />} />
          <Route path="transactions" element={!isLoggedIn? <Navigate to="/sign-in"/>:!isVerified? <Navigate to="/confirm-otp"/>:!hasAddress?<Navigate to="/connect-metamask"/>: <Transactions />} />
        </Route>

      </Routes>
    </div>
  );
}

export default App;

'''
'''--- src/components/Button/Button.css ---
.grandpa__btn{
    padding: 16px 20px;
    border-radius: 2px;
    outline: none;
    border: none;
    cursor: pointer;
    transition: color 0.4s linear;
    position: relative;
    z-index: 1;
    border: 0;
    overflow: hidden;
    border-radius: 10px;
    margin: 14px 0;
    width: 100%;
    box-sizing: border-box;
    color: #fff;
    font-weight: 600;
    user-select: none;
}
.grandpa__btn.grandpa__btn_primary{
    background-color: #4FBF87;
}
.grandpa__btn.grandpa__btn_secondary{
    background-color: #0964ee;
}
.grandpa__btn.btn__disabled{
    pointer-events: none;
    cursor: default;
    color: rgba(0, 0, 0, 0.26);
    box-shadow: none;
    background-color: rgba(0, 0, 0, 0.12);
    
}
'''
'''--- src/components/Button/Button.js ---
import React from "react";
import "./Button.css";

const Button = (props) => {
    const { type, disabled } = props
  return (
    <button
      className={`grandpa__btn ${
        type === "secondary" ? "grandpa__btn_secondary" : "grandpa__btn_primary"
      } ${disabled? "btn__disabled" : ""}`}
      {...props}
    >
      {props.children}
    </button>
  );
};

export default Button;

'''
'''--- src/components/Confirmation/Confirmation.css ---
.grandpa__checkbox_wrapper{
    border-radius: 10px;
    display: flex;
    flex-direction: column;
    min-width: 300px;
    align-items: center;
    padding: 10px 20px;
    text-align: center;
}
.grandpa__checkbox{
    background-color: #fff;
    width: 100%;
    color: #000;
}
'''
'''--- src/components/Confirmation/Confirmation.js ---
import { Checkbox, FormControlLabel } from "@material-ui/core";
import { green } from "@material-ui/core/colors";
import CircleChecked from "@material-ui/icons/CheckCircleOutline";
import CircleCheckedFilled from "@material-ui/icons/CheckCircle";
import CircleUnchecked from "@material-ui/icons/RadioButtonUnchecked";
import React from "react";
import "./Confirmation.css";
import Button from "../Button/Button";

const Confirmation = () => {
  return (
    // <div >
    <form className="grandpa__checkbox_wrapper">
      <div className="grandpa__checkbox">
        <Checkbox icon={<CircleUnchecked />} checkedIcon={<CircleChecked />} />
        I am Human
      </div>
      <Button type="secondary">Connect</Button>
    </form>
    // </div>
  );
};

export default Confirmation;

'''
'''--- src/components/Dropdown/Dropdown.js ---
import React, { useState } from "react";

//===MUI IMPORTS===
import ArrowDropDownIcon from "@material-ui/icons/ArrowDropDown";
import ArrowDropUpIcon from "@material-ui/icons/ArrowDropUp";
import { Paper } from "@material-ui/core";

//===REDUX IMPORTS===

//===COMPONENT IMPORTS===
import classes from "./Dropdown.module.css";
import { useSelector } from "react-redux";

const Dropdown = (props) => {
  const { selected, setSelected, values, setValues } = props;
  const [isActive, setIsActive] = useState(false);
  const [clicked, setClicked]=useState(true)
  const Faucets = useSelector((state) => state.transactions.faucets);
  const selectedItemHandler = (Value) => {
    setSelected(Value.name);
    setIsActive(false);
    setValues({ ...values, faucet:Value.uuid  });
    setClicked(false)
  };

  return (
    <div className={classes.gpa__dropdown}>
      <div
      className={`${classes.gpa__dropdown_button} ${clicked? classes.btn__inactive: ''}`}
        onClick={(e) => setIsActive(!isActive)}
      >
        <div className={classes.gpa__dropdown_button_text}>
          {selected}
        </div>
        <div>{isActive ? <ArrowDropUpIcon /> : <ArrowDropDownIcon />}</div>
      </div>
      {isActive && (
        <Paper
          className={classes.gpa__dropdown_content}
        >
          {Faucets && Faucets.map((faucet, index) => {
            return (
              <div
                key={index}
                className={classes.gpa__dropdown_item}
                onClick={(e) => selectedItemHandler(faucet)}
              >
                {faucet.name}
              </div>
            );
          })}
        </Paper>
      )}
    </div>
  );
};

export default Dropdown;

'''
'''--- src/components/Dropdown/Dropdown.module.css ---
.gpa__dropdown {
  width: 100%;
  margin: 0 auto;
  position: relative;
}
.gpa__dropdown_button {
  padding: 7px 15px;
  background-color: #fff;
  border: 1px solid #e8e8e8;
  border-radius: 10px;
  display: flex;
  align-items: center;
  justify-content: space-between;
  cursor: pointer;
  user-select: none;
}
.gpa__dropdown_button_text {
  text-transform: capitalize;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.gpa__dropdown_button.btn__inactive{
  color: #0000009a;
}
.gpa__dropdown_content {
  position: absolute;
  width: 100%;
  top: 86%;
  left: 0;
  border-radius: 4px;
  z-index: 10;
  box-sizing: border-box;
  max-height: 300px;
  overflow-y: auto;
  text-align: left;
  overflow-x: hidden;
}
.gpa__dropdown_item {
  padding: 5px;
  padding-left: 15px;
  cursor: pointer;
  width: 100%;
  border-bottom: 1px solid #eee;
  text-transform: capitalize;
  user-select: none;
}
.gpa__dropdown_item:last-child {
  border-bottom-left-radius: 4px;
  border-bottom-right-radius: 4px;
  border-bottom: none;
}
.gpa__dropdown_item:first-child {
  border-top-left-radius: 4px;
  border-top-right-radius: 4px;
}
.gpa__dropdown_item:hover {
  background-color: #1e90ff;
  color: #fff;
}

'''
'''--- src/components/FAQs/Faq.css ---
.grandpa__faq_card{
    border-radius: 20px;
    background-color: #fff;
}
'''
'''--- src/components/FAQs/Faq.js ---
import React from 'react';
import FaqCard from './FaqCard';

const desc = `A cryptocurrency faucet is a tool that gives users of a blockchain a very small amount of crypto to perform basic transactions. Just like you need a stamp to send mail, when it comes to cryptocurrencies, you need ${"'gas'"} . Gas is usually the native blockchain's coin like Ethereum, BNB, or Matic`
const desc_2 = "Each week, you can claim up to $1 worth of crypto as gas using this faucet. This faucet is only available to WhiteboardCrypto Club members, and you can split the weekly $1 allowance up into any of the listed chains"
const desc_3= ""
const Faq = () => {
  return (
      <>
      <FaqCard FaqOpen={true} FaqTitle="What is a Faucet?" FaqContent={desc}/>
      <FaqCard FaqOpen ={false} FaqTitle="How much can I get?" FaqContent={desc_2}/>
      <FaqCard FaqOpen ={false} FaqTitle="How do I use it?" video={true}/>
      </>
  );
};

export default Faq;

'''
'''--- src/components/FAQs/FaqCard.css ---
.grandpa__faq_card{
    border-radius: 10px;
    margin-bottom: 10px;

}
.grandpa__faq_card.grandpa__card_open{
    background-color: #262626;
}
.grandpa__faq_card.grandpa__card_close{
    border: 1px solid #262626;
}
.grandpa__faq_card_header{
    display: flex;
    justify-content: space-between;
    padding: 15px 20px;
    align-items: center;
    cursor: pointer;
}
.grandpa__faq_card_header svg{
    color: #4FBF87;
}

.grandpa__faq_card_header h4{
    margin: 0;  
}

.grandpa__faq_card_content{
    padding: 10px 20px;
    border-top: 1px solid #595959;
}
.grandpa__faq_card_content iframe{
    width: 100%;
}
'''
'''--- src/components/FAQs/FaqCard.js ---
import React, { useState } from "react";
import RemoveIcon from "@material-ui/icons/Remove";
import AddIcon from "@material-ui/icons/Add";
import "./FaqCard.css";

const FaqCard = (props) => {
  const { FaqTitle, FaqContent, FaqOpen, video } = props;
  const [open, setOpen] = useState(FaqOpen);
  return (
    <div
      className={`grandpa__faq_card ${
        open ? "grandpa__card_open" : "grandpa__card_close"
      }`}
    >
      <div className="grandpa__faq_card_header" onClick={() => setOpen(!open)}>
        <h4>{FaqTitle}</h4>
        {open ? <RemoveIcon /> : <AddIcon />}
      </div>
      {open && (
        <div className="grandpa__faq_card_content">
          {FaqContent}
          {video && (
            <iframe
              height="200"
              src="https://www.youtube.com/embed/rYQgy8QDEBI"
              title="YouTube video player"
              frameborder="0"
              allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
              allowfullscreen
            ></iframe>
          )}
        </div>
      )}
    </div>
  );
};

export default FaqCard;

'''
'''--- src/components/Home/Home.css ---
body {
  background-color: #000000;
  padding: 0;
  margin: 0;
  color: #fff;
  font-family: "Poppins", sans-serif;
}
.grandpa__header {
  margin-bottom: 20px;
}
.grandpa__header img {
  width: 200px;
}
.grandpa__wrapper {
  padding: 30px 40px;
}
.grandpa__content_wrapper {
  display: flex;
  align-items: flex-start;
  justify-content: center;
}
.grandpa__main_content_wrapper {
  box-sizing: border-box;
  -moz-box-sizing: border-box;
  -webkit-box-sizing: border-box;
  width: 70%;
  border: 15px solid #262626;
  background: #262626;
  background-image: url("../../assets/images/background.png");
  background-position: center left;
  min-height: 450px;
  padding: 20px;
  border-radius: 20px;
  display: flex;
  justify-content: center;
  align-items: center;
}
.grandpa__faq_wrapper {
  width: 30%;
  padding: 0 20px 20px;
}

@media screen and (max-width: 680px) {
  .grandpa__wrapper {
    padding: 0px;
  }
  .grandpa__header {
    padding: 30px 0 0 30px;
}
  .grandpa__content_wrapper {
    flex-direction: column;
    align-items: center;
    padding: 20px 10px;
    width: 100%;
    box-sizing: border-box;
  }
  .grandpa__faq_wrapper,
  .grandpa__main_content_wrapper {
    width: 100%;
    margin: 10px 0px;
  }
  .grandpa__faq_wrapper {
    padding: 0 10px 20px;
  }
}

/*==== REMOVE THIS AFTER DELETING LINKS==== */
.grandpa__link__wrapper a{
  color: #fff;
  text-decoration: none;
  user-select: none;
}
.grandpa__link__wrapper a:hover{
  color: #4FBF87;
}
'''
'''--- src/components/Home/Home.js ---
import React from "react";
import { Link, Outlet } from "react-router-dom";
import Grandpa_Logo from "../../assets/images/Grandpa-Logo.png";
import Faq from "../FAQs/Faq";
import "./Home.css";

const Home = () => {
  return (
    <div className="grandpa__wrapper">
      <div className="grandpa__header">
        <Link to="/">
          <img src={Grandpa_Logo} alt="GrandPa" />
        </Link>
      </div>
      <div className="grandpa__content_wrapper">
        <div className="grandpa__main_content_wrapper">
          <Outlet />
        </div>
        <div className="grandpa__faq_wrapper">
          <Faq />
        </div>
      </div>
      {/* <div
        className="grandpa__link__wrapper"
        style={{
          padding: "10px 30px 10px",
          backgroundColor: "#262626",
          display: "flex",
          flexWrap: "wrap",
          justifyContent: "space-around",
          borderRadius: 10,
          marginTop: 10
        }}
      >
        <Link to="/sign-in">Sign in</Link>
        <Link to="/confirm-otp">Confirm Otp</Link>
        <Link to="/sign-up">Sign up</Link>
        <Link to="/connect-metamask">Connect Mask</Link>
        <Link to="/status">Status</Link>
        <Link to="/transactions">Transactions</Link>
      </div> */}
    </div>
  );
};

export default Home;

'''
'''--- src/components/Home/Login.js ---
import React from "react";
import { Link, Outlet } from "react-router-dom";
import Grandpa_Logo from "../../assets/images/Grandpa-Logo.png";
import Faq from "../FAQs/Faq";
import SignIn from "../SignIn/SignIn";
import "./Home.css";

const Login = () => {
  return (
    <div className="grandpa__wrapper">
      <div className="grandpa__header">
        <Link to="/">
          <img src={Grandpa_Logo} alt="GrandPa" />
        </Link>
      </div>
      <div className="grandpa__content_wrapper">
        <div className="grandpa__main_content_wrapper">
          <SignIn />
        </div>
        <div className="grandpa__faq_wrapper">
          <Faq />
        </div>
      </div>
      {/* <div
        className="grandpa__link__wrapper"
        style={{
          padding: "10px 30px 10px",
          backgroundColor: "#262626",
          display: "flex",
          flexWrap: "wrap",
          justifyContent: "space-around",
          borderRadius: 10,
          marginTop: 10
        }}
      >
        <Link to="/sign-in">Sign in</Link>
        <Link to="/confirm-otp">Confirm Otp</Link>
        <Link to="/sign-up">Sign up</Link>
        <Link to="/connect-metamask">Connect Mask</Link>
        <Link to="/status">Status</Link>
        <Link to="/transactions">Transactions</Link>
      </div> */}
    </div>
  );
};

export default Login;

'''
'''--- src/components/MainTemplate/MainTemplate.js ---
import { Checkbox, FormControlLabel } from "@material-ui/core";
import CircleChecked from "@material-ui/icons/CheckCircleOutline";
import CircleCheckedFilled from "@material-ui/icons/CheckCircle";
import CircleUnchecked from "@material-ui/icons/RadioButtonUnchecked";
import React, { useState } from "react";
import "../SignIn/SignIn.css";
import Button from "../Button/Button";
import Otp from "../OTP/Otp";
import Confirmation from "../Confirmation/Confirmation";
import WhiteBoard from "../WhiteBoard/WhiteBoard";
import MetaMask from "../MetaMask/MetaMask";
import TransactionStatus from "../TransactionStatus/TransactionStatus";
import { Alert } from "@material-ui/lab";
import { useSelector } from "react-redux";

const MainTemplate = (props) => {
  const { title, description, type, action } = props;
  const [message, setMessage] = useState("No account with your email found!");
  const user = useSelector((state) => state.auth.user);

  return (
    <div className="grandpa__sign_up">
      {type === "otp" ? (
        <Alert severity="success">Your OTP is {user && user.otp}</Alert>
      ) : (
        type === "whiteBoard" && (
          <Alert severity="error" icon={false}>
            {message}
          </Alert>
        )
      )}
      <h4>{title}</h4>
      <p>{description}</p>
      <div className="grandpa__form_wrapper">
        {type === "otp" ? (
          <Otp />
        ) : type === "confirm" ? (
          <Confirmation />
        ) : type === "whiteBoard" ? (
          <WhiteBoard setMessage={setMessage} />
        ) : type === "metaMask" ? (
          <MetaMask />
        ) : type === "transactionSuccess" ? (
          <TransactionStatus status="success" />
        ) : type === "transactionFail" ? (
          <TransactionStatus status="fail" />
        ) : (
          <form>
            <input
              type="text"
              placeholder="Enter Email Address…"
              className="grandpa__input_field"
            />
            {(type === "signin" || type === "check") && (
              <div className="grandpa__checkbox">
                <Checkbox
                  icon={<CircleUnchecked />}
                  checkedIcon={<CircleChecked />}
                />
                I am Human
              </div>
            )}
            <Button>Sign In</Button>
          </form>
        )}
      </div>
    </div>
  );
};

export default MainTemplate;

'''
'''--- src/components/MetaMask/MetaMask.js ---
import React, { useState, useEffect } from "react";
//====COMPONENT IMPORTS====//
import Button from "../Button/Button";
import "../SignIn/SignIn.css";

//====MATIC IMPORTS====//
import Web3 from "web3";
import WalletConnectProvider from "@maticnetwork/walletconnect-provider";
import { useNavigate } from "react-router-dom";
import { CreateWallet } from "../../store/Actions/AuthActions";
import { useSelector, useDispatch } from "react-redux";
import { isConnected } from "../../store/Slices/authSlice";
const MaticPoSClient = require("@maticnetwork/maticjs").MaticPOSClient;
const Network = require("@maticnetwork/meta/network");
const Matic = require("@maticnetwork/maticjs");
const config = {
  posRootERC20: "0x655F2166b0709cd575202630952D71E2bB0d61Af",
  posChildERC20: "0xfe4F5145f6e09952a5ba9e956ED0C25e3Fa4c7F1",
  posWETH: "0x714550C2C1Ea08688607D86ed8EeF4f5E4F22323",
  rootChainWETH: "0x60D4dB9b534EF9260a88b0BED6c486fe13E604Fc",
  plasmaWETH: "0x4DfAe612aaCB5b448C12A591cD0879bFa2e51d62",
  plasmaRootERC20: "0x3f152B63Ec5CA5831061B2DccFb29a874C317502",
  plasmaChildERC20: "0x2d7882beDcbfDDce29Ba99965dd3cdF7fcB10A1e",
  MATIC_RPC: "https://rpc-mumbai.matic.today",
  ETHEREUM_RPC: "https://goerli.infura.io/v3/541999c8adbc4c3594d03a6b7b71eda6",
  VERSION: "mumbai",
  NETWORK: "testnet",
  MATIC_CHAINID: 80001,
  ETHEREUM_CHAINID: 5,
};

const MetaMask = () => {
  const [Networkid, setNetworkid] = useState(0);
  const [account, setAccount] = useState("");
  const [loading, setLoading] = useState(false);
  const [inputValue, setInputValue] = useState("");
  const [burnHash, setBurnHash] = useState("");
  const [isNavigate, setNavigate] = useState(false);
  const [maticProvider, setMaticProvider] = useState();
  const [ethereumprovider, setEthereumProvider] = useState();
  const Navigate = useNavigate();
  const dispatch = useDispatch();
  const { user, token, apiToken } = useSelector((state) => state.auth);
  const uuid = user && user.uuid;

  const Address = useSelector((state) => state.auth.address);

  const loadWeb3 = async () => {
    if (window.ethereum) {
      window.web3 = new Web3(window.ethereum);
      await window.ethereum.enable();
    } else if (window.web3) {
      window.web3 = new Web3(window.web3.currentProvider);
    } else {
      window.alert(
        "Non-Ethereum browser detected. You should consider trying MetaMask!"
      );
    }
  };

  useEffect(() => {
    if (account.length > 10) {
      createWallet(account);
    }
  }, [account]);

  const createWallet = (account) => {
    dispatch(CreateWallet(account, uuid, token, apiToken));
    dispatch(isConnected(account));
  };
  const loadBlockchainData = async () => {
    setLoading(true);
    const maticProvider = new WalletConnectProvider({
      host: config.MATIC_RPC,
      callbacks: {
        onConnect: console.log("matic connected"),
        onDisconnect: console.log("matic disconnected!"),
      },
    });

    const ethereumProvider = new WalletConnectProvider({
      host: config.ETHEREUM_RPC,
      callbacks: {
        onConnect: console.log("mainchain connected"),
        onDisconnect: console.log("mainchain disconnected"),
      },
    });

    setMaticProvider(maticProvider);
    setEthereumProvider(ethereumProvider);
    const web3 = window.web3;

    const accounts = await web3.eth.getAccounts();
    setAccount(accounts[0]);
    const networkId = await web3.eth.net.getId();
    setNetworkid(networkId);

    if (networkId === config.ETHEREUM_CHAINID) {
      setLoading(false);
    } else if (networkId === config.MATIC_CHAINID) {
      setLoading(false);
    } else {
      // window.alert(" switch to  Matic or Ethereum network");
    }

    if (accounts) {
      localStorage.setItem("Address", accounts[0]);
    }
  };
  const initConnection = async () => {
    await loadWeb3();
    await loadBlockchainData();
  };

  return (
    <Button
      onClick={() => {
        initConnection();
      }}
    >
      {loading ? `Connecting...` : `Connect MetaMask Wallet`}
    </Button>
  );
};

export default MetaMask;

'''
'''--- src/components/OTP/Otp.js ---
import React, { useState } from "react";
import { useNavigate } from "react-router-dom";

//====REDUX IMPORTS====//
import { useDispatch, useSelector } from "react-redux";
import { OTPVerify } from "../../store/Actions/AuthActions";

//====MUI IMPORTS====//
import { Alert } from "@material-ui/lab";

//====COMPONENT IMPORTS====//
import Button from "../Button/Button";
import "../SignIn/SignIn.css";
import { useEffect } from "react";

const Otp = () => {
  const message = useSelector((state) => state.auth.error);
  const user = useSelector((state) => state.auth.user);
  const isLoading = useSelector((state) => state.auth.isLoading);
  const dispatch = useDispatch();
  const navigate = useNavigate();
  const [error, setError] = useState(message);
  const [values, setValues] = useState({
    otp: "",
  });
  const uuid = user && user.uuid;

  const handleChange = (event) => {
    const { name, value } = event.target;
    setError("");
    setValues({ ...values, [name]: event.target.value });
  };

  const OtpVerificationHandler = async (e) => {
    e.preventDefault();

    if (values.otp.length < 1) {
      return setError("Please enter the otp sent to your email");
    }
    if (values.otp.length < 5) {
      return setError("Please enter a valid OTP");
    }

    try {
      setError("");
      await dispatch(OTPVerify(+values.otp, uuid));
      setValues({ otp: "" });
      navigate("/connect-metamask");
    } catch (error) {
      setError("Failed to verify Otp, Please try again later");
    }
  };

  return (
    <>
      
      {!message && error && (
        <div style={{ textAlign: "left", marginBottom: 5 }}>
          <Alert severity="error">{error}</Alert>
        </div>
      )}
      {!isLoading && message && (
        <Alert style={{ textAlign: "left", marginBottom: 5 }} severity="error">
          {message}
        </Alert>
      )}
      <form onSubmit={OtpVerificationHandler}>
        <input
          type="number"
          placeholder="OTP"
          value={values.otp}
          name="otp"
          onChange={handleChange}
          className="grandpa__input_field"
        />
        <Button type="submit" disabled={isLoading}>
          {isLoading ? "Verifying otp..." : "Continue"}
        </Button>
      </form>
    </>
  );
};

export default Otp;

'''
'''--- src/components/SignIn/SignIn.css ---
.grandpa__sign_up{
    background-color: #fff;
    color: #000;
    border-radius: 10px;
    display: flex;
    flex-direction: column;
    max-width: 300px;
    align-items: center;
    padding: 10px 20px;
    text-align: center;
}
.grandpa__sign_up h4{
    margin: 0;
}
.grandpa__sign_up p{
    margin: 0;
    color: #8C8C8C;
    font-size: 14px;
    padding-bottom: 16px;
}
.grandpa__form_wrapper{
    width: 100%;
}

.grandpa__input_field{
  box-sizing: border-box;
  font: inherit;
  color: currentColor;
  width: 100%;
  border: 0;
  margin: 0;
  display: block;
  min-width: 0;
  background: none;
  letter-spacing: inherit;
  animation-duration: 10ms;
  -webkit-tap-highlight-color: transparent;
  border: 1px solid #E8E8E8;
  border-radius: 10px;
  padding: 10px;
  margin-bottom: 10px;
}
.grandpa__input_field:focus{
    outline: none;
}
.grandpa__checkbox{
    text-align: left;
    padding: 4px;
    border: 1px solid #E8E8E8;
    border-radius: 10px;
}

'''
'''--- src/components/SignIn/SignIn.js ---
import React, { useState, useRef } from "react";
import { useNavigate } from "react-router-dom";

//====REDUX IMPORTS====//
import { useSelector, useDispatch } from "react-redux";
import { Login } from "../../store/Actions/AuthActions";

//====MUI IMPORTS====//
import { Alert } from "@material-ui/lab";
import { Checkbox, FormControlLabel } from "@material-ui/core";
import CircleChecked from "@material-ui/icons/CheckCircleOutline";
import CircleCheckedFilled from "@material-ui/icons/CheckCircle";
import CircleUnchecked from "@material-ui/icons/RadioButtonUnchecked";

//====COMPONENT IMPORTS===//
import Button from "../Button/Button";
import "./SignIn.css";

const SignIn = () => {
  const message = useSelector((state) => state.auth.message);
  const isLoading = useSelector((state) => state.auth.isLoading);
  const dispatch = useDispatch();
  const navigate = useNavigate();
  const [error, setError] = useState("");
  const [values, setValues] = useState({
    email: "",
  });

  const handleChange = (event) => {
    const { name, value } = event.target;
    setError("");
    setValues({ ...values, [name]: event.target.value });
  };

  const LoginHandler = async (e) => {
    e.preventDefault();

    if (values.email.length < 1) {
      return setError("Please enter to Sign in");
    }
    let pattern = new RegExp(
      /^(("[\w-\s]+")|([\w-]+(?:\.[\w-]+)*)|("[\w-\s]+")([\w-]+(?:\.[\w-]+)*))(@((?:[\w-]+\.)*\w[\w-]{0,66})\.([a-z]{2,6}(?:\.[a-z]{2})?)$)|(@\[?((25[0-5]\.|2[0-4][0-9]\.|1[0-9]{2}\.|[0-9]{1,2}\.))((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\.){2}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\]?$)/i
    );
    if (!pattern.test(values.email)) {
      setError("Please enter valid email address.");
    }

    try {
      setError("");
      await dispatch(Login(values.email));
      setValues({ email: "" });
      navigate("/confirm-otp");
    } catch (error) {
      if (!navigator.onLine) {
        return setError("Please connect to the internet to sign in");
      }
      navigate("/sign-up");
    }
  };

  return (
    <div className="grandpa__sign_up">
      {(error || message) && <Alert severity="error">{error || message}</Alert>}
      <h4>Sign In</h4>
      <p>Please sign in using your registetered email address to continue.</p>
      <div className="grandpa__form_wrapper">
        <form onSubmit={LoginHandler}>
          <input
            type="text"
            placeholder="Enter Email Address…"
            className="grandpa__input_field"
            value={values.email}
            name="email"
            onChange={handleChange}
          />
          <div className="grandpa__checkbox">
            <Checkbox
              icon={<CircleUnchecked />}
              checkedIcon={<CircleChecked />}
            />
            I am Human
          </div>
          <Button type="submit" disabled={isLoading}>
            {isLoading ? "Logging in..." : "Sign In"}
          </Button>
        </form>
      </div>
    </div>
  );
};

export default SignIn;

'''
'''--- src/components/SignUp/SignUp.css ---
.grandpa__sign_up{
    background-color: #fff;
    color: #000;
    border-radius: 10px;
    display: flex;
    flex-direction: column;
    max-width: 300px;
    align-items: center;
    padding: 10px 20px;
    text-align: center;
}
.grandpa__sign_up h4{
    margin: 0;
}
.grandpa__sign_up p{
    margin: 0;
    color: #8C8C8C;
    font-size: 14px;
    padding-bottom: 16px;
}
.grandpa__form_wrapper{
    width: 100%;
}

.grandpa__input_field{
  box-sizing: border-box;
  font: inherit;
  color: currentColor;
  width: 100%;
  border: 0;
  margin: 0;
  display: block;
  min-width: 0;
  background: none;
  letter-spacing: inherit;
  animation-duration: 10ms;
  -webkit-tap-highlight-color: transparent;
  border: 1px solid #E8E8E8;
  border-radius: 10px;
  padding: 10px;
  margin-bottom: 10px;
}
.grandpa__input_field:focus{
    outline: none;
}
.grandpa__checkbox{
    text-align: left;
    padding: 4px;
    border: 1px solid #E8E8E8;
    border-radius: 10px;
}

'''
'''--- src/components/SignUp/SignUp.js ---
import { Checkbox, FormControlLabel } from "@material-ui/core";
import { green } from '@material-ui/core/colors';
import CircleChecked from "@material-ui/icons/CheckCircleOutline";
import CircleCheckedFilled from "@material-ui/icons/CheckCircle";
import CircleUnchecked from "@material-ui/icons/RadioButtonUnchecked";
import React from "react";
import "./SignUp.css";
import Button from "../Button/Button";

const SignUp = () => {
  return (
    <div className="grandpa__sign_up">
      <h4>Sign In</h4>
      <p>Please sign in using your registetered email address to continue.</p>
      <div className="grandpa__form_wrapper">
        <form>
          <input
            type="text"
            placeholder="Enter Email Address…"
            className="grandpa__input_field"
          />
          <div className="grandpa__checkbox">
            <Checkbox
              icon={<CircleUnchecked />}
              checkedIcon={<CircleChecked />}
            />
            I am Human
            
          </div>
          <Button>Sign In</Button>
        </form>
      </div>
    </div>
  );
};

export default SignUp;

'''
'''--- src/components/TransactionStatus/TransactionStatus.css ---
.grandpa__transaction_status{
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
}
.grandpa__transaction{
    width: 100px;
    height: 100px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
}
.grandpa__transaction.success{
    background-color: rgba(79, 191, 135, .1);

}
.grandpa__transaction.fail{
    background-color: rgba(245, 34, 45, .1);

}
.grandpa__transaction svg{
    font-size: 3.2rem;

}
.grandpa__transaction.success svg{
    color: #4FBF87;

}
.grandpa__transaction.fail svg{
    color: #F5222D;

}
'''
'''--- src/components/TransactionStatus/TransactionStatus.js ---
import React from "react";
import "../SignIn/SignIn.css";
import SuccessIcon from '@material-ui/icons/CheckCircleOutline';
import FailIcon from '@material-ui/icons/CancelOutlined';
import BlackList from '@material-ui/icons/ErrorOutline';
import "./TransactionStatus.css";
import Button from "../Button/Button";
import { useNavigate } from "react-router-dom";

const TransactionStatus = ({status}) => {
  const navigate = useNavigate()
  const buttonClickHandler = ()=>{
navigate('/transactions')
  }
  return (
    <div className="grandpa__transaction_status">
       <div className={`grandpa__transaction ${status === "success"? "success": "fail"}`} >
        
        {status === "success"? <SuccessIcon/>: <FailIcon/>}
       </div>
      <Button onClick={buttonClickHandler}>Continue</Button>
    </div>
  );
};

export default TransactionStatus;

'''
'''--- src/components/Transactions/Transaction/Transaction.css ---
.grandpa__transaction_wrapper {
  background-color: #fff;
  color: #000;
  border-radius: 10px;
  display: flex;
  padding: 10px;
  flex-direction: column;
  align-items: center;
  text-align: center;
}
.grandpa__transaction_wrapper h4 {
  margin: 5px 0;
}
.grandpa__transaction_wrapper p {
  margin: 0;
  color: #8c8c8c;
  font-size: 14px;
  padding-bottom: 16px;
}

.grandpa__multi_column_field,
.grandpa__input_field {
  box-sizing: border-box;
  font: inherit;
  color: currentColor;
  width: 100%;
  border: 0;
  margin: 0;
  display: block;
  min-width: 0;
  background: none;
  letter-spacing: inherit;
  animation-duration: 10ms;
  -webkit-tap-highlight-color: transparent;
  border: 1px solid #e8e8e8;
  border-radius: 10px;
  padding: 10px;
  margin-bottom: 10px;
}
.grandpa__input_field {
  background-color: #fafafa;
}
.grandpa__input_address_field {
  font-size: 11.5px;
}
.grandpa__input_field:focus {
  outline: none;
}

.grandpa__multi_column_fields_wrapper {
  display: flex;
}
.grandpa__multi_column_field:last-child {
  margin-left: 10px;
}

'''
'''--- src/components/Transactions/Transaction/Transaction.js ---
import React, { useEffect, useRef, useState } from "react";
import Web3 from "web3";
import "./Transaction.css";
import Button from "../../Button/Button";
import { useDispatch, useSelector } from "react-redux";
import { isConnected } from "../../../store/Slices/authSlice";
import { CreateTransaction } from "../../../store/Actions/TransactionsActions";
import { Alert } from "@material-ui/lab";
import { useNavigate } from "react-router-dom";
import Dropdown from "../../Dropdown/Dropdown";

const Transaction = (props) => {
  const dispatch = useDispatch();
  const wallet = useSelector((state) => state.auth.wallet);
  const { apiToken, token } = useSelector((state) => state.auth);
  const Faucets = useSelector((state) => state.transactions.faucets);
  const isFetchingFaucets = useSelector((state) => state.transactions.fetching);
  const userAddress = useSelector((state) => state.auth.address);
  const [selected, setSelected] = useState("Select One");
  const [error, setError] = useState("");
  const [message, setMessage] = useState("");
  const [loading, setLoading] = useState(false);
  const navigate = useNavigate();
  const [values, setValues] = useState({
    amount: "",
    faucet: "",
    hash: "",
  });
  let invalidData = true;
  const handleOnChange = (event) => {
    const { name, value } = event.target;
    setValues({ ...values, [name]: event.target.value });
    setError("");
    setMessage("");
  };
  const wallet_uuid = wallet && wallet.uuid;
  const selectedFaucet =
    Faucets && Faucets.filter((faucet) => faucet.uuid === values.faucet)[0];
  let invalidMax = true;
  let invalidTotal = true;

  if (
    selectedFaucet &&
    values.amount.length > 0 &&
    parseFloat(values.amount) !== 0
  ) {
    invalidMax =
      parseFloat(values.amount) < selectedFaucet.maximum_amount ? true : false;
    invalidTotal =
      parseFloat(values.amount) < selectedFaucet.total_value ? true : false;
    invalidData = invalidMax && invalidTotal ? false : true;
  }

  let nearSelected = false;
  if (values.faucet.length > 0 && selected.toLowerCase() === "near") {
    nearSelected = true;
  }
  const noValueEntered = nearSelected && values.hash.length < 1;

  const TransactionSubmitHandler = async (event) => {
    event.preventDefault();
    if (nearSelected && values.hash.length < 1) {
      return setError("Please enter your wallet ID");
    }
    if (values.faucet.length < 6) {
      return setError("Please select faucet to continue");
    }

    if (values.amount.length < 1) {
      return setError("Please enter the amount to continue");
    }
    try {
      setError("");
      setLoading(true);
      await dispatch(
        CreateTransaction(
          nearSelected ? values.hash : wallet_uuid,
          values.amount,
          values.faucet,
          apiToken,
          token
        )
      );
      setLoading(false);

      setValues({ ...values, amount: "" });
      setMessage("Transaction created successfuly");
      navigate("/transaction-success");
    } catch {
      setLoading(false);
      setError("Failed to create transaction!");
      navigate("/transaction-fail");
    }
  };

  const loadWeb3 = async () => {
    if (window.ethereum) {
      window.web3 = new Web3(window.ethereum);
      await window.ethereum.enable();
    } else if (window.web3) {
      window.web3 = new Web3(window.web3.currentProvider);
    } else {
      window.alert(
        "Non-Ethereum browser detected. You should consider trying MetaMask!"
      );
    }
  };
  const getAddress = async () => {
    loadWeb3();
    const web3 = window.web3;
    const accounts = await web3.eth.getAccounts();
    localStorage.setItem("Address", accounts[0]);
    dispatch(isConnected(accounts[0]));
  };

  useEffect(() => {
    getAddress();
  }, []);
  useEffect(() => {}, [wallet]);

  return (
    <div className="grandpa__transaction_wrapper">
      {error && (
        <div className="d-flex justify-content-center mb-3">
          <Alert severity="error">{error}</Alert>
        </div>
      )}
      {message && (
        <div className="d-flex justify-content-center mb-3">
          <Alert severity="success">{message}</Alert>
        </div>
      )}
      <h4>Transaction</h4>
      <p>
        Please select the type of token and amount in order to cotinue with the
        transaction.
      </p>
      <div className="grandpa__transaction_form_wrapper">
        <form onSubmit={TransactionSubmitHandler}>
          <input
            type="text"
            value={!nearSelected ? userAddress : values.hash}
            placeholder="address.testnet"
            onChange={handleOnChange}
            name="hash"
            className="grandpa__input_field grandpa__input_address_field"
            disabled={!nearSelected}
          />
          <div className="grandpa__multi_column_fields_wrapper">
            <Dropdown
              selected={selected}
              setSelected={setSelected}
              values={values}
              setValues={setValues}
            />

            <input
              type="number"
              name="amount"
              onChange={handleOnChange}
              value={values.amount}
              placeholder={0.02}
              className="grandpa__multi_column_field"
            />
          </div>
          <Button
            type="submit"
            disabled={invalidData || loading || noValueEntered}
          >
            {loading ? `Transfering...` : `Continue`}
          </Button>
        </form>
      </div>
    </div>
  );
};

export default Transaction;

'''
'''--- src/components/Transactions/TransactionList/TransactionList.css ---
.grandpa__transaction_list_wrapper{
    min-width: 350px;
    text-align: center;
    padding: 15px;
}

.grandpa__transaction__card_wrapper{
    width: 100%;
    display: flex;
    flex-wrap: nowrap;
    flex-direction: row;
    justify-content: space-between;
    border-bottom: 1px solid #E8E8E8;
    font-size: 14px;
    font-weight: 600;
    padding: 8px 0;

}
.grandpa__transaction_token{
    width: 160px;
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
}

@media screen and (max-width: 689px) {
    .grandpa__transaction_token{
        width: 100px;
    }
    .grandpa__transaction_list_wrapper{
        width: 100%;
        min-width: 100%;
        padding: 2px;
    }
    .grandpa__transaction__card_wrapper{
        font-size: 12px;
    }
}
'''
'''--- src/components/Transactions/TransactionList/TransactionList.js ---
import { Skeleton } from "@material-ui/lab";
import React from "react";
import { useSelector } from "react-redux";
import "./TransactionList.css";

const TransactionList = () => {
  const Transactions = useSelector((state) => state.transactions.transactions);
  const isLoading = useSelector((state) => state.transactions.isLoading);

  const TransactionCard = (props) => {
    const { hashValue, amount, name, key } = props;
    return (
      <div className="grandpa__transaction__card_wrapper" key={key}>
        {isLoading ? (
          <Skeleton width="100%" />
        ) : (
          <>
            <div className="grandpa__transaction_token">{hashValue}</div>
            <div className="grandpa__transaction_amount">
              {amount} {name}
            </div>
          </>
        )}
      </div>
    );
  };

  return (
    <div className="grandpa__transaction_list_wrapper">
      <h4>Last 5 Transactions</h4>
      {isLoading
        ? [...Array(5).keys()].map((index) => {
            return <TransactionCard key={index} />;
          })
        : Transactions &&
          Transactions.map((transaction) => {
            return (
              <TransactionCard
                key={transaction.hash}
                hashValue={transaction.hash}
                amount={transaction.amount}
                name={transaction.token.name}
              />
            );
          })}
    </div>
  );
};

export default TransactionList;

'''
'''--- src/components/Transactions/Transactions.css ---
.grandpa__transactions{
    width: 100%;
    display: flex;
    background-color: #fff;
    border-radius: 20px;
    padding: 10px;
    color: #000;
}

.grandpa__transaction_list{
    background-color: #FAFAFA;
    color: #000000;
    border-radius: 10px;
    padding: 10px;
}

@media screen and (max-width: 680px) {
    .grandpa__transactions{
        flex-direction: column;
    }

}
'''
'''--- src/components/Transactions/Transactions.js ---
import React, { useEffect } from "react";
import { useDispatch, useSelector } from "react-redux";
import { fetchFaucets, fetchTransactions } from "../../store/Actions/TransactionsActions";
import Transaction from "./Transaction/Transaction";
import TransactionList from "./TransactionList/TransactionList";
import "./Transactions.css";

const Transactions = (props) => {
  const {token, apiToken } = useSelector(state=>state.auth);
  const dispatch = useDispatch();
  useEffect(() => {
    dispatch(fetchTransactions(token, apiToken));
    dispatch(fetchFaucets(token, apiToken));
  }, []);
  return (
    <div className="grandpa__transactions">
      <div className="grandpa__single_transaction">
        <Transaction />
      </div>
      <div className="grandpa__transaction_list">
        <TransactionList />
      </div>
    </div>
  );
};

export default Transactions;

'''
'''--- src/components/WhiteBoard/WhiteBoard.js ---
import React, { useState } from "react";
import Button from "../Button/Button";
import { Alert } from "@material-ui/lab";

const WhiteBoard = (props) => {
  const { setMessage } = props;
  const [loading, setLoading] = useState(false);
  const RedirectWhiteBoard = () => {
    setLoading(true);
    setMessage("Redirecting to Whiteboard Crypto...");
    window.location.replace("https://whiteboardcrypto.com/");
  };
  return (
    <Button onClick={RedirectWhiteBoard}>
      {loading ? "Redirecting..." : "Setup WhiteBoard Crypto Account"}
    </Button>
  );
};

export default WhiteBoard;

'''
'''--- src/index.js ---
import React from "react";
import { Provider } from "react-redux";
import ReactDOM from "react-dom";
import { BrowserRouter } from "react-router-dom";
import store from './store/index';
import App from "./App";

ReactDOM.render(
  <React.StrictMode>
    <Provider store={store}>
      <BrowserRouter>
        <App />
      </BrowserRouter>
    </Provider>
  </React.StrictMode>,
  document.getElementById("root")
);

'''
'''--- src/store/Actions/AuthActions.js ---

import {
  authenticationPending,
  authenticationSuccess,
  logout,
  autoAuthenticationSuccess,
  verificationPending,
  verificationFail,
  verificationSuccess,
  authenticationFail,
  createWalletPending,
  createWalletSuccess,
  createWalletFail,
  isAuthenticated,
  isConnected,
} from "../Slices/authSlice";

export const Login = (email) => {
  return async (dispatch) => {
    dispatch(authenticationPending());
    const response = await fetch(`${process.env.REACT_APP_BASEURL}/accounts/login`, {
      method: "POST",
      body: JSON.stringify({
        email,
      }),
      headers: new Headers({
        "Content-type": "application/json",
      }),
    });
    if (!response.ok) {
      const error = await response.json();
      let errorMessage = "";
      if (error.err === "User is not registered to whiteboard crypto.") {
        errorMessage = "Account not found, redirecting to whiteboard Crypto...";
      }
      dispatch(authenticationFail(errorMessage));
    }
    const res = await response.json();
    dispatch(
      authenticationSuccess({
        user: res.data,
        apiToken: res.apiToken,
        token: res.token,
      })
    );
    const userInfo = {
      user: res.data,
      apiToken: res.apiToken,
      token: res.token,
    };
    SaveTokenInLocalStorage(dispatch, userInfo);
  };
};

export const OTPVerify = (otp, uuid) => {
  return async (dispatch) => {
    dispatch(verificationPending());
    const response = await fetch(`${process.env.REACT_APP_BASEURL}/accounts/verify-otp/${uuid}`, {
      method: "POST",
      body: JSON.stringify({
        otp,
      }),
      headers: new Headers({
        "Content-type": "application/json",
      }),
    });

    if (!response.ok) {
      const error = await response.json();
      let Errormessage = "";
      if (error.msg === "OTP incorrect.") {
        Errormessage = "OTP entered is incorrect";
      }
      dispatch(verificationFail(Errormessage));
    }
    const data = await response.json();
    let Errormessage = "";
    if (data.msg === "OTP incorrect.") {
      Errormessage = "OTP entered is incorrect";
    }
    dispatch(verificationSuccess(Errormessage));
    dispatch(isAuthenticated())
    localStorage.setItem("isVerified", true)
  };
};

export const CreateWallet = (address, account_uuid, apiToken, AuthToken) => {
  return async (dispatch) => {
    dispatch(createWalletPending());
    if (address && address.length>0) {
        const response = await fetch(`${process.env.REACT_APP_BASEURL}/wallet-address/`, {
          method: "POST",
          body: JSON.stringify({
            address,
            account_uuid,
          }),
          headers: new Headers({
            "Content-type": "application/json",
            apiKey: process.env.REACT_APP_APIKEY,
            apiToken: apiToken,
            Authorization: "Bearer " + AuthToken,
          }),
        });

        if (!response.ok) {
          const error = await response.json();
          dispatch(createWalletFail(error));
        }
        const res = await response.json();
        dispatch(createWalletSuccess(res.data));
        localStorage.setItem("Wallet", JSON.stringify(res.data));
      }else{
        return
      }
  };
};

export const SaveTokenInLocalStorage = (dispatch, userDetails) => {
  // logOutTimer(dispatch, userDetails.expiresIn);
  let AuthTokenDetails = {
    token: userDetails.token,
    apiToken: userDetails.apiToken,
  };
  localStorage.setItem("AuthToken", JSON.stringify(AuthTokenDetails));
  localStorage.setItem("CurrentUser", JSON.stringify(userDetails.user));
};

// export const logOutTimer = (dispatch, timer) => {
//   setTimeout(() => {
//     dispatch(logout());
//   }, timer);
// };

export const AutoAuthenticate = (dispatch) => {
  const AuthToken = localStorage.getItem("AuthToken");
  const CurrentUser = localStorage.getItem("CurrentUser");
  const isAuth = localStorage.getItem("isVerified");
  const Address = localStorage.getItem("Address");
  const Wallet =localStorage.getItem("Wallet");
  let UserToken = "";
  if (!AuthToken) {
    dispatch(logout());
    return;
  }
  if(!!isAuth){
    dispatch(isAuthenticated())
  }
  if(Address && Address.length> 0){
    dispatch(isConnected(Address))
  }
  if(Wallet){
    dispatch(createWalletSuccess(JSON.parse(Wallet)))
  }

  UserToken = JSON.parse(AuthToken);
  // let expireDate = new Date(UserToken.expirationtime);
  // let todaysDate = new Date();
  // if (todaysDate > expireDate) {
  //   return dispatch(logout());
  // }
  let data = {
    token: UserToken.token,
    apiToken: UserToken.apiToken,
    user: JSON.parse(CurrentUser),
  };
  // validateToken(UserToken)
  dispatch(autoAuthenticationSuccess(data));

  // const timer = expireDate.getTime() - todaysDate.getTime();
  // logOutTimer(dispatch, timer);
};

'''
'''--- src/store/Actions/TransactionsActions.js ---
import {
  createTransactionFail,
  createTransactionPending,
  createTransactionSuccess,
} from "../Slices/transactionSlice";
import {
  fetchFaucetPending,
  fetchFaucetsFail,
  fetchFaucetsSuccess,
  fetchTransactionsFail,
  fetchTransactionsPending,
  fetchTransactionsSuccess,
} from "../Slices/transactionsSlice";

export const fetchTransactions = (AuthToken, apiToken) => async (dispatch) => {
  dispatch(fetchTransactionsPending());
  try {
    const response = await fetch(`${process.env.REACT_APP_BASEURL}/transaction/list/5`, {
      method: "GET",
      headers: new Headers({
        "Content-type": "application/json",
        apiKey: process.env.REACT_APP_APIKEY,
        apiToken: apiToken,
        Authorization: "Bearer " + AuthToken,
      }),
    });
    const fetchedTransactions = await response.json();
    dispatch(fetchTransactionsSuccess(fetchedTransactions.data));
  } catch (error) {
    dispatch(fetchTransactionsFail(error.message));
  }
};

export const fetchFaucets = (AuthToken, apiToken) => async (dispatch) => {
  dispatch(fetchFaucetPending());
  try {
    const response = await fetch(`${process.env.REACT_APP_BASEURL}/token/enabled`, {
      method: "GET",
      headers: new Headers({
        "Content-type": "application/json",
        apiKey: process.env.REACT_APP_APIKEY,
        apiToken: apiToken,
        Authorization: "Bearer " + AuthToken,
      }),
    });
    const faucets = await response.json();
    dispatch(fetchFaucetsSuccess(faucets.data));
  } catch (error) {
    dispatch(fetchFaucetsFail(error.message));
  }
};

export const CreateTransaction = (
  wallet_uuid,
  amount,
  token_uuid,
  apiToken,
  AuthToken
) => {
  return async (dispatch) => {
    dispatch(createTransactionPending());
    const response = await fetch(`${process.env.REACT_APP_BASEURL}/transaction/`, {
      method: "POST",
      body: JSON.stringify({
        wallet_uuid,
        amount,
        token_uuid,
      }),
      headers: new Headers({
        "Content-type": "application/json",
        apiKey: process.env.REACT_APP_APIKEY,
        apiToken: apiToken,
        Authorization: "Bearer " + AuthToken,
      }),
    });

    if (!response.ok) {
      const error = await response.json();
      dispatch(createTransactionFail(error));
      // console.log(error);
    }
    const res = await response.json();
    // console.log(res);
    dispatch(createTransactionSuccess(res.data));
  };
};

'''
'''--- src/store/Slices/authSlice.js ---
import { createSlice } from "@reduxjs/toolkit";

const initialState = {
  user: {},
  wallet: {},
  hasWallet: false,
  token: null,
  apiToken: null,
  isLoggedIn: false,
  status: "",
  message: null,
  error: null,
  updateStatus: "",
  isLoading: false,
  isAuth : false,
  address: "",
  hasAddress: false,
};

export const authSlice = createSlice({
  initialState,
  name: "authSlice",
  reducers: {
    autoAuthenticationSuccess(state, {payload}) {
      state.user = payload.user;
      state.token = payload.token;
      state.isLoggedIn = !!state.token;
      state.isLoading = false;
    },
    authenticationPending(state) {
      state.isLoading = true;
    },
    authenticationSuccess(state, { payload }) {
      state.user = payload.user;
      state.token = payload.token;
      state.apiToken = payload.apiToken;
      state.isLoggedIn = !!state.token;
      state.isLoading = false;
    },
    authenticationFail(state, { payload }) {
      state.isLoading = false;
      state.message = payload;
    },
    verificationPending(state) {
      state.isLoading = true;
    },
    verificationSuccess(state, { payload }) {
      state.isLoading = false;
      state.error = payload;
    },
    verificationFail(state, { payload }) {
      state.isLoading = false;
      state.error = payload;
      state.status=payload.status
    },
    createWalletPending(state) {
      state.isLoading = true;
    },
    createWalletSuccess(state, { payload }) {
      state.wallet = payload;
      state.isLoading = false;
      state.hasWallet = true;
    },
    createWalletFail(state, { payload }) {
      state.isLoading = false;
      state.message = payload.message;
      state.status=payload.status
    },
    isAuthenticated(state){
      state.isAuth = true;
    },
    isConnected(state,{payload}){
      state.address = payload
      state.hasAddress = !!payload
    },
    logout(state) {
      state.user = {};
      state.token = null;
      state.isLoggedIn = false;
      localStorage.removeItem("isVerified")
      localStorage.removeItem("AuthToken");
      localStorage.removeItem("CurrentUser");
    },
  },
});
const { reducer, actions } = authSlice;

export const {
  autoAuthenticationSuccess,
  authenticationPending,
  authenticationSuccess,
  authenticationFail,
  verificationPending,
  verificationSuccess,
  verificationFail,
  createWalletPending,
  createWalletSuccess,
  createWalletFail,
  isAuthenticated,
  isConnected,
  logout,
} = actions;

export default reducer;

'''
'''--- src/store/Slices/transactionSlice.js ---
import { createSlice } from "@reduxjs/toolkit";

const initialState = {
  isLoading: false,
  message: "",
  status: "",
};
const transactionSlice = createSlice({
  name: "transaction",
  initialState,
  reducers: {
    createTransactionPending: (state) => {
      state.isLoading = true;
    },
    createTransactionSuccess: (state, { payload }) => {
      state.transactions = payload;
      state.status = payload.status;
      state.isLoading = false;
    },
    createTransactionFail: (state, { payload }) => {
      state.message = payload.message;
      state.status = payload.status;
      state.isLoading = false;
    },
  },
});

const { reducer, actions } = transactionSlice;

export const {
  createTransactionPending,
  createTransactionSuccess,
  createTransactionFail,
} = actions;
export default reducer;

'''
'''--- src/store/Slices/transactionsSlice.js ---
import { createSlice } from "@reduxjs/toolkit";

const initialState = {
  transactions: [],
  faucets: [],
  isLoading: false,
  fetching: false,
  message: "",
  status: "",
};
const transactionsSlice = createSlice({
  name: "transactions",
  initialState,
  reducers: {
    fetchTransactionsPending: (state) => {
      state.isLoading = true;
    },
    fetchTransactionsSuccess: (state, { payload }) => {
      state.transactions = payload;
      state.status = payload.status;
      state.isLoading = false;
    },
    fetchTransactionsFail: (state, { payload }) => {
      state.message = payload.message;
      state.status = payload.status;
      state.isLoading = false;
    },
    fetchFaucetPending: (state) => {
      state.fetching = true;
    },
    fetchFaucetsSuccess: (state, { payload }) => {
      state.faucets = payload;
      state.status = payload.status;
      state.fetching = false;
    },
    fetchFaucetsFail: (state, { payload }) => {
      state.message = payload.message;
      state.status = payload.status;
      state.fetching = false;
    },
  },
});

const { reducer, actions } = transactionsSlice;

export const {
  fetchTransactionsPending,
  fetchTransactionsSuccess,
  fetchTransactionsFail,
  fetchFaucetPending,
  fetchFaucetsSuccess,
  fetchFaucetsFail
} = actions;
export default reducer;

'''
'''--- src/store/index.js ---
import { configureStore } from "@reduxjs/toolkit";
import authReducer from "./Slices/authSlice";
import transactionReducer from "./Slices/transactionsSlice";
const store = configureStore({
  reducer: {
    auth: authReducer,
    transactions: transactionReducer,
  },
});

export default store;

'''