*GitHub Repository "quex-tech/near_hack_contract"*

'''--- Cargo.toml ---
[package]
name = "contract"
version = "0.1.0"
authors = ["Vadim Ilin <vadim@near.org>"]
edition = "2018"
publish = false

[lib]
path = "contract/src/lib.rs"
crate-type = ["cdylib"]

[dependencies]
near-sdk = { git = "https://github.com/near/near-sdk-rs.git", rev = "a780010b0df99c44a688510451f64da3eb2b8fe9" }
bs58 = "0.4"
hex = "0.4"
base64 = "0.12"
serde = "1.0"
serde_json = "1.0"

[dev-dependencies]
anyhow = "1.0"
borsh = "0.9"
maplit = "1.0"
near-units = "0.1.0"
serde = "1.0"
serde_with = "1"
serde_json = { version = "1.0", features = ["arbitrary_precision"] }
tokio = { version = "1.10.0", features = ["full"] }
tracing = "0.1"
tracing-subscriber = { version = "0.3.5", features = ["env-filter"] }

[profile.release]
codegen-units = 1
opt-level = "z"
lto = true
debug = false
panic = "abort"
overflow-checks = true

[workspace]
members = []
'''
'''--- README.md ---
NEAR Smart Contract Boilerplate
======

- Basic smart contract structure
- Jest sim tests
- Build local/docker binaries
- Build & deploy scripts

HOW TO USE
======
Create new repo && download this boilerplate to target folder:

```
wget https://github.com/zavodil/near-contract/archive/refs/heads/main.zip -O "near-contract-master.zip" && unzip ./"near-contract-master.zip" -d $PWD && rm ./"near-contract-master.zip" && mv -v $PWD/near-contract-main/* $PWD && rm -rf near-contract-main
```

BUILD DOCKER ON M1:
===
Prepare docker
```
 clone https://github.com/near/near-sdk-rs/pull/720/files
 ./build_docker_m1.sh
```

Run docker buildx `contract-builder`
``` 
 ./build_docker_m1.sh
```

'''
'''--- babel.config.js ---
module.exports = {
  presets: ['@babel/preset-env', '@babel/preset-react'],
}

'''
'''--- build_docker.sh ---
#!/usr/bin/env bash

# Exit script as soon as a command fails.
set -e

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

NAME="build_contract"

if docker ps -a --format '{{.Names}}' | grep -Eq "^${NAME}\$"; then
    echo "Container exists"
else
docker create \
     --mount type=bind,source=$DIR/..,target=/host \
     --cap-add=SYS_PTRACE --security-opt seccomp=unconfined \
     --name=$NAME \
     -w /host/contract \
     -e RUSTFLAGS='-C link-arg=-s' \
     -it \
     nearprotocol/contract-builder \
     /bin/bash
fi

docker start $NAME
docker exec -it $NAME /bin/bash -c "rustup toolchain install stable-2021-10-21; rustup default stable-2021-10-21; rustup target add wasm32-unknown-unknown; cargo build --target wasm32-unknown-unknown --release"

mkdir -p res
cp $DIR/target/wasm32-unknown-unknown/release/contract.wasm $DIR/res/contract_release.wasm

'''
'''--- build_docker_m1.sh ---
#!/usr/bin/env bash

# Exit script as soon as a command fails.
set -e

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

DOCKER_NAME="build_contract"
FOLDER="near-contract"

if docker ps -a --format '{{.Names}}' | grep -Eq "^${DOCKER_NAME}\$"; then
    echo "Container exists"
else
docker create \
     --mount type=bind,source=$DIR/..,target=/host \
     --cap-add=SYS_PTRACE --security-opt seccomp=unconfined \
     --name=$DOCKER_NAME \
     -w /host/$FOLDER \
     -e RUSTFLAGS='-C link-arg=-s' \
     -it \
     contract-builder \
     /bin/bash
fi

docker start $DOCKER_NAME
docker exec -it $DOCKER_NAME /bin/bash -c "rustup toolchain install stable-2021-10-21; rustup default stable-2021-10-21; rustup target add wasm32-unknown-unknown; cargo build --target wasm32-unknown-unknown --manifest-path ./../$FOLDER/Cargo.toml --release"

mkdir -p res
cp $DIR/target/wasm32-unknown-unknown/release/contract.wasm $DIR/res/release.wasm

'''
'''--- build_local.sh ---
#!/bin/bash
set -e

RUSTFLAGS='-C link-arg=-s' cargo build --target wasm32-unknown-unknown --release
mkdir -p ../out
cp target/wasm32-unknown-unknown/release/contract.wasm ./out/local.wasm

'''
'''--- cli.txt ---
export CONTRACT_ID=dev-1699458546573-92037681556830
near call $CONTRACT_ID new '{"owner_id": "zavodil.testnet"}' --accountId $CONTRACT_ID
export PROOF=AwACAAAAAAAJAA4Ak5pyM/ecTKmUCg2zlX8GB3l8ty75RKUsnp2zgShsGd8AAAAACgoCGP//BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABwAAAAAAAAD/AgAAAAAAANy7LGHQlRAE4zYmYAxfe+DIMKO0QQT/g6JrPwb82wfZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACa/8+uR7hI7CyvHEm0soNTHhzEJfk1grNoBuUqQ9eNGgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEb2ZAmFK6gGGo/Ae6tyi/Y6mc+LNSfN4qtMhZNFT/0/RBAAAMsTKzIyrCL4Amln2zI/qTm4x9L3yBwdgzsnIYz3tgCc+bH8Ozvt/Jfj7VvlBceRZWCAC1plXtCB3Hwb9Wmw674U725CxKf3MXZ66+z6CNnKTm8FE21wsiKaOLkhmJafLsnrxGkdyOewKjgC8I3IzyPz4+PpJ8WkHzBxBBDp1G8cCgoCGP//BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFQAAAAAAAADnAAAAAAAAABkqpQzhwM7wPM+J57Wxaw15ePXCse3Pd02HcC6BVNi/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACMT1d115ZQPpYTf3fGioKaAFasje1wFAsIGwlEkMV7/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEACQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMC13Kr2alacjFP9FU+8Bh57mLVWh3eINrRn0FKU5bHQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAxRuT+fF82MqD/JiUrZIRi8PFIhCqXiQ+tpOnEW+bH9MNBJjsqO7BbyPBWuJwPy4PZCtBa1SqDKA+nMcpaKEL4iAAAAECAwQFBgcICQoLDA0ODxAREhMUFRYXGBkaGxwdHh8FANwNAAAtLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0KTUlJRWpqQ0NCRFNnQXdJQkFnSVZBUFp0T01kQTR6RkxMR3VUMTVUb00xMFZTcC9TTUFvR0NDcUdTTTQ5QkFNQwpNSEV4SXpBaEJnTlZCQU1NR2tsdWRHVnNJRk5IV0NCUVEwc2dVSEp2WTJWemMyOXlJRU5CTVJvd0dBWURWUVFLCkRCRkpiblJsYkNCRGIzSndiM0poZEdsdmJqRVVNQklHQTFVRUJ3d0xVMkZ1ZEdFZ1EyeGhjbUV4Q3pBSkJnTlYKQkFnTUFrTkJNUXN3Q1FZRFZRUUdFd0pWVXpBZUZ3MHlNekV3TURJeE16STVOREphRncwek1ERXdNREl4TXpJNQpOREphTUhBeElqQWdCZ05WQkFNTUdVbHVkR1ZzSUZOSFdDQlFRMHNnUTJWeWRHbG1hV05oZEdVeEdqQVlCZ05WCkJBb01FVWx1ZEdWc0lFTnZjbkJ2Y21GMGFXOXVNUlF3RWdZRFZRUUhEQXRUWVc1MFlTQkRiR0Z5WVRFTE1Ba0cKQTFVRUNBd0NRMEV4Q3pBSkJnTlZCQVlUQWxWVE1Ga3dFd1lIS29aSXpqMENBUVlJS29aSXpqMERBUWNEUWdBRQpPMjh1dnpyZ1Y4M2FjMGl3N1dqQk1wNHhOWDhzajlrRlo0OEFoSENydisyWjZ3NzBrY2o5c3hGS2p6TVR4clJqCjdpdHBBS2VRcHBkM1NERVF2U21oSUtPQ0FxZ3dnZ0trTUI4R0ExVWRJd1FZTUJhQUZORG9xdHAxMS9rdVNSZVkKUEhzVVpkRFY4bGxOTUd3R0ExVWRId1JsTUdNd1lhQmZvRjJHVzJoMGRIQnpPaTh2WVhCcExuUnlkWE4wWldSegpaWEoyYVdObGN5NXBiblJsYkM1amIyMHZjMmQ0TDJObGNuUnBabWxqWVhScGIyNHZkalF2Y0dOclkzSnNQMk5oClBYQnliMk5sYzNOdmNpWmxibU52WkdsdVp6MWtaWEl3SFFZRFZSME9CQllFRkkwRjREWnBTNUJ2TnFNMW5wK1gKNDVjc1hlSU1NQTRHQTFVZER3RUIvd1FFQXdJR3dEQU1CZ05WSFJNQkFmOEVBakFBTUlJQjFBWUpLb1pJaHZoTgpBUTBCQklJQnhUQ0NBY0V3SGdZS0tvWklodmhOQVEwQkFRUVE1NFdGUUgrZzFma3QyUjl4MlZTU1JqQ0NBV1FHCkNpcUdTSWI0VFFFTkFRSXdnZ0ZVTUJBR0N5cUdTSWI0VFFFTkFRSUJBZ0VLTUJBR0N5cUdTSWI0VFFFTkFRSUMKQWdFS01CQUdDeXFHU0liNFRRRU5BUUlEQWdFQ01CQUdDeXFHU0liNFRRRU5BUUlFQWdFQ01CRUdDeXFHU0liNApUUUVOQVFJRkFnSUEvekFRQmdzcWhraUcrRTBCRFFFQ0JnSUJBVEFRQmdzcWhraUcrRTBCRFFFQ0J3SUJBREFRCkJnc3Foa2lHK0UwQkRRRUNDQUlCQURBUUJnc3Foa2lHK0UwQkRRRUNDUUlCQURBUUJnc3Foa2lHK0UwQkRRRUMKQ2dJQkFEQVFCZ3NxaGtpRytFMEJEUUVDQ3dJQkFEQVFCZ3NxaGtpRytFMEJEUUVDREFJQkFEQVFCZ3NxaGtpRworRTBCRFFFQ0RRSUJBREFRQmdzcWhraUcrRTBCRFFFQ0RnSUJBREFRQmdzcWhraUcrRTBCRFFFQ0R3SUJBREFRCkJnc3Foa2lHK0UwQkRRRUNFQUlCQURBUUJnc3Foa2lHK0UwQkRRRUNFUUlCRFRBZkJnc3Foa2lHK0UwQkRRRUMKRWdRUUNnb0NBdjhCQUFBQUFBQUFBQUFBQURBUUJnb3Foa2lHK0UwQkRRRURCQUlBQURBVUJnb3Foa2lHK0UwQgpEUUVFQkFZQW9HY1JBQUF3RHdZS0tvWklodmhOQVEwQkJRb0JBREFLQmdncWhrak9QUVFEQWdOSUFEQkZBaUVBCm9oNmRWdlJ1UkhMTVdhcVBQWS83RUFBQUxEN2RYaHk5d1E4RUcrdXBVNU1DSUE5Lzc4N05EeVcwR3ZabFpwN2wKYVJVOWhXVy9GZXBIeTJVaUFadnA0Tk92Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNtRENDQWo2Z0F3SUJBZ0lWQU5Eb3F0cDExL2t1U1JlWVBIc1VaZERWOGxsTk1Bb0dDQ3FHU000OUJBTUMKTUdneEdqQVlCZ05WQkFNTUVVbHVkR1ZzSUZOSFdDQlNiMjkwSUVOQk1Sb3dHQVlEVlFRS0RCRkpiblJsYkNCRApiM0p3YjNKaGRHbHZiakVVTUJJR0ExVUVCd3dMVTJGdWRHRWdRMnhoY21FeEN6QUpCZ05WQkFnTUFrTkJNUXN3CkNRWURWUVFHRXdKVlV6QWVGdzB4T0RBMU1qRXhNRFV3TVRCYUZ3MHpNekExTWpFeE1EVXdNVEJhTUhFeEl6QWgKQmdOVkJBTU1Ha2x1ZEdWc0lGTkhXQ0JRUTBzZ1VISnZZMlZ6YzI5eUlFTkJNUm93R0FZRFZRUUtEQkZKYm5SbApiQ0JEYjNKd2IzSmhkR2x2YmpFVU1CSUdBMVVFQnd3TFUyRnVkR0VnUTJ4aGNtRXhDekFKQmdOVkJBZ01Ba05CCk1Rc3dDUVlEVlFRR0V3SlZVekJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCTDlxK05NcDJJT2cKdGRsMWJrL3VXWjUrVEdRbThhQ2k4ejc4ZnMrZktDUTNkK3VEelhuVlRBVDJaaERDaWZ5SXVKd3ZOM3dOQnA5aQpIQlNTTUpNSnJCT2pnYnN3Z2Jnd0h3WURWUjBqQkJnd0ZvQVVJbVVNMWxxZE5JbnpnN1NWVXI5UUd6a25CcXd3ClVnWURWUjBmQkVzd1NUQkhvRVdnUTRaQmFIUjBjSE02THk5alpYSjBhV1pwWTJGMFpYTXVkSEoxYzNSbFpITmwKY25acFkyVnpMbWx1ZEdWc0xtTnZiUzlKYm5SbGJGTkhXRkp2YjNSRFFTNWtaWEl3SFFZRFZSME9CQllFRk5EbwpxdHAxMS9rdVNSZVlQSHNVWmREVjhsbE5NQTRHQTFVZER3RUIvd1FFQXdJQkJqQVNCZ05WSFJNQkFmOEVDREFHCkFRSC9BZ0VBTUFvR0NDcUdTTTQ5QkFNQ0EwZ0FNRVVDSVFDSmdUYnRWcU95WjFtM2pxaUFYTTZRWWE2cjVzV1MKNHkvRzd5OHVJSkd4ZHdJZ1JxUHZCU0t6elFhZ0JMUXE1czVBNzBwZG9pYVJKOHovMHVEejROZ1Y5MWs9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNqekNDQWpTZ0F3SUJBZ0lVSW1VTTFscWROSW56ZzdTVlVyOVFHemtuQnF3d0NnWUlLb1pJemowRUF3SXcKYURFYU1CZ0dBMVVFQXd3UlNXNTBaV3dnVTBkWUlGSnZiM1FnUTBFeEdqQVlCZ05WQkFvTUVVbHVkR1ZzSUVOdgpjbkJ2Y21GMGFXOXVNUlF3RWdZRFZRUUhEQXRUWVc1MFlTQkRiR0Z5WVRFTE1Ba0dBMVVFQ0F3Q1EwRXhDekFKCkJnTlZCQVlUQWxWVE1CNFhEVEU0TURVeU1URXdORFV4TUZvWERUUTVNVEl6TVRJek5UazFPVm93YURFYU1CZ0cKQTFVRUF3d1JTVzUwWld3Z1UwZFlJRkp2YjNRZ1EwRXhHakFZQmdOVkJBb01FVWx1ZEdWc0lFTnZjbkJ2Y21GMAphVzl1TVJRd0VnWURWUVFIREF0VFlXNTBZU0JEYkdGeVlURUxNQWtHQTFVRUNBd0NRMEV4Q3pBSkJnTlZCQVlUCkFsVlRNRmt3RXdZSEtvWkl6ajBDQVFZSUtvWkl6ajBEQVFjRFFnQUVDNm5Fd01ESVlaT2ovaVBXc0N6YUVLaTcKMU9pT1NMUkZoV0dqYm5CVkpmVm5rWTR1M0lqa0RZWUwwTXhPNG1xc3lZamxCYWxUVll4RlAyc0pCSzV6bEtPQgp1ekNCdURBZkJnTlZIU01FR0RBV2dCUWlaUXpXV3AwMGlmT0R0SlZTdjFBYk9TY0dyREJTQmdOVkhSOEVTekJKCk1FZWdSYUJEaGtGb2RIUndjem92TDJObGNuUnBabWxqWVhSbGN5NTBjblZ6ZEdWa2MyVnlkbWxqWlhNdWFXNTAKWld3dVkyOXRMMGx1ZEdWc1UwZFlVbTl2ZEVOQkxtUmxjakFkQmdOVkhRNEVGZ1FVSW1VTTFscWROSW56ZzdTVgpVcjlRR3prbkJxd3dEZ1lEVlIwUEFRSC9CQVFEQWdFR01CSUdBMVVkRXdFQi93UUlNQVlCQWY4Q0FRRXdDZ1lJCktvWkl6ajBFQXdJRFNRQXdSZ0loQU9XLzVRa1IrUzlDaVNEY05vb3dMdVBSTHNXR2YvWWk3R1NYOTRCZ3dUd2cKQWlFQTRKMGxySG9NcytYbzVvL3NYNk85UVd4SFJBdlpVR09kUlE3Y3ZxUlhhcUk9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KAA==
near view $CONTRACT_ID verify1 '{"quote_bytes": "'$PROOF'"}'

near call $CONTRACT_ID testResponse '{}' --accountId $CONTRACT_ID

near call $CONTRACT_ID addResponse '{"pk_string": "15896f5e867762ba4e1f75c3243e231c118ea2d5b3a2e99cede1190527e819f5", "message": "{\"data\":{\"respose\":{\"id\":\"chatcmpl-abc123\",\"object\":\"chat.completion\",\"created\":1677858242,\"model\":\"gpt-3.5-turbo-1006\",\"usage\":{\"prompt_tokens\":13,\"completion_tokens\":7,\"total_tokens\":20},\"choices\":[{\"message\":{\"role\":\"assistant\",\"content\":\"\n\nThis is a test!\"},\"finish_reason\":\"stop\",\"index\":0}]},\"address\":\"\"},\"signature\":\"\"}", "sig_string": "e6ecb57c1d8bf9e7751f6b52634d01f5402f162e9f91eb68f1e161e4b675baba9a432b1a1413ef39522116e6839b7ed295796803342db36a24ed595427bdf000"}' --accountId $CONTRACT_ID

let pk_string = "15896f5e867762ba4e1f75c3243e231c118ea2d5b3a2e99cede1190527e819f4";
		let message = "{\"data\":{\"respose\":{\"id\":\"chatcmpl-abc123\",\"object\":\"chat.completion\",\"created\":1677858242,\"model\":\"gpt-3.5-turbo-1006\",\"usage\":{\"prompt_tokens\":13,\"completion_tokens\":7,\"total_tokens\":20},\"choices\":[{\"message\":{\"role\":\"assistant\",\"content\":\"\n\nThis is a test!\"},\"finish_reason\":\"stop\",\"index\":0}]},\"address\":\"\"},\"signature\":\"\"}";
		let sig_string = "e6ecb57c1d8bf9e7751f6b52634d01f5402f162e9f91eb68f1e161e4b675baba9a432b1a1413ef39522116e6839b7ed295796803342db36a24ed595427bdf000";

'''
'''--- contract/compile.js ---
// This file does two things:
//
// 1. Compile the Rust contract using cargo (see buildCmd below). This will
//    create a wasm file in the 'build' folder.
// 2. Create a symbolic link (symlink) to the generated wasm file in the root
//    project's `out` folder, for easy use with near-cli.
//
// First, import some helper libraries. `shelljs` is included in the
// devDependencies of the root project, which is why it's available here. It
// makes it easy to use *NIX-style scripting (which works on Linux distros,
// macOS, and Unix systems) on Windows as well.
const sh = require('shelljs')
const path = require('path')

// Figure out which directory the user called this script from, which we'll use
// later to set up the symlink.
const calledFromDir = sh.pwd().toString()

// For the duration of this script, we want to operate from within the
// Rust project's folder. Let's change into that directory.
sh.cd(__dirname)
sh.cd("../")

// You can call this script with `node compile.js` or `node compile.js
// --debug`. Let's set a variable to track whether `--debug` was used.
const debug = process.argv.pop() === '--debug'

// You can call this script with `node compile.js` or `node compile.js --debug`.
// Let's set a variable to track whether `--debug` was used.
// Note: see other flags in ./cargo/config. Unfortunately, you cannot set the
// `--target option` in Cargo.toml.
const buildCmd = debug
  ? 'cargo build --target wasm32-unknown-unknown'
  : 'cargo build --target wasm32-unknown-unknown --release'

// Execute the build command, storing exit code for later use
const { code } = sh.exec(buildCmd)

// Assuming this is compiled from the root project directory, link the compiled
// contract to the `out` folder –
// When running commands like `near deploy`, near-cli looks for a contract at
// <CURRENT_DIRECTORY>/out/main.wasm
if (code === 0 && calledFromDir !== __dirname) {
  const linkDir = `${calledFromDir}/out`
  const link = `${calledFromDir}/out/main.wasm`
  const packageName = require('fs').readFileSync(`${__dirname}/../Cargo.toml`).toString().match(/name = "([^"]+)"/)[1]
  const outFile = `./target/wasm32-unknown-unknown/${debug ? 'debug' : 'release'}/${packageName}.wasm`
  sh.mkdir('-p', linkDir)
  sh.rm('-f', link)
  const linkPath = path.relative(linkDir, outFile)

  sh.ln('-s', linkPath, link)
}

// exit script with the same code as the build command
process.exit(code)

'''
'''--- contract/src/cli.txt ---
export CONTRACT_ID=dev-1699312784060-17284108275785
near call $CONTRACT_ID new '{"owner_id": "'$CONTRACT_ID'"}' --accountId $CONTRACT_ID
'''
'''--- contract/src/lib.rs ---
extern crate serde;
extern crate serde_json;

use serde_json::Value;
use near_sdk::{
	near_bindgen, AccountId, BorshStorageKey, PanicOnDefault,
	borsh::{self, BorshDeserialize, BorshSerialize},
	collections::{UnorderedMap}, log, env, Promise,
    serde::{Deserialize, Serialize}
};
use near_sdk::PublicKey;
use hex;

fn verification(pk_string: &[u8; 32], message: &str, sig_string: &[u8; 64]) -> bool {
	env::ed25519_verify(&sig_string, &message.as_bytes(), pk_string)
}

type PrivateKey = String;
type AI_Response = String;
type Signature = String;

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize, PanicOnDefault)]
pub struct Contract {
	owner_id: AccountId,
	public_key: String,
	messages: UnorderedMap<AccountId, Vec<(Sender, String)>>
}

#[derive(BorshDeserialize, BorshSerialize)]
pub struct Message {
	text: String,
	sender: Sender
}

#[derive(BorshDeserialize, BorshSerialize, Serialize)]
pub enum Sender {
	User,
	Bot
}

#[derive(BorshSerialize, BorshStorageKey)]
enum StorageKey {
	Messages
}

#[near_bindgen]
impl Contract {
    #[init]
    pub fn new(owner_id: AccountId, public_key: String) -> Self {
		Self {
			owner_id,
			public_key,
			messages: UnorderedMap::new(StorageKey::Messages),
		}
	}

	pub fn getMessages(&self, account_id: AccountId) -> Option<Vec<(Sender, String)>> {
		self.messages.get(&account_id)
	}

	pub fn initializeAI(&self, pk: PrivateKey, signatures: Vec<PrivateKey>){
		log!("{}", pk)
	}

	#[payable]
	pub fn addRequest(&mut self, msg: String) {
		let account_id = env::predecessor_account_id();
		let mut all_messages = self.messages.get(&account_id).unwrap_or(vec![]);
		all_messages.push((Sender::User, msg.to_string()));

		self.messages.insert(&account_id, &all_messages);

		log!("{}", msg)
	}

	pub fn addResponse(&self, pk_string: String, message: String, sig_string: String) {
		let mut pk = [0u8; 32];
		//let _pk_bytes = hex::decode_to_slice(pk_string, &mut pk as &mut [u8]);
		let _pk_bytes = hex::decode_to_slice(self.public_key.clone(), &mut pk as &mut [u8]);

		let mut sig = [0u8; 64];
		let _sig_string = hex::decode_to_slice(sig_string, &mut sig as &mut [u8]);

		let verified = verification(&pk, &message, &sig);
		log!("{}", verified);
	}

	pub fn addResponse1(&mut self, pk_string: String, message: String, sig_string: String) {
		let mut pk = [0u8; 32];
		//let _pk_bytes = hex::decode_to_slice(pk_string, &mut pk as &mut [u8]);
		let _pk_bytes = hex::decode_to_slice(self.public_key.clone(), &mut pk as &mut [u8]);

		let mut sig = [0u8; 64];
		let _sig_string = hex::decode_to_slice(sig_string, &mut sig as &mut [u8]);

		let parsed_data: Result<Value, serde_json::Error> = serde_json::from_str(&message);

		match parsed_data {
			Ok(parsed_json) => {
				//log!("Content parsed_data: {}", parsed_data.clone().unwrap_or_default());
				log!("Content parsed_json: {:?}", parsed_json);

				let account_id:AccountId = parsed_json["address"].as_str().expect("ERR_NO_SENDER").parse().unwrap();

				// Access fields from the parsed JSON
				let content = parsed_json["response"]["choices"][0]["message"]["content"].as_str().expect("ERR_NO_MESSAGE");
				log!("Content content: {:?}", content);

				if content.to_lowercase() == "funded" || content.to_lowercase() == "funded." {
					Promise::new(account_id.clone()).transfer(1000000000000000000000000);
				}

				let mut all_messages = self.messages.get(&account_id).unwrap_or(vec![]);
				all_messages.push((Sender::Bot, content.to_string()));

				self.messages.insert(&account_id, &all_messages);

			}
			Err(e) => {
				log!("Error parsing JSON: {}", e);
			}
		}

		let verified = verification(&pk, &message, &sig);
		log!("{}", verified);
	}

	pub fn testResponse(&self) {
		let pk_string = "15896f5e867762ba4e1f75c3243e231c118ea2d5b3a2e99cede1190527e819f4";
		let message = "{\"data\":{\"respose\":{\"id\":\"chatcmpl-abc123\",\"object\":\"chat.completion\",\"created\":1677858242,\"model\":\"gpt-3.5-turbo-1006\",\"usage\":{\"prompt_tokens\":13,\"completion_tokens\":7,\"total_tokens\":20},\"choices\":[{\"message\":{\"role\":\"assistant\",\"content\":\"\n\nThis is a test!\"},\"finish_reason\":\"stop\",\"index\":0}]},\"address\":\"\"},\"signature\":\"\"}";

		let sig_string = "e6ecb57c1d8bf9e7751f6b52634d01f5402f162e9f91eb68f1e161e4b675baba9a432b1a1413ef39522116e6839b7ed295796803342db36a24ed595427bdf000";

		let mut pk = [0u8; 32];
		let _pk_bytes = hex::decode_to_slice(pk_string, &mut pk as &mut [u8]);

		let mut sig = [0u8; 64];
		let _sig_string = hex::decode_to_slice(sig_string, &mut sig as &mut [u8]);

		log!("r {:?}", _pk_bytes);
		log!("{:?}", pk);

		log!("r {:?}", _sig_string);
		log!("{:?}", sig);

		let verified = verification(&pk, &message, &sig);
		log!("{}", verified)
	}
}

'''
'''--- contract/src/object.rs ---
use crate::*;

#[derive(BorshSerialize, BorshDeserialize)]
pub enum VObject {
   Current(Object),
}

#[derive(BorshSerialize, BorshDeserialize)]
pub struct Object {
   pub account_id: AccountId,
}

impl From<VObject> for Object {
   fn from(v_object: VObject) -> Self {
      match v_object {
         VObject::Current(object) => object,
      }
   }
}

#[derive(BorshSerialize, BorshDeserialize, Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct ObjectOutput {
   pub account_id: AccountId,
}

impl From<VObject> for ObjectOutput {
   fn from(v_object: VObject) -> Self {
      match v_object {
         VObject::Current(object) => ObjectOutput {
            account_id: object.account_id
         },
      }
   }
}

'''
'''--- contract/src/utils.rs ---
use crate::*;

pub(crate) fn unordered_map_pagination<K, VV, V>(
   m: &UnorderedMap<K, VV>,
   from_index: Option<u64>,
   limit: Option<u64>,
) -> Vec<(K, V)>
   where
      K: BorshSerialize + BorshDeserialize,
      VV: BorshSerialize + BorshDeserialize,
      V: From<VV>,
{
   let keys = m.keys_as_vector();
   let values = m.values_as_vector();
   let from_index = from_index.unwrap_or(0);
   let limit = limit.unwrap_or(keys.len());
   (from_index..std::cmp::min(keys.len(), from_index + limit))
      .map(|index| (keys.get(index).unwrap(), values.get(index).unwrap().into()))
      .collect()
}

'''
'''--- jest.config.js ---
module.exports = {
    testEnvironment: "node",
    testTimeout: 900000,
    globals: {
        Uint8Array: Uint8Array,
    },
    "testMatch": [
        "<rootDir>/test/*.test.js"
    ]
};
'''
'''--- package.json ---
{
	"name": "near-contract",
	"version": "0.1.0",
	"license": "MIT",
	"scripts": {
		"build": "npm run build:contract && npm run build:web",
		"build:contract": "node contract/compile.js",
		"build:contract:debug": "node contract/compile.js --debug",
		"dev:deploy:contract": "near dev-deploy",
		"deploy:contract": "near deploy",
		"build:contract:testnet": "export NODE_ENV=testnet && node contract/compile.js",
		"deploy:contract:testnet": "export NODE_ENV=testnet && near deploy",
		"dev:clear": "rm -r neardev",
		"test:workspace": "cargo run --example main -- --nocapture",
		"test": "export NODE_ENV=testnet && export CONTRACT_NAME=dev-1640966965154-54263632565336 && jest rest-api.test.js --useStderr --verbose false",
		"test:create_event": "export NODE_ENV=testnet && export CONTRACT_NAME=dev-1640966965154-54263632565336 && jest rest-api.test.js -t 'Create Event' --useStderr --verbose false"
	},
	"devDependencies": {
		"@babel/core": "~7.12.3",
		"@babel/preset-env": "~7.12.1",
		"@babel/preset-react": "~7.12.5",
		"babel-jest": "~26.6.2",
		"shelljs": "~0.8.4",
		"jest": "~26.6.2",
		"jest-environment-node": "~26.6.2"
	},
	"dependencies": {
		"near-api-js": "^0.44.2",
		"node-fetch": "^2.6.1",
		"regenerator-runtime": "~0.13.5",
		"bn.js": "^5.2.1"
	},
	"jest": {
		"moduleNameMapper": {
			"\\.(jpg|ico|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$": "<rootDir>/src/__mocks__/fileMock.js",
			"\\.(css|less)$": "<rootDir>/src/__mocks__/fileMock.js"
		},
		"setupFiles": [
			"<rootDir>/src/jest.init.js"
		],
		"testEnvironment": "near-cli/test_environment",
		"testPathIgnorePatterns": [
			"<rootDir>/contract/",
			"<rootDir>/node_modules/"
		]
	}
}

'''