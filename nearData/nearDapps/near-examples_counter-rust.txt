*GitHub Repository "near-examples/counter-rust"*

'''--- .devcontainer/devcontainer.json ---
{
  "image": "mcr.microsoft.com/devcontainers/universal:2",
  "features": {
    "ghcr.io/devcontainers/features/rust:1": {},
    "ghcr.io/devcontainers/features/node:1": {
      "version": "20"
    }
  },
  "portsAttributes": {
        "1234": {
            "label": "Application",
            "onAutoForward": "openPreview"
        }
    }
}

'''
'''--- .github/workflows/tests-rs.yml ---
name: Tests Contract RS
on: push
jobs:
  workflows:
    strategy:
      matrix:
        platform: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v2
      - name: Install and test modules
        run: |
          cd ./contract-rs
          cargo test

'''
'''--- .github/workflows/tests-ts.yml ---
name: Tests Contract TS
on: push
jobs:
  workflows:
    strategy:
      matrix:
        platform: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: "18"
      - name: Install and test modules
        run: |
          cd ./contract-ts
          yarn
          yarn test

'''
'''--- README.md ---
# Counter Examples

This repository contains examples for a simple counter in both Rust and JavaScript, and an examples of a frontend interacting with a Counter smart contract. 

## Repositories

- [Counter TS Examples](contract-ts)
- [Counter RS Example](contract-rs)
- [Counter Frontend Example](frontend)
'''
'''--- contract-rs/Cargo.toml ---
[package]
name = "counter"
description = "counter example"
version = "0.1.0"
edition = "2021"
# TODO: Fill out the repository field to help NEAR ecosystem tools to discover your project.
# NEP-0330 is automatically implemented for all contracts built with https://github.com/near/cargo-near.
# Link to the repository will be available via `contract_source_metadata` view-function.
#repository = "https://github.com/xxx/xxx"

[lib]
crate-type = ["cdylib", "rlib"]

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html
[dependencies]
near-sdk = "5.1.0"

[dev-dependencies]
near-sdk = { version = "5.0.0", features = ["unit-testing"] }
near-workspaces = { version = "0.10.0", features = ["unstable"] }
tokio = { version = "1.12.0", features = ["full"] }
serde_json = "1"

[profile.release]
codegen-units = 1
# Tell `rustc` to optimize for small code size.
opt-level = "z"
lto = true
debug = false
panic = "abort"
# Opt into extra safety checks on arithmetic operations https://stackoverflow.com/a/64136471/249801
overflow-checks = true

'''
'''--- contract-rs/README.md ---
# Count on NEAR Contract Example

The smart contract exposes methods to interact with a counter stored in the NEAR
network.

## How to Build Locally?

Install [`cargo-near`](https://github.com/near/cargo-near) and run:

```bash
cargo near build
```

## How to Test Locally?

```bash
cargo test
```

## How to Deploy?

Deployment is automated with GitHub Actions CI/CD pipeline. To deploy manually,
install [`cargo-near`](https://github.com/near/cargo-near) and run:

```bash
cargo near deploy <account-id>
```

## How to Interact?

_In this example we will be using [NEAR CLI](https://github.com/near/near-cli)
to intract with the NEAR blockchain and the smart contract_

_If you want full control over of your interactions we recommend using the
[near-cli-rs](https://near.cli.rs)._

### Get the Counter

`get_num` is a read-only method (aka `view` method).

`View` methods can be called for **free** by anyone, even people **without a
NEAR account**!

```bash
# Use near-cli to get the counter value
near view <contract-account-id> get_num
```

### Modify the Counter

`increment`, `decrement` and `reset` change the contract's state, for which they
are `call` methods.

`Call` methods can only be invoked using a NEAR account, since the account needs
to pay GAS for the transaction.

```bash
# Use near-cli to set increment the counter
near call <contract-account-id> increment --accountId --accountId <your-account>
```

## Useful Links

- [cargo-near](https://github.com/near/cargo-near) - NEAR smart contract
  development toolkit for Rust
- [near CLI-rs](https://near.cli.rs) - Iteract with NEAR blockchain from command
  line
- [NEAR Rust SDK Documentation](https://docs.near.org/sdk/rust/introduction)
- [NEAR Documentation](https://docs.near.org)
- [NEAR StackOverflow](https://stackoverflow.com/questions/tagged/nearprotocol)
- [NEAR Discord](https://near.chat)
- [NEAR Telegram Developers Community Group](https://t.me/neardev)
- NEAR DevHub: [Telegram](https://t.me/neardevhub),
  [Twitter](https://twitter.com/neardevhub)

'''
'''--- contract-rs/rust-toolchain.toml ---
[toolchain]
channel = "stable"
components = ["rustfmt"]
targets = ["wasm32-unknown-unknown"]

'''
'''--- contract-rs/src/lib.rs ---
// Find all our documentation at https://docs.near.org
use near_sdk::{log, near};

// Define the contract structure
#[near(contract_state)]
#[derive(Default)]
pub struct Counter {
    val: i8,
}

// Implement the contract structure
#[near]
impl Counter {
    // Public read-only method: Returns the counter value.
    pub fn get_num(&self) -> i8 {
        return self.val;
    }

    // Public method: Increment the counter.
    pub fn increment(&mut self) {
        self.val += 1;
        log!("Increased number to {}", self.val);
    }

    // Public method: Decrement the counter.
    pub fn decrement(&mut self) {
        self.val -= 1;
        log!("Decreased number to {}", self.val);
    }

    // Public method - Reset to zero.
    pub fn reset(&mut self) {
        self.val = 0;
        log!("Reset counter to zero");
    }
}

/*
 * The rest of this file holds the inline tests for the code above
 * to run these, the command will be: `cargo test`
 * Learn more about Rust tests: https://doc.rust-lang.org/book/ch11-01-writing-tests.html
 */
#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn increment() {
        // instantiate a contract variable with the counter at zero
        let mut contract = Counter { val: 0 };
        contract.increment();
        assert_eq!(1, contract.get_num());
    }

    #[test]
    fn decrement() {
        let mut contract = Counter { val: 0 };
        contract.decrement();
        assert_eq!(-1, contract.get_num());
    }

    #[test]
    fn increment_and_reset() {
        let mut contract = Counter { val: 0 };
        contract.increment();
        contract.reset();
        assert_eq!(0, contract.get_num());
    }

    #[test]
    #[should_panic]
    fn panics_on_overflow() {
        let mut contract = Counter { val: 127 };
        contract.increment();
    }

    #[test]
    #[should_panic]
    fn panics_on_underflow() {
        let mut contract = Counter { val: -128 };
        contract.decrement();
    }
}

'''
'''--- contract-rs/tests/sandbox.rs ---
use serde_json::json;

async fn prepare_test_environment() -> Result<(near_workspaces::Account, near_workspaces::Contract), Box<dyn std::error::Error>> {
    let worker = near_workspaces::sandbox().await?;
    let contract_wasm = near_workspaces::compile_project("./").await?;
    let contract = worker.dev_deploy(&contract_wasm).await?;
 
    // create accounts
    let account = worker.dev_create_account().await?;
    
    Ok((account, contract))
}

#[tokio::test]
async fn test_can_be_incremented() -> Result<(), Box<dyn std::error::Error>> {
    let (account, contract) = prepare_test_environment().await?;

    let counter_in_zero = contract
        .view("get_num")
        .args_json(json!({}))
        .await?;

    assert_eq!(counter_in_zero.json::<u8>()?, 0);

    let _ = account
        .call(contract.id(), "increment")
        .args_json(json!({}))
        .transact()
        .await?;

    let _ = account
        .call(contract.id(), "decrement")
        .args_json(json!({}))
        .transact()
        .await?;

    let _ = account
        .call(contract.id(), "increment")
        .args_json(json!({}))
        .transact()
        .await?;

    let counter_in_one = contract
        .view("get_num")
        .args_json(json!({}))
        .await?;

    assert_eq!(counter_in_one.json::<u8>()?, 1);

    Ok(())
}

#[tokio::test]
async fn test_can_be_decremented() -> Result<(), Box<dyn std::error::Error>> {

    let (account, contract) = prepare_test_environment().await?;
    let counter_in_zero = contract
        .view("get_num")
        .args_json(json!({}))
        .await?;

    assert_eq!(counter_in_zero.json::<u8>()?,0);

    let _ = account
        .call(contract.id(), "decrement")
        .args_json(json!({}))
        .transact()
        .await?;

    let _ = account
        .call(contract.id(), "decrement")
        .args_json(json!({}))
        .transact()
        .await?;

    let counter_in_minus_one = contract
        .view("get_num")
        .args_json(json!({}))
        .await?;

    assert_eq!(counter_in_minus_one.json::<i8>()?,-2);
    
    Ok(())
}

#[tokio::test]
async fn test_can_be_reset() -> Result<(), Box<dyn std::error::Error>> {

    let (account, contract) = prepare_test_environment().await?;
    let counter_in_zero = contract
        .view("get_num")
        .args_json(json!({}))
        .await?;

    assert_eq!(counter_in_zero.json::<u8>()?,0);

    let outcome_increment = account
        .call(contract.id(), "increment")
        .args_json(json!({}))
        .transact()
        .await?;

    assert!(outcome_increment.is_success());

    let outcome_reset = account
        .call(contract.id(), "reset")
        .args_json(json!({}))
        .transact()
        .await?;

    assert!(outcome_reset.is_success());

    let counter_reset = contract
        .view("get_num")
        .args_json(json!({}))
        .await?;

    assert_eq!(counter_reset.json::<i8>()?,0);

    Ok(())
}

'''
'''--- contract-ts/README.md ---
# Count on NEAR Contract

The smart contract exposes methods to interact with a counter stored in the NEAR network.

```ts
val: number = 0;

@view
// Public read-only method: Returns the counter value.
get_num(): number {
  return this.val
}

@call
// Public method: Increment the counter.
increment() {
  this.val += 1;
  near.log(`Increased number to ${this.val}`)
}

@call
// Public method: Decrement the counter.
decrement() {
  this.val -= 1;
  near.log(`Decreased number to ${this.val}`)
}

@call
// Public method - Reset to zero.
reset() {
  this.val = 0;
  near.log(`Reset counter to zero`)
}
```

<br />

# Quickstart

1. Make sure you have installed [node.js](https://nodejs.org/en/download/package-manager/) >= 16.
2. Install the [`NEAR CLI`](https://github.com/near/near-cli#setup)

<br />

## 1. Build and Deploy the Contract
You can automatically compile and deploy the contract in the NEAR testnet by running:

```bash
npm run deploy
```

Once finished, check the `neardev/dev-account` file to find the address in which the contract was deployed:

```bash
cat ./neardev/dev-account
# e.g. dev-1659899566943-21539992274727
```

<br />

## 2. Get the Counter

`get_num` is a read-only method (aka `view` method).

`View` methods can be called for **free** by anyone, even people **without a NEAR account**!

```bash
# Use near-cli to get the counter value
near view <dev-account> get_num
```

<br />

## 3. Modify the Counter
`increment`, `decrement` and `reset` change the contract's state, for which they are `call` methods.

`Call` methods can only be invoked using a NEAR account, since the account needs to pay GAS for the transaction.

```bash
# Use near-cli to set increment the counter
near call <dev-account> increment --accountId <dev-account>
```

**Tip:** If you would like to call `increment` using your own account, first login into NEAR using:

```bash
# Use near-cli to login your NEAR account
near login
```

and then use the logged account to sign the transaction: `--accountId <your-account>`.
'''
'''--- contract-ts/package.json ---
{
  "name": "counter",
  "version": "1.0.0",
  "license": "(MIT AND Apache-2.0)",
  "type": "module",
  "scripts": {
    "build": "near-sdk-js build src/contract.ts build/counter.wasm",
    "test": "$npm_execpath build && ava -- ./build/counter.wasm"
  },
  "dependencies": {
    "near-cli": "^4.0.8",
    "near-sdk-js": "1.0.0"
  },
  "devDependencies": {
    "@ava/typescript": "^4.1.0",
    "ava": "^6.1.2",
    "near-workspaces": "^3.5.0",
    "ts-morph": "^21.0.1",
    "ts-node": "^10.9.2",
    "tsimp": "^2.0.11",
    "typescript": "^5.3.3"
  }
}

'''
'''--- contract-ts/sandbox-ts/main.ava.ts ---
import { Worker, NEAR, NearAccount } from "near-workspaces";
import anyTest, { TestFn } from "ava";
import { setDefaultResultOrder } from 'dns'; setDefaultResultOrder('ipv4first'); // temp fix for node >v17

const test = anyTest as TestFn<{
  worker: Worker;
  accounts: Record<string, NearAccount>;
}>;

test.beforeEach(async (t) => {
  // Init the worker and start a Sandbox server
  const worker = t.context.worker = await Worker.init();
  const root = worker.rootAccount;

  // some test accounts
  const alice = await root.createSubAccount("alice", {
    initialBalance: NEAR.parse("30 N").toJSON(),
  });
  const contract = await root.createSubAccount("contract", {
    initialBalance: NEAR.parse("30 N").toJSON(),
  });

  // Get wasm file path from package.json test script in folder above
  await contract.deploy(process.argv[2]);

  // Save state for test runs, it is unique for each test
  t.context.accounts = { contract, alice };
});

test.afterEach.always(async (t) => {
  // Stop Sandbox server
  await t.context.worker.tearDown().catch((error) => {
    console.log("Failed to stop the Sandbox:", error);
  });
});

test("can be incremented", async (t) => {
  const { alice, contract } = t.context.accounts;
  const startCounter: number = await contract.view("get_num", {});
  await alice.call(contract, "increment", {});
  const endCounter = await contract.view("get_num", {});
  t.is(endCounter, startCounter + 1);
});

test("can be decremented", async (t) => {
  const { alice, contract } = t.context.accounts;
  await alice.call(contract, "increment", {});
  const startCounter: number = await contract.view("get_num", {});
  await alice.call(contract, "decrement", {});
  const endCounter = await contract.view("get_num", {});
  t.is(endCounter, startCounter - 1);
});

test("can be reset", async (t) => {
  const { alice, contract } = t.context.accounts;
  await alice.call(contract, "increment", {});
  await alice.call(contract, "increment", {});
  await alice.call(contract, "reset", {});
  const endCounter = await contract.view("get_num", {});
  t.is(endCounter, 0);
});

'''
'''--- contract-ts/src/contract.ts ---
import { NearBindgen, near, call, view } from 'near-sdk-js'

@NearBindgen({})
class Counter {
  val: number = 0;

  @view({}) // Public read-only method: Returns the counter value.
  get_num(): number {
    return this.val
  }

  @call({}) // Public method: Increment the counter.
  increment() {
    this.val += 1;
    near.log(`Increased number to ${this.val}`)
  }

  @call({}) // Public method: Decrement the counter.
  decrement() {
    this.val -= 1;
    near.log(`Decreased number to ${this.val}`)
  }

  @call({}) // Public method - Reset to zero.
  reset() {
    this.val = 0;
    near.log(`Reset counter to zero`)
  }
}
'''
'''--- contract-ts/tsconfig.json ---
{
  "compilerOptions": {
    "experimentalDecorators": true,
    "target": "ES5",
    "noEmit": true,
    "noImplicitAny": false,
  },
  "files": [
    "sandbox-ts/main.ava.ts",
    "src/contract.ts"
  ],
  "exclude": [
    "node_modules"
  ],
}
'''
'''--- frontend/assets/global.css ---
h1 {
  margin-top: 1em !important;
  margin-bottom: 1em !important;
  text-align: center;
}

.scene {
  height: 350px;
}
.face {
  margin: auto;
  width: 66%;
  height: 72%;
  background-color: #fffaf2;
}
.number {
  text-align: center;
  margin:auto;
  width: 66%;
  height: 28%;
  background-color: #ffd9f8;
  border-top: 5px dotted #82174d;
  font-size:1.5rem;
}
.eyes-row {
  display: flex;
  justify-content: space-around;
  margin-top: 24%;
  padding: 0 8px;
}
.closed {
  width: 22px;
  height: 13px;
  border-top-left-radius: 100px;
  border-top-right-radius: 100px;
  border-left: 2px solid #ffa4b1;
  border-right: 2px solid #ffa4b1;
  border-top: 2px solid #ffa4b1;
  margin-bottom: 12px;
}
.eye {
  width: 26px;
  height: 26px;
  border-radius: 100px;
  background-color: #ffa4b1;
  display: flex;
  justify-content: center;
  align-items: center;
  margin-bottom: 1px;
}
.eye .pupil {
  position: relative;
  width: 18px;
  height: 18px;
  border-radius: 100px;
  background-color: #82174d;
}
.eye .pupil:before {
  content: "";
  width: 6px;
  height: 6px;
  position: absolute;
  background-color: #fff;
  top: 4px;
  left: 3px;
  border-radius: 100px;
}
.eye .pupil:after {
  content: "";
  width: 3px;
  height: 3px;
  position: absolute;
  background-color: #fff;
  top: 9px;
  left: 12px;
  border-radius: 100px;
}
.mouth-row {
  display: flex;
  flex-direction: column;
  justify-content: space-around;
  align-items: center;
}
.mouth-row .mouth {
  margin-top: 3%;
}
.mouth-row .tongue {
  position:absolute;
  width: 10px;
  height: 10px;
  background-color: #FF585D;
  border-radius: 50% 50% 30%;
  margin: 5px 0;
}
.mouth-row .mouth.smile {
  height: 16px;
  width: 32px;
  border-bottom-left-radius: 32px;
  border-bottom-right-radius: 32px;
  background-color: #82174d;
  top: 120px;
}
.mouth-row .mouth.cry {
  height: 16px;
  width: 32px;
  border-top-left-radius: 32px;
  border-top-right-radius: 32px;
  background-color: #82174d;
  top: 120px;
}
.mouth-row .mouth:before {
  content: "";
  left: 43px;
  margin-top: 1%;
  border-radius: 100%;
  height: 5%;
  width: 11.5%;
  background-color: #f56f79;
  position: absolute;
}
.mouth-row .mouth:after {
  content: "";
  left: 106px;
  margin-top: 1%;
  border-radius: 100%;
  height: 5%;
  width: 11.5%;
  background-color: #f56f79;
  position: absolute;
}
.gameboy {
  position: relative;
  width: 400px;
  margin: auto;
}
.body-shape {
  position: absolute;
  height: 300px;
  width: 205px;
  border-radius: 15px;
}
.body-shape .shadow {
  height: 290px;
}
.body-shape .screen {
  margin: 20px;
  position: relative;
  width: 168px;
  height: 134px;
  background-color: #82174d;
  border-radius: 4px;
  display: flex;
  flex-direction: column;
  justify-items: center;
}
.body-shape .dot {
  content: "";
  width: 8px;
  height: 8px;
  position: absolute;
  background-color: #ffa4b1;
  top: 40px;
  left: 10px;
  border-radius: 100px;
}
.body-shape .on {
  background-color: #F0EC74;
}
.body-shape .buttons {
  display: flex;
  flex-direction: column;
  justify-content: space-around;
  width: 100%;
}
.body-shape .buttons .row {
  display: flex;
}
.body-shape .buttons .selects {
  margin-top: 10px;
  padding-left: 140px;
}
.body-shape .buttons .arrows {
  position: relative;
  height: 40px;
  width: 40px;
  border-radius: 100px;
  background-color: #ffa4b1;
  margin-left: 30px;
  padding: 0;
  cursor: grab;
}
.body-shape .buttons .arrows:disabled {
  opacity: 0.8;
  background-color: #d18892;
}
.body-shape .buttons .arrows .updown {
  position: relative;
  height: 35px;
  width: 10px;
  background-color: #82174d;
  border-radius: 2px;
  top: -8px;
  left: 14px;
}
.body-shape .buttons .arrows .left {
  position: relative;
  width: 35px;
  height: 10px;
  background-color: #82174d;
  border-radius: 2px;
  top: 14px;
  left: 2px;
}
.body-shape .buttons .arrows .right {
  position: relative;
  width: 35px;
  height: 10px;
  background-color: #82174d;
  border-radius: 2px;
  left: 2px;
}
.body-shape .buttons .ab {
  width: 64px;
  height: 64px;
  background-color: #ffa4b1;
  border-radius: 10px;
  transform: rotate(45deg);
  font-size: 0.6rem;
  text-align: center;
}
.body-shape .buttons .ab .r {
  width: 24px;
  height: 24px;
  border-radius: 100%;
  background-color: #82174d;
  position: absolute;
  transform: rotate(-45deg);
  padding: 5px;
  color: #ffa4b1;
  cursor:pointer;
  box-shadow:-1px 0 1px #4B4F54;
}
.body-shape .buttons .ab .r:hover {
  opacity: 0.8;
}
.body-shape .buttons .ab .r:active {
  background-color: #F0EC74;
  opacity: 1;
}
.body-shape .buttons .ab .a {
  top: 4px;
  left: 4px;
}
.body-shape .buttons .ab .b {
  top: 4px;
  left: 36px;
}
.body-shape .buttons .ab .c {
  top: 36px;
  left: 4px;
}
.body-shape .buttons .ab .d {
  top: 36px;
  left: 36px;
}
.shadow {
  background-color: #888ad0;
  z-index: 0;
  left: -17px;
  top: 26px;
}
.side {
  background-color: #82174d;
  z-index: 1;
}
.front {
  background-color: #f56f79;
  left: 26px;
  z-index: 2;
}
.loader,
.loader:before,
.loader:after {
  background: #f56f79;
  -webkit-animation: load1 1s infinite ease-in-out;
  animation: load1 1s infinite ease-in-out;
  width: 0.4rem;
  height: 4em;
}
.loader {
  color: #f56f79;
  margin: 2px auto;
  font-size: 0.2rem;
  -webkit-transform: translateZ(0);
  -ms-transform: translateZ(0);
  transform: translateZ(0);
  -webkit-animation-delay: -0.16s;
  animation-delay: -0.16s;
}
.loader:before,
.loader:after {
  position: absolute;
  top: 0;
  content: '';
}
.loader:before {
  left: -1.5em;
  -webkit-animation-delay: -0.32s;
  animation-delay: -0.32s;
}
.loader:after {
  left: 1.5em;
}
@-webkit-keyframes load1 {
  0%,
  80%,
  100% {
    box-shadow: 0 0;
    height: 2em;
  }
  40% {
    box-shadow: 0 -2em;
    height: 3em;
  }
}
@keyframes load1 {
  0%,
  80%,
  100% {
    box-shadow: 0 0;
    height: 2em;
  }
  40% {
    box-shadow: 0 -2em;
    height: 3em;
  }
}
'''
'''--- frontend/index.html ---
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="icon" href="assets/favicon.ico"/>
  <link rel="apple-touch-icon" href="assets/favicon.ico"/>
  <link rel="stylesheet" href="./assets/global.css">
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/css/bootstrap.min.css" integrity="sha384-GJzZqFGwb1QTTN6wy59ffF1BuGJpLSa9DkKMp0DgiMDm4iYMj70gZWKYbI706tWS" crossorigin="anonymous">
  <link href="https://fonts.googleapis.com/css?family=Arvo&display=swap" rel="stylesheet">

</head>
<body style="background: #eef2fe; font-family: 'Arvo', serif;">
  <div class="container">
    <h1>This counter lives in the NEAR blockchain!</h1>

    <div class="scene">
      <div class="gameboy">
        <div class="body-shape shadow"></div>
        <div class="body-shape side"></div>
        <div class="body-shape front">
          <div class="screen">
            <div class="dot"></div>
            <div class="face">
              <div class="eyes-row">
                <div id="left" class="closed">
                  <div class="pupil"></div>
                </div>
                <div id="right" class="closed">
                  <div class="pupil"></div>
                </div>
              </div>
              <div class="mouth-row">
                <div class="mouth smile"></div>
                <div class="tongue"></div>
              </div>
            </div>
            <div id="show" class="number"></div>
          </div>
          <div class="buttons">
            <div class="row">
              <button id="plus" class="interact arrows">
                <div class="left">
                </div>
                <div class="updown">
                </div>
              </button>
              <button id="minus" class="interact arrows">
                <div class="right">
                </div>
              </button>
            </div>
            <div class="selects row">
              <div class="ab">
                <button id="a" class="interact r a">RS</button>
                <button id="b" class="r b">LE</button>
                <button id="c" class="r c">RE</button>
                <button id="d" class="r d">L</button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class="sign-out" style="display: none;">
      <button class="btn btn-primary" style="background-color: #0072CE;">Sign Out</button>
    </div>
  
    <div class="sign-in" style="display: none;">
      <p>You'll need to sign in to interact with the counter:</p>
      <button class="btn btn-primary" style="background-color: #0072CE;">Sign In</button>
    </div>

  </div>
  <script src="./index.js" type="module"></script>
</body>
</html>

'''
'''--- frontend/index.js ---
import 'regenerator-runtime/runtime'
import { Wallet } from './near-wallet'

const CONTRACT_ADDRESS = "counter.near-examples.testnet";

// When creating the wallet you can choose to create an access key, so the user
// can skip signing non-payable methods when interacting with the contract
const wallet = new Wallet({ createAccessKeyFor: CONTRACT_ADDRESS })

// Setup on page load
window.onload = async () => {
  const isSignedIn = await wallet.startUp();

  if (isSignedIn){
    signedInFlow()
  }else{
    signedOutFlow()
  }

  updateUI()
}

// Log in and log out users using NEAR Wallet
document.querySelector('.sign-in .btn').onclick = () => { wallet.signIn() }
document.querySelector('.sign-out .btn').onclick = () => { wallet.signOut() }

// Display the signed-out-flow container
function signedOutFlow() {
  document.querySelector('.sign-in').style.display = 'block';
  document.querySelectorAll('.interact').forEach(button => button.disabled = true)
}

// Displaying the signed in flow container and display counter
async function signedInFlow() {
  document.querySelector('.sign-out').style.display = 'block';
  document.querySelectorAll('.interact').forEach(button => button.disabled = false)
}

// Buttons - Interact with the Smart contract
document.querySelector('#plus').addEventListener('click', async () => {
  resetUI();
  await wallet.callMethod({contractId: CONTRACT_ADDRESS, method: "increment"});
  await updateUI();
});

document.querySelector('#minus').addEventListener('click', async  () => {
  resetUI();
  await wallet.callMethod({contractId: CONTRACT_ADDRESS, method: "decrement"});
  await updateUI();
});
document.querySelector('#a').addEventListener('click', async  () => {
  resetUI();
  await wallet.callMethod({contractId: CONTRACT_ADDRESS, method: "reset"});
  await updateUI();
});

// Update and Reset UI
async function updateUI(){
  let count = await wallet.viewMethod({contractId: CONTRACT_ADDRESS, method: "get_num"});
  
  document.querySelector('#show').classList.replace('loader','number');
  document.querySelector('#show').innerText = count === undefined ? 'calculating...' : count;
  document.querySelector('#left').classList.toggle('eye');

  if (count >= 0) {
    document.querySelector('.mouth').classList.replace('cry','smile');
  } else {
    document.querySelector('.mouth').classList.replace('smile','cry');
  }

  if (count > 20 || count < -20) {
    document.querySelector('.tongue').style.display = 'block';
  } else {
    document.querySelector('.tongue').style.display = 'none';
  }
}

function resetUI(){
  document.querySelector('#show').classList.replace('number','loader');
  document.querySelector('#show').innerText = '';
}

// Animations
document.querySelector('#c').addEventListener('click', () => {
  document.querySelector('#left').classList.toggle('eye');
});
document.querySelector('#b').addEventListener('click', () => {
  document.querySelector('#right').classList.toggle('eye');
});
document.querySelector('#d').addEventListener('click', () => {
  document.querySelector('.dot').classList.toggle('on');
});
'''
'''--- frontend/near-wallet.js ---
/* A helper file that simplifies using the wallet selector */

// near api js
import { providers } from 'near-api-js';

// wallet selector UI
import '@near-wallet-selector/modal-ui/styles.css';
import { setupModal } from '@near-wallet-selector/modal-ui';
import LedgerIconUrl from '@near-wallet-selector/ledger/assets/ledger-icon.png';
import MyNearIconUrl from '@near-wallet-selector/my-near-wallet/assets/my-near-wallet-icon.png';

// wallet selector options
import { setupWalletSelector } from '@near-wallet-selector/core';
import { setupLedger } from '@near-wallet-selector/ledger';
import { setupMyNearWallet } from '@near-wallet-selector/my-near-wallet';

const THIRTY_TGAS = '30000000000000';
const NO_DEPOSIT = '0';

// Wallet that simplifies using the wallet selector
export class Wallet {
  walletSelector;
  wallet;
  network;
  createAccessKeyFor;

  constructor({ createAccessKeyFor = undefined, network = 'testnet' }) {
    // Login to a wallet passing a contractId will create a local
    // key, so the user skips signing non-payable transactions.
    // Omitting the accountId will result in the user being
    // asked to sign all transactions.
    this.createAccessKeyFor = createAccessKeyFor
    this.network = 'testnet'
  }

  // To be called when the website loads
  async startUp() {
    this.walletSelector = await setupWalletSelector({
      network: this.network,
      modules: [setupMyNearWallet({ iconUrl: MyNearIconUrl }),
      setupLedger({ iconUrl: LedgerIconUrl })],
    });

    const isSignedIn = this.walletSelector.isSignedIn();

    if (isSignedIn) {
      this.wallet = await this.walletSelector.wallet();
      this.accountId = this.walletSelector.store.getState().accounts[0].accountId;
    }

    return isSignedIn;
  }

  // Sign-in method
  signIn() {
    const description = 'Please select a wallet to sign in.';
    const modal = setupModal(this.walletSelector, { contractId: this.createAccessKeyFor, description });
    modal.show();
  }

  // Sign-out method
  signOut() {
    this.wallet.signOut();
    this.wallet = this.accountId = this.createAccessKeyFor = null;
    window.location.replace(window.location.origin + window.location.pathname);
  }

  // Make a read-only call to retrieve information from the network
  async viewMethod({ contractId, method, args = {} }) {
    const { network } = this.walletSelector.options;
    const provider = new providers.JsonRpcProvider({ url: network.nodeUrl });

    let res = await provider.query({
      request_type: 'call_function',
      account_id: contractId,
      method_name: method,
      args_base64: Buffer.from(JSON.stringify(args)).toString('base64'),
      finality: 'optimistic',
    });
    return JSON.parse(Buffer.from(res.result).toString());
  }

  // Call a method that changes the contract's state
  async callMethod({ contractId, method, args = {}, gas = THIRTY_TGAS, deposit = NO_DEPOSIT }) {
    // Sign a transaction with the "FunctionCall" action
    const outcome = await this.wallet.signAndSendTransaction({
      signerId: this.accountId,
      receiverId: contractId,
      actions: [
        {
          type: 'FunctionCall',
          params: {
            methodName: method,
            args,
            gas,
            deposit,
          },
        },
      ],
    });

    return providers.getTransactionLastResult(outcome)
  }

  // Get transaction result from the network
  async getTransactionResult(txhash) {
    const { network } = this.walletSelector.options;
    const provider = new providers.JsonRpcProvider({ url: network.nodeUrl });

    // Retrieve transaction result from the network
    const transaction = await provider.txStatus(txhash, 'unnused');
    return providers.getTransactionLastResult(transaction);
  }
}
'''
'''--- frontend/package.json ---
{
  "name": "my-near-app",
  "version": "1.0.0",
  "license": "(MIT AND Apache-2.0)",
  "scripts": {
    "start": "parcel index.html",
    "build": "parcel build index.html --public-url ./"
  },
  "devDependencies": {
    "env-cmd": "^10.1.0",
    "events": "^3.3.0",
    "nodemon": "^2.0.16",
    "parcel": "^2.7.0",
    "process": "^0.11.10"
  },
  "dependencies": {
    "@near-wallet-selector/core": "^7.0.0",
    "@near-wallet-selector/ledger": "^7.0.0",
    "@near-wallet-selector/math-wallet": "^7.0.0",
    "@near-wallet-selector/meteor-wallet": "^7.0.0",
    "@near-wallet-selector/modal-ui": "^7.0.0",
    "@near-wallet-selector/my-near-wallet": "^7.0.0",
    "@near-wallet-selector/near-wallet": "^7.0.0",
    "@near-wallet-selector/nightly": "^7.0.0",
    "@near-wallet-selector/nightly-connect": "^7.0.0",
    "@near-wallet-selector/sender": "^7.0.0",
    "@near-wallet-selector/wallet-connect": "^7.0.0",
    "near-api-js": "^0.44.2"
  }
}

'''