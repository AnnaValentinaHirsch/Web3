*GitHub Repository "near-tips/ntvalidator"*

'''--- .github/workflows/github.yml ---
name: deployment
on:
  push:
    branches:
      - master
jobs:
  deploy_first_validator:
    name: Deploy first
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to Digital Ocean droplet via SSH action
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.FIRST_HOST }}
          username: ${{ secrets.FIRST_USERNAME }}
          password: ${{ secrets.FIRST_PASSWORD }}
          script: |
            # Go to validator repository
            cd ../home/ueprod/ntvalidator/
            # Pull changes
            git pull
            # Restart Docker
            yarn docker:prod

  deploy_second_validator:
    name: Deploy second
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to Digital Ocean droplet via SSH action
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SECOND_HOST }}
          username: ${{ secrets.SECOND_USERNAME }}
          password: ${{ secrets.SECOND_PASSWORD }}
          script: |
            # Go to validator repository
            cd ./neartips/ntvalidator/
            # Pull changes
            git pull
            # Restart Docker
            yarn docker:prod
'''
'''--- .idea/modules.xml ---
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ProjectModuleManager">
    <modules>
      <module fileurl="file://$PROJECT_DIR$/.idea/ntvalidator.iml" filepath="$PROJECT_DIR$/.idea/ntvalidator.iml" />
    </modules>
  </component>
</project>
'''
'''--- .idea/vcs.xml ---
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="VcsDirectoryMappings">
    <mapping directory="$PROJECT_DIR$" vcs="Git" />
  </component>
</project>
'''
'''--- README.md ---
## Near-Tips Validator

Goal of this project is to decentralized validate user oauth2

    This project has following dependencies:
    - Node (version >= 16)

#### Build and start for dev

    - yarn
    - yarn run generatekeys
    - yarn dev

#### Environment variables to be configured

    - NODE_ENV – production | staging | development
    - PORT – server port number
    - ORIGIN – origin from where you will get requests
    - STACK_KEY – key for stackexchangeapi

#### Docker-compose way for local

To run all the deps in docker run the command

    1. Create .env file and set valuae as in .env.example
    2. yarn run generatekeys
    3. yarn run docker:dev

#### Run validator on your server

    1. Create .env file and set valuae as in example .env.example
    2. yarn run generatekeys
    3. yarn run docker:prod

'''
'''--- docker-compose.dev.yml ---
version: "3.8"
services:
  ntvalidator:
    command: yarn dev
    environment:
      - NODE_ENV=${NODE_ENV}
      - PORT=${PORT}
      - ORIGIN=${ORIGIN}
      - STACK_KEY=${STACK_KEY}

'''
'''--- docker-compose.prod.yml ---
version: "3.8"
services:
  ntvalidator:
    command: yarn start
    environment:
      - NODE_ENV=${NODE_ENV}
      - PORT=${PORT}
      - ORIGIN=${ORIGIN}
      - STACK_KEY=${STACK_KEY}
    ports:
      - ${PORT}:${PORT}
'''
'''--- docker-compose.yml ---
version: "3.8"
services:
  ntvalidator:
    build: .
    volumes:
      - .:/app

'''
'''--- package.json ---
{
  "name": "ntvalidator",
  "version": "1.0.0",
  "main": "src/index.js",
  "license": "MIT",
  "scripts": {
    "start": "node src/index.js",
    "dev": "nodemon src/index.js",
    "generatekeys": "node src/scripts/generateKeys.js",
    "docker:prod": "docker-compose -f docker-compose.yml -f docker-compose.prod.yml --env-file ./.env up -d --no-deps --build",
    "docker:dev": "docker-compose -f docker-compose.yml -f docker-compose.dev.yml --env-file ./.env up --no-deps --build",
    "docker:test": "docker-compose -f docker-compose.yml -f docker-compose.test.yml up --abort-on-container-exit"
  },
  "dependencies": {
    "axios": "^0.24.0",
    "base-58": "^0.0.1",
    "body-parser": "^1.19.1",
    "borsh": "^0.7.0",
    "compression": "^1.7.4",
    "cors": "^2.8.5",
    "dotenv-safe": "^8.2.0",
    "express": "^4.17.2",
    "express-validation": "^4.1.0",
    "helmet": "^4.6.0",
    "method-override": "^3.0.0",
    "morgan": "^1.10.0",
    "near-api-js": "^0.44.2",
    "nodemon": "^2.0.15"
  }
}

'''
'''--- src/config/vars.js ---
const path = require('path');

// import .env variables
require('dotenv-safe').config({
    path: path.join(__dirname, '../../.env'),
    example: path.join(__dirname, '../../.env.example'),
});

module.exports = {
    env: process.env.NODE_ENV,
    port: process.env.PORT,
    stackKey: process.env.STACK_KEY,
    errorBotServer: process.env.ERROR_BOT_SERVER,
    service: process.env.SERVICE,
    origin: process.env.ORIGIN,
    logs: process.env.NODE_ENV === 'production' ? 'combined' : 'dev',
};

'''
'''--- src/index.js ---
const express = require('express');
const bodyParser = require('body-parser');
const compress = require('compression');
const methodOverride = require('method-override');
const cors = require('cors');
const helmet = require('helmet');
const v1 = require('./routes/v1');
const routes = require('./routes');
const morgan = require('morgan');
const { logs, port, origin } = require('./config/vars');
const { handleError } = require("./utils/handleError");
const { ValidationError } = require("express-validation");

/**
 * Express instance
 * @public
 */
const app = express();

// request logging. dev: console | production: file
app.use(morgan(logs));

// parse body params and attache them to req.body
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

// gzip compression
app.use(compress());

// lets you use HTTP verbs such as PUT or DELETE
// in places where the client doesn't support it
app.use(methodOverride());

// secure apps by setting various HTTP headers
app.use(helmet());

// enable CORS - Cross Origin Resource Sharing
app.use(cors({
    origin,
    methods: "GET,HEAD,PUT,PATCH,POST,DELETE",
}));

// mount api v1 routes
app.use('/v1', v1);
app.use('/', routes);

app.use(async function (err, req, res, next) {
    if (err instanceof ValidationError) {
        await handleError(err, 'Validation')

        return res.status(err.statusCode).json(err)
    }

    if (err) {
        await handleError(err.details.body, 'Validation')
        return res.status(500).json(err)
    }

    return next();
})

app.listen(port, '0.0.0.0', () => {
    console.log(`Example app listening at http://localhost:${port}`)
})

'''
'''--- src/routes/index.js ---
const express = require('express');
const router = express.Router();

router.get('/', async (req, res) => {
    try {
        res.json('OK!');
    } catch (error) {
        console.log('error', error);
        res.status(400).json({
            success: false,
            message: error
        });
    }
});

module.exports = router;

'''
'''--- src/routes/v1/index.js ---
const express = require('express');
const fs = require("fs");
const { KeyPairEd25519 } = require("near-api-js/lib/utils");
const axios = require("axios");
const Base58 = require("base-58");
const borsh = require("borsh");
const { stackKey } = require('../../config/vars');
const { handleError } = require("../../utils/handleError");
const { validate } = require("express-validation");
const { sign } = require("../../validations/notify.validation");

const router = express.Router();

const Service = {
    Stackoverflow: 'Stackoverflow',
    Twitter: 'Twitter',
    Reddit: 'Reddit',
}

class ValidatorMsg {
    constructor({ service_id, account_id, deadline }) {
        this.service_id = service_id
        this.account_id = account_id
        this.deadline = deadline
    }
}

class ServiceId {
    constructor({ service, id }) {
        this.service = service
        this.id = id
    }
}

router.post('/trans/sign', validate(sign, {}, {}), async (req, res) => {
    try {
        const { accessToken, userId, accountId } = req.body;

        // Get validator keys
        const fileData = fs.readFileSync('./generatedKeys.js')
        const { privateKey } = JSON.parse(fileData.toString())
        const keyPair = new KeyPairEd25519(privateKey)

        // Make deadline as +3 mins of current time in nano secs
        const deadline = (new Date().getTime() + 3 * 60 * 1000) * Math.pow(10, 6)

        // Value for serialization
        const value = new ValidatorMsg({
            service_id: new ServiceId({ service: Service.Stackoverflow, id: userId }),
            account_id: accountId,
            deadline: String(deadline),
        })

        // Schema for serialization
        const schema = new Map([
            [ValidatorMsg, {
                kind: 'struct',
                fields: [
                    ['service_id', ServiceId], ['account_id', 'string'], ['deadline', 'u64']
                ]
            }],
            [ServiceId, {
                kind: 'struct',
                fields: [
                    ['service', 'u8'], ['id', 'string']
                ]
            }]
        ]);
        const buffer = borsh.serialize(schema, value);
        const u8 = new Uint8Array(buffer)

        // Sign with the validator key
        const signature = keyPair.sign(u8).signature;
        const validatorId = Base58.encode(keyPair.getPublicKey().data)

        console.log({ u8, accountId, userId, deadline, signature, validatorId })

        // Get user data
        const { data } = await axios.get('https://api.stackexchange.com/2.3/me', {
            params: {
                access_token: accessToken,
                site: 'stackoverflow',
                key: stackKey,
            }
        })

        // Validate that user id same that we get by that access_token
        if (data.items[0].user_id.toString() === userId) {
            res.json({
                signature,
                validatorId,
                deadline: String(deadline),
            });
        } else {
            res.status(401).json({
                success: false,
                message: 'Unauthorized'
            });
        }
    } catch (error) {
        const status = error.response ? error.response.status : 400;
        const message = error.response ? error.response.data : error;
        console.log('Notify error \n', message);
        await handleError(message, 'trans/sign')
        res.status(status).json({
            success: false,
            message,
        });
    }
});

module.exports = router;

'''
'''--- src/scripts/generateKeys.js ---
const fs = require('fs');
const { KeyPairEd25519 } = require("near-api-js/lib/utils/key_pair");
const Base58 = require("base-58");

(async () => {
    const keyPair = KeyPairEd25519.fromRandom()
    const { secretKey } = keyPair
    const generatedKeys = `{"privateKey":"${secretKey}","publicKey":"${Base58.encode(keyPair.getPublicKey().data)}"}`

    fs.writeFile("./generatedKeys.js", generatedKeys, function(err) {
        if(err) {
            return console.log(err);
        }
        console.log("The file was saved!");
    });
})();

'''
'''--- src/utils/handleError.js ---
const axios = require("axios");
const { errorBotServer, env, service } = require('../config/vars');

const handleError = async (error, funcName) => {
    await axios.post(errorBotServer + '/v1/handleError', {
        service,
        error: JSON.stringify(error),
        funcName,
        environment: env
    }).catch((e) => console.log('Cant handle error', e.response.data.details.body))
}

module.exports = {
    handleError
}
'''
'''--- src/validations/notify.validation.js ---
const { Joi } = require("express-validation");

module.exports = {
    // POST /v1/notify
    sign: {
        body: Joi.object({
            accessToken: Joi.string().required(),
            userId: Joi.string().required(),
            accountId: Joi.string().required(),
        }),
    },
};

'''