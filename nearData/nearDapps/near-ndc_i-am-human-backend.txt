*GitHub Repository "near-ndc/i-am-human-backend"*

'''--- index.js ---
require('dotenv').config();
const functions = require('firebase-functions/v2');
const admin = require('firebase-admin');

const express = require('express');
const cors = require('cors');
const { urlencoded, json } = require('body-parser');
const app = express();

const serviceAccount = require('./i-am-human.json');
const SupabaseRouter = require('./router/supabase');
const Is_Admin = require('./router/is_admin');

admin.initializeApp({
  credential: admin.credential.cert(serviceAccount),
});

app.use(urlencoded({ extended: true }));
app.use(express.json({ extended: true }));
app.use(json());
app.use(cors({ origin: true }));
app.use(express.json({ limit: '100mb' }));
app.use(express.urlencoded({ limit: '100mb' }));
app.use(function (req, res, next) {
  res.header('Access-Control-Allow-Origin', '*');
  res.header(
    'Access-Control-Allow-Methods',
    'GET, POST, OPTIONS, PUT, PATCH, DELETE'
  );
  res.header(
    'Access-Control-Allow-Headers',
    'x-access-token, Origin, X-Requested-With, Content-Type, Accept'
  );
  const allowedHosts = [
    'https://i-am-human.app/',
    'https://i-am-human-dev.netlify.app/',
    'https://i-am-human-dev.netlify.app',
    'https://i-am-human.app',
  ];

  if (allowedHosts.includes(req.headers.origin)) {
    next();
  } else {
    res.send('Access Denied');
  }
});

app.use(SupabaseRouter);
app.use(Is_Admin);

const port = process.env.PORT || 3001;

app.listen(port, () => {
  console.log('app running on port ' + port);
});
// Create and Deploy Your First Cloud Functions
// https://firebase.google.com/docs/functions/write-firebase-functions

// exports.dev = functions.https.onRequest(app);

'''
'''--- package.json ---
{
  "name": "functions",
  "description": "Cloud Functions for Firebase",
  "scripts": {
    "serve": "firebase emulators:start --only functions",
    "shell": "firebase functions:shell",
    "start": "npm run shell",
    "deploy": "firebase deploy --only functions",
    "logs": "firebase functions:log"
  },
  "engines": {
    "node": "16"
  },
  "main": "index.js",
  "dependencies": {
    "@supabase/supabase-js": "^2.10.0",
    "body-parser": "latest",
    "cors": "latest",
    "csv-parse": "^5.5.0",
    "dotenv": "^16.0.3",
    "express": "latest",
    "firebase-admin": "^10.0.2",
    "firebase-functions": "^3.18.0",
    "request-ip": "^3.3.0"
  },
  "devDependencies": {
    "firebase-functions-test": "^0.2.0"
  },
  "private": true
}

'''
'''--- router/is_admin.js ---
const express = require("express");
const Router = new express.Router();
const { supabase } = require("../utils/supabase");

Router.post("/is_admin", async (req, res) => {
  const { wallet } = req.body;
  const { data } = await supabase.from("super_admins").select("*");
  const superadmins = data.map((item) => item.wallet_address);
  res.send({ is_super_admin: superadmins.includes(wallet) });
});

module.exports = Router;

'''
'''--- router/supabase.js ---
const express = require('express');
const Router = new express.Router();
const { supabase } = require('../utils/supabase');
const requestIp = require('request-ip');
const fs = require('fs');
const { parse } = require('csv-parse');

async function loadCSV(filename, ignore) {
  try {
    const data = [];

    return new Promise((resolve, reject) => {
      fs.createReadStream(filename)
        .pipe(
          parse({
            delimiter: ',',
            columns: true,
            ltrim: true,
          })
        )
        .on('data', function (row) {
          data.push(row);
        })
        .on('error', function (error) {
          console.error('Error:', error.message);
          reject(error);
        })
        .on('end', function () {
          resolve(data);
        });
    });
  } catch (e) {
    if (!ignore) {
      console.error('Failed to load CSV:', filename, e);
    }
  }
  return null;
}

Router.post('/insert', async (req, res) => {
  const { body, table } = req.body;
  const { error, data } = await supabase.from(table).insert(body);
  res.send({ error, data });
});

Router.post('/select', async (req, res) => {
  const { match = undefined, table } = req.body;
  const blacklistArray = await loadCSV('./blacklist.csv');
  if (match) {
    let { error, data } = await supabase.from(table).select('*').match(match);
    if (table === 'scoreboard') {
      data = data?.filter((item) => {
        return !blacklistArray?.find((i) => i.owner_id === item.account);
      });
    }
    res.send({ error, data });
  } else {
    // the result can be > 1000, so need pagination
    let errorMessage = '';
    let pageIndex = 0;
    let pageSize = 1000; // Number of records to fetch per page
    let totalResults = [];
    let runCode = true;
    while (runCode) {
      const { error, data } = await supabase
        .from(table)
        .select('*')
        .range(pageIndex * pageSize, (pageIndex + 1) * pageSize - 1);

      if (error) {
        errorMessage = error;
        runCode = false;
        break;
      }

      if (data.length === 0) {
        runCode = false;
        // No more results, break the loop
        break;
      }

      totalResults = totalResults.concat(data);
      pageIndex++;
    }
    await Promise.all(totalResults);
    if (table === 'scoreboard') {
      totalResults = totalResults?.filter((item) => {
        return !blacklistArray?.find((i) => i.owner_id === item.account);
      });
    }
    res.send({ error: errorMessage, data: totalResults });
  }
});

Router.post('/update', async (req, res) => {
  const { match, body, table } = req.body;
  const { error, data } = await supabase.from(table).update(body).match(match);
  res.send({ error, data });
});

Router.post('/delete', async (req, res) => {
  const { match, table } = req.body;
  const { error, data } = await supabase.from(table).delete().match(match);
  res.send({ error, data });
});

Router.post('/store-ip', async (req, res) => {
  const { match, body, table } = req.body;
  var clientIp = requestIp.getClientIp(req);
  let updatedBody = { ...body, client_ip: clientIp };
  const { error, data } = await supabase
    .from(table)
    .update(updatedBody)
    .match(match);
  res.send({ error, data });
});

module.exports = Router;

'''
'''--- utils/supabase.js ---
const { createClient } = require("@supabase/supabase-js");

const supabase = createClient(
  process.env.SUPABASE_CLIENT_URL,
  process.env.SUPABASE_CLIENT_ANON
);

module.exports = { supabase };

'''