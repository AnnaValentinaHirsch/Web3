*GitHub Repository "mhassanist/ukraine-ntfs"*

'''--- README.md ---
# Ukraine NFTs
This repo is the frontend code for Ukraine NFT Project

# Sample Usage

## Install dependencies
yarn

## Build
yarn build

## Run
yarn start

'''
'''--- package.json ---
{
  "name": "ukraine-zoo",
  "version": "0.1.0",
  "license": "(MIT AND Apache-2.0)",
  "scripts": {
    "build": "yarn build:web",
    "build:web": "parcel build src/index.html --public-url ./",
    "lint": "eslint \"./**/*.js\" \"./**/*.jsx\"",
    "start": "parcel src/index.html",
    "predeploy": "npm run build",
    "deploy": "gh-pages -d dist"
  },
  "devDependencies": {
    "@babel/core": "^7.14.0",
    "@babel/preset-env": "^7.16.4",
    "@babel/preset-react": "^7.13.13",
    "babel-jest": "^27.4.2",
    "eslint": "^7.32.0",
    "gh-pages": "^3.2.3",
    "jest": "^26.6.3",
    "jest-environment-node": "^26.6.2",
    "nodemon": "^2.0.7",
    "parcel-bundler": "^1.12.5",
    "react-test-renderer": "^17.0.2",
    "sass": "^1.44.0",
    "typescript": "^4.5.2"
  },
  "dependencies": {
    "assets": "^3.0.1",
    "big.js": "^6.1.1",
    "env-cmd": "^10.1.0",
    "near-api-js": "^0.44.2",
    "prop-types": "^15.7.2",
    "react": "^17.0.2",
    "react-dom": "^17.0.2",
    "regenerator-runtime": "^0.13.9",
    "uuid": "^8.3.2",
    "uuidv4": "^6.2.13"
  },
  "resolutions": {
    "@babel/preset-env": "7.13.8"
  },
  "jest": {
    "projects": [
      {
        "displayName": "User interface tests",
        "testEnvironment": "jsdom",
        "testMatch": [
          "<rootDir>/src/tests/ui/*.js"
        ]
      },
      {
        "displayName": "Integration tests",
        "testEnvironment": "near-cli/test_environment",
        "testMatch": [
          "<rootDir>/src/tests/integration/*.js"
        ]
      }
    ],
    "testPathIgnorePatterns": [
      "assembly/*"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

'''
'''--- src/App.js ---
import "regenerator-runtime/runtime"
import React, { useState, useEffect } from "react"
import PropTypes from "prop-types"
import Big from "big.js"
import Form from "./components/Form"
import SignIn from "./components/SignIn"
import { v4 as uuid } from "uuid"

const BOATLOAD_OF_GAS = Big(3)
  .times(10 ** 13)
  .toFixed()

const App = ({ contract, currentUser, nearConfig, wallet }) => {
  const [messages, setMessages] = useState([])

  const onSubmit = (e) => {
    e.preventDefault()
    console.log(contract)
    const {
      fieldset,
      nfttitle,
      nftdescription,
      nftmedialink,
      message,
      donation,
    } = e.target.elements

    fieldset.disabled = true

    console.log("Receiver: ", currentUser.accountId)
    console.log("Receiver: ", nfttitle.value)
    console.log("Receiver: ", nftdescription.value)
    console.log("Receiver: ", nftmedialink.value)
    console.log("Receiver: ", donation.value)
    contract
      .nft_mint(
        {
          token_id: uuid(),
          receiver_id: currentUser.accountId,
          token_metadata: {
            title: nfttitle.value,
            description: nftdescription.value,
            media: nftmedialink.value,
            copies: 1,
          },
        },
        BOATLOAD_OF_GAS,
        Big(donation.value)
          .times(10 ** 24)
          .toFixed()
      )
      .catch((e) => {
        console.log(e)
      })
      .then(() => {
        alert(
          "Thanks for your support!. The NFT is minted and can be found in your wallet's collection tab."
        )
      })
  }

  const signIn = () => {
    wallet.requestSignIn(
      {
        contractId: nearConfig.contractName,
        methodNames: [contract.nft_mint.name],
      }, //contract requesting access
      "UkraineZoo", //optional name
      null, //optional URL to redirect to if the sign in was successful
      null //optional URL to redirect to if the sign in was NOT successful
    )
  }

  const signOut = () => {
    wallet.signOut()
    window.location.replace(window.location.origin + window.location.pathname)
  }

  return (
    <main>
      <header>
        {currentUser ? (
          <button onClick={signOut}>Log out</button>
        ) : (
          <button onClick={signIn}>Log in</button>
        )}
        <h1 display="block">Support Ukraine Zoo!</h1>
      </header>

      {currentUser ? (
        <Form onSubmit={onSubmit} currentUser={currentUser} />
      ) : (
        <SignIn />
      )}
      {currentUser ? (
        <div></div>
      ) : (
        <button onClick={signIn}>Log in | Support</button>
      )}
    </main>
  )
}

App.propTypes = {
  contract: PropTypes.shape({
    nft_mint: PropTypes.func.isRequired,
    new_default_meta: PropTypes.func.isRequired,
  }).isRequired,
  currentUser: PropTypes.shape({
    accountId: PropTypes.string.isRequired,
    balance: PropTypes.string.isRequired,
  }),
  nearConfig: PropTypes.shape({
    contractName: PropTypes.string.isRequired,
  }).isRequired,
  wallet: PropTypes.shape({
    requestSignIn: PropTypes.func.isRequired,
    signOut: PropTypes.func.isRequired,
  }).isRequired,
}

export default App

'''
'''--- src/config.js ---
const CONTRACT_NAME = "nft-ukraine.msaudi.testnet"

function getConfig(env) {
  switch (env) {
    case "mainnet":
      return {
        networkId: "mainnet",
        nodeUrl: "https://rpc.mainnet.near.org",
        contractName: CONTRACT_NAME,
        walletUrl: "https://wallet.near.org",
        helperUrl: "https://helper.mainnet.near.org",
      }
    // This is an example app so production is set to testnet.
    // You can move production to mainnet if that is applicable.
    case "production":
    case "development":
    case "testnet":
      return {
        networkId: "testnet",
        nodeUrl: "https://rpc.testnet.near.org",
        contractName: CONTRACT_NAME,
        walletUrl: "https://wallet.testnet.near.org",
        helperUrl: "https://helper.testnet.near.org",
      }
    case "betanet":
      return {
        networkId: "betanet",
        nodeUrl: "https://rpc.betanet.near.org",
        contractName: CONTRACT_NAME,
        walletUrl: "https://wallet.betanet.near.org",
        helperUrl: "https://helper.betanet.near.org",
      }
    case "local":
      return {
        networkId: "local",
        nodeUrl: "http://localhost:3030",
        keyPath: `${process.env.HOME}/.near/validator_key.json`,
        walletUrl: "http://localhost:4000/wallet",
        contractName: CONTRACT_NAME,
      }
    case "test":
    case "ci":
      return {
        networkId: "shared-test",
        nodeUrl: "https://rpc.ci-testnet.near.org",
        contractName: CONTRACT_NAME,
        masterAccount: "test.near",
      }
    case "ci-betanet":
      return {
        networkId: "shared-test-staging",
        nodeUrl: "https://rpc.ci-betanet.near.org",
        contractName: CONTRACT_NAME,
        masterAccount: "test.near",
      }
    default:
      throw Error(
        `Unconfigured environment '${env}'. Can be configured in src/config.js.`
      )
  }
}

module.exports = getConfig

'''
'''--- src/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon.ico">
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <link rel="stylesheet" href="global.scss" />
    <title>NFTizer by mhassanist/title>
    <meta property="og:title" content="Mhassanist NFTizer" />
    <meta property="og:description" content="Mint NFT on the NEAR blockchain" />
    <!-- <meta property="og:image" content=""> -->
    <!-- <meta property="og:url" content=""> -->
    <!-- <meta name="twitter:card" content="summary_large_image"> -->
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `yarn dev`.
      To create a production bundle, use `yarn build`.
    -->
    <script src="./index.js"></script>
  </body>
</html>

'''
'''--- src/index.js ---
import React from "react"
import ReactDOM from "react-dom"
import App from "./App"
import getConfig from "./config.js"
import * as nearAPI from "near-api-js"

// Initializing contract
async function initContract() {
  // get network configuration values from config.js
  // based on the network ID we pass to getConfig()
  const nearConfig = getConfig(process.env.NEAR_ENV || "testnet")

  // create a keyStore for signing transactions using the user's key
  // which is located in the browser local storage after user logs in
  const keyStore = new nearAPI.keyStores.BrowserLocalStorageKeyStore()

  // Initializing connection to the NEAR testnet
  const near = await nearAPI.connect({ keyStore, ...nearConfig })

  // Initialize wallet connection
  const walletConnection = new nearAPI.WalletConnection(near)

  // Load in user's account data
  let currentUser
  if (walletConnection.getAccountId()) {
    currentUser = {
      // Gets the accountId as a string
      accountId: walletConnection.getAccountId(),
      // Gets the user's token balance
      balance: (await walletConnection.account().state()).amount,
    }
  }

  // Initializing our contract APIs by contract name and configuration
  const contract = await new nearAPI.Contract(
    // User's accountId as a string
    walletConnection.account(),
    // accountId of the contract we will be loading
    // NOTE: All contracts on NEAR are deployed to an account and
    // accounts can only have one contract deployed to them.
    nearConfig.contractName,
    {
      // View methods are read-only – they don't modify the state, but usually return some value
      viewMethods: ["new_default_meta"],
      // Change methods can modify the state, but you don't receive the returned value when called
      changeMethods: ["nft_mint"],
      // Sender is the account ID to initialize transactions.
      // getAccountId() will return empty string if user is still unauthorized
      sender: walletConnection.getAccountId(),
    }
  )

  return { contract, currentUser, nearConfig, walletConnection }
}

window.nearInitPromise = initContract().then(
  ({ contract, currentUser, nearConfig, walletConnection }) => {
    ReactDOM.render(
      <App
        contract={contract}
        currentUser={currentUser}
        nearConfig={nearConfig}
        wallet={walletConnection}
      />,
      document.getElementById("root")
    )
  }
)

'''