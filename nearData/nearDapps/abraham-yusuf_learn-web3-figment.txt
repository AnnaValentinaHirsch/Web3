*GitHub Repository "abraham-yusuf/learn-web3-figment"*

'''--- contracts/near/compile.js ---
// This file does two things:
//
// 1. Compile the Rust contract using cargo (see buildCmd below). This will
//    create a wasm file in the 'build' folder.
// 2. Create a symbolic link (symlink) to the generated wasm file in the root
//    project's `out` folder, for easy use with near-cli.
//
// First, import some helper libraries. `shelljs` is included in the
// devDependencies of the root project, which is why it's available here. It
// makes it easy to use *NIX-style scripting (which works on Linux distros,
// macOS, and Unix systems) on Windows as well.
const sh = require('shelljs');

// Figure out which directory the user called this script from, which we'll use
// later to set up the symlink.
const calledFromDir = sh.pwd().toString();

// For the duration of this script, we want to operate from within the
// Rust project's folder. Let's change into that directory.
sh.cd(__dirname);

// You can call this script with `node compile.js` or `node compile.js
// --debug`. Let's set a variable to track whether `--debug` was used.
const debug = process.argv.pop() === '--debug';

// Note: see other flags in ./cargo/config. Unfortunately, you cannot set the
// `--target option` in Cargo.toml.
const buildCmd = debug
  ? 'cargo build --target wasm32-unknown-unknown'
  : 'cargo build --target wasm32-unknown-unknown --release';

// Execute the build command, storing exit code for later use
const {code} = sh.exec(buildCmd);

// Assuming this is compiled from the project root directory, link the compiled
// contract to the `out` folder â€“
// When running commands like `near deploy`, near-cli looks for a contract at
// <CURRENT_DIRECTORY>/out/main.wasm
if (code === 0 && calledFromDir !== __dirname) {
  const linkDir = `${calledFromDir}/contracts/near/out`;
  const link = `${calledFromDir}/contracts/near/out/main.wasm`;
  const packageName = require('fs')
    .readFileSync(`${__dirname}/Cargo.toml`)
    .toString()
    .match(/name = "([^"]+)"/)[1];
  const outFile = `./target/wasm32-unknown-unknown/${
    debug ? 'debug' : 'release'
  }/${packageName}.wasm`;
  sh.mkdir('-p', linkDir);
  sh.rm('-f', link);
  //fixes #831: copy-update instead of linking .- sometimes sh.ln does not work on Windows
  sh.cp('-u', outFile, link);
}

// exit script with the same code as the build command
process.exit(code);

'''
'''--- contracts/polygon/SimpleStorage/migrations/1_initial_migration.js ---
const Migrations = artifacts.require('Migrations');

module.exports = function (deployer) {
  deployer.deploy(Migrations);
};

'''
'''--- contracts/polygon/SimpleStorage/migrations/2_deploy_contracts.js ---
const SimpleStorage = artifacts.require('SimpleStorage');

module.exports = function (deployer) {
  deployer.deploy(SimpleStorage);
};

'''
'''--- contracts/polygon/SimpleStorage/truffle-config.js ---
const HDWalletProvider = require('@truffle/hdwallet-provider');
const fs = require('fs');
const mnemonic = fs.readFileSync('.secret').toString().trim();

module.exports = {
  // See <http://truffleframework.com/docs/advanced/configuration>
  // for more details on how to specify configuration options!
  compilers: {
    solc: {
      version: '0.8.0',
      parser: 'solcjs', // Leverages solc-js purely for speedy parsing
      settings: {
        optimizer: {
          enabled: true,
          runs: 200, // Optimize for how many times you intend to run the code
        },
        evmVersion: 'istanbul', // Default: "istanbul" - will soon be forking to london
      },
    },
  },
  networks: {
    development: {
      host: '127.0.0.1',
      port: 9545,
      network_id: '*',
    },
    test: {
      host: '127.0.0.1',
      port: 9545,
      network_id: '*',
    },
    matic: {
      provider: () =>
        new HDWalletProvider({
          mnemonic: {
            phrase: mnemonic,
          },
          providerOrUrl: `https://matic-mumbai.chainstacklabs.com`,
          chainId: 80001,
        }),
      network_id: 80001,
      confirmations: 2,
      timeoutBlocks: 200,
      skipDryRun: true,
      chainId: 80001,
    },
  },
};

'''
'''--- contracts/tezos/counter.js ---
export const CONTRACT_JSON = [
  {
    prim: 'parameter',
    args: [
      {
        prim: 'or',
        args: [
          {prim: 'int', annots: ['%decrement']},
          {prim: 'int', annots: ['%increment']},
        ],
      },
    ],
  },
  {prim: 'storage', args: [{prim: 'int'}]},
  {
    prim: 'code',
    args: [
      [
        {prim: 'UNPAIR'},
        {
          prim: 'IF_LEFT',
          args: [[{prim: 'SWAP'}, {prim: 'SUB'}], [{prim: 'ADD'}]],
        },
        {prim: 'NIL', args: [{prim: 'operation'}]},
        {prim: 'PAIR'},
      ],
    ],
  },
];

'''
'''--- next.config.js ---
module.exports = {
  reactStrictMode: true,
  typescript: {
    ignoreBuildErrors: true,
  },
};

'''