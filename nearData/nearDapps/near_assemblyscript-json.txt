*GitHub Repository "near/assemblyscript-json"*

'''--- .eslintrc.js ---
module.exports = {
  root: true,
  parser: "@typescript-eslint/parser",
  plugins: [
    "@typescript-eslint",
  ],
  extends: [
    "eslint:recommended",
    "plugin:@typescript-eslint/eslint-recommended",
    "plugin:@typescript-eslint/recommended",
  ],
  parserOptions: {
    ecmaVersion: 2020,
    sourceType: "module",
    ecmaFeatures: {}
  },

  // === General rules =========================================================

  rules: {
    // Omitted semicolons are hugely popular, yet within the compiler it makes
    // sense to be better safe than sorry.
    "semi": "error",

    // Our code bases uses 2 spaces for indentation, and we enforce it here so
    // files don't mix spaces, tabs or different indentation levels.
    "indent": ["error", 2, {
      "SwitchCase": 1,
      "VariableDeclarator": "first",
      "offsetTernaryExpressions": true,
      "ignoredNodes": [ // FIXME: something's odd here
        "ConditionalExpression > *",
        "ConditionalExpression > * > *",
        "ConditionalExpression > * > * > *"
      ]
    }],

    // This is mostly visual style, making comments look uniform.
    "spaced-comment": ["error", "always", {
      "markers": ["/"],   // triple-slash
      "exceptions": ["/"] // all slashes
    }],

    // This tends to be annoying as it encourages developers to make everything
    // that is never reassigned a 'const', sometimes semantically incorrect so,
    // typically leading to huge diffs in follow-up PRs modifying affected code.
    "prefer-const": "off",

    // It is perfectly fine to declare top-level variables with `var`, yet this
    // rule doesn't provide configuration options that would help.
    "no-var": "off",

    // Quite often, dealing with multiple related cases at once or otherwise
    // falling through is exactly the point of using a switch.
    "no-fallthrough": "off",

    // Typical false-positives here are `do { ... } while (true)` statements or
    // similar, but the only option provided here is not checking any loops.
    "no-constant-condition": ["error", { checkLoops: false }],

    // Functions are nested in blocks occasionally, and there haven't been any
    // problems with this so far, so turning the check off.
    "no-inner-declarations": "off",

    // Quite common in scenarios where an iteration starts at `current = this`.
    "@typescript-eslint/no-this-alias": "off",

    // Disabled here, but enabled again for JavaScript files.
    "no-unused-vars": "off",

    // Disabled here, but enabled again for TypeScript files.
    "@typescript-eslint/no-unused-vars": "off",

    // Allow emptry functions for some of our base classes
    "@typescript-eslint/no-empty-function": "off"
  },
  overrides: [

    // === TypeScript rules ====================================================

    {
      files: [
        "**/assembly/**/*.ts"
      ],
      rules: {
        // Enforcing to remove function parameters on stubs makes code less
        // maintainable, so we instead allow unused function parameters.
        "@typescript-eslint/no-unused-vars": [
          "warn", {
            "vars": "local",
            "varsIgnorePattern": "^_|^[A-Z](?:From|To)?$", // ignore type params
            "args": "none",
            "ignoreRestSiblings": false
          }
        ],

        // Namespaces are quite useful in AssemblyScript
        "@typescript-eslint/no-namespace": "off",

        // There is actually codegen difference here
        "@typescript-eslint/no-array-constructor": "off",

        // Sometimes it can't be avoided to add a @ts-ignore
        "@typescript-eslint/ban-ts-comment": "off",

        // Utilized to achieve portability in some cases
        "@typescript-eslint/no-non-null-assertion": "off",
      }
    },

    // === Compiler rules (extends AssemblyScript rules) =======================

    {
      files: [
        "**/assembly/**/*.ts"
      ],
      rules: {
        // There is an actual codegen difference here - TODO: revisit
        "no-cond-assign": "off",

        // Not all types can be omitted in AS yet - TODO: revisit
        "@typescript-eslint/no-inferrable-types": "off",

        // Used rarely to reference internals that are not user-visible
        "@typescript-eslint/triple-slash-reference": "off",

        // The compiler has its own `Function` class for example
        "no-shadow-restricted-names": "off",
        "@typescript-eslint/ban-types": "off"
      }
    },

    // === Standard Library rules (extends AssemblyScript rules) ===============

    {
      files: [
        "**/assembly/**/*.ts"
      ],
      rules: {
        // We are implementing with --noLib, so we shadow all the time
        "no-shadow-restricted-names": "off",

        // Similarly, sometimes we need the return type to be String, not string
        "@typescript-eslint/ban-types": "off"
      }
    },

    // === Standard Definition rules (extends TypeScript rules) ================

    {
      files: [
        "**/assembly/**/*.d.ts"
      ],
      rules: {
        // Often required to achieve compatibility with TypeScript
        "@typescript-eslint/no-explicit-any": "off",

        // Interfaces can be stubs here, i.e. not yet fully implemented
        "@typescript-eslint/no-empty-interface": "off",

        // Definitions make use of `object` to model rather unusual constraints
        "@typescript-eslint/ban-types": "off"
      }
    },

    

    // === Test rules (extends TypeScript rules) ===============================

    {
      files: [
        "**/assembly/__tests__/**/*.ts"
      ],
      rules: {
        // Tests typically include unusual code patterns on purpose. This is
        // very likely not an extensive list, but covers what's there so far.
        "no-empty": "off",
        "no-cond-assign": "off",
        "no-compare-neg-zero": "off",
        "no-inner-declarations": "off",
        "no-constant-condition": "off",
        "use-isnan": "off",
        "@typescript-eslint/no-namespace": "off",
        "@typescript-eslint/no-unused-vars": "off",
        "@typescript-eslint/no-empty-function": "off",
        "@typescript-eslint/no-non-null-assertion": "off",
        "@typescript-eslint/no-extra-semi": "off",
        "@typescript-eslint/no-inferrable-types": "off",
        "@typescript-eslint/ban-types": "off",
        "@typescript-eslint/triple-slash-reference": "off",
        "@typescript-eslint/ban-ts-comment": "off",
        "@typescript-eslint/no-extra-non-null-assertion": "off",
        "@typescript-eslint/no-empty-interface": "off"
      }
    },
  ]
};

'''
'''--- .github/dependabot.yml ---
version: 2
updates:
- package-ecosystem: npm
  directory: "/"
  schedule:
    interval: daily
    time: "13:00"
  open-pull-requests-limit: 10
  versioning-strategy: widen
  ignore:
  - dependency-name: assemblyscript
    versions:
    - 0.18.0
    - 0.18.10
    - 0.18.11
    - 0.18.12
    - 0.18.13
    - 0.18.14
    - 0.18.15
    - 0.18.16
    - 0.18.18
    - 0.18.19
    - 0.18.21
    - 0.18.22
    - 0.18.23
    - 0.18.24
    - 0.18.25
    - 0.18.26
    - 0.18.27
    - 0.18.28
    - 0.18.3
    - 0.18.4
    - 0.18.6
    - 0.18.7
    - 0.18.9
  - dependency-name: typedoc-plugin-markdown
    versions:
    - 3.5.0
    - 3.6.0
    - 3.6.1
    - 3.7.1
  - dependency-name: eslint
    versions:
    - 7.18.0
    - 7.19.0
    - 7.20.0
    - 7.21.0
    - 7.22.0
    - 7.23.0
    - 7.24.0
  - dependency-name: "@typescript-eslint/parser"
    versions:
    - 4.14.1
    - 4.14.2
    - 4.15.0
    - 4.15.1
    - 4.15.2
    - 4.16.1
    - 4.17.0
    - 4.18.0
    - 4.19.0
    - 4.20.0
    - 4.21.0
  - dependency-name: "@typescript-eslint/eslint-plugin"
    versions:
    - 4.14.1
    - 4.14.2
    - 4.15.0
    - 4.15.1
    - 4.15.2
    - 4.16.1
    - 4.17.0
    - 4.18.0
    - 4.19.0
    - 4.20.0
    - 4.21.0
  - dependency-name: typedoc
    versions:
    - 0.20.24
    - 0.20.25
    - 0.20.27
    - 0.20.28
    - 0.20.29
    - 0.20.30
    - 0.20.32
    - 0.20.33
    - 0.20.34
    - 0.20.35
  - dependency-name: husky
    versions:
    - 4.3.8
    - 5.0.9
    - 5.1.0
    - 5.1.1
    - 5.1.2
    - 5.1.3
    - 5.2.0
  - dependency-name: "@as-pect/cli"
    versions:
    - 5.0.1
    - 6.0.0
  - dependency-name: typescript
    versions:
    - 4.1.4
    - 4.1.5

'''
'''--- .travis.yml ---
language: node_js
node_js:
  - "node"
  - "lts/*"

jobs:
  include:
    - name: yarn
      script:
      - yarn test
      - yarn docs

    - name: fossa
      before_script:
        - "curl -H 'Cache-Control: no-cache' https://raw.githubusercontent.com/fossas/fossa-cli/fc60c6631a5d372d5a45fea35e31665b338f260d/install.sh | sudo bash"
      script:
        - fossa init
        - fossa analyze --server-scan
        - fossa test

    - name: JSON Test Suite
      before_script:
        - "curl https://wasmtime.dev/install.sh -sSf | bash"
      script:
        - bash utils/run_testsuite.sh
'''
'''--- README.md ---
# assemblyscript-json

![npm version](https://img.shields.io/npm/v/assemblyscript-json) ![npm downloads per month](https://img.shields.io/npm/dm/assemblyscript-json)

JSON encoder / decoder for AssemblyScript.

Special thanks to https://github.com/MaxGraey/bignum.wasm for basic unit testing infra for AssemblyScript.

## Installation

`assemblyscript-json` is available as a [npm package](https://www.npmjs.com/package/assemblyscript-json). You can install `assemblyscript-json` in your AssemblyScript project by running:

`npm install --save assemblyscript-json`

## Usage

### Parsing JSON

```typescript
import { JSON } from "assemblyscript-json"; 

// Parse an object using the JSON object
let jsonObj: JSON.Obj = <JSON.Obj>(JSON.parse('{"hello": "world", "value": 24}'));

// We can then use the .getX functions to read from the object if you know it's type
// This will return the appropriate JSON.X value if the key exists, or null if the key does not exist
let worldOrNull: JSON.Str | null = jsonObj.getString("hello"); // This will return a JSON.Str or null
if (worldOrNull != null) {
  // use .valueOf() to turn the high level JSON.Str type into a string
  let world: string = worldOrNull.valueOf();
}

let numOrNull: JSON.Num | null = jsonObj.getNum("value");
if (numOrNull != null) {
  // use .valueOf() to turn the high level JSON.Num type into a f64
  let value: f64 = numOrNull.valueOf();
}

// If you don't know the value type, get the parent JSON.Value
let valueOrNull: JSON.Value | null = jsonObj.getValue("hello");
  if (valueOrNull != null) {
  let value = <JSON.Value>valueOrNull;

  // Next we could figure out what type we are
  if(value.isString) { 
    // value.isString would be true, so we can cast to a string
    let innerString = (<JSON.Str>value).valueOf();
    let jsonString = (<JSON.Str>value).stringify();

    // Do something with string value
  }
}
```

### Encoding JSON

```typescript
import { JSONEncoder } from "assemblyscript-json";

// Create encoder
let encoder = new JSONEncoder();

// Construct necessary object
encoder.pushObject("obj");
encoder.setInteger("int", 10);
encoder.setString("str", "");
encoder.popObject();

// Get serialized data
let json: Uint8Array = encoder.serialize();

// Or get serialized data as string
let jsonString: string = encoder.stringify();

assert(jsonString, '"obj": {"int": 10, "str": ""}'); // True!
```

### Custom JSON Deserializers

```typescript
import { JSONDecoder, JSONHandler } from "assemblyscript-json";

// Events need to be received by custom object extending JSONHandler.
// NOTE: All methods are optional to implement.
class MyJSONEventsHandler extends JSONHandler {
  setString(name: string, value: string): void {
    // Handle field
  }

  setBoolean(name: string, value: bool): void {
    // Handle field
  }

  setNull(name: string): void {
    // Handle field
  }

  setInteger(name: string, value: i64): void {
    // Handle field
  }

  setFloat(name: string, value: f64): void {
    // Handle field
  }

  pushArray(name: string): bool {
    // Handle array start
    // true means that nested object needs to be traversed, false otherwise
    // Note that returning false means JSONDecoder.startIndex need to be updated by handler
    return true;
  }

  popArray(): void {
    // Handle array end
  }

  pushObject(name: string): bool {
    // Handle object start
    // true means that nested object needs to be traversed, false otherwise
    // Note that returning false means JSONDecoder.startIndex need to be updated by handler
    return true;
  }

  popObject(): void {
    // Handle object end
  }
}

// Create decoder
let decoder = new JSONDecoder<MyJSONEventsHandler>(new MyJSONEventsHandler());

// Create a byte buffer of our JSON. NOTE: Deserializers work on UTF8 string buffers.
let jsonString = '{"hello": "world"}';
let jsonBuffer = Uint8Array.wrap(String.UTF8.encode(jsonString));

// Parse JSON
decoder.deserialize(jsonBuffer); // This will send events to MyJSONEventsHandler
```

Feel free to look through the [tests](https://github.com/nearprotocol/assemblyscript-json/tree/master/assembly/__tests__) for more usage examples.

## Reference Documentation

Reference API Documentation can be found in the [docs directory](./docs).

## License

[MIT](./LICENSE)

'''
'''--- as-pect.config.js ---
module.exports = {
  /**
   * A set of globs passed to the glob package that qualify typescript files for testing.
   */
  include: ["assembly/__tests__/**/*.spec.ts"],
  /**
   * A set of globs passed to the glob package that quality files to be added to each test.
   */
  add: ["assembly/__tests__/**/*.include.ts"],
  /**
   * All the compiler flags needed for this test suite. Make sure that a binary file is output.
   */
  flags: {
    // "--debug": [],
    /** This is required. Do not change this. The filename is ignored, but required by the compiler. */
    "--binaryFile": ["output.wasm"],
    /** To enable wat file output, use the following flag. The filename is ignored, but required by the compiler. */
    "--textFile": ["output.wat"],
    "--runtime": ["stub"], // Acceptable values are: full, half, stub (arena), and none,
    "--baseDir": process.cwd(),
    // "--runPasses": ["dce"]
  },
  /**
   * A set of regexp that will disclude source files from testing.
   */
  disclude: [/node_modules/],
  /**
   * Add your required AssemblyScript imports here.
   */
  imports: {},
  /**
   * All performance statistics reporting can be configured here.
   */
  performance: {
    /** Enable performance statistics gathering. */
    enabled: false,
    /** Set the maximum number of samples to run for each test. */
    maxSamples: 10000,
    /** Set the maximum test run time in milliseconds. */
    maxTestRunTime: 2000,
    /** Set the number of decimal places to round to. */
    roundDecimalPlaces: 3,
    /** Report the median time in the default reporter. */
    reportMedian: true,
    /** Report the average time in milliseconds. */
    reportAverage: true,
    /** Report the standard deviation. */
    reportStandardDeviation: false,
    /** Report the maximum run time in milliseconds. */
    reportMax: false,
    /** Report the minimum run time in milliseconds. */
    reportMin: false,
    /** Report the variance. */
    reportVariance: false,
  },
  /**
   * Add a custom reporter here if you want one. The following example is in typescript.
   *
   * @example
   * import { TestReporter, TestGroup, TestResult, TestContext } from "as-pect";
   *
   * export class CustomReporter extends TestReporter {
   *   // implement each abstract method here
   *   public abstract onStart(suite: TestContext): void;
   *   public abstract onGroupStart(group: TestGroup): void;
   *   public abstract onGroupFinish(group: TestGroup): void;
   *   public abstract onTestStart(group: TestGroup, result: TestResult): void;
   *   public abstract onTestFinish(group: TestGroup, result: TestResult): void;
   *   public abstract onFinish(suite: TestContext): void;
   * }
   */
  // reporter: new CustomReporter(),
};

'''
'''--- assembly/JSON.ts ---
import { Buffer } from "./util";
import { JSONDecoder, JSONHandler } from './decoder';

class Handler extends JSONHandler {
  stack: Value[] = new Array<Value>();

  reset(): void {
    while (this.stack.length > 0) {
      this.stack.pop();
    }
  }

  get peek(): Value {
    return this.stack[this.stack.length - 1];
  }

  setString(name: string, value: string): void {
    const obj: Value = Value.String(value);
    this.addValue(name, obj);
  }

  setBoolean(name: string, value: bool): void {
    const obj = Value.Bool(value);
    this.addValue(name, obj);
  }

  setNull(name: string): void {
    const obj = Value.Null();
    this.addValue(name, obj);
  }

  setInteger(name: string, value: i64): void {
    const obj = Value.Integer(value);
    this.addValue(name, obj);
  }

  setFloat(name: string, value: f64): void {
    const obj = Value.Float(value);
    this.addValue(name, obj);
  }

  pushArray(name: string): bool {
    const obj: Value = Value.Array();
    if (this.stack.length == 0) {
      this.stack.push(obj);
    } else {
      this.addValue(name, obj);
      this.stack.push(obj);
    }
    return true;
  }

  popArray(): void {
    if (this.stack.length > 1) {
      this.stack.pop();
    }
  }

  pushObject(name: string): bool {
    const obj: Value = Value.Object();
    this.addValue(name, obj);
    this.stack.push(obj);
    return true;
  }

  popObject(): void {
    if (this.stack.length > 1) {
      this.stack.pop();
    }
  }

  addValue(name: string, obj: Value): void {
    if (name.length == 0 && this.stack.length == 0) {
      this.stack.push(obj);
      return;
    }
    if (this.peek instanceof Obj) {
      (this.peek as Obj).set(name, obj);
    } else if (this.peek instanceof Arr) {
      (<Arr>this.peek).push(obj);
    }
  }
}

namespace _JSON {
  // @ts-ignore decorator is valid
  @lazy
  export const handler: Handler = new Handler();
  // @ts-ignore decorator is valid
  @lazy
  export const decoder: JSONDecoder<Handler> = new JSONDecoder<Handler>(
    _JSON.handler
  );

  /** Parses a string or Uint8Array and returns a Json Value. */
  export function parse<T = Uint8Array>(str: T): Value {
    var arr: Uint8Array;
    if (isString<T>(str)) {
      arr = Buffer.fromString(<string>str);
    } else {
      arr = changetype<Uint8Array>(str);
    }
    _JSON.decoder.deserialize(arr);
    const res = _JSON.decoder.handler.peek;
    _JSON.decoder.handler.reset();
    return res;
  }
}

// @ts-ignore
@lazy const NULL: Null = new Null();

export abstract class Value {
  static String(str: string): Str {
    return new Str(str);
  }
  static Number(num: f64): Num {
    return new Num(num);
  }
  static Float(num: f64): Float {
    return new Float(num);
  }
  static Integer(num: i64): Integer {
    return new Integer(num);
  }
  static Bool(b: bool): Bool {
    return new Bool(b);
  }
  static Null(): Null {
    return NULL;
  }
  static Array(): Arr {
    return new Arr();
  }
  static Object(): Obj {
    return new Obj();
  }

  get isString(): boolean {
    return this instanceof Str;
  }

  get isNum(): boolean {
    return this instanceof Num;
  }

  get isFloat(): boolean {
    return this instanceof Float;
  }

  get isInteger(): boolean {
    return this instanceof Integer;
  }

  get isBool(): boolean {
    return this instanceof Bool;
  }

  get isNull(): boolean {
    return this instanceof Null;
  }

  get isArr(): boolean {
    return this instanceof Arr;
  }

  get isObj(): boolean {
    return this instanceof Obj;
  }

  /**
   * @returns A valid JSON string of the value
   */
  abstract stringify(): string;

  /**
   * 
   * @returns A AS string corresponding to the value. 
   */
  toString(): string {
    return this.stringify();
  }
}

function escapeChar(char: string): string {
  const charCode = char.charCodeAt(0);
  switch (charCode) {
    case 0x22: return '\\"';
    case 0x5C: return "\\\\";
    case 0x08: return "\\b";
    case 0x0A: return "\\n";
    case 0x0D: return "\\r";
    case 0x09: return "\\t";
    case 0x0C: return "\\f";
    case 0x0B: return "\\u000b";
    default: return char;
  }
}

export class Str extends Value {

  constructor(public _str: string) {
    super();
  }

  stringify(): string {
    let escaped: string[] = new Array(this._str.length);
    for (let i = 0; i < this._str.length; i++) {
      const char = this._str.at(i);
      escaped[i] = escapeChar(char);
    }
    return `"${escaped.join('')}"`;
  }

  toString(): string {
    return this._str;
  }

  valueOf(): string {
    return this._str;
  }
}

export class Num extends Value {
  constructor(public _num: f64) {
    super();
  }

  stringify(): string {
    return this._num.toString();
  }

  valueOf(): f64 {
    return this._num;
  }
}

export class Float extends Num {
}

export class Integer extends Value {
  constructor(public _num: i64) {
    super();
  }

  stringify(): string {
    return this._num.toString();
  }

  valueOf(): i64 {
    return this._num;
  }
}

export class Null extends Value {
  constructor() {
    super();
  }

  stringify(): string {
    return "null";
  }

  valueOf(): null {
    return null;
  }
}

export class Bool extends Value {
  constructor(public _bool: bool) {
    super();
  }

  stringify(): string {
    return this._bool.toString();
  }

  valueOf(): bool {
    return this._bool;
  }
}

export class Arr extends Value {
    _arr: Array<Value>;
    constructor() {
      super();
      this._arr = new Array<Value>();
    }

    push(obj: Value): void {
      this._arr.push(obj);
    }

    stringify(): string {
      return (
        "[" +
        this._arr
          .map<string>((val: Value, i: i32, _arr: Value[]): string =>
            val.stringify()
          )
          .join(",") +
        "]"
      );
    }

    valueOf(): Array<Value> {
      return this._arr;
    }
}

export class Obj extends Value {
    _obj: Map<string, Value>;

    constructor() {
      super();
      this._obj = new Map();
    }

    get keys(): string[] {
      return this._obj.keys();
    }

    stringify(): string {
      const keys = this._obj.keys();
      const objs: string[] = new Array<string>(keys.length);
      for (let i: i32 = 0; i < keys.length; i++) {
        const key = keys[i];
        const value = this._obj.get(key);
        // Currently must get the string value before interpolation 
        // see: https://github.com/AssemblyScript/assemblyscript/issues/1944
        const valStr = value.stringify();
        objs[i] = `"${key}":${valStr}`;
      }

      return `{${objs.join(",")}}`;
    }

    valueOf(): Map<string, Value> {
      return this._obj;
    }

    set<T>(key: string, value: T): void {
      if (isReference<T>(value)) {
        if (value instanceof Value) {
          this._obj.set(key, <Value>value);
          return;
        }
      }
      this._obj.set(key, from<T>(value));
    }

    has(key: string): bool {
      return this._obj.has(key);
    }

    get(key: string): Value | null {
      if (!this._obj.has(key)) {
        return null;
      }
      return this._obj.get(key);
    }

    getValue(key: string): Value | null {
      return this.get(key);
    }

    getString(key: string): Str | null {
      let jsonValue = this.get(key);
      if (jsonValue != null && jsonValue.isString) {
        return <Str>jsonValue;
      }
      return null;
    }

    getNum(key: string): Num | null {
      let jsonValue = this.get(key);
      if (jsonValue != null && jsonValue.isNum) {
        return <Num>jsonValue;
      }
      return null;
    }

    getFloat(key: string): Float | null {
      let jsonValue = this.get(key);
      if (jsonValue != null && jsonValue.isFloat) {
        return <Float>jsonValue;
      }
      return null;
    }

    getInteger(key: string): Integer | null {
      let jsonValue = this.get(key);
      if (jsonValue != null && jsonValue.isInteger) {
        return <Integer>jsonValue;
      }
      return null;
    }

    getBool(key: string): Bool | null {
      let jsonValue = this.get(key);
      if (jsonValue != null && jsonValue.isBool) {
        return <Bool>jsonValue;
      }
      return null;
    }

    getArr(key: string): Arr | null {
      let jsonValue = this.get(key);
      if (jsonValue != null && jsonValue.isArr) {
        return <Arr>jsonValue;
      }
      return null;
    }

    getObj(key: string): Obj | null {
      let jsonValue = this.get(key);
      if (jsonValue != null && jsonValue.isObj) {
        return <Obj>jsonValue;
      }
      return null;
    }
}

export function from<T>(val: T): Value {
  if (isBoolean<T>(val)) {
    return Value.Bool(<bool>val);
  }
  if (isInteger<T>(val)) {
    return Value.Integer(val);
  }
  if (isFloat<T>(val)) {
    return Value.Float(val);
  }
  if (isString<T>(val)) {
    return Value.String(<string>val);
  }
  if (val == null) {
    return Value.Null();
  }
  if (isArrayLike<T>(val)) {
    const arr = Value.Array();
    for (let i: i32 = 0; i < val.length; i++) {
      // @ts-ignore
      arr.push(from<valueof<T>>(val[i]));
    }
    return arr;
  }
  /**
     * TODO: add object support.
     */
  return Value.Object();
}

// @ts-ignore
@inline
/** Parses a string or Uint8Array and returns a Json Value. */
export function parse<T = Uint8Array>(str: T): Value {
  return _JSON.parse(str);
}

'''
'''--- assembly/__tests__/as-pect.d.ts ---
/// <reference types="@as-pect/assembly/types/as-pect" />

'''
'''--- assembly/__tests__/json-parse.spec.ts ---
import { JSONDecoder } from "../decoder";
import { JSONEncoder } from "../encoder";
import { Buffer } from "../util";
import * as JSON from "../JSON";

let primObj: JSON.Obj;
let primArr: JSON.Arr;

function parseToString(input: string): string {
  return JSON.parse(input).stringify();
}

describe("JSON.parse", () => {
  beforeAll(() => {
    primObj = JSON.Value.Object();
    primArr = <JSON.Arr>JSON.from<i32[]>([42]);
    primObj.set("number", JSON.from(42));
    primObj.set("boolean", JSON.from(true));
    primObj.set("string", JSON.from("Hello"));
  });

  describe("Primitive Values", () => {
    it("should handle numbers", () => {
      expect((<JSON.Num>JSON.parse("123456789.0"))._num).toStrictEqual(
        (<JSON.Num>JSON.from(123456789.0))._num
      );
    });

    it("should handle floats", () => {
      expect((<JSON.Float>JSON.parse("123456789.0"))._num).toStrictEqual(
        (<JSON.Float>JSON.from(123456789.0))._num
      );
    });

    it("should handle scientific notation floats", () => {
      // Supports lower e
      expect((<JSON.Float>JSON.parse("1.23456e5"))._num).toStrictEqual(
        (<JSON.Float>JSON.from(123456.0))._num
      );

      // Supports Upper e
      expect((<JSON.Float>JSON.parse("1.23456E5"))._num).toStrictEqual(
        (<JSON.Float>JSON.from(123456.0))._num
      );

      // Supports Complex +
      expect((<JSON.Float>JSON.parse("1.23456e+5"))._num).toStrictEqual(
        (<JSON.Float>JSON.from(123456.0))._num
      );

      // Supports Complex -
      expect((<JSON.Float>JSON.parse("123456E-5"))._num).toStrictEqual(
        (<JSON.Float>JSON.from(1.23456))._num
      );
    });

    it("should handle special floats", () => {
      expect((<JSON.Float>JSON.parse("-0"))._num).toStrictEqual(
        (<JSON.Float>JSON.from(-0.0))._num
      );
    });

    it("should handle integers", () => {
      expect((<JSON.Integer>JSON.parse("123456789"))._num).toStrictEqual(
        (<JSON.Integer>JSON.from(123456789))._num
      );
    });

    it("should handle strings", () => {
      expect(parseToString('"hello"')).toStrictEqual(
        JSON.from("hello").stringify()
      );
    });

    it("should handle booleans", () => {
      expect(parseToString("true")).toStrictEqual(JSON.from(true).stringify());
      expect(parseToString("false")).toStrictEqual(JSON.from(false).stringify());
    });

    // TODO: JSON.from(null) should equal JSON.NUll();
    it("should handle null", () => {
      expect(parseToString("null")).toStrictEqual("null");
    });
  });

  describe("Arrays", () => {
    it("should handle empty ones", () => {
      expect(parseToString("[]")).toStrictEqual(
        JSON.from<i32[]>([]).stringify()
      );
    });

    it("should handle non-empty ones", () => {
      expect(parseToString("[42]")).toStrictEqual(primArr.stringify());
    });

    it("should handle nested ones", () => {
      const outterArr = JSON.Value.Array();
      outterArr.push(primArr);
      expect(parseToString("[[42]]")).toStrictEqual(outterArr.stringify());
    });
  });

  describe("Objects", () => {
    it("should handle empty objects", () => {
      expect(parseToString("{}")).toStrictEqual(JSON.Value.Object().stringify());
    });

    it("should handle primitive values", () => {
      expect(
        parseToString(`{
          "number": 42, 
          "boolean": true, 
          "string": "Hello"
        }`)
      ).toStrictEqual(primObj.stringify());
    });

    it("should handle nested objects", () => {
      const outerObj = JSON.Value.Object();
      outerObj.set("innerObject", primObj);
      expect(
        JSON.parse(`{
          "innerObject": {
            "number": 42, 
            "boolean": true, 
            "string": "Hello" 
          }
        }`)
      ).toStrictEqual(outerObj);
    });

    it("should handle arrays", () => {
      const obj = JSON.Value.Object();
      obj.set("arr", primArr);
      expect(parseToString('{"arr": [42]}')).toStrictEqual(obj.stringify());
    });
  });
});

'''
'''--- assembly/__tests__/roundtrip.spec.ts ---
import { JSONDecoder } from "../decoder";
import { JSONEncoder } from "../encoder";
import { Buffer } from "../util";
import * as JSON from "../JSON";

function roundtripTest(jsonString: string, _expectedString: string = ""): void {
  const expectedString = _expectedString == "" ? jsonString : _expectedString;
  let buffer: Uint8Array = Buffer.fromString(jsonString);
  let handler = new JSONEncoder();
  let decoder = new JSONDecoder<JSONEncoder>(handler);

  decoder.deserialize(buffer, null);

  let resultBuffer = handler.serialize();
  let resultString: string = Buffer.toString(resultBuffer);

  expect<string>(resultString).toStrictEqual(expectedString);
  expect<string>(handler.toString()).toStrictEqual(expectedString);
}

describe("Round trip", () => {
  it("should handle empty object", () => {
    roundtripTest("{}");
  });

  it("should handle empty object with whitespace", () => {
    roundtripTest("{ }", "{}");
  });

  it("should handle int32", () => {
    // expectFn(():void => {
    roundtripTest('{"int":4660}');
  });

  it("should handle float32", () => {
    // expectFn(():void => {
    roundtripTest('{"float":24.24}');
  });

  it("should handle int32Sign", () => {
    roundtripTest('{"int":-4660}');
  });

  it("should handle float32Sign", () => {
    roundtripTest('{"float":-24.24}');
  });

  it("should handle scientific notation float", () => {
    // Lower and Upper E
    roundtripTest(
      '{"floatLowerE":1.23456e5,"floatUpperE":1.23456E5}', 
      '{"floatLowerE":123456.0,"floatUpperE":123456.0}'
    );

    // Complex Scientific Notation
    roundtripTest(
      '{"floatEMinus":123456e-5,"floatEPlus":1.23456E+5}', 
      '{"floatEMinus":1.23456,"floatEPlus":123456.0}'
    );
  });

  it("should handle special floats", () => {
    roundtripTest(
      '{"negativeZero":-0}',
      '{"negativeZero":0.0}',
    );
  });

  it("should handle true", () => {
    roundtripTest('{"val":true}');
  });

  it("should handle false", () => {
    roundtripTest('{"val":false}');
  });

  it("should handle null", () => {
    roundtripTest('{"val":null}');
  });

  it("should handle string", () => {
    roundtripTest('{"str":"foo"}');
  });

  it("should handle string escaped", () => {
    roundtripTest('"\\"\\\\\\/\\n\\t\\b\\r\\t"', '"\\"\\\\/\\n\\t\\b\\r\\t"');
  });

  it("should handle string unicode escaped simple", () => {
    roundtripTest('"\\u0022"', '"\\""');
  });

  it("should handle string unicode escaped", () => {
    roundtripTest(
      '"\\u041f\\u043e\\u043b\\u0442\\u043e\\u0440\\u0430 \\u0417\\u0435\\u043c\\u043b\\u0435\\u043a\\u043e\\u043f\\u0430"',
      '"Полтора Землекопа"'
    );
  });

  it("should multiple keys", () => {
    roundtripTest('{"str":"foo","bar":"baz"}');
  });

  it("should handle nested objects", () => {
    roundtripTest('{"str":"foo","obj":{"a":1,"b":-123456}}');
  });

  it("should handle empty array", () => {
    roundtripTest("[]");
  });

  it("should handle array", () => {
    roundtripTest("[1,2,3]");
  });

  it("should handle nested arrays", () => {
    roundtripTest("[[1,2,3],[4,[5,6]]]");
  });

  it("should handle nested objects and arrays", () => {
    roundtripTest('{"str":"foo","arr":[{"obj":{"a":1,"b":-123456}}]}');
  });

  it("should handle whitespace", () => {
    roundtripTest(
      ' { "str":"foo","obj": {"a":1, "b" :\n -123456} } ',
      '{"str":"foo","obj":{"a":1,"b":-123456}}'
    );
  });
});

'''
'''--- assembly/__tests__/string_escape.spec.ts ---
import { JSON } from '..';

describe('Escaped characters', () => {
  it('Does not escape characters unneccessarily', () => {
    const strings = [
      'sphinx of black quartz, judge my vow',
      '{}',
      '[]',
      '/',
      '|',
      '/|||/|||[{]}<>,.',
      'ஂ ஃ அ ஆ இ ஈ உ ஊ எ ஏ ஐ ஒ ஓ ஔ க ங ச ஜ ஞ ட ண த ந ன ப ம ய ர ற ல ள',
      'ᄀ ᄁ ᄂ ᄃ ᄄ ᄅ ᄆ ᄇ ᄈ ᄉ ᄊ ᄋ ᄌ ᄍ ᄎ ᄏ ᄐ ᄑ ᄒ ᄓ ᄔ ᄕ ᄖ ᄗ ᄘ ᄙ ᄚ ᄛ ',
      '℀ ℁ ℂ ℃ ℄ ℅ ℆ ℇ ℈ ℉ ℊ ℋ ℌ ℍ ℎ ℏ ℐ ℑ ℒ ℓ ℔ ℕ № ℗ ℘ ℙ ℚ ℛ ℜ ℝ ℞ ℟ ℠ ℡ ™ ℣ ℤ ℥ Ω ℧ ℨ ℩ K Å ℬ ℭ ℮ ℯ ℰ ℱ Ⅎ ℳ ℴ ℵ ℶ ℷ ℸ ',
      '☀ ☁ ☂ ☃ ☄ ★ ☆ ☇ ☈ ☉ ☊ ☋ ☌ ☍ ☎ ☏ ☐ ☑ ☒ ☓ ☚ ☛ ☜ ☝ ☞ ☟ ☠ ☡ ☢ ☣ ☤ ☥ ☦ ☧ ☨ ☩ ☪ ☫ ☬ ☭ ☮ ☯ ☰ ☱ ☲ ☳ ☴ ☵ ☶ ☷ ☸ ☹ ☺ ☻ ☼ ☽ ☾ ☿ ♀ ♁ ♂ ♃ ♄ ♅ ♆ ♇ ♈ ♉ ♊ ♋ ♌ ♍ ♎ ♏ ♐ ♑ ♒ ♓',
    ];
    strings.forEach((str) => {
      const jsonStr = new JSON.Str(str);
      expect(jsonStr.stringify()).toBe(`"${str}"`);
    });
  });

  it('Escapes quotes and backslashes', () => {
    const strings = ['"', '\\', '"\\"', '\\"\\"'];
    // Computed using javascript's JSON as implemented in mozilla firefox 90.0 (64-bit)
    const expected = ["\"\\\"\"", "\"\\\\\"", "\"\\\"\\\\\\\"\"", "\"\\\\\\\"\\\\\\\"\""];
    
    for(let i=0; i<strings.length; i++){
      const jsonStr = new JSON.Str(strings[i]);
      expect(jsonStr.stringify()).toBe(expected[i]);
    }
  });

  it('Escapes control characters', () => {
    const strings = ['\n', '\r', '\r\n', '\b', '\f', '\t', '\v', '\b\f\t\v\r'];
    // Computed using javascript's JSON as implemented in mozilla firefox 90.0 (64-bit)
    const expected = ["\"\\n\"","\"\\r\"","\"\\r\\n\"","\"\\b\"","\"\\f\"","\"\\t\"","\"\\u000b\"","\"\\b\\f\\t\\u000b\\r\""];

    for(let i=0; i<strings.length; i++){
      const jsonStr = new JSON.Str(strings[i]);
      expect(jsonStr.stringify()).toBe(expected[i]);
    }
  });
});
'''
'''--- assembly/__tests__/to-string.spec.ts ---
import * as JSON from "../JSON";

let primObj: JSON.Obj;
let testFloat = 42.24;
let testInteger = 42;
let testBool = true;
let testArray = [1, 2, 3];

describe("JSON.Value.toString()", () => {
  beforeAll(() => {
    primObj = JSON.Value.Object();
    primObj.set("Str", JSON.from("Hello"));
    primObj.set("Num", JSON.from(testFloat));
    primObj.set("Float", JSON.from(testFloat));
    primObj.set("Integer", JSON.from(testInteger));
    primObj.set("Bool", JSON.from(testBool));
    primObj.set("Arr", JSON.from(testArray));
    let childObj = JSON.Value.Object();
    childObj.set("isChild", JSON.from(true));
    primObj.set("Obj", childObj);
  });

  it("Str", () => {
    let value = primObj.getString("Str");
    expect(value!.stringify()).toBe(`"Hello"`);
  });

  it("Num", () => {
    let value = primObj.getNum("Num");
    expect(value!.stringify()).toBe(testFloat.toString());
  });

  it("Float", () => {
    let value = primObj.getFloat("Float");
    expect(value!.stringify()).toBe(testFloat.toString());

  });

  it("Integer", () => {
    let value = primObj.getInteger("Integer");
    expect(value!.stringify()).toBe(testInteger.toString());
  });

  it("Bool", () => {
    let value = primObj.getBool("Bool");
    expect(value!.stringify()).toBe(testBool.toString());
  });

  it("Arr", () => {
    let value = primObj.getArr("Arr");
    expect(value!.stringify()).toBe("[" + testArray.toString() + "]");
  });

  it("String Arr", () => {
    let value = JSON.Value.Array();
    value.push(JSON.Value.String("hello"));
    value.push(JSON.Value.String("world"));
    expect(value.stringify()).toBe(`["hello","world"]`);
  });

  it("Obj", () => {
    let value = primObj.getObj("Obj");
    expect(value!.stringify()).toBe('{"isChild":true}');
  });

  it("Entire Object", () => {
    expect(primObj.stringify()).toBe(`{"Str":"Hello","Num":42.24,"Float":42.24,"Integer":42,"Bool":true,"Arr":[1,2,3],"Obj":{"isChild":true}}`);
  });
});

'''
'''--- assembly/__tests__/usage.spec.ts ---
import * as JSON from "../JSON";
import { JSONEncoder } from "../encoder";
import { JSONDecoder, JSONHandler } from "../decoder";

// Events need to be received by custom object extending JSONHandler.
// NOTE: All methods are optional to implement.
class MyJSONEventsHandler extends JSONHandler {
  setString(name: string, value: string): void {
    // Handle field
  }

  setBoolean(name: string, value: bool): void {
    // Handle field
  }

  setNull(name: string): void {
    // Handle field
  }

  setInteger(name: string, value: i64): void {
    // Handle field
  }

  setFloat(name: string, value: f64): void {
    // Handle field
  }

  pushArray(name: string): bool {
    // Handle array start
    // true means that nested object needs to be traversed, false otherwise
    // Note that returning false means JSONDecoder.startIndex need to be updated by handler
    return true;
  }

  popArray(): void {
    // Handle array end
  }

  pushObject(name: string): bool {
    // Handle object start
    // true means that nested object needs to be traversed, false otherwise
    // Note that returning false means JSONDecoder.startIndex need to be updated by handler
    return true;
  }

  popObject(): void {
    // Handle object end
  }
}

describe("README Usage Examples", () => {
  it("Parsing JSON", () => {
    // Parse an object using the JSON object
    let jsonObj: JSON.Obj = <JSON.Obj>(JSON.parse('{"hello": "world", "value": 24}'));

    // We can then use the .getX functions to read from the object if you know it's type
    // This will return the appropriate JSON.X value if the key exists, or null if the key does not exist
    let worldOrNull: JSON.Str | null = jsonObj.getString("hello"); // This will return a JSON.Str or null
    if (worldOrNull != null) {
      // use .valueOf() to turn the high level JSON.Str type into a string
      let world: string = worldOrNull.valueOf();
    }

    let numOrNull: JSON.Num | null = jsonObj.getNum("value");
    if (numOrNull != null) {
      // use .valueOf() to turn the high level JSON.Num type into a f64
      let value: f64 = numOrNull.valueOf();
    }

    // If you don't know the value type, get the parent JSON.Value
    let valueOrNull: JSON.Value | null = jsonObj.getValue("hello");
    if (valueOrNull != null) {
      let value: JSON.Value = changetype<JSON.Value>(valueOrNull);

      // Next we could figure out what type we are
      if(value.isString) { 
        // value.isString would be true, so we can cast to a string
        let stringValue: string = changetype<JSON.Str>(value).stringify();
        
        // Do something with string value
      }
    }
  });

  it("Encoding JSON", () => {
    // Create encoder
    let encoder = new JSONEncoder();

    // Construct necessary object
    encoder.pushObject("obj");
    encoder.setInteger("int", 10);
    encoder.setString("str", "");
    encoder.popObject();

    // Get serialized data
    let json: Uint8Array = encoder.serialize();

    // Or get serialized data as string
    let jsonString: string = encoder.toString();

    assert(jsonString, '"obj": {"int": 10, "str": ""}'); // True!
  });

  it("Decoding JSON", () => {

    // NOTE: Include the JSON Handler Class here

    // Create decoder
    let decoder = new JSONDecoder<MyJSONEventsHandler>(new MyJSONEventsHandler());

    // Create a byte buffer of our JSON. NOTE: Deserializers work on UTF8 string buffers.
    let jsonString = '{"hello": "world"}';
    let jsonBuffer = Uint8Array.wrap(String.UTF8.encode(jsonString));

    // Parse JSON
    decoder.deserialize(jsonBuffer); // This will send events to MyJSONEventsHandler
  });
});

'''
'''--- assembly/decoder.ts ---
import { Buffer } from "./util";

/**
 * Extend from this class to handle events from parser.
 * Default implementation traverses whole object tree and does nothing.
 */
export abstract class JSONHandler {
  setString(name: string, value: string): void {}

  setBoolean(name: string, value: bool): void {}

  setNull(name: string): void {}

  setInteger(name: string, value: i64): void {}

  setFloat(name: string, value: f64): void {}

  pushArray(name: string): bool {
    return true;
  }

  popArray(): void {}

  pushObject(name: string): bool {
    return true;
  }

  popObject(): void {}
}

/**
 * Extend from this class to handle events from parser.
 * This implementation crashes on every unimplemented set/push method
 * to allow easier validation of input.
 */
export class ThrowingJSONHandler extends JSONHandler {
  setString(name: string, value: string): void {
    assert(false, "Unexpected string field " + name + ' : "' + value + '"');
  }

  setBoolean(name: string, value: bool): void {
    assert(
      false,
      "Unexpected bool field " + name + " : " + (value ? "true" : "false")
    );
  }

  setNull(name: string): void {
    assert(false, "Unexpected null field " + name);
  }

  setInteger(name: string, value: i64): void {
    // @ts-ignore integer does have toString
    assert(
      false,
      "Unexpected integer field " + name + " : " + value.toString()
    );
  }

  setFloat(name: string, value: f64): void {
    // @ts-ignore integer does have toString
    assert(
      false,
      "Unexpected float field " + name + " : " + value.toString()
    );
  }

  pushArray(name: string): bool {
    assert(false, "Unexpected array field " + name);
    return true;
  }

  pushObject(name: string): bool {
    assert(false, "Unexpected object field " + name);
    return true;
  }
}

// @ts-ignore: decorator
@lazy const TRUE_STR = "true";
// @ts-ignore: decorator
@lazy const FALSE_STR = "false";
// @ts-ignore: decorator
@lazy const NULL_STR = "null";
// @ts-ignore: decorator
@lazy const CHAR_0: i32 = 48; // "0".charCodeAt(0);
// @ts-ignore: decorator
@lazy const CHAR_9: i32 = 57; // "9".charCodeAt(0);
// @ts-ignore: decorator
@lazy const CHAR_A: i32 = 65; // "A".charCodeAt(0);
// @ts-ignore: decorator
@lazy const CHAR_A_LOWER: i32 = 97; // "a".charCodeAt(0);
// @ts-ignore: decorator
@lazy const CHAR_PERIOD: i32 = 46; // ".".charCodeAt(0);
// @ts-ignore: decorator
@lazy const CHAR_MINUS: i32 = 45; // "-".charCodeAt(0);
// @ts-ignore: decorator
@lazy const CHAR_PLUS: i32 = 43; // "+".charCodeAt(0);
// @ts-ignore: decorator
@lazy const CHAR_E: i32 = 69; // "E".charCodeAt(0);
// @ts-ignore: decorator
@lazy const CHAR_E_LOWER: i32 = 101; // "e".charCodeAt(0);

export class DecoderState {
  lastKey: string = "";
  readIndex: i32 = 0;
  constructor(public buffer: Uint8Array) {}

  get ptr(): usize {
    return Buffer.getDataPtr(this.buffer);
  }

  readString(start: usize, end: usize = this.readIndex): string {
    return Buffer.readString(this.buffer, start, end - 1);
  }
}

export class JSONDecoder<JSONHandlerT extends JSONHandler> {
  handler: JSONHandlerT;
  _state: DecoderState | null = null;

  constructor(handler: JSONHandlerT) {
    this.handler = handler;
  }

  get state(): DecoderState {
    return <DecoderState>this._state;
  }

  set state(state: DecoderState) {
    this._state = state;
  }

  deserialize(
    buffer: Uint8Array,
    decoderState: DecoderState | null = null
  ): void {
    if (decoderState != null) {
      this.state = decoderState;
    } else {
      this.state = new DecoderState(buffer);
    }

    assert(this.parseValue(), "Cannot parse JSON");
    // TODO: Error if input left
  }

  private peekChar(): i32 {
    if (this.state.readIndex >= this.state.buffer.length) {
      return -1;
    }
    return this.state.buffer[this.state.readIndex];
  }

  private readChar(): i32 {
    assert(
      this.state.readIndex < this.state.buffer.length,
      "Unexpected input end"
    );
    return this.state.buffer[this.state.readIndex++];
  }

  private parseValue(): bool {
    this.skipWhitespace();
    let result =
      this.parseObject() ||
      this.parseArray() ||
      this.parseString() ||
      this.parseBoolean() ||
      this.parseNumber() ||
      this.parseNull();
    this.skipWhitespace();
    return result;
  }

  private parseObject(): bool {
    if (this.peekChar() != "{".charCodeAt(0)) {
      return false;
    }
    let key = this.state.lastKey;
    // @ts-ignore can be null
    this.state.lastKey = "";
    if (this.handler.pushObject(key)) {
      this.readChar();
      this.skipWhitespace();

      let firstItem = true;
      while (this.peekChar() != "}".charCodeAt(0)) {
        if (!firstItem) {
          assert(this.readChar() == ",".charCodeAt(0), "Expected ','");
        } else {
          firstItem = false;
        }
        this.parseKey();
        this.parseValue();
      }
      assert(this.readChar() == "}".charCodeAt(0), "Unexpected end of object");
    }
    this.handler.popObject();
    return true;
  }

  private parseKey(): void {
    this.skipWhitespace();
    this.state.lastKey = this.readString();
    this.skipWhitespace();
    assert(this.readChar() == ":".charCodeAt(0), "Expected ':'");
  }

  private parseArray(): bool {
    if (this.peekChar() != "[".charCodeAt(0)) {
      return false;
    }
    let key = this.state.lastKey;
    // @ts-ignore can be null
    this.state.lastKey = "";
    if (this.handler.pushArray(key)) {
      this.readChar();
      this.skipWhitespace();

      let firstItem = true;
      while (this.peekChar() != "]".charCodeAt(0)) {
        if (!firstItem) {
          assert(this.readChar() == ",".charCodeAt(0), "Expected ','");
        } else {
          firstItem = false;
        }
        this.parseValue();
      }
      assert(this.readChar() == "]".charCodeAt(0), "Unexpected end of array");
    }
    this.handler.popArray();
    return true;
  }

  private parseString(): bool {
    if (this.peekChar() != '"'.charCodeAt(0)) {
      return false;
    }
    this.handler.setString(this.state.lastKey, this.readString());
    return true;
  }

  private readString(): string {
    assert(
      this.readChar() == '"'.charCodeAt(0),
      "Expected double-quoted string"
    );
    let savedIndex = this.state.readIndex;
    // @ts-ignore can be null
    let stringParts: Array<string> = new Array<string>();
    for (;;) {
      let byte = this.readChar();
      assert(byte >= 0x20, "Unexpected control character");
      if (byte == '"'.charCodeAt(0)) {
        let s = this.state.readString(savedIndex);
        if (stringParts.length == 0) {
          return s;
        }
        stringParts.push(s);
        return stringParts.join("");
      } else if (byte == "\\".charCodeAt(0)) {
        if (this.state.readIndex > savedIndex + 1) {
          stringParts.push(this.state.readString(savedIndex));
        }
        stringParts.push(this.readEscapedChar());
        savedIndex = this.state.readIndex;
      }
    }
    // Should never happen
    return "";
  }

  private readEscapedChar(): string {
    let byte = this.readChar();
    // TODO: Use lookup table for anything except \u
    if (byte == '"'.charCodeAt(0)) {
      return '"';
    }
    if (byte == "\\".charCodeAt(0)) {
      return "\\";
    }
    if (byte == "/".charCodeAt(0)) {
      return "/";
    }
    if (byte == "b".charCodeAt(0)) {
      return "\b";
    }
    if (byte == "n".charCodeAt(0)) {
      return "\n";
    }
    if (byte == "r".charCodeAt(0)) {
      return "\r";
    }
    if (byte == "t".charCodeAt(0)) {
      return "\t";
    }
    if (byte == "u".charCodeAt(0)) {
      let d1 = this.readHexDigit();
      let d2 = this.readHexDigit();
      let d3 = this.readHexDigit();
      let d4 = this.readHexDigit();
      let charCode = d1 * 0x1000 + d2 * 0x100 + d3 * 0x10 + d4;
      return String.fromCodePoint(charCode);
    }
    assert(false, "Unexpected escaped character: " + String.fromCharCode(byte));
    return "";
  }

  private readHexDigit(): i32 {
    let byte = this.readChar();
    let digit = byte - CHAR_0;
    if (digit > 9) {
      digit = byte - CHAR_A + 10;
      if (digit < 10 || digit > 15) {
        digit = byte - CHAR_A_LOWER + 10;
      }
    }
    assert(digit >= 0 && digit < 16, "Unexpected \\u digit");
    return digit;
  }

  private parseNumber(): bool {
    let number: f64 = 0;
    let sign: f64 = 1;
    let isFloat: boolean = false;
    // Also keeping the number as a string, because we will want to use the
    // AS parseFloat as it handles precision best.
    let numberAsString: string = "";

    if (this.peekChar() == CHAR_MINUS) {
      sign = -1;
      numberAsString += String.fromCharCode(this.readChar());
    }
    let digits = 0;
    while (
      (CHAR_0 <= this.peekChar() && this.peekChar() <= CHAR_9) ||
      CHAR_PERIOD == this.peekChar() ||
      CHAR_MINUS == this.peekChar() ||
      CHAR_PLUS == this.peekChar() ||
      CHAR_E == this.peekChar() ||
      CHAR_E_LOWER == this.peekChar()
    ) {

      let charCode = this.readChar();
      numberAsString += String.fromCharCode(charCode);

      if (charCode == CHAR_E || charCode == CHAR_E_LOWER || charCode == CHAR_PERIOD || charCode == CHAR_PLUS || charCode == CHAR_MINUS) {
        isFloat = true;
      } else {
        if (!isFloat) {
          let value: f64 = charCode - CHAR_0;
          number *= 10;
          number += value;
        }
        digits++;
      }
    }
    if (digits > 0) {
      if (isFloat || numberAsString == "-0") {
        this.handler.setFloat(this.state.lastKey, parseFloat(numberAsString));
      } else {
        this.handler.setInteger(this.state.lastKey, <i64>(number * sign));
      }
      return true;
    }
    return false;
  }

  private parseBoolean(): bool {
    if (this.peekChar() == FALSE_STR.charCodeAt(0)) {
      this.readAndAssert(FALSE_STR);
      this.handler.setBoolean(this.state.lastKey, false);
      return true;
    }
    if (this.peekChar() == TRUE_STR.charCodeAt(0)) {
      this.readAndAssert(TRUE_STR);
      this.handler.setBoolean(this.state.lastKey, true);
      return true;
    }

    return false;
  }

  private parseNull(): bool {
    if (this.peekChar() == NULL_STR.charCodeAt(0)) {
      this.readAndAssert(NULL_STR);
      this.handler.setNull(this.state.lastKey);
      return true;
    }
    return false;
  }

  private readAndAssert(str: string): void {
    for (let i = 0; i < str.length; i++) {
      assert(str.charCodeAt(i) == this.readChar(), "Expected '" + str + "'");
    }
  }

  private skipWhitespace(): void {
    while (this.isWhitespace(this.peekChar())) {
      this.readChar();
    }
  }

  private isWhitespace(charCode: i32): bool {
    return (
      charCode == 0x9 || charCode == 0xa || charCode == 0xd || charCode == 0x20
    );
  }
}

'''
'''--- assembly/encoder.ts ---
import { Buffer } from "./util/index";

export class JSONEncoder {
  private _isFirstKey: i32[];
  private result: string[];

  constructor() {
    this._isFirstKey = new Array<i32>(10);
    this.result = new Array<string>();
    this._isFirstKey.push(1);
  }

  get isFirstKey(): bool {
    return <bool>this._isFirstKey[this._isFirstKey.length - 1];
  }

  serialize(): Uint8Array {
    // TODO: Write directly to UTF8 bytes
    return Buffer.fromString(this.toString());
  }

  toString(): string {
    return this.result.join("");
  }

  setString(name: string | null, value: string): void {
    this.writeKey(name);
    this.writeString(value);
  }

  setBoolean(name: string | null, value: bool): void {
    this.writeKey(name);
    this.writeBoolean(value);
  }

  setNull(name: string | null): void {
    this.writeKey(name);
    this.write("null");
  }

  setInteger(name: string | null, value: i64): void {
    this.writeKey(name);
    this.writeInteger(value);
  }

  setFloat(name: string | null, value: f64): void {
    this.writeKey(name);
    this.writeFloat(value);
  }

  pushArray(name: string | null): bool {
    this.writeKey(name);
    this.write("[");
    this._isFirstKey.push(1);
    return true;
  }

  popArray(): void {
    this.write("]");
    this._isFirstKey.pop();
  }

  pushObject(name: string | null): bool {
    this.writeKey(name);
    this.write("{");
    this._isFirstKey.push(1);
    return true;
  }

  popObject(): void {
    this.write("}");
    this._isFirstKey.pop();
  }

  private writeKey(str: string | null): void {
    if (!this.isFirstKey) {
      this.write(",");
    } else {
      this._isFirstKey[this._isFirstKey.length - 1] = 0;
    }
    if (str != null && (<string>str).length > 0) {
      this.writeString(str!);
      this.write(":");
    }
  }

  private writeString(str: string): void {
    this.write('"');
    let savedIndex = 0;
    for (let i = 0; i < str.length; i++) {
      let char = str.charCodeAt(i);
      let needsEscaping =
        char < 0x20 || char == '"'.charCodeAt(0) || char == "\\".charCodeAt(0);
      if (needsEscaping) {
        this.write(str.substring(savedIndex, i));
        savedIndex = i + 1;
        if (char == '"'.charCodeAt(0)) {
          this.write('\\"');
        } else if (char == "\\".charCodeAt(0)) {
          this.write("\\\\");
        } else if (char == "\b".charCodeAt(0)) {
          this.write("\\b");
        } else if (char == "\n".charCodeAt(0)) {
          this.write("\\n");
        } else if (char == "\r".charCodeAt(0)) {
          this.write("\\r");
        } else if (char == "\t".charCodeAt(0)) {
          this.write("\\t");
        } else {
          // TODO: Implement encoding for other contol characters
          // @ts-ignore integer does have toString
          assert(
            false,
            "Unsupported control character code: " + char.toString()
          );
        }
      }
    }
    this.write(str.substring(savedIndex, str.length));
    this.write('"');
  }

  private writeBoolean(value: bool): void {
    this.write(value ? "true" : "false");
  }

  private writeInteger(value: i64): void {
    this.write(value.toString());
  }

  private writeFloat(value: f64): void {
    this.write(value.toString());
  }

  private write(str: string): void {
    this.result.push(str);
  }
}

'''
'''--- assembly/index.ts ---
export * from "./decoder";
export * from "./encoder";
import * as JSON from "./JSON";
export { JSON };

'''
'''--- assembly/tsconfig.json ---
{
  "extends": "assemblyscript/std/assembly.json",
  "include": ["./**/*.ts"]
}

'''
'''--- assembly/util/index.ts ---
export namespace Buffer {
  export function fromString(str: string): Uint8Array {
    const buffer = String.UTF8.encode(str, false);

    // Workaround for https://github.com/AssemblyScript/assemblyscript/issues/1066
    if (buffer.byteLength === 0) return new Uint8Array(0);

    return Uint8Array.wrap(buffer);
  }

  export function toString(arr: Uint8Array): string {
    return String.UTF8.decode(arr.buffer, false);
  }

  /**
   * Returns a pointer to the start of the raw data (i.e. after the header)
   *
   * @see https://docs.assemblyscript.org/details/memory#internals
   */
  export function getDataPtr(arr: Uint8Array): usize {
    return changetype<usize>(arr.buffer) + arr.byteOffset;
  }

  export function readString(
    arr: Uint8Array,
    start: usize,
    end: usize
  ): string {
    return String.UTF8.decodeUnsafe(getDataPtr(arr) + start, end - start);
  }
}

'''
'''--- docs/README.md ---
assemblyscript-json

# assemblyscript-json

## Table of contents

### Namespaces

- [JSON](modules/json.md)

### Classes

- [DecoderState](classes/decoderstate.md)
- [JSONDecoder](classes/jsondecoder.md)
- [JSONEncoder](classes/jsonencoder.md)
- [JSONHandler](classes/jsonhandler.md)
- [ThrowingJSONHandler](classes/throwingjsonhandler.md)

'''
'''--- docs/classes/decoderstate.md ---
[assemblyscript-json](../README.md) / DecoderState

# Class: DecoderState

## Hierarchy

* **DecoderState**

## Table of contents

### Constructors

- [constructor](decoderstate.md#constructor)

### Properties

- [buffer](decoderstate.md#buffer)
- [lastKey](decoderstate.md#lastkey)
- [readIndex](decoderstate.md#readindex)

### Accessors

- [ptr](decoderstate.md#ptr)

### Methods

- [readString](decoderstate.md#readstring)

## Constructors

### constructor

\+ **new DecoderState**(`buffer`: *Uint8Array*): [*DecoderState*](decoderstate.md)

#### Parameters:

Name | Type |
------ | ------ |
`buffer` | *Uint8Array* |

**Returns:** [*DecoderState*](decoderstate.md)

Defined in: [decoder.ts:106](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/decoder.ts#L106)

## Properties

### buffer

• **buffer**: *Uint8Array*

___

### lastKey

• **lastKey**: *string*= ""

Defined in: [decoder.ts:105](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/decoder.ts#L105)

___

### readIndex

• **readIndex**: *number*= 0

Defined in: [decoder.ts:106](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/decoder.ts#L106)

## Accessors

### ptr

• **ptr**(): *number*

**Returns:** *number*

Defined in: [decoder.ts:109](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/decoder.ts#L109)

## Methods

### readString

▸ **readString**(`start`: *number*, `end?`: *number*): *string*

#### Parameters:

Name | Type | Default value |
------ | ------ | ------ |
`start` | *number* | - |
`end` | *number* | ... |

**Returns:** *string*

Defined in: [decoder.ts:113](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/decoder.ts#L113)

'''
'''--- docs/classes/json.arr.md ---
[assemblyscript-json](../README.md) / [JSON](../modules/json.md) / Arr

# Class: Arr

[JSON](../modules/json.md).Arr

## Hierarchy

* [*Value*](json.value.md)

  ↳ **Arr**

## Table of contents

### Constructors

- [constructor](json.arr.md#constructor)

### Properties

- [\_arr](json.arr.md#_arr)

### Accessors

- [isArr](json.arr.md#isarr)
- [isBool](json.arr.md#isbool)
- [isFloat](json.arr.md#isfloat)
- [isInteger](json.arr.md#isinteger)
- [isNull](json.arr.md#isnull)
- [isNum](json.arr.md#isnum)
- [isObj](json.arr.md#isobj)
- [isString](json.arr.md#isstring)

### Methods

- [push](json.arr.md#push)
- [toString](json.arr.md#tostring)
- [valueOf](json.arr.md#valueof)
- [Array](json.arr.md#array)
- [Bool](json.arr.md#bool)
- [Float](json.arr.md#float)
- [Integer](json.arr.md#integer)
- [Null](json.arr.md#null)
- [Number](json.arr.md#number)
- [Object](json.arr.md#object)
- [String](json.arr.md#string)

## Constructors

### constructor

\+ **new Arr**(): [*Arr*](json.arr.md)

**Returns:** [*Arr*](json.arr.md)

Inherited from: [Value](json.value.md)

Defined in: [JSON.ts:272](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L272)

## Properties

### \_arr

• **\_arr**: [*Value*](json.value.md)[]

Defined in: [JSON.ts:272](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L272)

## Accessors

### isArr

• **isArr**(): *boolean*

**Returns:** *boolean*

Defined in: [JSON.ts:178](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L178)

___

### isBool

• **isBool**(): *boolean*

**Returns:** *boolean*

Defined in: [JSON.ts:164](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L164)

___

### isFloat

• **isFloat**(): *boolean*

**Returns:** *boolean*

Defined in: [JSON.ts:150](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L150)

___

### isInteger

• **isInteger**(): *boolean*

**Returns:** *boolean*

Defined in: [JSON.ts:157](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L157)

___

### isNull

• **isNull**(): *boolean*

**Returns:** *boolean*

Defined in: [JSON.ts:171](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L171)

___

### isNum

• **isNum**(): *boolean*

**Returns:** *boolean*

Defined in: [JSON.ts:143](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L143)

___

### isObj

• **isObj**(): *boolean*

**Returns:** *boolean*

Defined in: [JSON.ts:185](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L185)

___

### isString

• **isString**(): *boolean*

**Returns:** *boolean*

Defined in: [JSON.ts:136](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L136)

## Methods

### push

▸ **push**(`obj`: [*Value*](json.value.md)): *void*

#### Parameters:

Name | Type |
------ | ------ |
`obj` | [*Value*](json.value.md) |

**Returns:** *void*

Defined in: [JSON.ts:278](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L278)

___

### toString

▸ **toString**(): *string*

**Returns:** *string*

Overrides: [Value](json.value.md)

Defined in: [JSON.ts:282](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L282)

___

### valueOf

▸ **valueOf**(): [*Value*](json.value.md)[]

**Returns:** [*Value*](json.value.md)[]

Defined in: [JSON.ts:294](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L294)

___

### Array

▸ `Static`**Array**(): [*Arr*](json.arr.md)

**Returns:** [*Arr*](json.arr.md)

Inherited from: [Value](json.value.md)

Defined in: [JSON.ts:129](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L129)

___

### Bool

▸ `Static`**Bool**(`b`: bool): [*Bool*](json.bool.md)

#### Parameters:

Name | Type |
------ | ------ |
`b` | bool |

**Returns:** [*Bool*](json.bool.md)

Inherited from: [Value](json.value.md)

Defined in: [JSON.ts:123](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L123)

___

### Float

▸ `Static`**Float**(`num`: *number*): [*Float*](json.float.md)

#### Parameters:

Name | Type |
------ | ------ |
`num` | *number* |

**Returns:** [*Float*](json.float.md)

Inherited from: [Value](json.value.md)

Defined in: [JSON.ts:117](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L117)

___

### Integer

▸ `Static`**Integer**(`num`: *number*): [*Integer*](json.integer.md)

#### Parameters:

Name | Type |
------ | ------ |
`num` | *number* |

**Returns:** [*Integer*](json.integer.md)

Inherited from: [Value](json.value.md)

Defined in: [JSON.ts:120](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L120)

___

### Null

▸ `Static`**Null**(): [*Null*](json.null.md)

**Returns:** [*Null*](json.null.md)

Inherited from: [Value](json.value.md)

Defined in: [JSON.ts:126](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L126)

___

### Number

▸ `Static`**Number**(`num`: *number*): [*Num*](json.num.md)

#### Parameters:

Name | Type |
------ | ------ |
`num` | *number* |

**Returns:** [*Num*](json.num.md)

Inherited from: [Value](json.value.md)

Defined in: [JSON.ts:114](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L114)

___

### Object

▸ `Static`**Object**(): [*Obj*](json.obj.md)

**Returns:** [*Obj*](json.obj.md)

Inherited from: [Value](json.value.md)

Defined in: [JSON.ts:132](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L132)

___

### String

▸ `Static`**String**(`str`: *string*): [*Str*](json.str.md)

#### Parameters:

Name | Type |
------ | ------ |
`str` | *string* |

**Returns:** [*Str*](json.str.md)

Inherited from: [Value](json.value.md)

Defined in: [JSON.ts:111](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L111)

'''
'''--- docs/classes/json.bool.md ---
[assemblyscript-json](../README.md) / [JSON](../modules/json.md) / Bool

# Class: Bool

[JSON](../modules/json.md).Bool

## Hierarchy

* [*Value*](json.value.md)

  ↳ **Bool**

## Table of contents

### Constructors

- [constructor](json.bool.md#constructor)

### Properties

- [\_bool](json.bool.md#_bool)

### Accessors

- [isArr](json.bool.md#isarr)
- [isBool](json.bool.md#isbool)
- [isFloat](json.bool.md#isfloat)
- [isInteger](json.bool.md#isinteger)
- [isNull](json.bool.md#isnull)
- [isNum](json.bool.md#isnum)
- [isObj](json.bool.md#isobj)
- [isString](json.bool.md#isstring)

### Methods

- [toString](json.bool.md#tostring)
- [valueOf](json.bool.md#valueof)
- [Array](json.bool.md#array)
- [Bool](json.bool.md#bool)
- [Float](json.bool.md#float)
- [Integer](json.bool.md#integer)
- [Null](json.bool.md#null)
- [Number](json.bool.md#number)
- [Object](json.bool.md#object)
- [String](json.bool.md#string)

## Constructors

### constructor

\+ **new Bool**(`_bool`: bool): [*Bool*](json.bool.md)

#### Parameters:

Name | Type |
------ | ------ |
`_bool` | bool |

**Returns:** [*Bool*](json.bool.md)

Inherited from: [Value](json.value.md)

Defined in: [JSON.ts:257](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L257)

## Properties

### \_bool

• **\_bool**: bool

## Accessors

### isArr

• **isArr**(): *boolean*

**Returns:** *boolean*

Defined in: [JSON.ts:178](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L178)

___

### isBool

• **isBool**(): *boolean*

**Returns:** *boolean*

Defined in: [JSON.ts:164](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L164)

___

### isFloat

• **isFloat**(): *boolean*

**Returns:** *boolean*

Defined in: [JSON.ts:150](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L150)

___

### isInteger

• **isInteger**(): *boolean*

**Returns:** *boolean*

Defined in: [JSON.ts:157](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L157)

___

### isNull

• **isNull**(): *boolean*

**Returns:** *boolean*

Defined in: [JSON.ts:171](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L171)

___

### isNum

• **isNum**(): *boolean*

**Returns:** *boolean*

Defined in: [JSON.ts:143](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L143)

___

### isObj

• **isObj**(): *boolean*

**Returns:** *boolean*

Defined in: [JSON.ts:185](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L185)

___

### isString

• **isString**(): *boolean*

**Returns:** *boolean*

Defined in: [JSON.ts:136](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L136)

## Methods

### toString

▸ **toString**(): *string*

**Returns:** *string*

Overrides: [Value](json.value.md)

Defined in: [JSON.ts:262](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L262)

___

### valueOf

▸ **valueOf**(): bool

**Returns:** bool

Defined in: [JSON.ts:266](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L266)

___

### Array

▸ `Static`**Array**(): [*Arr*](json.arr.md)

**Returns:** [*Arr*](json.arr.md)

Inherited from: [Value](json.value.md)

Defined in: [JSON.ts:129](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L129)

___

### Bool

▸ `Static`**Bool**(`b`: bool): [*Bool*](json.bool.md)

#### Parameters:

Name | Type |
------ | ------ |
`b` | bool |

**Returns:** [*Bool*](json.bool.md)

Inherited from: [Value](json.value.md)

Defined in: [JSON.ts:123](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L123)

___

### Float

▸ `Static`**Float**(`num`: *number*): [*Float*](json.float.md)

#### Parameters:

Name | Type |
------ | ------ |
`num` | *number* |

**Returns:** [*Float*](json.float.md)

Inherited from: [Value](json.value.md)

Defined in: [JSON.ts:117](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L117)

___

### Integer

▸ `Static`**Integer**(`num`: *number*): [*Integer*](json.integer.md)

#### Parameters:

Name | Type |
------ | ------ |
`num` | *number* |

**Returns:** [*Integer*](json.integer.md)

Inherited from: [Value](json.value.md)

Defined in: [JSON.ts:120](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L120)

___

### Null

▸ `Static`**Null**(): [*Null*](json.null.md)

**Returns:** [*Null*](json.null.md)

Inherited from: [Value](json.value.md)

Defined in: [JSON.ts:126](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L126)

___

### Number

▸ `Static`**Number**(`num`: *number*): [*Num*](json.num.md)

#### Parameters:

Name | Type |
------ | ------ |
`num` | *number* |

**Returns:** [*Num*](json.num.md)

Inherited from: [Value](json.value.md)

Defined in: [JSON.ts:114](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L114)

___

### Object

▸ `Static`**Object**(): [*Obj*](json.obj.md)

**Returns:** [*Obj*](json.obj.md)

Inherited from: [Value](json.value.md)

Defined in: [JSON.ts:132](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L132)

___

### String

▸ `Static`**String**(`str`: *string*): [*Str*](json.str.md)

#### Parameters:

Name | Type |
------ | ------ |
`str` | *string* |

**Returns:** [*Str*](json.str.md)

Inherited from: [Value](json.value.md)

Defined in: [JSON.ts:111](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L111)

'''
'''--- docs/classes/json.float.md ---
[assemblyscript-json](../README.md) / [JSON](../modules/json.md) / Float

# Class: Float

[JSON](../modules/json.md).Float

## Hierarchy

* [*Num*](json.num.md)

  ↳ **Float**

## Table of contents

### Constructors

- [constructor](json.float.md#constructor)

### Properties

- [\_num](json.float.md#_num)

### Accessors

- [isArr](json.float.md#isarr)
- [isBool](json.float.md#isbool)
- [isFloat](json.float.md#isfloat)
- [isInteger](json.float.md#isinteger)
- [isNull](json.float.md#isnull)
- [isNum](json.float.md#isnum)
- [isObj](json.float.md#isobj)
- [isString](json.float.md#isstring)

### Methods

- [toString](json.float.md#tostring)
- [valueOf](json.float.md#valueof)
- [Array](json.float.md#array)
- [Bool](json.float.md#bool)
- [Float](json.float.md#float)
- [Integer](json.float.md#integer)
- [Null](json.float.md#null)
- [Number](json.float.md#number)
- [Object](json.float.md#object)
- [String](json.float.md#string)

## Constructors

### constructor

\+ **new Float**(`_num`: *number*): [*Float*](json.float.md)

#### Parameters:

Name | Type |
------ | ------ |
`_num` | *number* |

**Returns:** [*Float*](json.float.md)

Inherited from: [Num](json.num.md)

Defined in: [JSON.ts:212](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L212)

## Properties

### \_num

• **\_num**: *number*

Inherited from: [Num](json.num.md).[_num](json.num.md#_num)

## Accessors

### isArr

• **isArr**(): *boolean*

**Returns:** *boolean*

Defined in: [JSON.ts:178](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L178)

___

### isBool

• **isBool**(): *boolean*

**Returns:** *boolean*

Defined in: [JSON.ts:164](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L164)

___

### isFloat

• **isFloat**(): *boolean*

**Returns:** *boolean*

Defined in: [JSON.ts:150](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L150)

___

### isInteger

• **isInteger**(): *boolean*

**Returns:** *boolean*

Defined in: [JSON.ts:157](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L157)

___

### isNull

• **isNull**(): *boolean*

**Returns:** *boolean*

Defined in: [JSON.ts:171](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L171)

___

### isNum

• **isNum**(): *boolean*

**Returns:** *boolean*

Defined in: [JSON.ts:143](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L143)

___

### isObj

• **isObj**(): *boolean*

**Returns:** *boolean*

Defined in: [JSON.ts:185](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L185)

___

### isString

• **isString**(): *boolean*

**Returns:** *boolean*

Defined in: [JSON.ts:136](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L136)

## Methods

### toString

▸ **toString**(): *string*

**Returns:** *string*

Inherited from: [Num](json.num.md)

Defined in: [JSON.ts:217](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L217)

___

### valueOf

▸ **valueOf**(): *number*

**Returns:** *number*

Inherited from: [Num](json.num.md)

Defined in: [JSON.ts:221](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L221)

___

### Array

▸ `Static`**Array**(): [*Arr*](json.arr.md)

**Returns:** [*Arr*](json.arr.md)

Inherited from: [Num](json.num.md)

Defined in: [JSON.ts:129](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L129)

___

### Bool

▸ `Static`**Bool**(`b`: bool): [*Bool*](json.bool.md)

#### Parameters:

Name | Type |
------ | ------ |
`b` | bool |

**Returns:** [*Bool*](json.bool.md)

Inherited from: [Num](json.num.md)

Defined in: [JSON.ts:123](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L123)

___

### Float

▸ `Static`**Float**(`num`: *number*): [*Float*](json.float.md)

#### Parameters:

Name | Type |
------ | ------ |
`num` | *number* |

**Returns:** [*Float*](json.float.md)

Inherited from: [Num](json.num.md)

Defined in: [JSON.ts:117](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L117)

___

### Integer

▸ `Static`**Integer**(`num`: *number*): [*Integer*](json.integer.md)

#### Parameters:

Name | Type |
------ | ------ |
`num` | *number* |

**Returns:** [*Integer*](json.integer.md)

Inherited from: [Num](json.num.md)

Defined in: [JSON.ts:120](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L120)

___

### Null

▸ `Static`**Null**(): [*Null*](json.null.md)

**Returns:** [*Null*](json.null.md)

Inherited from: [Num](json.num.md)

Defined in: [JSON.ts:126](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L126)

___

### Number

▸ `Static`**Number**(`num`: *number*): [*Num*](json.num.md)

#### Parameters:

Name | Type |
------ | ------ |
`num` | *number* |

**Returns:** [*Num*](json.num.md)

Inherited from: [Num](json.num.md)

Defined in: [JSON.ts:114](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L114)

___

### Object

▸ `Static`**Object**(): [*Obj*](json.obj.md)

**Returns:** [*Obj*](json.obj.md)

Inherited from: [Num](json.num.md)

Defined in: [JSON.ts:132](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L132)

___

### String

▸ `Static`**String**(`str`: *string*): [*Str*](json.str.md)

#### Parameters:

Name | Type |
------ | ------ |
`str` | *string* |

**Returns:** [*Str*](json.str.md)

Inherited from: [Num](json.num.md)

Defined in: [JSON.ts:111](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L111)

'''
'''--- docs/classes/json.integer.md ---
[assemblyscript-json](../README.md) / [JSON](../modules/json.md) / Integer

# Class: Integer

[JSON](../modules/json.md).Integer

## Hierarchy

* [*Value*](json.value.md)

  ↳ **Integer**

## Table of contents

### Constructors

- [constructor](json.integer.md#constructor)

### Properties

- [\_num](json.integer.md#_num)

### Accessors

- [isArr](json.integer.md#isarr)
- [isBool](json.integer.md#isbool)
- [isFloat](json.integer.md#isfloat)
- [isInteger](json.integer.md#isinteger)
- [isNull](json.integer.md#isnull)
- [isNum](json.integer.md#isnum)
- [isObj](json.integer.md#isobj)
- [isString](json.integer.md#isstring)

### Methods

- [toString](json.integer.md#tostring)
- [valueOf](json.integer.md#valueof)
- [Array](json.integer.md#array)
- [Bool](json.integer.md#bool)
- [Float](json.integer.md#float)
- [Integer](json.integer.md#integer)
- [Null](json.integer.md#null)
- [Number](json.integer.md#number)
- [Object](json.integer.md#object)
- [String](json.integer.md#string)

## Constructors

### constructor

\+ **new Integer**(`_num`: *number*): [*Integer*](json.integer.md)

#### Parameters:

Name | Type |
------ | ------ |
`_num` | *number* |

**Returns:** [*Integer*](json.integer.md)

Inherited from: [Value](json.value.md)

Defined in: [JSON.ts:229](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L229)

## Properties

### \_num

• **\_num**: *number*

## Accessors

### isArr

• **isArr**(): *boolean*

**Returns:** *boolean*

Defined in: [JSON.ts:178](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L178)

___

### isBool

• **isBool**(): *boolean*

**Returns:** *boolean*

Defined in: [JSON.ts:164](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L164)

___

### isFloat

• **isFloat**(): *boolean*

**Returns:** *boolean*

Defined in: [JSON.ts:150](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L150)

___

### isInteger

• **isInteger**(): *boolean*

**Returns:** *boolean*

Defined in: [JSON.ts:157](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L157)

___

### isNull

• **isNull**(): *boolean*

**Returns:** *boolean*

Defined in: [JSON.ts:171](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L171)

___

### isNum

• **isNum**(): *boolean*

**Returns:** *boolean*

Defined in: [JSON.ts:143](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L143)

___

### isObj

• **isObj**(): *boolean*

**Returns:** *boolean*

Defined in: [JSON.ts:185](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L185)

___

### isString

• **isString**(): *boolean*

**Returns:** *boolean*

Defined in: [JSON.ts:136](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L136)

## Methods

### toString

▸ **toString**(): *string*

**Returns:** *string*

Overrides: [Value](json.value.md)

Defined in: [JSON.ts:234](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L234)

___

### valueOf

▸ **valueOf**(): *number*

**Returns:** *number*

Defined in: [JSON.ts:238](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L238)

___

### Array

▸ `Static`**Array**(): [*Arr*](json.arr.md)

**Returns:** [*Arr*](json.arr.md)

Inherited from: [Value](json.value.md)

Defined in: [JSON.ts:129](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L129)

___

### Bool

▸ `Static`**Bool**(`b`: bool): [*Bool*](json.bool.md)

#### Parameters:

Name | Type |
------ | ------ |
`b` | bool |

**Returns:** [*Bool*](json.bool.md)

Inherited from: [Value](json.value.md)

Defined in: [JSON.ts:123](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L123)

___

### Float

▸ `Static`**Float**(`num`: *number*): [*Float*](json.float.md)

#### Parameters:

Name | Type |
------ | ------ |
`num` | *number* |

**Returns:** [*Float*](json.float.md)

Inherited from: [Value](json.value.md)

Defined in: [JSON.ts:117](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L117)

___

### Integer

▸ `Static`**Integer**(`num`: *number*): [*Integer*](json.integer.md)

#### Parameters:

Name | Type |
------ | ------ |
`num` | *number* |

**Returns:** [*Integer*](json.integer.md)

Inherited from: [Value](json.value.md)

Defined in: [JSON.ts:120](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L120)

___

### Null

▸ `Static`**Null**(): [*Null*](json.null.md)

**Returns:** [*Null*](json.null.md)

Inherited from: [Value](json.value.md)

Defined in: [JSON.ts:126](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L126)

___

### Number

▸ `Static`**Number**(`num`: *number*): [*Num*](json.num.md)

#### Parameters:

Name | Type |
------ | ------ |
`num` | *number* |

**Returns:** [*Num*](json.num.md)

Inherited from: [Value](json.value.md)

Defined in: [JSON.ts:114](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L114)

___

### Object

▸ `Static`**Object**(): [*Obj*](json.obj.md)

**Returns:** [*Obj*](json.obj.md)

Inherited from: [Value](json.value.md)

Defined in: [JSON.ts:132](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L132)

___

### String

▸ `Static`**String**(`str`: *string*): [*Str*](json.str.md)

#### Parameters:

Name | Type |
------ | ------ |
`str` | *string* |

**Returns:** [*Str*](json.str.md)

Inherited from: [Value](json.value.md)

Defined in: [JSON.ts:111](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L111)

'''
'''--- docs/classes/json.null.md ---
[assemblyscript-json](../README.md) / [JSON](../modules/json.md) / Null

# Class: Null

[JSON](../modules/json.md).Null

## Hierarchy

* [*Value*](json.value.md)

  ↳ **Null**

## Table of contents

### Constructors

- [constructor](json.null.md#constructor)

### Accessors

- [isArr](json.null.md#isarr)
- [isBool](json.null.md#isbool)
- [isFloat](json.null.md#isfloat)
- [isInteger](json.null.md#isinteger)
- [isNull](json.null.md#isnull)
- [isNum](json.null.md#isnum)
- [isObj](json.null.md#isobj)
- [isString](json.null.md#isstring)

### Methods

- [toString](json.null.md#tostring)
- [valueOf](json.null.md#valueof)
- [Array](json.null.md#array)
- [Bool](json.null.md#bool)
- [Float](json.null.md#float)
- [Integer](json.null.md#integer)
- [Null](json.null.md#null)
- [Number](json.null.md#number)
- [Object](json.null.md#object)
- [String](json.null.md#string)

## Constructors

### constructor

\+ **new Null**(): [*Null*](json.null.md)

**Returns:** [*Null*](json.null.md)

Inherited from: [Value](json.value.md)

Defined in: [JSON.ts:243](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L243)

## Accessors

### isArr

• **isArr**(): *boolean*

**Returns:** *boolean*

Defined in: [JSON.ts:178](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L178)

___

### isBool

• **isBool**(): *boolean*

**Returns:** *boolean*

Defined in: [JSON.ts:164](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L164)

___

### isFloat

• **isFloat**(): *boolean*

**Returns:** *boolean*

Defined in: [JSON.ts:150](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L150)

___

### isInteger

• **isInteger**(): *boolean*

**Returns:** *boolean*

Defined in: [JSON.ts:157](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L157)

___

### isNull

• **isNull**(): *boolean*

**Returns:** *boolean*

Defined in: [JSON.ts:171](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L171)

___

### isNum

• **isNum**(): *boolean*

**Returns:** *boolean*

Defined in: [JSON.ts:143](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L143)

___

### isObj

• **isObj**(): *boolean*

**Returns:** *boolean*

Defined in: [JSON.ts:185](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L185)

___

### isString

• **isString**(): *boolean*

**Returns:** *boolean*

Defined in: [JSON.ts:136](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L136)

## Methods

### toString

▸ **toString**(): *string*

**Returns:** *string*

Overrides: [Value](json.value.md)

Defined in: [JSON.ts:248](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L248)

___

### valueOf

▸ **valueOf**(): *null*

**Returns:** *null*

Defined in: [JSON.ts:252](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L252)

___

### Array

▸ `Static`**Array**(): [*Arr*](json.arr.md)

**Returns:** [*Arr*](json.arr.md)

Inherited from: [Value](json.value.md)

Defined in: [JSON.ts:129](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L129)

___

### Bool

▸ `Static`**Bool**(`b`: bool): [*Bool*](json.bool.md)

#### Parameters:

Name | Type |
------ | ------ |
`b` | bool |

**Returns:** [*Bool*](json.bool.md)

Inherited from: [Value](json.value.md)

Defined in: [JSON.ts:123](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L123)

___

### Float

▸ `Static`**Float**(`num`: *number*): [*Float*](json.float.md)

#### Parameters:

Name | Type |
------ | ------ |
`num` | *number* |

**Returns:** [*Float*](json.float.md)

Inherited from: [Value](json.value.md)

Defined in: [JSON.ts:117](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L117)

___

### Integer

▸ `Static`**Integer**(`num`: *number*): [*Integer*](json.integer.md)

#### Parameters:

Name | Type |
------ | ------ |
`num` | *number* |

**Returns:** [*Integer*](json.integer.md)

Inherited from: [Value](json.value.md)

Defined in: [JSON.ts:120](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L120)

___

### Null

▸ `Static`**Null**(): [*Null*](json.null.md)

**Returns:** [*Null*](json.null.md)

Inherited from: [Value](json.value.md)

Defined in: [JSON.ts:126](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L126)

___

### Number

▸ `Static`**Number**(`num`: *number*): [*Num*](json.num.md)

#### Parameters:

Name | Type |
------ | ------ |
`num` | *number* |

**Returns:** [*Num*](json.num.md)

Inherited from: [Value](json.value.md)

Defined in: [JSON.ts:114](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L114)

___

### Object

▸ `Static`**Object**(): [*Obj*](json.obj.md)

**Returns:** [*Obj*](json.obj.md)

Inherited from: [Value](json.value.md)

Defined in: [JSON.ts:132](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L132)

___

### String

▸ `Static`**String**(`str`: *string*): [*Str*](json.str.md)

#### Parameters:

Name | Type |
------ | ------ |
`str` | *string* |

**Returns:** [*Str*](json.str.md)

Inherited from: [Value](json.value.md)

Defined in: [JSON.ts:111](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L111)

'''
'''--- docs/classes/json.num.md ---
[assemblyscript-json](../README.md) / [JSON](../modules/json.md) / Num

# Class: Num

[JSON](../modules/json.md).Num

## Hierarchy

* [*Value*](json.value.md)

  ↳ **Num**

  ↳↳ [*Float*](json.float.md)

## Table of contents

### Constructors

- [constructor](json.num.md#constructor)

### Properties

- [\_num](json.num.md#_num)

### Accessors

- [isArr](json.num.md#isarr)
- [isBool](json.num.md#isbool)
- [isFloat](json.num.md#isfloat)
- [isInteger](json.num.md#isinteger)
- [isNull](json.num.md#isnull)
- [isNum](json.num.md#isnum)
- [isObj](json.num.md#isobj)
- [isString](json.num.md#isstring)

### Methods

- [toString](json.num.md#tostring)
- [valueOf](json.num.md#valueof)
- [Array](json.num.md#array)
- [Bool](json.num.md#bool)
- [Float](json.num.md#float)
- [Integer](json.num.md#integer)
- [Null](json.num.md#null)
- [Number](json.num.md#number)
- [Object](json.num.md#object)
- [String](json.num.md#string)

## Constructors

### constructor

\+ **new Num**(`_num`: *number*): [*Num*](json.num.md)

#### Parameters:

Name | Type |
------ | ------ |
`_num` | *number* |

**Returns:** [*Num*](json.num.md)

Inherited from: [Value](json.value.md)

Defined in: [JSON.ts:212](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L212)

## Properties

### \_num

• **\_num**: *number*

## Accessors

### isArr

• **isArr**(): *boolean*

**Returns:** *boolean*

Defined in: [JSON.ts:178](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L178)

___

### isBool

• **isBool**(): *boolean*

**Returns:** *boolean*

Defined in: [JSON.ts:164](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L164)

___

### isFloat

• **isFloat**(): *boolean*

**Returns:** *boolean*

Defined in: [JSON.ts:150](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L150)

___

### isInteger

• **isInteger**(): *boolean*

**Returns:** *boolean*

Defined in: [JSON.ts:157](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L157)

___

### isNull

• **isNull**(): *boolean*

**Returns:** *boolean*

Defined in: [JSON.ts:171](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L171)

___

### isNum

• **isNum**(): *boolean*

**Returns:** *boolean*

Defined in: [JSON.ts:143](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L143)

___

### isObj

• **isObj**(): *boolean*

**Returns:** *boolean*

Defined in: [JSON.ts:185](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L185)

___

### isString

• **isString**(): *boolean*

**Returns:** *boolean*

Defined in: [JSON.ts:136](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L136)

## Methods

### toString

▸ **toString**(): *string*

**Returns:** *string*

Overrides: [Value](json.value.md)

Defined in: [JSON.ts:217](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L217)

___

### valueOf

▸ **valueOf**(): *number*

**Returns:** *number*

Defined in: [JSON.ts:221](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L221)

___

### Array

▸ `Static`**Array**(): [*Arr*](json.arr.md)

**Returns:** [*Arr*](json.arr.md)

Inherited from: [Value](json.value.md)

Defined in: [JSON.ts:129](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L129)

___

### Bool

▸ `Static`**Bool**(`b`: bool): [*Bool*](json.bool.md)

#### Parameters:

Name | Type |
------ | ------ |
`b` | bool |

**Returns:** [*Bool*](json.bool.md)

Inherited from: [Value](json.value.md)

Defined in: [JSON.ts:123](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L123)

___

### Float

▸ `Static`**Float**(`num`: *number*): [*Float*](json.float.md)

#### Parameters:

Name | Type |
------ | ------ |
`num` | *number* |

**Returns:** [*Float*](json.float.md)

Inherited from: [Value](json.value.md)

Defined in: [JSON.ts:117](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L117)

___

### Integer

▸ `Static`**Integer**(`num`: *number*): [*Integer*](json.integer.md)

#### Parameters:

Name | Type |
------ | ------ |
`num` | *number* |

**Returns:** [*Integer*](json.integer.md)

Inherited from: [Value](json.value.md)

Defined in: [JSON.ts:120](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L120)

___

### Null

▸ `Static`**Null**(): [*Null*](json.null.md)

**Returns:** [*Null*](json.null.md)

Inherited from: [Value](json.value.md)

Defined in: [JSON.ts:126](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L126)

___

### Number

▸ `Static`**Number**(`num`: *number*): [*Num*](json.num.md)

#### Parameters:

Name | Type |
------ | ------ |
`num` | *number* |

**Returns:** [*Num*](json.num.md)

Inherited from: [Value](json.value.md)

Defined in: [JSON.ts:114](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L114)

___

### Object

▸ `Static`**Object**(): [*Obj*](json.obj.md)

**Returns:** [*Obj*](json.obj.md)

Inherited from: [Value](json.value.md)

Defined in: [JSON.ts:132](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L132)

___

### String

▸ `Static`**String**(`str`: *string*): [*Str*](json.str.md)

#### Parameters:

Name | Type |
------ | ------ |
`str` | *string* |

**Returns:** [*Str*](json.str.md)

Inherited from: [Value](json.value.md)

Defined in: [JSON.ts:111](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L111)

'''
'''--- docs/classes/json.obj.md ---
[assemblyscript-json](../README.md) / [JSON](../modules/json.md) / Obj

# Class: Obj

[JSON](../modules/json.md).Obj

## Hierarchy

* [*Value*](json.value.md)

  ↳ **Obj**

## Table of contents

### Constructors

- [constructor](json.obj.md#constructor)

### Properties

- [\_obj](json.obj.md#_obj)
- [keys](json.obj.md#keys)

### Accessors

- [isArr](json.obj.md#isarr)
- [isBool](json.obj.md#isbool)
- [isFloat](json.obj.md#isfloat)
- [isInteger](json.obj.md#isinteger)
- [isNull](json.obj.md#isnull)
- [isNum](json.obj.md#isnum)
- [isObj](json.obj.md#isobj)
- [isString](json.obj.md#isstring)

### Methods

- [\_set](json.obj.md#_set)
- [get](json.obj.md#get)
- [getArr](json.obj.md#getarr)
- [getBool](json.obj.md#getbool)
- [getFloat](json.obj.md#getfloat)
- [getInteger](json.obj.md#getinteger)
- [getNum](json.obj.md#getnum)
- [getString](json.obj.md#getstring)
- [getValue](json.obj.md#getvalue)
- [has](json.obj.md#has)
- [set](json.obj.md#set)
- [toString](json.obj.md#tostring)
- [valueOf](json.obj.md#valueof)
- [Array](json.obj.md#array)
- [Bool](json.obj.md#bool)
- [Float](json.obj.md#float)
- [Integer](json.obj.md#integer)
- [Null](json.obj.md#null)
- [Number](json.obj.md#number)
- [Object](json.obj.md#object)
- [String](json.obj.md#string)

## Constructors

### constructor

\+ **new Obj**(): [*Obj*](json.obj.md)

**Returns:** [*Obj*](json.obj.md)

Inherited from: [Value](json.value.md)

Defined in: [JSON.ts:301](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L301)

## Properties

### \_obj

• **\_obj**: *Map*<*string*, [*Value*](json.value.md)\>

Defined in: [JSON.ts:300](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L300)

___

### keys

• **keys**: *string*[]

Defined in: [JSON.ts:301](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L301)

## Accessors

### isArr

• **isArr**(): *boolean*

**Returns:** *boolean*

Defined in: [JSON.ts:178](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L178)

___

### isBool

• **isBool**(): *boolean*

**Returns:** *boolean*

Defined in: [JSON.ts:164](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L164)

___

### isFloat

• **isFloat**(): *boolean*

**Returns:** *boolean*

Defined in: [JSON.ts:150](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L150)

___

### isInteger

• **isInteger**(): *boolean*

**Returns:** *boolean*

Defined in: [JSON.ts:157](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L157)

___

### isNull

• **isNull**(): *boolean*

**Returns:** *boolean*

Defined in: [JSON.ts:171](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L171)

___

### isNum

• **isNum**(): *boolean*

**Returns:** *boolean*

Defined in: [JSON.ts:143](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L143)

___

### isObj

• **isObj**(): *boolean*

**Returns:** *boolean*

Defined in: [JSON.ts:185](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L185)

___

### isString

• **isString**(): *boolean*

**Returns:** *boolean*

Defined in: [JSON.ts:136](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L136)

## Methods

### \_set

▸ `Private`**_set**(`key`: *string*, `value`: [*Value*](json.value.md)): *void*

#### Parameters:

Name | Type |
------ | ------ |
`key` | *string* |
`value` | [*Value*](json.value.md) |

**Returns:** *void*

Defined in: [JSON.ts:333](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L333)

___

### get

▸ **get**(`key`: *string*): *null* \| [*Value*](json.value.md)

#### Parameters:

Name | Type |
------ | ------ |
`key` | *string* |

**Returns:** *null* \| [*Value*](json.value.md)

Defined in: [JSON.ts:344](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L344)

___

### getArr

▸ **getArr**(`key`: *string*): *null* \| [*Arr*](json.arr.md)

#### Parameters:

Name | Type |
------ | ------ |
`key` | *string* |

**Returns:** *null* \| [*Arr*](json.arr.md)

Defined in: [JSON.ts:395](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L395)

___

### getBool

▸ **getBool**(`key`: *string*): *null* \| [*Bool*](json.bool.md)

#### Parameters:

Name | Type |
------ | ------ |
`key` | *string* |

**Returns:** *null* \| [*Bool*](json.bool.md)

Defined in: [JSON.ts:387](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L387)

___

### getFloat

▸ **getFloat**(`key`: *string*): *null* \| [*Float*](json.float.md)

#### Parameters:

Name | Type |
------ | ------ |
`key` | *string* |

**Returns:** *null* \| [*Float*](json.float.md)

Defined in: [JSON.ts:371](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L371)

___

### getInteger

▸ **getInteger**(`key`: *string*): *null* \| [*Integer*](json.integer.md)

#### Parameters:

Name | Type |
------ | ------ |
`key` | *string* |

**Returns:** *null* \| [*Integer*](json.integer.md)

Defined in: [JSON.ts:379](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L379)

___

### getNum

▸ **getNum**(`key`: *string*): *null* \| [*Num*](json.num.md)

#### Parameters:

Name | Type |
------ | ------ |
`key` | *string* |

**Returns:** *null* \| [*Num*](json.num.md)

Defined in: [JSON.ts:363](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L363)

___

### getString

▸ **getString**(`key`: *string*): *null* \| [*Str*](json.str.md)

#### Parameters:

Name | Type |
------ | ------ |
`key` | *string* |

**Returns:** *null* \| [*Str*](json.str.md)

Defined in: [JSON.ts:355](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L355)

___

### getValue

▸ **getValue**(`key`: *string*): *null* \| [*Value*](json.value.md)

#### Parameters:

Name | Type |
------ | ------ |
`key` | *string* |

**Returns:** *null* \| [*Value*](json.value.md)

Defined in: [JSON.ts:351](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L351)

___

### has

▸ **has**(`key`: *string*): bool

#### Parameters:

Name | Type |
------ | ------ |
`key` | *string* |

**Returns:** bool

Defined in: [JSON.ts:340](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L340)

___

### set

▸ **set**<T\>(`key`: *string*, `value`: T): *void*

#### Type parameters:

Name |
------ |
`T` |

#### Parameters:

Name | Type |
------ | ------ |
`key` | *string* |
`value` | T |

**Returns:** *void*

Defined in: [JSON.ts:324](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L324)

___

### toString

▸ **toString**(): *string*

**Returns:** *string*

Overrides: [Value](json.value.md)

Defined in: [JSON.ts:309](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L309)

___

### valueOf

▸ **valueOf**(): *Map*<*string*, [*Value*](json.value.md)\>

**Returns:** *Map*<*string*, [*Value*](json.value.md)\>

Defined in: [JSON.ts:319](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L319)

___

### Array

▸ `Static`**Array**(): [*Arr*](json.arr.md)

**Returns:** [*Arr*](json.arr.md)

Inherited from: [Value](json.value.md)

Defined in: [JSON.ts:129](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L129)

___

### Bool

▸ `Static`**Bool**(`b`: bool): [*Bool*](json.bool.md)

#### Parameters:

Name | Type |
------ | ------ |
`b` | bool |

**Returns:** [*Bool*](json.bool.md)

Inherited from: [Value](json.value.md)

Defined in: [JSON.ts:123](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L123)

___

### Float

▸ `Static`**Float**(`num`: *number*): [*Float*](json.float.md)

#### Parameters:

Name | Type |
------ | ------ |
`num` | *number* |

**Returns:** [*Float*](json.float.md)

Inherited from: [Value](json.value.md)

Defined in: [JSON.ts:117](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L117)

___

### Integer

▸ `Static`**Integer**(`num`: *number*): [*Integer*](json.integer.md)

#### Parameters:

Name | Type |
------ | ------ |
`num` | *number* |

**Returns:** [*Integer*](json.integer.md)

Inherited from: [Value](json.value.md)

Defined in: [JSON.ts:120](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L120)

___

### Null

▸ `Static`**Null**(): [*Null*](json.null.md)

**Returns:** [*Null*](json.null.md)

Inherited from: [Value](json.value.md)

Defined in: [JSON.ts:126](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L126)

___

### Number

▸ `Static`**Number**(`num`: *number*): [*Num*](json.num.md)

#### Parameters:

Name | Type |
------ | ------ |
`num` | *number* |

**Returns:** [*Num*](json.num.md)

Inherited from: [Value](json.value.md)

Defined in: [JSON.ts:114](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L114)

___

### Object

▸ `Static`**Object**(): [*Obj*](json.obj.md)

**Returns:** [*Obj*](json.obj.md)

Inherited from: [Value](json.value.md)

Defined in: [JSON.ts:132](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L132)

___

### String

▸ `Static`**String**(`str`: *string*): [*Str*](json.str.md)

#### Parameters:

Name | Type |
------ | ------ |
`str` | *string* |

**Returns:** [*Str*](json.str.md)

Inherited from: [Value](json.value.md)

Defined in: [JSON.ts:111](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L111)

'''
'''--- docs/classes/json.str.md ---
[assemblyscript-json](../README.md) / [JSON](../modules/json.md) / Str

# Class: Str

[JSON](../modules/json.md).Str

## Hierarchy

* [*Value*](json.value.md)

  ↳ **Str**

## Table of contents

### Constructors

- [constructor](json.str.md#constructor)

### Properties

- [\_str](json.str.md#_str)

### Accessors

- [isArr](json.str.md#isarr)
- [isBool](json.str.md#isbool)
- [isFloat](json.str.md#isfloat)
- [isInteger](json.str.md#isinteger)
- [isNull](json.str.md#isnull)
- [isNum](json.str.md#isnum)
- [isObj](json.str.md#isobj)
- [isString](json.str.md#isstring)

### Methods

- [toString](json.str.md#tostring)
- [valueOf](json.str.md#valueof)
- [Array](json.str.md#array)
- [Bool](json.str.md#bool)
- [Float](json.str.md#float)
- [Integer](json.str.md#integer)
- [Null](json.str.md#null)
- [Number](json.str.md#number)
- [Object](json.str.md#object)
- [String](json.str.md#string)

## Constructors

### constructor

\+ **new Str**(`_str`: *string*): [*Str*](json.str.md)

#### Parameters:

Name | Type |
------ | ------ |
`_str` | *string* |

**Returns:** [*Str*](json.str.md)

Inherited from: [Value](json.value.md)

Defined in: [JSON.ts:198](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L198)

## Properties

### \_str

• **\_str**: *string*

## Accessors

### isArr

• **isArr**(): *boolean*

**Returns:** *boolean*

Defined in: [JSON.ts:178](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L178)

___

### isBool

• **isBool**(): *boolean*

**Returns:** *boolean*

Defined in: [JSON.ts:164](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L164)

___

### isFloat

• **isFloat**(): *boolean*

**Returns:** *boolean*

Defined in: [JSON.ts:150](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L150)

___

### isInteger

• **isInteger**(): *boolean*

**Returns:** *boolean*

Defined in: [JSON.ts:157](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L157)

___

### isNull

• **isNull**(): *boolean*

**Returns:** *boolean*

Defined in: [JSON.ts:171](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L171)

___

### isNum

• **isNum**(): *boolean*

**Returns:** *boolean*

Defined in: [JSON.ts:143](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L143)

___

### isObj

• **isObj**(): *boolean*

**Returns:** *boolean*

Defined in: [JSON.ts:185](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L185)

___

### isString

• **isString**(): *boolean*

**Returns:** *boolean*

Defined in: [JSON.ts:136](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L136)

## Methods

### toString

▸ **toString**(): *string*

**Returns:** *string*

Overrides: [Value](json.value.md)

Defined in: [JSON.ts:203](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L203)

___

### valueOf

▸ **valueOf**(): *string*

**Returns:** *string*

Defined in: [JSON.ts:207](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L207)

___

### Array

▸ `Static`**Array**(): [*Arr*](json.arr.md)

**Returns:** [*Arr*](json.arr.md)

Inherited from: [Value](json.value.md)

Defined in: [JSON.ts:129](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L129)

___

### Bool

▸ `Static`**Bool**(`b`: bool): [*Bool*](json.bool.md)

#### Parameters:

Name | Type |
------ | ------ |
`b` | bool |

**Returns:** [*Bool*](json.bool.md)

Inherited from: [Value](json.value.md)

Defined in: [JSON.ts:123](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L123)

___

### Float

▸ `Static`**Float**(`num`: *number*): [*Float*](json.float.md)

#### Parameters:

Name | Type |
------ | ------ |
`num` | *number* |

**Returns:** [*Float*](json.float.md)

Inherited from: [Value](json.value.md)

Defined in: [JSON.ts:117](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L117)

___

### Integer

▸ `Static`**Integer**(`num`: *number*): [*Integer*](json.integer.md)

#### Parameters:

Name | Type |
------ | ------ |
`num` | *number* |

**Returns:** [*Integer*](json.integer.md)

Inherited from: [Value](json.value.md)

Defined in: [JSON.ts:120](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L120)

___

### Null

▸ `Static`**Null**(): [*Null*](json.null.md)

**Returns:** [*Null*](json.null.md)

Inherited from: [Value](json.value.md)

Defined in: [JSON.ts:126](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L126)

___

### Number

▸ `Static`**Number**(`num`: *number*): [*Num*](json.num.md)

#### Parameters:

Name | Type |
------ | ------ |
`num` | *number* |

**Returns:** [*Num*](json.num.md)

Inherited from: [Value](json.value.md)

Defined in: [JSON.ts:114](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L114)

___

### Object

▸ `Static`**Object**(): [*Obj*](json.obj.md)

**Returns:** [*Obj*](json.obj.md)

Inherited from: [Value](json.value.md)

Defined in: [JSON.ts:132](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L132)

___

### String

▸ `Static`**String**(`str`: *string*): [*Str*](json.str.md)

#### Parameters:

Name | Type |
------ | ------ |
`str` | *string* |

**Returns:** [*Str*](json.str.md)

Inherited from: [Value](json.value.md)

Defined in: [JSON.ts:111](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L111)

'''
'''--- docs/classes/json.value.md ---
[assemblyscript-json](../README.md) / [JSON](../modules/json.md) / Value

# Class: Value

[JSON](../modules/json.md).Value

## Hierarchy

* **Value**

  ↳ [*Str*](json.str.md)

  ↳ [*Num*](json.num.md)

  ↳ [*Integer*](json.integer.md)

  ↳ [*Null*](json.null.md)

  ↳ [*Bool*](json.bool.md)

  ↳ [*Arr*](json.arr.md)

  ↳ [*Obj*](json.obj.md)

## Table of contents

### Constructors

- [constructor](json.value.md#constructor)

### Accessors

- [isArr](json.value.md#isarr)
- [isBool](json.value.md#isbool)
- [isFloat](json.value.md#isfloat)
- [isInteger](json.value.md#isinteger)
- [isNull](json.value.md#isnull)
- [isNum](json.value.md#isnum)
- [isObj](json.value.md#isobj)
- [isString](json.value.md#isstring)

### Methods

- [toString](json.value.md#tostring)
- [Array](json.value.md#array)
- [Bool](json.value.md#bool)
- [Float](json.value.md#float)
- [Integer](json.value.md#integer)
- [Null](json.value.md#null)
- [Number](json.value.md#number)
- [Object](json.value.md#object)
- [String](json.value.md#string)

## Constructors

### constructor

\+ **new Value**(): [*Value*](json.value.md)

**Returns:** [*Value*](json.value.md)

## Accessors

### isArr

• **isArr**(): *boolean*

**Returns:** *boolean*

Defined in: [JSON.ts:178](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L178)

___

### isBool

• **isBool**(): *boolean*

**Returns:** *boolean*

Defined in: [JSON.ts:164](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L164)

___

### isFloat

• **isFloat**(): *boolean*

**Returns:** *boolean*

Defined in: [JSON.ts:150](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L150)

___

### isInteger

• **isInteger**(): *boolean*

**Returns:** *boolean*

Defined in: [JSON.ts:157](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L157)

___

### isNull

• **isNull**(): *boolean*

**Returns:** *boolean*

Defined in: [JSON.ts:171](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L171)

___

### isNum

• **isNum**(): *boolean*

**Returns:** *boolean*

Defined in: [JSON.ts:143](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L143)

___

### isObj

• **isObj**(): *boolean*

**Returns:** *boolean*

Defined in: [JSON.ts:185](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L185)

___

### isString

• **isString**(): *boolean*

**Returns:** *boolean*

Defined in: [JSON.ts:136](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L136)

## Methods

### toString

▸ **toString**(): *string*

**Returns:** *string*

Defined in: [JSON.ts:192](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L192)

___

### Array

▸ `Static`**Array**(): [*Arr*](json.arr.md)

**Returns:** [*Arr*](json.arr.md)

Defined in: [JSON.ts:129](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L129)

___

### Bool

▸ `Static`**Bool**(`b`: bool): [*Bool*](json.bool.md)

#### Parameters:

Name | Type |
------ | ------ |
`b` | bool |

**Returns:** [*Bool*](json.bool.md)

Defined in: [JSON.ts:123](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L123)

___

### Float

▸ `Static`**Float**(`num`: *number*): [*Float*](json.float.md)

#### Parameters:

Name | Type |
------ | ------ |
`num` | *number* |

**Returns:** [*Float*](json.float.md)

Defined in: [JSON.ts:117](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L117)

___

### Integer

▸ `Static`**Integer**(`num`: *number*): [*Integer*](json.integer.md)

#### Parameters:

Name | Type |
------ | ------ |
`num` | *number* |

**Returns:** [*Integer*](json.integer.md)

Defined in: [JSON.ts:120](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L120)

___

### Null

▸ `Static`**Null**(): [*Null*](json.null.md)

**Returns:** [*Null*](json.null.md)

Defined in: [JSON.ts:126](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L126)

___

### Number

▸ `Static`**Number**(`num`: *number*): [*Num*](json.num.md)

#### Parameters:

Name | Type |
------ | ------ |
`num` | *number* |

**Returns:** [*Num*](json.num.md)

Defined in: [JSON.ts:114](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L114)

___

### Object

▸ `Static`**Object**(): [*Obj*](json.obj.md)

**Returns:** [*Obj*](json.obj.md)

Defined in: [JSON.ts:132](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L132)

___

### String

▸ `Static`**String**(`str`: *string*): [*Str*](json.str.md)

#### Parameters:

Name | Type |
------ | ------ |
`str` | *string* |

**Returns:** [*Str*](json.str.md)

Defined in: [JSON.ts:111](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L111)

'''
'''--- docs/classes/jsondecoder.md ---
[assemblyscript-json](../README.md) / JSONDecoder

# Class: JSONDecoder<JSONHandlerT\>

## Type parameters

Name | Type |
------ | ------ |
`JSONHandlerT` | [*JSONHandler*](jsonhandler.md) |

## Hierarchy

* **JSONDecoder**

## Table of contents

### Constructors

- [constructor](jsondecoder.md#constructor)

### Properties

- [\_state](jsondecoder.md#_state)
- [handler](jsondecoder.md#handler)

### Accessors

- [state](jsondecoder.md#state)

### Methods

- [deserialize](jsondecoder.md#deserialize)
- [isWhitespace](jsondecoder.md#iswhitespace)
- [parseArray](jsondecoder.md#parsearray)
- [parseBoolean](jsondecoder.md#parseboolean)
- [parseKey](jsondecoder.md#parsekey)
- [parseNull](jsondecoder.md#parsenull)
- [parseNumber](jsondecoder.md#parsenumber)
- [parseObject](jsondecoder.md#parseobject)
- [parseString](jsondecoder.md#parsestring)
- [parseValue](jsondecoder.md#parsevalue)
- [peekChar](jsondecoder.md#peekchar)
- [readAndAssert](jsondecoder.md#readandassert)
- [readChar](jsondecoder.md#readchar)
- [readEscapedChar](jsondecoder.md#readescapedchar)
- [readHexDigit](jsondecoder.md#readhexdigit)
- [readString](jsondecoder.md#readstring)
- [skipWhitespace](jsondecoder.md#skipwhitespace)

## Constructors

### constructor

\+ **new JSONDecoder**<JSONHandlerT\>(`handler`: JSONHandlerT): [*JSONDecoder*](jsondecoder.md)<JSONHandlerT\>

#### Type parameters:

Name | Type |
------ | ------ |
`JSONHandlerT` | [*JSONHandler*](jsonhandler.md)<JSONHandlerT\> |

#### Parameters:

Name | Type |
------ | ------ |
`handler` | JSONHandlerT |

**Returns:** [*JSONDecoder*](jsondecoder.md)<JSONHandlerT\>

Defined in: [decoder.ts:120](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/decoder.ts#L120)

## Properties

### \_state

• **\_state**: *null* \| [*DecoderState*](decoderstate.md)= null

Defined in: [decoder.ts:120](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/decoder.ts#L120)

___

### handler

• **handler**: JSONHandlerT

Defined in: [decoder.ts:119](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/decoder.ts#L119)

## Accessors

### state

• **state**(): [*DecoderState*](decoderstate.md)

**Returns:** [*DecoderState*](decoderstate.md)

Defined in: [decoder.ts:126](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/decoder.ts#L126)

• **state**(`state`: [*DecoderState*](decoderstate.md)): *void*

#### Parameters:

Name | Type |
------ | ------ |
`state` | [*DecoderState*](decoderstate.md) |

**Returns:** *void*

Defined in: [decoder.ts:130](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/decoder.ts#L130)

## Methods

### deserialize

▸ **deserialize**(`buffer`: *Uint8Array*, `decoderState?`: *null* \| [*DecoderState*](decoderstate.md)): *void*

#### Parameters:

Name | Type | Default value |
------ | ------ | ------ |
`buffer` | *Uint8Array* | - |
`decoderState` | *null* \| [*DecoderState*](decoderstate.md) | null |

**Returns:** *void*

Defined in: [decoder.ts:134](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/decoder.ts#L134)

___

### isWhitespace

▸ `Private`**isWhitespace**(`charCode`: *number*): bool

#### Parameters:

Name | Type |
------ | ------ |
`charCode` | *number* |

**Returns:** bool

Defined in: [decoder.ts:406](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/decoder.ts#L406)

___

### parseArray

▸ `Private`**parseArray**(): bool

**Returns:** bool

Defined in: [decoder.ts:210](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/decoder.ts#L210)

___

### parseBoolean

▸ `Private`**parseBoolean**(): bool

**Returns:** bool

Defined in: [decoder.ts:370](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/decoder.ts#L370)

___

### parseKey

▸ `Private`**parseKey**(): *void*

**Returns:** *void*

Defined in: [decoder.ts:203](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/decoder.ts#L203)

___

### parseNull

▸ `Private`**parseNull**(): bool

**Returns:** bool

Defined in: [decoder.ts:385](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/decoder.ts#L385)

___

### parseNumber

▸ `Private`**parseNumber**(): bool

**Returns:** bool

Defined in: [decoder.ts:323](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/decoder.ts#L323)

___

### parseObject

▸ `Private`**parseObject**(): bool

**Returns:** bool

Defined in: [decoder.ts:176](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/decoder.ts#L176)

___

### parseString

▸ `Private`**parseString**(): bool

**Returns:** bool

Defined in: [decoder.ts:236](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/decoder.ts#L236)

___

### parseValue

▸ `Private`**parseValue**(): bool

**Returns:** bool

Defined in: [decoder.ts:163](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/decoder.ts#L163)

___

### peekChar

▸ `Private`**peekChar**(): *number*

**Returns:** *number*

Defined in: [decoder.ts:148](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/decoder.ts#L148)

___

### readAndAssert

▸ `Private`**readAndAssert**(`str`: *string*): *void*

#### Parameters:

Name | Type |
------ | ------ |
`str` | *string* |

**Returns:** *void*

Defined in: [decoder.ts:394](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/decoder.ts#L394)

___

### readChar

▸ `Private`**readChar**(): *number*

**Returns:** *number*

Defined in: [decoder.ts:155](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/decoder.ts#L155)

___

### readEscapedChar

▸ `Private`**readEscapedChar**(): *string*

**Returns:** *string*

Defined in: [decoder.ts:274](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/decoder.ts#L274)

___

### readHexDigit

▸ `Private`**readHexDigit**(): *number*

**Returns:** *number*

Defined in: [decoder.ts:310](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/decoder.ts#L310)

___

### readString

▸ `Private`**readString**(): *string*

**Returns:** *string*

Defined in: [decoder.ts:244](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/decoder.ts#L244)

___

### skipWhitespace

▸ `Private`**skipWhitespace**(): *void*

**Returns:** *void*

Defined in: [decoder.ts:400](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/decoder.ts#L400)

'''
'''--- docs/classes/jsonencoder.md ---
[assemblyscript-json](../README.md) / JSONEncoder

# Class: JSONEncoder

## Hierarchy

* **JSONEncoder**

## Table of contents

### Constructors

- [constructor](jsonencoder.md#constructor)

### Properties

- [\_isFirstKey](jsonencoder.md#_isfirstkey)
- [result](jsonencoder.md#result)

### Accessors

- [isFirstKey](jsonencoder.md#isfirstkey)

### Methods

- [popArray](jsonencoder.md#poparray)
- [popObject](jsonencoder.md#popobject)
- [pushArray](jsonencoder.md#pusharray)
- [pushObject](jsonencoder.md#pushobject)
- [serialize](jsonencoder.md#serialize)
- [setBoolean](jsonencoder.md#setboolean)
- [setFloat](jsonencoder.md#setfloat)
- [setInteger](jsonencoder.md#setinteger)
- [setNull](jsonencoder.md#setnull)
- [setString](jsonencoder.md#setstring)
- [toString](jsonencoder.md#tostring)
- [write](jsonencoder.md#write)
- [writeBoolean](jsonencoder.md#writeboolean)
- [writeFloat](jsonencoder.md#writefloat)
- [writeInteger](jsonencoder.md#writeinteger)
- [writeKey](jsonencoder.md#writekey)
- [writeString](jsonencoder.md#writestring)

## Constructors

### constructor

\+ **new JSONEncoder**(): [*JSONEncoder*](jsonencoder.md)

**Returns:** [*JSONEncoder*](jsonencoder.md)

Defined in: [encoder.ts:5](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/encoder.ts#L5)

## Properties

### \_isFirstKey

• `Private` **\_isFirstKey**: *number*[]

Defined in: [encoder.ts:4](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/encoder.ts#L4)

___

### result

• `Private` **result**: *string*[]

Defined in: [encoder.ts:5](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/encoder.ts#L5)

## Accessors

### isFirstKey

• **isFirstKey**(): bool

**Returns:** bool

Defined in: [encoder.ts:13](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/encoder.ts#L13)

## Methods

### popArray

▸ **popArray**(): *void*

**Returns:** *void*

Defined in: [encoder.ts:58](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/encoder.ts#L58)

___

### popObject

▸ **popObject**(): *void*

**Returns:** *void*

Defined in: [encoder.ts:70](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/encoder.ts#L70)

___

### pushArray

▸ **pushArray**(`name`: *null* \| *string*): bool

#### Parameters:

Name | Type |
------ | ------ |
`name` | *null* \| *string* |

**Returns:** bool

Defined in: [encoder.ts:51](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/encoder.ts#L51)

___

### pushObject

▸ **pushObject**(`name`: *null* \| *string*): bool

#### Parameters:

Name | Type |
------ | ------ |
`name` | *null* \| *string* |

**Returns:** bool

Defined in: [encoder.ts:63](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/encoder.ts#L63)

___

### serialize

▸ **serialize**(): *Uint8Array*

**Returns:** *Uint8Array*

Defined in: [encoder.ts:17](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/encoder.ts#L17)

___

### setBoolean

▸ **setBoolean**(`name`: *null* \| *string*, `value`: bool): *void*

#### Parameters:

Name | Type |
------ | ------ |
`name` | *null* \| *string* |
`value` | bool |

**Returns:** *void*

Defined in: [encoder.ts:31](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/encoder.ts#L31)

___

### setFloat

▸ **setFloat**(`name`: *null* \| *string*, `value`: *number*): *void*

#### Parameters:

Name | Type |
------ | ------ |
`name` | *null* \| *string* |
`value` | *number* |

**Returns:** *void*

Defined in: [encoder.ts:46](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/encoder.ts#L46)

___

### setInteger

▸ **setInteger**(`name`: *null* \| *string*, `value`: *number*): *void*

#### Parameters:

Name | Type |
------ | ------ |
`name` | *null* \| *string* |
`value` | *number* |

**Returns:** *void*

Defined in: [encoder.ts:41](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/encoder.ts#L41)

___

### setNull

▸ **setNull**(`name`: *null* \| *string*): *void*

#### Parameters:

Name | Type |
------ | ------ |
`name` | *null* \| *string* |

**Returns:** *void*

Defined in: [encoder.ts:36](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/encoder.ts#L36)

___

### setString

▸ **setString**(`name`: *null* \| *string*, `value`: *string*): *void*

#### Parameters:

Name | Type |
------ | ------ |
`name` | *null* \| *string* |
`value` | *string* |

**Returns:** *void*

Defined in: [encoder.ts:26](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/encoder.ts#L26)

___

### toString

▸ **toString**(): *string*

**Returns:** *string*

Defined in: [encoder.ts:22](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/encoder.ts#L22)

___

### write

▸ `Private`**write**(`str`: *string*): *void*

#### Parameters:

Name | Type |
------ | ------ |
`str` | *string* |

**Returns:** *void*

Defined in: [encoder.ts:135](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/encoder.ts#L135)

___

### writeBoolean

▸ `Private`**writeBoolean**(`value`: bool): *void*

#### Parameters:

Name | Type |
------ | ------ |
`value` | bool |

**Returns:** *void*

Defined in: [encoder.ts:123](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/encoder.ts#L123)

___

### writeFloat

▸ `Private`**writeFloat**(`value`: *number*): *void*

#### Parameters:

Name | Type |
------ | ------ |
`value` | *number* |

**Returns:** *void*

Defined in: [encoder.ts:131](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/encoder.ts#L131)

___

### writeInteger

▸ `Private`**writeInteger**(`value`: *number*): *void*

#### Parameters:

Name | Type |
------ | ------ |
`value` | *number* |

**Returns:** *void*

Defined in: [encoder.ts:127](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/encoder.ts#L127)

___

### writeKey

▸ `Private`**writeKey**(`str`: *null* \| *string*): *void*

#### Parameters:

Name | Type |
------ | ------ |
`str` | *null* \| *string* |

**Returns:** *void*

Defined in: [encoder.ts:75](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/encoder.ts#L75)

___

### writeString

▸ `Private`**writeString**(`str`: *string*): *void*

#### Parameters:

Name | Type |
------ | ------ |
`str` | *string* |

**Returns:** *void*

Defined in: [encoder.ts:87](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/encoder.ts#L87)

'''
'''--- docs/classes/jsonhandler.md ---
[assemblyscript-json](../README.md) / JSONHandler

# Class: JSONHandler

Extend from this class to handle events from parser.
Default implementation traverses whole object tree and does nothing.

## Hierarchy

* **JSONHandler**

  ↳ [*ThrowingJSONHandler*](throwingjsonhandler.md)

## Table of contents

### Constructors

- [constructor](jsonhandler.md#constructor)

### Methods

- [popArray](jsonhandler.md#poparray)
- [popObject](jsonhandler.md#popobject)
- [pushArray](jsonhandler.md#pusharray)
- [pushObject](jsonhandler.md#pushobject)
- [setBoolean](jsonhandler.md#setboolean)
- [setFloat](jsonhandler.md#setfloat)
- [setInteger](jsonhandler.md#setinteger)
- [setNull](jsonhandler.md#setnull)
- [setString](jsonhandler.md#setstring)

## Constructors

### constructor

\+ **new JSONHandler**(): [*JSONHandler*](jsonhandler.md)

**Returns:** [*JSONHandler*](jsonhandler.md)

## Methods

### popArray

▸ **popArray**(): *void*

**Returns:** *void*

Defined in: [decoder.ts:22](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/decoder.ts#L22)

___

### popObject

▸ **popObject**(): *void*

**Returns:** *void*

Defined in: [decoder.ts:28](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/decoder.ts#L28)

___

### pushArray

▸ **pushArray**(`name`: *string*): bool

#### Parameters:

Name | Type |
------ | ------ |
`name` | *string* |

**Returns:** bool

Defined in: [decoder.ts:18](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/decoder.ts#L18)

___

### pushObject

▸ **pushObject**(`name`: *string*): bool

#### Parameters:

Name | Type |
------ | ------ |
`name` | *string* |

**Returns:** bool

Defined in: [decoder.ts:24](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/decoder.ts#L24)

___

### setBoolean

▸ **setBoolean**(`name`: *string*, `value`: bool): *void*

#### Parameters:

Name | Type |
------ | ------ |
`name` | *string* |
`value` | bool |

**Returns:** *void*

Defined in: [decoder.ts:10](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/decoder.ts#L10)

___

### setFloat

▸ **setFloat**(`name`: *string*, `value`: *number*): *void*

#### Parameters:

Name | Type |
------ | ------ |
`name` | *string* |
`value` | *number* |

**Returns:** *void*

Defined in: [decoder.ts:16](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/decoder.ts#L16)

___

### setInteger

▸ **setInteger**(`name`: *string*, `value`: *number*): *void*

#### Parameters:

Name | Type |
------ | ------ |
`name` | *string* |
`value` | *number* |

**Returns:** *void*

Defined in: [decoder.ts:14](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/decoder.ts#L14)

___

### setNull

▸ **setNull**(`name`: *string*): *void*

#### Parameters:

Name | Type |
------ | ------ |
`name` | *string* |

**Returns:** *void*

Defined in: [decoder.ts:12](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/decoder.ts#L12)

___

### setString

▸ **setString**(`name`: *string*, `value`: *string*): *void*

#### Parameters:

Name | Type |
------ | ------ |
`name` | *string* |
`value` | *string* |

**Returns:** *void*

Defined in: [decoder.ts:8](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/decoder.ts#L8)

'''
'''--- docs/classes/throwingjsonhandler.md ---
[assemblyscript-json](../README.md) / ThrowingJSONHandler

# Class: ThrowingJSONHandler

Extend from this class to handle events from parser.
This implementation crashes on every unimplemented set/push method
to allow easier validation of input.

## Hierarchy

* [*JSONHandler*](jsonhandler.md)

  ↳ **ThrowingJSONHandler**

## Table of contents

### Constructors

- [constructor](throwingjsonhandler.md#constructor)

### Methods

- [popArray](throwingjsonhandler.md#poparray)
- [popObject](throwingjsonhandler.md#popobject)
- [pushArray](throwingjsonhandler.md#pusharray)
- [pushObject](throwingjsonhandler.md#pushobject)
- [setBoolean](throwingjsonhandler.md#setboolean)
- [setFloat](throwingjsonhandler.md#setfloat)
- [setInteger](throwingjsonhandler.md#setinteger)
- [setNull](throwingjsonhandler.md#setnull)
- [setString](throwingjsonhandler.md#setstring)

## Constructors

### constructor

\+ **new ThrowingJSONHandler**(): [*ThrowingJSONHandler*](throwingjsonhandler.md)

**Returns:** [*ThrowingJSONHandler*](throwingjsonhandler.md)

Inherited from: [JSONHandler](jsonhandler.md)

## Methods

### popArray

▸ **popArray**(): *void*

**Returns:** *void*

Inherited from: [JSONHandler](jsonhandler.md)

Defined in: [decoder.ts:22](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/decoder.ts#L22)

___

### popObject

▸ **popObject**(): *void*

**Returns:** *void*

Inherited from: [JSONHandler](jsonhandler.md)

Defined in: [decoder.ts:28](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/decoder.ts#L28)

___

### pushArray

▸ **pushArray**(`name`: *string*): bool

#### Parameters:

Name | Type |
------ | ------ |
`name` | *string* |

**Returns:** bool

Overrides: [JSONHandler](jsonhandler.md)

Defined in: [decoder.ts:68](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/decoder.ts#L68)

___

### pushObject

▸ **pushObject**(`name`: *string*): bool

#### Parameters:

Name | Type |
------ | ------ |
`name` | *string* |

**Returns:** bool

Overrides: [JSONHandler](jsonhandler.md)

Defined in: [decoder.ts:73](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/decoder.ts#L73)

___

### setBoolean

▸ **setBoolean**(`name`: *string*, `value`: bool): *void*

#### Parameters:

Name | Type |
------ | ------ |
`name` | *string* |
`value` | bool |

**Returns:** *void*

Overrides: [JSONHandler](jsonhandler.md)

Defined in: [decoder.ts:41](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/decoder.ts#L41)

___

### setFloat

▸ **setFloat**(`name`: *string*, `value`: *number*): *void*

#### Parameters:

Name | Type |
------ | ------ |
`name` | *string* |
`value` | *number* |

**Returns:** *void*

Overrides: [JSONHandler](jsonhandler.md)

Defined in: [decoder.ts:60](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/decoder.ts#L60)

___

### setInteger

▸ **setInteger**(`name`: *string*, `value`: *number*): *void*

#### Parameters:

Name | Type |
------ | ------ |
`name` | *string* |
`value` | *number* |

**Returns:** *void*

Overrides: [JSONHandler](jsonhandler.md)

Defined in: [decoder.ts:52](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/decoder.ts#L52)

___

### setNull

▸ **setNull**(`name`: *string*): *void*

#### Parameters:

Name | Type |
------ | ------ |
`name` | *string* |

**Returns:** *void*

Overrides: [JSONHandler](jsonhandler.md)

Defined in: [decoder.ts:48](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/decoder.ts#L48)

___

### setString

▸ **setString**(`name`: *string*, `value`: *string*): *void*

#### Parameters:

Name | Type |
------ | ------ |
`name` | *string* |
`value` | *string* |

**Returns:** *void*

Overrides: [JSONHandler](jsonhandler.md)

Defined in: [decoder.ts:37](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/decoder.ts#L37)

'''
'''--- docs/modules/json.md ---
[assemblyscript-json](../README.md) / JSON

# Namespace: JSON

## Table of contents

### Classes

- [Arr](../classes/json.arr.md)
- [Bool](../classes/json.bool.md)
- [Float](../classes/json.float.md)
- [Integer](../classes/json.integer.md)
- [Null](../classes/json.null.md)
- [Num](../classes/json.num.md)
- [Obj](../classes/json.obj.md)
- [Str](../classes/json.str.md)
- [Value](../classes/json.value.md)

### Functions

- [from](json.md#from)
- [parse](json.md#parse)

## Functions

### from

▸ **from**<T\>(`val`: T): [*Value*](../classes/json.value.md)

#### Type parameters:

Name |
------ |
`T` |

#### Parameters:

Name | Type |
------ | ------ |
`val` | T |

**Returns:** [*Value*](../classes/json.value.md)

Defined in: [JSON.ts:404](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L404)

___

### parse

▸ **parse**<T\>(`str`: T): [*Value*](../classes/json.value.md)

#### Type parameters:

Name | Default |
------ | ------ |
`T` | *Uint8Array* |

#### Parameters:

Name | Type |
------ | ------ |
`str` | T |

**Returns:** [*Value*](../classes/json.value.md)

Defined in: [JSON.ts:437](https://github.com/torch2424/assemblyscript-json/blob/d5af3b8/assembly/JSON.ts#L437)

'''
'''--- index.js ---
const fs = require("fs");
const compiled = new WebAssembly.Module(
  fs.readFileSync(__dirname + "/build/optimized.wasm")
);
const imports = {
  //log:
};
Object.defineProperty(module, "exports", {
  get: () => new WebAssembly.Instance(compiled, imports).exports,
});

'''
'''--- package.json ---
{
  "name": "assemblyscript-json",
  "version": "1.1.0",
  "types": "assembly/index.ts",
  "scripts": {
    "asbuild:untouched": "asc assembly/index.ts -b build/untouched.wasm -t build/untouched.wat --sourceMap --validate --debug",
    "asbuild:optimized": "asc assembly/index.ts -b build/optimized.wasm -t build/optimized.wat --sourceMap --validate --optimize",
    "asbuild": "yarn asbuild:untouched && yarn asbuild:optimized",
    "lint": "eslint --max-warnings 0 --ext ts \"assembly/**/*.ts\"",
    "lint:fix": "yarn lint --fix",
    "docs": "typedoc --plugin typedoc-plugin-markdown --out temp-docs --tsconfig assembly/tsconfig.json --exclude \"node_modules/**/*\" --readme none assembly/index.ts",
    "docs:deploy": "cp -r temp-docs/* docs",
    "test": "asp"
  },
  "husky": {
    "hooks": {
      "pre-commit": "yarn lint || (yarn lint --fix && exit 1)"
    }
  },
  "devDependencies": {
    "@as-pect/cli": "^6.2.4",
    "@typescript-eslint/eslint-plugin": "^4.16.0",
    "@typescript-eslint/parser": "^4.16.0",
    "assemblyscript": "^0.19.5",
    "eslint": "^7.21.0",
    "husky": "^4.3.7",
    "typedoc": "^0.21.2",
    "typedoc-plugin-markdown": "^3.10.2",
    "typescript": "^4.1.3"
  }
}

'''
'''--- utils/run_testsuite.sh ---
#!/usr/bin/bash
# Helper scipt to run JSONTestSuite in CI

set -e
set -x

cd utils/testsuite_helper
yarn && yarn build

git clone https://github.com/ashutoshvarma/JSONTestSuite.git testsuite

# replace with newly build wasm
rm testsuite/parsers/test_as_json/index.wasm
cp build/index.wasm testsuite/parsers/test_as_json/index.wasm

# run tests
echo '["Assemblyscript-JSON"]' > filter.json 
python3 testsuite/run_tests.py --filter=filter.json 
'''
'''--- utils/testsuite_helper/README.md ---
# testsuite_helper

This module is primarily used to expose `JSON.parse` through a CLI environment for testing purpose.

### Return codes :-
- 0 - If successfully parsed the input
- 2 - Can't read the file properly

(It needs `wasmtime` to execute) 

## Build
```
yarn
yarn build
```

## Run
```
yarn start --dir FOLDER JSON_FILE_NAME
```
or
```
wasmtime build/index.wasm --dir FOLDER JSON_FILE_NAME
```

'''
'''--- utils/testsuite_helper/index.ts ---
import "wasi";

import { Console, CommandLine, Process, FileSystem, Descriptor } from "as-wasi";
import { JSON } from "../../assembly";

function parse(file: string): u32 {
  const fd = FileSystem.open(file);
  if (fd == null) {
    Console.error("Cannot open file - " + file);
    return 2;
  }
  let content: string = fd.readString()!;
  if (content == null) {
    Console.error("Cannot read file - " + file);
    return 2;
  }

  // parse the file
  let res = JSON.parse(content);
  // Console.log(res.toString());
  Console.log(file + " - Success!");
  return 0;
}

let cmd = new CommandLine();
let f: string | null = cmd.get(1);
if (f) {
  Process.exit(parse(<string>f));
} else {
  Console.log("No File");
  Process.exit(2);
}

'''
'''--- utils/testsuite_helper/package.json ---
{
  "name": "testsuite_helper",
  "version": "1.0.0",
  "description": "",
  "scripts": {
    "build": "asc index.ts -b build/index.wasm --debug",
    "start": "wasmtime build/index.wasm --dir ."
  },
  "keywords": [],
  "author": "",
  "license": "MIT",
  "devDependencies": {
    "assemblyscript": "^0.18.15"
  },
  "dependencies": {
    "as-wasi": "^0.4.4"
  }
}

'''
'''--- utils/testsuite_helper/tsconfig.json ---
{
  "extends": "assemblyscript/std/assembly.json",
  "include": ["./**/*.ts"]
}

'''