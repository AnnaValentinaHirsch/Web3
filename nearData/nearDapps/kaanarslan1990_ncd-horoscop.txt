*GitHub Repository "kaanarslan1990/ncd-horoscop"*

'''--- README.md ---

# Main Idea

A new generation web3 blog application.You can find your zodiac with your birthday and birth month.
##### Video Link: https://www.loom.com/share/6d9ca45fd7ad41dbb98bc6a6956d7fb2
<br>   

## How to Use:
### Prerequisites:
1. npm
2. Current version of Node.js
3. yarn <br>
to install:  npm install --global yarn (or just npm i -g yarn)
4. You need near-cli installed globally. Here's how:<br>
npm install --global near-cli
This will give you the near CLI tool. Ensure that it's installed with:
near --version
### Usage
<br>

1. Clone the repository.

``` 
  git clone https://github.com/kaanarslan1990/ncd-horoscop.git
  ```
  
2. After cloning the project please run
```
yarn
```

in order to install all of the necessary packages for the project to run correctly.

## Building and Deploying the contract
The contract is located in under the ***src/simple/assembly*** folder, after editing the contract you can run
```
    yarn build:release
```
in order to build the contract and get the ***.wasm*** file , if you want to build and deploy the contract at the same time, you can run 
```
   near dev-deploy ./build/release/simple.wasm
````
This will create a test account and deploy the contract into it.

after the contract is deployed, it is necessary to run the following command in the terminal in order to be able to run the contract
```
    export CONTRACT=dev-1650833645152-17014741291409
````
where the **ACCOUNT_ID** will be returned after the contract deployment

# Functions
### 1. Create Your *Zodiac*: 

 - Take  ***brtDay and brtMOnth*** as parameter
 - Returns ***yourZodiac***.

### Example call *creteZodiac*:
```
near call $CONTRACT createZodiac '{"brtDay":12, "brtMonth": "january"}' --accountId $CONTRACT
```
**If you don not attached 1 Near example return assert:**
```
ExecutionError: 'Smart contract panicked: Please deposit exactly 1 NEAR to find your zodiac, filename: "src/simple/assembly/index.ts" line: 19 col: 3'

```
### Example call *creteZodiac*:
```
near call $CONTRACT createZodiac '{"brtDay":12, "brtMonth": "january"}' --accountId $CONTRACT --amount 1
```
**If you attached 1 Near example return :**
```
{
  id: 2741338224,
  name: 'dev-1650833645152-17014741291409',
  brtDay: 12,
  brtMonth: 'january',
  yourZodiac: 'Your Zodiac sign is : Capricorn'
}

```
### 2.  Example call *zodiacSign*
**If you do not attached 1 Near example:**
```
near call $CONTRACT zodiacSign '{"brtDay":12, "brtMonth": "january"}' --accountId $CONTRACT
```
**Example return:**
```
ExecutionError: 'Smart contract panicked: Please deposit exactly 1 NEAR to find your zodiac, filename: "src/simple/assembly/index.ts" line: 19 col: 3'

```
**If you attached 1 Near example:**
```
near call $CONTRACT zodiacSign '{"brtDay":12, "brtMonth": "january"}' --accountId $CONTRACT --amount 1
```
**Example return:**
```
'Your Zodiac sign is : Capricorn'

```

### 3.  Example call zodiac with id *viewZodiac(id:32):*
```
near call $CONTRACT viewZodiac '{"id": 509857559}' --accountId $CONTRACT
```
return:
```
{
  id: 509857559,
  name: 'dev-1650834698681-25611062520036',
  brtDay: 22,
  brtMonth: 'february',
  yourZodiac: 'Your Zodiac sign is : pisces'
}
```
### 4.  Example call all zodiacs *viewAllZodiacs:*
```
near call $CONTRACT viewAllZodiacs --accountId $CONTRACT
```
return:
```
[
  {
    id: 509857559,
    name: 'dev-1650834698681-25611062520036',
    brtDay: 22,
    brtMonth: 'february',
    yourZodiac: 'Your Zodiac sign is : pisces'
  }
]
```
 

# Used Technology:
* Near sdk.
* Near cli.
* Near-api-js.
* Assemply script for writing the contract.

'''
'''--- as-pect.config.js ---
module.exports = require("near-sdk-as/imports");
module.exports.include.push("**/*.unit.spec.ts");

'''
'''--- asconfig.json ---
{
  "workspaces": [
    "src/zodiac"
  ]
}

'''
'''--- package.json ---
{
  "name": "starter--near-sdk-as",
  "version": "0.0.1",
  "description": "Start with a basic project",
  "scripts": {
    "dev-deploy": "./build/release/zodiac.wasm ",
    "test": "yarn asp -f unit.spec",
    "clean": "rm -rf ./build && rm -rf ./neardev",
    "build": "asb --target debug",
    "build:release": "asb",
    "asp": "asp --verbose --nologo"
  },
  "keywords": [],
  "author": "hello@near.org",
  "license": "ISC",
  "devDependencies": {
    "near-sdk-as": "^3.1.0"
  }
}
'''
'''--- scripts/2.create-zodiac.sh ---
#!/usr/bin/env bash
set -e

echo
echo 'About to call createZodiac() on the contract to create a zodiac'
echo
echo \$CONTRACT is $CONTRACT
echo
# near call $CONTRACT createZodiac '{"brtDay":12, "brtMonth": "january"}' --accountId $CONTRACT --amount 1
near call $CONTRACT createZodiac '{"brtDay":12, "brtMonth": "january"}' --accountId $CONTRACT --amount 1
# save the id of the created zodiac 
echo 'Save the id of the created zodiac so you can call it later'
'''
'''--- scripts/3.zodiac-sign.sh ---
#!/usr/bin/env bash
set -e

echo
echo 'About to call zodiacSign() on the contract to find your zodiac sign'
echo
echo \$CONTRACT is $CONTRACT
echo
# near call $CONTRACT zodiacSign '{"brtDay":12, "brtMonth": "january"}' --accountId $CONTRACT --amount 1
near call $CONTRACT zodiacSign '{"brtDay":12, "brtMonth": "january"}' --accountId $CONTRACT --amount 1
# find your zodiac sign only
echo 'Your zodiac sign returned'
'''
'''--- scripts/4.get-zodiac-with-id.sh ---
#!/usr/bin/env bash
set -e

echo
echo 'About to view viewZodiac on the contract to view your created zodiac'
echo
echo \$CONTRACT is $CONTRACT
echo
echo
echo 'If you want to see a zodiac created before, you must change id value in script'
echo
# near view $CONTRACT viewZodiac '{"id": zodiac_id}'
near view $CONTRACT viewZodiac '{"id": 2840125053}'
# diplay the created zodiac 
echo 'View the created zodiac with id'
'''
'''--- scripts/5.view-all-zodiac.sh ---
#!/usr/bin/env bash
set -e

echo
echo 'About to view viewAllZodiacs'
echo
echo \$CONTRACT is $CONTRACT
echo
# near view $CONTRACT viewAllZodiacs
near view $CONTRACT viewAllZodiacs
# view all created zodiac 
echo 'All created zodiac which in zodiacs array'
'''
'''--- scripts/README.md ---
## Setting up your terminal

The scripts in this folder are designed to help you demonstrate the behavior of the contract(s) in this project.

It uses the following setup:

```sh
# set your terminal up to have 2 windows, A and B like this:
┌─────────────────────────────────┬─────────────────────────────────┐
│                                 │                                 │
│                                 │                                 │
│                A                │                B                │
│                                 │                                 │
│                                 │                                 │
└─────────────────────────────────┴─────────────────────────────────┘
```

### Terminal **A**

*This window is used to compile, deploy and control the contract*
- Environment
  ```sh
  export CONTRACT=        # depends on deployment
  export OWNER=           # any account you control

  # for example
  # export CONTRACT=dev-1615190770786-2702449
  # export OWNER=sherif.testnet
  ```

- Commands

  _helper scripts_
  ```sh
  1.dev-deploy.sh                # helper: build and deploy contracts
  2.use-contract.sh              # helper: call methods on ContractPromise
  3.cleanup.sh                   # helper: delete build and deploy artifacts
  ```

### Terminal **B**

*This window is used to render the contract account storage*
- Environment
  ```sh
  export CONTRACT=               # depends on deployment

  # for example
  # export CONTRACT=dev-1615190770786-2702449
  ```

- Commands
  ```sh
  # monitor contract storage using near-account-utils
  # https://github.com/near-examples/near-account-utils
  watch -d -n 1 yarn storage $CONTRACT
  ```
---

## OS Support

### Linux

- The `watch` command is supported natively on Linux
- To learn more about any of these shell commands take a look at [explainshell.com](https://explainshell.com)

### MacOS

- Consider `brew info visionmedia-watch` (or `brew install watch`)

### Windows

- Consider this article: [What is the Windows analog of the Linux watch command?](https://superuser.com/questions/191063/what-is-the-windows-analog-of-the-linuo-watch-command#191068)

'''
'''--- src/as_types.d.ts ---
/// <reference types="near-sdk-as/assembly/as_types" />
'''
'''--- src/tsconfig.json ---
{
  "extends": "../node_modules/assemblyscript/std/assembly.json",
  "include": ["./**/*.ts"]
}

'''
'''--- src/utils.ts ---
import { u128, Context, ContractPromise } from "near-sdk-as";

/**
 * == TYPES ====================================================================
 */

/**
 * Account IDs in NEAR are just strings.
 */
export type AccountId = string;

/**
 * Gas is u64
 */
export type Gas = u64;

/**
 * Amounts, Balances, and Money in NEAR is are u128.
 */

export type Amount = u128;

export type Balance = Amount;

export type Money = Amount;

/**
 * Timestamp in NEAR is a number.
 */
export type Timestamp = u64;

/**
 * == CONSTANTS ================================================================
 *
 * ONE_NEAR = unit of NEAR token in yocto Ⓝ (1e24)
 * XCC_GAS = gas for cross-contract calls, ~5 Tgas (teragas = 1e12) per "hop"
 * MIN_ACCOUNT_BALANCE = 3 NEAR min to keep account alive via storage staking
 *
 * TODO: revist MIN_ACCOUNT_BALANCE after some real data is included b/c this
 *  could end up being much higher
 */

export const ONE_NEAR = u128.from("1000000000000000000000000");
export const XCC_GAS: Gas = 20_000_000_000_000;
export const MIN_ACCOUNT_BALANCE: u128 = u128.mul(ONE_NEAR, u128.from(3));

/**
 * == FUNCTIONS ================================================================
 */

/**
 * @function asNEAR
 * @param amount {u128} - Yocto Ⓝ token quantity as an unsigned 128-bit integer
 * @returns {string}    - Amount in NEAR, as a string
 *
 * @example
 *
 *    asNEAR(7000000000000000000000000)
 *    // => '7'
 */
export function asNEAR(amount: u128): string {
  return u128.div(amount, ONE_NEAR).toString();
}

/**
 * @function toYocto
 * @param amount {number} - Integer to convert
 * @returns {u128}        - Amount in yocto Ⓝ as an unsigned 128-bit integer
 *
 * @example
 *
 *    toYocto(7)
 *    // => 7000000000000000000000000
 */
export function toYocto(amount: number): u128 {
  return u128.mul(ONE_NEAR, u128.from(amount))
}

/**
 * Function to assert that the contract has called itself
 */
export function assert_self(): void {
  const caller = Context.predecessor
  const self = Context.contractName
  assert(caller == self, "Only this contract may call itself");
}

export function assert_single_promise_success(): void {
  const x = ContractPromise.getResults()
  assert(x.length == 1, "Expected exactly one promise result")
  assert(x[0].succeeded, "Expected PromiseStatus to be successful")
}

'''
'''--- src/zodiac/__tests__/as-pect.d.ts ---
/// <reference types="@as-pect/assembly/types/as-pect" />
'''
'''--- src/zodiac/__tests__/index.unit.spec.ts ---
import * as contract from "../assembly";

describe("Contract", () => {
  // VIEW method tests

  it("says hello", () => {
    expect(contract.helloWorld()).toStrictEqual("hello world")
  })

  it("reads data", () => {
    expect(contract.read("some key")).toStrictEqual("🚫 Key [ some key ] not found in storage. ( storage [ 0 bytes ] )")
  })

  // CHANGE method tests

  it("saves data to contract storage", () => {
    expect(contract.write("some-key", "some value")).toStrictEqual("✅ Data saved. ( storage [ 18 bytes ] )")
  })
})

'''
'''--- src/zodiac/asconfig.json ---
{
  "extends": "near-sdk-as/asconfig.json"
}

'''
'''--- src/zodiac/assembly/index.ts ---
import { storage, Context, context, u128, logging } from "near-sdk-as"
import {Zodiac, zodiacs} from "./model"

// --------------------------------------------------------------------------
// Public VIEW methods
// --------------------------------------------------------------------------

/**
 *
 * @param id
 * @returns
 */

 export function viewZodiac(id: u32): Zodiac {
    return zodiacs.getSome(id);
  }
  
 export function viewAllZodiacs(): Array<Zodiac> {
    return zodiacs.values();
  }
  

// --------------------------------------------------------------------------
// Public CREATE methods
// --------------------------------------------------------------------------

export function createZodiac(brtDay: u8, brtMonth: string): Zodiac {
    // attach exactly 1 NEAR to find your zodiac
    assert(context.attachedDeposit == u128.fromString('1000000000000000000000000'), 'Please deposit exactly 1 NEAR to find your zodiac');
    assert(brtDay > 0, 'brtDay should be greater than zero');
    assert(brtDay <= 31, 'brtDay should be equal or lower than 31');
    assert(isString(brtMonth) ? brtMonth : 'brtDay should string and correct month');
    const zodiac = new Zodiac(brtDay, brtMonth, zodiacSign(brtDay, brtMonth));
    zodiacs.set(zodiac.id, zodiac);
  
    return zodiac;
  }

export function zodiacSign(brtDay: u8, brtMonth:string): string {
    assert(context.attachedDeposit == u128.fromString('1000000000000000000000000'), 'Please deposit exactly 1 NEAR to find your zodiac');  
        let yourZodiac: string ="";
        logging.log(`Your zodiac sign is: ${yourZodiac}`)

        // checks month and date within the
        // valid range of a specified zodiac
        if (brtMonth == "december"){

            if (brtDay < 22)
            yourZodiac = "Sagittarius";
            else
            yourZodiac ="capricorn";
        }

        else if (brtMonth == "january"){
            if (brtDay < 20)
            yourZodiac = "Capricorn";
            else
            yourZodiac = "aquarius";
        }

        else if (brtMonth == "february"){
            if (brtDay < 19)
            yourZodiac = "Aquarius";
            else
            yourZodiac = "pisces";
        }

        else if(brtMonth == "march"){
            if (brtDay < 21)
            yourZodiac = "Pisces";
            else
            yourZodiac = "aries";
        }
        else if (brtMonth == "april"){
            if (brtDay < 20)
            yourZodiac = "Aries";
            else
            yourZodiac = "taurus";
        }

        else if (brtMonth == "may"){
            if (brtDay < 21)
            yourZodiac = "Taurus";
            else
            yourZodiac = "gemini";
        }

        else if( brtMonth == "june"){
            if (brtDay < 21)
            yourZodiac = "Gemini";
            else
            yourZodiac = "cancer";
        }

        else if (brtMonth == "july"){
            if (brtDay < 23)
            yourZodiac = "Cancer";
            else
            yourZodiac = "leo";
        }

        else if( brtMonth == "august"){
            if (brtDay < 23)
            yourZodiac = "Leo";
            else
            yourZodiac = "virgo";
        }

        else if (brtMonth == "september"){
            if (brtDay < 23)
            yourZodiac = "Virgo";
            else
            yourZodiac = "libra";
        }

        else if (brtMonth == "october"){
            if (brtDay < 23)
            yourZodiac = "Libra";
            else
            yourZodiac = "scorpio";
        }

        else if (brtMonth == "november"){
            if (brtDay < 22)
            yourZodiac = "scorpio";
            else
            yourZodiac = "sagittarius";
        }
        else  (assert(`Your ${brtMonth} is not true. `))

        
        
        // return yourZodiac; 
        return `Your Zodiac sign is : ${yourZodiac}`; 
      
    }
    

'''
'''--- src/zodiac/assembly/model.ts ---
import {  
  Context,
  math,
  PersistentUnorderedMap,
  
} from "near-sdk-as";
import { AccountId } from "../../utils";

@nearBindgen
export class Zodiac {
  id: u32;
  name: AccountId;
  brtDay:u8;
  brtMonth: string;
  yourZodiac: string;

  constructor(brtDay: u8, brtMonth: string, yourZodiac: string){ 
    
    this.id = math.hash32<string>(Context.sender); 
    this.name=Context.sender;
    this.brtDay = brtDay;
    this.brtMonth = brtMonth;
    this.yourZodiac = yourZodiac;
  }
} 
export const zodiacs = new PersistentUnorderedMap<u32,Zodiac>('z');

'''