*GitHub Repository "near/discovery-docs"*

'''--- .github/workflows/build.yml ---
name: CI
on: [push]
jobs:
  build-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '16'
      - name: Build Docusaurus docs
        run: |
          npm install
          npm run build
        env:
          CROWDIN_PERSONAL_TOKEN: ${{ secrets.CROWDIN_PERSONAL_TOKEN }}

'''
'''--- .github/workflows/links.yml ---
name: Check Markdown links

on: push

jobs:
  markdown-link-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master
    - uses: gaurav-nelson/github-action-markdown-link-check@v1
      with:
        use-quiet-mode: 'yes'
#        use-verbose-mode: 'yes'
        config-file: 'mlc_config.json'
        folder-path: 'docs'

'''
'''--- .github/workflows/spellcheck.yml ---
name: spellchecker

on:
  pull_request:
    branches:
      - main

jobs:
  misspell:
    name: runner / misspell
    runs-on: ubuntu-latest
    steps:
      - name: Check out code.
        uses: actions/checkout@v1
      - name: misspell
        id: check_for_typos
        uses: reviewdog/action-misspell@v1
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          path: "./docs"
          locale: "US"

'''
'''--- README.md ---
# Website

This website is built using [Docusaurus 2](https://docusaurus.io/), a modern static website generator.

### Installation

```
$ yarn
```

### Local Development

```
$ yarn start
```

This command starts a local development server and opens up a browser window. Most changes are reflected live without having to restart the server.

### Build

```
$ yarn build
```

This command generates static content into the `build` directory and can be served using any static contents hosting service.

### Deployment

Using SSH:

```
$ USE_SSH=true yarn deploy
```

Not using SSH:

```
$ GIT_USER=<Your GitHub username> yarn deploy
```

If you are using GitHub pages for hosting, this command is a convenient way to build the website and push to the `gh-pages` branch.

'''
'''--- babel.config.js ---
module.exports = {
  presets: [require.resolve('@docusaurus/core/lib/babel/preset')],
};

'''
'''--- docs/discovery/api/cache.md ---
---
id: cache
title: Cache API
sidebar_label: Cache
---
import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

The VM implements caching layer for most network requests. You can leverage it manually by using `useCache` hook.

## useCache

The method acts like a hook that takes a promise through a generator function, fetches the data and caches it. The cache is global for the VM, but it's identified by for given component (by src) for a given `dataKey`.
It can be used to easily use and cache data from async data sources.

**Returns** `null` if the cache is cold and data is fetching, or the previous cached value while the data is being fetched an d, or the new data if the new promise data is different from the old data.

:::note
The data is being cached and compared as JSON serialized objects.
:::

 | param      |  required     | type               | description                                                           |
 |-----------|-----------|-------------------------|-----------------------------------------------------------------------|
 | `promiseGenerator`      |  **required** | object   | a function that returns a promise, which generates data.  |
 | `dataKey`      |  **required** | object   | the unique name (within the current component) to identify the data.  |
 | `options`      |  _optional_ | object   | optional argument:<br/>- `subscribe` _(optional)_: if `true`, the data refreshes periodically by invalidating cache.  |

:::info
- `promiseGenerator`: you don't return the promise directly, because it should only be fired once.
:::

### Examples

<Tabs>
<TabItem value="request" label="Request" default>

```jsx
const status = useCache(
  () =>
    asyncFetch("https://rpc.mainnet.near.org/status").then((res) => res.body),
  "mainnetRpcStatus",
  { subscribe: true }
);

return status;
```

</TabItem>
<TabItem value="response" label="Response">

```json
{
  "version": {
    "version": "1.31.1",
    "build": "1.31.1",
    "rustc_version": "1.65.0"
  },
  "chain_id": "mainnet",
  "protocol_version": 58,
  "latest_protocol_version": 58,
  "rpc_addr": "127.0.0.1:4040",
  "validators": [
    {
      "account_id": "figment.poolv1.near",
      "is_slashed": false
    },
    {
      "account_id": "staked.poolv1.near",
      "is_slashed": false
    },
    {
      "account_id": "galaxydigital.poolv1.near",
      "is_slashed": false
    }
  ],
  "sync_info": {
    "latest_block_hash": "ArPXejJYcFEDtU8Ma7tXFPM1pRDDzDSkj1KVBjphVwnw",
    "latest_block_height": 85795851,
    "latest_state_root": "EXhYFzPLdno6ZNHFr7DSGFWqUSZLSVZj6oP15xUdrmMm",
    "latest_block_time": "2023-02-22T13:48:47.342467480Z",
    "syncing": false,
    "earliest_block_hash": "HTrKnWapTNuZwoAeeepeV3deyQcJNg1CeKg4PPR8n9Ah",
    "earliest_block_height": 85593094,
    "earliest_block_time": "2023-02-19T18:54:15.505365092Z",
    "epoch_id": "H99thh9tGD8kBwJC5fac83TYGs6W2TTq1Xv3Jqw2VWYv",
    "epoch_start_height": 85765895
  },
  "validator_account_id": null,
  "validator_public_key": null,
  "node_public_key": "ed25519:BhqHCszVngV2MqJrTVjtcbWNGuLUyqXcXyBuCUt8DK9k",
  "node_key": null,
  "uptime_sec": 505796
}
```

</TabItem>
</Tabs>

'''
'''--- docs/discovery/api/clipboard.md ---
---
id: clipboard
title: Clipboard API
sidebar_label: Clipboard
---
import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

The VM implements a clipboard API that works like [Mozilla's Clipboard](https://developer.mozilla.org/en-US/docs/Web/API/Clipboard/writeText), providing write access to the contents of the system clipboard. The Clipboard API can be used to implement cut, copy, and paste features within a web application.

:::info
For extra safety, the VM has `isTrusted` as part of the stack. This allows to verify if the action was part of the stack originating from the `isTrusted` user's event.
:::

## writeText

The Clipboard interface's `writeText()` copies the specified text string to the system clipboard.

:::note
The event requires for the page to be in transient state (explicit user's click).
:::

 | param      |  required     | type               | description                                                           |
 |-----------|-----------|-------------------------|-----------------------------------------------------------------------|
 | `text`      |  **required** | string   | data to be copied to the clipboard.  |

### Examples

<Tabs>
<TabItem value="request" label="Request" default>

```jsx
return (
  <div>
    <div>
      <button
        onClick={() => {
          clipboard.writeText("HelloWorld!");
        }}
      >
        Copy "HelloWorld!" to clipboard
      </button>
    </div>
    <textarea className="form-control mt-2" placeholder="Test pasting here" />
  </div>
);
```

</TabItem>
<TabItem value="response" label="Response">

```json
// Copy "HelloWorld!" to clipboard
```

</TabItem>
</Tabs>

'''
'''--- docs/discovery/api/fetch.md ---
---
id: fetch
title: Fetch API
sidebar_label: Fetch
---
import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

## fetch

`fetch` is a global function that allows to fetch data from the URL. It acts like a hook. It's a wrapper around the `fetch` function from the browser behind the caching layer. It's useful for fetching data from the external APIs. It has the similar API as the browser's `fetch` function, but instead of a promise it returns a value. If the data is not cached, it returns `null` and fetches the data in the background. If the data is cached, it returns the cached value and then revalidates it.

```js
const res = fetch("https://rpc.mainnet.near.org/status");

return res.body;
```

## asyncFetch

To access the version that returns a promise, you can use `asyncFetch`. It doesn't cache the value, so it should only be used within a function to avoid frequent requests on every render.

```js
function reportUptime() {
  asyncFetch("https://rpc.mainnet.near.org/status").then((res) => {
    const uptime = res.body.uptime_sec;
    Near.call("uptime.near", "reportUptime", { uptime });
  });
}

return <button onClick={reportUptime}>Report Uptime</button>;
```

### Implementation Details

```javascript reference
https://github.com/NearSocial/VM/blob/f4d2cc8d0a27aee743d20dedb5f2a2f940530b18/src/lib/data/cache.js#L225-L264
```

### Example Usage

```js
const computeResults = (term) => {
  console.log("computeResults:", term);
  fetchAlgoliaData(term).then((res) => {
    const data = getCategoryResults(res.body);
    State.update({
      term,
      post: postWidgets(data["post"], "post"),
      comment: postWidgets(data["comment, post"], "comment"),
      profile: profileWidgets(data["profile"]),
    });
  });
};

const fetchAlgoliaData = (queryURI) => {
  let search_params = `query=${queryURI}`;
  return asyncFetch(API_URL, {
    body: `{ "params": "${search_params}" }`,
    headers: {
      "Content-Type": "application/x-www-form-urlencoded",
      "X-Algolia-Api-Key": `${SEARCH_API_KEY}`,
      "X-Algolia-Application-Id": `${APPLICATION_ID}`,
    },
    method: "POST",
  });
};
```

'''
'''--- docs/discovery/api/home.md ---
---
id: home
title: Introduction
---

Discovery provides a complete API to allow your [components](../components/home.md) to interact with different blockchains, websites, and store data in a decentralized way.

Custom objects:
- [`Social`](social.md) - the SocialDB API.
- [`State`](state.md) - the state updates API.
- [`Near`](near.md) - the NEAR API.
- [`Clipboard`](clipboard.md) - the clipboard API.

Standard objects:
- `JSON` - the JSON API.
- `Object` - the Object API.
- `Date`
- `console` - the console API.
- `Math` 
- `Array`
- `Number`
- `Buffer`
- `Audio`
- `Image`
- `File`
- `Blob`
- `FileReader`
- `URL`
- `Uint8Array`
- `Map`
- `Set`

Imported objects:
- `Big` - the big number API from the `big.js` library.
- `BN` - the big number API from the `bn.js` library.
'''
'''--- docs/discovery/api/near.md ---
---
id: near
title: NEAR API
sidebar_label: NEAR
---
import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

## Near APIs

VM provides a convenient API to interact with the NEAR blockchain. There are three methods:

- [`Near.block`](#nearblock)
- [`Near.call`](#nearcall)
- [`Near.view`](#nearview)

## Near.block

| param                 | required | type | description                                                                                                                                       |
| --------------------- | -------- | ---- | ------------------------------------------------------------------------------------------------------------------------------------------------- |
| `blockHeightOrFinality` | _optional_    | any  | The block height or finality level to use for the blockchain query (desired block height, or one of the following strings: `optimistic`, `final`)<br/>- desired block height: The height of the specific block to query, expressed as a positive integer<br/>- `optimistic`: Uses the latest block recorded on the node that responded to your query (<1 second delay)<br/>- `final`: a block that has been validated on at least 66% of the nodes in the network (approx. 2s) |

### Example

<Tabs>
<TabItem value="request" label="Request" default>

```jsx
return Near.block("optimistic");
```

</TabItem>
<TabItem value="response" label="Response">

```json
{
  "author": "cryptium.poolv1.near",
  "chunks": [
    {
      "balance_burnt": "1401758302520100000000",
      "chunk_hash": "2a43V7ovicNbSsLEDL3yp1WJWa3bUWvHv5xz52vWqaSL",
      "encoded_length": 1898,
      "encoded_merkle_root": "8i97jVjroXatbDq12CXw8dfkQaX49cWgitD7Pdj61AFR",
      "gas_limit": 1000000000000000,
      "gas_used": 15913198926319,
      "height_created": 85885463,
      "height_included": 85885463,
      "outcome_root": "3M7Tx68bNtHvPLaavGEP7FovdULhppHFBavPCNjkgD5r",
      "outgoing_receipts_root": "FnKFqjSFfcFZ45k1ftG6tmnGD3uoV5VTmkAUYHbaBRRK",
      "prev_block_hash": "5YSsd2iwtwTLETkJvPVef5XbpER8NzJ6JUCuXLTnfPcm",
      "prev_state_root": "3UwJpoQKhuCAqbNFdNRQuNLPBNT5kQxwVy5CHNjLdcQi",
      "rent_paid": "0",
      "shard_id": 0,
      "signature": "ed25519:3MJhP6r3pyX1TaUWyW6KrWNdSWrzrR5VctP3MqLphzUFWTiNux9kXXnUAqmjLiYbDZ9w3QqVXPTUZDYiynGPTfab",
      "tx_root": "DHZ2oaett6NBGWoPb5SrB7gdQFaXEBapFXA2FAdHHi5r",
      "validator_proposals": [],
      "validator_reward": "0"
    },
    {
      "balance_burnt": "0",
      "chunk_hash": "4XHDgq6LL9TzYXDcK4vfnVyFM186RVzjgebZH5gbuzkK",
      "encoded_length": 8,
      "encoded_merkle_root": "9zYue7drR1rhfzEEoc4WUXzaYRnRNihvRoGt1BgK7Lkk",
      "gas_limit": 1000000000000000,
      "gas_used": 0,
      "height_created": 85885463,
      "height_included": 85885463,
      "outcome_root": "11111111111111111111111111111111",
      "outgoing_receipts_root": "8s41rye686T2ronWmFE38ji19vgeb6uPxjYMPt8y8pSV",
      "prev_block_hash": "5YSsd2iwtwTLETkJvPVef5XbpER8NzJ6JUCuXLTnfPcm",
      "prev_state_root": "2rXZaz7jwGb4ro6XhsQ7a1ZZnXqbx3QMjuKsViQUvJBV",
      "rent_paid": "0",
      "shard_id": 1,
      "signature": "ed25519:Sz7m5JsWR29EP7V1GBzYgkYah3Tw5Zitrq81WpLibrJWiD6RQFWc6BDh3Z2fWwz9FtFqpSy85nvSmZ4UDPZciMC",
      "tx_root": "11111111111111111111111111111111",
      "validator_proposals": [],
      "validator_reward": "0"
    },...],
    ...}
```

</TabItem>
</Tabs>

---

## Near.call

| param          | required | type            | description                                                                 |
| -------------- | -------- | --------------- | --------------------------------------------------------------------------- |
| `contractName` | **required**     | string             | Name of the smart contract to call                                          |
| `methodName`   | **required**     | string             | Name of the method to call on the smart contract                            |
| `args`         | _optional_    | object instance | Arguments to pass to the smart contract method as an object instance        |
| `gas`          | _optional_    | string / number             | Maximum amount of gas to be used for the transaction (default 300Tg)        |
| `deposit`      | _optional_    | string / number             | Amount of NEAR tokens to attach to the call as deposit (in yoctoNEAR units) |

This will conduct a call to a smart contract that will store a message onchain.

### Example

<Tabs>
<TabItem value="request" label="Request" default>

```jsx
return Near.call("nearsocialexamples.near", "set_greeting", {
  message: "Hi Near Social",
});
```

</TabItem>
<TabItem value="response" label="Response">

Upon hitting the `Render` button in `Widget Editor` you should see this:

![result](https://i.imgur.com/Lft2rtR.png)

Please take a look at [this Explorer link](https://explorer.near.org/transactions/8PyDVdbizhNj81LxfwdZ1WidKZyS8HVZp8udPKgzFiNi) to see the details related to this `Near.call` method.

</TabItem>
</Tabs>

---

## Near.view

| param              | required | type            | description                                                                                                                    |
| ------------------ | -------- | --------------- | ------------------------------------------------------------------------------------------------------------------------------ |
| `contractName`     | **required**     | string             | Name of the smart contract                                                                                                     |
| `methodName`       | **required**     | string             | Name of the method to call                                                                                                     |
| `args`             | _optional_    | object instance | Arguments to pass to the method                                                                                                |
| `blockId/finality` | _optional_    | string             | Block ID or finality of the transaction                                                                                        |
| `subscribe`        | _optional_    | boolean            | This feature allows users to subscribe to a query, which automatically refreshes the data for all subscribers every 5 seconds. |

<Tabs>
<TabItem value="request" label="Request" default>

```jsx
return Near.view("nearsocialexamples.near", "get_greeting", `{}`);
```

</TabItem>
<TabItem value="response" label="Response">

Upon hitting the `Render` button in `Widget Editor` you should see this:

```jsx
"Hi Near Social";
```

</TabItem>
</Tabs>

### Call and View Example

Below is an example of how to conduct a Call and View Method within `near.social`

```jsx
State.init({
  value: "value to update",
});

console.log(Near.view("nearsocialexamples.near", "get_greeting"));

const testCall = () => {
  return Near.call("nearsocialexamples.near", "set_greeting", {
    message: "Hi Near Social",
  });
};

const testView = () => {
  State.update({
    value: Near.view("nearsocialexamples.near", "get_greeting"),
  });
};

return (
  <div>
    <button onClick={testCall}>test call</button>
    <button onClick={testView}>test view</button>

    <div>{state.value}</div>
  </div>
);
```

'''
'''--- docs/discovery/api/primitives.md ---
---
id: primitives
title: Primitives API
sidebar_label: Primitives
---
import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Near Social VM provides a set of custom APIs that can be used by the components.

Standard objects:
- `JSON` - the JSON API.
- `Object` - the Object API.
- `Date`
- `console` - the console API.
- `Math` 
- `Array`
- `Number`
- `Buffer`
- `Audio`
- `Image`
- `File`
- `Blob`
- `FileReader`
- `URL`
- `Uint8Array`
- `Map`
- `Set`

Imported objects:
- `Big` - the big number API from the `big.js` library.
- `BN` - the big number API from the `bn.js` library.
'''
'''--- docs/discovery/api/social.md ---
---
id: social
title: Social API
sidebar_label: Social
---
import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

VM provides a convenient API to get data from the SocialDB contract. There are four methods:
- [`Social.get`](#socialget)
- [`Social.getr`](#socialgetr)
- [`Social.keys`](#socialkeys)
- [`Social.index`](#socialindex)

## Social.get

`Social.get` fetches the data from the SocialDB contract by calling `get` and returns the data.
While the data is fetching the returned value equals to `null`.

:::note
If the path pattern is a single key, it will try to unwrap the object until the first wildcard.
:::

The method takes up to 3 arguments:

 | param      |  required     | type               | description                                                           |
 |-----------|-----------|-------------------------|-----------------------------------------------------------------------|
 | `patterns`      |  **required** | string / string[]   | the path pattern(s)  |
 | `finality`      |  _optional_ | `"final"` / number   | the block height or finality  |
 | `options`   |  _optional_ | object   | the `options` object:<br/>- `subscribe` _(optional)_: if true, the data will be refreshed every 5 seconds.<br/>- `return_deleted` _(optional)_: whether to return deleted values (as `null`). Default is `false`.  |

The block height or finality can be used to get the data at a specific block height or finality.
If the block height or finality is not specified, the data will be fetched at the `optimistic` finality (the latest block height).

For block height and finality `final`, instead of calling the NEAR RPC directly, the VM uses the Social API Server to fetch the data.
Social API server indexes the data for SocialDB and allows to fetch the data at any block height with additional options.
It also allows returning more data than an RPC call because it's not restricted by the gas limit.
In general, the API server also serves data faster than the NEAR RPC, because it doesn't execute the contract code in a virtual machine.

`Social.get` options are similar to the SocialDB's `get` API.

### Examples

For example, if the path pattern is `mob.near/widget/*`, the `Social.get` will unwrap the object and return the following:

<Tabs>
<TabItem value="request" label="Request" default>

```js
const data = Social.get("mob.near/widget/*");
```

</TabItem>
<TabItem value="response" label="Response">

```json
{
  "HelloWorld": "return <div>Hello, World!</div>;",
  "HelloUsername": "return <div>Hello, {props.username}!</div>;"
}
```

</TabItem>
</Tabs>

If the path pattern is `mob.near/widget/HelloWorld`, the `Social.get` will unwrap the object and return the actual value:

<Tabs>
<TabItem value="request" label="Request" default>

```js
const data = Social.get("mob.near/widget/HelloWorld");
```

</TabItem>
<TabItem value="response" label="Response">

```json
"return <div>Hello, World!</div>;"
```

</TabItem>
</Tabs>

It's helpful that you don't have to manually unwrap object.

---

## Social.getr

`Social.getr` is just a wrapper helper for `Social.get`, it appends `**` to each of the path pattern.

 | param      |  required     | type               | description                                                           |
 |-----------|-----------|-------------------------|-----------------------------------------------------------------------|
 | `patterns`      |  **required** | string / string[]   | the path pattern(s)  |
 | `finality`      |  _optional_ | `"final"` / number   | the block height or finality  |
 | `options`   |  _optional_ | object   | the `options` object:<br/>- `subscribe` _(optional)_: if true, the data will be refreshed every 5 seconds.<br/>- `return_deleted` _(optional)_: whether to return deleted values (as `null`). Default is `false`.  |

### Examples

For example, if the path pattern is `mob.near/profile`, `Social.getr` will call `Social.get` with the path pattern `mob.near/profile/**`.

<Tabs>
<TabItem value="request" label="Request" default>

```js
const data = Social.getr("mob.near/profile");
```

</TabItem>
<TabItem value="response" label="Response">

```json
"return <div>Hello, World!</div>;"
```

</TabItem>
</Tabs>

---

## Social.keys

It calls the SocialDB's `keys` API and returns the data. While the data is fetching the returned value equals to `null`.
The keys contract doesn't unwrap the object, so the returned data is the same as the SocialDB's `keys` API.

`Social.keys` takes up to 3 arguments:

 | param      |  required     | type               | description                                                           |
 |-----------|-----------|-------------------------|-----------------------------------------------------------------------|
 | `patterns`      |  **required** | string / string[]   | the path pattern(s)  |
 | `finality`      |  _optional_ | `"final"` / number   | the block height or finality  |
 | `options`   |  _optional_ | object   | the `options` object:<br/>- `subscribe` _(optional)_: if true, the data will be refreshed every 5 seconds.<br/>- `return_type` _(optional)_: either `"History"`, `"True"`, or `"BlockHeight"`. If not specified, it will return the `"True"`.<br/>- `return_deleted` _(optional)_: whether to return deleted values (as `null`). Default is `false`.<br/>- `values_only` _(optional)_: whether to return only values (don't include objects). Default is `false`.  |

:::tip
The Social API server supports custom options `return_type: "History"`. For each matching key, it will return an array containing all the block heights when the value was changed in ascending order.
It can be used for building a feed, where the values are overwritten. 
:::

### Examples

<Tabs>
<TabItem value="request" label="Request" default>

```js
const data = Social.keys(`${accountId}/post/meme`, "final", {
  return_type: "History",
});
```

</TabItem>
<TabItem value="response" label="Response">

```json
"return <div>Hello, World!</div>;"
```

</TabItem>
</Tabs>

---

## Social.index

Returns the array of matched indexed values. Ordered by `blockHeight`.

`Social.index` arguments:

 | param      |  required     | type               | description                                                           |
 |-----------|-----------|-------------------------|-----------------------------------------------------------------------|
 | `action`      |  **required** | string   | is the `index_type` from the standard, e.g. in the path `index/like` the action is `like`.  |
 | `key`      |  **required** | string   | is the inner indexed value from the standard.  |
 | `options`   |  _optional_ | object   | the `options` object:<br/>- `subscribe` _(optional)_: if true, the data will be refreshed every 5 seconds.<br/>- `accountId` _(optional)_: If given, it should either be a string or an array of account IDs to filter values by them. Otherwise, not filters by account Id.<br/>- `order` _(optional)_: Either `asc` or `desc`. Defaults to `asc`.<br/>- `limit` _(optional)_: Defaults to `100`. The number of values to return. Index may return more than index values, if the last elements have the same block height.<br/>- `from` _(optional)_: Defaults to `0` or `Max` depending on order.  |

### Examples

<Tabs>
<TabItem value="request" label="Request" default>

```jsx
return Social.index("test", "test-key-2");
```

```jsx
return Social.index("test", "test-key-2", {
  accountId: "mob.near"
});
```

```jsx
return Social.index("test", "test-key-2", {
  accountId: ["mob.near", "root.near"]
});
```

</TabItem>
<TabItem value="response" label="Response">

```json
[
    {
        "accountId": "mob.near",
        "blockHeight": 78672789,
        "value": "test-value-1"
    },
    {
        "accountId": "mob.near",
        "blockHeight": 78672797,
        "value": "test-value-1"
    },
    {
        "accountId": "mob.near",
        "blockHeight": 78672974,
        "value": "test-value-3"
    }
]
```

</TabItem>
</Tabs>

'''
'''--- docs/discovery/api/state.md ---
---
id: state
title: State API
sidebar_label: State
---
import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

## State APIs

VM provides a convenient API to update the state of the component. There are two methods:
- [`State.init`](#stateinit)
- [`State.update`](#stateupdate)

:::note Accessing the State from the Component UI
You may access state variables from the component UI using the `state` property of the `widget` object. For example, if you have a state variable `numVar` you can access it from the component UI using `state.numVar`. Here's an example of accessing a variable `profile` from the state and showing it conditionally on the component UI:

```javascript
return (
  <div>
  ...
    {state.profile?.length > 0 && (
      <div>
        <p>Profiles:</p>
        <ul>{state.profile}</ul>
      </div>
    )}
  ...
  </div>
);
```

See this [full example on GitHub here](https://github.com/near/near-search/blob/main/widget/SearchBar.jsx).

:::

---

## State.init

`State.init` takes an object as an argument and initializes the state of the component with this object. It'll be no-op if the state is already initialized.

 | param      |  required     | type               | description                                                           |
 |-----------|-----------|-------------------------|-----------------------------------------------------------------------|
 | `state`      |  **required** | object   | an initial state object for the component  |

### `State.init()` Example

<Tabs>
<TabItem value="request" label="Request" default>

```js
const strVar = "Hello World!";
State.init({
  numVar: 0,
  strVar
});
```

</TabItem>
<TabItem value="response" label="Response">

```js
{ numVar: 0, strVar: "Hello World!" }
```

</TabItem>
</Tabs>

### `State.init()` Implementation Details

The state object is both stored in the `state` property of the component virtual machine and in the `state` property of the react component. The state is initialized with the given object.

```js reference title="VM.js"
https://github.com/NearSocial/VM/blob/5b68433497272c23bf7d06a992c3209f3c97a2b5/src/lib/vm/vm.js#L754-L773
```

---

## State.update

The `State.update` will trigger the state update, and the component will be re-rendered.
It also has an optional argument, the object that will be added to the `state` object using `Object.assign`.
The state will be initialized with the given object if it's not initialized yet.

 | param      |  required     | type               | description                                                           |
 |-----------|-----------|-------------------------|-----------------------------------------------------------------------|
 | `state`      |  **required** | object   | the state  |
 | `init`      |  _optional_ | object   | an optional initial state object  |

### `State.update()` Example

<Tabs>
<TabItem value="request" label="Request" default>

```js
State.update({
  numVar: 1,
  strVar: "Hello there!"
});
```

</TabItem>
<TabItem value="response" label="Response">

```js
{ numVar: 1, strVar: "Hello there!" }
```

</TabItem>
</Tabs>

### `State.update()` Implementation Details

The state is stored in the `state` property of the component. The state is initialized with an empty object `{}`. `Object.assign` is used to update the state.

```js reference title="VM.js"
https://github.com/NearSocial/VM/blob/5b68433497272c23bf7d06a992c3209f3c97a2b5/src/lib/vm/vm.js#L774-L786
```

'''
'''--- docs/discovery/api/storage.md ---
---
id: storage
title: Storage API
sidebar_label: Storage
---
import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

## Storage

`Storage` object to store data for components that is persistent across refreshes. Simulates `localStorage` access. It has 4 methods:

- [`Storage.get`](#storageget)
- [`Storage.set`](#storageset)
- [`Storage.privateGet`](#storageprivateget)
- [`Storage.privateSet`](#storageprivateset)

## Storage.get

`Storage.get(key, widgetSrc?)` - returns the public value for a given key under the given widgetSrc or the current component if `widgetSrc` is omitted. Can only read public values.

 | param      |  required     | type               | description                                                           |
 |-----------|-----------|-------------------------|-----------------------------------------------------------------------|
 | `key`      |  **required** | object   | a user-defined key  |
 | `widgetSrc`  |  _optional_ | object   | a user-defined component  |

### Examples

<Tabs>
<TabItem value="request" label="Request" default>

```jsx
const notificationFeedSrc = "mob.near/widget/NotificationFeed";

const lastBlockHeight = Storage.get("lastBlockHeight", notificationFeedSrc);
```

</TabItem>
<TabItem value="response" label="Response">

```json
// the value for the "lastBlockHeight" key under the
// 'mob.near/widget/NotificationFeed' widget is retrieved
```

</TabItem>
</Tabs>

:::tip
See a full example in the [NotificationButton source code](https://near.social/#/mob.near/widget/WidgetSource?src=mob.near/widget/NotificationButton).
:::

---

## Storage.set

`Storage.set(key, value)` - sets the public value for a given key under the current widget. The value will be public, so other widgets can read it.

 | param      |  required     | type               | description                                                           |
 |-----------|-----------|-------------------------|-----------------------------------------------------------------------|
 | `key`      |  **required** | object   | a user-defined key  |
 | `value`    |  **required** | object   | a user-defined value  |

### Examples

<Tabs>
<TabItem value="request" label="Request" default>

```jsx
const accountId = context.accountId;

const notifications = Social.index("notify", accountId, {
  order: "desc",
  limit: 100,
  subscribe: true,
});

Storage.set("lastBlockHeight", notifications[0].blockHeight);
```

</TabItem>
<TabItem value="response" label="Response">

```json
// the "lastBlockHeight" key is set to the value from notifications[0].blockHeight
```

</TabItem>
</Tabs>

:::tip
See a full example in the [NotificationFeed source code](https://near.social/#/mob.near/widget/WidgetSource?src=mob.near/widget/NotificationFeed).
:::

---

## Storage.privateGet

`Storage.privateGet(key)` - returns the private value for a given key under the current component.

 | param      |  required     | type               | description                                                           |
 |-----------|-----------|-------------------------|-----------------------------------------------------------------------|
 | `key`      |  **required** | object   | a user-defined key under the current component  |

### Examples

<Tabs>
<TabItem value="request" label="Request" default>

```jsx
const mySecretData = Storage.privateGet("secretKey");
```

</TabItem>
<TabItem value="response" label="Response">

```json
// the current value of 'secretKey' is retrieved from private storage
```

</TabItem>
</Tabs>

---

## Storage.privateSet

`Storage.privateSet(key, value)` - sets the private value for a given key under the current component. The value is private, only the current component can read it.

:::note
Private and public values can share the same key and don't conflict.
:::

 | param      |  required     | type               | description                                                           |
 |-----------|-----------|-------------------------|-----------------------------------------------------------------------|
 | `key`      |  **required** | object   | a user-defined key under the current component |
 | `value`    |  **required** | object   | a user-defined value  |

### Examples

<Tabs>
<TabItem value="request" label="Request" default>

```jsx
Storage.privateSet("secretKey", "my-secret-value");
```

</TabItem>
<TabItem value="response" label="Response">

```json
// "my-secret-value" is privately stored under 'secretKey'
```

</TabItem>
</Tabs>

'''
'''--- docs/discovery/components/files.md ---
---
id: files
title: Files
sidebar_label: Files
---

import {WidgetEditor} from "@site/src/components/social-widget"

`Files` is a built-in component that enables to input files with drag and drop support. To use this feature, simply use the `Files` component. This component is a dependency from the [`IpfsImageUpload`](./ipfsimageupload.md) component.

Read more about the `Files` component [here](https://www.npmjs.com/package/react-files).

<hr class="subsection" />

### Example

<WidgetEditor id='1' height="220px">

```ts
State.init({ img: null });

const uploadFileUpdateState = (body) => {
  asyncFetch(
    "https://ipfs.near.social/add",
    {
      method: "POST",
      headers: { Accept: "application/json" },
      body
    }
  ).then(
    (res) => {
      const cid = res.body.cid;
      State.update({ img: { cid } });
    }
  )
};

const filesOnChange = (files) => {
  if (files) {
    State.update({ img: { uploading: true, cid: null } });
    uploadFileUpdateState(files[0]);
  }
};

return (
  <div className="d-inline-block">
    { state.img?
      <img class="rounded w-100 h-100"
        style={{ objectFit: "cover" }}
        src={`https://ipfs.near.social/ipfs/${state.img.cid}`}
        alt="upload preview" />
      : ""
    }
    <Files
      multiple={false}
      accepts={["image/*"]}
      minFileSize={1}
      clickable
      className="btn btn-outline-primary"
      onChange={filesOnChange}
    >
      { state.img?.uploading ? <> Uploading </> : "Upload an Image" }
    </Files>
  </div>
);
```

</WidgetEditor>

'''
'''--- docs/discovery/components/home.md ---
---
id: home
title: Built-in Components
---

In Discovery, you build small apps known as `Components`, that focus on solving a specific problem. Then, you compose these `Components` to achieve a full-working frontend.

To simplify development, Discovery provides a set of built-in components that  you can readily use to build your decentralized frontend.

![widgets](@site/static/docs/widgets.jpeg)
*Decomposing the [near.social](https://near.social) application into its Components*

---

### Non-Exhaustive List of Built-in Components 

- **[Widget](./widget.md)**: The minimum unit of a frontend.
- **[Markdown](./markdown.md)**: Renders markdown text.
- **[IPFS Uploader](./ipfsimageupload.md)**: Uploads images into IPFS.
- **[OverlayTrigger](./overlayTrigger.md)**: Renders Bootstrap's OverlayTrigger based on npm package [`react-bootstrap`](https://www.npmjs.com/package/react-bootstrap).
- **[InfiniteScroll](./infiniteScroll.md)** - the component to render infinite scroll based on the npm package [`react-infinite-scroller`](https://www.npmjs.com/package/react-infinite-scroller).
- **[Typeahead](./typeahead.md)** - the component for text auto-complete and typeahead based on npm package [`react-bootstrap-typeahead`](https://www.npmjs.com/package/react-bootstrap-typeahead).
- **[Files](./files.md)** - the component to input files with drag and drop support based on npm package [`react-files`](https://www.npmjs.com/package/react-files).
- **[Tooltip](./tooltip.md)** - the component to render Bootstrap's tooltip based on npm package [`react-bootstrap`](https://www.npmjs.com/package/react-bootstrap).
- **[styled](./styledComponents.md)** - React's [styled components](https://styled-components.com/)

'''
'''--- docs/discovery/components/infiniteScroll.md ---
---
id: infinite-scroll
title: InfiniteScroll
sidebar_label: InfiniteScroll
---

import {WidgetEditor} from "@site/src/components/social-widget"

Infinitely load a grid or list of items. This component allows you to create a simple, lightweight infinite scrolling page or element by supporting both window and scrollable elements.

Read more about the [react-infinite-scroller](https://www.npmjs.com/package/react-infinite-scroller) package.

<hr class="subsection" />

### Example

<WidgetEditor id='1' height="200px">

```ts
const allNumbers = Array.from(Array(100).keys())

State.init({
  displayNums: [],
  lastNumber: 0,
});

const loadNumbers = (page) => {
  allNumbers
    .slice(state.lastNumber, state.lastNumber + 10)
    .map((n) => numberToElem(n))
    .forEach((i) => state.displayNums.push(i));
  state.lastNumber += 10;
  State.update();
};

const numberToElem = (number) => <div> {number} </div>;

return (
  <div>
    <InfiniteScroll
      loadMore={loadNumbers}
      hasMore={state.displayNums.length < allNumbers.length}
    >
      {state.displayNums}
    </InfiniteScroll>
  </div>
);
```

</WidgetEditor>

---

### Example: Loading Memes in NEAR Social

<WidgetEditor id='2' height="260px">

```ts
const data = Social.keys(`*/post/meme`, "final", { return_type: "History" });

if (!data) { return "Loading"; }

const processData = (data) => {
  const accounts = Object.entries(data);

  const allMemes = accounts
    .map((account) => {
      const accountId = account[0];
      const blockHeights = account[1].post.meme;
      return blockHeights.map((blockHeight) => ({
        accountId,
        blockHeight,
      }));
    })
    .flat();

  allMemes.sort((a, b) => b.blockHeight - a.blockHeight);
  return allMemes;
};

const memeToWidget = ({accountId, blockHeight}) => {
  return <div style={{ minHeight: "200px" }}>
    <a href={`#/mob.near/widget/Meme?accountId=${accountId}&blockHeight=${blockHeight}`}
      class="text-decoration-none" >
      <Widget src="mob.near/widget/Meme" props={{accountId, blockHeight}} />
    </a>
  </div >
};

State.init({
  allMemes: processData(data),
  widgets: [],
});

const makeMoreMemes = () => {
  const newMemes = state.allMemes
    .slice(state.widgets.length, state.widgets.length + 10)
    .map(memeToWidget);
  newMemes.forEach((meme) => state.widgets.push(meme));
  State.update();
};

return (
  <div className="px-2 mx-auto" >
    <InfiniteScroll
      loadMore={makeMoreMemes}
      hasMore={state.widgets.length < state.allMemes.length}
    >
      {state.widgets}
    </InfiniteScroll>
  </div>
);
```

</WidgetEditor>
'''
'''--- docs/discovery/components/ipfsimageupload.md ---
---
id: ipfs
title: Image Uploader
---
import {WidgetEditor} from "@site/src/components/social-widget"

The `IpfsImageUpload` is a built-in component that enables users to directly upload an image to the InterPlanetary File System (IPFS).

<hr class="subsection" />

### Example

<WidgetEditor id='1' height="200px">

```javascript
State.init({
  img: null,
});

return (
  <div className='container row'>
    <div>
      Image upload: <br />
      <IpfsImageUpload image={state.img} />
    </div>
    <div>
      Raw State:
      <pre>{JSON.stringify(state)}</pre>
    </div>
    <div className='mt-2'>
      {state.img.cid && (
        <img
          src={`https://ipfs.near.social/ipfs/${state.img.cid}`}
          alt='uploaded'
        />
      )}
    </div>
  </div>
);
```

</WidgetEditor>
'''
'''--- docs/discovery/components/markdown.md ---
---
id: markdown
title: Markdown Viewer
sidebar_label: Markdown
---

import {WidgetEditor} from "@site/src/components/social-widget"

`Markdown` is a built-in component that enables to render Markdown. To use this feature, simply use the `Markdown` component:

<hr class="subsection" />

### Example

<WidgetEditor id='1' height="200px">

```ts
const text = `
  #### Markdown Section
  Example of **markdown** *code* with an [url](example.com)
`;

return (
  <>
    <div class="container border border-info pt-3 min-vw-100 text-center">
      <Markdown text={text} />
    </div>
  </>
);
```

</WidgetEditor>

---

## Markdown Editor
<!-- TODO: Create a widget -->
The user can input static text, as demonstrated above. However, for a more robust experience, checkout this component that also contains a Markdown Editor (accessible at https://near.social/#/mob.near/widget/MarkdownEditorIframeExample). Hit the `View Source` Button to see how this editor was created.

![](https://i.imgur.com/XJO8tEz.png)

'''
'''--- docs/discovery/components/overlayTrigger.md ---
---
id: overlay-trigger
title: OverlayTrigger
sidebar_label: OverlayTrigger
---

import {WidgetEditor} from "@site/src/components/social-widget"

The `OverlayTrigger` is used to display a message or icon when the mouse is over a DOM element. Common use cases could be like a popover or a tooltip.

<hr class="subsection" />

### Example

<WidgetEditor id='1' height="200px">

```javascript
State.init({
  show: false,
});

const handleOnMouseEnter = () => {
  State.update({ show: true });
};
const handleOnMouseLeave = () => {
  State.update({ show: false });
};

const overlay = (
  <div
    className='border m-3 p-3 rounded-4 bg-white shadow'
    style={{ maxWidth: "24em", zIndex: 1070 }}
    onMouseEnter={handleOnMouseEnter}
    onMouseLeave={handleOnMouseLeave}
  >
    This is the overlay Message
  </div>
);

return (
  <OverlayTrigger
    show={state.show}
    trigger={["hover", "focus"]}
    delay={{ show: 250, hide: 300 }}
    placement='auto'
    overlay={overlay}
  >
    <span
      className='d-inline-flex'
      style={{ backgroundColor: "gray", borderRadius: "10px", padding: "10px" }}
      onMouseEnter={handleOnMouseEnter}
      onMouseLeave={handleOnMouseLeave}
    >
      Place Mouse Over Me
    </span>
  </OverlayTrigger>
);
```

</WidgetEditor>

The OverlayTrigger component has several props that allow you to customize its behavior:

| Prop        | Description                                                                                                                                                                                                                                                                  |
| ----------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `show`      | A boolean value that determines whether the overlay is currently visible or not.                                                                                                                                                                                             |
| `trigger`   | An array of events that trigger the display of the overlay. In this example, the `trigger` prop is set to `["hover", "focus"]`, which means that the overlay will be displayed when the user hovers over or focuses on the element.                                          |
| `delay`     | An object that specifies the delay before the overlay is displayed or hidden. In this example, the `delay` prop is set to `{ show: 250, hide: 300 }`, which means that the overlay will be displayed after a 250-millisecond delay and hidden after a 300-millisecond delay. |
| `placement` | A string that specifies the position of the overlay relative to the trigger element. In this example, the `placement` prop is set to `"auto"`, which means that the position will be automatically determined based on available space.                                      |
| `overlay`   | The content that will be displayed in the overlay. In this example, the `overlay` prop is set to a `<div>` element containing the message "This is the overlay message."                                                                                                     |

'''
'''--- docs/discovery/components/styledComponents.md ---
---
id: styled
title: Styled Components
sidebar_label: Styled
---
import {WidgetEditor} from "@site/src/components/social-widget"

[Styled Components](https://styled-components.com/) is a popular library for styling React components using CSS-in-JS.
This tool was imported into `near.social` infrastructure for your use. You do not have to install or import anything, it is ready to use right away.

<hr class="subsection" />

### Example

<WidgetEditor id='1' height="80px">

```jsx
const Button = styled.button`
  /* Adapt the colors based on primary prop */
  background: ${(props) => (props.primary ? "palevioletred" : "white")};
  color: ${(props) => (props.primary ? "white" : "palevioletred")};

  font-size: 1em;
  margin: 1em;
  padding: 0.25em 1em;
  border: 2px solid palevioletred;
  border-radius: 10px;
`;

return (
  <div>
    <Button>Normal</Button>
    <Button primary>Primary</Button>
  </div>
);
```

</WidgetEditor>
'''
'''--- docs/discovery/components/tooltip.md ---
---
id: tooltip
title: ToolTip Component
sidebar_label: ToolTip
---

import {WidgetEditor} from "@site/src/components/social-widget"

This special component displays a message once the mouse hovers over a particular DOM item. This component was imported into NEAR Social from `React-Bootstrap` and more info can be [found here](https://react-bootstrap.netlify.app/components/overlays/#tooltips).

<hr class="subsection" />

### Example

The code has been adopted and modified from the `react-bootstrap` documentation website. The snippet below demonstrates how to implement the message over a button and how to reposition it.

<WidgetEditor id='1' height="120px">

```jsx
return (
  <>
    {["top", "right", "bottom", "left"].map((placement) => (
      <div style={{ margin: "2.5rem 1rem", float: "left" }}>
        <OverlayTrigger
          key={placement}
          placement={placement}
          overlay={
            <Tooltip id={`tooltip-${placement}`}>
              Tooltip on <strong>{placement}</strong>.
            </Tooltip>
          }
        >
          <button variant="secondary">Tooltip on {placement}</button>
        </OverlayTrigger>
      </div>
    ))}
  </>
);
```

</WidgetEditor>
'''
'''--- docs/discovery/components/typeahead.md ---
---
id: typeahead
title: TypeAhead Component
sidebar_label: TypeAhead
---
import {WidgetEditor} from "@site/src/components/social-widget"

The `TypeAhead` component provides a type-ahead input field for selecting an option from a list of choices. This component is imported from the `react-bootstrap-typeahead` package; more information about the component can be found [here](https://github.com/ericgio/react-bootstrap-typeahead).

<hr class="subsection" />

### Example

The code example below demonstrates how to use the `TypeAhead` component to create an input field for selecting a fruit from a list of options.

<WidgetEditor id='1' height="220px">

```jsx
const options = ["Apple", "Banana", "Cherry", "Durian", "Elderberry"];

return (
  <div class="container min-vh-100 min-vw-100">
    <Typeahead
      options={options}
      multiple
      onChange={(value) => {State.update({choose: value})}}
      placeholder='Choose a fruit...'
    />
    <hr />
    <p> Selected: {JSON.stringify(state.choose)} </p>
  </div>
);
```

</WidgetEditor>
'''
'''--- docs/discovery/components/widget.md ---
---
id: widgets
title: Widget
---
import {WidgetEditor} from "@site/src/components/social-widget"

The predefined component `Widget` allows you to include an existing component into your code, thus enabling to create complex applications by composing components.

<WidgetEditor id='1' height="220px">

```ts
const user = "gagdiez.near";
const props = { name: "Anna" };

return (
  <>
    <div class="container min-vw-100">

      <h3> Composing Widgets </h3>
      <p> Widgets can be composed </p>
      <hr />

      <Widget src={`${user}/widget/Greetings`} props={props} />
    </div>
  </>
);
```

</WidgetEditor>
'''
'''--- docs/discovery/home.md ---
---
id: home
title: Components
---

import {WidgetEditor} from "@site/src/components/social-widget"

Discovery allows you to create a decentralized frontend by writing and composing small applications known as `Components`. 

Components are stored in the NEAR blockchain, and execute locally in a custom Virtual Machine, thus ensuring the component can not access local storage or cookies.

:::info Discovery API
Components use the Discovery [**API**](./api/home.md) to process data, fetch data from other websites, and interact with blockchains.
:::

---

## Creating a Component

To create a component you simply need to implement a return statement, returning some HTML code. 

<WidgetEditor id='1' height="130px">

```ts
let greeting = "Have a great day";

return (
  <>
    <div class="container border border-info p-3 text-center min-vw-100">
      <h1>Hello</h1>
      <p> {greeting} </p>
    </div>
  </>
);
```

</WidgetEditor>

---

## Props: Receiving Input

Components can take arbitrary input, which will be reflected in the `props` variable. In the example below, we are passing as input `name="Anna"`.

<WidgetEditor id='2' height="130px" properties={{name: "Anna"}}>

```ts
let name = props.name || "User";
let greeting = "Have a great day";

return (
  <>
    <div class="container border border-info p-3 text-center min-vw-100">
      <h1>Hello {name}</h1>
      <p> {greeting} </p>
    </div>
  </>
);
```

</WidgetEditor>

---

## State: Storing Information 

Components have an internal state were they can store information.

<WidgetEditor id='3' height="150px">

```ts
State.init({greeting: "Have a great day"});

const onChange = ({target}) => { State.update({greeting: target.value}) };

return (
  <>
    <div class="container border border-info p-3 min-vw-100">
      <p><b> Greeting: </b>  {state.greeting} </p>

      <label class="text-left">Change the Greeting</label>
      <input onChange={onChange} />
    </div>
  </>
);
```

</WidgetEditor>

---

## Composing Components

To compose components you will use the [Predefined `Widget` component](./components/widget.md). For this, you will only need the NEAR username of who created the component, and the component's name.

<WidgetEditor id='4' height="200px">

```ts
const user = "gagdiez.near";
const props = { name: "Anna" };

return (
  <>
    <div class="container min-vw-100">

      <h5> Components can be composed </h5>
      <hr />

      <Widget src={`${user}/widget/Greetings`} props={props} />
    </div>
  </>
);
```

</WidgetEditor>
'''
'''--- docs/index.md ---
---
id: welcome
title: Welcome to the Discovery Docs
sidebar_label: Home
hide_table_of_contents: true
---

Discovery is the connective tissue that connects applications, tooling, social, earning, and developer components across the open web.

Build your own decentralized frontend in a manner of minutes, and connect it with your favorite blockchain applications.

![widgets](@site/static/docs/social.jpeg)
*The social network [near.social](https://near.social) was built using the Discovery API*
'''
'''--- docs/social/contract.md ---
---
id: contract
title: SocialDB
sidebar_label: SocialDB
---

> SocialDB is a smart contract to store social data on NEAR protocol.

- Source code: https://github.com/NearSocial/social-db
- API: https://github.com/NearSocial/social-db#api
- Testnet account ID: [`v1.social08.testnet`](https://explorer.testnet.near.org/accounts/v1.social08.testnet)
- Mainnet account ID: [`social.near`](https://explorer.near.org/accounts/social.near)

### Get API

Takes a list of keys and returns a joined JSON object with the matched data.

```rust
pub fn get(self, keys: Vec<String>) -> Value;
```

- `keys` - an array of key patterns to return.

Returns the aggregated JSON object.

##### Reading a profile of account `self.social.near`

To read all fields recursively for a given path add `**` suffix.

```bash
env NEAR_ENV=mainnet near view social.near get '{"keys":["self.social.near/profile/**"]}'
```

```json
{
  "self.social.near": {
    "profile": {
      "name": "Near Social",
      "image": {
        "ipfs_cid": "bafkreiej5new6k7bzlaaapuc7fgjlwaoqqw2qgzvilbmdankmfxw7siw6q"
      },
      "linktree": {
        "twitter": "NearSocial_",
        "github": "NearSocial",
        "telegram": "NearSocial",
        "website": "near.social"
      }
    }
  }
}
```

##### Reading names of all account with profiles

_Note that this query iterates over all accounts and will not fit into the available view call gas in the future._

```bash
env NEAR_ENV=mainnet near view social.near get '{"keys":["*/profile/name"]}'
```

```json
{
  "mob.near": {
    "profile": {
      "name": "Eugene The Dream"
    }
  },
  "nearcondemo.near": {
    "profile": {
      "name": "Very Berry Demo Acc"
    }
  },
  "zavodil.near": {
    "profile": {
      "name": "Vadim"
    }
  },

  ................................
  
  "kuzu.near": {
    "profile": {
      "name": "Joinairdrops"
    }
  },
  "goldich.near": {
    "profile": {
      "name": "MAG"
    }
  }
}
```

### Keys API

Takes a list of keys and returns a joined JSON object with the keys matched the query.

```rust
pub fn keys(self, keys: Vec<String>) -> Value;
```

- `keys` - an array of key patterns to return.

Returns the aggregated JSON object.

##### Getting a list of components of accounts `root.near`

```bash
env NEAR_ENV=mainnet near view social.near keys '{"keys":["root.near/widget/*"]}'
```

```json
{
  "root.near": {
    "widget": {
      "AllProfilesWithGithub": true,
      "Egg": true,
      "TotalAccountsCount": true
    }
  }
}
```

##### Getting a list of accounts that have components

```bash
env NEAR_ENV=mainnet near view social.near keys '{"keys":["*/widget"]}'
```

_Note that this query iterates over all accounts and will not fit into the available view call gas in the future._

```json
{
  "mob.near": {
    "widget": true
  },
  "nearcondemo.near": {
    "widget": true
  },
  "zavodil.near": {
    "widget": true
  },
  
  ................................
  
  "elektromania.near": {
    "widget": true
  },
  "kn00t.near": {
    "widget": true
  }
}
```

'''
'''--- docs/social/home.md ---
---
id: intro
title: NEAR Social
sidebar_label: Introduction
---

Take whatever is useful from "past, present and future of social media"

Please join [Telegram group @NearSocial](https://t.me/NearSocial) for discussions.

Watch presentation [Near Social at NEARCON22](https://www.youtube.com/watch?v=Khn7zX7ZtqI&t=4700s)

Explore Near Social: **[near.social](https://near.social)**

[The Past, The Present and The Future of NEAR Social](https://thewiki.near.page/PastPresentAndFutureOfNearSocial)

### Links

Github: https://github.com/NearSocial

Twitter: [@NearSocial_](https://twitter.com/NearSocial_)

Telegram: [@NearSocial](https://t.me/NearSocial)

SocialDB Contract:
- Source: https://github.com/NearSocial/social-db
- Mainnet: `social.near`
- Testnet: `v1.social08.testnet`

Standards: https://github.com/NearSocial/standards

Near Social Browser:
- Source: https://github.com/NearSocial/viewer
- Mainnet: https://near.social/
- Testnet: https://test.near.social/

If you are looking for a mastodon based social network for `.near` users, see an article about [mastodon.near.social](#)

'''
'''--- docs/social/standards.md ---
---
id: standards
title: Standards
---

The data in SocialDB is organized as a simple JSON tree.
The only enforced rule is that the keys in the root are the account IDs that store the data.
This is done on purpose, so the SocialDB contract is not enforcing any structure or a schema.
Otherwise, the contract has to be modified for every schema change.
The control of the contract schemas can lead to the centralization and restrictions.
Instead, Near Social Standards live outside the SocialDB contract.

Currently, [Standards on Github](https://github.com/NearSocial/standards) is the default place for the standards, but this may change in the future.

### Schema description

- **`bold`** means the key is required.
- _`italic`_ means the key is optional.
- `[account_id]` means the dynamic key is an account ID. For example, `alex.near` as a key. It usually used to create some edge towards that account.

### Root schema

Each account should follow the **[Root schema](https://github.com/NearSocial/standards/blob/main/types/Root.md#root)**

'''
'''--- docs/social/tech.md ---
---
id: tech
title: Technical Documentation
---

This document goes into technical details of the Near Social.  
I recommend reading [The Past, Present, and Future of Near Social](https://thewiki.near.page/PastPresentAndFutureOfNearSocial) first.

## SocialDB

The contract is deployed at the following accounts:
- NEAR mainnet: `social.near`
- NEAR testnet: `v1.social08.testnet`

Source code: [social-db](https://github.com/NearSocial/social-db)

### Data organization

Internally, the contract organizes the data using a tree structure.
Each node in a tree is represented as a `VNode` structure (upgradable `Node`).
Nodes are stored in a `LookupMap` with the key being a `NodeId (u32)`.
The root node has the index `0` and stored separately in the contract state.

The `Node` structure contains the following fields:
- `block_height` - the block height when the node was last modified
- `children` - an unordered iterable key-value map.

Keys in the `children` map are strings, with the following restrictions:
- only the following characters are allowed: `a-z`, `A-Z`, `0-9`, `-`, `_`, `.`
- the key must be at most 256 character long

The value is a node index, a string value, or deleted value.
Both string value and deleted values additionally store the block height when the value was last modified.
The value for an empty string key can't be a node index. It's a special case which will be described later.

Children of the root node are the account IDs of the users, the values are always a node index.

#### An empty string key case

When data object is being added by a user, new non-existing nodes are added to the tree.
But what if a leaf value was originally string? For example, we have the following data:

```json
{
  "alex.near": {
    "profile": {
      "name": "Alex"
    }
  }
}
```

User calls `set` method and wants to add the following data:

```json
{
  "alex.near": {
    "profile": {
      "name": {
        "foo": "bar"
      }
    }
  }
}
```

In this case the value for the key `name` will be transformed to a node, and the previous value will be moved to an empty key under this node:

```json
{
  "alex.near": {
    "profile": {
      "name": {
        "": "Alex",
        "foo": "bar"
      }
    }
  }
}
```

This creates extra complexity in the implementation, but it allows the contract to maintain data without deletion of old values.
But more importantly it allows users to store values for keys that are already a node without losing the node index. For example, a user stores image as an object:

```json
{
  "alex.near": {
    "profile": {
      "image": {
        "url": "foo://bar",
        "nft": {
          "contract": "nft.near",
          "token_id": "1"
        }
      }
    }
  }
}
```

Then the user wants to store image as a serialized value, they call `set` method with the following data:

```json
{
  "alex.near": {
    "profile": {
      "image": "{ \"url\": \"foo://bar\" }"
    }
  }
}
```

Since the value for the key `image` is already a node, the value will be stored under the empty string key:

```json
{
  "alex.near": {
    "profile": {
      "image": {
        "": "{ \"url\": \"foo://bar\" }",
        "url": "foo://bar",
        "nft": {
          "contract": "nft.near",
          "token_id": "1"
        }
      }
    }
  }
}
```

If we wouldn't store the values under the empty string key, the contract would have to delete the index to a node or fail the transaction.
Both situations are undesirable.

### Accounts and storage

The contract stores account information separately from the data.
Each account is represented as a `VAccount` structure (upgradable `Account`).
Accounts are stored in a `LookupMap` with the key being a `NodeId (u32)` matching the node index from the Root node.

The `Account` structure contains the following fields:
- `storage_balance` - the amount of storage tokens attached to the account
- `used_bytes` - the number of bytes used by the account for storing data and account information
- `permissions` - an iterable map of permissions for the account

Users have to cover the storage costs for the data they store.
If they override the data, they only have to pay for the extra bytes that were added.
When they delete the data, they get the storage deposit back for the amount of released bytes.
And users then can reuse that deposit for new data or withdraw it from the contract.

### Permissions

SocialDB contract allows users to grant permissions to other accounts or other public keys to write into their data.
The permissions are stored in the contract state, and they are used to validate the write access.
By default, the SocialDB contract requires a payment of at least one yoctoNEAR to write into the data.
It prevents simple user's mistakes for adding an access key to the SocialDB contract by a random application, which would allow an application to write into any field of the user's data.
So instead the application should either request a permission from the user to whitelist their limited access key for a particular sub-tree of the user's data, or request a confirmation from the user to sign a transaction through the wallet every time.

Another type permission is to give write access to another account.
This should be used to give permission to other smart contracts to write into the user's data.
For example, a NFT marketplace smart contract that allows users to post an update on a newly minted NFT.
Or a social network smart contract that allows users to create a new edge in their social graph.

### SocialDB API

The SocialDB contract implements three data methods: `get`, `set` and `keys`.
It also has methods for working with permissions, see [SocialDB README](https://github.com/NearSocial/social-db#permissions) for details.

#### Storing data

The top level keys of the objects should be account IDs under which the data is stored. Those accounts are covering storage for the underlying data.

The predecessor_id or the signer public key should have permission to write under those keys.
If the predecessor_id matches the top level key, then it can write any data under that key, as long as it has a permission or at least 1 yoctoNEAR is attached.

The attached deposit will be transferred to the first key. If the account doesn't exist, it will be created (the predecessor_id should match).

```rust
#[payable]
pub fn set(&mut self, data: Value);
```

Arguments:
- `data` is an object to store. The leaf values should be strings or null values. String values will be added, while null values will be deleted.

Examples:

```js
set({
  data: {
    "alex.near": {
      "profile": {
        "name": "Alex",
        "image": {
          "url": "https://gkfjklgdfjkldfg"
        }
      },
    }
  }
})

set({
  data: {
    "alex.near": {
      "graph": {
        "follow": {
          "root.near": "",
          "bob.near": "",
        }
      }
    }
  }
})
```

#### Reading data

Returns the data for a list of given key patterns.
It takes one or more path patterns as arguments, and returns the matching data.
The path pattern is a string that can contain wildcards.
For example:
- `alice.near/profile/**` will match the entire profile data of account `alice.near`.
- `alice.near/profile/*` will match all the fields of the profile, but not the nested objects.
- `alice.near/profile/name` will match only the name field of the profile.
- `*/widget/*` will match all the components of all the accounts.

```rust
pub struct GetOptions {
    pub with_block_height: Option<bool>,
    pub with_node_id: Option<bool>,
    pub return_deleted: Option<bool>,
}

pub fn get(self, keys: Vec<String>, options: Option<GetOptions>) -> Value;
```

Arguments:
- `keys` - an array of key patterns to return.
- `options` - optional argument to specify options.

Options:
- `with_block_height` - if true, for every value and a node will add the block height of the data with the key `:block`.
- `with_node_id` - if true, for every node will add the node index with the key `:node`.
- `return_deleted` - if true, will include deleted keys with the value `null`.

Returns the aggregated JSON object.

Examples:

```js
get({keys: ["alex.near/profile/name"]})

get({keys: ["alex.near/profile/name", "root.near/profile/name"]})

get({keys: ["alex.near/profile/name", "alex.near/profile/description"]})

get({keys: ["alex.near/profile/tags/*"]})

get({keys: ["alex.near/profile/**"]})

get({keys: ["*/widget/*"]})

get({keys: ["alex.near/profile/tags/*"], options: {return_deleted: true}})
```

#### Reading keys

The `keys` method allows to get the list of keys that match the path pattern.
It's useful for querying the data without reading values.
It also has an additional `options` field that can be used to specify the return type and whether to return deleted keys.
For example:
- `alice.near/profile/*` will return the list of all the fields of the profile, but not the nested objects.
- `*/profile/image/nft` will return the list of all the accounts that have an NFT image in their profile.
- `alice.near/widget/*` with `return_deleted` option will return the list of all the component names of the account, including the deleted ones.
- `alice.near/widget/*` with `return_type` equal to `BlockHeight` will return the list of all the component names of the account and the value will be the block height when the widget was last updated.
- Note `**` is not supported by the `keys` method.

```rust
pub enum KeysReturnType {
    True,
    BlockHeight,
    NodeId,
}

pub struct KeysOptions {
    pub return_type: Option<KeysReturnType>,
    pub return_deleted: Option<bool>,
}

pub fn keys(self, keys: Vec<String>, options: Option<KeysOptions>) -> Value;
```

Arguments:
- `keys` - an array of key patterns to return.
- `options` - optional argument to specify options.

Options:
- `return_type` - if `BlockHeight`, will return the block height of the key instead of `true`, if `NodeId`, will return the node index of the key instead of `true`.
- `return_deleted` - if true, will include deleted keys.

Returns the aggregated JSON object.

Examples:

```js
keys({keys: ["alex.near/profile/*"]})

keys({keys: ["*/profile/image/nft"]})

keys({keys: ["alex.near/widget/*"], options: {return_deleted: true}})

keys({keys: ["alex.near/widget/*"], options: {return_type: "BlockHeight"}})
```

## Near Social

Now as you are familiar with the SocialDB contract, let's dive into [near.social](https://near.social)

### Near Social VM

The Near Social VM is a virtual machine that executes the components' code.
It's a sandboxed environment that allows to render components in a secure way.

I highly recommend getting yourself familiar with [ReactJS](https://reactjs.org/) and go through the [React tutorial](https://reactjs.org/tutorial/tutorial.html).
It will help you to understand how to use components better.

Components are like a React functional components, but with omitted function declaration.
For example, in a React you would write:
```jsx
function MyComponent(props) {
  return <div>Hello, {props.username}!</div>;
}
```

But in the Near Social VM you only need to write the body of the function:
```jsx
return <div>Hello, {props.username}!</div>;
```

Note, components are executed in a synchronous way, and the VM doesn't support await/async operations.
Instead, async operations like `fetch` or `Social.get` are internally handled by the VM, and the VM updates the component's state when the operation is finished.
It's similar to use React's `useEffect` combined with `useState`.

A common read-only component consists of the following parts:
- **Preparing input**. E.g. taking data from passed in properties or getting it from the context (e.g. the signed in account ID).
- **Fetching data**. E.g. fetching the data from the SocialDB contract.
- **Processing data**. E.g. filtering the data, sorting it, etc.
- **Rendering**. E.g. rendering the data using React components.

Not all components have to fetch data from the SocialDB contract. Some components can be completely static. Let's dive into each part.

#### Preparing input

Similar to a React component, the component receives the input in the object `props`.
If the component is a child of another component, the parent component can pass the data to the child component.
The props can contain: data, functions or React components.
The data will be a copy of the data passed to the component, so if the component changes the data, it won't affect the parent component.

Another object that is available to the component is `context`.
Currently, it only contains a single field `accountId` that contains the account ID of the signed-in user or `undefined` otherwise.

A common example preparing the input is the following:
```jsx
const accountId = props.accountId ?? context.accountId;
```

#### Fetching data

See Near Social VM APIs section for the list of available APIs.

Since the VM is synchronous, you should schedule all data that you need to fetch before processing it.
This will issue all promises in parallel and will update rerender the component whenever any of the promises is resolved.

You can build a component that either fetches the data or renders the given data.
For example, we want to fetch the profile for the `accountId` or use the given `profile` if it's passed in the props.
```jsx
const profile = props.profile ?? Social.getr(`${accountId}/profile`);

if (profile === null) {
  return "Loading...";
}
```

Comparing to the React components, `Social.getr` is not a hook, so you can return the value from the component at any time.
Even if you have more fetches after this.

The value returned by `Social.getr` will be globally cached for the duration of the web session, and it's also cached by the component's VM.
So if you call `Social.getr` multiple times with the same key, it will return the same value immediately.

#### Processing data

Now you have the `profile` object fetched. Sometimes you need to process the data or just extract some data.

For example, we want to get the name and extract the list of tags from the profile:
```jsx
const name = profile.name || "No-name profile";
const tags = Object.keys(profile.tags ?? {});
```

If the data processing is expensive, you can wrap it in a function and call it only when the data is changed or cache it in the `state`. We'll discuss it later.

#### Rendering

Now you have the data ready to be rendered.
You can use most React components to render the data.
But also you can embed other components.
[near.social](https://near.social) doesn't allow specifying custom CSS classes, but provides a standard [Bootstrap 5](https://getbootstrap.com/docs/5.2/getting-started/introduction/) CSS classes.

We can render the profile object and also include a list of tags:
```jsx
return (
  <div className="d-inline-block">
    <a
      href={`#/mob.near/widget/ProfilePage?accountId=${accountId}`}
      className="text-decoration-none link-dark"
    >
      <Widget
        src="mob.near/widget/ProfileImage"
        props={{
          profile,
          accountId,
          className: "float-start d-inline-block me-2",
        }}
      />
      <div className="d-inline-block" style={{ maxWidth: "16em" }}>
        <div className="text-truncate">
          {name}
        </div>
        <div className="d-flex">
          <div className="d-inline-block text-secondary text-truncate">
            @{accountId}
          </div>
        </div>
        {tags.length > 0 && (
          <div className="text-truncate">
            {tags.map((tag) => (
              <span className="me-1 mb-1 badge bg-secondary">#{tag}</span>
            ))}
          </div>
        )}
      </div>
    </a>
  </div>
);
```

You can notice that we use the `Widget` component to embed another component:
```jsx
<Widget
  src="mob.near/widget/ProfileImage"
  props={{
    profile,
    accountId,
    className: "float-start d-inline-block me-2",
  }}
/>
```

The `Widget` component takes the `src` and `props` parameters.
- `src` is the component's name. It should be full path to the component, e.g. `mob.near/widget/ProfileImage`.
- `props` is the object with the props that will be passed to the component.

In our case we use `mob.near/widget/ProfileImage` component to render the profile image, and we pass the `profile` object, so that component doesn't need to fetch it again.

The full source is available in [mob.near/widget/ProfileDocsExample](https://near.social/#/mob.near/widget/WidgetSource?src=mob.near/widget/ProfileDocsExample)

### Component's state

Similar to React components, components have the state.
But instead of multiple state object that can be created using `useState` hooks, the component has a single state object called `state`.

By default, the `state` equals to `undefined` and needs to be initialized either with `State.init` or `State.update` functions.

The `State.init` function takes the initial state object, and will be no-op if the state is already initialized.

The `State.update` function will trigger the state update, and the component will be re-rendered.
It also has an optional argument, the object that will be added to the `state` object using `Object.assign`.

When state is initialized, you can change properties of the `state` object directly and then call `State.update()` to trigger re-rendering with the new values.

#### Controlled components

One of the reasons why you need the state is to have controlled input components.
For example, you want to have an input to enter an account ID.
The account ID can only contain certain characters (e.g. no uppercase), so when a user enters an uppercase character, you want to convert it to lowercase and remove all non-valid ones.

So you can create the following component:
```jsx
State.init({ accountId: "" });

return (
  <input
    type="text"
    className="form-control"
    value={state.accountId}
    onChange={(e) => {
      const accountId = e.target.value.toLowerCase().replace(/[^a-z0-9_.-]/g, "");
      State.update({ accountId });
    }}
  />
);
```

#### Caching data processing

Another reason why you need the state is to cache the data. For example, you want to fetch an expansive data, the process it, but don't do it on every re-render.
You can do it like this:
```jsx
if (!state) {
  // Fetch the data and process it.
  const tags = fetchAndComputeTags();
  
  if (tags !== null) {
    State.init({ tags });
  }
}
```

You can see a more complicated data processing example in [mob.near/widget/TagsEditor](https://near.social/#/mob.near/widget/WidgetSource?src=mob.near/widget/TagsEditor)

### Committing data

The components can commit data to SocialDB. To simplify the process a custom component `CommitButton` is provided.

The `CommitButton` component has three custom props:
- `data` - the data to commit. It can be any valid JSON-serializable object. The data doesn't have to start with the `accountId` prefix, it will be added automatically.
- `onClick` - the callback that will be called when the user clicks the button, but before the commit dialog is shown.
- `onCommit` - the callback that will be called when the user commits the data.

For example, we can create a notepad component. It will load the note from the `experimental/note` key, and will allow to edit it and then save it.
```jsx
const accountId = context.accountId;

if (!accountId) {
  return "Please sign in with NEAR wallet";
}

const note = Social.get(`${accountId}/experimental/note`);

if (note === null) {
  return "Loading";
}

State.init({ note: note || "" });

return (
  <div>
    <div className="mb-2">
      <h4>Notepad</h4>
      <textarea
        type="text"
        rows={10}
        className="form-control"
        value={state.note}
        onChange={(e) => State.update({ note: e.target.value })}
      />
    </div>
    <CommitButton data={{ experimental: { note: state.note } }}>
      Save note
    </CommitButton>
  </div>
);
```

The `CommitButton` component just takes the `data` object and prompts the user to commit it to the SocialDB.

Notes:

- In the future a commit action will be available, so a user doesn't have to click on the `CommitButton` and the data can be committed automatically.
- Previously the commit action was always redirecting to the wallet for signing, so the cache was completely refreshed. But currently, the commit button doesn't always redirect to the wallet, so the cache is not always refreshed. We're working on the solution to automatically invalidate the affected cache, but it's not yet implemented.

'''
'''--- docs/tutorial/hello-near.md ---
---
id: interaction
title: Smart Contract Interaction
---

Your frontend can interact with different blockchains using the built-in Discovery API. Let's see how to create an application that reads and stores a greeting from a NEAR smart contract. 

![widgets](@site/static/docs/hello-near-logedin.png)
*View of our Hello Near app when the user is logged-in*

:::info
Check the finished example at [near.social code page](https://near.social/#/mob.near/widget/WidgetSource?src=gagdiez.near/widget/HelloNear).
:::

---

## The Contract

We have deployed a `Hello World` smart contract in the NEAR network at `hello.near-examples.near`. The contract exposes two methods:
- `set_greeting(greeting: string): void`, which accepts a greeting and stores it in the contract state.
- `get_greeting(): string` which returns the stored greeting.

---

## Retrieving the Greeting
Since we want to interact with the NEAR network, we will use the `Near` object from the Discovery API.

```ts
const contract = "hello.near-examples.near";
const greeting = Near.view(contract, "get_greeting", {});

return <div>{greeting} World</div>;
```

Assuming the contract is storing `"Hello"`, this will render a simple:

```json
Hello World
```

---

## Changing the Greeting
To modify the greeting, we simply need to use `Near.call` to call the `set_greeting` method. This however, requires us to have a frontend in which the user can input the new greeting.

Lets create it in two steps:
1. Build the HTML that will be rendered
2. Add the logic to handle the method call

<hr class="subsection" />

### 1. HTML Components
Use the following code to create a simple frontend, composed by a title, an input form to change the greeting, and a button to submit the change.

```js
const contract = "hello.near-examples.near";
const greeting = Near.view(contract, "get_greeting", {});

// Define components
const greetingForm = (
  <>
    <div class="border border-black p-3">
      <label>Update greeting</label>
      <input placeholder="Howdy" onChange={onInputChange} />
      <button class="btn btn-primary mt-2" onClick={onBtnClick}>
        Save
      </button>
    </div>
  </>
);

const notLoggedInWarning = <p> Login to change the greeting </p>;

// Render
return (
  <>
    <div class="container border border-info p-3">
      <h3 class="text-center">
        The contract says:
        <span class="text-decoration-underline"> {greeting} </span>
      </h3>

      <p class="text-center py-2">
        Look at that! A greeting stored on the NEAR blockchain.
      </p>

      {context.accountId ? greetingForm : notLoggedInWarning}
    </div>
  </>
);
```

:::info Relevant HTML
There are two important things to notice in the code above:

1. **onChange & onClick**: We have prepared our `<input>` and `<button>` to act when something happens. Particularly, we will build two methods: one when the input changes, and one when the button is pressed.

2. **context.accountId**: We check if `context.accountId` is set, which tells us if the user has logged in using their NEAR account, and thus can interact with NEAR contracts.
:::

<hr class="subsection" />

### 2. Handling User's Input
Having our component's view ready, we now need to define the logic for when the user inputs a new greeting and presses the `Submit` button. This is, we need to define the `onInputChange` and `onBtnClick` methods.

#### onInputChange
When the user inputs a new greeting, we want to store it somewhere until the `Submit` button is pressed, for this, we can use the [application's State](../discovery/api/state.md).

In Discovery, the state is initialized through `State.init`, updated with `State.update`, and accessed through the `state` variable (notice the lowercase). Lets store the new greeting in the App's state:

```jsx
State.init({ new_greeting: "" });

const onInputChange = ({ target }) => {
  State.update({ new_greeting: target.value });
};
```

#### onBtnClick
The only thing left to do, is to handle when the user clicks the `Submit` button. What we want is to check if the user changed the greeting, and submit it to the contract.

```jsx
const onBtnClick = () => {
  if (!state.new_greeting) {
    return;
  }

  Near.call(contract, "set_greeting", {
    greeting: state.new_greeting,
  });
};
```

---

## Complete Example
We have deployed a complete version of this example on the NEAR blockchain, so you can see its code and play with it.

:::tip
- **Code**: Check the code of this example at the [near.social code page](https://near.social/#/mob.near/widget/WidgetSource?src=gagdiez.near/widget/HelloNear).

- **Try It**: Interact with the application at the [near.social page](https://near.social/#/gagdiez.near/widget/HelloNear).
:::

'''
'''--- docs/tutorial/quickstart.md ---
---
id: quickstart
title: Quickstart
---

NEAR Discovery allows you to create a decentralized frontend for your dApp by creating and composing components. In this quickstart tutorial we will create a simple application, that takes a name as input and renders a friendly greeting.

![img](@site/static/docs/quickstart-1.png)

---

## Editors
In order to create your decentralized frontend there is a variety of editors you can choose from:

- [VSCODE Extension](https://marketplace.visualstudio.com/items?itemName=near-protocol.near-social-ide)
- [NEAR Social Editor](https://near.social/#/edit)
- [Blockchain Operative System Editor](https://bos.gg/#/edit)

---

## Creating Your First Component

To create a `widget` you only need to write valid JSX code, i.e. a mixture of HTML and JS. Let's see how simple it is to create and preview your first component.

<hr class="subsection" />

### Create the Component
In any of the editors, create a new file (`Add` button in the web editors) and name it `Greeter`, then, paste the following code on the editor:

```ts
let greeting = "Have a great day";

return (
  <>
    <div class="container border border-info p-3 text-center">
      <h1>Hello {props.name}</h1>

      <p> {greeting} </p>
    </div>
  </>
);
```

<hr class="subsection" />

### Preview
To preview how your component will work, go first to the `props` tab on your editor (or edit the `props.json` file if you are using Visual Studio Code) and add the following property:

```json
{"name": "Anna"}
```

After, simply press the `Preview` button to render the preview of your component!

![img](@site/static/docs/quickstart-editor.png)
*Creating a Hello World component using the [NEAR Social Editor](https://near.social/#/edit)*

<hr class="subsection" />

### Publish
Click on the `Save Widget` button to store your application in the NEAR Blockchain. If the button is not available, make sure you have signed-in to your [NEAR wallet](https://wallet.near.org) using the `Sign In` button of the editor.

![img](@site/static/docs/quickstart-save.png)
*The NEAR Social Editor asking if we want to store the component*

Accept the transaction in your NEAR Wallet, so the component gets stored in the NEAR blockchain.

<hr class="subsection" />

## Using Your dApp
Once your application is published, it will be ready to be combined with other components, or rendered as a standalone application  using the Discovery Viewer. 

<hr class="subsection" />

### Composition
To use your application inside of another one, simply invoke it using a `<Widget>` component. This will fetch the code from the NEAR blockchain, and include it inside of your new application.

```ts
const user = "gagdiez.near";

return (
  <>
    <h3> Composition </h3>
    <p> Components can be composed </p>
    <hr />

    <Widget src={`${user}/widget/Greetings`} props={props} />
  </>
);
```

![img](@site/static/docs/quickstart-composition.png)
*Rendering of the Composition*

:::info
Notice that we are passing the input `props` as an `object` to the `Greetings` component.
:::

<hr class="subsection" />

### Embedded
To render your component as a standalone application, go to `https://near.social/#/<your-username>/widget/Greeter?name=Anna`.

You can also embed your component in other websites, for example, here we simply have an iframe which `source` is `https://near.social/#/embed/gagdiez.near/widget/Greeter?name=Anna`:

<iframe style={{"width": "100%", "height":"130px"}} src="https://near.social/#/embed/gagdiez.near/widget/Greeter?name=Anna"></iframe>
<em>This component is being rendered inside an `iframe`</em>

:::info
Notice that we are passing the `props.name` as a `GET` parameter in the `url`.
:::
'''
'''--- docusaurus.config.js ---
// @ts-check
// Note: type annotations allow type checking and IDEs autocompletion

const lightCodeTheme = require('prism-react-renderer/themes/github');
const darkCodeTheme = require('prism-react-renderer/themes/dracula');
const path = require('path');

/** @type {import('@docusaurus/types').Config} */
const config = {
  title: 'NEAR Discovery Docs',
  tagline: 'Developer Documentation',
  url: 'https://discovery.near-docs.io',
  baseUrl: '/',
  onBrokenLinks: 'throw',
  onBrokenMarkdownLinks: 'warn',
  favicon: 'img/favicon.ico',

  // GitHub pages deployment config.
  // If you aren't using GitHub pages, you don't need these.
  organizationName: 'near', // Usually your GitHub org/user name.
  projectName: 'social-docs', // Usually your repo name.

  // Even if you don't use internalization, you can use this field to set useful
  // metadata like html lang. For example, if your site is Chinese, you may want
  // to replace "en" with "zh-Hans".
  i18n: {
    defaultLocale: 'en',
    locales: ['en'],
  },

  presets: [
    [
      'classic',
      /** @type {import('@docusaurus/preset-classic').Options} */
      ({
        docs: {
          sidebarPath: require.resolve('./sidebars.js'),
          routeBasePath: '/',
          // Please change this to your repo.
          // Remove this to remove the "edit this page" links.
          editUrl:
            'https://github.com/near/social-docs/tree/main/',
        },
        theme: {
          customCss: require.resolve('./src/css/custom.css'),
        },
      }),
    ],
  ],

  themes: ["@saucelabs/theme-github-codeblock",
    [
      require.resolve("@easyops-cn/docusaurus-search-local"),
      {
        hashed: true,
        indexPages: false,
        indexBlog: false,
        docsRouteBasePath: ['/'],
        docsDir: ["./docs"],
        language: ["en"],
      },
    ],
  ],

  themeConfig:
    /** @type {import('@docusaurus/preset-classic').ThemeConfig} */
    ({
      navbar: {
        title: 'Discovery',
        logo: {
          alt: 'Discovery',
          src: 'img/logo.svg',
          srcDark: 'img/logo_dark.svg',
        },
        items: [
          {
            type: 'doc',
            docId: 'welcome',
            position: 'left',
            label: 'Documentation',
          },
          {
            type: 'doc',
            docId: 'discovery/api/home',
            position: 'left',
            label: 'API',
          },
          {
            type: 'doc',
            docId: 'tutorial/quickstart',
            position: 'left',
            label: 'Tutorial',
          },
          {
            href: 'https://github.com/nearsocial',
            label: 'GitHub',
            position: 'right',
          },
        ],
      },
      footer: {
        style: 'dark',
        links: [
          {
            title: 'Docs',
            items: [
              {
                label: 'NEAR Social',
                to: '/',
              },
              {
                label: 'NEAR Docs',
                href: 'https://docs.near.org',
              },
            ],
          },
          {
            title: 'Community',
            items: [
              {
                label: 'Stack Overflow',
                href: 'https://stackoverflow.com/questions/tagged/nearprotocol',
              },
              {
                label: 'Discord',
                href: 'https://near.chat',
              },
              {
                label: 'Twitter',
                href: 'https://twitter.com/docusaurus',
              },
            ],
          },
          {
            title: 'More',
            items: [
              {
                label: 'GitHub',
                href: 'https://github.com/near/social-docs',
              },
            ],
          },
        ],
        copyright: `Copyright © ${new Date().getFullYear()} NEAR Protocol.`,
      },
      prism: {
        theme: lightCodeTheme,
        darkTheme: darkCodeTheme,
        additionalLanguages: [
          "rust", "java", "python", "ruby", "go", "toml"
        ]
      },
    }),
    plugins: [path.join(__dirname, '/plugins/monaco-editor')],
};

module.exports = config;

'''
'''--- mlc_config.json ---
{
  "ignorePatterns": [
    {
      "pattern": "^/",
    },
    {
      "pattern": "^https://near-node.zendesk.com"
    },
    {
      "pattern": "^https://rpc.betanet.near.org"
    }
  ],
  "replacementPatterns": [
  ],
  "timeout": "20s",
  "retryOn429": true,
  "retryCount": 5,
  "fallbackRetryDelay": "30s",
  "aliveStatusCodes": [200, 206]
}

'''
'''--- package.json ---
{
  "name": "",
  "version": "0.0.0",
  "private": true,
  "scripts": {
    "docusaurus": "docusaurus",
    "start": "docusaurus start",
    "build": "docusaurus build",
    "swizzle": "docusaurus swizzle",
    "deploy": "docusaurus deploy",
    "clear": "docusaurus clear",
    "serve": "docusaurus serve",
    "write-translations": "docusaurus write-translations",
    "write-heading-ids": "docusaurus write-heading-ids"
  },
  "dependencies": {
    "@docusaurus/core": "2.2.0",
    "@docusaurus/preset-classic": "2.2.0",
    "@easyops-cn/docusaurus-search-local": "^0.33.6",
    "@mdx-js/react": "^1.6.22",
    "@saucelabs/theme-github-codeblock": "^0.1.1",
    "clsx": "^1.2.1",
    "gleap": "^7.0.29",
    "monaco-editor": "^0.34.1",
    "prism-react-renderer": "^1.3.5",
    "react": "^17.0.2",
    "react-dom": "^17.0.2",
    "react-monaco-editor": "^0.51.0",
    "url": "^0.11.0"
  },
  "devDependencies": {
    "@docusaurus/module-type-aliases": "2.2.0",
    "file-loader": "^6.2.0",
    "worker-loader": "^3.0.8",
    "monaco-editor-webpack-plugin": "^7.0.1"
  },
  "browserslist": {
    "production": [
      ">0.5%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "engines": {
    "node": ">=16.14"
  }
}
'''
'''--- plugins/monaco-editor/index.js ---
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

const MonacoWebpackPlugin = require('monaco-editor-webpack-plugin');

module.exports = function(context, options) {
  return {
    name: 'monaco-editor',
    configureWebpack(config, isServer) {
      return {
        module: {
          rules: [
            {
              test: /\.ttf$/,
              use: ['file-loader'],
            },
          ],
        },
        plugins: [
          new MonacoWebpackPlugin({
            languages: ['javascript', 'json'],
          }),
        ],
      };
    },
  };
};
'''
'''--- sidebars.js ---
// @ts-check

/** @type {import('@docusaurus/plugin-content-docs').SidebarsConfig} */
const sidebars = {
  // But you can create a sidebar manually
  tutorialSidebar: [
    'welcome',
    {
      "type": "html",
      "value": "<hr/>"
    },
    {
      "type": "html",
      "value": "<span class='menu__link'><b><small> Building Applications </small></b></span>"
    },
    'discovery/home',
    {
      "type": "category",
      "label": "Built-in Components",
      "link": {
        "type": "doc",
        "id": "discovery/components/home"
      },
      "items": [
        'discovery/components/widgets',
        'discovery/components/ipfs',
        'discovery/components/files',
        'discovery/components/markdown',
        'discovery/components/overlay-trigger',
        'discovery/components/infinite-scroll',
        'discovery/components/typeahead',
        'discovery/components/styled',
        'discovery/components/tooltip',
      ]
    },
    {
      "type": "category",
      "label": "Discovery API",
      "link": {
        "type": "doc",
        "id": "discovery/api/home"
      },
      "items": [
        'discovery/api/cache',
        'discovery/api/clipboard',
        'discovery/api/fetch',
        'discovery/api/near',
        'discovery/api/primitives',
        'discovery/api/social',
        'discovery/api/state',
        'discovery/api/storage',
      ]
    },
    {
      "type": "html",
      "value": "<hr/>"
    },
    {
      "type": "html",
      "value": "<span class='menu__link'><b><small> Tutorials </small></b></span>"
    },
    'tutorial/quickstart',
    'tutorial/interaction',
    {
      "type": "html",
      "value": "<hr/>"
    },
    {
      "type": "html",
      "value": "<span class='menu__link'><b><small> Tools </small></b></span>"
    },
    {
      "type": "link",
      "label": "Discovery CLI",
      "href": "https://github.com/FroVolod/near-social"
    },
    {
      "type": "link",
      "label": "VSCODE Extension",
      "href": "https://github.com/near/near-vscode"
    },
    {
      "type": "html",
      "value": "<hr/>"
    },
    {
      "type": "html",
      "value": "<span class='menu__link'><b><small> NEAR Social </small></b></span>"
    },
    'social/intro',
    'social/contract',
    'social/standards',
    'social/tech',
  ],
};

module.exports = sidebars;

'''
'''--- src/components/social-widget.js ---
import React from "react";
import BrowserOnly from '@docusaurus/BrowserOnly';

export function WidgetEditor({ children, id=1, height="160px", properties  }) {
  let props = "";
  for(const prop in properties){
    props += `${prop}=${properties[prop]}`
  }

  const uri = "https://near.social/#/embed/zavodil.near/widget/remote-code?"+props;

  const code = children.props.children.props.children;

  return (
    <BrowserOnly fallback={<div>Loading...</div>}>
      {() => {
        const MonacoEditor = require('react-monaco-editor').default;

        return <>
          <div class="monaco">
            <MonacoEditor
              height="250"
              value={code}
              options={{
                minimap: { enabled: false },
                wordWrap: 'on',
                scrollBeyondLastLine: false,
                fontSize: '14px',
                renderLineHighlight: false,
                hideMargin: true,
                glyphMargin: false,
                folding: false,
                lineNumbers: false,
                lineDecorationsWidth: 0,
                lineNumbersMinChars: 0,
                scrollBars: false,
              }}
              language={"javascript"}
              onChange={(newValue, event) => { document.getElementById(`ifm${id}`).src = `${uri}&code=${encodeURIComponent(newValue)}` }}
            />
          </div>
          <em> You can edit the code! </em>

          <div class="code_iframe">
            <h4>Preview</h4>
            <hr class="preview-border" />
            <iframe id={`ifm${id}`} src={`${uri}&code=${encodeURIComponent(code)}`} style={{height}}></iframe>
          </div>
        </>

      }}
    </BrowserOnly>
  )
}

export default WidgetEditor;
'''
'''--- src/css/custom.css ---
/**
 * Any CSS included here will be global. The classic template
 * bundles Infima by default. Infima is a CSS framework designed to
 * work well for content-centric websites.
 */

/* You can override the default Infima variables here. */
:root {
  --ifm-color-primary: #2e8555;
  --ifm-color-primary-dark: #29784c;
  --ifm-color-primary-darker: #277148;
  --ifm-color-primary-darkest: #205d3b;
  --ifm-color-primary-light: #33925d;
  --ifm-color-primary-lighter: #359962;
  --ifm-color-primary-lightest: #3cad6e;
  --ifm-code-font-size: 95%;
  --docusaurus-highlighted-code-line-bg: rgba(0, 0, 0, 0.1);
}

/* For readability concerns, you should choose a lighter palette in dark mode. */
[data-theme='dark'] {
  --ifm-color-primary: #25c2a0;
  --ifm-color-primary-dark: #21af90;
  --ifm-color-primary-darker: #1fa588;
  --ifm-color-primary-darkest: #1a8870;
  --ifm-color-primary-light: #29d5b0;
  --ifm-color-primary-lighter: #32d8b4;
  --ifm-color-primary-lightest: #4fddbf;
  --docusaurus-highlighted-code-line-bg: rgba(0, 0, 0, 0.3);
}

article {
  margin: .5em;
}

article img {
  max-width: 70%;
  margin: 0 auto;
  display: block;
}

/* Menu markers */
li hr {
  height: 4px;
  margin: 0.2em auto;
  width: 90%;
  border-width: 0;
}

[data-theme='light'] li hr {
  background-color: #f8f8f8;
}

[data-theme='dark'] li hr {
  background-color: #333;
}

.subsection {
  width: 50%;
  margin: 2.5em auto;
  height: 0.5px;
}

/* Feature list */
.features a[href^="http"]::after {
  content: "";
}

hr {
  height: 1px;
  border-radius: 0;
  margin: 3.5em 0;
}

.avatar {
  color: var(--ifm-font-color-base)
}

.avatar img {
  border-radius: 0%;
  display: block;
  height: var(--ifm-avatar-photo-size);
  overflow: hidden;
  width: var(--ifm-avatar-photo-size);
}

.avatar__photo {
  border-radius: 0%;
}

.navigate_title {
  text-align: center;
  margin-bottom: 1em;
  font-size: 2.5rem;
}

/* for image caption */
img+em, iframe+em {
  font-style: normal;
  display: inherit;
  text-align: center;
  font-size: 90%;
  margin: 0.5em 0 2rem 0;
}

.monaco+em {
  font-style: normal;
  display: inherit;
  text-align: right;
  font-size: 90%;
  margin: 0.5em 0 0 0;
}

/* Widget Editor */
.monaco {
  border-radius: 10px;
  background-color: #f6f8fa;
  padding: 1rem;
}

.code_iframe {
  border-radius: 10px;
  border: 1px solid #e6e6e6;
  padding: 1rem;
  overflow: hidden;
  margin: 2rem 0;
}

.code_iframe iframe{
  min-width: 100%;
  overflow: hidden;
}

.monaco-editor-background {
  background-color: #f6f8fa !important;
}

.preview-border{
  width: 100%;
  border: 0.6px solid #efefef;
  margin: -0.5rem 0 1.5rem 0;
}
'''
'''--- src/theme/Root.js ---
// https://docusaurus.io/docs/swizzling#wrapper-your-site-with-root

import React from 'react';
import useIsBrowser from '@docusaurus/useIsBrowser'; // https://docusaurus.io/docs/advanced/ssg#useisbrowser
import Gleap from "gleap"; // See https://gleap.io/docs/javascript/ and https://app.gleap.io/projects/62697858a4f6850036ae2e6a/widget

const GLEAP_API_KEY = 'K2v3kvAJ5XtPzNYSgk4Ulpe5ptgBkIMv';

// Default implementation, that you can customize
export default function Root({ children }) {
    const isBrowser = useIsBrowser();
    if (isBrowser) {
        Gleap.initialize(GLEAP_API_KEY);
    }
    return <>{children}</>;
}

'''
'''--- static/img/logo.svg ---
<svg height="20" viewBox="0 0 76 20" width="76" xmlns="http://www.w3.org/2000/svg" fill="#262626">
	<path d="m38.0449 4.17778v11.66662c0 .0889-.0666.1778-.1777.1778h-1.2223c-.5555 0-1.0888-.2889-1.4-.7555l-5.5111-8.51114.1778 4.24444v4.8667c0 .0889-.0667.1777-.1778.1777h-1.6c-.0889 0-.1777-.0666-.1777-.1777v-11.68892c0-.08889.0666-.17778.1777-.17778h1.2c.5556 0 1.0889.28889 1.4.75556l5.5111 8.48884-.1777-4.2444v-4.82222c0-.08889.0666-.17778.1777-.17778h1.6c.1334 0 .2.06667.2.17778z"></path>
	<path d="m54.444 16h-1.6889c-.1111 0-.2-.1111-.1555-.2222l4.4889-11.62224c.0444-.08889.1333-.15556.2222-.15556h2.1333c.1111 0 .2.06667.2223.15556l4.5111 11.62224c.0444.1111-.0445.2222-.1556.2222h-1.6889c-.0666 0-.1333-.0444-.1555-.1111l-3.6223-9.55557c-.0444-.13333-.2666-.13333-.3111 0l-3.6222 9.55557c-.0444.0667-.1111.1111-.1778.1111z"></path>
	<path d="m75.9557 15.7333-3.3778-4.3111c1.9111-.3555 3.0222-1.64442 3.0222-3.6222 0-2.26667-1.4667-3.8-4.0889-3.8h-4.7111c-.1333 0-.2444.11111-.2444.24444 0 .88889.7111 1.6 1.6 1.6h3.1777c1.5778 0 2.3334.8 2.3334 1.97778s-.7334 1.97778-2.3334 1.97778h-4.4889c-.1333 0-.2444.11111-.2444.2444v5.7778c0 .0889.0667.1778.1778.1778h1.6c.0889 0 .1778-.0667.1778-.1778v-4.2889h1.8444l2.9333 3.8223c.3111.4222.8.6444 1.3334.6444h1.2222c.0889 0 .1555-.1556.0667-.2667z"></path>
	<path d="m49.3776 4h-7.4444c-.1334 0-.2223.08889-.2223.22222 0 .88889.7334 1.62222 1.6223 1.62222h6.0444c.0889 0 .1778-.06666.1778-.17777v-1.51111c-.0222-.08889-.0889-.15556-.1778-.15556zm0 10.1556h-5.5555c-.0889 0-.1778-.0667-.1778-.1778v-3c0-.0889.0666-.1778.1778-.1778h5.1333c.0889 0 .1778-.0667.1778-.1778v-1.51109c0-.08889-.0667-.17778-.1778-.17778h-7c-.1333 0-.2445.11111-.2445.24445v6.55552c0 .1334.1112.2445.2445.2445h7.4222c.0889 0 .1778-.0667.1778-.1778v-1.5111c-.0222-.0667-.0889-.1333-.1778-.1333z"></path>
	<path d="m16.0444 1.02222-4.1777 6.2c-.2889.42222.2666.93334.6666.57778l4.1111-3.57778c.1112-.08889.2667-.02222.2667.13334v11.17774c0 .1556-.2.2223-.2889.1111l-12.44442-14.888844c-.4-.488889-.97778-.755556-1.62222-.755556h-.44445c-1.155554 0-2.11111.955556-2.11111 2.13333v15.73337c0 1.1777.955556 2.1333 2.13333 2.1333.73334 0 1.42223-.3778 1.82223-1.0222l4.17777-6.2c.28889-.4222-.26666-.9334-.66666-.5778l-4.11111 3.5556c-.11112.0888-.26667.0222-.26667-.1334v-11.15553c0-.15556.2-.22223.28889-.11111l12.44442 14.88884c.4.4889 1 .7556 1.6222.7556h.4445c1.1778 0 2.1333-.9556 2.1333-2.1333v-15.73337c-.0222-1.177774-.9778-2.13333-2.1555-2.13333-.7334 0-1.4223.377778-1.8223 1.02222z"></path>
</svg>
'''
'''--- static/img/logo_dark.svg ---
<svg height="20" viewBox="0 0 76 20" width="76" xmlns="http://www.w3.org/2000/svg" fill="#f0f0f0">
	<path d="m38.0449 4.17778v11.66662c0 .0889-.0666.1778-.1777.1778h-1.2223c-.5555 0-1.0888-.2889-1.4-.7555l-5.5111-8.51114.1778 4.24444v4.8667c0 .0889-.0667.1777-.1778.1777h-1.6c-.0889 0-.1777-.0666-.1777-.1777v-11.68892c0-.08889.0666-.17778.1777-.17778h1.2c.5556 0 1.0889.28889 1.4.75556l5.5111 8.48884-.1777-4.2444v-4.82222c0-.08889.0666-.17778.1777-.17778h1.6c.1334 0 .2.06667.2.17778z"></path>
	<path d="m54.444 16h-1.6889c-.1111 0-.2-.1111-.1555-.2222l4.4889-11.62224c.0444-.08889.1333-.15556.2222-.15556h2.1333c.1111 0 .2.06667.2223.15556l4.5111 11.62224c.0444.1111-.0445.2222-.1556.2222h-1.6889c-.0666 0-.1333-.0444-.1555-.1111l-3.6223-9.55557c-.0444-.13333-.2666-.13333-.3111 0l-3.6222 9.55557c-.0444.0667-.1111.1111-.1778.1111z"></path>
	<path d="m75.9557 15.7333-3.3778-4.3111c1.9111-.3555 3.0222-1.64442 3.0222-3.6222 0-2.26667-1.4667-3.8-4.0889-3.8h-4.7111c-.1333 0-.2444.11111-.2444.24444 0 .88889.7111 1.6 1.6 1.6h3.1777c1.5778 0 2.3334.8 2.3334 1.97778s-.7334 1.97778-2.3334 1.97778h-4.4889c-.1333 0-.2444.11111-.2444.2444v5.7778c0 .0889.0667.1778.1778.1778h1.6c.0889 0 .1778-.0667.1778-.1778v-4.2889h1.8444l2.9333 3.8223c.3111.4222.8.6444 1.3334.6444h1.2222c.0889 0 .1555-.1556.0667-.2667z"></path>
	<path d="m49.3776 4h-7.4444c-.1334 0-.2223.08889-.2223.22222 0 .88889.7334 1.62222 1.6223 1.62222h6.0444c.0889 0 .1778-.06666.1778-.17777v-1.51111c-.0222-.08889-.0889-.15556-.1778-.15556zm0 10.1556h-5.5555c-.0889 0-.1778-.0667-.1778-.1778v-3c0-.0889.0666-.1778.1778-.1778h5.1333c.0889 0 .1778-.0667.1778-.1778v-1.51109c0-.08889-.0667-.17778-.1778-.17778h-7c-.1333 0-.2445.11111-.2445.24445v6.55552c0 .1334.1112.2445.2445.2445h7.4222c.0889 0 .1778-.0667.1778-.1778v-1.5111c-.0222-.0667-.0889-.1333-.1778-.1333z"></path>
	<path d="m16.0444 1.02222-4.1777 6.2c-.2889.42222.2666.93334.6666.57778l4.1111-3.57778c.1112-.08889.2667-.02222.2667.13334v11.17774c0 .1556-.2.2223-.2889.1111l-12.44442-14.888844c-.4-.488889-.97778-.755556-1.62222-.755556h-.44445c-1.155554 0-2.11111.955556-2.11111 2.13333v15.73337c0 1.1777.955556 2.1333 2.13333 2.1333.73334 0 1.42223-.3778 1.82223-1.0222l4.17777-6.2c.28889-.4222-.26666-.9334-.66666-.5778l-4.11111 3.5556c-.11112.0888-.26667.0222-.26667-.1334v-11.15553c0-.15556.2-.22223.28889-.11111l12.44442 14.88884c.4.4889 1 .7556 1.6222.7556h.4445c1.1778 0 2.1333-.9556 2.1333-2.1333v-15.73337c-.0222-1.177774-.9778-2.13333-2.1555-2.13333-.7334 0-1.4223.377778-1.8223 1.02222z"></path>
</svg>
'''
'''--- static/index.html ---
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="UTF-8" />
    <meta
      http-equiv="refresh"
      content="0; url=https://docs.near.org/discovery"
    />
    <script type="text/javascript">
      window.location.href = 'https://docs.near.org/discovery';
    </script>
    <title>NEAR</title>
  </head>
  <body>
    If you are not redirected automatically, follow this
    <a href="https://docs.near.org/discovery">link</a>.
  </body>
</html>

'''