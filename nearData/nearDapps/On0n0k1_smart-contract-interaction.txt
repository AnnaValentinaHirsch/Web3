*GitHub Repository "On0n0k1/smart-contract-interaction"*

'''--- README.md ---
# A simple NEAR Explorer

## About

This is just a small webpage that loads information about a NEAR Account.

Currently it only works for Testnet accounts.

Intended for developers interested in learning how a wallet app works.

## How to run

- Step 1: Install dependencies.

```bash
yarn install
```

- Step 2: Run.

```bash
npm run dev
```

- Step 3: Open a web browser and go for localhost:3000.
- Step 4: Offer a testnet account name and select "Search".
- Step 5: On the following page, you can press F12 to see all the loaded data. There will be **a lot**.

## Directory Structure

- ```'/components'```: React components for account, transaction history, etc.
- ```'/pages'```: Page structure. Index will be '/'. '/[network]/[account].js' will be '/[network]/[account]', where [] represents the value for each variable.

## More details

Check My [blog post](https://hackmd.io/@9YrH7KebTM2T6vr9eFW7Qg/SyPT1ZiRc);

'''
'''--- lib/db.js ---
import { Pool } from "pg";

let conn;

// This connection is always open.
// I should change it to open only when needed.
if(!conn){
    conn = new Pool({
        user: "public_readonly",
        password: "nearprotocol",
        host: "35.184.214.98",
        database: "testnet_explorer",
    });
}

export default conn;

'''
'''--- lib/near_functions/get_account.js ---
const { connect, keyStores } = require("near-api-js");

// example of attributes for account:
// {
//  amount: "169729350681362732317609208"
//  block_hash: "DaLBHuPmPy4odpKyrcoBjMwsRdtgX1q7vNS5yPWcSkBZ"
//  block_height: 94828593
//  code_hash: "11111111111111111111111111111111"
//  locked: "0"
//  storage_paid_at: 0
//  storage_usage: 182
// }

// Connects to near and returns basic information about given account.
//
// If an error happens when connecting. Returns an object like this:
//
// {
//     error: bool,
//     exception: String,
// }
//
// Where error is always true, and exception is the error type.
//
export default function get_account(account_name, network){
    // contract ID or account ID you want to find transactions details for
    // const CONTRACT_ID = "relayer.ropsten.testnet";
    const CONTRACT_ID = account_name;

    const keyStore = new keyStores.BrowserLocalStorageKeyStore();

    const config = {
        keyStore,
        networkId: network,
        // nodeUrl: "https://archival-rpc.testnet.near.org",
        nodeUrl: "https://rpc.testnet.near.org",
        walletUrl: "https://wallet.testnet.near.org",
        helperUrl: "https://helper.testnet.near.org",
        explorerUrl: "https://explorer.testnet.near.org",
    };

    return getAccount(CONTRACT_ID);

    async function getAccount(accountId) {
        const near = await connect(config);

        let response = false;

        try{
            response = await near.connection.provider.query({
                request_type: "view_account",
                finality: "final",
                account_id: accountId,
            });
            console.log(response);

        } catch (error) {
            console.log(JSON.stringify(error));

            response = {
                error: true,
                exception: error,
            }
        }

        // console.log(response);

        // return JSON.stringify(response);
        return response;
    }
}

'''
'''--- lib/near_functions/get_block_hash.js ---
import get_account from './get_account';

// Retrieves an account from the blockchain and returns it's hash.
// I think I will delete this. Don't think it's useful any more.
export default async function get_block_hash(accountId){
    const account = await get_account(accountId);

    // console.log("Getting hash from this:");
    // console.log(account);

    if (account.error === true) {
        // if it's an error. Return it.
        return account;
    }

    const hash = account.block_hash;

    return hash;
}

'''
'''--- lib/near_functions/get_fungible_tokens.js ---
import axios from 'axios';

// Currently unused function
//
// Implemented for /components/near_components/Assets
//
// Connect to the public database for near indexer and retrieves a list of transaction hashes associated with an account.
export default async function get_fungible_tokens(accountId){
    // console.log("accountId is ", accountId);
    let result = await axios.get(`/api/fungible_tokens/${accountId}`);

    if (result.status === 200){
        const hashes = result.data;
        // console.log(hashes);
        return hashes;
    }

    // console.log(result);

    return result;
}

'''
'''--- lib/near_functions/get_non_fungible_tokens.js ---
import axios from 'axios';

// Currently unused function
//
// Implemented for /components/near_components/Assets
//
// Connect to the public database for near indexer and retrieves a list of transaction hashes associated with an account.
export default async function get_fungible_tokens(accountId){
    // console.log("accountId is ", accountId);
    let result = await axios.get(`/api/non_fungible_tokens/${accountId}`);

    if (result.status === 200){
        const hashes = result.data;
        // console.log(hashes);
        return hashes;
    }

    // console.log(result);

    return result;
}

'''
'''--- lib/near_functions/get_transaction_from_hash.js ---
const { connect, keyStores } = require("near-api-js");

// Connects to the near blockchain and retrieves a transaction associated with a given account and hash.
export default async function get_transaction_from_hash(tx_hash, accountId){
    // Local storage for keys.
    const keyStore = new keyStores.BrowserLocalStorageKeyStore();

    // Configuration for testnet.
    const config = {
        keyStore,
        networkId: "testnet",
        nodeUrl: "https://archival-rpc.testnet.near.org",
        // nodeUrl: "https://rpc.testnet.near.org",
    };

    const near = await connect(config);

    // Retrieves transaction status for a given transaction hash.
    // const transaction = await near.connection.provider.txStatus(tx_hash, accountId);
    const transaction = await near.connection.provider.txStatus(
        tx_hash,
        accountId,
    );

    return transaction;
}

'''
'''--- lib/near_functions/get_transactions.js ---
import axios from 'axios';

// Connect to the public database for near indexer and retrieves a list of transaction hashes associated with an account.
export default async function get_transactions(accountId){
    // console.log("accountId is ", accountId);
    let result = await axios.get(`/api/transactions/${accountId}`);

    if (result.status === 200){
        const transactions = result.data;
        // console.log(hashes);
        return transactions;
    }

    // console.log(result);

    return result;
}

'''
'''--- next.config.js ---
/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
  output: 'standalone',
}

module.exports = nextConfig

'''
'''--- package.json ---
{
  "name": "smart-contract-attempt",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "docker-build": "docker build -t nextjs-docker .",
    "docker-run": "docker run -p 3000:3000 nextjs-docker",
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "axios": "^0.27.2",
    "near-api-js": "^0.45.1",
    "next": "12.2.0",
    "pg": "^8.7.3",
    "react": "18.2.0",
    "react-dom": "18.2.0"
  },
  "devDependencies": {
    "autoprefixer": "^10.4.7",
    "eslint": "8.19.0",
    "eslint-config-next": "12.2.0",
    "postcss": "^8.4.14",
    "tailwindcss": "^3.1.4"
  }
}

'''
'''--- pages/[network]/[account].js ---
import { useRouter } from 'next/router';
import { useEffect, useState } from 'react';
// import Test from '../../components/near-components/test.jsx';
import AccountInfo from '../../components/near_components/Account/Account.jsx';
import History from '../../components/near_components/History/History.jsx';

// Assets still being implemented.
import Assets from '../../components/near_components/Assets.jsx';

// The path to this page is /[network]/[account]
// Values for network and account will be picked by router.query
export default function Account() {
    const router = useRouter();

    const [network, setNetwork] = useState("");
    const [account, setAccount] = useState("");

    useEffect(() => {
        // At the first render, router queries are undefined.
        // So toLowerCase would return an error message once, and then stop.
        // That's why the useEffect.
        setNetwork(router.query.network.toLowerCase());
        setAccount(router.query.account);
    }, [router.isReady]);

    if (network === "") {
        return <div><p>Loading...</p></div>
    }

    return (
        <div>
            <AccountInfo network={network} account={account}/>
            <History accountId={account}/>
            {/* Assets implementation still unfinished */}
            {/* <Assets accountId={account}/> */}
        </div>
    )
}

// Not needed, unless there's need to fetch something from an api.
// export async function getServerSideProps({ params }) {
//     const req = await fetch(`http://localhost:3000/${params.id}.json`);
//     // const data = await req.json();

//     return {
//         props: { },
//     }
// }

'''
'''--- pages/_app.js ---
import '../styles/globals.css'

// Boilerplate for next
function MyApp({ Component, pageProps }) {
  return <Component {...pageProps} />
}

export default MyApp

'''
'''--- pages/api/fungible_tokens/[accountId].js ---
import conn from '../../../lib/db';

// Should retrieve fungible token list for a given account.
//
// Still unfinished.
//
export default async (req, res) => {

    if (req.method !== 'GET'){
        res.status(404).send("Invalid request type");
        console.log("Invalid request received. Method: ", req.method);
        return;
    }

    try {
        // console.log("req nom", req);
        console.log(`GET fungible_tokens request for account ${req.query.accountId}} Received.`);

        // const query = `
        //     SELECT
        //         *
        //     FROM
        //         assets__fungible_token_events
        //     WHERE
        //         token_new_owner_account_id = '${req.query.accountId}'
        //     ORDER BY
        //         emitted_at_block_timestamp DESC
        //     LIMIT 10 OFFSET 0
        //     ;
        // `;

        // const query = `
        //     SELECT
        //         *
        //     FROM
        //         (SELECT
        //             *
        //         FROM
        //             transaction_actions
        //         where
        //             transaction_hash IN
        //             (
        //                 SELECT
        //                     transaction_hash
        //                 FROM
        //                     transactions
        //                 WHERE
        //                     signer_account_id = '${req.query.accountId}'
        //                 ORDER BY
        //                     block_timestamp DESC
        //                 LIMIT 100 OFFSET 0
        //             )
        //         ) AS tx
        //     WHERE
        //         tx.action_kind = 'FUNCTION_CALL';
        // `;

        const query = `
            SELECT
                *
            FROM
                transaction_actions
            where
                (
                    transaction_hash IN
                    (
                        SELECT
                            transaction_hash
                        FROM
                            transactions
                        WHERE
                            signer_account_id = '${req.query.accountId}'
                        ORDER BY
                            block_timestamp DESC
                        LIMIT 100 OFFSET 0
                    )
                    AND action_kind = 'FUNCTION_CALL'
                )
        `;

        const data = await conn.query(query);

        const result = data.rows;

        // console.log(result);

        // return result;
        res.status(200).json({ ft: result });
    } catch ( error ) {
        // console.log( error );
        console.log("An Error has occurred.");
        console.log(error);

        res.status(500).send("Error fetching data");
    }
};

'''
'''--- pages/api/non_fungible_tokens/[accountId].js ---
import conn from '../../../lib/db';

// Should retrieve non fungible token list for a given account.
//
// Still unfinished.
//
export default async (req, res) => {

    if (req.method !== 'GET'){
        res.status(404).send("Invalid request type");
        console.log("Invalid request received. Method: ", req.method);
        return;
    }

    try {
        // console.log("req nom", req);
        console.log(`GET non_fungible_tokens request for account ${req.query.accountId}} Received.`);

        const query = `
            SELECT
                *
            FROM
                assets__non_fungible_token_events
            WHERE
                token_new_owner_account_id = '${req.query.accountId}'
            ORDER BY
                emitted_at_block_timestamp DESC
            LIMIT 10 OFFSET 0
            ;
        `;

        const data = await conn.query(query);

        const result = data.rows;

        console.log(result);

        // return result;
        res.status(200).json({ nft: result });
    } catch ( error ) {
        // console.log( error );
        console.log("An Error has occurred.");
        console.log(error);

        res.status(500).send("Error fetching data");
    }
};

'''
'''--- pages/api/transactions/[accountId].js ---
import conn from '../../../lib/db';

// Returns Information about a Near account.
export default async (req, res) => {
    // Only accepts GET requests.
    if (req.method !== 'GET'){
        res.status(404).send("Invalid request type");
        console.log("Invalid request received. Method: ", req.method);
        return;
    }

    try {
        // console.log("req nom", req);
        console.log(`GET transaction request for account ${req.query.accountId}} Received.`);

        // const query = `
        //     SELECT
        //         *
        //     FROM
        //         transaction_actions
        //     where
        //         transaction_hash IN
        //         (
        //             SELECT
        //                 transaction_hash
        //             FROM
        //                 transactions
        //             WHERE
        //                 signer_account_id = '${req.query.accountId}'
        //             ORDER BY
        //                 block_timestamp DESC
        //             LIMIT 100 OFFSET 0
        //         );
        // `;
        // const query = {
        //     text: `
        //         SELECT
        //             (transaction_hash, block_timestamp)
        //         FROM
        //             transactions
        //         WHERE
        //             signer_account_id = '${req.query.accountId}'
        //         ORDER BY
        //             block_timestamp DESC
        //         LIMIT 10 OFFSET 0
        //     `,
        //     rowMode: 'array'
        // };

        // const query = `
        //     SELECT
        //         transaction_hash,
        //         block_timestamp AS timestamp
        //     FROM
        //         transactions
        //     WHERE
        //         signer_account_id = '${req.query.accountId}'
        //     ORDER BY
        //         block_timestamp DESC
        //     LIMIT 10 OFFSET 0
        // `;

        // https://github.com/near/near-indexer-for-explorer/blob/master/docs/near-indexer-for-explorer-db.png
        // More info about the database above.

        const query = `
            SELECT
                *
            FROM
                transactions
            WHERE
                signer_account_id = '${req.query.accountId}'
            ORDER BY
                block_timestamp DESC
            LIMIT 10 OFFSET 0
        `;

        // Make the query and return the result.
        const data = await conn.query(query);
        // console.log("Data is");
        // console.log(data);

        // The acquired values.
        const result = data.rows;

        // console.log(result);

        // return result;
        res.status(200).json({ transactions: result });
    } catch ( error ) {
        // console.log( error );
        console.log("An Error has occurred.");
        console.log(error);

        res.status(500).send("Error fetching data");
    }
};

'''
'''--- pages/index.js ---
// import Warning from '../components/near_components/Search/Warning.jsx';
// import Link from 'next/link';
import Search from '../components/near_components/Search/Search.jsx';

// import { useState, useEffect } from 'react';

// This is the full (current) app
//
export default function Home() {
  return (
    <Search />
  )
}

'''
'''--- postcss.config.js ---
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

'''
'''--- public/vercel.svg ---
<svg width="283" height="64" viewBox="0 0 283 64" fill="none" 
    xmlns="http://www.w3.org/2000/svg">
    <path d="M141.04 16c-11.04 0-19 7.2-19 18s8.96 18 20 18c6.67 0 12.55-2.64 16.19-7.09l-7.65-4.42c-2.02 2.21-5.09 3.5-8.54 3.5-4.79 0-8.86-2.5-10.37-6.5h28.02c.22-1.12.35-2.28.35-3.5 0-10.79-7.96-17.99-19-17.99zm-9.46 14.5c1.25-3.99 4.67-6.5 9.45-6.5 4.79 0 8.21 2.51 9.45 6.5h-18.9zM248.72 16c-11.04 0-19 7.2-19 18s8.96 18 20 18c6.67 0 12.55-2.64 16.19-7.09l-7.65-4.42c-2.02 2.21-5.09 3.5-8.54 3.5-4.79 0-8.86-2.5-10.37-6.5h28.02c.22-1.12.35-2.28.35-3.5 0-10.79-7.96-17.99-19-17.99zm-9.45 14.5c1.25-3.99 4.67-6.5 9.45-6.5 4.79 0 8.21 2.51 9.45 6.5h-18.9zM200.24 34c0 6 3.92 10 10 10 4.12 0 7.21-1.87 8.8-4.92l7.68 4.43c-3.18 5.3-9.14 8.49-16.48 8.49-11.05 0-19-7.2-19-18s7.96-18 19-18c7.34 0 13.29 3.19 16.48 8.49l-7.68 4.43c-1.59-3.05-4.68-4.92-8.8-4.92-6.07 0-10 4-10 10zm82.48-29v46h-9V5h9zM36.95 0L73.9 64H0L36.95 0zm92.38 5l-27.71 48L73.91 5H84.3l17.32 30 17.32-30h10.39zm58.91 12v9.69c-1-.29-2.06-.49-3.2-.49-5.81 0-10 4-10 10V51h-9V17h9v9.2c0-5.08 5.91-9.2 13.2-9.2z" fill="#000"/>
</svg>
'''
'''--- styles/globals.css ---
@tailwind base;
@tailwind components;
@tailwind utilities;

html,
body {
  padding: 0;
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen,
    Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;
}

a {
  color: inherit;
  text-decoration: none;
}

* {
  box-sizing: border-box;
}

'''
'''--- tailwind.config.js ---
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./pages/**/*.{js,ts,jsx,tsx}",
    "./components/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}

'''