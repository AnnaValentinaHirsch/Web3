*GitHub Repository "hyperfiles-org/hyperfiles"*

'''--- .github/ISSUE_TEMPLATE/bug_report.md ---
---
name: Bug report
about: Create a report to help us improve
title: ''
labels: bug
assignees: ''

---

**Describe the bug**
A clear and concise description of what the bug is.

**To Reproduce**
Steps to reproduce the behavior:
1. Go to '...'
2. Click on '....'
3. Scroll down to '....'
4. See error

**Expected behavior**
A clear and concise description of what you expected to happen.

**Screenshots**
If applicable, add screenshots to help explain your problem.

**Desktop (please complete the following information):**
 - OS: [e.g. iOS]
 - Browser [e.g. chrome, safari]
 - Version [e.g. 22]

**Smartphone (please complete the following information):**
 - Device: [e.g. iPhone6]
 - OS: [e.g. iOS8.1]
 - Browser [e.g. stock browser, safari]
 - Version [e.g. 22]

**Additional context**
Add any other context about the problem here.

'''
'''--- .github/ISSUE_TEMPLATE/feature-request.md ---
---
name: Feature request
about: Suggest an idea for this project
title: ''
labels: enhancement
assignees: ''

---

**Is your feature request related to a problem? Please describe.**
A clear and concise description of what the problem is. Ex. I'm always frustrated when [...]

**Describe the solution you'd like**
A clear and concise description of what you want to happen.

**Describe alternatives you've considered**
A clear and concise description of any alternative solutions or features you've considered.

**Additional context**
Add any other context or screenshots about the feature request here.

'''
'''--- .github/workflows/release.yml ---
name: Deploy Components to Mainnet
on:
  push:
    branches: [main]
jobs:
  deploy-mainnet:
    uses: NEARBuilders/bos-workspace/.github/workflows/deploy.yml@main
    with:
      deploy-env: "mainnet"
      app-name: "hyperfiles"
      deploy-account-address:  hyperfiles.near
      signer-account-address: hyperfiles.near
      signer-public-key: ${{ vars.SIGNER_PUBLIC_KEY }}
    secrets:
      SIGNER_PRIVATE_KEY:  ${{ secrets.SIGNER_PRIVATE_KEY }}

'''
'''--- apps/hyperfiles/bos.config.json ---
{
  "account": "hyperfiles.near"
}
'''
'''--- apps/hyperfiles/build/bos-loader.json ---
{"components":{"hyperfiles.near/widget/adapter\\github":{"code":"// Function to construct a GitHub API URL given a file path in a repository\nconst githubUrl = (filePath) =>\n  `https://api.github.com/repos/your-username/your-repository/contents/${filePath}`;\n\n// Function to retrieve data from GitHub given a file path\nfunction get(filePath) {\n  return fetch(githubUrl(filePath), {\n    headers: {\n      Accept: \"application/vnd.github.v3.raw\", // Set Accept header to get raw content of the file\n      Authorization: \"token YOUR_GITHUB_TOKEN\", // Authorization header with your GitHub token\n    },\n  }).then((response) => {\n    if (!response.ok) {\n      throw new Error(\"Failed to fetch data\");\n    }\n    return response.text(); // Use .text() for raw content, not .json()\n  });\n}\n\n// Function to create and upload data to GitHub, returning a promise with the URL of the uploaded content\nfunction create(filePath, data) {\n  // Added filePath to the parameters\n  return new Promise((resolve, reject) => {\n    if (data.length) {\n      const content = btoa(data); // Convert data to Base64 for GitHub API\n      fetch(githubUrl(filePath), {\n        method: \"PUT\",\n        headers: {\n          Accept: \"application/vnd.github.v3+json\", // Set Accept header to expect JSON responses\n          Authorization: \"token YOUR_GITHUB_TOKEN\", // Authorization header with your GitHub token\n          \"Content-Type\": \"application/json\", // Set the Content-Type header\n        },\n        body: JSON.stringify({\n          message: `Upload ${filePath}`, // Commit message\n          content: content, // Base64 encoded content\n        }),\n      })\n        .then((response) => response.json()) // Parse the JSON response\n        .then((data) => {\n          if (data.content && data.content.html_url) {\n            resolve({ url: data.content.html_url }); // Resolve the promise with the HTML URL of the new content\n          } else {\n            throw new Error(\"Invalid response from GitHub\");\n          }\n        })\n        .catch((error) => {\n          console.error(\"Error in create function:\", error);\n          reject(error); // Reject the promise in case of an error\n        });\n    } else {\n      reject(\"No data provided\"); // Reject the promise if no data is provided\n    }\n  });\n}\n\n// Return the get and create functions for use elsewhere\nreturn { get, create };\n"},"hyperfiles.near/widget/adapter\\ipfs":{"code":"const ipfsUrl = (cid) => `https://ipfs.near.social/ipfs/${cid}`;\n\nfunction get(ref) {\n  const data = fetch(`https://ipfs.near.social/ipfs/${ref.cid}`);\n  return data.body;\n}\n\nfunction create(data) {\n  return new Promise((resolve, reject) => {\n    if (data.length) {\n      const body = new Blob([data], { type: \"application/json\" });\n      console.log(body);\n\n      asyncFetch(\"https://ipfs.near.social/add\", {\n        method: \"POST\",\n        headers: {\n          Accept: \"application/json\",\n        },\n        body,\n      })\n        .then((res) => {\n          resolve({ cid: res.body.cid }); // Resolve the promise with the necessary data\n        })\n        .catch((error) => {\n          console.error(\"Error in create function:\", error);\n          reject(error); // Reject the promise in case of an error\n        });\n    } else {\n      reject(\"No data provided\"); // Reject the promise if no data is provided\n    }\n  });\n}\n\nreturn { get, create };\n"},"hyperfiles.near/widget/app":{"code":"const Card3D = styled.div`\n  perspective: 1500px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  height: 100%;\n`;\n\nconst CardContent = styled.div`\n  background-color: #fff;\n  color: #000;\n  padding: 2rem;\n`;\n\nconst Button = styled.button``;\n\nconst [showCover, setShowCover] = useState(false);\n\nreturn (\n  <div className=\"vh-100 w-100 bg-gray-100\">\n    {showCover && (\n      <Card3D>\n        <CardContent>\n          <h1\n            className=\"display-4 font-weight-bold text-black mb-2\"\n            style={{\n              textShadow:\n                \"1px 1px 1px rgba(0, 0, 0, 0.5), 4px 4px 4px rgba(0, 0, 0, 0.3)\",\n            }}\n          >\n            hyperfiles\n          </h1>\n          <p\n            className=\"h5 text-success mb-4\"\n            style={{\n              textShadow:\n                \"1px 1px 1px rgba(0, 0, 0, 0.5), 2px 2px 2px rgba(0, 0, 0, 0.3)\",\n            }}\n          >\n            organize everything\n          </p>\n        </CardContent>\n        <Button onClick={() => setShowCover(false)}>go</Button>\n      </Card3D>\n    )}\n    <div style={{ display: showCover ? \"none\" : \"block\" }} className=\"mt-4\">\n      <Widget\n        src=\"hyperfiles.near/widget/hyperfile.index\"\n        props={{ creatorId: context.accountId }}\n      />\n    </div>\n  </div>\n);\n"},"hyperfiles.near/widget/hyperfile\\create":{"code":"const Wrapper = styled.div`\n  max-width: 400px;\n  margin: 0 auto;\n`;\n\nconst TabContent = styled.div`\n  margin-top: 1rem;\n`;\n\nconst Form = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n  width: 100%;\n`;\n\nconst Label = styled.label`\n  font-weight: bold;\n`;\n\nconst Input = styled.input`\n  padding: 5px;\n`;\n\nconst Select = styled.select`\n  padding: 8px;\n`;\n\nconst FormGroup = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst adapters = [\n  // these can come from the user (or app) settings\n  // {\n  //   title: \"Local Storage\",\n  //   value: \"everycanvas.near/widget/adapter.local_storage\",\n  //   saveRef: false\n  // },\n  // {\n  //   title: \"SocialDB\",\n  //   value: \"everycanvas.near/widget/adapter.social\",\n  // },\n  {\n    title: \"IPFS\",\n    value: \"everycanvas.near/widget/adapter.ipfs\",\n  },\n  // {\n  //   title: \"GitHub\",\n  //   value: \"hack.near/widget/adapter.github\",\n  // },\n  // {\n  //   title: \"Obsidian\",\n  //   value: \"hack.near/widget/adapter.obsidian\",\n  // },\n  // {\n  //   title: \"Tldraw\",\n  //   value: \"hack.near/widget/adapter.tldraw\",\n  // },\n];\n\nconst defaultAdapter = adapters[0];\n\nconst { creatorId } = props;\n\nconst [json, setJson] = useState(props.data ?? \"\");\nconst [source, setSource] = useState(props.source ?? \"\");\nconst [adapter, setAdapter] = useState(defaultAdapter.value ?? \"\");\nconst [reference, setReference] = useState(undefined);\nconst [filename, setFilename] = useState(props.filename ?? \"\");\nconst [activeTab, setActiveTab] = useState(\"data\");\nconst [name, setName] = useState(props.name ?? \"\");\nconst [description, setDescription] = useState(props.description ?? \"\");\n\nfunction generateUID() {\n  return (\n    Math.random().toString(16).slice(2) +\n    Date.now().toString(36) +\n    Math.random().toString(16).slice(2)\n  );\n}\n\nconst handleCreate = () => {\n  const isCreator = context.accountId === creatorId;\n\n  // load in the state.adapter (modules for IPFS, Arweave, Ceramic, Verida, On Machina... )\n  const { create } = VM.require(adapter) || (() => {});\n  if (create) {\n    // store the data somewhere, based on the adapter\n    create(json).then((reference) => {\n      // now we have a reference to the data\n      // we need to name it... are we the original creator or are we forking? We don't want to overwrite any of the users custom (or maybe we do!)\n      const thingId = filename ?? generateUID();\n\n      const hyperfile = {\n        [props.type]: {\n          // which we store in the social contract\n          [thingId]: {\n            \"\": JSON.stringify({\n              fileformat: `${props.type}.${source}`,\n              source: source,\n              adapter: adapter,\n              reference: reference,\n            }),\n            metadata: {\n              name: name,\n              description: description,\n              type: props.type,\n            },\n          },\n        },\n      };\n\n      if (creatorId !== context.accountId) {\n        // handle request merge\n        hyperfile.index = {\n          notify: JSON.stringify({\n            key: creatorId,\n            value: {\n              type: \"request\",\n              data: {\n                type: \"merge\",\n                upstream: `${creatorId}/${props.type}/${props.filename}`,\n                origin: `${context.accountId}/${props.type}/${thingId}`,\n              },\n            },\n          }),\n        };\n        hyperfile[props.type][thingId].metadata = {\n          ...hyperfile[props.type][thingId].metadata,\n          upstream: `${creatorId}/${props.type}/${props.filename}`,\n        };\n        // I want to make a request to merge\n        // set upstream and downstream\n      }\n\n      // sometimes we're not logged in, so it doesn't do anything!\n      Social.set(hyperfile, { force: true });\n    });\n  }\n};\n\nreturn (\n  <Wrapper>\n    <h3>{context.accountId === creatorId ? \"create\" : \"request merge\"}</h3>\n    <ul className=\"nav nav-tabs\">\n      <li className=\"nav-item\">\n        <a\n          className={`nav-link ${activeTab === \"data\" ? \"active\" : \"\"}`}\n          onClick={() => setActiveTab(\"data\")}\n        >\n          Data\n        </a>\n      </li>\n      <li className=\"nav-item\">\n        <a\n          className={`nav-link ${activeTab === \"metadata\" ? \"active\" : \"\"}`}\n          onClick={() => setActiveTab(\"metadata\")}\n        >\n          Metadata\n        </a>\n      </li>\n    </ul>\n\n    <TabContent>\n      {activeTab === \"data\" && (\n        <Form>\n          <FormGroup>\n            <Label>source</Label>\n            <Input\n              type=\"text\"\n              value={source}\n              onChange={(e) => onChangeSource(e.target.value)}\n              disabled={props.source} // disable if source is passed in\n            />\n          </FormGroup>\n          {/* <Widget\n            src=\"bozon.near/widget/CodeDiff\"\n            props={{ currentCode: update, prevCode: src, ...props }}\n          /> */}\n          <textarea\n            className=\"form-control mb-3\"\n            rows={5}\n            value={json}\n            onChange={(e) => setJson(e.target.value)}\n          />\n          <FormGroup>\n            <Label>adapter</Label>\n            <Select\n              value={adapter}\n              onChange={(e) => setAdapter(e.target.value)}\n            >\n              {adapters.map((o) => (\n                <option value={o.value}>{o.title}</option>\n              ))}\n            </Select>\n          </FormGroup>\n        </Form>\n      )}\n    </TabContent>\n    <TabContent>\n      {activeTab === \"metadata\" && (\n        <Form>\n          <FormGroup>\n            <Label>name</Label>\n            <Input\n              type=\"text\"\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n            />\n          </FormGroup>\n          <FormGroup>\n            <Label>description</Label>\n            <textarea\n              className=\"form-control mb-3\"\n              rows={5}\n              value={description}\n              onChange={(e) => setDescription(e.target.value)}\n            />\n          </FormGroup>\n        </Form>\n      )}\n    </TabContent>\n    <FormGroup>\n      <button className=\"btn btn-success mb-1\" onClick={handleCreate}>\n        Create\n      </button>\n    </FormGroup>\n  </Wrapper>\n);\n"},"hyperfiles.near/widget/hyperfile\\index":{"code":"const TabContent = styled.div`\n  margin-top: 1rem;\n`;\n\nconst Form = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n  width: 100%;\n`;\n\nconst Label = styled.label`\n  font-weight: bold;\n`;\n\nconst Input = styled.input`\n  padding: 5px;\n`;\n\nconst Select = styled.select`\n  padding: 8px;\n`;\n\nconst FormGroup = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Button = styled.button``;\n\nconst adapters = [\n  // these can come from the user (or app) settings\n  // {\n  //   title: \"Local Storage\",\n  //   value: \"everycanvas.near/widget/adapter.local_storage\",\n  //   saveRef: false\n  // },\n  // {\n  //   title: \"SocialDB\",\n  //   value: \"everycanvas.near/widget/adapter.social\",\n  // },\n  {\n    title: \"\",\n    value: \"\",\n  },\n  {\n    title: \"IPFS\",\n    value: \"everycanvas.near/widget/adapter.ipfs\",\n    refType: { cid: \"string\" },\n  },\n  // {\n  //   title: \"Custom\",\n  //   value: \"custom\",\n  // },\n  {\n    title: \"GitHub\",\n    value: \"flowscience.near/widget/adapter.github\",\n  },\n  // {\n  //   title: \"Obsidian\",\n  //   value: \"hack.near/widget/adapter.obsidian\",\n  // },\n  // {\n  //   title: \"Tldraw\",\n  //   value: \"hack.near/widget/adapter.tldraw\",\n  // },\n];\n\n//const { GitHubAPIExample } = VM.require(  \"create.near/widget/GitHub.API.Example\");\n\nconst [rawData, setRawData] = useState(\"\");\nconst [source, setSource] = useState(props.source ?? \"\");\nconst [adapter, setAdapter] = useState(\"\");\nconst [reference, setReference] = useState(undefined);\nconst [activeTab, setActiveTab] = useState(\"data\");\nconst [name, setName] = useState(props.name ?? \"\");\nconst [description, setDescription] = useState(props.description ?? \"\");\nconst [hyperfile, setHyperfile] = useState(\"\");\nconst [type, setType] = useState(\"\");\nconst [selectedRepo, setSelectedRepo] = useState(null);\n\nconst handleRepoSelect = (repo) => {\n  setSelectedRepo(repo);\n  console.log(\"Selected repository:\", repo);\n  // Now `selectedRepo` can be used in your get and create functions\n};\n\nconst rawAdapter =\n  (adapter !== \"\" || adapter !== \"custom\") && Social.get(adapter, \"final\");\nconst { create } =\n  ((adapter !== \"\" || adapter !== \"custom\") && VM.require(adapter)) ||\n  (() => {});\n\nconst functionRegex = /function\\s+(\\w+)\\s*\\(([^)]*)\\)\\s*{([\\s\\S]*?)\\n}/g;\n\nfunction parseAdapter(code) {\n  let match;\n  const functions = [];\n\n  while ((match = functionRegex.exec(code)) !== null) {\n    const [_, functionName, params, content] = match;\n    functions.push({ functionName, params, content });\n  }\n\n  return functions.map((func, index) => (\n    <FormGroup key={index}>\n      <Label>{func.functionName}</Label>\n      <textarea\n        className=\"form-control\"\n        style={{ width: \"100%\", height: \"100%\" }}\n        value={func.content.trim()}\n        disabled\n      />\n    </FormGroup>\n  ));\n}\n\nfunction generateUID() {\n  const maxHex = 0xffffffff;\n  const randomNumber = Math.floor(Math.random() * maxHex);\n  return randomNumber.toString(16).padStart(8, \"0\");\n}\n\nconst handleCreate = () => {\n  if (create) {\n    console.log(\"it's something\", rawData);\n    // store the data somewhere, based on the adapter\n    create(rawData).then((reference) => {\n      // now we have a reference to the data\n      const thingId = generateUID();\n\n      const hyperfile = {\n        thing: {\n          // which we store in the social contract\n          [thingId]: {\n            \"\": JSON.stringify({\n              source: source,\n              adapter: adapter,\n              reference: reference,\n            }),\n            metadata: {\n              name: name,\n              description: description,\n              type: type,\n            },\n          },\n        },\n      };\n\n      setHyperfile(JSON.stringify(hyperfile, null, 2));\n    });\n  } else {\n    console.log(\"invalid adapter\");\n  }\n};\n\nreturn (\n  <div className=\"container mt-3\">\n    <div className=\"row p-3\">\n      <h1>hyperfile creator</h1>\n    </div>\n    <ul className=\"nav nav-tabs\">\n      <li className=\"nav-item\">\n        <a\n          className={`nav-link ${activeTab === \"data\" ? \"active\" : \"\"}`}\n          onClick={() => setActiveTab(\"data\")}\n        >\n          Data\n        </a>\n      </li>\n      <li className=\"nav-item\">\n        <a\n          className={`nav-link ${activeTab === \"metadata\" ? \"active\" : \"\"}`}\n          onClick={() => setActiveTab(\"metadata\")}\n        >\n          Metadata\n        </a>\n      </li>\n    </ul>\n    <div className=\"row\">\n      <TabContent>\n        {activeTab === \"data\" && (\n          <div className=\"row\">\n            <div className=\"col\">\n              <div className=\"p-3 border bg-light\">\n                <Form>\n                  <h3>provide the data</h3>\n                  <FormGroup>\n                    <Label>source</Label>\n                    <Input\n                      type=\"text\"\n                      value={source}\n                      onChange={(e) => setSource(e.target.value)}\n                    />\n                  </FormGroup>\n                  <FormGroup>\n                    <Label>type</Label>\n                    <Input\n                      type=\"text\"\n                      value={type}\n                      onChange={(e) => setType(e.target.value)}\n                    />\n                  </FormGroup>\n                  <FormGroup>\n                    <Label>raw data</Label>\n                    <textarea\n                      className=\"form-control\"\n                      style={{ width: \"100%\", height: \"400px\" }}\n                      value={rawData}\n                      onChange={(e) => setRawData(e.target.value)}\n                    />\n                  </FormGroup>\n                </Form>\n              </div>\n            </div>\n            <div className=\"col\">\n              <div className=\"p-3 border bg-light\">\n                <Form>\n                  <h3>how to store it</h3>\n                  <FormGroup>\n                    <Label>adapter</Label>\n                    <Select\n                      value={adapter}\n                      onChange={(e) => setAdapter(e.target.value)}\n                    >\n                      {adapters.map((o) => (\n                        <option value={o.value}>{o.title}</option>\n                      ))}\n                    </Select>\n                  </FormGroup>\n                  {rawAdapter && <>{parseAdapter(rawAdapter)}</>}\n                  {adapter === \"flowscience.near/widget/adapter.github\" && (\n                    <Widget\n                      src=\"flowscience.near/widget/GitHubSearchSelect\"\n                      onClick={handleRepoSelect}\n                    ></Widget>\n                  )}\n                </Form>\n              </div>\n            </div>\n            <div className=\"col\">\n              <div className=\"p-3 border bg-light\">\n                <Form>\n                  <Button\n                    onClick={handleCreate}\n                    disabled={!adapter || !type || !source || !rawData}\n                  >\n                    create reference\n                  </Button>\n                  {hyperfile !== \"\" && (\n                    <>\n                      <FormGroup>\n                        <textarea\n                          className=\"form-control\"\n                          value={hyperfile}\n                          disabled\n                          style={{ width: \"100%\", height: \"400px\" }}\n                        />\n                      </FormGroup>\n                      <Button\n                        onClick={() =>\n                          Social.set(JSON.parse(hyperfile), { force: true })\n                        }\n                      >\n                        save\n                      </Button>\n                    </>\n                  )}\n                </Form>\n              </div>\n            </div>\n          </div>\n        )}\n      </TabContent>\n      <TabContent>\n        {activeTab === \"metadata\" && (\n          <Form>\n            <h3>metadata</h3>\n            <FormGroup>\n              <Label>name</Label>\n              <Input\n                type=\"text\"\n                value={name}\n                onChange={(e) => setName(e.target.value)}\n              />\n            </FormGroup>\n            <FormGroup>\n              <Label>description</Label>\n              <textarea\n                className=\"form-control mb-3\"\n                rows={5}\n                value={description}\n                onChange={(e) => setDescription(e.target.value)}\n              />\n            </FormGroup>\n          </Form>\n        )}\n      </TabContent>\n    </div>\n  </div>\n);\n"},"hyperfiles.near/widget/hyperfile\\view":{"code":"const { path } = props;\n\nif (!path) {\n  return <p>No path provided.</p>;\n}\n\nconst thing = Social.get(`${path}/**`, \"final\");\n\nif (!thing) {\n  return <p>Loading...</p>;\n}\n\nconst hyperfile = JSON.parse(thing[\"\"]);\n\nconst { get } = VM.require(hyperfile.adapter || (() => {}));\n\nif (get) {\n  const content = get(hyperfile.reference);\n\n  if (content === null) return <p>no content</p>;\n\n  return (\n    <div className=\"container\">\n      {thing.metadata.type === \"md\" ? (\n        <Widget\n          src=\"openwebbuild.near/widget/Post.Markdown\"\n          props={{\n            text: content,\n          }}\n        />\n      ) : (\n        <p>viewer does not currently support type: {thing.type}</p>\n      )}\n    </div>\n  );\n} else {\n  return <p>Invalid adapter: {hyperfile.adapter}</p>;\n}\n"}},"data":{}}

'''
'''--- apps/hyperfiles/build/data.json ---
{
  "hyperfiles.near": {}
}

'''
'''--- apps/hyperfiles/data.json ---
{
  "hyperfiles.near": {}
}

'''
'''--- bos.workspace.json ---
{
    "apps": ["/apps/*"]
}
'''
'''--- contracts/resolvers/AttesterResolver.rs ---
/* set_specified_attester: This function sets the specified attester. This could be restricted to be called only once or by certain privileged accounts (e.g., during contract deployment).
verify_attestation: An external function that takes an Attestation as input and checks if it's from the specified attester.
is_attestation_valid: A helper function that performs the actual check.
This Rust code provides the basic functionality for an AttesterResolver.sol equivalent in a Substrate-based blockchain. Remember, the specific implementation details might vary depending on your blockchain's design and the external components' functionalities.*/

#![cfg_attr(not(feature = "std"), no_std)]

use frame_support::{decl_module, decl_storage, decl_event, dispatch, ensure};
use sp_std::prelude::*;
use frame_system::ensure_signed;

// Assuming definitions for IEAS and Attestation exist
use crate::{IEAS, Attestation};

pub trait Config: frame_system::Config {
    type Event: From<Event<Self>> + Into<<Self as frame_system::Config>::Event>;
}

decl_storage! {
    trait Store for Module<T: Config> as AttesterResolver {
        // The specified attester set during contract deployment
        SpecifiedAttester get(fn specified_attester): T::AccountId;
    }
}

decl_event! {
    pub enum Event<T> where AccountId = <T as frame_system::Config>::AccountId {
        // Event triggered when an attestation is successfully verified
        AttestationVerified(AccountId),
    }
}

decl_module! {
    pub struct Module<T: Config> for enum Call where origin: T::Origin {
        fn deposit_event() = default;

        // Set the specified attester during contract deployment
        #[weight = 10_000]
        pub fn set_specified_attester(origin, attester: T::AccountId) -> dispatch::DispatchResult {
            let who = ensure_signed(origin)?;
            // Logic to ensure only callable during deployment or by authorized users
            SpecifiedAttester::<T>::put(&attester);
            Ok(())
        }

        // Function to verify attestation
        // This needs to be called externally, e.g., when an attestation is submitted
        #[weight = 10_000]
        pub fn verify_attestation(origin, attestation: Attestation) -> dispatch::DispatchResult {
            let _ = ensure_signed(origin)?;
            ensure!(Self::is_attestation_valid(&attestation), "Invalid attestation source");
            Self::deposit_event(RawEvent::AttestationVerified(attestation.attester));
            Ok(())
        }
    }
}

impl<T: Config> Module<T> {
    // Function to check if an attestation is from the specified attester
    fn is_attestation_valid(attestation: &Attestation) -> bool {
        attestation.attester == SpecifiedAttester::<T>::get()
    }
}

'''
'''--- contracts/resolvers/ExpirationTimeResolver.rs ---
/* This is a translation of the ExpirationTimeResolver.sol contract to Rust for a Substrate-based blockchain, we'll follow the same approach as before, adapting the logic to fit the pallet-based architecture of Substrate.
The Rust translation involved creating a pallet that checks if the expiration time of an attestation is later than a specific timestamp set during the deployment.
  set_valid_after: This function sets the _validAfter timestamp. This could be restricted to be called only once or by certain privileged accounts (e.g., during contract deployment).
  verify_expiration: An external function that takes an Attestation as input and checks if its expiration time is valid.
  is_expiration_valid: A helper function that performs the actual expiration time check.
As before, this code provides the basic functionality but might require additional logic or adjustments depending on your specific blockchain setup and the external components' functionalities. Substrate and Solidity have different architectures and capabilities, so make sure to adapt the logic to fit your exact requirements. */

#![cfg_attr(not(feature = "std"), no_std)]

use frame_support::{decl_module, decl_storage, decl_event, dispatch, ensure};
use sp_std::prelude::*;
use frame_system::ensure_signed;

// Assuming definitions for IEAS and Attestation exist
use crate::{IEAS, Attestation};

pub trait Config: frame_system::Config {
    type Event: From<Event<Self>> + Into<<Self as frame_system::Config>::Event>;
}

decl_storage! {
    trait Store for Module<T: Config> as ExpirationTimeResolver {
        // The timestamp after which an attestation is considered valid
        ValidAfter get(fn valid_after): u64;
    }
}

decl_event! {
    pub enum Event<T> where AccountId = <T as frame_system::Config>::AccountId {
        // Event triggered when an attestation is successfully verified
        AttestationValid(AccountId),
    }
}

decl_module! {
    pub struct Module<T: Config> for enum Call where origin: T::Origin {
        fn deposit_event() = default;

        // Set the valid after timestamp during contract deployment
        #[weight = 10_000]
        pub fn set_valid_after(origin, timestamp: u64) -> dispatch::DispatchResult {
            let who = ensure_signed(origin)?;
            // Logic to ensure only callable during deployment or by authorized users
            ValidAfter::<T>::put(timestamp);
            Ok(())
        }

        // Function to verify attestation expiration
        // This needs to be called externally, e.g., when an attestation is submitted
        #[weight = 10_000]
        pub fn verify_expiration(origin, attestation: Attestation) -> dispatch::DispatchResult {
            let _ = ensure_signed(origin)?;
            ensure!(Self::is_expiration_valid(&attestation), "Attestation expired");
            Self::deposit_event(RawEvent::AttestationValid(attestation.issuer));
            Ok(())
        }
    }
}

impl<T: Config> Module<T> {
    // Function to check if an attestation's expiration time is valid
    fn is_expiration_valid(attestation: &Attestation) -> bool {
        attestation.expiration_time >= ValidAfter::<T>::get()
    }
}

'''
'''--- contracts/resolvers/PayingResolver.rs ---
/* Translating the PayingResolver.sol contract into Rust for a Substrate blockchain environment involves implementing a pallet that handles the payment logic for attesters. This translation must consider that Substrate has a different way of handling transactions and balances compared to Ethereum, and there is no direct equivalent of OpenZeppelin's smart contract libraries.
  set_incentive: This function sets the incentive amount for the attesters.
  on_attest: This function handles the logic for paying the attester when an attestation is made.
  on_revoke: This function handles the logic for returning the payment during the revocation of an attestation.
Note that this code does not handle all aspects of a production-level contract (such as error handling and security checks) and is meant as a starting point. In a real-world application, especially when handling funds, it is crucial to ensure that your code is secure and well-tested. Substrate's environment and Rust's type system provide robust tools for building secure and efficient blockchain applications, but they require a deep understanding of the framework's specifics.
*/

#![cfg_attr(not(feature = "std"), no_std)]

use frame_support::{
    decl_module, decl_storage, decl_event, dispatch, ensure, traits::{Currency, ExistenceRequirement},
};
use sp_std::prelude::*;
use frame_system::ensure_signed;

// Assuming definitions for IEAS and Attestation
use crate::{IEAS, Attestation};

pub trait Config: frame_system::Config {
    type Event: From<Event<Self>> + Into<<Self as frame_system::Config>::Event>;

    // Using the native currency of the blockchain for payments
    type Currency: Currency<Self::AccountId>;
}

decl_storage! {
    trait Store for Module<T: Config> as PayingResolver {
        Incentive get(fn incentive): T::Balance;
    }
}

decl_event! {
    pub enum Event<T> where AccountId = <T as frame_system::Config>::AccountId, Balance = <T as Config>::Balance {
        // Event emitted when payment is made to attester
        PaymentMade(AccountId, Balance),
        // Event emitted when payment is returned during revocation
        PaymentReturned(AccountId, Balance),
    }
}

decl_module! {
    pub struct Module<T: Config> for enum Call where origin: T::Origin {
        type Error = dispatch::DispatchError;

        fn deposit_event() = default;

        // Set the incentive during contract deployment
        #[weight = 10_000]
        pub fn set_incentive(origin, incentive: T::Balance) -> dispatch::DispatchResult {
            let _ = ensure_signed(origin)?;
            Incentive::<T>::put(incentive);
            Ok(())
        }

        // Function to handle payment logic when attestation is made
        // This should be called by the attestation creation logic
        #[weight = 10_000]
        pub fn on_attest(origin, attestation: Attestation) -> dispatch::DispatchResult {
            let who = ensure_signed(origin)?;
            let incentive = Incentive::<T>::get();
            T::Currency::transfer(&who, &attestation.attester, incentive, ExistenceRequirement::KeepAlive)?;
            Self::deposit_event(RawEvent::PaymentMade(attestation.attester, incentive));
            Ok(())
        }

        // Function to handle payment return logic during revocation
        // This should be called by the attestation revocation logic
        #[weight = 10_000]
        pub fn on_revoke(origin, attestation: Attestation, value: T::Balance) -> dispatch::DispatchResult {
            let who = ensure_signed(origin)?;
            let incentive = Incentive::<T>::get();
            ensure!(value >= incentive, "Not enough value to return payment");
            T::Currency::transfer(&attestation.attester, &who, value, ExistenceRequirement::AllowDeath)?;
            Self::deposit_event(RawEvent::PaymentReturned(attestation.attester, value));
            Ok(())
        }
    }
}
'''
'''--- contracts/resolvers/RecipientResolver.rs ---
/* Translating the RecipientResolver.sol contract into Rust for a Substrate blockchain involves implementing a pallet that checks if an attestation is made to a specific recipient, which is specified during the contract (pallet) deployment.
This functionality will be achieved by storing the target recipient and validating attestations against this stored value.
set_target_recipient: This function sets the target recipient. It can be called during the deployment of the pallet to set the recipient against whom the attestations will be checked.
verify_attestation: This function takes an Attestation as input and verifies if the recipient of the attestation matches the target recipient stored in the pallet.
This Rust code provides a basic structure for the functionality described in the RecipientResolver.sol contract. As with previous translations, it's important to adapt and expand this code to suit the specific requirements and context of your blockchain application. Substrate's architecture offers a different approach to handling data and logic, so additional considerations for security, error handling, and blockchain-specific logic may be required.
*/

#![cfg_attr(not(feature = "std"), no_std)]

use frame_support::{
    decl_module, decl_storage, decl_event, dispatch, ensure,
};
use sp_std::prelude::*;
use frame_system::ensure_signed;

// Assuming definitions for IEAS and Attestation
use crate::{IEAS, Attestation};

pub trait Config: frame_system::Config {
    type Event: From<Event<Self>> + Into<<Self as frame_system::Config>::Event>;
}

decl_storage! {
    trait Store for Module<T: Config> as RecipientResolver {
        // Store the target recipient
        TargetRecipient get(fn target_recipient): T::AccountId;
    }
}

decl_event! {
    pub enum Event<T> where AccountId = <T as frame_system::Config>::AccountId {
        // Event triggered when an attestation is successfully verified
        AttestationVerified(AccountId),
    }
}

decl_module! {
    pub struct Module<T: Config> for enum Call where origin: T::Origin {
        fn deposit_event() = default;

        // Set the target recipient during contract deployment
        #[weight = 10_000]
        pub fn set_target_recipient(origin, recipient: T::AccountId) -> dispatch::DispatchResult {
            let _ = ensure_signed(origin)?;
            TargetRecipient::<T>::put(recipient);
            Ok(())
        }

        // Function to verify if an attestation is to the target recipient
        // This should be called when an attestation is made
        #[weight = 10_000]
        pub fn verify_attestation(origin, attestation: Attestation) -> dispatch::DispatchResult {
            let _ = ensure_signed(origin)?;
            ensure!(attestation.recipient == TargetRecipient::<T>::get(), "Invalid recipient");
            Self::deposit_event(RawEvent::AttestationVerified(attestation.recipient));
            Ok(())
        }
    }
}
'''
'''--- contracts/resolvers/RevocationResolver.rs ---
/* Translating the RevocationResolver.sol contract into Rust for a Substrate blockchain involves implementing a pallet that controls the revocation of attestations based on a state variable.
In this case, the pallet will allow all attestations to be created without additional conditions, but the ability to revoke attestations will be controlled by a boolean flag.
set_revocation: This function allows changing the _revocation state variable, which controls whether revocations are allowed or not.
on_attest: This function is for creating attestations and allows all attestations without additional conditions.
on_revoke: This function checks the revocation status and decides whether an attestation can be revoked based on the state of RevocationAllowed.
This implementation provides the basic functionality as described in the RevocationResolver.sol contract, adapted for a Substrate-based environment. Depending on your specific blockchain setup and requirements, you may need to adjust or extend this implementation, particularly in terms of access control for the set_revocation function and the actual processing logic for attestation creation and revocation. */

#![cfg_attr(not(feature = "std"), no_std)]

use frame_support::{
    decl_module, decl_storage, decl_event, dispatch, ensure,
};
use frame_system::ensure_signed;

// Assuming definitions for IEAS and Attestation
use crate::{IEAS, Attestation};

pub trait Config: frame_system::Config {
    type Event: From<Event<Self>> + Into<<Self as frame_system::Config>::Event>;
}

decl_storage! {
    trait Store for Module<T: Config> as RevocationResolver {
        // Boolean flag to control revocation
        RevocationAllowed get(fn revocation_allowed): bool;
    }
}

decl_event! {
    pub enum Event<T> where AccountId = <T as frame_system::Config>::AccountId {
        // Event for revocation status change
        RevocationStatusChanged(bool),
    }
}

decl_module! {
    pub struct Module<T: Config> for enum Call where origin: T::Origin {
        fn deposit_event() = default;

        // Function to set the revocation status
        #[weight = 10_000]
        pub fn set_revocation(origin, status: bool) -> dispatch::DispatchResult {
            let _ = ensure_signed(origin)?;
            RevocationAllowed::<T>::put(status);
            Self::deposit_event(RawEvent::RevocationStatusChanged(status));
            Ok(())
        }

        // Function to check if an attestation can be created
        #[weight = 10_000]
        pub fn on_attest(origin, _attestation: Attestation) -> dispatch::DispatchResult {
            ensure_signed(origin)?;
            // All attestations are allowed to be created
            Ok(())
        }

        // Function to check if an attestation can be revoked
        #[weight = 10_000]
        pub fn on_revoke(origin, _attestation: Attestation) -> dispatch::DispatchResult {
            ensure_signed(origin)?;
            ensure!(RevocationAllowed::<T>::get(), "Revocation not allowed");
            // Processing logic for revocation
            Ok(())
        }
    }
}
'''
'''--- contracts/resolvers/TokenResolver.rs ---
/* Translating the TokenResolver.sol contract into Rust for a Substrate-based blockchain requires adapting the ERC20 token logic to the Substrate framework.
In Substrate, tokens can be represented using pallets such as pallet-assets or pallet-balances, depending on the desired functionality.
Here is a basic translation of the TokenResolver.sol into a Rust Substrate pallet. This example assumes a generic asset pallet is used for token management.
set_target_token_and_amount: Sets the target token ID and the amount required for attestations.
on_attest: Handles token transfer from the attester to the pallet's account when an attestation is made.
on_revoke: Handles logic during revocation, if any specific actions are needed.
This implementation assumes a generic asset management pallet and may need to be adapted based on the actual asset management solution in use. The transfer logic, especially, will depend on the specific methods provided by the asset pallet. Additionally, proper error handling, security considerations, and compliance with financial regulations should be thoroughly addressed in a production environment. */

#![cfg_attr(not(feature = "std"), no_std)]

use frame_support::{
    decl_module, decl_storage, decl_event, dispatch, ensure,
    traits::{Currency, ReservableCurrency},
};
use frame_system::ensure_signed;
use sp_runtime::traits::AccountIdConversion;
use sp_std::prelude::*;

// Assuming definitions for IEAS and Attestation
use crate::{IEAS, Attestation};

// Define the trait configuration for our module, including the currency trait
pub trait Config: frame_system::Config {
    type Event: From<Event<Self>> + Into<<Self as frame_system::Config>::Event>;

    // This is a placeholder for the asset pallet used for managing the tokens
    type AssetCurrency: Currency<Self::AccountId> + ReservableCurrency<Self::AccountId>;
}

decl_storage! {
    trait Store for Module<T: Config> as TokenResolver {
        // Store the target token ID and amount
        TargetTokenId get(fn target_token_id): T::AssetId;
        TargetAmount get(fn target_amount): T::Balance;
    }
}

decl_event! {
    pub enum Event<T> where AccountId = <T as frame_system::Config>::AccountId, Balance = <T as Config>::Balance {
        // Event for token transfer
        TokenTransferred(AccountId, Balance),
    }
}

decl_module! {
    pub struct Module<T: Config> for enum Call where origin: T::Origin {
        fn deposit_event() = default;

        // Set the target token ID and amount
        #[weight = 10_000]
        pub fn set_target_token_and_amount(origin, token_id: T::AssetId, amount: T::Balance) -> dispatch::DispatchResult {
            let _ = ensure_signed(origin)?;
            TargetTokenId::<T>::put(token_id);
            TargetAmount::<T>::put(amount);
            Ok(())
        }

        // Function to transfer tokens when an attestation is made
        #[weight = 10_000]
        pub fn on_attest(origin, attestation: Attestation) -> dispatch::DispatchResult {
            let who = ensure_signed(origin)?;
            let token_id = TargetTokenId::<T>::get();
            let amount = TargetAmount::<T>::get();

            // Logic to transfer the tokens from the attester to the pallet's account
            // Note: The actual implementation may vary depending on the asset pallet used
            <T::AssetCurrency>::transfer(&attestation.attester, &Self::account_id(), amount, ExistenceRequirement::AllowDeath)?;

            Self::deposit_event(RawEvent::TokenTransferred(attestation.attester, amount));
            Ok(())
        }

        // Function to handle logic during revocation
        #[weight = 10_000]
        pub fn on_revoke(origin, _attestation: Attestation) -> dispatch::DispatchResult {
            ensure_signed(origin)?;
            // Additional logic for revocation, if needed
            Ok(())
        }
    }
}

impl<T: Config> Module<T> {
    // Utility function to get the account ID of the pallet
    fn account_id() -> T::AccountId {
        T::ModuleId::get().into_account()
    }
}
'''
'''--- contracts/resolvers/ValueResolver.rs ---
/* Translating the ValueResolver.sol contract into Rust for a Substrate-based blockchain means creating a pallet that verifies if a specific amount of the native blockchain currency (similar to ETH in Ethereum) is attached with an attestation.
This requires a mechanism to check the transferred value against a target value set during the pallet's initialization.
set_target_value: This function sets the target value required for attestations.
on_attest: This function verifies if the value sent with an attestation matches the target value.
on_revoke: This function handles logic during revocation, if any specific actions are needed.
This implementation assumes the use of the native currency of the blockchain. In a real-world application, especially when handling funds, it's crucial to ensure that your code is secure and well-tested. Additionally, the actual mechanism of attaching value to a function call in Substrate may differ based on the design of your blockchain and the specific requirements of your application. Proper error handling and security considerations should be thoroughly addressed. */

#![cfg_attr(not(feature = "std"), no_std)]

use frame_support::{
    decl_module, decl_storage, decl_event, dispatch, ensure,
    traits::{Currency, ReservableCurrency},
};
use frame_system::ensure_signed;
use sp_runtime::traits::CheckedSub;

// Assuming definitions for IEAS and Attestation
use crate::{IEAS, Attestation};

pub trait Config: frame_system::Config {
    type Event: From<Event<Self>> + Into<<Self as frame_system::Config>::Event>;

    // Using the native currency of the blockchain
    type Currency: Currency<Self::AccountId> + ReservableCurrency<Self::AccountId>;
}

decl_storage! {
    trait Store for Module<T: Config> as ValueResolver {
        // Store the target value required for attestations
        TargetValue get(fn target_value): T::Balance;
    }
}

decl_event! {
    pub enum Event<T> where Balance = <T as Config>::Balance {
        // Event for value verification
        ValueVerified(Balance),
    }
}

decl_module! {
    pub struct Module<T: Config> for enum Call where origin: T::Origin {
        fn deposit_event() = default;

        // Set the target value
        #[weight = 10_000]
        pub fn set_target_value(origin, target_value: T::Balance) -> dispatch::DispatchResult {
            let _ = ensure_signed(origin)?;
            TargetValue::<T>::put(target_value);
            Ok(())
        }

        // Function to verify the value sent with an attestation
        #[weight = 10_000]
        pub fn on_attest(origin, _attestation: Attestation, value: T::Balance) -> dispatch::DispatchResult {
            let _ = ensure_signed(origin)?;

            ensure!(value == TargetValue::<T>::get(), "Value does not match target");
            
            Self::deposit_event(RawEvent::ValueVerified(value));
            Ok(())
        }

        // Function to handle logic during revocation
        #[weight = 10_000]
        pub fn on_revoke(origin, _attestation: Attestation) -> dispatch::DispatchResult {
            ensure_signed(origin)?;
            // Additional logic for revocation, if needed
            Ok(())
        }
    }
}
'''
'''--- docs/core_/field.md ---
### [field](https://everything.dev/every.near/widget/every.type.create?typeSrc=flowscience.near/type/field): primitives that compose into fileFormats

- fieldName (str, s)
- primitive (str, s)
'''
'''--- docs/core_/file.md ---
### [file](https://everything.dev/every.near/widget/every.type.create?typeSrc=flowscience.near/type/file): a collection of records

- fileName (str, s)
- fileFormat (thing, s)
- records (thing, m)
- owner (str, s)
- permissions (thing, s)
'''
'''--- docs/core_/fileformat.md ---
### [fileformat](https://everything.dev/every.near/widget/every.type.create?typeSrc=flowscience.near/type/fileformat): standard types for files

- formatName (str, s)
- fields (thing, m)
'''
'''--- docs/core_/plugins.md ---
**Plugins**: `type`-specific `Widget` that can interact with a `Thing`
    - Installed by the user and stored in the settings

## Core Plugins

### composable.publish: create a new file

LOGIC: enable upload if file matches a template. Otherwise, use input fields.

Detect:

LOGIC: create.field (xN) → create.fileFormat (x0-1) → create.record (xN) → create.file (x1)

TO DO: enable using queries to create new files.

- fileName (str, s)
- fields (thing, m)
    - fieldName
        - TEST: check if fieldName exists
    - primitive
    - single or multiple???
- records (thing, m)
    - recordValues
    - recordOwners
- permissions

### composable.query: find any set of things, then mix and match

- formatName
- fieldName
- fileName
- fieldType
- recordNames
- recordValue
- recordOwner
- jobName
- jobType
- jobCode
- description
- image
- backgroundImage

### composable.job: create a new job file and execute a tool config
'''
'''--- docs/core_/record.md ---
### [record](https://everything.dev/every.near/widget/every.type.create?typeSrc=flowscience.near/type/record): individual pieces of data (a datum)

- recordName (str, s)
- fields (str, m)
- recordValues (str, m)
- recordOwner (str, s)
- isEncrypted (bool, s)
- permissions (thing, s)
'''
'''--- docs/core_/templates.md ---
**Templates**: a `Widget` whose `props` follow the `Type`
    - Configured in the `Thing`
'''
'''--- docs/core_/things.md ---
**Things**: `JSON` stored on-chain that can serve as a mutable, generic representation of a `Widget`
    - has a `path` and a `blockHeight`
    - enable gasless widget updates
        - How?`JSON` `Thing` is much smaller than the code for a `Widget`
        - Why?

## Lists of Things

### metadata

- every thing else has a metadata thing associated with it already, right???
    - or is metadata stored in the socialDB contract?
    - https://near.org/efiz.near/widget/every.type.metadata

---

### files

Core

- every.file
- every.fileformat
- every.record
- every.field
- every.job
- every.jobtype
- every.toolconfig
- {accountId}/thing/impact.file

Featured

- every.hypercert

---

### fileformats

- [hypercert](https://everything.dev/mob.near/widget/WidgetSource?src=flowscience.near/thing/fileformat.hypercert)

[fileformat.hypercert](https://www.notion.so/fileformat-hypercert-cea53b0494314bc4a408ba2c6406ae82?pvs=21)

- impact

[fileformat.impact](https://www.notion.so/fileformat-impact-c26a1aacf4084e89b4440d9484cbcb15?pvs=21)

- fileformat.job
- fileformat.jobType
- fileformat.toolConfig

types = fileformats = types???

[type:artist](https://www.notion.so/type-artist-455f0ff7ab2243b5974fb43b0e6bf957?pvs=21)

[type:DAO](https://www.notion.so/type-DAO-188d1ff79c43474eaa4caf652d66d05d?pvs=21)

---

### fields

- [hypercertName](https://everything.dev/mob.near/widget/WidgetSource?src=flowscience.near/thing/field.hypercertName) (string, s)
- [hypercertProject](https://everything.dev/mob.near/widget/WidgetSource?src=flowscience.near/thing/field.hypercertProject) (url, s)
- [hypercertScopeTags](https://everything.dev/mob.near/widget/WidgetSource?src=flowscience.near/thing/field.hypercertScopeTags) (list, s)
- [hypercertWorkStart](https://everything.dev/mob.near/widget/WidgetSource?src=flowscience.near/thing/field.hypercertWorkStart) (date, s)
- [hypercertWorkEnd](https://everything.dev/mob.near/widget/WidgetSource?src=flowscience.near/thing/field.hypercertWorkEnd) (date, s) - how to make indefinite? (leave empty)
- [hypercertContributors](https://everything.dev/mob.near/widget/WidgetSource?src=flowscience.near/thing/field.hypercertContributors) (list, s)
- [hypercertUsageRights](https://everything.dev/mob.near/widget/WidgetSource?src=flowscience.near/thing/field.hypercertUsageRights) (str, s)
- [hypercertAllowlist](https://everything.dev/mob.near/widget/WidgetSource?src=flowscience.near/thing/field.hypercertAllowlist) (list, s)
- [hypercertDistribution](https://everything.dev/mob.near/widget/WidgetSource?src=flowscience.near/thing/field.hypercertDistribution) (int, s) - how to set deduplicate = TRUE???
- description (string, s)
- image (img, s)
- backgroundImage (img, s)

---

### records

- hypercert.1
- file.1
- job.1

---

### jobs

- TBD

---

### jobTypes

- TBD

---
'''
'''--- docs/core_/types.md ---
**Types**: `JSON` stored on-chain that describes the *properties* and *default behavior* of a `Thing`
    - Has a “name”, an “owner”, and a list of “properties”
    - Properties have their own `Type` definitions
    - a `Type` can have properties that follow other `Types`
        - enables recursion and attribution/provenance
        - use properties to construct creators to put other data inside of it unique to a `Type`

All Types have the same three fields:
- Name
- Properties
- isMulti

---

## Core Hyperfiles Types

[metadata](https://everything.dev/every.near/widget/every.type.create?typeSrc=every.near/type/metadata): redundant fields applicable to any type or thing
- description (s)
- image (s)
- backgroundImage (s)

[file](https://everything.dev/every.near/widget/every.type.create?typeSrc=flowscience.near/type/file): a collection of records
- fileName (str, s)
- fileFormat (thing, s)
- records (thing, m)
- owner (str, s)
- permissions (thing, s)

[fileformat](https://everything.dev/every.near/widget/every.type.create?typeSrc=flowscience.near/type/fileformat): standard types for files
- formatName (str, s)
- fields (thing, m)

[field](https://everything.dev/every.near/widget/every.type.create?typeSrc=flowscience.near/type/field): primitives that compose into fileFormats
- fieldName (str, s)
- primitive (str, s)

[record](https://everything.dev/every.near/widget/every.type.create?typeSrc=flowscience.near/type/record): individual pieces of data (a datum)
- recordName (str, s)
- fields (str, m)
- recordValues (str, m)
- recordOwner (str, s)
- isEncrypted (bool, s)
- permissions (thing, s)

permissions:
- TBD
- sking.near/widget/DAO.Permissions

## Job Fileformats

These enable files to be used as instrutions to run jobs over decentralized compute networks.

[See example Colab notebook for off-chain demo.](https://colab.research.google.com/drive/1wHWzHR6zHYUm3RsPJ2pJh2t2WgLti34E?usp=sharing)

[job](): an “.io file” to specify job type and input/output dir

- jobName (str, s)
- jobType (thing, s)
- inputfiles (thing, m)
- CID (str, s)
- owner (str, s)

```json
[
  {
    "outputs": {
      "outdata": {
        "class": "File",
        "filepath": "testdata_fastqc.zip",
        "ipfs": "QmXXKpKz2w1b992MXpSo3Dmohu46d4V4Y2WXLQZtWa9AKR"
      },
      "report": {
        "class": "File",
        "filepath": "testdata_fastqc.html",
        "ipfs": "QmWw6oevnbPqxJGVBMmAVPsRCfHEHcf8D6TFxThXENdx1b"
      }
    },
    "tool": {
      "name": "fastqc",
      "ipfs": "QmRsqab1yXAc8GPipkXkBjTjJq7VpXSRv5qdthLymm4Mzm"
    },
    "inputs": {
      "reads": {
        "class": "File",
        "filepath": "testdata.fastq",
        "ipfs": "QmUvALPCVL5ZgnRWyvfqjrTSK9UgLW1JJTLsisFooRpcGD"
      }
    },
    "state": "completed",
    "errMsg": "",
    "userId": "",
    "bacalhauJobId": "0581f011-8070-4ddb-959b-f6bc2c43e2ed"
  }
]
```

[jobtype](): standard types for jobs

Is this redundant with toolconfig???

- jobType (str, s)
- configFile (thing, s)
- jobFiles (thing, m)

[config](): specify container path and jobtype parameters

Enforce input file formats are of the appropriate type (so the job will work).

Designate output file formats to enable composability in pipeline builder.

- configName (str, s)
- inputfileFormats (thing, m)
- outputfileFormats (thing, m)
- class
- name
- description
- baseCommand:

```json
{
  "class": "Tool",
  "name": "fastqc",
  "description": "Comprehensive quality control tool for high-throughput sequence data",
  "doi": "https://doi.org/10.48550/arXiv.2202.05146",
  "baseCommand": ["/bin/bash", "-c"],
  "arguments": [
    "fastqc $(inputs.reads.filepath) --outdir=/outputs/"
  ],
  
  "dockerPull": "staphb/fastqc:0.12.1@sha256:f5d8f72753269e0cee071fe198c89a59a1f8071445739b3398f7818f7cb039ae",
  "gpuBool": false,
  "networkBool": false,

  "inputs": {
    "reads": {
      "type": "File",
      "glob": ["*.bam", "*.sam", "*.fastq"]
    }
  },

  "outputs": {
    "report": {
      "type": "File",
      "glob": ["*.html"]
    },      
    "outdata": {
      "type": "File",
      "glob": ["*.zip"]
    }
  }
}
```

```json
{
  "class": "CommandLineTool",
  "name": "equibind",
  "description": "Docking of small molecules to a protein",
  "baseCommand": ["/bin/bash", "-c"],
  "arguments": [
    "mkdir -p /tmp-inputs/tmp;",
    "mkdir -p /tmp-outputs/tmp;",
    "cp /inputs/* /tmp-inputs/tmp/;",
    "ls /tmp-inputs/tmp;",
    "cd /src && python /src/inference.py --config=/src/configs_clean/bacalhau.yml;",
    "mv /tmp-outputs/tmp/* /outputs/;",
    "mv /outputs/lig_equibind_corrected.sdf /outputs/$(inputs.protein.basename)_$(inputs.small_molecule.basename)_docked.$(inputs.small_molecule.ext);",
    "mv /tmp-inputs/tmp/*.pdb /outputs/;"],
  "dockerPull": "ghcr.io/labdao/equibind:main@sha256:21a381d9ab1ff047565685044569c8536a55e489c9531326498b28d6b3cc244f",
  "gpuBool": false,
  "networkBool": false,
  "inputs": {
    "protein": {
      "type": "File",
      "item": "",
      "glob": ["*.pdb"]
    },
    "small_molecule": {
      "type": "File",
      "item": "",
      "glob": ["*.sdf", "*.mol2"]
    }
  },
  "outputs": {
    "best_docked_small_molecule": {
      "type": "File",
      "item": "",
      "glob": ["*_docked.sdf", "*_docked.mol2"]
    },
    "protein": {
      "type": "File", 
      "item": "",
      "glob": ["*.pdb"]
    }
  }
}
```
'''
'''--- docs/core_/widgets.md ---
**Widgets:** pseudo-react code stored on-chain, interpreted by the specific VM installed in the decentralized gateway being accessed by the user
    - [everything Widget on Near.org Gateway](https://near.org/efiz.near/widget/everything)
    - efiz.near/thing/core
    - everything.view
        - a `Widget` that takes in the `path` and `blockheight` of a `Thing`,then renders it
        - gets data from the `socialDB contract` ~ socialGet(Type: JSON)
    - [**BOS Gateways Official Docs**](https://docs.near.org/bos/tutorial/bos-gateway)
        - [Deploy a Gateway in less than 5 minutes with no code](https://near.org/ndcplug.near/widget/DeployGateway)
        - [Website & DAO Dashboard](https://www.notion.so/Website-DAO-Dashboard-c2f19f19f16a4b3da2ae0260cf141c91?pvs=21) & [**CGD Gateway**](https://ns-gateway-opencann.vercel.app/)
'''
'''--- docs/index.md ---
create a type = "https://everything.dev/every.near/widget/every.type.create",

types = "./widgets/types",

type = file
file = 

Core
every.file = "",
every.fileformat = "",
every.record = "",
every.field = "",
every.job = "",
every.jobtype = "",
every.toolconfig = "",
profile.impact = "{accountId}/thing/impact.file",

Featured
every.hypercert = "",

---

type = fileFormat

hypercert = "https://everything.dev/mob.near/widget/WidgetSource?src=flowscience.near/thing/fileformat.hypercert",

fileformat.hypercert = 'https://www.notion.so/fileformat-hypercert-cea53b0494314bc4a408ba2c6406ae82?pvs=21",

impact

[fileformat.impact](https://www.notion.so/fileformat-impact-c26a1aacf4084e89b4440d9484cbcb15?pvs=21)

- fileformat.job
- fileformat.jobType
- fileformat.toolConfig

types = fileformats = types???

[type:artist](https://www.notion.so/type-artist-455f0ff7ab2243b5974fb43b0e6bf957?pvs=21)

[type:DAO](https://www.notion.so/type-DAO-188d1ff79c43474eaa4caf652d66d05d?pvs=21)

---

### fields

- [hypercertName](https://everything.dev/mob.near/widget/WidgetSource?src=flowscience.near/thing/field.hypercertName) (string, s)
- [hypercertProject](https://everything.dev/mob.near/widget/WidgetSource?src=flowscience.near/thing/field.hypercertProject) (url, s)
- [hypercertScopeTags](https://everything.dev/mob.near/widget/WidgetSource?src=flowscience.near/thing/field.hypercertScopeTags) (list, s)
- [hypercertWorkStart](https://everything.dev/mob.near/widget/WidgetSource?src=flowscience.near/thing/field.hypercertWorkStart) (date, s)
- [hypercertWorkEnd](https://everything.dev/mob.near/widget/WidgetSource?src=flowscience.near/thing/field.hypercertWorkEnd) (date, s) - how to make indefinite? (leave empty)
- [hypercertContributors](https://everything.dev/mob.near/widget/WidgetSource?src=flowscience.near/thing/field.hypercertContributors) (list, s)
- [hypercertUsageRights](https://everything.dev/mob.near/widget/WidgetSource?src=flowscience.near/thing/field.hypercertUsageRights) (str, s)
- [hypercertAllowlist](https://everything.dev/mob.near/widget/WidgetSource?src=flowscience.near/thing/field.hypercertAllowlist) (list, s)
- [hypercertDistribution](https://everything.dev/mob.near/widget/WidgetSource?src=flowscience.near/thing/field.hypercertDistribution) (int, s) - how to set deduplicate = TRUE???
- description (string, s)
- image (img, s)
- backgroundImage (img, s)

---

### records

- hypercert.1
- file.1
- job.1

---

### jobs

- TBD

---

### jobTypes

- TBD

---
'''
'''--- docs/reference.md ---
# EveryFile/EveryJob: Universal File Format Ontology

[composable.files](https://www.notion.so/composable-files-d1ee9dfea5174e57a4b67fca683f4497?pvs=21)

# Summary/Abstract

<aside>
💡 **************What?
— “**A meta-standard for scientific knowledge graphs.”
**************—************** “An eBay item categorization system for scientific file formats (data types).”
— ”A web app containing input query filters plus a ‘drag & drop’ schematic diagram-style tool to build data science pipelines”

**Why?**
1. Knowledge graphs automate data availability with a unified ontology.
— Solves lack of control over data, interoperability, and access to quality data

2a. Files represent nodes in the network of data that is human knowledge.

2b. Apps are the edges that connect inputs and outputs reproducibly given a set of defined initial conditions (instructions, a set of properties with structured variables).

2c. File formats are standards, but there is no standard by which to classify or relate them. 

**Example use cases:**
1. ”Sticky-ends” for PLEX tool configs.
2. Enable algorithmic pricing & fees on [CannaData Market v2](https://www.notion.so/CannaData-Market-v2-aa038a9f156e4ea38884d0727faad82a?pvs=21) 
  — [Algorithmic Price Determination](https://www.notion.so/Algorithmic-Price-Determination-91a6651a6daa4ccb9eb2336cf5288c7b?pvs=21) 

********How?********
1. Parse & aggregate lists from [File Format Databases](https://www.notion.so/File-Format-Databases-b1f4fd9ed6b04825b02eb425590c5c06?pvs=21).
2. Reconcile category membership into a unified ontology of file formats (types).
3. Relate fields that describe the same property (e.g. a DNA sequence in FASTA format vs tabular) found in > 1 file format to enable cross-querying between file formats.
4. Create references between fields within a given type.
5. Demarcate categorizations (can one file format belong to multiple categories?).
6. Publish a v1 “Scientific File Format Ontology” on-chain.

</aside>

---

# Knowledge Graphs

[Building a knowledge graph for biological experiments](https://niklasrindtorff.substack.com/p/building-a-knowledge-graph-for-biological)

[Schema.org - Schema.org](https://schema.org/)

[Democratizing knowledge representation with BioCypher](https://doi.org/10.1038/s41587-023-01848-y)

> “To rationalize efforts across the community, we propose a modular architecture that maximizes reuse of data and code in three ways: input, ontology and output”
> 

[Democratising Knowledge Graphs - BioCypher](https://biocypher.org/tutorial-ontology.html)

---

## Example Use Case in Marketplace Fee Determination

[Store selling fees](https://www.ebay.com/help/selling/fees-credits-invoices/store-fees?id=4809#section3)

---

## Make It Web3

<aside>
🔥 Can we use [everything.dev](http://everything.dev) to create a composable front-end that implements an on-chain type system for scientific file formats and PLEX tool config files?

Composable in the sense that anyone could use the core deployment to:

— Import any data using existing types or easily mapping new formats to types

— Query any public data imported by previous users

— Import a new tool easily without having to PR the main branch?

— Search or fork and easily reuse any tools used by previous users

— Query usage statistics about data and tools

************Goal: #1:************ make all data and tools imported to PLEX fully composable for all users
**Goal #2:** make a no-code interface

</aside>

**Everything:** a type-system that leverages the power of the BOS to introduce a new paradigm in web development

- A multidimensional and fully interoperable schema for anything
- Creates a meta-standard to group like things together
- Makes every app interoperable
- Enables simple creation of new no-code tools
- Tutorial: [creating a vibe](https://www.notion.so/creating-a-vibe-53d4eb564c594388adf567a44a282676?pvs=21)

[everything](https://everything.dev/#/)

[#BOSAcademy: Building Anything with Everything w/ Elliot from Everything.dev](https://youtu.be/DukrdJtZtSU)

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/cbd4e3ef-b54d-49e8-ad59-bd31c2b8f088/Untitled.png)

## Core Concepts

- **Widgets:** pseudo-react code stored on-chain, interpreted by the specific VM installed in the decentralized gateway being accessed by the user
    - [everything Widget on Near.org Gateway](https://near.org/efiz.near/widget/everything)
    - efiz.near/thing/core
    - everything.view
        - a `Widget` that takes in the `path` and `blockheight` of a `Thing`,then renders it
        - gets data from the `socialDB contract` ~ socialGet(Type: JSON)
    - [**BOS Gateways Official Docs**](https://docs.near.org/bos/tutorial/bos-gateway)
        - [Deploy a Gateway in less than 5 minutes with no code](https://near.org/ndcplug.near/widget/DeployGateway)
        - [Website & DAO Dashboard](https://www.notion.so/Website-DAO-Dashboard-c2f19f19f16a4b3da2ae0260cf141c91?pvs=21) & [**CGD Gateway**](https://ns-gateway-opencann.vercel.app/)
        
- **Things**: `JSON` stored on-chain that can serve as a mutable, generic representation of a `Widget`
    - has a `path` and a `blockHeight`
    - enable gasless widget updates
        - How?`JSON` `Thing` is much smaller than the code for a `Widget`
        - Why?
    
- **Types**: `JSON` stored on-chain that describes the *properties* and *default behavior* of a `Thing`
    - Has a “name”, an “owner”, and a list of “properties”
    - Properties have their own `Type` definitions
    - a `Type` can have properties that follow other `Types`
        - enables recursion, attribution/provenance, and
        - use properties to construct creators to put other data inside of it unique to a `Type`
        
- **Templates**: a `Widget` whose `props` follow the `Type`
    - Configured in the `Thing`
    
- **Plugins**: `type`-specific `Widget` that can interact with a `Thing`
    - Installed by the user and stored in the settings

---

![EveryFile_EveryJob.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/2d39bc7f-51ec-4dad-8ea3-9ed8945c761d/EveryFile_EveryJob.png)

### Bonus things

<aside>
🔥 [**How to make a widget that lets any number of users co-author a single data set published to IPFS with any number of conditionally permissioned groups (that themselves grant permissions to perform actions on the data) as a subDAO composed of multiple co-governed data sets](https://zoom.us/rec/play/Has23VFc4K6YVi3MrkP7bGJdIsU_bBF6DALrQAgvDvVbCO1MC3NIl1gcpqP2AUM7MFKQjePlFF4pd3Fb.siXIFgtKf85H9NZl?canPlayFromShare=true&from=share_recording_detail&continueMode=true&iet=p2Y_y76wqD0oL_WWxFAV2peZL5LGHDq5N5NXkhxFNsw.AG.V-g9KO7B3etjvw2ikeBafEVzVQNvUCfY5iy1ny6L5cZ_-ivp9lOSdVGZDY9YCilnPIJa23JqHgAk4YDeIML-3fCDdfMs6rQi-ZBf5ywmBNT--Y8yw0F8BPLq74oHQ7s.P3J20WMRLKEL63N6wCT7aA.Ke455XDKF2btNCLJ&componentName=rec-play&originRequestUrl=https%3A%2F%2Fzoom.us%2Frec%2Fshare%2FFMpqFw9KTJAaTEYTFDXhdU42Z2RYrnAvWmn4ityEh_BFX6X0yX3vTVsdoeYsFUIj.C_M_BnX6XknkjiT8%3Fiet%3Dp2Y_y76wqD0oL_WWxFAV2peZL5LGHDq5N5NXkhxFNsw.AG.V-g9KO7B3etjvw2ikeBafEVzVQNvUCfY5iy1ny6L5cZ_-ivp9lOSdVGZDY9YCilnPIJa23JqHgAk4YDeIML-3fCDdfMs6rQi-ZBf5ywmBNT--Y8yw0F8BPLq74oHQ7s.P3J20WMRLKEL63N6wCT7aA.Ke455XDKF2btNCLJ).**

</aside>

[The answer to life, the universe, and everything](https://news.mit.edu/2019/answer-life-universe-and-everything-sum-three-cubes-mathematics-0910)

https://miro.com/app/board/uXjVMAagN8I=/?share_link_id=306551922473

---

## Make It Chain Agnostic

[#BOSAcademy: BOS Component Design Patterns w/ Manza from Meta Pool](https://youtu.be/IJjoTAIr4Pk)

https://github.com/leomanza/chain-agnostic-bos-workshop

---

<aside>
🔥 [**NEAR BOS Hacks**](https://www.notion.so/634d7b082a1b4068b188f804b92f531a?pvs=21) - August 2023

</aside>

## Next Steps

1. **Upload all curated & processed data to IFPS the map to Types**
    - Awaiting response about free storage from [CO2.storage](http://CO2.storage) given the size of the full dataset
    
2. **Integrate SFTO into a[Decentralized Peer-Review](https://www.notion.so/Decentralized-Peer-Review-c7e5a3638d8c4faabdb6bc7e0782a3cd?pvs=21) process**
    1. Enable composable units of reproducible science
    
3. Onboard users to **SFTO to increase data availability for [CGD-GPT](https://www.notion.so/CGD-GPT-ab784ea8e1a24b1b8c94d081bd524a48?pvs=21)** 
    1. Mapping to Types enables identification and query of new data
    2. Create a simple mass-appeal app & farm engagement

1. Onboard genomics tools and other [Computational Biology](https://www.notion.so/Computational-Biology-9aadfce1c2ec4d008de5039ca63ad5db?pvs=21) packages

1. Finish pre-clinical computational study to identify new putative molecular interactions of over 6,500 unique small molecules identified in cannabis with all known cannabinoid receptors.

https://docs.google.com/presentation/d/1G0k1NGrhU80s7Genu0tmt9bDgNaw4eGaqWyMcjFoW9M/edit?usp=sharing

!https://media.tenor.com/9SJkqYxh_gYAAAAC/stapler-pepe.gif
'''
'''--- docs/typeDAO.md ---
# type:DAO

Owner: Elijah

<aside>
💡 The below is copied from: [https://www.notion.so/sekaiking/b82607eff26046d1a7a3430455cb1ae7](https://www.notion.so/b82607eff26046d1a7a3430455cb1ae7?pvs=21)

</aside>

- The CreateDAO widget: [https://near.org/near/widget/ComponentDetailsPage?src=astro.sking.near/widget/CreateDAO.index&tab=source](https://near.org/near/widget/ComponentDetailsPage?src=astro.sking.near/widget/CreateDAO.index&tab=source)
- DAO type: [https://near.social/mob.near/widget/WidgetSource?src=astro.sking.near/type/dao](https://near.social/mob.near/widget/WidgetSource?src=astro.sking.near/type/dao)

- fields
    - handle (string, s)
    - avatar (img, s)
    - name (string, s)
    - bio (string, s)
    - links (key:value, m)
        - key:value (string, s)
- artist.records
- artist.files
- artist.jobs
- artist.jobTypes
'''
'''--- package-lock.json ---
{
  "name": "hyperfiles",
  "version": "1.0.0",
  "lockfileVersion": 2,
  "requires": true,
  "packages": {
    "": {
      "name": "hyperfiles",
      "version": "1.0.0",
      "license": "ISC",
      "dependencies": {
        "bos-workspace": "^1.0.0-alpha"
      }
    },
    "node_modules/@hapi/hoek": {
      "version": "9.3.0",
      "resolved": "https://registry.npmjs.org/@hapi/hoek/-/hoek-9.3.0.tgz",
      "integrity": "sha512-/c6rf4UJlmHlC9b5BaNvzAcFv7HZ2QHaV0D4/HNlBdvFnvQq8RI4kYdhyPCl7Xj+oWvTWQ8ujhqS53LIgAe6KQ=="
    },
    "node_modules/@hapi/topo": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/@hapi/topo/-/topo-5.1.0.tgz",
      "integrity": "sha512-foQZKJig7Ob0BMAYBfcJk8d77QtOe7Wo4ox7ff1lQYoNNAb6jwcY1ncdoy2e9wQZzvNy7ODZCYJkK8kzmcAnAg==",
      "dependencies": {
        "@hapi/hoek": "^9.0.0"
      }
    },
    "node_modules/@isaacs/cliui": {
      "version": "8.0.2",
      "resolved": "https://registry.npmjs.org/@isaacs/cliui/-/cliui-8.0.2.tgz",
      "integrity": "sha512-O8jcjabXaleOG9DQ0+ARXWZBTfnP4WNAqzuiJK7ll44AmxGKv/J2M4TPjxjY3znBCfvBXFzucm1twdyFybFqEA==",
      "dependencies": {
        "string-width": "^5.1.2",
        "string-width-cjs": "npm:string-width@^4.2.0",
        "strip-ansi": "^7.0.1",
        "strip-ansi-cjs": "npm:strip-ansi@^6.0.1",
        "wrap-ansi": "^8.1.0",
        "wrap-ansi-cjs": "npm:wrap-ansi@^7.0.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@jridgewell/gen-mapping": {
      "version": "0.3.5",
      "resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.5.tgz",
      "integrity": "sha512-IzL8ZoEDIBRWEzlCcRhOaCupYyN5gdIK+Q6fbFdPDg6HqX6jpkItn7DFIpW9LQzXG6Df9sA7+OKnq0qlz/GaQg==",
      "dependencies": {
        "@jridgewell/set-array": "^1.2.1",
        "@jridgewell/sourcemap-codec": "^1.4.10",
        "@jridgewell/trace-mapping": "^0.3.24"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/resolve-uri": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.2.tgz",
      "integrity": "sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==",
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/set-array": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/@jridgewell/set-array/-/set-array-1.2.1.tgz",
      "integrity": "sha512-R8gLRTZeyp03ymzP/6Lil/28tGeGEzhx1q2k703KGWRAI1VdvPIXdG70VJc2pAMw3NA6JKL5hhFu1sJX0Mnn/A==",
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/sourcemap-codec": {
      "version": "1.4.15",
      "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.4.15.tgz",
      "integrity": "sha512-eF2rxCRulEKXHTRiDrDy6erMYWqNw4LPdQ8UQA4huuxaQsVeRPFl2oM8oDGxMFhJUWZf9McpLtJasDDZb/Bpeg=="
    },
    "node_modules/@jridgewell/trace-mapping": {
      "version": "0.3.25",
      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.25.tgz",
      "integrity": "sha512-vNk6aEwybGtawWmy/PzwnGDOjCkLWSD2wqvjGGAgOAwCGWySYXfYoxt00IJkTF+8Lb57DwOb3Aa0o9CApepiYQ==",
      "dependencies": {
        "@jridgewell/resolve-uri": "^3.1.0",
        "@jridgewell/sourcemap-codec": "^1.4.14"
      }
    },
    "node_modules/@pkgjs/parseargs": {
      "version": "0.11.0",
      "resolved": "https://registry.npmjs.org/@pkgjs/parseargs/-/parseargs-0.11.0.tgz",
      "integrity": "sha512-+1VkjdD0QBLPodGrJUeqarH8VAIvQODIbwh9XpP5Syisf7YoQgsJKPNFoqqLQlu+VQ/tVSshMR6loPMn8U+dPg==",
      "optional": true,
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/@sideway/address": {
      "version": "4.1.5",
      "resolved": "https://registry.npmjs.org/@sideway/address/-/address-4.1.5.tgz",
      "integrity": "sha512-IqO/DUQHUkPeixNQ8n0JA6102hT9CmaljNTPmQ1u8MEhBo/R4Q8eKLN/vGZxuebwOroDB4cbpjheD4+/sKFK4Q==",
      "dependencies": {
        "@hapi/hoek": "^9.0.0"
      }
    },
    "node_modules/@sideway/formula": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/@sideway/formula/-/formula-3.0.1.tgz",
      "integrity": "sha512-/poHZJJVjx3L+zVD6g9KgHfYnb443oi7wLu/XKojDviHy6HOEOA6z1Trk5aR1dGcmPenJEgb2sK2I80LeS3MIg=="
    },
    "node_modules/@sideway/pinpoint": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/@sideway/pinpoint/-/pinpoint-2.0.0.tgz",
      "integrity": "sha512-RNiOoTPkptFtSVzQevY/yWtZwf/RxyVnPy/OcA9HBM3MlGDnBEYL5B41H0MTn0Uec8Hi+2qUtTfG2WWZBmMejQ=="
    },
    "node_modules/@socket.io/component-emitter": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/@socket.io/component-emitter/-/component-emitter-3.1.1.tgz",
      "integrity": "sha512-dzJtaDAAoXx4GCOJpbB2eG/Qj8VDpdwkLsWGzGm+0L7E8/434RyMbAHmk9ubXWVAb9nXmc44jUf8GKqVDiKezg=="
    },
    "node_modules/@types/cookie": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/@types/cookie/-/cookie-0.4.1.tgz",
      "integrity": "sha512-XW/Aa8APYr6jSVVA1y/DEIZX0/GMKLEVekNG727R8cs56ahETkRAy/3DR7+fJyh7oUgGwNQaRfXCun0+KbWY7Q=="
    },
    "node_modules/@types/cors": {
      "version": "2.8.17",
      "resolved": "https://registry.npmjs.org/@types/cors/-/cors-2.8.17.tgz",
      "integrity": "sha512-8CGDvrBj1zgo2qE+oS3pOCyYNqCPryMWY2bGfwA0dcfopWGgxs+78df0Rs3rc9THP4JkOhLsAa+15VdpAqkcUA==",
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/node": {
      "version": "20.12.7",
      "resolved": "https://registry.npmjs.org/@types/node/-/node-20.12.7.tgz",
      "integrity": "sha512-wq0cICSkRLVaf3UGLMGItu/PtdY7oaXaI/RVU+xliKVOtRna3PRY57ZDfztpDL0n11vfymMUnXv8QwYCO7L1wg==",
      "dependencies": {
        "undici-types": "~5.26.4"
      }
    },
    "node_modules/accepts": {
      "version": "1.3.8",
      "resolved": "https://registry.npmjs.org/accepts/-/accepts-1.3.8.tgz",
      "integrity": "sha512-PYAthTa2m2VKxuvSD3DPC/Gy+U+sOA1LAuT8mkmRuvw+NACSaeXEQ+NHcVF7rONl6qcaxV3Uuemwawk+7+SJLw==",
      "dependencies": {
        "mime-types": "~2.1.34",
        "negotiator": "0.6.3"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/ansi-regex": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-6.0.1.tgz",
      "integrity": "sha512-n5M855fKb2SsfMIiFFoVrABHJC8QtHwVx+mHWP3QcEqBHYienj5dHSgjbxtC0WEZXYt4wcD6zrQElDPhFuZgfA==",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-regex?sponsor=1"
      }
    },
    "node_modules/ansi-styles": {
      "version": "6.2.1",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-6.2.1.tgz",
      "integrity": "sha512-bN798gFfQX+viw3R7yrGWRqnrN2oRkEkUjjl4JNn4E8GxxbjtG3FbrEIIY3l8/hrwUwIeCZvi4QuOTP4MErVug==",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/any-promise": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/any-promise/-/any-promise-1.3.0.tgz",
      "integrity": "sha512-7UvmKalWRt1wgjL1RrGxoSJW/0QZFIegpeGvZG9kjp8vrRu55XTHbwnqq2GpXm9uLbcuhxm3IqX9OB4MZR1b2A=="
    },
    "node_modules/array-flatten": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/array-flatten/-/array-flatten-1.1.1.tgz",
      "integrity": "sha512-PCVAQswWemu6UdxsDFFX/+gVeYqKAod3D3UVm91jHwynguOwAvYPhx8nNlM++NqRcK6CxxpUafjmhIdKiHibqg=="
    },
    "node_modules/balanced-match": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
      "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw=="
    },
    "node_modules/base64id": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/base64id/-/base64id-2.0.0.tgz",
      "integrity": "sha512-lGe34o6EHj9y3Kts9R4ZYs/Gr+6N7MCaMlIFA3F1R2O5/m7K06AxfSeO5530PEERE6/WyEg3lsuyw4GHlPZHog==",
      "engines": {
        "node": "^4.5.0 || >= 5.9"
      }
    },
    "node_modules/body-parser": {
      "version": "1.20.1",
      "resolved": "https://registry.npmjs.org/body-parser/-/body-parser-1.20.1.tgz",
      "integrity": "sha512-jWi7abTbYwajOytWCQc37VulmWiRae5RyTpaCyDcS5/lMdtwSz5lOpDE67srw/HYe35f1z3fDQw+3txg7gNtWw==",
      "dependencies": {
        "bytes": "3.1.2",
        "content-type": "~1.0.4",
        "debug": "2.6.9",
        "depd": "2.0.0",
        "destroy": "1.2.0",
        "http-errors": "2.0.0",
        "iconv-lite": "0.4.24",
        "on-finished": "2.4.1",
        "qs": "6.11.0",
        "raw-body": "2.5.1",
        "type-is": "~1.6.18",
        "unpipe": "1.0.0"
      },
      "engines": {
        "node": ">= 0.8",
        "npm": "1.2.8000 || >= 1.4.16"
      }
    },
    "node_modules/bos-workspace": {
      "version": "1.0.0-alpha.9",
      "resolved": "https://registry.npmjs.org/bos-workspace/-/bos-workspace-1.0.0-alpha.9.tgz",
      "integrity": "sha512-RB8dD3AWbFCELzDr8NSp1TMdYUq8fOL5/SpRZiOBZqNO9r9Xb1huYn5ULfJkd6Ljz5VYDDf5f5oi1zoWq3Cjaw==",
      "dependencies": {
        "commander": "^11.1.0",
        "crypto-js": "^4.2.0",
        "express": "^4.18.2",
        "fs-extra": "^11.2.0",
        "gaze": "^1.1.3",
        "glob": "^10.3.10",
        "joi": "^17.11.0",
        "multilang-extract-comments": "^0.4.0",
        "prettier": "^2.8.8",
        "socket.io": "^4.7.3",
        "sucrase": "^3.34.0"
      },
      "bin": {
        "bos-workspace": "bin/bw.js",
        "bw": "bin/bw.js"
      }
    },
    "node_modules/brace-expansion": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-2.0.1.tgz",
      "integrity": "sha512-XnAIvQ8eM+kC6aULx6wuQiwVsnzsi9d3WxzV3FpWTGA19F621kwdbsAcFKXgKUHZWsy+mY6iL1sHTxWEFCytDA==",
      "dependencies": {
        "balanced-match": "^1.0.0"
      }
    },
    "node_modules/bytes": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/bytes/-/bytes-3.1.2.tgz",
      "integrity": "sha512-/Nf7TyzTx6S3yRJObOAV7956r8cr2+Oj8AC5dt8wSP3BQAoeX58NoHyCU8P8zGkNXStjTSi6fzO6F0pBdcYbEg==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/call-bind": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/call-bind/-/call-bind-1.0.5.tgz",
      "integrity": "sha512-C3nQxfFZxFRVoJoGKKI8y3MOEo129NQ+FgQ08iye+Mk4zNZZGdjfs06bVTr+DBSlA66Q2VEcMki/cUCP4SercQ==",
      "dependencies": {
        "function-bind": "^1.1.2",
        "get-intrinsic": "^1.2.1",
        "set-function-length": "^1.1.1"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA=="
    },
    "node_modules/commander": {
      "version": "11.1.0",
      "resolved": "https://registry.npmjs.org/commander/-/commander-11.1.0.tgz",
      "integrity": "sha512-yPVavfyCcRhmorC7rWlkHn15b4wDVgVmBA7kV4QVBsF7kv/9TKJAbAXVTxvTnwP8HHKjRCJDClKbciiYS7p0DQ==",
      "engines": {
        "node": ">=16"
      }
    },
    "node_modules/comment-patterns": {
      "version": "0.12.2",
      "resolved": "https://registry.npmjs.org/comment-patterns/-/comment-patterns-0.12.2.tgz",
      "integrity": "sha512-yA1FeubMSK0MXzapPm1uNdxyGk0mTAn5qrsVS6uQUSDOpUgWVLCqsgZfA/lhRx6TCLr1MvxeRqXOb1peWXWg3Q==",
      "dependencies": {
        "lodash": "^4.17.11"
      }
    },
    "node_modules/concat-map": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
      "integrity": "sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg=="
    },
    "node_modules/content-disposition": {
      "version": "0.5.4",
      "resolved": "https://registry.npmjs.org/content-disposition/-/content-disposition-0.5.4.tgz",
      "integrity": "sha512-FveZTNuGw04cxlAiWbzi6zTAL/lhehaWbTtgluJh4/E95DqMwTmha3KZN1aAWA8cFIhHzMZUvLevkw5Rqk+tSQ==",
      "dependencies": {
        "safe-buffer": "5.2.1"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/content-type": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/content-type/-/content-type-1.0.5.tgz",
      "integrity": "sha512-nTjqfcBFEipKdXCv4YDQWCfmcLZKm81ldF0pAopTvyrFGVbcR6P/VAAd5G7N+0tTr8QqiU0tFadD6FK4NtJwOA==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/cookie": {
      "version": "0.5.0",
      "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.5.0.tgz",
      "integrity": "sha512-YZ3GUyn/o8gfKJlnlX7g7xq4gyO6OSuhGPKaaGssGB2qgDUS0gPgtTvoyZLTt9Ab6dC4hfc9dV5arkvc/OCmrw==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/cookie-signature": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.6.tgz",
      "integrity": "sha512-QADzlaHc8icV8I7vbaJXJwod9HWYp8uCqf1xa4OfNu1T7JVxQIrUgOWtHdNDtPiywmFbiS12VjotIXLrKM3orQ=="
    },
    "node_modules/cors": {
      "version": "2.8.5",
      "resolved": "https://registry.npmjs.org/cors/-/cors-2.8.5.tgz",
      "integrity": "sha512-KIHbLJqu73RGr/hnbrO9uBeixNGuvSQjul/jdFvS/KFSIH1hWVd1ng7zOHx+YrEfInLG7q4n6GHQ9cDtxv/P6g==",
      "dependencies": {
        "object-assign": "^4",
        "vary": "^1"
      },
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/cross-spawn": {
      "version": "7.0.3",
      "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.3.tgz",
      "integrity": "sha512-iRDPJKUPVEND7dHPO8rkbOnPpyDygcDFtWjpeWNCgy8WP2rXcxXL8TskReQl6OrB2G7+UJrags1q15Fudc7G6w==",
      "dependencies": {
        "path-key": "^3.1.0",
        "shebang-command": "^2.0.0",
        "which": "^2.0.1"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/crypto-js": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/crypto-js/-/crypto-js-4.2.0.tgz",
      "integrity": "sha512-KALDyEYgpY+Rlob/iriUtjV6d5Eq+Y191A5g4UqLAi8CyGP9N1+FdVbkc1SxKc2r4YAYqG8JzO2KGL+AizD70Q=="
    },
    "node_modules/debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/define-data-property": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/define-data-property/-/define-data-property-1.1.1.tgz",
      "integrity": "sha512-E7uGkTzkk1d0ByLeSc6ZsFS79Axg+m1P/VsgYsxHgiuc3tFSj+MjMIwe90FC4lOAZzNBdY7kkO2P2wKdsQ1vgQ==",
      "dependencies": {
        "get-intrinsic": "^1.2.1",
        "gopd": "^1.0.1",
        "has-property-descriptors": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/depd": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/depd/-/depd-2.0.0.tgz",
      "integrity": "sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/destroy": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/destroy/-/destroy-1.2.0.tgz",
      "integrity": "sha512-2sJGJTaXIIaR1w4iJSNoN0hnMY7Gpc/n8D4qSCJw8QqFWXf7cuAgnEHxBpweaVcPevC2l3KpjYCx3NypQQgaJg==",
      "engines": {
        "node": ">= 0.8",
        "npm": "1.2.8000 || >= 1.4.16"
      }
    },
    "node_modules/eastasianwidth": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/eastasianwidth/-/eastasianwidth-0.2.0.tgz",
      "integrity": "sha512-I88TYZWc9XiYHRQ4/3c5rjjfgkjhLyW2luGIheGERbNQ6OY7yTybanSpDXZa8y7VUP9YmDcYa+eyq4ca7iLqWA=="
    },
    "node_modules/ee-first": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/ee-first/-/ee-first-1.1.1.tgz",
      "integrity": "sha512-WMwm9LhRUo+WUaRN+vRuETqG89IgZphVSNkdFgeb6sS/E4OrDIN7t48CAewSHXc6C8lefD8KKfr5vY61brQlow=="
    },
    "node_modules/emoji-regex": {
      "version": "9.2.2",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-9.2.2.tgz",
      "integrity": "sha512-L18DaJsXSUk2+42pv8mLs5jJT2hqFkFE4j21wOmgbUqsZ2hL72NsUU785g9RXgo3s0ZNgVl42TiHp3ZtOv/Vyg=="
    },
    "node_modules/encodeurl": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-1.0.2.tgz",
      "integrity": "sha512-TPJXq8JqFaVYm2CWmPvnP2Iyo4ZSM7/QKcSmuMLDObfpH5fi7RUGmd/rTDf+rut/saiDiQEeVTNgAmJEdAOx0w==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/engine.io": {
      "version": "6.5.4",
      "resolved": "https://registry.npmjs.org/engine.io/-/engine.io-6.5.4.tgz",
      "integrity": "sha512-KdVSDKhVKyOi+r5uEabrDLZw2qXStVvCsEB/LN3mw4WFi6Gx50jTyuxYVCwAAC0U46FdnzP/ScKRBTXb/NiEOg==",
      "dependencies": {
        "@types/cookie": "^0.4.1",
        "@types/cors": "^2.8.12",
        "@types/node": ">=10.0.0",
        "accepts": "~1.3.4",
        "base64id": "2.0.0",
        "cookie": "~0.4.1",
        "cors": "~2.8.5",
        "debug": "~4.3.1",
        "engine.io-parser": "~5.2.1",
        "ws": "~8.11.0"
      },
      "engines": {
        "node": ">=10.2.0"
      }
    },
    "node_modules/engine.io-parser": {
      "version": "5.2.2",
      "resolved": "https://registry.npmjs.org/engine.io-parser/-/engine.io-parser-5.2.2.tgz",
      "integrity": "sha512-RcyUFKA93/CXH20l4SoVvzZfrSDMOTUS3bWVpTt2FuFP+XYrL8i8oonHP7WInRyVHXh0n/ORtoeiE1os+8qkSw==",
      "engines": {
        "node": ">=10.0.0"
      }
    },
    "node_modules/engine.io/node_modules/cookie": {
      "version": "0.4.2",
      "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.4.2.tgz",
      "integrity": "sha512-aSWTXFzaKWkvHO1Ny/s+ePFpvKsPnjc551iI41v3ny/ow6tBG5Vd+FuqGNhh1LxOmVzOlGUriIlOaokOvhaStA==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/engine.io/node_modules/debug": {
      "version": "4.3.4",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
      "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
      "dependencies": {
        "ms": "2.1.2"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/engine.io/node_modules/ms": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
      "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w=="
    },
    "node_modules/escape-html": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz",
      "integrity": "sha512-NiSupZ4OeuGwr68lGIeym/ksIZMJodUGOSCZ/FSnTxcrekbvqrgdUxlJOMpijaKZVjAJrWrGs/6Jy8OMuyj9ow=="
    },
    "node_modules/etag": {
      "version": "1.8.1",
      "resolved": "https://registry.npmjs.org/etag/-/etag-1.8.1.tgz",
      "integrity": "sha512-aIL5Fx7mawVa300al2BnEE4iNvo1qETxLrPI/o05L7z6go7fCw1J6EQmbK4FmJ2AS7kgVF/KEZWufBfdClMcPg==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/express": {
      "version": "4.18.2",
      "resolved": "https://registry.npmjs.org/express/-/express-4.18.2.tgz",
      "integrity": "sha512-5/PsL6iGPdfQ/lKM1UuielYgv3BUoJfz1aUwU9vHZ+J7gyvwdQXFEBIEIaxeGf0GIcreATNyBExtalisDbuMqQ==",
      "dependencies": {
        "accepts": "~1.3.8",
        "array-flatten": "1.1.1",
        "body-parser": "1.20.1",
        "content-disposition": "0.5.4",
        "content-type": "~1.0.4",
        "cookie": "0.5.0",
        "cookie-signature": "1.0.6",
        "debug": "2.6.9",
        "depd": "2.0.0",
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "etag": "~1.8.1",
        "finalhandler": "1.2.0",
        "fresh": "0.5.2",
        "http-errors": "2.0.0",
        "merge-descriptors": "1.0.1",
        "methods": "~1.1.2",
        "on-finished": "2.4.1",
        "parseurl": "~1.3.3",
        "path-to-regexp": "0.1.7",
        "proxy-addr": "~2.0.7",
        "qs": "6.11.0",
        "range-parser": "~1.2.1",
        "safe-buffer": "5.2.1",
        "send": "0.18.0",
        "serve-static": "1.15.0",
        "setprototypeof": "1.2.0",
        "statuses": "2.0.1",
        "type-is": "~1.6.18",
        "utils-merge": "1.0.1",
        "vary": "~1.1.2"
      },
      "engines": {
        "node": ">= 0.10.0"
      }
    },
    "node_modules/finalhandler": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/finalhandler/-/finalhandler-1.2.0.tgz",
      "integrity": "sha512-5uXcUVftlQMFnWC9qu/svkWv3GTd2PfUhK/3PLkYNAe7FbqJMt3515HaxE6eRL74GdsriiwujiawdaB1BpEISg==",
      "dependencies": {
        "debug": "2.6.9",
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "on-finished": "2.4.1",
        "parseurl": "~1.3.3",
        "statuses": "2.0.1",
        "unpipe": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/foreground-child": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/foreground-child/-/foreground-child-3.1.1.tgz",
      "integrity": "sha512-TMKDUnIte6bfb5nWv7V/caI169OHgvwjb7V4WkeUvbQQdjr5rWKqHFiKWb/fcOwB+CzBT+qbWjvj+DVwRskpIg==",
      "dependencies": {
        "cross-spawn": "^7.0.0",
        "signal-exit": "^4.0.1"
      },
      "engines": {
        "node": ">=14"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/forwarded": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/forwarded/-/forwarded-0.2.0.tgz",
      "integrity": "sha512-buRG0fpBtRHSTCOASe6hD258tEubFoRLb4ZNA6NxMVHNw2gOcwHo9wyablzMzOA5z9xA9L1KNjk/Nt6MT9aYow==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/fresh": {
      "version": "0.5.2",
      "resolved": "https://registry.npmjs.org/fresh/-/fresh-0.5.2.tgz",
      "integrity": "sha512-zJ2mQYM18rEFOudeV4GShTGIQ7RbzA7ozbU9I/XBpm7kqgMywgmylMwXHxZJmkVoYkna9d2pVXVXPdYTP9ej8Q==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/fs-extra": {
      "version": "11.2.0",
      "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-11.2.0.tgz",
      "integrity": "sha512-PmDi3uwK5nFuXh7XDTlVnS17xJS7vW36is2+w3xcv8SVxiB4NyATf4ctkVY5bkSjX0Y4nbvZCq1/EjtEyr9ktw==",
      "dependencies": {
        "graceful-fs": "^4.2.0",
        "jsonfile": "^6.0.1",
        "universalify": "^2.0.0"
      },
      "engines": {
        "node": ">=14.14"
      }
    },
    "node_modules/fs.realpath": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz",
      "integrity": "sha512-OO0pH2lK6a0hZnAdau5ItzHPI6pUlvI7jMVnxUQRtw4owF2wk8lOSabtGDCTP4Ggrg2MbGnWO9X8K1t4+fGMDw=="
    },
    "node_modules/function-bind": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz",
      "integrity": "sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/gaze": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/gaze/-/gaze-1.1.3.tgz",
      "integrity": "sha512-BRdNm8hbWzFzWHERTrejLqwHDfS4GibPoq5wjTPIoJHoBtKGPg3xAFfxmM+9ztbXelxcf2hwQcaz1PtmFeue8g==",
      "dependencies": {
        "globule": "^1.0.0"
      },
      "engines": {
        "node": ">= 4.0.0"
      }
    },
    "node_modules/get-intrinsic": {
      "version": "1.2.2",
      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.2.2.tgz",
      "integrity": "sha512-0gSo4ml/0j98Y3lngkFEot/zhiCeWsbYIlZ+uZOVgzLyLaUw7wxUL+nCTP0XJvJg1AXulJRI3UJi8GsbDuxdGA==",
      "dependencies": {
        "function-bind": "^1.1.2",
        "has-proto": "^1.0.1",
        "has-symbols": "^1.0.3",
        "hasown": "^2.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/glob": {
      "version": "10.3.12",
      "resolved": "https://registry.npmjs.org/glob/-/glob-10.3.12.tgz",
      "integrity": "sha512-TCNv8vJ+xz4QiqTpfOJA7HvYv+tNIRHKfUWw/q+v2jdgN4ebz+KY9tGx5J4rHP0o84mNP+ApH66HRX8us3Khqg==",
      "dependencies": {
        "foreground-child": "^3.1.0",
        "jackspeak": "^2.3.6",
        "minimatch": "^9.0.1",
        "minipass": "^7.0.4",
        "path-scurry": "^1.10.2"
      },
      "bin": {
        "glob": "dist/esm/bin.mjs"
      },
      "engines": {
        "node": ">=16 || 14 >=14.17"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/globule": {
      "version": "1.3.4",
      "resolved": "https://registry.npmjs.org/globule/-/globule-1.3.4.tgz",
      "integrity": "sha512-OPTIfhMBh7JbBYDpa5b+Q5ptmMWKwcNcFSR/0c6t8V4f3ZAVBEsKNY37QdVqmLRYSMhOUGYrY0QhSoEpzGr/Eg==",
      "dependencies": {
        "glob": "~7.1.1",
        "lodash": "^4.17.21",
        "minimatch": "~3.0.2"
      },
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/globule/node_modules/brace-expansion": {
      "version": "1.1.11",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
      "dependencies": {
        "balanced-match": "^1.0.0",
        "concat-map": "0.0.1"
      }
    },
    "node_modules/globule/node_modules/glob": {
      "version": "7.1.7",
      "resolved": "https://registry.npmjs.org/glob/-/glob-7.1.7.tgz",
      "integrity": "sha512-OvD9ENzPLbegENnYP5UUfJIirTg4+XwMWGaQfQTY0JenxNvvIKP3U3/tAQSPIu/lHxXYSZmpXlUHeqAIdKzBLQ==",
      "dependencies": {
        "fs.realpath": "^1.0.0",
        "inflight": "^1.0.4",
        "inherits": "2",
        "minimatch": "^3.0.4",
        "once": "^1.3.0",
        "path-is-absolute": "^1.0.0"
      },
      "engines": {
        "node": "*"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/globule/node_modules/minimatch": {
      "version": "3.0.8",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.0.8.tgz",
      "integrity": "sha512-6FsRAQsxQ61mw+qP1ZzbL9Bc78x2p5OqNgNpnoAFLTrX8n5Kxph0CsnhmKKNXTWjXqU5L0pGPR7hYk+XWZr60Q==",
      "dependencies": {
        "brace-expansion": "^1.1.7"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/gopd": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/gopd/-/gopd-1.0.1.tgz",
      "integrity": "sha512-d65bNlIadxvpb/A2abVdlqKqV563juRnZ1Wtk6s1sIR8uNsXR70xqIzVqxVf1eTqDunwT2MkczEeaezCKTZhwA==",
      "dependencies": {
        "get-intrinsic": "^1.1.3"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/graceful-fs": {
      "version": "4.2.11",
      "resolved": "https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.2.11.tgz",
      "integrity": "sha512-RbJ5/jmFcNNCcDV5o9eTnBLJ/HszWV0P73bc+Ff4nS/rJj+YaS6IGyiOL0VoBYX+l1Wrl3k63h/KrH+nhJ0XvQ=="
    },
    "node_modules/has-property-descriptors": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/has-property-descriptors/-/has-property-descriptors-1.0.1.tgz",
      "integrity": "sha512-VsX8eaIewvas0xnvinAe9bw4WfIeODpGYikiWYLH+dma0Jw6KHYqWiWfhQlgOVK8D6PvjubK5Uc4P0iIhIcNVg==",
      "dependencies": {
        "get-intrinsic": "^1.2.2"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/has-proto/-/has-proto-1.0.1.tgz",
      "integrity": "sha512-7qE+iP+O+bgF9clE5+UoBFzE65mlBiVj3tKCrlNQ0Ogwm0BjpT/gK4SlLYDMybDh5I3TCTKnPPa0oMG7JDYrhg==",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-symbols": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.0.3.tgz",
      "integrity": "sha512-l3LCuF6MgDNwTDKkdYGEihYjt5pRPbEg46rtlmnSPlUbgmB8LOIrKJbYYFBSbnPaJexMKtiPO8hmeRjRz2Td+A==",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/hasown": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/hasown/-/hasown-2.0.0.tgz",
      "integrity": "sha512-vUptKVTpIJhcczKBbgnS+RtcuYMB8+oNzPK2/Hp3hanz8JmpATdmmgLgSaadVREkDm+e2giHwY3ZRkyjSIDDFA==",
      "dependencies": {
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/http-errors": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-2.0.0.tgz",
      "integrity": "sha512-FtwrG/euBzaEjYeRqOgly7G0qviiXoJWnvEH2Z1plBdXgbyjv34pHTSb9zoeHMyDy33+DWy5Wt9Wo+TURtOYSQ==",
      "dependencies": {
        "depd": "2.0.0",
        "inherits": "2.0.4",
        "setprototypeof": "1.2.0",
        "statuses": "2.0.1",
        "toidentifier": "1.0.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/iconv-lite": {
      "version": "0.4.24",
      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.24.tgz",
      "integrity": "sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==",
      "dependencies": {
        "safer-buffer": ">= 2.1.2 < 3"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/inflight": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz",
      "integrity": "sha512-k92I/b08q4wvFscXCLvqfsHCrjrF7yiXsQuIVvVE7N82W3+aqpzuUdBbfhWcy/FZR3/4IgflMgKLOsvPDrGCJA==",
      "dependencies": {
        "once": "^1.3.0",
        "wrappy": "1"
      }
    },
    "node_modules/inherits": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ=="
    },
    "node_modules/ipaddr.js": {
      "version": "1.9.1",
      "resolved": "https://registry.npmjs.org/ipaddr.js/-/ipaddr.js-1.9.1.tgz",
      "integrity": "sha512-0KI/607xoxSToH7GjN1FfSbLoU0+btTicjsQSWQlh/hZykN8KpmMf7uYwPW3R+akZ6R/w18ZlXSHBYXiYUPO3g==",
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/is-fullwidth-code-point": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
      "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/isexe": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
      "integrity": "sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw=="
    },
    "node_modules/jackspeak": {
      "version": "2.3.6",
      "resolved": "https://registry.npmjs.org/jackspeak/-/jackspeak-2.3.6.tgz",
      "integrity": "sha512-N3yCS/NegsOBokc8GAdM8UcmfsKiSS8cipheD/nivzr700H+nsMOxJjQnvwOcRYVuFkdH0wGUvW2WbXGmrZGbQ==",
      "dependencies": {
        "@isaacs/cliui": "^8.0.2"
      },
      "engines": {
        "node": ">=14"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      },
      "optionalDependencies": {
        "@pkgjs/parseargs": "^0.11.0"
      }
    },
    "node_modules/joi": {
      "version": "17.12.3",
      "resolved": "https://registry.npmjs.org/joi/-/joi-17.12.3.tgz",
      "integrity": "sha512-2RRziagf555owrm9IRVtdKynOBeITiDpuZqIpgwqXShPncPKNiRQoiGsl/T8SQdq+8ugRzH2LqY67irr2y/d+g==",
      "dependencies": {
        "@hapi/hoek": "^9.3.0",
        "@hapi/topo": "^5.1.0",
        "@sideway/address": "^4.1.5",
        "@sideway/formula": "^3.0.1",
        "@sideway/pinpoint": "^2.0.0"
      }
    },
    "node_modules/jsonfile": {
      "version": "6.1.0",
      "resolved": "https://registry.npmjs.org/jsonfile/-/jsonfile-6.1.0.tgz",
      "integrity": "sha512-5dgndWOriYSm5cnYaJNhalLNDKOqFwyDB/rr1E9ZsGciGvKPs8R2xYGCacuf3z6K1YKDz182fd+fY3cn3pMqXQ==",
      "dependencies": {
        "universalify": "^2.0.0"
      },
      "optionalDependencies": {
        "graceful-fs": "^4.1.6"
      }
    },
    "node_modules/line-counter": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/line-counter/-/line-counter-1.1.0.tgz",
      "integrity": "sha512-6bmXJG/pOX5HBb2aIJZrI9CALBgY1VMbS0GPuXfJaT13UEfee/2xxPCsOOJdXLl3KPRyBf2/D+cjiG8hU9S7LA=="
    },
    "node_modules/lines-and-columns": {
      "version": "1.2.4",
      "resolved": "https://registry.npmjs.org/lines-and-columns/-/lines-and-columns-1.2.4.tgz",
      "integrity": "sha512-7ylylesZQ/PV29jhEDl3Ufjo6ZX7gCqJr5F7PKrqc93v7fzSymt1BpwEU8nAUXs8qzzvqhbjhK5QZg6Mt/HkBg=="
    },
    "node_modules/lodash": {
      "version": "4.17.21",
      "resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz",
      "integrity": "sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg=="
    },
    "node_modules/lru-cache": {
      "version": "10.2.0",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-10.2.0.tgz",
      "integrity": "sha512-2bIM8x+VAf6JT4bKAljS1qUWgMsqZRPGJS6FSahIMPVvctcNhyVp7AJu7quxOW9jwkryBReKZY5tY5JYv2n/7Q==",
      "engines": {
        "node": "14 || >=16.14"
      }
    },
    "node_modules/media-typer": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/media-typer/-/media-typer-0.3.0.tgz",
      "integrity": "sha512-dq+qelQ9akHpcOl/gUVRTxVIOkAJ1wR3QAvb4RsVjS8oVoFjDGTc679wJYmUmknUF5HwMLOgb5O+a3KxfWapPQ==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/merge-descriptors": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/merge-descriptors/-/merge-descriptors-1.0.1.tgz",
      "integrity": "sha512-cCi6g3/Zr1iqQi6ySbseM1Xvooa98N0w31jzUYrXPX2xqObmFGHJ0tQ5u74H3mVh7wLouTseZyYIq39g8cNp1w=="
    },
    "node_modules/methods": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/methods/-/methods-1.1.2.tgz",
      "integrity": "sha512-iclAHeNqNm68zFtnZ0e+1L2yUIdvzNoauKU4WBA3VvH/vPFieF7qfRlwUZU+DA9P9bPXIS90ulxoUoCH23sV2w==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mime": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/mime/-/mime-1.6.0.tgz",
      "integrity": "sha512-x0Vn8spI+wuJ1O6S7gnbaQg8Pxh4NNHb7KSINmEWKiPE4RKOplvijn+NkmYmmRgP68mc70j2EbeTFRsrswaQeg==",
      "bin": {
        "mime": "cli.js"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/mime-db": {
      "version": "1.52.0",
      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
      "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mime-types": {
      "version": "2.1.35",
      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
      "integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
      "dependencies": {
        "mime-db": "1.52.0"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/minimatch": {
      "version": "9.0.4",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-9.0.4.tgz",
      "integrity": "sha512-KqWh+VchfxcMNRAJjj2tnsSJdNbHsVgnkBhTNrW7AjVo6OvLtxw8zfT9oLw1JSohlFzJ8jCoTgaoXvJ+kHt6fw==",
      "dependencies": {
        "brace-expansion": "^2.0.1"
      },
      "engines": {
        "node": ">=16 || 14 >=14.17"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/minipass": {
      "version": "7.0.4",
      "resolved": "https://registry.npmjs.org/minipass/-/minipass-7.0.4.tgz",
      "integrity": "sha512-jYofLM5Dam9279rdkWzqHozUo4ybjdZmCsDHePy5V/PbBcVMiSZR97gmAy45aqi8CK1lG2ECd356FU86avfwUQ==",
      "engines": {
        "node": ">=16 || 14 >=14.17"
      }
    },
    "node_modules/ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A=="
    },
    "node_modules/multilang-extract-comments": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/multilang-extract-comments/-/multilang-extract-comments-0.4.0.tgz",
      "integrity": "sha512-8mXCo9Q42Wyfho9nn7hHkG/0sKxH0nJWfmBLl8+c+FLv++XhFkFC1sntOk4NFZ+nSpoMjlF/8ILeOLyMRTFbIw==",
      "dependencies": {
        "comment-patterns": "^0.12.0",
        "line-counter": "^1.0.3",
        "lodash": "^4.17.11",
        "quotemeta": "0.0.0"
      }
    },
    "node_modules/mz": {
      "version": "2.7.0",
      "resolved": "https://registry.npmjs.org/mz/-/mz-2.7.0.tgz",
      "integrity": "sha512-z81GNO7nnYMEhrGh9LeymoE4+Yr0Wn5McHIZMK5cfQCl+NDX08sCZgUc9/6MHni9IWuFLm1Z3HTCXu2z9fN62Q==",
      "dependencies": {
        "any-promise": "^1.0.0",
        "object-assign": "^4.0.1",
        "thenify-all": "^1.0.0"
      }
    },
    "node_modules/negotiator": {
      "version": "0.6.3",
      "resolved": "https://registry.npmjs.org/negotiator/-/negotiator-0.6.3.tgz",
      "integrity": "sha512-+EUsqGPLsM+j/zdChZjsnX51g4XrHFOIXwfnCVPGlQk/k5giakcKsuxCObBRu6DSm9opw/O6slWbJdghQM4bBg==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/object-assign": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
      "integrity": "sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/object-inspect": {
      "version": "1.13.1",
      "resolved": "https://registry.npmjs.org/object-inspect/-/object-inspect-1.13.1.tgz",
      "integrity": "sha512-5qoj1RUiKOMsCCNLV1CBiPYE10sziTsnmNxkAI/rZhiD63CF7IqdFGC/XzjWjpSgLf0LxXX3bDFIh0E18f6UhQ==",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/on-finished": {
      "version": "2.4.1",
      "resolved": "https://registry.npmjs.org/on-finished/-/on-finished-2.4.1.tgz",
      "integrity": "sha512-oVlzkg3ENAhCk2zdv7IJwd/QUD4z2RxRwpkcGY8psCVcCYZNq4wYnVWALHM+brtuJjePWiYF/ClmuDr8Ch5+kg==",
      "dependencies": {
        "ee-first": "1.1.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/once": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
      "integrity": "sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==",
      "dependencies": {
        "wrappy": "1"
      }
    },
    "node_modules/parseurl": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/parseurl/-/parseurl-1.3.3.tgz",
      "integrity": "sha512-CiyeOxFT/JZyN5m0z9PfXw4SCBJ6Sygz1Dpl0wqjlhDEGGBP1GnsUVEL0p63hoG1fcj3fHynXi9NYO4nWOL+qQ==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/path-is-absolute": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz",
      "integrity": "sha512-AVbw3UJ2e9bq64vSaS9Am0fje1Pa8pbGqTTsmXfaIiMpnr5DlDhfJOuLj9Sf95ZPVDAUerDfEk88MPmPe7UCQg==",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/path-key": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz",
      "integrity": "sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/path-scurry": {
      "version": "1.10.2",
      "resolved": "https://registry.npmjs.org/path-scurry/-/path-scurry-1.10.2.tgz",
      "integrity": "sha512-7xTavNy5RQXnsjANvVvMkEjvloOinkAjv/Z6Ildz9v2RinZ4SBKTWFOVRbaF8p0vpHnyjV/UwNDdKuUv6M5qcA==",
      "dependencies": {
        "lru-cache": "^10.2.0",
        "minipass": "^5.0.0 || ^6.0.2 || ^7.0.0"
      },
      "engines": {
        "node": ">=16 || 14 >=14.17"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/path-to-regexp": {
      "version": "0.1.7",
      "resolved": "https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-0.1.7.tgz",
      "integrity": "sha512-5DFkuoqlv1uYQKxy8omFBeJPQcdoE07Kv2sferDCrAq1ohOU+MSDswDIbnx3YAM60qIOnYa53wBhXW0EbMonrQ=="
    },
    "node_modules/pirates": {
      "version": "4.0.6",
      "resolved": "https://registry.npmjs.org/pirates/-/pirates-4.0.6.tgz",
      "integrity": "sha512-saLsH7WeYYPiD25LDuLRRY/i+6HaPYr6G1OUlN39otzkSTxKnubR9RTxS3/Kk50s1g2JTgFwWQDQyplC5/SHZg==",
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/prettier": {
      "version": "2.8.8",
      "resolved": "https://registry.npmjs.org/prettier/-/prettier-2.8.8.tgz",
      "integrity": "sha512-tdN8qQGvNjw4CHbY+XXk0JgCXn9QiF21a55rBe5LJAU+kDyC4WQn4+awm2Xfk2lQMk5fKup9XgzTZtGkjBdP9Q==",
      "bin": {
        "prettier": "bin-prettier.js"
      },
      "engines": {
        "node": ">=10.13.0"
      },
      "funding": {
        "url": "https://github.com/prettier/prettier?sponsor=1"
      }
    },
    "node_modules/proxy-addr": {
      "version": "2.0.7",
      "resolved": "https://registry.npmjs.org/proxy-addr/-/proxy-addr-2.0.7.tgz",
      "integrity": "sha512-llQsMLSUDUPT44jdrU/O37qlnifitDP+ZwrmmZcoSKyLKvtZxpyV0n2/bD/N4tBAAZ/gJEdZU7KMraoK1+XYAg==",
      "dependencies": {
        "forwarded": "0.2.0",
        "ipaddr.js": "1.9.1"
      },
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/qs": {
      "version": "6.11.0",
      "resolved": "https://registry.npmjs.org/qs/-/qs-6.11.0.tgz",
      "integrity": "sha512-MvjoMCJwEarSbUYk5O+nmoSzSutSsTwF85zcHPQ9OrlFoZOYIjaqBAJIqIXjptyD5vThxGq52Xu/MaJzRkIk4Q==",
      "dependencies": {
        "side-channel": "^1.0.4"
      },
      "engines": {
        "node": ">=0.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/quotemeta": {
      "version": "0.0.0",
      "resolved": "https://registry.npmjs.org/quotemeta/-/quotemeta-0.0.0.tgz",
      "integrity": "sha512-1XGObUh7RN5b58vKuAsrlfqT+Rc4vmw8N4pP9gFCq1GFlTdV0Ex/D2Ro1Drvrqj++HPi3ig0Np17XPslELeMRA=="
    },
    "node_modules/range-parser": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/range-parser/-/range-parser-1.2.1.tgz",
      "integrity": "sha512-Hrgsx+orqoygnmhFbKaHE6c296J+HTAQXoxEF6gNupROmmGJRoyzfG3ccAveqCBrwr/2yxQ5BVd/GTl5agOwSg==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/raw-body": {
      "version": "2.5.1",
      "resolved": "https://registry.npmjs.org/raw-body/-/raw-body-2.5.1.tgz",
      "integrity": "sha512-qqJBtEyVgS0ZmPGdCFPWJ3FreoqvG4MVQln/kCgF7Olq95IbOp0/BWyMwbdtn4VTvkM8Y7khCQ2Xgk/tcrCXig==",
      "dependencies": {
        "bytes": "3.1.2",
        "http-errors": "2.0.0",
        "iconv-lite": "0.4.24",
        "unpipe": "1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/safe-buffer": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
      "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ]
    },
    "node_modules/safer-buffer": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz",
      "integrity": "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg=="
    },
    "node_modules/send": {
      "version": "0.18.0",
      "resolved": "https://registry.npmjs.org/send/-/send-0.18.0.tgz",
      "integrity": "sha512-qqWzuOjSFOuqPjFe4NOsMLafToQQwBSOEpS+FwEt3A2V3vKubTquT3vmLTQpFgMXp8AlFWFuP1qKaJZOtPpVXg==",
      "dependencies": {
        "debug": "2.6.9",
        "depd": "2.0.0",
        "destroy": "1.2.0",
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "etag": "~1.8.1",
        "fresh": "0.5.2",
        "http-errors": "2.0.0",
        "mime": "1.6.0",
        "ms": "2.1.3",
        "on-finished": "2.4.1",
        "range-parser": "~1.2.1",
        "statuses": "2.0.1"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/send/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA=="
    },
    "node_modules/serve-static": {
      "version": "1.15.0",
      "resolved": "https://registry.npmjs.org/serve-static/-/serve-static-1.15.0.tgz",
      "integrity": "sha512-XGuRDNjXUijsUL0vl6nSD7cwURuzEgglbOaFuZM9g3kwDXOWVTck0jLzjPzGD+TazWbboZYu52/9/XPdUgne9g==",
      "dependencies": {
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "parseurl": "~1.3.3",
        "send": "0.18.0"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/set-function-length": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/set-function-length/-/set-function-length-1.1.1.tgz",
      "integrity": "sha512-VoaqjbBJKiWtg4yRcKBQ7g7wnGnLV3M8oLvVWwOk2PdYY6PEFegR1vezXR0tw6fZGF9csVakIRjrJiy2veSBFQ==",
      "dependencies": {
        "define-data-property": "^1.1.1",
        "get-intrinsic": "^1.2.1",
        "gopd": "^1.0.1",
        "has-property-descriptors": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/setprototypeof": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz",
      "integrity": "sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw=="
    },
    "node_modules/shebang-command": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz",
      "integrity": "sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==",
      "dependencies": {
        "shebang-regex": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/shebang-regex": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz",
      "integrity": "sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/side-channel": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/side-channel/-/side-channel-1.0.4.tgz",
      "integrity": "sha512-q5XPytqFEIKHkGdiMIrY10mvLRvnQh42/+GoBlFW3b2LXLE2xxJpZFdm94we0BaoV3RwJyGqg5wS7epxTv0Zvw==",
      "dependencies": {
        "call-bind": "^1.0.0",
        "get-intrinsic": "^1.0.2",
        "object-inspect": "^1.9.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/signal-exit": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-4.1.0.tgz",
      "integrity": "sha512-bzyZ1e88w9O1iNJbKnOlvYTrWPDl46O1bG0D3XInv+9tkPrxrN8jUUTiFlDkkmKWgn1M6CfIA13SuGqOa9Korw==",
      "engines": {
        "node": ">=14"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/socket.io": {
      "version": "4.7.5",
      "resolved": "https://registry.npmjs.org/socket.io/-/socket.io-4.7.5.tgz",
      "integrity": "sha512-DmeAkF6cwM9jSfmp6Dr/5/mfMwb5Z5qRrSXLpo3Fq5SqyU8CMF15jIN4ZhfSwu35ksM1qmHZDQ/DK5XTccSTvA==",
      "dependencies": {
        "accepts": "~1.3.4",
        "base64id": "~2.0.0",
        "cors": "~2.8.5",
        "debug": "~4.3.2",
        "engine.io": "~6.5.2",
        "socket.io-adapter": "~2.5.2",
        "socket.io-parser": "~4.2.4"
      },
      "engines": {
        "node": ">=10.2.0"
      }
    },
    "node_modules/socket.io-adapter": {
      "version": "2.5.4",
      "resolved": "https://registry.npmjs.org/socket.io-adapter/-/socket.io-adapter-2.5.4.tgz",
      "integrity": "sha512-wDNHGXGewWAjQPt3pyeYBtpWSq9cLE5UW1ZUPL/2eGK9jtse/FpXib7epSTsz0Q0m+6sg6Y4KtcFTlah1bdOVg==",
      "dependencies": {
        "debug": "~4.3.4",
        "ws": "~8.11.0"
      }
    },
    "node_modules/socket.io-adapter/node_modules/debug": {
      "version": "4.3.4",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
      "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
      "dependencies": {
        "ms": "2.1.2"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/socket.io-adapter/node_modules/ms": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
      "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w=="
    },
    "node_modules/socket.io-parser": {
      "version": "4.2.4",
      "resolved": "https://registry.npmjs.org/socket.io-parser/-/socket.io-parser-4.2.4.tgz",
      "integrity": "sha512-/GbIKmo8ioc+NIWIhwdecY0ge+qVBSMdgxGygevmdHj24bsfgtCmcUUcQ5ZzcylGFHsN3k4HB4Cgkl96KVnuew==",
      "dependencies": {
        "@socket.io/component-emitter": "~3.1.0",
        "debug": "~4.3.1"
      },
      "engines": {
        "node": ">=10.0.0"
      }
    },
    "node_modules/socket.io-parser/node_modules/debug": {
      "version": "4.3.4",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
      "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
      "dependencies": {
        "ms": "2.1.2"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/socket.io-parser/node_modules/ms": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
      "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w=="
    },
    "node_modules/socket.io/node_modules/debug": {
      "version": "4.3.4",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
      "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
      "dependencies": {
        "ms": "2.1.2"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/socket.io/node_modules/ms": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
      "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w=="
    },
    "node_modules/statuses": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/statuses/-/statuses-2.0.1.tgz",
      "integrity": "sha512-RwNA9Z/7PrK06rYLIzFMlaF+l73iwpzsqRIFgbMLbTcLD6cOao82TaWefPXQvB2fOC4AjuYSEndS7N/mTCbkdQ==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/string-width": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-5.1.2.tgz",
      "integrity": "sha512-HnLOCR3vjcY8beoNLtcjZ5/nxn2afmME6lhrDrebokqMap+XbeW8n9TXpPDOqdGK5qcI3oT0GKTW6wC7EMiVqA==",
      "dependencies": {
        "eastasianwidth": "^0.2.0",
        "emoji-regex": "^9.2.2",
        "strip-ansi": "^7.0.1"
      },
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/string-width-cjs": {
      "name": "string-width",
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
      "dependencies": {
        "emoji-regex": "^8.0.0",
        "is-fullwidth-code-point": "^3.0.0",
        "strip-ansi": "^6.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/string-width-cjs/node_modules/ansi-regex": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/string-width-cjs/node_modules/emoji-regex": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A=="
    },
    "node_modules/string-width-cjs/node_modules/strip-ansi": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
      "dependencies": {
        "ansi-regex": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/strip-ansi": {
      "version": "7.1.0",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-7.1.0.tgz",
      "integrity": "sha512-iq6eVVI64nQQTRYq2KtEg2d2uU7LElhTJwsH4YzIHZshxlgZms/wIc4VoDQTlG/IvVIrBKG06CrZnp0qv7hkcQ==",
      "dependencies": {
        "ansi-regex": "^6.0.1"
      },
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/strip-ansi?sponsor=1"
      }
    },
    "node_modules/strip-ansi-cjs": {
      "name": "strip-ansi",
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
      "dependencies": {
        "ansi-regex": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/strip-ansi-cjs/node_modules/ansi-regex": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/sucrase": {
      "version": "3.35.0",
      "resolved": "https://registry.npmjs.org/sucrase/-/sucrase-3.35.0.tgz",
      "integrity": "sha512-8EbVDiu9iN/nESwxeSxDKe0dunta1GOlHufmSSXxMD2z2/tMZpDMpvXQGsc+ajGo8y2uYUmixaSRUc/QPoQ0GA==",
      "dependencies": {
        "@jridgewell/gen-mapping": "^0.3.2",
        "commander": "^4.0.0",
        "glob": "^10.3.10",
        "lines-and-columns": "^1.1.6",
        "mz": "^2.7.0",
        "pirates": "^4.0.1",
        "ts-interface-checker": "^0.1.9"
      },
      "bin": {
        "sucrase": "bin/sucrase",
        "sucrase-node": "bin/sucrase-node"
      },
      "engines": {
        "node": ">=16 || 14 >=14.17"
      }
    },
    "node_modules/sucrase/node_modules/commander": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/commander/-/commander-4.1.1.tgz",
      "integrity": "sha512-NOKm8xhkzAjzFx8B2v5OAHT+u5pRQc2UCa2Vq9jYL/31o2wi9mxBA7LIFs3sV5VSC49z6pEhfbMULvShKj26WA==",
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/thenify": {
      "version": "3.3.1",
      "resolved": "https://registry.npmjs.org/thenify/-/thenify-3.3.1.tgz",
      "integrity": "sha512-RVZSIV5IG10Hk3enotrhvz0T9em6cyHBLkH/YAZuKqd8hRkKhSfCGIcP2KUY0EPxndzANBmNllzWPwak+bheSw==",
      "dependencies": {
        "any-promise": "^1.0.0"
      }
    },
    "node_modules/thenify-all": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/thenify-all/-/thenify-all-1.6.0.tgz",
      "integrity": "sha512-RNxQH/qI8/t3thXJDwcstUO4zeqo64+Uy/+sNVRBx4Xn2OX+OZ9oP+iJnNFqplFra2ZUVeKCSa2oVWi3T4uVmA==",
      "dependencies": {
        "thenify": ">= 3.1.0 < 4"
      },
      "engines": {
        "node": ">=0.8"
      }
    },
    "node_modules/toidentifier": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/toidentifier/-/toidentifier-1.0.1.tgz",
      "integrity": "sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA==",
      "engines": {
        "node": ">=0.6"
      }
    },
    "node_modules/ts-interface-checker": {
      "version": "0.1.13",
      "resolved": "https://registry.npmjs.org/ts-interface-checker/-/ts-interface-checker-0.1.13.tgz",
      "integrity": "sha512-Y/arvbn+rrz3JCKl9C4kVNfTfSm2/mEp5FSz5EsZSANGPSlQrpRI5M4PKF+mJnE52jOO90PnPSc3Ur3bTQw0gA=="
    },
    "node_modules/type-is": {
      "version": "1.6.18",
      "resolved": "https://registry.npmjs.org/type-is/-/type-is-1.6.18.tgz",
      "integrity": "sha512-TkRKr9sUTxEH8MdfuCSP7VizJyzRNMjj2J2do2Jr3Kym598JVdEksuzPQCnlFPW4ky9Q+iA+ma9BGm06XQBy8g==",
      "dependencies": {
        "media-typer": "0.3.0",
        "mime-types": "~2.1.24"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/undici-types": {
      "version": "5.26.5",
      "resolved": "https://registry.npmjs.org/undici-types/-/undici-types-5.26.5.tgz",
      "integrity": "sha512-JlCMO+ehdEIKqlFxk6IfVoAUVmgz7cU7zD/h9XZ0qzeosSHmUJVOzSQvvYSYWXkFXC+IfLKSIffhv0sVZup6pA=="
    },
    "node_modules/universalify": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/universalify/-/universalify-2.0.1.tgz",
      "integrity": "sha512-gptHNQghINnc/vTGIk0SOFGFNXw7JVrlRUtConJRlvaw6DuX0wO5Jeko9sWrMBhh+PsYAZ7oXAiOnf/UKogyiw==",
      "engines": {
        "node": ">= 10.0.0"
      }
    },
    "node_modules/unpipe": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/unpipe/-/unpipe-1.0.0.tgz",
      "integrity": "sha512-pjy2bYhSsufwWlKwPc+l3cN7+wuJlK6uz0YdJEOlQDbl6jo/YlPi4mb8agUkVC8BF7V8NuzeyPNqRksA3hztKQ==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/utils-merge": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/utils-merge/-/utils-merge-1.0.1.tgz",
      "integrity": "sha512-pMZTvIkT1d+TFGvDOqodOclx0QWkkgi6Tdoa8gC8ffGAAqz9pzPTZWAybbsHHoED/ztMtkv/VoYTYyShUn81hA==",
      "engines": {
        "node": ">= 0.4.0"
      }
    },
    "node_modules/vary": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/vary/-/vary-1.1.2.tgz",
      "integrity": "sha512-BNGbWLfd0eUPabhkXUVm0j8uuvREyTh5ovRa/dyow/BqAbZJyC+5fU+IzQOzmAKzYqYRAISoRhdQr3eIZ/PXqg==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/which": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/which/-/which-2.0.2.tgz",
      "integrity": "sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==",
      "dependencies": {
        "isexe": "^2.0.0"
      },
      "bin": {
        "node-which": "bin/node-which"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/wrap-ansi": {
      "version": "8.1.0",
      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-8.1.0.tgz",
      "integrity": "sha512-si7QWI6zUMq56bESFvagtmzMdGOtoxfR+Sez11Mobfc7tm+VkUckk9bW2UeffTGVUbOksxmSw0AA2gs8g71NCQ==",
      "dependencies": {
        "ansi-styles": "^6.1.0",
        "string-width": "^5.0.1",
        "strip-ansi": "^7.0.1"
      },
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
      }
    },
    "node_modules/wrap-ansi-cjs": {
      "name": "wrap-ansi",
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz",
      "integrity": "sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==",
      "dependencies": {
        "ansi-styles": "^4.0.0",
        "string-width": "^4.1.0",
        "strip-ansi": "^6.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
      }
    },
    "node_modules/wrap-ansi-cjs/node_modules/ansi-regex": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/wrap-ansi-cjs/node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/wrap-ansi-cjs/node_modules/emoji-regex": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A=="
    },
    "node_modules/wrap-ansi-cjs/node_modules/string-width": {
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
      "dependencies": {
        "emoji-regex": "^8.0.0",
        "is-fullwidth-code-point": "^3.0.0",
        "strip-ansi": "^6.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/wrap-ansi-cjs/node_modules/strip-ansi": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
      "dependencies": {
        "ansi-regex": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/wrappy": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
      "integrity": "sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ=="
    },
    "node_modules/ws": {
      "version": "8.11.0",
      "resolved": "https://registry.npmjs.org/ws/-/ws-8.11.0.tgz",
      "integrity": "sha512-HPG3wQd9sNQoT9xHyNCXoDUa+Xw/VevmY9FoHyQ+g+rrMn4j6FB4np7Z0OhdTgjx6MgQLK7jwSy1YecU1+4Asg==",
      "engines": {
        "node": ">=10.0.0"
      },
      "peerDependencies": {
        "bufferutil": "^4.0.1",
        "utf-8-validate": "^5.0.2"
      },
      "peerDependenciesMeta": {
        "bufferutil": {
          "optional": true
        },
        "utf-8-validate": {
          "optional": true
        }
      }
    }
  },
  "dependencies": {
    "@hapi/hoek": {
      "version": "9.3.0",
      "resolved": "https://registry.npmjs.org/@hapi/hoek/-/hoek-9.3.0.tgz",
      "integrity": "sha512-/c6rf4UJlmHlC9b5BaNvzAcFv7HZ2QHaV0D4/HNlBdvFnvQq8RI4kYdhyPCl7Xj+oWvTWQ8ujhqS53LIgAe6KQ=="
    },
    "@hapi/topo": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/@hapi/topo/-/topo-5.1.0.tgz",
      "integrity": "sha512-foQZKJig7Ob0BMAYBfcJk8d77QtOe7Wo4ox7ff1lQYoNNAb6jwcY1ncdoy2e9wQZzvNy7ODZCYJkK8kzmcAnAg==",
      "requires": {
        "@hapi/hoek": "^9.0.0"
      }
    },
    "@isaacs/cliui": {
      "version": "8.0.2",
      "resolved": "https://registry.npmjs.org/@isaacs/cliui/-/cliui-8.0.2.tgz",
      "integrity": "sha512-O8jcjabXaleOG9DQ0+ARXWZBTfnP4WNAqzuiJK7ll44AmxGKv/J2M4TPjxjY3znBCfvBXFzucm1twdyFybFqEA==",
      "requires": {
        "string-width": "^5.1.2",
        "string-width-cjs": "npm:string-width@^4.2.0",
        "strip-ansi": "^7.0.1",
        "strip-ansi-cjs": "npm:strip-ansi@^6.0.1",
        "wrap-ansi": "^8.1.0",
        "wrap-ansi-cjs": "npm:wrap-ansi@^7.0.0"
      }
    },
    "@jridgewell/gen-mapping": {
      "version": "0.3.5",
      "resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.5.tgz",
      "integrity": "sha512-IzL8ZoEDIBRWEzlCcRhOaCupYyN5gdIK+Q6fbFdPDg6HqX6jpkItn7DFIpW9LQzXG6Df9sA7+OKnq0qlz/GaQg==",
      "requires": {
        "@jridgewell/set-array": "^1.2.1",
        "@jridgewell/sourcemap-codec": "^1.4.10",
        "@jridgewell/trace-mapping": "^0.3.24"
      }
    },
    "@jridgewell/resolve-uri": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.2.tgz",
      "integrity": "sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw=="
    },
    "@jridgewell/set-array": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/@jridgewell/set-array/-/set-array-1.2.1.tgz",
      "integrity": "sha512-R8gLRTZeyp03ymzP/6Lil/28tGeGEzhx1q2k703KGWRAI1VdvPIXdG70VJc2pAMw3NA6JKL5hhFu1sJX0Mnn/A=="
    },
    "@jridgewell/sourcemap-codec": {
      "version": "1.4.15",
      "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.4.15.tgz",
      "integrity": "sha512-eF2rxCRulEKXHTRiDrDy6erMYWqNw4LPdQ8UQA4huuxaQsVeRPFl2oM8oDGxMFhJUWZf9McpLtJasDDZb/Bpeg=="
    },
    "@jridgewell/trace-mapping": {
      "version": "0.3.25",
      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.25.tgz",
      "integrity": "sha512-vNk6aEwybGtawWmy/PzwnGDOjCkLWSD2wqvjGGAgOAwCGWySYXfYoxt00IJkTF+8Lb57DwOb3Aa0o9CApepiYQ==",
      "requires": {
        "@jridgewell/resolve-uri": "^3.1.0",
        "@jridgewell/sourcemap-codec": "^1.4.14"
      }
    },
    "@pkgjs/parseargs": {
      "version": "0.11.0",
      "resolved": "https://registry.npmjs.org/@pkgjs/parseargs/-/parseargs-0.11.0.tgz",
      "integrity": "sha512-+1VkjdD0QBLPodGrJUeqarH8VAIvQODIbwh9XpP5Syisf7YoQgsJKPNFoqqLQlu+VQ/tVSshMR6loPMn8U+dPg==",
      "optional": true
    },
    "@sideway/address": {
      "version": "4.1.5",
      "resolved": "https://registry.npmjs.org/@sideway/address/-/address-4.1.5.tgz",
      "integrity": "sha512-IqO/DUQHUkPeixNQ8n0JA6102hT9CmaljNTPmQ1u8MEhBo/R4Q8eKLN/vGZxuebwOroDB4cbpjheD4+/sKFK4Q==",
      "requires": {
        "@hapi/hoek": "^9.0.0"
      }
    },
    "@sideway/formula": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/@sideway/formula/-/formula-3.0.1.tgz",
      "integrity": "sha512-/poHZJJVjx3L+zVD6g9KgHfYnb443oi7wLu/XKojDviHy6HOEOA6z1Trk5aR1dGcmPenJEgb2sK2I80LeS3MIg=="
    },
    "@sideway/pinpoint": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/@sideway/pinpoint/-/pinpoint-2.0.0.tgz",
      "integrity": "sha512-RNiOoTPkptFtSVzQevY/yWtZwf/RxyVnPy/OcA9HBM3MlGDnBEYL5B41H0MTn0Uec8Hi+2qUtTfG2WWZBmMejQ=="
    },
    "@socket.io/component-emitter": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/@socket.io/component-emitter/-/component-emitter-3.1.1.tgz",
      "integrity": "sha512-dzJtaDAAoXx4GCOJpbB2eG/Qj8VDpdwkLsWGzGm+0L7E8/434RyMbAHmk9ubXWVAb9nXmc44jUf8GKqVDiKezg=="
    },
    "@types/cookie": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/@types/cookie/-/cookie-0.4.1.tgz",
      "integrity": "sha512-XW/Aa8APYr6jSVVA1y/DEIZX0/GMKLEVekNG727R8cs56ahETkRAy/3DR7+fJyh7oUgGwNQaRfXCun0+KbWY7Q=="
    },
    "@types/cors": {
      "version": "2.8.17",
      "resolved": "https://registry.npmjs.org/@types/cors/-/cors-2.8.17.tgz",
      "integrity": "sha512-8CGDvrBj1zgo2qE+oS3pOCyYNqCPryMWY2bGfwA0dcfopWGgxs+78df0Rs3rc9THP4JkOhLsAa+15VdpAqkcUA==",
      "requires": {
        "@types/node": "*"
      }
    },
    "@types/node": {
      "version": "20.12.7",
      "resolved": "https://registry.npmjs.org/@types/node/-/node-20.12.7.tgz",
      "integrity": "sha512-wq0cICSkRLVaf3UGLMGItu/PtdY7oaXaI/RVU+xliKVOtRna3PRY57ZDfztpDL0n11vfymMUnXv8QwYCO7L1wg==",
      "requires": {
        "undici-types": "~5.26.4"
      }
    },
    "accepts": {
      "version": "1.3.8",
      "resolved": "https://registry.npmjs.org/accepts/-/accepts-1.3.8.tgz",
      "integrity": "sha512-PYAthTa2m2VKxuvSD3DPC/Gy+U+sOA1LAuT8mkmRuvw+NACSaeXEQ+NHcVF7rONl6qcaxV3Uuemwawk+7+SJLw==",
      "requires": {
        "mime-types": "~2.1.34",
        "negotiator": "0.6.3"
      }
    },
    "ansi-regex": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-6.0.1.tgz",
      "integrity": "sha512-n5M855fKb2SsfMIiFFoVrABHJC8QtHwVx+mHWP3QcEqBHYienj5dHSgjbxtC0WEZXYt4wcD6zrQElDPhFuZgfA=="
    },
    "ansi-styles": {
      "version": "6.2.1",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-6.2.1.tgz",
      "integrity": "sha512-bN798gFfQX+viw3R7yrGWRqnrN2oRkEkUjjl4JNn4E8GxxbjtG3FbrEIIY3l8/hrwUwIeCZvi4QuOTP4MErVug=="
    },
    "any-promise": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/any-promise/-/any-promise-1.3.0.tgz",
      "integrity": "sha512-7UvmKalWRt1wgjL1RrGxoSJW/0QZFIegpeGvZG9kjp8vrRu55XTHbwnqq2GpXm9uLbcuhxm3IqX9OB4MZR1b2A=="
    },
    "array-flatten": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/array-flatten/-/array-flatten-1.1.1.tgz",
      "integrity": "sha512-PCVAQswWemu6UdxsDFFX/+gVeYqKAod3D3UVm91jHwynguOwAvYPhx8nNlM++NqRcK6CxxpUafjmhIdKiHibqg=="
    },
    "balanced-match": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
      "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw=="
    },
    "base64id": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/base64id/-/base64id-2.0.0.tgz",
      "integrity": "sha512-lGe34o6EHj9y3Kts9R4ZYs/Gr+6N7MCaMlIFA3F1R2O5/m7K06AxfSeO5530PEERE6/WyEg3lsuyw4GHlPZHog=="
    },
    "body-parser": {
      "version": "1.20.1",
      "resolved": "https://registry.npmjs.org/body-parser/-/body-parser-1.20.1.tgz",
      "integrity": "sha512-jWi7abTbYwajOytWCQc37VulmWiRae5RyTpaCyDcS5/lMdtwSz5lOpDE67srw/HYe35f1z3fDQw+3txg7gNtWw==",
      "requires": {
        "bytes": "3.1.2",
        "content-type": "~1.0.4",
        "debug": "2.6.9",
        "depd": "2.0.0",
        "destroy": "1.2.0",
        "http-errors": "2.0.0",
        "iconv-lite": "0.4.24",
        "on-finished": "2.4.1",
        "qs": "6.11.0",
        "raw-body": "2.5.1",
        "type-is": "~1.6.18",
        "unpipe": "1.0.0"
      }
    },
    "bos-workspace": {
      "version": "1.0.0-alpha.9",
      "resolved": "https://registry.npmjs.org/bos-workspace/-/bos-workspace-1.0.0-alpha.9.tgz",
      "integrity": "sha512-RB8dD3AWbFCELzDr8NSp1TMdYUq8fOL5/SpRZiOBZqNO9r9Xb1huYn5ULfJkd6Ljz5VYDDf5f5oi1zoWq3Cjaw==",
      "requires": {
        "commander": "^11.1.0",
        "crypto-js": "^4.2.0",
        "express": "^4.18.2",
        "fs-extra": "^11.2.0",
        "gaze": "^1.1.3",
        "glob": "^10.3.10",
        "joi": "^17.11.0",
        "multilang-extract-comments": "^0.4.0",
        "prettier": "^2.8.8",
        "socket.io": "^4.7.3",
        "sucrase": "^3.34.0"
      }
    },
    "brace-expansion": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-2.0.1.tgz",
      "integrity": "sha512-XnAIvQ8eM+kC6aULx6wuQiwVsnzsi9d3WxzV3FpWTGA19F621kwdbsAcFKXgKUHZWsy+mY6iL1sHTxWEFCytDA==",
      "requires": {
        "balanced-match": "^1.0.0"
      }
    },
    "bytes": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/bytes/-/bytes-3.1.2.tgz",
      "integrity": "sha512-/Nf7TyzTx6S3yRJObOAV7956r8cr2+Oj8AC5dt8wSP3BQAoeX58NoHyCU8P8zGkNXStjTSi6fzO6F0pBdcYbEg=="
    },
    "call-bind": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/call-bind/-/call-bind-1.0.5.tgz",
      "integrity": "sha512-C3nQxfFZxFRVoJoGKKI8y3MOEo129NQ+FgQ08iye+Mk4zNZZGdjfs06bVTr+DBSlA66Q2VEcMki/cUCP4SercQ==",
      "requires": {
        "function-bind": "^1.1.2",
        "get-intrinsic": "^1.2.1",
        "set-function-length": "^1.1.1"
      }
    },
    "color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "requires": {
        "color-name": "~1.1.4"
      }
    },
    "color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA=="
    },
    "commander": {
      "version": "11.1.0",
      "resolved": "https://registry.npmjs.org/commander/-/commander-11.1.0.tgz",
      "integrity": "sha512-yPVavfyCcRhmorC7rWlkHn15b4wDVgVmBA7kV4QVBsF7kv/9TKJAbAXVTxvTnwP8HHKjRCJDClKbciiYS7p0DQ=="
    },
    "comment-patterns": {
      "version": "0.12.2",
      "resolved": "https://registry.npmjs.org/comment-patterns/-/comment-patterns-0.12.2.tgz",
      "integrity": "sha512-yA1FeubMSK0MXzapPm1uNdxyGk0mTAn5qrsVS6uQUSDOpUgWVLCqsgZfA/lhRx6TCLr1MvxeRqXOb1peWXWg3Q==",
      "requires": {
        "lodash": "^4.17.11"
      }
    },
    "concat-map": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
      "integrity": "sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg=="
    },
    "content-disposition": {
      "version": "0.5.4",
      "resolved": "https://registry.npmjs.org/content-disposition/-/content-disposition-0.5.4.tgz",
      "integrity": "sha512-FveZTNuGw04cxlAiWbzi6zTAL/lhehaWbTtgluJh4/E95DqMwTmha3KZN1aAWA8cFIhHzMZUvLevkw5Rqk+tSQ==",
      "requires": {
        "safe-buffer": "5.2.1"
      }
    },
    "content-type": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/content-type/-/content-type-1.0.5.tgz",
      "integrity": "sha512-nTjqfcBFEipKdXCv4YDQWCfmcLZKm81ldF0pAopTvyrFGVbcR6P/VAAd5G7N+0tTr8QqiU0tFadD6FK4NtJwOA=="
    },
    "cookie": {
      "version": "0.5.0",
      "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.5.0.tgz",
      "integrity": "sha512-YZ3GUyn/o8gfKJlnlX7g7xq4gyO6OSuhGPKaaGssGB2qgDUS0gPgtTvoyZLTt9Ab6dC4hfc9dV5arkvc/OCmrw=="
    },
    "cookie-signature": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.6.tgz",
      "integrity": "sha512-QADzlaHc8icV8I7vbaJXJwod9HWYp8uCqf1xa4OfNu1T7JVxQIrUgOWtHdNDtPiywmFbiS12VjotIXLrKM3orQ=="
    },
    "cors": {
      "version": "2.8.5",
      "resolved": "https://registry.npmjs.org/cors/-/cors-2.8.5.tgz",
      "integrity": "sha512-KIHbLJqu73RGr/hnbrO9uBeixNGuvSQjul/jdFvS/KFSIH1hWVd1ng7zOHx+YrEfInLG7q4n6GHQ9cDtxv/P6g==",
      "requires": {
        "object-assign": "^4",
        "vary": "^1"
      }
    },
    "cross-spawn": {
      "version": "7.0.3",
      "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.3.tgz",
      "integrity": "sha512-iRDPJKUPVEND7dHPO8rkbOnPpyDygcDFtWjpeWNCgy8WP2rXcxXL8TskReQl6OrB2G7+UJrags1q15Fudc7G6w==",
      "requires": {
        "path-key": "^3.1.0",
        "shebang-command": "^2.0.0",
        "which": "^2.0.1"
      }
    },
    "crypto-js": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/crypto-js/-/crypto-js-4.2.0.tgz",
      "integrity": "sha512-KALDyEYgpY+Rlob/iriUtjV6d5Eq+Y191A5g4UqLAi8CyGP9N1+FdVbkc1SxKc2r4YAYqG8JzO2KGL+AizD70Q=="
    },
    "debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "requires": {
        "ms": "2.0.0"
      }
    },
    "define-data-property": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/define-data-property/-/define-data-property-1.1.1.tgz",
      "integrity": "sha512-E7uGkTzkk1d0ByLeSc6ZsFS79Axg+m1P/VsgYsxHgiuc3tFSj+MjMIwe90FC4lOAZzNBdY7kkO2P2wKdsQ1vgQ==",
      "requires": {
        "get-intrinsic": "^1.2.1",
        "gopd": "^1.0.1",
        "has-property-descriptors": "^1.0.0"
      }
    },
    "depd": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/depd/-/depd-2.0.0.tgz",
      "integrity": "sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw=="
    },
    "destroy": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/destroy/-/destroy-1.2.0.tgz",
      "integrity": "sha512-2sJGJTaXIIaR1w4iJSNoN0hnMY7Gpc/n8D4qSCJw8QqFWXf7cuAgnEHxBpweaVcPevC2l3KpjYCx3NypQQgaJg=="
    },
    "eastasianwidth": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/eastasianwidth/-/eastasianwidth-0.2.0.tgz",
      "integrity": "sha512-I88TYZWc9XiYHRQ4/3c5rjjfgkjhLyW2luGIheGERbNQ6OY7yTybanSpDXZa8y7VUP9YmDcYa+eyq4ca7iLqWA=="
    },
    "ee-first": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/ee-first/-/ee-first-1.1.1.tgz",
      "integrity": "sha512-WMwm9LhRUo+WUaRN+vRuETqG89IgZphVSNkdFgeb6sS/E4OrDIN7t48CAewSHXc6C8lefD8KKfr5vY61brQlow=="
    },
    "emoji-regex": {
      "version": "9.2.2",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-9.2.2.tgz",
      "integrity": "sha512-L18DaJsXSUk2+42pv8mLs5jJT2hqFkFE4j21wOmgbUqsZ2hL72NsUU785g9RXgo3s0ZNgVl42TiHp3ZtOv/Vyg=="
    },
    "encodeurl": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-1.0.2.tgz",
      "integrity": "sha512-TPJXq8JqFaVYm2CWmPvnP2Iyo4ZSM7/QKcSmuMLDObfpH5fi7RUGmd/rTDf+rut/saiDiQEeVTNgAmJEdAOx0w=="
    },
    "engine.io": {
      "version": "6.5.4",
      "resolved": "https://registry.npmjs.org/engine.io/-/engine.io-6.5.4.tgz",
      "integrity": "sha512-KdVSDKhVKyOi+r5uEabrDLZw2qXStVvCsEB/LN3mw4WFi6Gx50jTyuxYVCwAAC0U46FdnzP/ScKRBTXb/NiEOg==",
      "requires": {
        "@types/cookie": "^0.4.1",
        "@types/cors": "^2.8.12",
        "@types/node": ">=10.0.0",
        "accepts": "~1.3.4",
        "base64id": "2.0.0",
        "cookie": "~0.4.1",
        "cors": "~2.8.5",
        "debug": "~4.3.1",
        "engine.io-parser": "~5.2.1",
        "ws": "~8.11.0"
      },
      "dependencies": {
        "cookie": {
          "version": "0.4.2",
          "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.4.2.tgz",
          "integrity": "sha512-aSWTXFzaKWkvHO1Ny/s+ePFpvKsPnjc551iI41v3ny/ow6tBG5Vd+FuqGNhh1LxOmVzOlGUriIlOaokOvhaStA=="
        },
        "debug": {
          "version": "4.3.4",
          "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
          "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
          "requires": {
            "ms": "2.1.2"
          }
        },
        "ms": {
          "version": "2.1.2",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
          "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w=="
        }
      }
    },
    "engine.io-parser": {
      "version": "5.2.2",
      "resolved": "https://registry.npmjs.org/engine.io-parser/-/engine.io-parser-5.2.2.tgz",
      "integrity": "sha512-RcyUFKA93/CXH20l4SoVvzZfrSDMOTUS3bWVpTt2FuFP+XYrL8i8oonHP7WInRyVHXh0n/ORtoeiE1os+8qkSw=="
    },
    "escape-html": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz",
      "integrity": "sha512-NiSupZ4OeuGwr68lGIeym/ksIZMJodUGOSCZ/FSnTxcrekbvqrgdUxlJOMpijaKZVjAJrWrGs/6Jy8OMuyj9ow=="
    },
    "etag": {
      "version": "1.8.1",
      "resolved": "https://registry.npmjs.org/etag/-/etag-1.8.1.tgz",
      "integrity": "sha512-aIL5Fx7mawVa300al2BnEE4iNvo1qETxLrPI/o05L7z6go7fCw1J6EQmbK4FmJ2AS7kgVF/KEZWufBfdClMcPg=="
    },
    "express": {
      "version": "4.18.2",
      "resolved": "https://registry.npmjs.org/express/-/express-4.18.2.tgz",
      "integrity": "sha512-5/PsL6iGPdfQ/lKM1UuielYgv3BUoJfz1aUwU9vHZ+J7gyvwdQXFEBIEIaxeGf0GIcreATNyBExtalisDbuMqQ==",
      "requires": {
        "accepts": "~1.3.8",
        "array-flatten": "1.1.1",
        "body-parser": "1.20.1",
        "content-disposition": "0.5.4",
        "content-type": "~1.0.4",
        "cookie": "0.5.0",
        "cookie-signature": "1.0.6",
        "debug": "2.6.9",
        "depd": "2.0.0",
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "etag": "~1.8.1",
        "finalhandler": "1.2.0",
        "fresh": "0.5.2",
        "http-errors": "2.0.0",
        "merge-descriptors": "1.0.1",
        "methods": "~1.1.2",
        "on-finished": "2.4.1",
        "parseurl": "~1.3.3",
        "path-to-regexp": "0.1.7",
        "proxy-addr": "~2.0.7",
        "qs": "6.11.0",
        "range-parser": "~1.2.1",
        "safe-buffer": "5.2.1",
        "send": "0.18.0",
        "serve-static": "1.15.0",
        "setprototypeof": "1.2.0",
        "statuses": "2.0.1",
        "type-is": "~1.6.18",
        "utils-merge": "1.0.1",
        "vary": "~1.1.2"
      }
    },
    "finalhandler": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/finalhandler/-/finalhandler-1.2.0.tgz",
      "integrity": "sha512-5uXcUVftlQMFnWC9qu/svkWv3GTd2PfUhK/3PLkYNAe7FbqJMt3515HaxE6eRL74GdsriiwujiawdaB1BpEISg==",
      "requires": {
        "debug": "2.6.9",
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "on-finished": "2.4.1",
        "parseurl": "~1.3.3",
        "statuses": "2.0.1",
        "unpipe": "~1.0.0"
      }
    },
    "foreground-child": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/foreground-child/-/foreground-child-3.1.1.tgz",
      "integrity": "sha512-TMKDUnIte6bfb5nWv7V/caI169OHgvwjb7V4WkeUvbQQdjr5rWKqHFiKWb/fcOwB+CzBT+qbWjvj+DVwRskpIg==",
      "requires": {
        "cross-spawn": "^7.0.0",
        "signal-exit": "^4.0.1"
      }
    },
    "forwarded": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/forwarded/-/forwarded-0.2.0.tgz",
      "integrity": "sha512-buRG0fpBtRHSTCOASe6hD258tEubFoRLb4ZNA6NxMVHNw2gOcwHo9wyablzMzOA5z9xA9L1KNjk/Nt6MT9aYow=="
    },
    "fresh": {
      "version": "0.5.2",
      "resolved": "https://registry.npmjs.org/fresh/-/fresh-0.5.2.tgz",
      "integrity": "sha512-zJ2mQYM18rEFOudeV4GShTGIQ7RbzA7ozbU9I/XBpm7kqgMywgmylMwXHxZJmkVoYkna9d2pVXVXPdYTP9ej8Q=="
    },
    "fs-extra": {
      "version": "11.2.0",
      "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-11.2.0.tgz",
      "integrity": "sha512-PmDi3uwK5nFuXh7XDTlVnS17xJS7vW36is2+w3xcv8SVxiB4NyATf4ctkVY5bkSjX0Y4nbvZCq1/EjtEyr9ktw==",
      "requires": {
        "graceful-fs": "^4.2.0",
        "jsonfile": "^6.0.1",
        "universalify": "^2.0.0"
      }
    },
    "fs.realpath": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz",
      "integrity": "sha512-OO0pH2lK6a0hZnAdau5ItzHPI6pUlvI7jMVnxUQRtw4owF2wk8lOSabtGDCTP4Ggrg2MbGnWO9X8K1t4+fGMDw=="
    },
    "function-bind": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz",
      "integrity": "sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA=="
    },
    "gaze": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/gaze/-/gaze-1.1.3.tgz",
      "integrity": "sha512-BRdNm8hbWzFzWHERTrejLqwHDfS4GibPoq5wjTPIoJHoBtKGPg3xAFfxmM+9ztbXelxcf2hwQcaz1PtmFeue8g==",
      "requires": {
        "globule": "^1.0.0"
      }
    },
    "get-intrinsic": {
      "version": "1.2.2",
      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.2.2.tgz",
      "integrity": "sha512-0gSo4ml/0j98Y3lngkFEot/zhiCeWsbYIlZ+uZOVgzLyLaUw7wxUL+nCTP0XJvJg1AXulJRI3UJi8GsbDuxdGA==",
      "requires": {
        "function-bind": "^1.1.2",
        "has-proto": "^1.0.1",
        "has-symbols": "^1.0.3",
        "hasown": "^2.0.0"
      }
    },
    "glob": {
      "version": "10.3.12",
      "resolved": "https://registry.npmjs.org/glob/-/glob-10.3.12.tgz",
      "integrity": "sha512-TCNv8vJ+xz4QiqTpfOJA7HvYv+tNIRHKfUWw/q+v2jdgN4ebz+KY9tGx5J4rHP0o84mNP+ApH66HRX8us3Khqg==",
      "requires": {
        "foreground-child": "^3.1.0",
        "jackspeak": "^2.3.6",
        "minimatch": "^9.0.1",
        "minipass": "^7.0.4",
        "path-scurry": "^1.10.2"
      }
    },
    "globule": {
      "version": "1.3.4",
      "resolved": "https://registry.npmjs.org/globule/-/globule-1.3.4.tgz",
      "integrity": "sha512-OPTIfhMBh7JbBYDpa5b+Q5ptmMWKwcNcFSR/0c6t8V4f3ZAVBEsKNY37QdVqmLRYSMhOUGYrY0QhSoEpzGr/Eg==",
      "requires": {
        "glob": "~7.1.1",
        "lodash": "^4.17.21",
        "minimatch": "~3.0.2"
      },
      "dependencies": {
        "brace-expansion": {
          "version": "1.1.11",
          "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
          "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
          "requires": {
            "balanced-match": "^1.0.0",
            "concat-map": "0.0.1"
          }
        },
        "glob": {
          "version": "7.1.7",
          "resolved": "https://registry.npmjs.org/glob/-/glob-7.1.7.tgz",
          "integrity": "sha512-OvD9ENzPLbegENnYP5UUfJIirTg4+XwMWGaQfQTY0JenxNvvIKP3U3/tAQSPIu/lHxXYSZmpXlUHeqAIdKzBLQ==",
          "requires": {
            "fs.realpath": "^1.0.0",
            "inflight": "^1.0.4",
            "inherits": "2",
            "minimatch": "^3.0.4",
            "once": "^1.3.0",
            "path-is-absolute": "^1.0.0"
          }
        },
        "minimatch": {
          "version": "3.0.8",
          "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.0.8.tgz",
          "integrity": "sha512-6FsRAQsxQ61mw+qP1ZzbL9Bc78x2p5OqNgNpnoAFLTrX8n5Kxph0CsnhmKKNXTWjXqU5L0pGPR7hYk+XWZr60Q==",
          "requires": {
            "brace-expansion": "^1.1.7"
          }
        }
      }
    },
    "gopd": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/gopd/-/gopd-1.0.1.tgz",
      "integrity": "sha512-d65bNlIadxvpb/A2abVdlqKqV563juRnZ1Wtk6s1sIR8uNsXR70xqIzVqxVf1eTqDunwT2MkczEeaezCKTZhwA==",
      "requires": {
        "get-intrinsic": "^1.1.3"
      }
    },
    "graceful-fs": {
      "version": "4.2.11",
      "resolved": "https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.2.11.tgz",
      "integrity": "sha512-RbJ5/jmFcNNCcDV5o9eTnBLJ/HszWV0P73bc+Ff4nS/rJj+YaS6IGyiOL0VoBYX+l1Wrl3k63h/KrH+nhJ0XvQ=="
    },
    "has-property-descriptors": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/has-property-descriptors/-/has-property-descriptors-1.0.1.tgz",
      "integrity": "sha512-VsX8eaIewvas0xnvinAe9bw4WfIeODpGYikiWYLH+dma0Jw6KHYqWiWfhQlgOVK8D6PvjubK5Uc4P0iIhIcNVg==",
      "requires": {
        "get-intrinsic": "^1.2.2"
      }
    },
    "has-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/has-proto/-/has-proto-1.0.1.tgz",
      "integrity": "sha512-7qE+iP+O+bgF9clE5+UoBFzE65mlBiVj3tKCrlNQ0Ogwm0BjpT/gK4SlLYDMybDh5I3TCTKnPPa0oMG7JDYrhg=="
    },
    "has-symbols": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.0.3.tgz",
      "integrity": "sha512-l3LCuF6MgDNwTDKkdYGEihYjt5pRPbEg46rtlmnSPlUbgmB8LOIrKJbYYFBSbnPaJexMKtiPO8hmeRjRz2Td+A=="
    },
    "hasown": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/hasown/-/hasown-2.0.0.tgz",
      "integrity": "sha512-vUptKVTpIJhcczKBbgnS+RtcuYMB8+oNzPK2/Hp3hanz8JmpATdmmgLgSaadVREkDm+e2giHwY3ZRkyjSIDDFA==",
      "requires": {
        "function-bind": "^1.1.2"
      }
    },
    "http-errors": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-2.0.0.tgz",
      "integrity": "sha512-FtwrG/euBzaEjYeRqOgly7G0qviiXoJWnvEH2Z1plBdXgbyjv34pHTSb9zoeHMyDy33+DWy5Wt9Wo+TURtOYSQ==",
      "requires": {
        "depd": "2.0.0",
        "inherits": "2.0.4",
        "setprototypeof": "1.2.0",
        "statuses": "2.0.1",
        "toidentifier": "1.0.1"
      }
    },
    "iconv-lite": {
      "version": "0.4.24",
      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.24.tgz",
      "integrity": "sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==",
      "requires": {
        "safer-buffer": ">= 2.1.2 < 3"
      }
    },
    "inflight": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz",
      "integrity": "sha512-k92I/b08q4wvFscXCLvqfsHCrjrF7yiXsQuIVvVE7N82W3+aqpzuUdBbfhWcy/FZR3/4IgflMgKLOsvPDrGCJA==",
      "requires": {
        "once": "^1.3.0",
        "wrappy": "1"
      }
    },
    "inherits": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ=="
    },
    "ipaddr.js": {
      "version": "1.9.1",
      "resolved": "https://registry.npmjs.org/ipaddr.js/-/ipaddr.js-1.9.1.tgz",
      "integrity": "sha512-0KI/607xoxSToH7GjN1FfSbLoU0+btTicjsQSWQlh/hZykN8KpmMf7uYwPW3R+akZ6R/w18ZlXSHBYXiYUPO3g=="
    },
    "is-fullwidth-code-point": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
      "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg=="
    },
    "isexe": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
      "integrity": "sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw=="
    },
    "jackspeak": {
      "version": "2.3.6",
      "resolved": "https://registry.npmjs.org/jackspeak/-/jackspeak-2.3.6.tgz",
      "integrity": "sha512-N3yCS/NegsOBokc8GAdM8UcmfsKiSS8cipheD/nivzr700H+nsMOxJjQnvwOcRYVuFkdH0wGUvW2WbXGmrZGbQ==",
      "requires": {
        "@isaacs/cliui": "^8.0.2",
        "@pkgjs/parseargs": "^0.11.0"
      }
    },
    "joi": {
      "version": "17.12.3",
      "resolved": "https://registry.npmjs.org/joi/-/joi-17.12.3.tgz",
      "integrity": "sha512-2RRziagf555owrm9IRVtdKynOBeITiDpuZqIpgwqXShPncPKNiRQoiGsl/T8SQdq+8ugRzH2LqY67irr2y/d+g==",
      "requires": {
        "@hapi/hoek": "^9.3.0",
        "@hapi/topo": "^5.1.0",
        "@sideway/address": "^4.1.5",
        "@sideway/formula": "^3.0.1",
        "@sideway/pinpoint": "^2.0.0"
      }
    },
    "jsonfile": {
      "version": "6.1.0",
      "resolved": "https://registry.npmjs.org/jsonfile/-/jsonfile-6.1.0.tgz",
      "integrity": "sha512-5dgndWOriYSm5cnYaJNhalLNDKOqFwyDB/rr1E9ZsGciGvKPs8R2xYGCacuf3z6K1YKDz182fd+fY3cn3pMqXQ==",
      "requires": {
        "graceful-fs": "^4.1.6",
        "universalify": "^2.0.0"
      }
    },
    "line-counter": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/line-counter/-/line-counter-1.1.0.tgz",
      "integrity": "sha512-6bmXJG/pOX5HBb2aIJZrI9CALBgY1VMbS0GPuXfJaT13UEfee/2xxPCsOOJdXLl3KPRyBf2/D+cjiG8hU9S7LA=="
    },
    "lines-and-columns": {
      "version": "1.2.4",
      "resolved": "https://registry.npmjs.org/lines-and-columns/-/lines-and-columns-1.2.4.tgz",
      "integrity": "sha512-7ylylesZQ/PV29jhEDl3Ufjo6ZX7gCqJr5F7PKrqc93v7fzSymt1BpwEU8nAUXs8qzzvqhbjhK5QZg6Mt/HkBg=="
    },
    "lodash": {
      "version": "4.17.21",
      "resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz",
      "integrity": "sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg=="
    },
    "lru-cache": {
      "version": "10.2.0",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-10.2.0.tgz",
      "integrity": "sha512-2bIM8x+VAf6JT4bKAljS1qUWgMsqZRPGJS6FSahIMPVvctcNhyVp7AJu7quxOW9jwkryBReKZY5tY5JYv2n/7Q=="
    },
    "media-typer": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/media-typer/-/media-typer-0.3.0.tgz",
      "integrity": "sha512-dq+qelQ9akHpcOl/gUVRTxVIOkAJ1wR3QAvb4RsVjS8oVoFjDGTc679wJYmUmknUF5HwMLOgb5O+a3KxfWapPQ=="
    },
    "merge-descriptors": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/merge-descriptors/-/merge-descriptors-1.0.1.tgz",
      "integrity": "sha512-cCi6g3/Zr1iqQi6ySbseM1Xvooa98N0w31jzUYrXPX2xqObmFGHJ0tQ5u74H3mVh7wLouTseZyYIq39g8cNp1w=="
    },
    "methods": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/methods/-/methods-1.1.2.tgz",
      "integrity": "sha512-iclAHeNqNm68zFtnZ0e+1L2yUIdvzNoauKU4WBA3VvH/vPFieF7qfRlwUZU+DA9P9bPXIS90ulxoUoCH23sV2w=="
    },
    "mime": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/mime/-/mime-1.6.0.tgz",
      "integrity": "sha512-x0Vn8spI+wuJ1O6S7gnbaQg8Pxh4NNHb7KSINmEWKiPE4RKOplvijn+NkmYmmRgP68mc70j2EbeTFRsrswaQeg=="
    },
    "mime-db": {
      "version": "1.52.0",
      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
      "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg=="
    },
    "mime-types": {
      "version": "2.1.35",
      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
      "integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
      "requires": {
        "mime-db": "1.52.0"
      }
    },
    "minimatch": {
      "version": "9.0.4",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-9.0.4.tgz",
      "integrity": "sha512-KqWh+VchfxcMNRAJjj2tnsSJdNbHsVgnkBhTNrW7AjVo6OvLtxw8zfT9oLw1JSohlFzJ8jCoTgaoXvJ+kHt6fw==",
      "requires": {
        "brace-expansion": "^2.0.1"
      }
    },
    "minipass": {
      "version": "7.0.4",
      "resolved": "https://registry.npmjs.org/minipass/-/minipass-7.0.4.tgz",
      "integrity": "sha512-jYofLM5Dam9279rdkWzqHozUo4ybjdZmCsDHePy5V/PbBcVMiSZR97gmAy45aqi8CK1lG2ECd356FU86avfwUQ=="
    },
    "ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A=="
    },
    "multilang-extract-comments": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/multilang-extract-comments/-/multilang-extract-comments-0.4.0.tgz",
      "integrity": "sha512-8mXCo9Q42Wyfho9nn7hHkG/0sKxH0nJWfmBLl8+c+FLv++XhFkFC1sntOk4NFZ+nSpoMjlF/8ILeOLyMRTFbIw==",
      "requires": {
        "comment-patterns": "^0.12.0",
        "line-counter": "^1.0.3",
        "lodash": "^4.17.11",
        "quotemeta": "0.0.0"
      }
    },
    "mz": {
      "version": "2.7.0",
      "resolved": "https://registry.npmjs.org/mz/-/mz-2.7.0.tgz",
      "integrity": "sha512-z81GNO7nnYMEhrGh9LeymoE4+Yr0Wn5McHIZMK5cfQCl+NDX08sCZgUc9/6MHni9IWuFLm1Z3HTCXu2z9fN62Q==",
      "requires": {
        "any-promise": "^1.0.0",
        "object-assign": "^4.0.1",
        "thenify-all": "^1.0.0"
      }
    },
    "negotiator": {
      "version": "0.6.3",
      "resolved": "https://registry.npmjs.org/negotiator/-/negotiator-0.6.3.tgz",
      "integrity": "sha512-+EUsqGPLsM+j/zdChZjsnX51g4XrHFOIXwfnCVPGlQk/k5giakcKsuxCObBRu6DSm9opw/O6slWbJdghQM4bBg=="
    },
    "object-assign": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
      "integrity": "sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg=="
    },
    "object-inspect": {
      "version": "1.13.1",
      "resolved": "https://registry.npmjs.org/object-inspect/-/object-inspect-1.13.1.tgz",
      "integrity": "sha512-5qoj1RUiKOMsCCNLV1CBiPYE10sziTsnmNxkAI/rZhiD63CF7IqdFGC/XzjWjpSgLf0LxXX3bDFIh0E18f6UhQ=="
    },
    "on-finished": {
      "version": "2.4.1",
      "resolved": "https://registry.npmjs.org/on-finished/-/on-finished-2.4.1.tgz",
      "integrity": "sha512-oVlzkg3ENAhCk2zdv7IJwd/QUD4z2RxRwpkcGY8psCVcCYZNq4wYnVWALHM+brtuJjePWiYF/ClmuDr8Ch5+kg==",
      "requires": {
        "ee-first": "1.1.1"
      }
    },
    "once": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
      "integrity": "sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==",
      "requires": {
        "wrappy": "1"
      }
    },
    "parseurl": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/parseurl/-/parseurl-1.3.3.tgz",
      "integrity": "sha512-CiyeOxFT/JZyN5m0z9PfXw4SCBJ6Sygz1Dpl0wqjlhDEGGBP1GnsUVEL0p63hoG1fcj3fHynXi9NYO4nWOL+qQ=="
    },
    "path-is-absolute": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz",
      "integrity": "sha512-AVbw3UJ2e9bq64vSaS9Am0fje1Pa8pbGqTTsmXfaIiMpnr5DlDhfJOuLj9Sf95ZPVDAUerDfEk88MPmPe7UCQg=="
    },
    "path-key": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz",
      "integrity": "sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q=="
    },
    "path-scurry": {
      "version": "1.10.2",
      "resolved": "https://registry.npmjs.org/path-scurry/-/path-scurry-1.10.2.tgz",
      "integrity": "sha512-7xTavNy5RQXnsjANvVvMkEjvloOinkAjv/Z6Ildz9v2RinZ4SBKTWFOVRbaF8p0vpHnyjV/UwNDdKuUv6M5qcA==",
      "requires": {
        "lru-cache": "^10.2.0",
        "minipass": "^5.0.0 || ^6.0.2 || ^7.0.0"
      }
    },
    "path-to-regexp": {
      "version": "0.1.7",
      "resolved": "https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-0.1.7.tgz",
      "integrity": "sha512-5DFkuoqlv1uYQKxy8omFBeJPQcdoE07Kv2sferDCrAq1ohOU+MSDswDIbnx3YAM60qIOnYa53wBhXW0EbMonrQ=="
    },
    "pirates": {
      "version": "4.0.6",
      "resolved": "https://registry.npmjs.org/pirates/-/pirates-4.0.6.tgz",
      "integrity": "sha512-saLsH7WeYYPiD25LDuLRRY/i+6HaPYr6G1OUlN39otzkSTxKnubR9RTxS3/Kk50s1g2JTgFwWQDQyplC5/SHZg=="
    },
    "prettier": {
      "version": "2.8.8",
      "resolved": "https://registry.npmjs.org/prettier/-/prettier-2.8.8.tgz",
      "integrity": "sha512-tdN8qQGvNjw4CHbY+XXk0JgCXn9QiF21a55rBe5LJAU+kDyC4WQn4+awm2Xfk2lQMk5fKup9XgzTZtGkjBdP9Q=="
    },
    "proxy-addr": {
      "version": "2.0.7",
      "resolved": "https://registry.npmjs.org/proxy-addr/-/proxy-addr-2.0.7.tgz",
      "integrity": "sha512-llQsMLSUDUPT44jdrU/O37qlnifitDP+ZwrmmZcoSKyLKvtZxpyV0n2/bD/N4tBAAZ/gJEdZU7KMraoK1+XYAg==",
      "requires": {
        "forwarded": "0.2.0",
        "ipaddr.js": "1.9.1"
      }
    },
    "qs": {
      "version": "6.11.0",
      "resolved": "https://registry.npmjs.org/qs/-/qs-6.11.0.tgz",
      "integrity": "sha512-MvjoMCJwEarSbUYk5O+nmoSzSutSsTwF85zcHPQ9OrlFoZOYIjaqBAJIqIXjptyD5vThxGq52Xu/MaJzRkIk4Q==",
      "requires": {
        "side-channel": "^1.0.4"
      }
    },
    "quotemeta": {
      "version": "0.0.0",
      "resolved": "https://registry.npmjs.org/quotemeta/-/quotemeta-0.0.0.tgz",
      "integrity": "sha512-1XGObUh7RN5b58vKuAsrlfqT+Rc4vmw8N4pP9gFCq1GFlTdV0Ex/D2Ro1Drvrqj++HPi3ig0Np17XPslELeMRA=="
    },
    "range-parser": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/range-parser/-/range-parser-1.2.1.tgz",
      "integrity": "sha512-Hrgsx+orqoygnmhFbKaHE6c296J+HTAQXoxEF6gNupROmmGJRoyzfG3ccAveqCBrwr/2yxQ5BVd/GTl5agOwSg=="
    },
    "raw-body": {
      "version": "2.5.1",
      "resolved": "https://registry.npmjs.org/raw-body/-/raw-body-2.5.1.tgz",
      "integrity": "sha512-qqJBtEyVgS0ZmPGdCFPWJ3FreoqvG4MVQln/kCgF7Olq95IbOp0/BWyMwbdtn4VTvkM8Y7khCQ2Xgk/tcrCXig==",
      "requires": {
        "bytes": "3.1.2",
        "http-errors": "2.0.0",
        "iconv-lite": "0.4.24",
        "unpipe": "1.0.0"
      }
    },
    "safe-buffer": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
      "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ=="
    },
    "safer-buffer": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz",
      "integrity": "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg=="
    },
    "send": {
      "version": "0.18.0",
      "resolved": "https://registry.npmjs.org/send/-/send-0.18.0.tgz",
      "integrity": "sha512-qqWzuOjSFOuqPjFe4NOsMLafToQQwBSOEpS+FwEt3A2V3vKubTquT3vmLTQpFgMXp8AlFWFuP1qKaJZOtPpVXg==",
      "requires": {
        "debug": "2.6.9",
        "depd": "2.0.0",
        "destroy": "1.2.0",
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "etag": "~1.8.1",
        "fresh": "0.5.2",
        "http-errors": "2.0.0",
        "mime": "1.6.0",
        "ms": "2.1.3",
        "on-finished": "2.4.1",
        "range-parser": "~1.2.1",
        "statuses": "2.0.1"
      },
      "dependencies": {
        "ms": {
          "version": "2.1.3",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
          "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA=="
        }
      }
    },
    "serve-static": {
      "version": "1.15.0",
      "resolved": "https://registry.npmjs.org/serve-static/-/serve-static-1.15.0.tgz",
      "integrity": "sha512-XGuRDNjXUijsUL0vl6nSD7cwURuzEgglbOaFuZM9g3kwDXOWVTck0jLzjPzGD+TazWbboZYu52/9/XPdUgne9g==",
      "requires": {
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "parseurl": "~1.3.3",
        "send": "0.18.0"
      }
    },
    "set-function-length": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/set-function-length/-/set-function-length-1.1.1.tgz",
      "integrity": "sha512-VoaqjbBJKiWtg4yRcKBQ7g7wnGnLV3M8oLvVWwOk2PdYY6PEFegR1vezXR0tw6fZGF9csVakIRjrJiy2veSBFQ==",
      "requires": {
        "define-data-property": "^1.1.1",
        "get-intrinsic": "^1.2.1",
        "gopd": "^1.0.1",
        "has-property-descriptors": "^1.0.0"
      }
    },
    "setprototypeof": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz",
      "integrity": "sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw=="
    },
    "shebang-command": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz",
      "integrity": "sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==",
      "requires": {
        "shebang-regex": "^3.0.0"
      }
    },
    "shebang-regex": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz",
      "integrity": "sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A=="
    },
    "side-channel": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/side-channel/-/side-channel-1.0.4.tgz",
      "integrity": "sha512-q5XPytqFEIKHkGdiMIrY10mvLRvnQh42/+GoBlFW3b2LXLE2xxJpZFdm94we0BaoV3RwJyGqg5wS7epxTv0Zvw==",
      "requires": {
        "call-bind": "^1.0.0",
        "get-intrinsic": "^1.0.2",
        "object-inspect": "^1.9.0"
      }
    },
    "signal-exit": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-4.1.0.tgz",
      "integrity": "sha512-bzyZ1e88w9O1iNJbKnOlvYTrWPDl46O1bG0D3XInv+9tkPrxrN8jUUTiFlDkkmKWgn1M6CfIA13SuGqOa9Korw=="
    },
    "socket.io": {
      "version": "4.7.5",
      "resolved": "https://registry.npmjs.org/socket.io/-/socket.io-4.7.5.tgz",
      "integrity": "sha512-DmeAkF6cwM9jSfmp6Dr/5/mfMwb5Z5qRrSXLpo3Fq5SqyU8CMF15jIN4ZhfSwu35ksM1qmHZDQ/DK5XTccSTvA==",
      "requires": {
        "accepts": "~1.3.4",
        "base64id": "~2.0.0",
        "cors": "~2.8.5",
        "debug": "~4.3.2",
        "engine.io": "~6.5.2",
        "socket.io-adapter": "~2.5.2",
        "socket.io-parser": "~4.2.4"
      },
      "dependencies": {
        "debug": {
          "version": "4.3.4",
          "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
          "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
          "requires": {
            "ms": "2.1.2"
          }
        },
        "ms": {
          "version": "2.1.2",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
          "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w=="
        }
      }
    },
    "socket.io-adapter": {
      "version": "2.5.4",
      "resolved": "https://registry.npmjs.org/socket.io-adapter/-/socket.io-adapter-2.5.4.tgz",
      "integrity": "sha512-wDNHGXGewWAjQPt3pyeYBtpWSq9cLE5UW1ZUPL/2eGK9jtse/FpXib7epSTsz0Q0m+6sg6Y4KtcFTlah1bdOVg==",
      "requires": {
        "debug": "~4.3.4",
        "ws": "~8.11.0"
      },
      "dependencies": {
        "debug": {
          "version": "4.3.4",
          "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
          "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
          "requires": {
            "ms": "2.1.2"
          }
        },
        "ms": {
          "version": "2.1.2",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
          "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w=="
        }
      }
    },
    "socket.io-parser": {
      "version": "4.2.4",
      "resolved": "https://registry.npmjs.org/socket.io-parser/-/socket.io-parser-4.2.4.tgz",
      "integrity": "sha512-/GbIKmo8ioc+NIWIhwdecY0ge+qVBSMdgxGygevmdHj24bsfgtCmcUUcQ5ZzcylGFHsN3k4HB4Cgkl96KVnuew==",
      "requires": {
        "@socket.io/component-emitter": "~3.1.0",
        "debug": "~4.3.1"
      },
      "dependencies": {
        "debug": {
          "version": "4.3.4",
          "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
          "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
          "requires": {
            "ms": "2.1.2"
          }
        },
        "ms": {
          "version": "2.1.2",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
          "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w=="
        }
      }
    },
    "statuses": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/statuses/-/statuses-2.0.1.tgz",
      "integrity": "sha512-RwNA9Z/7PrK06rYLIzFMlaF+l73iwpzsqRIFgbMLbTcLD6cOao82TaWefPXQvB2fOC4AjuYSEndS7N/mTCbkdQ=="
    },
    "string-width": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-5.1.2.tgz",
      "integrity": "sha512-HnLOCR3vjcY8beoNLtcjZ5/nxn2afmME6lhrDrebokqMap+XbeW8n9TXpPDOqdGK5qcI3oT0GKTW6wC7EMiVqA==",
      "requires": {
        "eastasianwidth": "^0.2.0",
        "emoji-regex": "^9.2.2",
        "strip-ansi": "^7.0.1"
      }
    },
    "string-width-cjs": {
      "version": "npm:string-width@4.2.3",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
      "requires": {
        "emoji-regex": "^8.0.0",
        "is-fullwidth-code-point": "^3.0.0",
        "strip-ansi": "^6.0.1"
      },
      "dependencies": {
        "ansi-regex": {
          "version": "5.0.1",
          "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
          "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ=="
        },
        "emoji-regex": {
          "version": "8.0.0",
          "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
          "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A=="
        },
        "strip-ansi": {
          "version": "6.0.1",
          "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
          "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
          "requires": {
            "ansi-regex": "^5.0.1"
          }
        }
      }
    },
    "strip-ansi": {
      "version": "7.1.0",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-7.1.0.tgz",
      "integrity": "sha512-iq6eVVI64nQQTRYq2KtEg2d2uU7LElhTJwsH4YzIHZshxlgZms/wIc4VoDQTlG/IvVIrBKG06CrZnp0qv7hkcQ==",
      "requires": {
        "ansi-regex": "^6.0.1"
      }
    },
    "strip-ansi-cjs": {
      "version": "npm:strip-ansi@6.0.1",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
      "requires": {
        "ansi-regex": "^5.0.1"
      },
      "dependencies": {
        "ansi-regex": {
          "version": "5.0.1",
          "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
          "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ=="
        }
      }
    },
    "sucrase": {
      "version": "3.35.0",
      "resolved": "https://registry.npmjs.org/sucrase/-/sucrase-3.35.0.tgz",
      "integrity": "sha512-8EbVDiu9iN/nESwxeSxDKe0dunta1GOlHufmSSXxMD2z2/tMZpDMpvXQGsc+ajGo8y2uYUmixaSRUc/QPoQ0GA==",
      "requires": {
        "@jridgewell/gen-mapping": "^0.3.2",
        "commander": "^4.0.0",
        "glob": "^10.3.10",
        "lines-and-columns": "^1.1.6",
        "mz": "^2.7.0",
        "pirates": "^4.0.1",
        "ts-interface-checker": "^0.1.9"
      },
      "dependencies": {
        "commander": {
          "version": "4.1.1",
          "resolved": "https://registry.npmjs.org/commander/-/commander-4.1.1.tgz",
          "integrity": "sha512-NOKm8xhkzAjzFx8B2v5OAHT+u5pRQc2UCa2Vq9jYL/31o2wi9mxBA7LIFs3sV5VSC49z6pEhfbMULvShKj26WA=="
        }
      }
    },
    "thenify": {
      "version": "3.3.1",
      "resolved": "https://registry.npmjs.org/thenify/-/thenify-3.3.1.tgz",
      "integrity": "sha512-RVZSIV5IG10Hk3enotrhvz0T9em6cyHBLkH/YAZuKqd8hRkKhSfCGIcP2KUY0EPxndzANBmNllzWPwak+bheSw==",
      "requires": {
        "any-promise": "^1.0.0"
      }
    },
    "thenify-all": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/thenify-all/-/thenify-all-1.6.0.tgz",
      "integrity": "sha512-RNxQH/qI8/t3thXJDwcstUO4zeqo64+Uy/+sNVRBx4Xn2OX+OZ9oP+iJnNFqplFra2ZUVeKCSa2oVWi3T4uVmA==",
      "requires": {
        "thenify": ">= 3.1.0 < 4"
      }
    },
    "toidentifier": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/toidentifier/-/toidentifier-1.0.1.tgz",
      "integrity": "sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA=="
    },
    "ts-interface-checker": {
      "version": "0.1.13",
      "resolved": "https://registry.npmjs.org/ts-interface-checker/-/ts-interface-checker-0.1.13.tgz",
      "integrity": "sha512-Y/arvbn+rrz3JCKl9C4kVNfTfSm2/mEp5FSz5EsZSANGPSlQrpRI5M4PKF+mJnE52jOO90PnPSc3Ur3bTQw0gA=="
    },
    "type-is": {
      "version": "1.6.18",
      "resolved": "https://registry.npmjs.org/type-is/-/type-is-1.6.18.tgz",
      "integrity": "sha512-TkRKr9sUTxEH8MdfuCSP7VizJyzRNMjj2J2do2Jr3Kym598JVdEksuzPQCnlFPW4ky9Q+iA+ma9BGm06XQBy8g==",
      "requires": {
        "media-typer": "0.3.0",
        "mime-types": "~2.1.24"
      }
    },
    "undici-types": {
      "version": "5.26.5",
      "resolved": "https://registry.npmjs.org/undici-types/-/undici-types-5.26.5.tgz",
      "integrity": "sha512-JlCMO+ehdEIKqlFxk6IfVoAUVmgz7cU7zD/h9XZ0qzeosSHmUJVOzSQvvYSYWXkFXC+IfLKSIffhv0sVZup6pA=="
    },
    "universalify": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/universalify/-/universalify-2.0.1.tgz",
      "integrity": "sha512-gptHNQghINnc/vTGIk0SOFGFNXw7JVrlRUtConJRlvaw6DuX0wO5Jeko9sWrMBhh+PsYAZ7oXAiOnf/UKogyiw=="
    },
    "unpipe": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/unpipe/-/unpipe-1.0.0.tgz",
      "integrity": "sha512-pjy2bYhSsufwWlKwPc+l3cN7+wuJlK6uz0YdJEOlQDbl6jo/YlPi4mb8agUkVC8BF7V8NuzeyPNqRksA3hztKQ=="
    },
    "utils-merge": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/utils-merge/-/utils-merge-1.0.1.tgz",
      "integrity": "sha512-pMZTvIkT1d+TFGvDOqodOclx0QWkkgi6Tdoa8gC8ffGAAqz9pzPTZWAybbsHHoED/ztMtkv/VoYTYyShUn81hA=="
    },
    "vary": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/vary/-/vary-1.1.2.tgz",
      "integrity": "sha512-BNGbWLfd0eUPabhkXUVm0j8uuvREyTh5ovRa/dyow/BqAbZJyC+5fU+IzQOzmAKzYqYRAISoRhdQr3eIZ/PXqg=="
    },
    "which": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/which/-/which-2.0.2.tgz",
      "integrity": "sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==",
      "requires": {
        "isexe": "^2.0.0"
      }
    },
    "wrap-ansi": {
      "version": "8.1.0",
      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-8.1.0.tgz",
      "integrity": "sha512-si7QWI6zUMq56bESFvagtmzMdGOtoxfR+Sez11Mobfc7tm+VkUckk9bW2UeffTGVUbOksxmSw0AA2gs8g71NCQ==",
      "requires": {
        "ansi-styles": "^6.1.0",
        "string-width": "^5.0.1",
        "strip-ansi": "^7.0.1"
      }
    },
    "wrap-ansi-cjs": {
      "version": "npm:wrap-ansi@7.0.0",
      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz",
      "integrity": "sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==",
      "requires": {
        "ansi-styles": "^4.0.0",
        "string-width": "^4.1.0",
        "strip-ansi": "^6.0.0"
      },
      "dependencies": {
        "ansi-regex": {
          "version": "5.0.1",
          "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
          "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ=="
        },
        "ansi-styles": {
          "version": "4.3.0",
          "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
          "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
          "requires": {
            "color-convert": "^2.0.1"
          }
        },
        "emoji-regex": {
          "version": "8.0.0",
          "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
          "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A=="
        },
        "string-width": {
          "version": "4.2.3",
          "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
          "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
          "requires": {
            "emoji-regex": "^8.0.0",
            "is-fullwidth-code-point": "^3.0.0",
            "strip-ansi": "^6.0.1"
          }
        },
        "strip-ansi": {
          "version": "6.0.1",
          "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
          "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
          "requires": {
            "ansi-regex": "^5.0.1"
          }
        }
      }
    },
    "wrappy": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
      "integrity": "sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ=="
    },
    "ws": {
      "version": "8.11.0",
      "resolved": "https://registry.npmjs.org/ws/-/ws-8.11.0.tgz",
      "integrity": "sha512-HPG3wQd9sNQoT9xHyNCXoDUa+Xw/VevmY9FoHyQ+g+rrMn4j6FB4np7Z0OhdTgjx6MgQLK7jwSy1YecU1+4Asg==",
      "requires": {}
    }
  }
}

'''
'''--- package.json ---
{
  "name": "hyperfiles",
  "version": "1.0.0",
  "description": "organize everything",
  "directories": {
    "doc": "docs"
  },
  "scripts": {
    "bw": "bos-workspace",
    "dev": "bw ws dev",
    "dev:testnet": "bw ws dev -n testnet",
    "build": "bw ws build",
    "build:testnet": "bw ws build -n testnet"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/hyperfiles-org/hyperfiles.git"
  },
  "keywords": [
    "everything",
    "knowledge-graph",
    "composability"
  ],
  "author": "hyperfiles.near",
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/hyperfiles-org/hyperfiles/issues"
  },
  "homepage": "https://github.com/hyperfiles-org/hyperfiles#readme",
  "dependencies": {
    "bos-workspace": "^1.0.0-alpha"

  }
}

'''
'''--- public/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <title>Near social</title>
    <script defer="defer" src="/runtime.REPLACE_WITH_BUNDLE_HASH.bundle.js"></script>
    <script defer="defer" src="/main.REPLACE_WITH_BUNDLE_HASH.bundle.js"></script></head>
  <body>
    <near-social-viewer></near-social-viewer>
  </body>
</html>
'''
'''--- readme.md ---
# Hyperfiles

![hypefiles logo](images/logoblack.png)

Organize everything. Hyperfiles is a self-organizing universal knowledge graph. It was designed to support composable data exchange on open markets and data interoperability between applications or execution environments (e.g. blockchain virtual machines). Hyperfiles is built on the Near Blockchain Operating System (BOS) using [everything.dev](https://everything.dev) and currently only supports data types on Near. However, BOS is fundamentally chain agnostic and multi-chain composability is on the short-term roadmap.

**Quick Start**

1. [Hyperfiles Quickstart Guide](http://docs.hyperfiles.org)
2. [Create a new fileformat](https://everything.dev/flowscience.near/widget/create.fileFormat)
3. [Create a new file](https://everything.dev/flowscience.near/widget/create.file)

**Guides and Example Use Cases** (in progress)
- Guide: ["How to Create a New Fileformat"] - coming soon!
- Guide: ["How to Create a New File"] - coming soon!
- Guide: ["How to Use Attestations"] - coming soon!
- Use Case: ["Near Attestation Service"](https://near.social/flowscience.near/widget/NAS) - in progress!
- Use Case: ["Hypercerts on BOS" - demo](https://near.social/flowscience.near/widget/hypercert.page) ~ [Docs](https://github.com/open-cann/hypercerts-on-bos)
- Use Case: ["Scientific Fileformat Ontology (SFO)"] - coming soon!
- Guide: ["Hyperfiles Development Roadmap"] - coming soon!

---

### Standardized Type Schema
- The Hyperfiles knowledge graph is composed by reducing any piece of data or code into a set of unique objects, called `records`, which map to a set of pre-defined `fields`.
- Each set of `fields` composes into a unique `fileformat`. Likewise, each set of `records` composes into a unique `file`.
- `Files` are an indexed combination of `fields` and `records`.
- `Jobs` are a specific `fileformat` type that contain a set of instructions to run a Docker container using decentralized compute networks.

![hyperfiles schema](images/core_schema.png)

### Self-Assembling Data Structures
These features will be developed after a front-end that enables users to manually interact with the knowledge graph.

- [ ] Any data or job can be mixed and matched, enabling seamless composability across apps.
- [ ] Fileformats are automatically detected & categorized when new data is entered or when new fileformats are created during queries and jobs.
- [ ] Fields are analyzed to identify primitive types and basic statistics
- [ ] Core types & user-specific types?
- [ ] Marketplace price determination

---

### Components

**Integrated Frontend** - [In Progress](https://github.com/flowscience/hyperfiles/tree/master/widgets/plugins/hyperfiles.jsx)
- [ ] Publish (file/fileformat) - coming soon!
- [ ] Explore - coming soon!
- [ ] Profile - coming soon!

**Top-Level Plugins**: These are the main components used to interact with the entire Hyperfiles knowledge graph.
- `newFile`: create a new file via upload, manual input, and queries - [MVP Complete!](https://everything.dev/flowscience.near/widget/create.file)
- `query`: find any set of things, then mix and match - coming soon!
- `newJob`: create a new job file and execute a tool config - coming soon!

**Mid-Level Plugins**: These components can be used by developers to create new use cases for Hyperfiles.
- `create.fileformat`: create a new fileformat thing (should fileformats have owners?) - [MVP Complete!](https://everything.dev/flowscience.near/widget/create.fileFormat)
- `create.record`: create a new record thing - [MVP Complete!](https://everything.dev/flowscience.near/widget/create.record)

**Backend Plugins**: These component(s) are used by the top-level and mid-level plugins and likely won't need to be modified when integrating or using Hyperfiles.
- `create.field`: create a new field thing - [MVP Complete!](https://everything.dev/flowscience.near/widget/create.field)

**Core Types**
1. [field](https://github.com/flowscience/hyperfiles/blob/master/types/core_types/field.json)
2. [record](https://github.com/flowscience/hyperfiles/blob/master/types/core_types/record.json)
3. [fileformat](https://github.com/flowscience/hyperfiles/blob/master/types/core_types/fileformat.json)
4. [file](https://github.com/flowscience/hyperfiles/blob/master/types/core_types/file.json)
5. [metadata](https://github.com/flowscience/hyperfiles/blob/master/types/core_types/metadata.json) - needs update!

---

**To Do**
- [ ] Enable upload if file matches a template. Otherwise, use input fields.
- [ ] Fileformat by creating an array of fields and checking if fields exist, then check if that combination of fields exists
- [ ] Create unique IDs for each unique Thing (start with core types)
- [ ] create.field (xN) → create.fileFormat (x0-1) → create.record (xN) → create.file (x1)
- [ ] Enable using queries to create new files
- [ ] Index [EAS](https://attest.sh/) & enable cross-minting

---

## Getting Started 

```
npm install
```

Then, run the command:

```
npm run dev
```

This will serve the widgets from `http://127.0.0.1:4040/`.

Go to [everything.dev/flags](https://everything.dev) and paste this value there.

Once set, see the locally served app at [hyperfiles.near/widget/app](https://everything.dev/hyperfiles.near/widget/app).

---

<img src="https://upload.wikimedia.org/wikipedia/commons/thumb/e/eb/PD-icon-black.svg/800px-PD-icon-black.svg.png" alt="Unlicense" width="12" height="12" /> [No rights reserved](https://github.com/flowscience/hyperfiles/blob/master/LICENSE).

---

'''
'''--- things/attestations/attestation-example.json ---
{
    uid: '0x5134f511e0533f997e569dac711952dde21daf14b316f3cce23835defc82c065',
    schema: '0x27d06e3659317e9a4f8154d1e849eb53d43d91fb4f219884d1684f86d797804a',
    refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',
    time: 1671219600,
    expirationTime: 0,
    revocationTime: 1671219636,
    recipient: '0xFD50b031E778fAb33DfD2Fc3Ca66a1EeF0652165',
    attester: '0x1e3de6aE412cA218FD2ae3379750388D414532dc',
    revocable: true,
    data: '0x0000000000000000000000000000000000000000000000000000000000000000'
}
'''
'''--- things/hypercerts/hypercertFileformats/fileformat.hypercert.json ---
{
    "data":{
        "formatName":"hypercert",
        "fields":[
            {
                "value":"hypercertName"
                },
            {
                "value":"hypercertProject"
                },
            {
                "value":"hypercertScopeTags"
                },
            {
                "value":"hypercertWorkStart"
                },
            {
                "value":"hypercertWorkEnd"
                },
            {
                "value":"hypercertContributors"
                },
            {
                "value":"hypercertUsageRights"
                },
            {
                "value":"hypercertAllowlist"
                },
            {
                "value":"hypercertDistribution"
                }]
            },
        "template":{
            "src":""
            },
        "type":"flowscience.near/type/fileformat"
    }
'''
'''--- things/hypercerts/hypercertsFiles/file.hypercert1.json ---
{
    "data":{
        "fileName":"hypercerts test",
        "fileFormat":"hyperfiles.near/type/fileformat.hypercert",
        "records":[
            "record.hypercert1.json",
            "record.hypercert2.json"
        ]  
    },
    "template":{
        "src":""
        },
    "type":"hyperfiles.near/type/file"
}
'''
'''--- things/hypercerts/hypercertsRecords/record.hypercert1.json ---
{
    "data":{
        "formatName":"hypercert",
        "fields":[
            {
                "hypercertName":"My First Hypercert"
                },
            {
                "hypercertProject":"Building Hypercerts on BOS."
                },
            {
                "hypercertScopeTags":"impact, attestation, open-source"
                },
            {
                "hypercertWorkStart":"09-20-2023"
                },
            {
                "hypercertWorkEnd":"01-18-2024"
                },
            {
                "hypercertContributors":"flowscience.near"
                },
            {
                "hypercertUsageRights":"Unrestricted."
                },
            {
                "hypercertAllowlist":"efiz.near, hack.near, hyperfiles.near"
                },
            {
                "hypercertDistribution":"100%"
                }]
            },
        "template":{
            "src":""
            },
        "type":"flowscience.near/type/fileformat.hypercert"
    }
'''
'''--- things/hypercerts/hypercertsRecords/record.hypercert2.json ---
{
    "data":{
        "formatName":"hypercert",
        "fields":[
            {
                "hypercertName":"My Second Hypercert"
                },
            {
                "hypercertProject":"Publishing my first Hypercert on BOS."
                },
            {
                "hypercertScopeTags":"impact, attestation, open-source"
                },
            {
                "hypercertWorkStart":"01-18-2024"
                },
            {
                "hypercertWorkEnd":"TBD (date this object is published on the Near blockchain)"
                },
            {
                "hypercertContributors":"flowscience.near"
                },
            {
                "hypercertUsageRights":"Unrestricted."
                },
            {
                "hypercertAllowlist":"efiz.near, hack.near, hyperfiles.near"
                },
            {
                "hypercertDistribution":"100%"
                }]
            },
        "template":{
            "src":""
            },
        "type":"flowscience.near/type/fileformat.hypercert"
    }
'''
'''--- things/misc/project.json ---
{
    "name":"Chillers",
    "description":"Only chill",
    "tags":{
        "chill":""}
}
'''
'''--- types/json/attestations/schemas/core/attestation.json ---
{
    "properties":[
        {
            "name":"UID",
            "type":"string",
            "required":true,
            "isMulti":false
            },
        {
            "name":"schema",
            "type":"UID",
            "required":true,
            "isMulti":false
            },
        {
            "name":"attestor",
            "type":"account",
            "required":true,
            "isMulti":false
            },
        {
            "name":"recipient",
            "type":"account",
            "required":true,
            "isMulti":true
            },
        {
            "name":"expiration",
            "type":"date",
            "required":false,
            "isMulti":false
            },
        {
            "name":"revoked?",
            "type":"date",
            "required":false,
            "isMulti":false
            },
        {
            "name":"refUID",
            "type":"efiz.near/type/thing",
            "required":true,
            "isMulti":true
            },
        {
            "name":"data",
            "type":"string",
            "required":true,
            "isMulti":true
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/attestations/schemas/core/const item = props.js ---
const item = props.item;
const onChange = props.onChange;

const Input = styled.input`
  height: 30px;
`;

const Select = styled.select`
  height: 30px;
`;

const Button = styled.button`
  text-transform: lowercase !important;
  padding: 8px;
`;

const Container = styled.div`
  display: flex;
  flex-direction: column;
  gap: 4px;
`;

const Row = styled.div`
  display: flex;
  flex-direction: row;
`;

const Label = styled.label`
`;

State.init({
  ...item.value,
});

const DynamicInput = ({ type, onChange, value, placeholder }) => {
  if (type === "boolean") {
    return (
      <Select onChange={onChange} value={value}>
        <option value="true">true</option>
        <option value="false">false</option>
      </Select>
    );
  } else {
    return (
      <Input
        type={type}
        onChange={onChange}
        value={value}
        placeholder={placeholder}
      />
    );
  }
};

// Primitive checks
if (["string", "number", "date", "time", "boolean"].includes(item.type)) {
  return (
    <DynamicInput
      type={item.type === "string" ? "text" : item.type}
      onChange={onChange}
      value={item.value}
    />
  );
}

// On-chain Type
const type = JSON.parse(Social.get(item.type, "final") || "null");
const properties = type.properties || [];
const createWidgetSrc = type.widgets?.create;

const handleInputChange = (name, value) => {
  State.update({ [name]: value });
  if (props.onChange) {
    props.onChange({ [name]: value });
  }
};

function Property({ property, value }) {
  // If property is multiple values
  if (property.isMulti === "true") {
    // Build an array (recursively calls this Widget)
    return (
      <Widget
        src="efiz.near/widget/every.array.build"
        props={{
          item: { ...property, value },
          onChange: (val) => handleInputChange(property.name, val),
        }}
      />
    );
  }
  // Else check for primitives
  if (["string", "number", "date", "time", "boolean"].includes(property.type)) {
    return (
      <DynamicInput
        type={property.type === "string" ? "text" : property.type}
        onChange={(e) => handleInputChange(property.name, e.target.value)}
        value={state[property.name] || ""}
        placeholder={property.name}
      />
    );
  } else {
    // This requires a specific type of creator
    // (like image upload)
    // TODO: I don't think this does what I want it to yet...
    const propertyType = JSON.parse(
      Social.get(property.type, "final") || "null"
    );
    const widgetSrc = propertyType?.widgets?.create;
    // it would be great to modify the onChange function
    return (
      <Widget
        src={widgetSrc}
        props={{ onChange: (e) => handleInputChange(property.name, e) }}
      />
    );
  }
}

return (
  <Container>
    {createWidgetSrc ? (
      <>
        <Widget src={createWidgetSrc} props={{ onChange }} />
      </>
    ) : (
      <>
        {properties?.map((property) => (
          <div key={property.name}>
            <Label>{property.name}</Label>
            <Row>
              <Property property={property} value={item.value[property.name]} />
            </Row>
          </div>
        ))}
      </>
    )}
  </Container>
);

'''
'''--- types/json/attestations/schemas/core/resolvers/attester.json ---

'''
'''--- types/json/attestations/schemas/core/schema.json ---
{
    "properties":[
        {
            "name":"UID",
            "type":"string",
            "required":true,
            "isMulti":false
            },
        {
            "name":"resolver",
            "type":"string",
            "required":false,
            "isMulti":false
            },
        {
            "name":"revocable",
            "type":"boolean",
            "required":true,
            "isMulti":false
            },
        {
            "name":"schema",
            "type":"string",
            "required":true,
            "isMulti":false
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/attestations/schemas/core/schemaResolver.json ---
{
    "properties":[
        {
            "name":"UID",
            "type":"bytes32",
            "required":true,
            "isMulti":false
            },
        {
            "name":"schemaResolver",
            "type":"AccountId",
            "required":true,
            "isMulti":false
            },
        {
            "name":"schema",
            "type":"attesations.hyperfiles.near/type/schema",
            "required":true,
            "isMulti":false
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/attestations/schemas/identity/bool/happyBirthday.json ---
{
    "properties":[
        {
            "name":"happyBirthday",
            "type":"bool",
            "required":true,
            "isMulti":false
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/attestations/schemas/identity/bool/isAccountOwner.json ---
{
    "properties":[
        {
            "name":"isAccountOwner",
            "type":"bool",
            "required":true,
            "isMulti":false
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/attestations/schemas/identity/bool/isAccreditedInvestor.json ---
{
    "properties":[
        {
            "name":"isAccreditedInvestor",
            "type":"bool",
            "required":true,
            "isMulti":false
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/attestations/schemas/identity/bool/isBuilder.json ---
{
    "schema":[
        {
            "name":"isBuilder",
            "type":"boolean",
            "required":true,
            "isMulti":false,
            "revocable":false,
            "resolver":"string",
            "UID":"string"
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/attestations/schemas/identity/bool/isFollower.json ---
{
    "properties":[
        {
            "name":"isFollower",
            "type":"bool",
            "required":true,
            "isMulti":false
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/attestations/schemas/identity/bool/isFollowing.json ---
{
    "properties":[
        {
            "name":"isFollowing",
            "type":"bool",
            "required":true,
            "isMulti":false
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/attestations/schemas/identity/bool/isFriend.json ---
{
    "properties":[
        {
            "name":"isFriend",
            "type":"bool",
            "required":true,
            "isMulti":false
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/attestations/schemas/identity/bool/isGithubUser.json ---
{
    "properties":[
        {
            "name":"isGithubUser",
            "type":"bool",
            "required":true,
            "isMulti":false
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/attestations/schemas/identity/bool/isHuman.json ---
{
    "properties":[
        {
            "name":"isHuman",
            "type":"bool",
            "required":true,
            "isMulti":false
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/attestations/schemas/identity/bool/isTwitterHandle.json ---
{
    "properties":[
        {
            "name":"isTwitterHandle",
            "type":"bool",
            "required":true,
            "isMulti":false
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/attestations/schemas/identity/bool/metIRL.json ---
{
    "properties":[
        {
            "name":"metIRL",
            "type":"bool",
            "required":true,
            "isMulti":false
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/attestations/schemas/identity/bool/passedKYC.json ---
{
    "properties":[
        {
            "name":"passedKYC",
            "type":"bool",
            "required":true,
            "isMulti":false
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/attestations/schemas/identity/string/hasCredential.json ---
{
    "properties":[
        {
            "name":"hasCredential",
            "type":"str",
            "required":true,
            "isMulti":false
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/attestations/schemas/opinion/bool/gm.json ---
{
    "properties":[
        {
            "name":"gm",
            "type":"bool",
            "required":true,
            "isMulti":false
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/attestations/schemas/opinion/bool/like.json ---
{
    "properties":[
        {
            "name":"like",
            "type":"bool",
            "required":true,
            "isMulti":false
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/attestations/schemas/opinion/bool/star.json ---
{
    "properties":[
        {
            "name":"star",
            "type":"bool",
            "required":true,
            "isMulti":false
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/attestations/schemas/opinion/bool/wokeUpBullish.json ---
{
    "properties":[
        {
            "name":"wokeUpBullish",
            "type":"bool",
            "required":true,
            "isMulti":false
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/attestations/schemas/opinion/string/addLabel.json ---
{
    "properties":[
        {
            "name":"addLabel",
            "type":"str",
            "required":true,
            "isMulti":false
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/attestations/schemas/opinion/string/hash.json ---
{
    "properties":[
        {
            "name":"hash",
            "type":"str",
            "required":true,
            "isMulti":false
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/attestations/schemas/opinion/string/makeStatement.json ---
{
    "properties":[
        {
            "name":"makeStatement",
            "type":"str",
            "required":true,
            "isMulti":false
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/attestations/schemas/opinion/string/nameSomething.json ---
{
    "properties":[
        {
            "name":"nameSomething",
            "type":"str",
            "required":true,
            "isMulti":false
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/attestations/schemas/opinion/string/version.json ---
{
    "properties":[
        {
            "name":"version",
            "type":"str",
            "required":true,
            "isMulti":false
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/attestations/schemas/potlock/fields/account.json ---
{
    "properties":[
        {
            "name":"account",
            "type":"string",
            "required":true,
            "isMulti":false
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/attestations/schemas/potlock/fields/compensation.json ---
{
    "properties":[
        {
            "name":"compensation",
            "type":"integer",
            "required":true,
            "isMulti":false
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/attestations/schemas/potlock/fields/description.json ---
{
    "properties":[
        {
            "name":"description",
            "type":"post",
            "required":true,
            "isMulti":false
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/attestations/schemas/potlock/fields/evidence.json ---
{
    "properties":[
        {
            "name":"evidence",
            "type":"hyperfiles.near/type/url",
            "required":true,
            "isMulti":false
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/attestations/schemas/potlock/fields/fundingRound.json ---
{
    "properties":[
        {
            "name":"fundingRound",
            "type":"string",
            "required":true,
            "isMulti":false
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/attestations/schemas/potlock/fields/matchingFunds.json ---
{
    "properties":[
        {
            "name":"matchingFunds",
            "type":"int",
            "required":true,
            "isMulti":false
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/attestations/schemas/potlock/fields/memo.json ---
{
    "properties":[
        {
            "name":"memo",
            "type":"string",
            "required":true,
            "isMulti":false
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/attestations/schemas/potlock/fields/post.json ---
{
    "properties":[
        {
            "name":"post",
            "type":"mob.near/widget/social.post",
            "required":true,
            "isMulti":false
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/attestations/schemas/potlock/fields/repository.json ---
{
    "properties":[
        {
            "name":"repository",
            "type":"hyperfiles.near/type/url",
            "required":true,
            "isMulti":false
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/attestations/schemas/potlock/fields/role.json ---
{
    "properties":[
        {
            "name":"role",
            "type":"string",
            "required":true,
            "isMulti":false
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/attestations/schemas/potlock/fields/routes.json ---
{
    "properties":[
        {
            "name":"routes",
            "type":"string",
            "required":true,
            "isMulti":true
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/attestations/schemas/potlock/fields/transaction.json ---
{
    "properties":[
        {
            "name":"transaction",
            "type":"string",
            "required":true,
            "isMulti":false
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/attestations/schemas/potlock/fields/url.json ---
{
    "properties":[
        {
            "name":"url",
            "type":"string",
            "required":true,
            "isMulti":false
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/attestations/schemas/potlock/isContributor.json ---
{
    "properties":[
        {
            "name":"contribution",
            "type":"UID",
            "required":true,
            "isMulti":"false"
            },
        {
            "name":"description",
            "type":"post",
            "required":true,
            "isMulti":"false"
            },
        {
            "name":"compensation",
            "type":"integer",
            "required":true,
            "isMulti":"false"
            },
        {
            "name":"evidence",
            "type":"URL",
            "required":true,
            "isMulti":"true"
            },
        {
            "name":"role",
            "type":"string",
            "required":true,
            "isMulti":"false"
            },
        {
            "name":"Name",
            "type":"AccountId",
            "required":true,
            "isMulti":"false"
            }
        {
            "name":"isContributor",
            "type":"bool",
            "required":true,
            "isMulti":"false"
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/attestations/schemas/potlock/isDonor.json ---
{
    "properties":[
        {
            "name":"donation",
            "type":"UID",
            "required":true,
            "isMulti":false
            },
        {
            "name":"whyDonated",
            "type":"memo",
            "required":false,
            "isMulti":false
            },
        {
            "name":"hasDonated",
            "type":"AccountId",
            "required":true,
            "isMulti":false
            },
        {
            "name":"transaction",
            "type":"transactionHash",
            "required":true,
            "isMulti":false
            },
        {
            "name":"isDonor",
            "type":"bool",
            "required":true,
            "isMulti":false
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/attestations/schemas/potlock/isFollower.json ---

'''
'''--- types/json/attestations/schemas/potlock/isIntegrated.json ---
{
    "properties":[
        {
            "name":"integration",
            "type":"UID",
            "required":true,
            "isMulti":false
            },
        {
            "name":"description",
            "type":"post",
            "required":true,
            "isMulti":false
            },
        {
            "name":"evidence",
            "type":"URL",
            "required":true,
            "isMulti":true
            },
        {
            "name":"isIntegrated",
            "type":"bool",
            "required":true,
            "isMulti":true
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/attestations/schemas/potlock/isProjectMilestone.json ---
{
    "properties":[
        {
            "name":"projectMilestone",
            "type":"UID",
            "required":true,
            "isMulti":false
            },
        {
            "name":"description",
            "type":"post",
            "required":true,
            "isMulti":false
            },
        {
            "name":"project",
            "type":"hyperfiles.near/type/project",
            "required":true,
            "isMulti":false
            },
        {
            "name":"isProjectMilestone",
            "type":"boolean",
            "required":true,
            "isMulti":false
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/attestations/schemas/potlock/isProjectProgress.json ---
{
    "properties":[
        {
            "name":"projectProgress",
            "type":"UID",
            "required":true,
            "isMulti":false
            },
        {
            "name":"description",
            "type":"post",
            "required":true,
            "isMulti":false
            },
        {
            "name":"milestone",
            "type":"hyperfiles.near/type/projectMilestone",
            "required":false,
            "isMulti":true
            },
        {
            "name":"evidence",
            "type":"URL",
            "required":true,
            "isMulti":true
            },
        {
            "name":"isProgress",
            "type":"bool",
            "required":true,
            "isMulti":true
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/attestations/schemas/potlock/isPublicGood.json ---
{
    "properties":[
        {
            "name":"isPublicGood",
            "type":"boolean",
            "required":true,
            "isMulti":false
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/attestations/schemas/potlock/isRegistered.json ---
{
    "properties":[
        {
            "name":"project",
            "type":"string",
            "required":true,
            "isMulti":false
            },
        {
            "name":"repository",
            "type":"URL",
            "required":true,
            "isMulti":false
            },
        {
            "name":"routes",
            "type":"efiz.near/type/routes",
            "required":true,
            "isMulti":true
            },
        {
            "name":"isRegistered",
            "type":"bool",
            "required":true,
            "isMulti":true
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/attestations/schemas/potlock/isRoundPatron.json ---
{
    "properties":[
        {
            "name":"roundPatron",
            "type":"UID",
            "required":true,
            "isMulti":false
            },
        {
            "name":"description",
            "type":"post",
            "required":true,
            "isMulti":false
            },
        {
            "name":"matchingFunds",
            "type":"hyperfiles.near/type/matchingFunds",
            "required":true,
            "isMulti":false
            },
        {
            "name":"fundingRound",
            "type":"hyperfiles.near/type/fundingRound",
            "required":true,
            "isMulti":false
            },
        {
            "name":"Name",
            "type":"AccountId",
            "required":true,
            "isMulti":false
            }
        {
            "name":"isRoundPatron",
            "type":"boolean",
            "required":true,
            "isMulti":false
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/attestations/schemas/trust/bool/isAccurate.json ---
{
    "properties":[
        {
            "name":"isAccurate",
            "type":"bool",
            "required":true,
            "isMulti":false
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/attestations/schemas/trust/bool/isCorrect.json ---
{
    "properties":[
        {
            "name":"isCorrect",
            "type":"bool",
            "required":true,
            "isMulti":false
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/attestations/schemas/trust/bool/isTrue.json ---
{
    "properties":[
        {
            "name":"isTrue",
            "type":"boolean",
            "required":true,
            "isMulti":false
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/attestations/schemas/trust/bool/isTrusted.json ---
{
    "properties":[
        {
            "name":"isTrusted",
            "type":"bool",
            "required":true,
            "isMulti":false
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/attestations/schemas/trust/bool/isVerified.json ---
{
    "properties":[
        {
            "name":"isVerified",
            "type":"bool",
            "required":true,
            "isMulti":false
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/attestations/schemas/trust/continuous/AUC.json ---
{
    "properties":[
        {
            "name":"AUC",
            "type":"u32",
            "required":true,
            "isMulti":false,
            "options": range(0,100)
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/attestations/schemas/trust/continuous/accuracyScore.json ---
{
    "properties":[
        {
            "name":"accuracyScore",
            "type":"u32",
            "required":true,
            "isMulti":false,
            "options": range(0,100)
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/attestations/schemas/trust/continuous/correctnessScore.json ---
{
    "properties":[
        {
            "name":"correctnessScore",
            "type":"u32",
            "required":true,
            "isMulti":false,
            "options": range(0,100)
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/attestations/schemas/trust/continuous/precision.json ---
{
    "properties":[
        {
            "name":"precision",
            "type":"u32",
            "required":true,
            "isMulti":false,
            "options": range(0,100)
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/attestations/schemas/trust/continuous/sensitivity.json ---
{
    "properties":[
        {
            "name":"sensitivity",
            "type":"u32",
            "required":true,
            "isMulti":false,
            "options": range(0,100)
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/attestations/schemas/trust/continuous/trustScore.json ---
{
    "properties":[
        {
            "name":"trustScore",
            "type":"u32",
            "required":true,
            "isMulti":false,
            "options": range(0,100)
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/attestations/schemas/trust/discrete/accuracyLevel.json ---
{
    "properties":[
        {
            "name":"accuracyLevel",
            "type":"string",
            "options":["Unknown", "Unsure", "Low", "Medium", "High", "Certain"],
            "required":true,
            "isMulti":false
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/attestations/schemas/trust/discrete/confidenceLevel.json ---
{
    "properties":[
        {
            "name":"confidenceLevel",
            "type":"string",
            "options":["Unknown", "Unsure", "Low", "Medium", "High", "Certain"],
            "required":true,
            "isMulti":false
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/attestations/schemas/trust/discrete/correctnessLevel.json ---
{
    "properties":[
        {
            "name":"correctnessLevel",
            "type":"string",
            "options":["Unknown", "Unsure", "Low", "Medium", "High", "Certain"],
            "required":true,
            "isMulti":false
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/attestations/schemas/trust/discrete/trustLevel.json ---
{
    "properties":[
        {
            "name":"trustLevel",
            "type":"string",
            "options":["Unknown", "Unsure", "Low", "Medium", "High", "Certain"],
            "required":true,
            "isMulti":false
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/ceramic/Uri.json ---

'''
'''--- types/json/ceramic/account.json ---

'''
'''--- types/json/ceramic/consensus.json ---

'''
'''--- types/json/ceramic/eventLog.json ---

'''
'''--- types/json/ceramic/network.json ---

'''
'''--- types/json/ceramic/orbis/context.json ---

'''
'''--- types/json/ceramic/stream.json ---

'''
'''--- types/json/easyRetroPGF/account.json ---
{
    "properties":[
        {
            "name":"id",
            "type":"string",
            "required":true,
            "isMulti":false
            },
        {
            "name":"userId",
            "type":"string",
            "required":true,
            "isMulti":false
            },
        {
            "name":"type",
            "type":"string",
            "required":true,
            "isMulti":false
            },
        {
            "name":"provider",
            "type":"string",
            "required":true,
            "isMulti":false
            },
        {
            "name":"providerAccountId",
            "type":"string",
            "required":true,
            "isMulti":false
            },
        {
            "name":"refresh_token",
            "type":"string",
            "required":true,
            "isMulti":false
            },
        {
            "name":"access_token",
            "type":"string",
            "required":true,
            "isMulti":false
            },
        {
            "name":"expires_at",
            "type":"int",
            "required":true,
            "isMulti":false
            },
        {
            "name":"token_type",
            "type":"string",
            "required":true,
            "isMulti":false
            },
        {
            "name":"scope",
            "type":"string",
            "required":true,
            "isMulti":false
            },
        {
            "name":"session_state",
            "type":"string",
            "required":true,
            "isMulti":false
            },
        {
            "name":"user",
            "type":"accountId",
            "required":true,
            "isMulti":false
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/easyRetroPGF/ballot.json ---
{
    "properties":[
        {
            "name":"voterId",
            "type":"string",
            "required":true,
            "isMulti":false
            },
        {
            "name":"createdAt",
            "type":"dateTime",
            "required":true,
            "isMulti":false
            },
        {
            "name":"updatedAt",
            "type":"dateTime",
            "required":true,
            "isMulti":false
            },
        {
            "name":"publishedAt",
            "type":"dateTime",
            "required":true,
            "isMulti":false
            },
        {
            "name":"signature",
            "type":"string",
            "required":true,
            "isMulti":false
            },
        {
            "name":"votes",
            "type":"efiz.near/type/thing",
            "required":true,
            "isMulti":false
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/easyRetroPGF/session.json ---
{
    "properties":[
        {
            "name":"id",
            "type":"string",
            "required":true,
            "isMulti":false
            },
        {
            "name":"sessionToken",
            "type":"string",
            "required":true,
            "isMulti":false
            },
        {
            "name":"userId",
            "type":"string",
            "required":true,
            "isMulti":false
            },
        {
            "name":"expires",
            "type":"dateTime",
            "required":true,
            "isMulti":false
            },
        {
            "name":"user",
            "type":"account",
            "required":true,
            "isMulti":false
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/easyRetroPGF/user.json ---
{
    "properties":[
        {
            "name":"id",
            "type":"string",
            "required":true,
            "isMulti":false
            },
        {
            "name":"name",
            "type":"string",
            "required":true,
            "isMulti":false
            },
        {
            "name":"email",
            "type":"string",
            "required":true,
            "isMulti":false
            },
        {
            "name":"emailVerified",
            "type":"dateTime",
            "required":true,
            "isMulti":false
            },
        {
            "name":"image",
            "type":"string",
            "required":true,
            "isMulti":false
            },
        {
            "name":"accounts",
            "type":"account",
            "required":true,
            "isMulti":true
            },
        {
            "name":"sessions",
            "type":"string",
            "required":true,
            "isMulti":true
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/easyRetroPGF/verificationToken.json ---
{
    "properties":[
        {
            "name":"identifier",
            "type":"string",
            "required":true,
            "isMulti":false
            },
        {
            "name":"token",
            "type":"string",
            "required":true,
            "isMulti":false
            },
        {
            "name":"expires",
            "type":"dateTime",
            "required":true,
            "isMulti":false
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/hyperfiles/field.json ---
{
    "properties":[
        {
            "name":"fieldName",
            "type":"string",
            "required":true,
            "isMulti":false
            },
        {
            "name":"primitive",
            "type":"string",
            "required":true,
            "isMulti":true
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/hyperfiles/file.json ---
{
    "properties":[
        {
            "name":"fileName",
            "type":"string"
            },
        {
            "name":"fileFormat",
            "type":"every.near/type/thing",
            "isMulti":false
            },
        {
            "name":"fields",
            "type":"every.near/type/thing",
            "isMulti":true},
        {
            "name":"records",
            "type":"every.near/type/thing",
            "isMulti":true
            },
        {
            "name":"owner",
            "type":"string"
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/hyperfiles/fileformat.json ---
{
    "properties":[
        {
            "name":"formatName",
            "type":"string"
            },
        {
            "name":"fields",
            "type":"every.near/type/thing",
            "isMulti":"true"
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/hyperfiles/jobs/job.json ---

'''
'''--- types/json/hyperfiles/jobs/toolConfig.json ---

'''
'''--- types/json/hyperfiles/metadata.json ---
{"properties":[{"name":"name","type":"string"},{"name":"description","type":"every.near/type/markdown","isMulti":false},{"name":"image","type":"every.near/type/image","isMulti":false},{"name":"backgroundImage","type":"every.near/type/image","isMulti":false}],"widgets":{}}
'''
'''--- types/json/hyperfiles/record.json ---
{
    "properties":[
        {
            "name":"recordName",
            "type":"string"
            },
        {
            "name":"fields",
            "type":"string",
            "isMulti":"true"
            },
        {
            "name":"recordValues",
            "type":"string",
            "isMulti":"true"
            },
        {
            "name":"owner",
            "type":"string",
            "isMulti":"false"
            },
        {
            "name":"isEncrypted",
            "type":"boolean",
            "isMulti":"false"
            },
        {
            "name":"permissions",
            "type":"every.near/type/thing",
            "isMulti":"false"
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/impact/impactCertificate.json ---
{
    "properties":[
        {
            "name":"projectName",
            "type":"string",
            "required":true,
            "isMulti":"false"
            },
        {
            "name":"impactId",
            "type":"UID",
            "required":true,
            "isMulti":"false"
            },
        {
            "name":"impactName",
            "type":"string",
            "required":true,
            "isMulti":"false"
            },
        {
            "name":"impactDescription",
            "type":"string",
            "required":true,
            "isMulti":"false"
            },
        {
            "name":"projectURL",
            "type":"URL",
            "required":false,
            "isMulti":"false"
            },
        {
            "name":"scopeTags",
            "type":"tag",
            "required":true,
            "isMulti":"true"
            },
        {
            "name":"startDate",
            "type":"date",
            "required":true,
            "isMulti":"false"
            },
        {
            "name":"endDate",
            "type":"date",
            "required":false,
            "isMulti":"false"
            },
        {
            "name":"contributors",
            "type":"efiz.near/type/list",
            "required":true,
            "isMulti":"true"
            },
        {
            "name":"usageRights",
            "type":"string",
            "required":true,
            "isMulti":"false"
            },
        {
            "name":"percentDistribution",
            "type":"int",
            "required":true,
            "isMulti":"false"
            },
        {
            "name":"allowlist",
            "type":"efiz.near/type/list",
            "required":false,
            "isMulti":"true"
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/impact/impactFields/allowlist.json ---
{
    "properties":[
        {
            "name":"allowlist",
            "type":"every.near/type/list",
            "required":true,
            "isMulti":"false"
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/impact/impactFields/contributors.json ---
{
    "properties":[
        {
            "name":"contributors",
            "type":"every.near/type/list",
            "required":true,
            "isMulti":"false"
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/impact/impactFields/endDate.json ---
{
    "properties":[
        {
            "name":"endDate",
            "type":"date",
            "required":true,
            "isMulti":"false"
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/impact/impactFields/impactDescription.json ---
{
    "properties":[
        {
            "name":"impactDescription",
            "type":"string",
            "required":true,
            "isMulti":"false"
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/impact/impactFields/impactId.json ---
{
    "properties":[
        {
            "name":"impactId",
            "type":"UID",
            "required":true,
            "isMulti":"false"
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/impact/impactFields/impactName.json ---
{
    "properties":[
        {
            "name":"impactIName",
            "type":"string",
            "required":true,
            "isMulti":"false"
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/impact/impactFields/percentDistribution.json ---
{
    "properties":[
        {
            "name":"percentDistribution",
            "type":"int",
            "required":true,
            "isMulti":"false"
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/impact/impactFields/projectName.json ---
{
    "properties":[
        {
            "name":"projectName",
            "type":"hyperfiles.near/type/project",
            "required":true,
            "isMulti":"false"
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/impact/impactFields/projectUrl.json ---
{
    "properties":[
        {
            "name":"projectUrl",
            "type":"hyperfiles.near/type/url",
            "required":true,
            "isMulti":"false"
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/impact/impactFields/scopeTags.json ---
{
    "properties":[
        {
            "name":"scopeTags",
            "type":"tag",
            "required":true,
            "isMulti":"true"
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/impact/impactFields/startDate.json ---
{
    "properties":[
        {
            "name":"startDate",
            "type":"date",
            "required":true,
            "isMulti":"false"
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/impact/impactFields/usageRights.json ---
{
    "properties":[
        {
            "name":"usageRights",
            "type":"string",
            "required":true,
            "isMulti":"false"
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/ipfs/cid.json ---

'''
'''--- types/json/meme/blackdragon.json ---

'''
'''--- types/json/meme/doge.json ---

'''
'''--- types/json/meme/keyboardCat.json ---

'''
'''--- types/json/meme/lonk.json ---

'''
'''--- types/json/meme/neko.json ---

'''
'''--- types/json/meme/rickRoll.json ---

'''
'''--- types/json/near/eventNep297.json ---
// https://nomicon.io/Standards/EventsFormat
// Interface to capture data about an event
// Arguments
// * `standard`: name of standard, e.g. nep171
// * `version`: e.g. 1.0.0
// * `event`: type of the event, e.g. nft_mint
// * `data`: associate event data. Strictly typed for each set {standard, version, event} inside corresponding NEP
interface EventLogData {
    standard: string,
    version: string,
    event: string,
    data?: unknown,
}

EVENT_JSON:{
    "standard": "nepXXX",
    "version": "1.0.0",
    "event": "xyz_is_triggered"
}

EVENT_JSON:{
    "standard": "nepXXX",
    "version": "1.0.0",
    "event": "xyz_is_triggered",
    "data": {
        "triggered_by": "foundation.near"
    }
}
'''
'''--- types/json/nerdbrain/nerdbrainFields/nerdbrainEdgeId.json ---
{
    "properties":[
        {
            "name":"nerdbrainEdgeId",
            "type":"int",
            "required":true,
            "isMulti":false
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/nerdbrain/nerdbrainFields/nerdbrainFile.json ---
{
    "properties":[
        {
            "name":"nerdbrainFile",
            "type":"string",
            "required":true,
            "isMulti":false
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/nerdbrain/nerdbrainFields/nerdbrainFromNode.json ---
{
    "properties":[
        {
            "name":"nerdbrainFromNode",
            "type":"string",
            "required":true,
            "isMulti":false
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/nerdbrain/nerdbrainFields/nerdbrainFromSide.json ---
{
    "properties":[
        {
            "name":"nerdbrainFromSide",
            "type":"string",
            "required":true,
            "isMulti":false,
            "options":["left", "right", "top", "bottom"]
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/nerdbrain/nerdbrainFields/nerdbrainHeight.json ---
{
    "properties":[
        {
            "name":"nerdbrainHeight",
            "type":"int",
            "required":true,
            "isMulti":false
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/nerdbrain/nerdbrainFields/nerdbrainId.json ---
{
    "properties":[
        {
            "name":"nerdbrainId",
            "type":"int",
            "required":true,
            "isMulti":false
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/nerdbrain/nerdbrainFields/nerdbrainToNode.json ---
{
    "properties":[
        {
            "name":"nerdbrainToNode",
            "type":"string",
            "required":true,
            "isMulti":false
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/nerdbrain/nerdbrainFields/nerdbrainToSide.json ---
{
    "properties":[
        {
            "name":"nerdbrainToSide",
            "type":"string",
            "required":true,
            "isMulti":false,
            "options":["left", "right", "top", "bottom"]
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/nerdbrain/nerdbrainFields/nerdbrainType.json ---
{
    "properties":[
        {
            "name":"nerdbrainType",
            "type":"string",
            "required":true,
            "isMulti":false,
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/nerdbrain/nerdbrainFields/nerdbrainWidth.json ---
{
    "properties":[
        {
            "name":"nerdbrainWidth",
            "type":"int",
            "required":true,
            "isMulti":false,
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/nerdbrain/nerdbrainFields/nerdbrainX.json ---
{
    "properties":[
        {
            "name":"nerdbrainX",
            "type":"int",
            "required":true,
            "isMulti":false,
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/nerdbrain/nerdbrainFields/nerdbrainY.json ---
{
    "properties":[
        {
            "name":"nerdbrainY",
            "type":"int",
            "required":true,
            "isMulti":false,
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/nerdbrain/nerdbrainTypes/canvas.json ---
“hyperfiles.near”: {
    “thing”: {
      "nodes":[{
        "id":"abc/xyz",
        "type":"file",
        "file":"abc/xyz",
        "x":-3400,
        "y":2300,
        "width":888,
        "height":888
      },
      {
        "id":"efg/tuv",
        "type":"file",
        "file":"efg/tuv",
        "x":-3400,
        "y":2300,
        "width":888,
        "height":888
      }],
      "edges":[{
        "id":"123456789",
        "fromNode":"abc/xyz",
        "fromSide":"left",
        "toNode":"efg/tuv",
        "toSide":"right",
      },
      {
        "id":"987654321",
        "fromNode":"efg/tuv",
        "fromSide":"right",
        "toNode":"abc/xyz",
        "toSide":"left",
      }]
    }
  }
'''
'''--- types/json/nerdbrain/nerdbrainTypes/edge.json ---
"edges":[{
    "id":"123456789",
    "fromNode":"abc/xyz",
    "fromSide":"left",
    "toNode":"efg/tuv",
    "toSide":"right",
  },
  {
    "id":"987654321",
    "fromNode":"efg/tuv",
    "fromSide":"right",
    "toNode":"abc/xyz",
    "toSide
'''
'''--- types/json/nerdbrain/nerdbrainTypes/node.json ---
"nodes":[{
    "id":"abc/xyz",
    "type":"file",
    "file":"abc/xyz",
    "x":-3400,
    "y":2300,
    "width":888,
    "height":888
  },
  {
    "id":"efg/tuv",
    "type":"file",
    "file":"efg/tuv",
    "x":-3400,
    "y":2300,
    "width":888,
    "height":888
  }],
'''
'''--- types/json/nfts/erc1155.json ---

'''
'''--- types/json/nfts/erc721.json ---

'''
'''--- types/json/nfts/nep241.json ---

'''
'''--- types/json/potlock/donations/ContractSourceMetadata/CSM-data.json ---
{
    "properties":[
        {
            "name":"commit_hash",
            "type":"str",
            "required":true,
            "isMulti":false
            },
        {
            "name":"link",
            "type":"str",
            "required":true,
            "isMulti":false
            },
        {
            "name":"version",
            "type":"str",
            "required":true,
            "isMulti":false
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/potlock/donations/ContractSourceMetadata/CSM-example.json ---
{
    "standard": "potlock",
    "version": "1.0.0",
    "event": "set_source_metadata",
    "data": [
        {
            "source_metadata": {
                "commit_hash":"ec02294253b22c2d4c50a75331df23ada9eb04db",
                "link":"https://github.com/PotLock/core",
                "version":"0.1.0",
            }
        }
    ]
}
'''
'''--- types/json/potlock/donations/ContractSourceMetadata/CSM.json ---
{
    "properties":[
        {
            "name":"standard",
            "type":"potlock",
            "required":true,
            "isMulti":false
            },
        {
            "name":"version",
            "type":"1.0.0",
            "required":true,
            "isMulti":false
            },
        {
            "name":"event",
            "type":"set-source-metadata",
            "required":true,
            "isMulti":false
            },
        {
            "name":"data",
            "type":"CSM-data",
            "required":true,
            "isMulti":false
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/potlock/donations/Donation-example.json ---
{
    "standard": "potlock",
    "version": "1.0.0",
    "event": "donation",
    "data": [
        {
            "donation": {
                "donated_at_ms": 1698948121940,
                "donor_id":"lachlan.near",
                "ft_id":"near",
                "id":9,
                "message": "Go go go!",
                "protocol_fee": "7000000000000000000000",
                "recipient_id": "magicbuild.near",
                "referrer_fee": "2000000000000000000000",
                "referrer_id": "plugrel.near",
                "total_amount": "100000000000000000000000"
            },
        }
    ]
}
'''
'''--- types/json/potlock/donations/Donation.json ---
{
    "properties":[
        {
            "name":"standard",
            "type":"potlock",
            "required":true,
            "isMulti":false
            },
        {
            "name":"version",
            "type":"1.0.0",
            "required":true,
            "isMulti":false
            },
        {
            "name":"event",
            "type":"donation",
            "required":true,
            "isMulti":false
            },
        {
            "name":"data",
            "type":"donation-data",
            "required":true,
            "isMulti":false
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/potlock/donations/DonationContract.json ---
{
    "properties":[
        {
            "name":"contract_source_metadata",
            "type":"LazyOption<VersionedContractSourceMetadata>",
            "required":true,
            "isMulti":false
            },
        {
            "name":"owner",
            "type":"AccountId",
            "required":true,
            "isMulti":false
            },
        {
            "name":"protocol_fee_basis_points",
            "type":"u32",
            "required":true,
            "isMulti":false
            },
        {
            "name":"referral_fee_basis_points",
            "type":"u32",
            "required":true,
            "isMulti":false
            },
        {
            "name":"protocol_fee_recipient_account",
            "type":"AccountId",
            "required":true,
            "isMulti":false
            },
        {
            "name":"donations_by_id",
            "type":"UnorderedMap<DonationId, VersionedDonation>",
            "required":true,
            "isMulti":false
            },
        {
            "name":"donation_ids_by_recipient_id",
            "type":"LookupMap<AccountId, UnorderedSet<DonationId>>",
            "required":true,
            "isMulti":false
            },
        {
            "name":"donation_ids_by_donor_id",
            "type":"LookupMap<AccountId, UnorderedSet<DonationId>>",
            "required":true,
            "isMulti":false
            },
        {
            "name":"donation_ids_by_ft_id",
            "type":"LookupMap<AccountId, UnorderedSet<DonationId>>",
            "required":true,
            "isMulti":false
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/potlock/donations/DonationId.json ---
{
    "properties":[
        {
            "name":"DonationId",
            "type":"u64",
            "required":true,
            "isMulti":false
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/potlock/donations/TimestampMs.json ---
{
    "properties":[
        {
            "name":"TimestampMs",
            "type":"u64",
            "required":true,
            "isMulti":false
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/potlock/donations/donation-config.json ---
{
    "properties":[
        {
            "name":"owner",
            "type":"AccountId",
            "required":true,
            "isMulti":false
            },
        {
            "name":"protocol_fee_basis_points",
            "type":"u32",
            "required":true,
            "isMulti":false
            },
        {
            "name":"referral_fee_basis_points",
            "type":"u32",
            "required":true,
            "isMulti":false
            },
        {
            "name":"protocol_fee_recipient_account",
            "type":"AccountId",
            "required":true,
            "isMulti":false
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/potlock/donations/donation-data.json ---
{
    "properties":[
        {
            "name":"id",
            "type":"DonationId",
            "required":true,
            "isMulti":false
            },
        {
            "name":"donor_id",
            "type":"AccountId",
            "required":true,
            "isMulti":false
            },
        {
            "name":"total_amount",
            "type":"u128",
            "required":true,
            "isMulti":false
            },
        {
            "name":"ft_id",
            "type":"AccountId",
            "required":true,
            "isMulti":false
            },
        {
            "name":"message",
            "type":"str",
            "required":false,
            "isMulti":false
            },
        {
            "name":"donated_at_ms",
            "type":"TimestampMs",
            "required":true,
            "isMulti":false
            },
        {
            "name":"recipient_id",
            "type":"AccountId",
            "required":true,
            "isMulti":false
            },
        {
            "name":"protocol_fee",
            "type":"u128",
            "required":true,
            "isMulti":false
            },
        {
            "name":"referrer_id",
            "type":"AccountId",
            "required":false,
            "isMulti":false
            },
        {
            "name":"referrer_fee",
            "type":"u128",
            "required":false,
            "isMulti":false
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/potlock/registry/ProjectId.json ---
{
    "properties":[
        {
            "name":"ProjectId",
            "type":"UID",
            "required":true,
            "isMulti":false
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/potlock/registry/RegistryContract.json ---
{
    "properties":[
        {
            "name":"owner",
            "type":"AccountId",
            "required":true,
            "isMulti":false
            },
        {
            "name":"admins",
            "type":"UnorderedSet<AccountId>",
            "required":true,
            "isMulti":false
            },
        {
            "name":"project_ids",
            "type":"UnorderedSet<ProjectId>",
            "required":true,
            "isMulti":false
            },
        {
            "name":"projects_by_id",
            "type":"LookupMap<ProjectId, VersionedProjectInternal>",
            "required":true,
            "isMulti":false
            },
        {
            "name":"contract_source_metadata",
            "type":"LazyOption<VersionedContractSourceMetadata>",
            "required":true,
            "isMulti":false
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/potlock/registry/TimestampMs.json ---
{
    "properties":[
        {
            "name":"TimestampMs",
            "type":"u64",
            "required":true,
            "isMulti":false
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/potlock/registry/isRegistered.json ---
{
    "properties":[
        {
            "name":"isRegistered",
            "type":"bool",
            "required":true,
            "isMulti":false
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/scientific/fasta.json ---
{
    "properties":[
        {
            "name":"UID",
            "type":"string",
            "required":true,
            "isMulti":false
            },
        {
            "name":"DNAsequence",
            "type":"string",
            "required":true,
            "isMulti":true
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/scientific/fastq.json ---
{
    "properties":[
        {
            "name":"UID",
            "type":"string",
            "required":true,
            "isMulti":"false"
            },
        {
            "name":"DNAsequence",
            "type":"string",
            "required":true,
            "isMulti":"true"
            },
        {
            "name":"qualityScore",
            "type":"int",
            "required":true,
            "isMulti":"true"
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/scientific/pdb.json ---
{
    "properties":[
        {
            "name":"UID",
            "type":"string",
            "required":true,
            "isMulti":"false"
            },
        {
            "name":"coordinates",
            "type":"string",
            "required":true,
            "isMulti":"true"
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/scientific/sdf.json ---
{
    "properties":[
        {
            "name":"UID",
            "type":"string",
            "required":true,
            "isMulti":"false"
            },
        {
            "name":"coordinates",
            "type":"string",
            "required":true,
            "isMulti":"true"
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/scientific/smile.json ---
{
    "properties":[
        {
            "name":"UID",
            "type":"string",
            "required":true,
            "isMulti":"false"
            },
        {
            "name":"SMILE",
            "type":"string",
            "required":true,
            "isMulti":"true"
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/socialDB/accountList.json ---
{
    "alex.near": "",
    "root.near": "",
    "mike.near": ""
  }
'''
'''--- types/json/socialDB/badge.json ---
{
    "metadata": {
      "name": "Whale",
      "description": "A really whalethy user",
      "image": {
        "url": "https://upload.wikimedia.org/wikipedia/commons/e/e2/Southern_right_whale.jpg"
      }
    },
    "accounts": {
      "x.near": "",
      "root.near": ""
    }
  }
'''
'''--- types/json/socialDB/badges.json ---
{
    "whale": {
      "metadata": {
        "name": "Whale",
        "description": "A really whalethy user",
        "image": {
          "url": "https://upload.wikimedia.org/wikipedia/commons/e/e2/Southern_right_whale.jpg"
        }
      },
      "accounts": {
        "x.near": "",
        "root.near": ""
      }
    }
  }
'''
'''--- types/json/socialDB/graph.json ---
{
    "like": {
      "root.near": "",
      "mike.near": ""
    },
    "follow": {
      "mob.near": "",
      "root.near": ""
    }
  }
'''
'''--- types/json/socialDB/image.json ---

'''
'''--- types/json/socialDB/index.md ---
# Index

Index is a frequently overwritten object designed to be used by the API/indexer.
It should be used for actions associated with some key. For example: 
- for storing likes for a given post
- rating a certain item
- linking to a comment for a given post
- linking to a review for something

In order for the API server to index the data, it should be given in a specific format. Otherwise, the API server will ignore the data.

The format is `IndexData` is a serialized JSON. It's either a single object with two keys: `key` and `value`, or an array of such objects.
- The `key` value will be used to index the data across all accounts. The API server will JSON serialize the value to create a unique string key for this index.
- The `value` value contains the data to be stored.
 
### Likes example

For example, an application want to store likes for a given post.
The post is identified by the following key: `mob.near/post/meme@76735731`. Then to create a like one may write the following IndexData (non-serialized):
```json
{
  "key": "mob.near/post/meme@76735731",
  "value": 1
}
```
This object will be serialized and should be added under `index/like`:
```json
{
  "index": {
    "like": "{\"key\":\"mob.near/post/meme@76735731\",\"value\":1}"
  }
}
```

The reason why we store this data in a serialized format is to be able to overwrite the previous data (that is already indexed) to reuse the storage.
The limitation of this approach is that only one action can be added per index per block. But since blocks are once a second, it shouldn't create issues.

An API server should be able to serve the following data:
- All likes for a given post from all users (or some users) ordered by block height when they were created.
- All likes for a given user ordered by block height.

### Multi-notify example

An app wants to notify multiple users, e.g. Alice follows Bob and Charlie in one action. She can indicate this in the graph index in one call:

```json
[
  {
    "key": "follow",
    "value": {
      "type": "follow",
      "accountId": "bob.near"
    }
  },
  {
    "key": "follow",
    "value": {
      "type": "follow",
      "accountId": "charlie.near"
    }
  }
]
```
This will be serialized to JSON and should be added under `index/graph`:
```json
{
  "index": {
    "graph": "[{\"key\":\"follow\",\"value\":{\"type\":\"follow\",\"accountId\":\"bob.near\"}},{\"key\":\"follow\",\"value\":{\"type\":\"follow\",\"accountId\":\"charlie.near\"}}]"
  }
}
```

## Schema

| Key | Type | Description                                                                                                                                  |
| --- | --- |----|
| **`[index_type]`** | Serialized IndexData (String) | The key is the type of index. For example, `like` or `comment`. The value is a serialized JSON object containing two fields `"key"` and `"value"` |

## Example

```json
{
  "like": "{\"key\":\"mob.near/post/meme@76735731\",\"value\":1}",
  "comment": "{\"key\":\"mob.near/post/meme@76735731\",\"value\":{\"type\":\"post/meme\"}}",
  "graph": "[{\"key\":\"follow\",\"value\":{\"type\":\"follow\",\"accountId\":\"bob.near\"}},{\"key\":\"follow\",\"value\":{\"type\":\"follow\",\"accountId\":\"charlie.near\"}}]"
}
```
'''
'''--- types/json/socialDB/keyValue.json ---

'''
'''--- types/json/socialDB/linktree.json ---
{
    "twitter": "NearSocial_",
    "github": "NearSocial",
    "telegram": "NearSocial",
    "website": "near.social"
  }
'''
'''--- types/json/socialDB/metadata.json ---
{
    "name": "Near Social",
    "image": {
      "ipfs_cid": "bafkreid55mbassw335wezjk3gc5rzizwrqpenfxk3dyyljumxvezplhjg4"
    },
    "linktree": {
      "twitter": "NearSocial_",
      "github": "NearSocial",
      "telegram": "NearSocial",
      "website": "near.social"
    },
    "description": "# Near Social\n\n**Near Social** is ...",
    "backgroundImage": {
      "ipfs_cid": "bafybeigwqqx2eccpyip66bn2bn6janvss2snv3xuuus3ltin6i46mfkyam"
    },
    "tags": {
      "platform": "",
      "project": "",
      "network": "",
      "protocol": "",
      "open-source": ""
    }
  }
'''
'''--- types/json/socialDB/nft.json ---
{
    "contractId": "mrbrownproject.near",
    "tokenId": "3107"
  }
'''
'''--- types/json/socialDB/post.json ---

'''
'''--- types/json/socialDB/root.json ---
{
    "profile": {
      "name": "NEARCON 22 Demo Acc",
      "image": {
        "url": "https://cloudflare-ipfs.com/ipfs/QmQqzMTavQgT4f4T5v6PWBp7XNKtoPmC9jvn12WPT3gkSE"
      }
    },
    "graph": {
      "like": {
        "root.near": "",
        "mike.near": ""
      },
      "follow": {
        "mob.near": "",
        "root.near": ""
      }
    },
    "badge": {
      "whale": {
        "info": {
          "name": "Whale",
          "description": "A really whalethy user",
          "image": {
            "url": "https://upload.wikimedia.org/wikipedia/commons/e/e2/Southern_right_whale.jpg"
          }
        },
        "holder": {
          "x.near": "",
          "root.near": ""
        }
      }
    },
    "widget": {
      "HelloWorld": "return \"Hello World!\";",
      "Test": "return \"Test!\";"
    },
    "post": {
      "meme": {
        "title": "NEAR Protocol",
        "description": "Looks the same to me",
        "image": {
          "ipfs_cid": "bafkreicrp3nosvz4advbmp26dlmbjkl37gb7etztqf4gforuwxg5ofqov4"
        }
      }
    }
  }
'''
'''--- types/json/socialDB/settings.json ---
{
    "near.social": {
      "homepage": "mob.near/widget/Welcome"
    }
  }
'''
'''--- types/json/socialDB/tags.json ---
{
    "human-guild": "",
    "founder": "",
    "artist": "",
    "nft": ""
  }
'''
'''--- types/json/socialDB/widget.json ---
{
    "": "return \"Hello World!\";",
    "metadata": {
      "name": "Hello World",
      "description": "Renders Hello World",
      "tags": {
        "example": "",
        "inline": ""
      }
    }
  }
'''
'''--- types/json/socialDB/widgets.json ---
{
    "HelloWorld": {
      "": "return \"Hello World!\";",
      "metadata": {
        "name": "Hello World",
        "description": "Renders Hello World",
        "tags": {
          "example": "",
          "inline": ""
        }
      }
    },
    "Test": "return \"Test!\";"
  }
'''
'''--- types/json/tree.txt ---
﻿Folder PATH listing for volume OS
Volume serial number is CC44-72B0
C:.
|   tree.txt
|   
+---attestations
|   \---schemas
|       +---core
|       |       attestation.json
|       |       schema.json
|       |       schemaResolver.json
|       |       
|       +---identity
|       |   +---bool
|       |   |       happyBirthday.json
|       |   |       isAccountOwner.json
|       |   |       isAccreditedInvestor.json
|       |   |       isBuilder.json
|       |   |       isFollower.json
|       |   |       isFollowing.json
|       |   |       isFriend.json
|       |   |       isGithubUser.json
|       |   |       isHuman.json
|       |   |       isTwitterHandle.json
|       |   |       metIRL.json
|       |   |       passedKYC.json
|       |   |       
|       |   \---string
|       |           hasCredential.json
|       |           
|       +---opinion
|       |   +---bool
|       |   |       gm.json
|       |   |       like.json
|       |   |       star.json
|       |   |       wokeUpBullish.json
|       |   |       
|       |   \---string
|       |           addLabel.json
|       |           hash.json
|       |           makeStatement.json
|       |           nameSomething.json
|       |           version.json
|       |           
|       +---potlock
|       |   |   isContributor.json
|       |   |   isDonor.json
|       |   |   isFollower.json
|       |   |   isIntegrated.json
|       |   |   isProjectMilestone.json
|       |   |   isProjectProgress.json
|       |   |   isRegistered.json
|       |   |   isRoundPatron.json
|       |   |   
|       |   \---fields
|       |           account.json
|       |           compensation.json
|       |           description.json
|       |           evidence.json
|       |           fundingRound.json
|       |           matchingFunds.json
|       |           memo.json
|       |           post.json
|       |           repository.json
|       |           role.json
|       |           routes.json
|       |           transaction.json
|       |           url.json
|       |           
|       \---trust
|           +---bool
|           |       isAccurate.json
|           |       isCorrect.json
|           |       isTrue.json
|           |       isTrusted.json
|           |       isVerified.json
|           |       
|           +---continuous
|           |       accuracyScore.json
|           |       AUC.json
|           |       correctnessScore.json
|           |       precision.json
|           |       sensitivity.json
|           |       trustScore.json
|           |       
|           \---discrete
|                   accuracyLevel.json
|                   confidenceLevel.json
|                   correctnessLevel.json
|                   trustLevel.json
|                   
+---ceramic
|   |   account.json
|   |   consensus.json
|   |   eventLog.json
|   |   network.json
|   |   stream.json
|   |   Uri.json
|   |   
|   \---orbis
|           context.json
|           
+---getBlock
+---hyperfiles
|   |   field.json
|   |   file.json
|   |   fileformat.json
|   |   metadata.json
|   |   record.json
|   |   
|   \---jobs
|           job.json
|           toolConfig.json
|           
+---impact
|   |   impactCertificate.json
|   |   
|   \---impactFields
|           allowlist.json
|           contributors.json
|           endDate.json
|           impactDescription.json
|           impactId.json
|           impactName.json
|           percentDistribution.json
|           projectName.json
|           projectUrl.json
|           scopeTags.json
|           startDate.json
|           usageRights.json
|           
+---indexerXyz
+---ipfs
|       cid.json
|       
+---meme
|       blackdragon.json
|       doge.json
|       keyboardCat.json
|       lonk.json
|       neko.json
|       rickRoll.json
|       
+---near
|   |   eventNep297.json
|   |   
|   +---bigQuery
|   +---covalent
|   +---mintbase
|   +---nearBlocks
|   +---nearLake
|   +---pagoda
|   +---pikespeak
|   +---queryApi
|   +---rollupDa
|   \---standards
+---nerdbrain
|   +---nerdbrainFields
|   |       nerdbrainEdgeId.json
|   |       nerdbrainFile.json
|   |       nerdbrainFromNode.json
|   |       nerdbrainFromSide.json
|   |       nerdbrainHeight.json
|   |       nerdbrainId.json
|   |       nerdbrainToNode.json
|   |       nerdbrainToSide.json
|   |       nerdbrainType.json
|   |       nerdbrainWidth.json
|   |       nerdbrainX.json
|   |       nerdbrainY.json
|   |       
|   \---nerdbrainTypes
|           canvas.json
|           edge.json
|           node.json
|           
+---nfts
|   |   erc1155.json
|   |   erc721.json
|   |   nep241.json
|   |   
|   \---nftFields
+---octopusNetwork
+---opencann
|   \---data
|       \---surveys
|           +---experienceReport
|           \---surveyFields
+---potlock
|   +---donations
|   |   |   donation-config.json
|   |   |   donation-data.json
|   |   |   Donation-example.json
|   |   |   Donation.json
|   |   |   DonationContract.json
|   |   |   DonationId.json
|   |   |   TimestampMs.json
|   |   |   
|   |   \---ContractSourceMetadata
|   |           CSM-data.json
|   |           CSM-example.json
|   |           CSM.json
|   |           
|   +---pot-contract
|   \---registry
|           isRegistered.json
|           ProjectId.json
|           RegistryContract.json
|           TimestampMs.json
|           
+---scientific
|       fasta.json
|       fastq.json
|       pdb.json
|       sdf.json
|       smile.json
|       
+---socialDB
|       accountList.json
|       badge.json
|       badges.json
|       graph.json
|       image.json
|       index.md
|       keyValue.json
|       linktree.json
|       metadata.json
|       nft.json
|       post.json
|       root.json
|       settings.json
|       tags.json
|       widget.json
|       widgets.json
|       
+---subquery
+---theGraph
\---web3
        DAO.json
        EAS_attestation.json
        EAS_schema.json
        

'''
'''--- types/json/web3/DAO.json ---
{
    "properties":[
        {
            "name":"name",
            "type":"string",
            "required":true,
            "string":{"validation":{"min":3,"max":50}}
        },
        {
            "name":"address",
            "type":"string",
            "required":true,
            "string":{"validation":{"pattern":"^(([a-zd]+[-_])*[a-zd]+.)*([a-zd]+[-_])*[a-zd]+$"}}
            },
        {
            "name":"soulBoundTokenIssuer",
            "type":"string",
            "required":false,
            "string":{"validation":{"pattern":"^(([a-zd]+[-_])*[a-zd]+.)*([a-zd]+[-_])*[a-zd]+$"}}
            },
        {
            "name":"purpose",
            "type":"string",
            "required":true,
            "string":{"validation":{"min":0,"max":1000}}
            },
        {
            "name":"legalStatus",
            "type":"string",
            "required":false,
            "string":{"validation":{"min":0,"max":100}}
            },
        {
            "name":"legalDocument",
            "type":"string",
            "required":false,
            "string":{"validation":{"pattern":"(https?://(?:www.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9].[^s]{2,}|www.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9].[^s]{2,}|https?://(?:www.|(?!www))[a-zA-Z0-9]+.[^s]{2,}|www.[a-zA-Z0-9]+.[^s]{2,})"}}
            },
        {
            "name":"links",
            "type":"array",
            "required":false,
            "array":{
                "type":"string",
                "validation":{"min":0,"max":10}}
                },
        {
            "name":"coolDownPeriod",
            "type":"number",
            "required":true,
            "number":{"validation":{"min":0,"max":31536000}}
            },
        {
            "name":"policy",
            "type":"astro.sking.near/type/daoPolicy",
            "required":true
            },
        {
            "name":"profileImage",
            "required":false,
            "type":"astro.sking.near/type/image"
            },
        {
            "name":"coverImage",
            "type":"astro.sking.near/type/image",
            "required":false
            }
        ],            
    "widgets":{"create":"astro.sking.near/widget/CreateDAO"}
}
'''
'''--- types/json/web3/EAS_attestation.json ---
{
    "properties":[
        {
            "name":"UID",
            "type":"string",
            "required":true
            },
        {
            "name":"schema",
            "type":"UID"
            },
        {
            "name":"attestor",
            "type":"account",
            "isMulti":"true"
            },
        {
            "name":"recipient",
            "type":"account",
            "isMulti":false
            },
        {
            "name":"expiration",
            "type":"date",
            "isMulti":false
            },
        {
            "name":"revoked?",
            "type":"date",
            "isMulti":false
            },
        {
            "name":"refUID",
            "type":"efiz.near/type/thing",
            "isMulti":false
            },
        {
            "name":"data",
            "type":"string",
            "isMulti":false
            }
        ],
    "widgets":{}
}
'''
'''--- types/json/web3/EAS_schema.json ---
{
    "properties":[
        {
            "name":"UID",
            "type":"bytes32"
            },
        {
            "name":"resolver",
            "type":"ISchemaResolver.sol"
            },
        {
            "name":"revocable",
            "type":"bool"
            },
        {
            "name":"schema",
            "type":"string"
            }
        ],
    "widgets":{}
}
'''