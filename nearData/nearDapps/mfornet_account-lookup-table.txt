*GitHub Repository "mfornet/account-lookup-table"*

'''--- README.md ---
# Account Lookup Table

View details of several lockup accounts in a single place. Similar to [Account-Lookup](https://near.github.io/account-lookup/).

## Roadmap

-   Improve UI
    -   Error messages
    -   (table) https://tailwindui.com/components/application-ui/lists/tables
-   Move to web4
-   Versioned accounts in NEAR Page
    Account: https://explorer.mainnet.near.org/accounts/account_viewer.near
    Stable contracts: Don't have full access key, everything is on chain! No owner methods!
    Nightly contracts: Iterate fast, break fast
    -   stable.v0-1.account_viewer.near
    -   nightly.v0-1.account_viewer.near
-   Lockup factory Interface. To help people test lockups deployments and parameters. Will be useful
-   FAQ: Explain why this app is privacy preserving.
    -   Host at near.page
    -   RPC (This can be mitigated by rotating RPCs)

'''
'''--- config-overrides.js ---
const webpack = require("webpack")

module.exports = function override(config, env) {
    //do stuff with the webpack config...
    config.resolve.fallback = {
        ...config.resolve.fallback,
        stream: require.resolve("stream-browserify"),
        buffer: require.resolve("buffer"),
    }
    config.resolve.extensions = [...config.resolve.extensions, ".ts", ".js"]
    config.plugins = [
        ...config.plugins,
        new webpack.ProvidePlugin({
            process: "process/browser",
            Buffer: ["buffer", "Buffer"],
        }),
    ]
    // console.log(config.resolve)
    // console.log(config.plugins)

    return config
}

'''
'''--- package.json ---
{
  "name": "account-lookup-table",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@testing-library/jest-dom": "^5.14.1",
    "@testing-library/react": "^12.0.0",
    "@testing-library/user-event": "^13.2.1",
    "bootstrap": "^5.1.3",
    "react": "^17.0.2",
    "react-dom": "^17.0.2",
    "react-scripts": "5.0.0",
    "web-vitals": "^2.1.0",
    "buffer": "^6.0.3",
    "near-api-js": "^0.44.2",
    "process": "^0.11.10",
    "stream-browserify": "^3.0.0"
  },
  "devDependencies": {
    "react-app-rewired": "^2.2.1"
  },
  "scripts": {
    "start": "react-app-rewired start",
    "build": "react-app-rewired build",
    "test": "react-app-rewired test",
    "eject": "react-app-rewired eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

'''
'''--- public/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

'''
'''--- public/manifest.json ---
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

'''
'''--- public/robots.txt ---
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

'''
'''--- src/App.css ---
.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

'''
'''--- src/App.js ---
// import './App.css';
import { useEffect, useState } from 'react';
import * as nearAPI from 'near-api-js'

const INFO = '__INFO'

function getValues() {
  const result = localStorage.getItem(INFO)

  if (result === null) {
    return []
  } else {
    return JSON.parse(result)
  }
}

function setValues(data) {
  localStorage.setItem(INFO, JSON.stringify(data))
}

// Total Balance
//     - Lockup
//         - On Contract
//             - Liquid min(OnContract, Unlocked)
//         - On Staking Pool
//             - Staked
//             - Ready to withdraw
//             - Time to withdraw
//         - Unlocked
//         - Locked
//     - Owner

const options = {
  networkId: "mainnet",
  keyStore: new nearAPI.keyStores.BrowserLocalStorageKeyStore(),
  nodeUrl: "https://rpc.mainnet.near.org",
  walletUrl: "https://wallet.mainnet.near.org",
  helperUrl: "https://helper.mainnet.near.org",
  explorerUrl: "https://explorer.mainnet.near.org",
}

function simplifyString(str) {
  if (typeof str !== 'string') { return str }
  const prefix = 6;
  const suffix = 16;
  if (str.length > prefix + suffix) {
    return str.substring(0, prefix) + '...' + str.substring(str.length - suffix, str.length);
  } else {
    return str;
  }
}

function formatNEAR(amount) {
  if (amount === undefined || amount === null) { return amount }
  var result = nearAPI.utils.format.formatNearAmount(amount);
  var tokens = result.split('.')

  if (tokens.length === 1) { return tokens[0] }
  return tokens[0] + '.' + tokens[1].substring(0, 2);
}

function formatValue(amount, nearPrice, currency) {
  if (currency === 'NEAR') {
    return formatNEAR(amount) + 'â“ƒ'
  } else {
    return '$' + (parseFloat(formatNEAR(amount).replace(',', '')) * nearPrice).toFixed(2).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")
  }
}

async function fetchNearPrice() {
  const res = await fetch('https://api.binance.com/api/v3/ticker/price?symbol=NEARUSDT')
  const content = await res.json()
  return content.price
}

async function populateFields(lockup) {
  const near = await nearAPI.connect(options)
  const account = await near.account(lockup.lockup)
  const lockupContract = new nearAPI.Contract(account, lockup.lockup, {
    viewMethods: ['get_owner_account_id', 'get_staking_pool_account_id', 'get_locked_amount', 'get_balance', 'get_liquid_owners_balance'],
    changeMethods: [],
    sender: account
  })
  // Check if the contract is a valid lockup contract by checking the owner method
  try {
    const owner = await lockupContract.get_owner_account_id();
    lockup.owner = owner;
  } catch (e) {
    const err_str = e.toString()
    if (err_str.indexOf('MethodNotFound') !== -1) {
      lockup.owner = 'Account is not a valid Lockup'
    }
    else if (err_str.indexOf('CodeDoesNotExist') !== -1) {
      lockup.owner = 'Account has no code deployed'
    } else {
      throw e;
    }
    return null;
  }

  lockup.pool = await lockupContract.get_staking_pool_account_id();
  lockup.locked = await lockupContract.get_locked_amount();
  lockup.total = await lockupContract.get_balance();
  lockup.liquid = await lockupContract.get_liquid_owners_balance();

  const stakingContract = new nearAPI.Contract(account, lockup.pool, {
    viewMethods: ['get_account'],
    changeMethods: [],
    sender: account
  })

  lockup.staked = (await stakingContract.get_account({ account_id: lockup.lockup })).staked_balance;
}

// TODO: Aggregate all info in an extra row (sum of total/locked/liquid/staked)
function App() {
  const [table, setTable] = useState(getValues());
  const [nearPrice, setNearPrice] = useState(0.0);
  const [currency, setCurrency] = useState('NEAR');

  const update = async () => {
    const n_table = [...table];
    setValues(n_table);
    setTable(n_table);
  }

  const updateLockup = async (lockupAccountId = null) => {
    await Promise.all(table.filter((value) => lockupAccountId === null || value.lockup === lockupAccountId).map(async (value) => {
      await populateFields(value);
      await update();
    }))
  }

  const updateAll = async (updatePrice = true) => {
    if (updatePrice) {
      setNearPrice(await fetchNearPrice());
    }
    await Promise.all(table.map(async (value) => {
      await populateFields(value);
      await update();
    }))
  }

  useEffect(() => {
    const inner = async () => {
      setNearPrice(await fetchNearPrice()); await updateAll(false);
    }
    inner()
  }, [nearPrice])

  const setMessage = (msg) => {
    // TODO: Display message somewhere
    console.log(msg);
  }

  const innerTryCreateEntry = async (lockupAccountId) => {
    const near = await nearAPI.connect(options)
    const account = await near.account(lockupAccountId)
    try {
      await account.state()
    } catch (e) {
      setMessage('Account doesn`t exist')
      return null;
    }

    table.push({ lockup: lockupAccountId });
    await update();
    await updateLockup(lockupAccountId);
  }

  const tryCreateEntry = (lockupAccountId) => {
    if (table.filter((value) => value.lockup === lockupAccountId).length > 0) {
      setMessage(`Account ${lockupAccountId} already exists. Ignore.`)
      return;
    }
    innerTryCreateEntry(lockupAccountId);
  };

  const createEntry = (e) => {
    var newAccount = document.getElementById('new_account').value;
    if (newAccount.length > 0) {
      document.getElementById('new_account').value = '';
      tryCreateEntry(newAccount);
    }
    e.preventDefault();
  };

  const removeRow = (index) => {
    table.splice(index, 1);
    update();
  };

  const currencySelectorMenu = currency !== 'NEAR' ? <div><button onClick={() => setCurrency('NEAR')}>NEAR</button> | USDT</div> : <div>NEAR | <button onClick={() => setCurrency('USDT')}>USDT</button></div>

  return <div>
    <form>
      <label>
        Account:
        <input type="text" name="name" id='new_account' />
      </label>
      <input type="submit" value="Add" className='button' onClick={createEntry} />
    </form>
    <div>
      <button className='button' onClick={updateAll}>Reload all</button>
      <label>Near Price: {nearPrice}</label>
      <p>Display balance as:</p> {currencySelectorMenu}
    </div>
    <table className='table table-striped table-sm'>
      <thead>
        <tr>
          <th>Id</th>
          <th>Lockup</th>
          <th>Copy</th>
          <th>Owner</th>
          <th>Copy</th>
          <th>Total</th>
          <th>Locked</th>
          <th>Liquid</th>
          <th>Staked</th>
          <th>Staking Pool</th>
          <th>Reload</th>
          <th>Remove</th>
        </tr>
      </thead>
      <tbody>
        {table.map((val, key) => {
          return (
            <tr key={key}>
              <td>{key}</td>
              {/* TODO: Make a view page to see more details of each contract */}
              {/* TODO: Download all transactions that have been executed so far */}
              {/* TODO: Show reward in the last 2 days (or something like this) */}
              <td>{simplifyString(val.lockup)}</td>
              <td><button onClick={() => navigator.clipboard.writeText(val.lockup)}>âŽ˜</button></td>
              <td>{simplifyString(val.owner)}</td>
              <td><button onClick={() => navigator.clipboard.writeText(val.owner)}>âŽ˜</button></td>
              <td>{formatValue(val.total, nearPrice, currency)}</td>
              <td>{formatValue(val.locked, nearPrice, currency)}</td>
              <td>{formatValue(val.liquid, nearPrice, currency)}</td>
              <td>{formatValue(val.staked, nearPrice, currency)}</td>
              <td>{val.pool}</td>
              <td><button className='button' onClick={() => updateLockup(val.lockup)}>R</button></td>
              <td><button className='button' onClick={() => removeRow(key)}>X</button></td>
            </tr>)
        })}
      </tbody>
    </table>
  </div >
}

export default App;

'''
'''--- src/App.test.js ---
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

'''
'''--- src/index.css ---
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

'''
'''--- src/index.js ---
import React from 'react';
import ReactDOM from 'react-dom';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';
import 'bootstrap/dist/css/bootstrap.css';

ReactDOM.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
  document.getElementById('root')
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();

'''
'''--- src/logo.svg ---
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>
'''
'''--- src/reportWebVitals.js ---
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

'''
'''--- src/setupTests.js ---
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

'''