*GitHub Repository "aleksandargolubovic/NEAR_Metabuild"*

'''--- recycling_machine/client/public/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="shortcut icon" href="%PUBLIC_URL%/favicon.ico">
    <link
      rel="stylesheet"
      href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css"
      integrity="sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk"
      crossorigin="anonymous"
    />
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <title>Crypto Recycling Machine</title>
  </head>
  <body>
    <div id="root"></div>
  </body>
</html>
'''
'''--- recycling_machine/client/src/App.js ---
import React, { useState } from 'react';
import './App.css';
import PayoutOptions from "./components/payoutOptions";
import PayOut from "./components/payOut";
import Donate from './components/donate';
import AppContext, { defaultAppState } from './appContext';
import {
  BrowserRouter as Router,
  Routes,
  Route
} from "react-router-dom";

import Home from './components/home';

function App() {
  const [currentBalance, setCurrentBalance] = useState(0);

  return (
    <AppContext.Provider value={{
      ...defaultAppState,
      currentBalance,
      setBalance: (newBalance) => {
        setCurrentBalance(newBalance);
      },
    }}>
      <div className='App'>
        <div className='picture'>
          <br />
          <h3 style={{marginTop: '5vw'}}>Crypto Recycling Machine</h3>
          <div className='center'>
            <br/>
            <Router>
              <Routes>
                <Route path="/" element={<Home />} />
                <Route path="/payout/:paymentOption" element={<PayOut />} />
                <Route path="/donate" element={<Donate />} />
                <Route path="/payoutOptions" element={<PayoutOptions />} />
              </Routes>
            </Router>
          </div>
        </div>
      </div>
    </AppContext.Provider>
  );
}

export default App;

'''
'''--- recycling_machine/client/src/TestApp.js ---
// import React, { Component } from "react";
// import QRAddressScanner from "./components/QRAddressScanner";
// import PayOut from "./components/payOut";

// class TestApp extends Component {

//     render() {
//         return (
//          <center>
//              <h2>Crypto Recycling Machine</h2>
//              <div>
//                 <PayOut />
//              </div>
//          </center>           
//         );
//     }
// }

// export default TestApp;
'''
'''--- recycling_machine/client/src/appContext.js ---

import {createContext} from 'react';

export const defaultAppState = {
  currentBalance: 0,
};

const defaultFunction = () => {};

export default createContext({
  ...defaultAppState,
  
  setBalance: defaultFunction(),
});
'''
'''--- recycling_machine/client/src/components/donate.js ---
import React, { useContext, useState, useEffect } from 'react'
import axios from 'axios';
import { Button } from 'react-bootstrap';
import { Container, Row, Card, Spinner } from 'react-bootstrap'
import AppContext from '../appContext';
import { useNavigate } from 'react-router-dom'

const States = {
  BEGIN: 'begin',
  PAYING_OUT: 'payingOut',
  END_FAILURE: 'endFailure',
  END: 'end',
};
const defaultState = States.BEGIN;

const Donate = () => {
  let navigate = useNavigate();
  const { currentBalance } = useContext(AppContext);
  const [currentState, setCurrentState] = useState(defaultState);
  const [message, setMessage] = useState('');

  const resetState = () => {
    setCurrentState(States.BEGIN);
  }

  let payout = async () => {
    setCurrentState(States.PAYING_OUT);
    try {
      let msg = await axios.post("/api/donate");
      console.log(msg.data);
      setMessage(msg.data);
      const newState = msg.data.includes("Payment failed") ? States.END_FAILURE : States.END;
      setCurrentState(newState);
    } catch (error) {
      console.log(error.message);
      setCurrentState(States.END_FAILURE);
    }
  }

  const amountInformation = () => {
    return (
      <div>
        <h2>Total amount to donate</h2>
        <Card className='amount' style={{ width: 'fit-content' }}>
          <Card.Body className='cardBody'>
            <h3> {currentBalance / 100} $ </h3>
          </Card.Body>
        </Card>
      </div>
    );
  }

  const renderStates = () => {
    switch (currentState) {
      case States.BEGIN: return (
        <center>
          {amountInformation()}
          <Container>
            <Row>
              <Button className='button' onClick={payout}><h3>Confirm</h3></Button>
            </Row>
            <Row>
              <Button className='back-button' onClick={() => navigate(-1)}><h4>&#10094; Back</h4></Button>
            </Row>
          </Container>
        </center>
      );
      case States.PAYING_OUT: return (
        <div className='center'>
          <h4>Paying out...</h4>
          <Spinner animation="border" />
        </div>
      );
      case States.END_FAILURE: return (
        <div className='center'>
          <h4>{message}</h4>
          <Button className='button' onClick={resetState}>
            <h3>Try again!</h3>
          </Button>
        </div>
      );
      case States.END: return (
        <div className='center'>
          <h4>{message}</h4>
          <Button className='button' onClick={() => {
            navigate("/");
          }}>
            <h3>Recycle again!</h3>
          </Button>
        </div>
      );
      default: return null;
    }
  };

  return (
    <div>
      {renderStates()}
    </div>
  )
}

export default Donate;

'''
'''--- recycling_machine/client/src/components/home.js ---
import React, { useState, useEffect, useRef, useContext } from 'react';
import { useNavigate } from "react-router-dom";
import { w3cwebsocket as W3CWebSocket } from "websocket";
import { Button, Container, Card, Row, Col } from 'react-bootstrap';
import AppContext from '../appContext';

import aluminium from '../img/bottle-can.svg';
import glass from '../img/bottle-glass.svg';
import tetraPak from '../img/bottle-paper.svg';
import pet from '../img/bottle-plastic.svg';

const images = {
  "aluminium": aluminium,
  "glass": glass,
  "tetra_pak": tetraPak,
  "pet": pet
}

const defaultMessage = `{"pet": 0, "tetra_pak": 0, "glass": 0, "aluminium": 0}`;

const Home = () => {
  const { currentBalance, setBalance } = useContext(AppContext);
  let navigate = useNavigate();
  const client = useRef(null);
  const [wsMessage, setWsMessage] = useState(defaultMessage);
  const [shouldBlink, setShouldBlink] = useState(false);

  useEffect(() => {
    client.current = new W3CWebSocket('ws:' + window.location.hostname + ':' + window.location.port + '/sockjs-node');
    client.current.onopen = () => {
      console.log('WebSocket Client Connected');
    };
    client.current.onmessage = (message) => {
      setWsMessage(message.data);
      setShouldBlink(true);
      setTimeout(() => {
        setShouldBlink(false);
      }, 3000);
      console.log(message);
    };

    return () => {
      client.current = null;
    };
  }, []);

  useEffect(() => {
    if (!wsMessage) {
      return;
    }
    const message = JSON.parse(wsMessage);
    setBalance(message["currentBalance"]);
  }, [wsMessage, setBalance]);

  const renderCard = () => {
    if (!wsMessage) {
      return;
    }
    const message = JSON.parse(wsMessage);
    const elements = Object.keys(images).map((packagingType) => {
      console.log("Lastinserted")
      return (
          <Card className={`card ${shouldBlink && message["lastInserted"] === packagingType ?
            " borderBlink" : ""}`}>
            <Card.Body className='cardBody'>
              <Card.Img variant="top" src={images[packagingType]} className='card-img-top' />
              <Card.Title className={shouldBlink &&
                message["lastInserted"] === packagingType ? "card-title-on-change" : ""}
              >
                {message[packagingType]}
              </Card.Title>
            </Card.Body>
          </Card>
      )
    });
    return (
      <React.Fragment>
        {elements}
      </React.Fragment>
    )
  }

  return (
    <div>
      <Container>
        <Row>
          {renderCard()}
        </Row>
        <Row>
          <Col>
            <div>
              <h3>Balance</h3>
              <Card className='amount'>
                <Card.Body>
                  <h3>{currentBalance / 100} $</h3>
                </Card.Body>
              </Card>
            </div>
          </Col>
        </Row>
        <Row>
          <Button className='button' onClick={() => {
            navigate("/payoutOptions");
          }}>
            <h3>Payout</h3>
          </Button>
        </Row>
      </Container>
    </div>
  );
};

export default Home;

'''
'''--- recycling_machine/client/src/components/payOut.js ---
import React, { useContext, useState, useEffect } from 'react'
import QrReader from 'react-qr-reader'
import axios from 'axios';
import { Button } from 'react-bootstrap';
import { Container, Row, Card, Spinner } from 'react-bootstrap'
import AppContext from '../appContext';
import { useParams, useNavigate } from 'react-router-dom'

const addressRegex = /^(([a-z\d]+[\-_])*[a-z\d]+\.)*([a-z\d]+[\-_])*[a-z\d]+$/;
///0x[a-fA-F0-9]{40}/; 
const States = {
  BEGIN: 'begin',
  ADDRESS_READ: 'addressRead',
  PAYING_OUT: 'payingOut',
  END_FAILURE: 'endFailure',
  END: 'end',
};
const defaultState = States.BEGIN;

const PayOut = () => {
  let navigate = useNavigate();
  const { currentBalance } = useContext(AppContext);
  const [currentState, setCurrentState] = useState(defaultState);
  const [result, setResult] = useState('');
  const [message, setMessage] = useState('');
  const { paymentOption } = useParams();
  const [tokenBalance, setTokenBalance] = useState(0);

  const calculateTokenBalance = async () => {
    console.log("Params ", paymentOption);
    let price;
    // if (paymentOption === 'stableCoin')
    //   price = await axios.get("/api/getUsdtUsdPrice");
    // else
    price = await axios.get("/api/getNEARUsdPrice");
    console.log(price.data);
    setTokenBalance((currentBalance / 100) / (price.data));
  }

  useEffect(() => {
    calculateTokenBalance();
  }, []);

  const handleScan = data => {
    if (data) {
      let address = data.match(addressRegex);
      let result = address ? address[0] : "Invalid address";
      setResult(result);
      setCurrentState(States.ADDRESS_READ);
      console.log(result);
    }
  }

  const handleError = err => {
    console.error(err);
  }

  const resetState = () => {
    setCurrentState(States.BEGIN);
    setResult('result');
  }

  let payout = async () => {
    setCurrentState(States.PAYING_OUT);
    try {
      let isStableCoin = paymentOption === 'stableCoin' ? true : false;
      let msg = await axios.post("/api/payOut", {
        receiver: result,
        isStableCoin: isStableCoin
      });
      console.log(msg.data);
      setMessage(msg.data);
      const newState = msg.data.includes("Payment failed") ? States.END_FAILURE : States.END;
      setCurrentState(newState);
    } catch (error) {
      console.log(error.message);
      setCurrentState(States.END_FAILURE);
    }
  }

  const amountInformation = () => {
    return (
      <div>
        <h2>Total amount to receive on NEAR network</h2>
        <Card className='amount' style={{ width: 'fit-content' }}>
          <Card.Body className='cardBody'>
            <h3> {tokenBalance.toFixed(8)} {paymentOption === 'stableCoin' ? 'USDT' : 'NEAR'} </h3>
          </Card.Body>
        </Card>
      </div>
    );
  }

  const renderStates = () => {
    switch (currentState) {
      case States.BEGIN: return (
        <center>
          {amountInformation()}
          <Container>
            <Row className='row'>
              <h5>Please scan your QR code address</h5>
            </Row>
            <Row>
              <Card className='addressReaderCard'>
                <QrReader
                  delay={300}
                  onError={handleError}
                  onScan={handleScan}
                  style={{ width: '100%' }}
                  facingMode={"front"}
                />
              </Card>
            </Row>
            <Row>
              <Button className='back-button' onClick={() => navigate(-1)}><h4>&#10094; Back</h4></Button>
            </Row>
          </Container>
        </center>
      );
      case States.ADDRESS_READ: return (
        <center>
          {amountInformation()}
          <Container>
            <Row>
              <h5>Your account id:</h5>
            </Row>
            <Row>
              <Card className='amount' style={{ width: 'fit-content' }}>
                <Card.Body className='cardBody'>
                  <h5> {result} </h5>
                </Card.Body>
              </Card>
            </Row>
            <Row>
              {
                result !== "Invalid address" ?
                  <span>
                    <Button className='button' onClick={payout}><h3>Confirm</h3></Button> &nbsp;&nbsp;
                  </span>
                  :
                  null
              }
              <Button className='button' onClick={resetState}><h3>Scan again</h3></Button>
            </Row>
          </Container>
        </center>

      );
      case States.PAYING_OUT: return (
        <div className='center'>
          <h4>Paying out...</h4>
          <Spinner animation="border" />
        </div>
      );
      case States.END_FAILURE: return (
        <div className='center'>
          <h4>{message}</h4>
          <Button className='button' onClick={resetState}>
            <h3>Try again!</h3>
          </Button>
        </div>
      );
      case States.END: return (
        <div className='center'>
          <h4>{message}</h4>
          <Button className='button' onClick={() => {
            navigate("/");
          }}>
            <h3>Recycle again!</h3>
          </Button>
        </div>
      );
      default: return null;
    }
  };

  return (
    <div>
      {renderStates()}
    </div>
  )
}

export default PayOut;

'''
'''--- recycling_machine/client/src/components/payoutOptions.js ---
import React, { useContext } from 'react'
import { Container, Row, Card, Button } from 'react-bootstrap'
import AppContext from '../appContext';
import { useNavigate } from "react-router-dom";

import near from '../img/near-protocol-near-logo.svg';
import donate from '../img/donation-logo.svg';

import "./payout.css"

const PayoutOptions = () => {
  const { currentBalance } = useContext(AppContext);
  let navigate = useNavigate();

  return (
    <div>
      <center>
        <h2>Total amount to receive</h2>
        <Card className='amount'>
          <Card.Body className='cardBody'>
            <h3>{currentBalance / 100} $</h3>
          </Card.Body>
        </Card>
      </center>
      <Container>
        <Row className='row'>
          <h5>Please choose a payment option</h5>
        </Row>
        <Row>
          <Card style={{ cursor: "pointer", backgroundColor: '#000000' }}
            onClick={() => { navigate("/payout/near"); }}>
            <Card.Body className='cardBody'>
              <Card.Img src={near} />
            </Card.Body>
          </Card>

          <Card style={{ cursor: "pointer", backgroundColor: '#ffc61b' }}
            onClick={() => { navigate("/donate"); }}>
            <Card.Body className='cardBody'>
              <Card.Img src={donate} />
            </Card.Body>
          </Card>
        </Row>
        <Row>
          <Button className='back-button' onClick={() => navigate(-1)}><h4>&#10094; Back</h4></Button>
        </Row>
      </Container>
    </div>
  );
}

export default PayoutOptions;

'''
'''--- recycling_machine/client/src/index.js ---
import React from 'react';
import ReactDOM from 'react-dom';
import App from './App';
//import 'bootstrap/dist/css/bootstrap.min.css';

ReactDOM.render(
  <App />,
  document.getElementById('root')
);
'''
'''--- recycling_machine/server/components/bottlesReceiver.js ---
let sessionActive = false;
let bottleStatus = {};

const bottlePrices = {
  pet: 10,
  tetra_pak: 5,
  glass: 6,
  aluminium: 15,
}

let currentBalance = 0;

const setBottlePrice = (bottleType, price) => {
  if (sessionActive) {
    console.log("Session started");
    return;
  }
  if (bottlePrices[bottleType] == undefined) {
    console.error("Unknown bottle type");
    return;
  }
  bottlePrices[bottleType] = price;
  console.log("A new price set: ", price, " for ", bottleType, " bottles");
}

const restartSession = () => {
  console.log("session restart")
  sessionActive = true;
  currentBalance = 0;
  bottleStatus = {
    pet: 0,
    tetra_pak: 0,
    glass: 0,
    aluminium: 0,
    lastInserted: ""
  };
}

const insertBottle = (bottleType) => {
  if (!sessionActive) {
    console.log("Session not started");
    return;
  }

  if (bottleStatus[bottleType] != undefined) {
    bottleStatus[bottleType] = bottleStatus[bottleType] + 1;
    currentBalance += bottlePrices[bottleType];
    bottleStatus["lastInserted"] = bottleType;
    console.log(getAll());
    console.log("Inserted:", bottleType, ", currentBalance: ", currentBalance);
  }
}

const getAll = () => {
  return JSON.stringify({...bottleStatus, currentBalance});
}

const getCurrentBalance = () => {
  return currentBalance;
}

module.exports = {restartSession, insertBottle, getAll, getCurrentBalance};
'''
'''--- recycling_machine/server/components/contractCalls.js ---
const { utils } = require("near-api-js");
const axios = require('axios');
const getContract = require('../contract/recyclingMachineContract');
const {getCurrentBalance, restartSession} = require('./bottlesReceiver');

getNEARUSDPrice = async () => {
  console.log("Getting NEARUSD price...");
  try {
    response = await axios.get('https://api.binance.com/api/v3/ticker/price\?symbol\=NEARUSDT');
    console.log(response.data.price);
    return(response.data.price);
  } catch (error) {
    console.error(error);
  }
  return 0;
}

module.exports = function (app) {

  app.get('/getNEARUsdPrice', async (req, res) => {
    tokenPrice = await getNEARUSDPrice();
    res.send(tokenPrice);
  });

  app.post('/payOut', async (req, res) => {
    console.log("Payout...", getCurrentBalance());
    let recyclingMachineContract = await getContract();
    if (!recyclingMachineContract) {
      res.send("Network error");
      return;
    }
    const tokenPrice = await getNEARUSDPrice();
    const amount = getCurrentBalance() / tokenPrice / 100;
    const nearAmount = utils.format.parseNearAmount(amount.toString());
    console.log("Near amount: ", nearAmount);
    try {
      let ret = await recyclingMachineContract.payout({
        args: {
          receiver: req.body.receiver,
          amount: nearAmount,
        },
        gas: "300000000000000",
      });
      console.log(ret);
      console.log("Payment completed successfully");
      res.send("Payment completed successfully!");
      restartSession();
    } catch (err) {
      console.log(err.message);
      res.send("Payment failed, try again!");
    }
  });

  app.post('/donate', async (req, res) => {
    let recyclingMachineContract = await getContract();
    if (!recyclingMachineContract) {
      res.send("Network error");
      return;
    }
    console.log("Adding donation:", getCurrentBalance(), "[cents]");
    const tokenPrice = await getNEARUSDPrice();
    const amount = getCurrentBalance() / tokenPrice / 100;
    const nearAmount = utils.format.parseNearAmount(amount.toString());
    console.log("Near amount: ", nearAmount);
    try {
      let ret = await recyclingMachineContract.donate({
        args: {
          amount: nearAmount,
        },
        gas: "300000000000000",
      });
      console.log(ret);
      console.log("Donation completed successfully");
      res.send("Thank you for your donation!");
      restartSession();
    } catch (err) {
      console.log(err.message);
      res.send("Donation failed, try again!");
    }
  });
}

'''
'''--- recycling_machine/server/contract/recyclingMachineContract.js ---
const nearAPI = require("near-api-js");
require('dotenv').config();
// creates keyStore from an environment variable

const { keyStores, KeyPair } = nearAPI;
const keyStore = new keyStores.InMemoryKeyStore();
const PRIVATE_KEY = process.env.PRIVATE_KEY;
// creates a public / private key pair using the provided private key
const keyPair = KeyPair.fromString(PRIVATE_KEY);
const ACCOUNT_ID = process.env.ACCOUNT_ID;
const NETWORK_ID = process.env.NETWORK_ID;
const CONTRACT_ID = ACCOUNT_ID;

keyStore.setKey(NETWORK_ID, ACCOUNT_ID, keyPair);

const { connect } = nearAPI;

const config = {
  networkId: NETWORK_ID,
  keyStore,
  nodeUrl: process.env.NODE_URL,
  walletUrl: process.env.WALLET_URL,
  helperUrl: process.env.HELPER_URL,
  explorerUrl: process.env.EXPLORER_URL,
};

const getContract = async () => {
  const near = await connect(config);
  const account = await near.account(ACCOUNT_ID);

  const contract = new nearAPI.Contract(
    account,
    CONTRACT_ID,
    {
      viewMethods: ["get_stats"],
      changeMethods: ["set_donation_address", "payout", "donate"],
      sender: account, // account object to initialize and sign transactions.
    }
  );
  return contract;
}
module.exports = getContract;

'''
'''--- recycling_machine/server/index.js ---
const express = require('express');
const cors = require('cors');
const { setPrices, restartSession, insertBottle, getAll } = require('./components/bottlesReceiver');

const app = express();
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

require('./components/contractCalls')(app);

let wss;

app.get('/', (req, res) => {
  res.send('Hi There')
});

const PrepareMachine = async () => {
  //await setPrices();
  restartSession();
}

PrepareMachine();

app.post('/insertBottle', (req, res) => {
  console.log("Received: ", req.body);
  insertBottle(req.body["packagingType"]);
  
  res.send({ message: 'all good' });
  wss.clients.forEach(function each(client) {
    if (client.readyState === WebSocket.OPEN) {
      client.send(getAll());
    }
  });
});

app.get('/restartSession', (req, res) => {
  restartSession();
  res.send('Session restarted');
});

let server = app.listen('3001', () => { })

const WebSocket = require('ws');
wss = new WebSocket.Server({ server:server });
wss.on('connection', function connection(ws) {
  console.log('A new client Connected!');
  ws.send(getAll());
  ws.on('message', function incoming(message) {
    console.log('received: %s', message);

    wss.clients.forEach(function each(client) {
      if (client !== ws && client.readyState === WebSocket.OPEN) {
        client.send(message);
      }
    });
  });
});
'''
'''--- recycling_machine_emulator/emulator.js ---
// An address of the backend service to whom we send button events.
let backendAddress = "127:0:0:1:80";

// Used to send requests to the backend service.
const axios = require('axios')

// RaspberryPi IO.
let rpio = require('rpio');

// Used to map pressed buttons with corresponding LEDs.
const button_to_led_map = new Map();
button_to_led_map.set('16', 13);
button_to_led_map.set('20', 19);
button_to_led_map.set('21', 26);
button_to_led_map.set('12', 6);

// Maps LEDs with packaging types.
const led_to_packaging_map = new Map();
led_to_packaging_map.set(13, "pet");
led_to_packaging_map.set(19, "tetra_pak");
led_to_packaging_map.set(26, "glass");
led_to_packaging_map.set(6, "aluminium");

// Send inserted packaging type to the backend service.
async function sendPackagingToBackend(blinking_led) {
	console.log("Inserted type: ", led_to_packaging_map.get(blinking_led));
	axios.post("http://" + backendAddress + "/insertBottle", {
		packagingType: led_to_packaging_map.get(blinking_led)
	}).then(res => {
		console.log(`statusCode: ${res.status}`)
		console.log(res)
	}).catch(error => {
		//console.error(error)
	})
}

// Callback function used to process button events.
function pollcb(cbpin)
{
	const led = button_to_led_map.get(cbpin.toString());
  rpio.write(led, rpio.read(cbpin) ? rpio.LOW : rpio.HIGH);
	if (rpio.read(cbpin)) {
		sendPackagingToBackend(led);
	}
}

process.on('exit', function() {
	rpio.exit();
});

function initializeRpio() {
	rpio.init({mapping: 'gpio'});

	console.log("Opening pins...");
	rpio.open(16, rpio.INPUT, rpio.PULL_UP);
	rpio.open(13, rpio.OUTPUT, rpio.LOW);
	rpio.open(20, rpio.INPUT, rpio.PULL_UP);
	rpio.open(19, rpio.OUTPUT, rpio.LOW);
	rpio.open(21, rpio.INPUT, rpio.PULL_UP);
	rpio.open(26, rpio.OUTPUT, rpio.LOW);
	rpio.open(12, rpio.INPUT, rpio.PULL_UP);
	rpio.open(6, rpio.OUTPUT, rpio.LOW);
	console.log("Pins opened");

	rpio.poll(16, pollcb);
	rpio.poll(20, pollcb);
	rpio.poll(21, pollcb);
	rpio.poll(12, pollcb);
	console.log("Rpio initialized");
}

function main() {
	if (process.argv.length != 3) {
		console.error("Please provide proper input arguments");
		return;
	}

	backendAddress = process.argv[2];
	console.log("BackendAddress set to: ", backendAddress);

	initializeRpio();
}

main();

'''