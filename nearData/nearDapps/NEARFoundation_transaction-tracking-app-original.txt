*GitHub Repository "NEARFoundation/transaction-tracking-app-original"*

'''--- .vscode/settings.json ---
{
  "editor.codeActionsOnSave": {
    "source.fixAll.eslint": true
  },
  "editor.formatOnSave": true,
  "eslint.workingDirectories": ["./backend", "./src", "./shared"]
}

'''
'''--- README.md ---
# ðŸ›‘ IMPORTANT!

Please see the newer repo at https://github.com/NEARFoundation/transaction-tracking-app instead of this repo, which is legacy.

# NEAR Transaction Tracker App (also known as "Transactions Accounting Report")

Transaction Tracker App (TTA) produces a report that helps teams across the ecosystem to see a simplified view of all transactions over a certain period (e.g. the Finance/Legal/Operations team uses it to reconcile their transactions and stay compliant).

## What it does

Ledgers like https://explorer.near.org don't always provide a simple view of when money changes hands (i.e. NEAR tokens or fungible tokens from one NEAR account to another).

TTA allows you to specify a NEAR mainnet account ID and see a table of all transactions involding the transfer of NEAR tokens or fungible tokens into or out of that account. You can export the table as CSV.

When you specify one or more NEAR acccount IDs, those account IDs get saved to your browser's localStorage. Additionally, the server starts downloading all transactions (from the private indexer) for those account IDs and processes them and saves the data into TTA's Mongo database, which is what powers the table you see in your browser. The downloads can take a while (because the tables are huge), and a cron job keeps track of their progress.

---

# Overview

- The frontend is a React app in the "frontend" folder.
  - `/frontend/src/index.html` is a great place to start exploring. Note that it loads in `/frontend/src/index.tsx`, where you can learn how the frontend connects to the NEAR blockchain.
- The backend is an Express app (with cron jobs and a Mongo database) in the "backend" folder.
  - The backend relies on a private [clone](https://github.com/near/near-indexer-for-explorer/) of the [NEAR Explorer](https://explorer.near.org) indexer, a large PostgreSQL database (certain tables are ~1 TB). We use our own clone of NEAR Explorer (on a bare metal Hetzner server) instead of using the public credentials of the actual NEAR Explorer because the complicated queries take too long and time out.
- There is also a folder called "shared" for code that both apps use.
- Tests use [jest](https://jestjs.io/docs/getting-started#using-typescript). You can run via `yarn test`.

---

# Getting Started

To run this project locally (as an operations engineer, or a developer looking to deliver code):

- Get a Nix-based development environment (Linux, Mac, WSL).
- Get and setup Docker for your environment.
- Clone this repo and get into the project.
- run `docker-compose up`
- App will be available at: http://localhost:8085/ (frontend) and http://localhost:8086/ (backend)

To run this project locally (as a developer running a fully local development environment)

1. Make sure you've installed [Node.js](https://nodejs.org/en/download/package-manager/) â‰¥ 18. `nvm use 18`.
1. Install and start [Mongo](https://www.mongodb.com/docs/manual/tutorial/install-mongodb-on-os-x/) using the instructions in its own section below.
1. `cp frontend/.env.development frontend/.env.development.local && cp backend/.env.development backend/.env.development.local`
1. Edit the values for each of those local env files. If you set REACT_APP_ALLOW_DELETING_FROM_DATABASE to "true" in `frontend/.env.development.local` and ALLOW_DELETING_FROM_DATABASE to "true" in `backend/.env.development.local`, you will see a button in the frontend that allows you to delete records from the database, which is useful when you are manually testing whether transaction processing is working after editing the SQL queries.
   - Similarly, if you ever want to nuke your local Mongo cache, you can run `yarn drop_actions_and_tasks_and_types`.
1. Install PostreSQL:

   ```bash
   brew install postgresql
   brew services start postgresql
   psql postgres
   \du
   CREATE ROLE testuser WITH LOGIN PASSWORD 'secret';
   ALTER ROLE testuser CREATEDB;
   CREATE ROLE dev WITH LOGIN PASSWORD 'public';
   ALTER ROLE dev CREATEDB;
   \q
   psql postgres -U testuser
   CREATE DATABASE tta_test_db;
   GRANT ALL PRIVILEGES ON DATABASE tta_test_db TO testuser;
   \list
   \q
   psql postgres -U dev
   CREATE DATABASE local_explorer;
   GRANT ALL PRIVILEGES ON DATABASE local_explorer TO dev;
   \list
   \q
   ```

1. Install dependencies for frontend and backend: `yarn install_all`
1. Seed the local dev database via `yarn seed`.
1. (optional) `POSTGRESQL_CONNECTION_STRING=___ ./backend/test_helpers/updateTestData.sh` (where `___` is the mainnet Postgres credentials string)
1. `yarn test`
1. Start the backend: `yarn backend_dev`
1. In a second terminal, start the frontend: `yarn dev` (see `package.json` for a full list of `scripts` you can run with `yarn`). TODO: Check whether https://www.npmjs.com/package/concurrently would help.
1. Visit http://localhost:1234/ in the browser.

Go ahead and play with the app and the code. As you make frontend code changes, the app will automatically reload.

## Setting up Mongo and MongoDB Shell

```
brew tap mongodb/brew
brew update -v
brew install mongodb-community@6.0
brew services start mongodb-community@6.0
brew install mongosh
mongosh
use admin
show databases
db.createUser(
  {
    user: "MongoTestDbUser",
    pwd: "MongoTestDbSecretPhrase",
    roles: [ { role: "readWrite", db: "test" } ]
  }
)
db.createUser(
  {
    user: "MongoDbUser",
    pwd: "MongoDbSecretPhrase",
    roles: [ { role: "userAdminAnyDatabase", db: "admin" } ]
  }
)
show users
exit
```

https://medium.com/@haxzie/getting-started-with-mongodb-setting-up-admin-and-user-accounts-4fdd33687741 was useful.

# Tests

`*.test.ts` files live right next to whatever file they are testing.

`backend/src/helpers/updateTransactions.test.ts` contains tests about the complicated SQL queries that process each of the ~40 transaction types.

To test that `updateTransactions` works correctly, first ensure that `backend/test_helpers/expectedOutput.csv` contains the values that you want. (Ideally we will have more than 1 row per transaction type.)

Then run `yarn update_test_data`. This command will download all of the real-world data from the mainnet indexer Postgres database into SQL files that the automated tests will use when seeing your local database (the mock indexer). (See https://stackoverflow.com/a/20909045/ for how the update_test_data script works.)

To avoid downloading terabytes of data from the remote database (private indexer), the scripts look in `expectedOutput.csv` to see exactly which transaction hashes matter.

The output of `updateTestData.sh` is `backend/test_helpers/internal/testData.sql`, which is how tests can see the local PostgreSQL test database (mock indexer).

The inputs for `backend/src/helpers/updateTransactions.test.ts` come from `expectedOutput.csv` (its transaction hashes and account IDs), and of course so do the expected outputs.

Then run `yarn test` to run the tests.

# Updating seed files for local database and test database

1. Visit https://docs.google.com/spreadsheets/d/1g3yymiHP2QJqwLrJdwma8gu-J92XCbZR-DDpObmu_2o/edit#gid=726351924
   - The FLO team has decided that this is the official list of transaction types.
1. Sort the rows by "keep" descending, "phase" ascending, "txType" ascending.
   - (We can't try to skip this step by creating a sorted "filter view" in Google Sheets because the "Download" step doesn't honor filter views.)
1. For rows where "keep" === 1, search for occurrences of "E+". If any numeric values are using this kind of (exponential) notation, you need to correct the cell (write out the full number instead).
   - You might need to prepend the value with a single quote (').
1. File > Download > .ods (choose a temporary folder somewhere).
   - (We need this extra step before CSV because Google Sheets doesn't save the double-quotes correctly.)
1. Open the .ods file in LibreOffice.
1. Delete the rows where "keep" is not "1".
1. Delete these columns: "keep", "errors", "phase".
1. File > Save As > Text CSV (.csv)
1. Choose to save to `backend/test_helpers/expectedOutput.csv`
1. Check the boxes for "Save cell content as shown" and "Quote all text cells"

# TODO: Explain how to get permissions.

# Other Helpful Docs

- [react](https://reactjs.org/)
- [create-near-app](https://github.com/near/create-near-app)
- [near accounts](https://docs.near.org/docs/concepts/account)
- [near wallet](https://wallet.testnet.near.org/)
- [near-cli](https://github.com/near/near-cli)
- [gh-pages](https://github.com/tschaub/gh-pages)

'''
'''--- backend/data/benchmarkTheSqlQueries.ts ---
import { performance } from 'perf_hooks';

import mongoose from 'mongoose';
import pg, { type Client } from 'pg';

import { millisToMinutesAndSeconds } from '../../shared/helpers/datetime.js';
import { logger } from '../../shared/helpers/logging.js';
import { type AccountId, type RowOfExpectedOutput } from '../../shared/types';
import { getSqlFolder, getTransactionTypeSql } from '../src/helpers/addDefaultTypesTx.js';
import { CONNECTION_TIMEOUT, DEFAULT_LENGTH, MONGO_CONNECTION_STRING, PRODUCTION_POSTGRESQL_CONNECTION_STRING, QUERY_TIMEOUT, STATEMENT_TIMEOUT } from '../src/helpers/config.js';
import { EXPECTED_OUTPUT_FILENAME } from '../test_helpers/internal/defineTransactionHashesInSql.js';

import { getRowsOfExpectedOutput } from './csvToJson.js';

const connectionString = PRODUCTION_POSTGRESQL_CONNECTION_STRING;

/**
 * This function partially duplicates the one in `backend/src/helpers/updateTransactions.ts` but adjusted for benchmarking.
 */
async function getTransactionsFromIndexer(pgClient: Client, accountId: AccountId, txTypeName: string, blockTimestamp: number, length: number): Promise<number | null> {
  try {
    const sqlFolder = getSqlFolder();
    const sql = getTransactionTypeSql(sqlFolder, `${txTypeName}.sql`);
    const startTime = performance.now();
    const result = await pgClient.query(sql, [accountId, blockTimestamp.toString(), length]);
    const endTime = performance.now();
    const diff = endTime - startTime;
    return diff;
  } catch (error) {
    logger.error('getTransactionsFromIndexer', error);
    return null;
  }
}

type Results = {
  [key: string]: {
    diff: number;
    humanReadableDiff: string | null;
  };
};

async function runBenchmark() {
  const connection = await mongoose.connect(MONGO_CONNECTION_STRING);
  const blockTimestamp = 0;
  const pgClient = new pg.Client({ connectionString, statement_timeout: STATEMENT_TIMEOUT, connectionTimeoutMillis: CONNECTION_TIMEOUT, query_timeout: QUERY_TIMEOUT });
  await pgClient.connect();
  // logger.info('pgClient connected');
  const rowsOfExpectedOutput: RowOfExpectedOutput[] = getRowsOfExpectedOutput(EXPECTED_OUTPUT_FILENAME);

  // console.log({ rowsOfExpectedOutput });
  const results: Results = {};
  const missingTxTypeErrors: string[] = [];

  for (const rowOfExpectedOutput of rowsOfExpectedOutput) {
    // eslint-disable-next-line @typescript-eslint/naming-convention
    const { accountId, txType } = rowOfExpectedOutput;
    logger.info(`Awaiting getTransactionsFromIndexer for ${txType}`);
    const diff = await getTransactionsFromIndexer(pgClient, accountId, txType, blockTimestamp, DEFAULT_LENGTH);
    if (diff) {
      const humanReadableDiff = millisToMinutesAndSeconds(diff);
      results[txType] = { diff, humanReadableDiff };
    } else {
      missingTxTypeErrors.push(txType);
    }
  }

  await pgClient.end();
  await connection.disconnect();
  const sortable = Object.fromEntries(
    Object.entries(results).sort(([, a], [, b]) => {
      return b.diff - a.diff;
    }),
  );
  logger.info('result', { sortable, missingTxTypeErrors }, JSON.stringify(sortable));
}

// eslint-disable-next-line @typescript-eslint/no-floating-promises
runBenchmark();

'''
'''--- backend/data/cleanTheSql.sh ---
# This file gets run automatically from within `backend/test_helpers/updateTestData.sh`
# Or run manually via `SQL_FILE=backend/test_helpers/internal/testData.sql ./backend/data/cleanTheSql.sh`

# Note that many lines below needed to have operations split into multiple lines (using placeholder files rather than operating on the file directly) due to Mac security rules.

DB_PREFIX='public.'
TBL_PREFIX='temp_test_export_'
PLACEHOLDER_FILE=$SQL_FILE.new

# https://stackoverflow.com/a/525612/
echo "Deleting $TBL_PREFIX from the insert statements..."
sed -i '' "s/$TBL_PREFIX//g" $SQL_FILE

echo "Deleting $DB_PREFIX from the SQL..."
sed -i '' "s/$DB_PREFIX//g" $SQL_FILE

# --------------------------------------------------------
echo "Removing certain unimportant lines from the SQL..."

sed '/^ALTER TABLE / d' $SQL_FILE > $PLACEHOLDER_FILE
rm $SQL_FILE
mv $PLACEHOLDER_FILE $SQL_FILE

sed '/^SET / d' $SQL_FILE > $PLACEHOLDER_FILE
rm $SQL_FILE
mv $PLACEHOLDER_FILE $SQL_FILE

sed '/^SELECT / d' $SQL_FILE > $PLACEHOLDER_FILE
rm $SQL_FILE
mv $PLACEHOLDER_FILE $SQL_FILE

sed '/^--/ d' $SQL_FILE > $PLACEHOLDER_FILE
rm $SQL_FILE
mv $PLACEHOLDER_FILE $SQL_FILE

# --------------------------------------------------------
# Consolidate empty lines (https://unix.stackexchange.com/a/131228/):
sed -e '/./b' -e :n -e 'N;s/\n$//;tn' $SQL_FILE > $PLACEHOLDER_FILE
rm $SQL_FILE
mv $PLACEHOLDER_FILE $SQL_FILE

# --------------------------------------------------------
# Mark the enums as text. (Is there a better way to handle these?)
sed 's/action_kind action_kind/action_kind text/g' $SQL_FILE > $PLACEHOLDER_FILE
rm $SQL_FILE
mv $PLACEHOLDER_FILE $SQL_FILE

sed 's/status execution_outcome_status/status text/g' $SQL_FILE > $PLACEHOLDER_FILE
rm $SQL_FILE
mv $PLACEHOLDER_FILE $SQL_FILE

sed 's/receipt_kind receipt_kind/receipt_kind text/g' $SQL_FILE > $PLACEHOLDER_FILE
rm $SQL_FILE
mv $PLACEHOLDER_FILE $SQL_FILE
# --------------------------------------------------------

# Find each instance of "CREATE TABLE" and ensure that "DROP TABLE IF EXISTS" gets called beforehand. https://stackoverflow.com/a/30431410/
sed -E 's/CREATE TABLE (.+) /DROP TABLE IF EXISTS \1; CREATE TABLE \1 /g' $SQL_FILE > $PLACEHOLDER_FILE
rm $SQL_FILE
mv $PLACEHOLDER_FILE $SQL_FILE

echo "cleanTheSql.sh finished."
'''
'''--- backend/data/csvToJson.ts ---
// This file simply converts './backend/test_helpers/expectedOutput.csv' to JSON, which gets used by `backend/test_helpers/updateTestData.sh` (via `backend/test_helpers/internal/defineTransactionHashesInSql.ts`) and also by backend/src/helpers/updateTransactions.test.ts.

import fs from 'node:fs';

// eslint-disable-next-line canonical/id-match
import csv2json from 'csvjson-csv2json';

import { subfolder } from '../../shared/config.js';
import { type RowOfExpectedOutput } from '../../shared/types';

// console.log({ subfolder });

export function getRowsOfExpectedOutput(csvFilename: string): RowOfExpectedOutput[] {
  console.log({ csvFilename });
  const csv = fs.readFileSync(`./${subfolder}${csvFilename}`, 'utf8');
  // console.log({ csv });
  const rowsOfExpectedOutput: RowOfExpectedOutput[] = csv2json(csv, { parseNumbers: false, parseJSON: false }); // https://www.npmjs.com/package/csvjson-csv2json
  // console.log({ rowsOfExpectedOutput });
  return rowsOfExpectedOutput;
}

'''
'''--- backend/data/defineTransactionHashesInSql.ts ---
import fs from 'node:fs';

import { getRowsOfExpectedOutput } from './csvToJson.js';

const TRANSACTION_HASHES_FILENAME = './backend/data/transactionHashes.sql';
const TRANSACTION_HASHES_CSV = 'data/transactionHashes.csv';
const rowsOfExpectedOutput = getRowsOfExpectedOutput(TRANSACTION_HASHES_CSV);

// console.log({ rowsOfExpectedOutput });

const transactionHashes: Set<string> = new Set();
for (const rowOfExpectedOutput of rowsOfExpectedOutput) {
  transactionHashes.add(`('${rowOfExpectedOutput.transaction_hash}')`);
}

const sqlOutput = `DROP TABLE IF EXISTS transactionHashes;
CREATE TEMP TABLE transactionHashes AS
WITH t (transactionHash) AS (
 VALUES
 ${Array.from(transactionHashes).join(',\n')}
 )
SELECT * FROM t;`;
// console.log(sqlOutput);

fs.writeFileSync(TRANSACTION_HASHES_FILENAME, sqlOutput);

'''
'''--- backend/data/seedLocalDatabase.sh ---

# Run this file via `yarn seed`.

psql -Atx $POSTGRESQL_CONNECTION_STRING -af backend/data/seedData.sql

'''
'''--- backend/data/tableDefinitions.sql ---
/* 
This file defines the "CREATE TABLE" SQL queries based on the 6 tables of the indexer database that this app needs to read from, and those table 
definitions include WHERE clauses to filter down the rows to include only the ones relevant to `backend/test_helpers/expectedOutput.csv` (used in tests).
Why create new tables (which requires write access)? Because Ryan Walsh thinks there might not be a better way to download only matching rows. pg_dump 
doesn't support WHERE clauses and also doesn't support views.

https://stackoverflow.com/a/63349501/ 
https://stackoverflow.com/a/12816187/ 
https://dba.stackexchange.com/a/86726/
*/

/* =============================================================== */
drop table if exists temp_test_export_transactions;
CREATE TABLE temp_test_export_transactions AS 
SELECT 
	T.TRANSACTION_HASH,
	T.INCLUDED_IN_BLOCK_HASH,
	T.INCLUDED_IN_CHUNK_HASH,
	T.INDEX_IN_CHUNK,
	T.BLOCK_TIMESTAMP,
	T.SIGNER_ACCOUNT_ID,
	T.SIGNER_PUBLIC_KEY,
	T.NONCE,
	T.RECEIVER_ACCOUNT_ID,
	T.SIGNATURE,
	T.STATUS,
	T.CONVERTED_INTO_RECEIPT_ID,
	T.RECEIPT_CONVERSION_GAS_BURNT,
	T.RECEIPT_CONVERSION_TOKENS_BURNT 
FROM TRANSACTIONS T
LEFT JOIN RECEIPTS R ON T.CONVERTED_INTO_RECEIPT_ID = R.RECEIPT_ID
WHERE T.TRANSACTION_HASH IN (SELECT transactionHash FROM transactionHashes);
/* =============================================================== */
drop table if exists temp_test_export_receipts;
CREATE TABLE temp_test_export_receipts AS 
SELECT 
	R.RECEIPT_ID,
	R.INCLUDED_IN_BLOCK_HASH,
	R.INCLUDED_IN_CHUNK_HASH,
	R.INDEX_IN_CHUNK,
	R.INCLUDED_IN_BLOCK_TIMESTAMP,
	R.PREDECESSOR_ACCOUNT_ID,
	R.RECEIVER_ACCOUNT_ID,
	R.RECEIPT_KIND,
	R.ORIGINATED_FROM_TRANSACTION_HASH
FROM TRANSACTIONS T
LEFT JOIN RECEIPTS R ON T.CONVERTED_INTO_RECEIPT_ID = R.RECEIPT_ID
WHERE T.TRANSACTION_HASH IN (SELECT transactionHash FROM transactionHashes);
/* =============================================================== */
drop table if exists temp_test_export_execution_outcomes;
CREATE TABLE temp_test_export_execution_outcomes AS 
SELECT 
	EO.RECEIPT_ID,
	EO.EXECUTED_IN_BLOCK_HASH,
	EO.EXECUTED_IN_BLOCK_TIMESTAMP,
	EO.INDEX_IN_CHUNK,
	EO.GAS_BURNT,
	EO.TOKENS_BURNT,
	EO.EXECUTOR_ACCOUNT_ID,
	EO.STATUS,
	EO.SHARD_ID
FROM TRANSACTIONS T
LEFT JOIN RECEIPTS R ON T.CONVERTED_INTO_RECEIPT_ID = R.RECEIPT_ID
LEFT JOIN EXECUTION_OUTCOMES EO ON EO.RECEIPT_ID = R.RECEIPT_ID
WHERE T.TRANSACTION_HASH IN (SELECT transactionHash FROM transactionHashes);
/* =============================================================== */
drop table if exists temp_test_export_blocks;
CREATE TABLE temp_test_export_blocks AS 
SELECT 
	B.BLOCK_HEIGHT,
	B.BLOCK_HASH,
	B.PREV_BLOCK_HASH,
	B.BLOCK_TIMESTAMP,
	B.TOTAL_SUPPLY,
	B.GAS_PRICE,
	B.AUTHOR_ACCOUNT_ID
FROM TRANSACTIONS T
LEFT JOIN RECEIPTS R ON T.CONVERTED_INTO_RECEIPT_ID = R.RECEIPT_ID
LEFT JOIN BLOCKS B ON B.BLOCK_HASH = R.INCLUDED_IN_BLOCK_HASH
WHERE T.TRANSACTION_HASH IN (SELECT transactionHash FROM transactionHashes);
/* =============================================================== */
drop table if exists temp_test_export_action_receipt_actions;
CREATE TABLE temp_test_export_action_receipt_actions AS 
SELECT 
	ARA.RECEIPT_ID,
	ARA.INDEX_IN_ACTION_RECEIPT,
	ARA.ACTION_KIND,
	ARA.ARGS,
	ARA.RECEIPT_PREDECESSOR_ACCOUNT_ID,
	ARA.RECEIPT_RECEIVER_ACCOUNT_ID,
	ARA.RECEIPT_INCLUDED_IN_BLOCK_TIMESTAMP
FROM TRANSACTIONS T
LEFT JOIN RECEIPTS R ON T.CONVERTED_INTO_RECEIPT_ID = R.RECEIPT_ID
LEFT JOIN ACTION_RECEIPT_ACTIONS ARA ON ARA.RECEIPT_ID = R.RECEIPT_ID
WHERE T.TRANSACTION_HASH IN (SELECT transactionHash FROM transactionHashes);
/* =============================================================== */
drop table if exists temp_test_export_transaction_actions;
CREATE TABLE temp_test_export_transaction_actions AS 
SELECT 
	ta.transaction_hash, 
	ta.index_in_transaction, 
	ta."action_kind", 
	ta.args
FROM TRANSACTIONS T
LEFT JOIN TRANSACTION_ACTIONS ta ON T.TRANSACTION_HASH = TA.TRANSACTION_HASH
LEFT JOIN RECEIPTS R ON T.CONVERTED_INTO_RECEIPT_ID = R.RECEIPT_ID
WHERE T.TRANSACTION_HASH IN (SELECT transactionHash FROM transactionHashes);
'''
'''--- backend/data/updateLocalSeedFile.sh ---

# Run this file via `yarn update_local_seed_file`.

# TABLES is a variable storing comma-separated table names each prepended with "temp_test_export_". These are the 6 tables of the indexer database that this app needs to read from. The prefix is meant to clarify to anyone who happens to be browsing the private indexer DB at the time that these tables are special ephemeral tables that are about to be deleted.
TABLES=temp_test_export_transactions,temp_test_export_receipts,temp_test_export_execution_outcomes,temp_test_export_blocks,temp_test_export_action_receipt_actions,temp_test_export_transaction_actions
chosenTables=''

# https://stackoverflow.com/a/35894538/
for i in ${TABLES//,/ }
do
    chosenTables="$chosenTables --table=$i"
    echo "$chosenTables"
done

echo "Calling defineTransactionHashesInSql..."
yarn ts-node  --esm ./backend/data/defineTransactionHashesInSql.ts

echo "Merging transactionHashes.sql with tableDefinitions.sql..."
cat backend/data/transactionHashes.sql backend/data/tableDefinitions.sql > backend/data/createTempTablesOfRowsWithSpecificTransactions.sql

echo "Calling createTempTablesFilteredToSpecificAccounts..."
# Create the temporary tables that we need on the remote database (private indexer). Those tables will contain only the specific rows that are relevant to us based on the account IDs in our local environment variable (because of the WHERE clauses). Otherwise, downloading those tables would take up too much space on each engineer's local machine because they are hundreds of gigabytes each.
psql -Atx $PRODUCTION_POSTGRESQL_CONNECTION_STRING -af backend/data/createTempTablesOfRowsWithSpecificTransactions.sql

echo "Downloading temp tables as schemas + INSERT statements..."
# pg_dump downloads the data (as INSERT statements) to a file that gets committed to the repo so that all engineers can start with the same basic data set.
pg_dump $PRODUCTION_POSTGRESQL_CONNECTION_STRING $chosenTables --column-inserts > backend/data/seedData.sql

# Delete all of those temporary tables from the remote database (private indexer).
for i in ${TABLES//,/ }
do
    echo "Dropping $i..."
    psql -Atx $PRODUCTION_POSTGRESQL_CONNECTION_STRING -c "DROP TABLE IF EXISTS $i;";
done

# Clean the SQL insert commands so that they are ready to be executed to seed the local PostgreSQL database.
SQL_FILE=backend/data/seedData.sql ./backend/data/cleanTheSql.sh

echo "Finished updating the seed file. Run 'yarn seed' to seed the database."

# TODO: Create a separate file that an engineer can run to execute the SQL to seed the local database. Set `yarn seed` to run it. It should use the local credentials at POSTGRESQL_CONNECTION_STRING in `backend/.env.development`.
'''
'''--- backend/docker-compose.yml ---
version: "3.3"

services:
  mongodb:
    image: mongo:5.0.2
    restart: always
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGODB_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_PASSWORD}
    ports:
      - "${MONGODB_LOCAL_PORT}:${MONGODB_DOCKER_PORT}"
    volumes:
      - db:/data/db

volumes:
  db:

'''
'''--- backend/dropActionsAndTasksAndTypes.ts ---
// Run via `yarn dropActionsAndTasksAndTypes` or `yarn ts-node --esm ./backend/dropActionsAndTasksAndTypes.ts`.

import dotenv from 'dotenv';
import mongoose from 'mongoose';

import { logger } from '../shared/helpers/logging.js';

import { TxActions } from './src/models/TxActions.js';
import { TxTasks } from './src/models/TxTasks.js';
import { TxTypes } from './src/models/TxTypes.js';

const result = dotenv.config({ path: './backend/.env.development.local' });
if (result.error) {
  throw result.error;
}

// logger.info(result.parsed);

async function main() {
  const mongoConnectionString = process.env.MONGO ?? '';
  // logger.info({ mongoConnectionString });
  await mongoose.connect(mongoConnectionString);
  await TxActions.deleteMany({});
  logger.info('Deleted all TxActions.');
  await TxTasks.deleteMany({});
  logger.info('Deleted all TxTasks.');
  await TxTypes.deleteMany({});
  logger.info('Deleted all TxTypes.');
  logger.info('Finished.');
  process.exit(0); // https://stackoverflow.com/a/52461246/
}

// eslint-disable-next-line @typescript-eslint/no-floating-promises
main();

'''
'''--- backend/jest.config.ts ---
// https://kulshekhar.github.io/ts-jest/docs/guides/esm-support/

/* eslint-disable canonical/filename-match-exported */
import { type JestConfigWithTsJest } from 'ts-jest';

const jestConfig: JestConfigWithTsJest = {
  // [...]
  preset: 'ts-jest/presets/default-esm', // or other ESM presets
  moduleNameMapper: {
    '^(\\.{1,2}/.*)\\.js$': '$1',
  },
  transform: {
    // '^.+\\.[tj]sx?$' to process js/ts with `ts-jest`
    // '^.+\\.m?[tj]sx?$' to process js/ts/mjs/mts with `ts-jest`
    '^.+\\.tsx?$': [
      'ts-jest',
      {
        useESM: true,
      },
    ],
  },
  setupFiles: ['dotenv/config'], // https://stackoverflow.com/a/66765765/ and https://stackoverflow.com/a/70665834/
};

export default jestConfig;

'''
'''--- backend/package.json ---
{
  "name": "near-transactions-accounting-report",
  "version": "0.1.0",
  "main": "src/index",
  "type": "module",
  "scripts": {
    "start": "node -r dotenv/config --loader ts-node/esm src/index.ts dotenv_config_path=.env.generic",
    "dev": "nodemon -r dotenv/config --esm src/index.ts dotenv_config_path=.env.development.local",
    "test": "DOTENV_CONFIG_PATH=.env.test jest"
  },
  "dependencies": {
    "@types/sqlite3": "^3.1.8",
    "cors": "^2.8.5",
    "dayjs": "^1.11.5",
    "decimal.js": "^10.3.1",
    "dotenv": "^16.0.0",
    "express": "^4.17.3",
    "mongoose": "^6.4.6",
    "near-api-js": "^0.44.2",
    "node-cron": "^3.0.0",
    "pg": "^8.7.3",
    "sqlite3": "^5.1.1",
    "uuid": "^8.3.2"
  },
  "devDependencies": {
    "@nearfoundation/near-prettier-config": "^1.0.1",
    "@shelf/jest-mongodb": "^4.1.0",
    "@types/express": "^4.17.14",
    "@types/jest": "^29.0.3",
    "@types/pg": "^8.6.5",
    "csvjson-csv2json": "^5.0.6",
    "csvjson-json2csv": "^1.0.3",
    "eslint-config-near": "^1.0.3",
    "jest": "^29.0.3",
    "jest-environment-node": "^29.0.3",
    "nodemon": "^2.0.19",
    "prettier": "^2.7.1",
    "ts-jest": "^29.0.2",
    "ts-node": "^10.9.1",
    "typescript": "^4.8.2"
  },
  "prettier": "@nearfoundation/near-prettier-config",
  "engines": {
    "node": ">=18.0.0 <19.0.0"
  }
}

'''
'''--- backend/src/helpers/TxTypes/2FA - Remove 2FA.sql ---
SELECT b.block_timestamp,
       r.predecessor_account_id from_account,
       b.block_height,
       convert_from(decode(ra.args ->> 'args_base64', 'base64'), 'UTF8') args_base64,
       r.originated_from_transaction_hash transaction_hash,
       ra.args ->>'deposit' amount_transferred,
       'NEAR' currency_transferred,
       r.receiver_account_id receiver_owner_account
FROM receipts r
    INNER JOIN execution_outcomes e ON e.receipt_id = r.receipt_id
    INNER JOIN blocks b ON b.block_hash = r.included_in_block_hash
    INNER JOIN action_receipt_actions ra ON ra.receipt_id = r.receipt_id
WHERE r.predecessor_account_id = $1
  AND r.receiver_account_id = r.predecessor_account_id
  AND e.status = 'SUCCESS_RECEIPT_ID'
  AND ra.action_kind = 'FUNCTION_CALL'
  AND ra.args ->> 'args_json'::text IS NOT NULL
  AND ra.args ->> 'method_name'::text = 'confirm'
  AND (ra.args -> 'args_json'::text) ->> 'request_id'::text ~ '^[0-9]+$'
  AND (SELECT count(*) FROM jsonb_object_keys(COALESCE(ra.args -> 'args_json'::text, '{}')::jsonb)) = 1
  AND EXISTS(
    SELECT 1
    FROM receipts r2
    INNER JOIN execution_outcomes e2 ON e2.receipt_id = r2.receipt_id
    INNER JOIN action_receipt_actions ra2 ON ra2.receipt_id = r2.receipt_id
    WHERE r2.originated_from_transaction_hash = r.originated_from_transaction_hash
  AND e2.status = 'SUCCESS_VALUE'
  AND ra2.receipt_predecessor_account_id = r.predecessor_account_id
  AND ra2.receipt_receiver_account_id = r.receiver_account_id
  AND ra2.action_kind = 'ADD_KEY'
  AND ((ra2.args -> 'access_key'::text) -> 'permission'::text) ->> 'permission_kind'::text = 'FULL_ACCESS'
    )
  AND EXISTS(
    SELECT 1
    FROM receipts r3
    INNER JOIN execution_outcomes e3 ON e3.receipt_id = r3.receipt_id
    INNER JOIN action_receipt_actions ra3 ON ra3.receipt_id = r3.receipt_id
    WHERE r3.originated_from_transaction_hash = r.originated_from_transaction_hash
  AND e3.status = 'SUCCESS_VALUE'
  AND ra3.receipt_predecessor_account_id = r.predecessor_account_id
  AND ra3.receipt_receiver_account_id = r.receiver_account_id
  AND ra3.action_kind = 'DELETE_KEY'
    )
  AND EXISTS(
    SELECT 1
    FROM receipts r4
    INNER JOIN execution_outcomes e4 ON e4.receipt_id = r4.receipt_id
    INNER JOIN action_receipt_actions ra4 ON ra4.receipt_id = r4.receipt_id
    WHERE r4.originated_from_transaction_hash = r.originated_from_transaction_hash
  AND e4.status = 'SUCCESS_VALUE'
  AND ra4.receipt_predecessor_account_id = r.predecessor_account_id
  AND ra4.receipt_receiver_account_id = r.receiver_account_id
  AND ra4.action_kind = 'DEPLOY_CONTRACT'
    )
  AND b.block_timestamp > $2
ORDER BY b.block_timestamp LIMIT $3

'''
'''--- backend/src/helpers/TxTypes/2FA - Set up 2FA.sql ---
SELECT b.block_timestamp,
       r.predecessor_account_id from_account,
       b.block_height,
       convert_from(decode(ra.args ->> 'args_base64', 'base64'), 'UTF8') args_base64,
       r.originated_from_transaction_hash transaction_hash,
       ra.args ->>'deposit' amount_transferred,
       'NEAR' currency_transferred,
       r.receiver_account_id receiver_owner_account
FROM receipts r
    INNER JOIN execution_outcomes e ON e.receipt_id = r.receipt_id
    INNER JOIN blocks b ON b.block_hash = r.included_in_block_hash
    INNER JOIN action_receipt_actions ra ON ra.receipt_id = r.receipt_id
WHERE r.predecessor_account_id = $1
  AND r.receiver_account_id = r.predecessor_account_id
  AND e.status = 'SUCCESS_VALUE'
  AND ra.action_kind = 'FUNCTION_CALL'
  AND ra.args ->> 'args_json'::text IS NOT NULL
  AND ra.args ->> 'method_name'::text = 'new'
  AND (ra.args -> 'args_json'::text) ->> 'num_confirmations'::text = '2'
  AND (SELECT count(*) FROM jsonb_object_keys(COALESCE(ra.args::json->'args_json', '{}')::jsonb)) = 1
  AND EXISTS(
    SELECT 1
    FROM receipts r2
    INNER JOIN action_receipt_actions ra2 ON ra2.receipt_id = r2.receipt_id
    WHERE r2.receipt_id = r.receipt_id
  AND ra2.action_kind = 'ADD_KEY'
  AND COALESCE((((ra2.args::json->'access_key')::json->'permission')::json->'permission_details')::json->>'receiver_id', '') = r.predecessor_account_id
  AND COALESCE((((ra2.args::json->'access_key')::json->'permission')::json->'permission_details')::json->>'method_names', '') = '["confirm"]'
    )
  AND EXISTS(
    SELECT 1
    FROM receipts r3
    INNER JOIN action_receipt_actions ra3 ON ra3.receipt_id = r3.receipt_id
    WHERE r3.receipt_id = r.receipt_id
  AND ra3.action_kind = 'DEPLOY_CONTRACT'
    )
  AND b.block_timestamp > $2
ORDER BY b.block_timestamp LIMIT $3

'''
'''--- backend/src/helpers/TxTypes/DAOs - Add proposal to DAO.sql ---
SELECT b.block_timestamp,
       r.predecessor_account_id from_account,
       b.block_height,
       convert_from(decode(ra.args ->> 'args_base64', 'base64'), 'UTF8') args_base64,
       r.originated_from_transaction_hash transaction_hash,
       ra.args ->> 'deposit' amount_transferred,
      'NEAR' currency_transferred,
      r.receiver_account_id receiver_owner_account
FROM receipts r
    INNER JOIN execution_outcomes e ON e.receipt_id = r.receipt_id
    INNER JOIN blocks b ON b.block_hash = r.included_in_block_hash
    INNER JOIN action_receipt_actions ra ON ra.receipt_id = r.receipt_id
WHERE r.receiver_account_id LIKE '%.sputnik-dao.near'
  AND r.predecessor_account_id = $1
  AND e.status = 'SUCCESS_VALUE'
  AND ra.action_kind = 'FUNCTION_CALL'
  AND ra.args ->> 'args_json'::text IS NOT NULL
  AND ra.args ->> 'method_name'::text = 'add_proposal'
  AND b.block_timestamp > $2
ORDER BY b.block_timestamp LIMIT $3

'''
'''--- backend/src/helpers/TxTypes/DAOs - Approve DAO proposal.sql ---
SELECT b.block_timestamp,
       r.predecessor_account_id from_account,
       b.block_height,
       convert_from(decode(ra.args ->> 'args_base64', 'base64'), 'UTF8') args_base64,
       r.originated_from_transaction_hash transaction_hash,
       ra.args ->> 'deposit' amount_transferred,
      'NEAR' currency_transferred,
      r.receiver_account_id receiver_owner_account
FROM receipts r
    INNER JOIN execution_outcomes e ON e.receipt_id = r.receipt_id
    INNER JOIN blocks b ON b.block_hash = r.included_in_block_hash
    INNER JOIN action_receipt_actions ra ON ra.receipt_id = r.receipt_id
WHERE r.receiver_account_id LIKE '%.sputnik-dao.near'
  AND r.predecessor_account_id = $1
  AND (e.status = 'SUCCESS_RECEIPT_ID'
  AND NOT EXISTS(
    SELECT 1
    FROM receipts r2
    INNER JOIN execution_outcomes e2 ON e2.receipt_id = r2.receipt_id
    WHERE r2.originated_from_transaction_hash = r.originated_from_transaction_hash
  AND e2.status <> 'SUCCESS_VALUE'
  AND r2.receipt_id <> r.receipt_id
    )
   OR e.status = 'SUCCESS_VALUE')
  AND ra.action_kind = 'FUNCTION_CALL'
  AND ra.args ->> 'args_json'::text IS NOT NULL
  AND ra.args ->> 'method_name'::text = 'act_proposal'
  AND (ra.args -> 'args_json'::text) ->> 'action'::text = 'VoteApprove'
  AND b.block_timestamp > $2
ORDER BY b.block_timestamp LIMIT $3

'''
'''--- backend/src/helpers/TxTypes/DAOs - Create DAO.sql ---
SELECT b.block_timestamp,
       r.predecessor_account_id from_account,
       b.block_height,
       convert_from(decode(ra.args ->> 'args_base64', 'base64'), 'UTF8') args_base64,
       r.originated_from_transaction_hash transaction_hash,
       ra.args ->>'deposit' amount_transferred,
      'NEAR' currency_transferred,
      r.receiver_account_id receiver_owner_account
FROM receipts r
    INNER JOIN execution_outcomes e ON e.receipt_id = r.receipt_id
    INNER JOIN blocks b ON b.block_hash = r.included_in_block_hash
    INNER JOIN action_receipt_actions ra ON ra.receipt_id = r.receipt_id
WHERE r.receiver_account_id = 'sputnik-dao.near'
  AND r.predecessor_account_id = $1
  AND e.status = 'SUCCESS_RECEIPT_ID'
  AND ra.action_kind = 'FUNCTION_CALL'
  AND ra.args ->> 'args_json'::text IS NOT NULL
  AND ra.args ->> 'method_name'::text = 'create'
  AND b.block_timestamp > $2
  AND EXISTS(
    SELECT 1
    FROM receipts r2
    INNER JOIN execution_outcomes e2 ON e2.receipt_id = r2.receipt_id
    INNER JOIN action_receipt_actions ra2 ON ra2.receipt_id = r2.receipt_id
    WHERE r2.originated_from_transaction_hash = r.originated_from_transaction_hash
  AND e2.status = 'SUCCESS_VALUE'
  AND r2.predecessor_account_id = r.receiver_account_id
  AND r2.receiver_account_id = r.receiver_account_id
  AND ra2.action_kind = 'FUNCTION_CALL'
  AND COALESCE(ra2.args::json->>'method_name', '') = 'on_create'
    )
ORDER BY b.block_timestamp LIMIT $3

'''
'''--- backend/src/helpers/TxTypes/DAOs - Receive funds from DAO.sql ---
SELECT b.block_timestamp,
       r.predecessor_account_id from_account,
       b.block_height,
       convert_from(decode(ra.args ->> 'args_base64', 'base64'), 'UTF8') args_base64,
       r.originated_from_transaction_hash transaction_hash,
       ra.args ->> 'deposit' amount_transferred,
      'NEAR' currency_transferred,
      r.receiver_account_id receiver_owner_account
FROM receipts r
    INNER JOIN execution_outcomes e ON e.receipt_id = r.receipt_id
    INNER JOIN blocks b ON b.block_hash = r.included_in_block_hash
    INNER JOIN action_receipt_actions ra ON ra.receipt_id = r.receipt_id
WHERE r.receiver_account_id LIKE '%.sputnik-dao.near'
  AND e.status = 'SUCCESS_RECEIPT_ID'
  AND EXISTS(
    SELECT 1
    FROM receipts r2
    INNER JOIN execution_outcomes e2 ON e2.receipt_id = r2.receipt_id
    INNER JOIN action_receipt_actions ra2 ON ra2.receipt_id = r2.receipt_id
    WHERE r2.originated_from_transaction_hash = r.originated_from_transaction_hash
  AND e2.status = 'SUCCESS_VALUE'
  AND ra2.action_kind = 'TRANSFER'
  AND r2.receiver_account_id = $1
  AND r2.predecessor_account_id = r.receiver_account_id
    )
  AND ra.action_kind = 'FUNCTION_CALL'
  AND ra.args ->> 'args_json'::text IS NOT NULL
  AND ra.args ->> 'method_name'::text = 'act_proposal'
  AND (ra.args -> 'args_json'::text) ->> 'action'::text = 'VoteApprove'
  AND b.block_timestamp > $2
ORDER BY b.block_timestamp LIMIT $3

'''
'''--- backend/src/helpers/TxTypes/DAOs - Send funds to DAO.sql ---
SELECT b.block_timestamp,
       r.predecessor_account_id from_account,
       b.block_height,
       a.transaction_hash,
       a.args ->>'deposit' amount_transferred,
       'NEAR' currency_transferred,
       r.receiver_account_id receiver_owner_account
FROM receipts r
    INNER JOIN execution_outcomes e ON e.receipt_id = r.receipt_id
    INNER JOIN blocks b ON b.block_hash = r.included_in_block_hash
    INNER JOIN transaction_actions a ON a.transaction_hash = r.originated_from_transaction_hash
WHERE r.predecessor_account_id = $1
  AND r.receiver_account_id LIKE '%.sputnik-dao.near'
  AND e.status = 'SUCCESS_VALUE'
  AND a.action_kind = 'TRANSFER'
  AND b.block_timestamp > $2
ORDER BY b.block_timestamp LIMIT $3

'''
'''--- backend/src/helpers/TxTypes/DeFi - Activate Farm.sql ---
SELECT b.block_timestamp,
       r.predecessor_account_id from_account,
       b.block_height,
       r.originated_from_transaction_hash transaction_hash,
       ra.args ->>'deposit' amount_transferred,
       convert_from(decode(ra.args ->> 'args_base64', 'base64'), 'UTF8') args_base64,
       'NEAR' currency_transferred,
       r.receiver_account_id receiver_owner_account
FROM receipts r
    INNER JOIN execution_outcomes e ON e.receipt_id = r.receipt_id
    INNER JOIN blocks b ON b.block_hash = r.included_in_block_hash
    INNER JOIN action_receipt_actions ra ON ra.receipt_id = r.receipt_id
WHERE r.predecessor_account_id = $1
  AND r.receiver_account_id = 'v2.ref-farming.near'
  AND e.status = 'SUCCESS_VALUE'
  AND ra.action_kind = 'FUNCTION_CALL'
  AND ra.args ->> 'args_json'::text IS NOT NULL
  AND ra.args ->> 'method_name'::text = 'storage_deposit'
  AND (ra.args -> 'args_json'::text) ->> 'account_id'::text = r.predecessor_account_id
  AND b.block_timestamp > $2
  ORDER BY b.block_timestamp LIMIT $3

'''
'''--- backend/src/helpers/TxTypes/DeFi - Add single-stake Ref.sql ---
SELECT b.block_timestamp,
       r.predecessor_account_id from_account,
       b.block_height,
       r.originated_from_transaction_hash transaction_hash,
       ra.args ->>'deposit' amount_transferred,
       convert_from(decode(ra.args ->> 'args_base64', 'base64'), 'UTF8') args_base64,
       'NEAR' currency_transferred,
       r.receiver_account_id receiver_owner_account
FROM receipts r
    INNER JOIN execution_outcomes e ON e.receipt_id = r.receipt_id
    INNER JOIN blocks b ON b.block_hash = r.included_in_block_hash
    INNER JOIN action_receipt_actions ra ON ra.receipt_id = r.receipt_id
WHERE r.predecessor_account_id = $1
  AND r.receiver_account_id = 'xtoken.ref-finance.near'
  AND e.status = 'SUCCESS_VALUE'
  AND ra.action_kind = 'FUNCTION_CALL'
  AND ra.args ->> 'args_json'::text IS NOT NULL
  AND ra.args ->> 'method_name'::text = 'storage_deposit'
  AND (ra.args -> 'args_json'::text) ->> 'account_id'::text = r.predecessor_account_id
  AND b.block_timestamp > $2
ORDER BY b.block_timestamp LIMIT $3

'''
'''--- backend/src/helpers/TxTypes/DeFi - Add to liquidity pool.sql ---
SELECT b.block_timestamp,
       r.predecessor_account_id from_account,
       b.block_height,
       convert_from(decode(ra.args ->> 'args_base64', 'base64'), 'UTF8') args_base64,
       r.originated_from_transaction_hash transaction_hash,
       ra.args ->'args_json'->'amounts'->>0 amount_transferred,
       ra.args ->'args_json'->'amounts'->>1 amount_transferred2,
       'wNEAR' currency_transferred,
       ra.args ->'args_json'->>'pool_id' pool_id,
       r.receiver_account_id receiver_owner_account
FROM receipts r
    INNER JOIN execution_outcomes e ON e.receipt_id = r.receipt_id
    INNER JOIN blocks b ON b.block_hash = r.included_in_block_hash
    INNER JOIN action_receipt_actions ra ON ra.receipt_id = r.receipt_id
WHERE r.predecessor_account_id = $1
  AND r.receiver_account_id = 'v2.ref-finance.near'
  AND e.status = 'SUCCESS_VALUE'
  AND ra.action_kind = 'FUNCTION_CALL'
  AND ra.args ->> 'args_json'::text IS NOT NULL
  AND ra.args ->> 'method_name'::text = 'add_liquidity'
  AND (SELECT count(*) FROM jsonb_object_keys(COALESCE(ra.args::json->'args_json', '{}')::jsonb)) IN (2, 3)
  AND COALESCE((ra.args::json->'args_json')::json->>'pool_id', '') ~ '^[0-9]+$'
  AND json_array_length(((ra.args::json->'args_json')::json->'amounts')) = 2
  AND b.block_timestamp > $2
ORDER BY b.block_timestamp LIMIT $3

'''
'''--- backend/src/helpers/TxTypes/DeFi - Claim reward from farm.sql ---
SELECT b.block_timestamp,
       r.predecessor_account_id from_account,
       b.block_height,
       r.originated_from_transaction_hash transaction_hash,
       ra.args ->>'deposit' amount_transferred,
       convert_from(decode(ra.args ->> 'args_base64', 'base64'), 'UTF8') args_base64,
       'NEAR' currency_transferred,
       r.receiver_account_id receiver_owner_account
FROM receipts r
    INNER JOIN execution_outcomes e ON e.receipt_id = r.receipt_id
    INNER JOIN blocks b ON b.block_hash = r.included_in_block_hash
    INNER JOIN action_receipt_actions ra ON ra.receipt_id = r.receipt_id
WHERE r.predecessor_account_id = $1
  AND r.receiver_account_id = 'v2.ref-farming.near'
  AND e.status = 'SUCCESS_VALUE'
  AND ra.action_kind = 'FUNCTION_CALL'
  AND ra.args ->> 'args_json'::text IS NOT NULL
  AND ra.args ->> 'method_name'::text = 'claim_reward_by_farm'
  AND COALESCE((ra.args -> 'args_json'::text) ->> 'farm_id'::text, '') <> ''
  AND (SELECT count(*) FROM jsonb_object_keys(COALESCE(ra.args::json->'args_json', '{}')::jsonb)) = 1
  AND b.block_timestamp > $2
  ORDER BY b.block_timestamp LIMIT $3

'''
'''--- backend/src/helpers/TxTypes/DeFi - Deactivate Farm.sql ---
SELECT b.block_timestamp,
       r.predecessor_account_id from_account,
       b.block_height,
       r.originated_from_transaction_hash transaction_hash,
       ra.args ->'args_json' ->> 'amount' amount_transferred,
       convert_from(decode(ra.args ->> 'args_base64', 'base64'), 'UTF8') args_base64,
       'NEAR' currency_transferred,
       r.receiver_account_id receiver_owner_account
FROM receipts r
         INNER JOIN execution_outcomes e ON e.receipt_id = r.receipt_id
         INNER JOIN blocks b ON b.block_hash = r.included_in_block_hash
         INNER JOIN action_receipt_actions ra ON ra.receipt_id = r.receipt_id
WHERE r.predecessor_account_id = $1
  AND r.receiver_account_id = 'v2.ref-farming.near'
  AND e.status = 'SUCCESS_VALUE'
  AND ra.action_kind = 'FUNCTION_CALL'
  AND ra.args ->> 'args_json'::text IS NOT NULL
  AND ra.args ->> 'method_name'::text = 'withdraw_seed'
  AND (ra.args -> 'args_json'::text) ->> 'seed_id'::text LIKE 'v2.ref-finance.near@%'
  AND (ra.args -> 'args_json'::text) ->> 'amount'::text ~ '^[0-9]+$'
  AND (SELECT count(*) FROM jsonb_object_keys(COALESCE(ra.args::json->'args_json', '{}')::jsonb)) IN (2, 3)
  AND b.block_timestamp > $2
AND EXISTS(
    SELECT 1
    FROM receipts r2
    INNER JOIN execution_outcomes e2 ON e2.receipt_id = r2.receipt_id
    INNER JOIN action_receipt_actions ra2 ON ra2.receipt_id = r2.receipt_id
    WHERE r2.originated_from_transaction_hash = r.originated_from_transaction_hash
      AND e2.status = 'SUCCESS_VALUE'
      AND r2.predecessor_account_id = r.receiver_account_id
      AND r2.receiver_account_id = 'v2.ref-finance.near'
      AND ra2.action_kind = 'FUNCTION_CALL'
      AND COALESCE(ra2.args::json->>'method_name', '') = 'mft_transfer'
      AND COALESCE((ra2.args::json->'args_json')::json->>'receiver_id', '') = r.predecessor_account_id
)
AND EXISTS(
    SELECT 1
    FROM receipts r3
    INNER JOIN execution_outcomes e3 ON e3.receipt_id = r3.receipt_id
    INNER JOIN action_receipt_actions ra3 ON ra3.receipt_id = r3.receipt_id
    WHERE r3.originated_from_transaction_hash = r.originated_from_transaction_hash
      AND e3.status = 'SUCCESS_VALUE'
      AND r3.predecessor_account_id = r.receiver_account_id
      AND r3.receiver_account_id = r.receiver_account_id
      AND ra3.action_kind = 'FUNCTION_CALL'
      AND COALESCE(ra3.args::json->>'method_name', '') = 'callback_post_withdraw_mft_seed'
      AND COALESCE((ra3.args::json->'args_json')::json->>'seed_id', '') = COALESCE((ra.args::json->'args_json')::json->>'seed_id', '')
      AND COALESCE((ra3.args::json->'args_json')::json->>'sender_id', '') = r.predecessor_account_id
)
ORDER BY b.block_timestamp LIMIT $3

'''
'''--- backend/src/helpers/TxTypes/DeFi - Deposit.sql ---
SELECT b.block_timestamp,
       r.predecessor_account_id from_account,
       b.block_height,
       convert_from(decode(ra.args ->> 'args_base64', 'base64'), 'UTF8') args_base64,
       r.originated_from_transaction_hash transaction_hash,
       ra.args ->'args_json'->>'amount' amount_transferred,
       ra.args ->'args_json'->>'receiver_id' receiver_owner_account,
       r.receiver_account_id get_currency_by_contract
FROM receipts r
    INNER JOIN execution_outcomes e ON e.receipt_id = r.receipt_id
    INNER JOIN blocks b ON b.block_hash = r.included_in_block_hash
    INNER JOIN action_receipt_actions ra ON ra.receipt_id = r.receipt_id
WHERE r.predecessor_account_id = $1
  AND r.receiver_account_id <> 'wrap.near'
  AND e.status = 'SUCCESS_RECEIPT_ID'
  AND ra.action_kind = 'FUNCTION_CALL'
  AND ra.args ->> 'args_json'::text IS NOT NULL
  AND ra.args ->> 'method_name'::text = 'ft_transfer_call'
  AND (SELECT count(*) FROM jsonb_object_keys(COALESCE(ra.args -> 'args_json'::text, '{}')::jsonb)) IN (3, 4)
  AND (ra.args -> 'args_json'::text) ->> 'amount'::text ~ '^[0-9]+$'
  AND (ra.args -> 'args_json'::text) ->> 'receiver_id'::text = 'v2.ref-finance.near'
  AND COALESCE((ra.args -> 'args_json'::text) ->> 'msg'::text, '') = ''
  AND b.block_timestamp > $2
  AND EXISTS(
    SELECT 1
    FROM receipts r2
    INNER JOIN execution_outcomes e2 ON e2.receipt_id = r2.receipt_id
    INNER JOIN action_receipt_actions ra2 ON ra2.receipt_id = r2.receipt_id
    WHERE r2.originated_from_transaction_hash = r.originated_from_transaction_hash
  AND e2.status = 'SUCCESS_VALUE'
  AND r2.predecessor_account_id = r.receiver_account_id
  AND r2.receiver_account_id = COALESCE((ra.args::json->'args_json')::json->>'receiver_id', '')
  AND ra2.action_kind = 'FUNCTION_CALL'
  AND ra2.args ->> 'args_json'::text IS NOT NULL
  AND ra2.args ->> 'method_name'::text = 'ft_on_transfer'
    )
  AND EXISTS(
    SELECT 1
    FROM receipts r3
    INNER JOIN execution_outcomes e3 ON e3.receipt_id = r3.receipt_id
    INNER JOIN action_receipt_actions ra3 ON ra3.receipt_id = r3.receipt_id
    WHERE r3.originated_from_transaction_hash = r.originated_from_transaction_hash
  AND e3.status = 'SUCCESS_VALUE'
  AND r3.predecessor_account_id = r.receiver_account_id
  AND r3.receiver_account_id = r.receiver_account_id
  AND ra3.action_kind = 'FUNCTION_CALL'
  AND ra3.args ->> 'args_json'::text IS NOT NULL
  AND ra3.args ->> 'method_name'::text = 'ft_resolve_transfer'
    )
ORDER BY b.block_timestamp LIMIT $3

'''
'''--- backend/src/helpers/TxTypes/DeFi - Regular 2-pair pool Ref Swap.sql ---
SELECT b.block_timestamp,
       r.predecessor_account_id from_account,
       b.block_height,
       convert_from(decode(ra.args ->> 'args_base64', 'base64'), 'UTF8') args_base64,
       r.originated_from_transaction_hash transaction_hash,
       ra.args ->'args_json'->>'amount' amount_transferred,
      'wNEAR' currency_transferred,
      ra.args ->'args_json'->>'receiver_id' receiver_owner_account
FROM receipts r
    INNER JOIN execution_outcomes e ON e.receipt_id = r.receipt_id
    INNER JOIN blocks b ON b.block_hash = r.included_in_block_hash
    INNER JOIN action_receipt_actions ra ON ra.receipt_id = r.receipt_id
WHERE r.predecessor_account_id = $1
  AND r.receiver_account_id = 'wrap.near'
  AND e.status = 'SUCCESS_RECEIPT_ID'
  AND ra.action_kind = 'FUNCTION_CALL'
  AND ra.args ->> 'args_json'::text IS NOT NULL
  AND ra.args ->> 'method_name'::text = 'ft_transfer_call'
  AND (SELECT count(*) FROM jsonb_object_keys(COALESCE(ra.args -> 'args_json'::text, '{}')::jsonb)) IN (3, 4)
  AND (ra.args -> 'args_json'::text) ->> 'amount'::text ~ '^[0-9]+$'
  AND (ra.args -> 'args_json'::text) ->> 'receiver_id'::text = 'v2.ref-finance.near'
  AND ((ra.args::json->'args_json')::json->'msg') IS NOT NULL
  AND b.block_timestamp > $2
  AND EXISTS(
    SELECT 1
    FROM receipts r2
    INNER JOIN execution_outcomes e2 ON e2.receipt_id = r2.receipt_id
    INNER JOIN action_receipt_actions ra2 ON ra2.receipt_id = r2.receipt_id
    WHERE r2.originated_from_transaction_hash = r.originated_from_transaction_hash
  AND e2.status = 'SUCCESS_VALUE'
  AND r2.predecessor_account_id = r.receiver_account_id
  AND r2.receiver_account_id = COALESCE((ra.args::json->'args_json')::json->>'receiver_id', '')
  AND ra2.action_kind = 'FUNCTION_CALL'
  AND ra2.args ->> 'args_json'::text IS NOT NULL
  AND ra2.args ->> 'method_name'::text = 'ft_on_transfer'
    )
  AND EXISTS(
    SELECT 1
    FROM receipts r3
    INNER JOIN execution_outcomes e3 ON e3.receipt_id = r3.receipt_id
    INNER JOIN action_receipt_actions ra3 ON ra3.receipt_id = r3.receipt_id
    WHERE r3.originated_from_transaction_hash = r.originated_from_transaction_hash
  AND e3.status = 'SUCCESS_VALUE'
  AND r3.predecessor_account_id = r.receiver_account_id
  AND r3.receiver_account_id = r.receiver_account_id
  AND ra3.action_kind = 'FUNCTION_CALL'
  AND ra3.args ->> 'args_json'::text IS NOT NULL
  AND ra3.args ->> 'method_name'::text = 'ft_resolve_transfer'
    )
  AND EXISTS(
    SELECT 1
    FROM receipts r4
    INNER JOIN execution_outcomes e4 ON e4.receipt_id = r4.receipt_id
    INNER JOIN action_receipt_actions ra4 ON ra4.receipt_id = r4.receipt_id
    WHERE r4.originated_from_transaction_hash = r.originated_from_transaction_hash
  AND e4.status = 'SUCCESS_VALUE'
  AND r4.predecessor_account_id = COALESCE((ra.args::json->'args_json')::json->>'receiver_id', '')
  AND r4.receiver_account_id = (regexp_match(COALESCE((ra.args::json->'args_json')::json->>'msg', ''), '\\"token_out\\":\\"(.+?)\\"', ''))[1]
  AND ra4.action_kind = 'FUNCTION_CALL'
  AND ra4.args ->> 'args_json'::text IS NOT NULL
  AND ra4.args ->> 'method_name'::text = 'ft_transfer'
    )
  AND EXISTS(
    SELECT 1
    FROM receipts r5
    INNER JOIN execution_outcomes e5 ON e5.receipt_id = r5.receipt_id
    INNER JOIN action_receipt_actions ra5 ON ra5.receipt_id = r5.receipt_id
    WHERE r5.originated_from_transaction_hash = r.originated_from_transaction_hash
  AND e5.status = 'SUCCESS_VALUE'
  AND r5.predecessor_account_id = COALESCE((ra.args::json->'args_json')::json->>'receiver_id', '')
  AND r5.receiver_account_id = COALESCE((ra.args::json->'args_json')::json->>'receiver_id', '')
  AND ra5.action_kind = 'FUNCTION_CALL'
  AND ra5.args ->> 'args_json'::text IS NOT NULL
  AND ra5.args ->> 'method_name'::text = 'exchange_callback_post_withdraw'
    )
ORDER BY b.block_timestamp LIMIT $3

'''
'''--- backend/src/helpers/TxTypes/DeFi - Remove from liquidity pool.sql ---
-- Parameters:
--   Account: newafro.near,
--   Date from: 2020-10-20 12:46:00
--   Date to: 2022-05-07 21:16:00
SELECT b.block_timestamp,
       r.predecessor_account_id from_account,
       b.block_height,
       convert_from(decode(ra.args ->> 'args_base64', 'base64'), 'UTF8') args_base64,
       r.originated_from_transaction_hash transaction_hash,
       ra.args ->'args_json'->'min_amounts'->>1 amount_transferred,
    ra.args ->'args_json'->'min_amounts'->>0 amount_transferred2,
    'wNEAR' currency_transferred,
    ra.args ->'args_json'->>'pool_id' pool_id,
    r.receiver_account_id receiver_owner_account
FROM receipts r
    INNER JOIN execution_outcomes e ON e.receipt_id = r.receipt_id
    INNER JOIN blocks b ON b.block_hash = r.included_in_block_hash
    INNER JOIN action_receipt_actions ra ON ra.receipt_id = r.receipt_id
WHERE r.predecessor_account_id = $1
  AND r.receiver_account_id = 'v2.ref-finance.near'
  AND e.status = 'SUCCESS_RECEIPT_ID'
  AND ra.action_kind = 'FUNCTION_CALL'
  AND ra.args ->> 'args_json'::text IS NOT NULL
  AND ra.args ->> 'method_name'::text = 'remove_liquidity'
  AND (SELECT count(*) FROM jsonb_object_keys(COALESCE(ra.args -> 'args_json'::text, '{}')::jsonb)) = 3
  AND (ra.args -> 'args_json'::text) ->> 'pool_id'::text ~ '^[0-9]+$'
  AND (ra.args -> 'args_json'::text) ->> 'shares'::text ~ '^[0-9]+$'
  AND json_array_length(((ra.args::json->'args_json')->'min_amounts'::text)) = 2
  AND b.block_timestamp > $2
  AND (
    SELECT count(*)
    FROM action_receipt_actions ra2
    WHERE ra2.receipt_id = r.receipt_id
  AND ra2.action_kind = 'FUNCTION_CALL'
  AND ra2.args ->> 'args_json'::text IS NOT NULL
  AND ra2.args ->> 'method_name'::text = 'withdraw'
    ) = 2
  AND (
    SELECT count(*)
    FROM receipts r3
    INNER JOIN execution_outcomes e3 ON e3.receipt_id = r3.receipt_id
    INNER JOIN action_receipt_actions ra3 ON ra3.receipt_id = r3.receipt_id
    WHERE r3.originated_from_transaction_hash = r.originated_from_transaction_hash
  AND e3.status = 'SUCCESS_VALUE'
  AND r3.predecessor_account_id = r.receiver_account_id
  AND r3.receiver_account_id IN (SELECT COALESCE((ra5.args::json->'args_json')::json->>'token_id', '') FROM action_receipt_actions ra5 WHERE ra5.receipt_id = r.receipt_id AND ra5.action_kind = 'FUNCTION_CALL' AND ra5.args ->> 'args_json'::text IS NOT NULL AND ra5.args ->> 'method_name'::text = 'withdraw')
  AND ra3.action_kind = 'FUNCTION_CALL'
  AND ra3.args ->> 'args_json'::text IS NOT NULL
  AND ra3.args ->> 'method_name'::text = 'ft_transfer'
  AND (ra3.args -> 'args_json'::text) ->> 'receiver_id'::text = r.predecessor_account_id
    ) = 2
  AND (
    SELECT count(*)
    FROM receipts r4
    INNER JOIN execution_outcomes e4 ON e4.receipt_id = r4.receipt_id
    INNER JOIN action_receipt_actions ra4 ON ra4.receipt_id = r4.receipt_id
    WHERE r4.originated_from_transaction_hash = r.originated_from_transaction_hash
  AND e4.status = 'SUCCESS_VALUE'
  AND r4.predecessor_account_id = r.receiver_account_id
  AND r4.receiver_account_id = r.receiver_account_id
  AND ra4.action_kind = 'FUNCTION_CALL'
  AND ra4.args ->> 'args_json'::text IS NOT NULL
  AND ra4.args ->> 'method_name'::text = 'exchange_callback_post_withdraw'

  AND (ra4.args -> 'args_json'::text) ->> 'sender_id'::text = r.predecessor_account_id
  AND COALESCE((ra4.args -> 'args_json'::text) ->> 'token_id', '') IN (SELECT COALESCE((ra6.args -> 'args_json'::text) ->> 'token_id', '') FROM action_receipt_actions ra6 WHERE ra6.receipt_id = r.receipt_id AND ra6.action_kind = 'FUNCTION_CALL' AND ra6.args ->> 'args_json'::text IS NOT NULL AND ra6.args ->> 'method_name'::text = 'withdraw')
    ) = 2
ORDER BY b.block_timestamp LIMIT $3

'''
'''--- backend/src/helpers/TxTypes/DeFi - Remove single-stake Ref.sql ---
SELECT b.block_timestamp,
       r.predecessor_account_id from_account,
       b.block_height,
       r.originated_from_transaction_hash transaction_hash,
       ra.args ->'args_json' ->> 'amount' amount_transferred,
       convert_from(decode(ra.args ->> 'args_base64', 'base64'), 'UTF8') args_base64,
    'NEAR' currency_transferred,
    r.receiver_account_id receiver_owner_account
FROM receipts r
    INNER JOIN execution_outcomes e ON e.receipt_id = r.receipt_id
    INNER JOIN blocks b ON b.block_hash = r.included_in_block_hash
    INNER JOIN action_receipt_actions ra ON ra.receipt_id = r.receipt_id
WHERE r.predecessor_account_id = $1
  AND r.receiver_account_id = 'xtoken.ref-finance.near'
  AND e.status = 'SUCCESS_RECEIPT_ID'
  AND ra.action_kind = 'FUNCTION_CALL'
  AND ra.args ->> 'args_json'::text IS NOT NULL
  AND ra.args ->> 'method_name'::text = 'unstake'
  AND (ra.args -> 'args_json'::text) ->> 'amount'::text ~ '^[0-9]+$'
  AND (SELECT count(*) FROM jsonb_object_keys(COALESCE(ra.args::json->'args_json', '{}')::jsonb)) IN (1, 2)
  AND b.block_timestamp > $2
  AND EXISTS(
    SELECT 1
    FROM receipts r2
    INNER JOIN execution_outcomes e2 ON e2.receipt_id = r2.receipt_id
    INNER JOIN action_receipt_actions ra2 ON ra2.receipt_id = r2.receipt_id
    WHERE r2.originated_from_transaction_hash = r.originated_from_transaction_hash
  AND e2.status = 'SUCCESS_VALUE'
  AND r2.predecessor_account_id = r.receiver_account_id
  AND r2.receiver_account_id = 'token.v2.ref-finance.near'
  AND ra2.action_kind = 'FUNCTION_CALL'
  AND COALESCE(ra2.args::json->>'method_name', '') = 'ft_transfer'
  AND COALESCE((ra2.args::json->'args_json')::json->>'receiver_id', '') = r.predecessor_account_id
    )
  AND EXISTS(
    SELECT 1
    FROM receipts r3
    INNER JOIN execution_outcomes e3 ON e3.receipt_id = r3.receipt_id
    INNER JOIN action_receipt_actions ra3 ON ra3.receipt_id = r3.receipt_id
    WHERE r3.originated_from_transaction_hash = r.originated_from_transaction_hash
  AND e3.status = 'SUCCESS_VALUE'
  AND r3.predecessor_account_id = r.receiver_account_id
  AND r3.receiver_account_id = r.receiver_account_id
  AND ra3.action_kind = 'FUNCTION_CALL'
  AND COALESCE(ra3.args::json->>'method_name', '') = 'callback_post_unstake'
  AND COALESCE((ra3.args::json->'args_json')::json->>'sender_id', '') = r.predecessor_account_id
    )
ORDER BY b.block_timestamp LIMIT $3

'''
'''--- backend/src/helpers/TxTypes/DeFi - Withdraw reward from farm.sql ---
SELECT b.block_timestamp,
       r.predecessor_account_id from_account,
       b.block_height,
       r.originated_from_transaction_hash transaction_hash,
       ra.args ->>'deposit' amount_transferred,
       convert_from(decode(ra.args ->> 'args_base64', 'base64'), 'UTF8') args_base64,
       'NEAR' currency_transferred,
       r.receiver_account_id receiver_owner_account
FROM receipts r
         INNER JOIN execution_outcomes e ON e.receipt_id = r.receipt_id
         INNER JOIN blocks b ON b.block_hash = r.included_in_block_hash
         INNER JOIN action_receipt_actions ra ON ra.receipt_id = r.receipt_id
WHERE r.predecessor_account_id = $1
  AND r.receiver_account_id = 'v2.ref-farming.near'
  AND e.status = 'SUCCESS_VALUE'
  AND ra.action_kind = 'FUNCTION_CALL'
  AND ra.args ->> 'args_json'::text IS NOT NULL
  AND ra.args ->> 'method_name'::text = 'withdraw_reward'
  AND (ra.args -> 'args_json'::text) ->> 'token_id'::text = 'token.v2.ref-finance.near'
  AND (SELECT count(*) FROM jsonb_object_keys(COALESCE(ra.args::json->'args_json', '{}')::jsonb)) >= 1
  AND b.block_timestamp > $2
  AND EXISTS(
        SELECT 1
        FROM receipts r2
                 INNER JOIN execution_outcomes e2 ON e2.receipt_id = r2.receipt_id
                 INNER JOIN action_receipt_actions ra2 ON ra2.receipt_id = r2.receipt_id
        WHERE r2.originated_from_transaction_hash = r.originated_from_transaction_hash
          AND e2.status = 'SUCCESS_VALUE'
          AND r2.predecessor_account_id = r.receiver_account_id
          AND r2.receiver_account_id = COALESCE((ra.args::json->'args_json')::json->>'token_id', '')
          AND ra2.action_kind = 'FUNCTION_CALL'
          AND COALESCE(ra2.args::json->>'method_name', '') = 'ft_transfer'
          AND COALESCE((ra2.args::json->'args_json')::json->>'receiver_id', '') = r.predecessor_account_id
    )
  AND EXISTS(
        SELECT 1
        FROM receipts r3
                 INNER JOIN execution_outcomes e3 ON e3.receipt_id = r3.receipt_id
                 INNER JOIN action_receipt_actions ra3 ON ra3.receipt_id = r3.receipt_id
        WHERE r3.originated_from_transaction_hash = r.originated_from_transaction_hash
          AND e3.status = 'SUCCESS_VALUE'
          AND r3.predecessor_account_id = r.receiver_account_id
          AND r3.receiver_account_id = r.receiver_account_id
          AND ra3.action_kind = 'FUNCTION_CALL'
          AND COALESCE(ra3.args::json->>'method_name', '') = 'callback_post_withdraw_reward'
          AND COALESCE((ra3.args::json->'args_json')::json->>'token_id', '') = COALESCE((ra.args::json->'args_json')::json->>'token_id', '')
          AND COALESCE((ra3.args::json->'args_json')::json->>'sender_id', '') = r.predecessor_account_id
    )
ORDER BY b.block_timestamp LIMIT $3

'''
'''--- backend/src/helpers/TxTypes/Fungible tokens - Receive token.sql ---

SELECT b.block_timestamp,
       r.predecessor_account_id from_account,
       b.block_height,
       convert_from(decode(ara.args ->> 'args_base64', 'base64'), 'UTF8') args_base64,
       r.originated_from_transaction_hash transaction_hash,
       ara.args ->'args_json'->>'amount' amount_transferred,
       'token' currency_transferred, /* TODO: Show the actual token symbol (determined by the receiver at the top level instead of in the JSON args?)? */
       ara.args->'args_json'->>'receiver_id' receiver_owner_account
FROM receipts r
    INNER JOIN execution_outcomes eo ON eo.receipt_id = r.receipt_id
    INNER JOIN blocks b ON b.block_hash = r.included_in_block_hash
    INNER JOIN action_receipt_actions ara ON ara.receipt_id = r.receipt_id
WHERE 
  eo.status IN ('SUCCESS_RECEIPT_ID', 'SUCCESS_VALUE')
  AND ara.action_kind = 'FUNCTION_CALL'
  AND COALESCE(ara.args::json->>'method_name', '') = 'ft_transfer'
  AND ara.args -> 'args_json' ->> 'receiver_id' = $1
  AND b.block_timestamp > $2

ORDER BY b.block_timestamp
LIMIT $3

'''
'''--- backend/src/helpers/TxTypes/Fungible tokens - Send token.sql ---
SELECT b.block_timestamp,
       r.predecessor_account_id from_account,
       b.block_height,
       convert_from(decode(ra.args ->> 'args_base64', 'base64'), 'UTF8') args_base64,
       r.originated_from_transaction_hash transaction_hash,
       ra.args ->'args_json'->>'amount' amount_transferred,
       'NEAR' currency_transferred,
       r.receiver_account_id get_currency_by_contract,
       ra.args -> 'args_json' ->> 'receiver_id' receiver_owner_account
FROM receipts r
    INNER JOIN execution_outcomes e ON e.receipt_id = r.receipt_id
    INNER JOIN blocks b ON b.block_hash = r.included_in_block_hash
    INNER JOIN action_receipt_actions ra ON ra.receipt_id = r.receipt_id
WHERE r.predecessor_account_id = $1
  AND e.status IN ('SUCCESS_RECEIPT_ID', 'SUCCESS_VALUE')
  AND ra.action_kind = 'FUNCTION_CALL'
  AND ra.args ->> 'args_json'::text IS NOT NULL
  AND ra.args ->> 'method_name'::text = 'ft_transfer'
  AND (SELECT count(*) FROM jsonb_object_keys(COALESCE(ra.args -> 'args_json'::text, '{}')::jsonb)) IN (2, 3)
  AND (ra.args -> 'args_json'::text) ->> 'amount'::text ~ '^[0-9]+$'
  AND COALESCE((ra.args -> 'args_json'::text) ->> 'receiver_id'::text, '') <> ''
  AND b.block_timestamp > $2
UNION
SELECT b.block_timestamp,
       r.predecessor_account_id from_account,
       b.block_height,
       convert_from(decode(ra.args ->> 'args_base64', 'base64'), 'UTF8') args_base64,
       r.originated_from_transaction_hash transaction_hash,
       ra.args ->'args_json'->>'amount' amount_transferred,
       'NEAR' currency_transferred,
       r.receiver_account_id get_currency_by_contract,
       ra.args -> 'args_json' ->> 'receiver_id' receiver_owner_account
FROM receipts r
    INNER JOIN execution_outcomes e ON e.receipt_id = r.receipt_id
    INNER JOIN blocks b ON b.block_hash = r.included_in_block_hash
    INNER JOIN action_receipt_actions ra ON ra.receipt_id = r.receipt_id
WHERE r.predecessor_account_id = $1
  AND e.status = 'SUCCESS_RECEIPT_ID'
  AND ra.action_kind = 'FUNCTION_CALL'
  AND ra.args ->> 'args_json'::text IS NOT NULL
  AND ra.args ->> 'method_name'::text = 'ft_transfer_call'
  AND (SELECT count(*) FROM jsonb_object_keys(COALESCE(ra.args -> 'args_json'::text, '{}')::jsonb)) IN (3, 4)
  AND (ra.args -> 'args_json'::text) ->> 'amount'::text ~ '^[0-9]+$'
  AND (ra.args -> 'args_json'::text) ->> 'receiver_id'::text NOT IN ('', 'v2.ref-finance.near', 'aurora')
  AND (ra.args -> 'args_json'::text) ->> 'msg'::text IS NOT NULL
  AND b.block_timestamp > $2
  AND EXISTS(
    SELECT 1
    FROM receipts r2
    INNER JOIN execution_outcomes e2 ON e2.receipt_id = r2.receipt_id
    INNER JOIN action_receipt_actions ra2 ON ra2.receipt_id = r2.receipt_id
    WHERE r2.originated_from_transaction_hash = r.originated_from_transaction_hash
  AND e2.status = 'SUCCESS_VALUE'
  AND r2.predecessor_account_id = r.receiver_account_id
  AND r2.receiver_account_id = COALESCE((ra.args::json->'args_json')::json->>'receiver_id', '')
  AND ra2.action_kind = 'FUNCTION_CALL'
  AND ra2.args ->> 'args_json'::text IS NOT NULL
  AND ra2.args ->> 'method_name'::text = 'ft_on_transfer'
    )
  AND EXISTS(
    SELECT 1
    FROM receipts r3
    INNER JOIN execution_outcomes e3 ON e3.receipt_id = r3.receipt_id
    INNER JOIN action_receipt_actions ra3 ON ra3.receipt_id = r3.receipt_id
    WHERE r3.originated_from_transaction_hash = r.originated_from_transaction_hash
  AND e3.status = 'SUCCESS_VALUE'
  AND r3.predecessor_account_id = r.receiver_account_id
  AND r3.receiver_account_id = r.receiver_account_id
  AND ra3.action_kind = 'FUNCTION_CALL'
  AND ra3.args ->> 'args_json'::text IS NOT NULL
  AND ra3.args ->> 'method_name'::text = 'ft_resolve_transfer'
    )
ORDER BY block_timestamp LIMIT $3

'''
'''--- backend/src/helpers/TxTypes/Generate account & claim name.sql ---
SELECT b.block_timestamp,
       r.predecessor_account_id from_account,
       b.block_height,
       convert_from(decode(ra.args ->> 'args_base64', 'base64'), 'UTF8') args_base64,
       a.transaction_hash,
       ra.args ->'args_json'->>'amount' amount_transferred,
       'NEAR' currency_transferred,
       r.receiver_account_id receiver_owner_account
FROM receipts r
    INNER JOIN execution_outcomes e ON e.receipt_id = r.receipt_id
    INNER JOIN blocks b ON b.block_hash = r.included_in_block_hash
    INNER JOIN transaction_actions a ON a.transaction_hash = r.originated_from_transaction_hash
    INNER JOIN action_receipt_actions ra ON ra.receipt_id = r.receipt_id
WHERE r.receiver_account_id = 'near'
  AND e.status = 'SUCCESS_VALUE'
  AND a.action_kind = 'FUNCTION_CALL'
  AND ra.action_kind = 'FUNCTION_CALL'
  AND EXISTS(
    SELECT 1
    FROM receipts r2
    INNER JOIN execution_outcomes e2 ON e2.receipt_id = r2.receipt_id
    INNER JOIN action_receipt_actions ra2 ON ra2.receipt_id = r2.receipt_id
    WHERE r2.originated_from_transaction_hash = r.originated_from_transaction_hash
  AND r2.receiver_account_id = $1
  AND ra2.action_kind = 'CREATE_ACCOUNT'
  AND e2.status = 'SUCCESS_VALUE'
    )
  AND b.block_timestamp > $2
  AND a.args ->> 'args_json'::text IS NOT NULL
  AND ra.args ->> 'args_json'::text IS NOT NULL
  AND a.args ->> 'method_name'::text = 'create_account'
  AND ra.args ->> 'method_name'::text = 'on_account_created'
  AND (a.args -> 'args_json'::text) ->> 'new_account_id'::text = $1
ORDER BY b.block_timestamp LIMIT $3

'''
'''--- backend/src/helpers/TxTypes/Linkdrops - Create account and claim linkdrop.sql ---
SELECT b.block_timestamp,
       r.predecessor_account_id from_account,
       b.block_height,
       convert_from(decode(ra.args ->> 'args_base64', 'base64'), 'UTF8') args_base64,
       r.originated_from_transaction_hash transaction_hash,
       (SELECT ra7.args ->> 'deposit'::text FROM receipts r7
           INNER JOIN action_receipt_actions ra7 ON ra7.receipt_id = r7.receipt_id
           WHERE r7.originated_from_transaction_hash = r.originated_from_transaction_hash
             AND r7.predecessor_account_id = r.receiver_account_id
             AND r7.receiver_account_id = (ra.args -> 'args_json'::text) ->> 'new_account_id'::text
             AND ra7.action_kind = 'TRANSFER') amount_transferred,
       'NEAR' currency_transferred,
       (ra.args -> 'args_json'::text) ->> 'new_account_id'::text receiver_owner_account
FROM receipts r
INNER JOIN execution_outcomes e ON e.receipt_id = r.receipt_id
INNER JOIN blocks b ON b.block_hash = r.included_in_block_hash
INNER JOIN action_receipt_actions ra ON ra.receipt_id = r.receipt_id
WHERE r.receiver_account_id = 'near'
AND r.predecessor_account_id = 'near'
AND e.status = 'SUCCESS_RECEIPT_ID'
AND ra.action_kind = 'FUNCTION_CALL'
AND ra.args ->> 'args_json'::text IS NOT NULL
AND ra.args ->> 'method_name'::text = 'create_account_and_claim'
AND (ra.args -> 'args_json'::text) ->> 'new_account_id'::text = $1
AND b.block_timestamp > $2
AND EXISTS(
    SELECT 1
    FROM receipts r2
    INNER JOIN execution_outcomes e2 ON e2.receipt_id = r2.receipt_id
    INNER JOIN action_receipt_actions ra2 ON ra2.receipt_id = r2.receipt_id
    WHERE r2.originated_from_transaction_hash = r.originated_from_transaction_hash
      AND r2.predecessor_account_id = r.receiver_account_id
      AND r2.receiver_account_id = (ra.args -> 'args_json'::text) ->> 'new_account_id'::text
      AND e2.status = 'SUCCESS_VALUE'
      AND ra2.action_kind = 'CREATE_ACCOUNT'
      AND EXISTS (
        SELECT 1
        FROM action_receipt_actions ra3
        WHERE ra3.receipt_id = r2.receipt_id
          AND ra3.action_kind = 'ADD_KEY'
          AND ra3.receipt_receiver_account_id = r2.receiver_account_id
      )
      AND EXISTS (
        SELECT 1
        FROM action_receipt_actions ra4
        WHERE ra4.receipt_id = r2.receipt_id
          AND ra4.action_kind = 'TRANSFER'
          AND ra4.receipt_receiver_account_id = r2.receiver_account_id
      )
)
AND EXISTS(
    SELECT 1
    FROM receipts r5
    INNER JOIN execution_outcomes e5 ON e5.receipt_id = r5.receipt_id
    INNER JOIN action_receipt_actions ra5 ON ra5.receipt_id = r5.receipt_id
    WHERE r5.originated_from_transaction_hash = r.originated_from_transaction_hash
      AND e5.status = 'SUCCESS_VALUE'
      AND r5.predecessor_account_id = r.receiver_account_id
      AND r5.receiver_account_id = r.receiver_account_id
      AND ra5.action_kind = 'FUNCTION_CALL'
      AND ra5.args ->> 'args_json'::text IS NOT NULL
      AND ra5.args ->> 'method_name'::text = 'on_account_created_and_claimed'
)
AND EXISTS(
    SELECT 1
    FROM receipts r6
    INNER JOIN execution_outcomes e6 ON e6.receipt_id = r6.receipt_id
    INNER JOIN action_receipt_actions ra6 ON ra6.receipt_id = r6.receipt_id
    WHERE r6.originated_from_transaction_hash = r.originated_from_transaction_hash
      AND e6.status = 'SUCCESS_VALUE'
      AND r6.predecessor_account_id = r.receiver_account_id
      AND r6.receiver_account_id = r.receiver_account_id
      AND ra6.action_kind = 'DELETE_KEY'
)
UNION
SELECT b.block_timestamp,
       r.predecessor_account_id from_account,
       b.block_height,
       convert_from(decode(ra.args ->> 'args_base64', 'base64'), 'UTF8') args_base64,
       r.originated_from_transaction_hash transaction_hash,
       (SELECT ra4.args ->> 'deposit'::text FROM receipts r4
           INNER JOIN action_receipt_actions ra4 ON ra4.receipt_id = r4.receipt_id
           WHERE r4.originated_from_transaction_hash = r.originated_from_transaction_hash
             AND r4.predecessor_account_id = r.receiver_account_id
             AND r4.receiver_account_id = (ra.args -> 'args_json'::text) ->> 'account_id'::text
             AND ra4.action_kind = 'TRANSFER') amount_transferred,
       'NEAR' currency_transferred,
       (ra.args -> 'args_json'::text) ->> 'account_id'::text receiver_owner_account
FROM receipts r
INNER JOIN execution_outcomes e ON e.receipt_id = r.receipt_id
INNER JOIN blocks b ON b.block_hash = r.included_in_block_hash
INNER JOIN action_receipt_actions ra ON ra.receipt_id = r.receipt_id
WHERE r.receiver_account_id = 'near'
AND r.predecessor_account_id = 'near'
AND e.status = 'SUCCESS_RECEIPT_ID'
AND ra.action_kind = 'FUNCTION_CALL'
AND ra.args ->> 'args_json'::text IS NOT NULL
AND ra.args ->> 'method_name'::text = 'claim'
AND (ra.args -> 'args_json'::text) ->> 'account_id'::text = $1
AND b.block_timestamp > $2
AND EXISTS(
    SELECT 1
    FROM receipts r2
    INNER JOIN execution_outcomes e2 ON e2.receipt_id = r2.receipt_id
    INNER JOIN action_receipt_actions ra2 ON ra2.receipt_id = r2.receipt_id
    WHERE r2.originated_from_transaction_hash = r.originated_from_transaction_hash
      AND r2.predecessor_account_id = r.receiver_account_id
      AND r2.receiver_account_id = (ra.args -> 'args_json'::text) ->> 'account_id'::text
      AND e2.status = 'SUCCESS_VALUE'
      AND ra2.action_kind = 'TRANSFER'
)
AND EXISTS(
    SELECT 1
    FROM receipts r3
    INNER JOIN execution_outcomes e3 ON e3.receipt_id = r3.receipt_id
    INNER JOIN action_receipt_actions ra3 ON ra3.receipt_id = r3.receipt_id
    WHERE r3.originated_from_transaction_hash = r.originated_from_transaction_hash
      AND e3.status = 'SUCCESS_VALUE'
      AND r3.predecessor_account_id = r.receiver_account_id
      AND r3.receiver_account_id = r.receiver_account_id
      AND ra3.action_kind = 'DELETE_KEY'
)
ORDER BY block_timestamp LIMIT $3

'''
'''--- backend/src/helpers/TxTypes/Linkdrops - Send single linkdrop.sql ---
SELECT b.block_timestamp,
       r.predecessor_account_id from_account,
       b.block_height,
       convert_from(decode(ra.args ->> 'args_base64', 'base64'), 'UTF8') args_base64,
       r.originated_from_transaction_hash transaction_hash,
       ra.args ->> 'deposit' amount_transferred,
       'NEAR' currency_transferred,
       r.receiver_account_id receiver_owner_account
FROM receipts r
    INNER JOIN execution_outcomes e ON e.receipt_id = r.receipt_id
    INNER JOIN blocks b ON b.block_hash = r.included_in_block_hash
    INNER JOIN action_receipt_actions ra ON ra.receipt_id = r.receipt_id
WHERE r.receiver_account_id = 'near'
  AND r.predecessor_account_id = $1
  AND e.status = 'SUCCESS_RECEIPT_ID'
  AND ra.action_kind = 'FUNCTION_CALL'
  AND ra.args ->> 'args_json'::text IS NOT NULL
  AND ra.args ->> 'method_name'::text = 'send'
  AND b.block_timestamp > $2
  AND EXISTS(
    SELECT 1
    FROM receipts r2
    INNER JOIN execution_outcomes e2 ON e2.receipt_id = r2.receipt_id
    INNER JOIN action_receipt_actions ra2 ON ra2.receipt_id = r2.receipt_id
    WHERE r2.originated_from_transaction_hash = r.originated_from_transaction_hash
  AND e2.status = 'SUCCESS_VALUE'
  AND r2.predecessor_account_id = r.receiver_account_id
  AND r2.receiver_account_id = r.receiver_account_id
  AND ra2.action_kind = 'ADD_KEY'
    )
ORDER BY b.block_timestamp LIMIT $3

'''
'''--- backend/src/helpers/TxTypes/Lockups - Cliff.sql ---
SELECT b.block_timestamp,
       r.predecessor_account_id from_account,
       b.block_height,
       convert_from(decode(ra.args ->> 'args_base64', 'base64'), 'UTF8') args_base64,
       r.originated_from_transaction_hash transaction_hash,
       ra.args ->> 'deposit' amount_transferred,
       'NEAR' currency_transferred,
       args -> 'args_json' ->> 'owner_account_id' receiver_owner_account,
       (SELECT r7.receiver_account_id FROM receipts r7
           INNER JOIN action_receipt_actions ra7 ON ra7.receipt_id = r7.receipt_id
           WHERE r7.originated_from_transaction_hash = r.originated_from_transaction_hash
             AND r7.predecessor_account_id = r.receiver_account_id
             AND r7.receiver_account_id LIKE '%.lockup.near'
             AND ra7.action_kind = 'CREATE_ACCOUNT') receiver_lockup_account,
       args->'args_json' ->> 'lockup_timestamp' lockup_start,
       args->'args_json' ->> 'lockup_duration' lockup_duration,
       args->'args_json' ->> 'release_duration' release_duration,
       args->'args_json' -> 'vesting_schedule' -> 'VestingSchedule' ->> 'cliff_timestamp' cliff_duration
FROM receipts r
INNER JOIN execution_outcomes e ON e.receipt_id = r.receipt_id
INNER JOIN blocks b ON b.block_hash = r.included_in_block_hash
INNER JOIN action_receipt_actions ra ON ra.receipt_id = r.receipt_id
WHERE r.predecessor_account_id = $1
AND r.receiver_account_id = 'lockup.near'
AND e.status = 'SUCCESS_RECEIPT_ID'
AND ra.action_kind = 'FUNCTION_CALL'
AND ra.args ->> 'args_json'::text IS NOT NULL
AND ra.args ->> 'method_name'::text = 'create'
AND (ra.args::json -> 'args_json' -> 'vesting_schedule' -> 'VestingSchedule' ->> 'cliff_timestamp')::bigint > 0
AND b.block_timestamp > $2
AND EXISTS(
    SELECT 1
    FROM receipts r2
    INNER JOIN execution_outcomes e2 ON e2.receipt_id = r2.receipt_id
    INNER JOIN action_receipt_actions ra2 ON ra2.receipt_id = r2.receipt_id
    WHERE r2.originated_from_transaction_hash = r.originated_from_transaction_hash
      AND r2.predecessor_account_id = r.receiver_account_id
      AND r2.receiver_account_id LIKE '%.lockup.near'
      AND e2.status = 'SUCCESS_VALUE'
      AND ra2.action_kind = 'CREATE_ACCOUNT'
      AND EXISTS (
        SELECT 1
        FROM action_receipt_actions ra3
        WHERE ra3.receipt_id = r2.receipt_id
          AND ra3.action_kind = 'DEPLOY_CONTRACT'
          AND ra3.receipt_receiver_account_id = r2.receiver_account_id
      )
      AND EXISTS (
        SELECT 1
        FROM action_receipt_actions ra4
        WHERE ra4.receipt_id = r2.receipt_id
          AND ra4.action_kind = 'TRANSFER'
          AND ra4.receipt_receiver_account_id = r2.receiver_account_id
      )
      AND EXISTS (
        SELECT 1
        FROM action_receipt_actions ra5
        WHERE ra5.receipt_id = r2.receipt_id
          AND ra5.action_kind = 'FUNCTION_CALL'
          AND ra5.args ->> 'args_json'::text IS NOT NULL
          AND ra5.args ->> 'method_name'::text = 'new'
          AND ra5.receipt_receiver_account_id = r2.receiver_account_id
      )
)
AND EXISTS(
    SELECT 1
    FROM receipts r6
    INNER JOIN execution_outcomes e6 ON e6.receipt_id = r6.receipt_id
    INNER JOIN action_receipt_actions ra6 ON ra6.receipt_id = r6.receipt_id
    WHERE r6.originated_from_transaction_hash = r.originated_from_transaction_hash
      AND e6.status = 'SUCCESS_VALUE'
      AND r6.predecessor_account_id = r.receiver_account_id
      AND r6.receiver_account_id = r.receiver_account_id
      AND ra6.action_kind = 'FUNCTION_CALL'
      AND ra6.args ->> 'args_json'::text IS NOT NULL
      AND ra6.args ->> 'method_name'::text = 'on_lockup_create'
)
ORDER BY b.block_timestamp LIMIT $3

'''
'''--- backend/src/helpers/TxTypes/Lockups - Linear release.sql ---
SELECT b.block_timestamp,
       r.predecessor_account_id from_account,
       b.block_height,
       convert_from(decode(ra.args ->> 'args_base64', 'base64'), 'UTF8') args_base64,
       r.originated_from_transaction_hash transaction_hash,
       ra.args ->> 'deposit' amount_transferred,
       'NEAR' currency_transferred,
       args -> 'args_json' ->> 'owner_account_id' receiver_owner_account,
       (SELECT r7.receiver_account_id FROM receipts r7
           INNER JOIN action_receipt_actions ra7 ON ra7.receipt_id = r7.receipt_id
           WHERE r7.originated_from_transaction_hash = r.originated_from_transaction_hash
             AND r7.predecessor_account_id = r.receiver_account_id
             AND r7.receiver_account_id LIKE '%.lockup.near'
             AND ra7.action_kind = 'CREATE_ACCOUNT') receiver_lockup_account,
       args -> 'args_json' ->> 'lockup_timestamp' lockup_start,
       args -> 'args_json' ->> 'lockup_duration' lockup_duration,
       args -> 'args_json' ->> 'release_duration' release_duration
FROM receipts r
INNER JOIN execution_outcomes e ON e.receipt_id = r.receipt_id
INNER JOIN blocks b ON b.block_hash = r.included_in_block_hash
INNER JOIN action_receipt_actions ra ON ra.receipt_id = r.receipt_id
WHERE r.predecessor_account_id = $1
AND r.receiver_account_id = 'lockup.near'
AND e.status = 'SUCCESS_RECEIPT_ID'
AND ra.action_kind = 'FUNCTION_CALL'
AND ra.args ->> 'args_json'::text IS NOT NULL
AND ra.args ->> 'method_name'::text = 'create'
AND (ra.args::json -> 'args_json' ->> 'release_duration')::bigint > 0
AND (ra.args::json -> 'args_json' ->> 'vesting_schedule') IS NULL
AND b.block_timestamp > $2
AND EXISTS(
    SELECT 1
    FROM receipts r2
    INNER JOIN execution_outcomes e2 ON e2.receipt_id = r2.receipt_id
    INNER JOIN action_receipt_actions ra2 ON ra2.receipt_id = r2.receipt_id
    WHERE r2.originated_from_transaction_hash = r.originated_from_transaction_hash
      AND r2.predecessor_account_id = r.receiver_account_id
      AND r2.receiver_account_id LIKE '%.lockup.near'
      AND e2.status = 'SUCCESS_VALUE'
      AND ra2.action_kind = 'CREATE_ACCOUNT'
      AND EXISTS (
        SELECT 1
        FROM action_receipt_actions ra3
        WHERE ra3.receipt_id = r2.receipt_id
          AND ra3.action_kind = 'DEPLOY_CONTRACT'
          AND ra3.receipt_receiver_account_id = r2.receiver_account_id
      )
      AND EXISTS (
        SELECT 1
        FROM action_receipt_actions ra4
        WHERE ra4.receipt_id = r2.receipt_id
          AND ra4.action_kind = 'TRANSFER'
          AND ra4.receipt_receiver_account_id = r2.receiver_account_id
      )
      AND EXISTS (
        SELECT 1
        FROM action_receipt_actions ra5
        WHERE ra5.receipt_id = r2.receipt_id
          AND ra5.action_kind = 'FUNCTION_CALL'
          AND ra5.args ->> 'args_json'::text IS NOT NULL
          AND ra5.args ->> 'method_name'::text = 'new'
          AND ra5.receipt_receiver_account_id = r2.receiver_account_id
      )
)
AND EXISTS(
    SELECT 1
    FROM receipts r6
    INNER JOIN execution_outcomes e6 ON e6.receipt_id = r6.receipt_id
    INNER JOIN action_receipt_actions ra6 ON ra6.receipt_id = r6.receipt_id
    WHERE r6.originated_from_transaction_hash = r.originated_from_transaction_hash
      AND e6.status = 'SUCCESS_VALUE'
      AND r6.predecessor_account_id = r.receiver_account_id
      AND r6.receiver_account_id = r.receiver_account_id
      AND ra6.action_kind = 'FUNCTION_CALL'
      AND ra6.args ->> 'args_json'::text IS NOT NULL
      AND ra6.args ->> 'method_name'::text = 'on_lockup_create'
)
ORDER BY b.block_timestamp LIMIT $3

'''
'''--- backend/src/helpers/TxTypes/Multisend - Deposit & send from wallet.sql ---
SELECT b.block_timestamp,
       r.predecessor_account_id from_account,
       b.block_height,
       convert_from(decode(ra.args ->> 'args_base64', 'base64'), 'UTF8') args_base64,
       r.originated_from_transaction_hash transaction_hash,
       ra.args ->> 'deposit' amount_transferred,
       'NEAR' currency_transferred,
       r.receiver_account_id receiver_owner_account
FROM receipts r
    INNER JOIN execution_outcomes e ON e.receipt_id = r.receipt_id
    INNER JOIN blocks b ON b.block_hash = r.included_in_block_hash
    INNER JOIN action_receipt_actions ra ON ra.receipt_id = r.receipt_id
WHERE r.receiver_account_id IN ('multisender.app.near', 'bulksender.near')
  AND r.predecessor_account_id = $1
  AND e.status = 'SUCCESS_VALUE'
  AND ra.action_kind = 'FUNCTION_CALL'
  AND ra.args ->> 'args_json'::text IS NOT NULL
  AND ra.args ->> 'method_name'::text IN ('multisend_attached_tokens', 'distribute_near')
  AND b.block_timestamp > $2
  AND EXISTS(
    SELECT 1
    FROM receipts r2
    INNER JOIN execution_outcomes e2 ON e2.receipt_id = r2.receipt_id
    WHERE r2.originated_from_transaction_hash = r.originated_from_transaction_hash
  AND e2.status = 'SUCCESS_VALUE'
  AND r2.predecessor_account_id = r.receiver_account_id
  AND r2.receipt_id <> r.receipt_id
    )
  AND NOT EXISTS(
    SELECT 1
    FROM receipts r3
    INNER JOIN execution_outcomes e3 ON e3.receipt_id = r3.receipt_id
    WHERE r3.originated_from_transaction_hash = r.originated_from_transaction_hash
  AND e3.status <> 'SUCCESS_VALUE'
  AND r3.predecessor_account_id = r.receiver_account_id
  AND r3.receipt_id <> r.receipt_id
    )
ORDER BY b.block_timestamp LIMIT $3

'''
'''--- backend/src/helpers/TxTypes/Multisend - Deposit to app balance.sql ---
SELECT b.block_timestamp,
       r.predecessor_account_id from_account,
       b.block_height,
       convert_from(decode(ra.args ->> 'args_base64', 'base64'), 'UTF8') args_base64,
       r.originated_from_transaction_hash transaction_hash,
       ra.args ->> 'deposit' amount_transferred,
       'NEAR' currency_transferred,
       r.receiver_account_id receiver_owner_account
FROM receipts r
    INNER JOIN execution_outcomes e ON e.receipt_id = r.receipt_id
    INNER JOIN blocks b ON b.block_hash = r.included_in_block_hash
    INNER JOIN action_receipt_actions ra ON ra.receipt_id = r.receipt_id
WHERE r.receiver_account_id = 'multisender.app.near'
  AND r.predecessor_account_id = $1
  AND e.status = 'SUCCESS_VALUE'
  AND ra.action_kind = 'FUNCTION_CALL'
  AND ra.args ->> 'args_json'::text IS NOT NULL
  AND ra.args ->> 'method_name'::text = 'deposit'
  AND b.block_timestamp > $2
ORDER BY b.block_timestamp LIMIT $3

'''
'''--- backend/src/helpers/TxTypes/Multisend - Send from app balance.sql ---
SELECT b.block_timestamp,
       r.predecessor_account_id from_account,
       b.block_height,
       convert_from(decode(ra.args ->> 'args_base64', 'base64'), 'UTF8') args_base64,
       r.originated_from_transaction_hash transaction_hash,
       (select SUM(cast (re->>'amount' as numeric)) from jsonb_array_elements(ra.args -> 'args_json'->'accounts') as re) amount_transferred,
       'NEAR' currency_transferred,
       r.receiver_account_id receiver_owner_account
FROM receipts r
         INNER JOIN execution_outcomes e ON e.receipt_id = r.receipt_id
         INNER JOIN blocks b ON b.block_hash = r.included_in_block_hash
         INNER JOIN action_receipt_actions ra ON ra.receipt_id = r.receipt_id
WHERE r.receiver_account_id = 'multisender.app.near'
  AND r.predecessor_account_id = $1
  AND e.status IN ('SUCCESS_VALUE')
  AND ra.action_kind = 'FUNCTION_CALL'
  AND ra.args ->> 'args_json'::text IS NOT NULL
  AND ra.args ->> 'method_name'::text = 'multisend_from_balance_unsafe'
  AND b.block_timestamp > $2
  AND EXISTS(
    SELECT 1
    FROM receipts r2
    INNER JOIN execution_outcomes e2 ON e2.receipt_id = r2.receipt_id
    WHERE r2.originated_from_transaction_hash = r.originated_from_transaction_hash
  AND e2.status = 'SUCCESS_VALUE'
  AND r2.predecessor_account_id = r.receiver_account_id
  AND r2.receipt_id <> r.receipt_id
    )
  AND NOT EXISTS(
    SELECT 1
    FROM receipts r3
    INNER JOIN execution_outcomes e3 ON e3.receipt_id = r3.receipt_id
    WHERE r3.originated_from_transaction_hash = r.originated_from_transaction_hash
  AND e3.status <> 'SUCCESS_VALUE'
  AND r3.predecessor_account_id = r.receiver_account_id
  AND r3.receipt_id <> r.receipt_id
    )
ORDER BY b.block_timestamp LIMIT $3

'''
'''--- backend/src/helpers/TxTypes/Multisig - Confirm and execute request.sql ---
SELECT b.block_timestamp,
       r.predecessor_account_id from_account,
       b.block_height,
       convert_from(decode(ra.args ->> 'args_base64', 'base64'), 'UTF8') args_base64,
       r.originated_from_transaction_hash transaction_hash,
       (SELECT SUM(CAST(ra4.args ->>'deposit' AS numeric))
        FROM receipts r4
        INNER JOIN execution_outcomes e4 ON e4.receipt_id = r4.receipt_id
        INNER JOIN action_receipt_actions ra4 ON ra4.receipt_id = r4.receipt_id
        WHERE r4.originated_from_transaction_hash = r.originated_from_transaction_hash
        AND r4.predecessor_account_id <> 'system'
        AND r4.receipt_id <> r.receipt_id
        AND e4.status = 'SUCCESS_VALUE'
        AND ra4.action_kind = 'TRANSFER') amount_transferred,
       'NEAR' currency_transferred,
       (SELECT r4.receiver_account_id
        FROM receipts r4
        INNER JOIN execution_outcomes e4 ON e4.receipt_id = r4.receipt_id
        INNER JOIN action_receipt_actions ra4 ON ra4.receipt_id = r4.receipt_id
        WHERE r4.originated_from_transaction_hash = r.originated_from_transaction_hash
        AND r4.predecessor_account_id <> 'system'
        AND r4.receipt_id <> r.receipt_id
        AND e4.status = 'SUCCESS_VALUE'
        AND ra4.action_kind = 'TRANSFER'
        LIMIT 1) receiver_owner_account
FROM receipts r
INNER JOIN execution_outcomes e ON e.receipt_id = r.receipt_id
INNER JOIN blocks b ON b.block_hash = r.included_in_block_hash
INNER JOIN action_receipt_actions ra ON ra.receipt_id = r.receipt_id
WHERE r.predecessor_account_id = $1
AND e.status = 'SUCCESS_RECEIPT_ID'
AND ra.action_kind = 'FUNCTION_CALL'
AND ra.args ->> 'args_json'::text IS NOT NULL
AND ra.args ->> 'method_name'::text = 'confirm'
AND (SELECT count(*) FROM jsonb_object_keys(COALESCE(ra.args::json->'args_json', '{}')::jsonb)) = 1
AND COALESCE((ra.args::json->'args_json')::json->>'request_id', '') ~ '^[0-9]+$'
AND b.block_timestamp > $2
AND EXISTS(
    SELECT 1
    FROM receipts r2
    INNER JOIN execution_outcomes e2 ON e2.receipt_id = r2.receipt_id
    WHERE r2.originated_from_transaction_hash = r.originated_from_transaction_hash
      AND e2.status IN ('SUCCESS_VALUE', 'SUCCESS_RECEIPT_ID')
      AND r2.predecessor_account_id = r.receiver_account_id
      AND r2.receipt_id <> r.receipt_id
)
AND NOT EXISTS(
    SELECT 1
    FROM receipts r3
    INNER JOIN execution_outcomes e3 ON e3.receipt_id = r3.receipt_id
    WHERE r3.originated_from_transaction_hash = r.originated_from_transaction_hash
      AND e3.status NOT IN ('SUCCESS_VALUE', 'SUCCESS_RECEIPT_ID')
      AND r3.predecessor_account_id = r.receiver_account_id
      AND r3.receipt_id <> r.receipt_id
)
AND NOT EXISTS(
    SELECT 1
    FROM receipts r4
    WHERE r4.originated_from_transaction_hash = r.originated_from_transaction_hash
      AND r4.predecessor_account_id = 'lockup.near'
)
ORDER BY b.block_timestamp LIMIT $3

'''
'''--- backend/src/helpers/TxTypes/Non-Fungible tokens - Buy & Receive NFT.sql ---
SELECT b.block_timestamp,
       r.predecessor_account_id from_account,
       b.block_height,
       convert_from(decode(ra.args ->> 'args_base64', 'base64'), 'UTF8') args_base64,
       r.originated_from_transaction_hash transaction_hash,
       ra.args ->> 'deposit' amount_transferred,
       'NEAR' currency_transferred,
       r.receiver_account_id receiver_owner_account
FROM receipts r
    INNER JOIN execution_outcomes e ON e.receipt_id = r.receipt_id
    INNER JOIN blocks b ON b.block_hash = r.included_in_block_hash
    INNER JOIN action_receipt_actions ra ON ra.receipt_id = r.receipt_id
WHERE r.predecessor_account_id = $1
  AND r.receiver_account_id = 'x.paras.near'
  AND e.status = 'SUCCESS_VALUE'
  AND ra.action_kind = 'FUNCTION_CALL'
  AND ra.args ->> 'args_json'::text IS NOT NULL
  AND ra.args ->> 'method_name'::text = 'nft_buy'
  AND COALESCE((ra.args -> 'args_json'::text) ->> 'token_series_id'::text, '') <> ''
  AND COALESCE((ra.args -> 'args_json'::text) ->> 'receiver_id'::text, '') <> ''
  AND (SELECT count(*) FROM jsonb_object_keys(COALESCE(ra.args::json->'args_json', '{}')::jsonb)) = 2
  AND b.block_timestamp > $2
ORDER BY b.block_timestamp LIMIT $3
'''
'''--- backend/src/helpers/TxTypes/Non-Fungible tokens - Send NFT.sql ---
SELECT b.block_timestamp,
       r.predecessor_account_id from_account,
       b.block_height,
       convert_from(decode(ra.args ->> 'args_base64', 'base64'), 'UTF8') args_base64,
       r.originated_from_transaction_hash transaction_hash,
       ra.args ->> 'deposit' amount_transferred,
      'NEAR' currency_transferred,
      r.receiver_account_id receiver_owner_account
FROM receipts r
    INNER JOIN execution_outcomes e ON e.receipt_id = r.receipt_id
    INNER JOIN blocks b ON b.block_hash = r.included_in_block_hash
    INNER JOIN action_receipt_actions ra ON ra.receipt_id = r.receipt_id
WHERE r.predecessor_account_id = $1
  AND e.status = 'SUCCESS_VALUE'
  AND ra.action_kind = 'FUNCTION_CALL'
  AND ra.args ->> 'args_json'::text IS NOT NULL
  AND ra.args ->> 'method_name'::text = 'nft_transfer'
  AND (SELECT count(*) FROM jsonb_object_keys(COALESCE(ra.args::json->'args_json', '{}')::jsonb)) BETWEEN 2 AND 4
  AND COALESCE((ra.args::json->'args_json')::json->>'receiver_id', '') <> ''
  AND COALESCE((ra.args::json->'args_json')::json->>'token_id', '') <> ''
  AND b.block_timestamp > $2
ORDER BY b.block_timestamp LIMIT $3

'''
'''--- backend/src/helpers/TxTypes/Rainbow bridge - Send NEAR from NEAR to Aurora.sql ---
SELECT b.block_timestamp,
       r.predecessor_account_id from_account,
       b.block_height,
       convert_from(decode(ra.args ->> 'args_base64', 'base64'), 'UTF8') args_base64,
       r.originated_from_transaction_hash transaction_hash,
       ra.args ->'args_json' ->> 'amount' amount_transferred,
       'NEAR' currency_transferred,
       r.receiver_account_id receiver_owner_account
FROM receipts r
INNER JOIN execution_outcomes e ON e.receipt_id = r.receipt_id
INNER JOIN blocks b ON b.block_hash = r.included_in_block_hash
INNER JOIN action_receipt_actions ra ON ra.receipt_id = r.receipt_id
WHERE r.receiver_account_id = 'wrap.near'
AND r.predecessor_account_id = $1
AND e.status = 'SUCCESS_RECEIPT_ID'
AND ra.action_kind = 'FUNCTION_CALL'
AND ra.args ->> 'args_json'::text IS NOT NULL
AND ra.args ->> 'method_name'::text = 'ft_transfer_call'
AND (ra.args -> 'args_json'::text) ->> 'receiver_id'::text = 'aurora'
AND b.block_timestamp > $2
AND EXISTS(
    SELECT 1
    FROM receipts r3
    INNER JOIN execution_outcomes e3 ON e3.receipt_id = r3.receipt_id
    INNER JOIN action_receipt_actions ra3 ON ra3.receipt_id = r3.receipt_id
    WHERE r3.originated_from_transaction_hash = r.originated_from_transaction_hash
      AND e3.status = 'SUCCESS_VALUE'
      AND r3.predecessor_account_id = r.receiver_account_id
      AND r3.receiver_account_id = (ra.args -> 'args_json'::text) ->> 'receiver_id'::text
      AND ra3.action_kind = 'FUNCTION_CALL'
      AND ra3.args ->> 'args_json'::text IS NOT NULL
      AND ra3.args ->> 'method_name'::text = 'ft_on_transfer'
)
AND EXISTS(
    SELECT 1
    FROM receipts r4
    INNER JOIN execution_outcomes e4 ON e4.receipt_id = r4.receipt_id
    INNER JOIN action_receipt_actions ra4 ON ra4.receipt_id = r4.receipt_id
    WHERE r4.originated_from_transaction_hash = r.originated_from_transaction_hash
      AND e4.status = 'SUCCESS_VALUE'
      AND r4.predecessor_account_id = r.receiver_account_id
      AND r4.receiver_account_id = r.receiver_account_id
      AND ra4.action_kind = 'FUNCTION_CALL'
      AND ra4.args ->> 'args_json'::text IS NOT NULL
      AND ra4.args ->> 'method_name'::text = 'ft_resolve_transfer'
)
ORDER BY b.block_timestamp LIMIT $3

'''
'''--- backend/src/helpers/TxTypes/Rainbow bridge - Send NEAR from NEAR to Ethereum mainnet.sql ---
SELECT b.block_timestamp,
       r.predecessor_account_id from_account,
       b.block_height,
       convert_from(decode(ra.args ->> 'args_base64', 'base64'), 'UTF8') args_base64,
       r.originated_from_transaction_hash transaction_hash,
       ra.args ->> 'deposit' amount_transferred,
       'NEAR' currency_transferred,
       r.receiver_account_id receiver_owner_account
FROM receipts r
INNER JOIN execution_outcomes e ON e.receipt_id = r.receipt_id
INNER JOIN blocks b ON b.block_hash = r.included_in_block_hash
INNER JOIN action_receipt_actions ra ON ra.receipt_id = r.receipt_id
WHERE r.receiver_account_id = 'e-near.near'
AND r.predecessor_account_id = $1
AND e.status = 'SUCCESS_VALUE'
AND ra.action_kind = 'FUNCTION_CALL'
AND ra.args ->> 'args_json'::text IS NOT NULL
AND ra.args ->> 'method_name'::text = 'migrate_to_ethereum'
AND b.block_timestamp > $2
ORDER BY b.block_timestamp LIMIT $3

'''
'''--- backend/src/helpers/TxTypes/Receive NEAR.sql ---
SELECT b.block_timestamp,
       r.predecessor_account_id from_account,
       b.block_height,
       r.originated_from_transaction_hash transaction_hash,
       ra.args ->>'deposit' amount_transferred,
       'NEAR' currency_transferred,
       r.receiver_account_id receiver_owner_account
FROM receipts r
    INNER JOIN execution_outcomes e ON e.receipt_id = r.receipt_id
    INNER JOIN blocks b ON b.block_hash = r.included_in_block_hash
    INNER JOIN action_receipt_actions ra ON ra.receipt_id = r.receipt_id
WHERE r.receiver_account_id = $1
  AND e.status = 'SUCCESS_VALUE'
  AND ra.action_kind = 'TRANSFER'
  AND r.predecessor_account_id != 'system'
  AND b.block_timestamp > $2
ORDER BY b.block_timestamp LIMIT $3

'''
'''--- backend/src/helpers/TxTypes/Send NEAR.sql ---
SELECT b.block_timestamp,
       r.predecessor_account_id from_account,
       b.block_height,
       a.transaction_hash,
       a.args ->>'deposit' amount_transferred,
       'NEAR' currency_transferred,
       r.receiver_account_id receiver_owner_account
FROM receipts r
    INNER JOIN execution_outcomes e ON e.receipt_id = r.receipt_id
    INNER JOIN blocks b ON b.block_hash = r.included_in_block_hash
    INNER JOIN transaction_actions a ON a.transaction_hash = r.originated_from_transaction_hash
WHERE r.predecessor_account_id = $1
  AND r.receiver_account_id NOT LIKE '%.sputnik-dao.near'
  AND e.status = 'SUCCESS_VALUE'
  AND a.action_kind = 'TRANSFER'
  AND b.block_timestamp > $2
ORDER BY b.block_timestamp LIMIT $3

'''
'''--- backend/src/helpers/TxTypes/Staking - Finalize withdraw from validator.sql ---
SELECT b.block_timestamp,
       r.predecessor_account_id from_account,
       b.block_height,
       convert_from(decode(ra.args ->> 'args_base64', 'base64'), 'UTF8') args_base64,
       r.originated_from_transaction_hash transaction_hash,
       (SELECT ra2.args  FROM receipts r2
          INNER JOIN action_receipt_actions ra2 ON ra2.receipt_id = r2.receipt_id
          where ra2.action_kind='TRANSFER' AND r2.originated_from_transaction_hash = r.originated_from_transaction_hash
            AND ra2.receipt_predecessor_account_id <> 'system')->>'deposit' amount_transferred,
       'NEAR' currency_transferred,
       r.receiver_account_id receiver_owner_account
FROM receipts r
INNER JOIN execution_outcomes e ON e.receipt_id = r.receipt_id
INNER JOIN blocks b ON b.block_hash = r.included_in_block_hash
INNER JOIN action_receipt_actions ra ON ra.receipt_id = r.receipt_id
WHERE r.predecessor_account_id = $1
AND (r.receiver_account_id LIKE '%.poolv1.near' OR r.receiver_account_id LIKE '%.pool.near')
AND e.status = 'SUCCESS_VALUE'
AND ra.action_kind = 'FUNCTION_CALL'
AND ra.args ->> 'args_json'::text IS NOT NULL
AND ra.args ->> 'method_name'::text IN ('withdraw', 'withdraw_all')
AND b.block_timestamp > $2
AND EXISTS(
    SELECT 1
    FROM receipts r2
    INNER JOIN execution_outcomes e2 ON e2.receipt_id = r2.receipt_id
    INNER JOIN action_receipt_actions ra2 ON ra2.receipt_id = r2.receipt_id
    WHERE r2.originated_from_transaction_hash = r.originated_from_transaction_hash
      AND r2.predecessor_account_id = r.receiver_account_id
      AND r2.receiver_account_id LIKE r.predecessor_account_id
      AND e2.status = 'SUCCESS_VALUE'
      AND ra2.action_kind = 'TRANSFER'
)
ORDER BY b.block_timestamp LIMIT $3

'''
'''--- backend/src/helpers/TxTypes/Staking - Initiate unstake release from validator.sql ---
SELECT b.block_timestamp,
       r.predecessor_account_id from_account,
       b.block_height,
       convert_from(decode(ra.args ->> 'args_base64', 'base64'), 'UTF8') args_base64,
       r.originated_from_transaction_hash transaction_hash,
       ra.args ->'args_json'->>'amount' amount_transferred,
       'NEAR' currency_transferred,
       r.receiver_account_id receiver_owner_account
FROM receipts r
INNER JOIN execution_outcomes e ON e.receipt_id = r.receipt_id
INNER JOIN blocks b ON b.block_hash = r.included_in_block_hash
INNER JOIN action_receipt_actions ra ON ra.receipt_id = r.receipt_id
WHERE r.predecessor_account_id = $1
AND (r.receiver_account_id LIKE '%.poolv1.near' OR r.receiver_account_id LIKE '%.pool.near')
AND e.status = 'SUCCESS_VALUE'
AND ra.action_kind = 'FUNCTION_CALL'
AND ra.args ->> 'args_json'::text IS NOT NULL
AND ra.args ->> 'method_name'::text IN ('unstake', 'unstake_all')
AND b.block_timestamp > $2
AND EXISTS(
    SELECT 1
    FROM receipts r2
    INNER JOIN execution_outcomes e2 ON e2.receipt_id = r2.receipt_id
    INNER JOIN action_receipt_actions ra2 ON ra2.receipt_id = r2.receipt_id
    WHERE r2.originated_from_transaction_hash = r.originated_from_transaction_hash
      AND r2.predecessor_account_id = r.receiver_account_id
      AND r2.receiver_account_id LIKE r.receiver_account_id
      AND e2.status = 'SUCCESS_VALUE'
      AND ra2.action_kind = 'STAKE'
)
AND EXISTS(
    SELECT 1
    FROM receipts r6
    INNER JOIN execution_outcomes e6 ON e6.receipt_id = r6.receipt_id
    INNER JOIN action_receipt_actions ra6 ON ra6.receipt_id = r6.receipt_id
    WHERE r6.originated_from_transaction_hash = r.originated_from_transaction_hash
      AND e6.status = 'SUCCESS_VALUE'
      AND r6.predecessor_account_id = r.receiver_account_id
      AND r6.receiver_account_id = r.receiver_account_id
      AND ra6.action_kind = 'FUNCTION_CALL'
      AND ra6.args ->> 'method_name'::text = 'on_stake_action'
)
ORDER BY b.block_timestamp LIMIT $3

'''
'''--- backend/src/helpers/TxTypes/Staking - Stake with validator.sql ---
SELECT b.block_timestamp,
       r.predecessor_account_id from_account,
       b.block_height,
       convert_from(decode(ra.args ->> 'args_base64', 'base64'), 'UTF8') args_base64,
       r.originated_from_transaction_hash transaction_hash,
       CASE WHEN CAST(ra.args ->'args_json'->>'amount' as numeric) > 0 THEN ra.args ->'args_json'->>'amount'
            ELSE ra.args ->> 'deposit'
        END amount_transferred,
       'NEAR' currency_transferred,
       r.receiver_account_id receiver_owner_account
FROM receipts r
INNER JOIN execution_outcomes e ON e.receipt_id = r.receipt_id
INNER JOIN blocks b ON b.block_hash = r.included_in_block_hash
INNER JOIN action_receipt_actions ra ON ra.receipt_id = r.receipt_id
WHERE r.predecessor_account_id = $1
AND (r.receiver_account_id LIKE '%.poolv1.near' OR r.receiver_account_id LIKE '%.pool.near')
AND e.status = 'SUCCESS_VALUE'
AND ra.action_kind = 'FUNCTION_CALL'
AND ra.args ->> 'args_json'::text IS NOT NULL
AND ra.args ->> 'method_name'::text IN ('stake', 'deposit_and_stake', 'stake_all')
AND b.block_timestamp > $2
AND EXISTS(
    SELECT 1
    FROM receipts r2
    INNER JOIN execution_outcomes e2 ON e2.receipt_id = r2.receipt_id
    INNER JOIN action_receipt_actions ra2 ON ra2.receipt_id = r2.receipt_id
    WHERE r2.originated_from_transaction_hash = r.originated_from_transaction_hash
      AND r2.predecessor_account_id = r.receiver_account_id
      AND r2.receiver_account_id LIKE r.receiver_account_id
      AND e2.status = 'SUCCESS_VALUE'
      AND ra2.action_kind = 'STAKE'
)
AND EXISTS(
    SELECT 1
    FROM receipts r6
    INNER JOIN execution_outcomes e6 ON e6.receipt_id = r6.receipt_id
    INNER JOIN action_receipt_actions ra6 ON ra6.receipt_id = r6.receipt_id
    WHERE r6.originated_from_transaction_hash = r.originated_from_transaction_hash
      AND e6.status = 'SUCCESS_VALUE'
      AND r6.predecessor_account_id = r.receiver_account_id
      AND r6.receiver_account_id = r.receiver_account_id
      AND ra6.action_kind = 'FUNCTION_CALL'
      AND ra6.args ->> 'method_name'::text = 'on_stake_action'
)
ORDER BY b.block_timestamp LIMIT $3

'''
'''--- backend/src/helpers/TxTypes/WRAP NEAR.sql ---
SELECT b.block_timestamp,
       r.predecessor_account_id from_account,
       b.block_height,
       convert_from(decode(ra.args ->> 'args_base64', 'base64'), 'UTF8') args_base64,
       r.originated_from_transaction_hash transaction_hash,
       ra.args ->>'deposit' amount_transferred,
       'NEAR' currency_transferred,
       r.receiver_account_id receiver_owner_account
FROM receipts r
    INNER JOIN execution_outcomes e ON e.receipt_id = r.receipt_id
    INNER JOIN blocks b ON b.block_hash = r.included_in_block_hash
    INNER JOIN action_receipt_actions ra ON ra.receipt_id = r.receipt_id
WHERE r.receiver_account_id = 'wrap.near'
  AND r.predecessor_account_id = $1
  AND e.status = 'SUCCESS_VALUE'
  AND ra.action_kind = 'FUNCTION_CALL'
  AND ra.args ->> 'args_json'::text IS NOT NULL
  AND ra.args ->> 'method_name'::text IN ('near_deposit', 'near_withdraw')
  AND b.block_timestamp > $2
ORDER BY b.block_timestamp LIMIT $3

'''
'''--- backend/src/helpers/addDefaultTypesTx.ts ---
import fs from 'node:fs';
import path from 'node:path';

import { TxTasks } from '../models/TxTasks.js';
import { TxTypes } from '../models/TxTypes.js';

export const DOT_SQL = '.sql';

export function getSqlFolder(subfolder = ''): string {
  const sqlFolder = `${subfolder}src/helpers/TxTypes/`;
  // console.log({ sqlFolder });
  return sqlFolder;
}

export function getTransactionTypeSql(sqlFolder: string, file: string): string {
  const data = fs.readFileSync(sqlFolder + file, 'utf8');
  return data;
}

export async function addTransactionTypeSqlToDatabase(sqlFolder: string, file: string) {
  const data = getTransactionTypeSql(sqlFolder, file);

  // console.log({ file, data }); // Or use `console.log(path.parse(file).name);` if you don't want the extension.
  // eslint-disable-next-line promise/valid-params
  try {
    await TxTypes.findOneAndUpdate(
      { name: path.parse(file).name },
      {
        name: path.parse(file).name,
        sql: data,
      },
      { upsert: true },
    );
  } catch (error) {
    console.error(error);
  }
}

export const addDefaultTypesTx = async () => {
  const sqlFolder = getSqlFolder();
  try {
    await TxTasks.updateMany({ isRunning: true }, { isRunning: false });
  } catch (error) {
    console.error(error);
    return;
  }

  const files = fs.readdirSync(sqlFolder);
  console.log({ files });
  for (const file of files) {
    if (path.extname(file) === DOT_SQL) {
      await addTransactionTypeSqlToDatabase(sqlFolder, file);
    }
  }
};

'''
'''--- backend/src/helpers/config.ts ---
import dotenv from 'dotenv';

import { subfolder } from '../../../shared/config.js';

// eslint-disable-next-line @typescript-eslint/no-unused-vars
const dotenvResult = dotenv.config({ path: `./${subfolder}/.env.development.local` });
// console.log({ dotenvResult });

export const PRODUCTION_POSTGRESQL_CONNECTION_STRING = process.env.PRODUCTION_POSTGRESQL_CONNECTION_STRING; // intentionally using the production value for benchmarking
export const CONNECTION_STRING = process.env.POSTGRESQL_CONNECTION_STRING;
export const DEFAULT_LENGTH = 100; // TODO: Document and consider renaming and allowing to be configurable per environment.
// TODO: Consider allowing these values to be configurable per environment:
export const STATEMENT_TIMEOUT = 10 * 60 * 1_000; // 10 minutes in milliseconds. "number of milliseconds before a statement in query will time out" https://node-postgres.com/api/client
const queryTimeoutString = process.env.QUERY_TIMEOUT_MILLISECONDS;
export const QUERY_TIMEOUT = queryTimeoutString ? Number(queryTimeoutString) : undefined; // in milliseconds. undefined = no timeout. // "number of milliseconds before a query call will timeout" https://node-postgres.com/api/client
export const CONNECTION_TIMEOUT = 10 * 1_000; // 10 seconds in milliseconds. "number of milliseconds to wait for connection" https://node-postgres.com/api/client

export const CRON_SCHEDULE = process.env.CRON_SCHEDULE ?? '* * * * *'; // every minute
// '* * * * * *', // every second. Only for careful local development purposes. https://www.freeformatter.com/cron-expression-generator-quartz.html
// '*/10 * * * * *', // every 10 seconds. https://stackoverflow.com/a/59800039/ https://www.freeformatter.com/cron-expression-generator-quartz.html

export const MONGO_CONNECTION_STRING = process.env.MONGO ?? '';
export const PORT = process.env.PORT;
// console.log({ MONGO_CONNECTION_STRING });

'''
'''--- backend/src/helpers/errors.ts ---
import { SERVER_ERROR } from '../../../shared/helpers/statusCodes.js';

export const respondWithServerError = (response: any, error: any) => {
  console.error(error);
  response.status(SERVER_ERROR).send({ error: 'Server error. Please try again.' });
};

'''
'''--- backend/src/helpers/formatAmount.ts ---
import { convertAmount } from '../../../shared/helpers/precision.js';
import { type PoolsCurrency } from '../../../shared/types';
import { PoolsCurrencies } from '../models/PoolsCurrencies.js';

/**
 * TODO: Document what this is doing and why. Consider renaming.
 */
async function getDecimals(currency: string): Promise<PoolsCurrency> {
  const decimals = await PoolsCurrencies.findOne({ currency }).select('decimals');
  return decimals;
}

/**
 * TODO: Document what this is doing and why. Consider renaming.
 */
export default async function formatAmount(amount: number | string | undefined, currency: string | undefined): Promise<string> {
  return amount && currency ? await convertAmount(amount, currency, getDecimals) : '';
}

'''
'''--- backend/src/helpers/getCurrency.test.ts ---
// Run via `yarn test backend/src/helpers/getCurrency.test.ts`.
import mongoose, { type Mongoose } from 'mongoose';

import { MONGO_CONNECTION_STRING } from './config';
import { getCurrencyByContract } from './getCurrency';

// https://jestjs.io/docs/setup-teardown#scoping

// eslint-disable-next-line max-lines-per-function
describe('getCurrency', () => {
  let connection: Mongoose;

  beforeAll(async () => {
    connection = await mongoose.connect(MONGO_CONNECTION_STRING);
  });

  afterAll(async () => {
    await connection.disconnect();
  });

  test('getCurrencyByContract', async () => {
    const result = await getCurrencyByContract('a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48.factory.bridge.near');
    expect(result).toBe('USDC');
  });
});

'''
'''--- backend/src/helpers/getCurrency.ts ---
import * as nearAPI from 'near-api-js'; // https://docs.near.org/tools/near-api-js/quick-reference#import

import getConfig from '../../../shared/config.js';
import { type AccountId } from '../../../shared/types/index.js';
import { getNearApiConnection } from '../helpers/nearConnection.js';
import { PoolsCurrencies } from '../models/PoolsCurrencies.js';

const nearConfig = getConfig();

const { nodeUrl } = nearConfig;

const connection = getNearApiConnection(nodeUrl);

/**
 * TODO: Document what this is doing.
 *
 * @param {number} poolId
 * @returns {Promise<[string, string]>}
 */
// eslint-disable-next-line max-lines-per-function
export const getCurrencyByPool = async (poolId: number): Promise<[string, string]> => {
  const currency1 = await PoolsCurrencies.findOne({ pool: poolId, token_account: 1 });
  const currency2 = await PoolsCurrencies.findOne({ pool: poolId, token_account: 2 });
  if (currency1 && currency2) {
    return [currency1.currency, currency2.currency];
  } else {
    const poolsResult = await new nearAPI.Account(connection, '').viewFunction('v2.ref-finance.near', 'get_pools', {
      // TODO: Document what this is doing and why it is hard-coded.
      from_index: poolId,
      limit: 1,
    });
    console.log(poolsResult);
    const ftMetadataResult1 = await new nearAPI.Account(connection, '').viewFunction(poolsResult[0].token_account_ids[0], 'ft_metadata', {});
    // eslint-disable-next-line promise/valid-params
    await PoolsCurrencies.findOneAndUpdate(
      { pool: poolId },
      {
        pool: poolId,
        currency: ftMetadataResult1.symbol,
        name: ftMetadataResult1.name,
        decimals: ftMetadataResult1.decimals,
        contract: poolsResult[0].token_account_ids[0],
        token_account: 1,
      },
      { upsert: true },
    )
      .then()
      .catch((error) => console.error(error));

    const ftMetadataResult2 = await new nearAPI.Account(connection, '').viewFunction(poolsResult[0].token_account_ids[1], 'ft_metadata', {});
    try {
      await PoolsCurrencies.findOneAndUpdate(
        { pool: poolId, contract: poolsResult[0].token_account_ids[1] },
        {
          pool: poolId,
          currency: ftMetadataResult2.symbol,
          contract: poolsResult[0].token_account_ids[1],
          name: ftMetadataResult2.name,
          decimals: ftMetadataResult2.decimals,
          token_account: 2,
        },
        { upsert: true },
      );
    } catch (error) {
      console.error(error);
    }

    return [ftMetadataResult1.symbol, ftMetadataResult2.symbol];
  }
};

async function getCurrencyByContractFromNear(fungibleTokenContractAccountId: AccountId): Promise<{ decimals: any; name: string; symbol: string }> {
  const ftMetadataResult = await new nearAPI.Account(connection, '').viewFunction(fungibleTokenContractAccountId, 'ft_metadata', {});
  const { symbol, name, decimals } = ftMetadataResult;
  return { symbol, name, decimals };
}

export const getCurrencyByContract = async (fungibleTokenContractAccountId: AccountId): Promise<string> => {
  // console.log('getCurrencyByContract', fungibleTokenContractAccountId);
  const currency = await PoolsCurrencies.findOne({ contract: fungibleTokenContractAccountId });
  if (currency) {
    // console.log('Found currency', currency.currency);
    return currency.currency;
  } else {
    try {
      console.log('Using near-api-js to check for the FT symbol for contract', fungibleTokenContractAccountId);
      const { symbol, name, decimals } = await getCurrencyByContractFromNear(fungibleTokenContractAccountId);
      // eslint-disable-next-line promise/valid-params
      await PoolsCurrencies.findOneAndUpdate(
        { contract: fungibleTokenContractAccountId },
        {
          currency: symbol,
          name,
          decimals,
          contract: fungibleTokenContractAccountId,
        },
        { upsert: true },
      );
      console.log('Get currency symbol', symbol);
      return symbol;
    } catch (error) {
      console.error({ nearAPI, error });
    }

    return '';
  }
};

'''
'''--- backend/src/helpers/nearConnection.ts ---
import * as nearAPI from 'near-api-js'; // https://docs.near.org/tools/near-api-js/quick-reference#import
import { InMemoryKeyStore } from 'near-api-js/lib/key_stores/in_memory_key_store.js';
import { type KeyStore } from 'near-api-js/lib/key_stores/keystore.js';

export function getNearApiConnection(nodeUrl: string, keyStore?: KeyStore) {
  const connectionInfo = { url: nodeUrl };
  const provider = new nearAPI.providers.JsonRpcProvider(connectionInfo);
  const signer = new nearAPI.InMemorySigner(keyStore ?? new InMemoryKeyStore());
  const connection = new nearAPI.Connection(nodeUrl, provider, signer);
  // console.log('getNearApiConnection', connection);
  return connection;
}

'''
'''--- backend/src/helpers/syncedCron.ts ---
import cron from 'node-cron'; // https://github.com/node-cron/node-cron

import { logger } from '../../../shared/helpers/logging.js';

import { CRON_SCHEDULE } from './config.js';
import { runAllNonRunningTasks } from './updateTransactions.js';

export const SyncedCron = cron.schedule(
  CRON_SCHEDULE,
  async () => {
    // logger.debug('Awaiting runAllNonRunningTasks() within cron job.');
    const accountsStillRunning = await runAllNonRunningTasks();
    logger.success('Finished awaiting runAllNonRunningTasks. (Finished cron.)', { accountsStillRunning });
  },
  {
    scheduled: false,
  },
);

'''
'''--- backend/src/helpers/updateTransactions.test.ts ---
// Run via `yarn test backend/src/helpers/updateTransactions.test.ts`.

// https://jestjs.io/docs/setup-teardown#scoping
import mongoose, { type Mongoose } from 'mongoose';
import pg from 'pg';

import { subfolder } from '../../../shared/config.js';
import { type RowOfExpectedOutput, type TxActionRow, type AccountId } from '../../../shared/types';
import { getRowsOfExpectedOutput } from '../../data/csvToJson';
import { EXPECTED_OUTPUT_FILENAME } from '../../test_helpers/internal/defineTransactionHashesInSql';
import jsonToCsv from '../../test_helpers/internal/jsonToCsv';
import { seedTheMockIndexerDatabase } from '../../test_helpers/internal/updateTestData';
import { TxActions, convertFromModelToTxActionRow, cleanExpectedOutputFromCsv } from '../models/TxActions';
import { TxTypes } from '../models/TxTypes';

import { addTransactionTypeSqlToDatabase, DOT_SQL, getSqlFolder } from './addDefaultTypesTx';
import { CONNECTION_STRING, DEFAULT_LENGTH, MONGO_CONNECTION_STRING, STATEMENT_TIMEOUT } from './config';
import { updateTransactions } from './updateTransactions';

const prefix = '_tx_'; // This also gets used in the `t` script of `/package.json`.

// eslint-disable-next-line max-lines-per-function
describe('updateTransactions', () => {
  let connection: Mongoose;
  let sqlFolder: string;
  let pgClient: pg.Client;

  beforeAll(async () => {
    // Before any of this suite starts running, connect to Mongo, connect to PostgreSQL, seed the PostgreSQL test database, and close the PostgreSQL test database connection.
    connection = await mongoose.connect(MONGO_CONNECTION_STRING);
    sqlFolder = getSqlFolder(subfolder);
    const txTypesCountDocuments = await TxTypes.countDocuments();
    console.log({ txTypesCountDocuments, CONNECTION_STRING });
    await seedTheMockIndexerDatabase();
    pgClient = new pg.Client({ connectionString: CONNECTION_STRING, statement_timeout: STATEMENT_TIMEOUT });
    await pgClient.connect();
  });

  afterAll(async () => {
    // After all the tests of this suite finish, close the DB connection.
    await connection.disconnect();
    await pgClient.end();
  });

  beforeEach(async () => {
    // At the beginning of each test, clear out the Mongo database.
    await TxTypes.deleteMany({});
    await TxActions.deleteMany({});
  });

  jest.setTimeout(3_000);

  const rowsOfExpectedOutput: RowOfExpectedOutput[] = getRowsOfExpectedOutput(EXPECTED_OUTPUT_FILENAME);

  // console.log({ rowsOfExpectedOutput });

  function getRelevantRowsOfExpectedOutput(accountId: AccountId, txType: string) {
    return rowsOfExpectedOutput.filter((row) => row.accountId === accountId && row.txType === txType).map((row) => cleanExpectedOutputFromCsv(row));
  }

  async function runTest(accountId: AccountId, txType: string) {
    test(`${prefix} ${txType}`, async () => {
      const file = `${txType}${DOT_SQL}`;
      await addTransactionTypeSqlToDatabase(sqlFolder, file);
      await updateTransactions(pgClient, accountId, txType, DEFAULT_LENGTH);
      const txActions = await TxActions.find({
        accountId,
        txType,
      }).sort([['block_timestamp', -1]]);
      const txActionsConverted: TxActionRow[] = [];
      for (const txAction of txActions) {
        const txActionConverted = convertFromModelToTxActionRow(txAction);
        txActionsConverted.push(txActionConverted);
      }

      // console.log({ txActionsConverted });
      const relevantRowsOfExpectedOutput = getRelevantRowsOfExpectedOutput(accountId, txType);
      expect(txActionsConverted).toEqual(relevantRowsOfExpectedOutput.sort((a, b) => b.block_timestamp - a.block_timestamp));
    });
  }

  for (const rowOfExpectedOutput of rowsOfExpectedOutput) {
    // eslint-disable-next-line @typescript-eslint/naming-convention
    const { accountId, txType, transaction_hash } = rowOfExpectedOutput;
    if (txType) {
      runTest(accountId, txType)
        // eslint-disable-next-line promise/prefer-await-to-then
        .then((result) => {
          // console.log({ result });
        })
        // eslint-disable-next-line promise/prefer-await-to-then
        .catch((error) => {
          console.error({ error });
        });
    } else {
      // eslint-disable-next-line @typescript-eslint/no-loop-func
      test(`${prefix} ${transaction_hash}`, () => {
        const hint = 'Where is the txType etc?'; // This test is kind of a fake test just to highlight within the test results (via test failure) that something unexpected is happening here. We don't actually expect transaction_hash to equal `hint`.
        expect(transaction_hash).toEqual(hint);
      });
    }
  }

  test('overwrite possibleExpectedOutput', async () => {
    const txActionsConverted: TxActionRow[] = [];
    for (const rowOfExpectedOutput of rowsOfExpectedOutput) {
      const { accountId, txType } = rowOfExpectedOutput;
      if (txType) {
        const file = `${txType}${DOT_SQL}`;
        await addTransactionTypeSqlToDatabase(sqlFolder, file);
        await updateTransactions(pgClient, accountId, txType, DEFAULT_LENGTH);
        const txActions = await TxActions.find({
          accountId,
          txType,
        }).sort([['block_timestamp', -1]]);

        for (const txAction of txActions) {
          const txActionConverted = convertFromModelToTxActionRow(txAction);
          txActionsConverted.push(txActionConverted);
        }
      }
    }

    // console.log('json', JSON.stringify(txActionsConverted, null, 2));
    jsonToCsv(txActionsConverted);
    console.log(
      "If you overwrite `expectedOutput.csv` via `cp backend/test_helpers/internal/possibleExpectedOutput.csv backend/test_helpers/expectedOutput.csv`, the tests will pass. Obviously, you'll need to manually check whether those values are accurate.",
    );
    expect(true).toEqual(true);
  });
});

'''
'''--- backend/src/helpers/updateTransactions.ts ---
/* eslint no-use-before-define: "error"*/
import { performance } from 'perf_hooks';

import { type Request, type Response } from 'express';
import pg, { type Client } from 'pg';

import { getFormattedDatetimeUtcFromBlockTimestamp, millisToMinutesAndSeconds } from '../../../shared/helpers/datetime.js';
import { logger } from '../../../shared/helpers/logging.js';
import { OK, SERVER_ERROR } from '../../../shared/helpers/statusCodes.js';
import { type AccountId, type TxActionRow, type TxTypeRow } from '../../../shared/types';
import { TxActions, getTxActionModel } from '../models/TxActions.js';
import { TxTasks } from '../models/TxTasks.js';
import { TxTypes } from '../models/TxTypes.js';

import { CONNECTION_STRING, CONNECTION_TIMEOUT, DEFAULT_LENGTH, QUERY_TIMEOUT, STATEMENT_TIMEOUT } from './config.js';
import { getCurrencyByPool, getCurrencyByContract } from './getCurrency.js';

/**
 * For this particular accountId, sorts all transactions of this type by their block timestamp and returns the most recent one (or zero if none found).
 * This is useful for filtering indexer queries to exclude transactions that have already been saved to the cache.
 */
async function getMostRecentBlockTimestamp(accountId: AccountId, txType: string): Promise<number> {
  const mostRecentTxAction = await TxActions.findOne({
    accountId,
    txType,
  }).sort({ block_timestamp: 'desc' });
  const mostRecentBlockTimestamp = mostRecentTxAction ? mostRecentTxAction.block_timestamp : 0;
  // logger.info(`getMostRecentBlockTimestamp(${accountId}, ${txType})`, mostRecentBlockTimestamp);
  return Number(mostRecentBlockTimestamp); // backend/src/models/TxActions.js uses Decimal128 for this field, which React can't display. https://thecodebarbarian.com/a-nodejs-perspective-on-mongodb-34-decimal.html
}

/**
 * Run the SQL query of this transaction type to check whether the indexer has any transactions of this
 * type for this accountId (in the period defined by blockTimestamp and length).
 */
async function getTransactionsFromIndexer(pgClient: Client, accountId: AccountId, txType: TxTypeRow, blockTimestamp: number, length: number): Promise<TxActionRow[]> {
  try {
    logger.info(accountId, `getTransactionsFromIndexer(${accountId}, ${txType.name}, ${getFormattedDatetimeUtcFromBlockTimestamp(blockTimestamp)}, ${length})`);
    const startTime = performance.now();
    const result = await pgClient.query(txType.sql, [accountId, blockTimestamp.toString(), length]);
    const endTime = performance.now();
    logger.info(
      accountId,
      `pgClient performance of getTransactionsFromIndexer(${accountId}, ${txType.name}, ${getFormattedDatetimeUtcFromBlockTimestamp(blockTimestamp)}, ${length})`,
      millisToMinutesAndSeconds(endTime - startTime),
    );
    const rows = result.rows as unknown as TxActionRow[];
    logger.info(accountId, `${txType.name} rows`, JSON.stringify(rows));
    return rows;
  } catch (error) {
    logger.error(`getTransactionsFromIndexer(${accountId}, ${txType.name}`, error);
    return [];
  }
}

/**
 * Having found a relevant transaction on the Postgres indexer, this function saves it to the Mongo cache (doing extra currency processing as necessary).
 */
async function saveTransactionFromIndexerToCache(accountId: AccountId, txType: string, transaction: TxActionRow): Promise<void> {
  logger.info(accountId, 'saveTransactionFromIndexerToCache: ', accountId, transaction.transaction_hash, getFormattedDatetimeUtcFromBlockTimestamp(transaction.block_timestamp));
  const clonedTransaction = { ...transaction };
  if (clonedTransaction.get_currency_by_contract) {
    logger.info(accountId, 'fungibleTokenContractAccountId', clonedTransaction.get_currency_by_contract);

    // eslint-disable-next-line canonical/id-match
    clonedTransaction.currency_transferred = await getCurrencyByContract(clonedTransaction.get_currency_by_contract);
  }

  if (clonedTransaction.pool_id) {
    [clonedTransaction.currency_transferred, clonedTransaction.currency_transferred2] = await getCurrencyByPool(Number(clonedTransaction.pool_id));
  }

  try {
    await TxActions.findOneAndUpdate({ transaction_hash: clonedTransaction.transaction_hash, txType }, getTxActionModel(accountId, txType, clonedTransaction), { upsert: true });
    logger.info(accountId, `Saved to Mongo cache (TxActions): ${accountId} ${clonedTransaction.transaction_hash}`);
  } catch (error) {
    logger.error(error);
  }
}

// eslint-disable-next-line max-lines-per-function
export async function updateTransactions(pgClient: pg.Client, accountId: AccountId, txTypeName: string, length: number): Promise<void> {
  logger.info(accountId, `updateTransactions(${accountId}, ${txTypeName})`);
  const txType: TxTypeRow | null = await TxTypes.findOne({ name: txTypeName });
  if (txType) {
    let minBlockTimestamp = await getMostRecentBlockTimestamp(accountId, txTypeName);
    //  logger.info({ minBlockTimestamp });

    logger.debug(accountId, 'Awaiting getTransactions', accountId, txType.name);
    let transactions = await getTransactionsFromIndexer(pgClient, accountId, txType, minBlockTimestamp, length);
    // logger.info({ transactions });
    logger.info(accountId, `Starting the 'while' loop of updateTransactions ${txTypeName}`);
    while (transactions.length > 0) {
      const promises: Array<Promise<void>> = [];
      logger.info(accountId, `Pushing all saveTransactionFromIndexerToCache promises for ${accountId} ${txTypeName}.`);

      for (const transaction of transactions) {
        logger.info(accountId, 'About to call saveTransactionFromIndexerToCache', transaction.transaction_hash);
        const promise = saveTransactionFromIndexerToCache(accountId, txTypeName, transaction);
        promises.push(promise);
      }

      // logger.success('Finished the `for` loop of pushing saveTransactionFromIndexerToCache promises (but not the `while` loop).');
      logger.debug(accountId, `Awaiting all updateTransactions promises for ${accountId} ${txTypeName}.`);
      await Promise.all(promises);
      logger.success(accountId, `Finished awaiting all promises (but still in the 'while' loop) for ${accountId} ${txTypeName}.`);
      // -------------------------------------------------
      // TODO: Document what is happening in this section:
      let nextBlockTimestamp = transactions[transactions.length - 1].block_timestamp;
      let index = 1;
      while (nextBlockTimestamp === minBlockTimestamp && transactions.length === length * index) {
        index += 1;
        const increasedLength = length * index;
        transactions = await getTransactionsFromIndexer(pgClient, accountId, txType, minBlockTimestamp, increasedLength);
        nextBlockTimestamp = transactions[transactions.length - 1].block_timestamp;
      }

      if (nextBlockTimestamp === minBlockTimestamp) {
        break;
      }

      if (index === 1) {
        minBlockTimestamp = nextBlockTimestamp;
        transactions = await getTransactionsFromIndexer(pgClient, accountId, txType, minBlockTimestamp, length);
      }
      // -------------------------------------------------
    }

    logger.success(accountId, `Finished the 'while' loop of updateTransactions ${accountId} ${txTypeName}`);
  } else {
    logger.error(accountId, `updateTransactions: txType ${txTypeName} not found`);
  }
}

/**
 * Run the SQL query for each of these transaction types to find any matching transactions on the indexer that the cache doesn't already have.
 * This is the only app function that uses the pg connection.
 */
async function fetchTransactionsForTheseTypes(accountId: AccountId, types: TxTypeRow[]): Promise<void> {
  const pgClient = new pg.Client({
    connectionString: CONNECTION_STRING,
    statement_timeout: STATEMENT_TIMEOUT,
    connectionTimeoutMillis: CONNECTION_TIMEOUT,
    query_timeout: QUERY_TIMEOUT,
  });
  await pgClient.connect();
  // logger.info('pgClient connected');
  const promisesOfAllTasks: Array<Promise<void>> = [];
  logger.info(accountId, 'pushing all updateTransactions.');
  for (const type of types) {
    const promise = updateTransactions(pgClient, accountId, type.name, DEFAULT_LENGTH);
    promisesOfAllTasks.push(promise);
  }

  logger.debug(accountId, `Awaiting all updateTransactions promises for ${accountId}.`);
  await Promise.all(promisesOfAllTasks);
  logger.success(accountId, `Finished awaiting all updateTransactions promises for ${accountId}.`);
  await pgClient.end();
}

/**
 *
 * For this accountId, call updateTransactions for each of the provided transaction types. When they've all finished, mark this account as updated.
 */
// eslint-disable-next-line max-lines-per-function
async function updateThisAccount(accountId: AccountId, types: TxTypeRow[]): Promise<void> {
  logger.info(accountId, 'inside updateThisAccount');
  try {
    const txTask = await TxTasks.findOne({ accountId });
    if (txTask) {
      // logger.info('found a task', txTask.id);
      if (txTask.isRunning === false) {
        // logger.info('isRunning === false');
        await TxTasks.findOneAndUpdate(
          { accountId },
          {
            isRunning: true,
          },
        );
        await fetchTransactionsForTheseTypes(accountId, types);
        try {
          await TxTasks.findOneAndUpdate(
            { accountId: txTask.accountId },
            {
              lastUpdate: Math.floor(Date.now()),
              isRunning: false,
            },
          );
        } catch (error) {
          logger.error(error);
        }
      }
    } else {
      throw new Error(`accountId '${accountId}' not found.`);
    }
  } catch (error) {
    logger.error(error);
    throw new Error('Please try again.');
  }
}

/**
 *
 * During server startup, a folder of SQL queries gets read and saved into the Mongo cache, defining the various transaction types.
 * These transaction types should be mutually exclusive and collectively exhaustive.
 */
async function getAllTypes(): Promise<TxTypeRow[]> {
  const types: TxTypeRow[] = await TxTypes.find({});
  return types;
}

/**
 *
 * Simple API endpoint for calling updateThisAccount via  accountId parameter.
 */
export const runTaskForThisAccount = async (request: Request, response: Response): Promise<void> => {
  try {
    const types = await getAllTypes();
    const { accountId } = request.body;
    logger.info('updateThisAccount', { accountId });
    await updateThisAccount(accountId, types);
    response.send(OK);
  } catch (error) {
    logger.error(error);
    response.status(SERVER_ERROR).send({ error });
  }
};

/**
 * The cron job periodically calls this function, which calls updateThisAccount for any account that isn't already running from a previous call.
 */
export const runAllNonRunningTasks = async (): Promise<string[]> => {
  const promisesOfAllTasks: Array<Promise<void>> = [];
  const accountsStillRunning: string[] = [];
  try {
    const [types, tasks] = await Promise.all([getAllTypes(), TxTasks.find({})]);
    logger.info(
      `types`,
      types.map((type) => type.name),
    );
    logger.info(
      `tasks`,
      tasks.map((task) => task.accountId),
    );

    for (const task of tasks) {
      if (task.isRunning) {
        accountsStillRunning.push(task.accountId);
      } else {
        logger.info(task.accountId, 'pushing updateThisAccount');
        const promise = updateThisAccount(task.accountId, types);
        promisesOfAllTasks.push(promise);
      }
    }

    // logger.info('All promises have been started in runAllNonRunningTasks.');
  } catch (error) {
    logger.error(error);
  }

  // eslint-disable-next-line @typescript-eslint/require-array-sort-compare
  accountsStillRunning.sort();
  // logger.debug('Awaiting all runThisTaskByAccountId promises.');
  await Promise.all(promisesOfAllTasks);
  logger.success('Finished awaiting all runThisTaskByAccountId promises.', { accountsStillRunning });
  return accountsStillRunning;
};

'''
'''--- backend/src/index.ts ---
import cors from 'cors';
import express from 'express';
import mongoose from 'mongoose';

import { logger } from '../../shared/helpers/logging.js';

import { addDefaultTypesTx } from './helpers/addDefaultTypesTx.js';
import { MONGO_CONNECTION_STRING, PORT } from './helpers/config.js';
import { SyncedCron } from './helpers/syncedCron.js';
import { runAllNonRunningTasks } from './helpers/updateTransactions.js';
import { routes } from './routes/collector.routes.js';

await mongoose.connect(MONGO_CONNECTION_STRING);
const app = express();
app.use(cors());
app.use(express.json());

routes(app);
app.listen(PORT);

await addDefaultTypesTx();

// logger.debug('Awaiting runAllNonRunningTasks().');
await runAllNonRunningTasks(); // Call once before cron job even starts.

SyncedCron.start();

'''
'''--- backend/src/models/PoolsCurrencies.ts ---
import mongoose from 'mongoose';

const {Schema, model} = mongoose;

const schema = new Schema({
    pool: {type: Number, index: true, required: false},
    contract: {type: String, index: true, required: true},
    token_account: {type: Number, required: false},
    decimals: {type: Number, required: false},
    name: {type: String, required: false},
    currency: {type: String, required: true},
});

export const PoolsCurrencies = model('PoolsCurrencies', schema, 'PoolsCurrencies');

'''
'''--- backend/src/models/TxActions.ts ---
import mongoose from 'mongoose';

import { getFormattedDatetimeUtcFromBlockTimestamp } from '../../../shared/helpers/datetime.js';
import { type AccountId, type TxActionModel, type TxActionRow } from '../../../shared/types';

const { Schema, model } = mongoose;

const schema = new Schema({
  accountId: { type: String, index: true, required: true },
  txType: { type: String, index: true, required: true },
  block_timestamp: { type: mongoose.Schema.Types.Decimal128, index: true }, // TODO: Should we change this to string?
  from_account: { type: String },
  block_height: { type: Number }, // TODO: Should we change this to string?
  args_base64: { type: String },
  transaction_hash: { type: String },
  amount_transferred: { type: String },
  currency_transferred: { type: String },
  amount_transferred2: { type: String },
  currency_transferred2: { type: String },
  receiver_owner_account: { type: String },
  receiver_lockup_account: { type: String },
  lockup_start: { type: String },
  lockup_duration: { type: String },
  cliff_duration: { type: String },
  release_duration: { type: String },
});

export const TxActions = model('TxActions', schema, 'TxActions');

// -----------------------------------------------------------------------------------------------
// TODO: Figure out these functions. Reduce duplication with functions elsewhere.
export function convertFromModelToTxActionRow(txActionModel: TxActionModel): TxActionRow {
  return {
    accountId: txActionModel.accountId ?? '',
    txType: txActionModel.txType ?? '',
    block_timestamp: Number(txActionModel.block_timestamp) ?? null, // backend/src/models/TxActions.js uses Decimal128 for this field, which React can't display. https://thecodebarbarian.com/a-nodejs-perspective-on-mongodb-34-decimal.html
    block_timestamp_utc: txActionModel.block_timestamp ? getFormattedDatetimeUtcFromBlockTimestamp(txActionModel.block_timestamp) : '',
    from_account: txActionModel.from_account ?? '',
    block_height: txActionModel.block_height ?? null,
    args_base64: txActionModel.args_base64 ?? '',
    transaction_hash: txActionModel.transaction_hash ?? '',
    amount_transferred: txActionModel.amount_transferred ?? '',
    currency_transferred: txActionModel.currency_transferred ?? '',
    amount_transferred2: txActionModel.amount_transferred2 ?? '',
    currency_transferred2: txActionModel.currency_transferred2 ?? '',
    receiver_owner_account: txActionModel.receiver_owner_account ?? '',
    receiver_lockup_account: txActionModel.receiver_lockup_account ?? '',
    lockup_start: txActionModel.lockup_start ?? '',
    lockup_duration: txActionModel.lockup_duration ?? '',
    cliff_duration: txActionModel.cliff_duration ?? '',
    release_duration: txActionModel.release_duration ?? '',
  };
}

export function getTxActionModel(accountId: AccountId, txType: string, transaction: TxActionRow): TxActionModel {
  return {
    accountId,
    txType,
    block_timestamp: transaction.block_timestamp,
    from_account: transaction.from_account,
    block_height: transaction.block_height,
    args_base64: transaction.args_base64,
    transaction_hash: transaction.transaction_hash,
    amount_transferred: transaction.amount_transferred,
    currency_transferred: transaction.currency_transferred,
    amount_transferred2: transaction.amount_transferred2,
    currency_transferred2: transaction.currency_transferred2,
    receiver_owner_account: transaction.receiver_owner_account,
    receiver_lockup_account: transaction.receiver_lockup_account,
    lockup_start: transaction.lockup_start,
    lockup_duration: transaction.lockup_duration,
    cliff_duration: transaction.cliff_duration,
    release_duration: transaction.release_duration,
  };
}

export function cleanExpectedOutputFromCsv(row: any): TxActionRow {
  // This function exists because of `parseNumbers: false` in `backend/test_helpers/internal/csvToJson.ts`. See comments above about eventually converting these fields to strings in the model.
  const result = { ...row };
  // eslint-disable-next-line canonical/id-match
  result.block_height = Number(result.block_height);
  // eslint-disable-next-line canonical/id-match
  result.block_timestamp = Number(result.block_timestamp);
  return result;
}
// -----------------------------------------------------------------------------------------------

'''
'''--- backend/src/models/TxTasks.ts ---
import mongoose from 'mongoose';

const {Schema, model} = mongoose;

const schema = new Schema({
    accountId: {
        type: String,
        index: true,
        required: true,
        unique: true,
    },
    lastUpdate: {
        type: Number,
        default: 0,
    },
    isRunning: {
        type: Boolean,
        index: true,
        default: false,
    }
});

export const TxTasks = model('TxTasks', schema, 'TxTasks');

'''
'''--- backend/src/models/TxTypes.ts ---
import mongoose from 'mongoose';

const {Schema, model} = mongoose;

const schema = new Schema({
    name: {
        type: String, unique: true, index: true
    },
    sql: {type: String},
});

export const TxTypes = model('TxTypes', schema, 'TxTypes');

'''
'''--- backend/src/routes/collector.routes.ts ---
import { runTaskForThisAccount } from '../helpers/updateTransactions.js';
import { addTasks } from '../services/addTasks.js';
import { deleteAccountData } from '../services/deleteAccountData.js';
import { getAccounts } from '../services/getAccounts.js';
import { getTransactions } from '../services/getTransactions.js';
import { getTypes } from '../services/getTypes.js';

export const routes = (app) => {
  app.post('/transactions', getTransactions);
  app.get('/types', getTypes);
  app.post('/accounts', getAccounts);
  app.post('/addTasks', addTasks);
  app.post('/runTaskForThisAccount', runTaskForThisAccount);
  app.post('/deleteAccountData', deleteAccountData);
};

'''
'''--- backend/src/services/addTasks.ts ---
import { type Request, type Response } from 'express';
import * as nearAPI from 'near-api-js'; // https://docs.near.org/tools/near-api-js/quick-reference#import

import getConfig from '../../../shared/config.js';
import { BAD_REQUEST, OK, SERVER_ERROR } from '../../../shared/helpers/statusCodes.js';
import { type AccountId } from '../../../shared/types';
import { getNearApiConnection } from '../helpers/nearConnection.js';
import { TxTasks } from '../models/TxTasks.js';

const nearConfig = getConfig();

const { nodeUrl } = nearConfig;

const TOP_LEVEL_DOMAIN = 'near'; // Should this come from shared/config.ts?
const TOP_LEVEL_ACCOUNT_SUFFIX = `.${TOP_LEVEL_DOMAIN}`;

const connection = getNearApiConnection(nodeUrl);

const accountExists = async (accountId: AccountId): Promise<boolean> => {
  try {
    await new nearAPI.Account(connection, accountId).state();
    return true;
  } catch {
    return false;
  }
};

export async function addTaskForAccount(accountId: AccountId): Promise<void> {
  await TxTasks.findOneAndUpdate({ accountId }, { accountId }, { upsert: true });
}

// eslint-disable-next-line consistent-return
export const addTasks = async (request: Request, response: Response): Promise<void> => {
  const { accountId } = request.body;
  console.log('addTasks', { accountId });
  try {
    if (!accountId.endsWith(TOP_LEVEL_ACCOUNT_SUFFIX) && accountId !== TOP_LEVEL_DOMAIN) {
      response.status(BAD_REQUEST).send({ error: `Not allowed. Account ID must end with '${TOP_LEVEL_ACCOUNT_SUFFIX}'.` });
      return;
    }

    if (!(await accountExists(accountId))) {
      response.status(BAD_REQUEST).send({ error: `Account does not exist in ${nodeUrl}.` });
      return;
    }

    await addTaskForAccount(accountId);

    response.send(OK);
  } catch (error) {
    console.error(error);
    response.status(SERVER_ERROR).send({ error });
  }
};

'''
'''--- backend/src/services/deleteAccountData.ts ---
import { type Request, type Response } from 'express';

import { OK, SERVER_ERROR } from '../../../shared/helpers/statusCodes.js';
import { stringToBoolean } from '../../../shared/helpers/strings.js';
import { TxActions } from '../models/TxActions.js';
import { TxTasks } from '../models/TxTasks.js';

const ALLOW_DELETING_FROM_DATABASE = stringToBoolean(process.env.ALLOW_DELETING_FROM_DATABASE ?? 'false');

// eslint-disable-next-line consistent-return
export const deleteAccountData = async (request: Request, response: Response) => {
  const { accountId } = request.body;
  console.log('deleteAccountData', { accountId });
  try {
    if (!ALLOW_DELETING_FROM_DATABASE) {
      throw new Error('ALLOW_DELETING_FROM_DATABASE is not enabled.');
    }

    await TxTasks.deleteMany({ accountId });
    await TxActions.deleteMany({ accountId });

    response.send(OK);
  } catch (error) {
    console.error(error);
    response.status(SERVER_ERROR).send({ error });
  }
};

'''
'''--- backend/src/services/getAccounts.ts ---
import { type Response, type Request } from 'express';

import { getFormattedUtcDatetime } from '../../../shared/helpers/datetime.js';
import { type AccountStatus } from '../../../shared/types';
import { respondWithServerError } from '../helpers/errors.js';
import { TxActions } from '../models/TxActions.js';
import { TxTasks } from '../models/TxTasks.js';

import { addTaskForAccount } from './addTasks.js';

// eslint-disable-next-line max-lines-per-function
export const getAccounts = async (request: Request, response: Response) => {
  const { body } = request;
  const { accountIds } = body;
  console.log(`getAccounts. body=${JSON.stringify(body)}`);
  try {
    const accounts: AccountStatus[] = [];
    for (const accountId of accountIds) {
      console.log('getAccounts', accountId);
      const txTaskForAccount = await TxTasks.findOne({ accountId }).select({ __v: 0, _id: 0 });
      const transactions = await TxActions.findOne({ accountId });
      let lastUpdate = '';
      let status = 'Pending';
      if (txTaskForAccount) {
        // if (txTaskForAccount.lastUpdate === 0) status = 'Pending';
        if (txTaskForAccount.isRunning) {
          status = 'In progress';
        } else if (transactions) {
          status = 'Done';
        } else if (!transactions && txTaskForAccount.lastUpdate > 0) {
          status = 'No data';
        }

        if (txTaskForAccount.lastUpdate > 0) {
          lastUpdate = getFormattedUtcDatetime(new Date(txTaskForAccount.lastUpdate));
        }
      } else {
        // Here, it seems that the frontend localStorage had 1 or more account IDs that are missing from the Mongo cache called TxTasks. Automatically add the corresponding TxTask as necessary:
        status = 'The cache for this account seems missing. Re-downloading account data now. You can refresh this page soon to check.';

        addTaskForAccount(accountId)
          // eslint-disable-next-line promise/prefer-await-to-then, @typescript-eslint/no-empty-function
          .then((value: any) => {})
          // eslint-disable-next-line promise/prefer-await-to-then
          .catch((error) => {
            console.error(error);
          });
      }

      accounts.push({ accountId, lastUpdate, status });
      console.log(accounts);
    }

    response.send({ accounts });
  } catch (error) {
    respondWithServerError(response, error);
  }
};

'''
'''--- backend/src/services/getTransactions.ts ---
import { type Request, type Response } from 'express';

import { getRangeFilter } from '../../../shared/helpers/datetime.js';
import { type TxActionRow, type TxActionsFilter } from '../../../shared/types';
import { respondWithServerError } from '../helpers/errors.js';
import { convertFromModelToTxActionRow, TxActions } from '../models/TxActions.js';
import { TxTasks } from '../models/TxTasks.js';

// eslint-disable-next-line max-lines-per-function, complexity
export const getTransactions = async (request: Request, response: Response) => {
  try {
    const { body } = request;
    const datetimeRangeFilter = getRangeFilter(body.startDate, body.endDate);
    console.log({ datetimeRangeFilter });
    let filter: TxActionsFilter = {
      accountId: body.accountId,
      block_timestamp: datetimeRangeFilter,
    };
    if (body.types.length > 0) {
      filter = { ...filter, txType: body.types };
    }

    const transactions: TxActionRow[] = await TxActions.find(filter).sort({ block_timestamp: -1 });
    const task = await TxTasks.findOne({ accountId: body.accountId }).select({ _id: 0 });

    const cleanedTransactions: TxActionRow[] = [];
    // eslint-disable-next-line array-callback-return
    for (const transaction of transactions) {
      const txActionRow = convertFromModelToTxActionRow(transaction);
      cleanedTransactions.push(txActionRow);
    }

    response.send({ lastUpdate: task ? task.lastUpdate : null, transactions: cleanedTransactions });
  } catch (error) {
    respondWithServerError(response, error);
  }
};

'''
'''--- backend/src/services/getTypes.ts ---
import { type Request, type Response } from 'express';

import { respondWithServerError } from '../helpers/errors.js';
import { TxTypes } from '../models/TxTypes.js';

export const getTypes = async (request: Request, response: Response) => {
  try {
    const types = await TxTypes.aggregate([
      {
        $project: {
          _id: 0,
          label: '$name',
          value: '$name',
        },
      },
    ]);
    // console.log(types);
    response.send({ types });
  } catch (error) {
    respondWithServerError(response, error);
  }
};

'''
'''--- backend/test_helpers/internal/defineTransactionHashesInSql.ts ---
/* This file gets called automatically via updateTestData.sh.
 It can also be called manually via `yarn ts-node  --esm ./backend/test_helpers/internal/defineTransactionHashesInSql.ts`.
 It finds all of the transaction hashes of './backend/test_helpers/expectedOutput.csv' and uses them while crafting a "CREATE TEMP 
 TABLE" SQL query that gets saved to './backend/test_helpers/internal/transactionHashes.sql', which then will be concatenated with 
 `backend/data/tableDefinitions.sql` from within `backend/test_helpers/updateTestData.sh`. */

import fs from 'node:fs';

import { subfolder } from '../../../shared/config.js';
import { getRowsOfExpectedOutput } from '../../data/csvToJson.js';

const transactionHashesFilename = `./${subfolder}test_helpers/internal/transactionHashes.sql`;
export const EXPECTED_OUTPUT_FILENAME = 'test_helpers/expectedOutput.csv';
const rowsOfExpectedOutput = getRowsOfExpectedOutput(EXPECTED_OUTPUT_FILENAME);

// console.log({ rowsOfExpectedOutput });

const transactionHashes: Set<string> = new Set();
for (const rowOfExpectedOutput of rowsOfExpectedOutput) {
  transactionHashes.add(`('${rowOfExpectedOutput.transaction_hash}')`);
}

const sqlOutput = `DROP TABLE IF EXISTS transactionHashes;
CREATE TEMP TABLE transactionHashes AS
WITH t (transactionHash) AS (
 VALUES
 ${Array.from(transactionHashes).join(',\n')}
 )
SELECT * FROM t;`;
// console.log(sqlOutput);

fs.writeFileSync(transactionHashesFilename, sqlOutput);

'''
'''--- backend/test_helpers/internal/jsonToCsv.ts ---
import fs from 'node:fs';

// eslint-disable-next-line canonical/id-match
import json2csv from 'csvjson-json2csv'; // https://www.npmjs.com/package/csvjson-json2csv

import { subfolder } from '../../../shared/config.js';

const csvFilename = `./${subfolder}test_helpers/internal/possibleExpectedOutput.csv`;

export default function jsonToCsv(object: any) {
  const csv = json2csv(object, { output_csvjson_variant: false, flatten: false, separator: ',' });
  // console.log(csv);

  fs.writeFileSync(csvFilename, csv, 'utf8');
}

'''
'''--- backend/test_helpers/internal/testData.sql ---

DROP TABLE IF EXISTS action_receipt_actions; CREATE TABLE action_receipt_actions (
    receipt_id text,
    index_in_action_receipt integer,
    action_kind text,
    args jsonb,
    receipt_predecessor_account_id text,
    receipt_receiver_account_id text,
    receipt_included_in_block_timestamp numeric(20,0)
);

DROP TABLE IF EXISTS blocks; CREATE TABLE blocks (
    block_height numeric(20,0),
    block_hash text,
    prev_block_hash text,
    block_timestamp numeric(20,0),
    total_supply numeric(45,0),
    gas_price numeric(45,0),
    author_account_id text
);

DROP TABLE IF EXISTS execution_outcomes; CREATE TABLE execution_outcomes (
    receipt_id text,
    executed_in_block_hash text,
    executed_in_block_timestamp numeric(20,0),
    index_in_chunk integer,
    gas_burnt numeric(20,0),
    tokens_burnt numeric(45,0),
    executor_account_id text,
    status text,
    shard_id numeric(20,0)
);

DROP TABLE IF EXISTS receipts; CREATE TABLE receipts (
    receipt_id text,
    included_in_block_hash text,
    included_in_chunk_hash text,
    index_in_chunk integer,
    included_in_block_timestamp numeric(20,0),
    predecessor_account_id text,
    receiver_account_id text,
    receipt_kind text,
    originated_from_transaction_hash text
);

DROP TABLE IF EXISTS transaction_actions; CREATE TABLE transaction_actions (
    transaction_hash text,
    index_in_transaction integer,
    action_kind text,
    args jsonb
);

DROP TABLE IF EXISTS transactions; CREATE TABLE transactions (
    transaction_hash text,
    included_in_block_hash text,
    included_in_chunk_hash text,
    index_in_chunk integer,
    block_timestamp numeric(20,0),
    signer_account_id text,
    signer_key text,
    nonce numeric(20,0),
    receiver_account_id text,
    signature text,
    status text,
    converted_into_receipt_id text,
    receipt_conversion_gas_burnt numeric(20,0),
    receipt_conversion_tokens_burnt numeric(45,0)
);

INSERT INTO action_receipt_actions (receipt_id, index_in_action_receipt, action_kind, args, receipt_predecessor_account_id, receipt_receiver_account_id, receipt_included_in_block_timestamp) VALUES ('6zvAVR5e3D1XkHVNXKG8aNxuv2uXFSRUXPhLV2UZuehb', 0, 'FUNCTION_CALL', '{"gas": 15000000000000, "deposit": "1", "args_json": {"amount": "17500000000", "receiver_id": "nf-payments2.near"}, "args_base64": "eyJhbW91bnQiOiIxNzUwMDAwMDAwMCIsInJlY2VpdmVyX2lkIjoibmYtcGF5bWVudHMyLm5lYXIifQ==", "method_name": "ft_transfer"}', 'nf-payments.near', 'a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48.factory.bridge.near', 1659425577670677628);
INSERT INTO action_receipt_actions (receipt_id, index_in_action_receipt, action_kind, args, receipt_predecessor_account_id, receipt_receiver_account_id, receipt_included_in_block_timestamp) VALUES ('FzessKQqsbb3hzKxm9a8uYDURk7hSpt1uUtBn14jCLHW', 0, 'FUNCTION_CALL', '{"gas": 100000000000000, "deposit": "12280000000000000000000", "args_json": {"receiver_id": "newafro.near", "token_series_id": "398686"}, "args_base64": "eyJ0b2tlbl9zZXJpZXNfaWQiOiIzOTg2ODYiLCJyZWNlaXZlcl9pZCI6Im5ld2Fmcm8ubmVhciJ9", "method_name": "nft_buy"}', 'newafro.near', 'x.paras.near', 1653552561360310122);
INSERT INTO action_receipt_actions (receipt_id, index_in_action_receipt, action_kind, args, receipt_predecessor_account_id, receipt_receiver_account_id, receipt_included_in_block_timestamp) VALUES ('HpMfG5HTjVEmw2PBq7J8tBy9k4pemr1j2emtLaCEu8FW', 0, 'FUNCTION_CALL', '{"gas": 100000000000000, "deposit": "100000000000000000000000", "args_json": {"new_account_id": "newafro.near", "new_key": "2LtNBZGX3xCw9Jm4ngws8TMUy2JkWApHMhsg6PU9QtAN"}, "args_base64": "eyJuZXdfYWNjb3VudF9pZCI6Im5ld2Fmcm8ubmVhciIsIm5ld19wdWJsaWNfa2V5IjoiMkx0TkJaR1gzeEN3OUptNG5nd3M4VE1VeTJKa1dBcEhNaHNnNlBVOVF0QU4ifQ==", "method_name": "create_account"}', '54a698eae4063a944e673debe90a0287fdc278250179e3c1d580ec418f36e79b', 'near', 1646393106196645500);
INSERT INTO action_receipt_actions (receipt_id, index_in_action_receipt, action_kind, args, receipt_predecessor_account_id, receipt_receiver_account_id, receipt_included_in_block_timestamp) VALUES ('znZaVgBnZ7gWHBXGUpp49DRurMpx9behKovpyujPRkP', 0, 'FUNCTION_CALL', '{"gas": 300000000000000, "deposit": "0", "args_json": {"accounts": [{"amount": "100000000000000000000000", "account_id": "gus.near"}, {"amount": "100000000000000000000000", "account_id": "linkdropping.near"}]}, "args_base64": "eyJhY2NvdW50cyI6W3siYWNjb3VudF9pZCI6Imd1cy5uZWFyIiwiYW1vdW50IjoiMTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwIn0seyJhY2NvdW50X2lkIjoibGlua2Ryb3BwaW5nLm5lYXIiLCJhbW91bnQiOiIxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAifV19", "method_name": "multisend_from_balance_unsafe"}', 'newafro.near', 'multisender.app.near', 1646729130380275492);
INSERT INTO action_receipt_actions (receipt_id, index_in_action_receipt, action_kind, args, receipt_predecessor_account_id, receipt_receiver_account_id, receipt_included_in_block_timestamp) VALUES ('43V76aigJJyRPprBj5S472BkRcPoodkbTK33QxWPd6NA', 0, 'FUNCTION_CALL', '{"gas": 125000000000000, "deposit": "0", "args_json": {}, "args_base64": "e30=", "method_name": "unstake_all"}', 'newafro.near', 'stardust.poolv1.near', 1646729710158166900);
INSERT INTO action_receipt_actions (receipt_id, index_in_action_receipt, action_kind, args, receipt_predecessor_account_id, receipt_receiver_account_id, receipt_included_in_block_timestamp) VALUES ('G4HpHm39jUamQ8oRv939aJqWx5wKq2BZkSZVg9KK3AgV', 0, 'FUNCTION_CALL', '{"gas": 180000000000000, "deposit": "1", "args_json": {"msg": "{\\\"force\\\":0,\\\"actions\\\":[{\\\"pool_id\\\":3,\\\"token_in\\\":\\\"wrap.near\\\",\\\"token_out\\\":\\\"a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48.factory.bridge.near\\\",\\\"amount_in\\\":\\\"998750000000000000000000\\\",\\\"min_amount_out\\\":\\\"11272575\\\"}]}", "amount": "998750000000000000000000", "receiver_id": "v2.ref-finance.near"}, "args_base64": "eyJyZWNlaXZlcl9pZCI6InYyLnJlZi1maW5hbmNlLm5lYXIiLCJhbW91bnQiOiI5OTg3NTAwMDAwMDAwMDAwMDAwMDAwMDAiLCJtc2ciOiJ7XCJmb3JjZVwiOjAsXCJhY3Rpb25zXCI6W3tcInBvb2xfaWRcIjozLFwidG9rZW5faW5cIjpcIndyYXAubmVhclwiLFwidG9rZW5fb3V0XCI6XCJhMGI4Njk5MWM2MjE4YjM2YzFkMTlkNGEyZTllYjBjZTM2MDZlYjQ4LmZhY3RvcnkuYnJpZGdlLm5lYXJcIixcImFtb3VudF9pblwiOlwiOTk4NzUwMDAwMDAwMDAwMDAwMDAwMDAwXCIsXCJtaW5fYW1vdW50X291dFwiOlwiMTEyNzI1NzVcIn1dfSJ9", "method_name": "ft_transfer_call"}', 'newafro.near', 'wrap.near', 1646394047265196013);
INSERT INTO action_receipt_actions (receipt_id, index_in_action_receipt, action_kind, args, receipt_predecessor_account_id, receipt_receiver_account_id, receipt_included_in_block_timestamp) VALUES ('3iLDZCpKkZhNMWp6HFu5eVCSEbw9cVXzD2BfL9UtpqXK', 0, 'FUNCTION_CALL', '{"gas": 30000000000000, "deposit": "100000000000000000000000", "args_json": {}, "args_base64": "e30=", "method_name": "near_deposit"}', 'newafro.near', 'wrap.near', 1646734468133596311);
INSERT INTO action_receipt_actions (receipt_id, index_in_action_receipt, action_kind, args, receipt_predecessor_account_id, receipt_receiver_account_id, receipt_included_in_block_timestamp) VALUES ('3iLDZCpKkZhNMWp6HFu5eVCSEbw9cVXzD2BfL9UtpqXK', 1, 'FUNCTION_CALL', '{"gas": 70000000000000, "deposit": "1", "args_json": {"msg": "b252c12d12f71726455eaa22f9c0ae2ff450d06a", "memo": null, "amount": "100000000000000000000000", "receiver_id": "aurora"}, "args_base64": "eyJyZWNlaXZlcl9pZCI6ImF1cm9yYSIsImFtb3VudCI6IjEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCIsIm1lbW8iOm51bGwsIm1zZyI6ImIyNTJjMTJkMTJmNzE3MjY0NTVlYWEyMmY5YzBhZTJmZjQ1MGQwNmEifQ==", "method_name": "ft_transfer_call"}', 'newafro.near', 'wrap.near', 1646734468133596311);
INSERT INTO action_receipt_actions (receipt_id, index_in_action_receipt, action_kind, args, receipt_predecessor_account_id, receipt_receiver_account_id, receipt_included_in_block_timestamp) VALUES ('HzCgTdvmsqTywgH63Yk6GYCBT3N1b8TmfdN7nLNC2jhh', 0, 'FUNCTION_CALL', '{"gas": 250000000000000, "deposit": "0", "args_json": {"request_id": 0}, "args_base64": "eyJyZXF1ZXN0X2lkIjowfQ==", "method_name": "confirm"}', 'newafro.near', 'newafro.near', 1646393887048095471);
INSERT INTO action_receipt_actions (receipt_id, index_in_action_receipt, action_kind, args, receipt_predecessor_account_id, receipt_receiver_account_id, receipt_included_in_block_timestamp) VALUES ('CUS3y7n8mgV2ED3VP7LUQQUf4fmqxqsPSAM9bnwNowPP', 0, 'FUNCTION_CALL', '{"gas": 300000000000000, "deposit": "0", "args_json": {"request_id": 45}, "args_base64": "eyJyZXF1ZXN0X2lkIjo0NX0=", "method_name": "confirm"}', 'nfendowment01.near', 'nfendowment01.near', 1632824679640349711);
INSERT INTO action_receipt_actions (receipt_id, index_in_action_receipt, action_kind, args, receipt_predecessor_account_id, receipt_receiver_account_id, receipt_included_in_block_timestamp) VALUES ('8ggVvSUo7PEB4rLTXRrQvLAZoHXUtusK8ssBZLkQ5oEH', 0, 'TRANSFER', '{"deposit": "50000000000000000000000000"}', 'newafro.near', 'linkdropping.near', 1646393741659301870);
INSERT INTO action_receipt_actions (receipt_id, index_in_action_receipt, action_kind, args, receipt_predecessor_account_id, receipt_receiver_account_id, receipt_included_in_block_timestamp) VALUES ('4LgCKrU63fGMeJGvD9ufCNn4h3Sp8bvzF42kgHWMpw51', 0, 'DELETE_KEY', '{"key": "ed25519:EHPeimCFYsnn3LnFYsECPBtTdwi5nLnJZzkvgkWnCAx6"}', 'newafro.near', 'newafro.near', 1646393797488301329);
INSERT INTO action_receipt_actions (receipt_id, index_in_action_receipt, action_kind, args, receipt_predecessor_account_id, receipt_receiver_account_id, receipt_included_in_block_timestamp) VALUES ('4LgCKrU63fGMeJGvD9ufCNn4h3Sp8bvzF42kgHWMpw51', 1, 'ADD_KEY', '{"access_key": {"nonce": 0, "permission": {"permission_kind": "FUNCTION_CALL", "permission_details": {"allowance": null, "receiver_id": "newafro.near", "method_names": ["add_request", "add_request_and_confirm", "delete_request", "confirm"]}}}, "key": "ed25519:EHPeimCFYsnn3LnFYsECPBtTdwi5nLnJZzkvgkWnCAx6"}', 'newafro.near', 'newafro.near', 1646393797488301329);
INSERT INTO action_receipt_actions (receipt_id, index_in_action_receipt, action_kind, args, receipt_predecessor_account_id, receipt_receiver_account_id, receipt_included_in_block_timestamp) VALUES ('4LgCKrU63fGMeJGvD9ufCNn4h3Sp8bvzF42kgHWMpw51', 2, 'ADD_KEY', '{"access_key": {"nonce": 0, "permission": {"permission_kind": "FUNCTION_CALL", "permission_details": {"allowance": null, "receiver_id": "newafro.near", "method_names": ["confirm"]}}}, "key": "ed25519:FmJMMGabLzyAFCjTxmx1C4cm8vgTKTU63m9nRdsYLg9S"}', 'newafro.near', 'newafro.near', 1646393797488301329);
INSERT INTO action_receipt_actions (receipt_id, index_in_action_receipt, action_kind, args, receipt_predecessor_account_id, receipt_receiver_account_id, receipt_included_in_block_timestamp) VALUES ('4LgCKrU63fGMeJGvD9ufCNn4h3Sp8bvzF42kgHWMpw51', 3, 'DEPLOY_CONTRACT', '{"code_sha256": "010b1a0bd58a9003f724f60dea7289df267613d46f058a81ee0fbb8565878559"}', 'newafro.near', 'newafro.near', 1646393797488301329);
INSERT INTO action_receipt_actions (receipt_id, index_in_action_receipt, action_kind, args, receipt_predecessor_account_id, receipt_receiver_account_id, receipt_included_in_block_timestamp) VALUES ('4LgCKrU63fGMeJGvD9ufCNn4h3Sp8bvzF42kgHWMpw51', 4, 'FUNCTION_CALL', '{"gas": 100000000000000, "deposit": "0", "args_json": {"num_confirmations": 2}, "args_base64": "eyJudW1fY29uZmlybWF0aW9ucyI6Mn0=", "method_name": "new"}', 'newafro.near', 'newafro.near', 1646393797488301329);
INSERT INTO action_receipt_actions (receipt_id, index_in_action_receipt, action_kind, args, receipt_predecessor_account_id, receipt_receiver_account_id, receipt_included_in_block_timestamp) VALUES ('5ANwuVG8W9m1me4VZfpR9zYnwqmab2zC24ThgBSrtLRn', 0, 'FUNCTION_CALL', '{"gas": 300000000000000, "deposit": "200000000000000000000000", "args_json": {"accounts": [{"amount": "100000000000000000000000", "account_id": "linkdropping.near"}, {"amount": "100000000000000000000000", "account_id": "gus.near"}]}, "args_base64": "eyJhY2NvdW50cyI6W3siYWNjb3VudF9pZCI6Imxpbmtkcm9wcGluZy5uZWFyIiwiYW1vdW50IjoiMTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwIn0seyJhY2NvdW50X2lkIjoiZ3VzLm5lYXIiLCJhbW91bnQiOiIxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAifV19", "method_name": "multisend_attached_tokens"}', 'newafro.near', 'multisender.app.near', 1646729046320507461);
INSERT INTO action_receipt_actions (receipt_id, index_in_action_receipt, action_kind, args, receipt_predecessor_account_id, receipt_receiver_account_id, receipt_included_in_block_timestamp) VALUES ('4BwKynMch9naQZZwD3VqJKowkq4PMktDAbqrAgtJBpRv', 0, 'FUNCTION_CALL', '{"gas": 30000000000000, "deposit": "1", "args_json": {"amount": "36778457249478", "receiver_id": "linkdropping.near"}, "args_base64": "eyJhbW91bnQiOiIzNjc3ODQ1NzI0OTQ3OCIsInJlY2VpdmVyX2lkIjoibGlua2Ryb3BwaW5nLm5lYXIifQ==", "method_name": "ft_transfer"}', 'newafro.near', 'token.v2.ref-finance.near', 1646727822331761056);
INSERT INTO action_receipt_actions (receipt_id, index_in_action_receipt, action_kind, args, receipt_predecessor_account_id, receipt_receiver_account_id, receipt_included_in_block_timestamp) VALUES ('51KpJ6ut71QRQx2ECBzy9ik3WiwoNQw9CBZwrPS3iu6G', 0, 'FUNCTION_CALL', '{"gas": 10000000000000, "deposit": "100000000000000000000000", "args_json": {"eth_recipient": "b252C12d12f71726455eaA22f9c0ae2FF450d06A"}, "args_base64": "eyJldGhfcmVjaXBpZW50IjoiYjI1MkMxMmQxMmY3MTcyNjQ1NWVhQTIyZjljMGFlMkZGNDUwZDA2QSJ9", "method_name": "migrate_to_ethereum"}', 'newafro.near', 'e-near.near', 1646734639664804840);
INSERT INTO action_receipt_actions (receipt_id, index_in_action_receipt, action_kind, args, receipt_predecessor_account_id, receipt_receiver_account_id, receipt_included_in_block_timestamp) VALUES ('4BwMBTRKbnaRMH4Fqm3AQM4kU1G9GeSybad9wrc4cdxS', 0, 'FUNCTION_CALL', '{"gas": 50000000000000, "deposit": "1000000000000000000000000", "args_json": {}, "args_base64": "e30=", "method_name": "near_deposit"}', 'newafro.near', 'wrap.near', 1646393979990202926);
INSERT INTO action_receipt_actions (receipt_id, index_in_action_receipt, action_kind, args, receipt_predecessor_account_id, receipt_receiver_account_id, receipt_included_in_block_timestamp) VALUES ('66DcPAETUf7RhJAXJXiBm6WE43S5fQ7HgCiZCW1tdUPc', 0, 'FUNCTION_CALL', '{"gas": 30000000000000, "deposit": "1000000000000000000000000", "args_json": {"key": "27uxkgGEgSrBxLVv1g81HzPNY1YWGopuGTSyaNeNJqUu"}, "args_base64": "eyJwdWJsaWNfa2V5IjoiMjd1eGtnR0VnU3JCeExWdjFnODFIelBOWTFZV0dvcHVHVFN5YU5lTkpxVXUifQ==", "method_name": "send"}', 'newafro.near', 'near', 1646728174359737690);
INSERT INTO action_receipt_actions (receipt_id, index_in_action_receipt, action_kind, args, receipt_predecessor_account_id, receipt_receiver_account_id, receipt_included_in_block_timestamp) VALUES ('TKEJxuD2LH4Sq52WBQgVSx21LE3GKFiUb9rSb4ZnmBV', 0, 'FUNCTION_CALL', '{"gas": 30000000000000, "deposit": "200000000000000000000000", "args_json": {}, "args_base64": "e30=", "method_name": "deposit"}', 'newafro.near', 'multisender.app.near', 1646729098988228329);
INSERT INTO action_receipt_actions (receipt_id, index_in_action_receipt, action_kind, args, receipt_predecessor_account_id, receipt_receiver_account_id, receipt_included_in_block_timestamp) VALUES ('CXfUqKyRMSY8JT2tkfxk1P9zWDjFVZhET76qE217BRVZ', 0, 'FUNCTION_CALL', '{"gas": 125000000000000, "deposit": "1000000000000000000000000", "args_json": {}, "args_base64": "e30=", "method_name": "deposit_and_stake"}', 'newafro.near', 'stardust.poolv1.near', 1646729573920214557);

INSERT INTO blocks (block_height, block_hash, prev_block_hash, block_timestamp, total_supply, gas_price, author_account_id) VALUES (71152948, '52qJFLiWtAEQo3y5ZhjxonQTnEEKW3HcycB4hXHp36wJ', 'DEi69GFgX9s88qsLiou2rnQwVJ4BEPDGwYgtjUFHVR2G', 1659425577670677628, 1091485393619693192495946273011138, 100000000, 'openshards.poolv1.near');
INSERT INTO blocks (block_height, block_hash, prev_block_hash, block_timestamp, total_supply, gas_price, author_account_id) VALUES (66396764, 'GWeVvwMRA9TYxi2ozKGXk7imhfpUgSURT33XquVeiNPZ', 'Fku4hxntukvzicMNXJyamR9xQkr61Dv5iEW59zU4h3PF', 1653552561360310122, 1081473413234531314303583562125834, 100000000, 'smart-stake.poolv1.near');
INSERT INTO blocks (block_height, block_hash, prev_block_hash, block_timestamp, total_supply, gas_price, author_account_id) VALUES (60729130, 'GKvWe6hJ9h1TWFgWWwYzBMmJG6p959hSdV1gDLcBN1EK', 'D9Ghy8K9y5Y2QWpuMMC4ZH3yTLR26Df4cu1K3kixWySH', 1646393106196645500, 1069406771555478033729611165790581, 100000000, 'magic.poolv1.near');
INSERT INTO blocks (block_height, block_hash, prev_block_hash, block_timestamp, total_supply, gas_price, author_account_id) VALUES (60997182, '7Gss6o1inJvE1nxe8D84G4ajGWEgEgnmE3BCxtQUkEfY', '541x8ZU52FkKYgnQzQ6uEUZ3FsAuNoh2Z5zQbauDxn2Q', 1646729130380275492, 1069955332851605631043792518515870, 100000000, 'openshards.poolv1.near');
INSERT INTO blocks (block_height, block_hash, prev_block_hash, block_timestamp, total_supply, gas_price, author_account_id) VALUES (60997651, '21ktUqRwtx4P55fCvmAqJonD6moqnVmtHoLfiMxoAtNg', 'CbDuMJofpWqmwVq3HzsGqfa9AYZ5VkpdGffRsPA97toU', 1646729710158166900, 1069955330108427469710285718515870, 100000000, 'staked.poolv1.near');
INSERT INTO blocks (block_height, block_hash, prev_block_hash, block_timestamp, total_supply, gas_price, author_account_id) VALUES (60729880, '3vEk9vxsFDUTzUqnBtwn6QLzCht8vvvfLqUBmLLUv7iP', 'CGJfKt9ti578UiqxswFYJW9N3YGmBL7Q4wm574kA3T7Q', 1646394047265196013, 1069406767224158018185923665790581, 100000000, 'abl_pool.poolv1.near');
INSERT INTO blocks (block_height, block_hash, prev_block_hash, block_timestamp, total_supply, gas_price, author_account_id) VALUES (61001476, '7herWHWQ47b183QSoY9Ssai8aJsG4JXkStBA4QuN3ZMZ', '9yJx4oCJEJgWJoRokDY7ePLBMAafQ66kCVBGiGwrjXbe', 1646734468133596311, 1069955310316025086989193218515870, 100000000, 'figment.poolv1.near');
INSERT INTO blocks (block_height, block_hash, prev_block_hash, block_timestamp, total_supply, gas_price, author_account_id) VALUES (60729751, 'AYhojZKRqV4mziLUD8nSeVAqExzdqax8sb75Xu3gfMNA', 'Dwc1EtX8UUnEWeoRRo94qQC7ofF2Z5yTntnLkyxokfnx', 1646393887048095471, 1069406767944876312263621965790581, 100000000, 'staked.poolv1.near');
INSERT INTO blocks (block_height, block_hash, prev_block_hash, block_timestamp, total_supply, gas_price, author_account_id) VALUES (48856870, '9EBk2Ts5aepE6vMztuKcWqSA67vsDpZbhEqk5chGWJzE', '85bGn6gjWTShwjpxnKMcDj85nwikr2iJK4gSWY1bMGug', 1632824679640349711, 1047106120621762042576016565495994, 100000000, 'dragonfly.poolv1.near');
INSERT INTO blocks (block_height, block_hash, prev_block_hash, block_timestamp, total_supply, gas_price, author_account_id) VALUES (60729636, 'H9oW2T4Rib53XjiDf5yy3jiAJbQ9oPmCooQwugvCvYxL', 'HbbN1xDqKrauRvRFpSWFMHjXaoD49WLBfAQeb43mZZJZ', 1646393741659301870, 1069406768723797361984502465790581, 100000000, 'nc2.poolv1.near');
INSERT INTO blocks (block_height, block_hash, prev_block_hash, block_timestamp, total_supply, gas_price, author_account_id) VALUES (60729680, 'FyUjmKSh4haAPY8LnuDaNULwMdv1wBF4iABVX4QPxnEZ', 'HgsJXg8WA4WVsuWLUaWkotaNZk6u6nuuUu3c8sANr4xL', 1646393797488301329, 1069406768361973533183659565790581, 100000000, 'foundry.poolv1.near');
INSERT INTO blocks (block_height, block_hash, prev_block_hash, block_timestamp, total_supply, gas_price, author_account_id) VALUES (60997114, '7VuBASsbrnTxetC9JTBYXCMc6SSJQ45ghTXH8wF5hurR', 'ACtNYZTQm5TkatAHbAcTCmMBfXBt2XdHC9yv3JmdkpLM', 1646729046320507461, 1069955333242947852640479818515870, 100000000, 'finoa.poolv1.near');
INSERT INTO blocks (block_height, block_hash, prev_block_hash, block_timestamp, total_supply, gas_price, author_account_id) VALUES (60996137, 'AHM2qMTJ63X2DKTgT4JfwbVmYQpt4yrex9KCLaMZoMBG', '4rZGEMZY56TNXBvcpKZwxEytL6AuUM1P8WPbmKEuLLBN', 1646727822331761056, 1069955339097964945717254518515870, 100000000, 'staked.poolv1.near');
INSERT INTO blocks (block_height, block_hash, prev_block_hash, block_timestamp, total_supply, gas_price, author_account_id) VALUES (61001616, '8XDwGNgwZy265p6a9HycKxMYUk7AmCtDWfA5NRNc1QEt', 'FuYEjCYwy8Mz7jaquQemMsTkBj2vcUERRHP6YyS11DpF', 1646734639664804840, 1069955309464971185480666018515870, 100000000, 'aurora.pool.near');
INSERT INTO blocks (block_height, block_hash, prev_block_hash, block_timestamp, total_supply, gas_price, author_account_id) VALUES (60729827, '4AkwtsxgTzyccKfX6YQiS9Uq2qi9WV28Rb3LchH7mYPc', 'FJ7TWS5SrepssB2Z1AvxwCpkurndwDR5b9prRkSRAHz6', 1646393979990202926, 1069406767514154948547814365790581, 100000000, 'sharpdarts.poolv1.near');
INSERT INTO blocks (block_height, block_hash, prev_block_hash, block_timestamp, total_supply, gas_price, author_account_id) VALUES (60996423, '53CQbcCgRAQ3BZwfWcUhUMXFj6F1du2GqLsYbbC65s2n', '2YxMsWoxghLZFrFLBgpTighvCNV2wzLhcqsWVZ7jnVgD', 1646728174359737690, 1069955337481302462192881418515870, 100000000, 'bzam6yjpnfnxsdmjf6pw.poolv1.near');
INSERT INTO blocks (block_height, block_hash, prev_block_hash, block_timestamp, total_supply, gas_price, author_account_id) VALUES (60997157, '3kFHAuXXHFCbLd4vkKyw6vSzVsv4pBzCsNS3otSNuRQ4', '6f5WiVXHgbzpSPAV9bqSMaJDgSNh5GNX3m9hqoMrYUs4', 1646729098988228329, 1069955333007178181918834718515870, 100000000, 'zkv_staketosupportprivacy.poolv1.near');
INSERT INTO blocks (block_height, block_hash, prev_block_hash, block_timestamp, total_supply, gas_price, author_account_id) VALUES (60997541, 'QvJEYSA35Da2N9mLz7Vb9hg2FjDzTrU972t8mfmo62Y', '24ZiWhrhA9ZAB8cUSZm2BAg6JoLkPgA8bHm4frrJrmzG', 1646729573920214557, 1069955330735814742461068118515870, 100000000, 'masternode24.poolv1.near');

INSERT INTO execution_outcomes (receipt_id, executed_in_block_hash, executed_in_block_timestamp, index_in_chunk, gas_burnt, tokens_burnt, executor_account_id, status, shard_id) VALUES ('6zvAVR5e3D1XkHVNXKG8aNxuv2uXFSRUXPhLV2UZuehb', '52qJFLiWtAEQo3y5ZhjxonQTnEEKW3HcycB4hXHp36wJ', 1659425577670677628, 2, 3780917879817, 378091787981700000000, 'a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48.factory.bridge.near', 'SUCCESS_VALUE', 0);
INSERT INTO execution_outcomes (receipt_id, executed_in_block_hash, executed_in_block_timestamp, index_in_chunk, gas_burnt, tokens_burnt, executor_account_id, status, shard_id) VALUES ('FzessKQqsbb3hzKxm9a8uYDURk7hSpt1uUtBn14jCLHW', 'GWeVvwMRA9TYxi2ozKGXk7imhfpUgSURT33XquVeiNPZ', 1653552561360310122, 1, 24931053836773, 2493105383677300000000, 'x.paras.near', 'SUCCESS_VALUE', 3);
INSERT INTO execution_outcomes (receipt_id, executed_in_block_hash, executed_in_block_timestamp, index_in_chunk, gas_burnt, tokens_burnt, executor_account_id, status, shard_id) VALUES ('HpMfG5HTjVEmw2PBq7J8tBy9k4pemr1j2emtLaCEu8FW', 'GKvWe6hJ9h1TWFgWWwYzBMmJG6p959hSdV1gDLcBN1EK', 1646393106196645500, 2, 6144900315164, 614490031516400000000, 'near', 'SUCCESS_RECEIPT_ID', 3);
INSERT INTO execution_outcomes (receipt_id, executed_in_block_hash, executed_in_block_timestamp, index_in_chunk, gas_burnt, tokens_burnt, executor_account_id, status, shard_id) VALUES ('znZaVgBnZ7gWHBXGUpp49DRurMpx9behKovpyujPRkP', '7Gss6o1inJvE1nxe8D84G4ajGWEgEgnmE3BCxtQUkEfY', 1646729130380275492, 3, 4287144157097, 428714415709700000000, 'multisender.app.near', 'SUCCESS_VALUE', 3);
INSERT INTO execution_outcomes (receipt_id, executed_in_block_hash, executed_in_block_timestamp, index_in_chunk, gas_burnt, tokens_burnt, executor_account_id, status, shard_id) VALUES ('43V76aigJJyRPprBj5S472BkRcPoodkbTK33QxWPd6NA', '21ktUqRwtx4P55fCvmAqJonD6moqnVmtHoLfiMxoAtNg', 1646729710158166900, 2, 9289792200725, 928979220072500000000, 'stardust.poolv1.near', 'SUCCESS_VALUE', 3);
INSERT INTO execution_outcomes (receipt_id, executed_in_block_hash, executed_in_block_timestamp, index_in_chunk, gas_burnt, tokens_burnt, executor_account_id, status, shard_id) VALUES ('G4HpHm39jUamQ8oRv939aJqWx5wKq2BZkSZVg9KK3AgV', '3vEk9vxsFDUTzUqnBtwn6QLzCht8vvvfLqUBmLLUv7iP', 1646394047265196013, 4, 9893114332433, 989311433243300000000, 'wrap.near', 'SUCCESS_RECEIPT_ID', 3);
INSERT INTO execution_outcomes (receipt_id, executed_in_block_hash, executed_in_block_timestamp, index_in_chunk, gas_burnt, tokens_burnt, executor_account_id, status, shard_id) VALUES ('3iLDZCpKkZhNMWp6HFu5eVCSEbw9cVXzD2BfL9UtpqXK', '7herWHWQ47b183QSoY9Ssai8aJsG4JXkStBA4QuN3ZMZ', 1646734468133596311, 0, 12886080250058, 1288608025005800000000, 'wrap.near', 'SUCCESS_RECEIPT_ID', 3);
INSERT INTO execution_outcomes (receipt_id, executed_in_block_hash, executed_in_block_timestamp, index_in_chunk, gas_burnt, tokens_burnt, executor_account_id, status, shard_id) VALUES ('HzCgTdvmsqTywgH63Yk6GYCBT3N1b8TmfdN7nLNC2jhh', 'AYhojZKRqV4mziLUD8nSeVAqExzdqax8sb75Xu3gfMNA', 1646393887048095471, 0, 11952346036857, 1195234603685700000000, 'newafro.near', 'SUCCESS_RECEIPT_ID', 3);
INSERT INTO execution_outcomes (receipt_id, executed_in_block_hash, executed_in_block_timestamp, index_in_chunk, gas_burnt, tokens_burnt, executor_account_id, status, shard_id) VALUES ('CUS3y7n8mgV2ED3VP7LUQQUf4fmqxqsPSAM9bnwNowPP', '9EBk2Ts5aepE6vMztuKcWqSA67vsDpZbhEqk5chGWJzE', 1632824679640349711, 0, 13454572386633, 1345457238663300000000, 'nfendowment01.near', 'SUCCESS_RECEIPT_ID', 0);
INSERT INTO execution_outcomes (receipt_id, executed_in_block_hash, executed_in_block_timestamp, index_in_chunk, gas_burnt, tokens_burnt, executor_account_id, status, shard_id) VALUES ('8ggVvSUo7PEB4rLTXRrQvLAZoHXUtusK8ssBZLkQ5oEH', 'H9oW2T4Rib53XjiDf5yy3jiAJbQ9oPmCooQwugvCvYxL', 1646393741659301870, 8, 223182562500, 22318256250000000000, 'linkdropping.near', 'SUCCESS_VALUE', 3);
INSERT INTO execution_outcomes (receipt_id, executed_in_block_hash, executed_in_block_timestamp, index_in_chunk, gas_burnt, tokens_burnt, executor_account_id, status, shard_id) VALUES ('4LgCKrU63fGMeJGvD9ufCNn4h3Sp8bvzF42kgHWMpw51', 'FyUjmKSh4haAPY8LnuDaNULwMdv1wBF4iABVX4QPxnEZ', 1646393797488301329, 0, 5961166056698, 596116605669800000000, 'newafro.near', 'SUCCESS_VALUE', 3);
INSERT INTO execution_outcomes (receipt_id, executed_in_block_hash, executed_in_block_timestamp, index_in_chunk, gas_burnt, tokens_burnt, executor_account_id, status, shard_id) VALUES ('5ANwuVG8W9m1me4VZfpR9zYnwqmab2zC24ThgBSrtLRn', '7VuBASsbrnTxetC9JTBYXCMc6SSJQ45ghTXH8wF5hurR', 1646729046320507461, 3, 9381887785290, 938188778529000000000, 'multisender.app.near', 'SUCCESS_VALUE', 3);
INSERT INTO execution_outcomes (receipt_id, executed_in_block_hash, executed_in_block_timestamp, index_in_chunk, gas_burnt, tokens_burnt, executor_account_id, status, shard_id) VALUES ('4BwKynMch9naQZZwD3VqJKowkq4PMktDAbqrAgtJBpRv', 'AHM2qMTJ63X2DKTgT4JfwbVmYQpt4yrex9KCLaMZoMBG', 1646727822331761056, 1, 5499555990696, 549955599069600000000, 'token.v2.ref-finance.near', 'SUCCESS_VALUE', 3);
INSERT INTO execution_outcomes (receipt_id, executed_in_block_hash, executed_in_block_timestamp, index_in_chunk, gas_burnt, tokens_burnt, executor_account_id, status, shard_id) VALUES ('51KpJ6ut71QRQx2ECBzy9ik3WiwoNQw9CBZwrPS3iu6G', '8XDwGNgwZy265p6a9HycKxMYUk7AmCtDWfA5NRNc1QEt', 1646734639664804840, 1, 2962342812988, 296234281298800000000, 'e-near.near', 'SUCCESS_VALUE', 2);
INSERT INTO execution_outcomes (receipt_id, executed_in_block_hash, executed_in_block_timestamp, index_in_chunk, gas_burnt, tokens_burnt, executor_account_id, status, shard_id) VALUES ('4BwMBTRKbnaRMH4Fqm3AQM4kU1G9GeSybad9wrc4cdxS', '4AkwtsxgTzyccKfX6YQiS9Uq2qi9WV28Rb3LchH7mYPc', 1646393979990202926, 1, 4034625364772, 403462536477200000000, 'wrap.near', 'SUCCESS_VALUE', 3);
INSERT INTO execution_outcomes (receipt_id, executed_in_block_hash, executed_in_block_timestamp, index_in_chunk, gas_burnt, tokens_burnt, executor_account_id, status, shard_id) VALUES ('66DcPAETUf7RhJAXJXiBm6WE43S5fQ7HgCiZCW1tdUPc', '53CQbcCgRAQ3BZwfWcUhUMXFj6F1du2GqLsYbbC65s2n', 1646728174359737690, 0, 5405985391655, 540598539165500000000, 'near', 'SUCCESS_RECEIPT_ID', 3);
INSERT INTO execution_outcomes (receipt_id, executed_in_block_hash, executed_in_block_timestamp, index_in_chunk, gas_burnt, tokens_burnt, executor_account_id, status, shard_id) VALUES ('TKEJxuD2LH4Sq52WBQgVSx21LE3GKFiUb9rSb4ZnmBV', '3kFHAuXXHFCbLd4vkKyw6vSzVsv4pBzCsNS3otSNuRQ4', 1646729098988228329, 1, 3694497577284, 369449757728400000000, 'multisender.app.near', 'SUCCESS_VALUE', 3);
INSERT INTO execution_outcomes (receipt_id, executed_in_block_hash, executed_in_block_timestamp, index_in_chunk, gas_burnt, tokens_burnt, executor_account_id, status, shard_id) VALUES ('CXfUqKyRMSY8JT2tkfxk1P9zWDjFVZhET76qE217BRVZ', 'QvJEYSA35Da2N9mLz7Vb9hg2FjDzTrU972t8mfmo62Y', 1646729573920214557, 2, 8970675806666, 897067580666600000000, 'stardust.poolv1.near', 'SUCCESS_VALUE', 3);

INSERT INTO receipts (receipt_id, included_in_block_hash, included_in_chunk_hash, index_in_chunk, included_in_block_timestamp, predecessor_account_id, receiver_account_id, receipt_kind, originated_from_transaction_hash) VALUES ('6zvAVR5e3D1XkHVNXKG8aNxuv2uXFSRUXPhLV2UZuehb', '52qJFLiWtAEQo3y5ZhjxonQTnEEKW3HcycB4hXHp36wJ', 'H9Ft7wn3KG3M2NFNP3W7cSBjAWcpU1VkxaN8NF1t6odC', 1, 1659425577670677628, 'nf-payments.near', 'a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48.factory.bridge.near', 'ACTION', '2wgMV44CLoBEnXGtpiypkEBhD93qSM4Po6LhJ8oUjLE1');
INSERT INTO receipts (receipt_id, included_in_block_hash, included_in_chunk_hash, index_in_chunk, included_in_block_timestamp, predecessor_account_id, receiver_account_id, receipt_kind, originated_from_transaction_hash) VALUES ('FzessKQqsbb3hzKxm9a8uYDURk7hSpt1uUtBn14jCLHW', 'GWeVvwMRA9TYxi2ozKGXk7imhfpUgSURT33XquVeiNPZ', '84YS3aEMyhRh9n1rgkcsH23P6aKnzK2Kc3f1EdaRCQdP', 5, 1653552561360310122, 'newafro.near', 'x.paras.near', 'ACTION', 'Dc9mLxNcJaXpP13ZnAtBN31yDFqaNRtLLGPezeya6KgV');
INSERT INTO receipts (receipt_id, included_in_block_hash, included_in_chunk_hash, index_in_chunk, included_in_block_timestamp, predecessor_account_id, receiver_account_id, receipt_kind, originated_from_transaction_hash) VALUES ('HpMfG5HTjVEmw2PBq7J8tBy9k4pemr1j2emtLaCEu8FW', 'GKvWe6hJ9h1TWFgWWwYzBMmJG6p959hSdV1gDLcBN1EK', 'AEYyTheWn8oD6R5mc5GxhNtizNJM17Mpq1dHpuqLbuJF', 1, 1646393106196645500, '54a698eae4063a944e673debe90a0287fdc278250179e3c1d580ec418f36e79b', 'near', 'ACTION', 'FzfAU2MWTj76L3jRWo6wYQSmj1WR6GdHZNZZ5fKfVUjm');
INSERT INTO receipts (receipt_id, included_in_block_hash, included_in_chunk_hash, index_in_chunk, included_in_block_timestamp, predecessor_account_id, receiver_account_id, receipt_kind, originated_from_transaction_hash) VALUES ('znZaVgBnZ7gWHBXGUpp49DRurMpx9behKovpyujPRkP', '7Gss6o1inJvE1nxe8D84G4ajGWEgEgnmE3BCxtQUkEfY', 'Bpa8hykpqSnxruv5DjEDBW3fBWR3eDf931inXVc9Po2Y', 1, 1646729130380275492, 'newafro.near', 'multisender.app.near', 'ACTION', 'G6BeJHJqZuYG1At2KUgxEqduNApZAyZaguHcws1vQ9tk');
INSERT INTO receipts (receipt_id, included_in_block_hash, included_in_chunk_hash, index_in_chunk, included_in_block_timestamp, predecessor_account_id, receiver_account_id, receipt_kind, originated_from_transaction_hash) VALUES ('43V76aigJJyRPprBj5S472BkRcPoodkbTK33QxWPd6NA', '21ktUqRwtx4P55fCvmAqJonD6moqnVmtHoLfiMxoAtNg', 'BDnmSDT2Ua746TTpugWzt3kFgAjnpGeQX2bcGS5j3fi1', 4, 1646729710158166900, 'newafro.near', 'stardust.poolv1.near', 'ACTION', 'Aga3Kfp7KZzXjamL3iH1EJSqdaj77aE4J53Vsz4busGq');
INSERT INTO receipts (receipt_id, included_in_block_hash, included_in_chunk_hash, index_in_chunk, included_in_block_timestamp, predecessor_account_id, receiver_account_id, receipt_kind, originated_from_transaction_hash) VALUES ('G4HpHm39jUamQ8oRv939aJqWx5wKq2BZkSZVg9KK3AgV', '3vEk9vxsFDUTzUqnBtwn6QLzCht8vvvfLqUBmLLUv7iP', 'Gk2fANgJb4RcnNzL3a23rniTKDKfh8nXzLCap5bLQF3n', 1, 1646394047265196013, 'newafro.near', 'wrap.near', 'ACTION', 'FnRqwXkEnP7AChHpPRyaDjBgHRhCgw64UEzXxncyG6gs');
INSERT INTO receipts (receipt_id, included_in_block_hash, included_in_chunk_hash, index_in_chunk, included_in_block_timestamp, predecessor_account_id, receiver_account_id, receipt_kind, originated_from_transaction_hash) VALUES ('3iLDZCpKkZhNMWp6HFu5eVCSEbw9cVXzD2BfL9UtpqXK', '7herWHWQ47b183QSoY9Ssai8aJsG4JXkStBA4QuN3ZMZ', '9VFnseWF4rajo3N5zcEHg1UVEbw9zMYqgsob6SACwYoQ', 0, 1646734468133596311, 'newafro.near', 'wrap.near', 'ACTION', '5i3cbbnAWpPT2NZL1hsyUPjjLMJqvUTf1fnRcccAJnJV');
INSERT INTO receipts (receipt_id, included_in_block_hash, included_in_chunk_hash, index_in_chunk, included_in_block_timestamp, predecessor_account_id, receiver_account_id, receipt_kind, originated_from_transaction_hash) VALUES ('HzCgTdvmsqTywgH63Yk6GYCBT3N1b8TmfdN7nLNC2jhh', 'AYhojZKRqV4mziLUD8nSeVAqExzdqax8sb75Xu3gfMNA', '7Rka1F8uvPkwbTxAUyJokfTWd9tKkFN7PxErE3yKGzPS', 0, 1646393887048095471, 'newafro.near', 'newafro.near', 'ACTION', '482h2CQhp7nToNMnsVY72Ywyz1TPjX6q6V5VwSorDjzF');
INSERT INTO receipts (receipt_id, included_in_block_hash, included_in_chunk_hash, index_in_chunk, included_in_block_timestamp, predecessor_account_id, receiver_account_id, receipt_kind, originated_from_transaction_hash) VALUES ('CUS3y7n8mgV2ED3VP7LUQQUf4fmqxqsPSAM9bnwNowPP', '9EBk2Ts5aepE6vMztuKcWqSA67vsDpZbhEqk5chGWJzE', '61b6zQGVZ6e2KA2Hc7F1KfeoJEMPpUYdY5HHKTmQDTya', 0, 1632824679640349711, 'nfendowment01.near', 'nfendowment01.near', 'ACTION', '9917LYw2QTMhvN2BWb8knCnxyi6yzUUvycUJAbJGt4dM');
INSERT INTO receipts (receipt_id, included_in_block_hash, included_in_chunk_hash, index_in_chunk, included_in_block_timestamp, predecessor_account_id, receiver_account_id, receipt_kind, originated_from_transaction_hash) VALUES ('8ggVvSUo7PEB4rLTXRrQvLAZoHXUtusK8ssBZLkQ5oEH', 'H9oW2T4Rib53XjiDf5yy3jiAJbQ9oPmCooQwugvCvYxL', '9sq9xbNGQZQwhk79Jd3cpnAAvTJZvMmB6prRuFSkZ348', 0, 1646393741659301870, 'newafro.near', 'linkdropping.near', 'ACTION', 'Wc15ScL3hVMJB1EPymmgQ1JwaE14ejpTbPBP2guGDFf');
INSERT INTO receipts (receipt_id, included_in_block_hash, included_in_chunk_hash, index_in_chunk, included_in_block_timestamp, predecessor_account_id, receiver_account_id, receipt_kind, originated_from_transaction_hash) VALUES ('4LgCKrU63fGMeJGvD9ufCNn4h3Sp8bvzF42kgHWMpw51', 'FyUjmKSh4haAPY8LnuDaNULwMdv1wBF4iABVX4QPxnEZ', '878nticf78Ztb4ZShLZHkWrU1SBrWFBADt7AyeyRsjrb', 0, 1646393797488301329, 'newafro.near', 'newafro.near', 'ACTION', 'GLcX3NfUJK9s2UPznNMhNn9L9Go3ikKxMMymW8AM4YJ9');
INSERT INTO receipts (receipt_id, included_in_block_hash, included_in_chunk_hash, index_in_chunk, included_in_block_timestamp, predecessor_account_id, receiver_account_id, receipt_kind, originated_from_transaction_hash) VALUES ('5ANwuVG8W9m1me4VZfpR9zYnwqmab2zC24ThgBSrtLRn', '7VuBASsbrnTxetC9JTBYXCMc6SSJQ45ghTXH8wF5hurR', 'EDxoznFqg1cMB24v7vfBFvy3jHNMSkCxGaXKfaiAeBKa', 1, 1646729046320507461, 'newafro.near', 'multisender.app.near', 'ACTION', 'FGqb2JzR1gVo1CzP2DynWWprH1qSwpLPxE4xbETU8KrB');
INSERT INTO receipts (receipt_id, included_in_block_hash, included_in_chunk_hash, index_in_chunk, included_in_block_timestamp, predecessor_account_id, receiver_account_id, receipt_kind, originated_from_transaction_hash) VALUES ('4BwKynMch9naQZZwD3VqJKowkq4PMktDAbqrAgtJBpRv', 'AHM2qMTJ63X2DKTgT4JfwbVmYQpt4yrex9KCLaMZoMBG', '2YuzWuiHDuVs4RpQaUALcaNfGJ5dGPUezpRSUG8ymoVf', 0, 1646727822331761056, 'newafro.near', 'token.v2.ref-finance.near', 'ACTION', 'iGUyvvwnsFRK3fcSZT8KtWb71TnsJiXh3GcnbAcFTzp');
INSERT INTO receipts (receipt_id, included_in_block_hash, included_in_chunk_hash, index_in_chunk, included_in_block_timestamp, predecessor_account_id, receiver_account_id, receipt_kind, originated_from_transaction_hash) VALUES ('51KpJ6ut71QRQx2ECBzy9ik3WiwoNQw9CBZwrPS3iu6G', '8XDwGNgwZy265p6a9HycKxMYUk7AmCtDWfA5NRNc1QEt', '6DE212z3NHKs71qBm4dLZp5EVxHZKHF1Y6pZZgHeoPdv', 1, 1646734639664804840, 'newafro.near', 'e-near.near', 'ACTION', '6MYAXgsTZMdcdizxU27FfJzsfkcRSRmJsC4a2DHQf1ae');
INSERT INTO receipts (receipt_id, included_in_block_hash, included_in_chunk_hash, index_in_chunk, included_in_block_timestamp, predecessor_account_id, receiver_account_id, receipt_kind, originated_from_transaction_hash) VALUES ('4BwMBTRKbnaRMH4Fqm3AQM4kU1G9GeSybad9wrc4cdxS', '4AkwtsxgTzyccKfX6YQiS9Uq2qi9WV28Rb3LchH7mYPc', '6zm1Gk5Fmj21ZcdEiJvb6hJ9sGfAEF4Ls1TxDiR6MKNC', 2, 1646393979990202926, 'newafro.near', 'wrap.near', 'ACTION', 'CnG41PfjS1omzY1bWFEhSWh811w3zWZqsZm8M85ppGr1');
INSERT INTO receipts (receipt_id, included_in_block_hash, included_in_chunk_hash, index_in_chunk, included_in_block_timestamp, predecessor_account_id, receiver_account_id, receipt_kind, originated_from_transaction_hash) VALUES ('66DcPAETUf7RhJAXJXiBm6WE43S5fQ7HgCiZCW1tdUPc', '53CQbcCgRAQ3BZwfWcUhUMXFj6F1du2GqLsYbbC65s2n', 'DJd1cEDqtAQfZ7rDC8xCLhASzF1W4to1MnnWXvBFQWw', 2, 1646728174359737690, 'newafro.near', 'near', 'ACTION', '5KzsCLAHgMxAgH1pMP8tukJx9VCZRhmG4mMrY2L7vpp8');
INSERT INTO receipts (receipt_id, included_in_block_hash, included_in_chunk_hash, index_in_chunk, included_in_block_timestamp, predecessor_account_id, receiver_account_id, receipt_kind, originated_from_transaction_hash) VALUES ('TKEJxuD2LH4Sq52WBQgVSx21LE3GKFiUb9rSb4ZnmBV', '3kFHAuXXHFCbLd4vkKyw6vSzVsv4pBzCsNS3otSNuRQ4', '9SqN3BqtaUt2sEMPxr7Mf6Z6SV47RCmHZT2Q5HaVzTNM', 1, 1646729098988228329, 'newafro.near', 'multisender.app.near', 'ACTION', '2Qg8p6xcr7WW3c2UUybipn7vKjdtqzU45fxXnw1gERxW');
INSERT INTO receipts (receipt_id, included_in_block_hash, included_in_chunk_hash, index_in_chunk, included_in_block_timestamp, predecessor_account_id, receiver_account_id, receipt_kind, originated_from_transaction_hash) VALUES ('CXfUqKyRMSY8JT2tkfxk1P9zWDjFVZhET76qE217BRVZ', 'QvJEYSA35Da2N9mLz7Vb9hg2FjDzTrU972t8mfmo62Y', '9KqYBqsuDP9hbBdkgUcK6tjhPWsZS2m5vb8dxjF7C1Se', 3, 1646729573920214557, 'newafro.near', 'stardust.poolv1.near', 'ACTION', '5VU8Jk6avWa6GVo9SaAiATrZB9ruz8xVCEN2QLHK5Xk8');

INSERT INTO transaction_actions (transaction_hash, index_in_transaction, action_kind, args) VALUES ('2wgMV44CLoBEnXGtpiypkEBhD93qSM4Po6LhJ8oUjLE1', 0, 'FUNCTION_CALL', '{"gas": 15000000000000, "deposit": "1", "args_json": {"amount": "17500000000", "receiver_id": "nf-payments2.near"}, "args_base64": "eyJhbW91bnQiOiIxNzUwMDAwMDAwMCIsInJlY2VpdmVyX2lkIjoibmYtcGF5bWVudHMyLm5lYXIifQ==", "method_name": "ft_transfer"}');
INSERT INTO transaction_actions (transaction_hash, index_in_transaction, action_kind, args) VALUES ('Dc9mLxNcJaXpP13ZnAtBN31yDFqaNRtLLGPezeya6KgV', 0, 'FUNCTION_CALL', '{"gas": 100000000000000, "deposit": "12280000000000000000000", "args_json": {"receiver_id": "newafro.near", "token_series_id": "398686"}, "args_base64": "eyJ0b2tlbl9zZXJpZXNfaWQiOiIzOTg2ODYiLCJyZWNlaXZlcl9pZCI6Im5ld2Fmcm8ubmVhciJ9", "method_name": "nft_buy"}');
INSERT INTO transaction_actions (transaction_hash, index_in_transaction, action_kind, args) VALUES ('FzfAU2MWTj76L3jRWo6wYQSmj1WR6GdHZNZZ5fKfVUjm', 0, 'FUNCTION_CALL', '{"gas": 100000000000000, "deposit": "100000000000000000000000", "args_json": {"new_account_id": "newafro.near", "new_key": "2LtNBZGX3xCw9Jm4ngws8TMUy2JkWApHMhsg6PU9QtAN"}, "args_base64": "eyJuZXdfYWNjb3VudF9pZCI6Im5ld2Fmcm8ubmVhciIsIm5ld19wdWJsaWNfa2V5IjoiMkx0TkJaR1gzeEN3OUptNG5nd3M4VE1VeTJKa1dBcEhNaHNnNlBVOVF0QU4ifQ==", "method_name": "create_account"}');
INSERT INTO transaction_actions (transaction_hash, index_in_transaction, action_kind, args) VALUES ('G6BeJHJqZuYG1At2KUgxEqduNApZAyZaguHcws1vQ9tk', 0, 'FUNCTION_CALL', '{"gas": 300000000000000, "deposit": "0", "args_json": {"accounts": [{"amount": "100000000000000000000000", "account_id": "gus.near"}, {"amount": "100000000000000000000000", "account_id": "linkdropping.near"}]}, "args_base64": "eyJhY2NvdW50cyI6W3siYWNjb3VudF9pZCI6Imd1cy5uZWFyIiwiYW1vdW50IjoiMTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwIn0seyJhY2NvdW50X2lkIjoibGlua2Ryb3BwaW5nLm5lYXIiLCJhbW91bnQiOiIxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAifV19", "method_name": "multisend_from_balance_unsafe"}');
INSERT INTO transaction_actions (transaction_hash, index_in_transaction, action_kind, args) VALUES ('Aga3Kfp7KZzXjamL3iH1EJSqdaj77aE4J53Vsz4busGq', 0, 'FUNCTION_CALL', '{"gas": 125000000000000, "deposit": "0", "args_json": {}, "args_base64": "e30=", "method_name": "unstake_all"}');
INSERT INTO transaction_actions (transaction_hash, index_in_transaction, action_kind, args) VALUES ('FnRqwXkEnP7AChHpPRyaDjBgHRhCgw64UEzXxncyG6gs', 0, 'FUNCTION_CALL', '{"gas": 180000000000000, "deposit": "1", "args_json": {"msg": "{\\\"force\\\":0,\\\"actions\\\":[{\\\"pool_id\\\":3,\\\"token_in\\\":\\\"wrap.near\\\",\\\"token_out\\\":\\\"a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48.factory.bridge.near\\\",\\\"amount_in\\\":\\\"998750000000000000000000\\\",\\\"min_amount_out\\\":\\\"11272575\\\"}]}", "amount": "998750000000000000000000", "receiver_id": "v2.ref-finance.near"}, "args_base64": "eyJyZWNlaXZlcl9pZCI6InYyLnJlZi1maW5hbmNlLm5lYXIiLCJhbW91bnQiOiI5OTg3NTAwMDAwMDAwMDAwMDAwMDAwMDAiLCJtc2ciOiJ7XCJmb3JjZVwiOjAsXCJhY3Rpb25zXCI6W3tcInBvb2xfaWRcIjozLFwidG9rZW5faW5cIjpcIndyYXAubmVhclwiLFwidG9rZW5fb3V0XCI6XCJhMGI4Njk5MWM2MjE4YjM2YzFkMTlkNGEyZTllYjBjZTM2MDZlYjQ4LmZhY3RvcnkuYnJpZGdlLm5lYXJcIixcImFtb3VudF9pblwiOlwiOTk4NzUwMDAwMDAwMDAwMDAwMDAwMDAwXCIsXCJtaW5fYW1vdW50X291dFwiOlwiMTEyNzI1NzVcIn1dfSJ9", "method_name": "ft_transfer_call"}');
INSERT INTO transaction_actions (transaction_hash, index_in_transaction, action_kind, args) VALUES ('5i3cbbnAWpPT2NZL1hsyUPjjLMJqvUTf1fnRcccAJnJV', 0, 'FUNCTION_CALL', '{"gas": 30000000000000, "deposit": "100000000000000000000000", "args_json": {}, "args_base64": "e30=", "method_name": "near_deposit"}');
INSERT INTO transaction_actions (transaction_hash, index_in_transaction, action_kind, args) VALUES ('5i3cbbnAWpPT2NZL1hsyUPjjLMJqvUTf1fnRcccAJnJV', 1, 'FUNCTION_CALL', '{"gas": 70000000000000, "deposit": "1", "args_json": {"msg": "b252c12d12f71726455eaa22f9c0ae2ff450d06a", "memo": null, "amount": "100000000000000000000000", "receiver_id": "aurora"}, "args_base64": "eyJyZWNlaXZlcl9pZCI6ImF1cm9yYSIsImFtb3VudCI6IjEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCIsIm1lbW8iOm51bGwsIm1zZyI6ImIyNTJjMTJkMTJmNzE3MjY0NTVlYWEyMmY5YzBhZTJmZjQ1MGQwNmEifQ==", "method_name": "ft_transfer_call"}');
INSERT INTO transaction_actions (transaction_hash, index_in_transaction, action_kind, args) VALUES ('482h2CQhp7nToNMnsVY72Ywyz1TPjX6q6V5VwSorDjzF', 0, 'FUNCTION_CALL', '{"gas": 250000000000000, "deposit": "0", "args_json": {"request_id": 0}, "args_base64": "eyJyZXF1ZXN0X2lkIjowfQ==", "method_name": "confirm"}');
INSERT INTO transaction_actions (transaction_hash, index_in_transaction, action_kind, args) VALUES ('9917LYw2QTMhvN2BWb8knCnxyi6yzUUvycUJAbJGt4dM', 0, 'FUNCTION_CALL', '{"gas": 300000000000000, "deposit": "0", "args_json": {"request_id": 45}, "args_base64": "eyJyZXF1ZXN0X2lkIjo0NX0=", "method_name": "confirm"}');
INSERT INTO transaction_actions (transaction_hash, index_in_transaction, action_kind, args) VALUES ('Wc15ScL3hVMJB1EPymmgQ1JwaE14ejpTbPBP2guGDFf', 0, 'TRANSFER', '{"deposit": "50000000000000000000000000"}');
INSERT INTO transaction_actions (transaction_hash, index_in_transaction, action_kind, args) VALUES ('GLcX3NfUJK9s2UPznNMhNn9L9Go3ikKxMMymW8AM4YJ9', 0, 'DELETE_KEY', '{"key": "ed25519:EHPeimCFYsnn3LnFYsECPBtTdwi5nLnJZzkvgkWnCAx6"}');
INSERT INTO transaction_actions (transaction_hash, index_in_transaction, action_kind, args) VALUES ('GLcX3NfUJK9s2UPznNMhNn9L9Go3ikKxMMymW8AM4YJ9', 1, 'ADD_KEY', '{"access_key": {"nonce": 0, "permission": {"permission_kind": "FUNCTION_CALL", "permission_details": {"allowance": null, "receiver_id": "newafro.near", "method_names": ["add_request", "add_request_and_confirm", "delete_request", "confirm"]}}}, "key": "ed25519:EHPeimCFYsnn3LnFYsECPBtTdwi5nLnJZzkvgkWnCAx6"}');
INSERT INTO transaction_actions (transaction_hash, index_in_transaction, action_kind, args) VALUES ('GLcX3NfUJK9s2UPznNMhNn9L9Go3ikKxMMymW8AM4YJ9', 2, 'ADD_KEY', '{"access_key": {"nonce": 0, "permission": {"permission_kind": "FUNCTION_CALL", "permission_details": {"allowance": null, "receiver_id": "newafro.near", "method_names": ["confirm"]}}}, "key": "ed25519:FmJMMGabLzyAFCjTxmx1C4cm8vgTKTU63m9nRdsYLg9S"}');
INSERT INTO transaction_actions (transaction_hash, index_in_transaction, action_kind, args) VALUES ('GLcX3NfUJK9s2UPznNMhNn9L9Go3ikKxMMymW8AM4YJ9', 3, 'DEPLOY_CONTRACT', '{"code_sha256": "010b1a0bd58a9003f724f60dea7289df267613d46f058a81ee0fbb8565878559"}');
INSERT INTO transaction_actions (transaction_hash, index_in_transaction, action_kind, args) VALUES ('GLcX3NfUJK9s2UPznNMhNn9L9Go3ikKxMMymW8AM4YJ9', 4, 'FUNCTION_CALL', '{"gas": 100000000000000, "deposit": "0", "args_json": {"num_confirmations": 2}, "args_base64": "eyJudW1fY29uZmlybWF0aW9ucyI6Mn0=", "method_name": "new"}');
INSERT INTO transaction_actions (transaction_hash, index_in_transaction, action_kind, args) VALUES ('FGqb2JzR1gVo1CzP2DynWWprH1qSwpLPxE4xbETU8KrB', 0, 'FUNCTION_CALL', '{"gas": 300000000000000, "deposit": "200000000000000000000000", "args_json": {"accounts": [{"amount": "100000000000000000000000", "account_id": "linkdropping.near"}, {"amount": "100000000000000000000000", "account_id": "gus.near"}]}, "args_base64": "eyJhY2NvdW50cyI6W3siYWNjb3VudF9pZCI6Imxpbmtkcm9wcGluZy5uZWFyIiwiYW1vdW50IjoiMTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwIn0seyJhY2NvdW50X2lkIjoiZ3VzLm5lYXIiLCJhbW91bnQiOiIxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAifV19", "method_name": "multisend_attached_tokens"}');
INSERT INTO transaction_actions (transaction_hash, index_in_transaction, action_kind, args) VALUES ('iGUyvvwnsFRK3fcSZT8KtWb71TnsJiXh3GcnbAcFTzp', 0, 'FUNCTION_CALL', '{"gas": 30000000000000, "deposit": "1", "args_json": {"amount": "36778457249478", "receiver_id": "linkdropping.near"}, "args_base64": "eyJhbW91bnQiOiIzNjc3ODQ1NzI0OTQ3OCIsInJlY2VpdmVyX2lkIjoibGlua2Ryb3BwaW5nLm5lYXIifQ==", "method_name": "ft_transfer"}');
INSERT INTO transaction_actions (transaction_hash, index_in_transaction, action_kind, args) VALUES ('6MYAXgsTZMdcdizxU27FfJzsfkcRSRmJsC4a2DHQf1ae', 0, 'FUNCTION_CALL', '{"gas": 10000000000000, "deposit": "100000000000000000000000", "args_json": {"eth_recipient": "b252C12d12f71726455eaA22f9c0ae2FF450d06A"}, "args_base64": "eyJldGhfcmVjaXBpZW50IjoiYjI1MkMxMmQxMmY3MTcyNjQ1NWVhQTIyZjljMGFlMkZGNDUwZDA2QSJ9", "method_name": "migrate_to_ethereum"}');
INSERT INTO transaction_actions (transaction_hash, index_in_transaction, action_kind, args) VALUES ('CnG41PfjS1omzY1bWFEhSWh811w3zWZqsZm8M85ppGr1', 0, 'FUNCTION_CALL', '{"gas": 50000000000000, "deposit": "1000000000000000000000000", "args_json": {}, "args_base64": "e30=", "method_name": "near_deposit"}');
INSERT INTO transaction_actions (transaction_hash, index_in_transaction, action_kind, args) VALUES ('5KzsCLAHgMxAgH1pMP8tukJx9VCZRhmG4mMrY2L7vpp8', 0, 'FUNCTION_CALL', '{"gas": 30000000000000, "deposit": "1000000000000000000000000", "args_json": {"key": "27uxkgGEgSrBxLVv1g81HzPNY1YWGopuGTSyaNeNJqUu"}, "args_base64": "eyJwdWJsaWNfa2V5IjoiMjd1eGtnR0VnU3JCeExWdjFnODFIelBOWTFZV0dvcHVHVFN5YU5lTkpxVXUifQ==", "method_name": "send"}');
INSERT INTO transaction_actions (transaction_hash, index_in_transaction, action_kind, args) VALUES ('2Qg8p6xcr7WW3c2UUybipn7vKjdtqzU45fxXnw1gERxW', 0, 'FUNCTION_CALL', '{"gas": 30000000000000, "deposit": "200000000000000000000000", "args_json": {}, "args_base64": "e30=", "method_name": "deposit"}');
INSERT INTO transaction_actions (transaction_hash, index_in_transaction, action_kind, args) VALUES ('5VU8Jk6avWa6GVo9SaAiATrZB9ruz8xVCEN2QLHK5Xk8', 0, 'FUNCTION_CALL', '{"gas": 125000000000000, "deposit": "1000000000000000000000000", "args_json": {}, "args_base64": "e30=", "method_name": "deposit_and_stake"}');

INSERT INTO transactions (transaction_hash, included_in_block_hash, included_in_chunk_hash, index_in_chunk, block_timestamp, signer_account_id, signer_key, nonce, receiver_account_id, signature, status, converted_into_receipt_id, receipt_conversion_gas_burnt, receipt_conversion_tokens_burnt) VALUES ('2wgMV44CLoBEnXGtpiypkEBhD93qSM4Po6LhJ8oUjLE1', 'DEi69GFgX9s88qsLiou2rnQwVJ4BEPDGwYgtjUFHVR2G', 'GrF9JidtDZ7VnuW9tZU1o1uYHDc4xfSd7ysHBXt7ixEB', 1, 1659425577086097808, 'nf-payments.near', 'ed25519:7i4mKFA7qVs6HWhUmdk5rDoNDVkxZ8ZzvN6X1QGvHNoM', 49510257002391, 'a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48.factory.bridge.near', 'ed25519:Z75kz7NLxu1Y2QxKuveuXQtxXfsJwz2KcGFCkbbSuQUUaGQEJKwoa5BRtA5PzrdFNYgSjACoVfJBeYLj4ggPLZa', 'SUCCESS_RECEIPT_ID', '6zvAVR5e3D1XkHVNXKG8aNxuv2uXFSRUXPhLV2UZuehb', 2428075279446, 242807527944600000000);
INSERT INTO transactions (transaction_hash, included_in_block_hash, included_in_chunk_hash, index_in_chunk, block_timestamp, signer_account_id, signer_key, nonce, receiver_account_id, signature, status, converted_into_receipt_id, receipt_conversion_gas_burnt, receipt_conversion_tokens_burnt) VALUES ('Dc9mLxNcJaXpP13ZnAtBN31yDFqaNRtLLGPezeya6KgV', 'Fku4hxntukvzicMNXJyamR9xQkr61Dv5iEW59zU4h3PF', '44ErpaLczikECGzkvnPqWtWWg78AcrbcHX9TAtAeXVew', 5, 1653552560008843701, 'newafro.near', 'ed25519:C2S9dF6cBGvsaKsHY4RcsLaRQCtgpHECW67NEGLyTaJJ', 61401990000019, 'x.paras.near', 'ed25519:5dg21ZedjqY7tjJCYrbFRJg3eTmsmbtS4uV9bm3gkK4B1cckRxS7KfUVaG6jjT7h92Lx487pcEjKwSWcXdcQvyVt', 'SUCCESS_RECEIPT_ID', 'FzessKQqsbb3hzKxm9a8uYDURk7hSpt1uUtBn14jCLHW', 2428064099776, 242806409977600000000);
INSERT INTO transactions (transaction_hash, included_in_block_hash, included_in_chunk_hash, index_in_chunk, block_timestamp, signer_account_id, signer_key, nonce, receiver_account_id, signature, status, converted_into_receipt_id, receipt_conversion_gas_burnt, receipt_conversion_tokens_burnt) VALUES ('FzfAU2MWTj76L3jRWo6wYQSmj1WR6GdHZNZZ5fKfVUjm', 'D9Ghy8K9y5Y2QWpuMMC4ZH3yTLR26Df4cu1K3kixWySH', '9NoPpS2q5Xpwcj6pNNFqjroogWgE15VuiUVvH8mDHbaX', 1, 1646393104775468738, '54a698eae4063a944e673debe90a0287fdc278250179e3c1d580ec418f36e79b', 'ed25519:5hQyc3zf2UXhEMWbXVyztxdXF5BDXZ9aNJSFftHUHpk6', 60728946000001, 'near', 'ed25519:3FJuvyyphJxv38g4N3RJhH7rodqD4UBmpRnnz6hAwAYiUZWkj5gdR2xDCqNoLJmm4TgCHMAQ5pHENStnbnLLwdrS', 'SUCCESS_RECEIPT_ID', 'HpMfG5HTjVEmw2PBq7J8tBy9k4pemr1j2emtLaCEu8FW', 2428169188674, 242816918867400000000);
INSERT INTO transactions (transaction_hash, included_in_block_hash, included_in_chunk_hash, index_in_chunk, block_timestamp, signer_account_id, signer_key, nonce, receiver_account_id, signature, status, converted_into_receipt_id, receipt_conversion_gas_burnt, receipt_conversion_tokens_burnt) VALUES ('G6BeJHJqZuYG1At2KUgxEqduNApZAyZaguHcws1vQ9tk', '541x8ZU52FkKYgnQzQ6uEUZ3FsAuNoh2Z5zQbauDxn2Q', 'GPD3fJ8T1DD2uBz9o1AKzB2YrfPdZwPdX4dBofRjt29Y', 1, 1646729129224262612, 'newafro.near', 'ed25519:4Jp2C8PA3GfWtF8EftwHvshePEBdBSYzVEsUxQMqaLPw', 60997094000001, 'multisender.app.near', 'ed25519:5Ja6W71HeiEiE6eZjN7YxjySbgM1rVfh8bX8Kxsz44W2bCcYJdkMR3YnNTfEnJu7Fp8KQd6VLpZv351nVmjBfXqY', 'SUCCESS_RECEIPT_ID', 'znZaVgBnZ7gWHBXGUpp49DRurMpx9behKovpyujPRkP', 2428314524384, 242831452438400000000);
INSERT INTO transactions (transaction_hash, included_in_block_hash, included_in_chunk_hash, index_in_chunk, block_timestamp, signer_account_id, signer_key, nonce, receiver_account_id, signature, status, converted_into_receipt_id, receipt_conversion_gas_burnt, receipt_conversion_tokens_burnt) VALUES ('Aga3Kfp7KZzXjamL3iH1EJSqdaj77aE4J53Vsz4busGq', 'CbDuMJofpWqmwVq3HzsGqfa9AYZ5VkpdGffRsPA97toU', '6ZcFRjSmd6KuW9g3ZAxJSetJx2X8cwhkumSEmiZUr8p8', 6, 1646729708849195150, 'newafro.near', 'ed25519:8FiezMQHJJxJQrzsfDs7bmWHVACT7ked9N1mHbJMaTsB', 60996816000014, 'stardust.poolv1.near', 'ed25519:2gkeNPjEAbAikCLwFcmhDrkdksDb68R6eDixXtD2hKfpg32wW7Lqacr15QRX5PQpoWu2EQdqCSJ95XdnTKhunLoa', 'SUCCESS_RECEIPT_ID', '43V76aigJJyRPprBj5S472BkRcPoodkbTK33QxWPd6NA', 2427950067142, 242795006714200000000);
INSERT INTO transactions (transaction_hash, included_in_block_hash, included_in_chunk_hash, index_in_chunk, block_timestamp, signer_account_id, signer_key, nonce, receiver_account_id, signature, status, converted_into_receipt_id, receipt_conversion_gas_burnt, receipt_conversion_tokens_burnt) VALUES ('FnRqwXkEnP7AChHpPRyaDjBgHRhCgw64UEzXxncyG6gs', 'CGJfKt9ti578UiqxswFYJW9N3YGmBL7Q4wm574kA3T7Q', '3A3spBN3ZTQmn9cFvzdeQL4cnSy6KbVux4avBKVrg45N', 1, 1646394045856636949, 'newafro.near', 'ed25519:EHPeimCFYsnn3LnFYsECPBtTdwi5nLnJZzkvgkWnCAx6', 60729751000004, 'wrap.near', 'ed25519:4PQrcdPZ6HYuwG3z1qSZjGcZupv3a3rSsrTvFsCtaapdTeFmKQpxnXMXpi5KwSvsu7eKrnS1yTWVC9Bw39outaeG', 'SUCCESS_RECEIPT_ID', 'G4HpHm39jUamQ8oRv939aJqWx5wKq2BZkSZVg9KK3AgV', 2428640970748, 242864097074800000000);
INSERT INTO transactions (transaction_hash, included_in_block_hash, included_in_chunk_hash, index_in_chunk, block_timestamp, signer_account_id, signer_key, nonce, receiver_account_id, signature, status, converted_into_receipt_id, receipt_conversion_gas_burnt, receipt_conversion_tokens_burnt) VALUES ('5i3cbbnAWpPT2NZL1hsyUPjjLMJqvUTf1fnRcccAJnJV', '9yJx4oCJEJgWJoRokDY7ePLBMAafQ66kCVBGiGwrjXbe', 'Zw1H11ZRF83RNy3hAcY266g3Rgxwfqmukn7bumncbLx', 0, 1646734466886577663, 'newafro.near', 'ed25519:HAgTfLeQio24Gczs5DnHkYmDTtxgoHyTcy6NwKNJnhKb', 60998007000001, 'wrap.near', 'ed25519:2RtUAdufN166mLzyKcqsdubS4uSkc8vY6G7UUR6Z9zqPKyR8AQukQPhC4yTSr1aiYWppqyR5SfW84ZBNq5Mfun8d', 'SUCCESS_RECEIPT_ID', '3iLDZCpKkZhNMWp6HFu5eVCSEbw9cVXzD2BfL9UtpqXK', 4748120126034, 474812012603400000000);
INSERT INTO transactions (transaction_hash, included_in_block_hash, included_in_chunk_hash, index_in_chunk, block_timestamp, signer_account_id, signer_key, nonce, receiver_account_id, signature, status, converted_into_receipt_id, receipt_conversion_gas_burnt, receipt_conversion_tokens_burnt) VALUES ('482h2CQhp7nToNMnsVY72Ywyz1TPjX6q6V5VwSorDjzF', 'AYhojZKRqV4mziLUD8nSeVAqExzdqax8sb75Xu3gfMNA', '7Rka1F8uvPkwbTxAUyJokfTWd9tKkFN7PxErE3yKGzPS', 0, 1646393887048095471, 'newafro.near', 'ed25519:FmJMMGabLzyAFCjTxmx1C4cm8vgTKTU63m9nRdsYLg9S', 60729679000001, 'newafro.near', 'ed25519:57eRYGBexFU4N78yjBDM7cYED271SV1hpEWEV5cqB1kVkxKNk6XVcL3URKbGj9PLMVkkebPfE8RUFd9FKTuTpSGY', 'SUCCESS_RECEIPT_ID', 'HzCgTdvmsqTywgH63Yk6GYCBT3N1b8TmfdN7nLNC2jhh', 2427972426482, 242797242648200000000);
INSERT INTO transactions (transaction_hash, included_in_block_hash, included_in_chunk_hash, index_in_chunk, block_timestamp, signer_account_id, signer_key, nonce, receiver_account_id, signature, status, converted_into_receipt_id, receipt_conversion_gas_burnt, receipt_conversion_tokens_burnt) VALUES ('9917LYw2QTMhvN2BWb8knCnxyi6yzUUvycUJAbJGt4dM', '9EBk2Ts5aepE6vMztuKcWqSA67vsDpZbhEqk5chGWJzE', '61b6zQGVZ6e2KA2Hc7F1KfeoJEMPpUYdY5HHKTmQDTya', 0, 1632824679640349711, 'nfendowment01.near', 'ed25519:CpwMLog6WH4Mb6JpPfA1HCQzUT2Zn4g3i1MNxtuuDuMz', 42, 'nfendowment01.near', 'ed25519:5Rib4L34HmMApKRRGLP4uEKgafQdzUU2ZzdxL2ytiGU7dVnm5FKHp5otdAyscaUxmsEpfgyQCbkNPKx2ta88XShn', 'SUCCESS_RECEIPT_ID', 'CUS3y7n8mgV2ED3VP7LUQQUf4fmqxqsPSAM9bnwNowPP', 2427974662416, 242797466241600000000);
INSERT INTO transactions (transaction_hash, included_in_block_hash, included_in_chunk_hash, index_in_chunk, block_timestamp, signer_account_id, signer_key, nonce, receiver_account_id, signature, status, converted_into_receipt_id, receipt_conversion_gas_burnt, receipt_conversion_tokens_burnt) VALUES ('Wc15ScL3hVMJB1EPymmgQ1JwaE14ejpTbPBP2guGDFf', 'HbbN1xDqKrauRvRFpSWFMHjXaoD49WLBfAQeb43mZZJZ', 'Fzgmd4rnTY3rPiGfs75RHGAs3FAuB1uMdjXihd2sha2h', 0, 1646393740318318106, 'newafro.near', 'ed25519:EHPeimCFYsnn3LnFYsECPBtTdwi5nLnJZzkvgkWnCAx6', 60729135000001, 'linkdropping.near', 'ed25519:Y42VqaCJmX7uWcF4pHY5k3VsixFbmcgarxP8CZN17Cbqq21Hc75a7EqUASf5ukfK57j7WWjGnsiingBkEJZVsht', 'SUCCESS_RECEIPT_ID', '8ggVvSUo7PEB4rLTXRrQvLAZoHXUtusK8ssBZLkQ5oEH', 223182562500, 22318256250000000000);
INSERT INTO transactions (transaction_hash, included_in_block_hash, included_in_chunk_hash, index_in_chunk, block_timestamp, signer_account_id, signer_key, nonce, receiver_account_id, signature, status, converted_into_receipt_id, receipt_conversion_gas_burnt, receipt_conversion_tokens_burnt) VALUES ('GLcX3NfUJK9s2UPznNMhNn9L9Go3ikKxMMymW8AM4YJ9', 'FyUjmKSh4haAPY8LnuDaNULwMdv1wBF4iABVX4QPxnEZ', '878nticf78Ztb4ZShLZHkWrU1SBrWFBADt7AyeyRsjrb', 1, 1646393797488301329, 'newafro.near', 'ed25519:EHPeimCFYsnn3LnFYsECPBtTdwi5nLnJZzkvgkWnCAx6', 60729135000002, 'newafro.near', 'ed25519:zHySQrr9wEmnzCXXN4cZx2swUevRiNXy5mSuiQusZxdxSu1CeYYknWaVJnuvqvJutdas1o637qkvzVmqE9g9sY5', 'SUCCESS_RECEIPT_ID', '4LgCKrU63fGMeJGvD9ufCNn4h3Sp8bvzF42kgHWMpw51', 5338398765356, 533839876535600000000);
INSERT INTO transactions (transaction_hash, included_in_block_hash, included_in_chunk_hash, index_in_chunk, block_timestamp, signer_account_id, signer_key, nonce, receiver_account_id, signature, status, converted_into_receipt_id, receipt_conversion_gas_burnt, receipt_conversion_tokens_burnt) VALUES ('FGqb2JzR1gVo1CzP2DynWWprH1qSwpLPxE4xbETU8KrB', 'ACtNYZTQm5TkatAHbAcTCmMBfXBt2XdHC9yv3JmdkpLM', 'CqZF1TerCjPpVKnoHgVPcmi9RhUhfV42C47K67uNsWg6', 1, 1646729044945554214, 'newafro.near', 'ed25519:8FiezMQHJJxJQrzsfDs7bmWHVACT7ked9N1mHbJMaTsB', 60996816000008, 'multisender.app.near', 'ed25519:5zhdhVwHCDPmbxNtFST86HJeMU8KAZ7pLjsU853ykyczXLE8nNGTCuxS3rwuWSv5qCdkk4ie7w75G1nS8NsaQyVd', 'SUCCESS_RECEIPT_ID', '5ANwuVG8W9m1me4VZfpR9zYnwqmab2zC24ThgBSrtLRn', 2428305580648, 242830558064800000000);
INSERT INTO transactions (transaction_hash, included_in_block_hash, included_in_chunk_hash, index_in_chunk, block_timestamp, signer_account_id, signer_key, nonce, receiver_account_id, signature, status, converted_into_receipt_id, receipt_conversion_gas_burnt, receipt_conversion_tokens_burnt) VALUES ('iGUyvvwnsFRK3fcSZT8KtWb71TnsJiXh3GcnbAcFTzp', '4rZGEMZY56TNXBvcpKZwxEytL6AuUM1P8WPbmKEuLLBN', '5ueGhfFJpFgsog5pE8yBqD7BxS5htFbk91iWB919kTia', 0, 1646727821011267509, 'newafro.near', 'ed25519:CyX5mAUQ3R3qmT2LJapmbyMFthVmMXkV13KamesnVcsx', 60996094000002, 'token.v2.ref-finance.near', 'ed25519:5YuBuhRqT5Pecedt3zgBtFBY5YPYaWghDNZYh2REMihaAkucSYCYiSsPu9eK1Zmk17RzM2YzScsuKrK83XFuxDn7', 'SUCCESS_RECEIPT_ID', '4BwKynMch9naQZZwD3VqJKowkq4PMktDAbqrAgtJBpRv', 2428081987248, 242808198724800000000);
INSERT INTO transactions (transaction_hash, included_in_block_hash, included_in_chunk_hash, index_in_chunk, block_timestamp, signer_account_id, signer_key, nonce, receiver_account_id, signature, status, converted_into_receipt_id, receipt_conversion_gas_burnt, receipt_conversion_tokens_burnt) VALUES ('6MYAXgsTZMdcdizxU27FfJzsfkcRSRmJsC4a2DHQf1ae', 'FuYEjCYwy8Mz7jaquQemMsTkBj2vcUERRHP6YyS11DpF', '2dVqqLjov1Fo3WrkeVuyvereamUkRcPKgg8AKSKYJdMN', 0, 1646734638342874150, 'newafro.near', 'ed25519:HAgTfLeQio24Gczs5DnHkYmDTtxgoHyTcy6NwKNJnhKb', 60998007000002, 'e-near.near', 'ed25519:ZDRgsnmhWGXqooF54oU6DUwKfzx6Jic2ZBRqBjGgFdzeXWJTLog3m5Heh1ofrRkiGuyEx7qrjZQaUqD5SeB6Xzc', 'SUCCESS_RECEIPT_ID', '51KpJ6ut71QRQx2ECBzy9ik3WiwoNQw9CBZwrPS3iu6G', 2428097638786, 242809763878600000000);
INSERT INTO transactions (transaction_hash, included_in_block_hash, included_in_chunk_hash, index_in_chunk, block_timestamp, signer_account_id, signer_key, nonce, receiver_account_id, signature, status, converted_into_receipt_id, receipt_conversion_gas_burnt, receipt_conversion_tokens_burnt) VALUES ('CnG41PfjS1omzY1bWFEhSWh811w3zWZqsZm8M85ppGr1', 'FJ7TWS5SrepssB2Z1AvxwCpkurndwDR5b9prRkSRAHz6', '4M4x28hL3sFZe8aK9Pj5vt1jRwbqUPyauJbycSJ3eGRr', 2, 1646393978913436353, 'newafro.near', 'ed25519:EHPeimCFYsnn3LnFYsECPBtTdwi5nLnJZzkvgkWnCAx6', 60729751000002, 'wrap.near', 'ed25519:25okXhqpXjAf96WpVVVw4KJF5qXWyQ9Zr8kWuC23HfMo4NoDh92cHwzF1wdgqQVscDvXtF9bBDPkVThUjF6hsKoX', 'SUCCESS_RECEIPT_ID', '4BwMBTRKbnaRMH4Fqm3AQM4kU1G9GeSybad9wrc4cdxS', 2427952303076, 242795230307600000000);
INSERT INTO transactions (transaction_hash, included_in_block_hash, included_in_chunk_hash, index_in_chunk, block_timestamp, signer_account_id, signer_key, nonce, receiver_account_id, signature, status, converted_into_receipt_id, receipt_conversion_gas_burnt, receipt_conversion_tokens_burnt) VALUES ('5KzsCLAHgMxAgH1pMP8tukJx9VCZRhmG4mMrY2L7vpp8', '2YxMsWoxghLZFrFLBgpTighvCNV2wzLhcqsWVZ7jnVgD', 'HX9P2KhGa1ABkfg152fTKHvF2Rajq1iJTnxABcpD61XR', 2, 1646728173152787229, 'newafro.near', 'ed25519:CyX5mAUQ3R3qmT2LJapmbyMFthVmMXkV13KamesnVcsx', 60996094000007, 'near', 'ed25519:4M4cWcpaBse39dQzQ8Eo4nngMptMGRUb11uYmXh4g7t5TxkPWCNebpZ5EzUBUESS1SVbgtL2ZPtSawb2JuCfvVh4', 'SUCCESS_RECEIPT_ID', '66DcPAETUf7RhJAXJXiBm6WE43S5fQ7HgCiZCW1tdUPc', 2428066335710, 242806633571000000000);
INSERT INTO transactions (transaction_hash, included_in_block_hash, included_in_chunk_hash, index_in_chunk, block_timestamp, signer_account_id, signer_key, nonce, receiver_account_id, signature, status, converted_into_receipt_id, receipt_conversion_gas_burnt, receipt_conversion_tokens_burnt) VALUES ('2Qg8p6xcr7WW3c2UUybipn7vKjdtqzU45fxXnw1gERxW', '6f5WiVXHgbzpSPAV9bqSMaJDgSNh5GNX3m9hqoMrYUs4', 'AUnpPbsd47iVN8wgJTRS3sPg5tk1jAXnJAcM8LsTJaCU', 1, 1646729097743310033, 'newafro.near', 'ed25519:8FiezMQHJJxJQrzsfDs7bmWHVACT7ked9N1mHbJMaTsB', 60996816000009, 'multisender.app.near', 'ed25519:5iVxGB9kFS8qrgAEbnrTxPgFBnphMdqHvh52uKwzncZj4b3UeeaqKRJ5UfbTJvw9rpxXz65o7RvH3cyFvJSGUG2o', 'SUCCESS_RECEIPT_ID', 'TKEJxuD2LH4Sq52WBQgVSx21LE3GKFiUb9rSb4ZnmBV', 2427941123406, 242794112340600000000);
INSERT INTO transactions (transaction_hash, included_in_block_hash, included_in_chunk_hash, index_in_chunk, block_timestamp, signer_account_id, signer_key, nonce, receiver_account_id, signature, status, converted_into_receipt_id, receipt_conversion_gas_burnt, receipt_conversion_tokens_burnt) VALUES ('5VU8Jk6avWa6GVo9SaAiATrZB9ruz8xVCEN2QLHK5Xk8', '24ZiWhrhA9ZAB8cUSZm2BAg6JoLkPgA8bHm4frrJrmzG', '3KDSEL4VFzvBeLFry2rjSV3E8PinZooMPSyz6RPLEZSA', 3, 1646729572653685670, 'newafro.near', 'ed25519:8FiezMQHJJxJQrzsfDs7bmWHVACT7ked9N1mHbJMaTsB', 60996816000013, 'stardust.poolv1.near', 'ed25519:2Bc97MtiMUfNC8Feu4GheU9U47qHEBtySQuCKcT9Gz518YAnvtLmF9W4ivSnb47Q8gk2ZKJpJMFY42dZH5qsKeuM', 'SUCCESS_RECEIPT_ID', 'CXfUqKyRMSY8JT2tkfxk1P9zWDjFVZhET76qE217BRVZ', 2427963482746, 242796348274600000000);

'''
'''--- backend/test_helpers/internal/updateTestData.ts ---
import fs from 'fs/promises';

import pg from 'pg';

import { subfolder } from '../../../shared/config.js';

const NODE_ENV = process.env.NODE_ENV;
export const POSTGRESQL_CONNECTION_STRING = process.env.POSTGRESQL_CONNECTION_STRING ?? '';

console.log({ NODE_ENV, subfolder }, `process.cwd()) = ${process.cwd()}`);

const sqlFileName = `./${subfolder}test_helpers/internal/testData.sql`;

/**
 * Populate the local PostgreSQL test database using './backend/test_helpers/internal/testData.sql'.
 */
export async function seedTheMockIndexerDatabase() {
  console.log('seedTheMockIndexerDatabase', { POSTGRESQL_CONNECTION_STRING });
  const sqlCommands = await fs.readFile(sqlFileName, { encoding: 'utf8' });
  const pgClient = new pg.Client(POSTGRESQL_CONNECTION_STRING);
  await pgClient.connect();
  await pgClient.query(sqlCommands);
  await pgClient.end();
}

'''
'''--- backend/test_helpers/updateTestData.sh ---
# Before using this file, ensure that backend/test_helpers/expectedOutput.csv contains the values that you want.
# Run this file like `yarn update_test_data`.

# TABLES is a variable storing comma-separated table names each prepended with "temp_test_export_". These are the 6 tables of the indexer database that this app needs to read from. The prefix is meant to clarify to anyone who happens to be browsing the private indexer DB at the time that these tables are special ephemeral tables that are about to be deleted.
TABLES=temp_test_export_transactions,temp_test_export_receipts,temp_test_export_execution_outcomes,temp_test_export_blocks,temp_test_export_action_receipt_actions,temp_test_export_transaction_actions
chosenTables=''

# https://stackoverflow.com/a/35894538/
for i in ${TABLES//,/ }
do
    chosenTables="$chosenTables --table=$i"
    echo "$chosenTables"
done

echo "Calling defineTransactionHashesInSql..."
yarn ts-node  --esm ./backend/test_helpers/internal/defineTransactionHashesInSql.ts

echo "Merging transactionHashes.sql with tableDefinitions.sql..."
cat backend/test_helpers/internal/transactionHashes.sql backend/data/tableDefinitions.sql > backend/test_helpers/internal/createTempTablesOfRowsWithSpecificTransactions.sql

echo "Calling createTempTablesOfRowsWithSpecificTransactions..."
# Now that those 2 SQL files were merged into 1, it can be run to create the temporary tables that we need on the remote database (private indexer). Those tables will contain only the specific rows that our tests care about (because of the WHERE clauses). Otherwise, downloading those tables would take up too much space on each engineer's local machine because they are hundreds of gigabytes each.
psql -Atx $PRODUCTION_POSTGRESQL_CONNECTION_STRING -af backend/test_helpers/internal/createTempTablesOfRowsWithSpecificTransactions.sql

echo "Downloading temp tables as schemas + INSERT statements..."
# pg_dump downloads the data (as INSERT statements) to a file that gets committed to the repo because our tests will rely on this real-world data.
pg_dump $PRODUCTION_POSTGRESQL_CONNECTION_STRING $chosenTables --column-inserts > backend/test_helpers/internal/testData.sql

# Delete all of those temporary tables from the remote database (private indexer).
for i in ${TABLES//,/ }
do
    echo "Dropping $i..."
    psql -Atx $PRODUCTION_POSTGRESQL_CONNECTION_STRING -c "DROP TABLE IF EXISTS $i;";
done

# Clean the SQL insert commands so that they are ready for when a test file needs to use them to seed the local PostgreSQL database.
SQL_FILE=backend/test_helpers/internal/testData.sql ./backend/data/cleanTheSql.sh

echo "Finished! testData.sql is now ready. Test suites can use it to seed the local database."
'''
'''--- backend/tsconfig.eslint.json ---
{
  "extends": "./tsconfig.json"
}

'''
'''--- backend/tsconfig.json ---
{
  "compilerOptions": {
    "target": "ES2022",
    "esModuleInterop": true,
    "module": "ES2022",
    "strictNullChecks": true,
    "allowSyntheticDefaultImports": true,
    "lib": ["ES2021.String"],
    "moduleResolution": "node",
    "composite": true /* Enable project compilation https://www.typescriptlang.org/docs/handbook/project-references.html */,
    //"baseUrl": "src",
    "types": ["node", "jest"]
  },
  "references": [
    {
      "path": "../frontend"
    },
    {
      "path": "../shared"
    }
  ]
}

'''
'''--- docker-compose.yml ---
version: "3.3"

services:
  backend:
    image: nearfoundation/txtrackingbackend:local
    #image: 283114800351.dkr.ecr.us-east-1.amazonaws.com/nearfoundation/transactionsbackend:develop
    build:
      context: ./
      dockerfile: ./docker/backend/Dockerfile
    environment:
      - REACT_APP_API_BASE_URL=http://localhost:8086
      # Remember to use NODE_ENV=production if you're using mainnet (so that the appropriate explorerUrl gets used in the frontend)
      - MONGO=mongodb://mongodb:27017/
      - MONGODB_PASSWORD=
      - NODE_ENV=production
      - POSTGRESQL_CONNECTION_STRING=postgresql://pguser:pgpass@postgres:5432/tta_db_local
      - MONGODB_USER=mongouser
      - MONGODB_PASSWORD=mongopass
      - MONGODB_HOST=mongodb
      - MONGODB_PORT=27017
      - NODE_ENV=development
      - ALLOW_DELETING_FROM_DATABASE=false
      - CHAIN=testnet
      - REACT_APP_ENVIRONMENT=development
      - MONGO=mongodb://mongodb:27017/near_accounting_report_dev?authSource=admin&readPreference=primary&directConnection=true&ssl=false
      # postgres
    depends_on:
      - postgres
      - mongodb
    ports:
      - 8086:8086
  frontend:
    image: nearfoundation/transactionsfrontend:local
    #image: 283114800351.dkr.ecr.us-east-1.amazonaws.com/nearfoundation/transactionsfrontend
    build:
      context: ./
      dockerfile: ./docker/frontend/Dockerfile
    environment:
      - REACT_APP_API_BASE_URL=http://localhost:8086
      # Remember to use NODE_ENV=production if you're using mainnet (so that the appropriate explorerUrl gets used in the frontend)
      - REACT_APP_ENVIRONMENT=development
      - REACT_APP_ALLOW_DELETING_FROM_DATABASE="false"
      - BACKEND_FOLDER=../backend/
    ports:
      - 8085:8085
    depends_on:
      - backend
  postgres:
    image: postgres:latest
    ports:
      - 5432:5432
    restart: always
    environment:
      POSTGRES_USER: pguser
      POSTGRES_PASSWORD: pgpass
      POSTGRES_DB: tta_db_local
  mongodb:
    image: mongo:5.0.2
    restart: always
    environment:
      - MONGODB_USER=mongouser
      - MONGODB_PASSWORD=mongopass
      - MONGO_INITDB_ROOT_USERNAME=${MONGODB_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_PASSWORD}
    ports:
      - 27017:27017
      #- "${MONGODB_LOCAL_PORT}:${MONGODB_DOCKER_PORT}"
    volumes:
      - db:/data/db

volumes:
  db:

'''
'''--- docker/backend/build_container.sh ---
#!/bin/bash
docker build ./ -t nearfoundation/txtrackingapi:local -f Dockerfile

'''
'''--- docker/backend/build_tag_push.sh ---
build_container.sh && tag_container.sh && push_container.sh

'''
'''--- docker/backend/build_tag_push_ecr.sh ---
#!/bin/bash

#build step with initial tag
docker build ./ -t nearfoundation/txtrackingbackend:develop -f ./docker/backend/Dockerfile

#tag step
docker tag nearfoundation/txtrackingbackend:develop 283114800351.dkr.ecr.us-east-1.amazonaws.com/nearfoundation/txtrackingbackend:develop

# push to ecr step (requires login using cloudops/ecr_login.sh)
docker push 283114800351.dkr.ecr.us-east-1.amazonaws.com/nearfoundation/txtrackingbackend:develop

'''
'''--- docker/backend/push_container.sh ---
docker push 283114800351.dkr.ecr.us-east-1.amazonaws.com/nearfoundation/txtrackingbackend:develop

'''
'''--- docker/backend/run_container.sh ---
docker run -p 8086:8086 nearfoundation/txtrackingapi:local

'''
'''--- docker/backend/tag_container.sh ---
#tag step
docker tag nearfoundation/txtrackingbackend:local 283114800351.dkr.ecr.us-east-1.amazonaws.com/nearfoundation/txtrackingbackend:develop

'''
'''--- docker/frontend/build_container.sh ---
#!/bin/bash
docker build ./ -t nearfoundation/transactionsfrontend:local -f ./frontend/docker/Dockerfile

'''
'''--- docker/frontend/frontend.js ---
var express = require("express");

var app = express();

app.use("/node_modules", express.static("./node_modules"));
app.use("/", express.static("./app"));

app.listen(8080, function () {
    console.log("HTTP Server running on port 8080");
});

'''
'''--- docker/frontend/package.json ---
{
  "name": "near-accounting-report",
  "version": "1.0.0",
  "description": "near-accounting-report",
  "dependencies": {
    "express": "^4.17.1"
  },
  "scripts": {
    "start": "npm run frontend",
    "frontend": "node ./frontend.js"
  }
}

'''
'''--- docker/frontend/push_container.sh ---
#!/bin/bash
docker push 283114800351.dkr.ecr.us-east-1.amazonaws.com/nearfoundation/transactionsfrontend:develop

'''
'''--- docker/frontend/run_container.sh ---
#!/bin/bash
docker run -p 8085:8085 -t nearfoundation/transactionsfrontend:local

'''
'''--- docker/frontend/tag_container.sh ---
#!/bin/bash
#tag step
docker tag nearfoundation/transactionsfrontend:local 283114800351.dkr.ecr.us-east-1.amazonaws.com/nearfoundation/transactionsfrontend:develop

'''
'''--- frontend/package.json ---
{
  "name": "near-transactions-accounting-report",
  "version": "0.1.0",
  "license": "UNLICENSED",
  "type": "module",
  "scripts": {
    "buildgeneric": "env-cmd -f .env.generic parcel build src/index.html",
    "rungeneric": "env-cmd -f .env.generic parcel src/index.html",
    "build": "env-cmd -f .env.local parcel build src/index.html --public-url ./",
    "start": "echo The app is starting! It will automatically open in your browser when ready && env-cmd -f ./.env.local parcel src/index.html --open",
    "dev": "nodemon --ext js --exec \"env-cmd -f ./.env.development.local parcel src/index.html\" --ignore \"dist\""
  },
  "devDependencies": {
    "@nearfoundation/near-prettier-config": "^1.0.1",
    "@parcel/transformer-sass": "2.7.0",
    "@shelf/jest-mongodb": "^4.1.0",
    "@types/jest": "^29.0.3",
    "@types/pg": "^8.6.5",
    "@types/react": "^18.0.21",
    "buffer": "^6.0.3",
    "env-cmd": "~10.1.0",
    "eslint": "^8.22.0",
    "eslint-config-near": "^1.0.3",
    "gh-pages": "~3.1.0",
    "jest": "^29.0.3",
    "jest-environment-node": "~26.6.2",
    "nodemon": "^2.0.19",
    "parcel": "^2.7.0",
    "prettier": "^2.7.1",
    "process": "^0.11.10",
    "react-test-renderer": "~17.0.1",
    "sass": "^1.55.0",
    "shelljs": "~0.8.4",
    "ts-jest": "^29.0.1",
    "typescript": "^4.7.4"
  },
  "dependencies": {
    "dayjs": "^1.11.5",
    "decimal.js": "^10.4.1",
    "near-api-js": "~0.43.1",
    "near-units": "^0.1.9",
    "papaparse": "^5.3.2",
    "react": "~17.0.1",
    "react-datepicker": "^4.7.0",
    "react-dom": "~17.0.1",
    "react-json-to-csv": "^1.0.4",
    "react-select": "^5.3.2",
    "regenerator-runtime": "~0.13.5"
  },
  "resolutions": {
    "@babel/preset-env": "7.13.8"
  },
  "prettier": "@nearfoundation/near-prettier-config",
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "engines": {
    "node": ">=18.0.0 <19.0.0"
  }
}

'''
'''--- frontend/src/__mocks__/fileMock.js ---
// NOTE: This is used to mock resource imports in JSX for tests
module.exports = '' 

'''
'''--- frontend/src/assets/logo-black.svg ---
<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#24272a"/><stop offset=".42" stop-color="#24272a" stop-opacity="0"/><stop offset=".59" stop-color="#24272a" stop-opacity="0"/><stop offset=".81" stop-color="#24272a"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#24272a"/></svg>
'''
'''--- frontend/src/assets/logo-white.svg ---
<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#fff"/><stop offset=".42" stop-color="#fff" stop-opacity="0"/><stop offset=".59" stop-color="#fff" stop-opacity="0"/><stop offset=".81" stop-color="#fff"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#fff"/></svg>
'''
'''--- frontend/src/helpers/config.ts ---
import { stringToBoolean } from '../../../shared/helpers/strings';

export const API_BASE_URL = process.env.REACT_APP_API_BASE_URL;
export const ALLOW_DELETING_FROM_DATABASE: boolean = stringToBoolean(process.env.REACT_APP_ALLOW_DELETING_FROM_DATABASE ?? 'false');
export const defaultRequestOptions = {
  headers: { 'Content-Type': 'application/json' },
  method: 'POST',
};
// export const ACCOUNT_UPDATE_POLLING_INTERVAL: number = Number(process.env.REACT_APP_ACCOUNT_UPDATE_POLLING_INTERVAL) ?? 30_000; // Note, this version is dangerous because it results in `NaN` which then causes hammering of the backend. Use the following line instead:
export const ACCOUNT_UPDATE_POLLING_INTERVAL: number = process.env.REACT_APP_ACCOUNT_UPDATE_POLLING_INTERVAL
  ? Number(process.env.REACT_APP_ACCOUNT_UPDATE_POLLING_INTERVAL)
  : 30_000;
console.log({ ACCOUNT_UPDATE_POLLING_INTERVAL });

'''
'''--- frontend/src/helpers/csv.ts ---
import * as Papa from 'papaparse';

import { getCsvFilename } from '../../../shared/helpers/datetime';
import { type CsvTransaction, type OptionType, type AccountId } from '../../../shared/types';

import { API_BASE_URL, defaultRequestOptions } from './config';

export const handleExportCsv = (csvTransactions: CsvTransaction[], startDate: Date, endDate: Date, accountIds: AccountId[]) => {
  if (csvTransactions.length > 0) {
    const csv = Papa.unparse(csvTransactions);
    const blob = new Blob([csv]);
    const a = window.document.createElement('a');
    a.href = window.URL.createObjectURL(blob);
    const filename = getCsvFilename(accountIds, startDate, endDate);
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
  }
};

// eslint-disable-next-line max-lines-per-function
export const getTransactionsCsv = async ({ selectedAccountIdsForCsv, setMessageCsv, startDate, endDate, selectedTypes, setCsvTransactions }) => {
  if (selectedAccountIdsForCsv.length > 0) {
    setCsvTransactions([]);
    setMessageCsv('Please wait while the CSV file is being prepared');
    const requestOptions = {
      ...defaultRequestOptions,
      body: JSON.stringify({
        types: selectedTypes.map((option: OptionType) => option.value),
        accountId: selectedAccountIdsForCsv,
        startDate,
        endDate,
      }),
    };
    await fetch(API_BASE_URL + '/transactions', requestOptions)
      .then(async (response) => {
        const data = await response.json();
        setCsvTransactions(data.transactions);
        if (data.transactions.length === 0) {
          setMessageCsv('No data for the csv file');
        }
      })
      .catch((error) => {
        console.error('There was an error!', error);
        setMessageCsv('Unknown error!');
        setCsvTransactions([]);
      });
  } else {
    setCsvTransactions([]);
    setMessageCsv('');
  }
};

'''
'''--- frontend/src/helpers/errors.ts ---
import type React from 'react';

export const logAndDisplayError = (error: string, setMessage: React.Dispatch<React.SetStateAction<string>>) => {
  console.error({ error });
  setMessage('Server error. If this keeps happening, please report to the Engineering team as many details as possible.');
};

'''
'''--- frontend/src/helpers/localStorage.ts ---
// https://usehooks.com/useLocalStorage/

import { useState } from 'react';

export function useLocalStorage<T>(key: string, initialValue: T) {
  // State to store our value
  // Pass initial state function to useState so logic is only executed once
  const [storedValue, setStoredValue] = useState<T>(() => {
    if (typeof window === 'undefined') {
      return initialValue;
    }

    try {
      // Get from local storage by key
      const item = window.localStorage.getItem(key);
      console.log(`Attempting to fetch localStorage key ${key}... 'item' = ${item}`);
      // Parse stored json or if none return initialValue
      return item ? JSON.parse(item) : initialValue;
    } catch (error) {
      // If error also return initialValue
      console.error(error);
      return initialValue;
    }
  });
  // Return a wrapped version of useState's setter function that ...
  // ... persists the new value to localStorage.
  const setValue = (value: T | ((value_: T) => T)) => {
    try {
      // Allow value to be a function so we have same API as useState
      const valueToStore = value instanceof Function ? value(storedValue) : value;
      // Save state
      console.log(`Saving to localStorage key ${key}... 'valueToStore' = ${valueToStore}`);
      setStoredValue(valueToStore);
      // Save to local storage
      if (typeof window !== 'undefined') {
        window.localStorage.setItem(key, JSON.stringify(valueToStore));
      }
    } catch (error) {
      // A more advanced implementation would handle the error case
      console.error(error);
    }
  };

  return [storedValue, setValue] as const;
}

'''
'''--- frontend/src/helpers/transactions.ts ---
import { type OptionType, type AccountId } from '../../../shared/types';

import { defaultRequestOptions, API_BASE_URL } from './config';
import { logAndDisplayError } from './errors';

export async function addTaskForAccountId(accountId: AccountId): Promise<Response> {
  console.log('addTaskForAccountId:', accountId);
  const requestOptions = {
    ...defaultRequestOptions,
    body: JSON.stringify({ accountId }),
  };
  return fetch(API_BASE_URL + '/addTasks', requestOptions);
}

export const getTypes = async (setTypes: (types: OptionType[]) => void, setMessage: (message: string) => void): Promise<void> => {
  const requestOptions = {
    ...defaultRequestOptions,
    method: 'GET',
  };
  try {
    const response: Response = await fetch(API_BASE_URL + '/types', requestOptions);
    const json = await response.json();
    setTypes(json.types);
  } catch (error: any) {
    logAndDisplayError(error, setMessage);
  }
};

export async function fetchTransactions(accountId: AccountId, startDate: Date, endDate: Date, selectedTypes: OptionType[]): Promise<Response> {
  const requestOptions = {
    ...defaultRequestOptions,
    body: JSON.stringify({
      accountId: [accountId],
      endDate,
      startDate,
      types: selectedTypes.map((option: OptionType) => option.value),
    }),
  };
  return fetch(API_BASE_URL + '/transactions', requestOptions);
}

'''
'''--- frontend/src/helpers/utils.ts ---
import { connect, Contract, keyStores, WalletConnection } from 'near-api-js';

import getConfig from '../../../shared/config';

console.log('src/utils.ts');
const nearConfig = getConfig();

// Initialize contract & set global variables
export async function initContract() {
  // Initialize connection to the NEAR testnet
  const near = await connect({ deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() }, ...nearConfig });

  // Initializing Wallet based Account. It can work with NEAR testnet wallet that is hosted at https://wallet.testnet.near.org.
  window.walletConnection = new WalletConnection(near, '');

  // Getting the Account ID. If still unauthorized, it's just an empty string.
  window.accountId = window.walletConnection.getAccountId();

  // Initializing our contract APIs by contract name and configuration.
  window.contract = await new Contract(window.walletConnection.account(), nearConfig.contractName, {
    // Change methods can modify the state. But you don't receive the returned value when called.
    changeMethods: ['set_greeting'],

    // View methods are read-only. They don't modify the state but usually return some value.
    viewMethods: ['get_greeting'],
  });
}

export function logout() {
  window.walletConnection.signOut();
  // reload page
  window.location.replace(window.location.origin + window.location.pathname);
}

export function login() {
  // Allow the current app to make calls to the specified contract on the user's behalf.
  // This works by creating a new access key for the user's account and storing the private key in localStorage.
  window.walletConnection.requestSignIn(nearConfig.contractName);
}

'''
'''--- frontend/src/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="./assets/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="apple-touch-icon" href="./assets/favicon.ico" />
    <title>NEAR Transactions Accounting Report</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
    <script src="./index.tsx" type="module"></script>
  </body>
</html>

'''
'''--- frontend/src/wallet/login/index.html ---
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/css/bootstrap.min.css" integrity="sha384-GJzZqFGwb1QTTN6wy59ffF1BuGJpLSa9DkKMp0DgiMDm4iYMj70gZWKYbI706tWS" crossorigin="anonymous">
</head>
<body style="background: #fff; margin-top: 3em">
  <div>For local account login, Please run the following command in NEAR CLI, then enter account id here.
  </div>
  <div>
      <code id="shell-command"></code>
  </div>
  <input type="text" id="accountId" name="accountId" placeholder="Account id"></input>
  <button type="button" onClick="done()">done</button>
  <script>
    const currentUrl = new URL(window.location.href);
    const message = `NODE_ENV=local near create_account {newAccountId} --masterAccount {masterAccountId} --publicKey ${currentUrl.searchParams.get('public_key')} --initialAmount 10000000000000000000`;
    document.getElementById('shell-command').innerText = message;

    function done() {
      const successUrl = new URL(currentUrl.searchParams.get('success_url'));
      successUrl.searchParams.set('account_id', document.getElementById('accountId').value);
      successUrl.searchParams.set('public_key', currentUrl.searchParams.get('public_key'));
      window.location.assign(successUrl.toString());
    }
  </script>
</body>
</html>
'''
'''--- frontend/tsconfig.eslint.json ---
{
  "extends": "./tsconfig.json"
}

'''
'''--- frontend/tsconfig.json ---
{
  "compilerOptions": {
    "jsx": "react-jsx",
    "target": "ES2022",
    "esModuleInterop": true,
    "module": "ES2022",
    "strictNullChecks": true,
    "allowSyntheticDefaultImports": true,
    "lib": ["ES2021.String", "DOM"], // https://stackoverflow.com/a/70231085/
    "moduleResolution": "node",
    "composite": true /* Enable project compilation https://www.typescriptlang.org/docs/handbook/project-references.html */
  },
  "references": [
    {
      "path": "../backend"
    },
    {
      "path": "../shared"
    }
  ]
}

'''
'''--- imagedefinitions-us-east-1-dev-transactionsbackend.json ---
[
  {
    "name": "transactionsbackend_dev_service",
    "imageUri": "283114800351.dkr.ecr.us-east-1.amazonaws.com/nearfoundation/transactionsbackend:develop"
  }
]

'''
'''--- imagedefinitions-us-east-1-dev-transactionsfrontend.json ---
[
  {
    "name": "transactionsfrontend_dev_service",
    "imageUri": "283114800351.dkr.ecr.us-east-1.amazonaws.com/nearfoundation/transactionsfrontend:develop"
  }
]

'''
'''--- jest.config.ts ---
// https://kulshekhar.github.io/ts-jest/docs/guides/esm-support/

/* eslint-disable canonical/filename-match-exported */
import { type JestConfigWithTsJest } from 'ts-jest';

const jestConfig: JestConfigWithTsJest = {
  // [...]
  preset: 'ts-jest/presets/default-esm', // or other ESM presets
  moduleNameMapper: {
    '^(\\.{1,2}/.*)\\.js$': '$1',
  },
  transform: {
    // '^.+\\.[tj]sx?$' to process js/ts with `ts-jest`
    // '^.+\\.m?[tj]sx?$' to process js/ts/mjs/mts with `ts-jest`
    '^.+\\.tsx?$': [
      'ts-jest',
      {
        useESM: true,
      },
    ],
  },
  setupFiles: ['dotenv/config'], // https://stackoverflow.com/a/66765765/ and https://stackoverflow.com/a/70665834/
};

export default jestConfig;

'''
'''--- package.json ---
{
  "name": "near-transactions-accounting-report",
  "version": "0.1.0",
  "license": "UNLICENSED",
  "type": "module",
  "scripts": {
    "install_all": "yarn install && (cd frontend && yarn install) && (cd backend && yarn install) && (cd shared && yarn install)",
    "record_commit_hash_and_build_time": "now=$(date -u \"+%Y-%m-%d %H:%M:%S\") && last_commit=$(git rev-parse HEAD) && echo \"{\\\"commit\\\": \\\"$last_commit\\\", \\\"build_time\\\": \\\"$now\\\"}\" > frontend/dist/version.json",
    "prebuild": "yarn record_commit_hash_and_build_time",
    "build": "(cd ./frontend && yarn build)",
    "start": "(cd frontend && yarn start)",
    "dev": "(cd frontend && yarn dev)",
    "drop_actions_and_tasks_and_types": "yarn ts-node --esm ./backend/dropActionsAndTasksAndTypes.ts",
    "update_local_seed_file": "export $(grep -v '^#' backend/.env.development.local | xargs) && PREPEND_BACKEND_SUBFOLDER=true ./backend/data/updateLocalSeedFile.sh",
    "update_test_data": "export $(grep -v '^#' backend/.env.development.local | xargs) && PREPEND_BACKEND_SUBFOLDER=true ./backend/test_helpers/updateTestData.sh",
    "seed": "export $(grep -v '^#' backend/.env.development.local | xargs) && PREPEND_BACKEND_SUBFOLDER=true ./backend/data/seedLocalDatabase.sh",
    "test": "DOTENV_CONFIG_PATH=.env.test jest",
    "t": "(cd backend && DOTENV_CONFIG_PATH=.env.test jest --testNamePattern=\"_tx_\" src/helpers/updateTransactions.test.ts)",
    "overwrite": "(cd backend && DOTENV_CONFIG_PATH=.env.test jest --testNamePattern=\"possibleExpectedOutput\")",
    "backend_dev": "(cd backend && yarn dev)",
    "benchmark": "(cd backend && yarn ts-node --esm ./data/benchmarkTheSqlQueries.ts)"
  },
  "devDependencies": {
    "@nearfoundation/near-prettier-config": "^1.0.1",
    "@shelf/jest-mongodb": "^4.1.1",
    "@types/jest": "^29.1.2",
    "csvjson-json2csv": "^1.0.3",
    "dotenv": "^16.0.3",
    "eslint": "^8.25.0",
    "eslint-config-near": "^1.0.3",
    "jest": "^29.2.0",
    "jest-environment-node": "^29.2.0",
    "ts-jest": "^29.0.3",
    "ts-node": "^10.9.1",
    "typescript": "^4.8.4"
  },
  "resolutions": {
    "@babel/preset-env": "7.13.8"
  },
  "prettier": "@nearfoundation/near-prettier-config",
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "engines": {
    "node": ">=18.0.0 <19.0.0"
  }
}

'''
'''--- shared/config.ts ---
/* eslint-disable canonical/filename-match-exported */
import { type LogObject } from 'winston-cloudwatch';

const contractName = process.env.CONTRACT_NAME ?? 'near-transactions-accounting-report';
const localHome = process.env.HOME;
const CHAIN = process.env.REACT_APP_CHAIN ?? process.env.CHAIN ?? 'mainnet';
export const LOG_TO_CONSOLE = process.env.LOG_TO_CONSOLE ?? 'true';
export const LOG_TO_CLOUDWATCH = process.env.LOG_TO_CLOUDWATCH ?? 'false'; // TODO: Figure out how to change this default to 'true' without breaking tests and scripts.

const PREPEND_BACKEND_SUBFOLDER = process.env.PREPEND_BACKEND_SUBFOLDER ?? 'false';
export const subfolder = PREPEND_BACKEND_SUBFOLDER === 'true' ? 'backend/' : ''; // Useful for when calling a script from the parent/root folder instead of within 'backend'.

console.log({ LOG_TO_CONSOLE, LOG_TO_CLOUDWATCH });

export const cloudwatchConfig = {
  // https://javascript.plainenglish.io/set-up-a-logger-for-your-node-app-with-winston-and-cloudwatch-in-5-minutes-dec0c6c0d5b8
  logGroupName: process.env.CLOUDWATCH_GROUP_NAME,
  logStreamName: `${process.env.CLOUDWATCH_GROUP_NAME}-${process.env.NODE_ENV}`,
  awsAccessKeyId: process.env.CLOUDWATCH_ACCESS_KEY_ID,
  awsSecretKey: process.env.CLOUDWATCH_SECRET_KEY,
  awsRegion: process.env.CLOUDWATCH_REGION,
  messageFormatter: ({ level, message, additionalInfo }: LogObject) => `[${level}]: ${message} \nAdditional Info: ${JSON.stringify(additionalInfo)}}`,
};

// eslint-disable-next-line max-lines-per-function
const getConfig = () => {
  // console.log('shared/config.js getConfig', { CHAIN });
  switch (CHAIN) {
    case 'production':
    case 'test': // The reason for putting 'test' here, causing mainnet to be used is that tests like getCurrencyByContract depend on real world data. What are the risks, though?
    case 'mainnet':
      return {
        contractName,
        exampleAccount: 'example.near',
        explorerUrl: 'https://explorer.mainnet.near.org',
        helperUrl: 'https://helper.mainnet.near.org',
        networkId: 'mainnet',
        nodeUrl: 'https://rpc.mainnet.near.org',
        walletUrl: 'https://wallet.near.org', // If this URL isn't the wallet selector, we might need to update it soon.
      };
    case 'development':
    case 'testnet':
      return {
        contractName,
        exampleAccount: 'example.testnet',
        explorerUrl: 'https://explorer.testnet.near.org',
        helperUrl: 'https://helper.testnet.near.org',
        networkId: 'testnet',
        nodeUrl: 'https://rpc.testnet.near.org',
        walletUrl: 'https://wallet.testnet.near.org',
      };
    case 'betanet':
      return {
        contractName,
        explorerUrl: 'https://explorer.betanet.near.org',
        helperUrl: 'https://helper.betanet.near.org',
        networkId: 'betanet',
        nodeUrl: 'https://rpc.betanet.near.org',
        walletUrl: 'https://wallet.betanet.near.org',
      };
    case 'local':
      return {
        contractName,
        keyPath: `${localHome}/.near/validator_key.json`,
        networkId: 'local',
        nodeUrl: 'http://localhost:3030',
        walletUrl: 'http://localhost:4000/wallet',
      };
    case 'ci':
      return {
        contractName,
        masterAccount: 'test.near',
        networkId: 'shared-test',
        nodeUrl: 'https://rpc.ci-testnet.near.org',
      };
    case 'ci-betanet':
      return {
        contractName,
        masterAccount: 'test.near',
        networkId: 'shared-test-staging',
        nodeUrl: 'https://rpc.ci-betanet.near.org',
      };
    default:
      throw new Error(`Unconfigured CHAIN '${CHAIN}'. Can be configured in shared/config.js.`);
  }
};

export default getConfig;

'''
'''--- shared/helpers/datetime.test.ts ---
// Run via `yarn test shared/helpers/datetime.test.ts`

// https://jestjs.io/docs/getting-started#using-typescript
import dayjs from 'dayjs';

import { getEndOfDayUtc, getRelativeTimeOrUtc, getStartOfDayUtc, treatLocalDateAsUtcMidnight, treatUtcMidnightAsLocalDate } from './datetime';

// eslint-disable-next-line max-lines-per-function
describe('datetime helper', () => {
  test('getRelativeTimeOrUtc', () => {
    expect(getRelativeTimeOrUtc('')).toBe('');
    const sometimeLongAgo = '2000-01-01 00:00:00 UTC';
    expect(getRelativeTimeOrUtc(sometimeLongAgo)).toBe(sometimeLongAgo);
    expect(getRelativeTimeOrUtc(dayjs().subtract(2, 'day').toISOString())).toBe('2 days ago');
  });

  test('getStartOfDayUtc', () => {
    expect(getStartOfDayUtc(dayjs.utc('2022-10-01 08:00').toDate()).toISOString()).toEqual('2022-10-01T00:00:00.000Z');
    expect(getStartOfDayUtc(dayjs.utc('2022-10-01 22:00').toDate()).toISOString()).toEqual('2022-10-01T00:00:00.000Z');
    expect(getStartOfDayUtc(dayjs.utc('2022-10-01 23:30').toDate()).toISOString()).toEqual('2022-10-01T00:00:00.000Z');
  });

  test('getEndOfDayUtc', () => {
    expect(getEndOfDayUtc(dayjs.utc('2022-10-01 08:00').toDate()).toISOString()).toEqual('2022-10-01T23:59:59.999Z');
    expect(getEndOfDayUtc(dayjs.utc('2022-10-01 22:00').toDate()).toISOString()).toEqual('2022-10-01T23:59:59.999Z');
    expect(getEndOfDayUtc(dayjs.utc('2022-10-01 23:30').toDate()).toISOString()).toEqual('2022-10-01T23:59:59.999Z');
  });

  test('treatLocalDateAsUtcMidnight', () => {
    expect(treatLocalDateAsUtcMidnight(new Date(Date.parse('2022-10-01 08:00 GMT-0400'))).toISOString()).toEqual('2022-10-01T00:00:00.000Z');
    expect(treatLocalDateAsUtcMidnight(new Date(Date.parse('2022-10-01 22:00 GMT-0400'))).toISOString()).toEqual('2022-10-01T00:00:00.000Z');
    expect(treatLocalDateAsUtcMidnight(new Date(Date.parse('2022-10-01 23:30 GMT-0400'))).toISOString()).toEqual('2022-10-01T00:00:00.000Z');
    expect(treatLocalDateAsUtcMidnight(new Date(Date.parse('2022-09-01 01:30 GMT-0400'))).toISOString()).toEqual('2022-09-01T00:00:00.000Z');
    expect(treatLocalDateAsUtcMidnight(new Date(Date.parse('2022-09-01 20:00 GMT-0400'))).toISOString()).toEqual('2022-09-01T00:00:00.000Z');
    expect(treatLocalDateAsUtcMidnight(new Date(Date.parse('2022-09-01 20:00 GMT-0400'))).toISOString()).toEqual('2022-09-01T00:00:00.000Z');
    expect(treatLocalDateAsUtcMidnight(new Date(Date.parse('2022-09-02 00:00 GMT-0400'))).toISOString()).toEqual('2022-09-02T00:00:00.000Z');
  });

  test('treatUtcMidnightAsLocalDate', () => {
    const testMoment = dayjs.utc('2022-10-01 00:00');
    const zone = dayjs.tz.guess(); // https://day.js.org/docs/en/timezone/guessing-user-timezone
    const local = testMoment.tz(zone, true);
    expect(treatUtcMidnightAsLocalDate(testMoment.toDate()).toISOString()).toEqual(local.toISOString());
  });
});

'''
'''--- shared/helpers/datetime.ts ---
import dayjs from 'dayjs';
// eslint-disable-next-line import/extensions
import relativeTime from 'dayjs/plugin/relativeTime.js';
import utc from 'dayjs/plugin/utc.js';
// eslint-disable-next-line import/order
import timezone from 'dayjs/plugin/timezone.js'; // dependent on utc plugin https://day.js.org/docs/en/plugin/timezone

dayjs.extend(utc); // https://day.js.org/docs/en/plugin/utc
dayjs.extend(relativeTime); // https://day.js.org/docs/en/plugin/relative-time
dayjs.extend(timezone);

/**
 *
 * @param {Date} date
 * @returns {string} like 2022-08-03 17:32:00 UTC
 */
export const getFormattedUtcDatetime = (date: Date): string => {
  return dayjs(date).utc().format('YYYY-MM-DD HH:mm:ss [UTC]'); // https://day.js.org/docs/en/manipulate/utc
};

export function getFormattedUtcDatetimeNow(): string {
  return getFormattedUtcDatetime(new Date());
}

export const getFormattedUtcDatetimeForFilename = (date: Date): string => {
  const formattedUtcDatetime = getFormattedUtcDatetime(date);
  return formattedUtcDatetime.replaceAll(' ', '_').replaceAll(':', '');
};

export const getCsvFilename = (accountIds: string[], startDate: Date, endDate: Date) => {
  const prefix = accountIds.length ? `${accountIds.join('_')}_` : ``;
  const filename = `${prefix}${getFormattedUtcDatetimeForFilename(startDate)}_to_${getFormattedUtcDatetimeForFilename(endDate)}_at_${getFormattedUtcDatetimeForFilename(
    new Date(),
  )}.csv`;
  console.log({ filename });
  return filename;
};

export function getStartOfDayUtc(date: Date): Date {
  // console.log('getStartOfDayUtc', date);
  return dayjs.utc(date).startOf('day').toDate(); // https://day.js.org/docs/en/manipulate/start-of
}

export function getEndOfDayUtc(date: Date): Date {
  // console.log('getEndOfDayUtc', date);
  return dayjs.utc(date).endOf('day').toDate(); // https://day.js.org/docs/en/manipulate/end-of
}

export const getDefaultStartUtc = (): Date => {
  const start = new Date(Date.UTC(2_020, 9, 1, 0, 0, 0));
  return new Date(start);
};

export const getEndOfTodayUtc = (): Date => {
  const moment = new Date();
  return getEndOfDayUtc(moment);
};

export function treatLocalDateAsUtcMidnight(localDate: Date): Date {
  const moment = dayjs(localDate).tz('UTC', true); // https://day.js.org/docs/en/plugin/timezone
  const utcMidnight = getStartOfDayUtc(moment.toDate());
  console.log({ localDate, utcMidnight });
  return utcMidnight;
}

export function treatUtcMidnightAsLocalDate(utcMidnight: Date): Date {
  const sliceOfJustTheDatePart = utcMidnight.toISOString().slice(0, 10);
  const localDate = dayjs(sliceOfJustTheDatePart).toDate();

  console.log({ localDate, sliceOfJustTheDatePart, utcMidnight });
  return localDate;
}

/**
 *
 * @param {number} block_timestamp in nanoseconds (billionths of a second), such as 1659547920000000000
 * @returns {string} like 2022-08-03 17:32:00
 */
export const getFormattedDatetimeUtcFromBlockTimestamp = (block_timestamp: number): string => {
  const timestampInMilliseconds = block_timestamp / 1_000_000;
  return getFormattedUtcDatetime(new Date(timestampInMilliseconds)).replace(/ UTC$/u, '');
};

export const getRangeFilter = (startDate: number, endDate: number) => {
  return {
    $gte: Math.floor(new Date(startDate).getTime()) * 1_000_000,
    $lte: Math.floor(new Date(endDate).getTime()) * 1_000_000,
  };
};

export function millisToMinutesAndSeconds(milliseconds: number): string {
  const minutes = Math.floor(milliseconds / 60_000);
  const seconds = ((milliseconds % 60_000) / 1_000).toFixed(0);
  return `${minutes}:${seconds.padStart(2, '0')}`;
}

// ---------------------------------------
// TODO: Clean up these functions.
/* eslint-disable no-param-reassign */
export function convertUTCToLocalDate(date: any) {
  if (!date) {
    return date;
  }

  date = new Date(date);
  date = new Date(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate());
  return date;
}

export function convertLocalToUTCDate(date: any) {
  if (!date) {
    return date;
  }

  date = new Date(date);
  date = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()));
  return date;
}
/* eslint-enable no-param-reassign */
// ---------------------------------------

export function getRelativeTimeOrUtc(date: string): string {
  if (date === '') {
    return '';
  } else {
    const defaultMomentString = getFormattedUtcDatetime(new Date(date));
    const defaultMoment = dayjs(defaultMomentString);
    if (dayjs().subtract(1, 'week').isBefore(defaultMoment)) {
      return dayjs().to(defaultMoment); // relative time, such as "2 days ago" https://day.js.org/docs/en/plugin/relative-time
    } else {
      return defaultMomentString;
    }
  }
}

'''
'''--- shared/helpers/logging.ts ---
import util from 'util';

import { type TransformableInfo, type ColorizeOptions } from 'logform';
import winston from 'winston';
import WinstonCloudWatch from 'winston-cloudwatch';
import type * as Transport from 'winston-transport';
import { type AbstractConfigSetLevels } from 'winston/lib/winston/config/index.js';

import { cloudwatchConfig, LOG_TO_CLOUDWATCH, LOG_TO_CONSOLE } from '../config.js';
import { type Arguments } from '../types/index.js';

const myCustomLevels: { colors: { [key: string]: string }; levels: AbstractConfigSetLevels } = {
  levels: {
    // These are the defaults: https://github.com/winstonjs/winston#logging-levels
    error: 0,
    warn: 1,
    info: 2,
    // http: 3,
    success: 3, // 'success' is a custom level replacing 'http'.
    verbose: 4,
    debug: 5,
    silly: 6,
  },
  colors: {
    // https://github.com/winstonjs/winston#using-custom-logging-levels
    error: 'redBG',
    warn: 'yellow',
    info: 'blue',
    debug: 'magenta',
    silly: 'gray',
    success: 'greenBG',
  },
};

const colorizerOptions: ColorizeOptions = { level: true, message: false };
const colorizer = winston.format.colorize(colorizerOptions);

function convertSplatToString(splat: Arguments) {
  const result: string[] = [];
  for (const key of Object.keys(splat)) {
    const item = splat[key];
    const withColors = util.inspect(item, { colors: true, depth: null, showHidden: false });
    result.push(withColors);
  }

  return result.join(', ');
}

function getAllArgumentsWithColorsPreserved(providedArguments: Arguments): string {
  // https://stackoverflow.com/questions/74186705/how-to-preserve-default-syntax-highlighting-colors-in-javascript-console
  const splat = providedArguments[Symbol.for('splat')];
  if (splat) {
    // console.log({ splat });
    return convertSplatToString(splat);
  } else {
    return '';
  }
}

const simpleConsoleLogging = winston.format.combine(
  // Simple console logging for local environment.
  winston.format.timestamp(),
  winston.format.printf((info: TransformableInfo) => {
    const { level, message, timestamp, ...rest } = info;
    const coloredTimestampAndLevel = colorizer.colorize(level, `${timestamp} ${level}:`);
    const syntaxHighlightedObjects = getAllArgumentsWithColorsPreserved(rest);
    return `${coloredTimestampAndLevel} ${message} ${syntaxHighlightedObjects}`; // https://github.com/winstonjs/winston/issues/1388#issuecomment-432932959
  }),
);

function getMaxLevelName(levels: AbstractConfigSetLevels): string {
  let maxLevel = 0;
  let maxLevelName = '';
  for (const level of Object.keys(levels)) {
    if (levels[level] > maxLevel) {
      maxLevel = levels[level];
      maxLevelName = level;
    }
  }

  return maxLevelName;
}

const transports: Transport[] = [];
if (LOG_TO_CONSOLE === 'true') {
  transports.push(new winston.transports.Console({ format: simpleConsoleLogging, level: getMaxLevelName(myCustomLevels.levels) }));
}

export const logger = winston.createLogger({
  levels: myCustomLevels.levels,
  format: simpleConsoleLogging,
  // defaultMeta: { service: 'user-service' },
  transports,
}) as Record<keyof typeof myCustomLevels.levels, winston.LeveledLogMethod> & winston.Logger; // https://stackoverflow.com/a/53298622/

winston.addColors(myCustomLevels.colors); // https://github.com/winstonjs/winston#using-custom-logging-levels

if (LOG_TO_CLOUDWATCH === 'true') {
  logger.add(new WinstonCloudWatch(cloudwatchConfig));
}

'''
'''--- shared/helpers/precision.test.ts ---
// https://jestjs.io/docs/getting-started#using-typescript

import { Decimal } from 'decimal.js'; // https://github.com/MikeMcl/decimal.js

import { round, getLocaleStringToDecimals, getBigNumberAsString } from './precision';

type Cases = {
  [key: string]: string;
};

// eslint-disable-next-line max-lines-per-function
describe('precision helper', () => {
  const locale = 'en-US';
  const deDE = 'de-DE';

  test('getLocaleStringToDecimals', () => {
    expect(getLocaleStringToDecimals('4500000000', 1, locale)).toBe('4,500,000,000.0');
    expect(getLocaleStringToDecimals('9000.0000000000004500000000', 15, locale)).toBe('9,000.000000000000450');
    expect(getLocaleStringToDecimals('9000.630', 3, deDE)).toBe('9.000,630');
    expect(getLocaleStringToDecimals(new Decimal('4.5e-12').toFixed(10), 2, locale)).toBe('0.00');
    expect(getLocaleStringToDecimals('4513263875304671192000009.1998679030467029262556391239', 28, locale)).toBe('4,513,263,875,304,671,192,000,009.1998679030467029262556391239');
  });

  test('round (using defaults)', () => {
    // The cases in this test would sometimes fail if not specifying `locale` too, actually, so `undefined` is used below to cause the defaults to be used for those arguments.
    const cases: Cases = {
      '9_999_513_263_875_304_671_192_000_009': '9,999,513,263,875,304,671,192,000,009',
      '4_513_263_875_304_671_192_000_009': '4,513,263,875,304,671,192,000,009',
      '19_986_790_304_670_292_625_563': '19,986,790,304,670,292,625,563',
      '9_993_575_646_028_206_228_514': '9,993,575,646,028,206,228,514',
      '4_500_000_000': '4,500,000,000',
    };
    for (const key of Object.keys(cases)) {
      expect(round(key, undefined, undefined, locale)).toBe(cases[key]);
    }

    expect(round('1', undefined, undefined, locale)).toBe('1');
  });

  test('round custom decimals and divisorPower', () => {
    const cases: Cases = {
      '19_986_790_304_670_292_625_563': '19.99',
      '9_993_575_646_028_206_228_514': '9.99',
      '4_500_000_000': '0.00',
    };
    for (const key of Object.keys(cases)) {
      const decimals = 2;
      const divisorPower = 21;
      expect(round(key, decimals, divisorPower, locale)).toBe(cases[key]);
    }

    expect(round('500_000_000_000_000', 4, 15, locale)).toBe('0.5000');
    expect(round('490', 1, 3, locale)).toBe('0.5');
    expect(round('4_513_263_875_304_671_192_000_009', 6, 21, locale)).toBe('4,513.263875');
    expect(round('4_513_263_875_304_671_192_000_009', 6, 21, deDE)).toBe('4.513,263875');
    expect(round('4_513_263_875_304_671_192_000_009.1998679030467029262556391239', 27, undefined, locale)).toBe('4,513,263,875,304,671,192,000,009.199867903046702926255639124');
  });

  test('getBigNumberAsString', () => {
    // eslint-disable-next-line unicorn/numeric-separators-style
    expect(getBigNumberAsString(1664961079340576500)).toBe('1664961079340576500');
    expect(getBigNumberAsString(1e26)).toBe('100000000000000000000000000');
    expect(getBigNumberAsString(8e28)).toBe('80000000000000000000000000000');
    expect(getBigNumberAsString(undefined)).toBe('');
    expect(getBigNumberAsString(null)).toBe('');
  });
});

'''
'''--- shared/helpers/precision.ts ---
import { Decimal } from 'decimal.js'; // https://github.com/MikeMcl/decimal.js

import { type PoolsCurrency } from '../types';

function getDecimalChar(locale: string | undefined): string {
  const decimalFormat = new Intl.NumberFormat(locale, { minimumFractionDigits: 1, maximumFractionDigits: 1 });
  const decimalFullString = '1.1';
  const decimalFullNumber = Number.parseFloat(decimalFullString);
  const decimalChar = decimalFormat.format(decimalFullNumber).charAt(1); // e.g. '.' or ','
  return decimalChar;
}

export function getBigNumberAsString(number: number | null | undefined): string {
  if (number) {
    Decimal.set({ precision: 1_000 }); // https://mikemcl.github.io/decimal.js/#precision // TODO: What precision should we use?
    const decimal = new Decimal(`${number}`);
    return decimal.toFixed(0);
  } else {
    return '';
  }
}

/**
 *
 * @param amount {string}
 * @param decimals {number} e.g. 6 would return 6 decimal places like 0.000000
 * @param locale {string} e.g. 'en-US' or 'de-DE'
 * @returns {string} e.g. 1,000.000000
 */
export function getLocaleStringToDecimals(amount: string, decimals: number, locale?: string): string {
  // Thanks to https://stackoverflow.com/a/68906367/ because https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString and https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/toLocaleString would not work for huge numbers or numbers with many decimal places.

  const fixed = new Decimal(amount).toFixed(decimals);
  const [mainString, decimalString] = fixed.split('.'); // ['321321321321321321', '357' | '998']
  const mainFormat = new Intl.NumberFormat(locale, { minimumFractionDigits: 0 });
  const mainBigInt = BigInt(mainString); // 321321321321321321n
  const mainFinal = mainFormat.format(mainBigInt); // '321.321.321.321.321.321' | '321.321.321.321.321.322'
  const decimalFinal = typeof decimalString === 'undefined' ? '' : `${getDecimalChar(locale)}${decimalString}`; // '.357' | '.998'
  const amountFinal = `${mainFinal}${decimalFinal}`; // '321.321.321.321.321.321,36' | '321.321.321.321.321.322,00'
  // console.log({
  //   amount,
  //   fixed,
  //   mainString,
  //   decimalString,
  //   'decimalString.length': decimalString ? decimalString.length : undefined,
  //   decimalFinal,
  //   mainFormat,
  //   mainBigInt,
  //   mainFinal,
  //   amountFinal,
  // });
  return amountFinal;
}

/**
 *
 * @param amount {string}
 * @param decimals {number} e.g. 6 would return 6 decimal places like 0.000000
 * @param divisorPower {number} e.g. 0 for yocto, 24 for [base], 27 for kilo, etc https://docs.near.org/tools/near-api-js/utils https://github.com/near/units-js/blob/d0e76d5729b0f3b58b98263a1f92fb057eb84d96/__tests__/near.spec.ts#L13
 * @param locale {string} e.g. 'en-US' or 'de-DE'
 * @returns {string} e.g. 1,000.000000
 */
export function round(amount: string, decimals: number = 0, divisorPower: number = 0, locale?: string): string {
  if (amount) {
    if (divisorPower < 0) {
      throw new Error('divisorPower must be >= 0');
    }

    const amountCleaned = amount.replaceAll('_', '');
    const divisor = 10 ** divisorPower;
    const precision = amount.length + decimals;
    Decimal.set({ precision }); // https://mikemcl.github.io/decimal.js/#precision
    const value: string = new Decimal(amountCleaned).div(divisor).toFixed(precision);
    // console.log(`round(${amount}, decimals = ${decimals}, divisorPower = ${divisorPower}) = ${value}`, divisor);
    const localeString = getLocaleStringToDecimals(value, decimals, locale);
    return localeString;
  } else {
    return '';
  }
}

/**
 * TODO: Document what this is doing and why. Consider removing / moving hard-coded strings.
 *
 * @param {number | string} amount
 * @param {string} currency
 * @returns {string}
 */
export async function convertAmount(amount: number | string, currency: string, getDecimals: (currency: string) => Promise<PoolsCurrency>): Promise<string> {
  const yoctoPower = 24;
  if (currency === 'NEAR' || currency === 'wNEAR') {
    return new Decimal(amount)
      .div(new Decimal(10 ** yoctoPower))
      .toDecimalPlaces(10)
      .toString();
  }

  const decimals = await getDecimals(currency);
  if (decimals?.decimals) {
    return new Decimal(amount)
      .div(new Decimal(10 ** decimals.decimals))
      .toDecimalPlaces(10)
      .toString();
  } else {
    return new Decimal(amount)
      .div(new Decimal(10 ** yoctoPower))
      .toDecimalPlaces(10)
      .toString();
  }
}

'''
'''--- shared/helpers/statusCodes.ts ---
export const SUCCESS = 200;
export const BAD_REQUEST = 400;
export const SERVER_ERROR = 500;
export const OK = { status: 'ok' };

'''
'''--- shared/helpers/strings.ts ---
export function stringToBoolean(string: string): boolean {
  // See also https://github.com/ladjs/dotenv-parse-variables/blob/85f20b928f214ff79d9f92821393e3269a587bf6/src/index.js#L59 mentioned at https://github.com/motdotla/dotenv/issues/51#issuecomment-236389758
  switch (string.toLowerCase().trim()) {
    case 'true':
    case 'yes':
    case '1':
      return true;
    case 'false':
    case 'no':
    case '0':
    case null:
      return false;
    default:
      return Boolean(string);
  }
}

'''
'''--- shared/package.json ---
{
  "name": "near-transactions-accounting-report",
  "version": "0.1.0",
  "license": "UNLICENSED",
  "type": "module",
  "scripts": {
    "test": "DOTENV_CONFIG_PATH=../backend/.env.test jest"
  },
  "dependencies": {
    "@aws-sdk/client-cloudwatch-logs": "^3.194.0",
    "aws-sdk": "^2.1238.0",
    "dayjs": "^1.11.5",
    "decimal.js": "^10.4.1",
    "react": "~17.0.1",
    "winston": "^3.8.2",
    "winston-cloudwatch": "^6.1.1"
  },
  "resolutions": {
    "@babel/preset-env": "7.13.8"
  },
  "prettier": "@nearfoundation/near-prettier-config",
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "engines": {
    "node": ">=18.0.0 <19.0.0"
  },
  "devDependencies": {
    "@nearfoundation/near-prettier-config": "^1.0.1",
    "@shelf/jest-mongodb": "^4.1.1",
    "@types/jest": "^29.1.2",
    "@types/react": "^18.0.21",
    "eslint": "^8.25.0",
    "eslint-config-near": "^1.0.3",
    "jest": "^29.2.0",
    "jest-environment-node": "^29.2.0",
    "logform": "^2.4.2",
    "prettier": "^2.7.1",
    "ts-jest": "^29.0.3",
    "typescript": "^4.8.4"
  }
}

'''
'''--- shared/tsconfig.eslint.json ---
{
  "extends": "./tsconfig.json"
}

'''
'''--- shared/tsconfig.json ---
{
  "compilerOptions": {
    "target": "ES2022",
    "esModuleInterop": true,
    "module": "ES2022",
    "strictNullChecks": true,
    "allowSyntheticDefaultImports": true,
    "lib": ["ES2021", "DOM"],
    "moduleResolution": "node",
    "composite": true /* Enable project compilation https://www.typescriptlang.org/docs/handbook/project-references.html */
  },
  "references": [
    {
      "path": "../frontend"
    },
    {
      "path": "../backend"
    }
  ]
}

'''
'''--- shared/types/csvToJson.d.ts ---
declare module 'csvjson-csv2json'; // https://stackoverflow.com/a/50516783/ Running `yarn t` won't work without this file.

'''
'''--- shared/types/index.d.ts ---
import type React from 'react';

export type AccountId = string;

export type AccountStatus = {
  accountId: AccountId;
  lastUpdate: string | null;
  status: string;
};

// --------------------------------------------------------
// Does this section contain duplicate code? I.e. Are these types already defined elsewhere, such as in Mongoose models? https://stackoverflow.com/a/61154023/

type Decimal128 = any; // How can we handle this?

export type TxActionRow = {
  // See backend/src/models/TxActions.ts and https://mongoosejs.com/docs/typescript.html
  accountId: string;
  amount_transferred?: string;
  amount_transferred2?: string;
  args_base64?: string;
  block_height?: number | null; // TODO: Should we change this to string?
  block_timestamp?: Decimal128; // TODO: Should we change this to string?
  block_timestamp_utc?: string;
  cliff_duration?: string;
  currency_transferred?: string;
  currency_transferred2?: string;
  from_account?: string;
  get_currency_by_contract?: string;
  lockup_duration?: string;
  lockup_start?: string;
  pool_id?: string;
  receiver_lockup_account?: string;
  receiver_owner_account?: string;
  release_duration?: string;
  transaction_hash?: string;
  txType: string;
};

export type TxActionModel = TxActionRow; // TODO

export type TxTypeRow = {
  name: string;
  sql: string;
};

export type TxActionsFilter = {
  accountId: AccountId;
  block_timestamp: {
    $gte: number;
    $lte: number;
  };
  txType?: string[];
};

export type PoolsCurrency = any; // TODO: Is this named properly? What is this type?
// --------------------------------------------------------

export type OptionType = { label: string; value: string }; // https://github.com/JedWatson/react-select/issues/2902#issuecomment-624806537

// TODO: Throughout this repo, clean up the use of `any`.

export type AccountRowProps = {
  accountId: any;
  accountStatus: AccountStatus | null;
  addAccountCsv: any;
  deleteFromLocalStorage: any;
  getTransactions: any;
  runTaskForThisAccount: any;
  selectedAccountId: any;
  selectedAccountIdsForCsv: any;
};

export type AccountsTableProps = {
  accountIds: any;
  accountStatuses: AccountStatus[];
  addNewAccount: (event: React.FormEvent<HTMLFormElement>) => void;
  csvTransactions: any;
  endDate: any;
  exampleAccount: any;
  getTransactions: any;
  handleNewAccountIdInputChange: (event: React.FormEvent<HTMLInputElement>) => void;
  messageCsv: any;
  newAccountId: any;
  runTaskForThisAccount: any;
  selectedAccountId: any;
  selectedAccountIdsForCsv: any;
  setAccountIds: any;
  setSelectedAccountIdsForCsv: any;
  startDate: any;
};

export type CsvTransaction = any;

export type RowOfExpectedOutput = any;

export type Arguments = { [key: string | symbol]: any };

'''
'''--- shared/types/jsonToCsv.ts ---
declare module 'csvjson-json2csv'; // https://stackoverflow.com/a/50516783/ Running `yarn t` won't work without this file.

'''
'''--- tsconfig.eslint.json ---
{
  "extends": "./tsconfig.json"
}

'''
'''--- tsconfig.json ---
{
  "compilerOptions": {
    "target": "ES2022",
    "module": "ES2022",
    "strictNullChecks": true,
    "lib": ["ES2021.String"],
    /* Specify JSX code generation */
    "jsx": "react",
    /* Generate corresponding .map files */
    "sourceMap": true,
    /* Enable all strict type-checking options */
    "strict": true,
    /* Specify module resolution strategy */
    "moduleResolution": "node",
    /* Base directory to resolve non-absolute module names */
    //"baseUrl": "./src"
    /* allow import React instead of import * as React */
    "allowSyntheticDefaultImports": true,
    /*  Emit interop between CommonJS and ES modules */
    "esModuleInterop": true,
    "types": ["node", "jest"]
  },
  "references": [
    {
      "path": "backend"
    }
  ]
}

'''