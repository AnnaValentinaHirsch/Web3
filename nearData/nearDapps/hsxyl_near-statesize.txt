*GitHub Repository "hsxyl/near-statesize"*

'''--- .idea/modules.xml ---
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ProjectModuleManager">
    <modules>
      <module fileurl="file://$PROJECT_DIR$/.idea/near-statesize.iml" filepath="$PROJECT_DIR$/.idea/near-statesize.iml" />
    </modules>
  </component>
</project>
'''
'''--- .idea/vcs.xml ---
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="VcsDirectoryMappings">
    <mapping directory="" vcs="Git" />
  </component>
</project>
'''
'''--- Cargo.toml ---
[workspace]
members = [
	"example",
	"near_statesize",
	"near_statesize_derive"
]
'''
'''--- example/Cargo.toml ---
[package]
name = "example"
version = "0.1.0"
edition = "2021"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
near_statesize = {path="../near_statesize"}
near-sdk = "3.1.0"
'''
'''--- example/src/main.rs ---
use std::env::Args;
use std::sync::Arc;
use near_sdk::collections::UnorderedSet;
use near_statesize::NearStateSize;
use near_sdk::{BorshStorageKey};
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};

#[derive(BorshStorageKey, BorshSerialize)]
pub(crate) enum StorageKey {
    Test
}

#[derive(NearStateSize)]
struct Test {
    a: String,
    b: u64,
    c: UnorderedSet<String>
}

fn main() {
    let x = Test {
        a: "".to_string(),
        b: 0,
        c: UnorderedSet::new(StorageKey::Test)
    };
    println!("{}",x.state_size());
}

'''
'''--- near_statesize/Cargo.toml ---
[package]
name = "near_statesize"
version = "0.1.0"
edition = "2021"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
near_statesize_derive = {path = "../near_statesize_derive"}
near-sdk = "3.1.0"
'''
'''--- near_statesize/src/lib.rs ---
mod macro_rules;

use std::collections::HashMap;
use near_sdk::borsh::{BorshDeserialize, BorshSerialize};
use near_sdk::collections::{TreeMap, UnorderedMap, UnorderedSet, Vector};
pub use near_statesize_derive::*;

pub trait NearStateSize {
    fn state_size(&self) -> usize;
}

impl_near_statesize!(u8,1);
impl_near_statesize!(u32,4);
impl_near_statesize!(u64,8);
impl_near_statesize!(u128,16);
impl_near_statesize!(i8,1);
impl_near_statesize!(i32,4);
impl_near_statesize!(i64,8);
impl_near_statesize!(i128,16);

impl NearStateSize for String {
    fn state_size(&self) -> usize {
        self.len()
    }
}

impl_near_statesize_iter!(Vec,4);
impl_near_statesize_iter!(UnorderedSet,4);
impl_near_statesize_iter_key_value!(HashMap,4);
impl_near_statesize_iter_key_value!(UnorderedMap,4);

impl <T> NearStateSize for Vector<T> {
    fn state_size(&self) -> usize {
        self.iter_raw().map(|e|e.len()).sum()
    }
}

impl<K, V> NearStateSize for TreeMap<K, V>
    where
        K: NearStateSize+Ord + Clone + BorshSerialize + BorshDeserialize,
        V: NearStateSize+BorshSerialize + BorshDeserialize,
{
    fn state_size(&self) -> usize {
        self.iter().map(|(k,v)|k.state_size()+v.state_size()).sum()
    }
}
'''
'''--- near_statesize/src/macro_rules.rs ---
#[macro_export]
macro_rules! impl_near_statesize {
    ($ty: tt, $size: literal) => {
        impl NearStateSize for $ty {
            fn state_size(&self) -> usize {
               $size
            }
        }
    }
}

#[macro_export]
macro_rules! impl_near_statesize_iter{
    ($ty: tt, $size: literal) => {
        impl <T>NearStateSize for $ty<T> where T: NearStateSize+BorshSerialize+BorshDeserialize  {
            fn state_size(&self) -> usize {
                self.iter().map(|e|e.state_size()).sum::<usize>() + $size
            }
        }
    }
}

#[macro_export]
macro_rules! impl_near_statesize_iter_key_value {
    ($ty: tt, $size: literal) => {
        impl <K,V>NearStateSize for $ty<K,V>
            where
                K: NearStateSize+BorshSerialize+BorshDeserialize,
                V: NearStateSize+BorshSerialize+BorshDeserialize {
            fn state_size(&self) -> usize {
                self.iter().map(|(k,v)|k.state_size()+v.state_size()).sum::<usize>() + $size
            }
        }
    }
}

'''
'''--- near_statesize_derive/Cargo.toml ---
[package]
name = "near_statesize_derive"
version = "0.1.0"
edition = "2021"

[lib]
proc-macro = true

[dependencies]
proc-macro2 = "1.0"
quote = "1.0"
syn = "1.0.57"
'''
'''--- near_statesize_derive/src/lib.rs ---
use proc_macro2::TokenStream;
use quote::{quote, quote_spanned};
use syn::spanned::Spanned;
use syn::{parse_macro_input, parse_quote, Data, DeriveInput, Fields, GenericParam, Generics, Index};

#[proc_macro_derive(NearStateSize)]
pub fn derive_near_statesize(input: proc_macro::TokenStream)->proc_macro::TokenStream {
    // Parse the input tokens into a syntax tree.
    let input = parse_macro_input!(input as DeriveInput);

    // Used in the quasi-quotation below as `#name`.
    let name = input.ident;

    // Add a bound `T: NearStateSize` to every type parameter T.
    let generics = add_trait_bounds(input.generics);
    let (impl_generics, ty_generics, where_clause) = generics.split_for_impl();

    // Generate an expression to sum up the state size of each field.
    let sum = state_size_sum(&input.data);

    let expanded = quote! {
        // The generated impl.
        impl #impl_generics near_statesize::NearStateSize for #name #ty_generics #where_clause {
            fn state_size(&self) -> usize {
                #sum
            }
        }
    };

    // Hand the output tokens back to the compiler.
    proc_macro::TokenStream::from(expanded)
}

// Add a bound `T: NearStateSize` to every type parameter T.
fn add_trait_bounds(mut generics: Generics) -> Generics {
    for param in &mut generics.params {
        if let GenericParam::Type(ref mut type_param) = *param {
            type_param.bounds.push(parse_quote!(near_statesize::NearStateSize));
        }
    }
    generics
}

// Generate an expression to sum up the state size of each field.
fn state_size_sum(data: &Data) -> TokenStream {
    match *data {
        Data::Struct(ref data) => {
            match data.fields {
                Fields::Named(ref fields) => {
                    let recurse = fields.named.iter().map(|f| {
                        let name = &f.ident;
                        quote_spanned! {f.span()=>
                            near_statesize::NearStateSize::state_size(&self.#name)
                        }
                    });
                    quote! {
                        0 #(+ #recurse)*
                    }
                }
                Fields::Unnamed(ref fields) => {
                    // Expands to an expression like
                    //
                    //     0 + self.0.state_size() + self.1.state_size() + self.2.state_size()
                    let recurse = fields.unnamed.iter().enumerate().map(|(i, f)| {
                        let index = Index::from(i);
                        quote_spanned! {f.span()=>
                            near_statesize::NearStateSize::state_size(&self.#index)
                        }
                    });
                    quote! {
                        0 #(+ #recurse)*
                    }
                }
                Fields::Unit => {
                    quote!(0)
                }
            }
        }
        Data::Enum(_) | Data::Union(_) => unimplemented!(),
    }
}
'''