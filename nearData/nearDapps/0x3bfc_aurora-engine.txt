*GitHub Repository "0x3bfc/aurora-engine"*

'''--- etc/eth-contracts/hardhat.config.js ---
require('@nomiclabs/hardhat-waffle');
require('solidity-coverage');
require('./tasks/storage');

/**
 * @type import('hardhat/config').HardhatUserConfig
 */
module.exports = {
    newStorageLayoutPath: './storageLayout',
    solidity: {
        version: '0.8.15',
        settings: {
            optimizer: {
                enabled: true,
                runs: 1000,
            },
            outputSelection: {
                '*': {
                    '*': ['storageLayout'],
                },
            },
        },
    },
};

'''
'''--- etc/eth-contracts/main.js ---
const fs = require('fs');
const path = require('path');
const artifact = require(process.argv[2]);
if (!fs.existsSync('res')) {
    fs.mkdirSync('res');
}
const contractName = artifact.contractName;
fs.writeFileSync(path.join('res', contractName + '.hex'), artifact.bytecode);
fs.writeFileSync(path.join('res', contractName + '.bin'), Buffer.from(artifact.bytecode.substring(2), 'hex'));

'''
'''--- etc/eth-contracts/tasks/storage.js ---
require('hardhat-storage-layout');
// eslint-disable-next-line no-undef
task('storageLayout', 'automatically generates the contract storage layout')
    .setAction(async () => {
        // eslint-disable-next-line no-undef
        await hre.storageLayout.export();
    });

module.exports = {};

'''
'''--- etc/eth-contracts/test/EvmErc20.js ---
const { ethers } = require('hardhat');
const { expect } = require('chai');

describe('EthCustodian contract', () => {
    let user1;
    let deployerAccount;
    let adminAccount;

    let evmErc20Factory;
    let evmErc20Contract;

    const metadataName = 'EMPTY_TOKEN';
    const metadataSymbol = 'EMPTY_SYMBOL';
    const metadataDecimals = 0;

    beforeEach(async () => {
        [deployerAccount, user1] = await ethers.getSigners();

        // Make the deployer admin
        adminAccount = deployerAccount;

        evmErc20Factory = await ethers.getContractFactory('EvmErc20');
        evmErc20Contract = await evmErc20Factory
            .connect(adminAccount)
            .deploy(
                metadataName,
                metadataSymbol,
                metadataDecimals,
                adminAccount.address,
            );
    });

    describe('AdminControlled', () => {
        it('Only admin is allowed to update the metadata', async () => {
            const newMetadataName = 'NEW_CUSTOM_TOKEN';
            const newMetadataSymbol = 'NEW_CSTM';
            const newMetadataDecimals = 18;

            await expect(
                evmErc20Contract
                    .connect(user1)
                    .setMetadata(
                        newMetadataName,
                        newMetadataSymbol,
                        newMetadataDecimals,
                    ),
            )
                .to
                .be
                .reverted;

            expect(await evmErc20Contract.name()).to.equal(metadataName);
            expect(await evmErc20Contract.symbol()).to.equal(metadataSymbol);
            expect(await evmErc20Contract.decimals()).to.equal(metadataDecimals);

            await evmErc20Contract
                .connect(adminAccount)
                .setMetadata(
                    newMetadataName,
                    newMetadataSymbol,
                    newMetadataDecimals,
                );

            expect(await evmErc20Contract.name()).to.equal(newMetadataName);
            expect(await evmErc20Contract.symbol()).to.equal(newMetadataSymbol);
            expect(await evmErc20Contract.decimals()).to.equal(newMetadataDecimals);
        });
    });

    describe('Metadata', () => {
        it('Should match the deployed metadata', async () => {
            expect(await evmErc20Contract.name()).to.equal(metadataName);
            expect(await evmErc20Contract.symbol()).to.equal(metadataSymbol);
            expect(await evmErc20Contract.decimals()).to.equal(metadataDecimals);
        });

        it('Should update the metadata', async () => {
            const newMetadataName = 'NEW_CUSTOM_TOKEN';
            const newMetadataSymbol = 'NEW_CSTM';
            const newMetadataDecimals = 18;

            await evmErc20Contract
                .connect(adminAccount)
                .setMetadata(
                    newMetadataName,
                    newMetadataSymbol,
                    newMetadataDecimals,
                );

            expect(await evmErc20Contract.name()).to.equal(newMetadataName);
            expect(await evmErc20Contract.symbol()).to.equal(newMetadataSymbol);
            expect(await evmErc20Contract.decimals()).to.equal(newMetadataDecimals);
        });
    });
});

'''