*GitHub Repository "adrianosingolani/near-ua-roketo"*

'''--- config-overrides.js ---
const webpack = require("webpack")

module.exports = function override(config, env) {
  //do stuff with the webpack config...
  config.resolve.fallback = {
    ...config.resolve.fallback,
    stream: require.resolve("stream-browserify"),
    buffer: require.resolve("buffer"),
  }
  config.resolve.extensions = [...config.resolve.extensions, ".ts", ".js"]
  config.plugins = [
    ...config.plugins,
    new webpack.ProvidePlugin({
      process: "process/browser",
      Buffer: ["buffer", "Buffer"],
    }),
  ]
  // console.log(config.resolve)
  // console.log(config.plugins)

  return config
}
'''
'''--- public/index.html ---
<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="utf-8" />
  <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <meta name="theme-color" content="#000000" />
  <meta name="description" content="Web site created using create-react-app" />
  <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
  <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
  <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
  <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" />
  <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons" />
  <title>Live for Ukraine</title>
</head>

<body>
  <noscript>You need to enable JavaScript to run this app.</noscript>
  <div id="root"></div>
  <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
</body>

</html>
'''
'''--- public/robots.txt ---
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

'''
'''--- src/App.js ---
import React from "react";

import Header from './components/Header';
import Room from "./components/Room";

import { Box } from "@mui/material";

function App({ walletConnection, accountId, nearEnv, roketoContract, wrapContract, dappContract }) {
  return (
    <Box className="App" sx={{ height: '100%' }}>
      <Header
        walletConnection={walletConnection}
        accountId={accountId}
        wrapContract={wrapContract}
      />
      <Box style={{ paddingTop: '4em', height: '100%' }}>
        <Room 
          walletConnection={walletConnection}
          dappContract={dappContract}
          roketoContract={roketoContract}
          accountId={accountId}
          wrapContract={wrapContract}
        />
      </Box>
    </Box>
  );
}

export default App;
'''
'''--- src/components/ActionBar.js ---
import React, { useEffect, useState } from 'react';
import { parseNearAmount } from 'near-api-js/lib/utils/format';
import Big from 'big.js';

import { styled } from '@mui/material/styles';
import {
  Box,
  Button,
  Modal,
  Typography
} from '@mui/material';

const ActionButton = styled(Button)(({ theme }) => ({
  marginLeft: theme.spacing(0),
  '&:last-child': {
    marginRight: 0
  }
}));

const modalStyle = {
  position: 'absolute',
  top: '50%',
  left: '50%',
  transform: 'translate(-50%, -50%)',
  width: 400,
  bgcolor: 'background.paper',
  border: '2px solid #000',
  boxShadow: 24,
  p: 4,
};

function ActionBar() {
  const [disableButtons, setDisableButtons] = useState(true);
  const [outgoingStreams, setOutgoingStreams] = useState([]);

  const [open, setOpen] = React.useState(false);
  const handleOpen = () => setOpen(true);
  const handleClose = () => setOpen(false);

  useEffect(() => {
    if (window.accountId) setDisableButtons(false);
    else setDisableButtons(true);

    getAccountOutgoingStreams();
  }, []);

  useEffect(() => {
    console.log(outgoingStreams);
  }, [outgoingStreams])

  const createStream = (settings) => {
    const pricePerHour = parseNearAmount(settings.price.toString());
    const pricePerMinute = Big(pricePerHour).div(60).toFixed(0);
    const pricePerSecond = Big(pricePerHour).div(3600).toFixed(0);

    const amountToPay = Big(pricePerMinute).times(settings.minutes).toFixed(0);

    const args = {
      receiver_id: nearEnv.roketoContract,
      amount: amountToPay,
      memo: 'memo',
      msg: JSON.stringify({
        Create: {
          request: {
            owner_id: window.accountId,
            receiver_id: nearEnv.dappContract,
            tokens_per_sec: parseInt(pricePerSecond),
            description: ''
          },
        },
      })
    }

    window.wrapContract.ft_transfer_call(
      args,
      300000000000000,
      1
    )
      .then(res => {
        console.log(res);
      })
      .catch(err => {
        console.log(err);
      })
  }

  const nearDeposit = () => {
    // console.log('nearDeposit');

    window.wrapContract.near_deposit(
      {},
      300000000000000,
      parseNearAmount('1')
    )
  }

  const getAccountIncomingStreams = () => {
    window.roketoContract.get_account_incoming_streams({
      account_id: nearEnv.dappContract,
      from: 0,
      limit: 10,
    })
      .then(res => {
        console.log(res);
      })
      .catch(err => {
        console.log(err);
      })
  }

  const getAccountOutgoingStreams = () => {
    window.roketoContract.get_account_outgoing_streams({
      account_id: window.accountId,
      from: 0,
      limit: 10,
    })
      .then(res => {
        // console.log(res);

        const streams = res.filter(stream => {
          return stream.receiver_id === nearEnv.dappContract
        }).map(stream => {
          return stream;
        })

        setOutgoingStreams(streams);
      })
      .catch(err => {
        console.log(err);
      })
  }

  return (
    <>
      <Box sx={{backgroundColor: '#F55'}}>
        <ActionButton
          disabled={disableButtons}
          variant='contained'
          onClick={() => createStream({
            price: 3,
            minutes: 1
          })}
        >
          Create stream
        </ActionButton>

        <ActionButton disabled={disableButtons} variant='contained' onClick={() => nearDeposit()}>{`Wrap (1 NEAR -> 1 wNEAR)`}</ActionButton>
        <ActionButton disabled={disableButtons} variant='contained' onClick={() => getAccountIncomingStreams()}>Get incoming streams (dApp)</ActionButton>
        <ActionButton disabled={disableButtons} variant='contained' onClick={() => getAccountOutgoingStreams()}>Get outgoing streams (User)</ActionButton>
        <ActionButton disabled={disableButtons} variant='contained' onClick={handleOpen}>Create/Join room</ActionButton>
      </Box>

      <Modal
        open={open}
        onClose={handleClose}
        aria-labelledby="modal-modal-title"
        aria-describedby="modal-modal-description"
      >
        <Box sx={modalStyle}>
          <Typography id="modal-modal-title" variant="h6" component="h2">
            Text in a modal
          </Typography>
          <Typography id="modal-modal-description" sx={{ mt: 2 }}>
            Duis mollis, est non commodo luctus, nisi erat porttitor ligula.
          </Typography>
        </Box>
      </Modal>
    </>
  )
}

export default ActionBar;
'''
'''--- src/components/Chat.js ---
import React, { useRef, useEffect, useState } from 'react';
import Big from 'big.js';

import {
  Box,
  List,
  ListItem,
  ListItemAvatar,
  ListItemText,
  Avatar,
  Typography,
  TextField
} from '@mui/material';

const BOATLOAD_OF_GAS = Big(3).times(10 ** 13).toFixed();

export default function Chat({ dappContract }) {
  const chatBottom = useRef(null);

  const [chatMessages, setChatMessages] = useState([]);

  const sendMessage = (message) => {

    dappContract.sendMessage(
      { message: message },
      BOATLOAD_OF_GAS,
      '0'
    )
      .then(() => {
        getMessages();
      })
      .catch(err => {
        console.log(err);
      })
  }

  const getMessages = () => {
    dappContract.getMessages()
      .then(messages => {
        setChatMessages([...messages]);

        chatBottom.current.scrollIntoView();
      })
      .catch(err => {
        console.log(err);
      })
  }

  useEffect(() => {
    getMessages();
  }, [])

  useEffect(() => {
    chatBottom.current.scrollIntoView();
  }, [chatMessages])

  return (
    <Box sx={
      {
        width: '100%',
        height: '100%',
        bgcolor: 'background.paper',
        borderRadius: '4px',
        padding: 1,
        display: 'flex',
        flexDirection: 'column'
      }
    }>
      <List sx={{ overflow: 'scroll', padding: 0 }}>
        {
          chatMessages.map((message, index) => {
            return (
              <ListItem key={index} alignItems='flex-start' sx={{ padding: '0 8px 16px' }}>
                <ListItemAvatar>
                  <Avatar alt={message.user} />
                </ListItemAvatar>
                <ListItemText
                  primary={
                    <Typography variant='subtitle2'>
                      {message.user}
                    </Typography>
                  }
                  secondary={
                    <Typography variant='body2'>
                      {message.message}
                    </Typography>
                  }
                />
              </ListItem>
            )
          })
        }
        <ListItem ref={chatBottom} />
      </List>
      <TextField
        variant='outlined'
        placeholder='Type your message'
        autoFocus
        onKeyPress={(e) => {
          if (e.key === "Enter") {
            sendMessage(e.target.value);
            e.target.value = '';
          }
        }}
        sx={{ marginTop: 'auto' }}
      />
    </Box>
  )
}
'''
'''--- src/components/ChatTabs.js ---
import React, { useState } from 'react';
import PropTypes from 'prop-types';

import PeopleIcon from '@mui/icons-material/People';
import ChatIcon from '@mui/icons-material/Chat';
import {
  Box,
  Tabs,
  Tab,
} from '@mui/material';

import Chat from './Chat';
import Users from './Users';

function TabPanel(props) {
  const { children, value, index, ...other } = props;

  return (
    <Box
      role='tabpanel'
      hidden={value !== index}
      id={`simple-tabpanel-${index}`}
      aria-labelledby={`simple-tab-${index}`}
      {...other}
    >
      {value === index && (
        <Box sx={{ paddingTop: 2, height: '100%' }}>{children}</Box>
      )}
    </Box>
  );
}

TabPanel.propTypes = {
  children: PropTypes.node,
  index: PropTypes.number.isRequired,
  value: PropTypes.number.isRequired,
};

function a11yProps(index) {
  return {
    id: `simple-tab-${index}`,
    'aria-controls': `simple-tabpanel-${index}`,
  };
}

export default function ChatTabs({ dappContract }) {
  const [value, setValue] = useState(1);

  const handleChange = (event, newValue) => {
    setValue(newValue);
  };

  return (
    <Box sx={{ width: '100%', height: '100%', display: 'flex', flexDirection: 'column' }}>
      <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>
        <Tabs value={value} onChange={handleChange} aria-label='Chat tab'>
          <Tab
            sx={{ minHeight: 'fit-content' }}
            icon={<PeopleIcon />} iconPosition='start'
            label='Users'
            {...a11yProps(0)}
            wrapped
            disableRipple
          />
          <Tab
            sx={{ minHeight: 'fit-content' }}
            icon={<ChatIcon />} iconPosition='start'
            label='Chat'
            {...a11yProps(1)}
            wrapped
            disableRipple
          />
        </Tabs>
      </Box>
      <Box sx={{ height: '100%', overflow: 'hidden' }}>
        <TabPanel value={value} index={0}>
          <Users />
        </TabPanel>
        <TabPanel value={value} index={1} sx={{ height: '100%' }}>
          <Chat 
            dappContract={dappContract}
          />
        </TabPanel>
      </Box>
    </Box>
  )
}
'''
'''--- src/components/Header.js ---
import React, { useEffect, useState } from 'react';
import { formatNearAmount } from 'near-api-js/lib/utils/format';

import { login, logout } from "../utils";

import {
  AppBar,
  Box,
  Toolbar,
  Typography,
  Button
} from '@mui/material/';

export default function Header({ walletConnection, accountId, wrapContract }) {
  const account = walletConnection.account();

  const [balance, setBalance] = useState(0)

  useEffect(() => {
    if (accountId && wrapContract) {
      wrapContract.ft_balance_of({
        account_id: `${accountId}`,
      })
        .then(balance => {
          setBalance(balance);
        })
        .catch(err => {
          console.log(err);
        });
    }
  }, [accountId, wrapContract]);

  return (
    <Box sx={{ flexGrow: 1 }}>
      <AppBar position="fixed">
        <Toolbar>
          <Typography variant="h6" component="div" sx={{ flexGrow: 1 }}>
            Live for Ukraine
          </Typography>
          {account.accountId ? (
            <>
              <Box style={{display: 'flex', flexDirection: 'column', textAlign: 'right'}}>
                <Typography variant="subtitle2">
                  {account.accountId}
                </Typography>
                <Typography variant="subtitle2">
                  {formatNearAmount(balance, 4)} wNEAR
                </Typography>
              </Box>
              <Button sx={{ marginLeft: 2 }} variant="outlined" color="inherit" onClick={() => logout()}>Logout</Button>
            </>
          ) : (
            <Button color="inherit" onClick={() => login()}>Login</Button>
          )}
        </Toolbar>
      </AppBar>
    </Box>
  );
}
'''
'''--- src/components/Room.js ---
import React from 'react';

import { styled } from '@mui/material/styles';
import {
  Box,
  Grid,
  Paper
} from '@mui/material';

import Video from './Video';
import ChatTabs from './ChatTabs';

const GridItem = styled(Paper)(({ theme }) => ({
  backgroundColor: theme.palette.mode === 'dark' ? '#1A2027' : '#fff',
  ...theme.typography.body2,
  padding: theme.spacing(1),
  textAlign: 'center',
  color: theme.palette.text.secondary,
  border: '1px solid #EEE'
}));

function Room({ wrapContract, dappContract, roketoContract, accountId }) {
  return (
    <Box sx={{ height: '100%' }}>
      <Grid container spacing={2} sx={{ height: '100%', padding: '16px 16px 0' }}>
        <Grid item xs={8}>
          <GridItem>
            <Video

            />
          </GridItem>
        </Grid>
        <Grid item xs={4} sx={{ height: '100%' }}>
          <GridItem sx={{ height: '100%' }}>
            <ChatTabs
              dappContract={dappContract}
              roketoContract={roketoContract}
              accountId={accountId}
              wrapContract={wrapContract}
            />
          </GridItem>
        </Grid>
      </Grid>
    </Box>
  )
}

export default Room;
'''
'''--- src/components/Users.js ---
import React from 'react';

import {
  List,
  ListItem,
  ListItemText,
} from '@mui/material';

const chatUsers = [
]

export default function Users() {
  return (
    <List sx={{ width: '100%', bgcolor: 'background.paper' }}>
      {
        chatUsers.map((user, index) => {
          return (
            <ListItem key={index} alignItems="flex-start">
              <ListItemText primary={user} />
            </ListItem>
          )
        })
      }
    </List>
  )
}

'''
'''--- src/components/Video.js ---
import React, { useRef, useEffect, useState } from 'react';
import ReactHlsPlayer from 'react-hls-player';
import { parseNearAmount } from 'near-api-js/lib/utils/format';
import Big from 'big.js';

import {
  Box,
  Grid,
  Modal,
  Typography,
  Button
} from '@mui/material';

const modalStyle = {
  position: 'absolute',
  top: '50%',
  left: '50%',
  transform: 'translate(-50%, -50%)',
  width: '50%',
  bgcolor: 'background.paper',
  border: '2px solid #000',
  boxShadow: 24,
  p: 10,
};

const streamingUrl = 'https://76c240504080.us-east-1.playback.live-video.net/api/video/v1/us-east-1.395008664088.channel.wvTsdEmLB8rk.m3u8';

export default function Video({ wrapContract, roketoContract, dappContract, accountId }) {
  const [videoReady, setVideoReady] = useState(false);
  const [paymentStream, setPaymentStream] = useState(null);

  //modal
  const [open, setOpen] = React.useState(true);
  // const handleOpen = () => setOpen(true);
  // const handleClose = (e, r) => {
  //   console.log(r);

  //   setOpen(false);
  // }

  const playerRef = useRef();

  const createStream = (settings) => {
    const pricePerHour = parseNearAmount(settings.price.toString());
    const pricePerMinute = Big(pricePerHour).div(60).toFixed(0);
    const pricePerSecond = Big(pricePerHour).div(3600).toFixed(0);

    const amountToPay = Big(pricePerMinute).times(settings.minutes).toFixed(0);

    const args = {
      receiver_id: roketoContract,
      amount: amountToPay,
      memo: 'memo',
      msg: JSON.stringify({
        Create: {
          request: {
            owner_id: accountId,
            receiver_id: dappContract,
            tokens_per_sec: parseInt(pricePerSecond),
            description: ''
          },
        },
      })
    }

    wrapContract.ft_transfer_call(
      args,
      300000000000000,
      1
    )
      .then(res => {
        console.log(res);
      })
      .catch(err => {
        console.log(err);
      })
  }

  //canplay
  function fireOnVideoCanPlay() {
    console.log('canplay');

    setVideoReady(true);
  }

  //stalled
  function fireOnVideoStalled() {
    console.log('stalled');

    setVideoReady(false);
    fireOnVideoEnded();
  }

  //play
  function fireOnVideoPlay() {
    console.log('play');
  }

  //pause
  function fireOnVideoPause() {
    console.log('pause');
  }

  //ended
  function fireOnVideoEnded() {
    console.log('ended');
  }

  useEffect(() => {
    const player = playerRef;

    player.current.addEventListener('canplay', fireOnVideoCanPlay);
    player.current.addEventListener('stalled', fireOnVideoStalled);

    player.current.addEventListener('play', fireOnVideoPlay);
    player.current.addEventListener('pause', fireOnVideoPause);
    player.current.addEventListener('ended', fireOnVideoEnded);

    return () => {
      player.current.removeEventListener('canplay', fireOnVideoCanPlay);
      player.current.removeEventListener('stalled', fireOnVideoStalled);

      player.current.removeEventListener('play', fireOnVideoPlay);
      player.current.removeEventListener('pause', fireOnVideoPause);
      player.current.removeEventListener('ended', fireOnVideoEnded);
    }
  }, []);

  return (
    <>
      <Box sx={{ flexGrow: 1 }}>
        <Grid container spacing={1}>
          <Grid item xs={12}>
            <Box sx={{
              display: 'flex',
              aspectRatio: '16 / 9'
            }}>
              <ReactHlsPlayer
                playerRef={playerRef}
                src={streamingUrl}
                controls
                muted
                width="100%"
              />
            </Box>
          </Grid>
        </Grid>
      </Box>
      <Modal
        open={open}
        // onClose={(e, r) => handleClose(e, r)}
        aria-labelledby="modal-modal-title"
        aria-describedby="modal-modal-description"
        disableEscapeKeyDown
      >
        <Box sx={modalStyle}>
          {
            videoReady ? (
              <Box sx={{ display: 'flex', flexDirection:'column' }}>
                <Typography id="modal-modal-title" variant="h6">
                  Streaming is live!
                </Typography>
                <Typography id="modal-modal-description" sx={{ mt: 2 }} paragraph>
                  If you want to watch and donate, click on the button bellow and you will be asked to approve the payment.
                </Typography>
                <Typography variant="subtitle2" paragraph>
                  * You will need wNEAR for it.
                </Typography>
                <Button 
                  variant='contained'
                  // onClick={() => createStream({
                  //   price: 3,
                  //   minutes: 1
                  // })}
                  onClick={() => {
                    setOpen(false);
                  }}
                >
                  Watch and donate
                </Button>
              </Box>
            ) : (
              <>
                <Typography id="modal-modal-title" variant="h6" component="h2">
                  Waiting for the streaming to be ready.
                </Typography>
              </>
            )
          }
        </Box>
      </Modal>
    </>
  )
}
'''
'''--- src/index.js ---
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

import { CssBaseline } from "@mui/material";
import { ThemeProvider, createTheme } from '@mui/material/styles';

import { initializeContract } from "./utils";

const darkTheme = createTheme({
  palette: {
    mode: 'light',
  },
  components: {
    // Name of the component
    MuiButton: {
      styleOverrides: {
        // Name of the slot
        root: {
          // Some CSS
          margin: '8px',
        },
      },
    },
  },
});

window.nearInitPromise = initializeContract()
  .then(({ walletConnection, accountId, nearEnv, roketoContract, wrapContract, dappContract }) => {
    const root = ReactDOM.createRoot(document.getElementById('root'));
    root.render(
      <React.StrictMode>
        <ThemeProvider theme={darkTheme}>
          <CssBaseline />
          <App 
            walletConnection={walletConnection}
            accountId={accountId}
            nearEnv={nearEnv}
            roketoContract={roketoContract}
            wrapContract={wrapContract}
            dappContract={dappContract}
          />
        </ThemeProvider>
      </React.StrictMode>
    );
  })
  .catch(console.error);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();
'''
'''--- src/nearEnv.js ---
const ROKETO_ACCOUNT = 'streaming-r-v2.dcversus.testnet';
const WRAP_ACCOUNT = 'wrap.testnet'
const DAPP_ACCOUNT = 'streaming-ua.testnet';

function getNearEnv(env) {
  switch (env) {
    case 'mainnet': 
      return {
        networkId: 'mainnet',
        nodeUrl: 'https://rpc.mainnet.near.org',
        roketoContract: ROKETO_ACCOUNT,
        wrapContract: WRAP_ACCOUNT,
        dappContract: DAPP_ACCOUNT,
        walletUrl: 'https://wallet.near.org',
        helperUrl: 'https://helper.mainnet.near.org',
        explorerUrl: 'https://explorer.mainnet.near.org',
      };
    case 'testnet': 
      return {
        networkId: 'testnet',
        nodeUrl: 'https://rpc.testnet.near.org',
        roketoContract: ROKETO_ACCOUNT,
        wrapContract: WRAP_ACCOUNT,
        dappContract: DAPP_ACCOUNT,
        walletUrl: 'https://wallet.testnet.near.org',
        helperUrl: 'https://helper.testnet.near.org',
        explorerUrl: 'https://explorer.testnet.near.org',
      };
    default:
      throw Error(`Unknown environment "${env}".`);
  }
}

export default getNearEnv;
'''
'''--- src/reportWebVitals.js ---
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

'''
'''--- src/utils.js ---
import { connect, Contract, keyStores, WalletConnection } from 'near-api-js';
// import { formatNearAmount } from 'near-api-js/lib/utils/format';
import getNearEnv from './nearEnv';

// get network configuration values
const nearEnv = getNearEnv('testnet');

let walletConnection;

export async function initializeContract() {
  // create a keyStore for signing transactions using the user's key
  // which is located in the browser local storage after user logs in
  const keyStore = new keyStores.BrowserLocalStorageKeyStore();

  // Initializing connection to the NEAR testnet
  const near = await connect({ keyStore, ...nearEnv });
  
  // Initialize wallet connection
  walletConnection = new WalletConnection(near);

  // Load in user's account data
  const accountId = walletConnection.getAccountId();

  const roketoContract = new Contract(
    walletConnection.account(),
    nearEnv.roketoContract,
    {
      viewMethods: ['get_stream', 'get_account', 'get_account_incoming_streams', 'get_account_outgoing_streams', 'get_stats'],
      changeMethods: ['start_stream', 'pause_stream', 'stop_stream', 'withdraw'],
    }
  );

  const wrapContract = new Contract(
    walletConnection.account(),
    nearEnv.wrapContract,
    {
      viewMethods: ['ft_balance_of'],
      changeMethods: ['near_deposit', 'ft_transfer_call', 'ft_transfer'],
    }
  );

  const dappContract = new Contract(
    walletConnection.account(),
    nearEnv.dappContract,
    {
      viewMethods: ['getMessages'],
      changeMethods: ['sendMessage'],
    }
  );

  return { walletConnection, accountId, nearEnv, roketoContract, wrapContract, dappContract };
}

// export async function accountBalance() {
//   return formatNearAmount(
//     (await walletConnection.account().getAccountBalance()).total,
//     2
//   );
// }

export async function getAccountId() {
  return walletConnection.getAccountId();
}

export function login() {
  walletConnection.requestSignIn(nearEnv.dappContract);
}

export function logout() {
  walletConnection.signOut();
  window.location.reload();
}
'''