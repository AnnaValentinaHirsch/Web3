*GitHub Repository "leonardokhorliey/near-expense-app"*

'''--- README.md ---
# Title

A simple budget/expense Management App built on the NEAR BlockChain Protocol
'''
'''--- package.json ---
{
  "name": "react-complete-guide",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@testing-library/jest-dom": "^5.11.6",
    "@testing-library/react": "^11.2.2",
    "@testing-library/user-event": "^12.5.0",
    "react": "^18.0.0",
    "react-dom": "^18.0.0",
    "react-scripts": "4.0.1",
    "web-vitals": "^0.2.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "dotenv": "^16.0.1",
    "near-api-js": "^0.45.1"
  }
}

'''
'''--- public/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

'''
'''--- public/manifest.json ---
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

'''
'''--- public/robots.txt ---
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

'''
'''--- src/App.js ---
import React, { useEffect, useState } from 'react';
import { Wallet, Contract } from './utils/nearconfig';

import Home from './components/home';
import NewExpense from './components/NewExpense/NewExpense';
import Expenses from './components/Expenses/Expenses';

const DUMMY_EXPENSES = [
  {
    id: 'e1',
    title: 'Toilet Paper',
    amount: 94.12,
    date: new Date(2020, 7, 14),
  },
  { id: 'e2', title: 'New TV', amount: 799.49, date: new Date(2021, 2, 12) },
  {
    id: 'e3',
    title: 'Car Insurance',
    amount: 294.67,
    date: new Date(2021, 2, 28),
  },
  {
    id: 'e4',
    title: 'New Desk (Wooden)',
    amount: 450,
    date: new Date(2021, 5, 12),
  },
];

const App = () => {
  const [expenses, setExpenses] = useState([]);
  const [loading, setLoading] = useState(false);
  const [loggedIn, setLoggedIn] = useState(false);
  const [accountId, setAccountId] = useState('');
  const [wallet, setWallet] = useState();

  const loadPage = <main>
    <h2>Loading...</h2>
  </main>

  const addExpenseHandler = async (title, description, amount, completeDate) => {
    let expense = {title, description, amount, completeDate, createdAt: new Date().toISOString()};
    console.log(expense);
    await Contract(wallet.account()).createNewExpense(expense);
    
    setExpenses((prevExpenses) => {
      return [expense, ...prevExpenses];
    });
  };

  const getExpenses = async (wallet) => {
    console.log(wallet.account())
    let expenses_ = await Contract(wallet.account()).getAllExpenses();
    console.log(expenses_);
    setExpenses(expenses_);
  }

  const handleSignIn = async () => {
    setLoading(true);
    setLoggedIn(true);

    setTimeout(() => {
      
      Wallet().then((tx) => {

        setLoading(false);
      
        setWallet(tx);
        setAccountId(tx.getAccountId());

        getExpenses(tx);
      }).catch((e) => {
        console.log(e.message)
      });
      
    }, 1000)  

  }

  const handleSignOut = async () => {
    console.log("out")
    wallet.signOut();
    setLoggedIn(false);
  }

  const handleUpdateExpense = async (expenseId, newAmount, newCompleteDate) => {
    if (!newAmount) {await Contract(wallet.account()).updateExpenseCompletionDate({expenseId, newCompleteDate}); return;}
    if (!newCompleteDate) {await Contract(wallet.account()).updateExpenseAmount({expenseId, newAmount}); return;}
    await Contract(wallet.account()).updateExpenseCompletionDate({expenseId, newCompleteDate});
    await Contract(wallet.account()).updateExpenseAmount({expenseId, newAmount});
    await getExpenses(wallet);
    alert("Expense updated Successfully");
  }

  const handleClearExpense = async (expenseId) => {
    await Contract(wallet.account()).clearExpense({expenseId});
    await getExpenses(wallet);
    alert("Expense cleared Successfully");
  }

  const handleRemoveExpense = async (expenseId) => {
    await Contract(wallet.account()).removeExpense({expenseId});
    await getExpenses(wallet);
    alert("Expense dropped Successfully");
  }

  const handleDeleteExpense = async (expenseId) => {
    await Contract(wallet.account()).deleteExpense({expenseId});
    await getExpenses(wallet);
    alert("Expense deleted Successfully");
  }

  useEffect(() => {
    setLoading(true);
    setLoggedIn(true);

    Wallet().then((tx) => {

      
    
      setWallet(tx);
      setAccountId(tx.getAccountId());

      getExpenses(tx).then(() => setLoading(false)).catch((e)=> console.log(e.message));
    }).catch((e) => {
      console.log(e.message)
    });
  }, [])

  

  return (<>
    {!loggedIn && <Home signIn= {handleSignIn}/>}
    {loggedIn && (loading ? loadPage : <>
    <header>
        <h1>Bud<span>Gitt</span></h1>
        <div>
          <div>
            <p>{accountId}</p>
          </div>

          <button onClick= {handleSignOut}>
            Sign Out
          </button>
        </div>
        
    </header>
    <div>
      <NewExpense onAddExpense={addExpenseHandler} />
      <Expenses items={expenses} updateExpense= {handleUpdateExpense} clearExpense={handleClearExpense} removeExpense={handleRemoveExpense} deleteExpense= {handleDeleteExpense} />
    </div></>)}</>
  );
};

export default App;

'''
'''--- src/components/Chart/Chart.css ---
.chart {
  padding: 1rem;
  border-radius: 12px;
  background-color: #f8dfff;
  text-align: center;
  display: flex;
  justify-content: space-around;
  height: 10rem;
}

'''
'''--- src/components/Chart/Chart.js ---
import React from 'react';

import ChartBar from './ChartBar';
import './Chart.css';

const Chart = (props) => {
  const dataPointValues = props.dataPoints.map(dataPoint => dataPoint.value);
  const totalMaximum = Math.max(...dataPointValues);

  return (
    <div className='chart'>
      {props.dataPoints.map((dataPoint) => (
        <ChartBar
          key={dataPoint.label}
          value={dataPoint.value}
          maxValue={totalMaximum}
          label={dataPoint.label}
        />
      ))}
    </div>
  );
};

export default Chart;

'''
'''--- src/components/Chart/ChartBar.css ---
.chart-bar {
  height: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
}

.chart-bar__inner {
  height: 100%;
  width: 100%;
  border: 1px solid #313131;
  border-radius: 12px;
  background-color: #c3b4f3;
  overflow: hidden;
  display: flex;
  flex-direction: column;
  justify-content: flex-end;
}

.chart-bar__fill {
  background-color: #4826b9;
  width: 100%;
  transition: all 0.3s ease-out;
}

.chart-bar__label {
  font-weight: bold;
  font-size: 0.5rem;
  text-align: center;
}
'''
'''--- src/components/Chart/ChartBar.js ---
import React from 'react';

import './ChartBar.css';

const ChartBar = (props) => {
  let barFillHeight = '0%';

  if (props.maxValue > 0) {
    barFillHeight = Math.round((props.value / props.maxValue) * 100) + '%';
  }

  return (
    <div className='chart-bar'>
      <div className='chart-bar__inner'>
        <div
          className='chart-bar__fill'
          style={{ height: barFillHeight }}
        ></div>
      </div>
      <div className='chart-bar__label'>{props.label}</div>
    </div>
  );
};

export default ChartBar;

'''
'''--- src/components/Expenses/ExpenseDate.css ---
.expense-date {
  display: flex;
  flex-direction: column;
  width: 5.5rem;
  height: 5.5rem;
  border: 1px solid #ececec;
  background-color: #2a2a2a;
  color: white;
  border-radius: 12px;
  align-items: center;
  justify-content: center;
}

.expense-date__month {
  font-size: 0.75rem;
  font-weight: bold;
}

.expense-date__year {
  font-size: 0.75rem;
}

.expense-date__day {
  font-size: 1.5rem;
  font-weight: bold;
}

'''
'''--- src/components/Expenses/ExpenseDate.js ---
import React from 'react';

import './ExpenseDate.css';

const ExpenseDate = (props) => {
  const actualDate = new Date(props.date);
  const month = actualDate.toLocaleString('en-US', { month: 'long' });
  const day = actualDate.toLocaleString('en-US', { day: '2-digit' });
  const year = actualDate.getFullYear();

  return (
    <div className='expense-date'>
      <div className='expense-date__month'>{month}</div>
      <div className='expense-date__year'>{year}</div>
      <div className='expense-date__day'>{day}</div>
    </div>
  );
};

export default ExpenseDate;

'''
'''--- src/components/Expenses/ExpenseItem.css ---
.expense-item {
  display: flex;
  justify-content: space-between;
  flex-direction: column;
  align-items: center;
  padding: 0.5rem;
  margin: 1rem 0;
  background-color: #4b4b4b;
}

.expense-item__description {
  display: flex;
  border:2px solid red;
  flex-direction: row;
  align-items: flex-end;
  flex-flow: column-reverse;
  justify-content: space-evenly;
  flex: 1;
  width: 100%;
}

.expense-item h2 {
  color: #3a3a3a;
  font-size: 1rem;
  flex: 1;
  margin: 0 1rem;
  color: white;
}

.expense-item__price {
  font-size: 1rem;
  font-weight: bold;
  color: white;
  background-color: #40005d;
  border: 1px solid white;
  padding: 0.5rem;
  border-radius: 12px;
}

.new-expense__controls {
  display: flex;
  flex-wrap: wrap;
  gap: 1rem;
  margin-bottom: 1rem;
  text-align: left;
}

.new-expense__control label {
  font-weight: bold;
  margin-bottom: 0.5rem;
  display: block;
}

.new-expense__control input {
  font: inherit;
  padding: 0.5rem;
  border-radius: 6px;
  border: 1px solid #ccc;
  width: 20rem;
  max-width: 100%;
}

.new-expense__actions {
  text-align: right;
}

@media (min-width: 580px) {
  .expense-item__description {
    flex-direction: row;
    align-items: center;
    justify-content: flex-start;
    flex: 1;
  }

  .expense-item__description h2 {
    font-size: 1.25rem;
  }

  .expense-item__price {
    font-size: 1.25rem;
    padding: 0.5rem 1.5rem;
  }
}

.update-button {
    font: inherit;
    cursor: pointer;
    padding: 10px 20px;
    border: 0px;
    background-color: #a892ee;
    color: white;
    border-radius: 12px;
    margin-right: 1rem;
}
'''
'''--- src/components/Expenses/ExpenseItem.js ---
import React, { useState } from 'react';

import ExpenseDate from './ExpenseDate';
import Card from '../UI/Card';
import './ExpenseItem.css';

const ExpenseItem = (props) => {
  const [updateView, setUpdateView] = useState(false)
  const [minDate, setMinDate] = useState()
  const [newCompleteDate, setNewCompleteDate] = useState('');
  const [newAmount, setNewAmount] = useState('');

  const handleStartUpdate = () => {
    let date = new Date();
    let month = (date.getMonth() < 9 ? "0" : "") + (date.getMonth() + 1)
    let day = (date.getDate() < 10 ? "0" : "") + date.getDate()
    setMinDate(date.getFullYear() + "-" + month + "-" + day)

    setUpdateView(true)
  }

  const handleSubmitChanges = (e) => {
    e.preventDefault();
    if (!newAmount && !newCompleteDate) {alert('Enter values for new date or amount'); return;}
    props.updateExpense(newAmount, newCompleteDate);
    setNewAmount('')
    setNewCompleteDate('')
    setUpdateView(false)
  }

  
  return (
    <li>
      <Card className='expense-item'>
        
        
        <div className='expense-item__description'>
        <ExpenseDate date={props.date} />
          <h2>{props.title}</h2>
          {props.selectedView === 0 && <button className="update-button" onClick= {handleStartUpdate}>Update</button>}
          <button className="update-button" onClick= {props.selectedView === 0 ? props.clearExpense : props.deleteExpense}>
            {props.selectedView === 0 ? "Clear": "Delete"}
          </button>
          <div className='expense-item__price'>${props.amount}</div>
        </div>

        {updateView && <div style={{margin: "30px 0px"}}>
          <div>
            <button className="update-button" onClick= {props.removeExpense}>Remove Expense</button>
          </div>

          <form onSubmit={handleSubmitChanges}>
            <div className='new-expense__controls'>
              <div className='new-expense__control'>
                <label>New Amount</label>
                <input
                  type='number'
                  min='0.01'
                  step='0.01'
                  value={newAmount}
                  onChange={(e) => setNewAmount(e.target.value)}
                />
              </div>
              <div className='new-expense__control'>
                <label>Date</label>
                <input
                  type='date'
                  min={minDate}
                  max='2024-12-31'
                  value={newCompleteDate}
                  onChange={(e) => setNewCompleteDate(e.target.value)}
                />
              </div>
            </div>
            <div className='new-expense__actions'>
              <button className="update-button" type="button" onClick={() => setUpdateView(false)}>Cancel</button>
              <button className="update-button" type='submit'>Update</button>
            </div>
          </form>
        </div>}
      </Card>
    </li>
  );
};

export default ExpenseItem;

'''
'''--- src/components/Expenses/Expenses.css ---
.expenses {
  padding: 1rem;
  background-color: rgb(31, 31, 31);
  margin: 2rem auto;
  width: 50rem;
  max-width: 95%;
}

.expenses-heading {
  color: white;
  padding: 0 1rem;
  display: flex;
  width: 100%;
  align-items: center;
  justify-content: space-between;
  margin: 1rem 0;
}

.expenses-heading select {
  font: inherit;
  padding: 0.5rem 3rem;
  box-sizing: border-box;
  font-weight: bold;
  border-radius: 6px;
}

'''
'''--- src/components/Expenses/Expenses.js ---
import React, { useState } from 'react';

import Card from '../UI/Card';
import ExpensesFilter from './ExpensesFilter';
import ExpensesList from './ExpensesList';
import ExpensesChart from './ExpensesChart';
import './Expenses.css';

const Expenses = (props) => {
  const [filteredYear, setFilteredYear] = useState('2020');
  const [selectedView, setSelectedView] = useState('Pending');
  const viewKeys = {
    "Pending": 0,
    "Cleared": 1,
    "Removed": 2
  };

  const filterChangeHandler = (selectedYear) => {
    setFilteredYear(selectedYear);
  };

  const changeSelectedView = (e) => {
    setSelectedView(e.target.value);
  };

  const filteredExpenses = props.items.filter((expense) => {
    console.log(new Date(expense.expectedCompleteDate))
    return new Date(expense.expectedCompleteDate).getFullYear().toString() === filteredYear && expense.status === viewKeys[selectedView];
  });

  return (
    <div>
      <Card className='expenses'>
        <ExpensesFilter
          selected={filteredYear}
          onChangeFilter={filterChangeHandler}
        />
        <ExpensesChart expenses={filteredExpenses} />
        <div className="expenses-heading">
          <h1>{`${selectedView} Expenses`}</h1>
          <select value={selectedView} onChange={changeSelectedView}>
            <option value='Pending'>Pending</option>
            <option value='Cleared'>Cleared</option>
            <option value='Dropped'>Dropped</option>
          </select>
        </div>
        
        <ExpensesList items={filteredExpenses} updateExpense={props.updateExpense} clearExpense={props.clearExpense} removeExpense={props.removeExpense} 
        selectedView= {viewKeys[selectedView]} deleteExpense={props.deleteExpense}/>
      </Card>
    </div>
  );
};

export default Expenses;

'''
'''--- src/components/Expenses/ExpensesChart.js ---
import React from 'react';

import Chart from '../Chart/Chart';

const ExpensesChart = (props) => {
  const chartDataPoints = [
    { label: 'Jan', value: 0 },
    { label: 'Feb', value: 0 },
    { label: 'Mar', value: 0 },
    { label: 'Apr', value: 0 },
    { label: 'May', value: 0 },
    { label: 'Jun', value: 0 },
    { label: 'Jul', value: 0 },
    { label: 'Aug', value: 0 },
    { label: 'Sep', value: 0 },
    { label: 'Oct', value: 0 },
    { label: 'Nov', value: 0 },
    { label: 'Dec', value: 0 },
  ];

  for (const expense of props.expenses) {
    const expenseMonth = new Date(expense.expectedCompleteDate).getMonth(); // starting at 0 => January => 0
    chartDataPoints[expenseMonth].value += +expense.amount;
  }

  return <Chart dataPoints={chartDataPoints} />;
};

export default ExpensesChart;

'''
'''--- src/components/Expenses/ExpensesFilter.css ---
.expenses-filter {
  color: white;
  padding: 0 1rem;
}

.expenses-filter__control {
  display: flex;
  width: 100%;
  align-items: center;
  justify-content: space-between;
  margin: 1rem 0;
}

.expenses-filter label {
  font-weight: bold;
  margin-bottom: 0.5rem;
}

.expenses-filter select {
  font: inherit;
  padding: 0.5rem 3rem;
  font-weight: bold;
  border-radius: 6px;
}
'''
'''--- src/components/Expenses/ExpensesFilter.js ---
import React from 'react';

import './ExpensesFilter.css';

const ExpensesFilter = (props) => {
  const dropdownChangeHandler = (event) => {
    props.onChangeFilter(event.target.value);
  };

  return (
    <div className='expenses-filter'>
      <div className='expenses-filter__control'>
        <label>Filter by year</label>
        <select value={props.selected} onChange={dropdownChangeHandler}>
          <option value='2022'>2022</option>
          <option value='2021'>2021</option>
          <option value='2020'>2020</option>
          <option value='2019'>2019</option>
        </select>
      </div>
    </div>
  );
};

export default ExpensesFilter;

'''
'''--- src/components/Expenses/ExpensesList.css ---
.expenses-list {
  list-style: none;
  padding: 0;
}

.expenses-list__fallback {
  color: white;
  text-align: center;
}
'''
'''--- src/components/Expenses/ExpensesList.js ---
import React from 'react';

import ExpenseItem from './ExpenseItem';
import './ExpensesList.css';

const ExpensesList = (props) => {
  if (props.items.length === 0) {
    return <h2 className='expenses-list__fallback'>Found no expenses.</h2>;
  }

  return (
    <ul className='expenses-list'>
      {props.items.map((expense) => (
        <ExpenseItem
          key={expense.id}
          title={expense.title}
          amount={expense.amount}
          date={expense.expectedCompleteDate}
          updateExpense= {(amt, date_)=> props.updateExpense(expense.id, amt, date_)}
          clearExpense= {()=> props.clearExpense(expense.id)}
          removeExpense= {()=> props.updateExpense(expense.id)}
          deleteExpense= {()=> props.deleteExpense(expense.id)}
          selectedView = {props.selectedView}
        />
      ))}
    </ul>
  );
};

export default ExpensesList;

'''
'''--- src/components/NewExpense/ExpenseForm.css ---
.new-expense__controls {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
    margin-bottom: 1rem;
    text-align: left;
  }
  
  .new-expense__control label {
    font-weight: bold;
    margin-bottom: 0.5rem;
    display: block;
  }
  
  .new-expense__control input {
    font: inherit;
    padding: 0.5rem;
    border-radius: 6px;
    border: 1px solid #ccc;
    width: 20rem;
    max-width: 100%;
  }
  
  .new-expense__actions {
    text-align: right;
  }
'''
'''--- src/components/NewExpense/ExpenseForm.js ---
import React, { useState } from 'react';

import './ExpenseForm.css';

const ExpenseForm = (props) => {
  const [enteredTitle, setEnteredTitle] = useState('');
  const [enteredAmount, setEnteredAmount] = useState('');
  const [enteredDate, setEnteredDate] = useState('');
  const [enteredDescription, setEnteredDescription] = useState('');

  const titleChangeHandler = (event) => {
    setEnteredTitle(event.target.value);
  };

  const amountChangeHandler = (event) => {
    setEnteredAmount(event.target.value);
  };

  const dateChangeHandler = (event) => {
    setEnteredDate(event.target.value);
  };

  const descriptionChangeHandler = (event) => {
    setEnteredDescription(event.target.value);
  };

  const submitHandler = (event) => {
    event.preventDefault();

    props.onSaveExpenseData(enteredTitle, enteredDescription, enteredAmount, enteredDate);
    setEnteredTitle('');
    setEnteredDescription('');
    setEnteredAmount('');
    setEnteredDate('');
  };

  return (
    <form onSubmit={submitHandler}>
      <div className='new-expense__controls'>
        <div className='new-expense__control'>
          <label>Title</label>
          <input
            type='text'
            value={enteredTitle}
            onChange={titleChangeHandler}
          />
        </div>
        <div className='new-expense__control'>
          <label>Description</label>
          <input
            type='text'
            value={enteredDescription}
            onChange={descriptionChangeHandler}
          />
        </div>
        <div className='new-expense__control'>
          <label>Amount</label>
          <input
            type='number'
            min='0.01'
            step='0.01'
            value={enteredAmount}
            onChange={amountChangeHandler}
          />
        </div>
        <div className='new-expense__control'>
          <label>Expected Completion Date</label>
          <input
            type='date'
            min='2019-01-01'
            max='2022-12-31'
            value={enteredDate}
            onChange={dateChangeHandler}
          />
        </div>
      </div>
      <div className='new-expense__actions'>
        <button type="button" onClick={props.onCancel}>Cancel</button>
        <button type='submit'>Add Expense</button>
      </div>
    </form>
  );
};

export default ExpenseForm;
'''
'''--- src/components/NewExpense/NewExpense.css ---
.new-expense {
    background-color: #a892ee;
    padding: 1rem;
    margin: 2rem auto;
    width: 50rem;
    max-width: 95%;
    border-radius: 12px;
    text-align: center;
    box-shadow: 0 1px 8px rgba(0, 0, 0, 0.25);
  }
  
  .new-expense button {
    font: inherit;
    cursor: pointer;
    padding: 1rem 2rem;
    border: 1px solid #40005d;
    background-color: #40005d;
    color: white;
    border-radius: 12px;
    margin-right: 1rem;
  }
  
  .new-expense button:hover,
  .new-expense button:active {
    background-color: #510674;
    border-color: #510674;
  }
  
  .new-expense button.alternative {
    color: #220131;
    border-color: transparent;
    background-color: transparent;
  }
  
  .new-expense button.alternative:hover,
  .new-expense button.alternative:active {
    background-color: #ddb3f8;
  }
'''
'''--- src/components/NewExpense/NewExpense.js ---
import React, { useState } from 'react';

import ExpenseForm from './ExpenseForm';
import './NewExpense.css';

const NewExpense = (props) => {
  const [isEditing, setIsEditing] = useState(false);

  const saveExpenseDataHandler = (title, description, amount, date_) => {
    // const expenseData = {
    //   ...enteredExpenseData,
    //   id: Math.random().toString(),
    // };
    props.onAddExpense(title, description, amount, date_);
    setIsEditing(false);
  };

  const startEditingHandler = () => {
    setIsEditing(true);
  };

  const stopEditingHandler = () => {
    setIsEditing(false);
  };

  return (
    <div className='new-expense'>
      {!isEditing && (
        <button onClick={startEditingHandler}>Add New Expense</button>
      )}
      {isEditing && (
        <ExpenseForm
          onSaveExpenseData={saveExpenseDataHandler}
          onCancel={stopEditingHandler}
        />
      )}
    </div>
  );
};

export default NewExpense;
'''
'''--- src/components/UI/Card.css ---
.card {
  border-radius: 12px;
  box-shadow: 0 1px 8px rgba(0, 0, 0, 0.25);
}

'''
'''--- src/components/UI/Card.js ---
import React from 'react';

import './Card.css';

const Card = (props) => {
  const classes = 'card ' + props.className;

  return <div className={classes}>{props.children}</div>;
};

export default Card;

'''
'''--- src/components/home.js ---

const Home = ({signIn}) => {

    

    return (
        <main id = "login">

            <div className= "intro">
                <h1>Welcome to <span>ChatAway</span></h1>
            </div>  
            <div className = "actions">
                <h3>Manage your expenses and plan ahead for the future</h3>

                <em>Ensure you have an account on the Near Protocol to use this app.</em>

                <button onClick= {signIn}>
                    Get Started
                </button>
            </div>

            

            
        </main>
    )
}

export default Home
'''
'''--- src/index.css ---
@import url('https://fonts.googleapis.com/css2?family=Noto+Sans+JP:wght@400;700&display=swap');

* {
  box-sizing: border-box;
}

html {
  font-family: 'Noto Sans JP', sans-serif;
}

body {
  margin: 0;
  background-color: #3f3f3f;
}

header {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 20px 50px;
  box-sizing: border-box;
  background-color: #40005d83;
  color: white;
  width: 100%;
}

header button {
    font: inherit;
    cursor: pointer;
    padding: 5px 20px;
    border: 0px;
    background-color: white;
    color: #40005d;
    border-radius: 12px;
    margin-right: 1rem;
}

#login {
  height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  background: linear-gradient(45deg, rgb(99, 8, 173), lavender);
}

.intro {
  color: white;
  text-align: center;
}

.intro h1 {
  font-size: 5rem;
}

.intro span {
  color: #282c34;
}

.actions {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: space-around;
  min-height: 5rem;
  width: 50%;
  margin: 10px auto;
  color: white;
  font-size: 1.5rem;
}

.actions button {
  background-color: rgb(99, 8, 173);
  box-shadow: 2px 2px 8px 2px #888888;
  width: 50%;
  height: 4rem;
  color: white;
  border-radius: 10px;
  border: 0;
  margin: 20px auto;
  cursor: pointer;
}
'''
'''--- src/index.js ---
import React from 'react';
import ReactDOM from 'react-dom/client';

import './index.css';
import App from './App';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />);

'''
'''--- src/utils/constants.js ---
export const getConfig = (env) => {
    return ['production', 'mainnet'].includes(env) ? 
        {
            networkId: 'mainnet',
            nodeUrl: 'https://rpc.mainnet.near.org',
            walletUrl: 'https://wallet.near.org',
            helperUrl: 'https://helper.mainnet.near.org',
            explorerUrl: 'https://explorer.mainnet.near.org',
        } : (
        ['testnet', 'development'].includes(env) ? {
            networkId: 'testnet',
            nodeUrl: 'https://rpc.testnet.near.org',
            walletUrl: 'https://wallet.testnet.near.org',
            helperUrl: 'https://helper.testnet.near.org',
            explorerUrl: 'https://explorer.testnet.near.org',
        } : null
    )
}
'''
'''--- src/utils/nearconfig.js ---
import * as NearAPI from 'near-api-js';
import { getConfig } from './constants';
require('dotenv');

const { WalletConnection, keyStores, connect} = NearAPI;

const keyStore = new keyStores.BrowserLocalStorageKeyStore();

const config = {...getConfig('testnet'), keyStore}

export const Wallet = async () => {
    const near = await connect(config);

    const wallet = new WalletConnection(near)

    if (wallet.isSignedIn()) return wallet;

    wallet.requestSignIn(
        'expo.leonard0.testnet', // contract requesting access
        "Budget App"
    )

    return wallet;
}

export const Contract = (account) => {
    const contract_ = new NearAPI.Contract(account,
        "expo.leonard0.testnet",
        {
            viewMethods: [],
            changeMethods: ["createNewExpense", "getAllExpenses", "updateExpenseCompletionDate", "updateExpenseAmount","removeExpense", "deleteExpense", "clearExpense"],
            sender: account
        });

    return contract_
}

'''