*GitHub Repository "muammer-yilmaz/near-book-store"*

'''--- README.md ---
# near-book-store

This project is a simple bookstore on Near blockchain. Users can publish their book and buy others books, and review a book by writing comments about it.

## Installation

>  Prerequisites: Make sure you've installed Node.js ≥ 12 and Yarn

```bash
git clone https://github.com/muammer-yilmaz/near-book-store
cd near-book-store
yarn
```

## How to Use Bookstore Smart Contract

First login to your account using near cli

```bash
near login
```

## Scripts

`near-book-store/scripts`

1. run `dev-deploy.sh` --> builds and deploys contract to blockchain
2. run any script to interact with contract 

## Commands

Build and deploy the smart contract.

```bash
yarn dev
```

Export the development account to the $CONTRACT

```bash
export CONTRACT=YOUR_DEV_ACCOUNT_HERE
```

Create a Book.

```bash
near call $CONTRACT createBook '{"name": "Book Name", "desc": "Book Description", "price" : 5}' --accountId muammer-yilmaz.testnet
```

List All Books

```bash
near call $CONTRACT getBooks '{"start": 0, "limit" : 10}' --accountId muammer-yilmaz.testnet
```

Buy a Book

```bash
near call $CONTRACT buyBook '{"id": Book id}' --accountId muammer-yilmaz.testnet --deposit 5
```

Read a Book

```bash
near call $CONTRACT getChapters '{"id": Book id}' --accountId muammer-yilmaz.testnet
```

Add a chapter to your book

```bash
near call $CONTRACT addChapter '{"id": Book id, "content": "Chapter Content"}' --accountId muammer-yilmaz.testnet
```

Add a comment to a book

```bash
near call $CONTRACT addComment '{"id": Book id, "comment": "Your Comment"}' --accountId muammer-yilmaz.testnet
```

Get all comment of a book

```bash
near call $CONTRACT getComments '{"id": Book id}' --accountId muammer-yilmaz.testnet
```

Project Structure
```
near-book-store
│   README.md
│   package.json
|   compile.js
|   ...
│
└───assembly 
│   │   index.ts
│   │   model.ts
|   |   utils.ts
│   │   ...
│   
│   
└───scripts  
    │ dev-deploy.sh
    │ create-book.sh
    │ add-chapter.sh
    │ add-comment.sh
    │ get-comments.sh
    │ list-books.sh
    │ read-book.sh

```
'''
'''--- asconfig.json ---
{
  "extends": "near-sdk-as/asconfig.json"
}
'''
'''--- assembly/as_types.d.ts ---
/// <reference types="near-sdk-as/assembly/as_types" />
'''
'''--- assembly/index.ts ---
// assembly/index.ts

import { Context } from "near-sdk-as";

import { toYocto } from "./utils"

import { Book, Comment, Chapter } from "./model";

// create a book on blockchain !!book's price must be set with near not Yocto
export function createBook(name: string, desc: string, price: u8): Book {
  return Book.createBook(Context.sender, name, desc, toYocto(price));
}

export function buyBook(id: u32,): void {
  Book.buyBook(id);
}
// get all the books on blockchain data
export function getBooks(start: u32, limit: u32): Book[] {
  return Book.findBooks(start, limit);
}
// get the book with its id
export function getBook(id: u32): Book {
  return Book.findBookById(id);
}
// get the owners of a book
export function getOwners(id: u32): Array<string> {
  return Book.getBookOwners(id);
}
// add a comment about the book
export function addComment(id: u32, comment: string): Comment {
  return Book.addComment(id, comment);
}
// get the all comments about a book
export function getComments(id: u32): Array<Comment> {
  return Book.getComments(id);
}
// set the book's img link !Only Owner
export function setImg(id: u32, link: string): string {
  return Book.setImg(id, link);
}
// add Chapter to a book !Only Owner
export function addChapter(id: u32, content: string): Chapter {
  return Book.addChapter(id, content);
}
// get all Chapters of a book !Only Book Owner
export function getChapters(id: u32): Array<Chapter> {
  let chapters = Book.getChapters(id);
  let array = new Array<Chapter>()
  for (let i = 0; i < chapters.length; i++) {
    array.push(chapters[i]);
  }
  return array;
}

'''
'''--- assembly/model.ts ---
// assembly/model.ts
import {
    PersistentUnorderedMap, math,
    Context,
    PersistentVector,
} from "near-sdk-as";

import { AccountId, Money, Timestamp } from "./utils";

//stores created books on blockchain data
export const books = new PersistentUnorderedMap<u32, Book>("books");
//stores each book with its owners
export const bookOwners = new PersistentUnorderedMap<u32, Array<AccountId>>("access");

@nearBindgen
export class Book {
    id: u32
    owner: AccountId = Context.sender
    name: string
    desc: string
    img: string
    price: Money
    chapterList: PersistentVector<Chapter> = new PersistentVector<Chapter>("chapters")
    comments: PersistentVector<Comment> = new PersistentVector<Comment>("comments")

    constructor(owner: AccountId, name: string, desc: string, price: Money) {
        this.id = math.hash32<string>(name);
        this.owner = owner;
        this.name = name;
        this.desc = desc;
        this.price = price
    }

    static createBook(owner: AccountId, name: string, desc: string, price: Money): Book {
        this.assert_book(name);
        const book = new Book(owner, name, desc, price);
        books.set(book.id, book);
        bookOwners.set(book.id, new Array<string>());
        return book;
    }

    static buyBook(id: u32): void {
        this.assert_amount(id)
        let list: Array<AccountId>
        if (bookOwners.contains(id)) {
            list = bookOwners.getSome(id);
            list.push(Context.sender);
            bookOwners.set(id, list);
        }
        else {
            let list = new Array<AccountId>();
            list.push(Context.sender);
            bookOwners.set(id, list);
        }
    }

    static addComment(id: u32, text: string): Comment {
        this.assert_access(id, Context.sender);
        let book = this.findBookById(id);
        let comment = new Comment(text);
        book.comments.push(comment)
        return comment;
    }

    static setImg(id: u32, link: string): string {
        let book = this.findBookById(id);
        this.assert_owner(book, Context.sender);
        book.img = link;
        books.set(book.id, book);
        return book.img
    }

    static getBookOwners(id: u32): Array<string> {
        let list = bookOwners.getSome(id);
        return list;
    }

    static getComments(id: u32): Array<Comment> {
        let book = this.findBookById(id);
        let comments = new Array<Comment>();
        for (let i = 0; i < book.comments.length; i++) {
            comments.push(book.comments[i]);
        }
        return comments;
    }

    static addChapter(id: u32, text: string): Chapter {
        const book = this.findBookById(id)
        this.assert_owner(book, Context.sender);
        const chapter = new Chapter(text);
        book.chapterList.push(chapter);

        return chapter;
    }

    static getChapters(id: u32): PersistentVector<Chapter> {
        this.assert_access(id, Context.sender);
        const book = this.findBookById(id);
        return book.chapterList;
    }

    static findBookById(id: u32): Book {
        return books.getSome(id);
    }

    static findBooks(offset: u32, limit: u32 = 10): Book[] {
        return books.values(offset, limit + offset);
    }

    // Caller needs to be The Owner 
    static assert_owner(book: Book, caller: AccountId): void {
        assert(book.owner == caller, 'Only owner can call this function !!');
    }
    // Caller needs to be owner of the book
    static assert_access(id: u32, caller: AccountId): void {
        //let list = bookOwners.getSome(id);
        assert(bookOwners.getSome(id).indexOf(caller) != -1, "Only book owner can call this function !!");
    }
    // Book price must be lower or equal than deposited money
    static assert_amount(id: u32): void {
        let book = this.findBookById(id);
        assert(book.price <= Context.attachedDeposit, "Not enough money attached !!")
    }

    static assert_book(name: string): void {
        assert(!books.contains(math.hash32<string>(name)), "This book name exists. Please select another !!")
    }
}

@nearBindgen
export class Chapter {
    content: string
    constructor(text: string) {
        this.content = text
    }
}

@nearBindgen
export class Comment {
    created_at: Timestamp = Context.blockTimestamp;
    author: AccountId = Context.predecessor;
    comment: string
    constructor(text: string) {
        this.comment = text
    }
}
'''
'''--- assembly/tsconfig.json ---
{
  "extends": "assemblyscript/std/assembly.json",
  "include": [
    "./**/*.ts"
  ]
}
'''
'''--- assembly/utils.ts ---
import { u128, Context, ContractPromise } from "near-sdk-as";

/**
 * == TYPES ====================================================================
 */

/**
 * Account IDs in NEAR are just strings.
 */
export type AccountId = string;

/**
 * Gas is u64
 */
export type Gas = u64;

/**
 * Amounts, Balances, and Money in NEAR is are u128.
 */

export type Amount = u128;

export type Balance = Amount;

export type Money = Amount;

/**
 * Timestamp in NEAR is a number.
 */
export type Timestamp = u64;

/**
 * == CONSTANTS ================================================================
 *
 * ONE_NEAR = unit of NEAR token in yocto Ⓝ (1e24)
 * XCC_GAS = gas for cross-contract calls, ~5 Tgas (teragas = 1e12) per "hop"
 * MIN_ACCOUNT_BALANCE = 3 NEAR min to keep account alive via storage staking
 *
 * TODO: revist MIN_ACCOUNT_BALANCE after some real data is included b/c this
 *  could end up being much higher
 */

export const ONE_NEAR = u128.from("1000000000000000000000000");
export const XCC_GAS: Gas = 20_000_000_000_000;
export const MIN_ACCOUNT_BALANCE: u128 = u128.mul(ONE_NEAR, u128.from(3));

/**
 * == FUNCTIONS ================================================================
 */

/**
 * @function asNEAR
 * @param amount {u128} - Yocto Ⓝ token quantity as an unsigned 128-bit integer
 * @returns {string}    - Amount in NEAR, as a string
 *
 * @example
 *
 *    asNEAR(7000000000000000000000000)
 *    // => '7'
 */
export function asNEAR(amount: u128): string {
    return u128.div(amount, ONE_NEAR).toString();
}

/**
 * @function toYocto
 * @param amount {number} - Integer to convert
 * @returns {u128}        - Amount in yocto Ⓝ as an unsigned 128-bit integer
 *
 * @example
 *
 *    toYocto(7)
 *    // => 7000000000000000000000000
 */
export function toYocto(amount: number): u128 {
    return u128.mul(ONE_NEAR, u128.from(amount))
}

/**
 * Function to assert that the contract has called itself
 */
export function assert_self(): void {
    const caller = Context.predecessor
    const self = Context.contractName
    assert(caller == self, "Only this contract may call itself");
}

export function assert_single_promise_success(): void {
    const x = ContractPromise.getResults()
    assert(x.length == 1, "Expected exactly one promise result")
    assert(x[0].succeeded, "Expected PromiseStatus to be successful")
}

'''
'''--- index.html ---
<!DOCTYPE html>
<html lang="en">

<head>
    <script type="module">
        import { add } from "./build/release.js";
        document.body.innerText = add(1, 2);
    </script>
</head>

<body></body>

</html>
'''
'''--- package.json ---
{
  "name": "near-book-store",
  "version": "1.0.0",
  "main": "index.js",
  "license": "MIT",
  "dependencies": {
    "@assemblyscript/loader": "^0.20.4",
    "asbuild": "^0.2.0",
    "assemblyscript": "^0.20.4",
    "near-cli": "^3.2.0",
    "near-sdk-as": "^3.2.3"
  },
  "type": "module",
  "exports": {
    ".": {
      "import": "./build/release.js",
      "types": "./build/release.d.ts"
    }
  },
  "scripts": {
    "build:release": "asb",
    "deploy": "near dev-deploy build/release/near-book-store.wasm",
    "dev": "yarn build:release && yarn deploy",
    "test": "asp",
    "asbuild:debug": "asc assembly/index.ts --target debug",
    "asbuild:release": "asc assembly/index.ts --target release",
    "asbuild": "yarn asbuild:debug && yarn asbuild:release",
    "start": "npx serve ."
  },
  "devDependencies": {
    "assemblyscript": "^0.20.4"
  }
}
'''
'''--- scripts/add-chapter.sh ---
#!/usr/bin/env bash
set -e

[ -z "$CONTRACT" ] && echo "Missing \$CONTRACT environment variable" && exit 1
[ -z "$OWNER" ] && echo "Missing \$OWNER environment variable" && exit 1

read -p "Enter Book Id: " id
echo
echo "You entered $id"
echo

read -p "Enter Chapter Content: " content
echo
echo "You entered $content"

echo
echo --------------------------------------------
echo 
echo "Calling addChapter function"
echo

near call $CONTRACT addChapter  '{"id": '$id', "content" : "'"$content"'"}' --accountId $OWNER

echo
echo
'''
'''--- scripts/add-comment.sh ---
#!/usr/bin/env bash
set -e

[ -z "$CONTRACT" ] && echo "Missing \$CONTRACT environment variable" && exit 1
[ -z "$OWNER" ] && echo "Missing \$OWNER environment variable" && exit 1

read -p "Enter Book Id: " id
echo
echo "You entered $id"

echo

read -p "Enter Comment: " comment
echo
echo "You entered $comment"

echo
echo --------------------------------------------
echo 
echo "Calling addComment function"
echo

near call $CONTRACT addComment  '{"id": '$id', "comment" : "'"$comment"'"}' --accountId $OWNER

echo
echo
'''
'''--- scripts/buy-book.sh ---
#!/usr/bin/env bash
set -e

[ -z "$CONTRACT" ] && echo "Missing \$CONTRACT environment variable" && exit 1
[ -z "$OWNER" ] && echo "Missing \$OWNER environment variable" && exit 1

read -p "Enter Book Id: " id
echo
echo "You entered $id"

read -p "Enter Deposit Amount: " deposit
echo
echo "You entered $deposit"

echo
echo --------------------------------------------
echo 
echo "Calling buyBook function"
echo

near call $CONTRACT buyBook '{"id": '$id'}' --accountId $OWNER --deposit $deposit

echo
echo
'''
'''--- scripts/create-book.sh ---
#!/usr/bin/env bash
set -e

[ -z "$CONTRACT" ] && echo "Missing \$CONTRACT environment variable" && exit 1
[ -z "$OWNER" ] && echo "Missing \$OWNER environment variable" && exit 1

read -p "Enter Book Name: " bookName
echo
echo "You entered $bookName"

echo

read -p "Enter Book Description: " desc
echo
echo "You entered $desc"

echo

read -p "Enter Book Price: " price
echo
echo "You entered $price"

echo
echo --------------------------------------------
echo 
echo "Calling createBook function"
echo

near call $CONTRACT createBook '{"name": "'"$bookName"'", "desc": "'"$desc"'", "price" : '$price'}' --accountId $OWNER

echo
echo
'''
'''--- scripts/dev-deploy.sh ---
#!/usr/bin/env bash
set -e

CURRENT=`pwd`
BASENAME=`basename "$CURRENT"`

if [ "$BASENAME" == "scripts" ]; then
    cd ..
fi

echo --------------------------------------------
echo
echo "building the contract (release build)"
echo
yarn build:release

echo --------------------------------------------
echo
echo "deploying the contract"
echo
near dev-deploy ./build/release/near-book-store.wasm

echo --------------------------------------------
echo
[ -z "$CONTRACT" ] && echo run the following commands echo 'export CONTRACT=<dev-123-456>'
[ -z "$OWNER" ] && echo 'export OWNER=<your own account>'
echo
echo

exit 0
'''
'''--- scripts/get-comments.sh ---
#!/usr/bin/env bash
set -e

[ -z "$CONTRACT" ] && echo "Missing \$CONTRACT environment variable" && exit 1
[ -z "$OWNER" ] && echo "Missing \$OWNER environment variable" && exit 1

read -p "Enter Book Id: " id
echo
echo "You entered $id"

echo
echo --------------------------------------------
echo 
echo "Calling getComments function"
echo

near call $CONTRACT getComments '{"id": '$id'}' --accountId $OWNER

echo
echo
'''
'''--- scripts/list-books.sh ---
#!/usr/bin/env bash
set -e

[ -z "$CONTRACT" ] && echo "Missing \$CONTRACT environment variable" && exit 1
[ -z "$OWNER" ] && echo "Missing \$OWNER environment variable" && exit 1

echo
echo --------------------------------------------
echo 
echo "Calling getBooks function"
echo

near call $CONTRACT getBooks '{"start": 0, "limit" : 10}' --accountId $OWNER

echo
echo
'''
'''--- scripts/read-book.sh ---
#!/usr/bin/env bash
set -e

[ -z "$CONTRACT" ] && echo "Missing \$CONTRACT environment variable" && exit 1
[ -z "$OWNER" ] && echo "Missing \$OWNER environment variable" && exit 1

read -p "Enter Book Id: " id
echo
echo "You entered $id"

echo
echo --------------------------------------------
echo 
echo "Calling getChapters function"
echo

near call $CONTRACT getChapters '{"id": '$id'}' --accountId $OWNER

echo
echo
'''
'''--- tests/index.js ---
import assert from "assert";
import { add } from "../build/debug.js";
assert.strictEqual(add(1, 2), 3);
console.log("ok");

'''