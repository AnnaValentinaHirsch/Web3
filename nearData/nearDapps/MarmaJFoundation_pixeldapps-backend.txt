*GitHub Repository "MarmaJFoundation/pixeldapps-backend"*

'''--- .babelrc.js ---
module.exports = {
  presets: [["next/babel", { "preset-react": { runtime: "automatic" } }]],
  plugins: ["babel-plugin-macros", ["styled-components", { ssr: true }]],
};

'''
'''--- .vscode/launch.json ---
{
    // Use IntelliSense to learn about possible attributes.
    // Hover to view descriptions of existing attributes.
    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
    "version": "0.2.0",
    "configurations": [
        {
            "name": "Launch Chrome",
            "request": "launch",
            "type": "chrome",
            "url": "http://localhost:3030",
            "webRoot": "${workspaceFolder}"
        }
       
        
       
    ]
}
'''
'''--- README.md ---
This is a [Next.js](https://nextjs.org/) project bootstrapped with [`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app).

## Getting Started
First, run the development server:

```bash
npm run dev
# or
yarn dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `pages/index.js`. The page auto-updates as you edit the file.

[API routes](https://nextjs.org/docs/api-routes/introduction) can be accessed on [http://localhost:3000/api/hello](http://localhost:3000/api/hello). This endpoint can be edited in `pages/api/hello.js`.

The `pages/api` directory is mapped to `/api/*`. Files in this directory are treated as [API routes](https://nextjs.org/docs/api-routes/introduction) instead of React pages.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js/) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/deployment) for more details.

'''
'''--- assets/css/style.css ---
#app {
  font-family: Avenir, Helvetica, Arial, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

@tailwind base;
@tailwind components;
@tailwind utilities;

.app {
  background: linear-gradient(45deg, #000850 0%, #000320 100%),
    radial-gradient(100% 225% at 100% 0%, #ff6928 0%, #000000 100%),
    linear-gradient(225deg, #ff7a00 0%, #000000 100%),
    linear-gradient(
      135deg,
      #cdffeb 10%,
      #cdffeb 35%,
      #009f9d 35%,
      #009f9d 60%,
      #07456f 60%,
      #07456f 67%,
      #0f0a3c 67%,
      #0f0a3c 100%
    );
  background-blend-mode: screen, overlay, hard-light, normal;
}

img:hover {
  webkit-filter: blur(4px); /* Chrome, Safari, Opera */
  filter: blur(4px);
  -webkit-transition: all 200ms ease-out;
  -moz-transition: all 200ms ease-out;
  -o-transition: all 200ms ease-out;
  transition: all 200ms ease-out;
}

.reveal:hover img {
  webkit-filter: blur(4px); /* Chrome, Safari, Opera */
  filter: blur(4px);
  -webkit-transition: all 200ms ease-out;
  -moz-transition: all 200ms ease-out;
  -o-transition: all 200ms ease-out;
  transition: all 200ms ease-out;
}

.pixel-party-btn {
  background: linear-gradient(123deg, #fffcac 0%, #ffffff 67%),
    linear-gradient(180deg, #d8d8d8 0%, #6b0000 100%),
    linear-gradient(
      142deg,
      #f9f5f0 0%,
      #f9f5f0 33%,
      #f2ead3 calc(33% + 1px),
      #f2ead3 56%,
      #f4991a calc(56% + 1px),
      #f4991a 62%,
      #321313 calc(62% + 1px),
      #321313 100%
    );
  background-blend-mode: multiply, overlay, normal;
}

.pixel-battle-btn {
  background: linear-gradient(
    60deg,
    #2b2e4a 0%,
    #2b2e4a 30%,
    #e84545 calc(30% + 1px),
    #e84545 60%,
    #903749 calc(60% + 1px),
    #903749 70%,
    #53354a calc(70% + 1px),
    #53354a 100%
  );
}
.font-monst {
  font-family: "Montserrat";
}
.font-pop {
  font-family: "Poppins", sans-serif;
}
.font-quick {
  font-family: "Quicksand";
}

@font-face {
  font-family: "Montserrat";
  font-style: normal;
  font-weight: 700;
  src: local("Montserrat"), url(../fonts/Montserrat-Bold.woff) format("woff");
}

@font-face {
  font-family: "Montserrat";
  font-style: normal;
  font-weight: 600;
  src: local("Montserrat"),
    url(../fonts/Montserrat-SemiBold.woff) format("woff");
}

@font-face {
  font-family: "Montserrat";
  font-style: normal;
  font-weight: 500;
  src: local("Montserrat"), url(../fonts/Montserrat-Medium.woff) format("woff");
}

@font-face {
  font-family: "Montserrat";
  font-style: normal;
  font-weight: 400;
  src: local("Montserrat"), url(../fonts/Montserrat-Regular.woff) format("woff");
}

@font-face {
  font-family: "Quicksand";
  font-style: normal;
  font-weight: bold;
  src: local("Quicksand"), url(../fonts/Quicksand-Bold.woff) format("woff");
}

.reveal {
  transition: transform 0.4s cubic-bezier(0, 0, 0.3, 1);
  cursor: pointer;
  position: relative;
  text-transform: uppercase;
}

.reveal::before {
  content: "";
  display: block;
  position: absolute;
  left: 10px;
  top: 12px;
  width: calc(100% - 20px);
  height: calc(100% - 20px);
  transition: transform 0.4s cubic-bezier(0, 0, 0.3, 1),
    opacity 0.4s cubic-bezier(0, 0, 0.3, 1);
  opacity: 0.4;
}

.reveal img {
  position: relative;
}

.reveal:hover {
  transform: scale(1);
}

.reveal:hover::before {
  transform: translateY(12px);
  opacity: 0.2;
}

.reveal-container {
  width: 100%;
  height: 100%;
  overflow: hidden;
  position: absolute;
  top: 0;
  left: 0;
}

.reveal__title,
.reveal__title-overlay {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  font-size: 40px;
  color: #fff;
  font-weight: bold;
  z-index: 1;
  display: flex;
  align-items: center;
  justify-content: center;
}

.reveal__title-overlay {
  overflow: hidden;
  top: calc(50% - 50px);
  background: rgb(32, 6, 6);
  height: 100px;
  width: 405px;
  left: 50%;
  z-index: 2;
  color: #fff;
  font-size: 50px;
  transition: transform 0.4s cubic-bezier(0, 0, 0.3, 1);
  transform: translateX(-160%) skew(-30deg);
}

.reveal__title-overlay-text {
  width: 100%;
  text-align: center;
  transition: transform 0.4s cubic-bezier(0, 0, 0.3, 1);
  transform: translateX(100%) skew(30deg);
}

.reveal:hover .reveal__title-overlay {
  transform: translateX(-75%) skew(-30deg);
}

.reveal:hover .reveal__title-overlay-text {
  transform: translateX(10%) skew(30deg);
}

'''
'''--- assets/js/main.js ---
import '../css/style.css'
'''
'''--- components/Footer.js ---
const navigation = [
  // {
  //   name: "Telegram",
  //   href: "https://t.me/pixeltoken_community",
  //   icon: (props) => (
  //     <svg fill="currentColor" viewBox="0 0 24 24" {...props}>
  //       <path
  //         d="M24 12C24 15.1826 22.7357 18.2348 20.4853 20.4853C18.2348 22.7357 15.1826 24 12 24C8.8174 24 5.76516 22.7357 3.51472 20.4853C1.26428 18.2348 0 15.1826 0 12C0 8.8174 1.26428 5.76516 3.51472 3.51472C5.76516 1.26428 8.8174 0 12 0C15.1826 0 18.2348 1.26428 20.4853 3.51472C22.7357 5.76516 24 8.8174 24 12V12ZM12.4305 8.859C11.2635 9.345 8.9295 10.35 5.4315 11.874C4.8645 12.099 4.566 12.321 4.539 12.537C4.494 12.9015 4.9515 13.0455 5.574 13.242L5.8365 13.3245C6.4485 13.524 7.2735 13.7565 7.701 13.7655C8.091 13.7745 8.5245 13.6155 9.003 13.2855C12.2715 11.079 13.959 9.9645 14.064 9.9405C14.139 9.9225 14.244 9.9015 14.313 9.9645C14.3835 10.026 14.376 10.1445 14.3685 10.176C14.3235 10.3695 12.528 12.0375 11.5995 12.9015C11.31 13.1715 11.1045 13.362 11.0625 13.4055C10.97 13.5 10.876 13.593 10.7805 13.6845C10.2105 14.2335 9.7845 14.6445 10.803 15.3165C11.2935 15.6405 11.6865 15.906 12.078 16.173C12.504 16.464 12.93 16.7535 13.482 17.1165C13.6215 17.2065 13.7565 17.304 13.887 17.397C14.3835 17.751 14.832 18.069 15.3825 18.018C15.7035 17.988 16.035 17.688 16.203 16.788C16.6005 14.6625 17.382 10.059 17.562 8.1615C17.573 8.00376 17.5664 7.8453 17.5425 7.689C17.5284 7.56288 17.4673 7.44669 17.3715 7.3635C17.235 7.26928 17.0723 7.22047 16.9065 7.224C16.4565 7.2315 15.762 7.473 12.4305 8.859V8.859Z"
  //         fillRule="evenodd"
  //       />
  //     </svg>
  //   ),
  // },
  {
    name: "Discord",
    href: "https://discord.com/invite/xFAAa8Db6f",
    icon: (props) => (
      <svg fill="currentColor" viewBox="0 0 21 24" {...props}>
        <path
          d="M8.328 10.068C7.644 10.068 7.104 10.668 7.104 11.4C7.104 12.132 7.656 12.732 8.328 12.732C9.012 12.732 9.552 12.132 9.552 11.4C9.564 10.668 9.012 10.068 8.328 10.068ZM12.708 10.068C12.024 10.068 11.484 10.668 11.484 11.4C11.484 12.132 12.036 12.732 12.708 12.732C13.392 12.732 13.932 12.132 13.932 11.4C13.932 10.668 13.392 10.068 12.708 10.068Z"
          fillRule="evenodd"
        />
        <path
          d="M18.54 0H2.46C1.104 0 0 1.104 0 2.472V18.696C0 20.064 1.104 21.168 2.46 21.168H16.068L15.432 18.948L16.968 20.376L18.42 21.72L21 24V2.472C21 1.104 19.896 0 18.54 0ZM13.908 15.672C13.908 15.672 13.476 15.156 13.116 14.7C14.688 14.256 15.288 13.272 15.288 13.272C14.796 13.596 14.328 13.824 13.908 13.98C13.308 14.232 12.732 14.4 12.168 14.496C11.1403 14.6852 10.0862 14.6812 9.06 14.484C8.45751 14.3661 7.86705 14.1934 7.296 13.968C6.99499 13.8522 6.7023 13.7159 6.42 13.56C6.384 13.536 6.348 13.524 6.312 13.5C6.288 13.488 6.276 13.476 6.264 13.464C6.048 13.344 5.928 13.26 5.928 13.26C5.928 13.26 6.504 14.22 8.028 14.676C7.668 15.132 7.224 15.672 7.224 15.672C4.572 15.588 3.564 13.848 3.564 13.848C3.564 9.984 5.292 6.852 5.292 6.852C7.02 5.556 8.664 5.592 8.664 5.592L8.784 5.736C6.624 6.36 5.628 7.308 5.628 7.308C5.628 7.308 5.892 7.164 6.336 6.96C7.62 6.396 8.64 6.24 9.06 6.204C9.132 6.192 9.192 6.18 9.264 6.18C11.3449 5.89835 13.4612 6.29384 15.3 7.308C15.3 7.308 14.352 6.408 12.312 5.784L12.48 5.592C12.48 5.592 14.124 5.556 15.852 6.852C15.852 6.852 17.58 9.984 17.58 13.848C17.58 13.848 16.56 15.588 13.908 15.672V15.672Z"
          fillRule="evenodd"
        />
      </svg>
    ),
  },
  {
    name: "Twitter",
    href: "https://twitter.com/PixelDapps",
    icon: (props) => (
      <svg fill="currentColor" viewBox="0 0 122 122" {...props}>
        <path
          d="M60.9999 2.44C28.6577 2.44 2.43994 28.6578 2.43994 61C2.43994 93.3422 28.6577 119.56 60.9999 119.56C93.3421 119.56 119.56 93.3422 119.56 61C119.56 28.6578 93.3421 2.44 60.9999 2.44ZM84.8204 50.4104C84.8448 50.9106 84.8509 51.4108 84.8509 51.8988C84.8509 67.1488 73.2548 84.7229 52.039 84.7229C45.77 84.7333 39.6314 82.9328 34.3612 79.5379C35.2579 79.6477 36.179 79.6904 37.1123 79.6904C42.5169 79.6904 47.4884 77.8543 51.4351 74.7555C49.03 74.7083 46.6995 73.9119 44.7685 72.4773C42.8375 71.0427 41.4022 69.0414 40.6625 66.7523C42.3898 67.0807 44.1691 67.0119 45.8658 66.551C43.2553 66.0231 40.9077 64.6086 39.2212 62.5474C37.5346 60.4861 36.6128 57.9049 36.6121 55.2416V55.1013C38.1676 55.9614 39.9488 56.486 41.8398 56.547C39.3925 54.9179 37.66 52.4153 36.9967 49.5511C36.3334 46.6869 36.7894 43.6775 38.2713 41.1384C41.1686 44.7008 44.7816 47.6151 48.8766 49.6925C52.9716 51.7699 57.4572 52.9642 62.043 53.1981C61.46 50.7234 61.711 48.1254 62.7568 45.808C63.8027 43.4906 65.5848 41.5836 67.8263 40.3836C70.0677 39.1836 72.6428 38.7577 75.1513 39.1722C77.6597 39.5867 79.961 40.8183 81.6972 42.6756C84.2786 42.1649 86.754 41.218 89.0172 39.8757C88.1569 42.5483 86.3557 44.8178 83.9481 46.2624C86.2347 45.987 88.4674 45.3723 90.5727 44.4385C89.0263 46.7559 87.0783 48.7783 84.8204 50.4104V50.4104Z"
          fillRule="evenodd"
        />
      </svg>
    ),
  },
  {
    name: "Mail",
    href: "mailto:contact@pixeldapps.co",
    icon: (props) => (
      <svg fill="currentColor" viewBox="0 0 22 17" {...props}>
        <path
          d="M0.00360107 2.5905L10.9995 8.08775L21.9954 2.5905C21.9546 1.88986 21.6476 1.2313 21.1371 0.749687C20.6266 0.268077 19.9513 -0.000128679 19.2495 4.63147e-08H2.74948C2.04765 -0.000128679 1.37234 0.268077 0.861845 0.749687C0.35135 1.2313 0.0443067 1.88986 0.00360107 2.5905V2.5905Z"
          fillRule="evenodd"
        />
        <path
          d="M22 5.66226L11 11.1623L0 5.66226V13.75C0 14.4794 0.289731 15.1788 0.805456 15.6946C1.32118 16.2103 2.02065 16.5 2.75 16.5H19.25C19.9793 16.5 20.6788 16.2103 21.1945 15.6946C21.7103 15.1788 22 14.4794 22 13.75V5.66226Z"
          fillRule="evenodd"
        />
      </svg>
    ),
  },
];

export default function Example() {
  return (
    <footer className=" border-t border-gray-700">
      <div className="max-w-7xl mx-auto py-12 px-4 sm:px-6 md:flex md:items-center md:justify-between lg:px-8">
        <div className="flex justify-center space-x-6 md:order-2">
          {navigation.map((item) => (
            <a
              key={item.name}
              href={item.href}
              className="text-gray-400 hover:text-gray-500"
            >
              <span className="sr-only">{item.name}</span>
              <item.icon className="h-6 w-6" aria-hidden="true" />
            </a>
          ))}
        </div>
        <div className="mt-8 md:mt-0 md:order-1">
          <p className="text-center text-base text-gray-400">
 
          </p>
        </div>
      </div>
    </footer>
  );
}

'''
'''--- components/Header.js ---
/* This example requires Tailwind CSS v2.0+ */
const posts = [
  {
    title: "Pixel-Party",
    href: "https://pixelparty.pixeldapps.co",
    category: { name: "NFT Art", href: "https://pixelparty.pixeldapps.co" },
    description:
      "Pixelparty is pixelboard with 600 frames, each with the size of 20x20px. Additionally each frameholder earns pixeltoken once per week.",
    state: "Online",
    datetime: "2020-03-16",
    imageUrl: "./party.jpg",
    readingTime: "6 min",
  },
  {
    title: "Pixel-Battle",
    href: "#",
    category: { name: "Art Contest", href: "#" },
    description:
      "Show your pixelart skills in a contest with other artists. The community will vote their favourites and decides who deserves the prizepool.",
    state: "Online",
    datetime: "2020-03-10",
    imageUrl: "./draw.jpg",
    readingTime: "4 min",
  },
  {
    title: "Pixel-Creatures",
    href: "#",
    category: { name: "NFT Gaming", href: "#" },
    description:
      "Hatch, train, evolve, trade and fight with a large selection of different and unique pets.",
    state: "WIP",
    datetime: "2020-02-12",
    imageUrl: "./fight.jpg",
    readingTime: "11 min",
  },
];

export default function Example() {
  return (
    <div className="relative px-4 pt-8 pb-2 sm:px-6 lg:pt-14 lg:pb-4 lg:px-8">
      <div className="relative mx-auto max-w-7xl">
        <div className="text-center">
          <h1 className="md:text-5xl font-extrabold tracking-tight text-gray-100 sm:text-4xl">
            We make blockchain-based dapps!
          </h1>
        </div>
        <div className="grid max-w-lg gap-5 mx-auto mt-12 lg:grid-cols-3 lg:max-w-none">
          {posts.map((post) => (
            <div
              key={post.title}
              className="flex flex-col overflow-hidden rounded-lg shadow-lg"
            >
              <div className="flex-shrink-0">
                <div className="relative inline-block">
                  <div className="reveal">
                    <div className="reveal-container">
                      <div className="reveal__title-overlay">
                        <div className="reveal__title-overlay-text">
                          {post.state}
                        </div>
                      </div>
                    </div>
                    <a href={post.category.href}>
                      <img
                        src={post.imageUrl}
                        className="object-cover -mb-2"
                        alt="Alt goes here!"
                      />
                    </a>
                  </div>
                </div>
              </div>
              <div className="flex flex-col justify-between flex-1 p-6 bg-white">
                <div className="flex-1">
                  <p className="text-sm font-medium text-indigo-600">
                    {post.category.name}
                  </p>
                  <a href={post.href} className="block mt-2">
                    <p className="text-2xl font-semibold text-gray-900">
                      {post.title}
                    </p>
                    <p className="mt-3 text-base text-gray-500">
                      {post.description}
                    </p>
                  </a>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}

'''
'''--- components/Navbar.js ---
import { Disclosure } from "@headlessui/react";
import { MenuIcon, XIcon } from "@heroicons/react/outline";
import produce from "immer";
import { useRecoilState } from "recoil";
import { navState, userState } from "../utils/frontend//store";
import Link from "next/link";
import tw, { styled } from "twin.macro";
import { requestLogin, requestLogout } from "../utils/frontend/near";

function classNames(...classes) {
  return classes.filter(Boolean).join(" ");
}

const Eggs = styled.div`
  ${tw`transition w-1/2 mr-2 col-span-1 duration-200 flex flex-row w-auto items-center gap-x-3 bg-theme-darker rounded-md px-3.5 py-2 text-sm font-medium text-gray-700 hover:bg-theme-normal focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-100 focus:ring-purple-500`}
`;

function buildLink(item) {
  if (item.href == "/") {
    return {
      pathname: item.href,
      query: { page: item.page },
    };
  } else {
    return {
      pathname: item.href,
    };
  }
}

export default function Example() {
  const [NavState, setNavState] = useRecoilState(navState);
  const [UserState] = useRecoilState(userState);

  const handleUpdates = (id) => {
    setNavState({
      navigation: produce(NavState.navigation, (draft) => {
        draft.map((a) => (a.current = false));
        draft[id].current = true;
      }),
    });
  };
  return (
    <Disclosure as="nav" className="bg-gray-800">
      {({ open }) => (
        <>
          <div className="px-4 mx-auto max-w-7xl sm:px-6 lg:px-8">
            <div className="flex justify-between h-16">
              <div className="flex">
                <div className="flex items-center mr-2 -ml-2 md:hidden">
                  {/* Mobile menu button */}
                  <Disclosure.Button className="inline-flex items-center justify-center p-2 text-gray-400 rounded-md hover:text-white hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white">
                    <span className="sr-only">Open main menu</span>
                    {open ? (
                      <XIcon className="block w-6 h-6" aria-hidden="true" />
                    ) : (
                      <MenuIcon className="block w-6 h-6" aria-hidden="true" />
                    )}
                  </Disclosure.Button>
                </div>
                <div className="flex items-center flex-shrink-0">
                  <img
                    className="block w-auto h-8 lg:hidden"
                    src="logo.png"
                  />
                  <img
                    className="hidden w-auto h-8 lg:block"
                    src="logo.png"
                  />
                </div>
                <div className="hidden md:ml-6 md:flex md:items-center md:space-x-4">
                  {NavState.navigation.map((item, index) => (
                    <Link href={buildLink(item)} key={index}>
                      <a
                        onClick={() => handleUpdates(index)}
                        key={index}
                        className={classNames(
                          item.current
                            ? "bg-gray-900 text-white"
                            : "text-gray-300 hover:bg-gray-700 hover:text-white",
                          "px-3 py-2 rounded-md text-sm font-medium"
                        )}
                        aria-current={item.current ? "page" : undefined}
                      >
                        {item.name}
                      </a>
                    </Link>
                  ))}
                </div>
              </div>
              <div className="flex items-center">
                {UserState.logged && (<>
                <div className="flex-shrink-0">
                    <Eggs>
                      <img className="w-auto h-6" src="ctt/ctt_logo.png" />
                      <span className="font-sans font-bold text-white text-md">
                        {UserState.tokens}
                      </span>
                    </Eggs>
                  </div> 
                </>)}
                <div className="flex-shrink-0">
                  {!UserState.logged && (
                    <button
                      onClick={requestLogin}
                      type="button"
                      className="relative inline-flex items-center px-4 py-2 text-sm font-medium text-white bg-indigo-500 border border-transparent rounded-md shadow-sm hover:bg-indigo-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-indigo-500"
                    >
                      <span>Login</span>
                    </button>)}
                  {UserState.logged && (
                    <button
                      onClick={requestLogout}
                      type="button"
                      className="relative inline-flex items-center px-4 py-2 text-sm font-medium text-white bg-indigo-500 border border-transparent rounded-md shadow-sm hover:bg-indigo-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-indigo-500"
                    >
                      <span>Logout</span>
                    </button>
                  )}
                </div>
              </div>
            </div>
          </div>

          <Disclosure.Panel className="md:hidden">
            <div className="px-2 pt-2 pb-3 space-y-1 sm:px-3">
              {NavState.navigation.map((item, index) => (
                <Link href={buildLink(item)} key={index}>
                  <a
                    onClick={() => handleUpdates(index)}
                    key={index}
                    className={classNames(
                      item.current
                        ? "bg-gray-900 text-white"
                        : "text-gray-300 hover:bg-gray-700 hover:text-white",
                      "block px-3 py-2 rounded-md text-base font-medium"
                    )}
                    aria-current={item.current ? "page" : undefined}
                  >
                    {item.name}
                  </a>
                </Link>
              ))}
            </div>
          </Disclosure.Panel>
        </>
      )}
    </Disclosure>
  );
}

'''
'''--- components/Navbar2.js ---
import { Disclosure } from "@headlessui/react";
import { MenuIcon, XIcon } from "@heroicons/react/outline";
import produce from "immer";
import { useRecoilState } from "recoil";
import { navState, userState } from "../utils/frontend//store";
import Link from "next/link";
import tw, { styled } from "twin.macro";
import { requestLogin, requestLogout, claim_aurora, login_aurora } from "../utils/frontend/near";

function classNames(...classes) {
  return classes.filter(Boolean).join(" ");
}

const Eggs = styled.div`
  ${tw`transition w-1/2 mr-2 col-span-1 duration-200 flex flex-row w-auto items-center gap-x-3 bg-theme-darker rounded-md px-3.5 py-2 text-sm font-medium text-gray-700 hover:bg-theme-normal focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-100 focus:ring-purple-500`}
`;

function buildLink(item) {
  if (item.href == "/") {
    return {
      pathname: item.href,
      query: { page: item.page },
    };
  } else {
    return {
      pathname: item.href,
    };
  }
}

export default function Navbar2() {
  const [NavState, setNavState] = useRecoilState(navState);
  const [UserState] = useRecoilState(userState);

  const handleUpdates = (id) => {
    setNavState({
      navigation: produce(NavState.navigation, (draft) => {
        draft.map((a) => (a.current = false));
        draft[id].current = true;
      }),
    });
  };
  return (
    <Disclosure as="nav" className="bg-gray-800">
      {({ open }) => (
        <>
          <div className="px-4 mx-auto max-w-7xl sm:px-6 lg:px-8">
            <div className="flex justify-between h-16">
              <div className="flex">
 

              </div>
              <div className="flex items-center">

                   <button
                    onClick={login_aurora}
                    type="button"
                    className="relative inline-flex items-center px-4 py-2 text-sm font-medium text-white bg-indigo-500 border border-transparent rounded-md shadow-sm hover:bg-indigo-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-indigo-500"
                  >
                    <span>Lauro</span>
                  </button>
                  <button
                    onClick={claim_aurora}
                    type="button"
                    className="relative inline-flex items-center px-4 py-2 text-sm font-medium text-white bg-indigo-500 border border-transparent rounded-md shadow-sm hover:bg-indigo-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-indigo-500"
                  >
                    <span>Claim</span>
                  </button>
      
              </div>
            </div>
          </div>

          <Disclosure.Panel className="md:hidden">
            <div className="px-2 pt-2 pb-3 space-y-1 sm:px-3">
              {NavState.navigation.map((item, index) => (
                <Link href={buildLink(item)} key={index}>
                  <a
                    onClick={() => handleUpdates(index)}
                    key={index}
                    className={classNames(
                      item.current
                        ? "bg-gray-900 text-white"
                        : "text-gray-300 hover:bg-gray-700 hover:text-white",
                      "block px-3 py-2 rounded-md text-base font-medium"
                    )}
                    aria-current={item.current ? "page" : undefined}
                  >
                    {item.name}
                  </a>
                </Link>
              ))}
            </div>
          </Disclosure.Panel>
        </>
      )}
    </Disclosure>
  );
}

'''
'''--- jsconfig.json ---
{
    "compilerOptions": {
      "jsx": "react"
    },
    "checkjs": true
}
'''
'''--- next-env.d.ts ---
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/basic-features/typescript for more information.

'''
'''--- next.config.js ---
module.exports = {
    future: {
      webpack5: false,
    },
    async headers() {
      return [
        {
          // matching all API routes
          source: "/api/:path*",
          headers: [
            { key: "Access-Control-Allow-Credentials", value: "true" },
            { key: "Access-Control-Allow-Origin", value: "*" },
            { key: "Access-Control-Allow-Methods", value: "GET,OPTIONS,PATCH,DELETE,POST,PUT" },
            { key: "Access-Control-Allow-Headers", value: "X-CSRF-Token, X-Requested-With, Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version" },
          ]
        }
      ]
    }
  };
  
'''
'''--- package-lock.json ---
{
  "name": "my-project",
  "version": "0.1.0",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "name": "my-project",
      "version": "0.1.0",
      "dependencies": {
        "@headlessui/react": "^1.0.0",
        "@heroicons/react": "^1.0.1",
        "@near-wallet-selector/core": "^8.9.5",
        "@near-wallet-selector/meteor-wallet": "^8.9.5",
        "@tailwindcss/aspect-ratio": "^0.2.0",
        "axios": "^0.21.1",
        "b58": "^4.0.3",
        "bn.js": "^5.2.0",
        "chart.js": "^3.7.1",
        "immer": "^9.0.1",
        "lzutf8": "^0.6.0",
        "mongodb": "^4.0.1",
        "near-api-js": "^0.44.2",
        "near-transaction-manager": "^0.1.1",
        "next": "~12.2.5",
        "pg": "^8.7.1",
        "react": "17.0.2",
        "react-chartjs-2": "^4.1.0",
        "react-color": "^2.19.3",
        "react-dom": "17.0.2",
        "react-modal-image": "^2.5.0",
        "react-notifications": "^1.7.2",
        "react-toastify": "^7.0.4",
        "recoil": "^0.2.0",
        "styled-components": "^5.3.0",
        "tweetnacl": "^1.0.3",
        "twin.macro": "^2.5.0"
      },
      "devDependencies": {
        "@tailwindcss/forms": "^0.3.2",
        "@types/react": "^17.0.52",
        "autoprefixer": "^10.2.5",
        "postcss": "^8.2.10",
        "tailwindcss": "^2.1.1",
        "typescript": "^4.3.5"
      }
    },
    "node_modules/@aws-crypto/ie11-detection": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/@aws-crypto/ie11-detection/-/ie11-detection-2.0.2.tgz",
      "integrity": "sha512-5XDMQY98gMAf/WRTic5G++jfmS/VLM0rwpiOpaainKi4L0nqWMSB1SzsrEG5rjFZGYN6ZAefO+/Yta2dFM0kMw==",
      "optional": true,
      "dependencies": {
        "tslib": "^1.11.1"
      }
    },
    "node_modules/@aws-crypto/ie11-detection/node_modules/tslib": {
      "version": "1.14.1",
      "resolved": "https://registry.npmjs.org/tslib/-/tslib-1.14.1.tgz",
      "integrity": "sha512-Xni35NKzjgMrwevysHTCArtLDpPvye8zV/0E4EyYn43P7/7qvQwPh9BGkHewbMulVntbigmcT7rdX3BNo9wRJg==",
      "optional": true
    },
    "node_modules/@aws-crypto/sha256-browser": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/@aws-crypto/sha256-browser/-/sha256-browser-2.0.0.tgz",
      "integrity": "sha512-rYXOQ8BFOaqMEHJrLHul/25ckWH6GTJtdLSajhlqGMx0PmSueAuvboCuZCTqEKlxR8CQOwRarxYMZZSYlhRA1A==",
      "optional": true,
      "dependencies": {
        "@aws-crypto/ie11-detection": "^2.0.0",
        "@aws-crypto/sha256-js": "^2.0.0",
        "@aws-crypto/supports-web-crypto": "^2.0.0",
        "@aws-crypto/util": "^2.0.0",
        "@aws-sdk/types": "^3.1.0",
        "@aws-sdk/util-locate-window": "^3.0.0",
        "@aws-sdk/util-utf8-browser": "^3.0.0",
        "tslib": "^1.11.1"
      }
    },
    "node_modules/@aws-crypto/sha256-browser/node_modules/tslib": {
      "version": "1.14.1",
      "resolved": "https://registry.npmjs.org/tslib/-/tslib-1.14.1.tgz",
      "integrity": "sha512-Xni35NKzjgMrwevysHTCArtLDpPvye8zV/0E4EyYn43P7/7qvQwPh9BGkHewbMulVntbigmcT7rdX3BNo9wRJg==",
      "optional": true
    },
    "node_modules/@aws-crypto/sha256-js": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/@aws-crypto/sha256-js/-/sha256-js-2.0.0.tgz",
      "integrity": "sha512-VZY+mCY4Nmrs5WGfitmNqXzaE873fcIZDu54cbaDaaamsaTOP1DBImV9F4pICc3EHjQXujyE8jig+PFCaew9ig==",
      "optional": true,
      "dependencies": {
        "@aws-crypto/util": "^2.0.0",
        "@aws-sdk/types": "^3.1.0",
        "tslib": "^1.11.1"
      }
    },
    "node_modules/@aws-crypto/sha256-js/node_modules/tslib": {
      "version": "1.14.1",
      "resolved": "https://registry.npmjs.org/tslib/-/tslib-1.14.1.tgz",
      "integrity": "sha512-Xni35NKzjgMrwevysHTCArtLDpPvye8zV/0E4EyYn43P7/7qvQwPh9BGkHewbMulVntbigmcT7rdX3BNo9wRJg==",
      "optional": true
    },
    "node_modules/@aws-crypto/supports-web-crypto": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/@aws-crypto/supports-web-crypto/-/supports-web-crypto-2.0.2.tgz",
      "integrity": "sha512-6mbSsLHwZ99CTOOswvCRP3C+VCWnzBf+1SnbWxzzJ9lR0mA0JnY2JEAhp8rqmTE0GPFy88rrM27ffgp62oErMQ==",
      "optional": true,
      "dependencies": {
        "tslib": "^1.11.1"
      }
    },
    "node_modules/@aws-crypto/supports-web-crypto/node_modules/tslib": {
      "version": "1.14.1",
      "resolved": "https://registry.npmjs.org/tslib/-/tslib-1.14.1.tgz",
      "integrity": "sha512-Xni35NKzjgMrwevysHTCArtLDpPvye8zV/0E4EyYn43P7/7qvQwPh9BGkHewbMulVntbigmcT7rdX3BNo9wRJg==",
      "optional": true
    },
    "node_modules/@aws-crypto/util": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/@aws-crypto/util/-/util-2.0.2.tgz",
      "integrity": "sha512-Lgu5v/0e/BcrZ5m/IWqzPUf3UYFTy/PpeED+uc9SWUR1iZQL8XXbGQg10UfllwwBryO3hFF5dizK+78aoXC1eA==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/types": "^3.110.0",
        "@aws-sdk/util-utf8-browser": "^3.0.0",
        "tslib": "^1.11.1"
      }
    },
    "node_modules/@aws-crypto/util/node_modules/tslib": {
      "version": "1.14.1",
      "resolved": "https://registry.npmjs.org/tslib/-/tslib-1.14.1.tgz",
      "integrity": "sha512-Xni35NKzjgMrwevysHTCArtLDpPvye8zV/0E4EyYn43P7/7qvQwPh9BGkHewbMulVntbigmcT7rdX3BNo9wRJg==",
      "optional": true
    },
    "node_modules/@aws-sdk/abort-controller": {
      "version": "3.208.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/abort-controller/-/abort-controller-3.208.0.tgz",
      "integrity": "sha512-mQkDR+8VLCafg9KI4TgftftBOL170ricyb+HgV8n5jLDrEG+TfOfud8e6us2lIFESEuMpohC+/8yIcf6JjKkMg==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/types": "3.208.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/client-cognito-identity": {
      "version": "3.211.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/client-cognito-identity/-/client-cognito-identity-3.211.0.tgz",
      "integrity": "sha512-KhXo1v78szdvLyF0SHRXR2I7SNkFeC0iay9amspAsF2jMz3CPu2EqWu4ymqO7lSSaAGEkKaUE9ZvD7uNn5oo7A==",
      "optional": true,
      "dependencies": {
        "@aws-crypto/sha256-browser": "2.0.0",
        "@aws-crypto/sha256-js": "2.0.0",
        "@aws-sdk/client-sts": "3.211.0",
        "@aws-sdk/config-resolver": "3.209.0",
        "@aws-sdk/credential-provider-node": "3.211.0",
        "@aws-sdk/fetch-http-handler": "3.208.0",
        "@aws-sdk/hash-node": "3.208.0",
        "@aws-sdk/invalid-dependency": "3.208.0",
        "@aws-sdk/middleware-content-length": "3.208.0",
        "@aws-sdk/middleware-endpoint": "3.208.0",
        "@aws-sdk/middleware-host-header": "3.208.0",
        "@aws-sdk/middleware-logger": "3.208.0",
        "@aws-sdk/middleware-recursion-detection": "3.208.0",
        "@aws-sdk/middleware-retry": "3.209.0",
        "@aws-sdk/middleware-serde": "3.208.0",
        "@aws-sdk/middleware-signing": "3.208.0",
        "@aws-sdk/middleware-stack": "3.208.0",
        "@aws-sdk/middleware-user-agent": "3.208.0",
        "@aws-sdk/node-config-provider": "3.209.0",
        "@aws-sdk/node-http-handler": "3.208.0",
        "@aws-sdk/protocol-http": "3.208.0",
        "@aws-sdk/smithy-client": "3.209.0",
        "@aws-sdk/types": "3.208.0",
        "@aws-sdk/url-parser": "3.208.0",
        "@aws-sdk/util-base64": "3.208.0",
        "@aws-sdk/util-body-length-browser": "3.188.0",
        "@aws-sdk/util-body-length-node": "3.208.0",
        "@aws-sdk/util-defaults-mode-browser": "3.209.0",
        "@aws-sdk/util-defaults-mode-node": "3.209.0",
        "@aws-sdk/util-endpoints": "3.211.0",
        "@aws-sdk/util-user-agent-browser": "3.208.0",
        "@aws-sdk/util-user-agent-node": "3.209.0",
        "@aws-sdk/util-utf8-browser": "3.188.0",
        "@aws-sdk/util-utf8-node": "3.208.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/client-sso": {
      "version": "3.211.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/client-sso/-/client-sso-3.211.0.tgz",
      "integrity": "sha512-Wuo3ZYPy9L+OixlZ7/wM1BbPBdC22xO/a8z/J1sgQZiRDl80Ax+jf1u17D91xdZJGH0hTU5AlvEY7mHP0y/hAw==",
      "optional": true,
      "dependencies": {
        "@aws-crypto/sha256-browser": "2.0.0",
        "@aws-crypto/sha256-js": "2.0.0",
        "@aws-sdk/config-resolver": "3.209.0",
        "@aws-sdk/fetch-http-handler": "3.208.0",
        "@aws-sdk/hash-node": "3.208.0",
        "@aws-sdk/invalid-dependency": "3.208.0",
        "@aws-sdk/middleware-content-length": "3.208.0",
        "@aws-sdk/middleware-endpoint": "3.208.0",
        "@aws-sdk/middleware-host-header": "3.208.0",
        "@aws-sdk/middleware-logger": "3.208.0",
        "@aws-sdk/middleware-recursion-detection": "3.208.0",
        "@aws-sdk/middleware-retry": "3.209.0",
        "@aws-sdk/middleware-serde": "3.208.0",
        "@aws-sdk/middleware-stack": "3.208.0",
        "@aws-sdk/middleware-user-agent": "3.208.0",
        "@aws-sdk/node-config-provider": "3.209.0",
        "@aws-sdk/node-http-handler": "3.208.0",
        "@aws-sdk/protocol-http": "3.208.0",
        "@aws-sdk/smithy-client": "3.209.0",
        "@aws-sdk/types": "3.208.0",
        "@aws-sdk/url-parser": "3.208.0",
        "@aws-sdk/util-base64": "3.208.0",
        "@aws-sdk/util-body-length-browser": "3.188.0",
        "@aws-sdk/util-body-length-node": "3.208.0",
        "@aws-sdk/util-defaults-mode-browser": "3.209.0",
        "@aws-sdk/util-defaults-mode-node": "3.209.0",
        "@aws-sdk/util-endpoints": "3.211.0",
        "@aws-sdk/util-user-agent-browser": "3.208.0",
        "@aws-sdk/util-user-agent-node": "3.209.0",
        "@aws-sdk/util-utf8-browser": "3.188.0",
        "@aws-sdk/util-utf8-node": "3.208.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/client-sso-oidc": {
      "version": "3.211.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/client-sso-oidc/-/client-sso-oidc-3.211.0.tgz",
      "integrity": "sha512-oJ+5ROykVsXpBFpWUfSUYHz/RcTjsZPri6CIY+wQmEFDAOxTsgxd7l8VkqX1r/U/QiK/xDXuK+Z7MurywXS+rQ==",
      "optional": true,
      "dependencies": {
        "@aws-crypto/sha256-browser": "2.0.0",
        "@aws-crypto/sha256-js": "2.0.0",
        "@aws-sdk/config-resolver": "3.209.0",
        "@aws-sdk/fetch-http-handler": "3.208.0",
        "@aws-sdk/hash-node": "3.208.0",
        "@aws-sdk/invalid-dependency": "3.208.0",
        "@aws-sdk/middleware-content-length": "3.208.0",
        "@aws-sdk/middleware-endpoint": "3.208.0",
        "@aws-sdk/middleware-host-header": "3.208.0",
        "@aws-sdk/middleware-logger": "3.208.0",
        "@aws-sdk/middleware-recursion-detection": "3.208.0",
        "@aws-sdk/middleware-retry": "3.209.0",
        "@aws-sdk/middleware-serde": "3.208.0",
        "@aws-sdk/middleware-stack": "3.208.0",
        "@aws-sdk/middleware-user-agent": "3.208.0",
        "@aws-sdk/node-config-provider": "3.209.0",
        "@aws-sdk/node-http-handler": "3.208.0",
        "@aws-sdk/protocol-http": "3.208.0",
        "@aws-sdk/smithy-client": "3.209.0",
        "@aws-sdk/types": "3.208.0",
        "@aws-sdk/url-parser": "3.208.0",
        "@aws-sdk/util-base64": "3.208.0",
        "@aws-sdk/util-body-length-browser": "3.188.0",
        "@aws-sdk/util-body-length-node": "3.208.0",
        "@aws-sdk/util-defaults-mode-browser": "3.209.0",
        "@aws-sdk/util-defaults-mode-node": "3.209.0",
        "@aws-sdk/util-endpoints": "3.211.0",
        "@aws-sdk/util-user-agent-browser": "3.208.0",
        "@aws-sdk/util-user-agent-node": "3.209.0",
        "@aws-sdk/util-utf8-browser": "3.188.0",
        "@aws-sdk/util-utf8-node": "3.208.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/client-sts": {
      "version": "3.211.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/client-sts/-/client-sts-3.211.0.tgz",
      "integrity": "sha512-39/PMIKLEaRUztx3m4I0x9SCnqTStaQuqIabAK/wk0uy+O2p32sv7eacRrGjZWHngqdsK7S1s/LSFErYzzIvkw==",
      "optional": true,
      "dependencies": {
        "@aws-crypto/sha256-browser": "2.0.0",
        "@aws-crypto/sha256-js": "2.0.0",
        "@aws-sdk/config-resolver": "3.209.0",
        "@aws-sdk/credential-provider-node": "3.211.0",
        "@aws-sdk/fetch-http-handler": "3.208.0",
        "@aws-sdk/hash-node": "3.208.0",
        "@aws-sdk/invalid-dependency": "3.208.0",
        "@aws-sdk/middleware-content-length": "3.208.0",
        "@aws-sdk/middleware-endpoint": "3.208.0",
        "@aws-sdk/middleware-host-header": "3.208.0",
        "@aws-sdk/middleware-logger": "3.208.0",
        "@aws-sdk/middleware-recursion-detection": "3.208.0",
        "@aws-sdk/middleware-retry": "3.209.0",
        "@aws-sdk/middleware-sdk-sts": "3.208.0",
        "@aws-sdk/middleware-serde": "3.208.0",
        "@aws-sdk/middleware-signing": "3.208.0",
        "@aws-sdk/middleware-stack": "3.208.0",
        "@aws-sdk/middleware-user-agent": "3.208.0",
        "@aws-sdk/node-config-provider": "3.209.0",
        "@aws-sdk/node-http-handler": "3.208.0",
        "@aws-sdk/protocol-http": "3.208.0",
        "@aws-sdk/smithy-client": "3.209.0",
        "@aws-sdk/types": "3.208.0",
        "@aws-sdk/url-parser": "3.208.0",
        "@aws-sdk/util-base64": "3.208.0",
        "@aws-sdk/util-body-length-browser": "3.188.0",
        "@aws-sdk/util-body-length-node": "3.208.0",
        "@aws-sdk/util-defaults-mode-browser": "3.209.0",
        "@aws-sdk/util-defaults-mode-node": "3.209.0",
        "@aws-sdk/util-endpoints": "3.211.0",
        "@aws-sdk/util-user-agent-browser": "3.208.0",
        "@aws-sdk/util-user-agent-node": "3.209.0",
        "@aws-sdk/util-utf8-browser": "3.188.0",
        "@aws-sdk/util-utf8-node": "3.208.0",
        "fast-xml-parser": "4.0.11",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/config-resolver": {
      "version": "3.209.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/config-resolver/-/config-resolver-3.209.0.tgz",
      "integrity": "sha512-wLXI1Jg9xx9wE8vdIfOgSKnoBWbn9j3IvW4+7PnM/nf5xC30/Jp4j+JndEG/BKyDQF7HJQTIeRpSkwKaqJhCRA==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/signature-v4": "3.208.0",
        "@aws-sdk/types": "3.208.0",
        "@aws-sdk/util-config-provider": "3.208.0",
        "@aws-sdk/util-middleware": "3.208.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/credential-provider-cognito-identity": {
      "version": "3.211.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/credential-provider-cognito-identity/-/credential-provider-cognito-identity-3.211.0.tgz",
      "integrity": "sha512-YbTioDEGvGFYaHeeQrQUQLHnqvWYNdDn5acEAD76DMnoV+B04OVKWYphFd6KBZClIkXnH0T8stPnOE7La6rWjg==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/client-cognito-identity": "3.211.0",
        "@aws-sdk/property-provider": "3.208.0",
        "@aws-sdk/types": "3.208.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/credential-provider-env": {
      "version": "3.208.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/credential-provider-env/-/credential-provider-env-3.208.0.tgz",
      "integrity": "sha512-FB+KUSpZc03wVTXxGnMmgtaP0sJOv0D7oyogHb7wcf5b7RjjwqoaeUcJHTdKRZaW6e1foLk3/L9uebxiWefDbQ==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/property-provider": "3.208.0",
        "@aws-sdk/types": "3.208.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/credential-provider-imds": {
      "version": "3.209.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/credential-provider-imds/-/credential-provider-imds-3.209.0.tgz",
      "integrity": "sha512-EjA1nWduIHjALjNF6O2lpKVOoTIlfGHgvqCxjFf7XNqBTTKWCxEflcmUgqXwo9A7TU0mTTyr7nLGMAsNE2CR3w==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/node-config-provider": "3.209.0",
        "@aws-sdk/property-provider": "3.208.0",
        "@aws-sdk/types": "3.208.0",
        "@aws-sdk/url-parser": "3.208.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/credential-provider-ini": {
      "version": "3.211.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/credential-provider-ini/-/credential-provider-ini-3.211.0.tgz",
      "integrity": "sha512-kFekBDGX3tMsbEBjpCHt2dp5hx7xBN0d7v+fNXky4fB61bNUxcLNpXkTgDIqRyMzEje3Jov9Be9Qgqb8ud0Fiw==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/credential-provider-env": "3.208.0",
        "@aws-sdk/credential-provider-imds": "3.209.0",
        "@aws-sdk/credential-provider-sso": "3.211.0",
        "@aws-sdk/credential-provider-web-identity": "3.208.0",
        "@aws-sdk/property-provider": "3.208.0",
        "@aws-sdk/shared-ini-file-loader": "3.209.0",
        "@aws-sdk/types": "3.208.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/credential-provider-node": {
      "version": "3.211.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/credential-provider-node/-/credential-provider-node-3.211.0.tgz",
      "integrity": "sha512-RWDitzHmZOfrfTZCnL8nOLQgYgawAAw8IF5pqeNjcN9TZ/pR64B9pusTYD7a+uVDB8kb9vMU767g89ts2pqmfQ==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/credential-provider-env": "3.208.0",
        "@aws-sdk/credential-provider-imds": "3.209.0",
        "@aws-sdk/credential-provider-ini": "3.211.0",
        "@aws-sdk/credential-provider-process": "3.209.0",
        "@aws-sdk/credential-provider-sso": "3.211.0",
        "@aws-sdk/credential-provider-web-identity": "3.208.0",
        "@aws-sdk/property-provider": "3.208.0",
        "@aws-sdk/shared-ini-file-loader": "3.209.0",
        "@aws-sdk/types": "3.208.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/credential-provider-process": {
      "version": "3.209.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/credential-provider-process/-/credential-provider-process-3.209.0.tgz",
      "integrity": "sha512-G0urC5p1kgUfgpK8lncdisSewa8onnoQAVdf2Uh51hOqc7UufGce+ouvLH8J2iMkMaL1MSyu8fqwfZNyDtH37g==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/property-provider": "3.208.0",
        "@aws-sdk/shared-ini-file-loader": "3.209.0",
        "@aws-sdk/types": "3.208.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/credential-provider-sso": {
      "version": "3.211.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/credential-provider-sso/-/credential-provider-sso-3.211.0.tgz",
      "integrity": "sha512-S8ciHRypUCi0Uz0D80yVGkWmvpCBCvkEaj+IO0LdYX05GDnH/B44DA8UQ0pfAJqLy5BeSO5snKVRKSPzxNtUGw==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/client-sso": "3.211.0",
        "@aws-sdk/property-provider": "3.208.0",
        "@aws-sdk/shared-ini-file-loader": "3.209.0",
        "@aws-sdk/token-providers": "3.211.0",
        "@aws-sdk/types": "3.208.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/credential-provider-web-identity": {
      "version": "3.208.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/credential-provider-web-identity/-/credential-provider-web-identity-3.208.0.tgz",
      "integrity": "sha512-7wtrdEr8uvDr5t0stimrXGsW4G+TQyluZ9OucCCY0HXgNihmnk1BIu+COuOSxRtFXHwCh4rIPaVE1ABG2Mq24g==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/property-provider": "3.208.0",
        "@aws-sdk/types": "3.208.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/credential-providers": {
      "version": "3.211.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/credential-providers/-/credential-providers-3.211.0.tgz",
      "integrity": "sha512-duo3zSI8usGxA23skzQqVDaKB7k3McJYbFG2nzPTYD+RI4w5Sbs66SUWvTmtSrdZJWmzDsDNKW9fOMtnNARVVw==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/client-cognito-identity": "3.211.0",
        "@aws-sdk/client-sso": "3.211.0",
        "@aws-sdk/client-sts": "3.211.0",
        "@aws-sdk/credential-provider-cognito-identity": "3.211.0",
        "@aws-sdk/credential-provider-env": "3.208.0",
        "@aws-sdk/credential-provider-imds": "3.209.0",
        "@aws-sdk/credential-provider-ini": "3.211.0",
        "@aws-sdk/credential-provider-node": "3.211.0",
        "@aws-sdk/credential-provider-process": "3.209.0",
        "@aws-sdk/credential-provider-sso": "3.211.0",
        "@aws-sdk/credential-provider-web-identity": "3.208.0",
        "@aws-sdk/property-provider": "3.208.0",
        "@aws-sdk/shared-ini-file-loader": "3.209.0",
        "@aws-sdk/types": "3.208.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/fetch-http-handler": {
      "version": "3.208.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/fetch-http-handler/-/fetch-http-handler-3.208.0.tgz",
      "integrity": "sha512-GuwkwOeyLKCbSbnFlyHdlKd7u54cnQUI8NfVDAxpZvomY3PV476Tzg8XEyOYE67r5rR6XMqn6IK1PmFAACY+ew==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/protocol-http": "3.208.0",
        "@aws-sdk/querystring-builder": "3.208.0",
        "@aws-sdk/types": "3.208.0",
        "@aws-sdk/util-base64": "3.208.0",
        "tslib": "^2.3.1"
      }
    },
    "node_modules/@aws-sdk/hash-node": {
      "version": "3.208.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/hash-node/-/hash-node-3.208.0.tgz",
      "integrity": "sha512-X5u6nD9+wzaA6qhqbobxsIgiyDJMW8NgqjZgHoc5x1wz4unHUCEuSBZy1kbIZ6+EPZ9bQHQZ21gKgf1j5vhsvQ==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/types": "3.208.0",
        "@aws-sdk/util-buffer-from": "3.208.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/invalid-dependency": {
      "version": "3.208.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/invalid-dependency/-/invalid-dependency-3.208.0.tgz",
      "integrity": "sha512-mUpbtijk14KntYy+w5FSvmsfj/Dqa8HylYeCKniKBKkQ1avjEz7CdizVoxyZrR3rldnLE3gItr0FEDRUhtfkAA==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/types": "3.208.0",
        "tslib": "^2.3.1"
      }
    },
    "node_modules/@aws-sdk/is-array-buffer": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/is-array-buffer/-/is-array-buffer-3.201.0.tgz",
      "integrity": "sha512-UPez5qLh3dNgt0DYnPD/q0mVJY84rA17QE26hVNOW3fAji8W2wrwrxdacWOxyXvlxWsVRcKmr+lay1MDqpAMfg==",
      "optional": true,
      "dependencies": {
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/middleware-content-length": {
      "version": "3.208.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-content-length/-/middleware-content-length-3.208.0.tgz",
      "integrity": "sha512-8bLh7lHtmKQQ2fk0fGiP7pcVJglB/dz7Q9OooxFYK+eybqxfIDDUgKphA8AFT5W34tJRh5nhT3QTJ6zrOTQM3w==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/protocol-http": "3.208.0",
        "@aws-sdk/types": "3.208.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/middleware-endpoint": {
      "version": "3.208.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-endpoint/-/middleware-endpoint-3.208.0.tgz",
      "integrity": "sha512-pVa/cyB6ronfTVAoKUUTFbAPslDPU43DWOKXY/bACC3ys1lFo1CWjz4dLSQARxEEW3iZ1yZTy0zoHXnNrw5CFQ==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/middleware-serde": "3.208.0",
        "@aws-sdk/protocol-http": "3.208.0",
        "@aws-sdk/signature-v4": "3.208.0",
        "@aws-sdk/types": "3.208.0",
        "@aws-sdk/url-parser": "3.208.0",
        "@aws-sdk/util-config-provider": "3.208.0",
        "@aws-sdk/util-middleware": "3.208.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/middleware-host-header": {
      "version": "3.208.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-host-header/-/middleware-host-header-3.208.0.tgz",
      "integrity": "sha512-3oyXK81TLWOZ2T/9Ltpbj/Z7R4QWSf+FCQRpY48ND2im/ALkgFRk/tmDTOshv+TQzW1q2lOSEeq4vK6yOCar7g==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/protocol-http": "3.208.0",
        "@aws-sdk/types": "3.208.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/middleware-logger": {
      "version": "3.208.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-logger/-/middleware-logger-3.208.0.tgz",
      "integrity": "sha512-mwSpuWruB8RrgUAAW7w/lvadnMDesl/bZ2IELBgJri+2rIqLGbAtygJBiG0Y3e8/IeOHuKuGkN1rFYZ4SKr7/A==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/types": "3.208.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/middleware-recursion-detection": {
      "version": "3.208.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-recursion-detection/-/middleware-recursion-detection-3.208.0.tgz",
      "integrity": "sha512-Dgpf5NEOYXvkQuGcbxvDovTh4HwO4ULJReGko67NJjgdZZyFS1fNykVPncxenRpsN9SJBigswYs3lwPVpqijzA==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/protocol-http": "3.208.0",
        "@aws-sdk/types": "3.208.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/middleware-retry": {
      "version": "3.209.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-retry/-/middleware-retry-3.209.0.tgz",
      "integrity": "sha512-PGHbpGw74HxmtqsMEH+xn2oC5/BPdHVyapB66x83n+sywt1ejTiarbQhNs70YzcSsTrJfbhbrFP1V9AzRmMaQA==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/protocol-http": "3.208.0",
        "@aws-sdk/service-error-classification": "3.208.0",
        "@aws-sdk/types": "3.208.0",
        "@aws-sdk/util-middleware": "3.208.0",
        "tslib": "^2.3.1",
        "uuid": "^8.3.2"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/middleware-sdk-sts": {
      "version": "3.208.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-sdk-sts/-/middleware-sdk-sts-3.208.0.tgz",
      "integrity": "sha512-lFVodZHYLF7puXgNZ1m5ycKbyCPp79nqI+pkRXl066ZtZWzCW8+JKCaLjF3jfXlnvg6foPDJdxUvt0VU5EddGg==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/middleware-signing": "3.208.0",
        "@aws-sdk/property-provider": "3.208.0",
        "@aws-sdk/protocol-http": "3.208.0",
        "@aws-sdk/signature-v4": "3.208.0",
        "@aws-sdk/types": "3.208.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/middleware-serde": {
      "version": "3.208.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-serde/-/middleware-serde-3.208.0.tgz",
      "integrity": "sha512-3h2yP6qyf/IhfdvyFeNX7w4BF37vOZvfUDBq+wb1QEc7DCAskoUKWtCCKJ9HDq3IJQp8hzqY82eawUir6flqlQ==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/types": "3.208.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/middleware-signing": {
      "version": "3.208.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-signing/-/middleware-signing-3.208.0.tgz",
      "integrity": "sha512-cMSWhg8xOrxZw04EYKEQQQ7RT+03rigS4KS3Uy6x/M+jFyoM+sRiY/7376sJCwlpvKH2xJIVpwPbKk/uz4j4DA==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/property-provider": "3.208.0",
        "@aws-sdk/protocol-http": "3.208.0",
        "@aws-sdk/signature-v4": "3.208.0",
        "@aws-sdk/types": "3.208.0",
        "@aws-sdk/util-middleware": "3.208.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/middleware-stack": {
      "version": "3.208.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-stack/-/middleware-stack-3.208.0.tgz",
      "integrity": "sha512-bvFPUa+RTB7PSRCUsO6bRlEtiEadrDES+dpNmInMNQ9kmbd4OhNOCb664hhtiglIIXX5cd8mSPEo+w/RV0kEEQ==",
      "optional": true,
      "dependencies": {
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/middleware-user-agent": {
      "version": "3.208.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/middleware-user-agent/-/middleware-user-agent-3.208.0.tgz",
      "integrity": "sha512-6RNf+TOZpiCy7xUcDSh8ji/x8ht1oAM+qIhm6hsEPLdI1cTvbPZrwowO9Y6L0J68V9OkEgLYiq77KKKYT7QQSw==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/protocol-http": "3.208.0",
        "@aws-sdk/types": "3.208.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/node-config-provider": {
      "version": "3.209.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/node-config-provider/-/node-config-provider-3.209.0.tgz",
      "integrity": "sha512-jNrUn8qTN9BIxHCcLTv2s2h8Riaz4kjwDhubVQNyI0WGZ+PYKATnZjA+Guzbnq2WMzZmwrMIE5GoOiVsPD8xYQ==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/property-provider": "3.208.0",
        "@aws-sdk/shared-ini-file-loader": "3.209.0",
        "@aws-sdk/types": "3.208.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/node-http-handler": {
      "version": "3.208.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/node-http-handler/-/node-http-handler-3.208.0.tgz",
      "integrity": "sha512-2t0b9Id7WekluqxQdPugAZhe/wdzW0L53rfMEfDS3R0INNSq1sEfddIfCzJrmfWDCrCOGIDNyxo/w7Ki3NclzQ==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/abort-controller": "3.208.0",
        "@aws-sdk/protocol-http": "3.208.0",
        "@aws-sdk/querystring-builder": "3.208.0",
        "@aws-sdk/types": "3.208.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/property-provider": {
      "version": "3.208.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/property-provider/-/property-provider-3.208.0.tgz",
      "integrity": "sha512-aUhfuwXjZ5TGzLhBstuAMmbnxHXeSGhzoIS8yy465ifgc95p6cHFZf+ZibgwgCMaGrKlTDCia2zwwpKQHN+4cw==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/types": "3.208.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/protocol-http": {
      "version": "3.208.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/protocol-http/-/protocol-http-3.208.0.tgz",
      "integrity": "sha512-Sr9dmaW0Z9X9s16NHZn94efLRpaqLyLqABFPgjqE8cYP6eLX/VrmZGNR62GFVxCiyEEpVxy4Ddk1YkbRwnuonA==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/types": "3.208.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/querystring-builder": {
      "version": "3.208.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/querystring-builder/-/querystring-builder-3.208.0.tgz",
      "integrity": "sha512-1Rpauh5hWlK++KjsHQjHcSN7yE05hj1FVb0HaeLrFIJB5rQYWXK7DpOUhmv5SOmU+q6cIM2kNCrSxH31+WglMw==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/types": "3.208.0",
        "@aws-sdk/util-uri-escape": "3.201.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/querystring-parser": {
      "version": "3.208.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/querystring-parser/-/querystring-parser-3.208.0.tgz",
      "integrity": "sha512-dVVLdP3il9bJX74/BNBjFn59XrEVBUZ4xSKYH6t7dgSz9uSu8DcT4pPzwaq+/94dVewCW3zq2jVA1iw1rK7JVQ==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/types": "3.208.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/service-error-classification": {
      "version": "3.208.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/service-error-classification/-/service-error-classification-3.208.0.tgz",
      "integrity": "sha512-ZZWV3AOTd8UDcfXCNoQ8v4sHaTgFxGaXWO0NHHgqFbVYr1d+8EXQiOy/v8JsY1jrfoXBWXptTOcioCTeM0xBpw==",
      "optional": true,
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/shared-ini-file-loader": {
      "version": "3.209.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/shared-ini-file-loader/-/shared-ini-file-loader-3.209.0.tgz",
      "integrity": "sha512-hji3B/q3zFuElaUQM/ZZUFbCFBsaVjpWATgiDTnSYP+MShWvvwm/WigeC2aCNos1bs/8HVizOy9cmvK63vLZbw==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/types": "3.208.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/signature-v4": {
      "version": "3.208.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/signature-v4/-/signature-v4-3.208.0.tgz",
      "integrity": "sha512-+c5A8RsN4Lk3TXFiQ3ZsW7sJ4zYPPmYQ55ITSfjock5hzgM1vW43Mgvjjq6foW5L7SNfdhLH+NrhpgFwSF/GeA==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/is-array-buffer": "3.201.0",
        "@aws-sdk/types": "3.208.0",
        "@aws-sdk/util-hex-encoding": "3.201.0",
        "@aws-sdk/util-middleware": "3.208.0",
        "@aws-sdk/util-uri-escape": "3.201.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/smithy-client": {
      "version": "3.209.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/smithy-client/-/smithy-client-3.209.0.tgz",
      "integrity": "sha512-+d9lPAFOu3hZdLfyzMurRU6xZ+eqwKbF6HY7mDL4hGafRb/uw28HBncSwyUk5s7MIND9+RnvY4F/MwBq9wznXg==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/middleware-stack": "3.208.0",
        "@aws-sdk/types": "3.208.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/token-providers": {
      "version": "3.211.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/token-providers/-/token-providers-3.211.0.tgz",
      "integrity": "sha512-dxdUT+JKCl9krmBQde1HeV6rwYP+ZTBkfx5vIa3PdfDI7XljRBf1XdE0mS18eSURfQA7v969Y5sJ6/rFyjT/QA==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/client-sso-oidc": "3.211.0",
        "@aws-sdk/property-provider": "3.208.0",
        "@aws-sdk/shared-ini-file-loader": "3.209.0",
        "@aws-sdk/types": "3.208.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/types": {
      "version": "3.208.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/types/-/types-3.208.0.tgz",
      "integrity": "sha512-5AuOPtY1Hdf4xoEo+voRijl3OnFm8IB+oITXl+SN2iASJv+XPnRNw/QVbIxfGeWgWhmK31F+XdjTYsjT2rx8Qw==",
      "optional": true,
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/url-parser": {
      "version": "3.208.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/url-parser/-/url-parser-3.208.0.tgz",
      "integrity": "sha512-zhU231xkZbUh68Z/TGNRW30MGTZQVigGuMiJU6eOtL2aOulnKqI1Yjs/QejrTtPWsqSihWvxOUZ2cVRPyeOvrA==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/querystring-parser": "3.208.0",
        "@aws-sdk/types": "3.208.0",
        "tslib": "^2.3.1"
      }
    },
    "node_modules/@aws-sdk/util-base64": {
      "version": "3.208.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-base64/-/util-base64-3.208.0.tgz",
      "integrity": "sha512-PQniZph5A6N7uuEOQi+1hnMz/FSOK/8kMFyFO+4DgA1dZ5pcKcn5wiFwHkcTb/BsgVqQa3Jx0VHNnvhlS8JyTg==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/util-buffer-from": "3.208.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/util-body-length-browser": {
      "version": "3.188.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-body-length-browser/-/util-body-length-browser-3.188.0.tgz",
      "integrity": "sha512-8VpnwFWXhnZ/iRSl9mTf+VKOX9wDE8QtN4bj9pBfxwf90H1X7E8T6NkiZD3k+HubYf2J94e7DbeHs7fuCPW5Qg==",
      "optional": true,
      "dependencies": {
        "tslib": "^2.3.1"
      }
    },
    "node_modules/@aws-sdk/util-body-length-node": {
      "version": "3.208.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-body-length-node/-/util-body-length-node-3.208.0.tgz",
      "integrity": "sha512-3zj50e5g7t/MQf53SsuuSf0hEELzMtD8RX8C76f12OSRo2Bca4FLLYHe0TZbxcfQHom8/hOaeZEyTyMogMglqg==",
      "optional": true,
      "dependencies": {
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/util-buffer-from": {
      "version": "3.208.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-buffer-from/-/util-buffer-from-3.208.0.tgz",
      "integrity": "sha512-7L0XUixNEFcLUGPeBF35enCvB9Xl+K6SQsmbrPk1P3mlV9mguWSDQqbOBwY1Ir0OVbD6H/ZOQU7hI/9RtRI0Zw==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/is-array-buffer": "3.201.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/util-config-provider": {
      "version": "3.208.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-config-provider/-/util-config-provider-3.208.0.tgz",
      "integrity": "sha512-DSRqwrERUsT34ug+anlMBIFooBEGwM8GejC7q00Y/9IPrQy50KnG5PW2NiTjuLKNi7pdEOlwTSEocJE15eDZIg==",
      "optional": true,
      "dependencies": {
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/util-defaults-mode-browser": {
      "version": "3.209.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-defaults-mode-browser/-/util-defaults-mode-browser-3.209.0.tgz",
      "integrity": "sha512-c+AlHqsgeDr9+87fS1wfnyVzEH3myt56GvNt0puzIv0QQqfpobMnfN8/Fy0cqMpf1eQNYY4a6lFlkComsXi5dw==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/property-provider": "3.208.0",
        "@aws-sdk/types": "3.208.0",
        "bowser": "^2.11.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">= 10.0.0"
      }
    },
    "node_modules/@aws-sdk/util-defaults-mode-node": {
      "version": "3.209.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-defaults-mode-node/-/util-defaults-mode-node-3.209.0.tgz",
      "integrity": "sha512-RljPVLog6EX052DQjx4XQ95n7ZiAbmn7Vd6YSn1x93U797umaC5CnrT7a/WusTQACtxBDFWcosRgO1ZGDXuRKQ==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/config-resolver": "3.209.0",
        "@aws-sdk/credential-provider-imds": "3.209.0",
        "@aws-sdk/node-config-provider": "3.209.0",
        "@aws-sdk/property-provider": "3.208.0",
        "@aws-sdk/types": "3.208.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">= 10.0.0"
      }
    },
    "node_modules/@aws-sdk/util-endpoints": {
      "version": "3.211.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-endpoints/-/util-endpoints-3.211.0.tgz",
      "integrity": "sha512-FY0h897WFltaUBF5aedLCBP2OlxN0aIqrInAa7aYGz3HsUTl97liHTii34bZrMJQHxmfcKBXAsjV1jJGc2orLw==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/types": "3.208.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/util-hex-encoding": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-hex-encoding/-/util-hex-encoding-3.201.0.tgz",
      "integrity": "sha512-7t1vR1pVxKx0motd3X9rI3m/xNp78p3sHtP5yo4NP4ARpxyJ0fokBomY8ScaH2D/B+U5o9ARxldJUdMqyBlJcA==",
      "optional": true,
      "dependencies": {
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/util-locate-window": {
      "version": "3.208.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-locate-window/-/util-locate-window-3.208.0.tgz",
      "integrity": "sha512-iua1A2+P7JJEDHVgvXrRJSvsnzG7stYSGQnBVphIUlemwl6nN5D+QrgbjECtrbxRz8asYFHSzhdhECqN+tFiBg==",
      "optional": true,
      "dependencies": {
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/util-middleware": {
      "version": "3.208.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-middleware/-/util-middleware-3.208.0.tgz",
      "integrity": "sha512-oXilrYpXwaPyMw1uNjL1wmR54zeFzIWx2ve1MSMheIYr26deFP3RpMfKkGXwiOvXzZ9pzTcA8shNLhg1frO/zg==",
      "optional": true,
      "dependencies": {
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/util-uri-escape": {
      "version": "3.201.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-uri-escape/-/util-uri-escape-3.201.0.tgz",
      "integrity": "sha512-TeTWbGx4LU2c5rx0obHeDFeO9HvwYwQtMh1yniBz00pQb6Qt6YVOETVQikRZ+XRQwEyCg/dA375UplIpiy54mA==",
      "optional": true,
      "dependencies": {
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/util-user-agent-browser": {
      "version": "3.208.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-user-agent-browser/-/util-user-agent-browser-3.208.0.tgz",
      "integrity": "sha512-Z5n9Kg2pBstzzQgRymQRgb4pM0bNPLGQejB3ZmCAphaxvuTBfu2E6KO55h5WwkFHUuh0i5u2wn1BI9R66S8CgQ==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/types": "3.208.0",
        "bowser": "^2.11.0",
        "tslib": "^2.3.1"
      }
    },
    "node_modules/@aws-sdk/util-user-agent-node": {
      "version": "3.209.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-user-agent-node/-/util-user-agent-node-3.209.0.tgz",
      "integrity": "sha512-lWfvnSX8rckMGaalrKZmBlPW7F0QOviG7XbLffwToN4HnYUyXcZXIE4EzOQzuOvDsOUlos/xLkUj6krdIAApcA==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/node-config-provider": "3.209.0",
        "@aws-sdk/types": "3.208.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      },
      "peerDependencies": {
        "aws-crt": ">=1.0.0"
      },
      "peerDependenciesMeta": {
        "aws-crt": {
          "optional": true
        }
      }
    },
    "node_modules/@aws-sdk/util-utf8-browser": {
      "version": "3.188.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-utf8-browser/-/util-utf8-browser-3.188.0.tgz",
      "integrity": "sha512-jt627x0+jE+Ydr9NwkFstg3cUvgWh56qdaqAMDsqgRlKD21md/6G226z/Qxl7lb1VEW2LlmCx43ai/37Qwcj2Q==",
      "optional": true,
      "dependencies": {
        "tslib": "^2.3.1"
      }
    },
    "node_modules/@aws-sdk/util-utf8-node": {
      "version": "3.208.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-utf8-node/-/util-utf8-node-3.208.0.tgz",
      "integrity": "sha512-jKY87Acv0yWBdFxx6bveagy5FYjz+dtV8IPT7ay1E2WPWH1czoIdMAkc8tSInK31T6CRnHWkLZ1qYwCbgRfERQ==",
      "optional": true,
      "dependencies": {
        "@aws-sdk/util-buffer-from": "3.208.0",
        "tslib": "^2.3.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@babel/code-frame": {
      "version": "7.18.6",
      "resolved": "https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.18.6.tgz",
      "integrity": "sha512-TDCmlK5eOvH+eH7cdAFlNXeVJqWIQ7gW9tY1GJIpUtFb6CmjVyq2VM3u71bOyR8CRihcCgMUYoDNyLXao3+70Q==",
      "dependencies": {
        "@babel/highlight": "^7.18.6"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/generator": {
      "version": "7.20.4",
      "resolved": "https://registry.npmjs.org/@babel/generator/-/generator-7.20.4.tgz",
      "integrity": "sha512-luCf7yk/cm7yab6CAW1aiFnmEfBJplb/JojV56MYEK7ziWfGmFlTfmL9Ehwfy4gFhbjBfWO1wj7/TuSbVNEEtA==",
      "dependencies": {
        "@babel/types": "^7.20.2",
        "@jridgewell/gen-mapping": "^0.3.2",
        "jsesc": "^2.5.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-annotate-as-pure": {
      "version": "7.18.6",
      "resolved": "https://registry.npmjs.org/@babel/helper-annotate-as-pure/-/helper-annotate-as-pure-7.18.6.tgz",
      "integrity": "sha512-duORpUiYrEpzKIop6iNbjnwKLAKnJ47csTyRACyEmWj0QdUrm5aqNJGHSSEQSUAvNW0ojX0dOmK9dZduvkfeXA==",
      "dependencies": {
        "@babel/types": "^7.18.6"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-environment-visitor": {
      "version": "7.18.9",
      "resolved": "https://registry.npmjs.org/@babel/helper-environment-visitor/-/helper-environment-visitor-7.18.9.tgz",
      "integrity": "sha512-3r/aACDJ3fhQ/EVgFy0hpj8oHyHpQc+LPtJoY9SzTThAsStm4Ptegq92vqKoE3vD706ZVFWITnMnxucw+S9Ipg==",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-function-name": {
      "version": "7.19.0",
      "resolved": "https://registry.npmjs.org/@babel/helper-function-name/-/helper-function-name-7.19.0.tgz",
      "integrity": "sha512-WAwHBINyrpqywkUH0nTnNgI5ina5TFn85HKS0pbPDfxFfhyR/aNQEn4hGi1P1JyT//I0t4OgXUlofzWILRvS5w==",
      "dependencies": {
        "@babel/template": "^7.18.10",
        "@babel/types": "^7.19.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-hoist-variables": {
      "version": "7.18.6",
      "resolved": "https://registry.npmjs.org/@babel/helper-hoist-variables/-/helper-hoist-variables-7.18.6.tgz",
      "integrity": "sha512-UlJQPkFqFULIcyW5sbzgbkxn2FKRgwWiRexcuaR8RNJRy8+LLveqPjwZV/bwrLZCN0eUHD/x8D0heK1ozuoo6Q==",
      "dependencies": {
        "@babel/types": "^7.18.6"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-module-imports": {
      "version": "7.18.6",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-imports/-/helper-module-imports-7.18.6.tgz",
      "integrity": "sha512-0NFvs3VkuSYbFi1x2Vd6tKrywq+z/cLeYC/RJNFrIX/30Bf5aiGYbtvGXolEktzJH8o5E5KJ3tT+nkxuuZFVlA==",
      "dependencies": {
        "@babel/types": "^7.18.6"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-split-export-declaration": {
      "version": "7.18.6",
      "resolved": "https://registry.npmjs.org/@babel/helper-split-export-declaration/-/helper-split-export-declaration-7.18.6.tgz",
      "integrity": "sha512-bde1etTx6ZyTmobl9LLMMQsaizFVZrquTEHOqKeQESMKo4PlObf+8+JA25ZsIpZhT/WEd39+vOdLXAFG/nELpA==",
      "dependencies": {
        "@babel/types": "^7.18.6"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-string-parser": {
      "version": "7.19.4",
      "resolved": "https://registry.npmjs.org/@babel/helper-string-parser/-/helper-string-parser-7.19.4.tgz",
      "integrity": "sha512-nHtDoQcuqFmwYNYPz3Rah5ph2p8PFeFCsZk9A/48dPc/rGocJ5J3hAAZ7pb76VWX3fZKu+uEr/FhH5jLx7umrw==",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-identifier": {
      "version": "7.19.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-identifier/-/helper-validator-identifier-7.19.1.tgz",
      "integrity": "sha512-awrNfaMtnHUr653GgGEs++LlAvW6w+DcPrOliSMXWCKo597CwL5Acf/wWdNkf/tfEQE3mjkeD1YOVZOUV/od1w==",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/highlight": {
      "version": "7.18.6",
      "resolved": "https://registry.npmjs.org/@babel/highlight/-/highlight-7.18.6.tgz",
      "integrity": "sha512-u7stbOuYjaPezCuLj29hNW1v64M2Md2qupEKP1fHc7WdOA3DgLh37suiSrZYY7haUB7iBeQZ9P1uiRF359do3g==",
      "dependencies": {
        "@babel/helper-validator-identifier": "^7.18.6",
        "chalk": "^2.0.0",
        "js-tokens": "^4.0.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/parser": {
      "version": "7.20.3",
      "resolved": "https://registry.npmjs.org/@babel/parser/-/parser-7.20.3.tgz",
      "integrity": "sha512-OP/s5a94frIPXwjzEcv5S/tpQfc6XhxYUnmWpgdqMWGgYCuErA3SzozaRAMQgSZWKeTJxht9aWAkUY+0UzvOFg==",
      "bin": {
        "parser": "bin/babel-parser.js"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@babel/runtime": {
      "version": "7.20.1",
      "resolved": "https://registry.npmjs.org/@babel/runtime/-/runtime-7.20.1.tgz",
      "integrity": "sha512-mrzLkl6U9YLF8qpqI7TB82PESyEGjm/0Ly91jG575eVxMMlb8fYfOXFZIJ8XfLrJZQbm7dlKry2bJmXBUEkdFg==",
      "dependencies": {
        "regenerator-runtime": "^0.13.10"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/template": {
      "version": "7.18.10",
      "resolved": "https://registry.npmjs.org/@babel/template/-/template-7.18.10.tgz",
      "integrity": "sha512-TI+rCtooWHr3QJ27kJxfjutghu44DLnasDMwpDqCXVTal9RLp3RSYNh4NdBrRP2cQAoG9A8juOQl6P6oZG4JxA==",
      "dependencies": {
        "@babel/code-frame": "^7.18.6",
        "@babel/parser": "^7.18.10",
        "@babel/types": "^7.18.10"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/traverse": {
      "version": "7.20.1",
      "resolved": "https://registry.npmjs.org/@babel/traverse/-/traverse-7.20.1.tgz",
      "integrity": "sha512-d3tN8fkVJwFLkHkBN479SOsw4DMZnz8cdbL/gvuDuzy3TS6Nfw80HuQqhw1pITbIruHyh7d1fMA47kWzmcUEGA==",
      "dependencies": {
        "@babel/code-frame": "^7.18.6",
        "@babel/generator": "^7.20.1",
        "@babel/helper-environment-visitor": "^7.18.9",
        "@babel/helper-function-name": "^7.19.0",
        "@babel/helper-hoist-variables": "^7.18.6",
        "@babel/helper-split-export-declaration": "^7.18.6",
        "@babel/parser": "^7.20.1",
        "@babel/types": "^7.20.0",
        "debug": "^4.1.0",
        "globals": "^11.1.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/types": {
      "version": "7.20.2",
      "resolved": "https://registry.npmjs.org/@babel/types/-/types-7.20.2.tgz",
      "integrity": "sha512-FnnvsNWgZCr232sqtXggapvlkk/tuwR/qhGzcmxI0GXLCjmPYQPzio2FbdlWuY6y1sHFfQKk+rRbUZ9VStQMog==",
      "dependencies": {
        "@babel/helper-string-parser": "^7.19.4",
        "@babel/helper-validator-identifier": "^7.19.1",
        "to-fast-properties": "^2.0.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@emotion/is-prop-valid": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/@emotion/is-prop-valid/-/is-prop-valid-1.2.0.tgz",
      "integrity": "sha512-3aDpDprjM0AwaxGE09bOPkNxHpBd+kA6jty3RnaEXdweX1DF1U3VQpPYb0g1IStAuK7SVQ1cy+bNBBKp4W3Fjg==",
      "dependencies": {
        "@emotion/memoize": "^0.8.0"
      }
    },
    "node_modules/@emotion/memoize": {
      "version": "0.8.0",
      "resolved": "https://registry.npmjs.org/@emotion/memoize/-/memoize-0.8.0.tgz",
      "integrity": "sha512-G/YwXTkv7Den9mXDO7AhLWkE3q+I92B+VqAE+dYG4NGPaHZGvt3G8Q0p9vmE+sq7rTGphUbAvmQ9YpbfMQGGlA=="
    },
    "node_modules/@emotion/stylis": {
      "version": "0.8.5",
      "resolved": "https://registry.npmjs.org/@emotion/stylis/-/stylis-0.8.5.tgz",
      "integrity": "sha512-h6KtPihKFn3T9fuIrwvXXUOwlx3rfUvfZIcP5a6rh8Y7zjE3O06hT5Ss4S/YI1AYhuZ1kjaE/5EaOOI2NqSylQ=="
    },
    "node_modules/@emotion/unitless": {
      "version": "0.7.5",
      "resolved": "https://registry.npmjs.org/@emotion/unitless/-/unitless-0.7.5.tgz",
      "integrity": "sha512-OWORNpfjMsSSUBVrRBVGECkhWcULOAJz9ZW8uK9qgxD+87M7jHRcvh/A96XXNhXTLmKcoYSQtBEX7lHMO7YRwg=="
    },
    "node_modules/@headlessui/react": {
      "version": "1.7.4",
      "resolved": "https://registry.npmjs.org/@headlessui/react/-/react-1.7.4.tgz",
      "integrity": "sha512-D8n5yGCF3WIkPsjEYeM8knn9jQ70bigGGb5aUvN6y4BGxcT3OcOQOKcM3zRGllRCZCFxCZyQvYJF6ZE7bQUOyQ==",
      "dependencies": {
        "client-only": "^0.0.1"
      },
      "engines": {
        "node": ">=10"
      },
      "peerDependencies": {
        "react": "^16 || ^17 || ^18",
        "react-dom": "^16 || ^17 || ^18"
      }
    },
    "node_modules/@heroicons/react": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/@heroicons/react/-/react-1.0.6.tgz",
      "integrity": "sha512-JJCXydOFWMDpCP4q13iEplA503MQO3xLoZiKum+955ZCtHINWnx26CUxVxxFQu/uLb4LW3ge15ZpzIkXKkJ8oQ==",
      "peerDependencies": {
        "react": ">= 16"
      }
    },
    "node_modules/@icons/material": {
      "version": "0.2.4",
      "resolved": "https://registry.npmjs.org/@icons/material/-/material-0.2.4.tgz",
      "integrity": "sha512-QPcGmICAPbGLGb6F/yNf/KzKqvFx8z5qx3D1yFqVAjoFmXK35EgyW+cJ57Te3CNsmzblwtzakLGFqHPqrfb4Tw==",
      "peerDependencies": {
        "react": "*"
      }
    },
    "node_modules/@jridgewell/gen-mapping": {
      "version": "0.3.2",
      "resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.2.tgz",
      "integrity": "sha512-mh65xKQAzI6iBcFzwv28KVWSmCkdRBWoOh+bYQGW3+6OZvbbN3TqMGo5hqYxQniRcH9F2VZIoJCm4pa3BPDK/A==",
      "dependencies": {
        "@jridgewell/set-array": "^1.0.1",
        "@jridgewell/sourcemap-codec": "^1.4.10",
        "@jridgewell/trace-mapping": "^0.3.9"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/resolve-uri": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.0.tgz",
      "integrity": "sha512-F2msla3tad+Mfht5cJq7LSXcdudKTWCVYUgw6pLFOOHSTtZlj6SWNYAp+AhuqLmWdBO2X5hPrLcu8cVP8fy28w==",
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/set-array": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/@jridgewell/set-array/-/set-array-1.1.2.tgz",
      "integrity": "sha512-xnkseuNADM0gt2bs+BvhO0p78Mk762YnZdsuzFV018NoG1Sj1SCQvpSqa7XUaTam5vAGasABV9qXASMKnFMwMw==",
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/sourcemap-codec": {
      "version": "1.4.14",
      "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.4.14.tgz",
      "integrity": "sha512-XPSJHWmi394fuUuzDnGz1wiKqWfo1yXecHQMRf2l6hztTO+nPru658AyDngaBe7isIxEkRsPR3FZh+s7iVa4Uw=="
    },
    "node_modules/@jridgewell/trace-mapping": {
      "version": "0.3.17",
      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.17.tgz",
      "integrity": "sha512-MCNzAp77qzKca9+W/+I0+sEpaUnZoeasnghNeVc41VZCEKaCH73Vq3BZZ/SzWIgrqE4H4ceI+p+b6C0mHf9T4g==",
      "dependencies": {
        "@jridgewell/resolve-uri": "3.1.0",
        "@jridgewell/sourcemap-codec": "1.4.14"
      }
    },
    "node_modules/@near-wallet-selector/core": {
      "version": "8.9.5",
      "resolved": "https://registry.npmjs.org/@near-wallet-selector/core/-/core-8.9.5.tgz",
      "integrity": "sha512-wJiCL8M7z6tkNMY5H4n63/SZCmlW0Z15H6R1biWgpRuMDlVjhQOzxrmQggb1jbK4nYkzXyARNKyPh2gcRUuS+w==",
      "dependencies": {
        "borsh": "0.7.0",
        "events": "3.3.0",
        "js-sha256": "0.9.0",
        "rxjs": "7.8.1"
      },
      "peerDependencies": {
        "near-api-js": "^1.0.0 || ^2.0.0"
      }
    },
    "node_modules/@near-wallet-selector/core/node_modules/borsh": {
      "version": "0.7.0",
      "resolved": "https://registry.npmjs.org/borsh/-/borsh-0.7.0.tgz",
      "integrity": "sha512-CLCsZGIBCFnPtkNnieW/a8wmreDmfUtjU2m9yHrzPXIlNbqVs0AQrSatSG6vdNYUqdc83tkQi2eHfF98ubzQLA==",
      "dependencies": {
        "bn.js": "^5.2.0",
        "bs58": "^4.0.0",
        "text-encoding-utf-8": "^1.0.2"
      }
    },
    "node_modules/@near-wallet-selector/meteor-wallet": {
      "version": "8.9.5",
      "resolved": "https://registry.npmjs.org/@near-wallet-selector/meteor-wallet/-/meteor-wallet-8.9.5.tgz",
      "integrity": "sha512-nO7xFS60nCpUM/MBGwUhA855FbQCs7kDhIeSFnDAnmsdcNPakREoIzp7s64WaZsD4tsZI4tVdvITnuqP+8X5wA==",
      "dependencies": {
        "@meteorwallet/sdk": "1.0.9",
        "@near-wallet-selector/core": "8.9.5"
      },
      "peerDependencies": {
        "near-api-js": "^1.0.0 || ^2.0.0"
      }
    },
    "node_modules/@near-wallet-selector/meteor-wallet/node_modules/@meteorwallet/sdk": {
      "version": "1.0.9",
      "resolved": "https://registry.npmjs.org/@meteorwallet/sdk/-/sdk-1.0.9.tgz",
      "integrity": "sha512-frJM+rwmx18MCVsfHn0O8oaJfB41BqaXW6cyhZ3EtMw3b87DUJyfSuJi9K0HQl7oGG0+wvMZOKRBVVcMiZzoDg==",
      "dependencies": {
        "borsh": "^0.7.0",
        "nanoid": "3.3.6",
        "query-string": "^7.1.3"
      },
      "peerDependencies": {
        "near-api-js": "^2.0.0"
      }
    },
    "node_modules/@near-wallet-selector/meteor-wallet/node_modules/borsh": {
      "version": "0.7.0",
      "resolved": "https://registry.npmjs.org/borsh/-/borsh-0.7.0.tgz",
      "integrity": "sha512-CLCsZGIBCFnPtkNnieW/a8wmreDmfUtjU2m9yHrzPXIlNbqVs0AQrSatSG6vdNYUqdc83tkQi2eHfF98ubzQLA==",
      "dependencies": {
        "bn.js": "^5.2.0",
        "bs58": "^4.0.0",
        "text-encoding-utf-8": "^1.0.2"
      }
    },
    "node_modules/@next/env": {
      "version": "12.2.6",
      "resolved": "https://registry.npmjs.org/@next/env/-/env-12.2.6.tgz",
      "integrity": "sha512-THKlM+l5a2JUKEC3/X+qZ74gACapD/OQ1dz9p2hi504FB3vdgUgh2lswkWvjLZssxBdHW0FJiWoUYf8z19vxuw=="
    },
    "node_modules/@next/swc-android-arm-eabi": {
      "version": "12.2.6",
      "resolved": "https://registry.npmjs.org/@next/swc-android-arm-eabi/-/swc-android-arm-eabi-12.2.6.tgz",
      "integrity": "sha512-dDo8Dxz/+v7gM7y0GwKunl4iMyoXDJV4xhH3zsO2yYReK+WL/KTJxRMzxtRJIiH9XFHHzdxnL935067r4hs1+A==",
      "cpu": [
        "arm"
      ],
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@next/swc-android-arm64": {
      "version": "12.2.6",
      "resolved": "https://registry.npmjs.org/@next/swc-android-arm64/-/swc-android-arm64-12.2.6.tgz",
      "integrity": "sha512-l547hA/ddEnqCEhJgZ7exnTAvLdw6kcDmO/C+S0C6Pg63doNO/OwOD9tNqX7yU8EhJLOYFG07Ei3hPMeOGiEDw==",
      "cpu": [
        "arm64"
      ],
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@next/swc-darwin-arm64": {
      "version": "12.2.6",
      "resolved": "https://registry.npmjs.org/@next/swc-darwin-arm64/-/swc-darwin-arm64-12.2.6.tgz",
      "integrity": "sha512-3HnlL7l/0S5YR4Wvi8BDWvqwbr0V/D034/pcaRlRK/bNWUA7PzjI6RuJ2HFdNVl9W/bUD6i5EoE7xQpRa8AFRA==",
      "cpu": [
        "arm64"
      ],
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@next/swc-darwin-x64": {
      "version": "12.2.6",
      "resolved": "https://registry.npmjs.org/@next/swc-darwin-x64/-/swc-darwin-x64-12.2.6.tgz",
      "integrity": "sha512-praySt/hINjb8vI2J67sNvHGTvTmAVZqw8XewTWL7krj4MoiX2lTY+SsIKdfWkkYaae0OqufoPeOqXk3R7xE3g==",
      "cpu": [
        "x64"
      ],
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@next/swc-freebsd-x64": {
      "version": "12.2.6",
      "resolved": "https://registry.npmjs.org/@next/swc-freebsd-x64/-/swc-freebsd-x64-12.2.6.tgz",
      "integrity": "sha512-p8TU7HCNjFEf7pLrKG0fAtuHKbIk8XWLCFvn0n54RvGAnQmwo0kzghU0I8RFzcl/XFbVhxg5oX9Npx/GBlPgcw==",
      "cpu": [
        "x64"
      ],
      "optional": true,
      "os": [
        "freebsd"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@next/swc-linux-arm-gnueabihf": {
      "version": "12.2.6",
      "resolved": "https://registry.npmjs.org/@next/swc-linux-arm-gnueabihf/-/swc-linux-arm-gnueabihf-12.2.6.tgz",
      "integrity": "sha512-l7yqnAVjYKECDytU6LBLqVYex473fp/e5xb/4wHIxSoAWH7OCfCH1UT+TdKXZBfeupBKlUhin7Rw//lWuq2qew==",
      "cpu": [
        "arm"
      ],
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@next/swc-linux-arm64-gnu": {
      "version": "12.2.6",
      "resolved": "https://registry.npmjs.org/@next/swc-linux-arm64-gnu/-/swc-linux-arm64-gnu-12.2.6.tgz",
      "integrity": "sha512-UDy+1ynNSW27KJBj7mZSOopc9uavPQP31ywwVhcOVtTKMdEzZ5z3ZKsPUTsuJuihN/J5BGQke5PIh9KwMSEvkA==",
      "cpu": [
        "arm64"
      ],
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@next/swc-linux-arm64-musl": {
      "version": "12.2.6",
      "resolved": "https://registry.npmjs.org/@next/swc-linux-arm64-musl/-/swc-linux-arm64-musl-12.2.6.tgz",
      "integrity": "sha512-6AVgmBi5gMZIdXh8GIrbW8Bf21wO993TZ5eeuIFXgKW7j30Xt+NnYxfq6ElilQnyrxdmhan8Efovx2pb5fWjMQ==",
      "cpu": [
        "arm64"
      ],
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@next/swc-linux-x64-gnu": {
      "version": "12.2.6",
      "resolved": "https://registry.npmjs.org/@next/swc-linux-x64-gnu/-/swc-linux-x64-gnu-12.2.6.tgz",
      "integrity": "sha512-JjixyBnwsdbdQedku8cWAeJ+E562TE3WsjYcFCaCrASa4hW8SrJsqm2fTe6Q0Tu5bCy4TwCNjo9Tjwgp88pCeg==",
      "cpu": [
        "x64"
      ],
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@next/swc-linux-x64-musl": {
      "version": "12.2.6",
      "resolved": "https://registry.npmjs.org/@next/swc-linux-x64-musl/-/swc-linux-x64-musl-12.2.6.tgz",
      "integrity": "sha512-EQGRzdJKIrWVsn2/B7k0BdJ7N4yOYhR+6pr7DuIGnzJRo4CIZRMKs7dOvvnxtgHky3Swu5vIFOPp+qSdYmck8A==",
      "cpu": [
        "x64"
      ],
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@next/swc-win32-arm64-msvc": {
      "version": "12.2.6",
      "resolved": "https://registry.npmjs.org/@next/swc-win32-arm64-msvc/-/swc-win32-arm64-msvc-12.2.6.tgz",
      "integrity": "sha512-87jDRqWPH5J7HrLKSmVjnC+FGAPWvUhQUe1p5dROawsDrCJtNFPuxmOifDid9saW99CDpcOxu3xZ7HWbp9XO7A==",
      "cpu": [
        "arm64"
      ],
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@next/swc-win32-ia32-msvc": {
      "version": "12.2.6",
      "resolved": "https://registry.npmjs.org/@next/swc-win32-ia32-msvc/-/swc-win32-ia32-msvc-12.2.6.tgz",
      "integrity": "sha512-IjAuEVybts1pguSHbPvk+KQEMnyyQnrhn7yaxphYfIh8wPhsxwKXJY+AN4WrxqA4gbO+sgpMxZW3bhqJmYKWGw==",
      "cpu": [
        "ia32"
      ],
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@next/swc-win32-x64-msvc": {
      "version": "12.2.6",
      "resolved": "https://registry.npmjs.org/@next/swc-win32-x64-msvc/-/swc-win32-x64-msvc-12.2.6.tgz",
      "integrity": "sha512-AQ1QbiJ13I+47wXRjJuOUmBp9tmEqEhhqFoaKrFvbj6v4ekZS5/2tlybaZxrVB5mF5Tqu/OcLp5fCqXrDxHbXw==",
      "cpu": [
        "x64"
      ],
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@nodelib/fs.scandir": {
      "version": "2.1.5",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.scandir/-/fs.scandir-2.1.5.tgz",
      "integrity": "sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==",
      "dependencies": {
        "@nodelib/fs.stat": "2.0.5",
        "run-parallel": "^1.1.9"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/@nodelib/fs.stat": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.stat/-/fs.stat-2.0.5.tgz",
      "integrity": "sha512-RkhPPp2zrqDAQA/2jNhnztcPAlv64XdhIp7a7454A5ovI7Bukxgt7MX7udwAu3zg1DcpPU0rz3VV1SeaqvY4+A==",
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/@nodelib/fs.walk": {
      "version": "1.2.8",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.walk/-/fs.walk-1.2.8.tgz",
      "integrity": "sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg==",
      "dependencies": {
        "@nodelib/fs.scandir": "2.1.5",
        "fastq": "^1.6.0"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/@swc/helpers": {
      "version": "0.4.3",
      "resolved": "https://registry.npmjs.org/@swc/helpers/-/helpers-0.4.3.tgz",
      "integrity": "sha512-6JrF+fdUK2zbGpJIlN7G3v966PQjyx/dPt1T9km2wj+EUBqgrxCk3uX4Kct16MIm9gGxfKRcfax2hVf5jvlTzA==",
      "dependencies": {
        "tslib": "^2.4.0"
      }
    },
    "node_modules/@tailwindcss/aspect-ratio": {
      "version": "0.2.2",
      "resolved": "https://registry.npmjs.org/@tailwindcss/aspect-ratio/-/aspect-ratio-0.2.2.tgz",
      "integrity": "sha512-yjvYH1qKQapYUVz0rCRAQ29KlKuiDsWJF/0d24lpTPWtTKBimcKWHiAMjZOILbnRd25PogILsbOyFFVOjFd6Ow==",
      "peerDependencies": {
        "tailwindcss": ">=2.0.0 || >=3.0.0-alpha.1"
      }
    },
    "node_modules/@tailwindcss/forms": {
      "version": "0.3.4",
      "resolved": "https://registry.npmjs.org/@tailwindcss/forms/-/forms-0.3.4.tgz",
      "integrity": "sha512-vlAoBifNJUkagB+PAdW4aHMe4pKmSLroH398UPgIogBFc91D2VlHUxe4pjxQhiJl0Nfw53sHSJSQBSTQBZP3vA==",
      "dev": true,
      "dependencies": {
        "mini-svg-data-uri": "^1.2.3"
      },
      "peerDependencies": {
        "tailwindcss": ">=2.0.0"
      }
    },
    "node_modules/@types/node": {
      "version": "18.11.9",
      "resolved": "https://registry.npmjs.org/@types/node/-/node-18.11.9.tgz",
      "integrity": "sha512-CRpX21/kGdzjOpFsZSkcrXMGIBWMGNIHXXBVFSH+ggkftxg+XYP20TESbh+zFvFj3EQOl5byk0HTRn1IL6hbqg=="
    },
    "node_modules/@types/parse-json": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/@types/parse-json/-/parse-json-4.0.0.tgz",
      "integrity": "sha512-//oorEZjL6sbPcKUaCdIGlIUeH26mgzimjBB77G6XRgnDl/L5wOnpyBGRe/Mmf5CVW3PwEBE1NjiMZ/ssFh4wA=="
    },
    "node_modules/@types/prop-types": {
      "version": "15.7.5",
      "resolved": "https://registry.npmjs.org/@types/prop-types/-/prop-types-15.7.5.tgz",
      "integrity": "sha512-JCB8C6SnDoQf0cNycqd/35A7MjcnK+ZTqE7judS6o7utxUCg6imJg3QK2qzHKszlTjcj2cn+NwMB2i96ubpj7w==",
      "dev": true
    },
    "node_modules/@types/react": {
      "version": "17.0.52",
      "resolved": "https://registry.npmjs.org/@types/react/-/react-17.0.52.tgz",
      "integrity": "sha512-vwk8QqVODi0VaZZpDXQCmEmiOuyjEFPY7Ttaw5vjM112LOq37yz1CDJGrRJwA1fYEq4Iitd5rnjd1yWAc/bT+A==",
      "dev": true,
      "dependencies": {
        "@types/prop-types": "*",
        "@types/scheduler": "*",
        "csstype": "^3.0.2"
      }
    },
    "node_modules/@types/scheduler": {
      "version": "0.16.2",
      "resolved": "https://registry.npmjs.org/@types/scheduler/-/scheduler-0.16.2.tgz",
      "integrity": "sha512-hppQEBDmlwhFAXKJX2KnWLYu5yMfi91yazPb2l+lbJiwW+wdo1gNeRA+3RgNSO39WYX2euey41KEwnqesU2Jew==",
      "dev": true
    },
    "node_modules/@types/webidl-conversions": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/@types/webidl-conversions/-/webidl-conversions-7.0.0.tgz",
      "integrity": "sha512-xTE1E+YF4aWPJJeUzaZI5DRntlkY3+BCVJi0axFptnjGmAoWxkyREIh/XMrfxVLejwQxMCfDXdICo0VLxThrog=="
    },
    "node_modules/@types/whatwg-url": {
      "version": "8.2.2",
      "resolved": "https://registry.npmjs.org/@types/whatwg-url/-/whatwg-url-8.2.2.tgz",
      "integrity": "sha512-FtQu10RWgn3D9U4aazdwIE2yzphmTJREDqNdODHrbrZmmMqI0vMheC/6NE/J1Yveaj8H+ela+YwWTjq5PGmuhA==",
      "dependencies": {
        "@types/node": "*",
        "@types/webidl-conversions": "*"
      }
    },
    "node_modules/abort-controller": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/abort-controller/-/abort-controller-3.0.0.tgz",
      "integrity": "sha512-h8lQ8tacZYnR3vNQTgibj+tODHI5/+l06Au2Pcriv/Gmet0eaj4TwWH41sO9wnHDiQsEj19q0drzdWdeAHtweg==",
      "dependencies": {
        "event-target-shim": "^5.0.0"
      },
      "engines": {
        "node": ">=6.5"
      }
    },
    "node_modules/acorn": {
      "version": "6.4.1",
      "resolved": "https://registry.npmjs.org/acorn/-/acorn-6.4.1.tgz",
      "integrity": "sha512-ZVA9k326Nwrj3Cj9jlh3wGFutC2ZornPNARZwsNYqQYgN0EsV2d53w5RN/co65Ohn4sUAUtb1rSUAOD6XN9idA==",
      "bin": {
        "acorn": "bin/acorn"
      },
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/acorn-node": {
      "version": "1.8.2",
      "resolved": "https://registry.npmjs.org/acorn-node/-/acorn-node-1.8.2.tgz",
      "integrity": "sha512-8mt+fslDufLYntIoPAaIMUe/lrbrehIiwmR3t2k9LljIzoigEPF27eLk2hy8zSGzmR/ogr7zbRKINMo1u0yh5A==",
      "dependencies": {
        "acorn": "^7.0.0",
        "acorn-walk": "^7.0.0",
        "xtend": "^4.0.2"
      }
    },
    "node_modules/acorn-node/node_modules/acorn": {
      "version": "7.4.1",
      "resolved": "https://registry.npmjs.org/acorn/-/acorn-7.4.1.tgz",
      "integrity": "sha512-nQyp0o1/mNdbTO1PO6kHkwSrmgZ0MT/jCCpNiwbUjGoRN4dlBhqJtoQuCnEOKzgTVwg0ZWiCoQy6SxMebQVh8A==",
      "bin": {
        "acorn": "bin/acorn"
      },
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/acorn-walk": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/acorn-walk/-/acorn-walk-7.2.0.tgz",
      "integrity": "sha512-OPdCF6GsMIP+Az+aWfAAOEt2/+iVDKE7oy6lJ098aoe59oAmK76qV6Gw60SbZ8jHuG2wH058GF4pLFbYamYrVA==",
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/ansi-styles": {
      "version": "3.2.1",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-3.2.1.tgz",
      "integrity": "sha512-VT0ZI6kZRdTh8YyJw3SMbYm/u+NqfsAxEpWO0Pf9sq8/e94WxxOpPKx9FR1FlyCtOVDNOQ+8ntlqFxiRc+r5qA==",
      "dependencies": {
        "color-convert": "^1.9.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/anymatch": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/anymatch/-/anymatch-3.1.2.tgz",
      "integrity": "sha512-P43ePfOAIupkguHUycrc4qJ9kz8ZiuOUijaETwX7THt0Y/GNK7v0aa8rY816xWjZ7rJdA5XdMcpVFTKMq+RvWg==",
      "dependencies": {
        "normalize-path": "^3.0.0",
        "picomatch": "^2.0.4"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/arg": {
      "version": "5.0.2",
      "resolved": "https://registry.npmjs.org/arg/-/arg-5.0.2.tgz",
      "integrity": "sha512-PYjyFOLKQ9y57JvQ6QLo8dAgNqswh8M1RMJYdQduT6xbWSgK36P/Z/v+p888pM69jMMfS8Xd8F6I1kQ/I9HUGg=="
    },
    "node_modules/autoprefixer": {
      "version": "10.4.13",
      "resolved": "https://registry.npmjs.org/autoprefixer/-/autoprefixer-10.4.13.tgz",
      "integrity": "sha512-49vKpMqcZYsJjwotvt4+h/BCjJVnhGwcLpDt5xkcaOG3eLrG/HUYLagrihYsQ+qrIBgIzX1Rw7a6L8I/ZA1Atg==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/postcss/"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/autoprefixer"
        }
      ],
      "dependencies": {
        "browserslist": "^4.21.4",
        "caniuse-lite": "^1.0.30001426",
        "fraction.js": "^4.2.0",
        "normalize-range": "^0.1.2",
        "picocolors": "^1.0.0",
        "postcss-value-parser": "^4.2.0"
      },
      "bin": {
        "autoprefixer": "bin/autoprefixer"
      },
      "engines": {
        "node": "^10 || ^12 || >=14"
      },
      "peerDependencies": {
        "postcss": "^8.1.0"
      }
    },
    "node_modules/axios": {
      "version": "0.21.4",
      "resolved": "https://registry.npmjs.org/axios/-/axios-0.21.4.tgz",
      "integrity": "sha512-ut5vewkiu8jjGBdqpM44XxjuCjq9LAKeHVmoVfHVzy8eHgxxq8SbAVQNovDA8mVi05kP0Ea/n/UzcSHcTJQfNg==",
      "dependencies": {
        "follow-redirects": "^1.14.0"
      }
    },
    "node_modules/b58": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/b58/-/b58-4.0.3.tgz",
      "integrity": "sha512-VDtdiomm0ywbL8YzgevOZ9pcx6LuOZ3d9qYTPDcYUPf7dRYNA8wvK6epYy0FKMWIM5uaDwd3kWt1x+1S9scB1Q==",
      "dependencies": {
        "base-x": "^3.0.2"
      }
    },
    "node_modules/babel-plugin-macros": {
      "version": "2.8.0",
      "resolved": "https://registry.npmjs.org/babel-plugin-macros/-/babel-plugin-macros-2.8.0.tgz",
      "integrity": "sha512-SEP5kJpfGYqYKpBrj5XU3ahw5p5GOHJ0U5ssOSQ/WBVdwkD2Dzlce95exQTs3jOVWPPKLBN2rlEWkCK7dSmLvg==",
      "dependencies": {
        "@babel/runtime": "^7.7.2",
        "cosmiconfig": "^6.0.0",
        "resolve": "^1.12.0"
      }
    },
    "node_modules/babel-plugin-macros/node_modules/cosmiconfig": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/cosmiconfig/-/cosmiconfig-6.0.0.tgz",
      "integrity": "sha512-xb3ZL6+L8b9JLLCx3ZdoZy4+2ECphCMo2PwqgP1tlfVq6M6YReyzBJtvWWtbDSpNr9hn96pkCiZqUcFEc+54Qg==",
      "dependencies": {
        "@types/parse-json": "^4.0.0",
        "import-fresh": "^3.1.0",
        "parse-json": "^5.0.0",
        "path-type": "^4.0.0",
        "yaml": "^1.7.2"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/babel-plugin-styled-components": {
      "version": "2.0.7",
      "resolved": "https://registry.npmjs.org/babel-plugin-styled-components/-/babel-plugin-styled-components-2.0.7.tgz",
      "integrity": "sha512-i7YhvPgVqRKfoQ66toiZ06jPNA3p6ierpfUuEWxNF+fV27Uv5gxBkf8KZLHUCc1nFA9j6+80pYoIpqCeyW3/bA==",
      "dependencies": {
        "@babel/helper-annotate-as-pure": "^7.16.0",
        "@babel/helper-module-imports": "^7.16.0",
        "babel-plugin-syntax-jsx": "^6.18.0",
        "lodash": "^4.17.11",
        "picomatch": "^2.3.0"
      },
      "peerDependencies": {
        "styled-components": ">= 2"
      }
    },
    "node_modules/babel-plugin-syntax-jsx": {
      "version": "6.18.0",
      "resolved": "https://registry.npmjs.org/babel-plugin-syntax-jsx/-/babel-plugin-syntax-jsx-6.18.0.tgz",
      "integrity": "sha512-qrPaCSo9c8RHNRHIotaufGbuOBN8rtdC4QrrFFc43vyWCCz7Kl7GL1PGaXtMGQZUXrkCjNEgxDfmAuAabr/rlw=="
    },
    "node_modules/balanced-match": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
      "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw=="
    },
    "node_modules/base-x": {
      "version": "3.0.9",
      "resolved": "https://registry.npmjs.org/base-x/-/base-x-3.0.9.tgz",
      "integrity": "sha512-H7JU6iBHTal1gp56aKoaa//YUxEaAOUiydvrV/pILqIHXTtqxSkATOnDA2u+jZ/61sD+L/412+7kzXRtWukhpQ==",
      "dependencies": {
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/base64-js": {
      "version": "1.5.1",
      "resolved": "https://registry.npmjs.org/base64-js/-/base64-js-1.5.1.tgz",
      "integrity": "sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ]
    },
    "node_modules/binary-extensions": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/binary-extensions/-/binary-extensions-2.2.0.tgz",
      "integrity": "sha512-jDctJ/IVQbZoJykoeHbhXpOlNBqGNcwXJKJog42E5HDPUwQTSdjCHdihjj0DlnheQ7blbT6dHOafNAiS8ooQKA==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/bn.js": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/bn.js/-/bn.js-5.2.1.tgz",
      "integrity": "sha512-eXRvHzWyYPBuB4NBy0cmYQjGitUrtqwbvlzP3G6VFnNRbsZQIxQ10PbKKHt8gZ/HW/D/747aDl+QkDqg3KQLMQ=="
    },
    "node_modules/borsh": {
      "version": "0.6.0",
      "resolved": "https://registry.npmjs.org/borsh/-/borsh-0.6.0.tgz",
      "integrity": "sha512-sl5k89ViqsThXQpYa9XDtz1sBl3l1lI313cFUY1HKr+wvMILnb+58xpkqTNrYbelh99dY7K8usxoCusQmqix9Q==",
      "dependencies": {
        "bn.js": "^5.2.0",
        "bs58": "^4.0.0",
        "text-encoding-utf-8": "^1.0.2"
      }
    },
    "node_modules/bowser": {
      "version": "2.11.0",
      "resolved": "https://registry.npmjs.org/bowser/-/bowser-2.11.0.tgz",
      "integrity": "sha512-AlcaJBi/pqqJBIQ8U9Mcpc9i8Aqxn88Skv5d+xBX006BY5u8N3mGLHa5Lgppa7L/HfwgwLgZ6NYs+Ag6uUmJRA==",
      "optional": true
    },
    "node_modules/brace-expansion": {
      "version": "1.1.11",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
      "dependencies": {
        "balanced-match": "^1.0.0",
        "concat-map": "0.0.1"
      }
    },
    "node_modules/braces": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/braces/-/braces-3.0.2.tgz",
      "integrity": "sha512-b8um+L1RzM3WDSzvhm6gIz1yfTbBt6YTlcEKAvsmqCZZFw46z626lVj9j1yEPW33H5H+lBQpZMP1k8l+78Ha0A==",
      "dependencies": {
        "fill-range": "^7.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/browserslist": {
      "version": "4.21.4",
      "resolved": "https://registry.npmjs.org/browserslist/-/browserslist-4.21.4.tgz",
      "integrity": "sha512-CBHJJdDmgjl3daYjN5Cp5kbTf1mUhZoS+beLklHIvkOWscs83YAhLlF3Wsh/lciQYAcbBJgTOD44VtG31ZM4Hw==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        }
      ],
      "dependencies": {
        "caniuse-lite": "^1.0.30001400",
        "electron-to-chromium": "^1.4.251",
        "node-releases": "^2.0.6",
        "update-browserslist-db": "^1.0.9"
      },
      "bin": {
        "browserslist": "cli.js"
      },
      "engines": {
        "node": "^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7"
      }
    },
    "node_modules/bs58": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/bs58/-/bs58-4.0.1.tgz",
      "integrity": "sha512-Ok3Wdf5vOIlBrgCvTq96gBkJw+JUEzdBgyaza5HLtPm7yTHkjRy8+JzNyHF7BHa0bNWOQIp3m5YF0nnFcOIKLw==",
      "dependencies": {
        "base-x": "^3.0.2"
      }
    },
    "node_modules/bson": {
      "version": "4.7.0",
      "resolved": "https://registry.npmjs.org/bson/-/bson-4.7.0.tgz",
      "integrity": "sha512-VrlEE4vuiO1WTpfof4VmaVolCVYkYTgB9iWgYNOrVlnifpME/06fhFRmONgBhClD5pFC1t9ZWqFUQEQAzY43bA==",
      "dependencies": {
        "buffer": "^5.6.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/buffer": {
      "version": "5.7.1",
      "resolved": "https://registry.npmjs.org/buffer/-/buffer-5.7.1.tgz",
      "integrity": "sha512-EHcyIPBQ4BSGlvjB16k5KgAJ27CIsHY/2JBmCRReo48y9rQ3MaUzWX3KVlBa4U7MyX02HdVj0K7C3WaB3ju7FQ==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "dependencies": {
        "base64-js": "^1.3.1",
        "ieee754": "^1.1.13"
      }
    },
    "node_modules/buffer-writer": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/buffer-writer/-/buffer-writer-2.0.0.tgz",
      "integrity": "sha512-a7ZpuTZU1TRtnwyCNW3I5dc0wWNC3VR9S++Ewyk2HHZdrO3CQJqSpd+95Us590V6AL7JqUAH2IwZ/398PmNFgw==",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/bytes": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/bytes/-/bytes-3.1.2.tgz",
      "integrity": "sha512-/Nf7TyzTx6S3yRJObOAV7956r8cr2+Oj8AC5dt8wSP3BQAoeX58NoHyCU8P8zGkNXStjTSi6fzO6F0pBdcYbEg==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/callsites": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/callsites/-/callsites-3.1.0.tgz",
      "integrity": "sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/camelcase-css": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/camelcase-css/-/camelcase-css-2.0.1.tgz",
      "integrity": "sha512-QOSvevhslijgYwRx6Rv7zKdMF8lbRmx+uQGx2+vDc+KI/eBnsy9kit5aj23AgGu3pa4t9AgwbnXWqS+iOY+2aA==",
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/camelize": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/camelize/-/camelize-1.0.1.tgz",
      "integrity": "sha512-dU+Tx2fsypxTgtLoE36npi3UqcjSSMNYfkqgmoEhtZrraP5VWq0K7FkWVTYa8eMPtnU/G2txVsfdCJTn9uzpuQ==",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/caniuse-lite": {
      "version": "1.0.30001431",
      "resolved": "https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001431.tgz",
      "integrity": "sha512-zBUoFU0ZcxpvSt9IU66dXVT/3ctO1cy4y9cscs1szkPlcWb6pasYM144GqrUygUbT+k7cmUCW61cvskjcv0enQ==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/caniuse-lite"
        }
      ]
    },
    "node_modules/capability": {
      "version": "0.2.5",
      "resolved": "https://registry.npmjs.org/capability/-/capability-0.2.5.tgz",
      "integrity": "sha512-rsJZYVCgXd08sPqwmaIqjAd5SUTfonV0z/gDJ8D6cN8wQphky1kkAYEqQ+hmDxTw7UihvBfjUVUSY+DBEe44jg=="
    },
    "node_modules/chalk": {
      "version": "2.4.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-2.4.2.tgz",
      "integrity": "sha512-Mti+f9lpJNcwF4tWV8/OrTTtF1gZi+f8FqlyAdouralcFWFQWF2+NgCHShjkCb+IFBLq9buZwE1xckQU4peSuQ==",
      "dependencies": {
        "ansi-styles": "^3.2.1",
        "escape-string-regexp": "^1.0.5",
        "supports-color": "^5.3.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/chart.js": {
      "version": "3.9.1",
      "resolved": "https://registry.npmjs.org/chart.js/-/chart.js-3.9.1.tgz",
      "integrity": "sha512-Ro2JbLmvg83gXF5F4sniaQ+lTbSv18E+TIf2cOeiH1Iqd2PGFOtem+DUufMZsCJwFE7ywPOpfXFBwRTGq7dh6w=="
    },
    "node_modules/chokidar": {
      "version": "3.5.3",
      "resolved": "https://registry.npmjs.org/chokidar/-/chokidar-3.5.3.tgz",
      "integrity": "sha512-Dr3sfKRP6oTcjf2JmUmFJfeVMvXBdegxB0iVQ5eb2V10uFJUCAS8OByZdVAyVb8xXNz3GjjTgj9kLWsZTqE6kw==",
      "funding": [
        {
          "type": "individual",
          "url": "https://paulmillr.com/funding/"
        }
      ],
      "dependencies": {
        "anymatch": "~3.1.2",
        "braces": "~3.0.2",
        "glob-parent": "~5.1.2",
        "is-binary-path": "~2.1.0",
        "is-glob": "~4.0.1",
        "normalize-path": "~3.0.0",
        "readdirp": "~3.6.0"
      },
      "engines": {
        "node": ">= 8.10.0"
      },
      "optionalDependencies": {
        "fsevents": "~2.3.2"
      }
    },
    "node_modules/chokidar/node_modules/glob-parent": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
      "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
      "dependencies": {
        "is-glob": "^4.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/classnames": {
      "version": "2.3.2",
      "resolved": "https://registry.npmjs.org/classnames/-/classnames-2.3.2.tgz",
      "integrity": "sha512-CSbhY4cFEJRe6/GQzIk5qXZ4Jeg5pcsP7b5peFSDpffpe1cqjASH/n9UTjBwOp6XpMSTwQ8Za2K5V02ueA7Tmw=="
    },
    "node_modules/clean-set": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/clean-set/-/clean-set-1.1.2.tgz",
      "integrity": "sha512-cA8uCj0qSoG9e0kevyOWXwPaELRPVg5Pxp6WskLMwerx257Zfnh8Nl0JBH59d7wQzij2CK7qEfJQK3RjuKKIug=="
    },
    "node_modules/client-only": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/client-only/-/client-only-0.0.1.tgz",
      "integrity": "sha512-IV3Ou0jSMzZrd3pZ48nLkT9DA7Ag1pnPzaiQhpW7c3RbcqqzvzzVu+L8gfqMp/8IM2MQtSiqaCxrrcfu8I8rMA=="
    },
    "node_modules/clsx": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/clsx/-/clsx-1.2.1.tgz",
      "integrity": "sha512-EcR6r5a8bj6pu3ycsa/E/cKVGuTgZJZdsyUYHOksG/UHIiKfjxzRxYJpyVBwYaQeOvghal9fcc4PidlgzugAQg==",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/color": {
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/color/-/color-4.2.3.tgz",
      "integrity": "sha512-1rXeuUUiGGrykh+CeBdu5Ie7OJwinCgQY0bc7GCRxy5xVHy+moaqkpL/jqQq0MtQOeYcrqEz4abc5f0KtU7W4A==",
      "dependencies": {
        "color-convert": "^2.0.1",
        "color-string": "^1.9.0"
      },
      "engines": {
        "node": ">=12.5.0"
      }
    },
    "node_modules/color-convert": {
      "version": "1.9.3",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-1.9.3.tgz",
      "integrity": "sha512-QfAUtd+vFdAtFQcC8CCyYt1fYWxSqAiK2cSD6zDB8N3cpsEBAvRxp9zOGg6G/SHHJYAT88/az/IuDGALsNVbGg==",
      "dependencies": {
        "color-name": "1.1.3"
      }
    },
    "node_modules/color-name": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.3.tgz",
      "integrity": "sha512-72fSenhMw2HZMTVHeCA9KCmpEIbzWiQsjN+BHcBbS9vr1mtt+vJjPdksIBNUmKAW8TFUDPJK5SUU3QhE9NEXDw=="
    },
    "node_modules/color-string": {
      "version": "1.9.1",
      "resolved": "https://registry.npmjs.org/color-string/-/color-string-1.9.1.tgz",
      "integrity": "sha512-shrVawQFojnZv6xM40anx4CkoDP+fZsw/ZerEMsW/pyzsRbElpsL/DBVW7q3ExxwusdNXI3lXpuhEZkzs8p5Eg==",
      "dependencies": {
        "color-name": "^1.0.0",
        "simple-swizzle": "^0.2.2"
      }
    },
    "node_modules/color/node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/color/node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA=="
    },
    "node_modules/commander": {
      "version": "8.3.0",
      "resolved": "https://registry.npmjs.org/commander/-/commander-8.3.0.tgz",
      "integrity": "sha512-OkTL9umf+He2DZkUq8f8J9of7yL6RJKI24dVITBmNfZBmri9zYZQrKkuXiKhyfPSu8tUhnVBB1iKXevvnlR4Ww==",
      "engines": {
        "node": ">= 12"
      }
    },
    "node_modules/concat-map": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
      "integrity": "sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg=="
    },
    "node_modules/cosmiconfig": {
      "version": "7.1.0",
      "resolved": "https://registry.npmjs.org/cosmiconfig/-/cosmiconfig-7.1.0.tgz",
      "integrity": "sha512-AdmX6xUzdNASswsFtmwSt7Vj8po9IuqXm0UXz7QKPuEUmPB4XyjGfaAr2PSuELMwkRMVH1EpIkX5bTZGRB3eCA==",
      "dependencies": {
        "@types/parse-json": "^4.0.0",
        "import-fresh": "^3.2.1",
        "parse-json": "^5.0.0",
        "path-type": "^4.0.0",
        "yaml": "^1.10.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/css-color-keywords": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/css-color-keywords/-/css-color-keywords-1.0.0.tgz",
      "integrity": "sha512-FyyrDHZKEjXDpNJYvVsV960FiqQyXc/LlYmsxl2BcdMb2WPx0OGRVgTg55rPSyLSNMqP52R9r8geSp7apN3Ofg==",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/css-color-names": {
      "version": "0.0.4",
      "resolved": "https://registry.npmjs.org/css-color-names/-/css-color-names-0.0.4.tgz",
      "integrity": "sha512-zj5D7X1U2h2zsXOAM8EyUREBnnts6H+Jm+d1M2DbiQQcUtnqgQsMrdo8JW9R80YFUmIdBZeMu5wvYM7hcgWP/Q==",
      "engines": {
        "node": "*"
      }
    },
    "node_modules/css-to-react-native": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/css-to-react-native/-/css-to-react-native-3.0.0.tgz",
      "integrity": "sha512-Ro1yETZA813eoyUp2GDBhG2j+YggidUmzO1/v9eYBKR2EHVEniE2MI/NqpTQ954BMpTPZFsGNPm46qFB9dpaPQ==",
      "dependencies": {
        "camelize": "^1.0.0",
        "css-color-keywords": "^1.0.0",
        "postcss-value-parser": "^4.0.2"
      }
    },
    "node_modules/css-unit-converter": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/css-unit-converter/-/css-unit-converter-1.1.2.tgz",
      "integrity": "sha512-IiJwMC8rdZE0+xiEZHeru6YoONC4rfPMqGm2W85jMIbkFvv5nFTwJVFHam2eFrN6txmoUYFAFXiv8ICVeTO0MA=="
    },
    "node_modules/cssesc": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/cssesc/-/cssesc-3.0.0.tgz",
      "integrity": "sha512-/Tb/JcjK111nNScGob5MNtsntNM1aCNUDipB/TkwZFhyDrrE47SOx/18wF2bbjgc3ZzCSKW1T5nt5EbFoAz/Vg==",
      "bin": {
        "cssesc": "bin/cssesc"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/csstype": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/csstype/-/csstype-3.1.1.tgz",
      "integrity": "sha512-DJR/VvkAvSZW9bTouZue2sSxDwdTN92uHjqeKVm+0dAqdfNykRzQ95tay8aXMBAAPpUiq4Qcug2L7neoRh2Egw=="
    },
    "node_modules/debug": {
      "version": "4.3.4",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
      "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
      "dependencies": {
        "ms": "2.1.2"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/decode-uri-component": {
      "version": "0.2.2",
      "resolved": "https://registry.npmjs.org/decode-uri-component/-/decode-uri-component-0.2.2.tgz",
      "integrity": "sha512-FqUYQ+8o158GyGTrMFJms9qh3CqTKvAqgqsTnkLI8sKu0028orqBhxNMFkFen0zGyg6epACD32pjVk58ngIErQ==",
      "engines": {
        "node": ">=0.10"
      }
    },
    "node_modules/defined": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/defined/-/defined-1.0.1.tgz",
      "integrity": "sha512-hsBd2qSVCRE+5PmNdHt1uzyrFu5d3RwmFDKzyNZMFq/EwDNJF7Ee5+D5oEKF0hU6LhtoUF1macFvOe4AskQC1Q==",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/denque": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/denque/-/denque-2.1.0.tgz",
      "integrity": "sha512-HVQE3AAb/pxF8fQAoiqpvg9i3evqug3hoiwakOyZAwJm+6vZehbkYXZ0l4JxS+I3QxM97v5aaRNhj8v5oBhekw==",
      "engines": {
        "node": ">=0.10"
      }
    },
    "node_modules/depd": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/depd/-/depd-2.0.0.tgz",
      "integrity": "sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/detective": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/detective/-/detective-5.2.1.tgz",
      "integrity": "sha512-v9XE1zRnz1wRtgurGu0Bs8uHKFSTdteYZNbIPFVhUZ39L/S79ppMpdmVOZAnoz1jfEFodc48n6MX483Xo3t1yw==",
      "dependencies": {
        "acorn-node": "^1.8.2",
        "defined": "^1.0.0",
        "minimist": "^1.2.6"
      },
      "bin": {
        "detective": "bin/detective.js"
      },
      "engines": {
        "node": ">=0.8.0"
      }
    },
    "node_modules/didyoumean": {
      "version": "1.2.2",
      "resolved": "https://registry.npmjs.org/didyoumean/-/didyoumean-1.2.2.tgz",
      "integrity": "sha512-gxtyfqMg7GKyhQmb056K7M3xszy/myH8w+B4RT+QXBQsvAOdc3XymqDDPHx1BgPgsdAA5SIifona89YtRATDzw=="
    },
    "node_modules/dlv": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/dlv/-/dlv-1.1.3.tgz",
      "integrity": "sha512-+HlytyjlPKnIG8XuRG8WvmBP8xs8P71y+SKKS6ZXWoEgLuePxtDoUEiH7WkdePWrQ5JBpE6aoVqfZfJUQkjXwA=="
    },
    "node_modules/dom-helpers": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/dom-helpers/-/dom-helpers-5.2.1.tgz",
      "integrity": "sha512-nRCa7CK3VTrM2NmGkIy4cbK7IZlgBE/PYMn55rrXefr5xXDP0LdtfPnblFDoVdcAfslJ7or6iqAUnx0CCGIWQA==",
      "dependencies": {
        "@babel/runtime": "^7.8.7",
        "csstype": "^3.0.2"
      }
    },
    "node_modules/dset": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/dset/-/dset-2.1.0.tgz",
      "integrity": "sha512-hlQYwNEdW7Qf8zxysy+yN1E8C/SxRst3Z9n+IvXOR35D9bPVwNHhnL8ZBeoZjvinuGrlvGg6pAMDwhmjqFDgjA==",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/electron-to-chromium": {
      "version": "1.4.284",
      "resolved": "https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.4.284.tgz",
      "integrity": "sha512-M8WEXFuKXMYMVr45fo8mq0wUrrJHheiKZf6BArTKk9ZBYCKJEOU5H8cdWgDT+qCVZf7Na4lVUaZsA+h6uA9+PA=="
    },
    "node_modules/error-ex": {
      "version": "1.3.2",
      "resolved": "https://registry.npmjs.org/error-ex/-/error-ex-1.3.2.tgz",
      "integrity": "sha512-7dFHNmqeFSEt2ZBsCriorKnn3Z2pj+fd9kmI6QoWw4//DL+icEBfc0U7qJCisqrTsKTjw4fNFy2pW9OqStD84g==",
      "dependencies": {
        "is-arrayish": "^0.2.1"
      }
    },
    "node_modules/error-polyfill": {
      "version": "0.1.3",
      "resolved": "https://registry.npmjs.org/error-polyfill/-/error-polyfill-0.1.3.tgz",
      "integrity": "sha512-XHJk60ufE+TG/ydwp4lilOog549iiQF2OAPhkk9DdiYWMrltz5yhDz/xnKuenNwP7gy3dsibssO5QpVhkrSzzg==",
      "dependencies": {
        "capability": "^0.2.5",
        "o3": "^1.0.3",
        "u3": "^0.1.1"
      }
    },
    "node_modules/escalade": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.1.1.tgz",
      "integrity": "sha512-k0er2gUkLf8O0zKJiAhmkTnJlTvINGv7ygDNPbeIsX/TJjGJZHuh9B2UxbsaEkmlEo9MfhrSzmhIlhRlI2GXnw==",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/escape-string-regexp": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-1.0.5.tgz",
      "integrity": "sha512-vbRorB5FUQWvla16U8R/qgaFIya2qGzwDrNmCZuYKrbdSUMG6I1ZCGQRefkRVhuOkIGVne7BQ35DSfo1qvJqFg==",
      "engines": {
        "node": ">=0.8.0"
      }
    },
    "node_modules/event-target-shim": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/event-target-shim/-/event-target-shim-5.0.1.tgz",
      "integrity": "sha512-i/2XbnSz/uxRCU6+NdVJgKWDTM427+MqYbkQzD321DuCQJUqOuJKIA0IM2+W2xtYHdKOmZ4dR6fExsd4SXL+WQ==",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/events": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/events/-/events-3.3.0.tgz",
      "integrity": "sha512-mQw+2fkQbALzQ7V0MY0IqdnXNOeTtP4r0lN9z7AAawCXgqea7bDii20AYrIBrFd/Hx0M2Ocz6S111CaFkUcb0Q==",
      "engines": {
        "node": ">=0.8.x"
      }
    },
    "node_modules/fast-glob": {
      "version": "3.2.12",
      "resolved": "https://registry.npmjs.org/fast-glob/-/fast-glob-3.2.12.tgz",
      "integrity": "sha512-DVj4CQIYYow0BlaelwK1pHl5n5cRSJfM60UA0zK891sVInoPri2Ekj7+e1CT3/3qxXenpI+nBBmQAcJPJgaj4w==",
      "dependencies": {
        "@nodelib/fs.stat": "^2.0.2",
        "@nodelib/fs.walk": "^1.2.3",
        "glob-parent": "^5.1.2",
        "merge2": "^1.3.0",
        "micromatch": "^4.0.4"
      },
      "engines": {
        "node": ">=8.6.0"
      }
    },
    "node_modules/fast-glob/node_modules/glob-parent": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
      "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
      "dependencies": {
        "is-glob": "^4.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/fast-xml-parser": {
      "version": "4.0.11",
      "resolved": "https://registry.npmjs.org/fast-xml-parser/-/fast-xml-parser-4.0.11.tgz",
      "integrity": "sha512-4aUg3aNRR/WjQAcpceODG1C3x3lFANXRo8+1biqfieHmg9pyMt7qB4lQV/Ta6sJCTbA5vfD8fnA8S54JATiFUA==",
      "optional": true,
      "dependencies": {
        "strnum": "^1.0.5"
      },
      "bin": {
        "fxparser": "src/cli/cli.js"
      },
      "funding": {
        "type": "paypal",
        "url": "https://paypal.me/naturalintelligence"
      }
    },
    "node_modules/fastq": {
      "version": "1.13.0",
      "resolved": "https://registry.npmjs.org/fastq/-/fastq-1.13.0.tgz",
      "integrity": "sha512-YpkpUnK8od0o1hmeSc7UUs/eB/vIPWJYjKck2QKIzAf71Vm1AAQ3EbuZB3g2JIy+pg+ERD0vqI79KyZiB2e2Nw==",
      "dependencies": {
        "reusify": "^1.0.4"
      }
    },
    "node_modules/fill-range": {
      "version": "7.0.1",
      "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.0.1.tgz",
      "integrity": "sha512-qOo9F+dMUmC2Lcb4BbVvnKJxTPjCm+RRpe4gDuGrzkL7mEVl/djYSu2OdQ2Pa302N4oqkSg9ir6jaLWJ2USVpQ==",
      "dependencies": {
        "to-regex-range": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/filter-obj": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/filter-obj/-/filter-obj-1.1.0.tgz",
      "integrity": "sha512-8rXg1ZnX7xzy2NGDVkBVaAy+lSlPNwad13BtgSlLuxfIslyt5Vg64U7tFcCt4WS1R0hvtnQybT/IyCkGZ3DpXQ==",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/follow-redirects": {
      "version": "1.15.2",
      "resolved": "https://registry.npmjs.org/follow-redirects/-/follow-redirects-1.15.2.tgz",
      "integrity": "sha512-VQLG33o04KaQ8uYi2tVNbdrWp1QWxNNea+nmIB4EVM28v0hmP17z7aG1+wAkNzVq4KeXTq3221ye5qTJP91JwA==",
      "funding": [
        {
          "type": "individual",
          "url": "https://github.com/sponsors/RubenVerborgh"
        }
      ],
      "engines": {
        "node": ">=4.0"
      },
      "peerDependenciesMeta": {
        "debug": {
          "optional": true
        }
      }
    },
    "node_modules/fraction.js": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/fraction.js/-/fraction.js-4.2.0.tgz",
      "integrity": "sha512-MhLuK+2gUcnZe8ZHlaaINnQLl0xRIGRfcGk2yl8xoQAfHrSsL3rYu6FCmBdkdbhc9EPlwyGHewaRsvwRMJtAlA==",
      "engines": {
        "node": "*"
      },
      "funding": {
        "type": "patreon",
        "url": "https://www.patreon.com/infusion"
      }
    },
    "node_modules/fs-extra": {
      "version": "10.1.0",
      "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-10.1.0.tgz",
      "integrity": "sha512-oRXApq54ETRj4eMiFzGnHWGy+zo5raudjuxN0b8H7s/RU2oW0Wvsx9O0ACRN/kRq9E8Vu/ReskGB5o3ji+FzHQ==",
      "dependencies": {
        "graceful-fs": "^4.2.0",
        "jsonfile": "^6.0.1",
        "universalify": "^2.0.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/fs.realpath": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz",
      "integrity": "sha512-OO0pH2lK6a0hZnAdau5ItzHPI6pUlvI7jMVnxUQRtw4owF2wk8lOSabtGDCTP4Ggrg2MbGnWO9X8K1t4+fGMDw=="
    },
    "node_modules/fsevents": {
      "version": "2.3.2",
      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.2.tgz",
      "integrity": "sha512-xiqMQR4xAeHTuB9uWm+fFRcIOgKBMiOBP+eXiyT7jsgVCq1bkVygt00oASowB7EdtpOHaaPgKt812P9ab+DDKA==",
      "hasInstallScript": true,
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": "^8.16.0 || ^10.6.0 || >=11.0.0"
      }
    },
    "node_modules/function-bind": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.1.tgz",
      "integrity": "sha512-yIovAzMX49sF8Yl58fSCWJ5svSLuaibPxXQJFLmBObTuCr0Mf1KiPopGM9NiFjiYBCbfaa2Fh6breQ6ANVTI0A=="
    },
    "node_modules/glob": {
      "version": "7.2.3",
      "resolved": "https://registry.npmjs.org/glob/-/glob-7.2.3.tgz",
      "integrity": "sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==",
      "dependencies": {
        "fs.realpath": "^1.0.0",
        "inflight": "^1.0.4",
        "inherits": "2",
        "minimatch": "^3.1.1",
        "once": "^1.3.0",
        "path-is-absolute": "^1.0.0"
      },
      "engines": {
        "node": "*"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/glob-parent": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-6.0.2.tgz",
      "integrity": "sha512-XxwI8EOhVQgWp6iDL+3b0r86f4d6AX6zSU55HfB4ydCEuXLXc5FcYeOu+nnGftS4TEju/11rt4KJPTMgbfmv4A==",
      "dependencies": {
        "is-glob": "^4.0.3"
      },
      "engines": {
        "node": ">=10.13.0"
      }
    },
    "node_modules/globals": {
      "version": "11.12.0",
      "resolved": "https://registry.npmjs.org/globals/-/globals-11.12.0.tgz",
      "integrity": "sha512-WOBp/EEGUiIsJSp7wcv/y6MO+lV9UoncWqxuFfm8eBwzWNgyfBd6Gz+IeKQ9jCmyhoH99g15M3T+QaVHFjizVA==",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/graceful-fs": {
      "version": "4.2.10",
      "resolved": "https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.2.10.tgz",
      "integrity": "sha512-9ByhssR2fPVsNZj478qUUbKfmL0+t5BDVyjShtyZZLiK7ZDAArFFfopyOTj0M05wE2tJPisA4iTnnXl2YoPvOA=="
    },
    "node_modules/hamt_plus": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/hamt_plus/-/hamt_plus-1.0.2.tgz",
      "integrity": "sha512-t2JXKaehnMb9paaYA7J0BX8QQAY8lwfQ9Gjf4pg/mk4krt+cmwmU652HOoWonf+7+EQV97ARPMhhVgU1ra2GhA=="
    },
    "node_modules/has": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/has/-/has-1.0.3.tgz",
      "integrity": "sha512-f2dvO0VU6Oej7RkWJGrehjbzMAjFp5/VKPp5tTpWIV4JHHZK1/BxbFRtf/siA2SWTe09caDmVtYYzWEIbBS4zw==",
      "dependencies": {
        "function-bind": "^1.1.1"
      },
      "engines": {
        "node": ">= 0.4.0"
      }
    },
    "node_modules/has-flag": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz",
      "integrity": "sha512-sKJf1+ceQBr4SMkvQnBDNDtf4TXpVhVGateu0t918bl30FnbE2m4vNLX+VWe/dpjlb+HugGYzW7uQXH98HPEYw==",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/hex-color-regex": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/hex-color-regex/-/hex-color-regex-1.1.0.tgz",
      "integrity": "sha512-l9sfDFsuqtOqKDsQdqrMRk0U85RZc0RtOR9yPI7mRVOa4FsR/BVnZ0shmQRM96Ji99kYZP/7hn1cedc1+ApsTQ=="
    },
    "node_modules/hoist-non-react-statics": {
      "version": "3.3.2",
      "resolved": "https://registry.npmjs.org/hoist-non-react-statics/-/hoist-non-react-statics-3.3.2.tgz",
      "integrity": "sha512-/gGivxi8JPKWNm/W0jSmzcMPpfpPLc3dY/6GxhX2hQ9iGj3aDfklV4ET7NjKpSinLpJ5vafa9iiGIEZg10SfBw==",
      "dependencies": {
        "react-is": "^16.7.0"
      }
    },
    "node_modules/hoist-non-react-statics/node_modules/react-is": {
      "version": "16.13.1",
      "resolved": "https://registry.npmjs.org/react-is/-/react-is-16.13.1.tgz",
      "integrity": "sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ=="
    },
    "node_modules/hsl-regex": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/hsl-regex/-/hsl-regex-1.0.0.tgz",
      "integrity": "sha512-M5ezZw4LzXbBKMruP+BNANf0k+19hDQMgpzBIYnya//Al+fjNct9Wf3b1WedLqdEs2hKBvxq/jh+DsHJLj0F9A=="
    },
    "node_modules/hsla-regex": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/hsla-regex/-/hsla-regex-1.0.0.tgz",
      "integrity": "sha512-7Wn5GMLuHBjZCb2bTmnDOycho0p/7UVaAeqXZGbHrBCl6Yd/xDhQJAXe6Ga9AXJH2I5zY1dEdYw2u1UptnSBJA=="
    },
    "node_modules/html-tags": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/html-tags/-/html-tags-3.2.0.tgz",
      "integrity": "sha512-vy7ClnArOZwCnqZgvv+ddgHgJiAFXe3Ge9ML5/mBctVJoUoYPCdxVucOywjDARn6CVoh3dRSFdPHy2sX80L0Wg==",
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/http-errors": {
      "version": "1.8.1",
      "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-1.8.1.tgz",
      "integrity": "sha512-Kpk9Sm7NmI+RHhnj6OIWDI1d6fIoFAtFt9RLaTMRlg/8w49juAStsrBgp0Dp4OdxdVbRIeKhtCUvoi/RuAhO4g==",
      "dependencies": {
        "depd": "~1.1.2",
        "inherits": "2.0.4",
        "setprototypeof": "1.2.0",
        "statuses": ">= 1.5.0 < 2",
        "toidentifier": "1.0.1"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/http-errors/node_modules/depd": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/depd/-/depd-1.1.2.tgz",
      "integrity": "sha512-7emPTl6Dpo6JRXOXjLRxck+FlLRX5847cLKEn00PLAgc3g2hTZZgr+e4c2v6QpSmLeFP3n5yUo7ft6avBK/5jQ==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/ieee754": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/ieee754/-/ieee754-1.2.1.tgz",
      "integrity": "sha512-dcyqhDvX1C46lXZcVqCpK+FtMRQVdIMN6/Df5js2zouUsqG7I6sFxitIC+7KYK29KdXOLHdu9zL4sFnoVQnqaA==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ]
    },
    "node_modules/immer": {
      "version": "9.0.16",
      "resolved": "https://registry.npmjs.org/immer/-/immer-9.0.16.tgz",
      "integrity": "sha512-qenGE7CstVm1NrHQbMh8YaSzTZTFNP3zPqr3YU0S0UY441j4bJTg4A2Hh5KAhwgaiU6ZZ1Ar6y/2f4TblnMReQ==",
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/immer"
      }
    },
    "node_modules/import-fresh": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/import-fresh/-/import-fresh-3.3.0.tgz",
      "integrity": "sha512-veYYhQa+D1QBKznvhUHxb8faxlrwUnxseDAbAp457E0wLNio2bOSKnjYDhMj+YiAq61xrMGhQk9iXVk5FzgQMw==",
      "dependencies": {
        "parent-module": "^1.0.0",
        "resolve-from": "^4.0.0"
      },
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/inflight": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz",
      "integrity": "sha512-k92I/b08q4wvFscXCLvqfsHCrjrF7yiXsQuIVvVE7N82W3+aqpzuUdBbfhWcy/FZR3/4IgflMgKLOsvPDrGCJA==",
      "dependencies": {
        "once": "^1.3.0",
        "wrappy": "1"
      }
    },
    "node_modules/inherits": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ=="
    },
    "node_modules/ip": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ip/-/ip-2.0.0.tgz",
      "integrity": "sha512-WKa+XuLG1A1R0UWhl2+1XQSi+fZWMsYKffMZTTYsiZaUD8k2yDAj5atimTUD2TZkyCkNEeYE5NhFZmupOGtjYQ=="
    },
    "node_modules/is-arrayish": {
      "version": "0.2.1",
      "resolved": "https://registry.npmjs.org/is-arrayish/-/is-arrayish-0.2.1.tgz",
      "integrity": "sha512-zz06S8t0ozoDXMG+ube26zeCTNXcKIPJZJi8hBrF4idCLms4CG9QtK7qBl1boi5ODzFpjswb5JPmHCbMpjaYzg=="
    },
    "node_modules/is-binary-path": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/is-binary-path/-/is-binary-path-2.1.0.tgz",
      "integrity": "sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==",
      "dependencies": {
        "binary-extensions": "^2.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-color-stop": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/is-color-stop/-/is-color-stop-1.1.0.tgz",
      "integrity": "sha512-H1U8Vz0cfXNujrJzEcvvwMDW9Ra+biSYA3ThdQvAnMLJkEHQXn6bWzLkxHtVYJ+Sdbx0b6finn3jZiaVe7MAHA==",
      "dependencies": {
        "css-color-names": "^0.0.4",
        "hex-color-regex": "^1.1.0",
        "hsl-regex": "^1.0.0",
        "hsla-regex": "^1.0.0",
        "rgb-regex": "^1.0.1",
        "rgba-regex": "^1.0.0"
      }
    },
    "node_modules/is-core-module": {
      "version": "2.11.0",
      "resolved": "https://registry.npmjs.org/is-core-module/-/is-core-module-2.11.0.tgz",
      "integrity": "sha512-RRjxlvLDkD1YJwDbroBHMb+cukurkDWNyHx7D3oNB5x9rb5ogcksMC5wHCadcXoo67gVr/+3GFySh3134zi6rw==",
      "dependencies": {
        "has": "^1.0.3"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-extglob": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
      "integrity": "sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-glob": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
      "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
      "dependencies": {
        "is-extglob": "^2.1.1"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-number": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",
      "integrity": "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==",
      "engines": {
        "node": ">=0.12.0"
      }
    },
    "node_modules/js-sha256": {
      "version": "0.9.0",
      "resolved": "https://registry.npmjs.org/js-sha256/-/js-sha256-0.9.0.tgz",
      "integrity": "sha512-sga3MHh9sgQN2+pJ9VYZ+1LPwXOxuBJBA5nrR5/ofPfuiJBE2hnjsaN8se8JznOmGLN2p49Pe5U/ttafcs/apA=="
    },
    "node_modules/js-tokens": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
      "integrity": "sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ=="
    },
    "node_modules/jsesc": {
      "version": "2.5.2",
      "resolved": "https://registry.npmjs.org/jsesc/-/jsesc-2.5.2.tgz",
      "integrity": "sha512-OYu7XEzjkCQ3C5Ps3QIZsQfNpqoJyZZA99wd9aWd05NCtC5pWOkShK2mkL6HXQR6/Cy2lbNdPlZBpuQHXE63gA==",
      "bin": {
        "jsesc": "bin/jsesc"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/json-parse-even-better-errors": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/json-parse-even-better-errors/-/json-parse-even-better-errors-2.3.1.tgz",
      "integrity": "sha512-xyFwyhro/JEof6Ghe2iz2NcXoj2sloNsWr/XsERDK/oiPCfaNhl5ONfp+jQdAZRQQ0IJWNzH9zIZF7li91kh2w=="
    },
    "node_modules/jsonfile": {
      "version": "6.1.0",
      "resolved": "https://registry.npmjs.org/jsonfile/-/jsonfile-6.1.0.tgz",
      "integrity": "sha512-5dgndWOriYSm5cnYaJNhalLNDKOqFwyDB/rr1E9ZsGciGvKPs8R2xYGCacuf3z6K1YKDz182fd+fY3cn3pMqXQ==",
      "dependencies": {
        "universalify": "^2.0.0"
      },
      "optionalDependencies": {
        "graceful-fs": "^4.1.6"
      }
    },
    "node_modules/lilconfig": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/lilconfig/-/lilconfig-2.0.6.tgz",
      "integrity": "sha512-9JROoBW7pobfsx+Sq2JsASvCo6Pfo6WWoUW79HuB1BCoBXD4PLWJPqDF6fNj67pqBYTbAHkE57M1kS/+L1neOg==",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/lines-and-columns": {
      "version": "1.2.4",
      "resolved": "https://registry.npmjs.org/lines-and-columns/-/lines-and-columns-1.2.4.tgz",
      "integrity": "sha512-7ylylesZQ/PV29jhEDl3Ufjo6ZX7gCqJr5F7PKrqc93v7fzSymt1BpwEU8nAUXs8qzzvqhbjhK5QZg6Mt/HkBg=="
    },
    "node_modules/lodash": {
      "version": "4.17.21",
      "resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz",
      "integrity": "sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg=="
    },
    "node_modules/lodash-es": {
      "version": "4.17.21",
      "resolved": "https://registry.npmjs.org/lodash-es/-/lodash-es-4.17.21.tgz",
      "integrity": "sha512-mKnC+QJ9pWVzv+C4/U3rRsHapFfHvQFoFB92e52xeyGMcX6/OlIl78je1u8vePzYZSkkogMPJ2yjxxsb89cxyw=="
    },
    "node_modules/lodash.flatmap": {
      "version": "4.5.0",
      "resolved": "https://registry.npmjs.org/lodash.flatmap/-/lodash.flatmap-4.5.0.tgz",
      "integrity": "sha512-/OcpcAGWlrZyoHGeHh3cAoa6nGdX6QYtmzNP84Jqol6UEQQ2gIaU3H+0eICcjcKGl0/XF8LWOujNn9lffsnaOg=="
    },
    "node_modules/lodash.get": {
      "version": "4.4.2",
      "resolved": "https://registry.npmjs.org/lodash.get/-/lodash.get-4.4.2.tgz",
      "integrity": "sha512-z+Uw/vLuy6gQe8cfaFWD7p0wVv8fJl3mbzXh33RS+0oW2wvUqiRXiQ69gLWSLpgB5/6sU+r6BlQR0MBILadqTQ=="
    },
    "node_modules/lodash.merge": {
      "version": "4.6.2",
      "resolved": "https://registry.npmjs.org/lodash.merge/-/lodash.merge-4.6.2.tgz",
      "integrity": "sha512-0KpjqXRVvrYyCsX1swR/XTK0va6VQkQM6MNo7PqW77ByjAhoARA8EfrP1N4+KlKj8YS0ZUCtRT/YUuhyYDujIQ=="
    },
    "node_modules/lodash.topath": {
      "version": "4.5.2",
      "resolved": "https://registry.npmjs.org/lodash.topath/-/lodash.topath-4.5.2.tgz",
      "integrity": "sha512-1/W4dM+35DwvE/iEd1M9ekewOSTlpFekhw9mhAtrwjVqUr83/ilQiyAvmg4tVX7Unkcfl1KC+i9WdaT4B6aQcg=="
    },
    "node_modules/loose-envify": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/loose-envify/-/loose-envify-1.4.0.tgz",
      "integrity": "sha512-lyuxPGr/Wfhrlem2CL/UcnUc1zcqKAImBDzukY7Y5F/yQiNdko6+fRLevlw1HgMySw7f611UIY408EtxRSoK3Q==",
      "dependencies": {
        "js-tokens": "^3.0.0 || ^4.0.0"
      },
      "bin": {
        "loose-envify": "cli.js"
      }
    },
    "node_modules/lzutf8": {
      "version": "0.6.3",
      "resolved": "https://registry.npmjs.org/lzutf8/-/lzutf8-0.6.3.tgz",
      "integrity": "sha512-CAkF9HKrM+XpB0f3DepQ2to2iUEo0zrbh+XgBqgNBc1+k8HMM3u/YSfHI3Dr4GmoTIez2Pr/If1XFl3rU26AwA==",
      "dependencies": {
        "readable-stream": "^4.0.0"
      }
    },
    "node_modules/material-colors": {
      "version": "1.2.6",
      "resolved": "https://registry.npmjs.org/material-colors/-/material-colors-1.2.6.tgz",
      "integrity": "sha512-6qE4B9deFBIa9YSpOc9O0Sgc43zTeVYbgDT5veRKSlB2+ZuHNoVVxA1L/ckMUayV9Ay9y7Z/SZCLcGteW9i7bg=="
    },
    "node_modules/memory-pager": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/memory-pager/-/memory-pager-1.5.0.tgz",
      "integrity": "sha512-ZS4Bp4r/Zoeq6+NLJpP+0Zzm0pR8whtGPf1XExKLJBAczGMnSi3It14OiNCStjQjM6NU1okjQGSxgEZN8eBYKg==",
      "optional": true
    },
    "node_modules/merge2": {
      "version": "1.4.1",
      "resolved": "https://registry.npmjs.org/merge2/-/merge2-1.4.1.tgz",
      "integrity": "sha512-8q7VEgMJW4J8tcfVPy8g09NcQwZdbwFEqhe/WZkoIzjn/3TGDwtOCYtXGxA3O8tPzpczCCDgv+P2P5y00ZJOOg==",
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/micromatch": {
      "version": "4.0.5",
      "resolved": "https://registry.npmjs.org/micromatch/-/micromatch-4.0.5.tgz",
      "integrity": "sha512-DMy+ERcEW2q8Z2Po+WNXuw3c5YaUSFjAO5GsJqfEl7UjvtIuFKO6ZrKvcItdy98dwFI2N1tg3zNIdKaQT+aNdA==",
      "dependencies": {
        "braces": "^3.0.2",
        "picomatch": "^2.3.1"
      },
      "engines": {
        "node": ">=8.6"
      }
    },
    "node_modules/mini-svg-data-uri": {
      "version": "1.4.4",
      "resolved": "https://registry.npmjs.org/mini-svg-data-uri/-/mini-svg-data-uri-1.4.4.tgz",
      "integrity": "sha512-r9deDe9p5FJUPZAk3A59wGH7Ii9YrjjWw0jmw/liSbHl2CHiyXj6FcDXDu2K3TjVAXqiJdaw3xxwlZZr9E6nHg==",
      "dev": true,
      "bin": {
        "mini-svg-data-uri": "cli.js"
      }
    },
    "node_modules/minimatch": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
      "dependencies": {
        "brace-expansion": "^1.1.7"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/minimist": {
      "version": "1.2.7",
      "resolved": "https://registry.npmjs.org/minimist/-/minimist-1.2.7.tgz",
      "integrity": "sha512-bzfL1YUZsP41gmu/qjrEk0Q6i2ix/cVeAhbCbqH9u3zYutS1cLg00qhrD0M2MVdCcx4Sc0UpP2eBWo9rotpq6g==",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/modern-normalize": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/modern-normalize/-/modern-normalize-1.1.0.tgz",
      "integrity": "sha512-2lMlY1Yc1+CUy0gw4H95uNN7vjbpoED7NNRSBHE25nWfLBdmMzFCsPshlzbxHz+gYMcBEUN8V4pU16prcdPSgA==",
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/mongodb": {
      "version": "4.11.0",
      "resolved": "https://registry.npmjs.org/mongodb/-/mongodb-4.11.0.tgz",
      "integrity": "sha512-9l9n4Nk2BYZzljW3vHah3Z0rfS5npKw6ktnkmFgTcnzaXH1DRm3pDl6VMHu84EVb1lzmSaJC4OzWZqTkB5i2wg==",
      "dependencies": {
        "bson": "^4.7.0",
        "denque": "^2.1.0",
        "mongodb-connection-string-url": "^2.5.4",
        "socks": "^2.7.1"
      },
      "engines": {
        "node": ">=12.9.0"
      },
      "optionalDependencies": {
        "@aws-sdk/credential-providers": "^3.186.0",
        "saslprep": "^1.0.3"
      }
    },
    "node_modules/mongodb-connection-string-url": {
      "version": "2.5.4",
      "resolved": "https://registry.npmjs.org/mongodb-connection-string-url/-/mongodb-connection-string-url-2.5.4.tgz",
      "integrity": "sha512-SeAxuWs0ez3iI3vvmLk/j2y+zHwigTDKQhtdxTgt5ZCOQQS5+HW4g45/Xw5vzzbn7oQXCNQ24Z40AkJsizEy7w==",
      "dependencies": {
        "@types/whatwg-url": "^8.2.1",
        "whatwg-url": "^11.0.0"
      }
    },
    "node_modules/ms": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
      "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w=="
    },
    "node_modules/mustache": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/mustache/-/mustache-4.2.0.tgz",
      "integrity": "sha512-71ippSywq5Yb7/tVYyGbkBggbU8H3u5Rz56fH60jGFgr8uHwxs+aSKeqmluIVzM0m0kB7xQjKS6qPfd0b2ZoqQ==",
      "bin": {
        "mustache": "bin/mustache"
      }
    },
    "node_modules/nanoid": {
      "version": "3.3.6",
      "resolved": "https://registry.npmjs.org/nanoid/-/nanoid-3.3.6.tgz",
      "integrity": "sha512-BGcqMMJuToF7i1rt+2PWSNVnWIkGCU78jBG3RxO/bZlnZPK2Cmi2QaffxGO/2RvWi9sL+FAiRiXMgsyxQ1DIDA==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "bin": {
        "nanoid": "bin/nanoid.cjs"
      },
      "engines": {
        "node": "^10 || ^12 || ^13.7 || ^14 || >=15.0.1"
      }
    },
    "node_modules/near-api-js": {
      "version": "0.44.2",
      "resolved": "https://registry.npmjs.org/near-api-js/-/near-api-js-0.44.2.tgz",
      "integrity": "sha512-eMnc4V+geggapEUa3nU2p8HSHn/njtloI4P2mceHQWO8vDE1NGpnAw8FuTBrLmXSgIv9m6oocgFc9t3VNf5zwg==",
      "dependencies": {
        "bn.js": "5.2.0",
        "borsh": "^0.6.0",
        "bs58": "^4.0.0",
        "depd": "^2.0.0",
        "error-polyfill": "^0.1.3",
        "http-errors": "^1.7.2",
        "js-sha256": "^0.9.0",
        "mustache": "^4.0.0",
        "node-fetch": "^2.6.1",
        "text-encoding-utf-8": "^1.0.2",
        "tweetnacl": "^1.0.1"
      }
    },
    "node_modules/near-api-js/node_modules/bn.js": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/bn.js/-/bn.js-5.2.0.tgz",
      "integrity": "sha512-D7iWRBvnZE8ecXiLj/9wbxH7Tk79fAh8IHaTNq1RWRixsS02W+5qS+iE9yq6RYl0asXx5tw0bLhmT5pIfbSquw=="
    },
    "node_modules/near-transaction-manager": {
      "version": "0.1.1",
      "resolved": "https://registry.npmjs.org/near-transaction-manager/-/near-transaction-manager-0.1.1.tgz",
      "integrity": "sha512-kG98kg/5RNt4c4x4QPd/gAkSLiTkRQQPYtRm/NNH1tE/SmNlxdgALj1XxuKHkz3O067kCVi+6WI1aakcHKdXfw==",
      "dependencies": {
        "bs58": "^4.0.1"
      },
      "peerDependencies": {
        "near-api-js": "^0.42.0"
      }
    },
    "node_modules/next": {
      "version": "12.2.6",
      "resolved": "https://registry.npmjs.org/next/-/next-12.2.6.tgz",
      "integrity": "sha512-Wlln0vp91NVj4f2Tr5c1e7ZXPiwZ+XEefPiuoTnt/VopOh5xK7//KCl1pCicYZP3P2mRbpuKs5PvcVQG/+EC7w==",
      "dependencies": {
        "@next/env": "12.2.6",
        "@swc/helpers": "0.4.3",
        "caniuse-lite": "^1.0.30001332",
        "postcss": "8.4.14",
        "styled-jsx": "5.0.4",
        "use-sync-external-store": "1.2.0"
      },
      "bin": {
        "next": "dist/bin/next"
      },
      "engines": {
        "node": ">=12.22.0"
      },
      "optionalDependencies": {
        "@next/swc-android-arm-eabi": "12.2.6",
        "@next/swc-android-arm64": "12.2.6",
        "@next/swc-darwin-arm64": "12.2.6",
        "@next/swc-darwin-x64": "12.2.6",
        "@next/swc-freebsd-x64": "12.2.6",
        "@next/swc-linux-arm-gnueabihf": "12.2.6",
        "@next/swc-linux-arm64-gnu": "12.2.6",
        "@next/swc-linux-arm64-musl": "12.2.6",
        "@next/swc-linux-x64-gnu": "12.2.6",
        "@next/swc-linux-x64-musl": "12.2.6",
        "@next/swc-win32-arm64-msvc": "12.2.6",
        "@next/swc-win32-ia32-msvc": "12.2.6",
        "@next/swc-win32-x64-msvc": "12.2.6"
      },
      "peerDependencies": {
        "fibers": ">= 3.1.0",
        "node-sass": "^6.0.0 || ^7.0.0",
        "react": "^17.0.2 || ^18.0.0-0",
        "react-dom": "^17.0.2 || ^18.0.0-0",
        "sass": "^1.3.0"
      },
      "peerDependenciesMeta": {
        "fibers": {
          "optional": true
        },
        "node-sass": {
          "optional": true
        },
        "sass": {
          "optional": true
        }
      }
    },
    "node_modules/next/node_modules/postcss": {
      "version": "8.4.14",
      "resolved": "https://registry.npmjs.org/postcss/-/postcss-8.4.14.tgz",
      "integrity": "sha512-E398TUmfAYFPBSdzgeieK2Y1+1cpdxJx8yXbK/m57nRhKSmk1GB2tO4lbLBtlkfPQTDKfe4Xqv1ASWPpayPEig==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/postcss/"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/postcss"
        }
      ],
      "dependencies": {
        "nanoid": "^3.3.4",
        "picocolors": "^1.0.0",
        "source-map-js": "^1.0.2"
      },
      "engines": {
        "node": "^10 || ^12 || >=14"
      }
    },
    "node_modules/node-emoji": {
      "version": "1.11.0",
      "resolved": "https://registry.npmjs.org/node-emoji/-/node-emoji-1.11.0.tgz",
      "integrity": "sha512-wo2DpQkQp7Sjm2A0cq+sN7EHKO6Sl0ctXeBdFZrL9T9+UywORbufTcTZxom8YqpLQt/FqNMUkOpkZrJVYSKD3A==",
      "dependencies": {
        "lodash": "^4.17.21"
      }
    },
    "node_modules/node-fetch": {
      "version": "2.6.7",
      "resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-2.6.7.tgz",
      "integrity": "sha512-ZjMPFEfVx5j+y2yF35Kzx5sF7kDzxuDj6ziH4FFbOp87zKDZNx8yExJIb05OGF4Nlt9IHFIMBkRl41VdvcNdbQ==",
      "dependencies": {
        "whatwg-url": "^5.0.0"
      },
      "engines": {
        "node": "4.x || >=6.0.0"
      },
      "peerDependencies": {
        "encoding": "^0.1.0"
      },
      "peerDependenciesMeta": {
        "encoding": {
          "optional": true
        }
      }
    },
    "node_modules/node-fetch/node_modules/tr46": {
      "version": "0.0.3",
      "resolved": "https://registry.npmjs.org/tr46/-/tr46-0.0.3.tgz",
      "integrity": "sha512-N3WMsuqV66lT30CrXNbEjx4GEwlow3v6rr4mCcv6prnfwhS01rkgyFdjPNBYd9br7LpXV1+Emh01fHnq2Gdgrw=="
    },
    "node_modules/node-fetch/node_modules/webidl-conversions": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-3.0.1.tgz",
      "integrity": "sha512-2JAn3z8AR6rjK8Sm8orRC0h/bcl/DqL7tRPdGZ4I1CjdF+EaMLmYxBHyXuKL849eucPFhvBoxMsflfOb8kxaeQ=="
    },
    "node_modules/node-fetch/node_modules/whatwg-url": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-5.0.0.tgz",
      "integrity": "sha512-saE57nupxk6v3HY35+jzBwYa0rKSy0XR8JSxZPwgLr7ys0IBzhGviA1/TUGJLmSVqs8pb9AnvICXEuOHLprYTw==",
      "dependencies": {
        "tr46": "~0.0.3",
        "webidl-conversions": "^3.0.0"
      }
    },
    "node_modules/node-releases": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/node-releases/-/node-releases-2.0.6.tgz",
      "integrity": "sha512-PiVXnNuFm5+iYkLBNeq5211hvO38y63T0i2KKh2KnUs3RpzJ+JtODFjkD8yjLwnDkTYF1eKXheUwdssR+NRZdg=="
    },
    "node_modules/normalize-path": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/normalize-path/-/normalize-path-3.0.0.tgz",
      "integrity": "sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/normalize-range": {
      "version": "0.1.2",
      "resolved": "https://registry.npmjs.org/normalize-range/-/normalize-range-0.1.2.tgz",
      "integrity": "sha512-bdok/XvKII3nUpklnV6P2hxtMNrCboOjAcyBuQnWEhO665FwrSNRxU+AqpsyvO6LgGYPspN+lu5CLtw4jPRKNA==",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/o3": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/o3/-/o3-1.0.3.tgz",
      "integrity": "sha512-f+4n+vC6s4ysy7YO7O2gslWZBUu8Qj2i2OUJOvjRxQva7jVjYjB29jrr9NCjmxZQR0gzrOcv1RnqoYOeMs5VRQ==",
      "dependencies": {
        "capability": "^0.2.5"
      }
    },
    "node_modules/object-assign": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
      "integrity": "sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/object-hash": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/object-hash/-/object-hash-2.2.0.tgz",
      "integrity": "sha512-gScRMn0bS5fH+IuwyIFgnh9zBdo4DV+6GhygmWM9HyNJSgS0hScp1f5vjtm7oIIOiT9trXrShAkLFSc2IqKNgw==",
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/once": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
      "integrity": "sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==",
      "dependencies": {
        "wrappy": "1"
      }
    },
    "node_modules/packet-reader": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/packet-reader/-/packet-reader-1.0.0.tgz",
      "integrity": "sha512-HAKu/fG3HpHFO0AA8WE8q2g+gBJaZ9MG7fcKk+IJPLTGAD6Psw4443l+9DGRbOIh3/aXr7Phy0TjilYivJo5XQ=="
    },
    "node_modules/parent-module": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/parent-module/-/parent-module-1.0.1.tgz",
      "integrity": "sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==",
      "dependencies": {
        "callsites": "^3.0.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/parse-json": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/parse-json/-/parse-json-5.2.0.tgz",
      "integrity": "sha512-ayCKvm/phCGxOkYRSCM82iDwct8/EonSEgCSxWxD7ve6jHggsFl4fZVQBPRNgQoKiuV/odhFrGzQXZwbifC8Rg==",
      "dependencies": {
        "@babel/code-frame": "^7.0.0",
        "error-ex": "^1.3.1",
        "json-parse-even-better-errors": "^2.3.0",
        "lines-and-columns": "^1.1.6"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/path-is-absolute": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz",
      "integrity": "sha512-AVbw3UJ2e9bq64vSaS9Am0fje1Pa8pbGqTTsmXfaIiMpnr5DlDhfJOuLj9Sf95ZPVDAUerDfEk88MPmPe7UCQg==",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/path-parse": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/path-parse/-/path-parse-1.0.7.tgz",
      "integrity": "sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw=="
    },
    "node_modules/path-type": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/path-type/-/path-type-4.0.0.tgz",
      "integrity": "sha512-gDKb8aZMDeD/tZWs9P6+q0J9Mwkdl6xMV8TjnGP3qJVJ06bdMgkbBlLU8IdfOsIsFz2BW1rNVT3XuNEl8zPAvw==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/pg": {
      "version": "8.8.0",
      "resolved": "https://registry.npmjs.org/pg/-/pg-8.8.0.tgz",
      "integrity": "sha512-UXYN0ziKj+AeNNP7VDMwrehpACThH7LUl/p8TDFpEUuSejCUIwGSfxpHsPvtM6/WXFy6SU4E5RG4IJV/TZAGjw==",
      "dependencies": {
        "buffer-writer": "2.0.0",
        "packet-reader": "1.0.0",
        "pg-connection-string": "^2.5.0",
        "pg-pool": "^3.5.2",
        "pg-protocol": "^1.5.0",
        "pg-types": "^2.1.0",
        "pgpass": "1.x"
      },
      "engines": {
        "node": ">= 8.0.0"
      },
      "peerDependencies": {
        "pg-native": ">=3.0.1"
      },
      "peerDependenciesMeta": {
        "pg-native": {
          "optional": true
        }
      }
    },
    "node_modules/pg-connection-string": {
      "version": "2.5.0",
      "resolved": "https://registry.npmjs.org/pg-connection-string/-/pg-connection-string-2.5.0.tgz",
      "integrity": "sha512-r5o/V/ORTA6TmUnyWZR9nCj1klXCO2CEKNRlVuJptZe85QuhFayC7WeMic7ndayT5IRIR0S0xFxFi2ousartlQ=="
    },
    "node_modules/pg-int8": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/pg-int8/-/pg-int8-1.0.1.tgz",
      "integrity": "sha512-WCtabS6t3c8SkpDBUlb1kjOs7l66xsGdKpIPZsg4wR+B3+u9UAum2odSsF9tnvxg80h4ZxLWMy4pRjOsFIqQpw==",
      "engines": {
        "node": ">=4.0.0"
      }
    },
    "node_modules/pg-pool": {
      "version": "3.5.2",
      "resolved": "https://registry.npmjs.org/pg-pool/-/pg-pool-3.5.2.tgz",
      "integrity": "sha512-His3Fh17Z4eg7oANLob6ZvH8xIVen3phEZh2QuyrIl4dQSDVEabNducv6ysROKpDNPSD+12tONZVWfSgMvDD9w==",
      "peerDependencies": {
        "pg": ">=8.0"
      }
    },
    "node_modules/pg-protocol": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/pg-protocol/-/pg-protocol-1.5.0.tgz",
      "integrity": "sha512-muRttij7H8TqRNu/DxrAJQITO4Ac7RmX3Klyr/9mJEOBeIpgnF8f9jAfRz5d3XwQZl5qBjF9gLsUtMPJE0vezQ=="
    },
    "node_modules/pg-types": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/pg-types/-/pg-types-2.2.0.tgz",
      "integrity": "sha512-qTAAlrEsl8s4OiEQY69wDvcMIdQN6wdz5ojQiOy6YRMuynxenON0O5oCpJI6lshc6scgAY8qvJ2On/p+CXY0GA==",
      "dependencies": {
        "pg-int8": "1.0.1",
        "postgres-array": "~2.0.0",
        "postgres-bytea": "~1.0.0",
        "postgres-date": "~1.0.4",
        "postgres-interval": "^1.1.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/pgpass": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/pgpass/-/pgpass-1.0.5.tgz",
      "integrity": "sha512-FdW9r/jQZhSeohs1Z3sI1yxFQNFvMcnmfuj4WBMUTxOrAyLMaTcE1aAMBiTlbMNaXvBCQuVi0R7hd8udDSP7ug==",
      "dependencies": {
        "split2": "^4.1.0"
      }
    },
    "node_modules/picocolors": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/picocolors/-/picocolors-1.0.0.tgz",
      "integrity": "sha512-1fygroTLlHu66zi26VoTDv8yRgm0Fccecssto+MhsZ0D/DGW2sm8E8AjW7NU5VVTRt5GxbeZ5qBuJr+HyLYkjQ=="
    },
    "node_modules/picomatch": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
      "integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==",
      "engines": {
        "node": ">=8.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/jonschlinkert"
      }
    },
    "node_modules/postcss": {
      "version": "8.4.19",
      "resolved": "https://registry.npmjs.org/postcss/-/postcss-8.4.19.tgz",
      "integrity": "sha512-h+pbPsyhlYj6N2ozBmHhHrs9DzGmbaarbLvWipMRO7RLS+v4onj26MPFXA5OBYFxyqYhUJK456SwDcY9H2/zsA==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/postcss/"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/postcss"
        }
      ],
      "dependencies": {
        "nanoid": "^3.3.4",
        "picocolors": "^1.0.0",
        "source-map-js": "^1.0.2"
      },
      "engines": {
        "node": "^10 || ^12 || >=14"
      }
    },
    "node_modules/postcss-js": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/postcss-js/-/postcss-js-3.0.3.tgz",
      "integrity": "sha512-gWnoWQXKFw65Hk/mi2+WTQTHdPD5UJdDXZmX073EY/B3BWnYjO4F4t0VneTCnCGQ5E5GsCdMkzPaTXwl3r5dJw==",
      "dependencies": {
        "camelcase-css": "^2.0.1",
        "postcss": "^8.1.6"
      },
      "engines": {
        "node": ">=10.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/postcss/"
      }
    },
    "node_modules/postcss-nested": {
      "version": "5.0.6",
      "resolved": "https://registry.npmjs.org/postcss-nested/-/postcss-nested-5.0.6.tgz",
      "integrity": "sha512-rKqm2Fk0KbA8Vt3AdGN0FB9OBOMDVajMG6ZCf/GoHgdxUJ4sBFp0A/uMIRm+MJUdo33YXEtjqIz8u7DAp8B7DA==",
      "dependencies": {
        "postcss-selector-parser": "^6.0.6"
      },
      "engines": {
        "node": ">=12.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/postcss/"
      },
      "peerDependencies": {
        "postcss": "^8.2.14"
      }
    },
    "node_modules/postcss-selector-parser": {
      "version": "6.0.10",
      "resolved": "https://registry.npmjs.org/postcss-selector-parser/-/postcss-selector-parser-6.0.10.tgz",
      "integrity": "sha512-IQ7TZdoaqbT+LCpShg46jnZVlhWD2w6iQYAcYXfHARZ7X1t/UGhhceQDs5X0cGqKvYlHNOuv7Oa1xmb0oQuA3w==",
      "dependencies": {
        "cssesc": "^3.0.0",
        "util-deprecate": "^1.0.2"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/postcss-value-parser": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/postcss-value-parser/-/postcss-value-parser-4.2.0.tgz",
      "integrity": "sha512-1NNCs6uurfkVbeXG4S8JFT9t19m45ICnif8zWLd5oPSZ50QnwMfK+H3jv408d4jw/7Bttv5axS5IiHoLaVNHeQ=="
    },
    "node_modules/postgres-array": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/postgres-array/-/postgres-array-2.0.0.tgz",
      "integrity": "sha512-VpZrUqU5A69eQyW2c5CA1jtLecCsN2U/bD6VilrFDWq5+5UIEVO7nazS3TEcHf1zuPYO/sqGvUvW62g86RXZuA==",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/postgres-bytea": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/postgres-bytea/-/postgres-bytea-1.0.0.tgz",
      "integrity": "sha512-xy3pmLuQqRBZBXDULy7KbaitYqLcmxigw14Q5sj8QBVLqEwXfeybIKVWiqAXTlcvdvb0+xkOtDbfQMOf4lST1w==",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/postgres-date": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/postgres-date/-/postgres-date-1.0.7.tgz",
      "integrity": "sha512-suDmjLVQg78nMK2UZ454hAG+OAW+HQPZ6n++TNDUX+L0+uUlLywnoxJKDou51Zm+zTCjrCl0Nq6J9C5hP9vK/Q==",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/postgres-interval": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/postgres-interval/-/postgres-interval-1.2.0.tgz",
      "integrity": "sha512-9ZhXKM/rw350N1ovuWHbGxnGh/SNJ4cnxHiM0rxE4VN41wsg8P8zWn9hv/buK00RP4WvlOyr/RBDiptyxVbkZQ==",
      "dependencies": {
        "xtend": "^4.0.0"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/pretty-hrtime": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/pretty-hrtime/-/pretty-hrtime-1.0.3.tgz",
      "integrity": "sha512-66hKPCr+72mlfiSjlEB1+45IjXSqvVAIy6mocupoww4tBFE9R9IhwwUGoI4G++Tc9Aq+2rxOt0RFU6gPcrte0A==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/process": {
      "version": "0.11.10",
      "resolved": "https://registry.npmjs.org/process/-/process-0.11.10.tgz",
      "integrity": "sha512-cdGef/drWFoydD1JsMzuFf8100nZl+GT+yacc2bEced5f9Rjk4z+WtFUTBu9PhOi9j/jfmBPu0mMEY4wIdAF8A==",
      "engines": {
        "node": ">= 0.6.0"
      }
    },
    "node_modules/prop-types": {
      "version": "15.8.1",
      "resolved": "https://registry.npmjs.org/prop-types/-/prop-types-15.8.1.tgz",
      "integrity": "sha512-oj87CgZICdulUohogVAR7AjlC0327U4el4L6eAvOqCeudMDVU0NThNaV+b9Df4dXgSP1gXMTnPdhfe/2qDH5cg==",
      "dependencies": {
        "loose-envify": "^1.4.0",
        "object-assign": "^4.1.1",
        "react-is": "^16.13.1"
      }
    },
    "node_modules/prop-types/node_modules/react-is": {
      "version": "16.13.1",
      "resolved": "https://registry.npmjs.org/react-is/-/react-is-16.13.1.tgz",
      "integrity": "sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ=="
    },
    "node_modules/punycode": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.1.1.tgz",
      "integrity": "sha512-XRsRjdf+j5ml+y/6GKHPZbrF/8p2Yga0JPtdqTIY2Xe5ohJPD9saDJJLPvp9+NSBprVvevdXZybnj2cv8OEd0A==",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/purgecss": {
      "version": "4.1.3",
      "resolved": "https://registry.npmjs.org/purgecss/-/purgecss-4.1.3.tgz",
      "integrity": "sha512-99cKy4s+VZoXnPxaoM23e5ABcP851nC2y2GROkkjS8eJaJtlciGavd7iYAw2V84WeBqggZ12l8ef44G99HmTaw==",
      "dependencies": {
        "commander": "^8.0.0",
        "glob": "^7.1.7",
        "postcss": "^8.3.5",
        "postcss-selector-parser": "^6.0.6"
      },
      "bin": {
        "purgecss": "bin/purgecss.js"
      }
    },
    "node_modules/query-string": {
      "version": "7.1.3",
      "resolved": "https://registry.npmjs.org/query-string/-/query-string-7.1.3.tgz",
      "integrity": "sha512-hh2WYhq4fi8+b+/2Kg9CEge4fDPvHS534aOOvOZeQ3+Vf2mCFsaFBYj0i+iXcAq6I9Vzp5fjMFBlONvayDC1qg==",
      "dependencies": {
        "decode-uri-component": "^0.2.2",
        "filter-obj": "^1.1.0",
        "split-on-first": "^1.0.0",
        "strict-uri-encode": "^2.0.0"
      },
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/queue-microtask": {
      "version": "1.2.3",
      "resolved": "https://registry.npmjs.org/queue-microtask/-/queue-microtask-1.2.3.tgz",
      "integrity": "sha512-NuaNSa6flKT5JaSYQzJok04JzTL1CA6aGhv5rfLW3PgqA+M2ChpZQnAC8h8i4ZFkBS8X5RqkDBHA7r4hej3K9A==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ]
    },
    "node_modules/quick-lru": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/quick-lru/-/quick-lru-5.1.1.tgz",
      "integrity": "sha512-WuyALRjWPDGtt/wzJiadO5AXY+8hZ80hVpe6MyivgraREW751X3SbhRvG3eLKOYN+8VEvqLcf3wdnt44Z4S4SA==",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/react": {
      "version": "17.0.2",
      "resolved": "https://registry.npmjs.org/react/-/react-17.0.2.tgz",
      "integrity": "sha512-gnhPt75i/dq/z3/6q/0asP78D0u592D5L1pd7M8P+dck6Fu/jJeL6iVVK23fptSUZj8Vjf++7wXA8UNclGQcbA==",
      "dependencies": {
        "loose-envify": "^1.1.0",
        "object-assign": "^4.1.1"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/react-chartjs-2": {
      "version": "4.3.1",
      "resolved": "https://registry.npmjs.org/react-chartjs-2/-/react-chartjs-2-4.3.1.tgz",
      "integrity": "sha512-5i3mjP6tU7QSn0jvb8I4hudTzHJqS8l00ORJnVwI2sYu0ihpj83Lv2YzfxunfxTZkscKvZu2F2w9LkwNBhj6xA==",
      "peerDependencies": {
        "chart.js": "^3.5.0",
        "react": "^16.8.0 || ^17.0.0 || ^18.0.0"
      }
    },
    "node_modules/react-color": {
      "version": "2.19.3",
      "resolved": "https://registry.npmjs.org/react-color/-/react-color-2.19.3.tgz",
      "integrity": "sha512-LEeGE/ZzNLIsFWa1TMe8y5VYqr7bibneWmvJwm1pCn/eNmrabWDh659JSPn9BuaMpEfU83WTOJfnCcjDZwNQTA==",
      "dependencies": {
        "@icons/material": "^0.2.4",
        "lodash": "^4.17.15",
        "lodash-es": "^4.17.15",
        "material-colors": "^1.2.1",
        "prop-types": "^15.5.10",
        "reactcss": "^1.2.0",
        "tinycolor2": "^1.4.1"
      },
      "peerDependencies": {
        "react": "*"
      }
    },
    "node_modules/react-dom": {
      "version": "17.0.2",
      "resolved": "https://registry.npmjs.org/react-dom/-/react-dom-17.0.2.tgz",
      "integrity": "sha512-s4h96KtLDUQlsENhMn1ar8t2bEa+q/YAtj8pPPdIjPDGBDIVNsrD9aXNWqspUe6AzKCIG0C1HZZLqLV7qpOBGA==",
      "dependencies": {
        "loose-envify": "^1.1.0",
        "object-assign": "^4.1.1",
        "scheduler": "^0.20.2"
      },
      "peerDependencies": {
        "react": "17.0.2"
      }
    },
    "node_modules/react-is": {
      "version": "18.2.0",
      "resolved": "https://registry.npmjs.org/react-is/-/react-is-18.2.0.tgz",
      "integrity": "sha512-xWGDIW6x921xtzPkhiULtthJHoJvBbF3q26fzloPCK0hsvxtPVelvftw3zjbHWSkR2km9Z+4uxbDDK/6Zw9B8w==",
      "peer": true
    },
    "node_modules/react-modal-image": {
      "version": "2.6.0",
      "resolved": "https://registry.npmjs.org/react-modal-image/-/react-modal-image-2.6.0.tgz",
      "integrity": "sha512-NNc1xPKzFAn0VsNMdJ8NXt6c54aL/z0fcoYmw9qn4SBUONdGl+8LOQ0sTfo0wtdzcjLiby/ncloHcAL+UI+wIA=="
    },
    "node_modules/react-notifications": {
      "version": "1.7.4",
      "resolved": "https://registry.npmjs.org/react-notifications/-/react-notifications-1.7.4.tgz",
      "integrity": "sha512-dsR7mUQfe8YdFLqVsjT0GFd4n26UWkzefdjMELfEVygjuuyU6ZZ0LpZhFHdfmraGeBFLWHNxygpGlHHituUyjQ==",
      "dependencies": {
        "acorn": "6.4.1",
        "classnames": "^2.1.1",
        "prop-types": "^15.5.10",
        "react-transition-group": "^4.4.1"
      }
    },
    "node_modules/react-toastify": {
      "version": "7.0.4",
      "resolved": "https://registry.npmjs.org/react-toastify/-/react-toastify-7.0.4.tgz",
      "integrity": "sha512-Rol7+Cn39hZp5hQ/k6CbMNE2CKYV9E5OQdC/hBLtIQU2xz7DdAm7xil4NITQTHR6zEbE5RVFbpgSwTD7xRGLeQ==",
      "dependencies": {
        "clsx": "^1.1.1"
      },
      "peerDependencies": {
        "react": ">=16",
        "react-dom": ">=16"
      }
    },
    "node_modules/react-transition-group": {
      "version": "4.4.5",
      "resolved": "https://registry.npmjs.org/react-transition-group/-/react-transition-group-4.4.5.tgz",
      "integrity": "sha512-pZcd1MCJoiKiBR2NRxeCRg13uCXbydPnmB4EOeRrY7480qNWO8IIgQG6zlDkm6uRMsURXPuKq0GWtiM59a5Q6g==",
      "dependencies": {
        "@babel/runtime": "^7.5.5",
        "dom-helpers": "^5.0.1",
        "loose-envify": "^1.4.0",
        "prop-types": "^15.6.2"
      },
      "peerDependencies": {
        "react": ">=16.6.0",
        "react-dom": ">=16.6.0"
      }
    },
    "node_modules/reactcss": {
      "version": "1.2.3",
      "resolved": "https://registry.npmjs.org/reactcss/-/reactcss-1.2.3.tgz",
      "integrity": "sha512-KiwVUcFu1RErkI97ywr8nvx8dNOpT03rbnma0SSalTYjkrPYaEajR4a/MRt6DZ46K6arDRbWMNHF+xH7G7n/8A==",
      "dependencies": {
        "lodash": "^4.0.1"
      }
    },
    "node_modules/readable-stream": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-4.2.0.tgz",
      "integrity": "sha512-gJrBHsaI3lgBoGMW/jHZsQ/o/TIWiu5ENCJG1BB7fuCKzpFM8GaS2UoBVt9NO+oI+3FcrBNbUkl3ilDe09aY4A==",
      "dependencies": {
        "abort-controller": "^3.0.0",
        "buffer": "^6.0.3",
        "events": "^3.3.0",
        "process": "^0.11.10"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      }
    },
    "node_modules/readable-stream/node_modules/buffer": {
      "version": "6.0.3",
      "resolved": "https://registry.npmjs.org/buffer/-/buffer-6.0.3.tgz",
      "integrity": "sha512-FTiCpNxtwiZZHEZbcbTIcZjERVICn9yq/pDFkTl95/AxzD1naBctN7YO68riM/gLSDY7sdrMby8hofADYuuqOA==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "dependencies": {
        "base64-js": "^1.3.1",
        "ieee754": "^1.2.1"
      }
    },
    "node_modules/readdirp": {
      "version": "3.6.0",
      "resolved": "https://registry.npmjs.org/readdirp/-/readdirp-3.6.0.tgz",
      "integrity": "sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==",
      "dependencies": {
        "picomatch": "^2.2.1"
      },
      "engines": {
        "node": ">=8.10.0"
      }
    },
    "node_modules/recoil": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/recoil/-/recoil-0.2.0.tgz",
      "integrity": "sha512-VOJfYVQ3VgmfS7L5tV9QdOR+AJhvll8yGr1+3nJPCqADulImuScGZ2sJtejPps3zfTu/o98y5kO4lje8Tx6XHw==",
      "dependencies": {
        "hamt_plus": "1.0.2"
      },
      "peerDependencies": {
        "react": ">=16.13.1"
      },
      "peerDependenciesMeta": {
        "react-dom": {
          "optional": true
        },
        "react-native": {
          "optional": true
        }
      }
    },
    "node_modules/reduce-css-calc": {
      "version": "2.1.8",
      "resolved": "https://registry.npmjs.org/reduce-css-calc/-/reduce-css-calc-2.1.8.tgz",
      "integrity": "sha512-8liAVezDmUcH+tdzoEGrhfbGcP7nOV4NkGE3a74+qqvE7nt9i4sKLGBuZNOnpI4WiGksiNPklZxva80061QiPg==",
      "dependencies": {
        "css-unit-converter": "^1.1.1",
        "postcss-value-parser": "^3.3.0"
      }
    },
    "node_modules/reduce-css-calc/node_modules/postcss-value-parser": {
      "version": "3.3.1",
      "resolved": "https://registry.npmjs.org/postcss-value-parser/-/postcss-value-parser-3.3.1.tgz",
      "integrity": "sha512-pISE66AbVkp4fDQ7VHBwRNXzAAKJjw4Vw7nWI/+Q3vuly7SNfgYXvm6i5IgFylHGK5sP/xHAbB7N49OS4gWNyQ=="
    },
    "node_modules/regenerator-runtime": {
      "version": "0.13.10",
      "resolved": "https://registry.npmjs.org/regenerator-runtime/-/regenerator-runtime-0.13.10.tgz",
      "integrity": "sha512-KepLsg4dU12hryUO7bp/axHAKvwGOCV0sGloQtpagJ12ai+ojVDqkeGSiRX1zlq+kjIMZ1t7gpze+26QqtdGqw=="
    },
    "node_modules/resolve": {
      "version": "1.22.1",
      "resolved": "https://registry.npmjs.org/resolve/-/resolve-1.22.1.tgz",
      "integrity": "sha512-nBpuuYuY5jFsli/JIs1oldw6fOQCBioohqWZg/2hiaOybXOft4lonv85uDOKXdf8rhyK159cxU5cDcK/NKk8zw==",
      "dependencies": {
        "is-core-module": "^2.9.0",
        "path-parse": "^1.0.7",
        "supports-preserve-symlinks-flag": "^1.0.0"
      },
      "bin": {
        "resolve": "bin/resolve"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/resolve-from": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-4.0.0.tgz",
      "integrity": "sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/reusify": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/reusify/-/reusify-1.0.4.tgz",
      "integrity": "sha512-U9nH88a3fc/ekCF1l0/UP1IosiuIjyTh7hBvXVMHYgVcfGvt897Xguj2UOLDeI5BG2m7/uwyaLVT6fbtCwTyzw==",
      "engines": {
        "iojs": ">=1.0.0",
        "node": ">=0.10.0"
      }
    },
    "node_modules/rgb-regex": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/rgb-regex/-/rgb-regex-1.0.1.tgz",
      "integrity": "sha512-gDK5mkALDFER2YLqH6imYvK6g02gpNGM4ILDZ472EwWfXZnC2ZEpoB2ECXTyOVUKuk/bPJZMzwQPBYICzP+D3w=="
    },
    "node_modules/rgba-regex": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/rgba-regex/-/rgba-regex-1.0.0.tgz",
      "integrity": "sha512-zgn5OjNQXLUTdq8m17KdaicF6w89TZs8ZU8y0AYENIU6wG8GG6LLm0yLSiPY8DmaYmHdgRW8rnApjoT0fQRfMg=="
    },
    "node_modules/rimraf": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/rimraf/-/rimraf-3.0.2.tgz",
      "integrity": "sha512-JZkJMZkAGFFPP2YqXZXPbMlMBgsxzE8ILs4lMIX/2o0L9UBw9O/Y3o6wFw/i9YLapcUJWwqbi3kdxIPdC62TIA==",
      "dependencies": {
        "glob": "^7.1.3"
      },
      "bin": {
        "rimraf": "bin.js"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/run-parallel": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/run-parallel/-/run-parallel-1.2.0.tgz",
      "integrity": "sha512-5l4VyZR86LZ/lDxZTR6jqL8AFE2S0IFLMP26AbjsLVADxHdhB/c0GUsH+y39UfCi3dzz8OlQuPmnaJOMoDHQBA==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "dependencies": {
        "queue-microtask": "^1.2.2"
      }
    },
    "node_modules/rxjs": {
      "version": "7.8.1",
      "resolved": "https://registry.npmjs.org/rxjs/-/rxjs-7.8.1.tgz",
      "integrity": "sha512-AA3TVj+0A2iuIoQkWEK/tqFjBq2j+6PO6Y0zJcvzLAFhEFIO3HL0vls9hWLncZbAAbK0mar7oZ4V079I/qPMxg==",
      "dependencies": {
        "tslib": "^2.1.0"
      }
    },
    "node_modules/safe-buffer": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
      "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ]
    },
    "node_modules/saslprep": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/saslprep/-/saslprep-1.0.3.tgz",
      "integrity": "sha512-/MY/PEMbk2SuY5sScONwhUDsV2p77Znkb/q3nSVstq/yQzYJOH/Azh29p9oJLsl3LnQwSvZDKagDGBsBwSooag==",
      "optional": true,
      "dependencies": {
        "sparse-bitfield": "^3.0.3"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/scheduler": {
      "version": "0.20.2",
      "resolved": "https://registry.npmjs.org/scheduler/-/scheduler-0.20.2.tgz",
      "integrity": "sha512-2eWfGgAqqWFGqtdMmcL5zCMK1U8KlXv8SQFGglL3CEtd0aDVDWgeF/YoCmvln55m5zSk3J/20hTaSBeSObsQDQ==",
      "dependencies": {
        "loose-envify": "^1.1.0",
        "object-assign": "^4.1.1"
      }
    },
    "node_modules/setprototypeof": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz",
      "integrity": "sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw=="
    },
    "node_modules/shallowequal": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/shallowequal/-/shallowequal-1.1.0.tgz",
      "integrity": "sha512-y0m1JoUZSlPAjXVtPPW70aZWfIL/dSP7AFkRnniLCrK/8MDKog3TySTBmckD+RObVxH0v4Tox67+F14PdED2oQ=="
    },
    "node_modules/simple-swizzle": {
      "version": "0.2.2",
      "resolved": "https://registry.npmjs.org/simple-swizzle/-/simple-swizzle-0.2.2.tgz",
      "integrity": "sha512-JA//kQgZtbuY83m+xT+tXJkmJncGMTFT+C+g2h2R9uxkYIrE2yy9sgmcLhCnw57/WSD+Eh3J97FPEDFnbXnDUg==",
      "dependencies": {
        "is-arrayish": "^0.3.1"
      }
    },
    "node_modules/simple-swizzle/node_modules/is-arrayish": {
      "version": "0.3.2",
      "resolved": "https://registry.npmjs.org/is-arrayish/-/is-arrayish-0.3.2.tgz",
      "integrity": "sha512-eVRqCvVlZbuw3GrM63ovNSNAeA1K16kaR/LRY/92w0zxQ5/1YzwblUX652i4Xs9RwAGjW9d9y6X88t8OaAJfWQ=="
    },
    "node_modules/smart-buffer": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/smart-buffer/-/smart-buffer-4.2.0.tgz",
      "integrity": "sha512-94hK0Hh8rPqQl2xXc3HsaBoOXKV20MToPkcXvwbISWLEs+64sBq5kFgn2kJDHb1Pry9yrP0dxrCI9RRci7RXKg==",
      "engines": {
        "node": ">= 6.0.0",
        "npm": ">= 3.0.0"
      }
    },
    "node_modules/socks": {
      "version": "2.7.1",
      "resolved": "https://registry.npmjs.org/socks/-/socks-2.7.1.tgz",
      "integrity": "sha512-7maUZy1N7uo6+WVEX6psASxtNlKaNVMlGQKkG/63nEDdLOWNbiUMoLK7X4uYoLhQstau72mLgfEWcXcwsaHbYQ==",
      "dependencies": {
        "ip": "^2.0.0",
        "smart-buffer": "^4.2.0"
      },
      "engines": {
        "node": ">= 10.13.0",
        "npm": ">= 3.0.0"
      }
    },
    "node_modules/source-map-js": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/source-map-js/-/source-map-js-1.0.2.tgz",
      "integrity": "sha512-R0XvVJ9WusLiqTCEiGCmICCMplcCkIwwR11mOSD9CR5u+IXYdiseeEuXCVAjS54zqwkLcPNnmU4OeJ6tUrWhDw==",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/sparse-bitfield": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/sparse-bitfield/-/sparse-bitfield-3.0.3.tgz",
      "integrity": "sha512-kvzhi7vqKTfkh0PZU+2D2PIllw2ymqJKujUcyPMd9Y75Nv4nPbGJZXNhxsgdQab2BmlDct1YnfQCguEvHr7VsQ==",
      "optional": true,
      "dependencies": {
        "memory-pager": "^1.0.2"
      }
    },
    "node_modules/split-on-first": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/split-on-first/-/split-on-first-1.1.0.tgz",
      "integrity": "sha512-43ZssAJaMusuKWL8sKUBQXHWOpq8d6CfN/u1p4gUzfJkM05C8rxTmYrkIPTXapZpORA6LkkzcUulJ8FqA7Uudw==",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/split2": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/split2/-/split2-4.1.0.tgz",
      "integrity": "sha512-VBiJxFkxiXRlUIeyMQi8s4hgvKCSjtknJv/LVYbrgALPwf5zSKmEwV9Lst25AkvMDnvxODugjdl6KZgwKM1WYQ==",
      "engines": {
        "node": ">= 10.x"
      }
    },
    "node_modules/statuses": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/statuses/-/statuses-1.5.0.tgz",
      "integrity": "sha512-OpZ3zP+jT1PI7I8nemJX4AKmAX070ZkYPVWV/AaKTJl+tXCTGyVdC1a4SL8RUQYEwk/f34ZX8UTykN68FwrqAA==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/strict-uri-encode": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/strict-uri-encode/-/strict-uri-encode-2.0.0.tgz",
      "integrity": "sha512-QwiXZgpRcKkhTj2Scnn++4PKtWsH0kpzZ62L2R6c/LUVYv7hVnZqcg2+sMuT6R7Jusu1vviK/MFsu6kNJfWlEQ==",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/string-similarity": {
      "version": "4.0.4",
      "resolved": "https://registry.npmjs.org/string-similarity/-/string-similarity-4.0.4.tgz",
      "integrity": "sha512-/q/8Q4Bl4ZKAPjj8WerIBJWALKkaPRfrvhfF8k/B23i4nzrlRj2/go1m90In7nG/3XDSbOo0+pu6RvCTM9RGMQ==",
      "deprecated": "Package no longer supported. Contact Support at https://www.npmjs.com/support for more info."
    },
    "node_modules/strnum": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/strnum/-/strnum-1.0.5.tgz",
      "integrity": "sha512-J8bbNyKKXl5qYcR36TIO8W3mVGVHrmmxsd5PAItGkmyzwJvybiw2IVq5nqd0i4LSNSkB/sx9VHllbfFdr9k1JA==",
      "optional": true
    },
    "node_modules/styled-components": {
      "version": "5.3.6",
      "resolved": "https://registry.npmjs.org/styled-components/-/styled-components-5.3.6.tgz",
      "integrity": "sha512-hGTZquGAaTqhGWldX7hhfzjnIYBZ0IXQXkCYdvF1Sq3DsUaLx6+NTHC5Jj1ooM2F68sBiVz3lvhfwQs/S3l6qg==",
      "hasInstallScript": true,
      "dependencies": {
        "@babel/helper-module-imports": "^7.0.0",
        "@babel/traverse": "^7.4.5",
        "@emotion/is-prop-valid": "^1.1.0",
        "@emotion/stylis": "^0.8.4",
        "@emotion/unitless": "^0.7.4",
        "babel-plugin-styled-components": ">= 1.12.0",
        "css-to-react-native": "^3.0.0",
        "hoist-non-react-statics": "^3.0.0",
        "shallowequal": "^1.1.0",
        "supports-color": "^5.5.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/styled-components"
      },
      "peerDependencies": {
        "react": ">= 16.8.0",
        "react-dom": ">= 16.8.0",
        "react-is": ">= 16.8.0"
      }
    },
    "node_modules/styled-jsx": {
      "version": "5.0.4",
      "resolved": "https://registry.npmjs.org/styled-jsx/-/styled-jsx-5.0.4.tgz",
      "integrity": "sha512-sDFWLbg4zR+UkNzfk5lPilyIgtpddfxXEULxhujorr5jtePTUqiPDc5BC0v1NRqTr/WaFBGQQUoYToGlF4B2KQ==",
      "engines": {
        "node": ">= 12.0.0"
      },
      "peerDependencies": {
        "react": ">= 16.8.0 || 17.x.x || ^18.0.0-0"
      },
      "peerDependenciesMeta": {
        "@babel/core": {
          "optional": true
        },
        "babel-plugin-macros": {
          "optional": true
        }
      }
    },
    "node_modules/supports-color": {
      "version": "5.5.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-5.5.0.tgz",
      "integrity": "sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==",
      "dependencies": {
        "has-flag": "^3.0.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/supports-preserve-symlinks-flag": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/supports-preserve-symlinks-flag/-/supports-preserve-symlinks-flag-1.0.0.tgz",
      "integrity": "sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/tailwindcss": {
      "version": "2.2.19",
      "resolved": "https://registry.npmjs.org/tailwindcss/-/tailwindcss-2.2.19.tgz",
      "integrity": "sha512-6Ui7JSVtXadtTUo2NtkBBacobzWiQYVjYW0ZnKaP9S1ZCKQ0w7KVNz+YSDI/j7O7KCMHbOkz94ZMQhbT9pOqjw==",
      "dependencies": {
        "arg": "^5.0.1",
        "bytes": "^3.0.0",
        "chalk": "^4.1.2",
        "chokidar": "^3.5.2",
        "color": "^4.0.1",
        "cosmiconfig": "^7.0.1",
        "detective": "^5.2.0",
        "didyoumean": "^1.2.2",
        "dlv": "^1.1.3",
        "fast-glob": "^3.2.7",
        "fs-extra": "^10.0.0",
        "glob-parent": "^6.0.1",
        "html-tags": "^3.1.0",
        "is-color-stop": "^1.1.0",
        "is-glob": "^4.0.1",
        "lodash": "^4.17.21",
        "lodash.topath": "^4.5.2",
        "modern-normalize": "^1.1.0",
        "node-emoji": "^1.11.0",
        "normalize-path": "^3.0.0",
        "object-hash": "^2.2.0",
        "postcss-js": "^3.0.3",
        "postcss-load-config": "^3.1.0",
        "postcss-nested": "5.0.6",
        "postcss-selector-parser": "^6.0.6",
        "postcss-value-parser": "^4.1.0",
        "pretty-hrtime": "^1.0.3",
        "purgecss": "^4.0.3",
        "quick-lru": "^5.1.1",
        "reduce-css-calc": "^2.1.8",
        "resolve": "^1.20.0",
        "tmp": "^0.2.1"
      },
      "bin": {
        "tailwind": "lib/cli.js",
        "tailwindcss": "lib/cli.js"
      },
      "engines": {
        "node": ">=12.13.0"
      },
      "peerDependencies": {
        "autoprefixer": "^10.0.2",
        "postcss": "^8.0.9"
      }
    },
    "node_modules/tailwindcss/node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/tailwindcss/node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/tailwindcss/node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/tailwindcss/node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA=="
    },
    "node_modules/tailwindcss/node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/tailwindcss/node_modules/postcss-load-config": {
      "version": "3.1.4",
      "resolved": "https://registry.npmjs.org/postcss-load-config/-/postcss-load-config-3.1.4.tgz",
      "integrity": "sha512-6DiM4E7v4coTE4uzA8U//WhtPwyhiim3eyjEMFCnUpzbrkK9wJHgKDT2mR+HbtSrd/NubVaYTOpSpjUl8NQeRg==",
      "dependencies": {
        "lilconfig": "^2.0.5",
        "yaml": "^1.10.2"
      },
      "engines": {
        "node": ">= 10"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/postcss/"
      },
      "peerDependencies": {
        "postcss": ">=8.0.9",
        "ts-node": ">=9.0.0"
      },
      "peerDependenciesMeta": {
        "postcss": {
          "optional": true
        },
        "ts-node": {
          "optional": true
        }
      }
    },
    "node_modules/tailwindcss/node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/text-encoding-utf-8": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/text-encoding-utf-8/-/text-encoding-utf-8-1.0.2.tgz",
      "integrity": "sha512-8bw4MY9WjdsD2aMtO0OzOCY3pXGYNx2d2FfHRVUKkiCPDWjKuOlhLVASS+pD7VkLTVjW268LYJHwsnPFlBpbAg=="
    },
    "node_modules/timsort": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/timsort/-/timsort-0.3.0.tgz",
      "integrity": "sha512-qsdtZH+vMoCARQtyod4imc2nIJwg9Cc7lPRrw9CzF8ZKR0khdr8+2nX80PBhET3tcyTtJDxAffGh2rXH4tyU8A=="
    },
    "node_modules/tinycolor2": {
      "version": "1.4.2",
      "resolved": "https://registry.npmjs.org/tinycolor2/-/tinycolor2-1.4.2.tgz",
      "integrity": "sha512-vJhccZPs965sV/L2sU4oRQVAos0pQXwsvTLkWYdqJ+a8Q5kPFzJTuOFwy7UniPli44NKQGAglksjvOcpo95aZA==",
      "engines": {
        "node": "*"
      }
    },
    "node_modules/tmp": {
      "version": "0.2.1",
      "resolved": "https://registry.npmjs.org/tmp/-/tmp-0.2.1.tgz",
      "integrity": "sha512-76SUhtfqR2Ijn+xllcI5P1oyannHNHByD80W1q447gU3mp9G9PSpGdWmjUOHRDPiHYacIk66W7ubDTuPF3BEtQ==",
      "dependencies": {
        "rimraf": "^3.0.0"
      },
      "engines": {
        "node": ">=8.17.0"
      }
    },
    "node_modules/to-fast-properties": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/to-fast-properties/-/to-fast-properties-2.0.0.tgz",
      "integrity": "sha512-/OaKK0xYrs3DmxRYqL/yDc+FxFUVYhDlXMhRmv3z915w2HF1tnN1omB354j8VUGO/hbRzyD6Y3sA7v7GS/ceog==",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/to-regex-range": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz",
      "integrity": "sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==",
      "dependencies": {
        "is-number": "^7.0.0"
      },
      "engines": {
        "node": ">=8.0"
      }
    },
    "node_modules/toidentifier": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/toidentifier/-/toidentifier-1.0.1.tgz",
      "integrity": "sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA==",
      "engines": {
        "node": ">=0.6"
      }
    },
    "node_modules/tr46": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/tr46/-/tr46-3.0.0.tgz",
      "integrity": "sha512-l7FvfAHlcmulp8kr+flpQZmVwtu7nfRV7NZujtN0OqES8EL4O4e0qqzL0DC5gAvx/ZC/9lk6rhcUwYvkBnBnYA==",
      "dependencies": {
        "punycode": "^2.1.1"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/tslib": {
      "version": "2.4.1",
      "resolved": "https://registry.npmjs.org/tslib/-/tslib-2.4.1.tgz",
      "integrity": "sha512-tGyy4dAjRIEwI7BzsB0lynWgOpfqjUdq91XXAlIWD2OwKBH7oCl/GZG/HT4BOHrTlPMOASlMQ7veyTqpmRcrNA=="
    },
    "node_modules/tweetnacl": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/tweetnacl/-/tweetnacl-1.0.3.tgz",
      "integrity": "sha512-6rt+RN7aOi1nGMyC4Xa5DdYiukl2UWCbcJft7YhxReBGQD7OAM8Pbxw6YMo4r2diNEA8FEmu32YOn9rhaiE5yw=="
    },
    "node_modules/twin.macro": {
      "version": "2.8.2",
      "resolved": "https://registry.npmjs.org/twin.macro/-/twin.macro-2.8.2.tgz",
      "integrity": "sha512-2Vg09mp+nA70AWUedJ8WRgB2me3buq7JGbOnjHnFnNaBzomVu5k7lJ9YGpByIlre+UYr7QRhtlj7+IUKxvCrUA==",
      "dependencies": {
        "@babel/parser": "^7.12.5",
        "@babel/template": "^7.14.5",
        "autoprefixer": "^10.2.5",
        "babel-plugin-macros": "^2.8.0",
        "chalk": "^4.1.0",
        "clean-set": "^1.1.1",
        "color": "^3.1.3",
        "dset": "^2.0.1",
        "lodash.flatmap": "^4.5.0",
        "lodash.get": "^4.4.2",
        "lodash.merge": "^4.6.2",
        "postcss": "^8.1.8",
        "string-similarity": "^4.0.3",
        "tailwindcss": "^2.2.7",
        "timsort": "^0.3.0"
      },
      "engines": {
        "node": ">=12.13.0"
      }
    },
    "node_modules/twin.macro/node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/twin.macro/node_modules/ansi-styles/node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/twin.macro/node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/twin.macro/node_modules/color": {
      "version": "3.2.1",
      "resolved": "https://registry.npmjs.org/color/-/color-3.2.1.tgz",
      "integrity": "sha512-aBl7dZI9ENN6fUGC7mWpMTPNHmWUSNan9tuWN6ahh5ZLNk9baLJOnSMlrQkHcrfFgz2/RigjUVAjdx36VcemKA==",
      "dependencies": {
        "color-convert": "^1.9.3",
        "color-string": "^1.6.0"
      }
    },
    "node_modules/twin.macro/node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA=="
    },
    "node_modules/twin.macro/node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/twin.macro/node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/typescript": {
      "version": "4.9.3",
      "resolved": "https://registry.npmjs.org/typescript/-/typescript-4.9.3.tgz",
      "integrity": "sha512-CIfGzTelbKNEnLpLdGFgdyKhG23CKdKgQPOBc+OUNrkJ2vr+KSzsSV5kq5iWhEQbok+quxgGzrAtGWCyU7tHnA==",
      "dev": true,
      "bin": {
        "tsc": "bin/tsc",
        "tsserver": "bin/tsserver"
      },
      "engines": {
        "node": ">=4.2.0"
      }
    },
    "node_modules/u3": {
      "version": "0.1.1",
      "resolved": "https://registry.npmjs.org/u3/-/u3-0.1.1.tgz",
      "integrity": "sha512-+J5D5ir763y+Am/QY6hXNRlwljIeRMZMGs0cT6qqZVVzzT3X3nFPXVyPOFRMOR4kupB0T8JnCdpWdp6Q/iXn3w=="
    },
    "node_modules/universalify": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/universalify/-/universalify-2.0.0.tgz",
      "integrity": "sha512-hAZsKq7Yy11Zu1DE0OzWjw7nnLZmJZYTDZZyEFHZdUhV8FkH5MCfoU1XMaxXovpyW5nq5scPqq0ZDP9Zyl04oQ==",
      "engines": {
        "node": ">= 10.0.0"
      }
    },
    "node_modules/update-browserslist-db": {
      "version": "1.0.10",
      "resolved": "https://registry.npmjs.org/update-browserslist-db/-/update-browserslist-db-1.0.10.tgz",
      "integrity": "sha512-OztqDenkfFkbSG+tRxBeAnCVPckDBcvibKd35yDONx6OU8N7sqgwc7rCbkJ/WcYtVRZ4ba68d6byhC21GFh7sQ==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        }
      ],
      "dependencies": {
        "escalade": "^3.1.1",
        "picocolors": "^1.0.0"
      },
      "bin": {
        "browserslist-lint": "cli.js"
      },
      "peerDependencies": {
        "browserslist": ">= 4.21.0"
      }
    },
    "node_modules/use-sync-external-store": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/use-sync-external-store/-/use-sync-external-store-1.2.0.tgz",
      "integrity": "sha512-eEgnFxGQ1Ife9bzYs6VLi8/4X6CObHMw9Qr9tPY43iKwsPw8xE8+EFsf/2cFZ5S3esXgpWgtSCtLNS41F+sKPA==",
      "peerDependencies": {
        "react": "^16.8.0 || ^17.0.0 || ^18.0.0"
      }
    },
    "node_modules/util-deprecate": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz",
      "integrity": "sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw=="
    },
    "node_modules/uuid": {
      "version": "8.3.2",
      "resolved": "https://registry.npmjs.org/uuid/-/uuid-8.3.2.tgz",
      "integrity": "sha512-+NYs2QeMWy+GWFOEm9xnn6HCDp0l7QBD7ml8zLUmJ+93Q5NF0NocErnwkTkXVFNiX3/fpC6afS8Dhb/gz7R7eg==",
      "optional": true,
      "bin": {
        "uuid": "dist/bin/uuid"
      }
    },
    "node_modules/webidl-conversions": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-7.0.0.tgz",
      "integrity": "sha512-VwddBukDzu71offAQR975unBIGqfKZpM+8ZX6ySk8nYhVoo5CYaZyzt3YBvYtRtO+aoGlqxPg/B87NGVZ/fu6g==",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/whatwg-url": {
      "version": "11.0.0",
      "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-11.0.0.tgz",
      "integrity": "sha512-RKT8HExMpoYx4igMiVMY83lN6UeITKJlBQ+vR/8ZJ8OCdSiN3RwCq+9gH0+Xzj0+5IrM6i4j/6LuvzbZIQgEcQ==",
      "dependencies": {
        "tr46": "^3.0.0",
        "webidl-conversions": "^7.0.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/wrappy": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
      "integrity": "sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ=="
    },
    "node_modules/xtend": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/xtend/-/xtend-4.0.2.tgz",
      "integrity": "sha512-LKYU1iAXJXUgAXn9URjiu+MWhyUXHsvfp7mcuYm9dSUKK0/CjtrUwFAxD82/mCWbtLsGjFIad0wIsod4zrTAEQ==",
      "engines": {
        "node": ">=0.4"
      }
    },
    "node_modules/yaml": {
      "version": "1.10.2",
      "resolved": "https://registry.npmjs.org/yaml/-/yaml-1.10.2.tgz",
      "integrity": "sha512-r3vXyErRCYJ7wg28yvBY5VSoAF8ZvlcW9/BwUzEtUsjvX/DKs24dIkuwjtuprwJJHsbyUbLApepYTR1BN4uHrg==",
      "engines": {
        "node": ">= 6"
      }
    }
  }
}

'''
'''--- package.json ---
{
  "name": "my-project",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev -p 3030",
    "build": "next build",
    "start": "next start"
  },
  "babelMacros": {
    "twin": {
      "preset": "styled-components"
    }
  },
  "dependencies": {
    "@headlessui/react": "^1.0.0",
    "@heroicons/react": "^1.0.1",
    "@near-wallet-selector/core": "^8.9.5",
    "@near-wallet-selector/meteor-wallet": "^8.9.5",
    "@tailwindcss/aspect-ratio": "^0.2.0",
    "axios": "^0.21.1",
    "b58": "^4.0.3",
    "bn.js": "^5.2.0",
    "chart.js": "^3.7.1",
    "immer": "^9.0.1",
    "lzutf8": "^0.6.0",
    "mongodb": "^4.0.1",
    "near-api-js": "^0.44.2",
    "near-transaction-manager": "^0.1.1",
    "next": "~12.2.5",
    "pg": "^8.7.1",
    "react": "17.0.2",
    "react-chartjs-2": "^4.1.0",
    "react-color": "^2.19.3",
    "react-dom": "17.0.2",
    "react-modal-image": "^2.5.0",
    "react-notifications": "^1.7.2",
    "react-toastify": "^7.0.4",
    "recoil": "^0.2.0",
    "styled-components": "^5.3.0",
    "tweetnacl": "^1.0.3",
    "twin.macro": "^2.5.0"
  },
  "devDependencies": {
    "@tailwindcss/forms": "^0.3.2",
    "@types/react": "^17.0.52",
    "autoprefixer": "^10.2.5",
    "postcss": "^8.2.10",
    "tailwindcss": "^2.1.1",
    "typescript": "^4.3.5"
  }
}

'''
'''--- pages/_app.js ---
import "../styles/globals.css";
import { RecoilRoot } from "recoil";
import dynamic from "next/dynamic";
import { GlobalStyles } from "twin.macro";

function MyApp({ Component, pageProps }) {

  return (
    <RecoilRoot>
      <GlobalStyles />
      <Component {...pageProps} />
    </RecoilRoot>
  );
}

export default dynamic(() => Promise.resolve(MyApp), {
  ssr: false,
});
//export default MyApp;

'''
'''--- pages/_document.js ---
import Document from "next/document";
import { ServerStyleSheet } from "styled-components";

export default class MyDocument extends Document {
  static async getInitialProps(ctx) {
    const sheet = new ServerStyleSheet();
    const originalRenderPage = ctx.renderPage;
    try {
      ctx.renderPage = () =>
        originalRenderPage({
          enhanceApp: (App) => (props) =>
            sheet.collectStyles(<App {...props} />),
        });
      const initialProps = await Document.getInitialProps(ctx);

      return {
        ...initialProps,
        styles: (
          <>
            {initialProps.styles}
            {sheet.getStyleElement()}
          </>
        ),
      };
    } finally {
      sheet.seal();
    }
  }
}

'''
'''--- pages/api/admin/ch-banishment.ts ---
import type { NextApiRequest, NextApiResponse } from 'next'
import { logCryptoHeroErrorDb } from '../../../utils/backend/common/mongo-helper';
import { is_defined_request, is_valid_request, setup_headers } from '../../../utils/backend/common/rq_utils';
import { BanishmentRequest } from '../../../utils/backend/common/types';
import { _onlyPxDapps } from '../../../utils/backend/common/blockchain';
import { banAccount, getDbBannedAccounts, unbanAccount } from '../../../utils/backend/cryptohero/helper/basic_game';

export default async (
    req: NextApiRequest,
    res: NextApiResponse<any>
) => {
    setup_headers(req, res);

    const rq: BanishmentRequest = req.body;

    if (!is_valid_request([rq.account_id, rq.password, rq.user_id], res)) {
        return;
    }

    if (!is_defined_request([rq.reason, rq.temporary, rq.unban, rq.readonly], res)) {
        return;
    }

    try {
        _onlyPxDapps(rq.account_id, rq.password);

        if (!rq.readonly) {
            if (!rq.unban) {
                await banAccount(rq.user_id, rq.temporary, rq.reason);
            } else {
                await unbanAccount(rq.user_id);
            }

            res.status(200).json({ success: true });
        } else {
            const accounts = await getDbBannedAccounts();
            res.status(200).json({ success: true, data: accounts });
        }
    }
    catch (err) {
        await logCryptoHeroErrorDb(err, rq.account_id, "ch-banishment");
        res.status(200).json({ success: false });
    }
}
'''
'''--- pages/api/admin/ch-errors.ts ---
import type { NextApiRequest, NextApiResponse } from 'next'
import { getCryptoHeroDb, logCryptoHeroErrorDb } from '../../../utils/backend/common/mongo-helper';
import { is_defined_request, is_valid_request, setup_headers } from '../../../utils/backend/common/rq_utils';
import { ExceptionRequest } from '../../../utils/backend/common/types';
import { _onlyPxDapps } from '../../../utils/backend/common/blockchain';

export default async (
    req: NextApiRequest,
    res: NextApiResponse<any>
) => {
    setup_headers(req, res);

    const rq: ExceptionRequest = req.body;

    if (!is_valid_request([rq.account_id, rq.password], res)) {
        return;
    }

    if (!is_defined_request([rq.limit, rq.countonly], res)) {
        return;
    }

    try {
        _onlyPxDapps(rq.account_id, rq.password);

        const db = await getCryptoHeroDb();

        if (!rq.countonly) {
            const filter = {};

            if (rq.user_id) {
                filter["user"] = rq.user_id;
            }

            if (rq.method_name) {
                filter["method"] = rq.method_name;
            }

            if (rq.error_descr) {
                filter["error"] = rq.error_descr;
            }

            const errors = (await db.collection("err")
                .find(filter, { projection: { _id: 0 } })
                .sort({ created_at: -1 })
                .limit(rq.limit)
                .toArray())
                .reverse();

            return res.status(200).json({ success: true, data: errors });
        }
        else {
            const result = await db.collection("err").aggregate([
                {
                    '$match': {
                        'created_at': {
                            '$gte': new Date(new Date().getTime() - 86400000)
                        }
                    }
                },
                {
                    '$group': {
                        '_id': '$user',
                        'count': {
                            '$sum': 1
                        }
                    }
                },
                {
                    '$sort': {
                        'count': -1
                    }
                }
            ])
            .toArray()

            return res.status(200).json({ success: true, data: result });
        }
    }
    catch (err) {
        await logCryptoHeroErrorDb(err, rq.account_id, "ch-errors");
        res.status(200).json({ success: false });
    }
}
'''
'''--- pages/api/admin/ch/edit-item.ts ---
import type { NextApiRequest, NextApiResponse } from 'next'
import { is_valid_request, setup_headers } from '../../../../utils/backend/common/rq_utils';
import { getCryptoHeroDb, logCryptoHeroErrorDb } from '../../../../utils/backend/common/mongo-helper';
import { EditItemRequest } from '../../../../utils/backend/cryptohero/helper/types';
import { _onlyPxDapps } from '../../../../utils/backend/common/blockchain';

export default async (
    req: NextApiRequest,
    res: NextApiResponse<any>
) => {
    setup_headers(req, res);

    const rq: EditItemRequest = req.body;

    if (!is_valid_request([rq.account_id, rq.password, rq.itemdata], res)) {
        return;
    }

    try {
        _onlyPxDapps(rq.account_id, rq.password);
        
        const db = await getCryptoHeroDb();
        const options = { upsert: true };

        await db.collection("items").replaceOne(
            { item_type: rq.itemdata.item_type },
            rq.itemdata,
            options
        );

        res.status(200).json({ success: true });
    }
    catch (err) {
        await logCryptoHeroErrorDb(err, rq.account_id, "edit-item");
        res.status(200).json({ success: false, error: "Check transaction error on wallet." });
    }
}
'''
'''--- pages/api/admin/ch/edit-monster.ts ---
import type { NextApiRequest, NextApiResponse } from 'next'
import { is_valid_request, setup_headers } from '../../../../utils/backend/common/rq_utils';
import { getCryptoHeroDb, logCryptoHeroErrorDb } from '../../../../utils/backend/common/mongo-helper';
import { EditMonsterRequest } from '../../../../utils/backend/cryptohero/helper/types';
import { _onlyPxDapps } from '../../../../utils/backend/common/blockchain';

export default async (
    req: NextApiRequest,
    res: NextApiResponse<any>
) => {
    setup_headers(req, res);

    const rq: EditMonsterRequest = req.body;

    if (!is_valid_request([rq.account_id, rq.password, rq.monsterdata], res)) {
        return;
    }

    try {
        _onlyPxDapps(rq.account_id, rq.password);
        
        const db = await getCryptoHeroDb();
        const options = { upsert: true };

        await db.collection("monsters").replaceOne(
            { monster_type: rq.monsterdata.monster_type },
            rq.monsterdata,
            options
        );

        res.status(200).json({ success: true });
    }
    catch (err) {
        await logCryptoHeroErrorDb(err, rq.account_id, "edit-monster");
        res.status(200).json({ success: false, error: "Check transaction error on wallet." });
    }
}
'''
'''--- pages/api/admin/ctt/edit-map.ts ---
import type { NextApiRequest, NextApiResponse } from 'next'
import { is_valid_request, setup_headers } from '../../../../utils/backend/common/rq_utils';
import { EditMapRequest } from '../../../../utils/backend/chainteamtactics/helper/types';
import { _onlyPxDapps } from '../../../../utils/backend/common/blockchain';
import { getChainTeamTacticsDb, logChainTeamTacticsErrorDb } from '../../../../utils/backend/common/mongo-helper';

export default async (
    req: NextApiRequest,
    res: NextApiResponse<any>
) => {
    setup_headers(req, res);

    const rq: EditMapRequest = req.body;

    if (!is_valid_request([rq.account_id, rq.password, rq.mapdata], res)) {
        return;
    }

    try {
        _onlyPxDapps(rq.account_id, rq.password);
        
        const db = await getChainTeamTacticsDb();
        const options = { upsert: true };

        await db.collection("maps").replaceOne(
            { map_type: rq.mapdata.map_type },
            rq.mapdata,
            options
        );

        res.status(200).json({ success: true });
    }
    catch (err) {
        await logChainTeamTacticsErrorDb(err, rq.account_id, "edit-map");
        res.status(200).json({ success: false, error: "Check transaction error on wallet." });
    }
}
'''
'''--- pages/api/admin/ctt/edit-unit.ts ---
import type { NextApiRequest, NextApiResponse } from 'next'
import { is_valid_request, setup_headers } from '../../../../utils/backend/common/rq_utils';
import { EditUnitRequest } from '../../../../utils/backend/chainteamtactics/helper/types';
import { APP_CONTRACT, changeFunctionWithoutAttachment, checkFunctionResponse, _onlyPxDapps } from '../../../../utils/backend/common/blockchain';
import { getChainTeamTacticsDb, logChainTeamTacticsErrorDb } from '../../../../utils/backend/common/mongo-helper';

export default async (
    req: NextApiRequest,
    res: NextApiResponse<any>
) => {
    setup_headers(req, res);

    const rq: EditUnitRequest = req.body;

    if (!is_valid_request([rq.account_id, rq.password, rq.unitdata], res)) {
        return;
    }

    try {
        _onlyPxDapps(rq.account_id, rq.password);

        const db = await getChainTeamTacticsDb();
        const options = { upsert: true };

        const response = await changeFunctionWithoutAttachment(
            rq.account_id,
            rq.privatekey,
            APP_CONTRACT,
            "ctt_insert_update_unit",
            {
                unitdata: {
                    unit_type: rq.unitdata.unit_type,
                    tier_type: rq.unitdata.unit_tier,
                    health: rq.unitdata.health,
                    damage: rq.unitdata.damage,
                    speed: rq.unitdata.speed,
                }
            }
        );

        if (!checkFunctionResponse(response)) {
            return res.status(200).json({ success: false, error: response.error.type });
        }

        await db.collection("units").replaceOne(
            { unit_type: rq.unitdata.unit_type },
            rq.unitdata,
            options
        );

        res.status(200).json({ success: true });
    }
    catch (err) {
        await logChainTeamTacticsErrorDb(err, rq.account_id, "edit-unit");
        res.status(200).json({ success: false, error: "Check transaction error on wallet." });
    }
}
'''
'''--- pages/api/admin/pp/edit-pet.ts ---
import type { NextApiRequest, NextApiResponse } from 'next'
import { APP_CONTRACT, changeFunctionWithoutAttachment, checkFunctionResponse, _onlyPxDapps } from '../../../../utils/backend/common/blockchain';
import { is_valid_request, setup_headers } from '../../../../utils/backend/common/rq_utils';
import { EditPetRequest } from '../../../../utils/backend/pixelpets/helper/types';
import { getPixelPetsDb, logPixelPetsErrorDb } from '../../../../utils/backend/common/mongo-helper';

export default async (
    req: NextApiRequest,
    res: NextApiResponse<any>
) => {
    setup_headers(req, res);
    const rq: EditPetRequest = req.body;
    if (!is_valid_request([rq.account_id, rq.privatekey, rq.password, rq.petdata], res)) {
        return;
    }
    try {
        _onlyPxDapps(rq.account_id, rq.password);
        const db = await getPixelPetsDb();
        const options = { upsert: true };
        //console.log(db_insert);
        const response = await changeFunctionWithoutAttachment(rq.account_id, rq.privatekey, APP_CONTRACT, "insert_update_pet", { petdata: rq.petdata });
        if (!checkFunctionResponse(response)) {
            return res.status(200).json({ success: false, error: response.error.type });
        }
        //console.log(response);
        const db_insert = await db.collection("pets").replaceOne({ pet_id: rq.petdata.pet_id }, rq.petdata, options);

        res.status(200).json({ success: true });
    }
    catch (err) {
        await logPixelPetsErrorDb(err, rq.account_id, "edit-pet");
        res.status(200).json({ success: false, error: "Check transaction error on wallet." });
    }
}

'''
'''--- pages/api/admin/rating-decay.ts ---
import type { NextApiRequest, NextApiResponse } from 'next'
import { getPixelPetsDb, logPixelPetsErrorDb } from '../../../utils/backend/common/mongo-helper';
import { is_valid_request, setup_headers } from '../../../utils/backend/common/rq_utils';
import { FunctionRequest } from '../../../utils/backend/common/types';
import { clamp } from '../../../utils/backend/common/utils';
import { getInactivePlayers, isRatingDecayAllowed } from '../../../utils/backend/pixelpets/helper/basic_game';
import { _onlyPxDapps } from '../../../utils/backend/common/blockchain';

export default async (
    req: NextApiRequest,
    res: NextApiResponse<any>
) => {
    setup_headers(req, res);
    const rq: FunctionRequest = req.body;

    if (!is_valid_request([rq.account_id], res)) {
        return;
    }

    if (rq["readonly"] == undefined) {
        rq["readonly"] = true;
    }

    const is_readonly: boolean = rq["readonly"];

    try {
        _onlyPxDapps(rq.account_id);

        if (!is_readonly && !await isRatingDecayAllowed()) {
            return res.status(403).json({ error: "403 - Forbidden" });
        }

        const db = await getPixelPetsDb();
        const entries = await getInactivePlayers();

        for (let i = 0; i < entries.length; i++) {
            const entry = entries[i];

            const elapsedDays = clamp(entry.elapsed_days, 1, 31);
            const penalty = Math.pow(2, elapsedDays);
            const ratingThen = entry.player_rating;
            const ratingNow = clamp(entry.player_rating - penalty, 800, entry.player_rating);

            entry["elapsed_days_clamp"] = elapsedDays;
            entry["rating_penalty"] = penalty;
            entry["new_rating"] = ratingNow;

            if (!is_readonly) {
                await db.collection("leaderboard")
                    .updateOne(
                        { account_id: entry.account_id },
                        { $set: { "player_rating": ratingNow } });
            }

            // console.log(`[${entry.account_id}] days since lastfight: ${elapsedDays}, rating then: ${ratingThen}, penalty: ${penalty}, rating now: ${ratingNow}`);// dev log
        }

        // console.log(`entries: ${entries.length}`);// dev log
        res.status(200).json({ success: true, data: { entries: entries, changes: !is_readonly ? entries.length : 0 } });
    }
    catch (err) {
        // console.log(err);// dev log
        await logPixelPetsErrorDb(err, rq.account_id, "rating-decay");
        res.status(200).json({ success: false, error: "Contact discord support" });
    }
}
'''
'''--- pages/api/chainteamtactics/challenge/begin-create-room.ts ---
import BN from 'bn.js';
import type { NextApiRequest, NextApiResponse } from 'next'
import { lockAccount, unlockAccount } from '../../../../utils/backend/chainteamtactics/helper/basic_game';
import { BeginCreateRoomRequest, LockType, RoomBetTierTypes, RoomData, RoomNotificationType } from '../../../../utils/backend/chainteamtactics/helper/types';
import { createOrUpdateRoom, createOrUpdateRoomNotification, getRoomByLeader, get_random_map } from '../../../../utils/backend/chainteamtactics/helper/utils';
import { APP_CONTRACT, changeFunctionWithoutAttachment, checkFunctionResponse, MANAGER_ACCOUNT, MANAGER_KEY } from '../../../../utils/backend/common/blockchain';
import { logChainTeamTacticsErrorDb } from '../../../../utils/backend/common/mongo-helper';
import { is_defined_request, is_trusted_requestor, is_valid_request, setup_headers } from '../../../../utils/backend/common/rq_utils';
import { assert } from '../../../../utils/backend/common/utils';

export default async (
    req: NextApiRequest,
    res: NextApiResponse<any>
) => {
    setup_headers(req, res);

    const rq: BeginCreateRoomRequest = req.body;

    if (!is_valid_request([rq.account_id, rq.privatekey, rq.publickey], res)) {
        return;
    }

    if (!is_defined_request([rq.bet_type], res)) {
        return;
    }

    // do not allow a player to attempt to create a room with another players name
    if (!await is_trusted_requestor(rq.account_id, rq.privatekey, rq.publickey, res)) {
        return;
    }

    let lockTaken: boolean = false;
    try {
        assert(rq.bet_type >= RoomBetTierTypes.Tier1 && rq.bet_type <= RoomBetTierTypes.Tier3, "invalid bet type");

        lockTaken = await lockAccount(rq.account_id, LockType.Battle);
        assert(lockTaken, "account is locked for Battle");

        let roomData = await getRoomByLeader(rq.account_id);

        assert(!roomData, "already leading a room");

        //#TODO enable after beta
        // const response = await changeFunctionWithoutAttachment(
        //     MANAGER_ACCOUNT,
        //     MANAGER_KEY,
        //     APP_CONTRACT,
        //     "ctt_create_or_join_fight",
        //     {
        //         account_id: rq.account_id,
        //         bet_type: rq.bet_type,
        //     },
        //     new BN('15000000000000')// 15
        // );

        // if (!checkFunctionResponse(response)) {
        //     return res.status(200).json({ success: false, error: response.error.type });
        // }

        roomData = new RoomData(
            rq.account_id,
            get_random_map(),
            rq.bet_type
        );

        await createOrUpdateRoom(roomData);
        await createOrUpdateRoomNotification(RoomNotificationType.PendingCreate, roomData);
        res.status(200).json({ success: true, data: roomData.mapIndex });
    }
    catch (err) {
        await logChainTeamTacticsErrorDb(err, rq.account_id, "begin-create-room");
        res.status(200).json({ success: false, error: err });
    }
    finally {
        if (lockTaken) {
            await unlockAccount(rq.account_id, LockType.Battle);
        }
    }
}
'''
'''--- pages/api/chainteamtactics/challenge/end-create-room.ts ---
import type { NextApiRequest, NextApiResponse } from 'next'
import { getPlayerData, getPlayerWithPosition, lockAccount, unlockAccount } from '../../../../utils/backend/chainteamtactics/helper/basic_game';
import { EndCreateRoomRequest, LockType, RoomNotificationType } from '../../../../utils/backend/chainteamtactics/helper/types';
import { createOrUpdateRoom, deleteNotification, getRoomByLeader } from '../../../../utils/backend/chainteamtactics/helper/utils';
import { logChainTeamTacticsErrorDb } from '../../../../utils/backend/common/mongo-helper';
import { is_trusted_requestor, is_valid_request, setup_headers } from '../../../../utils/backend/common/rq_utils';
import { assert } from '../../../../utils/backend/common/utils';

export default async (
    req: NextApiRequest,
    res: NextApiResponse<any>
) => {
    setup_headers(req, res);

    const rq: EndCreateRoomRequest = req.body;

    if (!is_valid_request([rq.account_id, rq.privatekey, rq.publickey, rq.player_loadout], res)) {
        return;
    }

    // should be almost impossible to someone fake a request finishing
    // someone's else room creation with all correct tokens and coordinates
    // but who knows... its better ensure its the room creator itself
    if (!await is_trusted_requestor(rq.account_id, rq.privatekey, rq.publickey, res)) {
        return;
    }

    let lockTaken: boolean = false;
    try {
        lockTaken = await lockAccount(rq.account_id, LockType.Battle);
        assert(lockTaken, "account is locked for Battle");

        const roomData = await getRoomByLeader(rq.account_id);
        console.log(roomData);
        assert(roomData, "room not found");
        assert(roomData.playerNames.length == 0, "room is already fully created");

        const playerdata = await getPlayerData(rq, roomData.mapIndex, false);

        roomData.playerNames.push(rq.account_id);
        roomData.playerRanks.push(playerdata.rating);
        roomData.playerRoundWins.push(0);
        roomData.playerFightWins.push(playerdata.matches_won);
        roomData.playerFightWins.push(playerdata.matches_lost);
        roomData.playerLoadouts.push(playerdata.player_loadout);

        await createOrUpdateRoom(roomData);
        await deleteNotification(RoomNotificationType.PendingCreate, roomData);
        res.status(200).json({ success: true });
    }
    catch (err) {
        console.log(err);
        await logChainTeamTacticsErrorDb(err, rq.account_id, "end-create-room");
        res.status(200).json({ success: false, error: "Contact discord support" });
    }
    finally {
        if (lockTaken) {
            await unlockAccount(rq.account_id, LockType.Battle);
        }
    }
}
'''
'''--- pages/api/chainteamtactics/challenge/get-all-rooms.ts ---
import type { NextApiRequest, NextApiResponse } from 'next'
import { getAccountData, getPlayerWithPosition } from '../../../../utils/backend/chainteamtactics/helper/basic_game';
import { GetAllRoomsRequest } from '../../../../utils/backend/chainteamtactics/helper/types';
import { getOpenRooms, getRoomByLeader } from '../../../../utils/backend/chainteamtactics/helper/utils';
import { logChainTeamTacticsErrorDb } from '../../../../utils/backend/common/mongo-helper';
import { is_trusted_requestor, is_valid_request, setup_headers } from '../../../../utils/backend/common/rq_utils';

export default async (
    req: NextApiRequest,
    res: NextApiResponse<any>
) => {
    setup_headers(req, res);

    const rq: GetAllRoomsRequest = req.body;

    if (!is_valid_request([rq.account_id, rq.privatekey, rq.publickey], res)) {
        return;
    }

    // as this endpoint now takes the player rank into account to filter rooms by the rank
    // ensure that the player isn't faking the request with someone's else name to get easier rooms
    if (!await is_trusted_requestor(rq.account_id, rq.privatekey, rq.publickey, res)) {
        return;
    }

    try {
        const accountdata = await getAccountData(rq.account_id);
        const playerdata = accountdata.playerdata;
        
        const rooms: any[] = [];

        const ownRoom = await getRoomByLeader(rq.account_id);

        if (ownRoom && ownRoom.playerFightWins.length > 0) {
            rooms.push({
                account_id: ownRoom.account_id,
                betType: ownRoom.betType,
                won: ownRoom.playerFightWins[0],
                lost: ownRoom.playerFightWins[1],
                rank: ownRoom.playerRanks[0],
                loadout: ownRoom.playerLoadouts[0].map(x => {
                    const data = {
                        token_id: x.token_id,
                        unit_type: x.unit_type,
                    };
                    return data;
                }),
            });
        }

        const allRooms = await getOpenRooms(rq.account_id, playerdata.rating - 400);

        if (allRooms.length != 0) {
            allRooms.forEach(room => {
                rooms.push({
                    account_id: room.account_id,
                    betType: room.betType,
                    won: room.playerFightWins[0],
                    lost: room.playerFightWins[1],
                    rank: room.playerRanks[0],
                    loadout: room.playerLoadouts[0].map(x => {
                        const data = {
                            token_id: x.token_id,
                            unit_type: x.unit_type,
                        };
                        return data;
                    }),
                });
            });
        }

        res.status(200).json({ success: true, data: rooms });
    }
    catch (err) {
        await logChainTeamTacticsErrorDb(err, rq.account_id, "get-all-rooms");
        res.status(200).json({ success: false, error: "Contact discord support" });
    }
}
'''
'''--- pages/api/chainteamtactics/challenge/get-my-rooms.ts ---
import type { NextApiRequest, NextApiResponse } from 'next'
import { GetAllRoomsRequest, RoomData } from '../../../../utils/backend/chainteamtactics/helper/types';
import { getChainTeamTacticsDb, logChainTeamTacticsErrorDb } from '../../../../utils/backend/common/mongo-helper';
import { is_valid_request, setup_headers } from '../../../../utils/backend/common/rq_utils';

export default async (
    req: NextApiRequest,
    res: NextApiResponse<any>
) => {
    setup_headers(req, res);

    const rq: GetAllRoomsRequest = req.body;

    if (!is_valid_request([rq.account_id], res)) {
        return;
    }

    try {

        const db = await getChainTeamTacticsDb();
        const roomData = await db.collection("rooms").find<RoomData>(
            { playerNames: { $elemMatch: { $eq: rq.account_id } } },
            { projection: { _id: 0, playerLoadouts: 0, prev_round_loser: 0, prev_round_winner: 0, prev_round_id: 0 } }
        ).toArray();
        res.status(200).json({ success: true, data: roomData });

    }
    catch (err) {
        await logChainTeamTacticsErrorDb(err, rq.account_id, "get-my-rooms");
        res.status(200).json({ success: false, error: "Contact discord support" });
    }
}
'''
'''--- pages/api/chainteamtactics/challenge/join-room.ts ---
import BN from 'bn.js';
import type { NextApiRequest, NextApiResponse } from 'next'
import { getPlayerData, getPlayerWithPosition, lockAccount, unlockAccount } from '../../../../utils/backend/chainteamtactics/helper/basic_game';
import { JoinRoomRequest, EndCreateRoomRequest, LockType, RoomNotificationType } from '../../../../utils/backend/chainteamtactics/helper/types';
import { createOrUpdateRoom, createOrUpdateRoomNotification, getAllJoinedRooms, getRoomByLeader, MaxJoinedRooms } from '../../../../utils/backend/chainteamtactics/helper/utils';
import { APP_CONTRACT, changeFunctionWithoutAttachment, checkFunctionResponse, MANAGER_ACCOUNT, MANAGER_KEY } from '../../../../utils/backend/common/blockchain';
import { logChainTeamTacticsErrorDb } from '../../../../utils/backend/common/mongo-helper';
import { is_trusted_requestor, is_valid_request, setup_headers } from '../../../../utils/backend/common/rq_utils';
import { assert } from '../../../../utils/backend/common/utils';

export default async (
    req: NextApiRequest,
    res: NextApiResponse<any>
) => {
    setup_headers(req, res);

    const rq: JoinRoomRequest = req.body;

    if (!is_valid_request([rq.account_id, rq.privatekey, rq.publickey, rq.leader_id], res)) {
        return;
    }

    // do not allow a player to attempt to join a room with another players name
    if (!await is_trusted_requestor(rq.account_id, rq.privatekey, rq.publickey, res)) {
        return;
    }

    let lockTaken: boolean = false;
    try {
        lockTaken = await lockAccount(rq.account_id, LockType.Battle);
        assert(lockTaken, "account is locked for Battle");

        const roomData = await getRoomByLeader(rq.leader_id);

        assert(roomData, "room not found");
        assert(roomData.playerNames.length == 1, roomData.playerNames.length == 0 ? "room is not ready" : "room is closed");
        assert(roomData.account_id != rq.account_id, "you can't join your own room");

        // a player can lead up to 1 room and join up to 5... total of 6
        const allJoinedRooms = await getAllJoinedRooms(rq.account_id);

        assert(allJoinedRooms.length < MaxJoinedRooms, `you can join up to ${MaxJoinedRooms} rooms`);

        const urq = rq as unknown as EndCreateRoomRequest;
        urq.player_loadout = [];

        const playerdata = await getPlayerData(urq, roomData.mapIndex, true, false, true);
        
        //#TODO enable after beta
        // const response = await changeFunctionWithoutAttachment(
        //     MANAGER_ACCOUNT,
        //     MANAGER_KEY,
        //     APP_CONTRACT,
        //     "ctt_create_or_join_fight",
        //     {
        //         account_id: rq.account_id,
        //         bet_type: roomData.betType,
        //     },
        //     new BN('15000000000000')// 15
        // );

        // if (!checkFunctionResponse(response)) {
        //     return res.status(200).json({ success: false, error: response.error.type });
        // }

        roomData.playerNames.push(rq.account_id);
        roomData.playerRanks.push(playerdata.rating);
        roomData.playerRoundWins.push(0);
        roomData.last_activity = Date.now();

        const roomInfo = {
            mapIndex: roomData.mapIndex,
            loadout: roomData.playerLoadouts[0].map(x => x),
        };

        await createOrUpdateRoom(roomData);
        await createOrUpdateRoomNotification(RoomNotificationType.PendingJoin, roomData);
        res.status(200).json({ success: true, data: roomInfo });
    }
    catch (err) {
        await logChainTeamTacticsErrorDb(err, rq.account_id, "join-room");
        res.status(200).json({ success: false, error: "Contact discord support" });
    }
    finally {
        if (lockTaken) {
            await unlockAccount(rq.account_id, LockType.Battle);
        }
    }
}
'''
'''--- pages/api/chainteamtactics/challenge/notify-room.ts ---
import type { NextApiRequest, NextApiResponse } from 'next'
import { lockAccount, unlockAccount } from '../../../../utils/backend/chainteamtactics/helper/basic_game';
import { LockType, NotifyRoomRequest, RoomNotificationType } from '../../../../utils/backend/chainteamtactics/helper/types';
import { createOrUpdateRoomNotification, deleteRoomAndFinishFight, getRoomByLeader, getRoomNotification } from '../../../../utils/backend/chainteamtactics/helper/utils';
import { logChainTeamTacticsErrorDb } from '../../../../utils/backend/common/mongo-helper';
import { is_trusted_requestor, is_valid_request, setup_headers } from '../../../../utils/backend/common/rq_utils';
import { assert } from '../../../../utils/backend/common/utils';

export default async (
    req: NextApiRequest,
    res: NextApiResponse<any>
) => {
    setup_headers(req, res);

    const rq: NotifyRoomRequest = req.body;

    if (!is_valid_request([rq.account_id, rq.privatekey, rq.publickey], res)) {
        return;
    }

    // ensure the notified player itself is behind this
    // otherwise its opponent could fake a request
    // refusing next round to force its win
    if (!await is_trusted_requestor(rq.account_id, rq.privatekey, rq.publickey, res)) {
        return;
    }

    let lockTaken: boolean = false;
    try {
        lockTaken = await lockAccount(rq.account_id, LockType.Battle);
        assert(lockTaken, "account is locked for Battle");

        const roomNotification = await getRoomNotification(rq.account_id);

        assert(roomNotification, "notification not found");
        assert(roomNotification.notify_type == RoomNotificationType.RoundFinish, "only notifications of type RoundFinish are allowed to being refused");

        const roomData = await getRoomByLeader(roomNotification.room_id);

        assert(roomData, "room not found");

        const fightLoserIndex = roomData.playerNames.indexOf(rq.account_id);
        const fightWinnerIndex = fightLoserIndex == 1 ? 0 : 1;

        if (!await deleteRoomAndFinishFight(roomData, fightWinnerIndex, fightLoserIndex, false, res)) {
            return;
        }

        await createOrUpdateRoomNotification(RoomNotificationType.FightFinish, roomData);
        res.status(200).json({ success: true });
    }
    catch (err) {
        await logChainTeamTacticsErrorDb(err, rq.account_id, "notify-room");
        res.status(200).json({ success: false, error: "Contact discord support" });
    }
    finally {
        if (lockTaken) {
            await unlockAccount(rq.account_id, LockType.Battle);
        }
    }
}
'''
'''--- pages/api/chainteamtactics/challenge/simulate-fight.ts ---
import type { NextApiRequest, NextApiResponse } from 'next'
import { BattleController } from '../../../../utils/backend/chainteamtactics/battle/core';
import { UnitInfo } from '../../../../utils/backend/chainteamtactics/battle/types';
import { getPlayerData, lockAccount, unlockAccount } from '../../../../utils/backend/chainteamtactics/helper/basic_game';
import { ChallengeRequest, EndCreateRoomRequest, LockType, RoomNotificationType } from '../../../../utils/backend/chainteamtactics/helper/types';
import { createOrUpdateRoom, createOrUpdateRoomNotification, deleteNotification, deleteRoomAndFinishFight, getRoomByLeader } from '../../../../utils/backend/chainteamtactics/helper/utils';
import { logChainTeamTacticsErrorDb } from '../../../../utils/backend/common/mongo-helper';
import { is_trusted_requestor, is_valid_request, setup_headers } from '../../../../utils/backend/common/rq_utils';
import { assert, to_number } from '../../../../utils/backend/common/utils';

export default async (
    req: NextApiRequest,
    res: NextApiResponse<any>
) => {
    setup_headers(req, res);

    const rq: ChallengeRequest = req.body;

    if (!is_valid_request([rq.account_id, rq.privatekey, rq.publickey, rq.leader_id, rq.player_loadout], res)) {
        return;
    }

    // should be almost impossible to someone fake a fighting request
    // in someone's else turn with all correct tokens and coordinates
    // but who knows... its better ensure its one of the two players
    if (!await is_trusted_requestor(rq.account_id, rq.privatekey, rq.publickey, res)) {
        return;
    }

    let lockTaken: boolean = false;
    try {
        lockTaken = await lockAccount(rq.account_id, LockType.Battle);
        assert(lockTaken, "account is locked for Battle");

        const roomData = await getRoomByLeader(rq.leader_id);

        assert(roomData, "room not found");
        assert(roomData.playerNames.length == 2, roomData.playerNames.length == 0 ? "room is not ready" : "room is open");
        assert(roomData.playerNames.includes(rq.account_id), "you are not in the room");
        assert(roomData.prev_round_id != rq.account_id, "it's not your round");

        const index = roomData.playerNames.indexOf(rq.account_id);
        const playerdata = await getPlayerData(rq as unknown as EndCreateRoomRequest, roomData.mapIndex, index == 1);

        // update player's loadout
        if (roomData.round_nr != 0) {
            roomData.playerLoadouts[index] = playerdata.player_loadout;
        }
        else {
            roomData.playerLoadouts.push(playerdata.player_loadout);
        }

        // generate all required fight structs
        const yellowLoadout = roomData.playerLoadouts[0].map(x => {
            const unitInfo = {
                unitID: to_number(x.token_id),
                unitType: x.unit_type,
                speed: x.speed,
                damage: x.damage,
                health: x.health,
            } as UnitInfo;
            return unitInfo;
        });
        const yellowPosition = roomData.playerLoadouts[0].map(x => x.position);

        const purpleLoadout = roomData.playerLoadouts[1].map(x => {
            const unitInfo = {
                unitID: to_number(x.token_id),
                unitType: x.unit_type,
                speed: x.speed,
                damage: x.damage,
                health: x.health,
            } as UnitInfo;
            return unitInfo;
        });
        const purplePosition = roomData.playerLoadouts[1].map(x => x.position);

        const battleController: BattleController = new BattleController();
        const results = battleController.GenerateFightStruct(roomData.mapIndex,
            purpleLoadout, purplePosition,
            yellowLoadout, yellowPosition
        );

        roomData.playerNames.map(x => results.playerNames.push(x));
        roomData.playerRanks.map(x => results.playerRanks.push(x));
        results.playerLoadouts.push(roomData.playerLoadouts[0].map(x => x));
        results.playerLoadouts.push(roomData.playerLoadouts[1].map(x => x));

        const roundWinnerIndex: number = !results.purpleWins ? 0 : 1;
        const roundLoserIndex: number = roundWinnerIndex == 1 ? 0 : 1;

        roomData.playerRoundWins[roundWinnerIndex]++;
        roomData.prev_round_winner = roomData.playerNames[roundWinnerIndex];
        roomData.prev_round_loser = roomData.playerNames[roundLoserIndex];
        roomData.prev_round_id = rq.account_id;
        roomData.notify_id = roomData.playerNames[roomData.round_nr % 2];
        roomData.last_activity = Date.now();
        roomData.round_nr++;

        let notify_type: RoomNotificationType = RoomNotificationType.RoundFinish;
        let fightWinnerIndex: number = -1;
        let fightLoserIndex: number = -1;

        for (let i: number = 0; i < roomData.playerRoundWins.length; i++) {
            if (roomData.playerRoundWins[i] >= 2) {
                notify_type = RoomNotificationType.FightFinish;
                fightLoserIndex = i == 1 ? 0 : 1;
                fightWinnerIndex = i;
                break;
            }
        }

        if (notify_type == RoomNotificationType.FightFinish) {
            if (!await deleteRoomAndFinishFight(roomData, fightWinnerIndex, fightLoserIndex, true, res)) {
                return;
            }
        }
        else {
            await createOrUpdateRoom(roomData);
        }

        // only needed on the first round
        if (roomData.round_nr == 1) {
            await deleteNotification(RoomNotificationType.PendingJoin, roomData);
        }

        await createOrUpdateRoomNotification(notify_type, roomData, results);
        res.status(200).json({ success: true, data: results });
    }
    catch (err) {
        await logChainTeamTacticsErrorDb(err, rq.account_id, "simulate-fight");
        res.status(200).json({ success: false, error: "Contact discord support" });
    }
    finally {
        if (lockTaken) {
            await unlockAccount(rq.account_id, LockType.Battle);
        }
    }
}
'''
'''--- pages/api/chainteamtactics/get-leaderboard.ts ---
import type { NextApiRequest, NextApiResponse } from 'next'
import { getLeaderboard, getPlayerWithPosition } from '../../../utils/backend/chainteamtactics/helper/basic_game';
import { logChainTeamTacticsErrorDb } from '../../../utils/backend/common/mongo-helper';
import { is_valid_request, setup_headers } from '../../../utils/backend/common/rq_utils';
import { FunctionRequest } from '../../../utils/backend/common/types';

export default async (
    req: NextApiRequest,
    res: NextApiResponse<any>
) => {
    setup_headers(req, res);

    const rq: FunctionRequest = req.body;

    if (!is_valid_request([rq.account_id], res)) {
        return;
    }

    try {
        const entries: any[] = [];
        const max_results = 100;

        const playerWithPosition = await getPlayerWithPosition(rq.account_id);
        if (playerWithPosition) {
            entries.push(playerWithPosition);
        }

        await getLeaderboard(max_results).then(x => {
            x.forEach(x => entries.push(x));
        });

        res.status(200).json({
            success: true,
            data: entries
        });
    }
    catch (err) {
        await logChainTeamTacticsErrorDb(err, rq.account_id, "get-leaderboard");
        res.status(200).json({ success: false, error: "Contact discord support" });
    }
}
'''
'''--- pages/api/chainteamtactics/get-playerdata.ts ---
import type { NextApiRequest, NextApiResponse } from 'next'
import { is_valid_request, setup_headers } from '../../../utils/backend/common/rq_utils';
import { FunctionRequest } from '../../../utils/backend/common/types';
import { get_units_by_ids } from '../../../utils/backend/chainteamtactics/helper/data_loader';
import { logChainTeamTacticsErrorDb } from '../../../utils/backend/common/mongo-helper';
import { getAccountData, getPlayerWithPosition } from '../../../utils/backend/chainteamtactics/helper/basic_game';
import { getAllNotifications } from '../../../utils/backend/chainteamtactics/helper/utils';

export default async (
    req: NextApiRequest,
    res: NextApiResponse<any>
) => {
    setup_headers(req, res);

    const rq: FunctionRequest = req.body;

    if (!is_valid_request([rq.account_id], res)) {
        return;
    }

    try {
        const playerdata = await getAccountData(rq.account_id);
        const unit_ids = playerdata.playerdata.unit_ids as string[];

        playerdata.units = await get_units_by_ids(unit_ids);
        playerdata.playerdata.unit_ids = undefined;
        playerdata.notifications = await getAllNotifications(rq.account_id);
        playerdata.maintenance = false;

        res.status(200).json({ success: true, data: playerdata });
    }
    catch (err) {
        await logChainTeamTacticsErrorDb(err, rq.account_id, "get-playerdata");
        res.status(200).json({ success: false, error: "Contact discord support" });
    }
}
'''
'''--- pages/api/chainteamtactics/is-valid-login.ts ---
import type { NextApiRequest, NextApiResponse } from 'next'
import { APP_CONTRACT, isAccessKeyValid, viewFunction } from '../../../utils/backend/common/blockchain';
import { is_valid_request, setup_headers } from '../../../utils/backend/common/rq_utils';
import { logChainTeamTacticsErrorDb } from '../../../utils/backend/common/mongo-helper';

export default async (
    req: NextApiRequest,
    res: NextApiResponse<any>
) => {
    setup_headers(req, res);

    const rq: { account_id: string, publickey: string } = req.body;

    if (!is_valid_request([rq.account_id, rq.publickey], res)) {
        return;
    }

    try {
        const keyState = await isAccessKeyValid(rq.account_id, rq.publickey);
        const player_registered = await viewFunction(
            APP_CONTRACT,
            "ctt_is_player_registered",
            { account_id: rq.account_id }
        );

        res.status(200).json({
            success: true,
            data: {
                valid: keyState.valid,
                allowance: keyState.allowance,
                fullAccess: keyState.fullAccess,
                player_registered: player_registered
            }
        });
    }
    catch (err) {
        await logChainTeamTacticsErrorDb(err, rq.account_id, "is-valid-login");
        res.status(200).json({ success: false, error: "Contact discord support" });
    }
}
'''
'''--- pages/api/chainteamtactics/marketplace/advanced-search.ts ---
import type { NextApiRequest, NextApiResponse } from 'next'
import { is_defined_request, is_valid_request, setup_headers } from '../../../../utils/backend/common/rq_utils';
import { clamp } from '../../../../utils/backend/common/utils';
import { getChainTeamTacticsDb, logChainTeamTacticsErrorDb } from '../../../../utils/backend/common/mongo-helper';
import { AdvancedSearchRequest } from '../../../../utils/backend/chainteamtactics/helper/types';
import { UnitType } from '../../../../utils/backend/chainteamtactics/battle/types';

export default async (
    req: NextApiRequest,
    res: NextApiResponse<any>
) => {
    setup_headers(req, res);

    const rq: AdvancedSearchRequest = req.body;

    if (!is_valid_request([rq.account_id, rq.unitdata], res)) {
        return;
    }

    if (!is_defined_request([rq.unitdata.unit_type, rq.unitdata.minStat], res)) {
        return;
    }

    try {
        const db = await getChainTeamTacticsDb();
        const filter = {};

        if (rq.unitdata.unit_type != UnitType.None) {
            filter["unit_data.unit_type"] = rq.unitdata.unit_type;
        }

        // if (rq.unitdata.tier_type != TierType.None) {
        //     filter["unit_data.tier_type"] = rq.unitdata.tier_type;
        // }

        rq.unitdata.minStat = clamp(rq.unitdata.minStat, 0, Infinity);
        filter["stat_rank"] = { $gte: rq.unitdata.minStat };

        const entries = await db.collection("marketplace").aggregate([
            {
                $project: {
                    unit_data: 1,
                    stat_rank: {
                        $function: {
                            body: get_func_body(),
                            args: ["$unit_data"],
                            lang: "js"
                        }
                    }
                }
            },
            {
                $match: filter
            },
            {
                $sort: {
                    _id: -1,
                }
            },
            {
                $limit: 500
            }
        ])
        .toArray();

        entries.forEach(x => {
            x._id = undefined;
            x.stat_rank = undefined;
        });

        res.status(200).json({ success: true, data: entries });
    }
    catch (err) {
        await logChainTeamTacticsErrorDb(err, rq.account_id, "advanced-search");
        res.status(200).json({ success: false, error: "Contact discord support" });
    }
}

function get_func_body(): string {
    const func = `function (udata) {
            /*let damage = 0;
            let defense = 0;
            let critChance = 0;
            let lifeSteal = 0;
            let dodge = 0;
            let maxHealth = 0;
        
            switch (udata.class_type) {
                case 1:
                    switch (udata.equip_type) {
                        case 0:
                            defense = (udata.strength + udata.endurance) * .01;
                            maxHealth = 1 + Math.round(udata.endurance * 1.75 + udata.intelligence + udata.luck);
                            dodge = (udata.dexterity + udata.luck) * .01;
                            break;
        
                        case 1:
                            defense = (udata.strength + udata.endurance) * .01;
                            damage = 1 + Math.round((udata.luck + udata.intelligence) * .2);
                            break;
        
                        case 2:
                            damage = 1 + Math.round((udata.luck + udata.intelligence + udata.dexterity + udata.strength) * .25);
                            critChance = (udata.intelligence + udata.luck) * .01;
                            lifeSteal = (udata.intelligence + udata.luck) * .005;
                            break;
        
                        case 3:
                            dodge = .01 + (udata.dexterity + udata.luck) * .01;
                            defense = (udata.strength + udata.endurance) * .01;
                            break;
        
                        case 4:
                            maxHealth = 1 + Math.round((udata.endurance + udata.intelligence) * .5);
                            lifeSteal = (udata.intelligence + udata.luck) * .005;
                            break;
        
                        case 5:
                            critChance = (udata.intelligence + udata.luck) * .01;
                            lifeSteal = .01 + (udata.intelligence + udata.luck) * .005;
                            break;
                    }
                    break;
        
                case 2:
                    switch (udata.equip_type) {
                        case 0:
                            defense = (udata.strength + udata.endurance) * .015;
                            maxHealth = 1 + Math.round(udata.endurance * 2.25 + udata.strength + udata.luck);
                            lifeSteal = (udata.intelligence + udata.luck) * .005;
                            break;
        
                        case 1:
                            defense = (udata.strength + udata.endurance) * .01;
                            maxHealth = 1 + Math.round(udata.endurance * 1.5 + udata.strength);
                            break;
        
                        case 2:
                            damage = 1 + Math.round((udata.luck + udata.strength + udata.dexterity + udata.intelligence) * .25);
                            critChance = (udata.strength + udata.luck) * .01;
                            lifeSteal = (udata.intelligence + udata.luck) * .005;
                            break;
        
                        case 3:
                            defense = .01 + (udata.strength + udata.endurance) * .01;
                            dodge = (udata.dexterity + udata.luck) * .01;
                            break;
        
                        case 4:
                            lifeSteal = (udata.intelligence + udata.luck) * .005;
                            defense = .01 + (udata.strength + udata.endurance) * .01;
                            break;
        
                        case 5:
                            critChance = (udata.strength + udata.luck) * .01;
                            maxHealth = 1 + Math.round((udata.endurance + udata.luck) * .75);
                            break;
                    }
                    break;

                    case 3:
                        switch (udata.equip_type) {
                            case 0:
                                dodge = (udata.dexterity + udata.intelligence) * .01;
                                maxHealth = 1 + Math.round(udata.endurance * 2 + udata.dexterity + udata.luck);
                                defense = (udata.strength + udata.endurance) * .01;
                                break;
            
                            case 1:
                                defense = .01 + (udata.strength + udata.endurance) * .01;
                                dodge = (udata.dexterity + udata.luck) * .01;
                                break;
            
                            case 2:
                                damage = 1 + Math.round((udata.luck + udata.dexterity + udata.strength + udata.intelligence) * .25);
                                critChance = (udata.dexterity + udata.luck) * .01;
                                lifeSteal = (udata.intelligence + udata.luck) * .005;
                                break;
            
                            case 3:
                                defense = (udata.strength + udata.endurance) * .01;
                                dodge = .01 + (udata.dexterity + udata.luck) * .01;
                                break;
            
                            case 4:
                                maxHealth = 1 + Math.round((udata.endurance + udata.dexterity) * .5);
                                critChance = (udata.dexterity + udata.luck) * .01;
                                break;
            
                            case 5:
                                damage = 1 + Math.round((udata.luck + udata.dexterity) * .2);
                                lifeSteal = (udata.intelligence + udata.luck) * .005;
                                break;
                        }
                        break;
            }
        
            const statStruct = {
                maxHealth: maxHealth,
                damage: damage,
                // clamping to not exceed 100%
                defense: Math.max(0, Math.min(defense, 100)),
                dodge: Math.max(0, Math.min(dodge, 100)),
                lifeSteal: Math.max(0, Math.min(lifeSteal, 100)),
                critChance: Math.max(0, Math.min(critChance, 100))
            };

            const statRank = Math.round(
                statStruct.critChance * 100 + statStruct.defense * 100 + statStruct.dodge * 100 +
                statStruct.maxHealth / 4 + statStruct.lifeSteal * 100 + statStruct.damage
            );*/

            const statStruct = {
                health: udata.health,
                damage: udata.damage,
                speed: udata.speed
            };

            const statRank = Math.round(
                statStruct.health / 4 + statStruct.speed * 100 + statStruct.damage
            );

            return statRank;
        }`;
    return func;
}
'''
'''--- pages/api/chainteamtactics/marketplace/buy-unit.ts ---
import BN from 'bn.js';
import type { NextApiRequest, NextApiResponse } from 'next'
import { BuyUnitRequest, UnitToken } from '../../../../utils/backend/chainteamtactics/helper/types';
import { APP_CONTRACT, changeFunctionWithAttachment, checkFunctionResponse } from '../../../../utils/backend/common/blockchain';
import { getChainTeamTacticsDb, logChainTeamTacticsErrorDb } from '../../../../utils/backend/common/mongo-helper';
import { is_valid_request, setup_headers } from '../../../../utils/backend/common/rq_utils';

export default async (
    req: NextApiRequest,
    res: NextApiResponse<any>
) => {
    setup_headers(req, res);

    const rq: BuyUnitRequest = req.body;

    if (!is_valid_request([rq.account_id, rq.privatekey, rq.unitdata, rq.unitdata?.token_id], res)) {
        return;
    }

    try {
        const db = await getChainTeamTacticsDb();
        const entry = await db.collection("marketplace").findOne({ token_id: rq.unitdata.token_id });
        const unit_token = entry.unit_data as UnitToken;

        if (entry && unit_token.owner == rq.account_id) {
            throw "You can't buy your own unit";
        }

        const response = await changeFunctionWithAttachment(
            rq.account_id,
            rq.privatekey,
            APP_CONTRACT,
            "ctt_buy_unit",
            { token_id: rq.unitdata.token_id, owner: unit_token.owner, buyer: rq.account_id, price: entry.price },
            new BN('1'),
            "https://pd.marmaj.org/callback?page=unit_bought",
            new BN('150000000000000')// 150???
        );

        if (!checkFunctionResponse(response)) {
            return res.status(200).json({ success: false, error: response.error.type });
        }

        await db.collection("marketplace").deleteOne({ token_id: rq.unitdata.token_id });

        res.status(200).json({ success: true, data: response.data });
    }
    catch (err) {
        await logChainTeamTacticsErrorDb(err, rq.account_id, "buy-unit");
        res.status(200).json({ success: false, error: "Contact discord support" });
    }
}
'''
'''--- pages/api/chainteamtactics/marketplace/cancel-offer-unit.ts ---
import BN from 'bn.js';
import type { NextApiRequest, NextApiResponse } from 'next'
import { CancelOfferUnitRequest } from '../../../../utils/backend/chainteamtactics/helper/types';
import { changeFunctionWithoutAttachment, APP_CONTRACT, checkFunctionResponse } from '../../../../utils/backend/common/blockchain';
import { getChainTeamTacticsDb, logChainTeamTacticsErrorDb } from '../../../../utils/backend/common/mongo-helper';
import { is_valid_request, setup_headers } from '../../../../utils/backend/common/rq_utils';

export default async (
    req: NextApiRequest,
    res: NextApiResponse<any>
) => {
    setup_headers(req, res);

    const rq: CancelOfferUnitRequest = req.body;

    if (!is_valid_request([rq.account_id, rq.privatekey, rq.unitdata, rq.unitdata?.token_id], res)) {
        return;
    }

    try {
        const db = await getChainTeamTacticsDb();
        const response = await changeFunctionWithoutAttachment(
            rq.account_id,
            rq.privatekey,
            APP_CONTRACT,
            "ctt_cancel_offer_unit",
            { token_id: rq.unitdata.token_id },
            new BN('15000000000000')// 15
        );

        if (!checkFunctionResponse(response)) {
            return res.status(200).json({ success: false, error: response.error.type });
        }

        await db.collection("marketplace").deleteOne({ token_id: rq.unitdata.token_id });
        res.status(200).json({ success: true });
    }
    catch (err) {
        await logChainTeamTacticsErrorDb(err, rq.account_id, "cancel-offer-unit");
        res.status(200).json({ success: false, error: "Contact discord support" });
    }
}
'''
'''--- pages/api/chainteamtactics/marketplace/offer-unit.ts ---
import BN from 'bn.js';
import type { NextApiRequest, NextApiResponse } from 'next'
import { APP_CONTRACT, changeFunctionWithoutAttachment, checkFunctionResponse } from '../../../../utils/backend/common/blockchain';
import { is_valid_request, setup_headers } from '../../../../utils/backend/common/rq_utils';
import { getChainTeamTacticsDb, logChainTeamTacticsErrorDb } from '../../../../utils/backend/common/mongo-helper';
import { OfferUnitRequest } from '../../../../utils/backend/chainteamtactics/helper/types';
import { get_units_by_ids } from '../../../../utils/backend/chainteamtactics/helper/data_loader';

export default async (
    req: NextApiRequest,
    res: NextApiResponse<any>
) => {
    setup_headers(req, res);

    const rq: OfferUnitRequest = req.body;

    if (!is_valid_request([rq.account_id, rq.privatekey, rq.unitdata, rq.unitdata?.token_id, rq.unitdata?.price], res)) {
        return;
    }

    try {
        const db = await getChainTeamTacticsDb();
        const unit = (await get_units_by_ids([rq.unitdata.token_id]))[0];

        const response = await changeFunctionWithoutAttachment(
            rq.account_id,
            rq.privatekey,
            APP_CONTRACT,
            "ctt_offer_unit",
            { token_id: rq.unitdata.token_id, price: rq.unitdata.price },
            new BN('15000000000000')// 15
        );

        if (!checkFunctionResponse(response)) {
            return res.status(200).json({ success: false, error: response.error.type });
        }

        unit.price = rq.unitdata.price;

        await db.collection("marketplace").replaceOne(
            { token_id: rq.unitdata.token_id },
            { token_id: rq.unitdata.token_id, price: rq.unitdata.price, unit_data: unit },
            { upsert: true }
        );

        res.status(200).json({ success: true });
    }
    catch (err) {
        await logChainTeamTacticsErrorDb(err, rq.account_id, "offer-unit");
        res.status(200).json({ success: false, error: "Contact discord support" });
    }
}
'''
'''--- pages/api/chainteamtactics/refill-fightpoints.ts ---
import BN from 'bn.js';
import type { NextApiRequest, NextApiResponse } from 'next'
import { changeFunctionWithAttachment, APP_CONTRACT, checkFunctionResponse } from '../../../utils/backend/common/blockchain';
import { logChainTeamTacticsErrorDb } from '../../../utils/backend/common/mongo-helper';
import { is_valid_request, setup_headers } from '../../../utils/backend/common/rq_utils';
import { FunctionRequest } from '../../../utils/backend/common/types';

export default async (
    req: NextApiRequest,
    res: NextApiResponse<any>
) => {
    setup_headers(req, res);

    const rq: FunctionRequest = req.body;

    if (!is_valid_request([rq.account_id, rq.privatekey], res)) {
        return;
    }

    try {
        const response = await changeFunctionWithAttachment(
            rq.account_id,
            rq.privatekey,
            APP_CONTRACT,
            "ctt_refill_fight_balance",
            {},
            new BN('200000000000000000000000'),
            "https://pd.marmaj.org/callback?page=refill_ctt",
            new BN('40000000000000')// 40
        );

        if (!checkFunctionResponse(response)) {
            return res.status(200).json({ success: false, error: response.error.type });
        }

        res.status(200).json({ success: true, data: response.data });
    }
    catch (err) {
        await logChainTeamTacticsErrorDb(err, rq.account_id, "refill-fightpoints");
        res.status(200).json({ success: false, error: "Contact discord support" });
    }
}
'''
'''--- pages/api/cryptohero/get-leaderboard.ts ---
import type { NextApiRequest, NextApiResponse } from 'next'
import { is_valid_request, setup_headers } from '../../../utils/backend/common/rq_utils';
import { logCryptoHeroErrorDb } from '../../../utils/backend/common/mongo-helper';
import { FunctionRequest } from '../../../utils/backend/common/types';
import { getCharacterWithPosition, getLeaderboard } from '../../../utils/backend/cryptohero/helper/basic_game';
import { ClassType } from '../../../utils/backend/cryptohero/dungeon/types';

export default async (
    req: NextApiRequest,
    res: NextApiResponse<any>
) => {
    setup_headers(req, res);

    const rq: FunctionRequest = req.body;

    if (!is_valid_request([rq.account_id], res)) {
        return;
    }

    try {
        const mage_entries: any[] = [];
        const knight_entries: any[] = [];
        const ranger_entries: any[] = [];
        const max_results = 50;

        const mageWithPos = await getCharacterWithPosition(rq.account_id, ClassType.Mage);
        if (mageWithPos) {
            mage_entries.push(mageWithPos);
        }

        const knightWithPos = await getCharacterWithPosition(rq.account_id, ClassType.Knight);
        if (knightWithPos) {
            knight_entries.push(knightWithPos);
        }

        const rangerWithPos = await getCharacterWithPosition(rq.account_id, ClassType.Ranger);
        if (rangerWithPos) {
            ranger_entries.push(rangerWithPos);
        }

        await getLeaderboard(ClassType.Mage, max_results).then(x => {
            x.forEach(x => mage_entries.push(x));
        });

        await getLeaderboard(ClassType.Knight, max_results).then(x => {
            x.forEach(x => knight_entries.push(x));
        });

        await getLeaderboard(ClassType.Ranger, max_results).then(x => {
            x.forEach(x => ranger_entries.push(x));
        });

        res.status(200).json({
            success: true,
            data: {
                mage: mage_entries,
                knight: knight_entries,
                ranger: ranger_entries,
            }
        });
    }
    catch (err) {
        await logCryptoHeroErrorDb(err, rq.account_id, "get-leaderboard");
        res.status(200).json({ success: false, error: "Contact discord support" });
    }
}
'''
'''--- pages/api/cryptohero/get-playerdata.ts ---
import type { NextApiRequest, NextApiResponse } from 'next'
import { APP_CONTRACT, viewFunction } from '../../../utils/backend/common/blockchain';
import { is_valid_request, setup_headers } from '../../../utils/backend/common/rq_utils';
import { logCryptoHeroErrorDb } from '../../../utils/backend/common/mongo-helper';
import { FunctionRequest } from '../../../utils/backend/common/types';
import { get_characters_by_ids, get_items_by_ids } from '../../../utils/backend/cryptohero/helper/data_loader';
import { getInventoryData } from '../../../utils/backend/cryptohero/helper/basic_game';
import { ItemToken, PotionData } from '../../../utils/backend/cryptohero/helper/types';
import { GetPotionData } from '../../../utils/backend/cryptohero/helper/utils';
import { PotionType } from '../../../utils/backend/cryptohero/dungeon/types';

export default async (
    req: NextApiRequest,
    res: NextApiResponse<any>
) => {
    setup_headers(req, res);

    const rq: FunctionRequest = req.body;

    if (!is_valid_request([rq.account_id], res)) {
        return;
    }

    try {
        const playerdata = await viewFunction(
            APP_CONTRACT,
            "ch_get_player_data",
            { account_id: rq.account_id }
        );

        const item_ids = playerdata.playerdata.item_ids as string[];
        const char_ids = playerdata.playerdata.character_ids as string[];

        playerdata.items = await get_items_by_ids(item_ids);
        playerdata.characters = await get_characters_by_ids(char_ids);

        const item_tokens: string[] = playerdata.items.map((x: ItemToken) => x.token_id);

        for (let i = 0; i < playerdata.characters.length; i++) {
            const character = playerdata.characters[i];
            const inventoryData = await getInventoryData(rq.account_id, character.class_type);
            const inventory_tokens: string[] = [];

            // filter tokens that the player does not own anymore
            for (let j = 0; j < inventoryData.length; j++) {
                const x = inventoryData[j];
                if (item_tokens.includes(x.token_id)) {
                    inventory_tokens.push(x.token_id);
                }
            }

            character.character_id = undefined;
            character["inventory"] = inventory_tokens;

            character["strengthPotion"] = GetPotionData(character.potions, PotionType.Strength) || new PotionData(PotionType.Strength);
            character["staminaPotion"] = GetPotionData(character.potions, PotionType.Stamina) || new PotionData(PotionType.Stamina);
            character["luckPotion"] = GetPotionData(character.potions, PotionType.Luck) || new PotionData(PotionType.Luck);

            character.potions = undefined;
        }

        playerdata.playerdata.item_ids = undefined;
        playerdata.playerdata.character_ids = undefined;
        playerdata.playerdata.joined_raids = undefined;
        playerdata.maintenance = false;

        res.status(200).json({ success: true, data: playerdata });
    }
    catch (err) {
        await logCryptoHeroErrorDb(err, rq.account_id, "get-playerdata");
        res.status(200).json({ success: false, error: "Contact discord support" });
    }
}
'''
'''--- pages/api/cryptohero/is-valid-login.ts ---
import type { NextApiRequest, NextApiResponse } from 'next'
import { APP_CONTRACT, isAccessKeyValid, viewFunction } from '../../../utils/backend/common/blockchain';
import { is_valid_request, setup_headers } from '../../../utils/backend/common/rq_utils';
import { logCryptoHeroErrorDb } from '../../../utils/backend/common/mongo-helper';

export default async (
    req: NextApiRequest,
    res: NextApiResponse<any>
) => {
    setup_headers(req, res);

    const rq: { account_id: string, publickey: string } = req.body;

    if (!is_valid_request([rq.account_id, rq.publickey], res)) {
        return;
    }

    try {
        const keyState = await isAccessKeyValid(rq.account_id, rq.publickey);

        const player_registered = await viewFunction(
            APP_CONTRACT,
            "ch_is_player_registered",
            { account_id: rq.account_id }
        );

        res.status(200).json({ success: true, data: { valid: keyState.valid, allowance: keyState.allowance, fullAccess: keyState.fullAccess, player_registered: player_registered } });
    }
    catch (err) {
        await logCryptoHeroErrorDb(err, rq.account_id, "is-valid-login");
        res.status(200).json({ success: false, error: "Contact discord support" });
    }
}
'''
'''--- pages/api/cryptohero/marketplace/advanced-search.ts ---
import type { NextApiRequest, NextApiResponse } from 'next'
import { is_defined_request, is_valid_request, setup_headers } from '../../../../utils/backend/common/rq_utils';
import { getCryptoHeroDb, logCryptoHeroErrorDb } from '../../../../utils/backend/common/mongo-helper';
import { ClassType, EquipType, RarityType } from '../../../../utils/backend/cryptohero/dungeon/types';
import { AdvancedSearchRequest } from '../../../../utils/backend/cryptohero/helper/types';
import { clamp } from '../../../../utils/backend/common/utils';

export default async (
    req: NextApiRequest,
    res: NextApiResponse<any>
) => {
    setup_headers(req, res);

    const rq: AdvancedSearchRequest = req.body;

    if (!is_valid_request([rq.account_id, rq.itemdata], res)) {
        return;
    }

    if (!is_defined_request([rq.itemdata.class_type, rq.itemdata.equip_type, rq.itemdata.rarity_type, rq.itemdata.minStat], res)) {
        return;
    }

    try {
        const db = await getCryptoHeroDb();
        const filter = {};

        if (rq.itemdata.rarity_type != RarityType.None) {
            filter["item_data.rarity_type"] = rq.itemdata.rarity_type;
        }

        if (rq.itemdata.class_type != ClassType.None) {
            filter["item_data.class_type"] = rq.itemdata.class_type;
        }

        if (rq.itemdata.equip_type != EquipType.Empty) {
            filter["item_data.equip_type"] = rq.itemdata.equip_type;
        }

        rq.itemdata.minStat = clamp(rq.itemdata.minStat, 0, Infinity);
        //filter["stat_rank"] = { $gte: rq.itemdata.minStat };

        const entries = await db.collection("marketplace").aggregate([
            {
                $project: {
                    item_data: 1,
                    stat_rank: 100
                }
            },
            {
                $match: filter
            },
            {
                $sort: {
                    _id: -1,
                }
            },
            {
                $limit: 500
            }
        ])
        .toArray();

        entries.forEach(x => {
            x._id = undefined;
            x.stat_rank = undefined;
        });

        res.status(200).json({ success: true, data: entries });
    }
    catch (err) {
        await logCryptoHeroErrorDb(err, rq.account_id, "advanced-search");
        res.status(200).json({ success: false, error: "Contact discord support" });
    }
}

function get_func_body(): string {
    const func = `function (idata) {
            let damage = 0;
            let defense = 0;
            let critChance = 0;
            let lifeSteal = 0;
            let dodge = 0;
            let maxHealth = 0;
        
            switch (idata.class_type) {
                case 1:
                    switch (idata.equip_type) {
                        case 0:
                            defense = (idata.strength + idata.endurance) * .01;
                            maxHealth = 1 + Math.round(idata.endurance * 1.75 + idata.intelligence + idata.luck);
                            dodge = (idata.dexterity + idata.luck) * .01;
                            break;
        
                        case 1:
                            defense = (idata.strength + idata.endurance) * .01;
                            damage = 1 + Math.round((idata.luck + idata.intelligence) * .2);
                            break;
        
                        case 2:
                            damage = 1 + Math.round((idata.luck + idata.intelligence + idata.dexterity + idata.strength) * .25);
                            critChance = (idata.intelligence + idata.luck) * .01;
                            lifeSteal = (idata.intelligence + idata.luck) * .005;
                            break;
        
                        case 3:
                            dodge = .01 + (idata.dexterity + idata.luck) * .01;
                            defense = (idata.strength + idata.endurance) * .01;
                            break;
        
                        case 4:
                            maxHealth = 1 + Math.round((idata.endurance + idata.intelligence) * .5);
                            lifeSteal = (idata.intelligence + idata.luck) * .005;
                            break;
        
                        case 5:
                            critChance = (idata.intelligence + idata.luck) * .01;
                            lifeSteal = .01 + (idata.intelligence + idata.luck) * .005;
                            break;
                    }
                    break;
        
                case 2:
                    switch (idata.equip_type) {
                        case 0:
                            defense = (idata.strength + idata.endurance) * .015;
                            maxHealth = 1 + Math.round(idata.endurance * 2.25 + idata.strength + idata.luck);
                            lifeSteal = (idata.intelligence + idata.luck) * .005;
                            break;
        
                        case 1:
                            defense = (idata.strength + idata.endurance) * .01;
                            maxHealth = 1 + Math.round(idata.endurance * 1.5 + idata.strength);
                            break;
        
                        case 2:
                            damage = 1 + Math.round((idata.luck + idata.strength + idata.dexterity + idata.intelligence) * .25);
                            critChance = (idata.strength + idata.luck) * .01;
                            lifeSteal = (idata.intelligence + idata.luck) * .005;
                            break;
        
                        case 3:
                            defense = .01 + (idata.strength + idata.endurance) * .01;
                            dodge = (idata.dexterity + idata.luck) * .01;
                            break;
        
                        case 4:
                            lifeSteal = (idata.intelligence + idata.luck) * .005;
                            defense = .01 + (idata.strength + idata.endurance) * .01;
                            break;
        
                        case 5:
                            critChance = (idata.strength + idata.luck) * .01;
                            maxHealth = 1 + Math.round((idata.endurance + idata.luck) * .75);
                            break;
                    }
                    break;

                    case 3:
                        switch (idata.equip_type) {
                            case 0:
                                dodge = (idata.dexterity + idata.intelligence) * .01;
                                maxHealth = 1 + Math.round(idata.endurance * 2 + idata.dexterity + idata.luck);
                                defense = (idata.strength + idata.endurance) * .01;
                                break;
            
                            case 1:
                                defense = .01 + (idata.strength + idata.endurance) * .01;
                                dodge = (idata.dexterity + idata.luck) * .01;
                                break;
            
                            case 2:
                                damage = 1 + Math.round((idata.luck + idata.dexterity + idata.strength + idata.intelligence) * .25);
                                critChance = (idata.dexterity + idata.luck) * .01;
                                lifeSteal = (idata.intelligence + idata.luck) * .005;
                                break;
            
                            case 3:
                                defense = (idata.strength + idata.endurance) * .01;
                                dodge = .01 + (idata.dexterity + idata.luck) * .01;
                                break;
            
                            case 4:
                                maxHealth = 1 + Math.round((idata.endurance + idata.dexterity) * .5);
                                critChance = (idata.dexterity + idata.luck) * .01;
                                break;
            
                            case 5:
                                damage = 1 + Math.round((idata.luck + idata.dexterity) * .2);
                                lifeSteal = (idata.intelligence + idata.luck) * .005;
                                break;
                        }
                        break;
            }
        
            const statStruct = {
                maxHealth: maxHealth,
                damage: damage,
                // clamping to not exceed 100%
                defense: Math.max(0, Math.min(defense, 100)),
                dodge: Math.max(0, Math.min(dodge, 100)),
                lifeSteal: Math.max(0, Math.min(lifeSteal, 100)),
                critChance: Math.max(0, Math.min(critChance, 100))
            };

            const statRank = Math.round(
                statStruct.critChance * 100 + statStruct.defense * 100 + statStruct.dodge * 100 +
                statStruct.maxHealth / 4 + statStruct.lifeSteal * 100 + statStruct.damage
            );

            return statRank;
        }`;
    return func;
}
'''
'''--- pages/api/cryptohero/marketplace/buy-item.ts ---
import BN from 'bn.js';
import type { NextApiRequest, NextApiResponse } from 'next'
import { getCryptoHeroDb, logCryptoHeroErrorDb } from '../../../../utils/backend/common/mongo-helper';
import { APP_CONTRACT, changeFunctionWithAttachment, checkFunctionResponse } from '../../../../utils/backend/common/blockchain';
import { is_valid_request, setup_headers } from '../../../../utils/backend/common/rq_utils';
import { BuyItemRequest, ItemToken } from '../../../../utils/backend/cryptohero/helper/types';

export default async (
    req: NextApiRequest,
    res: NextApiResponse<any>
) => {
    setup_headers(req, res);

    const rq: BuyItemRequest = req.body;

    if (!is_valid_request([rq.account_id, rq.privatekey, rq.itemdata, rq.itemdata?.token_id], res)) {
        return;
    }

    try {
        const db = await getCryptoHeroDb();
        const entry = await db.collection("marketplace").findOne({ token_id: rq.itemdata.token_id });
        const item_token = entry.item_data as ItemToken;

        if (entry && item_token.owner == rq.account_id) {
            throw "You can't buy your own item";
        }

        const response = await changeFunctionWithAttachment(
            rq.account_id,
            rq.privatekey,
            APP_CONTRACT,
            "ch_buy_item",
            { token_id: rq.itemdata.token_id, owner: item_token.owner, buyer: rq.account_id, price: entry.price },
            new BN('1'),
            "https://pd.marmaj.org/callback?page=item_bought",
            new BN('150000000000000')// 150???
        );

        if (!checkFunctionResponse(response)) {
            return res.status(200).json({ success: false, error: response.error.type });
        }

        await db.collection("marketplace").deleteOne({ token_id: rq.itemdata.token_id });

        res.status(200).json({ success: true, data: response.data });
    }
    catch (err) {
        await logCryptoHeroErrorDb(err, rq.account_id, "buy-item");
        res.status(200).json({ success: false, error: "Contact discord support" });
    }
}
'''
'''--- pages/api/cryptohero/marketplace/cancel-offer-item.ts ---
import BN from 'bn.js';
import type { NextApiRequest, NextApiResponse } from 'next'
import { changeFunctionWithoutAttachment, APP_CONTRACT, checkFunctionResponse } from '../../../../utils/backend/common/blockchain';
import { is_valid_request, setup_headers } from '../../../../utils/backend/common/rq_utils';
import { getCryptoHeroDb, logCryptoHeroErrorDb } from '../../../../utils/backend/common/mongo-helper';
import { CancelOfferItemRequest } from '../../../../utils/backend/cryptohero/helper/types';

export default async (
    req: NextApiRequest,
    res: NextApiResponse<any>
) => {
    setup_headers(req, res);

    const rq: CancelOfferItemRequest = req.body;

    if (!is_valid_request([rq.account_id, rq.privatekey, rq.itemdata, rq.itemdata?.token_id], res)) {
        return;
    }

    try {
        const db = await getCryptoHeroDb();

        const response = await changeFunctionWithoutAttachment(
            rq.account_id,
            rq.privatekey,
            APP_CONTRACT,
            "ch_cancel_offer_item",
            { token_id: rq.itemdata.token_id },
            new BN('15000000000000')// 15
        );

        if (!checkFunctionResponse(response)) {
            return res.status(200).json({ success: false, error: response.error.type });
        }

        await db.collection("marketplace").deleteOne({ token_id: rq.itemdata.token_id });

        res.status(200).json({ success: true });
    }
    catch (err) {
        await logCryptoHeroErrorDb(err, rq.account_id, "cancel-offer-item");
        res.status(200).json({ success: false, error: "Contact discord support" });
    }
}
'''
'''--- pages/api/cryptohero/marketplace/completed-offers.ts ---
import type { NextApiRequest, NextApiResponse } from 'next'
import { getCryptoHeroDb, logCryptoHeroErrorDb } from '../../../../utils/backend/common/mongo-helper';
import { is_valid_request, setup_headers } from '../../../../utils/backend/common/rq_utils';
import { FunctionRequest } from '../../../../utils/backend/common/types';
import { getAccountData } from '../../../../utils/backend/cryptohero/helper/basic_game';
import { get_items_by_ids } from '../../../../utils/backend/cryptohero/helper/data_loader';
import { ItemToken } from '../../../../utils/backend/cryptohero/helper/types';

export default async (
    req: NextApiRequest,
    res: NextApiResponse<any>
) => {
    return res.status(404).json({ error: "404 - Not Found" });
    // setup_headers(req, res);

    // const rq: FunctionRequest = req.body;

    // if (!is_valid_request([rq.account_id], res)) {
    //     return;
    // }

    // try {
    //     const db = await getCryptoHeroDb();
    //     const entries = await db.collection("marketplace_check").find(
    //         { owner: rq.account_id },
    //         { projection: { _id: 0, token_id: 1, buyer: 1 } }
    //     ).toArray();

    //     const keys: string[] = [];
    //     const keyValuePair: { [Key: string]: string[] } = {};

    //     entries.forEach(x => {
    //         if (!keyValuePair[x.buyer]) {
    //             keyValuePair[x.buyer] = [];
    //             keys.push(x.buyer);
    //         }

    //         keyValuePair[x.buyer].push(x.token_id);
    //     });

    //     let item_tokens: ItemToken[] = [];

    //     for (let i = 0; i < keys.length; i++) {
    //         const account_id: string = keys[i];
    //         const token_ids: string[] = keyValuePair[account_id];

    //         const accountdata = await getAccountData(account_id);
    //         const playerdata = accountdata.playerdata;
    //         const item_ids = playerdata.item_ids as string[];

    //         const existent_ids: string[] = [];

    //         for (let j = 0; j < token_ids.length; j++) {
    //             if (item_ids.includes(token_ids[j])) {
    //                 existent_ids.push(token_ids[j]);
    //             }
    //         }

    //         item_tokens = item_tokens.concat(await get_items_by_ids(existent_ids));
    //     }

    //     res.status(200).json({ success: true, data: item_tokens });
    // }
    // catch (err) {
    //     console.log(err);
    //     // await logCryptoHeroErrorDb(err, rq.account_id, "completed-offers");
    //     res.status(200).json({ success: false, error: "Contact discord support" });
    // }
}
'''
'''--- pages/api/cryptohero/marketplace/history.ts ---
import type { NextApiRequest, NextApiResponse } from 'next'
import { is_valid_request, setup_headers } from '../../../../utils/backend/common/rq_utils';
import { getCryptoHeroDb, logCryptoHeroErrorDb } from '../../../../utils/backend/common/mongo-helper';
import { FunctionRequest } from '../../../../utils/backend/common/types';

export default async (
    req: NextApiRequest,
    res: NextApiResponse<any>
) => {
    setup_headers(req, res);

    const rq: FunctionRequest = req.body;

    if (!is_valid_request([rq.account_id], res)) {
        return;
    }

    try {
        const max_results = 20;
        const db = await getCryptoHeroDb();

        const seller_results = await db.collection("market_history")
            .find({ seller: rq.account_id })
            .project({ _id: 0 })
            .sort({ _id: -1 })
            .limit(max_results)
            .toArray();

        const buyer_results = await db.collection("market_history")
            .find({ buyer: rq.account_id })
            .project({ _id: 0 })
            .sort({ _id: -1 })
            .limit(max_results)
            .toArray();

        res.status(200).json({ success: true, data: { seller: seller_results, buyer: buyer_results } });
    }
    catch (err) {
        await logCryptoHeroErrorDb(err, rq.account_id, "history");
        res.status(200).json({ success: false, error: "Contact discord support" });
    }
}
'''
'''--- pages/api/cryptohero/marketplace/offer-item.ts ---
import BN from 'bn.js';
import type { NextApiRequest, NextApiResponse } from 'next'
import { APP_CONTRACT, changeFunctionWithoutAttachment, checkFunctionResponse } from '../../../../utils/backend/common/blockchain';
import { is_valid_request, setup_headers } from '../../../../utils/backend/common/rq_utils';
import { getCryptoHeroDb, logCryptoHeroErrorDb } from '../../../../utils/backend/common/mongo-helper';
import { get_items_by_ids } from '../../../../utils/backend/cryptohero/helper/data_loader';
import { OfferItemRequest } from '../../../../utils/backend/cryptohero/helper/types';
import { getItemBaseData } from '../../../../utils/backend/cryptohero/helper/basic_game';

export default async (
    req: NextApiRequest,
    res: NextApiResponse<any>
) => {
    setup_headers(req, res);

    const rq: OfferItemRequest = req.body;

    if (!is_valid_request([rq.account_id, rq.privatekey, rq.itemdata, rq.itemdata?.token_id, rq.itemdata?.price], res)) {
        return;
    }

    try {
        const db = await getCryptoHeroDb();
        const item = (await get_items_by_ids([rq.itemdata.token_id]))[0];
        const itemBaseData = await getItemBaseData();
        const itemInfo = itemBaseData.find(x => x.item_type == item.item_type);

        const response = await changeFunctionWithoutAttachment(
            rq.account_id,
            rq.privatekey,
            APP_CONTRACT,
            "ch_offer_item",
            { token_id: rq.itemdata.token_id, price: rq.itemdata.price },
            new BN('15000000000000')// 15
        );

        if (!checkFunctionResponse(response)) {
            return res.status(200).json({ success: false, error: response.error.type });
        }

        item["class_type"] = itemInfo.class_type;
        item["equip_type"] = itemInfo.equip_type;
        item.price = rq.itemdata.price;

        await db.collection("marketplace").replaceOne(
            { token_id: rq.itemdata.token_id },
            { token_id: rq.itemdata.token_id, price: rq.itemdata.price, item_data: item, created_at: new Date() },
            { upsert: true }
        );

        res.status(200).json({ success: true });
    }
    catch (err) {
        await logCryptoHeroErrorDb(err, rq.account_id, "offer-item");
        res.status(200).json({ success: false, error: "Contact discord support" });
    }
}
'''
'''--- pages/api/cryptohero/presale/open-lootbox.ts ---
import BN from 'bn.js';
import type { NextApiRequest, NextApiResponse } from 'next'
import { APP_CONTRACT, changeFunctionWithoutAttachment, checkFunctionResponse, MANAGER_ACCOUNT, MANAGER_KEY } from '../../../../utils/backend/common/blockchain';
import { logCryptoHeroErrorDb } from '../../../../utils/backend/common/mongo-helper';
import { is_defined_request, is_valid_request, setup_headers } from '../../../../utils/backend/common/rq_utils';
import { ItemData } from '../../../../utils/backend/cryptohero/dungeon/types';
import { deleteLootbox, getLootbox } from '../../../../utils/backend/cryptohero/helper/basic_game';
import { OpenLootboxRequest } from '../../../../utils/backend/cryptohero/helper/types';

export default async (
    req: NextApiRequest,
    res: NextApiResponse<any>
) => {
    setup_headers(req, res);

    const rq: OpenLootboxRequest = req.body;

    if (!is_valid_request([rq.account_id], res)) {
        return;
    }

    if (!is_defined_request([rq.rarity_type, rq.item1_index, rq.item2_index], res)) {
        return;
    }

    try {
        const lootBoxItems: ItemData[] = await getLootbox(rq.account_id, rq.rarity_type);

        if (!lootBoxItems) {
            throw "No lootbox found";
        }

        if (rq.item1_index < 0 || rq.item1_index >= lootBoxItems.length ||
            rq.item2_index < 0 || rq.item2_index >= lootBoxItems.length) {
            throw "Invalid index";
        }

        const response = await changeFunctionWithoutAttachment(
            MANAGER_ACCOUNT,
            MANAGER_KEY,
            APP_CONTRACT,
            "ch_open_presale_box",
            {
                account_id: rq.account_id,
                item1: lootBoxItems[rq.item1_index],
                item2: lootBoxItems[rq.item2_index],
            },
            new BN('25000000000000')// 25
        );

        if (!checkFunctionResponse(response)) {
            return res.status(200).json({ success: false, error: response.error.type });
        }

        await deleteLootbox(rq.account_id, rq.rarity_type);
        res.status(200).json({ success: true });
    }
    catch (err) {
        await logCryptoHeroErrorDb(err, rq.account_id, "open-lootbox");
        res.status(200).json({ success: false, error: "Contact discord support" });
    }
}
'''
'''--- pages/api/cryptohero/presale/request-lootbox.ts ---
import type { NextApiRequest, NextApiResponse } from 'next'
import { APP_CONTRACT, viewFunction } from '../../../../utils/backend/common/blockchain';
import { logCryptoHeroErrorDb } from '../../../../utils/backend/common/mongo-helper';
import { is_defined_request, is_valid_request, setup_headers } from '../../../../utils/backend/common/rq_utils';
import { ItemData } from '../../../../utils/backend/cryptohero/dungeon/types';
import { checkLootboxBalance, createLootbox, getLootbox } from '../../../../utils/backend/cryptohero/helper/basic_game';
import { RequestLootboxRequest } from '../../../../utils/backend/cryptohero/helper/types';

export default async (
    req: NextApiRequest,
    res: NextApiResponse<any>
) => {
    setup_headers(req, res);

    const rq: RequestLootboxRequest = req.body;

    if (!is_valid_request([rq.account_id], res)) {
        return;
    }

    if (!is_defined_request([rq.rarity_type], res)) {
        return;
    }

    try {
        const playerdata = await viewFunction(
            APP_CONTRACT,
            "ch_get_player_data",
            { account_id: rq.account_id }
        );
        const balance = playerdata.balance;

        if (!checkLootboxBalance(balance, rq.rarity_type)) {
            throw "You don't have lootboxes left";
        }

        let lootBoxItems: ItemData[] = await getLootbox(rq.account_id, rq.rarity_type);
        if (!lootBoxItems) {
            lootBoxItems = await createLootbox(rq.account_id, rq.rarity_type);
        }
        res.status(200).json({ success: true, data: lootBoxItems });
    }
    catch (err) {
        await logCryptoHeroErrorDb(err, rq.account_id, "request-lootbox");
        res.status(200).json({ success: false, error: "Contact discord support" });
    }
}
'''
'''--- pages/api/cryptohero/raid/create-room.ts ---
import type { NextApiRequest, NextApiResponse } from 'next'
import { logCryptoHeroErrorDb } from '../../../../utils/backend/common/mongo-helper';
import { is_defined_request, is_valid_request, setup_headers } from '../../../../utils/backend/common/rq_utils';
import { getCurrentWeekCode } from '../../../../utils/backend/common/utils';
import { getPlayerData, lockAccount, unlockAccount } from '../../../../utils/backend/cryptohero/helper/basic_game';
import { CreateRoomRequest, LockType } from '../../../../utils/backend/cryptohero/helper/types';
import { assert_difficulty, generateCharacterInfo, GetCharacterRank, GetStatRank } from '../../../../utils/backend/cryptohero/helper/utils';
import { RoomData } from '../../../../utils/backend/cryptohero/raid/types';
import { checkInsertUsedItems, createOrUpdateRoom, getRoom } from '../../../../utils/backend/cryptohero/raid/utils';

export default async (
    req: NextApiRequest,
    res: NextApiResponse<any>
) => {
    setup_headers(req, res);

    const rq: CreateRoomRequest = req.body;

    if (!is_valid_request([rq.account_id, rq.privatekey, rq.playerdata, rq.playerdata?.class_type, rq.playerdata?.inventory], res)) {
        return;
    }

    if (!is_defined_request([rq.playerdata.difficulty], res)) {
        return;
    }

    let lockTaken: boolean = false;
    try {
        assert_difficulty(rq.playerdata.difficulty);

        lockTaken = await lockAccount(rq.account_id, LockType.Raid);
        if (!lockTaken) {
            throw "account is locked for Raid";
        }

        const w_code = getCurrentWeekCode();
        let roomData = await getRoom(rq.account_id, w_code);

        if (roomData) {
            throw "Already in a room";
        }

        const playerData = await getPlayerData(rq, true);
        const characterData = playerData.player_character;
        const characterInfo = await generateCharacterInfo(playerData);
        const statRank = GetStatRank(characterInfo);
        const characterRank = GetCharacterRank(statRank, characterData.level);

        const usedItems = playerData.player_inventory.map(x => x.token_id);

        const itemAlreadyUsed = await checkInsertUsedItems(rq.account_id, usedItems, w_code);
        if (itemAlreadyUsed) {
            throw "Equipped item already used by another player this week: " + itemAlreadyUsed;
        }

        // mongodb's code but without 'raid_groups' collection
        roomData = new RoomData(
            rq.account_id,
            w_code,
            rq.playerdata.difficulty,
            [playerData.account_id],
            [characterData.class_type],
            [characterData.level],
            [characterRank],
            [0],
            [playerData.player_inventory.map(x => x.item_type)],
            [characterInfo],
            [Date.now()]
        );

        // -----------------------------------------------------------------------------

        await createOrUpdateRoom(roomData);
        res.status(200).json({ success: true, data: roomData });
    }
    catch (err) {
        await logCryptoHeroErrorDb(err, rq.account_id, "create-room");
        res.status(200).json({ success: false, error: "Contact discord support" });
    }
    finally {
        if (lockTaken) {
            await unlockAccount(rq.account_id, LockType.Raid);
        }
    }
}
'''
'''--- pages/api/cryptohero/raid/delete-room.ts ---
import BN from 'bn.js';
import type { NextApiRequest, NextApiResponse } from 'next'
import { APP_CONTRACT, changeFunctionWithoutAttachment, checkFunctionResponse, MANAGER_ACCOUNT, MANAGER_KEY } from '../../../../utils/backend/common/blockchain';
import { getCryptoHeroDb, logCryptoHeroErrorDb } from '../../../../utils/backend/common/mongo-helper';
import { is_valid_request, setup_headers } from '../../../../utils/backend/common/rq_utils';
import { FunctionRequest } from '../../../../utils/backend/common/types';
import { getCurrentWeekCode, is_testnet_env } from '../../../../utils/backend/common/utils';
import { getRoomByLeader } from '../../../../utils/backend/cryptohero/raid/utils';

export default async (
    req: NextApiRequest,
    res: NextApiResponse<any>
) => {
    setup_headers(req, res);

    const rq: FunctionRequest = req.body;

    if (!is_valid_request([rq.account_id], res)) {
        return;
    }

    try {
        if (!is_testnet_env()) {
            throw "Not possible";
        }

        const w_code = getCurrentWeekCode();
        const roomData = await getRoomByLeader(rq.account_id, w_code);

        if (!roomData) {
            return res.status(200).json({ success: false });
        }

        const response = await changeFunctionWithoutAttachment(
            MANAGER_ACCOUNT,
            MANAGER_KEY,
            APP_CONTRACT,
            "ch_delete_raid",
            {
                account_id: roomData.account_id,
                week_code: roomData.week_code,
            },
            new BN('150000000000000')// 150
        );

        if (!checkFunctionResponse(response)) {
            return res.status(200).json({ success: false, error: response.error.type });
        }

        const db = await getCryptoHeroDb();

        await db.collection("rooms").deleteOne({
            account_id: roomData.account_id,
            week_code: roomData.week_code
        });

        res.status(200).json({ success: true });
    }
    catch (err) {
        await logCryptoHeroErrorDb(err, rq.account_id, "delete-rom");
        res.status(200).json({ success: false, error: "Contact discord support" });
    }
}
'''
'''--- pages/api/cryptohero/raid/get-highscores.ts ---
import type { NextApiRequest, NextApiResponse } from 'next'
import { logCryptoHeroErrorDb } from '../../../../utils/backend/common/mongo-helper';
import { setup_headers, is_valid_request, is_defined_request } from '../../../../utils/backend/common/rq_utils';
import { is_testnet_env } from '../../../../utils/backend/common/utils';
import { getRaidscores, getRoomWithPosition } from '../../../../utils/backend/cryptohero/helper/basic_game';
import { RaidScoresRequest } from '../../../../utils/backend/cryptohero/helper/types';
import { getRoom, RaidPlayersCount } from '../../../../utils/backend/cryptohero/raid/utils';

export default async (
    req: NextApiRequest,
    res: NextApiResponse<any>
) => {
    setup_headers(req, res);

    const rq: RaidScoresRequest = req.body;

    if (!is_valid_request([rq.account_id, rq.raiddata], res)) {
        return;
    }

    if (!is_defined_request([rq.raiddata.difficulty], res)) {
        return;
    }

    try {
        const entries: any[] = [];
        const max_results = 30;

        let roomData = await getRoom(rq.account_id);
        if (roomData &&
            (is_testnet_env() || roomData.playerNames.length == RaidPlayersCount) &&
            roomData.difficulty == rq.raiddata.difficulty) {
            roomData = await getRoomWithPosition(roomData);
            if (roomData) {
                roomData.week_code =
                    roomData.difficulty =
                    roomData.playerEquippedItems =
                    roomData.playerLevels =
                    roomData.playerStatStructs =
                    undefined;
                entries.push(roomData);
            }
        }

        await getRaidscores(rq.raiddata.difficulty, max_results).then(x => {
            x.forEach(x => entries.push(x));
        });

        res.status(200).json({
            success: true,
            data: entries,
        });
    }
    catch (err) {
        await logCryptoHeroErrorDb(err, rq.account_id, "get-highscores");
        res.status(200).json({ success: false, error: "Contact discord support" });
    }
}
'''
'''--- pages/api/cryptohero/raid/get-room-info.ts ---
import type { NextApiRequest, NextApiResponse } from 'next'
import { logCryptoHeroErrorDb } from '../../../../utils/backend/common/mongo-helper';
import { is_valid_request, setup_headers } from '../../../../utils/backend/common/rq_utils';
import { FunctionRequest } from '../../../../utils/backend/common/types';
import { getRoom } from '../../../../utils/backend/cryptohero/raid/utils';

export default async (
    req: NextApiRequest,
    res: NextApiResponse<any>
) => {
    setup_headers(req, res);

    const rq: FunctionRequest = req.body;

    if (!is_valid_request([rq.account_id], res)) {
        return;
    }

    try {
        const roomData = await getRoom(rq.account_id);
        res.status(200).json({ success: true, data: roomData });
    }
    catch (err) {
        await logCryptoHeroErrorDb(err, rq.account_id, "get-room-info");
        res.status(200).json({ success: false, error: "Contact discord support" });
    }
}
'''
'''--- pages/api/cryptohero/raid/join-room.ts ---
import type { NextApiRequest, NextApiResponse } from 'next'
import { logCryptoHeroErrorDb } from '../../../../utils/backend/common/mongo-helper';
import { is_defined_request, is_valid_request, setup_headers } from '../../../../utils/backend/common/rq_utils';
import { getCurrentWeekCode } from '../../../../utils/backend/common/utils';
import { getPlayerData, lockAccount, unlockAccount } from '../../../../utils/backend/cryptohero/helper/basic_game';
import { JoinRoomRequest, LockType } from '../../../../utils/backend/cryptohero/helper/types';
import { assert_difficulty, generateCharacterInfo, GetCharacterRank, GetStatRank } from '../../../../utils/backend/cryptohero/helper/utils';
import { checkInsertUsedItems, createOrUpdateRoom, getRoom, getRoomByLeader, RaidPlayersCount } from '../../../../utils/backend/cryptohero/raid/utils';

export default async (
    req: NextApiRequest,
    res: NextApiResponse<any>
) => {
    setup_headers(req, res);

    const rq: JoinRoomRequest = req.body;

    if (!is_valid_request([rq.account_id, rq.privatekey, rq.playerdata, rq.playerdata?.class_type, rq.playerdata?.inventory], res)) {
        return;
    }

    if (!is_valid_request([rq.roomdata, rq.roomdata?.leader_id], res)) {
        return;
    }

    if (!is_defined_request([rq.playerdata.difficulty], res)) {
        return;
    }

    let lockTaken: boolean = false;
    try {
        assert_difficulty(rq.playerdata.difficulty);

        lockTaken = await lockAccount(rq.account_id, LockType.Raid);
        if (!lockTaken) {
            throw "account is locked for Raid";
        }

        const w_code = getCurrentWeekCode();
        let roomData = await getRoom(rq.account_id, w_code);

        if (roomData) {
            throw "Already in a room";
        }

        const playerData = await getPlayerData(rq, true);
        const characterData = playerData.player_character;
        const characterInfo = await generateCharacterInfo(playerData);
        const statRank = GetStatRank(characterInfo);
        const characterRank = GetCharacterRank(statRank, characterData.level);

        const usedItems = playerData.player_inventory.map(x => x.token_id);

        const itemAlreadyUsed = await checkInsertUsedItems(rq.account_id, usedItems, w_code);
        if (itemAlreadyUsed) {
            throw "Equipped item already used by another player this week: " + itemAlreadyUsed;
        }

        // mongodb's code but without 'raid_groups' collection
        roomData = await getRoomByLeader(rq.roomdata.leader_id, w_code);

        if (!roomData) {
            throw "Room not found";
        }

        if (roomData.playerNames.length >= RaidPlayersCount) {
            throw "Room is full";
        }

        // -----------------------------------------------------------------------------

        // roomData = await getRoomByLeader(rq.roomdata.leader_id, w_code);
        roomData.playerNames.push(rq.account_id);
        roomData.playerClasses.push(characterData.class_type);
        roomData.playerLevels.push(characterData.level);
        roomData.playerRanks.push(characterRank);
        roomData.playerBossKills.push(0);
        roomData.playerEquippedItems.push(playerData.player_inventory.map(x => x.item_type));
        roomData.playerStatStructs.push(characterInfo);
        roomData.playerJoinTimestamps.push(Date.now());

        await createOrUpdateRoom(roomData);
        res.status(200).json({ success: true, data: roomData });
    }
    catch (err) {
        await logCryptoHeroErrorDb(err, rq.account_id, "join-room");
        res.status(200).json({ success: false, error: "Contact discord support" });
    }
    finally {
        if (lockTaken) {
            await unlockAccount(rq.account_id, LockType.Raid);
        }
    }
}
'''
'''--- pages/api/cryptohero/raid/kick-player.ts ---
import type { NextApiRequest, NextApiResponse } from 'next'
import { logCryptoHeroErrorDb } from '../../../../utils/backend/common/mongo-helper';
import { is_valid_request, setup_headers, is_trusted_requestor } from '../../../../utils/backend/common/rq_utils';
import { getCurrentWeekCode } from '../../../../utils/backend/common/utils';
import { lockAccount, unlockAccount } from '../../../../utils/backend/cryptohero/helper/basic_game';
import { KickPlayerRequest, LockType } from '../../../../utils/backend/cryptohero/helper/types';
import { createOrUpdateRoom, getRoomByLeader } from '../../../../utils/backend/cryptohero/raid/utils';

export default async (
    req: NextApiRequest,
    res: NextApiResponse<any>
) => {
    setup_headers(req, res);

    const rq: KickPlayerRequest = req.body;

    if (!is_valid_request([rq.account_id, rq.privatekey, rq.publickey, rq.playerdata, rq.playerdata?.account_id], res)) {
        return;
    }

    if (!await is_trusted_requestor(rq.account_id, rq.privatekey, rq.publickey, res)) {
        return;
    }

    let lockTaken: boolean = false;
    try {
        lockTaken = await lockAccount(rq.account_id, LockType.Raid);
        if (!lockTaken) {
            throw "account is locked for Raid";
        }

        const w_code = getCurrentWeekCode();
        const roomData = await getRoomByLeader(rq.account_id, w_code);

        if (!roomData) {
            throw "Room not found";
        }

        const index = roomData.playerNames.indexOf(rq.playerdata.account_id);

        // we must check if index <= 0 because:
        // -1: player are not in group
        //  0: its the leader itself
        if (index <= 0) {
            throw "Player not found";
        }

        const joinedAt = new Date(roomData.playerJoinTimestamps[index]);
        const elapsedHours = Math.round((new Date().getTime() - joinedAt.getTime()) / 3600000);

        if (elapsedHours > 20) {
            throw `Not possible, player joined ${elapsedHours} hours ago`;
        }

        roomData.playerNames.splice(index, 1);
        roomData.playerClasses.splice(index, 1);
        roomData.playerLevels.splice(index, 1);
        roomData.playerRanks.splice(index, 1);
        roomData.playerBossKills.splice(index, 1);
        roomData.playerEquippedItems.splice(index, 1);
        roomData.playerStatStructs.splice(index, 1);
        roomData.playerJoinTimestamps.splice(index, 1);
        roomData.boss_kills = 0;

        await createOrUpdateRoom(roomData);
        res.status(200).json({ success: true, data: roomData });
    }
    catch (err) {
        await logCryptoHeroErrorDb(err, rq.account_id, "kick-player");
        res.status(200).json({ success: false, error: "Contact discord support" });
    }
    finally {
        if (lockTaken) {
            await unlockAccount(rq.account_id, LockType.Raid);
        }
    }
}
'''
'''--- pages/api/cryptohero/raid/simulate-fight.ts ---
import BN from 'bn.js';
import type { NextApiRequest, NextApiResponse } from 'next'
import { APP_CONTRACT, changeFunctionWithoutAttachment, checkFunctionResponse, MANAGER_ACCOUNT, MANAGER_KEY } from '../../../../utils/backend/common/blockchain';
import { logCryptoHeroErrorDb } from '../../../../utils/backend/common/mongo-helper';
import { is_account_banned, is_valid_request, setup_headers } from '../../../../utils/backend/common/rq_utils';
import { getCurrentWeekCode, is_testnet_env } from '../../../../utils/backend/common/utils';
import { getPlayerData, lockAccount, unlockAccount } from '../../../../utils/backend/cryptohero/helper/basic_game';
import { LockType, StartRoomRequest } from '../../../../utils/backend/cryptohero/helper/types';
import { CharMaxLevel, generateCharacterInfo, GetCharacterRank, GetExpForNextLevel, GetExpGainBasedOnDifficulty, GetRestingTimerBasedOnDifficulty, GetStatRank } from '../../../../utils/backend/cryptohero/helper/utils';
import { GenerateFightStruct } from '../../../../utils/backend/cryptohero/raid/core';
import { checkInsertUsedItems, createOrUpdateRoom, getRoom, RaidPlayersCount } from '../../../../utils/backend/cryptohero/raid/utils';

export default async (
    req: NextApiRequest,
    res: NextApiResponse<any>
) => {
    setup_headers(req, res);

    const rq: StartRoomRequest = req.body;

    if (!is_valid_request([rq.account_id, rq.privatekey, rq.playerdata, rq.playerdata?.class_type, rq.playerdata?.inventory], res)) {
        return;
    }

    if (await is_account_banned(rq.account_id, res)) {
        return;
    }

    let lockTaken: boolean = false;
    try {
        lockTaken = await lockAccount(rq.account_id, LockType.Raid);
        if (!lockTaken) {
            throw "account is locked for Raid";
        }

        const w_code = getCurrentWeekCode();
        const roomData = await getRoom(rq.account_id, w_code);

        if (!roomData) {
            throw "Room not found";
        }

        if (!is_testnet_env() && roomData.playerNames.length < RaidPlayersCount) {
            throw "Room is not full";
        }

        const playerData = await getPlayerData(rq, true);
        const characterData = playerData.player_character;
        const characterInfo = await generateCharacterInfo(playerData);
        const statRank = GetStatRank(characterInfo);
        const characterRank = GetCharacterRank(statRank, characterData.level);
        const index = roomData.playerNames.indexOf(rq.account_id);
        const usedItems = playerData.player_inventory.map(x => x.token_id);

        const itemAlreadyUsed = await checkInsertUsedItems(rq.account_id, usedItems, w_code);
        if (itemAlreadyUsed) {
            throw "Equipped item already used by another player this week: " + itemAlreadyUsed;
        }

        // update player's info
        roomData.playerClasses[index] = characterData.class_type;
        roomData.playerLevels[index] = characterData.level;
        roomData.playerRanks[index] = characterRank;
        roomData.playerEquippedItems[index] = playerData.player_inventory.map(x => x.item_type);
        roomData.playerStatStructs[index] = characterInfo;

        const raidInfo = GenerateFightStruct(roomData);

        const restingTimer = GetRestingTimerBasedOnDifficulty(roomData.difficulty, characterData.potions);
        const expGain = GetExpGainBasedOnDifficulty(roomData.difficulty, raidInfo.victory);
        let lvlUp = false;

        if (characterData.level < CharMaxLevel) {
            characterData.experience += expGain;
            lvlUp = characterData.experience >= GetExpForNextLevel(characterData.level);

            if (lvlUp) {
                do {
                    characterData.level++;
                } while (characterData.experience >= GetExpForNextLevel(characterData.level));
            }
        }

        const contract_args = {
            account_id: rq.account_id,
            character_results: {
                class_type: characterData.class_type,
                exp_gain: expGain,
                level_up: lvlUp,
                resting_timer: restingTimer.toString(),
            },
            difficulty: roomData.difficulty,
            victory: raidInfo.victory,
            leader_id: roomData.account_id,
            week_code: roomData.week_code,
        };

        // mongodb's code
        const response = await changeFunctionWithoutAttachment(
            MANAGER_ACCOUNT,
            MANAGER_KEY,
            APP_CONTRACT,
            "ch_save_raid_result_tmp",
            { result: contract_args },
            new BN('15000000000000')// 15
        );

        if (!checkFunctionResponse(response)) {
            return res.status(200).json({ success: false, error: response.error.type });
        }

        if (raidInfo.victory) {
            roomData.playerBossKills[index]++;
            roomData.boss_kills++;
        }
        roomData.last_fight = Date.now();

        await createOrUpdateRoom(roomData);
        res.status(200).json({ success: true, data: raidInfo });
    }
    catch (err) {
        await logCryptoHeroErrorDb(err, rq.account_id, "simulate-fight");
        res.status(200).json({ success: false, error: "Contact discord support" });
    }
    finally {
        if (lockTaken) {
            await unlockAccount(rq.account_id, LockType.Raid);
        }
    }
}
'''
'''--- pages/api/cryptohero/refill-fightpoints.ts ---
import BN from 'bn.js';
import type { NextApiRequest, NextApiResponse } from 'next'
import { logCryptoHeroErrorDb } from '../../../utils/backend/common/mongo-helper';
import { changeFunctionWithAttachment, APP_CONTRACT, checkFunctionResponse } from '../../../utils/backend/common/blockchain';
import { is_valid_request, setup_headers } from '../../../utils/backend/common/rq_utils';
import { FunctionRequest } from '../../../utils/backend/common/types';

export default async (
    req: NextApiRequest,
    res: NextApiResponse<any>
) => {
    setup_headers(req, res);

    const rq: FunctionRequest = req.body;

    if (!is_valid_request([rq.account_id, rq.privatekey], res)) {
        return;
    }

    try {
        const response = await changeFunctionWithAttachment(
            rq.account_id,
            rq.privatekey,
            APP_CONTRACT,
            "ch_refill_fight_balance",
            {},
            new BN('200000000000000000000000'),
            "https://pd.marmaj.org/callback?page=refill_ch",
            new BN('40000000000000')// 40
        );

        if (!checkFunctionResponse(response)) {
            return res.status(200).json({ success: false, error: response.error.type });
        }

        res.status(200).json({ success: true, data: response.data });
    }
    catch (err) {
        await logCryptoHeroErrorDb(err, rq.account_id, "refill-fightpoints");
        res.status(200).json({ success: false, error: "Contact discord support" });
    }
}
'''
'''--- pages/api/cryptohero/rewards/reward-raid-easy.ts ---
import { getCryptoHeroDb, logPixelPetsErrorDb } from "../../../../utils/backend/common/mongo-helper";
import { getPreviousWeekCode } from "../../../../utils/backend/common/utils";
import { getRaidscores } from "../../../../utils/backend/cryptohero/helper/basic_game";
import { DifficultyType } from "../../../../utils/backend/cryptohero/dungeon/types";
import { changeFunctionWithoutAttachment, MANAGER_ACCOUNT, MANAGER_KEY } from "../../../../utils/backend/common/blockchain";
import BN from "bn.js";

export default async (req, res) => {

    if (req.body.tk != "abcdefg2021") {
        res.send("okay");
        return;
    }

    const w_code = getPreviousWeekCode();
    const reason = w_code + "-Raid-Easy";

    const easy_entries = await getRaidscores(DifficultyType.Easy, 12, w_code);
    // const first_bucket = [];
    // const second_bucket = [];

    const total_bucket = [];

    const total_boss_defeats = easy_entries.reduce((n, { boss_kills }) => n + boss_kills, 0);
    // let i = 0;
    easy_entries.forEach(element => {
        const tokens = Math.floor(4000 * (element.boss_kills / total_boss_defeats) / 8);
        if (tokens > 0) {
            //console.log("Group " + ((i / 8) + 1) + ": " + tokens + " PXT");
            element.playerNames.forEach(playername => {
                total_bucket.push({ receiver_id: playername, pixeltoken: (tokens * 1000000).toString() });

                // if (i < 90) {
                //     first_bucket.push({ receiver_id: playername, pixeltoken: (tokens * 1000000).toString() });
                // }
                // else if (i < 180) {
                //     second_bucket.push({ receiver_id: playername, pixeltoken: (tokens * 1000000).toString() });
                // }

                // i++;

            });
        }
    });

    const db = await getCryptoHeroDb();

    try {
        await changeFunctionWithoutAttachment(MANAGER_ACCOUNT, MANAGER_KEY, "pixeltoken.near", "reward_tokens", { rewards: total_bucket, reason: reason + " 1/1" }, new BN('200000000000000'));
        //await changeFunctionWithoutAttachment(MANAGER_ACCOUNT, MANAGER_KEY, "pixeltoken.near", "reward_tokens", { rewards: second_bucket, reason: reason + " 2/2" }, new BN('200000000000000'));

        await db.collection("distributed_rewards").insertOne({ reason, rewards: total_bucket, created_at: Date.now(), type: 3 });

        res.statusCode = 200;
        res.send(reason + " done");

    }
    catch (err) {
        await logPixelPetsErrorDb(err, "admin", "reward-raid-easy");
        res.status(200).json({ success: false, error: "Contact discord support" });
    }
};

'''
'''--- pages/api/cryptohero/rewards/reward-raid-hard.ts ---
import { getCryptoHeroDb, logPixelPetsErrorDb } from "../../../../utils/backend/common/mongo-helper";
import { getPreviousWeekCode } from "../../../../utils/backend/common/utils";
import { getRaidscores } from "../../../../utils/backend/cryptohero/helper/basic_game";
import { DifficultyType } from "../../../../utils/backend/cryptohero/dungeon/types";
import { changeFunctionWithoutAttachment, MANAGER_ACCOUNT, MANAGER_KEY } from "../../../../utils/backend/common/blockchain";
import BN from "bn.js";

export default async (req, res) => {

    if (req.body.tk != "abcdefg2021") {
        res.send("okay");
        return;
    }

    const w_code = getPreviousWeekCode();
    const reason = w_code + "-Raid-Hard";

    const easy_entries = await getRaidscores(DifficultyType.Hard, 4, w_code);

    const total_bucket = [];

    const total_boss_defeats = easy_entries.reduce((n, { boss_kills }) => n + boss_kills, 0);
    let i = 0;
    easy_entries.forEach(element => {
        const tokens = Math.floor(4000 * (element.boss_kills / total_boss_defeats) / 8);
        if (tokens > 0) {
            //console.log("Group " + ((i / 8) + 1) + ": " + tokens + " PXT");
            element.playerNames.forEach(playername => {
                total_bucket.push({ receiver_id: playername, pixeltoken: (tokens * 1000000).toString() });

            });
        }
    });

    //console.log(total_bucket);

    const db = await getCryptoHeroDb();

    try {
        await changeFunctionWithoutAttachment(MANAGER_ACCOUNT, MANAGER_KEY, "pixeltoken.near", "reward_tokens", { rewards: total_bucket, reason: reason + " 1/1" }, new BN('200000000000000'));
        await db.collection("distributed_rewards").insertOne({ reason, rewards: total_bucket, created_at: Date.now(), type: 5 });

        res.statusCode = 200;
        res.send(reason + " done");

    }
    catch (err) {
        await logPixelPetsErrorDb(err, "admin", "reward-raid-hard");
        res.status(200).json({ success: false, error: "Contact discord support" });
    }
};

'''
'''--- pages/api/cryptohero/rewards/reward-raid-medium.ts ---
import { getCryptoHeroDb, logPixelPetsErrorDb } from "../../../../utils/backend/common/mongo-helper";
import { getPreviousWeekCode } from "../../../../utils/backend/common/utils";
import { getRaidscores } from "../../../../utils/backend/cryptohero/helper/basic_game";
import { DifficultyType } from "../../../../utils/backend/cryptohero/dungeon/types";
import { changeFunctionWithoutAttachment, MANAGER_ACCOUNT, MANAGER_KEY } from "../../../../utils/backend/common/blockchain";
import BN from "bn.js";

export default async (req, res) => {

    if (req.body.tk != "abcdefg2021") {
        res.send("okay");
        return;
    }

    const w_code = getPreviousWeekCode();
    const reason = w_code + "-Raid-Medium";

    const easy_entries = await getRaidscores(DifficultyType.Medium, 8, w_code);

    const total_bucket = [];

    const total_boss_defeats = easy_entries.reduce((n, { boss_kills }) => n + boss_kills, 0);
    easy_entries.forEach(element => {
        const tokens = Math.floor(4000 * (element.boss_kills / total_boss_defeats) / 8);
        if (tokens > 0) {
            //console.log("Group " + ((i / 8) + 1) + ": " + tokens + " PXT");
            element.playerNames.forEach(playername => {
                total_bucket.push({ receiver_id: playername, pixeltoken: (tokens * 1000000).toString() });

            });
        }
    });

    const db = await getCryptoHeroDb();

    try {
        await changeFunctionWithoutAttachment(MANAGER_ACCOUNT, MANAGER_KEY, "pixeltoken.near", "reward_tokens", { rewards: total_bucket, reason: reason + " 1/1" }, new BN('200000000000000'));
        await db.collection("distributed_rewards").insertOne({ reason, rewards: total_bucket, created_at: Date.now(), type: 4 });
        //console.log(total_bucket);
        res.statusCode = 200;
        res.send(reason + " done");

    }
    catch (err) {
        await logPixelPetsErrorDb(err, "admin", "reward-raid-medium");
        res.status(200).json({ success: false, error: "Contact discord support" });
    }
};

'''
'''--- pages/api/cryptohero/simulate-dungeon.ts ---
import BN from "bn.js";
import { NextApiRequest, NextApiResponse } from "next";
import { APP_CONTRACT, changeFunctionWithoutAttachment, checkFunctionResponse, MANAGER_ACCOUNT, MANAGER_KEY } from "../../../utils/backend/common/blockchain";
import { logCryptoHeroDungeonDb, logCryptoHeroErrorDb } from "../../../utils/backend/common/mongo-helper";
import { is_account_banned, is_defined_request, is_valid_request, setup_headers } from "../../../utils/backend/common/rq_utils";
import { GenerateFightStruct } from "../../../utils/backend/cryptohero/dungeon/core";
import { getPlayerData, lockAccount, unlockAccount, updateLeaderboard } from "../../../utils/backend/cryptohero/helper/basic_game";
import { DungeonRequest, LockType } from "../../../utils/backend/cryptohero/helper/types";
import { assert_difficulty, CharMaxLevel, generateCharacterInfo, GetCharacterRank, GetExpForNextLevel, GetExpGainBasedOnDifficulty, GetRestingTimerBasedOnDifficulty, GetStatRank } from "../../../utils/backend/cryptohero/helper/utils";

export default async (
    req: NextApiRequest,
    res: NextApiResponse<any>
) => {
    setup_headers(req, res);

    const rq: DungeonRequest = req.body;

    if (!is_valid_request([rq.account_id, rq.privatekey, rq.playerdata, rq.playerdata?.class_type, rq.playerdata?.inventory], res)) {
        return;
    }

    if (!is_defined_request([rq.playerdata.difficulty], res)) {
        return;
    }

    if (await is_account_banned(rq.account_id, res)) {
        return;
    }

    let lockTaken: boolean = false;
    try {
        assert_difficulty(rq.playerdata.difficulty);

        lockTaken = await lockAccount(rq.account_id, LockType.Dungeon);
        if (!lockTaken) {
            throw "account is locked for Dungeon";
        }

        const playerData = await getPlayerData(rq);
        const characterData = playerData.player_character;
        const characterInfo = await generateCharacterInfo(playerData);

        const dungeonInfo = GenerateFightStruct(rq.playerdata.difficulty, characterInfo, characterData.potions);
        const statRank = GetStatRank(characterInfo);

        // console.log("dungeonFightStruct: " + JSON.stringify(dungeonInfo, null, 4));

        const restingTimer = GetRestingTimerBasedOnDifficulty(rq.playerdata.difficulty, characterData.potions);
        const expGain = GetExpGainBasedOnDifficulty(rq.playerdata.difficulty, dungeonInfo.victory);
        let lvlUp = false;

        if (characterData.level < CharMaxLevel) {
            characterData.experience += expGain;
            lvlUp = characterData.experience >= GetExpForNextLevel(characterData.level);

            if (lvlUp) {
                do {
                    characterData.level++;
                } while (characterData.experience >= GetExpForNextLevel(characterData.level));
            }
        }

        const characterRank = GetCharacterRank(statRank, characterData.level);

        const contract_args = {
            account_id: rq.account_id,
            character_results: {
                class_type: characterData.class_type,
                exp_gain: expGain,
                level_up: lvlUp,
                resting_timer: restingTimer.toString(),
            },
            dungeon_results: {
                difficulty: rq.playerdata.difficulty,
                victory: dungeonInfo.victory,
                item_drop: dungeonInfo.victory ? dungeonInfo.itemDrop : undefined,
            }
        };

        const response = await changeFunctionWithoutAttachment(
            MANAGER_ACCOUNT,
            MANAGER_KEY,
            APP_CONTRACT,
            "ch_save_dungeon_result",
            { result: contract_args },
            new BN('20000000000000')// 20
        );

        if (!checkFunctionResponse(response)) {
            return res.status(200).json({ success: false, error: response.error.type });
        }

        if (dungeonInfo.victory) {
            dungeonInfo.itemDrop["token_id"] = response.data;
        }

        await updateLeaderboard(characterRank, playerData);
        await logCryptoHeroDungeonDb(rq.account_id);
        res.status(200).json({ success: true, data: dungeonInfo });
    }
    catch (err) {
        console.log(err);
        await logCryptoHeroErrorDb(err, rq.account_id, "simulate-dungeon");
        res.status(200).json({ success: false, error: "Contact discord support" });
    }
    finally {
        if (lockTaken) {
            await unlockAccount(rq.account_id, LockType.Dungeon);
        }
    }
}
'''
'''--- pages/api/pixelpets/get-latest-rewards.ts ---
import type { NextApiRequest, NextApiResponse } from 'next'
import { setup_headers } from '../../../utils/backend/common/rq_utils';
import { getPixelPetsDb, logPixelPetsErrorDb } from '../../../utils/backend/common/mongo-helper';

export default async (
    req: NextApiRequest,
    res: NextApiResponse<any>
) => {
    setup_headers(req, res);
    const db = await getPixelPetsDb();

    try {
        const latest_rewards = await db.collection("distributed_rewards").find({}).sort({ "created_at": -1 }).limit(4).toArray();
        res.status(200).json({ success: true, data: latest_rewards });
    }
    catch (err) {
        await logPixelPetsErrorDb(err, "view", "get-latest-rewards");
        res.status(200).json({ success: false, error: "Contact discord support" });
    }
}

'''
'''--- pages/api/pixelpets/get-leaderboard.ts ---
import type { NextApiRequest, NextApiResponse } from 'next'
import { getLeaderboard, getTournament } from '../../../utils/backend/pixelpets/helper/basic_game';
import { setup_headers } from '../../../utils/backend/common/rq_utils';
import { getPixelPetsDb, logPixelPetsErrorDb } from '../../../utils/backend/common/mongo-helper';
import { getCurrentWeekCode, getNextWeekTimestamp } from '../../../utils/backend/common/utils';
import { FunctionRequest } from '../../../utils/backend/common/types';

export default async (
    req: NextApiRequest,
    res: NextApiResponse<any>
) => {
    setup_headers(req, res);
    const rq: FunctionRequest = req.body;
    try {
        const db = await getPixelPetsDb();
        const w_code = getCurrentWeekCode();
        const leaderboard_entries: any[] = []
        const tournament_entries: any[] = []
        // when the client provides its own account_id
        // no matter the player are or not on top100
        // it'll appear at first entry
        if (rq.account_id) {
            const x = await db.collection("leaderboard").findOne(
                { account_id: rq.account_id },
                {
                    projection: {
                        _id: 0,
                        last_fight: 0,
                        player_loadout: {
                            pet_level: 0,
                            pet_trainLevel: 0,
                            pet_power_level: 0,
                            pet_experience: 0,
                        }
                    }
                });
            if (x) {
                const index = await db.collection("leaderboard")
                    .find({})
                    .sort({
                        player_rating: -1,
                    })
                    .toArray()
                    .then(a => a.findIndex(b => b.account_id == x.account_id));
                x["position"] = index + 1;
                leaderboard_entries.push(x);
            }

            const x2 = await db.collection("tournament").findOne(
                { account_id: rq.account_id, week_code: w_code, },
                {
                    projection: {
                        _id: 0,
                        last_fight: 0,
                        week_code: 0,
                        created_at: 0,
                    }
                });
            if (x2) {
                const index = await db.collection("tournament")
                    .aggregate([
                        {
                            $match: {
                                week_code: w_code
                            }
                        },
                        {
                            $project: {
                                _id: 0,
                                account_id: 1,
                                matches_lost: 1,
                                matches_won: 1,
                                score: {
                                    $subtract: ["$matches_won", "$matches_lost"]
                                }
                            }
                        },
                        {
                            $sort: {
                                score: -1
                            }
                        }
                    ])
                    .toArray()
                    .then(a => a.findIndex(b => b.account_id == x2.account_id));
                x2["position"] = index + 1;
                tournament_entries.push(x2);
            }
        }

        await getLeaderboard(50).then(x => {
            x.forEach(x => leaderboard_entries.push(x));
        });

        await getTournament(w_code, 50).then(x => {
            x.forEach(x => tournament_entries.push(x));
        });

        res.status(200).json({
            success: true,
            data: {
                leaderboard: leaderboard_entries,
                tournament: tournament_entries,
                active_tournament: w_code,
                tournament_ends: getNextWeekTimestamp()
            }
        });
    }
    catch (err) {
        await logPixelPetsErrorDb(err, rq.account_id, "get_leaderboard");
        res.status(200).json({ success: false, error: "Contact discord support" });
    }
}

'''
'''--- pages/api/pixelpets/get-playerdata.ts ---
import type { NextApiRequest, NextApiResponse } from 'next'
import { scaled_pets_by_ids } from '../../../utils/backend/pixelpets/helper/pet_scaling';
import { is_valid_request, setup_headers } from '../../../utils/backend/common/rq_utils';
import { logPixelPetsErrorDb } from '../../../utils/backend/common/mongo-helper';
import { FunctionRequest } from '../../../utils/backend/common/types';
import { checkDecreaseRating, getAccountData } from '../../../utils/backend/pixelpets/helper/basic_game';

export default async (
    req: NextApiRequest,
    res: NextApiResponse<any>
) => {
    setup_headers(req, res);
    const rq: FunctionRequest = req.body;
    if (!is_valid_request([rq.account_id], res)) {
        return;
    }
    try {
        const accountdata = await getAccountData(rq.account_id);

        if (!await checkDecreaseRating(rq.account_id, accountdata, res)) {
            return;
        }

        const playerdata = accountdata.playerdata;
        const pet_ids = playerdata.pet_ids as string[];

        accountdata.pets = await scaled_pets_by_ids(pet_ids);
        playerdata.pet_ids = undefined;
        accountdata.maintenance = false;

        //console.log(playerdata.pets);
        res.status(200).json({ success: true, data: accountdata });
    }
    catch (err) {
        await logPixelPetsErrorDb(err, rq.account_id, "get_player_data");
        res.status(200).json({ success: false, error: "Contact discord support" });
    }
}

'''
'''--- pages/api/pixelpets/get-prev-week-top30.ts ---
import type { NextApiRequest, NextApiResponse } from 'next'
import { getTournament } from '../../../utils/backend/pixelpets/helper/basic_game';
import { setup_headers } from '../../../utils/backend/common/rq_utils';
import { logPixelPetsErrorDb } from '../../../utils/backend/common/mongo-helper';
import { getPreviousWeekCode } from '../../../utils/backend/common/utils';
import { FunctionRequest } from '../../../utils/backend/common/types';

export default async (
    req: NextApiRequest,
    res: NextApiResponse<any>
) => {
    setup_headers(req, res);
    const rq: FunctionRequest = req.body;
    try {
        const w_code = getPreviousWeekCode();
        const entries = await getTournament(w_code, 30);

        res.status(200).json({
            success: true,
            data: {
                tournament: entries,
                active_tournament: w_code,
            }
        });
    }
    catch (err) {
        await logPixelPetsErrorDb(err, rq.account_id, "get-prev-week-top30");
        res.status(200).json({ success: false, error: "Contact discord support" });
    }
}

'''
'''--- pages/api/pixelpets/is-valid-login.ts ---
import type { NextApiRequest, NextApiResponse } from 'next'
import { APP_CONTRACT, isAccessKeyValid, viewFunction } from '../../../utils/backend/common/blockchain';
import { is_valid_request, setup_headers } from '../../../utils/backend/common/rq_utils';
import { logPixelPetsErrorDb } from '../../../utils/backend/common/mongo-helper';

export default async (
    req: NextApiRequest,
    res: NextApiResponse<any>
) => {
    setup_headers(req, res);
    const rq: { account_id: string, publickey: string } = req.body;
    if (!is_valid_request([rq.account_id, rq.publickey], res)) {
        return;
    }
    try {
        const keyState = await isAccessKeyValid(rq.account_id, rq.publickey);
        const player_registered = await viewFunction(APP_CONTRACT, "is_player_registered", { account_id: rq.account_id });
        res.status(200).json({ success: true, data: { valid: keyState.valid, allowance: keyState.allowance, fullAccess: keyState.fullAccess, player_registered: player_registered } });
    }
    catch (err) {
        await logPixelPetsErrorDb(err, rq.account_id, "is_valid_login/is_player_registered");
        res.status(200).json({ success: false, error: "Contact discord support" });
    }
}

'''
'''--- pages/api/pixelpets/marketplace/buy-pet.ts ---
import BN from 'bn.js';
import type { NextApiRequest, NextApiResponse } from 'next'
import { getPixelPetsDb, logPixelPetsErrorDb } from '../../../../utils/backend/common/mongo-helper';
import { APP_CONTRACT, changeFunctionWithAttachment, checkFunctionResponse } from '../../../../utils/backend/common/blockchain';
import { is_valid_request, setup_headers } from '../../../../utils/backend/common/rq_utils';
import { CancelOfferPetRequest } from '../../../../utils/backend/pixelpets/helper/types';

export default async (
    req: NextApiRequest,
    res: NextApiResponse<any>
) => {
    setup_headers(req, res);
    const rq: CancelOfferPetRequest = req.body;
    if (!is_valid_request([rq.account_id, rq.privatekey, rq.token_id], res)) {
        return;
    }
    try {
        const db = await getPixelPetsDb();
        const pet_info = await db.collection("marketplace").findOne({ token_id: rq.token_id });
        if (pet_info && pet_info.pet_data.owner == rq.account_id) {
            throw 'You can\'t buy your own pet'
        }
        const response = await changeFunctionWithAttachment(rq.account_id, rq.privatekey, APP_CONTRACT, "marketplace_buy", { token_id: rq.token_id, owner: pet_info.pet_data.owner, buyer: rq.account_id, price: pet_info.price }, new BN('1'), "https://pd.marmaj.org/callback?page=pet_bought", new BN('150000000000000'));
        if (!checkFunctionResponse(response)) {
            return res.status(200).json({ success: false, error: response.error.type });
        }
        await db.collection("marketplace").deleteOne({ token_id: rq.token_id });
        await db.collection("marketplace_check").insertOne({ token_id: rq.token_id, buyer: rq.account_id, owner: pet_info.pet_data.owner, price: pet_info.price });

        res.status(200).json({ success: true, data: response.data });
    }
    catch (err) {
        await logPixelPetsErrorDb(err, rq.account_id, "marketplace_buy");
        res.status(200).json({ success: false, error: "Contact discord support" });
    }
}

'''
'''--- pages/api/pixelpets/marketplace/cancel-offer-pet.ts ---
import BN from 'bn.js';
import type { NextApiRequest, NextApiResponse } from 'next'
import { changeFunctionWithoutAttachment, APP_CONTRACT, checkFunctionResponse } from '../../../../utils/backend/common/blockchain';
import { is_valid_request, setup_headers } from '../../../../utils/backend/common/rq_utils';
import { CancelOfferPetRequest } from '../../../../utils/backend/pixelpets/helper/types';
import { getPixelPetsDb, logPixelPetsErrorDb } from '../../../../utils/backend/common/mongo-helper';

export default async (
    req: NextApiRequest,
    res: NextApiResponse<any>
) => {
    setup_headers(req, res);
    const rq: CancelOfferPetRequest = req.body;
    if (!is_valid_request([rq.account_id, rq.privatekey, rq.token_id], res)) {
        return;
    }
    try {
        const db = await getPixelPetsDb();
        const response = await changeFunctionWithoutAttachment(rq.account_id, rq.privatekey, APP_CONTRACT, "cancel_offer_pet", { token_id: rq.token_id }, new BN('12000000000000'));
        if (!checkFunctionResponse(response)) {
            return res.status(200).json({ success: false, error: response.error.type });
        }
        const marketplace = await db.collection("marketplace").deleteOne({ token_id: rq.token_id });

        res.status(200).json({ success: true });
    }
    catch (err) {
        await logPixelPetsErrorDb(err, rq.account_id, "cancel_offer_pet");
        res.status(200).json({ success: false, error: "Contact discord support" });
    }
}

'''
'''--- pages/api/pixelpets/marketplace/get-available-pets.ts ---
import type { NextApiRequest, NextApiResponse } from 'next'
import { STARTER_PET_IDS } from '../../../../utils/backend/pixelpets/helper/basic_game';
import { is_valid_request, setup_headers } from '../../../../utils/backend/common/rq_utils';
import { getPixelPetsDb, logPixelPetsErrorDb } from '../../../../utils/backend/common/mongo-helper';
import { FunctionRequest } from '../../../../utils/backend/common/types';

export default async (
    req: NextApiRequest,
    res: NextApiResponse<any>
) => {
    setup_headers(req, res);
    const rq: FunctionRequest = req.body;
    if (!is_valid_request([rq.account_id], res)) {
        return;
    }

    try {
        const db = await getPixelPetsDb();
        const results = await db.collection("marketplace").distinct("pet_data.pet_type", {
            // "pet_data.owner": {// filter all pets from the requesting player
            //     $ne: rq.account_id,
            // }
        })
        .then(x => x.filter(pet_id => !STARTER_PET_IDS.includes(pet_id)));

        res.status(200).json({ success: true, data: results });
    }
    catch (err) {
        await logPixelPetsErrorDb(err, rq.account_id, "get_available_pets");
        res.status(200).json({ success: false, error: "Contact discord support" });
    }
}

'''
'''--- pages/api/pixelpets/marketplace/offer-pet.ts ---
import BN from 'bn.js';
import type { NextApiRequest, NextApiResponse } from 'next'
import { APP_CONTRACT, changeFunctionWithoutAttachment, checkFunctionResponse } from '../../../../utils/backend/common/blockchain';
import { scaled_pets_by_ids } from '../../../../utils/backend/pixelpets/helper/pet_scaling';
import { is_valid_request, setup_headers } from '../../../../utils/backend/common/rq_utils';
import { OfferPetRequest } from '../../../../utils/backend/pixelpets/helper/types';
import { getPixelPetsDb, logPixelPetsErrorDb } from '../../../../utils/backend/common/mongo-helper';

export default async (
    req: NextApiRequest,
    res: NextApiResponse<any>
) => {
    setup_headers(req, res);
    const rq: OfferPetRequest = req.body;
    if (!is_valid_request([rq.account_id, rq.privatekey, rq.token_id, rq.price], res)) {
        return;
    }
    try {
        const db = await getPixelPetsDb();
        const pet = await scaled_pets_by_ids([rq.token_id]);

        pet[0].price = rq.price;
        pet[0].state = 2;

        const response = await changeFunctionWithoutAttachment(rq.account_id, rq.privatekey, APP_CONTRACT, "offer_pet", { token_id: rq.token_id, price: rq.price }, new BN('17000000000000'));
        if (!checkFunctionResponse(response)) {
            return res.status(200).json({ success: false, error: response.error.type });
        }
        const options = { upsert: true };
        const marketplace = await db.collection("marketplace").replaceOne({ token_id: rq.token_id }, { token_id: rq.token_id, price: rq.price, pet_data: pet[0] }, options);

        res.status(200).json({ success: true });
    }
    catch (err) {
        await logPixelPetsErrorDb(err, rq.account_id, "offer_pet");
        res.status(200).json({ success: false, error: "Contact discord support" });
    }
}

'''
'''--- pages/api/pixelpets/marketplace/search.ts ---
import type { NextApiRequest, NextApiResponse } from 'next'
import { is_defined_request, is_valid_request, setup_headers } from '../../../../utils/backend/common/rq_utils';
import { getPixelPetsDb, logPixelPetsErrorDb } from '../../../../utils/backend/common/mongo-helper';

export default async (
    req: NextApiRequest,
    res: NextApiResponse<any>
) => {
    setup_headers(req, res);
    const rq: { account_id: string, /*pet_name: string,*/ pet_type: number } = req.body;
    if (!is_valid_request([rq.account_id/*, rq.pet_name*/], res)) {
        return;
    }
    if (!is_defined_request([rq.pet_type], res)) {
        return;
    }
    try {
        const db = await getPixelPetsDb();
        const entries = await db.collection("marketplace").find({
            // "pet_data.owner": {// filter all pets from the requesting player
            //         $ne: rq.account_id,
            // },
            // "pet_data.combat_info.name": rq.pet_name
            "pet_data.pet_type": rq.pet_type
        })
        .project({
            _id: 0,
            pet_data: {
                token_id: 0,
                xp: 0,
                // owner: 0,
                price: 0,
                state: 0,
                state_timer: 0,
                combat_info: 0,
            }
        })
        .limit(100)
        .toArray();

        res.status(200).json({ success: true, data: entries });
    }
    catch (err) {
        await logPixelPetsErrorDb(err, rq.account_id, "search");
        res.status(200).json({ success: false, error: "Contact discord support" });
    }
}

'''
'''--- pages/api/pixelpets/marketplace/search2.ts ---
import type { NextApiRequest, NextApiResponse } from 'next'
import { is_valid_request, setup_headers } from '../../../../utils/backend/common/rq_utils';
import { getPixelPetsDb, logPixelPetsErrorDb } from '../../../../utils/backend/common/mongo-helper';

export default async (
    req: NextApiRequest,
    res: NextApiResponse<any>
) => {
    setup_headers(req, res);
    const rq: { account_id: string, search_type: string } = req.body;
    if (!is_valid_request([rq.account_id], res)) {
        return;
    }
    try {
        const db = await getPixelPetsDb();
        const entries = await db.collection("marketplace").find({
            // "pet_data.owner": { $ne: rq.account_id, },
            "pet_data.power_level": { $gt: 77 }
        })
        .project({
            _id: 0,
            pet_data: {
                token_id: 0,
                xp: 0,
                // owner: 0,
                price: 0,
                state: 0,
                state_timer: 0,
                combat_info: 0,
            }
        })
        .sort({ "pet_data.rarity": -1, "pet_data.power_level": -1 })
        .limit(100)
        .toArray();

        res.status(200).json({ success: true, data: entries });
    }
    catch (err) {
        await logPixelPetsErrorDb(err, rq.account_id, "search");
        res.status(200).json({ success: false, error: "Contact discord support" });
    }
}

'''
'''--- pages/api/pixelpets/open-egg.ts ---
import BN from 'bn.js';
import type { NextApiRequest, NextApiResponse } from 'next'
import { getPetBaseData } from '../../../utils/backend/pixelpets/helper/basic_game';
import { APP_CONTRACT, changeFunctionWithoutAttachment, checkFunctionResponse } from '../../../utils/backend/common/blockchain';
import { is_valid_request, setup_headers } from '../../../utils/backend/common/rq_utils';
import { PetToken } from '../../../utils/backend/pixelpets/helper/types';
import { generateCardStats } from '../../../utils/backend/pixelpets/fight/utils';
import { logPixelPetsErrorDb } from '../../../utils/backend/common/mongo-helper';
import { FunctionRequest } from '../../../utils/backend/common/types';

export default async (
    req: NextApiRequest,
    res: NextApiResponse<any>
) => {
    setup_headers(req, res);
    const rq: FunctionRequest = req.body;
    if (!is_valid_request([rq.account_id, rq.privatekey], res)) {
        return;
    }
    try {
        const pet_base_data = await getPetBaseData();
        const response = await changeFunctionWithoutAttachment(rq.account_id, rq.privatekey, APP_CONTRACT, "open_egg", {}, new BN('45000000000000'));
        if (!checkFunctionResponse(response)) {
            return res.status(200).json({ success: false, error: response.error.type });
        }
        const pet = response.data as unknown as PetToken;

        //console.log(pet);
        const petbase = pet_base_data.find(x => x.pet_id == pet.pet_type);
        if (petbase == null) {
            throw "pettype not found";
        }

        pet["combat_info"] = generateCardStats(petbase, pet.rarity, pet.train_level, pet.level, petbase.evolution, pet.power_level, true)

        res.status(200).json({ success: true, data: pet });
    }
    catch (err) {
        // console.log(err);
        //const em = (err.kind.ExecutionError as string);
        //log em to mongodb
        await logPixelPetsErrorDb(err, rq.account_id, "open_egg");
        res.status(200).json({ success: false, error: "Contact discord support" });
    }
}

'''
'''--- pages/api/pixelpets/refill-fightpoints.ts ---
import BN from 'bn.js';
import type { NextApiRequest, NextApiResponse } from 'next'
import { logPixelPetsErrorDb } from '../../../utils/backend/common/mongo-helper';
import { changeFunctionWithAttachment, APP_CONTRACT, checkFunctionResponse } from '../../../utils/backend/common/blockchain';
import { is_valid_request, setup_headers } from '../../../utils/backend/common/rq_utils';
import { CancelOfferPetRequest } from '../../../utils/backend/pixelpets/helper/types';

export default async (
    req: NextApiRequest,
    res: NextApiResponse<any>
) => {
    setup_headers(req, res);
    const rq: CancelOfferPetRequest = req.body;
    if (!is_valid_request([rq.account_id, rq.privatekey], res)) {
        return;
    }
    try {
        const response = await changeFunctionWithAttachment(rq.account_id, rq.privatekey, APP_CONTRACT, "refill_fight_balance", {}, new BN('250000000000000000000000'), "https://pd.marmaj.org/callback?page=refill", new BN('40000000000000'));
        if (!checkFunctionResponse(response)) {
            return res.status(200).json({ success: false, error: response.error.type });
        }
        res.status(200).json({ success: true, data: response.data });
    }
    catch (err) {
        await logPixelPetsErrorDb(err, rq.account_id, "refill_fight_balance");
        res.status(200).json({ success: false, error: "Contact discord support" });
    }
}

'''
'''--- pages/api/pixelpets/rewards/reward-clash.ts ---
import BN from "bn.js";
import { getTournament } from "../../../../utils/backend/pixelpets/helper/basic_game";
import { changeFunctionWithoutAttachment, MANAGER_ACCOUNT, MANAGER_KEY } from "../../../../utils/backend/common/blockchain";
import { getPixelPetsDb, logPixelPetsErrorDb } from "../../../../utils/backend/common/mongo-helper";
import { getPreviousWeekCode } from "../../../../utils/backend/common/utils";

export default async (req, res) => {

    if (req.body.tk != "abcdefg2021") {
        res.send("okay");
        return;
    }

    const w_code = getPreviousWeekCode();
    const reason = w_code + "-Clash";
    
    const entries = await getTournament(w_code, 60);

    const total_bucket = [];

    entries.forEach((element, index) => {
        total_bucket.push({ receiver_id: element.account_id, pixeltoken: calculateReward(index + 1, 1) });

    });

    const db = await getPixelPetsDb();

    try {
        const resp = await changeFunctionWithoutAttachment(MANAGER_ACCOUNT, MANAGER_KEY, "pixeltoken.near", "reward_tokens", { rewards: total_bucket, reason: reason + " 1/1" }, new BN('200000000000000'));
        if(!resp.success) {
            throw "Distribution not possible."
        }
        await db.collection("distributed_rewards").insertOne({ reason, rewards: total_bucket, created_at: Date.now(), type: 0 });
        res.statusCode = 200;
        res.send(reason + " done");

    }
    catch (err) {
        await logPixelPetsErrorDb(err, "admin", "reward-clash");
        res.status(200).json({ success: false, error: err });
    }
};

function calculateReward(place: number, factor: number = 1) {
    let pixeltoken = 0;
    if (place < 2) {
        pixeltoken = 160 * factor;
    } else if (place < 3) {
        pixeltoken = 125 * factor;
    } else if (place < 4) {
        pixeltoken = 110 * factor;
    } else if (place < 5) {
        pixeltoken = 80 * factor;
    } else if (place < 11) {
        pixeltoken = 70 * factor;
    }
    else if (place < 21) {
        pixeltoken = 65 * factor;
    }
    else if (place < 31) {
        pixeltoken = 60 * factor;
    }
    else if (place < 41) {
        pixeltoken = 50 * factor;
    }
    else if (place < 51) {
        pixeltoken = 40 * factor;
    }
    else if (place < 61) {
        pixeltoken = 30 * factor;
    }
    return (pixeltoken * 1000000).toString();
}
'''
'''--- pages/api/pixelpets/rewards/reward-global.ts ---
import BN from "bn.js";
import { getLeaderboard } from "../../../../utils/backend/pixelpets/helper/basic_game";
import { changeFunctionWithoutAttachment, MANAGER_ACCOUNT, MANAGER_KEY } from "../../../../utils/backend/common/blockchain";
import { getPixelPetsDb, logPixelPetsErrorDb } from "../../../../utils/backend/common/mongo-helper";
import { getCurrentWeekCode } from "../../../../utils/backend/common/utils";

export default async (req, res) => {

    if (req.body.tk != "abcdefg2021") {
        res.send("okay");
        return;
    }

    const reason = getCurrentWeekCode() + "-Global";

    const entries = await getLeaderboard(60);

    const total_bucket = [];

    entries.forEach((element, index) => {
        total_bucket.push({ receiver_id: element.account_id, pixeltoken: calculateReward(index + 1, 1) });
    });
    const db = await getPixelPetsDb();

    try {
        const resp = await changeFunctionWithoutAttachment(MANAGER_ACCOUNT, MANAGER_KEY, "pixeltoken.near", "reward_tokens", { rewards: total_bucket, reason: reason + " 1/1" }, new BN('200000000000000'));
        if(!resp.success) {
            throw "Distribution not possible."
        }
        await db.collection("distributed_rewards").insertOne({ reason, rewards: total_bucket, created_at: Date.now(), type: 1 });

        res.statusCode = 200;
        res.send(reason + " done");
    }
    catch (err) {
        await logPixelPetsErrorDb(err, "admin", "reward-global");
        res.status(200).json({ success: false, error: err });
    }
};

function calculateReward(place: number, factor: number = 1) {
    let pixeltoken = 0;
    if (place < 2) {
        pixeltoken = 250 * factor;
    } else if (place < 3) {
        pixeltoken = 200 * factor;
    } else if (place < 4) {
        pixeltoken = 150 * factor;
    } else if (place < 5) {
        pixeltoken = 125 * factor;
    } else if (place < 11) {
        pixeltoken = 100 * factor;
    }
    else if (place < 21) {
        pixeltoken = 90 * factor;
    }
    else if (place < 31) {
        pixeltoken = 80 * factor;
    }
    else if (place < 41) {
        pixeltoken = 70 * factor;
    }
    else if (place < 51) {
        pixeltoken = 60 * factor;
    }
    else if (place < 61) {
        pixeltoken = 50 * factor;
    }
    return (pixeltoken * 1000000).toString();
}

'''
'''--- pages/api/pixelpets/simulate-fight.ts ---
import type { NextApiRequest, NextApiResponse } from 'next'
import { FightRequest, LockType } from '../../../utils/backend/pixelpets/helper/types';
import { APP_CONTRACT, changeFunctionWithoutAttachment, checkFunctionResponse, MANAGER_ACCOUNT, MANAGER_KEY } from '../../../utils/backend/common/blockchain';

import {
    checkDecreaseRating,
    getEnemyTeam_v5,
    getPlayerTeam,
    lockAccount,
    unlockAccount,
    updateLeaderboard
} from '../../../utils/backend/pixelpets/helper/basic_game'

import {
    generateBattleInfo,
    getPreviousPlayerData,
    updatePlayersAfterBattle,
    updatePlayersCardStats,
} from '../../../utils/backend/pixelpets/fight/core'

import {
    is_valid_request, setup_headers
} from '../../../utils/backend/common/rq_utils';
import { logPixelPetsErrorDb } from '../../../utils/backend/common/mongo-helper';

export default async (
    req: NextApiRequest,
    res: NextApiResponse<any>
) => {
    setup_headers(req, res);

    const rq: FightRequest = req.body;

    if (!is_valid_request([rq.account_id, rq.privatekey, rq.playerdata, rq.playerdata?.pet_loadout], res)) {
        return;
    }

    let lockTaken: boolean = false;
    try {
        lockTaken = await lockAccount(rq.account_id, LockType.Fight);
        if (!lockTaken) {
            throw "account is locked for Fight";
        }

        if (!await checkDecreaseRating(rq.account_id, null, res)) {
            return;
        }

        const playerData = await getPlayerTeam(rq);
        const enemyData = await getEnemyTeam_v5(playerData);

        // console.log(
        //     playerData.account_id + "(" + playerData.player_rating.toString() + ")" +
        //     " vs " +
        //     enemyData.account_id + "(" + enemyData.player_rating.toString() + ")"
        // );

        const battleInfo = generateBattleInfo(playerData, enemyData);
        const playerWon = battleInfo.winnerAccountName == playerData.account_id;
        const prevPlayerData = getPreviousPlayerData(playerData, battleInfo.playerInfo1);

        if (playerWon) {
            battleInfo.expGain = updatePlayersAfterBattle(playerData, enemyData, true);
        } else {
            battleInfo.expGain = updatePlayersAfterBattle(enemyData, playerData, false);
        }

        battleInfo.rankChange = playerData.player_rating - prevPlayerData.rating;

        // console.log(
        //     "Previous rating: " + prevPlayerData.rating.toString() + 
        //     ", current: " + playerData.player_rating.toString() +
        //     " > " + battleInfo.rankChange.toString());

        // console.log("prevPlayerData: " + JSON.stringify(prevPlayerData));

        let i = 0;
        const petResultsInfo = prevPlayerData.pets.map(x => {
            const j = i++;
            const dead = battleInfo.player1CardStats[j].health <= 0;
            const lvlUp = playerData.player_loadout[j].pet_level > x.level;
            const xpGain = playerData.player_loadout[j].pet_experience - x.exp;
            if (lvlUp) {
                playerData.player_loadout[j].pet_experience = 0;
            }
            return {
                token_id: playerData.player_loadout[j].token_id,
                injured: dead,
                xp_gain: xpGain,
                level_up: lvlUp,
            }
        });

        // this function only reset cards health
        // do not call this before 'petResultsInfo'
        updatePlayersCardStats(battleInfo);

        // // console.log("BattleInfo: " + JSON.stringify(battleInfo));
        // console.log("PetResults: " + JSON.stringify(petResultsInfo));
        // console.log("Winner: " + battleInfo.winnerAccountName);

        const contract_args = {
            account_id: rq.account_id,
            pet_results: petResultsInfo,
            rating_change: battleInfo.rankChange,
            won: playerWon,
        };

        // console.log("Contract args: " + JSON.stringify(contract_args));

        const response = await changeFunctionWithoutAttachment(
            MANAGER_ACCOUNT,
            MANAGER_KEY,
            APP_CONTRACT,
            "save_fight_result",
            { result: contract_args });

        if (!checkFunctionResponse(response)) {
            return res.status(200).json({ success: false, error: response.error.type });
        }

        await updateLeaderboard(playerData, playerWon);

        // console.log(response);

        res.status(200).json({ success: true, data: battleInfo });
    }
    catch (err) {
        await logPixelPetsErrorDb(err, rq.account_id, "simulate-fight");
        res.status(200).json({ success: false, error: "Contact discord support" });
    }
    finally {
        if (lockTaken) {
            await unlockAccount(rq.account_id, LockType.Fight);
        }
    }
}

// near view pixeltoken.testnet get_player_data "{ \"account_id\": \"bubruno.testnet\" }"
// near view pixeltoken.testnet get_pets_by_ids "{ \"pet_ids\": [ \"100\", \"101\", \"102\" ] }"
'''
'''--- pages/api/proxy/call-change-function.ts ---
import type { NextApiRequest, NextApiResponse } from 'next'
import { changeFunctionWithoutAttachment, checkFunctionResponse } from '../../../utils/backend/common/blockchain';
import { is_valid_request, setup_headers } from '../../../utils/backend/common/rq_utils';
import { logPixelPetsErrorDb } from '../../../utils/backend/common/mongo-helper';
import { FunctionRequest } from '../../../utils/backend/common/types';
import { DEFAULT_FUNCTION_CALL_GAS } from 'near-api-js';
import BN from 'bn.js';

export default async (
    req: NextApiRequest,
    res: NextApiResponse<any>
) => {
    setup_headers(req, res);
    const rq: FunctionRequest = req.body;
    if (!is_valid_request([rq.account_id, rq.privatekey, rq.contract_id, rq.method_name/*, rq.args*/], res)) {
        return;
    }
    try {
        if (Object.keys(rq.args).length) {
            rq.args = JSON.parse(rq.args);
        }
        else {
            rq.args = {};
        }

        let attachedGas = DEFAULT_FUNCTION_CALL_GAS;

        if(rq.raise_gas) {
            attachedGas =  new BN('110000000000000')// 110
        }

        const response = await changeFunctionWithoutAttachment(rq.account_id, rq.privatekey, rq.contract_id, rq.method_name, rq.args, attachedGas);
        if (!checkFunctionResponse(response)) {
            return res.status(200).json({ success: false, error: response.error.type });
        }
        //console.log(response);
        //check for contract panic
        res.status(200).json({ success: true, data: response.data });
    }
    catch (err) {
        await logPixelPetsErrorDb(err, rq.account_id, "changeFunction");
        res.status(200).json({ success: false, error: "Check transaction error on wallet." });
    }

}

'''
'''--- pages/api/proxy/call-view-function.ts ---
import type { NextApiRequest, NextApiResponse } from 'next'
import { viewFunction } from '../../../utils/backend/common/blockchain';
import { is_valid_request, setup_headers } from '../../../utils/backend/common/rq_utils';
import { logPixelPetsErrorDb } from '../../../utils/backend/common/mongo-helper';
import { FunctionRequest } from '../../../utils/backend/common/types';

export default async (
    req: NextApiRequest,
    res: NextApiResponse<any>
) => {
    setup_headers(req, res);

    const rq: FunctionRequest = Object.assign({}, req.body);

    if (!is_valid_request([rq.contract_id, rq.method_name/*, rq.args*/], res)) {
        return;
    }

    if (Object.keys(rq.args).length) {
        rq.args = JSON.parse(rq.args);
    }
    else {
        rq.args = {};
    }
    try {
        const response = await viewFunction(rq.contract_id, rq.method_name, rq.args);
        res.status(200).json({ success: true, data: response });
    }
    catch (err) {
        await logPixelPetsErrorDb(err, rq.account_id, "viewFunction");
        res.status(200).json({ success: false, error: "Check transaction error on wallet." });
    }
}

'''
'''--- pages/api/proxy/get-ed25519pair.ts ---
import type { NextApiRequest, NextApiResponse } from 'next'
import { setup_headers } from '../../../utils/backend/common/rq_utils';
const nearAPI = require("near-api-js");
const b58 = require('b58');

export default async (
    req: NextApiRequest,
    res: NextApiResponse<any>
) => {
    setup_headers(req, res);

    let pair = nearAPI.utils.KeyPairEd25519.fromRandom();
    const privateKey = pair.secretKey
    const pub = pair.getPublicKey().data
    const pubKey = Buffer.from(pub).toString('hex')
    const publicKey = "ed25519:" + b58.encode(Buffer.from(pubKey.toUpperCase(), 'hex'))

    res.status(200).json(
        {
            privateKey,
            publicKey
        }
    );
}

'''
'''--- pages/api/proxy/get-key-allowance.ts ---
import type { NextApiRequest, NextApiResponse } from 'next'
import { isAccessKeyValid } from '../../../utils/backend/common/blockchain';
import { is_valid_request, setup_headers } from '../../../utils/backend/common/rq_utils';

export default async (
    req: NextApiRequest,
    res: NextApiResponse<any>
) => {
    setup_headers(req, res);
    const rq: { account_id: string, publickey: string } = req.body;
    if (!is_valid_request([rq.account_id, rq.publickey], res)) {
        return;
    }
    const keyState = await isAccessKeyValid(rq.account_id, rq.publickey);
    res.status(200).json({ success: true, data: { valid: keyState.valid, allowance: keyState.allowance, fullAccess: keyState.fullAccess } });
}

'''
'''--- pages/api/proxy/get-login-url.ts ---
import type { NextApiRequest, NextApiResponse } from 'next'
import getConfig from '../../../utils/backend/common/server-config';
import { is_valid_request, setup_headers } from '../../../utils/backend/common/rq_utils';

export default async (
    req: NextApiRequest,
    res: NextApiResponse<any>
) => {
    setup_headers(req, res);
    const rq: { referrer: string, public_key: string, contract_id: string, fullaccess: boolean, wallet_id: string } = req.body;
    if (!is_valid_request([rq.referrer, rq.public_key, rq.contract_id], res)) {
        return;
    }
    if (rq.fullaccess && !is_valid_request([rq.wallet_id], res)) {
        return;
    }

    // if (rq.fullaccess && !is_valid_request([rq.wallet_id], res)) {
    //   return;
    // }
    const config = getConfig();
    let login_url = config.walletUrl + "/login/?referrer=NEAR-API-PROXY " + rq.referrer + "&public_key=" + rq.public_key + "&contract_id=" + rq.contract_id;
    if (rq.fullaccess) {
        login_url = config.walletUrl + "/login/?referrer=NEAR-API-PROXY " + rq.referrer + "&public_key=" + rq.public_key + "&contract_id=" + rq.wallet_id;
    }

    res.status(200).json(
        {
            url: login_url
        }
    );
}

'''
'''--- pages/api/proxy/get-transaction-signing-url.ts ---
import BN from 'bn.js';
import { DEFAULT_FUNCTION_CALL_GAS, utils } from 'near-api-js';
import { functionCall } from 'near-api-js/lib/transaction';
import { TransactionManager } from "near-transaction-manager";
import type { NextApiRequest, NextApiResponse } from 'next'
import { getAccount, getSigningTransactionsWalletUrl } from '../../../utils/backend/common/blockchain';
import { is_valid_request, setup_headers } from '../../../utils/backend/common/rq_utils';
import { WalletRequest } from '../../../utils/backend/common/types';

export default async (
    req: NextApiRequest,
    res: NextApiResponse<any>
) => {
    setup_headers(req, res);
    const rq: WalletRequest = req.body;
    is_valid_request([rq.account_id, rq.private_key, rq.method, rq.receiver_id, rq.referrer], res);
    // TODO: 'attachedNear' and 'callbackUrl' should be checked too?

    try {
        const nearAccount = await getAccount(rq.account_id, rq.private_key);
        const transactionManager = TransactionManager.fromAccount(nearAccount);

        const transaction = await transactionManager.createTransaction({
            receiverId: rq.receiver_id,
            actions: [functionCall(rq.method, rq.args || {}, DEFAULT_FUNCTION_CALL_GAS, new BN(utils.format.parseNearAmount(rq.attachedNear)))],
        });

        const walletUrl = getSigningTransactionsWalletUrl([transaction], rq.referrer, rq.callbackUrl);

        res.status(200).json(
            {
                success: true,
                url: walletUrl
            }
        );
    }
    catch (err) {
        res.status(400).json(
            {
                success: false,
                error: "Invalid credentials"
            }
        );
    }
}

'''
'''--- pages/callback/index.js ---
import { useRouter } from "next/router";
import { useEffect, useState } from "react";
import Head from "next/head";
import Footer from "../../components/Footer";

export default function Home() {
  const [Page, setPage] = useState(undefined);
  const [ErrorCode, setErrorCode] = useState(undefined);
  const router = useRouter();

  useEffect(async () => {
    setErrorCode(router.query.errorCode);
    console.log(router.query.errorCode)
  }, [router.query.errorCode]);

  useEffect(async () => {
    setPage(router.query.page);
    console.log(router.query.page)
  }, [router.query.page]);

  return (
    <div className="font-monst">
      <Head>
        <title>PixelDapps</title>
      </Head>
      <br /><br /><br /><br />

      {((Page == undefined) && ErrorCode == undefined) && (
        <>
          <div style={{ color: "white", textAlign: "center", margin: "auto" }}>Unknown callback, please contact support</div>
        </>
      )}

      {(Page == "login" && ErrorCode == undefined) && (
        <>
          <div style={{ color: "white", textAlign: "center", margin: "auto" }}>When you entered your wallet correctly, you should be now able to play pixelpets - have fun playing! :)</div>
        </>
      )}

      {(Page == "pet_bought" && ErrorCode == undefined) && (
        <>
          <div style={{ color: "white", textAlign: "center", margin: "auto" }}>Pet successfully bought, take care of it! :)</div>
        </>
      )}

      {(Page == "pet_bought" && ErrorCode == undefined) && (
        <>
          <div style={{ color: "white", textAlign: "center", margin: "auto" }}>Item successfully bought, take care of it! :)</div>
        </>
      )}

      {(Page == "refill" && ErrorCode == undefined) && (
        <>
          <div style={{ color: "white", textAlign: "center", margin: "auto" }}>Your account is refilled with 100 fighting points and you got an egg - have fun playing! :)</div>
        </>
      )}

      {(Page == "refill_ch" && ErrorCode == undefined) && (
        <>
          <div style={{ color: "white", textAlign: "center", margin: "auto" }}>Your account is refilled with 100 dungeon keys - have fun playing! :)</div>
        </>
      )}

      {(Page == "login_success" && ErrorCode == undefined) && (
        <>
          <div style={{ color: "white", textAlign: "center", margin: "auto" }}>Your login was successful, please click "Authorized" within the game - have fun playing! :)</div>
        </>
      )}

      {(Page == "login_fail" && ErrorCode == undefined) && (
        <>
          <div style={{ color: "white", textAlign: "center", margin: "auto" }}>Login failed - contact discord support</div>
        </>
      )}

      {ErrorCode != undefined && (
        <>

          <div style={{ color: "red", textAlign: "center", margin: "auto" }}> An error occured: {ErrorCode} :(
            <br />Please contact support on Discord and provide transaction details.
          </div>
        </>
      )}

      <br />
      <div style={{ color: "white", textAlign: "center", margin: "auto" }}>You can close this window</div>
      <br /><br /><br /><br />
      <Footer />
    </div>
  );
}

'''
'''--- pages/index.js ---
import Navbar from "../components/Navbar";
import Footer from "../components/Footer";
import PixelPets from "./presale/pixelpets";
import CryptoHero from "./presale/cryptohero";
import CTT from "./presale/ctt";
import Stats from "./tokenomics/Stats";
import { useRouter } from "next/router";
import { useEffect, useState } from "react";
import Head from "next/head";
import { initContract } from "../utils/frontend/near";
import { useRecoilState } from "recoil";
import { userState } from "../utils/frontend/store";
import Pixelparty from "./presale/pixelparty";
import Navbar2 from "../components/Navbar2";

export default function Home() {
  const [Page, setPage] = useState("index");
  const [UserState, setUserState] = useRecoilState(userState);
  const router = useRouter();

  useEffect(async () => {
    setPage(router.query.page);
  }, [router.query.page]);

  useEffect(async () => {
    initContract(setUserState);
  }, []);

  return (
    <div className="font-monst">
      <Head>
        <title>PixelDapps</title>
      </Head>
      <Navbar />
      {Page == "index" && (
        <>
          <PixelPets />

        </>
      )}
      {(Page == "pixelparty") && (
        <>
          <Pixelparty />
        </>
      )}
      {(Page == "pixeltoken") && (
        <>
          <Stats />

        </>
      )}
      {(Page == "pixelpets") && (
        <>
          <PixelPets />

        </>
      )}
      {(Page == "cryptohero") && (
        <>
          <CryptoHero />

        </>
      )}

      {(Page == undefined || Page == "ctt") && (
        <>
          <CTT />

        </>
      )}

      {(Page == "aur") && (
        <>
          <Navbar2 />

        </>
      )}
      <Footer />
    </div>
  );
}

'''
'''--- pages/presale/cryptohero.js ---
/* This example requires Tailwind CSS v2.0+ */
import { CheckIcon } from "@heroicons/react/solid";
import { Disclosure } from "@headlessui/react";
import { ChevronDownIcon } from "@heroicons/react/outline";
import { useEffect, useState } from "react";
import { account_id, buy_item, getSupplyData, requestLogin } from "../../utils/frontend/near";

function classNames(...classes) {
  return classes.filter(Boolean).join(" ");
}

export default function CH_Presale() {

  return (
    <div className="bg-gray-800">

      <div className="mx-auto mt-8 mb-6 sm:px-6 lg:px-0 max-w-7xl">
        <div className="relative shadow-xl sm:rounded-2xl sm:overflow-hidden">
          <div className="absolute inset-0">
            <img
              className="h-full w-full object-cover"
              src="/shiney.svg"
              alt="People working on laptops"
            />
            <div className="absolute inset-0 bg-indigo-700 mix-blend-multiply" />
          </div>
          <div className="relative px-4 pt-8 sm:px-6 sm:pt-20 lg:pt-10 lg:px-6">
            <h1 className="text-center text-2xl font-extrabold tracking-tight sm:text-3xl lg:text-4xl">
              <span className="block text-white">What is Cryptoheroes?</span>
            </h1>
            <p className="mt-6 max-w-lg mx-auto text-center text-lg text-gray-200 sm:max-w-3xl">
              <a
                href="https://pd.marmaj.org/cryptoheroes"
                className="px-8 py-2 mx-auto mt-10 text-base font-medium text-white bg-gray-700 border border-transparent rounded-md shadow w-sm hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-white focus:ring-offset-2 focus:ring-offset-indigo-600"
              >
                Play Cryptoheroes!
              </a>
              <br /><br />

              Cryptoheroes is a blockchain based game, focused on PvE looting, trading and forging items as well as fighting bosses with friends to earn PXT. <br /> <br />
              Enter dangerous dungeon on your own, defeat evil minions and gather loot to improve your strength! <br /> <br />
              Join raids with allies to defeat more evil bosses in epic fights and compete about weekly PXT rewards!  <br />
              Each raid consists of 8 players and the top 20 raids are rewarded each week. You can also place your items on the marketplace or reforge them to improve your existing gear.
            </p>
            <br />
            <p className="mt-6 max-w-lg mx-auto text-center text-lg text-gray-200 sm:max-w-3xl">

              <b>How to earn?</b><br />

              Collect to earn (Dungeons & Marketplace): <br />
              Defeat enemies in dungeons, collect powerful items and sell them on the marketplace.
              <br /><br />
              Compete to earn (Raids):<br />
              Team up with 7 other players and join the weekly raid together to compete with other teams. The top 20 raid teams are rewarded with PXT.

            </p>
          </div>
          <br /><br />
        </div>
      </div>

      {/* <div className="mt-12">
        <div className="max-w-7xl mx-auto py-8 px-4 sm:py-16 sm:px-6 lg:px-8">
          <div className="max-w-3xl mx-auto divide-y-2 divide-gray-700">
            <h2 className="text-center text-3xl font-extrabold text-gray-200 sm:text-4xl">
              Cryptoheroes Q & A
            </h2>
            <dl className="mt-6 space-y-6 divide-y divide-gray-700">
              {faqs.map((faq) => (
                <Disclosure defaultOpen={true} as="div" key={faq.question} className="pt-6">
                  {({ open }) => (
                    <>    <br />
                      <dt className="text-lg">
                        <Disclosure.Button className="text-left w-full flex justify-between items-start text-gray-400">
                          <span className="font-medium text-gray-200">
                            {faq.question}
                          </span>
                          <span className="ml-6 h-7 flex items-center">
                            <ChevronDownIcon
                              className={classNames(
                                open ? "-rotate-180" : "rotate-0",
                                "h-6 w-6 transform"
                              )}
                              aria-hidden="true"
                            />
                          </span>
                        </Disclosure.Button>
                      </dt>
                      <Disclosure.Panel as="dd" className="mt-2 pr-12">
                        <p className="text-base text-gray-400">{faq.answer}</p>
                        <br />
                      </Disclosure.Panel>
                    </>
                  )}
                </Disclosure>
              ))}
            </dl>
          </div>
        </div>
      </div> */}
    </div>
  );
}

const faqs = [
  {
    question: "What type of heroes are available?",
    answer:
      "Each player has 3 heroes to manage: A knight, mage and assassin.",
  },
  {
    question: "Can an item be equipped to any hero?",
    answer:
      "Items are usually bound to a class.",
  },
  {
    question: "How many items can a hero wear?",
    answer:
      "Six items per hero: Weapon, hat, necklace, ring, armor and shoes. The global inventory can contain up to 60 items.",
  },
  {
    question: "Do heroes have any stats or just item stats?",
    answer:
      "The hero has some basic stats, but hero stats are mainly provided by weared items.",
  },
  {
    question: "Will there be regular lootboxes in the final game?",
    answer:
      "We have not decided to add lootboxes in game yet. However, if that changes it's likely they only contain 2-3 items to choose from and not 10. Loot is usally collected by defeating dungeons.",
  },
  {
    question: "What is the rarity of titan items?",
    answer:
      "It gives a random item that ranges from rare to epic and legendary.",
  }
];

'''
'''--- pages/presale/ctt.js ---
import { Disclosure } from "@headlessui/react";
import { ChevronDownIcon, ClipboardListIcon } from "@heroicons/react/outline";
import { useState, useEffect } from "react";
import { account_id, buy_item, getSupplyData, is_whitelisted, requestLogin } from "../../utils/frontend/near";

function classNames(...classes) {
  return classes.filter(Boolean).join(" ");
}

const tiers = [
  {
    name: "Whitelist Minting",
    img: "ctt/mint1.png",
    price: 1,
    includedFeatures: ["1 NEAR", "500 max supply"],
    type: "wl"
  },
  {
    name: "Discounted Minting",
    img: "ctt/mint2.png",
    price: 1.5,
    includedFeatures: ["1.5 NEAR", "1000 max supply"],
    type: "ps"
  },
  {
    name: "Regular Minting",
    img: "ctt/mint3.png",
    price: 2,
    includedFeatures: ["2 NEAR", "5200 max supply"],
    type: "mint"
  }
];

export default function CTT() {

  function supplyCheck(supply_used, type) {
    let max_supply = 0;
    if (type == "wl") {
      max_supply = 500;
    }
    else if (type == "ps") {
      max_supply = 1000;
    }
    else if (type == "mint") {
      max_supply = 5200;
    }
    //console.log(max_supply);

    const supply = Math.abs(supply_used - max_supply);

    if (supply > 20000) {
      return "checking...";
    }
    if (supply == 0) {
      return "Soldout!";
    }

    return supply;
  }

  function buy_login(type, price) {
    if (account_id != "") {
      buy_item(type, price);
    }
    else {
      requestLogin();
    }
  }

  const [Supply, setSupply] = useState({
    wl: -100000,
    ps: -100000,
    mint: -100000
  });

  const [Whitelisted, setWL] = useState(false);

  useEffect(async () => {
    setTimeout(async () => {
      const wl = await is_whitelisted();
      setWL(wl);
      const supply = await getSupplyData();
      setSupply(supply);
    }, 3000);
  }, []);

  return (
    <div className="bg-gray-800">
      <div className="px-4 py-4 mx-auto max-w-7xl sm:px-6 lg:px-8">
        <div className="px-4 mt-10 mx-auto max-w-7xl sm:px-6 lg:px-8">
          <div className="max-w-4xl mx-auto text-center">
            <h2 className="text-3xl font-extrabold text-gray-200 sm:text-4xl">
              Chain Team Tactics
            </h2>
            <p className="mt-3 text-xl text-gray-300 sm:mt-4">
              Chain Team Tactics is an nft based pvp battle simulator.
              <br />
              <br />Collect a minimum of 6 units and start to battle other players!
              <br />Each battle is fought as best of three and the starting player changes each round.
              <br />To make it more spicy, you will battle about your PXT stake (after beta).

              <br />

              <br /><br /> Chain Team Tactics beta launched <b>30.05.2022</b> on mainnet. Beta will last for about 6-8 weeks.
              It can be expected that major changes and some bugfixes will take place during the beta.

              <br /><br /> After the beta ends, rewards will be distributed to the top 50 players on the leaderboard. There will be no rewards during the beta,
              therefor we will distribute some NFTs to top 10 leaderboard when beta ends: 5x CTT Unit-Token, 3x NEAR Meerkats, 2x Misfits, 1x Tiger Academy.

              <br /><br /> If you want to know more, look at the FAQ-Section at the bottom and also join our Discord!
            </p>
          </div>
        </div>
      

        <div className="bg-gray-800">

          <div className="mx-auto mt-8 mb-6 sm:px-6 lg:px-0 max-w-7xl">
            <div className="relative shadow-xl sm:rounded-2xl sm:overflow-hidden">
              <div className="absolute inset-0">
                <img
                  className="h-full w-full object-cover"
                  src="/shiney.svg"
                />
                <div className="absolute inset-0 bg-indigo-700 mix-blend-multiply" />
              </div>
              <div className="relative px-4 pt-8 pb-8 sm:px-6 lg:px-6">
                <p className="mt-2 max-w-lg mx-auto text-center text-lg text-gray-200 sm:max-w-3xl">
                  <a
                    href="https://pd.marmaj.org/chainteam"
                    className="px-8 py-2 mx-auto text-base font-medium text-white bg-gray-700 border border-transparent rounded-md shadow w-sm hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-white focus:ring-offset-2 focus:ring-offset-indigo-600"
                  >
                    Play Chain Team Tactics Beta
                  </a>

                </p>

              </div>
            </div>
          </div>

        </div>

        <div className="mt-12 space-y-4 sm:mt-16 sm:space-y-0 sm:grid sm:grid-cols-2 sm:gap-6 lg:max-w-4xl lg:mx-auto xl:max-w-none xl:mx-0 xl:grid-cols-3">
          {tiers.map((tier) => (
            <div
              key={tier.name}
              className="bg-gray-200 border border-gray-200 divide-y divide-gray-200 rounded-lg shadow-sm"
            >
              <div className="p-6 pb-2">
                <h2 className="text-2xl font-bold leading-6 text-gray-800">
                  {tier.name}
                </h2>
                <p className="mt-4">
                  <img
                    src={tier.img}
                    className="object-cover -mb-2"
                    alt="Alt goes here!"
                  />
                </p>
              </div>
              <div className="px-6" style={{ marginBottom: "12px" }}>
                <ul className="mt-2 space-y-2">
                  {tier.includedFeatures.map((feature) => (
                    <li key={feature} className="flex space-x-1">
                      <ClipboardListIcon
                        className="flex-shrink-0 w-5 h-5 text-green-700"
                        aria-hidden="true"
                      />
                      <span className="text-sm text-gray-500">{feature}</span>
                    </li>
                  ))}
                </ul>
                <ul className="mt-2 space-y-2">
                  <li key="supply" className="flex space-x-3">
                    <span className="text-sm text-gray-500"><b>Available:</b> {supplyCheck(Supply[tier.type.toLowerCase()], tier.type.toLowerCase())}</span>
                  </li>
                </ul>
              </div>
              {supplyCheck(Supply[tier.type.toLowerCase()], tier.type.toLowerCase()) > 0 && (Whitelisted || tier.type != "wl") && (
                <a
                  onClick={() => { buy_login(tier.type, tier.price) }}
                  href="#"
                  className="block w-full py-2 text-sm font-semibold text-center text-white bg-indigo-800 border border-gray-800 rounded-md hover:bg-indigo-400"
                >
                  {tier.price} Ⓝ
                </a>
              )}

            </div>
          ))}
        </div>

      </div>

      <div className="mx-auto mt-8 mb-6 sm:px-6 lg:px-0 max-w-7xl">
        <div className="relative shadow-xl sm:rounded-2xl sm:overflow-hidden">
          <div className="absolute inset-0">
            <img
              className="h-full w-full object-cover"
              src="/shiney.svg"
            />
            <div className="absolute inset-0 bg-indigo-700 mix-blend-multiply" />
          </div>

          <div className="relative px-4 py-8 sm:px-6 flex items-center flex-col sm:py-20 lg:py-10 lg:px-6">
            <div className="grid grid-cols-1 md:space-x-2 space-y-4 md:space-y-0">

              <center><img src="ctt/ctt_rarity_table.png"></img></center>
              <br />
              <br></br>

            </div>

          </div>
        </div>
      </div>

      <div className="mt-12">
        <div className="max-w-7xl mx-auto py-8 px-4 sm:py-16 sm:px-6 lg:px-8">
          <div className="max-w-3xl mx-auto divide-y-2 divide-gray-700">
            <h2 className="text-center text-3xl font-extrabold text-gray-200 sm:text-4xl">
              Chain Team Tactics Q & A
            </h2>
            <dl className="mt-6 space-y-6 divide-y divide-gray-700">
              {faqs.map((faq) => (
                <Disclosure defaultOpen={true} as="div" key={faq.question} className="pt-6">
                  {({ open }) => (
                    <>    <br />
                      <dt className="text-lg">
                        <Disclosure.Button className="text-left w-full flex justify-between items-start text-gray-400">
                          <span className="font-medium text-gray-200">
                            {faq.question}
                          </span>
                          <span className="ml-6 h-7 flex items-center">
                            <ChevronDownIcon
                              className={classNames(
                                open ? "-rotate-180" : "rotate-0",
                                "h-6 w-6 transform"
                              )}
                              aria-hidden="true"
                            />
                          </span>
                        </Disclosure.Button>
                      </dt>
                      <Disclosure.Panel as="dd" className="mt-2 pr-12">
                        <p className="text-base text-gray-400">{faq.answer}</p>
                        <br />
                      </Disclosure.Panel>
                    </>
                  )}
                </Disclosure>
              ))}
            </dl>
          </div>
        </div>
      </div>
    </div>
  );
}

const faqs = [
  {
    question: "How to get whitelisted?",
    answer:
      "Pixelparty frame holder can ask for a wl spot on CTT channel on Discord.",
  },
  {
    question: "How many units are needed to play?",
    answer:
      "6 units are required to play a match and a wallet can hold up to 20 tokens. We will increase that limit to 30 at a later point. You can't use more than 3 support units per fight.",
  },
  {
    question: "Will the max supply of tokens ever change?",
    answer:
      "We plan to release a new unit-class every few months, every new unit-class release will extend the max supply by 100-250.",
  },
  {
    question: "How does the battlesystem work?",
    answer:
      "Each match is a asynchronous best of three. A player places units and the other player reacts to it. If a player doesn't react within 24 hours the game is lost.",
  },
  {
    question: "Is trading on Paras supported?",
    answer:
      "Not yet, the game will start with an in-game marketplace. The team is working on compatibility with paras, but not done yet.",
  },
  {
    question: "Is there a difference between tokens of the same unit-class?",
    answer:
      "Yes - each unit has a powerlevel between 90 and 110, changing their stats slightly. You see the powerlevel of your unit on the web wallet and within the game.",
  }
];

'''
'''--- pages/presale/pixelparty.js ---

const faqs = [
  {
    question: "Preface: Still in progress",
    answer:
      "The concepts are still in progress and not finalized yet, but the following content gives some insight about the current plans.",
  },
  {
    question: "When will PixelPets launch?",
    answer: "If everything goes smooth, launch will be in September.",
  },
  {
    question: "How many pets will PixelPets have?",
    answer: "The initial launch will have 60 different pets.",
  },
  {
    question: "What are the stats of a pet?",
    answer: "Rarity, Quality, Level, Attack, Health, Speed, Magic",
  },
  {
    question: "Rarity?",
    answer:
      "Each creature can have one of 4 rarity-types: common, rare, epic or legendary. Based on that the attack, health, speed and magic stats of the creatures are increased.",
  },
  {
    question: "Can my pet evolve?",
    answer:
      "Yes some pets are able to evolve to a next stage, more info about that soon.",
  },
  {
    question: "How does fighting work?",
    answer:
      "You set a lineup of 3 creatures and fight against another lineup of 3 creatures in a turn based autobattler fight. Defeated creatures need a rest for 8 hours.",
  },
  {
    question: "League System?",
    answer:
      "Based on your success in fights you earn or lose ranking points. Depending on that your a assigned to a certain league and fight versus other players within the same league.",
  },
  {
    question: "Tournaments?",
    answer:
      "Occasionally there are tournaments where you can win a lot of pixeltoken and epic/legendary eggs.",
  },
  {
    question: "Level System?",
    answer:
      "Your pet gets experience in each fight and will level up after it has gained enough xp.",
  },
  {
    question: "How many pets can I own per account/wallet?",
    answer: "Each account/wallet has a limit of 40 pets.",
  },
  {
    question: "More questions?",
    answer: "Join Discord and ask!",
  },

  // More questions...
];

function classNames(...classes) {
  return classes.filter(Boolean).join(" ");
}

export default function Pixelparty() {
  return (
    <div className="mx-auto mt-8 mb-6 sm:px-6 lg:px-0 max-w-7xl">
      <div className="relative shadow-xl sm:rounded-2xl sm:overflow-hidden">
        <div className="absolute inset-0">
          <img
            className="h-full w-full object-cover"
            src="/shiney.svg"
            alt="People working on laptops"
          />
          <div className="absolute inset-0 bg-indigo-700 mix-blend-multiply" />
        </div>
        <div className="relative px-4 pt-8 sm:px-6 sm:pt-20 lg:pt-10 lg:px-6">
          <h1 className="text-center text-2xl font-extrabold tracking-tight sm:text-3xl lg:text-4xl">
            <span className="block text-white">What is Pixelparty?</span>
          </h1>
          <p className="mt-6 max-w-lg mx-auto text-center text-lg text-gray-200 sm:max-w-3xl">
            PixelParty is an NFT Frame showcase built on the NEAR Protocol with
            a total supply of 600 tokens. Each token you own, allows you to draw
            on a 20x20px frame. <br />
            You could buy several connected frames to draw a larger frame.
            Additionally all frameholders will receive small rewards within the pixeltoken
            ecosystem from time to time.
          </p>
        </div>
        <div className="relative px-4 py-8 sm:px-6 flex items-center flex-col sm:py-20 lg:py-10 lg:px-6">
          <div className="grid grid-cols-2 md:space-x-2 space-y-4 md:space-y-0">
            <img style={{ height: "400px" }}
              className="rounded-xl shadow-xl col-span-2 md:col-span-1 mx-auto"
              src="pixelparty2.jpg"
            />
            <img style={{ height: "400px" }}
              className="rounded-xl shadow-xl col-span-2 md:col-span-1 mx-auto"
              src="pixelparty1.jpg"
            />
          </div>
          <a
            href="https://pixelparty.marmaj.org/"
            className="px-8 py-2 mx-auto mt-10 text-base font-medium text-white bg-gray-700 border border-transparent rounded-md shadow w-sm hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-white focus:ring-offset-2 focus:ring-offset-indigo-600"
          >
            Visit Pixelparty
          </a>
        </div>
      </div>
    </div>
  );
}

'''
'''--- pages/presale/pixelpets.js ---

const cards = [
  {
    title: "Hatch",
    imageUrl: "hatch.png",
    text: "Collect eggs and hatch them. It takes a while to hatch an egg and you can only hatch one egg at a time. Based on egg-rarity it takes longer to hatch the egg but also raises the chance to get a stronger version of it.",
  },
  {
    title: "Train",
    imageUrl: "train.png",
    text: "You want to raise the quality-rank of your creature? Send it to the gym and after some time you pet returns much more in shape.",
  },
  {
    title: "Evolve",
    imageUrl: "evolve.png",
    text: "After your Pet has enough experience and the required quality level, take your pet to the next step and evolve it in the evolution-chamber.",
  },
  {
    title: "Fight",
    imageUrl: "fight.png",
    text: "Battle other Petmasters, just for fun to farm experience, duel with other competitors to raise your reputation to the master-league or enter the colosseum and fight in the arena for prizes and honor.",
  },
  // More people...
];

const faqs = [
  {
    question: "Preface: Still in progress",
    answer:
      "The concepts are still in progress and not finalized yet, but the following content gives some insight about the current plans.",
  },
  {
    question: "When will PixelPets launch?",
    answer:
      "If everything goes smooth, launch will be in September.",
  },
  {
    question: "How many pets will PixelPets have?",
    answer:
      "The initial launch will have 60 different pets.",
  },
  {
    question: "What are the stats of a pet?",
    answer:
      "Rarity, Quality, Level, Attack, Health, Speed, Magic",
  },
  {
    question: "Rarity? Quality?",
    answer:
      "Each creature can have one of 4 rarity-types: common, rare, epic or legendary. Based on that the attack, health, speed and magic stats of the creatures are increased. Quality works in a similiar way, but unlike the rarity it's possible to raise the quality of a pet by training, till a certain limit.",
  },
  {
    question: "Can my pet evolve?",
    answer:
      "Yes some pets are able to evolve to a next stage, more info about that soon.",
  },
  {
    question: "How does fighting work?",
    answer:
      "You set a lineup of 3 creatures and fight against another lineup of 3 creatures in a turn based autobattler fight. Defeated creatures need a rest for 8 hours.",
  },
  {
    question: "League System?",
    answer:
      "Based on your success in fights you earn or lose ranking points. Depending on that your a assigned to a certain league and fight versus other players within the same league.",
  },
  {
    question: "Tournaments?",
    answer:
      "Occasionally there are tournaments where you can win a lot of pixeltoken and epic/legendary eggs.",
  },
  {
    question: "Level System?",
    answer:
      "Your pet gets experience in each fight and will level up after it has gained enough xp.",
  },
  {
    question: "How many pets can I own per account/wallet?",
    answer:
      "Each account/wallet has a limit of 30 pets.",
  },
  {
    question: "More questions?",
    answer:
      "Join Discord and ask!",
  },

  // More questions...
];

function classNames(...classes) {
  return classes.filter(Boolean).join(" ");
}

export default function Eggs() {
  return (
    <div className="mx-auto mt-24 sm:px-6 lg:px-0 max-w-7xl">
      <div className="relative shadow-xl sm:rounded-2xl sm:overflow-hidden">
        <div className="absolute inset-0">
          <img
            className="h-full w-full object-cover"
            src="/shiney.svg"
          />
          <div className="absolute inset-0 bg-indigo-700 mix-blend-multiply" />
        </div>
        <div className="relative px-4 py-8 sm:px-6 sm:py-20 lg:py-10 lg:px-6">
          <h1 className="text-center text-2xl font-extrabold tracking-tight sm:text-3xl lg:text-4xl">
            <span className="block text-white">What is PixelPets?</span>
          </h1>
          <p className="mt-6 max-w-lg mx-auto text-center text-xl text-indigo-200 sm:max-w-3xl">
            PixelPets is an NFT game for pet trading and battling. Each token
            represents one of a total of 60 different pet types. Each pet has a certain rarity type (common, rare, epic or legendary) which affects their strength beneath other stats like quality and level.

            <br /> <br />
            It combines collect to earn/compete to earn concept via the built-in pet marketplace and by a few days lasting tournaments with a prizepool for the best players running each week.
            <br />  <br />

            <a
              href="https://pd.marmaj.org/pixelpets"
              className="px-8 py-2 mx-auto mt-10 text-base font-medium text-white bg-gray-700 border border-transparent rounded-md shadow w-sm hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-white focus:ring-offset-2 focus:ring-offset-indigo-600"
            >
              Play Pixelpets!
            </a>
          </p>

        </div>
      </div>

      <ul className="space-y-12 mt-20 sm:grid sm:grid-cols-2 lg:grid-cols-4 sm:gap-x-6 sm:gap-y-12 sm:space-y-0 lg:gap-x-8">
        {cards.map((card, index) => (
          <li key={index}>
            <div className="space-y-8">
              <div className="aspect-w-2 aspect-h-2">
                <img
                  className="object-cover rounded-lg shadow-lg"
                  src={card.imageUrl}
                  alt=""
                />
              </div>
              <div>
                <div className=" font-medium leading-6">
                  <p className="text-gray-100 text-2xl">{card.title}</p>
                </div>
                <div className="text-lg mt-2">
                  <p className="text-gray-400 text-justify">{card.text}</p>
                </div>
              </div>
            </div>
          </li>
        ))}
      </ul>
      <div className="mt-24 mx-auto max-w-7xl px-4 sm:mt-24 sm:px-6 lg:mt-24 mb-12">
        <div className="lg:grid lg:grid-cols-12 lg:gap-8">
          <div className="mt-12 relative sm:max-w-lg sm:mx-auto lg:mt-0 lg:max-w-none lg:mx-0 lg:col-span-5 lg:flex lg:items-center">

            <div className="relative mx-auto w-full rounded-lg shadow-lg lg:max-w-md" style={{ width: "300px", height: "300px" }}>

              <img className="w-full" src="/presale.jpg" alt="" />

            </div>
          </div>
          <div className="sm:text-center mt-10 md:max-w-2xl md:mx-auto lg:col-span-6 lg:text-left">
            <h1>
              <span className="block text-sm font-semibold uppercase tracking-wide sm:text-base lg:text-sm xl:text-base text-gray-100 text-2xl">
                Marketplace
              </span>
            </h1>
            <p className="mt-3 text-base text-gray-400 sm:mt-5 sm:text-xl lg:text-lg xl:text-xl">
              Pixelpets will have a marketplace where you can sell your pets or buy pets from others via pixeltoken.
            </p>
          </div>

        </div>
      </div>

    </div>
  );
}

'''
'''--- pages/rewards/index.js ---
import { useEffect, useState } from "react";
import Footer from "../../components/Footer";
import axios from 'axios';
import Head from "next/head";

async function getRewards() {
  return await axios.get("api/pixelpets/get-latest-rewards");
}

export default function Home() {
  const [GobalData, setGlobal] = useState([]);
  const [ClashData, setClash] = useState([]);

  useEffect(async () => {
    const data = (await getRewards()).data.data;

    const global = data.filter(x => x.type == 1).sort(x => x.reason);
    const clash = data.filter(x => x.type == 0).sort(x => x.reason);

    setGlobal(global);
    setClash(clash);

  }, []);

  return (
    <div className="mx-auto mt-24 sm:px-6 lg:px-0 max-w-7xl">
      <Head>
        <title>Pixelpets Rewards</title>
      </Head>
      <div className="font-monst">
        <div className="relative shadow-xl sm:rounded-2xl sm:overflow-hidden">
          <div className="absolute inset-0">
            <img
              className="h-full w-full object-cover"
              src="/shiney.svg"
              alt="People working on laptops"
            />
            <div className="absolute inset-0 bg-indigo-700 mix-blend-multiply" />
          </div>
          <div className="relative px-4 py-8 sm:px-6 sm:py-20 lg:py-10 lg:px-6">
            <div className="row">
              <div className="column" style={{ borderRight: "1px solid #FFF" }}>
                <h1 className="text-center text-2xl font-extrabold tracking-tight sm:text-3xl lg:text-4xl">
                  <span className="block text-white">Clash Rewards</span>
                </h1>
                <div className="mt-6 max-w-lg mx-auto text-left pl-8 pr-8 text-md text-indigo-200 sm:max-w-3xl">

                  {ClashData.map((data, index) => (
                    <div key={index}> <b>{data.reason}</b>
                      <br />  <br />
                      {data.rewards.map((data2, index2) => (
                        <div key={index2}> #{index2 + 1} {data2.receiver_id} - {data2.pixeltoken / 1000000}</div>

                      )
                      )}
                      <br />
                      <hr />
                      <br />
                    </div>

                  )
                  )}

                </div>
              </div>
              <div className="column">
                <h1 className="text-center text-2xl font-extrabold tracking-tight sm:text-3xl lg:text-4xl">
                  <span className="block text-white">Global Rewards</span>
                </h1>
                <div className="mt-6 max-w-lg mx-auto text-left pl-8 text-md text-indigo-200 sm:max-w-3xl">

                  {GobalData.map((data, index) => (
                    <div key={index}> <b>{data.reason}</b>
                      <br />  <br />
                      {data.rewards.map((data2, index2) => (
                        <div key={index2}> #{index2 + 1} {data2.receiver_id} - {data2.pixeltoken / 1000000}</div>

                      )
                      )}
                      <br />
                      <hr />
                      <br />
                    </div>

                  )
                  )}
                </div>
              </div>
            </div>

          </div>
        </div>
      </div>

      <br />
      <Footer />
    </div>
  );
}

'''
'''--- pages/tokenomics/Stats.js ---
import { invalid_ft_transfer } from "../../utils/frontend/near";
import { Disclosure } from "@headlessui/react";
import { ChevronDownIcon } from "@heroicons/react/outline";
import { useRecoilState } from "recoil";
import { userState } from "../../utils/frontend/store";
import { NotificationContainer } from 'react-notifications';
import 'react-notifications/lib/notifications.css';
import { Line } from 'react-chartjs-2';
import { Chart as ChartJS } from 'chart.js/auto'

const Stats = () => {
  const [userStateVar] = useRecoilState(userState);

  const CHART_COLORS = {
    red: 'rgb(255, 99, 132)',
    orange: 'rgb(255, 159, 64)',
    yellow: 'rgb(255, 205, 86)',
    green: 'rgb(75, 192, 192)',
    blue: 'rgb(54, 162, 235)',
    purple: 'rgb(153, 102, 255)',
    grey: 'rgb(201, 203, 207)'
  };

  const chartdata = {
    labels: ["01/22", "02/22", "03/22", "04/22", "05/22"],
    datasets: [
      {
        label: "PXT rewards",
        backgroundColor: [
          'rgba(255, 99, 132, 0.2)',
          'rgba(54, 162, 235, 0.2)',
          'rgba(255, 206, 86, 0.2)',
          'rgba(75, 192, 192, 0.2)',
          'rgba(153, 102, 255, 0.2)',
          'rgba(255, 159, 64, 0.2)'
        ],
        borderColor: [
          'rgba(255, 99, 132, 1)',
          'rgba(54, 162, 235, 1)',
          'rgba(255, 206, 86, 1)',
          'rgba(75, 192, 192, 1)',
          'rgba(153, 102, 255, 1)',
          'rgba(255, 159, 64, 1)'
        ],
        data: [20000, 1000, 20000, 20000, 20000],
        lineTension: 0.5,  
        //fill: 1
      },
      {
        label: "PXT Buyback",
        backgroundColor: [
          'rgba(255, 99, 132, 0.2)',
          'rgba(54, 162, 235, 0.2)',
          'rgba(255, 206, 86, 0.2)',
          'rgba(75, 192, 192, 0.2)',
          'rgba(153, 102, 255, 0.2)',
          'rgba(255, 159, 64, 0.2)'
        ],
        borderColor: [
          'rgba(255, 99, 132, 1)',
          'rgba(54, 162, 235, 1)',
          'rgba(255, 206, 86, 1)',
          'rgba(75, 192, 192, 1)',
          'rgba(153, 102, 255, 1)',
          'rgba(255, 159, 64, 1)'
        ],
        data: [500, 3000, 500, 4000],
        lineTension: 0.5,  
        fill: {above: 'rgba(54, 162, 235, 0.2)', below: 'rgba(255, 99, 132, 0.2)', target: '-1'}
      },
    ],
  };

  function classNames(...classes) {
    return classes.filter(Boolean).join(" ");
  }
  function addPxtToWallet() {
    invalid_ft_transfer();
  };

  return (
    <div className="pt bg-gray-800">
      <NotificationContainer />

      <div className="mx-auto mt-24 sm:px-6 lg:px-0 max-w-7xl mb-8">
        <div className="relative shadow-xl sm:rounded-2xl sm:overflow-hidden">
          <div className="absolute inset-0">
            <img
              className="h-full w-full object-cover"
              src="/shiney.svg"
              alt="People working on laptops"
            />
            <div className="absolute inset-0 bg-indigo-700 mix-blend-multiply" />
          </div>
          <div className="relative px-4 py-8 sm:px-6 sm:py-20 lg:py-10 lg:px-6">
            <h1 className="text-center text-2xl font-extrabold tracking-tight sm:text-3xl lg:text-4xl">
              <span className="block text-white">Pixeltoken</span>
            </h1>
            <p className="mt-6 max-w-lg mx-auto text-center text-xl text-indigo-200 sm:max-w-3xl">
              Pixeltoken is the utility token used for Pixelpets, Cryptoheroes and Chain Team Tactics - with a total supply of 12.500.000 tokens.
              The game economy and actions are completly built upon the token and are used for all ingame actions and marketplaces.
              <br /><br />
              <a
                href="https://app.ref.finance/#wrap.near%7Cpixeltoken.near"
                target={"_blank"}
                className="px-8 py-2 mx-auto mt-10 text-base font-medium text-white bg-gray-700 border border-transparent rounded-md shadow w-sm hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-white focus:ring-offset-2 focus:ring-offset-indigo-600"
              >
                Get Pixeltoken on Ref-Finance
              </a>
              <br /><br />

              {(userStateVar.logged && userStateVar.pixeltoken > 0) && (
                <>

                  <button
                    onClick={() => addPxtToWallet()}
                    className="px-8 py-2 mx-auto mt-2 text-base font-medium text-white bg-gray-700 border border-transparent rounded-md shadow w-sm hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-white focus:ring-offset-2 focus:ring-offset-indigo-600"
                  >
                    Add PXT to NEAR Webwallet
                  </button>

                </>
              )}

            </p>

          </div>
        </div>
      </div>

      {/* <div style={{ backgroundColor: "white", width: "500px"}}>
        <Line
          datasetIdKey='id'
          data={chartdata}
        />

      </div> */}

      <div className="relative shadow-xl sm:rounded-2xl sm:overflow-hidden max-w-7xl mx-auto mt-8 mb-8">
        <div className="absolute inset-0">
          <img
            className="h-full w-full object-cover"
            src="/shiney.svg"
          />
          <div className="absolute inset-0 bg-indigo-700 mix-blend-multiply" />
        </div>
        <div className="relative px-4 pt-8 sm:px-6 sm:pt-20 lg:pt-10 lg:px-6">
          <h1 className="text-center text-2xl font-extrabold tracking-tight sm:text-3xl lg:text-4xl">
            <span className="block text-white">Initial tokendistribution</span>
          </h1>
        </div>
        <div className="relative px-4 py-8 sm:px-6 flex items-center flex-col sm:py-20 lg:py-10 lg:px-6 w-auto">
          <div className="grid grid-cols-1 md:space-x-2 space-y-4 md:space-y-0 w-full">
            <center>
              <table className="text-white" style={{ width: "600px", textAlign: "center", marginLeft: "-100px" }}>
                <thead>
                  <tr>
                    <td>
                      <b>Usage</b>
                    </td>
                    <td>
                      <b>Tokens</b>
                    </td>
                  </tr>
                </thead>
                <tbody>
                  <tr>
                    <td>
                      Tokenswap & Skyward IDO
                    </td>
                    <td>
                      4.000.000
                    </td>
                  </tr>
                  <tr>
                    <td>
                      Ingame Rewards
                    </td>
                    <td>
                      3.250.000
                    </td>
                  </tr>
                  <tr>
                    <td>
                      Games Presale Allocation
                    </td>
                    <td>
                      2.000.000
                    </td>
                  </tr>
                  <tr>
                    <td>
                      Marketing
                    </td>
                    <td>
                      1.250.000
                    </td>
                  </tr>
                  <tr>
                    <td>
                      Ref Pool
                    </td>
                    <td>
                      750.000
                    </td>
                  </tr>
                  <tr>
                    <td>
                      DAO
                    </td>
                    <td>
                      750.000
                    </td>
                  </tr>
                  <tr>
                    <td>
                      Dev Team
                    </td>
                    <td>
                      500.000
                    </td>
                  </tr>
                </tbody>
              </table>
            </center>

          </div>

        </div>
      </div>

      <div className="mt-12">
        <div className="max-w-7xl mx-auto py-8 px-4 sm:py-16 sm:px-6 lg:px-8">
          <div className="max-w-3xl mx-auto divide-y-2 divide-gray-700">
            <h2 className="text-center text-3xl font-extrabold text-gray-200 sm:text-4xl">
              Pixeltoken Q & A
            </h2>
            <dl className="mt-6 space-y-6 divide-y divide-gray-700">
              {faqs.map((faq) => (
                <Disclosure defaultOpen={true} as="div" key={faq.question} className="pt-6">
                  {({ open }) => (
                    <>    <br />
                      <dt className="text-lg">
                        <Disclosure.Button className="text-left w-full flex justify-between items-start text-gray-400">
                          <span className="font-medium text-gray-200">
                            {faq.question}
                          </span>
                          <span className="ml-6 h-7 flex items-center">
                            <ChevronDownIcon
                              className={classNames(
                                open ? "-rotate-180" : "rotate-0",
                                "h-6 w-6 transform"
                              )}
                              aria-hidden="true"
                            />
                          </span>
                        </Disclosure.Button>
                      </dt>
                      <Disclosure.Panel as="dd" className="mt-2 pr-12">
                        <p className="text-base text-gray-400">{faq.answer}</p>
                        <br />
                      </Disclosure.Panel>
                    </>
                  )}
                </Disclosure>
              ))}
            </dl>
          </div>
        </div>
      </div>

    </div >
  );
};

export default Stats;

const faqs = [
  {
    question: "How are the ingame rewards distributed?",
    answer:
      "Pixelpets and Cryptoheroes distribute Pixeltoken each week through their leaderboards. More details into the game itself or their wiki.",
  },
  {
    question: "Who will manage the marketing funds?",
    answer:
      "All funds are managed by the Pixeltoken AstroDAO.",
  }
];

'''
'''--- postcss.config.js ---
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

'''
'''--- public/chainteam/TemplateData/style-fs.css ---
body { padding: 0; margin: 0; background-color: #1f2937 }
#unity-container { position: absolute }
#unity-container.unity-desktop { width: 100%; height: 100% }
#unity-canvas { background: #231F20 }
#unity-canvas { width: 100%; height: 100% }
#unity-loading-bar { position: absolute; left: 50%; top: 50%; transform: translate(-50%, -50%); display: none }
#unity-logo { width: 154px; height: 130px; background: url('unity-logo-dark.png') no-repeat center }
#unity-progress-bar-empty { width: 141px; height: 18px; margin-top: 10px; background: url('progress-bar-empty-dark.png') no-repeat center }
#unity-progress-bar-full { width: 0%; height: 18px; margin-top: 10px; background: url('progress-bar-full-dark.png') no-repeat center }
#unity-footer { position: relative }
#unity-footer { display: none }
#unity-webgl-logo { float:left; width: 204px; height: 38px; background: url('webgl-logo.png') no-repeat center }
#unity-build-title { float: right; margin-right: 10px; line-height: 38px; font-family: arial; font-size: 18px }
#unity-fullscreen-button { float: right; width: 38px; height: 38px; background: url('fullscreen-button.png') no-repeat center }
#unity-mobile-warning { position: absolute; left: 50%; top: 5%; transform: translate(-50%); background: white; padding: 10px; display: none }

'''
'''--- public/chainteam/TemplateData/style.css ---
body { padding: 0; margin: 0; background-color: #1f2937 }
#unity-container { position: absolute }
#unity-container.unity-desktop { left: 50%; top: 50%; transform: translate(-50%, -50%) }
#unity-container.unity-mobile { width: 100%; height: 100% }
#unity-canvas { background: #231F20 }
.unity-mobile #unity-canvas { width: 100%; height: 100% }
#unity-loading-bar { position: absolute; left: 50%; top: 50%; transform: translate(-50%, -50%); display: none }
#unity-logo { height: 130px; background: url('unity-logo-dark.png') no-repeat center }
#unity-progress-bar-empty { width: 141px; height: 18px; margin-top: 10px; background: url('progress-bar-empty-dark.png') no-repeat center }
#unity-progress-bar-full { width: 0%; height: 18px; margin-top: 10px; background: url('progress-bar-full-dark.png') no-repeat center }
#unity-footer { position: relative }
.unity-mobile #unity-footer { display: none }
#unity-webgl-logo { float:left; width: 204px; height: 38px; background: url('webgl-logo.png') no-repeat center }
#unity-build-title { float: right; margin-right: 10px; line-height: 38px; font-family: arial; font-size: 18px }
#unity-fullscreen-button { float: right; width: 38px; height: 38px; background: url('fullscreen-button.png') no-repeat center }
#unity-mobile-warning { position: absolute; left: 50%; top: 5%; transform: translate(-50%); background: white; padding: 10px; display: none }

'''
'''--- public/chainteam/index.html ---
<!DOCTYPE html>
<html lang="en-us">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title>Chain Team Tactics Dapp</title>
  <link rel="shortcut icon" href="chainteam/TemplateData/favicon.ico">
  <link rel="stylesheet" href="chainteam/TemplateData/style.css">
  </head>
  <body>
    <div id="unity-container" class="unity-desktop">
      <canvas id="unity-canvas" width=960 height=540></canvas>
      <div id="unity-loading-bar">
        <div id="unity-logo"></div>
        <div id="unity-progress-bar-empty">
          <div id="unity-progress-bar-full"></div>
        </div>
      </div>
      <div id="unity-warning"> </div>
      <div id="unity-footer">
        <div id="unity-fullscreen-button"></div>
      </div>
    </div>
    <script>
      var container = document.querySelector("#unity-container");
      var canvas = document.querySelector("#unity-canvas");
      var loadingBar = document.querySelector("#unity-loading-bar");
      var progressBarFull = document.querySelector("#unity-progress-bar-full");
      var fullscreenButton = document.querySelector("#unity-fullscreen-button");
      var warningBanner = document.querySelector("#unity-warning");

      // Shows a temporary message banner/ribbon for a few seconds, or
      // a permanent error message on top of the canvas if type=='error'.
      // If type=='warning', a yellow highlight color is used.
      // Modify or remove this function to customize the visually presented
      // way that non-critical warnings and error messages are presented to the
      // user.
      function unityShowBanner(msg, type) {
        function updateBannerVisibility() {
          warningBanner.style.display = warningBanner.children.length ? 'block' : 'none';
        }
        var div = document.createElement('div');
        div.innerHTML = msg;
        warningBanner.appendChild(div);
        if (type == 'error') div.style = 'background: red; padding: 10px;';
        else {
          if (type == 'warning') div.style = 'background: yellow; padding: 10px;';
          setTimeout(function() {
            warningBanner.removeChild(div);
            updateBannerVisibility();
          }, 5000);
        }
        updateBannerVisibility();
      }

      var buildUrl = "https://nyc3.digitaloceanspaces.com/pd-marmaj/ctt/mainnet";
      var loaderUrl = buildUrl + "/ctt-mainnet-ws.loader.js";
      var config = {
        dataUrl: buildUrl + "/ctt-mainnet-ws.data.unityweb",
        frameworkUrl: buildUrl + "/ctt-mainnet-ws.framework.js.unityweb",
        codeUrl: buildUrl + "/ctt-mainnet-ws.wasm.unityweb",
        streamingAssetsUrl: "StreamingAssets",
        companyName: "PixelDapps",
        productName: "Chain Team Tactics",
        productVersion: "1.0",
        showBanner: unityShowBanner,
      };

      // By default Unity keeps WebGL canvas render target size matched with
      // the DOM size of the canvas element (scaled by window.devicePixelRatio)
      // Set this to false if you want to decouple this synchronization from
      // happening inside the engine, and you would instead like to size up
      // the canvas DOM size and WebGL render target sizes yourself.
      // config.matchWebGLToCanvasSize = false;

      if (/iPhone|iPad|iPod|Android/i.test(navigator.userAgent)) {
        container.className = "unity-mobile";
        // Avoid draining fillrate performance on mobile devices,
        // and default/override low DPI mode on mobile browsers.
        config.devicePixelRatio = 1;
        unityShowBanner('WebGL builds are not supported on mobile devices.');
      } else {
        canvas.style.width = "960px";
        canvas.style.height = "540px";
      }
      loadingBar.style.display = "block";

      var myGameInstance = null;
      var script = document.createElement("script");
      script.src = loaderUrl;
      script.onload = () => {
        createUnityInstance(canvas, config, (progress) => {
          progressBarFull.style.width = 100 * progress + "%";
        }).then((unityInstance) => {
          myGameInstance = unityInstance;
          loadingBar.style.display = "none";
          fullscreenButton.onclick = () => {
            unityInstance.SetFullscreen(1);
          };
        }).catch((message) => {
          alert(message);
        });
      };
      document.body.appendChild(script);
    </script>
    
    <script src="https://pd-marmaj.nyc3.digitaloceanspaces.com/library/mainnet/ws-lib.js"></script>
    <script src="https://pd-marmaj.nyc3.digitaloceanspaces.com/library/mainnet/pd-lib.js"></script>
  </body>
</html>

'''
'''--- public/chainteam/old_index.html ---
<!DOCTYPE html>
<html lang="en-us">

<head>
  <meta charset="utf-8">
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
  <title>Chain Team Tactics Dapp</title>
  <link rel="shortcut icon" href="chainteam/TemplateData/favicon.ico">
  <link rel="stylesheet" href="chainteam/TemplateData/style.css">
</head>
<body>
  <div id="unity-mobile-warning">
    Chain Team Tactics is not supported on mobile devices yet.
  </div>
  <div id="unity-container" class="unity-desktop">
    <canvas id="unity-canvas" style="height: 702px; width: 1248px; aspect-ratio: auto 16 / 9;"></canvas>
    <!-- width="1224" height="765"-->
    <div id="unity-loading-bar">
      <div id="unity-logo"></div>
      <div id="unity-progress-bar-empty">
        <div id="unity-progress-bar-full"></div>
      </div>
    </div>

    <div id="unity-footer">

      <div id="unity-fullscreen-button"></div>

    </div>
  </div>
  <script>
    var buildUrl = "https://nyc3.digitaloceanspaces.com/pd-marmaj/ctt/mainnet";
    var loaderUrl = buildUrl + "/CTTBuild.loader.js";
    var config = {
      dataUrl: buildUrl + "/CTTBuild.data.unityweb",
      frameworkUrl: buildUrl + "/CTTBuild.framework.js.unityweb",
      codeUrl: buildUrl + "/CTTBuild.wasm.unityweb",
      streamingAssetsUrl: "StreamingAssets",
      companyName: "PixelDapps",
      productName: "Chain Team Tactics",
      productVersion: "0.1",
    };

    var container = document.querySelector("#unity-container");
    var canvas = document.querySelector("#unity-canvas");
    var loadingBar = document.querySelector("#unity-loading-bar");
    var progressBarFull = document.querySelector("#unity-progress-bar-full");
    var fullscreenButton = document.querySelector("#unity-fullscreen-button");
    var mobileWarning = document.querySelector("#unity-mobile-warning");
    var abort = false;
    // By default Unity keeps WebGL canvas render target size matched with
    // the DOM size of the canvas element (scaled by window.devicePixelRatio)
    // Set this to false if you want to decouple this synchronization from
    // happening inside the engine, and you would instead like to size up
    // the canvas DOM size and WebGL render target sizes yourself.
    // config.matchWebGLToCanvasSize = false;

    if (/iPhone|iPad|iPod|Android/i.test(navigator.userAgent)) {
      container.className = "unity-mobile";
      // Avoid draining fillrate performance on mobile devices,
      // and default/override low DPI mode on mobile browsers.
      config.devicePixelRatio = 1;
      container.style.display = "none";
      mobileWarning.style.display = "block";
      abort = true;
      setTimeout(() => {
        //mobileWarning.style.display = "none";
      }, 5000);

    } else {
      //canvas.style.width = "1224px";
      //canvas.style.height = "765px";
    }
    loadingBar.style.display = "block";

    var script = document.createElement("script");
    script.src = loaderUrl;
    script.onload = () => {
      createUnityInstance(canvas, config, (progress) => {
        progressBarFull.style.width = 100 * progress + "%";
      }).then((unityInstance) => {
        loadingBar.style.display = "none";
        fullscreenButton.onclick = () => {
          unityInstance.SetFullscreen(1);
        };
      }).catch((message) => {
        alert(message);
      });
    };
    if (!abort) {
      document.body.appendChild(script);
    }
  </script>
</body>

</html>

'''
'''--- public/chainteam/testnet.html ---
<!DOCTYPE html>
<html lang="en-us">

<head>
  <meta charset="utf-8">
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
  <title>Chain Team Tactics Dapp</title>
  <link rel="shortcut icon" href="TemplateData/favicon.ico">
  <link rel="stylesheet" href="TemplateData/style.css">
</head>
<body>
  <div id="unity-mobile-warning">
    Chain Team Tactics is not supported on mobile devices yet.
  </div>
  <div id="unity-container" class="unity-desktop">
    <canvas id="unity-canvas" style="height: 702px; width: 1248px; aspect-ratio: auto 16 / 9;"></canvas>
    <!-- width="1224" height="765"-->
    <div id="unity-loading-bar">
      <div id="unity-logo"></div>
      <div id="unity-progress-bar-empty">
        <div id="unity-progress-bar-full"></div>
      </div>
    </div>

    <div id="unity-footer">

      <div id="unity-fullscreen-button"></div>

    </div>
  </div>
  <script>
    var buildUrl = "https://nyc3.digitaloceanspaces.com/pd-marmaj/ctt/testnet";
    var loaderUrl = buildUrl + "/CTTBuild.loader.js";
    var config = {
      dataUrl: buildUrl + "/CTTBuild.data.unityweb",
      frameworkUrl: buildUrl + "/CTTBuild.framework.js.unityweb",
      codeUrl: buildUrl + "/CTTBuild.wasm.unityweb",
      streamingAssetsUrl: "StreamingAssets",
      companyName: "PixelDapps",
      productName: "Cryptoheroes",
      productVersion: "0.1",
    };

    var container = document.querySelector("#unity-container");
    var canvas = document.querySelector("#unity-canvas");
    var loadingBar = document.querySelector("#unity-loading-bar");
    var progressBarFull = document.querySelector("#unity-progress-bar-full");
    var fullscreenButton = document.querySelector("#unity-fullscreen-button");
    var mobileWarning = document.querySelector("#unity-mobile-warning");
    var abort = false;
    // By default Unity keeps WebGL canvas render target size matched with
    // the DOM size of the canvas element (scaled by window.devicePixelRatio)
    // Set this to false if you want to decouple this synchronization from
    // happening inside the engine, and you would instead like to size up
    // the canvas DOM size and WebGL render target sizes yourself.
    // config.matchWebGLToCanvasSize = false;

    if (/iPhone|iPad|iPod|Android/i.test(navigator.userAgent)) {
      container.className = "unity-mobile";
      // Avoid draining fillrate performance on mobile devices,
      // and default/override low DPI mode on mobile browsers.
      config.devicePixelRatio = 1;
      container.style.display = "none";
      mobileWarning.style.display = "block";
      abort = true;
      setTimeout(() => {
        //mobileWarning.style.display = "none";
      }, 5000);

    } else {
      //canvas.style.width = "1224px";
      //canvas.style.height = "765px";
    }
    loadingBar.style.display = "block";

    var script = document.createElement("script");
    script.src = loaderUrl;
    script.onload = () => {
      createUnityInstance(canvas, config, (progress) => {
        progressBarFull.style.width = 100 * progress + "%";
      }).then((unityInstance) => {
        loadingBar.style.display = "none";
        fullscreenButton.onclick = () => {
          unityInstance.SetFullscreen(1);
        };
      }).catch((message) => {
        alert(message);
      });
    };
    if (!abort) {
      document.body.appendChild(script);
    }
  </script>
</body>

</html>

'''
'''--- public/cryptoheroes/TemplateData/style-fs.css ---
body { padding: 0; margin: 0; background-color: #1f2937 }
#unity-container { position: absolute }
#unity-container.unity-desktop { width: 100%; height: 100% }
#unity-canvas { background: #231F20 }
#unity-canvas { width: 100%; height: 100% }
#unity-loading-bar { position: absolute; left: 50%; top: 50%; transform: translate(-50%, -50%); display: none }
#unity-logo { width: 154px; height: 130px; background: url('unity-logo-dark.png') no-repeat center }
#unity-progress-bar-empty { width: 141px; height: 18px; margin-top: 10px; background: url('progress-bar-empty-dark.png') no-repeat center }
#unity-progress-bar-full { width: 0%; height: 18px; margin-top: 10px; background: url('progress-bar-full-dark.png') no-repeat center }
#unity-footer { position: relative }
#unity-footer { display: none }
#unity-webgl-logo { float:left; width: 204px; height: 38px; background: url('webgl-logo.png') no-repeat center }
#unity-build-title { float: right; margin-right: 10px; line-height: 38px; font-family: arial; font-size: 18px }
#unity-fullscreen-button { float: right; width: 38px; height: 38px; background: url('fullscreen-button.png') no-repeat center }
#unity-mobile-warning { position: absolute; left: 50%; top: 5%; transform: translate(-50%); background: white; padding: 10px; display: none }

'''
'''--- public/cryptoheroes/TemplateData/style.css ---
body { padding: 0; margin: 0; background-color: #1f2937 }
#unity-container { position: absolute }
#unity-container.unity-desktop { left: 50%; top: 50%; transform: translate(-50%, -50%) }
#unity-container.unity-mobile { width: 100%; height: 100% }
#unity-canvas { background: #231F20 }
.unity-mobile #unity-canvas { width: 100%; height: 100% }
#unity-loading-bar { position: absolute; left: 50%; top: 50%; transform: translate(-50%, -50%); display: none }
#unity-logo { height: 130px; background: url('unity-logo-dark.png') no-repeat center }
#unity-progress-bar-empty { width: 141px; height: 18px; margin-top: 10px; background: url('progress-bar-empty-dark.png') no-repeat center }
#unity-progress-bar-full { width: 0%; height: 18px; margin-top: 10px; background: url('progress-bar-full-dark.png') no-repeat center }
#unity-footer { position: relative }
.unity-mobile #unity-footer { display: none }
#unity-webgl-logo { float:left; width: 204px; height: 38px; background: url('webgl-logo.png') no-repeat center }
#unity-build-title { float: right; margin-right: 10px; line-height: 38px; font-family: arial; font-size: 18px }
#unity-fullscreen-button { float: right; width: 38px; height: 38px; background: url('fullscreen-button.png') no-repeat center }
#unity-mobile-warning { position: absolute; left: 50%; top: 5%; transform: translate(-50%); background: white; padding: 10px; display: none }

'''
'''--- public/cryptoheroes/index.html ---
<!DOCTYPE html>
<html lang="en-us">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title>Cryptoheroes Dapp</title>
    <link rel="shortcut icon" href="cryptoheroes/TemplateData/favicon.ico">
    <link rel="stylesheet" href="cryptoheroes/TemplateData/style.css">
  </head>
  <body>
    <div id="unity-container" class="unity-desktop">
      <canvas id="unity-canvas" width=960 height=540></canvas>
      <div id="unity-loading-bar">
        <div id="unity-logo"></div>
        <div id="unity-progress-bar-empty">
          <div id="unity-progress-bar-full"></div>
        </div>
      </div>
      <div id="unity-warning"> </div>
      <div id="unity-footer">
        <div id="unity-fullscreen-button"></div>
      </div>
    </div>
    <script>
      var container = document.querySelector("#unity-container");
      var canvas = document.querySelector("#unity-canvas");
      var loadingBar = document.querySelector("#unity-loading-bar");
      var progressBarFull = document.querySelector("#unity-progress-bar-full");
      var fullscreenButton = document.querySelector("#unity-fullscreen-button");
      var warningBanner = document.querySelector("#unity-warning");

      // Shows a temporary message banner/ribbon for a few seconds, or
      // a permanent error message on top of the canvas if type=='error'.
      // If type=='warning', a yellow highlight color is used.
      // Modify or remove this function to customize the visually presented
      // way that non-critical warnings and error messages are presented to the
      // user.
      function unityShowBanner(msg, type) {
        function updateBannerVisibility() {
          warningBanner.style.display = warningBanner.children.length ? 'block' : 'none';
        }
        var div = document.createElement('div');
        div.innerHTML = msg;
        warningBanner.appendChild(div);
        if (type == 'error') div.style = 'background: red; padding: 10px;';
        else {
          if (type == 'warning') div.style = 'background: yellow; padding: 10px;';
          setTimeout(function() {
            warningBanner.removeChild(div);
            updateBannerVisibility();
          }, 5000);
        }
        updateBannerVisibility();
      }

      var buildUrl = "https://nyc3.digitaloceanspaces.com/pd-marmaj/ch/mainnet";
      var loaderUrl = buildUrl + "/ch-mainnet-ws.loader.js";
      var config = {
        dataUrl: buildUrl + "/ch-mainnet-ws.data.unityweb",
        frameworkUrl: buildUrl + "/ch-mainnet-ws.framework.js.unityweb",
        codeUrl: buildUrl + "/ch-mainnet-ws.wasm.unityweb",
        streamingAssetsUrl: "StreamingAssets",
        companyName: "PixelDapps",  
        productName: "Cryptoheroes",
        productVersion: "2.7",
        showBanner: unityShowBanner,
      };

      // By default Unity keeps WebGL canvas render target size matched with
      // the DOM size of the canvas element (scaled by window.devicePixelRatio)
      // Set this to false if you want to decouple this synchronization from
      // happening inside the engine, and you would instead like to size up
      // the canvas DOM size and WebGL render target sizes yourself.
      // config.matchWebGLToCanvasSize = false;

      if (/iPhone|iPad|iPod|Android/i.test(navigator.userAgent)) {
        container.className = "unity-mobile";
        // Avoid draining fillrate performance on mobile devices,
        // and default/override low DPI mode on mobile browsers.
        config.devicePixelRatio = 1;
        unityShowBanner('WebGL builds are not supported on mobile devices.');
      } else {
        canvas.style.width = "960px";
        canvas.style.height = "540px";
      }
      loadingBar.style.display = "block";

      var myGameInstance = null;
      var script = document.createElement("script");
      script.src = loaderUrl;

      script.onload = () => {
        createUnityInstance(canvas, config, (progress) => {
          progressBarFull.style.width = 100 * progress + "%";
        }).then((unityInstance) => {
          myGameInstance = unityInstance;
          loadingBar.style.display = "none";
          fullscreenButton.onclick = () => {
            unityInstance.SetFullscreen(1);
          };
        }).catch((message) => {
          alert(message);
        });
      };
        document.body.appendChild(script);        
    </script>
    
    <script src="https://pd-marmaj.nyc3.digitaloceanspaces.com/library/mainnet/ws-lib.js"></script>
    <script src="https://pd-marmaj.nyc3.digitaloceanspaces.com/library/mainnet/pd-lib.js"></script>

           <script>
            function FixInputOnSubmit() {
            document.getElementById("fixInput").blur();
            event.preventDefault();
  }
           </script>

          <div>
  <form onsubmit="FixInputOnSubmit()" autocomplete="off" style="width: 0px; height: 0px; position: absolute; top: -9999px;">
    <input type="text" id="fixInput" oninput="myGameInstance.SendMessage('_WebGLKeyboard', 'ReceiveInputChange', document.getElementById('fixInput').value)" onblur="myGameInstance.SendMessage('_WebGLKeyboard', 'LoseFocus')" style="font-size: 42px;">
  </form>
</div>

  </body>
</html>

'''
'''--- public/cryptoheroes/old_index.html ---
<!DOCTYPE html>
<html lang="en-us">

<head>
  <meta charset="utf-8">
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
  <title>Cryptoheroes Dapp</title>
  <link rel="shortcut icon" href="cryptoheroes/TemplateData/favicon.ico">
  <link rel="stylesheet" href="cryptoheroes/TemplateData/style.css">
</head>
<body>
  <div id="unity-mobile-warning">
    Cryptoheroes is not supported on mobile devices yet.
  </div>
  <div id="unity-container" class="unity-desktop">
    <canvas id="unity-canvas" style="height: 702px; width: 1248px; aspect-ratio: auto 16 / 9;"></canvas>
    <!-- width="1224" height="765"-->
    <div id="unity-loading-bar">
      <div id="unity-logo"></div>
      <div id="unity-progress-bar-empty">
        <div id="unity-progress-bar-full"></div>
      </div>
    </div>

    <div id="unity-footer">

      <div id="unity-fullscreen-button"></div>

    </div>
  </div>
  <script>
    var buildUrl = "https://nyc3.digitaloceanspaces.com/pd-marmaj/ch/mainnet";
    var loaderUrl = buildUrl + "/CHBuild.loader.js";
    var config = {
      dataUrl: buildUrl + "/CHBuild.data.unityweb",
      frameworkUrl: buildUrl + "/CHBuild.framework.js.unityweb",
      codeUrl: buildUrl + "/CHBuild.wasm.unityweb",
      streamingAssetsUrl: "StreamingAssets",
      companyName: "PixelDapps",
      productName: "Cryptoheroes",
      productVersion: "0.1",
    };

    var container = document.querySelector("#unity-container");
    var canvas = document.querySelector("#unity-canvas");
    var loadingBar = document.querySelector("#unity-loading-bar");
    var progressBarFull = document.querySelector("#unity-progress-bar-full");
    var fullscreenButton = document.querySelector("#unity-fullscreen-button");
    var mobileWarning = document.querySelector("#unity-mobile-warning");
    var abort = false;
    // By default Unity keeps WebGL canvas render target size matched with
    // the DOM size of the canvas element (scaled by window.devicePixelRatio)
    // Set this to false if you want to decouple this synchronization from
    // happening inside the engine, and you would instead like to size up
    // the canvas DOM size and WebGL render target sizes yourself.
    // config.matchWebGLToCanvasSize = false;

    if (/iPhone|iPad|iPod|Android/i.test(navigator.userAgent)) {
      container.className = "unity-mobile";
      // Avoid draining fillrate performance on mobile devices,
      // and default/override low DPI mode on mobile browsers.
      config.devicePixelRatio = 1;
      container.style.display = "none";
      mobileWarning.style.display = "block";
      abort = true;
      setTimeout(() => {
        //mobileWarning.style.display = "none";
      }, 5000);

    } else {
      //canvas.style.width = "1224px";
      //canvas.style.height = "765px";
    }
    loadingBar.style.display = "block";

    var script = document.createElement("script");
    script.src = loaderUrl;
    script.onload = () => {
      createUnityInstance(canvas, config, (progress) => {
        progressBarFull.style.width = 100 * progress + "%";
      }).then((unityInstance) => {
        loadingBar.style.display = "none";
        fullscreenButton.onclick = () => {
          unityInstance.SetFullscreen(1);
        };
      }).catch((message) => {
        alert(message);
      });
    };
    if (!abort) {
      document.body.appendChild(script);
    }
  </script>
</body>

</html>

'''
'''--- public/cryptoheroes/testnet.html ---
<!DOCTYPE html>
<html lang="en-us">

<head>
  <meta charset="utf-8">
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
  <title>Cryptoheroes Dapp</title>
  <link rel="shortcut icon" href="cryptoheroes/TemplateData/favicon.ico">
  <link rel="stylesheet" href="cryptoheroes/TemplateData/style.css">
</head>
<body>
  <!-- <div id="unity-mobile-warning">
    Cryptoheroes is not supported on mobile devices yet.
  </div> -->
  <div id="unity-container" class="unity-desktop">
    <canvas id="unity-canvas" style="height: 702px; width: 1248px; aspect-ratio: auto 16 / 9;"></canvas>
    <!-- width="1224" height="765"-->
    <div id="unity-loading-bar">
      <div id="unity-logo"></div>
      <div id="unity-progress-bar-empty">
        <div id="unity-progress-bar-full"></div>
      </div>
    </div>

    <div id="unity-footer">

      <div id="unity-fullscreen-button"></div>

    </div>
  </div>
  <script>
    var buildUrl = "https://nyc3.digitaloceanspaces.com/pd-marmaj/ch/testnet";
    var loaderUrl = buildUrl + "/CHBuild.loader.js";
    var config = {
      dataUrl: buildUrl + "/CHBuild.data.unityweb",
      frameworkUrl: buildUrl + "/CHBuild.framework.js.unityweb",
      codeUrl: buildUrl + "/CHBuild.wasm.unityweb",
      streamingAssetsUrl: "StreamingAssets",
      companyName: "PixelDapps",
      productName: "Cryptoheroes",
      productVersion: "0.1",
    };

    var container = document.querySelector("#unity-container");
    var canvas = document.querySelector("#unity-canvas");
    var loadingBar = document.querySelector("#unity-loading-bar");
    var progressBarFull = document.querySelector("#unity-progress-bar-full");
    var fullscreenButton = document.querySelector("#unity-fullscreen-button");
    var mobileWarning = document.querySelector("#unity-mobile-warning");
    var abort = false;
    // By default Unity keeps WebGL canvas render target size matched with
    // the DOM size of the canvas element (scaled by window.devicePixelRatio)
    // Set this to false if you want to decouple this synchronization from
    // happening inside the engine, and you would instead like to size up
    // the canvas DOM size and WebGL render target sizes yourself.
    // config.matchWebGLToCanvasSize = false;

    if (/iPhone|iPad|iPod|Android/i.test(navigator.userAgent)) {
      container.className = "unity-mobile";
      // Avoid draining fillrate performance on mobile devices,
      // and default/override low DPI mode on mobile browsers.
      config.devicePixelRatio = 1;
      container.style.display = "none";
      mobileWarning.style.display = "block";
      abort = true;
      setTimeout(() => {
        //mobileWarning.style.display = "none";
      }, 5000);

    } else {
      //canvas.style.width = "1224px";
      //canvas.style.height = "765px";
    }
    loadingBar.style.display = "block";

    var script = document.createElement("script");
    script.src = loaderUrl;
    script.onload = () => {
      createUnityInstance(canvas, config, (progress) => {
        progressBarFull.style.width = 100 * progress + "%";
      }).then((unityInstance) => {
        loadingBar.style.display = "none";
        fullscreenButton.onclick = () => {
          unityInstance.SetFullscreen(1);
        };
      }).catch((message) => {
        alert(message);
      });
    };
    if (!abort) {
      document.body.appendChild(script);
    }
  </script>
</body>

</html>

'''
'''--- public/pixelpets/TemplateData/style-fs.css ---
body { padding: 0; margin: 0; background-color: #1f2937 }
#unity-container { position: absolute }
#unity-container.unity-desktop { width: 100%; height: 100% }
#unity-canvas { background: #231F20 }
#unity-canvas { width: 100%; height: 100% }
#unity-loading-bar { position: absolute; left: 50%; top: 50%; transform: translate(-50%, -50%); display: none }
#unity-logo { width: 154px; height: 130px; background: url('unity-logo-dark.png') no-repeat center }
#unity-progress-bar-empty { width: 141px; height: 18px; margin-top: 10px; background: url('progress-bar-empty-dark.png') no-repeat center }
#unity-progress-bar-full { width: 0%; height: 18px; margin-top: 10px; background: url('progress-bar-full-dark.png') no-repeat center }
#unity-footer { position: relative }
#unity-footer { display: none }
#unity-webgl-logo { float:left; width: 204px; height: 38px; background: url('webgl-logo.png') no-repeat center }
#unity-build-title { float: right; margin-right: 10px; line-height: 38px; font-family: arial; font-size: 18px }
#unity-fullscreen-button { float: right; width: 38px; height: 38px; background: url('fullscreen-button.png') no-repeat center }
#unity-mobile-warning { position: absolute; left: 50%; top: 5%; transform: translate(-50%); background: white; padding: 10px; display: none }

'''
'''--- public/pixelpets/TemplateData/style.css ---
body { padding: 0; margin: 0; background-color: #1f2937 }
#unity-container { position: absolute }
#unity-container.unity-desktop { left: 50%; top: 50%; transform: translate(-50%, -50%) }
#unity-container.unity-mobile { width: 100%; height: 100% }
#unity-canvas { background: #231F20 }
.unity-mobile #unity-canvas { width: 100%; height: 100% }
#unity-loading-bar { position: absolute; left: 50%; top: 50%; transform: translate(-50%, -50%); display: none }
#unity-logo { width: 154px; height: 130px; background: url('unity-logo-dark.png') no-repeat center }
#unity-progress-bar-empty { width: 141px; height: 18px; margin-top: 10px; background: url('progress-bar-empty-dark.png') no-repeat center }
#unity-progress-bar-full { width: 0%; height: 18px; margin-top: 10px; background: url('progress-bar-full-dark.png') no-repeat center }
#unity-footer { position: relative }
.unity-mobile #unity-footer { display: none }
#unity-webgl-logo { float:left; width: 204px; height: 38px; background: url('webgl-logo.png') no-repeat center }
#unity-build-title { float: right; margin-right: 10px; line-height: 38px; font-family: arial; font-size: 18px }
#unity-fullscreen-button { float: right; width: 38px; height: 38px; background: url('fullscreen-button.png') no-repeat center }
#unity-mobile-warning { position: absolute; left: 50%; top: 5%; transform: translate(-50%); background: white; padding: 10px; display: none }

'''
'''--- public/pixelpets/index.html ---
<!DOCTYPE html>
<html lang="en-us">
<head>
  <meta charset="utf-8">
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
  <title>PixelPets Dapp</title>
  <link rel="shortcut icon" href="pixelpets/TemplateData/favicon.ico">
  <link rel="stylesheet" href="pixelpets/TemplateData/style.css">
</head>
<body>
  <div id="unity-container" class="unity-desktop">
      <canvas id="unity-canvas" width=960 height=540></canvas>
      <div id="unity-loading-bar">
        <div id="unity-logo"></div>
        <div id="unity-progress-bar-empty">
          <div id="unity-progress-bar-full"></div>
        </div>
      </div>
      <div id="unity-warning"> </div>
      <div id="unity-footer">
        <div id="unity-fullscreen-button"></div>
      </div>
    </div>
    <script>
      var container = document.querySelector("#unity-container");
      var canvas = document.querySelector("#unity-canvas");
      var loadingBar = document.querySelector("#unity-loading-bar");
      var progressBarFull = document.querySelector("#unity-progress-bar-full");
      var fullscreenButton = document.querySelector("#unity-fullscreen-button");
      var warningBanner = document.querySelector("#unity-warning");

      // Shows a temporary message banner/ribbon for a few seconds, or
      // a permanent error message on top of the canvas if type=='error'.
      // If type=='warning', a yellow highlight color is used.
      // Modify or remove this function to customize the visually presented
      // way that non-critical warnings and error messages are presented to the
      // user.
      function unityShowBanner(msg, type) {
        function updateBannerVisibility() {
          warningBanner.style.display = warningBanner.children.length ? 'block' : 'none';
        }
        var div = document.createElement('div');
        div.innerHTML = msg;
        warningBanner.appendChild(div);
        if (type == 'error') div.style = 'background: red; padding: 10px;';
        else {
          if (type == 'warning') div.style = 'background: yellow; padding: 10px;';
          setTimeout(function() {
            warningBanner.removeChild(div);
            updateBannerVisibility();
          }, 5000);
        }
        updateBannerVisibility();
      }
      

      var buildUrl = "https://nyc3.digitaloceanspaces.com/pd-marmaj/pp/mainnet";
      var loaderUrl = buildUrl + "/pp-mainnet-ws.loader.js";
      var config = {
        dataUrl: buildUrl + "/pp-mainnet-ws.data.unityweb",
        frameworkUrl: buildUrl + "/pp-mainnet-ws.framework.js.unityweb",
        codeUrl: buildUrl + "/pp-mainnet-ws.wasm.unityweb",
        streamingAssetsUrl: "StreamingAssets",
        companyName: "PixelDapps",
        productName: "PixelPets",
        productVersion: "1.3",
        showBanner: unityShowBanner,
      };

      // By default Unity keeps WebGL canvas render target size matched with
      // the DOM size of the canvas element (scaled by window.devicePixelRatio)
      // Set this to false if you want to decouple this synchronization from
      // happening inside the engine, and you would instead like to size up
      // the canvas DOM size and WebGL render target sizes yourself.
      // config.matchWebGLToCanvasSize = false;

      if (/iPhone|iPad|iPod|Android/i.test(navigator.userAgent)) {
        container.className = "unity-mobile";
        // Avoid draining fillrate performance on mobile devices,
        // and default/override low DPI mode on mobile browsers.
        config.devicePixelRatio = 1;
        //unityShowBanner('WebGL builds are not supported on mobile devices.');
      } else {
        canvas.style.width = "960px";
        canvas.style.height = "540px";
      }
      loadingBar.style.display = "block";

      var myGameInstance = null;
      var script = document.createElement("script");
      script.src = loaderUrl;

      script.onload = () => {
        createUnityInstance(canvas, config, (progress) => {
          progressBarFull.style.width = 100 * progress + "%";
        }).then((unityInstance) => {
          myGameInstance = unityInstance;
          loadingBar.style.display = "none";
          fullscreenButton.onclick = () => {
            unityInstance.SetFullscreen(1);
          };
        }).catch((message) => {
          alert(message);
        });
      };
        document.body.appendChild(script);        
    </script>
    <script src="https://pd-marmaj.nyc3.digitaloceanspaces.com/library/mainnet/ws-lib.js"></script>
    <script src="https://pd-marmaj.nyc3.digitaloceanspaces.com/library/mainnet/pd-lib.js"></script>
    
  </body>
</html>

'''
'''--- public/pixelpets/old_index.html ---
<!DOCTYPE html>
<html lang="en-us">

<head>
  <meta charset="utf-8">
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
  <title>PixelPets Dapp</title>
  <link rel="shortcut icon" href="pixelpets/TemplateData/favicon.ico">
  <link rel="stylesheet" href="pixelpets/TemplateData/style.css">
</head>

<body>
  <div id="unity-mobile-warning">
    Pixelpets is not supported on mobile devices yet.
  </div>
  <div id="unity-container" class="unity-desktop">
    <canvas id="unity-canvas" style="height: 702px; width: 1248px; aspect-ratio: auto 16 / 9;"></canvas>
    <!-- width="1224" height="765"-->
    <div id="unity-loading-bar">
      <div id="unity-logo"></div>
      <div id="unity-progress-bar-empty">
        <div id="unity-progress-bar-full"></div>
      </div>
    </div>

    <div id="unity-footer">

      <div id="unity-fullscreen-button"></div>

    </div>
  </div>
  <script>
    var buildUrl = "https://nyc3.digitaloceanspaces.com/pd-marmaj/pp/mainnet";
    var loaderUrl = buildUrl + "/PPBuild.loader.js";
    var config = {
      dataUrl: buildUrl + "/PPBuild.data.unityweb",
      frameworkUrl: buildUrl + "/PPBuild.framework.js.unityweb",
      codeUrl: buildUrl + "/PPBuild.wasm.unityweb",
      streamingAssetsUrl: "StreamingAssets",
      companyName: "PixelDapps",
      productName: "PixelPets",
      productVersion: "1.0",
    };

    var container = document.querySelector("#unity-container");
    var canvas = document.querySelector("#unity-canvas");
    var loadingBar = document.querySelector("#unity-loading-bar");
    var progressBarFull = document.querySelector("#unity-progress-bar-full");
    var fullscreenButton = document.querySelector("#unity-fullscreen-button");
    var mobileWarning = document.querySelector("#unity-mobile-warning");
    var abort = false;
    // By default Unity keeps WebGL canvas render target size matched with
    // the DOM size of the canvas element (scaled by window.devicePixelRatio)
    // Set this to false if you want to decouple this synchronization from
    // happening inside the engine, and you would instead like to size up
    // the canvas DOM size and WebGL render target sizes yourself.
    // config.matchWebGLToCanvasSize = false;

    if (/iPhone|iPad|iPod|Android/i.test(navigator.userAgent)) {
      container.className = "unity-mobile";
      // Avoid draining fillrate performance on mobile devices,
      // and default/override low DPI mode on mobile browsers.
      config.devicePixelRatio = 1;
      container.style.display = "none";
      mobileWarning.style.display = "block";
      abort = true;
      setTimeout(() => {
        //mobileWarning.style.display = "none";
      }, 5000);

    } else {
      //canvas.style.width = "1224px";
      //canvas.style.height = "765px";
    }
    loadingBar.style.display = "block";

    var script = document.createElement("script");
    script.src = loaderUrl;
    script.onload = () => {
      createUnityInstance(canvas, config, (progress) => {
        progressBarFull.style.width = 100 * progress + "%";
      }).then((unityInstance) => {
        loadingBar.style.display = "none";
        fullscreenButton.onclick = () => {
          unityInstance.SetFullscreen(1);
        };
      }).catch((message) => {
        alert(message);
      });
    };
    if (!abort) {
      document.body.appendChild(script);
    }
  </script>
</body>

</html>

'''
'''--- public/pixelpets/testnet.html ---
<!DOCTYPE html>
<html lang="en-us">

<head>
  <meta charset="utf-8">
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
  <title>PixelPets Dapp</title>
  <link rel="shortcut icon" href="pixelpets/TemplateData/favicon.ico">
  <link rel="stylesheet" href="pixelpets/TemplateData/style.css">
</head>

<body>
 <div id="unity-container" class="unity-mobile">
    <canvas id="unity-canvas" style="height: 702px; width: 1248px; aspect-ratio: auto 16 / 9;"></canvas>
    <!-- width="1224" height="765"-->
    <div id="unity-loading-bar">
      <div id="unity-logo"></div>
      <div id="unity-progress-bar-empty">
        <div id="unity-progress-bar-full"></div>
      </div>
   </div>
  <div id="unity-container" class="unity-desktop">
    <canvas id="unity-canvas" style="height: 702px; width: 1248px; aspect-ratio: auto 16 / 9;"></canvas>
    <!-- width="1224" height="765"-->
    <div id="unity-loading-bar">
      <div id="unity-logo"></div>
      <div id="unity-progress-bar-empty">
        <div id="unity-progress-bar-full"></div>
      </div>
    </div>

    <div id="unity-footer">

      <div id="unity-fullscreen-button"></div>

    </div>
  </div>
  <script>
    var buildUrl = "https://nyc3.digitaloceanspaces.com/pd-marmaj/pp/testnet";
    var loaderUrl = buildUrl + "/PPBuild.loader.js";
    var config = {
      dataUrl: buildUrl + "/PPBuild.data.unityweb",
      frameworkUrl: buildUrl + "/PPBuild.framework.js.unityweb",
      codeUrl: buildUrl + "/PPBuild.wasm.unityweb",
      streamingAssetsUrl: "StreamingAssets",
      companyName: "PixelDapps",
      productName: "PixelPets",
      productVersion: "1.0",
    };

    var container = document.querySelector("#unity-container");
    var canvas = document.querySelector("#unity-canvas");
    var loadingBar = document.querySelector("#unity-loading-bar");
    var progressBarFull = document.querySelector("#unity-progress-bar-full");
    var fullscreenButton = document.querySelector("#unity-fullscreen-button");
    var mobileWarning = document.querySelector("#unity-mobile-warning");
    var abort = false;
    // By default Unity keeps WebGL canvas render target size matched with
    // the DOM size of the canvas element (scaled by window.devicePixelRatio)
    // Set this to false if you want to decouple this synchronization from
    // happening inside the engine, and you would instead like to size up
    // the canvas DOM size and WebGL render target sizes yourself.
    // config.matchWebGLToCanvasSize = false;

    if (/iPhone|iPad|iPod|Android/i.test(navigator.userAgent)) {
      container.className = "unity-mobile";
      // Avoid draining fillrate performance on mobile devices,
      // and default/override low DPI mode on mobile browsers.
      config.devicePixelRatio = 1;
      container.style.display = "none";
      mobileWarning.style.display = "block";
      abort = true;
      setTimeout(() => {
        //mobileWarning.style.display = "none";
      }, 5000);

    } else {
      //canvas.style.width = "1224px";
      //canvas.style.height = "765px";
    }
    loadingBar.style.display = "block";

    var script = document.createElement("script");
    script.src = loaderUrl;
    script.onload = () => {
      createUnityInstance(canvas, config, (progress) => {
        progressBarFull.style.width = 100 * progress + "%";
      }).then((unityInstance) => {
        loadingBar.style.display = "none";
        fullscreenButton.onclick = () => {
          unityInstance.SetFullscreen(1);
        };
      }).catch((message) => {
        alert(message);
      });
    };
    if (!abort) {
      document.body.appendChild(script);
    }
  </script>
</body>

</html>

'''
'''--- public/shiney.svg ---
<svg xmlns="http://www.w3.org/2000/svg" version="1.1" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svgjs="http://svgjs.com/svgjs" width="1440" height="560" preserveAspectRatio="none" viewBox="0 0 1440 560"><g mask="url(&quot;#SvgjsMask1000&quot;)" fill="none"><rect width="1440" height="560" x="0" y="0" fill="#0e2a47"></rect><path d="M0,565.192C104.042,557.109,197.22,495.751,271.482,422.434C337.238,357.514,352.1,262.377,391.416,178.754C431.28,93.965,510.063,21.019,504.174,-72.489C498.194,-167.433,435.616,-254.006,360.486,-312.363C291.167,-366.206,197.432,-362.82,110.965,-377.911C34.619,-391.235,-38.718,-398.964,-116.143,-395.546C-216.841,-391.1,-337.846,-425.709,-409.609,-354.928C-480.587,-284.922,-460.274,-164.194,-451.38,-64.899C-443.882,18.81,-385.98,84.93,-362.97,165.763C-334.319,266.412,-370.394,389.388,-300.017,466.835C-227.776,546.333,-107.095,573.512,0,565.192" fill="#0b2239"></path><path d="M1440 1186.327C1553.151 1160.905 1610.16 1038.882 1703.711 970.342 1789.612 907.406 1914.741 893.4970000000001 1966.6190000000001 800.499 2019.2649999999999 706.125 2001.79 587.833 1975.574 482.996 1951.049 384.922 1876.85 313.59000000000003 1823.402 227.77999999999997 1758.223 123.13600000000002 1740.88-29.595000000000027 1626.954-76.70799999999997 1513.908-123.457 1390.177-42.460000000000036 1275.98 1.4009999999999536 1170.3 41.990999999999985 1068.974 89.18099999999998 988.2909999999999 168.59199999999998 902.698 252.83499999999998 834.026 352.565 801.68 468.223 766.345 594.57 743.236 733.9780000000001 796.658 853.804 850.225 973.9549999999999 970.421 1048.433 1087.285 1108.836 1196.432 1165.25 1320.124 1213.26 1440 1186.327" fill="#113255"></path></g><defs><mask id="SvgjsMask1000"><rect width="1440" height="560" fill="#ffffff"></rect></mask></defs></svg>
'''
'''--- styles/globals.css ---
body {
  background-color: rgba(31, 41, 55);
}

.font-monst {
  font-family: "Montserrat";
}

.font-quick {
  font-family: "Quicksand";
}

@font-face {
  font-family: "Montserrat";
  font-style: normal;
  font-weight: 700;
  src: local("Montserrat"), url(../fonts/Montserrat-Bold.woff) format("woff");
}

@font-face {
  font-family: "Montserrat";
  font-style: normal;
  font-weight: 600;
  src: local("Montserrat"),
    url(../fonts/Montserrat-SemiBold.woff) format("woff");
}

@font-face {
  font-family: "Montserrat";
  font-style: normal;
  font-weight: 500;
  src: local("Montserrat"), url(../fonts/Montserrat-Medium.woff) format("woff");
}

@font-face {
  font-family: "Montserrat";
  font-style: normal;
  font-weight: 400;
  src: local("Montserrat"), url(../fonts/Montserrat-Regular.woff) format("woff");
}

@font-face {
  font-family: "Quicksand";
  font-style: normal;
  font-weight: bold;
  src: local("Quicksand"), url(../fonts/Quicksand-Bold.woff) format("woff");
}

::-webkit-scrollbar {
  width: 5px;
  height: 5px;
}
::-webkit-scrollbar-thumb {
  background: #c2c2c2;
  border-radius: 15px;
}
::-webkit-scrollbar-thumb:hover {
  background: #a8a8a8;
}
::-webkit-scrollbar-track {
  background: #ffffff;
  border-radius: 10px;
  box-shadow: inset 7px 10px 12px #f0f0f0;
}

.app {
  background: linear-gradient(45deg, #000850 0%, #000320 100%),
    radial-gradient(100% 225% at 100% 0%, #ff6928 0%, #000000 100%),
    linear-gradient(225deg, #ff7a00 0%, #000000 100%),
    linear-gradient(
      135deg,
      #cdffeb 10%,
      #cdffeb 35%,
      #009f9d 35%,
      #009f9d 60%,
      #07456f 60%,
      #07456f 67%,
      #0f0a3c 67%,
      #0f0a3c 100%
    );
  background-blend-mode: screen, overlay, hard-light, normal;
}

blurry img:hover {
  webkit-filter: blur(4px); /* Chrome, Safari, Opera */
  filter: blur(4px);
  -webkit-transition: all 200ms ease-out;
  -moz-transition: all 200ms ease-out;
  -o-transition: all 200ms ease-out;
  transition: all 200ms ease-out;
}

.reveal:hover img {
  webkit-filter: blur(4px); /* Chrome, Safari, Opera */
  filter: blur(4px);
  -webkit-transition: all 200ms ease-out;
  -moz-transition: all 200ms ease-out;
  -o-transition: all 200ms ease-out;
  transition: all 200ms ease-out;
}

.pixel-party-btn {
  background: linear-gradient(123deg, #fffcac 0%, #ffffff 67%),
    linear-gradient(180deg, #d8d8d8 0%, #6b0000 100%),
    linear-gradient(
      142deg,
      #f9f5f0 0%,
      #f9f5f0 33%,
      #f2ead3 calc(33% + 1px),
      #f2ead3 56%,
      #f4991a calc(56% + 1px),
      #f4991a 62%,
      #321313 calc(62% + 1px),
      #321313 100%
    );
  background-blend-mode: multiply, overlay, normal;
}

.pixel-battle-btn {
  background: linear-gradient(
    60deg,
    #2b2e4a 0%,
    #2b2e4a 30%,
    #e84545 calc(30% + 1px),
    #e84545 60%,
    #903749 calc(60% + 1px),
    #903749 70%,
    #53354a calc(70% + 1px),
    #53354a 100%
  );
}
.font-monst {
  font-family: "Montserrat";
}
.font-pop {
  font-family: "Poppins", sans-serif;
}
.font-quick {
  font-family: "Quicksand";
}

@font-face {
  font-family: "Montserrat";
  font-style: normal;
  font-weight: 700;
  src: local("Montserrat"), url(../fonts/Montserrat-Bold.woff) format("woff");
}

@font-face {
  font-family: "Montserrat";
  font-style: normal;
  font-weight: 600;
  src: local("Montserrat"),
    url(../fonts/Montserrat-SemiBold.woff) format("woff");
}

@font-face {
  font-family: "Montserrat";
  font-style: normal;
  font-weight: 500;
  src: local("Montserrat"), url(../fonts/Montserrat-Medium.woff) format("woff");
}

@font-face {
  font-family: "Montserrat";
  font-style: normal;
  font-weight: 400;
  src: local("Montserrat"), url(../fonts/Montserrat-Regular.woff) format("woff");
}

@font-face {
  font-family: "Quicksand";
  font-style: normal;
  font-weight: bold;
  src: local("Quicksand"), url(../fonts/Quicksand-Bold.woff) format("woff");
}

.reveal {
  transition: transform 0.4s cubic-bezier(0, 0, 0.3, 1);
  cursor: pointer;
  position: relative;
  text-transform: uppercase;
}

.reveal::before {
  content: "";
  display: block;
  position: absolute;
  left: 10px;
  top: 12px;
  width: calc(100% - 20px);
  height: calc(100% - 20px);
  transition: transform 0.4s cubic-bezier(0, 0, 0.3, 1),
    opacity 0.4s cubic-bezier(0, 0, 0.3, 1);
  opacity: 0.4;
}

.reveal img {
  position: relative;
}

.reveal:hover {
  transform: scale(1);
}

.reveal:hover::before {
  transform: translateY(12px);
  opacity: 0.2;
}

.reveal-container {
  width: 100%;
  height: 100%;
  overflow: hidden;
  position: absolute;
  top: 0;
  left: 0;
}

.reveal__title,
.reveal__title-overlay {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  font-size: 40px;
  color: #fff;
  font-weight: bold;
  z-index: 1;
  display: flex;
  align-items: center;
  justify-content: center;
}

.reveal__title-overlay {
  overflow: hidden;
  top: calc(50% - 50px);
  background: rgb(32, 6, 6);
  height: 100px;
  width: 405px;
  left: 50%;
  z-index: 2;
  color: #fff;
  font-size: 50px;
  transition: transform 0.4s cubic-bezier(0, 0, 0.3, 1);
  transform: translateX(-160%) skew(-30deg);
}

.reveal__title-overlay-text {
  width: 100%;
  text-align: center;
  transition: transform 0.4s cubic-bezier(0, 0, 0.3, 1);
  transform: translateX(100%) skew(30deg);
}

.reveal:hover .reveal__title-overlay {
  transform: translateX(-75%) skew(-30deg);
}

.reveal:hover .reveal__title-overlay-text {
  transform: translateX(10%) skew(30deg);
}

.column {
  float: left;
  width: 50%;
}

/* Clear floats after the columns */
.row:after {
  content: "";
  display: table;
  clear: both;
}

@tailwind base;
@tailwind components;
@tailwind utilities;

'''
'''--- tailwind.config.js ---
const defaultTheme = require("tailwindcss/defaultTheme");

module.exports = {
  mode: "jit",
  darkMode: "media",
  purge: [
    "./public/**/*.{html,svg}",
    "./pages/**/*.{js,jsx,ts,tsx}",
    "./components/**/*.{js,jsx,ts,tsx}",
  ],
  darkMode: false, // or 'media' or 'class'
  theme: {
    extend: {
      fontFamily: {
        sans: ["Montserrat", ...defaultTheme.fontFamily.sans],
        serif: ["Quicksand", ...defaultTheme.fontFamily.serif],
      },
      colors: {
        theme: {
          darker: "#1C1B29",
          dark: "#222433",
          normal: "#2F3042",
          light: "#4F4D61",
          blue: "#5C7DEE",
          orange: "#EEC55C",
          white: "#F8F8F8",
          tooltip: "rgba(0, 0, 0, 0.2)",
        },
      },
      spacing: {
        7: "1.75rem",
        9: "2.25rem",
        28: "7rem",
        80: "20rem",
        96: "24rem",
      },
      height: {
        wide: "280rem",
        22: "22.5rem",
      },
      width: {
        wide: "280rem",
      },
      margin: {
        wide: "30rem",
      },
      boxShadow: {
        outline: "0 0 0 3px rgba(101, 31, 255, 0.4)",
        card:
          "0px 6.5px 15px 0px rgba(102, 111, 228, 0.14), 0px 1px 5.4px 0px rgba(0, 0, 0, 0.07)",
      },
    },
  },
  variants: {
    extend: {},
  },
  plugins: [
    require("@tailwindcss/forms"),
    require("@tailwindcss/aspect-ratio"),
  ],
};

'''
'''--- tsconfig.json ---
{
  "compilerOptions": {
    "target": "es5",
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": false,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true
  },
  "include": [
    "next-env.d.ts",
    "**/*.ts",
    "**/*.tsx"
  ],
  "exclude": [
    "node_modules"
  ]
}

'''
'''--- utils/backend/chainteamtactics/battle/core.ts ---
import { Vector2 } from "../../common/utils";
import { getMapByType, getUnitByType } from "../helper/utils";
import { ActionStruct, FightNode, FightStruct, IActionStruct, ResolveActionOnNodeResult, TileInfo, TileType, UnitBehaviorResult, UnitData, UnitFightInfo, UnitInfo, UnitType } from "./types";
import { OutOfBounds } from './utils'

export const mapWidth: number = 29;
export const mapHeight: number = 13;

export const mapWidthOffset: number = 14;
export const mapHeightOffset: number = 7;

export class BattleController {
    yellowUnits: UnitFightInfo[] = [];
    purpleUnits: UnitFightInfo[] = [];
    neighbourNodes: FightNode[] = [];
    actionStructs: ActionStruct[] = [];
    nodeGrid: FightNode[][];

    constructor() {
        this.nodeGrid = [];

        for (let x: number = 0; x < mapWidth; x++) {
            this.nodeGrid[x] = [];

            for (let y: number = 0; y < mapHeight; y++) {
                this.nodeGrid[x][y] = null;
            }
        }
    }

    GenerateFightStruct(
        mapIndex: number,
        purpleUnitInfos: UnitInfo[],
        purplePositions: Vector2[],
        yellowUnitInfos: UnitInfo[],
        yellowPositions: Vector2[]
    ): FightStruct {
        const mapData = getMapByType(mapIndex);

        for (let i: number = 0; i < mapData.tile_infos.length; i++) {
            const tileInfo: TileInfo = mapData.tile_infos[i];

            const rawPos: Vector2 = tileInfo.position;
            const nodeInfo: FightNode = {
                position: new Vector2(
                    rawPos.x + mapWidthOffset,
                    rawPos.y + mapHeightOffset
                ),
                blocked: tileInfo.blocked,
                tileType: tileInfo.tile_type,
                unit: null,
                bodies: []
            } as FightNode;

            this.nodeGrid[nodeInfo.position.x][nodeInfo.position.y] = nodeInfo;
        }

        for (let i: number = 0; i < purpleUnitInfos.length; i++) {
            this.AddUnit(true, this.nodeGrid[purplePositions[i].x][purplePositions[i].y], purpleUnitInfos[i]);
        }

        for (let i: number = 0; i < yellowUnitInfos.length; i++) {
            this.AddUnit(false, this.nodeGrid[yellowPositions[i].x][yellowPositions[i].y], yellowUnitInfos[i]);
        }

        let breaker: number = 1000;

        while (this.HasUnits(this.purpleUnits) && this.HasUnits(this.yellowUnits)) {
            if (--breaker < 0) {
                console.log("broke!");
                break;
            }

            for (let i: number = 0; i < this.purpleUnits.length; i++) {
                const behaviorResult: UnitBehaviorResult = this.ProcessUnitBehavior(this.purpleUnits[i]);
                if (behaviorResult.success) {
                    this.actionStructs.push(behaviorResult.actionStruct);
                }
            }

            for (let i: number = 0; i < this.yellowUnits.length; i++) {
                const behaviorResult: UnitBehaviorResult = this.ProcessUnitBehavior(this.yellowUnits[i]);
                if (behaviorResult.success) {
                    this.actionStructs.push(behaviorResult.actionStruct);
                }
            }
        }

        return {
            playerNames: [],
            playerRanks: [],
            playerLoadouts: [],
            purpleWins: this.HasUnits(this.purpleUnits),
            actionStructs: this.actionStructs.map(x => x),
        } as FightStruct;
    }

    AddUnit(isPurple: boolean, gotoNode: FightNode, unitInfo: UnitInfo, cooldown: number = 0) {
        const unitFightInfo: UnitFightInfo = new UnitFightInfo(unitInfo, isPurple, gotoNode, cooldown);
        if (isPurple) {
            this.purpleUnits.push(unitFightInfo);
            gotoNode.unit = this.purpleUnits[this.purpleUnits.length - 1];
        }
        else {
            this.yellowUnits.push(unitFightInfo);
            gotoNode.unit = this.yellowUnits[this.yellowUnits.length - 1];
        }
    }

    RemoveUnit(unitFightInfo: UnitFightInfo) {
        if (unitFightInfo.isPurple) {
            const index: number = this.purpleUnits.indexOf(unitFightInfo);
            this.purpleUnits.splice(index, 1);
        }
        else {
            const index: number = this.yellowUnits.indexOf(unitFightInfo);
            this.yellowUnits.splice(index, 1);
        }

        const index: number = unitFightInfo.currentNode.bodies.indexOf(unitFightInfo);
        unitFightInfo.currentNode.bodies.splice(index, 1);
    }

    HasUnits(units: UnitFightInfo[]): boolean {
        for (let i: number = 0; i < units.length; i++) {
            if (units[i].currentHealth > 0) {
                return true;
            }
        }
        return false;
    }

    NodeWalkable(checkNode: FightNode, floats: boolean): boolean {
        return checkNode.unit == null && !checkNode.blocked && (floats || checkNode.tileType != TileType.Lava);
    }

    ProcessUnitBehavior(unitFightInfo: UnitFightInfo): UnitBehaviorResult {
        if (unitFightInfo.currentHealth <= 0) {
            unitFightInfo.deathDelay++;

            if (unitFightInfo.deathDelay > 20) {
                this.RemoveUnit(unitFightInfo);
            }

            return {
                success: false,
                actionStruct: new ActionStruct({
                    unitID: unitFightInfo.UnitID(),
                } as IActionStruct),
            } as UnitBehaviorResult;
        }

        let processedDelay: boolean = false;

        if (unitFightInfo.attackBuffDelay > 0) {
            unitFightInfo.attackBuffDelay--;
            processedDelay = true;
        }
        else {
            unitFightInfo.attackBuff = 0;
        }

        if (unitFightInfo.speedBuffDelay > 0) {
            unitFightInfo.speedBuffDelay--;
            processedDelay = true;
        }
        else {
            unitFightInfo.speedBuff = 0;
        }

        unitFightInfo.turnDelay += unitFightInfo.CurrentSpeed();
        if (unitFightInfo.turnDelay < (unitFightInfo.turnStep + 1) * 200) {
            return {
                success: processedDelay,
                actionStruct: new ActionStruct({
                    unitID: unitFightInfo.UnitID(),
                } as IActionStruct),
            } as UnitBehaviorResult;
        }
        else {
            unitFightInfo.turnStep++;
        }

        if (unitFightInfo.attackDelay > 0) {
            unitFightInfo.attackDelay--;
        }

        if (unitFightInfo.Reviver()) {
            unitFightInfo.targetNode = this.GetClosestBody(unitFightInfo);
        }
        else if (unitFightInfo.supports()) {
            unitFightInfo.targetNode = this.GetClosestAlly(unitFightInfo);
        }
        else {
            unitFightInfo.targetNode = this.GetClosestTarget(unitFightInfo);
        }

        if (unitFightInfo.targetNode == unitFightInfo.currentNode) {
            return {
                success: processedDelay,
                actionStruct: new ActionStruct({
                    unitID: unitFightInfo.UnitID(),
                } as IActionStruct),
            } as UnitBehaviorResult;
        }

        const distanceToTarget: number = Vector2.distance(unitFightInfo.currentNode.position, unitFightInfo.targetNode.position);

        if (!unitFightInfo.Reviver() && !unitFightInfo.supports()) {
            const tooClose: boolean = unitFightInfo.attackRange() > 1 && distanceToTarget <= unitFightInfo.attackRange() * 1.5;
            const shouldRun: boolean = !unitFightInfo.dontRun() && unitFightInfo.currentHealth <= unitFightInfo.MaxHealth() * .3;

            if ((shouldRun || tooClose) && unitFightInfo.justAttacked) {
                const gotoNode: FightNode = this.GetFurthestNode(unitFightInfo);

                if (gotoNode != unitFightInfo.currentNode) {
                    unitFightInfo.justAttacked = false;
                    this.MoveUnit(unitFightInfo, gotoNode);

                    return {
                        success: true,
                        actionStruct: new ActionStruct({
                            unitID: unitFightInfo.UnitID(),
                            moveToNode: gotoNode.position,
                        } as IActionStruct),
                    } as UnitBehaviorResult;
                }
            }
        }

        if (distanceToTarget <= unitFightInfo.attackRange() * 1.5) {
            if (unitFightInfo.attackDelay <= 0) {
                unitFightInfo.justAttacked = true;
                const targets: number[] = [];
                let finalNode: FightNode = unitFightInfo.targetNode;

                if (unitFightInfo.selfCast()) {
                    finalNode = unitFightInfo.currentNode;
                }

                let targetNode: FightNode = finalNode;
                if (unitFightInfo.areaOfEffect() > 0) {
                    const neighbourNodes: FightNode[] = this.GetAreaOfEffectNodes(finalNode, unitFightInfo.areaOfEffect());

                    for (let i: number = 0; i < neighbourNodes.length; i++) {
                        const actionOnNodeResult: ResolveActionOnNodeResult = this.ResolveActionOnNode(unitFightInfo, neighbourNodes[i]);
                        if (actionOnNodeResult.targetID != -1) {
                            targets.push(actionOnNodeResult.targetID);
                        }
                    }
                }
                else {
                    const actionOnNodeResult: ResolveActionOnNodeResult = this.ResolveActionOnNode(unitFightInfo, finalNode);

                    if (actionOnNodeResult.targetID != -1) {
                        targets.push(actionOnNodeResult.targetID);
                    }

                    targetNode = actionOnNodeResult.fightNode;
                }

                unitFightInfo.attackDelay += unitFightInfo.attackSpeed() + unitFightInfo.cooldown;
                if (!targetNode) {
                    return {
                        success: processedDelay,
                        actionStruct: new ActionStruct({
                            unitID: unitFightInfo.UnitID(),
                        } as IActionStruct),
                    } as UnitBehaviorResult;
                }
                else {
                    return {
                        success: true,
                        actionStruct: new ActionStruct({
                            unitID: unitFightInfo.UnitID(),
                            targetNode: targetNode.position,
                            targets: targets.map(x => x),
                            damage: Math.floor(unitFightInfo.CurrentDamage() / 10),
                        } as IActionStruct),
                    } as UnitBehaviorResult;
                }
            }
            else {
                if (!unitFightInfo.Reviver() && !unitFightInfo.supports()) {
                    return {
                        success: processedDelay,
                        actionStruct: new ActionStruct({
                            unitID: unitFightInfo.UnitID(),
                        } as IActionStruct),
                    } as UnitBehaviorResult;
                }

                const gotoNode: FightNode = this.GetClosestNode(unitFightInfo, unitFightInfo.targetNode);
                this.MoveUnit(unitFightInfo, gotoNode);

                return {
                    success: true,
                    actionStruct: new ActionStruct({
                        unitID: unitFightInfo.UnitID(),
                        moveToNode: gotoNode.position,
                    } as IActionStruct),
                } as UnitBehaviorResult;
            }
        }
        else {
            const gotoNode: FightNode = this.GetClosestNode(unitFightInfo, unitFightInfo.targetNode);
            this.MoveUnit(unitFightInfo, gotoNode);
            return {
                success: true,
                actionStruct: new ActionStruct({
                    unitID: unitFightInfo.UnitID(),
                    moveToNode: gotoNode.position,
                } as IActionStruct),
            } as UnitBehaviorResult;
        }
    }

    ResolveActionOnNode(unitFightInfo: UnitFightInfo, targetNode: FightNode): ResolveActionOnNodeResult {
        let returnNode: FightNode = targetNode;

        if (unitFightInfo.unitType() == UnitType.Druid) {
            const neighbourNodes: FightNode[] = this.GetFreeNeighbours(unitFightInfo.currentNode);

            if (neighbourNodes.length > 0) {
                this.AddSummonUnit(unitFightInfo, UnitType.Wolf, neighbourNodes[0]);
                returnNode = neighbourNodes[0];
            }
            else {
                returnNode = null;
            }

            return {
                targetID: -1,
                fightNode: returnNode,
            } as ResolveActionOnNodeResult;
        }

        if (unitFightInfo.unitType() == UnitType.TimeBender) {
            if (targetNode.unit != null) {
                if (this.XOR(!targetNode.unit.isPurple, unitFightInfo.isPurple)) {
                    targetNode.unit.speedBuff = 2;
                }
                else {
                    targetNode.unit.speedBuff = -2;
                }
                targetNode.unit.speedBuffDelay = 4;
            }

            return {
                targetID: -1,
                fightNode: returnNode,
            } as ResolveActionOnNodeResult;
        }

        if (unitFightInfo.unitType() == UnitType.Bard) {
            if (targetNode.unit != null) {
                if (this.XOR(!targetNode.unit.isPurple, unitFightInfo.isPurple)) {
                    targetNode.unit.attackBuff = 3;
                }
                else {
                    targetNode.unit.attackBuff = -3;
                }
                targetNode.unit.attackBuffDelay = 6;
            }

            return {
                targetID: -1,
                fightNode: returnNode,
            } as ResolveActionOnNodeResult;
        }

        if (unitFightInfo.Reviver()) {
            if (targetNode.bodies.length > 0) {
                const revivedUnit: UnitFightInfo = targetNode.bodies[0];
                if (revivedUnit.isPurple == unitFightInfo.isPurple) {
                    const neighbourNodes: FightNode[] = this.GetFreeNeighbours(targetNode);

                    if (neighbourNodes.length > 0) {
                        if (unitFightInfo.unitType() == UnitType.Priest) {
                            this.AddSummonUnit(unitFightInfo, revivedUnit.unitInfo.unitType, neighbourNodes[0], revivedUnit.cooldown + 1);
                        }
                        else if (unitFightInfo.unitType() == UnitType.Necromancer) {
                            this.AddSummonUnit(unitFightInfo, UnitType.Skeleton, neighbourNodes[0]);
                        }

                        const revivedUnitID: number = revivedUnit.UnitID();
                        this.RemoveUnit(revivedUnit);
                        returnNode = neighbourNodes[0];

                        return {
                            targetID: revivedUnitID,
                            fightNode: returnNode,
                        } as ResolveActionOnNodeResult;
                    }
                    else {
                        returnNode = null;
                    }
                }
                else {
                    returnNode = null;
                }
            }
            else {
                returnNode = null;
            }

            return {
                targetID: -1,
                fightNode: returnNode,
            } as ResolveActionOnNodeResult;
        }

        if (unitFightInfo.supports()) {
            if (targetNode.unit != null) {
                if (this.XOR(!targetNode.unit.isPurple, unitFightInfo.isPurple)) {
                    targetNode.unit.currentHealth += Math.floor(unitFightInfo.CurrentDamage() / 10);
                    if (targetNode.unit.currentHealth > targetNode.unit.MaxHealth()) {
                        targetNode.unit.currentHealth = targetNode.unit.MaxHealth();
                    }
                    unitFightInfo.cooldown++;
                    return {
                        targetID: targetNode.unit.UnitID(),
                        fightNode: returnNode,
                    } as ResolveActionOnNodeResult;
                }
            }

            return {
                targetID: -1,
                fightNode: returnNode,
            } as ResolveActionOnNodeResult;
        }

        if (targetNode.unit != null) {
            if (this.XOR(targetNode.unit.isPurple, unitFightInfo.isPurple)) {
                if (targetNode.unit.currentHealth > 0) {
                    const returnID: number = targetNode.unit.UnitID();
                    this.DamageUnit(targetNode.unit, Math.floor(unitFightInfo.CurrentDamage() / 10));

                    return {
                        targetID: returnID,
                        fightNode: returnNode,
                    } as ResolveActionOnNodeResult;
                }
            }
        }

        return {
            targetID: -1,
            fightNode: returnNode,
        } as ResolveActionOnNodeResult;
    }

    AddSummonUnit(unitFightInfo: UnitFightInfo, unitType: UnitType, gotoNode: FightNode, cooldown: number = 0) {
        const newID: number = unitFightInfo.UnitID() * -1 - 1000000 - unitFightInfo.cooldown * 1000000;
        const scriptableUnit: UnitData = getUnitByType(unitType);

        const unitInfo: UnitInfo = {
            unitID: newID,
            unitType: scriptableUnit.unit_type,
            speed: scriptableUnit.speed,
            damage: scriptableUnit.damage,
            health: scriptableUnit.health,
        };

        this.AddUnit(unitFightInfo.isPurple, gotoNode, unitInfo);
        unitFightInfo.cooldown++;
    }

    XOR(x: boolean, y: boolean): boolean {
        return x != y;
    }

    MoveUnit(unitFightInfo: UnitFightInfo, gotoNode: FightNode) {
        unitFightInfo.currentNode.unit = null;
        unitFightInfo.currentNode = gotoNode;
        unitFightInfo.currentNode.unit = unitFightInfo;
    }

    DamageUnit(unit: UnitFightInfo, damage: number) {
        unit.currentHealth -= damage;

        if (unit.currentHealth <= 0) {
            unit.currentNode.bodies.push(unit);
            unit.currentNode.unit = null;
        }
    }

    GetClosestBody(fromUnit: UnitFightInfo): FightNode {
        const targetNodes: FightNode[] = [];
        if (fromUnit.isPurple) {
            for (let i: number = 0; i < this.purpleUnits.length; i++) {
                const unit: UnitFightInfo = this.purpleUnits[i];
                if (unit.currentHealth > 0 || unit.UnitID() == fromUnit.UnitID() || unit.supports()) {
                    continue;
                }
                targetNodes.push(unit.currentNode);
            }
        }
        else {
            for (let i: number = 0; i < this.yellowUnits.length; i++) {
                const unit: UnitFightInfo = this.yellowUnits[i];
                if (unit.currentHealth > 0 || unit.UnitID() == fromUnit.UnitID() || unit.supports()) {
                    continue;
                }
                targetNodes.push(unit.currentNode);
            }
        }

        if (targetNodes.length == 0) {
            return fromUnit.currentNode;
        }

        targetNodes.sort((left, right) => Vector2.compare(left.position, right.position, fromUnit.currentNode.position));
        return targetNodes[0];
    }

    GetClosestAlly(fromUnit: UnitFightInfo): FightNode {
        const targetNodes: FightNode[] = [];
        if (fromUnit.isPurple) {
            for (let i: number = 0; i < this.purpleUnits.length; i++) {
                const unit: UnitFightInfo = this.purpleUnits[i];
                if (unit.currentHealth <= 0 || unit.UnitID() == fromUnit.UnitID() || unit.supports()) {
                    continue;
                }
                targetNodes.push(unit.currentNode);
            }
        }
        else {
            for (let i: number = 0; i < this.yellowUnits.length; i++) {
                const unit: UnitFightInfo = this.yellowUnits[i];
                if (unit.currentHealth <= 0 || unit.UnitID() == fromUnit.UnitID() || unit.supports()) {
                    continue;
                }
                targetNodes.push(unit.currentNode);
            }
        }

        if (targetNodes.length == 0) {
            return fromUnit.currentNode;
        }

        targetNodes.sort((left, right) => Vector2.compare(left.position, right.position, fromUnit.currentNode.position));
        return targetNodes[0];
    }

    GetClosestTarget(fromUnit: UnitFightInfo): FightNode {
        const targetNodes: FightNode[] = [];
        if (!fromUnit.isPurple) {
            for (let i: number = 0; i < this.purpleUnits.length; i++) {
                const unit: UnitFightInfo = this.purpleUnits[i];
                if (unit.currentHealth <= 0) {
                    continue;
                }
                targetNodes.push(unit.currentNode);
            }
        }
        else {
            for (let i: number = 0; i < this.yellowUnits.length; i++) {
                const unit: UnitFightInfo = this.yellowUnits[i];
                if (unit.currentHealth <= 0) {
                    continue;
                }
                targetNodes.push(unit.currentNode);
            }
        }

        if (targetNodes.length == 0) {
            return fromUnit.currentNode;
        }

        targetNodes.sort((left, right) => Vector2.compare(left.position, right.position, fromUnit.currentNode.position));
        return targetNodes[0];
    }

    GetClosestNode(unit: UnitFightInfo, targetNode: FightNode): FightNode {
        const neighbourNodes: FightNode[] = this.GetFreeNeighbours(unit.currentNode, unit.Floats());
        if (neighbourNodes.length > 0) {
            neighbourNodes.sort((left, right) => Vector2.compare(left.position, right.position, targetNode.position));
            return neighbourNodes[0];
        }
        return unit.currentNode;
    }

    GetFurthestNode(unit: UnitFightInfo): FightNode {
        const neighbourNodes: FightNode[] = this.GetFreeNeighbours(unit.currentNode, unit.Floats());
        if (neighbourNodes.length > 0) {
            neighbourNodes.sort((left, right) => Vector2.compare(left.position, right.position, unit.targetNode.position));
            return neighbourNodes[neighbourNodes.length - 1];
        }
        return unit.currentNode;
    }

    GetAreaOfEffectNodes(fromNode: FightNode, searchRange: number): FightNode[] {
        const neighbourNodes: FightNode[] = [];
        if (searchRange == 0) {
            neighbourNodes.push(fromNode);
            return neighbourNodes;
        }
        let xRange: number = 0;
        for (let y: number = -searchRange; y <= searchRange; y++) {
            for (let x: number = -xRange; x <= xRange; x++) {
                const goX: number = fromNode.position.x + x;
                const goY: number = fromNode.position.y + y;
                if (!OutOfBounds(goX, goY)) {
                    if (!this.nodeGrid[goX][goY].blocked) {
                        neighbourNodes.push(this.nodeGrid[goX][goY]);
                    }
                }
            }
            if (y < 0) {
                xRange++;
            }
            else {
                xRange--;
            }
        }
        return neighbourNodes;
    }

    GetFreeNeighbours(fromNode: FightNode, floats: boolean = false): FightNode[] {
        const neighbourNodes: FightNode[] = [];
        for (let x: number = -1; x <= 1; x++) {
            for (let y: number = -1; y <= 1; y++) {
                if (x == 0 && y == 0) {
                    continue;
                }

                const goX: number = fromNode.position.x + x;
                const goY: number = fromNode.position.y + y;

                if (!OutOfBounds(goX, goY) &&
                    this.NodeWalkable(this.nodeGrid[goX][goY], floats)) {
                    neighbourNodes.push(this.nodeGrid[goX][goY]);
                }
            }
        }
        return neighbourNodes;
    }
}
'''
'''--- utils/backend/chainteamtactics/battle/types.ts ---
import { Vector2 } from "../../common/utils";
import { PlayerLoadoutData } from "../helper/types";
import { getUnitByType } from "../helper/utils";

/*
 * main enums
 */

export enum MapType {
    Bridge = 0,
    Temple = 1,
    Volcano = 2,
    Tavern = 3,
}

export enum TileType {
    None = 0,
    Water = 1,
    Lava = 2,
    Earth = 3,
    Marble = 4,
    Grass = 5,
    Stone = 6,
    Wood = 7,
    BlockProp = 8,
    BlockWater = 9,
    BlockMarble = 10,
}

export enum UnitType {
    None = 0,
    Squire = 1,
    Knight = 2,
    Mage = 3,
    Chemist = 4,
    Executioner = 5,
    Marksman = 6,
    Priest = 7,
    Warlock = 8,
    Druid = 9,
    Bard = 10,
    Assassin = 11,
    Elementalist = 12,
    Necromancer = 13,
    Paladin = 14,
    TimeBender = 15,
    Skeleton = 16,
    Wolf = 17,
}

export enum TierType {
    Tier1 = 0,
    Tier2 = 1,
    Tier3 = 2,
    Tier4 = 3,
    None = 4,
}

/*
 * db types
 */

export class UnitData {
    public unit_type: UnitType;
    public unit_tier: number;
    public summon: boolean;
    public supports: boolean;
    public dontRun: boolean;
    public self_cast: boolean;
    public attack_range: number;
    public health: number;
    public damage: number;
    public speed: number;
    public area_of_effect: number;
    public attack_speed: number;
}

export class MapData {
    public map_type: MapType;
    public tile_infos: TileInfo[] = [];
}

export class TileInfo {
    public tile_type: TileType;
    public blocked: boolean;
    public position: Vector2;
}

/*
 * battle types
 */

export class FightNode {
    public position: Vector2;
    public tileType: TileType;
    public blocked: boolean;
    public unit: UnitFightInfo;
    public bodies: UnitFightInfo[];
}

export class UnitInfo {
    public unitID: number;
    public unitType: UnitType;
    public speed: number;
    public damage: number;
    public health: number;
}

export class UnitFightInfo {
    private scriptableUnit: UnitData;
    public currentHealth: number;

    public targetNode: FightNode = null;
    public attackBuff: number = 0;
    public speedBuff: number = 0;
    public turnDelay: number = 0;
    public turnStep: number = 0;

    public justAttacked: boolean = false;
    public attackDelay: number = 0;
    public attackBuffDelay: number = 0;
    public speedBuffDelay: number = 0;

    public attentionDelay: number = 0;
    public deathDelay: number = 0;

    constructor(
        public unitInfo: UnitInfo,
        public isPurple: boolean,
        public currentNode: FightNode,
        public cooldown: number,
    ) {
        this.scriptableUnit = getUnitByType(unitInfo.unitType);
        this.currentHealth = unitInfo.health;
    }

    /*
     * properties
     */

    UnitID(): number {
        return this.unitInfo.unitID;
    }

    Floats(): boolean {
        return this.unitInfo.unitType == UnitType.Warlock;
    }

    Reviver(): boolean {
        return this.unitInfo.unitType == UnitType.Necromancer || this.unitInfo.unitType == UnitType.Priest;
    }

    MaxHealth(): number {
        return this.unitInfo.health;
    }

    CurrentDamage(): number {
        return this.unitInfo.damage + this.attackBuff;
    }

    CurrentSpeed(): number {
        return this.speedBuff > 0 ?
            this.unitInfo.speed * (this.speedBuff + 1) :
            this.unitInfo.speed / (this.speedBuff * -1 + 1);
    }

    /*
     * scriptable data
     */

    unitType(): UnitType {
        return this.scriptableUnit.unit_type;
    }

    selfCast(): boolean {
        return this.scriptableUnit.self_cast;
    }

    supports(): boolean {
        return this.scriptableUnit.supports;
    }

    dontRun(): boolean {
        return this.scriptableUnit.dontRun;
    }

    areaOfEffect(): number {
        return this.scriptableUnit.area_of_effect;
    }

    attackSpeed(): number {
        return this.scriptableUnit.attack_speed;
    }

    attackRange(): number {
        return this.scriptableUnit.attack_range;
    }

    speed(): number {
        return this.scriptableUnit.speed;
    }

    damage(): number {
        return this.scriptableUnit.damage;
    }

    maxHealth(): number {
        return this.scriptableUnit.health;
    }
}

export interface IActionStruct {
    unitID: number;
    moveToNode: Vector2;
    targetNode: Vector2;
    targets: number[];
    damage: number;
}

export class ActionStruct {
    public unitID: number;
    public moveToNode: Vector2;
    public targetNode: Vector2;
    public targets: number[];
    public damage: number;

    constructor();// https://stackoverflow.com/a/12702786
    constructor(actionStruct: IActionStruct);
    constructor(actionStruct?: IActionStruct) {
        this.unitID = actionStruct?.unitID || 0;
        this.moveToNode = actionStruct?.moveToNode || null;
        this.targetNode = actionStruct?.targetNode || null;
        this.targets = actionStruct?.targets || null;
        this.damage = actionStruct?.damage || 0;
    }
}

export class FightStruct {
    public purpleWins: boolean;
    public playerNames: string[];
    public playerRanks: number[];
    public playerLoadouts: PlayerLoadoutData[][];
    public actionStructs: ActionStruct[];
}

export class UnitBehaviorResult {
    public success: boolean;
    public actionStruct: ActionStruct;
}

export class ResolveActionOnNodeResult {
    public targetID: number;
    public fightNode: FightNode;
}

/*interface ISerializable<T> {
    serialize(value: T): Uint8Array;
}

export class ActionStructSerializer implements ISerializable<ActionStruct[]> {
    serialize(value: ActionStruct[]): Uint8Array {
        let buffer: number[] = [];
        let position: number = 0;

        position += write_u16(buffer, position, value.length);

        for (let i: number = 0; i < value.length; i++) {
            const current: ActionStruct = value[i];
            let flags: number = 0;

            if (current.unitID) { flags |= (1 << 0); }
            if (current.moveToNode) { flags |= (1 << 1); }
            if (current.targetNode) { flags |= (1 << 2); }
            if (current.targets) { flags |= (1 << 3); }
            if (current.damage) { flags |= (1 << 4); }

            position += write_u8(buffer, position, flags);

            if ((flags & (1 << 0)) != 0) {
                position += write_u64(buffer, position, current.unitID);
            }

            if ((flags & (1 << 1)) != 0) {
                position += write_u8(buffer, position, current.moveToNode.x);
                position += write_u8(buffer, position, current.moveToNode.y);
            }

            if ((flags & (1 << 2)) != 0) {
                position += write_u8(buffer, position, current.targetNode.x);
                position += write_u8(buffer, position, current.targetNode.y);
            }

            if ((flags & (1 << 3)) != 0) {
                position += write_u8(buffer, position, current.targets.length);
                for (let j: number = 0; j < current.targets.length; j++) {
                    position += write_u64(buffer, position, current.targets[j]);
                }
            }

            if ((flags & (1 << 4)) != 0) {
                position += write_u16(buffer, position, current.damage);
            }
        }

        return new Uint8Array(buffer);
    }
}*/
'''
'''--- utils/backend/chainteamtactics/battle/utils.ts ---
import { mapHeight, mapWidth } from "./core";

export function OutOfBounds(posX: number, posY: number): boolean {
    return posX < 0 || posY < 0 || posX >= mapWidth || posY >= mapHeight;
}

// export function write_data(buffer: number[], offset: number, value: number): number {
//     let pos: number = offset;
//     let val: number = value;
//     const sign: boolean = val < 0;
//     buffer[pos++] = sign ? 1 : 0;
//     if (sign) {
//         val *= -1;
//     }
//     do {
//         let current = (val & 0xFF);
//         if (val >= 0x80) {
//             current |= 0x80;
//         }
//         buffer[pos++] = current;
//         val >>= 7;
//     } while (val > 0);
//     return pos - offset;
// }

/*export function write_u8(buffer: number[], offset: number, value: number): number {
    buffer[offset + 0] = ((value >> 0) & 0xFF);
    return 1;
}

export function write_u16(buffer: number[], offset: number, value: number): number {
    buffer[offset + 0] = ((value >> 0) & 0xFF);
    buffer[offset + 1] = ((value >> 8) & 0xFF);
    return 2;
}

// export function write_u32(buffer: number[], offset: number, value: number): number {
//     buffer[offset + 0] = ((value >> 0) & 0xFF);
//     buffer[offset + 1] = ((value >> 8) & 0xFF);
//     buffer[offset + 2] = ((value >> 16) & 0xFF);
//     buffer[offset + 3] = ((value >> 24) & 0xFF);
//     return 4;
// }

export function write_u64(buffer: number[], offset: number, value: number): number {
    buffer[offset + 0] = ((value >> 0) & 0xFF);
    buffer[offset + 1] = ((value >> 8) & 0xFF);
    buffer[offset + 2] = ((value >> 16) & 0xFF);
    buffer[offset + 3] = ((value >> 24) & 0xFF);
    buffer[offset + 4] = ((value >> 32) & 0xFF);
    buffer[offset + 5] = ((value >> 40) & 0xFF);
    buffer[offset + 6] = ((value >> 48) & 0xFF);
    buffer[offset + 7] = ((value >> 56) & 0xFF);
    return 8;
}*/
'''
'''--- utils/backend/chainteamtactics/helper/basic_game.ts ---
import { APP_CONTRACT, viewFunction } from "../../common/blockchain";
import { getChainTeamTacticsDb, isLockTaken, logChainTeamTacticsErrorDb } from "../../common/mongo-helper";
import { assert, Vector2 } from "../../common/utils";
import { mapHeightOffset, mapWidthOffset } from "../battle/core";
import { MapData, TileType, UnitData, UnitType } from "../battle/types";
import { OutOfBounds } from "../battle/utils";
import { get_units_by_ids } from "./data_loader";
import { EndCreateRoomRequest, LockType, PlayerData, PlayerLoadoutData, RoomData, UnitScaledToken, UnitToken } from "./types";
import { getUnitByType, MaxUnitsPerAccount, MaxUnitsPerTeam } from "./utils";

export let CACHED_UNITBASE_DATA: UnitData[] = [];
export let CACHED_MAPBASE_DATA: MapData[] = [];

export async function getUnitBaseData(): Promise<UnitData[]> {
    if (CACHED_UNITBASE_DATA.length != 0) {
        return CACHED_UNITBASE_DATA;
    }
    const db = await getChainTeamTacticsDb();
    const units = await db.collection<UnitData>("units").find({}, { projection: { _id: 0 } }).toArray();
    CACHED_UNITBASE_DATA = units;
    return units;
}

export async function getMapBaseData(): Promise<MapData[]> {
    if (CACHED_MAPBASE_DATA.length != 0) {
        return CACHED_MAPBASE_DATA;
    }
    const db = await getChainTeamTacticsDb();
    const maps = await db.collection<MapData>("maps").find({}, { projection: { _id: 0 } }).toArray();
    CACHED_MAPBASE_DATA = maps;
    return maps;
}

export async function getAccountData(account_id: string) {
    const accountdata = await viewFunction(
        APP_CONTRACT,
        "ctt_get_player_data",
        { account_id }
    );

    const ranking = await getPlayerWithPosition(account_id);
    accountdata.playerdata.rating = ranking?.rank || 800;
    accountdata.playerdata.matches_lost = ranking?.lost || 0;
    accountdata.playerdata.matches_won = ranking?.won || 0;

    return accountdata;
}

export async function getPlayerData(rq: EndCreateRoomRequest, mapIndex: number, isPurple: boolean, ignore_maxunits: boolean = false, ignore_loadout: boolean = false): Promise<PlayerData> {
    const playerdata = (await getAccountData(rq.account_id)).playerdata;
    const unit_ids = playerdata.unit_ids as string[];
    let unitsdata: UnitScaledToken[] = [];

    // cache all base data
    const mapDatas = await getMapBaseData();
    const unitData = await getUnitBaseData();

    assert(ignore_maxunits || unit_ids.length < MaxUnitsPerAccount, `more than ${MaxUnitsPerAccount} units not supported`);
    assert(ignore_loadout || rq.player_loadout.length == MaxUnitsPerTeam, `you can't place other than ${MaxUnitsPerTeam} units`);

    if (rq.player_loadout.length != 0) {
        const token_ids = rq.player_loadout.map(x => x.token_id);
        const positions = rq.player_loadout.map(x => x.position);

        // check for duplicated unit token ids
        const duplicate_token_ids = token_ids.filter((token_id, index) => token_ids.indexOf(token_id) != index);
        assert(duplicate_token_ids.length == 0, "duplicated units not allowed");

        // check units ownership
        token_ids.forEach(token_id => {
            assert(unit_ids.includes(token_id), "you don't own this unit");
        });

        // fetch all UnitTokens from blockchain
        unitsdata = await get_units_by_ids(token_ids);

        // check for units being sold
        unitsdata.forEach(unit_token => {
            assert(!unit_token.price || unit_token.price == "0" , "you can't place units on sale");
        });

        // check support units count
        const maxSupportUnits = MaxUnitsPerTeam / 2;
        let supportUnits: number = 0;

        unitsdata.forEach(unit_token => {
            const unit_data = unitData.find(x => x.unit_type == unit_token.unit_type);
            if (unit_data.supports) {
                supportUnits++;
                assert(supportUnits <= maxSupportUnits, "too many support units");
            }
        });

        // check if all unit positions are in bounds
        // and if they are into the correct side of the map
        for (let i: number = 0; i < positions.length; i++) {
            const position = positions[i];
            assert(!OutOfBounds(position.x, position.y), `unit #${token_ids[i]} is out of bounds @ ${position.x}x${position.y}`);
            assert(!isPurple ? position.x <= mapWidthOffset : position.x >= mapWidthOffset, `unit #${token_ids[i]} were placed at the wrong side of the map`);
        }

        // check if all units can be placed in its positions
        const mapData = mapDatas[mapIndex];
        const unitTileInfos = mapData.tile_infos.filter(tileInfo => {
            const op = {
                x: tileInfo.position.x + mapWidthOffset,
                y: tileInfo.position.y + mapHeightOffset,
            } as Vector2;
            return positions.findIndex(cp => cp.x == op.x && cp.y == op.y) != -1;
        });

        for (let i: number = 0; i < unitTileInfos.length; i++) {
            const current_tile = unitTileInfos[i];
            const token_id = token_ids[i];

            if (current_tile.blocked || current_tile.tile_type == TileType.Lava) {
                assert(!current_tile.blocked, `unit #${token_id} can't be placed in blocked tile @ ${current_tile.position.x + mapWidthOffset}x${current_tile.position.y + mapHeightOffset}`);
                const udata = unitsdata.find(x => x.token_id == token_id);
                assert(udata.unit_type == UnitType.Warlock, `unit #${token_id} can't be placed in lava tile @ ${current_tile.position.x + mapWidthOffset}x${current_tile.position.y + mapHeightOffset}`);
            }
        }
    }

    const pdata: PlayerData = {
        account_id: rq.account_id,
        matches_won: playerdata.matches_won,
        matches_lost: playerdata.matches_lost,
        rating: playerdata.rating,
        player_loadout: rq.player_loadout.map<PlayerLoadoutData>(current => {
            const x = unitsdata.find(x => x.token_id == current.token_id);
            return {
                token_id: current.token_id,
                position: current.position,
                unit_type: x.unit_type,
                health: x.health,
                damage: x.damage,
                speed: x.speed,
            } as PlayerLoadoutData;
        })
    };

    return pdata;
}

// leaderboard

export async function updateLeaderboard(account_id: string, wonlost: number[], roomData: RoomData): Promise<void> {
    const db = await getChainTeamTacticsDb();
    const filter = {
        account_id: account_id,
    };
    const index = roomData.playerNames.indexOf(account_id);
    const update = {
        $set: {
            won: wonlost[0],
            lost: wonlost[1],
            rank: roomData.playerRanks[index],
            loadout: roomData.playerLoadouts[index].map(x => {
                const data = {
                    token_id: x.token_id,
                    unit_type: x.unit_type,
                };
                return data;
            }),
        }
    };
    const options = { upsert: true };
    await db.collection("leaderboard").updateOne(filter, update, options);
}

export async function getLeaderboard(results: number = 100): Promise<any[]> {
    const db = await getChainTeamTacticsDb();
    const entries = await db.collection("leaderboard").find({})
        .sort({
            rank: -1,
        })
        .project({
            _id: 0,
        })
        .limit(results)
        .toArray();
    return entries;
}

export async function getPlayerWithPosition(account_id: string): Promise<any> {
    const db = await getChainTeamTacticsDb();
    const playerData = await db.collection("leaderboard").findOne(
        { account_id: account_id },
        {
            projection: {
                _id: 0,
            }
        });

    if (playerData) {
        const index = await db.collection("leaderboard").find({})
            .sort({
                rank: -1,
            })
            .toArray()
            .then(x => x.findIndex(y => y.account_id == playerData.account_id));
        playerData["position"] = index + 1;
        return playerData;
    }

    return null;
}

// account locking

export async function lockAccount(account_id: string, lock_type: LockType): Promise<boolean> {
    const db = await getChainTeamTacticsDb();
    const filter = {
        account_id: account_id,
        lock_type: lock_type,
    };
    const update = {
        $set: {
            timestamp: new Date(),
        }
    };
    const options = { upsert: true };
    const result = await db.collection("account_lock").updateOne(filter, update, options);
    const lockTaken = isLockTaken(result);

    return lockTaken;
}

export async function unlockAccount(account_id: string, lock_type: LockType): Promise<void> {
    const db = await getChainTeamTacticsDb();
    const filter = {
        account_id: account_id,
        lock_type: lock_type,
    };
    await db.collection("account_lock").deleteOne(filter);
}
'''
'''--- utils/backend/chainteamtactics/helper/data_loader.ts ---
import BN from "bn.js";
import { APP_CONTRACT, changeFunctionWithoutAttachment, MANAGER_ACCOUNT, MANAGER_KEY, viewFunction } from "../../common/blockchain";
import { UnitData } from "../battle/types";
import { getUnitBaseData } from "./basic_game";
import { UnitScaledToken, UnitToken } from "./types";
import { MaxUnitsPerAccount } from "./utils";

const MAX_RESULTS_PER_CALL: number = 18;
/*
 * MAX_RESULTS_PER_CALL /  GAS
 *          18          / *pending*
 */

export async function get_units_by_ids(unit_ids: string[]): Promise<UnitScaledToken[]> {
    if (unit_ids.length > MaxUnitsPerAccount) {
        throw `more than ${MaxUnitsPerAccount} ids not supported`;
    }

    const base_unit_data = await getUnitBaseData();
    const max_results = Math.min(unit_ids.length, MAX_RESULTS_PER_CALL);
    let count = Math.ceil(unit_ids.length / max_results);
    let unit_tokens: UnitToken[] = [];

    if ((count % 2) != 0) {
        count++;
    }

    for (let i = 0; i < count; i++) {
        const startAt = max_results * i;
        const endAt = Math.min(startAt + max_results, unit_ids.length);

        if (startAt >= endAt) {
            break;
        }

        const current_slice = unit_ids.slice(startAt, endAt);
        if (current_slice.length != 0) {
            const current_units = await viewFunction(
                APP_CONTRACT,
                "ctt_get_units_by_ids",
                { token_ids: current_slice }
            );
            // const current_units = (await changeFunctionWithoutAttachment(
            //     MANAGER_ACCOUNT,
            //     MANAGER_KEY,
            //     APP_CONTRACT,
            //     "ctt_get_units_by_ids",
            //     { token_ids: current_slice },
            //     new BN('300000000000000')// 300
            // )).data;
            unit_tokens = unit_tokens.concat(current_units);
        }
    }
    const unit_scaled_tokens: UnitScaledToken[] = [];
    unit_tokens.forEach(token => {

        const test = new UnitScaledToken();
        test.token_id = token.token_id;
        test.unit_type = token.unit_type;
        test.owner = token.owner;
        test.price = token.price;

        const base_unit = base_unit_data?.filter(x => x.unit_type == token.unit_type)
        if (base_unit) {
            test.damage = Math.ceil(base_unit[0].damage * token.damage_mod / 100);
            test.health = Math.ceil(base_unit[0].health * token.health_mod / 100);
            test.speed = Math.ceil(base_unit[0].speed * token.speed_mod / 100);
            test.power = Math.floor((token.damage_mod + token.health_mod + token.speed_mod) / 3);
        }
        unit_scaled_tokens.push(test);
    });

    return unit_scaled_tokens;
}
'''
'''--- utils/backend/chainteamtactics/helper/types.ts ---
import { FunctionRequest } from "../../common/types";
import { Vector2 } from "../../common/utils";
import { FightStruct, MapData, UnitData } from "../battle/types";

export type PlayerData = {
    account_id: string,
    matches_won: number,
    matches_lost: number,
    rating: number,
    player_loadout: PlayerLoadoutData[],
}

export class PlayerLoadoutData {
    public token_id: string;
    public unit_type: number;
    public health: number;
    public damage: number;
    public speed: number;
    public position: Vector2;
}

export class UnitToken {
    public token_id: string;
    public unit_type: number;
    public health_mod: number;
    public damage_mod: number;
    public speed_mod: number;
    public owner: string;
    public price: string;
}

export class UnitScaledToken {
    public token_id: string;
    public unit_type: number;
    public health: number;
    public damage: number;
    public speed: number;
    public power: number;
    public owner: string;
    public price: string;
}

export class RoomData {
    constructor(
        public account_id: string,
        public mapIndex: number,
        public betType: RoomBetTierTypes,
        public playerNames: string[] = [],
        public playerRanks: number[] = [],
        public playerRoundWins: number[] = [],
        public playerFightWins: number[] = [],// only stores the room creator won/lost counts
        public playerLoadouts: PlayerLoadoutData[][] = [],
        public last_activity: number = 0,
        // internal usage only
        public prev_round_winner: string = "",// who win previous round
        public prev_round_loser: string = "",// who lose previous round
        public prev_round_id: string = "",// who played previous round
        public notify_id: string = "",// who will be notified about last fight
        public round_nr: number = 0,// which player loadout will be shown at get-room-info
    ) { }
}

export enum RoomBetTierTypes {
    Tier1 = 0,// 5 PXT
    Tier2 = 1,// 50 PXT
    Tier3 = 3,// 500 PXT
}

export enum RoomNotificationType {
    PendingCreate = 0,
    PendingJoin = 1,
    RoundFinish = 2,
    FightFinish = 3,
    ClosedRoom = 4,
}

export class RoomNotificationData {
    public notify_type: RoomNotificationType;
    public room_id: string;
    public map_index: number;// PendingCreate/PendingJoin
    public betType: RoomBetTierTypes;
    public loadout: PlayerLoadoutData[];// PendingJoin
    public target_ids: string[] = [];// player who'll be notified about
    public winner_id: string;// player who won previous round
    public round_id: string;// player who played previous round
    public fightStruct: FightStruct;// entire replay of the previous round
    public hasFightStruct: boolean;// just a flag to tell client when replay is included
    public rounds: number;
}

export type EditUnitRequest = FunctionRequest & {
    password: string,
    unitdata: UnitData & {
        unit_name: string,
    }
}

export type EditMapRequest = FunctionRequest & {
    password: string,
    mapdata: MapData & {
        map_name: string,
    }
}

export type OfferUnitRequest = FunctionRequest & {
    unitdata: {
        token_id: string,
        price: string,
    }
}

export type CancelOfferUnitRequest = FunctionRequest & {
    unitdata: {
        token_id: string,
    }
}

export type BuyUnitRequest = FunctionRequest & {
    unitdata: {
        token_id: string,
    }
}

export type AdvancedSearchRequest = FunctionRequest & {
    unitdata: {
        unit_type: number,
        minStat: number,
    }
}

export type BeginCreateRoomRequest = FunctionRequest & {
    publickey: string,
    bet_type: number,
}

export type EndCreateRoomRequest = FunctionRequest & {
    publickey: string,
    player_loadout: {
        token_id: string,
        position: Vector2,
    }[]
}

export type JoinRoomRequest = FunctionRequest & {
    publickey: string,
    leader_id: string,
}

export type GetAllRoomsRequest = FunctionRequest & {
    publickey: string,
}

export type ChallengeRequest = FunctionRequest & {
    publickey: string,
    leader_id: string,
    player_loadout: {
        token_id: string,
        position: Vector2,
    }[]
}

export type NotifyRoomRequest = FunctionRequest & {
    publickey: string,
}

export enum LockType {
    Battle = 0,
}
'''
'''--- utils/backend/chainteamtactics/helper/utils.ts ---
import BN from "bn.js";
import { NextApiResponse } from "next";
import { APP_CONTRACT, changeFunctionWithoutAttachment, checkFunctionResponse, MANAGER_ACCOUNT, MANAGER_KEY } from "../../common/blockchain";
import { getChainTeamTacticsDb, logChainTeamTacticsErrorDb } from "../../common/mongo-helper";
import { getRandomNumber, is_testnet_env } from "../../common/utils";
import { FightStruct, MapData, MapType, UnitData } from "../battle/types";
import { CACHED_MAPBASE_DATA, CACHED_UNITBASE_DATA, getAccountData, updateLeaderboard } from "./basic_game";
import { PlayerLoadoutData, RoomData, RoomNotificationData, RoomNotificationType } from "./types";

export const MaxUnitsPerAccount: number = 36;
export const MaxUnitsPerTeam: number = 6;
export const MaxJoinedRooms: number = 5;

export function getUnitByType(unitType: number): UnitData {
    return CACHED_UNITBASE_DATA.find(x => x.unit_type == unitType);
}

export function getMapByType(mapType: number): MapData {
    return CACHED_MAPBASE_DATA.find(x => x.map_type == mapType);
}

export function get_random_map(): number {
    // TODO: edit here when more maps get added
    // PS. 'Tavern' is exclusive for the game menu
    const playableMaps: MapType[] = [
        MapType.Bridge,
        MapType.Temple,
        MapType.Volcano,
    ];
    return playableMaps[getRandomNumber(0, playableMaps.length)];
}

// rooms

export async function createOrUpdateRoom(roomData: RoomData): Promise<void> {
    const db = await getChainTeamTacticsDb();
    await db.collection("rooms").updateOne(
        { account_id: roomData.account_id },
        { $set: roomData },
        { upsert: true });
}

async function deleteRoom(roomData: RoomData): Promise<void> {
    const db = await getChainTeamTacticsDb();
    await db.collection("rooms").deleteOne({ account_id: roomData.account_id });
}

export async function getAllJoinedRooms(account_id: string): Promise<RoomData[]> {
    const db = await getChainTeamTacticsDb();
    const roomData = await db.collection("rooms").find<RoomData>(
        {
            account_id: {
                $ne: account_id
            },
            playerNames: account_id
        },
        { projection: { _id: 0 } }
    ).toArray();
    return roomData;
}

export async function getAllInactiveRooms(account_id: string): Promise<RoomData[]> {
    const db = await getChainTeamTacticsDb();
    const timeOffset = !is_testnet_env() ? 86400000 : 3600000;
    const roomData = await db.collection("rooms").find<RoomData>(
        {
            playerNames: account_id,
            last_activity: {
                $lte: Date.now() - timeOffset,
                $gt: 0,// filter brandnew rooms
            }
        },
        { projection: { _id: 0 } }
    ).toArray();
    return roomData;
}

export async function getRoomByLeader(account_id: string): Promise<RoomData | null> {
    const db = await getChainTeamTacticsDb();
    const roomData = await db.collection("rooms").findOne<RoomData>(
        { account_id: account_id },
        { projection: { _id: 0 } }
    );
    return roomData || null;
}

export async function getOpenRooms(account_id: string, min_rating: number, results: number = 50): Promise<RoomData[]> {
    const db = await getChainTeamTacticsDb();
    const rating_filter = !is_testnet_env() ? min_rating - 50 : 0;
    const entries = await db.collection("rooms").aggregate([
        {
            $project: {
                _id: 0,
                account_id: 1,
                betType: 1,
                playerNames: 1,
                playerRanks: 1,
                playerFightWins: 1,
                playerLoadouts: 1,
                playersCount: { $size: "$playerNames" },
            }
        },
        {
            $match: {
                // only index rooms with 1 player (the creator itself)
                // when player start creating a room, there are 0 players in it
                // when the player finish creating a room, there are 1 players in it
                // when another player join a room, there are 2 players
                // so, only rooms with 1 player can be shown
                playersCount: 1,
                // filter all rooms on which the rank are too low for the player
                "playerRanks.0": {
                    $gte: rating_filter
                },
                // filter the room the player are currently leading
                account_id: {
                    $ne: account_id,
                },
            }
        },
        {
            $sort: {
                "playerRanks.0": -1
            }
        },
        {
            $limit: results
        }
    ]).toArray();
    return entries as RoomData[];
}

// notifications

export async function createOrUpdateRoomNotification(notify_type: RoomNotificationType, roomData: RoomData, fightStruct: FightStruct | null = null): Promise<void> {
    const db = await getChainTeamTacticsDb();
    const notify_players: string[] = [];
    const player_loadout: PlayerLoadoutData[] = [];
    let new_room_id: string = roomData.account_id;
    // when a fight finished or the room gets closed
    // we must change its name to avoid conflics later
    // since these notifications can live undefinetely
    // and will get overriden if the player creates a new room
    if (notify_type == RoomNotificationType.FightFinish ||
        notify_type == RoomNotificationType.ClosedRoom) {
        new_room_id = `${new_room_id}.${Date.now()}`;
    }
    // notify the player who started creating a room
    // in case something goes wrong (game crashes, page refresh...)
    if (notify_type == RoomNotificationType.PendingCreate) {
        notify_players.push(roomData.account_id);
    }
    // notify the player who joined the room with leader's loadout
    // in case something goes wrong (game crashes, page refresh...)
    else if (notify_type == RoomNotificationType.PendingJoin) {
        notify_players.push(roomData.playerNames[1]);
        roomData.playerLoadouts[0].map(x => x).forEach(x => player_loadout.push(x));
    }
    // notify the other player about next round
    else if (notify_type == RoomNotificationType.RoundFinish) {
        notify_players.push(roomData.notify_id);
    }
    // when fight is over or room gets closed, both players should be notified
    else {
        roomData.playerNames.forEach(x => notify_players.push(x));
    }
    const filter = {
        room_id: roomData.account_id,
    };
    const update = {
        $set: {
            notify_type: notify_type,
            room_id: new_room_id,
            map_index: roomData.mapIndex,
            betType: roomData.betType,
            loadout: player_loadout,
            target_ids: notify_players,
            winner_id: roomData.prev_round_winner,
            round_id: roomData.prev_round_id,
            fightStruct: fightStruct,
            hasFightStruct: fightStruct != null,
            rounds: roomData.round_nr,
        } as RoomNotificationData
    };
    const options = { upsert: true };
    await db.collection("notifications").updateOne(filter, update, options);
}

export async function deleteNotification(notify_type: RoomNotificationType, roomData: RoomData): Promise<void> {
    const db = await getChainTeamTacticsDb();
    const filter = {
        notify_type: notify_type,
        room_id: roomData.account_id,
    };
    await db.collection("notifications").deleteOne(filter);
}

export async function getRoomNotification(account_id: string): Promise<RoomNotificationData> {
    const db = await getChainTeamTacticsDb();
    const notification = await db.collection("notifications").findOne<RoomNotificationData>(
        { target_ids: account_id },
        { projection: { _id: 0 } }
    );
    return notification;
}

export async function getAllNotifications(account_id: string): Promise<RoomNotificationData[]> {
    const db = await getChainTeamTacticsDb();

    // check for all inactive rooms the player are into
    // so this will create a ClosedRoom notification
    const allInactiveRooms = await getAllInactiveRooms(account_id);

    for (let i: number = 0; i < allInactiveRooms.length; i++) {
        const current = allInactiveRooms[i];

        // 1- refund both players
        // 2- create a ClosedRoom notification for both players
        // 3- delete the room
        if (!await deleteRoomAndRefundPlayers(account_id, current)) {
            break;
        }
    }

    // and then we grab all notifications that targets the player
    const allNotifications = await db.collection("notifications").find<RoomNotificationData>(
        { target_ids: account_id },
        { projection: { _id: 0 } }
    ).toArray();

    // FightFinish and ClosedRoom notifications are "self-destructive"
    for (let i: number = 0; i < allNotifications.length; i++) {
        const current = allNotifications[i];

        if (current.notify_type == RoomNotificationType.FightFinish ||
            current.notify_type == RoomNotificationType.ClosedRoom) {

            if (current.target_ids.length != 2) {
                // once there's only one player left
                // notification should be deleted
                await db.collection("notifications").deleteOne({ room_id: current.room_id });
            }
            else {
                // if there's still both player names on it
                // remove current player and save
                const index = current.target_ids.indexOf(account_id);
                current.target_ids.splice(index, 1);
                await db.collection("notifications").updateOne(
                    { room_id: current.room_id },
                    { $set: current }
                );
            }

            // for the player who played the round that finished the fight
            // we remove the fightStruct so they won't have to rewatch it
            if (current.notify_type == RoomNotificationType.FightFinish &&
                current.round_id == account_id) {
                current.hasFightStruct = false;
                current.fightStruct = null;
            }

            // remove the anti-conflict suffix
            const lastDotIndex = current.room_id.lastIndexOf(".");
            const cleanRoomId = current.room_id.substring(0, lastDotIndex);
            current.room_id = cleanRoomId;
        }
    }
    return allNotifications;
}

export async function deleteRoomAndFinishFight(roomData: RoomData, winnerIndex: number, loserIndex: number, fromSimulate: boolean, res: NextApiResponse<any>): Promise<boolean> {
    // set winner/loser names for the notifications
    roomData.prev_round_winner = roomData.playerNames[winnerIndex];
    roomData.prev_round_loser = roomData.playerNames[loserIndex];

    // grab both players account data
    const winnerAccountData = await getAccountData(roomData.prev_round_winner);
    const winnerPlayerData = winnerAccountData.playerdata;

    const loserAccountData = await getAccountData(roomData.prev_round_loser);
    const loserPlayerData = loserAccountData.playerdata;

    // update players rank with most recent value
    // because players can be into multiple rooms
    // and this might mess up with rank changes
    roomData.playerRanks[winnerIndex] = winnerPlayerData.rating;
    roomData.playerRanks[loserIndex] = loserPlayerData.rating;

    // TODO: change this later with some fancy rank calculations
    const prev_winner_rating = roomData.playerRanks[winnerIndex];
    roomData.playerRanks[winnerIndex] =
        Math.min(roomData.playerRanks[winnerIndex] + 10, 0xFFFF);

    const prev_loser_rating = roomData.playerRanks[loserIndex];
    roomData.playerRanks[loserIndex] =
        Math.max(roomData.playerRanks[loserIndex] - 10, 400);

    const contract_args = {
        winner_id: roomData.prev_round_winner,
        winner_rating_change: roomData.playerRanks[winnerIndex] - prev_winner_rating,
        loser_id: roomData.prev_round_loser,
        loser_rating_change: roomData.playerRanks[loserIndex] - prev_loser_rating,
        bet_type: roomData.betType,
    };

    //#TODO enable after beta
    // const response = await changeFunctionWithoutAttachment(
    //     MANAGER_ACCOUNT,
    //     MANAGER_KEY,
    //     APP_CONTRACT,
    //     "ctt_save_fight_result",
    //     { result: contract_args },
    //     new BN('20000000000000')// 20
    // );

    // if (!checkFunctionResponse(response)) {
    //     res.status(200).json({ success: false, error: response.error.type });
    //     return false;
    // }

    if (fromSimulate) {
        await updateLeaderboard(roomData.prev_round_winner, [winnerPlayerData.matches_won + 1, winnerPlayerData.matches_lost], roomData);
        await updateLeaderboard(roomData.prev_round_loser, [loserPlayerData.matches_won, loserPlayerData.matches_lost + 1], roomData);
    }

    await deleteRoom(roomData);
    return true;
}

async function deleteRoomAndRefundPlayers(account_id: string, roomData: RoomData): Promise<boolean> {
    //#TODO enable after beta
    // const response = await changeFunctionWithoutAttachment(
    //     MANAGER_ACCOUNT,
    //     MANAGER_KEY,
    //     APP_CONTRACT,
    //     "ctt_refund_room_players",
    //     {
    //         account_ids: roomData.playerNames,
    //         bet_type: roomData.betType
    //     },
    //     new BN('30000000000000')// 30
    // );

    // if (!checkFunctionResponse(response)) {
    //     await logChainTeamTacticsErrorDb(response.error.type, account_id, "deleteRoomAndRefundPlayers");
    //     return false;
    // }

    await createOrUpdateRoomNotification(RoomNotificationType.ClosedRoom, roomData);
    await deleteRoom(roomData);
    return true;
}
'''
'''--- utils/backend/common/blockchain.ts ---

import * as nearApi from 'near-api-js';
import getConfig from './server-config';
import { serialize } from 'near-api-js/lib/utils/serialize';
import { functionCall, SCHEMA } from 'near-api-js/lib/transaction';
import axios from 'axios';
import { DEFAULT_FUNCTION_CALL_GAS, WalletConnection } from 'near-api-js';
import BN from 'bn.js';
import { TransactionManager } from "near-transaction-manager";

const config = getConfig();
export const APP_CONTRACT = config.CONTRACT_ID;
export const MANAGER_ACCOUNT = process.env.MANAGER_ACCOUNT || "messages.testnet";
export const MANAGER_KEYS_STRING = process.env.MANAGER_KEYS;
export const MANAGER_KEY = MANAGER_KEYS_STRING.split(',')[0];

export function _onlyPxDapps(account_id: string, password: string | null = null): void {
    const accounts: string[] = [
        "pixeltoken.near",
        "messages.testnet",
        "pxt-manager.near",
        "bubruno.near",
        "bubruno.testnet",
        "pixeltoken.sputnik-dao.near",
        "messagebox.near"
    ];
    if (!accounts.includes(account_id)) {
        throw "Account not allowed to call this method"
    }
    const passwords: string[] = ["47kQydOibGIS8Juh"];
    if (password && !passwords.includes(password)) {
        throw "Account not allowed to call this method"
    }
}

export async function getAccount(account_id: string, private_key: string) {

    if (account_id == "pxt-manager.near") {
        const manager_keys = MANAGER_KEYS_STRING.split(',');
        const key_index = Math.floor(Math.random() * manager_keys.length);
        private_key = manager_keys[key_index];
    }

    const keyPair = nearApi.utils.KeyPair.fromString(private_key);
    const keyStore = new nearApi.keyStores.InMemoryKeyStore();
    keyStore.setKey("default", account_id, keyPair);
    const near = await nearApi.connect({
        networkId: "default",
        deps: { keyStore },
        masterAccount: account_id,
        nodeUrl: config.nodeUrl,
        headers: {}
    });

    return await near.account(account_id);
}

export function signMessage(input: string, private_key: string) {
    const keyPair = nearApi.utils.KeyPair.fromString(private_key);
    return keyPair.sign(new TextEncoder().encode(input));
}
//anonymous account
export async function getAnonAccount() {
    const keyStore = new nearApi.keyStores.InMemoryKeyStore();
    const near = await nearApi.connect({
        networkId: "default",
        deps: { keyStore },
        nodeUrl: config.nodeUrl,
        walletUrl: config.walletUrl,
        helperUrl: config.helperUrl,
        headers: {}
    });

    return await near.account("");
}

export function getSigningTransactionsWalletUrl(transactions: any[], referrer: string, callbackUrl?: string, meta: string = null) {
    const newUrl = new URL('sign', config.walletUrl);

    newUrl.searchParams.set('transactions', transactions
        .map(transaction => serialize(SCHEMA, transaction))
        .map(serialized => Buffer.from(serialized).toString('base64'))
        .join(','));

    newUrl.searchParams.set('referrer', "Pixelpets Dapp: " + referrer);
    //TODO close window/tab automatically when no callbackurl is set?
    if (callbackUrl) newUrl.searchParams.set('callbackUrl', callbackUrl);
    //if (meta) newUrl.searchParams.set('meta', meta);
    return newUrl.toString();
}

export async function viewFunction(contract, method, args) {
    const account = await getAnonAccount();
    return await account.viewFunction(contract, method, args);
}

export async function changeFunctionWithoutAttachment(account_id, privatekey, contract_id, method, args, gas = DEFAULT_FUNCTION_CALL_GAS) {
    try {
        const nearAccount = await getAccount(account_id, privatekey);
        const response = await nearAccount.functionCall({ contractId: contract_id, methodName: method, args: args, gas, attachedDeposit: new BN("0") });

        if (response.status["SuccessValue"]) {
            return { success: true, data: JSON.parse(Buffer.from(response.status["SuccessValue"], 'base64').toString()) };
        }

        return { success: true, data: undefined };
    }
    catch (err) {
        return { success: false, error: err };
    }
}

export async function changeFunctionWithAttachment(account_id, privatekey, contract_id, method, args, attachedDeposit, callbackUrl, gas = DEFAULT_FUNCTION_CALL_GAS) {
    try {
        const nearAccount = await getAccount(account_id, privatekey);

        const transactionManager = TransactionManager.fromAccount(nearAccount);
        const transaction = await transactionManager.createTransaction({
            receiverId: contract_id,
            actions: [functionCall(method, args || {}, gas, attachedDeposit)],
        });
        const walletUrl = getSigningTransactionsWalletUrl([transaction], "Pixelpets Dapp", callbackUrl);

        return { success: true, data: walletUrl };
    }
    catch (err) {
        return { success: false, error: err };
    }
}

export async function isAccessKeyValid(account_id, publickey) {
    const response = await axios.post(config.nodeUrl, {
        jsonrpc: '2.0',
        id: 'dontcare',
        method: 'query',
        params: {
            request_type: 'view_access_key',
            finality: 'final',
            account_id: account_id,
            public_key: publickey
        }
    });

    if (response.data.result && response.data.result.error || response.data.error) {
        return { valid: false, allowance: 0, fullAccess: false };
    }
    if (response.data.result.permission == "FullAccess") {
        return { valid: true, allowance: 20000000000000000000000000, fullAccess: true };
    }
    return { valid: true, allowance: response.data.result.permission.FunctionCall.allowance, fullAccess: false };
}

export function checkFunctionResponse(response: any) {
    if (!response.success) {
        if (!HandledErrorTypes.includes(response.error.type)) {
            throw response.error;
        }
        return false;
    }
    return true;
}

const HandledErrorTypes: string[] = ["LackBalanceForState", "NotEnoughAllowance"]
'''
'''--- utils/backend/common/mongo-helper.ts ---
import clientPromise from "./mongodbv2";
import { is_testnet_env } from "./utils";

const pp_mongodb = process.env.PP_MONGO_DB || "pixelpets_testnet";
const ch_mongodb = process.env.CH_MONGO_DB || "cryptohero_testnet";
const ctt_mongodb = process.env.CTT_MONGO_DB || "chainteamtactics_testnet";

// ---------------

export async function logPixelPetsErrorDb(error: any, user: string, method: string) {
    if (is_testnet_env()) {
        console.log(error);
        return;
    }
    const db = await getPixelPetsDb();
    await db.collection("err").insertOne({ error, user, method, created_at: new Date() });
}

export async function getPixelPetsDb() {
    const db = (await clientPromise).db(pp_mongodb);
    return db;
}

// ---------------

export async function logCryptoHeroErrorDb(error: any, user: string, method: string) {
    if (is_testnet_env()) {
        console.log(error);
        return;
    }
    const db = await getCryptoHeroDb();
    await db.collection("err").insertOne({ error: JSON.stringify(error), user, method, created_at: new Date() });
}

export async function logCryptoHeroDungeonDb(user: string) {
    const db = await getCryptoHeroDb();
    await db.collection("log_dungeons").insertOne({ user, created_at: new Date() });
}

export async function getCryptoHeroDb() {
    const db = (await clientPromise).db(ch_mongodb);
    return db;
}

// ---------------

export async function logChainTeamTacticsErrorDb(error: any, user: string, method: string) {
    if (is_testnet_env()) {
        console.log(error);
        // return;
    }
    const db = await getChainTeamTacticsDb();
    await db.collection("err").insertOne({ error, user, method, created_at: new Date() });
}

export async function getChainTeamTacticsDb() {
    const db = (await clientPromise).db(ctt_mongodb);
    return db;
}

// ---------------

export function isLockTaken(result: any): boolean {
    // when the document doesn't exists...
    //{"acknowledged":true,"modifiedCount":0,"upsertedId":"61ecb551d95ab995aa1198ff","upsertedCount":1,"matchedCount":0}
    //{"acknowledged":true,"modifiedCount":0,"upsertedId":null,"upsertedCount":0,"matchedCount":1}
    //{"acknowledged":true,"modifiedCount":0,"upsertedId":null,"upsertedCount":0,"matchedCount":1}
    //{"acknowledged":true,"modifiedCount":0,"upsertedId":null,"upsertedCount":0,"matchedCount":1}

    // when the document already exists...
    //{"acknowledged":true,"modifiedCount":1,"upsertedId":null,"upsertedCount":0,"matchedCount":1}
    //{"acknowledged":true,"modifiedCount":0,"upsertedId":null,"upsertedCount":0,"matchedCount":1}
    //{"acknowledged":true,"modifiedCount":0,"upsertedId":null,"upsertedCount":0,"matchedCount":1}
    //{"acknowledged":true,"modifiedCount":0,"upsertedId":null,"upsertedCount":0,"matchedCount":1}

    return result.modifiedCount == 0 &&
        result.upsertedId != null &&
        result.upsertedCount != 0 &&
        result.matchedCount == 0;
}
'''
'''--- utils/backend/common/mongodbv2.ts ---
import { MongoClient } from 'mongodb'

const uri = "mongodb+srv://" + process.env.MNG;
const options = {
    useUnifiedTopology: true,
    useNewUrlParser: true,
}

let client
let clientPromise: Promise<MongoClient>

if (!process.env.MNG) {
    throw new Error('Please add your Mongo URI to .env.local')
}

if (process.env.NEXT_PUBLIC_NEAR_NETWORK_ID === 'testnet') {
    // In development mode, use a global variable so that the value
    // is preserved across module reloads caused by HMR (Hot Module Replacement).
    //@ts-ignore
    if (!global._mongoClientPromise) {
        //@ts-ignore
        client = new MongoClient(uri, options)
        //@ts-ignore
        global._mongoClientPromise = client.connect();
    }
    //@ts-ignore
    clientPromise = global._mongoClientPromise
} else {
    // In production mode, it's best to not use a global variable.
    //@ts-ignore
    client = new MongoClient(uri, options);
    clientPromise = client.connect();
}

// Export a module-scoped MongoClient promise. By doing this in a
// separate module, the client can be shared across functions.
export default clientPromise;
'''
'''--- utils/backend/common/rq_utils.ts ---
import type { NextApiRequest, NextApiResponse } from 'next'
import nacl from 'tweetnacl';
import { getCachedBannedAccounts } from '../cryptohero/helper/basic_game';
import { isAccessKeyValid, signMessage } from './blockchain';
const b58 = require('b58');

export function setup_headers(req: NextApiRequest, res: NextApiResponse): void {
    res.setHeader('Access-Control-Allow-Credentials', "true")
    res.setHeader('Access-Control-Allow-Origin', '*')
    res.setHeader("Access-Control-Allow-Methods", "GET,HEAD,OPTIONS,POST,PUT")
    res.setHeader("Access-Control-Allow-Headers", "Access-Control-Allow-Headers,Origin,Accept,X-Requested-With,Content-Type,Access-Control-Request-Method,Access-Control-Request-Headers");
    if (req.method === "OPTIONS") {
        return res.status(200).json({});
    }
}

export async function is_account_banned(account_id: string, res: NextApiResponse<any>): Promise<boolean> {
    const account_ids: string[] = await getCachedBannedAccounts();
    if (account_ids.includes(account_id)) {
        res.status(200).json({ success: false, error: "Account temporarily banned, contact discord support" });
        return true;
    }
    return false;
}

export function is_valid_request(params: any[], res: NextApiResponse<any>): boolean {
    for (let i: number = 0; i < params.length; i++) {
        if (!params[i]) {
            return bad_request(res)
        }
    }
    return true
}

export function is_defined_request(params: any[], res: NextApiResponse<any>): boolean {
    for (let i: number = 0; i < params.length; i++) {
        if (params[i] == undefined) {
            return bad_request(res)
        }
    }
    return true
}

export async function is_trusted_requestor(account_id: string, privkey: string, b58pubKey: string, res: NextApiResponse<any>): Promise<boolean> {
    const keyState = await isAccessKeyValid(account_id, b58pubKey);
    if (!keyState.valid) {
        return forbid_request(res);
    }
    const input_msg = "signedmsg";
    const signedMessage = signMessage(input_msg, privkey);
    const pubkey_bytes = b58.decode(b58pubKey.replace("ed25519:", ""));
    const verify = nacl.sign.detached.verify(new TextEncoder().encode(input_msg), signedMessage.signature, pubkey_bytes);
    if (!verify) {
        return forbid_request(res);
    }
    return true;
}

function bad_request(res: NextApiResponse<any>): boolean {
    res.status(400).json({
        success: false,
        error: "Not all required parameters are set.",
    })
    return false
}

function forbid_request(res: NextApiResponse<any>): boolean {
    res.status(403).json({
        success: false,
        error: "Not allowed.",
    })
    return false
}

const fromHexString = hexString =>
    new Uint8Array(hexString.match(/.{1,2}/g).map(byte => parseInt(byte, 16)));
'''
'''--- utils/backend/common/server-config.ts ---
export default function getConfig() {
    const env = process.env.NEXT_PUBLIC_NEAR_NETWORK_ID || "testnet";
    switch (env) {
        case 'mainnet':
            return {
                networkId: 'mainnet',
                nodeUrl: 'https://rpc.mainnet.near.org',
                walletUrl: 'https://app.mynearwallet.com',
                helperUrl: 'https://helper.mainnet.near.org',
                explorerUrl: 'https://explorer.mainnet.near.org',
                CONTRACT_ID: `pixeltoken.near`
            };
        case 'testnet':
        default:
            return {
                networkId: 'testnet',
                nodeUrl: 'https://rpc.testnet.near.org',
                walletUrl: 'https://testnet.mynearwallet.com',
                helperUrl: 'https://helper.testnet.near.org',
                explorerUrl: 'https://explorer.testnet.near.org',
                CONTRACT_ID: `pixeltoken.testnet`
            };
    }
}
'''
'''--- utils/backend/common/types.ts ---
export type WalletRequest = {
    account_id: string,
    private_key: string,
    action: string,
    receiver_id: string,
    method: string,
    args: object,
    referrer: string,
    callbackUrl?: string,
    attachedNear?: string,
}

export type FunctionRequest = {
    account_id: string,
    privatekey: string,
    contract_id: string,
    method_name: string,
    args: any,
    raise_gas: boolean
}

export type ExceptionRequest = {
    account_id: string,
    password: string,
    user_id: string,
    method_name: string,
    error_descr: string,
    limit: number,
    countonly: boolean,
}

export type BanishmentRequest = {
    account_id: string,
    password: string,
    user_id: string,
    reason: string,
    temporary: boolean,
    unban: boolean,
    readonly: boolean,
}
'''
'''--- utils/backend/common/utils.ts ---
export const ONE_MILLI_SECOND: number = 1000;
export const ONE_MICRO_SECOND: number = ONE_MILLI_SECOND * 1000;
export const ONE_NANO_SECOND: number = ONE_MICRO_SECOND * 1000;
export const ONE_MINUTE_IN_NS: number = ONE_NANO_SECOND * 60;
export const ONE_HOUR_IN_NS: number = ONE_MINUTE_IN_NS * 60;
export const ONE_DAY_IN_NS: number = ONE_HOUR_IN_NS * 24;
export const ONE_WEEK_IN_NS: number = ONE_DAY_IN_NS * 7;
export const ONE_MONTH_IN_NS: number = ONE_DAY_IN_NS * 30;
export const ONE_YEAR_IN_NS: number = ONE_DAY_IN_NS * 365;
export const nanoToMinuteFactor: number = 60000000000;

export function is_testnet_env(): boolean {
    const env = process.env.NEXT_PUBLIC_NEAR_NETWORK_ID || "testnet";
    return env == "testnet";
}

export function assert<T>(condition: T, message?: string): asserts condition {
    if (!condition) {
        throw message;
    }
}

// reference [https://stackoverflow.com/a/14668510]
export function to_number(str: string): number {
    return +str;// unary '+' operator converts string to number...
}

/*
 * guid utils [https://stackoverflow.com/questions/26501688/a-typescript-guid-class]
 */
export class Guid {
    static newGuid(): string {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            var r = Math.random() * 16 | 0,
                v = c == 'x' ? r : (r & 0x3 | 0x8)
            return v.toString(16)
        })
    }
}

/*
 * general utils
 */
export function clamp(number: number, min: number, max: number): number {
    return Math.max(min, Math.min(number, max))
}

export function getRandomNumber(min: number, max: number): number {
    return Math.floor(Math.random() * (max - min) + min)
}

export function getRandomFloat(min: number, max: number): number {
    return getRandomNumber(
        Math.round(min * 100),
        Math.round(max * 100)
    ) / 100
}

export function getRandomVector2(vector: number[]): number {
    if (vector.length != 2) {
        throw 'Invalid parameter count'
    }
    return getRandomNumber(vector[0], vector[1])
}

export function shuffle(array: any[]): any[] {
    let i = array.length

    while (i-- > 1) {
        const j = getRandomNumber(0, i + 1)
        const value = array[j]

        array[j] = array[i]
        array[i] = value
    }

    return array
}

/*
 * week number utils
 */
type WeekCodeType = {
    Week: number,
    Year: number,
}

function ISO8601_Week_No(today: Date = new Date()): WeekCodeType {
    const tdt = new Date(today.valueOf())
    const dayn = (today.getDay() + 6) % 7

    tdt.setDate(tdt.getDate() - dayn + 3)

    const firstThursday = tdt.valueOf()
    tdt.setMonth(0, 1)

    if (tdt.getDay() !== 4) {
        tdt.setMonth(0, 1 + ((4 - tdt.getDay()) + 7) % 7)
    }

    return {
        Week: 1 + Math.ceil((firstThursday - tdt.valueOf()) / 604800000),
        Year: tdt.getFullYear(),
    }
}

function getOffsetWeekTimestamp(today: Date = new Date(), offset: number): number {
    const weekCodeType = getWeekCodeType(today)

    let week_num: number = weekCodeType.Week
    let timestamp: number = 0
    let days: number = 0

    do {
        const dt = new Date(
            today.getFullYear(),
            today.getMonth(),
            today.getDate() + days,
        )

        const wct = getWeekCodeType(dt)
        week_num = wct.Week
        timestamp = dt.valueOf()
        days += offset
    } while (week_num == weekCodeType.Week)

    return timestamp
}

function getWeekCodeString(today: Date = new Date()): string {
    const wct = getWeekCodeType(today)
    if (wct.Week < 10) {
        return `W0${wct.Week}Y${wct.Year}`
    }
    return `W${wct.Week}Y${wct.Year}`
}

function getWeekCodeType(today: Date = new Date()): WeekCodeType {
    return ISO8601_Week_No(today)
}

export function getPreviousWeekCode(today: Date = new Date()): string {
    const prev = new Date(getPreviousWeekTimestamp(today))
    const code = getWeekCodeString(prev)
    return code
}

export function getCurrentWeekCode(today: Date = new Date()): string {
    const code = getWeekCodeString(today)
    return code;
}

export function getNextWeekCode(today: Date = new Date()): string {
    const next = new Date(getNextWeekTimestamp(today))
    const code = getWeekCodeString(next)
    return code
}

export function getNextWeekTimestamp(today: Date = new Date()): number {
    return getOffsetWeekTimestamp(today, +1)
}

export function getPreviousWeekTimestamp(today: Date = new Date()): number {
    return getOffsetWeekTimestamp(today, -1)
}

/*
 * date utils
 */

export function addMinutes(minutes: number, date: Date = new Date()) {
    return new Date(date.getTime() + minutes * 60000);
}

/*
 * numeric utils
 */

export class Vector2 {
    constructor(
        public x: number,
        public y: number,
    ) { }

    static one(mul: number = 1): Vector2 {
        return new Vector2(1 * mul, 1 * mul);
    }

    static distance(a: Vector2, b: Vector2): number {
        const dx: number = a.x - b.x;
        const dy: number = a.y - b.y;
        const sqrt: number = Math.sqrt(dx * dx + dy * dy);

        return sqrt;
    }

    static compare(left: Vector2, right: Vector2, position: Vector2): number {
        const x: number = Vector2.distance(left, position);
        const y: number = Vector2.distance(right, position);
        const value: number = x < y ? -1 : x > y ? 1 : 0;

        return value;
    }
}
'''
'''--- utils/backend/cryptohero/dungeon/core.ts ---
import { getRandomFloat, getRandomNumber } from "../../common/utils";
import { PotionData } from "../helper/types";
import { GetPotionData } from "../helper/utils";
import { DifficultyType, DungeonAttackStruct, DungeonFightStruct, DungeonLevelStruct, DungeonRoundStruct, ItemData, MonsterType, PotionType, RarityType, StatStruct } from "./types";
import { EasyDungeonMonsters, GenerateMonsterStats, GenerateRandomItem, HardDungeonMonsters, HellDungeonMonsters, MediumDungeonMonsters } from "./utils";

function calculateChanceWithLuck(chance: number, luck: number) {
    return chance + (chance * luck * 0.01);
}

export function GenerateFightStruct(difficulty: DifficultyType, charStruct: StatStruct, potions_data: PotionData[]): DungeonFightStruct {
    const levelStructs: DungeonLevelStruct[] = [];
    const rarityChance = getRandomFloat(0, 100);
    let rarityType: RarityType = RarityType.Common;// default rarity for DifficultyType.Easy
    let potionLuck: number = 0;

    const potionData = GetPotionData(potions_data, PotionType.Luck);
    if (potionData) {
        potionLuck = potionData.strength;
    }

    switch (difficulty) {
        case DifficultyType.Medium:
            if (rarityChance < calculateChanceWithLuck(10, potionLuck)) {
                rarityType = RarityType.Rare;
            }
            break;

        case DifficultyType.Hard:
            if (rarityChance < calculateChanceWithLuck(1, potionLuck)) {
                rarityType = RarityType.Epic;
            }
            else if (rarityChance < calculateChanceWithLuck(15, potionLuck)) {
                rarityType = RarityType.Rare;
            }
            break;

        case DifficultyType.Hell:
            if (rarityChance < calculateChanceWithLuck(1, potionLuck)) {
                rarityType = RarityType.Legendary;
            }
            else if (rarityChance < calculateChanceWithLuck(5, potionLuck)) {
                rarityType = RarityType.Epic;
            }
            else if (rarityChance < calculateChanceWithLuck(25, potionLuck)) {
                rarityType = RarityType.Rare;
            }
            break;
    }

    const dropItem: ItemData = GenerateRandomItem(rarityType);
    let charHP = charStruct.maxHealth;

    for (let i = 0; i < 4; i++) {
        const roundStructs: DungeonRoundStruct[] = [];
        const bossRound = i == 3;
        const monstersWaves = bossRound ? 1 : 2;

        for (let j = 0; j < monstersWaves; j++) {
            const roundMonstersStats: StatStruct[] = [];
            const roundMonstersTypes: MonsterType[] = [];
            const roundAttacks: DungeonAttackStruct[] = [];
            const monstersHP: number[] = [];

            switch (difficulty) {
                case DifficultyType.Easy:
                    if (bossRound) {
                        roundMonstersTypes.push(MonsterType.GoblinBoss);
                    }
                    else {
                        for (let k = 0; k < 3; k++) {
                            roundMonstersTypes.push(EasyDungeonMonsters[getRandomNumber(0, EasyDungeonMonsters.length)]);
                        }
                    }
                    break;

                case DifficultyType.Medium:
                    if (bossRound) {
                        roundMonstersTypes.push(MonsterType.RatBoss);
                    }
                    else {
                        for (let k = 0; k < 3; k++) {
                            roundMonstersTypes.push(MediumDungeonMonsters[getRandomNumber(0, MediumDungeonMonsters.length)]);
                        }
                    }
                    break;

                case DifficultyType.Hard:
                    if (bossRound) {
                        roundMonstersTypes.push(MonsterType.DemonBoss);
                    }
                    else {
                        for (let k = 0; k < 3; k++) {
                            roundMonstersTypes.push(HardDungeonMonsters[getRandomNumber(0, HardDungeonMonsters.length)]);
                        }
                    }
                    break;

                case DifficultyType.Hell:
                    if (bossRound) {
                        roundMonstersTypes.push(MonsterType.ReaperBoss);
                    }
                    else {
                        for (let k = 0; k < 3; k++) {
                            roundMonstersTypes.push(HellDungeonMonsters[getRandomNumber(0, HellDungeonMonsters.length)]);
                        }
                    }
                    break;
            }

            for (let l = 0; l < roundMonstersTypes.length; l++) {
                roundMonstersStats.push(GenerateMonsterStats(difficulty, charStruct, roundMonstersTypes[l]));
            }

            for (let l = 0; l < roundMonstersStats.length; l++) {
                monstersHP.push(roundMonstersStats[l].maxHealth);
            }

            let monstersAlive = roundMonstersStats.length;

            while (monstersAlive > 0) {
                let damage = 0;
                let critted = false;
                let dodged = false;
                let lifeSteal = 0;

                for (let l = 0; l < roundMonstersStats.length; l++) {
                    if (monstersHP[l] <= 0) {
                        continue;
                    }

                    // monster attacks players
                    critted = false;
                    damage = 0;
                    lifeSteal = 0;
                    dodged = getRandomFloat(0, 100) < charStruct.dodge;

                    if (!dodged) {
                        damage = Math.round(getRandomFloat(roundMonstersStats[l].damage * .5, roundMonstersStats[l].damage));
                        critted = getRandomFloat(0, 100) < roundMonstersStats[l].critChance;

                        if (critted) {
                            damage *= 2;
                        }

                        damage -= Math.round(damage * getRandomFloat(charStruct.defense * .5, charStruct.defense * .9) / 100);
                        lifeSteal = Math.round(damage / 100 * roundMonstersStats[l].lifeSteal);

                        if ((lifeSteal + monstersHP[l]) >= roundMonstersStats[l].maxHealth) {
                            lifeSteal -= (lifeSteal + monstersHP[l]) - roundMonstersStats[l].maxHealth;
                        }

                        monstersHP[l] += lifeSteal;
                        charHP -= damage;
                    }

                    roundAttacks.push(new DungeonAttackStruct(false, l, damage, lifeSteal, critted, dodged, charHP <= 0, false));

                    // if player dies, stop everything here
                    if (charHP <= 0) {
                        roundStructs.push(new DungeonRoundStruct(roundMonstersTypes, roundMonstersStats, roundAttacks));
                        levelStructs.push(new DungeonLevelStruct(roundStructs));
                        return new DungeonFightStruct(false, levelStructs, dropItem);
                    }

                    // player attacks monster
                    critted = false;
                    damage = 0;
                    lifeSteal = 0;
                    dodged = getRandomFloat(0, 100) < roundMonstersStats[l].dodge;

                    if (!dodged) {
                        damage = Math.round(getRandomFloat(charStruct.damage * .5, charStruct.damage));
                        critted = getRandomFloat(0, 100) < charStruct.critChance;

                        if (critted) {
                            damage *= 2;
                        }

                        damage -= Math.round(damage * getRandomFloat(roundMonstersStats[l].defense * .5, roundMonstersStats[l].defense * .9) / 100);
                        lifeSteal = Math.round(damage / 100 * charStruct.lifeSteal);

                        if ((lifeSteal + charHP) >= charStruct.maxHealth) {
                            lifeSteal -= (lifeSteal + charHP) - charStruct.maxHealth;
                        }

                        charHP += lifeSteal;
                        monstersHP[l] -= damage;
                    }

                    roundAttacks.push(new DungeonAttackStruct(true, l, damage, lifeSteal, critted, dodged, false, monstersHP[l] <= 0));

                    if (monstersHP[l] <= 0) {
                        monstersAlive--;
                    }
                }
            }

            roundStructs.push(new DungeonRoundStruct(roundMonstersTypes, roundMonstersStats, roundAttacks));
        }

        levelStructs.push(new DungeonLevelStruct(roundStructs));
    }

    return new DungeonFightStruct(true, levelStructs, dropItem);
}
'''
'''--- utils/backend/cryptohero/dungeon/types.ts ---

// stats of each monster
export class StatStruct {
    constructor(
        public maxHealth: number,
        public damage: number,
        public defense: number,
        public dodge: number,
        public lifeSteal: number,
        public critChance: number,
    ) { }
}

// info of each attack
export class DungeonAttackStruct {
    constructor(
        public attackingMonster: boolean,
        public monsterIndex: number,
        public damage: number,
        public lifeSteal: number,
        public critted: boolean,
        public dodged: boolean,
        public playerDied: boolean,
        public monsterDied: boolean,
    ) { }
}

// info of each round of monsters
export class DungeonRoundStruct {
    constructor(
        public roundMonsterTypes: MonsterType[] = [],
        public roundMonsterStats: StatStruct[] = [],
        public roundAttacks: DungeonAttackStruct[] = [],
    ) { }
}

// info of each dungeon level
export class DungeonLevelStruct {
    constructor(
        public dungeonRoundStructs: DungeonRoundStruct[] = [],
    ) { }
}

// info of all rounds + result
export class DungeonFightStruct {
    constructor(
        public victory: boolean,
        public levelStructs: DungeonLevelStruct[] = [],
        public itemDrop: ItemData,
    ) { }
}

export class ItemData {
    constructor(
        public item_type: number,
        public rarity_type: number,
        public equip_type: number,
        public class_type: number,
        public strength: number,
        public endurance: number,
        public dexterity: number,
        public intelligence: number,
        public luck: number,
    ) { }
}

export class MonsterData {
    constructor(
        public monster_type: number,
        public class_type: number,
        public dex_range: number[],
        public str_range: number[],
        public end_range: number[],
        public int_range: number[],
        public lck_range: number[],
    ) { }
}

export enum RarityType {
    Common = 0,
    Rare = 1,
    Epic = 2,
    Legendary = 3,
    None = 4,
}

export enum ClassType {
    None = 0,
    Mage = 1,
    Knight = 2,
    Ranger = 3
}

export enum EquipType {
    Armor = 0,
    Helmet = 1,
    Weapon = 2,
    Boots = 3,
    Necklace = 4,
    Ring = 5,
    Empty = 6
}

export enum MonsterType {
    None = 0,
    Goblin1 = 1,
    Goblin2 = 2,
    Goblin3 = 3,
    GoblinBoss = 4,
    Rat1 = 5,
    Rat2 = 6,
    RatBoss = 7,
    Demon1 = 8,
    Demon2 = 9,
    DemonBoss = 10,
    Reaper1 = 11,
    Reaper2 = 12,
    ReaperBoss = 13,
    Boss1 = 14,
    Boss2 = 15,
    Boss3 = 16,
    Boss4 = 17,
}

export enum DifficultyType {
    Easy = 0,
    Medium = 1,
    Hard = 2,
    Hell = 3,
}

export enum PotionType {
    Strength = 0,
    Stamina = 1,
    Luck = 2,
}
'''
'''--- utils/backend/cryptohero/dungeon/utils.ts ---
import { clamp, getRandomFloat, getRandomNumber, getRandomVector2 } from "../../common/utils";
import { GenerateMonsterStatStruct, getItemsByRarity, getMonsterByType } from "../helper/utils";
import { ClassType, DifficultyType, EquipType, ItemData, MonsterType, RarityType, StatStruct } from "./types";

const RarityBaseStats: number[][] = [
    [75, 175],
    [150, 350],
    [300, 500],
    [500, 800],
];

export const EasyDungeonMonsters: MonsterType[] = [
    MonsterType.Goblin1,
    MonsterType.Goblin2,
    MonsterType.Goblin1,
    MonsterType.Goblin2,
    MonsterType.Goblin3,
];

export const MediumDungeonMonsters: MonsterType[] = [
    MonsterType.Rat1,
    MonsterType.Rat2,
];

export const HardDungeonMonsters: MonsterType[] = [
    MonsterType.Demon1,
    MonsterType.Demon2,
];

export const HellDungeonMonsters: MonsterType[] = [
    MonsterType.Reaper1,
    MonsterType.Reaper2,
];

export function GenerateItemStatStruct(itemData: ItemData, classType: ClassType, equipType: EquipType): StatStruct {
    let damage = 0;
    let defense = 0;
    let critChance = 0;
    let lifeSteal = 0;
    let dodge = 0;
    let maxHealth = 0;

    switch (classType) {
        case ClassType.Mage:
            switch (equipType) {
                case EquipType.Armor:
                    defense = (itemData.strength + itemData.endurance) * .01;
                    maxHealth = 1 + Math.round(itemData.endurance * 1.75 + itemData.intelligence + itemData.luck);
                    dodge = (itemData.dexterity + itemData.luck) * .01;
                    break;

                case EquipType.Helmet:
                    defense = (itemData.strength + itemData.endurance) * .01;
                    damage = 1 + Math.round((itemData.luck + itemData.intelligence) * .2);
                    break;

                case EquipType.Weapon:
                    damage = 1 + Math.round((itemData.luck + itemData.intelligence + itemData.dexterity + itemData.strength) * .25);
                    critChance = (itemData.intelligence + itemData.luck) * .01;
                    lifeSteal = (itemData.intelligence + itemData.luck) * .005;
                    break;

                case EquipType.Boots:
                    dodge = .01 + (itemData.dexterity + itemData.luck) * .01;
                    defense = (itemData.strength + itemData.endurance) * .01;
                    break;

                case EquipType.Necklace:
                    maxHealth = 1 + Math.round((itemData.endurance + itemData.intelligence) * .5);
                    lifeSteal = (itemData.intelligence + itemData.luck) * .005;
                    break;

                case EquipType.Ring:
                    critChance = (itemData.intelligence + itemData.luck) * .01;
                    lifeSteal = .01 + (itemData.intelligence + itemData.luck) * .005;
                    break;
            }
            break;

        case ClassType.Knight:
            switch (equipType) {
                case EquipType.Armor:
                    defense = (itemData.strength + itemData.endurance) * .015;
                    maxHealth = 1 + Math.round(itemData.endurance * 2.25 + itemData.strength + itemData.luck);
                    lifeSteal = (itemData.intelligence + itemData.luck) * .005;
                    break;

                case EquipType.Helmet:
                    defense = (itemData.strength + itemData.endurance) * .01;
                    maxHealth = 1 + Math.round(itemData.endurance * 1.5 + itemData.strength);
                    break;

                case EquipType.Weapon:
                    damage = 1 + Math.round((itemData.luck + itemData.strength + itemData.dexterity + itemData.intelligence) * .25);
                    critChance = (itemData.strength + itemData.luck) * .01;
                    lifeSteal = (itemData.intelligence + itemData.luck) * .005;
                    break;

                case EquipType.Boots:
                    defense = .01 + (itemData.strength + itemData.endurance) * .01;
                    dodge = (itemData.dexterity + itemData.luck) * .01;
                    break;

                case EquipType.Necklace:
                    lifeSteal = (itemData.intelligence + itemData.luck) * .005;
                    defense = .01 + (itemData.strength + itemData.endurance) * .01;
                    break;

                case EquipType.Ring:
                    critChance = (itemData.strength + itemData.luck) * .01;
                    maxHealth = 1 + Math.round((itemData.endurance + itemData.luck) * .75);
                    break;
            }
            break;

        case ClassType.Ranger:
            switch (equipType) {
                case EquipType.Armor:
                    dodge = (itemData.dexterity + itemData.intelligence) * .01;
                    maxHealth = 1 + Math.round(itemData.endurance * 2 + itemData.dexterity + itemData.luck);
                    defense = (itemData.strength + itemData.endurance) * .01;
                    break;

                case EquipType.Helmet:
                    defense = .01 + (itemData.strength + itemData.endurance) * .01;
                    dodge = (itemData.dexterity + itemData.luck) * .01;
                    break;

                case EquipType.Weapon:
                    damage = 1 + Math.round((itemData.luck + itemData.dexterity + itemData.strength + itemData.intelligence) * .25);
                    critChance = (itemData.dexterity + itemData.luck) * .01;
                    lifeSteal = (itemData.intelligence + itemData.luck) * .005;
                    break;

                case EquipType.Boots:
                    defense = (itemData.strength + itemData.endurance) * .01;
                    dodge = .01 + (itemData.dexterity + itemData.luck) * .01;
                    break;

                case EquipType.Necklace:
                    maxHealth = 1 + Math.round((itemData.endurance + itemData.dexterity) * .5);
                    critChance = (itemData.dexterity + itemData.luck) * .01;
                    break;

                case EquipType.Ring:
                    damage = 1 + Math.round((itemData.luck + itemData.dexterity) * .2);
                    lifeSteal = (itemData.intelligence + itemData.luck) * .005;
                    break;
            }
            break;
    }

    // clamping to not exceed 100%
    defense = clamp(defense, 0, 100);
    critChance = clamp(critChance, 0, 100);
    lifeSteal = clamp(lifeSteal, 0, 100);
    dodge = clamp(dodge, 0, 100);

    return new StatStruct(
        maxHealth,
        damage,
        defense,
        dodge,
        lifeSteal,
        critChance
    );
}

export function GenerateRandomItem(rarityType: RarityType, itemType: number = -1): ItemData {
    const itemsByRarity = getItemsByRarity(rarityType);
    const itemIndex = getRandomNumber(0, itemsByRarity.length);
    const itemData = itemType != -1 ? itemsByRarity.find(x => x.item_type == itemType) : itemsByRarity[itemIndex];
    const rarityBaseStat = RarityBaseStats[rarityType];

    let strength = getRandomVector2(rarityBaseStat);
    let endurance = getRandomVector2(rarityBaseStat);
    let dexterity = getRandomVector2(rarityBaseStat);
    let intelligence = getRandomVector2(rarityBaseStat);
    let luck = getRandomVector2(rarityBaseStat);

    for (let i = 0; i < 10; i++) {
        if ((strength + endurance + dexterity + intelligence + luck) > rarityBaseStat[1]) {
            strength -= getRandomNumber(10, 50);
            endurance -= getRandomNumber(10, 50);
            dexterity -= getRandomNumber(10, 50);
            intelligence -= getRandomNumber(10, 50);
            luck -= getRandomNumber(10, 50);
        }
    }

    strength = clamp(strength, 0, Infinity);
    endurance = clamp(endurance, 0, Infinity);
    dexterity = clamp(dexterity, 0, Infinity);
    intelligence = clamp(intelligence, 0, Infinity);
    luck = clamp(luck, 0, Infinity);

    return new ItemData(
        itemData.item_type,
        rarityType,
        itemData.equip_type,
        itemData.class_type,
        strength,
        endurance,
        dexterity,
        intelligence,
        luck
    );
}

export function GenerateMonsterStats(difficulty: DifficultyType, charStruct: StatStruct, monsterType: MonsterType): StatStruct {
    const monsterData = getMonsterByType(monsterType);
    const statSum = Math.round(charStruct.critChance * 100) + Math.round(charStruct.lifeSteal * 100) + Math.round(charStruct.dodge * 100) + Math.round(charStruct.defense * 100) + charStruct.damage + charStruct.maxHealth / 2;
    const multiplier = getRandomFloat(.01, .02) / (1 + statSum * .001);
    const statAdd = Math.round(clamp(statSum - 250, 1, Infinity) * multiplier);
    const statMultiplier = 1 + (statSum / 6 * multiplier) + (difficulty * .1);
    const dexterity = Math.round((getRandomVector2(monsterData.dex_range) + statAdd) * statMultiplier);
    const strength = Math.round((getRandomVector2(monsterData.str_range) + statAdd) * statMultiplier);
    const intelligence = Math.round((getRandomVector2(monsterData.int_range) + statAdd) * statMultiplier);
    const endurance = Math.round((getRandomVector2(monsterData.end_range) + statAdd) * statMultiplier);
    const luck = Math.round((getRandomVector2(monsterData.lck_range) + statAdd) * statMultiplier);
    return GenerateMonsterStatStruct(monsterData.class_type, dexterity, strength, intelligence, endurance, luck);
}
'''
'''--- utils/backend/cryptohero/helper/basic_game.ts ---
import { getCryptoHeroDb, isLockTaken, logCryptoHeroErrorDb } from "../../common/mongo-helper";
import { APP_CONTRACT, viewFunction } from "../../common/blockchain";
import { ClassType, DifficultyType, ItemData, MonsterData, RarityType } from "../dungeon/types";
import { get_characters_by_ids, get_items_by_ids } from "./data_loader";
import { CharacterData, DungeonRequest, ItemToken, LockType, PlayerData, PlayerInventoryData } from "./types";
import { GenerateRandomItem } from "../dungeon/utils";
import { clamp, getCurrentWeekCode, is_testnet_env } from "../../common/utils";
import { RoomData } from "../raid/types";
import { RaidPlayersCount } from "../raid/utils";
import { MaxItems } from "./utils";

export let CACHED_ITEMBASE_DATA: ItemData[] = [];
export let CACHED_MONSTERBASE_DATA: MonsterData[] = [];

let CACHED_ACCOUNT_BANS: string[] = [];
let CACHED_ACCOUNT_BANS_TIMESTAMP: number = 0;

export async function getDbBannedAccounts(): Promise<any[]> {
    const db = await getCryptoHeroDb();
    const accounts = await db.collection<any>("account_ban").find({}, { projection: { _id: 0 } }).toArray();
    return accounts;
}

export async function getCachedBannedAccounts(): Promise<string[]> {
    const elapsedTimeSinceLastCache = clamp(Math.round((Date.now() - CACHED_ACCOUNT_BANS_TIMESTAMP) / 1000), 0, Infinity);
    if (CACHED_ACCOUNT_BANS_TIMESTAMP != 0 &&
        elapsedTimeSinceLastCache < 30) {// original idea was something like 5 minutes but the cache won't last such time
        return CACHED_ACCOUNT_BANS;
    }
    const accounts = await getDbBannedAccounts();
    CACHED_ACCOUNT_BANS = accounts.map(x => x.account_id);
    CACHED_ACCOUNT_BANS_TIMESTAMP = Date.now();
    return CACHED_ACCOUNT_BANS;
}

export async function getItemBaseData(): Promise<ItemData[]> {
    if (CACHED_ITEMBASE_DATA.length != 0) {
        return CACHED_ITEMBASE_DATA;
    }
    const db = await getCryptoHeroDb();
    const items = await db.collection<ItemData>("items").find({}, { projection: { _id: 0 } }).toArray();
    CACHED_ITEMBASE_DATA = items;
    return items;
}

export async function getMonsterBaseData(): Promise<MonsterData[]> {
    if (CACHED_MONSTERBASE_DATA.length != 0) {
       return CACHED_MONSTERBASE_DATA;
    }
    const db = await getCryptoHeroDb();
    const monsters = await db.collection<MonsterData>("monsters").find({}, { projection: { _id: 0 } }).toArray();
    CACHED_MONSTERBASE_DATA = monsters;
    return monsters;
}

export async function getAccountData(account_id: string) {
    const accountdata = await viewFunction(
        APP_CONTRACT,
        "ch_get_player_data",
        { account_id }
    );
    return accountdata;
}

export async function checkFightBalance(account_id: string): Promise<any> {
    const accountdata = await getAccountData(account_id);
    const playerdata = accountdata.playerdata;

    if (playerdata["fight_balance"] == 0) {
        throw "your fight balance is too low";
    }

    return playerdata;
}

export async function checkCharacterInjured(character_id: string): Promise<CharacterData> {
    const characterdata = (await get_characters_by_ids([character_id]))[0] as CharacterData;

    if (characterdata.injured_timer > Date.now().toString()) {
        throw "your character is not ready";
    }

    return characterdata;
}

export function getCharacterId(account_id: string, class_type: ClassType): string {
    if (is_testnet_env()) {// keep testnet working pls
        return `f:${class_type}:${account_id}`;
    }
    return `${account_id}:${class_type}`;
}

export async function getPlayerData(rq: DungeonRequest, ignore_maxitems: boolean = false): Promise<PlayerData> {
    const playerdata = await checkFightBalance(rq.account_id);
    const character_ids = playerdata.character_ids as string[];
    const character_id = getCharacterId(rq.account_id, rq.playerdata.class_type);

    // check if player does have character unlocked
    if (!character_ids.includes(character_id)) {
        throw "you did not unlocked this character";
    }

    const item_ids = playerdata.item_ids as string[];
    const itemBaseData = await getItemBaseData();
    let itemsdata: ItemToken[] = [];

    if (!ignore_maxitems && item_ids.length >= MaxItems) {
        throw `more than ${MaxItems} items not supported`;
    }

    if (rq.playerdata.inventory.length != 0) {
        // check item count, inventory is up to 6 items
        if (rq.playerdata.inventory.length > 6) {
            await logCryptoHeroErrorDb(rq.playerdata.inventory, rq.account_id, "too many items");
            throw "you can't equip more than 6 items";
        }

        // check for duplicated item token ids
        const duplicate_item_ids = rq.playerdata.inventory.filter((item, index) => rq.playerdata.inventory.indexOf(item) != index);
        if (duplicate_item_ids.length != 0) {
            throw "duplicated items not allowed";
        }

        // check items ownership
        rq.playerdata.inventory.forEach(item_id => {
            if (!item_ids.includes(item_id)) {
                throw "you don't own this item";
            }
        });

        // fetch all inventory ItemTokens from blockchain
        itemsdata = await get_items_by_ids(rq.playerdata.inventory);

        // check for items being sold
        itemsdata.forEach(item_token => {
            if (item_token.price != "0") {
                throw "you can't equip items on sale";
            }
        });

        // check if all items can be equipped by player's character
        itemsdata.forEach(item_token => {
            const x = itemBaseData.find(x => x.item_type == item_token.item_type);
            if (x.class_type != rq.playerdata.class_type) {
                throw "you can't equip some of your items";
            }
        });

        // check for duplicate items on same slot
        const duplicate_item_equip = itemsdata
            .map(x => itemBaseData.find(y => x.item_type == y.item_type).equip_type)
            .filter((item, index, arr) => arr.indexOf(item) != index);

        if (duplicate_item_equip.length != 0) {
            throw "you can't equip multiple items of same slot";
        }
    }

    const characterdata = await checkCharacterInjured(character_id);

    const pdata: PlayerData = {
        account_id: rq.account_id,
        player_character: characterdata,
        player_inventory: rq.playerdata.inventory.map<PlayerInventoryData>(id => {
            const x = itemsdata.find(x => x.token_id == id);
            return {
                token_id: x.token_id,
                item_type: x.item_type,
                rarity_type: x.rarity_type,
                strength: x.strength,
                dexterity: x.dexterity,
                endurance: x.endurance,
                intelligence: x.intelligence,
                luck: x.luck,
            }
        }),
        last_fight: Date.now(),
    };

    return pdata;
}

export async function updateLeaderboard(char_rank: number, player_data: PlayerData) {
    const options = { upsert: true };
    const db = await getCryptoHeroDb();
    const filter = {
        account_id: player_data.account_id,
        class_type: player_data.player_character.class_type
    };
    const update = {
        $set: {
            class_type: player_data.player_character.class_type,
            char_level: player_data.player_character.level,
            inventory: player_data.player_inventory,
            last_fight: player_data.last_fight,
            char_rank: char_rank,
        }
    };
    await db.collection("leaderboard").updateOne(filter, update, options);
}

export async function getLeaderboard(class_type: ClassType, results: number = 100): Promise<any[]> {
    const db = await getCryptoHeroDb();
    const entries = await db.collection("leaderboard").find({
        class_type: class_type
    })
    .sort({
        char_rank: -1,
    })
    .project({
        _id: 0,
        last_fight: 0,
        char_rank: 0,
    })
    .limit(results)
    .toArray();
    return entries;
}

export async function getCharacterWithPosition(account_id: string, class_type: number): Promise<any> {
    const db = await getCryptoHeroDb();
    const playerData = await db.collection("leaderboard").findOne(
        { account_id: account_id, class_type: class_type },
        {
            projection: {
                _id: 0,
                last_fight: 0,
                char_rank: 0,
            }
        });

    if (playerData) {
        const index = await db.collection("leaderboard")
        .find({ class_type: class_type })
        .sort({
            char_rank: -1,
        })
        .toArray()
        .then(x => x.findIndex(y => y.account_id == playerData.account_id));
        playerData["position"] = index + 1;
        return playerData;
    }

    return null;
}

export async function getRaidscores(difficulty: DifficultyType, results: number = 100, w_code = getCurrentWeekCode()): Promise<any[]> {
    const db = await getCryptoHeroDb();
    const entries = await db.collection("rooms").aggregate([
        {
            $project: {
                _id: 0,
                account_id: 1,
                difficulty: 1,
                week_code: 1,
                playerNames: 1,
                playerClasses: 1,
                playerRanks: 1,
                boss_kills: 1,
                playerBossKills: 1,
                playersCount: { $size: "$playerNames" }
            }
        },
        {
            $match: {
                difficulty: difficulty,
                week_code: w_code,
                playersCount: !is_testnet_env() ? {
                    $eq: RaidPlayersCount
                } : {
                    $gte: 1
                }
            }
        },
        {
            $sort: {
                boss_kills: -1
            }
        },
        {
            $limit: results
        }
    ])
    .toArray();
    return entries;
}

export async function getRoomWithPosition(roomData: RoomData): Promise<RoomData | null> {
    if (roomData) {
        const db = await getCryptoHeroDb();
        const index = await db.collection("rooms")
        .find({
            difficulty: roomData.difficulty,
            week_code: roomData.week_code
        })
        .sort({
            boss_kills: -1,
        })
        .project({
            _id: 0,
            account_id: 1,
        })
        .toArray()
        .then(x => x.findIndex(y => y.account_id == roomData.account_id));
        roomData["position"] = index + 1;
        return roomData;
    }
    return null;
}

export async function getInventoryData(account_id: string, class_type: ClassType): Promise<PlayerInventoryData[]> {
    const db = await getCryptoHeroDb();
    const playerData = await db.collection("leaderboard").findOne(
        { account_id: account_id, class_type: class_type },
        { projection: { _id: 0, inventory: 1 } }
    );
    if (playerData) {
        return playerData.inventory;
    }
    return [];
}

export function checkLootboxBalance(balance: any, rarity_type: RarityType): boolean {
    switch (rarity_type) {
        case RarityType.Common:
            return balance.common > 0;
        case RarityType.Rare:
            return balance.rare > 0;
        case RarityType.Epic:
            return balance.epic > 0;
        case RarityType.Legendary:
            return balance.legendary > 0;
    }
    return false;
}

export async function getLootbox(account_id: string, rarity_type: RarityType): Promise<ItemData[] | null> {
    const db = await getCryptoHeroDb();
    const lootBox = await db.collection("lootboxes").findOne(
        { account_id: account_id, rarity_type: rarity_type },
        { projection: { _id: 0, items: 1 } }
    );

    if (lootBox) {
        return lootBox.items;
    }

    return null;
}

export async function createLootbox(account_id: string, rarity_type: RarityType): Promise<ItemData[]> {
    await getItemBaseData();
    const itemsData: ItemData[] = [];

    for (let i = 0; i < 10; i++) {
        itemsData[i] = GenerateRandomItem(rarity_type);
    }

    const db = await getCryptoHeroDb();
    const filter = {
        account_id: account_id,
        rarity_type: rarity_type
    };
    const update = {
        $set: {
            items: itemsData
        }
    };
    const options = { upsert: true };

    await db.collection("lootboxes").updateOne(filter, update, options);
    return itemsData;
}

export async function deleteLootbox(account_id: string, rarity_type: RarityType): Promise<void> {
    const db = await getCryptoHeroDb();
    await db.collection("lootboxes").deleteOne({ account_id: account_id, rarity_type: rarity_type });
}

// account locking

export async function lockAccount(account_id: string, lock_type: LockType): Promise<boolean> {
    const db = await getCryptoHeroDb();
    const filter = {
        account_id: account_id,
        lock_type: lock_type,
    };
    const update = {
        $set: {
            timestamp: new Date(),
        },
        $inc: {
            attempts: 1,
        }
    };
    const options = { upsert: true };
    const result = await db.collection("account_lock").updateOne(filter, update, options);
    const lockTaken = isLockTaken(result);

    if (!lockTaken) {
        const retry = await db.collection("account_lock").findOne(filter);
        if (retry.attempts >= 5) {
            await banAccount(account_id);
        }
    }

    return lockTaken;
}

export async function unlockAccount(account_id: string, lock_type: LockType): Promise<void> {
    const db = await getCryptoHeroDb();
    const filter = {
        account_id: account_id,
        lock_type: lock_type,
    };
    await db.collection("account_lock").deleteOne(filter);
}

export async function banAccount(account_id: string, is_temporary: boolean = true, reason: string | null = null): Promise<void> {
    const db = await getCryptoHeroDb();
    const update = {};
    if (is_temporary) {
        update["$set"] = {
            timestamp: new Date(),
            reason: reason ? reason : undefined,
        };
    }
    else {
        update["$set"] = {
            reason: reason ? reason : undefined,
        };
    }
    const options = { upsert: true };
    await db.collection("account_ban").updateOne(
        { account_id: account_id },
        update, options);
}

export async function unbanAccount(account_id: string): Promise<void> {
    const db = await getCryptoHeroDb();
    await db.collection("account_ban").deleteMany({ account_id: account_id });
}

// ---

export const TESTDEV_ACCOUNT = process.env.TESTDEV_ACCOUNT;
export const TESTDEV_KEY = process.env.TESTDEV_KEY;
'''
'''--- utils/backend/cryptohero/helper/data_loader.ts ---
import BN from "bn.js";
import { APP_CONTRACT, changeFunctionWithoutAttachment, MANAGER_ACCOUNT, MANAGER_KEY, viewFunction } from "../../common/blockchain";
import { ItemToken } from "./types";
import { MaxItems } from "./utils";

const MAX_RESULTS_PER_CALL: number = 25;
/*
 * MAX_RESULTS_PER_CALL /  GAS
 *          09          / 23~32
 *          10          / 27~36
 *          12          / 34~45
 *          25          / 132~151
 *          30          / 158~173   -   its over 200 nowadays...
 */

export async function get_items_by_ids(item_ids: string[]): Promise<ItemToken[]> {
    if (item_ids.length > MaxItems) {
        throw `more than ${MaxItems} ids not supported`;
    }

    const max_results = Math.min(item_ids.length, MAX_RESULTS_PER_CALL);
    let count = Math.ceil(item_ids.length / max_results);
    let item_tokens: ItemToken[] = [];

    if ((count % 2) != 0) {
        count++;
    }

    for (let i = 0; i < count; i++) {
        const startAt = max_results * i;
        const endAt = Math.min(startAt + max_results, item_ids.length);

        if (startAt >= endAt) {
            break;
        }

        const current_slice = item_ids.slice(startAt, endAt);
        if (current_slice.length != 0) {
            const current_items = await viewFunction(
                APP_CONTRACT,
                "ch_get_items_by_ids",
                { token_ids: current_slice }
            );
            // const current_items = (await changeFunctionWithoutAttachment(
            //     MANAGER_ACCOUNT,
            //     MANAGER_KEY,
            //     APP_CONTRACT,
            //     "ch_get_items_by_ids",
            //     { token_ids: current_slice },
            //     new BN('300000000000000')// 300
            // )).data;
            item_tokens = item_tokens.concat(current_items);
        }
    }

    return item_tokens;
}

export async function get_characters_by_ids(char_ids: string[]): Promise<any[]> {
    let characters: any[] = [];
    if (char_ids.length != 0) {
        const chars_result = await viewFunction(
            APP_CONTRACT,
            "ch_get_characters_by_ids",
            { character_ids: char_ids }
        );
        characters = characters.concat(chars_result);
        for (let i = 0; i < characters.length; i++) {
            const character = characters[i];
            if (character.injured_timer != "0") {
                character.injured_timer = character.injured_timer.substring(0, character.injured_timer.length - 6);
            }
        }
    }
    return characters;
}
'''
'''--- utils/backend/cryptohero/helper/types.ts ---
import { FunctionRequest } from "../../common/types";
import { DifficultyType, PotionType, RarityType } from "../dungeon/types";

export type PlayerData = {
    account_id: string,
    player_character: CharacterData,
    player_inventory: PlayerInventoryData[],
    last_fight: number,
}

export class PlayerInventoryData {
    public token_id: string;
    public item_type: number;
    public rarity_type: number;
    public strength: number;
    public dexterity: number;
    public endurance: number;
    public intelligence: number;
    public luck: number;
}

export class CharacterData {
    public class_type: number;
    public experience: number;
    public level: number;
    public injured_timer: string;
    public potions: PotionData[];
}

export class PotionData {
    constructor(
        public potion_type: PotionType,
        public amount: number = 0,
        public strength: number = 0,
    ) { }
}

export class ItemToken {
    public token_id: string;
    public item_type: number;
    public rarity_type: number;
    public strength: number;
    public dexterity: number;
    public endurance: number;
    public intelligence: number;
    public luck: number;
    public owner: string;
    public price: string;
}

/*
 * begin raid blockchain replacement data
 */

// export const CH_RAID_PLAYERS_COUNT: number = 8;

// the results class that we normaly send to the contract
export class ChRaidInfo {
    public account_id: string;
    public character_results: {
        class_type: number,
        exp_gain: number,
        level_up: boolean,
    };
    public difficulty: number;
    public victory: boolean;
    public leader_id: string;
    public week_code: string;
}

/*// the actual raid data stored in the chain
export class ChRaidData {
    public raid_id: string;
    public account_ids: string[];
    public difficulty: number;
    public boss_kills: number;
}*/

/*
 * end raid blockchain replacement data
 */

export type EditItemRequest = FunctionRequest & {
    password: string,
    itemdata: {
        item_name: string,
        item_type: number,
        equip_type: number,
        class_type: number,
        rarity_type: number,
    }
}

export type EditMonsterRequest = FunctionRequest & {
    password: string,
    monsterdata: {
        monster_name: string,
        monster_type: number,
        class_type: number,
        str_range: number[],
        dex_range: number[],
        end_range: number[],
        int_range: number[],
        lck_range: number[],
    }
}

export type DungeonRequest = FunctionRequest & {
    playerdata: {
        difficulty: DifficultyType,
        class_type: number,
        inventory: string[],
    }
}

export type OfferItemRequest = FunctionRequest & {
    itemdata: {
        token_id: string,
        price: string,
    }
}

export type CancelOfferItemRequest = FunctionRequest & {
    itemdata: {
        token_id: string,
    }
}

export type BuyItemRequest = FunctionRequest & {
    itemdata: {
        token_id: string,
    }
}

export type AdvancedSearchRequest = FunctionRequest & {
    itemdata: {
        class_type: number,
        equip_type: number,
        rarity_type: number,
        minStat: number,
    }
}

export type CreateRoomRequest = DungeonRequest;

export type StartRoomRequest = DungeonRequest;

export type JoinRoomRequest = DungeonRequest & {
    roomdata: {
        leader_id: string,
    }
}

export type KickPlayerRequest = FunctionRequest & {
    playerdata: {
        account_id: string,
    },
    publickey: string
}

export type RaidScoresRequest = FunctionRequest & {
    raiddata: {
        difficulty: DifficultyType,
    }
}

export type RequestLootboxRequest = FunctionRequest & {
    rarity_type: RarityType,
}

export type OpenLootboxRequest = FunctionRequest & {
    rarity_type: RarityType,
    item1_index: number,
    item2_index: number,
}

// --

export enum LockType {
    Dungeon = 0,
    Raid = 1,
}
'''
'''--- utils/backend/cryptohero/helper/utils.ts ---
import { clamp, is_testnet_env, ONE_HOUR_IN_NS, ONE_MINUTE_IN_NS, ONE_NANO_SECOND } from "../../common/utils";
import { ClassType, DifficultyType, ItemData, MonsterData, PotionType, StatStruct } from "../dungeon/types";
import { GenerateItemStatStruct } from "../dungeon/utils";
import { CACHED_ITEMBASE_DATA, CACHED_MONSTERBASE_DATA, getItemBaseData, getMonsterBaseData } from "./basic_game";
import { CharacterData, PlayerData, PotionData } from "./types";

export const CharMaxLevel: number = 100;
export const MaxItems: number = 60;

export function getItemByType(itemType: number): ItemData {
    return CACHED_ITEMBASE_DATA.find(x => x.item_type == itemType);
}

export function getItemsByRarity(rarityType: number): ItemData[] {
    return CACHED_ITEMBASE_DATA.filter(x => x.rarity_type == rarityType);
}

export function getMonsterByType(monsterType: number): MonsterData {
    return CACHED_MONSTERBASE_DATA.find(x => x.monster_type == monsterType);
}

export async function generateCharacterInfo(player_data: PlayerData): Promise<StatStruct> {
    const itemBaseData = await getItemBaseData();
    await getMonsterBaseData();// ensure cache

    const itemsData = player_data.player_inventory.map<ItemData>(item => {
        const x = itemBaseData.find(x => x.item_type == item.item_type);
        return {
            item_type: item.item_type,
            rarity_type: item.rarity_type,
            equip_type: x.equip_type,
            class_type: x.class_type,
            strength: item.strength,
            endurance: item.endurance,
            dexterity: item.dexterity,
            intelligence: item.intelligence,
            luck: item.luck,
        }
    });

    const charStatStruct = GenerateCharacterStruct(
        player_data.player_character,
        itemsData
    );

    // console.log("charStatStruct: " + JSON.stringify(charStatStruct));
    return charStatStruct;
}

export function GenerateCharacterStruct(characterData: CharacterData, itemData: ItemData[]): StatStruct {
    let damage = 0;
    let defense = 0;
    let critChance = 0;
    let lifeSteal = 0;
    let dodge = 0;
    let maxHealth = 0;

    switch (characterData.class_type) {
        case ClassType.Mage:
            damage = 15;
            defense = 3;
            critChance = 3;
            lifeSteal = 4;
            dodge = 3;
            maxHealth = 85;
            break;

        case ClassType.Knight:
            damage = 13;
            defense = 5;
            critChance = 3;
            lifeSteal = 3;
            dodge = 3;
            maxHealth = 120;
            break;

        case ClassType.Ranger:
            damage = 14;
            defense = 3;
            critChance = 4;
            lifeSteal = 3;
            dodge = 3;
            maxHealth = 90;
            break;

        default:
            break;
    }

    // add stats from items
    for (let i = 0; i < itemData.length; i++) {
        if (itemData[i].class_type == characterData.class_type) {
            const itemStatStruct = GenerateItemStatStruct(itemData[i], characterData.class_type, itemData[i].equip_type);
            // console.log("itemStatStruct: " + JSON.stringify(itemStatStruct));
            damage += itemStatStruct.damage;
            defense += itemStatStruct.defense;
            critChance += itemStatStruct.critChance;
            lifeSteal += itemStatStruct.lifeSteal;
            dodge += itemStatStruct.dodge;
            maxHealth += itemStatStruct.maxHealth;
        }
    }

    let potionMultiplier: number = 1;
    const potionData = GetPotionData(characterData.potions, PotionType.Strength);

    if (potionData) {
        potionMultiplier += potionData.strength * .01;
    }

    // multiply by level & potion
    damage = Math.round(damage * (1 + (characterData.level * .01)) * potionMultiplier);
    defense = Math.round(defense * (1 + (characterData.level * .01)) * potionMultiplier);
    critChance = Math.round(critChance * (1 + (characterData.level * .01)) * potionMultiplier);
    lifeSteal = Math.round(lifeSteal * (1 + (characterData.level * .01)) * potionMultiplier);
    dodge = Math.round(dodge * (1 + (characterData.level * .01)) * potionMultiplier);
    maxHealth = Math.round(maxHealth * (1 + (characterData.level * .01)) * potionMultiplier);

    // clamping to not exceed 100%
    defense = clamp(defense, 0, 100);
    critChance = clamp(critChance, 0, 100);
    lifeSteal = clamp(lifeSteal, 0, 100);
    dodge = clamp(dodge, 0, 100);

    return new StatStruct(
        maxHealth,
        damage,
        defense,
        dodge,
        lifeSteal,
        critChance
    );
}

export function GenerateMonsterStatStruct(classType: ClassType, dexterity: number, strength: number, intelligence: number, endurance: number, luck: number): StatStruct {
    let damage = 0;
    let defense = 0;
    let critChance = 0;
    let lifeSteal = 0;
    let dodge = 0;
    let maxHealth = 0;

    switch (classType) {
        case ClassType.Ranger:
            damage = Math.round((luck + dexterity * .3 + strength * .3) * .25);
            defense = (strength + endurance) * .005;
            critChance = (dexterity + luck) * .008;
            lifeSteal = (intelligence + luck) * .005;
            dodge = (dexterity + luck) * .005;
            maxHealth = Math.round(endurance * 1.4);
            break;

        case ClassType.Mage:
            damage = Math.round((luck + intelligence * .7) * .25);
            defense = (strength + endurance) * .004;
            critChance = (intelligence + luck) * .006;
            lifeSteal = (intelligence + luck) * .006;
            dodge = (dexterity + luck) * .006;
            maxHealth = Math.round(endurance * 1.2);
            break;

        case ClassType.Knight:
            damage = Math.round((luck + strength * .5) * .25);
            defense = (strength + endurance) * .008;
            critChance = (strength + luck) * .004;
            lifeSteal = (intelligence + luck) * .004;
            dodge = (dexterity + luck) * .003;
            maxHealth = Math.round(endurance * 1.75);
            break;
    }

    // clamping to not exceed 100%
    defense = clamp(defense, 0, 100);
    critChance = clamp(critChance, 0, 100);
    lifeSteal = clamp(lifeSteal, 0, 100);
    dodge = clamp(dodge, 0, 100);

    return new StatStruct(
        maxHealth,
        damage,
        defense,
        dodge,
        lifeSteal,
        critChance
    );
}

export function GetExpForNextLevel(level: number): number {
    return Math.round(50 * level * (1 + level * .2));
}

export function GetStatRank(statStruct: StatStruct): number {
    const statRank = Math.round(
        statStruct.critChance * 100 + statStruct.defense * 100 + statStruct.dodge * 100 +
        statStruct.maxHealth / 4 + statStruct.lifeSteal * 100 + statStruct.damage
    );
    return statRank;
}

export function GetCharacterRank(statRank: number, level: number): number {
    const characterRank = Math.round(statRank + level * 100);
    return characterRank;
}

export function GetPotionData(potions_data: PotionData[], potion_type: PotionType): PotionData | null {
    const index = potions_data.findIndex(x => x.potion_type == potion_type);
    if (index != -1 && potions_data[index].amount > 0) {
        return potions_data[index];
    }
    return null;
}

export function GetExpGainBasedOnDifficulty(difficulty: DifficultyType, victory: boolean): number {
    let experience: number = 0;

    if (difficulty == DifficultyType.Medium) {
        experience = 20;
    } else if (difficulty == DifficultyType.Hard) {
        experience = 80;
    } else if (difficulty == DifficultyType.Hell) {
        experience = 240;
    } else {// DifficultyType.Easy
        experience = 10;
    }

    if (!victory) {
        const percentages: number[] = [0, 5, 15, 30];
        const penalty: number = percentages[difficulty] / 100;

        experience = clamp(experience - experience * penalty, 0, Infinity);
    }

    return experience;
}

export function GetRestingTimerBasedOnDifficulty(difficulty: DifficultyType, potions_data: PotionData[]): number {
    let timer: number = 0;
    let restReduction: number = 0;

    const potionData = GetPotionData(potions_data, PotionType.Stamina);
    if (potionData) {
        restReduction = potionData.strength;
    }

    switch (difficulty) {
        case DifficultyType.Easy:
            timer = ONE_MINUTE_IN_NS * (30 - restReduction);// 30min
            break;

        case DifficultyType.Medium:
            timer = ONE_MINUTE_IN_NS * (60 - restReduction);// 1hour
            break;

        case DifficultyType.Hard:
            timer = ONE_MINUTE_IN_NS * (240 - restReduction);// 4hours
            break;

        case DifficultyType.Hell:
            timer = ONE_MINUTE_IN_NS * (720 - restReduction);// 12hours
            break;
    }

    if (is_testnet_env()) {
        timer = ONE_NANO_SECOND * 15;
    }

    return timer;
}

export function assert_difficulty(difficulty: DifficultyType): void {
    if (difficulty < DifficultyType.Easy || difficulty > DifficultyType.Hell) {
        throw "Invalid difficulty";
    }
}
'''
'''--- utils/backend/cryptohero/raid/core.ts ---
import { clamp, getRandomFloat, getRandomNumber } from "../../common/utils";
import { MonsterType } from "../dungeon/types";
import { BossAttackStruct, BossFightStruct, RoomData } from "./types";
import { GenerateBossStats, HasPlayerAlive } from "./utils";

export function GenerateFightStruct(roomData: RoomData): BossFightStruct {
    const playersCount = roomData.playerStatStructs.length;
    const charHPs: number[] = roomData.playerStatStructs.map(x => x.maxHealth);
    const bossType: MonsterType = MonsterType[`Boss${roomData.difficulty + 1}`];
    const bossStruct = GenerateBossStats(roomData.difficulty + 1, roomData.playerStatStructs, roomData.boss_kills, bossType);
    const bossAttackStructs: BossAttackStruct[] = [];

    let bossHP: number = bossStruct.maxHealth;
    let damage: number = 0;
    let critted: boolean = false;
    let dodged: boolean = false;
    let lifeSteal: number = 0;

    while (HasPlayerAlive(charHPs)) {
        // players attack
        for (let i: number = 0; i < playersCount; i++) {
            const playerStat = roomData.playerStatStructs[i];

            if (charHPs[i] <= 0) {
                continue;
            }

            dodged = false;
            damage = Math.round(getRandomFloat(playerStat.damage * .5, playerStat.damage));
            critted = getRandomFloat(0, 100) < playerStat.critChance;

            if (critted) {
                damage *= 2;
            }

            damage -= Math.round(damage * getRandomFloat(bossStruct.defense * .5, bossStruct.defense * .9) / 100);
            lifeSteal = Math.round(damage / 100.0 * playerStat.lifeSteal);

            if ((lifeSteal + charHPs[i]) >= playerStat.maxHealth) {
                lifeSteal -= (lifeSteal + charHPs[i]) - playerStat.maxHealth;
            }

            charHPs[i] += lifeSteal;
            bossHP -= damage;

            // if boss dies, stop everything here, declare victory
            if (bossHP <= 0) {
                bossAttackStructs.push(new BossAttackStruct(true, i, damage, lifeSteal, critted, dodged, false, true));
                return new BossFightStruct(bossStruct, bossAttackStructs, true);
            }
            else {
                bossAttackStructs.push(new BossAttackStruct(true, i, damage, lifeSteal, critted, dodged, false, false));
            }
        }

        // boss attacks
        const attackedPlayers: number[] = [];
        const count = clamp(getRandomNumber(1, (roomData.difficulty + 1) * 3), 1, 8);

        for (let i: number = 0; i < count; i++) {
            const playerIndex = getRandomNumber(0, playersCount);
            if (charHPs[playerIndex] > 0 && !attackedPlayers.includes(playerIndex)) {
                attackedPlayers.push(playerIndex);
            }
        }

        if (attackedPlayers.length == 0) {
            for (let i: number = 0; i < playersCount; i++) {
                if (charHPs[i] > 0) {
                    attackedPlayers.push(i);
                    break;
                }
            }
        }

        if (attackedPlayers.length == 0) {
            return new BossFightStruct(bossStruct, bossAttackStructs, false);
        }

        for (let i: number = 0; i < attackedPlayers.length; i++) {
            const playerIndex = attackedPlayers[i];
            const playerStat = roomData.playerStatStructs[playerIndex];

            critted = false;
            damage = 0;
            lifeSteal = 0;
            dodged = getRandomFloat(0, 100) < playerStat.dodge;

            if (!dodged) {
                damage = Math.round(getRandomFloat(bossStruct.damage * .5, bossStruct.damage));
                critted = getRandomFloat(0, 100) < bossStruct.critChance;

                if (critted) {
                    damage *= 2;
                }

                damage -= Math.round(damage * getRandomFloat(playerStat.defense * .5, playerStat.defense * .9) / 100);
                lifeSteal = Math.round(damage / 100.0 * bossStruct.lifeSteal);

                if ((lifeSteal + bossHP) >= bossStruct.maxHealth) {
                    lifeSteal -= (lifeSteal + bossHP) - bossStruct.maxHealth;
                }

                bossHP += lifeSteal;
                charHPs[playerIndex] -= damage;
            }

            bossAttackStructs.push(new BossAttackStruct(false, playerIndex, damage, lifeSteal, critted, dodged, charHPs[playerIndex] <= 0, false));
        }
    }

    return new BossFightStruct(bossStruct, bossAttackStructs, false);
}
'''
'''--- utils/backend/cryptohero/raid/types.ts ---
import { DifficultyType, StatStruct } from "../dungeon/types";

// info of each attack
export class BossAttackStruct {
    constructor(
        public attackingBoss: boolean,
        public playerIndex: number,
        public damage: number,
        public lifeSteal: number,
        public critted: boolean,
        public dodged: boolean,
        public playerDied: boolean,
        public bossDied: boolean,
    ) { }
}

export class BossFightStruct {
    constructor(
        public bossStatStruct: StatStruct,
        public bossAttackStructs: BossAttackStruct[] = [],
        public victory: boolean,
    ) { }
}

export class RoomData {
    constructor(
        public account_id: string,
        public week_code: string,
        public difficulty: DifficultyType,
        public playerNames: string[] = [],
        public playerClasses: number[] = [],
        public playerLevels: number[] = [],
        public playerRanks: number[] = [],
        public playerBossKills: number[] = [],
        public playerEquippedItems: number[][] = [],
        public playerStatStructs: StatStruct[] = [],
        public playerJoinTimestamps: number[] = [],
        public created_at: Date = new Date(),
        public last_fight: number = 0,
        public boss_kills: number = 0,
    ) { }
}
'''
'''--- utils/backend/cryptohero/raid/utils.ts ---
import { getCryptoHeroDb } from "../../common/mongo-helper";
import { clamp, getCurrentWeekCode, getRandomFloat, getRandomVector2 } from "../../common/utils";
import { DifficultyType, MonsterType, StatStruct } from "../dungeon/types";
import { GenerateMonsterStatStruct, getMonsterByType } from "../helper/utils";
import { RoomData } from "./types";

export const RaidPlayersCount: number = 8;

export function GenerateBossStats(difficulty: DifficultyType, charStructs: StatStruct[], boss_kills: number, monsterType: MonsterType): StatStruct {
    const monsterData = getMonsterByType(monsterType);
    const playersCount = charStructs.length;
    let statSum: number = 0;

    for (let i: number = 0; i < playersCount; i++) {
        const charStruct = charStructs[i];
        statSum +=
            Math.round(charStruct.critChance * 100) +
            Math.round(charStruct.lifeSteal * 100) +
            Math.round(charStruct.dodge * 100) +
            Math.round(charStruct.defense * 100) +
            charStruct.damage + charStruct.maxHealth / 2;
    }

    statSum /= playersCount;

    const multiplier = getRandomFloat(.01, .02) / (1 + statSum * .001);
    const statAdd = Math.round(clamp(statSum - 250, 1, Infinity) * multiplier);

    //ank boss scaling
    const statMultiplier = 1 + (statSum / 6 * multiplier) + (difficulty * .1) + (boss_kills * .022);

    const dexterity = Math.round((getRandomVector2(monsterData.dex_range) + statAdd) * statMultiplier);
    const strength = Math.round((getRandomVector2(monsterData.str_range) + statAdd) * statMultiplier);
    const intelligence = Math.round((getRandomVector2(monsterData.int_range) + statAdd) * statMultiplier);
    const endurance = Math.round((getRandomVector2(monsterData.end_range) + statAdd) * statMultiplier);
    const luck = Math.round((getRandomVector2(monsterData.lck_range) + statAdd) * statMultiplier);

    const bossStatStruct = GenerateMonsterStatStruct(monsterData.class_type, dexterity, strength, intelligence, endurance, luck);
    const bossStruct = new StatStruct(
        bossStatStruct.maxHealth,
        bossStatStruct.damage,
        10,
        0,
        bossStatStruct.lifeSteal,
        bossStatStruct.critChance
    );

    return bossStruct;
}

export function HasPlayerAlive(charHPs: number[]): boolean {
    const playersCount = charHPs.length;
    for (let i: number = 0; i < playersCount; i++) {
        if (charHPs[i] > 0) {
            return true;
        }
    }
    return false;
}

/*
 * raid rooms code
 */

export async function createOrUpdateRoom(roomData: RoomData): Promise<void> {
    const db = await getCryptoHeroDb();
    await db.collection("rooms").updateOne(
        { account_id: roomData.account_id, week_code: roomData.week_code },
        { $set: roomData },
        { upsert: true });
}

export async function checkInsertUsedItems(account_id: string, items: string[], week_code: string): Promise<string | null> {
    const db = await getCryptoHeroDb();
    const doc = await db.collection("used_items").findOne({
        token_id: {
            $in: items
        },
        account_id: {
            $ne: account_id
        },
        week_code: week_code
    });

    if (doc) {
        return `${doc.account_id}#${doc.token_id}`;
    }

    const db_items = [];
    const createdAt = new Date();

    items.forEach(item => {
        db_items.push({
            token_id: item,
            account_id: account_id,
            week_code: week_code,
            created_at: createdAt
        });
    });

    await db.collection("used_items").insertMany(db_items);
    return null;
}

export async function getRoom(account_id: string, w_code: string | null = null): Promise<RoomData | null> {
    const db = await getCryptoHeroDb();
    if (!w_code) {
        w_code = getCurrentWeekCode();
    }
    const roomData = await db.collection("rooms").findOne<RoomData>(
        { week_code: w_code, playerNames: account_id },
        { projection: { _id: 0 } }
    );
    return roomData || null;
}

export async function getRoomByLeader(account_id: string, w_code: string | null = null): Promise<RoomData | null> {
    const db = await getCryptoHeroDb();
    if (!w_code) {
        w_code = getCurrentWeekCode();
    }
    const roomData = await db.collection("rooms").findOne<RoomData>(
        { account_id: account_id, week_code: w_code },
        { projection: { _id: 0 } }
    );
    return roomData || null;
}

/*
 * begin raid blockchain replacement data
 */

/*function ch_get_raid_prefix(account_id: string, week_code: string): string {
    return `r:${week_code}:${account_id}`;
}

async function getRaidGroup(account_id: string, week_code: string): Promise<ChRaidData | null> {
    const db = await getCryptoHeroDb();
    const raid_id = ch_get_raid_prefix(account_id, week_code);
    const raid_data = await db.collection("raid_groups").findOne<ChRaidData>(
        { raid_id: raid_id },
        { projection: { _id: 0 } }
    );
    return raid_data || null;
}

export async function createRaidGroup(account_id: string, week_code: string, difficulty: number): Promise<void> {
    const db = await getCryptoHeroDb();
    const raid_id = ch_get_raid_prefix(account_id, week_code);
    const ch_raid_data = {
        raid_id: raid_id,
        difficulty: difficulty,
        account_ids: [],
        boss_kills: 0,
    } as ChRaidData;

    const raid_data = await getRaidGroup(account_id, week_code);
    if (raid_data) {
        throw "Raid already exists";
    }

    await db.collection("raid_groups").updateOne(
        { raid_id: raid_id },
        { $set: ch_raid_data },
        { upsert: true });

    await joinRaidGroup(account_id, account_id, week_code);
}

export async function joinRaidGroup(account_id: string, leader_id: string, week_code: string): Promise<void> {
    const db = await getCryptoHeroDb();
    const raid_id = ch_get_raid_prefix(leader_id, week_code);
    const raid_data = await getRaidGroup(leader_id, week_code);

    if (!raid_data) {
        throw "Raid does not exists";
    }

    if (raid_data.account_ids.includes(account_id)) {
        throw "Player already in room";
    }

    if (raid_data.account_ids.length >= CH_RAID_PLAYERS_COUNT) {
        throw "Raid is full";
    }

    raid_data.account_ids.push(account_id);

    await db.collection("raid_groups").updateOne(
        { raid_id: raid_id },
        { $set: raid_data },
        { upsert: true });
}

export async function saveRaidResults(raidInfo: ChRaidInfo): Promise<void> {
    const db = await getCryptoHeroDb();
    const raid_id = ch_get_raid_prefix(raidInfo.leader_id, raidInfo.week_code);
    const raid_data = await getRaidGroup(raidInfo.leader_id, raidInfo.week_code);

    if (!raid_data) {
        throw "Raid does not exists";
    }

    if (!is_testnet_env()) {
        if (raid_data.account_ids.length < CH_RAID_PLAYERS_COUNT) {
            throw "Raid is not full";
        }
    }

    if (!raid_data.account_ids.includes(raidInfo.account_id)) {
        throw "Player not found";
    }

    if (raidInfo.victory) {
        raid_data.boss_kills++;

        await db.collection("raid_groups").updateOne(
            { raid_id: raid_id },
            { $set: raid_data },
            { upsert: true });
    }
}*/

/*
 * end raid blockchain replacement data
 */
'''
'''--- utils/backend/pixelpets/fight/core.ts ---
import {
    getRandomNumber,
    clamp,
} from '../../common/utils'

import type {
    PlayerData, PlayerLoadoutData,
} from '../helper/types'

import {
    BattleInfo,
    PlayerInfo,
} from './types'

import {
    generatePlayerInfo,
    getExpForLevel,
    generateCardStats,
} from './utils'

import {
    getCreatureData,
} from './utils'

import {
    calculateDamageOnDefense,
    calculateMagicOnResistance,
} from './utils'

import {
    isPlayerAlive,
    isBothPlayersAlive,
    getWinnerAccountName,
} from './utils'

import {
    getExpectedRating,
    getNewRating,
} from './utils'

import {
    LoadoutSize,
    PetMaxLevel,
    PetExpGain,
} from './utils'

export function generateBattleInfo(player_one: PlayerData, player_two: PlayerData): BattleInfo {
    const p1 = generatePlayerInfo(player_one)
    const p2 = generatePlayerInfo(player_two)
    const battleInfo = new BattleInfo(p1, p2)
    let multiplier = 100;// handicap multiplier

    // if (player_one.player_rating >= 3000) {
    //     multiplier += clamp(Math.round((player_one.player_rating - 2980) * .05), 0, Infinity)
    // }

    for (let i = 0; i < LoadoutSize; i++) {
        const playerInfo1 = battleInfo.playerInfo1
        const creatureData = getCreatureData(playerInfo1.creatureTypes[i])

        battleInfo.player1CardStats[i] = generateCardStats(
            creatureData,
            playerInfo1.rarityTypes[i] + 1,
            playerInfo1.creatureTrainLevels[i],
            playerInfo1.creatureLevels[i],
            creatureData.evolution,
            playerInfo1.creaturePowerLevels[i],
        )
    }

    for (let i = 0; i < LoadoutSize; i++) {
        const playerInfo2 = battleInfo.playerInfo2
        const creatureData = getCreatureData(playerInfo2.creatureTypes[i])

        battleInfo.player2CardStats[i] = generateCardStats(
            creatureData,
            playerInfo2.rarityTypes[i] + 1,
            playerInfo2.creatureTrainLevels[i],
            playerInfo2.creatureLevels[i],
            creatureData.evolution,
            playerInfo2.creaturePowerLevels[i],
            false,
            multiplier,
        )
    }

    while (isBothPlayersAlive(battleInfo)) {
        for (let i = 0; i < LoadoutSize; i++) {
            if (battleInfo.player1CardStats[i].health > 0 && isPlayerAlive(battleInfo.player2CardStats)) {
                let enemyIndex = getRandomNumber(0, LoadoutSize)
                while (battleInfo.player2CardStats[enemyIndex].health <= 0) {
                    enemyIndex = (enemyIndex + 1) % LoadoutSize
                }
                battleInfo.defenderIndexes.push(i)
                battleInfo.attackerIndexes.push(enemyIndex)
                battleInfo.allyTurn.push(true)
                rawExecuteAttack(battleInfo, i, enemyIndex, true)
            }

            if (battleInfo.player2CardStats[i].health > 0 && isPlayerAlive(battleInfo.player1CardStats)) {
                let enemyIndex = getRandomNumber(0, LoadoutSize)
                while (battleInfo.player1CardStats[enemyIndex].health <= 0) {
                    enemyIndex = (enemyIndex + 1) % LoadoutSize
                }
                battleInfo.defenderIndexes.push(enemyIndex)
                battleInfo.attackerIndexes.push(i)
                battleInfo.allyTurn.push(false)
                rawExecuteAttack(battleInfo, enemyIndex, i, false)
            }
        }
    }

    battleInfo.winnerAccountName = getWinnerAccountName(battleInfo)
    return battleInfo
}

function rawExecuteAttack(battleInfo: BattleInfo, p1CardIndex: number, p2CardIndex: number, player1Attacking: boolean): void {
    if (player1Attacking) {
        if (battleInfo.player2CardStats[p2CardIndex].speed > getRandomNumber(0, 3000)) {
            battleInfo.damageDealt.push(-1)
        }
        else {
            const magicDamage = calculateMagicOnResistance(
                battleInfo.playerInfo2.creatureTypes[p2CardIndex],
                battleInfo.playerInfo1.creatureTypes[p1CardIndex],
                battleInfo.player1CardStats[p1CardIndex].magic
            )
            const physicalDamage = calculateDamageOnDefense(
                battleInfo.player2CardStats[p2CardIndex].defense,
                battleInfo.player1CardStats[p1CardIndex].damage
            )
            const finalDamage = magicDamage + physicalDamage

            battleInfo.player2CardStats[p2CardIndex].health -= finalDamage
            battleInfo.damageDealt.push(finalDamage)
        }
    }
    else {
        if (battleInfo.player1CardStats[p1CardIndex].speed > getRandomNumber(0, 3000)) {
            battleInfo.damageDealt.push(-1)
        }
        else {
            const magicDamage = calculateMagicOnResistance(
                battleInfo.playerInfo1.creatureTypes[p1CardIndex],
                battleInfo.playerInfo2.creatureTypes[p2CardIndex],
                battleInfo.player2CardStats[p2CardIndex].magic
            )
            const physicalDamage = calculateDamageOnDefense(
                battleInfo.player1CardStats[p1CardIndex].defense,
                battleInfo.player2CardStats[p2CardIndex].damage
            )
            const finalDamage = magicDamage + physicalDamage

            battleInfo.player1CardStats[p1CardIndex].health -= finalDamage
            battleInfo.damageDealt.push(finalDamage)
        }
    }
}

function givePetsExperience(player_data: PlayerData, enemy_loadout: PlayerLoadoutData[], player_won: boolean): number {
    const player_levels_avg = Math.round(player_data.player_loadout.map(x => x.pet_level).reduce((sum, current) => sum + current) / LoadoutSize)
    const enemys_levels_avg = Math.round(enemy_loadout.map(x => x.pet_level).reduce((sum, current) => sum + current) / LoadoutSize)
    const __diff_levels_avg = player_levels_avg - enemys_levels_avg
    let finalXp = PetExpGain
    if (player_won && __diff_levels_avg > 0) {
        finalXp = clamp(finalXp - (__diff_levels_avg * 3), 15, PetExpGain)
        if (finalXp == 0) {
            return 0
        }
    }
    for (let i = 0; i < LoadoutSize; i++) {
        const loadoutData = player_data.player_loadout[i]
        if (loadoutData.pet_level < PetMaxLevel) {
            loadoutData.pet_experience += finalXp
            if (loadoutData.pet_experience >= getExpForLevel(loadoutData.pet_level)) {
                // loadoutData.pet_experience = 0// this is done in simulate-fight now
                loadoutData.pet_level++
            }
        }
    }
    return finalXp
}

export function updatePlayersAfterBattle(winner_player: PlayerData, loser_player: PlayerData, player_won: boolean): number {
    // scale player's pets
    const expGainWinner = givePetsExperience(winner_player, loser_player.player_loadout, true)
    const expGainLoser = givePetsExperience(loser_player, winner_player.player_loadout, false)

    // calculate players new rating
    const winner_expected = getExpectedRating(loser_player.player_rating - winner_player.player_rating)
    const winner_rating = getNewRating(winner_player.player_rating, winner_expected, true)

    const loser_expected = getExpectedRating(winner_player.player_rating - loser_player.player_rating)
    const loser_rating = getNewRating(loser_player.player_rating, loser_expected, false)

    // set players new rating
    winner_player.player_rating = clamp(winner_rating, 0, 65535)
    winner_player.matches_won++

    loser_player.player_rating = clamp(loser_rating, 0, 65535)
    loser_player.matches_lost++

    return player_won ? expGainWinner : expGainLoser
}

export function updatePlayersCardStats(battleInfo: BattleInfo): void {
    // Ed does this in client, I don't know the need
    for (let i = 0; i < LoadoutSize; i++) {
        battleInfo.player1CardStats[i].health = battleInfo.player1CardStats[i].maxHealth
        battleInfo.player2CardStats[i].health = battleInfo.player2CardStats[i].maxHealth
    }
}

export function getPreviousPlayerData(player_data: PlayerData, player_info: PlayerInfo): { rating: number, pets: Array<{ level: number, exp: number }> } {
    const prevPetInfo = player_data.player_loadout.map(x => {
        return {
            level: x.pet_level,
            exp: x.pet_experience,
        }
    })
    return {
        rating: player_data.player_rating,
        pets: prevPetInfo,
    }
}
'''
'''--- utils/backend/pixelpets/fight/types.ts ---
/*
 * main fight classes
 */
export class PlayerInfo {
    constructor(
        public playerAccount: string,
        public playerRank: number,
        public creatureTypes: Array<number>,
        public rarityTypes: Array<number>,
        public creatureLevels: Array<number>,
        public creatureTrainLevels: Array<number>,
        public creaturePowerLevels: Array<number>,
        public creatureExp: Array<number>,
    ) { }
}

export class CardStats {
    constructor(
        public maxHealth: number,
        public health: number,
        public damage: number,
        public speed: number,
        public defense: number,
        public magic: number,
    ) { }
}

export class BattleInfo {
    public winnerAccountName: string = '';
    public rankChange: number = 0;
    public expGain: number = 0;
    public player1CardStats: Array<CardStats> = new Array<CardStats>();
    public player2CardStats: Array<CardStats> = new Array<CardStats>();
    public attackerIndexes: Array<number> = new Array<number>();
    public defenderIndexes: Array<number> = new Array<number>();
    public damageDealt: Array<number> = new Array<number>();
    public allyTurn: Array<boolean> = new Array<boolean>();

    constructor(
        public playerInfo1: PlayerInfo,
        public playerInfo2: PlayerInfo,
    ) { }
}

export const ElementMatrix: number[/*attack*/][/*defense*/] = [
//                  Pet     Onyx    Fire    Water   Electric    Ghost   Plant   Psychic     Sand
/*Pet*/         [   1,      1.5,    1,      1,      1,          .5,     1,      1.5,        1   ],
/*Onyx*/        [   .5,     1,      .5,     1.5,    1.5,        .5,     1.5,    .5,         1.5 ],
/*Fire*/        [   2,      .5,     1,      .5,     1,          1,      2,      1,          .5  ],
/*Water*/       [   1,      .5,     2,      1,      .5,         1,      .5,     1,          2   ],
/*Electric*/    [   1.5,    1.5,    1,      2,      .5,         1.5,    .5,     1,          .5  ],
/*Ghost*/       [   1.5,    1.5,    1,      1,      1,          .5,     1,      1.5,        1   ],
/*Plant*/       [   1,      .5,     .5,     1.5,    1.5,        1,      .5,     2,          .5  ],
/*Psychic*/     [   .5,     1.5,    1,      1,      1,          2,      1,      .5,         1   ],
/*Sand*/        [   1,      .5,     1.5,    .5,     1.5,        1,      1.5,    1,          1   ],
]

/*
 * bot names
 */
export const BotNames: string[] = [
    "Deatomannryu", "Foxysbranjo", "kiankrondep", "CoCaaulo", "felichbeoxBr", "Goldenkirf", "happawkb", "kiniwitc", "Maalov", "Le Olzor", "Ziemuradeaky", "OneNubbe", "Joaonspe", "MrJaierrabbe", "LinkudaCypeh",
    "TomCilol", "GenGrind", "fattouzy", "MrLundenser", "ItsNunny", "Eggbaalmo So", "Zafiarco", "Quacanda", "IroHanti", "Jacoen Cudly", "Prinhinu", "Hannad", "Zsologap", "Kinghe P", "Bushimuy",
    "Ashlemli", "Puffarry", "nekoruna", "niqqhefarry", "Bambavom", "Georeoma", "Ametonce", "ne gagal", "jumpeowuizkl", "alanpeci", "Ianusdowy", "PanielipiAka", "CapsroflZARU", "Gaitalha", "Koseeh",
    "Ridauanr", "oranlyin", "NuaDstwaltze", "romaruce", "Deiveona", "Cecyracjorl", "comaheliradi", "AK Nafia", "Fawwrky", "Jappfoxy", "Karantis", "Fagalacktric", "Utkooloe Do", "Alteinsl", "etozarkSies",
    "sosiouft", "WykohatGeenC", "Jereathaxan", "realusti", "Brinroba", "AlmaUCK ltan", "jacqmir", "KOOLsiwdener", "benzndre", "Bitculiuvhlo", "WindergeiLTa", "SmilALIN", "A FalueWquez", "Ueslmarg", "Umbrezihvero",
    "pipe Fan", "arkaapezlbas", "Jumpazujadma", "rossjinnkylo", "Cloujgamntas", "ryoszaac", "Gabeaxim", "Genelavi", "Meduxper", "CdaMsuan", "Shujn SinPan", "SHADathi", "Androxel", "Pheoizim", "GANDucky",
    "Onindivatoli", "ryananal", "Avalragoerer", "emadlMaZ", "Wakeobzlt", "ham utis", "Laviropeicsw", "Leniinot", "Lilaucadacle", "Jackpple", "ohthoxarltas", "Bobszure", "Jumphostniel", "LeFracob", "SuPeolfimbid",
    "Iluhoob", "edisezmo", "Oniwugog", "Contariusher", "Ateubbua e", "Noahathe", "SerMectoeon", "torosycM", "icalzyBumir", "kidgiankidic", "gamipic", "Robooror", "ElPoinkokach", "Papaenis", "Maizobinha",
    "Pedroisothan", "Marccyyyka", "Unluhinopane", "poishomagaKu", "jamahangCI", "CARAamor", "Exevourk", "jameovaTllye", "tuflallatinh", "The awii", "mlodherasice", "KobiatOf", "Rubekari", "vovaar R", "Ricooul",
    "nsboilFrlist", "EFISerocrtal", "Karmldo", "Lewiarko", "Moocapeu", "Bennuckl", "Tankpplettyz", "Alonradelopi", "Dylaarrckame", "cadene Berry", "KanioocheSpo", "Crutodhiinoa", "Oasiexe", "Catclentndri", "Supeheid",
    "Gabrallo", "Adruybee", "MimorimRlexa", "Lynatall", "Adamukun", "Carooker", "Emptanty", "Skooacke NIEL", "MaltineSnisr", "LianDare", "Brufoice", "Daneopplcife", "Ibisirecird", "EL Fonkulas", "MortrTin",
    "Tor amiptic", "minecnod", "StarheAnixes", "Kappbsum", "A L kam", "Alisnimakohe", "TheCOOLYrosa", "gianhoco", "Gustmigr", "akayucky", "MA nut", "BotartesakNo", "WPG egitozy", "Kikakowlikt", "Dogecy Nam",
    "Niloikto", "AngeaceT", "Cybaain", "fabiinst", "humureshgJun", "Kamuohirubb", "Woffkiap", "VISEaena", "Vortan W", "Shazndo", "JacoostIaLom", "Amuqjvenliso", "FiLLenta", "Gustigri", "milebann",
    "Etnascarpple", "YBFF Ran", "Pracsdoieas", "UrMaarcoreit", "Azalydraint", "CaptXOLE", "bitbrokolton", "Kingiltr", "Vaganfikster", "SirRfter", "evilANY", "Lavaishoce", "volbostC", "Trozodaptai", "blazucif",
    "Forkcareasma", "Elbandia", "Burulext", "Midigly adi", "Soutmegaspie", "Kseralke", "lkohoby iake", "Jaefavvaumin", "oso edne", "AbriaBR", "blokvont", "exemenouito", "mostcyyykow", "Ekisillo", "RaylaxLilate",
    "orcuezbagasu", "Milduxus", "Alejdriaegos", "Xeroshidckpo", "NoNauy", "Blueogueyman", "axeleamFy Gu", "Zorpnivemory", "Hufeycoopeli", "Kyjiedox", "ganjuzke", "Roshkkampusd", "Ugetayma", "Xiahedlo", "Melvaysobero",
    "Mystssas", "Acidiogonath", "SaburSebhino", "macaatsusude", "Draksgei", "Zipptoolilig", "nomkuseyrvii", "Gaberomd", "AcoIicol", "Raytmerithur", "Crabiangiapa", "Gkoji", "asheorle", "Actsornoco", "politiennnna",
    "Winnl Bi", "seammilk", "Evililia", "Raptulki", "Kyzoord", "Eldice A", "Sparelin", "RoryringZARU", "adiaLIPS", "FirezOh", "Apolisen", "cypserer", "loriyukud So", "RayDerst", "plouhthe",
    "shukeepatret", "derkarryJeff", "karoatOfllpa", "ThRoeeka", "Koohtim", "Pan appy", "NerdFIN", "aspiores", "RedBhado", "drajobycate", "diegodia", "iGoouck", "Chefiendavit", "krys", "Nazhctog",
    "Jeff Krso", "SirWergebada", "Sephtennlian", "Rookions", "Azuranah", "Rodnedredut", "Vakoegishio", "Yajmeral", "Usuuemeb", "Heavwink", "Jimbinja", "Khilen", "Trolaba", "Nazhonst", "Nikkavin",
    "ArchDEMON", "Darkhave", "Tombakar", "Arieavenluna", "Azulevradara", "Claue bonkDi", "Avezl Hu", "AzkaameKrone", "Grayucchmbin", "aspiobal", "feargapasain", "Caiohe", "notrheCr", "Pinknvismcun", "Jaydppop",
    "JEAN", "Faurar", "HaaCacre", "Heinohn", "Elizuroi", "Sturung adde", "Khilxilo", "Ninjose eGre", "Deasocko", "Gullolhk", "Hercistepes", "Goldffpe", "Acaduckamevi", "Bacorman", "yoelnne",
    "denimuis", "NixIweez", "Raptellama", "Overlakkza", "Crooehrmdman", "matyoize", "Chleuyuk", "gunzaxas", "lukel Mu", "Equiherbmcat", "Billegad", "Nameomeocash", "Leksokok", "Demoatre", "Anonalf",
    "omegrava", "rodgkottred", "Tomiatarder", "Bennislechan", "Morseyon", "Liamaspozjon", "artmane", "Freedika", "Smilangi", "TheMrsan", "Lovlome", "MooseroXmon", "Kinyurdeolf", "Veyrordn", "Kasaantsiesi",
    "eepoogo", "Primceshnta", "Timolain", "Efmidmir", "Contotieesme", "Rapnanil", "EskaandeexSe", "Antewaprgio", "Reflanda", "Drawaitmtoma", "Goodceptacta", "Vanhilan", "SamuartebSon", "LIFEeroc", "loroanie",
    "Butmowel", "Keropina", "Terrpiko", "BalbinsW", "Izgeeros", "Guroenny", "Riccpect", "Maisirileent", "soulbeli Da", "Lurvhe Shi", "Lucaadarhann", "fazeeass", "Skyrrkan", "boopheon", "Jupieads",
    "Geray", "Likuaionsgar", "Kamilexa", "georacon", "enkiiste", "andeoellkas", "Piporeenrbar", "webbeerautto", "metaigmurae", "vlashang", "Adolrait", "Alfiestrlikt", "Sorilvar", "Lautldos", "drubevyamor",
    "SouUuria", "firewitoen", "YISU", "CerbVinilufe", "leonrosephea", "Vaniizhuyum", "kiriacieanel", "Natuavpsklo", "CasaGYP", "viakgaLaeloz", "madelysi", "PapirMeto", "Nighytnt", "Yourherohnka", "Doggiragiron",
    "SanglanDhnaw", "JackamerdTop", "DunnopilNono", "Yapsaaew", "NaleSKAR", "Raveliss", "yellucky", "sethiberrisc", "Luiztto", "Johnzali", "Obamztjanhbe", "Snaknkle", "zergatst", "Muhtrtar", "RautyteBanks",
    "Atzmomnustav", "nextajni", "grilmopo", "AiseARGATomo", "Arclargo", "NebuTGR", "Enyaharprler", "demeuspere", "Cronrato", "madmaryM", "allamegaanks", "Oninorth", "xXJaoveadow", "sofinabe", "Soraalru",
    "Ovidikru", "Alphllah", "bounenny", "AdamebaOvis", "Kartiffa", "landcerindo", "Guccabad", "xkimivel", "EsSsgoreltre", "Kungxpos", "Pedritte", "Hopefmetolf", "tarammaumeFa", "CandeFixny", "Fallabactic",
    "bontagarionl", "Ohamorotsy", "rentngin", "Hyukllid", "Merlesqundra", "Traileme", "aniarthu", "MarvukuO", "Dartuzuremi", "MankerryLEL", "mvaladCa", "Hridaidu", "Admiohan", "Auurendo", "Xgdan",
    "julikrosncen", "Propilgo", "supeerbe", "Fealonge", "jlaueng", "Danduduf", "Skymbelenki", "Holyuliu", "Starait", "Deivorpenicz", "AKA Taeda", "putuzanrama", "Sir uovo", "Ammyhoenname", "andrexte",
    "Magnaedaevil", "Bereupperten", "mkotuanazytr", "Breaalilody", "erechonazol", "snowentlabga", "llaingietmat", "Ahmeorenunto", "ItsAlantheu", "drophotoray", "punkuinsexei", "oxfonich", "SirpackM", "Cardorstlfyr", "Rafaoose",
    "davierka", "MoToon", "Von abbebreo", "GabiPand", "Eevenubi", "Yoriathpmonc", "Lennhiliotik", "Whitreatsus", "Bottlycapai", "entoquin", "Noobrewa", "Takoachn", "OnixyesO", "Markallmdrew", "Nudiotere By",
    "SukiirJo", "hexedriaingo", "Overuukivaro", "Drevlexa", "Burgarkiri", "Meriuliorly", "Yisuikit", "Colmyder", "MOMO", "Thicayrotlin", "sakaLIOD", "Dangavenbmor", "StarnreiLUCK", "ZenDriff", "TheNmpGuatox",
    "Powee", "brasasar", "KarooltveK", "AusxoRay", "rickabal", "Bort", "MAKA", "karsin", "sadulect", "smallREST", "valkrablexro", "Eggbelab", "Avilerem", "LordroBouavh", "Jerevale",
    "turtuzzy", "crooazel", "Antridga", "Heromaowond", "Assaasa", "Infianty", "Samorisccaj", "TioJelde", "chilripl", "jakslexu", "Kachuma", "Majoilba", "Muncaxga", "Animabloraut", "haadon",
    "IceSagne", "allapuntris", "Pingalleubak", "Il Seffe", "Birbamuiral", "Failemar", "Siriuck cobb", "jakortiorkes", "Spyrdora", "Yuriazim", "koltubbareo", "Saimrinckoo", "Cualhoma", "Cruorwinrtuz", "Ponaapso",
    "Hellidi", "Darkityqe", "Connicco", "Owarrue", "Matrlimiunte", "Mnveablougu", "Alijarri", "kenjrion", "Balaaleb", "Adusubbl", "Deatmner", "Denaorte", "Rajnayoizli", "Mietusti", "borbuigi",
    "AshTeygncle", "JautinchnTsu", "salaunda", "octolivii", "Julihyca", "Jadeermi", "Svenyukeas", "Bumbapu", "Warmungmanal", "Eevearra", "leanaxim", "Andrrugu", "XornaraZark", "Einslex", "Crisreepnato",
    "daniinsl", "yagoodiallia", "Burgapta", "jcoravin", "Wodzaniegic", "Flamscarfear", "TemmogYe", "Decrelys", "Dratddarbosi", "Angeikku", "flesuaki", "alexonebazy", "MacRapph", "anluoomkyo", "Vinzuyth",
    "Tairosiskima", "Blannfec", "DocSpeed", "ToSaeult", "arteerobuanz", "Statdikl", "Pikahili", "kickitch", "Toaseylotima", "Arnoold", "Ozzyisse", "Yololone", "Robetali", "Skycumekncen", "Hellisamdalk",
    "Oudeobidnpav", "Levubyss", "BazyHARK", "CrocorDT", "justxelp", "juliasy", "Pitenton", "Unifenti", "Wouteobap", "Johnung", "Jamieoar", "ALANambo", "Zoniord", "harpevilezna", "AceKyan",
    "Unhoyhi bez", "Piandobe", "Hammeddi", "Unclucky", "UganRYP", "Artho", "jeremphi", "Aripozza", "Lilieygi", "Vagahaz", "Psycl So", "EpiCanty", "AlexmRev", "Clauabriache", "Saskirusrox",
    "TangX", "Martilda", "Derparba", "The taye", "Cocaemacros", "bitsLove", "VaysllanvinD", "Maycrins", "Kaszutdaikes", "Docsnake", "Scuregab", "One dam zer", "KS Loitz", "Veririn", "brunoBalstei",
    "Red leCougar", "grusaddo", "Nathank", "Luxa", "Limeazim", "MrErnuse", "beefmojito", "Jereolo", "Althami", "Offiailotche", "Battabloeply", "Cokienguisty", "Diomhase", "Pizzenpa", "Potaidki",
    "Mirnorualdi", "Lennel", "TheLhavy", "Holyrazytron", "edritefarvey", "alvierob", "netaazujulel", "nampeithpria", "Creedriani J", "Mordners", "Secubaaewaa", "Inviisteivdy", "Javoocieayko", "Skitmanoy", "wenakana",
    "Lokenen", "Warimlet", "GenGrthu", "duduff", "eyesenwi", "ENOTodes", "EL Gucad", "pkarevee", "wixperil", "dzhoalfmeru", "CykarumB", "LoyainkMclit", "Raugomplt Bo", "Iasfreenboom", "derk Bug",
    "HansARAM", "pepel Chycho", "whoshail", "Crusuntemsin", "danpuanichol", "Fallost", "Garrorksrito", "Why igeranan", "EinsatyrnHav", "lentreemvidC", "animuppeavit", "Polaatovrael", "Demouuh", "Kadascar", "diogringbian",
    "bronalocka", "Pureumasrice", "Patrordo", "snoorich", "Midgunt", "gael hatuna", "Sylaome", "idathingen", "FNAFzaze", "Awakaari", "AlexinessT", "Ullyechb", "Derpinaritad", "Balomamige", "Detenthorolk",
    "allacarrphil", "Havocoob", "Risusledss p", "BigMbyssegri", "Nicoompi", "klimatorphil", "Zeroenpamfa", "xAviagradrew", "Forele D", "popa am rria", "moinaczk", "Adolafhi", "Omegzuko", "HumbaKaR", "Bob pivage",
    "Adefur", "antooz", "ziliostenic", "NotSooki", "Zonnustinrei", "DocSawon", "genungus", "Weebreenndan", "Huntostm", "GOD ppleilTh", "AdolonKa", "Piraerosidom", "lyrichihrERE", "Johnnifi", "Gamepikeinix",
    "FionheMollis", "erdanoki", "dotzthun", "God edro", "ivleacke", "JeriealPstle", "Diogandaadow", "Willilip", "LokyipFavine", "EngueowP", "afroreve", "MONSagiu", "Wissentuli", "Akroamie", "Yuvaolor",
    "Arwelexahish", "Aslaxych", "martordi", "Juddie", "CrokunYdxapo", "EBOO", "AdamuliaASEK", "Peruero", "El Harec", "Dudembeuer", "Psyclcob", "Oudesh K", "BruxuadaRALD", "Vinistro", "Reapepa",
    "Xileroximash", "Nosiliapsmic", "Enjou", "kitaonar", "OSSYmanolo", "Enaireemempl", "JonntheK", "Von egat", "ShakhishLLY", "Kenningeenn", "Scarsenbgotz", "astrticklaga", "Leylikanobro", "Natsrind", "zbusabbe",
    "Legirosieric", "alexvendrowa", "sadoanyipex", "Slaylmugrat", "Zalaumboltsu", "Nawiaudde Pu", "Kibeirae", "MarJatHizer", "Mr Tussy", "El CGood", "Foreeat", "GetBenakeen", "Bennafarng F", "Daleutte", "Kaluolid",
    "marizkaiozha", "razourdeNERA", "Magibdal", "mokailsz", "Niclenat", "Beanoleo", "Daaruist", "Ganducky", "Balta dijewo", "Tortwipe", "Luweinar", "Sergendontim", "AgituhuL", "therlasmmiot", "Mineries",
    "EartlowCmina", "Huhmardw", "LovaunkAnn", "Deltasta", "Toasijammpai", "Mattonra", "maajroontsuk", "sammass", "Edivalov", "Odkreyekgrat", "Scarrpad", "Readnule", "DrawiegouCar", "Raspnich", "binaneK",
    "Prinario", "lyrircaX Di", "whathatG", "Viktrups", "Vala a agust", "sticuphe", "Bezlinkl", "mostose uper", "The leinhark", "Archenda", "GeveukitxelS", "LeBrnti", "Vasttew", "Gameufuseku", "Sad xcel",
    "Lenialat", "Frosiano", "Erasalag", "SrToansedigi", "Propeanf", "Mayoalke", "Brouillu", "alexrienze L", "bontinglzal", "Atlakurcjoss", "Hugoyrge", "Nirioits", "DaisXkot", "KotheeJa", "Miniredo",
    "Doorackliden", "Dexteine", "joaoiruzbba", "Mitiinorgerh", "TeGeobalrisB", "Dangorvm", "xOpringr", "Aeroengu", "PolaotmAench", "Dirmetuk", "Mataobrarmes", "iijmasuklu", "ipadwelogram", "Ixyrnjoydiel", "Anubitor",
    "Sargerk athv", "Loilenisast", "Trisabeg", "Cyprolve", "TheCdamb", "luxteban", "Joreonna", "AnotarkHBard", "Distharlrry", "Haizombi", "Uchieniammel", "On Mnicarion", "Clymimmi", "ElRoorug", "allaexullan",
    "Senaatabred", "Nikkaizert", "Fisuoukaenni", "Alalathu", "mdisltra", "unknocko", "roinoly tman", "andeutek", "Athuobylls", "Indeiggy", "Banaeusl", "currruls", "Guizusti", "NlOL", "Kirawi",
    "Nabeaniu", "vinialetlwak", "Alexl Du", "Souvrrlarah", "Majathia", "Omegunat", "noobildr", "Filisuan", "Killeveenryu", "iconrtemlish", "Denmoltockan", "ExhaDeni", "orizrlav", "Acetatsu", "ASDFruna",
    "RyukameKekie", "kenhodri", "Pedoonnyutik", "santhaki", "Gooblapmtdem", "mateumar", "infoillo", "Puppssak", "miepccab", "Twisiunis", "Framoon", "Mikihoenweli", "Mortrata", "Scamroopchar", "Evilen W",
    "Escotibb", "HandedBa", "Hitmucky", "keeparrotten", "joseaumc", "Zakkujic", "maridruxti", "xbedashe", "whosapsteDuk", "bugsira", "HUNTudZioom", "Alexirro", "InviheRadrig", "Decezata", "Abudldtiiasb",
    "estaabba", "marsrifopphi", "grifhoencas", "Roseandg", "Dogeick dyba", "blazringdrig", "jellrabe", "andiluedmyl", "DirtTree", "Volbeni", "Supeunhi", "singentl", "Ximxmpir", "loteyBaJante", "Blitvori",
    "smigpud", "Baborcus", "DavinlucpNud", "Possarryead", "Omnerunogo", "Adamlan lin", "gamiaesenzil", "semaodmerneq", "Reibuki", "WeeaUSO", "Sonnen C", "RickheBaadi", "Bad URB Yoddy", "TheBuruz", "xenotopi",
    "La MECH lbex", "Grauahim", "Baueabad", "Miandonc", "WIDO", "Inquiburjicd", "Szatossallo", "Eizerkim", "damoizzodori", "Mazeere ruze", "kingilve", "alixfan", "GOLDnafu", "Suzyulia", "Hugoarba",
    "Assaliteonso", "Nanaiego", "Asiaothe", "gabrikasis", "RobooqMa", "Conafmetshax", "Oksonigm", "Safairty", "Blacathi", "Eziroast", "EffeaGna", "androshi", "avawranc", "TheMedlo", "Cheekarigodi",
    "isaainka", "TonDassa", "biozekoSUSS", "Gatoeezn", "theaicol", "Mojsesci", "SimGiinm", "Malcaip", "ArcOalai", "Achiconobot", "Patricol", "Perirekm", "Tonplvi", "Houn P Etach", "Alexlyae st",
    "Septlijanice", "AICAdiscang", "Wandaibt", "Marcasteilia", "AchiAtepotik", "icepever", "Ivanojal", "KempameX", "Rattevoreric", "pandnicotLaw", "xobaorefnito", "Reapeosordur", "Chotukioda", "mynaoros", "Kiddabri",
    "Kandyzylig", "Tuomayth", "Lanclexatect", "Shisciga", "TheJaiginaBa", "Pescrob", "Bizaight", "Heinalgr", "GeeGpang", "Kinkenpannar", "NEAMheoneZea", "Killlake", "Maxiystirma", "Ampihebi", "Ticoigorzio",
    "codelaus", "eartercu", "PaccridSessi", "Frededho", "Snakgametnoo", "Mizhsrae", "KevNoloM", "wissenurlind", "Altaump", "bogdongwhone", "Righopra", "quinuite", "Arkkrtur", "trivung rive", "Raptgor",
    "GeneRVAT", "Akkasa", "Dikrenri", "canoaibt", "Lazyart", "pinaadHazzy", "DJLiulia", "alpeumusjki", "Jackhyca", "Ghosshul", "someumquxblu", "Natehant", "aweslixxanki", "ilkounne", "Zorearrozysb",
    "grunon Ifia", "Mattichasolo", "YunoPtii", "Ciemnimoerz", "Bossemip", "Mediauckuble", "endlvent", "Yusuainbndro", "benlod pnim", "anthmopo", "Cencenverk", "MagAecodefan", "CanYoaodrdof", "MasoosunFro", "Kinghe Swoke",
    "All obby", "Poke HAV", "dabolare", "Macseohaisto", "Kandhunnbes", "NibbinTs", "SageNANA", "shinssasienn", "rainragogcen", "AhruERP", "Cybenion", "Toufozzy", "Extrendr", "Imuni peruda", "Starombrxie",
    "mwsastrotoll", "SilvirWe", "FoxiossS", "okanndno", "elmasluiperi", "IamJyBr", "Ichbapamsine", "obozhmed", "Arnoelax", "sumaasteton", "Namialukeek", "Heror Juevge", "ZeroustaGRY", "Onurlendtour", "eparunarzhou",
    "Alucs Ezerin", "DuderencksA", "Ysgruukithur", "Captungm", "thorkunk", "morendynrkis", "SouldwinMING", "DRAG P", "Darkinglrdon", "alasokermaku", "Lucaber", "danyl Smumcr", "Lukeanek", "GabranyX", "allaeoszrcy",
    "MeLiaroc", "OneAbsol", "arasells", "Estehimp", "Lumil", "Yankolfioden", "Adrihikr", "Sileakas", "Blaclocklanb", "Madaoppeple", "Ryneinus", "Osameli", "Akeyonto", "Edenkhy", "Aryaylor",
    "Burgeiff", "Arigrtar", "Argaathp", "Amikando", "Homeerbeu Kn", "Arifildaex", "Senyalkeguii", "paraaleb", "Ericuizgald", "Boraende", "CoCooldemori", "Flammopo", "MockuBobria", "Morsarry", "Viloemin",
    "Damfiknode", "WarTauef", "Rahja disafo", "LuscHICC", "Yangank", "Taurdreyvanp", "Wolfesee", "almieini", "Flassaacckki", "Feliouth", "Orelirvi", "loceheVa", "wissuyah", "Eskeeril", "Trifolan",
    "Atlailkmldri", "PakiheLa", "koziutisneh", "gnompace", "Royargon", "BeaigAt", "tomiaayd", "RuBiess", "Jerehe", "justtoolrcos", "olivajihkis", "Braiakus", "Decoord", "Deidandogo", "johntim",
    "noahlliampli", "Mineidra", "Hausucho", "yminuck", "glitntim", "Meahar", "Ionaay Ntes", "BRUM", "Marlisca", "zielrunganan", "SenzidiProco", "atteobzsqui", "mocduper", "Yuraystl", "yeriatsunati",
    "rafanrearday", "LetuordbACE", "Miravika", "Blipukitdrew", "dovaegam", "Carnasikpret", "edu end", "IronanFrte", "Evilafaviral", "Skotuice", "hinalimp", "Xerobochnkor", "Lianbliv", "illiakrehate", "Duraieff",
    "Unifrago", "Belladakcher", "badcakis", "anthavid", "An Alucaeric", "DismDyen", "CritrSeb", "Alexapuc", "Cybrargecirc", "Okruannnk Se", "Pitearom", "Nicoanadexro", "arieomastros", "Rockhlebobnu", "kazir",
    "origick", "Jueckoform", "Goodlzorpane", "Vectoolggius", "Admaunni", "Sorearts", "volbwadsters", "quteolorkvei", "TeldipZblanc", "NoromZle", "menoolsphley", "mikaaste", "jaceerryptio", "Valirgonltam", "insaasakkas",
    "Easoikainva", "Tonilter", "War reveahtw", "etozabbindia", "kiariddr", "Supeugre", "Yhorreja", "attougo", "Teraanek", "IceCsych", "Rorkkakwan", "OmegdivaseMo", "Medilexi", "Watceben", "beel The",
    "paulaBigro A", "barrohnnedim", "Ethearn", "LaTriadjoxs", "andrubpa", "AlfiadamyRed", "Eckaompaoctu", "Dannholi", "collvangitzl", "Stenzyla", "Gonkgnitlais", "Daarncle", "MidgLmi", "Aviluendoo", "Mozoilsomotu",
    "Deoshori", "airberdGkinh", "Mastrackanaj", "AlyDuccionDr", "badmenocckom", "adamabiz", "Pzeuiksxinro", "Glauickbti", "mateLeondura", "floxenne", "drewl Seuty", "Mirrhatl", "Primalsenz", "achulueO", "Cappidra",
    "Luizeste", "Dimmobor", "Remzimbi", "Ludeatan", "Deattarkedud", "BlacuxartCat", "Nanaruthps", "greiidne", "Orl", "Danteedlt", "Tanksych", "Sir eddHtist", "Sharoon", "Ropiamd", "sinsegan",
    "Wakeon", "pype", "Rodono", "Andrakiter", "Unicil", "MANA yes", "Kynekiss", "Trueir", "jonbkaiz", "Monika", "IviceAreke", "Busienav", "LaLiateu", "Xelaion", "Manyighozmul",
    "Swiriaraursa", "Darkeoga Lek", "itzLaeng", "Deadouchanho", "Johnuh dmon", "Finerroweh", "deaduank", "Johnord", "Makaukiy", "Sata Typ", "kaldeu Pnper", "Sundanso", "Ask amoslyel", "Doctummi", "arrooltzstor",
    "BennoNamttyp", "Pellahahflob", "Nucktardsula", "dansesty", "DrewapedCOPE", "salietaster", "Miraeaxnvito", "easteNoinetm", "Makrage", "Nognatrim", "Franarlo", "Lopreef", "Leonkado", "Fulld Toryan", "koraerocaken",
    "amorrisc", "kamoazGa", "daniarloielh", "Junklegi", "YesIhedeis", "INDI", "gameatie", "Atomtskimole", "No Mharl", "Rootigmalosi", "Nigmchiloeni", "amanuizt", "Red Vonnen", "Sladuan anpo", "andrboiw",
    "Reapummedgro", "davilladris", "guerivio", "Eckaempl", "Harol Rat", "ASIAblen", "Sinserne", "JanFametrosc", "Hedoicep", "Trollecttero", "Deatumpy", "Famealle", "aramawan", "Quacissrutyu", "Parkorsakejo",
    "Aforlisn", "boom vinota", "IM Tuxoraggy", "Happp", "Sbrooidm", "Aguivece", "Contearaleta", "DanRoda", "Embenoos", "DeniirWe", "chinoga", "Arifren", "Theoanic", "Ordeobi Bliph", "htonitol",
    "nicorachvels", "PARAones", "Yan hoco", "Phanlukende", "diegax", "TheCslan", "sappryst", "Leereydecsc", "hunttrik", "Spacroze", "Juuaornsnya", "Il Semer", "CladirBoenth", "milaancim El", "GATO nonym",
    "EntElpha", "wardel", "Nonougimdah", "acopikon", "Geraazelwald", "Rinknich", "Lazze", "leemnal", "Prua pim", "Visoazinuble", "alacanym", "kolomadyeBur", "Corokywa", "Yuichawnasg", "penwidne",
    "leliecteebre", "SkooSIAN", "leonbretonda", "Cainmand", "Takaakknbvil", "Omegikitster", "wadaemarlly", "asbrudzeadco", "klauaintdeyc", "eeliades", "Maromaqu", "YoDavez", "EmerrejaADEX", "nonxartoreya", "manklveeami",
    "yoob", "vinktach", "Infeopod", "Arthreen", "Slimllum", "The ohem", "Alliirescape", "Gwensund", "Dakioly anta", "Mildreenr Du", "cubatom", "ZauboctoePie", "orinukergBro", "Dann", "nicoired",
    "Petece", "Zhekopis", "lugikymennos", "IvanWESO", "Xaxoiga", "Sir exulnk M", "kostonst", "Visisnar", "Tannesudxlle", "soraupermeru", "Trozceic", "dkraranc", "Plaserra", "vinjuradning", "Skurlfa",
    "Savaashi", "Prim", "FillheILftor", "Maxxo", "AntiitDo", "vladye D", "Bottabbi", "Kapalex", "brunZeus", "chenWeek", "Saworock", "Lummoul", "Yellsmil", "GiansiaGck", "Panaimon",
    "expeaks", "Yuraarsincie", "Samsorefcieh", "Pheep", "alexabok", "Dirt", "Pyrgasso", "antpario", "swapapeTscor", "blacld Momic", "Famel Pasuidi", "eragexTh", "Omegdinpdret", "Akasamanarkg", "Glinanze",
    "FaoliRekxuli", "sergydrais", "cancndre", "alekasumeBea", "kohnye", "Underaximare", "Sorrredvisc", "tatluraS", "galuevot", "ArtiuckM", "chinaran", "MaDoorac", "Jorv ENIN", "Smugaxfa", "Taremans",
    "Mulkredoferm", "Rylsandrvely", "zanyslaybiko", "Smerrusaoder", "Arcachar", "oleghost", "DlesRAND", "Divepathssy", "artmhambEZY", "Ahgakmarazin", "AroVoisertic", "LeskoiTe", "Pixiobraotud", "KubIukah", "ArkyI",
    "Trucordt", "extelad", "Shinrex", "EnzouroSex B", "ZajemThaogun", "Ceikni Gnuka", "EmoteonD", "SkyHeanm", "Atlaastoat", "YesInfellone", "ilusattl", "danborqulse", "Gucihjunmx", "Giggsych", "Devoizel",
    "SweeocoBxx", "adveesse", "EcPchas", "YuukimuryHer", "The ankamski", "Grototre", "kespliveozer", "YastabieanSZ", "snaplasmnera", "AoShou u", "shahaptamdem", "Willbsolmerl", "Calvigelliko", "Lyzeumin", "Rourmaru",
    "alexalovrmes", "SleratliBard", "nexoon", "Ezekvanarito", "SanshePlid", "OneFerinbrie", "Kirpradewin", "eduholys", "Spikchal", "Crazaske", "DanyRedsppy", "LeGoomat", "Noboipos", "lordubin", "Zonaelip",
    "treaheRa", "Ambuottoueka", "ellikash", "Eye alew", "efeknfer", "Osirrthuie", "Swaiabu", "BlacospitGib", "Nardegab", "Affloara", "Jukeomey", "yindonzotEff", "LeBrroloin", "SaLoriel", "Legihikr",
    "Saddacha", "TheNaravuckn", "Balirestng", "Alemredratc", "Sageoriw", "erasonnoestr", "Silvndleetap", "Fancieud", "Aswoeorgst", "Typiickl", "Amikika", "Yusuroggodel", "Azmoatatraqu", "Kitsgand", "Yokadondrost",
    "FazelphaiKat", "Manaunnerxas", "olesola", "eusplyin", "Adepunnymi", "Acidrthugodi", "Wodzigus", "Deraokuhchon", "leobarle", "Somemjohzuro", "Harrasky", "Ojoxbbit", "Malaoaho", "Shamira", "Lendelikmbs",
    "Holyesonobie", "isiKeicc", "HeroitsiThe", "Vermlackkine", "Franldo", "IkkuaLok", "Georhite", "kyleoZor", "Elreitri", "Anotenise Cre", "yavgark imon", "PeFranic", "Reddrroo", "HATChesanzol", "Psycssak",
    "Haudalaxumbu", "lolioLeKrate", "Erasekoz", "SpicuanoyFhi", "kiriaptaRbIs", "Asteingykeju", "clouendr", "kespesmo", "catrarth", "Danyoukaruka", "funkornalica", "Lamesuu", "Heaveand EMEN", "Paulnsan", "Not rove",
    "Garbini rhed", "Freetom", "alexaedo", "whitarte", "Ashbndur", "JaiialeI", "Misuomzxsiel", "Argoigma", "Rohihe", "whytindy", "Vaniunna", "enryufloFISK", "Casthamo", "arthuLBaexan", "Aldoeekz",
    "Loulodri", "Holzsuhlmer", "Martaj Lutoc", "Scothera", "CdaMechbcus", "Dankolwaicak", "Salaztjachec", "Supeamer", "HaizazyPnkee", "Filsorkrmun", "Magntobonqui", "LokourDeusys", "Toilpaffposi", "Nostvigmrann", "cerdonas",
    "Geratis", "KypsenjieSom", "Propdam", "sexymits", "Zachuta", "Sailpathrkus", "Lalammo", "Maunerli", "Wolfroll", "TornhifreXer", "yokuickakill", "Goodord", "Bearemin", "Dorahado", "Beaootk",
    "Jazz", "Monoirgo", "Etnaery", "Tumbtololrus", "CapNarja", "Paiwendr", "Igorussi", "Cheshcap", "fajender", "CupCuronnwit", "Tigeilen", "emogarkisht", "Tedearkage", "Emdoicou", "Jestirtdommu",
    "Pipoenro", "stinamplstup", "Papaarco", "Fabiearb", "Malarma", "Polielik", "Greenowcu", "fellaias", "Donpasoneinc", "chalealPneri", "Anciuh", "Tyrrotsa", "Yoriavidux", "Zeseiss", "Cakeo Haxmanu",
    "Naczooha", "Undeinot", "uradameErten", "oatsimondus", "Wurmhibikamt", "Jadehaga", "Masyoble", "Graxanuungok", "luthizipon", "Tyraoude", "Yurahe", "Fergadij", "Fireel", "Ashtyric", "Opasei",
    "themlone", "Kirbnthoe", "MackPupoitzy", "Reimashertik", "Arrrarce", "Saraunth", "Harmelixiser", "Poologo", "Abelmyjm", "Jestheli", "Desuvery", "The lueb", "Zeksadma", "iSeaero", "AlidamcmiX",
    "Apfetoto", "Stateno ffei", "Onuralen", "israoote", "Helle Hi", "Ashelexk", "Nikoarma", "insijvenkolo", "Kintasyp", "Afroalmalede", "oscaucas", "oatsroxi", "Avalot Sedan", "Nazunory", "Shidomnu Di",
    "Humah Puyali", "Mugia C", "Capts Ezpple", "Steatarsinbo", "TheWerpydaBa", "hacksbra", "Enaiaide", "Son nyoue Ve", "IcedagegrGom", "YANTgrie", "Shadonovtryb", "iForeHonille", "Orbiahan", "Anujracl", "maxfinomotty",
    "Andeemmitrix", "DrahsGammwis", "Psaiunnyrshi", "Kingentoalos", "Missendo", "Scarnlym", "Lawra", "Slipunarfon", "Atendam", "dextaile", "Shazuno cann", "rafalect", "Dartombi", "Mejiwoortim", "BeamNOVA",
    "Rovevan", "kirtlime", "Jacsteq", "FUNTE", "Carloma", "Ghosiclaeloz", "Marccaruzeli", "Chesremis", "Hesuldor", "Lurvallsncan", "Alvaucch", "Alcrpfel", "Deroddie", "Ryneamue", "Facelper",
    "Bacoodne", "Copyduar", "Charcorpther", "SeiMoineycho", "Zaubkumadara", "Sergobal", "Scotubik", "Straavagamzz", "Virangel", "allamerf", "drubelph", "Arnonovetsik", "SpirFurvey", "Armaersi", "Nicoillp",
    "connongwerub", "Pokeincedanc", "Mistanryyeki", "Mordotm", "Sophigaba", "Lovano", "Shruavey", "Havoiniaeznu", "Tesieped", "Deatuto", "Zancot Kage", "TiagrMopy", "MaDomari", "Sisaicol", "yohbufei",
    "Hamlania", "Taseystoostv", "Oficille", "etcuolhanus", "Farmisak", "Monqanieenti", "Shadacemdori", "Nairobseyage", "jurzildr", "Morgollonz", "fredendy", "Truer de", "DJ Schor Tinh", "Matilets", "SiBaiktoimat",
    "Overrazo", "SpiroHax", "rhillfaf", "abraugus", "kingombisind", "lilkootb", "GoGaouis", "Codaduzh", "Axpeanieecau", "TexnlexPZAP", "Maltlche", "hasenodyazy", "drekrick", "abiginkuch", "Anhoafu",
    "takoffic", "Ofrarona", "Mickoblo", "Beasulogcher", "Minirixbchul", "Berlroga", "Cripara", "Brodndga", "Baloadco", "Aryahe D", "anthaharinor", "vlasineanwit", "LofnneArlaxe", "alpeutty", "yuut",
    "volbiduk", "izananizylit", "lpharyan", "One mithndol", "Balbampy", "yesyreat", "Axelndervima", "Animocalslow", "Vectylorning", "Yom uci", "Godhonza", "Azeivent", "mcnaojoexfl", "Johnrcelesom", "Coldrazo",
    "Jaad", "Crazljam", "ivanustu", "Killames", "Amplugseeyed", "Beanarry", "ArtNasy", "PREC", "Yochovaepisp", "KaTrugus", "Cesadrel", "Zornder", "mangslasviou", "cauderne", "Yugiumjo",
    "Jianateu", "farondre", "Calyltar", "Danti", "pauloshugers", "GonzuliuX", "Vivironz", "Owlilare", "Jotao", "flesree", "karkumse", "yanmartm", "Farmfir", "Exprt", "Vostshad",
    "Omoplend", "Marcenko", "Iriuhdgu", "Flarre", "Romm", "Risick", "Giriig", "Bbann", "josmama", "ProchePiach", "Stonleriohac", "Darkhe G", "LoXTont", "AsciupilBad", "Yaldoliifra",
    "Captazesho", "Zarristatus", "yvohdrel", "Sweervil", "Tobiyplolepo", "AnakalyfCASI", "JiCuroca", "PikaukKorape", "ozanael", "Joshenge", "AUGNitro", "Jeinoruauci", "Pracubannned", "kolyetrerrio", "Albeayra",
    "LoXiopeg", "Le Opark", "Guroiles", "Woroourathia", "Occuerry", "Akumord", "Aorrelta", "Jadeosielind", "Ace ubbe", "azumonut", "bonstsDa", "VectheDeuish", "Chinitbrmu", "muitello", "frozutis",
    "oscaaple", "Fillnclemazz", "milekumurlag", "jaliu telami", "Fisuorreafpa", "orseorev", "chaslineetom", "Yulouche", "only gho", "Shnalbas", "boopnderokan", "murindex", "SydoilaArius", "damiade", "Mercsimb",
    "Majokkuhtes", "Gnomhiag", "kysaatja", "JoseaAzu", "MyheZAK", "Antimberobar", "Senpanst", "Lilialco", "Sash", "Amrieta", "Dukoorek Mus", "Snowhogu", "Alukantomwis", "Shakstleli", "Papiroithida",
    "Amerumbl", "AnwianzaeZed", "Pilurozd", "Elawjet", "MikoI", "Jim", "Loreossj", "haxuez", "Lakkatri", "Erebil Mage", "PernSLAN", "jollanve", "letoniwy", "Dropanweames", "geeplSal",
    "TheLaze", "CybediBauser", "Helyndressia", "Kinglodzen", "Ichorigl", "Gromeni", "Dennoged", "Darkaas", "Pelorien", "Denezrai", "mariamka", "Jeffeste", "Czarlenirtin", "Razuaste", "mrjoekka",
    "Nomeanushnny", "PsycobokNico", "Treeenri", "Ixyrlextdy", "Markovetstei", "Kotoettr", "Addievenple", "mastatsuyHer", "viviathm", "kaitostocky", "roboiracon", "Alvihiag", "Xentarec", "MILE", "Boriost",
    "Derki", "gouierin", "yokouan", "kentuxor", "androefa", "Fandoker", "Zalaolku", "OmyZarry", "MyBaokem", "Igelmuny", "LORDotaku", "jujuva", "Goodaxbi", "Jefrruonii", "Mirtplo",
    "Cookasad", "Sillites", "Bradnurbibig", "Desuon Iarst", "Kaszzeinikes", "santonho", "Tuchelodlaes", "Kuriozze", "Bojahe", "chowassm", "Goldoren ACON", "Cladoodm", "Linelasimrad", "lucacemambie", "lenoong",
    "Erinilliic", "Hanshoma", "autireen", "Echoill", "andrsereito", "Blacsafi", "Braiwasm", "Randutca", "quirussa", "Lckyanil", "Huaahmetyson", "analonasterm", "Lummicolow", "Czariloo", "Iriuris",
    "Flylatoresde", "Sir emer", "Marydeektepo", "Nammzaze", "Evilainbrael", "YesIryceplay", "mikerigiazon", "Shamarlolt", "Dunnike", "salmaYum", "Wolfrist", "Toffursikoff", "KeisitCajolr", "Caprcapa", "Rosepple",
    "yurie Qu", "ricoynam", "Kumiwl Jhoo", "Jazeocknssy", "Sereeosz", "Osfaus", "Bubbead", "Calaga", "Deasraxigor", "Gaitamahmavu", "valloodlitt", "Lyzerrow", "GRONE", "Franfonsredg", "Kaspery",
    "Iwanasounty", "Ottoreo", "Mattilesl Mo", "Martskas", "Mistbdul", "Brosovkoline", "Afflgork", "Savihonbo Fro", "Buttorig", "Shitespa", "Stewoseilber", "Stathe D", "Raaiormiokie", "morearecerat", "Sambana",
    "ajprovae", "Gabrybor", "Joaoras", "Raptin", "Coroiki", "Barnelli", "Askeold", "VOLCEO", "Cesaogod", "Uchiixel", "Vincop", "toniteph", "ebouiahkutt", "faioazimman", "isajthanry",
    "guildzel", "Vastsa", "dimach", "lukylladdrog", "Stijarma", "Tensopsa", "lagmgame", "elieriedrche", "LIKEO", "BattAnes", "VieTed", "Grifoyga", "Loreeinillse", "Yukiack", "DeivheWa",
    "Cool am", "Bombache", "Diruamra", "Ainssamb", "Reorunurel", "RanLamor", "Akugunery", "Poliaris", "SaloANDO", "Auraord", "Georrich", "Ironmbersmin", "Lanchite", "Nesp", "Aviondy",
    "Gilveow", "Pycamarm", "Poioosh", "Mindemya", "Toksslan", "Platronieytu", "LogaOJIO", "Maneucio", "indeickl", "Arasmmy", "Josenais", "Poblrollmmy", "xXZaraeroXx", "deadokem", "Arekot",
    "Trolatty", "Demo Am", "Mentann", "GongnBruke", "HeyIekaaom", "PokeoTork", "Silemegu", "Zeusawn", "Lasahees", "Gyxeawli", "Aramark Hweys", "ZzeLco", "lordol walion", "kasnannn", "Matyenernaba",
    "MaeiheKi", "El Sorzi", "FireeeJa", "Mykealamkems", "RYT ricfinag", "Emdolsdynhor", "StonOT", "Kubuostm", "Derpatopkron", "XxsynalexX", "Chroedrichec", "Gabrhron", "Shiroladmyra", "Pastrait", "Mickreep",
    "alphind", "Yannnder", "Polieder", "Aviscli", "glacommy", "rezibann", "SupeQOQ", "supereeH", "MadPafav", "xVlalesx", "Kurtedre", "Enzonea", "Guigalin", "ChinlviteBai", "Cosmanny",
    "Yetkaxwi", "leileer", "Haylejecr", "AingbI", "Thoranek", "toroishaeaky", "Extrres", "Habeubudel", "Flaujiheaith", "echodasc", "Tapiooll", "Jere CAT", "Chogashi", "Keisintelcon", "Walsrimaom",
    "Tjokunbo", "FanTBoje", "artuuci", "zereinch", "ArcHanst", "Milkreds", "AterganduCar", "Rockorga", "Cripenki", "ToxigMo", "Absoojo", "Ryxcm Ke", "Mathtardvavl", "Videappyci", "Baselija",
    "Raaierwi", "Doglekofber", "Crymeibi", "anniikko", "Cookrazyviso", "Ripuisim", "Kindood", "Boyzarry", "finyhesi", "ConsSeal", "Kingmenf", "dnieocetni", "Arteroze", "Calvembonk", "LifertyD",
    "Shizaska", "CupCD", "andrimfo", "alsoexooite", "blubebsmnYde", "rorimOUT", "SajGrixisist", "Marmocommoy", "ZIPZOO", "Flaron", "Kundbdal", "SeptASSA", "Andyhinilave", "Trexchjeayhl", "Boreclipdaj",
    "TekMolonisy", "Loyau", "INemid", "Ebriiriuayar", "Semiivef", "NameooHowasa", "Pineerage", "DaBeonto", "Fontalva", "lioroefa", "Barbawre", "Domco", "Alz", "Gidasrome", "Manzole",
    "LinkR", "pincomTo", "Aridageftter", "Majaeeds", "HITLuaki", "kranylejnus", "Primecke", "Iskawant", "Ashebach", "Romairit", "Aephistin", "Blacrcuslyts", "Altetikyott", "IcyyustCecho", "Caculacktemi",
    "Swagakis", "Aritphonikra", "aarnabi", "Aweseyddayer", "Junrhadycamb", "Yalfentsu", "Logala", "Jabbinar", "SALTurse", "tramatryllup", "meltZacr", "bbtores", "rossrjosuebe", "Gabryata", "pifahado",
    "Realachibush", "Nautyeslrek", "Secouilpbegh", "banaigmaint", "Clowisca", "Bazyikol", "ferndalicarc", "Hideilol", "Killeno", "theRakim", "codyame loel", "Lafaitre", "uachbomirlor", "Matteignghto", "SHAR",
    "Dzotfrineen", "arlinsan", "chineila", "Zefook sz", "mariast", "AnImrin Zzer", "Elijabya", "ejayheLeOLCO", "Ririenoioph", "Fatiisch", "nissakiscole", "Angearedar", "Winsira", "Enyauenvgofa", "Crisshleckda",
    "Demoeall", "Rancingskali", "caazhannbpar", "Highucasavy", "Diabumpkkiel", "pongatra", "LudoocdiZARC", "ProAndel", "unbreofa", "Domiama", "ybdiermi", "valeakatgry", "Evynunay", "alphirMimos", "GunnlphaKatn",
    "UncligDa", "benoussi", "Lorducasa", "Stefuste", "pandLIO", "heldESIL", "Axiardwrefl", "EcarcoIs", "Ovidzufl", "YimSafxrry", "Headobleevor", "Basiizim", "Sabectov", "davilcha", "Retaaque",
    "Haizaini", "Killgrierro", "Hiddussi", "Alphovat", "Faceeu", "SergireMiopc", "Yuurumekughi", "kanearl", "FreavilTato", "Inesesynigop", "jokaarsa", "Deadudra", "Sandethalfet", "defeobal", "DanGrade",
    "Kaeleli", "iduzIndo", "Adamrex", "Wilsiorzgris", "xDynubkoozak", "Red andre", "Redoeviafear", "viakngelexyd", "Gundish", "Rainuluz Ar", "omegncle", "sleeanto", "Gearriye", "Darvural", "Catnaladx",
    "Darkac", "Olymdo", "Ranzupil", "Monoadus", "AluchadPota", "Rohianguti", "Kellpico", "Handuss", "Mememig", "Xurooksz", "Artorkarf", "AzgrI", "bagnsukatinh", "DoctarenDAC", "Jaceunatl",
    "Dregoraure", "Brobaitmtist", "Backncle", "Cariogi", "Malaanya", "Lordakiikura", "amaryBad", "Melvubyugla", "Riskhoen", "Cataanni", "Mindaca", "Plokimypiarc", "UnicaotiRAMO", "Ghosdriaeipn", "Noahulio",
    "meltrimm", "Dannfernail", "Victl", "Kaseydci", "Warcnfir", "thodoxyTriou", "Fattquigime", "Sodohleb", "werdsgei", "wedilmis", "Reepolannpai", "Nonoliogela", "Infeersidrei", "matoVES", "Deltandyaria",
    "Treelkav", "KvaKnottamon", "Zettooki", "GALASAR", "Flauohn", "Mayoiche", "Lewiyzbembur", "Amonkanalon", "Rambladi", "Tangoops", "Gearoxy", "Noelagno", "Junylamm", "Xuthrawl", "Lizaeowufos",
    "AleCateg", "TuJuventreyl", "Suzyempl", "Mildhe", "Missuestiara", "mengThinoque", "szosacon", "ericegibnJee", "Riwsornu", "Jacob", "dudumerilefo", "Arioima", "Deveu", "Semancy", "Boyiezey",
    "Awejadami", "Sisarasc", "Siralexd", "Sigmh", "CronThat", "haleewad", "mizieno", "Jellaserng", "Ninjajarsyse", "marsoich", "Navybbadiled", "Yamiikitomic", "Epicdsta", "john", "quitekre",
    "ARMYadar", "Yingdwin", "jockrigober", "Dieghe", "Chesni", "Nigm", "Joubliath", "Vortokid", "Mongpo", "TheLhomp", "Undeakon", "Ganeenaj", "NewRead", "Bokoelax", "Speeayongu",
    "tashATO", "Lukeelet", "IvatOLDE", "Remzappe Smi", "XxMoayMoxX", "Exotighisrix", "Primshio", "stonriti", "Rystastamass", "KitKayleeito", "Basiainemily", "RockolhaYPT", "Fierneestogo", "AskaheOrgeCa", "Zapaulia",
    "AmanlyDu", "Chroalamnqui", "KingceCr", "Scraohitvins", "ScubomanrgHo", "curtackTboon", "SergodTotron", "Hiarebsm", "Gevercad", "Anjiabrialin", "abarenz", "karehincci", "GoldKON", "Haharkim", "drozajni",
    "Riokiiar", "ROE ANES", "Endesaac", "Methiuli", "clinanan", "itaylack", "Indeatsunzy", "Kooprocke", "Loboansadari", "El Sizzm", "daviastevva", "Rustezio", "Stewepedtrin", "Ziillejiha", "MaYeurtl",
    "Pyroiggy", "Cham", "Luxura", "RAME", "werilche", "Terrob", "gazesdoildre", "Bropugo", "Tartinchmmie", "Xileadne", "lufeikeanla", "Fleuittl", "Codeamararam", "iliaincero", "Krisuper",
    "Summrisondor", "Cesae", "Karmextrnar", "elsuermi", "levihe Fio", "Waldrago", "Palaihirnner", "Dallnonitatn", "Kaneastezfia", "Angeionpeen", "olakidie", "halnogus", "Yopk", "jellhayord", "Sickariohito",
    "Nobounagndos", "kaicxel", "Sifehuisntig", "zsewordn", "MuSuKageory", "astrroom", "Kennabbe", "sidnhaggtila", "TheIommo", "kaziecto", "yslaordi", "Sanducaske", "aitainja", "Eskaj Khkis", "HunWrimsllon",
    "Incaakie", "Kiialexi", "pandpeedlami", "muleobbe", "saurnime", "vitoick", "Alfiinyx", "Mewseichfrez", "anneresh", "Webborbivonn", "ElMulivissya", "jojoshid", "SkubhtervinA", "Raptlendvizo", "The aiom Mos",
    "gouikottmany", "garceoLe", "ATGRmagi", "WandasuaPTY", "Kataatha", "linnshap", "azraessaokan", "Judie ja", "VoLKpard", "Aleatijnnis", "Aimnhebi", "Pharamesooky", "gg morzickMi", "Gunbamon", "LordoFre",
    "Sqwuoren", "vldiudee", "Sentocto", "Picaogudince", "yetkrFah", "Greeeichgnon", "Mnveojatgry", "Adamenenyzie", "Erencratmett", "hugorlav", "rayparalihac", "someierrmita", "Netowtaocs", "edwaingVofac", "ARMKrail",
    "Funndd S", "moraagot", "Samwonpalfor", "Bacoaro", "Mophanzi", "Sameawre", "Baropace", "Waddlabudie", "loseoine", "Rinkhestriso", "IDM ynea", "Firejunj", "Uchiddieake", "Wiyuir", "Borois",
    "Bonqol", "Quancio", "Kindui", "Ogampple", "Terrlausarke", "alejogna", "yancdhar", "AlexmpGu", "Sabeichs", "Jerexod", "Lubkhabb", "Ravoydarstor", "Overxperlar", "Martippe", "AdmikaInrice",
    "Karsxtra", "Johnunch", "Moosovyd", "Axiegore", "Zomaenio", "TengoCo", "LaxLunch", "Gaymhiroanto", "Oranypic", "IamJenk", "jannerteziak", "OkimvynH", "AvikakkorXma", "Jacoypow", "Bacoalaxti",
    "GodRil", "Aystegsfia", "maniapit", "Lostiguelode", "Haruaum", "MrMuul", "SupeFreester", "Evilran", "Righog", "Alexhrislta", "Ash iang", "Nikoolznosty", "Leonelornip", "Extrnner", "AlfioresNA",
    "Gogoomad", "Jedaarabpiva", "cheraqer", "Yuicrosj", "Mighrenc", "Beckbaa", "Crazree", "Skraanni", "Scrumpo", "Putrhomp", "Krita", "Raugeste", "Roldvyno", "GrotejaMivdy", "EksearryPixe",
    "fradmletist", "AdySosha", "Eitaargintis", "lolsanat", "Arcohibi", "arudndre", "Jokanipeseli", "NearYAT", "Arizasia", "LassleoluriH", "Lufearosrito", "bielRATO", "FuzzOLD", "Sainndig", "NARU",
    "Enaionk", "zizaontemnul", "Skycnowh", "Martreat", "NICO erren", "Venuics", "MEAT rich", "pyrookerlatr", "Snipeape", "Dyenritz", "Wolflex", "diogorvm", "elcouanx", "Adoreisslara", "Awakiber",
    "Dubsquid", "Pyrggois", "Poolurkachol", "Kevellio", "Spagshio", "DrMoirco", "RedSly", "Metalause", "Yaldudeb", "Pyrgindr", "Belmry p", "Nevebannxy", "kuripell", "Bossnsil", "Ole ripaki",
    "Combarpo", "Ryhiot K", "Yegoilso", "Voxirae", "edisseal", "Kekeicahtik", "FacepTashe", "Gameatarmbie", "Tritiniuied", "Valaikkurol", "Jhonbdie", "Adaiaven", "Trexonk", "TobienOm", "Fierimmy",
    "Adibramedead", "Kitsezoo", "rollanch", "Urarwyntrel", "iliauins", "Duckononptai", "Tronondo", "aital pirane", "Minserpy", "ilcaipe", "derplexnnor", "MariucklTon", "Iskaotmu", "Rickersttato", "Pussarosue",
    "Hopeluhi", "Tazluncadas", "GG Iarcu", "Luckmand", "Rubelfourror", "Hakazibaving", "coltor", "Jamnux", "ZetlioOrazy", "Nafuelta", "Aquilo", "SoSail", "Zaizukacola", "Bennrbal", "Biznvolvg Br",
    "Kuroordoealb", "Shownfam", "korbotet", "FBTeazlohoco", "Univapym", "Compome IKAU", "Aumeythilact", "Lazybbat", "tomaick gein", "Variednorgot", "davilimb", "Saltode", "hexxashe", "TheRorollo", "Mathronmnati",
    "gg aoelen", "Catti", "Janurall", "Killyree", "Franylpy", "OneTaize", "Eviloly", "JelliCur", "Ogamavak", "Kiriasle", "Drugvah", "Capeirim", "Dilaoaomam", "keKeovieker", "Catammem",
    "Wachotat", "saliedno", "Zombielo", "Ovidlimi", "ShinduarJuas", "Doesortu", "VyseUNTE", "Placanka", "Nikiatiscarb", "KapparBi", "diegnee", "BooHoung", "Ray ltar", "Necraveyl", "Pokeark Matiu",
    "Toucietz", "Oogihe", "PaulrWetresi", "Zteveero", "Lokobto", "Mageeman", "Brocuritele", "Mittecynckso", "Jadehemo", "Gameuh D", "Shupagik", "Mindaki", "AngekorMbman", "arahoili", "maliamDuaken",
    "fernekinampf", "Gammlabulazo", "Carlfra", "jeffyzze", "rahimoto Nam", "Romahoen", "Matteginron", "Persfirh", "Garrarto", "Bald Boomer", "Megaute", "Ruanlten", "Jererisknami", "Abelikiw", "Tisceeco",
    "Reddlvasvaro", "Darkegat", "Aegindy", "Darknifi", "Potwacazmon", "Atomondo", "Exhaike", "Yexelueb", "Draha", "Bibohado", "TheZaBig", "Jazptray", "Xonorza", "Maloomasiele", "Grinockeomal",
    "Gorumrra", "Joimrkan", "Darartayter", "Chibreys", "Toryhepoesom", "Mirteadl", "NiriAVID", "Uranjpre", "Dennuyufishn", "Unluhomante", "Pipeanebguia", "Vileoreseinc", "Excelphavis", "Replideembo", "Araclauc",
    "ItsYushegies", "Peeketkakora", "Lyalzaze", "Pornetre", "Youroci", "Entrhali", "Potanabb", "Lunapplector", "ahmerror", "Aledquidusys", "uniohemuders", "Starraft", "Turtatlangya", "Oragand", "JoshuaBR",
    "Proftomi", "MeowGK", "Ramb", "Estaacif", "Paulatur", "Unicuicates", "Papainix", "MonaipLenjoj", "Waldonalas", "Neveatabasto", "Rubbord", "FirultraNoir", "Shabinslusad", "Marcustyary", "USTadam",
    "Rukuartileli", "Cladappe", "Gabraped", "RexaonateBea", "FixmetBlughi", "Mikoamdaeki", "Dullkorp", "Togameenuk", "Temimagi", "AkanNEKA", "Bad canlo", "diedFar", "RareOgr", "Synsideddy", "Karnozyiago",
    "Aveiulka", "Remznhon", "Xantinit", "MainordPork", "Arcliszt", "Mainlive", "Wuioide", "Pylomorizbaz", "MyBalect", "Deteorde", "Captovig", "Poblhish", "Xerodsti", "Panonzakoca", "Flyloncz",
    "BogaGord", "Nortndrethal", "NatsacPr", "Godoiste", "KaMoaven", "HeXute", "Gabrheep", "Mimosych", "Thiandre", "Eleceroolam", "VermIDEM", "Albir", "AwakNEKA", "DImKrain", "MrWeinscsual",
    "alexelix", "mojtemp", "Tiloakasasha", "Alonael", "MrMuark", "TeUMU", "Spacrt", "Corehou", "Elkahyeazipf", "Unrecsid", "Albaoki", "Farmustakbro", "METAmazuban", "rossilkw", "zmannyFherat",
    "MeltaendHaz", "zhoulods", "martborymsam", "Bropomah", "edvikainifl", "Sinpalde", "Ameresde", "RanLekoz", "GeeGlweirou", "MaYenimarica", "lukiwais", "Askuunte", "MajoupOf", "yunuasypven", "SNYPesti",
    "Doisobaldrew", "Luxandobad", "NakVADD", "Amura", "YazGgentke", "Otarammyen", "Dullimese", "RandeyLa", "Atlaeallusto", "Loboegapimci", "MURMulta", "yukiainieLop", "austisur", "LostheZeckso", "astoybetzzan",
    "Net carr", "TUMN ifre", "ImBudd", "Sirazy", "Negrvili", "TalecePulko", "Syncsaac", "Baepurga", "Zvinabizrgon", "Oshiepaguncy", "eusiicto", "Kokyia Cckso", "War Meter", "Rosiybandrog", "Mikeandord",
    "Gameushe", "Squaou Knel", "Lawrabeleave", "Birdendeking", "Otectran", "Elle", "Napsddic", "Uchydent", "roryamah", "RexanjimeKub", "Levuolco", "natiosuk", "martarlo", "TheNopt", "Crowurio",
    "Assarasbacul", "Sparende", "celeigheaumz", "slavicou", "Adysedos", "kiervivs", "Bubuiine Nam", "Yokihind", "nataermi", "Frosero", "greearap", "Thaturn", "Mileoike", "SmitajtVatya", "raphlJef",
    "Siendria", "MacPunnyliva", "Karkferitoua", "Maksobbl", "Glau Conpav", "eliaat C", "Gameang", "zippatxe", "Mildamfi", "maligsse", "Rubyathuleus", "AveienhoTE", "Elinight", "Doppashmick", "Smetafak",
    "YaniNeedari", "Aumpyichi", "Aumpykos", "Rylshort", "papaya", "Faderady", "Nautiktoilen", "Makkrsene", "Aestasii", "Nelphion", "Hukina", "Lizard Man", "Polimo", "Azeal", "Wizzy",
    "Charles", "Eliza", "Walrman", "Spraenno", "Henkombe", "Lumiszat", "Wachothame", "Sir osto", "Matimoj", "BelkelabName", "JagsayDorret", "Lazyilvo", "Tyraazzd", "Senporis", "Kuruebuo",
    "Zararif", "Cracik", "Nandosmi", "Pinkiankas", "Happinjatsho", "Fibem", "Plach", "Doct borgget", "Joe QUAN", "Rat", "GunSinal", "NewRimolpera", "Tiscibit", "Avoxlwoo", "Gucciger",
    "Kachexy teg", "NewteLacneso", "Otreutcaot", "moerania", "Chroll", "squamer", "Rafarespo", "Ralyaikardu", "Spoen Om", "Pumperic", "Haularonilla", "Lasaruruhab", "Jaydarvaoyli", "Ugotarcoster", "Omoporth",
    "Kowaneakredi", "Hawk", "xNiczx", "ROMAesti", "Holfentebi", "Onin", "mcberish", "Mageolbr", "Gunbhakerail", "Only a ejay", "Floroshubody", "Esteovje", "the omat", "Matterp", "Yurahitakyo",
    "onreNHEG", "Slenulp", "Andyaght", "Frangien Ju", "Kappa", "Lossmy", "Oztroroni", "Kafuucky", "Suthoo", "Solononysy", "Tigearce", "Fallomme", "Zemerago", "Captawze", "Dextakii",
    "Supewen", "Raymrosi", "Thatwa", "Draglean", "Amiretz", "angissau", "lonerebrllou", "Tairyosshuff", "Homerist", "The urel", "DietPOH", "razokiss", "Pedrenilti", "Uchipoll", "DexsiliPenio",
    "SouvzMoncus", "Mordastr", "Meduicia", "Alphnvel", "Enveagmaikur", "IronorteTORO", "sadouspe", "gamiltra", "Swerr", "Anotrigo", "Cellabi", "Meorevmily", "Makuurpl", "Andrrusyrani", "Alekamer",
    "Makuentlnent", "Hardesmodena", "Epicholzi l", "Sqwuybet", "Sinpoxic", "Pycielo", "Joreumbauter", "Kamlag", "Egyprazynceg", "Evilrizzonto", "Roshezyr", "Marcucka", "Hqing", "Red dumbo", "Granrick",
    "ShaLewge", "Justlbaturdo", "Trivasic", "Micherra", "Zhekrosj", "Pandiuli", "Avilroko", "Carsinis", "Anteeity", "Sawcaul", "Unknvinx", "Matiukor", "Varamega", "Holzewto", "Monqarfi",
    "MrLuick", "Jonkaktuaos", "Lostever", "Mikeepcilami", "El Sjarn", "Drryk", "Dropsian", "Sodaerem", "Phoeucuost", "Lautatt", "Nesseril", "EvolavilI", "Macoario", "Suaroxaiceap", "Genezloptsun",
    "MrSeeroi", "Mentcridsena", "Luckrake", "Zahomacd", "Gwehltlitnap", "Banaoyal", "Agogreenbywo", "Novaunglriov", "HaoKbobo", "Afroumeg", "Ukaiarkcdiak", "Reydicva", "Yuukirmi", "Pinglejo", "Sageetylmtar",
    "Tykaslumavea", "Lemozost", "Skasomig", "Victanikath", "Ironendrtana", "Brasaldrezti", "Japprozd", "Crowerrempsy", "Pineighertin", "La Goseirryq", "Rockizou L", "Nosaippi", "Eridoina", "Cawfuar", "AceAille",
    "Obvirmax", "edst ast", "Amonvall", "Amonlesh", "uFromithckel", "Tilootat", "BezpstrokiDi", "Daesal Blan", "BACOkerr", "OmegaPoggers", "Delkawrewurt", "StenessLnnym", "Yerrce", "Lorderyrkvo", "Kaloumiz",
    "AteraKao", "feneetahleta", "Shimenenvazq", "Sneaaine", "SupeAXOR", "reinarpo", "AdilheGo", "ChesainZ", "Saneolo tric", "Psyceept", "Dipoddie", "Lakmentae By", "Coukmoh", "Tortaras", "Voltarva",
    "Tacozadz", "Tera Litnith", "Krydruhanry", "Pondzadz", "Gosuasumerod", "Crazithv", "Raidantemble", "Baboob tkoro", "Adimelumnsle", "Presoker", "Deeplapm", "Boneo", "Remeuthe", "joanonocadow", "KarnaPro",
    "Iskarinaenox", "manidiva", "Tannevinunin", "Tommlmeceopu", "Holyuxap", "Warnonzieese", "BearilwaI", "Kanilide", "SpagREEN", "Infoheng", "Dannirisesel", "Avilenji", "Darkamioiz", "Ozitumatre", "TheLetBican",
    "Skabolkv", "Galaevee", "The obin", "Psycishtyali", "LabiesuCerre", "Sellerst", "Jellendr", "luckhazzragm", "Dangeejwath", "Airtnee", "BlacotLillou", "Jacknapi", "Azulctay", "zuzvisenzloy", "Jemeerna",
    "Renkuilhhlap", "Artyacob", "LazzndleaChI", "Why buglrt", "Jakereenhino", "Nicoikto", "BurdudeKenfa", "Vennraph", "ArtHnfin", "Quacili", "Nighhownrvis", "Astaama", "Hugounkytaba", "Michilipruze", "Traiyrod",
    "Lordaulnne", "LosBiguee Mi", "Joacombo", "Lucaroba", "AnnamBro", "Ouktleop", "Webbzmo", "GRAN", "Mozoane", "KeisMINH", "isaaunte", "Jamsalgrnda", "Darkarceshik", "zhenTAGA", "Aganred",
    "Miditernta", "Askaakat", "ZzLavirlker", "Maceomasdson", "Alysopelan", "Nyoicosvnton", "Jeanngel", "Kandugin", "benlteve", "Aragodnejeem", "Alacillilone", "Raufombi", "Lihiiroile", "laleilirate", "Joe livezYum",
    "Huskelal", "Ovegires", "Onlyltra", "AnthmyZanenp", "Spagswalllow", "Xunsagehmar", "WinkRYP", "Eitaiabl", "Baseecro", "Andringl", "Psycpartiboy", "Zecaidne", "SouIkohnltig", "FantnerGnate", "DragikaZ",
    "DaytinkMnkee", "Inliamertorr", "Profso", "LaMirocopot", "Zoioello", "Mikeancio", "Battelek", "Trexini", "Berizireoppe", "Blatnott", "Arparyst", "Zizounky", "Watcalba", "Tootinkovori", "Dessltra",
    "EthazzIfe", "Wookemanmoy", "Adonelbeliot", "InteunFe", "Storilonimo", "Ptituckytnoo", "Spyreadsspai", "Sky outh", "ChasoneRnoi", "Chanavy", "Daweapzeaniz", "Fandylefostl", "Dantxpermes", "DogeiscodPan", "Jeriicol",
    "Vostueen", "ferrennynath", "riveronragon", "HankNema", "Dartucif", "NewRordh", "Elecannonco", "Jonaipistdog", "Inseceri", "Spawump", "Heroankais", "CaptireInati", "Econanicnter", "Anoncapesmin", "Cactabba",
    "Toonockovvri", "Yajmucky", "servlvan", "Viqualgapha", "Justlf E", "Peddurry", "LENASH", "Korvitou", "Meyeorta", "Hasgat", "Ventyne", "Azraade", "Anomark", "Tortoj", "Bastners",
    "Paridilg", "Kuruabrileni", "Brayabulint", "Alphicol", "Nocilect", "Khoetenm", "YongmmaTanti", "SayoruTu", "Comjron", "DasBK", "Beboour", "Civiruth", "Endear", "Kirilydr", "Spriltur",
    "Luiznime", "Walaaprarsli", "Supeickd", "Goranc", "Skraomasrius", "Epicarku", "Techtudlmoth", "Jokoannycomi", "Hammedro", "Sexyrola", "Lanaauza", "Rabbapa", "Huaahans", "Genegadd", "Sherdria",
    "Mendlderther", "KoseKost", "Juss", "Dorahoot", "Adasreen", "Jeinougl", "Arthndyl", "Niceixt", "wynt", "Beboijamelho", "Leksnari", "Rushroco", "Cronack", "Oldmaz", "Zeusalai",
    "Zionncle", "Ninjax", "Sharulu", "Alanayma", "Ivatkult", "Wintxumo", "Darnukey", "babasi", "xixon", "Koleiriu", "Cleaoust", "Andyuren", "Gokuooff", "barrusak", "Dymclan",
    "Cocaroxi", "Paulmein", "Perionav", "xFauduar", "Paryumus", "TheCorde", "Straurde", "eduardo acle", "Stenceno", "JavoixxX", "Proionne", "Elixitsu", "Trapstro", "Zanlerbeunin", "Brunwirl",
    "Siridysrmon", "Steauchu", "Maymelta", "Akaremit", "Fredasina", "Minsandobero", "Arcteziheter", "DanZojat", "Garranberosa", "Jolleni", "Pastadesonbe", "DebiCole", "Czaramer", "Revaouch",
]
'''
'''--- utils/backend/pixelpets/fight/utils.ts ---
import type {
    PlayerData,
    PetType,
} from '../helper/types'

import {
    ElementMatrix,
    BotNames,
} from './types'

import {
    BattleInfo,
    PlayerInfo,
    CardStats,
} from './types'

import {
    CACHED_PETBASE_DATA,
} from '../helper/basic_game'

import {
    getRandomNumber,
    clamp,
    Guid
} from '../../common/utils'

/*
 * constants
 */
export const LoadoutSize: number = 3
export const PetMaxLevel: number = 100
export const PetExpGain: number = 50

/*
 * general utils
 */
export function getRandomBotName(lowerCase: boolean = false, snakeCase: boolean = false, nearSuffix: boolean = true): string {
    let name = BotNames[getRandomNumber(0, BotNames.length)]
    if (lowerCase) {
        name = name.toLowerCase()
    }
    if (snakeCase) {
        name = name.replace(/\s/g, '_')
    }
    if (nearSuffix) {
        name = `${name}.near`
    }
    return name
}

/*
 * creature utils
 */
export function getCreatureData(type: number): PetType {
    return CACHED_PETBASE_DATA.find(x => x.pet_id == type)
}

export function getRandomCreatureType(level: number = 0): number {
    const forbid_types: number[] = [
        20,// Sungen
        65,// Croncat
        66,// Gobbler
    ]
    const noForbidDb: PetType[] = CACHED_PETBASE_DATA.filter(x => !forbid_types.includes(x.pet_id))
    const lvl1Db: PetType[] = noForbidDb.filter(x => x.evolution == 1)
    const index = getRandomNumber(0, lvl1Db.length)

    let petData = lvl1Db[index]
    if (!petData.evolution_to || level < 30) {
        return petData.pet_id
    }

    petData = noForbidDb.find(x => x.pet_id == petData.evolution_to)
    if (!petData.evolution_to || level < 70) {
        return petData.pet_id
    }

    petData = noForbidDb.find(x => x.pet_id == petData.evolution_to)
    return petData.pet_id
}

export function getExpForLevel(level: number): number {
    return Math.round(50 * level * (1 + level * .2))
}

/*
 * combat utils
 */
export function calculateDamageOnDefense(damagedDefense: number, attackDamage: number): number {
    const damageSoak = damagedDefense / 500 * damagedDefense
    const finalDamage = attackDamage - damageSoak
    return finalDamage > 1 ? finalDamage : 1
}

export function calculateMagicOnResistance(damagedType: number, attackerType: number, magicDamage: number): number {
    const magicModifier = getMagicModifier(damagedType, attackerType)
    return Math.round(magicDamage * magicModifier)
}

function getMagicModifier(damagedType: number, attackerType: number): number {
    const bodyType = getCreatureData(damagedType).body_type
    const attackType = getCreatureData(attackerType).damage_type
    return ElementMatrix[attackType][bodyType]
}

//ank pp rarity
export function getModifiedStat(baseStat: number, rarity: number, trainLevel: number, level: number, evolution: number, powerLevel: number): number {
    let rarityModifier: number = 1;
    switch (rarity) {
        case 1:// common
            rarityModifier = 1
            break
        case 2:// rare
            rarityModifier = 1.12
            break
        case 3:// epic
            rarityModifier = 1.20
            break
        default:// legendary
            rarityModifier = 1.30
            break
    }
    const trainLevelModifier = trainLevel * .04
    const levelModifier = level * .03
    const evolutionModifier = evolution * .1
    const powerLevelModifier = (powerLevel - 65) * .02
    const result = (baseStat + (baseStat * evolutionModifier) + (baseStat * trainLevelModifier) + (baseStat * levelModifier) + (baseStat * powerLevelModifier)) * rarityModifier;
    return Math.round(result)
}

/*
 * player utils
 */
export function isPlayerAlive(playerCardStats: CardStats[]): boolean {
    for (let i = 0; i < LoadoutSize; i++) {
        if (playerCardStats[i].health > 0) {
            return true
        }
    }
    return false
}

export function isBothPlayersAlive(battleInfo: BattleInfo): boolean {
    if (!isPlayerAlive(battleInfo.player1CardStats)) {
        return false
    }
    if (!isPlayerAlive(battleInfo.player2CardStats)) {
        return false
    }
    return true
}

export function getWinnerAccountName(battleInfo: BattleInfo): string {
    if (isPlayerAlive(battleInfo.player1CardStats)) {
        return battleInfo.playerInfo1.playerAccount
    }
    if (isPlayerAlive(battleInfo.player2CardStats)) {
        return battleInfo.playerInfo2.playerAccount
    }
    throw 'NotSupposedToHappenException'
}

/**
 * creates a 'PlayerInfo' object from a given 'PlayerData'
 * 
 * 'PlayerInfo' are the player structure used in the fighting
 * 
 * 'PlayerData' are the player structure used by the database
 */
export function generatePlayerInfo(player_data: PlayerData): PlayerInfo {
    const playerInfo = new PlayerInfo(
        player_data.account_id,
        player_data.player_rating,
        player_data.player_loadout.map(x => x.pet_type),
        player_data.player_loadout.map(x => x.pet_rarity),
        player_data.player_loadout.map(x => x.pet_level),
        player_data.player_loadout.map(x => x.pet_trainLevel),
        player_data.player_loadout.map(x => x.pet_power_level),
        player_data.player_loadout.map(x => x.pet_experience),
    )
    return playerInfo
}

export function generateCardStats(pet_type: PetType, rarity: number, train_level: number, level: number, evolution: number, powerLevel: number, include_name: boolean = false, multiplier: number = 100): CardStats {
    const cardStats = {
        maxHealth: getModifiedStat(300, rarity, train_level, level, evolution, powerLevel) / 100 * multiplier,
        health: getModifiedStat(300, rarity, train_level, level, evolution, powerLevel) / 100 * multiplier,
        damage: getModifiedStat(pet_type.damage, rarity, train_level, level, evolution, powerLevel) / 100 * multiplier,
        speed: getModifiedStat(pet_type.speed, rarity, train_level, level, evolution, powerLevel) / 100 * multiplier,
        defense: getModifiedStat(pet_type.defense, rarity, train_level, level, evolution, powerLevel) / 100 * multiplier,
        magic: getModifiedStat(pet_type.magic, rarity, train_level, level, evolution, powerLevel) / 100 * multiplier,
    }
    if (include_name) {
        cardStats["name"] = pet_type.pet_name
    }
    return cardStats
}

/**
 * creates a 'PlayerData' object with random values and based on a given 'PlayerData'
 */
export function createBotData(player_data: PlayerData): PlayerData {
    const levelMedium = Math.round(player_data.player_loadout.map(x => x.pet_level).reduce((sum, current) => sum + current) / LoadoutSize)
    const trainLevelMedium = Math.round(player_data.player_loadout.map(x => x.pet_trainLevel).reduce((sum, current) => sum + current) / LoadoutSize)
    const powerLevelMedium = Math.round(player_data.player_loadout.map(x => x.pet_power_level).reduce((sum, current) => sum + current) / LoadoutSize)
    const expMedium = Math.round(player_data.player_loadout.map(x => x.pet_experience).reduce((sum, current) => sum + current) / LoadoutSize)
    const petLevel = Math.round(getRandomNumber(levelMedium * .75, levelMedium * 1.25))
    const bot_data: PlayerData = {
        account_id: getRandomBotName(true, true),
        matches_won: 0,
        matches_lost: 0,
        // player_rating: getRandomNumber(player_data.player_rating * .75, player_data.player_rating * 1.25),// original one
        player_rating: getRandomNumber(player_data.player_rating * .75, player_data.player_rating),// second version, better but can be better
        // player_rating: calculateBotRating(player_data.player_rating),// TODO: review this later
        player_loadout: Array(LoadoutSize).fill(0).map(() => {
            return {
                token_id: Guid.newGuid(),
                pet_type: getRandomCreatureType(petLevel),
                pet_rarity: getRandomNumber(0, 3),
                pet_level: petLevel,
                pet_trainLevel: Math.round(getRandomNumber(trainLevelMedium * .75, trainLevelMedium * 1.25)),
                pet_power_level: Math.round(getRandomNumber(powerLevelMedium * .75, powerLevelMedium * 1.25)),
                pet_experience: Math.round(clamp(getRandomNumber(expMedium * .5, expMedium), 0, Infinity)),
            }
        }),
        last_fight: 0,
    }
    // console.log("BOT '" + bot_data.account_id + "' created!")
    return bot_data
}

function calculateBotRating(player_rating: number): number {
    const mul_rating = 1.0 + (player_rating / 15000)
    const min_rating = player_rating * (.75 / mul_rating)
    const max_rating = player_rating * (1.0 / mul_rating)
    const rnd_rating = getRandomNumber(min_rating, max_rating)
    return rnd_rating
}

/*
 * rating utils
 * original code from 'Oldage'
 */
export function getExpectedRating(ratingDifference: number): number {
    return 1.0 / (1.0 + Math.pow(10.0, ratingDifference / 400.0))
}

// commented numbers and draw param are from 'Oldage' - they are not used here
export function getNewRating(prevRating: number, expected: number, win: boolean, draw: boolean = false): number {
    let k = 1.0
    if (prevRating < /*2100*/1200) {
        k = 32.0
    } else if ((prevRating >= /*2100*/1200) && (prevRating < /*2400*/1600)) {
        k = 24.0
    } else {
        k = 16.0
    }
    if (draw) {
        return prevRating + Math.round(k * (0.5 - expected))
    } else if (win) {
        let finalRating = prevRating + Math.round(k * (1.0 - expected))
        const finalRatingGain = finalRating - prevRating
        if (finalRatingGain >= 0 && finalRatingGain < 3) {
            finalRating += (3 - finalRatingGain)
        }
        return finalRating
    }
    return prevRating + Math.round(k * (0.0 - expected))
}
'''
'''--- utils/backend/pixelpets/helper/basic_game.ts ---
import { viewFunction, APP_CONTRACT, changeFunctionWithoutAttachment, MANAGER_ACCOUNT, MANAGER_KEY, checkFunctionResponse } from "../../common/blockchain";
import { FightRequest, LockType, PlayerData, PlayerLoadoutData, PlayerTournamentData } from './types'
import { createBotData, LoadoutSize } from "../fight/utils";
import { PetType } from "./types"
import { scaled_pets_by_ids } from "./pet_scaling";
import { getPixelPetsDb, isLockTaken } from "../../common/mongo-helper";
import { assert, clamp, getCurrentWeekCode, shuffle } from "../../common/utils";
import { NextApiResponse } from "next";

export let CACHED_PETBASE_DATA: PetType[] = [];// Note: CreaturesMap was removed so now CACHED_PETBASE_DATA are constantly requested during fightings
export let CACHED_PETBASE_DATA_TIMESTAMP: number = 0;
export const STARTER_PET_IDS: number[] = [57, 58, 59];

export async function getPetBaseData(): Promise<PetType[]> {
    const elapsedTimeSinceLastCache = clamp(Math.round((Date.now() - CACHED_PETBASE_DATA_TIMESTAMP) / 1000), 0, Infinity);
    if (CACHED_PETBASE_DATA_TIMESTAMP != 0 &&
        elapsedTimeSinceLastCache < 30) {
        return CACHED_PETBASE_DATA;
    }
    const db = await getPixelPetsDb();
    const pets = await db.collection<PetType>("pets").find({}, { projection: { _id: 0 } }).toArray();
    CACHED_PETBASE_DATA_TIMESTAMP = Date.now();
    CACHED_PETBASE_DATA = pets;
    return pets;
}

export async function getAccountData(account_id: string) {
    return await viewFunction(APP_CONTRACT, "get_player_data", { account_id });
}

export async function getPlayerTeam(rq: FightRequest): Promise<PlayerData> {
    const accountdata = await getAccountData(rq.account_id);
    const playerdata = accountdata.playerdata;
    if (playerdata["fight_balance"] == 0) {
        throw "your fight balance is too low";
    }
    const pet_ids = playerdata.pet_ids as string[];

    if (rq.playerdata.pet_loadout.length != LoadoutSize) {
        throw "Invalid amount of pets";
    }

    const duplicate_pet_ids = rq.playerdata.pet_loadout.filter((item, index) => rq.playerdata.pet_loadout.indexOf(item) != index);

    if (duplicate_pet_ids.length != 0) {
        throw "Duplicates not allowed";
    }

    rq.playerdata.pet_loadout.forEach(pet_id => {
        if (!pet_ids.includes(pet_id)) {
            throw "You don't own this pet";
        }
    });

    const scaled_pets = await scaled_pets_by_ids(rq.playerdata.pet_loadout);
    //todo - need to change this to a number (todo: divide state_timer by 1000 at contract output)
    scaled_pets.forEach(scaled_pet => {
        if (scaled_pet.state_timer > Date.now().toString()) {
            throw "Your pets are not ready";
        }
    });

    // casting accountdata.playerdata to PlayerData does not exclude
    // unnecessary fields like 'hatching' and 'train_timer'
    // and also PetToken does have unnecessary data for the loadout
    // so we better create them manually containing only necessary data
    const pdata: PlayerData = {
        account_id: rq.account_id,
        matches_won: playerdata.matches_won,
        matches_lost: playerdata.matches_lost,
        player_rating: playerdata.rating,
        player_loadout: rq.playerdata.pet_loadout.map<PlayerLoadoutData>(id => {
            const x = scaled_pets.find(x => x.token_id == id);
            return {
                token_id: x.token_id,
                pet_type: x.pet_type,
                pet_rarity: x.rarity,
                pet_level: x.level,
                pet_trainLevel: x.train_level,
                pet_power_level: x.power_level,
                pet_experience: x.xp,
            }
        }),
        last_fight: Date.now(),
    };

    return pdata;
}

// https://docs.mongodb.com/manual/reference/operator/query/#query-selectors
export async function getEnemyTeam_v0(player_data: PlayerData): Promise<PlayerData> {
    const db = await getPixelPetsDb();
    const enemies_data = await db.collection<PlayerData>("leaderboard").find({
        account_id: {// filter out the player itself who is looking for an enemy
            $ne: player_data.account_id,
        },
        player_rating: {// filter enemies by similar rating(eg. if player rating is 800, it'll look for enemies in between 600~1000)
            $gte: player_data.player_rating * .75,
            $lte: player_data.player_rating * 1.25,
        }
    })
    .project<PlayerData>({// exclude object id
        _id: 0,
    })
    .limit(50)
    .toArray();

    if (enemies_data.length > 1) {
        enemies_data.sort((a, b) => {// sort enemies from lowest to highest rating difference against the player
            const x = Math.abs(player_data.player_rating - a.player_rating);
            const y = Math.abs(player_data.player_rating - b.player_rating);
            return x - y;
        });
    }
    else if (enemies_data.length == 0) {
        enemies_data.push(createBotData(player_data));
    }

    return enemies_data[0];// return the enemy with the most similar rating
}

export async function getEnemyTeam_v1(player_data: PlayerData): Promise<PlayerData> {
    const db = await getPixelPetsDb();
    const enemies_data = await db.collection<PlayerData>("leaderboard").find({
        account_id: {// filter out the player itself who is looking for an enemy
            $ne: player_data.account_id,
        },
        player_rating: {// filter enemies by similar rating(eg. if player rating is 800, it'll look for enemies in between 700~900)
            $gte: player_data.player_rating - 100,
            $lte: player_data.player_rating + 100,
        }
    })
    .project<PlayerData>({// exclude object id
        _id: 0,
    })
    .limit(50)
    .toArray();

    if (enemies_data.length > 1) {
        shuffle(enemies_data);
    }
    else if (enemies_data.length == 0) {
        enemies_data.push(createBotData(player_data));
    }

    return enemies_data[0];
}

export async function getEnemyTeam_v2(player_data: PlayerData): Promise<PlayerData> {
    const db = await getPixelPetsDb();
    const pp_avg = player_data.player_loadout.map(x => x.pet_level).reduce((sum, curr) => sum + curr) / LoadoutSize
    const enemies_data = await db.collection<PlayerData>("leaderboard").aggregate<PlayerData>([
        {
            $project: {
                _id: 0,
                account_id: 1,
                matches_lost: 1,
                matches_won: 1,
                player_loadout: 1,
                player_rating: 1,
                pets_level_avg: {
                    $avg: ["$player_loadout.pet_level"]
                },
                result: {
                    $not: [
                        { $eq: ["$account_id", player_data.account_id] },
                    ]
                }
            }
        },
        {
            $match: {
                $and: [
                    { "player_rating": { $gte: player_data.player_rating - 150 } },
                    { "player_rating": { $lte: player_data.player_rating + 150 } },
                ]
            }
        },
        {
            $match: {
                $and: [
                    { "pets_level_avg": { $gte: pp_avg * 0.78 } },
                    { "pets_level_avg": { $lte: pp_avg * 1.22 } },
                ]
            }
        },
        {
            $limit: 50
        }
    ])
    .toArray()
    .then(x => x.filter(x => x["result"]));

    // enemies_data["pp_lv_avg"] = pp_avg;
    // console.log(enemies_data);

    if (enemies_data.length > 1) {
        shuffle(enemies_data);
    }
    else if (enemies_data.length == 0) {
        enemies_data.push(createBotData(player_data));
    }

    return enemies_data[0];
}

export async function getEnemyTeam_v3(player_data: PlayerData): Promise<PlayerData> {
    const db = await getPixelPetsDb();
    const baseRating = (player_data.player_rating * 20) - 3000;
    const petsLevel = ((player_data.player_loadout.map(x => x.pet_level).reduce((sum, curr) => sum + curr) - 50) * 120) - 1500;
    const petsTrainLevel = ((player_data.player_loadout.map(x => x.pet_trainLevel).reduce((sum, curr) => sum + curr) - 3) * 120) - 250;
    const petsPowerLevel = ((player_data.player_loadout.map(x => x.pet_power_level).reduce((sum, curr) => sum + curr) - 200) * 150) - 1500;
    const petsRarity = (player_data.player_loadout.map(x => x.pet_rarity).reduce((sum, curr) => sum + curr) * 800) - 250;
    const modRating = clamp(800 + (baseRating + petsLevel + petsTrainLevel + petsPowerLevel + petsRarity) / 50, 800, 3000);
    const enemies_data = await db.collection<PlayerData>("leaderboard").aggregate<PlayerData>([
        {
            $project: {
                _id: 0,
                account_id: 1,
                matches_lost: 1,
                matches_won: 1,
                player_loadout: 1,
                player_rating: 1,
                result: {
                    $not: [
                        { $eq: ["$account_id", player_data.account_id] },
                    ]
                }
            }
        },
        {
            $match: {
                $and: [
                    { "player_rating": { $gte: modRating - 150 } },
                    { "player_rating": { $lte: modRating + 150 } },
                ]
            }
        },
        {
            $limit: 50
        }
    ])
    .toArray()
    .then(x => x.filter(x => x["result"]));

    // enemies_data["yourELO"] = player_data.player_rating;
    // enemies_data["baseELO"] = baseRating;
    // enemies_data["petsLVL"] = petsLevel;
    // enemies_data["petsTLVL"] = petsTrainLevel;
    // enemies_data["petsPLVL"] = petsPowerLevel;
    // enemies_data["petsRTY"] = petsRarity;
    // enemies_data["modELO"] = modRating;
    // console.log(enemies_data);

    if (enemies_data.length > 1) {
        shuffle(enemies_data);
    }
    else if (enemies_data.length == 0) {
        enemies_data.push(createBotData(player_data));
    }

    return enemies_data[0];
}

export async function getEnemyTeam_v4(player_data: PlayerData): Promise<PlayerData> {
    const db = await getPixelPetsDb();
    const baseRating = (player_data.player_rating * 20) - 3000;
    const petsLevel = ((player_data.player_loadout.map(x => x.pet_level).reduce((sum, curr) => sum + curr) - 50) * 120) - 1500;
    const petsTrainLevel = ((player_data.player_loadout.map(x => x.pet_trainLevel).reduce((sum, curr) => sum + curr) - 3) * 120) - 250;
    const petsPowerLevel = ((player_data.player_loadout.map(x => x.pet_power_level).reduce((sum, curr) => sum + curr) - 200) * 150) - 1500;
    const petsRarity = (player_data.player_loadout.map(x => x.pet_rarity).reduce((sum, curr) => sum + curr) * 800) - 250;
    const modRating = clamp(800 + (baseRating + petsLevel + petsTrainLevel + petsPowerLevel + petsRarity) / 50, 800, 10000);
    const percentage = clamp(Math.round(modRating * modRating * .00005), 150, 5000);
    const enemies_data = await db.collection<PlayerData>("leaderboard").aggregate<PlayerData>([
        {
            $project: {
                _id: 0,
                account_id: 1,
                matches_lost: 1,
                matches_won: 1,
                player_loadout: 1,
                player_rating: 1,
                result: {
                    $not: [
                        { $eq: ["$account_id", player_data.account_id] },
                    ]
                }
            }
        },
        {
            $match: {
                $and: [
                    { "player_rating": { $gte: modRating - percentage } },
                    { "player_rating": { $lte: modRating + percentage } },
                ]
            }
        },
        {
            $limit: 50
        }
    ])
    .toArray()
    .then(x => x.filter(x => x["result"]));

    // enemies_data["yourELO"] = player_data.player_rating;
    // enemies_data["baseELO"] = baseRating;
    // enemies_data["petsLVL"] = petsLevel;
    // enemies_data["petsTLVL"] = petsTrainLevel;
    // enemies_data["petsPLVL"] = petsPowerLevel;
    // enemies_data["petsRTY"] = petsRarity;
    // enemies_data["modELO"] = modRating;
    // console.log(enemies_data);

    if (enemies_data.length > 1) {
        shuffle(enemies_data);
    }
    else if (enemies_data.length == 0) {
        enemies_data.push(createBotData(player_data));
    }

    return enemies_data[0];
}

export async function getEnemyTeam_v5(player_data: PlayerData): Promise<PlayerData> {
    const db = await getPixelPetsDb();
    const baseRating = (player_data.player_rating * 25) - 3500;
    const petsLevel = ((player_data.player_loadout.map(x => x.pet_level).reduce((sum, curr) => sum + curr) - 50) * 100) - 1500;
    const petsTrainLevel = ((player_data.player_loadout.map(x => x.pet_trainLevel).reduce((sum, curr) => sum + curr) - 3) * 100) - 250;
    const petsPowerLevel = ((player_data.player_loadout.map(x => x.pet_power_level).reduce((sum, curr) => sum + curr) - 200) * 100) - 1500;
    const petsRarity = (player_data.player_loadout.map(x => x.pet_rarity).reduce((sum, curr) => sum + curr) * 700) - 250;
    const modRating = clamp(800 + (baseRating + petsLevel + petsTrainLevel + petsPowerLevel + petsRarity) / 50, 800, 20000);
    const percentage = clamp(Math.round(player_data.player_rating * player_data.player_rating * .00005), 150, 10000);
    const divider = clamp(percentage * .003, 1, 20);
    const enemies_data = await db.collection<PlayerData>("leaderboard").aggregate<PlayerData>([
        {
            $project: {
                _id: 0,
                account_id: 1,
                matches_lost: 1,
                matches_won: 1,
                player_loadout: 1,
                player_rating: 1,
                result: {
                    $not: [
                        { $eq: ["$account_id", player_data.account_id] },
                    ]
                }
            }
        },
        {
            $match: {
                $and: [
                    { "player_rating": { $gte: modRating - percentage / divider } },
                    { "player_rating": { $lte: modRating + percentage } },
                ]
            }
        },
        {
            $limit: 50
        }
    ])
    .toArray()
    .then(x => x.filter(x => x["result"]));

    // enemies_data["yourELO"] = player_data.player_rating;
    // enemies_data["baseELO"] = baseRating;
    // enemies_data["petsLVL"] = petsLevel;
    // enemies_data["petsTLVL"] = petsTrainLevel;
    // enemies_data["petsPLVL"] = petsPowerLevel;
    // enemies_data["petsRTY"] = petsRarity;
    // enemies_data["modELO"] = modRating;
    // console.log(enemies_data);

    if (enemies_data.length > 1) {
        shuffle(enemies_data);
    }
    else if (enemies_data.length == 0) {
        enemies_data.push(createBotData(player_data));
    }

    return enemies_data[0];
}

export async function updateLeaderboard(player_data: PlayerData, won: boolean) {
    //todo calc points based on lvl + won bool | maybe put this logic on 'fight/core/updatePlayerAfterBattle' ?
    const options = { upsert: true };
    const db = await getPixelPetsDb();
    const marketplace = await db.collection("leaderboard").updateOne(
        { account_id: player_data.account_id },
        { $set: player_data },
        options);

    /*
     * tournament stuff
     */

    const w_code = getCurrentWeekCode();
    let w_entry = await db.collection("tournament").findOne<PlayerTournamentData>({
        account_id: player_data.account_id,
        week_code: w_code,
    });

    if (w_entry) {
        if (won) {
            w_entry.matches_won++;
        } else {
            w_entry.matches_lost++;
        }
        w_entry.player_loadout = player_data.player_loadout;
        w_entry.last_fight = player_data.last_fight;
    } else {
        w_entry = {
            account_id: player_data.account_id,
            week_code: w_code,
            matches_won: won ? 1 : 0,
            matches_lost: !won ? 1 : 0,
            player_loadout: player_data.player_loadout,
            last_fight: player_data.last_fight,
            created_at: new Date(),
        }
    }

    await db.collection("tournament").updateOne(
        { account_id: w_entry.account_id, week_code: w_entry.week_code },
        { $set: w_entry },
        options);
}

export async function getLeaderboard(results: number = 100): Promise<any[]> {
    const db = await getPixelPetsDb();
    const entries = await db.collection("leaderboard").find({})
    .sort({
        player_rating: -1,
    })
    .project({
        _id: 0,
        last_fight: 0,
        player_loadout: {
            pet_level: 0,
            pet_trainLevel: 0,
            pet_power_level: 0,
            pet_experience: 0,
        }
    })
    .limit(results)
    .toArray();
    return entries;
}

export async function getTournament(week_code: string, results: number = 50): Promise<any[]> {
    const db = await getPixelPetsDb();
    const entries = await db.collection("tournament").aggregate([
        {
            $match: {
                week_code: week_code
            }
        },
        {
            $project: {
                _id: 0,
                account_id: 1,
                matches_lost: 1,
                matches_won: 1,
                player_loadout: 1,
                score: {
                    $subtract: ["$matches_won", "$matches_lost"]
                }
            }
        },
        {
            $sort: {
                score: -1
            }
        },
        {
            $limit: results
        }
    ])
    .toArray();
    return entries;
}

export async function getInactivePlayers(base_rating: number = 1700, days_count: number = 1): Promise<any[]> {
    const db = await getPixelPetsDb();
    const entries = await db.collection("leaderboard").aggregate([
        {
            $project: {
                _id: 0,
                account_id: 1,
                player_rating: 1,
                last_fight: 1,
                elapsed_days: {
                    $round: [{
                        $divide: [{
                            $subtract: [new Date().getTime(), "$last_fight"]
                        }, 86400000]
                    }, 0]
                }
            }
        },
        {
            $match: {
                $and: [
                    { "player_rating": { $gte: base_rating } },
                    { "elapsed_days": { $gte: days_count } },
                ]
            }
        },
        {
            $sort: {
                player_rating: -1,
            }
        }
    ])
    .toArray();
    return entries;
}

export async function isRatingDecayAllowed(): Promise<boolean> {
    const kvp = {
        key: "next_check",
        value: 86400000,
    };
    const options = { upsert: true };
    const db = await getPixelPetsDb();
    const result = await db.collection("rating_decay").findOne<{ key: string, value: number }>({ key: kvp.key });
    const timeNow = new Date().getTime();

    if (!result || timeNow >= result.value) {
        const nextCheck = timeNow + kvp.value;

        await db.collection("rating_decay").updateOne(
            { key: kvp.key },
            { $set: { key: kvp.key, value: nextCheck } },
            options);

        return true;
    }

    return false;
}

export async function checkDecreaseRating(account_id: string | null, accountdata: any | null, res: NextApiResponse<any>): Promise<boolean> {
    assert(account_id, "'account_id' is missing");
    if (!accountdata) {
        accountdata = await getAccountData(account_id);
    }
    const db = await getPixelPetsDb();
    const playerentry = await db.collection("leaderboard").findOne(
        { account_id: account_id },
        {
            projection: {
                _id: 0,
                player_rating: 1,
                last_fight: 1,
                elapsed_days: {
                    $round: [{
                        $divide: [{
                            $subtract: [new Date().getTime(), "$last_fight"]
                        }, 86400000]
                    }, 0]
                }
            }
        });

    if (playerentry) {
        const playerdata = accountdata.playerdata;
        if (playerentry.player_rating < playerdata.rating) {
            playerdata.rating = playerentry.player_rating;
            const response = await changeFunctionWithoutAttachment(
                MANAGER_ACCOUNT,
                MANAGER_KEY,
                APP_CONTRACT,
                "set_player_rating",
                {
                    account_id: account_id,
                    new_rating: playerdata.rating
                });

            if (!checkFunctionResponse(response)) {
                res.status(200).json({ success: false, error: response.error.type });
                return false;
            }
        }
        playerdata["last_fight"] = playerentry.last_fight;
        playerdata["elapsed_days"] = playerentry.elapsed_days;
    }

    return true;
}

// account locking

export async function lockAccount(account_id: string, lock_type: LockType): Promise<boolean> {
    const db = await getPixelPetsDb();
    const filter = {
        account_id: account_id,
        lock_type: lock_type,
    };
    const update = {
        $set: {
            timestamp: new Date(),
        }
    };
    const options = { upsert: true };
    const result = await db.collection("account_lock").updateOne(filter, update, options);
    const lockTaken = isLockTaken(result);

    return lockTaken;
}

export async function unlockAccount(account_id: string, lock_type: LockType): Promise<void> {
    const db = await getPixelPetsDb();
    const filter = {
        account_id: account_id,
        lock_type: lock_type,
    };
    await db.collection("account_lock").deleteOne(filter);
}

// ---

// export async function _hotfix_LeaderboardWeekCode2022(invalid_week_code: string) {
//     const currentWeekCode = getCurrentWeekCode();
//     const db = await getPixelPetsDb();
//     const options = { upsert: true };
//     const readonly = true;

//     // find all players with the invalid week_code
//     const invalid_entries = await db.collection("tournament")
//         .find({
//             week_code: invalid_week_code
//         }).toArray<PlayerTournamentData>();

//     // find all players with the valid week_code
//     // and filters only those who also have invalid entries
//     const valid_entries = await db.collection("tournament")
//         .find({
//             week_code: currentWeekCode
//         }).toArray<PlayerTournamentData>().then(x => {
//             const account_ids = invalid_entries.map(x => x.account_id);
//             return x.filter(y => account_ids.includes(y.account_id));
//         });

//     // these players does have entries on both invalid and valid week_codes
//     // update their scores within the valid one
//     for (let i: number = 0; i < valid_entries.length; i++) {
//         const entry = valid_entries[i];

//         const x = invalid_entries.find(x => x.account_id == entry.account_id);
//         const [entry_won, entry_lost] = [entry.matches_won, entry.matches_lost];
//         const [x_won, x_lost] = [x.matches_won, x.matches_lost];

//         entry.matches_won += x.matches_won;
//         entry.matches_lost += x.matches_lost;

//         if (!readonly) {
//             await db.collection("tournament").updateOne(
//                 { account_id: entry.account_id, week_code: currentWeekCode },
//                 {
//                     $set: {
//                         "matches_won": entry.matches_won,
//                         "matches_lost": entry.matches_lost,
//                     }
//                 },
//                 options);
//         }

//         console.log(`[${entry.account_id}] from ${entry_won}/${entry_lost} to ${entry.matches_won}/${entry.matches_lost} (${x_won}/${x_lost})`);
//     }

//     // these players does only have entries with invalid week_code
//     // just update their week_codes to the valid one
//     for (let i: number = 0; i < invalid_entries.length; i++) {
//         const entry = invalid_entries[i];
//         const x = valid_entries.find(x => x.account_id == entry.account_id);

//         // {"account_id": "toolipse.near", "week_code":"W52Y2022"}
//         // {"account_id": "cg771106051.near", "week_code":"W52Y2022"}
//         if (!x) {
//             if (!readonly) {
//                 await db.collection("tournament").updateOne(
//                     { account_id: entry.account_id, week_code: invalid_week_code },
//                     { $set: { "week_code": currentWeekCode } },
//                     options);
//             }
//             console.log(`[${entry.account_id}] not found`);
//         }
//     }

//     console.log(`invalid: ${invalid_entries.length}, valid: ${valid_entries.length}`);

//     // delete all invalid entries
//     if (!readonly) {
//         const x = await db.collection("tournament").deleteMany({ week_code: invalid_week_code });
//         console.log(`deleted: ${x.deletedCount}`);
//     }

//     /*
//     [baileybeck.near] from 89/52 to 99/59 (10/7)
//     [otismaeve.near] from 79/46 to 82/54 (3/8)
//     [hieutran.near] from 198/43 to 226/47 (28/4)
//     [leolizzie.near] from 75/47 to 84/53 (9/6)
//     [tedmosby.near] from 56/27 to 65/32 (9/5)
//     [doctoroctopus.near] from 134/48 to 142/51 (8/3)
//     [degengamer.near] from 76/55 to 91/63 (15/8)
//     [tanapat.near] from 59/3 to 68/4 (9/1)
//     [gordonfreeman.near] from 107/40 to 125/46 (18/6)
//     [miuhiu.near] from 62/30 to 65/35 (3/5)
//     [dogsheng.near] from 11/9 to 12/12 (1/3)
//     [kaadsgasd.near] from 40/16 to 45/21 (5/5)
//     [giaphongvks.near] from 63/7 to 73/7 (10/0)
//     [nergu.near] from 86/42 to 106/52 (20/10)
//     [pro100kill02.near] from 42/21 to 51/24 (9/3)
//     [quynhanh1.near] from 41/17 to 47/21 (6/4)
//     [huanghai.near] from 243/37 to 282/45 (39/8)
//     [brabrabooo.near] from 33/22 to 41/25 (8/3)
//     [imalways.near] from 76/80 to 87/89 (11/9)
//     [luziax.near] from 13/13 to 22/15 (9/2)
//     [marmaj.near] from 31/6 to 39/6 (8/0)
//     [lledbell.near] from 47/13 to 52/14 (5/1)
//     [idkai36.near] from 47/21 to 53/26 (6/5)
//     [namguyende.near] from 57/12 to 66/16 (9/4)
//     [thaolete.near] from 51/34 to 60/41 (9/7)
//     [gasan077.near] from 72/12 to 97/17 (25/5)
//     [tortum.near] from 54/8 to 61/10 (7/2)
//     [only-sleep.near] from 50/10 to 62/12 (12/2)
//     [eason9527.near] from 1/3 to 3/4 (2/1)
//     [babyboo.near] from 25/32 to 25/33 (0/1)
//     [michelle_obama.near] from 61/23 to 61/25 (0/2)
//     [alabatrap.near] from 29/6 to 29/7 (0/1)
//     [showme355.near] from 58/11 to 63/13 (5/2)
//     [hiumiu.near] from 83/25 to 89/31 (6/6)
//     [nequyenhvdttc8503.near] from 16/33 to 23/40 (7/7)
//     [spitbitz.near] from 41/6 to 45/6 (4/0)
//     [gtje0828.near] from 237/38 to 262/41 (25/3)
//     [hmtri1011.near] from 55/9 to 59/12 (4/3)
//     [lulukuang.near] from 108/9 to 143/12 (35/3)
//     [abgfr.near] from 27/22 to 32/24 (5/2)
//     [elonmusk_tesla.near] from 5/0 to 6/0 (1/0)
//     [marcel1111.near] from 26/7 to 40/8 (14/1)
//     [luckytype.near] from 60/7 to 67/10 (7/3)
//     [octaman.near] from 87/7 to 106/8 (19/1)
//     [profit.near] from 40/1 to 54/2 (14/1)
//     [ican3701.near] from 59/11 to 70/13 (11/2)
//     [chappie.near] from 21/3 to 22/3 (1/0)
//     [phamducvu3.near] from 47/61 to 62/72 (15/11)
//     [izosimov_mike.near] from 18/5 to 22/7 (4/2)
//     [susanoo.near] from 83/10 to 92/12 (9/2)
//     [chibakutensei.near] from 63/11 to 76/12 (13/1)
//     [izanagi.near] from 246/50 to 270/61 (24/11)
//     [izanami.near] from 194/67 to 220/75 (26/8)
//     [zanglee.near] from 46/7 to 65/7 (19/0)
//     [cryptogarik.near] from 22/3 to 23/4 (1/1)
//     [investor3000.near] from 3/5 to 4/9 (1/4)
//     [jayyoo.near] from 13/12 to 14/15 (1/3)
//     [robertstos.near] from 13/16 to 15/19 (2/3)
//     [pro100kill2.near] from 16/2 to 20/4 (4/2)
//     [ratatoeskr.near] from 3/9 to 5/9 (2/0)
//     [kangtheconqueror.near] from 73/17 to 78/18 (5/1)
//     [yourh.near] from 24/20 to 33/24 (9/4)
//     [mipu.near] from 122/15 to 131/17 (9/2)
//     [cronus.near] from 42/6 to 48/6 (6/0)
//     [mariemeza.near] from 115/15 to 125/16 (10/1)
//     [blaze.near] from 26/22 to 42/26 (16/4)
//     [ionelan.near] from 4/4 to 5/4 (1/0)
//     [coreman.near] from 7/5 to 16/7 (9/2)
//     [yiwan333.near] from 68/8 to 74/10 (6/2)
//     [nicolesuria.near] from 1/2 to 1/3 (0/1)
//     [stormg.near] from 1/1 to 2/1 (1/0)
//     [cbl336699.near] from 12/4 to 15/5 (3/1)
//     [mthaitrinh.near] from 9/4 to 10/4 (1/0)
//     [thetown.near] from 1/1 to 1/3 (0/2)
//     [toolipse.near] not found
//     [cg771106051.near] not found
//     invalid: 76, valid: 74
//     deleted: 74
//     */
// }
'''
'''--- utils/backend/pixelpets/helper/pet_scaling.ts ---
import { generateCardStats } from "../fight/utils";
import { getPetBaseData } from "./basic_game";
import { viewFunction, APP_CONTRACT } from "../../common/blockchain";
import { PetToken, PetType } from "./types";

export async function scaled_pets_by_ids(pet_ids: string[]): Promise<PetToken[]> {
    if (pet_ids.length > 28) {
        throw "more than 28 ids not supported";
    }

    const pet_base_data = await getPetBaseData();

    let pet_array: PetToken[] = [];

    if (pet_ids.length > 22) {
        const ids_part1 = pet_ids.slice(0, 11);
        const ids_part2 = pet_ids.slice(11, 22);
        const ids_part3 = pet_ids.slice(22, pet_ids.length);
        const pets1 = await viewFunction(APP_CONTRACT, "get_pets_by_ids", { pet_ids: ids_part1 });
        const pets2 = await viewFunction(APP_CONTRACT, "get_pets_by_ids", { pet_ids: ids_part2 });
        const pets3 = await viewFunction(APP_CONTRACT, "get_pets_by_ids", { pet_ids: ids_part3 });
        pet_array = pets1.concat(pets2);
        pet_array = pet_array.concat(pets3);
    }
    else if (pet_ids.length > 11) {
        const ids_part1 = pet_ids.slice(0, 11);
        const ids_part2 = pet_ids.slice(11, pet_ids.length);
        const pets1 = await viewFunction(APP_CONTRACT, "get_pets_by_ids", { pet_ids: ids_part1 });
        const pets2 = await viewFunction(APP_CONTRACT, "get_pets_by_ids", { pet_ids: ids_part2 });
        pet_array = pets1.concat(pets2);
    }
    else {
        pet_array = await viewFunction(APP_CONTRACT, "get_pets_by_ids", { pet_ids });
    }

    pet_array.forEach(pet => {
        let petbase = pet_base_data.find(x => x.pet_id == pet.pet_type);
        if (pet.state_timer != "0") {
            pet.state_timer = pet.state_timer.substring(0, pet.state_timer.length - 6);
        }
        if (petbase == null) {
            petbase = { body_type: 1, damage: 40, defense: 40, speed: 40, magic: 40, damage_type: 1, evolution: 0, evolution_to: -1, pet_id: -1, pet_name: 'Dummy' } as PetType;
        }
        pet["combat_info"] = generateCardStats(petbase, pet.rarity + 1, pet.train_level, pet.level, petbase.evolution, pet.power_level, true);
    });

    return pet_array;
}
'''
'''--- utils/backend/pixelpets/helper/types.ts ---
import { FunctionRequest } from "../../common/types";

export type PlayerTournamentData = {
    account_id: string,
    week_code: string,
    matches_won: number,
    matches_lost: number,
    player_loadout: Array<PlayerLoadoutData>,
    last_fight: number,
    created_at: Date,
}

export type PlayerData = {
    account_id: string,
    matches_won: number,
    matches_lost: number,
    player_rating: number,
    player_loadout: Array<PlayerLoadoutData>,
    last_fight: number,
}

export type PlayerLoadoutData = {
    token_id: string,
    pet_type: number,
    pet_rarity: number,
    pet_level: number,
    pet_trainLevel: number,
    pet_power_level: number,
    pet_experience: number,
}

export type PetType = {
    pet_id: number,
    pet_name: string,
    body_type: number,
    damage_type: number,
    evolution_to: number,
    evolution: number,
    damage: number,
    speed: number,
    defense: number,
    magic: number,
}

export class PetToken {
    public token_id: string;
    public pet_type: number;
    public train_level: number = 0;
    public xp: number = 0;
    public level: number = 1;
    public power_level: number;
    public owner: string;
    public price: string;
    public rarity: number;
    public state: number;
    public state_timer: string;
}

export type OfferPetRequest = FunctionRequest & {
    token_id: string,
    price: string,
}

export type EditPetRequest = FunctionRequest & {
    password: string,
    petdata: {
        pet_id: number,
        pet_name: string,
        damage_type: number,
        body_type: number,
        damage: number,
        speed: number,
        defense: number,
        magic: number,
        evolution: number,
        evolution_to: number,
    }
}

export type CancelOfferPetRequest = FunctionRequest & {
    token_id: string
}

export type MarketplaceSearchRequest = FunctionRequest & {
    token_id: string,
    price: string,
}

export type MarketplaceSearchResponse = FunctionRequest & {
    token_id: string,
    price: string,
}

export type FightRequest = FunctionRequest & {
    playerdata: {
        pet_loadout: string[]
    }
}

// --

export enum LockType {
    Fight = 0,
}
'''
'''--- utils/frontend/config.js ---
export default function getConfig() {
    const env = process.env.NEXT_PUBLIC_NEAR_NETWORK_ID || "testnet";
    switch (env) {
        //mains
        case 'mainnet':
            return {
                networkId: 'mainnet',
                nodeUrl: 'https://rpc.mainnet.near.org',
                walletUrl: 'https://app.mynearwallet.com',
                helperUrl: 'https://helper.mainnet.near.org',
                explorerUrl: 'https://explorer.mainnet.near.org',
                CONTRACT_ID: `pixeltoken.near`
            };
        case 'testnet':
        default:
            return {
                networkId: 'testnet',
                nodeUrl: 'https://rpc.testnet.near.org',
                walletUrl: 'https://testnet.mynearwallet.com/',
                helperUrl: 'https://helper.testnet.near.org',
                explorerUrl: 'https://explorer.testnet.near.org',
                CONTRACT_ID: `pixeltoken.testnet`
            };
    }
}

'''
'''--- utils/frontend/near.js ---
import BN from 'bn.js';
import { keyStores, Near, WalletConnection } from 'near-api-js';
import { parseNearAmount } from 'near-api-js/lib/utils/format';
import getConfig from './config';
import { NotificationManager } from 'react-notifications';

export const config = getConfig();

const DEFAULT_FUNC_CALL_GAS = new BN('50000000000000');

export let ContractAccess;

export let near;

export let walletCon;

export let account_id = "";

export async function initContract(setUserState) {

    near = new Near({
        keyStore: new keyStores.BrowserLocalStorageKeyStore(),
        ...config,
    });

    walletCon = await new WalletConnection(near, "Pixelpets");
    account_id = walletCon.getAccountId();

    if (account_id != "") {
        const egg_data = await getUserData(account_id);
        setUserState({
            logged: true,
            tokens: egg_data['tokens'],
            pixeltoken: egg_data['pixeltoken']
        });
    }
}

export function requestLogout() {
    walletCon.signOut()
    window.location.replace(window.location.origin + window.location.pathname)
}

export function requestLogin() {
    walletCon.requestSignIn(config.CONTRACT_ID, "PixelDapps");
}

export async function buy_item(type, price) {
    await walletCon.account().functionCall(config.CONTRACT_ID, 'nft_mint', { type: type, receiver_id: account_id }, DEFAULT_FUNC_CALL_GAS, parseNearAmount(price.toString()));
}

export async function getUserData(account_id) {
    const resp = await walletCon.account().viewFunction(config.CONTRACT_ID, "ctt_custom_balance_of", { account_id: account_id });
    return resp;
}

export async function login_aurora() {
    walletCon.requestSignIn("aurora.pool.near", "Claim");
}

export async function claim_aurora() {
    await walletCon.account().functionCall("aurora.pool.near", 'claim', { "account_id": account_id, "token_id": "aaaaaa20d9e0e2461697782ef11675f668207961.factory.bridge.near", "farm_id": 0 }, DEFAULT_FUNC_CALL_GAS, 1);
}

export async function ctt_token_count() {
    const resp = await walletCon.account().viewFunction(config.CONTRACT_ID, "nft_supply_for_owner", { account_id });
    return resp;
}

export async function is_whitelisted() {
    const resp = await walletCon.account().viewFunction(config.CONTRACT_ID, "ctt_is_wl_user", { account_id });
    return resp;
}

export async function getSupplyData() {
    const resp = await walletCon.account().viewFunction(config.CONTRACT_ID, "get_mint_supply", {});
    return resp;
}

// export async function getspxtBalance() {
//     const resp = await walletCon.account().viewFunction('skyward-pixeltoken.near', "ft_balance_of", { account_id: account_id });
//     return resp;
// }

// export async function unwrapspxt() {
//     await walletCon.account().functionCall('skyward-pixeltoken.near', 'unwrap', { }, DEFAULT_FUNC_CALL_GAS, "1");
// }

export async function invalid_ft_transfer() {
    try {
        await walletCon.account().functionCall(config.CONTRACT_ID, 'ft_transfer', { "receiver_id": account_id }, DEFAULT_FUNC_CALL_GAS);
    }
    catch (err) {
        NotificationManager.success('You should now see PXT in the web wallet.', 'PXT added');
    }
}

export async function unwrap_spxt() {
    await walletCon.account().functionCall("skyward-pixeltoken.near", 'unwrap', {}, DEFAULT_FUNC_CALL_GAS);
}

'''
'''--- utils/frontend/store.js ---
import { atom, useRecoilState } from "recoil";

export const navState = atom({
    key: "navState", // unique ID (with respect to other atoms/selectors)
    default: {
        navigation: [
            { name: "Pixelparty", href: "/", current: false, page: "pixelparty" },
            { name: "Pixelpets", href: "/", current: false, page: "pixelpets" },
            { name: "Cryptoheroes", href: "/", current: false, page: "cryptohero" },
            { name: "Chain Team Tactics", href: "/", current: true, page: "ctt" },
            { name: "Pixeltoken", href: "/", current: false, page: "pixeltoken" },
        ],
    }, // default value (aka initial value)
});

export const userState = atom({
    key: "userState", // unique ID (with respect to other atoms/selectors)
    default: {
        logged: false,
        ctt_tokens: 0,
        pixeltoken: 0
    }, // default value (aka initial value)
});

'''