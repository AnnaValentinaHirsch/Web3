*GitHub Repository "21Horza/near_guest_book"*

'''--- as-pect.config.js ---
module.exports = require('near-sdk-as/imports')

'''
'''--- babel.config.js ---
module.exports = {
  presets: ['@babel/preset-env', '@babel/preset-react']
}

'''
'''--- src/App.js ---
import {providers}   from 'near-api-js';
import 'regenerator-runtime/runtime';
import React, { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import Big from 'big.js';
import Form from './components/Form';
import SignIn from './components/SignIn';
import Messages from './components/Messages';
import styles from './App.css';

const SUGGESTED_DONATION = '0';
const BOATLOAD_OF_GAS = Big(3).times(10 ** 13).toFixed();

const App = ({ selector, currentUser }) => {
  const [messages, setMessages] = useState([]);

  const provider = new providers.JsonRpcProvider({
    url: selector.network.nodeUrl,
  });

  useEffect(() => {
  provider.query({
        request_type: "call_function",
        account_id: selector.getContractId(),
        method_name: "getMessages",
        args_base64: "",
        finality: "optimistic",
    }).then((res) => setMessages(JSON.parse(Buffer.from(res.result).toString())));
    }, []);

  const onSubmit = (e) => {
    e.preventDefault();

    const { fieldset, message, donation } = e.target.elements;

    fieldset.disabled = true;

    // TODO: optimistically update page with new message,
    // update blockchain data in background
    // add uuid to each message, so we know which one is already known
    
    selector.signAndSendTransaction({
      signerId: window.accountId,
      actions: [{
          type: "FunctionCall",
          params: {
              methodName: "add_message",
              args: {
                  text: message.value,
              },
              gas: BOATLOAD_OF_GAS,
              deposit: Big(donation.value || '0').times(10 ** 24).toFixed(),
          }
      }],
    }).catch((err) => {
        alert("Something went wrong");
        throw err;
      }).then(() => {

        provider.query({

          request_type: "call_function",
          account_id: selector.getContractId(),
          method_name: "getMessages",
          args_base64: "",
          finality: "optimistic",
  
        }).then((res) => {
  
          setMessages(JSON.parse(Buffer.from(res.result).toString()))
          message.value = '';
          donation.value = SUGGESTED_DONATION;
          fieldset.disabled = false;
          message.focus();
  
        });
      });
  };

  const signIn = () => {
    selector.show()
  };

  const signOut = () => {
    selector.signOut()
  };

  return (
    <main>
        { currentUser
          ? <button className='user__btn' onClick={signOut}>Log out</button>
          : <button className='user__btn' onClick={signIn}>Log in</button>
        }
        <h1>NEAR Guest Book</h1>
      { currentUser
        ? <Form onSubmit={onSubmit} currentUser={currentUser} />
        : <SignIn/>
      }
      { !!currentUser && !!messages.length && <Messages messages={messages}/> }
    </main>
  );
};

App.propTypes = {
  currentUser: PropTypes.shape({
    accountId: PropTypes.string.isRequired,
    balance: PropTypes.string.isRequired
  }),
  selector: PropTypes.object
};

export default App;

'''
'''--- src/config.js ---
const CONTRACT_NAME = process.env.CONTRACT_NAME || 'guest-book.lime23.testnet';

function getConfig(env) {
  switch(env) {
    case 'mainnet':
      return {
        networkId: 'mainnet',
        nodeUrl: 'https://rpc.mainnet.near.org',
        contractName: CONTRACT_NAME,
        walletUrl: 'https://wallet.near.org',
        helperUrl: 'https://helper.mainnet.near.org'
      };
    // This is an example app so production is set to testnet.
    // You can move production to mainnet if that is applicable.
    case 'production':
    case 'development':
    case 'testnet':
      return {
        networkId: 'testnet',
        nodeUrl: 'https://rpc.testnet.near.org',
        contractName: CONTRACT_NAME,
        walletUrl: 'https://wallet.testnet.near.org',
        helperUrl: 'https://helper.testnet.near.org'
      };
    case 'betanet':
      return {
        networkId: 'betanet',
        nodeUrl: 'https://rpc.betanet.near.org',
        contractName: CONTRACT_NAME,
        walletUrl: 'https://wallet.betanet.near.org',
        helperUrl: 'https://helper.betanet.near.org'
      };
    case 'local':
      return {
        networkId: 'local',
        nodeUrl: 'http://localhost:3030',
        keyPath: `${process.env.HOME}/.near/validator_key.json`,
        walletUrl: 'http://localhost:4000/wallet',
        contractName: CONTRACT_NAME
      };
    case 'test':
    case 'ci':
      return {
        networkId: 'shared-test',
        nodeUrl: 'https://rpc.ci-testnet.near.org',
        contractName: CONTRACT_NAME,
        masterAccount: 'test.near'
      };
    case 'ci-betanet':
      return {
        networkId: 'shared-test-staging',
        nodeUrl: 'https://rpc.ci-betanet.near.org',
        contractName: CONTRACT_NAME,
        masterAccount: 'test.near'
      };
    default:
      throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`);
  }
}

module.exports = getConfig;

'''
'''--- src/index.html ---
<!DOCTYPE html>
<html style="height: 100%;" lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="./favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <link rel="apple-touch-icon" href="./favicon.ico" />
    <link rel="stylesheet" href="global.scss">
    <title>NEAR Guest Book</title>
    <meta property="og:title" content="NEAR Guest Book">
    <meta property="og:description" content="A guest book with comments stored on the NEAR blockchain">
    <!-- <meta property="og:image" content=""> -->
    <!-- <meta property="og:url" content=""> -->
    <!-- <meta name="twitter:card" content="summary_large_image"> -->
  </head>
  <body style="background: linear-gradient(90deg, rgb(255, 77, 0), rgb(8, 0, 255)); height: 100%; width: 100%;">
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <script src="./index.js"></script>
  </body>
</html>

'''
'''--- src/index.js ---
import React from 'react';
import ReactDOM from 'react-dom';
import App from './App';
import getConfig from './config.js';
import * as nearAPI from 'near-api-js';
import NearWalletSelector from "@near-wallet-selector/core";
import { setupNearWallet } from "@near-wallet-selector/near-wallet";
import { setupSender } from "@near-wallet-selector/sender";
import nearWalletIconUrl from "@near-wallet-selector/near-wallet/assets/near-wallet-icon.png";
import senderIconUrl from "@near-wallet-selector/sender/assets/sender-icon.png";

const { networkId, contractName } = getConfig(process.env.NODE_ENV || 'development')

// Initializing contract
async function initContract() {
  const nearConfig = getConfig(process.env.NEAR_ENV || 'testnet');

  const selector = await NearWalletSelector.init({
    network: "testnet",
    contractId: contractName,
    wallets: [
      setupNearWallet({iconUrl: nearWalletIconUrl}),
      // setupSender({iconUrl: senderIconUrl}) NOT WORKING
    ],
  });

  window.selector = selector;

  selector.on("signIn", () => window.location.replace(window.location.origin + window.location.pathname));
  selector.on("signOut", () => window.location.replace(window.location.origin + window.location.pathname));
  
  let currentUser;
  if (selector.isSignedIn()) {

    const account = (await selector.getAccounts())[0];
    
    window.accountId = account.accountId;
    const provider = new nearAPI.providers.JsonRpcProvider({
      url: selector.network.nodeUrl,
    });

    currentUser = {
      accountId:  window.accountId,
      balance:  (await provider.query(`account/${account.accountId}`, "")).amount
    };
  }
  return { currentUser, nearConfig, selector };
}

window.nearInitPromise = initContract().then(
  ({ currentUser, nearConfig, selector }) => {
    ReactDOM.render(
      <App
        currentUser={currentUser}
        nearConfig={nearConfig}
        selector={selector}
      />,
      document.getElementById('root')
    );
  }
);
'''
'''--- src/tests/integration/App-integration.test.js ---
// these are made available by near-cli/test_environment
// note: do not remove the line below as it is needed for these tests
/* global nearlib, nearConfig */

import 'regenerator-runtime/runtime';

let near;
let contract;
let accountId;

beforeAll(async function() {
  near = await nearlib.connect(nearConfig);
  accountId = nearConfig.contractName;
  contract = await near.loadContract(nearConfig.contractName, {
    viewMethods: ['getMessages'],
    changeMethods: ['addMessage'],
    sender: accountId
  });
});

it('send one message and retrieve it', async() => {
  await contract.addMessage({ text: 'aloha' });
  const msgs = await contract.getMessages();
  const expectedMessagesResult = [{
    premium: false,
    sender: accountId,
    text: 'aloha'
  }];
  expect(msgs).toEqual(expectedMessagesResult);
});

it('send two more messages and expect three total', async() => {
  await contract.addMessage({ text: 'foo' });
  await contract.addMessage({ text: 'bar' });
  const msgs = await contract.getMessages();
  expect(msgs.length).toEqual(3);
});

'''
'''--- src/tests/ui/App-ui.test.js ---
import 'regenerator-runtime/runtime';
import React from 'react';
import TestRenderer from 'react-test-renderer';
import App from '../../App';
const { act } = TestRenderer;

// Declare stubs for contract, walletConnection, and nearConfig
const contract = {
  account: {
    connection: {},
    accountId: 'test.near'
  },
  contractId: 'test.near',
  getMessages: () => new Promise(() => {}),
  addMessage: () => ''
};
const walletConnection = {
  account: () => ({ _state: { amount: '1' + '0'.repeat(25) } }),
  requestSignIn: () => null,
  signOut: () => null,
  isSignedIn: () => false,
  getAccountId: () => 'test.near'
};
const nearConfig = {
  networkId: 'testnet',
  nodeUrl: 'https://rpc.testnet.near.org',
  contractName: 'test.near',
  walletUrl: 'https://wallet.testnet.near.org',
  helperUrl: 'https://near-contract-helper.onrender.com'
};

// For UI tests, use pattern from: https://reactjs.org/docs/test-renderer.html
let container;

beforeEach(() => {
  container = document.createElement('div');
  document.body.appendChild(container);
});

afterEach(() => {
  document.body.removeChild(container);
  container = null;
});

it('renders with proper title', () => {
  let testRenderer;

  act(() => {
    testRenderer = TestRenderer.create(
      <App contract={contract} wallet={walletConnection} nearConfig={nearConfig} />
    );
  });

  const testInstance = testRenderer.root;

  expect(testInstance.findByType('h1').children).toEqual(['NEAR Guest Book']);
});

'''