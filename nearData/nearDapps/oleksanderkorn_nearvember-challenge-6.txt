*GitHub Repository "oleksanderkorn/nearvember-challenge-6"*

'''--- .eslintrc.yml ---
env:
  es2021: true
  node: true
extends:
  - 'eslint:recommended'
  - 'plugin:@typescript-eslint/recommended'
parser: '@typescript-eslint/parser'
parserOptions:
  ecmaVersion: 12
  sourceType: module
plugins:
  - '@typescript-eslint'
rules: {}

'''
'''--- .gitpod.yml ---
tasks:
  - init: yarn
    command: yarn dev
ports:
  - port: 1234
    onOpen: open-browser

'''
'''--- README.md ---
# nearvember-challenge-6

This [React] app was initialized with [create-near-app]

# Quick Start

To run this project locally:

1. Prerequisites: Make sure you've installed [Node.js] â‰¥ 12
2. Install dependencies: `yarn install`
3. Run the local development server: `yarn dev` (see `package.json` for a
   full list of `scripts` you can run with `yarn`)

Now you'll have a local development environment backed by the NEAR TestNet!

Go ahead and play with the app and the code. As you make code changes, the app will automatically reload.

# Exploring The Code

1. The "backend" code lives in the `/contract` folder. See the README there for
   more info.
2. The frontend code lives in the `/src` folder. `/src/index.html` is a great
   place to start exploring. Note that it loads in `/src/index.js`, where you
   can learn how the frontend connects to the NEAR blockchain.
3. Tests: there are different kinds of tests for the frontend and the smart
   contract. See `contract/README` for info about how it's tested. The frontend
   code gets tested with [jest]. You can run both of these at once with `yarn run test`.

# Deploy

Every smart contract in NEAR has its [own associated account][near accounts]. When you run `yarn dev`, your smart contract gets deployed to the live NEAR TestNet with a throwaway account. When you're ready to make it permanent, here's how.

## Step 0: Install near-cli (optional)

[near-cli] is a command line interface (CLI) for interacting with the NEAR blockchain. It was installed to the local `node_modules` folder when you ran `yarn install`, but for best ergonomics you may want to install it globally:

    yarn install --global near-cli

Or, if you'd rather use the locally-installed version, you can prefix all `near` commands with `npx`

Ensure that it's installed with `near --version` (or `npx near --version`)

## Step 1: Create an account for the contract

Each account on NEAR can have at most one contract deployed to it. If you've already created an account such as `your-name.testnet`, you can deploy your contract to `nearvember-challenge-6.your-name.testnet`. Assuming you've already created an account on [NEAR Wallet], here's how to create `nearvember-challenge-6.your-name.testnet`:

1. Authorize NEAR CLI, following the commands it gives you:

   near login

2. Create a subaccount (replace `YOUR-NAME` below with your actual account name):

   near create-account nearvember-challenge-6.YOUR-NAME.testnet --masterAccount YOUR-NAME.testnet

## Step 2: set contract name in code

Modify the line in `src/config.js` that sets the account name of the contract. Set it to the account id you used above.

    const CONTRACT_NAME = process.env.CONTRACT_NAME || 'nearvember-challenge-6.YOUR-NAME.testnet'

## Step 3: deploy!

One command:

    yarn deploy

As you can see in `package.json`, this does two things:

1. builds & deploys smart contract to NEAR TestNet
2. builds & deploys frontend code to GitHub using [gh-pages]. This will only work if the project already has a repository set up on GitHub. Feel free to modify the `deploy` script in `package.json` to deploy elsewhere.

# Troubleshooting

On Windows, if you're seeing an error containing `EPERM` it may be related to spaces in your path. Please see [this issue](https://github.com/zkat/npx/issues/209) for more details.

[react]: https://reactjs.org/
[create-near-app]: https://github.com/near/create-near-app
[node.js]: https://nodejs.org/en/download/package-manager/
[jest]: https://jestjs.io/
[near accounts]: https://docs.near.org/docs/concepts/account
[near wallet]: https://wallet.testnet.near.org/
[near-cli]: https://github.com/near/near-cli
[gh-pages]: https://github.com/tschaub/gh-pages

'''
'''--- babel.config.js ---
module.exports = {
  presets: ['@babel/preset-env', '@babel/preset-react'],
}

'''
'''--- package.json ---
{
  "name": "nearvember-challenge-6",
  "version": "0.1.0",
  "license": "UNLICENSED",
  "homepage": "https://oleksanderkorn.github.io/nearvember-challenge-6/",
  "scripts": {
    "build": "npm run build:web",
    "build:web": "parcel build src/index.html --public-url ./",
    "dev:deploy:contract": "near dev-deploy",
    "deploy:contract": "near deploy",
    "deploy:pages": "gh-pages -d dist/",
    "deploy": "npm run build && npm run deploy:pages",
    "start": "echo The app is starting! It will automatically open in your browser when ready && env-cmd -f ./neardev/dev-account.env parcel src/index.html --open",
    "dev": "nodemon --watch contract/src -e rs --exec \"npm run start\"",
    "lint": "eslint \"./**/*.js\" \"./**/*.jsx\"",
    "test": "npm run build:contract:debug && cd contract && cargo test -- --nocapture && cd .. && jest test --runInBand"
  },
  "devDependencies": {
    "@babel/core": "~7.14.0",
    "@babel/preset-env": "~7.14.0",
    "@babel/preset-react": "~7.13.13",
    "@typescript-eslint/eslint-plugin": "^4.22.1",
    "@typescript-eslint/parser": "^4.22.1",
    "babel-jest": "~26.6.2",
    "env-cmd": "~10.1.0",
    "eslint": "^7.26.0",
    "gh-pages": "~3.1.0",
    "jest": "~26.6.2",
    "jest-environment-node": "~26.6.2",
    "near-cli": "~2.1.1",
    "nodemon": "~2.0.3",
    "parcel-bundler": "~1.12.4",
    "react-test-renderer": "~17.0.1",
    "shelljs": "~0.8.4"
  },
  "dependencies": {
    "@emotion/react": "^11.6.0",
    "@emotion/styled": "^11.6.0",
    "@fontsource/roboto": "^4.5.1",
    "@material-ui/styles": "^4.11.4",
    "@mui/icons-material": "^5.1.1",
    "@mui/material": "^5.1.1",
    "axios": "^0.24.0",
    "big.js": "^6.1.1",
    "near-api-js": "~0.43.1",
    "random-words": "^1.1.1",
    "react": "~17.0.1",
    "react-canvas-draw": "^1.2.1",
    "react-dom": "~17.0.1",
    "regenerator-runtime": "~0.13.5"
  },
  "resolutions": {
    "@babel/preset-env": "7.13.8"
  },
  "jest": {
    "moduleNameMapper": {
      "\\.(jpg|ico|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$": "<rootDir>/src/__mocks__/fileMock.js",
      "\\.(css|less)$": "<rootDir>/src/__mocks__/fileMock.js"
    },
    "setupFiles": [
      "<rootDir>/src/jest.init.js"
    ],
    "testEnvironment": "near-cli/test_environment",
    "testPathIgnorePatterns": [
      "<rootDir>/contract/",
      "<rootDir>/node_modules/"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

'''
'''--- src/App.js ---
import "regenerator-runtime/runtime";
import React, { useEffect, useRef, useState } from "react";
import { login, logout } from "./utils";
import {
  Typography,
  Box,
  TextField,
  Grid,
  AppBar,
  Toolbar,
  IconButton,
  Button,
  Card,
  CardMedia,
  CardHeader,
  CardContent,
  CssBaseline,
} from "@mui/material";
import YouTubeIcon from "@mui/icons-material/YouTube";
import { ThemeProvider, useTheme, createTheme } from "@mui/material/styles";
import "@fontsource/roboto/300.css";
import "@fontsource/roboto/400.css";
import "@fontsource/roboto/500.css";
import "@fontsource/roboto/700.css";
import "./global.css";
import Big from "big.js";
import screamingMan from "./assets/screaming.png";
import screamingMan2 from "./assets/screaming2.png";

import getConfig from "./config";
const { networkId } = getConfig("testnet");

const darkTheme = createTheme({
  palette: {
    mode: "dark",
  },
});

export default function App() {
  const isLoggedIn = () => window.walletConnection.isSignedIn();

  return (
    <>
      <ThemeProvider theme={darkTheme}>
        <CssBaseline />
        <MyAppBar />
        {isLoggedIn() ? (
          <Box sx={{ flexGrow: 1 }}>
            <TokenCard />
          </Box>
        ) : (
          <Box sx={{ flexGrow: 1 }}>
            <Grid
              style={{
                display: "flex",
                justifyContent: "center",
                marginTop: 50,
              }}
              container
              spacing={2}
            >
              <Card sx={{ maxWidth: 1200 }}>
                <CardHeader
                  style={{ textAlign: "center" }}
                  title={`Scream together with your friend using AAAAA token`}
                  subheader={`Sign in to start!`}
                  action={
                    <IconButton
                      component="a"
                      href="https://youtu.be/gfkts0u-m6w?t=25"
                      target="_blank"
                      aria-label="settings"
                    >
                      <YouTubeIcon />
                    </IconButton>
                  }
                />
                <CardMedia
                  component="img"
                  image={screamingMan2}
                  alt="Screaming"
                />
              </Card>
            </Grid>
          </Box>
        )}
      </ThemeProvider>
    </>
  );
}

const TokenCard = () => {
  const [showNotification, setShowNotification] = useState(false);
  const [receiver, setReceiver] = useState("lkskrnk.testnet");
  const [amount, setAmount] = useState(1);
  const [isLoading, setIsloading] = useState(false);
  const [registered, setRegistered] = useState(false);
  const [receiverRegistered, setReceiverRegistered] = useState(false);
  const [balance, setBalance] = useState("0");
  const [error, setError] = useState("");
  const [message, setMessage] = useState("");
  const [totalSupply, setTotalSupply] = useState(null);

  const BOATLOAD_OF_GAS = Big(3)
    .times(10 ** 13)
    .toFixed();

  const storedBalance = () =>
    localStorage.getItem(`balance_${window.accountId}`);

  const resetStoredBalance = () =>
    localStorage.removeItem(`balance_${window.accountId}`);

  const setStoredBalance = (newBalance) =>
    localStorage.setItem(`balance_${window.accountId}`, newBalance);

  const isRegistered = (account) => {
    return window.contract.is_registered({
      account_id: account,
    });
  };

  const getAccountBalance = () => {
    window.contract
      .ft_balance_of({
        account_id: window.accountId,
      })
      .then(
        (data) => {
          setBalance(data);
          setIsloading(false);
          const oldBalance = storedBalance();
          setStoredBalance(data);
          if (oldBalance && oldBalance !== data) {
            if (oldBalance < data) {
              setMessage(`Mint Succesfull, new balance ${data} $AAAAA `);
            } else {
              setMessage(`Transfer Succesfull, new balance ${data} $AAAAA `);
            }
            setShowNotification(true);
            setTimeout(() => {
              setShowNotification(false);
            }, 6000);
          }
        },
        (err) => {
          setError(
            err.kind && err.kind.ExecutionError
              ? err.kind.ExecutionError
              : `${err}`
          );
          setTimeout(() => {
            setError("");
          }, 5000);
          setIsloading(false);
        }
      );
  };

  useEffect(() => {
    getAccountBalance();
  }, []);

  useEffect(() => {
    window.contract.ft_total_supply({}).then((data) => {
      setTotalSupply(data);
    });
  }, []);

  const registerToken = () => {
    window.contract.storage_deposit(
      {
        account_id: window.accountId,
      },
      BOATLOAD_OF_GAS,
      Big(0.01)
        .times(10 ** 24)
        .toFixed()
    );
  };

  const registerReceiver = () => {
    window.contract.storage_deposit(
      {
        account_id: receiver,
      },
      BOATLOAD_OF_GAS,
      Big(0.01)
        .times(10 ** 24)
        .toFixed()
    );
  };

  const mintTokens = () => {
    window.contract.ft_mint(
      {
        receiver_id: window.accountId,
        amount: "1000",
      },
      BOATLOAD_OF_GAS,
      Big(0.01)
        .times(10 ** 24)
        .toFixed()
    );
  };

  const canTransfer = () => {
    return receiver !== "" && amount > 0 && amount < 1000;
  };

  const transferTokens = () => {
    if (canTransfer()) {
      window.contract
        .ft_transfer(
          {
            receiver_id: receiver,
            amount: `${amount}`,
          },
          BOATLOAD_OF_GAS,
          Big(0.000000000000000000000001)
            .times(10 ** 24)
            .toFixed()
        )
        .then(
          (res) => {
            setIsloading(false);
            setShowNotification(true);
            setTimeout(() => {
              setShowNotification(false);
            }, 5000);
          },
          (err) => {
            setError(
              err.kind && err.kind.ExecutionError
                ? err.kind.ExecutionError
                : `${err}`
            );
            setTimeout(() => {
              setError("");
            }, 5000);
            setIsloading(false);
          }
        );
    }
  };

  return (
    <Box autoComplete="off">
      <Grid style={{ marginTop: 40 }} container spacing={2}>
        <Grid
          item
          xs={12}
          style={{ display: "flex", justifyContent: "center" }}
        >
          <Card sx={{ maxWidth: 800 }}>
            <CardHeader
              title={`Hi, ${window.accountId}!`}
              subheader={`Send $AAAAA to you friend to scream together! Your balance is ${balance} $AAAAA`}
              action={
                <IconButton
                  component="a"
                  href="https://youtu.be/gfkts0u-m6w?t=25"
                  target="_blank"
                  aria-label="settings"
                >
                  <YouTubeIcon />
                </IconButton>
              }
            />
            <CardMedia
              component="img"
              image={screamingMan}
              alt="Screaming Man"
            />
            <CardContent>
              <Grid style={{ marginTop: 10 }} container spacing={2}>
                <Grid item xs={12}>
                  <Typography variant="body2" color="text.secondary">
                    Register your account first and then Mint 1000 $AAAAA.{" "}
                    {totalSupply && `Total Issuance: ${totalSupply} $AAAAA`}
                  </Typography>
                </Grid>
                <Grid item xs={6}>
                  <Button
                    fullWidth
                    style={{ height: "100%" }}
                    onClick={registerToken}
                    disabled={registered}
                    variant="outlined"
                  >
                    {registered ? "Account Registered" : "Register"}
                  </Button>
                </Grid>
                <Grid item xs={6}>
                  <Button
                    fullWidth
                    style={{ height: "100%" }}
                    onClick={mintTokens}
                    variant="outlined"
                  >
                    Mint 1000
                  </Button>
                </Grid>
                <Grid item xs={12}>
                  <Typography variant="body2" color="text.secondary">
                    Enter receiver address. You may also need to register
                    reciever. Use the dedicated button.
                  </Typography>
                </Grid>
                <Grid item xs={6}>
                  <TextField
                    value={receiver}
                    onChange={async (event) => {
                      const res = event.target.value;
                      setReceiver(res);
                      // const isReg = await isRegistered(res);
                      // setReceiverRegistered(isReg);
                    }}
                    label="Receiver"
                    variant="standard"
                    fullWidth
                  />
                </Grid>
                <Grid item xs={6}>
                  <Button
                    fullWidth
                    style={{ height: "100%" }}
                    onClick={registerReceiver}
                    disabled={receiver === ""}
                    variant="outlined"
                  >
                    {`Register`}
                  </Button>
                </Grid>
                <Grid item xs={12}>
                  <Typography variant="body2" color="text.secondary">
                    Enter amount you want to send and click send!
                  </Typography>
                </Grid>
                <Grid item xs={6}>
                  <TextField
                    fullWidth
                    value={amount}
                    onChange={(event) => setAmount(event.target.value)}
                    type="number"
                    label="Amount"
                    variant="standard"
                  />
                </Grid>
                <Grid item xs={6}>
                  <Button
                    fullWidth
                    style={{ height: "100%" }}
                    onClick={transferTokens}
                    variant="outlined"
                    disabled={!canTransfer()}
                  >
                    Send
                  </Button>
                </Grid>
              </Grid>
            </CardContent>
          </Card>
        </Grid>
      </Grid>
      {showNotification && (
        <Notification oldBalance={storedBalance()} message={message} />
      )}
    </Box>
  );
};

const MyAppBar = () => {
  const isLoggedIn = () => window.walletConnection.isSignedIn();
  const [mode, setMode] = useState("light");
  const theme = React.useMemo(
    () =>
      createTheme({
        palette: {
          mode,
        },
      }),
    [mode]
  );
  return (
    <>
      {isLoggedIn() ? (
        <Button style={{ float: "right" }} onClick={logout} color="inherit">
          Log out
        </Button>
      ) : (
        <Button style={{ float: "right" }} color="inherit" onClick={login}>
          Login
        </Button>
      )}
    </>
  );
};

const Notification = ({ message }) => {
  const urlPrefix = `https://explorer.${networkId}.near.org/accounts`;
  return (
    <aside>
      <a
        target="_blank"
        rel="noreferrer"
        href={`${urlPrefix}/${window.accountId}`}
      ></a>
      {message}
      <a
        target="_blank"
        rel="noreferrer"
        href={`${urlPrefix}/${window.contract.contractId}`}
      >
        {window.contract.contractId}
      </a>
      <footer>
        <div>âœ” Succeeded</div>
        <div>Just now</div>
      </footer>
    </aside>
  );
};

'''
'''--- src/__mocks__/fileMock.js ---
// NOTE: This is used to mock resource imports in JSX for tests
module.exports = '' 

'''
'''--- src/assets/logo-black.svg ---
<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#24272a"/><stop offset=".42" stop-color="#24272a" stop-opacity="0"/><stop offset=".59" stop-color="#24272a" stop-opacity="0"/><stop offset=".81" stop-color="#24272a"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#24272a"/></svg>
'''
'''--- src/assets/logo-white.svg ---
<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#fff"/><stop offset=".42" stop-color="#fff" stop-opacity="0"/><stop offset=".59" stop-color="#fff" stop-opacity="0"/><stop offset=".81" stop-color="#fff"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#fff"/></svg>
'''
'''--- src/config.js ---
const CONTRACT_NAME = "challenge-6-1.lkskrnk.testnet";

function getConfig(env) {
  switch (env) {
    case "production":
    case "mainnet":
      return {
        networkId: "mainnet",
        nodeUrl: "https://rpc.mainnet.near.org",
        contractName: CONTRACT_NAME,
        walletUrl: "https://wallet.near.org",
        helperUrl: "https://helper.mainnet.near.org",
        explorerUrl: "https://explorer.mainnet.near.org",
      };
    case "development":
    case "testnet":
      return {
        networkId: "testnet",
        nodeUrl: "https://rpc.testnet.near.org",
        contractName: CONTRACT_NAME,
        walletUrl: "https://wallet.testnet.near.org",
        helperUrl: "https://helper.testnet.near.org",
        explorerUrl: "https://explorer.testnet.near.org",
      };
    case "betanet":
      return {
        networkId: "betanet",
        nodeUrl: "https://rpc.betanet.near.org",
        contractName: CONTRACT_NAME,
        walletUrl: "https://wallet.betanet.near.org",
        helperUrl: "https://helper.betanet.near.org",
        explorerUrl: "https://explorer.betanet.near.org",
      };
    case "local":
      return {
        networkId: "local",
        nodeUrl: "http://localhost:3030",
        keyPath: `${process.env.HOME}/.near/validator_key.json`,
        walletUrl: "http://localhost:4000/wallet",
        contractName: CONTRACT_NAME,
      };
    case "test":
    case "ci":
      return {
        networkId: "shared-test",
        nodeUrl: "https://rpc.ci-testnet.near.org",
        contractName: CONTRACT_NAME,
        masterAccount: "test.near",
      };
    case "ci-betanet":
      return {
        networkId: "shared-test-staging",
        nodeUrl: "https://rpc.ci-betanet.near.org",
        contractName: CONTRACT_NAME,
        masterAccount: "test.near",
      };
    default:
      throw Error(
        `Unconfigured environment '${env}'. Can be configured in src/config.js.`
      );
  }
}

module.exports = getConfig;

'''
'''--- src/global.css ---
* {
  box-sizing: border-box;
}

html {
  --bg: #efefef;
  --fg: #1e1e1e;
  --gray: #555;
  --light-gray: #ccc;
  --shadow: #e6e6e6;
  --success: rgb(90, 206, 132);
  --primary: #ff585d;
  --secondary: #0072ce;

  background-color: var(--bg);
  color: var(--fg);
  font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Helvetica,
    Arial, sans-serif;
  font-size: calc(0.9em + 0.5vw);
  line-height: 1.3;
}

body {
  margin: 0;
  padding: 1em;
}

main {
  margin: 0 auto;
  max-width: 25em;
}

h1 {
  background-image: url(assets/logo-black.svg);
  background-position: center 1em;
  background-repeat: no-repeat;
  background-size: auto 1.5em;
  margin-top: 0;
  padding: 3.5em 0 0.5em;
  text-align: center;
}

a,
.link {
  color: var(--primary);
  text-decoration: none;
}
a:hover,
a:focus,
.link:hover,
.link:focus {
  text-decoration: underline;
}
a:active,
.link:active {
  color: var(--secondary);
}

button,
input {
  font: inherit;
  outline: none;
}

button {
  background-color: var(--secondary);
  border-radius: 5px;
  border: none;
  color: #efefef;
  cursor: pointer;
  padding: 0.3em 0.75em;
  transition: transform 30ms;
}
button:hover,
button:focus {
  box-shadow: 0 0 10em rgba(255, 255, 255, 0.2) inset;
}
button:active {
  box-shadow: 0 0 10em rgba(0, 0, 0, 0.1) inset;
}
button.link {
  background: none;
  border: none;
  box-shadow: none;
  display: inline;
}
[disabled] button,
button[disabled] {
  box-shadow: none;
  background-color: var(--light-gray);
  color: gray;
  cursor: not-allowed;
  transform: none;
}
[disabled] button {
  text-indent: -900em;
  width: 2em;
  position: relative;
}
[disabled] button:after {
  content: " ";
  display: block;
  width: 0.8em;
  height: 0.8em;
  border-radius: 50%;
  border: 2px solid #fff;
  border-color: var(--fg) transparent var(--fg) transparent;
  animation: loader 1.2s linear infinite;
  position: absolute;
  top: 0.45em;
  right: 0.5em;
}
@keyframes loader {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

fieldset {
  border: none;
  padding: 2em 0;
}

input {
  background-color: var(--shadow);
  border: none;
  border-radius: 5px 0 0 5px;
  caret-color: var(--primary);
  color: inherit;
  padding: 0.25em 1em;
}
input::selection {
  background-color: var(--secondary);
  color: #efefef;
}
input:focus {
  box-shadow: 0 0 10em rgba(0, 0, 0, 0.02) inset;
}

code {
  color: var(--gray);
}

li {
  padding-bottom: 1em;
}

aside {
  animation: notify ease-in-out 10s;
  background-color: var(--shadow);
  border-radius: 5px;
  bottom: 0;
  font-size: 0.8em;
  margin: 1em;
  padding: 1em;
  position: fixed;
  transform: translateY(10em);
  right: 0;
}
aside footer {
  display: flex;
  font-size: 0.9em;
  justify-content: space-between;
  margin-top: 0.5em;
}
aside footer *:first-child {
  color: var(--success);
}
aside footer *:last-child {
  color: var(--gray);
}
@keyframes notify {
  0% {
    transform: translateY(10em);
  }
  5% {
    transform: translateY(0);
  }
  95% {
    transform: translateY(0);
  }
  100% {
    transform: translateY(10em);
  }
}

@media (prefers-color-scheme: dark) {
  html {
    --bg: #1e1e1e;
    --fg: #efefef;
    --gray: #aaa;
    --shadow: #2a2a2a;
    --light-gray: #444;
  }
  h1 {
    background-image: url(assets/logo-white.svg);
  }
  input:focus {
    box-shadow: 0 0 10em rgba(255, 255, 255, 0.02) inset;
  }
}

'''
'''--- src/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="./assets/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="apple-touch-icon" href="./assets/favicon.ico" />
    <title>Welcome to NEAR with React</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
    <script src="./index.js"></script>
  </body>
</html>

'''
'''--- src/index.js ---
import React from 'react'
import ReactDOM from 'react-dom'
import App from './App'
import { initContract } from './utils'

window.nearInitPromise = initContract()
  .then(() => {
    ReactDOM.render(
      <App />,
      document.querySelector('#root')
    )
  })
  .catch(console.error)

'''
'''--- src/jest.init.js ---
import 'regenerator-runtime/runtime'

'''
'''--- src/main.test.js ---
beforeAll(async function () {
  // NOTE: nearlib and nearConfig are made available by near-cli/test_environment
  const near = await nearlib.connect(nearConfig)
  window.accountId = nearConfig.contractName
  window.contract = await near.loadContract(nearConfig.contractName, {
    viewMethods: ['get_greeting'],
    changeMethods: [],
    sender: window.accountId
  })

  window.walletConnection = {
    requestSignIn() {
    },
    signOut() {
    },
    isSignedIn() {
      return true
    },
    getAccountId() {
      return window.accountId
    }
  }
})

test('get_greeting', async () => {
  const message = await window.contract.get_greeting({ account_id: window.accountId })
  expect(message).toEqual('Hello')
})

'''
'''--- src/utils.js ---
import { connect, Contract, keyStores, WalletConnection } from "near-api-js";
import getConfig from "./config";

const nearConfig = getConfig("testnet");

// Initialize contract & set global variables
export async function initContract() {
  // Initialize connection to the NEAR testnet
  const near = await connect(
    Object.assign(
      { deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() } },
      nearConfig
    )
  );

  // Initializing Wallet based Account. It can work with NEAR testnet wallet that
  // is hosted at https://wallet.testnet.near.org
  window.walletConnection = new WalletConnection(near);

  // Getting the Account ID. If still unauthorized, it's just empty string
  window.accountId = window.walletConnection.getAccountId();

  // Initializing our contract APIs by contract name and configuration
  window.contract = await new Contract(
    window.walletConnection.account(),
    nearConfig.contractName,
    {
      // View methods are read only. They don't modify the state, but usually return some value.
      viewMethods: ["ft_balance_of", "is_registered", "ft_total_supply"],
      // Change methods can modify the state. But you don't receive the returned value when called.
      changeMethods: ["storage_deposit", "ft_transfer", "ft_mint"],
    }
  );
}

export function logout() {
  window.walletConnection.signOut();
  // reload page
  window.location.replace(window.location.origin + window.location.pathname);
}

export function login() {
  // Allow the current app to make calls to the specified contract on the
  // user's behalf.
  // This works by creating a new access key for the user's account and storing
  // the private key in localStorage.
  window.walletConnection.requestSignIn(nearConfig.contractName);
}

'''
'''--- src/wallet/login/index.html ---
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/css/bootstrap.min.css" integrity="sha384-GJzZqFGwb1QTTN6wy59ffF1BuGJpLSa9DkKMp0DgiMDm4iYMj70gZWKYbI706tWS" crossorigin="anonymous">
</head>
<body style="background: #fff; margin-top: 3em">
  <div>For local account login, Please run the following command in NEAR CLI, then enter account id here.
  </div>
  <div>
      <code id="shell-command"></code>
  </div>
  <input type="text" id="accountId" name="accountId" placeholder="Account id"></input>
  <button type="button" onClick="done()">done</button>
  <script>
    const currentUrl = new URL(window.location.href);
    const message = `NODE_ENV=local near create_account {newAccountId} --masterAccount {masterAccountId} --publicKey ${currentUrl.searchParams.get('public_key')} --initialAmount 10000000000000000000`;
    document.getElementById('shell-command').innerText = message;

    function done() {
      const successUrl = new URL(currentUrl.searchParams.get('success_url'));
      successUrl.searchParams.set('account_id', document.getElementById('accountId').value);
      successUrl.searchParams.set('public_key', currentUrl.searchParams.get('public_key'));
      window.location.assign(successUrl.toString());
    }
  </script>
</body>
</html>
'''