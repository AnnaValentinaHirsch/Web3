*GitHub Repository "agileurbanite/ui.near-linkdrop"*

'''--- config-overrides.js ---
module.exports = (config) => {
  config.module.rules.push({
    test: /\.worker\.js$/,
    loader: 'worker-loader',
    options: {
      filename: '[name].[contenthash].worker.js',
    },
  });

  return config;
};

'''
'''--- public/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <title>NEARDROP</title>
    <meta
      name="description"
      content="The non-custodial app allows no-coders to setup token-based marketing campaigns and onboard new users"
    />
    <!-- General Open Graph -->
    <meta property="og:url" content="https://app.neardrop.io/" />
    <meta property="og:site_name" content="NEARDROP" />
    <meta
      property="og:title"
      content="NEARDROP - the easiest way to onboard new users to the NEARverse"
    />
    <meta
      property="og:description"
      content="The non-custodial app allows no-coders to setup token-based marketing campaigns and onboard new users"
    />
    <!-- Thumbnail -->
    <meta property="og:image" content="%PUBLIC_URL%/thumbnail.jpg">
    <meta property="og:image:width" content="1200">
    <meta property="og:image:height" content="630">
    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:site" content="@NEARDR0P" />
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <style>
      html,
      body {
        width: 100vw;
        height: 100vh;
        margin: 0;
        padding: 0;
        font-family: Roboto, sans-serif;
        color: rgba(0, 0, 0, 0.87);
      }
      @media screen and (min-width: 360px) {
        html,
        body {
          overflow-x: hidden;
        }
      }
      a {
        text-decoration: none;
        color: inherit;
      }
    </style>
    <link
      rel="stylesheet"
      href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700,900&display=swap"
    />
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
  </body>
</html>

'''
'''--- src/config/campaignStatus.js ---
export const campaignStatus = {
  creation: 'Creation',
  active: 'Active',
  completed: 'Completed',
  deletion: 'Deletion',
};

'''
'''--- src/config/keyStatus.js ---
export const keyStatus = {
  active: 'Active',
  created: 'Created',
  claimed: 'Claimed',
  refunded: 'Refunded',
};

'''
'''--- src/config/modals.js ---
export const modals = {
  createCampaign: 'createCampaign',
  deleteCampaign: 'deleteCampaign',
  resumeCampaignCreation: 'resumeCampaignCreation',
  resumeCampaignDeletion: 'resumeCampaignDeletion',
};

'''
'''--- src/config/nearConfig.js ---
const testnet = {
  networkId: 'testnet',
  nodeUrl: 'https://rpc.testnet.near.org',
  walletUrl: 'https://testnet.mynearwallet.com',
  helperUrl: 'https://testnet-api.kitwallet.app',
  explorerUrl: 'https://explorer.testnet.near.org',
  accounts: {
    linkdrop: 'linkdrop.testnet',
    accountCreator: 'testnet',
  },
  isTestnet: true,
};

const mainnet = {
  networkId: 'mainnet',
  nodeUrl: 'https://rpc.mainnet.near.org',
  walletUrl: 'https://app.mynearwallet.com',
  helperUrl: 'https://api.kitwallet.app',
  explorerUrl: 'https://explorer.near.org',
  accounts: {
    linkdrop: 'linkdropv1.near',
    accountCreator: 'near',
  },
  isTestnet: false,
};

const configs = {
  testnet,
  mainnet,
};

const createHelpers = (config) => ({
  getCheckAccountInExplorerUrl: (accountId) => `${config.explorerUrl}/accounts/${accountId}`,
  getCreateAccountAndClaimLink: (secretKey, campaignAccountId) =>
    `${config.walletUrl}/linkdrop/${campaignAccountId}/${secretKey}`,
});

const getNearConfig = (network) => {
  const config = configs[network];
  return {
    ...config,
    ...createHelpers(config),
  };
};

export const nearConfig = getNearConfig(process.env.REACT_APP_NETWORK);

'''
'''--- src/config/redirectActions.js ---
export const redirectActions = {
  connectWallet: 'connectWallet',
  createAccount: 'createAccount',
  createNearCampaign: 'createNearCampaign',
};

'''
'''--- src/config/references.js ---
export const socialMedia = {
  twitter: 'https://twitter.com/NEARDR0P',
  telegram: 'https://t.me/joinchat/sPqlT3Zt-mAyNmI0',
  gitHub: 'https://github.com/agileurbanite/contracts.near-linkdrop'
}

'''
'''--- src/config/routes.js ---
import qs from 'query-string';

export const routes = {
  // Technical
  root: '/',
  redirectFromWallet: '/redirect-from-wallet',
  // Pages
  connectWallet: '/connect-wallet',
  createAccount: '/create-account',
  restoreAccess: '/restore-access',
  campaigns: '/campaigns',
  settings: '/settings',
  createCampaign: '/create-campaign',
  campaign: '/campaigns/:campaignId',
};

export const getRoute = {
  campaign: (campaignId) => `/campaigns/${campaignId}`,
  callbackUrl: (params) => `${window.location.origin}/redirect-from-wallet?${qs.stringify(params)}`,
};

'''
'''--- src/store/actions/index.js ---
import { resetState } from './resetState';

export const actions = {
  resetState,
};

'''
'''--- src/store/actions/resetState.js ---
import { action } from 'easy-peasy';
import { initState as general } from '../general/initState';
import { initState as campaigns } from '../campaigns/initState';
import { initState as user } from '../general/user/initState';
import { initState as settings } from '../settings/initState';

export const resetState = action((state) => {
  state.general = general;
  state.general.user = user;
  state.campaigns = campaigns;
  state.settings = settings;
});

'''
'''--- src/store/campaigns/actions/deleteCampaign.js ---
import { action } from 'easy-peasy';

export const deleteCampaign = action((slice, campaignId) => {
  slice.list = slice.list.filter((id) => id !== campaignId);
  delete slice.map[campaignId];
});

'''
'''--- src/store/campaigns/actions/index.js ---
import { refundLink } from './refundLink';
import { mountCampaign } from './mountCampaign';
import { mountCampaigns } from './mountCampaigns';
import { loadKeys } from './loadKeys';
import { deleteCampaign } from './deleteCampaign';
import { mountCreateCampaign } from './mountCreateCampaign';

export const actions = {
  refundLink,
  mountCampaign,
  mountCampaigns,
  loadKeys,
  deleteCampaign,
  mountCreateCampaign,
};

'''
'''--- src/store/campaigns/actions/loadKeys.js ---
import { action } from 'easy-peasy';

export const loadKeys = action((slice, payload) => {
  const { keys, keyStats, pagination } = payload;

  slice.campaign.pagination = pagination;
  slice.campaign.keys = keys.map((key, index) => ({
    ...key,
    status: keyStats[index].status,
  }));
});

'''
'''--- src/store/campaigns/actions/mountCampaign.js ---
import { action } from 'easy-peasy';
import { emoji } from '../../../ui/config/emoji';
import { getCampaignName } from '../../../ui/utils/formatCampaignData';

export const mountCampaign = action((slice, payload) => {
  const { campaignId, metadata, balance, keys, keyStats, pagination } = payload;

  slice.campaign = {
    campaignId,
    internalCampaignId: metadata.campaignId,
    name: getCampaignName(campaignId),
    balance,
    icon: emoji.foxMuzzle,
    tokensPerKey: metadata.tokensPerKey,
    createdAt: Math.trunc(metadata.createdAt / 1000000), // Convert nanoseconds to milliseconds
    keysStats: metadata.keysStats,
    status: metadata.status,
    pagination,
    keys: keys.map((key, index) => ({
      ...key,
      status: keyStats[index].status,
    })),
  };
});

'''
'''--- src/store/campaigns/actions/mountCampaigns.js ---
import { action } from 'easy-peasy';
import { emoji } from '../../../ui/config/emoji';
import { getCampaignName } from '../../../ui/utils/formatCampaignData';

export const mountCampaigns = action((slice, payload) => {
  const { campaignIds, campaigns } = payload;

  slice.list = [];
  slice.map = {};

  campaigns.forEach((campaign, index) => {
    const campaignAccountId = campaignIds[index];

    slice.list.push(campaignAccountId);
    slice.map[campaignAccountId] = {
      campaignId: campaignAccountId,
      internalCampaignId: campaign.campaignId,
      name: getCampaignName(campaignAccountId),
      icon: emoji.foxMuzzle,
      status: campaign.status,
      createdAt: Math.trunc(campaign.createdAt / 1000000), // Convert nanoseconds to milliseconds
      tokensPerKey: campaign.tokensPerKey,
      keysStats: campaign.keysStats,
    };
  });
});

'''
'''--- src/store/campaigns/actions/mountCreateCampaign.js ---
import { action } from 'easy-peasy';

export const mountCreateCampaign = action((slice, payload) => {
  const { balance, campaignIds } = payload;

  slice.createCampaign = {
    availableBalance: balance.available,
    campaignNames: new Set(campaignIds.map((campaignId) => campaignId.split('.')[0])),
  };
});

'''
'''--- src/store/campaigns/actions/refundLink.js ---
import { action } from 'easy-peasy';
import { keyStatus } from '../../../config/keyStatus';

export const refundLink = action((slice, payload) => {
  const { balance, metadata, pk } = payload;

  slice.campaign.balance = balance;
  slice.campaign.keysStats = metadata.keysStats;
  slice.campaign.status = metadata.status;

  const link = slice.campaign.keys.find((key) => key.pk === pk);
  link.status = keyStatus.refunded;
});

'''
'''--- src/store/campaigns/helpers/createAddKeysIterator.js ---

'''
'''--- src/store/campaigns/helpers/generateKeys.worker.js ---
import { mnemonicToSeed } from 'bip39-light';
import bs58 from 'bs58';
import { derivePath } from 'ed25519-hd-key';
import nacl from 'tweetnacl';

const getPath = (campaignId, keyId) => `m/44'/397'/0'/${campaignId}'/${keyId}'`;

export const createGenerateKey = (seedPhrase) => {
  const seed = mnemonicToSeed(seedPhrase);

  return (campaignId, keyId) => {
    const { key } = derivePath(getPath(campaignId, keyId), seed.toString('hex'));
    const keyPair = nacl.sign.keyPair.fromSeed(key);

    return {
      pk: bs58.encode(Buffer.from(keyPair.publicKey)),
      sk: bs58.encode(Buffer.from(keyPair.secretKey)),
    };
  };
};

const generateKeys = ({ mnemonic, start, end, internalCampaignId }) => {
  const generateKey = createGenerateKey(mnemonic);
  const keysAmount = end - start + 1; // We want to include the last elem

  return Array(keysAmount)
    .fill(0)
    .map((_, index) => ({
      ...generateKey(internalCampaignId, start + index),
      order: start + index,
    }));
};

onmessage = ({ data }) => {
  postMessage(generateKeys(data));
};

'''
'''--- src/store/campaigns/helpers/getChunksRange.js ---
/*
  Signature: startElement, totalElements, elementsPerChunk -> result
  1, 10, 10 -> (1, 1)
  1, 11, 10 -> (1, 2)
  2, 10, 10 -> (1, 1)
  2, 11, 10 -> (1, 1)
  2, 12, 10 -> (1, 2)
 */
export const getChunksRange = ({ startElement = 1, totalElements, elementsPerChunk }) => {
  const total = totalElements - startElement + 1;
  const lastChunk = Math.trunc(total / elementsPerChunk) + (total % elementsPerChunk ? 1 : 0);
  return { firstChunk: 1, lastChunk };
};

/*
  Signature: startElement, chunkPosition, totalElements, elementsPerChunk -> result
  1, 1, 100, 10 -> (1, 10)
  1, 2, 100, 10 -> (11, 20)
  10, 1, 100, 10 -> (10, 19)
  10, 2, 100, 10 -> (20, 29)
  10, 2, 20, 10 -> (20, 20)
 */
export const getChunkElementsRange = ({
  startElement = 1,
  chunkPosition,
  totalElements,
  elementsPerChunk,
}) => {
  const firstElement = startElement + (chunkPosition - 1) * elementsPerChunk;
  const lastElement = Math.min(firstElement - 1 + elementsPerChunk, totalElements);
  return { firstElement, lastElement };
};

'''
'''--- src/store/campaigns/helpers/getKeysFromMnemonic.js ---
import GenerateKeysWorker from './generateKeys.worker';

export const getKeysFromMnemonic = (params) => {
  const worker = new GenerateKeysWorker();
  worker.postMessage(params);

  return new Promise((resolve) => {
    worker.onmessage = (event) => {
      resolve(event.data);
      worker.terminate();
    };
  });
};

'''
'''--- src/store/campaigns/helpers/getPagination.js ---
// TODO remove and replace with getChunksRange
export const getPagesRange = (total, elementsPerPage) => ({
  firstPage: 1,
  lastPage: Math.trunc(total / elementsPerPage) + (total % elementsPerPage ? 1 : 0),
});

// TODO remove and replace with getChunkElementsRange
export const getPagination = ({ page, total, elementsPerPage = 50 }) => {
  const startIndex = 1;
  const { firstPage, lastPage } = getPagesRange(total, elementsPerPage);

  if (page < firstPage || page > lastPage) {
    throw new Error(`Page should be in range (${firstPage},${lastPage}), got ${page}`);
  }

  const start = startIndex + (page - 1) * elementsPerPage;
  const end = Math.min(start - 1 + elementsPerPage, total);

  return {
    page,
    total,
    elementsPerPage,
    range: { start, end },
  };
};

'''
'''--- src/store/campaigns/helpers/sendTokens.js ---
import { transfer } from 'near-api-js/lib/transaction';

export const sendTokens = ({ wallet, receiverId, amount, callbackUrl }) =>
  wallet.account().signAndSendTransaction({
    receiverId,
    actions: [transfer(amount)],
    walletCallbackUrl: callbackUrl,
  });

'''
'''--- src/store/campaigns/index.js ---
import { initState } from './initState';
import { actions } from './actions';
import { thunks } from './thunks';

export const campaigns = {
  ...initState,
  ...actions,
  ...thunks,
};

'''
'''--- src/store/campaigns/initState.js ---
export const initState = {
  list: [],
  map: {},
  campaign: {},
  createCampaign: {},
};

'''
'''--- src/store/campaigns/thunks/index.js ---
import { onStartCampaignCreation } from './onStartCampaignCreation';
import { onFinishCampaignCreation } from './onFinishCampaignCreation';
import { onMountCampaign } from './onMountCampaign';
import { onRefundLink } from './onRefundLink';
import { onExportCampaignCSV } from './onExportCampaignCSV';
import { onMountCampaigns } from './onMountCampaigns';
import { onLoadKeys } from './onLoadKeys';
import { onDeleteCampaign } from './onDeleteCampaign';
import { onMountDeleteCampaign } from './onMountDeleteCampaign';
import { onMountCreateCampaign } from './onMountCreateCampaign';
import { onResumeCampaignCreation } from './onResumeCampaignCreation';
import { onResumeCampaignDeletion } from './onResumeCampaignDeletion';

export const thunks = {
  onStartCampaignCreation,
  onFinishCampaignCreation,
  onMountCampaign,
  onRefundLink,
  onExportCampaignCSV,
  onMountCampaigns,
  onLoadKeys,
  onDeleteCampaign,
  onMountDeleteCampaign,
  onMountCreateCampaign,
  onResumeCampaignCreation,
  onResumeCampaignDeletion,
};

'''
'''--- src/store/campaigns/thunks/onDeleteCampaign.js ---
import { thunk } from 'easy-peasy';
import BN from 'bn.js';
import { getCampaignContract } from '../../helpers/getContracts';
import { getKeysFromMnemonic } from '../helpers/getKeysFromMnemonic';
import { getPagesRange, getPagination } from '../helpers/getPagination';
import { nearConfig } from '../../../config/nearConfig';

const createDeleteKeysIterator = ({
  firstPage,
  lastPage,
  total,
  elementsPerPage,
  mnemonic,
  campaign,
  internalCampaignId,
}) => ({
  async *[Symbol.asyncIterator]() {
    for (let page = firstPage; page <= lastPage; page += 1) {
      const { range } = getPagination({ page, total, elementsPerPage });

      const keys = await getKeysFromMnemonic({
        mnemonic,
        start: range.start,
        end: range.end,
        internalCampaignId,
      });

      await campaign.clear_state({
        args: { keys: keys.map(({ pk }) => pk) },
        gas: new BN('300000000000000'),
      });

      yield page;
    }
  },
});

export const onDeleteCampaign = thunk(async (_, payload, { getStoreState, getStoreActions }) => {
  const { campaignId, onFinishDeleting, setProgress } = payload;

  const state = getStoreState();
  const keyStore = state.general.entities.keyStore;
  const walletUserId = state.general.user.wallet.accountId;
  const mnemonic = state.general.user.linkdrop.mnemonic;
  const total = state.campaigns.map[campaignId].keysStats.total;
  const internalCampaignId = state.campaigns.map[campaignId].internalCampaignId;

  const actions = getStoreActions();
  const deleteCampaign = actions.campaigns.deleteCampaign;
  const setError = actions.general.setError;

  const campaign = getCampaignContract(state, campaignId);
  const elementsPerPage = 30;
  const { firstPage, lastPage } = getPagesRange(total, elementsPerPage);

  const iterator = createDeleteKeysIterator({
    firstPage,
    lastPage,
    total,
    elementsPerPage,
    mnemonic,
    campaign,
    internalCampaignId,
  });

  try {
    for await (const chunk of iterator) {
      setProgress(Math.trunc(Math.min((chunk / lastPage) * 100, 99)));
    }

    await campaign.delete_campaign({
      args: { beneficiary_id: walletUserId },
      gas: new BN('50000000000000'),
    });

    await keyStore.removeKey(nearConfig.networkId, campaignId);
    deleteCampaign(campaignId);
    onFinishDeleting();
  } catch (e) {
    setError({ description: e.message });
  }
});

'''
'''--- src/store/campaigns/thunks/onExportCampaignCSV.js ---
import dateFormat from 'dateformat';
import { thunk } from 'easy-peasy';
import { CsvBuilder } from 'filefy';
import { getKeysFromMnemonic } from '../helpers/getKeysFromMnemonic';
import { nearConfig } from '../../../config/nearConfig';

export const onExportCampaignCSV = thunk(async (_, payload, { getStoreState, getStoreActions }) => {
  const { campaignId, fromCampaignPage } = payload;

  const state = getStoreState();
  const mnemonic = state.general.user.linkdrop.mnemonic;
  const campaign = fromCampaignPage ? state.campaigns.campaign : state.campaigns.map[campaignId];
  const total = campaign.keysStats.total;
  const name = campaign.name;
  const internalCampaignId = campaign.internalCampaignId;

  const actions = getStoreActions();
  const enableLoading = actions.general.enableLoading;
  const disableLoading = actions.general.disableLoading;

  enableLoading();

  const start = 1;
  const end = total;

  const keys = await getKeysFromMnemonic({ mnemonic, start, end, internalCampaignId });

  const date = dateFormat(Date.now(), 'd_mmm_yyyy-HH_MM_ss');
  const fileName = `${name}[${start}-${end}][${date}.csv`;
  const csvBuilder = new CsvBuilder(fileName).setColumns(['order', 'public key', 'link']);

  keys.forEach(({ pk, sk, order }) => {
    csvBuilder.addRow([`#${order}`, pk, nearConfig.getCreateAccountAndClaimLink(sk, campaignId)]);
  });

  csvBuilder.exportFile();
  disableLoading();
});

'''
'''--- src/store/campaigns/thunks/onFinishCampaignCreation.js ---
import { parseSeedPhrase } from 'near-seed-phrase';
import BN from 'bn.js';
import { KeyPair } from 'near-api-js';
import { thunk } from 'easy-peasy';
import { modals } from '../../../config/modals';
import { nearConfig } from '../../../config/nearConfig';
import { getUserContract, getCampaignContract } from '../../helpers/getContracts';
import { getRoute } from '../../../config/routes';
import { getKeysFromMnemonic } from '../helpers/getKeysFromMnemonic';
import { getPagesRange, getPagination } from '../helpers/getPagination';

const createAddKeysIterator = ({
  totalKeys,
  elementsPerPage,
  mnemonic,
  campaign,
  internalCampaignId,
}) => ({
  async *[Symbol.asyncIterator]() {
    const { firstPage, lastPage } = getPagesRange(totalKeys, elementsPerPage);

    for (let page = firstPage; page <= lastPage; page += 1) {
      const { range } = getPagination({ page, total: totalKeys, elementsPerPage });

      const keys = await getKeysFromMnemonic({
        mnemonic,
        start: range.start,
        end: range.end,
        internalCampaignId,
      });

      await campaign.add_keys({
        args: { keys: keys.map(({ pk }) => pk) },
        gas: new BN('300000000000000'),
      });
      // return percentage between 0% and 99%
      yield Math.trunc(Math.min((page / lastPage) * 100, 99));
    }
  },
});

export const onFinishCampaignCreation = thunk(
  async (_, payload, { getStoreState, getStoreActions }) => {
    const { history, data, setProgress } = payload;

    const state = getStoreState();
    const keyStore = state.general.entities.keyStore;
    const linkdropUserId = state.general.user.linkdrop.accountId;
    const mnemonic = state.general.user.linkdrop.mnemonic;

    const actions = getStoreActions();
    const hideModal = actions.general.hideModal;

    const { campaignId, campaignName, totalKeys, yoctoNearPerKey, campaignAmount } = data;
    const campaignAccessKey = parseSeedPhrase(mnemonic);
    const user = getUserContract(state, linkdropUserId);

    await user.create_near_campaign({
      args: {
        name: campaignName,
        public_key: campaignAccessKey.publicKey,
        total_keys: totalKeys,
        tokens_per_key: yoctoNearPerKey,
        account_creator: nearConfig.accounts.accountCreator,
      },
      amount: campaignAmount,
      gas: new BN('300000000000000'),
    });

    await keyStore.setKey(
      nearConfig.networkId,
      campaignId,
      KeyPair.fromString(campaignAccessKey.secretKey),
    );

    const campaign = getCampaignContract(state, campaignId);
    const metadata = await campaign.get_campaign_metadata();

    const iterator = createAddKeysIterator({
      totalKeys,
      elementsPerPage: 50,
      mnemonic,
      campaign,
      internalCampaignId: metadata.campaign_id,
    });

    for await (const percentage of iterator) {
      setProgress(percentage);
    }

    hideModal(modals.createCampaign);
    history.replace(getRoute.campaign(campaignId));
  },
);

'''
'''--- src/store/campaigns/thunks/onLoadKeys.js ---
import { thunk } from 'easy-peasy';
import { getKeysFromMnemonic } from '../helpers/getKeysFromMnemonic';
import { getPagination } from '../helpers/getPagination';
import { getCampaignContract } from '../../helpers/getContracts';

export const onLoadKeys = thunk(async (_, payload, { getStoreState, getStoreActions }) => {
  const { page, total, elementsPerPage, showLoader, hideLoader } = payload;

  const state = getStoreState();
  const mnemonic = state.general.user.linkdrop.mnemonic;
  const campaignId = state.campaigns.campaign.campaignId;
  const internalCampaignId = state.campaigns.campaign.internalCampaignId;

  const actions = getStoreActions();
  const loadKeys = actions.campaigns.loadKeys;

  showLoader();
  const campaign = getCampaignContract(state, campaignId);
  const pagination = getPagination({ page, total, elementsPerPage });

  const keys = await getKeysFromMnemonic({
    mnemonic,
    start: pagination.range.start,
    end: pagination.range.end,
    internalCampaignId,
  });
  const keyStats = await campaign.get_keys({ keys: keys.map(({ pk }) => pk) });

  loadKeys({ keys, keyStats, pagination });
  hideLoader();
});

'''
'''--- src/store/campaigns/thunks/onMountCampaign.js ---
import { thunk } from 'easy-peasy';
import { toCamelCase } from '../../helpers/toCamelCase';
import { getKeysFromMnemonic } from '../helpers/getKeysFromMnemonic';
import { getPagination } from '../helpers/getPagination';
import { getCampaignContract } from '../../helpers/getContracts';
import { pagination as paginationConfig } from '../../../ui/config/campaign';

export const onMountCampaign = thunk(async (_, campaignId, { getStoreState, getStoreActions }) => {
  const state = getStoreState();
  const mnemonic = state.general.user.linkdrop.mnemonic;

  const actions = getStoreActions();
  const mountCampaign = actions.campaigns.mountCampaign;

  const campaign = getCampaignContract(state, campaignId);

  const [balance, _metadata] = await Promise.all([
    campaign.account.getAccountBalance(),
    campaign.get_campaign_metadata(),
  ]);

  const metadata = toCamelCase(_metadata);

  // TODO redirect to campaigns if status is wrong or campaign is not user campaign

  const pagination = getPagination({
    page: paginationConfig.startPage,
    total: metadata.keysStats.total,
    elementsPerPage: paginationConfig.linksPerPage,
  });

  const keys = await getKeysFromMnemonic({
    mnemonic,
    start: pagination.range.start,
    end: pagination.range.end,
    internalCampaignId: metadata.campaignId,
  });

  const keyStats = await campaign.get_keys({ keys: keys.map(({ pk }) => pk) });

  mountCampaign({
    campaignId,
    metadata,
    balance,
    keys,
    keyStats,
    pagination,
  });
});

'''
'''--- src/store/campaigns/thunks/onMountCampaigns.js ---
import { thunk } from 'easy-peasy';
import { getUserContract, getCampaignContract } from '../../helpers/getContracts';
import { toCamelCase } from '../../helpers/toCamelCase';

// TODO We can have a case with multi devices - if user will create campaign on device A
// device B won't have a key in LS and wont be able to generate keys for this campaign

export const onMountCampaigns = thunk(async (_, __, { getStoreState, getStoreActions }) => {
  const state = getStoreState();
  const linkdropUserId = state.general.user.linkdrop.accountId;

  const actions = getStoreActions();
  const mountCampaigns = actions.campaigns.mountCampaigns;
  const setError = actions.general.setError;

  const user = getUserContract(state, linkdropUserId);

  try {
    const campaignIds = await user.get_campaigns();
    const campaigns = await Promise.all(
      campaignIds.map((campaignId) =>
        getCampaignContract(state, campaignId).get_campaign_metadata(),
      ),
    );
    mountCampaigns({ campaignIds, campaigns: toCamelCase(campaigns) });
  } catch (e) {
    setError({ description: e.message });
  }
});

'''
'''--- src/store/campaigns/thunks/onMountCreateCampaign.js ---
import { thunk } from 'easy-peasy';
import { getUserContract } from '../../helpers/getContracts';

export const onMountCreateCampaign = thunk(async (_, __, { getStoreState, getStoreActions }) => {
  const state = getStoreState();
  const wallet = state.general.entities.wallet;
  const linkdropUserId = state.general.user.linkdrop.accountId;

  const actions = getStoreActions();
  const mountCreateCampaign = actions.campaigns.mountCreateCampaign;
  const setError = actions.general.setError;

  const user = getUserContract(state, linkdropUserId);

  try {
    const [balance, campaignIds] = await Promise.all([
      wallet.account().getAccountBalance(),
      user.get_campaigns(),
    ]);

    mountCreateCampaign({ balance, campaignIds });
  } catch (e) {
    setError({ isError: true, description: e });
  }
});

'''
'''--- src/store/campaigns/thunks/onMountDeleteCampaign.js ---
import { thunk } from 'easy-peasy';
import { Account } from 'near-api-js';

export const onMountDeleteCampaign = thunk(
  async (_, payload, { getStoreState, getStoreActions }) => {
    const { campaignId, setOpen } = payload;

    const state = getStoreState();
    const near = state.general.entities.near;

    const actions = getStoreActions();
    const enableLoading = actions.general.enableLoading;
    const disableLoading = actions.general.disableLoading;
    const showModal = actions.general.showModal;

    enableLoading();
    setOpen(false);

    const account = new Account(near.connection, campaignId);
    const balance = await account.getAccountBalance();

    disableLoading();
    showModal({ name: 'deleteCampaign', params: { campaignId, balance } });
  },
);

'''
'''--- src/store/campaigns/thunks/onRefundLink.js ---
import BN from 'bn.js';
import { thunk } from 'easy-peasy';
import { toCamelCase } from '../../helpers/toCamelCase';
import { getCampaignContract } from '../../helpers/getContracts';

export const onRefundLink = thunk(async (_, payload, { getStoreState, getStoreActions }) => {
  const { pk, campaignId, setLoading, onClose } = payload;

  const state = getStoreState();
  const walletUserId = state.general.user.wallet.accountId;

  const actions = getStoreActions();
  const setError = actions.general.setError;
  const refundLink = actions.campaigns.refundLink;

  const campaign = getCampaignContract(state, campaignId);

  try {
    setLoading(true);

    await campaign.refund_keys({
      args: {
        keys: [pk],
        beneficiary_id: walletUserId,
      },
      gas: new BN('100000000000000'),
    });

    const [balance, metadata] = await Promise.all([
      campaign.account.getAccountBalance(),
      campaign.get_campaign_metadata(),
    ]);

    refundLink({ balance, metadata: toCamelCase(metadata), pk });
  } catch (e) {
    onClose();
    setError({ description: e.message });
  }
});

'''
'''--- src/store/campaigns/thunks/onResumeCampaignCreation.js ---
import BN from 'bn.js';
import { thunk } from 'easy-peasy';
import { modals } from '../../../config/modals';
import { getCampaignContract } from '../../helpers/getContracts';
import { getRoute } from '../../../config/routes';
import { getChunksRange, getChunkElementsRange } from '../helpers/getChunksRange';
import { getKeysFromMnemonic } from '../helpers/getKeysFromMnemonic';

const createAddKeysIterator = ({
  totalKeys,
  mnemonic,
  campaign,
  internalCampaignId,
  addedDuringCreation,
}) => ({
  async *[Symbol.asyncIterator]() {
    const elementsPerChunk = 50;
    const startElement = addedDuringCreation + 1;
    const totalElements = totalKeys;

    const { firstChunk, lastChunk } = getChunksRange({
      startElement,
      totalElements,
      elementsPerChunk,
    });

    for (let chunkPosition = firstChunk; chunkPosition <= lastChunk; chunkPosition += 1) {
      const { firstElement, lastElement } = getChunkElementsRange({
        startElement,
        chunkPosition,
        totalElements,
        elementsPerChunk,
      });

      const keys = await getKeysFromMnemonic({
        mnemonic,
        start: firstElement,
        end: lastElement,
        internalCampaignId,
      });

      await campaign.add_keys({
        args: { keys: keys.map(({ pk }) => pk) },
        gas: new BN('300000000000000'),
      });
      // return percentage between 0% and 99%
      yield Math.trunc(Math.min((chunkPosition / lastChunk) * 100, 99));
    }
  },
});

export const onResumeCampaignCreation = thunk(
  async (_, payload, { getStoreState, getStoreActions }) => {
    const { history, campaignId, total, internalCampaignId, addedDuringCreation, setProgress } =
      payload;

    const state = getStoreState();
    const mnemonic = state.general.user.linkdrop.mnemonic;
    const actions = getStoreActions();

    const campaign = getCampaignContract(state, campaignId);

    const iterator = createAddKeysIterator({
      totalKeys: total,
      mnemonic,
      campaign,
      internalCampaignId,
      addedDuringCreation,
    });

    for await (const percentage of iterator) {
      setProgress(percentage);
    }

    actions.general.hideModal(modals.resumeCampaignCreation);
    history.replace(getRoute.campaign(campaignId));
  },
);

'''
'''--- src/store/campaigns/thunks/onResumeCampaignDeletion.js ---
import BN from 'bn.js';
import { thunk } from 'easy-peasy';
import { modals } from '../../../config/modals';
import { nearConfig } from '../../../config/nearConfig';
import { getCampaignContract } from '../../helpers/getContracts';
import { getChunksRange, getChunkElementsRange } from '../helpers/getChunksRange';
import { getKeysFromMnemonic } from '../helpers/getKeysFromMnemonic';

// TODO create reusable function
const createDeleteKeysIterator = ({
  totalKeys,
  mnemonic,
  campaign,
  internalCampaignId,
  deletedDuringDeletion,
}) => ({
  async *[Symbol.asyncIterator]() {
    const elementsPerChunk = 30;
    const startElement = deletedDuringDeletion + 1;
    const totalElements = totalKeys;

    const { firstChunk, lastChunk } = getChunksRange({
      startElement,
      totalElements,
      elementsPerChunk,
    });

    for (let chunkPosition = firstChunk; chunkPosition <= lastChunk; chunkPosition += 1) {
      const { firstElement, lastElement } = getChunkElementsRange({
        startElement,
        chunkPosition,
        totalElements,
        elementsPerChunk,
      });

      const keys = await getKeysFromMnemonic({
        mnemonic,
        start: firstElement,
        end: lastElement,
        internalCampaignId,
      });

      await campaign.clear_state({
        args: { keys: keys.map(({ pk }) => pk) },
        gas: new BN('300000000000000'),
      });
      // return percentage between 0% and 99%
      yield Math.trunc(Math.min((chunkPosition / lastChunk) * 100, 99));
    }
  },
});

export const onResumeCampaignDeletion = thunk(
  async (_, payload, { getStoreState, getStoreActions }) => {
    const { campaignId, total, internalCampaignId, deletedDuringDeletion, setProgress } = payload;

    const state = getStoreState();
    const keyStore = state.general.entities.keyStore;
    const walletUserId = state.general.user.wallet.accountId;
    const mnemonic = state.general.user.linkdrop.mnemonic;

    const actions = getStoreActions();
    const deleteCampaign = actions.campaigns.deleteCampaign;
    const setError = actions.general.setError;

    const campaign = getCampaignContract(state, campaignId);

    const iterator = createDeleteKeysIterator({
      totalKeys: total,
      mnemonic,
      campaign,
      internalCampaignId,
      deletedDuringDeletion,
    });

    try {
      for await (const percentage of iterator) {
        setProgress(percentage);
      }

      await campaign.delete_campaign({
        args: { beneficiary_id: walletUserId },
        gas: new BN('50000000000000'),
      });

      await keyStore.removeKey(nearConfig.networkId, campaignId);
      deleteCampaign(campaignId);
      actions.general.hideModal(modals.resumeCampaignDeletion);
    } catch (e) {
      setError({ description: e.message });
    }
  },
);

'''
'''--- src/store/campaigns/thunks/onStartCampaignCreation.js ---
import { thunk } from 'easy-peasy';
import { parseNearAmount } from 'near-api-js/lib/utils/format';
import { redirectActions } from '../../../config/redirectActions';
import { getRoute } from '../../../config/routes';
import { sendTokens } from '../helpers/sendTokens';

const getCampaignAmount = (totalKeys, amountPerLink) => {
  // contract storage
  // key storage
  // tokens in key
  // gas fee for calling claim or create account
  const res = 2.7 + totalKeys * (Number(amountPerLink) + 0.01); // TODO change coefficients
  return parseNearAmount(res.toString());
};

export const onStartCampaignCreation = thunk(
  async (_, payload, { getStoreState, getStoreActions }) => {
    const { name: campaignName, icon, totalLinks, amountPerLink } = payload;

    const state = getStoreState();
    const wallet = state.general.entities.wallet;
    const linkdropUserId = state.general.user.linkdrop.accountId;

    const actions = getStoreActions();
    const setTemporaryData = actions.general.setTemporaryData;

    // TODO Rename form fields totalLinks -> totalKeys
    const totalKeys = Number(totalLinks);
    const yoctoNearPerKey = parseNearAmount(amountPerLink);

    // TODO Remove this and use data from payload;
    const campaignAmount = getCampaignAmount(totalKeys, amountPerLink);
    const redirectAction = redirectActions.createNearCampaign;

    setTemporaryData({
      redirectAction,
      campaignId: `${campaignName}.${linkdropUserId}`,
      campaignName,
      icon,
      yoctoNearPerKey,
      totalKeys,
      campaignAmount,
    });

    /*
    We send tokens to user instead of calling 'user.create_near_campaign' because
    'create_near_campaign' method is private
   */
    sendTokens({
      wallet,
      receiverId: linkdropUserId,
      amount: campaignAmount,
      callbackUrl: getRoute.callbackUrl({ redirectAction }),
    });
  },
);

'''
'''--- src/store/general/actions/clearTemporaryData.js ---
import { action } from 'easy-peasy';

export const clearTemporaryData = action((state) => {
  state.temporary = {};
});

'''
'''--- src/store/general/actions/disableLoading.js ---
import { action } from 'easy-peasy';

export const disableLoading = action((state) => {
  state.isLoading = false;
});

'''
'''--- src/store/general/actions/enableLoading.js ---
import { action } from 'easy-peasy';

export const enableLoading = action((state) => {
  state.isLoading = true;
});

'''
'''--- src/store/general/actions/hideModal.js ---
import { action } from 'easy-peasy';

export const hideModal = action((slice, payload) => {
  slice.modals[payload] = null;
});

'''
'''--- src/store/general/actions/index.js ---
import { setNearPack } from './setNearPack';
import { enableLoading } from './enableLoading';
import { disableLoading } from './disableLoading';
import { setError } from './setError';
import { removeError } from './removeError';
import { showModal } from './showModal';
import { hideModal } from './hideModal';
import { setTemporaryData } from './setTemporaryData';
import { clearTemporaryData } from './clearTemporaryData';
import { showMenu } from './showMenu';

export const actions = {
  setNearPack,
  enableLoading,
  disableLoading,
  setError,
  removeError,
  showModal,
  hideModal,
  setTemporaryData,
  clearTemporaryData,
  showMenu,
};

'''
'''--- src/store/general/actions/removeError.js ---
import { action } from 'easy-peasy';

export const removeError = action((state) => {
  state.error.isError = false;
  state.error.description = '';
});

'''
'''--- src/store/general/actions/setError.js ---
import { action } from 'easy-peasy';

export const setError = action((state, payload) => {
  state.error.isError = true;
  state.error.description = payload.description;
});

'''
'''--- src/store/general/actions/setNearPack.js ---
import { action } from 'easy-peasy';

export const setNearPack = action((state, payload) => {
  const { near, keyStore, wallet } = payload;

  state.entities.near = near;
  state.entities.keyStore = keyStore;
  state.entities.wallet = wallet;
});

'''
'''--- src/store/general/actions/setTemporaryData.js ---
import { action } from 'easy-peasy';

export const setTemporaryData = action((state, payload) => {
  state.temporary = payload;
});

'''
'''--- src/store/general/actions/showMenu.js ---
import { action } from 'easy-peasy';

export const showMenu = action((state, payload) => {
  state.isMenuVisible = payload;
});

'''
'''--- src/store/general/actions/showModal.js ---
import { action } from 'easy-peasy';

export const showModal = action((slice, payload) => {
  const { name, params } = payload;
  slice.modals[name] = params;
});

'''
'''--- src/store/general/helpers/getDataBeforeRenderPage.js ---
import { matchPath } from 'react-router';
import { routes } from '../../../config/routes';

const { campaign, createCampaign, campaigns, settings } = routes;

/*
  withLoading - we want to disable progress-loading bar when we init app - we already show to user
  full screen spinner
 */

export const getDataBeforeRenderPage = async ({ actions, history, withLoading }) => {
  const enableLoading = actions.general.enableLoading;
  const disableLoading = actions.general.disableLoading;
  const onMountCampaign = actions.campaigns.onMountCampaign;
  const onMountCampaigns = actions.campaigns.onMountCampaigns;
  const onMountCreateCampaign = actions.campaigns.onMountCreateCampaign;
  const onMountSettings = actions.settings.onMountSettings;

  const match = matchPath(history.location.pathname, {
    path: [campaigns, campaign, createCampaign, settings],
    exact: true,
  });

  if (!match) return;

  withLoading && enableLoading();
  const { path, params } = match;
  const ifRouteIs = (route) => route === path;

  ifRouteIs(campaigns) && (await onMountCampaigns());
  ifRouteIs(campaign) && (await onMountCampaign(params.campaignId));
  ifRouteIs(createCampaign) && (await onMountCreateCampaign());
  ifRouteIs(settings) && (await onMountSettings());

  withLoading && disableLoading();
};

'''
'''--- src/store/general/helpers/getNearPack.js ---
import { connect, keyStores, WalletConnection } from 'near-api-js';
import { nearConfig } from '../../../config/nearConfig';

const { networkId, nodeUrl, walletUrl } = nearConfig;

export const getNearPack = async () => {
  // TODO Consider using InMemoryStorage instead
  const keyStore = new keyStores.BrowserLocalStorageKeyStore();

  const near = await connect({
    networkId,
    nodeUrl,
    walletUrl,
    keyStore,
  });

  const wallet = new WalletConnection(near, 'linkdrop');

  return {
    near,
    wallet,
    keyStore,
  };
};

'''
'''--- src/store/general/helpers/isAccountExist.js ---
export const isAccountExist = async (state, accountId) => {
  if (!accountId) return false;
  try {
    await state.general.entities.near.connection.provider.query({
      request_type: 'view_account',
      finality: 'final',
      account_id: accountId,
    });
    return true;
  } catch (e) {
    return false;
  }
};

'''
'''--- src/store/general/index.js ---
import { persist } from 'easy-peasy';
import { initState } from './initState';
import { actions } from './actions';
import { thunks } from './thunks';
import { user } from './user';

export const general = persist(
  {
    ...initState,
    ...actions,
    ...thunks,
    user,
  },
  {
    storage: 'localStorage',
    allow: ['user', 'temporary'],
  },
);

'''
'''--- src/store/general/initState.js ---
export const initState = {
  isLoading: false,
  error: {
    isError: false,
    description: '',
  },
  modals: {
    createCampaign: null,
    deleteCampaign: null,
    resumeCampaignCreation: null,
    resumeCampaignDeletion: null,
  },
  entities: {
    near: null,
    keyStore: null,
    wallet: null,
  },
  temporary: {},
  isMenuVisible: false,
};

'''
'''--- src/store/general/thunks/index.js ---
import { onInitApp } from './onInitApp/onInitApp';
import { onRouteChange } from './onRouteChange';
import { onConnectWallet } from './onConnectWallet';
import { onDisconnect } from './onDisconnect';

export const thunks = {
  onInitApp,
  onConnectWallet,
  onRouteChange,
  onDisconnect,
};

'''
'''--- src/store/general/thunks/onConnectWallet.js ---
import { thunk } from 'easy-peasy';
import { getRoute } from '../../../config/routes';
import { redirectActions } from '../../../config/redirectActions';

export const onConnectWallet = thunk(async (_, __, { getStoreState, getStoreActions }) => {
  const store = getStoreState();
  const wallet = store.general.entities.wallet;
  const actions = getStoreActions();
  const redirectAction = redirectActions.connectWallet;

  actions.general.setTemporaryData({ redirectAction });
  // redirect to NEAR Wallet
  wallet.requestSignIn({
    successUrl: getRoute.callbackUrl({ redirectAction }),
    failureUrl: getRoute.callbackUrl({ redirectAction, errorCode: 'userReject' }),
  });
});

'''
'''--- src/store/general/thunks/onDisconnect.js ---
import { thunk } from 'easy-peasy';
import { routes } from '../../../config/routes';
import { getNearPack } from '../helpers/getNearPack';

export const onDisconnect = thunk(async (_, history, { getStoreActions }) => {
  const actions = getStoreActions();
  const resetState = actions.resetState;
  const setNearPack = actions.general.setNearPack;

  localStorage.clear();
  resetState();
  history.replace(routes.connectWallet);
  setNearPack(await getNearPack());
});

'''
'''--- src/store/general/thunks/onInitApp/checkUserAccounts.js ---
import { isAccountExist } from '../../helpers/isAccountExist';

// We want to avoid situations when connected accounts were deleted but
// UI doesn't know about this.

export const checkUserAccounts = async (state, actions, history) => {
  const wallet = state.general.user.wallet;
  const linkdrop = state.general.user.linkdrop;

  const [isWalletAccount, isLinkdropAccount] = await Promise.all([
    isAccountExist(state, wallet.accountId),
    isAccountExist(state, linkdrop.accountId),
  ]);

  if ((wallet.isConnected && !isWalletAccount) || (linkdrop.isExist && !isLinkdropAccount)) {
    actions.general.onDisconnect(history);
  }
};

'''
'''--- src/store/general/thunks/onInitApp/isRedirect.js ---
import qs from 'query-string';
import { matchPath } from 'react-router';
import { routes } from '../../../../config/routes';

export const isRedirect = (state, history) => {
  const { redirectAction } = qs.parse(history.location.search);

  const match = matchPath(history.location.pathname, {
    path: routes.redirectFromWallet,
    exact: true,
  });

  return (
    typeof redirectAction === 'string' &&
    match &&
    state.general.temporary.redirectAction === redirectAction
  );
};

'''
'''--- src/store/general/thunks/onInitApp/manageNavigation.js ---
/* eslint consistent-return: 0 */
import { matchPath } from 'react-router';
import { routes } from '../../../../config/routes';

const {
  root,
  connectWallet,
  createAccount,
  restoreAccess,
  campaigns,
  settings,
  createCampaign,
  campaign,
} = routes;

/*
  There is can't be a case when linkdrop.isExist === false && linkdrop.isConnected === true
  because 'checkUserAccounts' will disconnect user in this case.
 */

const mainPagesHandler = ({ replace, wallet, linkdrop }) => {
  if (!wallet.isConnected) return replace(connectWallet);
  if (!linkdrop.isExist) return replace(createAccount);
  if (!linkdrop.isConnected) return replace(restoreAccess);
};

const rootHandler = ({ replace, wallet, linkdrop }) => {
  if (!wallet.isConnected) return replace(connectWallet);
  if (!linkdrop.isExist) return replace(createAccount);
  if (!linkdrop.isConnected) return replace(restoreAccess);
  replace(campaigns);
};

const connectWalletHandler = ({ replace, wallet, linkdrop }) => {
  if (wallet.isConnected && !linkdrop.isExist) return replace(createAccount);
  if (wallet.isConnected && !linkdrop.isConnected) return replace(restoreAccess);
  if (wallet.isConnected && linkdrop.isExist && linkdrop.isConnected) return replace(campaigns);
};

const createAccountHandler = ({ replace, wallet, linkdrop }) => {
  if (!wallet.isConnected) return replace(connectWallet);
  if (linkdrop.isExist && !linkdrop.isConnected) return replace(restoreAccess);
  if (linkdrop.isExist && linkdrop.isConnected) return replace(campaigns);
};

const restoreAccessHandler = ({ replace, wallet, linkdrop }) => {
  if (!wallet.isConnected) return replace(connectWallet);
  if (!linkdrop.isExist) return replace(createAccount);
  if (linkdrop.isConnected) return replace(campaigns);
};
// TODO Handle redirect on non-user campaign and creating / deleting campaign
const handlers = {
  [root]: rootHandler,
  [connectWallet]: connectWalletHandler,
  [createAccount]: createAccountHandler,
  [restoreAccess]: restoreAccessHandler,
  [campaigns]: mainPagesHandler,
  [settings]: mainPagesHandler,
  [createCampaign]: mainPagesHandler,
  [campaign]: mainPagesHandler,
};

export const manageNavigation = async (state, history) => {
  const wallet = state.general.user.wallet;
  const linkdrop = state.general.user.linkdrop;

  const match = matchPath(history.location.pathname, {
    path: [
      root,
      connectWallet,
      createAccount,
      restoreAccess,
      campaigns,
      settings,
      createCampaign,
      campaign,
    ],
    exact: true,
  });

  if (match) await handlers[match.path]({ replace: history.replace, wallet, linkdrop });
};

'''
'''--- src/store/general/thunks/onInitApp/onInitApp.js ---
import { thunk } from 'easy-peasy';
import { getDataBeforeRenderPage } from '../../helpers/getDataBeforeRenderPage';
import { getNearPack } from '../../helpers/getNearPack';
import { checkUserAccounts } from './checkUserAccounts';
import { isRedirect } from './isRedirect';
import { manageNavigation } from './manageNavigation';
import { processRedirectFromWallet } from './processRedirectFromWallet/processRedirectFromWallet';

export const onInitApp = thunk(async (_, payload, { getStoreState, getStoreActions }) => {
  const { history, setInit } = payload;

  const actions = getStoreActions();
  const setNearPack = actions.general.setNearPack;

  // Create near and wallet instances and set it into the state
  setNearPack(await getNearPack());
  // Check accounts existence
  await checkUserAccounts(getStoreState(), actions, history);

  const state = getStoreState();
  // All redirect from NEAR Wallet leads to /redirect-from-wallet route. If it is the case,
  // handle it and redirect the user to the appropriate page. If not - check if a user has access
  // to the page and redirect to the proper page
  if (isRedirect(state, history)) {
    await processRedirectFromWallet(state, actions, history);
  } else {
    await manageNavigation(state, history);
  }
  // Call onMount thunk for the page - we want to load data before the page will be mounted -
  // it allows us to avoid "screen blinking" or display the empty page to the user.
  await getDataBeforeRenderPage({ actions, history, withLoading: false });
  // Finish initialization and hide loader
  setInit(true);
});

'''
'''--- src/store/general/thunks/onInitApp/processRedirectFromWallet/connectWallet.js ---
import { nearConfig } from '../../../../../config/nearConfig';
import { getAccountName } from '../../../../helpers/getAccountName';
import { isAccountExist } from '../../../helpers/isAccountExist';
import { routes } from '../../../../../config/routes';

const onSuccess = async (state, actions, history, query) => {
  const walletAccountId = query.account_id;
  // TODO rework and search account by public key
  const linkdropUserAccountId = `${getAccountName(walletAccountId)}.${
    nearConfig.accounts.linkdrop
  }`;
  const isLinkdropUser = await isAccountExist(state, linkdropUserAccountId);
  const destination = isLinkdropUser ? routes.restoreAccess : routes.createAccount;

  actions.general.user.setUserData({
    wallet: {
      accountId: walletAccountId,
      isConnected: true,
    },
    linkdrop: {
      accountId: linkdropUserAccountId,
      isExist: isLinkdropUser,
    },
  });

  history.replace(destination);
};

const onError = (actions, history) => {
  actions.general.setError({
    isError: true,
    description: 'You have not connected your wallet',
  });
  // TODO add check if user has already connected accounts (for the future feature - multi-accounts)
  history.replace(routes.connectWallet);
};

export const connectWallet = async ({ state, actions, history, query }) => {
  actions.general.clearTemporaryData();
  if (query.account_id) await onSuccess(state, actions, history, query);
  if (query.errorCode) onError(actions, history);
};

'''
'''--- src/store/general/thunks/onInitApp/processRedirectFromWallet/createAccount.js ---
import { KeyPair } from 'near-api-js';
import { parseSeedPhrase } from 'near-seed-phrase';
import { routes } from '../../../../../config/routes';
import { nearConfig } from '../../../../../config/nearConfig';

const onSuccess = async (state, actions, history, temporary) => {
  const { mnemonic } = temporary;
  const keyStore = state.general.entities.keyStore;
  const linkdropAccountId = state.general.user.linkdrop.accountId;
  const { secretKey, publicKey } = parseSeedPhrase(mnemonic);

  await keyStore.setKey(nearConfig.networkId, linkdropAccountId, KeyPair.fromString(secretKey));

  actions.general.user.setUserData({
    linkdrop: {
      isExist: true,
      isConnected: true,
      mnemonic,
      secretKey,
      publicKey,
    },
  });
  history.replace(routes.campaigns);
};

const onError = (actions, history) => {
  actions.general.setError({
    description: 'Linkdrop account was not created',
  });
  history.replace(routes.createAccount);
};

export const createAccount = async ({ state, actions, history, query }) => {
  const temporary = state.general.temporary;
  actions.general.clearTemporaryData();
  if (query.transactionHashes) await onSuccess(state, actions, history, temporary);
  if (query.errorCode) onError(actions, history);
};

'''
'''--- src/store/general/thunks/onInitApp/processRedirectFromWallet/createNearCampaign.js ---
import { modals } from '../../../../../config/modals';
import { routes } from '../../../../../config/routes';

const onSuccess = (state, actions, history) => {
  actions.general.showModal({ name: modals.createCampaign, params: state.general.temporary });
  actions.general.clearTemporaryData();
  history.replace(routes.createCampaign);
};

const onError = (actions, history) => {
  actions.general.setError({
    isError: true,
    description: 'Campaign account was not created',
  });
  actions.general.clearTemporaryData();
  history.replace(routes.createCampaign);
};

export const createNearCampaign = async ({ state, actions, history, query }) => {
  if (query.transactionHashes) onSuccess(state, actions, history);
  if (query.errorCode) onError(actions, history);
};

'''
'''--- src/store/general/thunks/onInitApp/processRedirectFromWallet/processRedirectFromWallet.js ---
import qs from 'query-string';
import { connectWallet } from './connectWallet';
import { createAccount } from './createAccount';
import { createNearCampaign } from './createNearCampaign';
import { redirectActions } from '../../../../../config/redirectActions';

export const processRedirectFromWallet = async (state, actions, history) => {
  const query = qs.parse(history.location.search);
  const { redirectAction } = query;

  if (redirectAction === redirectActions.connectWallet)
    await connectWallet({ state, actions, history, query });

  if (redirectAction === redirectActions.createAccount)
    await createAccount({ state, actions, history, query });

  if (redirectAction === redirectActions.createNearCampaign)
    await createNearCampaign({ state, actions, history, query });
};

'''
'''--- src/store/general/thunks/onRouteChange.js ---
import { thunk } from 'easy-peasy';
import { getDataBeforeRenderPage } from '../helpers/getDataBeforeRenderPage';

export const onRouteChange = thunk(async (_, history, { getStoreActions }) => {
  const actions = getStoreActions();

  await getDataBeforeRenderPage({
    actions,
    history,
    withLoading: true,
  });
});

'''
'''--- src/store/general/user/actions/index.js ---
import { setUserData } from './setUserData';

export const actions = {
  setUserData,
};

'''
'''--- src/store/general/user/actions/setUserData.js ---
import { action } from 'easy-peasy';

export const setUserData = action((slice, payload) => {
  slice.wallet = { ...slice.wallet, ...payload.wallet };
  slice.linkdrop = { ...slice.linkdrop, ...payload.linkdrop };
});

'''
'''--- src/store/general/user/helpers/getAccountIdsByPublicKey.js ---
import ky from 'ky';
import { nearConfig } from '../../../../config/nearConfig';

// We will use it in the future for restoring access to account
export const getAccountIdsByPublicKey = (key) =>
  ky.get(`${nearConfig.helperUrl}/publicKey/${key}/accounts`, { timeout: 30000 }).json();

'''
'''--- src/store/general/user/index.js ---
import { initState } from './initState';
import { actions } from './actions';
import { thunks } from './thunks';

export const user = {
  ...initState,
  ...actions,
  ...thunks,
};

'''
'''--- src/store/general/user/initState.js ---
/*
  We don't have wallet.isExist because there is no difference between wallet.isConnected
  and wallet.isExist - in difference to linkdrop user account, we don't have a separate
  'Restore Access' page which is only available when
  linkdrop.isExist == true && linkdrop.isConnected == false
 */

export const initState = {
  wallet: {
    accountId: null,
    isConnected: false,
  },
  linkdrop: {
    accountId: null,
    isExist: false,
    isConnected: false,
    mnemonic: null,
    secretKey: null,
    publicKey: null,
  },
};

'''
'''--- src/store/general/user/thunks/index.js ---
import { onRestoreAccess } from './onRestoreAccess';
import { onDeleteUser } from './onDeleteUser';
import { onCreateUser } from './onCreateUser';

export const thunks = {
  onRestoreAccess,
  onDeleteUser,
  onCreateUser,
};

'''
'''--- src/store/general/user/thunks/onCreateUser.js ---
import { thunk } from 'easy-peasy';
import BN from 'bn.js';
import { parseNearAmount } from 'near-api-js/lib/utils/format';
import { parseSeedPhrase } from 'near-seed-phrase';
import { getRoute } from '../../../../config/routes';
import { getAccountName } from '../../../helpers/getAccountName';
import { redirectActions } from '../../../../config/redirectActions';
import { getLinkdropContract } from '../../../helpers/getContracts';

export const onCreateUser = thunk(async (_, payload, { getStoreState, getStoreActions }) => {
  const { mnemonic } = payload;

  const state = getStoreState();
  const walletAccountId = state.general.user.wallet.accountId;
  const actions = getStoreActions();

  const linkdrop = getLinkdropContract(state);
  const accessKey = parseSeedPhrase(mnemonic);
  const redirectAction = redirectActions.createAccount;

  actions.general.setTemporaryData({ redirectAction, mnemonic });

  // call this func will redirect the user to the wallet
  linkdrop.create_user_account({
    args: {
      name: getAccountName(walletAccountId),
      public_key: accessKey.publicKey,
    },
    amount: parseNearAmount('5'),
    gas: new BN('150000000000000'), // 150 Tgas
    callbackUrl: getRoute.callbackUrl({ redirectAction }),
  });
});

'''
'''--- src/store/general/user/thunks/onDeleteUser.js ---
import { thunk } from 'easy-peasy';
import { Account } from 'near-api-js/lib/account';

export const onDeleteUser = thunk(async (_, payload, { getStoreState, getStoreActions }) => {
  const { history, setLoading } = payload;

  const state = getStoreState();
  const near = state.general.entities.near;
  const walletUserId = state.general.user.wallet.accountId;
  const linkdropUserId = state.general.user.linkdrop.accountId;

  const actions = getStoreActions();

  setLoading(true);
  await new Account(near.connection, linkdropUserId).deleteAccount(walletUserId);
  actions.general.onDisconnect(history);
});

'''
'''--- src/store/general/user/thunks/onRestoreAccess.js ---
import { thunk } from 'easy-peasy';
import { parseSeedPhrase } from 'near-seed-phrase';
import { KeyPair } from 'near-api-js';
import { getUserContract } from '../../../helpers/getContracts';
import { routes } from '../../../../config/routes';
import { nearConfig } from '../../../../config/nearConfig';

export const onRestoreAccess = thunk(async (_, payload, { getStoreState, getStoreActions }) => {
  const { setError, history } = payload;
  const { mnemonic } = payload.values;

  const state = getStoreState();
  const near = state.general.entities.near;
  const keyStore = state.general.entities.keyStore;
  const linkdropUserAccountId = state.general.user.linkdrop.accountId;

  const actions = getStoreActions();

  const { publicKey, secretKey } = parseSeedPhrase(mnemonic);
  const account = await near.account(linkdropUserAccountId);
  const keys = await account.getAccessKeys();

  const isMatch = keys.some((key) => key.public_key === publicKey);

  if (isMatch) {
    const user = getUserContract(state, linkdropUserAccountId);

    const keyPair = KeyPair.fromString(secretKey);
    await keyStore.setKey(nearConfig.networkId, linkdropUserAccountId, keyPair);

    const campaignsIds = await user.get_campaigns();
    await Promise.all(
      campaignsIds.map((campaignAccountId) =>
        keyStore.setKey(nearConfig.networkId, campaignAccountId, keyPair),
      ),
    );

    actions.general.user.setUserData({
      linkdrop: {
        isConnected: true,
        mnemonic,
        secretKey,
        publicKey,
      },
    });

    history.replace(routes.campaigns);
  } else {
    setError('mnemonic', {
      type: 'blockchain',
      message: `Mnemonic phrase doesn't fit to your account`,
    });
  }
});

'''
'''--- src/store/helpers/getAccountName.js ---
/*
  eclipseeer2.testnet -> eclipseeer2
  abc.eclipseeer2.near -> abc-eclipseeer2
  testnet.alice.example.eclipseeer2.testnet -> testnet-alice-example-eclipseeer2
  long-account-id -> long-account-id
 */
export const getAccountName = (account) => {
  const arr = account.split('.');
  const last = arr[arr.length - 1];

  if (last === 'testnet' || last === 'near') {
    arr.pop();
  }
  return arr.join('-');
};

'''
'''--- src/store/helpers/getContracts.js ---
import { Account, Contract } from 'near-api-js';
import { nearConfig } from '../../config/nearConfig';

export const getCampaignContract = (state, campaignId) =>
  new Contract(new Account(state.general.entities.near.connection, campaignId), campaignId, {
    viewMethods: ['get_keys', 'get_campaign_metadata'],
    changeMethods: ['add_keys', 'refund_keys', 'clear_state', 'delete_campaign'],
  });

export const getUserContract = (state, userId) =>
  new Contract(new Account(state.general.entities.near.connection, userId), userId, {
    viewMethods: ['get_campaigns', 'get_user_metadata'],
    changeMethods: ['create_near_campaign'],
  });

export const getLinkdropContract = (state) =>
  new Contract(state.general.entities.wallet.account(), nearConfig.accounts.linkdrop, {
    viewMethods: [],
    changeMethods: ['create_user_account'],
  });

'''
'''--- src/store/helpers/toCamelCase.js ---
import camelCase from 'camelcase';

export const toCamelCase = (value) => {
  if (Array.isArray(value)) return value.map((x) => toCamelCase(x));

  if (typeof value === 'object') {
    return Object.entries(value).reduce((acc, [key, val]) => {
      acc[camelCase(key)] = toCamelCase(val);
      return acc;
    }, {});
  }

  return value;
};

'''
'''--- src/store/index.js ---
import { createStore } from 'easy-peasy';
import { actions } from './actions';
import { general } from './general';
import { campaigns } from './campaigns';
import { settings } from './settings';

export const store = createStore(
  {
    ...actions,
    general,
    campaigns,
    settings,
  },
  {
    name: 'LinkDrop',
  },
);

'''
'''--- src/store/settings/actions/index.js ---
import { setHasCampaigns } from './setHasCampaigns';

export const actions = {
  setHasCampaigns,
};

'''
'''--- src/store/settings/actions/setHasCampaigns.js ---
import { action } from 'easy-peasy';

export const setHasCampaigns = action((slice, campaignIds) => {
  slice.hasCampaigns = campaignIds.length > 0;
});

'''
'''--- src/store/settings/index.js ---
import { initState } from './initState';
import { actions } from './actions';
import { thunks } from './thunks';

export const settings = {
  ...initState,
  ...actions,
  ...thunks,
};

'''
'''--- src/store/settings/initState.js ---
export const initState = {
  hasCampaigns: false,
};

'''
'''--- src/store/settings/thunks/index.js ---
import { onMountSettings } from './onMountSettings';

export const thunks = {
  onMountSettings,
};

'''
'''--- src/store/settings/thunks/onMountSettings.js ---
import { thunk } from 'easy-peasy';
import { getUserContract } from '../../helpers/getContracts';

export const onMountSettings = thunk(async (_, __, { getStoreState, getStoreActions }) => {
  const state = getStoreState();
  const linkdropUserId = state.general.user.linkdrop.accountId;
  const actions = getStoreActions();
  const user = getUserContract(state, linkdropUserId);

  try {
    const campaignIds = await user.get_campaigns();
    actions.settings.setHasCampaigns(campaignIds);
  } catch (e) {
    actions.general.setError({ description: e.message });
  }
});

'''
'''--- src/ui/components/Caution/Caution.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = (theme) => ({
  container: {
    width: '100vw',
    minHeight: 40,
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: theme.palette.primary.light,
    color: '#ffffff',
    fontSize: 12,
  },
  icon: {
    fontSize: 20,
    marginRight: 4,
  },
  caution: {
    fontWeight: 700,
    letterSpacing: 0.5,
    marginRight: 4,
  },
  bold: {
    fontWeight: 700,
  },
});

export const useStyles = makeStyles(styles, { name: 'Caution' });

'''
'''--- src/ui/components/ConnectWallet/ConnectWallet.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = {
  container: {
    height: 'calc(100vh - 40px - 73px - 52px)', // caution + topbar + footer
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
  },
  content: {
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center',
    marginLeft: 24,
    marginRight: 24,
  },
  emoji: {
    fontSize: 80,
  },
  header: {
    fontSize: 34,
    fontWeight: 700,
    letterSpacing: 0.25,
    marginTop: 8,
    textAlign: 'center',
  },
  title: {
    marginTop: 16,
    letterSpacing: 0.5,
    textAlign: 'center',
  },
  button: {
    marginTop: 24,
    padding: '16px 35px',
    fontWeight: 500,
  },
};

export const useStyles = makeStyles(styles, { name: 'ConnectWallet' });

'''
'''--- src/ui/components/CreateAccount/CreateAccount.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = {
  container: {
    minHeight: 'calc(100vh - 40px - 73px - 52px)', // caution + topbar + footer
    display: 'flex',
    flexDirection: 'column',
    flexWrap: 'wrap',
    alignItems: 'center',
    justifyContent: 'center',
  },
  content: {
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center',
    marginTop: '7vh',
    marginRight: 24,
    marginLeft: 24,
    flexWrap: 'wrap',
  },
};

export const useStyles = makeStyles(styles, { name: 'CreateAccount' });

'''
'''--- src/ui/components/CreateAccount/SetupPhrase/SetupPhrase.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = (theme) => ({
  header: {
    fontSize: 34,
    fontWeight: 700,
    letterSpacing: 0.25,
    marginTop: 8,
    marginBottom: theme.spacing(2),
  },
  description: {
    fontSize: 16,
    fontStyle: 'normal',
    fontWeight: 400,
    lineHeight: '22px',
    letterSpacing: '0px',
    textAlign: 'center',
    marginBottom: theme.spacing(2),
    '&>span': {
      fontWeight: 700,
      color: theme.colors.grey500,
    },
  },
  strong: {
    color: '#212121',
  },
  paper: {
    padding: theme.spacing(1),
    textAlign: 'center',
    color: 'rgba(0, 0, 0, 87)',
    whiteSpace: 'nowrap',
    margin: theme.spacing(0.5),
    '&>span': {
      color: theme.colors.dashboardGrey,
    },
  },
  button: {
    borderRadius: theme.spacing(1),
    height: 48,
    fontWeight: 500,
    width: 170,
    marginTop: theme.spacing(2),
    marginLeft: 10,
  },
  [theme.breakpoints.down('lg')]: {
    responsiveDirection: {
      display: 'flex',
      marginTop: theme.spacing(2),
      marginBottom: theme.spacing(2),
      '& button': {
        marginRight: theme.spacing(0),
      },
      '& button:nth-child(1)': {
        marginRight: theme.spacing(1),
      },
    },
  },
  [theme.breakpoints.down('md')]: {
    responsiveDirection: {
      display: 'flex',
      flexWrap: 'nowrap',
      flexDirection: 'row',
      alignItems: 'center',
      justifyContent: 'center',
      marginTop: theme.spacing(2),
      marginBottom: theme.spacing(2),
      '& button': {
        marginRight: theme.spacing(0),
      },
      '& button:nth-child(1)': {
        marginRight: theme.spacing(1),
      },
    },
  },
  [theme.breakpoints.down('xs')]: {
    responsiveDirection: {
      display: 'flex',
      width: '100%',
      flexDirection: 'column-reverse',
      marginBottom: theme.spacing(2),
      '& button': {
        width: '100%',
        marginRight: 0,
        marginLeft: 0,
        marginTop: theme.spacing(2),
      },
      '& button:nth-child(1)': {
        marginLeft: 0,
        marginRight: 0,
      },
    },
  },
});

export const useStyles = makeStyles(styles, { name: 'SetupPhrase' });

'''
'''--- src/ui/components/CreateAccount/ValidatePhrase/ValidatePhrase.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = (theme) => ({
  header: {
    fontSize: 34,
    fontWeight: 700,
    letterSpacing: 0.25,
    marginTop: 8,
    marginBottom: theme.spacing(2),
  },
  subHeader: {
    width: '63%',
    fontSize: 16,
    fontStyle: 'normal',
    fontWeight: 400,
    lineHeight: '22px',
    letterSpacing: '0px',
    textAlign: 'center',
    marginBottom: theme.spacing(2),
  },
  form: {
    width: '63%',
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center',
    marginTop: 16,
  },
  buttons: {
    width: '100%',
    marginTop: 24,
    display: 'flex',
    justifyContent: 'space-between',
  },
  button: {
    borderRadius: theme.spacing(1),
    height: 48,
    fontWeight: 500,
    minWidth: 150,
    marginTop: theme.spacing(2),
  },
  '@media (max-width: 690px)': {
    buttons: {
      flexWrap: 'wrap',
      flexDirection: 'column-reverse',
      justifyContent: 'start',
    },
    button: {
      width: '100%',
    },
  },
});

export const useStyles = makeStyles(styles, { name: 'ValidatePhrase' });

'''
'''--- src/ui/components/CreateAccount/ValidatePhrase/validations.js ---
import { object, string } from 'yup';
import { yupResolver } from '@hookform/resolvers/yup';

const errors = {
  wordIsRequired: 'This is a required field',
  wordNotMatch: 'Entered word does not match with phrase word',
};

const schema = object().shape({
  word: string()
    .required(errors.wordIsRequired)
    .test({
      test: (value, { options }) => {
        const { wordList, randomWordIndex } = options.context;
        return wordList[randomWordIndex - 1] === value;
      },
      message: errors.wordNotMatch,
    }),
});

export const validations = yupResolver(schema);

'''
'''--- src/ui/components/Error/Error.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = {
  modal: {
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
  },
  container: {
    width: 300,
    display: 'flex',
    flexDirection: 'column',
    outline: 'none',
    borderRadius: 8,
    padding: 16,
  },
  header: {
    color: 'rgba(0, 0, 0, 0.87)',
    fontWeight: 900,
  },
  footer: {
    display: 'flex',
    justifyContent: 'flex-end',
    alignItems: 'center',
  },
};

export const useStyles = makeStyles(styles, { name: 'Error' });

'''
'''--- src/ui/components/Footer/Footer.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = (theme) => ({
  container: {
    width: '100%',
    height: '52px',
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
    color: theme.colors.grey450,
  },
  text: {
    fontSize: 12,
    fontWeight: 400,
  },
});

export const useStyles = makeStyles(styles, { name: 'Footer' });

'''
'''--- src/ui/components/Footer/SocialMedia/SocialMedia.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = {
  container: {
    display: 'flex',
    alignItems: 'center',
    marginLeft: 8,
    cursor: 'pointer',
  },
  name: {
    fontSize: 12,
    marginLeft: 3,
  }
};

export const useStyles = makeStyles(styles, { name: 'SocialMedia' });

'''
'''--- src/ui/components/Main/Campaign/AdditionalData/AdditionalData.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = (theme) => ({
  container: {
    width: '100%',
    display: 'flex',
    flexDirection: 'column',
    marginTop: 24,
    '@media (min-width: 1024px)': {
      width: 'auto',
      flexDirection: 'row',
    },
  },
  section: {
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'space-between',
    '@media (min-width: 1024px)': {
      minWidth: 120,
      flexDirection: 'column',
    },
  },
  label: {
    fontSize: 12,
    fontWeight: 500,
    letterSpacing: 0.4,
    color: theme.palette.text.secondary,
  },
  value: {
    fontWeight: 600,
  },
  divider: {
    height: 1,
    width: '100%',
    margin: '12px 0',
    '@media (min-width: 1024px)': {
      height: '100%',
      width: 1,
      margin: '0 12px',
    },
  },
  statusValue: {
    fontWeight: 600,
    color: theme.palette.primary.main,
    textTransform: 'capitalize',
  },
});

export const useStyles = makeStyles(styles, { name: 'AdditionalData' });

'''
'''--- src/ui/components/Main/Campaign/Campaign.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = (theme) => ({
  container: {
    height: '100%',
    display: 'grid',
    gridTemplateColumns: '100%',
    gridTemplateRows: '16px max-content auto',
    gridTemplateAreas: `
      '.'
      'a'
      'b'
    `,
  },
  topbar: {
    gridArea: 'a',
    minHeight: 72,
    display: 'flex',
    alignItems: 'center',
    borderBottom: '1px solid #00000020',
  },
  closeIcon: {
    height: 36,
    width: 36,
    color: theme.palette.text.primary,
    margin: '0 8px',
  },
  campaignName: {
    width: '90%',
    wordBreak: 'break-all',
    overflowWrap: 'anywhere',
  },
  body: {
    gridArea: 'b',
    width: '100%',
    justifySelf: 'center',
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center',
    '@media (min-width: 1024px)': {
      minWidth: 680,
      maxWidth: 900,
    },
  },
});

export const useStyles = makeStyles(styles, { name: 'Campaign' });

'''
'''--- src/ui/components/Main/Campaign/Info/Info.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = (theme) => ({
  container: {
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center',
  },
  emojiContainer: {
    height: 120,
    width: 120,
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
    borderRadius: 8,
    border: '1px solid',
    borderColor: theme.colors.dividerOnWhite,
    marginTop: 40,
  },
  emoji: {
    fontSize: 72,
  },
  name: {
    textTransform: 'uppercase',
    letterSpacing: 2,
    fontSize: 12,
    fontWeight: 500,
    marginTop: 16,
    wordBreak: 'break-all',
    overflowWrap: 'anywhere',
    textAlign: 'center',
  },
  balance: {
    fontSize: 24,
    fontWeight: 700,
    marginTop: 8,
  },
  links: {
    width: 275,
    height: 40,
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: theme.palette.primary.main,
    borderRadius: 8,
    color: '#ffffff',
    marginTop: 16,
  },
  linksSubtitle: {
    fontSize: 12,
    color: theme.palette.text.secondary,
    marginTop: 4,
  },
});

export const useStyles = makeStyles(styles, { name: 'Info' });

'''
'''--- src/ui/components/Main/Campaign/Links/KeysStatistic/KeysStatistic.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = (theme) => ({
  container: {
    width: '100%',
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center',
    marginTop: 50,
  },
  title: {
    fontSize: 20,
    fontWeight: 500,
    letterSpacing: 0.4,
    color: theme.palette.text.primary,
    margin: 0,
  },
  wrapper: {
    width: '100%',
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center',
    marginTop: 8,
    borderRadius: 8,
    '@media (min-width: 1024px)': {
      height: 60,
      flexDirection: 'row',
      justifyContent: 'space-evenly',
      backgroundColor: '#3d5afe',
    },
  },
  section: {
    height: 35,
    width: '100%',
    display: 'flex',
    justifyContent: 'space-between',
    alignItems: 'center',
    '@media (min-width: 1024px)': {
      height: 'auto',
      width: 'auto',
      flexDirection: 'column',
    },
  },
  label: {
    fontSize: 12,
    letterSpacing: 0.4,
    color: theme.palette.text.secondary,
    fontWeight: 500,
    '@media (min-width: 1024px)': {
      color: '#ffffffbf',
    },
  },
  value: {
    fontWeight: 600,
    marginTop: 2,
    '@media (min-width: 1024px)': {
      color: 'white',
    },
  },
});

export const useStyles = makeStyles(styles, { name: 'KeysStatistic' });

'''
'''--- src/ui/components/Main/Campaign/Links/Link/Link.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = (theme) => ({
  container: {
    height: 50,
    display: 'grid',
    gridTemplateColumns: '60px auto 100px 24px 6px 24px 6px 24px',
    gridTemplateRows: '100%',
    gridTemplateAreas: `
      'b c d g . e . f'
    `,
    alignItems: 'center',
    color: (isActive) => (isActive ? theme.palette.text.primary : theme.palette.text.disabled),
    '@media (min-width: 1024px)': {
      gridTemplateColumns: '60px auto 130px 24px 6px 24px 6px 24px',
    },
  },
  order: {
    gridArea: 'b',
  },
  publicKey: {
    gridArea: 'c',
    width: '90%',
    overflow: 'hidden',
    whiteSpace: 'pre-wrap',
    textOverflow: 'ellipsis',
    fontSize: 14,
  },
  copyButton: {
    gridArea: 'e',
  },
  copyButtonIcon: {
    '&:hover': {
      color: theme.palette.primary.main,
    },
  },
});

export const useStyles = makeStyles(styles, { name: 'Link' });

'''
'''--- src/ui/components/Main/Campaign/Links/Link/Qr/Qr.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = (theme) => ({
  button: {
    gridArea: 'g',
  },
  icon: {
    height: 20,
    width: 20,
    fill: 'rgba(0, 0, 0, 0.54)',
    flexShrink: 0,
    '&:hover': {
      fill: theme.palette.primary.main,
    },
  },
  container: {
    width: 250,
    display: 'flex',
    flexDirection: 'column',
    outline: 'none',
    borderRadius: 8,
    padding: '24px 24px 16px 24px',
  },
  header: {
    fontSize: 20,
    color: 'rgba(0, 0, 0, 0.87)',
    margin: 0,
    textAlign: 'center',
  },
  description: {
    color: 'rgba(0, 0, 0, 0.6)',
    fontSize: 14,
    textAlign: 'center',
  },
  qrWrapper: {
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
  },
  footer: {
    display: 'flex',
    justifyContent: 'flex-end',
    alignItems: 'center',
    marginTop: 20,
  },
  close: {
    color: 'rgba(0, 0, 0, 0.6)',
    letterSpacing: 1.25,
    padding: 0,
    fontSize: 12,
    fontWeight: 700,
  },
});

export const useStyles = makeStyles(styles, { name: 'Qr' });

'''
'''--- src/ui/components/Main/Campaign/Links/Link/RefundLink/RefundLink.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = (theme) => ({
  button: {
    gridArea: 'f',
    height: 24,
  },
  icon: {
    '&:hover': {
      color: theme.colors.red,
    },
  },
  modal: {
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
  },
  container: {
    width: 350,
    display: 'flex',
    flexDirection: 'column',
    outline: 'none',
    borderRadius: 8,
    padding: 16,
  },
  header: {
    fontWeight: 700,
    textAlign: 'center',
  },
  amount: {
    fontWeight: 700,
  },
  footer: {
    display: 'flex',
    justifyContent: 'flex-end',
    alignItems: 'center',
    marginTop: 20,
  },
  refundContainer: {
    width: 110,
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
  },
  bold: {
    fontWeight: 700,
  },
});

export const useStyles = makeStyles(styles, { name: 'CancelLink' });

'''
'''--- src/ui/components/Main/Campaign/Links/Link/Status/Status.styles.js ---
import { makeStyles } from '@material-ui/core';
import { keyStatus } from '../../../../../../../config/keyStatus';

const { active, created, claimed, refunded } = keyStatus;

// prettier-ignore
const getBackgroundColor = ({ status }) => {
  switch (status) {
    case active: return '#7e90ff';
    case created: return '#4caf50';
    case claimed: return '#ffb300';
    case refunded: return '#9e9e9e';
    default: return 'black';
  }
}

const styles = {
  container: {
    gridArea: 'd',
    justifySelf: 'center',
    width: 90,
    height: 20,
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
    color: 'white',
    fontSize: 10,
    textTransform: 'uppercase',
    letterSpacing: 1,
    fontWeight: 600,
    backgroundColor: getBackgroundColor,
    borderRadius: 8,
    '@media (min-width: 1024px)': {
      justifySelf: 'start',
    },
  },
};

export const useStyles = makeStyles(styles, { name: 'Status' });

'''
'''--- src/ui/components/Main/Campaign/Links/Links.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = {
  container: {
    width: '100%',
    display: 'flex',
    flexDirection: 'column',
    marginTop: 16,
  },
};

export const useStyles = makeStyles(styles, { name: 'Links' });

'''
'''--- src/ui/components/Main/Campaign/Links/Pagination/ArrowButton/ArrowButton.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = {
  container: {
    height: 48,
    width: 48,
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
  },
};

export const useStyles = makeStyles(styles, { name: 'ArrowButton' });

'''
'''--- src/ui/components/Main/Campaign/Links/Pagination/Pagination.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = {
  container: {
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
    margin: '15px 0 40px',
  },
  pageInfo: {
    width: 200,
    display: 'flex',
    justifyContent: 'center',
  },
};

export const useStyles = makeStyles(styles, { name: 'Pagination' });

'''
'''--- src/ui/components/Main/Campaign/Links/Topbar/Topbar.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = (theme) => ({
  topbar: {
    height: 60,
    display: 'grid',
    gridTemplateColumns: '100%',
    gridTemplateRows: '100%',
    gridTemplateAreas: `
      'a'
    `,
    alignItems: 'center',
    borderBottom: '1px solid',
    borderBottomColor: theme.colors.dividerOnWhite,
    borderTop: '1px solid',
    borderTopColor: theme.colors.dividerOnWhite,
  },
  downloadCSV: {
    gridArea: 'a',
    justifySelf: 'center',
    padding: '5px 20px',
    boxShadow: 'none',
    borderRadius: 8,
    '@media (min-width: 1024px)': {
      justifySelf: 'end',
    },
  },
  downloadCSVText: {
    textTransform: 'none',
    fontWeight: 500,
    fontSize: 16,
    marginLeft: 8,
    letterSpacing: '0.15px',
  },
});

export const useStyles = makeStyles(styles, { name: 'Topbar' });

'''
'''--- src/ui/components/Main/Campaigns/Campaigns.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = {
  container: {
    height: '100%',
    display: 'grid',
    gridTemplateColumns: 'auto',
    gridTemplateRows: '16px 72px auto',
    gridTemplateAreas: `
      '.'
      'a'
      'b'
    `,
  },
  topbar: {
    gridArea: 'a',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'space-between',
    borderBottom: '1px solid #00000020',
  },
  link: {
    width: '100%',
  },
  createCampaignWrapper: {
    display: 'flex',
  },
  createCampaign: {
    padding: '12px 26px',
    borderRadius: 8,
    boxShadow: 'none',
    width: '100%',
    '@media (max-width: 600px)': {
      marginTop: 16,
    },
  },
  addIcon: {
    marginRight: 12,
  },
  noCampaigns: {
    gridArea: 'b',
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center',
    justifyContent: 'center',
  },
  '@media (max-width: 800px)': {
    container: {
      gridTemplateRows: '16px 72px 72px auto',
      gridTemplateAreas: `
      '.'
      'a'
      'c'
      'b'
    `,
    },
    createCampaignWrapper: {
      gridArea: 'c',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
    },
  },
};

export const useStyles = makeStyles(styles, { name: 'Campaigns' });

'''
'''--- src/ui/components/Main/Campaigns/DeleteCampaign/DeleteCampaign.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = {
  modal: {
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
  },
  container: {
    width: 400,
    minHeight: 450,
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center',
    outline: 'none',
    borderRadius: 8,
  },
};

export const useStyles = makeStyles(styles, { name: 'DeleteCampaign' });

'''
'''--- src/ui/components/Main/Campaigns/DeleteCampaign/Finish/Finish.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = (theme) => ({
  container: {
    width: '90%',
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center',
    color: 'rgba(0, 0, 0, 0.7)',
    textAlign: 'center',
    letterSpacing: '0.5px',
  },
  icon: {
    height: 75,
    width: 75,
    marginTop: 30,
    color: '#43a047',
  },
  header: {
    fontSize: 24,
  },
  text: {
    marginTop: 70,
  },
  button: {
    backgroundColor: theme.palette.primary.main,
    color: 'white',
    marginTop: 55,
    padding: '8px 26px',
    borderRadius: 8,
    minWidth: '60%',
    '&:hover': {
      backgroundColor: '#082dff',
    },
  },
});

export const useStyles = makeStyles(styles, { name: 'Finish' });

'''
'''--- src/ui/components/Main/Campaigns/DeleteCampaign/Progress/Progress.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = (theme) => ({
  container: {
    width: '90%',
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center',
    color: 'rgba(0, 0, 0, 0.7)',
    textAlign: 'center',
    letterSpacing: '0.5px',
  },
  icon: {
    height: 75,
    width: 75,
    marginTop: 30,
    color: theme.palette.primary.main,
  },
  header: {
    fontSize: 24,
  },
  progressContainer: {
    height: 100,
    width: 100,
    display: 'grid',
    gridTemplateColumns: '100%',
    gridTemplateRows: '100%',
    gridTemplateAreas: `'a'`,
    marginTop: 20,
  },
  spinner: {
    gridArea: 'a',
    justifySelf: 'center',
    alignSelf: 'center',
  },
  spinnerCircle: {
    strokeWidth: 1,
  },
  progressLabel: {
    gridArea: 'a',
    justifySelf: 'center',
    alignSelf: 'center',
    fontSize: 20,
    fontWeight: 700,
  },
  text: {
    marginTop: 50,
    '&>span': {
      fontWeight: 700,
    },
  },
});

export const useStyles = makeStyles(styles, { name: 'Progress' });

'''
'''--- src/ui/components/Main/Campaigns/DeleteCampaign/Start/Start.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = (theme) => ({
  container: {
    width: '90%',
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center',
    color: 'rgba(0, 0, 0, 0.7)',
    textAlign: 'center',
    letterSpacing: '0.5px',
  },
  icon: {
    height: 75,
    width: 75,
    marginTop: 30,
    color: theme.colors.red,
  },
  header: {
    fontSize: 24,
    '&>span': {
      color: theme.palette.primary.main,
    },
  },
  text: {
    letterSpacing: '0.25px',
    '&>span': {
      fontWeight: 700,
    },
  },
  deleteButton: {
    backgroundColor: theme.colors.red,
    margin: '25px 0 25px 0',
    padding: '8px 26px',
    borderRadius: 8,
    minWidth: '60%',
  },
});

export const useStyles = makeStyles(styles, { name: 'Start' });

'''
'''--- src/ui/components/Main/Campaigns/List/Campaign/Campaign.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = (theme) => ({
  container: {
    height: 160,
    width: 344,
    marginTop: 24,
    display: 'grid',
    gridTemplateColumns: '24px 52px 13px 104px 13px auto 12px 24px',
    gridTemplateRows: '22px 18px 28px 20px 18px 18px auto',
    gridTemplateAreas: `
      '. . . . . . . .'
      '. a b b b b x .'
      '. a c c c c . .'
      '. . . . . . . .'
      '. d f g i j . .'
      '. e f h i k . .'
      '. . . . . . . .'
    `,
    borderRadius: 8,
    cursor: ({ isUncompleted }) => (isUncompleted ? 'inherit' : 'pointer'),
    boxShadow: `
     0px 2px 1px -1px rgb(0 0 0 / 20%),
     0px 2px 5px 0px rgb(0 0 0 / 15%),
     0px 1px 10px 0px rgb(0 0 0 / 12%)
    `,
    '&:hover': {
      boxShadow: ({ isUncompleted }) =>
        isUncompleted
          ? `
        0px 2px 1px -1px rgb(0 0 0 / 20%),
        0px 2px 5px 0px rgb(0 0 0 / 15%),
        0px 1px 10px 0px rgb(0 0 0 / 12%)
        `
          : `
        0px 5px 4px -1px rgb(0 0 0 / 20%),
        0px 6px 5px 0px rgb(0 0 0 / 14%),
        0px 1px 10px 0px rgb(0 0 0 / 12%)
        `,
    },
    '@media (min-width: 1065px)': {
      '&:nth-child(2n)': {
        marginLeft: 20,
      },
    },
    '@media (min-width: 1440px)': {
      '&:nth-child(2n)': {
        marginLeft: 0,
      },
      '&:nth-child(3n + 2)': {
        margin: '24px 24px 0 24px',
      },
    },
    '@media (max-width: 800px)': {
      width: '100%',
      '&:nth-child(2n)': {
        marginLeft: 20,
      },
    },
    '@media (max-width: 690px)': {
      width: '100%',
      '&:nth-child(2n)': {
        marginLeft: 0,
      },
    },
  },
  icon: {
    gridArea: 'a',
    fontSize: 30,
    alignSelf: 'center',
    marginLeft: '-4px',
  },
  name: {
    gridArea: 'b',
    textTransform: 'uppercase',
    letterSpacing: 2,
    fontSize: 12,
    fontWeight: 500,
    margin: '0 8px 0 0',
  },
  totalNear: {
    gridArea: 'c',
    fontSize: 24,
    fontWeight: 700,
  },
  label: {
    fontSize: 12,
    fontWeight: 500,
    letterSpacing: 0.4,
    color: theme.palette.text.secondary,
  },
  value: {
    fontWeight: 600,
  },
  links: {
    gridArea: 'd',
  },
  linksValue: {
    gridArea: 'e',
  },
  divider: {
    height: '100%',
    width: 1,
  },
  divider1: {
    gridArea: 'f',
  },
  created: {
    gridArea: 'g',
  },
  createdValue: {
    gridArea: 'h',
  },
  divider2: {
    gridArea: 'i',
  },
  status: {
    gridArea: 'j',
  },
  statusValue: {
    gridArea: 'k',
    color: theme.palette.primary.main,
  },
});

export const useStyles = makeStyles(styles, { name: 'Campaign' });

'''
'''--- src/ui/components/Main/Campaigns/List/Campaign/More/MenuItem/MenuItem.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = (theme) => ({
  container: {
    width: '100%',
    height: 56,
    display: 'flex',
    alignItems: 'center',
    border: 'none',
    cursor: 'pointer',
    padding: 0,
    '&:hover': {
      backgroundColor: '#e9e9e9',
    },
  },
  icon: {
    color: theme.palette.text.secondary,
    margin: '0 24px',
  },
  text: {
    fontWeight: 500,
    fontSize: 16,
    color: theme.palette.text.primary,
  },
});

export const useStyles = makeStyles(styles, { name: 'MenuItem' });

'''
'''--- src/ui/components/Main/Campaigns/List/Campaign/More/More.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = (theme) => ({
  button: {
    gridArea: 'x',
    padding: 0,
    '&:hover': {
      color: theme.palette.primary.main,
    },
  },
  popover: {
    borderRadius: 8,
    border: '1px solid #4b5aae1e',
  },
  container: {
    width: 250,
    userSelect: 'none',
  },
  exportCsv: {
    color: theme.palette.primary.main,
  },
  deleteCampaign: {
    color: theme.colors.red,
  },
});

export const useStyles = makeStyles(styles, { name: 'More' });

'''
'''--- src/ui/components/Main/Campaigns/List/Campaign/ResumeAction/ResumeAction.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = {
  container: {
    gridArea: '4 / 1 / 8 / 9',
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
  },
  button: {
    height: 36,
    width: '50%',
    borderRadius: 8,
    padding: '0',
    fontSize: 12,
  },
};

export const useStyles = makeStyles(styles, { name: 'ResumeAction' });

'''
'''--- src/ui/components/Main/Campaigns/List/List.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = {
  container: {
    gridArea: 'b',
    display: 'flex',
    justifySelf: 'center',
  },
  wrapper: {
    maxWidth: 350,
    width: '100%',
    display: 'flex',
    flexWrap: 'wrap',
    justifyContent: 'flex-start',
    alignContent: 'flex-start',
    '@media (min-width: 1065px)': {
      maxWidth: 713,
    },
    '@media (min-width: 1440px)': {
      maxWidth: 1088,
    },
    '@media (max-width: 800px)': {
      flexWrap: 'nowrap',
      flex: '50%',
      maxWidth: 'none',
    },
    '@media (max-width: 690px)': {
      flex: '100%',
      flexWrap: 'wrap',
      justifyContent: 'center',
    },
  },
};

export const useStyles = makeStyles(styles, { name: 'List' });

'''
'''--- src/ui/components/Main/Campaigns/NoCampaigns/NoCampaigns.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = (theme) => ({
  container: {
    gridArea: 'b',
    alignSelf: 'center',
    justifySelf: 'center',
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center',
    marginBottom: '15%',
  },
  emoji: {
    fontSize: 80,
  },
  header: {
    fontSize: 34,
    fontWeight: 700,
    letterSpacing: 0.25,
    marginTop: 8,
  },
  title: {
    marginTop: 16,
    letterSpacing: 0.5,
    color: theme.colors.grey450,
  },
  button: {
    marginTop: 24,
    padding: '12px 26px',
    fontWeight: 500,
  },
  addIcon: {
    marginRight: 12,
  },
});

export const useStyles = makeStyles(styles, { name: 'NoCampaigns' });

'''
'''--- src/ui/components/Main/Campaigns/general/ResumeCampaignProcess/ResumeCampaignProcess.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = theme => ({
  modal: {
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
  },
  container: {
    width: 400,
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center',
    outline: 'none',
    borderRadius: 8,
  },
  wrapper: {
    width: '90%',
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center',
    color: 'rgba(0, 0, 0, 0.7)',
    textAlign: 'center',
    letterSpacing: '0.5px',
  },
  icon: {
    height: 75,
    width: 75,
    marginTop: 30,
    color: theme.palette.primary.main,
  },
  header: {
    fontSize: 24,
    '&>span': {
      fontWeight: 900,
    },
  },
  progressContainer: {
    height: 100,
    width: 100,
    display: 'grid',
    gridTemplateColumns: '100%',
    gridTemplateRows: '100%',
    gridTemplateAreas: `'a'`,
    marginTop: 20,
  },
  spinner: {
    gridArea: 'a',
    justifySelf: 'center',
    alignSelf: 'center',
  },
  spinnerCircle: {
    strokeWidth: 1,
  },
  progressLabel: {
    gridArea: 'a',
    justifySelf: 'center',
    alignSelf: 'center',
    fontSize: 20,
    fontWeight: 700,
  },
  text: {
    marginTop: 50,
    marginBottom: 25,
    '&>span': {
      fontWeight: 700,
    },
  },
});

export const useStyles = makeStyles(styles, { name: 'ResumeCampaignProcess' });

'''
'''--- src/ui/components/Main/CreateCampaign/CreateCampaign.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = (theme) => ({
  container: {
    height: '100%',
    display: 'grid',
    gridTemplateColumns: 'auto',
    gridTemplateRows: '16px 72px auto',
    gridTemplateAreas: `
      '.'
      'a'
      'b'
    `,
  },
  topbar: {
    gridArea: 'a',
    display: 'flex',
    alignItems: 'center',
    borderBottom: '1px solid #00000020',
  },
  closeIcon: {
    height: 36,
    width: 36,
    color: theme.palette.text.primary,
    margin: '0 8px',
  },
});

export const useStyles = makeStyles(styles, { name: 'CreateCampaign' });

'''
'''--- src/ui/components/Main/CreateCampaign/CreateCampaignModal/CreateCampaignModal.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = (theme) => ({
  modal: {
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
  },
  container: {
    width: 390,
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center',
    outline: 'none',
    borderRadius: 8,
  },
  wrapper: {
    width: '80%',
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center',
    color: 'rgba(0, 0, 0, 0.7)',
    textAlign: 'center',
    letterSpacing: '0.5px',
  },
  icon: {
    height: 120,
    width: 120,
    marginTop: 80,
  },
  header: {
    fontSize: 24,
    margin: 0,
    marginTop: 24,
    fontWeight: 500,
  },
  description: {
    margin: 0,
    marginTop: 8,
    color: theme.colors.grey450,
  },
  progressLabel: {
    fontSize: 18,
    fontWeight: 500,
    marginTop: 24,
    color: theme.palette.primary.main,
  },
  progress: {
    width: '100%',
    height: 5,
    marginTop: 8,
    marginBottom: 80,
    borderRadius: 4,
    backgroundColor: theme.colors.grey200,
  },
  progressBar: {
    borderRadius: 4,
  },
});

export const useStyles = makeStyles(styles, { name: 'CreateCampaignModal' });

'''
'''--- src/ui/components/Main/CreateCampaign/Form/Form.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = {
  stepper: {
    gridArea: 'b',
    width: '100%',
    justifySelf: 'center',
  },
};

export const useStyles = makeStyles(styles, { name: 'Form' });

'''
'''--- src/ui/components/Main/CreateCampaign/Form/Step1/AmountPerLink/AmountPerLink.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = {
  textField: {
    gridArea: 'b',
  },
  icon: {
    height: 20,
    width: 20,
  },
  adornmentText: {
    marginLeft: 8,
    fontWeight: 700,
    userSelect: 'none',
  },
  helperContainer: {
    display: 'flex',
    justifyContent: 'space-between',
    alignItems: 'center',
    margin: '3px 12px 24px 12px',
    color: 'rgba(0, 0, 0, 0.6)',
  },
  balance: {
    fontSize: 12,
    lineHeight: 1.6,
    color: 'rgba(0, 0, 0, 0.6)',
  },
};

export const useStyles = makeStyles(styles, { name: 'AmountPerLink' });

'''
'''--- src/ui/components/Main/CreateCampaign/Form/Step1/Info/Info.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = (theme) => ({
  container: {
    width: '100%',
    height: 56,
    display: 'grid',
    gridTemplateColumns: '50px auto 48%',
    gridTemplateRows: '50% 50%',
    gridTemplateAreas: `
      'a b d'
      'a c e'
    `,
    marginBottom: 72,
  },
  nearIcon: {
    gridArea: 'a',
    height: 20,
    width: 20,
    justifySelf: 'center',
    alignSelf: 'center',
  },
  walletId: {
    gridArea: 'b',
    alignSelf: 'end',
    color: theme.palette.text.secondary,
    fontSize: 12,
  },
  account: {
    gridArea: 'c',
    fontWeight: 500,
    color: theme.palette.text.primary,
    lineHeight: 1.5,
  },
  balance: {
    gridArea: 'd',
    alignSelf: 'end',
    color: theme.palette.text.secondary,
    fontSize: 12,
  },
  amount: {
    gridArea: 'e',
    fontWeight: 500,
    color: theme.palette.text.primary,
    lineHeight: 1.5,
  },
});

export const useStyles = makeStyles(styles, { name: 'Info' });

'''
'''--- src/ui/components/Main/CreateCampaign/Form/Step1/Step1.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = (theme) => ({
  container: {
    width: '100%',
    display: 'flex',
    flexDirection: ' column',
    alignItems: 'center',
  },
  body: {
    width: '100%',
    maxWidth: 680,
    display: 'flex',
    flexDirection: ' column',
    alignItems: 'center',
  },
  emojiContainer: {
    height: 120,
    width: 120,
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
    borderRadius: 8,
    border: '1px solid',
    borderColor: theme.colors.dividerOnWhite,
    marginTop: 40,
  },
  emoji: {
    fontSize: 72,
  },
  inputs: {
    width: '100%',
    display: 'grid',
    gridTemplateColumns: '48% 4% 48%',
    gridTemplateRows: '106px 80px',
    gridTemplateAreas: `
      'a a a'
      'b . c'
    `,
    marginTop: 36,
  },
  name: {
    gridArea: 'a',
  },
  totalLinks: {
    gridArea: 'c',
  },
  divider: {
    width: '100%',
    margin: '28px 0',
  },
  actions: {
    width: '100%',
    height: 72,
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
    borderTop: `1px solid ${theme.colors.dividerOnWhite}`,
  },
  next: {
    width: 208,
  },
  '@media (max-width: 600px)': {
    body: {
      width: '100%',
    },
    inputs: {
      width: '100%',
      display: 'grid',
      gridTemplateColumns: '100%',
      gridTemplateRows: 'minmax(90px, max-content) 90px 90px',
      gridTemplateAreas: `
        'a'
        'b'
        'c'
      `,
      marginTop: 36,
    },
    name: {
      marginBottom: 10,
    },
    next: {
      width: '100%',
    },
  },
});

export const useStyles = makeStyles(styles, { name: 'Step1' });

'''
'''--- src/ui/components/Main/CreateCampaign/Form/Step2/CampaignProfileCard/CampaignProfileCard.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = (theme) => ({
  container: {
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center',
  },
  emojiContainer: {
    height: 120,
    width: 120,
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
    borderRadius: 8,
    border: '1px solid',
    borderColor: theme.colors.dividerOnWhite,
    marginTop: 40,
  },
  emoji: {
    fontSize: 72,
  },
  name: {
    textTransform: 'uppercase',
    letterSpacing: 2,
    fontSize: 12,
    fontWeight: 500,
    marginTop: 16,
  },
  balance: {
    fontSize: 24,
    fontWeight: 700,
    marginTop: 8,
  },
  links: {
    width: 275,
    height: 40,
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: theme.palette.primary.main,
    borderRadius: 8,
    color: '#ffffff',
    marginTop: 16,
  },
  linksSubtitle: {
    fontSize: 12,
    color: theme.palette.text.secondary,
    marginTop: 4,
  },
});

export const useStyles = makeStyles(styles, { name: 'CampaignProfileCard' });

'''
'''--- src/ui/components/Main/CreateCampaign/Form/Step2/Info/Info.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = (theme) => ({
  info: {
    width: 320,
    display: 'flex',
    flexDirection: ' column',
    alignItems: 'center',
  },
  accountBlock: {
    width: '100%',
    height: 56,
    display: 'grid',
    gridTemplateColumns: '40px auto',
    gridTemplateRows: '50% 50%',
    gridTemplateAreas: `
      'a b'
      'a c'
    `,
    marginTop: 36,
  },
  nearIcon: {
    gridArea: 'a',
    height: 20,
    width: 20,
    alignSelf: 'center',
  },
  walletId: {
    gridArea: 'b',
    alignSelf: 'end',
    color: theme.palette.text.secondary,
    fontSize: 12,
  },
  account: {
    gridArea: 'c',
    fontWeight: 500,
    color: theme.palette.text.primary,
    lineHeight: 1.5,
  },
  balanceBlock: {
    display: 'flex',
    flexDirection: 'column',
    marginTop: 16,
    alignSelf: 'flex-start',
  },
  balance: {
    color: theme.palette.text.secondary,
    fontSize: 12,
  },
  amount: {
    fontWeight: 500,
    color: theme.palette.text.primary,
    lineHeight: 1.5,
  },
  totalValueContainer: {
    width: '100%',
    margin: '32px 0',
  },
  label: {
    width: '100%',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'space-between',
    marginTop: 10,
    '&:first-child': {
      marginTop: 0,
    },
  },
  labelDescription: {
    width: '65%',
    color: theme.palette.text.secondary,
    fontSize: 14,
  },
  labelValue: {
    fontSize: 14,
  },
  total: {
    fontWeight: 500,
  },
  '@media (max-width: 600px)': {
    info: {
      width: '100%',
    },
  },
});

export const useStyles = makeStyles(styles, { name: 'Info' });

'''
'''--- src/ui/components/Main/CreateCampaign/Form/Step2/Step2.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = (theme) => ({
  container: {
    width: '100%',
    display: 'flex',
    flexDirection: ' column',
    alignItems: 'center',
  },

  actions: {
    width: '100%',
    height: 72,
    display: 'grid',
    gridTemplateColumns: 'calc(50% - 104px) 208px calc(50% - 104px)',
    gridTemplateRows: '100%',
    gridTemplateAreas: `
      'a b .'
    `,
    alignItems: 'center',
    borderTop: `1px solid ${theme.colors.dividerOnWhite}`,
    marginTop: 72,
  },
  confirm: {},
  back: {
    gridArea: 'a',
    justifySelf: 'end',
    marginRight: 24,
    color: theme.palette.text.secondary,
    fontWeight: 500,
  },
  '@media (max-width: 600px)': {
    actions: {
      display: 'flex',
      flexDirection: 'column-reverse',
    },
    confirm: {
      flex: 1,
      width: '100%',
      marginBottom: 8,
      marginTop: 8,
    },
    back: {
      flex: 1,
    },
  },
});

export const useStyles = makeStyles(styles, { name: 'Step2' });

'''
'''--- src/ui/components/Main/CreateCampaign/Form/Step2/getCampaignData.js ---
export const getCampaignData = (getValues) => {
  const { icon, name, amountPerLink: amountPerKey, totalLinks: totalKeys } = getValues();

  const _amountPerKey = Number(amountPerKey);
  const _totalKeys = Number(totalKeys);
  const campaignStoragePrice = 2.7;
  const operationReservePerKey = 0.01;

  const totalPrice = campaignStoragePrice + _totalKeys * (_amountPerKey + operationReservePerKey);
  const totalInKeys = _amountPerKey * _totalKeys;
  const operationReserve = totalPrice - totalInKeys;

  return {
    icon,
    name,
    totalKeys: _totalKeys,
    amountPerKey: _amountPerKey,
    totalInKeys: totalInKeys.toFixed(2),
    operationReserve: operationReserve.toFixed(2),
    totalPrice: totalPrice.toFixed(2),
  };
};

'''
'''--- src/ui/components/Main/CreateCampaign/Form/Stepper/Step/Step.styles.js ---
import { makeStyles } from '@material-ui/core';

const isActiveStep =
  (yes, no) =>
  ({ isActive }) =>
    isActive ? yes : no;

const styles = (theme) => ({
  step: {
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center',
    width: 140,
  },
  iconContainer: {
    height: 48,
    width: 48,
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
    borderRadius: '50%',
    backgroundColor: isActiveStep('#e8ecff', 'transparent'),
  },
  icon: {
    height: 36,
    width: 36,
    color: ({ isActive, isCompleted }) =>
      isActive || isCompleted ? theme.palette.primary.main : '#717172',
  },
  label: {
    fontWeight: 500,
  },
  sublabel: {
    marginTop: 5,
    fontSize: 12,
    color: theme.colors.dashboardGrey,
    letterSpacing: 0.5,
  },
});

export const useStyles = makeStyles(styles, { name: 'Step' });

'''
'''--- src/ui/components/Main/CreateCampaign/Form/Stepper/Stepper.styles.js ---
import { makeStyles } from '@material-ui/core';

const isSecondStep =
  (yes, no) =>
  ({ activeStep }) =>
    activeStep === 2 ? yes : no;

const styles = (theme) => ({
  container: {
    width: '100%',
    display: 'flex',
    flexDirection: ' column',
    alignItems: 'center',
  },
  topbar: {
    width: '100%',
    maxWidth: 680,
    display: 'grid',
    gridTemplateColumns: '50% 50%',
    gridTemplateRows: '100%',
    gridTemplateAreas: `
      'a b'
    `,
    marginTop: 24,
  },
  step1: {
    gridArea: 'a',
    justifySelf: 'start',
  },
  connectorContainer: {
    gridArea: '1 / 1 / 2 / 3',
    justifySelf: 'center',
    height: 48,
    width: 'calc(100% - 2 * (140px - 36px))',
    display: 'flex',
    alignItems: 'center',
  },
  connector: {
    width: '100%',
    backgroundColor: isSecondStep(theme.palette.primary.main, theme.colors.dividerOnWhite),
  },
  step2: {
    gridArea: 'b',
    justifySelf: 'end',
  },
  '@media (max-width: 600px)': {
    topbar: {
      width: '100%',
    },
  },
});

export const useStyles = makeStyles(styles, { name: 'Stepper' });

'''
'''--- src/ui/components/Main/CreateCampaign/Form/validations.js ---
import { object, string } from 'yup';
import { yupResolver } from '@hookform/resolvers/yup';

const errors = {
  requiredName: 'Campaign name is required',
  invalidNameFormat: `Campaign name should start/finish with Latin letters or
  digits and contain only Latin letters, digits, - and _ separators`,
  nameMaxLength: (max) => `Campaign name should be equal or less than ${max} symbols`,
  amountPerLink: 'You should attach more than 0.01 NEAR',
  totalLinks: 'You should choose between 1 and 10 000 links',
  totalLinksInteger: 'This field should be an integer number',
  nonUniqueCampaignName: 'Campaign with this name already exists',
};

const regex = {
  accountId: /^([a-z\d]+[-_])*[a-z\d]+$/g,
  integerPositiveNumber: /^[0-9]+$/g,
  decimalPositiveNumber: /^\d+(\.\d+)?$/g,
};

const name = string()
  .required(errors.requiredName)
  .test({
    test: (value, context) => {
      // 64 is a max account id length including user account id and the separator
      // for example .user.linkdrop.testnet | .alice.linkdrop.near
      const max = 64 - 1 - context.options.context.linkdropAccountId.length;
      if (value.length <= max) return true;
      return context.createError({ path: 'name', message: errors.nameMaxLength(max) });
    },
  })
  .matches(regex.accountId, errors.invalidNameFormat)
  .test({
    test: (value, context) => !context.options.context.campaignNames.has(value),
    message: errors.nonUniqueCampaignName,
  });

const amountPerLink = string()
  .required(errors.amountPerLink)
  .matches(regex.decimalPositiveNumber, errors.amountPerLink)
  .test({
    test: (value) => Number(value) >= 0.01,
    message: errors.amountPerLink,
  });

const totalLinks = string()
  .required(errors.totalLinks)
  .matches(regex.integerPositiveNumber, errors.totalLinksInteger)
  .test({ test: (value) => Number(value) > 0, message: errors.totalLinks })
  .test({ test: (value) => Number(value) <= 10000, message: errors.totalLinks });

const schema = object().shape({
  name,
  amountPerLink,
  totalLinks,
});

export const validations = yupResolver(schema);

'''
'''--- src/ui/components/Main/Main.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = {
  container: {
    width: '100vw',
    minHeight: 'calc(100vh - 40px - 73px)', // height of topbar + caution
    display: 'grid',
    gridTemplateColumns: '256px auto',
    gridTemplateRows: 'auto 52px',
    gridTemplateAreas: `
      'a b'
      'a c'
    `,
    '@media (max-width: 800px)': {
      minHeight: 'calc(100vh - 40px - 65px)',
      gridTemplateAreas: `
        'b'
        'c'
      `,
      gridTemplateColumns: '100%',
    },
  },
  pages: {
    gridArea: 'b',
    display: 'flex',
    justifyContent: 'center',
  },
  pagesWrapper: {
    width: 'calc(100% - 24px - 24px)',
    '@media (min-width: 1024px)': {
      width: 'calc(100% - 48px - 48px)',
    },
    '@media (max-width: 600px)': {
      width: 'calc(100% - 16px - 16px)',
    },
  },
  footer: {
    gridArea: 'c',
  },
};

export const useStyles = makeStyles(styles, { name: 'Main' });

'''
'''--- src/ui/components/Main/Settings/DeleteUser/Confirmation/Confirmation.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = (theme) => ({
  modal: {
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
  },
  container: {
    width: 380,
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center',
    outline: 'none',
    borderRadius: 8,
  },
  emoji: {
    fontSize: 80,
    marginTop: 54,
  },
  header: {
    fontSize: 24,
    fontWeight: 500,
    margin: 0,
    marginTop: 24,
    color: theme.colors.grey500,
  },
  description: {
    textAlign: 'center',
    margin: 0,
    marginTop: 12,
    fontWeight: 400,
    color: theme.colors.grey450,
    lineHeight: '22px',
    '&>span': {
      fontWeight: 500,
      color: theme.colors.grey500,
    },
  },
  footer: {
    display: 'flex',
    justifyContent: 'flex-end',
    alignItems: 'center',
    marginTop: 20,
    marginBottom: 53,
  },
  button: {
    width: 156,
    height: 48,
    borderRadius: 8,
    margin: '0 9px',
  },
});

export const useStyles = makeStyles(styles, { name: 'Confirmation' });

'''
'''--- src/ui/components/Main/Settings/DeleteUser/DeleteUser.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = {
  container: {
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center',
  },
  emoji: {
    fontSize: 80,
  },
  header: {
    fontSize: 34,
    fontWeight: 700,
    letterSpacing: 0.25,
    marginTop: 20,
  },
  description: {
    fontSize: 16,
    fontStyle: 'normal',
    fontWeight: 400,
    lineHeight: '22px',
    letterSpacing: '0px',
    textAlign: 'center',
    marginTop: 8,
  },
  button: {
    marginTop: 20,
    padding: '12px 36px',
    borderRadius: 8,
    boxShadow: 'none',
  },
};

export const useStyles = makeStyles(styles, { name: 'DeleteUser' });

'''
'''--- src/ui/components/Main/Settings/Settings.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = {
  container: {
    height: '100%',
    display: 'grid',
    gridTemplateColumns: 'auto',
    gridTemplateRows: '16px 72px auto',
    gridTemplateAreas: `
      '.'
      'a'
      'b'
    `,
  },
  topbar: {
    gridArea: 'a',
    display: 'flex',
    alignItems: 'center',
    borderBottom: '1px solid #00000020',
  },
  content: {
    gridArea: 'b',
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center',
    justifyContent: 'center',
  },
};

export const useStyles = makeStyles(styles, { name: 'Settings' });

'''
'''--- src/ui/components/Main/Sidebar/Navigation/Item/Item.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = (theme) => ({
  container: {
    height: 40,
    display: 'flex',
    alignItems: 'center',
    margin: '18px 0',
    borderRadius: 8,
    color: ({ isActive }) => (isActive ? theme.palette.primary.main : theme.colors.dashboardGrey),
    backgroundColor: ({ isActive }) => (isActive ? '#ebeefd' : 'transparent'),
  },
  icon: {
    height: 24,
    width: 24,
    fill: ({ isActive }) => (isActive ? theme.palette.primary.main : theme.colors.dashboardGrey),
    marginLeft: 12,
  },
  name: {
    marginLeft: 24,
  },
});

export const useStyles = makeStyles(styles, { name: 'Item' });

'''
'''--- src/ui/components/Main/Sidebar/Navigation/Navigation.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = {
  container: {
    gridArea: 'c',
    color: 'white',
    width: 'calc(100% - 24px)',
    '@media (max-width: 800px)': {
      width: '100%',
    },
  },
};

export const useStyles = makeStyles(styles, { name: 'Navigation' });

'''
'''--- src/ui/components/Main/Sidebar/Navigation/getItems.js ---
import { TuneOutlined } from '@material-ui/icons';
import { Campaign } from '../../../general/icons/Campaign';
import { routes } from '../../../../../config/routes';

const items = [
  {
    name: 'Campaigns',
    to: routes.campaigns,
    activeFor: [routes.campaigns, routes.campaign, routes.createCampaign],
    icon: Campaign,
  },
  {
    name: 'Settings',
    to: routes.settings,
    activeFor: [routes.settings],
    icon: TuneOutlined,
  },
];

export const getItems = (match) =>
  items.map(({ name, to, icon, activeFor }) => ({
    name,
    icon,
    to,
    isActive: activeFor.includes(match.path),
  }));

'''
'''--- src/ui/components/Main/Sidebar/Sidebar.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = (theme) => ({
  container: {
    gridArea: 'a',
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center',
    borderRight: '1px solid',
    borderRightColor: theme.colors.dividerOnWhite,
  },
  menu: {
    width: 250,
    marginRight: 16,
    marginLeft: 16,
  },
});

export const useStyles = makeStyles(styles, { name: 'Sidebar' });

'''
'''--- src/ui/components/PageNotFound/PageNotFound.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = {
  container: {
    height: 'calc(100vh - 73px - 52px)', // height of topbar and footer
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
  },
};

export const useStyles = makeStyles(styles, { name: 'PageNotFound' });

'''
'''--- src/ui/components/RestoreAccess/Form/Form.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = {
  container: {
    width: '100%',
    minHeight: 200,
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center',
    marginTop: 24,
  },
  button: {
    minWidth: 200,
    marginTop: 24,
    padding: '16px 35px',
    fontWeight: 500,
  },
};

export const useStyles = makeStyles(styles, { name: 'Form' });

'''
'''--- src/ui/components/RestoreAccess/RestoreAccess.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = (theme) => ({
  container: {
    height: 'calc(100vh - 40px - 73px - 52px)', // caution + topbar + footer
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
  },
  content: {
    width: 650,
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center',
    marginRight: 24,
    marginLeft: 24,
  },
  icon: {
    height: 96,
    width: 96,
  },
  header: {
    fontSize: 34,
    fontWeight: 700,
    letterSpacing: 0.25,
    marginTop: 24,
    marginBottom: theme.spacing(2),
    textAlign: 'center',
  },
  description: {
    fontSize: 16,
    color: theme.colors.grey450,
    fontStyle: 'normal',
    fontWeight: 400,
    lineHeight: '22px',
    letterSpacing: 0,
    textAlign: 'center',
  },
});

export const useStyles = makeStyles(styles, { name: 'RestoreAccess' });

'''
'''--- src/ui/components/Topbar/Account/Account.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = {
  button: {
    borderRadius: 8,
    textTransform: 'none',
    padding: '3px 6px 3px 6px',
    backgroundColor: ({ isOpen }) => (isOpen ? '#ebebeb' : '#ffffff'),
    '&:hover': {
      backgroundColor: '#ebebeb',
    },
  },
  buttonContent: {
    display: 'flex',
    alignItems: 'center',
    fontSize: 14,
    letterSpacing: 0.25,
    color: 'rgba(0, 0, 0, 0.7)',
  },
  accountId: {
    margin: '0 4px 0 10px',
  },
  nearIcon: {
    height: 20,
    width: 20,
  },
};

export const useStyles = makeStyles(styles, { name: 'Account' });

'''
'''--- src/ui/components/Topbar/Account/Modal/Modal.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = {
  container: {
    width: 280,
    borderRadius: 8,
  },
  account: {
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center',
  },
  nearIcon: {
    height: 40,
    width: 40,
    marginTop: 40,
  },
  accountId: {
    width: '90%',
    margin: '28px 0 16px 0',
    fontWeight: 700,
    overflow: 'hidden',
    whiteSpace: 'pre-wrap',
    textOverflow: 'ellipsis',
    textAlign: 'center',
  },
  tools: {
    marginBottom: 16,
  },
  footer: {
    height: 64,
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
  },
  disconnect: {
    fontSize: 12,
    letterSpacing: 1.25,
    fontWeight: 700,
    borderRadius: 8,
  },
};

export const useStyles = makeStyles(styles, { name: 'Modal' });

'''
'''--- src/ui/components/Topbar/DesktopToolbar/DesktopToolbar.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = {
  container: {
    width: '100vw',
    height: '72px',
    '@media (max-width: 800px)': {
      height: 'auto',
    },
    display: 'grid',
    gridTemplateColumns: '24px auto auto 48px',
    gridTemplateRows: '100%',
    gridTemplateAreas: `
      '. a b .'
    `,
    borderBottom: '1px solid #00000020',
  },
  logo: {
    gridArea: 'a',
    fontSize: 24,
    fontWeight: 500,
    alignSelf: 'center',
  },
  logoWrapper: {
    display: 'flex',
    alignItems: 'center',
    '&>img': {
      marginRight: 10,
    },
    '@media (max-width: 800px)': {
      '&>img': {
        height: 32,
        width: 32,
      },
    },
  },
  account: {
    gridArea: 'b',
    justifySelf: 'end',
    alignSelf: 'center',
  },
};

export const useStyles = makeStyles(styles, { name: 'DesktopToolbar' });

'''
'''--- src/ui/components/Topbar/MobileToolbar/MobileToolbar.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = {
  logo: {
    gridArea: 'a',
    fontSize: 24,
    fontWeight: 500,
    alignSelf: 'center',
  },
  logoWrapper: {
    display: 'flex',
    alignItems: 'center',
    '&>img': {
      marginRight: 10,
    },
    '@media (max-width: 800px)': {
      '&>img': {
        height: 32,
        width: 32,
      },
    },
  },
  toolbar: {
    width: 'calc(100vw - 32px)',
    borderBottom: '1px solid #00000020',
  },
  menuButton: {
    marginRight: 16,
    edge: 'start',
    color: 'inherit',
    ariaLabel: 'menu',
    ariaHaspopup: true,
  },
  rightToolbar: {
    marginLeft: 'auto',
  },
};

export const useStyles = makeStyles(styles, { name: 'MobileToolbar' });

'''
'''--- src/ui/components/Topbar/Topbar.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = {
  container: {
    width: '100vw',
    height: '72px',
    '@media (max-width: 800px)': {
      height: 'auto',
    },
    display: 'grid',
    gridTemplateColumns: '24px auto auto 48px',
    gridTemplateRows: '100%',
    gridTemplateAreas: `
      '. a b .'
    `,
    borderBottom: '1px solid #00000020',
  },
  logo: {
    gridArea: 'a',
    fontSize: 24,
    fontWeight: 500,
    alignSelf: 'center',
  },
  logoWrapper: {
    display: 'flex',
    alignItems: 'center',
    '&>img': {
      marginRight: 10,
    },
    '@media (max-width: 800px)': {
      '&>img': {
        height: 32,
        width: 32,
      },
    },
  },
  account: {
    gridArea: 'b',
    justifySelf: 'end',
    alignSelf: 'center',
  },
  progress: {
    height: 5,
    position: 'absolute',
    top: 0,
    width: '100%',
  },
  toolbar: {
    borderBottom: '1px solid #00000020',
  },
  menuButton: {
    marginRight: 16,
  },
  rightToolbar: {
    marginLeft: 'auto',
  },
};

export const useStyles = makeStyles(styles, { name: 'Topbar' });

'''
'''--- src/ui/config/campaign.js ---
export const pagination = {
  startPage: 1,
  linksPerPage: 50,
};

'''
'''--- src/ui/config/constants.js ---
export const mobileMaxWidth = 800;

'''
'''--- src/ui/config/emoji.js ---
export const emoji = {
  handRaisedMan: '🙋‍♂️',
  manFrowning: '🙍‍♂️',
  confusedMan: '🤷‍♂️',
  foxMuzzle: '🦊',
};

'''
'''--- src/ui/config/theme.js ---
import { unstable_createMuiStrictModeTheme as createMuiTheme } from '@material-ui/core';

export const theme = createMuiTheme({
  palette: {
    primary: {
      main: '#3d5afe',
      light: '#5870ff',
    },
  },
  colors: {
    dashboardGrey: '#989898',
    dashboardHoverBgGrey: '#ffffff28',
    dividerOnWhite: '#dfdfdf',
    red: '#e40029',
    primary400: '#3D5AFE',
    grey200: '#E4E4E4',
    grey450: '#636364',
    grey500: '#212121',
  },
  overrides: {
    MuiSvgIcon: {
      root: {
        height: 20,
        width: 20,
      },
    },
    MuiTypography: {
      h3: {
        fontSize: 24,
        fontWeight: 700,
      },
    },
    MuiButton: {
      containedPrimary: {
        color: 'white',
        boxShadow: '0 12px 24px 0 #3d5afe3d',
        padding: '16px 35px',
        borderRadius: 8,
        fontWeight: 500,
        letterSpacing: 1.25,
        lineHeight: 1.14,
      },
    },
    MuiOutlinedInput: {
      root: {
        borderRadius: 8,
      },
    },
  },
});

'''
'''--- src/ui/providers/Initializer/Loader/Loader.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = {
  container: {
    height: '100vh',
    width: '100vw',
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
    position: 'fixed',
    top: 0,
    left: 0,
  },
};

export const useStyles = makeStyles(styles, { name: 'Loader' });

'''
'''--- src/ui/utils/format.js ---
import { utils } from 'near-api-js';

export const formatNearBalance = (balance, frac = 2) =>
  `${utils.format.formatNearAmount(balance, frac)} NEAR`;

'''
'''--- src/ui/utils/formatCampaignData.js ---
import BN from 'bn.js';
import dateFormat from 'dateformat';
import { formatNearBalance } from './format';

export const getTotalAmount = (amountPerLink, totalLinks) =>
  formatNearBalance(new BN(amountPerLink).mul(new BN(totalLinks)));

export const getDate = (createdAt) => dateFormat(createdAt, 'd mmm yyyy');
export const getTime = (createdAt) => dateFormat(createdAt, 'd mmm yyyy HH:MM');
export const getCampaignName = (campaignId) => campaignId.split('.')[0];

'''