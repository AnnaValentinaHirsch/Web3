*GitHub Repository "Giftea/NEAR-tour-ui"*

'''--- .env ---
SKIP_PREFLIGHT_CHECK=true
'''
'''--- .eslintrc.json ---
{
  "env": {
    "browser": true,
    "es2021": true
  },
  "extends": ["eslint:recommended", "plugin:react/recommended"],
  "parserOptions": {
    "ecmaFeatures": {
      "jsx": true
    },
    "ecmaVersion": 8,
    "sourceType": "module"
  },
  "plugins": ["react"],
  "rules": {}
}

'''
'''--- README.md ---
# Getting Started with NEAR Tours

Near Tours allows a user who has access to the application to create tours and interact with tours created by other users. Peculiar functionalities are:
- Create Tour
- Delete Tour (You can only delete tours you created)
- A user can like or dislike a tour
- A user can leave a comment on a tour
- A user can rate a tour only once!

## [Live Link](https://giftea.github.io/NEAR-tour-ui)

<img width="1439" alt="Screenshot 2022-06-01 at 11 20 21 PM" src="https://user-images.githubusercontent.com/70780434/171515612-871777c8-a6ef-41b0-b795-4312a42146b0.png">

## This a demo for dacade

[Dacade](https://dacade.org/signup?invite=giftea)

'''
'''--- contract/README.md ---
# Sample

This repository includes a complete project structure for AssemblyScript contracts targeting the NEAR platform.

The example here is very basic.  It's a simple contract demonstrating the following concepts:
- a single contract
- the difference between `view` vs. `change` methods
- basic contract storage

The goal of this repository is to make it as easy as possible to get started writing unit tests for AssemblyScript contracts built to work with NEAR Protocol.

## Usage

### Getting started

1. clone this repo to a local folder
2. run `yarn`
3. run `yarn install`
4. run `yarn test`

### Top-level `yarn` commands

- run `yarn test` to run all tests
  - (!) be sure to run `yarn build:release` at least once before:
    - run `yarn test:unit` to run only unit tests
- run `yarn build` to quickly verify build status
- run `yarn deploy` to quickly run the `./scripts/1.deploy.sh` command to deploy smart contract
- run `yarn clean` to clean up build folder

### Other documentation

- tour contract and test documentation
  - see `/src/tour/README` for contract interface
  - see `/src/tour/__tests__/README` for tour unit testing details
  - see `/scripts/README` for running scripts

### Contracts and Unit Tests

```txt
src
├── tour                        <-- tour contract
│   ├── README.md
│   ├── __tests__
│   │   ├── README.md
│   │   └── index.unit.spec.ts
│   └── assembly
│       └── index.ts
|       └── models
|            └── commentModel.ts
|            └── rateModel.ts
|            └── tourModel.ts
|
└── utils.ts                      <-- shared contract code
```

### Helper Scripts

```txt
scripts
├── 1.deploy.sh
├── 2.create_tour.sh
├── 3.get_tour.sh
├── 4.get_tours.sh
├── 5.buy_tour.sh
├── 6.update_tour.sh
├── 7.like_tour.sh
├── 8.dislike_tour.sh
├── 9.comment_on_tour.sh
├── 10.rate_tour.sh
├── 11.delete_tour.sh
└── README.md                     <-- instructions
```
## Deployed Contract Link
[Check out the deployed Smart Contract on explorer.testnet.near.org](https://explorer.testnet.near.org/transactions/4Y8PBn45mJtyDD4ir1aopPkMNqZdfC2hwJrXhTxAi7cA)
'''
'''--- contract/as-pect.config.js ---
module.exports = require("near-sdk-as/imports");
module.exports.include.push("**/*.unit.spec.ts");
'''
'''--- contract/asconfig.json ---
  {
  "workspaces": [
    "src/tour"
  ]
}
'''
'''--- contract/package.json ---
{
  "name": "tour",
  "version": "1",
  "main": "index.js",
  "author": "Giftea",
  "license": "MIT",
  "scripts": {
    "dev": "watch -d -n 1 'clear && yarn test:unit'",
    "asp": "asp --verbose --nologo",
    "test:unit": "yarn asp -f unit.spec",
    "build": "asb --target debug",
    "build:release": "asb",
    "test": "yarn build:release && yarn test:unit",
    "clean": "rm -rf ./build && rm -rf ./neardev && rm -rf ./target"
  },
  "devDependencies": {
    "near-sdk-as": "^3.2.3"
  }
}

'''
'''--- contract/scripts/1.deploy.sh ---
#!/usr/bin/env bash

[ -z "$CONTRACT" ] && echo "Missing \$CONTRACT environment variable"
[ -z "$OWNER" ] && echo "Missing \$OWNER environment variable"

echo "deleting $CONTRACT and setting $OWNER as beneficiary"
echo
near delete $CONTRACT $OWNER

echo --------------------------------------------
echo
echo "cleaning up the /neardev folder"
echo
rm -rf ./neardev

# exit on first error after this point to avoid redeploying with successful build
set -e

echo --------------------------------------------
echo
echo "rebuilding the contract (release build)"
echo
yarn build:release

echo --------------------------------------------
echo
echo "redeploying the contract"
echo
near dev-deploy ./build/release/tour.wasm

echo --------------------------------------------
echo run the following commands
echo
echo 'export CONTRACT=__new_contract_account_id__'
echo
echo

exit 0
'''
'''--- contract/scripts/10.rate_tour.sh ---
#!/usr/bin/env bash
near call $CONTRACT rateTour '{"rate": {"id": "ABC3333", "tourId": "056NNNNN76", "rate":5} }' --accountId $OWNER

'''
'''--- contract/scripts/11.delete_tour.sh ---
#!/usr/bin/env bash
near call $CONTRACT deleteTour '{"id": "056NNNNN76"}' --accountId $OWNER

'''
'''--- contract/scripts/2.create_tour.sh ---
#!/usr/bin/env bash
near call $CONTRACT setTour '{"tour": {"id": "056NNNNN76", "name": "Mountain Explorer", "imageCover": "https://images.pexels.com/photos/618833/pexels-photo-618833.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2", "description": "Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu","summary": "Breathtaking hike through the Canadian Banff National Park","price":"1000000000000000000000000","images": ["https://images.pexels.com/photos/618833/pexels-photo-618833.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2", "https://images.pexels.com/photos/747964/pexels-photo-747964.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2" ]  }}' --accountId $OWNER

'''
'''--- contract/scripts/3.get_tour.sh ---
#!/usr/bin/env bash
near view $CONTRACT getTour '{"id": "056NNNNN76"}'

'''
'''--- contract/scripts/4.get_tours.sh ---
#!/usr/bin/env bash
near view $CONTRACT getTours --account_id $OWNER 
'''
'''--- contract/scripts/5.buy_tour.sh ---
#!/usr/bin/env bash
near call $CONTRACT buyTour '{"tourId": "056NNNNN76"}' --depositYocto=1000000000000000000000000 --accountId $OWNER
'''
'''--- contract/scripts/6.update_tour.sh ---
#!/usr/bin/env bash
near call $CONTRACT updateTour '{"tour": {"id": "056NNNNN76", "name": "Mountain Hiker", "imageCover": "https://images.pexels.com/photos/618833/pexels-photo-618833.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2", "description": "Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu","summary": "Breathtaking hike through the Canadian Banff National Park","price":"1000000000000000000000000","images": ["https://images.pexels.com/photos/618833/pexels-photo-618833.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2", "https://images.pexels.com/photos/747964/pexels-photo-747964.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2" ]  }}' --accountId $OWNER

'''
'''--- contract/scripts/7.like_tour.sh ---
#!/usr/bin/env bash
near call $CONTRACT likeTour '{"id": "056NNNNN76"}' --accountId $OWNER

'''
'''--- contract/scripts/8.dislike_tour.sh ---
#!/usr/bin/env bash
near call $CONTRACT dislikeTour '{"id": "056NNNNN76"}' --accountId $OWNER

'''
'''--- contract/scripts/9.comment_on_tour.sh ---
#!/usr/bin/env bash
near call $CONTRACT commentOnTour '{"comment": {"id": "ABC111666", "tourId": "056NNNNN76", "comment":"Not Bad"} }' --accountId $OWNER

'''
'''--- contract/scripts/README.md ---
## Setting up your terminal

The scripts in this folder support a simple demonstration of the contract.

It uses the following setup:

```txt
┌───────────────────────────────────────┬───────────────────────────────────────┐
│                                       │                                       │
│                                       │                                       │
│                                       │                                       │
│                                       │                                       │
│                                       │                                       │
│                                       │                                       │
│                                       │                                       │
│                   A                   │                   B                   │
│                                       │                                       │
│                                       │                                       │
│                                       │                                       │
│                                       │                                       │
│                                       │                                       │
│                                       │                                       │
│                                       │                                       │
└───────────────────────────────────────┴───────────────────────────────────────┘
```

### Terminal **A**

*This window is used to compile, deploy and control the contract*
- Environment
  ```sh
  export CONTRACT=        # depends on deployment
  export OWNER=           # any account you control

  # for example
  # export CONTRACT=dev-1654101510417-62946478212070
  # export OWNER=giftea.testnet
  ```

- Commands
  ```sh
  1.deploy.sh               # cleanup, compile and deploy contract
  2.create_tour.sh          # call methods on the deployed contract
  ```

### Terminal **B**

*This window is used to render the contract account storage*
- Environment
  ```sh
  export CONTRACT=        # depends on deployment

  # for example
  # export CONTRACT=dev-1654101510417-62946478212070
  ```

- Commands
  ```sh
  # monitor contract storage using near-account-utils
  # https://github.com/near-examples/near-account-utils
  watch -d -n 1 yarn storage $CONTRACT
  ```
---

## OS Support

### Linux

- The `watch` command is supported natively on Linux
- To learn more about any of these shell commands take a look at [explainshell.com](https://explainshell.com)

### MacOS

- Consider `brew info visionmedia-watch` (or `brew install watch`)

### Windows

- Consider this article: [What is the Windows analog of the Linux watch command?](https://superuser.com/questions/191063/what-is-the-windows-analog-of-the-linux-watch-command#191068)
'''
'''--- contract/src/as-pect.d.ts ---
/// <reference types="@as-pect/assembly/types/as-pect" />
'''
'''--- contract/src/as_types.d.ts ---
/// <reference types="near-sdk-as/assembly/as_types" />
'''
'''--- contract/src/tour/README.md ---
![Near, Inc. logo](https://near.org/wp-content/themes/near-19/assets/img/logo.svg?t=1553011311)

## Design

### Interface

```ts
function setTour
```
- "Change" function (ie. a function that alters contract state)
- Receives a `Tour` object as a parameter, creates a new Tour and returns the success message

```ts
function getTour
```
- "View" function (ie. a function that does not alters contract state)
- Recieves a Tour's `id` as parameter
- Returns a Tour object

```ts
function getTours
```
- "View" function (ie. a function that does not alters contract state)
- Returns the whole Tours details/content

```ts
function buyTour
```
- "Change" function (ie. a function that alters contract state)
- Recieves a Tour's `id` as parameter
- This fetches a Tour by the `id` parameter and increaments it's sold amount

```ts
function updateTour
```
- "Change" function (ie. a function that alters contract state)
- Receives a `Tour` object as a parameter, updates Tour and returns the success message

```ts
function deleteTour
```
- "Change" function (ie. a function that alters contract state)
- Recieves a Tour's `id` as parameter
- Fetches the Tour by `id`, deletes it together with it's comments and rates

```ts
function likeTour
```
- "Change" function (ie. a function that alters contract state)
- Recieves a Tour's `id` as parameter
- Fetches the Tour by `id`, and adds a like to it.
- If a like has been added by a user and the function is called again, it removes the like.
- If a dislike has been added by a user and the function is called, it removes the dislike and adds a like

```ts
function dislikeTour
```
- "Change" function (ie. a function that alters contract state)
- Recieves a Tour's `id` as parameter
- Fetches the Tour by `id`, and adds a dislike to it.
- If a dislike has been added by a user and the function is called again, it removes the dislike.
- If a like has been added by a user and the function is called, it removes the like and adds a dislike

```ts
function commentOnTour
```
- "Change" function (ie. a function that alters contract state)
- Receives a `Comment` object as a parameter, fetches the Tour by the `tourId` value within the `Comment` object
- Creates a new comment and adds it to the Tour

```ts
function rateTour
```
- "Change" function (ie. a function that alters contract state)
- Receives a `Rate` object as a parameter, fetches the Tour by the `tourId` value within the `Rate` object
- Creates a new rate and adds it to the Tour
- The function will not execute if a user has rated before

'''
'''--- contract/src/tour/__tests__/README.md ---
### Unit Tests

Unit tests can be run with the command below:

```
yarn run test
```

### Tests for Contract in `index.unit.spec.ts`

```
[Describe]: Checks for creating account

 [Success]: ✔ creates a tour

[Describe]: View a single Tour

 [Success]: ✔ Returns a single tour
 [Success]: ✔ Smart contract panics when there's no Tour with such ID

[Describe]: To purchase a single Tour

 [Success]: ✔ purchases a single tour and returns a response
 [Success]: ✔ Smart contract panics when there's no Tour with such ID

[Describe]: To delete a single Tour

 [Success]: ✔ deletes a single tour and returns a response
 [Success]: ✔ Smart contract panics when there's no Tour with such ID

[Describe]: To like on a single Tour

 [Success]: ✔ likes on a single tour and returns a response
 [Success]: ✔ unlikes on a single tour and returns a response
 [Success]: ✔ Smart contract panics when there's no Tour with such ID

[Describe]: To dislike on a single Tour

 [Success]: ✔ dislikes on a single tour and returns a response
 [Success]: ✔ undislikes on a single tour and returns a response
 [Success]: ✔ Smart contract panics when there's no Tour with such ID

[Describe]: Comment on tour

 [Success]: ✔ comments on tour
 [Success]: ✔ Smart contract panics when there's no Tour with such ID

[Describe]: Rate tour

 [Success]: ✔ rates tour
 [Success]: ✔ Smart contract panics when there's no Tour with such ID

    [File]: src/tour/__tests__/index.unit.spec.ts
  [Groups]: 9 pass, 9 total
  [Result]: ✔ PASS
[Snapshot]: 0 total, 0 added, 0 removed, 0 different
 [Summary]: 17 pass,  0 fail, 17 total
    [Time]: 220.521ms

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  [Result]: ✔ PASS
   [Files]: 1 total
  [Groups]: 9 count, 9 pass
   [Tests]: 17 pass, 0 fail, 17 total
    [Time]: 15046.675ms
✨  Done in 32.52s.

```
'''
'''--- contract/src/tour/__tests__/as-pect.d.ts ---
/// <reference types="@as-pect/assembly/types/as-pect" />
'''
'''--- contract/src/tour/__tests__/index.unit.spec.ts ---
import { VMContext } from "near-mock-vm";
import { TxFee, creator, tour, comment, rate } from "../../utils";
import {
  setTour,
  getTour,
  buyTour,
  deleteTour,
  likeTour,
  dislikeTour,
  commentOnTour,
  rateTour,
} from "../assembly";
import { tourIds } from "../assembly/models/tourModel";

// SET TOUR
describe("Checks for creating account", () => {
  beforeEach(() => {
    VMContext.setAttached_deposit(TxFee);
    VMContext.setSigner_account_id(creator);
  });

  it("creates a tour", () => {
    const response = setTour(tour);

    expect(response).toBe("Tour Created!");
    expect(tourIds.length).toBeGreaterThan(
      0,
      "A new tour exists with the id: " + tourIds[0]
    );
  });
});

// GET TOUR
describe("View a single Tour", () => {
  beforeEach(() => {
    VMContext.setAttached_deposit(TxFee);
    VMContext.setSigner_account_id(creator);

    setTour(tour);
  });

  it("Returns a single tour", () => {
    expect(tour.id).toStrictEqual(
      tourIds[0],
      "The uniqueId on the returned tour is equal to the id: " + tourIds[0]
    );
  });

  it("Smart contract panics when there's no Tour with such ID", () => {
    function getUnknownItem(): void {
      getTour("ANC-0000001");
    }
    expect(getUnknownItem).toThrow("This Tour doesn't exist");
  });
});

// BUY TOUR
describe("To purchase a single Tour", () => {
  beforeEach(() => {
    VMContext.setAttached_deposit(TxFee);
    VMContext.setSigner_account_id(creator);
    setTour(tour);
  });

  it("purchases a single tour and returns a response", () => {
    const response = buyTour(tourIds[0]);
    expect(response).toBe("Successfully Purchased Tour!");
  });

  it("Smart contract panics when there's no Tour with such ID", () => {
    function buyUnknownItem(): void {
      buyTour("ANC-0000001");
    }
    expect(buyUnknownItem).toThrow("Tour not found");
  });
});

// DELETE TOUR
describe("To delete a single Tour", () => {
  beforeEach(() => {
    VMContext.setAttached_deposit(TxFee);
    VMContext.setSigner_account_id(creator);
    setTour(tour);
  });

  it("deletes a single tour and returns a response", () => {
    const response = deleteTour(tourIds[0]);
    expect(response).toBe("Successfully deleted Tour");
  });

  it("Smart contract panics when there's no Tour with such ID", () => {
    function deleteUnknownItem(): void {
      deleteTour("ANC-0000001");
    }
    expect(deleteUnknownItem).toThrow("This Tour doesn't exist");
  });
});

// LIKE TOUR
describe("To like on a single Tour", () => {
  beforeEach(() => {
    VMContext.setAttached_deposit(TxFee);
    VMContext.setSigner_account_id(creator);
    setTour(tour);
  });

  it("likes on a single tour and returns a response", () => {
    const response = likeTour(tourIds[0]);
    expect(response).toBe("You liked Tour with ID:" + tourIds[0]);
  });

  it("unlikes on a single tour and returns a response", () => {
    likeTour(tourIds[0]);
    const response = likeTour(tourIds[0]);
    expect(response).toBe("You unliked Tour with ID:" + tourIds[0]);
  });

  it("Smart contract panics when there's no Tour with such ID", () => {
    function likeUnknownItem(): void {
      likeTour("ANC-0000001");
    }
    expect(likeUnknownItem).toThrow("This Tour doesn't exist");
  });
});

// DISLIKE TOUR
describe("To dislike on a single Tour", () => {
  beforeEach(() => {
    VMContext.setAttached_deposit(TxFee);
    VMContext.setSigner_account_id(creator);

    setTour(tour);
  });

  it("dislikes on a single tour and returns a response", () => {
    const response = dislikeTour(tourIds[0]);
    expect(response).toBe("You disliked Tour with ID:" + tourIds[0]);
  });

  it("undislikes on a single tour and returns a response", () => {
    dislikeTour(tourIds[0]);
    const response = dislikeTour(tourIds[0]);
    expect(response).toBe("You undisliked Tour with ID:" + tourIds[0]);
  });

  it("Smart contract panics when there's no Tour with such ID", () => {
    function dislikeUnknownItem(): void {
      dislikeTour("ANC-0000001");
    }
    expect(dislikeUnknownItem).toThrow("This Tour doesn't exist");
  });
});

// COMMENT ON TOUR
describe("Comment on tour", () => {
  beforeEach(() => {
    VMContext.setAttached_deposit(TxFee);
    VMContext.setSigner_account_id(creator);
  });

  it("comments on tour", () => {
    setTour(tour);
    const response = commentOnTour(comment);

    expect(response).toBe("You commented on Tour with ID:" + tourIds[0]);
  });

  it("Smart contract panics when there's no Tour with such ID", () => {
    function commentOnInvalidTour(): void {
      commentOnTour(comment);
    }
    expect(commentOnInvalidTour).toThrow("This Tour doesn't exist");
  });
});

// RATE TOUR
describe("Rate tour", () => {
  beforeEach(() => {
    VMContext.setAttached_deposit(TxFee);
    VMContext.setSigner_account_id(creator);
  });

  it("rates tour", () => {
    setTour(tour);
    const response = rateTour(rate);

    expect(response).toBe("You rated Tour with ID:" + tourIds[0]);
  });

  it("Smart contract panics when there's no Tour with such ID", () => {
    function rateOnInvalidTour(): void {
      rateTour(rate);
    }
    expect(rateOnInvalidTour).toThrow("This Tour doesn't exist");
  });
});

'''
'''--- contract/src/tour/asconfig.json ---
{
    "extends": "near-sdk-as/asconfig.json",
    "workspaces": [
      "src/tour"
    ]
  }
'''
'''--- contract/src/tour/assembly/index.ts ---
import { Tour, listedTours, TourParam, tourIds } from "./models/tourModel";
import { ContractPromiseBatch, context } from "near-sdk-as";
import { Comment, tourComments } from "./models/commentModel";
import { Rate, tourRates } from "./models/rateModel";

/*
CREATE NEW TOUR
*/
export function setTour(tour: TourParam): string {
  let storedTour = listedTours.get(tour.id);
  if (storedTour !== null) {
    throw new Error(`a tour with ${tour.id} already exists`);
  }
  tourIds.push(tour.id);
  listedTours.set(tour.id, Tour.fromPayload(tour));
  return "Tour Created!";
}

/*
FETCH TOUR/TOURS
*/

export function getTour(id: string): Tour | null {
  assert(listedTours.contains(id), "This Tour doesn't exist");
  return listedTours.get(id);
}

export function getTours(): Tour[] {
  return listedTours.values();
}

/*
PURCHASE TOUR
*/

export function buyTour(tourId: string): string {
  const tour = getTour(tourId);
  if (tour == null) {
    throw new Error("Tour not found");
  }
  if (tour.price.toString() != context.attachedDeposit.toString()) {
    throw new Error("Attached deposit should equal to the tour's price");
  }
  ContractPromiseBatch.create(tour.owner).transfer(context.attachedDeposit);
  tour.incrementSoldAmount();
  listedTours.set(tour.id, tour);

  return "Successfully Purchased Tour!";
}

/*
UPDATE TOUR
*/

export function updateTour(tour: Tour): string {
  let storedTour = listedTours.get(tour.id);
  if (storedTour === null) {
    throw new Error(`Tour not found`);
  }
  const opt = storedTour.updateFromPayload(tour);

  listedTours.set(tour.id, opt);

  return "Successfully Updated Tour!";
}

/*
DELETE TOUR
*/

export function deleteTour(id: string): string {
  let tour = listedTours.getSome(id);

  tour.comments.forEach((comment) => {
    tourComments.delete(comment.id);
  });
  tour.rates.forEach((rate) => {
    tourRates.delete(rate.id);
  });

  listedTours.delete(id);

  return "Successfully deleted Tour";
}

/*
IMPRESSIONS ON TOUR
*/
// LIKE
export function likeTour(id: string): string {
  let storedTour = listedTours.getSome(id);

  if (storedTour.dislike.includes(context.sender)) {
    let uid = storedTour.dislike.findIndex((data) => data == context.sender);
    if (uid != -1) {
      storedTour.dislike.splice(uid, 1);
    }
  }

  if (storedTour.like.includes(context.sender)) {
    let uid = storedTour.like.findIndex((data) => data == context.sender);
    if (uid != -1) {
      storedTour.like.splice(uid, 1);
    }
    listedTours.set(id, storedTour);
    return "You unliked Tour with ID:" + id;
  }

  const opt = storedTour.likeTour();
  listedTours.set(id, opt);

  return "You liked Tour with ID:" + id;
}

// DISLIKE
export function dislikeTour(id: string): string {
  let storedTour = listedTours.getSome(id);

  if (storedTour.like.includes(context.sender)) {
    let uid = storedTour.like.findIndex((data) => data == context.sender);
    if (uid != -1) {
      storedTour.like.splice(uid, 1);
    }
  }

  if (storedTour.dislike.includes(context.sender)) {
    let uid = storedTour.dislike.findIndex((data) => data == context.sender);
    if (uid != -1) {
      storedTour.dislike.splice(uid, 1);
    }
    listedTours.set(id, storedTour);
    return "You undisliked Tour with ID:" + id;
  }

  const opt = storedTour.dislikeTour();
  listedTours.set(id, opt);

  return "You disliked Tour with ID:" + id;
}

/*
COMMENTS ON TOUR
*/
export function commentOnTour(comment: Comment): string {
  let tour = listedTours.getSome(comment.tourId);

  tourComments.set(comment.id, Comment.fromPayload(comment));
  let storedComment = tourComments.getSome(comment.id);
  let opt = tour.comment(storedComment);
  listedTours.set(tour.id, opt);
  return "You commented on Tour with ID:" + comment.tourId;
}

/*
RATE TOUR
*/

export function rateTour(rate: Rate): string {
  let tour = listedTours.getSome(rate.tourId);
  let found = false;

  for (var i = 0; i < tour.rates.length; i++) {
    if (tour.rates[i].owner == context.sender) {
      found = true;
      break;
    }
  }

  assert(!found, "You have already rated this Tour");

  tourRates.set(rate.id, Rate.fromPayload(rate));
  let storedRate = tourRates.getSome(rate.id);
  let opt = tour.rate(storedRate);
  listedTours.set(tour.id, opt);
  return "You rated Tour with ID:" + rate.tourId;
}

'''
'''--- contract/src/tour/assembly/models/commentModel.ts ---
import { PersistentUnorderedMap, context } from "near-sdk-as";

@nearBindgen
export class Comment {
  id: string;
  tourId: string;
  comment: string;
  commenter: string;
  createdAt: u64;

  public static fromPayload(payload: Comment): Comment {
    const comment = new Comment();
    comment.id = payload.id;
    comment.tourId = payload.tourId;
    comment.comment = payload.comment;
    comment.commenter = context.sender;
    comment.createdAt = context.blockTimestamp;

    return comment;
  }
}

export const tourComments = new PersistentUnorderedMap<string, Comment>(
  "COMMENT"
);

'''
'''--- contract/src/tour/assembly/models/rateModel.ts ---
import { PersistentUnorderedMap, u128, context } from "near-sdk-as";

@nearBindgen
export class Rate {
  id: string;
  tourId: string;
  rate: i32;
  owner: string;

  public static fromPayload(payload: Rate): Rate {
    const rate = new Rate();
    rate.id = payload.id;
    rate.tourId = payload.tourId;
    rate.rate = payload.rate;
    rate.owner = context.sender;
    return rate;
  }
}

export const tourRates = new PersistentUnorderedMap<string, Rate>(
  "RATE"
);

'''
'''--- contract/src/tour/assembly/models/tourModel.ts ---
import {
  PersistentUnorderedMap,
  u128,
  context,
  PersistentVector,
} from "near-sdk-as";
import { Comment } from "./commentModel";
import { Rate } from "./rateModel";
import { tourID } from "../../../utils";

@nearBindgen
export class TourParam {
  id: tourID;
  name: string;
  price: u128;
  summary: string;
  description: string;
  imageCover: string;
  images: string[];
}

@nearBindgen
export class Tour {
  id: tourID;
  name: string;
  ratingsAverage: f64;
  ratingsQuantity: u32;
  price: u128;
  summary: string;
  description: string;
  imageCover: string;
  images: string[];
  like: string[];
  dislike: string[];
  owner: string;
  sold: u32;
  comments: Comment[];
  rates: Rate[];
  createdAt: u64;

  public static fromPayload(payload: TourParam): Tour {
    const tour = new Tour();
    tour.id = payload.id;
    tour.name = payload.name;
    tour.description = payload.description;
    tour.images = payload.images;
    tour.summary = payload.summary;
    tour.ratingsAverage = 0;
    tour.ratingsQuantity = 0;
    tour.price = payload.price;
    tour.imageCover = payload.imageCover;
    tour.owner = context.sender;
    tour.like = [];
    tour.dislike = [];
    tour.comments = [];
    tour.rates = [];
    tour.createdAt = context.blockTimestamp;

    return tour;
  }

  public incrementSoldAmount(): void {
    this.sold = this.sold + 1;
  }

  updateFromPayload(payload: Tour): Tour {
    this.name = payload.name;
    this.description = payload.description;
    this.images = payload.images;
    this.summary = payload.summary;
    this.price = payload.price;
    this.imageCover = payload.imageCover;
    return this;
  }

  likeTour(): Tour {
    this.like.push(context.sender);
    return this;
  }

  dislikeTour(): Tour {
    this.dislike.push(context.sender);
    return this;
  }

  comment(comment: Comment): Tour {
    this.comments.push(comment);
    return this;
  }

  rate(rate: Rate): Tour {
    this.rates.push(rate);
    let numRates = this.rates.length;
    this.ratingsQuantity = numRates;
    let num1 = this.rates.filter((item) => item.rate === 1).length;
    let num2 = this.rates.filter((item) => item.rate === 2).length;
    let num3 = this.rates.filter((item) => item.rate === 3).length;
    let num4 = this.rates.filter((item) => item.rate === 4).length;
    let num5 = this.rates.filter((item) => item.rate === 5).length;

    let tot = num1 + num2 + num3 + num4 + num5;
    let rateAvg = (num1 + num2 * 2 + num3 * 3 + num4 * 4 + num5 * 5) / tot;
    this.ratingsAverage = Math.round(rateAvg * 100) / 100;
    return this;
  }
}

export const listedTours = new PersistentUnorderedMap<string, Tour>(
  "LISTED_TOURS"
);
export const tourIds = new PersistentVector<string>("id");

'''
'''--- contract/src/tsconfig.json ---
{
  "extends": "../node_modules/assemblyscript/std/assembly.json",
  "include": ["./**/*.ts"]
}

'''
'''--- contract/src/utils.ts ---
import { u128 } from "near-sdk-core";
import { Comment } from "./tour/assembly/models/commentModel";
import { Rate } from "./tour/assembly/models/rateModel";
import { TourParam } from "./tour/assembly/models/tourModel";

export type AccountId = string;
export type tourID = string;
export const TxFee = u128.from("520000000000000000000000");

/* Dummy data for TEST CASES */
export const creator = "giftea.testnet";

export const tour: TourParam = {
  id: "01928",
  name: "The Forest Hiker",
  images: ["img"],
  imageCover: "img",
  summary: "text",
  description: "text",
  price: TxFee,
};

export const comment: Comment = {
  id: "909",
  comment: "Hola",
  commenter: creator,
  tourId: tour.id,
  createdAt: 2393439489,
};

export const rate: Rate = {
  id: "01",
  tourId: tour.id,
  rate: 2,
  owner: creator,
};

'''
'''--- package.json ---
{
  "name": "rtl",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@emotion/react": "^11.9.0",
    "@emotion/styled": "^11.8.1",
    "@mui/icons-material": "^5.8.0",
    "@mui/material": "^5.8.1",
    "@testing-library/jest-dom": "^5.11.4",
    "@testing-library/react": "^11.1.0",
    "@testing-library/user-event": "^12.1.10",
    "axios": "^0.21.1",
    "date-fns": "^2.28.0",
    "formik": "^2.2.9",
    "framer-motion": "^6.3.4",
    "gh-pages": "^4.0.0",
    "javascript-time-ago": "2.3.8",
    "near-api-js": "^0.44.2",
    "react": "^17.0.2",
    "react-bootstrap": "^2.4.0",
    "react-dom": "^17.0.2",
    "react-dropzone": "^14.2.1",
    "react-multi-carousel": "^2.8.0",
    "react-parallax": "^3.5.0",
    "react-router-dom": "^5.2.0",
    "react-scripts": "4.0.3",
    "react-time-ago": "7.1.1",
    "react-toastify": "^9.0.1",
    "uuid": "^8.3.2",
    "web-vitals": "^1.0.1",
    "yup": "^0.32.11"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject",
    "lint": "eslint .",
    "lint:fix": "eslint --fix",
    "format": "prettier --write './**/*.{js,jsx,ts,tsx,css,md,json}' --config ./.prettierrc",
    "predeploy": "yarn run build",
    "deploy": "gh-pages -d build"
  },
  "homepage": "https://giftea.github.io/NEAR-tour-ui",
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "eslint": "^8.16.0",
    "eslint-config-prettier": "^8.5.0",
    "eslint-plugin-prettier": "^4.0.0",
    "eslint-plugin-react": "^7.30.0",
    "prettier": "^2.6.2"
  }
}

'''
'''--- public/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta name="description" content="Web site created using create-react-app" />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <link rel="preconnect" href="https://fonts.gstatic.com" />
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.1/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-+0n0xVW2eSR5OomGNYDnhzAbDsOXxcvSN1TPprVMTNDbiYZCxYbOOl7+AMvyTG2x"
      crossorigin="anonymous"
    />
    <link
      href="https://fonts.googleapis.com/css2?family=Varela+Round&display=swap"
      rel="stylesheet"
      type="text/css"
    />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css"
    />
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
  </body>
</html>

'''
'''--- public/manifest.json ---
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

'''
'''--- public/robots.txt ---
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

'''
'''--- src/App.js ---
import React from 'react';
import Router from './Router';

const App = () => {
  return (
    <div>
      <Router />
    </div>
  );
};

export default App;

'''
'''--- src/Router.js ---
import React, { useEffect, useCallback, useState } from 'react';
import { HashRouter, Switch, Route } from 'react-router-dom';
import { login, logout as destroy, accountBalance } from './utils/near';
import HomePage from './pages/HomePage';
import Home from './pages/Home';
import Tour from './pages/Tour';
import AddTour from './pages/AddTour';

const Router = () => {
  const account = window.walletConnection.account();
  const [balance, setBalance] = useState('0');
  const getBalance = useCallback(async () => {
    if (account.accountId) {
      setBalance(await accountBalance());
    }
  });

  useEffect(() => {
    getBalance();
  }, [getBalance]);
  return (
    <div>
      <HashRouter>
        <Switch>
          <Route exact path="/">
            {account.accountId ? (
              <HomePage
                address={account.accountId}
                amount={balance}
                symbol="NEAR"
                destroy={destroy}
              />
            ) : (
              <Home login={login} />
            )}
          </Route>
          <Route
            path="/tour/:id"
            render={(props) => <Tour {...props} address={account.accountId} />}
          />
          <Route
            path="/addtour"
            render={(props) => (
              <AddTour
                address={account.accountId}
                amount={balance}
                symbol="NEAR"
                destroy={destroy}
                {...props}
              />
            )}
          />
        </Switch>
      </HashRouter>
    </div>
  );
};

export default Router;

'''
'''--- src/components/index.js ---
export { default as Navbar } from './Navbar';
export { default as Cards } from './Card/Cards';

'''
'''--- src/index.css ---
body {
  margin: 0;
  font-family: 'Varela Round';
  background: #eee;
}

a {
  text-decoration: none;
}

.dropzone {
  border: 1px dashed rgb(0, 149, 255);
  padding: 1rem;
  text-align: center;
  background-color: #fff;
  color: #888;
}

.text-red {
  color: red;
}

.pr-0 {
  padding-right: 0 !important;
}

small {
  font-size: 12px;
}

.custom-card {
  background-color: white;
  border-radius: 5px;
}

.slide-image {
  width: 200px;
  height: 200px;
  object-fit: cover;
  border-radius: 10px;
  margin: 1.5rem;
  margin-left: 0;
}

.font-bold {
  font-weight: bold !important;
}

.text-shad {
  color: #eee;
  text-shadow: 0 1px 0 #ccc,
               0 2px 0 #c9c9c9,
               0 3px 0 #bbb,
               0 4px 0 #b9b9b9,
               0 5px 0 #aaa,
               0 6px 1px rgba(0,0,0,.1),
               0 0 5px rgba(0,0,0,.1),
               0 1px 3px rgba(0,0,0,.3),
               0 3px 5px rgba(0,0,0,.2),
               0 5px 10px rgba(0,0,0,.25),
               0 10px 10px rgba(0,0,0,.2),
               0 20px 20px rgba(0,0,0,.15);
}
'''
'''--- src/index.js ---
import React from 'react';
import ReactDOM from 'react-dom';
import App from './App';
import './index.css';
import { initializeContract } from './utils/near';
import JavascriptTimeAgo from 'javascript-time-ago';

// The desired locales.
import en from 'javascript-time-ago/locale/en';
import ru from 'javascript-time-ago/locale/ru';

JavascriptTimeAgo.locale(en);
JavascriptTimeAgo.locale(ru);
window.nearInitPromise = initializeContract()
  .then(() => {
    ReactDOM.render(
      <React.StrictMode>
        <App />
      </React.StrictMode>,
      document.getElementById('root')
    );
  })
  .catch(console.error);

'''
'''--- src/pages/AddTour.js ---
/* eslint-disable react/prop-types */
import React from 'react';
import Addtour from '../components/AddTour/AddTour';
import { Navbar } from '../components';

const AddTour = ({ address, amount, symbol, destroy }) => {
  return (
    <div>
      <Navbar address={address} amount={amount} symbol={symbol} destroy={destroy} />

      <Addtour />
    </div>
  );
};

export default AddTour;

'''
'''--- src/pages/Home.js ---
/* eslint-disable react/prop-types */
import { Button, Typography } from '@mui/material';
import React from 'react';
import '../styles/Home.css';

const style = {
  background: 'floralwhite',
  '&:hover': {
    background: '#c9c9c9'
  }
};

const Home = ({ login }) => {
  return (
    <div
      className="d-flex justify-content-center flex-column text-center home-container"
      style={{ minHeight: '100vh' }}>
      <div className=" text-light mb-5">
        <Typography
          className="mb-3 animate__animated animate__slideInDown animate__delay-1s"
          variant="h3"
          component="div"
          sx={{ flexGrow: 1 }}>
          Welcome to NEAR-Tours
        </Typography>
        <Typography variant="p" component="div" sx={{ flexGrow: 1 }} className='animate__animated animate__animated animate__fadeIn animate__delay-1s'>
          To Explore Tours, Connect wallet
        </Typography>
        <Button
          onClick={login}
          variant="outlined"
          sx={style}
          className="rounded-pill px-3 mt-3 animate__animated animate__slideInUp animate__delay-1s">
          Connect Wallet
        </Button>
      </div>
    </div>
  );
};

export default Home;

'''
'''--- src/pages/HomePage.js ---
/* eslint-disable react/prop-types */
import React from 'react';
import { Cards, Navbar } from '../components';

const HomePage = ({ address, amount, symbol, destroy }) => {

  return (
    <div>
      <Navbar address={address} amount={amount} symbol={symbol} destroy={destroy} />
      <Cards address={address} />
    </div>
  );
};

export default HomePage;

'''
'''--- src/pages/Tour.js ---
/* eslint-disable react/prop-types */
import React, { useEffect, useState, useCallback } from 'react';
import { useParams } from 'react-router-dom';
import Loader from '../components/Loader';
import { getTour } from '../utils/tour';
import Tour from '../components/Tour/Tour';

const TourPage = ({ address }) => {
  let params = useParams();
  const [tour, setTour] = useState({});
  const [loading, setLoading] = useState(true);

  const fetchTour = useCallback(async (id) => {
    try {
      setLoading(true);
      setTour(await getTour({ id: id }));
    } catch (error) {
      console.log({ error });
    } finally {
      setLoading(false);
    }
  });

  useEffect(() => {
    fetchTour(params.id);
  
  }, []);
  return <>{loading ? <Loader /> : <Tour tour={tour} address={address} />}</>;
};

export default TourPage;

'''
'''--- src/styles/Home.css ---
.home-container {
  background-image: linear-gradient(rgba(0, 0, 0, 0.723), rgba(0, 0, 0, 0.658)),
    url('../images/tour-cov.jpeg');
  background-position: center;
  background-repeat: no-repeat;
  background-size: cover;
}

'''
'''--- src/utils/DateUtils.js ---
/* eslint-disable react/prop-types */
import React from 'react';
import ReactTimeAgo from 'react-time-ago';
import { format } from 'date-fns';

function LastSeen({ date }) {
  return <ReactTimeAgo date={date} locale="en-US" />;
}

export default function DateUtil(data) {
  const nano = data / 1000000;

  const oneday = new Date() - 60 * 60 * 24 * 1000;
  const oneData = new Date(oneday);

  if (new Date(nano).toISOString() < oneData.toISOString()) {
    return format(new Date(nano), 'dd MMM yyyy');
  } else {
    return <LastSeen date={nano} />;
  }
}

'''
'''--- src/utils/config.js ---
// eslint-disable-next-line no-undef
const CONTRACT_NAME = process.env.CONTRACT_NAME || "tourcontract.giftea.testnet";

function environment(env) {
  switch (env) {
    case "mainnet":
      return {
        networkId: "mainnet",
        nodeUrl: "https://rpc.mainnet.near.org",
        contractName: CONTRACT_NAME,
        walletUrl: "https://wallet.near.org",
        helperUrl: "https://helper.mainnet.near.org",
        explorerUrl: "https://explorer.mainnet.near.org",
      };
    case "testnet": 
      return {
        networkId: "testnet",
        nodeUrl: "https://rpc.testnet.near.org",
        contractName: CONTRACT_NAME,
        walletUrl: "https://wallet.testnet.near.org",
        helperUrl: "https://helper.testnet.near.org",
        explorerUrl: "https://explorer.testnet.near.org",
      };
    default:
      throw Error(`Unknown environment '${env}'.`);
  }
}

export default environment;
'''
'''--- src/utils/near.js ---
import environment from './config';
import { connect, Contract, keyStores, WalletConnection } from 'near-api-js';
import { formatNearAmount } from 'near-api-js/lib/utils/format';

const nearEnv = environment('testnet');

export async function initializeContract() {
  const near = await connect(
    Object.assign({ deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() } }, nearEnv)
  );
  window.walletConnection = new WalletConnection(near);
  window.accountId = window.walletConnection.getAccountId();
  window.contract = new Contract(window.walletConnection.account(), nearEnv.contractName, {
    viewMethods: ['getTour', 'getTours'],
    changeMethods: [
      'setTour',
      'buyTour',
      'updateTour',
      'deleteTour',
      'likeTour',
      'unLikeTour',
      'dislikeTour',
      'unDislikeTour',
      'commentOnTour',
      'rateTour'
    ]
  });
}

export async function accountBalance() {
  return formatNearAmount((await window.walletConnection.account().getAccountBalance()).total, 2);
}

export async function getAccountId() {
  return window.walletConnection.getAccountId();
}

export function login() {
  window.walletConnection.requestSignIn(nearEnv.contractName);
}

export function logout() {
  window.walletConnection.signOut();
  window.location.reload();
}

'''
'''--- src/utils/tour.js ---
import { v4 as uuid4 } from 'uuid';
import { parseNearAmount } from 'near-api-js/lib/utils/format';

const GAS = 100000000000000;

export function createTour(tour) {
  tour.id = uuid4();
  tour.price = parseNearAmount(tour.price + '');
  return window.contract.setTour({ tour }, GAS, parseNearAmount(0.52 + ''));
}

export function getTours() {
  return window.contract.getTours();
}

export function getTour(id) {
  return window.contract.getTour(id);
}

export async function buyTour({ id, price }) {
  await window.contract.buyTour({ tourId: id }, GAS, price);
}

export async function updateTour(tour) {
  await window.contract.updateTour({ tour });
}

export async function deleteTour(id) {
  return window.contract.deleteTour(id);
}

export async function likeTour(id) {
  return window.contract.likeTour(id, GAS, parseNearAmount(0.0001 + ''));
}

export async function dislikeTour(id) {
  return window.contract.dislikeTour(id, GAS, parseNearAmount(0.0001 + ''));
}

export async function commentOnTour(comment) {
  comment.id = uuid4();
  return window.contract.commentOnTour({ comment }, GAS, parseNearAmount(0.0001 + ''));
}

export async function rateTour(rate) {
  rate.id = uuid4();
  await window.contract.rateTour({ rate }, GAS, parseNearAmount(0.0001 + ''));
}

'''