*GitHub Repository "Grrialt/post_feed"*

'''--- .gitpod.yml ---
image:
  file: .gitpod.Dockerfile

tasks:
  - init: echo "welcome"
    command: npm i && npm run deploy && npm run start

ports:
  - port: 1234
    onOpen: open-browser
'''
'''--- .idea/modules.xml ---
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ProjectModuleManager">
    <modules>
      <module fileurl="file://$PROJECT_DIR$/.idea/guest-book-js-master.iml" filepath="$PROJECT_DIR$/.idea/guest-book-js-master.iml" />
    </modules>
  </component>
</project>
'''
'''--- .idea/prettier.xml ---
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="PrettierConfiguration">
    <option name="myRunOnSave" value="true" />
    <option name="myRunOnReformat" value="true" />
  </component>
</project>
'''
'''--- .idea/vcs.xml ---
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="VcsDirectoryMappings">
    <mapping directory="$PROJECT_DIR$" vcs="Git" />
  </component>
</project>
'''
'''--- .idea/watcherTasks.xml ---
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ProjectTasksOptions" suppressed-tasks="SCSS" />
</project>
'''
'''--- README.md ---
# Quickstart

### 1. Install Dependencies
```bash
npm install
```

### 2. Test the Contract
Deploy your contract in a sandbox and simulate interactions from users.

```bash
npm test
```

### 3. Deploy the Contract
Build the contract and deploy it in a testnet account
```bash
npm run deploy
```

### 4. Start the Frontend
Start the web application to interact with your smart contract 
```bash
npm start
```

---

# Learn More
1. Learn more about the contract through its [README](./contract/README.md).
2. Check [**NEAR documentation**](https://docs.near.org/develop/welcome).
'''
'''--- contract/README.md ---
# Smart Contract

The smart contract stores messages from users. Messages can be `premium` if the user attaches sufficient money (0.1 $NEAR).

```ts
this.messages = [];

@call
// Public - Adds a new message.
add_message({ text }: { text: string }) {
  // If the user attaches more than 0.1N the message is premium
  const premium = near.attachedDeposit() >= BigInt(POINT_ONE);
  const sender = near.predecessorAccountId();

  const message = new PostedMessage({premium, sender, text});
  this.messages.push(message);
}
  
@view
// Returns an array of messages.
get_messages({ fromIndex = 0, limit = 10 }: { fromIndex: number, limit: number }): PostedMessage[] {
  return this.messages.slice(fromIndex, fromIndex + limit);
}
```

<br />

# Quickstart

1. Make sure you have installed [node.js](https://nodejs.org/en/download/package-manager/) >= 16.
2. Install the [`NEAR CLI`](https://github.com/near/near-cli#setup)

<br />

## 1. Build and Deploy the Contract
You can automatically compile and deploy the contract in the NEAR testnet by running:

```bash
npm run deploy
```

Once finished, check the `neardev/dev-account` file to find the address in which the contract was deployed:

```bash
cat ./neardev/dev-account
# e.g. dev-1659899566943-21539992274727
```

<br />

## 2. Retrieve the Stored Messages
`get_messages` is a read-only method (`view` method) that returns a slice of the vector `messages`.

`View` methods can be called for **free** by anyone, even people **without a NEAR account**!

```bash
near view <dev-account> get_messages '{"from_index":0, "limit":10}'
```

<br />

## 3. Add a Message
`add_message` adds a message to the vector of `messages` and marks it as premium if the user attached more than `0.1 NEAR`.

`add_message` is a payable method for which can only be invoked using a NEAR account. The account needs to attach money and pay GAS for the transaction.

```bash
# Use near-cli to donate 1 NEAR
near call <dev-account> add_message '{"text": "a message"}' --amount 0.1 --accountId <account>
```

**Tip:** If you would like to add a message using your own account, first login into NEAR using:

```bash
# Use near-cli to login your NEAR account
near login
```

and then use the logged account to sign the transaction: `--accountId <your-account>`.

'''
'''--- contract/build.sh ---
#!/bin/sh

echo ">> Building contract"

near-sdk-js build src/contract.ts build/contract.wasm
'''
'''--- contract/deploy.sh ---
#!/bin/sh

# build the contract
yarn build

# deploy the contract
near dev-deploy --wasmFile build/contract.wasm
'''
'''--- contract/package.json ---
{
  "name": "contract",
  "version": "1.0.0",
  "license": "(MIT AND Apache-2.0)",
  "type": "module",
  "scripts": {
    "build": "./build.sh",
    "deploy": "./deploy.sh",
    "test": "echo no unit testing"
  },
  "dependencies": {
    "near-cli": "^3.4.0",
    "near-sdk-js": "1.0.0"
  },
  "devDependencies": {
    "typescript": "^4.8.4",
    "ts-morph": "^16.0.0"
  }
}

'''
'''--- contract/src/contract.ts ---
import { NearBindgen, near, call, view, Vector } from 'near-sdk-js';
import { POINT_ONE, PostedMessage } from './model';

@NearBindgen({})
class PostFeed {
  messages: Vector<PostedMessage> = new Vector<PostedMessage>('v-uid');

  @call({ payableFunction: true })
  // Public - Adds a new message.
  add_message({
    text,
    topic,
    donation,
  }: {
    text: string;
    topic: string;
    donation: string;
  }) {
    // If the user attaches more than 0.1N the message is premium
    const premium = near.attachedDeposit() >= BigInt(POINT_ONE);
    const sender = near.predecessorAccountId();
    const time = near.blockTimestamp();

    const message: PostedMessage = {
      premium,
      sender,
      time,
      text,
      topic,
      donation,
    };
    this.messages.push(message);
  }

  @view({})
  // Returns an array of messages.
  get_messages({
    from_index = 0,
    limit = 100,
  }: {
    from_index: number;
    limit: number;
  }): PostedMessage[] {
    return this.messages.toArray().slice(from_index, from_index + limit);
  }

  @view({})
  total_messages(): number {
    return this.messages.length;
  }
}

'''
'''--- contract/src/model.ts ---
export const POINT_ONE = '100000000000000000000000';

export class PostedMessage {
  premium: boolean;
  sender: string;
  time: bigint;
  text: string;
  topic: string;
  donation: string;

  constructor({ premium, sender, text, topic, donation }: PostedMessage) {
    this.premium = premium;
    this.sender = sender;
    this.text = text;
    this.topic = topic;
    this.donation = donation;
  }
}
'''
'''--- contract/tsconfig.json ---
{
  "compilerOptions": {
    "experimentalDecorators": true,
    "target": "es5",
    "noEmit": true
  },
  "exclude": [
    "node_modules"
  ],
}
'''
'''--- frontend/.cypress/cypress.config.js ---
const { defineConfig } = require("cypress");

module.exports = defineConfig({
  e2e: {
    baseUrl: "http://localhost:1234",
    specPattern: ["e2e/*.cy.*"],
    supportFile: false,
    chromeWebSecurity: false,
    env: {
      seed: "give laugh youth nice fossil common neutral since best biology swift unhappy",
    },
  },
});

'''
'''--- frontend/.cypress/e2e/postChain.cy.ts ---
// Load string from environment variable
const SEED = Cypress.env('seed');

context('Main Page', () => {
  beforeEach(() => {
    cy.visit('/');
  });

  it('should display the header', () => {
    cy.get('h1').contains('Decentralize Your Posts');
  });

  it('should log in and sign message with MyNEARWallet', () => {
    // generate a random short string
    const messageString =
      Math.random().toString(36).substring(2, 15) +
      Math.random().toString(36).substring(2, 15);

    // Log in with NEAR Wallet by clicking on the "Log in" button
    cy.get('button').contains('Log in').click();
    // Select element from left modal list titled: "MyNearWallet" and click on it
    cy.get('div').contains('MyNearWallet').click();
    // Wait for new page to load
    cy.wait(5000);
    // Click on the "Import Existing Account" button
    cy.get('button').contains('Import Existing Account').click();
    // Click on the "Recover Account" button
    cy.get('button').contains('Recover Account').click();
    // Fill in SEED from the environment variable into the input field
    cy.get('input').type(SEED);
    // Click on the "Find My Account" button
    cy.get('button').contains('Find My Account').click();
    // Wait for new page to load
    cy.wait(10000);
    // Click on the "Next" button
    cy.get('button').contains('Next').click();
    // Click on the "Connect" button
    cy.get('button').contains('Connect').click();
    // Wait for new page to load
    cy.wait(10000);
    // Check if the "Log out" and "Sign" buttons are visible
    cy.get('button').contains('Log out').should('be.visible');
    // Check if there is an input field with the label "Message:" and id="message"
    cy.get('placeholder').contains('Message').should('be.visible');
    // Check if there is a button with the label "Sign"
    cy.get('button').contains('Send').should('be.visible');
    // Check if there is a number input field for donations with a 0 minimum and 0.01 step
    cy.get('input[type=number]')
      .should('have.attr', 'min', '0')
      .and('have.attr', 'step', '0.01');
    // Fill in the "Message:" labelled input field with id="donation" with the text from the messageString variable
    cy.get('input[id=message]').type(messageString);
    // Set the donation amount to 0.01
    cy.get('input[id=donation]').type('0.01');
    // Click on the "Sign" button
    cy.get('button').contains('Send').click();
    // Wait for new page to load
    cy.wait(10000);
    // Click on the "Approve" button
    cy.get('button').contains('Approve').click();
    // Wait for new page to load
    cy.wait(10000);
    // Check if the messageString variable is visible in the "Messages" section
    cy.get('div').contains(messageString).should('be.visible');
  });
});

'''
'''--- frontend/.cypress/tsconfig.json ---
{
  "compilerOptions": {
    "target": "es5",
    "lib": ["es5", "dom"],
    "types": ["cypress"]
  },
  "include": ["**/*.ts"]
}

'''
'''--- frontend/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="./favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <link rel="apple-touch-icon" href="./favicon.ico" />
    <link rel="stylesheet" href="global.scss">
    <title>PostChain</title>
    <meta property="og:title" content="PostChain">
    <meta property="og:description" content="A PostChain feed with comments stored on the NEAR blockchain">
    <!-- <meta property="og:image" content=""> -->
    <!-- <meta property="og:url" content=""> -->
    <!-- <meta name="twitter:card" content="summary_large_image"> -->
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.
    -->
    <script src="./index.tsx" type="module"></script>
  </body>
</html>

'''
'''--- frontend/model.ts ---
import { NetworkId } from '@near-wallet-selector/core';

export interface PostedMessage {
  sender: string;
  text: string;
  time: string;
  topic?: string;

  premium?: boolean;
  donation?: string;
}

export interface viewMethodResponse {
  block_hash: string;
  block_height: number;
  logs: any[];
  result: number[];
}

export interface WalletConfig {
  createAccessKeyFor?: string;
  network?: NetworkId;
}

export interface MethodOptions {
  contractId: string;
  method: string;
  args?: object;
  gas?: string;
  deposit?: string | null;
}

'''
'''--- frontend/near-interface.ts ---
import { utils } from 'near-api-js';
import type { Wallet } from './near-wallet';
import type { Message } from './components/ui/Messages';
import { PostedMessage } from './model';

interface PostFeedConfig {
  contractId: string;
  walletToUse: Wallet;
}

class PostFeed {
  contractId: string;
  wallet: Wallet;

  constructor({ contractId, walletToUse }: PostFeedConfig) {
    this.contractId = contractId;
    this.wallet = walletToUse;
  }

  async getMessages(): Promise<PostedMessage[]> {
    const result = await this.wallet.viewMethod({
      contractId: this.contractId,
      method: 'get_messages',
    });

    return result.reverse();
  }

  async getMessagesCount(): Promise<number> {
    return await this.wallet.viewCountMethod({
      contractId: this.contractId,
      method: 'total_messages',
    });
  }

  async addMessage(
    message: string,
    topic: string,
    donation: string,
  ): Promise<Message> {
    const deposit = utils.format.parseNearAmount(donation) || '0';
    return await this.wallet.callMethod({
      contractId: this.contractId,
      method: 'add_message',
      args: { text: message, topic: topic, donation: donation },
      deposit,
    });
  }
}

export { PostFeed };

'''
'''--- frontend/near-wallet.ts ---
import { providers } from 'near-api-js';
import '@near-wallet-selector/modal-ui/styles.css';
import { setupModal } from '@near-wallet-selector/modal-ui';
// @ts-ignore
import LedgerIconUrl from '@near-wallet-selector/ledger/assets/ledger-icon.png';
// @ts-ignore
import MyNearIconUrl from '@near-wallet-selector/my-near-wallet/assets/my-near-wallet-icon.png';
import { NetworkId, setupWalletSelector } from '@near-wallet-selector/core';
import { setupLedger } from '@near-wallet-selector/ledger';
import { setupMyNearWallet } from '@near-wallet-selector/my-near-wallet';

import {
  PostedMessage,
  WalletConfig,
  MethodOptions,
  viewMethodResponse,
} from './model';
import type { WalletSelector } from '@near-wallet-selector/core';

const THIRTY_TGAS = '30000000000000';
const NO_DEPOSIT = '0';

export class Wallet {
  walletSelector!: WalletSelector;
  wallet: any;
  network: NetworkId;
  createAccessKeyFor: string | undefined | null;
  accountId: string | undefined | null;

  constructor({
    createAccessKeyFor = undefined,
    network = 'testnet',
  }: WalletConfig) {
    this.createAccessKeyFor = createAccessKeyFor;
    this.network = network;
  }

  async startUp(): Promise<boolean> {
    this.walletSelector = await setupWalletSelector({
      network: this.network,
      modules: [
        setupMyNearWallet({ iconUrl: MyNearIconUrl }),
        setupLedger({ iconUrl: LedgerIconUrl }),
      ],
    });

    const isSignedIn = this.walletSelector.isSignedIn();

    if (isSignedIn) {
      this.wallet = await this.walletSelector.wallet();
      this.accountId =
        this.walletSelector.store.getState().accounts[0].accountId;
    }

    return isSignedIn;
  }

  signIn(): void {
    const description = 'Please select a wallet to sign in.';
    // Check if this.createAccessKeyFor is defined and not null
    if (this.createAccessKeyFor == null) {
      // It's undefined or null, throw an error
      throw new Error('createAccessKeyFor is not defined.');
    }
    const modal = setupModal(this.walletSelector, {
      contractId: this.createAccessKeyFor,
      description,
    });
    modal.show();
  }

  signOut(): void {
    this.wallet.signOut();
    this.wallet = this.accountId = this.createAccessKeyFor = null;
    window.location.replace(window.location.origin + window.location.pathname);
  }

  private getProvider(): providers.JsonRpcProvider {
    const { network } = this.walletSelector.options;
    return new providers.JsonRpcProvider({ url: network.nodeUrl });
  }

  async viewMethod({
    contractId,
    method,
    args = {},
  }: MethodOptions): Promise<PostedMessage[]> {
    const provider = this.getProvider();

    let res = await provider.query({
      request_type: 'call_function',
      account_id: contractId,
      method_name: method,
      args_base64: Buffer.from(JSON.stringify(args)).toString('base64'),
      finality: 'optimistic',
    });

    return JSON.parse(
      Buffer.from((res as viewMethodResponse).result).toString(),
    );
  }

  async viewCountMethod({
    contractId,
    method,
    args = {},
  }: MethodOptions): Promise<number> {
    const provider = this.getProvider();

    let res = await provider.query({
      request_type: 'call_function',
      account_id: contractId,
      method_name: method,
      args_base64: Buffer.from(JSON.stringify(args)).toString('base64'),
      finality: 'optimistic',
    });

    return JSON.parse(
      Buffer.from((res as viewMethodResponse).result).toString(),
    );
  }

  async callMethod({
    contractId,
    method,
    args = {},
    gas = THIRTY_TGAS,
    deposit = NO_DEPOSIT,
  }: MethodOptions): Promise<any> {
    const outcome = await this.wallet.signAndSendTransaction({
      signerId: this.accountId!,
      receiverId: contractId,
      actions: [
        {
          type: 'FunctionCall',
          params: {
            methodName: method,
            args,
            gas,
            deposit,
          },
        },
      ],
    });

    return providers.getTransactionLastResult(outcome);
  }

  async getTransactionResult(txhash: string): Promise<any> {
    const provider = this.getProvider();

    const transaction = await provider.txStatus(txhash, 'unnused');
    return providers.getTransactionLastResult(transaction);
  }
}

'''
'''--- frontend/package.json ---
{
  "name": "my-near-app",
  "version": "1.0.0",
  "license": "(MIT AND Apache-2.0)",
  "scripts": {
    "start": "./start.sh",
    "start:headless": "env-cmd -f '../contract/neardev/dev-account.env' parcel index.html",
    "build": "parcel build index.html --public-url ./",
    "test:e2e": "yarn start:headless & yarn cypress:run",
    "cypress:run": "cd .cypress && cypress run",
    "cypress:open": "cypress open --browser chromium"
  },
  "devDependencies": {
    "@babel/core": "^7.18.2",
    "@babel/preset-env": "^7.18.2",
    "@babel/preset-react": "^7.17.12",
    "@parcel/transformer-sass": "2.6.0",
    "@types/lodash": "^4.14.195",
    "@types/node": "^18.6.2",
    "cypress": "^11.2.0",
    "domain-browser": "^3.5.0",
    "env-cmd": "^10.1.0",
    "nodemon": "^2.0.16",
    "parcel": "2.6.0",
    "process": "^0.11.10",
    "react-test-renderer": "^18.1.0",
    "ts-node": "^10.8.0",
    "typescript": "^4.7.2"
  },
  "dependencies": {
    "@near-wallet-selector/core": "^7.0.0",
    "@near-wallet-selector/ledger": "^7.0.0",
    "@near-wallet-selector/math-wallet": "^7.0.0",
    "@near-wallet-selector/meteor-wallet": "^7.0.0",
    "@near-wallet-selector/modal-ui": "^7.0.0",
    "@near-wallet-selector/my-near-wallet": "^7.0.0",
    "@near-wallet-selector/near-wallet": "^7.0.0",
    "@near-wallet-selector/nightly": "^7.0.0",
    "@near-wallet-selector/nightly-connect": "^7.0.0",
    "@near-wallet-selector/sender": "^7.0.0",
    "@near-wallet-selector/wallet-connect": "^7.0.0",
    "near-api-js": "^0.44.2",
    "prop-types": "^15.8.1",
    "react": "^18.1.0",
    "react-dom": "^18.1.0",
    "regenerator-runtime": "^0.13.9"
  },
  "resolutions": {
    "@babel/preset-env": "7.13.8"
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

'''
'''--- frontend/start.sh ---
#!/bin/sh

GREEN='\033[1;32m'
NC='\033[0m' # No Color

CONTRACT_DIRECTORY=../contract
DEV_ACCOUNT_FILE="${CONTRACT_DIRECTORY}/neardev/dev-account.env"

start () {
  echo The app is starting!
  env-cmd -f $DEV_ACCOUNT_FILE parcel index.html --open
}

alert () {
  echo "======================================================"
  echo "It looks like you forgot to deploy your contract"
  echo ">> Run ${GREEN}'npm run deploy'${NC} from the 'root' directory"
  echo "======================================================"
}

if [ -f "$DEV_ACCOUNT_FILE" ]; then
  start
else
  alert
fi

'''
'''--- integration-tests/package.json ---
{
  "name": "integration-tests",
  "version": "1.0.0",
  "license": "(MIT AND Apache-2.0)",
  "scripts": {
    "test": "ava"
  },
  "devDependencies": {
    "@types/bn.js": "^5.1.0",
    "@types/node": "^18.6.2",
    "ava": "^4.2.0",
    "near-workspaces": "^3.2.1",
    "ts-node": "^10.8.0",
    "typescript": "^4.7.2"
  },
  "dependencies": {}
}

'''
'''--- integration-tests/src/main.ava.ts ---
import { Worker, NEAR, NearAccount } from 'near-workspaces';
import anyTest, { TestFn } from 'ava';
import { PostedMessage } from '../../contract/src/model';

const test = anyTest as TestFn<{
  worker: Worker;
  accounts: Record<string, NearAccount>;
}>;

test.beforeEach(async (t) => {
  // Init the worker and start a Sandbox server
  const worker = await Worker.init();

  // deploy contract
  const root = worker.rootAccount;

  // some test accounts
  const alice = await root.createSubAccount('alice', {
    initialBalance: NEAR.parse('30 N').toJSON(),
  });
  const contract = await root.createSubAccount('contract', {
    initialBalance: NEAR.parse('30 N').toJSON(),
  });

  // Get wasm file path from package.json test script in folder above
  await contract.deploy(process.argv[2]);

  // Save state for test runs, it is unique for each test
  t.context.worker = worker;
  t.context.accounts = { root, contract, alice };
});

test.afterEach(async (t) => {
  // Stop Sandbox server
  await t.context.worker.tearDown().catch((error) => {
    console.log('Failed to stop the Sandbox:', error);
  });
});

test('send one message and retrieve it', async (t) => {
  const { root, contract } = t.context.accounts;

  await root.call(contract, 'add_message', {
    text: 'aloha',
    topic: '#hey',
    donation: '0',
  });
  const messages = (await contract.view('get_messages')) as PostedMessage[];

  t.is(messages.length, 1);
  t.is(messages[0].premium, false);
  t.is(messages[0].sender, root.accountId);
  t.is(messages[0].text, 'aloha');
  t.is(messages[0].topic, '#hey');
  t.is(messages[0].donation, '0');
  t.true(typeof messages[0].time === 'bigint');
});

test('send two messages and expect two total', async (t) => {
  const { root, contract, alice } = t.context.accounts;
  await root.call(contract, 'add_message', {
    text: 'aloha',
    topic: '#hey',
    donation: '0',
  });
  await alice.call(
    contract,
    'add_message',
    { text: 'hola', topic: '#hola', donation: '1' },
    { attachedDeposit: NEAR.parse('1') },
  );

  const total_messages = await contract.view('total_messages');
  t.is(total_messages, 2);

  const messages = (await contract.view('get_messages')) as PostedMessage[];

  t.is(messages.length, 2);
  t.is(messages[0].premium, false);
  t.is(messages[0].sender, root.accountId);
  t.is(messages[0].text, 'aloha');
  t.is(messages[0].topic, '');
  t.is(messages[0].donation, '');
  t.true(typeof messages[0].time === 'bigint');

  t.is(messages[1].premium, true);
  t.is(messages[1].sender, alice.accountId);
  t.is(messages[1].text, 'hola');
  t.is(messages[1].topic, '');
  t.is(messages[1].donation, '');
  t.true(typeof messages[1].time === 'bigint');
});

'''
'''--- package.json ---
{
  "name": "post-chain",
  "homepage": ".",
  "version": "1.0.0",
  "license": "(MIT AND Apache-2.0)",
  "scripts": {
    "start": "cd frontend && yarn start",
    "deploy": "cd contract && yarn deploy",
    "build": "yarn build:contract && yarn build:web",
    "build:web": "cd frontend && yarn build",
    "build:contract": "cd contract && yarn build",
    "test": "yarn build:contract && yarn test:integration && yarn test:e2e",
    "test:unit": "cd contract && yarn test",
    "test:integration": "cd integration-tests && yarn test -- -- \"./contract/build/contract.wasm\"",
    "test:e2e": "cd frontend && yarn test:e2e",
    "postinstall": "cd frontend && yarn install && cd .. && cd integration-tests && yarn install && cd .. && cd contract && yarn install"
  },
  "devDependencies": {
    "@types/react": "^18.2.15",
    "@types/react-dom": "^18.2.7",
    "@typescript-eslint/eslint-plugin": "^6.0.0",
    "@typescript-eslint/parser": "^6.0.0",
    "eslint": "^8.45.0",
    "near-cli": "^3.3.0",
    "prettier": "^3.0.0",
    "typescript": "^5.1.6"
  },
  "dependencies": {
    "localforage": "^1.10.0",
    "match-sorter": "^6.3.1",
    "react-router-dom": "^6.14.1",
    "sort-by": "^1.2.0"
  }
}

'''
'''--- tsconfig.json ---
{
  "compilerOptions": {
    /* Visit https://aka.ms/tsconfig to read more about this file */

    /* Projects */
    // "incremental": true,                              /* Save .tsbuildinfo files to allow for incremental compilation of projects. */
    // "composite": true,                                /* Enable constraints that allow a TypeScript project to be used with project references. */
    // "tsBuildInfoFile": "./.tsbuildinfo",              /* Specify the path to .tsbuildinfo incremental compilation file. */
    // "disableSourceOfProjectReferenceRedirect": true,  /* Disable preferring source files instead of declaration files when referencing composite projects. */
    // "disableSolutionSearching": true,                 /* Opt a project out of multi-project reference checking when editing. */
    // "disableReferencedProjectLoad": true,             /* Reduce the number of projects loaded automatically by TypeScript. */

    /* Language and Environment */
    "target": "es2016",                                  /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */
    // "lib": [],                                        /* Specify a set of bundled library declaration files that describe the target runtime environment. */
    // "jsx": "preserve",                                /* Specify what JSX code is generated. */
    // "experimentalDecorators": true,                   /* Enable experimental support for legacy experimental decorators. */
    // "emitDecoratorMetadata": true,                    /* Emit design-type metadata for decorated declarations in source files. */
    // "jsxFactory": "",                                 /* Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h'. */
    // "jsxFragmentFactory": "",                         /* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'. */
    // "jsxImportSource": "",                            /* Specify module specifier used to import the JSX factory functions when using 'jsx: react-jsx*'. */
    // "reactNamespace": "",                             /* Specify the object invoked for 'createElement'. This only applies when targeting 'react' JSX emit. */
    // "noLib": true,                                    /* Disable including any library files, including the default lib.d.ts. */
    // "useDefineForClassFields": true,                  /* Emit ECMAScript-standard-compliant class fields. */
    // "moduleDetection": "auto",                        /* Control what method is used to detect module-format JS files. */

    /* Modules */
    "module": "commonjs",                                /* Specify what module code is generated. */
    // "rootDir": "./",                                  /* Specify the root folder within your source files. */
    // "moduleResolution": "node10",                     /* Specify how TypeScript looks up a file from a given module specifier. */
    // "baseUrl": "./",                                  /* Specify the base directory to resolve non-relative module names. */
    // "paths": {},                                      /* Specify a set of entries that re-map imports to additional lookup locations. */
    // "rootDirs": [],                                   /* Allow multiple folders to be treated as one when resolving modules. */
    // "typeRoots": [],                                  /* Specify multiple folders that act like './node_modules/@types'. */
    // "types": [],                                      /* Specify type package names to be included without being referenced in a source file. */
    // "allowUmdGlobalAccess": true,                     /* Allow accessing UMD globals from modules. */
    // "moduleSuffixes": [],                             /* List of file name suffixes to search when resolving a module. */
    // "allowImportingTsExtensions": true,               /* Allow imports to include TypeScript file extensions. Requires '--moduleResolution bundler' and either '--noEmit' or '--emitDeclarationOnly' to be set. */
    // "resolvePackageJsonExports": true,                /* Use the package.json 'exports' field when resolving package imports. */
    // "resolvePackageJsonImports": true,                /* Use the package.json 'imports' field when resolving imports. */
    // "customConditions": [],                           /* Conditions to set in addition to the resolver-specific defaults when resolving imports. */
    // "resolveJsonModule": true,                        /* Enable importing .json files. */
    // "allowArbitraryExtensions": true,                 /* Enable importing files with any extension, provided a declaration file is present. */
    // "noResolve": true,                                /* Disallow 'import's, 'require's or '<reference>'s from expanding the number of files TypeScript should add to a project. */

    /* JavaScript Support */
    // "allowJs": true,                                  /* Allow JavaScript files to be a part of your program. Use the 'checkJS' option to get errors from these files. */
    // "checkJs": true,                                  /* Enable error reporting in type-checked JavaScript files. */
    // "maxNodeModuleJsDepth": 1,                        /* Specify the maximum folder depth used for checking JavaScript files from 'node_modules'. Only applicable with 'allowJs'. */

    /* Emit */
    // "declaration": true,                              /* Generate .d.ts files from TypeScript and JavaScript files in your project. */
    // "declarationMap": true,                           /* Create sourcemaps for d.ts files. */
    // "emitDeclarationOnly": true,                      /* Only output d.ts files and not JavaScript files. */
    // "sourceMap": true,                                /* Create source map files for emitted JavaScript files. */
    // "inlineSourceMap": true,                          /* Include sourcemap files inside the emitted JavaScript. */
    // "outFile": "./",                                  /* Specify a file that bundles all outputs into one JavaScript file. If 'declaration' is true, also designates a file that bundles all .d.ts output. */
    // "outDir": "./",                                   /* Specify an output folder for all emitted files. */
    // "removeComments": true,                           /* Disable emitting comments. */
    // "noEmit": true,                                   /* Disable emitting files from a compilation. */
    // "importHelpers": true,                            /* Allow importing helper functions from tslib once per project, instead of including them per-file. */
    // "importsNotUsedAsValues": "remove",               /* Specify emit/checking behavior for imports that are only used for types. */
    // "downlevelIteration": true,                       /* Emit more compliant, but verbose and less performant JavaScript for iteration. */
    // "sourceRoot": "",                                 /* Specify the root path for debuggers to find the reference source code. */
    // "mapRoot": "",                                    /* Specify the location where debugger should locate map files instead of generated locations. */
    // "inlineSources": true,                            /* Include source code in the sourcemaps inside the emitted JavaScript. */
    // "emitBOM": true,                                  /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */
    // "newLine": "crlf",                                /* Set the newline character for emitting files. */
    // "stripInternal": true,                            /* Disable emitting declarations that have '@internal' in their JSDoc comments. */
    // "noEmitHelpers": true,                            /* Disable generating custom helper functions like '__extends' in compiled output. */
    // "noEmitOnError": true,                            /* Disable emitting files if any type checking errors are reported. */
    // "preserveConstEnums": true,                       /* Disable erasing 'const enum' declarations in generated code. */
    // "declarationDir": "./",                           /* Specify the output directory for generated declaration files. */
    // "preserveValueImports": true,                     /* Preserve unused imported values in the JavaScript output that would otherwise be removed. */

    /* Interop Constraints */
    // "isolatedModules": true,                          /* Ensure that each file can be safely transpiled without relying on other imports. */
    // "verbatimModuleSyntax": true,                     /* Do not transform or elide any imports or exports not marked as type-only, ensuring they are written in the output file's format based on the 'module' setting. */
    // "allowSyntheticDefaultImports": true,             /* Allow 'import x from y' when a module doesn't have a default export. */
    "esModuleInterop": true,                             /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */
    // "preserveSymlinks": true,                         /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */
    "forceConsistentCasingInFileNames": true,            /* Ensure that casing is correct in imports. */

    /* Type Checking */
    "strict": true,                                      /* Enable all strict type-checking options. */
    // "noImplicitAny": true,                            /* Enable error reporting for expressions and declarations with an implied 'any' type. */
    // "strictNullChecks": true,                         /* When type checking, take into account 'null' and 'undefined'. */
    // "strictFunctionTypes": true,                      /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */
    // "strictBindCallApply": true,                      /* Check that the arguments for 'bind', 'call', and 'apply' methods match the original function. */
    // "strictPropertyInitialization": true,             /* Check for class properties that are declared but not set in the constructor. */
    // "noImplicitThis": true,                           /* Enable error reporting when 'this' is given the type 'any'. */
    // "useUnknownInCatchVariables": true,               /* Default catch clause variables as 'unknown' instead of 'any'. */
    // "alwaysStrict": true,                             /* Ensure 'use strict' is always emitted. */
    // "noUnusedLocals": true,                           /* Enable error reporting when local variables aren't read. */
    // "noUnusedParameters": true,                       /* Raise an error when a function parameter isn't read. */
    // "exactOptionalPropertyTypes": true,               /* Interpret optional property types as written, rather than adding 'undefined'. */
    // "noImplicitReturns": true,                        /* Enable error reporting for codepaths that do not explicitly return in a function. */
    // "noFallthroughCasesInSwitch": true,               /* Enable error reporting for fallthrough cases in switch statements. */
    // "noUncheckedIndexedAccess": true,                 /* Add 'undefined' to a type when accessed using an index. */
    // "noImplicitOverride": true,                       /* Ensure overriding members in derived classes are marked with an override modifier. */
    // "noPropertyAccessFromIndexSignature": true,       /* Enforces using indexed accessors for keys declared using an indexed type. */
    // "allowUnusedLabels": true,                        /* Disable error reporting for unused labels. */
    // "allowUnreachableCode": true,                     /* Disable error reporting for unreachable code. */

    /* Completeness */
    // "skipDefaultLibCheck": true,                      /* Skip type checking .d.ts files that are included with TypeScript. */
    "skipLibCheck": true,
    /* Skip type checking all .d.ts files. */
    "jsx": "react"
  }
}

'''