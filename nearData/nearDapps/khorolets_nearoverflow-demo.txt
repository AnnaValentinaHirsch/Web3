*GitHub Repository "khorolets/nearoverflow-demo"*

'''--- README.md ---
# nearoverflow-demo

Demo available https://khorolets.github.io/nearoverflow-demo/

Contract for this demo can be found in this repo https://github.com/khorolets/nearoverflow

'''
'''--- package.json ---
{
  "name": "nearoverflow-front",
  "version": "0.1.0",
  "homepage": "https://khorolets.github.io/nearoverflow-demo",
  "private": true,
  "dependencies": {
    "@testing-library/jest-dom": "^4.2.4",
    "@testing-library/react": "^9.3.2",
    "@testing-library/user-event": "^7.1.2",
    "bootstrap": "^4.4.1",
    "near-api-js": "^0.23.2",
    "node-sass": "^4.14.1",
    "prop-types": "^15.7.2",
    "react": "^16.13.1",
    "react-bootstrap": "^1.0.1",
    "react-dom": "^16.13.1",
    "react-redux": "^7.2.0",
    "react-router-dom": "^5.1.2",
    "react-scripts": "3.4.1",
    "redux": "^4.0.5",
    "redux-thunk": "^2.3.0",
    "semantic-ui-react": "^0.88.2"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "predeploy": "npm run build",
    "deploy": "gh-pages -d build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": "react-app"
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}
'''
'''--- public/index.html ---
<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="utf-8" />
  <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <meta name="theme-color" content="#000000" />
  <meta name="description" content="StackOverflow on NEARprotocol Example" />
  <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
  <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
  <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
  <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
  -->
  <title>NEARoverflow</title>
</head>

<body>
  <noscript>You need to enable JavaScript to run this app.</noscript>
  <div id="root"></div>
  <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
</body>

</html>
'''
'''--- public/manifest.json ---
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

'''
'''--- public/robots.txt ---
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

'''
'''--- src/App.css ---
.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

'''
'''--- src/App.js ---
import React from 'react'
import PropTypes from 'prop-types'
import { Container } from 'react-bootstrap'
import { connect } from 'react-redux'

import Header from './components/Header'

class App extends React.Component {

  static propTypes = {
    wallet: PropTypes.object.isRequired,
    nearConfig: PropTypes.object.isRequired,
    currentUser: PropTypes.object,
  }

  static defaultProps = {
    currentUser: null,
  }

  state = { questionText: '' }

  signIn = () => {
    this.props.wallet.requestSignIn(
      this.props.nearConfig.contractName,
      "NEAROverflow"
    )
  }

  signOut = () => {
    this.props.wallet.signOut()
    window.location.href = process.env.PUBLIC_URL
  }

  render() {
    console.log(process.env.NODE_ENV)
    return (
      <>
        <Header
          currentUser={this.props.currentUser}
          signIn={this.signIn}
          signOut={this.signOut}
        />
        <Container>
          {this.props.children}
        </Container>
      </>
    );
  }
}

const mapStateToProps = state => ({
  currentUser: state.commonReducer.currentUser,
  nearConfig: state.commonReducer.nearConfig,
  wallet: state.commonReducer.walletConnection,
})

export default connect(mapStateToProps, null)(App)
'''
'''--- src/App.test.js ---
import React from 'react';
import { render } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  const { getByText } = render(<App />);
  const linkElement = getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

'''
'''--- src/components/Answer/index.js ---
import React from 'react'
import PropTypes from 'prop-types'
import { connect } from 'react-redux'
import { Container, Row, Col, Card, Button, Spinner } from 'react-bootstrap'

import Box from '../Box'

class Answer extends React.Component {

  static propTypes = {
    markAsCorrect: PropTypes.func.isRequired,
    upvoteAnswer: PropTypes.func.isRequired,
    account_id: PropTypes.string.isRequired,
    content: PropTypes.string.isRequired,
    reward: PropTypes.number.isRequired,
    is_correct: PropTypes.bool.isRequired,
    id: PropTypes.number.isRequired,
    questionIsLocked: PropTypes.bool.isRequired,
    questionAuthor: PropTypes.string.isRequired,
  }

  state = { isLoading: false }

  handleMarkAsCorrect = (e) => {
    this.setState({ isLoading: true }, () => {
      this.props.markAsCorrect(this.props.id)
    })
  }

  handleUpvote = (e) => {
    this.props.upvoteAnswer(this.props.id)
  }

  render() {
    let { account_id, content, reward, is_correct } = this.props
    return (
      <Card>
        <Card.Body>
          <Container>
            <Row>
              <Col xs={2}>
                <Box
                  active={is_correct}
                  title="Reward"
                  number={reward}
                />
                <Button
                  block
                  className="upvote"
                  variant="outline-dark"
                  sime='sm'
                  disabled={!this.props.currentUser}
                  onClick={this.handleUpvote}
                >
                  Upvote 1 â“ƒ
                </Button>
              </Col>
              <Col>
                {
                  !this.props.questionIsLocked &&
                  this.props.currentUser &&
                  this.props.currentUser.accountId === this.props.questionAuthor &&
                  <Button
                    className="mark-as-correct"
                    variant="outline-success"
                    size='sm'
                    onClick={this.handleMarkAsCorrect}
                  >
                    {this.state.isLoading ?
                      <Spinner animation="border" size="sm" />
                      : "Mark as correct"
                    }
                  </Button>
                }
                <Card.Text className="author">@{account_id}</Card.Text>
                <Card.Title>{content}</Card.Title>
              </Col>
            </Row>
          </Container>
        </Card.Body>
      </Card>
    )
  }
}

const mapStateToProps = state => ({
  contract: state.commonReducer.contract,
  currentUser: state.commonReducer.currentUser,
})

export default connect(mapStateToProps, null)(Answer)
'''
'''--- src/components/AnswerForm/index.js ---
import React from 'react'
import PropTypes from 'prop-types'
import { connect } from 'react-redux'
import { Row, Col, Form, Button, Card, Alert } from 'react-bootstrap'

import { BOATLOAD_OF_GAS, ANSWER_PRICE } from '../../lib/constants'

class AnswerForm extends React.Component {

  static propTypes = {
    contract: PropTypes.object.isRequired,
    questionId: PropTypes.string.isRequired,
    currentUser: PropTypes.object,
  }

  static defaultProps = {
    currentUser: null,
  }

  state = { content: '' }

  handleSubmit = (e) => {
    e.preventDefault()

    if (this.state.content.length > 0) {
      this.props.contract.create_answer(
        {
          question_id: parseInt(this.props.questionId, 10),
          content: this.state.content,
        },
        BOATLOAD_OF_GAS,
        ANSWER_PRICE
      ).then(() => {
        this.setState({ content: '' })
      })
    }
    return false
  }

  render() {
    return (
      <Row>
        <Col>
          <Card className="form-card">
            <Card.Body>
              <Card.Title>Post Answer</Card.Title>
              <Form onSubmit={this.handleSubmit}>
                <Form.Group>
                  <Form.Control
                    type="text"
                    placeholder={
                      this.props.currentUser
                        ? "Answer"
                        : "You have to be authenticated to post an answer"
                    }
                    value={this.state.content}
                    disabled={!this.props.currentUser}
                    onChange={(e) => this.setState({ content: e.target.value })}
                  />
                </Form.Group>
                <Alert variant='secondary'>
                  To post an answer costs 1 â“ƒ but then you have a chance to grab the question reward.
                  </Alert>
                <Button
                  type="submit"
                  variant="outline-dark"
                  disabled={!this.props.currentUser}
                >
                  Submit answer
                </Button>
              </Form>
            </Card.Body>
          </Card>
        </Col>
      </Row>
    )
  }
}

const mapStateToProps = state => ({
  currentUser: state.commonReducer.currentUser,
  contract: state.commonReducer.contract,
})

export default connect(mapStateToProps, null)(AnswerForm)
'''
'''--- src/components/Box/index.js ---
import React from 'react'
import PropTypes from 'prop-types'
import Big from 'big.js'

const Box = ({ title, number, active, className }) => (
  <div className={`box ${active ? 'active' : ''} ${className}`}>
    <span>{title}</span>
    <span className="number">{Big(number).times(10 ** -24).toFixed(0)} â“ƒ</span>
  </div>
)

Box.propTypes = {
  title: PropTypes.string.isRequired,
  number: PropTypes.number.isRequired,
  active: PropTypes.bool,
  className: PropTypes.string,
}

Box.defaultProps = {
  active: false,
  className: "",
}

export default Box
'''
'''--- src/components/Header/index.js ---
import React from 'react'
import PropTypes from 'prop-types'
import { Link } from 'react-router-dom'
import { Navbar, Button } from 'react-bootstrap'

const Header = ({ currentUser, signIn, signOut }) => (
  <Navbar fixed="top" bg="dark" variant="dark" className="justify-content-between">
    <Navbar.Brand>
      <Link to="/">NEARoverflow</Link>
    </Navbar.Brand>

    {currentUser &&
      <Button
        variant="outline-light"
        onClick={signOut}>
        â“ƒ Log out
        </Button>
    }
    {!currentUser &&
      <Button
        variant="outline-light"
        onClick={signIn}>
        â“ƒ Log in
        </Button>
    }
  </Navbar>
)

Header.propTypes = {
  signIn: PropTypes.func.isRequired,
  signOut: PropTypes.func.isRequired,
  currentUser: PropTypes.object,
}

Header.defaultProps = {
  currentUser: null,
}

export default Header
'''
'''--- src/components/QuestionDetail/index.js ---
import React from 'react'
import PropTypes from 'prop-types'
import Big from 'big.js'
import { connect } from 'react-redux'
import { Row, Col, Card, Container } from 'react-bootstrap'
import { withRouter } from 'react-router-dom'

import { setQuestions } from '../../modules/questions'

import Answer from '../Answer'
import AnswerForm from '../AnswerForm'
import Box from '../Box'
import { BOATLOAD_OF_GAS } from '../../lib/constants'

class QuestionDetail extends React.Component {

  static propTypes = {
    setQuestions: PropTypes.func.isRequired,
    contract: PropTypes.object.isRequired,
    currentUser: PropTypes.object,
    questions: PropTypes.object
  }

  static defaultProps = {
    questions: null,
    currentUser: null,
  }

  componentDidMount() {
    if (!this.props.questions) {
      this.props.contract.list_questions()
        .then(response => this.props.setQuestions(response))
    }
  }

  markAsCorrect = (answerId) => {
    let { questionId } = this.props.match.params
    let question = this.props.questions[questionId]
    let answer = question.answers.filter(ans => ans.id === answerId)[0]

    if (question.answers.filter(ans => ans.is_correct === true).length > 0) {
      alert("ERROR: This question already has correct answer")
      return false
    }

    if (
      this.props.currentUser &&
      this.props.currentUser.accountId === question.author_account_id &&
      this.props.currentUser.accountId !== answer.account_id
    ) {
      this.props.contract.set_correct_answer(
        { question_id: parseInt(questionId, 10), answer_id: answerId }
      ).then(() => {
        this.props.contract.list_questions()
          .then(response => this.props.setQuestions(response))
      })
    } else {
      alert("ERROR: You're not allowed to perform this action")
    }
    return false
  }

  upvote = (answerId) => {
    let { questionId } = this.props.match.params

    this.props.contract.upvote_answer(
      {
        question_id: parseInt(questionId, 10),
        answer_id: answerId
      },
      BOATLOAD_OF_GAS,
      Big(1).times(10 ** 24).toFixed()
    )
  }

  render() {
    let { questionId } = this.props.match.params
    if (!this.props.questions) return null
    let props = this.props.questions[questionId]
    if (!props) return null
    let questionIsLocked = props.answers.filter(ans => ans.is_correct === true).length > 0
    return (
      <>
        <Row>
          <Col>
            <Card>
              <Card.Body>
                <Container>
                  <Row>
                    <Col xs={2}>
                      <Box
                        active={questionIsLocked}
                        title="Reward"
                        number={props.reward}
                      />
                    </Col>
                    <Col>
                      <Card.Text className="author">@{props.author_account_id}</Card.Text>
                      <Card.Title>{props.content}</Card.Title>
                    </Col>
                  </Row>
                </Container>
              </Card.Body>
            </Card>
          </Col>
        </Row>
        {props.answers.length > 0 &&
          <Row>
            <Col>
              <h2>Answers: </h2>
              {props.answers.map(answer =>
                <Answer
                  questionIsLocked={questionIsLocked}
                  questionAuthor={props.author_account_id}
                  markAsCorrect={this.markAsCorrect}
                  upvoteAnswer={this.upvote}
                  key={`answer_${answer.id}`}
                  {...answer}
                />
              )}
            </Col>
          </Row>
        }
        <AnswerForm questionId={this.props.match.params.questionId} />
      </>
    )
  }
}

const mapStateToProps = state => ({
  contract: state.commonReducer.contract,
  currentUser: state.commonReducer.currentUser,
  questions: state.questionsReducer.questions
})

export default withRouter(
  connect(
    mapStateToProps,
    {
      setQuestions
    }
  )(QuestionDetail)
)
'''
'''--- src/components/QuestionForm/index.js ---
import React from 'react'
import PropTypes from 'prop-types'
import { connect } from 'react-redux'
import { Container, Row, Col, Form, Button, Jumbotron } from 'react-bootstrap'

import {
  QUESTION_MIN_PRICE,
  BOATLOAD_OF_GAS,
} from '../../lib/constants'

class QuestionForm extends React.Component {

  static propTypes = {
    contract: PropTypes.object.isRequired,
    currentUser: PropTypes.object,
  }

  static defaultProps = {
    currentUser: null,
  }

  state = { questionText: '' }

  handleSubmit = (e) => {
    e.preventDefault()
    if (this.state.questionText.length > 0) {
      this.props.contract.create_question(
        { content: this.state.questionText, reward: QUESTION_MIN_PRICE },
        BOATLOAD_OF_GAS,
        QUESTION_MIN_PRICE,
      )
    }
    return false
  }

  render() {
    return (
      <Jumbotron>
        <Container>
          <Row>
            <Col>
              <h1>Ask a question!</h1>
              <p>
                Simply ask a question and give the reward to the correct answer (10 â“ƒ)
              </p>
              <Form onSubmit={this.handleSubmit}>
                <Form.Group>
                  <Form.Control
                    type="text"
                    value={this.state.questionText}
                    onChange={
                      (e) => { this.setState({ questionText: e.target.value }) }
                    }
                    placeholder="Post new quesion"
                  />
                </Form.Group>
                <Button type='submit' variant="outline-dark">Post new quetsion</Button>
              </Form>
            </Col>
          </Row>
        </Container>
      </Jumbotron>
    )
  }
}

const mapStateToProps = state => ({
  contract: state.commonReducer.contract,
  currentUser: state.commonReducer.currentUser,
})

export default connect(mapStateToProps, null)(QuestionForm)
'''
'''--- src/components/QuestionsList/index.js ---
import React from 'react'
import PropTypes from 'prop-types'
import { connect } from 'react-redux'
import { Row, Col } from 'react-bootstrap'

import { setQuestions } from '../../modules/questions'
import QuestionForm from '../QuestionForm'
import QuestionListItem from './item'

class QuestionList extends React.Component {

  static propTypes = {
    setQuestions: PropTypes.func.isRequired,
    contract: PropTypes.object.isRequired,
    questions: PropTypes.object,
    currentUser: PropTypes.object
  }

  static defaultProps = {
    questions: null,
    currentUser: null,
  }

  componentDidMount() {
    this.props.contract.list_questions()
      .then(response => this.props.setQuestions(response))
  }

  render() {
    return (
      <React.Fragment>
        {this.props.currentUser && <QuestionForm />}
        {this.props.questions &&
          <Row>
            <Col><h2>Questions:</h2></Col>
          </Row>
        }
        <Row>
          <Col>
            {
              this.props.questions &&
              Object
                .keys(this.props.questions)
                .slice(0)
                .reverse()
                .map(questionId =>
                  <QuestionListItem
                    key={`question_${questionId}`}
                    questionId={questionId}
                    {...this.props.questions[questionId]} />
                )
            }
          </Col>
        </Row>
      </React.Fragment>
    )
  }
}

const mapStateToProps = state => ({
  contract: state.commonReducer.contract,
  currentUser: state.commonReducer.currentUser,
  questions: state.questionsReducer.questions,
})

export default connect(
  mapStateToProps,
  {
    setQuestions,
  }
)(QuestionList)
'''
'''--- src/components/QuestionsList/item.js ---
import React from 'react'
import PropTypes from 'prop-types'
import { Link } from 'react-router-dom'
import { Card, Container, Row, Col } from 'react-bootstrap'

import Box from '../Box'

const QuestionListItem = ({ questionId, answers, reward, author_account_id, content }) => (
  <Card>
    <Card.Body>
      <Container>
        <Row>
          <Col xs={2}>
            <Box
              active={answers.filter(ans => ans.is_correct === true).length > 0}
              title="Reward"
              number={reward}
            />
          </Col>
          <Col>
            <Card.Text className="author">@{author_account_id}</Card.Text>
            <Card.Title>
              <Link to={`/${questionId}`}>{content}</Link>
            </Card.Title>
          </Col>
          <Col xs={2}>
            <div className="box">
              <span>Answers:</span>
              <span className="number">{answers.length}</span>
            </div>
          </Col>
        </Row>
      </Container>
    </Card.Body>
  </Card>
)

QuestionListItem.propTypes = {
  questionId: PropTypes.string.isRequired,
  reward: PropTypes.number.isRequired,
  author_account_id: PropTypes.string.isRequired,
  content: PropTypes.string.isRequired,
  answers: PropTypes.arrayOf(PropTypes.object),
}

QuestionListItem.defaultProps = {
  answers: [],
}

export default QuestionListItem

'''
'''--- src/config.js ---
const CONTRACT_NAME = process.env.CONTRACT_NAME || 'nearoverflow.testnet'

function getConfig(env) {
    switch (env) {
        case 'production':
        case 'development':
            return {
                networkId: 'default',
                nodeUrl: 'https://rpc.nearprotocol.com',
                contractName: CONTRACT_NAME,
                walletUrl: 'https://wallet.nearprotocol.com',
                helperUrl: 'https://near-contract-helper.onrender.com'
            }
        case 'staging':
            return {
                networkId: 'staging',
                nodeUrl: 'https://staging-rpc.nearprotocol.com/',
                contractName: CONTRACT_NAME,
                walletUrl: 'https://near-wallet-staging.onrender.com',
                helperUrl: 'https://near-contract-helper-staging.onrender.com'
            }
        case 'local':
            return {
                networkId: 'local',
                nodeUrl: 'http://localhost:3030',
                keyPath: `${process.env.HOME}/.near/validator_key.json`,
                walletUrl: 'http://localhost:4000/wallet',
                contractName: CONTRACT_NAME
            }
        case 'test':
        case 'ci':
            return {
                networkId: 'shared-test',
                nodeUrl: 'http://shared-test.nearprotocol.com:3030',
                contractName: CONTRACT_NAME,
                masterAccount: 'test.near'
            }
        case 'ci-staging':
            return {
                networkId: 'shared-test-staging',
                nodeUrl: 'http://staging-shared-test.nearprotocol.com:3030',
                contractName: CONTRACT_NAME,
                masterAccount: 'test.near'
            }
        case 'tatooine':
            return {
                networkId: 'tatooine',
                nodeUrl: 'https://rpc.tatooine.nearprotocol.com',
                contractName: CONTRACT_NAME,
                walletUrl: 'https://wallet.tatooine.nearprotocol.com'
            }
        default:
            throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`)
    }
}

module.exports = getConfig

'''
'''--- src/index.css ---
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

'''
'''--- src/index.js ---
import React from 'react'
import ReactDOM from 'react-dom'
import { createStore, applyMiddleware } from 'redux'
import { Provider } from 'react-redux'
import thunkMiddleware from 'redux-thunk'
import * as nearAPI from 'near-api-js'

// import * as serviceWorker from './serviceWorker';
import Routes from './routes'
import getConfig from './config.js'
import reducers from './modules'

import './custom.scss'

const createStoreWithMiddleware = applyMiddleware(thunkMiddleware)(createStore)

// Initializing contract
async function initContract() {
  const nearConfig = getConfig('development')

  // Initializing connection to the NEAR DevNet
  const near = await nearAPI.connect({
    deps: {
      keyStore: new nearAPI.keyStores.BrowserLocalStorageKeyStore()
    },
    ...nearConfig
  })

  // Needed to access wallet
  const walletConnection = new nearAPI.WalletConnection(near)

  // Load in account data
  let currentUser
  if (walletConnection.getAccountId()) {
    currentUser = {
      accountId: walletConnection.getAccountId(),
      balance: (await walletConnection.account().state()).amount
    }
  }

  // Initializing our contract APIs by contract name and configuration
  const contract = await new nearAPI.Contract(walletConnection.account(), nearConfig.contractName, {
    // View methods are read-only â€“ they don't modify the state, but usually return some value
    viewMethods: ['list_questions'],
    // Change methods can modify the state, but you don't receive the returned value when called
    changeMethods: [
      'create_question',
      'create_answer',
      'upvote_answer',
      'set_correct_answer',
    ],
    // Sender is the account ID to initialize transactions.
    // getAccountId() will return empty string if user is still unauthorized
    sender: walletConnection.getAccountId()
  })

  return { contract, currentUser, nearConfig, walletConnection }
}

window.nearInitPromise = initContract()
  .then(initialProps => {
    ReactDOM.render(
      <React.StrictMode>
        <Provider store={createStoreWithMiddleware(reducers, { commonReducer: initialProps })}>
          <Routes />
        </Provider>
      </React.StrictMode>,
      document.getElementById('root')
    )
  });

// If you want your app to work offline and load faster, you can change
// unregister() to register() below. Note this comes with some pitfalls.
// Learn more about service workers: https://bit.ly/CRA-PWA
// serviceWorker.unregister();

'''
'''--- src/lib/constants.js ---
import Big from 'big.js'

export const QUESTION_MIN_PRICE = Big(10).times(10 ** 24).toFixed();
export const ANSWER_PRICE = Big(1).times(10 ** 24).toFixed()
export const BOATLOAD_OF_GAS = Big(1).times(10 ** 16).toFixed()
'''
'''--- src/logo.svg ---
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3">
    <g fill="#61DAFB">
        <path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/>
        <circle cx="420.9" cy="296.5" r="45.7"/>
        <path d="M520.5 78.1z"/>
    </g>
</svg>

'''
'''--- src/modules/common.js ---
const INITIAL_STATE = {
  contract: null,
}

export default (state = INITIAL_STATE, action) => {
  return state
}
'''
'''--- src/modules/index.js ---
import { combineReducers } from 'redux'

import commonReducer from './common'
import questionsReducer from './questions'

export default combineReducers({
  commonReducer,
  questionsReducer,
})
'''
'''--- src/modules/questions.js ---
const initialState = {
  questions: null,
}

const SET_QUESTIONS = 'Nearoverflow/questions/set_questions'

export default (state = initialState, action) => {
  switch (action.type) {
    case SET_QUESTIONS:
      return {
        ...state,
        questions: action.payload,
      }
    default:
      return state
  }
}

export const setQuestions = questions => dispatch => {
  dispatch({
    type: SET_QUESTIONS,
    payload: questions,
  })
}
'''
'''--- src/routes.js ---
import React from 'react'
import {
  HashRouter as Router,
  Switch,
  Route,
} from 'react-router-dom'

import App from './App'
import QuestionsList from './components/QuestionsList'
import QuestionDetail from './components/QuestionDetail'

export default () => (
  <Router basename={process.env.PUBLIC_URL}>
    <App>
      <Switch>
        <Route exact path='/'>
          <QuestionsList />
        </Route>
        <Route path='/:questionId'>
          <QuestionDetail />
        </Route>
      </Switch>
    </App>
  </Router >
)
'''
'''--- src/serviceWorker.js ---
// This optional code is used to register a service worker.
// register() is not called by default.

// This lets the app load faster on subsequent visits in production, and gives
// it offline capabilities. However, it also means that developers (and users)
// will only see deployed updates on subsequent visits to a page, after all the
// existing tabs open on the page have been closed, since previously cached
// resources are updated in the background.

// To learn more about the benefits of this model and instructions on how to
// opt-in, read https://bit.ly/CRA-PWA

const isLocalhost = Boolean(
  window.location.hostname === 'localhost' ||
    // [::1] is the IPv6 localhost address.
    window.location.hostname === '[::1]' ||
    // 127.0.0.0/8 are considered localhost for IPv4.
    window.location.hostname.match(
      /^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/
    )
);

export function register(config) {
  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {
    // The URL constructor is available in all browsers that support SW.
    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);
    if (publicUrl.origin !== window.location.origin) {
      // Our service worker won't work if PUBLIC_URL is on a different origin
      // from what our page is served on. This might happen if a CDN is used to
      // serve assets; see https://github.com/facebook/create-react-app/issues/2374
      return;
    }

    window.addEventListener('load', () => {
      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;

      if (isLocalhost) {
        // This is running on localhost. Let's check if a service worker still exists or not.
        checkValidServiceWorker(swUrl, config);

        // Add some additional logging to localhost, pointing developers to the
        // service worker/PWA documentation.
        navigator.serviceWorker.ready.then(() => {
          console.log(
            'This web app is being served cache-first by a service ' +
              'worker. To learn more, visit https://bit.ly/CRA-PWA'
          );
        });
      } else {
        // Is not localhost. Just register service worker
        registerValidSW(swUrl, config);
      }
    });
  }
}

function registerValidSW(swUrl, config) {
  navigator.serviceWorker
    .register(swUrl)
    .then(registration => {
      registration.onupdatefound = () => {
        const installingWorker = registration.installing;
        if (installingWorker == null) {
          return;
        }
        installingWorker.onstatechange = () => {
          if (installingWorker.state === 'installed') {
            if (navigator.serviceWorker.controller) {
              // At this point, the updated precached content has been fetched,
              // but the previous service worker will still serve the older
              // content until all client tabs are closed.
              console.log(
                'New content is available and will be used when all ' +
                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'
              );

              // Execute callback
              if (config && config.onUpdate) {
                config.onUpdate(registration);
              }
            } else {
              // At this point, everything has been precached.
              // It's the perfect time to display a
              // "Content is cached for offline use." message.
              console.log('Content is cached for offline use.');

              // Execute callback
              if (config && config.onSuccess) {
                config.onSuccess(registration);
              }
            }
          }
        };
      };
    })
    .catch(error => {
      console.error('Error during service worker registration:', error);
    });
}

function checkValidServiceWorker(swUrl, config) {
  // Check if the service worker can be found. If it can't reload the page.
  fetch(swUrl, {
    headers: { 'Service-Worker': 'script' },
  })
    .then(response => {
      // Ensure service worker exists, and that we really are getting a JS file.
      const contentType = response.headers.get('content-type');
      if (
        response.status === 404 ||
        (contentType != null && contentType.indexOf('javascript') === -1)
      ) {
        // No service worker found. Probably a different app. Reload the page.
        navigator.serviceWorker.ready.then(registration => {
          registration.unregister().then(() => {
            window.location.reload();
          });
        });
      } else {
        // Service worker found. Proceed as normal.
        registerValidSW(swUrl, config);
      }
    })
    .catch(() => {
      console.log(
        'No internet connection found. App is running in offline mode.'
      );
    });
}

export function unregister() {
  if ('serviceWorker' in navigator) {
    navigator.serviceWorker.ready
      .then(registration => {
        registration.unregister();
      })
      .catch(error => {
        console.error(error.message);
      });
  }
}

'''
'''--- src/setupTests.js ---
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom/extend-expect';

'''