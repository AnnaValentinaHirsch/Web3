*GitHub Repository "jkeohan/near-voting-dapp"*

'''--- .dependabot/config.yml ---
version: 1
update_configs:
  - package_manager: "javascript"
    directory: "/"
    update_schedule: "live"
    automerged_updates:
      - match:
          dependency_type: "development"
          update_type: "all"
      - match:
          dependency_type: "production"
          update_type: "all"

'''
'''--- .gitpod.yml ---
image:
  file: .gitpod.Dockerfile
# Options to prebuild the image after github events and set notifications/badges
github:
  prebuilds:
    # enable for the master/default branch (defaults to true)
    master: true
    # enable for pull requests coming from this repo (defaults to true)
    pullRequests: true
    # enable for pull requests coming from forks (defaults to false)
    pullRequestsFromForks: true
    # add a check to pull requests (defaults to true)
    addCheck: true
    # add a "Review in Gitpod" button as a comment to pull requests (defaults to false)
    addComment: true
    # add a "Review in Gitpod" button to the pull request's description (defaults to false)
    addBadge: false
    # add a label once the prebuild is ready to pull requests (defaults to false)
    addLabel: false

# List the start up tasks. You can start them in parallel in multiple terminals. See https://www.gitpod.io/docs/config-start-tasks/
tasks:
  - before: nvm use default
    init: yarn
    command: gp open README-Gitpod.md && yarn dev

ports:
  - port: 1234
    onOpen: open-browser

'''
'''--- .travis.yml ---
language: node_js
os:
  - linux
  - osx
  - windows
node_js:
  - 12
env:
  - NODE_ENV=ci YARN_GPG=no
  - NODE_ENV=ci-betanet YARN_GPG=no
cache: yarn
script:
  - yarn build
  - yarn test

'''
'''--- README-Gitpod.md ---
Counter example in AssemblyScript - Gitpod version
==================================================

This README is specific to Gitpod and this example. For local development, please see [README.md](README.md).

## Description

In Gitpod, the counter will start automatically. Please look in the terminal for a link to follow.

This contract implements simple counter backed by storage on blockchain.
Contract in `assembly/main.ts` provides methods to increment / decrement counter and get it's current value or reset.

Plus and minus buttons increase and decrease value correspondingly. When button L is toggled, counter will add or minus 10 a time. RS button is for reset. LE and RE buttons to let the robot wink to you.

## To Test

```
yarn asp  # as-pect tests
NODE_ENV=ci yarn jest # jest tests
NODE_ENV=ci yarn test # both
```

## To Explore

- `assembly/main.ts` for the contract code
- `src/index.html` for the front-end HTML
- `src/main.js` for the JavaScript front-end code and how to integrate contracts
- `src/test.js` for the JS tests for the contract

## Data collection

By using Gitpod in this project, you agree to opt-in to basic, anonymous analytics. No personal information is transmitted. Instead, these usage statistics aid in discovering potential bugs and user flow information.

'''
'''--- README.md ---
Start the example!

Deploy on testnet
```
near login -> login to vanhiepdam.testnet
yarn deploy:dev
```

## To run example

```
- Add candidate
near call dev-1628947128667-27216166287904 --accountId vanhiepdam.testnet addCandidate '{"code": "c1"}'
near call dev-1628947128667-27216166287904 --accountId vanhiepdam.testnet addCandidate '{"code": "c2"}'
near call dev-1628947128667-27216166287904 --accountId vanhiepdam.testnet addCandidate '{"code": "c3"}'

- Find winners
near call dev-1628947128667-27216166287904 --accountId vanhiepdam.testnet findWinners '{}'

- Vote for candidate
near call dev-1628947128667-27216166287904 --accountId vanhiepdam.testnet vote '{"candidateCode": "c3"}'

- Find winners
near call dev-1628947128667-27216166287904 --accountId vanhiepdam.testnet findWinners '{}'

Expected output: candidate c3

- Login to another account | hieptest01.testnet
near login
near call dev-1628947128667-27216166287904 --accountId hieptest01.testnet vote '{"candidateCode": "c1"}'

- Login to another account | hieptest02.testnet
near login
near call dev-1628947128667-27216166287904 --accountId hieptest02.testnet vote '{"candidateCode": "c1"}'

- Find winners
near call dev-1628947128667-27216166287904 --accountId vanhiepdam.testnet findWinners '{}'

Expected output: candidate c1
```

'''
'''--- as-pect.config.js ---
module.exports = require('near-sdk-as/imports');
'''
'''--- asconfig.js ---
const compile = require("near-sdk-as/compiler").compile

compile("assembly/main.ts", // input file
        "out/main.wasm",    // output file
        [
        //   "-O1",          // Optional arguments
        "--debug",
        "--measure",         // Shows compiler runtime
        "--validate"         // Validate the generated wasm module
        ], {
          verbose: true     // Output the cli args passed to asc
        });

'''
'''--- assembly/as_types.d.ts ---
/// <reference types="near-sdk-as/assembly/as_types" />
'''
'''--- assembly/main.ts ---
import { context, storage, logging, PersistentMap } from "near-sdk-as";
import { u128, PersistentVector } from "near-sdk-as";
import { Candidate, Voter } from "./model";

const voterMap = new PersistentMap<string, Voter>('v');
const candidates = new PersistentVector<Candidate>('c');
const anonymousCandidate = new Candidate('anonymous');
const chairman: string = 'vanhiepdam.testnet';

// contract functions
export function addCandidate(code: string): void {
  logging.log(context.sender);
  assert(context.sender.localeCompare(chairman) === 0, 'Only chairman can add candidate');
  const candidateIdx = getCandidateIdxByCode(code);
  assert(candidateIdx < 0, `${code} was existed`);
  const candidate = new Candidate(code);
  candidates.push(candidate);
}

export function vote(candidateCode: string): void {
  const candidateIdx = getCandidateIdxByCode(candidateCode);
  assert(candidateIdx >= 0, `${candidateCode} not found`);
  let voter = voterMap.get(context.sender);
  if (!voter) {
    voter = new Voter(context.sender);
    voterMap.set(voter.address, voter);
  }
  assert(voter.voted === false, 'You has already voted');
  voter.candidate = candidateCode;
  voter.voted = true;
  voterMap.set(context.sender, voter);
  let candidate = candidates[candidateIdx];
  candidate.voteCount += 1;
  candidates[candidateIdx] = candidate;
}

export function getCandidates(): void {
  for (let i = 0; i < candidates.length; i++) {
    logging.log(candidates[i]);
  }
}

export function findWinners(): Candidate[] {
  let winners: Candidate[] = [];
  if (candidates.length === 0) {
    return winners;
  }
  let maxVote = 0;
  for (let i = 0; i < candidates.length; i++) {
    if (candidates[i].voteCount > maxVote) {
      maxVote = candidates[i].voteCount;
      winners = [];
      winners.push(candidates[i]);
    } 
    else if (candidates[i].voteCount === maxVote && maxVote > 0) {
      winners.push(candidates[i]);
    }
  }
  logging.log(winners);
  return winners;
}

export function getChairman(): string {
  return chairman;
}

// utils function
export function getCandidateIdxByCode(code: string): i32 {
  for (let i = 0; i < candidates.length; i++) {
    if (candidates[i].code.localeCompare(code) === 0) {
      return i;
    }
  }
  return -1;
}

export function clearCandidates(): void {
  for (let i = 0; i < candidates.length; i++) {
    candidates.pop();
  }
}

export function resetCurrentVoter(): void {
  const voter = voterMap.get(context.sender);
  if (voter) {
    voter.voted = false;
    voter.candidate = '';
    voterMap.set(context.sender, voter);
  }
}

'''
'''--- assembly/model.ts ---
import { context, storage, logging, PersistentMap } from "near-sdk-as";
import { u128, PersistentVector } from "near-sdk-as";

@nearBindgen
export class Candidate {
  code: string;
  voteCount: i32;

  constructor(public candidateCode: string) {
    this.code = candidateCode;
    this.voteCount = 0;
  }
}

@nearBindgen
export class Voter {
  address: string;
  voted: boolean;
  candidate: string;

  constructor(public sender: string) {
    this.address = sender;
    this.voted = false;
  }
}

'''
'''--- assembly/tsconfig.json ---
{
  "extends": "../node_modules/assemblyscript/std/assembly.json",
  "include": [
    "./**/*.ts",
    "../node_modules/**/*/as_types.d.ts"
  ]
}

'''
'''--- neardev/dev-account.env ---
CONTRACT_NAME=dev-1628947128667-27216166287904
'''
'''--- package.json ---
{
  "name": "counter",
  "description": "Counter Smart Contract\n\nThis project contains implementation of counter backed by blockchain.\n\n[AssemblyScript](https://github.com/AssemblyScript/assemblyscript) compiles strictly typed TypeScript to WebAssembly using Binaryen. See the [AssemblyScript wiki](https://github.com/AssemblyScript/assemblyscript/wiki) for further instructions and documentation.",
  "version": "0.0.1",
  "scripts": {
    "build": "node asconfig.js",
    "deploy:contract": "near deploy",
    "deploy": "yarn build && yarn deploy:contract && yarn deploy:pages",
    "deploy:dev": "yarn build && near dev-deploy",
    "prestart": "yarn build && yarn deploy:contract",
    "dev": "yarn deploy:dev && yarn watch",
    "watch": "nodemon --watch assembly -e ts --exec \"env-cmd -f ./neardev/dev-account.env parcel src/index.html\"",
    "start": "env-cmd -f ./neardev/dev-account.env parcel src/index.html",
    "test": "asp && yarn jest",
    "test:ci": "env NODE_ENV=ci yarn test",
    "asp": "asp --verbose",
    "jest": "yarn build && jest test"
  },
  "devDependencies": {
    "env-cmd": "^10.1.0",
    "jest": "~27.0.5",
    "jest-environment-node": "~27.0.5",
    "near-sdk-as": "^0.4.2",
    "near-cli": "^2.0.2",
    "nodemon": "~2.0.7",
    "parcel-bundler": "~1.12.5"
  },
  "jest": {
    "testEnvironment": "near-cli/test_environment",
    "testPathIgnorePatterns": [
      "<rootDir>/assembly/",
      "<rootDir>/node_modules/"
    ]
  },
  "dependencies": {
    "near-api-js": "^0.41.0",
    "regenerator-runtime": "^0.13.7"
  }
}

'''