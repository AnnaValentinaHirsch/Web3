*GitHub Repository "htafolla/validator-tools"*

'''--- .gitpod.yml ---
tasks:
  - init: yarn
    command: yarn dev
ports:
  - port: 1234
    onOpen: open-browser

'''
'''--- Grafana-Near-Dashboard-v1.json ---
{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": "-- Grafana --",
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "gnetId": null,
  "graphTooltip": 0,
  "id": 1,
  "links": [],
  "panels": [
    {
      "collapsed": true,
      "datasource": null,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 0
      },
      "id": 18,
      "panels": [],
      "title": "BlazeNet Node",
      "type": "row"
    },
    {
      "datasource": null,
      "fieldConfig": {
        "defaults": {
          "custom": {},
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 3,
        "w": 3,
        "x": 0,
        "y": 1
      },
      "id": 30,
      "options": {
        "colorMode": "value",
        "graphMode": "none",
        "justifyMode": "auto",
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        }
      },
      "pluginVersion": "7.0.3",
      "targets": [
        {
          "expr": "near_epoch_block_expected_number",
          "interval": "",
          "legendFormat": "",
          "refId": "A"
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "Blocks Expected",
      "type": "stat"
    },
    {
      "alert": {
        "alertRuleTags": {},
        "conditions": [
          {
            "evaluator": {
              "params": [
                97
              ],
              "type": "lt"
            },
            "operator": {
              "type": "and"
            },
            "query": {
              "params": [
                "A",
                "5m",
                "now"
              ]
            },
            "reducer": {
              "params": [],
              "type": "avg"
            },
            "type": "query"
          }
        ],
        "executionErrorState": "alerting",
        "for": "2m",
        "frequency": "1m",
        "handler": 1,
        "message": "Your node has missed 3 blocks. Only 7 more can be missed before being kicked.",
        "name": "BlazeNet % Online Alert",
        "noDataState": "no_data",
        "notifications": [
          {
            "uid": "nz937biMk"
          }
        ]
      },
      "aliasColors": {},
      "bars": false,
      "dashLength": 10,
      "dashes": false,
      "datasource": null,
      "fieldConfig": {
        "defaults": {
          "custom": {},
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 95
              },
              {
                "color": "#EAB839",
                "value": 96
              },
              {
                "color": "green",
                "value": 100
              }
            ]
          }
        },
        "overrides": []
      },
      "fill": 1,
      "fillGradient": 0,
      "gridPos": {
        "h": 6,
        "w": 4,
        "x": 3,
        "y": 1
      },
      "hiddenSeries": false,
      "id": 24,
      "legend": {
        "avg": false,
        "current": false,
        "max": false,
        "min": false,
        "show": true,
        "total": false,
        "values": false
      },
      "lines": true,
      "linewidth": 1,
      "nullPointMode": "null",
      "options": {
        "dataLinks": []
      },
      "percentage": false,
      "pluginVersion": "7.0.3",
      "pointradius": 2,
      "points": false,
      "renderer": "flot",
      "seriesOverrides": [],
      "spaceLength": 10,
      "stack": false,
      "steppedLine": false,
      "targets": [
        {
          "expr": "(near_epoch_block_produced_number / near_epoch_block_expected_number ) * 100",
          "interval": "",
          "legendFormat": "",
          "refId": "A"
        }
      ],
      "thresholds": [
        {
          "colorMode": "critical",
          "fill": true,
          "line": true,
          "op": "lt",
          "value": 97
        }
      ],
      "timeFrom": null,
      "timeRegions": [],
      "timeShift": null,
      "title": "% Online",
      "tooltip": {
        "shared": true,
        "sort": 0,
        "value_type": "individual"
      },
      "type": "graph",
      "xaxis": {
        "buckets": null,
        "mode": "time",
        "name": null,
        "show": true,
        "values": []
      },
      "yaxes": [
        {
          "format": "short",
          "label": null,
          "logBase": 1,
          "max": null,
          "min": null,
          "show": true
        },
        {
          "format": "short",
          "label": null,
          "logBase": 1,
          "max": null,
          "min": null,
          "show": true
        }
      ],
      "yaxis": {
        "align": false,
        "alignLevel": null
      }
    },
    {
      "alert": {
        "alertRuleTags": {},
        "conditions": [
          {
            "evaluator": {
              "params": [
                100
              ],
              "type": "lt"
            },
            "operator": {
              "type": "and"
            },
            "query": {
              "params": [
                "A",
                "5m",
                "now"
              ]
            },
            "reducer": {
              "params": [],
              "type": "avg"
            },
            "type": "query"
          }
        ],
        "executionErrorState": "alerting",
        "for": "5m",
        "frequency": "1m",
        "handler": 1,
        "message": "BlazNet's stake has fallen below the current seat price.",
        "name": "BlazeNet - Low Stake Alert",
        "noDataState": "no_data",
        "notifications": [
          {
            "uid": "nz937biMk"
          }
        ]
      },
      "aliasColors": {},
      "bars": false,
      "dashLength": 10,
      "dashes": false,
      "datasource": null,
      "fieldConfig": {
        "defaults": {
          "custom": {},
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "fill": 1,
      "fillGradient": 0,
      "gridPos": {
        "h": 6,
        "w": 4,
        "x": 7,
        "y": 1
      },
      "hiddenSeries": false,
      "id": 16,
      "legend": {
        "avg": false,
        "current": false,
        "max": false,
        "min": false,
        "show": true,
        "total": false,
        "values": false
      },
      "lines": true,
      "linewidth": 1,
      "nullPointMode": "null",
      "options": {
        "dataLinks": []
      },
      "percentage": false,
      "pluginVersion": "7.0.3",
      "pointradius": 2,
      "points": false,
      "renderer": "flot",
      "seriesOverrides": [],
      "spaceLength": 10,
      "stack": false,
      "steppedLine": false,
      "targets": [
        {
          "expr": "(near_current_stake / near_seat_price) * 100",
          "interval": "",
          "legendFormat": "",
          "refId": "A"
        }
      ],
      "thresholds": [
        {
          "colorMode": "critical",
          "fill": true,
          "line": true,
          "op": "lt",
          "value": 100
        }
      ],
      "timeFrom": null,
      "timeRegions": [],
      "timeShift": null,
      "title": "% Stake vs Seat Price",
      "tooltip": {
        "shared": true,
        "sort": 0,
        "value_type": "individual"
      },
      "type": "graph",
      "xaxis": {
        "buckets": null,
        "mode": "time",
        "name": null,
        "show": true,
        "values": []
      },
      "yaxes": [
        {
          "format": "short",
          "label": null,
          "logBase": 1,
          "max": null,
          "min": null,
          "show": true
        },
        {
          "format": "short",
          "label": null,
          "logBase": 1,
          "max": null,
          "min": null,
          "show": true
        }
      ],
      "yaxis": {
        "align": false,
        "alignLevel": null
      }
    },
    {
      "alert": {
        "alertRuleTags": {},
        "conditions": [
          {
            "evaluator": {
              "params": [
                5
              ],
              "type": "lt"
            },
            "operator": {
              "type": "and"
            },
            "query": {
              "params": [
                "A",
                "5m",
                "now"
              ]
            },
            "reducer": {
              "params": [],
              "type": "last"
            },
            "type": "query"
          }
        ],
        "executionErrorState": "alerting",
        "for": "5m",
        "frequency": "1m",
        "handler": 1,
        "message": "Peers are > 5. This could signal that this node is running an old version or has been blacklisted.",
        "name": "BlazeNet - Low Peer Alert",
        "noDataState": "no_data",
        "notifications": [
          {
            "uid": "nz937biMk"
          }
        ]
      },
      "aliasColors": {},
      "bars": false,
      "dashLength": 10,
      "dashes": false,
      "datasource": "Prometheus",
      "fieldConfig": {
        "defaults": {
          "custom": {
            "align": null
          },
          "mappings": [],
          "max": 40,
          "min": 5,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "fill": 1,
      "fillGradient": 0,
      "gridPos": {
        "h": 6,
        "w": 4,
        "x": 11,
        "y": 1
      },
      "hiddenSeries": false,
      "id": 8,
      "legend": {
        "avg": false,
        "current": false,
        "max": false,
        "min": false,
        "show": true,
        "total": false,
        "values": false
      },
      "lines": true,
      "linewidth": 1,
      "nullPointMode": "null",
      "options": {
        "dataLinks": []
      },
      "percentage": false,
      "pluginVersion": "7.0.3",
      "pointradius": 2,
      "points": false,
      "renderer": "flot",
      "seriesOverrides": [],
      "spaceLength": 10,
      "stack": false,
      "steppedLine": false,
      "targets": [
        {
          "expr": "peer_connections_total",
          "instant": false,
          "interval": "",
          "legendFormat": "",
          "refId": "A"
        }
      ],
      "thresholds": [
        {
          "colorMode": "critical",
          "fill": true,
          "line": true,
          "op": "lt",
          "value": 5
        }
      ],
      "timeFrom": null,
      "timeRegions": [],
      "timeShift": null,
      "title": "Node Peers",
      "tooltip": {
        "shared": true,
        "sort": 0,
        "value_type": "individual"
      },
      "type": "graph",
      "xaxis": {
        "buckets": null,
        "mode": "time",
        "name": null,
        "show": true,
        "values": []
      },
      "yaxes": [
        {
          "format": "short",
          "label": null,
          "logBase": 1,
          "max": null,
          "min": null,
          "show": true
        },
        {
          "format": "short",
          "label": null,
          "logBase": 1,
          "max": null,
          "min": null,
          "show": true
        }
      ],
      "yaxis": {
        "align": false,
        "alignLevel": null
      }
    },
    {
      "alert": {
        "alertRuleTags": {},
        "conditions": [
          {
            "evaluator": {
              "params": [
                1
              ],
              "type": "lt"
            },
            "operator": {
              "type": "and"
            },
            "query": {
              "params": [
                "A",
                "5m",
                "now"
              ]
            },
            "reducer": {
              "params": [],
              "type": "avg"
            },
            "type": "query"
          }
        ],
        "executionErrorState": "alerting",
        "for": "5m",
        "frequency": "1m",
        "handler": 1,
        "message": "The number of blocks received from peers has fallen below 2.",
        "name": "BlazeNet - Peer Blocks  Low Alert",
        "noDataState": "no_data",
        "notifications": [
          {
            "uid": "nz937biMk"
          }
        ]
      },
      "aliasColors": {},
      "bars": false,
      "dashLength": 10,
      "dashes": false,
      "datasource": null,
      "fieldConfig": {
        "defaults": {
          "custom": {},
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "fill": 1,
      "fillGradient": 0,
      "gridPos": {
        "h": 6,
        "w": 4,
        "x": 15,
        "y": 1
      },
      "hiddenSeries": false,
      "id": 34,
      "legend": {
        "avg": false,
        "current": false,
        "max": false,
        "min": false,
        "show": true,
        "total": false,
        "values": false
      },
      "lines": true,
      "linewidth": 1,
      "nullPointMode": "null",
      "options": {
        "dataLinks": []
      },
      "percentage": false,
      "pluginVersion": "7.0.3",
      "pointradius": 2,
      "points": false,
      "renderer": "flot",
      "seriesOverrides": [],
      "spaceLength": 10,
      "stack": false,
      "steppedLine": false,
      "targets": [
        {
          "expr": "rate(BLOCK_RECEIVED_TOTAL[5m])",
          "interval": "",
          "legendFormat": "",
          "refId": "A"
        }
      ],
      "thresholds": [
        {
          "colorMode": "critical",
          "fill": true,
          "line": true,
          "op": "lt",
          "value": 1
        }
      ],
      "timeFrom": null,
      "timeRegions": [],
      "timeShift": null,
      "title": "Peer Blocks Received",
      "tooltip": {
        "shared": true,
        "sort": 0,
        "value_type": "individual"
      },
      "type": "graph",
      "xaxis": {
        "buckets": null,
        "mode": "time",
        "name": null,
        "show": true,
        "values": []
      },
      "yaxes": [
        {
          "format": "short",
          "label": null,
          "logBase": 1,
          "max": null,
          "min": null,
          "show": true
        },
        {
          "format": "short",
          "label": null,
          "logBase": 1,
          "max": null,
          "min": null,
          "show": true
        }
      ],
      "yaxis": {
        "align": false,
        "alignLevel": null
      }
    },
    {
      "datasource": null,
      "fieldConfig": {
        "defaults": {
          "custom": {},
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 3,
        "w": 3,
        "x": 0,
        "y": 4
      },
      "id": 32,
      "options": {
        "colorMode": "value",
        "graphMode": "none",
        "justifyMode": "auto",
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        }
      },
      "pluginVersion": "7.0.3",
      "targets": [
        {
          "expr": "near_epoch_block_produced_number",
          "interval": "",
          "legendFormat": "",
          "refId": "A"
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "Blocks Produced",
      "type": "stat"
    },
    {
      "collapsed": false,
      "datasource": null,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 7
      },
      "id": 22,
      "panels": [],
      "title": "NEAR Network",
      "type": "row"
    },
    {
      "datasource": null,
      "fieldConfig": {
        "defaults": {
          "custom": {
            "align": null
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "semi-dark-green",
                "value": null
              }
            ]
          },
          "unit": "none"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 3,
        "w": 4,
        "x": 0,
        "y": 8
      },
      "id": 12,
      "options": {
        "colorMode": "value",
        "graphMode": "none",
        "justifyMode": "auto",
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        }
      },
      "pluginVersion": "7.0.3",
      "targets": [
        {
          "expr": "near_block_number",
          "interval": "",
          "legendFormat": "",
          "refId": "A"
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "Block Height",
      "type": "stat"
    },
    {
      "datasource": null,
      "fieldConfig": {
        "defaults": {
          "custom": {},
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 3,
        "w": 4,
        "x": 4,
        "y": 8
      },
      "id": 26,
      "options": {
        "colorMode": "value",
        "graphMode": "area",
        "justifyMode": "auto",
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "mean"
          ],
          "fields": "",
          "values": false
        }
      },
      "pluginVersion": "7.0.3",
      "targets": [
        {
          "expr": "irate(near_block_number[3m]) * 100\n",
          "interval": "",
          "intervalFactor": 3,
          "legendFormat": "",
          "refId": "A"
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "Blocks Speed (3m)",
      "type": "stat"
    },
    {
      "datasource": null,
      "fieldConfig": {
        "defaults": {
          "custom": {},
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "semi-dark-green",
                "value": null
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 3,
        "w": 4,
        "x": 0,
        "y": 11
      },
      "id": 14,
      "options": {
        "colorMode": "value",
        "graphMode": "none",
        "justifyMode": "auto",
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        }
      },
      "pluginVersion": "7.0.3",
      "targets": [
        {
          "expr": "near_seat_price",
          "interval": "",
          "legendFormat": "",
          "refId": "A"
        },
        {
          "refId": "B"
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "Seat Price",
      "type": "stat"
    },
    {
      "alert": {
        "alertRuleTags": {},
        "conditions": [
          {
            "evaluator": {
              "params": [
                67
              ],
              "type": "lt"
            },
            "operator": {
              "type": "and"
            },
            "query": {
              "params": [
                "A",
                "5m",
                "now"
              ]
            },
            "reducer": {
              "params": [],
              "type": "avg"
            },
            "type": "query"
          }
        ],
        "executionErrorState": "alerting",
        "for": "5m",
        "frequency": "1m",
        "handler": 1,
        "message": "The number of validators online has fallen below the critical threshold of 96%.",
        "name": "NEAR Network - Low Validator Count",
        "noDataState": "no_data",
        "notifications": [
          {
            "uid": "nz937biMk"
          }
        ]
      },
      "aliasColors": {},
      "bars": false,
      "dashLength": 10,
      "dashes": false,
      "datasource": null,
      "fieldConfig": {
        "defaults": {
          "custom": {},
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "fill": 1,
      "fillGradient": 0,
      "gridPos": {
        "h": 3,
        "w": 4,
        "x": 4,
        "y": 11
      },
      "hiddenSeries": false,
      "id": 28,
      "legend": {
        "avg": false,
        "current": false,
        "max": false,
        "min": false,
        "show": true,
        "total": false,
        "values": false
      },
      "lines": true,
      "linewidth": 1,
      "nullPointMode": "null",
      "options": {
        "dataLinks": []
      },
      "percentage": false,
      "pluginVersion": "7.0.3",
      "pointradius": 2,
      "points": false,
      "renderer": "flot",
      "seriesOverrides": [],
      "spaceLength": 10,
      "stack": false,
      "steppedLine": false,
      "targets": [
        {
          "expr": "validator_active_total",
          "interval": "",
          "legendFormat": "",
          "refId": "A"
        }
      ],
      "thresholds": [
        {
          "colorMode": "critical",
          "fill": true,
          "line": true,
          "op": "lt",
          "value": 67
        }
      ],
      "timeFrom": null,
      "timeRegions": [],
      "timeShift": null,
      "title": "Validators Online",
      "tooltip": {
        "shared": true,
        "sort": 0,
        "value_type": "individual"
      },
      "type": "graph",
      "xaxis": {
        "buckets": null,
        "mode": "time",
        "name": null,
        "show": true,
        "values": []
      },
      "yaxes": [
        {
          "format": "short",
          "label": null,
          "logBase": 1,
          "max": null,
          "min": null,
          "show": true
        },
        {
          "format": "short",
          "label": null,
          "logBase": 1,
          "max": null,
          "min": null,
          "show": true
        }
      ],
      "yaxis": {
        "align": false,
        "alignLevel": null
      }
    },
    {
      "collapsed": false,
      "datasource": null,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 14
      },
      "id": 20,
      "panels": [],
      "title": "System",
      "type": "row"
    },
    {
      "alert": {
        "alertRuleTags": {},
        "conditions": [
          {
            "evaluator": {
              "params": [
                80
              ],
              "type": "gt"
            },
            "operator": {
              "type": "and"
            },
            "query": {
              "params": [
                "A",
                "15m",
                "now"
              ]
            },
            "reducer": {
              "params": [],
              "type": "avg"
            },
            "type": "query"
          }
        ],
        "executionErrorState": "alerting",
        "for": "1h",
        "frequency": "5m",
        "handler": 1,
        "message": "A process has been using a high amount of CPU for an hour.",
        "name": "CPU Alert",
        "noDataState": "no_data",
        "notifications": [
          {
            "uid": "nz937biMk"
          }
        ]
      },
      "aliasColors": {},
      "bars": false,
      "dashLength": 10,
      "dashes": false,
      "datasource": null,
      "fieldConfig": {
        "defaults": {
          "custom": {}
        },
        "overrides": []
      },
      "fill": 1,
      "fillGradient": 0,
      "gridPos": {
        "h": 5,
        "w": 5,
        "x": 0,
        "y": 15
      },
      "hiddenSeries": false,
      "id": 2,
      "legend": {
        "avg": false,
        "current": false,
        "max": false,
        "min": false,
        "show": true,
        "total": false,
        "values": false
      },
      "lines": true,
      "linewidth": 1,
      "nullPointMode": "null",
      "options": {
        "dataLinks": []
      },
      "percentage": false,
      "pointradius": 2,
      "points": false,
      "renderer": "flot",
      "seriesOverrides": [],
      "spaceLength": 10,
      "stack": false,
      "steppedLine": false,
      "targets": [
        {
          "expr": "100 - (avg by (instance) (irate(node_cpu_seconds_total{job=\"node\",mode=\"idle\"}[5m])) * 100)",
          "interval": "",
          "legendFormat": "",
          "refId": "A"
        }
      ],
      "thresholds": [
        {
          "colorMode": "critical",
          "fill": true,
          "line": true,
          "op": "gt",
          "value": 80
        }
      ],
      "timeFrom": null,
      "timeRegions": [],
      "timeShift": null,
      "title": "CPU",
      "tooltip": {
        "shared": true,
        "sort": 0,
        "value_type": "individual"
      },
      "type": "graph",
      "xaxis": {
        "buckets": null,
        "mode": "time",
        "name": null,
        "show": true,
        "values": []
      },
      "yaxes": [
        {
          "format": "short",
          "label": null,
          "logBase": 1,
          "max": null,
          "min": null,
          "show": true
        },
        {
          "format": "short",
          "label": null,
          "logBase": 1,
          "max": null,
          "min": null,
          "show": true
        }
      ],
      "yaxis": {
        "align": false,
        "alignLevel": null
      }
    },
    {
      "alert": {
        "alertRuleTags": {},
        "conditions": [
          {
            "evaluator": {
              "params": [
                80
              ],
              "type": "gt"
            },
            "operator": {
              "type": "and"
            },
            "query": {
              "params": [
                "A",
                "15m",
                "now"
              ]
            },
            "reducer": {
              "params": [],
              "type": "avg"
            },
            "type": "query"
          }
        ],
        "executionErrorState": "alerting",
        "for": "1h",
        "frequency": "5m",
        "handler": 1,
        "message": "A process has been using a high amount of memory for an hour.",
        "name": "Memory Alert",
        "noDataState": "no_data",
        "notifications": [
          {
            "uid": "nz937biMk"
          }
        ]
      },
      "aliasColors": {},
      "bars": false,
      "dashLength": 10,
      "dashes": false,
      "datasource": null,
      "fieldConfig": {
        "defaults": {
          "custom": {}
        },
        "overrides": []
      },
      "fill": 1,
      "fillGradient": 0,
      "gridPos": {
        "h": 5,
        "w": 5,
        "x": 5,
        "y": 15
      },
      "hiddenSeries": false,
      "id": 4,
      "legend": {
        "avg": false,
        "current": false,
        "max": false,
        "min": false,
        "show": true,
        "total": false,
        "values": false
      },
      "lines": true,
      "linewidth": 1,
      "nullPointMode": "null",
      "options": {
        "dataLinks": []
      },
      "percentage": false,
      "pointradius": 2,
      "points": false,
      "renderer": "flot",
      "seriesOverrides": [],
      "spaceLength": 10,
      "stack": false,
      "steppedLine": false,
      "targets": [
        {
          "expr": "100 * (1 - ((avg_over_time(node_memory_MemFree_bytes[10m]) + avg_over_time(node_memory_Cached_bytes[10m]) + avg_over_time(node_memory_Buffers_bytes[10m])) / avg_over_time(node_memory_MemTotal_bytes[10m])))",
          "interval": "",
          "legendFormat": "",
          "refId": "A"
        }
      ],
      "thresholds": [
        {
          "colorMode": "critical",
          "fill": true,
          "line": true,
          "op": "gt",
          "value": 80
        }
      ],
      "timeFrom": null,
      "timeRegions": [],
      "timeShift": null,
      "title": "Memory",
      "tooltip": {
        "shared": true,
        "sort": 0,
        "value_type": "individual"
      },
      "type": "graph",
      "xaxis": {
        "buckets": null,
        "mode": "time",
        "name": null,
        "show": true,
        "values": []
      },
      "yaxes": [
        {
          "format": "short",
          "label": null,
          "logBase": 1,
          "max": null,
          "min": null,
          "show": true
        },
        {
          "format": "short",
          "label": null,
          "logBase": 1,
          "max": null,
          "min": null,
          "show": true
        }
      ],
      "yaxis": {
        "align": false,
        "alignLevel": null
      }
    },
    {
      "alert": {
        "alertRuleTags": {},
        "conditions": [
          {
            "evaluator": {
              "params": [
                90
              ],
              "type": "gt"
            },
            "operator": {
              "type": "and"
            },
            "query": {
              "params": [
                "A",
                "15m",
                "now"
              ]
            },
            "reducer": {
              "params": [],
              "type": "avg"
            },
            "type": "query"
          }
        ],
        "executionErrorState": "alerting",
        "for": "1h",
        "frequency": "5m",
        "handler": 1,
        "message": "Disk space utilization is over 90%.",
        "name": "Disk Alert",
        "noDataState": "no_data",
        "notifications": [
          {
            "uid": "nz937biMk"
          }
        ]
      },
      "aliasColors": {},
      "bars": false,
      "dashLength": 10,
      "dashes": false,
      "datasource": null,
      "fieldConfig": {
        "defaults": {
          "custom": {}
        },
        "overrides": []
      },
      "fill": 1,
      "fillGradient": 0,
      "gridPos": {
        "h": 5,
        "w": 5,
        "x": 10,
        "y": 15
      },
      "hiddenSeries": false,
      "id": 6,
      "legend": {
        "avg": false,
        "current": false,
        "max": false,
        "min": false,
        "show": true,
        "total": false,
        "values": false
      },
      "lines": true,
      "linewidth": 1,
      "nullPointMode": "null",
      "options": {
        "dataLinks": []
      },
      "percentage": false,
      "pointradius": 2,
      "points": false,
      "renderer": "flot",
      "seriesOverrides": [],
      "spaceLength": 10,
      "stack": false,
      "steppedLine": false,
      "targets": [
        {
          "expr": "( 1 - node_filesystem_avail_bytes / node_filesystem_size_bytes) * 100",
          "interval": "",
          "legendFormat": "",
          "refId": "A"
        }
      ],
      "thresholds": [
        {
          "colorMode": "critical",
          "fill": true,
          "line": true,
          "op": "gt",
          "value": 90
        }
      ],
      "timeFrom": null,
      "timeRegions": [],
      "timeShift": null,
      "title": "Disk",
      "tooltip": {
        "shared": true,
        "sort": 0,
        "value_type": "individual"
      },
      "type": "graph",
      "xaxis": {
        "buckets": null,
        "mode": "time",
        "name": null,
        "show": true,
        "values": []
      },
      "yaxes": [
        {
          "format": "short",
          "label": null,
          "logBase": 1,
          "max": null,
          "min": null,
          "show": true
        },
        {
          "format": "short",
          "label": null,
          "logBase": 1,
          "max": null,
          "min": null,
          "show": true
        }
      ],
      "yaxis": {
        "align": false,
        "alignLevel": null
      }
    },
    {
      "alert": {
        "alertRuleTags": {},
        "conditions": [
          {
            "evaluator": {
              "params": [
                50
              ],
              "type": "lt"
            },
            "operator": {
              "type": "and"
            },
            "query": {
              "params": [
                "A",
                "5m",
                "now"
              ]
            },
            "reducer": {
              "params": [],
              "type": "avg"
            },
            "type": "query"
          }
        ],
        "executionErrorState": "alerting",
        "for": "5m",
        "frequency": "1m",
        "handler": 1,
        "message": "Network traffic seems very low.",
        "name": "Network Alert",
        "noDataState": "no_data",
        "notifications": [
          {
            "uid": "nz937biMk"
          }
        ]
      },
      "aliasColors": {},
      "bars": false,
      "dashLength": 10,
      "dashes": false,
      "datasource": null,
      "fieldConfig": {
        "defaults": {
          "custom": {}
        },
        "overrides": []
      },
      "fill": 1,
      "fillGradient": 0,
      "gridPos": {
        "h": 5,
        "w": 5,
        "x": 15,
        "y": 15
      },
      "hiddenSeries": false,
      "id": 10,
      "legend": {
        "avg": false,
        "current": false,
        "max": false,
        "min": false,
        "show": true,
        "total": false,
        "values": false
      },
      "lines": true,
      "linewidth": 1,
      "nullPointMode": "null",
      "options": {
        "dataLinks": []
      },
      "percentage": false,
      "pointradius": 2,
      "points": false,
      "renderer": "flot",
      "seriesOverrides": [],
      "spaceLength": 10,
      "stack": false,
      "steppedLine": false,
      "targets": [
        {
          "expr": "rate(node_network_receive_bytes_total[1m])",
          "interval": "",
          "legendFormat": "",
          "refId": "A"
        }
      ],
      "thresholds": [
        {
          "colorMode": "critical",
          "fill": true,
          "line": true,
          "op": "lt",
          "value": 50
        }
      ],
      "timeFrom": null,
      "timeRegions": [],
      "timeShift": null,
      "title": "Network",
      "tooltip": {
        "shared": true,
        "sort": 0,
        "value_type": "individual"
      },
      "type": "graph",
      "xaxis": {
        "buckets": null,
        "mode": "time",
        "name": null,
        "show": true,
        "values": []
      },
      "yaxes": [
        {
          "format": "short",
          "label": null,
          "logBase": 1,
          "max": null,
          "min": null,
          "show": true
        },
        {
          "format": "short",
          "label": null,
          "logBase": 1,
          "max": null,
          "min": null,
          "show": true
        }
      ],
      "yaxis": {
        "align": false,
        "alignLevel": null
      }
    }
  ],
  "refresh": false,
  "schemaVersion": 25,
  "style": "dark",
  "tags": [],
  "templating": {
    "list": []
  },
  "time": {
    "from": "2020-06-12T14:42:37.488Z",
    "to": "2020-06-12T18:06:46.489Z"
  },
  "timepicker": {
    "refresh_intervals": [
      "10s",
      "30s",
      "1m",
      "5m",
      "15m",
      "30m",
      "1h",
      "2h",
      "1d"
    ]
  },
  "timezone": "",
  "title": "My Validator",
  "uid": "qZt0VbmMz",
  "version": 29
}
'''
'''--- README.md ---
<br />
<br />

<p>
<img src="https://nearprotocol.com/wp-content/themes/near-19/assets/img/logo.svg?t=1553011311" width="240">
</p>

<br />
<br />

## Validator Toools Dapp
### Requirements
##### IMPORTANT: Make sure you have the latest version of NEAR Shell and Node Version > 10.x 

1. [Node.js](https://nodejs.org/en/download/package-manager/)
2. (optional) near-shell

```
npm i -g near-shell
```
3. (optional) yarn
```
npm i -g yarn
```
### To run on NEAR betanet

```bash
npm install && npm dev
```

with yarn:

```bash
yarn && yarn dev
```

The server that starts is for static assets and by default serves them to http://localhost:1234. Navigate there in your browser to see the app running!

NOTE: Both contract and client-side code will auto-reload once you change source files.

### To run tests

```bash
npm test
```

with yarn:

```bash
yarn test
```

### Deploy

#### Step 1: Create account for the contract

You'll now want to authorize NEAR shell on your NEAR account, which will allow NEAR Shell to deploy contracts on your NEAR account's behalf \(and spend your NEAR account balance to do so\).

Type the command `near login` which opens a webpage at NEAR Wallet. Follow the instructions there and it will create a key for you, stored in the `/neardev` directory.

#### Step 2:

Modify `src/config.js` line that sets the account name of the contract. Set it to the account id from step 1.

NOTE: When you use [create-near-app](https://github.com/nearprotocol/create-near-app) to create the project it'll infer and pre-populate name of contract based on project folder name.

```javascript
const CONTRACT_NAME = 'react-template'; /* TODO: Change this to your contract's name! */
const DEFAULT_ENV = 'development';
...
```

#### Step 3:

Check the scripts in the package.json, for frontend and backend both, run the command:

```bash
npm run deploy
```

with yarn:

```bash
yarn deploy
```

NOTE: This uses [gh-pages](https://github.com/tschaub/gh-pages) to publish resulting website on GitHub pages. It'll only work if project already has repository set up on GitHub. Feel free to modify `deploy:pages` script in `package.json` to deploy elsewhere.

### To Explore

- `assembly/main.ts` for the contract code
- `src/index.html` for the front-end HTML
- `src/index.js` for the JavaScript front-end code and how to integrate contracts
- `src/App.js` for the main React component
- `src/main.test.js` for the JavaScript integration tests of smart contract
- `src/App.test.js` for the main React component tests
'''
'''--- as-pect.config.js ---
module.exports = require('near-sdk-as/imports');
'''
'''--- asconfig.js ---
const compile = require("near-sdk-as/compiler").compile

compile("assembly/main.ts", // input file
        "out/main.wasm",    // output file
        [
        //   "-O1",          // Optional arguments
        "--debug",
        "--measure",         // Shows compiler runtime
        "--validate"         // Validate the generated wasm module
        ], {
          verbose: true     // Output the cli args passed to asc
        });

'''
'''--- assembly/__tests__/as-pect.d.ts ---
/// <reference types="@as-pect/assembly/types/as-pect" />
'''
'''--- assembly/__tests__/main.spec.ts ---
import { setGreeting } from '../main';
import { storage, context } from "near-sdk-as";

describe("Greeting ", () => {
    it("should be set and read", () => {
        setGreeting("hello world");
        const greeting = storage.get<string>(context.sender);
    });
});

'''
'''--- assembly/as_types.d.ts ---
/// <reference types="near-sdk-as/assembly/as_types" />
'''
'''--- assembly/main.ts ---
import { context, logging, storage } from "near-sdk-as";
import { PostedMessage, messages } from "./model";

// available class: context, storage, logging, base58, base64, 
// PersistentMap, PersistentVector, PersistentDeque, PersistentTopN, ContractPromise, math
import { TextMessage } from "./model";

const DEFAULT_MESSAGE = "Hello";
const MESSAGE_LIMIT = 10;

/**
 * Adds a new message under the name of the sender's account id.\
 * NOTE: This is a change method. Which means it will modify the state.\
 * But right now we don't distinguish them with annotations yet.
 */
export function addMessage(text: string): void {
  // Creating a new message and populating fields with our data
  logging.log("Saving message");
  const message = new PostedMessage(text);

  // Adding the message to end of the the persistent collection
  messages.push(message);
}

/**
* Remove a validator from the system
**/
export function removeValidator(index: u32): PostedMessage {
  const validator = messages.swap_remove(index);

  logging.log(index);
  logging.log(validator);
  
  return validator;
}

/**
 * Returns an array of last N messages.
 * NOTE: This is a view method. Which means it should NOT modify the state.
 */ 
export function getMessages(): PostedMessage[] {

  //logging.log("getMessages called");
  const numMessages = min(MESSAGE_LIMIT, messages.length);
  const startIndex = messages.length - numMessages;
  const result = new Array<PostedMessage>(numMessages);

  for (let i = 0; i < numMessages; i++) {
    result[i] = messages[i + startIndex];
  }

  return result;
}

export function welcome(account_id: string): TextMessage {

  let message = new TextMessage();
  let greetingPrefix = storage.get<string>(account_id);

  if (!greetingPrefix) {
    greetingPrefix = DEFAULT_MESSAGE;
  }

  const s = printString(account_id);
  message.text = greetingPrefix + " " + s;

  return message;
}

export function setGreeting(message: string): void {
  storage.set(context.sender, message);
}

function printString(s: string): string {
  return s;
}

'''
'''--- assembly/model.ts ---
import { context, u128, PersistentVector } from "near-sdk-as";

/** 
 * Exporting a new class PostedMessage so it can be used outside of this file.
 */
@nearBindgen
export class PostedMessage {
	
  premium: boolean;
  sender: string;
  constructor(public text: string) {
    this.premium = context.attachedDeposit >= u128.from('10000000000000000000000');
    this.sender = context.sender;
  }
}

/** 
 * collections.vector is a persistent collection. Any changes to it will
 * be automatically saved in the storage.
 * The parameter to the constructor needs to be unique across a single contract.
 * It will be used as a prefix to all keys required to store data in the storage.
 */
export const messages = new PersistentVector<PostedMessage>("m");

@nearBindgen
export class TextMessage {
    text: string;
}
'''
'''--- assembly/tsconfig.json ---
{
  "extends": "assemblyscript/std/assembly.json",
  "include": [
    "./**/*.ts"
  ]
}

'''
'''--- babel.config.js ---
module.exports = {
 " presets": ["@babel/preset-env",
        {
          "targets": {
            "esmodules": true
          }
        }, "@babel/preset-react"],
  "plugins": [
  	[
  		"@babel/plugin-proposal-class-properties",
  		{
  			"loose": true
  		}
  	]
  ]
};
'''
'''--- package.json ---
{
  "name": "validator-tools",
  "version": "0.1.0",
  "scripts": {
    "compile": "tsc -p ./tsconfig.json",
    "build": "npm run build:contract && npm run build:web",
    "build:contract": "node asconfig.js",
    "build:web": "parcel build src/index.html --public-url ./",
    "dev:deploy:contract": "near dev-deploy",
    "deploy:contract": "near deploy",
    "deploy:pages": "gh-pages -d dist/",
    "deploy": "npm run build && npm run deploy:contract && npm run deploy:pages",
    "prestart": "npm run build:contract && npm run dev:deploy:contract",
    "start": "env-cmd -f ./neardev/dev-account.env parcel src/index.html",
    "dev": "nodemon --watch assembly -e ts --exec \"npm run start\"",
    "test": "asp && npm run build:contract && jest test --runInBand"
  },
  "devDependencies": {
    "@babel/core": "^7.10.1",
    "@babel/plugin-proposal-class-properties": "^7.10.1",
    "@babel/preset-env": "^7.9.5",
    "@babel/preset-react": "^7.9.4",
    "assemblyscript": "^0.9.4",
    "babel-jest": "^26.0.0",
    "env-cmd": "^10.1.0",
    "gh-pages": "^2.2.0",
    "jest": "^26.0.1",
    "jest-environment-node": "^26.0.0",
    "near-sdk-as": "^0.3.1",
    "near-shell": "^0.24.2",
    "nodemon": "^2.0.3",
    "parcel-bundler": "^1.12.4",
    "react-test-renderer": "^16.13.1",
    "typescript": "^3.9.5"
  },
  "dependencies": {
    "@material-ui/core": "^4.0.0",
    "@material-ui/icons": "^4.9.1",
    "@types/react": "^16.8.6",
    "big.js": "^5.2.2",
    "bn.js": "^5.1.2",
    "deepmerge": "^4.2.2",
    "install": "^0.13.0",
    "near-api-js": "^0.26.0",
    "react": "^16.8.0",
    "react-dom": "^16.8.0",
    "regenerator-runtime": "^0.13.5"
  },
  "eslintConfig": {
    "extends": "react-app"
  },
  "jest": {
    "moduleNameMapper": {
      "\\.(jpg|ico|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$": "<rootDir>/src/__mocks__/fileMock.js",
      "\\.(css|less)$": "<rootDir>/src/__mocks__/fileMock.js"
    },
    "setupFiles": [
      "<rootDir>/src/jest.init.js"
    ],
    "testEnvironment": "near-shell/test_environment",
    "testPathIgnorePatterns": [
      "<rootDir>/assembly/",
      "<rootDir>/node_modules/"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

'''
'''--- report.20200531.164234.2624.0.001.json ---

{
  "header": {
    "reportVersion": 2,
    "event": "Allocation failed - JavaScript heap out of memory",
    "trigger": "FatalError",
    "filename": "report.20200531.164234.2624.0.001.json",
    "dumpEventTime": "2020-05-31T16:42:34Z",
    "dumpEventTimeStamp": "1590961354130",
    "processId": 2624,
    "threadId": null,
    "cwd": "C:\\users\\htafo\\dev\\near\\validator-tools",
    "commandLine": [
      "C:\\Program Files\\nodejs\\node.exe",
      "C:\\Users\\htafo\\dev\\near\\validator-tools\\node_modules\\@parcel\\watcher\\src\\child",
      "C:\\Program Files\\nodejs\\node.exe",
      "C:\\Users\\htafo\\dev\\near\\validator-tools\\node_modules\\parcel-bundler\\bin\\cli.js",
      "serve",
      "src/index.html"
    ],
    "nodejsVersion": "v12.16.3",
    "wordSize": 64,
    "arch": "x64",
    "platform": "win32",
    "componentVersions": {
      "node": "12.16.3",
      "v8": "7.8.279.23-node.35",
      "uv": "1.34.2",
      "zlib": "1.2.11",
      "brotli": "1.0.7",
      "ares": "1.16.0",
      "modules": "72",
      "nghttp2": "1.40.0",
      "napi": "5",
      "llhttp": "2.0.4",
      "http_parser": "2.9.3",
      "openssl": "1.1.1g",
      "cldr": "36.0",
      "icu": "65.1",
      "tz": "2019c",
      "unicode": "12.1"
    },
    "release": {
      "name": "node",
      "lts": "Erbium",
      "headersUrl": "https://nodejs.org/download/release/v12.16.3/node-v12.16.3-headers.tar.gz",
      "sourceUrl": "https://nodejs.org/download/release/v12.16.3/node-v12.16.3.tar.gz",
      "libUrl": "https://nodejs.org/download/release/v12.16.3/win-x64/node.lib"
    },
    "osName": "Windows_NT",
    "osRelease": "10.0.18362",
    "osVersion": "Windows 10 Pro",
    "osMachine": "x86_64",
    "cpus": [
      {
        "model": "AMD Ryzen 7 1700 Eight-Core Processor          ",
        "speed": 2994,
        "user": 38447156,
        "nice": 0,
        "sys": 31527328,
        "idle": 1495794265,
        "irq": 5424421
      },
      {
        "model": "AMD Ryzen 7 1700 Eight-Core Processor          ",
        "speed": 2994,
        "user": 16649140,
        "nice": 0,
        "sys": 7033171,
        "idle": 1542086109,
        "irq": 684375
      },
      {
        "model": "AMD Ryzen 7 1700 Eight-Core Processor          ",
        "speed": 2994,
        "user": 71044375,
        "nice": 0,
        "sys": 22877687,
        "idle": 1471846359,
        "irq": 631906
      },
      {
        "model": "AMD Ryzen 7 1700 Eight-Core Processor          ",
        "speed": 2994,
        "user": 16069843,
        "nice": 0,
        "sys": 6572921,
        "idle": 1543125656,
        "irq": 232703
      },
      {
        "model": "AMD Ryzen 7 1700 Eight-Core Processor          ",
        "speed": 2994,
        "user": 49314984,
        "nice": 0,
        "sys": 23072640,
        "idle": 1493380796,
        "irq": 372390
      },
      {
        "model": "AMD Ryzen 7 1700 Eight-Core Processor          ",
        "speed": 2994,
        "user": 15330937,
        "nice": 0,
        "sys": 6749593,
        "idle": 1543687890,
        "irq": 102328
      },
      {
        "model": "AMD Ryzen 7 1700 Eight-Core Processor          ",
        "speed": 2994,
        "user": 46551125,
        "nice": 0,
        "sys": 20141734,
        "idle": 1499075562,
        "irq": 332218
      },
      {
        "model": "AMD Ryzen 7 1700 Eight-Core Processor          ",
        "speed": 2994,
        "user": 17671562,
        "nice": 0,
        "sys": 6094843,
        "idle": 1542002015,
        "irq": 86468
      },
      {
        "model": "AMD Ryzen 7 1700 Eight-Core Processor          ",
        "speed": 2994,
        "user": 38911906,
        "nice": 0,
        "sys": 18652734,
        "idle": 1508203781,
        "irq": 264656
      },
      {
        "model": "AMD Ryzen 7 1700 Eight-Core Processor          ",
        "speed": 2994,
        "user": 15023078,
        "nice": 0,
        "sys": 5635953,
        "idle": 1545109375,
        "irq": 77437
      },
      {
        "model": "AMD Ryzen 7 1700 Eight-Core Processor          ",
        "speed": 2994,
        "user": 54163968,
        "nice": 0,
        "sys": 24838453,
        "idle": 1486765984,
        "irq": 264156
      },
      {
        "model": "AMD Ryzen 7 1700 Eight-Core Processor          ",
        "speed": 2994,
        "user": 15810375,
        "nice": 0,
        "sys": 20883609,
        "idle": 1529074421,
        "irq": 114156
      },
      {
        "model": "AMD Ryzen 7 1700 Eight-Core Processor          ",
        "speed": 2994,
        "user": 45610828,
        "nice": 0,
        "sys": 26458578,
        "idle": 1493699000,
        "irq": 278718
      },
      {
        "model": "AMD Ryzen 7 1700 Eight-Core Processor          ",
        "speed": 2994,
        "user": 13364015,
        "nice": 0,
        "sys": 7538156,
        "idle": 1544866234,
        "irq": 104859
      },
      {
        "model": "AMD Ryzen 7 1700 Eight-Core Processor          ",
        "speed": 2994,
        "user": 33701312,
        "nice": 0,
        "sys": 21937593,
        "idle": 1510129500,
        "irq": 199750
      },
      {
        "model": "AMD Ryzen 7 1700 Eight-Core Processor          ",
        "speed": 2994,
        "user": 41973765,
        "nice": 0,
        "sys": 25774703,
        "idle": 1498019937,
        "irq": 218109
      }
    ],
    "networkInterfaces": [
      {
        "name": "vEthernet (DockerNAT)",
        "internal": false,
        "mac": "00:15:5d:01:8d:01",
        "address": "fe80::814e:d35d:c98f:bc66",
        "netmask": "ffff:ffff:ffff:ffff::",
        "family": "IPv6",
        "scopeid": 4
      },
      {
        "name": "vEthernet (DockerNAT)",
        "internal": false,
        "mac": "00:15:5d:01:8d:01",
        "address": "10.0.75.1",
        "netmask": "255.255.255.0",
        "family": "IPv4"
      },
      {
        "name": "Wi-Fi",
        "internal": false,
        "mac": "60:14:b3:64:ca:af",
        "address": "fe80::e435:a8cd:310e:229c",
        "netmask": "ffff:ffff:ffff:ffff::",
        "family": "IPv6",
        "scopeid": 19
      },
      {
        "name": "Wi-Fi",
        "internal": false,
        "mac": "60:14:b3:64:ca:af",
        "address": "192.168.1.135",
        "netmask": "255.255.255.0",
        "family": "IPv4"
      },
      {
        "name": "Loopback Pseudo-Interface 1",
        "internal": true,
        "mac": "00:00:00:00:00:00",
        "address": "::1",
        "netmask": "ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff",
        "family": "IPv6",
        "scopeid": 0
      },
      {
        "name": "Loopback Pseudo-Interface 1",
        "internal": true,
        "mac": "00:00:00:00:00:00",
        "address": "127.0.0.1",
        "netmask": "255.0.0.0",
        "family": "IPv4"
      },
      {
        "name": "vEthernet (Default Switch)",
        "internal": false,
        "mac": "00:15:5d:ea:f4:f2",
        "address": "fe80::b5f1:88a2:5f16:2998",
        "netmask": "ffff:ffff:ffff:ffff::",
        "family": "IPv6",
        "scopeid": 34
      },
      {
        "name": "vEthernet (Default Switch)",
        "internal": false,
        "mac": "00:15:5d:ea:f4:f2",
        "address": "192.168.76.65",
        "netmask": "255.255.255.240",
        "family": "IPv4"
      }
    ],
    "host": "DEVSYSTEM1"
  },
  "javascriptStack": {
    "message": "No stack.",
    "stack": [
      "Unavailable."
    ]
  },
  "nativeStack": [
    {
      "pc": "0x00007ff7e64b2449",
      "symbol": "std::basic_ostream<char,std::char_traits<char> >::operator<<+11577"
    },
    {
      "pc": "0x00007ff7e64b69a9",
      "symbol": "std::basic_ostream<char,std::char_traits<char> >::operator<<+29337"
    },
    {
      "pc": "0x00007ff7e64b5828",
      "symbol": "std::basic_ostream<char,std::char_traits<char> >::operator<<+24856"
    },
    {
      "pc": "0x00007ff7e65ed8c2",
      "symbol": "v8::base::CPU::has_sse+68658"
    },
    {
      "pc": "0x00007ff7e6e09bbe",
      "symbol": "v8::Isolate::ReportExternalAllocationLimitReached+94"
    },
    {
      "pc": "0x00007ff7e6df1c91",
      "symbol": "v8::SharedArrayBuffer::Externalize+833"
    },
    {
      "pc": "0x00007ff7e6cbe1ec",
      "symbol": "v8::internal::Heap::EphemeronKeyWriteBarrierFromCode+1436"
    },
    {
      "pc": "0x00007ff7e6cc6171",
      "symbol": "v8::internal::Heap::PageFlagsAreConsistent+3761"
    },
    {
      "pc": "0x00007ff7e6cbb743",
      "symbol": "v8::internal::Heap::CollectGarbage+1283"
    },
    {
      "pc": "0x00007ff7e6cb9db4",
      "symbol": "v8::internal::Heap::AddRetainedMap+2452"
    },
    {
      "pc": "0x00007ff7e6cdafbd",
      "symbol": "v8::internal::Factory::NewFillerObject+61"
    },
    {
      "pc": "0x00007ff7e6a41871",
      "symbol": "v8::internal::interpreter::JumpTableTargetOffsets::iterator::operator=+1665"
    },
    {
      "pc": "0x00007ff7e7256c4d",
      "symbol": "v8::internal::SetupIsolateDelegate::SetupHeap+546637"
    },
    {
      "pc": "0x00007ff7e71df72d",
      "symbol": "v8::internal::SetupIsolateDelegate::SetupHeap+57901"
    },
    {
      "pc": "0x00007ff7e72b2c7e",
      "symbol": "v8::internal::SetupIsolateDelegate::SetupHeap+923518"
    },
    {
      "pc": "0x00007ff7e71dbbfc",
      "symbol": "v8::internal::SetupIsolateDelegate::SetupHeap+42748"
    },
    {
      "pc": "0x00007ff7e71d9131",
      "symbol": "v8::internal::SetupIsolateDelegate::SetupHeap+31793"
    },
    {
      "pc": "0x00007ff7e71d8d1c",
      "symbol": "v8::internal::SetupIsolateDelegate::SetupHeap+30748"
    },
    {
      "pc": "0x00007ff7e6d178a3",
      "symbol": "v8::internal::Execution::CallWasm+1395"
    },
    {
      "pc": "0x00007ff7e6d17226",
      "symbol": "v8::internal::Execution::Call+182"
    },
    {
      "pc": "0x00007ff7e6de829d",
      "symbol": "v8::Function::Call+605"
    },
    {
      "pc": "0x00007ff7e666d008",
      "symbol": "node::CallbackScope::~CallbackScope+776"
    },
    {
      "pc": "0x00007ff7e666d2c4",
      "symbol": "node::CallbackScope::~CallbackScope+1476"
    },
    {
      "pc": "0x00007ff7e6666f53",
      "symbol": "v8::internal::compiler::Operator::EffectOutputCount+179"
    },
    {
      "pc": "0x00007ff7e652bd00",
      "symbol": "v8::internal::MicrotaskQueue::microtasks_policy+19936"
    },
    {
      "pc": "0x00007ff7e652c52c",
      "symbol": "v8::internal::MicrotaskQueue::microtasks_policy+22028"
    },
    {
      "pc": "0x00007ff7e6527385",
      "symbol": "v8::internal::MicrotaskQueue::microtasks_policy+1125"
    },
    {
      "pc": "0x00007ff7e668c462",
      "symbol": "uv_thread_self+2722"
    },
    {
      "pc": "0x00007ff7e668c4d7",
      "symbol": "uv_thread_self+2839"
    },
    {
      "pc": "0x00007ff7e668f2ef",
      "symbol": "uv_pipe_pending_type+3471"
    },
    {
      "pc": "0x00007ff7e669962c",
      "symbol": "uv_loop_init+860"
    },
    {
      "pc": "0x00007ff7e6699954",
      "symbol": "uv_run+244"
    },
    {
      "pc": "0x00007ff7e65a4851",
      "symbol": "v8::internal::interpreter::BytecodeArrayWriter::source_position_table_builder+31777"
    },
    {
      "pc": "0x00007ff7e6616433",
      "symbol": "node::Start+275"
    },
    {
      "pc": "0x00007ff7e6486a9c",
      "symbol": "RC4_options+340380"
    },
    {
      "pc": "0x00007ff7e730ed38",
      "symbol": "v8::internal::SetupIsolateDelegate::SetupHeap+1300536"
    },
    {
      "pc": "0x00007ffedac97bd4",
      "symbol": ""
    },
    {
      "pc": "0x00007ffedcbcce51",
      "symbol": "RtlUserThreadStart+33"
    }
  ],
  "javascriptHeap": {
    "totalMemory": 7315456,
    "totalCommittedMemory": 7315456,
    "usedMemory": 6316136,
    "availableMemory": 2192023888,
    "memoryLimit": 2197815296,
    "heapSpaces": {
      "read_only_space": {
        "memorySize": 262144,
        "committedMemory": 262144,
        "capacity": 32808,
        "used": 32808,
        "available": 0
      },
      "new_space": {
        "memorySize": 1048576,
        "committedMemory": 1048576,
        "capacity": 1047456,
        "used": 1047456,
        "available": 0
      },
      "old_space": {
        "memorySize": 4861952,
        "committedMemory": 4861952,
        "capacity": 4842360,
        "used": 4643752,
        "available": 198608
      },
      "code_space": {
        "memorySize": 430080,
        "committedMemory": 430080,
        "capacity": 208928,
        "used": 198304,
        "available": 10624
      },
      "map_space": {
        "memorySize": 528384,
        "committedMemory": 528384,
        "capacity": 527280,
        "used": 259920,
        "available": 267360
      },
      "large_object_space": {
        "memorySize": 135168,
        "committedMemory": 135168,
        "capacity": 131112,
        "used": 131112,
        "available": 0
      },
      "code_large_object_space": {
        "memorySize": 49152,
        "committedMemory": 49152,
        "capacity": 2784,
        "used": 2784,
        "available": 0
      },
      "new_large_object_space": {
        "memorySize": 0,
        "committedMemory": 0,
        "capacity": 1047456,
        "used": 0,
        "available": 1047456
      }
    }
  },
  "resourceUsage": {
    "userCpuSeconds": 0.796,
    "kernelCpuSeconds": 0.531,
    "cpuConsumptionPercent": 0.027043,
    "maxRss": 36364288,
    "pageFaults": {
      "IORequired": 17664,
      "IONotRequired": 0
    },
    "fsActivity": {
      "reads": 1740,
      "writes": 94
    }
  },
  "libuv": [
  ],
  "workers": [
  ],
  "environmentVariables": {
    "ALLUSERSPROFILE": "C:\\ProgramData",
    "AMDAPPSDKROOT": "C:\\Program Files (x86)\\AMD APP SDK\\3.0\\",
    "APPDATA": "C:\\Users\\htafo\\AppData\\Roaming",
    "ChocolateyInstall": "C:\\ProgramData\\chocolatey",
    "CommonProgramFiles": "C:\\Program Files\\Common Files",
    "CommonProgramFiles(x86)": "C:\\Program Files (x86)\\Common Files",
    "CommonProgramW6432": "C:\\Program Files\\Common Files",
    "COMPOSE_CONVERT_WINDOWS_PATHS": "1",
    "COMPUTERNAME": "DEVSYSTEM1",
    "ComSpec": "C:\\WINDOWS\\system32\\cmd.exe",
    "configsetroot": "C:\\WINDOWS\\ConfigSetRoot",
    "CONTRACT_NAME": "validator-tools",
    "DriverData": "C:\\Windows\\System32\\Drivers\\DriverData",
    "GPU_MAX_ALLOC_PERCENT": "100",
    "GPU_SINGLE_ALLOC_PERCENT": "100",
    "HOME": "C:\\Users\\htafo",
    "HOMEDRIVE": "C:",
    "HOMEPATH": "\\Users\\htafo",
    "INIT_CWD": "C:\\users\\htafo\\dev\\near\\validator-tools",
    "LOCALAPPDATA": "C:\\Users\\htafo\\AppData\\Local",
    "LOGONSERVER": "\\\\DEVSYSTEM1",
    "NODE": "C:\\Program Files\\nodejs\\node.exe",
    "NODE_ENV": "betanet",
    "NODE_EXE": "C:\\Program Files\\nodejs\\\\node.exe",
    "NPM_CLI_JS": "C:\\Users\\htafo\\AppData\\Roaming\\npm\\node_modules\\npm\\bin\\npm-cli.js",
    "npm_config_access": "",
    "npm_config_allow_same_version": "",
    "npm_config_also": "",
    "npm_config_always_auth": "",
    "npm_config_argv": "{\"remain\":[],\"cooked\":[\"run\",\"start\"],\"original\":[\"run\",\"start\"]}",
    "npm_config_audit": "true",
    "npm_config_audit_level": "low",
    "npm_config_auth_type": "legacy",
    "npm_config_before": "",
    "npm_config_bin_links": "true",
    "npm_config_browser": "",
    "npm_config_ca": "",
    "npm_config_cache": "C:\\Users\\htafo\\AppData\\Roaming\\npm-cache",
    "npm_config_cache_lock_retries": "10",
    "npm_config_cache_lock_stale": "60000",
    "npm_config_cache_lock_wait": "10000",
    "npm_config_cache_max": "Infinity",
    "npm_config_cache_min": "10",
    "npm_config_cafile": "",
    "npm_config_cert": "",
    "npm_config_cidr": "",
    "npm_config_color": "true",
    "npm_config_commit_hooks": "true",
    "npm_config_depth": "Infinity",
    "npm_config_description": "true",
    "npm_config_dev": "",
    "npm_config_dry_run": "",
    "npm_config_editor": "notepad.exe",
    "npm_config_engine_strict": "",
    "npm_config_fetch_retries": "2",
    "npm_config_fetch_retry_factor": "10",
    "npm_config_fetch_retry_maxtimeout": "60000",
    "npm_config_fetch_retry_mintimeout": "10000",
    "npm_config_force": "",
    "npm_config_format_package_lock": "true",
    "npm_config_fund": "true",
    "npm_config_git": "git",
    "npm_config_git_tag_version": "true",
    "npm_config_global": "",
    "npm_config_globalconfig": "C:\\Users\\htafo\\AppData\\Roaming\\npm\\etc\\npmrc",
    "npm_config_globalignorefile": "C:\\Users\\htafo\\AppData\\Roaming\\npm\\etc\\npmignore",
    "npm_config_global_style": "",
    "npm_config_group": "",
    "npm_config_ham_it_up": "",
    "npm_config_heading": "npm",
    "npm_config_https_proxy": "",
    "npm_config_if_present": "",
    "npm_config_ignore_prepublish": "",
    "npm_config_ignore_scripts": "",
    "npm_config_init_author_email": "",
    "npm_config_init_author_name": "",
    "npm_config_init_author_url": "",
    "npm_config_init_license": "MIT",
    "npm_config_init_module": "C:\\Users\\htafo\\.npm-init.js",
    "npm_config_init_version": "1.0.0",
    "npm_config_json": "",
    "npm_config_key": "",
    "npm_config_legacy_bundling": "",
    "npm_config_link": "",
    "npm_config_local_address": "",
    "npm_config_loglevel": "notice",
    "npm_config_logs_max": "10",
    "npm_config_long": "",
    "npm_config_maxsockets": "50",
    "npm_config_message": "%s",
    "npm_config_metrics_registry": "https://registry.yarnpkg.com/",
    "npm_config_node_gyp": "C:\\Users\\htafo\\AppData\\Roaming\\npm\\node_modules\\npm\\node_modules\\node-gyp\\bin\\node-gyp.js",
    "npm_config_node_options": "",
    "npm_config_node_version": "12.16.3",
    "npm_config_noproxy": "",
    "npm_config_offline": "",
    "npm_config_onload_script": "",
    "npm_config_only": "",
    "npm_config_optional": "true",
    "npm_config_otp": "",
    "npm_config_package_lock": "true",
    "npm_config_package_lock_only": "",
    "npm_config_parseable": "",
    "npm_config_prefer_offline": "",
    "npm_config_prefer_online": "",
    "npm_config_prefix": "C:\\Users\\htafo\\AppData\\Roaming\\npm",
    "npm_config_preid": "",
    "npm_config_production": "",
    "npm_config_progress": "true",
    "npm_config_proxy": "",
    "npm_config_read_only": "",
    "npm_config_rebuild_bundle": "true",
    "npm_config_registry": "https://registry.yarnpkg.com/",
    "npm_config_rollback": "true",
    "npm_config_save": "true",
    "npm_config_save_bundle": "",
    "npm_config_save_dev": "",
    "npm_config_save_exact": "",
    "npm_config_save_optional": "",
    "npm_config_save_prefix": "^",
    "npm_config_save_prod": "",
    "npm_config_scope": "",
    "npm_config_scripts_prepend_node_path": "warn-only",
    "npm_config_script_shell": "",
    "npm_config_searchexclude": "",
    "npm_config_searchlimit": "20",
    "npm_config_searchopts": "",
    "npm_config_searchstaleness": "900",
    "npm_config_send_metrics": "",
    "npm_config_shell": "C:\\WINDOWS\\system32\\cmd.exe",
    "npm_config_shrinkwrap": "true",
    "npm_config_sign_git_commit": "",
    "npm_config_sign_git_tag": "",
    "npm_config_sso_poll_frequency": "500",
    "npm_config_sso_type": "oauth",
    "npm_config_strict_ssl": "true",
    "npm_config_tag": "latest",
    "npm_config_tag_version_prefix": "v",
    "npm_config_timing": "",
    "npm_config_tmp": "C:\\Users\\htafo\\AppData\\Local\\Temp",
    "npm_config_umask": "0000",
    "npm_config_unicode": "",
    "npm_config_unsafe_perm": "true",
    "npm_config_update_notifier": "true",
    "npm_config_usage": "",
    "npm_config_user": "",
    "npm_config_userconfig": "C:\\Users\\htafo\\.npmrc",
    "npm_config_user_agent": "yarn/1.9.4 npm/? node/v12.16.3 win32 x64",
    "npm_config_version": "",
    "npm_config_versions": "",
    "npm_config_version_commit_hooks": "true",
    "npm_config_version_git_message": "v%s",
    "npm_config_version_git_tag": "true",
    "npm_config_version_tag_prefix": "v",
    "npm_config_viewer": "browser",
    "npm_execpath": "C:\\Users\\htafo\\AppData\\Roaming\\npm\\node_modules\\npm\\bin\\npm-cli.js",
    "npm_lifecycle_event": "start",
    "npm_lifecycle_script": "env-cmd -f ./neardev/dev-account.env parcel src/index.html",
    "npm_node_execpath": "C:\\Program Files\\nodejs\\node.exe",
    "npm_package_browserslist_development_0": "last 1 chrome version",
    "npm_package_browserslist_development_1": "last 1 firefox version",
    "npm_package_browserslist_development_2": "last 1 safari version",
    "npm_package_browserslist_production_0": ">0.2%",
    "npm_package_browserslist_production_1": "not dead",
    "npm_package_browserslist_production_2": "not op_mini all",
    "npm_package_dependencies_big_js": "^5.2.2",
    "npm_package_dependencies_near_api_js": "^0.24.0",
    "npm_package_dependencies_react": "^16.8.0",
    "npm_package_dependencies_react_dom": "^16.8.0",
    "npm_package_dependencies_regenerator_runtime": "^0.13.5",
    "npm_package_dependencies__material_ui_core": "^4.0.0",
    "npm_package_dependencies__material_ui_icons": "^4.9.1",
    "npm_package_dependencies__types_react": "^16.8.6",
    "npm_package_description": "<br /> <br />",
    "npm_package_devDependencies_assemblyscript": "^0.9.4",
    "npm_package_devDependencies_babel_jest": "^26.0.0",
    "npm_package_devDependencies_env_cmd": "^10.1.0",
    "npm_package_devDependencies_gh_pages": "^2.2.0",
    "npm_package_devDependencies_jest": "^26.0.1",
    "npm_package_devDependencies_jest_environment_node": "^26.0.0",
    "npm_package_devDependencies_near_sdk_as": "^0.3.1",
    "npm_package_devDependencies_near_shell": "^0.22.0",
    "npm_package_devDependencies_nodemon": "^2.0.3",
    "npm_package_devDependencies_parcel_bundler": "^1.12.4",
    "npm_package_devDependencies_react_test_renderer": "^16.13.1",
    "npm_package_devDependencies__babel_core": "^7.10.1",
    "npm_package_devDependencies__babel_plugin_proposal_class_properties": "^7.10.1",
    "npm_package_devDependencies__babel_preset_env": "^7.9.5",
    "npm_package_devDependencies__babel_preset_react": "^7.9.4",
    "npm_package_eslintConfig_extends": "react-app",
    "npm_package_gitHead": "a4ef7d5bb85bcbd89093adff1cc6255d88046357",
    "npm_package_jest_moduleNameMapper____css_less__": "<rootDir>/src/__mocks__/fileMock.js",
    "npm_package_jest_moduleNameMapper____jpg_ico_jpeg_png_gif_eot_otf_webp_svg_ttf_woff_woff2_mp4_webm_wav_mp3_m4a_aac_oga__": "<rootDir>/src/__mocks__/fileMock.js",
    "npm_package_jest_setupFiles_0": "<rootDir>/src/jest.init.js",
    "npm_package_jest_testEnvironment": "near-shell/test_environment",
    "npm_package_jest_testPathIgnorePatterns_0": "<rootDir>/assembly/",
    "npm_package_jest_testPathIgnorePatterns_1": "<rootDir>/node_modules/",
    "npm_package_name": "validator-tools",
    "npm_package_readmeFilename": "README.md",
    "npm_package_scripts_build": "npm run build:contract && npm run build:web",
    "npm_package_scripts_build_contract": "node asconfig.js",
    "npm_package_scripts_build_web": "parcel build src/index.html --public-url ./",
    "npm_package_scripts_deploy": "npm run build && npm run deploy:contract && npm run deploy:pages",
    "npm_package_scripts_deploy_contract": "near deploy",
    "npm_package_scripts_deploy_pages": "gh-pages -d dist/",
    "npm_package_scripts_dev": "nodemon --watch assembly -e ts --exec \"npm run start\"",
    "npm_package_scripts_dev_deploy_contract": "near dev-deploy",
    "npm_package_scripts_prestart": "npm run build:contract && npm run dev:deploy:contract",
    "npm_package_scripts_start": "env-cmd -f ./neardev/dev-account.env parcel src/index.html",
    "npm_package_scripts_test": "asp && npm run build:contract && jest test --runInBand",
    "npm_package_version": "0.1.0",
    "NPM_PREFIX_NPM_CLI_JS": "C:\\Users\\htafo\\AppData\\Roaming\\npm\\node_modules\\npm\\bin\\npm-cli.js",
    "NUMBER_OF_PROCESSORS": "16",
    "OneDrive": "C:\\Users\\htafo\\OneDrive",
    "OneDriveConsumer": "C:\\Users\\htafo\\OneDrive",
    "OS": "Windows_NT",
    "PATH": "C:\\Users\\htafo\\AppData\\Roaming\\npm\\node_modules\\npm\\node_modules\\npm-lifecycle\\node-gyp-bin;C:\\users\\htafo\\dev\\near\\validator-tools\\node_modules\\.bin;C:\\users\\htafo\\dev\\near\\validator-tools\\node_modules\\.bin;C:\\Users\\htafo\\AppData\\Local\\Yarn\\Data\\link\\node_modules\\.bin;C:\\users\\htafo\\dev\\near\\validator-tools\\node_modules\\.bin;C:\\Users\\htafo\\AppData\\Local\\Yarn\\Data\\link\\node_modules\\.bin;C:\\Users\\htafo\\AppData\\Local\\Yarn\\bin;C:\\Program Files\\libexec\\lib\\node_modules\\npm\\bin\\node-gyp-bin;C:\\Program Files\\lib\\node_modules\\npm\\bin\\node-gyp-bin;C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\node-gyp-bin;C:\\Program Files\\nodejs;C:\\Program Files\\Docker\\Docker\\Resources\\bin;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files (x86)\\AMD APP SDK\\3.0\\bin\\x86_64;C:\\Program Files (x86)\\AMD APP SDK\\3.0\\bin\\x86;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\Git\\cmd;C:\\ProgramData\\chocolatey\\bin;C:\\Program Files (x86)\\Yarn\\bin\\;C:\\php;C:\\ProgramData\\ComposerSetup\\bin;C:\\Program Files (x86)\\AMD\\ATI.ACE\\Core-Static;C:\\Program Files (x86)\\ATI Technologies\\ATI.ACE\\Core-Static;C:\\Program Files\\PuTTY\\;C:\\Program Files\\nodejs\\;C:\\Users\\htafo\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Users\\htafo\\AppData\\Roaming\\npm",
    "Path": "C:\\Users\\htafo\\AppData\\Roaming\\npm\\node_modules\\npm\\node_modules\\npm-lifecycle\\node-gyp-bin;C:\\users\\htafo\\dev\\near\\validator-tools\\node_modules\\.bin;C:\\users\\htafo\\dev\\near\\validator-tools\\node_modules\\.bin;C:\\Users\\htafo\\AppData\\Local\\Yarn\\Data\\link\\node_modules\\.bin;C:\\users\\htafo\\dev\\near\\validator-tools\\node_modules\\.bin;C:\\Users\\htafo\\AppData\\Local\\Yarn\\Data\\link\\node_modules\\.bin;C:\\Users\\htafo\\AppData\\Local\\Yarn\\bin;C:\\Program Files\\libexec\\lib\\node_modules\\npm\\bin\\node-gyp-bin;C:\\Program Files\\lib\\node_modules\\npm\\bin\\node-gyp-bin;C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\node-gyp-bin;C:\\Program Files\\nodejs;C:\\Program Files\\Docker\\Docker\\Resources\\bin;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files (x86)\\AMD APP SDK\\3.0\\bin\\x86_64;C:\\Program Files (x86)\\AMD APP SDK\\3.0\\bin\\x86;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\Git\\cmd;C:\\ProgramData\\chocolatey\\bin;C:\\Program Files (x86)\\Yarn\\bin\\;C:\\php;C:\\ProgramData\\ComposerSetup\\bin;C:\\Program Files (x86)\\AMD\\ATI.ACE\\Core-Static;C:\\Program Files (x86)\\ATI Technologies\\ATI.ACE\\Core-Static;C:\\Program Files\\PuTTY\\;C:\\Program Files\\nodejs\\;C:\\Users\\htafo\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Users\\htafo\\AppData\\Roaming\\npm",
    "PATHEXT": ".COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JSE;.WSF;.WSH;.MSC;.CPL",
    "PROCESSOR_ARCHITECTURE": "AMD64",
    "PROCESSOR_IDENTIFIER": "AMD64 Family 23 Model 1 Stepping 1, AuthenticAMD",
    "PROCESSOR_LEVEL": "23",
    "PROCESSOR_REVISION": "0101",
    "ProgramData": "C:\\ProgramData",
    "ProgramFiles": "C:\\Program Files",
    "ProgramFiles(x86)": "C:\\Program Files (x86)",
    "ProgramW6432": "C:\\Program Files",
    "PROMPT": "$P$G",
    "PSModulePath": "C:\\Users\\htafo\\Documents\\WindowsPowerShell\\Modules;C:\\Program Files\\WindowsPowerShell\\Modules;C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules",
    "PUBLIC": "C:\\Users\\Public",
    "SystemDrive": "C:",
    "SystemRoot": "C:\\WINDOWS",
    "TEMP": "C:\\Users\\htafo\\AppData\\Local\\Temp",
    "TMP": "C:\\Users\\htafo\\AppData\\Local\\Temp",
    "USERDOMAIN": "DEVSYSTEM1",
    "USERDOMAIN_ROAMINGPROFILE": "DEVSYSTEM1",
    "USERNAME": "htafo",
    "USERPROFILE": "C:\\Users\\htafo",
    "UV_THREADPOOL_SIZE": "16",
    "VS140COMNTOOLS": "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\Common7\\Tools\\",
    "windir": "C:\\WINDOWS",
    "YARN_WRAP_OUTPUT": "false"
  },
  "sharedObjects": [
    "C:\\Program Files\\nodejs\\node.exe",
    "C:\\WINDOWS\\SYSTEM32\\ntdll.dll",
    "C:\\WINDOWS\\System32\\KERNEL32.DLL",
    "C:\\WINDOWS\\System32\\KERNELBASE.dll",
    "C:\\WINDOWS\\System32\\WS2_32.dll",
    "C:\\WINDOWS\\System32\\RPCRT4.dll",
    "C:\\WINDOWS\\SYSTEM32\\dbghelp.dll",
    "C:\\WINDOWS\\System32\\PSAPI.DLL",
    "C:\\WINDOWS\\System32\\ucrtbase.dll",
    "C:\\WINDOWS\\System32\\ADVAPI32.dll",
    "C:\\WINDOWS\\System32\\msvcrt.dll",
    "C:\\WINDOWS\\System32\\sechost.dll",
    "C:\\WINDOWS\\SYSTEM32\\IPHLPAPI.DLL",
    "C:\\WINDOWS\\SYSTEM32\\USERENV.dll",
    "C:\\WINDOWS\\System32\\profapi.dll",
    "C:\\WINDOWS\\System32\\USER32.dll",
    "C:\\WINDOWS\\System32\\win32u.dll",
    "C:\\WINDOWS\\System32\\GDI32.dll",
    "C:\\WINDOWS\\System32\\gdi32full.dll",
    "C:\\WINDOWS\\System32\\msvcp_win.dll",
    "C:\\WINDOWS\\System32\\CRYPT32.dll",
    "C:\\WINDOWS\\System32\\MSASN1.dll",
    "C:\\WINDOWS\\System32\\bcrypt.dll",
    "C:\\WINDOWS\\SYSTEM32\\WINMM.dll",
    "C:\\WINDOWS\\SYSTEM32\\winmmbase.dll",
    "C:\\WINDOWS\\System32\\cfgmgr32.dll",
    "C:\\WINDOWS\\System32\\bcryptPrimitives.dll",
    "C:\\WINDOWS\\System32\\IMM32.DLL",
    "C:\\WINDOWS\\System32\\powrprof.dll",
    "C:\\WINDOWS\\System32\\UMPDC.dll",
    "C:\\WINDOWS\\SYSTEM32\\CRYPTBASE.DLL",
    "C:\\WINDOWS\\system32\\uxtheme.dll",
    "C:\\WINDOWS\\System32\\combase.dll",
    "C:\\WINDOWS\\system32\\mswsock.dll",
    "C:\\WINDOWS\\System32\\kernel.appcore.dll",
    "C:\\WINDOWS\\System32\\NSI.dll",
    "C:\\WINDOWS\\SYSTEM32\\dhcpcsvc6.DLL",
    "C:\\WINDOWS\\SYSTEM32\\dhcpcsvc.DLL",
    "C:\\WINDOWS\\SYSTEM32\\DNSAPI.dll",
    "C:\\WINDOWS\\system32\\napinsp.dll",
    "C:\\WINDOWS\\system32\\pnrpnsp.dll",
    "C:\\WINDOWS\\System32\\winrnr.dll",
    "C:\\WINDOWS\\system32\\NLAapi.dll",
    "C:\\WINDOWS\\system32\\wshbth.dll"
  ]
}
'''
'''--- src/App.css ---
/*

.App-link {
  color: #61dafb;
}

.logo-wrapper {
  display: flex;
  flex-direction: row-reverse;
}

.App-logo {
  animation: App-logo-spin infinite 20s linear;
  pointer-events: none;
}

.margin-logo {
  margin: 20px;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

.image-wrapper {
  display: flex;
  align-items: center;
  flex-direction: column;
  justify-content: center;
}

.logo {
  width: 23%;
}

*/
'''
'''--- src/App.js ---
import 'regenerator-runtime/runtime';
import React, { Component, useCallback, useEffect, useState } from 'react'
import PropTypes from 'prop-types'
import logo from './assets/logo.svg';
import blazenetlogo from './assets/blazenet-io-icon.png';
import nearlogo from './assets/near_logo_wht.svg';
import near from './assets/near.svg';
import { utils, validators } from 'near-api-js';

import Container from '@material-ui/core/Container';
import Typography from '@material-ui/core/Typography';
import Box from '@material-ui/core/Box';
import { makeStyles } from '@material-ui/core/styles';
import Grid from '@material-ui/core/Grid';
import Card from '@material-ui/core/Card';
import CardActions from '@material-ui/core/CardActions';
import CardContent from '@material-ui/core/CardContent';
import Button from '@material-ui/core/Button';

import { Tooltip } from '@material-ui/core';

import ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';
import ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';
import CheckCircleOutlineIcon from '@material-ui/icons/CheckCircleOutline';
import CheckCircleIcon from '@material-ui/icons/CheckCircle';
import ErrorIcon from '@material-ui/icons/Error';

import { green } from '@material-ui/core/colors';
import { yellow } from '@material-ui/core/colors';
import { red } from '@material-ui/core/colors';

import './App.css';
import Signup from './Signup.js';
import Search from './Search.js';
import MenuAppBar from './AppBar.js';

import * as types from './types.ts';
//import {PublicKey} from '../node_modules/near-api-js/src/utils/key_pair';
// import {findSeatPrice} from '../node_modules/near-api-js/src/validators';
// const validators = require('near-api-js/lib/validators')

//const merge = require('deepmerge')

class App extends Component {

  intervalID;

  constructor(props) {
    super(props);

    this.state = {

      login: false,
      balance: null,
      messages: null,
      balance: null,
      error: null,
      blockHeight: null,
      epoch: null,
      startHeight: null,
      isLoading: true,
      networkState: null,
      validators: null,
      refreshValidators: false,
      seatPrice: null,
      nextSeatPrice: null,

    }

    this.signedInFlow = this.signedInFlow.bind(this);
    this.requestSignIn = this.requestSignIn.bind(this);
    this.requestSignOut = this.requestSignOut.bind(this);
    this.signedOutFlow = this.signedOutFlow.bind(this);
    this.getMessages = this.getMessages.bind(this);
    this.loadData = this.loadData.bind(this);
  }

  componentDidMount() {

    let loggedIn = this.props.wallet.isSignedIn();

    if (loggedIn) {
      this.signedInFlow();

    } else {
      this.signedOutFlow();
    }
  }

  componentWillUnmount() {

    clearInterval(this.intervalID);

  }

  async signedInFlow() {

    this.setState({
      login: true,
    })

    const accountId = await this.props.wallet.getAccountId()

    //console.log(await (this.props.wallet.account()).state());

    this.setState({balance: (await this.props.wallet.account().state()).amount});

    if (window.location.search.includes("account_id")) {
      window.location.replace(window.location.origin + window.location.pathname)
    }
    
    //await this.welcome();
    await this.getMessages();
    this.loadData();

  }

  async getValidators() {

    // Get the additional EXPERIMENTAL params to calc seat price
    const genesisConfig = await this.props.near.connection.provider.sendJsonRpc('EXPERIMENTAL_genesis_config', {});
    console.log(genesisConfig);
    console.log(genesisConfig.genesis_height)

    const contract = await this.props.near.connection.provider.sendJsonRpc('query', {request_type: 'view_state', finality: 'final', account_id: 'freshnears', prefix_base64: ''});
    //console.log(contract)
    let contractParsed = contract.values.map((data, i) => {
      return { 'key': atob(data.key), 'value': atob(data.value) };
    });
    //console.log(Base64.decode(contract.values[0].value))
    console.log(contractParsed)
    //console.log(atob(contract.values[0].value).replace(/\\u([0-9]|[a-fA-F])([0-9]|[a-fA-F])([0-9]|[a-fA-F])([0-9]|[a-fA-F])/g, ""))

    //console.log(String.fromCharCode.apply(atob(contract.values[0].value)))
    //.replace(/[^\x20-\x7E]/g, '');

    // let utf8Bytes = atob(contract.values[0].value);
    // console.log((utf8Bytes))

    let data = types.deserializeData(contract);
    console.log(data)
    // Get validators
    const result = await this.props.near.connection.provider.sendJsonRpc('validators', [null]);
    result.genesisConfig = genesisConfig;
    result.numSeats = genesisConfig.num_block_producer_seats + genesisConfig.avg_hidden_validator_seats_per_shard.reduce((a, b) => a + b);

    return result;
  }

  async loadData() {

    //const { findSeatPrice } = require('./validators.ts');
    //const { validators } = require('near-api-js');

    console.log("Loading Data...");
    this.setState({ isLoading: true });

    // Get the Network State
    const networkState = await this.props.near.connection.provider.sendJsonRpc('status', {});
    console.log(networkState)
    this.setState({networkState: networkState});
    this.setState({blockHeight: networkState.sync_info.latest_block_height});

    // Get the Network State
    const validatorsObj  = await this.getValidators();
    console.log(validatorsObj)

    let findCurrentSeatPrice = validators.findSeatPrice(validatorsObj.current_validators, validatorsObj.numSeats);
    let findNextSeatPrice = validators.findSeatPrice(validatorsObj.next_validators, validatorsObj.numSeats);

    // Set state
    this.setState({startHeight: validatorsObj.epoch_start_height});
    this.setState({validators: validatorsObj, refreshValidators: true, isLoading: false});
    this.setState({seatPrice: utils.format.formatNearAmount(findCurrentSeatPrice.toString(), 0) });
    this.setState({nextSeatPrice: utils.format.formatNearAmount(findNextSeatPrice.toString(), 0)});

    this.intervalID = setTimeout(this.loadData.bind(this), 100000);

    // fetch( "https://rpc.betanet.nearprotocol.com", {
    //   method: 'POST',
    //   headers: new Headers({
    //     'Accept': 'application/json',
    //     'Content-Type': 'application/json',
    //   }),
    //   body: JSON.stringify({
    //     jsonrpc: '2.0',
    //     id: 'none',
    //     method: 'validators',
    //     params: [null]
    //   })
    // })
    // .then(response => {
    //   if (response.ok) {
    //     return response.json();
    //   } else {
    //     throw new Error('Something went wrong ...');
    //   }
    // })
    // .then((data) => {

    //   //console.log(data.result)
    //   //console.log(data.result.current_validators)

    //   let currentValidators = data.result.current_validators;
    //     let nextValidators = data.result.next_validators.map((member) => {
    //         return {
    //             ...member,
    //             nextValidator: true
    //         }
    //   });

    //   

    // })
    // .catch(error => this.setState({ error, refreshValidators: false, isLoading: false }));
  }

  async getMessages() {

    let validators = await this.props.contract.getMessages();
    console.log(validators);
    //let validatorIdx = validators.map(e => e.text).indexOf('test')
    //console.log(validatorIdx)
    //let result = await this.props.contract.removeValidator({ index: validatorIdx });
    //console.log(result);
    //console.log(await this.props.contract.getMessages())

    this.setState({messages: await this.props.contract.getMessages()});

  }

  async requestSignIn() {

    const appTitle = 'BlazeNet Validator Tools';

    await this.props.wallet.requestSignIn(
      window.nearConfig.contractName,
      appTitle
    )
  }

  requestSignOut() {

    this.props.wallet.signOut();

    setTimeout(this.signedOutFlow, 500);
  }

  signedOutFlow() {

    if (window.location.search.includes("account_id")) {
      window.location.replace(window.location.origin + window.location.pathname)
    }

    this.setState({
      login: false,
    })

  }

  render() {

    self = this;

    const { networkState, validators, searchTerm, startHeight, blockHeight, refreshValidators, error, seatPrice, nextSeatPrice } = this.state;

    let loggedIn  = this.props.wallet.isSignedIn();

    let numBlocksProduced = (blockHeight - startHeight);
    let percentageComplete = numBlocksProduced / 10000;
    let epochPercent = Math.floor(percentageComplete * 100);
    let epoch = epochPercent;

    const useStyles = makeStyles((theme) => ({

      root: {
        flexGrow: 1,
      },
      nearlogo: {
        'width': '25%',
        'vertical-align': 'middle',
      },
      logo: {
        'flex-grow': 1,
        'font-family': "'Catamaran', sans-serif",
        'font-weight': 600,
        'font-size': 45,
      },
      validators: {
        'min-height': 150,
        textAlign: 'left',
      },
      paper: {
        padding: theme.spacing(3),
        textAlign: 'center',
        color: theme.palette.text.secondary,
      },
      gridItemRight: {
        'text-align': 'right',
      },
      gridItemCenter: {
        'text-align': 'center',
      },
      menuButton: {
        marginRight: theme.spacing(2),
      },
      title: {
        flexGrow: 1,
      },
      headerText: {
        'font-size': '1.2rem',
        'vertical-align': 'middle'
      },
      alignRight: {
        'text-align': 'right',
      },
      alignLeft: {
        'text-align': 'left',
      },
      table: {
        minWidth: 650,
      },
      hideTableCell: {
        [theme.breakpoints.only('xs')]: {
          display: 'none',
        },
        [theme.breakpoints.only('sm')]: {
          display: 'none',
        },
        [theme.breakpoints.only('md')]: {
          display: 'none',
        },

      }
    }));

    function CenteredGrid() {

      const classes = useStyles();

      return (
        <div className={classes.root}>
          <Grid container spacing={5} alignItems="flex-start" alignContent="flex-start">

            <Grid item lg={12} md={12} sm={12} xs={12}>
              <MenuAppBar wallet={self.props.wallet} />
            </Grid>

            <Grid item lg={12} md={12} sm={12} xs={12} className={classes.gridItemCenter}>
              <Typography variant="h4" component="h4">
                NEAR VALIDATOR STATS & TOOLS
               </Typography>               
            </Grid>

            {(!loggedIn) && 
              <>
              <Grid item className={classes.gridItemCenter} lg={12}  md={12} sm={12} xs={12}>
              <Typography variant="h6" component="h6">
              Login to use Validator tools<br/>
                <Button variant="contained" color="secondary" onClick={self.requestSignIn}>Log in</Button>
               </Typography>
                     </Grid>
               </>

            }
           {(loggedIn && validators) &&
              <>
            <Grid item className={classes.validators} lg={3} md={6} sm={6} xs={6} >
              <Card className={classes.root } variant="outlined">
                <CardContent>
                  <Typography className={classes.title} color="primary"  variant="h6" component="h6">
                    {(validators.genesisConfig.chain_id).charAt(0).toUpperCase() + (validators.genesisConfig.chain_id).slice(1)}&nbsp;

                      {(validators.current_validators.length >= 67) ? (<Tooltip title={"Good " + validators.current_validators.length + " validators"} aria-label="Good"><CheckCircleIcon style={{ color: green[600] }} /></Tooltip> ) 
                      : (validators.current_validators.length < 67)
                      ? (<Tooltip title="Need validators" aria-label="Need validators"><ErrorIcon style={{ color: yellow[800] }} /></Tooltip> ) 
                      : (validators.length)}
      
                  </Typography>
                  <Typography variant="h5" component="h2">
                    Validators { validators.current_validators.length}
                  </Typography>
                  <Typography color="textSecondary">
                    Build: {networkState.version.build}
                  </Typography>
                  <Typography color="textSecondary">
                    Version: {networkState.version.version}
                  </Typography>
                </CardContent>
              </Card>
            </Grid>
            <Grid item className={classes.validators} lg={3} md={6} sm={6} xs={6}>
              <Card className={classes.root} variant="outlined">
                <CardContent>
                  <Typography className={classes.title} color="primary" variant="h6" component="h6">
                    EPOCH
                  </Typography>
                  <Typography variant="h5" component="h5">
                    &nbsp;{epoch}%
                  </Typography>
                  <Typography color="textSecondary">
                    Last: {blockHeight}
                  </Typography>
                  <Typography color="textSecondary">
                   Start: {startHeight}
                  </Typography>
                </CardContent>
              </Card>
            </Grid>
            <Grid item className={classes.validators} lg={3} md={6} sm={6} xs={6}>
              <Card className={classes.scoreCard} variant="outlined">
                <CardContent>
                  <Typography className={classes.title} color="primary" variant="h6" component="h6">
                     NEXT SEAT &nbsp; 
                    {
                      (nextSeatPrice > seatPrice)
                      ? <Tooltip title="Seat Price Up" aria-label="Good Standing"><ArrowUpwardIcon style={{ color: yellow[800] }} /></Tooltip> 
                      : <Tooltip title="Seat Price Down" aria-label="Seat Price Down"><ArrowDownwardIcon style={{ color: green[600] }} /></Tooltip>
                    }
                  </Typography>
                  <Typography variant="h5" component="h2">
                    &nbsp;{nextSeatPrice}
                  </Typography>
                  <Typography color="textSecondary">
                    Seat price: {seatPrice}
                  </Typography>
                  <Typography color="textSecondary">
                   &nbsp;
                  </Typography>
                </CardContent>
              </Card>
            </Grid>
            <Grid item className={classes.validators} lg={3} md={6} sm={6} xs={6}>
              <Card className={classes.root } variant="outlined">
                <CardContent>
                  <Typography className={classes.title} color="primary"  variant="h6" component="h6">
                    MY NODE
                  </Typography>
                  <Typography variant="h5" component="h2">
                    &nbsp;Coming Soon...
                  </Typography>
                  <Typography color="textSecondary">
                    HEALTH
                  </Typography>
                  <Typography color="textSecondary">
                    &nbsp;
                  </Typography>
                </CardContent>
              </Card>
            </Grid>
            <Grid item className={classes.validators} lg={12} md={12} sm={12} xs={12}>
              <Search wallet={self.props.wallet} validators={self.state.validators} classes={classes} isLoading={self.state.isLoading} />
            </Grid>
            </>
            }

          </Grid>
        </div>
      );
    }

    if (self.error) {
      return <p>{self.error.message}</p>;
    }

    return (
      <Container>
        <Box my={4}>
          <CenteredGrid />
        </Box>
      </Container>
      )
    }
  }

  App.propTypes = {
    contract: PropTypes.shape({
      addMessage: PropTypes.func.isRequired,
      getMessages: PropTypes.func.isRequired
    }).isRequired,
    wallet: PropTypes.shape({
      requestSignIn: PropTypes.func.isRequired,
      signOut: PropTypes.func.isRequired
    }).isRequired
  }

  export default App;
'''
'''--- src/App.test.js ---
import "regenerator-runtime/runtime";
import React from 'react';
import renderer from 'react-test-renderer';
import App from './App';

let near;
let contract;
let accountId;
let walletConnection
beforeAll(async function () {
    // NOTE: nearlib and nearConfig are made available by near-shell/test_environment
    console.log('nearConfig', nearConfig);
    near = await nearlib.connect(nearConfig);
    accountId = nearConfig.contractName;
    contract = await near.loadContract(nearConfig.contractName, {
        viewMethods: ['welcome'],
        changeMethods: [],
        sender: accountId
    });

    // Fake instance of WalletConnection
    // Feel free to modify for specific tests
    walletConnection = {
      requestSignIn() {
      },
      signOut() {
      },
      isSignedIn() {
        return true;
      },
      getAccountId() {
        return accountId;
      }
    }
});

it('renders without crashing', () => {
  const app = renderer.create(<App contract={contract} wallet={walletConnection}/>);
  let tree = app.toJSON();
  expect(tree).toMatchSnapshot();
});

'''
'''--- src/AppBar.js ---
import React from 'react';
import { makeStyles } from '@material-ui/core/styles';
import AppBar from '@material-ui/core/AppBar';
import Toolbar from '@material-ui/core/Toolbar';
import Typography from '@material-ui/core/Typography';
import IconButton from '@material-ui/core/IconButton';
import MenuIcon from '@material-ui/icons/Menu';
import AccountCircle from '@material-ui/icons/AccountCircle';
import Switch from '@material-ui/core/Switch';
import FormControlLabel from '@material-ui/core/FormControlLabel';
import FormGroup from '@material-ui/core/FormGroup';
import MenuItem from '@material-ui/core/MenuItem';
import Menu from '@material-ui/core/Menu';
import Button from '@material-ui/core/Button';

import blazenetlogo from './assets/blazenet-io-icon.png';
import nearlogo from './assets/near_logo_wht.svg';

const useStyles = makeStyles((theme) => ({
  root: {
    flexGrow: 1,
  },
  menuButton: {
    marginRight: theme.spacing(2),
  },
  title: {
    flexGrow: 1,
  },
  logo: {
    'flex-grow': 1,
    'font-family': "'Catamaran', sans-serif",
    'font-weight': 600,
    'font-size': 45,
  },
  nearlogo: {
    'vertical-align': 'middle',
  },
  headerText: {
    'font-size': '1.2rem',
    'vertical-align': 'middle'
  },
  alignRight: {
    'text-align': 'right',
  },
  alignLeft: {
    'text-align': 'left',
  }
}));

export default function MenuAppBar(props) {
  

  const classes = useStyles();
  const [auth, setAuth] = React.useState(true);
  const [anchorEl, setAnchorEl] = React.useState(null);
  const open = Boolean(anchorEl);

  let loggedIn = props.wallet.isSignedIn();

  const handleMenu = (event) => {
    setAnchorEl(event.currentTarget);
  };

  const handleClose = () => {
    setAnchorEl(null);
  };

  return (
    <div className={classes.root}>
      <AppBar position="static">
        <Toolbar>
          <Typography className={classes.logo}  variant="h1" component="h1">BlazeNet</Typography>
          <div className={classes.alignRight}>
          {auth && (
            <div>
                 <img className={classes.nearlogo} src={nearlogo} alt="NEAR logo" width="25%" />&nbsp;
                 {loggedIn ? 
                  <span className={classes.headerText}>
                  @{accountId}                <IconButton
                  aria-label="account of current user"
                  aria-controls="menu-appbar"
                  aria-haspopup="true"
                  onClick={handleMenu}
                  color="inherit"
                >
                  <AccountCircle />
                </IconButton>
                  </span>
                  : ''}

                {loggedIn ? 
                    <span>
                    &nbsp;<Button  variant="contained" color="secondary" onClick={self.requestSignOut}>Log Out</Button>
                    </span>
                    : <Button variant="contained" color="secondary" onClick={self.requestSignIn}>Log in</Button>}
            </div>
          
          )}
           </div>
        </Toolbar>
      </AppBar>
    </div>
  );
}

'''
'''--- src/Grafana-Dashboard.json ---
{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": "-- Grafana --",
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "gnetId": null,
  "graphTooltip": 0,
  "id": 1,
  "links": [],
  "panels": [
    {
      "collapsed": false,
      "datasource": null,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 0
      },
      "id": 18,
      "panels": [],
      "title": "BlazeNet Node",
      "type": "row"
    },
    {
      "datasource": null,
      "fieldConfig": {
        "defaults": {
          "custom": {},
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 3,
        "w": 3,
        "x": 0,
        "y": 1
      },
      "id": 30,
      "options": {
        "colorMode": "value",
        "graphMode": "none",
        "justifyMode": "auto",
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        }
      },
      "pluginVersion": "7.0.3",
      "targets": [
        {
          "expr": "near_epoch_block_expected_number{instance=\"blazenet.io\", job=\"near\"}",
          "interval": "",
          "legendFormat": "",
          "refId": "A"
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "Blocks Expected",
      "type": "stat"
    },
    {
      "datasource": null,
      "fieldConfig": {
        "defaults": {
          "custom": {},
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "semi-dark-green",
                "value": null
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 3,
        "w": 4,
        "x": 3,
        "y": 1
      },
      "id": 36,
      "options": {
        "colorMode": "value",
        "graphMode": "none",
        "justifyMode": "auto",
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "mean"
          ],
          "fields": "",
          "values": false
        }
      },
      "pluginVersion": "7.0.3",
      "targets": [
        {
          "expr": "near_current_stake{instance=\"blazenet.io\", job=\"near\"}",
          "interval": "",
          "legendFormat": "",
          "refId": "A"
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "Current Stake",
      "type": "stat"
    },
    {
      "alert": {
        "alertRuleTags": {},
        "conditions": [
          {
            "evaluator": {
              "params": [
                97
              ],
              "type": "lt"
            },
            "operator": {
              "type": "and"
            },
            "query": {
              "params": [
                "A",
                "5m",
                "now"
              ]
            },
            "reducer": {
              "params": [],
              "type": "avg"
            },
            "type": "query"
          }
        ],
        "executionErrorState": "alerting",
        "for": "2m",
        "frequency": "1m",
        "handler": 1,
        "message": "Your node has missed 3 blocks. Only 7 more can be missed before being kicked.",
        "name": "BlazeNet % Online Alert",
        "noDataState": "no_data",
        "notifications": [
          {
            "uid": "nz937biMk"
          }
        ]
      },
      "aliasColors": {},
      "bars": false,
      "dashLength": 10,
      "dashes": false,
      "datasource": null,
      "fieldConfig": {
        "defaults": {
          "custom": {},
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 95
              },
              {
                "color": "#EAB839",
                "value": 96
              },
              {
                "color": "green",
                "value": 100
              }
            ]
          }
        },
        "overrides": []
      },
      "fill": 1,
      "fillGradient": 0,
      "gridPos": {
        "h": 6,
        "w": 4,
        "x": 7,
        "y": 1
      },
      "hiddenSeries": false,
      "id": 24,
      "legend": {
        "avg": false,
        "current": false,
        "max": false,
        "min": false,
        "show": true,
        "total": false,
        "values": false
      },
      "lines": true,
      "linewidth": 1,
      "nullPointMode": "null",
      "options": {
        "dataLinks": []
      },
      "percentage": false,
      "pluginVersion": "7.0.3",
      "pointradius": 2,
      "points": false,
      "renderer": "flot",
      "seriesOverrides": [],
      "spaceLength": 10,
      "stack": false,
      "steppedLine": false,
      "targets": [
        {
          "expr": "(near_epoch_block_produced_number{instance=\"blazenet.io\", job=\"near\"} / near_epoch_block_expected_number{instance=\"blazenet.io\", job=\"near\"} ) * 100",
          "interval": "",
          "legendFormat": "",
          "refId": "A"
        }
      ],
      "thresholds": [
        {
          "colorMode": "critical",
          "fill": true,
          "line": true,
          "op": "lt",
          "value": 97
        }
      ],
      "timeFrom": null,
      "timeRegions": [],
      "timeShift": null,
      "title": "% Online",
      "tooltip": {
        "shared": true,
        "sort": 0,
        "value_type": "individual"
      },
      "type": "graph",
      "xaxis": {
        "buckets": null,
        "mode": "time",
        "name": null,
        "show": true,
        "values": []
      },
      "yaxes": [
        {
          "format": "short",
          "label": null,
          "logBase": 1,
          "max": null,
          "min": null,
          "show": true
        },
        {
          "format": "short",
          "label": null,
          "logBase": 1,
          "max": null,
          "min": null,
          "show": true
        }
      ],
      "yaxis": {
        "align": false,
        "alignLevel": null
      }
    },
    {
      "alert": {
        "alertRuleTags": {},
        "conditions": [
          {
            "evaluator": {
              "params": [
                100
              ],
              "type": "lt"
            },
            "operator": {
              "type": "and"
            },
            "query": {
              "params": [
                "A",
                "5m",
                "now"
              ]
            },
            "reducer": {
              "params": [],
              "type": "avg"
            },
            "type": "query"
          }
        ],
        "executionErrorState": "alerting",
        "for": "5m",
        "frequency": "1m",
        "handler": 1,
        "message": "BlazNet's stake has fallen below the current seat price.",
        "name": "BlazeNet - Low Stake Alert",
        "noDataState": "no_data",
        "notifications": [
          {
            "uid": "nz937biMk"
          }
        ]
      },
      "aliasColors": {},
      "bars": false,
      "dashLength": 10,
      "dashes": false,
      "datasource": null,
      "fieldConfig": {
        "defaults": {
          "custom": {},
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "fill": 1,
      "fillGradient": 0,
      "gridPos": {
        "h": 6,
        "w": 4,
        "x": 11,
        "y": 1
      },
      "hiddenSeries": false,
      "id": 16,
      "legend": {
        "avg": false,
        "current": false,
        "max": false,
        "min": false,
        "show": true,
        "total": false,
        "values": false
      },
      "lines": true,
      "linewidth": 1,
      "nullPointMode": "null",
      "options": {
        "dataLinks": []
      },
      "percentage": false,
      "pluginVersion": "7.0.3",
      "pointradius": 2,
      "points": false,
      "renderer": "flot",
      "seriesOverrides": [],
      "spaceLength": 10,
      "stack": false,
      "steppedLine": false,
      "targets": [
        {
          "expr": "(near_current_stake{instance=\"blazenet.io\", job=\"near\"} / near_seat_price{instance=\"blazenet.io\", job=\"near\"}) * 100",
          "interval": "",
          "legendFormat": "",
          "refId": "A"
        }
      ],
      "thresholds": [
        {
          "colorMode": "critical",
          "fill": true,
          "line": true,
          "op": "lt",
          "value": 100
        }
      ],
      "timeFrom": null,
      "timeRegions": [],
      "timeShift": null,
      "title": "% Stake vs Seat Price",
      "tooltip": {
        "shared": true,
        "sort": 0,
        "value_type": "individual"
      },
      "type": "graph",
      "xaxis": {
        "buckets": null,
        "mode": "time",
        "name": null,
        "show": true,
        "values": []
      },
      "yaxes": [
        {
          "format": "short",
          "label": null,
          "logBase": 1,
          "max": null,
          "min": null,
          "show": true
        },
        {
          "format": "short",
          "label": null,
          "logBase": 1,
          "max": null,
          "min": null,
          "show": true
        }
      ],
      "yaxis": {
        "align": false,
        "alignLevel": null
      }
    },
    {
      "alert": {
        "alertRuleTags": {},
        "conditions": [
          {
            "evaluator": {
              "params": [
                5
              ],
              "type": "lt"
            },
            "operator": {
              "type": "and"
            },
            "query": {
              "params": [
                "A",
                "5m",
                "now"
              ]
            },
            "reducer": {
              "params": [],
              "type": "last"
            },
            "type": "query"
          }
        ],
        "executionErrorState": "alerting",
        "for": "5m",
        "frequency": "1m",
        "handler": 1,
        "message": "Peers are > 5. This could signal that this node is running an old version or has been blacklisted.",
        "name": "BlazeNet - Low Peer Alert",
        "noDataState": "no_data",
        "notifications": [
          {
            "uid": "nz937biMk"
          }
        ]
      },
      "aliasColors": {},
      "bars": false,
      "dashLength": 10,
      "dashes": false,
      "datasource": "Prometheus",
      "fieldConfig": {
        "defaults": {
          "custom": {
            "align": null
          },
          "mappings": [],
          "max": 40,
          "min": 5,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "fill": 1,
      "fillGradient": 0,
      "gridPos": {
        "h": 6,
        "w": 4,
        "x": 15,
        "y": 1
      },
      "hiddenSeries": false,
      "id": 8,
      "legend": {
        "avg": false,
        "current": false,
        "max": false,
        "min": false,
        "show": true,
        "total": false,
        "values": false
      },
      "lines": true,
      "linewidth": 1,
      "nullPointMode": "null",
      "options": {
        "dataLinks": []
      },
      "percentage": false,
      "pluginVersion": "7.0.3",
      "pointradius": 2,
      "points": false,
      "renderer": "flot",
      "seriesOverrides": [],
      "spaceLength": 10,
      "stack": false,
      "steppedLine": false,
      "targets": [
        {
          "expr": "peer_connections_total{instance=\"blazenet.io\",job=\"validator\"}",
          "instant": false,
          "interval": "",
          "legendFormat": "",
          "refId": "A"
        }
      ],
      "thresholds": [
        {
          "colorMode": "critical",
          "fill": true,
          "line": true,
          "op": "lt",
          "value": 5
        }
      ],
      "timeFrom": null,
      "timeRegions": [],
      "timeShift": null,
      "title": "Node Peers",
      "tooltip": {
        "shared": true,
        "sort": 0,
        "value_type": "individual"
      },
      "type": "graph",
      "xaxis": {
        "buckets": null,
        "mode": "time",
        "name": null,
        "show": true,
        "values": []
      },
      "yaxes": [
        {
          "format": "short",
          "label": null,
          "logBase": 1,
          "max": null,
          "min": null,
          "show": true
        },
        {
          "format": "short",
          "label": null,
          "logBase": 1,
          "max": null,
          "min": null,
          "show": true
        }
      ],
      "yaxis": {
        "align": false,
        "alignLevel": null
      }
    },
    {
      "alert": {
        "alertRuleTags": {},
        "conditions": [
          {
            "evaluator": {
              "params": [
                1
              ],
              "type": "lt"
            },
            "operator": {
              "type": "and"
            },
            "query": {
              "params": [
                "A",
                "5m",
                "now"
              ]
            },
            "reducer": {
              "params": [],
              "type": "avg"
            },
            "type": "query"
          }
        ],
        "executionErrorState": "alerting",
        "for": "5m",
        "frequency": "1m",
        "handler": 1,
        "message": "The number of blocks received from peers has fallen below 2.",
        "name": "BlazeNet - Peer Blocks  Low Alert",
        "noDataState": "no_data",
        "notifications": [
          {
            "uid": "nz937biMk"
          }
        ]
      },
      "aliasColors": {},
      "bars": false,
      "dashLength": 10,
      "dashes": false,
      "datasource": null,
      "fieldConfig": {
        "defaults": {
          "custom": {},
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "fill": 1,
      "fillGradient": 0,
      "gridPos": {
        "h": 6,
        "w": 4,
        "x": 19,
        "y": 1
      },
      "hiddenSeries": false,
      "id": 34,
      "legend": {
        "avg": false,
        "current": false,
        "max": false,
        "min": false,
        "show": true,
        "total": false,
        "values": false
      },
      "lines": true,
      "linewidth": 1,
      "nullPointMode": "null",
      "options": {
        "dataLinks": []
      },
      "percentage": false,
      "pluginVersion": "7.0.3",
      "pointradius": 2,
      "points": false,
      "renderer": "flot",
      "seriesOverrides": [],
      "spaceLength": 10,
      "stack": false,
      "steppedLine": false,
      "targets": [
        {
          "expr": "rate(BLOCK_RECEIVED_TOTAL{instance=\"blazenet.io\",job=\"validator\"}[5m])",
          "interval": "",
          "legendFormat": "",
          "refId": "A"
        }
      ],
      "thresholds": [
        {
          "colorMode": "critical",
          "fill": true,
          "line": true,
          "op": "lt",
          "value": 1
        }
      ],
      "timeFrom": null,
      "timeRegions": [],
      "timeShift": null,
      "title": "Peer Blocks Received",
      "tooltip": {
        "shared": true,
        "sort": 0,
        "value_type": "individual"
      },
      "type": "graph",
      "xaxis": {
        "buckets": null,
        "mode": "time",
        "name": null,
        "show": true,
        "values": []
      },
      "yaxes": [
        {
          "format": "short",
          "label": null,
          "logBase": 1,
          "max": null,
          "min": null,
          "show": true
        },
        {
          "format": "short",
          "label": null,
          "logBase": 1,
          "max": null,
          "min": null,
          "show": true
        }
      ],
      "yaxis": {
        "align": false,
        "alignLevel": null
      }
    },
    {
      "datasource": null,
      "fieldConfig": {
        "defaults": {
          "custom": {},
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 3,
        "w": 3,
        "x": 0,
        "y": 4
      },
      "id": 32,
      "options": {
        "colorMode": "value",
        "graphMode": "none",
        "justifyMode": "auto",
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        }
      },
      "pluginVersion": "7.0.3",
      "targets": [
        {
          "expr": "near_epoch_block_produced_number{instance=\"blazenet.io\", job=\"near\"}",
          "interval": "",
          "legendFormat": "",
          "refId": "A"
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "Blocks Produced",
      "type": "stat"
    },
    {
      "datasource": null,
      "fieldConfig": {
        "defaults": {
          "custom": {},
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "semi-dark-green",
                "value": null
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 3,
        "w": 4,
        "x": 3,
        "y": 4
      },
      "id": 14,
      "options": {
        "colorMode": "value",
        "graphMode": "none",
        "justifyMode": "auto",
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        }
      },
      "pluginVersion": "7.0.3",
      "targets": [
        {
          "expr": "near_seat_price{instance=\"blazenet.io\", job=\"near\"}",
          "interval": "",
          "legendFormat": "",
          "refId": "A"
        },
        {
          "refId": "B"
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "Seat Price",
      "type": "stat"
    },
    {
      "collapsed": false,
      "datasource": null,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 7
      },
      "id": 22,
      "panels": [],
      "title": "NEAR Network",
      "type": "row"
    },
    {
      "datasource": null,
      "fieldConfig": {
        "defaults": {
          "custom": {},
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 4,
        "w": 4,
        "x": 0,
        "y": 8
      },
      "id": 26,
      "options": {
        "colorMode": "value",
        "graphMode": "area",
        "justifyMode": "auto",
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "mean"
          ],
          "fields": "",
          "values": false
        }
      },
      "pluginVersion": "7.0.3",
      "targets": [
        {
          "expr": "irate(near_block_number{instance=\"blazenet.io\", job=\"near\"}[3m]) * 100\n",
          "interval": "",
          "intervalFactor": 3,
          "legendFormat": "",
          "refId": "A"
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "Blocks Speed (3m)",
      "type": "stat"
    },
    {
      "datasource": null,
      "fieldConfig": {
        "defaults": {
          "custom": {},
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "semi-dark-green",
                "value": null
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 3,
        "w": 4,
        "x": 4,
        "y": 8
      },
      "id": 38,
      "options": {
        "colorMode": "value",
        "graphMode": "none",
        "justifyMode": "auto",
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        }
      },
      "pluginVersion": "7.0.3",
      "targets": [
        {
          "expr": "near_epoch_start_height{instance=\"blazenet.io\", job=\"near\"}",
          "interval": "",
          "legendFormat": "",
          "refId": "A"
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "EPOCH Start Height",
      "type": "stat"
    },
    {
      "alert": {
        "alertRuleTags": {},
        "conditions": [
          {
            "evaluator": {
              "params": [
                67
              ],
              "type": "lt"
            },
            "operator": {
              "type": "and"
            },
            "query": {
              "params": [
                "A",
                "5m",
                "now"
              ]
            },
            "reducer": {
              "params": [],
              "type": "avg"
            },
            "type": "query"
          }
        ],
        "executionErrorState": "alerting",
        "for": "5m",
        "frequency": "1m",
        "handler": 1,
        "message": "The number of validators online has fallen below the critical threshold of 96%.",
        "name": "NEAR Network - Low Validator Count",
        "noDataState": "no_data",
        "notifications": [
          {
            "uid": "nz937biMk"
          }
        ]
      },
      "aliasColors": {},
      "bars": false,
      "dashLength": 10,
      "dashes": false,
      "datasource": null,
      "fieldConfig": {
        "defaults": {
          "custom": {},
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "fill": 1,
      "fillGradient": 0,
      "gridPos": {
        "h": 6,
        "w": 5,
        "x": 8,
        "y": 8
      },
      "hiddenSeries": false,
      "id": 28,
      "legend": {
        "avg": false,
        "current": false,
        "max": false,
        "min": false,
        "show": true,
        "total": false,
        "values": false
      },
      "lines": true,
      "linewidth": 1,
      "nullPointMode": "null",
      "options": {
        "dataLinks": []
      },
      "percentage": false,
      "pluginVersion": "7.0.3",
      "pointradius": 2,
      "points": false,
      "renderer": "flot",
      "seriesOverrides": [],
      "spaceLength": 10,
      "stack": false,
      "steppedLine": false,
      "targets": [
        {
          "expr": "validator_active_total{instance=\"blazenet.io\",job=\"validator\"}",
          "interval": "",
          "legendFormat": "",
          "refId": "A"
        }
      ],
      "thresholds": [
        {
          "colorMode": "critical",
          "fill": true,
          "line": true,
          "op": "lt",
          "value": 67
        }
      ],
      "timeFrom": null,
      "timeRegions": [],
      "timeShift": null,
      "title": "Validators Online",
      "tooltip": {
        "shared": true,
        "sort": 0,
        "value_type": "individual"
      },
      "type": "graph",
      "xaxis": {
        "buckets": null,
        "mode": "time",
        "name": null,
        "show": true,
        "values": []
      },
      "yaxes": [
        {
          "format": "short",
          "label": null,
          "logBase": 1,
          "max": null,
          "min": null,
          "show": true
        },
        {
          "format": "short",
          "label": null,
          "logBase": 1,
          "max": null,
          "min": null,
          "show": true
        }
      ],
      "yaxis": {
        "align": false,
        "alignLevel": null
      }
    },
    {
      "datasource": null,
      "fieldConfig": {
        "defaults": {
          "custom": {
            "align": null
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "semi-dark-green",
                "value": null
              }
            ]
          },
          "unit": "none"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 3,
        "w": 4,
        "x": 4,
        "y": 11
      },
      "id": 12,
      "options": {
        "colorMode": "value",
        "graphMode": "none",
        "justifyMode": "auto",
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        }
      },
      "pluginVersion": "7.0.3",
      "targets": [
        {
          "expr": "near_block_number{instance=\"blazenet.io\", job=\"near\"}",
          "interval": "",
          "legendFormat": "",
          "refId": "A"
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "Block Height",
      "type": "stat"
    },
    {
      "collapsed": false,
      "datasource": null,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 14
      },
      "id": 20,
      "panels": [],
      "title": "System",
      "type": "row"
    },
    {
      "alert": {
        "alertRuleTags": {},
        "conditions": [
          {
            "evaluator": {
              "params": [
                80
              ],
              "type": "gt"
            },
            "operator": {
              "type": "and"
            },
            "query": {
              "params": [
                "A",
                "15m",
                "now"
              ]
            },
            "reducer": {
              "params": [],
              "type": "avg"
            },
            "type": "query"
          }
        ],
        "executionErrorState": "alerting",
        "for": "1h",
        "frequency": "5m",
        "handler": 1,
        "message": "A process has been using a high amount of CPU for an hour.",
        "name": "CPU Alert",
        "noDataState": "no_data",
        "notifications": [
          {
            "uid": "nz937biMk"
          }
        ]
      },
      "aliasColors": {},
      "bars": false,
      "dashLength": 10,
      "dashes": false,
      "datasource": null,
      "fieldConfig": {
        "defaults": {
          "custom": {}
        },
        "overrides": []
      },
      "fill": 1,
      "fillGradient": 0,
      "gridPos": {
        "h": 5,
        "w": 5,
        "x": 0,
        "y": 15
      },
      "hiddenSeries": false,
      "id": 2,
      "legend": {
        "avg": false,
        "current": false,
        "max": false,
        "min": false,
        "show": true,
        "total": false,
        "values": false
      },
      "lines": true,
      "linewidth": 1,
      "nullPointMode": "null",
      "options": {
        "dataLinks": []
      },
      "percentage": false,
      "pointradius": 2,
      "points": false,
      "renderer": "flot",
      "seriesOverrides": [],
      "spaceLength": 10,
      "stack": false,
      "steppedLine": false,
      "targets": [
        {
          "expr": "100 - (avg by (instance) (irate(node_cpu_seconds_total{instance=\"blazenet.io\",job=\"node\",mode=\"idle\"}[5m])) * 100)",
          "interval": "",
          "legendFormat": "",
          "refId": "A"
        }
      ],
      "thresholds": [
        {
          "colorMode": "critical",
          "fill": true,
          "line": true,
          "op": "gt",
          "value": 80
        }
      ],
      "timeFrom": null,
      "timeRegions": [],
      "timeShift": null,
      "title": "CPU",
      "tooltip": {
        "shared": true,
        "sort": 0,
        "value_type": "individual"
      },
      "type": "graph",
      "xaxis": {
        "buckets": null,
        "mode": "time",
        "name": null,
        "show": true,
        "values": []
      },
      "yaxes": [
        {
          "format": "short",
          "label": null,
          "logBase": 1,
          "max": null,
          "min": null,
          "show": true
        },
        {
          "format": "short",
          "label": null,
          "logBase": 1,
          "max": null,
          "min": null,
          "show": true
        }
      ],
      "yaxis": {
        "align": false,
        "alignLevel": null
      }
    },
    {
      "alert": {
        "alertRuleTags": {},
        "conditions": [
          {
            "evaluator": {
              "params": [
                80
              ],
              "type": "gt"
            },
            "operator": {
              "type": "and"
            },
            "query": {
              "params": [
                "A",
                "15m",
                "now"
              ]
            },
            "reducer": {
              "params": [],
              "type": "avg"
            },
            "type": "query"
          }
        ],
        "executionErrorState": "alerting",
        "for": "1h",
        "frequency": "5m",
        "handler": 1,
        "message": "A process has been using a high amount of memory for an hour.",
        "name": "Memory Alert",
        "noDataState": "no_data",
        "notifications": [
          {
            "uid": "nz937biMk"
          }
        ]
      },
      "aliasColors": {},
      "bars": false,
      "dashLength": 10,
      "dashes": false,
      "datasource": null,
      "fieldConfig": {
        "defaults": {
          "custom": {}
        },
        "overrides": []
      },
      "fill": 1,
      "fillGradient": 0,
      "gridPos": {
        "h": 5,
        "w": 5,
        "x": 5,
        "y": 15
      },
      "hiddenSeries": false,
      "id": 4,
      "legend": {
        "avg": false,
        "current": false,
        "max": false,
        "min": false,
        "show": true,
        "total": false,
        "values": false
      },
      "lines": true,
      "linewidth": 1,
      "nullPointMode": "null",
      "options": {
        "dataLinks": []
      },
      "percentage": false,
      "pointradius": 2,
      "points": false,
      "renderer": "flot",
      "seriesOverrides": [],
      "spaceLength": 10,
      "stack": false,
      "steppedLine": false,
      "targets": [
        {
          "expr": "100 * (1 - ((avg_over_time(node_memory_MemFree_bytes{instance=\"blazenet.io\",job=\"node\"}[10m]) + avg_over_time(node_memory_Cached_bytes{instance=\"blazenet.io\",job=\"node\"}[10m]) + avg_over_time(node_memory_Buffers_bytes{instance=\"blazenet.io\",job=\"node\"}[10m])) / avg_over_time(node_memory_MemTotal_bytes{instance=\"blazenet.io\",job=\"node\"}[10m])))",
          "interval": "",
          "legendFormat": "",
          "refId": "A"
        }
      ],
      "thresholds": [
        {
          "colorMode": "critical",
          "fill": true,
          "line": true,
          "op": "gt",
          "value": 80
        }
      ],
      "timeFrom": null,
      "timeRegions": [],
      "timeShift": null,
      "title": "Memory",
      "tooltip": {
        "shared": true,
        "sort": 0,
        "value_type": "individual"
      },
      "type": "graph",
      "xaxis": {
        "buckets": null,
        "mode": "time",
        "name": null,
        "show": true,
        "values": []
      },
      "yaxes": [
        {
          "format": "short",
          "label": null,
          "logBase": 1,
          "max": null,
          "min": null,
          "show": true
        },
        {
          "format": "short",
          "label": null,
          "logBase": 1,
          "max": null,
          "min": null,
          "show": true
        }
      ],
      "yaxis": {
        "align": false,
        "alignLevel": null
      }
    },
    {
      "alert": {
        "alertRuleTags": {},
        "conditions": [
          {
            "evaluator": {
              "params": [
                90
              ],
              "type": "gt"
            },
            "operator": {
              "type": "and"
            },
            "query": {
              "params": [
                "A",
                "15m",
                "now"
              ]
            },
            "reducer": {
              "params": [],
              "type": "avg"
            },
            "type": "query"
          }
        ],
        "executionErrorState": "alerting",
        "for": "1h",
        "frequency": "5m",
        "handler": 1,
        "message": "Disk space utilization is over 90%.",
        "name": "Disk Alert",
        "noDataState": "no_data",
        "notifications": [
          {
            "uid": "nz937biMk"
          }
        ]
      },
      "aliasColors": {},
      "bars": false,
      "dashLength": 10,
      "dashes": false,
      "datasource": null,
      "fieldConfig": {
        "defaults": {
          "custom": {}
        },
        "overrides": []
      },
      "fill": 1,
      "fillGradient": 0,
      "gridPos": {
        "h": 5,
        "w": 5,
        "x": 10,
        "y": 15
      },
      "hiddenSeries": false,
      "id": 6,
      "legend": {
        "avg": false,
        "current": false,
        "max": false,
        "min": false,
        "show": true,
        "total": false,
        "values": false
      },
      "lines": true,
      "linewidth": 1,
      "nullPointMode": "null",
      "options": {
        "dataLinks": []
      },
      "percentage": false,
      "pointradius": 2,
      "points": false,
      "renderer": "flot",
      "seriesOverrides": [],
      "spaceLength": 10,
      "stack": false,
      "steppedLine": false,
      "targets": [
        {
          "expr": "( 1 - node_filesystem_avail_bytes{instance=\"blazenet.io\",job=\"node\"} / node_filesystem_size_bytes{instance=\"blazenet.io\",job=\"node\"}) * 100",
          "interval": "",
          "legendFormat": "",
          "refId": "A"
        }
      ],
      "thresholds": [
        {
          "colorMode": "critical",
          "fill": true,
          "line": true,
          "op": "gt",
          "value": 90
        }
      ],
      "timeFrom": null,
      "timeRegions": [],
      "timeShift": null,
      "title": "Disk",
      "tooltip": {
        "shared": true,
        "sort": 0,
        "value_type": "individual"
      },
      "type": "graph",
      "xaxis": {
        "buckets": null,
        "mode": "time",
        "name": null,
        "show": true,
        "values": []
      },
      "yaxes": [
        {
          "format": "short",
          "label": null,
          "logBase": 1,
          "max": null,
          "min": null,
          "show": true
        },
        {
          "format": "short",
          "label": null,
          "logBase": 1,
          "max": null,
          "min": null,
          "show": true
        }
      ],
      "yaxis": {
        "align": false,
        "alignLevel": null
      }
    },
    {
      "alert": {
        "alertRuleTags": {},
        "conditions": [
          {
            "evaluator": {
              "params": [
                50
              ],
              "type": "lt"
            },
            "operator": {
              "type": "and"
            },
            "query": {
              "params": [
                "A",
                "5m",
                "now"
              ]
            },
            "reducer": {
              "params": [],
              "type": "avg"
            },
            "type": "query"
          }
        ],
        "executionErrorState": "alerting",
        "for": "5m",
        "frequency": "1m",
        "handler": 1,
        "message": "Network traffic seems very low.",
        "name": "Network Alert",
        "noDataState": "no_data",
        "notifications": [
          {
            "uid": "nz937biMk"
          }
        ]
      },
      "aliasColors": {},
      "bars": false,
      "dashLength": 10,
      "dashes": false,
      "datasource": null,
      "fieldConfig": {
        "defaults": {
          "custom": {}
        },
        "overrides": []
      },
      "fill": 1,
      "fillGradient": 0,
      "gridPos": {
        "h": 5,
        "w": 5,
        "x": 15,
        "y": 15
      },
      "hiddenSeries": false,
      "id": 10,
      "legend": {
        "avg": false,
        "current": false,
        "max": false,
        "min": false,
        "show": true,
        "total": false,
        "values": false
      },
      "lines": true,
      "linewidth": 1,
      "nullPointMode": "null",
      "options": {
        "dataLinks": []
      },
      "percentage": false,
      "pointradius": 2,
      "points": false,
      "renderer": "flot",
      "seriesOverrides": [],
      "spaceLength": 10,
      "stack": false,
      "steppedLine": false,
      "targets": [
        {
          "expr": "rate(node_network_receive_bytes_total{instance=\"blazenet.io\",job=\"node\"}[1m])",
          "interval": "",
          "legendFormat": "",
          "refId": "A"
        }
      ],
      "thresholds": [
        {
          "colorMode": "critical",
          "fill": true,
          "line": true,
          "op": "lt",
          "value": 50
        }
      ],
      "timeFrom": null,
      "timeRegions": [],
      "timeShift": null,
      "title": "Network",
      "tooltip": {
        "shared": true,
        "sort": 0,
        "value_type": "individual"
      },
      "type": "graph",
      "xaxis": {
        "buckets": null,
        "mode": "time",
        "name": null,
        "show": true,
        "values": []
      },
      "yaxes": [
        {
          "format": "short",
          "label": null,
          "logBase": 1,
          "max": null,
          "min": null,
          "show": true
        },
        {
          "format": "short",
          "label": null,
          "logBase": 1,
          "max": null,
          "min": null,
          "show": true
        }
      ],
      "yaxis": {
        "align": false,
        "alignLevel": null
      }
    }
  ],
  "refresh": false,
  "schemaVersion": 25,
  "style": "dark",
  "tags": [],
  "templating": {
    "list": []
  },
  "time": {
    "from": "now-5m",
    "to": "now"
  },
  "timepicker": {
    "refresh_intervals": [
      "10s",
      "30s",
      "1m",
      "5m",
      "15m",
      "30m",
      "1h",
      "2h",
      "1d"
    ]
  },
  "timezone": "America/Chicago",
  "title": "My Validator",
  "uid": "qZt0VbmMz",
  "version": 40
}
'''
'''--- src/Search.js ---
import React, { Component, useCallback, useEffect, useState } from 'react'
import { makeStyles } from '@material-ui/core/styles';
import Typography from '@material-ui/core/Typography';
import TextField from '@material-ui/core/TextField';
import Table from '@material-ui/core/Table';
import TableBody from '@material-ui/core/TableBody';
import TableCell from '@material-ui/core/TableCell';
import TableContainer from '@material-ui/core/TableContainer';
import TableHead from '@material-ui/core/TableHead';
import TableRow from '@material-ui/core/TableRow';
import Paper from '@material-ui/core/Paper';
import { Tooltip } from '@material-ui/core';

import WarningIcon from '@material-ui/icons/Warning';
import CheckBoxIcon from '@material-ui/icons/CheckBox';
import ErrorIcon from '@material-ui/icons/Error';

import { green } from '@material-ui/core/colors';
import { yellow } from '@material-ui/core/colors';
import { red } from '@material-ui/core/colors';

class Search extends Component {

  intervalID;

  constructor(props) {
    super(props);

    this.state = {
      validators: '',
      searchTerm: '',
      isLoading: true,
    }

  }

  componentDidMount() {

  }

  componentWillUnmount() {

  }

  render() {

    const self = this

    const { searchTerm, refreshValidators, isLoading } = self.props;

    if(isLoading) {
      return <p>Loading...</p>;
    }

    const validators = self.props.validators.current_validators;

    const handleChange = () => {

      this.setState({searchTerm: event.target.value});
      
    };

    const results = !this.state.searchTerm
    ? validators
    : validators.filter(validator =>
      validator.account_id.toLowerCase().includes(this.state.searchTerm.toLocaleLowerCase())
      );

    return (

      <div className="App">

        <TextField
          id="search"
          value={this.state.searchTerm}
          onChange={handleChange}
          label="Search Validators"
          variant="outlined"
        />

        <TableContainer component={Paper}>
          <Table className={self.props.classes.table} aria-label="simple table">
            <TableHead key="th">
              <TableRow key="tr">
                <TableCell key="v">Validator</TableCell>
                <TableCell className={self.props.classes.hideTableCell} key="b" align="right">Blocks Expected</TableCell>
                <TableCell className={self.props.classes.hideTableCell} key="p" align="right">Blocks Produced</TableCell>
                <TableCell key="pc" align="right">%</TableCell>
                <TableCell key="k" align="right">Status</TableCell>
              </TableRow>
            </TableHead>
            <TableBody key="vb">
             {results.map((validator, index) => (
                <TableRow key={index}>
                  <TableCell key="{`${validator.account_id}${index}`}" >{validator.account_id}</TableCell>
                  <TableCell className={self.props.classes.hideTableCell} key="{`${validator.num_expected_blocks}${index}`}" align="right">{JSON.stringify(validator.num_expected_blocks)}</TableCell>
                  <TableCell className={self.props.classes.hideTableCell} key="{`${validator.num_produced_blocks}${index}`}" align="right">{JSON.stringify(validator.num_produced_blocks)}</TableCell>
                  <TableCell key="{`${validator.num_expected_blocks}${validator.num_produced_blocks}${index}`}" align="right">{(validator.num_produced_blocks / validator.num_expected_blocks * 100).toFixed(2) + "%" }</TableCell>
                  <TableCell key="" align="right">
                    {
                      ((validator.num_expected_blocks - validator.num_produced_blocks) >= 10) ? (<Tooltip title="Kicked not enough blocks" aria-label="Kicked not enough blocks"><ErrorIcon style={{ color: red[600] }} /></Tooltip> ) 
                      : (((validator.num_produced_blocks / validator.num_expected_blocks * 100).toFixed()) >= 90)
                      ? (<Tooltip title="Good Standing" aria-label="Good Standing"><CheckBoxIcon style={{ color: green[600] }} /></Tooltip> ) 
                      : (<Tooltip title="Blocks Low" aria-label="Blocks Low"><WarningIcon style={{ color: yellow[800] }} /></Tooltip> )
                    }
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </TableContainer>

      </div>
    );
  }
}

export default Search;
'''
'''--- src/Signup.js ---
import React, { Component, useCallback, useEffect, useState } from 'react'
import Big from 'big.js'
import Typography from '@material-ui/core/Typography';
import TextField from '@material-ui/core/TextField';
import Button from '@material-ui/core/Button';

import { Tooltip } from '@material-ui/core';

const SUGGESTED_DONATION = '0'
const BOATLOAD_OF_GAS = Big(1).times(10 ** 12).toFixed()

class Signup extends Component {

  constructor(props) {
    super(props);
  }

  componentDidMount() {

    let loggedIn = this.props.wallet.isSignedIn();

    //console.log(loggedIn)

    fetch( "https://rpc.betanet.nearprotocol.com", {
      method: 'POST',
      headers: new Headers({
        'Accept': 'application/json',
        'Content-Type': 'application/json',
      }),
      body: JSON.stringify({
        jsonrpc: '2.0',
        id: '123',
        method: 'query',
        params: {request_type: 'view_state', finality: 'final', account_id: 'blazenet', prefix_base64: ''}
      }) // <-- Post parameters
    })
    .then((response) => response.json())
    .then((responseText) => {

      //console.log(((atob((responseText.result.values[0].value)).replace(/[^a-z\d\s\u0000\/$]+/g, ""))));
      //console.log(JSON.parse(JSON.stringify(responseText.result.values)));
    })
    .catch((error) => {
      console.error(error);
    });

  }

  render() {

      self = this;

      const handleChange = event => {

        event.preventDefault()

        const { fieldset, message, donation } = event.target.elements;

        fieldset.disabled = true

        // update blockchain data in background
        // add uuid to each message, so we know which one is already known

        const result = contract.addMessage({ text: message.value },
          BOATLOAD_OF_GAS
        )
        .then(() => {

          contract.getMessages().then(messages => {

            self.setState({messages: messages});

            console.log(messages)

            message.value = ''
            fieldset.disabled = false
            message.focus()
          })
        })
      };

      //console.log(self.props.wallet.isSignedIn())

      if(!self.props.wallet.isSignedIn()) {
        return <p>&nbsp;</p>
      }

      return (

        <div>
          <form onSubmit={handleChange} noValidate autoComplete="off">
            <fieldset id="fieldset">
               <Typography variant="h5" component="h5">
                Sign Up
               </Typography>
              <span>Valdiator contract stats and monitoring</span>
              <TextField required id="message" label="Email" autoComplete="off" />
              <Tooltip title="The deployed contract to monitor" aria-label="The deployed contract to monitor"><TextField required id="message" label="Contract Id" autoComplete="off" /></Tooltip><br/><br/>
              <Button variant="contained" color="primary">Sign Up</Button>
            </fieldset>
          </form>
        </div>
      );
    
  }
}

export default Signup;
'''
'''--- src/__mocks__/fileMock.js ---
// NOTE: This is used to mock resource imports in JSX for tests
module.exports = ''; 

'''
'''--- src/assets/gray_near_logo.svg ---
<svg id="Layer_1" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 433 180.5"><defs><style>.cls-1{fill:url(#linear-gradient);}.cls-2{fill:#4a4f54;}</style><linearGradient id="linear-gradient" x1="40.11" y1="140.87" x2="140.87" y2="40.11" gradientUnits="userSpaceOnUse"><stop offset="0.21" stop-color="#4a4f54"/><stop offset="0.42" stop-color="#4a4f54" stop-opacity="0"/><stop offset="0.59" stop-color="#4a4f54" stop-opacity="0"/><stop offset="0.81" stop-color="#4a4f54"/></linearGradient></defs><title>near_logo</title><path class="cls-1" d="M48.84,144.5a12.32,12.32,0,0,0,9.35-4.28h0l84.42-97.93a12.32,12.32,0,0,0-10.45-5.79h0a12.31,12.31,0,0,0-9.31,4.24L38,138.09A12.34,12.34,0,0,0,48.84,144.5Z"/><path class="cls-2" d="M48.84,144.5a12.38,12.38,0,0,0,5.66-1.37V61.36l65.58,78.7a12.37,12.37,0,0,0,9.49,4.44h2.59a12.35,12.35,0,0,0,12.34-12.34V48.84A12.35,12.35,0,0,0,132.16,36.5h0a12.45,12.45,0,0,0-5.62,1.35v81.79L60.92,40.94a12.37,12.37,0,0,0-9.49-4.44H48.84A12.35,12.35,0,0,0,36.5,48.84v83.32A12.35,12.35,0,0,0,48.84,144.5Z"/><path class="cls-2" d="M225.71,64.25v52.5a.76.76,0,0,1-.75.75h-5.51a7.49,7.49,0,0,1-6.3-3.43l-24.78-38.3.85,19.13v21.85a.76.76,0,0,1-.75.75h-7.22a.76.76,0,0,1-.75-.75V64.25a.76.76,0,0,1,.75-.75h5.43a7.52,7.52,0,0,1,6.3,3.42l24.78,38.24L217,86.1V64.25a.75.75,0,0,1,.75-.75H225A.76.76,0,0,1,225.71,64.25Z"/><path class="cls-2" d="M299.51,117.5h-7.64a.75.75,0,0,1-.7-1L311.4,64.22a1.14,1.14,0,0,1,1.05-.72H322a1.14,1.14,0,0,1,1.05.72l20.23,52.26a.75.75,0,0,1-.7,1H335a.76.76,0,0,1-.71-.48L317.94,74a.75.75,0,0,0-1.41,0l-16.31,43A.76.76,0,0,1,299.51,117.5Z"/><path class="cls-2" d="M396.34,116.29,381.16,96.9c8.57-1.62,13.58-7.4,13.58-16.27,0-10.19-6.63-17.13-18.36-17.13H355.21a1.12,1.12,0,0,0-1.12,1.12h0a7.2,7.2,0,0,0,7.2,7.21h14.17c7.09,0,10.49,3.63,10.49,8.87s-3.32,9-10.49,9H355.21a1.13,1.13,0,0,0-1.12,1.13v26a.75.75,0,0,0,.75.75h7.22a.76.76,0,0,0,.75-.75V97.37h8.33l13.17,17.19a7.51,7.51,0,0,0,6,2.94h5.48A.75.75,0,0,0,396.34,116.29Z"/><path class="cls-2" d="M276.67,63.5h-33.5a1,1,0,0,0-1,1h0a7.33,7.33,0,0,0,7.33,7.33h27.17a.74.74,0,0,0,.75-.75V64.25A.75.75,0,0,0,276.67,63.5Zm0,45.67h-25a.76.76,0,0,1-.75-.75V94.88a.75.75,0,0,1,.75-.75h23.11a.75.75,0,0,0,.75-.75V86.54a.75.75,0,0,0-.75-.75H243.29a1.13,1.13,0,0,0-1.12,1.13v29.45a1.12,1.12,0,0,0,1.12,1.13h33.38a.75.75,0,0,0,.75-.75v-6.83A.74.74,0,0,0,276.67,109.17Z"/></svg>
'''
'''--- src/assets/logo.svg ---
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3">
    <g fill="#61DAFB">
        <path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/>
        <circle cx="420.9" cy="296.5" r="45.7"/>
        <path d="M520.5 78.1z"/>
    </g>
</svg>

'''
'''--- src/assets/near.svg ---
<svg width="97px" height="97px" viewBox="0 0 97 97" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
    <defs>
        <linearGradient x1="8.03545747%" y1="96.638877%" x2="92.2738738%" y2="3.34259955%" id="linearGradient-1">
            <stop stop-color="#4B4F54" offset="21%"></stop>
            <stop stop-color="#4B4F54" stop-opacity="0" offset="42%"></stop>
            <stop stop-color="#4B4F54" stop-opacity="0" offset="59%"></stop>
            <stop stop-color="#4B4F54" offset="81%"></stop>
        </linearGradient>
    </defs>
    <g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
        <g id="create" transform="translate(-1054.000000, -595.000000)" fill-rule="nonzero">
            <g id="Group-5" transform="translate(1054.000000, 595.000000)">
                <path d="M12.094392,97.0000195 C15.2088036,97.0039527 18.1698244,95.6000877 20.2022804,93.1559341 L20.2022804,93.1559341 L93.4074074,5.20030368 C91.4546314,1.96447154 88.0299073,1.95462232e-05 84.3456498,1.95462232e-05 L84.3456498,1.95462232e-05 C81.2486381,-0.0036811685 78.3027381,1.38590639 76.2724476,3.80817433 L2.69444444,91.2428789 C4.57536204,94.7980982 8.18030259,97.0059941 12.094392,97.0000195 Z" id="Path" fill="url(#linearGradient-1)"></path>
                <path d="M11.0831481,97 C12.8513879,97 14.5941045,96.5780666 16.1666667,95.769537 L16.1666667,22.327963 L75.0672222,93.0122222 C77.1773546,95.5384707 80.2990545,96.9989921 83.5906481,97 L85.9168519,97 C92.0358529,96.9950473 96.9950473,92.0358529 97,85.9168519 L97,11.0831481 C96.9950473,4.96414708 92.0358529,0.00495265405 85.9168519,0 L85.9168519,0 C84.1625017,0.00260840866 82.4333785,0.417967183 80.8692593,1.2125 L80.8692593,74.672037 L21.9327778,3.98777778 C19.8226454,1.4615293 16.7009455,0.00100794796 13.4093519,0 L11.0831481,0 C4.96414708,0.00495265405 0.00495265405,4.96414708 0,11.0831481 L0,85.9168519 C0.00495265405,92.0358529 4.96414708,96.9950473 11.0831481,97 Z" id="Path" fill="#4B4F54"></path>
            </g>
        </g>
    </g>
</svg>
'''
'''--- src/assets/near_logo_wht.svg ---
<svg id="Layer_1" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 414 162"><defs><style>.cls-1{fill:#fff;}.cls-2{fill:url(#linear-gradient);}</style><linearGradient id="linear-gradient" x1="39.01" y1="122.98" x2="122.98" y2="39.01" gradientUnits="userSpaceOnUse"><stop offset="0.21" stop-color="#fff"/><stop offset="0.42" stop-color="#fff" stop-opacity="0"/><stop offset="0.59" stop-color="#fff" stop-opacity="0"/><stop offset="0.81" stop-color="#fff"/></linearGradient></defs><title>near_logo_wht</title><path class="cls-1" d="M207.21,54.75v52.5a.76.76,0,0,1-.75.75H201a7.49,7.49,0,0,1-6.3-3.43l-24.78-38.3.85,19.13v21.85a.76.76,0,0,1-.75.75h-7.22a.76.76,0,0,1-.75-.75V54.75a.76.76,0,0,1,.75-.75h5.43a7.52,7.52,0,0,1,6.3,3.42l24.78,38.24-.77-19.06V54.75a.75.75,0,0,1,.75-.75h7.22A.76.76,0,0,1,207.21,54.75Z"/><path class="cls-1" d="M281,108h-7.64a.75.75,0,0,1-.7-1L292.9,54.72A1.14,1.14,0,0,1,294,54h9.57a1.14,1.14,0,0,1,1.05.72L324.8,107a.75.75,0,0,1-.7,1h-7.64a.76.76,0,0,1-.71-.48l-16.31-43a.75.75,0,0,0-1.41,0l-16.31,43A.76.76,0,0,1,281,108Z"/><path class="cls-1" d="M377.84,106.79,362.66,87.4c8.57-1.62,13.58-7.4,13.58-16.27,0-10.19-6.63-17.13-18.36-17.13H336.71a1.12,1.12,0,0,0-1.12,1.12h0a7.2,7.2,0,0,0,7.2,7.2H357c7.09,0,10.49,3.63,10.49,8.87s-3.32,9-10.49,9H336.71a1.13,1.13,0,0,0-1.12,1.13v26a.75.75,0,0,0,.75.75h7.22a.76.76,0,0,0,.75-.75V87.87h8.33l13.17,17.19a7.51,7.51,0,0,0,6,2.94h5.48A.75.75,0,0,0,377.84,106.79Z"/><path class="cls-1" d="M258.17,54h-33.5a1,1,0,0,0-1,1h0A7.33,7.33,0,0,0,231,62.33h27.17a.74.74,0,0,0,.75-.75V54.75A.75.75,0,0,0,258.17,54Zm0,45.67h-25a.76.76,0,0,1-.75-.75V85.38a.75.75,0,0,1,.75-.75h23.11a.75.75,0,0,0,.75-.75V77a.75.75,0,0,0-.75-.75H224.79a1.13,1.13,0,0,0-1.12,1.13v29.45a1.12,1.12,0,0,0,1.12,1.13h33.38a.75.75,0,0,0,.75-.75v-6.83A.74.74,0,0,0,258.17,99.67Z"/><path class="cls-2" d="M46.29,126a10.29,10.29,0,0,0,7.79-3.57h0l70.35-81.61A10.29,10.29,0,0,0,115.71,36h0a10.28,10.28,0,0,0-7.75,3.53L37.27,120.66A10.27,10.27,0,0,0,46.29,126Z"/><path class="cls-1" d="M46.29,126A10.18,10.18,0,0,0,51,124.85V56.72l54.65,65.58a10.32,10.32,0,0,0,7.91,3.7h2.15A10.29,10.29,0,0,0,126,115.71V46.29A10.29,10.29,0,0,0,115.71,36h0A10.32,10.32,0,0,0,111,37.13v68.15L56.35,39.7A10.32,10.32,0,0,0,48.44,36H46.29A10.29,10.29,0,0,0,36,46.29v69.42A10.29,10.29,0,0,0,46.29,126Z"/></svg>
'''
'''--- src/config.js ---
const CONTRACT_NAME = process.env.CONTRACT_NAME ||'validator-tools';

function getConfig(env) {
    switch (env) {

    case 'production':
    case 'mainnet':
        return {
            networkId: 'mainnet',
            nodeUrl: 'https://rpc.mainnet.near.org',
            contractName: CONTRACT_NAME,
            walletUrl: 'https://wallet.mainnet.near.org',
            helperUrl: 'https://helper.mainnet.near.org',
        };
    case 'development':
    case 'testnet':
        return {
            networkId: 'default',
            nodeUrl: 'https://rpc.testnet.near.org',
            contractName: CONTRACT_NAME,
            walletUrl: 'https://wallet.testnet.near.org',
            helperUrl: 'https://helper.testnet.near.org',
        };
    case 'devnet':
        return {
            networkId: 'devnet',
            nodeUrl: 'https://rpc.devnet.near.org',
            contractName: CONTRACT_NAME,
            walletUrl: 'https://wallet.devnet.near.org',
            helperUrl: 'https://helper.devnet.near.org',
        };
    case 'betanet':
        return {
            networkId: 'betanet',
            nodeUrl: 'https://rpc.betanet.near.org',
            contractName: CONTRACT_NAME,
            walletUrl: 'https://wallet.betanet.near.org',
            helperUrl: 'https://helper.betanet.near.org',
        };
    case 'local':
        return {
            networkId: 'local',
            nodeUrl: 'http://localhost:3030',
            keyPath: `${process.env.HOME}/.near/validator_key.json`,
            walletUrl: 'http://localhost:4000/wallet',
            contractName: CONTRACT_NAME,
        };
    case 'test':
    case 'ci':
        return {
            networkId: 'shared-test',
            nodeUrl: 'https://rpc.ci-testnet.near.org',
            contractName: CONTRACT_NAME,
            masterAccount: 'test.near',
        };
    case 'ci-betanet':
        return {
            networkId: 'shared-test-staging',
            nodeUrl: 'https://rpc.ci-betanet.near.org',
            contractName: CONTRACT_NAME,
            masterAccount: 'test.near',
        };
    default:
        throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`);
    }
}

module.exports = getConfig;

'''
'''--- src/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="./favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <link rel="apple-touch-icon" href="./favicon.ico" />
    <title>BlazeNet - Validator Tools</title>

    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" />
    <link href="https://fonts.googleapis.com/css2?family=Catamaran:wght@600;700&display=swap" rel="stylesheet">

  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
    <script src="./index.js"></script>
  </body>
</html>

'''
'''--- src/index.js ---
import React from 'react';
import ReactDOM from 'react-dom';
import getConfig from './config.js';
import {Account, Contract, WalletAccount, connect, keyStores, validators, utils  } from 'near-api-js';
import CssBaseline from '@material-ui/core/CssBaseline';
import { ThemeProvider } from '@material-ui/core/styles';
import App from './App';
import theme from './theme';

// Initializing contract
async function initContract() {

    window.nearConfig = getConfig(process.env.NEAR_ENV || 'betanet')

    //console.log("nearConfig", window.nearConfig);

    // Initializing connection to the NEAR BetaNet.
    window.near = await connect(Object.assign({ deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() } }, window.nearConfig));
    
    // Needed to access wallet login
    window.walletAccount = new WalletAccount(window.near);
    
    // Getting the Account ID. If unauthorized yet, it's just empty string.
    window.accountId = window.walletAccount.getAccountId();

    // Initializing our contract APIs by contract name and configuration.
    let acct = await new Account(window.near.connection, window.accountId);

    window.contract = await new Contract(acct, window.nearConfig.contractName, {
        // View methods are read only. They don't modify the state, but usually return some value.
        viewMethods: ['welcome', 'getMessages'],
        // Change methods can modify the state. But you don't receive the returned value when called.
        changeMethods: ['setGreeting', 'addMessage', 'removeValidator'],
        // Sender is the account ID to initialize transactions.
        sender: window.accountId
    });
}

window.nearInitPromise = initContract().then(() => {
  ReactDOM.render(
      <ThemeProvider theme={theme}> {/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */}
        <CssBaseline />
        <App near={window.near} contract={window.contract} wallet={window.walletAccount} />
      </ThemeProvider>,
    document.getElementById('root')
  );
}).catch(console.error)
'''
'''--- src/jest.init.js ---
import "regenerator-runtime/runtime";

'''
'''--- src/main.test.js ---
let near;
let contract;
let accountId;

beforeAll(async function () {
    // NOTE: nearlib and nearConfig are made available by near-shell/test_environment
    console.log('nearConfig', nearConfig);
    near = await nearlib.connect(nearConfig);
    accountId = nearConfig.contractName;
    contract = await near.loadContract(nearConfig.contractName, {
        viewMethods: ['welcome'],
        changeMethods: [],
        sender: accountId
    });
});

it('welcome test', async () => {
    const message = await contract.welcome({account_id:"test"});
    expect(message).toEqual({"text": "Hello test"});
})
'''
'''--- src/theme.js ---
import { red } from '@material-ui/core/colors';
import { createMuiTheme, responsiveFontSizes } from '@material-ui/core/styles';

// A custom theme for this app
let theme = createMuiTheme({
  palette: {
    primary: {
      main: '#0d47a1',
      light: '#fff'
    },
    secondary: {
      main: '#0277bd',
    },
    error: {
      main: red.A400,
    },
    background: {
      default: '#fff',
    },
  },
});

theme = responsiveFontSizes(theme);

export default theme;
'''
'''--- src/types.ts ---

import BN from 'bn.js';
import { deserialize, base_encode} from '../node_modules/near-api-js/src/utils/serialize'

import {PublicKey} from '../node_modules/near-api-js/src/utils/key_pair';
import {Assignable} from '../node_modules/near-api-js/src/utils/enums';

var Big = require('big.js');

const sha256 = require('js-sha256').sha256;

export class IAction extends Assignable {}

class RewardFeeFraction extends Assignable {
    'numerator': number;
    'denominator': number;
}

export class Account extends Assignable {
    'unstaked': BN;
    'stake_shares': BN;
    'unstaked_available_epoch_height': number;
}

export class AccountsMap extends Assignable {
    'deprecated': number;
    'key_index_prefix':  Uint8Array;
    'keys': AccountsMapKeys;
    'values': AccountsMapValues;
}

export class AccountsMapKeys extends Assignable { 
    'len': number;
    'prefix': Uint8Array;
}

export class AccountsMapValues extends Assignable {
    'len': number;
    'prefix': Uint8Array;
}

export class StakingContract extends Assignable {
    'owner_id': string;
    'stake_public_key': PublicKey;
    'last_epoch_height': number;
    'total_stake_shares': BN;
    'total_staked_balance': BN;
    'reward_fee_fraction': RewardFeeFraction;
    'accounts': AccountsMap;
}

export class AccountHash extends Assignable {
    'hash': Uint8Array;
}

export const SCHEMA = new Map<Function, any>([
  [
        StakingContract,
        {
            kind: 'struct',
            fields: [
                ['owner_id', 'string'],
                ['stake_public_key', PublicKey],
                ['last_epoch_height', 'u64'],
                ['last_total_balance', 'u128'],
                ['total_stake_shares', 'u128'],
                ['total_staked_balance', 'u128'],
                ['reward_fee_fraction', RewardFeeFraction],
                ['accounts', AccountsMap],
            ],
        },
    ],
    [
        RewardFeeFraction,
        {
            kind: 'struct',
            fields: [
                ['numerator', 'u32'],
                ['denominator', 'u32'],
            ],
        },
    ],
    [
        AccountsMap,
        {
            kind: 'struct',
            fields: [
                ['key_index_prefix', ['u8']],
                ['keys', AccountsMapKeys],
                ['values', AccountsMapValues],
            ],
        },
    ],
    [
        AccountsMapKeys,
        {
            kind: 'struct',
            fields: [
                ['len', 'u64'],
                ['prefix', ['u8']],
            ],
        },
    ],
    [
        AccountsMapValues,
        {
            kind: 'struct',
            fields: [
                ['len', 'u64'],
                ['prefix', ['u8']],
            ],
        },
    ],
    [
        Account,
        {
            kind: 'struct',
            fields: [
                ['unstaked', 'u128'],
                ['stake_shares', 'u128'],
                ['unstaked_available_epoch_height', 'u64'],
            ],
        },
    ],
    [
        PublicKey,
        {
            kind: 'struct',
            fields: [
                ['key', ['u8']]
            ],
        },
    ],
    [
     AccountHash,
        {
            kind: 'struct',
            fields: [['hash', ['u8']]],
        },
    ],
]);

export const ACCOUNT = new Map<Function, any>([
    [
        Account,
        {
            kind: 'struct',
            fields: [
                ['unstaked', 'u128'],
                ['stake_shares', 'u128'],
                ['unstaked_available_epoch_height', 'u64'],
            ],
        },
    ],
]);

export const ACCOUNTHASH = new Map<Function, any>([
    [
     AccountHash,
        {
            kind: 'struct',
            fields: [['hash', ['u8']]],
        },
    ],
]);

export function deserializeData(data) {

 //ar Base64={_keyStr:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",encode:function(e){var t="";var n,r,i,s,o,u,a;var f=0;e=Base64._utf8_encode(e);while(f<e.length){n=e.charCodeAt(f++);r=e.charCodeAt(f++);i=e.charCodeAt(f++);s=n>>2;o=(n&3)<<4|r>>4;u=(r&15)<<2|i>>6;a=i&63;if(isNaN(r)){u=a=64}else if(isNaN(i)){a=64}t=t+this._keyStr.charAt(s)+this._keyStr.charAt(o)+this._keyStr.charAt(u)+this._keyStr.charAt(a)}return t},decode:function(e){var t="";var n,r,i;var s,o,u,a;var f=0;e=e.replace(/[^A-Za-z0-9\+\/\=]/g,"");while(f<e.length){s=this._keyStr.indexOf(e.charAt(f++));o=this._keyStr.indexOf(e.charAt(f++));u=this._keyStr.indexOf(e.charAt(f++));a=this._keyStr.indexOf(e.charAt(f++));n=s<<2|o>>4;r=(o&15)<<4|u>>2;i=(u&3)<<6|a;t=t+String.fromCharCode(n);if(u!=64){t=t+String.fromCharCode(r)}if(a!=64){t=t+String.fromCharCode(i)}}t=Base64._utf8_decode(t);return t},_utf8_encode:function(e){e=e.replace(/\r\n/g,"\n");var t="";for(var n=0;n<e.length;n++){var r=e.charCodeAt(n);if(r<128){t+=String.fromCharCode(r)}else if(r>127&&r<2048){t+=String.fromCharCode(r>>6|192);t+=String.fromCharCode(r&63|128)}else{t+=String.fromCharCode(r>>12|224);t+=String.fromCharCode(r>>6&63|128);t+=String.fromCharCode(r&63|128)}}return t},_utf8_decode:function(e){var t="";var n=0;var r=c1=c2=0;while(n<e.length){r=e.charCodeAt(n);if(r<128){t+=String.fromCharCode(r);n++}else if(r>191&&r<224){c2=e.charCodeAt(n+1);t+=String.fromCharCode((r&31)<<6|c2&63);n+=2}else{c2=e.charCodeAt(n+1);c3=e.charCodeAt(n+2);t+=String.fromCharCode((r&15)<<12|(c2&63)<<6|c3&63);n+=3}}return t}}

  //t decodedData = Base64.decode(data);
  var dataBuffer = Buffer.from(data.values[0].value, 'base64')
  //r dataBuffer1= Buffer.from(decodedData)

  let decerialized = deserialize(SCHEMA, StakingContract , dataBuffer);

   let map = {}

   let values = data.values;

   // values are returned from the RPC state
   for (let i = 1; i < values.length; i++) {

        let key = values[i].key

        let keyBuffer = Buffer.from(key, 'base64')
        let prefix = keyBuffer.slice(0, 2).toString('utf-8')

        let index

        switch (prefix) {
            case 'ui':
                break

            case 'uk':    
                let accountHash = decodeAccountHash(AccountHash, values[i].value)
                //console.log(sha256(Buffer.from(accountHash.hash).toString('hex').toString());
                let accountHashHex = Buffer.from(accountHash.hash).toString('hex')

                let idxDataHash =  keyBuffer.slice(2);
                index = readBigUInt64LE(idxDataHash);

                map[index] = {
                    accountHashHex,
                }

                break

            case 'uv':
                let account = decodeAccount(Account, values[i].value)
                account.stake_shares = account.stake_shares.toString()
                account.unstaked = account.unstaked.toString()
                account.unstaked_available_epoch_height = account.unstaked_available_epoch_height.toString()

                let idxDataAccount =  keyBuffer.slice(2);
                index = readBigUInt64LE(idxDataAccount);

                map[index].value = account

                break
        }
    }

    console.log(map)

  decerialized.stake_public_key.key.shift();
  console.log(base_encode(decerialized.stake_public_key.key));

  console.log(decerialized.last_epoch_height.toString())
  console.log(decerialized.last_total_balance.toString())
  console.log(decerialized.total_stake_shares.toString())
  console.log(decerialized.total_staked_balance.toString())

  return decerialized

}

export function decodeAccountHash(class_type, data) {

    return deserialize(ACCOUNTHASH, class_type ,  Buffer.from(data, 'base64'));

}

export function decodeAccount(class_type, data) {

    return deserialize(ACCOUNT, class_type ,  Buffer.from(data, 'base64'));

}

export function readBigUInt64LE(buffer, offset = 0) {
  const first = buffer[offset];
  const last = buffer[offset + 7];
  if (first === undefined || last === undefined) {
    throw new Error('Out of bounds');
  }

  const lo = first +
    buffer[++offset] * 2 ** 8 +
    buffer[++offset] * 2 ** 16 +
    buffer[++offset] * 2 ** 24;

  const hi = buffer[++offset] +
    buffer[++offset] * 2 ** 8 +
    buffer[++offset] * 2 ** 16 +
    last * 2 ** 24;

  return BigInt(lo) + (BigInt(hi) << 32n);
}

'''
'''--- src/wallet/login/index.html ---
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/css/bootstrap.min.css" integrity="sha384-GJzZqFGwb1QTTN6wy59ffF1BuGJpLSa9DkKMp0DgiMDm4iYMj70gZWKYbI706tWS" crossorigin="anonymous">
</head>
<body style="background: #fff; margin-top: 3em">
  <div>For local account login, Please run the following command in shell, then enter account id here.
  </div>
  <div>
      <code id="shell-command"></code>
  </div>
  <input type="text" id="accountId" name="accountId" placeholder="Account id"></input>
  <button type="button" onClick="done()">done</button>
  <script>
    const currentUrl = new URL(window.location.href);
    const message = `NODE_ENV=local near create_account {newAccountId} --masterAccount {masterAccountId} --publicKey ${currentUrl.searchParams.get('public_key')} --initialAmount 10000000000000000000`;
    document.getElementById('shell-command').innerText = message;

    function done() {
      const successUrl = new URL(currentUrl.searchParams.get('success_url'));
      successUrl.searchParams.set('account_id', document.getElementById('accountId').value);
      successUrl.searchParams.set('public_key', currentUrl.searchParams.get('public_key'));
      window.location.assign(successUrl.toString());
    }
  </script>
</body>
</html>
'''
'''--- tsconfig.json ---
{
    "compilerOptions": {
        "esModuleInterop": true,
        "lib": [
            "es2015",
            "esnext",
            "dom"
        ],
        "module": "commonjs",
        "target": "esnext",
        "moduleResolution": "node",
        "allowSyntheticDefaultImports": true,
        "alwaysStrict": true,
        "outDir": "./lib",
        "declaration": true,
        "preserveSymlinks": true,
        "preserveWatchOutput": true,
        "pretty": false,
        "forceConsistentCasingInFileNames": true,
        "noFallthroughCasesInSwitch": true,
        "noImplicitAny": false,
        "noImplicitReturns": true,
        "noUnusedLocals": true,
        "experimentalDecorators": true,
        "resolveJsonModule": true,
    },

}
'''